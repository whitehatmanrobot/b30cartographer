racking
 * is possible.
 */


/*
 * Terminate source --- called by jpeg_finish_decompress
 * after all data has been read.  Often a no-op.
 *
 * NB: *not* called by jpeg_abort or jpeg_destroy; surrounding
 * application must deal with any cleanup that should happen even
 * for error exit.
 */

METHODDEF(void)
term_source (j_decompress_ptr cinfo)
{
  /* no work necessary here */
}


/*
 * Prepare for input from a stdio stream.
 * The caller must have already opened the stream, and is responsible
 * for closing it after finishing decompression.
 */

GLOBAL(void)
jpeg_stdio_src (j_decompress_ptr cinfo, FILE * infile)
{
  my_src_ptr src;

  /* The source object and input buffer are made permanent so that a series
   * of JPEG images can be read from the same file by calling jpeg_stdio_src
   * only before the first one.  (If we discarded the buffer at the end of
   * one image, we'd likely lose the start of the next one.)
   * This makes it unsafe to use this manager and a different source
   * manager serially with the same JPEG object.  Caveat programmer.
   */
  if (cinfo->src == NULL) {	/* first time for this JPEG object? */
    cinfo->src = (struct jpeg_source_mgr *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
				  SIZEOF(my_source_mgr));
    src = (my_src_ptr) cinfo->src;
    src->buffer = (JOCTET *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
				  INPUT_BUF_SIZE * SIZEOF(JOCTET));
  }

  src = (my_src_ptr) cinfo->src;
  src->pub.init_source = init_source;
  src->pub.fill_input_buffer = fill_input_buffer;
  src->pub.skip_input_data = skip_input_data;
  src->pub.resync_to_restart = jpeg_resync_to_restart; /* use default method */
  src->pub.term_source = term_source;
  src->infile = infile;
  src->pub.bytes_in_buffer = 0; /* forces fill_input_buffer on first read */
  src->pub.next_input_byte = NULL; /* until buffer loaded */
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\jdcolor.c ===
/*
 * jdcolor.c
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains output colorspace conversion routines.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"

#ifdef NIFTY

#include <math.h>

#define SCALE_PREC      5
#define SCALE_RND       (1 << (SCALE_PREC - 1))
#define SCALE           (1 << SCALE_PREC)
#define unscale(x)      (((x) + SCALE_RND) >> SCALE_PREC)
#define clip(x)         (((long)(x) & ~0xff) ? (((long)(x) < 0) ? 0 : 255) : (long)(x))

#endif


/* Private subobject */

typedef struct {
  struct jpeg_color_deconverter pub; /* public fields */

  /* Private state for YCC->RGB conversion */
  int * Cr_r_tab;		/* => table for Cr to R conversion */
  int * Cb_b_tab;		/* => table for Cb to B conversion */
  INT32 * Cr_g_tab;		/* => table for Cr to G conversion */
  INT32 * Cb_g_tab;		/* => table for Cb to G conversion */

#ifdef NIFTY
  /* Private state for the PhotoYCC->RGB conversion tables */
  coef_c1 *C1;
  coef_c2 *C2;
  short *xy;
#endif

} my_color_deconverter;


/* Added header info - CRK */
extern void MYCbCr2RGB(
  int columns,	  
  unsigned char *inY,
  unsigned char *inU,
  unsigned char *inV,
  unsigned char *outRGB);

extern void MYCbCrA2RGBA(
  int columns,	  
  unsigned char *inY,
  unsigned char *inU,
  unsigned char *inV,
  unsigned char *inA,
  unsigned char *outRGBA);

extern void MYCbCrA2RGBALegacy(
  int columns,	  
  unsigned char *inY,
  unsigned char *inU,
  unsigned char *inV,
  unsigned char *inA,
  unsigned char *outRGBA);
// These constants correspond to CCIR 601-1
// R = [256*Y + 359*(Cr-128)] / 256
// G = [256*Y - 88*(Cb-128) - 183*(Cr-128)] / 256
// B = [256*Y + 454*(Cb-128)] / 256
//Conventional floating point equations:
//	R = Y + 1.40200 * Cr
//	G = Y - 0.34414 * Cb - 0.71414 * Cr
//	B = Y + 1.77200 * Cb

//Ry=0100 Ru=0000 Rv=0167
//Gy=0100 Gu=FFA8 Gv=FF49
//By=0100 Bu=01C6 Bv=0000
// constants for YCbCr->RGB and YCbCrA->RGBA
static __int64 const_0		= 0x0000000000000000;
static __int64 const_sub128	= 0x0080008000800080;
static __int64 const_VUmul	= 0xFF49FFA8FF49FFA8;
static __int64 const_YVmul	= 0x0100016701000167;
static __int64 const_YUmul	= 0x010001C6010001C6;
static __int64 mask_highd	= 0xFFFFFFFF00000000;
static __int64 const_invert	= 0x00FFFFFF00FFFFFF;


//These constants correspond to the original FPX SDK
// R = [256*Y + 410*(Cr-128)] / 256
// G = [256*Y - 85*(Cb-128) - 205*(Cr-128)] / 256
// B = [256*Y + 512*(Cb-128)] / 256
//Conventional floating point equations:
// R = Y + 1.60000*(Cr)
// G = Y - 0.33333*(Cb) - 0.80000*(Cr)
// B = Y + 2.00000*(Cb)

//Ry=0100 Ru=0000 Rv=019A
//Gy=0100 Gu=FFAB Gv=FF33
//By=0100 Bu=0200 Bv=0000
// constants for YCbCr->RGB and YCbCrA->RGBA
//const __int64 const_0		= 0x0000000000000000;
//const __int64 const_sub128= 0x0080008000800080;
//const __int64 const_VUmul	= 0xFF33FFABFF33FFAB;
//const __int64 const_YVmul	= 0x0100019A0100019A;
//const __int64 const_YUmul	= 0x0001000200010002;
//const __int64 mask_highd	= 0xFFFFFFFF00000000;
//const __int64 const_invert= 0x00FFFFFF00FFFFFF;

/* End of added info - CRK */



typedef my_color_deconverter * my_cconvert_ptr;

#ifdef NIFTY

/*
 * Initialize tables for PhotoYCC->RGB colorspace conversion.
 */

LOCAL (void)
build_pycc_rgb_table (j_decompress_ptr cinfo)
{
  my_cconvert_ptr cconvert = (my_cconvert_ptr)cinfo->cconvert;
  INT32 i;

  cconvert->C1 = (coef_c1 *)
	(*cinfo->mem->alloc_small)((j_common_ptr) cinfo, JPOOL_IMAGE,
				   256 * SIZEOF(coef_c1));
  cconvert->C2 = (coef_c2 *)
	(*cinfo->mem->alloc_small)((j_common_ptr) cinfo, JPOOL_IMAGE,
				   256 * SIZEOF(coef_c2));
  cconvert->xy = (short *)
	(*cinfo->mem->alloc_small)((j_common_ptr) cinfo, JPOOL_IMAGE,
				   256 * SIZEOF(short));

  for (i = 0; i < 256; i++) {
    cconvert->xy[i] = (short)((double)i * 1.3584 * SCALE);
    cconvert->C2[i].r = (short)(i * 1.8215 * SCALE);
    cconvert->C1[i].g = (short)(i * -0.4303 * SCALE);
    cconvert->C2[i].g = (short)(i * -0.9271 * SCALE);
    cconvert->C1[i].b = (short)(i * 2.2179 * SCALE);
  }
}

/*
 * PhotoYCC->RGB colorspace conversion.
 */
METHODDEF (void)
pycc_rgb_convert (j_decompress_ptr cinfo,
                 JSAMPIMAGE input_buf, JDIMENSION input_row,
                 JSAMPARRAY output_buf, int num_rows)
{
  my_cconvert_ptr cconvert = (my_cconvert_ptr)cinfo->cconvert;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JSAMPROW outptr;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
  unsigned char y, c1, c2;
  short ri, gi, bi,
        offsetR, offsetG, offsetB;
  register short *xy = cconvert->xy;
  register coef_c1 *C1 = cconvert->C1;
  register coef_c2 *C2 = cconvert->C2;
 
/*
  for (i = 0; i < 256; i++) {
    xy[i] = (short)((double)i * 1.3584 * SCALE);
    C2[i].r = (short)(i * 1.8215 * SCALE);
    C1[i].g = (short)(i * -0.4303 * SCALE);
    C2[i].g = (short)(i * -0.9271 * SCALE);
    C1[i].b = (short)(i * 2.2179 * SCALE);
  }
*/
 
  offsetR = (short)(-249.55 * SCALE);
  offsetG = (short)( 194.14 * SCALE);
  offsetB = (short)(-345.99 * SCALE);
 
  while (--num_rows >= 0) {
    inptr0 = input_buf[0][input_row];
    inptr1 = input_buf[1][input_row];
    inptr2 = input_buf[2][input_row];
    input_row++;
    outptr = *output_buf++;
    for (col = 0; col < num_cols; col++) {
      y = GETJSAMPLE(inptr0[col]);
      c1 = GETJSAMPLE(inptr1[col]);
      c2 = GETJSAMPLE(inptr2[col]);
 
      ri = xy[y] + C2[c2].r + offsetR;
      gi = xy[y] + C1[c1].g + C2[c2].g + offsetG;
      bi = xy[y] + C1[c1].b + offsetB;
 
      ri = unscale(ri);
      gi = unscale(gi);
      bi = unscale(bi);
 
      outptr[RGB_RED] = (JSAMPLE)clip(ri);
      outptr[RGB_GREEN] = (JSAMPLE)clip(gi);
      outptr[RGB_BLUE] = (JSAMPLE)clip(bi);
      outptr+=3;
    }
  }
}


/*
 * PhotoYCC->RGBA colorspace conversion.
 */
METHODDEF (void)
pycc_rgba_convert (j_decompress_ptr cinfo,
                 JSAMPIMAGE input_buf, JDIMENSION input_row,
                 JSAMPARRAY output_buf, int num_rows)
{
  my_cconvert_ptr cconvert = (my_cconvert_ptr)cinfo->cconvert;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JSAMPROW outptr;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
  unsigned char y, c1, c2;
  short ri, gi, bi,
        offsetR, offsetG, offsetB;
  register short *xy = cconvert->xy;
  register coef_c1 *C1 = cconvert->C1;
  register coef_c2 *C2 = cconvert->C2;
 
  offsetR = (short)(-249.55 * SCALE);
  offsetG = (short)( 194.14 * SCALE);
  offsetB = (short)(-345.99 * SCALE);
 
  while (--num_rows >= 0) {
    inptr0 = input_buf[0][input_row];
    inptr1 = input_buf[1][input_row];
    inptr2 = input_buf[2][input_row];
    input_row++;
    outptr = *output_buf++;
    for (col = 0; col < num_cols; col++) {
      y = GETJSAMPLE(inptr0[col]);
      c1 = GETJSAMPLE(inptr1[col]);
      c2 = GETJSAMPLE(inptr2[col]);
 
      ri = xy[y] + C2[c2].r + offsetR;
      gi = xy[y] + C1[c1].g + C2[c2].g + offsetG;
      bi = xy[y] + C1[c1].b + offsetB;
 
      ri = unscale(ri);
      gi = unscale(gi);
      bi = unscale(bi);
 
      outptr[RGB_RED] = (JSAMPLE)clip(ri);
      outptr[RGB_GREEN] = (JSAMPLE)clip(gi);
      outptr[RGB_BLUE] = (JSAMPLE)clip(bi);
	  outptr[3] = 255;
      outptr+=4;
    }
  }
}

#endif

/**************** YCbCr -> RGB conversion: most common case **************/

/*
 * YCbCr is defined per CCIR 601-1, except that Cb and Cr are
 * normalized to the range 0..MAXJSAMPLE rather than -0.5 .. 0.5.
 * The conversion equations to be implemented are therefore
 *	R = Y                + 1.40200 * Cr
 *	G = Y - 0.34414 * Cb - 0.71414 * Cr
 *	B = Y + 1.77200 * Cb
 * where Cb and Cr represent the incoming values less CENTERJSAMPLE.
 * (These numbers are derived from TIFF 6.0 section 21, dated 3-June-92.)
 *
 * To avoid floating-point arithmetic, we represent the fractional constants
 * as integers scaled up by 2^16 (about 4 digits precision); we have to divide
 * the products by 2^16, with appropriate rounding, to get the correct answer.
 * Notice that Y, being an integral input, does not contribute any fraction
 * so it need not participate in the rounding.
 *
 * For even more speed, we avoid doing any multiplications in the inner loop
 * by precalculating the constants times Cb and Cr for all possible values.
 * For 8-bit JSAMPLEs this is very reasonable (only 256 entries per table);
 * for 12-bit samples it is still acceptable.  It's not very reasonable for
 * 16-bit samples, but if you want lossless storage you shouldn't be changing
 * colorspace anyway.
 * The Cr=>R and Cb=>B values can be rounded to integers in advance; the
 * values for the G calculation are left scaled up, since we must add them
 * together before rounding.
 */

#define SCALEBITS	16	/* speediest right-shift on some machines */
#define ONE_HALF	((INT32) 1 << (SCALEBITS-1))
#define FIX(x)		((INT32) ((x) * (1L<<SCALEBITS) + 0.5))


/*
 * Initialize tables for YCC->RGB colorspace conversion.
 */

LOCAL(void)
build_ycc_rgb_table (j_decompress_ptr cinfo)
{
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  int i;
  INT32 x;
  SHIFT_TEMPS

  cconvert->Cr_r_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cb_b_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cr_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(MAXJSAMPLE+1) * SIZEOF(INT32));
  cconvert->Cb_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(MAXJSAMPLE+1) * SIZEOF(INT32));

  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
    /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
    /* The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE */
    /* Cr=>R value is nearest int to 1.40200 * x */
    cconvert->Cr_r_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
    /* Cb=>B value is nearest int to 1.77200 * x */
    cconvert->Cb_b_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
    /* Cr=>G value is scaled-up -0.71414 * x */
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
    /* Cb=>G value is scaled-up -0.34414 * x */
    /* We also add in ONE_HALF so that need not do it in inner loop */
    cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
  }
}


/*
 * Convert some rows of samples to the output colorspace.
 *
 * Note that we change from noninterleaved, one-plane-per-component format
 * to interleaved-pixel format.  The output buffer is therefore three times
 * as wide as the input buffer.
 * A starting row offset is provided only for the input buffer.  The caller
 * can easily adjust the passed output_buf value to accommodate any row
 * offset required on that side.
 */


METHODDEF(void)
ycc_rgb_convert (j_decompress_ptr cinfo,
		 JSAMPIMAGE input_buf, JDIMENSION input_row,
		 JSAMPARRAY output_buf, int num_rows)
{
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
// Alignment variables - CRK
  JDIMENSION tail_cols = num_cols&7;
  JDIMENSION mmx_cols=num_cols&~7;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
  SHIFT_TEMPS
#ifdef _X86_  
  if(vfMMXMachine) { //MMX Code - CRK
	while (--num_rows >= 0) {
		inptr0 = input_buf[0][input_row];
		inptr1 = input_buf[1][input_row];
		inptr2 = input_buf[2][input_row];
		input_row++;
		outptr = *output_buf++;
		MYCbCr2RGB(mmx_cols, inptr0, inptr1, inptr2, outptr);
		
		outptr += 3*mmx_cols;
		for (col = mmx_cols; col < num_cols; col++) {
		  y  = GETJSAMPLE(inptr0[col]);
		  cb = GETJSAMPLE(inptr1[col]);
		  cr = GETJSAMPLE(inptr2[col]);
		  /* Range-limiting is essential due to noise introduced by DCT losses. */
		  outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
		  outptr[RGB_GREEN] = range_limit[y +
				      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
							 SCALEBITS))];
		  outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
		  outptr += RGB_PIXELSIZE;
		}
	}
__asm emms	
  }
#else
    if (0) { }
#endif    
  else {
	while	(--num_rows >= 0) {
		inptr0 = input_buf[0][input_row];
		inptr1 = input_buf[1][input_row];
		inptr2 = input_buf[2][input_row];
		input_row++;
		outptr = *output_buf++;

		for (col = 0; col < num_cols; col++) {
		  y  = GETJSAMPLE(inptr0[col]);
		  cb = GETJSAMPLE(inptr1[col]);
		  cr = GETJSAMPLE(inptr2[col]);
		  /* Range-limiting is essential due to noise introduced by DCT losses. */
		  outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
		  outptr[RGB_GREEN] = range_limit[y +
				      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
							 SCALEBITS))];
		  outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
		  outptr += RGB_PIXELSIZE;
		}	
	}
  }
}



/**************** Cases other than YCbCr -> RGB **************/


/*
 * Color conversion for no colorspace change: just copy the data,
 * converting from separate-planes to interleaved representation.
 */

METHODDEF(void)
null_convert (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION input_row,
	      JSAMPARRAY output_buf, int num_rows)
{
  register JSAMPROW inptr, outptr;
  register JDIMENSION count;
  register int num_components = cinfo->num_components;
  JDIMENSION num_cols = cinfo->output_width;
  int ci;

  while (--num_rows >= 0) {
    for (ci = 0; ci < num_components; ci++) {
      inptr = input_buf[ci][input_row];
      outptr = output_buf[0] + ci;
      for (count = num_cols; count > 0; count--) {
	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
	outptr += num_components;
      }
    }
    input_row++;
    output_buf++;
  }
}


/*
 * Color conversion for grayscale: just copy the data.
 * This also works for YCbCr -> grayscale conversion, in which
 * we just copy the Y (luminance) component and ignore chrominance.
 */

METHODDEF(void)
grayscale_convert (j_decompress_ptr cinfo,
		   JSAMPIMAGE input_buf, JDIMENSION input_row,
		   JSAMPARRAY output_buf, int num_rows)
{
  jcopy_sample_rows(input_buf[0], (int) input_row, output_buf, 0,
		    num_rows, cinfo->output_width);
}

#ifdef NIFTY

//Not really a colour conversion but special one for Picture It!
//Copies 3 channel data and adds an alpha
METHODDEF(void)
rgb_rgba_convert (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION input_row,
	      JSAMPARRAY output_buf, int num_rows)
{
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
  /* copy these pointers into registers if possible */
  SHIFT_TEMPS
 
  while (--num_rows >= 0) {
    inptr0 = input_buf[0][input_row];
    inptr1 = input_buf[1][input_row];
    inptr2 = input_buf[2][input_row];
    input_row++;
    outptr = *output_buf++;
    for (col = 0; col < num_cols; col++) {
      outptr[0] = GETJSAMPLE(inptr0[col]);
      outptr[1] = GETJSAMPLE(inptr1[col]);
      outptr[2] = GETJSAMPLE(inptr2[col]);
      /* Alpha is added as fully opaque */
      outptr[3] = 255;  /* don't need GETJSAMPLE here */
      outptr += 4;
    }
  }
}



METHODDEF (void)
ycbcra_rgba_convert (j_decompress_ptr cinfo,
                   JSAMPIMAGE input_buf, JDIMENSION input_row,
                   JSAMPARRAY output_buf, int num_rows)
{
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2, inptr3;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
  // Alignment variables - CRK
  JDIMENSION tail_cols = num_cols&7;
  JDIMENSION mmx_cols=num_cols&~7;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
  SHIFT_TEMPS 
#ifdef _X86_  
  if(vfMMXMachine) { //MMX Code - CRK
	while (--num_rows >= 0) {
		inptr0 = input_buf[0][input_row];
		inptr1 = input_buf[1][input_row];
		inptr2 = input_buf[2][input_row];
		inptr3 = input_buf[3][input_row];
		input_row++;
		outptr = *output_buf++;
		MYCbCrA2RGBA(mmx_cols, inptr0, inptr1, inptr2, inptr3, outptr);
		
		outptr += 4*mmx_cols;
		for (col = mmx_cols; col < num_cols; col++) {
		  y  = GETJSAMPLE(inptr0[col]);
		  cb = GETJSAMPLE(inptr1[col]);
		  cr = GETJSAMPLE(inptr2[col]);
		  /* Range-limiting is essential due to noise introduced by DCT losses. */
		  outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
		  outptr[RGB_GREEN] = range_limit[y +
				      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
							 SCALEBITS))];
		  outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
		  outptr[3] = inptr3[col];
		  outptr += 4;
		}
	}	
	__asm emms
  }
#else
    if (0) { }
#endif    
  else {
	while (--num_rows >= 0) {
		inptr0 = input_buf[0][input_row];
		inptr1 = input_buf[1][input_row];
		inptr2 = input_buf[2][input_row];
		inptr3 = input_buf[3][input_row];
		input_row++;
		outptr = *output_buf++;
		for (col = 0; col < num_cols; col++) {
		  y  = GETJSAMPLE(inptr0[col]);
		  cb = GETJSAMPLE(inptr1[col]);
		  cr = GETJSAMPLE(inptr2[col]);
		  /* Range-limiting is essential due to noise introduced by DCT losses. */
		  outptr[RGB_RED] = range_limit[(y + Crrtab[cr])];   /* red */
		  outptr[RGB_GREEN] = range_limit[(y +                 /* green */
		                          ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
		                                             SCALEBITS)))];
		  outptr[RGB_BLUE] = range_limit[(y + Cbbtab[cb])];   /* blue */
		  /* Alpha passes through unchanged */
		  outptr[3] = inptr3[col];  /* don't need GETJSAMPLE here */
		  outptr += 4;
		}
	 }
  }
}





METHODDEF (void)
ycbcralegacy_rgba_convert (j_decompress_ptr cinfo,
                   JSAMPIMAGE input_buf, JDIMENSION input_row,
                   JSAMPARRAY output_buf, int num_rows)
{
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2, inptr3;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
  // Alignment variables - CRK
  JDIMENSION tail_cols = num_cols&7;
  JDIMENSION mmx_cols=num_cols&~7;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
  SHIFT_TEMPS
#ifdef _X86_  
  if(vfMMXMachine) { //MMX Code - CRK
	while (--num_rows >= 0) {
		inptr0 = input_buf[0][input_row];
		inptr1 = input_buf[1][input_row];
		inptr2 = input_buf[2][input_row];
		inptr3 = input_buf[3][input_row];
		input_row++;
		outptr = *output_buf++;
		MYCbCrA2RGBALegacy(mmx_cols, inptr0, inptr1, inptr2, inptr3, outptr);
		
		outptr += 4*mmx_cols;
		for (col = mmx_cols; col < num_cols; col++) {
		  y  = GETJSAMPLE(inptr0[col]);
		  cb = GETJSAMPLE(inptr1[col]);
		  cr = GETJSAMPLE(inptr2[col]);
		  /* Range-limiting is essential due to noise introduced by DCT losses. */
		  outptr[RGB_RED] =   range_limit[MAXJSAMPLE - (y + Crrtab[cr])];
		  outptr[RGB_GREEN] = range_limit[MAXJSAMPLE - (y +
				      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
							 SCALEBITS)))];
		  outptr[RGB_BLUE] =  range_limit[MAXJSAMPLE - (y + Cbbtab[cb])];
		  outptr[3] = inptr3[col];
		  outptr += 4;
		}
	 }	
	__asm emms
  }
#else
    if (0) { }
#endif    
  else {
	while (--num_rows >= 0) {
		inptr0 = input_buf[0][input_row];
		inptr1 = input_buf[1][input_row];
		inptr2 = input_buf[2][input_row];
		inptr3 = input_buf[3][input_row];
		input_row++;
		outptr = *output_buf++;
		for (col = 0; col < num_cols; col++) {
		  y  = GETJSAMPLE(inptr0[col]);
		  cb = GETJSAMPLE(inptr1[col]);
		  cr = GETJSAMPLE(inptr2[col]);
		  /* Range-limiting is essential due to noise introduced by DCT losses. */
		  outptr[RGB_RED] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];   /* red */
		  outptr[RGB_GREEN] = range_limit[MAXJSAMPLE - (y +                 /* green */
		              ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
			                 SCALEBITS)))];
		  outptr[RGB_BLUE] = range_limit[MAXJSAMPLE - (y + Cbbtab[cb])];   /* blue */
		  /* Alpha passes through unchanged */
		  outptr[3] = inptr3[col];  /* don't need GETJSAMPLE here */
		  outptr += 4;
		}
	}
  }
}



METHODDEF (void)
ycbcr_rgba_convert (j_decompress_ptr cinfo,
		 JSAMPIMAGE input_buf, JDIMENSION input_row,
		 JSAMPARRAY output_buf, int num_rows)
{
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
  SHIFT_TEMPS

  while (--num_rows >= 0) {
    inptr0 = input_buf[0][input_row];
    inptr1 = input_buf[1][input_row];
    inptr2 = input_buf[2][input_row];
    input_row++;
    outptr = *output_buf++;
    for (col = 0; col < num_cols; col++) {
      y  = GETJSAMPLE(inptr0[col]);
      cb = GETJSAMPLE(inptr1[col]);
      cr = GETJSAMPLE(inptr2[col]);
      /* Range-limiting is essential due to noise introduced by DCT losses. */
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
      outptr[RGB_GREEN] = range_limit[y +
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
						 SCALEBITS))];
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
	  outptr[3] = 255;
      outptr += 4;
    }
  }
}

#endif

/*
 * Adobe-style YCCK->CMYK conversion.
 * We convert YCbCr to R=1-C, G=1-M, and B=1-Y using the same
 * conversion as above, while passing K (black) unchanged.
 * We assume build_ycc_rgb_table has been called.
 */

METHODDEF(void)
ycck_cmyk_convert (j_decompress_ptr cinfo,
		   JSAMPIMAGE input_buf, JDIMENSION input_row,
		   JSAMPARRAY output_buf, int num_rows)
{
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2, inptr3;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
  SHIFT_TEMPS

  while (--num_rows >= 0) {
    inptr0 = input_buf[0][input_row];
    inptr1 = input_buf[1][input_row];
    inptr2 = input_buf[2][input_row];
    inptr3 = input_buf[3][input_row];
    input_row++;
    outptr = *output_buf++;
    for (col = 0; col < num_cols; col++) {
      y  = GETJSAMPLE(inptr0[col]);
      cb = GETJSAMPLE(inptr1[col]);
      cr = GETJSAMPLE(inptr2[col]);
      /* Range-limiting is essential due to noise introduced by DCT losses. */
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
      outptr[1] = range_limit[MAXJSAMPLE - (y +			/* green */
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
						 SCALEBITS)))];
      outptr[2] = range_limit[MAXJSAMPLE - (y + Cbbtab[cb])];	/* blue */
      /* K passes through unchanged */
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
      outptr += 4;
    }
  }
}


/*
 * Empty method for start_pass.
 */

METHODDEF(void)
start_pass_dcolor (j_decompress_ptr cinfo)
{
  /* no work needed */
}


/*
 * Module initialization routine for output colorspace conversion.
 */

GLOBAL(void)
jinit_color_deconverter (j_decompress_ptr cinfo)
{
  my_cconvert_ptr cconvert;
  int ci;

  cconvert = (my_cconvert_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_color_deconverter));
  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
  cconvert->pub.start_pass = start_pass_dcolor;

  /* Make sure num_components agrees with jpeg_color_space */
  switch (cinfo->jpeg_color_space) {
  case JCS_GRAYSCALE:
    if (cinfo->num_components != 1)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;
#ifdef NIFTY
  case JCS_YCC:
    if (cinfo->num_components != 3)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;
  case JCS_YCCA:
    if (cinfo->num_components != 4)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;
  case JCS_RGBA:
    if (cinfo->num_components != 4)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;
  case JCS_YCbCrA:
    if (cinfo->num_components != 4)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;
  case JCS_YCbCrALegacy:
    if (cinfo->num_components != 4)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;

#endif
  case JCS_RGB:
  case JCS_YCbCr:
    if (cinfo->num_components != 3)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;

  case JCS_CMYK:
  case JCS_YCCK:
    if (cinfo->num_components != 4)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;

  default:			/* JCS_UNKNOWN can be anything */
    if (cinfo->num_components < 1)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;
  }

  /* Set out_color_components and conversion method based on requested space.
   * Also clear the component_needed flags for any unused components,
   * so that earlier pipeline stages can avoid useless computation.
   */

  switch (cinfo->out_color_space) {
  case JCS_GRAYSCALE:
    cinfo->out_color_components = 1;
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
	cinfo->jpeg_color_space == JCS_YCbCr) {
      cconvert->pub.color_convert = grayscale_convert;
      /* For color->grayscale conversion, only the Y (0) component is needed */
      for (ci = 1; ci < cinfo->num_components; ci++)
	cinfo->comp_info[ci].component_needed = FALSE;
    } else
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;

  case JCS_RGB:
    cinfo->out_color_components = RGB_PIXELSIZE;
    if (cinfo->jpeg_color_space == JCS_YCbCr) {
      cconvert->pub.color_convert = ycc_rgb_convert;
      build_ycc_rgb_table(cinfo);
    } else if (cinfo->jpeg_color_space == JCS_RGB && RGB_PIXELSIZE == 3) {
      cconvert->pub.color_convert = null_convert;
#ifdef NIFTY
    } else if (cinfo->jpeg_color_space == JCS_YCC) {
      cconvert->pub.color_convert = pycc_rgb_convert;
      build_pycc_rgb_table(cinfo);
#endif
	} else
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;

#ifdef NIFTY
  case JCS_RGBA:
    cinfo->out_color_components = 4;
    if (cinfo->jpeg_color_space == JCS_YCbCrA) {
      cconvert->pub.color_convert = ycbcra_rgba_convert;
      build_ycc_rgb_table(cinfo);
	}else if (cinfo->jpeg_color_space == JCS_YCbCrALegacy) {
      cconvert->pub.color_convert = ycbcralegacy_rgba_convert;
      build_ycc_rgb_table(cinfo);
    }else if (cinfo->jpeg_color_space == JCS_YCbCr) {
      cconvert->pub.color_convert = ycbcr_rgba_convert;
      build_ycc_rgb_table(cinfo);
	}else if (cinfo->jpeg_color_space == JCS_RGBA) {
      cconvert->pub.color_convert = null_convert;
    }else if (cinfo->jpeg_color_space == JCS_RGB) {
      cconvert->pub.color_convert = rgb_rgba_convert;
	}else if (cinfo->jpeg_color_space == JCS_YCC) {
      cconvert->pub.color_convert = pycc_rgba_convert;
      build_pycc_rgb_table(cinfo);
	} else {
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    }
    break;
#endif


  case JCS_CMYK:
    cinfo->out_color_components = 4;
    if (cinfo->jpeg_color_space == JCS_YCCK) {
      cconvert->pub.color_convert = ycck_cmyk_convert;
      build_ycc_rgb_table(cinfo);
    } else if (cinfo->jpeg_color_space == JCS_CMYK) {
      cconvert->pub.color_convert = null_convert;
    } else
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;

  default:
    /* Permit null conversion to same output space */
    if (cinfo->out_color_space == cinfo->jpeg_color_space) {
      cinfo->out_color_components = cinfo->num_components;
      cconvert->pub.color_convert = null_convert;
    } else			/* unsupported non-null conversion */
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;
  }

  if (cinfo->quantize_colors)
    cinfo->output_components = 1; /* single colormapped output component */
  else
    cinfo->output_components = cinfo->out_color_components;
}

#ifdef _X86_

//  MMX assembly code editions begin here - CRK

// Turn off "No EMMS instruction" warning
#pragma warning(disable : 4799)

void MYCbCr2RGB(
  int columns,	  
  unsigned char *inY,
  unsigned char *inU,
  unsigned char *inV,
  unsigned char *outRGB)
{
  _asm {
	// Inits
	mov		eax, inY
	mov		ecx, inV

	mov		edi, columns
	mov		ebx, inU

	shr		edi, 2				; number of loops = cols/4 
	mov		edx, outRGB

YUVtoRGB:
	movd	mm0, [eax]			; 0/0/0/0/Y3/Y2/Y1/Y0
	pxor	mm7, mm7			; use mm7 as const_0 to achieve better pairing at start

	movd	mm2, [ebx]			; 0/0/0/0/U3/U2/U1/U0
	punpcklbw	mm0, mm7		; Y3/Y2/Y1/Y0

	movd	mm3, [ecx]			; 0/0/0/0/V3/V2/V1/V0
	punpcklbw	mm2, mm7		; U3/U2/U1/U0
	
	psubsw	mm2, const_sub128	; U3'/U2'/U1'/U0'
	punpcklbw	mm3, mm7		; V3/V2/V1/V0

	psubsw	mm3, const_sub128	; V3'/V2'/V1'/V0'
	movq	mm4, mm2
	
	punpcklwd	mm2, mm3		; V1'/U1'/V0'/U0'
	movq	mm1, mm0			

	pmaddwd	mm2, const_VUmul	; gvV1'+guU1'/gvV0'+guU0'
	psllw	mm1, 8				; Y3*256/Y2*256/Y1*256/Y0*256

	movq	mm6, mm1
	punpcklwd	mm1, mm7		; Y1*256/Y0*256
	
	punpckhwd	mm6, mm7		; Y3*256/Y2*256
	movq	mm5, mm4

	punpckhwd	mm5, mm3		; V3'/U3'/V2'/U2'
	paddd	mm2, mm1			; G1*256/G0*256		(mm1 free)

	pmaddwd	mm5, const_VUmul	; gvV3'+guU3'/gvV2'+guU2'
	movq	mm1, mm3			;		(using mm1)	
	
	punpcklwd	mm3, mm0		; Y1/V1'/Y0/V0'
	movq	mm7, mm4			; This wipes out the zero constant
	
	pmaddwd	mm3, const_YVmul	; ryY1+rvV1'/ryY0+rvV0'
	psrad	mm2, 8				; G1/G0

	paddd	mm5, mm6			; G3*256/G2*256		(mm6 free)
	punpcklwd	mm4, mm0		; Y1/U1'/Y0/U0'

	pmaddwd	mm4, const_YUmul	; byY1+buU1'/byY0'+buU0'
	psrad	mm5, 8				; G3/G2

	psrad	mm3, 8				; R1/R0

	punpckhwd	mm7 , mm0		; Y3/U3'/Y2/U2'
	
	psrad	mm4, 8				; B1/B0
	movq	mm6, mm3

	pmaddwd	mm7, const_YUmul	; byY3+buU3'/byY2'+buU2'
	punpckhwd	mm1, mm0		; Y3/V3'/Y2/V2'		
	
	pmaddwd	mm1, const_YVmul	; ryY3+rvV3'/ryY2+rvV2'
	punpckldq	mm3, mm2		; G0/R0

	punpckhdq	mm6, mm2		; G1/R1			(mm2 free)
	movq	mm0, mm4

	psrad	mm7, 8				; B3/B2
	
	punpckldq	mm4, const_0	; 0/B0

	punpckhdq	mm0, const_0	; 0/B1

	psrad	mm1, 8				; R3/R2

	packssdw	mm3, mm4		; 0/B0/G0/R0	(mm4 free)
	movq	mm2, mm1

	packssdw	mm6, mm0		; 0/B1/G1/R1	(mm0 free)

	packuswb mm3, mm6			; 0/B1/G1/R1/0/B0/G0/R0  (mm6 free)

	punpckldq	mm2, mm5		; G2/R2
	movq	mm4, mm7

	punpckhdq	mm1, mm5		; G3/R3 (mm5 done)

	punpckldq	mm7, const_0	; 0/B2		(change this line for alpha code)

	punpckhdq	mm4, const_0	; 0/B3		(change this line for alpha code)

	movq		mm0, mm3		
	packssdw	mm2, mm7		; 0/B2/G2/R2

	pand		mm3, mask_highd	; 0/B1/G1/R1/0/0/0/0
	packssdw	mm1, mm4		; 0/B3/G3/R3

	psrlq		mm3, 8			; 0/0/B1/G1/R1/0/0/0
	add			edx, 12

	por			mm0, mm3		; 0/0/?/?/R1/B0/G0/R0 
	packuswb    mm2, mm1		; 0/B3/G3/R3/0/B2/G2/R2

	psrlq		mm3, 32			; 0/0/0/0/0/0/B1/G1
	add			eax, 4

	movd		[edx][-12], mm0		; correct for add		
	punpcklwd	mm3, mm2		; 0/B2/0/0/G2/R2/B1/G1

	psrlq		mm2, 24			; 0/0/0/0/B3/G3/R3/0
	add			ecx, 4

	movd		[edx][-8], mm3	; correct for previous add
	psrlq		mm3, 48			; 0/0/0/0/0/0/0/B2
	
	por			mm2, mm3		; 0/0/0/0/B3/G3/R3/0
	add			ebx, 4

	movd		[edx][-4], mm2	; correct for previous add

	dec			edi
	jnz			YUVtoRGB		; Do 12 more bytes if not zero

	//emms       // commented out since it is done after the IDCT

  } // end of _asm
}

void MYCbCrA2RGBA(
  int columns,	  
  unsigned char *inY,
  unsigned char *inU,
  unsigned char *inV,
  unsigned char *inA,
  unsigned char *outRGBA)
{

	__int64		tempA;
  _asm {
	// Inits
	mov		eax, inY
	mov		ecx, inV

	mov		edi, columns
	mov		ebx, inU

	shr		edi, 2				; number of loops = cols/4 
	mov		edx, outRGBA

	mov		esi, inA

YUVAtoRGBA:
	movd	mm0, [eax]			; 0/0/0/0/Y3/Y2/Y1/Y0
	pxor	mm7, mm7			; added this in to achieve better pairing at start

	movd	mm2, [ebx]			; 0/0/0/0/U3/U2/U1/U0
	punpcklbw	mm0, mm7		; Y3/Y2/Y1/Y0

	movd	mm3, [ecx]			; 0/0/0/0/V3/V2/V1/V0
	punpcklbw	mm2, mm7		; U3/U2/U1/U0
	
	psubsw	mm2, const_sub128	; U3'/U2'/U1'/U0'
	punpcklbw	mm3, mm7		; V3/V2/V1/V0

	psubsw	mm3, const_sub128	; V3'/V2'/V1'/V0'
	movq	mm4, mm2
	
	punpcklwd	mm2, mm3		; V1'/U1'/V0'/U0'
	movq	mm1, mm0		

	pmaddwd	mm2, const_VUmul	; guU1'+gvV1'/guU0'+gvV0'
	psllw	mm1, 8				; Y3*256/Y2*256/Y1*256/Y0*256

	movq	mm6, mm1
	punpcklwd	mm1, mm7		; Y1*256/Y0*256

	punpckhwd	mm6, mm7		; Y3*256/Y2*256
	movq	mm5, mm4

	punpckhwd	mm5, mm3		; V3'/U3'/V2'/U2'
	paddd	mm2, mm1			; G1*256/G0*256		(mm1 free)

	pmaddwd	mm5, const_VUmul	; gvV3'+guU3'/gvV2'+guU2'
	movq	mm1, mm3			;		(using mm1)	
	
	punpcklwd	mm3, mm0		; Y1/V1'/Y0/V0'
	movq	mm7, mm4			; This wipes out the zero constant
	
	pmaddwd	mm3, const_YVmul	; ryY1+rvV1'/ryY0+rvV0'
	psrad	mm2, 8				; G1/G0 

	paddd	mm5, mm6			; G3*256/G2*256		(mm6 free)
	punpcklwd	mm4, mm0		; Y1/U1'/Y0/U0'

	pmaddwd	mm4, const_YUmul	; byY1+buU1'/byY0'+buU0'
	psrad	mm5, 8				; G3/G2

	psrad	mm3, 8				; R1/R0

	punpckhwd	mm7 , mm0		; Y3/U3'/Y2/U2'
	movq	mm6, mm3

	pmaddwd	mm7, const_YUmul	; byY3+buU3'/byY2'+buU2'
	punpckhwd	mm1, mm0		; Y3/V3'/Y2/V2'		

	pmaddwd	mm1, const_YVmul	; ryY3+rvV3'/ryY2+rvV2'
	punpckldq	mm3, mm2		; G0/R0

	punpckhdq	mm6, mm2		; G1/R1			(mm2 free)

	movd	mm2, [esi]			; 0/0/0/0/A3/A2/A1/A0
	psrad	mm4, 8				; B1/B0

	punpcklbw	mm2, const_0	; A3/A2/A1/A0

	psrad	mm1, 8				; R3/R2
	movq	mm0, mm4			; B1/B0

	movq	tempA, mm2
	psrad	mm7, 8				; B3/B2

	punpcklwd	mm2, const_0	; A1/A0

	punpckldq	mm4, mm2		; A0/B0

	punpckhdq	mm0, mm2		; A1/B1
	movq	mm2, mm1

	packssdw	mm3, mm4		; A0/B0/G0/R0	(mm4 free)

	packssdw	mm6, mm0		; A1/B1/G1/R1	(mm0 free)
	movq	mm4, mm7

	packuswb mm3, mm6			; A1/B1/G1/R1/A0/B0/G0/R0  (mm6 free)
	movq		mm6, tempA		; A3/A2/A1/A0

	punpckldq	mm2, mm5		; G2/R2

	movq	[edx], mm3
	punpckhdq	mm1, mm5		; G3/R3 (mm5 done)

	punpckhwd	mm6, const_0	; A3/A2

	punpckldq	mm7, mm6		; A2/B2	
	add			eax, 4

	punpckhdq	mm4, mm6		; A3/B3		
	add			ebx, 4
		
	packssdw	mm2, mm7		; A2/B2/G2/R2
	add			ecx, 4

	packssdw	mm1, mm4		; A3/B3/G3/R3
	add			edx, 16

	packuswb    mm2, mm1		; A3/B3/G3/R3/A2/B2/G2/R2
	add			esi, 4

	movq	[edx][-8], mm2		; Post-add correction on address

	dec			edi
	jnz			YUVAtoRGBA		; Do 12 more bytes if not zero

	//emms       // commented out since it is done after the IDCT

  } // end of _asm
}

void MYCbCrA2RGBALegacy(
  int columns,	  
  unsigned char *inY,
  unsigned char *inU,
  unsigned char *inV,
  unsigned char *inA,
  unsigned char *outRGBA)
{

	__int64		tempA;
  _asm {
	// Inits

	mov		eax, inY
	mov		ecx, inV

	mov		edi, columns
	mov		ebx, inU

	shr		edi, 2				; number of loops = cols/4 
	mov		edx, outRGBA

	mov		esi, inA

YUVAtoRGBA:
	movd	mm0, [eax]			; 0/0/0/0/Y3/Y2/Y1/Y0
	pxor	mm7, mm7			; added this in to achieve better pairing at start

	movd	mm2, [ebx]			; 0/0/0/0/U3/U2/U1/U0
	punpcklbw	mm0, mm7		; Y3/Y2/Y1/Y0

	movd	mm3, [ecx]			; 0/0/0/0/V3/V2/V1/V0
	punpcklbw	mm2, mm7		; U3/U2/U1/U0
	
	psubsw	mm2, const_sub128	; U3'/U2'/U1'/U0'
	punpcklbw	mm3, mm7		; V3/V2/V1/V0

	psubsw	mm3, const_sub128	; V3'/V2'/V1'/V0'
	movq	mm4, mm2
	
	punpcklwd	mm2, mm3		; V1'/U1'/V0'/U0'
	movq	mm1, mm0		

	pmaddwd	mm2, const_VUmul	; guU1'+gvV1'/guU0'+gvV0'
	psllw	mm1, 8				; Y3*256/Y2*256/Y1*256/Y0*256

	movq	mm6, mm1
	punpcklwd	mm1, mm7		; Y1*256/Y0*256
	
	punpckhwd	mm6, mm7		; Y3*256/Y2*256
	movq	mm5, mm4

	punpckhwd	mm5, mm3		; V3'/U3'/V2'/U2'
	paddd	mm2, mm1			; G1*256/G0*256		(mm1 free)

	pmaddwd	mm5, const_VUmul	; gvV3'+guU3'/gvV2'+guU2'
	movq	mm1, mm3			;		(using mm1)	
	
	punpcklwd	mm3, mm0		; Y1/V1'/Y0/V0'
	movq	mm7, mm4			; This wipes out the zero constant
	
	pmaddwd	mm3, const_YVmul	; ryY1+rvV1'/ryY0+rvV0'
	psrad	mm2, 8				; G1/G0 

	paddd	mm5, mm6			; G3*256/G2*256		(mm6 free)
	punpcklwd	mm4, mm0		; Y1/U1'/Y0/U0'

	pmaddwd	mm4, const_YUmul	; byY1+buU1'/byY0'+buU0'
	punpckhwd	mm1, mm0		; Y3/V3'/Y2/V2'		
	
	psrad	mm3, 8				; R1/R0

	punpckhwd	mm7, mm0		; Y3/U3'/Y2/U2'
	movq	mm6, mm3

	pmaddwd	mm7, const_YUmul	; byY3+buU3'/byY2'+buU2'
	psrad	mm4, 8				; B1/B0

	pmaddwd	mm1, const_YVmul	; ryY3+rvV3'/ryY2+rvV2'
	punpckldq	mm3, mm2		; G0/R0
		
	punpckhdq	mm6, mm2		; G1/R1			(mm2 free)

	movd	mm2, [esi]			; 0/0/0/0/A3/A2/A1/A0
	psrad	mm7, 8				; B3/B2	

	punpcklbw	mm2, const_0	; A3/A2/A1/A0
	
	psrad	mm1, 8				; R3/R2
	movq	mm0, mm4			; B1/B0

	movq	tempA, mm2
	psrad	mm5, 8				; G3/G2

	punpcklwd	mm2, const_0	; A1/A0

	punpckldq	mm4, mm2		; A0/B0

	punpckhdq	mm0, mm2		; A1/B1
	movq	mm2, mm1

	packssdw	mm3, mm4		; A0/B0/G0/R0	(mm4 free)

	packssdw	mm6, mm0		; A1/B1/G1/R1	(mm0 free)
	movq	mm4, mm7

	packuswb mm3, mm6			; A1/B1/G1/R1/A0/B0/G0/R0  (mm6 free)
	add			esi, 4

	movq		mm6, tempA		; A3/A2/A1/A0
	punpckldq	mm2, mm5		; G2/R2

	pxor	mm3, const_invert	; Invert all RGB values
	punpckhdq	mm1, mm5		; G3/R3 (mm5 done)

	punpckhwd	mm6, const_0	; A3/A2

	movq	[edx], mm3
	punpckldq	mm7, mm6		; A2/B2	

	punpckhdq	mm4, mm6		; A3/B3		
	add			eax, 4

	packssdw	mm2, mm7		; A2/B2/G2/R2
	add			ebx, 4
		
	packssdw	mm1, mm4		; A3/B3/G3/R3
	add			ecx, 4

	packuswb    mm2, mm1		; A3/B3/G3/R3/A2/B2/G2/R2
	add			edx, 16

	pxor		mm2, const_invert	; invert all RGB values

	movq	[edx][-8], mm2		; Post-add correction on address

	dec			edi
	jnz			YUVAtoRGBA		; Do 12 more bytes if not zero

	//emms       // commented out since it is done after the IDCT
  } // end of _asm
}


// enable "No EMMS instruction" warning

#pragma warning(default : 4799)

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\jdct.h ===
/*
 * jdct.h
 *
 * Copyright (C) 1994-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This include file contains common declarations for the forward and
 * inverse DCT modules.  These declarations are private to the DCT managers
 * (jcdctmgr.c, jddctmgr.c) and the individual DCT algorithms.
 * The individual DCT algorithms are kept in separate files to ease 
 * machine-dependent tuning (e.g., assembly coding).
 */


/*
 * A forward DCT routine is given a pointer to a work area of type DCTELEM[];
 * the DCT is to be performed in-place in that buffer.  Type DCTELEM is int
 * for 8-bit samples, INT32 for 12-bit samples.  (NOTE: Floating-point DCT
 * implementations use an array of type FAST_FLOAT, instead.)
 * The DCT inputs are expected to be signed (range +-CENTERJSAMPLE).
 * The DCT outputs are returned scaled up by a factor of 8; they therefore
 * have a range of +-8K for 8-bit data, +-128K for 12-bit data.  This
 * convention improves accuracy in integer implementations and saves some
 * work in floating-point ones.
 * Quantization of the output coefficients is done by jcdctmgr.c.
 */

#if BITS_IN_JSAMPLE == 8
typedef int DCTELEM;		/* 16 or 32 bits is fine */
#else
typedef INT32 DCTELEM;		/* must have 32 bits */
#endif

typedef JMETHOD(void, forward_DCT_method_ptr, (DCTELEM * data));
typedef JMETHOD(void, float_DCT_method_ptr, (FAST_FLOAT * data));


/*
 * An inverse DCT routine is given a pointer to the input JBLOCK and a pointer
 * to an output sample array.  The routine must dequantize the input data as
 * well as perform the IDCT; for dequantization, it uses the multiplier table
 * pointed to by compptr->dct_table.  The output data is to be placed into the
 * sample array starting at a specified column.  (Any row offset needed will
 * be applied to the array pointer before it is passed to the IDCT code.)
 * Note that the number of samples emitted by the IDCT routine is
 * DCT_scaled_size * DCT_scaled_size.
 */

/* typedef inverse_DCT_method_ptr is declared in jpegint.h */

/*
 * Each IDCT routine has its own ideas about the best dct_table element type.
 */

typedef MULTIPLIER ISLOW_MULT_TYPE; /* short or int, whichever is faster */
#if BITS_IN_JSAMPLE == 8
typedef MULTIPLIER IFAST_MULT_TYPE; /* 16 bits is OK, use short if faster */
#define IFAST_SCALE_BITS  2	/* fractional bits in scale factors */
#else
typedef INT32 IFAST_MULT_TYPE;	/* need 32 bits for scaled quantizers */
#define IFAST_SCALE_BITS  13	/* fractional bits in scale factors */
#endif
typedef FAST_FLOAT FLOAT_MULT_TYPE; /* preferred floating type */


/*
 * Each IDCT routine is responsible for range-limiting its results and
 * converting them to unsigned form (0..MAXJSAMPLE).  The raw outputs could
 * be quite far out of range if the input data is corrupt, so a bulletproof
 * range-limiting step is required.  We use a mask-and-table-lookup method
 * to do the combined operations quickly.  See the comments with
 * prepare_range_limit_table (in jdmaster.c) for more info.
 */

#define IDCT_range_limit(cinfo)  ((cinfo)->sample_range_limit + CENTERJSAMPLE)

#define RANGE_MASK  (MAXJSAMPLE * 4 + 3) /* 2 bits wider than legal samples */


/* Short forms of external names for systems with brain-damaged linkers. */

#ifdef NEED_SHORT_EXTERNAL_NAMES
#define jpeg_fdct_islow		jFDislow
#define jpeg_fdct_ifast		jFDifast
#define jpeg_fdct_float		jFDfloat
#define jpeg_idct_islow		jRDislow
#define jpeg_idct_ifast		jRDifast
#define jpeg_idct_float		jRDfloat
#define jpeg_idct_4x4		jRD4x4
#define jpeg_idct_2x2		jRD2x2
#define jpeg_idct_1x1		jRD1x1
#endif /* NEED_SHORT_EXTERNAL_NAMES */

/* Extern declarations for the forward and inverse DCT routines. */

EXTERN(void) jpeg_fdct_islow JPP((DCTELEM * data));
EXTERN(void) jpeg_fdct_ifast JPP((DCTELEM * data));
EXTERN(void) jpeg_fdct_float JPP((FAST_FLOAT * data));

EXTERN(void) jpeg_idct_islow
    JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
	 JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
EXTERN(void) jpeg_idct_ifast
    JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
	 JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
EXTERN(void) jpeg_idct_float
    JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
	 JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
EXTERN(void) jpeg_idct_4x4
    JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
	 JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
EXTERN(void) jpeg_idct_2x2
    JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
	 JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
EXTERN(void) jpeg_idct_1x1
    JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
	 JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));


/*
 * Macros for handling fixed-point arithmetic; these are used by many
 * but not all of the DCT/IDCT modules.
 *
 * All values are expected to be of type INT32.
 * Fractional constants are scaled left by CONST_BITS bits.
 * CONST_BITS is defined within each module using these macros,
 * and may differ from one module to the next.
 */

#define ONE	((INT32) 1)
#define CONST_SCALE (ONE << CONST_BITS)

/* Convert a positive real constant to an integer scaled by CONST_SCALE.
 * Caution: some C compilers fail to reduce "FIX(constant)" at compile time,
 * thus causing a lot of useless floating-point operations at run time.
 */

#define FIX(x)	((INT32) ((x) * CONST_SCALE + 0.5))

/* Descale and correctly round an INT32 value that's scaled by N bits.
 * We assume RIGHT_SHIFT rounds towards minus infinity, so adding
 * the fudge factor is correct for either sign of X.
 */

#define DESCALE(x,n)  RIGHT_SHIFT((x) + (ONE << ((n)-1)), n)

/* Multiply an INT32 variable by an INT32 constant to yield an INT32 result.
 * This macro is used only when the two inputs will actually be no more than
 * 16 bits wide, so that a 16x16->32 bit multiply can be used instead of a
 * full 32x32 multiply.  This provides a useful speedup on many machines.
 * Unfortunately there is no way to specify a 16x16->32 multiply portably
 * in C, but some C compilers will do the right thing if you provide the
 * correct combination of casts.
 */

#ifdef SHORTxSHORT_32		/* may work if 'int' is 32 bits */
#define MULTIPLY16C16(var,const)  (((INT16) (var)) * ((INT16) (const)))
#endif
#ifdef SHORTxLCONST_32		/* known to work with Microsoft C 6.0 */
#define MULTIPLY16C16(var,const)  (((INT16) (var)) * ((INT32) (const)))
#endif

#ifndef MULTIPLY16C16		/* default definition */
#define MULTIPLY16C16(var,const)  ((var) * (const))
#endif

/* Same except both inputs are variables. */

#ifdef SHORTxSHORT_32		/* may work if 'int' is 32 bits */
#define MULTIPLY16V16(var1,var2)  (((INT16) (var1)) * ((INT16) (var2)))
#endif

#ifndef MULTIPLY16V16		/* default definition */
#define MULTIPLY16V16(var1,var2)  ((var1) * (var2))
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\jdhuff.c ===
/*
 * jdhuff.c
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains Huffman entropy decoding routines.
 *
 * Much of the complexity here has to do with supporting input suspension.
 * If the data source module demands suspension, we want to be able to back
 * up to the start of the current MCU.  To do this, we copy state variables
 * into local working storage, and update them back to the permanent
 * storage only upon successful completion of an MCU.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jdhuff.h"		/* Declarations shared with jdphuff.c */


/*
 * Expanded entropy decoder object for Huffman decoding.
 *
 * The savable_state subrecord contains fields that change within an MCU,
 * but must not be updated permanently until we complete the MCU.
 */

typedef struct {
  int last_dc_val[MAX_COMPS_IN_SCAN]; /* last DC coef for each component */
} savable_state;

/* This macro is to work around compilers with missing or broken
 * structure assignment.  You'll need to fix this code if you have
 * such a compiler and you change MAX_COMPS_IN_SCAN.
 */

#ifndef NO_STRUCT_ASSIGN
#define ASSIGN_STATE(dest,src)  ((dest) = (src))
#else
#if MAX_COMPS_IN_SCAN == 4
#define ASSIGN_STATE(dest,src)  \
	((dest).last_dc_val[0] = (src).last_dc_val[0], \
	 (dest).last_dc_val[1] = (src).last_dc_val[1], \
	 (dest).last_dc_val[2] = (src).last_dc_val[2], \
	 (dest).last_dc_val[3] = (src).last_dc_val[3])
#endif
#endif


typedef struct {
  struct jpeg_entropy_decoder pub; /* public fields */

  /* These fields are loaded into local variables at start of each MCU.
   * In case of suspension, we exit WITHOUT updating them.
   */
  bitread_perm_state bitstate;	/* Bit buffer at start of MCU */
  savable_state saved;		/* Other state at start of MCU */

  /* These fields are NOT loaded into local working state. */
  unsigned int restarts_to_go;	/* MCUs left in this restart interval */

  /* Pointers to derived tables (these workspaces have image lifespan) */
  d_derived_tbl * dc_derived_tbls[NUM_HUFF_TBLS];
  d_derived_tbl * ac_derived_tbls[NUM_HUFF_TBLS];
} huff_entropy_decoder;

typedef huff_entropy_decoder * huff_entropy_ptr;


/*
 * Initialize for a Huffman-compressed scan.
 */

METHODDEF(void)
start_pass_huff_decoder (j_decompress_ptr cinfo)
{
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci, dctbl, actbl;
  jpeg_component_info * compptr;

  /* Check that the scan parameters Ss, Se, Ah/Al are OK for sequential JPEG.
   * This ought to be an error condition, but we make it a warning because
   * there are some baseline files out there with all zeroes in these bytes.
   */
  if (cinfo->Ss != 0 || cinfo->Se != DCTSIZE2-1 ||
      cinfo->Ah != 0 || cinfo->Al != 0)
    WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);

  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    compptr = cinfo->cur_comp_info[ci];
    dctbl = compptr->dc_tbl_no;
    actbl = compptr->ac_tbl_no;
    /* Make sure requested tables are present */
    if (dctbl < 0 || dctbl >= NUM_HUFF_TBLS ||
	cinfo->dc_huff_tbl_ptrs[dctbl] == NULL)
      ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, dctbl);
    if (actbl < 0 || actbl >= NUM_HUFF_TBLS ||
	cinfo->ac_huff_tbl_ptrs[actbl] == NULL)
      ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, actbl);
    /* Compute derived values for Huffman tables */
    /* We may do this more than once for a table, but it's not expensive */
    jpeg_make_d_derived_tbl(cinfo, cinfo->dc_huff_tbl_ptrs[dctbl],
			    & entropy->dc_derived_tbls[dctbl]);
    jpeg_make_d_derived_tbl(cinfo, cinfo->ac_huff_tbl_ptrs[actbl],
			    & entropy->ac_derived_tbls[actbl]);
    /* Initialize DC predictions to 0 */
    entropy->saved.last_dc_val[ci] = 0;
  }

  /* Initialize bitread state variables */
  entropy->bitstate.bits_left = 0;
  entropy->bitstate.get_buffer_64 = 0; 
  entropy->bitstate.get_buffer = 0; /* unnecessary, but keeps Purify quiet */
  entropy->bitstate.printed_eod = FALSE;

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
}


/*
 * Compute the derived values for a Huffman table.
 * Note this is also used by jdphuff.c.
 */

GLOBAL(void)
jpeg_make_d_derived_tbl (j_decompress_ptr cinfo, JHUFF_TBL * htbl,
			 d_derived_tbl ** pdtbl)
{
  d_derived_tbl *dtbl;
  int p, i, l, si;
  int lookbits, ctr;
  char huffsize[257];
  unsigned int huffcode[257];
  unsigned int code;

  /* Allocate a workspace if we haven't already done so. */
  if (*pdtbl == NULL)
    *pdtbl = (d_derived_tbl *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  SIZEOF(d_derived_tbl));
  dtbl = *pdtbl;
  dtbl->pub = htbl;		/* fill in back link */
  
  /* Figure C.1: make table of Huffman code length for each symbol */
  /* Note that this is in code-length order. */

  p = 0;
  for (l = 1; l <= 16; l++) {
    for (i = 1; i <= (int) htbl->bits[l]; i++)
      huffsize[p++] = (char) l;
  }
  huffsize[p] = 0;
  
  /* Figure C.2: generate the codes themselves */
  /* Note that this is in code-length order. */
  
  code = 0;
  si = huffsize[0];
  p = 0;
  while (huffsize[p]) {
    while (((int) huffsize[p]) == si) {
      huffcode[p++] = code;
      code++;
    }
    code <<= 1;
    si++;
  }

  /* Figure F.15: generate decoding tables for bit-sequential decoding */

  p = 0;
  for (l = 1; l <= 16; l++) {
    if (htbl->bits[l]) {
      dtbl->valptr[l] = p; /* huffval[] index of 1st symbol of code length l */
      dtbl->mincode[l] = huffcode[p]; /* minimum code of length l */
      p += htbl->bits[l];
      dtbl->maxcode[l] = huffcode[p-1]; /* maximum code of length l */
    } else {
      dtbl->maxcode[l] = -1;	/* -1 if no codes of this length */
    }
  }
  dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */

  /* Compute lookahead tables to speed up decoding.
   * First we set all the table entries to 0, indicating "too long";
   * then we iterate through the Huffman codes that are short enough and
   * fill in all the entries that correspond to bit sequences starting
   * with that code.
   */

  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));

  p = 0;
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
      /* l = current code's length, p = its index in huffcode[] & huffval[]. */
      /* Generate left-justified code followed by all possible bit sequences */
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
	dtbl->look_nbits[lookbits] = l;
	dtbl->look_sym[lookbits] = htbl->huffval[p];
	lookbits++;
      }
    }
  }
}


/*
 * Out-of-line code for bit fetching (shared with jdphuff.c).
 * See jdhuff.h for info about usage.
 * Note: current values of get_buffer and bits_left are passed as parameters,
 * but are returned in the corresponding fields of the state struct.
 *
 * On most machines MIN_GET_BITS should be 25 to allow the full 32-bit width
 * of get_buffer to be used.  (On machines with wider words, an even larger
 * buffer could be used.)  However, on some machines 32-bit shifts are
 * quite slow and take time proportional to the number of places shifted.
 * (This is true with most PC compilers, for instance.)  In this case it may
 * be a win to set MIN_GET_BITS to the minimum value of 15.  This reduces the
 * average shift distance at the cost of more calls to jpeg_fill_bit_buffer.
 */

#ifdef SLOW_SHIFT_32
#define MIN_GET_BITS  15	/* minimum allowable value */
#else
#define MIN_GET_BITS  (BIT_BUF_SIZE-7)
#endif

// not used in MMX version
GLOBAL(boolean)
jpeg_fill_bit_buffer (bitread_working_state * state,
		      register bit_buf_type get_buffer, register int bits_left,
		      int nbits)
/* Load up the bit buffer to a depth of at least nbits */
{
  /* Copy heavily used state fields into locals (hopefully registers) */
  register const JOCTET * next_input_byte = state->next_input_byte;
  register size_t bytes_in_buffer = state->bytes_in_buffer;
  register int c;

  /* Attempt to load at least MIN_GET_BITS bits into get_buffer. */
  /* (It is assumed that no request will be for more than that many bits.) */

  while (bits_left < MIN_GET_BITS) {
    /* Attempt to read a byte */
    if (state->unread_marker != 0)
      goto no_more_data;	/* can't advance past a marker */

    if (bytes_in_buffer == 0) {
      if (! (*state->cinfo->src->fill_input_buffer) (state->cinfo))
	return FALSE;
      next_input_byte = state->cinfo->src->next_input_byte;
      bytes_in_buffer = state->cinfo->src->bytes_in_buffer;
    }
    bytes_in_buffer--;
    c = GETJOCTET(*next_input_byte++);

    /* If it's 0xFF, check and discard stuffed zero byte */
    if (c == 0xFF) 
	{
      do 
	  {
		  if (bytes_in_buffer == 0) 
		  {
			  if (! (*state->cinfo->src->fill_input_buffer) (state->cinfo))
				  return FALSE;
			  next_input_byte = state->cinfo->src->next_input_byte;
			  bytes_in_buffer = state->cinfo->src->bytes_in_buffer;
		  }
		  bytes_in_buffer--;
		  c = GETJOCTET(*next_input_byte++);
	  } while (c == 0xFF);

      if (c == 0) 
	  {
		  // Found FF/00, which represents an FF data byte 
		  c = 0xFF;
      } 
	  else 
	  {
		  // Oops, it's actually a marker indicating end of compressed data. 
		  // Better put it back for use later 
		  state->unread_marker = c;

no_more_data:
		  // There should be enough bits still left in the data segment; 
		  // if so, just break out of the outer while loop. 
		  if (bits_left >= nbits)
			  break;
			/* Uh-oh.  Report corrupted data to user and stuff zeroes into
			 * the data stream, so that we can produce some kind of image.
			 * Note that this code will be repeated for each byte demanded
			 * for the rest of the segment.  We use a nonvolatile flag to ensure
			 * that only one warning message appears.
			 */
		  if (! *(state->printed_eod_ptr)) 
		  {
			  WARNMS(state->cinfo, JWRN_HIT_MARKER);
			  *(state->printed_eod_ptr) = TRUE;
		  }
		  c = 0;			// insert a zero byte into bit buffer 
      }
    }

    /* OK, load c into get_buffer */
    get_buffer = (get_buffer << 8) | c;
    bits_left += 8;
  }

  /* Unload the local registers */
  state->next_input_byte = next_input_byte;
  state->bytes_in_buffer = bytes_in_buffer;
  state->get_buffer = get_buffer;
  state->bits_left = bits_left;

  return TRUE;
}


/*
 * Out-of-line code for Huffman code decoding.
 * See jdhuff.h for info about usage.
 */

GLOBAL(int)
jpeg_huff_decode (bitread_working_state * state,
		  register bit_buf_type get_buffer, register int bits_left,
		  d_derived_tbl * htbl, int min_bits)
{
  register int l = min_bits;
  register INT32 code;

  /* HUFF_DECODE has determined that the code is at least min_bits */
  /* bits long, so fetch that many bits in one swoop. */

  CHECK_BIT_BUFFER(*state, l, return -1);
  code = GET_BITS(l);

  /* Collect the rest of the Huffman code one bit at a time. */
  /* This is per Figure F.16 in the JPEG spec. */

  while (code > htbl->maxcode[l]) {
    code <<= 1;
    CHECK_BIT_BUFFER(*state, 1, return -1);
    code |= GET_BITS(1);
    l++;
  }

  /* Unload the local registers */
  state->get_buffer = get_buffer;
  state->bits_left = bits_left;

  /* With garbage input we may reach the sentinel value l = 17. */

  if (l > 16) {
    WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
    return 0;			/* fake a zero as the safest result */
  }

  return htbl->pub->huffval[ htbl->valptr[l] +
			    ((int) (code - htbl->mincode[l])) ];
}


/*
 * Figure F.12: extend sign bit.
 * On some machines, a shift and add will be faster than a table lookup.
 */

#ifdef AVOID_TABLES

#define HUFF_EXTEND(x,s)  ((x) < (1<<((s)-1)) ? (x) + (((-1)<<(s)) + 1) : (x))

#else

#define HUFF_EXTEND(x,s)  ((x) < extend_test[s] ? (x) + extend_offset[s] : (x))

static const int extend_test[16] =   /* entry n is 2**(n-1) */
  { 0, 0x0001, 0x0002, 0x0004, 0x0008, 0x0010, 0x0020, 0x0040, 0x0080,
    0x0100, 0x0200, 0x0400, 0x0800, 0x1000, 0x2000, 0x4000 };

static const int extend_offset[16] = /* entry n is (-1 << n) + 1 */
  { 0, ((-1)<<1) + 1, ((-1)<<2) + 1, ((-1)<<3) + 1, ((-1)<<4) + 1,
    ((-1)<<5) + 1, ((-1)<<6) + 1, ((-1)<<7) + 1, ((-1)<<8) + 1,
    ((-1)<<9) + 1, ((-1)<<10) + 1, ((-1)<<11) + 1, ((-1)<<12) + 1,
    ((-1)<<13) + 1, ((-1)<<14) + 1, ((-1)<<15) + 1 };

#endif /* AVOID_TABLES */


/*
 * Check for a restart marker & resynchronize decoder.
 * Returns FALSE if must suspend.
 */

LOCAL(boolean)
process_restart (j_decompress_ptr cinfo)
{
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci;

  /* Throw away any unused bits remaining in bit buffer; */
  /* include any full bytes in next_marker's count of discarded bytes */
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
  entropy->bitstate.bits_left = 0;

  /* Advance past the RSTn marker */
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
    return FALSE;

  /* Re-initialize DC predictions to 0 */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++)
    entropy->saved.last_dc_val[ci] = 0;

  /* Reset restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;

  /* Next segment can get another out-of-data warning */
  entropy->bitstate.printed_eod = FALSE;

  return TRUE;
}


/*
 * Decode and return one MCU's worth of Huffman-compressed coefficients.
 * The coefficients are reordered from zigzag order into natural array order,
 * but are not dequantized.
 *
 * The i'th block of the MCU is stored into the block pointed to by
 * MCU_data[i].  WE ASSUME THIS AREA HAS BEEN ZEROED BY THE CALLER.
 * (Wholesale zeroing is usually a little faster than retail...)
 *
 * Returns FALSE if data source requested suspension.  In that case no
 * changes have been made to permanent state.  (Exception: some output
 * coefficients may already have been assigned.  This is harmless for
 * this module, since we'll just re-assign them on the next call.)
 */

METHODDEF(boolean)
__cdecl decode_mcu (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  register int s, k, r;
  int blkn, ci;
  JBLOCKROW block;
  BITREAD_STATE_VARS;
  savable_state state;
  d_derived_tbl * dctbl;
  d_derived_tbl * actbl;
  jpeg_component_info * compptr;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
    if (entropy->restarts_to_go == 0)
      if (! process_restart(cinfo))
	return FALSE;
  }

  /* Load up working state */
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
  ASSIGN_STATE(state, entropy->saved);

  /* Outer loop handles each block in the MCU */

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
    block = MCU_data[blkn];
    ci = cinfo->MCU_membership[blkn];
    compptr = cinfo->cur_comp_info[ci];
    dctbl = entropy->dc_derived_tbls[compptr->dc_tbl_no];
    actbl = entropy->ac_derived_tbls[compptr->ac_tbl_no];

    /* Decode a single block's worth of coefficients */

    /* Section F.2.2.1: decode the DC coefficient difference */
    HUFF_DECODE(s, br_state, dctbl, return FALSE, label1);
    if (s) {
      CHECK_BIT_BUFFER(br_state, s, return FALSE);
      r = GET_BITS(s);
      s = HUFF_EXTEND(r, s);
    }

    /* Shortcut if component's values are not interesting */
    if (! compptr->component_needed)
      goto skip_ACs;

    /* Convert DC difference to actual value, update last_dc_val */
    s += state.last_dc_val[ci];
    state.last_dc_val[ci] = s;
    /* Output the DC coefficient (assumes jpeg_natural_order[0] = 0) */
    (*block)[0] = (JCOEF) s;

    /* Do we need to decode the AC coefficients for this component? */
    if (compptr->DCT_scaled_size > 1) {

      /* Section F.2.2.2: decode the AC coefficients */
      /* Since zeroes are skipped, output area must be cleared beforehand */
      for (k = 1; k < DCTSIZE2; k++) {
	HUFF_DECODE(s, br_state, actbl, return FALSE, label2);
      
	r = s >> 4;
	s &= 15;

      
	if (s) {
	  k += r;
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
	  r = GET_BITS(s);
	  s = HUFF_EXTEND(r, s);
	  /* Output coefficient in natural (dezigzagged) order.
	   * Note: the extra entries in jpeg_natural_order[] will save us
	   * if k >= DCTSIZE2, which could happen if the data is corrupted.
	   */
	  (*block)[jpeg_natural_order[k]] = (JCOEF) s;
	} else {
	  if (r != 15)
	    break;
	  k += 15;
	}
      }

    } else {
skip_ACs:

      /* Section F.2.2.2: decode the AC coefficients */
      /* In this path we just discard the values */
      for (k = 1; k < DCTSIZE2; k++) {
	HUFF_DECODE(s, br_state, actbl, return FALSE, label3);
      
	r = s >> 4;
	s &= 15;
      
	if (s) {
	  k += r;
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
	  DROP_BITS(s);
	} else {
	  if (r != 15)
	    break;
	  k += 15;
	}
      }

    }
  }

  /* Completed MCU, so update state */
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
  ASSIGN_STATE(entropy->saved, state);

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;

  return TRUE;
}

//MMX routines

//new Typedefs necessary for the new decode_mcu_fast to work.
typedef struct jpeg_source_mgr * j_csrc_ptr;
//typedef struct jpeg_err_mgr * j_cerr_ptr;
typedef struct jpeg_error_mgr * j_cerr_ptr;

typedef d_derived_tbl * h_pub_ptr;
/*
 * Decode and return one MCU's worth of Huffman-compressed coefficients.
 * The coefficients are reordered from zigzag order into natural array order,
 * but are not dequantized.
 *
 * The i'th block of the MCU is stored into the block pointed to by
 * MCU_data[i].  WE ASSUME THIS AREA HAS BEEN ZEROED BY THE CALLER.
 * (Wholesale zeroing is usually a little faster than retail...)
 *
 * Returns FALSE if data source requested suspension.  In that case no
 * changes have been made to permanent state.  (Exception: some output
 * coefficients may already have been assigned.  This is harmless for
 * this module, since we'll just re-assign them on the next call.)
 */

const int twoexpnminusone[13] = { 0, 1, 2, 4, 8,16,32,64,128,256,512,1024,2048};
const int oneminustwoexpn[13] = { 0,-1,-3,-7,-15,-31,-63,-127,-255,-511,-1023,-2047};

#ifdef _X86_

METHODDEF(boolean)
__cdecl decode_mcu_fast (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
//	return decode_mcu_inner(cinfo,MCU_data);
//***************************************************************************/
//*
//*                INTEL Corporation Proprietary Information  
//*
//*      
//*                  Copyright (c) 1996 Intel Corporation.
//*                         All rights reserved.
//*
//***************************************************************************/
//			AUTHOR:  Mark  Buxton
/***************************************************************************/
// MMX version of the "Huffman Decoder" within the IJG decompressor code.

// //	MMX Allocation:
//-------------------------------------------------------------
////				XXXX	XXXX  |  XXXX	XXXX
//
//		MM0:	------------     				
//		MM1:             						bit_buffer
//		MM2:             						temp buffer				
//		MM3:             						temp buffer				
//		MM4:    0000    0000     0000   0040		
//		MM5:	------------	  				dctbl
//		MM6:    ------------	  				actbl
//		MM7:    ------------      				temp_buffer
//
//  
//		edi	 -  bits left in the Bit Buffer

//				//routines to modify:  jpeg_huff_decode_fast
//				//					   fill_bit_buffer
//
//
//
// Other available storage locations:
//
//	ebp	 -  state



	//data declaration:

	unsigned char blkn;
	unsigned char nbits;
	JBLOCKROW block;
	huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
	jpeg_component_info * compptr;
	bitread_working_state br_state;
	savable_state state;
	d_derived_tbl * dctbl;
	d_derived_tbl * actbl;
	d_derived_tbl * htbl;
	int ci,temp1;
	int code;
	int min_bits;
	
__asm {
//  // Process restart marker if needed// may have to suspend 
//  if (cinfo->restart_interval) {
		mov  eax,dword ptr [cinfo]
		cmp  (j_decompress_ptr [eax]).restart_interval,1
		jne   Skip_Restart
//if (entropy->restarts_to_go == 0)
		mov  eax,dword ptr [entropy]
		cmp  (dword ptr [eax]).restarts_to_go,0
		jne  Skip_Restart
//if (! process_restart(cinfo))
		mov  eax,dword ptr [cinfo]
		push eax
		call process_restart
		add  esp,4
		test eax,eax
		jne  Skip_Restart

		jmp  Return_Fail

Skip_Restart:

 // // Load up working state 
  
//  br_state.cinfo = cinfop// 
//	br_state.next_input_byte = cinfop->src->next_input_byte// 
//	br_state.bytes_in_buffer = cinfop->src->bytes_in_buffer// 
//	br_state.unread_marker = cinfop->unread_marker// 
//	get_buffer = entropy->bitstate.get_buffer// 
//	bits_left = entropy->bitstate.bits_left// 
//	br_state.printed_eod_ptr = & entropy->bitstate.printed_eod
	
	mov  eax,dword ptr [cinfo]
	mov  dword ptr [br_state.cinfo],eax
	
	
	mov  ebx,(j_decompress_ptr [eax]).unread_marker 
	mov  dword ptr [br_state.unread_marker],ebx 
	
	mov  eax,(j_decompress_ptr [eax]).src
	mov  ebx,(j_csrc_ptr [eax]).next_input_byte
	mov  dword ptr [br_state.next_input_byte],ebx 
	
	mov  ebx,(j_csrc_ptr [eax]).bytes_in_buffer
	mov  dword ptr [br_state.bytes_in_buffer],ebx 
	
	//pxor mm0,mm0
	mov eax,dword ptr[entropy]
	movq mm1,(qword ptr [eax]).bitstate.get_buffer_64
	mov edi,(dword ptr [eax]).bitstate.bits_left 
	
	lea  eax,dword ptr[eax].bitstate.printed_eod
	mov  dword ptr [br_state.printed_eod_ptr],eax
	
	

	mov  ebx,dword ptr [entropy]
	xor  eax,eax
	mov	 eax,(dword ptr [ebx]).saved.last_dc_val[0x00]
	mov  dword ptr [state.last_dc_val+0x00],eax
	mov	 eax,(dword ptr [ebx]).saved.last_dc_val[0x04]
	mov  dword ptr [state.last_dc_val+0x04],eax
	mov	 eax,(dword ptr [ebx]).saved.last_dc_val[0x08]
	mov  dword ptr [state.last_dc_val+0x08],eax
	mov	 eax,(dword ptr [ebx]).saved.last_dc_val[0x0C]
	mov  dword ptr [state.last_dc_val+0x0c],eax

//make sure all variables are initalized.
//see map in header for register usage


 // // Outer loop handles each block in the MCU 

	 //the address of each block is just MCU_data + blkn<<7 (this is MCU_data * 128, right?)
	//ci = cinfo->MCU_membership[blkn];
	//compptr = cinfo->cur_comp_info[ci];
    //dctbl = entropy->dc_derived_tbls[compptr->dc_tbl_no];
    //actbl = entropy->ac_derived_tbls[compptr->ac_tbl_no];
	
	mov  byte ptr [blkn],0
	pxor mm5,mm5
	pxor mm6,mm6
	pxor mm2,mm2
	pxor mm3,mm3
	pxor mm4,mm4
	mov eax,0x40
	movd mm4,eax


}
One_Block_Loop:
	block = MCU_data[blkn];
	ci = cinfo->MCU_membership[blkn];
	compptr = cinfo->cur_comp_info[ci];
	actbl = entropy->ac_derived_tbls[compptr->ac_tbl_no];
	dctbl = entropy->dc_derived_tbls[compptr->dc_tbl_no];
	__asm
	{

	movd mm5,[dctbl]
	movd mm6,[actbl]
	//// Decode a single block's worth of coefficients 

    //// Section F.2.2.1: decode the DC coefficient difference 

//---------------------------------------------------------------------------------
//DC loop section:     there are probably only ~6 to process.
//---------------------------------------------------------------------------------
	
	//set up the MMX registers:
			//move the dctbl pointer into MM6
			//pxor mm6,mm6
			//movd mm6,dword ptr [dctbl]
			//movd eax,mm0

			
			cmp edi,8
			jl Get_n_bits_DC
				//normal path
				//take a peek at the data in get_buffer.
Got_n_bits_DC:		
				movq mm3,mm1	//copy the Bit-Buffer
				psrlq mm1,56	//Extract the MS 8 bits from the Bit Buffer

				movd eax,mm5	//load the DC table pointer
				movd ecx,mm1	//lsb holds the 8 input bits

				movq mm1,mm3
				mov  ebx,(dword ptr[eax+4*ecx]).look_nbits  											
				/*get the number of bits required to represent
				 this Huffman Code (n) .  If the code is > 8 bits, 
				 the table entry is Zero*/
				
				test  ebx,ebx
				je Nineplus_Decode_DC//branch taken 3% of the time.  If code > 8 bits,
									 //get it via a slower metho
				 
				movd mm2,ebx
				sub edi,ebx			//invalidate n bits from the Bit counter

				xor ebx,ebx
				psllq mm1,mm2		//invalidate n bits from the Bit Buffer
				
				mov bl,(byte ptr[eax+ecx]).look_sym //read in the Run Lenth Code (rrrr|ssss); though for the DC coefct's rrrr=0000
				
Got_SymbolDC:							//return point from the slow Huffman decoder routine (for code length > 8 bits)
				cmp edi,ebx				//
				jl not_enough_bits_DC	//If Not enough bits left in the Bit Buffer, Get More

Got_enough_bits_DC:
					pxor mm2,mm2
					sub edi,ebx		//invalidate ssss bits from the Bit counter

					movd mm2,ebx
					movq mm3,mm4	//copy #64 into mm3
					
					psubd mm3,mm2	//now mm3 has 64-ssss
					movq mm0,mm1	//save a copy of the Bit Buffer

					psrlq mm0,mm3	//shift result right
					nop

					psllq mm1,mm2	//Invalidate ssss bits from the Bit Buffer
					movd ecx,mm0		
					

					mov eax,(dword ptr[twoexpnminusone+4*ebx])		//load 2^(ssss-1)
			
					cmp ecx,eax										//
					jge positiv_symDC								// If # < 2^(ssss-1), then # = #+(1-2^ssss)

 						add ecx,(dword ptr [oneminustwoexpn+4*ebx])	//
						nop											/****************************************/
positiv_symDC:
				
				mov eax,dword ptr [compptr] //If !(compptr->compoent_needed), skip AC and DC coefts
				mov edx,1					//initalize loop counter for AC coef't loop

				cmp (dword ptr [eax]).component_needed,0
				je skip_ACs
				//don't skip the AC coefficients.
	
    


		mov eax,[ci]
		mov ebx,[block]									//(*block)[0] = (JCOEF) s//

		add ecx,(dword ptr[state.last_dc_val+eax*4])	//s += state.last_dc_val[ci]//
		pxor mm7,mm7									//cleared for AC_coefficient calculations
		
		mov (dword ptr[state.last_dc_val+eax*4]),ecx	//state.last_dc_val[ci] = s//

		mov word ptr[ebx],cx							//store in (*block)
		mov eax,[compptr]
	
		cmp (dword ptr[eax]).DCT_scaled_size,1	//if (compptr->DCT_scaled_size > 1) {
		jle skip_ACs

		
		


// Section F.2.2.2: decode the AC coefficients 
// Since zeroes are skipped, output area must be cleared beforehand 
//---------------------------------------------------------------------------------
//AC loop section:  Active case.
//---------------------------------------------------------------------------------
Get_AC_DCT_loop:
	
			
			cmp edi,8
			jl Get_8_bits_ac
				//take a peek at the data in get_buffer.
Full_8_bits_AC:		
				movq mm3,mm1								//copy Bit Buffer
				psrlq mm1,56								//load msb from the Bit Buffer

				movd ecx,mm6								//load AC Huffman Table Pointer
				movd eax,mm1								//copy into integer reg. for address calculation
				
				movq mm1,mm3
				mov  ebx,(dword ptr[ecx+4*eax]).look_nbits	//If Huffman symbol is contained within 8 bits fetched,
															//return the actual length of the sequence.  If zero, len>8 bits
				test  ebx,ebx								
				je Nineplus_decode_AC

				sub  edi,ebx								//invalidate n bits from Bit Counter
				movd mm2,ebx				
				
				psllq mm1,mm2								//invalidate n bits from Bit Buffer	
				xor ebx,ebx

				mov bl,(byte ptr[eax+ecx]).look_sym			//load the Huffman Run Length code (rrrr|ssss) for this symbol
				 

Got_SymbolAC:	//return point from the slow Huffman routine
	
				mov eax,ebx	
		
				shr eax,4									//highest nibble is run-length of zeroes (rrrr)
				add edx,eax									//increment AC coefft counter by the # of zeroes.  Assume array is zeroed originally
	
				and ebx,0x000F								//isolate the lowest nibble, the bit-length of the actual coeff't (ssss)
				jz Special_SymbolAC							//a zero for the symbol bit-length indicates it is a special symbol.  Ex:  0xF0, 0x00

			//test to see if # available bits from bit_buffer are less than required to fill the Huffman symbol
			//if insufficient bits, load new bit_buffer through fill_bit_buffer
			
				cmp edi,ebx									//ssss in ebx
				jl Get_n_bits_ac
			
Got_n_bits_AC:
				
				sub edi,ebx									//invalidate ssss bits from the Bit counter
				movd mm2,ebx

				movq mm3,mm4								//copy #64 into mm3
				psubd mm3,mm2								//now mm3 has 64-ssss

				movq mm0,mm1								//save a copy of the Bit Buffer
				psllq mm1,mm2								//Invalidate ssss bits from the Bit Buffer

				psrlq mm0,mm3								//shift result right
				mov eax,(dword ptr[twoexpnminusone+4*ebx])  //load 2^(ssss-1)


				movd ecx,mm0					
				cmp ecx,eax									//
															//
				jge positiv_symAC							// If # < 2^(ssss-1), then # = #+(1-2^ssss)
 				add ecx,(dword ptr [oneminustwoexpn+4*ebx])	//

positiv_symAC:
					//don't modify mm3. It has the actual AC-DCT coefficient.
	  
	  // Output coefficient in natural (dezigzagged) order.
	  // Note: the extra entries in jpeg_natural_order[] will save us
	  //  if the AC coefct index >= DCTSIZE2 (64), which could happen if the data is corrupted.

				
		mov eax, dword ptr(jpeg_natural_order[4*edx])	//(*block)[jpeg_natural_order[k]]=s;
		mov ebx, dword ptr [block]

		mov word ptr([ebx+2*eax]),cx
ContinueAC:
	  inc edx			 //Ac coefct index ++
	  cmp edx,64		 //While (index) < 64
	  jl Get_AC_DCT_loop //imples we are doing the loop 63 times (DC was the first, for 64 total COEFF"s)

Continue_Next_Block_AC:
	  inc byte ptr[blkn] //process the next Coeff. block

	  xor eax,eax
	  mov al,byte ptr[blkn]
	  
	  mov edx,dword ptr[cinfo]
	  cmp eax,(j_decompress_ptr [edx]).blocks_in_MCU	//While [blkn]<= Max number of blocks in MCU:
	  jge COMPLETED_MCU
	  jmp One_Block_Loop

/***************************************************************************************/
/*     DC helper Code																   */
/***************************************************************************************/

Get_n_bits_DC:  xor ebx,ebx//pass nbits in the eax register 
			    call fill_bit_buffer
			  //if zero, it was probably suspended.  Therefore suspend the whole DECODE_MCU
			    test eax,eax
			    je Return_Fail
			  	cmp edi,8
			  	jge Got_n_bits_DC  //probable and predicted path is up.
					mov ebx,1
					jmp Slow_Decode_DC

not_enough_bits_DC:
				    call fill_bit_buffer
					xor ebx,ebx
					mov bl,byte ptr[nbits]
			  	
				    test eax,eax
                    jne Got_enough_bits_DC
					jmp Return_Fail

Nineplus_Decode_DC:
				mov ebx,9
Slow_Decode_DC:		//aka slow_label.  This is the _slow_ huff_decode.
				
				mov eax,[dctbl]
				mov [htbl],eax
				call jpeg_huff_decode_fast //assume ebx holds nbits
				test eax,eax
				jl Return_Fail
				mov ebx,eax
				jmp Got_SymbolDC
				
/***************************************************************************************/
/*     AC helper Code																   */
/***************************************************************************************/

Special_SymbolAC:
	  cmp al,0x0F
	  jne Continue_Next_Block_AC
	  jmp ContinueAC

Get_n_bits_ac:
	  call fill_bit_buffer
	  xor ebx,ebx
	  mov bl,byte ptr[nbits]
	  test eax,eax
      jne Got_n_bits_AC
	  jmp Return_Fail 

Get_8_bits_ac:
	  call fill_bit_buffer
	  test eax,eax
	  je Return_Fail
		
		cmp edi,8
		jge Full_8_bits_AC  //probable and predicted path is up.
			mov ebx,1
			jmp Slow_decode_AC

Nineplus_decode_AC:
				mov ebx,9
Slow_decode_AC:				//The slow Huffman Decode.  Used when the code length is > 8 bits
				mov eax,[actbl]
				mov [htbl],eax
				call jpeg_huff_decode_fast //assume ebx holds nbits
				test eax,eax
				jl Return_Fail
				mov ebx,eax
				jmp Got_SymbolAC


			 //Failure, return from the routine
Return_Fail:		//do not modify any permanent registers
				emms
}
			return FALSE;
__asm {
				




    //} else {

//---------------------------------------------------------------------------------
//AC loop section:  Ignore case.
//---------------------------------------------------------------------------------
skip_ACs:

	      // Section F.2.2.2: decode the AC coefficients 
      // In this path we just discard the values 

Ignore_AC_DCT_loop:

			cmp edi,8
			jl Get_8_bits_acs
				//take a peek at the data in get_buffer.
Full_8_bits_ACs:		
				movq mm3,mm1								//copy Bit Buffer
				psrlq mm1,56								//load msb from the Bit Buffer

				movd ecx,mm6								//load AC Huffman Table Pointer
				movd eax,mm1								//copy into integer reg. for address calculation
				
				movq mm1,mm3
				mov  ebx,(dword ptr[ecx+4*eax]).look_nbits	//If Huffman symbol is contained within 8 bits fetched,
															//return the actual length of the sequence.  If zero, len>8 bits
				test  ebx,ebx								
				je Nineplus_Decode_ACs						//If symbol > 8 bits, fetch the slow way.  Called 3% of the time

				sub  edi,ebx								//invalidate n bits from Bit Counter
				movd mm2,ebx				
				

				psllq mm1,mm2								//invalidate n bits from Bit Buffer	
				xor ebx,ebx

				mov bl,(byte ptr[eax+ecx]).look_sym			//load the Huffman Run Length code (rrrr|ssss) for this symbol

Got_SymbolACs:												//return point from the slow Huffman routine
	
				mov eax,ebx	
		
				shr eax,4				//highest nibble is run-length of zeroes (rrrr)
				add edx,eax				//increment AC coefft counter by the # of zeroes.  Assume array is zeroed originally
	
				and ebx,0x000F			//isolate the lowest nibble, the bit-length of the actual coeff't (ssss)
				jz Special_SymbolACs	//a zero for the symbol bit-length indicates it is a special symbol.  Ex:  0xF0, 0x00
	
				//test to see if # available bits from bit_buffer are less than required to fill the Huffman symbol
				//if insufficient bits, load new bit_buffer through fill_bit_buffer
			
				cmp edi,ebx				//ssss in ebx
				jl Get_n_bits_acs
			
Got_n_bits_acs:
				
					sub edi,ebx		//invalidate ssss bits from the Bit counter
					movd mm2,ebx
					psllq mm1,mm2	//Invalidate ssss bits from the Bit Buffer

Continue_ACs:
			inc edx					//Ac coefct index ++
			cmp edx,64				//While (index) < 64
			jl Ignore_AC_DCT_loop	//imples we are doing the loop 63 times (DC was the first, for 64 total COEFF"s)
			jmp Continue_Next_Block_AC

/***************************************************************************************/
/*     Skipped AC helper Code														   */
/***************************************************************************************/

Special_SymbolACs:
	  cmp al,0x0F
	  jne Continue_Next_Block_AC
	  jmp Continue_ACs

Get_8_bits_acs:
	  call fill_bit_buffer
	  test eax,eax
	  je Return_Fail
		
		cmp edi,8
		jge Full_8_bits_ACs  //probable and predicted path is up.
			mov ebx,1
			jmp Slow_Decode_ACs
Get_n_bits_acs:
	  call fill_bit_buffer
	  xor ebx,ebx
	  mov bl,byte ptr[nbits]
	  test eax,eax
      jne Got_n_bits_acs
	  jmp Return_Fail
			
Nineplus_Decode_ACs:
				mov ebx,9
Slow_Decode_ACs:	//The slow Huffman Decode.  Used when the code length is > 8 bits
				mov eax,[actbl]
				mov [htbl],eax
				call jpeg_huff_decode_fast //assume ebx holds nbits
				test eax,eax
				jl Return_Fail
				mov ebx,eax
				jmp Got_SymbolACs



	  
    //} else {


COMPLETED_MCU:
	  
  // Completed MCU, so update state 

//BITREAD_SAVE_STATE(cinfo,entropy->bitstate)//
//#define BITREAD_SAVE_STATE(cinfop,permstate)

//	cinfo->src->next_input_byte = br_state.next_input_byte
//	cinfo->src->bytes_in_buffer = br_state.bytes_in_buffer
//	cinfo->unread_marker = br_state.unread_marker
//	entropy->bitstate.get_buffer_64 = mm1
//	entropy->bitstate.bits_left = mm0

	mov  eax,dword ptr [br_state.unread_marker]
	mov  ebx,dword ptr [cinfo]
	mov  (j_decompress_ptr [ebx]).unread_marker,eax
	
	mov  eax,dword ptr [br_state.next_input_byte]
	mov  ebx,(j_decompress_ptr [ebx]).src
	mov  (j_csrc_ptr [ebx]).next_input_byte,eax

	mov  eax,dword ptr [br_state.bytes_in_buffer]
	mov  (j_csrc_ptr [ebx]).bytes_in_buffer,eax

	mov  eax,dword ptr [entropy]
	movq  (qword ptr [eax]).bitstate.get_buffer_64,mm1	
	mov  (dword ptr [eax]).bitstate.bits_left,edi


	mov  ebx,dword ptr [entropy]
	mov  eax,dword ptr [state.last_dc_val+0x00]
	mov  (dword ptr [ebx]).saved[0x00],eax
	mov  eax,dword ptr [state.last_dc_val+0x04]
	mov  (dword ptr [ebx]).saved[0x04],eax
	mov  eax,dword ptr [state.last_dc_val+0x08]
	mov  (dword ptr [ebx]).saved[0x08],eax
	mov  eax,dword ptr [state.last_dc_val+0x0C]
	mov  (dword ptr [ebx]).saved[0x0C],eax


  // Account for restart interval (no-op if not using restarts) 
	emms
}
	entropy->restarts_to_go--;
	return TRUE;

	//----------------------------------------------------------------------


/***************************************************************************
fill_bit_buffer:
	Assembly procedure to decode Huffman coefficients longer than 8 bits.
	Also called near the end of a data segment.


	Input Parameters
	al:  minimum number of bits to get

    various MMX registers and local variables must be defined; see 
	_decode_one_mcu_inner above

	This code is called very frequently
****************************************************************************/
__asm {
fill_bit_buffer:

  //use ecx to store bytes_in_buffer
  //use ebx to store next_input_byte
  //edi to store Bit Buffer length

//---------------------------------------------Main Looop----------
  mov dword ptr [temp1],edx
  mov byte ptr[nbits],bl	//number of bits to get
	  //format the bit buffer:  shift to the right by 
	  //64-nbits
  movd mm0,edi
  movq mm7,mm4
  

  mov ecx,dword ptr[br_state.bytes_in_buffer]
  psubd mm7,mm0

  
  psrlq mm1,mm7
  mov ebx,dword ptr[br_state.next_input_byte]
  
  
  //mov eax,8
  //movd mm4,eax
    // Attempt to read a byte */
	cmp [br_state.unread_marker],0
	jne no_more_data

	test ecx,ecx
	je call_load_more_bytes
    
	//determine if there are enough bytes in the i/o buffer
		
continue_reading:	
	//decrement bytes_in_buffer// 
	dec ecx
	js call_load_more_bytes
	//load new data

	xor eax,eax
	mov al,byte ptr[ebx]
	//update next_input_byte pointer
	inc ebx
	cmp eax,0xFF		//compare ebx to FF

	je got_FF

stuff_byte:
	
	psllq mm1,8
	movd mm7,eax

	add edi,8
	por mm1,mm7

	//determine if we've read enough bytes
	cmp edi,56
	jle continue_reading
done_loading:
	//were done loading data.  
	//stuff values for bytes_in_buffer, next_input_byte
	 mov [br_state.next_input_byte],ebx
	 mov [br_state.bytes_in_buffer],ecx
	//finish formatting the bit_register
		
		movd mm7,edi
		movq mm0,mm4

		psubd mm0,mm7
		mov eax,0xFF

		psllq mm1,mm0
		mov edx, dword ptr [temp1]

		ret 

call_load_more_bytes:
	call load_more_bytes
	jmp continue_reading
//---------------------------------------End Main Loop-----------

	got_FF:
	 //test to see if there are enough bytes in input_buffer
	 test ecx,ecx
	 jne continue_reading_2
	 call load_more_bytes
continue_reading_2:
	//decrement bytes_in_buffer// 
	 dec ecx
	//load new data
	 xor eax,eax
     mov al,[ebx]
 	//update next_input_byte pointer
	 inc ebx //do this twice?
	 cmp eax,0xff
	 je got_FF
	 test eax,eax
	 jne eod_marker
	 mov eax,0xFF
	 jmp stuff_byte	//stuff an 'FF'
eod_marker:	 //byte was an end-of-data marker
	 mov [br_state.unread_marker],eax
	 //if we have enough bits in the input buffer to cover the required bits, ok.
	 //otherwise, warn the sytem about corrupt data.

no_more_data:
	 xor eax, eax
	 //movd ebx,mm0   //dshade
	 //cmp bl,[nbits]
	 //jl corrupt_data
	 //ok, have enough data, 
	 jmp stuff_byte_corrupt

//corrupt_data:	 
	//this junk is the WARNMS macro
	
	mov eax,dword ptr [br_state.printed_eod_ptr]
	cmp dword ptr [eax],0x00
	jne continue_corrupt


	mov eax,dword ptr [cinfo]
	mov eax,(j_decompress_ptr [eax]).err		//the err struct is the first memer of state->cinfo
	mov (j_cerr_ptr [eax]).msg_code,JWRN_HIT_MARKER
	push 0xffffffff

	mov eax,dword ptr [cinfo] 
	push eax					

	
	mov eax,dword ptr[cinfo]  //the err struct is the first member of state->cinfo
	mov eax,(j_decompress_ptr [eax]).err
	call (j_cerr_ptr [eax]).emit_message
	//call dword ptr[eax]
	add esp,8
	mov eax, dword ptr[br_state.printed_eod_ptr]
	mov dword ptr [eax],1
continue_corrupt:
	xor eax,eax
	jmp stuff_byte_corrupt

stuff_byte_corrupt:
	psllq mm1,8
	movd mm7,eax
	add edi,8
	por mm1,mm7

	//determine if we've read enough bytes
	cmp edi,56
	jle stuff_byte_corrupt
	jmp done_loading

	

load_more_bytes:
	 movd mm0,edi
	 mov [br_state.next_input_byte],ebx
	 mov eax,[br_state.cinfo]
	 push eax
	 //mov eax,[br_state.cinfo]
	 mov eax,(j_decompress_ptr[eax]).src
	 //movd mm0,edi
	 call (j_csrc_ptr [eax]).fill_input_buffer
	 add esp,4
	 //eax has the return value.  If zero, bomb out
	 test eax,eax
	 je return_4
	 //update next_input_byte and bytes_in_buffer.
	 mov eax,[br_state.cinfo]
	 mov eax,(j_decompress_ptr[eax]).src
	 mov ebx,(j_csrc_ptr [eax]).next_input_byte;
	 mov ecx,(j_csrc_ptr [eax]).bytes_in_buffer;
	 movd edi,mm0
	 mov edx,dword ptr[temp1]
	 ret


return_4:
	 mov eax,0x40
	 movd mm4,eax
	 mov eax,0
	 mov edx,dword ptr[temp1]
	 emms
	 ret 

	
//End fill_bit_buffer--------------------------------------------------
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------

/***************************************************************************
	Jpeg_huff_decode_fast.  
	Assembly procedure to decode Huffman coefficients longer than 8 bits.
	Also called near the end of a data segment.


	Input Parameters
	eax:  minimum number of bits for the next huffman code.

    various MMX registers and local variables must be defined; see 
	_decode_one_mcu_inner above

	This code is infrequently called
****************************************************************************/

jpeg_huff_decode_fast:
  /* HUFF_DECODE has determined that the code is at least min_bits */
  /* bits long, so fetch that many bits in one swoop. */
			push edx
			mov [min_bits],ebx

			cmp edi,ebx
			jl Fill_Input_Buffer
Filled_Up:		
			
			sub edi,ebx
			movq mm3,mm4

			movd mm7,ebx
			movq mm2,mm1
			
			psubd mm3,mm7
			psllq mm1,mm7
			
			psrlq mm2,mm3
			movd ecx,mm2
		
Continue_Tedious_1:			
//now mm7 holds the most recent code

  /* Collect the rest of the Huffman code one bit at a time. */
  /* This is per Figure F.16 in the JPEG spec. */
			mov  eax,dword ptr [min_bits]
			mov  edx,dword ptr [htbl]
			//mov  ecx,dword ptr [code]
			mov  ebx,dword ptr [edx+eax*4].maxcode
			cmp  ebx,ecx
			jge  Continue_Tedious_2b

  //while (code > htbl->maxcode[min_bits]) {
    
			//movd eax,mm0
			cmp edi,1
			jl Fill_Input_Buffer_2
Filled_Up_2:			

			dec edi
			movq mm3,mm1

			psrlq mm3,63
			
			movd mm7,ecx
			psllq mm1,1
			
			psllq mm7,1
			inc [min_bits]
			
			por mm7,mm3
			movd ecx,mm7
    
			jmp Continue_Tedious_1	

Fill_Input_Buffer:
	//al should hold the number of valid bits;
	//mov eax,ebx
	call fill_bit_buffer			
	//if it returned a zero, exit with a -1.
	test eax,eax
	je Suspend_Label
	//we were able to fill it with (some) data.  
	//jump back to the continuation of this loop:
	xor ebx,ebx
	mov ebx,[min_bits]
	jmp Filled_Up



Fill_Input_Buffer_2:
	
	mov ebx,1
	mov [code],ecx
	call fill_bit_buffer			
	//if it returned a zero, exit with a -1.
	test eax,eax
	je Suspend_Label
	//we were able to fill it with (some) data.  
	//jump back to the continuation of this loop:
	mov ecx,[code]
	jmp Filled_Up_2

Continue_Tedious_2b: 
push edi
  /* With garbage input we may reach the sentinel value l = 17. */
}
  if (min_bits > 16) {
    WARNMS(br_state.cinfo, JWRN_HUFF_BAD_CODE);
  __asm {
	    pop edi
		xor eax,eax
		pop edx
		ret
		}
  }
  
  /*code= htbl->pub->huffval[ htbl->valptr[min_bits] +
			    ((int) (code - htbl->mincode[min_bits])) ];*/
__asm{
pop edi
mov       eax,dword ptr [min_bits]
mov       ebx,dword ptr [htbl]
sub       ecx,(dword ptr [ebx+eax*4]).mincode
add       ecx,(dword ptr [ebx+eax*4]).valptr
mov       ebx,(h_pub_ptr [ebx]).pub
xor       eax,eax
mov       al,(byte ptr [ecx+ebx]).huffval
pop		  edx
ret

Suspend_Label:
  
	mov eax,1
	pop edx
	ret
  }
}

#endif

//End jpeg_huff_decode_fast-------------------------------------------------
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------

/*
 * Module initialization routine for Huffman entropy decoding.
 */

GLOBAL(void)
jinit_huff_decoder (j_decompress_ptr cinfo)
{
  huff_entropy_ptr entropy;
  int i;

  entropy = (huff_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(huff_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass_huff_decoder;
#if 0
//#ifdef _X86_  
  if (vfMMXMachine)
  {
	  entropy->pub.decode_mcu = decode_mcu_fast;
  }
  else
  {
	  entropy->pub.decode_mcu = decode_mcu;
  }
#else
    entropy->pub.decode_mcu = decode_mcu;
#endif
  /* Mark tables unallocated */
  for (i = 0; i < NUM_HUFF_TBLS; i++) {
    entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
  }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\jddctmgr.c ===
/*
 * jddctmgr.c
 *
 * Copyright (C) 1994-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains the inverse-DCT management logic.
 * This code selects a particular IDCT implementation to be used,
 * and it performs related housekeeping chores.  No code in this file
 * is executed per IDCT step, only during output pass setup.
 *
 * Note that the IDCT routines are responsible for performing coefficient
 * dequantization as well as the IDCT proper.  This module sets up the
 * dequantization multiplier table needed by the IDCT routine.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */


/*
 * The decompressor input side (jdinput.c) saves away the appropriate
 * quantization table for each component at the start of the first scan
 * involving that component.  (This is necessary in order to correctly
 * decode files that reuse Q-table slots.)
 * When we are ready to make an output pass, the saved Q-table is converted
 * to a multiplier table that will actually be used by the IDCT routine.
 * The multiplier table contents are IDCT-method-dependent.  To support
 * application changes in IDCT method between scans, we can remake the
 * multiplier tables if necessary.
 * In buffered-image mode, the first output pass may occur before any data
 * has been seen for some components, and thus before their Q-tables have
 * been saved away.  To handle this case, multiplier tables are preset
 * to zeroes; the result of the IDCT will be a neutral gray level.
 */


/* Private subobject for this module */

typedef struct {
  struct jpeg_inverse_dct pub;	/* public fields */

  /* This array contains the IDCT method code that each multiplier table
   * is currently set up for, or -1 if it's not yet set up.
   * The actual multiplier tables are pointed to by dct_table in the
   * per-component comp_info structures.
   */
  int cur_method[MAX_COMPONENTS];
} my_idct_controller;

typedef my_idct_controller * my_idct_ptr;


/* Allocated multiplier tables: big enough for any supported variant */

typedef union {
  ISLOW_MULT_TYPE islow_array[DCTSIZE2];
#ifdef DCT_IFAST_SUPPORTED
  IFAST_MULT_TYPE ifast_array[DCTSIZE2];
#endif
#ifdef DCT_FLOAT_SUPPORTED
  FLOAT_MULT_TYPE float_array[DCTSIZE2];
#endif
} multiplier_table;


/* The current scaled-IDCT routines require ISLOW-style multiplier tables,
 * so be sure to compile that code if either ISLOW or SCALING is requested.
 */
#ifdef DCT_ISLOW_SUPPORTED
#define PROVIDE_ISLOW_TABLES
#else
#ifdef IDCT_SCALING_SUPPORTED
#define PROVIDE_ISLOW_TABLES
#endif
#endif


/*
 * Prepare for an output pass.
 * Here we select the proper IDCT routine for each component and build
 * a matching multiplier table.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
  my_idct_ptr idct = (my_idct_ptr) cinfo->idct;
  int ci, i;
  jpeg_component_info *compptr;
  int method = 0;
  inverse_DCT_method_ptr method_ptr = NULL;
  JQUANT_TBL * qtbl;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    /* Select the proper IDCT routine for this component's scaling */
    switch (compptr->DCT_scaled_size) {
#ifdef IDCT_SCALING_SUPPORTED
    case 1:
      method_ptr = jpeg_idct_1x1;
      method = JDCT_ISLOW;	/* jidctred uses islow-style table */
      break;
    case 2:
      method_ptr = jpeg_idct_2x2;
      method = JDCT_ISLOW;	/* jidctred uses islow-style table */
      break;
    case 4:
      method_ptr = jpeg_idct_4x4;
      method = JDCT_ISLOW;	/* jidctred uses islow-style table */
      break;
#endif
    case DCTSIZE:
      switch (cinfo->dct_method) {
#ifdef DCT_ISLOW_SUPPORTED
      case JDCT_ISLOW:
	method_ptr = jpeg_idct_islow;
	method = JDCT_ISLOW;
	break;
#endif
#ifdef DCT_IFAST_SUPPORTED
      case JDCT_IFAST:
	method_ptr = jpeg_idct_ifast;
	method = JDCT_IFAST;
	break;
#endif
#ifdef DCT_FLOAT_SUPPORTED
      case JDCT_FLOAT:
	method_ptr = jpeg_idct_float;
	method = JDCT_FLOAT;
	break;
#endif
      default:
	ERREXIT(cinfo, JERR_NOT_COMPILED);
	break;
      }
      break;
    default:
      ERREXIT1(cinfo, JERR_BAD_DCTSIZE, compptr->DCT_scaled_size);
      break;
    }
    idct->pub.inverse_DCT[ci] = method_ptr;
    /* Create multiplier table from quant table.
     * However, we can skip this if the component is uninteresting
     * or if we already built the table.  Also, if no quant table
     * has yet been saved for the component, we leave the
     * multiplier table all-zero; we'll be reading zeroes from the
     * coefficient controller's buffer anyway.
     */
    if (! compptr->component_needed || idct->cur_method[ci] == method)
      continue;
    qtbl = compptr->quant_table;
    if (qtbl == NULL)		/* happens if no data yet for component */
      continue;
    idct->cur_method[ci] = method;
    switch (method) {
#ifdef PROVIDE_ISLOW_TABLES
    case JDCT_ISLOW:
      {
	/* For LL&M IDCT method, multipliers are equal to raw quantization
	 * coefficients, but are stored as ints to ensure access efficiency.
	 */
	ISLOW_MULT_TYPE * ismtbl = (ISLOW_MULT_TYPE *) compptr->dct_table;
	for (i = 0; i < DCTSIZE2; i++) {
	  ismtbl[i] = (ISLOW_MULT_TYPE) qtbl->quantval[i];
	}
      }
      break;
#endif
#ifdef DCT_IFAST_SUPPORTED
    case JDCT_IFAST:
      {
	/* For AA&N IDCT method, multipliers are equal to quantization
	 * coefficients scaled by scalefactor[row]*scalefactor[col], where
	 *   scalefactor[0] = 1
	 *   scalefactor[k] = cos(k*PI/16) * sqrt(2)    for k=1..7
	 * For integer operation, the multiplier table is to be scaled by
	 * IFAST_SCALE_BITS.
	 */
	IFAST_MULT_TYPE * ifmtbl = (IFAST_MULT_TYPE *) compptr->dct_table;
#define CONST_BITS 14
	static const INT16 aanscales[DCTSIZE2] = {
	  /* precomputed values scaled up by 14 bits */
	  16384, 22725, 21407, 19266, 16384, 12873,  8867,  4520,
	  22725, 31521, 29692, 26722, 22725, 17855, 12299,  6270,
	  21407, 29692, 27969, 25172, 21407, 16819, 11585,  5906,
	  19266, 26722, 25172, 22654, 19266, 15137, 10426,  5315,
	  16384, 22725, 21407, 19266, 16384, 12873,  8867,  4520,
	  12873, 17855, 16819, 15137, 12873, 10114,  6967,  3552,
	   8867, 12299, 11585, 10426,  8867,  6967,  4799,  2446,
	   4520,  6270,  5906,  5315,  4520,  3552,  2446,  1247
	};
	SHIFT_TEMPS

	for (i = 0; i < DCTSIZE2; i++) {
	  ifmtbl[i] = (IFAST_MULT_TYPE)
	    DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[i],
				  (INT32) aanscales[i]),
		    CONST_BITS-IFAST_SCALE_BITS);
	}
      }
      break;
#endif
#ifdef DCT_FLOAT_SUPPORTED
    case JDCT_FLOAT:
      {
	/* For float AA&N IDCT method, multipliers are equal to quantization
	 * coefficients scaled by scalefactor[row]*scalefactor[col], where
	 *   scalefactor[0] = 1
	 *   scalefactor[k] = cos(k*PI/16) * sqrt(2)    for k=1..7
	 */
	FLOAT_MULT_TYPE * fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
	int row, col;
	static const double aanscalefactor[DCTSIZE] = {
	  1.0, 1.387039845, 1.306562965, 1.175875602,
	  1.0, 0.785694958, 0.541196100, 0.275899379
	};

	i = 0;
	for (row = 0; row < DCTSIZE; row++) {
	  for (col = 0; col < DCTSIZE; col++) {
	    fmtbl[i] = (FLOAT_MULT_TYPE)
	      ((double) qtbl->quantval[i] *
	       aanscalefactor[row] * aanscalefactor[col]);
	    i++;
	  }
	}
      }
      break;
#endif
    default:
      ERREXIT(cinfo, JERR_NOT_COMPILED);
      break;
    }
  }
}


/*
 * Initialize IDCT manager.
 */

GLOBAL(void)
jinit_inverse_dct (j_decompress_ptr cinfo)
{
  my_idct_ptr idct;
  int ci;
  jpeg_component_info *compptr;

  idct = (my_idct_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_idct_controller));
  cinfo->idct = (struct jpeg_inverse_dct *) idct;
  idct->pub.start_pass = start_pass;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    /* Allocate and pre-zero a multiplier table for each component */
    compptr->dct_table =
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  SIZEOF(multiplier_table));
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
    /* Mark multiplier table not yet set up for any method */
    idct->cur_method[ci] = -1;
  }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\jdinput.c ===
/*
 * jdinput.c
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains input control logic for the JPEG decompressor.
 * These routines are concerned with controlling the decompressor's input
 * processing (marker reading and coefficient decoding).  The actual input
 * reading is done in jdmarker.c, jdhuff.c, and jdphuff.c.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/* Private state */

typedef struct {
  struct jpeg_input_controller pub; /* public fields */

  boolean inheaders;		/* TRUE until first SOS is reached */
} my_input_controller;

typedef my_input_controller * my_inputctl_ptr;


/* Forward declarations */
METHODDEF(int) consume_markers JPP((j_decompress_ptr cinfo));


/*
 * Routines to calculate various quantities related to the size of the image.
 */

LOCAL(void)
initial_setup (j_decompress_ptr cinfo)
/* Called once, when first SOS marker is reached */
{
  int ci;
  jpeg_component_info *compptr;

  /* Make sure image isn't bigger than I can handle */
  if ((long) cinfo->image_height > (long) JPEG_MAX_DIMENSION ||
      (long) cinfo->image_width > (long) JPEG_MAX_DIMENSION)
    ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) JPEG_MAX_DIMENSION);

  /* For now, precision must match compiled-in value... */
  if (cinfo->data_precision != BITS_IN_JSAMPLE)
    ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);

  /* Check that number of components won't exceed internal array sizes */
  if (cinfo->num_components > MAX_COMPONENTS)
    ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
	     MAX_COMPONENTS);

  /* Compute maximum sampling factors; check factor validity */
  cinfo->max_h_samp_factor = 1;
  cinfo->max_v_samp_factor = 1;
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
	compptr->v_samp_factor<=0 || compptr->v_samp_factor>MAX_SAMP_FACTOR)
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
				   compptr->h_samp_factor);
    cinfo->max_v_samp_factor = MAX(cinfo->max_v_samp_factor,
				   compptr->v_samp_factor);
  }

  /* We initialize DCT_scaled_size and min_DCT_scaled_size to DCTSIZE.
   * In the full decompressor, this will be overridden by jdmaster.c;
   * but in the transcoder, jdmaster.c is not used, so we must do it here.
   */
  cinfo->min_DCT_scaled_size = DCTSIZE;

  /* Compute dimensions of components */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    compptr->DCT_scaled_size = DCTSIZE;
    /* Size in DCT blocks */
    compptr->width_in_blocks = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
		    (long) (cinfo->max_h_samp_factor * DCTSIZE));
    compptr->height_in_blocks = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
		    (long) (cinfo->max_v_samp_factor * DCTSIZE));
    /* downsampled_width and downsampled_height will also be overridden by
     * jdmaster.c if we are doing full decompression.  The transcoder library
     * doesn't use these values, but the calling application might.
     */
    /* Size in samples */
    compptr->downsampled_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
		    (long) cinfo->max_h_samp_factor);
    compptr->downsampled_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
		    (long) cinfo->max_v_samp_factor);
    /* Mark component needed, until color conversion says otherwise */
    compptr->component_needed = TRUE;
    /* Mark no quantization table yet saved for component */
    compptr->quant_table = NULL;
  }

  /* Compute number of fully interleaved MCU rows. */
  cinfo->total_iMCU_rows = (JDIMENSION)
    jdiv_round_up((long) cinfo->image_height,
		  (long) (cinfo->max_v_samp_factor*DCTSIZE));

  /* Decide whether file contains multiple scans */
  if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
    cinfo->inputctl->has_multiple_scans = TRUE;
  else
    cinfo->inputctl->has_multiple_scans = FALSE;
}


LOCAL(void)
per_scan_setup (j_decompress_ptr cinfo)
/* Do computations that are needed before processing a JPEG scan */
/* cinfo->comps_in_scan and cinfo->cur_comp_info[] were set from SOS marker */
{
  int ci, mcublks, tmp;
  jpeg_component_info *compptr;
  
  if (cinfo->comps_in_scan == 1) {
    
    /* Noninterleaved (single-component) scan */
    compptr = cinfo->cur_comp_info[0];
    
    /* Overall image size in MCUs */
    cinfo->MCUs_per_row = compptr->width_in_blocks;
    cinfo->MCU_rows_in_scan = compptr->height_in_blocks;
    
    /* For noninterleaved scan, always one block per MCU */
    compptr->MCU_width = 1;
    compptr->MCU_height = 1;
    compptr->MCU_blocks = 1;
    compptr->MCU_sample_width = compptr->DCT_scaled_size;
    compptr->last_col_width = 1;
    /* For noninterleaved scans, it is convenient to define last_row_height
     * as the number of block rows present in the last iMCU row.
     */
    tmp = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
    if (tmp == 0) tmp = compptr->v_samp_factor;
    compptr->last_row_height = tmp;
    
    /* Prepare array describing MCU composition */
    cinfo->blocks_in_MCU = 1;
    cinfo->MCU_membership[0] = 0;
    
  } else {
    
    /* Interleaved (multi-component) scan */
    if (cinfo->comps_in_scan <= 0 || cinfo->comps_in_scan > MAX_COMPS_IN_SCAN)
      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->comps_in_scan,
	       MAX_COMPS_IN_SCAN);
    
    /* Overall image size in MCUs */
    cinfo->MCUs_per_row = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width,
		    (long) (cinfo->max_h_samp_factor*DCTSIZE));
    cinfo->MCU_rows_in_scan = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height,
		    (long) (cinfo->max_v_samp_factor*DCTSIZE));
    
    cinfo->blocks_in_MCU = 0;
    
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
      compptr = cinfo->cur_comp_info[ci];
      /* Sampling factors give # of blocks of component in each MCU */
      compptr->MCU_width = compptr->h_samp_factor;
      compptr->MCU_height = compptr->v_samp_factor;
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_scaled_size;
      /* Figure number of non-dummy blocks in last MCU column & row */
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
      if (tmp == 0) tmp = compptr->MCU_width;
      compptr->last_col_width = tmp;
      tmp = (int) (compptr->height_in_blocks % compptr->MCU_height);
      if (tmp == 0) tmp = compptr->MCU_height;
      compptr->last_row_height = tmp;
      /* Prepare array describing MCU composition */
      mcublks = compptr->MCU_blocks;
      if (cinfo->blocks_in_MCU + mcublks > D_MAX_BLOCKS_IN_MCU)
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
      while (mcublks-- > 0) {
	cinfo->MCU_membership[cinfo->blocks_in_MCU++] = ci;
      }
    }
    
  }
}


/*
 * Save away a copy of the Q-table referenced by each component present
 * in the current scan, unless already saved during a prior scan.
 *
 * In a multiple-scan JPEG file, the encoder could assign different components
 * the same Q-table slot number, but change table definitions between scans
 * so that each component uses a different Q-table.  (The IJG encoder is not
 * currently capable of doing this, but other encoders might.)  Since we want
 * to be able to dequantize all the components at the end of the file, this
 * means that we have to save away the table actually used for each component.
 * We do this by copying the table at the start of the first scan containing
 * the component.
 * The JPEG spec prohibits the encoder from changing the contents of a Q-table
 * slot between scans of a component using that slot.  If the encoder does so
 * anyway, this decoder will simply use the Q-table values that were current
 * at the start of the first scan for the component.
 *
 * The decompressor output side looks only at the saved quant tables,
 * not at the current Q-table slots.
 */

LOCAL(void)
latch_quant_tables (j_decompress_ptr cinfo)
{
  int ci, qtblno;
  jpeg_component_info *compptr;
  JQUANT_TBL * qtbl;

  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    compptr = cinfo->cur_comp_info[ci];
    /* No work if we already saved Q-table for this component */
    if (compptr->quant_table != NULL)
      continue;
    /* Make sure specified quantization table is present */
    qtblno = compptr->quant_tbl_no;
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
	cinfo->quant_tbl_ptrs[qtblno] == NULL)
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
    /* OK, save away the quantization table */
    qtbl = (JQUANT_TBL *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  SIZEOF(JQUANT_TBL));
    MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
    compptr->quant_table = qtbl;
  }
}


/*
 * Initialize the input modules to read a scan of compressed data.
 * The first call to this is done by jdmaster.c after initializing
 * the entire decompressor (during jpeg_start_decompress).
 * Subsequent calls come from consume_markers, below.
 */

METHODDEF(void)
start_input_pass (j_decompress_ptr cinfo)
{
  per_scan_setup(cinfo);
  latch_quant_tables(cinfo);
  (*cinfo->entropy->start_pass) (cinfo);
  (*cinfo->coef->start_input_pass) (cinfo);
  cinfo->inputctl->consume_input = cinfo->coef->consume_data;
}


/*
 * Finish up after inputting a compressed-data scan.
 * This is called by the coefficient controller after it's read all
 * the expected data of the scan.
 */

METHODDEF(void)
finish_input_pass (j_decompress_ptr cinfo)
{
  cinfo->inputctl->consume_input = consume_markers;
}


/*
 * Read JPEG markers before, between, or after compressed-data scans.
 * Change state as necessary when a new scan is reached.
 * Return value is JPEG_SUSPENDED, JPEG_REACHED_SOS, or JPEG_REACHED_EOI.
 *
 * The consume_input method pointer points either here or to the
 * coefficient controller's consume_data routine, depending on whether
 * we are reading a compressed data segment or inter-segment markers.
 */

METHODDEF(int)
consume_markers (j_decompress_ptr cinfo)
{
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
  int val;

  if (inputctl->pub.eoi_reached) /* After hitting EOI, read no further */
    return JPEG_REACHED_EOI;

  val = (*cinfo->marker->read_markers) (cinfo);

  switch (val) {
  case JPEG_REACHED_SOS:	/* Found SOS */
    if (inputctl->inheaders) {	/* 1st SOS */
      initial_setup(cinfo);
      inputctl->inheaders = FALSE;
      /* Note: start_input_pass must be called by jdmaster.c
       * before any more input can be consumed.  jdapi.c is
       * responsible for enforcing this sequencing.
       */
    } else {			/* 2nd or later SOS marker */
      if (! inputctl->pub.has_multiple_scans)
	ERREXIT(cinfo, JERR_EOI_EXPECTED); /* Oops, I wasn't expecting this! */
      start_input_pass(cinfo);
    }
    break;
  case JPEG_REACHED_EOI:	/* Found EOI */
    inputctl->pub.eoi_reached = TRUE;
    if (inputctl->inheaders) {	/* Tables-only datastream, apparently */
      if (cinfo->marker->saw_SOF)
	ERREXIT(cinfo, JERR_SOF_NO_SOS);
    } else {
      /* Prevent infinite loop in coef ctlr's decompress_data routine
       * if user set output_scan_number larger than number of scans.
       */
      if (cinfo->output_scan_number > cinfo->input_scan_number)
	cinfo->output_scan_number = cinfo->input_scan_number;
    }
    break;
  case JPEG_SUSPENDED:
    break;
  }

  return val;
}


/*
 * Reset state to begin a fresh datastream.
 */

METHODDEF(void)
reset_input_controller (j_decompress_ptr cinfo)
{
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;

  inputctl->pub.consume_input = consume_markers;
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
  inputctl->pub.eoi_reached = FALSE;
  inputctl->inheaders = TRUE;
  /* Reset other modules */
  (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
  (*cinfo->marker->reset_marker_reader) (cinfo);
  /* Reset progression state -- would be cleaner if entropy decoder did this */
  cinfo->coef_bits = NULL;
}


/*
 * Initialize the input controller module.
 * This is called only once, when the decompression object is created.
 */

GLOBAL(void)
jinit_input_controller (j_decompress_ptr cinfo)
{
  my_inputctl_ptr inputctl;

  /* Create subobject in permanent pool */
  inputctl = (my_inputctl_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
				SIZEOF(my_input_controller));
  cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
  /* Initialize method pointers */
  inputctl->pub.consume_input = consume_markers;
  inputctl->pub.reset_input_controller = reset_input_controller;
  inputctl->pub.start_input_pass = start_input_pass;
  inputctl->pub.finish_input_pass = finish_input_pass;
  /* Initialize state: can't use reset_input_controller since we don't
   * want to try to reset other modules yet.
   */
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
  inputctl->pub.eoi_reached = FALSE;
  inputctl->inheaders = TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\jdmaster.c ===
/*
 * jdmaster.c
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains master control logic for the JPEG decompressor.
 * These routines are concerned with selecting the modules to be executed
 * and with determining the number of passes and the work to be done in each
 * pass.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/* Private state */

typedef struct {
  struct jpeg_decomp_master pub; /* public fields */

  int pass_number;		/* # of passes completed */

  boolean using_merged_upsample; /* TRUE if using merged upsample/cconvert */

  /* Saved references to initialized quantizer modules,
   * in case we need to switch modes.
   */
  struct jpeg_color_quantizer * quantizer_1pass;
  struct jpeg_color_quantizer * quantizer_2pass;
} my_decomp_master;

typedef my_decomp_master * my_master_ptr;


/*
 * Determine whether merged upsample/color conversion should be used.
 * CRUCIAL: this must match the actual capabilities of jdmerge.c!
 */

LOCAL(boolean)
use_merged_upsample (j_decompress_ptr cinfo)
{
#ifdef UPSAMPLE_MERGING_SUPPORTED
  /* Merging is the equivalent of plain box-filter upsampling */
  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
    return FALSE;
  /* jdmerge.c only supports YCC=>RGB color conversion */
  if (cinfo->jpeg_color_space != JCS_YCbCr || cinfo->num_components != 3 ||
      cinfo->out_color_space != JCS_RGB ||
      cinfo->out_color_components != RGB_PIXELSIZE)
    return FALSE;
  /* and it only handles 2h1v or 2h2v sampling ratios */
  if (cinfo->comp_info[0].h_samp_factor != 2 ||
      cinfo->comp_info[1].h_samp_factor != 1 ||
      cinfo->comp_info[2].h_samp_factor != 1 ||
      cinfo->comp_info[0].v_samp_factor >  2 ||
      cinfo->comp_info[1].v_samp_factor != 1 ||
      cinfo->comp_info[2].v_samp_factor != 1)
    return FALSE;
  /* furthermore, it doesn't work if we've scaled the IDCTs differently */
  if (cinfo->comp_info[0].DCT_scaled_size != cinfo->min_DCT_scaled_size ||
      cinfo->comp_info[1].DCT_scaled_size != cinfo->min_DCT_scaled_size ||
      cinfo->comp_info[2].DCT_scaled_size != cinfo->min_DCT_scaled_size)
    return FALSE;
  /* ??? also need to test for upsample-time rescaling, when & if supported */
  return TRUE;			/* by golly, it'll work... */
#else
  return FALSE;
#endif
}


/*
 * Compute output image dimensions and related values.
 * NOTE: this is exported for possible use by application.
 * Hence it mustn't do anything that can't be done twice.
 * Also note that it may be called before the master module is initialized!
 */

GLOBAL(void)
jpeg_calc_output_dimensions (j_decompress_ptr cinfo)
/* Do computations that are needed before master selection phase */
{
  int ci;
  jpeg_component_info *compptr;

  /* Prevent application from calling me at wrong times */
  if (cinfo->global_state != DSTATE_READY)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);

#ifdef IDCT_SCALING_SUPPORTED

  /* Compute actual output image dimensions and DCT scaling choices. */
  if (cinfo->scale_num * 8 <= cinfo->scale_denom) {
    /* Provide 1/8 scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width, 8L);
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height, 8L);
    cinfo->min_DCT_scaled_size = 1;
  } else if (cinfo->scale_num * 4 <= cinfo->scale_denom) {
    /* Provide 1/4 scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width, 4L);
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height, 4L);
    cinfo->min_DCT_scaled_size = 2;
  } else if (cinfo->scale_num * 2 <= cinfo->scale_denom) {
    /* Provide 1/2 scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width, 2L);
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height, 2L);
    cinfo->min_DCT_scaled_size = 4;
  } else {
    /* Provide 1/1 scaling */
    cinfo->output_width = cinfo->image_width;
    cinfo->output_height = cinfo->image_height;
    cinfo->min_DCT_scaled_size = DCTSIZE;
  }
  /* In selecting the actual DCT scaling for each component, we try to
   * scale up the chroma components via IDCT scaling rather than upsampling.
   * This saves time if the upsampler gets to use 1:1 scaling.
   * Note this code assumes that the supported DCT scalings are powers of 2.
   */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    int ssize = cinfo->min_DCT_scaled_size;
    while (ssize < DCTSIZE &&
	   (compptr->h_samp_factor * ssize * 2 <=
	    cinfo->max_h_samp_factor * cinfo->min_DCT_scaled_size) &&
	   (compptr->v_samp_factor * ssize * 2 <=
	    cinfo->max_v_samp_factor * cinfo->min_DCT_scaled_size)) {
      ssize = ssize * 2;
    }
    compptr->DCT_scaled_size = ssize;
  }

  /* Recompute downsampled dimensions of components;
   * application needs to know these if using raw downsampled data.
   */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    /* Size in samples, after IDCT scaling */
    compptr->downsampled_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width *
		    (long) (compptr->h_samp_factor * compptr->DCT_scaled_size),
		    (long) (cinfo->max_h_samp_factor * DCTSIZE));
    compptr->downsampled_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height *
		    (long) (compptr->v_samp_factor * compptr->DCT_scaled_size),
		    (long) (cinfo->max_v_samp_factor * DCTSIZE));
  }

#else /* !IDCT_SCALING_SUPPORTED */

  /* Hardwire it to "no scaling" */
  cinfo->output_width = cinfo->image_width;
  cinfo->output_height = cinfo->image_height;
  /* jdinput.c has already initialized DCT_scaled_size to DCTSIZE,
   * and has computed unscaled downsampled_width and downsampled_height.
   */

#endif /* IDCT_SCALING_SUPPORTED */

  /* Report number of components in selected colorspace. */
  /* Probably this should be in the color conversion module... */
  switch (cinfo->out_color_space) {
  case JCS_GRAYSCALE:
    cinfo->out_color_components = 1;
    break;
  case JCS_RGB:
#if RGB_PIXELSIZE != 3
    cinfo->out_color_components = RGB_PIXELSIZE;
    break;
#endif /* else share code with YCbCr */
  case JCS_YCbCr:
    cinfo->out_color_components = 3;
    break;
  case JCS_CMYK:
  case JCS_YCCK:
    cinfo->out_color_components = 4;
    break;
  default:			/* else must be same colorspace as in file */
    cinfo->out_color_components = cinfo->num_components;
    break;
  }
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
			      cinfo->out_color_components);

  /* See if upsampler will want to emit more than one row at a time */
  if (use_merged_upsample(cinfo))
    cinfo->rec_outbuf_height = cinfo->max_v_samp_factor;
  else
    cinfo->rec_outbuf_height = 1;
}


/*
 * Several decompression processes need to range-limit values to the range
 * 0..MAXJSAMPLE; the input value may fall somewhat outside this range
 * due to noise introduced by quantization, roundoff error, etc.  These
 * processes are inner loops and need to be as fast as possible.  On most
 * machines, particularly CPUs with pipelines or instruction prefetch,
 * a (subscript-check-less) C table lookup
 *		x = sample_range_limit[x];
 * is faster than explicit tests
 *		if (x < 0)  x = 0;
 *		else if (x > MAXJSAMPLE)  x = MAXJSAMPLE;
 * These processes all use a common table prepared by the routine below.
 *
 * For most steps we can mathematically guarantee that the initial value
 * of x is within MAXJSAMPLE+1 of the legal range, so a table running from
 * -(MAXJSAMPLE+1) to 2*MAXJSAMPLE+1 is sufficient.  But for the initial
 * limiting step (just after the IDCT), a wildly out-of-range value is 
 * possible if the input data is corrupt.  To avoid any chance of indexing
 * off the end of memory and getting a bad-pointer trap, we perform the
 * post-IDCT limiting thus:
 *		x = range_limit[x & MASK];
 * where MASK is 2 bits wider than legal sample data, ie 10 bits for 8-bit
 * samples.  Under normal circumstances this is more than enough range and
 * a correct output will be generated; with bogus input data the mask will
 * cause wraparound, and we will safely generate a bogus-but-in-range output.
 * For the post-IDCT step, we want to convert the data from signed to unsigned
 * representation by adding CENTERJSAMPLE at the same time that we limit it.
 * So the post-IDCT limiting table ends up looking like this:
 *   CENTERJSAMPLE,CENTERJSAMPLE+1,...,MAXJSAMPLE,
 *   MAXJSAMPLE (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),
 *   0          (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),
 *   0,1,...,CENTERJSAMPLE-1
 * Negative inputs select values from the upper half of the table after
 * masking.
 *
 * We can save some space by overlapping the start of the post-IDCT table
 * with the simpler range limiting table.  The post-IDCT table begins at
 * sample_range_limit + CENTERJSAMPLE.
 *
 * Note that the table is allocated in near data space on PCs; it's small
 * enough and used often enough to justify this.
 */

LOCAL(void)
prepare_range_limit_table (j_decompress_ptr cinfo)
/* Allocate and fill in the sample_range_limit table */
{
  JSAMPLE * table;
  int i;

  table = (JSAMPLE *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		(5 * (MAXJSAMPLE+1) + CENTERJSAMPLE) * SIZEOF(JSAMPLE));
  table += (MAXJSAMPLE+1);	/* allow negative subscripts of simple table */
  cinfo->sample_range_limit = table;
  /* First segment of "simple" table: limit[x] = 0 for x < 0 */
  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
  /* Main part of "simple" table: limit[x] = x */
  for (i = 0; i <= MAXJSAMPLE; i++)
    table[i] = (JSAMPLE) i;
  table += CENTERJSAMPLE;	/* Point to where post-IDCT table starts */
  /* End of simple table, rest of first half of post-IDCT table */
  for (i = CENTERJSAMPLE; i < 2*(MAXJSAMPLE+1); i++)
    table[i] = MAXJSAMPLE;
  /* Second half of post-IDCT table */
  MEMZERO(table + (2 * (MAXJSAMPLE+1)),
	  (2 * (MAXJSAMPLE+1) - CENTERJSAMPLE) * SIZEOF(JSAMPLE));
  MEMCOPY(table + (4 * (MAXJSAMPLE+1) - CENTERJSAMPLE),
	  cinfo->sample_range_limit, CENTERJSAMPLE * SIZEOF(JSAMPLE));
}


/*
 * Master selection of decompression modules.
 * This is done once at jpeg_start_decompress time.  We determine
 * which modules will be used and give them appropriate initialization calls.
 * We also initialize the decompressor input side to begin consuming data.
 *
 * Since jpeg_read_header has finished, we know what is in the SOF
 * and (first) SOS markers.  We also have all the application parameter
 * settings.
 */

LOCAL(void)
master_selection (j_decompress_ptr cinfo)
{
  my_master_ptr master = (my_master_ptr) cinfo->master;
  boolean use_c_buffer;
  long samplesperrow;
  JDIMENSION jd_samplesperrow;

  /* Initialize dimensions and other stuff */
  jpeg_calc_output_dimensions(cinfo);
  prepare_range_limit_table(cinfo);

  /* Width of an output scanline must be representable as JDIMENSION. */
  samplesperrow = (long) cinfo->output_width * (long) cinfo->out_color_components;
  jd_samplesperrow = (JDIMENSION) samplesperrow;
  if ((long) jd_samplesperrow != samplesperrow)
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);

  /* Initialize my private state */
  master->pass_number = 0;
  master->using_merged_upsample = use_merged_upsample(cinfo);

  /* Color quantizer selection */
  master->quantizer_1pass = NULL;
  master->quantizer_2pass = NULL;
  /* No mode changes if not using buffered-image mode. */
  if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
    cinfo->enable_1pass_quant = FALSE;
    cinfo->enable_external_quant = FALSE;
    cinfo->enable_2pass_quant = FALSE;
  }
  if (cinfo->quantize_colors) {
    if (cinfo->raw_data_out)
      ERREXIT(cinfo, JERR_NOTIMPL);
    /* 2-pass quantizer only works in 3-component color space. */
    if (cinfo->out_color_components != 3) {
      cinfo->enable_1pass_quant = TRUE;
      cinfo->enable_external_quant = FALSE;
      cinfo->enable_2pass_quant = FALSE;
      cinfo->colormap = NULL;
    } else if (cinfo->colormap != NULL) {
      cinfo->enable_external_quant = TRUE;
    } else if (cinfo->two_pass_quantize) {
      cinfo->enable_2pass_quant = TRUE;
    } else {
      cinfo->enable_1pass_quant = TRUE;
    }

    if (cinfo->enable_1pass_quant) {
#ifdef QUANT_1PASS_SUPPORTED
      jinit_1pass_quantizer(cinfo);
      master->quantizer_1pass = cinfo->cquantize;
#else
      ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
    }

    /* We use the 2-pass code to map to external colormaps. */
    if (cinfo->enable_2pass_quant || cinfo->enable_external_quant) {
#ifdef QUANT_2PASS_SUPPORTED
      jinit_2pass_quantizer(cinfo);
      master->quantizer_2pass = cinfo->cquantize;
#else
      ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
    }
    /* If both quantizers are initialized, the 2-pass one is left active;
     * this is necessary for starting with quantization to an external map.
     */
  }

  /* Post-processing: in particular, color conversion first */
  if (! cinfo->raw_data_out) {
    if (master->using_merged_upsample) {
#ifdef UPSAMPLE_MERGING_SUPPORTED
      jinit_merged_upsampler(cinfo); /* does color conversion too */
#else
      ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
    } else {
      jinit_color_deconverter(cinfo);
      jinit_upsampler(cinfo);
    }
    jinit_d_post_controller(cinfo, cinfo->enable_2pass_quant);
  }
  /* Inverse DCT */
  jinit_inverse_dct(cinfo);
  /* Entropy decoding: either Huffman or arithmetic coding. */
  if (cinfo->arith_code) {
    ERREXIT(cinfo, JERR_ARITH_NOTIMPL);
  } else {
    if (cinfo->progressive_mode) {
#ifdef D_PROGRESSIVE_SUPPORTED
      jinit_phuff_decoder(cinfo);
#else
      ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
    } else
      jinit_huff_decoder(cinfo);
  }

  /* Initialize principal buffer controllers. */
  use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
  jinit_d_coef_controller(cinfo, use_c_buffer);

  if (! cinfo->raw_data_out)
    jinit_d_main_controller(cinfo, FALSE /* never need full buffer here */);

  /* We can now tell the memory manager to allocate virtual arrays. */
  (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);

  /* Initialize input side of decompressor to consume first scan. */
  (*cinfo->inputctl->start_input_pass) (cinfo);

#ifdef D_MULTISCAN_FILES_SUPPORTED
  /* If jpeg_start_decompress will read the whole file, initialize
   * progress monitoring appropriately.  The input step is counted
   * as one pass.
   */
  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
      cinfo->inputctl->has_multiple_scans) {
    int nscans;
    /* Estimate number of scans to set pass_limit. */
    if (cinfo->progressive_mode) {
      /* Arbitrarily estimate 2 interleaved DC scans + 3 AC scans/component. */
      nscans = 2 + 3 * cinfo->num_components;
    } else {
      /* For a nonprogressive multiscan file, estimate 1 scan per component. */
      nscans = cinfo->num_components;
    }
    cinfo->progress->pass_counter = 0L;
    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
    cinfo->progress->completed_passes = 0;
    cinfo->progress->total_passes = (cinfo->enable_2pass_quant ? 3 : 2);
    /* Count the input pass as done */
    master->pass_number++;
  }
#endif /* D_MULTISCAN_FILES_SUPPORTED */
}


/*
 * Per-pass setup.
 * This is called at the beginning of each output pass.  We determine which
 * modules will be active during this pass and give them appropriate
 * start_pass calls.  We also set is_dummy_pass to indicate whether this
 * is a "real" output pass or a dummy pass for color quantization.
 * (In the latter case, jdapi.c will crank the pass to completion.)
 */

METHODDEF(void)
prepare_for_output_pass (j_decompress_ptr cinfo)
{
  my_master_ptr master = (my_master_ptr) cinfo->master;

  if (master->pub.is_dummy_pass) {
#ifdef QUANT_2PASS_SUPPORTED
    /* Final pass of 2-pass quantization */
    master->pub.is_dummy_pass = FALSE;
    (*cinfo->cquantize->start_pass) (cinfo, FALSE);
    (*cinfo->post->start_pass) (cinfo, JBUF_CRANK_DEST);
    (*cinfo->main->start_pass) (cinfo, JBUF_CRANK_DEST);
#else
    ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif /* QUANT_2PASS_SUPPORTED */
  } else {
    if (cinfo->quantize_colors && cinfo->colormap == NULL) {
      /* Select new quantization method */
      if (cinfo->two_pass_quantize && cinfo->enable_2pass_quant) {
	cinfo->cquantize = master->quantizer_2pass;
	master->pub.is_dummy_pass = TRUE;
      } else if (cinfo->enable_1pass_quant) {
	cinfo->cquantize = master->quantizer_1pass;
      } else {
	ERREXIT(cinfo, JERR_MODE_CHANGE);
      }
    }
    (*cinfo->idct->start_pass) (cinfo);
    (*cinfo->coef->start_output_pass) (cinfo);
    if (! cinfo->raw_data_out) {
      if (! master->using_merged_upsample)
	(*cinfo->cconvert->start_pass) (cinfo);
      (*cinfo->upsample->start_pass) (cinfo);
      if (cinfo->quantize_colors)
	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
      (*cinfo->post->start_pass) (cinfo,
	    (master->pub.is_dummy_pass ? JBUF_SAVE_AND_PASS : JBUF_PASS_THRU));
      (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
    }
  }

  /* Set up progress monitor's pass info if present */
  if (cinfo->progress != NULL) {
    cinfo->progress->completed_passes = master->pass_number;
    cinfo->progress->total_passes = master->pass_number +
				    (master->pub.is_dummy_pass ? 2 : 1);
    /* In buffered-image mode, we assume one more output pass if EOI not
     * yet reached, but no more passes if EOI has been reached.
     */
    if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
      cinfo->progress->total_passes += (cinfo->enable_2pass_quant ? 2 : 1);
    }
  }
}


/*
 * Finish up at end of an output pass.
 */

METHODDEF(void)
finish_output_pass (j_decompress_ptr cinfo)
{
  my_master_ptr master = (my_master_ptr) cinfo->master;

  if (cinfo->quantize_colors)
    (*cinfo->cquantize->finish_pass) (cinfo);
  master->pass_number++;
}


#ifdef D_MULTISCAN_FILES_SUPPORTED

/*
 * Switch to a new external colormap between output passes.
 */

GLOBAL(void)
jpeg_new_colormap (j_decompress_ptr cinfo)
{
  my_master_ptr master = (my_master_ptr) cinfo->master;

  /* Prevent application from calling me at wrong times */
  if (cinfo->global_state != DSTATE_BUFIMAGE)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);

  if (cinfo->quantize_colors && cinfo->enable_external_quant &&
      cinfo->colormap != NULL) {
    /* Select 2-pass quantizer for external colormap use */
    cinfo->cquantize = master->quantizer_2pass;
    /* Notify quantizer of colormap change */
    (*cinfo->cquantize->new_color_map) (cinfo);
    master->pub.is_dummy_pass = FALSE; /* just in case */
  } else
    ERREXIT(cinfo, JERR_MODE_CHANGE);
}

#endif /* D_MULTISCAN_FILES_SUPPORTED */


/*
 * Initialize master decompression control and select active modules.
 * This is performed at the start of jpeg_start_decompress.
 */

GLOBAL(void)
jinit_master_decompress (j_decompress_ptr cinfo)
{
  my_master_ptr master;

  master = (my_master_ptr)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  SIZEOF(my_decomp_master));
  cinfo->master = (struct jpeg_decomp_master *) master;
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
  master->pub.finish_output_pass = finish_output_pass;

  master->pub.is_dummy_pass = FALSE;

  master_selection(cinfo);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\jdhuff.h ===
/*
 * jdhuff.h
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains declarations for Huffman entropy decoding routines
 * that are shared between the sequential decoder (jdhuff.c) and the
 * progressive decoder (jdphuff.c).  No other modules need to see these.
 */

/* Short forms of external names for systems with brain-damaged linkers. */

#ifdef NEED_SHORT_EXTERNAL_NAMES
#define jpeg_make_d_derived_tbl	jMkDDerived
#define jpeg_fill_bit_buffer	jFilBitBuf
#define jpeg_huff_decode	jHufDecode
#endif /* NEED_SHORT_EXTERNAL_NAMES */


/* Derived data constructed for each Huffman table */

#define HUFF_LOOKAHEAD	8	/* # of bits of lookahead */

typedef struct {
  /* Basic tables: (element [0] of each array is unused) */
  INT32 mincode[17];		/* smallest code of length k */
  INT32 maxcode[18];		/* largest code of length k (-1 if none) */
  /* (maxcode[17] is a sentinel to ensure jpeg_huff_decode terminates) */
  int valptr[17];		/* huffval[] index of 1st symbol of length k */

  /* Link to public Huffman table (needed only in jpeg_huff_decode) */
  JHUFF_TBL *pub;

  /* Lookahead tables: indexed by the next HUFF_LOOKAHEAD bits of
   * the input data stream.  If the next Huffman code is no more
   * than HUFF_LOOKAHEAD bits long, we can obtain its length and
   * the corresponding symbol directly from these tables.
   */
  int look_nbits[1<<HUFF_LOOKAHEAD]; /* # bits, or 0 if too long */
  UINT8 look_sym[1<<HUFF_LOOKAHEAD]; /* symbol, or unused */
} d_derived_tbl;

/* Expand a Huffman table definition into the derived format */
EXTERN(void) jpeg_make_d_derived_tbl JPP((j_decompress_ptr cinfo,
				JHUFF_TBL * htbl, d_derived_tbl ** pdtbl));


/*
 * Fetching the next N bits from the input stream is a time-critical operation
 * for the Huffman decoders.  We implement it with a combination of inline
 * macros and out-of-line subroutines.  Note that N (the number of bits
 * demanded at one time) never exceeds 15 for JPEG use.
 *
 * We read source bytes into get_buffer and dole out bits as needed.
 * If get_buffer already contains enough bits, they are fetched in-line
 * by the macros CHECK_BIT_BUFFER and GET_BITS.  When there aren't enough
 * bits, jpeg_fill_bit_buffer is called; it will attempt to fill get_buffer
 * as full as possible (not just to the number of bits needed; this
 * prefetching reduces the overhead cost of calling jpeg_fill_bit_buffer).
 * Note that jpeg_fill_bit_buffer may return FALSE to indicate suspension.
 * On TRUE return, jpeg_fill_bit_buffer guarantees that get_buffer contains
 * at least the requested number of bits --- dummy zeroes are inserted if
 * necessary.
 */

typedef INT32 bit_buf_type;	/* type of bit-extraction buffer */
#define BIT_BUF_SIZE  32	/* size of buffer in bits */
typedef __int64 bit_buf_type_64;	/* type of bit-extraction buffer */
#define BIT_BUF_SIZE_64  64	/* size of buffer in bits */

/* If long is > 32 bits on your machine, and shifting/masking longs is
 * reasonably fast, making bit_buf_type be long and setting BIT_BUF_SIZE
 * appropriately should be a win.  Unfortunately we can't do this with
 * something like  #define BIT_BUF_SIZE (sizeof(bit_buf_type)*8)
 * because not all machines measure sizeof in 8-bit bytes.
 */

typedef struct {		/* Bitreading state saved across MCUs */
  bit_buf_type_64 get_buffer_64;	/* MMX current bit-extraction buffer */
  bit_buf_type get_buffer;	/* current bit-extraction buffer */
  int bits_left;		/* # of unused bits in it */
  boolean printed_eod;		/* flag to suppress multiple warning msgs */
} bitread_perm_state;

typedef struct {		/* Bitreading working state within an MCU */
  /* current data source state */
  const JOCTET * next_input_byte; /* => next byte to read from source */
  size_t bytes_in_buffer;	/* # of bytes remaining in source buffer */
  int unread_marker;		/* nonzero if we have hit a marker */
  /* bit input buffer --- note these values are kept in register variables,
   * not in this struct, inside the inner loops.
   */
  bit_buf_type get_buffer;	/* current bit-extraction buffer */
  bit_buf_type_64 get_buffer_64;	/* MMX current bit-extraction buffer */
  int bits_left;		/* # of unused bits in it */
  /* pointers needed by jpeg_fill_bit_buffer */
  j_decompress_ptr cinfo;	/* back link to decompress master record */
  boolean * printed_eod_ptr;	/* => flag in permanent state */
} bitread_working_state;
// these BITREAD MACROS are only called in decode_mcu, but not by MMX routine
// not aware of MMX get_buffer
/* Macros to declare and load/save bitread local variables. */
#define BITREAD_STATE_VARS  \
	register bit_buf_type get_buffer;  \
	register int bits_left;  \
	bitread_working_state br_state

#define BITREAD_LOAD_STATE(cinfop,permstate)  \
	br_state.cinfo = cinfop; \
	br_state.next_input_byte = cinfop->src->next_input_byte; \
	br_state.bytes_in_buffer = cinfop->src->bytes_in_buffer; \
	br_state.unread_marker = cinfop->unread_marker; \
	get_buffer = permstate.get_buffer; \
	bits_left = permstate.bits_left; \
	br_state.printed_eod_ptr = & permstate.printed_eod

#define BITREAD_SAVE_STATE(cinfop,permstate)  \
	cinfop->src->next_input_byte = br_state.next_input_byte; \
	cinfop->src->bytes_in_buffer = br_state.bytes_in_buffer; \
	cinfop->unread_marker = br_state.unread_marker; \
	permstate.get_buffer = get_buffer; \
	permstate.bits_left = bits_left

/*
 * These macros provide the in-line portion of bit fetching.
 * Use CHECK_BIT_BUFFER to ensure there are N bits in get_buffer
 * before using GET_BITS, PEEK_BITS, or DROP_BITS.
 * The variables get_buffer and bits_left are assumed to be locals,
 * but the state struct might not be (jpeg_huff_decode needs this).
 *	CHECK_BIT_BUFFER(state,n,action);
 *		Ensure there are N bits in get_buffer; if suspend, take action.
 *      val = GET_BITS(n);
 *		Fetch next N bits.
 *      val = PEEK_BITS(n);
 *		Fetch next N bits without removing them from the buffer.
 *	DROP_BITS(n);
 *		Discard next N bits.
 * The value N should be a simple variable, not an expression, because it
 * is evaluated multiple times.
 */
// these macros are only called in non-MMX version of jpeg_huff_decoder and
// decode_mcu -- no changes made here, not aware of MMX get_buffer
#define CHECK_BIT_BUFFER(state,nbits,action) \
	{ if (bits_left < (nbits)) {  \
	    if (! jpeg_fill_bit_buffer(&(state),get_buffer,bits_left,nbits))  \
	      { action; }  \
	    get_buffer = (state).get_buffer; bits_left = (state).bits_left; } }

#define GET_BITS(nbits) \
	(((int) (get_buffer >> (bits_left -= (nbits)))) & ((1<<(nbits))-1))

#define PEEK_BITS(nbits) \
	(((int) (get_buffer >> (bits_left -  (nbits)))) & ((1<<(nbits))-1))

#define DROP_BITS(nbits) \
	(bits_left -= (nbits))

/* Load up the bit buffer to a depth of at least nbits */
EXTERN(boolean) jpeg_fill_bit_buffer
	JPP((bitread_working_state * state, register bit_buf_type get_buffer,
	     register int bits_left, int nbits));


/*
 * Code for extracting next Huffman-coded symbol from input bit stream.
 * Again, this is time-critical and we make the main paths be macros.
 *
 * We use a lookahead table to process codes of up to HUFF_LOOKAHEAD bits
 * without looping.  Usually, more than 95% of the Huffman codes will be 8
 * or fewer bits long.  The few overlength codes are handled with a loop,
 * which need not be inline code.
 *
 * Notes about the HUFF_DECODE macro:
 * 1. Near the end of the data segment, we may fail to get enough bits
 *    for a lookahead.  In that case, we do it the hard way.
 * 2. If the lookahead table contains no entry, the next code must be
 *    more than HUFF_LOOKAHEAD bits long.
 * 3. jpeg_huff_decode returns -1 if forced to suspend.
 */
// not called by MMX code -- not aware of MMX get_buffer
#define HUFF_DECODE(result,state,htbl,failaction,slowlabel) \
{ register int nb, look; \
  if (bits_left < HUFF_LOOKAHEAD) { \
    if (! jpeg_fill_bit_buffer(&state,get_buffer,bits_left, 0)) {failaction;} \
    get_buffer = state.get_buffer; bits_left = state.bits_left; \
    if (bits_left < HUFF_LOOKAHEAD) { \
      nb = 1; goto slowlabel; \
    } \
  } \
  look = PEEK_BITS(HUFF_LOOKAHEAD); \
  if ((nb = htbl->look_nbits[look]) != 0) { \
    DROP_BITS(nb); \
    result = htbl->look_sym[look]; \
  } else { \
    nb = HUFF_LOOKAHEAD+1; \
slowlabel: \
    if ((result=jpeg_huff_decode(&state,get_buffer,bits_left,htbl,nb)) < 0) \
	{ failaction; } \
    get_buffer = state.get_buffer; bits_left = state.bits_left; \
  } \
}

/* Out-of-line case for Huffman code fetching */
EXTERN(int) jpeg_huff_decode
	JPP((bitread_working_state * state, register bit_buf_type get_buffer,
	     register int bits_left, d_derived_tbl * htbl, int min_bits));
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\jdmainct.c ===
/*
 * jdmainct.c
 *
 * Copyright (C) 1994-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains the main buffer controller for decompression.
 * The main buffer lies between the JPEG decompressor proper and the
 * post-processor; it holds downsampled data in the JPEG colorspace.
 *
 * Note that this code is bypassed in raw-data mode, since the application
 * supplies the equivalent of the main buffer in that case.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/*
 * In the current system design, the main buffer need never be a full-image
 * buffer; any full-height buffers will be found inside the coefficient or
 * postprocessing controllers.  Nonetheless, the main controller is not
 * trivial.  Its responsibility is to provide context rows for upsampling/
 * rescaling, and doing this in an efficient fashion is a bit tricky.
 *
 * Postprocessor input data is counted in "row groups".  A row group
 * is defined to be (v_samp_factor * DCT_scaled_size / min_DCT_scaled_size)
 * sample rows of each component.  (We require DCT_scaled_size values to be
 * chosen such that these numbers are integers.  In practice DCT_scaled_size
 * values will likely be powers of two, so we actually have the stronger
 * condition that DCT_scaled_size / min_DCT_scaled_size is an integer.)
 * Upsampling will typically produce max_v_samp_factor pixel rows from each
 * row group (times any additional scale factor that the upsampler is
 * applying).
 *
 * The coefficient controller will deliver data to us one iMCU row at a time;
 * each iMCU row contains v_samp_factor * DCT_scaled_size sample rows, or
 * exactly min_DCT_scaled_size row groups.  (This amount of data corresponds
 * to one row of MCUs when the image is fully interleaved.)  Note that the
 * number of sample rows varies across components, but the number of row
 * groups does not.  Some garbage sample rows may be included in the last iMCU
 * row at the bottom of the image.
 *
 * Depending on the vertical scaling algorithm used, the upsampler may need
 * access to the sample row(s) above and below its current input row group.
 * The upsampler is required to set need_context_rows TRUE at global selection
 * time if so.  When need_context_rows is FALSE, this controller can simply
 * obtain one iMCU row at a time from the coefficient controller and dole it
 * out as row groups to the postprocessor.
 *
 * When need_context_rows is TRUE, this controller guarantees that the buffer
 * passed to postprocessing contains at least one row group's worth of samples
 * above and below the row group(s) being processed.  Note that the context
 * rows "above" the first passed row group appear at negative row offsets in
 * the passed buffer.  At the top and bottom of the image, the required
 * context rows are manufactured by duplicating the first or last real sample
 * row; this avoids having special cases in the upsampling inner loops.
 *
 * The amount of context is fixed at one row group just because that's a
 * convenient number for this controller to work with.  The existing
 * upsamplers really only need one sample row of context.  An upsampler
 * supporting arbitrary output rescaling might wish for more than one row
 * group of context when shrinking the image; tough, we don't handle that.
 * (This is justified by the assumption that downsizing will be handled mostly
 * by adjusting the DCT_scaled_size values, so that the actual scale factor at
 * the upsample step needn't be much less than one.)
 *
 * To provide the desired context, we have to retain the last two row groups
 * of one iMCU row while reading in the next iMCU row.  (The last row group
 * can't be processed until we have another row group for its below-context,
 * and so we have to save the next-to-last group too for its above-context.)
 * We could do this most simply by copying data around in our buffer, but
 * that'd be very slow.  We can avoid copying any data by creating a rather
 * strange pointer structure.  Here's how it works.  We allocate a workspace
 * consisting of M+2 row groups (where M = min_DCT_scaled_size is the number
 * of row groups per iMCU row).  We create two sets of redundant pointers to
 * the workspace.  Labeling the physical row groups 0 to M+1, the synthesized
 * pointer lists look like this:
 *                   M+1                          M-1
 * master pointer --> 0         master pointer --> 0
 *                    1                            1
 *                   ...                          ...
 *                   M-3                          M-3
 *                   M-2                           M
 *                   M-1                          M+1
 *                    M                           M-2
 *                   M+1                          M-1
 *                    0                            0
 * We read alternate iMCU rows using each master pointer; thus the last two
 * row groups of the previous iMCU row remain un-overwritten in the workspace.
 * The pointer lists are set up so that the required context rows appear to
 * be adjacent to the proper places when we pass the pointer lists to the
 * upsampler.
 *
 * The above pictures describe the normal state of the pointer lists.
 * At top and bottom of the image, we diddle the pointer lists to duplicate
 * the first or last sample row as necessary (this is cheaper than copying
 * sample rows around).
 *
 * This scheme breaks down if M < 2, ie, min_DCT_scaled_size is 1.  In that
 * situation each iMCU row provides only one row group so the buffering logic
 * must be different (eg, we must read two iMCU rows before we can emit the
 * first row group).  For now, we simply do not support providing context
 * rows when min_DCT_scaled_size is 1.  That combination seems unlikely to
 * be worth providing --- if someone wants a 1/8th-size preview, they probably
 * want it quick and dirty, so a context-free upsampler is sufficient.
 */


/* Private buffer controller object */

typedef struct {
  struct jpeg_d_main_controller pub; /* public fields */

  /* Pointer to allocated workspace (M or M+2 row groups). */
  JSAMPARRAY buffer[MAX_COMPONENTS];

  boolean buffer_full;		/* Have we gotten an iMCU row from decoder? */
  JDIMENSION rowgroup_ctr;	/* counts row groups output to postprocessor */

  /* Remaining fields are only used in the context case. */

  /* These are the master pointers to the funny-order pointer lists. */
  JSAMPIMAGE xbuffer[2];	/* pointers to weird pointer lists */

  int whichptr;			/* indicates which pointer set is now in use */
  int context_state;		/* process_data state machine status */
  JDIMENSION rowgroups_avail;	/* row groups available to postprocessor */
  JDIMENSION iMCU_row_ctr;	/* counts iMCU rows to detect image top/bot */
} my_main_controller;

typedef my_main_controller * my_main_ptr;

/* context_state values: */
#define CTX_PREPARE_FOR_IMCU	0	/* need to prepare for MCU row */
#define CTX_PROCESS_IMCU	1	/* feeding iMCU to postprocessor */
#define CTX_POSTPONED_ROW	2	/* feeding postponed row group */


/* Forward declarations */
METHODDEF(void) process_data_simple_main
	JPP((j_decompress_ptr cinfo, JSAMPARRAY output_buf,
	     JDIMENSION *out_row_ctr, JDIMENSION out_rows_avail));
METHODDEF(void) process_data_context_main
	JPP((j_decompress_ptr cinfo, JSAMPARRAY output_buf,
	     JDIMENSION *out_row_ctr, JDIMENSION out_rows_avail));
#ifdef QUANT_2PASS_SUPPORTED
METHODDEF(void) process_data_crank_post
	JPP((j_decompress_ptr cinfo, JSAMPARRAY output_buf,
	     JDIMENSION *out_row_ctr, JDIMENSION out_rows_avail));
#endif


LOCAL(void)
alloc_funny_pointers (j_decompress_ptr cinfo)
/* Allocate space for the funny pointer lists.
 * This is done only once, not once per pass.
 */
{
  my_main_ptr main = (my_main_ptr) cinfo->main;
  int ci, rgroup;
  int M = cinfo->min_DCT_scaled_size;
  jpeg_component_info *compptr;
  JSAMPARRAY xbuf;

  /* Get top-level space for component array pointers.
   * We alloc both arrays with one call to save a few cycles.
   */
  main->xbuffer[0] = (JSAMPIMAGE)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				cinfo->num_components * 2 * SIZEOF(JSAMPARRAY));
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    rgroup = (compptr->v_samp_factor * compptr->DCT_scaled_size) /
      cinfo->min_DCT_scaled_size; /* height of a row group of component */
    /* Get space for pointer lists --- M+4 row groups in each list.
     * We alloc both pointer lists with one call to save a few cycles.
     */
    xbuf = (JSAMPARRAY)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
    xbuf += rgroup;		/* want one row group at negative offsets */
    main->xbuffer[0][ci] = xbuf;
    xbuf += rgroup * (M + 4);
    main->xbuffer[1][ci] = xbuf;
  }
}


LOCAL(void)
make_funny_pointers (j_decompress_ptr cinfo)
/* Create the funny pointer lists discussed in the comments above.
 * The actual workspace is already allocated (in main->buffer),
 * and the space for the pointer lists is allocated too.
 * This routine just fills in the curiously ordered lists.
 * This will be repeated at the beginning of each pass.
 */
{
  my_main_ptr main = (my_main_ptr) cinfo->main;
  int ci, i, rgroup;
  int M = cinfo->min_DCT_scaled_size;
  jpeg_component_info *compptr;
  JSAMPARRAY buf, xbuf0, xbuf1;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    rgroup = (compptr->v_samp_factor * compptr->DCT_scaled_size) /
      cinfo->min_DCT_scaled_size; /* height of a row group of component */
    xbuf0 = main->xbuffer[0][ci];
    xbuf1 = main->xbuffer[1][ci];
    /* First copy the workspace pointers as-is */
    buf = main->buffer[ci];
    for (i = 0; i < rgroup * (M + 2); i++) {
      xbuf0[i] = xbuf1[i] = buf[i];
    }
    /* In the second list, put the last four row groups in swapped order */
    for (i = 0; i < rgroup * 2; i++) {
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
      xbuf1[rgroup*M + i] = buf[rgroup*(M-2) + i];
    }
    /* The wraparound pointers at top and bottom will be filled later
     * (see set_wraparound_pointers, below).  Initially we want the "above"
     * pointers to duplicate the first actual data line.  This only needs
     * to happen in xbuffer[0].
     */
    for (i = 0; i < rgroup; i++) {
      xbuf0[i - rgroup] = xbuf0[0];
    }
  }
}


LOCAL(void)
set_wraparound_pointers (j_decompress_ptr cinfo)
/* Set up the "wraparound" pointers at top and bottom of the pointer lists.
 * This changes the pointer list state from top-of-image to the normal state.
 */
{
  my_main_ptr main = (my_main_ptr) cinfo->main;
  int ci, i, rgroup;
  int M = cinfo->min_DCT_scaled_size;
  jpeg_component_info *compptr;
  JSAMPARRAY xbuf0, xbuf1;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    rgroup = (compptr->v_samp_factor * compptr->DCT_scaled_size) /
      cinfo->min_DCT_scaled_size; /* height of a row group of component */
    xbuf0 = main->xbuffer[0][ci];
    xbuf1 = main->xbuffer[1][ci];
    for (i = 0; i < rgroup; i++) {
      xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
      xbuf1[i - rgroup] = xbuf1[rgroup*(M+1) + i];
      xbuf0[rgroup*(M+2) + i] = xbuf0[i];
      xbuf1[rgroup*(M+2) + i] = xbuf1[i];
    }
  }
}


LOCAL(void)
set_bottom_pointers (j_decompress_ptr cinfo)
/* Change the pointer lists to duplicate the last sample row at the bottom
 * of the image.  whichptr indicates which xbuffer holds the final iMCU row.
 * Also sets rowgroups_avail to indicate number of nondummy row groups in row.
 */
{
  my_main_ptr main = (my_main_ptr) cinfo->main;
  int ci, i, rgroup, iMCUheight, rows_left;
  jpeg_component_info *compptr;
  JSAMPARRAY xbuf;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    /* Count sample rows in one iMCU row and in one row group */
    iMCUheight = compptr->v_samp_factor * compptr->DCT_scaled_size;
    rgroup = iMCUheight / cinfo->min_DCT_scaled_size;
    /* Count nondummy sample rows remaining for this component */
    rows_left = (int) (compptr->downsampled_height % (JDIMENSION) iMCUheight);
    if (rows_left == 0) rows_left = iMCUheight;
    /* Count nondummy row groups.  Should get same answer for each component,
     * so we need only do it once.
     */
    if (ci == 0) {
      main->rowgroups_avail = (JDIMENSION) ((rows_left-1) / rgroup + 1);
    }
    /* Duplicate the last real sample row rgroup*2 times; this pads out the
     * last partial rowgroup and ensures at least one full rowgroup of context.
     */
    xbuf = main->xbuffer[main->whichptr][ci];
    for (i = 0; i < rgroup * 2; i++) {
      xbuf[rows_left + i] = xbuf[rows_left-1];
    }
  }
}


/*
 * Initialize for a processing pass.
 */

METHODDEF(void)
start_pass_main (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
  my_main_ptr main = (my_main_ptr) cinfo->main;

  switch (pass_mode) {
  case JBUF_PASS_THRU:
    if (cinfo->upsample->need_context_rows) {
      main->pub.process_data = process_data_context_main;
      make_funny_pointers(cinfo); /* Create the xbuffer[] lists */
      main->whichptr = 0;	/* Read first iMCU row into xbuffer[0] */
      main->context_state = CTX_PREPARE_FOR_IMCU;
      main->iMCU_row_ctr = 0;
    } else {
      /* Simple case with no context needed */
      main->pub.process_data = process_data_simple_main;
    }
    main->buffer_full = FALSE;	/* Mark buffer empty */
    main->rowgroup_ctr = 0;
    break;
#ifdef QUANT_2PASS_SUPPORTED
  case JBUF_CRANK_DEST:
    /* For last pass of 2-pass quantization, just crank the postprocessor */
    main->pub.process_data = process_data_crank_post;
    break;
#endif
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    break;
  }
}


/*
 * Process some data.
 * This handles the simple case where no context is required.
 */

METHODDEF(void)
process_data_simple_main (j_decompress_ptr cinfo,
			  JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			  JDIMENSION out_rows_avail)
{
  my_main_ptr main = (my_main_ptr) cinfo->main;
  JDIMENSION rowgroups_avail;

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
    if (! (*cinfo->coef->decompress_data) (cinfo, main->buffer))
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
  }

  /* There are always min_DCT_scaled_size row groups in an iMCU row. */
  rowgroups_avail = (JDIMENSION) cinfo->min_DCT_scaled_size;
  /* Note: at the bottom of the image, we may pass extra garbage row groups
   * to the postprocessor.  The postprocessor has to check for bottom
   * of image anyway (at row resolution), so no point in us doing it too.
   */

  /* Feed the postprocessor */
  (*cinfo->post->post_process_data) (cinfo, main->buffer,
				     &main->rowgroup_ctr, rowgroups_avail,
				     output_buf, out_row_ctr, out_rows_avail);

  /* Has postprocessor consumed all the data yet? If so, mark buffer empty */
  if (main->rowgroup_ctr >= rowgroups_avail) {
    main->buffer_full = FALSE;
    main->rowgroup_ctr = 0;
  }
}


/*
 * Process some data.
 * This handles the case where context rows must be provided.
 */

METHODDEF(void)
process_data_context_main (j_decompress_ptr cinfo,
			   JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			   JDIMENSION out_rows_avail)
{
  my_main_ptr main = (my_main_ptr) cinfo->main;

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
    if (! (*cinfo->coef->decompress_data) (cinfo,
					   main->xbuffer[main->whichptr]))
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
    main->iMCU_row_ctr++;	/* count rows received */
  }

  /* Postprocessor typically will not swallow all the input data it is handed
   * in one call (due to filling the output buffer first).  Must be prepared
   * to exit and restart.  This switch lets us keep track of how far we got.
   * Note that each case falls through to the next on successful completion.
   */
  switch (main->context_state) {
  case CTX_POSTPONED_ROW:
    /* Call postprocessor using previously set pointers for postponed row */
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
			&main->rowgroup_ctr, main->rowgroups_avail,
			output_buf, out_row_ctr, out_rows_avail);
    if (main->rowgroup_ctr < main->rowgroups_avail)
      return;			/* Need to suspend */
    main->context_state = CTX_PREPARE_FOR_IMCU;
    if (*out_row_ctr >= out_rows_avail)
      return;			/* Postprocessor exactly filled output buf */
    /*FALLTHROUGH*/
  case CTX_PREPARE_FOR_IMCU:
    /* Prepare to process first M-1 row groups of this iMCU row */
    main->rowgroup_ctr = 0;
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_scaled_size - 1);
    /* Check for bottom of image: if so, tweak pointers to "duplicate"
     * the last sample row, and adjust rowgroups_avail to ignore padding rows.
     */
    if (main->iMCU_row_ctr == cinfo->total_iMCU_rows)
      set_bottom_pointers(cinfo);
    main->context_state = CTX_PROCESS_IMCU;
    /*FALLTHROUGH*/
  case CTX_PROCESS_IMCU:
    /* Call postprocessor using previously set pointers */
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
			&main->rowgroup_ctr, main->rowgroups_avail,
			output_buf, out_row_ctr, out_rows_avail);
    if (main->rowgroup_ctr < main->rowgroups_avail)
      return;			/* Need to suspend */
    /* After the first iMCU, change wraparound pointers to normal state */
    if (main->iMCU_row_ctr == 1)
      set_wraparound_pointers(cinfo);
    /* Prepare to load new iMCU row using other xbuffer list */
    main->whichptr ^= 1;	/* 0=>1 or 1=>0 */
    main->buffer_full = FALSE;
    /* Still need to process last row group of this iMCU row, */
    /* which is saved at index M+1 of the other xbuffer */
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_scaled_size + 1);
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_scaled_size + 2);
    main->context_state = CTX_POSTPONED_ROW;
  }
}


/*
 * Process some data.
 * Final pass of two-pass quantization: just call the postprocessor.
 * Source data will be the postprocessor controller's internal buffer.
 */

#ifdef QUANT_2PASS_SUPPORTED

METHODDEF(void)
process_data_crank_post (j_decompress_ptr cinfo,
			 JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			 JDIMENSION out_rows_avail)
{
  (*cinfo->post->post_process_data) (cinfo, (JSAMPIMAGE) NULL,
				     (JDIMENSION *) NULL, (JDIMENSION) 0,
				     output_buf, out_row_ctr, out_rows_avail);
}

#endif /* QUANT_2PASS_SUPPORTED */


/*
 * Initialize main buffer controller.
 */

GLOBAL(void)
jinit_d_main_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_main_ptr main;
  int ci, rgroup, ngroups;
  jpeg_component_info *compptr;

  main = (my_main_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_main_controller));
  cinfo->main = (struct jpeg_d_main_controller *) main;
  main->pub.start_pass = start_pass_main;

  if (need_full_buffer)		/* shouldn't happen */
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);

  /* Allocate the workspace.
   * ngroups is the number of row groups we need.
   */
  if (cinfo->upsample->need_context_rows) {
    if (cinfo->min_DCT_scaled_size < 2) /* unsupported, see comments above */
      ERREXIT(cinfo, JERR_NOTIMPL);
    alloc_funny_pointers(cinfo); /* Alloc space for xbuffer[] lists */
    ngroups = cinfo->min_DCT_scaled_size + 2;
  } else {
    ngroups = cinfo->min_DCT_scaled_size;
  }

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    rgroup = (compptr->v_samp_factor * compptr->DCT_scaled_size) /
      cinfo->min_DCT_scaled_size; /* height of a row group of component */
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
			((j_common_ptr) cinfo, JPOOL_IMAGE,
			 compptr->width_in_blocks * compptr->DCT_scaled_size,
			 (JDIMENSION) (rgroup * ngroups));
  }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\jdmarker.c ===
/*
 * jdmarker.c
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains routines to decode JPEG datastream markers.
 * Most of the complexity arises from our desire to support input
 * suspension: if not all of the data for a marker is available,
 * we must exit back to the application.  On resumption, we reprocess
 * the marker.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


typedef enum {			/* JPEG marker codes */
  M_SOF0  = 0xc0,
  M_SOF1  = 0xc1,
  M_SOF2  = 0xc2,
  M_SOF3  = 0xc3,
  
  M_SOF5  = 0xc5,
  M_SOF6  = 0xc6,
  M_SOF7  = 0xc7,
  
  M_JPG   = 0xc8,
  M_SOF9  = 0xc9,
  M_SOF10 = 0xca,
  M_SOF11 = 0xcb,
  
  M_SOF13 = 0xcd,
  M_SOF14 = 0xce,
  M_SOF15 = 0xcf,
  
  M_DHT   = 0xc4,
  
  M_DAC   = 0xcc,
  
  M_RST0  = 0xd0,
  M_RST1  = 0xd1,
  M_RST2  = 0xd2,
  M_RST3  = 0xd3,
  M_RST4  = 0xd4,
  M_RST5  = 0xd5,
  M_RST6  = 0xd6,
  M_RST7  = 0xd7,
  
  M_SOI   = 0xd8,
  M_EOI   = 0xd9,
  M_SOS   = 0xda,
  M_DQT   = 0xdb,
  M_DNL   = 0xdc,
  M_DRI   = 0xdd,
  M_DHP   = 0xde,
  M_EXP   = 0xdf,
  
  M_APP0  = 0xe0,
  M_APP1  = 0xe1,
  M_APP2  = 0xe2,
  M_APP3  = 0xe3,
  M_APP4  = 0xe4,
  M_APP5  = 0xe5,
  M_APP6  = 0xe6,
  M_APP7  = 0xe7,
  M_APP8  = 0xe8,
  M_APP9  = 0xe9,
  M_APP10 = 0xea,
  M_APP11 = 0xeb,
  M_APP12 = 0xec,
  M_APP13 = 0xed,
  M_APP14 = 0xee,
  M_APP15 = 0xef,
  
  M_JPG0  = 0xf0,
  M_JPG13 = 0xfd,
  M_COM   = 0xfe,
  
  M_TEM   = 0x01,
  
  M_ERROR = 0x100
} JPEG_MARKER;


/*
 * Macros for fetching data from the data source module.
 *
 * At all times, cinfo->src->next_input_byte and ->bytes_in_buffer reflect
 * the current restart point; we update them only when we have reached a
 * suitable place to restart if a suspension occurs.
 */

/* Declare and initialize local copies of input pointer/count */
#define INPUT_VARS(cinfo)  \
	struct jpeg_source_mgr * datasrc = (cinfo)->src;  \
	const JOCTET * next_input_byte = datasrc->next_input_byte;  \
	size_t bytes_in_buffer = datasrc->bytes_in_buffer

/* Unload the local copies --- do this only at a restart boundary */
#define INPUT_SYNC(cinfo)  \
	( datasrc->next_input_byte = next_input_byte,  \
	  datasrc->bytes_in_buffer = bytes_in_buffer )

/* Reload the local copies --- seldom used except in MAKE_BYTE_AVAIL */
#define INPUT_RELOAD(cinfo)  \
	( next_input_byte = datasrc->next_input_byte,  \
	  bytes_in_buffer = datasrc->bytes_in_buffer )

/* Internal macro for INPUT_BYTE and INPUT_2BYTES: make a byte available.
 * Note we do *not* do INPUT_SYNC before calling fill_input_buffer,
 * but we must reload the local copies after a successful fill.
 */
#define MAKE_BYTE_AVAIL(cinfo,action)  \
	if (bytes_in_buffer == 0) {  \
	  if (! (*datasrc->fill_input_buffer) (cinfo))  \
	    { action; }  \
	  INPUT_RELOAD(cinfo);  \
	}  \
	bytes_in_buffer--

/* Read a byte into variable V.
 * If must suspend, take the specified action (typically "return FALSE").
 */
#define INPUT_BYTE(cinfo,V,action)  \
	MAKESTMT( MAKE_BYTE_AVAIL(cinfo,action); \
		  V = GETJOCTET(*next_input_byte++); )

/* As above, but read two bytes interpreted as an unsigned 16-bit integer.
 * V should be declared unsigned int or perhaps INT32.
 */
#define INPUT_2BYTES(cinfo,V,action)  \
	MAKESTMT( MAKE_BYTE_AVAIL(cinfo,action); \
		  V = ((unsigned int) GETJOCTET(*next_input_byte++)) << 8; \
		  MAKE_BYTE_AVAIL(cinfo,action); \
		  V += GETJOCTET(*next_input_byte++); )


/*
 * Routines to process JPEG markers.
 *
 * Entry condition: JPEG marker itself has been read and its code saved
 *   in cinfo->unread_marker; input restart point is just after the marker.
 *
 * Exit: if return TRUE, have read and processed any parameters, and have
 *   updated the restart point to point after the parameters.
 *   If return FALSE, was forced to suspend before reaching end of
 *   marker parameters; restart point has not been moved.  Same routine
 *   will be called again after application supplies more input data.
 *
 * This approach to suspension assumes that all of a marker's parameters can
 * fit into a single input bufferload.  This should hold for "normal"
 * markers.  Some COM/APPn markers might have large parameter segments,
 * but we use skip_input_data to get past those, and thereby put the problem
 * on the source manager's shoulders.
 *
 * Note that we don't bother to avoid duplicate trace messages if a
 * suspension occurs within marker parameters.  Other side effects
 * require more care.
 */


LOCAL(boolean)
get_soi (j_decompress_ptr cinfo)
/* Process an SOI marker */
{
  int i;
  
  TRACEMS(cinfo, 1, JTRC_SOI);

  if (cinfo->marker->saw_SOI)
    ERREXIT(cinfo, JERR_SOI_DUPLICATE);

  /* Reset all parameters that are defined to be reset by SOI */

  for (i = 0; i < NUM_ARITH_TBLS; i++) {
    cinfo->arith_dc_L[i] = 0;
    cinfo->arith_dc_U[i] = 1;
    cinfo->arith_ac_K[i] = 5;
  }
  cinfo->restart_interval = 0;

  /* Set initial assumptions for colorspace etc */

  cinfo->jpeg_color_space = JCS_UNKNOWN;
  cinfo->CCIR601_sampling = FALSE; /* Assume non-CCIR sampling??? */

  cinfo->saw_JFIF_marker = FALSE;
  cinfo->density_unit = 0;	/* set default JFIF APP0 values */
  cinfo->X_density = 1;
  cinfo->Y_density = 1;
  cinfo->saw_Adobe_marker = FALSE;
  cinfo->Adobe_transform = 0;

  cinfo->marker->saw_SOI = TRUE;

  return TRUE;
}


LOCAL(boolean)
get_sof (j_decompress_ptr cinfo, boolean is_prog, boolean is_arith)
/* Process a SOFn marker */
{
  INT32 length;
  int c, ci;
  jpeg_component_info * compptr;
  INPUT_VARS(cinfo);

  cinfo->progressive_mode = is_prog;
  cinfo->arith_code = is_arith;

  INPUT_2BYTES(cinfo, length, return FALSE);

  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);

  length -= 8;

  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
	   (int) cinfo->image_width, (int) cinfo->image_height,
	   cinfo->num_components);

  if (cinfo->marker->saw_SOF)
    ERREXIT(cinfo, JERR_SOF_DUPLICATE);

  /* We don't support files in which the image height is initially specified */
  /* as 0 and is later redefined by DNL.  As long as we have to check that,  */
  /* might as well have a general sanity check. */
  if (cinfo->image_height <= 0 || cinfo->image_width <= 0
      || cinfo->num_components <= 0)
    ERREXIT(cinfo, JERR_EMPTY_IMAGE);

  if (length != (cinfo->num_components * 3))
    ERREXIT(cinfo, JERR_BAD_LENGTH);

  if (cinfo->comp_info == NULL)	/* do only once, even if suspend */
    cinfo->comp_info = (jpeg_component_info *) (*cinfo->mem->alloc_small)
			((j_common_ptr) cinfo, JPOOL_IMAGE,
			 cinfo->num_components * SIZEOF(jpeg_component_info));
  
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    compptr->component_index = ci;
    INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
    INPUT_BYTE(cinfo, c, return FALSE);
    compptr->h_samp_factor = (c >> 4) & 15;
    compptr->v_samp_factor = (c     ) & 15;
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);

    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
	     compptr->component_id, compptr->h_samp_factor,
	     compptr->v_samp_factor, compptr->quant_tbl_no);
  }

  cinfo->marker->saw_SOF = TRUE;

  INPUT_SYNC(cinfo);
  return TRUE;
}


LOCAL(boolean)
get_sos (j_decompress_ptr cinfo)
/* Process a SOS marker */
{
  INT32 length;
  int i, ci, n, c, cc;
  jpeg_component_info * compptr;
  INPUT_VARS(cinfo);

  if (! cinfo->marker->saw_SOF)
    ERREXIT(cinfo, JERR_SOS_NO_SOF);

  INPUT_2BYTES(cinfo, length, return FALSE);

  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */

  if (length != (n * 2 + 6) || n < 1 || n > MAX_COMPS_IN_SCAN)
    ERREXIT(cinfo, JERR_BAD_LENGTH);

  TRACEMS1(cinfo, 1, JTRC_SOS, n);

  cinfo->comps_in_scan = n;

  /* Collect the component-spec parameters */

  for (i = 0; i < n; i++) {
    INPUT_BYTE(cinfo, cc, return FALSE);
    INPUT_BYTE(cinfo, c, return FALSE);
    
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	 ci++, compptr++) {
      if (cc == compptr->component_id)
	goto id_found;
    }

    ERREXIT1(cinfo, JERR_BAD_COMPONENT_ID, cc);

  id_found:

    cinfo->cur_comp_info[i] = compptr;
    compptr->dc_tbl_no = (c >> 4) & 15;
    compptr->ac_tbl_no = (c     ) & 15;
    
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
	     compptr->dc_tbl_no, compptr->ac_tbl_no);
  }

  /* Collect the additional scan parameters Ss, Se, Ah/Al. */
  INPUT_BYTE(cinfo, c, return FALSE);
  cinfo->Ss = c;
  INPUT_BYTE(cinfo, c, return FALSE);
  cinfo->Se = c;
  INPUT_BYTE(cinfo, c, return FALSE);
  cinfo->Ah = (c >> 4) & 15;
  cinfo->Al = (c     ) & 15;

  TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
	   cinfo->Ah, cinfo->Al);

  /* Prepare to scan data & restart markers */
  cinfo->marker->next_restart_num = 0;

  /* Count another SOS marker */
  cinfo->input_scan_number++;

  INPUT_SYNC(cinfo);
  return TRUE;
}


METHODDEF(boolean)
get_app0 (j_decompress_ptr cinfo)
/* Process an APP0 marker */
{
#define JFIF_LEN 14
  INT32 length;
  UINT8 b[JFIF_LEN];
  int buffp;
  INPUT_VARS(cinfo);

  INPUT_2BYTES(cinfo, length, return FALSE);
  length -= 2;

  /* See if a JFIF APP0 marker is present */

  if (length >= JFIF_LEN) {
    for (buffp = 0; buffp < JFIF_LEN; buffp++)
      INPUT_BYTE(cinfo, b[buffp], return FALSE);
    length -= JFIF_LEN;

    if (b[0]==0x4A && b[1]==0x46 && b[2]==0x49 && b[3]==0x46 && b[4]==0) {
      /* Found JFIF APP0 marker: check version */
      /* Major version must be 1, anything else signals an incompatible change.
       * We used to treat this as an error, but now it's a nonfatal warning,
       * because it seems Hijaak doesn't always follow the spec.
       * Minor version should be 0..2, but process anyway if newer.
       */
      if (b[5] != 1)
	WARNMS2(cinfo, JWRN_JFIF_MAJOR, b[5], b[6]);
      else if (b[6] > 2)
	TRACEMS2(cinfo, 1, JTRC_JFIF_MINOR, b[5], b[6]);
      /* Save info */
      cinfo->saw_JFIF_marker = TRUE;
      cinfo->density_unit = b[7];
      cinfo->X_density = (b[8] << 8) + b[9];
      cinfo->Y_density = (b[10] << 8) + b[11];
      TRACEMS3(cinfo, 1, JTRC_JFIF,
	       cinfo->X_density, cinfo->Y_density, cinfo->density_unit);
      if (b[12] | b[13])
	TRACEMS2(cinfo, 1, JTRC_JFIF_THUMBNAIL, b[12], b[13]);
      if (length != ((INT32) b[12] * (INT32) b[13] * (INT32) 3))
	TRACEMS1(cinfo, 1, JTRC_JFIF_BADTHUMBNAILSIZE, (int) length);
    } else {
      /* Start of APP0 does not match "JFIF" */
      TRACEMS1(cinfo, 1, JTRC_APP0, (int) length + JFIF_LEN);
    }
  } else {
    /* Too short to be JFIF marker */
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) length);
  }

  INPUT_SYNC(cinfo);
  if (length > 0)		/* skip any remaining data -- could be lots */
    (*cinfo->src->skip_input_data) (cinfo, (long) length);

  return TRUE;
}


METHODDEF(boolean)
get_app14 (j_decompress_ptr cinfo)
/* Process an APP14 marker */
{
#define ADOBE_LEN 12
  INT32 length;
  UINT8 b[ADOBE_LEN];
  int buffp;
  unsigned int version, flags0, flags1, transform;
  INPUT_VARS(cinfo);

  INPUT_2BYTES(cinfo, length, return FALSE);
  length -= 2;

  /* See if an Adobe APP14 marker is present */

  if (length >= ADOBE_LEN) {
    for (buffp = 0; buffp < ADOBE_LEN; buffp++)
      INPUT_BYTE(cinfo, b[buffp], return FALSE);
    length -= ADOBE_LEN;

    if (b[0]==0x41 && b[1]==0x64 && b[2]==0x6F && b[3]==0x62 && b[4]==0x65) {
      /* Found Adobe APP14 marker */
      version = (b[5] << 8) + b[6];
      flags0 = (b[7] << 8) + b[8];
      flags1 = (b[9] << 8) + b[10];
      transform = b[11];
      TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
      cinfo->saw_Adobe_marker = TRUE;
      cinfo->Adobe_transform = (UINT8) transform;
    } else {
      /* Start of APP14 does not match "Adobe" */
      TRACEMS1(cinfo, 1, JTRC_APP14, (int) length + ADOBE_LEN);
    }
  } else {
    /* Too short to be Adobe marker */
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) length);
  }

  INPUT_SYNC(cinfo);
  if (length > 0)		/* skip any remaining data -- could be lots */
    (*cinfo->src->skip_input_data) (cinfo, (long) length);

  return TRUE;
}


LOCAL(boolean)
get_dac (j_decompress_ptr cinfo)
/* Process a DAC marker */
{
  INT32 length;
  int index, val;
  INPUT_VARS(cinfo);

  INPUT_2BYTES(cinfo, length, return FALSE);
  length -= 2;
  
  while (length > 0) {
    INPUT_BYTE(cinfo, index, return FALSE);
    INPUT_BYTE(cinfo, val, return FALSE);

    length -= 2;

    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);

    if (index < 0 || index >= (2*NUM_ARITH_TBLS))
      ERREXIT1(cinfo, JERR_DAC_INDEX, index);

    if (index >= NUM_ARITH_TBLS) { /* define AC table */
      cinfo->arith_ac_K[index-NUM_ARITH_TBLS] = (UINT8) val;
    } else {			/* define DC table */
      cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
      cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
      if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
	ERREXIT1(cinfo, JERR_DAC_VALUE, val);
    }
  }

  INPUT_SYNC(cinfo);
  return TRUE;
}


LOCAL(boolean)
get_dht (j_decompress_ptr cinfo)
/* Process a DHT marker */
{
  INT32 length;
  UINT8 bits[17];
  UINT8 huffval[256];
  int i, index, count;
  JHUFF_TBL **htblptr;
  INPUT_VARS(cinfo);

  INPUT_2BYTES(cinfo, length, return FALSE);
  length -= 2;
  
  while (length > 0) {
    INPUT_BYTE(cinfo, index, return FALSE);

    TRACEMS1(cinfo, 1, JTRC_DHT, index);
      
    bits[0] = 0;
    count = 0;
    for (i = 1; i <= 16; i++) {
      INPUT_BYTE(cinfo, bits[i], return FALSE);
      count += bits[i];
    }

    length -= 1 + 16;

    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
	     bits[1], bits[2], bits[3], bits[4],
	     bits[5], bits[6], bits[7], bits[8]);
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
	     bits[9], bits[10], bits[11], bits[12],
	     bits[13], bits[14], bits[15], bits[16]);

    if (count > 256 || ((INT32) count) > length)
      ERREXIT(cinfo, JERR_DHT_COUNTS);

    for (i = 0; i < count; i++)
      INPUT_BYTE(cinfo, huffval[i], return FALSE);

    length -= count;

    if (index & 0x10) {		/* AC table definition */
      index -= 0x10;
      htblptr = &cinfo->ac_huff_tbl_ptrs[index];
    } else {			/* DC table definition */
      htblptr = &cinfo->dc_huff_tbl_ptrs[index];
    }

    if (index < 0 || index >= NUM_HUFF_TBLS)
      ERREXIT1(cinfo, JERR_DHT_INDEX, index);

    if (*htblptr == NULL)
      *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
  
    MEMCOPY((*htblptr)->bits, bits, SIZEOF((*htblptr)->bits));
    MEMCOPY((*htblptr)->huffval, huffval, SIZEOF((*htblptr)->huffval));
  }

  INPUT_SYNC(cinfo);
  return TRUE;
}


LOCAL(boolean)
get_dqt (j_decompress_ptr cinfo)
/* Process a DQT marker */
{
  INT32 length;
  int n, i, prec;
  unsigned int tmp;
  JQUANT_TBL *quant_ptr;
  INPUT_VARS(cinfo);

  INPUT_2BYTES(cinfo, length, return FALSE);
  length -= 2;

  while (length > 0) {
    INPUT_BYTE(cinfo, n, return FALSE);
    prec = n >> 4;
    n &= 0x0F;

    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);

    if (n >= NUM_QUANT_TBLS)
      ERREXIT1(cinfo, JERR_DQT_INDEX, n);
      
    if (cinfo->quant_tbl_ptrs[n] == NULL)
      cinfo->quant_tbl_ptrs[n] = jpeg_alloc_quant_table((j_common_ptr) cinfo);
    quant_ptr = cinfo->quant_tbl_ptrs[n];

    for (i = 0; i < DCTSIZE2; i++) {
      if (prec)
	INPUT_2BYTES(cinfo, tmp, return FALSE);
      else
	INPUT_BYTE(cinfo, tmp, return FALSE);
      /* We convert the zigzag-order table to natural array order. */
      quant_ptr->quantval[jpeg_natural_order[i]] = (UINT16) tmp;
    }

    if (cinfo->err->trace_level >= 2) {
      for (i = 0; i < DCTSIZE2; i += 8) {
	TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
		 quant_ptr->quantval[i],   quant_ptr->quantval[i+1],
		 quant_ptr->quantval[i+2], quant_ptr->quantval[i+3],
		 quant_ptr->quantval[i+4], quant_ptr->quantval[i+5],
		 quant_ptr->quantval[i+6], quant_ptr->quantval[i+7]);
      }
    }

    length -= DCTSIZE2+1;
    if (prec) length -= DCTSIZE2;
  }

  INPUT_SYNC(cinfo);
  return TRUE;
}


LOCAL(boolean)
get_dri (j_decompress_ptr cinfo)
/* Process a DRI marker */
{
  INT32 length;
  unsigned int tmp;
  INPUT_VARS(cinfo);

  INPUT_2BYTES(cinfo, length, return FALSE);
  
  if (length != 4)
    ERREXIT(cinfo, JERR_BAD_LENGTH);

  INPUT_2BYTES(cinfo, tmp, return FALSE);

  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);

  cinfo->restart_interval = tmp;

  INPUT_SYNC(cinfo);
  return TRUE;
}


METHODDEF(boolean)
skip_variable (j_decompress_ptr cinfo)
/* Skip over an unknown or uninteresting variable-length marker */
{
  INT32 length;
  INPUT_VARS(cinfo);

  INPUT_2BYTES(cinfo, length, return FALSE);
  
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);

  INPUT_SYNC(cinfo);		/* do before skip_input_data */
  (*cinfo->src->skip_input_data) (cinfo, (long) length - 2L);

  return TRUE;
}


/*
 * Find the next JPEG marker, save it in cinfo->unread_marker.
 * Returns FALSE if had to suspend before reaching a marker;
 * in that case cinfo->unread_marker is unchanged.
 *
 * Note that the result might not be a valid marker code,
 * but it will never be 0 or FF.
 */

LOCAL(boolean)
next_marker (j_decompress_ptr cinfo)
{
  int c;
  INPUT_VARS(cinfo);

  for (;;) {
    INPUT_BYTE(cinfo, c, return FALSE);
    /* Skip any non-FF bytes.
     * This may look a bit inefficient, but it will not occur in a valid file.
     * We sync after each discarded byte so that a suspending data source
     * can discard the byte from its buffer.
     */
    while (c != 0xFF) {
      cinfo->marker->discarded_bytes++;
      INPUT_SYNC(cinfo);
      INPUT_BYTE(cinfo, c, return FALSE);
    }
    /* This loop swallows any duplicate FF bytes.  Extra FFs are legal as
     * pad bytes, so don't count them in discarded_bytes.  We assume there
     * will not be so many consecutive FF bytes as to overflow a suspending
     * data source's input buffer.
     */
    do {
      INPUT_BYTE(cinfo, c, return FALSE);
    } while (c == 0xFF);
    if (c != 0)
      break;			/* found a valid marker, exit loop */
    /* Reach here if we found a stuffed-zero data sequence (FF/00).
     * Discard it and loop back to try again.
     */
    cinfo->marker->discarded_bytes += 2;
    INPUT_SYNC(cinfo);
  }

  if (cinfo->marker->discarded_bytes != 0) {
    WARNMS2(cinfo, JWRN_EXTRANEOUS_DATA, cinfo->marker->discarded_bytes, c);
    cinfo->marker->discarded_bytes = 0;
  }

  cinfo->unread_marker = c;

  INPUT_SYNC(cinfo);
  return TRUE;
}


LOCAL(boolean)
first_marker (j_decompress_ptr cinfo)
/* Like next_marker, but used to obtain the initial SOI marker. */
/* For this marker, we do not allow preceding garbage or fill; otherwise,
 * we might well scan an entire input file before realizing it ain't JPEG.
 * If an application wants to process non-JFIF files, it must seek to the
 * SOI before calling the JPEG library.
 */
{
  int c, c2;
  INPUT_VARS(cinfo);

  INPUT_BYTE(cinfo, c, return FALSE);
  INPUT_BYTE(cinfo, c2, return FALSE);
  if (c != 0xFF || c2 != (int) M_SOI)
    ERREXIT2(cinfo, JERR_NO_SOI, c, c2);

  cinfo->unread_marker = c2;

  INPUT_SYNC(cinfo);
  return TRUE;
}


/*
 * Read markers until SOS or EOI.
 *
 * Returns same codes as are defined for jpeg_consume_input:
 * JPEG_SUSPENDED, JPEG_REACHED_SOS, or JPEG_REACHED_EOI.
 */

METHODDEF(int)
read_markers (j_decompress_ptr cinfo)
{
  /* Outer loop repeats once for each marker. */
  for (;;) {
    /* Collect the marker proper, unless we already did. */
    /* NB: first_marker() enforces the requirement that SOI appear first. */
    if (cinfo->unread_marker == 0) {
      if (! cinfo->marker->saw_SOI) {
	if (! first_marker(cinfo))
	  return JPEG_SUSPENDED;
      } else {
	if (! next_marker(cinfo))
	  return JPEG_SUSPENDED;
      }
    }
    /* At this point cinfo->unread_marker contains the marker code and the
     * input point is just past the marker proper, but before any parameters.
     * A suspension will cause us to return with this state still true.
     */
    switch (cinfo->unread_marker) {
    case M_SOI:
      if (! get_soi(cinfo))
	return JPEG_SUSPENDED;
      break;

    case M_SOF0:		/* Baseline */
    case M_SOF1:		/* Extended sequential, Huffman */
      if (! get_sof(cinfo, FALSE, FALSE))
	return JPEG_SUSPENDED;
      break;

    case M_SOF2:		/* Progressive, Huffman */
      if (! get_sof(cinfo, TRUE, FALSE))
	return JPEG_SUSPENDED;
      break;

    case M_SOF9:		/* Extended sequential, arithmetic */
      if (! get_sof(cinfo, FALSE, TRUE))
	return JPEG_SUSPENDED;
      break;

    case M_SOF10:		/* Progressive, arithmetic */
      if (! get_sof(cinfo, TRUE, TRUE))
	return JPEG_SUSPENDED;
      break;

    /* Currently unsupported SOFn types */
    case M_SOF3:		/* Lossless, Huffman */
    case M_SOF5:		/* Differential sequential, Huffman */
    case M_SOF6:		/* Differential progressive, Huffman */
    case M_SOF7:		/* Differential lossless, Huffman */
    case M_JPG:			/* Reserved for JPEG extensions */
    case M_SOF11:		/* Lossless, arithmetic */
    case M_SOF13:		/* Differential sequential, arithmetic */
    case M_SOF14:		/* Differential progressive, arithmetic */
    case M_SOF15:		/* Differential lossless, arithmetic */
      ERREXIT1(cinfo, JERR_SOF_UNSUPPORTED, cinfo->unread_marker);
      break;

    case M_SOS:
      if (! get_sos(cinfo))
	return JPEG_SUSPENDED;
      cinfo->unread_marker = 0;	/* processed the marker */
      return JPEG_REACHED_SOS;
    
    case M_EOI:
      TRACEMS(cinfo, 1, JTRC_EOI);
      cinfo->unread_marker = 0;	/* processed the marker */
      return JPEG_REACHED_EOI;
      
    case M_DAC:
      if (! get_dac(cinfo))
	return JPEG_SUSPENDED;
      break;
      
    case M_DHT:
      if (! get_dht(cinfo))
	return JPEG_SUSPENDED;
      break;
      
    case M_DQT:
      if (! get_dqt(cinfo))
	return JPEG_SUSPENDED;
      break;
      
    case M_DRI:
      if (! get_dri(cinfo))
	return JPEG_SUSPENDED;
      break;
      
    case M_APP0:
    case M_APP1:
    case M_APP2:
    case M_APP3:
    case M_APP4:
    case M_APP5:
    case M_APP6:
    case M_APP7:
    case M_APP8:
    case M_APP9:
    case M_APP10:
    case M_APP11:
    case M_APP12:
    case M_APP13:
    case M_APP14:
    case M_APP15:
      if (! (*cinfo->marker->process_APPn[cinfo->unread_marker - (int) M_APP0]) (cinfo))
	return JPEG_SUSPENDED;
      break;
      
    case M_COM:
      if (! (*cinfo->marker->process_COM) (cinfo))
	return JPEG_SUSPENDED;
      break;

    case M_RST0:		/* these are all parameterless */
    case M_RST1:
    case M_RST2:
    case M_RST3:
    case M_RST4:
    case M_RST5:
    case M_RST6:
    case M_RST7:
    case M_TEM:
      TRACEMS1(cinfo, 1, JTRC_PARMLESS_MARKER, cinfo->unread_marker);
      break;

    case M_DNL:			/* Ignore DNL ... perhaps the wrong thing */
      if (! skip_variable(cinfo))
	return JPEG_SUSPENDED;
      break;

    default:			/* must be DHP, EXP, JPGn, or RESn */
      /* For now, we treat the reserved markers as fatal errors since they are
       * likely to be used to signal incompatible JPEG Part 3 extensions.
       * Once the JPEG 3 version-number marker is well defined, this code
       * ought to change!
       */
      ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
      break;
    }
    /* Successfully processed marker, so reset state variable */
    cinfo->unread_marker = 0;
  } /* end loop */
}


/*
 * Read a restart marker, which is expected to appear next in the datastream;
 * if the marker is not there, take appropriate recovery action.
 * Returns FALSE if suspension is required.
 *
 * This is called by the entropy decoder after it has read an appropriate
 * number of MCUs.  cinfo->unread_marker may be nonzero if the entropy decoder
 * has already read a marker from the data source.  Under normal conditions
 * cinfo->unread_marker will be reset to 0 before returning; if not reset,
 * it holds a marker which the decoder will be unable to read past.
 */

METHODDEF(boolean)
read_restart_marker (j_decompress_ptr cinfo)
{
  /* Obtain a marker unless we already did. */
  /* Note that next_marker will complain if it skips any data. */
  if (cinfo->unread_marker == 0) {
    if (! next_marker(cinfo))
      return FALSE;
  }

  if (cinfo->unread_marker ==
      ((int) M_RST0 + cinfo->marker->next_restart_num)) {
    /* Normal case --- swallow the marker and let entropy decoder continue */
    TRACEMS1(cinfo, 3, JTRC_RST, cinfo->marker->next_restart_num);
    cinfo->unread_marker = 0;
  } else {
    /* Uh-oh, the restart markers have been messed up. */
    /* Let the data source manager determine how to resync. */
    if (! (*cinfo->src->resync_to_restart) (cinfo,
					    cinfo->marker->next_restart_num))
      return FALSE;
  }

  /* Update next-restart state */
  cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;

  return TRUE;
}


/*
 * This is the default resync_to_restart method for data source managers
 * to use if they don't have any better approach.  Some data source managers
 * may be able to back up, or may have additional knowledge about the data
 * which permits a more intelligent recovery strategy; such managers would
 * presumably supply their own resync method.
 *
 * read_restart_marker calls resync_to_restart if it finds a marker other than
 * the restart marker it was expecting.  (This code is *not* used unless
 * a nonzero restart interval has been declared.)  cinfo->unread_marker is
 * the marker code actually found (might be anything, except 0 or FF).
 * The desired restart marker number (0..7) is passed as a parameter.
 * This routine is supposed to apply whatever error recovery strategy seems
 * appropriate in order to position the input stream to the next data segment.
 * Note that cinfo->unread_marker is treated as a marker appearing before
 * the current data-source input point; usually it should be reset to zero
 * before returning.
 * Returns FALSE if suspension is required.
 *
 * This implementation is substantially constrained by wanting to treat the
 * input as a data stream; this means we can't back up.  Therefore, we have
 * only the following actions to work with:
 *   1. Simply discard the marker and let the entropy decoder resume at next
 *      byte of file.
 *   2. Read forward until we find another marker, discarding intervening
 *      data.  (In theory we could look ahead within the current bufferload,
 *      without having to discard data if we don't find the desired marker.
 *      This idea is not implemented here, in part because it makes behavior
 *      dependent on buffer size and chance buffer-boundary positions.)
 *   3. Leave the marker unread (by failing to zero cinfo->unread_marker).
 *      This will cause the entropy decoder to process an empty data segment,
 *      inserting dummy zeroes, and then we will reprocess the marker.
 *
 * #2 is appropriate if we think the desired marker lies ahead, while #3 is
 * appropriate if the found marker is a future restart marker (indicating
 * that we have missed the desired restart marker, probably because it got
 * corrupted).
 * We apply #2 or #3 if the found marker is a restart marker no more than
 * two counts behind or ahead of the expected one.  We also apply #2 if the
 * found marker is not a legal JPEG marker code (it's certainly bogus data).
 * If the found marker is a restart marker more than 2 counts away, we do #1
 * (too much risk that the marker is erroneous; with luck we will be able to
 * resync at some future point).
 * For any valid non-restart JPEG marker, we apply #3.  This keeps us from
 * overrunning the end of a scan.  An implementation limited to single-scan
 * files might find it better to apply #2 for markers other than EOI, since
 * any other marker would have to be bogus data in that case.
 */

GLOBAL(boolean)
jpeg_resync_to_restart (j_decompress_ptr cinfo, int desired)
{
  int marker = cinfo->unread_marker;
  int action = 1;
  
  /* Always put up a warning. */
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
  
  /* Outer loop handles repeated decision after scanning forward. */
  for (;;) {
    if (marker < (int) M_SOF0)
      action = 2;		/* invalid marker */
    else if (marker < (int) M_RST0 || marker > (int) M_RST7)
      action = 3;		/* valid non-restart marker */
    else {
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
	  marker == ((int) M_RST0 + ((desired+2) & 7)))
	action = 3;		/* one of the next two expected restarts */
      else if (marker == ((int) M_RST0 + ((desired-1) & 7)) ||
	       marker == ((int) M_RST0 + ((desired-2) & 7)))
	action = 2;		/* a prior restart, so advance */
      else
	action = 1;		/* desired restart or too far away */
    }
    TRACEMS2(cinfo, 4, JTRC_RECOVERY_ACTION, marker, action);
    switch (action) {
    case 1:
      /* Discard marker and let entropy decoder resume processing. */
      cinfo->unread_marker = 0;
      return TRUE;
    case 2:
      /* Scan to the next marker, and repeat the decision loop. */
      if (! next_marker(cinfo))
	return FALSE;
      marker = cinfo->unread_marker;
      break;
    case 3:
      /* Return without advancing past this marker. */
      /* Entropy decoder will be forced to process an empty segment. */
      return TRUE;
    }
  } /* end loop */
}


/*
 * Reset marker processing state to begin a fresh datastream.
 */

METHODDEF(void)
reset_marker_reader (j_decompress_ptr cinfo)
{
  cinfo->comp_info = NULL;		/* until allocated by get_sof */
  cinfo->input_scan_number = 0;		/* no SOS seen yet */
  cinfo->unread_marker = 0;		/* no pending marker */
  cinfo->marker->saw_SOI = FALSE;	/* set internal state too */
  cinfo->marker->saw_SOF = FALSE;
  cinfo->marker->discarded_bytes = 0;
}


/*
 * Initialize the marker reader module.
 * This is called only once, when the decompression object is created.
 */

GLOBAL(void)
jinit_marker_reader (j_decompress_ptr cinfo)
{
  int i;

  /* Create subobject in permanent pool */
  cinfo->marker = (struct jpeg_marker_reader *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
				SIZEOF(struct jpeg_marker_reader));
  /* Initialize method pointers */
  cinfo->marker->reset_marker_reader = reset_marker_reader;
  cinfo->marker->read_markers = read_markers;
  cinfo->marker->read_restart_marker = read_restart_marker;
  cinfo->marker->process_COM = skip_variable;
  for (i = 0; i < 16; i++)
    cinfo->marker->process_APPn[i] = skip_variable;
  cinfo->marker->process_APPn[0] = get_app0;
  cinfo->marker->process_APPn[14] = get_app14;
  /* Reset marker processing state */
  reset_marker_reader(cinfo);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\jdsample.c ===
/*
 * jdsample.c
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains upsampling routines.
 *
 * Upsampling input data is counted in "row groups".  A row group
 * is defined to be (v_samp_factor * DCT_scaled_size / min_DCT_scaled_size)
 * sample rows of each component.  Upsampling will normally produce
 * max_v_samp_factor pixel rows from each row group (but this could vary
 * if the upsampler is applying a scale factor of its own).
 *
 * An excellent reference for image resampling is
 *   Digital Image Warping, George Wolberg, 1990.
 *   Pub. by IEEE Computer Society Press, Los Alamitos, CA. ISBN 0-8186-8944-7.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/* Pointer to routine to upsample a single component */
typedef JMETHOD(void, upsample1_ptr,
		(j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr));

/* Private subobject */

typedef struct {
  struct jpeg_upsampler pub;	/* public fields */

  /* Color conversion buffer.  When using separate upsampling and color
   * conversion steps, this buffer holds one upsampled row group until it
   * has been color converted and output.
   * Note: we do not allocate any storage for component(s) which are full-size,
   * ie do not need rescaling.  The corresponding entry of color_buf[] is
   * simply set to point to the input data array, thereby avoiding copying.
   */
  JSAMPARRAY color_buf[MAX_COMPONENTS];

  /* Per-component upsampling method pointers */
  upsample1_ptr methods[MAX_COMPONENTS];

  int next_row_out;		/* counts rows emitted from color_buf */
  JDIMENSION rows_to_go;	/* counts rows remaining in image */

  /* Height of an input row group for each component. */
  int rowgroup_height[MAX_COMPONENTS];

  /* These arrays save pixel expansion factors so that int_expand need not
   * recompute them each time.  They are unused for other upsampling methods.
   */
  UINT8 h_expand[MAX_COMPONENTS];
  UINT8 v_expand[MAX_COMPONENTS];
} my_upsampler;

typedef my_upsampler * my_upsample_ptr;


/*
 * Initialize for an upsampling pass.
 */

METHODDEF(void)
start_pass_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Mark the conversion buffer empty */
  upsample->next_row_out = cinfo->max_v_samp_factor;
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
}


/*
 * Control routine to do upsampling (and color conversion).
 *
 * In this version we upsample each component independently.
 * We upsample one row group into the conversion buffer, then apply
 * color conversion a row at a time.
 */

METHODDEF(void)
sep_upsample (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
	      JDIMENSION in_row_groups_avail,
	      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
	      JDIMENSION out_rows_avail)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
  int ci;
  jpeg_component_info * compptr;
  JDIMENSION num_rows;

  /* Fill the conversion buffer, if it's empty */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	 ci++, compptr++) {
      /* Invoke per-component upsample method.  Notice we pass a POINTER
       * to color_buf[ci], so that fullsize_upsample can change it.
       */
      (*upsample->methods[ci]) (cinfo, compptr,
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
	upsample->color_buf + ci);
    }
    upsample->next_row_out = 0;
  }

  /* Color-convert and emit rows */

  /* How many we have in the buffer: */
  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
  /* Not more than the distance to the end of the image.  Need this test
   * in case the image height is not a multiple of max_v_samp_factor:
   */
  if (num_rows > upsample->rows_to_go) 
    num_rows = upsample->rows_to_go;
  /* And not more than what the client can accept: */
  out_rows_avail -= *out_row_ctr;
  if (num_rows > out_rows_avail)
    num_rows = out_rows_avail;

  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
				     (JDIMENSION) upsample->next_row_out,
				     output_buf + *out_row_ctr,
				     (int) num_rows);

  /* Adjust counts */
  *out_row_ctr += num_rows;
  upsample->rows_to_go -= num_rows;
  upsample->next_row_out += num_rows;
  /* When the buffer is emptied, declare this input row group consumed */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor)
    (*in_row_group_ctr)++;
}


/*
 * These are the routines invoked by sep_upsample to upsample pixel values
 * of a single component.  One row group is processed per call.
 */


/*
 * For full-size components, we just make color_buf[ci] point at the
 * input buffer, and thus avoid copying any data.  Note that this is
 * safe only because sep_upsample doesn't declare the input row group
 * "consumed" until we are done color converting and emitting it.
 */

METHODDEF(void)
fullsize_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		   JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = input_data;
}


/*
 * This is a no-op version used for "uninteresting" components.
 * These components will not be referenced by color conversion.
 */

METHODDEF(void)
noop_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = NULL;	/* safety check */
}


/*
 * This version handles any integral sampling ratios.
 * This is not used for typical JPEG files, so it need not be fast.
 * Nor, for that matter, is it particularly accurate: the algorithm is
 * simple replication of the input pixel onto the corresponding output
 * pixels.  The hi-falutin sampling literature refers to this as a
 * "box filter".  A box filter tends to introduce visible artifacts,
 * so if you are actually going to use 3:1 or 4:1 sampling ratios
 * you would be well advised to improve this code.
 */

METHODDEF(void)
int_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	      JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
  JSAMPARRAY output_data = *output_data_ptr;
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  register int h;
  JSAMPROW outend;
  int h_expand, v_expand;
  int inrow, outrow;

  h_expand = upsample->h_expand[compptr->component_index];
  v_expand = upsample->v_expand[compptr->component_index];

  inrow = outrow = 0;
  while (outrow < cinfo->max_v_samp_factor) {
    /* Generate one output row with proper horizontal expansion */
    inptr = input_data[inrow];
    outptr = output_data[outrow];
    outend = outptr + cinfo->output_width;
    while (outptr < outend) {
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      for (h = h_expand; h > 0; h--) {
	*outptr++ = invalue;
      }
    }
    /* Generate any additional output rows by duplicating the first one */
    if (v_expand > 1) {
      jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
			v_expand-1, cinfo->output_width);
    }
    inrow++;
    outrow += v_expand;
  }
}


/*
 * Fast processing for the common case of 2:1 horizontal and 1:1 vertical.
 * It's still a box filter.
 */

METHODDEF(void)
h2v1_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  JSAMPARRAY output_data = *output_data_ptr;
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int inrow;

  for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
    inptr = input_data[inrow];
    outptr = output_data[inrow];
    outend = outptr + cinfo->output_width;
    while (outptr < outend) {
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      *outptr++ = invalue;
      *outptr++ = invalue;
    }
  }
}


/*
 * Fast processing for the common case of 2:1 horizontal and 2:1 vertical.
 * It's still a box filter.
 */

METHODDEF(void)
h2v2_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  JSAMPARRAY output_data = *output_data_ptr;
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int inrow, outrow;

  inrow = outrow = 0;
  while (outrow < cinfo->max_v_samp_factor) {
    inptr = input_data[inrow];
    outptr = output_data[outrow];
    outend = outptr + cinfo->output_width;
    while (outptr < outend) {
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      *outptr++ = invalue;
      *outptr++ = invalue;
    }
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
		      1, cinfo->output_width);
    inrow++;
    outrow += 2;
  }
}


/*
 * Fancy processing for the common case of 2:1 horizontal and 1:1 vertical.
 *
 * The upsampling algorithm is linear interpolation between pixel centers,
 * also known as a "triangle filter".  This is a good compromise between
 * speed and visual quality.  The centers of the output pixels are 1/4 and 3/4
 * of the way between input pixel centers.
 *
 * A note about the "bias" calculations: when rounding fractional values to
 * integer, we do not want to always round 0.5 up to the next integer.
 * If we did that, we'd introduce a noticeable bias towards larger values.
 * Instead, this code is arranged so that 0.5 will be rounded up or down at
 * alternate pixel locations (a simple ordered dither pattern).
 */

METHODDEF(void)
h2v1_fancy_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		     JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  JSAMPARRAY output_data = *output_data_ptr;
  register JSAMPROW inptr, outptr;
  register int invalue;
  register JDIMENSION colctr;
  int inrow;

  for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
    inptr = input_data[inrow];
    outptr = output_data[inrow];
    /* Special case for first column */
    invalue = GETJSAMPLE(*inptr++);
    *outptr++ = (JSAMPLE) invalue;
    *outptr++ = (JSAMPLE) ((invalue * 3 + GETJSAMPLE(*inptr) + 2) >> 2);

    for (colctr = compptr->downsampled_width - 2; colctr > 0; colctr--) {
      /* General case: 3/4 * nearer pixel + 1/4 * further pixel */
      invalue = GETJSAMPLE(*inptr++) * 3;
      *outptr++ = (JSAMPLE) ((invalue + GETJSAMPLE(inptr[-2]) + 1) >> 2);
      *outptr++ = (JSAMPLE) ((invalue + GETJSAMPLE(*inptr) + 2) >> 2);
    }

    /* Special case for last column */
    invalue = GETJSAMPLE(*inptr);
    *outptr++ = (JSAMPLE) ((invalue * 3 + GETJSAMPLE(inptr[-1]) + 1) >> 2);
    *outptr++ = (JSAMPLE) invalue;
  }
}


/*
 * Fancy processing for the common case of 2:1 horizontal and 2:1 vertical.
 * Again a triangle filter; see comments for h2v1 case, above.
 *
 * It is OK for us to reference the adjacent input rows because we demanded
 * context from the main buffer controller (see initialization code).
 */

METHODDEF(void)
h2v2_fancy_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		     JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  JSAMPARRAY output_data = *output_data_ptr;
  register JSAMPROW inptr0, inptr1, outptr;
#if BITS_IN_JSAMPLE == 8
  register int thiscolsum, lastcolsum, nextcolsum;
#else
  register INT32 thiscolsum, lastcolsum, nextcolsum;
#endif
  register JDIMENSION colctr;
  int inrow, outrow, v;

  inrow = outrow = 0;
  while (outrow < cinfo->max_v_samp_factor) {
    for (v = 0; v < 2; v++) {
      /* inptr0 points to nearest input row, inptr1 points to next nearest */
      inptr0 = input_data[inrow];
      if (v == 0)		/* next nearest is row above */
	inptr1 = input_data[inrow-1];
      else			/* next nearest is row below */
	inptr1 = input_data[inrow+1];
      outptr = output_data[outrow++];

      /* Special case for first column */
      thiscolsum = GETJSAMPLE(*inptr0++) * 3 + GETJSAMPLE(*inptr1++);
      nextcolsum = GETJSAMPLE(*inptr0++) * 3 + GETJSAMPLE(*inptr1++);
      *outptr++ = (JSAMPLE) ((thiscolsum * 4 + 8) >> 4);
      *outptr++ = (JSAMPLE) ((thiscolsum * 3 + nextcolsum + 7) >> 4);
      lastcolsum = thiscolsum; thiscolsum = nextcolsum;

      for (colctr = compptr->downsampled_width - 2; colctr > 0; colctr--) {
	/* General case: 3/4 * nearer pixel + 1/4 * further pixel in each */
	/* dimension, thus 9/16, 3/16, 3/16, 1/16 overall */
	nextcolsum = GETJSAMPLE(*inptr0++) * 3 + GETJSAMPLE(*inptr1++);
	*outptr++ = (JSAMPLE) ((thiscolsum * 3 + lastcolsum + 8) >> 4);
	*outptr++ = (JSAMPLE) ((thiscolsum * 3 + nextcolsum + 7) >> 4);
	lastcolsum = thiscolsum; thiscolsum = nextcolsum;
      }

      /* Special case for last column */
      *outptr++ = (JSAMPLE) ((thiscolsum * 3 + lastcolsum + 8) >> 4);
      *outptr++ = (JSAMPLE) ((thiscolsum * 4 + 7) >> 4);
    }
    inrow++;
  }
}


/*
 * Module initialization routine for upsampling.
 */

GLOBAL(void)
jinit_upsampler (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample;
  int ci;
  jpeg_component_info * compptr;
  boolean need_buffer, do_fancy;
  int h_in_group, v_in_group, h_out_group, v_out_group;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_upsample;
  upsample->pub.upsample = sep_upsample;
  upsample->pub.need_context_rows = FALSE; /* until we find out differently */

  if (cinfo->CCIR601_sampling)	/* this isn't supported */
    ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);

  /* jdmainct.c doesn't support context rows when min_DCT_scaled_size = 1,
   * so don't ask for it.
   */
  do_fancy = cinfo->do_fancy_upsampling && cinfo->min_DCT_scaled_size > 1;

  /* Verify we can handle the sampling factors, select per-component methods,
   * and create storage as needed.
   */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    /* Compute size of an "input group" after IDCT scaling.  This many samples
     * are to be converted to max_h_samp_factor * max_v_samp_factor pixels.
     */
    h_in_group = (compptr->h_samp_factor * compptr->DCT_scaled_size) /
		 cinfo->min_DCT_scaled_size;
    v_in_group = (compptr->v_samp_factor * compptr->DCT_scaled_size) /
		 cinfo->min_DCT_scaled_size;
    h_out_group = cinfo->max_h_samp_factor;
    v_out_group = cinfo->max_v_samp_factor;
    upsample->rowgroup_height[ci] = v_in_group; /* save for use later */
    need_buffer = TRUE;
    if (! compptr->component_needed) {
      /* Don't bother to upsample an uninteresting component. */
      upsample->methods[ci] = noop_upsample;
      need_buffer = FALSE;
    } else if (h_in_group == h_out_group && v_in_group == v_out_group) {
      /* Fullsize components can be processed without any work. */
      upsample->methods[ci] = fullsize_upsample;
      need_buffer = FALSE;
    } else if (h_in_group * 2 == h_out_group &&
	       v_in_group == v_out_group) {
      /* Special cases for 2h1v upsampling */
      if (do_fancy && compptr->downsampled_width > 2)
	upsample->methods[ci] = h2v1_fancy_upsample;
      else
	upsample->methods[ci] = h2v1_upsample;
    } else if (h_in_group * 2 == h_out_group &&
	       v_in_group * 2 == v_out_group) {
      /* Special cases for 2h2v upsampling */
      if (do_fancy && compptr->downsampled_width > 2) {
	upsample->methods[ci] = h2v2_fancy_upsample;
	upsample->pub.need_context_rows = TRUE;
      } else
	upsample->methods[ci] = h2v2_upsample;
    } else if ((h_out_group % h_in_group) == 0 &&
	       (v_out_group % v_in_group) == 0) {
      /* Generic integral-factors upsampling method */
      upsample->methods[ci] = int_upsample;
      upsample->h_expand[ci] = (UINT8) (h_out_group / h_in_group);
      upsample->v_expand[ci] = (UINT8) (v_out_group / v_in_group);
    } else
      ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
    if (need_buffer) {
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 (JDIMENSION) jround_up((long) cinfo->output_width,
				(long) cinfo->max_h_samp_factor),
	 (JDIMENSION) cinfo->max_v_samp_factor);
    }
  }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\jdphuff.c ===
/*
 * jdphuff.c
 *
 * Copyright (C) 1995-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains Huffman entropy decoding routines for progressive JPEG.
 *
 * Much of the complexity here has to do with supporting input suspension.
 * If the data source module demands suspension, we want to be able to back
 * up to the start of the current MCU.  To do this, we copy state variables
 * into local working storage, and update them back to the permanent
 * storage only upon successful completion of an MCU.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jdhuff.h"		/* Declarations shared with jdhuff.c */


#ifdef D_PROGRESSIVE_SUPPORTED

/*
 * Expanded entropy decoder object for progressive Huffman decoding.
 *
 * The savable_state subrecord contains fields that change within an MCU,
 * but must not be updated permanently until we complete the MCU.
 */

typedef struct {
  unsigned int EOBRUN;			/* remaining EOBs in EOBRUN */
  int last_dc_val[MAX_COMPS_IN_SCAN];	/* last DC coef for each component */
} savable_state;

/* This macro is to work around compilers with missing or broken
 * structure assignment.  You'll need to fix this code if you have
 * such a compiler and you change MAX_COMPS_IN_SCAN.
 */

#ifndef NO_STRUCT_ASSIGN
#define ASSIGN_STATE(dest,src)  ((dest) = (src))
#else
#if MAX_COMPS_IN_SCAN == 4
#define ASSIGN_STATE(dest,src)  \
	((dest).EOBRUN = (src).EOBRUN, \
	 (dest).last_dc_val[0] = (src).last_dc_val[0], \
	 (dest).last_dc_val[1] = (src).last_dc_val[1], \
	 (dest).last_dc_val[2] = (src).last_dc_val[2], \
	 (dest).last_dc_val[3] = (src).last_dc_val[3])
#endif
#endif


typedef struct {
  struct jpeg_entropy_decoder pub; /* public fields */

  /* These fields are loaded into local variables at start of each MCU.
   * In case of suspension, we exit WITHOUT updating them.
   */
  bitread_perm_state bitstate;	/* Bit buffer at start of MCU */
  savable_state saved;		/* Other state at start of MCU */

  /* These fields are NOT loaded into local working state. */
  unsigned int restarts_to_go;	/* MCUs left in this restart interval */

  /* Pointers to derived tables (these workspaces have image lifespan) */
  d_derived_tbl * derived_tbls[NUM_HUFF_TBLS];

  d_derived_tbl * ac_derived_tbl; /* active table during an AC scan */
} phuff_entropy_decoder;

typedef phuff_entropy_decoder * phuff_entropy_ptr;

/* Forward declarations */
METHODDEF(boolean) __cdecl decode_mcu_DC_first JPP((j_decompress_ptr cinfo,
					    JBLOCKROW *MCU_data));
METHODDEF(boolean) __cdecl decode_mcu_AC_first JPP((j_decompress_ptr cinfo,
					    JBLOCKROW *MCU_data));
METHODDEF(boolean) __cdecl decode_mcu_DC_refine JPP((j_decompress_ptr cinfo,
					     JBLOCKROW *MCU_data));
METHODDEF(boolean) __cdecl decode_mcu_AC_refine JPP((j_decompress_ptr cinfo,
					     JBLOCKROW *MCU_data));


/*
 * Initialize for a Huffman-compressed scan.
 */

METHODDEF(void)
start_pass_phuff_decoder (j_decompress_ptr cinfo)
{
  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
  boolean is_DC_band, bad;
  int ci, coefi, tbl;
  int *coef_bit_ptr;
  jpeg_component_info * compptr;

  is_DC_band = (cinfo->Ss == 0);

  /* Validate scan parameters */
  bad = FALSE;
  if (is_DC_band) {
    if (cinfo->Se != 0)
      bad = TRUE;
  } else {
    /* need not check Ss/Se < 0 since they came from unsigned bytes */
    if (cinfo->Ss > cinfo->Se || cinfo->Se >= DCTSIZE2)
      bad = TRUE;
    /* AC scans may have only one component */
    if (cinfo->comps_in_scan != 1)
      bad = TRUE;
  }
  if (cinfo->Ah != 0) {
    /* Successive approximation refinement scan: must have Al = Ah-1. */
    if (cinfo->Al != cinfo->Ah-1)
      bad = TRUE;
  }
  if (cinfo->Al > 13)		/* need not check for < 0 */
    bad = TRUE;
  if (bad)
    ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
	     cinfo->Ss, cinfo->Se, cinfo->Ah, cinfo->Al);
  /* Update progression status, and verify that scan order is legal.
   * Note that inter-scan inconsistencies are treated as warnings
   * not fatal errors ... not clear if this is right way to behave.
   */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    int cindex = cinfo->cur_comp_info[ci]->component_index;
    coef_bit_ptr = & cinfo->coef_bits[cindex][0];
    if (!is_DC_band && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
      WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
    for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
      int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
      if (cinfo->Ah != expected)
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
      coef_bit_ptr[coefi] = cinfo->Al;
    }
  }

  /* Select MCU decoding routine */
  if (cinfo->Ah == 0) {
    if (is_DC_band)
      entropy->pub.decode_mcu = decode_mcu_DC_first;
    else
      entropy->pub.decode_mcu = decode_mcu_AC_first;
  } else {
    if (is_DC_band)
      entropy->pub.decode_mcu = decode_mcu_DC_refine;
    else
      entropy->pub.decode_mcu = decode_mcu_AC_refine;
  }

  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    compptr = cinfo->cur_comp_info[ci];
    /* Make sure requested tables are present, and compute derived tables.
     * We may build same derived table more than once, but it's not expensive.
     */
    if (is_DC_band) {
      if (cinfo->Ah == 0) {	/* DC refinement needs no table */
	tbl = compptr->dc_tbl_no;
	if (tbl < 0 || tbl >= NUM_HUFF_TBLS ||
	    cinfo->dc_huff_tbl_ptrs[tbl] == NULL)
	  ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tbl);
	jpeg_make_d_derived_tbl(cinfo, cinfo->dc_huff_tbl_ptrs[tbl],
				& entropy->derived_tbls[tbl]);
      }
    } else {
      tbl = compptr->ac_tbl_no;
      if (tbl < 0 || tbl >= NUM_HUFF_TBLS ||
          cinfo->ac_huff_tbl_ptrs[tbl] == NULL)
        ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tbl);
      jpeg_make_d_derived_tbl(cinfo, cinfo->ac_huff_tbl_ptrs[tbl],
			      & entropy->derived_tbls[tbl]);
      /* remember the single active table */
      entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
    }
    /* Initialize DC predictions to 0 */
    entropy->saved.last_dc_val[ci] = 0;
  }

  /* Initialize bitread state variables */
  entropy->bitstate.bits_left = 0;
  entropy->bitstate.get_buffer = 0; /* unnecessary, but keeps Purify quiet */
  entropy->bitstate.printed_eod = FALSE;

  /* Initialize private state variables */
  entropy->saved.EOBRUN = 0;

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
}


/*
 * Figure F.12: extend sign bit.
 * On some machines, a shift and add will be faster than a table lookup.
 */

#ifdef AVOID_TABLES

#define HUFF_EXTEND(x,s)  ((x) < (1<<((s)-1)) ? (x) + (((-1)<<(s)) + 1) : (x))

#else

#define HUFF_EXTEND(x,s)  ((x) < extend_test[s] ? (x) + extend_offset[s] : (x))

static const int extend_test[16] =   /* entry n is 2**(n-1) */
  { 0, 0x0001, 0x0002, 0x0004, 0x0008, 0x0010, 0x0020, 0x0040, 0x0080,
    0x0100, 0x0200, 0x0400, 0x0800, 0x1000, 0x2000, 0x4000 };

static const int extend_offset[16] = /* entry n is (-1 << n) + 1 */
  { 0, ((-1)<<1) + 1, ((-1)<<2) + 1, ((-1)<<3) + 1, ((-1)<<4) + 1,
    ((-1)<<5) + 1, ((-1)<<6) + 1, ((-1)<<7) + 1, ((-1)<<8) + 1,
    ((-1)<<9) + 1, ((-1)<<10) + 1, ((-1)<<11) + 1, ((-1)<<12) + 1,
    ((-1)<<13) + 1, ((-1)<<14) + 1, ((-1)<<15) + 1 };

#endif /* AVOID_TABLES */


/*
 * Check for a restart marker & resynchronize decoder.
 * Returns FALSE if must suspend.
 */

LOCAL(boolean)
process_restart (j_decompress_ptr cinfo)
{
  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
  int ci;

  /* Throw away any unused bits remaining in bit buffer; */
  /* include any full bytes in next_marker's count of discarded bytes */
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
  entropy->bitstate.bits_left = 0;

  /* Advance past the RSTn marker */
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
    return FALSE;

  /* Re-initialize DC predictions to 0 */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++)
    entropy->saved.last_dc_val[ci] = 0;
  /* Re-init EOB run count, too */
  entropy->saved.EOBRUN = 0;

  /* Reset restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;

  /* Next segment can get another out-of-data warning */
  entropy->bitstate.printed_eod = FALSE;

  return TRUE;
}


/*
 * Huffman MCU decoding.
 * Each of these routines decodes and returns one MCU's worth of
 * Huffman-compressed coefficients. 
 * The coefficients are reordered from zigzag order into natural array order,
 * but are not dequantized.
 *
 * The i'th block of the MCU is stored into the block pointed to by
 * MCU_data[i].  WE ASSUME THIS AREA IS INITIALLY ZEROED BY THE CALLER.
 *
 * We return FALSE if data source requested suspension.  In that case no
 * changes have been made to permanent state.  (Exception: some output
 * coefficients may already have been assigned.  This is harmless for
 * spectral selection, since we'll just re-assign them on the next call.
 * Successive approximation AC refinement has to be more careful, however.)
 */

/*
 * MCU decoding for DC initial scan (either spectral selection,
 * or first pass of successive approximation).
 */

METHODDEF(boolean)
__cdecl decode_mcu_DC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
  int Al = cinfo->Al;
  register int s, r;
  int blkn, ci;
  JBLOCKROW block;
  BITREAD_STATE_VARS;
  savable_state state;
  d_derived_tbl * tbl;
  jpeg_component_info * compptr;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
    if (entropy->restarts_to_go == 0)
      if (! process_restart(cinfo))
	return FALSE;
  }

  /* Load up working state */
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
  ASSIGN_STATE(state, entropy->saved);

  /* Outer loop handles each block in the MCU */

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
    block = MCU_data[blkn];
    ci = cinfo->MCU_membership[blkn];
    compptr = cinfo->cur_comp_info[ci];
    tbl = entropy->derived_tbls[compptr->dc_tbl_no];

    /* Decode a single block's worth of coefficients */

    /* Section F.2.2.1: decode the DC coefficient difference */
    HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
    if (s) {
      CHECK_BIT_BUFFER(br_state, s, return FALSE);
      r = GET_BITS(s);
      s = HUFF_EXTEND(r, s);
    }

    /* Convert DC difference to actual value, update last_dc_val */
    s += state.last_dc_val[ci];
    state.last_dc_val[ci] = s;
    /* Scale and output the DC coefficient (assumes jpeg_natural_order[0]=0) */
    (*block)[0] = (JCOEF) (s << Al);
  }

  /* Completed MCU, so update state */
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
  ASSIGN_STATE(entropy->saved, state);

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;

  return TRUE;
}


/*
 * MCU decoding for AC initial scan (either spectral selection,
 * or first pass of successive approximation).
 */

METHODDEF(boolean)
__cdecl decode_mcu_AC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
  int Se = cinfo->Se;
  int Al = cinfo->Al;
  register int s, k, r;
  unsigned int EOBRUN;
  JBLOCKROW block;
  BITREAD_STATE_VARS;
  d_derived_tbl * tbl;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
    if (entropy->restarts_to_go == 0)
      if (! process_restart(cinfo))
	return FALSE;
  }

  /* Load up working state.
   * We can avoid loading/saving bitread state if in an EOB run.
   */
  EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we care about */

  /* There is always only one block per MCU */

  if (EOBRUN > 0)		/* if it's a band of zeroes... */
    EOBRUN--;			/* ...process it now (we do nothing) */
  else {
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
    block = MCU_data[0];
    tbl = entropy->ac_derived_tbl;

    for (k = cinfo->Ss; k <= Se; k++) {
      HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
      r = s >> 4;
      s &= 15;
      if (s) {
        k += r;
        CHECK_BIT_BUFFER(br_state, s, return FALSE);
        r = GET_BITS(s);
        s = HUFF_EXTEND(r, s);
	/* Scale and output coefficient in natural (dezigzagged) order */
        (*block)[jpeg_natural_order[k]] = (JCOEF) (s << Al);
      } else {
        if (r == 15) {		/* ZRL */
          k += 15;		/* skip 15 zeroes in band */
        } else {		/* EOBr, run length is 2^r + appended bits */
          EOBRUN = 1 << r;
          if (r) {		/* EOBr, r > 0 */
	    CHECK_BIT_BUFFER(br_state, r, return FALSE);
            r = GET_BITS(r);
            EOBRUN += r;
          }
	  EOBRUN--;		/* this band is processed at this moment */
	  break;		/* force end-of-band */
	}
      }
    }

    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
  }

  /* Completed MCU, so update state */
  entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we care about */

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;

  return TRUE;
}


/*
 * MCU decoding for DC successive approximation refinement scan.
 * Note: we assume such scans can be multi-component, although the spec
 * is not very clear on the point.
 */

METHODDEF(boolean)
__cdecl decode_mcu_DC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
  int blkn;
  JBLOCKROW block;
  BITREAD_STATE_VARS;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
    if (entropy->restarts_to_go == 0)
      if (! process_restart(cinfo))
	return FALSE;
  }

  /* Load up working state */
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);

  /* Outer loop handles each block in the MCU */

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
    block = MCU_data[blkn];

    /* Encoded data is simply the next bit of the two's-complement DC value */
    CHECK_BIT_BUFFER(br_state, 1, return FALSE);
    if (GET_BITS(1))
      (*block)[0] |= p1;
    /* Note: since we use |=, repeating the assignment later is safe */
  }

  /* Completed MCU, so update state */
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;

  return TRUE;
}


/*
 * MCU decoding for AC successive approximation refinement scan.
 */

METHODDEF(boolean)
__cdecl decode_mcu_AC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
  int Se = cinfo->Se;
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
  int m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
  register int s, k, r;
  unsigned int EOBRUN;
  JBLOCKROW block;
  JCOEFPTR thiscoef;
  BITREAD_STATE_VARS;
  d_derived_tbl * tbl;
  int num_newnz;
  int newnz_pos[DCTSIZE2];

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
    if (entropy->restarts_to_go == 0)
      if (! process_restart(cinfo))
	return FALSE;
  }

  /* Load up working state */
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
  EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we care about */

  /* There is always only one block per MCU */
  block = MCU_data[0];
  tbl = entropy->ac_derived_tbl;

  /* If we are forced to suspend, we must undo the assignments to any newly
   * nonzero coefficients in the block, because otherwise we'd get confused
   * next time about which coefficients were already nonzero.
   * But we need not undo addition of bits to already-nonzero coefficients;
   * instead, we can test the current bit position to see if we already did it.
   */
  num_newnz = 0;

  /* initialize coefficient loop counter to start of band */
  k = cinfo->Ss;

  if (EOBRUN == 0) {
    for (; k <= Se; k++) {
      HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
      r = s >> 4;
      s &= 15;
      if (s) {
	if (s != 1)		/* size of new coef should always be 1 */
	  WARNMS(cinfo, JWRN_HUFF_BAD_CODE);
        CHECK_BIT_BUFFER(br_state, 1, goto undoit);
        if (GET_BITS(1))
	  s = p1;		/* newly nonzero coef is positive */
	else
	  s = m1;		/* newly nonzero coef is negative */
      } else {
	if (r != 15) {
	  EOBRUN = 1 << r;	/* EOBr, run length is 2^r + appended bits */
	  if (r) {
	    CHECK_BIT_BUFFER(br_state, r, goto undoit);
	    r = GET_BITS(r);
	    EOBRUN += r;
	  }
	  break;		/* rest of block is handled by EOB logic */
	}
	/* note s = 0 for processing ZRL */
      }
      /* Advance over already-nonzero coefs and r still-zero coefs,
       * appending correction bits to the nonzeroes.  A correction bit is 1
       * if the absolute value of the coefficient must be increased.
       */
      do {
	thiscoef = *block + jpeg_natural_order[k];
	if (*thiscoef != 0) {
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
	  if (GET_BITS(1)) {
	    if ((*thiscoef & p1) == 0) { /* do nothing if already changed it */
	      if (*thiscoef >= 0)
		*thiscoef += (JCOEF)p1;
	      else
		*thiscoef += (JCOEF)m1;
	    }
	  }
	} else {
	  if (--r < 0)
	    break;		/* reached target zero coefficient */
	}
	k++;
      } while (k <= Se);
      if (s) {
	int pos = jpeg_natural_order[k];
	/* Output newly nonzero coefficient */
	(*block)[pos] = (JCOEF) s;
	/* Remember its position in case we have to suspend */
	newnz_pos[num_newnz++] = pos;
      }
    }
  }

  if (EOBRUN > 0) {
    /* Scan any remaining coefficient positions after the end-of-band
     * (the last newly nonzero coefficient, if any).  Append a correction
     * bit to each already-nonzero coefficient.  A correction bit is 1
     * if the absolute value of the coefficient must be increased.
     */
    for (; k <= Se; k++) {
      thiscoef = *block + jpeg_natural_order[k];
      if (*thiscoef != 0) {
	CHECK_BIT_BUFFER(br_state, 1, goto undoit);
	if (GET_BITS(1)) {
	  if ((*thiscoef & p1) == 0) { /* do nothing if already changed it */
	    if (*thiscoef >= 0)
	      *thiscoef += (JCOEF)p1;
	    else
	      *thiscoef += (JCOEF)m1;
	  }
	}
      }
    }
    /* Count one block completed in EOB run */
    EOBRUN--;
  }

  /* Completed MCU, so update state */
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
  entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we care about */

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;

  return TRUE;

undoit:
  /* Re-zero any output coefficients that we made newly nonzero */
  while (num_newnz > 0)
    (*block)[newnz_pos[--num_newnz]] = 0;

  return FALSE;
}


/*
 * Module initialization routine for progressive Huffman entropy decoding.
 */

GLOBAL(void)
jinit_phuff_decoder (j_decompress_ptr cinfo)
{
  phuff_entropy_ptr entropy;
  int *coef_bit_ptr;
  int ci, i;

  entropy = (phuff_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(phuff_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass_phuff_decoder;

  /* Mark derived tables unallocated */
  for (i = 0; i < NUM_HUFF_TBLS; i++) {
    entropy->derived_tbls[i] = NULL;
  }

  /* Create progression status table */
  cinfo->coef_bits = (int (*)[DCTSIZE2])
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				cinfo->num_components*DCTSIZE2*SIZEOF(int));
  coef_bit_ptr = & cinfo->coef_bits[0][0];
  for (ci = 0; ci < cinfo->num_components; ci++) 
    for (i = 0; i < DCTSIZE2; i++)
      *coef_bit_ptr++ = -1;
}

#endif /* D_PROGRESSIVE_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\jdmerge.c ===
/*
 * jdmerge.c
 *
 * Copyright (C) 1994-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains code for merged upsampling/color conversion.
 *
 * This file combines functions from jdsample.c and jdcolor.c;
 * read those files first to understand what's going on.
 *
 * When the chroma components are to be upsampled by simple replication
 * (ie, box filtering), we can save some work in color conversion by
 * calculating all the output pixels corresponding to a pair of chroma
 * samples at one time.  In the conversion equations
 *	R = Y           + K1 * Cr
 *	G = Y + K2 * Cb + K3 * Cr
 *	B = Y + K4 * Cb
 * only the Y term varies among the group of pixels corresponding to a pair
 * of chroma samples, so the rest of the terms can be calculated just once.
 * At typical sampling ratios, this eliminates half or three-quarters of the
 * multiplications needed for color conversion.
 *
 * This file currently provides implementations for the following cases:
 *	YCbCr => RGB color conversion only.
 *	Sampling ratios of 2h1v or 2h2v.
 *	No scaling needed at upsample time.
 *	Corner-aligned (non-CCIR601) sampling alignment.
 * Other special cases could be added, but in most applications these are
 * the only common cases.  (For uncommon cases we fall back on the more
 * general code in jdsample.c and jdcolor.c.)
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"

#ifdef UPSAMPLE_MERGING_SUPPORTED


/* Private subobject */

typedef struct {
  struct jpeg_upsampler pub;	/* public fields */

  /* Pointer to routine to do actual upsampling/conversion of one row group */
  JMETHOD(void, upmethod, (j_decompress_ptr cinfo,
			   JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
			   JSAMPARRAY output_buf));

  /* Private state for YCC->RGB conversion */
  int * Cr_r_tab;		/* => table for Cr to R conversion */
  int * Cb_b_tab;		/* => table for Cb to B conversion */
  INT32 * Cr_g_tab;		/* => table for Cr to G conversion */
  INT32 * Cb_g_tab;		/* => table for Cb to G conversion */

  /* For 2:1 vertical sampling, we produce two output rows at a time.
   * We need a "spare" row buffer to hold the second output row if the
   * application provides just a one-row buffer; we also use the spare
   * to discard the dummy last row if the image height is odd.
   */
  JSAMPROW spare_row;
  boolean spare_full;		/* T if spare buffer is occupied */

  JDIMENSION out_row_width;	/* samples per output row */
  JDIMENSION rows_to_go;	/* counts rows remaining in image */
} my_upsampler;

typedef my_upsampler * my_upsample_ptr;

#define SCALEBITS	16	/* speediest right-shift on some machines */
#define ONE_HALF	((INT32) 1 << (SCALEBITS-1))
#define FIX(x)		((INT32) ((x) * (1L<<SCALEBITS) + 0.5))


/*
 * Initialize tables for YCC->RGB colorspace conversion.
 * This is taken directly from jdcolor.c; see that file for more info.
 */

LOCAL(void)
build_ycc_rgb_table (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
  int i;
  INT32 x;
  SHIFT_TEMPS

  upsample->Cr_r_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(MAXJSAMPLE+1) * SIZEOF(int));
  upsample->Cb_b_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(MAXJSAMPLE+1) * SIZEOF(int));
  upsample->Cr_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(MAXJSAMPLE+1) * SIZEOF(INT32));
  upsample->Cb_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(MAXJSAMPLE+1) * SIZEOF(INT32));

  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
    /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
    /* The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE */
    /* Cr=>R value is nearest int to 1.40200 * x */
    upsample->Cr_r_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
    /* Cb=>B value is nearest int to 1.77200 * x */
    upsample->Cb_b_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
    /* Cr=>G value is scaled-up -0.71414 * x */
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
    /* Cb=>G value is scaled-up -0.34414 * x */
    /* We also add in ONE_HALF so that need not do it in inner loop */
    upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
  }
}


/*
 * Initialize for an upsampling pass.
 */

METHODDEF(void)
start_pass_merged_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Mark the spare buffer empty */
  upsample->spare_full = FALSE;
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
}


/*
 * Control routine to do upsampling (and color conversion).
 *
 * The control routine just handles the row buffering considerations.
 */

METHODDEF(void)
merged_2v_upsample (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
/* 2:1 vertical sampling case: may need a spare row. */
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
  JSAMPROW work_ptrs[2];
  JDIMENSION num_rows;		/* number of rows returned to caller */

  if (upsample->spare_full) {
    /* If we have a spare row saved from a previous cycle, just return it. */
    jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
		      1, upsample->out_row_width);
    num_rows = 1;
    upsample->spare_full = FALSE;
  } else {
    /* Figure number of rows to return to caller. */
    num_rows = 2;
    /* Not more than the distance to the end of the image. */
    if (num_rows > upsample->rows_to_go)
      num_rows = upsample->rows_to_go;
    /* And not more than what the client can accept: */
    out_rows_avail -= *out_row_ctr;
    if (num_rows > out_rows_avail)
      num_rows = out_rows_avail;
    /* Create output pointer array for upsampler. */
    work_ptrs[0] = output_buf[*out_row_ctr];
    if (num_rows > 1) {
      work_ptrs[1] = output_buf[*out_row_ctr + 1];
    } else {
      work_ptrs[1] = upsample->spare_row;
      upsample->spare_full = TRUE;
    }
    /* Now do the upsampling. */
    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
  }

  /* Adjust counts */
  *out_row_ctr += num_rows;
  upsample->rows_to_go -= num_rows;
  /* When the buffer is emptied, declare this input row group consumed */
  if (! upsample->spare_full)
    (*in_row_group_ctr)++;
}


METHODDEF(void)
merged_1v_upsample (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
/* 1:1 vertical sampling case: much easier, never need a spare row. */
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Just do the upsampling. */
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
			 output_buf + *out_row_ctr);
  /* Adjust counts */
  (*out_row_ctr)++;
  (*in_row_group_ctr)++;
}


/*
 * These are the routines invoked by the control routines to do
 * the actual upsampling/conversion.  One row group is processed per call.
 *
 * Note: since we may be writing directly into application-supplied buffers,
 * we have to be honest about the output width; we can't assume the buffer
 * has been rounded up to an even width.
 */


/*
 * Upsample and color convert for the case of 2:1 horizontal and 1:1 vertical.
 */

METHODDEF(void)
h2v1_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
  register int y, cred, cgreen, cblue;
  int cb, cr;
  register JSAMPROW outptr;
  JSAMPROW inptr0, inptr1, inptr2;
  JDIMENSION col;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
  int * Crrtab = upsample->Cr_r_tab;
  int * Cbbtab = upsample->Cb_b_tab;
  INT32 * Crgtab = upsample->Cr_g_tab;
  INT32 * Cbgtab = upsample->Cb_g_tab;
  SHIFT_TEMPS

  inptr0 = input_buf[0][in_row_group_ctr];
  inptr1 = input_buf[1][in_row_group_ctr];
  inptr2 = input_buf[2][in_row_group_ctr];
  outptr = output_buf[0];
  /* Loop for each pair of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
    /* Do the chroma part of the calculation */
    cb = GETJSAMPLE(*inptr1++);
    cr = GETJSAMPLE(*inptr2++);
    cred = Crrtab[cr];
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
    cblue = Cbbtab[cb];
    /* Fetch 2 Y values and emit 2 pixels */
    y  = GETJSAMPLE(*inptr0++);
    outptr[RGB_RED] =   range_limit[y + cred];
    outptr[RGB_GREEN] = range_limit[y + cgreen];
    outptr[RGB_BLUE] =  range_limit[y + cblue];
    outptr += RGB_PIXELSIZE;
    y  = GETJSAMPLE(*inptr0++);
    outptr[RGB_RED] =   range_limit[y + cred];
    outptr[RGB_GREEN] = range_limit[y + cgreen];
    outptr[RGB_BLUE] =  range_limit[y + cblue];
    outptr += RGB_PIXELSIZE;
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
    cb = GETJSAMPLE(*inptr1);
    cr = GETJSAMPLE(*inptr2);
    cred = Crrtab[cr];
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
    cblue = Cbbtab[cb];
    y  = GETJSAMPLE(*inptr0);
    outptr[RGB_RED] =   range_limit[y + cred];
    outptr[RGB_GREEN] = range_limit[y + cgreen];
    outptr[RGB_BLUE] =  range_limit[y + cblue];
  }
}


/*
 * Upsample and color convert for the case of 2:1 horizontal and 2:1 vertical.
 */

METHODDEF(void)
h2v2_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
  register int y, cred, cgreen, cblue;
  int cb, cr;
  register JSAMPROW outptr0, outptr1;
  JSAMPROW inptr00, inptr01, inptr1, inptr2;
  JDIMENSION col;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
  int * Crrtab = upsample->Cr_r_tab;
  int * Cbbtab = upsample->Cb_b_tab;
  INT32 * Crgtab = upsample->Cr_g_tab;
  INT32 * Cbgtab = upsample->Cb_g_tab;
  SHIFT_TEMPS

  inptr00 = input_buf[0][in_row_group_ctr*2];
  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
  inptr1 = input_buf[1][in_row_group_ctr];
  inptr2 = input_buf[2][in_row_group_ctr];
  outptr0 = output_buf[0];
  outptr1 = output_buf[1];
  /* Loop for each group of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
    /* Do the chroma part of the calculation */
    cb = GETJSAMPLE(*inptr1++);
    cr = GETJSAMPLE(*inptr2++);
    cred = Crrtab[cr];
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
    cblue = Cbbtab[cb];
    /* Fetch 4 Y values and emit 4 pixels */
    y  = GETJSAMPLE(*inptr00++);
    outptr0[RGB_RED] =   range_limit[y + cred];
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
    outptr0 += RGB_PIXELSIZE;
    y  = GETJSAMPLE(*inptr00++);
    outptr0[RGB_RED] =   range_limit[y + cred];
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
    outptr0 += RGB_PIXELSIZE;
    y  = GETJSAMPLE(*inptr01++);
    outptr1[RGB_RED] =   range_limit[y + cred];
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
    outptr1 += RGB_PIXELSIZE;
    y  = GETJSAMPLE(*inptr01++);
    outptr1[RGB_RED] =   range_limit[y + cred];
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
    outptr1 += RGB_PIXELSIZE;
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
    cb = GETJSAMPLE(*inptr1);
    cr = GETJSAMPLE(*inptr2);
    cred = Crrtab[cr];
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
    cblue = Cbbtab[cb];
    y  = GETJSAMPLE(*inptr00);
    outptr0[RGB_RED] =   range_limit[y + cred];
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
    y  = GETJSAMPLE(*inptr01);
    outptr1[RGB_RED] =   range_limit[y + cred];
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
  }
}


/*
 * Module initialization routine for merged upsampling/color conversion.
 *
 * NB: this is called under the conditions determined by use_merged_upsample()
 * in jdmaster.c.  That routine MUST correspond to the actual capabilities
 * of this module; no safety checks are made here.
 */

GLOBAL(void)
jinit_merged_upsampler (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_merged_upsample;
  upsample->pub.need_context_rows = FALSE;

  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;

  if (cinfo->max_v_samp_factor == 2) {
    upsample->pub.upsample = merged_2v_upsample;
    upsample->upmethod = h2v2_merged_upsample;
    /* Allocate a spare row buffer */
    upsample->spare_row = (JSAMPROW)
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		(size_t) (upsample->out_row_width * SIZEOF(JSAMPLE)));
  } else {
    upsample->pub.upsample = merged_1v_upsample;
    upsample->upmethod = h2v1_merged_upsample;
    /* No spare row needed */
    upsample->spare_row = NULL;
  }

  build_ycc_rgb_table(cinfo);
}

#endif /* UPSAMPLE_MERGING_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\jdpostct.c ===
/*
 * jdpostct.c
 *
 * Copyright (C) 1994-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains the decompression postprocessing controller.
 * This controller manages the upsampling, color conversion, and color
 * quantization/reduction steps; specifically, it controls the buffering
 * between upsample/color conversion and color quantization/reduction.
 *
 * If no color quantization/reduction is required, then this module has no
 * work to do, and it just hands off to the upsample/color conversion code.
 * An integrated upsample/convert/quantize process would replace this module
 * entirely.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/* Private buffer controller object */

typedef struct {
  struct jpeg_d_post_controller pub; /* public fields */

  /* Color quantization source buffer: this holds output data from
   * the upsample/color conversion step to be passed to the quantizer.
   * For two-pass color quantization, we need a full-image buffer;
   * for one-pass operation, a strip buffer is sufficient.
   */
  jvirt_sarray_ptr whole_image;	/* virtual array, or NULL if one-pass */
  JSAMPARRAY buffer;		/* strip buffer, or current strip of virtual */
  JDIMENSION strip_height;	/* buffer size in rows */
  /* for two-pass mode only: */
  JDIMENSION starting_row;	/* row # of first row in current strip */
  JDIMENSION next_row;		/* index of next row to fill/empty in strip */
} my_post_controller;

typedef my_post_controller * my_post_ptr;


/* Forward declarations */
METHODDEF(void) post_process_1pass
	JPP((j_decompress_ptr cinfo,
	     JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
	     JDIMENSION in_row_groups_avail,
	     JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
	     JDIMENSION out_rows_avail));
#ifdef QUANT_2PASS_SUPPORTED
METHODDEF(void) post_process_prepass
	JPP((j_decompress_ptr cinfo,
	     JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
	     JDIMENSION in_row_groups_avail,
	     JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
	     JDIMENSION out_rows_avail));
METHODDEF(void) post_process_2pass
	JPP((j_decompress_ptr cinfo,
	     JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
	     JDIMENSION in_row_groups_avail,
	     JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
	     JDIMENSION out_rows_avail));
#endif


/*
 * Initialize for a processing pass.
 */

METHODDEF(void)
start_pass_dpost (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
  my_post_ptr post = (my_post_ptr) cinfo->post;

  switch (pass_mode) {
  case JBUF_PASS_THRU:
    if (cinfo->quantize_colors) {
      /* Single-pass processing with color quantization. */
      post->pub.post_process_data = post_process_1pass;
      /* We could be doing buffered-image output before starting a 2-pass
       * color quantization; in that case, jinit_d_post_controller did not
       * allocate a strip buffer.  Use the virtual-array buffer as workspace.
       */
      if (post->buffer == NULL) {
	post->buffer = (*cinfo->mem->access_virt_sarray)
	  ((j_common_ptr) cinfo, post->whole_image,
	   (JDIMENSION) 0, post->strip_height, TRUE);
      }
    } else {
      /* For single-pass processing without color quantization,
       * I have no work to do; just call the upsampler directly.
       */
      post->pub.post_process_data = cinfo->upsample->upsample;
    }
    break;
#ifdef QUANT_2PASS_SUPPORTED
  case JBUF_SAVE_AND_PASS:
    /* First pass of 2-pass quantization */
    if (post->whole_image == NULL)
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    post->pub.post_process_data = post_process_prepass;
    break;
  case JBUF_CRANK_DEST:
    /* Second pass of 2-pass quantization */
    if (post->whole_image == NULL)
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    post->pub.post_process_data = post_process_2pass;
    break;
#endif /* QUANT_2PASS_SUPPORTED */
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    break;
  }
  post->starting_row = post->next_row = 0;
}


/*
 * Process some data in the one-pass (strip buffer) case.
 * This is used for color precision reduction as well as one-pass quantization.
 */

METHODDEF(void)
post_process_1pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
  my_post_ptr post = (my_post_ptr) cinfo->post;
  JDIMENSION num_rows, max_rows;

  /* Fill the buffer, but not more than what we can dump out in one go. */
  /* Note we rely on the upsampler to detect bottom of image. */
  max_rows = out_rows_avail - *out_row_ctr;
  if (max_rows > post->strip_height)
    max_rows = post->strip_height;
  num_rows = 0;
  (*cinfo->upsample->upsample) (cinfo,
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &num_rows, max_rows);
  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
		post->buffer, output_buf + *out_row_ctr, (int) num_rows);
  *out_row_ctr += num_rows;
}


#ifdef QUANT_2PASS_SUPPORTED

/*
 * Process some data in the first pass of 2-pass quantization.
 */

METHODDEF(void)
post_process_prepass (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		      JDIMENSION in_row_groups_avail,
		      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		      JDIMENSION out_rows_avail)
{
  my_post_ptr post = (my_post_ptr) cinfo->post;
  JDIMENSION old_next_row, num_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
    post->buffer = (*cinfo->mem->access_virt_sarray)
	((j_common_ptr) cinfo, post->whole_image,
	 post->starting_row, post->strip_height, TRUE);
  }

  /* Upsample some data (up to a strip height's worth). */
  old_next_row = post->next_row;
  (*cinfo->upsample->upsample) (cinfo,
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &post->next_row, post->strip_height);

  /* Allow quantizer to scan new data.  No data is emitted, */
  /* but we advance out_row_ctr so outer loop can tell when we're done. */
  if (post->next_row > old_next_row) {
    num_rows = post->next_row - old_next_row;
    (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
					 (JSAMPARRAY) NULL, (int) num_rows);
    *out_row_ctr += num_rows;
  }

  /* Advance if we filled the strip. */
  if (post->next_row >= post->strip_height) {
    post->starting_row += post->strip_height;
    post->next_row = 0;
  }
}


/*
 * Process some data in the second pass of 2-pass quantization.
 */

METHODDEF(void)
post_process_2pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
  my_post_ptr post = (my_post_ptr) cinfo->post;
  JDIMENSION num_rows, max_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
    post->buffer = (*cinfo->mem->access_virt_sarray)
	((j_common_ptr) cinfo, post->whole_image,
	 post->starting_row, post->strip_height, FALSE);
  }

  /* Determine number of rows to emit. */
  num_rows = post->strip_height - post->next_row; /* available in strip */
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
  if (num_rows > max_rows)
    num_rows = max_rows;
  /* We have to check bottom of image here, can't depend on upsampler. */
  max_rows = cinfo->output_height - post->starting_row;
  if (num_rows > max_rows)
    num_rows = max_rows;

  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
		post->buffer + post->next_row, output_buf + *out_row_ctr,
		(int) num_rows);
  *out_row_ctr += num_rows;

  /* Advance if we filled the strip. */
  post->next_row += num_rows;
  if (post->next_row >= post->strip_height) {
    post->starting_row += post->strip_height;
    post->next_row = 0;
  }
}

#endif /* QUANT_2PASS_SUPPORTED */


/*
 * Initialize postprocessing controller.
 */

GLOBAL(void)
jinit_d_post_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_post_ptr post;

  post = (my_post_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_post_controller));
  cinfo->post = (struct jpeg_d_post_controller *) post;
  post->pub.start_pass = start_pass_dpost;
  post->whole_image = NULL;	/* flag for no virtual arrays */
  post->buffer = NULL;		/* flag for no strip buffer */

  /* Create the quantization buffer, if needed */
  if (cinfo->quantize_colors) {
    /* The buffer strip height is max_v_samp_factor, which is typically
     * an efficient number of rows for upsampling to return.
     * (In the presence of output rescaling, we might want to be smarter?)
     */
    post->strip_height = (JDIMENSION) cinfo->max_v_samp_factor;
    if (need_full_buffer) {
      /* Two-pass color quantization: need full-image storage. */
      /* We round up the number of rows to a multiple of the strip height. */
#ifdef QUANT_2PASS_SUPPORTED
      post->whole_image = (*cinfo->mem->request_virt_sarray)
	((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
	 cinfo->output_width * cinfo->out_color_components,
	 (JDIMENSION) jround_up((long) cinfo->output_height,
				(long) post->strip_height),
	 post->strip_height);
#else
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
#endif /* QUANT_2PASS_SUPPORTED */
    } else {
      /* One-pass color quantization: just make a strip buffer. */
      post->buffer = (*cinfo->mem->alloc_sarray)
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 cinfo->output_width * cinfo->out_color_components,
	 post->strip_height);
    }
  }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\jerror.c ===
/*
 * jerror.c
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains simple error-reporting and trace-message routines.
 * These are suitable for Unix-like systems and others where writing to
 * stderr is the right thing to do.  Many applications will want to replace
 * some or all of these routines.
 *
 * These routines are used by both the compression and decompression code.
 */

/* this is not a core library module, so it doesn't define JPEG_INTERNALS */
#include "jinclude.h"
#include "jpeglib.h"
#include "jversion.h"
#include "jerror.h"

#ifndef EXIT_FAILURE		/* define exit() codes if not provided */
#define EXIT_FAILURE  1
#endif


/*
 * Create the message string table.
 * We do this from the master message list in jerror.h by re-reading
 * jerror.h with a suitable definition for macro JMESSAGE.
 * The message table is made an external symbol just in case any applications
 * want to refer to it directly.
 */

#ifdef NEED_SHORT_EXTERNAL_NAMES
#define jpeg_std_message_table	jMsgTable
#endif

#define JMESSAGE(code,string)	string ,

const char * const jpeg_std_message_table[] = {
#include "jerror.h"
  NULL
};


/*
 * Error exit handler: must not return to caller.
 *
 * Applications may override this if they want to get control back after
 * an error.  Typically one would longjmp somewhere instead of exiting.
 * The setjmp buffer can be made a private field within an expanded error
 * handler object.  Note that the info needed to generate an error message
 * is stored in the error object, so you can generate the message now or
 * later, at your convenience.
 * You should make sure that the JPEG object is cleaned up (with jpeg_abort
 * or jpeg_destroy) at some point.
 */

METHODDEF(void)
error_exit (j_common_ptr cinfo)
{
  /* Always display the message */
  (*cinfo->err->output_message) (cinfo);

  /* Let the memory manager delete any temp files before we die */
  jpeg_destroy(cinfo);

  exit(EXIT_FAILURE);
}


/*
 * Actual output of an error or trace message.
 * Applications may override this method to send JPEG messages somewhere
 * other than stderr.
 */

METHODDEF(void)
output_message (j_common_ptr cinfo)
{
  char buffer[JMSG_LENGTH_MAX];

  /* Create the message */
  (*cinfo->err->format_message) (cinfo, buffer);

  /* Send it to stderr, adding a newline */
  fprintf(stderr, "%s\n", buffer);
}


/*
 * Decide whether to emit a trace or warning message.
 * msg_level is one of:
 *   -1: recoverable corrupt-data warning, may want to abort.
 *    0: important advisory messages (always display to user).
 *    1: first level of tracing detail.
 *    2,3,...: successively more detailed tracing messages.
 * An application might override this method if it wanted to abort on warnings
 * or change the policy about which messages to display.
 */

METHODDEF(void)
emit_message (j_common_ptr cinfo, int msg_level)
{
  struct jpeg_error_mgr * err = cinfo->err;

  if (msg_level < 0) {
    /* It's a warning message.  Since corrupt files may generate many warnings,
     * the policy implemented here is to show only the first warning,
     * unless trace_level >= 3.
     */
    if (err->num_warnings == 0 || err->trace_level >= 3)
      (*err->output_message) (cinfo);
    /* Always count warnings in num_warnings. */
    err->num_warnings++;
  } else {
    /* It's a trace message.  Show it if trace_level >= msg_level. */
    if (err->trace_level >= msg_level)
      (*err->output_message) (cinfo);
  }
}


/*
 * Format a message string for the most recent JPEG error or message.
 * The message is stored into buffer, which should be at least JMSG_LENGTH_MAX
 * characters.  Note that no '\n' character is added to the string.
 * Few applications should need to override this method.
 */

METHODDEF(void)
format_message (j_common_ptr cinfo, char * buffer)
{
  struct jpeg_error_mgr * err = cinfo->err;
  int msg_code = err->msg_code;
  const char * msgtext = NULL;
  const char * msgptr;
  char ch;
  boolean isstring;

  /* Look up message string in proper table */
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
    msgtext = err->jpeg_message_table[msg_code];
  } else if (err->addon_message_table != NULL &&
	     msg_code >= err->first_addon_message &&
	     msg_code <= err->last_addon_message) {
    msgtext = err->addon_message_table[msg_code - err->first_addon_message];
  }

  /* Defend against bogus message number */
  if (msgtext == NULL) {
    err->msg_parm.i[0] = msg_code;
    msgtext = err->jpeg_message_table[0];
  }

  /* Check for string parameter, as indicated by %s in the message text */
  isstring = FALSE;
  msgptr = msgtext;
  while ((ch = *msgptr++) != '\0') {
    if (ch == '%') {
      if (*msgptr == 's') isstring = TRUE;
      break;
    }
  }

  /* Format the message into the passed buffer */
  if (isstring)
    sprintf(buffer, msgtext, err->msg_parm.s);
  else
    sprintf(buffer, msgtext,
	    err->msg_parm.i[0], err->msg_parm.i[1],
	    err->msg_parm.i[2], err->msg_parm.i[3],
	    err->msg_parm.i[4], err->msg_parm.i[5],
	    err->msg_parm.i[6], err->msg_parm.i[7]);
}


/*
 * Reset error state variables at start of a new image.
 * This is called during compression startup to reset trace/error
 * processing to default state, without losing any application-specific
 * method pointers.  An application might possibly want to override
 * this method if it has additional error processing state.
 */

METHODDEF(void)
reset_error_mgr (j_common_ptr cinfo)
{
  cinfo->err->num_warnings = 0;
  /* trace_level is not reset since it is an application-supplied parameter */
  cinfo->err->msg_code = 0;	/* may be useful as a flag for "no error" */
}


/*
 * Fill in the standard error-handling methods in a jpeg_error_mgr object.
 * Typical call is:
 *	struct jpeg_compress_struct cinfo;
 *	struct jpeg_error_mgr err;
 *
 *	cinfo.err = jpeg_std_error(&err);
 * after which the application may override some of the methods.
 */

GLOBAL(struct jpeg_error_mgr *)
jpeg_std_error (struct jpeg_error_mgr * err)
{
  err->error_exit = error_exit;
  err->emit_message = emit_message;
  err->output_message = output_message;
  err->format_message = format_message;
  err->reset_error_mgr = reset_error_mgr;

  err->trace_level = 0;		/* default = no tracing */
  err->num_warnings = 0;	/* no warnings emitted yet */
  err->msg_code = 0;		/* may be useful as a flag for "no error" */

  /* Initialize message table pointers */
  err->jpeg_message_table = jpeg_std_message_table;
  err->last_jpeg_message = (int) JMSG_LASTMSGCODE - 1;

  err->addon_message_table = NULL;
  err->first_addon_message = 0;	/* for safety */
  err->last_addon_message = 0;

  return err;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\jfdctflt.c ===
/*
 * jfdctflt.c
 *
 * Copyright (C) 1994-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains a floating-point implementation of the
 * forward DCT (Discrete Cosine Transform).
 *
 * This implementation should be more accurate than either of the integer
 * DCT implementations.  However, it may not give the same results on all
 * machines because of differences in roundoff behavior.  Speed will depend
 * on the hardware's floating point capacity.
 *
 * A 2-D DCT can be done by 1-D DCT on each row followed by 1-D DCT
 * on each column.  Direct algorithms are also available, but they are
 * much more complex and seem not to be any faster when reduced to code.
 *
 * This implementation is based on Arai, Agui, and Nakajima's algorithm for
 * scaled DCT.  Their original paper (Trans. IEICE E-71(11):1095) is in
 * Japanese, but the algorithm is described in the Pennebaker & Mitchell
 * JPEG textbook (see REFERENCES section in file README).  The following code
 * is based directly on figure 4-8 in P&M.
 * While an 8-point DCT cannot be done in less than 11 multiplies, it is
 * possible to arrange the computation so that many of the multiplies are
 * simple scalings of the final outputs.  These multiplies can then be
 * folded into the multiplications or divisions by the JPEG quantization
 * table entries.  The AA&N method leaves only 5 multiplies and 29 adds
 * to be done in the DCT itself.
 * The primary disadvantage of this method is that with a fixed-point
 * implementation, accuracy is lost due to imprecise representation of the
 * scaled quantization values.  However, that problem does not arise if
 * we use floating point arithmetic.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */

#ifdef DCT_FLOAT_SUPPORTED


/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif


/*
 * Perform the forward DCT on one block of samples.
 */

GLOBAL(void)
jpeg_fdct_float (FAST_FLOAT * data)
{
  FAST_FLOAT tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
  FAST_FLOAT tmp10, tmp11, tmp12, tmp13;
  FAST_FLOAT z1, z2, z3, z4, z5, z11, z13;
  FAST_FLOAT *dataptr;
  int ctr;

  /* Pass 1: process rows. */

  dataptr = data;
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
    tmp0 = dataptr[0] + dataptr[7];
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];
    
    /* Even part */
    
    tmp10 = tmp0 + tmp3;	/* phase 2 */
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    
    dataptr[0] = tmp10 + tmp11; /* phase 3 */
    dataptr[4] = tmp10 - tmp11;
    
    z1 = (tmp12 + tmp13) * ((FAST_FLOAT) 0.707106781); /* c4 */
    dataptr[2] = tmp13 + z1;	/* phase 5 */
    dataptr[6] = tmp13 - z1;
    
    /* Odd part */

    tmp10 = tmp4 + tmp5;	/* phase 2 */
    tmp11 = tmp5 + tmp6;
    tmp12 = tmp6 + tmp7;

    /* The rotator is modified from fig 4-8 to avoid extra negations. */
    z5 = (tmp10 - tmp12) * ((FAST_FLOAT) 0.382683433); /* c6 */
    z2 = ((FAST_FLOAT) 0.541196100) * tmp10 + z5; /* c2-c6 */
    z4 = ((FAST_FLOAT) 1.306562965) * tmp12 + z5; /* c2+c6 */
    z3 = tmp11 * ((FAST_FLOAT) 0.707106781); /* c4 */

    z11 = tmp7 + z3;		/* phase 5 */
    z13 = tmp7 - z3;

    dataptr[5] = z13 + z2;	/* phase 6 */
    dataptr[3] = z13 - z2;
    dataptr[1] = z11 + z4;
    dataptr[7] = z11 - z4;

    dataptr += DCTSIZE;		/* advance pointer to next row */
  }

  /* Pass 2: process columns. */

  dataptr = data;
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
    tmp7 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
    tmp6 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
    tmp5 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
    tmp4 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];
    
    /* Even part */
    
    tmp10 = tmp0 + tmp3;	/* phase 2 */
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    
    dataptr[DCTSIZE*0] = tmp10 + tmp11; /* phase 3 */
    dataptr[DCTSIZE*4] = tmp10 - tmp11;
    
    z1 = (tmp12 + tmp13) * ((FAST_FLOAT) 0.707106781); /* c4 */
    dataptr[DCTSIZE*2] = tmp13 + z1; /* phase 5 */
    dataptr[DCTSIZE*6] = tmp13 - z1;
    
    /* Odd part */

    tmp10 = tmp4 + tmp5;	/* phase 2 */
    tmp11 = tmp5 + tmp6;
    tmp12 = tmp6 + tmp7;

    /* The rotator is modified from fig 4-8 to avoid extra negations. */
    z5 = (tmp10 - tmp12) * ((FAST_FLOAT) 0.382683433); /* c6 */
    z2 = ((FAST_FLOAT) 0.541196100) * tmp10 + z5; /* c2-c6 */
    z4 = ((FAST_FLOAT) 1.306562965) * tmp12 + z5; /* c2+c6 */
    z3 = tmp11 * ((FAST_FLOAT) 0.707106781); /* c4 */

    z11 = tmp7 + z3;		/* phase 5 */
    z13 = tmp7 - z3;

    dataptr[DCTSIZE*5] = z13 + z2; /* phase 6 */
    dataptr[DCTSIZE*3] = z13 - z2;
    dataptr[DCTSIZE*1] = z11 + z4;
    dataptr[DCTSIZE*7] = z11 - z4;

    dataptr++;			/* advance pointer to next column */
  }
}

#endif /* DCT_FLOAT_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\jdtrans.c ===
/*
 * jdtrans.c
 *
 * Copyright (C) 1995-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains library routines for transcoding decompression,
 * that is, reading raw DCT coefficient arrays from an input JPEG file.
 * The routines in jdapimin.c will also be needed by a transcoder.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/* Forward declarations */
LOCAL(void) transdecode_master_selection JPP((j_decompress_ptr cinfo));


/*
 * Read the coefficient arrays from a JPEG file.
 * jpeg_read_header must be completed before calling this.
 *
 * The entire image is read into a set of virtual coefficient-block arrays,
 * one per component.  The return value is a pointer to the array of
 * virtual-array descriptors.  These can be manipulated directly via the
 * JPEG memory manager, or handed off to jpeg_write_coefficients().
 * To release the memory occupied by the virtual arrays, call
 * jpeg_finish_decompress() when done with the data.
 *
 * Returns NULL if suspended.  This case need be checked only if
 * a suspending data source is used.
 */

GLOBAL(jvirt_barray_ptr *)
jpeg_read_coefficients (j_decompress_ptr cinfo)
{
  if (cinfo->global_state == DSTATE_READY) {
    /* First call: initialize active modules */
    transdecode_master_selection(cinfo);
    cinfo->global_state = DSTATE_RDCOEFS;
  } else if (cinfo->global_state != DSTATE_RDCOEFS)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  /* Absorb whole file into the coef buffer */
  for (;;) {
    int retcode;
    /* Call progress monitor hook if present */
    if (cinfo->progress != NULL)
      (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
    /* Absorb some more input */
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
    if (retcode == JPEG_SUSPENDED)
      return NULL;
    if (retcode == JPEG_REACHED_EOI)
      break;
    /* Advance progress counter if appropriate */
    if (cinfo->progress != NULL &&
	(retcode == JPEG_ROW_COMPLETED || retcode == JPEG_REACHED_SOS)) {
      if (++cinfo->progress->pass_counter >= cinfo->progress->pass_limit) {
	/* startup underestimated number of scans; ratchet up one scan */
	cinfo->progress->pass_limit += (long) cinfo->total_iMCU_rows;
      }
    }
  }
  /* Set state so that jpeg_finish_decompress does the right thing */
  cinfo->global_state = DSTATE_STOPPING;
  return cinfo->coef->coef_arrays;
}


/*
 * Master selection of decompression modules for transcoding.
 * This substitutes for jdmaster.c's initialization of the full decompressor.
 */

LOCAL(void)
transdecode_master_selection (j_decompress_ptr cinfo)
{
  /* Entropy decoding: either Huffman or arithmetic coding. */
  if (cinfo->arith_code) {
    ERREXIT(cinfo, JERR_ARITH_NOTIMPL);
  } else {
    if (cinfo->progressive_mode) {
#ifdef D_PROGRESSIVE_SUPPORTED
      jinit_phuff_decoder(cinfo);
#else
      ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
    } else
      jinit_huff_decoder(cinfo);
  }

  /* Always get a full-image coefficient buffer. */
  jinit_d_coef_controller(cinfo, TRUE);

  /* We can now tell the memory manager to allocate virtual arrays. */
  (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);

  /* Initialize input side of decompressor to consume first scan. */
  (*cinfo->inputctl->start_input_pass) (cinfo);

  /* Initialize progress monitoring. */
  if (cinfo->progress != NULL) {
    int nscans;
    /* Estimate number of scans to set pass_limit. */
    if (cinfo->progressive_mode) {
      /* Arbitrarily estimate 2 interleaved DC scans + 3 AC scans/component. */
      nscans = 2 + 3 * cinfo->num_components;
    } else if (cinfo->inputctl->has_multiple_scans) {
      /* For a nonprogressive multiscan file, estimate 1 scan per component. */
      nscans = cinfo->num_components;
    } else {
      nscans = 1;
    }
    cinfo->progress->pass_counter = 0L;
    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
    cinfo->progress->completed_passes = 0;
    cinfo->progress->total_passes = 1;
  }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\jerror.h ===
/*
 * jerror.h
 *
 * Copyright (C) 1994-1995, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file defines the error and message codes for the JPEG library.
 * Edit this file to add new codes, or to translate the message strings to
 * some other language.
 * A set of error-reporting macros are defined too.  Some applications using
 * the JPEG library may wish to include this file to get the error codes
 * and/or the macros.
 */

/*
 * To define the enum list of message codes, include this file without
 * defining macro JMESSAGE.  To create a message string table, include it
 * again with a suitable JMESSAGE definition (see jerror.c for an example).
 */
#ifndef JMESSAGE
#ifndef JERROR_H
/* First time through, define the enum list */
#define JMAKE_ENUM_LIST
#else
/* Repeated inclusions of this file are no-ops unless JMESSAGE is defined */
#define JMESSAGE(code,string)
#endif /* JERROR_H */
#endif /* JMESSAGE */

#ifdef JMAKE_ENUM_LIST

typedef enum {

#define JMESSAGE(code,string)	code ,

#endif /* JMAKE_ENUM_LIST */

JMESSAGE(JMSG_NOMESSAGE, "Bogus message code %d") /* Must be first entry! */

/* For maintenance convenience, list is alphabetical by message code name */
JMESSAGE(JERR_ARITH_NOTIMPL,
	 "Sorry, there are legal restrictions on arithmetic coding")
JMESSAGE(JERR_BAD_ALIGN_TYPE, "ALIGN_TYPE is wrong, please fix")
JMESSAGE(JERR_BAD_ALLOC_CHUNK, "MAX_ALLOC_CHUNK is wrong, please fix")
JMESSAGE(JERR_BAD_BUFFER_MODE, "Bogus buffer control mode")
JMESSAGE(JERR_BAD_COMPONENT_ID, "Invalid component ID %d in SOS")
JMESSAGE(JERR_BAD_DCTSIZE, "IDCT output block size %d not supported")
JMESSAGE(JERR_BAD_IN_COLORSPACE, "Bogus input colorspace")
JMESSAGE(JERR_BAD_J_COLORSPACE, "Bogus JPEG colorspace")
JMESSAGE(JERR_BAD_LENGTH, "Bogus marker length")
JMESSAGE(JERR_BAD_LIB_VERSION,
	 "Wrong JPEG library version: library is %d, caller expects %d")
JMESSAGE(JERR_BAD_MCU_SIZE, "Sampling factors too large for interleaved scan")
JMESSAGE(JERR_BAD_POOL_ID, "Invalid memory pool code %d")
JMESSAGE(JERR_BAD_PRECISION, "Unsupported JPEG data precision %d")
JMESSAGE(JERR_BAD_PROGRESSION,
	 "Invalid progressive parameters Ss=%d Se=%d Ah=%d Al=%d")
JMESSAGE(JERR_BAD_PROG_SCRIPT,
	 "Invalid progressive parameters at scan script entry %d")
JMESSAGE(JERR_BAD_SAMPLING, "Bogus sampling factors")
JMESSAGE(JERR_BAD_SCAN_SCRIPT, "Invalid scan script at entry %d")
JMESSAGE(JERR_BAD_STATE, "Improper call to JPEG library in state %d")
JMESSAGE(JERR_BAD_STRUCT_SIZE,
	 "JPEG parameter struct mismatch: library thinks size is %u, caller expects %u")
JMESSAGE(JERR_BAD_VIRTUAL_ACCESS, "Bogus virtual array access")
JMESSAGE(JERR_BUFFER_SIZE, "Buffer passed to JPEG library is too small")
JMESSAGE(JERR_CANT_SUSPEND, "Suspension not allowed here")
JMESSAGE(JERR_CCIR601_NOTIMPL, "CCIR601 sampling not implemented yet")
JMESSAGE(JERR_COMPONENT_COUNT, "Too many color components: %d, max %d")
JMESSAGE(JERR_CONVERSION_NOTIMPL, "Unsupported color conversion request")
JMESSAGE(JERR_DAC_INDEX, "Bogus DAC index %d")
JMESSAGE(JERR_DAC_VALUE, "Bogus DAC value 0x%x")
JMESSAGE(JERR_DHT_COUNTS, "Bogus DHT counts")
JMESSAGE(JERR_DHT_INDEX, "Bogus DHT index %d")
JMESSAGE(JERR_DQT_INDEX, "Bogus DQT index %d")
JMESSAGE(JERR_EMPTY_IMAGE, "Empty JPEG image (DNL not supported)")
JMESSAGE(JERR_EMS_READ, "Read from EMS failed")
JMESSAGE(JERR_EMS_WRITE, "Write to EMS failed")
JMESSAGE(JERR_EOI_EXPECTED, "Didn't expect more than one scan")
JMESSAGE(JERR_FILE_READ, "Input file read error")
JMESSAGE(JERR_FILE_WRITE, "Output file write error --- out of disk space?")
JMESSAGE(JERR_FRACT_SAMPLE_NOTIMPL, "Fractional sampling not implemented yet")
JMESSAGE(JERR_HUFF_CLEN_OVERFLOW, "Huffman code size table overflow")
JMESSAGE(JERR_HUFF_MISSING_CODE, "Missing Huffman code table entry")
JMESSAGE(JERR_IMAGE_TOO_BIG, "Maximum supported image dimension is %u pixels")
JMESSAGE(JERR_INPUT_EMPTY, "Empty input file")
JMESSAGE(JERR_INPUT_EOF, "Premature end of input file")
JMESSAGE(JERR_MISMATCHED_QUANT_TABLE,
	 "Cannot transcode due to multiple use of quantization table %d")
JMESSAGE(JERR_MISSING_DATA, "Scan script does not transmit all data")
JMESSAGE(JERR_MODE_CHANGE, "Invalid color quantization mode change")
JMESSAGE(JERR_NOTIMPL, "Not implemented yet")
JMESSAGE(JERR_NOT_COMPILED, "Requested feature was omitted at compile time")
JMESSAGE(JERR_NO_BACKING_STORE, "Backing store not supported")
JMESSAGE(JERR_NO_HUFF_TABLE, "Huffman table 0x%02x was not defined")
JMESSAGE(JERR_NO_IMAGE, "JPEG datastream contains no image")
JMESSAGE(JERR_NO_QUANT_TABLE, "Quantization table 0x%02x was not defined")
JMESSAGE(JERR_NO_SOI, "Not a JPEG file: starts with 0x%02x 0x%02x")
JMESSAGE(JERR_OUT_OF_MEMORY, "Insufficient memory (case %d)")
JMESSAGE(JERR_QUANT_COMPONENTS,
	 "Cannot quantize more than %d color components")
JMESSAGE(JERR_QUANT_FEW_COLORS, "Cannot quantize to fewer than %d colors")
JMESSAGE(JERR_QUANT_MANY_COLORS, "Cannot quantize to more than %d colors")
JMESSAGE(JERR_SOF_DUPLICATE, "Invalid JPEG file structure: two SOF markers")
JMESSAGE(JERR_SOF_NO_SOS, "Invalid JPEG file structure: missing SOS marker")
JMESSAGE(JERR_SOF_UNSUPPORTED, "Unsupported JPEG process: SOF type 0x%02x")
JMESSAGE(JERR_SOI_DUPLICATE, "Invalid JPEG file structure: two SOI markers")
JMESSAGE(JERR_SOS_NO_SOF, "Invalid JPEG file structure: SOS before SOF")
JMESSAGE(JERR_TFILE_CREATE, "Failed to create temporary file %s")
JMESSAGE(JERR_TFILE_READ, "Read failed on temporary file")
JMESSAGE(JERR_TFILE_SEEK, "Seek failed on temporary file")
JMESSAGE(JERR_TFILE_WRITE,
	 "Write failed on temporary file --- out of disk space?")
JMESSAGE(JERR_TOO_LITTLE_DATA, "Application transferred too few scanlines")
JMESSAGE(JERR_UNKNOWN_MARKER, "Unsupported marker type 0x%02x")
JMESSAGE(JERR_VIRTUAL_BUG, "Virtual array controller messed up")
JMESSAGE(JERR_WIDTH_OVERFLOW, "Image too wide for this implementation")
JMESSAGE(JERR_XMS_READ, "Read from XMS failed")
JMESSAGE(JERR_XMS_WRITE, "Write to XMS failed")
JMESSAGE(JMSG_COPYRIGHT, JCOPYRIGHT)
JMESSAGE(JMSG_VERSION, JVERSION)
JMESSAGE(JTRC_16BIT_TABLES,
	 "Caution: quantization tables are too coarse for baseline JPEG")
JMESSAGE(JTRC_ADOBE,
	 "Adobe APP14 marker: version %d, flags 0x%04x 0x%04x, transform %d")
JMESSAGE(JTRC_APP0, "Unknown APP0 marker (not JFIF), length %u")
JMESSAGE(JTRC_APP14, "Unknown APP14 marker (not Adobe), length %u")
JMESSAGE(JTRC_DAC, "Define Arithmetic Table 0x%02x: 0x%02x")
JMESSAGE(JTRC_DHT, "Define Huffman Table 0x%02x")
JMESSAGE(JTRC_DQT, "Define Quantization Table %d  precision %d")
JMESSAGE(JTRC_DRI, "Define Restart Interval %u")
JMESSAGE(JTRC_EMS_CLOSE, "Freed EMS handle %u")
JMESSAGE(JTRC_EMS_OPEN, "Obtained EMS handle %u")
JMESSAGE(JTRC_EOI, "End Of Image")
JMESSAGE(JTRC_HUFFBITS, "        %3d %3d %3d %3d %3d %3d %3d %3d")
JMESSAGE(JTRC_JFIF, "JFIF APP0 marker, density %dx%d  %d")
JMESSAGE(JTRC_JFIF_BADTHUMBNAILSIZE,
	 "Warning: thumbnail image size does not match data length %u")
JMESSAGE(JTRC_JFIF_MINOR, "Unknown JFIF minor revision number %d.%02d")
JMESSAGE(JTRC_JFIF_THUMBNAIL, "    with %d x %d thumbnail image")
JMESSAGE(JTRC_MISC_MARKER, "Skipping marker 0x%02x, length %u")
JMESSAGE(JTRC_PARMLESS_MARKER, "Unexpected marker 0x%02x")
JMESSAGE(JTRC_QUANTVALS, "        %4u %4u %4u %4u %4u %4u %4u %4u")
JMESSAGE(JTRC_QUANT_3_NCOLORS, "Quantizing to %d = %d*%d*%d colors")
JMESSAGE(JTRC_QUANT_NCOLORS, "Quantizing to %d colors")
JMESSAGE(JTRC_QUANT_SELECTED, "Selected %d colors for quantization")
JMESSAGE(JTRC_RECOVERY_ACTION, "At marker 0x%02x, recovery action %d")
JMESSAGE(JTRC_RST, "RST%d")
JMESSAGE(JTRC_SMOOTH_NOTIMPL,
	 "Smoothing not supported with nonstandard sampling ratios")
JMESSAGE(JTRC_SOF, "Start Of Frame 0x%02x: width=%u, height=%u, components=%d")
JMESSAGE(JTRC_SOF_COMPONENT, "    Component %d: %dhx%dv q=%d")
JMESSAGE(JTRC_SOI, "Start of Image")
JMESSAGE(JTRC_SOS, "Start Of Scan: %d components")
JMESSAGE(JTRC_SOS_COMPONENT, "    Component %d: dc=%d ac=%d")
JMESSAGE(JTRC_SOS_PARAMS, "  Ss=%d, Se=%d, Ah=%d, Al=%d")
JMESSAGE(JTRC_TFILE_CLOSE, "Closed temporary file %s")
JMESSAGE(JTRC_TFILE_OPEN, "Opened temporary file %s")
JMESSAGE(JTRC_UNKNOWN_IDS,
	 "Unrecognized component IDs %d %d %d, assuming YCbCr")
JMESSAGE(JTRC_XMS_CLOSE, "Freed XMS handle %u")
JMESSAGE(JTRC_XMS_OPEN, "Obtained XMS handle %u")
JMESSAGE(JWRN_ADOBE_XFORM, "Unknown Adobe color transform code %d")
JMESSAGE(JWRN_BOGUS_PROGRESSION,
	 "Inconsistent progression sequence for component %d coefficient %d")
JMESSAGE(JWRN_EXTRANEOUS_DATA,
	 "Corrupt JPEG data: %u extraneous bytes before marker 0x%02x")
JMESSAGE(JWRN_HIT_MARKER, "Corrupt JPEG data: premature end of data segment")
JMESSAGE(JWRN_HUFF_BAD_CODE, "Corrupt JPEG data: bad Huffman code")
JMESSAGE(JWRN_JFIF_MAJOR, "Warning: unknown JFIF revision number %d.%02d")
JMESSAGE(JWRN_JPEG_EOF, "Premature end of JPEG file")
JMESSAGE(JWRN_MUST_RESYNC,
	 "Corrupt JPEG data: found marker 0x%02x instead of RST%d")
JMESSAGE(JWRN_NOT_SEQUENTIAL, "Invalid SOS parameters for sequential JPEG")
JMESSAGE(JWRN_TOO_MUCH_DATA, "Application transferred too many scanlines")

#ifdef JMAKE_ENUM_LIST

  JMSG_LASTMSGCODE
} J_MESSAGE_CODE;

#undef JMAKE_ENUM_LIST
#endif /* JMAKE_ENUM_LIST */

/* Zap JMESSAGE macro so that future re-inclusions do nothing by default */
#undef JMESSAGE


#ifndef JERROR_H
#define JERROR_H

/* Macros to simplify using the error and trace message stuff */
/* The first parameter is either type of cinfo pointer */

/* Fatal errors (print message and exit) */
#define ERREXIT(cinfo,code)  \
  ((cinfo)->err->msg_code = (code), \
   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))
#define ERREXIT1(cinfo,code,p1)  \
  ((cinfo)->err->msg_code = (code), \
   (cinfo)->err->msg_parm.i[0] = (p1), \
   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))
#define ERREXIT2(cinfo,code,p1,p2)  \
  ((cinfo)->err->msg_code = (code), \
   (cinfo)->err->msg_parm.i[0] = (p1), \
   (cinfo)->err->msg_parm.i[1] = (p2), \
   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))
#define ERREXIT3(cinfo,code,p1,p2,p3)  \
  ((cinfo)->err->msg_code = (code), \
   (cinfo)->err->msg_parm.i[0] = (p1), \
   (cinfo)->err->msg_parm.i[1] = (p2), \
   (cinfo)->err->msg_parm.i[2] = (p3), \
   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))
#define ERREXIT4(cinfo,code,p1,p2,p3,p4)  \
  ((cinfo)->err->msg_code = (code), \
   (cinfo)->err->msg_parm.i[0] = (p1), \
   (cinfo)->err->msg_parm.i[1] = (p2), \
   (cinfo)->err->msg_parm.i[2] = (p3), \
   (cinfo)->err->msg_parm.i[3] = (p4), \
   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))
#define ERREXITS(cinfo,code,str)  \
  ((cinfo)->err->msg_code = (code), \
   strncpy((cinfo)->err->msg_parm.s, (str), JMSG_STR_PARM_MAX), \
   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))

#define MAKESTMT(stuff)		do { stuff } while (0)

/* Nonfatal errors (we can keep going, but the data is probably corrupt) */
#define WARNMS(cinfo,code)  \
  ((cinfo)->err->msg_code = (code), \
   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), -1))
#define WARNMS1(cinfo,code,p1)  \
  ((cinfo)->err->msg_code = (code), \
   (cinfo)->err->msg_parm.i[0] = (p1), \
   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), -1))
#define WARNMS2(cinfo,code,p1,p2)  \
  ((cinfo)->err->msg_code = (code), \
   (cinfo)->err->msg_parm.i[0] = (p1), \
   (cinfo)->err->msg_parm.i[1] = (p2), \
   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), -1))

/* Informational/debugging messages */
#define TRACEMS(cinfo,lvl,code)  \
  ((cinfo)->err->msg_code = (code), \
   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)))
#define TRACEMS1(cinfo,lvl,code,p1)  \
  ((cinfo)->err->msg_code = (code), \
   (cinfo)->err->msg_parm.i[0] = (p1), \
   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)))
#define TRACEMS2(cinfo,lvl,code,p1,p2)  \
  ((cinfo)->err->msg_code = (code), \
   (cinfo)->err->msg_parm.i[0] = (p1), \
   (cinfo)->err->msg_parm.i[1] = (p2), \
   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)))
#define TRACEMS3(cinfo,lvl,code,p1,p2,p3)  \
  MAKESTMT(int * _mp = (cinfo)->err->msg_parm.i; \
	   _mp[0] = (p1); _mp[1] = (p2); _mp[2] = (p3); \
	   (cinfo)->err->msg_code = (code); \
	   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)); )
#define TRACEMS4(cinfo,lvl,code,p1,p2,p3,p4)  \
  MAKESTMT(int * _mp = (cinfo)->err->msg_parm.i; \
	   _mp[0] = (p1); _mp[1] = (p2); _mp[2] = (p3); _mp[3] = (p4); \
	   (cinfo)->err->msg_code = (code); \
	   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)); )
#define TRACEMS8(cinfo,lvl,code,p1,p2,p3,p4,p5,p6,p7,p8)  \
  MAKESTMT(int * _mp = (cinfo)->err->msg_parm.i; \
	   _mp[0] = (p1); _mp[1] = (p2); _mp[2] = (p3); _mp[3] = (p4); \
	   _mp[4] = (p5); _mp[5] = (p6); _mp[6] = (p7); _mp[7] = (p8); \
	   (cinfo)->err->msg_code = (code); \
	   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)); )
#define TRACEMSS(cinfo,lvl,code,str)  \
  ((cinfo)->err->msg_code = (code), \
   strncpy((cinfo)->err->msg_parm.s, (str), JMSG_STR_PARM_MAX), \
   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)))

#endif /* JERROR_H */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\jinclude.h ===
/*
 * jinclude.h
 *
 * Copyright (C) 1991-1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file exists to provide a single place to fix any problems with
 * including the wrong system include files.  (Common problems are taken
 * care of by the standard jconfig symbols, but on really weird systems
 * you may have to edit this file.)
 *
 * NOTE: this file is NOT intended to be included by applications using the
 * JPEG library.  Most applications need only include jpeglib.h.
 */


/* Include auto-config file to find out which system include files we need. */

#include "jconfig.h"		/* auto configuration options */
#define JCONFIG_INCLUDED	/* so that jpeglib.h doesn't do it again */

/*
 * We need the NULL macro and size_t typedef.
 * On an ANSI-conforming system it is sufficient to include <stddef.h>.
 * Otherwise, we get them from <stdlib.h> or <stdio.h>; we may have to
 * pull in <sys/types.h> as well.
 * Note that the core JPEG library does not require <stdio.h>;
 * only the default error handler and data source/destination modules do.
 * But we must pull it in because of the references to FILE in jpeglib.h.
 * You can remove those references if you want to compile without <stdio.h>.
 */

#ifdef HAVE_STDDEF_H
#include <stddef.h>
#endif

#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif

#ifdef NEED_SYS_TYPES_H
#include <sys/types.h>
#endif

#include <stdio.h>

/*
 * We need memory copying and zeroing functions, plus strncpy().
 * ANSI and System V implementations declare these in <string.h>.
 * BSD doesn't have the mem() functions, but it does have bcopy()/bzero().
 * Some systems may declare memset and memcpy in <memory.h>.
 *
 * NOTE: we assume the size parameters to these functions are of type size_t.
 * Change the casts in these macros if not!
 */

#ifdef NEED_BSD_STRINGS

#include <strings.h>
#define MEMZERO(target,size)	bzero((void *)(target), (size_t)(size))
#define MEMCOPY(dest,src,size)	bcopy((const void *)(src), (void *)(dest), (size_t)(size))

#else /* not BSD, assume ANSI/SysV string lib */

#include <string.h>
#define MEMZERO(target,size)	memset((void *)(target), 0, (size_t)(size))
#define MEMCOPY(dest,src,size)	memcpy((void *)(dest), (const void *)(src), (size_t)(size))

#endif

/*
 * In ANSI C, and indeed any rational implementation, size_t is also the
 * type returned by sizeof().  However, it seems there are some irrational
 * implementations out there, in which sizeof() returns an int even though
 * size_t is defined as long or unsigned long.  To ensure consistent results
 * we always use this SIZEOF() macro in place of using sizeof() directly.
 */

#define SIZEOF(object)	((size_t) sizeof(object))

/*
 * The modules that use fread() and fwrite() always invoke them through
 * these macros.  On some systems you may need to twiddle the argument casts.
 * CAUTION: argument order is different from underlying functions!
 */

#define JFREAD(file,buf,sizeofbuf)  \
  ((size_t) fread((void *) (buf), (size_t) 1, (size_t) (sizeofbuf), (file)))
#define JFWRITE(file,buf,sizeofbuf)  \
  ((size_t) fwrite((const void *) (buf), (size_t) 1, (size_t) (sizeofbuf), (file)))
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\jidctflt.c ===
/*
 * jidctflt.c
 *
 * Copyright (C) 1994-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains a floating-point implementation of the
 * inverse DCT (Discrete Cosine Transform).  In the IJG code, this routine
 * must also perform dequantization of the input coefficients.
 *
 * This implementation should be more accurate than either of the integer
 * IDCT implementations.  However, it may not give the same results on all
 * machines because of differences in roundoff behavior.  Speed will depend
 * on the hardware's floating point capacity.
 *
 * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT
 * on each row (or vice versa, but it's more convenient to emit a row at
 * a time).  Direct algorithms are also available, but they are much more
 * complex and seem not to be any faster when reduced to code.
 *
 * This implementation is based on Arai, Agui, and Nakajima's algorithm for
 * scaled DCT.  Their original paper (Trans. IEICE E-71(11):1095) is in
 * Japanese, but the algorithm is described in the Pennebaker & Mitchell
 * JPEG textbook (see REFERENCES section in file README).  The following code
 * is based directly on figure 4-8 in P&M.
 * While an 8-point DCT cannot be done in less than 11 multiplies, it is
 * possible to arrange the computation so that many of the multiplies are
 * simple scalings of the final outputs.  These multiplies can then be
 * folded into the multiplications or divisions by the JPEG quantization
 * table entries.  The AA&N method leaves only 5 multiplies and 29 adds
 * to be done in the DCT itself.
 * The primary disadvantage of this method is that with a fixed-point
 * implementation, accuracy is lost due to imprecise representation of the
 * scaled quantization values.  However, that problem does not arise if
 * we use floating point arithmetic.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */

#ifdef DCT_FLOAT_SUPPORTED


/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif


/* Dequantize a coefficient by multiplying it by the multiplier-table
 * entry; produce a float result.
 */

#define DEQUANTIZE(coef,quantval)  (((FAST_FLOAT) (coef)) * (quantval))


/*
 * Perform dequantization and inverse DCT on one block of coefficients.
 */

GLOBAL(void)
jpeg_idct_float (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
  FAST_FLOAT tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
  FAST_FLOAT tmp10, tmp11, tmp12, tmp13;
  FAST_FLOAT z5, z10, z11, z12, z13;
  JCOEFPTR inptr;
  FLOAT_MULT_TYPE * quantptr;
  FAST_FLOAT * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  int ctr;
  FAST_FLOAT workspace[DCTSIZE2]; /* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (FLOAT_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
    /* Due to quantization, we will usually find that many of the input
     * coefficients are zero, especially the AC terms.  We can exploit this
     * by short-circuiting the IDCT calculation for any column in which all
     * the AC terms are zero.  In that case each output is equal to the
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    
    if ((inptr[DCTSIZE*1] | inptr[DCTSIZE*2] | inptr[DCTSIZE*3] |
	 inptr[DCTSIZE*4] | inptr[DCTSIZE*5] | inptr[DCTSIZE*6] |
	 inptr[DCTSIZE*7]) == 0) {
      /* AC terms all zero */
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
      
      wsptr[DCTSIZE*0] = dcval;
      wsptr[DCTSIZE*1] = dcval;
      wsptr[DCTSIZE*2] = dcval;
      wsptr[DCTSIZE*3] = dcval;
      wsptr[DCTSIZE*4] = dcval;
      wsptr[DCTSIZE*5] = dcval;
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;
      
      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
      continue;
    }
    
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp10 = tmp0 + tmp2;	/* phase 3 */
    tmp11 = tmp0 - tmp2;

    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */

    tmp0 = tmp10 + tmp13;	/* phase 2 */
    tmp3 = tmp10 - tmp13;
    tmp1 = tmp11 + tmp12;
    tmp2 = tmp11 - tmp12;
    
    /* Odd part */

    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    z13 = tmp6 + tmp5;		/* phase 6 */
    z10 = tmp6 - tmp5;
    z11 = tmp4 + tmp7;
    z12 = tmp4 - tmp7;

    tmp7 = z11 + z13;		/* phase 5 */
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = ((FAST_FLOAT) 1.082392200) * z12 - z5; /* 2*(c2-c6) */
    tmp12 = ((FAST_FLOAT) -2.613125930) * z10 + z5; /* -2*(c2+c6) */

    tmp6 = tmp12 - tmp7;	/* phase 2 */
    tmp5 = tmp11 - tmp6;
    tmp4 = tmp10 + tmp5;

    wsptr[DCTSIZE*0] = tmp0 + tmp7;
    wsptr[DCTSIZE*7] = tmp0 - tmp7;
    wsptr[DCTSIZE*1] = tmp1 + tmp6;
    wsptr[DCTSIZE*6] = tmp1 - tmp6;
    wsptr[DCTSIZE*2] = tmp2 + tmp5;
    wsptr[DCTSIZE*5] = tmp2 - tmp5;
    wsptr[DCTSIZE*4] = tmp3 + tmp4;
    wsptr[DCTSIZE*3] = tmp3 - tmp4;

    inptr++;			/* advance pointers to next column */
    quantptr++;
    wsptr++;
  }
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3. */

  wsptr = workspace;
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
    /* Rows of zeroes can be exploited in the same way as we did with columns.
     * However, the column calculation has created many nonzero AC terms, so
     * the simplification applies less often (typically 5% to 10% of the time).
     * And testing floats for zero is relatively expensive, so we don't bother.
     */
    
    /* Even part */

    tmp10 = wsptr[0] + wsptr[4];
    tmp11 = wsptr[0] - wsptr[4];

    tmp13 = wsptr[2] + wsptr[6];
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;

    tmp0 = tmp10 + tmp13;
    tmp3 = tmp10 - tmp13;
    tmp1 = tmp11 + tmp12;
    tmp2 = tmp11 - tmp12;

    /* Odd part */

    z13 = wsptr[5] + wsptr[3];
    z10 = wsptr[5] - wsptr[3];
    z11 = wsptr[1] + wsptr[7];
    z12 = wsptr[1] - wsptr[7];

    tmp7 = z11 + z13;
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = ((FAST_FLOAT) 1.082392200) * z12 - z5; /* 2*(c2-c6) */
    tmp12 = ((FAST_FLOAT) -2.613125930) * z10 + z5; /* -2*(c2+c6) */

    tmp6 = tmp12 - tmp7;
    tmp5 = tmp11 - tmp6;
    tmp4 = tmp10 + tmp5;

    /* Final output stage: scale down by a factor of 8 and range-limit */

    outptr[0] = range_limit[(int) DESCALE((INT32) (tmp0 + tmp7), 3)
			    & RANGE_MASK];
    outptr[7] = range_limit[(int) DESCALE((INT32) (tmp0 - tmp7), 3)
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) DESCALE((INT32) (tmp1 + tmp6), 3)
			    & RANGE_MASK];
    outptr[6] = range_limit[(int) DESCALE((INT32) (tmp1 - tmp6), 3)
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) DESCALE((INT32) (tmp2 + tmp5), 3)
			    & RANGE_MASK];
    outptr[5] = range_limit[(int) DESCALE((INT32) (tmp2 - tmp5), 3)
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) DESCALE((INT32) (tmp3 + tmp4), 3)
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) DESCALE((INT32) (tmp3 - tmp4), 3)
			    & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}

#endif /* DCT_FLOAT_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\jfdctfst.c ===
/*
 * jfdctfst.c
 *
 * Copyright (C) 1994-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains a fast, not so accurate integer implementation of the
 * forward DCT (Discrete Cosine Transform).
 *
 * A 2-D DCT can be done by 1-D DCT on each row followed by 1-D DCT
 * on each column.  Direct algorithms are also available, but they are
 * much more complex and seem not to be any faster when reduced to code.
 *
 * This implementation is based on Arai, Agui, and Nakajima's algorithm for
 * scaled DCT.  Their original paper (Trans. IEICE E-71(11):1095) is in
 * Japanese, but the algorithm is described in the Pennebaker & Mitchell
 * JPEG textbook (see REFERENCES section in file README).  The following code
 * is based directly on figure 4-8 in P&M.
 * While an 8-point DCT cannot be done in less than 11 multiplies, it is
 * possible to arrange the computation so that many of the multiplies are
 * simple scalings of the final outputs.  These multiplies can then be
 * folded into the multiplications or divisions by the JPEG quantization
 * table entries.  The AA&N method leaves only 5 multiplies and 29 adds
 * to be done in the DCT itself.
 * The primary disadvantage of this method is that with fixed-point math,
 * accuracy is lost due to imprecise representation of the scaled
 * quantization values.  The smaller the quantization table entry, the less
 * precise the scaled value, so this implementation does worse with high-
 * quality-setting files than with low-quality ones.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */

#ifdef DCT_IFAST_SUPPORTED


/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif


/* Scaling decisions are generally the same as in the LL&M algorithm;
 * see jfdctint.c for more details.  However, we choose to descale
 * (right shift) multiplication products as soon as they are formed,
 * rather than carrying additional fractional bits into subsequent additions.
 * This compromises accuracy slightly, but it lets us save a few shifts.
 * More importantly, 16-bit arithmetic is then adequate (for 8-bit samples)
 * everywhere except in the multiplications proper; this saves a good deal
 * of work on 16-bit-int machines.
 *
 * Again to save a few shifts, the intermediate results between pass 1 and
 * pass 2 are not upscaled, but are represented only to integral precision.
 *
 * A final compromise is to represent the multiplicative constants to only
 * 8 fractional bits, rather than 13.  This saves some shifting work on some
 * machines, and may also reduce the cost of multiplication (since there
 * are fewer one-bits in the constants).
 */

#define CONST_BITS  8


/* Some C compilers fail to reduce "FIX(constant)" at compile time, thus
 * causing a lot of useless floating-point operations at run time.
 * To get around this we use the following pre-calculated constants.
 * If you change CONST_BITS you may want to add appropriate values.
 * (With a reasonable C compiler, you can just rely on the FIX() macro...)
 */

#if CONST_BITS == 8
#define FIX_0_382683433  ((INT32)   98)		/* FIX(0.382683433) */
#define FIX_0_541196100  ((INT32)  139)		/* FIX(0.541196100) */
#define FIX_0_707106781  ((INT32)  181)		/* FIX(0.707106781) */
#define FIX_1_306562965  ((INT32)  334)		/* FIX(1.306562965) */
#else
#define FIX_0_382683433  FIX(0.382683433)
#define FIX_0_541196100  FIX(0.541196100)
#define FIX_0_707106781  FIX(0.707106781)
#define FIX_1_306562965  FIX(1.306562965)
#endif


/* We can gain a little more speed, with a further compromise in accuracy,
 * by omitting the addition in a descaling shift.  This yields an incorrectly
 * rounded result half the time...
 */

#ifndef USE_ACCURATE_ROUNDING
#undef DESCALE
#define DESCALE(x,n)  RIGHT_SHIFT(x, n)
#endif


/* Multiply a DCTELEM variable by an INT32 constant, and immediately
 * descale to yield a DCTELEM result.
 */

#define MULTIPLY(var,const)  ((DCTELEM) DESCALE((var) * (const), CONST_BITS))


/*
 * Perform the forward DCT on one block of samples.
 */

GLOBAL(void)
jpeg_fdct_ifast (DCTELEM * data)
{
  DCTELEM tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
  DCTELEM tmp10, tmp11, tmp12, tmp13;
  DCTELEM z1, z2, z3, z4, z5, z11, z13;
  DCTELEM *dataptr;
  int ctr;
  SHIFT_TEMPS

  /* Pass 1: process rows. */

  dataptr = data;
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
    tmp0 = dataptr[0] + dataptr[7];
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];
    
    /* Even part */
    
    tmp10 = tmp0 + tmp3;	/* phase 2 */
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    
    dataptr[0] = tmp10 + tmp11; /* phase 3 */
    dataptr[4] = tmp10 - tmp11;
    
    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_707106781); /* c4 */
    dataptr[2] = tmp13 + z1;	/* phase 5 */
    dataptr[6] = tmp13 - z1;
    
    /* Odd part */

    tmp10 = tmp4 + tmp5;	/* phase 2 */
    tmp11 = tmp5 + tmp6;
    tmp12 = tmp6 + tmp7;

    /* The rotator is modified from fig 4-8 to avoid extra negations. */
    z5 = MULTIPLY(tmp10 - tmp12, FIX_0_382683433); /* c6 */
    z2 = MULTIPLY(tmp10, FIX_0_541196100) + z5; /* c2-c6 */
    z4 = MULTIPLY(tmp12, FIX_1_306562965) + z5; /* c2+c6 */
    z3 = MULTIPLY(tmp11, FIX_0_707106781); /* c4 */

    z11 = tmp7 + z3;		/* phase 5 */
    z13 = tmp7 - z3;

    dataptr[5] = z13 + z2;	/* phase 6 */
    dataptr[3] = z13 - z2;
    dataptr[1] = z11 + z4;
    dataptr[7] = z11 - z4;

    dataptr += DCTSIZE;		/* advance pointer to next row */
  }

  /* Pass 2: process columns. */

  dataptr = data;
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
    tmp7 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
    tmp6 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
    tmp5 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
    tmp4 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];
    
    /* Even part */
    
    tmp10 = tmp0 + tmp3;	/* phase 2 */
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    
    dataptr[DCTSIZE*0] = tmp10 + tmp11; /* phase 3 */
    dataptr[DCTSIZE*4] = tmp10 - tmp11;
    
    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_707106781); /* c4 */
    dataptr[DCTSIZE*2] = tmp13 + z1; /* phase 5 */
    dataptr[DCTSIZE*6] = tmp13 - z1;
    
    /* Odd part */

    tmp10 = tmp4 + tmp5;	/* phase 2 */
    tmp11 = tmp5 + tmp6;
    tmp12 = tmp6 + tmp7;

    /* The rotator is modified from fig 4-8 to avoid extra negations. */
    z5 = MULTIPLY(tmp10 - tmp12, FIX_0_382683433); /* c6 */
    z2 = MULTIPLY(tmp10, FIX_0_541196100) + z5; /* c2-c6 */
    z4 = MULTIPLY(tmp12, FIX_1_306562965) + z5; /* c2+c6 */
    z3 = MULTIPLY(tmp11, FIX_0_707106781); /* c4 */

    z11 = tmp7 + z3;		/* phase 5 */
    z13 = tmp7 - z3;

    dataptr[DCTSIZE*5] = z13 + z2; /* phase 6 */
    dataptr[DCTSIZE*3] = z13 - z2;
    dataptr[DCTSIZE*1] = z11 + z4;
    dataptr[DCTSIZE*7] = z11 - z4;

    dataptr++;			/* advance pointer to next column */
  }
}

#endif /* DCT_IFAST_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\jidctfst.c ===
/*
 * jidctfst.c
 *
 * Copyright (C) 1994-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains a fast, not so accurate integer implementation of the
 * inverse DCT (Discrete Cosine Transform).  In the IJG code, this routine
 * must also perform dequantization of the input coefficients.
 *
 * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT
 * on each row (or vice versa, but it's more convenient to emit a row at
 * a time).  Direct algorithms are also available, but they are much more
 * complex and seem not to be any faster when reduced to code.
 *
 * This implementation is based on Arai, Agui, and Nakajima's algorithm for
 * scaled DCT.  Their original paper (Trans. IEICE E-71(11):1095) is in
 * Japanese, but the algorithm is described in the Pennebaker & Mitchell
 * JPEG textbook (see REFERENCES section in file README).  The following code
 * is based directly on figure 4-8 in P&M.
 * While an 8-point DCT cannot be done in less than 11 multiplies, it is
 * possible to arrange the computation so that many of the multiplies are
 * simple scalings of the final outputs.  These multiplies can then be
 * folded into the multiplications or divisions by the JPEG quantization
 * table entries.  The AA&N method leaves only 5 multiplies and 29 adds
 * to be done in the DCT itself.
 * The primary disadvantage of this method is that with fixed-point math,
 * accuracy is lost due to imprecise representation of the scaled
 * quantization values.  The smaller the quantization table entry, the less
 * precise the scaled value, so this implementation does worse with high-
 * quality-setting files than with low-quality ones.
 */

#include <windows.h>
#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */

#ifdef DCT_IFAST_SUPPORTED


/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif


/* Scaling decisions are generally the same as in the LL&M algorithm;
 * see jidctint.c for more details.  However, we choose to descale
 * (right shift) multiplication products as soon as they are formed,
 * rather than carrying additional fractional bits into subsequent additions.
 * This compromises accuracy slightly, but it lets us save a few shifts.
 * More importantly, 16-bit arithmetic is then adequate (for 8-bit samples)
 * everywhere except in the multiplications proper; this saves a good deal
 * of work on 16-bit-int machines.
 *
 * The dequantized coefficients are not integers because the AA&N scaling
 * factors have been incorporated.  We represent them scaled up by PASS1_BITS,
 * so that the first and second IDCT rounds have the same input scaling.
 * For 8-bit JSAMPLEs, we choose IFAST_SCALE_BITS = PASS1_BITS so as to
 * avoid a descaling shift; this compromises accuracy rather drastically
 * for small quantization table entries, but it saves a lot of shifts.
 * For 12-bit JSAMPLEs, there's no hope of using 16x16 multiplies anyway,
 * so we use a much larger scaling factor to preserve accuracy.
 *
 * A final compromise is to represent the multiplicative constants to only
 * 8 fractional bits, rather than 13.  This saves some shifting work on some
 * machines, and may also reduce the cost of multiplication (since there
 * are fewer one-bits in the constants).
 */

#if BITS_IN_JSAMPLE == 8
#define CONST_BITS  8
#define PASS1_BITS  2
#else
#define CONST_BITS  8
#define PASS1_BITS  1		/* lose a little precision to avoid overflow */
#endif

/* Some C compilers fail to reduce "FIX(constant)" at compile time, thus
 * causing a lot of useless floating-point operations at run time.
 * To get around this we use the following pre-calculated constants.
 * If you change CONST_BITS you may want to add appropriate values.
 * (With a reasonable C compiler, you can just rely on the FIX() macro...)
 */ 

#if CONST_BITS == 8
#define FIX_1_082392200  ((INT32)  277)		/* FIX(1.082392200) */
#define FIX_1_414213562  ((INT32)  362)		/* FIX(1.414213562) */
#define FIX_1_847759065  ((INT32)  473)		/* FIX(1.847759065) */
#define FIX_2_613125930  ((INT32)  669)		/* FIX(2.613125930) */
#else
#define FIX_1_082392200  FIX(1.082392200)
#define FIX_1_414213562  FIX(1.414213562)
#define FIX_1_847759065  FIX(1.847759065)
#define FIX_2_613125930  FIX(2.613125930)
#endif


/* We can gain a little more speed, with a further compromise in accuracy,
 * by omitting the addition in a descaling shift.  This yields an incorrectly
 * rounded result half the time...
 */

#ifndef USE_ACCURATE_ROUNDING
#undef DESCALE
#define DESCALE(x,n)  RIGHT_SHIFT(x, n)
#endif

//#define DESCALE(x,n)  RIGHT_SHIFT((x) + (ONE << ((n)-1)), n)
/* Multiply a DCTELEM variable by an INT32 constant, and immediately
 * descale to yield a DCTELEM result.
 */

//#define MULTIPLY(var,const)  ((DCTELEM) DESCALE((var) * (const), CONST_BITS))
#define MULTIPLY(var,const)  ((DCTELEM) ((var) * (const)))


/* Dequantize a coefficient by multiplying it by the multiplier-table
 * entry; produce a DCTELEM result.  For 8-bit data a 16x16->16
 * multiplication will do.  For 12-bit data, the multiplier table is
 * declared INT32, so a 32-bit multiply will be used.
 */

#if BITS_IN_JSAMPLE == 8
//#define DEQUANTIZE(coef,quantval)  (((IFAST_MULT_TYPE) (coef)) * (quantval))
#define DEQUANTIZE(coef,quantval)  (((coef)) * (quantval))
#else
#define DEQUANTIZE(coef,quantval)  \
	DESCALE((coef)*(quantval), IFAST_SCALE_BITS-PASS1_BITS)
#endif

 
/* Like DESCALE, but applies to a DCTELEM and produces an int.
 * We assume that int right shift is unsigned if INT32 right shift is.
 */

#ifdef RIGHT_SHIFT_IS_UNSIGNED
#define ISHIFT_TEMPS	DCTELEM ishift_temp;
#if BITS_IN_JSAMPLE == 8
#define DCTELEMBITS  16		/* DCTELEM may be 16 or 32 bits */
#else
#define DCTELEMBITS  32		/* DCTELEM must be 32 bits */
#endif
#define IRIGHT_SHIFT(x,shft)  \
    ((ishift_temp = (x)) < 0 ? \
     (ishift_temp >> (shft)) | ((~((DCTELEM) 0)) << (DCTELEMBITS-(shft))) : \
     (ishift_temp >> (shft)))
#else
#define ISHIFT_TEMPS
#define IRIGHT_SHIFT(x,shft)	((x) >> (shft))
#endif

#ifdef USE_ACCURATE_ROUNDING
#define IDESCALE(x,n)  ((int) IRIGHT_SHIFT((x) + (1 << ((n)-1)), n))
#else
#define IDESCALE(x,n)  ((int) IRIGHT_SHIFT(x, n))
#endif


#ifdef USECSOURCE

GLOBAL(void)
jpeg_idct_ifast (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
  DCTELEM tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
  DCTELEM tmp10, tmp11, tmp12, tmp13;
  DCTELEM z5, z10, z11, z12, z13;
  JCOEFPTR inptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  int ctr;
  int workspace[DCTSIZE2];	/* buffers data between passes */
  SHIFT_TEMPS			/* for DESCALE */
  ISHIFT_TEMPS			/* for IDESCALE */
  
 
	  IFAST_MULT_TYPE * quantptr;
	  int *wsptr;

	  /* Pass 1: process columns from input, store into work array. */

	  inptr = coef_block;
	  quantptr = (IFAST_MULT_TYPE *) compptr->dct_table;
	  wsptr = workspace;
	  for (ctr = DCTSIZE; ctr > 0; ctr--) {
		/* Due to quantization, we will usually find that many of the input
		 * coefficients are zero, especially the AC terms.  We can exploit this
		 * by short-circuiting the IDCT calculation for any column in which all
		 * the AC terms are zero.  In that case each output is equal to the
		 * DC coefficient (with scale factor as needed).
		 * With typical images and quantization tables, half or more of the
		 * column DCT calculations can be simplified this way.
		 */
    
		if ((inptr[DCTSIZE*1] | inptr[DCTSIZE*2] | inptr[DCTSIZE*3] |
		 inptr[DCTSIZE*4] | inptr[DCTSIZE*5] | inptr[DCTSIZE*6] |
		 inptr[DCTSIZE*7]) == 0) {
		  /* AC terms all zero */
		  int dcval = (int) DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);

		  wsptr[DCTSIZE*0] = dcval;
		  wsptr[DCTSIZE*1] = dcval;
		  wsptr[DCTSIZE*2] = dcval;
		  wsptr[DCTSIZE*3] = dcval;
		  wsptr[DCTSIZE*4] = dcval;
		  wsptr[DCTSIZE*5] = dcval;
		  wsptr[DCTSIZE*6] = dcval;
		  wsptr[DCTSIZE*7] = dcval;
      
		  inptr++;			/* advance pointers to next column */
		  quantptr++;
		  wsptr++;
		  continue;
		}
    
		/* Even part */

		tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
		tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
		tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
		tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

		tmp10 = tmp0 + tmp2;	/* phase 3 */
		tmp11 = tmp0 - tmp2;

		tmp13 = tmp1 + tmp3;	/* phases 5-3 */
		tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */

		tmp0 = tmp10 + tmp13;	/* phase 2 */
		tmp3 = tmp10 - tmp13;
		tmp1 = tmp11 + tmp12;
		tmp2 = tmp11 - tmp12;
    
		/* Odd part */

		tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
		tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
		tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
		tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

		z13 = tmp6 + tmp5;		/* phase 6 */
		z10 = tmp6 - tmp5;
		z11 = tmp4 + tmp7;
		z12 = tmp4 - tmp7;

		tmp7 = z11 + z13;		/* phase 5 */
		tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */

		z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
		tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
		tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */

		tmp6 = tmp12 - tmp7;	/* phase 2 */
		tmp5 = tmp11 - tmp6;
		tmp4 = tmp10 + tmp5;

		wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
		wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
		wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
		wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
		wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
		wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
		wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
		wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);

		inptr++;			/* advance pointers to next column */
		quantptr++;
		wsptr++;
	  }
  
	  /* Pass 2: process rows from work array, store into output array. */
	  /* Note that we must descale the results by a factor of 8 == 2**3, */
	  /* and also undo the PASS1_BITS scaling. */

	  wsptr = workspace;
	  for (ctr = 0; ctr < DCTSIZE; ctr++) {
		outptr = output_buf[ctr] + output_col;
		/* Rows of zeroes can be exploited in the same way as we did with columns.
		 * However, the column calculation has created many nonzero AC terms, so
		 * the simplification applies less often (typically 5% to 10% of the time).
		 * On machines with very fast multiplication, it's possible that the
		 * test takes more time than it's worth.  In that case this section
		 * may be commented out.
		 */
    
	#ifndef NO_ZERO_ROW_TEST
		if ((wsptr[1] | wsptr[2] | wsptr[3] | wsptr[4] | wsptr[5] | wsptr[6] |
		 wsptr[7]) == 0) {
		  /* AC terms all zero */
		  JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
					  & RANGE_MASK];
      
		  outptr[0] = dcval;
		  outptr[1] = dcval;
		  outptr[2] = dcval;
		  outptr[3] = dcval;
		  outptr[4] = dcval;
		  outptr[5] = dcval;
		  outptr[6] = dcval;
		  outptr[7] = dcval;

		  wsptr += DCTSIZE;		/* advance pointer to next row */
		  continue;
		}
	#endif
    
		/* Even part */

		tmp10 = ((DCTELEM) wsptr[0] + (DCTELEM) wsptr[4]);
		tmp11 = ((DCTELEM) wsptr[0] - (DCTELEM) wsptr[4]);

		tmp13 = ((DCTELEM) wsptr[2] + (DCTELEM) wsptr[6]);
		tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
			- tmp13;

		tmp0 = tmp10 + tmp13;
		tmp3 = tmp10 - tmp13;
		tmp1 = tmp11 + tmp12;
		tmp2 = tmp11 - tmp12;

		/* Odd part */

		z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
		z10 = (DCTELEM) wsptr[5] - (DCTELEM) wsptr[3];
		z11 = (DCTELEM) wsptr[1] + (DCTELEM) wsptr[7];
		z12 = (DCTELEM) wsptr[1] - (DCTELEM) wsptr[7];

		tmp7 = z11 + z13;		/* phase 5 */
		tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */

		z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
		tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
		tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */

		tmp6 = tmp12 - tmp7;	/* phase 2 */
		tmp5 = tmp11 - tmp6;
		tmp4 = tmp10 + tmp5;

		/* Final output stage: scale down by a factor of 8 and range-limit */
 
		outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
					& RANGE_MASK];
		outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
					& RANGE_MASK];
		outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
					& RANGE_MASK];
		outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
					& RANGE_MASK];
		outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
					& RANGE_MASK];
		outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
					& RANGE_MASK];
		outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
					& RANGE_MASK];
		outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
					& RANGE_MASK];

		wsptr += DCTSIZE;		/* advance pointer to next row */
	  }
	}

#else

extern void midct8x8aan(short* dctcoeff, short* tempcoeff, short* quantptr,
				  JSAMPARRAY output_buf, JDIMENSION output_col,
				  JSAMPLE *range_limit ) ;

extern void pidct8x8aan(short* dctcoeff, short* tempcoeff, short* quantptr,
				  JSAMPARRAY output_buf, JDIMENSION output_col,
				  JSAMPLE *range_limit ) ;


/*
* Perform dequantization and inverse DCT on one block of coefficients.
*/

GLOBAL(void)
jpeg_idct_ifast (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
  short * quantptr;
  short * wsptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  short aworkspace[DCTSIZE2+8] ;

  // ensure that the temporary working space is quad aligned
  wsptr = (short *)((LONG_PTR)(aworkspace) + 0x8) ;
  wsptr = (short *)((LONG_PTR)(wsptr) & ~0x7) ;


  quantptr = (short *) compptr->dct_table;
  
  // do the 2-Dal idct and store the corresponding results
  // from the range_limit array

  if(vfMMXMachine) {
    midct8x8aan(coef_block, wsptr, quantptr, output_buf, output_col, range_limit) ;
  }
  else {
    pidct8x8aan(coef_block, wsptr, quantptr, output_buf, output_col, range_limit) ;
  }

}

#endif //USECSOURCE

#endif /* DCT_IFAST_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\jidctint.c ===
/*
 * jidctint.c
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains a slow-but-accurate integer implementation of the
 * inverse DCT (Discrete Cosine Transform).  In the IJG code, this routine
 * must also perform dequantization of the input coefficients.
 *
 * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT
 * on each row (or vice versa, but it's more convenient to emit a row at
 * a time).  Direct algorithms are also available, but they are much more
 * complex and seem not to be any faster when reduced to code.
 *
 * This implementation is based on an algorithm described in
 *   C. Loeffler, A. Ligtenberg and G. Moschytz, "Practical Fast 1-D DCT
 *   Algorithms with 11 Multiplications", Proc. Int'l. Conf. on Acoustics,
 *   Speech, and Signal Processing 1989 (ICASSP '89), pp. 988-991.
 * The primary algorithm described there uses 11 multiplies and 29 adds.
 * We use their alternate method with 12 multiplies and 32 adds.
 * The advantage of this method is that no data path contains more than one
 * multiplication; this allows a very simple and accurate implementation in
 * scaled fixed-point arithmetic, with a minimal number of shifts.
 */

#include <windows.h>
#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */

#ifdef DCT_ISLOW_SUPPORTED


/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif


/*
 * The low-down on this scaling stuff is as follows:
 *
 * Each 1-D IDCT step produces outputs which are a factor of sqrt(N)
 * larger than the true IDCT outputs.  The final outputs are therefore
 * a factor of N larger than desired; since N=8 this can be cured by
 * a simple right shift at the end of the algorithm.  The advantage of
 * this arrangement is that we save two multiplications per 1-D IDCT,
 * because the y0 and y4 inputs need not be divided by sqrt(N).
 *
 * We have to do addition and subtraction of the integer inputs, which
 * is no problem, and multiplication by fractional constants, which is
 * a problem to do in integer arithmetic.  We multiply all the constants
 * by CONST_SCALE and convert them to integer constants (thus retaining
 * CONST_BITS bits of precision in the constants).  After doing a
 * multiplication we have to divide the product by CONST_SCALE, with proper
 * rounding, to produce the correct output.  This division can be done
 * cheaply as a right shift of CONST_BITS bits.  We postpone shifting
 * as long as possible so that partial sums can be added together with
 * full fractional precision.
 *
 * The outputs of the first pass are scaled up by PASS1_BITS bits so that
 * they are represented to better-than-integral precision.  These outputs
 * require BITS_IN_JSAMPLE + PASS1_BITS + 3 bits; this fits in a 16-bit word
 * with the recommended scaling.  (To scale up 12-bit sample data further, an
 * intermediate INT32 array would be needed.)
 *
 * To avoid overflow of the 32-bit intermediate results in pass 2, we must
 * have BITS_IN_JSAMPLE + CONST_BITS + PASS1_BITS <= 26.  Error analysis
 * shows that the values given below are the most effective.
 */

#if BITS_IN_JSAMPLE == 8
#define CONST_BITS  13
#define PASS1_BITS  2
#else
#define CONST_BITS  13
#define PASS1_BITS  1		/* lose a little precision to avoid overflow */
#endif

/* Some C compilers fail to reduce "FIX(constant)" at compile time, thus
 * causing a lot of useless floating-point operations at run time.
 * To get around this we use the following pre-calculated constants.
 * If you change CONST_BITS you may want to add appropriate values.
 * (With a reasonable C compiler, you can just rely on the FIX() macro...)
 */

#if CONST_BITS == 13
#define FIX_0_298631336  ((INT32)  2446)	/* FIX(0.298631336) */
#define FIX_0_390180644  ((INT32)  3196)	/* FIX(0.390180644) */
#define FIX_0_541196100  ((INT32)  4433)	/* FIX(0.541196100) */
#define FIX_0_765366865  ((INT32)  6270)	/* FIX(0.765366865) */
#define FIX_0_899976223  ((INT32)  7373)	/* FIX(0.899976223) */
#define FIX_1_175875602  ((INT32)  9633)	/* FIX(1.175875602) */
#define FIX_1_501321110  ((INT32)  12299)	/* FIX(1.501321110) */
#define FIX_1_847759065  ((INT32)  15137)	/* FIX(1.847759065) */
#define FIX_1_961570560  ((INT32)  16069)	/* FIX(1.961570560) */
#define FIX_2_053119869  ((INT32)  16819)	/* FIX(2.053119869) */
#define FIX_2_562915447  ((INT32)  20995)	/* FIX(2.562915447) */
#define FIX_3_072711026  ((INT32)  25172)	/* FIX(3.072711026) */
#else
#define FIX_0_298631336  FIX(0.298631336)
#define FIX_0_390180644  FIX(0.390180644)
#define FIX_0_541196100  FIX(0.541196100)
#define FIX_0_765366865  FIX(0.765366865)
#define FIX_0_899976223  FIX(0.899976223)
#define FIX_1_175875602  FIX(1.175875602)
#define FIX_1_501321110  FIX(1.501321110)
#define FIX_1_847759065  FIX(1.847759065)
#define FIX_1_961570560  FIX(1.961570560)
#define FIX_2_053119869  FIX(2.053119869)
#define FIX_2_562915447  FIX(2.562915447)
#define FIX_3_072711026  FIX(3.072711026)
#endif


#if BITS_IN_JSAMPLE == 8
#define MULTIPLY(var,const)  MULTIPLY16C16(var,const)
#else
#define MULTIPLY(var,const)  ((var) * (const))
#endif


/* Dequantize a coefficient by multiplying it by the multiplier-table
 * entry; produce an int result.  In this module, both inputs and result
 * are 16 bits or less, so either int or short multiply will work.
 */

#define DEQUANTIZE(coef,quantval)  (((ISLOW_MULT_TYPE) (coef)) * (quantval))




#ifdef USECSOURCE

 /*
 * Perform dequantization and inverse DCT on one block of coefficients.
 */

GLOBAL(void)
jpeg_idct_islow(j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col)
{
  INT32 tmp0, tmp1, tmp2, tmp3;
  INT32 tmp10, tmp11, tmp12, tmp13;
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  int ctr;
  int workspace[DCTSIZE2];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
    /* Due to quantization, we will usually find that many of the input
     * coefficients are zero, especially the AC terms.  We can exploit this
     * by short-circuiting the IDCT calculation for any column in which all
     * the AC terms are zero.  In that case each output is equal to the
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    
    if ((inptr[DCTSIZE*1] | inptr[DCTSIZE*2] | inptr[DCTSIZE*3] |
	 inptr[DCTSIZE*4] | inptr[DCTSIZE*5] | inptr[DCTSIZE*6] |
	 inptr[DCTSIZE*7]) == 0) {
      /* AC terms all zero */
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
      
      wsptr[DCTSIZE*0] = dcval;
      wsptr[DCTSIZE*1] = dcval;
      wsptr[DCTSIZE*2] = dcval;
      wsptr[DCTSIZE*3] = dcval;
      wsptr[DCTSIZE*4] = dcval;
      wsptr[DCTSIZE*5] = dcval;
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;
      
      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
      continue;
    }
    
    /* Even part: reverse the even part of the forward DCT. */
    /* The rotator is sqrt(2)*c(-6). */
    
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
    tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
    tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
    
    z2 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);

    tmp0 = (z2 + z3) << CONST_BITS;
    tmp1 = (z2 - z3) << CONST_BITS;
    
    tmp10 = tmp0 + tmp3;
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    
    /* Odd part per figure 8; the matrix is unitary and hence its
     * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
     */
    
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    
    z1 = tmp0 + tmp3;
    z2 = tmp1 + tmp2;
    z3 = tmp0 + tmp2;
    z4 = tmp1 + tmp3;
    z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
    
    tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
    tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
    tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
    tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
    z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
    z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
    z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
    z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
    
    z3 += z5;
    z4 += z5;
    
    tmp0 += z1 + z3;
    tmp1 += z2 + z4;
    tmp2 += z2 + z3;
    tmp3 += z1 + z4;
    
    /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
    
    wsptr[DCTSIZE*0] = (int) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
    wsptr[DCTSIZE*7] = (int) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
    wsptr[DCTSIZE*1] = (int) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
    wsptr[DCTSIZE*6] = (int) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
    wsptr[DCTSIZE*2] = (int) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
    wsptr[DCTSIZE*5] = (int) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
    wsptr[DCTSIZE*3] = (int) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
    wsptr[DCTSIZE*4] = (int) DESCALE(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
    
    inptr++;			/* advance pointers to next column */
    quantptr++;
    wsptr++;
  }
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
    /* Rows of zeroes can be exploited in the same way as we did with columns.
     * However, the column calculation has created many nonzero AC terms, so
     * the simplification applies less often (typically 5% to 10% of the time).
     * On machines with very fast multiplication, it's possible that the
     * test takes more time than it's worth.  In that case this section
     * may be commented out.
     */
    
#ifndef NO_ZERO_ROW_TEST
    if ((wsptr[1] | wsptr[2] | wsptr[3] | wsptr[4] | wsptr[5] | wsptr[6] |
	 wsptr[7]) == 0) {
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
				  & RANGE_MASK];
      
      outptr[0] = dcval;
      outptr[1] = dcval;
      outptr[2] = dcval;
      outptr[3] = dcval;
      outptr[4] = dcval;
      outptr[5] = dcval;
      outptr[6] = dcval;
      outptr[7] = dcval;

      wsptr += DCTSIZE;		/* advance pointer to next row */
      continue;
    }
#endif
    
    /* Even part: reverse the even part of the forward DCT. */
    /* The rotator is sqrt(2)*c(-6). */
    
    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
    tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
    tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
    
    tmp0 = ((INT32) wsptr[0] + (INT32) wsptr[4]) << CONST_BITS;
    tmp1 = ((INT32) wsptr[0] - (INT32) wsptr[4]) << CONST_BITS;
    
    tmp10 = tmp0 + tmp3;
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    
    /* Odd part per figure 8; the matrix is unitary and hence its
     * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
     */
    
    tmp0 = (INT32) wsptr[7];
    tmp1 = (INT32) wsptr[5];
    tmp2 = (INT32) wsptr[3];
    tmp3 = (INT32) wsptr[1];
    
    z1 = tmp0 + tmp3;
    z2 = tmp1 + tmp2;
    z3 = tmp0 + tmp2;
    z4 = tmp1 + tmp3;
    z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
    
    tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
    tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
    tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
    tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
    z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
    z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
    z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
    z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
    
    z3 += z5;
    z4 += z5;
    
    tmp0 += z1 + z3;
    tmp1 += z2 + z4;
    tmp2 += z2 + z3;
    tmp3 += z1 + z4;
    
    /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
    
    outptr[0] = range_limit[(int) DESCALE(tmp10 + tmp3,
					  CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    outptr[7] = range_limit[(int) DESCALE(tmp10 - tmp3,
					  CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) DESCALE(tmp11 + tmp2,
					  CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    outptr[6] = range_limit[(int) DESCALE(tmp11 - tmp2,
					  CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) DESCALE(tmp12 + tmp1,
					  CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    outptr[5] = range_limit[(int) DESCALE(tmp12 - tmp1,
					  CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) DESCALE(tmp13 + tmp0,
					  CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) DESCALE(tmp13 - tmp0,
					  CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}

#else

extern void midct8x8llm(JCOEFPTR inptr, short *quantptr, short *wsptr,
							JSAMPARRAY output_buf, JDIMENSION output_col,
							JSAMPLE *range);

extern void pidct8x8llm(JCOEFPTR inptr, short *quantptr, short *wsptr,
							JSAMPARRAY output_buf, JDIMENSION output_col,
							JSAMPLE *range);


/*
 * Perform dequantization and inverse DCT on one block of coefficients.
 * MMX Enhanced and Pentium enhanced versions.
 */

GLOBAL(void)
jpeg_idct_islow (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col)
{
  JCOEFPTR inptr;
  short * quantptr;
  short * wsptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  int workspace[DCTSIZE2+8];	/* buffers data between passes */

  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  // ensure that the temporary working space is quad aligned
  wsptr = (short *)((LONG_PTR)(workspace) + 0x8) ;
  wsptr = (short *)((LONG_PTR)(wsptr) & 0xfffffff8) ;


  inptr = coef_block;
  quantptr = (short *) compptr->dct_table;
  wsptr = (short *)workspace;
  
  if (vfMMXMachine) {	
    midct8x8llm(inptr, quantptr, wsptr,output_buf, output_col,range_limit ) ;
  }
  else {
    pidct8x8llm(inptr, quantptr, wsptr,output_buf, output_col,range_limit ) ;    
  }
}
#endif //USECSOURCE

#endif /* DCT_ISLOW_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\jfdctint.c ===
/*
 * jfdctint.c
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains a slow-but-accurate integer implementation of the
 * forward DCT (Discrete Cosine Transform).
 *
 * A 2-D DCT can be done by 1-D DCT on each row followed by 1-D DCT
 * on each column.  Direct algorithms are also available, but they are
 * much more complex and seem not to be any faster when reduced to code.
 *
 * This implementation is based on an algorithm described in
 *   C. Loeffler, A. Ligtenberg and G. Moschytz, "Practical Fast 1-D DCT
 *   Algorithms with 11 Multiplications", Proc. Int'l. Conf. on Acoustics,
 *   Speech, and Signal Processing 1989 (ICASSP '89), pp. 988-991.
 * The primary algorithm described there uses 11 multiplies and 29 adds.
 * We use their alternate method with 12 multiplies and 32 adds.
 * The advantage of this method is that no data path contains more than one
 * multiplication; this allows a very simple and accurate implementation in
 * scaled fixed-point arithmetic, with a minimal number of shifts.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */

#ifdef DCT_ISLOW_SUPPORTED


/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif


/*
 * The low-down on this scaling stuff is as follows:
 *
 * Each 1-D DCT step produces outputs which are a factor of sqrt(N)
 * larger than the true DCT outputs.  The final outputs are therefore
 * a factor of N larger than desired; since N=8 this can be cured by
 * a simple right shift at the end of the algorithm.  The advantage of
 * this arrangement is that we save two multiplications per 1-D DCT,
 * because the y0 and y4 outputs need not be divided by sqrt(N).
 * In the IJG code, this factor of 8 is removed by the quantization step
 * (in jcdctmgr.c), NOT in this module.
 *
 * We have to do addition and subtraction of the integer inputs, which
 * is no problem, and multiplication by fractional constants, which is
 * a problem to do in integer arithmetic.  We multiply all the constants
 * by CONST_SCALE and convert them to integer constants (thus retaining
 * CONST_BITS bits of precision in the constants).  After doing a
 * multiplication we have to divide the product by CONST_SCALE, with proper
 * rounding, to produce the correct output.  This division can be done
 * cheaply as a right shift of CONST_BITS bits.  We postpone shifting
 * as long as possible so that partial sums can be added together with
 * full fractional precision.
 *
 * The outputs of the first pass are scaled up by PASS1_BITS bits so that
 * they are represented to better-than-integral precision.  These outputs
 * require BITS_IN_JSAMPLE + PASS1_BITS + 3 bits; this fits in a 16-bit word
 * with the recommended scaling.  (For 12-bit sample data, the intermediate
 * array is INT32 anyway.)
 *
 * To avoid overflow of the 32-bit intermediate results in pass 2, we must
 * have BITS_IN_JSAMPLE + CONST_BITS + PASS1_BITS <= 26.  Error analysis
 * shows that the values given below are the most effective.
 */

#if BITS_IN_JSAMPLE == 8
#define CONST_BITS  13
#define PASS1_BITS  2
#else
#define CONST_BITS  13
#define PASS1_BITS  1		/* lose a little precision to avoid overflow */
#endif

/* Some C compilers fail to reduce "FIX(constant)" at compile time, thus
 * causing a lot of useless floating-point operations at run time.
 * To get around this we use the following pre-calculated constants.
 * If you change CONST_BITS you may want to add appropriate values.
 * (With a reasonable C compiler, you can just rely on the FIX() macro...)
 */

#if CONST_BITS == 13
#define FIX_0_298631336  ((INT32)  2446)	/* FIX(0.298631336) */
#define FIX_0_390180644  ((INT32)  3196)	/* FIX(0.390180644) */
#define FIX_0_541196100  ((INT32)  4433)	/* FIX(0.541196100) */
#define FIX_0_765366865  ((INT32)  6270)	/* FIX(0.765366865) */
#define FIX_0_899976223  ((INT32)  7373)	/* FIX(0.899976223) */
#define FIX_1_175875602  ((INT32)  9633)	/* FIX(1.175875602) */
#define FIX_1_501321110  ((INT32)  12299)	/* FIX(1.501321110) */
#define FIX_1_847759065  ((INT32)  15137)	/* FIX(1.847759065) */
#define FIX_1_961570560  ((INT32)  16069)	/* FIX(1.961570560) */
#define FIX_2_053119869  ((INT32)  16819)	/* FIX(2.053119869) */
#define FIX_2_562915447  ((INT32)  20995)	/* FIX(2.562915447) */
#define FIX_3_072711026  ((INT32)  25172)	/* FIX(3.072711026) */
#else
#define FIX_0_298631336  FIX(0.298631336)
#define FIX_0_390180644  FIX(0.390180644)
#define FIX_0_541196100  FIX(0.541196100)
#define FIX_0_765366865  FIX(0.765366865)
#define FIX_0_899976223  FIX(0.899976223)
#define FIX_1_175875602  FIX(1.175875602)
#define FIX_1_501321110  FIX(1.501321110)
#define FIX_1_847759065  FIX(1.847759065)
#define FIX_1_961570560  FIX(1.961570560)
#define FIX_2_053119869  FIX(2.053119869)
#define FIX_2_562915447  FIX(2.562915447)
#define FIX_3_072711026  FIX(3.072711026)
#endif


/* Multiply an INT32 variable by an INT32 constant to yield an INT32 result.
 * For 8-bit samples with the recommended scaling, all the variable
 * and constant values involved are no more than 16 bits wide, so a
 * 16x16->32 bit multiply can be used instead of a full 32x32 multiply.
 * For 12-bit samples, a full 32-bit multiplication will be needed.
 */

#if BITS_IN_JSAMPLE == 8
#define MULTIPLY(var,const)  MULTIPLY16C16(var,const)
#else
#define MULTIPLY(var,const)  ((var) * (const))
#endif


/*
 * Perform the forward DCT on one block of samples.
 */

GLOBAL(void)
jpeg_fdct_islow (DCTELEM * data)
{
  INT32 tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
  INT32 tmp10, tmp11, tmp12, tmp13;
  INT32 z1, z2, z3, z4, z5;
  DCTELEM *dataptr;
  int ctr;
  SHIFT_TEMPS

  /* Pass 1: process rows. */
  /* Note results are scaled up by sqrt(8) compared to a true DCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  dataptr = data;
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
    tmp0 = dataptr[0] + dataptr[7];
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];
    
    /* Even part per LL&M figure 1 --- note that published figure is faulty;
     * rotator "sqrt(2)*c1" should be "sqrt(2)*c6".
     */
    
    tmp10 = tmp0 + tmp3;
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    
    dataptr[0] = (DCTELEM) ((tmp10 + tmp11) << PASS1_BITS);
    dataptr[4] = (DCTELEM) ((tmp10 - tmp11) << PASS1_BITS);
    
    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
    dataptr[2] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp13, FIX_0_765366865),
				   CONST_BITS-PASS1_BITS);
    dataptr[6] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp12, - FIX_1_847759065),
				   CONST_BITS-PASS1_BITS);
    
    /* Odd part per figure 8 --- note paper omits factor of sqrt(2).
     * cK represents cos(K*pi/16).
     * i0..i3 in the paper are tmp4..tmp7 here.
     */
    
    z1 = tmp4 + tmp7;
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
    
    tmp4 = MULTIPLY(tmp4, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
    tmp5 = MULTIPLY(tmp5, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
    tmp6 = MULTIPLY(tmp6, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
    tmp7 = MULTIPLY(tmp7, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
    z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
    z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
    z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
    z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
    
    z3 += z5;
    z4 += z5;
    
    dataptr[7] = (DCTELEM) DESCALE(tmp4 + z1 + z3, CONST_BITS-PASS1_BITS);
    dataptr[5] = (DCTELEM) DESCALE(tmp5 + z2 + z4, CONST_BITS-PASS1_BITS);
    dataptr[3] = (DCTELEM) DESCALE(tmp6 + z2 + z3, CONST_BITS-PASS1_BITS);
    dataptr[1] = (DCTELEM) DESCALE(tmp7 + z1 + z4, CONST_BITS-PASS1_BITS);
    
    dataptr += DCTSIZE;		/* advance pointer to next row */
  }

  /* Pass 2: process columns.
   * We remove the PASS1_BITS scaling, but leave the results scaled up
   * by an overall factor of 8.
   */

  dataptr = data;
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
    tmp7 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
    tmp6 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
    tmp5 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
    tmp4 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];
    
    /* Even part per LL&M figure 1 --- note that published figure is faulty;
     * rotator "sqrt(2)*c1" should be "sqrt(2)*c6".
     */
    
    tmp10 = tmp0 + tmp3;
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    
    dataptr[DCTSIZE*0] = (DCTELEM) DESCALE(tmp10 + tmp11, PASS1_BITS);
    dataptr[DCTSIZE*4] = (DCTELEM) DESCALE(tmp10 - tmp11, PASS1_BITS);
    
    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
    dataptr[DCTSIZE*2] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp13, FIX_0_765366865),
					   CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*6] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp12, - FIX_1_847759065),
					   CONST_BITS+PASS1_BITS);
    
    /* Odd part per figure 8 --- note paper omits factor of sqrt(2).
     * cK represents cos(K*pi/16).
     * i0..i3 in the paper are tmp4..tmp7 here.
     */
    
    z1 = tmp4 + tmp7;
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
    
    tmp4 = MULTIPLY(tmp4, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
    tmp5 = MULTIPLY(tmp5, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
    tmp6 = MULTIPLY(tmp6, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
    tmp7 = MULTIPLY(tmp7, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
    z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
    z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
    z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
    z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
    
    z3 += z5;
    z4 += z5;
    
    dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp4 + z1 + z3,
					   CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp5 + z2 + z4,
					   CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp6 + z2 + z3,
					   CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp7 + z1 + z4,
					   CONST_BITS+PASS1_BITS);
    
    dataptr++;			/* advance pointer to next column */
  }
}

#endif /* DCT_ISLOW_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\jidctred.c ===
/*
 * jidctred.c
 *
 * Copyright (C) 1994-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains inverse-DCT routines that produce reduced-size output:
 * either 4x4, 2x2, or 1x1 pixels from an 8x8 DCT block.
 *
 * The implementation is based on the Loeffler, Ligtenberg and Moschytz (LL&M)
 * algorithm used in jidctint.c.  We simply replace each 8-to-8 1-D IDCT step
 * with an 8-to-4 step that produces the four averages of two adjacent outputs
 * (or an 8-to-2 step producing two averages of four outputs, for 2x2 output).
 * These steps were derived by computing the corresponding values at the end
 * of the normal LL&M code, then simplifying as much as possible.
 *
 * 1x1 is trivial: just take the DC coefficient divided by 8.
 *
 * See jidctint.c for additional comments.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */

#ifdef IDCT_SCALING_SUPPORTED


/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif


/* Scaling is the same as in jidctint.c. */

#if BITS_IN_JSAMPLE == 8
#define CONST_BITS  13
#define PASS1_BITS  2
#else
#define CONST_BITS  13
#define PASS1_BITS  1		/* lose a little precision to avoid overflow */
#endif

/* Some C compilers fail to reduce "FIX(constant)" at compile time, thus
 * causing a lot of useless floating-point operations at run time.
 * To get around this we use the following pre-calculated constants.
 * If you change CONST_BITS you may want to add appropriate values.
 * (With a reasonable C compiler, you can just rely on the FIX() macro...)
 */

#if CONST_BITS == 13
#define FIX_0_211164243  ((INT32)  1730)	/* FIX(0.211164243) */
#define FIX_0_509795579  ((INT32)  4176)	/* FIX(0.509795579) */
#define FIX_0_601344887  ((INT32)  4926)	/* FIX(0.601344887) */
#define FIX_0_720959822  ((INT32)  5906)	/* FIX(0.720959822) */
#define FIX_0_765366865  ((INT32)  6270)	/* FIX(0.765366865) */
#define FIX_0_850430095  ((INT32)  6967)	/* FIX(0.850430095) */
#define FIX_0_899976223  ((INT32)  7373)	/* FIX(0.899976223) */
#define FIX_1_061594337  ((INT32)  8697)	/* FIX(1.061594337) */
#define FIX_1_272758580  ((INT32)  10426)	/* FIX(1.272758580) */
#define FIX_1_451774981  ((INT32)  11893)	/* FIX(1.451774981) */
#define FIX_1_847759065  ((INT32)  15137)	/* FIX(1.847759065) */
#define FIX_2_172734803  ((INT32)  17799)	/* FIX(2.172734803) */
#define FIX_2_562915447  ((INT32)  20995)	/* FIX(2.562915447) */
#define FIX_3_624509785  ((INT32)  29692)	/* FIX(3.624509785) */
#else
#define FIX_0_211164243  FIX(0.211164243)
#define FIX_0_509795579  FIX(0.509795579)
#define FIX_0_601344887  FIX(0.601344887)
#define FIX_0_720959822  FIX(0.720959822)
#define FIX_0_765366865  FIX(0.765366865)
#define FIX_0_850430095  FIX(0.850430095)
#define FIX_0_899976223  FIX(0.899976223)
#define FIX_1_061594337  FIX(1.061594337)
#define FIX_1_272758580  FIX(1.272758580)
#define FIX_1_451774981  FIX(1.451774981)
#define FIX_1_847759065  FIX(1.847759065)
#define FIX_2_172734803  FIX(2.172734803)
#define FIX_2_562915447  FIX(2.562915447)
#define FIX_3_624509785  FIX(3.624509785)
#endif


/* Multiply an INT32 variable by an INT32 constant to yield an INT32 result.
 * For 8-bit samples with the recommended scaling, all the variable
 * and constant values involved are no more than 16 bits wide, so a
 * 16x16->32 bit multiply can be used instead of a full 32x32 multiply.
 * For 12-bit samples, a full 32-bit multiplication will be needed.
 */

#if BITS_IN_JSAMPLE == 8
#define MULTIPLY(var,const)  MULTIPLY16C16(var,const)
#else
#define MULTIPLY(var,const)  ((var) * (const))
#endif


/* Dequantize a coefficient by multiplying it by the multiplier-table
 * entry; produce an int result.  In this module, both inputs and result
 * are 16 bits or less, so either int or short multiply will work.
 */

#define DEQUANTIZE(coef,quantval)  (((ISLOW_MULT_TYPE) (coef)) * (quantval))


/*
 * Perform dequantization and inverse DCT on one block of coefficients,
 * producing a reduced-size 4x4 output block.
 */

GLOBAL(void)
jpeg_idct_4x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
  INT32 tmp0, tmp2, tmp10, tmp12;
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  int ctr;
  int workspace[DCTSIZE*4];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; inptr++, quantptr++, wsptr++, ctr--) {
    /* Don't bother to process column 4, because second pass won't use it */
    if (ctr == DCTSIZE-4)
      continue;
    if ((inptr[DCTSIZE*1] | inptr[DCTSIZE*2] | inptr[DCTSIZE*3] |
	 inptr[DCTSIZE*5] | inptr[DCTSIZE*6] | inptr[DCTSIZE*7]) == 0) {
      /* AC terms all zero; we need not examine term 4 for 4x4 output */
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
      
      wsptr[DCTSIZE*0] = dcval;
      wsptr[DCTSIZE*1] = dcval;
      wsptr[DCTSIZE*2] = dcval;
      wsptr[DCTSIZE*3] = dcval;
      
      continue;
    }
    
    /* Even part */
    
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp0 <<= (CONST_BITS+1);
    
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp2 = MULTIPLY(z2, FIX_1_847759065) + MULTIPLY(z3, - FIX_0_765366865);
    
    tmp10 = tmp0 + tmp2;
    tmp12 = tmp0 - tmp2;
    
    /* Odd part */
    
    z1 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    
    tmp0 = MULTIPLY(z1, - FIX_0_211164243) /* sqrt(2) * (c3-c1) */
	 + MULTIPLY(z2, FIX_1_451774981) /* sqrt(2) * (c3+c7) */
	 + MULTIPLY(z3, - FIX_2_172734803) /* sqrt(2) * (-c1-c5) */
	 + MULTIPLY(z4, FIX_1_061594337); /* sqrt(2) * (c5+c7) */
    
    tmp2 = MULTIPLY(z1, - FIX_0_509795579) /* sqrt(2) * (c7-c5) */
	 + MULTIPLY(z2, - FIX_0_601344887) /* sqrt(2) * (c5-c1) */
	 + MULTIPLY(z3, FIX_0_899976223) /* sqrt(2) * (c3-c7) */
	 + MULTIPLY(z4, FIX_2_562915447); /* sqrt(2) * (c1+c3) */

    /* Final output stage */
    
    wsptr[DCTSIZE*0] = (int) DESCALE(tmp10 + tmp2, CONST_BITS-PASS1_BITS+1);
    wsptr[DCTSIZE*3] = (int) DESCALE(tmp10 - tmp2, CONST_BITS-PASS1_BITS+1);
    wsptr[DCTSIZE*1] = (int) DESCALE(tmp12 + tmp0, CONST_BITS-PASS1_BITS+1);
    wsptr[DCTSIZE*2] = (int) DESCALE(tmp12 - tmp0, CONST_BITS-PASS1_BITS+1);
  }
  
  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
  for (ctr = 0; ctr < 4; ctr++) {
    outptr = output_buf[ctr] + output_col;
    /* It's not clear whether a zero row test is worthwhile here ... */

#ifndef NO_ZERO_ROW_TEST
    if ((wsptr[1] | wsptr[2] | wsptr[3] | wsptr[5] | wsptr[6] |
	 wsptr[7]) == 0) {
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
				  & RANGE_MASK];
      
      outptr[0] = dcval;
      outptr[1] = dcval;
      outptr[2] = dcval;
      outptr[3] = dcval;
      
      wsptr += DCTSIZE;		/* advance pointer to next row */
      continue;
    }
#endif
    
    /* Even part */
    
    tmp0 = ((INT32) wsptr[0]) << (CONST_BITS+1);
    
    tmp2 = MULTIPLY((INT32) wsptr[2], FIX_1_847759065)
	 + MULTIPLY((INT32) wsptr[6], - FIX_0_765366865);
    
    tmp10 = tmp0 + tmp2;
    tmp12 = tmp0 - tmp2;
    
    /* Odd part */
    
    z1 = (INT32) wsptr[7];
    z2 = (INT32) wsptr[5];
    z3 = (INT32) wsptr[3];
    z4 = (INT32) wsptr[1];
    
    tmp0 = MULTIPLY(z1, - FIX_0_211164243) /* sqrt(2) * (c3-c1) */
	 + MULTIPLY(z2, FIX_1_451774981) /* sqrt(2) * (c3+c7) */
	 + MULTIPLY(z3, - FIX_2_172734803) /* sqrt(2) * (-c1-c5) */
	 + MULTIPLY(z4, FIX_1_061594337); /* sqrt(2) * (c5+c7) */
    
    tmp2 = MULTIPLY(z1, - FIX_0_509795579) /* sqrt(2) * (c7-c5) */
	 + MULTIPLY(z2, - FIX_0_601344887) /* sqrt(2) * (c5-c1) */
	 + MULTIPLY(z3, FIX_0_899976223) /* sqrt(2) * (c3-c7) */
	 + MULTIPLY(z4, FIX_2_562915447); /* sqrt(2) * (c1+c3) */

    /* Final output stage */
    
    outptr[0] = range_limit[(int) DESCALE(tmp10 + tmp2,
					  CONST_BITS+PASS1_BITS+3+1)
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) DESCALE(tmp10 - tmp2,
					  CONST_BITS+PASS1_BITS+3+1)
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) DESCALE(tmp12 + tmp0,
					  CONST_BITS+PASS1_BITS+3+1)
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) DESCALE(tmp12 - tmp0,
					  CONST_BITS+PASS1_BITS+3+1)
			    & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}


/*
 * Perform dequantization and inverse DCT on one block of coefficients,
 * producing a reduced-size 2x2 output block.
 */

GLOBAL(void)
jpeg_idct_2x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
  INT32 tmp0, tmp10, z1;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  int ctr;
  int workspace[DCTSIZE*2];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; inptr++, quantptr++, wsptr++, ctr--) {
    /* Don't bother to process columns 2,4,6 */
    if (ctr == DCTSIZE-2 || ctr == DCTSIZE-4 || ctr == DCTSIZE-6)
      continue;
    if ((inptr[DCTSIZE*1] | inptr[DCTSIZE*3] |
	 inptr[DCTSIZE*5] | inptr[DCTSIZE*7]) == 0) {
      /* AC terms all zero; we need not examine terms 2,4,6 for 2x2 output */
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
      
      wsptr[DCTSIZE*0] = dcval;
      wsptr[DCTSIZE*1] = dcval;
      
      continue;
    }
    
    /* Even part */
    
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp10 = z1 << (CONST_BITS+2);
    
    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
    tmp0 = MULTIPLY(z1, - FIX_0_720959822); /* sqrt(2) * (c7-c5+c3-c1) */
    z1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
    tmp0 += MULTIPLY(z1, FIX_0_850430095); /* sqrt(2) * (-c1+c3+c5+c7) */
    z1 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    tmp0 += MULTIPLY(z1, - FIX_1_272758580); /* sqrt(2) * (-c1+c3-c5-c7) */
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    tmp0 += MULTIPLY(z1, FIX_3_624509785); /* sqrt(2) * (c1+c3+c5+c7) */

    /* Final output stage */
    
    wsptr[DCTSIZE*0] = (int) DESCALE(tmp10 + tmp0, CONST_BITS-PASS1_BITS+2);
    wsptr[DCTSIZE*1] = (int) DESCALE(tmp10 - tmp0, CONST_BITS-PASS1_BITS+2);
  }
  
  /* Pass 2: process 2 rows from work array, store into output array. */

  wsptr = workspace;
  for (ctr = 0; ctr < 2; ctr++) {
    outptr = output_buf[ctr] + output_col;
    /* It's not clear whether a zero row test is worthwhile here ... */

#ifndef NO_ZERO_ROW_TEST
    if ((wsptr[1] | wsptr[3] | wsptr[5] | wsptr[7]) == 0) {
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
				  & RANGE_MASK];
      
      outptr[0] = dcval;
      outptr[1] = dcval;
      
      wsptr += DCTSIZE;		/* advance pointer to next row */
      continue;
    }
#endif
    
    /* Even part */
    
    tmp10 = ((INT32) wsptr[0]) << (CONST_BITS+2);
    
    /* Odd part */

    tmp0 = MULTIPLY((INT32) wsptr[7], - FIX_0_720959822) /* sqrt(2) * (c7-c5+c3-c1) */
	 + MULTIPLY((INT32) wsptr[5], FIX_0_850430095) /* sqrt(2) * (-c1+c3+c5+c7) */
	 + MULTIPLY((INT32) wsptr[3], - FIX_1_272758580) /* sqrt(2) * (-c1+c3-c5-c7) */
	 + MULTIPLY((INT32) wsptr[1], FIX_3_624509785); /* sqrt(2) * (c1+c3+c5+c7) */

    /* Final output stage */
    
    outptr[0] = range_limit[(int) DESCALE(tmp10 + tmp0,
					  CONST_BITS+PASS1_BITS+3+2)
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) DESCALE(tmp10 - tmp0,
					  CONST_BITS+PASS1_BITS+3+2)
			    & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}


/*
 * Perform dequantization and inverse DCT on one block of coefficients,
 * producing a reduced-size 1x1 output block.
 */

GLOBAL(void)
jpeg_idct_1x1 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
  int dcval;
  ISLOW_MULT_TYPE * quantptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* We hardly need an inverse DCT routine for this: just take the
   * average pixel value, which is one-eighth of the DC coefficient.
   */
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  dcval = DEQUANTIZE(coef_block[0], quantptr[0]);
  dcval = (int) DESCALE((INT32) dcval, 3);

  output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
}

#endif /* IDCT_SCALING_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\jmemdos.c ===
/*
 * jmemdos.c
 *
 * Copyright (C) 1992-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file provides an MS-DOS-compatible implementation of the system-
 * dependent portion of the JPEG memory manager.  Temporary data can be
 * stored in extended or expanded memory as well as in regular DOS files.
 *
 * If you use this file, you must be sure that NEED_FAR_POINTERS is defined
 * if you compile in a small-data memory model; it should NOT be defined if
 * you use a large-data memory model.  This file is not recommended if you
 * are using a flat-memory-space 386 environment such as DJGCC or Watcom C.
 * Also, this code will NOT work if struct fields are aligned on greater than
 * 2-byte boundaries.
 *
 * Based on code contributed by Ge' Weijers.
 */

/*
 * If you have both extended and expanded memory, you may want to change the
 * order in which they are tried in jopen_backing_store.  On a 286 machine
 * expanded memory is usually faster, since extended memory access involves
 * an expensive protected-mode-and-back switch.  On 386 and better, extended
 * memory is usually faster.  As distributed, the code tries extended memory
 * first (what? not everyone has a 386? :-).
 *
 * You can disable use of extended/expanded memory entirely by altering these
 * definitions or overriding them from the Makefile (eg, -DEMS_SUPPORTED=0).
 */

#ifndef XMS_SUPPORTED
#define XMS_SUPPORTED  1
#endif
#ifndef EMS_SUPPORTED
#define EMS_SUPPORTED  1
#endif


#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jmemsys.h"		/* import the system-dependent declarations */

#ifndef HAVE_STDLIB_H		/* <stdlib.h> should declare these */
extern void * malloc JPP((size_t size));
extern void free JPP((void *ptr));
extern char * getenv JPP((const char * name));
#endif

#ifdef NEED_FAR_POINTERS

#ifdef __TURBOC__
/* These definitions work for Borland C (Turbo C) */
#include <alloc.h>		/* need farmalloc(), farfree() */
#define far_malloc(x)	farmalloc(x)
#define far_free(x)	farfree(x)
#else
/* These definitions work for Microsoft C and compatible compilers */
#include <malloc.h>		/* need _fmalloc(), _ffree() */
#define far_malloc(x)	_fmalloc(x)
#define far_free(x)	_ffree(x)
#endif

#else /* not NEED_FAR_POINTERS */

#define far_malloc(x)	malloc(x)
#define far_free(x)	free(x)

#endif /* NEED_FAR_POINTERS */

#ifdef DONT_USE_B_MODE		/* define mode parameters for fopen() */
#define READ_BINARY	"r"
#else
#define READ_BINARY	"rb"
#endif

#if MAX_ALLOC_CHUNK >= 65535L	/* make sure jconfig.h got this right */
  MAX_ALLOC_CHUNK should be less than 64K. /* deliberate syntax error */
#endif


/*
 * Declarations for assembly-language support routines (see jmemdosa.asm).
 *
 * The functions are declared "far" as are all their pointer arguments;
 * this ensures the assembly source code will work regardless of the
 * compiler memory model.  We assume "short" is 16 bits, "long" is 32.
 */

typedef void far * XMSDRIVER;	/* actually a pointer to code */
typedef struct {		/* registers for calling XMS driver */
	unsigned short ax, dx, bx;
	void far * ds_si;
      } XMScontext;
typedef struct {		/* registers for calling EMS driver */
	unsigned short ax, dx, bx;
	void far * ds_si;
      } EMScontext;

extern short far jdos_open JPP((short far * handle, char far * filename));
extern short far jdos_close JPP((short handle));
extern short far jdos_seek JPP((short handle, long offset));
extern short far jdos_read JPP((short handle, void far * buffer,
				unsigned short count));
extern short far jdos_write JPP((short handle, void far * buffer,
				 unsigned short count));
extern void far jxms_getdriver JPP((XMSDRIVER far *));
extern void far jxms_calldriver JPP((XMSDRIVER, XMScontext far *));
extern short far jems_available JPP((void));
extern void far jems_calldriver JPP((EMScontext far *));


/*
 * Selection of a file name for a temporary file.
 * This is highly system-dependent, and you may want to customize it.
 */

static int next_file_num;	/* to distinguish among several temp files */

LOCAL(void)
select_file_name (char * fname)
{
  const char * env;
  char * ptr;
  FILE * tfile;

  /* Keep generating file names till we find one that's not in use */
  for (;;) {
    /* Get temp directory name from environment TMP or TEMP variable;
     * if none, use "."
     */
    if ((env = (const char *) getenv("TMP")) == NULL)
      if ((env = (const char *) getenv("TEMP")) == NULL)
	env = ".";
    if (*env == '\0')		/* null string means "." */
      env = ".";
    ptr = fname;		/* copy name to fname */
    while (*env != '\0')
      *ptr++ = *env++;
    if (ptr[-1] != '\\' && ptr[-1] != '/')
      *ptr++ = '\\';		/* append backslash if not in env variable */
    /* Append a suitable file name */
    next_file_num++;		/* advance counter */
    sprintf(ptr, "JPG%03d.TMP", next_file_num);
    /* Probe to see if file name is already in use */
    if ((tfile = fopen(fname, READ_BINARY)) == NULL)
      break;
    fclose(tfile);		/* oops, it's there; close tfile & try again */
  }
}


/*
 * Near-memory allocation and freeing are controlled by the regular library
 * routines malloc() and free().
 */

GLOBAL(void *)
jpeg_get_small (j_common_ptr cinfo, size_t sizeofobject)
{
  return (void *) malloc(sizeofobject);
}

GLOBAL(void)
jpeg_free_small (j_common_ptr cinfo, void * object, size_t sizeofobject)
{
  free(object);
}


/*
 * "Large" objects are allocated in far memory, if possible
 */

GLOBAL(void FAR *)
jpeg_get_large (j_common_ptr cinfo, size_t sizeofobject)
{
  return (void FAR *) far_malloc(sizeofobject);
}

GLOBAL(void)
jpeg_free_large (j_common_ptr cinfo, void FAR * object, size_t sizeofobject)
{
  far_free(object);
}


/*
 * This routine computes the total memory space available for allocation.
 * It's impossible to do this in a portable way; our current solution is
 * to make the user tell us (with a default value set at compile time).
 * If you can actually get the available space, it's a good idea to subtract
 * a slop factor of 5% or so.
 */

#ifndef DEFAULT_MAX_MEM		/* so can override from makefile */
#define DEFAULT_MAX_MEM		300000L /* for total usage about 450K */
#endif

GLOBAL(long)
jpeg_mem_available (j_common_ptr cinfo, long min_bytes_needed,
		    long max_bytes_needed, long already_allocated)
{
  return cinfo->mem->max_memory_to_use - already_allocated;
}


/*
 * Backing store (temporary file) management.
 * Backing store objects are only used when the value returned by
 * jpeg_mem_available is less than the total space needed.  You can dispense
 * with these routines if you have plenty of virtual memory; see jmemnobs.c.
 */

/*
 * For MS-DOS we support three types of backing storage:
 *   1. Conventional DOS files.  We access these by direct DOS calls rather
 *      than via the stdio package.  This provides a bit better performance,
 *      but the real reason is that the buffers to be read or written are FAR.
 *      The stdio library for small-data memory models can't cope with that.
 *   2. Extended memory, accessed per the XMS V2.0 specification.
 *   3. Expanded memory, accessed per the LIM/EMS 4.0 specification.
 * You'll need copies of those specs to make sense of the related code.
 * The specs are available by Internet FTP from the SIMTEL archives 
 * (oak.oakland.edu and its various mirror sites).  See files
 * pub/msdos/microsoft/xms20.arc and pub/msdos/info/limems41.zip.
 */


/*
 * Access methods for a DOS file.
 */


METHODDEF(void)
read_file_store (j_common_ptr cinfo, backing_store_ptr info,
		 void FAR * buffer_address,
		 long file_offset, long byte_count)
{
  if (jdos_seek(info->handle.file_handle, file_offset))
    ERREXIT(cinfo, JERR_TFILE_SEEK);
  /* Since MAX_ALLOC_CHUNK is less than 64K, byte_count will be too. */
  if (byte_count > 65535L)	/* safety check */
    ERREXIT(cinfo, JERR_BAD_ALLOC_CHUNK);
  if (jdos_read(info->handle.file_handle, buffer_address,
		(unsigned short) byte_count))
    ERREXIT(cinfo, JERR_TFILE_READ);
}


METHODDEF(void)
write_file_store (j_common_ptr cinfo, backing_store_ptr info,
		  void FAR * buffer_address,
		  long file_offset, long byte_count)
{
  if (jdos_seek(info->handle.file_handle, file_offset))
    ERREXIT(cinfo, JERR_TFILE_SEEK);
  /* Since MAX_ALLOC_CHUNK is less than 64K, byte_count will be too. */
  if (byte_count > 65535L)	/* safety check */
    ERREXIT(cinfo, JERR_BAD_ALLOC_CHUNK);
  if (jdos_write(info->handle.file_handle, buffer_address,
		 (unsigned short) byte_count))
    ERREXIT(cinfo, JERR_TFILE_WRITE);
}


METHODDEF(void)
close_file_store (j_common_ptr cinfo, backing_store_ptr info)
{
  jdos_close(info->handle.file_handle);	/* close the file */
  remove(info->temp_name);	/* delete the file */
/* If your system doesn't have remove(), try unlink() instead.
 * remove() is the ANSI-standard name for this function, but
 * unlink() was more common in pre-ANSI systems.
 */
  TRACEMSS(cinfo, 1, JTRC_TFILE_CLOSE, info->temp_name);
}


LOCAL(boolean)
open_file_store (j_common_ptr cinfo, backing_store_ptr info,
		 long total_bytes_needed)
{
  short handle;

  select_file_name(info->temp_name);
  if (jdos_open((short far *) & handle, (char far *) info->temp_name)) {
    /* might as well exit since jpeg_open_backing_store will fail anyway */
    ERREXITS(cinfo, JERR_TFILE_CREATE, info->temp_name);
    return FALSE;
  }
  info->handle.file_handle = handle;
  info->read_backing_store = read_file_store;
  info->write_backing_store = write_file_store;
  info->close_backing_store = close_file_store;
  TRACEMSS(cinfo, 1, JTRC_TFILE_OPEN, info->temp_name);
  return TRUE;			/* succeeded */
}


/*
 * Access methods for extended memory.
 */

#if XMS_SUPPORTED

static XMSDRIVER xms_driver;	/* saved address of XMS driver */

typedef union {			/* either long offset or real-mode pointer */
	long offset;
	void far * ptr;
      } XMSPTR;

typedef struct {		/* XMS move specification structure */
	long length;
	XMSH src_handle;
	XMSPTR src;
	XMSH dst_handle;
	XMSPTR dst;
      } XMSspec;

#define ODD(X)	(((X) & 1L) != 0)


METHODDEF(void)
read_xms_store (j_common_ptr cinfo, backing_store_ptr info,
		void FAR * buffer_address,
		long file_offset, long byte_count)
{
  XMScontext ctx;
  XMSspec spec;
  char endbuffer[2];

  /* The XMS driver can't cope with an odd length, so handle the last byte
   * specially if byte_count is odd.  We don't expect this to be common.
   */

  spec.length = byte_count & (~ 1L);
  spec.src_handle = info->handle.xms_handle;
  spec.src.offset = file_offset;
  spec.dst_handle = 0;
  spec.dst.ptr = buffer_address;
  
  ctx.ds_si = (void far *) & spec;
  ctx.ax = 0x0b00;		/* EMB move */
  jxms_calldriver(xms_driver, (XMScontext far *) & ctx);
  if (ctx.ax != 1)
    ERREXIT(cinfo, JERR_XMS_READ);

  if (ODD(byte_count)) {
    read_xms_store(cinfo, info, (void FAR *) endbuffer,
		   file_offset + byte_count - 1L, 2L);
    ((char FAR *) buffer_address)[byte_count - 1L] = endbuffer[0];
  }
}


METHODDEF(void)
write_xms_store (j_common_ptr cinfo, backing_store_ptr info,
		 void FAR * buffer_address,
		 long file_offset, long byte_count)
{
  XMScontext ctx;
  XMSspec spec;
  char endbuffer[2];

  /* The XMS driver can't cope with an odd length, so handle the last byte
   * specially if byte_count is odd.  We don't expect this to be common.
   */

  spec.length = byte_count & (~ 1L);
  spec.src_handle = 0;
  spec.src.ptr = buffer_address;
  spec.dst_handle = info->handle.xms_handle;
  spec.dst.offset = file_offset;

  ctx.ds_si = (void far *) & spec;
  ctx.ax = 0x0b00;		/* EMB move */
  jxms_calldriver(xms_driver, (XMScontext far *) & ctx);
  if (ctx.ax != 1)
    ERREXIT(cinfo, JERR_XMS_WRITE);

  if (ODD(byte_count)) {
    read_xms_store(cinfo, info, (void FAR *) endbuffer,
		   file_offset + byte_count - 1L, 2L);
    endbuffer[0] = ((char FAR *) buffer_address)[byte_count - 1L];
    write_xms_store(cinfo, info, (void FAR *) endbuffer,
		    file_offset + byte_count - 1L, 2L);
  }
}


METHODDEF(void)
close_xms_store (j_common_ptr cinfo, backing_store_ptr info)
{
  XMScontext ctx;

  ctx.dx = info->handle.xms_handle;
  ctx.ax = 0x0a00;
  jxms_calldriver(xms_driver, (XMScontext far *) & ctx);
  TRACEMS1(cinfo, 1, JTRC_XMS_CLOSE, info->handle.xms_handle);
  /* we ignore any error return from the driver */
}


LOCAL(boolean)
open_xms_store (j_common_ptr cinfo, backing_store_ptr info,
		long total_bytes_needed)
{
  XMScontext ctx;

  /* Get address of XMS driver */
  jxms_getdriver((XMSDRIVER far *) & xms_driver);
  if (xms_driver == NULL)
    return FALSE;		/* no driver to be had */

  /* Get version number, must be >= 2.00 */
  ctx.ax = 0x0000;
  jxms_calldriver(xms_driver, (XMScontext far *) & ctx);
  if (ctx.ax < (unsigned short) 0x0200)
    return FALSE;

  /* Try to get space (expressed in kilobytes) */
  ctx.dx = (unsigned short) ((total_bytes_needed + 1023L) >> 10);
  ctx.ax = 0x0900;
  jxms_calldriver(xms_driver, (XMScontext far *) & ctx);
  if (ctx.ax != 1)
    return FALSE;

  /* Succeeded, save the handle and away we go */
  info->handle.xms_handle = ctx.dx;
  info->read_backing_store = read_xms_store;
  info->write_backing_store = write_xms_store;
  info->close_backing_store = close_xms_store;
  TRACEMS1(cinfo, 1, JTRC_XMS_OPEN, ctx.dx);
  return TRUE;			/* succeeded */
}

#endif /* XMS_SUPPORTED */


/*
 * Access methods for expanded memory.
 */

#if EMS_SUPPORTED

/* The EMS move specification structure requires word and long fields aligned
 * at odd byte boundaries.  Some compilers will align struct fields at even
 * byte boundaries.  While it's usually possible to force byte alignment,
 * that causes an overall performance penalty and may pose problems in merging
 * JPEG into a larger application.  Instead we accept some rather dirty code
 * here.  Note this code would fail if the hardware did not allow odd-byte
 * word & long accesses, but all 80x86 CPUs do.
 */

typedef void far * EMSPTR;

typedef union {			/* EMS move specification structure */
	long length;		/* It's easy to access first 4 bytes */
	char bytes[18];		/* Misaligned fields in here! */
      } EMSspec;

/* Macros for accessing misaligned fields */
#define FIELD_AT(spec,offset,type)  (*((type *) &(spec.bytes[offset])))
#define SRC_TYPE(spec)		FIELD_AT(spec,4,char)
#define SRC_HANDLE(spec)	FIELD_AT(spec,5,EMSH)
#define SRC_OFFSET(spec)	FIELD_AT(spec,7,unsigned short)
#define SRC_PAGE(spec)		FIELD_AT(spec,9,unsigned short)
#define SRC_PTR(spec)		FIELD_AT(spec,7,EMSPTR)
#define DST_TYPE(spec)		FIELD_AT(spec,11,char)
#define DST_HANDLE(spec)	FIELD_AT(spec,12,EMSH)
#define DST_OFFSET(spec)	FIELD_AT(spec,14,unsigned short)
#define DST_PAGE(spec)		FIELD_AT(spec,16,unsigned short)
#define DST_PTR(spec)		FIELD_AT(spec,14,EMSPTR)

#define EMSPAGESIZE	16384L	/* gospel, see the EMS specs */

#define HIBYTE(W)  (((W) >> 8) & 0xFF)
#define LOBYTE(W)  ((W) & 0xFF)


METHODDEF(void)
read_ems_store (j_common_ptr cinfo, backing_store_ptr info,
		void FAR * buffer_address,
		long file_offset, long byte_count)
{
  EMScontext ctx;
  EMSspec spec;

  spec.length = byte_count;
  SRC_TYPE(spec) = 1;
  SRC_HANDLE(spec) = info->handle.ems_handle;
  SRC_PAGE(spec)   = (unsigned short) (file_offset / EMSPAGESIZE);
  SRC_OFFSET(spec) = (unsigned short) (file_offset % EMSPAGESIZE);
  DST_TYPE(spec) = 0;
  DST_HANDLE(spec) = 0;
  DST_PTR(spec)    = buffer_address;
  
  ctx.ds_si = (void far *) & spec;
  ctx.ax = 0x5700;		/* move memory region */
  jems_calldriver((EMScontext far *) & ctx);
  if (HIBYTE(ctx.ax) != 0)
    ERREXIT(cinfo, JERR_EMS_READ);
}


METHODDEF(void)
write_ems_store (j_common_ptr cinfo, backing_store_ptr info,
		 void FAR * buffer_address,
		 long file_offset, long byte_count)
{
  EMScontext ctx;
  EMSspec spec;

  spec.length = byte_count;
  SRC_TYPE(spec) = 0;
  SRC_HANDLE(spec) = 0;
  SRC_PTR(spec)    = buffer_address;
  DST_TYPE(spec) = 1;
  DST_HANDLE(spec) = info->handle.ems_handle;
  DST_PAGE(spec)   = (unsigned short) (file_offset / EMSPAGESIZE);
  DST_OFFSET(spec) = (unsigned short) (file_offset % EMSPAGESIZE);
  
  ctx.ds_si = (void far *) & spec;
  ctx.ax = 0x5700;		/* move memory region */
  jems_calldriver((EMScontext far *) & ctx);
  if (HIBYTE(ctx.ax) != 0)
    ERREXIT(cinfo, JERR_EMS_WRITE);
}


METHODDEF(void)
close_ems_store (j_common_ptr cinfo, backing_store_ptr info)
{
  EMScontext ctx;

  ctx.ax = 0x4500;
  ctx.dx = info->handle.ems_handle;
  jems_calldriver((EMScontext far *) & ctx);
  TRACEMS1(cinfo, 1, JTRC_EMS_CLOSE, info->handle.ems_handle);
  /* we ignore any error return from the driver */
}


LOCAL(boolean)
open_ems_store (j_common_ptr cinfo, backing_store_ptr info,
		long total_bytes_needed)
{
  EMScontext ctx;

  /* Is EMS driver there? */
  if (! jems_available())
    return FALSE;

  /* Get status, make sure EMS is OK */
  ctx.ax = 0x4000;
  jems_calldriver((EMScontext far *) & ctx);
  if (HIBYTE(ctx.ax) != 0)
    return FALSE;

  /* Get version, must be >= 4.0 */
  ctx.ax = 0x4600;
  jems_calldriver((EMScontext far *) & ctx);
  if (HIBYTE(ctx.ax) != 0 || LOBYTE(ctx.ax) < 0x40)
    return FALSE;

  /* Try to allocate requested space */
  ctx.ax = 0x4300;
  ctx.bx = (unsigned short) ((total_bytes_needed + EMSPAGESIZE-1L) / EMSPAGESIZE);
  jems_calldriver((EMScontext far *) & ctx);
  if (HIBYTE(ctx.ax) != 0)
    return FALSE;

  /* Succeeded, save the handle and away we go */
  info->handle.ems_handle = ctx.dx;
  info->read_backing_store = read_ems_store;
  info->write_backing_store = write_ems_store;
  info->close_backing_store = close_ems_store;
  TRACEMS1(cinfo, 1, JTRC_EMS_OPEN, ctx.dx);
  return TRUE;			/* succeeded */
}

#endif /* EMS_SUPPORTED */


/*
 * Initial opening of a backing-store object.
 */

GLOBAL(void)
jpeg_open_backing_store (j_common_ptr cinfo, backing_store_ptr info,
			 long total_bytes_needed)
{
  /* Try extended memory, then expanded memory, then regular file. */
#if XMS_SUPPORTED
  if (open_xms_store(cinfo, info, total_bytes_needed))
    return;
#endif
#if EMS_SUPPORTED
  if (open_ems_store(cinfo, info, total_bytes_needed))
    return;
#endif
  if (open_file_store(cinfo, info, total_bytes_needed))
    return;
  ERREXITS(cinfo, JERR_TFILE_CREATE, "");
}


/*
 * These routines take care of any system-dependent initialization and
 * cleanup required.
 */

GLOBAL(long)
jpeg_mem_init (j_common_ptr cinfo)
{
  next_file_num = 0;		/* initialize temp file name generator */
  return DEFAULT_MAX_MEM;	/* default for max_memory_to_use */
}

GLOBAL(void)
jpeg_mem_term (j_common_ptr cinfo)
{
  /* Microsoft C, at least in v6.00A, will not successfully reclaim freed
   * blocks of size > 32Kbytes unless we give it a kick in the rear, like so:
   */
#ifdef NEED_FHEAPMIN
  _fheapmin();
#endif
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\jmemansi.c ===
/*
 * jmemansi.c
 *
 * Copyright (C) 1992-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file provides a simple generic implementation of the system-
 * dependent portion of the JPEG memory manager.  This implementation
 * assumes that you have the ANSI-standard library routine tmpfile().
 * Also, the problem of determining the amount of memory available
 * is shoved onto the user.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jmemsys.h"		/* import the system-dependent declarations */

#ifndef HAVE_STDLIB_H		/* <stdlib.h> should declare malloc(),free() */
extern void * malloc JPP((size_t size));
extern void free JPP((void *ptr));
#endif

#ifndef SEEK_SET		/* pre-ANSI systems may not define this; */
#define SEEK_SET  0		/* if not, assume 0 is correct */
#endif


/*
 * Memory allocation and freeing are controlled by the regular library
 * routines malloc() and free().
 */

GLOBAL(void *)
jpeg_get_small (j_common_ptr cinfo, size_t sizeofobject)
{
  return (void *) malloc(sizeofobject);
}

GLOBAL(void)
jpeg_free_small (j_common_ptr cinfo, void * object, size_t sizeofobject)
{
  free(object);
}


/*
 * "Large" objects are treated the same as "small" ones.
 * NB: although we include FAR keywords in the routine declarations,
 * this file won't actually work in 80x86 small/medium model; at least,
 * you probably won't be able to process useful-size images in only 64KB.
 */

GLOBAL(void FAR *)
jpeg_get_large (j_common_ptr cinfo, size_t sizeofobject)
{
  return (void FAR *) malloc(sizeofobject);
}

GLOBAL(void)
jpeg_free_large (j_common_ptr cinfo, void FAR * object, size_t sizeofobject)
{
  free(object);
}


/*
 * This routine computes the total memory space available for allocation.
 * It's impossible to do this in a portable way; our current solution is
 * to make the user tell us (with a default value set at compile time).
 * If you can actually get the available space, it's a good idea to subtract
 * a slop factor of 5% or so.
 */

#ifndef DEFAULT_MAX_MEM		/* so can override from makefile */
#define DEFAULT_MAX_MEM		1000000L /* default: one megabyte */
#endif

GLOBAL(long)
jpeg_mem_available (j_common_ptr cinfo, long min_bytes_needed,
		    long max_bytes_needed, long already_allocated)
{
  return cinfo->mem->max_memory_to_use - already_allocated;
}


/*
 * Backing store (temporary file) management.
 * Backing store objects are only used when the value returned by
 * jpeg_mem_available is less than the total space needed.  You can dispense
 * with these routines if you have plenty of virtual memory; see jmemnobs.c.
 */


METHODDEF(void)
read_backing_store (j_common_ptr cinfo, backing_store_ptr info,
		    void FAR * buffer_address,
		    long file_offset, long byte_count)
{
  if (fseek(info->temp_file, file_offset, SEEK_SET))
    ERREXIT(cinfo, JERR_TFILE_SEEK);
  if (JFREAD(info->temp_file, buffer_address, byte_count)
      != (size_t) byte_count)
    ERREXIT(cinfo, JERR_TFILE_READ);
}


METHODDEF(void)
write_backing_store (j_common_ptr cinfo, backing_store_ptr info,
		     void FAR * buffer_address,
		     long file_offset, long byte_count)
{
  if (fseek(info->temp_file, file_offset, SEEK_SET))
    ERREXIT(cinfo, JERR_TFILE_SEEK);
  if (JFWRITE(info->temp_file, buffer_address, byte_count)
      != (size_t) byte_count)
    ERREXIT(cinfo, JERR_TFILE_WRITE);
}


METHODDEF(void)
close_backing_store (j_common_ptr cinfo, backing_store_ptr info)
{
  fclose(info->temp_file);
  /* Since this implementation uses tmpfile() to create the file,
   * no explicit file deletion is needed.
   */
}


/*
 * Initial opening of a backing-store object.
 *
 * This version uses tmpfile(), which constructs a suitable file name
 * behind the scenes.  We don't have to use info->temp_name[] at all;
 * indeed, we can't even find out the actual name of the temp file.
 */

GLOBAL(void)
jpeg_open_backing_store (j_common_ptr cinfo, backing_store_ptr info,
			 long total_bytes_needed)
{
  if ((info->temp_file = tmpfile()) == NULL)
    ERREXITS(cinfo, JERR_TFILE_CREATE, "");
  info->read_backing_store = read_backing_store;
  info->write_backing_store = write_backing_store;
  info->close_backing_store = close_backing_store;
}


/*
 * These routines take care of any system-dependent initialization and
 * cleanup required.
 */

GLOBAL(long)
jpeg_mem_init (j_common_ptr cinfo)
{
  return DEFAULT_MAX_MEM;	/* default for max_memory_to_use */
}

GLOBAL(void)
jpeg_mem_term (j_common_ptr cinfo)
{
  /* no work */
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\jmemmgr.c ===
/*
 * jmemmgr.c
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains the JPEG system-independent memory management
 * routines.  This code is usable across a wide variety of machines; most
 * of the system dependencies have been isolated in a separate file.
 * The major functions provided here are:
 *   * pool-based allocation and freeing of memory;
 *   * policy decisions about how to divide available memory among the
 *     virtual arrays;
 *   * control logic for swapping virtual arrays between main memory and
 *     backing storage.
 * The separate system-dependent file provides the actual backing-storage
 * access code, and it contains the policy decision about how much total
 * main memory to use.
 * This file is system-dependent in the sense that some of its functions
 * are unnecessary in some systems.  For example, if there is enough virtual
 * memory so that backing storage will never be used, much of the virtual
 * array control logic could be removed.  (Of course, if you have that much
 * memory then you shouldn't care about a little bit of unused code...)
 */

#define JPEG_INTERNALS
#define AM_MEMORY_MANAGER	/* we define jvirt_Xarray_control structs */
#include "jinclude.h"
#include "jpeglib.h"
#include "jmemsys.h"		/* import the system-dependent declarations */

#ifndef NO_GETENV
#ifndef HAVE_STDLIB_H		/* <stdlib.h> should declare getenv() */
extern char * getenv JPP((const char * name));
#endif
#endif


/*
 * Some important notes:
 *   The allocation routines provided here must never return NULL.
 *   They should exit to error_exit if unsuccessful.
 *
 *   It's not a good idea to try to merge the sarray and barray routines,
 *   even though they are textually almost the same, because samples are
 *   usually stored as bytes while coefficients are shorts or ints.  Thus,
 *   in machines where byte pointers have a different representation from
 *   word pointers, the resulting machine code could not be the same.
 */


/*
 * Many machines require storage alignment: longs must start on 4-byte
 * boundaries, doubles on 8-byte boundaries, etc.  On such machines, malloc()
 * always returns pointers that are multiples of the worst-case alignment
 * requirement, and we had better do so too.
 * There isn't any really portable way to determine the worst-case alignment
 * requirement.  This module assumes that the alignment requirement is
 * multiples of sizeof(ALIGN_TYPE).
 * By default, we define ALIGN_TYPE as double.  This is necessary on some
 * workstations (where doubles really do need 8-byte alignment) and will work
 * fine on nearly everything.  If your machine has lesser alignment needs,
 * you can save a few bytes by making ALIGN_TYPE smaller.
 * The only place I know of where this will NOT work is certain Macintosh
 * 680x0 compilers that define double as a 10-byte IEEE extended float.
 * Doing 10-byte alignment is counterproductive because longwords won't be
 * aligned well.  Put "#define ALIGN_TYPE long" in jconfig.h if you have
 * such a compiler.
 */

#ifndef ALIGN_TYPE		/* so can override from jconfig.h */
#define ALIGN_TYPE  double
#endif


/*
 * We allocate objects from "pools", where each pool is gotten with a single
 * request to jpeg_get_small() or jpeg_get_large().  There is no per-object
 * overhead within a pool, except for alignment padding.  Each pool has a
 * header with a link to the next pool of the same class.
 * Small and large pool headers are identical except that the latter's
 * link pointer must be FAR on 80x86 machines.
 * Notice that the "real" header fields are union'ed with a dummy ALIGN_TYPE
 * field.  This forces the compiler to make SIZEOF(small_pool_hdr) a multiple
 * of the alignment requirement of ALIGN_TYPE.
 */

typedef union small_pool_struct * small_pool_ptr;

typedef union small_pool_struct {
  struct {
    small_pool_ptr next;	/* next in list of pools */
    size_t bytes_used;		/* how many bytes already used within pool */
    size_t bytes_left;		/* bytes still available in this pool */
  } hdr;
  ALIGN_TYPE dummy;		/* included in union to ensure alignment */
} small_pool_hdr;

typedef union large_pool_struct FAR * large_pool_ptr;

typedef union large_pool_struct {
  struct {
    large_pool_ptr next;	/* next in list of pools */
    size_t bytes_used;		/* how many bytes already used within pool */
    size_t bytes_left;		/* bytes still available in this pool */
  } hdr;
  ALIGN_TYPE dummy;		/* included in union to ensure alignment */
} large_pool_hdr;


/*
 * Here is the full definition of a memory manager object.
 */

typedef struct {
  struct jpeg_memory_mgr pub;	/* public fields */

  /* Each pool identifier (lifetime class) names a linked list of pools. */
  small_pool_ptr small_list[JPOOL_NUMPOOLS];
  large_pool_ptr large_list[JPOOL_NUMPOOLS];

  /* Since we only have one lifetime class of virtual arrays, only one
   * linked list is necessary (for each datatype).  Note that the virtual
   * array control blocks being linked together are actually stored somewhere
   * in the small-pool list.
   */
  jvirt_sarray_ptr virt_sarray_list;
  jvirt_barray_ptr virt_barray_list;

  /* This counts total space obtained from jpeg_get_small/large */
  long total_space_allocated;

  /* alloc_sarray and alloc_barray set this value for use by virtual
   * array routines.
   */
  JDIMENSION last_rowsperchunk;	/* from most recent alloc_sarray/barray */
} my_memory_mgr;

typedef my_memory_mgr * my_mem_ptr;


/*
 * The control blocks for virtual arrays.
 * Note that these blocks are allocated in the "small" pool area.
 * System-dependent info for the associated backing store (if any) is hidden
 * inside the backing_store_info struct.
 */

struct jvirt_sarray_control {
  JSAMPARRAY mem_buffer;	/* => the in-memory buffer */
  JDIMENSION rows_in_array;	/* total virtual array height */
  JDIMENSION samplesperrow;	/* width of array (and of memory buffer) */
  JDIMENSION maxaccess;		/* max rows accessed by access_virt_sarray */
  JDIMENSION rows_in_mem;	/* height of memory buffer */
  JDIMENSION rowsperchunk;	/* allocation chunk size in mem_buffer */
  JDIMENSION cur_start_row;	/* first logical row # in the buffer */
  JDIMENSION first_undef_row;	/* row # of first uninitialized row */
  boolean pre_zero;		/* pre-zero mode requested? */
  boolean dirty;		/* do current buffer contents need written? */
  boolean b_s_open;		/* is backing-store data valid? */
  jvirt_sarray_ptr next;	/* link to next virtual sarray control block */
  backing_store_info b_s_info;	/* System-dependent control info */
};

struct jvirt_barray_control {
  JBLOCKARRAY mem_buffer;	/* => the in-memory buffer */
  JDIMENSION rows_in_array;	/* total virtual array height */
  JDIMENSION blocksperrow;	/* width of array (and of memory buffer) */
  JDIMENSION maxaccess;		/* max rows accessed by access_virt_barray */
  JDIMENSION rows_in_mem;	/* height of memory buffer */
  JDIMENSION rowsperchunk;	/* allocation chunk size in mem_buffer */
  JDIMENSION cur_start_row;	/* first logical row # in the buffer */
  JDIMENSION first_undef_row;	/* row # of first uninitialized row */
  boolean pre_zero;		/* pre-zero mode requested? */
  boolean dirty;		/* do current buffer contents need written? */
  boolean b_s_open;		/* is backing-store data valid? */
  jvirt_barray_ptr next;	/* link to next virtual barray control block */
  backing_store_info b_s_info;	/* System-dependent control info */
};


#ifdef MEM_STATS		/* optional extra stuff for statistics */

LOCAL(void)
print_mem_stats (j_common_ptr cinfo, int pool_id)
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  small_pool_ptr shdr_ptr;
  large_pool_ptr lhdr_ptr;

  /* Since this is only a debugging stub, we can cheat a little by using
   * fprintf directly rather than going through the trace message code.
   * This is helpful because message parm array can't handle longs.
   */
  fprintf(stderr, "Freeing pool %d, total space = %ld\n",
	  pool_id, mem->total_space_allocated);

  for (lhdr_ptr = mem->large_list[pool_id]; lhdr_ptr != NULL;
       lhdr_ptr = lhdr_ptr->hdr.next) {
    fprintf(stderr, "  Large chunk used %ld\n",
	    (long) lhdr_ptr->hdr.bytes_used);
  }

  for (shdr_ptr = mem->small_list[pool_id]; shdr_ptr != NULL;
       shdr_ptr = shdr_ptr->hdr.next) {
    fprintf(stderr, "  Small chunk used %ld free %ld\n",
	    (long) shdr_ptr->hdr.bytes_used,
	    (long) shdr_ptr->hdr.bytes_left);
  }
}

#endif /* MEM_STATS */


LOCAL(void)
out_of_memory (j_common_ptr cinfo, int which)
/* Report an out-of-memory error and stop execution */
/* If we compiled MEM_STATS support, report alloc requests before dying */
{
#ifdef MEM_STATS
  cinfo->err->trace_level = 2;	/* force self_destruct to report stats */
#endif
  ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, which);
}


/*
 * Allocation of "small" objects.
 *
 * For these, we use pooled storage.  When a new pool must be created,
 * we try to get enough space for the current request plus a "slop" factor,
 * where the slop will be the amount of leftover space in the new pool.
 * The speed vs. space tradeoff is largely determined by the slop values.
 * A different slop value is provided for each pool class (lifetime),
 * and we also distinguish the first pool of a class from later ones.
 * NOTE: the values given work fairly well on both 16- and 32-bit-int
 * machines, but may be too small if longs are 64 bits or more.
 */

static const size_t first_pool_slop[JPOOL_NUMPOOLS] = 
{
	1600,			/* first PERMANENT pool */
	16000			/* first IMAGE pool */
};

static const size_t extra_pool_slop[JPOOL_NUMPOOLS] = 
{
	0,			/* additional PERMANENT pools */
	5000			/* additional IMAGE pools */
};

#define MIN_SLOP  50		/* greater than 0 to avoid futile looping */


METHODDEF(void *)
alloc_small (j_common_ptr cinfo, int pool_id, size_t sizeofobject)
/* Allocate a "small" object */
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  small_pool_ptr hdr_ptr, prev_hdr_ptr;
  char * data_ptr;
  size_t odd_bytes, min_request, slop;

  /* Check for unsatisfiable request (do now to ensure no overflow below) */
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
    out_of_memory(cinfo, 1);	/* request exceeds malloc's ability */

  /* Round up the requested size to a multiple of SIZEOF(ALIGN_TYPE) */
  odd_bytes = sizeofobject % SIZEOF(ALIGN_TYPE);
  if (odd_bytes > 0)
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;

  /* See if space is available in any existing pool */
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
  prev_hdr_ptr = NULL;
  hdr_ptr = mem->small_list[pool_id];
  while (hdr_ptr != NULL) {
    if (hdr_ptr->hdr.bytes_left >= sizeofobject)
      break;			/* found pool with enough space */
    prev_hdr_ptr = hdr_ptr;
    hdr_ptr = hdr_ptr->hdr.next;
  }

  /* Time to make a new pool? */
  if (hdr_ptr == NULL) {
    /* min_request is what we need now, slop is what will be leftover */
    min_request = sizeofobject + SIZEOF(small_pool_hdr);
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
      slop = first_pool_slop[pool_id];
    else
      slop = extra_pool_slop[pool_id];
    /* Don't ask for more than MAX_ALLOC_CHUNK */
    if (slop > (size_t) (MAX_ALLOC_CHUNK-min_request))
      slop = (size_t) (MAX_ALLOC_CHUNK-min_request);
    /* Try to get space, if fail reduce slop and try again */
    for (;;) {
      hdr_ptr = (small_pool_ptr) jpeg_get_small(cinfo, min_request + slop);
      if (hdr_ptr != NULL)
	break;
      slop /= 2;
      if (slop < MIN_SLOP)	/* give up when it gets real small */
	out_of_memory(cinfo, 2); /* jpeg_get_small failed */
    }
    mem->total_space_allocated += min_request + slop;
    /* Success, initialize the new pool header and add to end of list */
    hdr_ptr->hdr.next = NULL;
    hdr_ptr->hdr.bytes_used = 0;
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
      mem->small_list[pool_id] = hdr_ptr;
    else
      prev_hdr_ptr->hdr.next = hdr_ptr;
  }

  /* OK, allocate the object from the current pool */
  data_ptr = (char *) (hdr_ptr + 1); /* point to first data byte in pool */
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
  hdr_ptr->hdr.bytes_used += sizeofobject;
  hdr_ptr->hdr.bytes_left -= sizeofobject;

  return (void *) data_ptr;
}


/*
 * Allocation of "large" objects.
 *
 * The external semantics of these are the same as "small" objects,
 * except that FAR pointers are used on 80x86.  However the pool
 * management heuristics are quite different.  We assume that each
 * request is large enough that it may as well be passed directly to
 * jpeg_get_large; the pool management just links everything together
 * so that we can free it all on demand.
 * Note: the major use of "large" objects is in JSAMPARRAY and JBLOCKARRAY
 * structures.  The routines that create these structures (see below)
 * deliberately bunch rows together to ensure a large request size.
 */

METHODDEF(void FAR *)
alloc_large (j_common_ptr cinfo, int pool_id, size_t sizeofobject)
/* Allocate a "large" object */
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  large_pool_ptr hdr_ptr;
  size_t odd_bytes;

  /* Check for unsatisfiable request (do now to ensure no overflow below) */
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
    out_of_memory(cinfo, 3);	/* request exceeds malloc's ability */

  /* Round up the requested size to a multiple of SIZEOF(ALIGN_TYPE) */
  odd_bytes = sizeofobject % SIZEOF(ALIGN_TYPE);
  if (odd_bytes > 0)
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;

  /* Always make a new pool */
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */

  hdr_ptr = (large_pool_ptr) jpeg_get_large(cinfo, sizeofobject +
					    SIZEOF(large_pool_hdr));
  if (hdr_ptr == NULL)
    out_of_memory(cinfo, 4);	/* jpeg_get_large failed */
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);

  /* Success, initialize the new pool header and add to list */
  hdr_ptr->hdr.next = mem->large_list[pool_id];
  /* We maintain space counts in each pool header for statistical purposes,
   * even though they are not needed for allocation.
   */
  hdr_ptr->hdr.bytes_used = sizeofobject;
  hdr_ptr->hdr.bytes_left = 0;
  mem->large_list[pool_id] = hdr_ptr;

  return (void FAR *) (hdr_ptr + 1); /* point to first data byte in pool */
}


/*
 * Creation of 2-D sample arrays.
 * The pointers are in near heap, the samples themselves in FAR heap.
 *
 * To minimize allocation overhead and to allow I/O of large contiguous
 * blocks, we allocate the sample rows in groups of as many rows as possible
 * without exceeding MAX_ALLOC_CHUNK total bytes per allocation request.
 * NB: the virtual array control routines, later in this file, know about
 * this chunking of rows.  The rowsperchunk value is left in the mem manager
 * object so that it can be saved away if this sarray is the workspace for
 * a virtual array.
 */

METHODDEF(JSAMPARRAY)
alloc_sarray (j_common_ptr cinfo, int pool_id,
	      JDIMENSION samplesperrow, JDIMENSION numrows)
/* Allocate a 2-D sample array */
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  JSAMPARRAY result;
  JSAMPROW workspace;
  JDIMENSION rowsperchunk, currow, i;
  long ltemp;

  /* Calculate max # of rows allowed in one allocation chunk */
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
	  ((long) samplesperrow * SIZEOF(JSAMPLE));
  if (ltemp <= 0)
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
  if (ltemp < (long) numrows)
    rowsperchunk = (JDIMENSION) ltemp;
  else
    rowsperchunk = numrows;
  mem->last_rowsperchunk = rowsperchunk;

  /* Get space for row pointers (small object) */
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
				    (size_t) (numrows * SIZEOF(JSAMPROW)));

  /* Get the rows themselves (large objects) */
  currow = 0;
  while (currow < numrows) {
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
	(size_t) ((size_t) rowsperchunk * (size_t) samplesperrow
		  * SIZEOF(JSAMPLE)));
    for (i = rowsperchunk; i > 0; i--) {
      result[currow++] = workspace;
      workspace += samplesperrow;
    }
  }

  return result;
}


/*
 * Creation of 2-D coefficient-block arrays.
 * This is essentially the same as the code for sample arrays, above.
 */

METHODDEF(JBLOCKARRAY)
alloc_barray (j_common_ptr cinfo, int pool_id,
	      JDIMENSION blocksperrow, JDIMENSION numrows)
/* Allocate a 2-D coefficient-block array */
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  JBLOCKARRAY result;
  JBLOCKROW workspace;
  JDIMENSION rowsperchunk, currow, i;
  long ltemp;

  /* Calculate max # of rows allowed in one allocation chunk */
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
	  ((long) blocksperrow * SIZEOF(JBLOCK));
  if (ltemp <= 0)
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
  if (ltemp < (long) numrows)
    rowsperchunk = (JDIMENSION) ltemp;
  else
    rowsperchunk = numrows;
  mem->last_rowsperchunk = rowsperchunk;

  /* Get space for row pointers (small object) */
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
				     (size_t) (numrows * SIZEOF(JBLOCKROW)));

  /* Get the rows themselves (large objects) */
  currow = 0;
  while (currow < numrows) {
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
	(size_t) ((size_t) rowsperchunk * (size_t) blocksperrow
		  * SIZEOF(JBLOCK)));
    for (i = rowsperchunk; i > 0; i--) {
      result[currow++] = workspace;
      workspace += blocksperrow;
    }
  }

  return result;
}


/*
 * About virtual array management:
 *
 * The above "normal" array routines are only used to allocate strip buffers
 * (as wide as the image, but just a few rows high).  Full-image-sized buffers
 * are handled as "virtual" arrays.  The array is still accessed a strip at a
 * time, but the memory manager must save the whole array for repeated
 * accesses.  The intended implementation is that there is a strip buffer in
 * memory (as high as is possible given the desired memory limit), plus a
 * backing file that holds the rest of the array.
 *
 * The request_virt_array routines are told the total size of the image and
 * the maximum number of rows that will be accessed at once.  The in-memory
 * buffer must be at least as large as the maxaccess value.
 *
 * The request routines create control blocks but not the in-memory buffers.
 * That is postponed until realize_virt_arrays is called.  At that time the
 * total amount of space needed is known (approximately, anyway), so free
 * memory can be divided up fairly.
 *
 * The access_virt_array routines are responsible for making a specific strip
 * area accessible (after reading or writing the backing file, if necessary).
 * Note that the access routines are told whether the caller intends to modify
 * the accessed strip; during a read-only pass this saves having to rewrite
 * data to disk.  The access routines are also responsible for pre-zeroing
 * any newly accessed rows, if pre-zeroing was requested.
 *
 * In current usage, the access requests are usually for nonoverlapping
 * strips; that is, successive access start_row numbers differ by exactly
 * num_rows = maxaccess.  This means we can get good performance with simple
 * buffer dump/reload logic, by making the in-memory buffer be a multiple
 * of the access height; then there will never be accesses across bufferload
 * boundaries.  The code will still work with overlapping access requests,
 * but it doesn't handle bufferload overlaps very efficiently.
 */


METHODDEF(jvirt_sarray_ptr)
request_virt_sarray (j_common_ptr cinfo, int pool_id, boolean pre_zero,
		     JDIMENSION samplesperrow, JDIMENSION numrows,
		     JDIMENSION maxaccess)
/* Request a virtual 2-D sample array */
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  jvirt_sarray_ptr result;

  /* Only IMAGE-lifetime virtual arrays are currently supported */
  if (pool_id != JPOOL_IMAGE)
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */

  /* get control block */
  result = (jvirt_sarray_ptr) alloc_small(cinfo, pool_id,
					  SIZEOF(struct jvirt_sarray_control));

  result->mem_buffer = NULL;	/* marks array not yet realized */
  result->rows_in_array = numrows;
  result->samplesperrow = samplesperrow;
  result->maxaccess = maxaccess;
  result->pre_zero = pre_zero;
  result->b_s_open = FALSE;	/* no associated backing-store object */
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
  mem->virt_sarray_list = result;

  return result;
}


METHODDEF(jvirt_barray_ptr)
request_virt_barray (j_common_ptr cinfo, int pool_id, boolean pre_zero,
		     JDIMENSION blocksperrow, JDIMENSION numrows,
		     JDIMENSION maxaccess)
/* Request a virtual 2-D coefficient-block array */
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  jvirt_barray_ptr result;

  /* Only IMAGE-lifetime virtual arrays are currently supported */
  if (pool_id != JPOOL_IMAGE)
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */

  /* get control block */
  result = (jvirt_barray_ptr) alloc_small(cinfo, pool_id,
					  SIZEOF(struct jvirt_barray_control));

  result->mem_buffer = NULL;	/* marks array not yet realized */
  result->rows_in_array = numrows;
  result->blocksperrow = blocksperrow;
  result->maxaccess = maxaccess;
  result->pre_zero = pre_zero;
  result->b_s_open = FALSE;	/* no associated backing-store object */
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
  mem->virt_barray_list = result;

  return result;
}


METHODDEF(void)
realize_virt_arrays (j_common_ptr cinfo)
/* Allocate the in-memory buffers for any unrealized virtual arrays */
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  long space_per_minheight, maximum_space, avail_mem;
  long minheights, max_minheights;
  jvirt_sarray_ptr sptr;
  jvirt_barray_ptr bptr;

  /* Compute the minimum space needed (maxaccess rows in each buffer)
   * and the maximum space needed (full image height in each buffer).
   * These may be of use to the system-dependent jpeg_mem_available routine.
   */
  space_per_minheight = 0;
  maximum_space = 0;
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
      space_per_minheight += (long) sptr->maxaccess *
			     (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
      maximum_space += (long) sptr->rows_in_array *
		       (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
    }
  }
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
      space_per_minheight += (long) bptr->maxaccess *
			     (long) bptr->blocksperrow * SIZEOF(JBLOCK);
      maximum_space += (long) bptr->rows_in_array *
		       (long) bptr->blocksperrow * SIZEOF(JBLOCK);
    }
  }

  if (space_per_minheight <= 0)
    return;			/* no unrealized arrays, no work */

  /* Determine amount of memory to actually use; this is system-dependent. */
  avail_mem = jpeg_mem_available(cinfo, space_per_minheight, maximum_space,
				 mem->total_space_allocated);

  /* If the maximum space needed is available, make all the buffers full
   * height; otherwise parcel it out with the same number of minheights
   * in each buffer.
   */
  if (avail_mem >= maximum_space)
    max_minheights = 1000000000L;
  else {
    max_minheights = avail_mem / space_per_minheight;
    /* If there doesn't seem to be enough space, try to get the minimum
     * anyway.  This allows a "stub" implementation of jpeg_mem_available().
     */
    if (max_minheights <= 0)
      max_minheights = 1;
  }

  /* Allocate the in-memory buffers and initialize backing store as needed. */

  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
      minheights = ((long) sptr->rows_in_array - 1L) / sptr->maxaccess + 1L;
      if (minheights <= max_minheights) {
	/* This buffer fits in memory */
	sptr->rows_in_mem = sptr->rows_in_array;
      } else {
	/* It doesn't fit in memory, create backing store. */
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
				(long) sptr->rows_in_array *
				(long) sptr->samplesperrow *
				(long) SIZEOF(JSAMPLE));
	sptr->b_s_open = TRUE;
      }
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
				      sptr->samplesperrow, sptr->rows_in_mem);
      sptr->rowsperchunk = mem->last_rowsperchunk;
      sptr->cur_start_row = 0;
      sptr->first_undef_row = 0;
      sptr->dirty = FALSE;
    }
  }

  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
      minheights = ((long) bptr->rows_in_array - 1L) / bptr->maxaccess + 1L;
      if (minheights <= max_minheights) {
	/* This buffer fits in memory */
	bptr->rows_in_mem = bptr->rows_in_array;
      } else {
	/* It doesn't fit in memory, create backing store. */
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
				(long) bptr->rows_in_array *
				(long) bptr->blocksperrow *
				(long) SIZEOF(JBLOCK));
	bptr->b_s_open = TRUE;
      }
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
				      bptr->blocksperrow, bptr->rows_in_mem);
      bptr->rowsperchunk = mem->last_rowsperchunk;
      bptr->cur_start_row = 0;
      bptr->first_undef_row = 0;
      bptr->dirty = FALSE;
    }
  }
}


LOCAL(void)
do_sarray_io (j_common_ptr cinfo, jvirt_sarray_ptr ptr, boolean writing)
/* Do backing store read or write of a virtual sample array */
{
  long bytesperrow, file_offset, byte_count, rows, thisrow, i;

  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
  file_offset = ptr->cur_start_row * bytesperrow;
  /* Loop to read or write each allocation chunk in mem_buffer */
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
    /* One chunk, but check for short chunk at end of buffer */
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
    /* Transfer no more than is currently defined */
    thisrow = (long) ptr->cur_start_row + i;
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
    /* Transfer no more than fits in file */
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
    if (rows <= 0)		/* this chunk might be past end of file! */
      break;
    byte_count = rows * bytesperrow;
    if (writing)
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
					    (void FAR *) ptr->mem_buffer[i],
					    file_offset, byte_count);
    else
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
					   (void FAR *) ptr->mem_buffer[i],
					   file_offset, byte_count);
    file_offset += byte_count;
  }
}


LOCAL(void)
do_barray_io (j_common_ptr cinfo, jvirt_barray_ptr ptr, boolean writing)
/* Do backing store read or write of a virtual coefficient-block array */
{
  long bytesperrow, file_offset, byte_count, rows, thisrow, i;

  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
  file_offset = ptr->cur_start_row * bytesperrow;
  /* Loop to read or write each allocation chunk in mem_buffer */
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
    /* One chunk, but check for short chunk at end of buffer */
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
    /* Transfer no more than is currently defined */
    thisrow = (long) ptr->cur_start_row + i;
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
    /* Transfer no more than fits in file */
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
    if (rows <= 0)		/* this chunk might be past end of file! */
      break;
    byte_count = rows * bytesperrow;
    if (writing)
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
					    (void FAR *) ptr->mem_buffer[i],
					    file_offset, byte_count);
    else
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
					   (void FAR *) ptr->mem_buffer[i],
					   file_offset, byte_count);
    file_offset += byte_count;
  }
}


METHODDEF(JSAMPARRAY)
access_virt_sarray (j_common_ptr cinfo, jvirt_sarray_ptr ptr,
		    JDIMENSION start_row, JDIMENSION num_rows,
		    boolean writable)
/* Access the part of a virtual sample array starting at start_row */
/* and extending for num_rows rows.  writable is true if  */
/* caller intends to modify the accessed area. */
{
  JDIMENSION end_row = start_row + num_rows;
  JDIMENSION undef_row;

  /* debugging check */
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
      ptr->mem_buffer == NULL)
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);

  /* Make the desired part of the virtual array accessible */
  if (start_row < ptr->cur_start_row ||
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
    if (! ptr->b_s_open)
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
    /* Flush old buffer contents if necessary */
    if (ptr->dirty) {
      do_sarray_io(cinfo, ptr, TRUE);
      ptr->dirty = FALSE;
    }
    /* Decide what part of virtual array to access.
     * Algorithm: if target address > current window, assume forward scan,
     * load starting at target address.  If target address < current window,
     * assume backward scan, load so that target area is top of window.
     * Note that when switching from forward write to forward read, will have
     * start_row = 0, so the limiting case applies and we load from 0 anyway.
     */
    if (start_row > ptr->cur_start_row) {
      ptr->cur_start_row = start_row;
    } else {
      /* use long arithmetic here to avoid overflow & unsigned problems */
      long ltemp;

      ltemp = (long) end_row - (long) ptr->rows_in_mem;
      if (ltemp < 0)
	ltemp = 0;		/* don't fall off front end of file */
      ptr->cur_start_row = (JDIMENSION) ltemp;
    }
    /* Read in the selected part of the array.
     * During the initial write pass, we will do no actual read
     * because the selected part is all undefined.
     */
    do_sarray_io(cinfo, ptr, FALSE);
  }
  /* Ensure the accessed part of the array is defined; prezero if needed.
   * To improve locality of access, we only prezero the part of the array
   * that the caller is about to access, not the entire in-memory array.
   */
  if (ptr->first_undef_row < end_row) {
    if (ptr->first_undef_row < start_row) {
      if (writable)		/* writer skipped over a section of array */
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
      undef_row = start_row;	/* but reader is allowed to read ahead */
    } else {
      undef_row = ptr->first_undef_row;
    }
    if (writable)
      ptr->first_undef_row = end_row;
    if (ptr->pre_zero) {
      size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
      end_row -= ptr->cur_start_row;
      while (undef_row < end_row) {
	jzero_far((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
	undef_row++;
      }
    } else {
      if (! writable)		/* reader looking at undefined data */
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
    }
  }
  /* Flag the buffer dirty if caller will write in it */
  if (writable)
    ptr->dirty = TRUE;
  /* Return address of proper part of the buffer */
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
}


METHODDEF(JBLOCKARRAY)
access_virt_barray (j_common_ptr cinfo, jvirt_barray_ptr ptr,
		    JDIMENSION start_row, JDIMENSION num_rows,
		    boolean writable)
/* Access the part of a virtual block array starting at start_row */
/* and extending for num_rows rows.  writable is true if  */
/* caller intends to modify the accessed area. */
{
  JDIMENSION end_row = start_row + num_rows;
  JDIMENSION undef_row;

  /* debugging check */
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
      ptr->mem_buffer == NULL)
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);

  /* Make the desired part of the virtual array accessible */
  if (start_row < ptr->cur_start_row ||
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
    if (! ptr->b_s_open)
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
    /* Flush old buffer contents if necessary */
    if (ptr->dirty) {
      do_barray_io(cinfo, ptr, TRUE);
      ptr->dirty = FALSE;
    }
    /* Decide what part of virtual array to access.
     * Algorithm: if target address > current window, assume forward scan,
     * load starting at target address.  If target address < current window,
     * assume backward scan, load so that target area is top of window.
     * Note that when switching from forward write to forward read, will have
     * start_row = 0, so the limiting case applies and we load from 0 anyway.
     */
    if (start_row > ptr->cur_start_row) {
      ptr->cur_start_row = start_row;
    } else {
      /* use long arithmetic here to avoid overflow & unsigned problems */
      long ltemp;

      ltemp = (long) end_row - (long) ptr->rows_in_mem;
      if (ltemp < 0)
	ltemp = 0;		/* don't fall off front end of file */
      ptr->cur_start_row = (JDIMENSION) ltemp;
    }
    /* Read in the selected part of the array.
     * During the initial write pass, we will do no actual read
     * because the selected part is all undefined.
     */
    do_barray_io(cinfo, ptr, FALSE);
  }
  /* Ensure the accessed part of the array is defined; prezero if needed.
   * To improve locality of access, we only prezero the part of the array
   * that the caller is about to access, not the entire in-memory array.
   */
  if (ptr->first_undef_row < end_row) {
    if (ptr->first_undef_row < start_row) {
      if (writable)		/* writer skipped over a section of array */
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
      undef_row = start_row;	/* but reader is allowed to read ahead */
    } else {
      undef_row = ptr->first_undef_row;
    }
    if (writable)
      ptr->first_undef_row = end_row;
    if (ptr->pre_zero) {
      size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
      end_row -= ptr->cur_start_row;
      while (undef_row < end_row) {
	jzero_far((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
	undef_row++;
      }
    } else {
      if (! writable)		/* reader looking at undefined data */
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
    }
  }
  /* Flag the buffer dirty if caller will write in it */
  if (writable)
    ptr->dirty = TRUE;
  /* Return address of proper part of the buffer */
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
}


/*
 * Release all objects belonging to a specified pool.
 */

METHODDEF(void)
free_pool (j_common_ptr cinfo, int pool_id)
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  small_pool_ptr shdr_ptr;
  large_pool_ptr lhdr_ptr;
  size_t space_freed;

  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */

#ifdef MEM_STATS
  if (cinfo->err->trace_level > 1)
    print_mem_stats(cinfo, pool_id); /* print pool's memory usage statistics */
#endif

  /* If freeing IMAGE pool, close any virtual arrays first */
  if (pool_id == JPOOL_IMAGE) {
    jvirt_sarray_ptr sptr;
    jvirt_barray_ptr bptr;

    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
      if (sptr->b_s_open) {	/* there may be no backing store */
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
      }
    }
    mem->virt_sarray_list = NULL;
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
      if (bptr->b_s_open) {	/* there may be no backing store */
	bptr->b_s_open = FALSE;	/* prevent recursive close if error */
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
      }
    }
    mem->virt_barray_list = NULL;
  }

  /* Release large objects */
  lhdr_ptr = mem->large_list[pool_id];
  mem->large_list[pool_id] = NULL;

  while (lhdr_ptr != NULL) {
    large_pool_ptr next_lhdr_ptr = lhdr_ptr->hdr.next;
    space_freed = lhdr_ptr->hdr.bytes_used +
		  lhdr_ptr->hdr.bytes_left +
		  SIZEOF(large_pool_hdr);
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
    mem->total_space_allocated -= space_freed;
    lhdr_ptr = next_lhdr_ptr;
  }

  /* Release small objects */
  shdr_ptr = mem->small_list[pool_id];
  mem->small_list[pool_id] = NULL;

  while (shdr_ptr != NULL) {
    small_pool_ptr next_shdr_ptr = shdr_ptr->hdr.next;
    space_freed = shdr_ptr->hdr.bytes_used +
		  shdr_ptr->hdr.bytes_left +
		  SIZEOF(small_pool_hdr);
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
    mem->total_space_allocated -= space_freed;
    shdr_ptr = next_shdr_ptr;
  }
}


/*
 * Close up shop entirely.
 * Note that this cannot be called unless cinfo->mem is non-NULL.
 */

METHODDEF(void)
self_destruct (j_common_ptr cinfo)
{
  int pool;

  /* Close all backing store, release all memory.
   * Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    free_pool(cinfo, pool);
  }

  /* Release the memory manager control block too. */
  jpeg_free_small(cinfo, (void *) cinfo->mem, SIZEOF(my_memory_mgr));
  cinfo->mem = NULL;		/* ensures I will be called only once */

  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
}


/*
 * Memory manager initialization.
 * When this is called, only the error manager pointer is valid in cinfo!
 */

GLOBAL(void)
jinit_memory_mgr (j_common_ptr cinfo)
{
  my_mem_ptr mem;
  long max_to_use;
  int pool;
  size_t test_mac;

  cinfo->mem = NULL;		/* for safety if init fails */

  /* Check for configuration errors.
   * SIZEOF(ALIGN_TYPE) should be a power of 2; otherwise, it probably
   * doesn't reflect any real hardware alignment requirement.
   * The test is a little tricky: for X>0, X and X-1 have no one-bits
   * in common if and only if X is a power of 2, ie has only one one-bit.
   * Some compilers may give an "unreachable code" warning here; ignore it.
   */
  if ((SIZEOF(ALIGN_TYPE) & (SIZEOF(ALIGN_TYPE)-1)) != 0)
    ERREXIT(cinfo, JERR_BAD_ALIGN_TYPE);
  /* MAX_ALLOC_CHUNK must be representable as type size_t, and must be
   * a multiple of SIZEOF(ALIGN_TYPE).
   * Again, an "unreachable code" warning may be ignored here.
   * But a "constant too large" warning means you need to fix MAX_ALLOC_CHUNK.
   */
  test_mac = (size_t) MAX_ALLOC_CHUNK;
  if ((long) test_mac != MAX_ALLOC_CHUNK ||
      (MAX_ALLOC_CHUNK % SIZEOF(ALIGN_TYPE)) != 0)
    ERREXIT(cinfo, JERR_BAD_ALLOC_CHUNK);

  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */

  /* Attempt to allocate memory manager's control block */
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));

  if (mem == NULL) {
    jpeg_mem_term(cinfo);	/* system-dependent cleanup */
    ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 0);
  }

  /* OK, fill in the method pointers */
  mem->pub.alloc_small = alloc_small;
  mem->pub.alloc_large = alloc_large;
  mem->pub.alloc_sarray = alloc_sarray;
  mem->pub.alloc_barray = alloc_barray;
  mem->pub.request_virt_sarray = request_virt_sarray;
  mem->pub.request_virt_barray = request_virt_barray;
  mem->pub.realize_virt_arrays = realize_virt_arrays;
  mem->pub.access_virt_sarray = access_virt_sarray;
  mem->pub.access_virt_barray = access_virt_barray;
  mem->pub.free_pool = free_pool;
  mem->pub.self_destruct = self_destruct;

  /* Initialize working state */
  mem->pub.max_memory_to_use = max_to_use;

  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    mem->small_list[pool] = NULL;
    mem->large_list[pool] = NULL;
  }
  mem->virt_sarray_list = NULL;
  mem->virt_barray_list = NULL;

  mem->total_space_allocated = SIZEOF(my_memory_mgr);

  /* Declare ourselves open for business */
  cinfo->mem = & mem->pub;

  /* Check for an environment variable JPEGMEM; if found, override the
   * default max_memory setting from jpeg_mem_init.  Note that the
   * surrounding application may again override this value.
   * If your system doesn't support getenv(), define NO_GETENV to disable
   * this feature.
   */
#ifndef NO_GETENV
  { char * memenv;

    if ((memenv = getenv("JPEGMEM")) != NULL) {
      char ch = 'x';

      if (sscanf(memenv, "%ld%c", &max_to_use, &ch) > 0) {
	if (ch == 'm' || ch == 'M')
	  max_to_use *= 1000L;
	mem->pub.max_memory_to_use = max_to_use * 1000L;
      }
    }
  }
#endif

}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\jmemmac.c ===
/*
 * jmemmac.c
 *
 * Copyright (C) 1992-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * jmemmac.c provides an Apple Macintosh implementation of the system-
 * dependent portion of the JPEG memory manager.
 *
 * jmemmac.c uses the Macintosh toolbox routines NewPtr and DisposePtr
 * instead of malloc and free.  It accurately determines the amount of
 * memory available by using CompactMem.  Notice that if left to its
 * own devices, this code can chew up all available space in the
 * application's zone, with the exception of the rather small "slop"
 * factor computed in jpeg_mem_available().  The application can ensure
 * that more space is left over by reducing max_memory_to_use.
 *
 * Large images are swapped to disk using temporary files created with
 * tmpfile(); that part of the module is the same as in jmemansi.c.
 * Metrowerks CodeWarrior's implementation of tmpfile() isn't quite what
 * we want: it puts the files in the local directory and makes them
 * user-visible -- and only deletes them when the application quits,
 * which means they stick around in the event of a crash.
 * It would be better to create the temp files in the system's temporary
 * items folder.  Perhaps someday we'll get around to doing that.
 *
 * Contributed by Sam Bushell (jsam@iagu.on.net).
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jmemsys.h"		/* import the system-dependent declarations */

#include <Memory.h>		/* we use the MacOS memory manager */

#ifndef SEEK_SET		/* pre-ANSI systems may not define this; */
#define SEEK_SET  0		/* if not, assume 0 is correct */
#endif


/*
 * Memory allocation and freeing are controlled by the MacOS library
 * routines NewPtr() and DisposePtr(), which allocate fixed-address
 * storage.  Unfortunately, the IJG library isn't smart enough to cope
 * with relocatable storage.
 */

GLOBAL(void *)
jpeg_get_small (j_common_ptr cinfo, size_t sizeofobject)
{
  return (void *) NewPtr(sizeofobject);
}

GLOBAL(void)
jpeg_free_small (j_common_ptr cinfo, void * object, size_t sizeofobject)
{
  DisposePtr((Ptr) object);
}


/*
 * "Large" objects are treated the same as "small" ones.
 * NB: we include FAR keywords in the routine declarations simply for
 * consistency with the rest of the IJG code; FAR should expand to empty
 * on rational architectures like the Mac.
 */

GLOBAL(void FAR *)
jpeg_get_large (j_common_ptr cinfo, size_t sizeofobject)
{
  return (void FAR *) NewPtr(sizeofobject);
}

GLOBAL(void)
jpeg_free_large (j_common_ptr cinfo, void FAR * object, size_t sizeofobject)
{
  DisposePtr((Ptr) object);
}


/*
 * This routine computes the total memory space available for allocation.
 */

GLOBAL(long)
jpeg_mem_available (j_common_ptr cinfo, long min_bytes_needed,
		    long max_bytes_needed, long already_allocated)
{
  long limit = cinfo->mem->max_memory_to_use - already_allocated;
  long slop, mem;

  /* Don't ask for more than what application has told us we may use */
  if (max_bytes_needed > limit && limit > 0)
    max_bytes_needed = limit;
  /* Find whether there's a big enough free block in the heap.
   * CompactMem tries to create a contiguous block of the requested size,
   * and then returns the size of the largest free block (which could be
   * much more or much less than we asked for).
   * We add some slop to ensure we don't use up all available memory.
   */
  slop = max_bytes_needed / 16 + 32768L;
  mem = CompactMem(max_bytes_needed + slop) - slop;
  if (mem < 0)
    mem = 0;			/* sigh, couldn't even get the slop */
  /* Don't take more than the application says we can have */
  if (mem > limit && limit > 0)
    mem = limit;
  return mem;
}


/*
 * Backing store (temporary file) management.
 * Backing store objects are only used when the value returned by
 * jpeg_mem_available is less than the total space needed.  You can dispense
 * with these routines if you have plenty of virtual memory; see jmemnobs.c.
 */


METHODDEF(void)
read_backing_store (j_common_ptr cinfo, backing_store_ptr info,
		    void FAR * buffer_address,
		    long file_offset, long byte_count)
{
  if (fseek(info->temp_file, file_offset, SEEK_SET))
    ERREXIT(cinfo, JERR_TFILE_SEEK);
  if (JFREAD(info->temp_file, buffer_address, byte_count)
      != (size_t) byte_count)
    ERREXIT(cinfo, JERR_TFILE_READ);
}


METHODDEF(void)
write_backing_store (j_common_ptr cinfo, backing_store_ptr info,
		     void FAR * buffer_address,
		     long file_offset, long byte_count)
{
  if (fseek(info->temp_file, file_offset, SEEK_SET))
    ERREXIT(cinfo, JERR_TFILE_SEEK);
  if (JFWRITE(info->temp_file, buffer_address, byte_count)
      != (size_t) byte_count)
    ERREXIT(cinfo, JERR_TFILE_WRITE);
}


METHODDEF(void)
close_backing_store (j_common_ptr cinfo, backing_store_ptr info)
{
  fclose(info->temp_file);
  /* Since this implementation uses tmpfile() to create the file,
   * no explicit file deletion is needed.
   */
}


/*
 * Initial opening of a backing-store object.
 *
 * This version uses tmpfile(), which constructs a suitable file name
 * behind the scenes.  We don't have to use info->temp_name[] at all;
 * indeed, we can't even find out the actual name of the temp file.
 */

GLOBAL(void)
jpeg_open_backing_store (j_common_ptr cinfo, backing_store_ptr info,
			 long total_bytes_needed)
{
  if ((info->temp_file = tmpfile()) == NULL)
    ERREXITS(cinfo, JERR_TFILE_CREATE, "");
  info->read_backing_store = read_backing_store;
  info->write_backing_store = write_backing_store;
  info->close_backing_store = close_backing_store;
}


/*
 * These routines take care of any system-dependent initialization and
 * cleanup required.
 */

GLOBAL(long)
jpeg_mem_init (j_common_ptr cinfo)
{
  /* max_memory_to_use will be initialized to FreeMem()'s result;
   * the calling application might later reduce it, for example
   * to leave room to invoke multiple JPEG objects.
   * Note that FreeMem returns the total number of free bytes;
   * it may not be possible to allocate a single block of this size.
   */
  return FreeMem();
}

GLOBAL(void)
jpeg_mem_term (j_common_ptr cinfo)
{
  /* no work */
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\jmemnobs.c ===
/*
 * jmemnobs.c
 *
 * Copyright (C) 1992-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file provides a really simple implementation of the system-
 * dependent portion of the JPEG memory manager.  This implementation
 * assumes that no backing-store files are needed: all required space
 * can be obtained from malloc().
 * This is very portable in the sense that it'll compile on almost anything,
 * but you'd better have lots of main memory (or virtual memory) if you want
 * to process big images.
 * Note that the max_memory_to_use option is ignored by this implementation.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jmemsys.h"		/* import the system-dependent declarations */

#ifndef HAVE_STDLIB_H		/* <stdlib.h> should declare malloc(),free() */
extern void * malloc JPP((size_t size));
extern void free JPP((void *ptr));
#endif


/*
 * Memory allocation and freeing are controlled by the regular library
 * routines malloc() and free().
 */

GLOBAL(void *)
jpeg_get_small (j_common_ptr cinfo, size_t sizeofobject)
{
  return (void *) malloc(sizeofobject);
}

GLOBAL(void)
jpeg_free_small (j_common_ptr cinfo, void * object, size_t sizeofobject)
{
  free(object);
}


/*
 * "Large" objects are treated the same as "small" ones.
 * NB: although we include FAR keywords in the routine declarations,
 * this file won't actually work in 80x86 small/medium model; at least,
 * you probably won't be able to process useful-size images in only 64KB.
 */

GLOBAL(void FAR *)
jpeg_get_large (j_common_ptr cinfo, size_t sizeofobject)
{
  return (void FAR *) malloc(sizeofobject);
}

GLOBAL(void)
jpeg_free_large (j_common_ptr cinfo, void FAR * object, size_t sizeofobject)
{
  free(object);
}


/*
 * This routine computes the total memory space available for allocation.
 * Here we always say, "we got all you want bud!"
 */

GLOBAL(long)
jpeg_mem_available (j_common_ptr cinfo, long min_bytes_needed,
		    long max_bytes_needed, long already_allocated)
{
  return max_bytes_needed;
}


/*
 * Backing store (temporary file) management.
 * Since jpeg_mem_available always promised the moon,
 * this should never be called and we can just error out.
 */

GLOBAL(void)
jpeg_open_backing_store (j_common_ptr cinfo, backing_store_ptr info,
			 long total_bytes_needed)
{
  ERREXIT(cinfo, JERR_NO_BACKING_STORE);
}


/*
 * These routines take care of any system-dependent initialization and
 * cleanup required.  Here, there isn't any.
 */

GLOBAL(long)
jpeg_mem_init (j_common_ptr cinfo)
{
  return 0;			/* just set max_memory_to_use to 0 */
}

GLOBAL(void)
jpeg_mem_term (j_common_ptr cinfo)
{
  /* no work */
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\jmemsys.h ===
/*
 * jmemsys.h
 *
 * Copyright (C) 1992-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This include file defines the interface between the system-independent
 * and system-dependent portions of the JPEG memory manager.  No other
 * modules need include it.  (The system-independent portion is jmemmgr.c;
 * there are several different versions of the system-dependent portion.)
 *
 * This file works as-is for the system-dependent memory managers supplied
 * in the IJG distribution.  You may need to modify it if you write a
 * custom memory manager.  If system-dependent changes are needed in
 * this file, the best method is to #ifdef them based on a configuration
 * symbol supplied in jconfig.h, as we have done with USE_MSDOS_MEMMGR.
 */


/* Short forms of external names for systems with brain-damaged linkers. */

#ifdef NEED_SHORT_EXTERNAL_NAMES
#define jpeg_get_small		jGetSmall
#define jpeg_free_small		jFreeSmall
#define jpeg_get_large		jGetLarge
#define jpeg_free_large		jFreeLarge
#define jpeg_mem_available	jMemAvail
#define jpeg_open_backing_store	jOpenBackStore
#define jpeg_mem_init		jMemInit
#define jpeg_mem_term		jMemTerm
#endif /* NEED_SHORT_EXTERNAL_NAMES */


/*
 * These two functions are used to allocate and release small chunks of
 * memory.  (Typically the total amount requested through jpeg_get_small is
 * no more than 20K or so; this will be requested in chunks of a few K each.)
 * Behavior should be the same as for the standard library functions malloc
 * and free; in particular, jpeg_get_small must return NULL on failure.
 * On most systems, these ARE malloc and free.  jpeg_free_small is passed the
 * size of the object being freed, just in case it's needed.
 * On an 80x86 machine using small-data memory model, these manage near heap.
 */

EXTERN(void *) jpeg_get_small JPP((j_common_ptr cinfo, size_t sizeofobject));
EXTERN(void) jpeg_free_small JPP((j_common_ptr cinfo, void * object,
				  size_t sizeofobject));

/*
 * These two functions are used to allocate and release large chunks of
 * memory (up to the total free space designated by jpeg_mem_available).
 * The interface is the same as above, except that on an 80x86 machine,
 * far pointers are used.  On most other machines these are identical to
 * the jpeg_get/free_small routines; but we keep them separate anyway,
 * in case a different allocation strategy is desirable for large chunks.
 */

EXTERN(void FAR *) jpeg_get_large JPP((j_common_ptr cinfo,
				       size_t sizeofobject));
EXTERN(void) jpeg_free_large JPP((j_common_ptr cinfo, void FAR * object,
				  size_t sizeofobject));

/*
 * The macro MAX_ALLOC_CHUNK designates the maximum number of bytes that may
 * be requested in a single call to jpeg_get_large (and jpeg_get_small for that
 * matter, but that case should never come into play).  This macro is needed
 * to model the 64Kb-segment-size limit of far addressing on 80x86 machines.
 * On those machines, we expect that jconfig.h will provide a proper value.
 * On machines with 32-bit flat address spaces, any large constant may be used.
 *
 * NB: jmemmgr.c expects that MAX_ALLOC_CHUNK will be representable as type
 * size_t and will be a multiple of sizeof(align_type).
 */

#ifndef MAX_ALLOC_CHUNK		/* may be overridden in jconfig.h */
#define MAX_ALLOC_CHUNK  1000000000L
#endif

/*
 * This routine computes the total space still available for allocation by
 * jpeg_get_large.  If more space than this is needed, backing store will be
 * used.  NOTE: any memory already allocated must not be counted.
 *
 * There is a minimum space requirement, corresponding to the minimum
 * feasible buffer sizes; jmemmgr.c will request that much space even if
 * jpeg_mem_available returns zero.  The maximum space needed, enough to hold
 * all working storage in memory, is also passed in case it is useful.
 * Finally, the total space already allocated is passed.  If no better
 * method is available, cinfo->mem->max_memory_to_use - already_allocated
 * is often a suitable calculation.
 *
 * It is OK for jpeg_mem_available to underestimate the space available
 * (that'll just lead to more backing-store access than is really necessary).
 * However, an overestimate will lead to failure.  Hence it's wise to subtract
 * a slop factor from the true available space.  5% should be enough.
 *
 * On machines with lots of virtual memory, any large constant may be returned.
 * Conversely, zero may be returned to always use the minimum amount of memory.
 */

EXTERN(long) jpeg_mem_available JPP((j_common_ptr cinfo,
				     long min_bytes_needed,
				     long max_bytes_needed,
				     long already_allocated));


/*
 * This structure holds whatever state is needed to access a single
 * backing-store object.  The read/write/close method pointers are called
 * by jmemmgr.c to manipulate the backing-store object; all other fields
 * are private to the system-dependent backing store routines.
 */

#define TEMP_NAME_LENGTH   64	/* max length of a temporary file's name */

#ifdef USE_MSDOS_MEMMGR		/* DOS-specific junk */

typedef unsigned short XMSH;	/* type of extended-memory handles */
typedef unsigned short EMSH;	/* type of expanded-memory handles */

typedef union {
  short file_handle;		/* DOS file handle if it's a temp file */
  XMSH xms_handle;		/* handle if it's a chunk of XMS */
  EMSH ems_handle;		/* handle if it's a chunk of EMS */
} handle_union;

#endif /* USE_MSDOS_MEMMGR */

typedef struct backing_store_struct * backing_store_ptr;

typedef struct backing_store_struct {
  /* Methods for reading/writing/closing this backing-store object */
  JMETHOD(void, read_backing_store, (j_common_ptr cinfo,
				     backing_store_ptr info,
				     void FAR * buffer_address,
				     long file_offset, long byte_count));
  JMETHOD(void, write_backing_store, (j_common_ptr cinfo,
				      backing_store_ptr info,
				      void FAR * buffer_address,
				      long file_offset, long byte_count));
  JMETHOD(void, close_backing_store, (j_common_ptr cinfo,
				      backing_store_ptr info));

  /* Private fields for system-dependent backing-store management */
#ifdef USE_MSDOS_MEMMGR
  /* For the MS-DOS manager (jmemdos.c), we need: */
  handle_union handle;		/* reference to backing-store storage object */
  char temp_name[TEMP_NAME_LENGTH]; /* name if it's a file */
#else
  /* For a typical implementation with temp files, we need: */
  FILE * temp_file;		/* stdio reference to temp file */
  char temp_name[TEMP_NAME_LENGTH]; /* name of temp file */
#endif
} backing_store_info;

/*
 * Initial opening of a backing-store object.  This must fill in the
 * read/write/close pointers in the object.  The read/write routines
 * may take an error exit if the specified maximum file size is exceeded.
 * (If jpeg_mem_available always returns a large value, this routine can
 * just take an error exit.)
 */

EXTERN(void) jpeg_open_backing_store JPP((j_common_ptr cinfo,
					  backing_store_ptr info,
					  long total_bytes_needed));


/*
 * These routines take care of any system-dependent initialization and
 * cleanup required.  jpeg_mem_init will be called before anything is
 * allocated (and, therefore, nothing in cinfo is of use except the error
 * manager pointer).  It should return a suitable default value for
 * max_memory_to_use; this may subsequently be overridden by the surrounding
 * application.  (Note that max_memory_to_use is only important if
 * jpeg_mem_available chooses to consult it ... no one else will.)
 * jpeg_mem_term may assume that all requested memory has been freed and that
 * all opened backing-store objects have been closed.
 */

EXTERN(long) jpeg_mem_init JPP((j_common_ptr cinfo));
EXTERN(void) jpeg_mem_term JPP((j_common_ptr cinfo));
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\jmemname.c ===
/*
 * jmemname.c
 *
 * Copyright (C) 1992-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file provides a generic implementation of the system-dependent
 * portion of the JPEG memory manager.  This implementation assumes that
 * you must explicitly construct a name for each temp file.
 * Also, the problem of determining the amount of memory available
 * is shoved onto the user.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jmemsys.h"		/* import the system-dependent declarations */

#ifndef HAVE_STDLIB_H		/* <stdlib.h> should declare malloc(),free() */
extern void * malloc JPP((size_t size));
extern void free JPP((void *ptr));
#endif

#ifndef SEEK_SET		/* pre-ANSI systems may not define this; */
#define SEEK_SET  0		/* if not, assume 0 is correct */
#endif

#ifdef DONT_USE_B_MODE		/* define mode parameters for fopen() */
#define READ_BINARY	"r"
#define RW_BINARY	"w+"
#else
#define READ_BINARY	"rb"
#define RW_BINARY	"w+b"
#endif


/*
 * Selection of a file name for a temporary file.
 * This is system-dependent!
 *
 * The code as given is suitable for most Unix systems, and it is easily
 * modified for most non-Unix systems.  Some notes:
 *  1.  The temp file is created in the directory named by TEMP_DIRECTORY.
 *      The default value is /usr/tmp, which is the conventional place for
 *      creating large temp files on Unix.  On other systems you'll probably
 *      want to change the file location.  You can do this by editing the
 *      #define, or (preferred) by defining TEMP_DIRECTORY in jconfig.h.
 *
 *  2.  If you need to change the file name as well as its location,
 *      you can override the TEMP_FILE_NAME macro.  (Note that this is
 *      actually a printf format string; it must contain %s and %d.)
 *      Few people should need to do this.
 *
 *  3.  mktemp() is used to ensure that multiple processes running
 *      simultaneously won't select the same file names.  If your system
 *      doesn't have mktemp(), define NO_MKTEMP to do it the hard way.
 *      (If you don't have <errno.h>, also define NO_ERRNO_H.)
 *
 *  4.  You probably want to define NEED_SIGNAL_CATCHER so that cjpeg.c/djpeg.c
 *      will cause the temp files to be removed if you stop the program early.
 */

#ifndef TEMP_DIRECTORY		/* can override from jconfig.h or Makefile */
#define TEMP_DIRECTORY  "/usr/tmp/" /* recommended setting for Unix */
#endif

static int next_file_num;	/* to distinguish among several temp files */

#ifdef NO_MKTEMP

#ifndef TEMP_FILE_NAME		/* can override from jconfig.h or Makefile */
#define TEMP_FILE_NAME  "%sJPG%03d.TMP"
#endif

#ifndef NO_ERRNO_H
#include <errno.h>		/* to define ENOENT */
#endif

/* ANSI C specifies that errno is a macro, but on older systems it's more
 * likely to be a plain int variable.  And not all versions of errno.h
 * bother to declare it, so we have to in order to be most portable.  Thus:
 */
#ifndef errno
extern int errno;
#endif


LOCAL(void)
select_file_name (char * fname)
{
  FILE * tfile;

  /* Keep generating file names till we find one that's not in use */
  for (;;) {
    next_file_num++;		/* advance counter */
    sprintf(fname, TEMP_FILE_NAME, TEMP_DIRECTORY, next_file_num);
    if ((tfile = fopen(fname, READ_BINARY)) == NULL) {
      /* fopen could have failed for a reason other than the file not
       * being there; for example, file there but unreadable.
       * If <errno.h> isn't available, then we cannot test the cause.
       */
#ifdef ENOENT
      if (errno != ENOENT)
	continue;
#endif
      break;
    }
    fclose(tfile);		/* oops, it's there; close tfile & try again */
  }
}

#else /* ! NO_MKTEMP */

/* Note that mktemp() requires the initial filename to end in six X's */
#ifndef TEMP_FILE_NAME		/* can override from jconfig.h or Makefile */
#define TEMP_FILE_NAME  "%sJPG%dXXXXXX"
#endif

LOCAL(void)
select_file_name (char * fname)
{
  next_file_num++;		/* advance counter */
  sprintf(fname, TEMP_FILE_NAME, TEMP_DIRECTORY, next_file_num);
  mktemp(fname);		/* make sure file name is unique */
  /* mktemp replaces the trailing XXXXXX with a unique string of characters */
}

#endif /* NO_MKTEMP */


/*
 * Memory allocation and freeing are controlled by the regular library
 * routines malloc() and free().
 */

GLOBAL(void *)
jpeg_get_small (j_common_ptr cinfo, size_t sizeofobject)
{
  return (void *) malloc(sizeofobject);
}

GLOBAL(void)
jpeg_free_small (j_common_ptr cinfo, void * object, size_t sizeofobject)
{
  free(object);
}


/*
 * "Large" objects are treated the same as "small" ones.
 * NB: although we include FAR keywords in the routine declarations,
 * this file won't actually work in 80x86 small/medium model; at least,
 * you probably won't be able to process useful-size images in only 64KB.
 */

GLOBAL(void FAR *)
jpeg_get_large (j_common_ptr cinfo, size_t sizeofobject)
{
  return (void FAR *) malloc(sizeofobject);
}

GLOBAL(void)
jpeg_free_large (j_common_ptr cinfo, void FAR * object, size_t sizeofobject)
{
  free(object);
}


/*
 * This routine computes the total memory space available for allocation.
 * It's impossible to do this in a portable way; our current solution is
 * to make the user tell us (with a default value set at compile time).
 * If you can actually get the available space, it's a good idea to subtract
 * a slop factor of 5% or so.
 */

#ifndef DEFAULT_MAX_MEM		/* so can override from makefile */
#define DEFAULT_MAX_MEM		1000000L /* default: one megabyte */
#endif

GLOBAL(long)
jpeg_mem_available (j_common_ptr cinfo, long min_bytes_needed,
		    long max_bytes_needed, long already_allocated)
{
  return cinfo->mem->max_memory_to_use - already_allocated;
}


/*
 * Backing store (temporary file) management.
 * Backing store objects are only used when the value returned by
 * jpeg_mem_available is less than the total space needed.  You can dispense
 * with these routines if you have plenty of virtual memory; see jmemnobs.c.
 */


METHODDEF(void)
read_backing_store (j_common_ptr cinfo, backing_store_ptr info,
		    void FAR * buffer_address,
		    long file_offset, long byte_count)
{
  if (fseek(info->temp_file, file_offset, SEEK_SET))
    ERREXIT(cinfo, JERR_TFILE_SEEK);
  if (JFREAD(info->temp_file, buffer_address, byte_count)
      != (size_t) byte_count)
    ERREXIT(cinfo, JERR_TFILE_READ);
}


METHODDEF(void)
write_backing_store (j_common_ptr cinfo, backing_store_ptr info,
		     void FAR * buffer_address,
		     long file_offset, long byte_count)
{
  if (fseek(info->temp_file, file_offset, SEEK_SET))
    ERREXIT(cinfo, JERR_TFILE_SEEK);
  if (JFWRITE(info->temp_file, buffer_address, byte_count)
      != (size_t) byte_count)
    ERREXIT(cinfo, JERR_TFILE_WRITE);
}


METHODDEF(void)
close_backing_store (j_common_ptr cinfo, backing_store_ptr info)
{
  fclose(info->temp_file);	/* close the file */
  unlink(info->temp_name);	/* delete the file */
/* If your system doesn't have unlink(), use remove() instead.
 * remove() is the ANSI-standard name for this function, but if
 * your system was ANSI you'd be using jmemansi.c, right?
 */
  TRACEMSS(cinfo, 1, JTRC_TFILE_CLOSE, info->temp_name);
}


/*
 * Initial opening of a backing-store object.
 */

GLOBAL(void)
jpeg_open_backing_store (j_common_ptr cinfo, backing_store_ptr info,
			 long total_bytes_needed)
{
  select_file_name(info->temp_name);
  if ((info->temp_file = fopen(info->temp_name, RW_BINARY)) == NULL)
    ERREXITS(cinfo, JERR_TFILE_CREATE, info->temp_name);
  info->read_backing_store = read_backing_store;
  info->write_backing_store = write_backing_store;
  info->close_backing_store = close_backing_store;
  TRACEMSS(cinfo, 1, JTRC_TFILE_OPEN, info->temp_name);
}


/*
 * These routines take care of any system-dependent initialization and
 * cleanup required.
 */

GLOBAL(long)
jpeg_mem_init (j_common_ptr cinfo)
{
  next_file_num = 0;		/* initialize temp file name generator */
  return DEFAULT_MAX_MEM;	/* default for max_memory_to_use */
}

GLOBAL(void)
jpeg_mem_term (j_common_ptr cinfo)
{
  /* no work */
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\jpegint.h ===
/*
 * jpegint.h
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file provides common declarations for the various JPEG modules.
 * These declarations are considered internal to the JPEG library; most
 * applications using the library shouldn't need to include this file.
 */


/* Declarations for both compression & decompression */

typedef enum {			/* Operating modes for buffer controllers */
	JBUF_PASS_THRU,		/* Plain stripwise operation */
	/* Remaining modes require a full-image buffer to have been created */
	JBUF_SAVE_SOURCE,	/* Run source subobject only, save output */
	JBUF_CRANK_DEST,	/* Run dest subobject only, using saved data */
	JBUF_SAVE_AND_PASS	/* Run both subobjects, save output */
} J_BUF_MODE;

/* Values of global_state field (jdapi.c has some dependencies on ordering!) */
#define CSTATE_START	100	/* after create_compress */
#define CSTATE_SCANNING	101	/* start_compress done, write_scanlines OK */
#define CSTATE_RAW_OK	102	/* start_compress done, write_raw_data OK */
#define CSTATE_WRCOEFS	103	/* jpeg_write_coefficients done */
#define DSTATE_START	200	/* after create_decompress */
#define DSTATE_INHEADER	201	/* reading header markers, no SOS yet */
#define DSTATE_READY	202	/* found SOS, ready for start_decompress */
#define DSTATE_PRELOAD	203	/* reading multiscan file in start_decompress*/
#define DSTATE_PRESCAN	204	/* performing dummy pass for 2-pass quant */
#define DSTATE_SCANNING	205	/* start_decompress done, read_scanlines OK */
#define DSTATE_RAW_OK	206	/* start_decompress done, read_raw_data OK */
#define DSTATE_BUFIMAGE	207	/* expecting jpeg_start_output */
#define DSTATE_BUFPOST	208	/* looking for SOS/EOI in jpeg_finish_output */
#define DSTATE_RDCOEFS	209	/* reading file in jpeg_read_coefficients */
#define DSTATE_STOPPING	210	/* looking for EOI in jpeg_finish_decompress */


/* Declarations for compression modules */

/* Master control module */
struct jpeg_comp_master {
  JMETHOD(void, prepare_for_pass, (j_compress_ptr cinfo));
  JMETHOD(void, pass_startup, (j_compress_ptr cinfo));
  JMETHOD(void, finish_pass, (j_compress_ptr cinfo));

  /* State variables made visible to other modules */
  boolean call_pass_startup;	/* True if pass_startup must be called */
  boolean is_last_pass;		/* True during last pass */
};

/* Main buffer control (downsampled-data buffer) */
struct jpeg_c_main_controller {
  JMETHOD(void, start_pass, (j_compress_ptr cinfo, J_BUF_MODE pass_mode));
  JMETHOD(void, process_data, (j_compress_ptr cinfo,
			       JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
			       JDIMENSION in_rows_avail));
};

/* Compression preprocessing (downsampling input buffer control) */
struct jpeg_c_prep_controller {
  JMETHOD(void, start_pass, (j_compress_ptr cinfo, J_BUF_MODE pass_mode));
  JMETHOD(void, pre_process_data, (j_compress_ptr cinfo,
				   JSAMPARRAY input_buf,
				   JDIMENSION *in_row_ctr,
				   JDIMENSION in_rows_avail,
				   JSAMPIMAGE output_buf,
				   JDIMENSION *out_row_group_ctr,
				   JDIMENSION out_row_groups_avail));
};

/* Coefficient buffer control */
struct jpeg_c_coef_controller {
  JMETHOD(void, start_pass, (j_compress_ptr cinfo, J_BUF_MODE pass_mode));
  JMETHOD(boolean, compress_data, (j_compress_ptr cinfo,
				   JSAMPIMAGE input_buf));
};

/* Colorspace conversion */
struct jpeg_color_converter {
  JMETHOD(void, start_pass, (j_compress_ptr cinfo));
  JMETHOD(void, color_convert, (j_compress_ptr cinfo,
				JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
				JDIMENSION output_row, int num_rows));
};

/* Downsampling */
struct jpeg_downsampler {
  JMETHOD(void, start_pass, (j_compress_ptr cinfo));
  JMETHOD(void, downsample, (j_compress_ptr cinfo,
			     JSAMPIMAGE input_buf, JDIMENSION in_row_index,
			     JSAMPIMAGE output_buf,
			     JDIMENSION out_row_group_index));

  boolean need_context_rows;	/* TRUE if need rows above & below */
};

/* Forward DCT (also controls coefficient quantization) */
struct jpeg_forward_dct {
  JMETHOD(void, start_pass, (j_compress_ptr cinfo));
  /* perhaps this should be an array??? */
  JMETHOD(void, forward_DCT, (j_compress_ptr cinfo,
			      jpeg_component_info * compptr,
			      JSAMPARRAY sample_data, JBLOCKROW coef_blocks,
			      JDIMENSION start_row, JDIMENSION start_col,
			      JDIMENSION num_blocks));
};

/* Entropy encoding */
struct jpeg_entropy_encoder {
  JMETHOD(void, start_pass, (j_compress_ptr cinfo, boolean gather_statistics));
  JMETHOD(boolean, encode_mcu, (j_compress_ptr cinfo, JBLOCKROW *MCU_data));
  JMETHOD(void, finish_pass, (j_compress_ptr cinfo));
};

/* Marker writing */
struct jpeg_marker_writer {
  /* write_any_marker is exported for use by applications */
  /* Probably only COM and APPn markers should be written */
  JMETHOD(void, write_any_marker, (j_compress_ptr cinfo, int marker,
				   const JOCTET *dataptr, unsigned int datalen));
  JMETHOD(void, write_file_header, (j_compress_ptr cinfo));
  JMETHOD(void, write_frame_header, (j_compress_ptr cinfo));
  JMETHOD(void, write_scan_header, (j_compress_ptr cinfo));
  JMETHOD(void, write_file_trailer, (j_compress_ptr cinfo));
  JMETHOD(void, write_tables_only, (j_compress_ptr cinfo));
};


/* Declarations for decompression modules */

/* Master control module */
struct jpeg_decomp_master {
  JMETHOD(void, prepare_for_output_pass, (j_decompress_ptr cinfo));
  JMETHOD(void, finish_output_pass, (j_decompress_ptr cinfo));

  /* State variables made visible to other modules */
  boolean is_dummy_pass;	/* True during 1st pass for 2-pass quant */
};

/* Input control module */
struct jpeg_input_controller {
  JMETHOD(int, consume_input, (j_decompress_ptr cinfo));
  JMETHOD(void, reset_input_controller, (j_decompress_ptr cinfo));
  JMETHOD(void, start_input_pass, (j_decompress_ptr cinfo));
  JMETHOD(void, finish_input_pass, (j_decompress_ptr cinfo));

  /* State variables made visible to other modules */
  boolean has_multiple_scans;	/* True if file has multiple scans */
  boolean eoi_reached;		/* True when EOI has been consumed */
};

/* Main buffer control (downsampled-data buffer) */
struct jpeg_d_main_controller {
  JMETHOD(void, start_pass, (j_decompress_ptr cinfo, J_BUF_MODE pass_mode));
  JMETHOD(void, process_data, (j_decompress_ptr cinfo,
			       JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			       JDIMENSION out_rows_avail));
};

/* Coefficient buffer control */
struct jpeg_d_coef_controller {
  JMETHOD(void, start_input_pass, (j_decompress_ptr cinfo));
  JMETHOD(int, consume_data, (j_decompress_ptr cinfo));
  JMETHOD(void, start_output_pass, (j_decompress_ptr cinfo));
  JMETHOD(int, decompress_data, (j_decompress_ptr cinfo,
				 JSAMPIMAGE output_buf));
  /* Pointer to array of coefficient virtual arrays, or NULL if none */
  jvirt_barray_ptr *coef_arrays;
};

/* Decompression postprocessing (color quantization buffer control) */
struct jpeg_d_post_controller {
  JMETHOD(void, start_pass, (j_decompress_ptr cinfo, J_BUF_MODE pass_mode));
  JMETHOD(void, post_process_data, (j_decompress_ptr cinfo,
				    JSAMPIMAGE input_buf,
				    JDIMENSION *in_row_group_ctr,
				    JDIMENSION in_row_groups_avail,
				    JSAMPARRAY output_buf,
				    JDIMENSION *out_row_ctr,
				    JDIMENSION out_rows_avail));
};

/* Marker reading & parsing */
struct jpeg_marker_reader {
  JMETHOD(void, reset_marker_reader, (j_decompress_ptr cinfo));
  /* Read markers until SOS or EOI.
   * Returns same codes as are defined for jpeg_consume_input:
   * JPEG_SUSPENDED, JPEG_REACHED_SOS, or JPEG_REACHED_EOI.
   */
  JMETHOD(int, read_markers, (j_decompress_ptr cinfo));
  /* Read a restart marker --- exported for use by entropy decoder only */
  jpeg_marker_parser_method read_restart_marker;
  /* Application-overridable marker processing methods */
  jpeg_marker_parser_method process_COM;
  jpeg_marker_parser_method process_APPn[16];

  /* State of marker reader --- nominally internal, but applications
   * supplying COM or APPn handlers might like to know the state.
   */
  boolean saw_SOI;		/* found SOI? */
  boolean saw_SOF;		/* found SOF? */
  int next_restart_num;		/* next restart number expected (0-7) */
  unsigned int discarded_bytes;	/* # of bytes skipped looking for a marker */
};

/* Entropy decoding */
struct jpeg_entropy_decoder {
  JMETHOD(void, start_pass, (j_decompress_ptr cinfo));
  boolean (__cdecl *decode_mcu)(j_decompress_ptr cinfo,	JBLOCKROW *MCU_data);
};

/* Inverse DCT (also performs dequantization) */
typedef JMETHOD(void, inverse_DCT_method_ptr,
		(j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col));

struct jpeg_inverse_dct {
  JMETHOD(void, start_pass, (j_decompress_ptr cinfo));
  /* It is useful to allow each component to have a separate IDCT method. */
  inverse_DCT_method_ptr inverse_DCT[MAX_COMPONENTS];
};

/* Upsampling (note that upsampler must also call color converter) */
struct jpeg_upsampler {
  JMETHOD(void, start_pass, (j_decompress_ptr cinfo));
  JMETHOD(void, upsample, (j_decompress_ptr cinfo,
			   JSAMPIMAGE input_buf,
			   JDIMENSION *in_row_group_ctr,
			   JDIMENSION in_row_groups_avail,
			   JSAMPARRAY output_buf,
			   JDIMENSION *out_row_ctr,
			   JDIMENSION out_rows_avail));

  boolean need_context_rows;	/* TRUE if need rows above & below */
};

/* Colorspace conversion */
struct jpeg_color_deconverter {
  JMETHOD(void, start_pass, (j_decompress_ptr cinfo));
  JMETHOD(void, color_convert, (j_decompress_ptr cinfo,
				JSAMPIMAGE input_buf, JDIMENSION input_row,
				JSAMPARRAY output_buf, int num_rows));
};

/* Color quantization or color precision reduction */
struct jpeg_color_quantizer {
  JMETHOD(void, start_pass, (j_decompress_ptr cinfo, boolean is_pre_scan));
  JMETHOD(void, color_quantize, (j_decompress_ptr cinfo,
				 JSAMPARRAY input_buf, JSAMPARRAY output_buf,
				 int num_rows));
  JMETHOD(void, finish_pass, (j_decompress_ptr cinfo));
  JMETHOD(void, new_color_map, (j_decompress_ptr cinfo));
};


/* Miscellaneous useful macros */

#undef MAX
#define MAX(a,b)	((a) > (b) ? (a) : (b))
#undef MIN
#define MIN(a,b)	((a) < (b) ? (a) : (b))


/* We assume that right shift corresponds to signed division by 2 with
 * rounding towards minus infinity.  This is correct for typical "arithmetic
 * shift" instructions that shift in copies of the sign bit.  But some
 * C compilers implement >> with an unsigned shift.  For these machines you
 * must define RIGHT_SHIFT_IS_UNSIGNED.
 * RIGHT_SHIFT provides a proper signed right shift of an INT32 quantity.
 * It is only applied with constant shift counts.  SHIFT_TEMPS must be
 * included in the variables of any routine using RIGHT_SHIFT.
 */

#ifdef RIGHT_SHIFT_IS_UNSIGNED
#define SHIFT_TEMPS	INT32 shift_temp;
#define RIGHT_SHIFT(x,shft)  \
	((shift_temp = (x)) < 0 ? \
	 (shift_temp >> (shft)) | ((~((INT32) 0)) << (32-(shft))) : \
	 (shift_temp >> (shft)))
#else
#define SHIFT_TEMPS
#define RIGHT_SHIFT(x,shft)	((x) >> (shft))
#endif


/* Short forms of external names for systems with brain-damaged linkers. */

#ifdef NEED_SHORT_EXTERNAL_NAMES
#define jinit_compress_master	jICompress
#define jinit_c_master_control	jICMaster
#define jinit_c_main_controller	jICMainC
#define jinit_c_prep_controller	jICPrepC
#define jinit_c_coef_controller	jICCoefC
#define jinit_color_converter	jICColor
#define jinit_downsampler	jIDownsampler
#define jinit_forward_dct	jIFDCT
#define jinit_huff_encoder	jIHEncoder
#define jinit_phuff_encoder	jIPHEncoder
#define jinit_marker_writer	jIMWriter
#define jinit_master_decompress	jIDMaster
#define jinit_d_main_controller	jIDMainC
#define jinit_d_coef_controller	jIDCoefC
#define jinit_d_post_controller	jIDPostC
#define jinit_input_controller	jIInCtlr
#define jinit_marker_reader	jIMReader
#define jinit_huff_decoder	jIHDecoder
#define jinit_phuff_decoder	jIPHDecoder
#define jinit_inverse_dct	jIIDCT
#define jinit_upsampler		jIUpsampler
#define jinit_color_deconverter	jIDColor
#define jinit_1pass_quantizer	jI1Quant
#define jinit_2pass_quantizer	jI2Quant
#define jinit_merged_upsampler	jIMUpsampler
#define jinit_memory_mgr	jIMemMgr
#define jdiv_round_up		jDivRound
#define jround_up		jRound
#define jcopy_sample_rows	jCopySamples
#define jcopy_block_row		jCopyBlocks
#define jzero_far		jZeroFar
#define jpeg_zigzag_order	jZIGTable
#define jpeg_natural_order	jZAGTable
#endif /* NEED_SHORT_EXTERNAL_NAMES */


/* Compression module initialization routines */
EXTERN(void) jinit_compress_master JPP((j_compress_ptr cinfo));
EXTERN(void) jinit_c_master_control JPP((j_compress_ptr cinfo,
					 boolean transcode_only));
EXTERN(void) jinit_c_main_controller JPP((j_compress_ptr cinfo,
					  boolean need_full_buffer));
EXTERN(void) jinit_c_prep_controller JPP((j_compress_ptr cinfo,
					  boolean need_full_buffer));
EXTERN(void) jinit_c_coef_controller JPP((j_compress_ptr cinfo,
					  boolean need_full_buffer));
EXTERN(void) jinit_color_converter JPP((j_compress_ptr cinfo));
EXTERN(void) jinit_downsampler JPP((j_compress_ptr cinfo));
EXTERN(void) jinit_forward_dct JPP((j_compress_ptr cinfo));
EXTERN(void) jinit_huff_encoder JPP((j_compress_ptr cinfo));
EXTERN(void) jinit_phuff_encoder JPP((j_compress_ptr cinfo));
EXTERN(void) jinit_marker_writer JPP((j_compress_ptr cinfo));
/* Decompression module initialization routines */
EXTERN(void) jinit_master_decompress JPP((j_decompress_ptr cinfo));
EXTERN(void) jinit_d_main_controller JPP((j_decompress_ptr cinfo,
					  boolean need_full_buffer));
EXTERN(void) jinit_d_coef_controller JPP((j_decompress_ptr cinfo,
					  boolean need_full_buffer));
EXTERN(void) jinit_d_post_controller JPP((j_decompress_ptr cinfo,
					  boolean need_full_buffer));
EXTERN(void) jinit_input_controller JPP((j_decompress_ptr cinfo));
EXTERN(void) jinit_marker_reader JPP((j_decompress_ptr cinfo));
EXTERN(void) jinit_huff_decoder JPP((j_decompress_ptr cinfo));
EXTERN(void) jinit_phuff_decoder JPP((j_decompress_ptr cinfo));
EXTERN(void) jinit_inverse_dct JPP((j_decompress_ptr cinfo));
EXTERN(void) jinit_upsampler JPP((j_decompress_ptr cinfo));
EXTERN(void) jinit_color_deconverter JPP((j_decompress_ptr cinfo));
EXTERN(void) jinit_1pass_quantizer JPP((j_decompress_ptr cinfo));
EXTERN(void) jinit_2pass_quantizer JPP((j_decompress_ptr cinfo));
EXTERN(void) jinit_merged_upsampler JPP((j_decompress_ptr cinfo));
/* Memory manager initialization */
EXTERN(void) jinit_memory_mgr JPP((j_common_ptr cinfo));

/* Utility routines in jutils.c */
EXTERN(long) jdiv_round_up JPP((long a, long b));
EXTERN(long) jround_up JPP((long a, long b));
EXTERN(void) jcopy_sample_rows JPP((JSAMPARRAY input_array, int source_row,
				    JSAMPARRAY output_array, int dest_row,
				    int num_rows, JDIMENSION num_cols));
EXTERN(void) jcopy_block_row JPP((JBLOCKROW input_row, JBLOCKROW output_row,
				  JDIMENSION num_blocks));
EXTERN(void) jzero_far JPP((void FAR * target, size_t bytestozero));
EXTERN(int)  IsMMX JPP((void));

/* Constant tables in jutils.c */
extern const int jpeg_zigzag_order[]; /* natural coef order to zigzag order */
extern const int jpeg_natural_order[]; /* zigzag coef order to natural order */
#define vfMMXMachine ((boolean)0)

/* Suppress undefined-structure complaints if necessary. */

#ifdef INCOMPLETE_TYPES_BROKEN
#ifndef AM_MEMORY_MANAGER	/* only jmemmgr.c defines these */
struct jvirt_sarray_control { long dummy; };
struct jvirt_barray_control { long dummy; };
#endif
#endif /* INCOMPLETE_TYPES_BROKEN */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\jmorecfg.h ===
/*
 * jmorecfg.h
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains additional configuration options that customize the
 * JPEG software for special applications or support machine-dependent
 * optimizations.  Most users will not need to touch this file.
 */


/*
 * Define BITS_IN_JSAMPLE as either
 *   8   for 8-bit sample values (the usual setting)
 *   12  for 12-bit sample values
 * Only 8 and 12 are legal data precisions for lossy JPEG according to the
 * JPEG standard, and the IJG code does not support anything else!
 * We do not support run-time selection of data precision, sorry.
 */

#define BITS_IN_JSAMPLE  8	/* use 8 or 12 */


/*
 * Maximum number of components (color channels) allowed in JPEG image.
 * To meet the letter of the JPEG spec, set this to 255.  However, darn
 * few applications need more than 4 channels (maybe 5 for CMYK + alpha
 * mask).  We recommend 10 as a reasonable compromise; use 4 if you are
 * really short on memory.  (Each allowed component costs a hundred or so
 * bytes of storage, whether actually used in an image or not.)
 */

#define MAX_COMPONENTS  10	/* maximum number of image components */


/*
 * Basic data types.
 * You may need to change these if you have a machine with unusual data
 * type sizes; for example, "char" not 8 bits, "short" not 16 bits,
 * or "long" not 32 bits.  We don't care whether "int" is 16 or 32 bits,
 * but it had better be at least 16.
 */

/* Representation of a single sample (pixel element value).
 * We frequently allocate large arrays of these, so it's important to keep
 * them small.  But if you have memory to burn and access to char or short
 * arrays is very slow on your hardware, you might want to change these.
 */

#if BITS_IN_JSAMPLE == 8
/* JSAMPLE should be the smallest type that will hold the values 0..255.
 * You can use a signed char by having GETJSAMPLE mask it with 0xFF.
 */

#ifdef HAVE_UNSIGNED_CHAR

typedef unsigned char JSAMPLE;
#define GETJSAMPLE(value)  ((int) (value))

#else /* not HAVE_UNSIGNED_CHAR */

typedef char JSAMPLE;
#ifdef CHAR_IS_UNSIGNED
#define GETJSAMPLE(value)  ((int) (value))
#else
#define GETJSAMPLE(value)  ((int) (value) & 0xFF)
#endif /* CHAR_IS_UNSIGNED */

#endif /* HAVE_UNSIGNED_CHAR */

#define MAXJSAMPLE	255
#define CENTERJSAMPLE	128

#endif /* BITS_IN_JSAMPLE == 8 */


#if BITS_IN_JSAMPLE == 12
/* JSAMPLE should be the smallest type that will hold the values 0..4095.
 * On nearly all machines "short" will do nicely.
 */

typedef short JSAMPLE;
#define GETJSAMPLE(value)  ((int) (value))

#define MAXJSAMPLE	4095
#define CENTERJSAMPLE	2048

#endif /* BITS_IN_JSAMPLE == 12 */


/* Representation of a DCT frequency coefficient.
 * This should be a signed value of at least 16 bits; "short" is usually OK.
 * Again, we allocate large arrays of these, but you can change to int
 * if you have memory to burn and "short" is really slow.
 */

typedef short JCOEF;


/* Compressed datastreams are represented as arrays of JOCTET.
 * These must be EXACTLY 8 bits wide, at least once they are written to
 * external storage.  Note that when using the stdio data source/destination
 * managers, this is also the data type passed to fread/fwrite.
 */

#ifdef HAVE_UNSIGNED_CHAR

typedef unsigned char JOCTET;
#define GETJOCTET(value)  (value)

#else /* not HAVE_UNSIGNED_CHAR */

typedef char JOCTET;
#ifdef CHAR_IS_UNSIGNED
#define GETJOCTET(value)  (value)
#else
#define GETJOCTET(value)  ((value) & 0xFF)
#endif /* CHAR_IS_UNSIGNED */

#endif /* HAVE_UNSIGNED_CHAR */


/* These typedefs are used for various table entries and so forth.
 * They must be at least as wide as specified; but making them too big
 * won't cost a huge amount of memory, so we don't provide special
 * extraction code like we did for JSAMPLE.  (In other words, these
 * typedefs live at a different point on the speed/space tradeoff curve.)
 */

/* UINT8 must hold at least the values 0..255. */

#ifdef HAVE_UNSIGNED_CHAR
typedef unsigned char UINT8;
#else /* not HAVE_UNSIGNED_CHAR */
#ifdef CHAR_IS_UNSIGNED
typedef char UINT8;
#else /* not CHAR_IS_UNSIGNED */
typedef short UINT8;
#endif /* CHAR_IS_UNSIGNED */
#endif /* HAVE_UNSIGNED_CHAR */

/* UINT16 must hold at least the values 0..65535. */

#ifdef HAVE_UNSIGNED_SHORT
typedef unsigned short UINT16;
#else /* not HAVE_UNSIGNED_SHORT */
typedef unsigned int UINT16;
#endif /* HAVE_UNSIGNED_SHORT */

/* INT16 must hold at least the values -32768..32767. */

#ifndef XMD_H			/* X11/xmd.h correctly defines INT16 */
typedef short INT16;
#endif

/* INT32 must hold at least signed 32-bit values. */

#if !defined(XMD_H) && !defined(_BASETSD_H_)    /* X11/xmd.h correctly defines INT32 */
typedef long INT32;
#endif

/* Datatype used for image dimensions.  The JPEG standard only supports
 * images up to 64K*64K due to 16-bit fields in SOF markers.  Therefore
 * "unsigned int" is sufficient on all machines.  However, if you need to
 * handle larger images and you don't mind deviating from the spec, you
 * can change this datatype.
 */

typedef unsigned int JDIMENSION;

#define JPEG_MAX_DIMENSION  65500L  /* a tad under 64K to prevent overflows */


/* These macros are used in all function definitions and extern declarations.
 * You could modify them if you need to change function linkage conventions;
 * in particular, you'll need to do that to make the library a Windows DLL.
 * Another application is to make all functions global for use with debuggers
 * or code profilers that require it.
 */

/* a function called through method pointers: */
#define METHODDEF(type)               static type
/* a function used only in its module: */
#define LOCAL(type)           static type
/* a function referenced thru EXTERNs: */
#define GLOBAL(type)          type
/* a reference to a GLOBAL function: */

#define EXTERN(type)          extern type

/* This macro is used to declare a "method", that is, a function pointer.
 * We want to supply prototype parameters if the compiler can cope.
 * Note that the arglist parameter must be parenthesized!
 * Again, you can customize this if you need special linkage keywords.
 */

#ifdef HAVE_PROTOTYPES
#define JMETHOD(type,methodname,arglist)  type (*methodname) arglist
#else
#define JMETHOD(type,methodname,arglist)  type (*methodname) ()
#endif


/* Here is the pseudo-keyword for declaring pointers that must be "far"
 * on 80x86 machines.  Most of the specialized coding for 80x86 is handled
 * by just saying "FAR *" where such a pointer is needed.  In a few places
 * explicit coding is needed; see uses of the NEED_FAR_POINTERS symbol.
 */

#ifndef WIN32 /* don't mess with this at all */
#ifdef NEED_FAR_POINTERS
#define FAR  far
#else
#define FAR
#endif
#endif

#if WINNT   // For some reason wants FAR ??? -scousens
#ifndef FAR // windows.h has not been included
#ifdef NEED_FAR_POINTERS
#define FAR  far
#else
#define FAR
#endif
#endif
#endif

/*
 * On a few systems, type boolean and/or its values FALSE, TRUE may appear
 * in standard header files.  Or you may have conflicts with application-
 * specific header files that you want to include together with these files.
 * Defining HAVE_BOOLEAN before including jpeglib.h should make it work.
 */

#ifndef HAVE_BOOLEAN
typedef int boolean;
#endif
#ifndef FALSE			/* in case these macros already exist */
#define FALSE	0		/* values of boolean */
#endif
#ifndef TRUE
#define TRUE	1
#endif


/*
 * The remaining options affect code selection within the JPEG library,
 * but they don't need to be visible to most applications using the library.
 * To minimize application namespace pollution, the symbols won't be
 * defined unless JPEG_INTERNALS or JPEG_INTERNAL_OPTIONS has been defined.
 */

#ifdef JPEG_INTERNALS
#define JPEG_INTERNAL_OPTIONS
#endif

#ifdef JPEG_INTERNAL_OPTIONS


/*
 * These defines indicate whether to include various optional functions.
 * Undefining some of these symbols will produce a smaller but less capable
 * library.  Note that you can leave certain source files out of the
 * compilation/linking process if you've #undef'd the corresponding symbols.
 * (You may HAVE to do that if your compiler doesn't like null source files.)
 */

/* Arithmetic coding is unsupported for legal reasons.  Complaints to IBM. */

/* Capability options common to encoder and decoder: */

#define DCT_ISLOW_SUPPORTED	/* slow but accurate integer algorithm */
#define DCT_IFAST_SUPPORTED	/* faster, less accurate integer method */
#define DCT_FLOAT_SUPPORTED	/* floating-point: accurate, fast on fast HW */

/* Encoder capability options: */

#undef  C_ARITH_CODING_SUPPORTED    /* Arithmetic coding back end? */
#define C_MULTISCAN_FILES_SUPPORTED /* Multiple-scan JPEG files? */
#define C_PROGRESSIVE_SUPPORTED	    /* Progressive JPEG? (Requires MULTISCAN)*/
#define ENTROPY_OPT_SUPPORTED	    /* Optimization of entropy coding parms? */
/* Note: if you selected 12-bit data precision, it is dangerous to turn off
 * ENTROPY_OPT_SUPPORTED.  The standard Huffman tables are only good for 8-bit
 * precision, so jchuff.c normally uses entropy optimization to compute
 * usable tables for higher precision.  If you don't want to do optimization,
 * you'll have to supply different default Huffman tables.
 * The exact same statements apply for progressive JPEG: the default tables
 * don't work for progressive mode.  (This may get fixed, however.)
 */
#define INPUT_SMOOTHING_SUPPORTED   /* Input image smoothing option? */

/* Decoder capability options: */

#undef  D_ARITH_CODING_SUPPORTED    /* Arithmetic coding back end? */
#define D_MULTISCAN_FILES_SUPPORTED /* Multiple-scan JPEG files? */
#define D_PROGRESSIVE_SUPPORTED	    /* Progressive JPEG? (Requires MULTISCAN)*/
#define BLOCK_SMOOTHING_SUPPORTED   /* Block smoothing? (Progressive only) */
#define IDCT_SCALING_SUPPORTED	    /* Output rescaling via IDCT? */
#undef  UPSAMPLE_SCALING_SUPPORTED  /* Output rescaling at upsample stage? */
#define UPSAMPLE_MERGING_SUPPORTED  /* Fast path for sloppy upsampling? */
#define QUANT_1PASS_SUPPORTED	    /* 1-pass color quantization? */
#define QUANT_2PASS_SUPPORTED	    /* 2-pass color quantization? */

/* more capability options later, no doubt */


/*
 * Ordering of RGB data in scanlines passed to or from the application.
 * If your application wants to deal with data in the order B,G,R, just
 * change these macros.  You can also deal with formats such as R,G,B,X
 * (one extra byte per pixel) by changing RGB_PIXELSIZE.  Note that changing
 * the offsets will also change the order in which colormap data is organized.
 * RESTRICTIONS:
 * 1. The sample applications cjpeg,djpeg do NOT support modified RGB formats.
 * 2. These macros only affect RGB<=>YCbCr color conversion, so they are not
 *    useful if you are using JPEG color spaces other than YCbCr or grayscale.
 * 3. The color quantizer modules will not behave desirably if RGB_PIXELSIZE
 *    is not 3 (they don't understand about dummy color components!).  So you
 *    can't use color quantization if you change that value.
 */

#define RGB_RED		2	/* Offset of Red in an RGB scanline element */
#define RGB_GREEN	1	/* Offset of Green */
#define RGB_BLUE	0	/* Offset of Blue */
#define RGB_PIXELSIZE	3	/* JSAMPLEs per RGB scanline element */


/* Definitions for speed-related optimizations. */


/* If your compiler supports inline functions, define INLINE
 * as the inline keyword; otherwise define it as empty.
 */

#ifndef INLINE
#ifdef __GNUC__			/* for instance, GNU C knows about inline */
#define INLINE __inline__
#endif
#ifndef INLINE
#define INLINE			/* default is to define it as empty */
#endif
#endif


/* On some machines (notably 68000 series) "int" is 32 bits, but multiplying
 * two 16-bit shorts is faster than multiplying two ints.  Define MULTIPLIER
 * as short on such a machine.  MULTIPLIER must be at least 16 bits wide.
 */

#define MULTIPLIER  short

#ifndef MULTIPLIER
#define MULTIPLIER  int		/* type for fastest integer multiply */
#endif


/* FAST_FLOAT should be either float or double, whichever is done faster
 * by your compiler.  (Note that this type is only used in the floating point
 * DCT routines, so it only matters if you've defined DCT_FLOAT_SUPPORTED.)
 * Typically, float is faster in ANSI C compilers, while double is faster in
 * pre-ANSI compilers (because they insist on converting to double anyway).
 * The code below therefore chooses float if we have ANSI-style prototypes.
 */

#ifndef FAST_FLOAT
#ifdef HAVE_PROTOTYPES
#define FAST_FLOAT  float
#else
#define FAST_FLOAT  double
#endif
#endif

#endif /* JPEG_INTERNAL_OPTIONS */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\jpeglib.h ===
/*
 * jpeglib.h
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file defines the application interface for the JPEG library.
 * Most applications using the library need only include this file,
 * and perhaps jerror.h if they want to know the exact error codes.
 */

#ifndef JPEGLIB_H
#define JPEGLIB_H

#ifdef __cplusplus
extern "C" {
#endif

/*
 * First we include the configuration files that record how this
 * installation of the JPEG library is set up.  jconfig.h can be
 * generated automatically for many systems.  jmorecfg.h contains
 * manual configuration options that most people need not worry about.
 */

#ifndef JCONFIG_INCLUDED	/* in case jinclude.h already did */
#include "jconfig.h"		/* widely used configuration options */
#endif
#include "jmorecfg.h"		/* seldom changed options */


/* Version ID for the JPEG library.
 * Might be useful for tests like "#if JPEG_LIB_VERSION >= 60".
 */

#define JPEG_LIB_VERSION  61	/* Version 6a */


/* Various constants determining the sizes of things.
 * All of these are specified by the JPEG standard, so don't change them
 * if you want to be compatible.
 */

#define DCTSIZE		    8	/* The basic DCT block is 8x8 samples */
#define DCTSIZE2	    64	/* DCTSIZE squared; # of elements in a block */
#define NUM_QUANT_TBLS      4	/* Quantization tables are numbered 0..3 */
#define NUM_HUFF_TBLS       4	/* Huffman tables are numbered 0..3 */
#define NUM_ARITH_TBLS      16	/* Arith-coding tables are numbered 0..15 */
#define MAX_COMPS_IN_SCAN   4	/* JPEG limit on # of components in one scan */
#define MAX_SAMP_FACTOR     4	/* JPEG limit on sampling factors */
/* Unfortunately, it seems Adobe doesn't always follow the standard;
 * the PostScript DCT filter can emit files with many more than 10 blocks/MCU.
 * If you happen to run across such a file, you can up D_MAX_BLOCKS_IN_MCU
 * to handle it.  We even let you do this from the jconfig.h file.  However,
 * we strongly discourage changing C_MAX_BLOCKS_IN_MCU; just because Adobe
 * sometimes emits noncompliant files doesn't mean you should too.
 */
#define C_MAX_BLOCKS_IN_MCU   10 /* compressor's limit on blocks per MCU */
#ifndef D_MAX_BLOCKS_IN_MCU
#define D_MAX_BLOCKS_IN_MCU   10 /* decompressor's limit on blocks per MCU */
#endif


/* Data structures for images (arrays of samples and of DCT coefficients).
 * On 80x86 machines, the image arrays are too big for near pointers,
 * but the pointer arrays can fit in near memory.
 */

typedef JSAMPLE FAR *JSAMPROW;	/* ptr to one image row of pixel samples. */
typedef JSAMPROW *JSAMPARRAY;	/* ptr to some rows (a 2-D sample array) */
typedef JSAMPARRAY *JSAMPIMAGE;	/* a 3-D sample array: top index is color */

typedef JCOEF JBLOCK[DCTSIZE2];	/* one block of coefficients */
typedef JBLOCK FAR *JBLOCKROW;	/* pointer to one row of coefficient blocks */
typedef JBLOCKROW *JBLOCKARRAY;		/* a 2-D array of coefficient blocks */
typedef JBLOCKARRAY *JBLOCKIMAGE;	/* a 3-D array of coefficient blocks */

typedef JCOEF FAR *JCOEFPTR;	/* useful in a couple of places */


/* Types for JPEG compression parameters and working tables. */


/* DCT coefficient quantization tables. */

typedef struct {
  /* This array gives the coefficient quantizers in natural array order
   * (not the zigzag order in which they are stored in a JPEG DQT marker).
   * CAUTION: IJG versions prior to v6a kept this array in zigzag order.
   */
  UINT16 quantval[DCTSIZE2];	/* quantization step for each coefficient */
  /* This field is used only during compression.  It's initialized FALSE when
   * the table is created, and set TRUE when it's been output to the file.
   * You could suppress output of a table by setting this to TRUE.
   * (See jpeg_suppress_tables for an example.)
   */
  boolean sent_table;		/* TRUE when table has been output */
} JQUANT_TBL;


/* Huffman coding tables. */

typedef struct {
  /* These two fields directly represent the contents of a JPEG DHT marker */
  UINT8 bits[17];		/* bits[k] = # of symbols with codes of */
				/* length k bits; bits[0] is unused */
  UINT8 huffval[256];		/* The symbols, in order of incr code length */
  /* This field is used only during compression.  It's initialized FALSE when
   * the table is created, and set TRUE when it's been output to the file.
   * You could suppress output of a table by setting this to TRUE.
   * (See jpeg_suppress_tables for an example.)
   */
  boolean sent_table;		/* TRUE when table has been output */
} JHUFF_TBL;


/* Basic info about one component (color channel). */

typedef struct {
  /* These values are fixed over the whole image. */
  /* For compression, they must be supplied by parameter setup; */
  /* for decompression, they are read from the SOF marker. */
  int component_id;		/* identifier for this component (0..255) */
  int component_index;		/* its index in SOF or cinfo->comp_info[] */
  int h_samp_factor;		/* horizontal sampling factor (1..4) */
  int v_samp_factor;		/* vertical sampling factor (1..4) */
  int quant_tbl_no;		/* quantization table selector (0..3) */
  /* These values may vary between scans. */
  /* For compression, they must be supplied by parameter setup; */
  /* for decompression, they are read from the SOS marker. */
  /* The decompressor output side may not use these variables. */
  int dc_tbl_no;		/* DC entropy table selector (0..3) */
  int ac_tbl_no;		/* AC entropy table selector (0..3) */
  
  /* Remaining fields should be treated as private by applications. */
  
  /* These values are computed during compression or decompression startup: */
  /* Component's size in DCT blocks.
   * Any dummy blocks added to complete an MCU are not counted; therefore
   * these values do not depend on whether a scan is interleaved or not.
   */
  JDIMENSION width_in_blocks;
  JDIMENSION height_in_blocks;
  /* Size of a DCT block in samples.  Always DCTSIZE for compression.
   * For decompression this is the size of the output from one DCT block,
   * reflecting any scaling we choose to apply during the IDCT step.
   * Values of 1,2,4,8 are likely to be supported.  Note that different
   * components may receive different IDCT scalings.
   */
  int DCT_scaled_size;
  /* The downsampled dimensions are the component's actual, unpadded number
   * of samples at the main buffer (preprocessing/compression interface), thus
   * downsampled_width = ceil(image_width * Hi/Hmax)
   * and similarly for height.  For decompression, IDCT scaling is included, so
   * downsampled_width = ceil(image_width * Hi/Hmax * DCT_scaled_size/DCTSIZE)
   */
  JDIMENSION downsampled_width;	 /* actual width in samples */
  JDIMENSION downsampled_height; /* actual height in samples */
  /* This flag is used only for decompression.  In cases where some of the
   * components will be ignored (eg grayscale output from YCbCr image),
   * we can skip most computations for the unused components.
   */
  boolean component_needed;	/* do we need the value of this component? */

  /* These values are computed before starting a scan of the component. */
  /* The decompressor output side may not use these variables. */
  int MCU_width;		/* number of blocks per MCU, horizontally */
  int MCU_height;		/* number of blocks per MCU, vertically */
  int MCU_blocks;		/* MCU_width * MCU_height */
  int MCU_sample_width;		/* MCU width in samples, MCU_width*DCT_scaled_size */
  int last_col_width;		/* # of non-dummy blocks across in last MCU */
  int last_row_height;		/* # of non-dummy blocks down in last MCU */

  /* Saved quantization table for component; NULL if none yet saved.
   * See jdinput.c comments about the need for this information.
   * This field is currently used only for decompression.
   */
  JQUANT_TBL * quant_table;

  /* Private per-component storage for DCT or IDCT subsystem. */
  void * dct_table;
} jpeg_component_info;


/* The script for encoding a multiple-scan file is an array of these: */

typedef struct {
  int comps_in_scan;		/* number of components encoded in this scan */
  int component_index[MAX_COMPS_IN_SCAN]; /* their SOF/comp_info[] indexes */
  int Ss, Se;			/* progressive JPEG spectral selection parms */
  int Ah, Al;			/* progressive JPEG successive approx. parms */
} jpeg_scan_info;


/* Known color spaces. */

typedef enum {
	JCS_UNKNOWN,		/* error/unspecified */
	JCS_GRAYSCALE,		/* monochrome */
	JCS_RGB,		/* red/green/blue */
	JCS_YCbCr,		/* Y/Cb/Cr (also known as YUV) */
	JCS_CMYK,		/* C/M/Y/K */
	JCS_YCCK		/* Y/Cb/Cr/K */
} J_COLOR_SPACE;

/* DCT/IDCT algorithm options. */

typedef enum {
	JDCT_ISLOW,		/* slow but accurate integer algorithm */
	JDCT_IFAST,		/* faster, less accurate integer method */
	JDCT_FLOAT		/* floating-point: accurate, fast on fast HW */
} J_DCT_METHOD;

#ifndef JDCT_DEFAULT		/* may be overridden in jconfig.h */
#define JDCT_DEFAULT  JDCT_ISLOW
#endif
#ifndef JDCT_FASTEST		/* may be overridden in jconfig.h */
#define JDCT_FASTEST  JDCT_IFAST
#endif

/* Dithering options for decompression. */

typedef enum {
	JDITHER_NONE,		/* no dithering */
	JDITHER_ORDERED,	/* simple ordered dither */
	JDITHER_FS		/* Floyd-Steinberg error diffusion dither */
} J_DITHER_MODE;


/* Common fields between JPEG compression and decompression master structs. */

#define jpeg_common_fields \
  struct jpeg_error_mgr * err;	/* Error handler module */\
  struct jpeg_memory_mgr * mem;	/* Memory manager module */\
  struct jpeg_progress_mgr * progress; /* Progress monitor, or NULL if none */\
  boolean is_decompressor;	/* so common code can tell which is which */\
  int global_state		/* for checking call sequence validity */

/* Routines that are to be used by both halves of the library are declared
 * to receive a pointer to this structure.  There are no actual instances of
 * jpeg_common_struct, only of jpeg_compress_struct and jpeg_decompress_struct.
 */
struct jpeg_common_struct {
  jpeg_common_fields;		/* Fields common to both master struct types */
  /* Additional fields follow in an actual jpeg_compress_struct or
   * jpeg_decompress_struct.  All three structs must agree on these
   * initial fields!  (This would be a lot cleaner in C++.)
   */
};

typedef struct jpeg_common_struct * j_common_ptr;
typedef struct jpeg_compress_struct * j_compress_ptr;
typedef struct jpeg_decompress_struct * j_decompress_ptr;


/* Master record for a compression instance */

struct jpeg_compress_struct {
  jpeg_common_fields;		/* Fields shared with jpeg_decompress_struct */

  /* Destination for compressed data */
  struct jpeg_destination_mgr * dest;

  /* Description of source image --- these fields must be filled in by
   * outer application before starting compression.  in_color_space must
   * be correct before you can even call jpeg_set_defaults().
   */

  JDIMENSION image_width;	/* input image width */
  JDIMENSION image_height;	/* input image height */
  int input_components;		/* # of color components in input image */
  J_COLOR_SPACE in_color_space;	/* colorspace of input image */

  double input_gamma;		/* image gamma of input image */

  /* Compression parameters --- these fields must be set before calling
   * jpeg_start_compress().  We recommend calling jpeg_set_defaults() to
   * initialize everything to reasonable defaults, then changing anything
   * the application specifically wants to change.  That way you won't get
   * burnt when new parameters are added.  Also note that there are several
   * helper routines to simplify changing parameters.
   */

  int data_precision;		/* bits of precision in image data */

  int num_components;		/* # of color components in JPEG image */
  J_COLOR_SPACE jpeg_color_space; /* colorspace of JPEG image */

  jpeg_component_info * comp_info;
  /* comp_info[i] describes component that appears i'th in SOF */
  
  JQUANT_TBL * quant_tbl_ptrs[NUM_QUANT_TBLS];
  /* ptrs to coefficient quantization tables, or NULL if not defined */
  
  JHUFF_TBL * dc_huff_tbl_ptrs[NUM_HUFF_TBLS];
  JHUFF_TBL * ac_huff_tbl_ptrs[NUM_HUFF_TBLS];
  /* ptrs to Huffman coding tables, or NULL if not defined */
  
  UINT8 arith_dc_L[NUM_ARITH_TBLS]; /* L values for DC arith-coding tables */
  UINT8 arith_dc_U[NUM_ARITH_TBLS]; /* U values for DC arith-coding tables */
  UINT8 arith_ac_K[NUM_ARITH_TBLS]; /* Kx values for AC arith-coding tables */

  int num_scans;		/* # of entries in scan_info array */
  const jpeg_scan_info * scan_info; /* script for multi-scan file, or NULL */
  /* The default value of scan_info is NULL, which causes a single-scan
   * sequential JPEG file to be emitted.  To create a multi-scan file,
   * set num_scans and scan_info to point to an array of scan definitions.
   */

  boolean raw_data_in;		/* TRUE=caller supplies downsampled data */
  boolean arith_code;		/* TRUE=arithmetic coding, FALSE=Huffman */
  boolean optimize_coding;	/* TRUE=optimize entropy encoding parms */
  boolean CCIR601_sampling;	/* TRUE=first samples are cosited */
  int smoothing_factor;		/* 1..100, or 0 for no input smoothing */
  J_DCT_METHOD dct_method;	/* DCT algorithm selector */

  /* The restart interval can be specified in absolute MCUs by setting
   * restart_interval, or in MCU rows by setting restart_in_rows
   * (in which case the correct restart_interval will be figured
   * for each scan).
   */
  unsigned int restart_interval; /* MCUs per restart, or 0 for no restart */
  int restart_in_rows;		/* if > 0, MCU rows per restart interval */

  /* Parameters controlling emission of special markers. */

  boolean write_JFIF_header;	/* should a JFIF marker be written? */
  /* These three values are not used by the JPEG code, merely copied */
  /* into the JFIF APP0 marker.  density_unit can be 0 for unknown, */
  /* 1 for dots/inch, or 2 for dots/cm.  Note that the pixel aspect */
  /* ratio is defined by X_density/Y_density even when density_unit=0. */
  UINT8 density_unit;		/* JFIF code for pixel size units */
  UINT16 X_density;		/* Horizontal pixel density */
  UINT16 Y_density;		/* Vertical pixel density */
  boolean write_Adobe_marker;	/* should an Adobe marker be written? */
  
  /* State variable: index of next scanline to be written to
   * jpeg_write_scanlines().  Application may use this to control its
   * processing loop, e.g., "while (next_scanline < image_height)".
   */

  JDIMENSION next_scanline;	/* 0 .. image_height-1  */

  /* Remaining fields are known throughout compressor, but generally
   * should not be touched by a surrounding application.
   */

  /*
   * These fields are computed during compression startup
   */
  boolean progressive_mode;	/* TRUE if scan script uses progressive mode */
  int max_h_samp_factor;	/* largest h_samp_factor */
  int max_v_samp_factor;	/* largest v_samp_factor */

  JDIMENSION total_iMCU_rows;	/* # of iMCU rows to be input to coef ctlr */
  /* The coefficient controller receives data in units of MCU rows as defined
   * for fully interleaved scans (whether the JPEG file is interleaved or not).
   * There are v_samp_factor * DCTSIZE sample rows of each component in an
   * "iMCU" (interleaved MCU) row.
   */
  
  /*
   * These fields are valid during any one scan.
   * They describe the components and MCUs actually appearing in the scan.
   */
  int comps_in_scan;		/* # of JPEG components in this scan */
  jpeg_component_info * cur_comp_info[MAX_COMPS_IN_SCAN];
  /* *cur_comp_info[i] describes component that appears i'th in SOS */
  
  JDIMENSION MCUs_per_row;	/* # of MCUs across the image */
  JDIMENSION MCU_rows_in_scan;	/* # of MCU rows in the image */
  
  int blocks_in_MCU;		/* # of DCT blocks per MCU */
  int MCU_membership[C_MAX_BLOCKS_IN_MCU];
  /* MCU_membership[i] is index in cur_comp_info of component owning */
  /* i'th block in an MCU */

  int Ss, Se, Ah, Al;		/* progressive JPEG parameters for scan */

  /*
   * Links to compression subobjects (methods and private variables of modules)
   */
  struct jpeg_comp_master * master;
  struct jpeg_c_main_controller * main;
  struct jpeg_c_prep_controller * prep;
  struct jpeg_c_coef_controller * coef;
  struct jpeg_marker_writer * marker;
  struct jpeg_color_converter * cconvert;
  struct jpeg_downsampler * downsample;
  struct jpeg_forward_dct * fdct;
  struct jpeg_entropy_encoder * entropy;
};


/* Master record for a decompression instance */

struct jpeg_decompress_struct {
  jpeg_common_fields;		/* Fields shared with jpeg_compress_struct */

  /* Source of compressed data */
  struct jpeg_source_mgr * src;

  /* Basic description of image --- filled in by jpeg_read_header(). */
  /* Application may inspect these values to decide how to process image. */

  JDIMENSION image_width;	/* nominal image width (from SOF marker) */
  JDIMENSION image_height;	/* nominal image height */
  int num_components;		/* # of color components in JPEG image */
  J_COLOR_SPACE jpeg_color_space; /* colorspace of JPEG image */

  /* Decompression processing parameters --- these fields must be set before
   * calling jpeg_start_decompress().  Note that jpeg_read_header() initializes
   * them to default values.
   */

  J_COLOR_SPACE out_color_space; /* colorspace for output */

  unsigned int scale_num, scale_denom; /* fraction by which to scale image */

  double output_gamma;		/* image gamma wanted in output */

  boolean buffered_image;	/* TRUE=multiple output passes */
  boolean raw_data_out;		/* TRUE=downsampled data wanted */

  J_DCT_METHOD dct_method;	/* IDCT algorithm selector */
  boolean do_fancy_upsampling;	/* TRUE=apply fancy upsampling */
  boolean do_block_smoothing;	/* TRUE=apply interblock smoothing */

  boolean quantize_colors;	/* TRUE=colormapped output wanted */
  /* the following are ignored if not quantize_colors: */
  J_DITHER_MODE dither_mode;	/* type of color dithering to use */
  boolean two_pass_quantize;	/* TRUE=use two-pass color quantization */
  int desired_number_of_colors;	/* max # colors to use in created colormap */
  /* these are significant only in buffered-image mode: */
  boolean enable_1pass_quant;	/* enable future use of 1-pass quantizer */
  boolean enable_external_quant;/* enable future use of external colormap */
  boolean enable_2pass_quant;	/* enable future use of 2-pass quantizer */

  /* Description of actual output image that will be returned to application.
   * These fields are computed by jpeg_start_decompress().
   * You can also use jpeg_calc_output_dimensions() to determine these values
   * in advance of calling jpeg_start_decompress().
   */

  JDIMENSION output_width;	/* scaled image width */
  JDIMENSION output_height;	/* scaled image height */
  int out_color_components;	/* # of color components in out_color_space */
  int output_components;	/* # of color components returned */
  /* output_components is 1 (a colormap index) when quantizing colors;
   * otherwise it equals out_color_components.
   */
  int rec_outbuf_height;	/* min recommended height of scanline buffer */
  /* If the buffer passed to jpeg_read_scanlines() is less than this many rows
   * high, space and time will be wasted due to unnecessary data copying.
   * Usually rec_outbuf_height will be 1 or 2, at most 4.
   */

  /* When quantizing colors, the output colormap is described by these fields.
   * The application can supply a colormap by setting colormap non-NULL before
   * calling jpeg_start_decompress; otherwise a colormap is created during
   * jpeg_start_decompress or jpeg_start_output.
   * The map has out_color_components rows and actual_number_of_colors columns.
   */
  int actual_number_of_colors;	/* number of entries in use */
  JSAMPARRAY colormap;		/* The color map as a 2-D pixel array */

  /* State variables: these variables indicate the progress of decompression.
   * The application may examine these but must not modify them.
   */

  /* Row index of next scanline to be read from jpeg_read_scanlines().
   * Application may use this to control its processing loop, e.g.,
   * "while (output_scanline < output_height)".
   */
  JDIMENSION output_scanline;	/* 0 .. output_height-1  */

  /* Current input scan number and number of iMCU rows completed in scan.
   * These indicate the progress of the decompressor input side.
   */
  int input_scan_number;	/* Number of SOS markers seen so far */
  JDIMENSION input_iMCU_row;	/* Number of iMCU rows completed */

  /* The "output scan number" is the notional scan being displayed by the
   * output side.  The decompressor will not allow output scan/row number
   * to get ahead of input scan/row, but it can fall arbitrarily far behind.
   */
  int output_scan_number;	/* Nominal scan number being displayed */
  JDIMENSION output_iMCU_row;	/* Number of iMCU rows read */

  /* Current progression status.  coef_bits[c][i] indicates the precision
   * with which component c's DCT coefficient i (in zigzag order) is known.
   * It is -1 when no data has yet been received, otherwise it is the point
   * transform (shift) value for the most recent scan of the coefficient
   * (thus, 0 at completion of the progression).
   * This pointer is NULL when reading a non-progressive file.
   */
  int (*coef_bits)[DCTSIZE2];	/* -1 or current Al value for each coef */

  /* Internal JPEG parameters --- the application usually need not look at
   * these fields.  Note that the decompressor output side may not use
   * any parameters that can change between scans.
   */

  /* Quantization and Huffman tables are carried forward across input
   * datastreams when processing abbreviated JPEG datastreams.
   */

  JQUANT_TBL * quant_tbl_ptrs[NUM_QUANT_TBLS];
  /* ptrs to coefficient quantization tables, or NULL if not defined */

  JHUFF_TBL * dc_huff_tbl_ptrs[NUM_HUFF_TBLS];
  JHUFF_TBL * ac_huff_tbl_ptrs[NUM_HUFF_TBLS];
  /* ptrs to Huffman coding tables, or NULL if not defined */

  /* These parameters are never carried across datastreams, since they
   * are given in SOF/SOS markers or defined to be reset by SOI.
   */

  int data_precision;		/* bits of precision in image data */

  jpeg_component_info * comp_info;
  /* comp_info[i] describes component that appears i'th in SOF */

  boolean progressive_mode;	/* TRUE if SOFn specifies progressive mode */
  boolean arith_code;		/* TRUE=arithmetic coding, FALSE=Huffman */

  UINT8 arith_dc_L[NUM_ARITH_TBLS]; /* L values for DC arith-coding tables */
  UINT8 arith_dc_U[NUM_ARITH_TBLS]; /* U values for DC arith-coding tables */
  UINT8 arith_ac_K[NUM_ARITH_TBLS]; /* Kx values for AC arith-coding tables */

  unsigned int restart_interval; /* MCUs per restart interval, or 0 for no restart */

  /* These fields record data obtained from optional markers recognized by
   * the JPEG library.
   */
  boolean saw_JFIF_marker;	/* TRUE iff a JFIF APP0 marker was found */
  /* Data copied from JFIF marker: */
  UINT8 density_unit;		/* JFIF code for pixel size units */
  UINT16 X_density;		/* Horizontal pixel density */
  UINT16 Y_density;		/* Vertical pixel density */
  boolean saw_Adobe_marker;	/* TRUE iff an Adobe APP14 marker was found */
  UINT8 Adobe_transform;	/* Color transform code from Adobe marker */

  boolean CCIR601_sampling;	/* TRUE=first samples are cosited */

  /* Remaining fields are known throughout decompressor, but generally
   * should not be touched by a surrounding application.
   */

  /*
   * These fields are computed during decompression startup
   */
  int max_h_samp_factor;	/* largest h_samp_factor */
  int max_v_samp_factor;	/* largest v_samp_factor */

  int min_DCT_scaled_size;	/* smallest DCT_scaled_size of any component */

  JDIMENSION total_iMCU_rows;	/* # of iMCU rows in image */
  /* The coefficient controller's input and output progress is measured in
   * units of "iMCU" (interleaved MCU) rows.  These are the same as MCU rows
   * in fully interleaved JPEG scans, but are used whether the scan is
   * interleaved or not.  We define an iMCU row as v_samp_factor DCT block
   * rows of each component.  Therefore, the IDCT output contains
   * v_samp_factor*DCT_scaled_size sample rows of a component per iMCU row.
   */

  JSAMPLE * sample_range_limit; /* table for fast range-limiting */

  /*
   * These fields are valid during any one scan.
   * They describe the components and MCUs actually appearing in the scan.
   * Note that the decompressor output side must not use these fields.
   */
  int comps_in_scan;		/* # of JPEG components in this scan */
  jpeg_component_info * cur_comp_info[MAX_COMPS_IN_SCAN];
  /* *cur_comp_info[i] describes component that appears i'th in SOS */

  JDIMENSION MCUs_per_row;	/* # of MCUs across the image */
  JDIMENSION MCU_rows_in_scan;	/* # of MCU rows in the image */

  int blocks_in_MCU;		/* # of DCT blocks per MCU */
  int MCU_membership[D_MAX_BLOCKS_IN_MCU];
  /* MCU_membership[i] is index in cur_comp_info of component owning */
  /* i'th block in an MCU */

  int Ss, Se, Ah, Al;		/* progressive JPEG parameters for scan */

  /* This field is shared between entropy decoder and marker parser.
   * It is either zero or the code of a JPEG marker that has been
   * read from the data source, but has not yet been processed.
   */
  int unread_marker;

  /*
   * Links to decompression subobjects (methods, private variables of modules)
   */
  struct jpeg_decomp_master * master;
  struct jpeg_d_main_controller * main;
  struct jpeg_d_coef_controller * coef;
  struct jpeg_d_post_controller * post;
  struct jpeg_input_controller * inputctl;
  struct jpeg_marker_reader * marker;
  struct jpeg_entropy_decoder * entropy;
  struct jpeg_inverse_dct * idct;
  struct jpeg_upsampler * upsample;
  struct jpeg_color_deconverter * cconvert;
  struct jpeg_color_quantizer * cquantize;
};


/* "Object" declarations for JPEG modules that may be supplied or called
 * directly by the surrounding application.
 * As with all objects in the JPEG library, these structs only define the
 * publicly visible methods and state variables of a module.  Additional
 * private fields may exist after the public ones.
 */


/* Error handler object */

struct jpeg_error_mgr {
  /* Error exit handler: does not return to caller */
  JMETHOD(void, error_exit, (j_common_ptr cinfo));
  /* Conditionally emit a trace or warning message */
  JMETHOD(void, emit_message, (j_common_ptr cinfo, int msg_level));
  /* Routine that actually outputs a trace or error message */
  JMETHOD(void, output_message, (j_common_ptr cinfo));
  /* Format a message string for the most recent JPEG error or message */
  JMETHOD(void, format_message, (j_common_ptr cinfo, char * buffer));
#define JMSG_LENGTH_MAX  200	/* recommended size of format_message buffer */
  /* Reset error state variables at start of a new image */
  JMETHOD(void, reset_error_mgr, (j_common_ptr cinfo));
  
  /* The message ID code and any parameters are saved here.
   * A message can have one string parameter or up to 8 int parameters.
   */
  int msg_code;
#define JMSG_STR_PARM_MAX  80
  union {
    int i[8];
    char s[JMSG_STR_PARM_MAX];
  } msg_parm;
  
  /* Standard state variables for error facility */
  
  int trace_level;		/* max msg_level that will be displayed */
  
  /* For recoverable corrupt-data errors, we emit a warning message,
   * but keep going unless emit_message chooses to abort.  emit_message
   * should count warnings in num_warnings.  The surrounding application
   * can check for bad data by seeing if num_warnings is nonzero at the
   * end of processing.
   */
  long num_warnings;		/* number of corrupt-data warnings */

  /* These fields point to the table(s) of error message strings.
   * An application can change the table pointer to switch to a different
   * message list (typically, to change the language in which errors are
   * reported).  Some applications may wish to add additional error codes
   * that will be handled by the JPEG library error mechanism; the second
   * table pointer is used for this purpose.
   *
   * First table includes all errors generated by JPEG library itself.
   * Error code 0 is reserved for a "no such error string" message.
   */
  const char * const * jpeg_message_table; /* Library errors */
  int last_jpeg_message;    /* Table contains strings 0..last_jpeg_message */
  /* Second table can be added by application (see cjpeg/djpeg for example).
   * It contains strings numbered first_addon_message..last_addon_message.
   */
  const char * const * addon_message_table; /* Non-library errors */
  int first_addon_message;	/* code for first string in addon table */
  int last_addon_message;	/* code for last string in addon table */
};


/* Progress monitor object */

struct jpeg_progress_mgr {
  JMETHOD(void, progress_monitor, (j_common_ptr cinfo));

  long pass_counter;		/* work units completed in this pass */
  long pass_limit;		/* total number of work units in this pass */
  int completed_passes;		/* passes completed so far */
  int total_passes;		/* total number of passes expected */
};


/* Data destination object for compression */

struct jpeg_destination_mgr {
  JOCTET * next_output_byte;	/* => next byte to write in buffer */
  size_t free_in_buffer;	/* # of byte spaces remaining in buffer */

  JMETHOD(void, init_destination, (j_compress_ptr cinfo));
  JMETHOD(boolean, empty_output_buffer, (j_compress_ptr cinfo));
  JMETHOD(void, term_destination, (j_compress_ptr cinfo));
};


/* Data source object for decompression */

struct jpeg_source_mgr {
  const JOCTET * next_input_byte; /* => next byte to read from buffer */
  size_t bytes_in_buffer;	/* # of bytes remaining in buffer */

  JMETHOD(void, init_source, (j_decompress_ptr cinfo));
  JMETHOD(boolean, fill_input_buffer, (j_decompress_ptr cinfo));
  JMETHOD(void, skip_input_data, (j_decompress_ptr cinfo, long num_bytes));
  JMETHOD(boolean, resync_to_restart, (j_decompress_ptr cinfo, int desired));
  JMETHOD(void, term_source, (j_decompress_ptr cinfo));
};


/* Memory manager object.
 * Allocates "small" objects (a few K total), "large" objects (tens of K),
 * and "really big" objects (virtual arrays with backing store if needed).
 * The memory manager does not allow individual objects to be freed; rather,
 * each created object is assigned to a pool, and whole pools can be freed
 * at once.  This is faster and more convenient than remembering exactly what
 * to free, especially where malloc()/free() are not too speedy.
 * NB: alloc routines never return NULL.  They exit to error_exit if not
 * successful.
 */

#define JPOOL_PERMANENT	0	/* lasts until master record is destroyed */
#define JPOOL_IMAGE	1	/* lasts until done with image/datastream */
#define JPOOL_NUMPOOLS	2

typedef struct jvirt_sarray_control * jvirt_sarray_ptr;
typedef struct jvirt_barray_control * jvirt_barray_ptr;


struct jpeg_memory_mgr {
  /* Method pointers */
  JMETHOD(void *, alloc_small, (j_common_ptr cinfo, int pool_id,
				size_t sizeofobject));
  JMETHOD(void FAR *, alloc_large, (j_common_ptr cinfo, int pool_id,
				     size_t sizeofobject));
  JMETHOD(JSAMPARRAY, alloc_sarray, (j_common_ptr cinfo, int pool_id,
				     JDIMENSION samplesperrow,
				     JDIMENSION numrows));
  JMETHOD(JBLOCKARRAY, alloc_barray, (j_common_ptr cinfo, int pool_id,
				      JDIMENSION blocksperrow,
				      JDIMENSION numrows));
  JMETHOD(jvirt_sarray_ptr, request_virt_sarray, (j_common_ptr cinfo,
						  int pool_id,
						  boolean pre_zero,
						  JDIMENSION samplesperrow,
						  JDIMENSION numrows,
						  JDIMENSION maxaccess));
  JMETHOD(jvirt_barray_ptr, request_virt_barray, (j_common_ptr cinfo,
						  int pool_id,
						  boolean pre_zero,
						  JDIMENSION blocksperrow,
						  JDIMENSION numrows,
						  JDIMENSION maxaccess));
  JMETHOD(void, realize_virt_arrays, (j_common_ptr cinfo));
  JMETHOD(JSAMPARRAY, access_virt_sarray, (j_common_ptr cinfo,
					   jvirt_sarray_ptr ptr,
					   JDIMENSION start_row,
					   JDIMENSION num_rows,
					   boolean writable));
  JMETHOD(JBLOCKARRAY, access_virt_barray, (j_common_ptr cinfo,
					    jvirt_barray_ptr ptr,
					    JDIMENSION start_row,
					    JDIMENSION num_rows,
					    boolean writable));
  JMETHOD(void, free_pool, (j_common_ptr cinfo, int pool_id));
  JMETHOD(void, self_destruct, (j_common_ptr cinfo));

  /* Limit on memory allocation for this JPEG object.  (Note that this is
   * merely advisory, not a guaranteed maximum; it only affects the space
   * used for virtual-array buffers.)  May be changed by outer application
   * after creating the JPEG object.
   */
  long max_memory_to_use;
};


/* Routine signature for application-supplied marker processing methods.
 * Need not pass marker code since it is stored in cinfo->unread_marker.
 */
typedef JMETHOD(boolean, jpeg_marker_parser_method, (j_decompress_ptr cinfo));


/* Declarations for routines called by application.
 * The JPP macro hides prototype parameters from compilers that can't cope.
 * Note JPP requires double parentheses.
 */

#ifdef HAVE_PROTOTYPES
#define JPP(arglist)	arglist
#else
#define JPP(arglist)	()
#endif


/* Short forms of external names for systems with brain-damaged linkers.
 * We shorten external names to be unique in the first six letters, which
 * is good enough for all known systems.
 * (If your compiler itself needs names to be unique in less than 15 
 * characters, you are out of luck.  Get a better compiler.)
 */

#ifdef NEED_SHORT_EXTERNAL_NAMES
#define jpeg_std_error		jStdError
#define jpeg_CreateCompress	jCreaCompress
#define jpeg_CreateDecompress	jCreaDecompress
#define jpeg_destroy_compress	jDestCompress
#define jpeg_destroy_decompress	jDestDecompress
#define jpeg_stdio_dest		jStdDest
#define jpeg_stdio_src		jStdSrc
#define jpeg_set_defaults	jSetDefaults
#define jpeg_set_colorspace	jSetColorspace
#define jpeg_default_colorspace	jDefColorspace
#define jpeg_set_quality	jSetQuality
#define jpeg_set_linear_quality	jSetLQuality
#define jpeg_add_quant_table	jAddQuantTable
#define jpeg_quality_scaling	jQualityScaling
#define jpeg_simple_progression	jSimProgress
#define jpeg_suppress_tables	jSuppressTables
#define jpeg_alloc_quant_table	jAlcQTable
#define jpeg_alloc_huff_table	jAlcHTable
#define jpeg_start_compress	jStrtCompress
#define jpeg_write_scanlines	jWrtScanlines
#define jpeg_finish_compress	jFinCompress
#define jpeg_write_raw_data	jWrtRawData
#define jpeg_write_marker	jWrtMarker
#define jpeg_write_tables	jWrtTables
#define jpeg_read_header	jReadHeader
#define jpeg_start_decompress	jStrtDecompress
#define jpeg_read_scanlines	jReadScanlines
#define jpeg_finish_decompress	jFinDecompress
#define jpeg_read_raw_data	jReadRawData
#define jpeg_has_multiple_scans	jHasMultScn
#define jpeg_start_output	jStrtOutput
#define jpeg_finish_output	jFinOutput
#define jpeg_input_complete	jInComplete
#define jpeg_new_colormap	jNewCMap
#define jpeg_consume_input	jConsumeInput
#define jpeg_calc_output_dimensions	jCalcDimensions
#define jpeg_set_marker_processor	jSetMarker
#define jpeg_read_coefficients	jReadCoefs
#define jpeg_write_coefficients	jWrtCoefs
#define jpeg_copy_critical_parameters	jCopyCrit
#define jpeg_abort_compress	jAbrtCompress
#define jpeg_abort_decompress	jAbrtDecompress
#define jpeg_abort		jAbort
#define jpeg_destroy		jDestroy
#define jpeg_resync_to_restart	jResyncRestart
#endif /* NEED_SHORT_EXTERNAL_NAMES */


/* Default error-management setup */
EXTERN(struct jpeg_error_mgr *) jpeg_std_error
	JPP((struct jpeg_error_mgr * err));

/* Initialization of JPEG compression objects.
 * jpeg_create_compress() and jpeg_create_decompress() are the exported
 * names that applications should call.  These expand to calls on
 * jpeg_CreateCompress and jpeg_CreateDecompress with additional information
 * passed for version mismatch checking.
 * NB: you must set up the error-manager BEFORE calling jpeg_create_xxx.
 */
#define jpeg_create_compress(cinfo) \
    jpeg_CreateCompress((cinfo), JPEG_LIB_VERSION, \
			(size_t) sizeof(struct jpeg_compress_struct))
#define jpeg_create_decompress(cinfo) \
    jpeg_CreateDecompress((cinfo), JPEG_LIB_VERSION, \
			  (size_t) sizeof(struct jpeg_decompress_struct))
EXTERN(void) jpeg_CreateCompress JPP((j_compress_ptr cinfo,
				      int version, size_t structsize));
EXTERN(void) jpeg_CreateDecompress JPP((j_decompress_ptr cinfo,
					int version, size_t structsize));
/* Destruction of JPEG compression objects */
EXTERN(void) jpeg_destroy_compress JPP((j_compress_ptr cinfo));
EXTERN(void) jpeg_destroy_decompress JPP((j_decompress_ptr cinfo));

/* Standard data source and destination managers: stdio streams. */
/* Caller is responsible for opening the file before and closing after. */
//EXTERN(void) jpeg_stdio_dest JPP((j_compress_ptr cinfo, FILE * outfile));
EXTERN(void) jpeg_stdio_src JPP((j_decompress_ptr cinfo, FILE * infile));

/* Default parameter setup for compression */
EXTERN(void) jpeg_set_defaults JPP((j_compress_ptr cinfo));
/* Compression parameter setup aids */
EXTERN(void) jpeg_set_colorspace JPP((j_compress_ptr cinfo,
				      J_COLOR_SPACE colorspace));
EXTERN(void) jpeg_default_colorspace JPP((j_compress_ptr cinfo));
EXTERN(void) jpeg_set_quality JPP((j_compress_ptr cinfo, int quality,
				   boolean force_baseline));
EXTERN(void) jpeg_set_linear_quality JPP((j_compress_ptr cinfo,
					  int scale_factor,
					  boolean force_baseline));
EXTERN(void) jpeg_add_quant_table JPP((j_compress_ptr cinfo, int which_tbl,
				       const unsigned int *basic_table,
				       int scale_factor,
				       boolean force_baseline));
EXTERN(int) jpeg_quality_scaling JPP((int quality));
EXTERN(void) jpeg_simple_progression JPP((j_compress_ptr cinfo));
EXTERN(void) jpeg_suppress_tables JPP((j_compress_ptr cinfo,
				       boolean suppress));
EXTERN(JQUANT_TBL *) jpeg_alloc_quant_table JPP((j_common_ptr cinfo));
EXTERN(JHUFF_TBL *) jpeg_alloc_huff_table JPP((j_common_ptr cinfo));

/* Main entry points for compression */
EXTERN(void) jpeg_start_compress JPP((j_compress_ptr cinfo,
				      boolean write_all_tables));
EXTERN(JDIMENSION) jpeg_write_scanlines JPP((j_compress_ptr cinfo,
					     JSAMPARRAY scanlines,
					     JDIMENSION num_lines));
EXTERN(void) jpeg_finish_compress JPP((j_compress_ptr cinfo));

/* Replaces jpeg_write_scanlines when writing raw downsampled data. */
EXTERN(JDIMENSION) jpeg_write_raw_data JPP((j_compress_ptr cinfo,
					    JSAMPIMAGE data,
					    JDIMENSION num_lines));

/* Write a special marker.  See libjpeg.doc concerning safe usage. */
EXTERN(void) jpeg_write_marker
	JPP((j_compress_ptr cinfo, int marker,
	     const JOCTET * dataptr, unsigned int datalen));

/* Alternate compression function: just write an abbreviated table file */
EXTERN(void) jpeg_write_tables JPP((j_compress_ptr cinfo));

/* Decompression startup: read start of JPEG datastream to see what's there */
EXTERN(int) jpeg_read_header JPP((j_decompress_ptr cinfo,
				  boolean require_image));
/* Return value is one of: */
#define JPEG_SUSPENDED		0 /* Suspended due to lack of input data */
#define JPEG_HEADER_OK		1 /* Found valid image datastream */
#define JPEG_HEADER_TABLES_ONLY	2 /* Found valid table-specs-only datastream */
/* If you pass require_image = TRUE (normal case), you need not check for
 * a TABLES_ONLY return code; an abbreviated file will cause an error exit.
 * JPEG_SUSPENDED is only possible if you use a data source module that can
 * give a suspension return (the stdio source module doesn't).
 */

/* Main entry points for decompression */
EXTERN(boolean) jpeg_start_decompress JPP((j_decompress_ptr cinfo));
EXTERN(JDIMENSION) jpeg_read_scanlines JPP((j_decompress_ptr cinfo,
					    JSAMPARRAY scanlines,
					    JDIMENSION max_lines));
EXTERN(boolean) jpeg_finish_decompress JPP((j_decompress_ptr cinfo));

/* Replaces jpeg_read_scanlines when reading raw downsampled data. */
EXTERN(JDIMENSION) jpeg_read_raw_data JPP((j_decompress_ptr cinfo,
					   JSAMPIMAGE data,
					   JDIMENSION max_lines));

/* Additional entry points for buffered-image mode. */
EXTERN(boolean) jpeg_has_multiple_scans JPP((j_decompress_ptr cinfo));
EXTERN(boolean) jpeg_start_output JPP((j_decompress_ptr cinfo,
				       int scan_number));
EXTERN(boolean) jpeg_finish_output JPP((j_decompress_ptr cinfo));
EXTERN(boolean) jpeg_input_complete JPP((j_decompress_ptr cinfo));
EXTERN(void) jpeg_new_colormap JPP((j_decompress_ptr cinfo));
EXTERN(int) jpeg_consume_input JPP((j_decompress_ptr cinfo));
/* Return value is one of: */
/* #define JPEG_SUSPENDED	0    Suspended due to lack of input data */
#define JPEG_REACHED_SOS	1 /* Reached start of new scan */
#define JPEG_REACHED_EOI	2 /* Reached end of image */
#define JPEG_ROW_COMPLETED	3 /* Completed one iMCU row */
#define JPEG_SCAN_COMPLETED	4 /* Completed last iMCU row of a scan */

/* Precalculate output dimensions for current decompression parameters. */
EXTERN(void) jpeg_calc_output_dimensions JPP((j_decompress_ptr cinfo));

/* Install a special processing method for COM or APPn markers. */
EXTERN(void) jpeg_set_marker_processor
	JPP((j_decompress_ptr cinfo, int marker_code,
	     jpeg_marker_parser_method routine));

/* Read or write raw DCT coefficients --- useful for lossless transcoding. */
EXTERN(jvirt_barray_ptr *) jpeg_read_coefficients JPP((j_decompress_ptr cinfo));
EXTERN(void) jpeg_write_coefficients JPP((j_compress_ptr cinfo,
					  jvirt_barray_ptr * coef_arrays));
EXTERN(void) jpeg_copy_critical_parameters JPP((j_decompress_ptr srcinfo,
						j_compress_ptr dstinfo));

/* If you choose to abort compression or decompression before completing
 * jpeg_finish_(de)compress, then you need to clean up to release memory,
 * temporary files, etc.  You can just call jpeg_destroy_(de)compress
 * if you're done with the JPEG object, but if you want to clean it up and
 * reuse it, call this:
 */
EXTERN(void) jpeg_abort_compress JPP((j_compress_ptr cinfo));
EXTERN(void) jpeg_abort_decompress JPP((j_decompress_ptr cinfo));

/* Generic versions of jpeg_abort and jpeg_destroy that work on either
 * flavor of JPEG object.  These may be more convenient in some places.
 */
EXTERN(void) jpeg_abort JPP((j_common_ptr cinfo));
EXTERN(void) jpeg_destroy JPP((j_common_ptr cinfo));

/* Default restart-marker-resync procedure for use by data source modules */
EXTERN(boolean) jpeg_resync_to_restart JPP((j_decompress_ptr cinfo,
					    int desired));


/* These marker codes are exported since applications and data source modules
 * are likely to want to use them.
 */

#define JPEG_RST0	0xD0	/* RST0 marker code */
#define JPEG_EOI	0xD9	/* EOI marker code */
#define JPEG_APP0	0xE0	/* APP0 marker code */
#define JPEG_COM	0xFE	/* COM marker code */


/* If we have a brain-damaged compiler that emits warnings (or worse, errors)
 * for structure definitions that are never filled in, keep it quiet by
 * supplying dummy definitions for the various substructures.
 */

#ifdef INCOMPLETE_TYPES_BROKEN
#ifndef JPEG_INTERNALS		/* will be defined in jpegint.h */
struct jvirt_sarray_control { long dummy; };
struct jvirt_barray_control { long dummy; };
struct jpeg_comp_master { long dummy; };
struct jpeg_c_main_controller { long dummy; };
struct jpeg_c_prep_controller { long dummy; };
struct jpeg_c_coef_controller { long dummy; };
struct jpeg_marker_writer { long dummy; };
struct jpeg_color_converter { long dummy; };
struct jpeg_downsampler { long dummy; };
struct jpeg_forward_dct { long dummy; };
struct jpeg_entropy_encoder { long dummy; };
struct jpeg_decomp_master { long dummy; };
struct jpeg_d_main_controller { long dummy; };
struct jpeg_d_coef_controller { long dummy; };
struct jpeg_d_post_controller { long dummy; };
struct jpeg_input_controller { long dummy; };
struct jpeg_marker_reader { long dummy; };
struct jpeg_entropy_decoder { long dummy; };
struct jpeg_inverse_dct { long dummy; };
struct jpeg_upsampler { long dummy; };
struct jpeg_color_deconverter { long dummy; };
struct jpeg_color_quantizer { long dummy; };
#endif /* JPEG_INTERNALS */
#endif /* INCOMPLETE_TYPES_BROKEN */


/*
 * The JPEG library modules define JPEG_INTERNALS before including this file.
 * The internal structure declarations are read only when that is true.
 * Applications using the library should not include jpegint.h, but may wish
 * to include jerror.h.
 */

#ifdef JPEG_INTERNALS
#include "jpegint.h"		/* fetch private declarations */
#include "jerror.h"		/* fetch error codes too */
#endif

#ifdef __cplusplus
};
#endif

#endif /* JPEGLIB_H */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\jquant1.c ===
/*
 * jquant1.c
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains 1-pass color quantization (color mapping) routines.
 * These routines provide mapping to a fixed color map using equally spaced
 * color values.  Optional Floyd-Steinberg or ordered dithering is available.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"

#ifdef QUANT_1PASS_SUPPORTED


/*
 * The main purpose of 1-pass quantization is to provide a fast, if not very
 * high quality, colormapped output capability.  A 2-pass quantizer usually
 * gives better visual quality; however, for quantized grayscale output this
 * quantizer is perfectly adequate.  Dithering is highly recommended with this
 * quantizer, though you can turn it off if you really want to.
 *
 * In 1-pass quantization the colormap must be chosen in advance of seeing the
 * image.  We use a map consisting of all combinations of Ncolors[i] color
 * values for the i'th component.  The Ncolors[] values are chosen so that
 * their product, the total number of colors, is no more than that requested.
 * (In most cases, the product will be somewhat less.)
 *
 * Since the colormap is orthogonal, the representative value for each color
 * component can be determined without considering the other components;
 * then these indexes can be combined into a colormap index by a standard
 * N-dimensional-array-subscript calculation.  Most of the arithmetic involved
 * can be precalculated and stored in the lookup table colorindex[].
 * colorindex[i][j] maps pixel value j in component i to the nearest
 * representative value (grid plane) for that component; this index is
 * multiplied by the array stride for component i, so that the
 * index of the colormap entry closest to a given pixel value is just
 *    sum( colorindex[component-number][pixel-component-value] )
 * Aside from being fast, this scheme allows for variable spacing between
 * representative values with no additional lookup cost.
 *
 * If gamma correction has been applied in color conversion, it might be wise
 * to adjust the color grid spacing so that the representative colors are
 * equidistant in linear space.  At this writing, gamma correction is not
 * implemented by jdcolor, so nothing is done here.
 */


/* Declarations for ordered dithering.
 *
 * We use a standard 16x16 ordered dither array.  The basic concept of ordered
 * dithering is described in many references, for instance Dale Schumacher's
 * chapter II.2 of Graphics Gems II (James Arvo, ed. Academic Press, 1991).
 * In place of Schumacher's comparisons against a "threshold" value, we add a
 * "dither" value to the input pixel and then round the result to the nearest
 * output value.  The dither value is equivalent to (0.5 - threshold) times
 * the distance between output values.  For ordered dithering, we assume that
 * the output colors are equally spaced; if not, results will probably be
 * worse, since the dither may be too much or too little at a given point.
 *
 * The normal calculation would be to form pixel value + dither, range-limit
 * this to 0..MAXJSAMPLE, and then index into the colorindex table as usual.
 * We can skip the separate range-limiting step by extending the colorindex
 * table in both directions.
 */

#define ODITHER_SIZE  16	/* dimension of dither matrix */
/* NB: if ODITHER_SIZE is not a power of 2, ODITHER_MASK uses will break */
#define ODITHER_CELLS (ODITHER_SIZE*ODITHER_SIZE)	/* # cells in matrix */
#define ODITHER_MASK  (ODITHER_SIZE-1) /* mask for wrapping around counters */

typedef int ODITHER_MATRIX[ODITHER_SIZE][ODITHER_SIZE];
typedef int (*ODITHER_MATRIX_PTR)[ODITHER_SIZE];

static const UINT8 base_dither_matrix[ODITHER_SIZE][ODITHER_SIZE] = {
  /* Bayer's order-4 dither array.  Generated by the code given in
   * Stephen Hawley's article "Ordered Dithering" in Graphics Gems I.
   * The values in this array must range from 0 to ODITHER_CELLS-1.
   */
  {   0,192, 48,240, 12,204, 60,252,  3,195, 51,243, 15,207, 63,255 },
  { 128, 64,176,112,140, 76,188,124,131, 67,179,115,143, 79,191,127 },
  {  32,224, 16,208, 44,236, 28,220, 35,227, 19,211, 47,239, 31,223 },
  { 160, 96,144, 80,172,108,156, 92,163, 99,147, 83,175,111,159, 95 },
  {   8,200, 56,248,  4,196, 52,244, 11,203, 59,251,  7,199, 55,247 },
  { 136, 72,184,120,132, 68,180,116,139, 75,187,123,135, 71,183,119 },
  {  40,232, 24,216, 36,228, 20,212, 43,235, 27,219, 39,231, 23,215 },
  { 168,104,152, 88,164,100,148, 84,171,107,155, 91,167,103,151, 87 },
  {   2,194, 50,242, 14,206, 62,254,  1,193, 49,241, 13,205, 61,253 },
  { 130, 66,178,114,142, 78,190,126,129, 65,177,113,141, 77,189,125 },
  {  34,226, 18,210, 46,238, 30,222, 33,225, 17,209, 45,237, 29,221 },
  { 162, 98,146, 82,174,110,158, 94,161, 97,145, 81,173,109,157, 93 },
  {  10,202, 58,250,  6,198, 54,246,  9,201, 57,249,  5,197, 53,245 },
  { 138, 74,186,122,134, 70,182,118,137, 73,185,121,133, 69,181,117 },
  {  42,234, 26,218, 38,230, 22,214, 41,233, 25,217, 37,229, 21,213 },
  { 170,106,154, 90,166,102,150, 86,169,105,153, 89,165,101,149, 85 }
};


/* Declarations for Floyd-Steinberg dithering.
 *
 * Errors are accumulated into the array fserrors[], at a resolution of
 * 1/16th of a pixel count.  The error at a given pixel is propagated
 * to its not-yet-processed neighbors using the standard F-S fractions,
 *		...	(here)	7/16
 *		3/16	5/16	1/16
 * We work left-to-right on even rows, right-to-left on odd rows.
 *
 * We can get away with a single array (holding one row's worth of errors)
 * by using it to store the current row's errors at pixel columns not yet
 * processed, but the next row's errors at columns already processed.  We
 * need only a few extra variables to hold the errors immediately around the
 * current column.  (If we are lucky, those variables are in registers, but
 * even if not, they're probably cheaper to access than array elements are.)
 *
 * The fserrors[] array is indexed [component#][position].
 * We provide (#columns + 2) entries per component; the extra entry at each
 * end saves us from special-casing the first and last pixels.
 *
 * Note: on a wide image, we might not have enough room in a PC's near data
 * segment to hold the error array; so it is allocated with alloc_large.
 */

#if BITS_IN_JSAMPLE == 8
typedef INT16 FSERROR;		/* 16 bits should be enough */
typedef int LOCFSERROR;		/* use 'int' for calculation temps */
#else
typedef INT32 FSERROR;		/* may need more than 16 bits */
typedef INT32 LOCFSERROR;	/* be sure calculation temps are big enough */
#endif

typedef FSERROR FAR *FSERRPTR;	/* pointer to error array (in FAR storage!) */


/* Private subobject */

#define MAX_Q_COMPS 4		/* max components I can handle */

typedef struct {
  struct jpeg_color_quantizer pub; /* public fields */

  /* Initially allocated colormap is saved here */
  JSAMPARRAY sv_colormap;	/* The color map as a 2-D pixel array */
  int sv_actual;		/* number of entries in use */

  JSAMPARRAY colorindex;	/* Precomputed mapping for speed */
  /* colorindex[i][j] = index of color closest to pixel value j in component i,
   * premultiplied as described above.  Since colormap indexes must fit into
   * JSAMPLEs, the entries of this array will too.
   */
  boolean is_padded;		/* is the colorindex padded for odither? */

  int Ncolors[MAX_Q_COMPS];	/* # of values alloced to each component */

  /* Variables for ordered dithering */
  int row_index;		/* cur row's vertical index in dither matrix */
  ODITHER_MATRIX_PTR odither[MAX_Q_COMPS]; /* one dither array per component */

  /* Variables for Floyd-Steinberg dithering */
  FSERRPTR fserrors[MAX_Q_COMPS]; /* accumulated errors */
  boolean on_odd_row;		/* flag to remember which row we are on */
} my_cquantizer;

typedef my_cquantizer * my_cquantize_ptr;


/*
 * Policy-making subroutines for create_colormap and create_colorindex.
 * These routines determine the colormap to be used.  The rest of the module
 * only assumes that the colormap is orthogonal.
 *
 *  * select_ncolors decides how to divvy up the available colors
 *    among the components.
 *  * output_value defines the set of representative values for a component.
 *  * largest_input_value defines the mapping from input values to
 *    representative values for a component.
 * Note that the latter two routines may impose different policies for
 * different components, though this is not currently done.
 */


LOCAL(int)
select_ncolors (j_decompress_ptr cinfo, int Ncolors[])
/* Determine allocation of desired colors to components, */
/* and fill in Ncolors[] array to indicate choice. */
/* Return value is total number of colors (product of Ncolors[] values). */
{
  int nc = cinfo->out_color_components; /* number of color components */
  int max_colors = cinfo->desired_number_of_colors;
  int total_colors, iroot, i, j;
  boolean changed;
  long temp;
  static const int RGB_order[3] = { RGB_GREEN, RGB_RED, RGB_BLUE };

  /* We can allocate at least the nc'th root of max_colors per component. */
  /* Compute floor(nc'th root of max_colors). */
  iroot = 1;
  do {
    iroot++;
    temp = iroot;		/* set temp = iroot ** nc */
    for (i = 1; i < nc; i++)
      temp *= iroot;
  } while (temp <= (long) max_colors); /* repeat till iroot exceeds root */
  iroot--;			/* now iroot = floor(root) */

  /* Must have at least 2 color values per component */
  if (iroot < 2)
    ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, (int) temp);

  /* Initialize to iroot color values for each component */
  total_colors = 1;
  for (i = 0; i < nc; i++) {
    Ncolors[i] = iroot;
    total_colors *= iroot;
  }
  /* We may be able to increment the count for one or more components without
   * exceeding max_colors, though we know not all can be incremented.
   * Sometimes, the first component can be incremented more than once!
   * (Example: for 16 colors, we start at 2*2*2, go to 3*2*2, then 4*2*2.)
   * In RGB colorspace, try to increment G first, then R, then B.
   */
  do {
    changed = FALSE;
    for (i = 0; i < nc; i++) {
      j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
      /* calculate new total_colors if Ncolors[j] is incremented */
      temp = total_colors / Ncolors[j];
      temp *= Ncolors[j]+1;	/* done in long arith to avoid oflo */
      if (temp > (long) max_colors)
	break;			/* won't fit, done with this pass */
      Ncolors[j]++;		/* OK, apply the increment */
      total_colors = (int) temp;
      changed = TRUE;
    }
  } while (changed);

  return total_colors;
}


LOCAL(int)
output_value (j_decompress_ptr cinfo, int ci, int j, int maxj)
/* Return j'th output value, where j will range from 0 to maxj */
/* The output values must fall in 0..MAXJSAMPLE in increasing order */
{
  /* We always provide values 0 and MAXJSAMPLE for each component;
   * any additional values are equally spaced between these limits.
   * (Forcing the upper and lower values to the limits ensures that
   * dithering can't produce a color outside the selected gamut.)
   */
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
}


LOCAL(int)
largest_input_value (j_decompress_ptr cinfo, int ci, int j, int maxj)
/* Return largest input value that should map to j'th output value */
/* Must have largest(j=0) >= 0, and largest(j=maxj) >= MAXJSAMPLE */
{
  /* Breakpoints are halfway between values returned by output_value */
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
}


/*
 * Create the colormap.
 */

LOCAL(void)
create_colormap (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  JSAMPARRAY colormap;		/* Created colormap */
  int total_colors;		/* Number of distinct output colors */
  int i,j,k, nci, blksize, blkdist, ptr, val;

  /* Select number of colors for each component */
  total_colors = select_ncolors(cinfo, cquantize->Ncolors);

  /* Report selected color counts */
  if (cinfo->out_color_components == 3)
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
	     total_colors, cquantize->Ncolors[0],
	     cquantize->Ncolors[1], cquantize->Ncolors[2]);
  else
    TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);

  /* Allocate and fill in the colormap. */
  /* The colors are ordered in the map in standard row-major order, */
  /* i.e. rightmost (highest-indexed) color changes most rapidly. */

  colormap = (*cinfo->mem->alloc_sarray)
    ((j_common_ptr) cinfo, JPOOL_IMAGE,
     (JDIMENSION) total_colors, (JDIMENSION) cinfo->out_color_components);

  /* blksize is number of adjacent repeated entries for a component */
  /* blkdist is distance between groups of identical entries for a component */
  blkdist = total_colors;

  for (i = 0; i < cinfo->out_color_components; i++) {
    /* fill in colormap entries for i'th color component */
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
    blksize = blkdist / nci;
    for (j = 0; j < nci; j++) {
      /* Compute j'th output value (out of nci) for component */
      val = output_value(cinfo, i, j, nci-1);
      /* Fill in all colormap entries that have this value of this component */
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
	/* fill in blksize entries beginning at ptr */
	for (k = 0; k < blksize; k++)
	  colormap[i][ptr+k] = (JSAMPLE) val;
      }
    }
    blkdist = blksize;		/* blksize of this color is blkdist of next */
  }

  /* Save the colormap in private storage,
   * where it will survive color quantization mode changes.
   */
  cquantize->sv_colormap = colormap;
  cquantize->sv_actual = total_colors;
}


/*
 * Create the color index table.
 */

LOCAL(void)
create_colorindex (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  JSAMPROW indexptr;
  int i,j,k, nci, blksize, val, pad;

  /* For ordered dither, we pad the color index tables by MAXJSAMPLE in
   * each direction (input index values can be -MAXJSAMPLE .. 2*MAXJSAMPLE).
   * This is not necessary in the other dithering modes.  However, we
   * flag whether it was done in case user changes dithering mode.
   */
  if (cinfo->dither_mode == JDITHER_ORDERED) {
    pad = MAXJSAMPLE*2;
    cquantize->is_padded = TRUE;
  } else {
    pad = 0;
    cquantize->is_padded = FALSE;
  }

  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
    ((j_common_ptr) cinfo, JPOOL_IMAGE,
     (JDIMENSION) (MAXJSAMPLE+1 + pad),
     (JDIMENSION) cinfo->out_color_components);

  /* blksize is number of adjacent repeated entries for a component */
  blksize = cquantize->sv_actual;

  for (i = 0; i < cinfo->out_color_components; i++) {
    /* fill in colorindex entries for i'th color component */
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
    blksize = blksize / nci;

    /* adjust colorindex pointers to provide padding at negative indexes. */
    if (pad)
      cquantize->colorindex[i] += MAXJSAMPLE;

    /* in loop, val = index of current output value, */
    /* and k = largest j that maps to current val */
    indexptr = cquantize->colorindex[i];
    val = 0;
    k = largest_input_value(cinfo, i, 0, nci-1);
    for (j = 0; j <= MAXJSAMPLE; j++) {
      while (j > k)		/* advance val if past boundary */
	k = largest_input_value(cinfo, i, ++val, nci-1);
      /* premultiply so that no multiplication needed in main processing */
      indexptr[j] = (JSAMPLE) (val * blksize);
    }
    /* Pad at both ends if necessary */
    if (pad)
      for (j = 1; j <= MAXJSAMPLE; j++) {
	indexptr[-j] = indexptr[0];
	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
      }
  }
}


/*
 * Create an ordered-dither array for a component having ncolors
 * distinct output values.
 */

LOCAL(ODITHER_MATRIX_PTR)
make_odither_array (j_decompress_ptr cinfo, int ncolors)
{
  ODITHER_MATRIX_PTR odither;
  int j,k;
  INT32 num,den;

  odither = (ODITHER_MATRIX_PTR)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(ODITHER_MATRIX));
  /* The inter-value distance for this color is MAXJSAMPLE/(ncolors-1).
   * Hence the dither value for the matrix cell with fill order f
   * (f=0..N-1) should be (N-1-2*f)/(2*N) * MAXJSAMPLE/(ncolors-1).
   * On 16-bit-int machine, be careful to avoid overflow.
   */
  den = 2 * ODITHER_CELLS * ((INT32) (ncolors - 1));
  for (j = 0; j < ODITHER_SIZE; j++) {
    for (k = 0; k < ODITHER_SIZE; k++) {
      num = ((INT32) (ODITHER_CELLS-1 - 2*((int)base_dither_matrix[j][k])))
	    * MAXJSAMPLE;
      /* Ensure round towards zero despite C's lack of consistency
       * about rounding negative values in integer division...
       */
      odither[j][k] = (int) (num<0 ? -((-num)/den) : num/den);
    }
  }
  return odither;
}


/*
 * Create the ordered-dither tables.
 * Components having the same number of representative colors may 
 * share a dither table.
 */

LOCAL(void)
create_odither_tables (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  ODITHER_MATRIX_PTR odither;
  int i, j, nci;

  for (i = 0; i < cinfo->out_color_components; i++) {
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
    odither = NULL;		/* search for matching prior component */
    for (j = 0; j < i; j++) {
      if (nci == cquantize->Ncolors[j]) {
	odither = cquantize->odither[j];
	break;
      }
    }
    if (odither == NULL)	/* need a new table? */
      odither = make_odither_array(cinfo, nci);
    cquantize->odither[i] = odither;
  }
}


/*
 * Map some rows of pixels to the output colormapped representation.
 */

METHODDEF(void)
color_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		JSAMPARRAY output_buf, int num_rows)
/* General case, no dithering */
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  JSAMPARRAY colorindex = cquantize->colorindex;
  register int pixcode, ci;
  register JSAMPROW ptrin, ptrout;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
  register int nc = cinfo->out_color_components;

  for (row = 0; row < num_rows; row++) {
    ptrin = input_buf[row];
    ptrout = output_buf[row];
    for (col = width; col > 0; col--) {
      pixcode = 0;
      for (ci = 0; ci < nc; ci++) {
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
      }
      *ptrout++ = (JSAMPLE) pixcode;
    }
  }
}


METHODDEF(void)
color_quantize3 (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		 JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, no dithering */
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register int pixcode;
  register JSAMPROW ptrin, ptrout;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
  JSAMPROW colorindex1 = cquantize->colorindex[1];
  JSAMPROW colorindex2 = cquantize->colorindex[2];
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
    ptrin = input_buf[row];
    ptrout = output_buf[row];
    for (col = width; col > 0; col--) {
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*ptrin++)]);
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
      *ptrout++ = (JSAMPLE) pixcode;
    }
  }
}


METHODDEF(void)
quantize_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		     JSAMPARRAY output_buf, int num_rows)
/* General case, with ordered dithering */
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register JSAMPROW input_ptr;
  register JSAMPROW output_ptr;
  JSAMPROW colorindex_ci;
  int * dither;			/* points to active row of dither matrix */
  int row_index, col_index;	/* current indexes into dither matrix */
  int nc = cinfo->out_color_components;
  int ci;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
    /* Initialize output values to 0 so can process components separately */
    jzero_far((void FAR *) output_buf[row],
	      (size_t) (width * SIZEOF(JSAMPLE)));
    row_index = cquantize->row_index;
    for (ci = 0; ci < nc; ci++) {
      input_ptr = input_buf[row] + ci;
      output_ptr = output_buf[row];
      colorindex_ci = cquantize->colorindex[ci];
      dither = cquantize->odither[ci][row_index];
      col_index = 0;

      for (col = width; col > 0; col--) {
	/* Form pixel value + dither, range-limit to 0..MAXJSAMPLE,
	 * select output value, accumulate into output code for this pixel.
	 * Range-limiting need not be done explicitly, as we have extended
	 * the colorindex table to produce the right answers for out-of-range
	 * inputs.  The maximum dither is +- MAXJSAMPLE; this sets the
	 * required amount of padding.
	 */
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
	input_ptr += nc;
	output_ptr++;
	col_index = (col_index + 1) & ODITHER_MASK;
      }
    }
    /* Advance row index for next row */
    row_index = (row_index + 1) & ODITHER_MASK;
    cquantize->row_index = row_index;
  }
}


METHODDEF(void)
quantize3_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		      JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, with ordered dithering */
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register int pixcode;
  register JSAMPROW input_ptr;
  register JSAMPROW output_ptr;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
  JSAMPROW colorindex1 = cquantize->colorindex[1];
  JSAMPROW colorindex2 = cquantize->colorindex[2];
  int * dither0;		/* points to active row of dither matrix */
  int * dither1;
  int * dither2;
  int row_index, col_index;	/* current indexes into dither matrix */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
    row_index = cquantize->row_index;
    input_ptr = input_buf[row];
    output_ptr = output_buf[row];
    dither0 = cquantize->odither[0][row_index];
    dither1 = cquantize->odither[1][row_index];
    dither2 = cquantize->odither[2][row_index];
    col_index = 0;

    for (col = width; col > 0; col--) {
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
					dither0[col_index]]);
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
					dither1[col_index]]);
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
					dither2[col_index]]);
      *output_ptr++ = (JSAMPLE) pixcode;
      col_index = (col_index + 1) & ODITHER_MASK;
    }
    row_index = (row_index + 1) & ODITHER_MASK;
    cquantize->row_index = row_index;
  }
}


METHODDEF(void)
quantize_fs_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		    JSAMPARRAY output_buf, int num_rows)
/* General case, with Floyd-Steinberg dithering */
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register LOCFSERROR cur;	/* current error or pixel value */
  LOCFSERROR belowerr;		/* error for pixel below cur */
  LOCFSERROR bpreverr;		/* error for below/prev col */
  LOCFSERROR bnexterr;		/* error for below/next col */
  LOCFSERROR delta;
  register FSERRPTR errorptr;	/* => fserrors[] at column before current */
  register JSAMPROW input_ptr;
  register JSAMPROW output_ptr;
  JSAMPROW colorindex_ci;
  JSAMPROW colormap_ci;
  int pixcode;
  int nc = cinfo->out_color_components;
  int dir;			/* 1 for left-to-right, -1 for right-to-left */
  int dirnc;			/* dir * nc */
  int ci;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
  JSAMPLE *range_limit = cinfo->sample_range_limit;
  SHIFT_TEMPS

  for (row = 0; row < num_rows; row++) {
    /* Initialize output values to 0 so can process components separately */
    jzero_far((void FAR *) output_buf[row],
	      (size_t) (width * SIZEOF(JSAMPLE)));
    for (ci = 0; ci < nc; ci++) {
      input_ptr = input_buf[row] + ci;
      output_ptr = output_buf[row];
      if (cquantize->on_odd_row) {
	/* work right to left in this row */
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
	output_ptr += width-1;
	dir = -1;
	dirnc = -nc;
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
      } else {
	/* work left to right in this row */
	dir = 1;
	dirnc = nc;
	errorptr = cquantize->fserrors[ci]; /* => entry before first column */
      }
      colorindex_ci = cquantize->colorindex[ci];
      colormap_ci = cquantize->sv_colormap[ci];
      /* Preset error values: no error propagated to first pixel from left */
      cur = 0;
      /* and no error propagated to row below yet */
      belowerr = bpreverr = 0;

      for (col = width; col > 0; col--) {
	/* cur holds the error propagated from the previous pixel on the
	 * current line.  Add the error propagated from the previous line
	 * to form the complete error correction term for this pixel, and
	 * round the error term (which is expressed * 16) to an integer.
	 * RIGHT_SHIFT rounds towards minus infinity, so adding 8 is correct
	 * for either sign of the error value.
	 * Note: errorptr points to *previous* column's array entry.
	 */
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
	/* Form pixel value + error, and range-limit to 0..MAXJSAMPLE.
	 * The maximum error is +- MAXJSAMPLE; this sets the required size
	 * of the range_limit array.
	 */
	cur += GETJSAMPLE(*input_ptr);
	cur = GETJSAMPLE(range_limit[cur]);
	/* Select output value, accumulate into output code for this pixel */
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
	*output_ptr += (JSAMPLE) pixcode;
	/* Compute actual representation error at this pixel */
	/* Note: we can do this even though we don't have the final */
	/* pixel code, because the colormap is orthogonal. */
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
	/* Compute error fractions to be propagated to adjacent pixels.
	 * Add these into the running sums, and simultaneously shift the
	 * next-line error sums left by 1 column.
	 */
	bnexterr = cur;
	delta = cur * 2;
	cur += delta;		/* form error * 3 */
	errorptr[0] = (FSERROR) (bpreverr + cur);
	cur += delta;		/* form error * 5 */
	bpreverr = belowerr + cur;
	belowerr = bnexterr;
	cur += delta;		/* form error * 7 */
	/* At this point cur contains the 7/16 error value to be propagated
	 * to the next pixel on the current line, and all the errors for the
	 * next line have been shifted over. We are therefore ready to move on.
	 */
	input_ptr += dirnc;	/* advance input ptr to next column */
	output_ptr += dir;	/* advance output ptr to next column */
	errorptr += dir;	/* advance errorptr to current column */
      }
      /* Post-loop cleanup: we must unload the final error value into the
       * final fserrors[] entry.  Note we need not unload belowerr because
       * it is for the dummy column before or after the actual array.
       */
      errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
    }
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
  }
}


/*
 * Allocate workspace for Floyd-Steinberg errors.
 */

LOCAL(void)
alloc_fs_workspace (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  size_t arraysize;
  int i;

  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
  for (i = 0; i < cinfo->out_color_components; i++) {
    cquantize->fserrors[i] = (FSERRPTR)
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
  }
}


/*
 * Initialize for one-pass color quantization.
 */

METHODDEF(void)
start_pass_1_quant (j_decompress_ptr cinfo, boolean is_pre_scan)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  size_t arraysize;
  int i;

  /* Install my colormap. */
  cinfo->colormap = cquantize->sv_colormap;
  cinfo->actual_number_of_colors = cquantize->sv_actual;

  /* Initialize for desired dithering mode. */
  switch (cinfo->dither_mode) {
  case JDITHER_NONE:
    if (cinfo->out_color_components == 3)
      cquantize->pub.color_quantize = color_quantize3;
    else
      cquantize->pub.color_quantize = color_quantize;
    break;
  case JDITHER_ORDERED:
    if (cinfo->out_color_components == 3)
      cquantize->pub.color_quantize = quantize3_ord_dither;
    else
      cquantize->pub.color_quantize = quantize_ord_dither;
    cquantize->row_index = 0;	/* initialize state for ordered dither */
    /* If user changed to ordered dither from another mode,
     * we must recreate the color index table with padding.
     * This will cost extra space, but probably isn't very likely.
     */
    if (! cquantize->is_padded)
      create_colorindex(cinfo);
    /* Create ordered-dither tables if we didn't already. */
    if (cquantize->odither[0] == NULL)
      create_odither_tables(cinfo);
    break;
  case JDITHER_FS:
    cquantize->pub.color_quantize = quantize_fs_dither;
    cquantize->on_odd_row = FALSE; /* initialize state for F-S dither */
    /* Allocate Floyd-Steinberg workspace if didn't already. */
    if (cquantize->fserrors[0] == NULL)
      alloc_fs_workspace(cinfo);
    /* Initialize the propagated errors to zero. */
    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
    for (i = 0; i < cinfo->out_color_components; i++)
      jzero_far((void FAR *) cquantize->fserrors[i], arraysize);
    break;
  default:
    ERREXIT(cinfo, JERR_NOT_COMPILED);
    break;
  }
}


/*
 * Finish up at the end of the pass.
 */

METHODDEF(void)
finish_pass_1_quant (j_decompress_ptr cinfo)
{
  /* no work in 1-pass case */
}


/*
 * Switch to a new external colormap between output passes.
 * Shouldn't get to this module!
 */

METHODDEF(void)
new_color_map_1_quant (j_decompress_ptr cinfo)
{
  ERREXIT(cinfo, JERR_MODE_CHANGE);
}


/*
 * Module initialization routine for 1-pass color quantization.
 */

GLOBAL(void)
jinit_1pass_quantizer (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_1_quant;
  cquantize->pub.finish_pass = finish_pass_1_quant;
  cquantize->pub.new_color_map = new_color_map_1_quant;
  cquantize->fserrors[0] = NULL; /* Flag FS workspace not allocated */
  cquantize->odither[0] = NULL;	/* Also flag odither arrays not allocated */

  /* Make sure my internal arrays won't overflow */
  if (cinfo->out_color_components > MAX_Q_COMPS)
    ERREXIT1(cinfo, JERR_QUANT_COMPONENTS, MAX_Q_COMPS);
  /* Make sure colormap indexes can be represented by JSAMPLEs */
  if (cinfo->desired_number_of_colors > (MAXJSAMPLE+1))
    ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXJSAMPLE+1);

  /* Create the colormap and color index table. */
  create_colormap(cinfo);
  create_colorindex(cinfo);

  /* Allocate Floyd-Steinberg workspace now if requested.
   * We do this now since it is FAR storage and may affect the memory
   * manager's space calculations.  If the user changes to FS dither
   * mode in a later pass, we will allocate the space then, and will
   * possibly overrun the max_memory_to_use setting.
   */
  if (cinfo->dither_mode == JDITHER_FS)
    alloc_fs_workspace(cinfo);
}

#endif /* QUANT_1PASS_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\jversion.h ===
/*
 * jversion.h
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains software version identification.
 */


#define JVERSION	"6a  7-Feb-96"

#define JCOPYRIGHT	"Copyright (C) 1996, Thomas G. Lane"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\mffst.c ===
/***************************************************************************
*
*                INTEL Corporation Proprietary Information  
*
*      
*                  Copyright (c) 1996 Intel Corporation.
*                         All rights reserved.
*
***************************************************************************
*/
/*
 * jfdctfst.c
 *
 * Copyright (C) 1994-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains a fast, not so accurate integer implementation of the
 * forward DCT (Discrete Cosine Transform).
 *
 * A 2-D DCT can be done by 1-D DCT on each row followed by 1-D DCT
 * on each column.  Direct algorithms are also available, but they are
 * much more complex and seem not to be any faster when reduced to code.
 *
 * This implementation is based on Arai, Agui, and Nakajima's algorithm for
 * scaled DCT.  Their original paper (Trans. IEICE E-71(11):1095) is in
 * Japanese, but the algorithm is described in the Pennebaker & Mitchell
 * JPEG textbook (see REFERENCES section in file README).  The following code
 * is based directly on figure 4-8 in P&M.
 * While an 8-point DCT cannot be done in less than 11 multiplies, it is
 * possible to arrange the computation so that many of the multiplies are
 * simple scalings of the final outputs.  These multiplies can then be
 * folded into the multiplications or divisions by the JPEG quantization
 * table entries.  The AA&N method leaves only 5 multiplies and 29 adds
 * to be done in the DCT itself.
 * The primary disadvantage of this method is that with fixed-point math,
 * accuracy is lost due to imprecise representation of the scaled
 * quantization values.  The smaller the quantization table entry, the less
 * precise the scaled value, so this implementation does worse with high-
 * quality-setting files than with low-quality ones.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */

#ifdef DCT_IFAST_SUPPORTED

#ifndef _X86_

GLOBAL(void)
mfdct8x8aan (DCTELEM * data)
{
}

#else

/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif


/* Scaling decisions are generally the same as in the LL&M algorithm;
 * see jfdctint.c for more details.  However, we choose to descale
 * (right shift) multiplication products as soon as they are formed,
 * rather than carrying additional fractional bits into subsequent additions.
 * This compromises accuracy slightly, but it lets us save a few shifts.
 * More importantly, 16-bit arithmetic is then adequate (for 8-bit samples)
 * everywhere except in the multiplications proper; this saves a good deal
 * of work on 16-bit-int machines.
 *
 * Again to save a few shifts, the intermediate results between pass 1 and
 * pass 2 are not upscaled, but are represented only to integral precision.
 *
 * A final compromise is to represent the multiplicative constants to only
 * 8 fractional bits, rather than 13.  This saves some shifting work on some
 * machines, and may also reduce the cost of multiplication (since there
 * are fewer one-bits in the constants).
 */

#define CONST_BITS  8


/* Some C compilers fail to reduce "FIX(constant)" at compile time, thus
 * causing a lot of useless floating-point operations at run time.
 * To get around this we use the following pre-calculated constants.
 * If you change CONST_BITS you may want to add appropriate values.
 * (With a reasonable C compiler, you can just rely on the FIX() macro...)
 */

#if CONST_BITS == 8
#define FIX_0_382683433				 98		/* FIX(0.382683433) */
#define FIX_0_541196100				139		/* FIX(0.541196100) */
#define FIX_0_707106781				181		/* FIX(0.707106781) */
#define FIX_1_306562965				334		/* FIX(1.306562965) */
#else
#define FIX_0_382683433  FIX(0.382683433)
#define FIX_0_541196100  FIX(0.541196100)
#define FIX_0_707106781  FIX(0.707106781)
#define FIX_1_306562965  FIX(1.306562965)
#endif

//The following constant is shifted left 8 for the pmulhw instruction
const __int64 Const_FIX_0_382683433	=	0x6200620062006200;

  //The following constants are shifted left 7 for the pmulhw instruction
const __int64 Const_FIX_0_541196100	=	0x4580458045804580;
const __int64 Const_FIX_0_707106781	=	0x5a805a805a805a80;

//The following constant is shifted left 6 for the pmulhw instruction
const __int64 Const_FIX_1_306562965	=	0x5380538053805380;

/* We can gain a little more speed, with a further compromise in accuracy,
 * by omitting the addition in a descaling shift.  This yields an incorrectly
 * rounded result half the time...
 */

// The assembly version makes this compromise.
 
//#ifndef USE_ACCURATE_ROUNDING
//#undef DESCALE
//#define DESCALE(x,n)  RIGHT_SHIFT(x, n)
//#endif

#define	DATASIZE	32


/* Multiply a DCTELEM variable by an INT32 constant, and immediately
 * descale to yield a DCTELEM result.
 */

#define MULTIPLY(var,const)  ((DCTELEM) DESCALE((var) * (const), CONST_BITS))


/*
 * Perform the forward DCT on one block of samples.
 */

GLOBAL(void)
mfdct8x8aan (DCTELEM * data)
{

__asm{
	
		mov		edi, [data]
		
	// transpose the bottom right quadrant(4X4) of the matrix
	//  ---------       ---------
	// | M1 | M2 |     | M1'| M3'|
	//  ---------  -->  ---------
	// | M3 | M4 |     | M2'| M4'|
	//  ---------       ---------
	// Get the 32-bit quantities and pack into 16 bits

		movq	mm5, [edi][DATASIZE*4+16]		//| w41 | w40 |
		
		movq	mm3, [edi][DATASIZE*4+24]		//| w43 | w42 |
		
		movq	mm6, [edi][DATASIZE*5+16]
		packssdw mm5, mm3				//|w43|w42|w41|w40|

		movq	mm7, [edi][DATASIZE*5+24]
		movq		mm4, mm5			// copy w4---0,1,3,5,6

		movq	mm3, [edi][DATASIZE*6+16]
		packssdw mm6, mm7

		movq	mm2, [edi][DATASIZE*6+24]
		punpcklwd	mm5, mm6			//mm6 = w5

		movq	mm1, [edi][DATASIZE*7+16]
		packssdw mm3, mm2

		movq	mm0, [edi][DATASIZE*7+24]
		punpckhwd	mm4, mm6			//---0,1,3,5,6 

		packssdw mm1, mm0
		movq		mm7, mm3			//---0,1,2,3,5,6 w6

		punpcklwd	mm3, mm1			//mm1 = w7
		movq		mm0, mm5			//---0,2,3,4,5,6,7

		movq	mm2, [edi][DATASIZE*4]	//| w01 | w00 |
		punpckhdq	mm0, mm3			// transposed w5---0,2,4,6,7

		punpckhwd	mm7, mm1			//---0,2,3,5,6,7

		movq	mm1, [edi][DATASIZE*5+8]
		movq		mm6, mm4			//---0,2,3,4,6,7

		movq	[edi][DATASIZE*5+16], mm0  // store w5
		punpckldq	mm5, mm3			// transposed w4

		movq	mm3, [edi][DATASIZE*5]
		punpckldq	mm4, mm7			// transposed w6

		movq	mm0, [edi][DATASIZE*4+8]  //| w03 | w02 |
		punpckhdq	mm6, mm7			// transposed w7---0,3,6,7


	// transpose the bottom left quadrant(4X4) of the matrix and place
	// in the top right quadrant while doing the same for the top
	// right quadrant
	//  ---------       ---------
	// | M1 | M2 |     | M1'| M3'|
	//  ---------  -->  ---------
	// | M3 | M4 |     | M2'| M4'|
	//  ---------       ---------

		movq	[edi][DATASIZE*4+16], mm5  // store w4
		packssdw mm2, mm0				//|w03|w02|w01|w00|

		movq	mm5, [edi][DATASIZE*7]
		packssdw mm3, mm1

		movq	mm0, [edi][DATASIZE*7+8]

		movq	[edi][DATASIZE*7+16], mm6  // store w7---5,6,7
		packssdw mm5, mm0

		movq	mm6, [edi][DATASIZE*6]
		movq		mm0, mm2			// copy w0---0,1,3,5,6

		movq	mm7, [edi][DATASIZE*6+8]
		punpcklwd	mm2, mm3			//mm6 = w1

		movq	[edi][DATASIZE*6+16], mm4  // store w6---3,5,6,7	
		packssdw mm6, mm7

		movq		mm1, [edi][DATASIZE*0+24]
		punpckhwd	mm0, mm3			//---0,1,3,5,6 

		movq		mm7, mm6			//---0,1,2,3,5,6 w2
		punpcklwd	mm6, mm5			//mm1 = w3

		movq		mm3, [edi][DATASIZE*0+16]
		punpckhwd	mm7, mm5			//---0,2,3,5,6,7

		movq		mm4, [edi][DATASIZE*2+24]
		packssdw	mm3, mm1

		movq		mm1, mm2			//---0,2,3,4,5,6,7
		punpckldq	mm2, mm6			// transposed w4

		movq		mm5, [edi][DATASIZE*2+16]
		punpckhdq	mm1, mm6			// transposed w5---0,2,4,6,7

		movq	[edi][DATASIZE*0+16], mm2  // store w4
 		packssdw	mm5, mm4

		movq		mm4, [edi][DATASIZE*1+16]
		movq		mm6, mm0			//---0,2,3,4,6,7

		movq		mm2, [edi][DATASIZE*1+24]
		punpckldq	mm0, mm7			// transposed w6

		movq	[edi][DATASIZE*1+16], mm1  // store w5
		punpckhdq	mm6, mm7			// transposed w7---0,3,6,7

		movq		mm7, [edi][DATASIZE*3+24]
		packssdw	mm4, mm2

		movq	[edi][DATASIZE*2+16], mm0  // store w6---3,5,6,7	
		movq		mm1, mm3			// copy w4---0,1,3,5,6

		movq		mm2, [edi][DATASIZE*3+16]
		punpcklwd	mm3, mm4			//mm6 = w5

		movq	[edi][DATASIZE*3+16], mm6  // store w7---5,6,7
		packssdw	mm2, mm7


	// transpose the bottom left quadrant(4X4) of the matrix
	//  ---------       ---------
	// | M1 | M2 |     | M1'| M3'|
	//  ---------  -->  ---------
	// | M3 | M4 |     | M2'| M4'|
	//  ---------       ---------

   		movq	mm6, [edi][DATASIZE*0]	//| w01 | w00 |
		punpckhwd	mm1, mm4			//---0,1,3,5,6
		
		movq		mm7, mm5			//---0,1,2,3,5,6 w6
		punpcklwd	mm5, mm2			//mm1 = w7

		movq	mm4, [edi][DATASIZE*0+8]		//| w03 | w02 |
		punpckhwd	mm7, mm2			//---0,2,3,5,6,7

		movq		mm0, mm3			//---0,2,3,4,5,6,7
		packssdw mm6, mm4				//|w03|w02|w01|w00|

		movq	mm2, [edi][DATASIZE*2+8]
		punpckldq	mm3, mm5			// transposed w4

		movq	mm4, [edi][DATASIZE*1]
		punpckhdq	mm0, mm5			// transposed w5---0,2,4,6,7
		
		movq	[edi][DATASIZE*4], mm3  // store w4
		movq		mm5, mm1			//---0,2,3,4,6,7

		movq	mm3, [edi][DATASIZE*2]
		punpckldq	mm1, mm7			// transposed w6

		movq	[edi][DATASIZE*5], mm0  // store w5
		punpckhdq	mm5, mm7			// transposed w7---0,3,6,7

		movq	mm7, [edi][DATASIZE*1+8]
		packssdw mm3, mm2

		movq	[edi][DATASIZE*7], mm5  // store w7---5,6,7
		movq		mm5, mm6			// copy w0---0,1,3,5,6

		movq	[edi][DATASIZE*6], mm1  // store w6---3,5,6,7	
		packssdw mm4, mm7

	// transpose the top left quadrant(4X4) of the matrix
	//  ---------       ---------
	// | M1 | M2 |     | M1'| M3'|
	//  ---------  -->  ---------
	// | M3 | M4 |     | M2'| M4'|
	//  ---------       ---------

	// Get the 32-bit quantities and pack into 16 bits
		movq	mm1, [edi][DATASIZE*3]
		punpcklwd	mm6, mm4			//mm6 = w1

		movq	mm0, [edi][DATASIZE*3+8]
		punpckhwd	mm5, mm4			//---0,1,3,5,6 

		packssdw mm1, mm0
		movq		mm2, mm3			//---0,1,2,3,5,6 w2

		punpcklwd	mm3, mm1			//mm1 = w3
		movq		mm0, mm6			//---0,2,3,4,5,6,7

		movq		mm4, [edi][DATASIZE*7]
		punpckhwd	mm2, mm1			//---0,2,3,5,6,7

		movq		mm1, [edi][DATASIZE*4]
		punpckldq	mm6, mm3			// transposed w4

		punpckhdq	mm0, mm3			// transposed w5---0,2,4,6,7
		movq		mm3, mm5			//---0,2,3,4,6,7

		movq	[edi][DATASIZE*0], mm6  // store w4
		punpckldq	mm5, mm2			// transposed w6

		movq	[edi][DATASIZE*1], mm0  // store w5
		punpckhdq	mm3, mm2			// transposed w7---0,3,6,7

		movq	[edi][DATASIZE*2], mm5  // store w6---3,5,6,7	
		paddw	mm6, mm4				// tmp0

		movq	[edi][DATASIZE*3], mm3  // store w7---5,6,7
		movq	mm7, mm6


	//******************************************************************************
	// End of transpose.  Begin row dct.
	//******************************************************************************

//	tmp0 = dataptr[0] + dataptr[7];
//	tmp7 = dataptr[0] - dataptr[7];
//	tmp1 = dataptr[1] + dataptr[6];
//	tmp6 = dataptr[1] - dataptr[6];
//	tmp2 = dataptr[2] + dataptr[5];
//	tmp5 = dataptr[2] - dataptr[5];
//	tmp3 = dataptr[3] + dataptr[4];
//	tmp4 = dataptr[3] - dataptr[4];

		paddw	mm0, [edi][DATASIZE*6]	// tmp1
		paddw	mm3, mm1				// tmp3

		paddw	mm5, [edi][DATASIZE*5]	// tmp2
		movq	mm1, mm0


//    tmp10 = tmp0 + tmp3;
//    tmp13 = tmp0 - tmp3;
//    tmp11 = tmp1 + tmp2;
//    tmp12 = tmp1 - tmp2;

		psubw	mm7, mm3				//tmp13
		psubw	mm0, mm5				//tmp12

		paddw	mm0, mm7	//tmp12 + tmp13
		paddw	mm6, mm3				//tmp10

//    dataptr[0] = tmp10 + tmp11; /* phase 3 */
//    dataptr[4] = tmp10 - tmp11;
//    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_707106781); /* c4 */
//NOTE: We can't write these values out immediately.  Values for tmp4 - tmp7
//haven't been calculated yet!


		paddw	mm1, mm5				//tmp11
 		psllw	mm0, 1

		pmulhw	mm0, Const_FIX_0_707106781	// z1
		movq	mm3, mm6	

//    dataptr[2] = tmp13 + z1; /* phase 5 */
//    dataptr[6] = tmp13 - z1;
//NOTE: We can't write these values out immediately.  Values for tmp4 - tmp7
//haven't been calculated yet!

		movq	mm5, [edi][DATASIZE*3]
		paddw	mm6, mm1	//tmp10 + tmp11
		
	//		tmp4 = dataptr[3] - dataptr[4]//
		psubw	mm5, [edi][DATASIZE*4]	//tmp4
		movq	mm4, mm7

		movq	mm2, [edi][DATASIZE*2]
		psubw	mm3, mm1	//tmp10 - tmp11

		psubw	mm2, [edi][DATASIZE*5]	//tmp5
		paddw	mm7, mm0	//tmp13 + z1

		movq	mm1, [edi][DATASIZE*1]
		psubw	mm4, mm0	//tmp13 - z1

//    tmp10 = tmp4 + tmp5;	/* phase 2 */
//    tmp11 = tmp5 + tmp6;
//    tmp12 = tmp6 + tmp7;

		psubw	mm1, [edi][DATASIZE*6]	//tmp6
		paddw	mm5, mm2	//tmp10
		
		movq	mm0, [edi][DATASIZE*0]
		paddw	mm2, mm1	//tmp11

//    z3 = MULTIPLY(tmp11, FIX_0_707106781); /* c4 */
//    z11 = tmp7 + z3;		/* phase 5 */
//    z13 = tmp7 - z3;
		
		psubw	mm0, [edi][DATASIZE*7]	//tmp7
 		psllw	mm2, 1

		movq	[edi][DATASIZE*0], mm6
		movq	mm6, mm0

		movq	[edi][DATASIZE*2], mm7
		movq	mm7, mm5

		pmulhw	mm2, Const_FIX_0_707106781	//z3
		paddw	mm1, mm0	//tmp12

		movq	[edi][DATASIZE*4], mm3
		psubw	mm5, mm1	//tmp10 - tmp12

		pmulhw	mm5, Const_FIX_0_382683433	//z5
		psllw	mm7, 1

    /* The rotator is modified from fig 4-8 to avoid extra negations. */
//    z5 = MULTIPLY(tmp10 - tmp12, FIX_0_382683433); /* c6 */
//    z2 = MULTIPLY(tmp10, FIX_0_541196100) + z5; /* c2-c6 */
//    z4 = MULTIPLY(tmp12, FIX_1_306562965) + z5; /* c2+c6 */
		
		pmulhw	mm7, Const_FIX_0_541196100
		psllw	mm1, 2

		pmulhw	mm1, Const_FIX_1_306562965
		psubw	mm6, mm2	//z13

		movq	[edi][DATASIZE*6], mm4
		paddw	mm0, mm2	//z11

		movq	mm2, [edi][DATASIZE*3+16]
		paddw	mm7, mm5	//z2

		paddw	mm2, [edi][DATASIZE*4+16]	// tmp3
		paddw	mm1, mm5	//z4

//    dataptr[5] = z13 + z2;	/* phase 6 */
//    dataptr[3] = z13 - z2;
//    dataptr[1] = z11 + z4;
//    dataptr[7] = z11 - z4;

		movq	mm5, [edi][DATASIZE*0+16]
		movq	mm3, mm6

		paddw	mm5, [edi][DATASIZE*7+16]	//tmp0
		paddw	mm6, mm7	//z13 + z2

		psubw	mm3, mm7	//z13 - z2
		movq	mm7, mm5

		movq	[edi][DATASIZE*5], mm6	//store 
		movq	mm4, mm0
		
		movq	[edi][DATASIZE*3], mm3	//store 
		paddw	mm0, mm1	//z11 + z4

		movq	mm3, [edi][DATASIZE*1+16]
		psubw	mm4, mm1	//z11 - z4

	//******************************************************************************
	// This completes 4x8 dct locations.  Copy to do other 4x8.
	//******************************************************************************
//	tmp0 = dataptr[0] + dataptr[7];
//	tmp7 = dataptr[0] - dataptr[7];
//	tmp1 = dataptr[1] + dataptr[6];
//	tmp6 = dataptr[1] - dataptr[6];
//	tmp2 = dataptr[2] + dataptr[5];
//	tmp5 = dataptr[2] - dataptr[5];
//	tmp3 = dataptr[3] + dataptr[4];
//	tmp4 = dataptr[3] - dataptr[4];

		paddw	mm3, [edi][DATASIZE*6+16]	// tmp1
		paddw	mm5, mm2				//tmp10

		movq	mm1, [edi][DATASIZE*2+16]
		psubw	mm7, mm2				//tmp13

		paddw	mm1, [edi][DATASIZE*5+16]	// tmp2
		movq	mm6, mm3

//    tmp10 = tmp0 + tmp3;
//    tmp13 = tmp0 - tmp3;
//    tmp11 = tmp1 + tmp2;
//    tmp12 = tmp1 - tmp2;

		paddw	mm3, mm1				//tmp11
		psubw	mm6, mm1				//tmp12

//    dataptr[0] = tmp10 + tmp11; /* phase 3 */
//    dataptr[4] = tmp10 - tmp11;
//    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_707106781); /* c4 */
//NOTE: We can't write these values out immediately.  Values for tmp4 - tmp7
//haven't been calculated yet!

		movq	[edi][DATASIZE*1], mm0	//store 
		paddw	mm6, mm7	//tmp12 + tmp13

		movq	[edi][DATASIZE*7], mm4	//store 
 		psllw	mm6, 1

 		pmulhw	mm6, Const_FIX_0_707106781	// z1
		movq	mm1, mm5	

//    dataptr[2] = tmp13 + z1; /* phase 5 */
//    dataptr[6] = tmp13 - z1;
//NOTE: We can't write these values out immediately.  Values for tmp4 - tmp7
//haven't been calculated yet!

		movq	mm2, [edi][DATASIZE*3+16]
		paddw	mm5, mm3	//tmp10 + tmp11
		
	//		tmp4 = dataptr[3] - dataptr[4]//
		psubw	mm2, [edi][DATASIZE*4+16]	//tmp4
		movq	mm4, mm7

		movq	mm0, [edi][DATASIZE*2+16]
		psubw	mm1, mm3	//tmp10 - tmp11

		psubw	mm0, [edi][DATASIZE*5+16]	//tmp5
		paddw	mm7, mm6	//tmp13 + z1

		movq	mm3, [edi][DATASIZE*1+16]
		psubw	mm4, mm6	//tmp13 - z1

//    tmp10 = tmp4 + tmp5;	/* phase 2 */
//    tmp11 = tmp5 + tmp6;
//    tmp12 = tmp6 + tmp7;

		psubw	mm3, [edi][DATASIZE*6+16]	//tmp6
		paddw	mm2, mm0	//tmp10
		
		movq	mm6, [edi][DATASIZE*0+16]
		paddw	mm0, mm3	//tmp11

//    z3 = MULTIPLY(tmp11, FIX_0_707106781); /* c4 */
//    z11 = tmp7 + z3;		/* phase 5 */
//    z13 = tmp7 - z3;
		
		psubw	mm6, [edi][DATASIZE*7+16]	//tmp7
 		psllw	mm0, 1

		movq	[edi][DATASIZE*0+16], mm5
		movq	mm5, mm6

		movq	[edi][DATASIZE*2+16], mm7
		movq	mm7, mm2

		pmulhw	mm0, Const_FIX_0_707106781	//z3
		paddw	mm3, mm6	//tmp12

		movq	[edi][DATASIZE*4+16], mm1
		psubw	mm2, mm3	//tmp10 - tmp12

		pmulhw	mm2, Const_FIX_0_382683433	//z5
		psllw	mm7, 1

		pmulhw	mm7, Const_FIX_0_541196100
		paddw	mm6, mm0	//z11

    /* The rotator is modified from fig 4-8 to avoid extra negations. */
//    z5 = MULTIPLY(tmp10 - tmp12, FIX_0_382683433); /* c6 */
//    z2 = MULTIPLY(tmp10, FIX_0_541196100) + z5; /* c2-c6 */
//    z4 = MULTIPLY(tmp12, FIX_1_306562965) + z5; /* c2+c6 */

		movq	[edi][DATASIZE*6+16], mm4
		psllw	mm3, 2

		pmulhw	mm3, Const_FIX_1_306562965
		psubw	mm5, mm0	//z13

		paddw	mm7, mm2	//z2
		movq	mm1, mm5

		paddw	mm5, mm7	//z13 + z2
		psubw	mm1, mm7	//z13 - z2
		
		movq	mm7, [edi][DATASIZE*4]
		paddw	mm3, mm2	//z4

//    dataptr[5] = z13 + z2;	/* phase 6 */
//    dataptr[3] = z13 - z2;
//    dataptr[1] = z11 + z4;
//    dataptr[7] = z11 - z4;

		movq	[edi][DATASIZE*5+16], mm5	//store 
		movq	mm4, mm6

		movq	mm2, [edi][DATASIZE*7]
		paddw	mm6, mm3	//z11 + z4

		movq	mm5, [edi][DATASIZE*5]
		psubw	mm4, mm3	//z11 - z4

	//******************************************************************************

	//******************************************************************************
	// This completes all 8x8 dct locations for the row case.
	// Now transpose the data for the columns.
	//******************************************************************************
	// transpose the bottom left quadrant(4X4) of the matrix and place
	// in the top right quadrant while doing the same for the top
	// right quadrant
	//  ---------       ---------
	// | M1 | M2 |     | M1'| M3'|
	//  ---------  -->  ---------
	// | M3 | M4 |     | M2'| M4'|
	//  ---------       ---------

		movq		mm0, mm7			// copy w0---0,1,3,5,6
		punpcklwd	mm7, mm5			//mm6 = w1

		movq	mm3, [edi][DATASIZE*6]
		punpckhwd	mm0, mm5			//---0,1,3,5,6 

		movq		mm5, mm3			//---0,1,2,3,5,6 w2
		punpcklwd	mm3, mm2			//mm1 = w3

		movq	[edi][DATASIZE*7+16], mm4	//store
		punpckhwd	mm5, mm2			//---0,2,3,5,6,7

		movq		mm4, mm7			//---0,2,3,4,5,6,7
		punpckldq	mm7, mm3			// transposed w4
		
		movq		mm2, [edi][DATASIZE*0+16]
		punpckhdq	mm4, mm3			// transposed w5---0,2,4,6,7

		movq	[edi][DATASIZE*0+16], mm7  // store w4
		movq		mm3, mm0			//---0,2,3,4,6,7

		movq	[edi][DATASIZE*1+16], mm4  // store w5
		punpckldq	mm0, mm5			// transposed w6

		movq		mm7, [edi][DATASIZE*2+16]
		punpckhdq	mm3, mm5			// transposed w7---0,3,6,7

		movq		mm5, mm2			// copy w4---0,1,3,5,6
		punpcklwd	mm2, mm6			//mm6 = w5

	// transpose the top right quadrant(4X4) of the matrix
	//  ---------       ---------
	// | M1 | M2 |     | M1'| M3'|
	//  ---------  -->  ---------
	// | M3 | M4 |     | M2'| M4'|
	//  ---------       ---------

		movq	[edi][DATASIZE*2+16], mm0  // store w6---3,5,6,7	
		punpckhwd	mm5, mm6			//---0,1,3,5,6 

		movq		mm4, mm7			//---0,1,2,3,5,6 w6
		punpckhwd	mm7, mm1			//---0,2,3,5,6,7

		movq	[edi][DATASIZE*3+16], mm3  // store w7---5,6,7
		movq		mm0, mm2			//---0,2,3,4,5,6,7

		movq	mm6, [edi][DATASIZE*5+16]
		punpcklwd	mm4, mm1			//mm1 = w7

		movq	mm1, [edi][DATASIZE*4+16]
		punpckldq	mm0, mm4			// transposed w4

		movq	mm3, [edi][DATASIZE*6+16]
		punpckhdq	mm2, mm4			// transposed w5---0,2,4,6,7

	// transpose the bottom right quadrant(4X4) of the matrix
	//  ---------       ---------
	// | M1 | M2 |     | M1'| M3'|
	//  ---------  -->  ---------
	// | M3 | M4 |     | M2'| M4'|
	//  ---------       ---------

		movq	[edi][DATASIZE*4], mm0  // store w4
		movq		mm4, mm5			//---0,2,3,4,6,7

		movq	[edi][DATASIZE*5], mm2  // store w5
		punpckldq	mm5, mm7			// transposed w6

		movq	mm2, [edi][DATASIZE*7+16]
		punpckhdq	mm4, mm7			// transposed w7---0,3,6,7

		movq		mm7, mm1			// copy w4---0,1,3,5,6
		punpcklwd	mm1, mm6			//mm6 = w5

		movq	[edi][DATASIZE*6], mm5  // store w6---3,5,6,7	
		punpckhwd	mm7, mm6			//---0,1,3,5,6 

		movq		mm5, mm3			//---0,1,2,3,5,6 w6
		punpcklwd	mm3, mm2			//mm1 = w7

		movq	[edi][DATASIZE*7], mm4  // store w7---5,6,7
		punpckhwd	mm5, mm2			//---0,2,3,5,6,7

		movq	mm0, [edi][DATASIZE*0]
		movq		mm4, mm1			//---0,2,3,4,5,6,7

		movq	mm6, [edi][DATASIZE*1]
		punpckldq	mm1, mm3			// transposed w4

		punpckhdq	mm4, mm3			// transposed w5---0,2,4,6,7
		movq		mm3, mm7			//---0,2,3,4,6,7

		movq	[edi][DATASIZE*4+16], mm1  // store w4
		punpckldq	mm7, mm5			// transposed w6

		movq	[edi][DATASIZE*5+16], mm4  // store w5
		punpckhdq	mm3, mm5			// transposed w7---0,3,6,7


	// transpose the top left quadrant(4X4) of the matrix
	//  ---------       ---------
	// | M1 | M2 |     | M1'| M3'|
	//  ---------  -->  ---------
	// | M3 | M4 |     | M2'| M4'|
	//  ---------       ---------

		movq	mm1, [edi][DATASIZE*3]
		movq		mm2, mm0			// copy w0---0,1,3,5,6

		movq	[edi][DATASIZE*7+16], mm3  // store w7---5,6,7
		punpcklwd	mm0, mm6			//mm6 = w1

		movq	mm3, [edi][DATASIZE*2]
		punpckhwd	mm2, mm6			//---0,1,3,5,6 

		movq		mm5, mm3			//---0,1,2,3,5,6 w2
		punpcklwd	mm3, mm1			//mm1 = w3

		movq	[edi][DATASIZE*6+16], mm7  // store w6---3,5,6,7	
		punpckhwd	mm5, mm1			//---0,2,3,5,6,7

		movq		mm1, mm0			//---0,2,3,4,5,6,7
		punpckldq	mm0, mm3			// transposed w4

		movq		mm6, [edi][DATASIZE*4]
		punpckhdq	mm1, mm3			// transposed w5---0,2,4,6,7

 		movq	[edi][DATASIZE*0], mm0  // store w4
		movq		mm3, mm2			//---0,2,3,4,6,7

		paddw	mm0, [edi][DATASIZE*7]	// tmp0
		punpckhdq	mm3, mm5			// transposed w7---0,3,6,7

		movq	[edi][DATASIZE*1], mm1  // store w5
		punpckldq	mm2, mm5			// transposed w6


	//******************************************************************************
	// This begins the column dct
	//******************************************************************************

//	tmp0 = dataptr[0] + dataptr[7];
//	tmp7 = dataptr[0] - dataptr[7];
//	tmp1 = dataptr[1] + dataptr[6];
//	tmp6 = dataptr[1] - dataptr[6];
//	tmp2 = dataptr[2] + dataptr[5];
//	tmp5 = dataptr[2] - dataptr[5];
//	tmp3 = dataptr[3] + dataptr[4];
//	tmp4 = dataptr[3] - dataptr[4];

		movq	[edi][DATASIZE*3], mm3  // store w7---5,6,7
		movq	mm7, mm0

		paddw	mm1, [edi][DATASIZE*6]	// tmp1
		paddw	mm3, mm6	// tmp3

		movq	[edi][DATASIZE*2], mm2  // store w6---3,5,6,7	
		paddw	mm0, mm3				//tmp10

		paddw	mm2, [edi][DATASIZE*5]	// tmp2
		movq	mm6, mm1

//    tmp10 = tmp0 + tmp3;
//    tmp13 = tmp0 - tmp3;
//    tmp11 = tmp1 + tmp2;
//    tmp12 = tmp1 - tmp2;

		psubw	mm7, mm3				//tmp13
		movq	mm3, mm0	

		movq	mm5, [edi][DATASIZE*2]
		paddw	mm1, mm2				//tmp11

		psubw	mm3, mm1	//tmp10 - tmp11
		paddw	mm0, mm1	//tmp10 + tmp11

//    dataptr[0] = tmp10 + tmp11; /* phase 3 */
//    dataptr[4] = tmp10 - tmp11;
//NOTE: We can't write these values out immediately.  Values for tmp4 - tmp7
//haven't been calculated yet!

		movq	mm1, mm3
		punpcklwd mm3, mm3

		psubw	mm6, mm2				//tmp12
		punpckhwd mm1, mm1

		movq	mm2, [edi][DATASIZE*3]
		psrad	mm3, 16
		
	//		tmp4 = dataptr[3] - dataptr[4]//
		psubw	mm2, [edi][DATASIZE*4]	//tmp4
		psrad	mm1, 16

		movq	[edi][DATASIZE*4], mm3
		movq	mm3, mm0

		movq	[edi][DATASIZE*4+8], mm1
		punpcklwd mm0, mm0

		paddw	mm6, mm7	//tmp12 + tmp13
		punpckhwd mm3, mm3

		movq	mm1, [edi][DATASIZE*1]
		psllw	mm6, 1

 		pmulhw	mm6, Const_FIX_0_707106781	// z1
 		psrad	mm3, 16

		psubw	mm5, [edi][DATASIZE*5]	//tmp5
		psrad	mm0, 16

//    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_707106781); /* c4 */
//    dataptr[2] = tmp13 + z1; /* phase 5 */
//    dataptr[6] = tmp13 - z1;
//NOTE: We can't write these values out immediately.  Values for tmp4 - tmp7
//haven't been calculated yet!

		movq	[edi][DATASIZE*0+8], mm3
		movq	mm4, mm7

		movq	mm3, [edi][DATASIZE*0]
		paddw	mm7, mm6	//tmp13 + z1

		movq	[edi][DATASIZE*0], mm0
		psubw	mm4, mm6	//tmp13 - z1

		movq	mm0, mm7
		punpcklwd mm7, mm7

		psubw	mm1, [edi][DATASIZE*6]	//tmp6
		punpckhwd mm0, mm0

//    tmp10 = tmp4 + tmp5;	/* phase 2 */
//    tmp11 = tmp5 + tmp6;
//    tmp12 = tmp6 + tmp7;

		psrad	mm7, 16
		paddw	mm2, mm5	//tmp10

		psrad	mm0, 16
		paddw	mm5, mm1	//tmp11

		movq	mm6, mm4
		punpcklwd mm4, mm4

		movq	[edi][DATASIZE*2], mm7
		punpckhwd mm6, mm6

		psubw	mm3, [edi][DATASIZE*7]	//tmp7
		movq	mm7, mm2

//    z3 = MULTIPLY(tmp11, FIX_0_707106781); /* c4 */
//    z11 = tmp7 + z3;		/* phase 5 */
//    z13 = tmp7 - z3;
		
		movq	[edi][DATASIZE*2+8], mm0
		movq	mm0, mm3

 		psllw	mm5, 1
		paddw	mm1, mm3	//tmp12

		pmulhw	mm5, Const_FIX_0_707106781	//z3
		psrad	mm4, 16

		psubw	mm2, mm1	//tmp10 - tmp12
		psrad	mm6, 16

    /* The rotator is modified from fig 4-8 to avoid extra negations. */
//    z5 = MULTIPLY(tmp10 - tmp12, FIX_0_382683433); /* c6 */
//    z2 = MULTIPLY(tmp10, FIX_0_541196100) + z5; /* c2-c6 */
//    z4 = MULTIPLY(tmp12, FIX_1_306562965) + z5; /* c2+c6 */
		
		pmulhw	mm2, Const_FIX_0_382683433	//z5
		psllw	mm7, 1

		pmulhw	mm7, Const_FIX_0_541196100
		psllw	mm1, 2

		pmulhw	mm1, Const_FIX_1_306562965
		psubw	mm0, mm5	//z13

		movq	[edi][DATASIZE*6+8], mm6
		movq	mm6, mm0

		movq	[edi][DATASIZE*6], mm4
		paddw	mm7, mm2	//z2

//    dataptr[5] = z13 + z2;	/* phase 6 */
//    dataptr[3] = z13 - z2;
//    dataptr[1] = z11 + z4;
//    dataptr[7] = z11 - z4;

		paddw	mm0, mm7	//z13 + z2
		psubw	mm6, mm7	//z13 - z2
		
		movq	mm7, mm6
		punpcklwd mm6, mm6

		punpckhwd mm7, mm7
		paddw	mm3, mm5	//z11

		movq	mm5, mm0
		punpcklwd mm0, mm0

		psrad	mm6, 16
		movq	mm4, mm3

		psrad	mm7, 16
		paddw	mm1, mm2	//z4

		punpckhwd mm5, mm5
		paddw	mm3, mm1	//z11 + z4

		psrad	mm0, 16
		psubw	mm4, mm1	//z11 - z4

		movq	[edi][DATASIZE*3], mm6	//store 
		psrad	mm5, 16

		movq	mm6, [edi][DATASIZE*1+16]
		movq	mm1, mm3

		paddw	mm6, [edi][DATASIZE*6+16]	// tmp1
		punpcklwd mm3, mm3

		movq	[edi][DATASIZE*3+8], mm7
		punpckhwd mm1, mm1

		movq	[edi][DATASIZE*5], mm0	//store 
		psrad	mm3, 16

		movq	[edi][DATASIZE*5+8], mm5
		psrad	mm1, 16

		movq	mm0, [edi][DATASIZE*0+16]
		movq	mm7, mm4

		paddw	mm0, [edi][DATASIZE*7+16]	//tmp0
		punpcklwd mm4, mm4

		movq	[edi][DATASIZE*1], mm3	//store 
		punpckhwd mm7, mm7

		movq	[edi][DATASIZE*1+8], mm1
		psrad	mm4, 16
		
		movq	mm3, [edi][DATASIZE*3+16]
		psrad	mm7, 16

	//******************************************************************************
	// This completes 4x8 dct locations.  Copy to do other 4x8.
	//******************************************************************************
//	tmp0 = dataptr[0] + dataptr[7];
//	tmp7 = dataptr[0] - dataptr[7];
//	tmp1 = dataptr[1] + dataptr[6];
//	tmp6 = dataptr[1] - dataptr[6];
//	tmp2 = dataptr[2] + dataptr[5];
//	tmp5 = dataptr[2] - dataptr[5];
//	tmp3 = dataptr[3] + dataptr[4];
//	tmp4 = dataptr[3] - dataptr[4];

		paddw	mm3, [edi][DATASIZE*4+16]	// tmp3
		movq	mm1, mm6

		movq	[edi][DATASIZE*7+8], mm7
		movq	mm7, mm0

		movq	mm2, [edi][DATASIZE*2+16]
		paddw	mm0, mm3				//tmp10

		paddw	mm2, [edi][DATASIZE*5+16]	// tmp2
		psubw	mm7, mm3				//tmp13

		movq	mm3, mm0	
		paddw	mm1, mm2				//tmp11

//    tmp10 = tmp0 + tmp3;
//    tmp13 = tmp0 - tmp3;
//    tmp11 = tmp1 + tmp2;
//    tmp12 = tmp1 - tmp2;

		paddw	mm0, mm1	//tmp10 + tmp11
		psubw	mm3, mm1	//tmp10 - tmp11

//    dataptr[0] = tmp10 + tmp11; /* phase 3 */
//    dataptr[4] = tmp10 - tmp11;
//    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_707106781); /* c4 */
//NOTE: We can't write these values out immediately.  Values for tmp4 - tmp7
//haven't been calculated yet!

		movq	mm1, mm3
		punpcklwd mm3, mm3

		punpckhwd mm1, mm1
		psubw	mm6, mm2				//tmp12

		movq	[edi][DATASIZE*7], mm4	//store 
		psrad	mm3, 16

		psrad	mm1, 16
		paddw	mm6, mm7	//tmp12 + tmp13

		movq	mm2, [edi][DATASIZE*3+16]
 		psllw	mm6, 1

		movq	mm4, mm0
		punpcklwd mm0, mm0

 		pmulhw	mm6, Const_FIX_0_707106781	// z1
		punpckhwd mm4, mm4

	//		tmp4 = dataptr[3] - dataptr[4]//
		psubw	mm2, [edi][DATASIZE*4+16]	//tmp4
		psrad	mm4, 16

		movq	mm5, [edi][DATASIZE*2+16]
		psrad	mm0, 16

		movq	[edi][DATASIZE*0+24], mm4
		movq	mm4, mm7

//    dataptr[2] = tmp13 + z1; /* phase 5 */
//    dataptr[6] = tmp13 - z1;
//NOTE: We can't write these values out immediately.  Values for tmp4 - tmp7
//haven't been calculated yet!

		psubw	mm5, [edi][DATASIZE*5+16]	//tmp5
		paddw	mm7, mm6	//tmp13 + z1

		movq	[edi][DATASIZE*4+16], mm3
		psubw	mm4, mm6	//tmp13 - z1

		movq	mm3, mm7
		punpcklwd mm7, mm7

		movq	mm6, [edi][DATASIZE*0+16]
		punpckhwd mm3, mm3

		movq	[edi][DATASIZE*4+24], mm1
		psrad	mm7, 16

		movq	[edi][DATASIZE*0+16], mm0
		psrad	mm3, 16

		movq	mm1, [edi][DATASIZE*1+16]
		movq	mm0, mm4

		psubw	mm1, [edi][DATASIZE*6+16]	//tmp6
		punpcklwd mm4, mm4

		movq	[edi][DATASIZE*2+16], mm7
		paddw	mm2, mm5	//tmp10

//    tmp10 = tmp4 + tmp5;	/* phase 2 */
//    tmp11 = tmp5 + tmp6;
//    tmp12 = tmp6 + tmp7;

		movq	mm7, mm2
		paddw	mm5, mm1	//tmp11

		psubw	mm6, [edi][DATASIZE*7+16]	//tmp7
 		punpckhwd mm0, mm0

		movq	[edi][DATASIZE*2+24], mm3
		psllw	mm5, 1

		pmulhw	mm5, Const_FIX_0_707106781	//z3
		psrad	mm0, 16

		psrad	mm4, 16
		paddw	mm1, mm6	//tmp12
		
//    z3 = MULTIPLY(tmp11, FIX_0_707106781); /* c4 */
//    z11 = tmp7 + z3;		/* phase 5 */
//    z13 = tmp7 - z3;
		
		movq	[edi][DATASIZE*6+24], mm0
		psubw	mm2, mm1	//tmp10 - tmp12

    /* The rotator is modified from fig 4-8 to avoid extra negations. */
//    z5 = MULTIPLY(tmp10 - tmp12, FIX_0_382683433); /* c6 */
//    z2 = MULTIPLY(tmp10, FIX_0_541196100) + z5; /* c2-c6 */
//    z4 = MULTIPLY(tmp12, FIX_1_306562965) + z5; /* c2+c6 */
		
		pmulhw	mm2, Const_FIX_0_382683433	//z5
		psllw	mm7, 1

		pmulhw	mm7, Const_FIX_0_541196100
		psllw	mm1, 2

		movq	[edi][DATASIZE*6+16], mm4
		movq	mm0, mm6

		pmulhw	mm1, Const_FIX_1_306562965
		psubw	mm0, mm5	//z13

		paddw	mm7, mm2	//z2
		movq	mm3, mm0

//    dataptr[5] = z13 + z2;	/* phase 6 */
//    dataptr[3] = z13 - z2;
//    dataptr[1] = z11 + z4;
//    dataptr[7] = z11 - z4;

		paddw	mm0, mm7	//z13 + z2
		psubw	mm3, mm7	//z13 - z2
		
		movq	mm7, mm3
		punpcklwd mm3, mm3

		punpckhwd mm7, mm7
		paddw	mm6, mm5	//z11

		psrad	mm3, 16
		paddw	mm1, mm2	//z4

		psrad	mm7, 16
		movq	mm4, mm6

		movq	mm5, mm0
		punpcklwd mm0, mm0

		punpckhwd mm5, mm5
		paddw	mm6, mm1	//z11 + z4

		psrad	mm0, 16
		psubw	mm4, mm1	//z11 - z4

		movq	[edi][DATASIZE*3+16], mm3	//store
		psrad	mm5, 16
		
		movq	mm1, mm6
		punpcklwd mm6, mm6

		movq	[edi][DATASIZE*3+24], mm7
		punpckhwd mm1, mm1

		movq	[edi][DATASIZE*5+16], mm0	//store 
		psrad	mm6, 16

		movq	[edi][DATASIZE*5+24], mm5
		psrad	mm1, 16

		movq	mm7, mm4
		punpcklwd mm4, mm4

		movq	[edi][DATASIZE*1+16], mm6	//store
		punpckhwd mm7, mm7
		
		movq	[edi][DATASIZE*1+24], mm1
		psrad	mm4, 16

		psrad	mm7, 16
		movq	[edi][DATASIZE*7+16], mm4	//store 
		movq	[edi][DATASIZE*7+24], mm7

	//******************************************************************************
	// This completes all 8x8 dct locations for the column case.
	//******************************************************************************

		emms
	}
}

#endif /* X86 */

#endif /* DCT_ISLOW_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\jpegtran.c ===
/*
 * jpegtran.c
 *
 * Copyright (C) 1995-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains a command-line user interface for JPEG transcoding.
 * It is very similar to cjpeg.c, but provides lossless transcoding between
 * different JPEG file formats.
 */

#include "cdjpeg.h"		/* Common decls for cjpeg/djpeg applications */
#include "jversion.h"		/* for version message */

#ifdef USE_CCOMMAND		/* command-line reader for Macintosh */
#ifdef __MWERKS__
#include <SIOUX.h>              /* Metrowerks needs this */
#include <console.h>		/* ... and this */
#endif
#ifdef THINK_C
#include <console.h>		/* Think declares it here */
#endif
#endif


/*
 * Argument-parsing code.
 * The switch parser is designed to be useful with DOS-style command line
 * syntax, ie, intermixed switches and file names, where only the switches
 * to the left of a given file name affect processing of that file.
 * The main program in this file doesn't actually use this capability...
 */


static const char * progname;	/* program name for error messages */
static char * outfilename;	/* for -outfile switch */


LOCAL(void)
usage (void)
/* complain about bad command line */
{
  fprintf(stderr, "usage: %s [switches] ", progname);
#ifdef TWO_FILE_COMMANDLINE
  fprintf(stderr, "inputfile outputfile\n");
#else
  fprintf(stderr, "[inputfile]\n");
#endif

  fprintf(stderr, "Switches (names may be abbreviated):\n");
#ifdef ENTROPY_OPT_SUPPORTED
  fprintf(stderr, "  -optimize      Optimize Huffman table (smaller file, but slow compression)\n");
#endif
#ifdef C_PROGRESSIVE_SUPPORTED
  fprintf(stderr, "  -progressive   Create progressive JPEG file\n");
#endif
  fprintf(stderr, "Switches for advanced users:\n");
  fprintf(stderr, "  -restart N     Set restart interval in rows, or in blocks with B\n");
  fprintf(stderr, "  -maxmemory N   Maximum memory to use (in kbytes)\n");
  fprintf(stderr, "  -outfile name  Specify name for output file\n");
  fprintf(stderr, "  -verbose  or  -debug   Emit debug output\n");
  fprintf(stderr, "Switches for wizards:\n");
#ifdef C_ARITH_CODING_SUPPORTED
  fprintf(stderr, "  -arithmetic    Use arithmetic coding\n");
#endif
#ifdef C_MULTISCAN_FILES_SUPPORTED
  fprintf(stderr, "  -scans file    Create multi-scan JPEG per script file\n");
#endif
  exit(EXIT_FAILURE);
}


LOCAL(int)
parse_switches (j_compress_ptr cinfo, int argc, char **argv,
		int last_file_arg_seen, boolean for_real)
/* Parse optional switches.
 * Returns argv[] index of first file-name argument (== argc if none).
 * Any file names with indexes <= last_file_arg_seen are ignored;
 * they have presumably been processed in a previous iteration.
 * (Pass 0 for last_file_arg_seen on the first or only iteration.)
 * for_real is FALSE on the first (dummy) pass; we may skip any expensive
 * processing.
 */
{
  int argn;
  char * arg;
  boolean simple_progressive;
  char * scansarg = NULL;	/* saves -scans parm if any */

  /* Set up default JPEG parameters. */
  simple_progressive = FALSE;
  outfilename = NULL;
  cinfo->err->trace_level = 0;

  /* Scan command line options, adjust parameters */

  for (argn = 1; argn < argc; argn++) {
    arg = argv[argn];
    if (*arg != '-') {
      /* Not a switch, must be a file name argument */
      if (argn <= last_file_arg_seen) {
	outfilename = NULL;	/* -outfile applies to just one input file */
	continue;		/* ignore this name if previously processed */
      }
      break;			/* else done parsing switches */
    }
    arg++;			/* advance past switch marker character */

    if (keymatch(arg, "arithmetic", 1)) {
      /* Use arithmetic coding. */
#ifdef C_ARITH_CODING_SUPPORTED
      cinfo->arith_code = TRUE;
#else
      fprintf(stderr, "%s: sorry, arithmetic coding not supported\n",
	      progname);
      exit(EXIT_FAILURE);
#endif

    } else if (keymatch(arg, "debug", 1) || keymatch(arg, "verbose", 1)) {
      /* Enable debug printouts. */
      /* On first -d, print version identification */
      static boolean printed_version = FALSE;

      if (! printed_version) {
	fprintf(stderr, "Independent JPEG Group's JPEGTRAN, version %s\n%s\n",
		JVERSION, JCOPYRIGHT);
	printed_version = TRUE;
      }
      cinfo->err->trace_level++;

    } else if (keymatch(arg, "maxmemory", 3)) {
      /* Maximum memory in Kb (or Mb with 'm'). */
      long lval;
      char ch = 'x';

      if (++argn >= argc)	/* advance to next argument */
	usage();
      if (sscanf(argv[argn], "%ld%c", &lval, &ch) < 1)
	usage();
      if (ch == 'm' || ch == 'M')
	lval *= 1000L;
      cinfo->mem->max_memory_to_use = lval * 1000L;

    } else if (keymatch(arg, "optimize", 1) || keymatch(arg, "optimise", 1)) {
      /* Enable entropy parm optimization. */
#ifdef ENTROPY_OPT_SUPPORTED
      cinfo->optimize_coding = TRUE;
#else
      fprintf(stderr, "%s: sorry, entropy optimization was not compiled\n",
	      progname);
      exit(EXIT_FAILURE);
#endif

    } else if (keymatch(arg, "outfile", 4)) {
      /* Set output file name. */
      if (++argn >= argc)	/* advance to next argument */
	usage();
      outfilename = argv[argn];	/* save it away for later use */

    } else if (keymatch(arg, "progressive", 1)) {
      /* Select simple progressive mode. */
#ifdef C_PROGRESSIVE_SUPPORTED
      simple_progressive = TRUE;
      /* We must postpone execution until num_components is known. */
#else
      fprintf(stderr, "%s: sorry, progressive output was not compiled\n",
	      progname);
      exit(EXIT_FAILURE);
#endif

    } else if (keymatch(arg, "restart", 1)) {
      /* Restart interval in MCU rows (or in MCUs with 'b'). */
      long lval;
      char ch = 'x';

      if (++argn >= argc)	/* advance to next argument */
	usage();
      if (sscanf(argv[argn], "%ld%c", &lval, &ch) < 1)
	usage();
      if (lval < 0 || lval > 65535L)
	usage();
      if (ch == 'b' || ch == 'B') {
	cinfo->restart_interval = (unsigned int) lval;
	cinfo->restart_in_rows = 0; /* else prior '-restart n' overrides me */
      } else {
	cinfo->restart_in_rows = (int) lval;
	/* restart_interval will be computed during startup */
      }

    } else if (keymatch(arg, "scans", 2)) {
      /* Set scan script. */
#ifdef C_MULTISCAN_FILES_SUPPORTED
      if (++argn >= argc)	/* advance to next argument */
	usage();
      scansarg = argv[argn];
      /* We must postpone reading the file in case -progressive appears. */
#else
      fprintf(stderr, "%s: sorry, multi-scan output was not compiled\n",
	      progname);
      exit(EXIT_FAILURE);
#endif

    } else {
      usage();			/* bogus switch */
    }
  }

  /* Post-switch-scanning cleanup */

  if (for_real) {

#ifdef C_PROGRESSIVE_SUPPORTED
    if (simple_progressive)	/* process -progressive; -scans can override */
      jpeg_simple_progression(cinfo);
#endif

#ifdef C_MULTISCAN_FILES_SUPPORTED
    if (scansarg != NULL)	/* process -scans if it was present */
      if (! read_scan_script(cinfo, scansarg))
	usage();
#endif
  }

  return argn;			/* return index of next arg (file name) */
}


/*
 * The main program.
 */

int
main (int argc, char **argv)
{
  struct jpeg_decompress_struct srcinfo;
  struct jpeg_compress_struct dstinfo;
  struct jpeg_error_mgr jsrcerr, jdsterr;
#ifdef PROGRESS_REPORT
  struct cdjpeg_progress_mgr progress;
#endif
  jvirt_barray_ptr * coef_arrays;
  int file_index;
  FILE * input_file;
  FILE * output_file;

  /* On Mac, fetch a command line. */
#ifdef USE_CCOMMAND
  argc = ccommand(&argv);
#endif

  progname = argv[0];
  if (progname == NULL || progname[0] == 0)
    progname = "jpegtran";	/* in case C library doesn't provide it */

  /* Initialize the JPEG decompression object with default error handling. */
  srcinfo.err = jpeg_std_error(&jsrcerr);
  jpeg_create_decompress(&srcinfo);
  /* Initialize the JPEG compression object with default error handling. */
  dstinfo.err = jpeg_std_error(&jdsterr);
  jpeg_create_compress(&dstinfo);

  /* Now safe to enable signal catcher.
   * Note: we assume only the decompression object will have virtual arrays.
   */
#ifdef NEED_SIGNAL_CATCHER
  enable_signal_catcher((j_common_ptr) &srcinfo);
#endif

  /* Scan command line to find file names.
   * It is convenient to use just one switch-parsing routine, but the switch
   * values read here are ignored; we will rescan the switches after opening
   * the input file.
   */

  file_index = parse_switches(&dstinfo, argc, argv, 0, FALSE);
  jsrcerr.trace_level = jdsterr.trace_level;
  srcinfo.mem->max_memory_to_use = dstinfo.mem->max_memory_to_use;

#ifdef TWO_FILE_COMMANDLINE
  /* Must have either -outfile switch or explicit output file name */
  if (outfilename == NULL) {
    if (file_index != argc-2) {
      fprintf(stderr, "%s: must name one input and one output file\n",
	      progname);
      usage();
    }
    outfilename = argv[file_index+1];
  } else {
    if (file_index != argc-1) {
      fprintf(stderr, "%s: must name one input and one output file\n",
	      progname);
      usage();
    }
  }
#else
  /* Unix style: expect zero or one file name */
  if (file_index < argc-1) {
    fprintf(stderr, "%s: only one input file\n", progname);
    usage();
  }
#endif /* TWO_FILE_COMMANDLINE */

  /* Open the input file. */
  if (file_index < argc) {
    if ((input_file = fopen(argv[file_index], READ_BINARY)) == NULL) {
      fprintf(stderr, "%s: can't open %s\n", progname, argv[file_index]);
      exit(EXIT_FAILURE);
    }
  } else {
    /* default input file is stdin */
    input_file = read_stdin();
  }

  /* Open the output file. */
  if (outfilename != NULL) {
    if ((output_file = fopen(outfilename, WRITE_BINARY)) == NULL) {
      fprintf(stderr, "%s: can't open %s\n", progname, outfilename);
      exit(EXIT_FAILURE);
    }
  } else {
    /* default output file is stdout */
    output_file = write_stdout();
  }

#ifdef PROGRESS_REPORT
  start_progress_monitor((j_common_ptr) &dstinfo, &progress);
#endif

  /* Specify data source for decompression */
  jpeg_stdio_src(&srcinfo, input_file);

  /* Read file header */
  (void) jpeg_read_header(&srcinfo, TRUE);

  /* Read source file as DCT coefficients */
  coef_arrays = jpeg_read_coefficients(&srcinfo);

  /* Initialize destination compression parameters from source values */
  jpeg_copy_critical_parameters(&srcinfo, &dstinfo);

  /* Adjust default compression parameters by re-parsing the options */
  file_index = parse_switches(&dstinfo, argc, argv, 0, TRUE);

  /* Specify data destination for compression */
  jpeg_stdio_dest(&dstinfo, output_file);

  /* Start compressor */
  jpeg_write_coefficients(&dstinfo, coef_arrays);

  /* ought to copy source comments here... */

  /* Finish compression and release memory */
  jpeg_finish_compress(&dstinfo);
  jpeg_destroy_compress(&dstinfo);
  (void) jpeg_finish_decompress(&srcinfo);
  jpeg_destroy_decompress(&srcinfo);

  /* Close files, if we opened them */
  if (input_file != stdin)
    fclose(input_file);
  if (output_file != stdout)
    fclose(output_file);

#ifdef PROGRESS_REPORT
  end_progress_monitor((j_common_ptr) &dstinfo);
#endif

  /* All done. */
  exit(jsrcerr.num_warnings + jdsterr.num_warnings ?EXIT_WARNING:EXIT_SUCCESS);
  return 0;			/* suppress no-return-value warnings */
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\jquant2.c ===
/*
 * jquant2.c
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains 2-pass color quantization (color mapping) routines.
 * These routines provide selection of a custom color map for an image,
 * followed by mapping of the image to that color map, with optional
 * Floyd-Steinberg dithering.
 * It is also possible to use just the second pass to map to an arbitrary
 * externally-given color map.
 *
 * Note: ordered dithering is not supported, since there isn't any fast
 * way to compute intercolor distances; it's unclear that ordered dither's
 * fundamental assumptions even hold with an irregularly spaced color map.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"

#ifdef QUANT_2PASS_SUPPORTED


/*
 * This module implements the well-known Heckbert paradigm for color
 * quantization.  Most of the ideas used here can be traced back to
 * Heckbert's seminal paper
 *   Heckbert, Paul.  "Color Image Quantization for Frame Buffer Display",
 *   Proc. SIGGRAPH '82, Computer Graphics v.16 #3 (July 1982), pp 297-304.
 *
 * In the first pass over the image, we accumulate a histogram showing the
 * usage count of each possible color.  To keep the histogram to a reasonable
 * size, we reduce the precision of the input; typical practice is to retain
 * 5 or 6 bits per color, so that 8 or 4 different input values are counted
 * in the same histogram cell.
 *
 * Next, the color-selection step begins with a box representing the whole
 * color space, and repeatedly splits the "largest" remaining box until we
 * have as many boxes as desired colors.  Then the mean color in each
 * remaining box becomes one of the possible output colors.
 * 
 * The second pass over the image maps each input pixel to the closest output
 * color (optionally after applying a Floyd-Steinberg dithering correction).
 * This mapping is logically trivial, but making it go fast enough requires
 * considerable care.
 *
 * Heckbert-style quantizers vary a good deal in their policies for choosing
 * the "largest" box and deciding where to cut it.  The particular policies
 * used here have proved out well in experimental comparisons, but better ones
 * may yet be found.
 *
 * In earlier versions of the IJG code, this module quantized in YCbCr color
 * space, processing the raw upsampled data without a color conversion step.
 * This allowed the color conversion math to be done only once per colormap
 * entry, not once per pixel.  However, that optimization precluded other
 * useful optimizations (such as merging color conversion with upsampling)
 * and it also interfered with desired capabilities such as quantizing to an
 * externally-supplied colormap.  We have therefore abandoned that approach.
 * The present code works in the post-conversion color space, typically RGB.
 *
 * To improve the visual quality of the results, we actually work in scaled
 * RGB space, giving G distances more weight than R, and R in turn more than
 * B.  To do everything in integer math, we must use integer scale factors.
 * The 2/3/1 scale factors used here correspond loosely to the relative
 * weights of the colors in the NTSC grayscale equation.
 * If you want to use this code to quantize a non-RGB color space, you'll
 * probably need to change these scale factors.
 */

#define R_SCALE 2		/* scale R distances by this much */
#define G_SCALE 3		/* scale G distances by this much */
#define B_SCALE 1		/* and B by this much */

/* Relabel R/G/B as components 0/1/2, respecting the RGB ordering defined
 * in jmorecfg.h.  As the code stands, it will do the right thing for R,G,B
 * and B,G,R orders.  If you define some other weird order in jmorecfg.h,
 * you'll get compile errors until you extend this logic.  In that case
 * you'll probably want to tweak the histogram sizes too.
 */

#if RGB_RED == 0
#define C0_SCALE R_SCALE
#endif
#if RGB_BLUE == 0
#define C0_SCALE B_SCALE
#endif
#if RGB_GREEN == 1
#define C1_SCALE G_SCALE
#endif
#if RGB_RED == 2
#define C2_SCALE R_SCALE
#endif
#if RGB_BLUE == 2
#define C2_SCALE B_SCALE
#endif


/*
 * First we have the histogram data structure and routines for creating it.
 *
 * The number of bits of precision can be adjusted by changing these symbols.
 * We recommend keeping 6 bits for G and 5 each for R and B.
 * If you have plenty of memory and cycles, 6 bits all around gives marginally
 * better results; if you are short of memory, 5 bits all around will save
 * some space but degrade the results.
 * To maintain a fully accurate histogram, we'd need to allocate a "long"
 * (preferably unsigned long) for each cell.  In practice this is overkill;
 * we can get by with 16 bits per cell.  Few of the cell counts will overflow,
 * and clamping those that do overflow to the maximum value will give close-
 * enough results.  This reduces the recommended histogram size from 256Kb
 * to 128Kb, which is a useful savings on PC-class machines.
 * (In the second pass the histogram space is re-used for pixel mapping data;
 * in that capacity, each cell must be able to store zero to the number of
 * desired colors.  16 bits/cell is plenty for that too.)
 * Since the JPEG code is intended to run in small memory model on 80x86
 * machines, we can't just allocate the histogram in one chunk.  Instead
 * of a true 3-D array, we use a row of pointers to 2-D arrays.  Each
 * pointer corresponds to a C0 value (typically 2^5 = 32 pointers) and
 * each 2-D array has 2^6*2^5 = 2048 or 2^6*2^6 = 4096 entries.  Note that
 * on 80x86 machines, the pointer row is in near memory but the actual
 * arrays are in far memory (same arrangement as we use for image arrays).
 */

#define MAXNUMCOLORS  (MAXJSAMPLE+1) /* maximum size of colormap */

/* These will do the right thing for either R,G,B or B,G,R color order,
 * but you may not like the results for other color orders.
 */
#define HIST_C0_BITS  5		/* bits of precision in R/B histogram */
#define HIST_C1_BITS  6		/* bits of precision in G histogram */
#define HIST_C2_BITS  5		/* bits of precision in B/R histogram */

/* Number of elements along histogram axes. */
#define HIST_C0_ELEMS  (1<<HIST_C0_BITS)
#define HIST_C1_ELEMS  (1<<HIST_C1_BITS)
#define HIST_C2_ELEMS  (1<<HIST_C2_BITS)

/* These are the amounts to shift an input value to get a histogram index. */
#define C0_SHIFT  (BITS_IN_JSAMPLE-HIST_C0_BITS)
#define C1_SHIFT  (BITS_IN_JSAMPLE-HIST_C1_BITS)
#define C2_SHIFT  (BITS_IN_JSAMPLE-HIST_C2_BITS)


typedef UINT16 histcell;	/* histogram cell; prefer an unsigned type */

typedef histcell FAR * histptr;	/* for pointers to histogram cells */

typedef histcell hist1d[HIST_C2_ELEMS]; /* typedefs for the array */
typedef hist1d FAR * hist2d;	/* type for the 2nd-level pointers */
typedef hist2d * hist3d;	/* type for top-level pointer */


/* Declarations for Floyd-Steinberg dithering.
 *
 * Errors are accumulated into the array fserrors[], at a resolution of
 * 1/16th of a pixel count.  The error at a given pixel is propagated
 * to its not-yet-processed neighbors using the standard F-S fractions,
 *		...	(here)	7/16
 *		3/16	5/16	1/16
 * We work left-to-right on even rows, right-to-left on odd rows.
 *
 * We can get away with a single array (holding one row's worth of errors)
 * by using it to store the current row's errors at pixel columns not yet
 * processed, but the next row's errors at columns already processed.  We
 * need only a few extra variables to hold the errors immediately around the
 * current column.  (If we are lucky, those variables are in registers, but
 * even if not, they're probably cheaper to access than array elements are.)
 *
 * The fserrors[] array has (#columns + 2) entries; the extra entry at
 * each end saves us from special-casing the first and last pixels.
 * Each entry is three values long, one value for each color component.
 *
 * Note: on a wide image, we might not have enough room in a PC's near data
 * segment to hold the error array; so it is allocated with alloc_large.
 */

#if BITS_IN_JSAMPLE == 8
typedef INT16 FSERROR;		/* 16 bits should be enough */
typedef int LOCFSERROR;		/* use 'int' for calculation temps */
#else
typedef INT32 FSERROR;		/* may need more than 16 bits */
typedef INT32 LOCFSERROR;	/* be sure calculation temps are big enough */
#endif

typedef FSERROR FAR *FSERRPTR;	/* pointer to error array (in FAR storage!) */


/* Private subobject */

typedef struct {
  struct jpeg_color_quantizer pub; /* public fields */

  /* Space for the eventually created colormap is stashed here */
  JSAMPARRAY sv_colormap;	/* colormap allocated at init time */
  int desired;			/* desired # of colors = size of colormap */

  /* Variables for accumulating image statistics */
  hist3d histogram;		/* pointer to the histogram */

  boolean needs_zeroed;		/* TRUE if next pass must zero histogram */

  /* Variables for Floyd-Steinberg dithering */
  FSERRPTR fserrors;		/* accumulated errors */
  boolean on_odd_row;		/* flag to remember which row we are on */
  int * error_limiter;		/* table for clamping the applied error */
} my_cquantizer;

typedef my_cquantizer * my_cquantize_ptr;


/*
 * Prescan some rows of pixels.
 * In this module the prescan simply updates the histogram, which has been
 * initialized to zeroes by start_pass.
 * An output_buf parameter is required by the method signature, but no data
 * is actually output (in fact the buffer controller is probably passing a
 * NULL pointer).
 */

METHODDEF(void)
prescan_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		  JSAMPARRAY output_buf, int num_rows)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register JSAMPROW ptr;
  register histptr histp;
  register hist3d histogram = cquantize->histogram;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
    ptr = input_buf[row];
    for (col = width; col > 0; col--) {
      /* get pixel value and index into the histogram */
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
      /* increment, check for overflow and undo increment if so. */
      if (++(*histp) <= 0)
	(*histp)--;
      ptr += 3;
    }
  }
}


/*
 * Next we have the really interesting routines: selection of a colormap
 * given the completed histogram.
 * These routines work with a list of "boxes", each representing a rectangular
 * subset of the input color space (to histogram precision).
 */

typedef struct {
  /* The bounds of the box (inclusive); expressed as histogram indexes */
  int c0min, c0max;
  int c1min, c1max;
  int c2min, c2max;
  /* The volume (actually 2-norm) of the box */
  INT32 volume;
  /* The number of nonzero histogram cells within this box */
  long colorcount;
} box;

typedef box * boxptr;


LOCAL(boxptr)
find_biggest_color_pop (boxptr boxlist, int numboxes)
/* Find the splittable box with the largest color population */
/* Returns NULL if no splittable boxes remain */
{
  register boxptr boxp;
  register int i;
  register long maxc = 0;
  boxptr which = NULL;
  
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
    if (boxp->colorcount > maxc && boxp->volume > 0) {
      which = boxp;
      maxc = boxp->colorcount;
    }
  }
  return which;
}


LOCAL(boxptr)
find_biggest_volume (boxptr boxlist, int numboxes)
/* Find the splittable box with the largest (scaled) volume */
/* Returns NULL if no splittable boxes remain */
{
  register boxptr boxp;
  register int i;
  register INT32 maxv = 0;
  boxptr which = NULL;
  
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
    if (boxp->volume > maxv) {
      which = boxp;
      maxv = boxp->volume;
    }
  }
  return which;
}


LOCAL(void)
update_box (j_decompress_ptr cinfo, boxptr boxp)
/* Shrink the min/max bounds of a box to enclose only nonzero elements, */
/* and recompute its volume and population */
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
  histptr histp;
  int c0,c1,c2;
  int c0min,c0max,c1min,c1max,c2min,c2max;
  INT32 dist0,dist1,dist2;
  long ccount;
  
  c0min = boxp->c0min;  c0max = boxp->c0max;
  c1min = boxp->c1min;  c1max = boxp->c1max;
  c2min = boxp->c2min;  c2max = boxp->c2max;
  
  if (c0max > c0min)
    for (c0 = c0min; c0 <= c0max; c0++)
      for (c1 = c1min; c1 <= c1max; c1++) {
	histp = & histogram[c0][c1][c2min];
	for (c2 = c2min; c2 <= c2max; c2++)
	  if (*histp++ != 0) {
	    boxp->c0min = c0min = c0;
	    goto have_c0min;
	  }
      }
 have_c0min:
  if (c0max > c0min)
    for (c0 = c0max; c0 >= c0min; c0--)
      for (c1 = c1min; c1 <= c1max; c1++) {
	histp = & histogram[c0][c1][c2min];
	for (c2 = c2min; c2 <= c2max; c2++)
	  if (*histp++ != 0) {
	    boxp->c0max = c0max = c0;
	    goto have_c0max;
	  }
      }
 have_c0max:
  if (c1max > c1min)
    for (c1 = c1min; c1 <= c1max; c1++)
      for (c0 = c0min; c0 <= c0max; c0++) {
	histp = & histogram[c0][c1][c2min];
	for (c2 = c2min; c2 <= c2max; c2++)
	  if (*histp++ != 0) {
	    boxp->c1min = c1min = c1;
	    goto have_c1min;
	  }
      }
 have_c1min:
  if (c1max > c1min)
    for (c1 = c1max; c1 >= c1min; c1--)
      for (c0 = c0min; c0 <= c0max; c0++) {
	histp = & histogram[c0][c1][c2min];
	for (c2 = c2min; c2 <= c2max; c2++)
	  if (*histp++ != 0) {
	    boxp->c1max = c1max = c1;
	    goto have_c1max;
	  }
      }
 have_c1max:
  if (c2max > c2min)
    for (c2 = c2min; c2 <= c2max; c2++)
      for (c0 = c0min; c0 <= c0max; c0++) {
	histp = & histogram[c0][c1min][c2];
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
	  if (*histp != 0) {
	    boxp->c2min = c2min = c2;
	    goto have_c2min;
	  }
      }
 have_c2min:
  if (c2max > c2min)
    for (c2 = c2max; c2 >= c2min; c2--)
      for (c0 = c0min; c0 <= c0max; c0++) {
	histp = & histogram[c0][c1min][c2];
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
	  if (*histp != 0) {
	    boxp->c2max = c2max = c2;
	    goto have_c2max;
	  }
      }
 have_c2max:

  /* Update box volume.
   * We use 2-norm rather than real volume here; this biases the method
   * against making long narrow boxes, and it has the side benefit that
   * a box is splittable iff norm > 0.
   * Since the differences are expressed in histogram-cell units,
   * we have to shift back to JSAMPLE units to get consistent distances;
   * after which, we scale according to the selected distance scale factors.
   */
  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
  
  /* Now scan remaining volume of box and compute population */
  ccount = 0;
  for (c0 = c0min; c0 <= c0max; c0++)
    for (c1 = c1min; c1 <= c1max; c1++) {
      histp = & histogram[c0][c1][c2min];
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
	if (*histp != 0) {
	  ccount++;
	}
    }
  boxp->colorcount = ccount;
}


LOCAL(int)
median_cut (j_decompress_ptr cinfo, boxptr boxlist, int numboxes,
	    int desired_colors)
/* Repeatedly select and split the largest box until we have enough boxes */
{
  int n,lb;
  int c0,c1,c2,cmax;
  register boxptr b1,b2;

  while (numboxes < desired_colors) {
    /* Select box to split.
     * Current algorithm: by population for first half, then by volume.
     */
    if (numboxes*2 <= desired_colors) {
      b1 = find_biggest_color_pop(boxlist, numboxes);
    } else {
      b1 = find_biggest_volume(boxlist, numboxes);
    }
    if (b1 == NULL)		/* no splittable boxes left! */
      break;
    b2 = &boxlist[numboxes];	/* where new box will go */
    /* Copy the color bounds to the new box. */
    b2->c0max = b1->c0max; b2->c1max = b1->c1max; b2->c2max = b1->c2max;
    b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
    /* Choose which axis to split the box on.
     * Current algorithm: longest scaled axis.
     * See notes in update_box about scaling distances.
     */
    c0 = ((b1->c0max - b1->c0min) << C0_SHIFT) * C0_SCALE;
    c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
    c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
    /* We want to break any ties in favor of green, then red, blue last.
     * This code does the right thing for R,G,B or B,G,R color orders only.
     */
#if RGB_RED == 0
    cmax = c1; n = 1;
    if (c0 > cmax) { cmax = c0; n = 0; }
    if (c2 > cmax) { n = 2; }
#else
    cmax = c1; n = 1;
    if (c2 > cmax) { cmax = c2; n = 2; }
    if (c0 > cmax) { n = 0; }
#endif
    /* Choose split point along selected axis, and update box bounds.
     * Current algorithm: split at halfway point.
     * (Since the box has been shrunk to minimum volume,
     * any split will produce two nonempty subboxes.)
     * Note that lb value is max for lower box, so must be < old max.
     */
    switch (n) {
    case 0:
      lb = (b1->c0max + b1->c0min) / 2;
      b1->c0max = lb;
      b2->c0min = lb+1;
      break;
    case 1:
      lb = (b1->c1max + b1->c1min) / 2;
      b1->c1max = lb;
      b2->c1min = lb+1;
      break;
    case 2:
      lb = (b1->c2max + b1->c2min) / 2;
      b1->c2max = lb;
      b2->c2min = lb+1;
      break;
    }
    /* Update stats for boxes */
    update_box(cinfo, b1);
    update_box(cinfo, b2);
    numboxes++;
  }
  return numboxes;
}


LOCAL(void)
compute_color (j_decompress_ptr cinfo, boxptr boxp, int icolor)
/* Compute representative color for a box, put it in colormap[icolor] */
{
  /* Current algorithm: mean weighted by pixels (not colors) */
  /* Note it is important to get the rounding correct! */
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
  histptr histp;
  int c0,c1,c2;
  int c0min,c0max,c1min,c1max,c2min,c2max;
  long count;
  long total = 0;
  long c0total = 0;
  long c1total = 0;
  long c2total = 0;
  
  c0min = boxp->c0min;  c0max = boxp->c0max;
  c1min = boxp->c1min;  c1max = boxp->c1max;
  c2min = boxp->c2min;  c2max = boxp->c2max;
  
  for (c0 = c0min; c0 <= c0max; c0++)
    for (c1 = c1min; c1 <= c1max; c1++) {
      histp = & histogram[c0][c1][c2min];
      for (c2 = c2min; c2 <= c2max; c2++) {
	if ((count = *histp++) != 0) {
	  total += count;
	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
	  c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
	  c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
	}
      }
    }
  
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
}


LOCAL(void)
select_colors (j_decompress_ptr cinfo, int desired_colors)
/* Master routine for color selection */
{
  boxptr boxlist;
  int numboxes;
  int i;

  /* Allocate workspace for box list */
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
    ((j_common_ptr) cinfo, JPOOL_IMAGE, desired_colors * SIZEOF(box));
  /* Initialize one box containing whole space */
  numboxes = 1;
  boxlist[0].c0min = 0;
  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
  boxlist[0].c1min = 0;
  boxlist[0].c1max = MAXJSAMPLE >> C1_SHIFT;
  boxlist[0].c2min = 0;
  boxlist[0].c2max = MAXJSAMPLE >> C2_SHIFT;
  /* Shrink it to actually-used volume and set its statistics */
  update_box(cinfo, & boxlist[0]);
  /* Perform median-cut to produce final box list */
  numboxes = median_cut(cinfo, boxlist, numboxes, desired_colors);
  /* Compute the representative color for each box, fill colormap */
  for (i = 0; i < numboxes; i++)
    compute_color(cinfo, & boxlist[i], i);
  cinfo->actual_number_of_colors = numboxes;
  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
}


/*
 * These routines are concerned with the time-critical task of mapping input
 * colors to the nearest color in the selected colormap.
 *
 * We re-use the histogram space as an "inverse color map", essentially a
 * cache for the results of nearest-color searches.  All colors within a
 * histogram cell will be mapped to the same colormap entry, namely the one
 * closest to the cell's center.  This may not be quite the closest entry to
 * the actual input color, but it's almost as good.  A zero in the cache
 * indicates we haven't found the nearest color for that cell yet; the array
 * is cleared to zeroes before starting the mapping pass.  When we find the
 * nearest color for a cell, its colormap index plus one is recorded in the
 * cache for future use.  The pass2 scanning routines call fill_inverse_cmap
 * when they need to use an unfilled entry in the cache.
 *
 * Our method of efficiently finding nearest colors is based on the "locally
 * sorted search" idea described by Heckbert and on the incremental distance
 * calculation described by Spencer W. Thomas in chapter III.1 of Graphics
 * Gems II (James Arvo, ed.  Academic Press, 1991).  Thomas points out that
 * the distances from a given colormap entry to each cell of the histogram can
 * be computed quickly using an incremental method: the differences between
 * distances to adjacent cells themselves differ by a constant.  This allows a
 * fairly fast implementation of the "brute force" approach of computing the
 * distance from every colormap entry to every histogram cell.  Unfortunately,
 * it needs a work array to hold the best-distance-so-far for each histogram
 * cell (because the inner loop has to be over cells, not colormap entries).
 * The work array elements have to be INT32s, so the work array would need
 * 256Kb at our recommended precision.  This is not feasible in DOS machines.
 *
 * To get around these problems, we apply Thomas' method to compute the
 * nearest colors for only the cells within a small subbox of the histogram.
 * The work array need be only as big as the subbox, so the memory usage
 * problem is solved.  Furthermore, we need not fill subboxes that are never
 * referenced in pass2; many images use only part of the color gamut, so a
 * fair amount of work is saved.  An additional advantage of this
 * approach is that we can apply Heckbert's locality criterion to quickly
 * eliminate colormap entries that are far away from the subbox; typically
 * three-fourths of the colormap entries are rejected by Heckbert's criterion,
 * and we need not compute their distances to individual cells in the subbox.
 * The speed of this approach is heavily influenced by the subbox size: too
 * small means too much overhead, too big loses because Heckbert's criterion
 * can't eliminate as many colormap entries.  Empirically the best subbox
 * size seems to be about 1/512th of the histogram (1/8th in each direction).
 *
 * Thomas' article also describes a refined method which is asymptotically
 * faster than the brute-force method, but it is also far more complex and
 * cannot efficiently be applied to small subboxes.  It is therefore not
 * useful for programs intended to be portable to DOS machines.  On machines
 * with plenty of memory, filling the whole histogram in one shot with Thomas'
 * refined method might be faster than the present code --- but then again,
 * it might not be any faster, and it's certainly more complicated.
 */


/* log2(histogram cells in update box) for each axis; this can be adjusted */
#define BOX_C0_LOG  (HIST_C0_BITS-3)
#define BOX_C1_LOG  (HIST_C1_BITS-3)
#define BOX_C2_LOG  (HIST_C2_BITS-3)

#define BOX_C0_ELEMS  (1<<BOX_C0_LOG) /* # of hist cells in update box */
#define BOX_C1_ELEMS  (1<<BOX_C1_LOG)
#define BOX_C2_ELEMS  (1<<BOX_C2_LOG)

#define BOX_C0_SHIFT  (C0_SHIFT + BOX_C0_LOG)
#define BOX_C1_SHIFT  (C1_SHIFT + BOX_C1_LOG)
#define BOX_C2_SHIFT  (C2_SHIFT + BOX_C2_LOG)


/*
 * The next three routines implement inverse colormap filling.  They could
 * all be folded into one big routine, but splitting them up this way saves
 * some stack space (the mindist[] and bestdist[] arrays need not coexist)
 * and may allow some compilers to produce better code by registerizing more
 * inner-loop variables.
 */

LOCAL(int)
find_nearby_colors (j_decompress_ptr cinfo, int minc0, int minc1, int minc2,
		    JSAMPLE colorlist[])
/* Locate the colormap entries close enough to an update box to be candidates
 * for the nearest entry to some cell(s) in the update box.  The update box
 * is specified by the center coordinates of its first cell.  The number of
 * candidate colormap entries is returned, and their colormap indexes are
 * placed in colorlist[].
 * This routine uses Heckbert's "locally sorted search" criterion to select
 * the colors that need further consideration.
 */
{
  int numcolors = cinfo->actual_number_of_colors;
  int maxc0, maxc1, maxc2;
  int centerc0, centerc1, centerc2;
  int i, x, ncolors;
  INT32 minmaxdist, min_dist, max_dist, tdist;
  INT32 mindist[MAXNUMCOLORS];	/* min distance to colormap entry i */

  /* Compute true coordinates of update box's upper corner and center.
   * Actually we compute the coordinates of the center of the upper-corner
   * histogram cell, which are the upper bounds of the volume we care about.
   * Note that since ">>" rounds down, the "center" values may be closer to
   * min than to max; hence comparisons to them must be "<=", not "<".
   */
  maxc0 = minc0 + ((1 << BOX_C0_SHIFT) - (1 << C0_SHIFT));
  centerc0 = (minc0 + maxc0) >> 1;
  maxc1 = minc1 + ((1 << BOX_C1_SHIFT) - (1 << C1_SHIFT));
  centerc1 = (minc1 + maxc1) >> 1;
  maxc2 = minc2 + ((1 << BOX_C2_SHIFT) - (1 << C2_SHIFT));
  centerc2 = (minc2 + maxc2) >> 1;

  /* For each color in colormap, find:
   *  1. its minimum squared-distance to any point in the update box
   *     (zero if color is within update box);
   *  2. its maximum squared-distance to any point in the update box.
   * Both of these can be found by considering only the corners of the box.
   * We save the minimum distance for each color in mindist[];
   * only the smallest maximum distance is of interest.
   */
  minmaxdist = 0x7FFFFFFFL;

  for (i = 0; i < numcolors; i++) {
    /* We compute the squared-c0-distance term, then add in the other two. */
    x = GETJSAMPLE(cinfo->colormap[0][i]);
    if (x < minc0) {
      tdist = (x - minc0) * C0_SCALE;
      min_dist = tdist*tdist;
      tdist = (x - maxc0) * C0_SCALE;
      max_dist = tdist*tdist;
    } else if (x > maxc0) {
      tdist = (x - maxc0) * C0_SCALE;
      min_dist = tdist*tdist;
      tdist = (x - minc0) * C0_SCALE;
      max_dist = tdist*tdist;
    } else {
      /* within cell range so no contribution to min_dist */
      min_dist = 0;
      if (x <= centerc0) {
	tdist = (x - maxc0) * C0_SCALE;
	max_dist = tdist*tdist;
      } else {
	tdist = (x - minc0) * C0_SCALE;
	max_dist = tdist*tdist;
      }
    }

    x = GETJSAMPLE(cinfo->colormap[1][i]);
    if (x < minc1) {
      tdist = (x - minc1) * C1_SCALE;
      min_dist += tdist*tdist;
      tdist = (x - maxc1) * C1_SCALE;
      max_dist += tdist*tdist;
    } else if (x > maxc1) {
      tdist = (x - maxc1) * C1_SCALE;
      min_dist += tdist*tdist;
      tdist = (x - minc1) * C1_SCALE;
      max_dist += tdist*tdist;
    } else {
      /* within cell range so no contribution to min_dist */
      if (x <= centerc1) {
	tdist = (x - maxc1) * C1_SCALE;
	max_dist += tdist*tdist;
      } else {
	tdist = (x - minc1) * C1_SCALE;
	max_dist += tdist*tdist;
      }
    }

    x = GETJSAMPLE(cinfo->colormap[2][i]);
    if (x < minc2) {
      tdist = (x - minc2) * C2_SCALE;
      min_dist += tdist*tdist;
      tdist = (x - maxc2) * C2_SCALE;
      max_dist += tdist*tdist;
    } else if (x > maxc2) {
      tdist = (x - maxc2) * C2_SCALE;
      min_dist += tdist*tdist;
      tdist = (x - minc2) * C2_SCALE;
      max_dist += tdist*tdist;
    } else {
      /* within cell range so no contribution to min_dist */
      if (x <= centerc2) {
	tdist = (x - maxc2) * C2_SCALE;
	max_dist += tdist*tdist;
      } else {
	tdist = (x - minc2) * C2_SCALE;
	max_dist += tdist*tdist;
      }
    }

    mindist[i] = min_dist;	/* save away the results */
    if (max_dist < minmaxdist)
      minmaxdist = max_dist;
  }

  /* Now we know that no cell in the update box is more than minmaxdist
   * away from some colormap entry.  Therefore, only colors that are
   * within minmaxdist of some part of the box need be considered.
   */
  ncolors = 0;
  for (i = 0; i < numcolors; i++) {
    if (mindist[i] <= minmaxdist)
      colorlist[ncolors++] = (JSAMPLE) i;
  }
  return ncolors;
}


LOCAL(void)
find_best_colors (j_decompress_ptr cinfo, int minc0, int minc1, int minc2,
		  int numcolors, JSAMPLE colorlist[], JSAMPLE bestcolor[])
/* Find the closest colormap entry for each cell in the update box,
 * given the list of candidate colors prepared by find_nearby_colors.
 * Return the indexes of the closest entries in the bestcolor[] array.
 * This routine uses Thomas' incremental distance calculation method to
 * find the distance from a colormap entry to successive cells in the box.
 */
{
  int ic0, ic1, ic2;
  int i, icolor;
  register INT32 * bptr;	/* pointer into bestdist[] array */
  JSAMPLE * cptr;		/* pointer into bestcolor[] array */
  INT32 dist0, dist1;		/* initial distance values */
  register INT32 dist2;		/* current distance in inner loop */
  INT32 xx0, xx1;		/* distance increments */
  register INT32 xx2;
  INT32 inc0, inc1, inc2;	/* initial values for increments */
  /* This array holds the distance to the nearest-so-far color for each cell */
  INT32 bestdist[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];

  /* Initialize best-distance for each cell of the update box */
  bptr = bestdist;
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
    *bptr++ = 0x7FFFFFFFL;
  
  /* For each color selected by find_nearby_colors,
   * compute its distance to the center of each cell in the box.
   * If that's less than best-so-far, update best distance and color number.
   */
  
  /* Nominal steps between cell centers ("x" in Thomas article) */
#define STEP_C0  ((1 << C0_SHIFT) * C0_SCALE)
#define STEP_C1  ((1 << C1_SHIFT) * C1_SCALE)
#define STEP_C2  ((1 << C2_SHIFT) * C2_SCALE)
  
  for (i = 0; i < numcolors; i++) {
    icolor = GETJSAMPLE(colorlist[i]);
    /* Compute (square of) distance from minc0/c1/c2 to this color */
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
    dist0 = inc0*inc0;
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
    dist0 += inc1*inc1;
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
    dist0 += inc2*inc2;
    /* Form the initial difference increments */
    inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
    /* Now loop over all cells in box, updating distance per Thomas method */
    bptr = bestdist;
    cptr = bestcolor;
    xx0 = inc0;
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
      dist1 = dist0;
      xx1 = inc1;
      for (ic1 = BOX_C1_ELEMS-1; ic1 >= 0; ic1--) {
	dist2 = dist1;
	xx2 = inc2;
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
	  if (dist2 < *bptr) {
	    *bptr = dist2;
	    *cptr = (JSAMPLE) icolor;
	  }
	  dist2 += xx2;
	  xx2 += 2 * STEP_C2 * STEP_C2;
	  bptr++;
	  cptr++;
	}
	dist1 += xx1;
	xx1 += 2 * STEP_C1 * STEP_C1;
      }
      dist0 += xx0;
      xx0 += 2 * STEP_C0 * STEP_C0;
    }
  }
}


LOCAL(void)
fill_inverse_cmap (j_decompress_ptr cinfo, int c0, int c1, int c2)
/* Fill the inverse-colormap entries in the update box that contains */
/* histogram cell c0/c1/c2.  (Only that one cell MUST be filled, but */
/* we can fill as many others as we wish.) */
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
  int minc0, minc1, minc2;	/* lower left corner of update box */
  int ic0, ic1, ic2;
  register JSAMPLE * cptr;	/* pointer into bestcolor[] array */
  register histptr cachep;	/* pointer into main cache array */
  /* This array lists the candidate colormap indexes. */
  JSAMPLE colorlist[MAXNUMCOLORS];
  int numcolors;		/* number of candidate colors */
  /* This array holds the actually closest colormap index for each cell. */
  JSAMPLE bestcolor[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];

  /* Convert cell coordinates to update box ID */
  c0 >>= BOX_C0_LOG;
  c1 >>= BOX_C1_LOG;
  c2 >>= BOX_C2_LOG;

  /* Compute true coordinates of update box's origin corner.
   * Actually we compute the coordinates of the center of the corner
   * histogram cell, which are the lower bounds of the volume we care about.
   */
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
  minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
  minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
  
  /* Determine which colormap entries are close enough to be candidates
   * for the nearest entry to some cell in the update box.
   */
  numcolors = find_nearby_colors(cinfo, minc0, minc1, minc2, colorlist);

  /* Determine the actually nearest colors. */
  find_best_colors(cinfo, minc0, minc1, minc2, numcolors, colorlist,
		   bestcolor);

  /* Save the best color numbers (plus 1) in the main cache array */
  c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
  c1 <<= BOX_C1_LOG;
  c2 <<= BOX_C2_LOG;
  cptr = bestcolor;
  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
      cachep = & histogram[c0+ic0][c1+ic1][c2];
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
      }
    }
  }
}


/*
 * Map some rows of pixels to the output colormapped representation.
 */

METHODDEF(void)
pass2_no_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs no dithering */
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
  register JSAMPROW inptr, outptr;
  register histptr cachep;
  register int c0, c1, c2;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
    inptr = input_buf[row];
    outptr = output_buf[row];
    for (col = width; col > 0; col--) {
      /* get pixel value and index into the cache */
      c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
      c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
      cachep = & histogram[c0][c1][c2];
      /* If we have not seen this color before, find nearest colormap entry */
      /* and update the cache */
      if (*cachep == 0)
	fill_inverse_cmap(cinfo, c0,c1,c2);
      /* Now emit the colormap index for this cell */
      *outptr++ = (JSAMPLE) (*cachep - 1);
    }
  }
}


METHODDEF(void)
pass2_fs_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs Floyd-Steinberg dithering */
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
  register LOCFSERROR cur0, cur1, cur2;	/* current error or pixel value */
  LOCFSERROR belowerr0, belowerr1, belowerr2; /* error for pixel below cur */
  LOCFSERROR bpreverr0, bpreverr1, bpreverr2; /* error for below/prev col */
  register FSERRPTR errorptr;	/* => fserrors[] at column before current */
  JSAMPROW inptr;		/* => current input pixel */
  JSAMPROW outptr;		/* => current output pixel */
  histptr cachep;
  int dir;			/* +1 or -1 depending on direction */
  int dir3;			/* 3*dir, for advancing inptr & errorptr */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
  JSAMPLE *range_limit = cinfo->sample_range_limit;
  int *error_limit = cquantize->error_limiter;
  JSAMPROW colormap0 = cinfo->colormap[0];
  JSAMPROW colormap1 = cinfo->colormap[1];
  JSAMPROW colormap2 = cinfo->colormap[2];
  SHIFT_TEMPS

  for (row = 0; row < num_rows; row++) {
    inptr = input_buf[row];
    outptr = output_buf[row];
    if (cquantize->on_odd_row) {
      /* work right to left in this row */
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
      outptr += width-1;
      dir = -1;
      dir3 = -3;
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
      cquantize->on_odd_row = FALSE; /* flip for next time */
    } else {
      /* work left to right in this row */
      dir = 1;
      dir3 = 3;
      errorptr = cquantize->fserrors; /* => entry before first real column */
      cquantize->on_odd_row = TRUE; /* flip for next time */
    }
    /* Preset error values: no error propagated to first pixel from left */
    cur0 = cur1 = cur2 = 0;
    /* and no error propagated to row below yet */
    belowerr0 = belowerr1 = belowerr2 = 0;
    bpreverr0 = bpreverr1 = bpreverr2 = 0;

    for (col = width; col > 0; col--) {
      /* curN holds the error propagated from the previous pixel on the
       * current line.  Add the error propagated from the previous line
       * to form the complete error correction term for this pixel, and
       * round the error term (which is expressed * 16) to an integer.
       * RIGHT_SHIFT rounds towards minus infinity, so adding 8 is correct
       * for either sign of the error value.
       * Note: errorptr points to *previous* column's array entry.
       */
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
      /* Limit the error using transfer function set by init_error_limit.
       * See comments with init_error_limit for rationale.
       */
      cur0 = error_limit[cur0];
      cur1 = error_limit[cur1];
      cur2 = error_limit[cur2];
      /* Form pixel value + error, and range-limit to 0..MAXJSAMPLE.
       * The maximum error is +- MAXJSAMPLE (or less with error limiting);
       * this sets the required size of the range_limit array.
       */
      cur0 += GETJSAMPLE(inptr[0]);
      cur1 += GETJSAMPLE(inptr[1]);
      cur2 += GETJSAMPLE(inptr[2]);
      cur0 = GETJSAMPLE(range_limit[cur0]);
      cur1 = GETJSAMPLE(range_limit[cur1]);
      cur2 = GETJSAMPLE(range_limit[cur2]);
      /* Index into the cache with adjusted pixel value */
      cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
      /* If we have not seen this color before, find nearest colormap */
      /* entry and update the cache */
      if (*cachep == 0)
	fill_inverse_cmap(cinfo, cur0>>C0_SHIFT,cur1>>C1_SHIFT,cur2>>C2_SHIFT);
      /* Now emit the colormap index for this cell */
      { register int pixcode = *cachep - 1;
	*outptr = (JSAMPLE) pixcode;
	/* Compute representation error for this pixel */
	cur0 -= GETJSAMPLE(colormap0[pixcode]);
	cur1 -= GETJSAMPLE(colormap1[pixcode]);
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
      }
      /* Compute error fractions to be propagated to adjacent pixels.
       * Add these into the running sums, and simultaneously shift the
       * next-line error sums left by 1 column.
       */
      { register LOCFSERROR bnexterr, delta;

	bnexterr = cur0;	/* Process component 0 */
	delta = cur0 * 2;
	cur0 += delta;		/* form error * 3 */
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
	cur0 += delta;		/* form error * 5 */
	bpreverr0 = belowerr0 + cur0;
	belowerr0 = bnexterr;
	cur0 += delta;		/* form error * 7 */
	bnexterr = cur1;	/* Process component 1 */
	delta = cur1 * 2;
	cur1 += delta;		/* form error * 3 */
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
	cur1 += delta;		/* form error * 5 */
	bpreverr1 = belowerr1 + cur1;
	belowerr1 = bnexterr;
	cur1 += delta;		/* form error * 7 */
	bnexterr = cur2;	/* Process component 2 */
	delta = cur2 * 2;
	cur2 += delta;		/* form error * 3 */
	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
	cur2 += delta;		/* form error * 5 */
	bpreverr2 = belowerr2 + cur2;
	belowerr2 = bnexterr;
	cur2 += delta;		/* form error * 7 */
      }
      /* At this point curN contains the 7/16 error value to be propagated
       * to the next pixel on the current line, and all the errors for the
       * next line have been shifted over.  We are therefore ready to move on.
       */
      inptr += dir3;		/* Advance pixel pointers to next column */
      outptr += dir;
      errorptr += dir3;		/* advance errorptr to current column */
    }
    /* Post-loop cleanup: we must unload the final error values into the
     * final fserrors[] entry.  Note we need not unload belowerrN because
     * it is for the dummy column before or after the actual array.
     */
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
    errorptr[1] = (FSERROR) bpreverr1;
    errorptr[2] = (FSERROR) bpreverr2;
  }
}


/*
 * Initialize the error-limiting transfer function (lookup table).
 * The raw F-S error computation can potentially compute error values of up to
 * +- MAXJSAMPLE.  But we want the maximum correction applied to a pixel to be
 * much less, otherwise obviously wrong pixels will be created.  (Typical
 * effects include weird fringes at color-area boundaries, isolated bright
 * pixels in a dark area, etc.)  The standard advice for avoiding this problem
 * is to ensure that the "corners" of the color cube are allocated as output
 * colors; then repeated errors in the same direction cannot cause cascading
 * error buildup.  However, that only prevents the error from getting
 * completely out of hand; Aaron Giles reports that error limiting improves
 * the results even with corner colors allocated.
 * A simple clamping of the error values to about +- MAXJSAMPLE/8 works pretty
 * well, but the smoother transfer function used below is even better.  Thanks
 * to Aaron Giles for this idea.
 */

LOCAL(void)
init_error_limit (j_decompress_ptr cinfo)
/* Allocate and fill in the error_limiter table */
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  int * table;
  int in, out;

  table = (int *) (*cinfo->mem->alloc_small)
    ((j_common_ptr) cinfo, JPOOL_IMAGE, (MAXJSAMPLE*2+1) * SIZEOF(int));
  table += MAXJSAMPLE;		/* so can index -MAXJSAMPLE .. +MAXJSAMPLE */
  cquantize->error_limiter = table;

#define STEPSIZE ((MAXJSAMPLE+1)/16)
  /* Map errors 1:1 up to +- MAXJSAMPLE/16 */
  out = 0;
  for (in = 0; in < STEPSIZE; in++, out++) {
    table[in] = out; table[-in] = -out;
  }
  /* Map errors 1:2 up to +- 3*MAXJSAMPLE/16 */
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
    table[in] = out; table[-in] = -out;
  }
  /* Clamp the rest to final out value (which is (MAXJSAMPLE+1)/8) */
  for (; in <= MAXJSAMPLE; in++) {
    table[in] = out; table[-in] = -out;
  }
#undef STEPSIZE
}


/*
 * Finish up at the end of each pass.
 */

METHODDEF(void)
finish_pass1 (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;

  /* Select the representative colors and fill in cinfo->colormap */
  cinfo->colormap = cquantize->sv_colormap;
  select_colors(cinfo, cquantize->desired);
  /* Force next pass to zero the color index table */
  cquantize->needs_zeroed = TRUE;
}


METHODDEF(void)
finish_pass2 (j_decompress_ptr cinfo)
{
  /* no work */
}


/*
 * Initialize for each processing pass.
 */

METHODDEF(void)
start_pass_2_quant (j_decompress_ptr cinfo, boolean is_pre_scan)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
  int i;

  /* Only F-S dithering or no dithering is supported. */
  /* If user asks for ordered dither, give him F-S. */
  if (cinfo->dither_mode != JDITHER_NONE)
    cinfo->dither_mode = JDITHER_FS;

  if (is_pre_scan) {
    /* Set up method pointers */
    cquantize->pub.color_quantize = prescan_quantize;
    cquantize->pub.finish_pass = finish_pass1;
    cquantize->needs_zeroed = TRUE; /* Always zero histogram */
  } else {
    /* Set up method pointers */
    if (cinfo->dither_mode == JDITHER_FS)
      cquantize->pub.color_quantize = pass2_fs_dither;
    else
      cquantize->pub.color_quantize = pass2_no_dither;
    cquantize->pub.finish_pass = finish_pass2;

    /* Make sure color count is acceptable */
    i = cinfo->actual_number_of_colors;
    if (i < 1)
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 1);
    if (i > MAXNUMCOLORS)
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);

    if (cinfo->dither_mode == JDITHER_FS) {
      size_t arraysize = (size_t) ((cinfo->output_width + 2) *
				   (3 * SIZEOF(FSERROR)));
      /* Allocate Floyd-Steinberg workspace if we didn't already. */
      if (cquantize->fserrors == NULL)
	cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
	  ((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
      /* Initialize the propagated errors to zero. */
      jzero_far((void FAR *) cquantize->fserrors, arraysize);
      /* Make the error-limit table if we didn't already. */
      if (cquantize->error_limiter == NULL)
	init_error_limit(cinfo);
      cquantize->on_odd_row = FALSE;
    }

  }
  /* Zero the histogram or inverse color map, if necessary */
  if (cquantize->needs_zeroed) {
    for (i = 0; i < HIST_C0_ELEMS; i++) {
      jzero_far((void FAR *) histogram[i],
		HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
    }
    cquantize->needs_zeroed = FALSE;
  }
}


/*
 * Switch to a new external colormap between output passes.
 */

METHODDEF(void)
new_color_map_2_quant (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;

  /* Reset the inverse color map */
  cquantize->needs_zeroed = TRUE;
}


/*
 * Module initialization routine for 2-pass color quantization.
 */

GLOBAL(void)
jinit_2pass_quantizer (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize;
  int i;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_2_quant;
  cquantize->pub.new_color_map = new_color_map_2_quant;
  cquantize->fserrors = NULL;	/* flag optional arrays not allocated */
  cquantize->error_limiter = NULL;

  /* Make sure jdmaster didn't give me a case I can't handle */
  if (cinfo->out_color_components != 3)
    ERREXIT(cinfo, JERR_NOTIMPL);

  /* Allocate the histogram/inverse colormap storage */
  cquantize->histogram = (hist3d) (*cinfo->mem->alloc_small)
    ((j_common_ptr) cinfo, JPOOL_IMAGE, HIST_C0_ELEMS * SIZEOF(hist2d));
  for (i = 0; i < HIST_C0_ELEMS; i++) {
    cquantize->histogram[i] = (hist2d) (*cinfo->mem->alloc_large)
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
  }
  cquantize->needs_zeroed = TRUE; /* histogram is garbage now */

  /* Allocate storage for the completed colormap, if required.
   * We do this now since it is FAR storage and may affect
   * the memory manager's space calculations.
   */
  if (cinfo->enable_2pass_quant) {
    /* Make sure color count is acceptable */
    int desired = cinfo->desired_number_of_colors;
    /* Lower bound on # of colors ... somewhat arbitrary as long as > 0 */
    if (desired < 8)
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 8);
    /* Make sure colormap indexes can be represented by JSAMPLEs */
    if (desired > MAXNUMCOLORS)
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
    cquantize->sv_colormap = (*cinfo->mem->alloc_sarray)
      ((j_common_ptr) cinfo,JPOOL_IMAGE, (JDIMENSION) desired, (JDIMENSION) 3);
    cquantize->desired = desired;
  } else
    cquantize->sv_colormap = NULL;

  /* Only F-S dithering or no dithering is supported. */
  /* If user asks for ordered dither, give him F-S. */
  if (cinfo->dither_mode != JDITHER_NONE)
    cinfo->dither_mode = JDITHER_FS;

  /* Allocate Floyd-Steinberg workspace if necessary.
   * This isn't really needed until pass 2, but again it is FAR storage.
   * Although we will cope with a later change in dither_mode,
   * we do not promise to honor max_memory_to_use if dither_mode changes.
   */
  if (cinfo->dither_mode == JDITHER_FS) {
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       (size_t) ((cinfo->output_width + 2) * (3 * SIZEOF(FSERROR))));
    /* Might as well create the error-limiting table too. */
    init_error_limit(cinfo);
  }
}

#endif /* QUANT_2PASS_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\jutils.c ===
/*
 * jutils.c
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains tables and miscellaneous utility routines needed
 * for both compression and decompression.
 * Note we prefix all global names with "j" to minimize conflicts with
 * a surrounding application.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"

/*  boolean vfMMXMachine = 2; */

int IsMMX();

/*
 * jpeg_zigzag_order[i] is the zigzag-order position of the i'th element
 * of a DCT block read in natural order (left to right, top to bottom).
 */

const int jpeg_zigzag_order[DCTSIZE2] = {
   0,  1,  5,  6, 14, 15, 27, 28,
   2,  4,  7, 13, 16, 26, 29, 42,
   3,  8, 12, 17, 25, 30, 41, 43,
   9, 11, 18, 24, 31, 40, 44, 53,
  10, 19, 23, 32, 39, 45, 52, 54,
  20, 22, 33, 38, 46, 51, 55, 60,
  21, 34, 37, 47, 50, 56, 59, 61,
  35, 36, 48, 49, 57, 58, 62, 63
};

/*
 * jpeg_natural_order[i] is the natural-order position of the i'th element
 * of zigzag order.
 *
 * When reading corrupted data, the Huffman decoders could attempt
 * to reference an entry beyond the end of this array (if the decoded
 * zero run length reaches past the end of the block).  To prevent
 * wild stores without adding an inner-loop test, we put some extra
 * "63"s after the real entries.  This will cause the extra coefficient
 * to be stored in location 63 of the block, not somewhere random.
 * The worst case would be a run-length of 15, which means we need 16
 * fake entries.
 */

const int jpeg_natural_order[DCTSIZE2+16] = {
  0,  1,  8, 16,  9,  2,  3, 10,
 17, 24, 32, 25, 18, 11,  4,  5,
 12, 19, 26, 33, 40, 48, 41, 34,
 27, 20, 13,  6,  7, 14, 21, 28,
 35, 42, 49, 56, 57, 50, 43, 36,
 29, 22, 15, 23, 30, 37, 44, 51,
 58, 59, 52, 45, 38, 31, 39, 46,
 53, 60, 61, 54, 47, 55, 62, 63,
 63, 63, 63, 63, 63, 63, 63, 63, /* extra entries for safety in decoder */
 63, 63, 63, 63, 63, 63, 63, 63
};


/*
 * Arithmetic utilities
 */

GLOBAL(long)
jdiv_round_up (long a, long b)
/* Compute a/b rounded up to next integer, ie, ceil(a/b) */
/* Assumes a >= 0, b > 0 */
{
  return (a + b - 1L) / b;
}


GLOBAL(long)
jround_up (long a, long b)
/* Compute a rounded up to next multiple of b, ie, ceil(a/b)*b */
/* Assumes a >= 0, b > 0 */
{
  a += b - 1L;
  return a - (a % b);
}


/* On normal machines we can apply MEMCOPY() and MEMZERO() to sample arrays
 * and coefficient-block arrays.  This won't work on 80x86 because the arrays
 * are FAR and we're assuming a small-pointer memory model.  However, some
 * DOS compilers provide far-pointer versions of memcpy() and memset() even
 * in the small-model libraries.  These will be used if USE_FMEM is defined.
 * Otherwise, the routines below do it the hard way.  (The performance cost
 * is not all that great, because these routines aren't very heavily used.)
 */

#ifndef NEED_FAR_POINTERS	/* normal case, same as regular macros */
#define FMEMCOPY(dest,src,size)	MEMCOPY(dest,src,size)
#define FMEMZERO(target,size)	MEMZERO(target,size)
#else				/* 80x86 case, define if we can */
#ifdef USE_FMEM
#define FMEMCOPY(dest,src,size)	_fmemcpy((void FAR *)(dest), (const void FAR *)(src), (size_t)(size))
#define FMEMZERO(target,size)	_fmemset((void FAR *)(target), 0, (size_t)(size))
#endif
#endif


GLOBAL(void)
jcopy_sample_rows (JSAMPARRAY input_array, int source_row,
		   JSAMPARRAY output_array, int dest_row,
		   int num_rows, JDIMENSION num_cols)
/* Copy some rows of samples from one place to another.
 * num_rows rows are copied from input_array[source_row++]
 * to output_array[dest_row++]; these areas may overlap for duplication.
 * The source and destination arrays must be at least as wide as num_cols.
 */
{
  register JSAMPROW inptr, outptr;
#ifdef FMEMCOPY
  register size_t count = (size_t) (num_cols * SIZEOF(JSAMPLE));
#else
  register JDIMENSION count;
#endif
  register int row;

  input_array += source_row;
  output_array += dest_row;

  for (row = num_rows; row > 0; row--) {
    inptr = *input_array++;
    outptr = *output_array++;
#ifdef FMEMCOPY
    FMEMCOPY(outptr, inptr, count);
#else
    for (count = num_cols; count > 0; count--)
      *outptr++ = *inptr++;	/* needn't bother with GETJSAMPLE() here */
#endif
  }
}


GLOBAL(void)
jcopy_block_row (JBLOCKROW input_row, JBLOCKROW output_row,
		 JDIMENSION num_blocks)
/* Copy a row of coefficient blocks from one place to another. */
{
#ifdef FMEMCOPY
  FMEMCOPY(output_row, input_row, num_blocks * (DCTSIZE2 * SIZEOF(JCOEF)));
#else
  register JCOEFPTR inptr, outptr;
  register long count;

  inptr = (JCOEFPTR) input_row;
  outptr = (JCOEFPTR) output_row;
  for (count = (long) num_blocks * DCTSIZE2; count > 0; count--) {
    *outptr++ = *inptr++;
  }
#endif
}


GLOBAL(void)
jzero_far (void FAR * target, size_t bytestozero)
/* Zero out a chunk of FAR memory. */
/* This might be sample-array data, block-array data, or alloc_large data. */
{
#ifdef FMEMZERO
  FMEMZERO(target, bytestozero);
#else
  register char FAR * ptr = (char FAR *) target;
  register size_t count;

  for (count = bytestozero; count > 0; count--) {
    *ptr++ = 0;
  }
#endif
}

#ifdef _X86_

int IsMMX()     // does the processor I'm running have MMX(tm) technology?
{
  int retu;

  __asm
  {
	push ebx
    pushfd
    pop edx
    mov eax,edx
    xor	edx,200000h
    push edx
    popfd
    pushfd
    pop edx
//
//  DON'T do this. This clears EAX, but the code is relying
//  on edx being 0 in the bail out case!!!
//
//  -mikeg
//
//    xor	eax,edx
//
//
    xor	edx,eax     //This is the right way
    je	no_cpuid

    mov eax,1
    _emit 0x0f     //CPUID magic incantation
    _emit 0xa2
    and  edx,000800000h
    shr  edx,23
no_cpuid:
    mov  retu,edx
	pop ebx
  }
  return(retu);
}

#else

int IsMMX()     // does the processor I'm running have MMX(tm) technology?
{
    return 0;
}

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\mfint.c ===
/***************************************************************************
*
*                INTEL Corporation Proprietary Information  
*
*      
*                  Copyright (c) 1996 Intel Corporation.
*                         All rights reserved.
*
***************************************************************************
*/
/*
 * jfdctint.c
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains a slow-but-accurate integer implementation of the
 * forward DCT (Discrete Cosine Transform).
 *
 * A 2-D DCT can be done by 1-D DCT on each row followed by 1-D DCT
 * on each column.  Direct algorithms are also available, but they are
 * much more complex and seem not to be any faster when reduced to code.
 *
 * This implementation is based on an algorithm described in
 *   C. Loeffler, A. Ligtenberg and G. Moschytz, "Practical Fast 1-D DCT
 *   Algorithms with 11 Multiplications", Proc. Int'l. Conf. on Acoustics,
 *   Speech, and Signal Processing 1989 (ICASSP '89), pp. 988-991.
 * The primary algorithm described there uses 11 multiplies and 29 adds.
 * We use their alternate method with 12 multiplies and 32 adds.
 * The advantage of this method is that no data path contains more than one
 * multiplication; this allows a very simple and accurate implementation in
 * scaled fixed-point arithmetic, with a minimal number of shifts.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */

#ifdef DCT_ISLOW_SUPPORTED

#ifndef _X86_

GLOBAL(void)
mfdct8x8llm (DCTELEM * data)
{
}

#else

/*
 * This module is specialized to the case DATASIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif


/*
 * The low-down on this scaling stuff is as follows:
 *
 * Each 1-D DCT step produces outputs which are a factor of sqrt(N)
 * larger than the true DCT outputs.  The final outputs are therefore
 * a factor of N larger than desired; since N=8 this can be cured by
 * a simple right shift at the end of the algorithm.  The advantage of
 * this arrangement is that we save two multiplications per 1-D DCT,
 * because the y0 and y4 outputs need not be divided by sqrt(N).
 * In the IJG code, this factor of 8 is removed by the quantization step
 * (in jcdctmgr.c), NOT in this module.
 *
 * We have to do addition and subtraction of the integer inputs, which
 * is no problem, and multiplication by fractional constants, which is
 * a problem to do in integer arithmetic.  We multiply all the constants
 * by CONST_SCALE and convert them to integer constants (thus retaining
 * CONST_BITS bits of precision in the constants).  After doing a
 * multiplication we have to divide the product by CONST_SCALE, with proper
 * rounding, to produce the correct output.  This division can be done
 * cheaply as a right shift of CONST_BITS bits.  We postpone shifting
 * as long as possible so that partial sums can be added together with
 * full fractional precision.
 *
 * The outputs of the first pass are scaled up by PASS1_BITS bits so that
 * they are represented to better-than-integral precision.  These outputs
 * require BITS_IN_JSAMPLE + PASS1_BITS + 3 bits; this fits in a 16-bit word
 * with the recommended scaling.  (For 12-bit sample data, the intermediate
 * array is INT32 anyway.)
 *
 * To avoid overflow of the 32-bit intermediate results in pass 2, we must
 * have BITS_IN_JSAMPLE + CONST_BITS + PASS1_BITS <= 26.  Error analysis
 * shows that the values given below are the most effective.
 */

#if BITS_IN_JSAMPLE == 8
#define CONST_BITS  13
#define PASS1_BITS  2
#else
#define CONST_BITS  13
#define PASS1_BITS  1		/* lose a little precision to avoid overflow */
#endif

/* Some C compilers fail to reduce "FIX(constant)" at compile time, thus
 * causing a lot of useless floating-point operations at run time.
 * To get around this we use the following pre-calculated constants.
 * If you change CONST_BITS you may want to add appropriate values.
 * (With a reasonable C compiler, you can just rely on the FIX() macro...)
 */

#if CONST_BITS == 13
#define FIX_0_298631336  ((INT32)  2446)	/* FIX(0.298631336) */
#define FIX_0_390180644  ((INT32)  3196)	/* FIX(0.390180644) */
#define FIX_0_541196100  ((INT32)  4433)	/* FIX(0.541196100) */
#define FIX_0_765366865  ((INT32)  6270)	/* FIX(0.765366865) */
#define FIX_0_899976223  ((INT32)  7373)	/* FIX(0.899976223) */
#define FIX_1_175875602  ((INT32)  9633)	/* FIX(1.175875602) */
#define FIX_1_501321110  ((INT32)  12299)	/* FIX(1.501321110) */
#define FIX_1_847759065  ((INT32)  15137)	/* FIX(1.847759065) */
#define FIX_1_961570560  ((INT32)  16069)	/* FIX(1.961570560) */
#define FIX_2_053119869  ((INT32)  16819)	/* FIX(2.053119869) */
#define FIX_2_562915447  ((INT32)  20995)	/* FIX(2.562915447) */
#define FIX_3_072711026  ((INT32)  25172)	/* FIX(3.072711026) */
#else
#define FIX_0_298631336  FIX(0.298631336)
#define FIX_0_390180644  FIX(0.390180644)
#define FIX_0_541196100  FIX(0.541196100)
#define FIX_0_765366865  FIX(0.765366865)
#define FIX_0_899976223  FIX(0.899976223)
#define FIX_1_175875602  FIX(1.175875602)
#define FIX_1_501321110  FIX(1.501321110)
#define FIX_1_847759065  FIX(1.847759065)
#define FIX_1_961570560  FIX(1.961570560)
#define FIX_2_053119869  FIX(2.053119869)
#define FIX_2_562915447  FIX(2.562915447)
#define FIX_3_072711026  FIX(3.072711026)
#endif

const __int64 Const_1					=	0x0000000100000001;
const __int64 Const_2					=	0x0002000200020002;
const __int64 Const_1024				=	0x0000040000000400;
const __int64 Const_16384				=	0x0000400000004000;
const __int64 Const_FFFF				=	0xFFFFFFFFFFFFFFFF;
										 
const __int64 Const_0xFIX_0_298631336	=	0x0000098e0000098e;
const __int64 Const_FIX_0_298631336x0	=	0x098e0000098e0000;
const __int64 Const_0xFIX_0_390180644	=	0x00000c7c00000c7c;
const __int64 Const_FIX_0_390180644x0	=	0x0c7c00000c7c0000;
const __int64 Const_0xFIX_0_541196100	=	0x0000115100001151;
const __int64 Const_FIX_0_541196100x0	=	0x1151000011510000;
const __int64 Const_0xFIX_0_765366865	=	0x0000187e0000187e;
const __int64 Const_FIX_0_765366865x0	=	0x187e0000187e0000;
const __int64 Const_0xFIX_0_899976223	=	0x00001ccd00001ccd;
const __int64 Const_FIX_0_899976223x0	=	0x1ccd00001ccd0000;
const __int64 Const_0xFIX_1_175875602	=	0x000025a1000025a1;		
const __int64 Const_FIX_1_175875602x0	=	0x25a1000025a10000;
const __int64 Const_0xFIX_1_501321110	=	0x0000300b0000300b;
const __int64 Const_FIX_1_501321110x0	=	0x300b0000300b0000;
const __int64 Const_0xFIX_1_847759065	=	0x00003b2100003b21;
const __int64 Const_FIX_1_847759065x0	=	0x3b2100003b210000;
const __int64 Const_0xFIX_1_961570560	=	0x00003ec500003ec5;
const __int64 Const_FIX_1_961570560x0	=	0x3ec500003ec50000;
const __int64 Const_0xFIX_2_053119869	=	0x000041b3000041b3;
const __int64 Const_FIX_2_053119869x0	=	0x41b3000041b30000;
const __int64 Const_0xFIX_2_562915447	=	0x0000520300005203;
const __int64 Const_FIX_2_562915447x0	=	0x5203000052030000;
const __int64 Const_0xFIX_3_072711026	=	0x0000625400006254;
const __int64 Const_FIX_3_072711026x0	=	0x6254000062540000;

/* Multiply an INT32 variable by an INT32 constant to yield an INT32 result.
 * For 8-bit samples with the recommended scaling, all the variable
 * and constant values involved are no more than 16 bits wide, so a
 * 16x16->32 bit multiply can be used instead of a full 32x32 multiply.
 * For 12-bit samples, a full 32-bit multiplication will be needed.
 */

#if BITS_IN_JSAMPLE == 8
#define MULTIPLY(var,const)  MULTIPLY16C16(var,const)
#else
#define MULTIPLY(var,const)  ((var) * (const))
#endif

#define	DATASIZE	32 
 /*
 * Perform the forward DCT on one block of samples.
 */

GLOBAL(void)
mfdct8x8llm (DCTELEM * data)
{
	__int64 qwTemp0, qwTemp2, qwTemp4, qwTemp6;
	__int64 qwZ1, qwZ2, qwZ4_even, qwZ4_odd;
	__int64 qwTmp4_Z3_Even, qwTmp4_Z3_Odd;
	__int64 qwTmp6_Z3_Even, qwTmp6_Z3_Odd;
	__int64 qwTmp5_Z4_Even, qwTmp5_Z4_Odd;
	__int64 qwScratch7, qwScratch6, qwScratch5;

__asm{
	
		mov		edi, [data]
		

	// transpose the bottom right quadrant(4X4) of the matrix
	//  ---------       ---------
	// | M1 | M2 |     | M1'| M3'|
	//  ---------  -->  ---------
	// | M3 | M4 |     | M2'| M4'|
	//  ---------       ---------
	// Get the 32-bit quantities and pack into 16 bits

		movq	mm5, [edi][DATASIZE*4+16]		//| w41 | w40 |
		
		movq	mm3, [edi][DATASIZE*4+24]		//| w43 | w42 |
		
		movq	mm6, [edi][DATASIZE*5+16]
		packssdw mm5, mm3				//|w43|w42|w41|w40|

		movq	mm7, [edi][DATASIZE*5+24]
		movq		mm4, mm5			// copy w4---0,1,3,5,6

		movq	mm3, [edi][DATASIZE*6+16]
		packssdw mm6, mm7

		movq	mm2, [edi][DATASIZE*6+24]
		punpcklwd	mm5, mm6			//mm6 = w5

		movq	mm1, [edi][DATASIZE*7+16]
		packssdw mm3, mm2

		movq	mm0, [edi][DATASIZE*7+24]
		punpckhwd	mm4, mm6			//---0,1,3,5,6 

		packssdw mm1, mm0
		movq		mm7, mm3			//---0,1,2,3,5,6 w6

		punpcklwd	mm3, mm1			//mm1 = w7
		movq		mm0, mm5			//---0,2,3,4,5,6,7

		movq	mm2, [edi][DATASIZE*4]	//| w01 | w00 |
		punpckhdq	mm0, mm3			// transposed w5---0,2,4,6,7

		punpckhwd	mm7, mm1			//---0,2,3,5,6,7

		movq	mm1, [edi][DATASIZE*5+8]
		movq		mm6, mm4			//---0,2,3,4,6,7

		movq	[edi][DATASIZE*5+16], mm0  // store w5
		punpckldq	mm5, mm3			// transposed w4

		movq	mm3, [edi][DATASIZE*5]
		punpckldq	mm4, mm7			// transposed w6

		movq	mm0, [edi][DATASIZE*4+8]  //| w03 | w02 |
		punpckhdq	mm6, mm7			// transposed w7---0,3,6,7


	// transpose the bottom left quadrant(4X4) of the matrix and place
	// in the top right quadrant while doing the same for the top
	// right quadrant
	//  ---------       ---------
	// | M1 | M2 |     | M1'| M3'|
	//  ---------  -->  ---------
	// | M3 | M4 |     | M2'| M4'|
	//  ---------       ---------

		movq	[edi][DATASIZE*4+16], mm5  // store w4
		packssdw mm2, mm0				//|w03|w02|w01|w00|

		movq	mm5, [edi][DATASIZE*7]
		packssdw mm3, mm1

		movq	mm0, [edi][DATASIZE*7+8]

		movq	[edi][DATASIZE*7+16], mm6  // store w7---5,6,7
		packssdw mm5, mm0

		movq	mm6, [edi][DATASIZE*6]
		movq		mm0, mm2			// copy w0---0,1,3,5,6

		movq	mm7, [edi][DATASIZE*6+8]
		punpcklwd	mm2, mm3			//mm6 = w1

		movq	[edi][DATASIZE*6+16], mm4  // store w6---3,5,6,7	
		packssdw mm6, mm7

		movq		mm1, [edi][DATASIZE*0+24]
		punpckhwd	mm0, mm3			//---0,1,3,5,6 

		movq		mm7, mm6			//---0,1,2,3,5,6 w2
		punpcklwd	mm6, mm5			//mm1 = w3

		movq		mm3, [edi][DATASIZE*0+16]
		punpckhwd	mm7, mm5			//---0,2,3,5,6,7

		movq		mm4, [edi][DATASIZE*2+24]
		packssdw	mm3, mm1

		movq		mm1, mm2			//---0,2,3,4,5,6,7
		punpckldq	mm2, mm6			// transposed w4

		movq		mm5, [edi][DATASIZE*2+16]
		punpckhdq	mm1, mm6			// transposed w5---0,2,4,6,7

		movq	[edi][DATASIZE*0+16], mm2  // store w4
 		packssdw	mm5, mm4

		movq		mm4, [edi][DATASIZE*1+16]
		movq		mm6, mm0			//---0,2,3,4,6,7

		movq		mm2, [edi][DATASIZE*1+24]
		punpckldq	mm0, mm7			// transposed w6

		movq	[edi][DATASIZE*1+16], mm1  // store w5
		punpckhdq	mm6, mm7			// transposed w7---0,3,6,7

		movq		mm7, [edi][DATASIZE*3+24]
		packssdw	mm4, mm2

		movq	[edi][DATASIZE*2+16], mm0  // store w6---3,5,6,7	
		movq		mm1, mm3			// copy w4---0,1,3,5,6

		movq		mm2, [edi][DATASIZE*3+16]
		punpcklwd	mm3, mm4			//mm6 = w5

		movq	[edi][DATASIZE*3+16], mm6  // store w7---5,6,7
		packssdw	mm2, mm7


	// transpose the bottom left quadrant(4X4) of the matrix
	//  ---------       ---------
	// | M1 | M2 |     | M1'| M3'|
	//  ---------  -->  ---------
	// | M3 | M4 |     | M2'| M4'|
	//  ---------       ---------

   		movq	mm6, [edi][DATASIZE*0]	//| w01 | w00 |
		punpckhwd	mm1, mm4			//---0,1,3,5,6
		
		movq		mm7, mm5			//---0,1,2,3,5,6 w6
		punpcklwd	mm5, mm2			//mm1 = w7

		movq	mm4, [edi][DATASIZE*0+8]		//| w03 | w02 |
		punpckhwd	mm7, mm2			//---0,2,3,5,6,7

		movq		mm0, mm3			//---0,2,3,4,5,6,7
		packssdw mm6, mm4				//|w03|w02|w01|w00|

		movq	mm2, [edi][DATASIZE*2+8]
		punpckldq	mm3, mm5			// transposed w4

		movq	mm4, [edi][DATASIZE*1]
		punpckhdq	mm0, mm5			// transposed w5---0,2,4,6,7
		
		movq	[edi][DATASIZE*4], mm3  // store w4
		movq		mm5, mm1			//---0,2,3,4,6,7

		movq	mm3, [edi][DATASIZE*2]
		punpckldq	mm1, mm7			// transposed w6

		movq	[edi][DATASIZE*5], mm0  // store w5
		punpckhdq	mm5, mm7			// transposed w7---0,3,6,7

		movq	mm7, [edi][DATASIZE*1+8]
		packssdw mm3, mm2

		movq	[edi][DATASIZE*7], mm5  // store w7---5,6,7
		movq		mm2, mm6			// copy w0---0,1,3,5,6

		movq	[edi][DATASIZE*6], mm1  // store w6---3,5,6,7	
		packssdw mm4, mm7

	// transpose the top left quadrant(4X4) of the matrix
	//  ---------       ---------
	// | M1 | M2 |     | M1'| M3'|
	//  ---------  -->  ---------
	// | M3 | M4 |     | M2'| M4'|
	//  ---------       ---------

	// Get the 32-bit quantities and pack into 16 bits
		movq	mm1, [edi][DATASIZE*3]
		punpcklwd	mm6, mm4			//mm6 = w1

		movq	mm0, [edi][DATASIZE*3+8]
		punpckhwd	mm2, mm4			//---0,1,3,5,6 

		packssdw mm1, mm0
		movq		mm5, mm3			//---0,1,2,3,5,6 w2

		punpcklwd	mm3, mm1			//mm1 = w3
		movq		mm0, mm6			//---0,2,3,4,5,6,7

		movq		mm4, [edi][DATASIZE*7]
		punpckhwd	mm5, mm1			//---0,2,3,5,6,7

		movq		mm1, [edi][DATASIZE*4]
		punpckhdq	mm6, mm3			// transposed w4

		punpckldq	mm0, mm3			// transposed w5---0,2,4,6,7
		movq		mm3, mm2			//---0,2,3,4,6,7

		movq	[edi][DATASIZE*0], mm0  // store w4
		punpckldq	mm2, mm5			// transposed w6

		movq	[edi][DATASIZE*1], mm6  // store w5
		punpckhdq	mm3, mm5			// transposed w7---0,3,6,7

		movq	[edi][DATASIZE*2], mm2  // store w6---3,5,6,7	
		paddw	mm0, mm4

		movq	[edi][DATASIZE*3], mm3  // store w7---5,6,7
		paddw	mm3, mm1


	//******************************************************************************
	// End of transpose.  Begin row dct.
	//******************************************************************************

	//		tmp0 = dataptr[DATASIZE*0] + dataptr[DATASIZE*7];

		movq	mm7, mm0
		paddw	mm0, mm3	//tmp10

		paddw	mm6, [edi][DATASIZE*6]
		psubw	mm7, mm3	//tmp13

		paddw	mm2, [edi][DATASIZE*5]
		movq	mm1, mm6

	//		tmp10 = tmp0 + tmp3;

		paddw	mm1, mm2	//tmp11
		psubw	mm6, mm2	//tmp12

	//    dataptr[0] = (DCTELEM) ((tmp10 + tmp11) << PASS1_BITS);
	//    dataptr[4] = (DCTELEM) ((tmp10 - tmp11) << PASS1_BITS);

		movq	mm3, mm0	
		paddw	mm0, mm1	//tmp10 + tmp11	

		psubw	mm3, mm1	//tmp10 - tmp11
		psllw	mm0, 2			// descale it

 		movq	mm1, mm6	//copy tmp12
		psllw	mm3, 2			// descale it

	//		z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);

		movq	qwTemp0, mm0	//store 
		paddw	mm1, mm7	//tmp12 + tmp13

		movq	mm2, mm1	//copy

	//		dataptr[2] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp13, FIX_0_765366865),
	//					   CONST_BITS-PASS1_BITS);
	//		dataptr[6] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp12, - FIX_1_847759065),
	//					   CONST_BITS-PASS1_BITS);

		pmaddwd	mm1, Const_0xFIX_0_541196100	//| z12 | z10 |
		movq	mm4, mm7

		pmaddwd	mm7, Const_0xFIX_0_765366865	//| r2 | r0 |
		movq	mm0, mm6

		pmaddwd	mm2, Const_FIX_0_541196100x0	//| z13 | z11 |

		pmaddwd	mm4, Const_FIX_0_765366865x0	//| r3 | r1 |

		pmaddwd	mm6, Const_0xFIX_1_847759065	//| r2 | r0 |
		paddd	mm7, mm1						// add z1

		pmaddwd	mm0, Const_FIX_1_847759065x0	//| r3 | r1 |

		paddd	mm7, Const_1024
		paddd	mm4, mm2

		paddd	mm4, Const_1024
		psrad	mm7, 11				// descale it |  |R2|  |R0|
		
	//!!!!!! Negate the results in mm6 and mm0
		pxor	mm6, Const_FFFF			//invert result
		psrad	mm4, 11				// descale it |  |R3|  |R1|

		paddd	mm6, Const_1			// 2's complement
		movq	mm5, mm7

		pxor	mm0, Const_FFFF			//invert result
		punpckldq mm7, mm4			//|  |R1|  |R0|

		paddd	mm0, Const_1			// 2's complement
		punpckhdq mm5, mm4			//|  |R3|  |R2|

		movq	qwTemp4, mm3	//store
		packssdw mm7, mm5

		movq	mm5, Const_1024
		paddd	mm6, mm1						// add z1

		movq	qwTemp2, mm7	//store
		paddd	mm6, mm5

		paddd	mm0, mm2
		psrad	mm6, 11				// descale it |  |R2|  |R0|

		paddd	mm0, mm5
		movq	mm5, mm6
		
		movq	mm4, [edi][DATASIZE*3]
		psrad	mm0, 11				// descale it |  |R3|  |R1|

		psubw	mm4, [edi][DATASIZE*4]
		punpckldq mm6, mm0			//|  |R1|  |R0|

		movq	mm7, [edi][DATASIZE*0]
		punpckhdq mm5, mm0			//|  |R3|  |R2|

		psubw	mm7, [edi][DATASIZE*7]
		packssdw mm6, mm5

	//		tmp4 = dataptr[3] - dataptr[4];

		movq	mm5, [edi][DATASIZE*2]
		movq	mm0, mm4

		psubw	mm5, [edi][DATASIZE*5]
		movq	mm2, mm4

		movq	qwTemp6, mm6	//store
		paddw	mm0, mm7	//z1

		movq	mm6, [edi][DATASIZE*1]
		movq	mm1, mm5

		psubw	mm6, [edi][DATASIZE*6]
		movq	mm3, mm5

	//		z1 = tmp4 + tmp7;

		movq	qwScratch5, mm5
		paddw	mm3, mm7	//z4

		movq	qwScratch7, mm7
		paddw	mm2, mm6	//z3

		movq	qwZ1, mm0	//store
		paddw	mm1, mm6	//z2

	//	    z3 = MULTIPLY(z3, - FIX_1_961570560);
	//	    z4 = MULTIPLY(z4, - FIX_0_390180644);
	//	    z5 = MULTIPLY(z3 + z4, FIX_1_175875602);

		movq	mm0, Const_FFFF
		movq	mm5, mm2

		movq	qwZ2, mm1
		movq	mm7, mm2

		pmaddwd	mm5, Const_0xFIX_1_961570560	//z32, z30
		paddw	mm2, mm3		//z3 + z4

		pmaddwd	mm7, Const_FIX_1_961570560x0	//z33, z31
		movq	mm1, mm3

		movq	qwScratch6, mm6
		movq	mm6, mm2

	//	    z3 += z5;

	//!!!!!! Negate the results
		pmaddwd	mm2, Const_0xFIX_1_175875602	//z52, z50
		pxor	mm5, mm0			//invert result
		
		paddd	mm5, Const_1			// 2's complement
		pxor	mm7, mm0			//invert result

		pmaddwd	mm3, Const_0xFIX_0_390180644	//z42, z40

		pmaddwd	mm1, Const_FIX_0_390180644x0	//z43, z41
		paddd	mm5, mm2	//z3_even

		paddd	mm7, Const_1			// 2's complement

		pmaddwd	mm6, Const_FIX_1_175875602x0	//z53, z51
		pxor	mm3, mm0			//invert result

	//	    z4 += z5;

	//!!!!!! Negate the results
		paddd	mm3, Const_1			// 2's complement
		pxor	mm1, mm0			//invert result

		paddd	mm1, Const_1			// 2's complement
		paddd	mm3, mm2

		movq	mm0, qwScratch6
		movq	mm2, mm4

	//	    tmp4 = MULTIPLY(tmp4, FIX_0_298631336);

		pmaddwd	mm4, Const_0xFIX_0_298631336	//T42, T40
		paddd	mm7, mm6	//z3_odd

		pmaddwd	mm2, Const_FIX_0_298631336x0	//T43, T41
		paddd	mm1, mm6
		
		movq	mm6, mm0
		paddd	mm4, mm5

	//	    tmp6 = MULTIPLY(tmp6, FIX_3_072711026);

		pmaddwd	mm6, Const_0xFIX_3_072711026	//T62, T60
		paddd	mm2, mm7

		pmaddwd	mm0, Const_FIX_3_072711026x0	//T63, T61

		movq	qwTmp4_Z3_Odd, mm2	

		movq	qwTmp4_Z3_Even, mm4	
		paddd	mm6, mm5

		movq	mm5, qwScratch5
		paddd	mm0, mm7
		
		movq	mm7, qwScratch7
		movq	mm2, mm5

		movq	qwTmp6_Z3_Even, mm6
		movq	mm6, mm7
			
	//	    tmp5 = MULTIPLY(tmp5, FIX_2_053119869);		
	//	    tmp7 = MULTIPLY(tmp7, FIX_1_501321110);

		pmaddwd	mm5, Const_0xFIX_2_053119869	//T52, T50

		pmaddwd	mm2, Const_FIX_2_053119869x0	//T53, T51

		pmaddwd	mm7, Const_0xFIX_1_501321110	//T72, T70

		pmaddwd	mm6, Const_FIX_1_501321110x0	//T73, T71
		paddd	mm5, mm3

		movq	qwTmp6_Z3_Odd, mm0
		paddd	mm2, mm1
		
		movq	qwTmp5_Z4_Even, mm5
		paddd	mm7, mm3
			
		movq	mm0, qwZ1
		paddd	mm6, mm1
		
	//	    z1 = MULTIPLY(z1, - FIX_0_899976223);

		movq	mm1, Const_FFFF
		movq	mm4, mm0

	//!!!!!! Negate the results
		pmaddwd	mm0, Const_0xFIX_0_899976223	//z12, z10

		pmaddwd	mm4, Const_FIX_0_899976223x0	//z13, z11

		movq	mm3, qwTmp4_Z3_Even

		movq	qwTmp5_Z4_Odd, mm2
		pxor	mm0, mm1			//invert result

		movq	mm2, qwTmp4_Z3_Odd
		pxor	mm4, mm1			//invert result

		paddd	mm4, Const_1			// 2's complement
		paddd	mm7, mm0	//tmp7 + z1 + z4 EVEN

		paddd	mm0, Const_1			// 2's complement
		paddd	mm6, mm4	//tmp7 + z1 + z4 ODD

	//	    dataptr[1] = (DCTELEM) DESCALE(tmp7 + z1 + z4, CONST_BITS-PASS1_BITS);

		paddd	mm7, Const_1024		//rounding adj
		paddd	mm3, mm0	//tmp4 + z1 + z3 EVEN

		paddd	mm6, Const_1024		//rounding adj
		psrad	mm7, 11				// descale it |  |R2|  |R0|
		
		psrad	mm6, 11				// descale it |  |R3|  |R1|

		movq	mm5, mm7
		punpckldq mm7, mm6			//|  |R1|  |R0|

	//	    dataptr[7] = (DCTELEM) DESCALE(tmp4 + z1 + z3, CONST_BITS-PASS1_BITS);

		punpckhdq mm5, mm6			//|  |R3|  |R2|
		paddd	mm2, mm4	//tmp4 + z1 + z3 ODD

		paddd	mm3, Const_1024	//rounding adj
		packssdw mm7, mm5

		paddd	mm2, Const_1024	//rounding adj
		psrad	mm3, 11				// descale it |  |R2|  |R0|
		
		movq	mm0, qwZ2
		psrad	mm2, 11				// descale it |  |R3|  |R1|

		movq	mm5, mm3
		movq	mm4, mm0

	//	    z2 = MULTIPLY(z2, - FIX_2_562915447);

		pmaddwd	mm0, Const_0xFIX_2_562915447	//z22, z20
		punpckldq mm3, mm2			//|  |R1|  |R0|

		pmaddwd	mm4, Const_FIX_2_562915447x0	//z23, z21
		punpckhdq mm5, mm2			//|  |R3|  |R2|

		movq	mm2, Const_FFFF
		packssdw mm3, mm5

		movq	[edi][DATASIZE*1], mm7	//store
	//!!!!!! Negate the results
		pxor	mm0, mm2			//invert result

		movq	mm5, Const_1
		pxor	mm4, mm2			//invert result

		movq	[edi][DATASIZE*7], mm3	//store
		paddd	mm0, mm5			// 2's complement

		movq	mm7, qwTmp6_Z3_Even
		paddd	mm4, mm5			// 2's complement

	//	    dataptr[3] = (DCTELEM) DESCALE(tmp6 + z2 + z3, CONST_BITS-PASS1_BITS);

		movq	mm2, qwTmp6_Z3_Odd
		paddd	mm7, mm0	//tmp6 + z2 + z3 EVEN

		paddd	mm7, Const_1024		//rounding adj
		paddd	mm2, mm4	//tmp6 + z2 + z3 ODD

		paddd	mm2, Const_1024		//rounding adj
		psrad	mm7, 11				// descale it |  |R2|  |R0|
		
		movq	mm6, qwTemp0	//restore 
		psrad	mm2, 11				// descale it |  |R3|  |R1|

		movq	mm3, qwTmp5_Z4_Even
		movq	mm5, mm7

		movq	[edi][DATASIZE*0], mm6	//store 
		punpckldq mm7, mm2			//|  |R1|  |R0|

		movq	mm1, qwTmp5_Z4_Odd
		punpckhdq mm5, mm2			//|  |R3|  |R2|

		movq	mm6, qwTemp2	//restore 
		packssdw mm7, mm5

		movq	mm5, Const_1024
		paddd	mm3, mm0	//tmp5 + z2 + z4 EVEN

	//	    dataptr[5] = (DCTELEM) DESCALE(tmp5 + z2 + z4, CONST_BITS-PASS1_BITS);

		movq	[edi][DATASIZE*3], mm7	//store
		paddd	mm1, mm4	//tmp5 + z2 + z4 ODD

		movq	mm7, qwTemp4	//restore 
		paddd	mm3, mm5		//rounding adj

		movq	[edi][DATASIZE*2], mm6	//store 
		paddd	mm1, mm5		//rounding adj

		movq	[edi][DATASIZE*4], mm7	//store 
		psrad	mm3, 11				// descale it |  |R2|  |R0|
		
		movq	mm6, qwTemp6	//restore 
		psrad	mm1, 11				// descale it |  |R3|  |R1|

		movq	mm0, [edi][DATASIZE*0+16]
		movq	mm5, mm3

		movq	[edi][DATASIZE*6], mm6	//store 
		punpckldq mm3, mm1			//|  |R1|  |R0|

		paddw	mm0, [edi][DATASIZE*7+16]
		punpckhdq mm5, mm1			//|  |R3|  |R2|

		movq	mm1, [edi][DATASIZE*1+16]
		packssdw mm3, mm5

		paddw	mm1, [edi][DATASIZE*6+16]
		movq	mm7, mm0

		movq	[edi][DATASIZE*5], mm3	//store
		movq	mm6, mm1

	//******************************************************************************
	// This completes 4x8 dct locations.  Copy to do other 4x8.
	//******************************************************************************

	//		tmp0 = dataptr[DATASIZE*0] + dataptr[DATASIZE*7];

		movq	mm3, [edi][DATASIZE*3+16]

		paddw	mm3, [edi][DATASIZE*4+16]

		movq	mm2, [edi][DATASIZE*2+16]
		paddw	mm0, mm3	//tmp10

		paddw	mm2, [edi][DATASIZE*5+16]
		psubw	mm7, mm3	//tmp13

	//		tmp10 = tmp0 + tmp3;

		paddw	mm1, mm2	//tmp11
		psubw	mm6, mm2	//tmp12

	//    dataptr[0] = (DCTELEM) ((tmp10 + tmp11) << PASS1_BITS);
	//    dataptr[4] = (DCTELEM) ((tmp10 - tmp11) << PASS1_BITS);

		movq	mm3, mm0	
		paddw	mm0, mm1	//tmp10 + tmp11	

		psubw	mm3, mm1	//tmp10 - tmp11
		psllw	mm0, 2			// descale it

 		movq	mm1, mm6	//copy tmp12
		psllw	mm3, 2			// descale it

	//		z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);

		movq	qwTemp0, mm0	//store 
		paddw	mm1, mm7	//tmp12 + tmp13

	//;;; 	movq	[edi][DATASIZE*6+16], mm4  ; store w6---3,5,6,7	
		movq	mm2, mm1	//copy

	//		dataptr[2] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp13, FIX_0_765366865),
	//					   CONST_BITS-PASS1_BITS);
	//		dataptr[6] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp12, - FIX_1_847759065),
	//					   CONST_BITS-PASS1_BITS);

		pmaddwd	mm1, Const_0xFIX_0_541196100	//| z12 | z10 |
		movq	mm4, mm7

		pmaddwd	mm7, Const_0xFIX_0_765366865	//| r2 | r0 |
		movq	mm0, mm6

		pmaddwd	mm2, Const_FIX_0_541196100x0	//| z13 | z11 |

		pmaddwd	mm4, Const_FIX_0_765366865x0	//| r3 | r1 |

		pmaddwd	mm6, Const_0xFIX_1_847759065	//| r2 | r0 |
		paddd	mm7, mm1						// add z1

		pmaddwd	mm0, Const_FIX_1_847759065x0	//| r3 | r1 |

		paddd	mm7, Const_1024
		paddd	mm4, mm2

		paddd	mm4, Const_1024
		psrad	mm7, 11				// descale it |  |R2|  |R0|
		
	//!!!!!! Negate the results in mm6 and mm0
		pxor	mm6, Const_FFFF			//invert result
		psrad	mm4, 11				// descale it |  |R3|  |R1|

		paddd	mm6, Const_1			// 2's complement
		movq	mm5, mm7

		pxor	mm0, Const_FFFF			//invert result
		punpckldq mm7, mm4			//|  |R1|  |R0|

		paddd	mm0, Const_1			// 2's complement
		punpckhdq mm5, mm4			//|  |R3|  |R2|

		movq	qwTemp4, mm3	//store
		packssdw mm7, mm5

		movq	mm5, Const_1024
		paddd	mm6, mm1						// add z1
		
		movq	qwTemp2, mm7	//store
		paddd	mm0, mm2

		movq	mm4, [edi][DATASIZE*3+16]
		paddd	mm6, mm5

		psubw	mm4, [edi][DATASIZE*4+16]
		psrad	mm6, 11				// descale it |  |R2|  |R0|
		
		paddd	mm0, mm5
		movq	mm5, mm6

		movq	mm7, [edi][DATASIZE*0+16]
		psrad	mm0, 11				// descale it |  |R3|  |R1|

		psubw	mm7, [edi][DATASIZE*7+16]
		punpckldq mm6, mm0			//|  |R1|  |R0|

		punpckhdq mm5, mm0			//|  |R3|  |R2|
		movq	mm0, mm4

		packssdw mm6, mm5
		movq	mm2, mm4

	//		tmp4 = dataptr[3] - dataptr[4];

		movq	mm5, [edi][DATASIZE*2+16]
		paddw	mm0, mm7	//z1

		psubw	mm5, [edi][DATASIZE*5+16]

		movq	qwTemp6, mm6	//store
		movq	mm1, mm5

		movq	mm6, [edi][DATASIZE*1+16]
		movq	mm3, mm5

	//		z1 = tmp4 + tmp7;

		psubw	mm6, [edi][DATASIZE*6+16]
		paddw	mm3, mm7	//z4

		movq	qwScratch7, mm7
		paddw	mm2, mm6	//z3

		movq	qwScratch5, mm5
		paddw	mm1, mm6	//z2

	//	    z3 = MULTIPLY(z3, - FIX_1_961570560);
	//	    z4 = MULTIPLY(z4, - FIX_0_390180644);
	//	    z5 = MULTIPLY(z3 + z4, FIX_1_175875602);

		movq	qwZ1, mm0	//store
		movq	mm5, mm2

		movq	qwZ2, mm1
		movq	mm7, mm2

		movq	mm0, Const_FFFF
		paddw	mm2, mm3		//z3 + z4

		pmaddwd	mm5, Const_0xFIX_1_961570560	//z32, z30
		movq	mm1, mm3

		pmaddwd	mm7, Const_FIX_1_961570560x0	//z33, z31

		movq	qwScratch6, mm6
		movq	mm6, mm2

	//	    z3 += z5//

	//!!!!!! Negate the results
		pmaddwd	mm2, Const_0xFIX_1_175875602	//z52, z50
		pxor	mm5, mm0			//invert result
		
		paddd	mm5, Const_1			// 2's complement
		pxor	mm7, mm0			//invert result

		pmaddwd	mm3, Const_0xFIX_0_390180644	//z42, z40

		pmaddwd	mm1, Const_FIX_0_390180644x0	//z43, z41
		paddd	mm5, mm2	//z3_even

		paddd	mm7, Const_1			// 2's complement

		pmaddwd	mm6, Const_FIX_1_175875602x0	//z53, z51
		pxor	mm3, mm0			//invert result

	//	    z4 += z5;

	//!!!!!! Negate the results
		paddd	mm3, Const_1			// 2's complement
		pxor	mm1, mm0			//invert result

		paddd	mm1, Const_1			// 2's complement
		paddd	mm3, mm2

		movq	mm0, qwScratch6
		movq	mm2, mm4

	//	    tmp4 = MULTIPLY(tmp4, FIX_0_298631336);

		pmaddwd	mm4, Const_0xFIX_0_298631336	//T42, T40
		paddd	mm7, mm6	//z3_odd

		pmaddwd	mm2, Const_FIX_0_298631336x0	//T43, T41
		paddd	mm1, mm6
		
		movq	mm6, mm0
		paddd	mm4, mm5

	//	    tmp6 = MULTIPLY(tmp6, FIX_3_072711026);

		pmaddwd	mm6, Const_0xFIX_3_072711026	//T62, T60
		paddd	mm2, mm7

		pmaddwd	mm0, Const_FIX_3_072711026x0	//T63, T61

		movq	qwTmp4_Z3_Odd, mm2	

		movq	qwTmp4_Z3_Even, mm4	
		paddd	mm6, mm5

		movq	mm5, qwScratch5
		paddd	mm0, mm7
		
		movq	mm7, qwScratch7
		movq	mm2, mm5

		movq	qwTmp6_Z3_Even, mm6
		movq	mm6, mm7
			
	//	    tmp5 = MULTIPLY(tmp5, FIX_2_053119869);		
	//	    tmp7 = MULTIPLY(tmp7, FIX_1_501321110);

		pmaddwd	mm5, Const_0xFIX_2_053119869	//T52, T50

		pmaddwd	mm2, Const_FIX_2_053119869x0	//T53, T51

		pmaddwd	mm7, Const_0xFIX_1_501321110	//T72, T70

		pmaddwd	mm6, Const_FIX_1_501321110x0	//T73, T71
		paddd	mm5, mm3

		movq	qwTmp6_Z3_Odd, mm0
		paddd	mm2, mm1
		
		movq	qwTmp5_Z4_Even, mm5
		paddd	mm7, mm3
			
		movq	mm0, qwZ1
		paddd	mm6, mm1
		
	//	    z1 = MULTIPLY(z1, - FIX_0_899976223);

		movq	mm1, Const_FFFF
		movq	mm4, mm0

	//!!!!!! Negate the results
		pmaddwd	mm0, Const_0xFIX_0_899976223	//z12, z10

		pmaddwd	mm4, Const_FIX_0_899976223x0	//z13, z11

		movq	mm3, qwTmp4_Z3_Even

		movq	qwTmp5_Z4_Odd, mm2
		pxor	mm0, mm1			//invert result

		movq	mm2, qwTmp4_Z3_Odd
		pxor	mm4, mm1			//invert result

		paddd	mm4, Const_1			// 2's complement
		paddd	mm7, mm0	//tmp7 + z1 + z4 EVEN

		paddd	mm0, Const_1			// 2's complement
		paddd	mm6, mm4	//tmp7 + z1 + z4 ODD

	//	    dataptr[1] = (DCTELEM) DESCALE(tmp7 + z1 + z4, CONST_BITS-PASS1_BITS);

		paddd	mm7, Const_1024		//rounding adj
		paddd	mm3, mm0	//tmp4 + z1 + z3 EVEN

		paddd	mm6, Const_1024		//rounding adj
		psrad	mm7, 11				// descale it |  |R2|  |R0|
		
		psrad	mm6, 11				// descale it |  |R3|  |R1|

		movq	mm5, mm7
		punpckldq mm7, mm6			//|  |R1|  |R0|

	//	    dataptr[7] = (DCTELEM) DESCALE(tmp4 + z1 + z3, CONST_BITS-PASS1_BITS);

		punpckhdq mm5, mm6			//|  |R3|  |R2|
		paddd	mm2, mm4	//tmp4 + z1 + z3 ODD

		paddd	mm3, Const_1024	//rounding adj
		packssdw mm7, mm5

		paddd	mm2, Const_1024	//rounding adj
		psrad	mm3, 11				// descale it |  |R2|  |R0|
		
		movq	mm0, qwZ2
		psrad	mm2, 11				// descale it |  |R3|  |R1|

		movq	mm5, mm3
		movq	mm4, mm0

	//	    z2 = MULTIPLY(z2, - FIX_2_562915447);

		pmaddwd	mm0, Const_0xFIX_2_562915447	//z22, z20
		punpckldq mm3, mm2			//|  |R1|  |R0|

		pmaddwd	mm4, Const_FIX_2_562915447x0	//z23, z21
		punpckhdq mm5, mm2			//|  |R3|  |R2|

		movq	mm2, Const_FFFF
		packssdw mm3, mm5

		movq	[edi][DATASIZE*1+16], mm7	//store
	//!!!!!! Negate the results
		pxor	mm0, mm2			//invert result

		movq	mm5, Const_1
		pxor	mm4, mm2			//invert result

		movq	[edi][DATASIZE*7+16], mm3	//store
		paddd	mm0, mm5			// 2's complement

		movq	mm7, qwTmp6_Z3_Even
		paddd	mm4, mm5			// 2's complement

	//	    dataptr[3] = (DCTELEM) DESCALE(tmp6 + z2 + z3, CONST_BITS-PASS1_BITS);

		movq	mm2, qwTmp6_Z3_Odd
		paddd	mm7, mm0	//tmp6 + z2 + z3 EVEN

		paddd	mm7, Const_1024		//rounding adj
		paddd	mm2, mm4	//tmp6 + z2 + z3 ODD

		paddd	mm2, Const_1024		//rounding adj
		psrad	mm7, 11				// descale it |  |R2|  |R0|
		
		movq	mm6, qwTemp0	//restore 
		psrad	mm2, 11				// descale it |  |R3|  |R1|

		movq	mm5, mm7

		movq	[edi][DATASIZE*0+16], mm6	//store 
		punpckldq mm7, mm2			//|  |R1|  |R0|

		movq	mm3, qwTmp5_Z4_Even
		punpckhdq mm5, mm2			//|  |R3|  |R2|

		movq	mm1, qwTmp5_Z4_Odd
		packssdw mm7, mm5

		movq	mm6, qwTemp2	//restore 
		paddd	mm3, mm0	//tmp5 + z2 + z4 EVEN

	//	    dataptr[5] = (DCTELEM) DESCALE(tmp5 + z2 + z4, CONST_BITS-PASS1_BITS);

		movq	mm0, Const_1024
		paddd	mm1, mm4	//tmp5 + z2 + z4 ODD

		movq	[edi][DATASIZE*3+16], mm7	//store
		paddd	mm3, mm0		//rounding adj

		movq	mm7, qwTemp4	//restore 
		paddd	mm1, mm0		//rounding adj

		movq	[edi][DATASIZE*2+16], mm6	//store 
		psrad	mm3, 11				// descale it |  |R2|  |R0|
		
		movq	mm6, qwTemp6	//restore 
		psrad	mm1, 11				// descale it |  |R3|  |R1|

		movq	[edi][DATASIZE*4+16], mm7	//store 
		movq	mm5, mm3

		movq	[edi][DATASIZE*6+16], mm6	//store 
		punpckldq mm3, mm1			//|  |R1|  |R0|

		punpckhdq mm5, mm1			//|  |R3|  |R2|
		movq		mm0, mm7			// copy w4---0,1,3,5,6

		movq	mm1, [edi][DATASIZE*7+16]
		packssdw mm3, mm5

		movq	[edi][DATASIZE*5+16], mm3	//store
		punpcklwd	mm7, mm3			//mm6 = w5

	//******************************************************************************

	//******************************************************************************
	// This completes all 8x8 dct locations for the row case.
	// Now transpose the data for the columns.
	//******************************************************************************

	// transpose the bottom right quadrant(4X4) of the matrix
	//  ---------       ---------
	// | M1 | M2 |     | M1'| M3'|
	//  ---------  -->  ---------
	// | M3 | M4 |     | M2'| M4'|
	//  ---------       ---------

		movq		mm4, mm7			//---0,2,3,4,5,6,7
		punpckhwd	mm0, mm3			//---0,1,3,5,6 

		movq		mm2, mm6			//---0,1,2,3,5,6 w6
		punpcklwd	mm6, mm1			//mm1 = w7

	//		tmp0 = dataptr[DATASIZE*0] + dataptr[DATASIZE*7]//

		movq	mm5, [edi][DATASIZE*5]
		punpckldq	mm7, mm6			// transposed w4

		punpckhdq	mm4, mm6			// transposed w5---0,2,4,6,7
		movq		mm6, mm0			//---0,2,3,4,6,7

		movq	[edi][DATASIZE*4+16], mm7  // store w4
		punpckhwd	mm2, mm1			//---0,2,3,5,6,7

		movq	[edi][DATASIZE*5+16], mm4  // store w5
		punpckldq	mm0, mm2			// transposed w6

		movq	mm7, [edi][DATASIZE*4]
		punpckhdq	mm6, mm2			// transposed w7---0,3,6,7

		movq	[edi][DATASIZE*6+16], mm0  // store w6---3,5,6,7	
		movq		mm0, mm7			// copy w0---0,1,3,5,6

		movq	[edi][DATASIZE*7+16], mm6  // store w7---5,6,7
		punpcklwd	mm7, mm5			//mm6 = w1

	// transpose the bottom left quadrant(4X4) of the matrix and place
	// in the top right quadrant while doing the same for the top
	// right quadrant
	//  ---------       ---------
	// | M1 | M2 |     | M1'| M3'|
	//  ---------  -->  ---------
	// | M3 | M4 |     | M2'| M4'|
	//  ---------       ---------

		movq	mm3, [edi][DATASIZE*6]
		punpckhwd	mm0, mm5			//---0,1,3,5,6 

		movq	mm1, [edi][DATASIZE*7]
		movq		mm2, mm3			//---0,1,2,3,5,6 w2

		movq		mm6, [edi][DATASIZE*0+16]
		punpcklwd	mm3, mm1			//mm1 = w3

		movq		mm5, [edi][DATASIZE*1+16]
		punpckhwd	mm2, mm1			//---0,2,3,5,6,7

		movq		mm4, mm7			//---0,2,3,4,5,6,7
		punpckldq	mm7, mm3			// transposed w4

		punpckhdq	mm4, mm3			// transposed w5---0,2,4,6,7
		movq		mm3, mm0			//---0,2,3,4,6,7

		movq	[edi][DATASIZE*0+16], mm7  // store w4
		punpckldq	mm0, mm2			// transposed w6

		movq		mm1, [edi][DATASIZE*2+16]
		punpckhdq	mm3, mm2			// transposed w7---0,3,6,7

		movq	[edi][DATASIZE*2+16], mm0  // store w6---3,5,6,7	
		movq		mm0, mm6			// copy w4---0,1,3,5,6

		movq		mm7, [edi][DATASIZE*3+16]
		punpcklwd	mm6, mm5			//mm6 = w5

		movq	[edi][DATASIZE*1+16], mm4  // store w5
		punpckhwd	mm0, mm5			//---0,1,3,5,6 

	// transpose the top right quadrant(4X4) of the matrix
	//  ---------       ---------
	// | M1 | M2 |     | M1'| M3'|
	//  ---------  -->  ---------
	// | M3 | M4 |     | M2'| M4'|
	//  ---------       ---------

		movq		mm2, mm1			//---0,1,2,3,5,6 w6
		punpcklwd	mm1, mm7			//mm1 = w7

		movq		mm4, mm6			//---0,2,3,4,5,6,7
		punpckldq	mm6, mm1			// transposed w4

		movq	[edi][DATASIZE*3+16], mm3  // store w7---5,6,7
		punpckhdq	mm4, mm1			// transposed w5---0,2,4,6,7

		movq	[edi][DATASIZE*4], mm6  // store w4
		punpckhwd	mm2, mm7			//---0,2,3,5,6,7

		movq	mm7, [edi][DATASIZE*0]
		movq		mm1, mm0			//---0,2,3,4,6,7

		movq	mm3, [edi][DATASIZE*1]
		punpckldq	mm0, mm2			// transposed w6

		movq	[edi][DATASIZE*5], mm4  // store w5
		punpckhdq	mm1, mm2			// transposed w7---0,3,6,7

		movq	[edi][DATASIZE*6], mm0  // store w6---3,5,6,7	
		movq		mm2, mm7			// copy w0---0,1,3,5,6

		movq	mm4, [edi][DATASIZE*3]
		punpcklwd	mm7, mm3			//mm6 = w1

	// transpose the top left quadrant(4X4) of the matrix
	//  ---------       ---------
	// | M1 | M2 |     | M1'| M3'|
	//  ---------  -->  ---------
	// | M3 | M4 |     | M2'| M4'|
	//  ---------       ---------

		movq	mm6, [edi][DATASIZE*2]
		punpckhwd	mm2, mm3			//---0,1,3,5,6 

		movq		mm0, mm6			//---0,1,2,3,5,6 w2
		punpcklwd	mm6, mm4			//mm1 = w3

		movq	[edi][DATASIZE*7], mm1  // store w7---5,6,7
		punpckhwd	mm0, mm4			//---0,2,3,5,6,7

		movq		mm1, mm7			//---0,2,3,4,5,6,7
		punpckldq	mm7, mm6			// transposed w4

		punpckhdq	mm1, mm6			// transposed w5---0,2,4,6,7
		movq		mm6, mm2			//---0,2,3,4,6,7

 		movq	[edi][DATASIZE*0], mm7  // store w4
		punpckldq	mm2, mm0			// transposed w6

		paddw	mm7, [edi][DATASIZE*7]
		punpckhdq	mm6, mm0			// transposed w7---0,3,6,7

		movq	[edi][DATASIZE*3], mm6  // store w7---5,6,7
		movq	mm4, mm7

		paddw	mm6, [edi][DATASIZE*4]

		movq	[edi][DATASIZE*1], mm1  // store w5
		paddw	mm7, mm6	//tmp10


	//******************************************************************************
	// This begins the column dct
	//******************************************************************************

		paddw	mm1, [edi][DATASIZE*6]
		psubw	mm4, mm6	//tmp13

		movq	[edi][DATASIZE*2], mm2  // store w6---3,5,6,7	
		movq	mm6, mm1

		paddw	mm2, [edi][DATASIZE*5]
		movq	mm3, mm7	

		paddw	mm1, mm2	//tmp11
		psubw	mm6, mm2	//tmp12

	//    dataptr[DATASIZE*0] = (DCTELEM) DESCALE(tmp10 + tmp11, PASS1_BITS);
	//    dataptr[DATASIZE*4] = (DCTELEM) DESCALE(tmp10 - tmp11, PASS1_BITS);

		paddw	mm7, mm1	//tmp10 + tmp11	

		paddw	mm7, Const_2	// round  add 2 to each element
		psubw	mm3, mm1	//tmp10 - tmp11

		paddw	mm3, Const_2	// round  add 2 to each element
		psraw	mm7, 2			// descale it

	//		unpack word to dword sign extended
		movq	mm5, mm7
		punpcklwd mm7, mm7

		psrad	mm7, 16			// even results store in Temp0			
		punpckhwd mm5, mm5

		psrad	mm5, 16			// odd results store in array
		movq	mm1, mm6	//copy tmp12

		movq	qwTemp0, mm7	//store 
		psraw	mm3, 2			// descale it

		movq	[edi][DATASIZE*0+8], mm5
		movq	mm5, mm3

		punpcklwd mm3, mm3
		paddw	mm1, mm4	//tmp12 + tmp13

		psrad	mm3, 16			// even results store in Temp4
		movq	mm2, mm1	//copy
					
	//		z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);

		pmaddwd	mm1, Const_0xFIX_0_541196100	//| z12 | z10 |
		punpckhwd mm5, mm5

		pmaddwd	mm2, Const_FIX_0_541196100x0	//| z13 | z11 |
		movq	mm7, mm4

	//		dataptr[DATASIZE*2] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp13, FIX_0_765366865),
	//					   CONST_BITS+PASS1_BITS);

		pmaddwd	mm4, Const_FIX_0_765366865x0	//| r3 | r1 |
		psrad	mm5, 16			// odd results store in array

		pmaddwd	mm7, Const_0xFIX_0_765366865	//| r2 | r0 |
		movq	mm0, mm6

	//		dataptr[DATASIZE*6] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp12, - FIX_1_847759065),
	//					   CONST_BITS+PASS1_BITS);

		pmaddwd	mm6, Const_0xFIX_1_847759065	//| r2 | r0 |

		movq	qwTemp4, mm3	//store
		paddd	mm4, mm2

		paddd	mm4, Const_16384
		paddd	mm7, mm1						// add z1

		paddd	mm7, Const_16384
		psrad	mm4, 15				// descale it |  |R3|  |R1|

		movq	[edi][DATASIZE*4+8], mm5
		psrad	mm7, 15				// descale it |  |R2|  |R0|
		
		pmaddwd	mm0, Const_FIX_1_847759065x0	//| r3 | r1 |
		movq	mm5, mm7

	//!!!!!! Negate result
		movq	mm3, Const_1
		punpckldq mm7, mm4			//|  |R1|  |R0|

		pxor	mm6, Const_FFFF			//invert result
		punpckhdq mm5, mm4			//|  |R3|  |R2|

		movq	qwTemp2, mm7	//store
		paddd	mm6, mm3			// 2's complement

		pxor	mm0, Const_FFFF			//invert result
		paddd	mm6, mm1						// add z1

		movq	[edi][DATASIZE*2+8], mm5	//write out 2nd half in unused memory
		paddd	mm0, mm3			// 2's complement

		movq	mm3, Const_16384
		paddd	mm0, mm2

		movq	mm7, [edi][DATASIZE*0]
		paddd	mm6, mm3

		movq	mm4, [edi][DATASIZE*3]
		paddd	mm0, mm3

		psubw	mm7, [edi][DATASIZE*7]
		psrad	mm6, 15				// descale it |  |R2|  |R0|
		
		psubw	mm4, [edi][DATASIZE*4]
		psrad	mm0, 15				// descale it |  |R3|  |R1|

		movq	mm3, [edi][DATASIZE*2]
		movq	mm5, mm6

		psubw	mm3, [edi][DATASIZE*5]
		punpckldq mm6, mm0			//|  |R1|  |R0|

		punpckhdq mm5, mm0			//|  |R3|  |R2|
		movq	mm0, mm4

		movq	qwTemp6, mm6	//store
		movq	mm2, mm4

	//		tmp4 = dataptr[3] - dataptr[4];
	//		z1 = tmp4 + tmp7;

		movq	mm6, [edi][DATASIZE*1]
		paddw	mm0, mm7	//z1

		movq	[edi][DATASIZE*6+8], mm5	//write out 2nd half in unused memory
		movq	mm1, mm3
		
		psubw	mm6, [edi][DATASIZE*6]
		movq	mm5, mm3

		movq	qwZ1, mm0	//store
		paddw	mm5, mm7	//z4

		movq	qwScratch7, mm7
		paddw	mm1, mm6	//z2

		movq	qwScratch5, mm3
		paddw	mm2, mm6	//z3

		movq	qwZ2, mm1
		movq	mm3, mm2

	//	    z3 = MULTIPLY(z3, - FIX_1_961570560);
	//	    z5 = MULTIPLY(z3 + z4, FIX_1_175875602);
	//	    z4 = MULTIPLY(z4, - FIX_0_390180644);

		movq	qwScratch6, mm6
		movq	mm1, mm2

		pmaddwd	mm3, Const_0xFIX_1_961570560	//z32, z30
		movq	mm7, mm5

		movq	mm6, Const_FFFF
		paddw	mm2, mm5		//z3 + z4

		pmaddwd	mm1, Const_FIX_1_961570560x0	//z33, z31
		movq	mm0, mm2
		
		pmaddwd	mm7, Const_FIX_0_390180644x0	//z43, z41
	//!!!!!! Negate the results
		pxor	mm3, mm6			//invert result

		pmaddwd	mm5, Const_0xFIX_0_390180644	//z42, z40

		pmaddwd	mm2, Const_0xFIX_1_175875602	//z52, z50
 		pxor	mm1, mm6			//invert result

		pmaddwd	mm0, Const_FIX_1_175875602x0	//z53, z51
	//!!!!!! Negate the results
		pxor	mm7, mm6			//invert result

		paddd	mm3, Const_1			// 2's complement
		pxor	mm5, mm6			//invert result

	//	    z3 += z5//

		paddd	mm1, Const_1			// 2's complement
		paddd	mm3, mm2	//z3_even

		paddd	mm5, Const_1			// 2's complement
		paddd	mm1, mm0	//z3_odd

	//	    z4 += z5;

		paddd	mm7, Const_1			// 2's complement
		paddd	mm5, mm2

		paddd	mm7, mm0
		movq	mm2, mm4
		
	//	    tmp4 = MULTIPLY(tmp4, FIX_0_298631336);

		pmaddwd	mm4, Const_0xFIX_0_298631336	//T42, T40

		pmaddwd	mm2, Const_FIX_0_298631336x0	//T43, T41

		movq	qwZ4_even, mm5

		movq	qwZ4_odd, mm7
		paddd	mm4, mm3

		movq	mm6, qwScratch6
		paddd	mm2, mm1

		movq	qwTmp4_Z3_Even, mm4
		movq	mm5, mm6
			
	//	    tmp6 = MULTIPLY(tmp6, FIX_3_072711026);

		pmaddwd	mm6, Const_0xFIX_3_072711026	//T62, T60

		pmaddwd	mm5, Const_FIX_3_072711026x0	//T63, T61

		movq	qwTmp4_Z3_Odd, mm2	
			
		movq	mm4, qwZ4_even	
		paddd	mm6, mm3

		movq	mm3, qwScratch5
		paddd	mm5, mm1
		
		movq	qwTmp6_Z3_Even, mm6	
		movq	mm2, mm3

	//	    tmp5 = MULTIPLY(tmp5, FIX_2_053119869);		

		pmaddwd	mm3, Const_0xFIX_2_053119869	//T52, T50

		pmaddwd	mm2, Const_FIX_2_053119869x0	//T53, T51

		movq	qwTmp6_Z3_Odd, mm5
		
		movq	mm0, qwZ4_odd
		paddd	mm3, mm4

		movq	mm7, qwScratch7	
		paddd	mm2, mm0
		
		movq	qwTmp5_Z4_Even, mm3	
		movq	mm6, mm7

	//	    tmp7 = MULTIPLY(tmp7, FIX_1_501321110);

		pmaddwd	mm7, Const_0xFIX_1_501321110	//T72, T70

		pmaddwd	mm6, Const_FIX_1_501321110x0	//T73, T71

		movq	mm3, qwZ1

		movq	qwTmp5_Z4_Odd, mm2
		paddd	mm7, mm4

		movq	mm5, Const_FFFF
		movq	mm4, mm3

	//	    z1 = MULTIPLY(z1, - FIX_0_899976223);

		pmaddwd	mm3, Const_0xFIX_0_899976223	//z12, z10
 		paddd	mm6, mm0

		pmaddwd	mm4, Const_FIX_0_899976223x0	//z13, z11

		movq	mm2, qwTmp4_Z3_Odd
	//!!!!!! Negate the results
		pxor	mm3, mm5			//invert result

		paddd	mm3, Const_1			// 2's complement
		pxor	mm4, mm5			//invert result

		paddd	mm4, Const_1			// 2's complement
		paddd	mm7, mm3	//tmp7 + z1 + z4 EVEN

	//	    dataptr[DATASIZE*1] = (DCTELEM) DESCALE(tmp7 + z1 + z4,
	//					   CONST_BITS+PASS1_BITS);

		paddd	mm7, Const_16384	//rounding adj
		paddd	mm6, mm4	//tmp7 + z1 + z4 ODD

		paddd	mm6, Const_16384	//rounding adj
		psrad	mm7, 15				// descale it |  |R2|  |R0|
		
		movq	mm0, qwTmp4_Z3_Even
		psrad	mm6, 15				// descale it |  |R3|  |R1|

		paddd	mm0, mm3	//tmp4 + z1 + z3 EVEN
		movq	mm5, mm7

		movq	mm3, qwTemp0			//restore 
		punpckldq mm7, mm6			//|  |R1|  |R0|

		paddd	mm0, Const_16384	//rounding adj
		paddd	mm2, mm4	//tmp4 + z1 + z3 ODD

		movq	[edi][DATASIZE*0], mm3	//store 
		punpckhdq mm5, mm6			//|  |R3|  |R2|

	//	    dataptr[DATASIZE*7] = (DCTELEM) DESCALE(tmp4 + z1 + z3,
	//					   CONST_BITS+PASS1_BITS);

		paddd	mm2, Const_16384	//rounding adj
		psrad	mm0, 15				// descale it |  |R2|  |R0|
		
		movq	mm6, qwZ2
		psrad	mm2, 15				// descale it |  |R3|  |R1|

		movq	[edi][DATASIZE*1+8], mm5	//store
		movq	mm4, mm6

	//	    z2 = MULTIPLY(z2, - FIX_2_562915447);

		pmaddwd	mm6, Const_0xFIX_2_562915447	//z22, z20
		movq	mm5, mm0

		pmaddwd	mm4, Const_FIX_2_562915447x0	//z23, z21
		punpckldq mm0, mm2			//|  |R1|  |R0|

		movq	mm3, Const_FFFF
		punpckhdq mm5, mm2			//|  |R3|  |R2|

		movq	[edi][DATASIZE*1], mm7	//store
	//!!!!!! Negate the results
		pxor	mm6, mm3			//invert result

		movq	mm1, Const_1
		pxor	mm4, mm3			//invert result

		movq	mm7, qwTmp6_Z3_Even
		paddd	mm6, mm1			// 2's complement

		movq	mm2, qwTmp6_Z3_Odd
		paddd	mm4, mm1			// 2's complement

	//	    dataptr[DATASIZE*3] = (DCTELEM) DESCALE(tmp6 + z2 + z3,
	//					   CONST_BITS+PASS1_BITS);

		movq	[edi][DATASIZE*7], mm0	//store
		paddd	mm7, mm6	//tmp6 + z2 + z3 EVEN

		movq	mm1, Const_16384
		paddd	mm2, mm4	//tmp6 + z2 + z3 ODD

		movq	mm3, qwTemp2			//restore 
		paddd	mm7, mm1	//rounding adj

		movq	[edi][DATASIZE*7+8], mm5	//store
		paddd	mm2, mm1	//rounding adj

		movq	[edi][DATASIZE*2], mm3	//store 
		psrad	mm7, 15				// descale it |  |R2|  |R0|
		
 		movq	mm0, qwTemp4			//restore 
		psrad	mm2, 15				// descale it |  |R3|  |R1|

		movq	mm3, qwTmp5_Z4_Even
		movq	mm5, mm7

		movq	[edi][DATASIZE*4], mm0	//store 
		paddd	mm3, mm6	//tmp5 + z2 + z4 EVEN

		movq	mm6, qwTmp5_Z4_Odd
		punpckldq mm7, mm2			//|  |R1|  |R0|

		punpckhdq mm5, mm2			//|  |R3|  |R2|
		paddd	mm6, mm4	//tmp5 + z2 + z4 ODD

		movq	[edi][DATASIZE*3], mm7	//store
		paddd	mm3, mm1	//rounding adj

	//	    dataptr[DATASIZE*5] = (DCTELEM) DESCALE(tmp5 + z2 + z4,
	//					   CONST_BITS+PASS1_BITS);

		movq	mm0, qwTemp6			//restore 
		paddd	mm6, mm1	//rounding adj

		movq	[edi][DATASIZE*3+8], mm5	//store
		psrad	mm3, 15				// descale it |  |R2|  |R0|
		
		movq	[edi][DATASIZE*6], mm0	//store 
		psrad	mm6, 15				// descale it |  |R3|  |R1|

		movq	mm7, [edi][DATASIZE*0+16]
		movq	mm5, mm3

		paddw	mm7, [edi][DATASIZE*7+16]
		punpckldq mm3, mm6			//|  |R1|  |R0|

		movq	mm1, [edi][DATASIZE*1+16]
		punpckhdq mm5, mm6			//|  |R3|  |R2|

		paddw	mm1, [edi][DATASIZE*6+16]
		movq	mm4, mm7

	//******************************************************************************
	// This completes 4x8 dct locations.  Copy to do other 4x8.
	//******************************************************************************

		movq	mm6, [edi][DATASIZE*3+16]

		paddw	mm6, [edi][DATASIZE*4+16]

		movq	mm2, [edi][DATASIZE*2+16]
		psubw	mm4, mm6	//tmp13

		paddw	mm2, [edi][DATASIZE*5+16]
		paddw	mm7, mm6	//tmp10

		movq	[edi][DATASIZE*5], mm3	//store
		movq	mm6, mm1

 		movq	[edi][DATASIZE*5+8], mm5	//store
		paddw	mm1, mm2	//tmp11

		psubw	mm6, mm2	//tmp12
		movq	mm3, mm7	

	//    dataptr[DATASIZE*0] = (DCTELEM) DESCALE(tmp10 + tmp11, PASS1_BITS);
	//    dataptr[DATASIZE*4] = (DCTELEM) DESCALE(tmp10 - tmp11, PASS1_BITS);

		paddw	mm7, mm1	//tmp10 + tmp11	

		paddw	mm7, Const_2	// round  add 2 to each element
		psubw	mm3, mm1	//tmp10 - tmp11

		paddw	mm3, Const_2	// round  add 2 to each element
		psraw	mm7, 2			// descale it

	//		unpack word to dword sign extended
		movq	mm5, mm7
		punpcklwd mm7, mm7

		psrad	mm7, 16			// even results store in Temp0			
		punpckhwd mm5, mm5

		psrad	mm5, 16			// odd results store in array
		movq	mm1, mm6	//copy tmp12

		movq	qwTemp0, mm7	//store 
		psraw	mm3, 2			// descale it

		movq	[edi][DATASIZE*0+24], mm5
		movq	mm5, mm3

		punpcklwd mm3, mm3
		paddw	mm1, mm4	//tmp12 + tmp13

		psrad	mm3, 16			// even results store in Temp4
		movq	mm2, mm1	//copy
					
	//		z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);

		pmaddwd	mm1, Const_0xFIX_0_541196100	//| z12 | z10 |
		punpckhwd mm5, mm5

		pmaddwd	mm2, Const_FIX_0_541196100x0	//| z13 | z11 |
		movq	mm7, mm4

	//		dataptr[DATASIZE*2] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp13, FIX_0_765366865),
	//					   CONST_BITS+PASS1_BITS);

		pmaddwd	mm4, Const_FIX_0_765366865x0	//| r3 | r1 |
		psrad	mm5, 16			// odd results store in array

		pmaddwd	mm7, Const_0xFIX_0_765366865	//| r2 | r0 |
		movq	mm0, mm6

	//		dataptr[DATASIZE*6] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp12, - FIX_1_847759065),
	//					   CONST_BITS+PASS1_BITS);

		pmaddwd	mm6, Const_0xFIX_1_847759065	//| r2 | r0 |

		movq	qwTemp4, mm3	//store
		paddd	mm4, mm2

		paddd	mm4, Const_16384
		paddd	mm7, mm1						// add z1

		paddd	mm7, Const_16384
		psrad	mm4, 15				// descale it |  |R3|  |R1|

		movq	[edi][DATASIZE*4+24], mm5
		psrad	mm7, 15				// descale it |  |R2|  |R0|
		
		pmaddwd	mm0, Const_FIX_1_847759065x0	//| r3 | r1 |
		movq	mm5, mm7

	//!!!!!! Negate result
		movq	mm3, Const_1
		punpckldq mm7, mm4			//|  |R1|  |R0|

		pxor	mm6, Const_FFFF			//invert result
		punpckhdq mm5, mm4			//|  |R3|  |R2|

		movq	qwTemp2, mm7	//store
		paddd	mm6, mm3			// 2's complement

		pxor	mm0, Const_FFFF			//invert result
		paddd	mm6, mm1						// add z1

		movq	[edi][DATASIZE*2+24], mm5	//write out 2nd half in unused memory
		paddd	mm0, mm3			// 2's complement

		movq	mm3, Const_16384
		paddd	mm0, mm2

		movq	mm7, [edi][DATASIZE*0+16]
		paddd	mm6, mm3

		movq	mm4, [edi][DATASIZE*3+16]
		paddd	mm0, mm3

		psubw	mm7, [edi][DATASIZE*7+16]
		psrad	mm6, 15				// descale it |  |R2|  |R0|
		
		psubw	mm4, [edi][DATASIZE*4+16]
		psrad	mm0, 15				// descale it |  |R3|  |R1|

		movq	mm3, [edi][DATASIZE*2+16]
		movq	mm5, mm6

		psubw	mm3, [edi][DATASIZE*5+16]
		punpckldq mm6, mm0			//|  |R1|  |R0|

		punpckhdq mm5, mm0			//|  |R3|  |R2|
		movq	mm0, mm4

		movq	qwTemp6, mm6	//store
		movq	mm2, mm4

	//		tmp4 = dataptr[3] - dataptr[4];
	//		z1 = tmp4 + tmp7;

		movq	mm6, [edi][DATASIZE*1+16]
		paddw	mm0, mm7	//z1

		movq	[edi][DATASIZE*6+24], mm5	//write out 2nd half in unused memory
		movq	mm1, mm3
		
		psubw	mm6, [edi][DATASIZE*6+16]
		movq	mm5, mm3

		movq	qwZ1, mm0	//store
		paddw	mm5, mm7	//z4

		movq	qwScratch7, mm7
		paddw	mm1, mm6	//z2

		movq	qwScratch5, mm3
		paddw	mm2, mm6	//z3

		movq	qwZ2, mm1
		movq	mm3, mm2

	//	    z3 = MULTIPLY(z3, - FIX_1_961570560);
	//	    z5 = MULTIPLY(z3 + z4, FIX_1_175875602);
	//	    z4 = MULTIPLY(z4, - FIX_0_390180644);

		movq	qwScratch6, mm6
		movq	mm1, mm2

		pmaddwd	mm3, Const_0xFIX_1_961570560	//z32, z30
		movq	mm7, mm5

		movq	mm6, Const_FFFF
		paddw	mm2, mm5		//z3 + z4

		pmaddwd	mm1, Const_FIX_1_961570560x0	//z33, z31
		movq	mm0, mm2
		
		pmaddwd	mm7, Const_FIX_0_390180644x0	//z43, z41
	//!!!!!! Negate the results
		pxor	mm3, mm6			//invert result

		pmaddwd	mm5, Const_0xFIX_0_390180644	//z42, z40

		pmaddwd	mm2, Const_0xFIX_1_175875602	//z52, z50
 		pxor	mm1, mm6			//invert result

		pmaddwd	mm0, Const_FIX_1_175875602x0	//z53, z51
	//!!!!!! Negate the results
		pxor	mm7, mm6			//invert result

		paddd	mm3, Const_1			// 2's complement
		pxor	mm5, mm6			//invert result

	//	    z3 += z5;

		paddd	mm1, Const_1			// 2's complement
		paddd	mm3, mm2	//z3_even

		paddd	mm5, Const_1			// 2's complement
		paddd	mm1, mm0	//z3_odd

	//	    z4 += z5;

		paddd	mm7, Const_1			// 2's complement
		paddd	mm5, mm2

		paddd	mm7, mm0
		movq	mm2, mm4
		
	//	    tmp4 = MULTIPLY(tmp4, FIX_0_298631336);

		pmaddwd	mm4, Const_0xFIX_0_298631336	//T42, T40

		pmaddwd	mm2, Const_FIX_0_298631336x0	//T43, T41

		movq	qwZ4_even, mm5

		movq	qwZ4_odd, mm7
		paddd	mm4, mm3

		movq	mm6, qwScratch6
		paddd	mm2, mm1

		movq	qwTmp4_Z3_Even, mm4
		movq	mm5, mm6
			
	//	    tmp6 = MULTIPLY(tmp6, FIX_3_072711026);

		pmaddwd	mm6, Const_0xFIX_3_072711026	//T62, T60

		pmaddwd	mm5, Const_FIX_3_072711026x0	//T63, T61

		movq	qwTmp4_Z3_Odd, mm2	
			
		movq	mm4, qwZ4_even	
		paddd	mm6, mm3

		movq	mm3, qwScratch5
		paddd	mm5, mm1
		
		movq	qwTmp6_Z3_Even, mm6	
		movq	mm2, mm3

	//	    tmp5 = MULTIPLY(tmp5, FIX_2_053119869);		

		pmaddwd	mm3, Const_0xFIX_2_053119869	//T52, T50

		pmaddwd	mm2, Const_FIX_2_053119869x0	//T53, T51

		movq	qwTmp6_Z3_Odd, mm5
		
		movq	mm0, qwZ4_odd
		paddd	mm3, mm4

		movq	mm7, qwScratch7	
		paddd	mm2, mm0
		
		movq	qwTmp5_Z4_Even, mm3	
		movq	mm6, mm7

	//	    tmp7 = MULTIPLY(tmp7, FIX_1_501321110);

		pmaddwd	mm7, Const_0xFIX_1_501321110	//T72, T70

		pmaddwd	mm6, Const_FIX_1_501321110x0	//T73, T71

		movq	mm3, qwZ1

		movq	qwTmp5_Z4_Odd, mm2
		paddd	mm7, mm4

		movq	mm5, Const_FFFF
		movq	mm4, mm3

	//	    z1 = MULTIPLY(z1, - FIX_0_899976223);

		pmaddwd	mm3, Const_0xFIX_0_899976223	//z12, z10
 		paddd	mm6, mm0

		pmaddwd	mm4, Const_FIX_0_899976223x0	//z13, z11

		movq	mm2, qwTmp4_Z3_Odd
	//!!!!!! Negate the results
		pxor	mm3, mm5			//invert result

		paddd	mm3, Const_1			// 2's complement
		pxor	mm4, mm5			//invert result

		paddd	mm4, Const_1			// 2's complement
		paddd	mm7, mm3	//tmp7 + z1 + z4 EVEN

	//	    dataptr[DATASIZE*1] = (DCTELEM) DESCALE(tmp7 + z1 + z4,
	//					   CONST_BITS+PASS1_BITS);

		paddd	mm7, Const_16384	//rounding adj
		paddd	mm6, mm4	//tmp7 + z1 + z4 ODD

		paddd	mm6, Const_16384	//rounding adj
		psrad	mm7, 15				// descale it |  |R2|  |R0|
		
		movq	mm0, qwTmp4_Z3_Even
		psrad	mm6, 15				// descale it |  |R3|  |R1|

		paddd	mm0, mm3	//tmp4 + z1 + z3 EVEN
		movq	mm5, mm7

		movq	mm3, qwTemp0			//restore 
		punpckldq mm7, mm6			//|  |R1|  |R0|

		paddd	mm0, Const_16384	//rounding adj
		paddd	mm2, mm4	//tmp4 + z1 + z3 ODD

		movq	[edi][DATASIZE*0+16], mm3	//store 
		punpckhdq mm5, mm6			//|  |R3|  |R2|

	//	    dataptr[DATASIZE*7] = (DCTELEM) DESCALE(tmp4 + z1 + z3,
	//					   CONST_BITS+PASS1_BITS);

		paddd	mm2, Const_16384	//rounding adj
		psrad	mm0, 15				// descale it |  |R2|  |R0|
		
		movq	mm6, qwZ2
		psrad	mm2, 15				// descale it |  |R3|  |R1|

		movq	[edi][DATASIZE*1+24], mm5	//store
		movq	mm4, mm6

	//	    z2 = MULTIPLY(z2, - FIX_2_562915447);

		pmaddwd	mm6, Const_0xFIX_2_562915447	//z22, z20
		movq	mm5, mm0

		pmaddwd	mm4, Const_FIX_2_562915447x0	//z23, z21
		punpckldq mm0, mm2			//|  |R1|  |R0|

		movq	mm3, Const_FFFF
		punpckhdq mm5, mm2			//|  |R3|  |R2|

		movq	[edi][DATASIZE*1+16], mm7	//store
	//!!!!!! Negate the results
		pxor	mm6, mm3			//invert result

		movq	mm1, Const_1
		pxor	mm4, mm3			//invert result

		movq	mm7, qwTmp6_Z3_Even
		paddd	mm6, mm1			// 2's complement

		movq	mm2, qwTmp6_Z3_Odd
		paddd	mm4, mm1			// 2's complement

	//	    dataptr[DATASIZE*3] = (DCTELEM) DESCALE(tmp6 + z2 + z3,
	//					   CONST_BITS+PASS1_BITS);

		movq	[edi][DATASIZE*7+16], mm0	//store
		paddd	mm7, mm6	//tmp6 + z2 + z3 EVEN

		movq	mm1, Const_16384
		paddd	mm2, mm4	//tmp6 + z2 + z3 ODD

		movq	mm3, qwTemp2			//restore 
		paddd	mm7, mm1	//rounding adj

		movq	[edi][DATASIZE*7+24], mm5	//store
		paddd	mm2, mm1	//rounding adj

		movq	[edi][DATASIZE*2+16], mm3	//store 
		psrad	mm7, 15				// descale it |  |R2|  |R0|
		
		movq	mm3, qwTmp5_Z4_Even
		psrad	mm2, 15				// descale it |  |R3|  |R1|

		movq	mm5, mm7
		paddd	mm3, mm6	//tmp5 + z2 + z4 EVEN

		movq	mm6, qwTmp5_Z4_Odd
		punpckldq mm7, mm2			//|  |R1|  |R0|

		punpckhdq mm5, mm2			//|  |R3|  |R2|
		paddd	mm6, mm4	//tmp5 + z2 + z4 ODD

		movq	[edi][DATASIZE*3+16], mm7	//store
		paddd	mm3, mm1	//rounding adj

	//	    dataptr[DATASIZE*5] = (DCTELEM) DESCALE(tmp5 + z2 + z4,
	//					   CONST_BITS+PASS1_BITS);

 		movq	mm7, qwTemp4			//restore 
		paddd	mm6, mm1	//rounding adj

		movq	[edi][DATASIZE*3+24], mm5	//store
		psrad	mm3, 15				// descale it |  |R2|  |R0|
		
		movq	[edi][DATASIZE*4+16], mm7	//store 
		psrad	mm6, 15				// descale it |  |R3|  |R1|

		movq	mm7, qwTemp6			//restore 
		movq	mm5, mm3

		punpckldq mm3, mm6			//|  |R1|  |R0|

		movq	[edi][DATASIZE*6+16], mm7	//store 
		punpckhdq mm5, mm6			//|  |R3|  |R2|

		movq	[edi][DATASIZE*5+16], mm3	//store

 		movq	[edi][DATASIZE*5+24], mm5	//store

	//******************************************************************************
	// This completes all 8x8 dct locations for the column case.
	//******************************************************************************

		emms
	}
}

#endif /* X86 */

#endif /* DCT_ISLOW_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\mifst.c ===
/***************************************************************************
*
*                INTEL Corporation Proprietary Information  
*
*      
*                  Copyright (c) 1996 Intel Corporation.
*                         All rights reserved.
*
***************************************************************************
*/
/*
 * jidctfst.c
 *
 * Copyright (C) 1994-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains a fast, not so accurate integer implementation of the
 * inverse DCT (Discrete Cosine Transform).  In the IJG code, this routine
 * must also perform dequantization of the input coefficients.
 *
 * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT
 * on each row (or vice versa, but it's more convenient to emit a row at
 * a time).  Direct algorithms are also available, but they are much more
 * complex and seem not to be any faster when reduced to code.
 *
 * This implementation is based on Arai, Agui, and Nakajima's algorithm for
 * scaled DCT.  Their original paper (Trans. IEICE E-71(11):1095) is in
 * Japanese, but the algorithm is described in the Pennebaker & Mitchell
 * JPEG textbook (see REFERENCES section in file README).  The following code
 * is based directly on figure 4-8 in P&M.
 * While an 8-point DCT cannot be done in less than 11 multiplies, it is
 * possible to arrange the computation so that many of the multiplies are
 * simple scalings of the final outputs.  These multiplies can then be
 * folded into the multiplications or divisions by the JPEG quantization
 * table entries.  The AA&N method leaves only 5 multiplies and 29 adds
 * to be done in the DCT itself.
 * The primary disadvantage of this method is that with fixed-point math,
 * accuracy is lost due to imprecise representation of the scaled
 * quantization values.  The smaller the quantization table entry, the less
 * precise the scaled value, so this implementation does worse with high-
 * quality-setting files than with low-quality ones.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */

#ifdef DCT_IFAST_SUPPORTED

#ifndef _X86_

GLOBAL(void)
midct8x8aan (JCOEFPTR coef_block, short * wsptr, short * quantptr,
		 JSAMPARRAY output_buf, JDIMENSION output_col, JSAMPLE *range_limit )
{
}

#else

/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif


/* Scaling decisions are generally the same as in the LL&M algorithm;
 * see jidctint.c for more details.  However, we choose to descale
 * (right shift) multiplication products as soon as they are formed,
 * rather than carrying additional fractional bits into subsequent additions.
 * This compromises accuracy slightly, but it lets us save a few shifts.
 * More importantly, 16-bit arithmetic is then adequate (for 8-bit samples)
 * everywhere except in the multiplications proper; this saves a good deal
 * of work on 16-bit-int machines.
 *
 * The dequantized coefficients are not integers because the AA&N scaling
 * factors have been incorporated.  We represent them scaled up by PASS1_BITS,
 * so that the first and second IDCT rounds have the same input scaling.
 * For 8-bit JSAMPLEs, we choose IFAST_SCALE_BITS = PASS1_BITS so as to
 * avoid a descaling shift; this compromises accuracy rather drastically
 * for small quantization table entries, but it saves a lot of shifts.
 * For 12-bit JSAMPLEs, there's no hope of using 16x16 multiplies anyway,
 * so we use a much larger scaling factor to preserve accuracy.
 *
 * A final compromise is to represent the multiplicative constants to only
 * 8 fractional bits, rather than 13.  This saves some shifting work on some
 * machines, and may also reduce the cost of multiplication (since there
 * are fewer one-bits in the constants).
 */

#if BITS_IN_JSAMPLE == 8
#define CONST_BITS  8
#define PASS1_BITS  2
#else
#define CONST_BITS  8
#define PASS1_BITS  1		/* lose a little precision to avoid overflow */
#endif

/* Some C compilers fail to reduce "FIX(constant)" at compile time, thus
 * causing a lot of useless floating-point operations at run time.
 * To get around this we use the following pre-calculated constants.
 * If you change CONST_BITS you may want to add appropriate values.
 * (With a reasonable C compiler, you can just rely on the FIX() macro...)
 */ 

#if CONST_BITS == 8
#define FIX_1_082392200  ((INT32)  277)		/* FIX(1.082392200) */
#define FIX_1_414213562  ((INT32)  362)		/* FIX(1.414213562) */
#define FIX_1_847759065  ((INT32)  473)		/* FIX(1.847759065) */
#define FIX_2_613125930  ((INT32)  669)		/* FIX(2.613125930) */
#else
#define FIX_1_082392200  FIX(1.082392200)
#define FIX_1_414213562  FIX(1.414213562)
#define FIX_1_847759065  FIX(1.847759065)
#define FIX_2_613125930  FIX(2.613125930)
#endif


/* We can gain a little more speed, with a further compromise in accuracy,
 * by omitting the addition in a descaling shift.  This yields an incorrectly
 * rounded result half the time...
 */

#ifndef USE_ACCURATE_ROUNDING
#undef DESCALE
#define DESCALE(x,n)  RIGHT_SHIFT(x, n)
#endif

//#define DESCALE(x,n)  RIGHT_SHIFT((x) + (ONE << ((n)-1)), n)
/* Multiply a DCTELEM variable by an INT32 constant, and immediately
 * descale to yield a DCTELEM result.
 */

//#define MULTIPLY(var,const)  ((DCTELEM) DESCALE((var) * (const), CONST_BITS))
#define MULTIPLY(var,const)  ((DCTELEM) ((var) * (const)))


/* Dequantize a coefficient by multiplying it by the multiplier-table
 * entry; produce a DCTELEM result.  For 8-bit data a 16x16->16
 * multiplication will do.  For 12-bit data, the multiplier table is
 * declared INT32, so a 32-bit multiply will be used.
 */

#if BITS_IN_JSAMPLE == 8
//#define DEQUANTIZE(coef,quantval)  (((IFAST_MULT_TYPE) (coef)) * (quantval))
#define DEQUANTIZE(coef,quantval)  (((coef)) * (quantval))
#else
#define DEQUANTIZE(coef,quantval)  \
	DESCALE((coef)*(quantval), IFAST_SCALE_BITS-PASS1_BITS)
#endif

 
/* Like DESCALE, but applies to a DCTELEM and produces an int.
 * We assume that int right shift is unsigned if INT32 right shift is.
 */

#ifdef RIGHT_SHIFT_IS_UNSIGNED
#define ISHIFT_TEMPS	DCTELEM ishift_temp;
#if BITS_IN_JSAMPLE == 8
#define DCTELEMBITS  16		/* DCTELEM may be 16 or 32 bits */
#else
#define DCTELEMBITS  32		/* DCTELEM must be 32 bits */
#endif
#define IRIGHT_SHIFT(x,shft)  \
    ((ishift_temp = (x)) < 0 ? \
     (ishift_temp >> (shft)) | ((~((DCTELEM) 0)) << (DCTELEMBITS-(shft))) : \
     (ishift_temp >> (shft)))
#else
#define ISHIFT_TEMPS
#define IRIGHT_SHIFT(x,shft)	((x) >> (shft))
#endif

#ifdef USE_ACCURATE_ROUNDING
#define IDESCALE(x,n)  ((int) IRIGHT_SHIFT((x) + (1 << ((n)-1)), n))
#else
#define IDESCALE(x,n)  ((int) IRIGHT_SHIFT(x, n))
#endif

static const __int64  x5a825a825a825a82 = 0x0000016a0000016a ;
static const __int64  x539f539f539f539f = 0x0000fd630000fd63 ; 
static const __int64  x4546454645464546 = 0x0000011500000115 ; 
static const __int64  x61f861f861f861f8 = 0x000001d9000001d9 ; 
static const __int64  const_mask  = 0x03ff03ff03ff03ff ;
static const __int64  const_zero  = 0x0000000000000000 ;


 
/*
 * Perform dequantization and inverse DCT on one block of coefficients.
 */

GLOBAL(void)
midct8x8aan (JCOEFPTR coef_block, short * wsptr, short * quantptr,
		 JSAMPARRAY output_buf, JDIMENSION output_col, JSAMPLE *range_limit )
{
  __int64 scratch3, scratch5, scratch7 ;

  // do the 2-Dal idct and store the corresponding results
  // from the range_limit array



__asm {

mov ebx, coef_block   ; source coeff
mov	esi, wsptr	  ; temp results
mov edi, quantptr	  ; quant factors

movq mm0,  [ebx+8*12]	; V12
pmullw mm0,  [edi+8*12]
movq mm1,  [ebx+8*4]	; V4
pmullw mm1,  [edi+8*4]
movq mm3,  [ebx+8*0]	; V0
pmullw mm3,  [edi+8*0]

movq mm5,  [ebx+8*8]	; V8
movq mm2, mm1						; duplicate V4

pmullw mm5,  [edi+8*8]
psubw mm1, mm0						; V16 (s1)

movq 	mm7,  x5a825a825a825a82	; 23170 ->V18 (s3)
;***************************************************PackMulW
movq		mm6, mm1

punpcklwd	mm1,  const_zero
paddw mm2, mm0						; V17

pmaddwd		mm1, mm7
movq mm0, mm2						; duplicate V17

punpckhwd	mm6,  const_zero
movq mm4, mm3						; duplicate V0

pmaddwd		mm6, mm7
paddw mm3, mm5						; V19

psrad		mm1, 8
psubw mm4, mm5						; V20 ;mm5 free

psrad		mm6, 8				; mm6 = (s1)

packssdw	mm1, mm6
;**********************************************************
movq mm6, mm3						; duplicate t74=t81

psubw mm1, mm0						; V21 ; mm0 free
paddw mm3, mm2						; V22

movq mm5, mm1						; duplicate V21
paddw mm1, mm4						; V23

movq  [esi+8*4], mm3		; V22
psubw mm4, mm5						; V24; mm5 free

movq  [esi+8*12], mm1		; V23
psubw mm6, mm2						; V25; mm2 free

movq  [esi+8*0], mm4		; V24

; keep mm6 alive all along the next block
movq mm7,  [ebx+8*10]	; V10

pmullw mm7,  [edi+8*10]

movq mm0,  [ebx+8*6]	; V6

pmullw mm0,  [edi+8*6]
movq mm3, mm7						; duplicate V10

movq mm5,  [ebx+8*2]	; V2

pmullw mm5,  [edi+8*2]
psubw mm7, mm0						; V26 (s1/7)

movq mm4,  [ebx+8*14]	; V14

pmullw mm4,  [edi+8*14]
paddw mm3, mm0						; V29 ; free mm0

movq mm1,  x539f539f539f539f	;23170 ->V18 (scratch3)
 ;mm0 = s5, 
;***************************************************PackMulW
movq		 scratch7, mm7
movq		mm2, mm7

punpcklwd	mm7,  const_zero
movq		mm0, mm5				; duplicate V2

pmaddwd		mm7, mm1
paddw		mm5, mm4				; V27

punpckhwd	mm2,  const_zero
psubw 		mm0, mm4		;(s1) for next	; V28 ; free mm4

pmaddwd		mm2, mm1
movq		mm4, mm0

punpcklwd	mm0,  const_zero
psrad		mm7, 8

psrad		mm2, 8			; mm2 = scratch1
movq		mm1, mm4			; duplicate V28

punpckhwd	mm4,  const_zero
packssdw	mm7, mm2

movq		mm2,  x4546454645464546	; 23170 ->V18
;**********************************************************

;***************************************************PackMulW
pmaddwd		mm0, mm2

pmaddwd		mm4, mm2
psrad		mm0, 8

movq	mm2,  x61f861f861f861f8	; 23170 ->V18
psrad		mm4, 8

packssdw	mm0, mm4
movq		mm4, mm1

movq mm1,  scratch7
;**********************************************************

movq	 scratch5, mm0
paddw mm1, mm4						; V32 ; free mm4

;***************************************************PackMulW
movq		mm0, mm1

punpcklwd	mm1,  const_zero
movq		mm4, mm5						; duplicate t90=t93

pmaddwd		mm1, mm2
paddw		mm5, mm3						; V31

punpckhwd	mm0,  const_zero
psubw		mm4, mm3						; V30 ; free mm3

movq 	mm3,  x5a825a825a825a82	; 23170 ->V18
pmaddwd		mm0, mm2

psrad		mm1, 8
movq		mm2, mm4		; make a copy of mm4

punpcklwd	mm4,  const_zero
psrad		mm0, 8

pmaddwd		mm4, mm3
packssdw	mm1, mm0
;**********************************************************

;***************************************************PackMulW
punpckhwd	mm2,  const_zero

movq		mm0,  scratch5
pmaddwd		mm2, mm3

psubw		mm0, mm1						; V38
paddw		mm1, mm7						; V37 ; free mm7

movq		mm7,  [esi+8*4]		; V22
psrad		mm4, 8

psrad		mm2, 8
movq mm3, mm6                       ; duplicate V25

packssdw	mm4, mm2
psubw mm1, mm5						; V39 (mm5 still needed for next block)
;**********************************************************

movq mm2,  [esi+8*12]     ; V23
psubw mm4, mm1						; V40

paddw mm0, mm4						; V41; free mm0

psubw mm6, mm0						; tm6
paddw mm3, mm0						; tm8; free mm1

movq mm0, mm1		; line added by Kumar
movq mm1, mm7						; duplicate V22

movq  [esi+8*8], mm3     ; tm8; free mm3
paddw mm7, mm5						; tm0

movq  [esi+8*6], mm6		; tm6; free mm6
psubw mm1, mm5						; tm14; free mm5

movq mm6,  [esi+8*0]		; V24
movq mm3, mm2						; duplicate t117=t125

movq  [esi+8*0], mm7      ; tm0; free mm7
paddw mm2, mm0						; tm2

movq  [esi+8*14], mm1		; tm14; free mm1
psubw mm3, mm0						; tm12; free mm0

movq  [esi+8*2], mm2		; tm2; free mm2
movq mm0, mm6						; duplicate t119=t123

movq  [esi+8*12], mm3      ; tm12; free mm3
paddw mm6, mm4						; tm4

movq mm1,  [ebx+8*5]	; V5
psubw mm0, mm4						; tm10; free mm4

pmullw mm1,  [edi+8*5]
movq  [esi+8*4], mm6		; tm4; free mm6
movq  [esi+8*10], mm0     ; tm10; free mm0

; column 1: even part
; use V5, V13, V1, V9 to produce V56..V59

movq mm7,  [ebx+8*13]	; V13
movq mm2, mm1						; duplicate t128=t130

pmullw mm7,  [edi+8*13]
movq mm3,  [ebx+8*1]	; V1
pmullw mm3,  [edi+8*1]

movq mm5,  [ebx+8*9]	; V9
psubw mm1, mm7						; V50

pmullw mm5,  [edi+8*9]
paddw mm2, mm7						; V51

movq mm7,  x5a825a825a825a82	; 23170 ->V18
;***************************************************PackMulW
movq		mm4, mm1

punpcklwd	mm1,  const_zero
movq		mm6, mm2						; duplicate V51

pmaddwd		mm1, mm7

punpckhwd	mm4,  const_zero

movq mm0,  [ebx+8*11]	; V11
pmaddwd		mm4, mm7

pmullw mm0,  [edi+8*11]
psrad		mm1, 8

psrad		mm4, 8

packssdw	mm1, mm4
movq		mm4, mm3						; duplicate V1
;**********************************************************

paddw		mm3, mm5						; V53
psubw mm4, mm5						; V54 ;mm5 free

movq mm7, mm3						; duplicate V53
psubw mm1, mm6						; V55 ; mm6 free

movq mm6,  [ebx+8*7]	; V7
paddw mm3, mm2						; V56

movq mm5, mm4						; duplicate t140=t142
paddw mm4, mm1						; V57

movq  [esi+8*5], mm3		; V56
psubw mm5, mm1						; V58; mm1 free

pmullw mm6,  [edi+8*7]
psubw mm7, mm2						; V59; mm2 free

movq  [esi+8*13], mm4		; V57
movq mm3, mm0						; duplicate V11

; keep mm7 alive all along the next block
movq  [esi+8*9], mm5		; V58
paddw mm0, mm6						; V63

movq mm4,  [ebx+8*15]	; V15
psubw mm3, mm6						; V60 ; free mm6

pmullw mm4,  [edi+8*15]
; note that V15 computation has a correction step:
; this is a 'magic' constant that rebiases the results to be closer to the expected result
; this magic constant can be refined to reduce the error even more
; by doing the correction step in a later stage when the number is actually multiplied by 16
movq mm1, mm3						; duplicate V60

movq mm5,  [ebx+8*3]	; V3
movq		mm2, mm1

pmullw mm5,  [edi+8*3]

movq  scratch7, mm7
movq mm6, mm5						; duplicate V3

movq mm7,  x539f539f539f539f	; 23170 ->V18
paddw mm5, mm4						; V61

;***************************************************PackMulW
punpcklwd	mm1,  const_zero
psubw mm6, mm4						; V62 ; free mm4

pmaddwd		mm1, mm7
movq mm4, mm5						; duplicate V61

punpckhwd	mm2,  const_zero
paddw mm5, mm0						; V65 -> result

pmaddwd		mm2, mm7
psubw mm4, mm0						; V64 ; free mm0

movq  scratch3, mm3
psrad		mm1, 8

movq mm3,  x5a825a825a825a82	; 23170 ->V18
psrad		mm2, 8

packssdw	mm1, mm2
movq		mm2, mm4
;**********************************************************

;***************************************************PackMulW
punpcklwd	mm4,  const_zero

pmaddwd		mm4, mm3

punpckhwd	mm2,  const_zero

pmaddwd		mm2, mm3
psrad		mm4, 8

movq mm3,  scratch3

movq mm0,  x61f861f861f861f8	; 23170 ->V18
paddw		mm3, mm6						; V66

psrad		mm2, 8
movq		mm7, mm3

packssdw	mm4, mm2
movq mm2, mm5					; duplicate V65
;**********************************************************

;***************************************************PackMulW
punpcklwd	mm3,  const_zero

pmaddwd		mm3, mm0

punpckhwd	mm7,  const_zero

pmaddwd		mm7, mm0
movq		mm0, mm6

psrad		mm3, 8

punpcklwd	mm6,  const_zero

psrad		mm7, 8

packssdw	mm3, mm7
;**********************************************************

movq mm7,  x4546454645464546	; 23170 ->V18

;***************************************************PackMulW
punpckhwd	mm0,  const_zero
pmaddwd		mm6, mm7

pmaddwd		mm0, mm7
psrad		mm6, 8

psrad		mm0, 8

packssdw	mm6, mm0
;**********************************************************

movq mm0,  [esi+8*5]		; V56
psubw mm6, mm3						; V72

paddw mm3, mm1						; V71 ; free mm1

psubw mm3, mm2						; V73 ; free mm2
movq mm1, mm0						; duplicate t177=t188

psubw mm4, mm3						; V74
paddw mm0, mm5						; tm1

movq mm2,  [esi+8*13]     ; V57
paddw mm6, mm4						; V75

;location 
;  5 - V56
; 13 - V57
;  9 - V58
;  X - V59, mm7
;  X - V65, mm5
;  X - V73, mm6
;  X - V74, mm4
;  X - V75, mm3                              
; free mm0, mm1 & mm2                        

movq mm7,  scratch7      ; tm1; free mm0
psubw mm1, mm5						; tm15; free mm5

;save the store as used directly in the transpose
movq  [esi+8*1], mm0      ; tm1; free mm0
movq mm5, mm7                       ; duplicate t182=t184

movq mm0,  [esi+8*9]		; V58
psubw mm7, mm6						; tm7

paddw mm5, mm6						; tm9; free mm6
movq mm6, mm3

movq  [esi+8*7], mm7		; tm7; free mm7
movq mm3, mm2						; duplicate V57

psubw mm3, mm6						; tm13
paddw mm2, mm6						; tm3 ; free mm6

movq  [esi+8*3], mm2		; tm3; free mm2
movq mm6, mm0						; duplicate V58

paddw mm0, mm4						; tm5
psubw mm6, mm4						; tm11; free mm4

movq  [esi+8*5], mm0		; tm5; free mm0
movq		mm0, mm5			; copy w4---0,1,3,5,6


; transpose the bottom right quadrant(4X4) of the matrix
;  ---------       ---------
; | M1 | M2 |     | M1'| M3'|
;  ---------  -->  ---------
; | M3 | M4 |     | M2'| M4'|
;  ---------       ---------

punpcklwd	mm5, mm6			;

punpckhwd	mm0, mm6			;---0,1,3,5,6 
movq	mm6,  [esi+8*0]  ;get w0 of top left quadrant

movq		mm2, mm3			;---0,1,2,3,5,6
punpcklwd	mm3, mm1			;

movq	mm7,  [esi+8*2]  ;get w1 of top left quadrant
punpckhwd	mm2, mm1			;---0,2,3,5,6,7

movq		mm4, mm5			;---0,2,3,4,5,6,7
punpckldq	mm5, mm3			; transposed w4

movq	 [esi+8*9], mm5  ; store w4
punpckhdq	mm4, mm3			; transposed w5---0,2,4,6,7

movq		mm3, mm0			;---0,2,3,4,6,7
punpckldq	mm0, mm2			; transposed w6

movq	 [esi+8*11], mm4  ; store w5
punpckhdq	mm3, mm2			; transposed w7---0,3,6,7

movq	 [esi+8*13], mm0  ; store w6---3,5,6,7	
movq	mm5, mm6				; copy w0

movq	 [esi+8*15], mm3  ; store w7---5,6,7
punpcklwd	mm6, mm7

; transpose the top left quadrant(4X4) of the matrix

punpckhwd	mm5, mm7			;---5,6,7
movq	mm7,  [esi+8*4]  ; get w2 of TL quadrant

movq	mm4,  [esi+8*6]  ; get w3 of TL quadrant
movq	mm3, mm7				; copy w2---3,4,5,6,7

movq		mm2, mm6
punpcklwd	mm7, mm4			;---2,3,4,5,6,7

punpckhwd	mm3, mm4			;---2,3,4,5,6,7
movq		mm4, mm5			;	

movq		mm1, mm5
punpckldq	mm6, mm7			;---1,2,3,4,5,6,7

movq	 [esi+8*0], mm6	; store w0 of TL quadrant
punpckhdq	mm2, mm7			;---1,2,3,4,5,6,7

movq	 [esi+8*2], mm2	; store w1 of TL quadrant
punpckldq	mm5, mm3			;---1,2,3,4,5,6,7

movq	 [esi+8*4], mm5	; store w2 of TL quadrant
punpckhdq	mm1, mm3			;---1,2,3,4,5,6,7

movq	 [esi+8*6], mm1	; store w3 of TL quadrant


; transpose the top right quadrant(4X4) of the matrix

movq	mm0,  [esi+8*1]	;---0

movq	mm1,  [esi+8*3]	;---0,1,2
movq	mm2, mm0

movq	mm3,  [esi+8*5]
punpcklwd	mm0, mm1				;---0,1,2,3

punpckhwd	mm2, mm1
movq	mm1,  [esi+8*7]	;---0,1,2,3

movq	mm4, mm3
punpcklwd	mm3, mm1				;---0,1,2,3,4

punpckhwd	mm4, mm1				;---0,1,2,3,4
movq	mm1, mm0

movq	mm5, mm2
punpckldq	mm0, mm3				;---0,1,2,3,4,5

punpckhdq	mm1, mm3				;---0,1,2,3,4,5
movq		mm3,  [esi+8*8]

movq		 [esi+8*8], mm0
punpckldq	mm2, mm4				;---1,2,3,4,5

punpckhdq	mm5, mm4				;---1,2,3,4,5
movq		mm4,  [esi+8*10]

; transpose the bottom left quadrant(4X4) of the matrix
; Also store w1,w2,w3 of top right quadrant into
; w5,w6,w7 of bottom left quadrant. Storing w0 of TR in w4
; of BL is already done.

movq	 [esi+8*10], mm1
movq	mm1, mm3					;---1,2,3,4,5

movq	mm0,  [esi+8*12]
punpcklwd	mm3, mm4				;---0,1,2,3,4,5

punpckhwd	mm1, mm4				;---0,1,2,3,4,5
movq	mm4,  [esi+8*14]

movq	 [esi+8*12], mm2
movq	mm2, mm0

movq	 [esi+8*14], mm5
punpcklwd	mm0, mm4				;---0,1,2,3,4

punpckhwd	mm2, mm4				;---0,1,2,3,4
movq	mm4, mm3

movq	mm5, mm1
punpckldq	mm3, mm0				;---0,1,2,3,4,5

movq	 [esi+8*1], mm3
punpckhdq	mm4, mm0				;---1,2,4,5

movq	 [esi+8*3], mm4
punpckldq	mm1, mm2				;---1,2,5

movq	 [esi+8*5], mm1
punpckhdq	mm5, mm2				;---5

movq	 [esi+8*7], mm5

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;   1D DCT of the rows    ;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


mov	esi, wsptr  ; source

; column 0: even part
; use V4, V12, V0, V8 to produce V22..V25
movq mm0,  [esi+8*12]	; V12

movq mm1,  [esi+8*4]	; V4

movq mm3,  [esi+8*0]	; V0
movq mm2, mm1						; duplicate V4

movq mm5,  [esi+8*8]	; V8
psubw mm1, mm0						; V16

movq mm6,  x5a825a825a825a82	; 23170 ->V18
;***************************************************PackMulW
movq		mm4, mm1

punpcklwd	mm1,  const_zero
paddw mm2, mm0						; V17

pmaddwd		mm1, mm6
movq mm0, mm2						; duplicate V17

punpckhwd	mm4,  const_zero

pmaddwd		mm4, mm6
psrad		mm1, 8

psrad		mm4, 8

packssdw	mm1, mm4
movq		mm4, mm3						; duplicate V0
;**********************************************************

paddw mm3, mm5						; V19
psubw mm4, mm5						; V20 ;mm5 free

movq mm6, mm3						; duplicate t74=t81
psubw mm1, mm0						; V21 ; mm0 free

paddw mm3, mm2						; V22
movq mm5, mm1						; duplicate V21

paddw mm1, mm4						; V23

movq  [esi+8*4], mm3		; V22
psubw mm4, mm5						; V24; mm5 free

movq  [esi+8*12], mm1		; V23
psubw mm6, mm2						; V25; mm2 free

movq  [esi+8*0], mm4		; V24
; keep mm6 alive all along the next block
; column 0: odd part
; use V2, V6, V10, V14 to produce V31, V39, V40, V41
movq mm7,  [esi+8*10]	; V10

movq mm0,  [esi+8*6]	; V6
movq mm3, mm7						; duplicate V10

movq mm5,  [esi+8*2]	; V2
psubw mm7, mm0						; V26

movq mm4,  [esi+8*14]	; V14
paddw mm3, mm0						; V29 ; free mm0

movq mm2,  x539f539f539f539f	; 23170 ->V18
movq mm1, mm7						; duplicate V26

;***************************************************PackMulW
movq		 scratch5, mm6	; store mm6
movq		mm0, mm7

punpcklwd	mm7,  const_zero

pmaddwd		mm7, mm2

punpckhwd	mm0,  const_zero

pmaddwd		mm0, mm2
psrad		mm7, 8

movq mm6,  x4546454645464546	; 23170 ->V18
psrad		mm0, 8

packssdw	mm7, mm0
movq		mm0, mm5				; duplicate V2
;**********************************************************

paddw mm5, mm4						; V27
psubw mm0, mm4						; V28 ; free mm4

movq mm2, mm0						; duplicate V28
;***************************************************PackMulW
movq		mm4, mm0

punpcklwd	mm0,  const_zero

pmaddwd		mm0, mm6

punpckhwd	mm4,  const_zero

pmaddwd		mm4, mm6
paddw mm1, mm2						; V32 ; free mm2

movq mm2,  x61f861f861f861f8	; 23170 ->V18
psrad		mm0, 8

psrad		mm4, 8
movq		mm6, mm1

packssdw	mm0, mm4
movq		mm4, mm5			; duplicate t90=t93
;**********************************************************

;***************************************************PackMulW
punpcklwd	mm1,  const_zero
paddw		mm5, mm3				; V31

pmaddwd		mm1, mm2
psubw		mm4, mm3				; V30 ; free mm3

punpckhwd	mm6,  const_zero

pmaddwd		mm6, mm2
psrad		mm1, 8

psrad		mm6, 8

packssdw	mm1, mm6
;**********************************************************

psubw mm0, mm1						; V38
paddw mm1, mm7						; V37 ; free mm7

movq		mm7,  x5a825a825a825a82	; 23170 ->V18
;***************************************************PackMulW
movq		mm3, mm4

punpcklwd	mm4,  const_zero
psubw		mm1, mm5				; V39 (mm5 still needed for next block)

pmaddwd		mm4, mm7

punpckhwd	mm3,  const_zero

movq		mm6,  scratch5
pmaddwd		mm3, mm7

movq mm2,  [esi+8*12]     ; V23
psrad		mm4, 8

movq mm7,  [esi+8*4]		; V22
psrad		mm3, 8

packssdw	mm4, mm3
movq		mm3, mm6                       ; duplicate V25
;**********************************************************						  

psubw mm4, mm1						; V40

paddw mm0, mm4						; V41; free mm0

; column 0: output butterfly

psubw mm6, mm0						; tm6
paddw mm3, mm0						; tm8; free mm1

movq mm0, mm1		; line added by Kumar
movq mm1, mm7						; duplicate V22

movq  [esi+8*8], mm3     ; tm8; free mm3
paddw mm7, mm5						; tm0

movq  [esi+8*6], mm6		; tm6; free mm6
psubw mm1, mm5						; tm14; free mm5

movq mm6,  [esi+8*0]		; V24
movq mm3, mm2						; duplicate t117=t125

movq  [esi+8*0], mm7      ; tm0; free mm7
paddw mm2, mm0						; tm2

movq  [esi+8*14], mm1		; tm14; free mm1
psubw mm3, mm0						; tm12; free mm0

movq  [esi+8*2], mm2		; tm2; free mm2
movq mm0, mm6						; duplicate t119=t123

movq  [esi+8*12], mm3      ; tm12; free mm3
paddw mm6, mm4						; tm4

movq mm1,  [esi+8*5]	; V5
psubw mm0, mm4						; tm10; free mm4

movq  [esi+8*4], mm6		; tm4; free mm6

movq  [esi+8*10], mm0     ; tm10; free mm0

; column 1: even part
; use V5, V13, V1, V9 to produce V56..V59

movq mm7,  [esi+8*13]	; V13
movq mm2, mm1						; duplicate t128=t130

movq mm3,  [esi+8*1]	; V1
psubw mm1, mm7						; V50

movq mm5,  [esi+8*9]	; V9
paddw mm2, mm7						; V51

movq mm4,  x5a825a825a825a82	; 23170 ->V18
;***************************************************PackMulW
movq		mm6, mm1

punpcklwd	mm1,  const_zero

pmaddwd		mm1, mm4

punpckhwd	mm6,  const_zero

pmaddwd		mm6, mm4
movq		mm4, mm3				; duplicate V1

paddw mm3, mm5						; V53
psrad		mm1, 8

psubw mm4, mm5						; V54 ;mm5 free
movq mm7, mm3						; duplicate V53

psrad		mm6, 8

packssdw	mm1, mm6
movq		mm6, mm2				; duplicate V51

;**********************************************************
psubw mm1, mm6						; V55 ; mm6 free
paddw mm3, mm2						; V56

movq mm5, mm4						; duplicate t140=t142
paddw mm4, mm1						; V57

movq  [esi+8*5], mm3		; V56
psubw mm5, mm1						; V58; mm1 free

movq  [esi+8*13], mm4		; V57
psubw mm7, mm2						; V59; mm2 free

movq  [esi+8*9], mm5		; V58

; keep mm7 alive all along the next block

movq mm0,  [esi+8*11]	; V11

movq mm6,  [esi+8*7]	; V7

movq mm4,  [esi+8*15]	; V15
movq mm3, mm0						; duplicate V11

movq mm5,  [esi+8*3]	; V3
paddw mm0, mm6						; V63

; note that V15 computation has a correction step:
; this is a 'magic' constant that rebiases the results to be closer to the expected result
; this magic constant can be refined to reduce the error even more
; by doing the correction step in a later stage when the number is actually multiplied by 16
movq	 scratch7, mm7
psubw mm3, mm6						; V60 ; free mm6

movq mm6,  x539f539f539f539f	; 23170 ->V18
movq mm1, mm3						; duplicate V60

;***************************************************PackMulW
movq		mm7, mm1

punpcklwd	mm1,  const_zero

pmaddwd		mm1, mm6

punpckhwd	mm7,  const_zero

pmaddwd		mm7, mm6
movq mm6, mm5						; duplicate V3

paddw mm5, mm4						; V61
psrad		mm1, 8

psubw mm6, mm4						; V62 ; free mm4
movq mm4, mm5						; duplicate V61

psrad		mm7, 8
paddw mm5, mm0						; V65 -> result

packssdw	mm1, mm7
psubw mm4, mm0						; V64 ; free mm0
;**********************************************************

movq mm7,  x5a825a825a825a82	; 23170 ->V18
;***************************************************PackMulW
movq		mm2, mm4

punpcklwd	mm4,  const_zero
paddw		mm3, mm6			; V66

pmaddwd		mm4, mm7

punpckhwd	mm2,  const_zero

pmaddwd		mm2, mm7

movq mm7,  x61f861f861f861f8	; 23170 ->V18
psrad		mm4, 8

psrad		mm2, 8

packssdw	mm4, mm2
;**********************************************************
;***************************************************PackMulW
movq		mm2, mm3

punpcklwd	mm3,  const_zero

pmaddwd		mm3, mm7

punpckhwd	mm2,  const_zero

pmaddwd		mm2, mm7

movq mm7,  x4546454645464546	; 23170 ->V18
psrad		mm3, 8

psrad		mm2, 8

packssdw	mm3, mm2
;**********************************************************
;***************************************************PackMulW
movq		mm2, mm6

punpcklwd	mm6,  const_zero

pmaddwd		mm6, mm7

punpckhwd	mm2,  const_zero

pmaddwd		mm2, mm7

movq mm0,  [esi+8*5]		; V56
psrad		mm6, 8

movq	mm7,  scratch7
psrad		mm2, 8

packssdw	mm6, mm2
movq		mm2, mm5			; duplicate V65
;**********************************************************

psubw mm6, mm3						; V72
paddw mm3, mm1						; V71 ; free mm1

psubw mm3, mm2						; V73 ; free mm2
movq mm1, mm0						; duplicate t177=t188

psubw mm4, mm3						; V74
paddw mm0, mm5						; tm1

movq mm2,  [esi+8*13]     ; V57
paddw mm6, mm4						; V75


;location 
;  5 - V56
; 13 - V57
;  9 - V58
;  X - V59, mm7
;  X - V65, mm5
;  X - V73, mm6
;  X - V74, mm4
;  X - V75, mm3                              
; free mm0, mm1 & mm2                        

movq  [esi+8*1], mm0      ; tm1; free mm0
psubw mm1, mm5						; tm15; free mm5

;save the store as used directly in the transpose
movq mm5, mm7                       ; duplicate t182=t184
psubw mm7, mm6						; tm7

paddw mm5, mm6						; tm9; free mm3
movq mm6, mm3

movq mm0,  [esi+8*9]		; V58
movq mm3, mm2						; duplicate V57

movq  [esi+8*7], mm7		; tm7; free mm7
psubw mm3, mm6						; tm13

paddw mm2, mm6						; tm3 ; free mm6
movq mm6, mm0						; duplicate V58

movq  [esi+8*3], mm2		; tm3; free mm2
paddw mm0, mm4						; tm5

psubw mm6, mm4						; tm11; free mm4

movq  [esi+8*5], mm0		; tm5; free mm0


; Final results to be stored after the transpose
; transpose the bottom right quadrant(4X4) of the matrix
;  ---------       ---------
; | M1 | M2 |     | M1'| M3'|
;  ---------  -->  ---------
; | M3 | M4 |     | M2'| M4'|
;  ---------       ---------
;
; get the pointer to array "range"
mov		edi, range_limit

; calculate the destination address
mov		edx,  output_buf		; get output_buf[4]

mov		ebx, [edx+16]
add		ebx,  output_col			; add to output_col	

movq		mm0, mm5			; copy w4---0,1,3,5,6
punpcklwd	mm5, mm6			;

punpckhwd	mm0, mm6			;---0,1,3,5,6
movq		mm2, mm3			;---0,1,2,3,5,6
 
movq	mm6,  [esi+8*0]  ;get w0 of top left quadrant
punpcklwd	mm3, mm1			;

movq	mm7,  [esi+8*2]  ;get w1 of top left quadrant
punpckhwd	mm2, mm1			;---0,2,3,5,6,7

movq		mm4, mm5			;---0,2,3,4,5,6,7
punpckldq	mm5, mm3			; transposed w4

psrlw	mm5, 5
movd    eax, mm5
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+4], al

psrlq	mm5, 16
movd    eax, mm5
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+5], al

psrlq	mm5, 16
movd    eax, mm5
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+6], al

psrlq	mm5, 16
movd    eax, mm5
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+7], al

mov		ebx, [edx+20]
add		ebx,  output_col			; add to output_col	

punpckhdq	mm4, mm3			; transposed w5---0,2,4,6,7

movq		mm3, mm0			;---0,2,3,4,6,7
punpckldq	mm0, mm2			; transposed w6

psrlw	mm4, 5
movd    eax, mm4
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+4], al

psrlq	mm4, 16
movd    eax, mm4
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+5], al

psrlq	mm4, 16
movd    eax, mm4
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+6], al

psrlq	mm4, 16
movd    eax, mm4
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+7], al

mov		ecx, [edx+24]			
add		ecx,  output_col			; add to output_col	

punpckhdq	mm3, mm2			; transposed w7---0,3,6,7

psrlw	mm0, 5

movd    eax, mm0
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ecx+4], al

psrlq	mm0, 16
movd    eax, mm0
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ecx+5], al

psrlq	mm0, 16
movd    eax, mm0
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ecx+6], al

psrlq	mm0, 16
movd    eax, mm0
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ecx+7], al

mov		ebx, [edx+28]		
add		ebx,  output_col			; add to output_col	

movq	mm5, mm6				; copy w0

psrlw	mm3, 5
movd    eax, mm3
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+4], al

psrlq	mm3, 16
movd    eax, mm3
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+5], al

psrlq	mm3, 16
movd    eax, mm3
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+6], al

psrlq	mm3, 16
movd    eax, mm3
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+7], al


punpcklwd	mm6, mm7

; transpose the top left quadrant(4X4) of the matrix

; calculate the destination address
mov		edx, output_buf		; get output_buf[0]

mov		ebx, [edx+0]
add		ebx, output_col			; add to output_col	


movq	mm4,  [esi+8*6]  ; get w3 of TL quadrant
punpckhwd	mm5, mm7			;---5,6,7

movq	mm7,  [esi+8*4]  ; get w2 of TL quadrant
movq		mm2, mm6

movq	mm3, mm7				; copy w2---3,4,5,6,7
punpcklwd	mm7, mm4			;---2,3,4,5,6,7

punpckhwd	mm3, mm4			;---2,3,4,5,6,7
movq		mm4, mm5			;	

movq		mm1, mm5
punpckldq	mm6, mm7			;---1,2,3,4,5,6,7

psrlw	mm6, 5
movd    eax, mm6
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx], al

psrlq	mm6, 16
movd    eax, mm6
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+1], al

psrlq	mm6, 16
movd    eax, mm6
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+2], al

psrlq	mm6, 16
movd    eax, mm6
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+3], al


mov		ebx, [edx+4]
add		ebx, output_col			; add to output_col	

punpckhdq	mm2, mm7			;---1,2,3,4,5,6,7

psrlw	mm2, 5
movd    eax, mm2
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx], al

psrlq	mm2, 16
movd    eax, mm2
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+1], al

psrlq	mm2, 16
movd    eax, mm2
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+2], al

psrlq	mm2, 16
movd    eax, mm2
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+3], al


mov		ecx, [edx+8]			
add		ecx, output_col			; add to output_col	

punpckldq	mm5, mm3			;---1,2,3,4,5,6,7

psrlw	mm5, 5
movd    eax, mm5
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ecx], al

psrlq	mm5, 16
movd    eax, mm5
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ecx+1], al

psrlq	mm5, 16
movd    eax, mm5
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ecx+2], al

psrlq	mm5, 16
movd    eax, mm5
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ecx+3], al


mov		ebx, [edx+12]		
add		ebx, output_col			; add to output_col	

punpckhdq	mm1, mm3			;---1,2,3,4,5,6,7

psrlw	mm1, 5
movd    eax, mm1
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx], al

psrlq	mm1, 16
movd    eax, mm1
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+1], al

psrlq	mm1, 16
movd    eax, mm1
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+2], al

psrlq	mm1, 16
movd    eax, mm1
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+3], al


; transpose the top right quadrant(4X4) of the matrix

; calculate the destination address for **bottom left quadrant
mov		edx, output_buf		; get output_buf[4]

mov		ebx, [edx+16]
add		ebx, output_col			; add to output_col	

movq	mm0,  [esi+8*1]	;---0

movq	mm1,  [esi+8*3]	;---0,1,2
movq	mm2, mm0

movq	mm3,  [esi+8*5]
punpcklwd	mm0, mm1				;---0,1,2,3

punpckhwd	mm2, mm1
movq	mm4, mm3

movq	mm1,  [esi+8*7]	;---0,1,2,3
movq	mm5, mm2

punpcklwd	mm3, mm1				;---0,1,2,3,4

punpckhwd	mm4, mm1				;---0,1,2,3,4
movq	mm1, mm0

punpckldq	mm0, mm3				;---0,1,2,3,4,5

punpckhdq	mm1, mm3				;---0,1,2,3,4,5

movq		mm3,  [esi+8*8]
psrlw	mm0, 5
movd    eax, mm0
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx], al

psrlq	mm0, 16
movd    eax, mm0
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+1], al

psrlq	mm0, 16
movd    eax, mm0
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+2], al

psrlq	mm0, 16
movd    eax, mm0
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+3], al

mov		ebx, [edx+20]
add		ebx, output_col			; add to output_col	

punpckldq	mm2, mm4				;---1,2,3,4,5

punpckhdq	mm5, mm4				;---1,2,3,4,5
movq		mm4,  [esi+8*10]

; transpose the bottom left quadrant(4X4) of the matrix
; Also store w1,w2,w3 of top right quadrant into
; w5,w6,w7 of bottom left quadrant. Storing w0 of TR in w4
; of BL is already done.

psrlw	mm1, 5
movd    eax, mm1
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx], al

psrlq	mm1, 16
movd    eax, mm1
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+1], al

psrlq	mm1, 16
movd    eax, mm1
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+2], al

psrlq	mm1, 16
movd    eax, mm1
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+3], al

mov		ecx, [edx+24]			
add		ecx, output_col			; add to output_col	

movq	mm0,  [esi+8*12]
movq	mm1, mm3					;---1,2,3,4,5

punpcklwd	mm3, mm4				;---0,1,2,3,4,5

punpckhwd	mm1, mm4				;---0,1,2,3,4,5

movq	mm4,  [esi+8*14]
psrlw	mm2, 5
movd    eax, mm2
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ecx], al

psrlq	mm2, 16
movd    eax, mm2
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ecx+1], al

psrlq	mm2, 16
movd    eax, mm2
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ecx+2], al

psrlq	mm2, 16
movd    eax, mm2
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ecx+3], al

mov		ebx, [edx+28]		
add		ebx, output_col			; add to output_col	

movq	mm2, mm0

psrlw	mm5, 5
movd    eax, mm5
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx], al


psrlq	mm5, 16
movd    eax, mm5
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+1], al

psrlq	mm5, 16
movd    eax, mm5
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+2], al

psrlq	mm5, 16
movd    eax, mm5
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+3], al


punpcklwd	mm0, mm4				;---0,1,2,3,4

punpckhwd	mm2, mm4				;---0,1,2,3,4
movq	mm4, mm3

movq	mm5, mm1
punpckldq	mm3, mm0				;---0,1,2,3,4,5

; calculate the destination address for **top right quadrant
mov		edx, output_buf		; get output_buf[0]

mov		ebx, [edx+0]
add		ebx, output_col			; add to output_col	

psrlw	mm3, 5
movd    eax, mm3
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+4], al

psrlq	mm3, 16
movd    eax, mm3
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+5], al

psrlq	mm3, 16
movd    eax, mm3
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+6], al

psrlq	mm3, 16
movd    eax, mm3
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+7], al

mov		ebx, [edx+4]
add		ebx, output_col			; add to output_col	

punpckhdq	mm4, mm0				;---1,2,4,5

psrlw	mm4, 5
movd    eax, mm4
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+4], al

psrlq	mm4, 16
movd    eax, mm4
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+5], al

psrlq	mm4, 16
movd    eax, mm4
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+6], al

psrlq	mm4, 16
movd    eax, mm4
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+7], al

mov		ecx, [edx+8]			
add		ecx, output_col			; add to output_col	

punpckldq	mm1, mm2				;---1,2,5

psrlw	mm1, 5
movd    eax, mm1
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ecx+4], al

psrlq	mm1, 16
movd    eax, mm1
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ecx+5], al

psrlq	mm1, 16
movd    eax, mm1
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ecx+6], al

psrlq	mm1, 16
movd    eax, mm1
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ecx+7], al

mov		ebx, [edx+12]		
add		ebx, output_col			; add to output_col	

punpckhdq	mm5, mm2				;---5

psrlw	mm5, 5
movd    eax, mm5
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+4], al

psrlq	mm5, 16
movd    eax, mm5
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+5], al

psrlq	mm5, 16
movd    eax, mm5
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+6], al

psrlq	mm5, 16
movd    eax, mm5
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+7], al

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

emms


} /* end of __asm */
}


#endif /* X86 */

#endif /* DCT_IFAST_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\miint.c ===
/***************************************************************************
*
*                INTEL Corporation Proprietary Information  
*
*      
*                  Copyright (c) 1996 Intel Corporation.
*                         All rights reserved.
*
***************************************************************************
			AUTHOR:  Kumar Balasubramanian 
***************************************************************************

** MMX version of the "integer LLM mode" within IJG decompressor code.
** The following is an MMX implementation of the integer slow mode
** IDCT within the IJG code.
*/

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */

#ifdef DCT_ISLOW_SUPPORTED

#ifndef _X86_

GLOBAL(void)
midct8x8llm (JCOEFPTR inptr, short *quantptr, short *wsptr,
		 JSAMPARRAY output_buf, JDIMENSION output_col, JSAMPLE *range_limit )
{
}

#else


/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif



#if BITS_IN_JSAMPLE == 8
#define CONST_BITS  13
#define PASS1_BITS  2
#else
#define CONST_BITS  13
#define PASS1_BITS  1		/* lose a little precision to avoid overflow */
#endif

/* Define the constants for the case BITS_IN_JSAMPLE = 8 */

static const __int64 const_0_2986	=	0x0000098E0000098E ;
static const __int64 const_0_3901	=	0x00000c7c00000c7c;
static const __int64 const_0_54119	=	0x0000115100001151;
static const __int64 const_0_7653	=	0x0000187E0000187E;
static const __int64 const_0_899	=	0x00001ccd00001ccd;
static const __int64 const_1_175	=	0x000025a1000025a1;
static const __int64 const_1_501	=	0x0000300b0000300b;
static const __int64 const_1_8477	=	0x00003b2100003b21;
static const __int64 const_1_961	=	0x00003ec500003ec5 ;
static const __int64 const_2_053	=	0x000041b3000041b3 ;
static const __int64 const_2_562	=	0x0000520300005203 ;
static const __int64 const_3_072	=	0x0000625400006254 ;

static const __int64 const_all_ones	=	0x0ffffffffffffffff;	
static const __int64 const_0_1_0_1		=	0x0000000100000001	 ;
static const __int64 const_zero		=	0x0000000000000000;	
static const __int64 const_1_0			=	0x0000000100000001	;
static const __int64 const_round		=	0x0000040000000400;
static const __int64 const_round_two	=	0x0002000000020000;
static const __int64 const_mask		=  0x000003ff000003ff;

static const __int64 const_00_1_84_00_0_765	=	0x00003b210000187E;
static const __int64 const_00_0_5411_00_00		=	0x0000115100000000;
static const __int64 const_3_072_00_1_501_00	=	0x62540000300b0000;
static const __int64 const_0_2986_00_2_053_00	=	0x098E000041b30000;
static const __int64 const_0_899_00_2_562_00	=   0x1ccd000052030000;
static const __int64 const_1_96_00_0_3901_00	=   0x3ec500000c7c0000;
static const __int64 const_1_175_00_00_00		=	0x25a1000000000000;







/*
 * Perform dequantization and inverse DCT on one block of coefficients.
 */

GLOBAL(void)
midct8x8llm (JCOEFPTR inptr, short *quantptr, short *wsptr,
		 JSAMPARRAY output_buf, JDIMENSION output_col, JSAMPLE *range_limit )
{

	INT32 locdwinptr,	locdwqptr, locdwwsptr, locdwcounter, locdwrowctr ;
__int64 locqwtmp0e,locqwtmp0o, locqwtmp1e, locqwtmp1o, locqwtmp2e ;

__int64 locqwtmp10e	, locqwtmp10o	,locqwtmp11e	,
		 locqwtmp11o	, locqwtmp12e	, locqwtmp12o	,
		 locqwtmp13e	, locqwtmp13o	,locqwtmp0	,
		locqwtmp1	,locqwtmp2	,locqwtmp3	,
		locqwz5e ,locqwz5o	,locqwz1e ,locqwz1o	,
		locqwz13e	,locqwz13o	,locqwz14e	,
		locqwz14o	,locqwz23e	,locqwz23o	,
		locqwz24e	,locqwz24o ;




// Inline assembly to do the IDCT and store the result */

__asm {

mov	esi, inptr	; load the input pointer
mov edi, quantptr		; load the quant table pointer

mov locdwinptr, esi	; to be used in the idct_column loop
mov locdwqptr, edi	; to be used in the idct_column loop

mov esi, wsptr
mov locdwcounter, 2	; idct_column loop counter

mov locdwwsptr, esi



;; do the idct on all the columns. Do four columns per
;; iteration of the loop.

idct_column:

mov		esi, locdwinptr	; get the source pointer
mov		edi, locdwqptr		; get the quantzn. pointer

;; fetch C2 and Q2
movq	mm0,  [esi+16*2]	; get C2

movq	mm1,  [edi+16*2]	; get Q2

movq	mm2,  [esi+16*6]	; get C6
pmullw	mm0, mm1		; dequantized C2 = z2

movq	mm3, [edi+16*6]	; get Q6

movq	mm6,  const_0_7653	
pmullw	mm2, mm3		; dequant. C6 = z3

movq	mm7,  const_1_8477	
movq	mm4, mm0		; copy z2

pmaddwd	mm4, mm6		; tmp3 - z1 for columns 0 & 2
movq	mm5, mm0		; copy z2

movq	mm3, mm2		; z3 copy
psrlq	mm5, 16			; move z2 columns 1 & 3 to 0 & 2

movq	mm1,  const_0_54119
pmaddwd	mm5, mm6		; tmp3 - z1 for columns 1 & 3

psrlq	mm3, 16			; move z3 columns 1 & 3 to 0 & 2
paddw	mm0, mm2		; z2 + z3

pmaddwd	mm2, mm7		; tmp2 - z1 for columns 0 & 2
movq	mm6, mm0		; z2 + z3 copy

psrlq	mm6, 16			; z2 + z3 columns 1 & 3 in 0 & 2
pmaddwd	mm3, mm7		; tmp2 - z1 for columns 1 & 3

movq	mm7,  const_all_ones
pmaddwd	mm0, mm1		; z1 columns 0 & 2

pmaddwd	mm6, mm1		; z1 columns 1 & 3
pxor	mm2, mm7		; 1s complement of tmp2 - z1

movq	mm1,  const_0_1_0_1
pxor	mm3, mm7		; 1s complement of tmp2 - z1 

paddd	mm2, mm1		; 2s complement of tmp2 - z1(col 0 &2)
paddd	mm3, mm1		; 2s complement of tmp2 - z1(col 1 & 3)

paddd	mm2, mm0		; tmp2 (columns 0 & 2)
paddd	mm4, mm0		; tmp2 (cols. 1 & 3)

;; get C0 and Q0
movq	mm0,  [esi+16*0]	; get C0
paddd	mm3, mm6		; tmp3

movq	mm1,  [edi+16*0]	; getQ0
paddd	mm5, mm6		; tmp3

movq	mm6,  [esi+16*4]	; get C4
pmullw	mm0, mm1		; dequant C0 = z2

movq	mm7,  [edi+16*4]	; get Q4
nop

movq	locqwtmp2e, mm2	; store tmp2 even part
pmullw	mm6, mm7		; dequant C4 = z3

movq	mm7,  const_1_0
movq	mm1, mm0		; copy of z2

paddw	mm0, mm6		; z2+z3
nop

psubw	mm1, mm6		; z2-z3
movq	mm6, mm0		; z2+z3 copy

pmaddwd	mm0, mm7		; get 0 & 2 cols
psrlq	mm6, 16			; get the other two cols.

pmaddwd	mm6, mm7		; 
movq	mm2, mm1		; copy of z2-z3

pmaddwd	mm1, mm7
psrlq	mm2, 16

pmaddwd	mm2, mm7
pslld	mm0, 13			; tmp0 cols 0&2

movq	mm7, mm4
pslld	mm6, 13			; tmp0 cols 1 & 3

paddd	mm4, mm0		; 
psubd	mm0, mm7		; 

movq	mm7, mm5
pslld	mm2, 13

movq	locqwtmp13e, mm0	; store tmp13 cols 0&2
paddd	mm5, mm6

movq	mm0, locqwtmp2e
psubd	mm6, mm7


movq	locqwtmp10o, mm5	; store tmp10 cols 1&3
movq	mm7, mm3

movq	locqwtmp13o, mm6	; store tmp13 cols 1&3
paddd	mm3, mm2

movq	locqwtmp10e, mm4	; store tmp10 cols 0&2
pslld	mm1, 13

movq	locqwtmp11o, mm3	; store tmp11 cols 1,3
psubd	mm2, mm7

movq	mm6,  [esi+16*1]
movq	mm3, mm0

movq	locqwtmp12o, mm2	; store tmp12 cols. 1,3
paddd	mm0, mm1

movq	mm7,  [edi+16*1]

movq	locqwtmp11e, mm0	; store tmp11 cols. 0,2
psubd	mm1, mm3

movq	mm0,  [esi+16*7]
pmullw	mm6, mm7	; dequant. C1 = tmp3

movq	locqwtmp12e, mm1

;; completed the even part.
;; Now start the odd part

movq	mm1,  [edi+16*7]	; get C7

movq	mm2,  [esi+16*5]	; get C5
pmullw	mm0, mm1	; dequant. C7 = tmp0

movq	mm3,  [edi+16*5]

movq	mm4,  [esi+16*3]
pmullw	mm2, mm3	; dequant. C5 = tmp1

movq	mm5,  [edi+16*3]
movq	mm1, mm0

movq	locqwtmp3, mm6
pmullw	mm4, mm5	; dequant. C3 = tmp2

movq	locqwtmp0, mm0
paddw	mm0, mm6	; z1 

movq	locqwtmp1, mm2
movq	mm3, mm2

movq	locqwtmp2, mm4
paddw	mm2, mm4	; z2

paddw	mm1, mm4	; z3

movq	mm4,  const_1_175
paddw	mm3, mm6	; z4	

movq	mm5, mm1
movq	mm7, mm0

psrlq	mm7, 16		; other two cols. of z1
paddw	mm5, mm3	; z3 + z4

movq	mm6, mm5
pmaddwd	mm5, mm4	; z5 cols 0 & 2

pmaddwd	mm0,  const_0_899	; z1 even part
psrlq	mm6, 16

pmaddwd	mm6, mm4	; z5 cols 1 & 3
movq	mm4, mm2	; z2 copy

movq	locqwz5e, mm5
psrlq	mm4, 16		; get z2 cols 1 & 3

pxor	mm0,  const_all_ones
movq	mm5, mm1

movq	locqwz5o, mm6
psrlq	mm5, 16

movq	mm6,  const_2_562
nop

paddd	mm0,  const_0_1_0_1
pmaddwd	mm2, mm6	; z2 cols 0 & 2

movq	locqwz1e, mm0
pmaddwd	mm4, mm6	; z2 cols 1 & 3

pmaddwd	mm7,  const_0_899	; z1
movq	mm0, mm3

movq	mm6,  const_1_961
psrlq	mm0, 16

pxor	mm2,  const_all_ones
pmaddwd	mm1, mm6	; z3 cols 0 & 2

paddd	mm2,  const_0_1_0_1
pmaddwd	mm5, mm6	; z3 cols 1 & 3

movq	mm6,  const_0_3901
nop

pxor	mm4,  const_all_ones
pmaddwd	mm3, mm6	; z4 cols 0 & 2

paddd	mm4,  const_0_1_0_1
pmaddwd	mm0, mm6	; z4 cols 1 & 3

movq	mm6,  const_all_ones
nop

pxor	mm1, mm6
pxor	mm7, mm6

;; twos complement of z1, z2, z3, z4

paddd	mm1,  const_0_1_0_1	
pxor	mm5, mm6

paddd	mm7,  const_0_1_0_1
pxor	mm3, mm6

paddd	mm5,  const_0_1_0_1
nop

movq	locqwz1o, mm7
pxor	mm0, mm6

paddd	mm1, locqwz5e	; z3+z5 cols 0 & 2
nop

movq	mm6, locqwz1e
nop

paddd	mm5, locqwz5o	; z3+z5 cols 1 & 3
paddd	mm6, mm1

paddd	mm3,  const_0_1_0_1
paddd	mm1, mm2

paddd	mm0,  const_0_1_0_1
paddd	mm7, mm5

paddd	mm3, locqwz5e	; z4+z5 cols 0 & 2
paddd	mm5, mm4

paddd	mm0, locqwz5o	; z4+z5 cols 0 & 2
paddd	mm2, mm3

paddd	mm3, locqwz1e
paddd	mm4, mm0

paddd	mm0, locqwz1o

movq	locqwz23e, mm1
nop

movq	locqwz14o, mm0
nop

movq	mm0, locqwtmp0
nop

movq	locqwz24e, mm2
movq	mm1, mm0

movq	mm2,  const_0_2986
psrlq	mm1, 16

movq	locqwz14e, mm3
pmaddwd	mm0, mm2	; tmp0 even

movq	mm3, locqwtmp1
pmaddwd	mm1, mm2	; tmp0 odd

movq	locqwz24o, mm4
movq	mm2, mm3

movq	mm4,  const_2_053
psrlq	mm2, 16

movq	locqwz23o, mm5
pmaddwd	mm3, mm4	; tmp1 even

movq	mm5, locqwtmp2
pmaddwd	mm2, mm4	; tmp1 odd

movq	locqwz13e, mm6
movq	mm4, mm5

movq	mm6,  const_3_072
psrlq	mm4, 16

movq	locqwz13o, mm7
pmaddwd	mm5, mm6	; tmp2 even
	
;;;;;;; now calculate tmp0..tmp3
;; then calculate the pre-descaled values
;; this includes the right shift with rounding

movq	mm7, locqwtmp3
pmaddwd	mm4, mm6	; tmp2 odd

paddd	mm0, locqwz13e
movq	mm6, mm7

paddd	mm1, locqwz13o
psrlq	mm6, 16

movq	locqwtmp0e, mm0		; tmp0 even
nop

movq	mm0,  const_1_501
nop

movq	locqwtmp0o, mm1
pmaddwd	mm7, mm0

paddd	mm3, locqwz24e
pmaddwd	mm6, mm0

movq	mm0, locqwtmp10e
nop

paddd	mm7, locqwz14e
nop

paddd	mm6, locqwz14o
psubd	mm0, mm7

movq	mm1, locqwtmp10o
nop

movq	locqwtmp1e, mm3
psubd	mm1, mm6

movq	mm3,  const_round
nop

paddd	mm2, locqwz24o
paddd	mm0, mm3

paddd	mm7, locqwtmp10e
psrad	mm0, 11

movq	locqwtmp1o, mm2
paddd	mm1, mm3

paddd	mm6, locqwtmp10o
psrad	mm1, 11

paddd	mm5, locqwz23e
movq	mm2, mm0

paddd	mm4, locqwz23o
punpcklwd	mm0, mm1

paddd	mm6, mm3
punpckhwd	mm2, mm1

paddd	mm7, mm3
punpckldq	mm0, mm2

;; now do all the stores of the 1D-iDCT of the four columns

mov		edi, locdwwsptr	; get pointer to scratch pad array

movq	 [edi+16*7], mm0	; store wsptr[7]
psrad	mm6, 11

movq	mm2, locqwtmp11e
psrad	mm7, 11

psubd	mm2, mm5
movq	mm0, mm7

movq	mm1, locqwtmp11o
punpcklwd	mm7, mm6

psubd	mm1, mm4
punpckhwd	mm0, mm6

paddd	mm5, locqwtmp11e
punpckldq	mm7, mm0

paddd	mm4, locqwtmp11o
paddd	mm2, mm3

paddd	mm1, mm3
paddd	mm5, mm3

paddd	mm4, mm3
psrad	mm2, 11

movq	 [edi+16*0], mm7	; store wsptr[0]
psrad	mm1, 11

movq	mm0, mm2
psrad	mm5, 11

movq	mm6, locqwtmp12e
punpcklwd	mm2, mm1

punpckhwd	mm0, mm1
movq	mm1, mm5

movq	mm7, locqwtmp12o
punpckldq	mm2, mm0

movq	 [edi+16*6], mm2	; store wsptr[6]
psrad	mm4, 11

movq	mm2, mm6
punpcklwd	mm5, mm4

paddd	mm6, locqwtmp1e
punpckhwd	mm1, mm4

psubd	mm2, locqwtmp1e
punpckldq	mm5, mm1

movq	 [edi+16*1], mm5	; store wsptr[1]
movq	mm0, mm7

paddd	mm7, locqwtmp1o
paddd	mm6, mm3

psubd	mm0, locqwtmp1o
paddd	mm7, mm3

paddd	mm2, mm3
psrad	mm7, 11

paddd	mm0, mm3
psrad	mm6, 11

movq	mm1, mm6
psrad	mm2, 11

movq	mm4, locqwtmp13e
punpcklwd	mm6, mm7

movq	mm5, mm4
punpckhwd	mm1, mm7

paddd	mm4, locqwtmp0e
punpckldq	mm6, mm1

psubd	mm5, locqwtmp0e
psrad	mm0, 11

movq	 [edi+16*2], mm6	; store wsptr[2]
movq	mm6, mm2

paddd	mm4, mm3
punpcklwd	mm2, mm0

paddd	mm5, mm3
punpckhwd	mm6, mm0

movq	mm0, locqwtmp13o
punpckldq	mm2, mm6

movq	mm1, mm0
psrad	mm4, 11

paddd	mm0, locqwtmp0o
psrad	mm5, 11

paddd	mm0, mm3
movq	mm6, mm4

psubd	mm1, locqwtmp0o
psrad	mm0, 11

paddd	mm1, mm3
punpcklwd	mm4, mm0

movq	mm3, mm5
punpckhwd	mm6, mm0

movq	 [edi+16*5], mm2	; store wsptr[5]
punpckldq	mm4, mm6

psrad	mm1, 11

movq	 [edi+16*3], mm4	; store wsptr[3]
punpcklwd	mm5, mm1

punpckhwd	mm3, mm1

punpckldq	mm5, mm3

add locdwinptr, 8	; skip first four columns
add	locdwqptr,  8

movq	 [edi+16*4], mm5	; store wsptr[4]


;;;;;;; done with 1D-idct of four columns ;;;;;;;

;; now update pointers for next four columns

add locdwwsptr, 8
mov	eax, locdwcounter

dec eax

mov locdwcounter, eax
jnz idct_column

;;;;;;;end of 1D-idct on the columns ;;;;;;;

mov	esi, wsptr	; get start addr of temp array
mov locdwcounter, 8

mov	locdwwsptr, esi
mov	locdwrowctr, 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;; start of 1D-idct on the rows ;;;;;;;


idct_row:

mov	esi, locdwwsptr	; get next row start addr of temp array
mov	edi, output_buf	

movq	mm0,  [esi+0]	; get first 4 elements of row

movq	mm1,  [esi+2*4] ; get next 4 elem. of row
movq	mm2, mm0

movq	mm3, mm0	; copy of e3|e2|e1|e0
paddw	mm2, mm1	; (e3+e7)|(e2+e6)|(e1+e5)|(e0+e4)

movq	mm4, mm2	; copy of (e3+e7)|(e2+e6)|(e1+e5)|(e0+e4)
punpckhdq	mm3, mm1	; e7|e6|e3|e2

pmaddwd	mm3,  const_00_1_84_00_0_765	; (tmp2 - z1)||(tmp3-z1)
movq	mm6, mm0	; copy of e3|e2|e1|e0

pmaddwd	mm2,  const_00_0_5411_00_00	; z1||xxx
psubw	mm6, mm1	; (e3-e7)|(e2-e6)|(e1-e5)|(e0-e4)

punpckldq	mm4, mm6	; (e1-e5)|(e0-e4)|(e1+e5)|(e0+e4)
movq	mm6, mm0	; 

movq	mm5, mm3
pslld	mm4, 16	; (e0-e4)|(e1+e5)||(e0+e4)|x0000

pxor	mm3,  const_all_ones
punpckhdq	mm2, mm2	; z1||z1

paddd	mm3,  const_0_1_0_1
psrad	mm4, 3	; (e0-e4)<<13||(e0+e4)<<13

psrlq	mm3, 32
movq	mm7, mm4	; copy of tmp1||tmp0

punpckldq	mm5, mm3
movq	mm3, mm0	; e3|e2|e1|e0

paddd	mm5, mm2		; tmp2 || tmp3
paddw	mm3, mm1	; (e7+e3)|(e2+e6)|(e1+e5)|(e0+e4)

paddd	mm4, mm5
psubd	mm7, mm5


;; end of even part calculation ;;
;; mm0 => e3|e2|e1|e0
;; mm1 => e7|e6|e5|e4
;; mm4 => tmp11||tmp10
;; mm7 => tmp12||tmp13

movq	mm5, mm3
movq	mm2, mm0

pmaddwd	mm0,  const_3_072_00_1_501_00	; tmp2|tmp3
punpckldq	mm5, mm5

paddw	mm5, mm3
punpckldq	mm2, mm2

pmaddwd	mm5,  const_1_175_00_00_00		; z5|0
punpckhdq	mm6, mm2

pmaddwd		mm3,  const_1_96_00_0_3901_00	; z3|z4
paddw	mm6, mm1

pmaddwd		mm6,  const_0_899_00_2_562_00	; z1|z2
nop

pmaddwd		mm1,  const_0_2986_00_2_053_00	; tmp0|tmp1
punpckhdq	mm5, mm5

movq	mm2,  const_0_1_0_1
nop

pxor	mm3,  const_all_ones
nop

pxor	mm6,  const_all_ones
paddd	mm3, mm2

paddd	mm6, mm2
paddd	mm3, mm5

movq	mm5, mm6
paddd	mm6, mm3

movq	mm2, mm5
punpckldq	mm5, mm5

punpckhdq	mm2, mm5
paddd	mm1, mm6

paddd	mm2, mm3
movq	mm5, mm1

movq	mm3, mm4
paddd	mm0, mm2

movq	mm2, mm7
punpckldq	mm5, mm5

punpckhdq	mm1, mm5
psubd	mm3, mm0

movq	mm5,  const_round_two
paddd	mm0, mm4

movq	mm6,  const_mask
psubd	mm2, mm1

paddd	mm0, mm5
paddd	mm1, mm7



;; descale the resulting coeff values
paddd	mm1, mm5
psrad	mm0, 18

paddd	mm3, mm5
psrad	mm1, 18

paddd	mm2, mm5
psrad	mm3, 18


;; mask the result with RANGE_MASK (least 10 bits)
pand	mm1, mm6	; w2|w3
psrad	mm2, 18

movd	ebx, mm1	; w3
psrlq	mm1, 32		; 0|w2

;; using the results as index, get the corresponding
;; value from array range_limit and store the final result

mov		ecx, range_limit	; get start addr of range_limit array
add	edi, locdwrowctr

movd	edx, mm1	; w2
pand	mm0, mm6	; w1|w0

mov		ah, [ecx][ebx]	; w3
mov		edi, [edi]

movd	ebx, mm0	; w0
psrlq	mm0, 32		; 0|w1

mov		al, [ecx][edx]	; w2
add	locdwrowctr, 4

movd	edx, mm0	; w1
pand	mm3, mm6	; w6|w7

add	edi, output_col	; this is the dest start addr for this row
shl		eax, 16		; w3|w2|0|0

mov		al, [ecx][ebx]	; w0

mov		ah, [ecx][edx]	; w1

movd	mm4, eax	; w3|w2|w1|w0
pand	mm2, mm6	; w5|w4

movd	ebx, mm3	; w7
psrlq	mm3, 32		; 0|w6

movd	edx, mm3	; w6

mov		ah, [ecx][ebx]	; w7

mov		al, [ecx][edx]	; w6

movd	ebx, mm2	; w4
psrlq	mm2, 32		; 0|w5

shl		eax, 16		; w7|w6|0|0

movd	edx, mm2	; w5

mov		al, [ecx][ebx]	; w4

mov		ah, [ecx][edx]	; w5

movd	mm5, eax	; w7|w6|w5|w4

punpckldq	mm4, mm5	; w7|w6|w5|w4|w3|w2|w1|w0

add	locdwwsptr, 16
mov	eax, locdwcounter

movq	 [edi], mm4

;; update address pointer and loop counter

dec eax

mov	locdwcounter, eax
jnz	idct_row

;;;;;;; end of 1D-idct on all the rows ;;;;;;;
 


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

emms


} //end of __asm

}


#endif /* X86 */

#endif /* DCT_ISLOW_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\pffst.c ===
/***************************************************************************
*
*                INTEL Corporation Proprietary Information  
*
*      
*                  Copyright (c) 1996 Intel Corporation.
*                         All rights reserved.
*
***************************************************************************
*/
/*
 * jfdctfst.c
 *
 * Copyright (C) 1994-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains a fast, not so accurate integer implementation of the
 * forward DCT (Discrete Cosine Transform).
 *
 * A 2-D DCT can be done by 1-D DCT on each row followed by 1-D DCT
 * on each column.  Direct algorithms are also available, but they are
 * much more complex and seem not to be any faster when reduced to code.
 *
 * This implementation is based on Arai, Agui, and Nakajima's algorithm for
 * scaled DCT.  Their original paper (Trans. IEICE E-71(11):1095) is in
 * Japanese, but the algorithm is described in the Pennebaker & Mitchell
 * JPEG textbook (see REFERENCES section in file README).  The following code
 * is based directly on figure 4-8 in P&M.
 * While an 8-point DCT cannot be done in less than 11 multiplies, it is
 * possible to arrange the computation so that many of the multiplies are
 * simple scalings of the final outputs.  These multiplies can then be
 * folded into the multiplications or divisions by the JPEG quantization
 * table entries.  The AA&N method leaves only 5 multiplies and 29 adds
 * to be done in the DCT itself.
 * The primary disadvantage of this method is that with fixed-point math,
 * accuracy is lost due to imprecise representation of the scaled
 * quantization values.  The smaller the quantization table entry, the less
 * precise the scaled value, so this implementation does worse with high-
 * quality-setting files than with low-quality ones.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */

#ifdef DCT_IFAST_SUPPORTED

#ifndef _X86_

GLOBAL(void)
pfdct8x8aan (DCTELEM * data)
{
}

#else

/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif


/* Scaling decisions are generally the same as in the LL&M algorithm;
 * see jfdctint.c for more details.  However, we choose to descale
 * (right shift) multiplication products as soon as they are formed,
 * rather than carrying additional fractional bits into subsequent additions.
 * This compromises accuracy slightly, but it lets us save a few shifts.
 * More importantly, 16-bit arithmetic is then adequate (for 8-bit samples)
 * everywhere except in the multiplications proper; this saves a good deal
 * of work on 16-bit-int machines.
 *
 * Again to save a few shifts, the intermediate results between pass 1 and
 * pass 2 are not upscaled, but are represented only to integral precision.
 *
 * A final compromise is to represent the multiplicative constants to only
 * 8 fractional bits, rather than 13.  This saves some shifting work on some
 * machines, and may also reduce the cost of multiplication (since there
 * are fewer one-bits in the constants).
 */

#define CONST_BITS  8


/* Some C compilers fail to reduce "FIX(constant)" at compile time, thus
 * causing a lot of useless floating-point operations at run time.
 * To get around this we use the following pre-calculated constants.
 * If you change CONST_BITS you may want to add appropriate values.
 * (With a reasonable C compiler, you can just rely on the FIX() macro...)
 */

#if CONST_BITS == 8
#define FIX_0_382683433				 98		/* FIX(0.382683433) */
#define FIX_0_541196100				139		/* FIX(0.541196100) */
#define FIX_0_707106781				181		/* FIX(0.707106781) */
#define FIX_1_306562965				334		/* FIX(1.306562965) */
#else
#define FIX_0_382683433  FIX(0.382683433)
#define FIX_0_541196100  FIX(0.541196100)
#define FIX_0_707106781  FIX(0.707106781)
#define FIX_1_306562965  FIX(1.306562965)
#endif


/* We can gain a little more speed, with a further compromise in accuracy,
 * by omitting the addition in a descaling shift.  This yields an incorrectly
 * rounded result half the time...
 */

// The assembly version makes this compromise.
 
//#ifndef USE_ACCURATE_ROUNDING
//#undef DESCALE
//#define DESCALE(x,n)  RIGHT_SHIFT(x, n)
//#endif

#define	DCTWIDTH	32
#define	DATASIZE	4


/* Multiply a DCTELEM variable by an INT32 constant, and immediately
 * descale to yield a DCTELEM result.
 */

#define MULTIPLY(var,const)  ((DCTELEM) DESCALE((var) * (const), CONST_BITS))


/*
 * Perform the forward DCT on one block of samples.
 */

GLOBAL(void)
pfdct8x8aan (DCTELEM * data)
{
  DCTELEM tmp4, tmp6, tmp7;
  int counter;

  __asm{
 
  /* Pass 1: process rows. */

//  dataptr = data;
		mov 	esi, [data]
		mov		counter, 8
		
//  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
//   tmp0 = dataptr[0] + dataptr[7];
//   tmp7 = dataptr[0] - dataptr[7];
//    tmp1 = dataptr[1] + dataptr[6];
//    tmp6 = dataptr[1] - dataptr[6];
//    tmp2 = dataptr[2] + dataptr[5];
//    tmp5 = dataptr[2] - dataptr[5];
//    tmp3 = dataptr[3] + dataptr[4];
//    tmp4 = dataptr[3] - dataptr[4];
    
 StartRow:
 		mov		eax, [esi][DATASIZE*0]
 		mov		ebx, [esi][DATASIZE*7]
 		
 		mov		edx, eax
 		add		eax, ebx	; eax = tmp0
 		
 		sub		edx, ebx	; edx = tmp7
  		mov		ebx, [esi][DATASIZE*3]
 
 		mov		ecx, [esi][DATASIZE*4]
 		mov		edi, ebx
 		
 		add		ebx, ecx	; ebx = tmp3
 		sub		edi, ecx	; edi = tmp4
 		
 		mov		tmp4, edi
 		mov		tmp7, edx
 		
    /* Even part */
    
//    tmp10 = tmp0 + tmp3;
//    tmp13 = tmp0 - tmp3;
//    tmp11 = tmp1 + tmp2;
//    tmp12 = tmp1 - tmp2;
    
		mov		ecx, eax
		add		eax, ebx	; eax = tmp10
		
		sub		ecx, ebx	; ecx = tmp13
  		mov		edx, [esi][DATASIZE*1] 
  		
  		mov		edi, [esi][DATASIZE*6]
  		mov		ebx, edx
  		
  		add		edx, edi	; edx = tmp1
  		sub		ebx, edi	; ebx = tmp6
  		
  		mov		tmp6, ebx
  		push	ebp
  		
  		mov		edi, [esi][DATASIZE*2]
  		mov		ebp, [esi][DATASIZE*5]

  		mov		ebx, edi
  		add		edi, ebp	; edi = tmp2
  		
  		sub		ebx, ebp	; ebx = tmp5
  		mov		ebp, edx
  		
  		add		edx, edi	; edx = tmp11
  		sub		ebp, edi	; ebp = tmp12
  		
//    dataptr[0] = tmp10 + tmp11; /* phase 3 */
//    dataptr[4] = tmp10 - tmp11;
    
		mov		edi, eax
		add		eax, edx	; eax = tmp10 + tmp11
		
		sub		edi, edx	; edi = tmp10 - tmp11
		add		ebp, ecx	; ebp = tmp12 + tmp13
		
//    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_707106781); /* c4 */

		imul	ebp, FIX_0_707106781	; ebp = z1
		
		sar		ebp, 8
		mov		[esi][DATASIZE*0], eax
		
//    dataptr[2] = tmp13 + z1; /* phase 5 */
//    dataptr[6] = tmp13 - z1;

		mov		eax, ecx
		add		ecx, ebp

		sub		eax, ebp
		pop		ebp

		mov		[esi][DATASIZE*4], edi
		mov		[esi][DATASIZE*2], ecx

		mov		[esi][DATASIZE*6], eax
		mov		edi, tmp4

    /* Odd part */
    
//    tmp10 = tmp4 + tmp5;	/* phase 2 */
//    tmp11 = tmp5 + tmp6;
//    tmp12 = tmp6 + tmp7;

		mov		ecx, tmp6
		mov		edx, tmp7

		add		edi, ebx	; edi = tmp10
		add		ebx, ecx	; ebx = tmp11

//    z3 = MULTIPLY(tmp11, FIX_0_707106781); /* c4 */
//    z11 = tmp7 + z3;		/* phase 5 */
//    z13 = tmp7 - z3;
		
		imul	ebx, FIX_0_707106781	; ebx = z3

		sar		ebx, 8
		add		ecx, edx	; ecx = tmp12

		mov		eax, edx
		add		edx, ebx	; edx = z11

		sub		eax, ebx	; eax = z13
		mov		ebx, edi

    /* The rotator is modified from fig 4-8 to avoid extra negations. */
//    z5 = MULTIPLY(tmp10 - tmp12, FIX_0_382683433); /* c6 */
//    z2 = MULTIPLY(tmp10, FIX_0_541196100) + z5; /* c2-c6 */
//    z4 = MULTIPLY(tmp12, FIX_1_306562965) + z5; /* c2+c6 */
		
		imul	ebx, FIX_0_541196100
		
		sar		ebx, 8
		sub		edi, ecx	; edi = tmp10 - tmp12	

		imul	edi, FIX_0_382683433	; edi = z5

		sar		edi, 8
		add		esi, 32

		imul	ecx, FIX_1_306562965

		sar		ecx, 8
		add		ebx, edi	; ebx = z2

		add		ecx, edi	; ecx = z4
		mov		edi, eax
		
//    dataptr[5] = z13 + z2;	/* phase 6 */
//    dataptr[3] = z13 - z2;
//    dataptr[1] = z11 + z4;
//    dataptr[7] = z11 - z4;

		add		eax, ebx	; eax = z13 + z2
		sub		edi, ebx	; edi = z13 - z2

		mov		[esi][DATASIZE*5-32], eax
		mov		ebx, edx

		mov		[esi][DATASIZE*3-32], edi
		add		edx, ecx	; edx = z11 + z4

		mov		[esi][DATASIZE*1-32], edx
		sub		ebx, ecx	; ebx = z11 - z4

		mov		ecx, counter
		mov		[esi][DATASIZE*7-32], ebx

		dec		ecx

		mov		counter, ecx
		jnz		StartRow
    
//    dataptr += DCTSIZE;		/* advance pointer to next row */
//  }

  
  
  
  /* Pass 2: process columns.*/


//  dataptr = data;
		mov 	esi, [data]
		mov		counter, 8
		
//  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
//    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
//    tmp7 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
//    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
//    tmp6 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
//    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
//    tmp5 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
//    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
//    tmp4 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];
    
 StartCol:
 		mov		eax, [esi][DCTWIDTH*0]
 		mov		ebx, [esi][DCTWIDTH*7]
 		
 		mov		edx, eax
 		add		eax, ebx	; eax = tmp0
 		
 		sub		edx, ebx	; edx = tmp7
  		mov		ebx, [esi][DCTWIDTH*3]
 
 		mov		ecx, [esi][DCTWIDTH*4]
 		mov		edi, ebx
 		
 		add		ebx, ecx	; ebx = tmp3
 		sub		edi, ecx	; edi = tmp4
 		
 		mov		tmp4, edi
 		mov		tmp7, edx
 		
    /* Even part */
    
//    tmp10 = tmp0 + tmp3;
//    tmp13 = tmp0 - tmp3;
//    tmp11 = tmp1 + tmp2;
//    tmp12 = tmp1 - tmp2;
    
		mov		ecx, eax
		add		eax, ebx	; eax = tmp10
		
		sub		ecx, ebx	; ecx = tmp13
  		mov		edx, [esi][DCTWIDTH*1] 
  		
  		mov		edi, [esi][DCTWIDTH*6]
  		mov		ebx, edx
  		
  		add		edx, edi	; edx = tmp1
  		sub		ebx, edi	; ebx = tmp6
  		
  		mov		tmp6, ebx
  		push	ebp
  		
  		mov		edi, [esi][DCTWIDTH*2]
  		mov		ebp, [esi][DCTWIDTH*5]

  		mov		ebx, edi
  		add		edi, ebp	; edi = tmp2
  		
  		sub		ebx, ebp	; ebx = tmp5
  		mov		ebp, edx
  		
  		add		edx, edi	; edx = tmp11
  		sub		ebp, edi	; ebp = tmp12
  		
//    dataptr[DCTSIZE*0] = tmp10 + tmp11; /* phase 3 */
//    dataptr[DCTSIZE*4] = tmp10 - tmp11;
    
		mov		edi, eax
		add		eax, edx	; eax = tmp10 + tmp11
		
		sub		edi, edx	; edi = tmp10 - tmp11
		add		ebp, ecx	; ebp = tmp12 + tmp13
		
//    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_707106781); /* c4 */

		imul	ebp, FIX_0_707106781	; ebp = z1
		
		sar		ebp, 8
		mov		[esi][DCTWIDTH*0], eax
		
//    dataptr[DCTSIZE*2] = tmp13 + z1; /* phase 5 */
//    dataptr[DCTSIZE*6] = tmp13 - z1;

		mov		eax, ecx
		add		ecx, ebp

		sub		eax, ebp
		pop		ebp

		mov		[esi][DCTWIDTH*4], edi
		mov		[esi][DCTWIDTH*2], ecx

		mov		[esi][DCTWIDTH*6], eax
		mov		edi, tmp4

    /* Odd part */
    
//    tmp10 = tmp4 + tmp5;	/* phase 2 */
//    tmp11 = tmp5 + tmp6;
//    tmp12 = tmp6 + tmp7;

		mov		ecx, tmp6
		mov		edx, tmp7

		add		edi, ebx	; edi = tmp10
		add		ebx, ecx	; ebx = tmp11

//    z3 = MULTIPLY(tmp11, FIX_0_707106781); /* c4 */
//    z11 = tmp7 + z3;		/* phase 5 */
//    z13 = tmp7 - z3;
		
		imul	ebx, FIX_0_707106781	; ebx = z3

		sar		ebx, 8
		add		ecx, edx	; ecx = tmp12

		mov		eax, edx
		add		edx, ebx	; edx = z11

		sub		eax, ebx	; eax = z13
		mov		ebx, edi

    /* The rotator is modified from fig 4-8 to avoid extra negations. */
//    z5 = MULTIPLY(tmp10 - tmp12, FIX_0_382683433); /* c6 */
//    z2 = MULTIPLY(tmp10, FIX_0_541196100) + z5; /* c2-c6 */
//    z4 = MULTIPLY(tmp12, FIX_1_306562965) + z5; /* c2+c6 */
		
		imul	ebx, FIX_0_541196100
		
		sar		ebx, 8
		sub		edi, ecx	; edi = tmp10 - tmp12	

		imul	edi, FIX_0_382683433	; edi = z5

		sar		edi, 8
		add		esi, 4

		imul	ecx, FIX_1_306562965

		sar		ecx, 8
		add		ebx, edi	; ebx = z2

		add		ecx, edi	; ecx = z4
		mov		edi, eax
		
//    dataptr[DCTSIZE*5] = z13 + z2; /* phase 6 */
//    dataptr[DCTSIZE*3] = z13 - z2;
//    dataptr[DCTSIZE*1] = z11 + z4;
//    dataptr[DCTSIZE*7] = z11 - z4;

		add		eax, ebx	; eax = z13 + z2
		sub		edi, ebx	; edi = z13 - z2

		mov		[esi][DCTWIDTH*5-4], eax
		mov		ebx, edx

		mov		[esi][DCTWIDTH*3-4], edi
		add		edx, ecx	; edx = z11 + z4

		mov		[esi][DCTWIDTH*1-4], edx
		sub		ebx, ecx	; ebx = z11 - z4

		mov		ecx, counter
		mov		[esi][DCTWIDTH*7-4], ebx

		dec		ecx

		mov		counter, ecx
		jnz		StartCol
  } //end asm

//    dataptr++;			/* advance pointer to next column */
//  }
}

#endif /* X86 */

#endif /* DCT_ISLOW_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\pfint.c ===
/***************************************************************************
*
*                INTEL Corporation Proprietary Information  
*
*      
*                  Copyright (c) 1996 Intel Corporation.
*                         All rights reserved.
*
***************************************************************************
*/
/*
 * jfdctint.c
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains a slow-but-accurate integer implementation of the
 * forward DCT (Discrete Cosine Transform).
 *
 * A 2-D DCT can be done by 1-D DCT on each row followed by 1-D DCT
 * on each column.  Direct algorithms are also available, but they are
 * much more complex and seem not to be any faster when reduced to code.
 *
 * This implementation is based on an algorithm described in
 *   C. Loeffler, A. Ligtenberg and G. Moschytz, "Practical Fast 1-D DCT
 *   Algorithms with 11 Multiplications", Proc. Int'l. Conf. on Acoustics,
 *   Speech, and Signal Processing 1989 (ICASSP '89), pp. 988-991.
 * The primary algorithm described there uses 11 multiplies and 29 adds.
 * We use their alternate method with 12 multiplies and 32 adds.
 * The advantage of this method is that no data path contains more than one
 * multiplication; this allows a very simple and accurate implementation in
 * scaled fixed-point arithmetic, with a minimal number of shifts.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */

#ifdef DCT_ISLOW_SUPPORTED

#ifndef _X86_

GLOBAL(void)
pfdct8x8llm (DCTELEM * data)
{
}

#else


/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif


/*
 * The low-down on this scaling stuff is as follows:
 *
 * Each 1-D DCT step produces outputs which are a factor of sqrt(N)
 * larger than the true DCT outputs.  The final outputs are therefore
 * a factor of N larger than desired; since N=8 this can be cured by
 * a simple right shift at the end of the algorithm.  The advantage of
 * this arrangement is that we save two multiplications per 1-D DCT,
 * because the y0 and y4 outputs need not be divided by sqrt(N).
 * In the IJG code, this factor of 8 is removed by the quantization step
 * (in jcdctmgr.c), NOT in this module.
 *
 * We have to do addition and subtraction of the integer inputs, which
 * is no problem, and multiplication by fractional constants, which is
 * a problem to do in integer arithmetic.  We multiply all the constants
 * by CONST_SCALE and convert them to integer constants (thus retaining
 * CONST_BITS bits of precision in the constants).  After doing a
 * multiplication we have to divide the product by CONST_SCALE, with proper
 * rounding, to produce the correct output.  This division can be done
 * cheaply as a right shift of CONST_BITS bits.  We postpone shifting
 * as long as possible so that partial sums can be added together with
 * full fractional precision.
 *
 * The outputs of the first pass are scaled up by PASS1_BITS bits so that
 * they are represented to better-than-integral precision.  These outputs
 * require BITS_IN_JSAMPLE + PASS1_BITS + 3 bits; this fits in a 16-bit word
 * with the recommended scaling.  (For 12-bit sample data, the intermediate
 * array is INT32 anyway.)
 *
 * To avoid overflow of the 32-bit intermediate results in pass 2, we must
 * have BITS_IN_JSAMPLE + CONST_BITS + PASS1_BITS <= 26.  Error analysis
 * shows that the values given below are the most effective.
 */

#if BITS_IN_JSAMPLE == 8
#define CONST_BITS  13
#define PASS1_BITS  2
#else
#define CONST_BITS  13
#define PASS1_BITS  1		/* lose a little precision to avoid overflow */
#endif

/* Some C compilers fail to reduce "FIX(constant)" at compile time, thus
 * causing a lot of useless floating-point operations at run time.
 * To get around this we use the following pre-calculated constants.
 * If you change CONST_BITS you may want to add appropriate values.
 * (With a reasonable C compiler, you can just rely on the FIX() macro...)
 */

#if CONST_BITS == 13
#define FIX_0_298631336				2446		/* FIX(0.298631336) */
#define FIX_0_390180644				3196		/* FIX(0.390180644) */
#define FIX_0_541196100				4433		/* FIX(0.541196100) */
#define FIX_0_765366865				6270		/* FIX(0.765366865) */
#define FIX_0_899976223				7373		/* FIX(0.899976223) */
#define FIX_1_175875602				9633		/* FIX(1.175875602) */
#define FIX_1_501321110				12299		/* FIX(1.501321110) */
#define FIX_1_847759065				15137		/* FIX(1.847759065) */
#define FIX_1_961570560				16069		/* FIX(1.961570560) */
#define FIX_2_053119869				16819		/* FIX(2.053119869) */
#define FIX_2_562915447				20995		/* FIX(2.562915447) */
#define FIX_3_072711026				25172		/* FIX(3.072711026) */
#else
#define FIX_0_298631336  FIX(0.298631336)
#define FIX_0_390180644  FIX(0.390180644)
#define FIX_0_541196100  FIX(0.541196100)
#define FIX_0_765366865  FIX(0.765366865)
#define FIX_0_899976223  FIX(0.899976223)
#define FIX_1_175875602  FIX(1.175875602)
#define FIX_1_501321110  FIX(1.501321110)
#define FIX_1_847759065  FIX(1.847759065)
#define FIX_1_961570560  FIX(1.961570560)
#define FIX_2_053119869  FIX(2.053119869)
#define FIX_2_562915447  FIX(2.562915447)
#define FIX_3_072711026  FIX(3.072711026)
#endif


/* Multiply an INT32 variable by an INT32 constant to yield an INT32 result.
 * For 8-bit samples with the recommended scaling, all the variable
 * and constant values involved are no more than 16 bits wide, so a
 * 16x16->32 bit multiply can be used instead of a full 32x32 multiply.
 * For 12-bit samples, a full 32-bit multiplication will be needed.
 */

#if BITS_IN_JSAMPLE == 8
#define MULTIPLY(var,const)  MULTIPLY16C16(var,const)
#else
#define MULTIPLY(var,const)  ((var) * (const))
#endif

#define	DATASIZE	4
#define	DCTWIDTH	32

/*
 * Perform the forward DCT on one block of samples.
 */

GLOBAL(void)
pfdct8x8llm (DCTELEM * data)
{
  INT32 tmp4, tmp5, tmp6, tmp7;
  int counter;

  __asm{
 
  /* Pass 1: process rows. */
  /* Note results are scaled up by sqrt(8) compared to a true DCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

//  dataptr = data;
		mov 	esi, [data]
		mov		counter, 8
		
//  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
//   tmp0 = dataptr[0] + dataptr[7];
//   tmp7 = dataptr[0] - dataptr[7];
//    tmp1 = dataptr[1] + dataptr[6];
//    tmp6 = dataptr[1] - dataptr[6];
//    tmp2 = dataptr[2] + dataptr[5];
//    tmp5 = dataptr[2] - dataptr[5];
//    tmp3 = dataptr[3] + dataptr[4];
//    tmp4 = dataptr[3] - dataptr[4];
    
 StartRow:
 		mov		eax, [esi][DATASIZE*0]
 		mov		ebx, [esi][DATASIZE*7]
 		
 		mov		edx, eax
 		add		eax, ebx	; eax = tmp0
 		
 		sub		edx, ebx	; edx = tmp7
  		mov		ebx, [esi][DATASIZE*3]
 
 		mov		ecx, [esi][DATASIZE*4]
 		mov		edi, ebx
 		
 		add		ebx, ecx	; ebx = tmp3
 		sub		edi, ecx	; edi = tmp4
 		
 		mov		tmp4, edi
 		mov		tmp7, edx
 		
    /* Even part per LL&M figure 1 --- note that published figure is faulty;
     * rotator "sqrt(2)*c1" should be "sqrt(2)*c6".
     */
    
//    tmp10 = tmp0 + tmp3;
//    tmp13 = tmp0 - tmp3;
//    tmp11 = tmp1 + tmp2;
//    tmp12 = tmp1 - tmp2;
    
		mov		ecx, eax
		add		eax, ebx	; eax = tmp10
		
		sub		ecx, ebx	; ecx = tmp13
  		mov		edx, [esi][DATASIZE*1] 
  		
  		mov		edi, [esi][DATASIZE*6]
  		mov		ebx, edx
  		
  		add		edx, edi	; edx = tmp1
  		sub		ebx, edi	; ebx = tmp6
  		
  		mov		tmp6, ebx
  		push	ebp
  		
  		mov		edi, [esi][DATASIZE*2]
  		mov		ebp, [esi][DATASIZE*5]

  		mov		ebx, edi
  		add		edi, ebp	; edi = tmp2
  		
  		sub		ebx, ebp	; ebx = tmp5
  		mov		ebp, edx
  		
  		add		edx, edi	; edx = tmp11
  		sub		ebp, edi	; ebp = tmp12
  		
//    dataptr[0] = (DCTELEM) ((tmp10 + tmp11) << PASS1_BITS);
//    dataptr[4] = (DCTELEM) ((tmp10 - tmp11) << PASS1_BITS);
    
		mov		edi, eax
		add		eax, edx	; eax = tmp10 + tmp11
		
		shl		eax, 2
		sub		edi, edx	; edi = tmp10 - tmp11

		shl		edi, 2
		mov		[esi][DATASIZE*0], eax
		
		mov		[esi][DATASIZE*4], edi
		mov		eax, ebp	; eax = tmp12
		
//    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);

		add		ebp, ecx	; eax = tmp12 + tmp13
		add		esi, 32
		
		imul	ebp, FIX_0_541196100	; ebp = z1
		
//    dataptr[2] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp13, FIX_0_765366865),
//				   CONST_BITS-PASS1_BITS);

		imul	ecx, FIX_0_765366865
		
//    dataptr[6] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp12, - FIX_1_847759065),
//				   CONST_BITS-PASS1_BITS);
    
		imul	eax, FIX_1_847759065
		
		add		ecx, ebp		; add z1
		xor		eax, 0xFFFFFFFF
		
		add		ecx, 1024		; rounding adj
		inc		eax				; negate the result
		
		add		eax, ebp		; add z1
		pop		ebp
		
		sar		ecx, 11
		add		eax, 1024

		mov		[esi][DATASIZE*2-32], ecx
		mov		edi, tmp4
		
		sar		eax, 11
		mov		ecx, tmp6

		mov		[esi][DATASIZE*6-32], eax
		push	esi
		
    /* Odd part per figure 8 --- note paper omits factor of sqrt(2).
     * cK represents cos(K*pi/16).
     * i0..i3 in the paper are tmp4..tmp7 here.
     */
    
//    z1 = tmp4 + tmp7;
//    z2 = tmp5 + tmp6;
//    z3 = tmp4 + tmp6;
//    z4 = tmp5 + tmp7;

		mov		edx, tmp7
		mov		eax, edi	; edi = eax = tmp4
		
		mov		esi, edi	; esi = tmp4
		add		edi, edx	; edi = z1

		add		eax, ecx	; eax = z3
		add		ecx, ebx	; ecx = z2
		
//    z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
//    z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */

		imul	edi, FIX_0_899976223

		imul	ecx, FIX_2_562915447

		xor		ecx, 0xFFFFFFFF
		add		edx, ebx	; edx = z4

//    tmp4 = MULTIPLY(tmp4, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
//    tmp5 = MULTIPLY(tmp5, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */

		imul	esi, FIX_0_298631336

		imul	ebx, FIX_2_053119869

		xor		edi, 0xFFFFFFFF
		inc		ecx			; ecx = z2

		inc		edi			; edi = z1
		add		ebx, ecx	; ebx = z2 + tmp5

		add		esi, edi	; esi = z1 + tmp4
		mov		tmp5, ebx

//    z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */

		mov		ebx, eax	; ebx = z3
		add		eax, edx	; eax = z3 + z4

		imul	eax, FIX_1_175875602

//    z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
//    z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
    
		imul	ebx, FIX_1_961570560

		imul	edx, FIX_0_390180644

		xor		ebx, 0xFFFFFFFF
		xor		edx, 0xFFFFFFFF

		inc		ebx		; ebx = z3
		inc		edx		; edx = z4

//    z3 += z5;
//    z4 += z5;

		add		ebx, eax	; ebx = z3
		add		edx, eax	; edx = z4
    
//    tmp6 = MULTIPLY(tmp6, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
//    tmp7 = MULTIPLY(tmp7, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */

		mov		eax, tmp6
		add		ecx, ebx	; ecx = z2 + z3

		imul	eax, FIX_3_072711026

		add		ecx, eax	; ecx = tmp6 + z2 + z3
		mov		eax, tmp7

		imul	eax, FIX_1_501321110

//    dataptr[7] = (DCTELEM) DESCALE(tmp4 + z1 + z3, CONST_BITS-PASS1_BITS);
//    dataptr[5] = (DCTELEM) DESCALE(tmp5 + z2 + z4, CONST_BITS-PASS1_BITS);
//    dataptr[3] = (DCTELEM) DESCALE(tmp6 + z2 + z3, CONST_BITS-PASS1_BITS);
//    dataptr[1] = (DCTELEM) DESCALE(tmp7 + z1 + z4, CONST_BITS-PASS1_BITS);

		add		edi, edx	; edi = z1 + z4
		add		ecx, 1024
		
		add		edi, eax	; edi = tmp7 + z1 + z4
		mov		eax, tmp5	; eax = tmp5 + z2

		add		ebx, esi	; ebx = tmp4 + z1 + z3
		add		edx, eax	; edx = tmp5 + z2 + z4

		sar		ecx, 11
		add		ebx, 1024

		sar		ebx, 11
		pop		esi

		add		edx, 1024
		add		edi, 1024

		sar		edx, 11
		mov		[esi][DATASIZE*7-32], ebx

		sar		edi, 11
		mov		[esi][DATASIZE*3-32], ecx

		mov		[esi][DATASIZE*5-32], edx
		mov		ecx, counter

		mov		[esi][DATASIZE*1-32], edi
		dec		ecx

		mov		counter, ecx
		jnz		StartRow
    
//    dataptr += DCTSIZE;		/* advance pointer to next row */
//  }

  
  
  
  /* Pass 2: process columns.
   * We remove the PASS1_BITS scaling, but leave the results scaled up
   * by an overall factor of 8.
   */


//  dataptr = data;
		mov 	esi, [data]

		mov		counter, 8
    
//for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
//    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
//    tmp7 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
//    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
//    tmp6 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
//    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
//    tmp5 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
//    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
//    tmp4 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];

 StartCol:
 		mov		eax, [esi][DCTWIDTH*0]
 		mov		ebx, [esi][DCTWIDTH*7]
 		
 		mov		edx, eax
 		add		eax, ebx	; eax = tmp0
 		
 		sub		edx, ebx	; edx = tmp7
  		mov		ebx, [esi][DCTWIDTH*3]
 
 		mov		ecx, [esi][DCTWIDTH*4]
 		mov		edi, ebx
 		
 		add		ebx, ecx	; ebx = tmp3
 		sub		edi, ecx	; edi = tmp4
 		
 		mov		tmp4, edi
 		mov		tmp7, edx

    /* Even part per LL&M figure 1 --- note that published figure is faulty;
     * rotator "sqrt(2)*c1" should be "sqrt(2)*c6".
     */
    
//    tmp10 = tmp0 + tmp3;
//    tmp13 = tmp0 - tmp3;
//    tmp11 = tmp1 + tmp2;
//    tmp12 = tmp1 - tmp2;

		mov		ecx, eax	; ecx = tmp0
		add		eax, ebx	; eax = tmp10
		
		sub		ecx, ebx	; ecx = tmp13
  		mov		edx, [esi][DCTWIDTH*1] 
  		
  		mov		edi, [esi][DCTWIDTH*6]
  		mov		ebx, edx
  		
  		add		edx, edi	; edx = tmp1
  		sub		ebx, edi	; ebx = tmp6
  		
  		mov		tmp6, ebx
  		push	ebp
  		
  		mov		edi, [esi][DCTWIDTH*2]
  		mov		ebp, [esi][DCTWIDTH*5]

  		mov		ebx, edi
  		add		edi, ebp	; edi = tmp2
  		
  		sub		ebx, ebp	; ebx = tmp5
		mov		ebp, edx	; ebp = tmp1
		
  		add		edx, edi	; edx = tmp11
 		sub		ebp, edi	; ebx = tmp12

//    dataptr[DCTSIZE*0] = (DCTELEM) DESCALE(tmp10 + tmp11, PASS1_BITS);
//    dataptr[DCTSIZE*4] = (DCTELEM) DESCALE(tmp10 - tmp11, PASS1_BITS);

 		add		eax, 2			; adj for rounding

		mov		edi, eax
		add		eax, edx	; eax = tmp10 + tmp11
		
		sar		eax, 2
		sub		edi, edx	; edi = tmp10 - tmp11

		sar		edi, 2
		mov		[esi][DCTWIDTH*0], eax
		
		mov		[esi][DCTWIDTH*4], edi
		mov		eax, ebp	; eax = tmp12
		
//    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);

		add		ebp, ecx	; eax = tmp12 + tmp13
		add		esi, 4
		
		imul	ebp, FIX_0_541196100	; ebp = z1
    
//    dataptr[DCTSIZE*2] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp13, FIX_0_765366865),
//					   CONST_BITS+PASS1_BITS);

		imul	ecx, FIX_0_765366865
		
//    dataptr[DCTSIZE*6] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp12, - FIX_1_847759065),
//					   CONST_BITS+PASS1_BITS);
    
		imul	eax, FIX_1_847759065
		
		add		ecx, ebp		; add z1
		xor		eax, 0xFFFFFFFF
		
		add		ecx, 16384		; rounding adj
		inc		eax				; negate the result
		
		add		eax, ebp		; add z1
		pop		ebp
		
		sar		ecx, 15
		add		eax, 16384

		mov		[esi][DCTWIDTH*2-4], ecx
		mov		edi, tmp4
		
		sar		eax, 15
		mov		ecx, tmp6

		mov		[esi][DCTWIDTH*6-4], eax
		push	esi

    /* Odd part per figure 8 --- note paper omits factor of sqrt(2).
     * cK represents cos(K*pi/16).
     * i0..i3 in the paper are tmp4..tmp7 here.
     */
    
//    z1 = tmp4 + tmp7;
//    z2 = tmp5 + tmp6;
//    z3 = tmp4 + tmp6;
//    z4 = tmp5 + tmp7;

		mov		edx, tmp7
		mov		eax, edi	; edi = eax = tmp4
		
		mov		esi, edi	; esi = tmp4
		add		edi, edx	; edi = z1

		add		eax, ecx	; eax = z3
		add		ecx, ebx	; ecx = z2

//    z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
//    z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */

		imul	edi, FIX_0_899976223

		imul	ecx, FIX_2_562915447

		xor		ecx, 0xFFFFFFFF
		add		edx, ebx	; edx = z4

//    tmp4 = MULTIPLY(tmp4, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
//    tmp5 = MULTIPLY(tmp5, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */

		imul	esi, FIX_0_298631336

		imul	ebx, FIX_2_053119869

		xor		edi, 0xFFFFFFFF
		inc		ecx			; ecx = z2

		inc		edi			; edi = z1
		add		ebx, ecx	; ebx = z2 + tmp5

		add		esi, edi	; esi = z1 + tmp4
		mov		tmp5, ebx

//    z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
    
		mov		ebx, eax	; ebx = z3
		add		eax, edx	; eax = z3 + z4

		imul	eax, FIX_1_175875602

//    z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
//    z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
    
		imul	ebx, FIX_1_961570560

		imul	edx, FIX_0_390180644

		xor		ebx, 0xFFFFFFFF
		xor		edx, 0xFFFFFFFF

		inc		ebx		; ebx = z3
		inc		edx		; edx = z4

//    z3 += z5;
//    z4 += z5;

		add		ebx, eax	; ebx = z3
		add		edx, eax	; edx = z4
    
//    tmp6 = MULTIPLY(tmp6, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
//    tmp7 = MULTIPLY(tmp7, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */

		mov		eax, tmp6
		add		ecx, ebx	; ecx = z2 + z3

		imul	eax, FIX_3_072711026

		add		ecx, eax	; ecx = tmp6 + z2 + z3
		mov		eax, tmp7

		imul	eax, FIX_1_501321110

//    dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp4 + z1 + z3,
//					   CONST_BITS+PASS1_BITS);
//    dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp5 + z2 + z4,
//					   CONST_BITS+PASS1_BITS);
//    dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp6 + z2 + z3,
//					   CONST_BITS+PASS1_BITS);
//    dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp7 + z1 + z4,
//					   CONST_BITS+PASS1_BITS);

		add		edi, edx	; edi = z1 + z4
		add		ecx, 16384
		
		add		edi, eax	; edi = tmp7 + z1 + z4
		mov		eax, tmp5	; eax = tmp5 + z2

		add		ebx, esi	; ebx = tmp4 + z1 + z3
		add		edx, eax	; edx = tmp5 + z2 + z4

		sar		ecx, 15
		add		ebx, 16384

		sar		ebx, 15
		pop		esi

		add		edx, 16384
		add		edi, 16384

		sar		edx, 15
		mov		[esi][DCTWIDTH*7-4], ebx

		sar		edi, 15
		mov		[esi][DCTWIDTH*3-4], ecx

		mov		[esi][DCTWIDTH*5-4], edx
		mov		ecx, counter

		mov		[esi][DCTWIDTH*1-4], edi
		dec		ecx

		mov		counter, ecx
		jnz		StartCol
  } //end asm

//    dataptr++;			/* advance pointer to next column */
//  }
}

#endif /* X86 */
#endif /* DCT_ISLOW_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\rdcolmap.c ===
/*
 * rdcolmap.c
 *
 * Copyright (C) 1994-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file implements djpeg's "-map file" switch.  It reads a source image
 * and constructs a colormap to be supplied to the JPEG decompressor.
 *
 * Currently, these file formats are supported for the map file:
 *   GIF: the contents of the GIF's global colormap are used.
 *   PPM (either text or raw flavor): the entire file is read and
 *      each unique pixel value is entered in the map.
 * Note that reading a large PPM file will be horrendously slow.
 * Typically, a PPM-format map file should contain just one pixel
 * of each desired color.  Such a file can be extracted from an
 * ordinary image PPM file with ppmtomap(1).
 *
 * Rescaling a PPM that has a maxval unequal to MAXJSAMPLE is not
 * currently implemented.
 */

#include "cdjpeg.h"		/* Common decls for cjpeg/djpeg applications */

#ifdef QUANT_2PASS_SUPPORTED	/* otherwise can't quantize to supplied map */

/* Portions of this code are based on the PBMPLUS library, which is:
**
** Copyright (C) 1988 by Jef Poskanzer.
**
** Permission to use, copy, modify, and distribute this software and its
** documentation for any purpose and without fee is hereby granted, provided
** that the above copyright notice appear in all copies and that both that
** copyright notice and this permission notice appear in supporting
** documentation.  This software is provided "as is" without express or
** implied warranty.
*/


/*
 * Add a (potentially) new color to the color map.
 */

LOCAL(void)
add_map_entry (j_decompress_ptr cinfo, int R, int G, int B)
{
  JSAMPROW colormap0 = cinfo->colormap[0];
  JSAMPROW colormap1 = cinfo->colormap[1];
  JSAMPROW colormap2 = cinfo->colormap[2];
  int ncolors = cinfo->actual_number_of_colors;
  int index;

  /* Check for duplicate color. */
  for (index = 0; index < ncolors; index++) {
    if (GETJSAMPLE(colormap0[index]) == R &&
	GETJSAMPLE(colormap1[index]) == G &&
	GETJSAMPLE(colormap2[index]) == B)
      return;			/* color is already in map */
  }

  /* Check for map overflow. */
  if (ncolors >= (MAXJSAMPLE+1))
    ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, (MAXJSAMPLE+1));

  /* OK, add color to map. */
  colormap0[ncolors] = (JSAMPLE) R;
  colormap1[ncolors] = (JSAMPLE) G;
  colormap2[ncolors] = (JSAMPLE) B;
  cinfo->actual_number_of_colors++;
}


/*
 * Extract color map from a GIF file.
 */

LOCAL(void)
read_gif_map (j_decompress_ptr cinfo, FILE * infile)
{
  int header[13];
  int i, colormaplen;
  int R, G, B;

  /* Initial 'G' has already been read by read_color_map */
  /* Read the rest of the GIF header and logical screen descriptor */
  for (i = 1; i < 13; i++) {
    if ((header[i] = getc(infile)) == EOF)
      ERREXIT(cinfo, JERR_BAD_CMAP_FILE);
  }

  /* Verify GIF Header */
  if (header[1] != 'I' || header[2] != 'F')
    ERREXIT(cinfo, JERR_BAD_CMAP_FILE);

  /* There must be a global color map. */
  if ((header[10] & 0x80) == 0)
    ERREXIT(cinfo, JERR_BAD_CMAP_FILE);

  /* OK, fetch it. */
  colormaplen = 2 << (header[10] & 0x07);

  for (i = 0; i < colormaplen; i++) {
    R = getc(infile);
    G = getc(infile);
    B = getc(infile);
    if (R == EOF || G == EOF || B == EOF)
      ERREXIT(cinfo, JERR_BAD_CMAP_FILE);
    add_map_entry(cinfo,
		  R << (BITS_IN_JSAMPLE-8),
		  G << (BITS_IN_JSAMPLE-8),
		  B << (BITS_IN_JSAMPLE-8));
  }
}


/* Support routines for reading PPM */


LOCAL(int)
pbm_getc (FILE * infile)
/* Read next char, skipping over any comments */
/* A comment/newline sequence is returned as a newline */
{
  register int ch;
  
  ch = getc(infile);
  if (ch == '#') {
    do {
      ch = getc(infile);
    } while (ch != '\n' && ch != EOF);
  }
  return ch;
}


LOCAL(unsigned int)
read_pbm_integer (j_decompress_ptr cinfo, FILE * infile)
/* Read an unsigned decimal integer from the PPM file */
/* Swallows one trailing character after the integer */
/* Note that on a 16-bit-int machine, only values up to 64k can be read. */
/* This should not be a problem in practice. */
{
  register int ch;
  register unsigned int val;
  
  /* Skip any leading whitespace */
  do {
    ch = pbm_getc(infile);
    if (ch == EOF)
      ERREXIT(cinfo, JERR_BAD_CMAP_FILE);
  } while (ch == ' ' || ch == '\t' || ch == '\n' || ch == '\r');
  
  if (ch < '0' || ch > '9')
    ERREXIT(cinfo, JERR_BAD_CMAP_FILE);
  
  val = ch - '0';
  while ((ch = pbm_getc(infile)) >= '0' && ch <= '9') {
    val *= 10;
    val += ch - '0';
  }
  return val;
}


/*
 * Extract color map from a PPM file.
 */

LOCAL(void)
read_ppm_map (j_decompress_ptr cinfo, FILE * infile)
{
  int c;
  unsigned int w, h, maxval, row, col;
  int R, G, B;

  /* Initial 'P' has already been read by read_color_map */
  c = getc(infile);		/* save format discriminator for a sec */

  /* while we fetch the remaining header info */
  w = read_pbm_integer(cinfo, infile);
  h = read_pbm_integer(cinfo, infile);
  maxval = read_pbm_integer(cinfo, infile);

  if (w <= 0 || h <= 0 || maxval <= 0) /* error check */
    ERREXIT(cinfo, JERR_BAD_CMAP_FILE);

  /* For now, we don't support rescaling from an unusual maxval. */
  if (maxval != (unsigned int) MAXJSAMPLE)
    ERREXIT(cinfo, JERR_BAD_CMAP_FILE);

  switch (c) {
  case '3':			/* it's a text-format PPM file */
    for (row = 0; row < h; row++) {
      for (col = 0; col < w; col++) {
	R = read_pbm_integer(cinfo, infile);
	G = read_pbm_integer(cinfo, infile);
	B = read_pbm_integer(cinfo, infile);
	add_map_entry(cinfo, R, G, B);
      }
    }
    break;

  case '6':			/* it's a raw-format PPM file */
    for (row = 0; row < h; row++) {
      for (col = 0; col < w; col++) {
	R = pbm_getc(infile);
	G = pbm_getc(infile);
	B = pbm_getc(infile);
	if (R == EOF || G == EOF || B == EOF)
	  ERREXIT(cinfo, JERR_BAD_CMAP_FILE);
	add_map_entry(cinfo, R, G, B);
      }
    }
    break;

  default:
    ERREXIT(cinfo, JERR_BAD_CMAP_FILE);
    break;
  }
}


/*
 * Main entry point from djpeg.c.
 *  Input: opened input file (from file name argument on command line).
 *  Output: colormap and actual_number_of_colors fields are set in cinfo.
 */

GLOBAL(void)
read_color_map (j_decompress_ptr cinfo, FILE * infile)
{
  /* Allocate space for a color map of maximum supported size. */
  cinfo->colormap = (*cinfo->mem->alloc_sarray)
    ((j_common_ptr) cinfo, JPOOL_IMAGE,
     (JDIMENSION) (MAXJSAMPLE+1), (JDIMENSION) 3);
  cinfo->actual_number_of_colors = 0; /* initialize map to empty */

  /* Read first byte to determine file format */
  switch (getc(infile)) {
  case 'G':
    read_gif_map(cinfo, infile);
    break;
  case 'P':
    read_ppm_map(cinfo, infile);
    break;
  default:
    ERREXIT(cinfo, JERR_BAD_CMAP_FILE);
    break;
  }
}

#endif /* QUANT_2PASS_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\pifst.c ===
/***************************************************************************
*
*                INTEL Corporation Proprietary Information  
*
*      
*                  Copyright (c) 1996 Intel Corporation.
*                         All rights reserved.
*
***************************************************************************
*/
/*
 * jidctfst.c
 *
 * Copyright (C) 1994-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains a fast, not so accurate integer implementation of the
 * inverse DCT (Discrete Cosine Transform).  In the IJG code, this routine
 * must also perform dequantization of the input coefficients.
 *
 * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT
 * on each row (or vice versa, but it's more convenient to emit a row at
 * a time).  Direct algorithms are also available, but they are much more
 * complex and seem not to be any faster when reduced to code.
 *
 * This implementation is based on Arai, Agui, and Nakajima's algorithm for
 * scaled DCT.  Their original paper (Trans. IEICE E-71(11):1095) is in
 * Japanese, but the algorithm is described in the Pennebaker & Mitchell
 * JPEG textbook (see REFERENCES section in file README).  The following code
 * is based directly on figure 4-8 in P&M.
 * While an 8-point DCT cannot be done in less than 11 multiplies, it is
 * possible to arrange the computation so that many of the multiplies are
 * simple scalings of the final outputs.  These multiplies can then be
 * folded into the multiplications or divisions by the JPEG quantization
 * table entries.  The AA&N method leaves only 5 multiplies and 29 adds
 * to be done in the DCT itself.
 * The primary disadvantage of this method is that with fixed-point math,
 * accuracy is lost due to imprecise representation of the scaled
 * quantization values.  The smaller the quantization table entry, the less
 * precise the scaled value, so this implementation does worse with high-
 * quality-setting files than with low-quality ones.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */

#ifdef DCT_IFAST_SUPPORTED

#ifndef _X86_

GLOBAL(void)
pidct8x8aan (JCOEFPTR coef_block, short * wsptr, short * quantptr,
		 JSAMPARRAY output_buf, JDIMENSION output_col, JSAMPLE *range_limit )
{
}

#else


/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif


/* Scaling decisions are generally the same as in the LL&M algorithm;
 * see jidctint.c for more details.  However, we choose to descale
 * (right shift) multiplication products as soon as they are formed,
 * rather than carrying additional fractional bits into subsequent additions.
 * This compromises accuracy slightly, but it lets us save a few shifts.
 * More importantly, 16-bit arithmetic is then adequate (for 8-bit samples)
 * everywhere except in the multiplications proper; this saves a good deal
 * of work on 16-bit-int machines.
 *
 * The dequantized coefficients are not integers because the AA&N scaling
 * factors have been incorporated.  We represent them scaled up by PASS1_BITS,
 * so that the first and second IDCT rounds have the same input scaling.
 * For 8-bit JSAMPLEs, we choose IFAST_SCALE_BITS = PASS1_BITS so as to
 * avoid a descaling shift; this compromises accuracy rather drastically
 * for small quantization table entries, but it saves a lot of shifts.
 * For 12-bit JSAMPLEs, there's no hope of using 16x16 multiplies anyway,
 * so we use a much larger scaling factor to preserve accuracy.
 *
 * A final compromise is to represent the multiplicative constants to only
 * 8 fractional bits, rather than 13.  This saves some shifting work on some
 * machines, and may also reduce the cost of multiplication (since there
 * are fewer one-bits in the constants).
 */

#if BITS_IN_JSAMPLE == 8
#define CONST_BITS  8
#define PASS1_BITS  2
#else
#define CONST_BITS  8
#define PASS1_BITS  1		/* lose a little precision to avoid overflow */
#endif

/* Some C compilers fail to reduce "FIX(constant)" at compile time, thus
 * causing a lot of useless floating-point operations at run time.
 * To get around this we use the following pre-calculated constants.
 * If you change CONST_BITS you may want to add appropriate values.
 * (With a reasonable C compiler, you can just rely on the FIX() macro...)
 */ 

#if CONST_BITS == 8
#define FIX_1_082392200  ((INT32)  277)		/* FIX(1.082392200) */
#define FIX_1_414213562  ((INT32)  362)		/* FIX(1.414213562) */
#define FIX_1_847759065  ((INT32)  473)		/* FIX(1.847759065) */
#define FIX_2_613125930  ((INT32)  669)		/* FIX(2.613125930) */
#else
#define FIX_1_082392200  FIX(1.082392200)
#define FIX_1_414213562  FIX(1.414213562)
#define FIX_1_847759065  FIX(1.847759065)
#define FIX_2_613125930  FIX(2.613125930)
#endif


/* We can gain a little more speed, with a further compromise in accuracy,
 * by omitting the addition in a descaling shift.  This yields an incorrectly
 * rounded result half the time...
 */

#ifndef USE_ACCURATE_ROUNDING
#undef DESCALE
#define DESCALE(x,n)  RIGHT_SHIFT(x, n)
#endif

//#define DESCALE(x,n)  RIGHT_SHIFT((x) + (ONE << ((n)-1)), n)
/* Multiply a DCTELEM variable by an INT32 constant, and immediately
 * descale to yield a DCTELEM result.
 */

//#define MULTIPLY(var,const)  ((DCTELEM) DESCALE((var) * (const), CONST_BITS))
#define MULTIPLY(var,const)  ((DCTELEM) ((var) * (const)))


/* Dequantize a coefficient by multiplying it by the multiplier-table
 * entry; produce a DCTELEM result.  For 8-bit data a 16x16->16
 * multiplication will do.  For 12-bit data, the multiplier table is
 * declared INT32, so a 32-bit multiply will be used.
 */

#if BITS_IN_JSAMPLE == 8
//#define DEQUANTIZE(coef,quantval)  (((IFAST_MULT_TYPE) (coef)) * (quantval))
#define DEQUANTIZE(coef,quantval)  (((coef)) * (quantval))
#else
#define DEQUANTIZE(coef,quantval)  \
	DESCALE((coef)*(quantval), IFAST_SCALE_BITS-PASS1_BITS)
#endif

 
/* Like DESCALE, but applies to a DCTELEM and produces an int.
 * We assume that int right shift is unsigned if INT32 right shift is.
 */

#ifdef RIGHT_SHIFT_IS_UNSIGNED
#define ISHIFT_TEMPS	DCTELEM ishift_temp;
#if BITS_IN_JSAMPLE == 8
#define DCTELEMBITS  16		/* DCTELEM may be 16 or 32 bits */
#else
#define DCTELEMBITS  32		/* DCTELEM must be 32 bits */
#endif
#define IRIGHT_SHIFT(x,shft)  \
    ((ishift_temp = (x)) < 0 ? \
     (ishift_temp >> (shft)) | ((~((DCTELEM) 0)) << (DCTELEMBITS-(shft))) : \
     (ishift_temp >> (shft)))
#else
#define ISHIFT_TEMPS
#define IRIGHT_SHIFT(x,shft)	((x) >> (shft))
#endif

#ifdef USE_ACCURATE_ROUNDING
#define IDESCALE(x,n)  ((int) IRIGHT_SHIFT((x) + (1 << ((n)-1)), n))
#else
#define IDESCALE(x,n)  ((int) IRIGHT_SHIFT(x, n))
#endif


static const long  x5a825a825a825a82	= 0x0000016a ;				
static const long  x539f539f539f539f 	= 0xfffffd63 ;
static const long  x4546454645464546	= 0x00000115 ;	
static const long  x61f861f861f861f8	= 0x000001d9 ;	


/*
 * Perform dequantization and inverse DCT on one block of coefficients.
 */

GLOBAL(void)
pidct8x8aan (JCOEFPTR coef_block, short * wsptr, short * quantptr,
		 JSAMPARRAY output_buf, JDIMENSION output_col, JSAMPLE *range_limit )
{

  INT32	locdwinptr, locdwqptr, locdwwsptr, locwctr ;
  short locwcounter, locwtmp0, locwtmp1	;
  short locwtmp3, scratch1, scratch2, scratch3 ;


  
  // do the 2-Dal idct and store the corresponding results
  // from the range_limit array
//  pidct(coef_block, quantptr, wsptr, output_buf, output_col, range_limit) ;

__asm {


mov esi, coef_block   ; source coeff
mov edi, quantptr	  ; quant pointer

mov locdwinptr, esi
mov eax, wsptr	  ; temp storage pointer

mov locdwqptr, edi
mov locdwwsptr, eax

mov locwcounter, 8

;; perform the 1D-idct on each of the eight columns

idct_column:

mov esi, locdwinptr
mov edi, locdwqptr

mov ax, word ptr [esi+16*0]

mov bx, word ptr [esi+16*4]
imul ax, word ptr [edi+16*0]

mov cx, word ptr [esi+16*2]

imul bx, word ptr [edi+16*4]

mov dx, word ptr [esi+16*6]
imul cx, word ptr [edi+16*2]

imul dx, word ptr [edi+16*6]

;;;; at this point C0, C2, C4 and C6 have been dequantized

mov scratch1, ax
add ax, bx		; tmp10 in ax

sub scratch1, bx		; tmp11 
mov bx, cx

add cx, dx		; tmp13 in cx
sub bx, dx		; tmp1 - tmp3 in bx

mov dx, ax
movsx ebx, bx	; sign extend bx: get ready to do imul

add ax, cx		; tmp0 in ax
imul ebx, dword ptr x5a825a825a825a82

sub dx, cx		; tmp3 in dx
mov locwtmp0, ax 

mov locwtmp3, dx
sar ebx, 8		; bx now has (tmp1-tmp3)*1.414

mov ax, scratch1	; copy of tmp11
sub bx, cx		; tmp12 in bx

add ax, bx		; tmp1 in ax
sub scratch1, bx		; tmp2 

mov locwtmp1, ax

;;;;;completed computing/storing the even part;;;;;;;;;; 

mov ax, [esi+16*1]		; get C1

imul ax, [edi+16*1]
mov bx, [esi+16*7]		; get C7

mov cx, [esi+16*3]

imul bx, [edi+16*7]	

mov dx, [esi+16*5]

imul cx, [edi+16*3]

imul dx, [edi+16*5]

mov scratch2, ax
add ax, bx		; z11 in ax

sub scratch2, bx		; z12 
mov bx, dx		; copy of deQ C5

add dx, cx		; z13 in dx
sub bx, cx		; z10 in bx

mov cx, ax		; copy of z11
add ax, dx		; tmp7 in ax

sub cx, dx		; partial tmp11

movsx ecx, cx
mov dx, bx		; copy of z10

add bx, scratch2		; partial z5 
imul ecx, dword ptr x5a825a825a825a82

movsx edx, dx	; sign extend z10: get ready for imul
movsx ebx, bx	; sign extend partial z5 for imul

imul edx, dword ptr x539f539f539f539f	; partial tmp12
imul ebx, dword ptr x61f861f861f861f8	; partial z5 product

mov	di, scratch2
movsx edi, di	; sign extend z12: get ready for imul
sar ecx, 8		; tmp11 in cx

sar ebx, 8		; z5 in bx
imul edi, dword ptr x4546454645464546

sar edx, 8
sar edi, 8

sub di, bx		; tmp10 
add dx, bx		; tmp12 in dx

sub dx, ax		; tmp6 in dx

sub cx, dx		; tmp5 in cx

add di, cx		; tmp4 
mov	scratch3, di

;;; completed calculating the odd part ;;;;;;;;;;;

mov edi, dword ptr locdwwsptr	; get address of temp. destn

mov si, ax		; copy of tmp7
mov bx, locwtmp0	; get tmp0

add ax, locwtmp0	; wsptr[0]
sub bx, si		; wsptr[7]

mov word ptr [edi+16*0], ax
mov word ptr [edi+16*7], bx

mov ax, dx		; copy of tmp6
mov bx, locwtmp1

add dx, bx		; wsptr[1]
sub bx, ax		; wsptr[6]

mov word ptr [edi+16*1], dx
mov word ptr [edi+16*6], bx

mov dx, cx		; copy of tmp5
mov bx, scratch1


add cx, bx		; wsptr[2]
sub bx, dx		; wsptr[5]

mov word ptr [edi+16*2], cx
mov word ptr [edi+16*5], bx

mov cx, scratch3		; copy of tmp4
mov ax, locwtmp3

add scratch3, ax		; wsptr[4]
sub ax, cx		; wsptr[3]

mov	bx, scratch3
mov word ptr [edi+16*4], bx
mov word ptr [edi+16*3], ax

;;;;; completed storing 1D idct of one column ;;;;;;;;

;; update inptr, qptr and wsptr for next column

add locdwinptr, 2
add locdwqptr, 2

add locdwwsptr, 2
mov ax, locwcounter	; get loop count

dec ax		; another loop done

mov locwcounter, ax
jnz idct_column

;;;;;;; end of 1D idct on all columns  ;;;;;;;
;;;;;;; temp result is stored in wsptr  ;;;;;;;

;;;;;;; perform 1D-idct on each row and store final result

mov esi, wsptr	; initialize source ptr to original wsptr
mov locwctr, 0

mov locwcounter, 8
mov locdwwsptr, esi

idct_row:

mov edi, output_buf
mov esi, locdwwsptr

add edi, locwctr

mov	edi, [edi]		; get output_buf[ctr]

add edi, output_col	; now edi is pointing to the resp. row
add locwctr, 4

;; get even coeffs. and do the even part

mov ax, word ptr [esi+2*0]

mov bx, word ptr [esi+2*4]

mov cx, word ptr [esi+2*2]

mov dx, word ptr [esi+2*6]

mov scratch1, ax
add ax, bx		; tmp10 in ax

sub scratch1, bx		; tmp11 
mov bx, cx

add cx, dx		; tmp13 in cx
sub bx, dx		; tmp1 - tmp3 in bx

mov dx, ax
movsx ebx, bx	; sign extend bx: get ready to do imul

add ax, cx		; tmp0 in ax
imul ebx, dword ptr x5a825a825a825a82

sub dx, cx		; tmp3 in dx
mov locwtmp0, ax 

mov locwtmp3, dx
sar ebx, 8		; bx now has (tmp1-tmp3)*1.414

mov ax, scratch1	; copy of tmp11
sub bx, cx		; tmp12 in bx

add ax, bx		; tmp1 in ax
sub scratch1, bx		; tmp2 

mov locwtmp1, ax

;;;;;completed computing/storing the even part;;;;;;;;;; 

mov ax, [esi+2*1]		; get C1
mov bx, [esi+2*7]		; get C7

mov cx, [esi+2*3]
mov dx, [esi+2*5]

mov scratch2, ax
add ax, bx		; z11 in ax

sub scratch2, bx		; z12 
mov bx, dx		; copy of deQ C5

add dx, cx		; z13 in dx
sub bx, cx		; z10 in bx

mov cx, ax		; copy of z11
add ax, dx		; tmp7 in ax

sub cx, dx		; partial tmp11

movsx ecx, cx
mov dx, bx		; copy of z10

add bx, scratch2	; partial z5 
imul ecx, dword ptr x5a825a825a825a82

movsx edx, dx	; sign extend z10: get ready for imul
movsx ebx, bx	; sign extend partial z5 for imul

imul edx, dword ptr x539f539f539f539f	; partial tmp12
imul ebx, dword ptr x61f861f861f861f8	; partial z5 product

mov	si, scratch2
movsx esi, si	; sign extend z12: get ready for imul
sar ecx, 8		; tmp11 in cx

sar ebx, 8		; z5 in bx
imul esi, dword ptr x4546454645464546

sar edx, 8
sar esi, 8

sub si, bx		; tmp10 
add dx, bx		; tmp12 in dx

sub dx, ax		; tmp6 in dx

sub cx, dx		; tmp5 in cx

add si, cx		; tmp4 
mov	scratch3, si

;;; completed calculating the odd part ;;;;;;;;;;;

mov si, ax		; copy of tmp7
mov bx, locwtmp0	; get tmp0

add ax, locwtmp0	; wsptr[0]
sub bx, si		; wsptr[7]

mov esi, range_limit	; initialize esi to range_limit pointer

sar ax, 5
sar bx, 5

and eax, 3ffh
and ebx, 3ffh

mov al, byte ptr [esi][eax]
mov bl, byte ptr [esi][ebx]

mov byte ptr [edi+0], al
mov byte ptr [edi+7], bl

mov ax, dx		; copy of tmp6
mov bx, locwtmp1

add dx, bx		; wsptr[1]
sub bx, ax		; wsptr[6]

sar dx, 5
sar bx, 5

and edx, 3ffh
and ebx, 3ffh

mov dl, byte ptr [esi][edx]
mov bl, byte ptr [esi][ebx]

mov byte ptr [edi+1], dl
mov byte ptr [edi+6], bl

mov dx, cx		; copy of tmp5
mov bx, scratch1

add cx, bx		; wsptr[2]
sub bx, dx		; wsptr[5]

sar cx, 5
sar bx, 5

and ecx, 3ffh
and ebx, 3ffh

mov cl, byte ptr [esi][ecx]
mov bl, byte ptr [esi][ebx]

mov byte ptr [edi+2], cl
mov byte ptr [edi+5], bl

mov cx, scratch3		; copy of tmp4
mov ax, locwtmp3

add scratch3, ax		; wsptr[4]
sub ax, cx		; wsptr[3]

sar scratch3, 5
sar ax, 5

mov	cx, scratch3

and ecx, 3ffh
and eax, 3ffh


mov bl, byte ptr [esi][ecx]
mov al, byte ptr [esi][eax]

mov byte ptr [edi+4], bl
mov byte ptr [edi+3], al

;;;;; completed storing 1D idct of one row ;;;;;;;;

;; update the source pointer (wsptr) for next row

add locdwwsptr, 16

mov ax, locwcounter	; get loop count

dec ax		; another loop done

mov locwcounter, ax
jnz idct_row


;; end of 1D idct on all rows
;; final result is stored in outptr

}	/* end of __asm */
}

#endif /* X86 */

#endif /* DCT_IFAST_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\rdjpgcom.c ===
/*
 * rdjpgcom.c
 *
 * Copyright (C) 1994-1995, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains a very simple stand-alone application that displays
 * the text in COM (comment) markers in a JFIF file.
 * This may be useful as an example of the minimum logic needed to parse
 * JPEG markers.
 */

#define JPEG_CJPEG_DJPEG	/* to get the command-line config symbols */
#include "jinclude.h"		/* get auto-config symbols, <stdio.h> */

#include <ctype.h>		/* to declare isupper(), tolower() */
#ifdef USE_SETMODE
#include <fcntl.h>		/* to declare setmode()'s parameter macros */
/* If you have setmode() but not <io.h>, just delete this line: */
#include <io.h>			/* to declare setmode() */
#endif

#ifdef USE_CCOMMAND		/* command-line reader for Macintosh */
#ifdef __MWERKS__
#include <SIOUX.h>              /* Metrowerks needs this */
#include <console.h>		/* ... and this */
#endif
#ifdef THINK_C
#include <console.h>		/* Think declares it here */
#endif
#endif

#ifdef DONT_USE_B_MODE		/* define mode parameters for fopen() */
#define READ_BINARY	"r"
#else
#define READ_BINARY	"rb"
#endif

#ifndef EXIT_FAILURE		/* define exit() codes if not provided */
#define EXIT_FAILURE  1
#endif
#ifndef EXIT_SUCCESS
#ifdef VMS
#define EXIT_SUCCESS  1		/* VMS is very nonstandard */
#else
#define EXIT_SUCCESS  0
#endif
#endif


/*
 * These macros are used to read the input file.
 * To reuse this code in another application, you might need to change these.
 */

static FILE * infile;		/* input JPEG file */

/* Return next input byte, or EOF if no more */
#define NEXTBYTE()  getc(infile)


/* Error exit handler */
#define ERREXIT(msg)  (fprintf(stderr, "%s\n", msg), exit(EXIT_FAILURE))


/* Read one byte, testing for EOF */
static int
read_1_byte (void)
{
  int c;

  c = NEXTBYTE();
  if (c == EOF)
    ERREXIT("Premature EOF in JPEG file");
  return c;
}

/* Read 2 bytes, convert to unsigned int */
/* All 2-byte quantities in JPEG markers are MSB first */
static unsigned int
read_2_bytes (void)
{
  int c1, c2;

  c1 = NEXTBYTE();
  if (c1 == EOF)
    ERREXIT("Premature EOF in JPEG file");
  c2 = NEXTBYTE();
  if (c2 == EOF)
    ERREXIT("Premature EOF in JPEG file");
  return (((unsigned int) c1) << 8) + ((unsigned int) c2);
}


/*
 * JPEG markers consist of one or more 0xFF bytes, followed by a marker
 * code byte (which is not an FF).  Here are the marker codes of interest
 * in this program.  (See jdmarker.c for a more complete list.)
 */

#define M_SOF0  0xC0		/* Start Of Frame N */
#define M_SOF1  0xC1		/* N indicates which compression process */
#define M_SOF2  0xC2		/* Only SOF0-SOF2 are now in common use */
#define M_SOF3  0xC3
#define M_SOF5  0xC5		/* NB: codes C4 and CC are NOT SOF markers */
#define M_SOF6  0xC6
#define M_SOF7  0xC7
#define M_SOF9  0xC9
#define M_SOF10 0xCA
#define M_SOF11 0xCB
#define M_SOF13 0xCD
#define M_SOF14 0xCE
#define M_SOF15 0xCF
#define M_SOI   0xD8		/* Start Of Image (beginning of datastream) */
#define M_EOI   0xD9		/* End Of Image (end of datastream) */
#define M_SOS   0xDA		/* Start Of Scan (begins compressed data) */
#define M_COM   0xFE		/* COMment */


/*
 * Find the next JPEG marker and return its marker code.
 * We expect at least one FF byte, possibly more if the compressor used FFs
 * to pad the file.
 * There could also be non-FF garbage between markers.  The treatment of such
 * garbage is unspecified; we choose to skip over it but emit a warning msg.
 * NB: this routine must not be used after seeing SOS marker, since it will
 * not deal correctly with FF/00 sequences in the compressed image data...
 */

static int
next_marker (void)
{
  int c;
  int discarded_bytes = 0;

  /* Find 0xFF byte; count and skip any non-FFs. */
  c = read_1_byte();
  while (c != 0xFF) {
    discarded_bytes++;
    c = read_1_byte();
  }
  /* Get marker code byte, swallowing any duplicate FF bytes.  Extra FFs
   * are legal as pad bytes, so don't count them in discarded_bytes.
   */
  do {
    c = read_1_byte();
  } while (c == 0xFF);

  if (discarded_bytes != 0) {
    fprintf(stderr, "Warning: garbage data found in JPEG file\n");
  }

  return c;
}


/*
 * Read the initial marker, which should be SOI.
 * For a JFIF file, the first two bytes of the file should be literally
 * 0xFF M_SOI.  To be more general, we could use next_marker, but if the
 * input file weren't actually JPEG at all, next_marker might read the whole
 * file and then return a misleading error message...
 */

static int
first_marker (void)
{
  int c1, c2;

  c1 = NEXTBYTE();
  c2 = NEXTBYTE();
  if (c1 != 0xFF || c2 != M_SOI)
    ERREXIT("Not a JPEG file");
  return c2;
}


/*
 * Most types of marker are followed by a variable-length parameter segment.
 * This routine skips over the parameters for any marker we don't otherwise
 * want to process.
 * Note that we MUST skip the parameter segment explicitly in order not to
 * be fooled by 0xFF bytes that might appear within the parameter segment;
 * such bytes do NOT introduce new markers.
 */

static void
skip_variable (void)
/* Skip over an unknown or uninteresting variable-length marker */
{
  unsigned int length;

  /* Get the marker parameter length count */
  length = read_2_bytes();
  /* Length includes itself, so must be at least 2 */
  if (length < 2)
    ERREXIT("Erroneous JPEG marker length");
  length -= 2;
  /* Skip over the remaining bytes */
  while (length > 0) {
    (void) read_1_byte();
    length--;
  }
}


/*
 * Process a COM marker.
 * We want to print out the marker contents as legible text;
 * we must guard against random junk and varying newline representations.
 */

static void
process_COM (void)
{
  unsigned int length;
  int ch;
  int lastch = 0;

  /* Get the marker parameter length count */
  length = read_2_bytes();
  /* Length includes itself, so must be at least 2 */
  if (length < 2)
    ERREXIT("Erroneous JPEG marker length");
  length -= 2;

  while (length > 0) {
    ch = read_1_byte();
    /* Emit the character in a readable form.
     * Nonprintables are converted to \nnn form,
     * while \ is converted to \\.
     * Newlines in CR, CR/LF, or LF form will be printed as one newline.
     */
    if (ch == '\r') {
      printf("\n");
    } else if (ch == '\n') {
      if (lastch != '\r')
	printf("\n");
    } else if (ch == '\\') {
      printf("\\\\");
    } else if (isprint(ch)) {
      putc(ch, stdout);
    } else {
      printf("\\%03o", ch);
    }
    lastch = ch;
    length--;
  }
  printf("\n");
}


/*
 * Process a SOFn marker.
 * This code is only needed if you want to know the image dimensions...
 */

static void
process_SOFn (int marker)
{
  unsigned int length;
  unsigned int image_height, image_width;
  int data_precision, num_components;
  const char * process;
  int ci;

  length = read_2_bytes();	/* usual parameter length count */

  data_precision = read_1_byte();
  image_height = read_2_bytes();
  image_width = read_2_bytes();
  num_components = read_1_byte();

  switch (marker) {
  case M_SOF0:	process = "Baseline";  break;
  case M_SOF1:	process = "Extended sequential";  break;
  case M_SOF2:	process = "Progressive";  break;
  case M_SOF3:	process = "Lossless";  break;
  case M_SOF5:	process = "Differential sequential";  break;
  case M_SOF6:	process = "Differential progressive";  break;
  case M_SOF7:	process = "Differential lossless";  break;
  case M_SOF9:	process = "Extended sequential, arithmetic coding";  break;
  case M_SOF10:	process = "Progressive, arithmetic coding";  break;
  case M_SOF11:	process = "Lossless, arithmetic coding";  break;
  case M_SOF13:	process = "Differential sequential, arithmetic coding";  break;
  case M_SOF14:	process = "Differential progressive, arithmetic coding"; break;
  case M_SOF15:	process = "Differential lossless, arithmetic coding";  break;
  default:	process = "Unknown";  break;
  }

  printf("JPEG image is %uw * %uh, %d color components, %d bits per sample\n",
	 image_width, image_height, num_components, data_precision);
  printf("JPEG process: %s\n", process);

  if (length != (unsigned int) (8 + num_components * 3))
    ERREXIT("Bogus SOF marker length");

  for (ci = 0; ci < num_components; ci++) {
    (void) read_1_byte();	/* Component ID code */
    (void) read_1_byte();	/* H, V sampling factors */
    (void) read_1_byte();	/* Quantization table number */
  }
}


/*
 * Parse the marker stream until SOS or EOI is seen;
 * display any COM markers.
 * While the companion program wrjpgcom will always insert COM markers before
 * SOFn, other implementations might not, so we scan to SOS before stopping.
 * If we were only interested in the image dimensions, we would stop at SOFn.
 * (Conversely, if we only cared about COM markers, there would be no need
 * for special code to handle SOFn; we could treat it like other markers.)
 */

static int
scan_JPEG_header (int verbose)
{
  int marker;

  /* Expect SOI at start of file */
  if (first_marker() != M_SOI)
    ERREXIT("Expected SOI marker first");

  /* Scan miscellaneous markers until we reach SOS. */
  for (;;) {
    marker = next_marker();
    switch (marker) {
    case M_SOF0:		/* Baseline */
    case M_SOF1:		/* Extended sequential, Huffman */
    case M_SOF2:		/* Progressive, Huffman */
    case M_SOF3:		/* Lossless, Huffman */
    case M_SOF5:		/* Differential sequential, Huffman */
    case M_SOF6:		/* Differential progressive, Huffman */
    case M_SOF7:		/* Differential lossless, Huffman */
    case M_SOF9:		/* Extended sequential, arithmetic */
    case M_SOF10:		/* Progressive, arithmetic */
    case M_SOF11:		/* Lossless, arithmetic */
    case M_SOF13:		/* Differential sequential, arithmetic */
    case M_SOF14:		/* Differential progressive, arithmetic */
    case M_SOF15:		/* Differential lossless, arithmetic */
      if (verbose)
	process_SOFn(marker);
      else
	skip_variable();
      break;

    case M_SOS:			/* stop before hitting compressed data */
      return marker;

    case M_EOI:			/* in case it's a tables-only JPEG stream */
      return marker;

    case M_COM:
      process_COM();
      break;

    default:			/* Anything else just gets skipped */
      skip_variable();		/* we assume it has a parameter count... */
      break;
    }
  } /* end loop */
}


/* Command line parsing code */

static const char * progname;	/* program name for error messages */


static void
usage (void)
/* complain about bad command line */
{
  fprintf(stderr, "rdjpgcom displays any textual comments in a JPEG file.\n");

  fprintf(stderr, "Usage: %s [switches] [inputfile]\n", progname);

  fprintf(stderr, "Switches (names may be abbreviated):\n");
  fprintf(stderr, "  -verbose    Also display dimensions of JPEG image\n");

  exit(EXIT_FAILURE);
}


static int
keymatch (char * arg, const char * keyword, int minchars)
/* Case-insensitive matching of (possibly abbreviated) keyword switches. */
/* keyword is the constant keyword (must be lower case already), */
/* minchars is length of minimum legal abbreviation. */
{
  register int ca, ck;
  register int nmatched = 0;

  while ((ca = *arg++) != '\0') {
    if ((ck = *keyword++) == '\0')
      return 0;			/* arg longer than keyword, no good */
    if (isupper(ca))		/* force arg to lcase (assume ck is already) */
      ca = tolower(ca);
    if (ca != ck)
      return 0;			/* no good */
    nmatched++;			/* count matched characters */
  }
  /* reached end of argument; fail if it's too short for unique abbrev */
  if (nmatched < minchars)
    return 0;
  return 1;			/* A-OK */
}


/*
 * The main program.
 */

int
main (int argc, char **argv)
{
  int argn;
  char * arg;
  int verbose = 0;

  /* On Mac, fetch a command line. */
#ifdef USE_CCOMMAND
  argc = ccommand(&argv);
#endif

  progname = argv[0];
  if (progname == NULL || progname[0] == 0)
    progname = "rdjpgcom";	/* in case C library doesn't provide it */

  /* Parse switches, if any */
  for (argn = 1; argn < argc; argn++) {
    arg = argv[argn];
    if (arg[0] != '-')
      break;			/* not switch, must be file name */
    arg++;			/* advance over '-' */
    if (keymatch(arg, "verbose", 1)) {
      verbose++;
    } else
      usage();
  }

  /* Open the input file. */
  /* Unix style: expect zero or one file name */
  if (argn < argc-1) {
    fprintf(stderr, "%s: only one input file\n", progname);
    usage();
  }
  if (argn < argc) {
    if ((infile = fopen(argv[argn], READ_BINARY)) == NULL) {
      fprintf(stderr, "%s: can't open %s\n", progname, argv[argn]);
      exit(EXIT_FAILURE);
    }
  } else {
    /* default input file is stdin */
#ifdef USE_SETMODE		/* need to hack file mode? */
    setmode(fileno(stdin), O_BINARY);
#endif
#ifdef USE_FDOPEN		/* need to re-open in binary mode? */
    if ((infile = fdopen(fileno(stdin), READ_BINARY)) == NULL) {
      fprintf(stderr, "%s: can't open stdin\n", progname);
      exit(EXIT_FAILURE);
    }
#else
    infile = stdin;
#endif
  }

  /* Scan the JPEG headers. */
  (void) scan_JPEG_header(verbose);

  /* All done. */
  exit(EXIT_SUCCESS);
  return 0;			/* suppress no-return-value warnings */
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\rdbmp.c ===
/*
 * rdbmp.c
 *
 * Copyright (C) 1994-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains routines to read input images in Microsoft "BMP"
 * format (MS Windows 3.x, OS/2 1.x, and OS/2 2.x flavors).
 * Currently, only 8-bit and 24-bit images are supported, not 1-bit or
 * 4-bit (feeding such low-depth images into JPEG would be silly anyway).
 * Also, we don't support RLE-compressed files.
 *
 * These routines may need modification for non-Unix environments or
 * specialized applications.  As they stand, they assume input from
 * an ordinary stdio stream.  They further assume that reading begins
 * at the start of the file; start_input may need work if the
 * user interface has already read some data (e.g., to determine that
 * the file is indeed BMP format).
 *
 * This code contributed by James Arthur Boucher.
 */

#include "cdjpeg.h"		/* Common decls for cjpeg/djpeg applications */

#ifdef BMP_SUPPORTED


/* Macros to deal with unsigned chars as efficiently as compiler allows */

#ifdef HAVE_UNSIGNED_CHAR
typedef unsigned char U_CHAR;
#define UCH(x)	((int) (x))
#else /* !HAVE_UNSIGNED_CHAR */
#ifdef CHAR_IS_UNSIGNED
typedef char U_CHAR;
#define UCH(x)	((int) (x))
#else
typedef char U_CHAR;
#define UCH(x)	((int) (x) & 0xFF)
#endif
#endif /* HAVE_UNSIGNED_CHAR */


#define	ReadOK(file,buffer,len)	(JFREAD(file,buffer,len) == ((size_t) (len)))


/* Private version of data source object */

typedef struct _bmp_source_struct * bmp_source_ptr;

typedef struct _bmp_source_struct {
  struct cjpeg_source_struct pub; /* public fields */

  j_compress_ptr cinfo;		/* back link saves passing separate parm */

  JSAMPARRAY colormap;		/* BMP colormap (converted to my format) */

  jvirt_sarray_ptr whole_image;	/* Needed to reverse row order */
  JDIMENSION source_row;	/* Current source row number */
  JDIMENSION row_width;		/* Physical width of scanlines in file */

  int bits_per_pixel;		/* remembers 8- or 24-bit format */
} bmp_source_struct;


LOCAL(int)
read_byte (bmp_source_ptr sinfo)
/* Read next byte from BMP file */
{
  register FILE *infile = sinfo->pub.input_file;
  register int c;

  if ((c = getc(infile)) == EOF)
    ERREXIT(sinfo->cinfo, JERR_INPUT_EOF);
  return c;
}


LOCAL(void)
read_colormap (bmp_source_ptr sinfo, int cmaplen, int mapentrysize)
/* Read the colormap from a BMP file */
{
  int i;

  switch (mapentrysize) {
  case 3:
    /* BGR format (occurs in OS/2 files) */
    for (i = 0; i < cmaplen; i++) {
      sinfo->colormap[2][i] = (JSAMPLE) read_byte(sinfo);
      sinfo->colormap[1][i] = (JSAMPLE) read_byte(sinfo);
      sinfo->colormap[0][i] = (JSAMPLE) read_byte(sinfo);
    }
    break;
  case 4:
    /* BGR0 format (occurs in MS Windows files) */
    for (i = 0; i < cmaplen; i++) {
      sinfo->colormap[2][i] = (JSAMPLE) read_byte(sinfo);
      sinfo->colormap[1][i] = (JSAMPLE) read_byte(sinfo);
      sinfo->colormap[0][i] = (JSAMPLE) read_byte(sinfo);
      (void) read_byte(sinfo);
    }
    break;
  default:
    ERREXIT(sinfo->cinfo, JERR_BMP_BADCMAP);
    break;
  }
}


/*
 * Read one row of pixels.
 * The image has been read into the whole_image array, but is otherwise
 * unprocessed.  We must read it out in top-to-bottom row order, and if
 * it is an 8-bit image, we must expand colormapped pixels to 24bit format.
 */

METHODDEF(JDIMENSION)
get_8bit_row (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
/* This version is for reading 8-bit colormap indexes */
{
  bmp_source_ptr source = (bmp_source_ptr) sinfo;
  register JSAMPARRAY colormap = source->colormap;
  JSAMPARRAY image_ptr;
  register int t;
  register JSAMPROW inptr, outptr;
  register JDIMENSION col;

  /* Fetch next row from virtual array */
  source->source_row--;
  image_ptr = (*cinfo->mem->access_virt_sarray)
    ((j_common_ptr) cinfo, source->whole_image,
     source->source_row, (JDIMENSION) 1, FALSE);

  /* Expand the colormap indexes to real data */
  inptr = image_ptr[0];
  outptr = source->pub.buffer[0];
  for (col = cinfo->image_width; col > 0; col--) {
    t = GETJSAMPLE(*inptr++);
    *outptr++ = colormap[0][t];	/* can omit GETJSAMPLE() safely */
    *outptr++ = colormap[1][t];
    *outptr++ = colormap[2][t];
  }

  return 1;
}


METHODDEF(JDIMENSION)
get_24bit_row (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
/* This version is for reading 24-bit pixels */
{
  bmp_source_ptr source = (bmp_source_ptr) sinfo;
  JSAMPARRAY image_ptr;
  register JSAMPROW inptr, outptr;
  register JDIMENSION col;

  /* Fetch next row from virtual array */
  source->source_row--;
  image_ptr = (*cinfo->mem->access_virt_sarray)
    ((j_common_ptr) cinfo, source->whole_image,
     source->source_row, (JDIMENSION) 1, FALSE);

  /* Transfer data.  Note source values are in BGR order
   * (even though Microsoft's own documents say the opposite).
   */
  inptr = image_ptr[0];
  outptr = source->pub.buffer[0];
  for (col = cinfo->image_width; col > 0; col--) {
    outptr[2] = *inptr++;	/* can omit GETJSAMPLE() safely */
    outptr[1] = *inptr++;
    outptr[0] = *inptr++;
    outptr += 3;
  }

  return 1;
}


/*
 * This method loads the image into whole_image during the first call on
 * get_pixel_rows.  The get_pixel_rows pointer is then adjusted to call
 * get_8bit_row or get_24bit_row on subsequent calls.
 */

METHODDEF(JDIMENSION)
preload_image (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
{
  bmp_source_ptr source = (bmp_source_ptr) sinfo;
  register FILE *infile = source->pub.input_file;
  register int c;
  register JSAMPROW out_ptr;
  JSAMPARRAY image_ptr;
  JDIMENSION row, col;
  cd_progress_ptr progress = (cd_progress_ptr) cinfo->progress;

  /* Read the data into a virtual array in input-file row order. */
  for (row = 0; row < cinfo->image_height; row++) {
    if (progress != NULL) {
      progress->pub.pass_counter = (long) row;
      progress->pub.pass_limit = (long) cinfo->image_height;
      (*progress->pub.progress_monitor) ((j_common_ptr) cinfo);
    }
    image_ptr = (*cinfo->mem->access_virt_sarray)
      ((j_common_ptr) cinfo, source->whole_image,
       row, (JDIMENSION) 1, TRUE);
    out_ptr = image_ptr[0];
    for (col = source->row_width; col > 0; col--) {
      /* inline copy of read_byte() for speed */
      if ((c = getc(infile)) == EOF)
	ERREXIT(cinfo, JERR_INPUT_EOF);
      *out_ptr++ = (JSAMPLE) c;
    }
  }
  if (progress != NULL)
    progress->completed_extra_passes++;

  /* Set up to read from the virtual array in top-to-bottom order */
  switch (source->bits_per_pixel) {
  case 8:
    source->pub.get_pixel_rows = get_8bit_row;
    break;
  case 24:
    source->pub.get_pixel_rows = get_24bit_row;
    break;
  default:
    ERREXIT(cinfo, JERR_BMP_BADDEPTH);
  }
  source->source_row = cinfo->image_height;

  /* And read the first row */
  return (*source->pub.get_pixel_rows) (cinfo, sinfo);
}


/*
 * Read the file header; return image size and component count.
 */

METHODDEF(void)
start_input_bmp (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
{
  bmp_source_ptr source = (bmp_source_ptr) sinfo;
  U_CHAR bmpfileheader[14];
  U_CHAR bmpinfoheader[64];
#define GET_2B(array,offset)  ((unsigned int) UCH(array[offset]) + \
			       (((unsigned int) UCH(array[offset+1])) << 8))
#define GET_4B(array,offset)  ((INT32) UCH(array[offset]) + \
			       (((INT32) UCH(array[offset+1])) << 8) + \
			       (((INT32) UCH(array[offset+2])) << 16) + \
			       (((INT32) UCH(array[offset+3])) << 24))
  INT32 bfOffBits;
  INT32 headerSize;
  INT32 biWidth = 0;		/* initialize to avoid compiler warning */
  INT32 biHeight = 0;
  unsigned int biPlanes;
  INT32 biCompression;
  INT32 biXPelsPerMeter,biYPelsPerMeter;
  INT32 biClrUsed = 0;
  int mapentrysize = 0;		/* 0 indicates no colormap */
  INT32 bPad;
  JDIMENSION row_width;

  /* Read and verify the bitmap file header */
  if (! ReadOK(source->pub.input_file, bmpfileheader, 14))
    ERREXIT(cinfo, JERR_INPUT_EOF);
  if (GET_2B(bmpfileheader,0) != 0x4D42) /* 'BM' */
    ERREXIT(cinfo, JERR_BMP_NOT);
  bfOffBits = (INT32) GET_4B(bmpfileheader,10);
  /* We ignore the remaining fileheader fields */

  /* The infoheader might be 12 bytes (OS/2 1.x), 40 bytes (Windows),
   * or 64 bytes (OS/2 2.x).  Check the first 4 bytes to find out which.
   */
  if (! ReadOK(source->pub.input_file, bmpinfoheader, 4))
    ERREXIT(cinfo, JERR_INPUT_EOF);
  headerSize = (INT32) GET_4B(bmpinfoheader,0);
  if (headerSize < 12 || headerSize > 64)
    ERREXIT(cinfo, JERR_BMP_BADHEADER);
  if (! ReadOK(source->pub.input_file, bmpinfoheader+4, headerSize-4))
    ERREXIT(cinfo, JERR_INPUT_EOF);

  switch ((int) headerSize) {
  case 12:
    /* Decode OS/2 1.x header (Microsoft calls this a BITMAPCOREHEADER) */
    biWidth = (INT32) GET_2B(bmpinfoheader,4);
    biHeight = (INT32) GET_2B(bmpinfoheader,6);
    biPlanes = GET_2B(bmpinfoheader,8);
    source->bits_per_pixel = (int) GET_2B(bmpinfoheader,10);

    switch (source->bits_per_pixel) {
    case 8:			/* colormapped image */
      mapentrysize = 3;		/* OS/2 uses RGBTRIPLE colormap */
      TRACEMS2(cinfo, 1, JTRC_BMP_OS2_MAPPED, (int) biWidth, (int) biHeight);
      break;
    case 24:			/* RGB image */
      TRACEMS2(cinfo, 1, JTRC_BMP_OS2, (int) biWidth, (int) biHeight);
      break;
    default:
      ERREXIT(cinfo, JERR_BMP_BADDEPTH);
      break;
    }
    if (biPlanes != 1)
      ERREXIT(cinfo, JERR_BMP_BADPLANES);
    break;
  case 40:
  case 64:
    /* Decode Windows 3.x header (Microsoft calls this a BITMAPINFOHEADER) */
    /* or OS/2 2.x header, which has additional fields that we ignore */
    biWidth = GET_4B(bmpinfoheader,4);
    biHeight = GET_4B(bmpinfoheader,8);
    biPlanes = GET_2B(bmpinfoheader,12);
    source->bits_per_pixel = (int) GET_2B(bmpinfoheader,14);
    biCompression = GET_4B(bmpinfoheader,16);
    biXPelsPerMeter = GET_4B(bmpinfoheader,24);
    biYPelsPerMeter = GET_4B(bmpinfoheader,28);
    biClrUsed = GET_4B(bmpinfoheader,32);
    /* biSizeImage, biClrImportant fields are ignored */

    switch (source->bits_per_pixel) {
    case 8:			/* colormapped image */
      mapentrysize = 4;		/* Windows uses RGBQUAD colormap */
      TRACEMS2(cinfo, 1, JTRC_BMP_MAPPED, (int) biWidth, (int) biHeight);
      break;
    case 24:			/* RGB image */
      TRACEMS2(cinfo, 1, JTRC_BMP, (int) biWidth, (int) biHeight);
      break;
    default:
      ERREXIT(cinfo, JERR_BMP_BADDEPTH);
      break;
    }
    if (biPlanes != 1)
      ERREXIT(cinfo, JERR_BMP_BADPLANES);
    if (biCompression != 0)
      ERREXIT(cinfo, JERR_BMP_COMPRESSED);

    if (biXPelsPerMeter > 0 && biYPelsPerMeter > 0) {
      /* Set JFIF density parameters from the BMP data */
      cinfo->X_density = (UINT16) (biXPelsPerMeter/100); /* 100 cm per meter */
      cinfo->Y_density = (UINT16) (biYPelsPerMeter/100);
      cinfo->density_unit = 2;	/* dots/cm */
    }
    break;
  default:
    ERREXIT(cinfo, JERR_BMP_BADHEADER);
    break;
  }

  /* Compute distance to bitmap data --- will adjust for colormap below */
  bPad = bfOffBits - (headerSize + 14);

  /* Read the colormap, if any */
  if (mapentrysize > 0) {
    if (biClrUsed <= 0)
      biClrUsed = 256;		/* assume it's 256 */
    else if (biClrUsed > 256)
      ERREXIT(cinfo, JERR_BMP_BADCMAP);
    /* Allocate space to store the colormap */
    source->colormap = (*cinfo->mem->alloc_sarray)
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       (JDIMENSION) biClrUsed, (JDIMENSION) 3);
    /* and read it from the file */
    read_colormap(source, (int) biClrUsed, mapentrysize);
    /* account for size of colormap */
    bPad -= biClrUsed * mapentrysize;
  }

  /* Skip any remaining pad bytes */
  if (bPad < 0)			/* incorrect bfOffBits value? */
    ERREXIT(cinfo, JERR_BMP_BADHEADER);
  while (--bPad >= 0) {
    (void) read_byte(source);
  }

  /* Compute row width in file, including padding to 4-byte boundary */
  if (source->bits_per_pixel == 24)
    row_width = (JDIMENSION) (biWidth * 3);
  else
    row_width = (JDIMENSION) biWidth;
  while ((row_width & 3) != 0) row_width++;
  source->row_width = row_width;

  /* Allocate space for inversion array, prepare for preload pass */
  source->whole_image = (*cinfo->mem->request_virt_sarray)
    ((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
     row_width, (JDIMENSION) biHeight, (JDIMENSION) 1);
  source->pub.get_pixel_rows = preload_image;
  if (cinfo->progress != NULL) {
    cd_progress_ptr progress = (cd_progress_ptr) cinfo->progress;
    progress->total_extra_passes++; /* count file input as separate pass */
  }

  /* Allocate one-row buffer for returned data */
  source->pub.buffer = (*cinfo->mem->alloc_sarray)
    ((j_common_ptr) cinfo, JPOOL_IMAGE,
     (JDIMENSION) (biWidth * 3), (JDIMENSION) 1);
  source->pub.buffer_height = 1;

  cinfo->in_color_space = JCS_RGB;
  cinfo->input_components = 3;
  cinfo->data_precision = 8;
  cinfo->image_width = (JDIMENSION) biWidth;
  cinfo->image_height = (JDIMENSION) biHeight;
}


/*
 * Finish up at the end of the file.
 */

METHODDEF(void)
finish_input_bmp (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
{
  /* no work */
}


/*
 * The module selection routine for BMP format input.
 */

GLOBAL(cjpeg_source_ptr)
jinit_read_bmp (j_compress_ptr cinfo)
{
  bmp_source_ptr source;

  /* Create module interface object */
  source = (bmp_source_ptr)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  SIZEOF(bmp_source_struct));
  source->cinfo = cinfo;	/* make back link for subroutines */
  /* Fill in method ptrs, except get_pixel_rows which start_input sets */
  source->pub.start_input = start_input_bmp;
  source->pub.finish_input = finish_input_bmp;

  return (cjpeg_source_ptr) source;
}

#endif /* BMP_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\rdgif.c ===
/*
 * rdgif.c
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 **************************************************************************
 * WARNING: You will need an LZW patent license from Unisys in order to   *
 * use this file legally in any commercial or shareware application.      *
 **************************************************************************
 *
 * This file contains routines to read input images in GIF format.
 *
 * These routines may need modification for non-Unix environments or
 * specialized applications.  As they stand, they assume input from
 * an ordinary stdio stream.  They further assume that reading begins
 * at the start of the file; input_init may need work if the
 * user interface has already read some data (e.g., to determine that
 * the file is indeed GIF format).
 */

/*
 * This code is loosely based on giftoppm from the PBMPLUS distribution
 * of Feb. 1991.  That file contains the following copyright notice:
 * +-------------------------------------------------------------------+
 * | Copyright 1990, David Koblas.                                     |
 * |   Permission to use, copy, modify, and distribute this software   |
 * |   and its documentation for any purpose and without fee is hereby |
 * |   granted, provided that the above copyright notice appear in all |
 * |   copies and that both that copyright notice and this permission  |
 * |   notice appear in supporting documentation.  This software is    |
 * |   provided "as is" without express or implied warranty.           |
 * +-------------------------------------------------------------------+
 *
 * We are also required to state that
 *    "The Graphics Interchange Format(c) is the Copyright property of
 *    CompuServe Incorporated. GIF(sm) is a Service Mark property of
 *    CompuServe Incorporated."
 */

#include "cdjpeg.h"		/* Common decls for cjpeg/djpeg applications */

#ifdef GIF_SUPPORTED


#define	MAXCOLORMAPSIZE	256	/* max # of colors in a GIF colormap */
#define NUMCOLORS	3	/* # of colors */
#define CM_RED		0	/* color component numbers */
#define CM_GREEN	1
#define CM_BLUE		2

#define	MAX_LZW_BITS	12	/* maximum LZW code size */
#define LZW_TABLE_SIZE	(1<<MAX_LZW_BITS) /* # of possible LZW symbols */

/* Macros for extracting header data --- note we assume chars may be signed */

#define LM_to_uint(a,b)		((((b)&0xFF) << 8) | ((a)&0xFF))

#define BitSet(byte, bit)	((byte) & (bit))
#define INTERLACE	0x40	/* mask for bit signifying interlaced image */
#define COLORMAPFLAG	0x80	/* mask for bit signifying colormap presence */

#define	ReadOK(file,buffer,len)	(JFREAD(file,buffer,len) == ((size_t) (len)))

/* LZW decompression tables look like this:
 *   symbol_head[K] = prefix symbol of any LZW symbol K (0..LZW_TABLE_SIZE-1)
 *   symbol_tail[K] = suffix byte   of any LZW symbol K (0..LZW_TABLE_SIZE-1)
 * Note that entries 0..end_code of the above tables are not used,
 * since those symbols represent raw bytes or special codes.
 *
 * The stack represents the not-yet-used expansion of the last LZW symbol.
 * In the worst case, a symbol could expand to as many bytes as there are
 * LZW symbols, so we allocate LZW_TABLE_SIZE bytes for the stack.
 * (This is conservative since that number includes the raw-byte symbols.)
 *
 * The tables are allocated from FAR heap space since they would use up
 * rather a lot of the near data space in a PC.
 */


/* Private version of data source object */

typedef struct {
  struct cjpeg_source_struct pub; /* public fields */

  j_compress_ptr cinfo;		/* back link saves passing separate parm */

  JSAMPARRAY colormap;		/* GIF colormap (converted to my format) */

  /* State for GetCode and LZWReadByte */
  char code_buf[256+4];		/* current input data block */
  int last_byte;		/* # of bytes in code_buf */
  int last_bit;			/* # of bits in code_buf */
  int cur_bit;			/* next bit index to read */
  boolean out_of_blocks;	/* TRUE if hit terminator data block */

  int input_code_size;		/* codesize given in GIF file */
  int clear_code,end_code;	/* values for Clear and End codes */

  int code_size;		/* current actual code size */
  int limit_code;		/* 2^code_size */
  int max_code;			/* first unused code value */
  boolean first_time;		/* flags first call to LZWReadByte */

  /* Private state for LZWReadByte */
  int oldcode;			/* previous LZW symbol */
  int firstcode;		/* first byte of oldcode's expansion */

  /* LZW symbol table and expansion stack */
  UINT16 FAR *symbol_head;	/* => table of prefix symbols */
  UINT8  FAR *symbol_tail;	/* => table of suffix bytes */
  UINT8  FAR *symbol_stack;	/* => stack for symbol expansions */
  UINT8  FAR *sp;		/* stack pointer */

  /* State for interlaced image processing */
  boolean is_interlaced;	/* TRUE if have interlaced image */
  jvirt_sarray_ptr interlaced_image; /* full image in interlaced order */
  JDIMENSION cur_row_number;	/* need to know actual row number */
  JDIMENSION pass2_offset;	/* # of pixel rows in pass 1 */
  JDIMENSION pass3_offset;	/* # of pixel rows in passes 1&2 */
  JDIMENSION pass4_offset;	/* # of pixel rows in passes 1,2,3 */
} gif_source_struct;

typedef gif_source_struct * gif_source_ptr;


/* Forward declarations */
METHODDEF(JDIMENSION) get_pixel_rows
	JPP((j_compress_ptr cinfo, cjpeg_source_ptr sinfo));
METHODDEF(JDIMENSION) load_interlaced_image
	JPP((j_compress_ptr cinfo, cjpeg_source_ptr sinfo));
METHODDEF(JDIMENSION) get_interlaced_row
	JPP((j_compress_ptr cinfo, cjpeg_source_ptr sinfo));


LOCAL(int)
ReadByte (gif_source_ptr sinfo)
/* Read next byte from GIF file */
{
  register FILE * infile = sinfo->pub.input_file;
  int c;

  if ((c = getc(infile)) == EOF)
    ERREXIT(sinfo->cinfo, JERR_INPUT_EOF);
  return c;
}


LOCAL(int)
GetDataBlock (gif_source_ptr sinfo, char *buf)
/* Read a GIF data block, which has a leading count byte */
/* A zero-length block marks the end of a data block sequence */
{
  int count;

  count = ReadByte(sinfo);
  if (count > 0) {
    if (! ReadOK(sinfo->pub.input_file, buf, count))
      ERREXIT(sinfo->cinfo, JERR_INPUT_EOF);
  }
  return count;
}


LOCAL(void)
SkipDataBlocks (gif_source_ptr sinfo)
/* Skip a series of data blocks, until a block terminator is found */
{
  char buf[256];

  while (GetDataBlock(sinfo, buf) > 0)
    /* skip */;
}


LOCAL(void)
ReInitLZW (gif_source_ptr sinfo)
/* (Re)initialize LZW state; shared code for startup and Clear processing */
{
  sinfo->code_size = sinfo->input_code_size + 1;
  sinfo->limit_code = sinfo->clear_code << 1;	/* 2^code_size */
  sinfo->max_code = sinfo->clear_code + 2;	/* first unused code value */
  sinfo->sp = sinfo->symbol_stack;		/* init stack to empty */
}


LOCAL(void)
InitLZWCode (gif_source_ptr sinfo)
/* Initialize for a series of LZWReadByte (and hence GetCode) calls */
{
  /* GetCode initialization */
  sinfo->last_byte = 2;		/* make safe to "recopy last two bytes" */
  sinfo->last_bit = 0;		/* nothing in the buffer */
  sinfo->cur_bit = 0;		/* force buffer load on first call */
  sinfo->out_of_blocks = FALSE;

  /* LZWReadByte initialization: */
  /* compute special code values (note that these do not change later) */
  sinfo->clear_code = 1 << sinfo->input_code_size;
  sinfo->end_code = sinfo->clear_code + 1;
  sinfo->first_time = TRUE;
  ReInitLZW(sinfo);
}


LOCAL(int)
GetCode (gif_source_ptr sinfo)
/* Fetch the next code_size bits from the GIF data */
/* We assume code_size is less than 16 */
{
  register INT32 accum;
  int offs, ret, count;

  while ( (sinfo->cur_bit + sinfo->code_size) > sinfo->last_bit) {
    /* Time to reload the buffer */
    if (sinfo->out_of_blocks) {
      WARNMS(sinfo->cinfo, JWRN_GIF_NOMOREDATA);
      return sinfo->end_code;	/* fake something useful */
    }
    /* preserve last two bytes of what we have -- assume code_size <= 16 */
    sinfo->code_buf[0] = sinfo->code_buf[sinfo->last_byte-2];
    sinfo->code_buf[1] = sinfo->code_buf[sinfo->last_byte-1];
    /* Load more bytes; set flag if we reach the terminator block */
    if ((count = GetDataBlock(sinfo, &sinfo->code_buf[2])) == 0) {
      sinfo->out_of_blocks = TRUE;
      WARNMS(sinfo->cinfo, JWRN_GIF_NOMOREDATA);
      return sinfo->end_code;	/* fake something useful */
    }
    /* Reset counters */
    sinfo->cur_bit = (sinfo->cur_bit - sinfo->last_bit) + 16;
    sinfo->last_byte = 2 + count;
    sinfo->last_bit = sinfo->last_byte * 8;
  }

  /* Form up next 24 bits in accum */
  offs = sinfo->cur_bit >> 3;	/* byte containing cur_bit */
#ifdef CHAR_IS_UNSIGNED
  accum = sinfo->code_buf[offs+2];
  accum <<= 8;
  accum |= sinfo->code_buf[offs+1];
  accum <<= 8;
  accum |= sinfo->code_buf[offs];
#else
  accum = sinfo->code_buf[offs+2] & 0xFF;
  accum <<= 8;
  accum |= sinfo->code_buf[offs+1] & 0xFF;
  accum <<= 8;
  accum |= sinfo->code_buf[offs] & 0xFF;
#endif

  /* Right-align cur_bit in accum, then mask off desired number of bits */
  accum >>= (sinfo->cur_bit & 7);
  ret = ((int) accum) & ((1 << sinfo->code_size) - 1);
  
  sinfo->cur_bit += sinfo->code_size;
  return ret;
}


LOCAL(int)
LZWReadByte (gif_source_ptr sinfo)
/* Read an LZW-compressed byte */
{
  register int code;		/* current working code */
  int incode;			/* saves actual input code */

  /* First time, just eat the expected Clear code(s) and return next code, */
  /* which is expected to be a raw byte. */
  if (sinfo->first_time) {
    sinfo->first_time = FALSE;
    code = sinfo->clear_code;	/* enables sharing code with Clear case */
  } else {

    /* If any codes are stacked from a previously read symbol, return them */
    if (sinfo->sp > sinfo->symbol_stack)
      return (int) *(-- sinfo->sp);

    /* Time to read a new symbol */
    code = GetCode(sinfo);

  }

  if (code == sinfo->clear_code) {
    /* Reinit state, swallow any extra Clear codes, and */
    /* return next code, which is expected to be a raw byte. */
    ReInitLZW(sinfo);
    do {
      code = GetCode(sinfo);
    } while (code == sinfo->clear_code);
    if (code > sinfo->clear_code) { /* make sure it is a raw byte */
      WARNMS(sinfo->cinfo, JWRN_GIF_BADDATA);
      code = 0;			/* use something valid */
    }
    /* make firstcode, oldcode valid! */
    sinfo->firstcode = sinfo->oldcode = code;
    return code;
  }

  if (code == sinfo->end_code) {
    /* Skip the rest of the image, unless GetCode already read terminator */
    if (! sinfo->out_of_blocks) {
      SkipDataBlocks(sinfo);
      sinfo->out_of_blocks = TRUE;
    }
    /* Complain that there's not enough data */
    WARNMS(sinfo->cinfo, JWRN_GIF_ENDCODE);
    /* Pad data with 0's */
    return 0;			/* fake something usable */
  }

  /* Got normal raw byte or LZW symbol */
  incode = code;		/* save for a moment */
  
  if (code >= sinfo->max_code) { /* special case for not-yet-defined symbol */
    /* code == max_code is OK; anything bigger is bad data */
    if (code > sinfo->max_code) {
      WARNMS(sinfo->cinfo, JWRN_GIF_BADDATA);
      incode = 0;		/* prevent creation of loops in symbol table */
    }
    /* this symbol will be defined as oldcode/firstcode */
    *(sinfo->sp++) = (UINT8) sinfo->firstcode;
    code = sinfo->oldcode;
  }

  /* If it's a symbol, expand it into the stack */
  while (code >= sinfo->clear_code) {
    *(sinfo->sp++) = sinfo->symbol_tail[code]; /* tail is a byte value */
    code = sinfo->symbol_head[code]; /* head is another LZW symbol */
  }
  /* At this point code just represents a raw byte */
  sinfo->firstcode = code;	/* save for possible future use */

  /* If there's room in table, */
  if ((code = sinfo->max_code) < LZW_TABLE_SIZE) {
    /* Define a new symbol = prev sym + head of this sym's expansion */
    sinfo->symbol_head[code] = sinfo->oldcode;
    sinfo->symbol_tail[code] = (UINT8) sinfo->firstcode;
    sinfo->max_code++;
    /* Is it time to increase code_size? */
    if ((sinfo->max_code >= sinfo->limit_code) &&
	(sinfo->code_size < MAX_LZW_BITS)) {
      sinfo->code_size++;
      sinfo->limit_code <<= 1;	/* keep equal to 2^code_size */
    }
  }
  
  sinfo->oldcode = incode;	/* save last input symbol for future use */
  return sinfo->firstcode;	/* return first byte of symbol's expansion */
}


LOCAL(void)
ReadColorMap (gif_source_ptr sinfo, int cmaplen, JSAMPARRAY cmap)
/* Read a GIF colormap */
{
  int i;

  for (i = 0; i < cmaplen; i++) {
#if BITS_IN_JSAMPLE == 8
#define UPSCALE(x)  (x)
#else
#define UPSCALE(x)  ((x) << (BITS_IN_JSAMPLE-8))
#endif
    cmap[CM_RED][i]   = (JSAMPLE) UPSCALE(ReadByte(sinfo));
    cmap[CM_GREEN][i] = (JSAMPLE) UPSCALE(ReadByte(sinfo));
    cmap[CM_BLUE][i]  = (JSAMPLE) UPSCALE(ReadByte(sinfo));
  }
}


LOCAL(void)
DoExtension (gif_source_ptr sinfo)
/* Process an extension block */
/* Currently we ignore 'em all */
{
  int extlabel;

  /* Read extension label byte */
  extlabel = ReadByte(sinfo);
  TRACEMS1(sinfo->cinfo, 1, JTRC_GIF_EXTENSION, extlabel);
  /* Skip the data block(s) associated with the extension */
  SkipDataBlocks(sinfo);
}


/*
 * Read the file header; return image size and component count.
 */

METHODDEF(void)
start_input_gif (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
{
  gif_source_ptr source = (gif_source_ptr) sinfo;
  char hdrbuf[10];		/* workspace for reading control blocks */
  unsigned int width, height;	/* image dimensions */
  int colormaplen, aspectRatio;
  int c;

  /* Allocate space to store the colormap */
  source->colormap = (*cinfo->mem->alloc_sarray)
    ((j_common_ptr) cinfo, JPOOL_IMAGE,
     (JDIMENSION) MAXCOLORMAPSIZE, (JDIMENSION) NUMCOLORS);

  /* Read and verify GIF Header */
  if (! ReadOK(source->pub.input_file, hdrbuf, 6))
    ERREXIT(cinfo, JERR_GIF_NOT);
  if (hdrbuf[0] != 'G' || hdrbuf[1] != 'I' || hdrbuf[2] != 'F')
    ERREXIT(cinfo, JERR_GIF_NOT);
  /* Check for expected version numbers.
   * If unknown version, give warning and try to process anyway;
   * this is per recommendation in GIF89a standard.
   */
  if ((hdrbuf[3] != '8' || hdrbuf[4] != '7' || hdrbuf[5] != 'a') &&
      (hdrbuf[3] != '8' || hdrbuf[4] != '9' || hdrbuf[5] != 'a'))
    TRACEMS3(cinfo, 1, JTRC_GIF_BADVERSION, hdrbuf[3], hdrbuf[4], hdrbuf[5]);

  /* Read and decipher Logical Screen Descriptor */
  if (! ReadOK(source->pub.input_file, hdrbuf, 7))
    ERREXIT(cinfo, JERR_INPUT_EOF);
  width = LM_to_uint(hdrbuf[0],hdrbuf[1]);
  height = LM_to_uint(hdrbuf[2],hdrbuf[3]);
  colormaplen = 2 << (hdrbuf[4] & 0x07);
  /* we ignore the color resolution, sort flag, and background color index */
  aspectRatio = hdrbuf[6] & 0xFF;
  if (aspectRatio != 0 && aspectRatio != 49)
    TRACEMS(cinfo, 1, JTRC_GIF_NONSQUARE);

  /* Read global colormap if header indicates it is present */
  if (BitSet(hdrbuf[4], COLORMAPFLAG))
    ReadColorMap(source, colormaplen, source->colormap);

  /* Scan until we reach start of desired image.
   * We don't currently support skipping images, but could add it easily.
   */
  for (;;) {
    c = ReadByte(source);

    if (c == ';')		/* GIF terminator?? */
      ERREXIT(cinfo, JERR_GIF_IMAGENOTFOUND);

    if (c == '!') {		/* Extension */
      DoExtension(source);
      continue;
    }
    
    if (c != ',') {		/* Not an image separator? */
      WARNMS1(cinfo, JWRN_GIF_CHAR, c);
      continue;
    }

    /* Read and decipher Local Image Descriptor */
    if (! ReadOK(source->pub.input_file, hdrbuf, 9))
      ERREXIT(cinfo, JERR_INPUT_EOF);
    /* we ignore top/left position info, also sort flag */
    width = LM_to_uint(hdrbuf[4],hdrbuf[5]);
    height = LM_to_uint(hdrbuf[6],hdrbuf[7]);
    source->is_interlaced = BitSet(hdrbuf[8], INTERLACE);

    /* Read local colormap if header indicates it is present */
    /* Note: if we wanted to support skipping images, */
    /* we'd need to skip rather than read colormap for ignored images */
    if (BitSet(hdrbuf[8], COLORMAPFLAG)) {
      colormaplen = 2 << (hdrbuf[8] & 0x07);
      ReadColorMap(source, colormaplen, source->colormap);
    }

    source->input_code_size = ReadByte(source); /* get min-code-size byte */
    if (source->input_code_size < 2 || source->input_code_size >= MAX_LZW_BITS)
      ERREXIT1(cinfo, JERR_GIF_CODESIZE, source->input_code_size);

    /* Reached desired image, so break out of loop */
    /* If we wanted to skip this image, */
    /* we'd call SkipDataBlocks and then continue the loop */
    break;
  }

  /* Prepare to read selected image: first initialize LZW decompressor */
  source->symbol_head = (UINT16 FAR *)
    (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				LZW_TABLE_SIZE * SIZEOF(UINT16));
  source->symbol_tail = (UINT8 FAR *)
    (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				LZW_TABLE_SIZE * SIZEOF(UINT8));
  source->symbol_stack = (UINT8 FAR *)
    (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				LZW_TABLE_SIZE * SIZEOF(UINT8));
  InitLZWCode(source);

  /*
   * If image is interlaced, we read it into a full-size sample array,
   * decompressing as we go; then get_interlaced_row selects rows from the
   * sample array in the proper order.
   */
  if (source->is_interlaced) {
    /* We request the virtual array now, but can't access it until virtual
     * arrays have been allocated.  Hence, the actual work of reading the
     * image is postponed until the first call to get_pixel_rows.
     */
    source->interlaced_image = (*cinfo->mem->request_virt_sarray)
      ((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
       (JDIMENSION) width, (JDIMENSION) height, (JDIMENSION) 1);
    if (cinfo->progress != NULL) {
      cd_progress_ptr progress = (cd_progress_ptr) cinfo->progress;
      progress->total_extra_passes++; /* count file input as separate pass */
    }
    source->pub.get_pixel_rows = load_interlaced_image;
  } else {
    source->pub.get_pixel_rows = get_pixel_rows;
  }

  /* Create compressor input buffer. */
  source->pub.buffer = (*cinfo->mem->alloc_sarray)
    ((j_common_ptr) cinfo, JPOOL_IMAGE,
     (JDIMENSION) width * NUMCOLORS, (JDIMENSION) 1);
  source->pub.buffer_height = 1;

  /* Return info about the image. */
  cinfo->in_color_space = JCS_RGB;
  cinfo->input_components = NUMCOLORS;
  cinfo->data_precision = BITS_IN_JSAMPLE; /* we always rescale data to this */
  cinfo->image_width = width;
  cinfo->image_height = height;

  TRACEMS3(cinfo, 1, JTRC_GIF, width, height, colormaplen);
}


/*
 * Read one row of pixels.
 * This version is used for noninterlaced GIF images:
 * we read directly from the GIF file.
 */

METHODDEF(JDIMENSION)
get_pixel_rows (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
{
  gif_source_ptr source = (gif_source_ptr) sinfo;
  register int c;
  register JSAMPROW ptr;
  register JDIMENSION col;
  register JSAMPARRAY colormap = source->colormap;
  
  ptr = source->pub.buffer[0];
  for (col = cinfo->image_width; col > 0; col--) {
    c = LZWReadByte(source);
    *ptr++ = colormap[CM_RED][c];
    *ptr++ = colormap[CM_GREEN][c];
    *ptr++ = colormap[CM_BLUE][c];
  }
  return 1;
}


/*
 * Read one row of pixels.
 * This version is used for the first call on get_pixel_rows when
 * reading an interlaced GIF file: we read the whole image into memory.
 */

METHODDEF(JDIMENSION)
load_interlaced_image (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
{
  gif_source_ptr source = (gif_source_ptr) sinfo;
  JSAMPARRAY image_ptr;
  register JSAMPROW sptr;
  register JDIMENSION col;
  JDIMENSION row;
  cd_progress_ptr progress = (cd_progress_ptr) cinfo->progress;

  /* Read the interlaced image into the virtual array we've created. */
  for (row = 0; row < cinfo->image_height; row++) {
    if (progress != NULL) {
      progress->pub.pass_counter = (long) row;
      progress->pub.pass_limit = (long) cinfo->image_height;
      (*progress->pub.progress_monitor) ((j_common_ptr) cinfo);
    }
    image_ptr = (*cinfo->mem->access_virt_sarray)
      ((j_common_ptr) cinfo, source->interlaced_image,
       row, (JDIMENSION) 1, TRUE);
    sptr = image_ptr[0];
    for (col = cinfo->image_width; col > 0; col--) {
      *sptr++ = (JSAMPLE) LZWReadByte(source);
    }
  }
  if (progress != NULL)
    progress->completed_extra_passes++;

  /* Replace method pointer so subsequent calls don't come here. */
  source->pub.get_pixel_rows = get_interlaced_row;
  /* Initialize for get_interlaced_row, and perform first call on it. */
  source->cur_row_number = 0;
  source->pass2_offset = (cinfo->image_height + 7) / 8;
  source->pass3_offset = source->pass2_offset + (cinfo->image_height + 3) / 8;
  source->pass4_offset = source->pass3_offset + (cinfo->image_height + 1) / 4;

  return get_interlaced_row(cinfo, sinfo);
}


/*
 * Read one row of pixels.
 * This version is used for interlaced GIF images:
 * we read from the virtual array.
 */

METHODDEF(JDIMENSION)
get_interlaced_row (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
{
  gif_source_ptr source = (gif_source_ptr) sinfo;
  JSAMPARRAY image_ptr;
  register int c;
  register JSAMPROW sptr, ptr;
  register JDIMENSION col;
  register JSAMPARRAY colormap = source->colormap;
  JDIMENSION irow;

  /* Figure out which row of interlaced image is needed, and access it. */
  switch ((int) (source->cur_row_number & 7)) {
  case 0:			/* first-pass row */
    irow = source->cur_row_number >> 3;
    break;
  case 4:			/* second-pass row */
    irow = (source->cur_row_number >> 3) + source->pass2_offset;
    break;
  case 2:			/* third-pass row */
  case 6:
    irow = (source->cur_row_number >> 2) + source->pass3_offset;
    break;
  default:			/* fourth-pass row */
    irow = (source->cur_row_number >> 1) + source->pass4_offset;
    break;
  }
  image_ptr = (*cinfo->mem->access_virt_sarray)
    ((j_common_ptr) cinfo, source->interlaced_image,
     irow, (JDIMENSION) 1, FALSE);
  /* Scan the row, expand colormap, and output */
  sptr = image_ptr[0];
  ptr = source->pub.buffer[0];
  for (col = cinfo->image_width; col > 0; col--) {
    c = GETJSAMPLE(*sptr++);
    *ptr++ = colormap[CM_RED][c];
    *ptr++ = colormap[CM_GREEN][c];
    *ptr++ = colormap[CM_BLUE][c];
  }
  source->cur_row_number++;	/* for next time */
  return 1;
}


/*
 * Finish up at the end of the file.
 */

METHODDEF(void)
finish_input_gif (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
{
  /* no work */
}


/*
 * The module selection routine for GIF format input.
 */

GLOBAL(cjpeg_source_ptr)
jinit_read_gif (j_compress_ptr cinfo)
{
  gif_source_ptr source;

  /* Create module interface object */
  source = (gif_source_ptr)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  SIZEOF(gif_source_struct));
  source->cinfo = cinfo;	/* make back link for subroutines */
  /* Fill in method ptrs, except get_pixel_rows which start_input sets */
  source->pub.start_input = start_input_gif;
  source->pub.finish_input = finish_input_gif;

  return (cjpeg_source_ptr) source;
}

#endif /* GIF_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\rdrle.c ===
/*
 * rdrle.c
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains routines to read input images in Utah RLE format.
 * The Utah Raster Toolkit library is required (version 3.1 or later).
 *
 * These routines may need modification for non-Unix environments or
 * specialized applications.  As they stand, they assume input from
 * an ordinary stdio stream.  They further assume that reading begins
 * at the start of the file; start_input may need work if the
 * user interface has already read some data (e.g., to determine that
 * the file is indeed RLE format).
 *
 * Based on code contributed by Mike Lijewski,
 * with updates from Robert Hutchinson.
 */

#include "cdjpeg.h"		/* Common decls for cjpeg/djpeg applications */

#ifdef RLE_SUPPORTED

/* rle.h is provided by the Utah Raster Toolkit. */

#include <rle.h>

/*
 * We assume that JSAMPLE has the same representation as rle_pixel,
 * to wit, "unsigned char".  Hence we can't cope with 12- or 16-bit samples.
 */

#if BITS_IN_JSAMPLE != 8
  Sorry, this code only copes with 8-bit JSAMPLEs. /* deliberate syntax err */
#endif

/*
 * We support the following types of RLE files:
 *   
 *   GRAYSCALE   - 8 bits, no colormap
 *   MAPPEDGRAY  - 8 bits, 1 channel colomap
 *   PSEUDOCOLOR - 8 bits, 3 channel colormap
 *   TRUECOLOR   - 24 bits, 3 channel colormap
 *   DIRECTCOLOR - 24 bits, no colormap
 *
 * For now, we ignore any alpha channel in the image.
 */

typedef enum
  { GRAYSCALE, MAPPEDGRAY, PSEUDOCOLOR, TRUECOLOR, DIRECTCOLOR } rle_kind;


/*
 * Since RLE stores scanlines bottom-to-top, we have to invert the image
 * to conform to JPEG's top-to-bottom order.  To do this, we read the
 * incoming image into a virtual array on the first get_pixel_rows call,
 * then fetch the required row from the virtual array on subsequent calls.
 */

typedef struct _rle_source_struct * rle_source_ptr;

typedef struct _rle_source_struct {
  struct cjpeg_source_struct pub; /* public fields */

  rle_kind visual;              /* actual type of input file */
  jvirt_sarray_ptr image;       /* virtual array to hold the image */
  JDIMENSION row;		/* current row # in the virtual array */
  rle_hdr header;               /* Input file information */
  rle_pixel** rle_row;          /* holds a row returned by rle_getrow() */

} rle_source_struct;


/*
 * Read the file header; return image size and component count.
 */

METHODDEF(void)
start_input_rle (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
{
  rle_source_ptr source = (rle_source_ptr) sinfo;
  JDIMENSION width, height;
#ifdef PROGRESS_REPORT
  cd_progress_ptr progress = (cd_progress_ptr) cinfo->progress;
#endif

  /* Use RLE library routine to get the header info */
  source->header = *rle_hdr_init(NULL);
  source->header.rle_file = source->pub.input_file;
  switch (rle_get_setup(&(source->header))) {
  case RLE_SUCCESS:
    /* A-OK */
    break;
  case RLE_NOT_RLE:
    ERREXIT(cinfo, JERR_RLE_NOT);
    break;
  case RLE_NO_SPACE:
    ERREXIT(cinfo, JERR_RLE_MEM);
    break;
  case RLE_EMPTY:
    ERREXIT(cinfo, JERR_RLE_EMPTY);
    break;
  case RLE_EOF:
    ERREXIT(cinfo, JERR_RLE_EOF);
    break;
  default:
    ERREXIT(cinfo, JERR_RLE_BADERROR);
    break;
  }

  /* Figure out what we have, set private vars and return values accordingly */
  
  width  = source->header.xmax - source->header.xmin + 1;
  height = source->header.ymax - source->header.ymin + 1;
  source->header.xmin = 0;		/* realign horizontally */
  source->header.xmax = width-1;

  cinfo->image_width      = width;
  cinfo->image_height     = height;
  cinfo->data_precision   = 8;  /* we can only handle 8 bit data */

  if (source->header.ncolors == 1 && source->header.ncmap == 0) {
    source->visual     = GRAYSCALE;
    TRACEMS2(cinfo, 1, JTRC_RLE_GRAY, width, height);
  } else if (source->header.ncolors == 1 && source->header.ncmap == 1) {
    source->visual     = MAPPEDGRAY;
    TRACEMS3(cinfo, 1, JTRC_RLE_MAPGRAY, width, height,
             1 << source->header.cmaplen);
  } else if (source->header.ncolors == 1 && source->header.ncmap == 3) {
    source->visual     = PSEUDOCOLOR;
    TRACEMS3(cinfo, 1, JTRC_RLE_MAPPED, width, height,
	     1 << source->header.cmaplen);
  } else if (source->header.ncolors == 3 && source->header.ncmap == 3) {
    source->visual     = TRUECOLOR;
    TRACEMS3(cinfo, 1, JTRC_RLE_FULLMAP, width, height,
	     1 << source->header.cmaplen);
  } else if (source->header.ncolors == 3 && source->header.ncmap == 0) {
    source->visual     = DIRECTCOLOR;
    TRACEMS2(cinfo, 1, JTRC_RLE, width, height);
  } else
    ERREXIT(cinfo, JERR_RLE_UNSUPPORTED);
  
  if (source->visual == GRAYSCALE || source->visual == MAPPEDGRAY) {
    cinfo->in_color_space   = JCS_GRAYSCALE;
    cinfo->input_components = 1;
  } else {
    cinfo->in_color_space   = JCS_RGB;
    cinfo->input_components = 3;
  }

  /*
   * A place to hold each scanline while it's converted.
   * (GRAYSCALE scanlines don't need converting)
   */
  if (source->visual != GRAYSCALE) {
    source->rle_row = (rle_pixel**) (*cinfo->mem->alloc_sarray)
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       (JDIMENSION) width, (JDIMENSION) cinfo->input_components);
  }

  /* request a virtual array to hold the image */
  source->image = (*cinfo->mem->request_virt_sarray)
    ((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
     (JDIMENSION) (width * source->header.ncolors),
     (JDIMENSION) height, (JDIMENSION) 1);

#ifdef PROGRESS_REPORT
  if (progress != NULL) {
    /* count file input as separate pass */
    progress->total_extra_passes++;
  }
#endif

  source->pub.buffer_height = 1;
}


/*
 * Read one row of pixels.
 * Called only after load_image has read the image into the virtual array.
 * Used for GRAYSCALE, MAPPEDGRAY, TRUECOLOR, and DIRECTCOLOR images.
 */

METHODDEF(JDIMENSION)
get_rle_row (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
{
  rle_source_ptr source = (rle_source_ptr) sinfo;

  source->row--;
  source->pub.buffer = (*cinfo->mem->access_virt_sarray)
    ((j_common_ptr) cinfo, source->image, source->row, (JDIMENSION) 1, FALSE);

  return 1;
}

/*
 * Read one row of pixels.
 * Called only after load_image has read the image into the virtual array.
 * Used for PSEUDOCOLOR images.
 */

METHODDEF(JDIMENSION)
get_pseudocolor_row (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
{
  rle_source_ptr source = (rle_source_ptr) sinfo;
  JSAMPROW src_row, dest_row;
  JDIMENSION col;
  rle_map *colormap;
  int val;

  colormap = source->header.cmap;
  dest_row = source->pub.buffer[0];
  source->row--;
  src_row = * (*cinfo->mem->access_virt_sarray)
    ((j_common_ptr) cinfo, source->image, source->row, (JDIMENSION) 1, FALSE);

  for (col = cinfo->image_width; col > 0; col--) {
    val = GETJSAMPLE(*src_row++);
    *dest_row++ = (JSAMPLE) (colormap[val      ] >> 8);
    *dest_row++ = (JSAMPLE) (colormap[val + 256] >> 8);
    *dest_row++ = (JSAMPLE) (colormap[val + 512] >> 8);
  }

  return 1;
}


/*
 * Load the image into a virtual array.  We have to do this because RLE
 * files start at the lower left while the JPEG standard has them starting
 * in the upper left.  This is called the first time we want to get a row
 * of input.  What we do is load the RLE data into the array and then call
 * the appropriate routine to read one row from the array.  Before returning,
 * we set source->pub.get_pixel_rows so that subsequent calls go straight to
 * the appropriate row-reading routine.
 */

METHODDEF(JDIMENSION)
load_image (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
{
  rle_source_ptr source = (rle_source_ptr) sinfo;
  JDIMENSION row, col;
  JSAMPROW  scanline, red_ptr, green_ptr, blue_ptr;
  rle_pixel **rle_row;
  rle_map *colormap;
  char channel;
#ifdef PROGRESS_REPORT
  cd_progress_ptr progress = (cd_progress_ptr) cinfo->progress;
#endif

  colormap = source->header.cmap;
  rle_row = source->rle_row;

  /* Read the RLE data into our virtual array.
   * We assume here that (a) rle_pixel is represented the same as JSAMPLE,
   * and (b) we are not on a machine where FAR pointers differ from regular.
   */
  RLE_CLR_BIT(source->header, RLE_ALPHA); /* don't read the alpha channel */

#ifdef PROGRESS_REPORT
  if (progress != NULL) {
    progress->pub.pass_limit = cinfo->image_height;
    progress->pub.pass_counter = 0;
    (*progress->pub.progress_monitor) ((j_common_ptr) cinfo);
  }
#endif

  switch (source->visual) {

  case GRAYSCALE:
  case PSEUDOCOLOR:
    for (row = 0; row < cinfo->image_height; row++) {
      rle_row = (rle_pixel **) (*cinfo->mem->access_virt_sarray)
         ((j_common_ptr) cinfo, source->image, row, (JDIMENSION) 1, TRUE);
      rle_getrow(&source->header, rle_row);
#ifdef PROGRESS_REPORT
      if (progress != NULL) {
        progress->pub.pass_counter++;
        (*progress->pub.progress_monitor) ((j_common_ptr) cinfo);
      }
#endif
    }
    break;

  case MAPPEDGRAY:
  case TRUECOLOR:
    for (row = 0; row < cinfo->image_height; row++) {
      scanline = * (*cinfo->mem->access_virt_sarray)
        ((j_common_ptr) cinfo, source->image, row, (JDIMENSION) 1, TRUE);
      rle_row = source->rle_row;
      rle_getrow(&source->header, rle_row);

      for (col = 0; col < cinfo->image_width; col++) {
        for (channel = 0; channel < source->header.ncolors; channel++) {
          *scanline++ = (JSAMPLE)
            (colormap[GETJSAMPLE(rle_row[channel][col]) + 256 * channel] >> 8);
        }
      }

#ifdef PROGRESS_REPORT
      if (progress != NULL) {
        progress->pub.pass_counter++;
        (*progress->pub.progress_monitor) ((j_common_ptr) cinfo);
      }
#endif
    }
    break;

  case DIRECTCOLOR:
    for (row = 0; row < cinfo->image_height; row++) {
      scanline = * (*cinfo->mem->access_virt_sarray)
        ((j_common_ptr) cinfo, source->image, row, (JDIMENSION) 1, TRUE);
      rle_getrow(&source->header, rle_row);

      red_ptr   = rle_row[0];
      green_ptr = rle_row[1];
      blue_ptr  = rle_row[2];

      for (col = cinfo->image_width; col > 0; col--) {
        *scanline++ = *red_ptr++;
        *scanline++ = *green_ptr++;
        *scanline++ = *blue_ptr++;
      }

#ifdef PROGRESS_REPORT
      if (progress != NULL) {
        progress->pub.pass_counter++;
        (*progress->pub.progress_monitor) ((j_common_ptr) cinfo);
      }
#endif
    }
  }

#ifdef PROGRESS_REPORT
  if (progress != NULL)
    progress->completed_extra_passes++;
#endif

  /* Set up to call proper row-extraction routine in future */
  if (source->visual == PSEUDOCOLOR) {
    source->pub.buffer = source->rle_row;
    source->pub.get_pixel_rows = get_pseudocolor_row;
  } else {
    source->pub.get_pixel_rows = get_rle_row;
  }
  source->row = cinfo->image_height;

  /* And fetch the topmost (bottommost) row */
  return (*source->pub.get_pixel_rows) (cinfo, sinfo);   
}


/*
 * Finish up at the end of the file.
 */

METHODDEF(void)
finish_input_rle (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
{
  /* no work */
}


/*
 * The module selection routine for RLE format input.
 */

GLOBAL(cjpeg_source_ptr)
jinit_read_rle (j_compress_ptr cinfo)
{
  rle_source_ptr source;

  /* Create module interface object */
  source = (rle_source_ptr)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
                                  SIZEOF(rle_source_struct));
  /* Fill in method ptrs */
  source->pub.start_input = start_input_rle;
  source->pub.finish_input = finish_input_rle;
  source->pub.get_pixel_rows = load_image;

  return (cjpeg_source_ptr) source;
}

#endif /* RLE_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\rdswitch.c ===
/*
 * rdswitch.c
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains routines to process some of cjpeg's more complicated
 * command-line switches.  Switches processed here are:
 *	-qtables file		Read quantization tables from text file
 *	-scans file		Read scan script from text file
 *	-qslots N[,N,...]	Set component quantization table selectors
 *	-sample HxV[,HxV,...]	Set component sampling factors
 */

#include "cdjpeg.h"		/* Common decls for cjpeg/djpeg applications */
#include <ctype.h>		/* to declare isdigit(), isspace() */


LOCAL(int)
text_getc (FILE * file)
/* Read next char, skipping over any comments (# to end of line) */
/* A comment/newline sequence is returned as a newline */
{
  register int ch;
  
  ch = getc(file);
  if (ch == '#') {
    do {
      ch = getc(file);
    } while (ch != '\n' && ch != EOF);
  }
  return ch;
}


LOCAL(boolean)
read_text_integer (FILE * file, long * result, int * termchar)
/* Read an unsigned decimal integer from a file, store it in result */
/* Reads one trailing character after the integer; returns it in termchar */
{
  register int ch;
  register long val;
  
  /* Skip any leading whitespace, detect EOF */
  do {
    ch = text_getc(file);
    if (ch == EOF) {
      *termchar = ch;
      return FALSE;
    }
  } while (isspace(ch));
  
  if (! isdigit(ch)) {
    *termchar = ch;
    return FALSE;
  }

  val = ch - '0';
  while ((ch = text_getc(file)) != EOF) {
    if (! isdigit(ch))
      break;
    val *= 10;
    val += ch - '0';
  }
  *result = val;
  *termchar = ch;
  return TRUE;
}


GLOBAL(boolean)
read_quant_tables (j_compress_ptr cinfo, char * filename,
		   int scale_factor, boolean force_baseline)
/* Read a set of quantization tables from the specified file.
 * The file is plain ASCII text: decimal numbers with whitespace between.
 * Comments preceded by '#' may be included in the file.
 * There may be one to NUM_QUANT_TBLS tables in the file, each of 64 values.
 * The tables are implicitly numbered 0,1,etc.
 * NOTE: does not affect the qslots mapping, which will default to selecting
 * table 0 for luminance (or primary) components, 1 for chrominance components.
 * You must use -qslots if you want a different component->table mapping.
 */
{
  FILE * fp;
  int tblno, i, termchar;
  long val;
  unsigned int table[DCTSIZE2];

  if ((fp = fopen(filename, "r")) == NULL) {
    fprintf(stderr, "Can't open table file %s\n", filename);
    return FALSE;
  }
  tblno = 0;

  while (read_text_integer(fp, &val, &termchar)) { /* read 1st element of table */
    if (tblno >= NUM_QUANT_TBLS) {
      fprintf(stderr, "Too many tables in file %s\n", filename);
      fclose(fp);
      return FALSE;
    }
    table[0] = (unsigned int) val;
    for (i = 1; i < DCTSIZE2; i++) {
      if (! read_text_integer(fp, &val, &termchar)) {
	fprintf(stderr, "Invalid table data in file %s\n", filename);
	fclose(fp);
	return FALSE;
      }
      table[i] = (unsigned int) val;
    }
    jpeg_add_quant_table(cinfo, tblno, table, scale_factor, force_baseline);
    tblno++;
  }

  if (termchar != EOF) {
    fprintf(stderr, "Non-numeric data in file %s\n", filename);
    fclose(fp);
    return FALSE;
  }

  fclose(fp);
  return TRUE;
}


#ifdef C_MULTISCAN_FILES_SUPPORTED

LOCAL(boolean)
read_scan_integer (FILE * file, long * result, int * termchar)
/* Variant of read_text_integer that always looks for a non-space termchar;
 * this simplifies parsing of punctuation in scan scripts.
 */
{
  register int ch;

  if (! read_text_integer(file, result, termchar))
    return FALSE;
  ch = *termchar;
  while (ch != EOF && isspace(ch))
    ch = text_getc(file);
  if (isdigit(ch)) {		/* oops, put it back */
    if (ungetc(ch, file) == EOF)
      return FALSE;
    ch = ' ';
  } else {
    /* Any separators other than ';' and ':' are ignored;
     * this allows user to insert commas, etc, if desired.
     */
    if (ch != EOF && ch != ';' && ch != ':')
      ch = ' ';
  }
  *termchar = ch;
  return TRUE;
}


GLOBAL(boolean)
read_scan_script (j_compress_ptr cinfo, char * filename)
/* Read a scan script from the specified text file.
 * Each entry in the file defines one scan to be emitted.
 * Entries are separated by semicolons ';'.
 * An entry contains one to four component indexes,
 * optionally followed by a colon ':' and four progressive-JPEG parameters.
 * The component indexes denote which component(s) are to be transmitted
 * in the current scan.  The first component has index 0.
 * Sequential JPEG is used if the progressive-JPEG parameters are omitted.
 * The file is free format text: any whitespace may appear between numbers
 * and the ':' and ';' punctuation marks.  Also, other punctuation (such
 * as commas or dashes) can be placed between numbers if desired.
 * Comments preceded by '#' may be included in the file.
 * Note: we do very little validity checking here;
 * jcmaster.c will validate the script parameters.
 */
{
  FILE * fp;
  int scanno, ncomps, termchar;
  long val;
  jpeg_scan_info * scanptr;
#define MAX_SCANS  100		/* quite arbitrary limit */
  jpeg_scan_info scans[MAX_SCANS];

  if ((fp = fopen(filename, "r")) == NULL) {
    fprintf(stderr, "Can't open scan definition file %s\n", filename);
    return FALSE;
  }
  scanptr = scans;
  scanno = 0;

  while (read_scan_integer(fp, &val, &termchar)) {
    if (scanno >= MAX_SCANS) {
      fprintf(stderr, "Too many scans defined in file %s\n", filename);
      fclose(fp);
      return FALSE;
    }
    scanptr->component_index[0] = (int) val;
    ncomps = 1;
    while (termchar == ' ') {
      if (ncomps >= MAX_COMPS_IN_SCAN) {
	fprintf(stderr, "Too many components in one scan in file %s\n",
		filename);
	fclose(fp);
	return FALSE;
      }
      if (! read_scan_integer(fp, &val, &termchar))
	goto bogus;
      scanptr->component_index[ncomps] = (int) val;
      ncomps++;
    }
    scanptr->comps_in_scan = ncomps;
    if (termchar == ':') {
      if (! read_scan_integer(fp, &val, &termchar) || termchar != ' ')
	goto bogus;
      scanptr->Ss = (int) val;
      if (! read_scan_integer(fp, &val, &termchar) || termchar != ' ')
	goto bogus;
      scanptr->Se = (int) val;
      if (! read_scan_integer(fp, &val, &termchar) || termchar != ' ')
	goto bogus;
      scanptr->Ah = (int) val;
      if (! read_scan_integer(fp, &val, &termchar))
	goto bogus;
      scanptr->Al = (int) val;
    } else {
      /* set non-progressive parameters */
      scanptr->Ss = 0;
      scanptr->Se = DCTSIZE2-1;
      scanptr->Ah = 0;
      scanptr->Al = 0;
    }
    if (termchar != ';' && termchar != EOF) {
bogus:
      fprintf(stderr, "Invalid scan entry format in file %s\n", filename);
      fclose(fp);
      return FALSE;
    }
    scanptr++, scanno++;
  }

  if (termchar != EOF) {
    fprintf(stderr, "Non-numeric data in file %s\n", filename);
    fclose(fp);
    return FALSE;
  }

  if (scanno > 0) {
    /* Stash completed scan list in cinfo structure.
     * NOTE: for cjpeg's use, JPOOL_IMAGE is the right lifetime for this data,
     * but if you want to compress multiple images you'd want JPOOL_PERMANENT.
     */
    scanptr = (jpeg_scan_info *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  scanno * SIZEOF(jpeg_scan_info));
    MEMCOPY(scanptr, scans, scanno * SIZEOF(jpeg_scan_info));
    cinfo->scan_info = scanptr;
    cinfo->num_scans = scanno;
  }

  fclose(fp);
  return TRUE;
}

#endif /* C_MULTISCAN_FILES_SUPPORTED */


GLOBAL(boolean)
set_quant_slots (j_compress_ptr cinfo, char *arg)
/* Process a quantization-table-selectors parameter string, of the form
 *     N[,N,...]
 * If there are more components than parameters, the last value is replicated.
 */
{
  int val = 0;			/* default table # */
  int ci;
  char ch;

  for (ci = 0; ci < MAX_COMPONENTS; ci++) {
    if (*arg) {
      ch = ',';			/* if not set by sscanf, will be ',' */
      if (sscanf(arg, "%d%c", &val, &ch) < 1)
	return FALSE;
      if (ch != ',')		/* syntax check */
	return FALSE;
      if (val < 0 || val >= NUM_QUANT_TBLS) {
	fprintf(stderr, "JPEG quantization tables are numbered 0..%d\n",
		NUM_QUANT_TBLS-1);
	return FALSE;
      }
      cinfo->comp_info[ci].quant_tbl_no = val;
      while (*arg && *arg++ != ',') /* advance to next segment of arg string */
	;
    } else {
      /* reached end of parameter, set remaining components to last table */
      cinfo->comp_info[ci].quant_tbl_no = val;
    }
  }
  return TRUE;
}


GLOBAL(boolean)
set_sample_factors (j_compress_ptr cinfo, char *arg)
/* Process a sample-factors parameter string, of the form
 *     HxV[,HxV,...]
 * If there are more components than parameters, "1x1" is assumed for the rest.
 */
{
  int ci, val1, val2;
  char ch1, ch2;

  for (ci = 0; ci < MAX_COMPONENTS; ci++) {
    if (*arg) {
      ch2 = ',';		/* if not set by sscanf, will be ',' */
      if (sscanf(arg, "%d%c%d%c", &val1, &ch1, &val2, &ch2) < 3)
	return FALSE;
      if ((ch1 != 'x' && ch1 != 'X') || ch2 != ',') /* syntax check */
	return FALSE;
      if (val1 <= 0 || val1 > 4 || val2 <= 0 || val2 > 4) {
	fprintf(stderr, "JPEG sampling factors must be 1..4\n");
	return FALSE;
      }
      cinfo->comp_info[ci].h_samp_factor = val1;
      cinfo->comp_info[ci].v_samp_factor = val2;
      while (*arg && *arg++ != ',') /* advance to next segment of arg string */
	;
    } else {
      /* reached end of parameter, set remaining components to 1x1 sampling */
      cinfo->comp_info[ci].h_samp_factor = 1;
      cinfo->comp_info[ci].v_samp_factor = 1;
    }
  }
  return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\rdtarga.c ===
/*
 * rdtarga.c
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains routines to read input images in Targa format.
 *
 * These routines may need modification for non-Unix environments or
 * specialized applications.  As they stand, they assume input from
 * an ordinary stdio stream.  They further assume that reading begins
 * at the start of the file; start_input may need work if the
 * user interface has already read some data (e.g., to determine that
 * the file is indeed Targa format).
 *
 * Based on code contributed by Lee Daniel Crocker.
 */

#include "cdjpeg.h"		/* Common decls for cjpeg/djpeg applications */

#ifdef TARGA_SUPPORTED


/* Macros to deal with unsigned chars as efficiently as compiler allows */

#ifdef HAVE_UNSIGNED_CHAR
typedef unsigned char U_CHAR;
#define UCH(x)	((int) (x))
#else /* !HAVE_UNSIGNED_CHAR */
#ifdef CHAR_IS_UNSIGNED
typedef char U_CHAR;
#define UCH(x)	((int) (x))
#else
typedef char U_CHAR;
#define UCH(x)	((int) (x) & 0xFF)
#endif
#endif /* HAVE_UNSIGNED_CHAR */


#define	ReadOK(file,buffer,len)	(JFREAD(file,buffer,len) == ((size_t) (len)))


/* Private version of data source object */

typedef struct _tga_source_struct * tga_source_ptr;

typedef struct _tga_source_struct {
  struct cjpeg_source_struct pub; /* public fields */

  j_compress_ptr cinfo;		/* back link saves passing separate parm */

  JSAMPARRAY colormap;		/* Targa colormap (converted to my format) */

  jvirt_sarray_ptr whole_image;	/* Needed if funny input row order */
  JDIMENSION current_row;	/* Current logical row number to read */

  /* Pointer to routine to extract next Targa pixel from input file */
  JMETHOD(void, read_pixel, (tga_source_ptr sinfo));

  /* Result of read_pixel is delivered here: */
  U_CHAR tga_pixel[4];

  int pixel_size;		/* Bytes per Targa pixel (1 to 4) */

  /* State info for reading RLE-coded pixels; both counts must be init to 0 */
  int block_count;		/* # of pixels remaining in RLE block */
  int dup_pixel_count;		/* # of times to duplicate previous pixel */

  /* This saves the correct pixel-row-expansion method for preload_image */
  JMETHOD(JDIMENSION, get_pixel_rows, (j_compress_ptr cinfo,
				       cjpeg_source_ptr sinfo));
} tga_source_struct;


/* For expanding 5-bit pixel values to 8-bit with best rounding */

static const UINT8 c5to8bits[32] = {
    0,   8,  16,  25,  33,  41,  49,  58,
   66,  74,  82,  90,  99, 107, 115, 123,
  132, 140, 148, 156, 165, 173, 181, 189,
  197, 206, 214, 222, 230, 239, 247, 255
};



LOCAL(int)
read_byte (tga_source_ptr sinfo)
/* Read next byte from Targa file */
{
  register FILE *infile = sinfo->pub.input_file;
  register int c;

  if ((c = getc(infile)) == EOF)
    ERREXIT(sinfo->cinfo, JERR_INPUT_EOF);
  return c;
}


LOCAL(void)
read_colormap (tga_source_ptr sinfo, int cmaplen, int mapentrysize)
/* Read the colormap from a Targa file */
{
  int i;

  /* Presently only handles 24-bit BGR format */
  if (mapentrysize != 24)
    ERREXIT(sinfo->cinfo, JERR_TGA_BADCMAP);

  for (i = 0; i < cmaplen; i++) {
    sinfo->colormap[2][i] = (JSAMPLE) read_byte(sinfo);
    sinfo->colormap[1][i] = (JSAMPLE) read_byte(sinfo);
    sinfo->colormap[0][i] = (JSAMPLE) read_byte(sinfo);
  }
}


/*
 * read_pixel methods: get a single pixel from Targa file into tga_pixel[]
 */

METHODDEF(void)
read_non_rle_pixel (tga_source_ptr sinfo)
/* Read one Targa pixel from the input file; no RLE expansion */
{
  register FILE *infile = sinfo->pub.input_file;
  register int i;

  for (i = 0; i < sinfo->pixel_size; i++) {
    sinfo->tga_pixel[i] = (U_CHAR) getc(infile);
  }
}


METHODDEF(void)
read_rle_pixel (tga_source_ptr sinfo)
/* Read one Targa pixel from the input file, expanding RLE data as needed */
{
  register FILE *infile = sinfo->pub.input_file;
  register int i;

  /* Duplicate previously read pixel? */
  if (sinfo->dup_pixel_count > 0) {
    sinfo->dup_pixel_count--;
    return;
  }

  /* Time to read RLE block header? */
  if (--sinfo->block_count < 0) { /* decrement pixels remaining in block */
    i = read_byte(sinfo);
    if (i & 0x80) {		/* Start of duplicate-pixel block? */
      sinfo->dup_pixel_count = i & 0x7F; /* number of dups after this one */
      sinfo->block_count = 0;	/* then read new block header */
    } else {
      sinfo->block_count = i & 0x7F; /* number of pixels after this one */
    }
  }

  /* Read next pixel */
  for (i = 0; i < sinfo->pixel_size; i++) {
    sinfo->tga_pixel[i] = (U_CHAR) getc(infile);
  }
}


/*
 * Read one row of pixels.
 *
 * We provide several different versions depending on input file format.
 */


METHODDEF(JDIMENSION)
get_8bit_gray_row (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
/* This version is for reading 8-bit grayscale pixels */
{
  tga_source_ptr source = (tga_source_ptr) sinfo;
  register JSAMPROW ptr;
  register JDIMENSION col;
  
  ptr = source->pub.buffer[0];
  for (col = cinfo->image_width; col > 0; col--) {
    (*source->read_pixel) (source); /* Load next pixel into tga_pixel */
    *ptr++ = (JSAMPLE) UCH(source->tga_pixel[0]);
  }
  return 1;
}

METHODDEF(JDIMENSION)
get_8bit_row (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
/* This version is for reading 8-bit colormap indexes */
{
  tga_source_ptr source = (tga_source_ptr) sinfo;
  register int t;
  register JSAMPROW ptr;
  register JDIMENSION col;
  register JSAMPARRAY colormap = source->colormap;

  ptr = source->pub.buffer[0];
  for (col = cinfo->image_width; col > 0; col--) {
    (*source->read_pixel) (source); /* Load next pixel into tga_pixel */
    t = UCH(source->tga_pixel[0]);
    *ptr++ = colormap[0][t];
    *ptr++ = colormap[1][t];
    *ptr++ = colormap[2][t];
  }
  return 1;
}

METHODDEF(JDIMENSION)
get_16bit_row (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
/* This version is for reading 16-bit pixels */
{
  tga_source_ptr source = (tga_source_ptr) sinfo;
  register int t;
  register JSAMPROW ptr;
  register JDIMENSION col;
  
  ptr = source->pub.buffer[0];
  for (col = cinfo->image_width; col > 0; col--) {
    (*source->read_pixel) (source); /* Load next pixel into tga_pixel */
    t = UCH(source->tga_pixel[0]);
    t += UCH(source->tga_pixel[1]) << 8;
    /* We expand 5 bit data to 8 bit sample width.
     * The format of the 16-bit (LSB first) input word is
     *     xRRRRRGGGGGBBBBB
     */
    ptr[2] = (JSAMPLE) c5to8bits[t & 0x1F];
    t >>= 5;
    ptr[1] = (JSAMPLE) c5to8bits[t & 0x1F];
    t >>= 5;
    ptr[0] = (JSAMPLE) c5to8bits[t & 0x1F];
    ptr += 3;
  }
  return 1;
}

METHODDEF(JDIMENSION)
get_24bit_row (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
/* This version is for reading 24-bit pixels */
{
  tga_source_ptr source = (tga_source_ptr) sinfo;
  register JSAMPROW ptr;
  register JDIMENSION col;
  
  ptr = source->pub.buffer[0];
  for (col = cinfo->image_width; col > 0; col--) {
    (*source->read_pixel) (source); /* Load next pixel into tga_pixel */
    *ptr++ = (JSAMPLE) UCH(source->tga_pixel[2]); /* change BGR to RGB order */
    *ptr++ = (JSAMPLE) UCH(source->tga_pixel[1]);
    *ptr++ = (JSAMPLE) UCH(source->tga_pixel[0]);
  }
  return 1;
}

/*
 * Targa also defines a 32-bit pixel format with order B,G,R,A.
 * We presently ignore the attribute byte, so the code for reading
 * these pixels is identical to the 24-bit routine above.
 * This works because the actual pixel length is only known to read_pixel.
 */

#define get_32bit_row  get_24bit_row


/*
 * This method is for re-reading the input data in standard top-down
 * row order.  The entire image has already been read into whole_image
 * with proper conversion of pixel format, but it's in a funny row order.
 */

METHODDEF(JDIMENSION)
get_memory_row (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
{
  tga_source_ptr source = (tga_source_ptr) sinfo;
  JDIMENSION source_row;

  /* Compute row of source that maps to current_row of normal order */
  /* For now, assume image is bottom-up and not interlaced. */
  /* NEEDS WORK to support interlaced images! */
  source_row = cinfo->image_height - source->current_row - 1;

  /* Fetch that row from virtual array */
  source->pub.buffer = (*cinfo->mem->access_virt_sarray)
    ((j_common_ptr) cinfo, source->whole_image,
     source_row, (JDIMENSION) 1, FALSE);

  source->current_row++;
  return 1;
}


/*
 * This method loads the image into whole_image during the first call on
 * get_pixel_rows.  The get_pixel_rows pointer is then adjusted to call
 * get_memory_row on subsequent calls.
 */

METHODDEF(JDIMENSION)
preload_image (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
{
  tga_source_ptr source = (tga_source_ptr) sinfo;
  JDIMENSION row;
  cd_progress_ptr progress = (cd_progress_ptr) cinfo->progress;

  /* Read the data into a virtual array in input-file row order. */
  for (row = 0; row < cinfo->image_height; row++) {
    if (progress != NULL) {
      progress->pub.pass_counter = (long) row;
      progress->pub.pass_limit = (long) cinfo->image_height;
      (*progress->pub.progress_monitor) ((j_common_ptr) cinfo);
    }
    source->pub.buffer = (*cinfo->mem->access_virt_sarray)
      ((j_common_ptr) cinfo, source->whole_image, row, (JDIMENSION) 1, TRUE);
    (*source->get_pixel_rows) (cinfo, sinfo);
  }
  if (progress != NULL)
    progress->completed_extra_passes++;

  /* Set up to read from the virtual array in unscrambled order */
  source->pub.get_pixel_rows = get_memory_row;
  source->current_row = 0;
  /* And read the first row */
  return get_memory_row(cinfo, sinfo);
}


/*
 * Read the file header; return image size and component count.
 */

METHODDEF(void)
start_input_tga (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
{
  tga_source_ptr source = (tga_source_ptr) sinfo;
  U_CHAR targaheader[18];
  int idlen, cmaptype, subtype, flags, interlace_type, components;
  unsigned int width, height, maplen;
  boolean is_bottom_up;

#define GET_2B(offset)	((unsigned int) UCH(targaheader[offset]) + \
			 (((unsigned int) UCH(targaheader[offset+1])) << 8))

  if (! ReadOK(source->pub.input_file, targaheader, 18))
    ERREXIT(cinfo, JERR_INPUT_EOF);

  /* Pretend "15-bit" pixels are 16-bit --- we ignore attribute bit anyway */
  if (targaheader[16] == 15)
    targaheader[16] = 16;

  idlen = UCH(targaheader[0]);
  cmaptype = UCH(targaheader[1]);
  subtype = UCH(targaheader[2]);
  maplen = GET_2B(5);
  width = GET_2B(12);
  height = GET_2B(14);
  source->pixel_size = UCH(targaheader[16]) >> 3;
  flags = UCH(targaheader[17]);	/* Image Descriptor byte */

  is_bottom_up = ((flags & 0x20) == 0);	/* bit 5 set => top-down */
  interlace_type = flags >> 6;	/* bits 6/7 are interlace code */

  if (cmaptype > 1 ||		/* cmaptype must be 0 or 1 */
      source->pixel_size < 1 || source->pixel_size > 4 ||
      (UCH(targaheader[16]) & 7) != 0 || /* bits/pixel must be multiple of 8 */
      interlace_type != 0)	/* currently don't allow interlaced image */
    ERREXIT(cinfo, JERR_TGA_BADPARMS);
  
  if (subtype > 8) {
    /* It's an RLE-coded file */
    source->read_pixel = read_rle_pixel;
    source->block_count = source->dup_pixel_count = 0;
    subtype -= 8;
  } else {
    /* Non-RLE file */
    source->read_pixel = read_non_rle_pixel;
  }

  /* Now should have subtype 1, 2, or 3 */
  components = 3;		/* until proven different */
  cinfo->in_color_space = JCS_RGB;

  switch (subtype) {
  case 1:			/* Colormapped image */
    if (source->pixel_size == 1 && cmaptype == 1)
      source->get_pixel_rows = get_8bit_row;
    else
      ERREXIT(cinfo, JERR_TGA_BADPARMS);
    TRACEMS2(cinfo, 1, JTRC_TGA_MAPPED, width, height);
    break;
  case 2:			/* RGB image */
    switch (source->pixel_size) {
    case 2:
      source->get_pixel_rows = get_16bit_row;
      break;
    case 3:
      source->get_pixel_rows = get_24bit_row;
      break;
    case 4:
      source->get_pixel_rows = get_32bit_row;
      break;
    default:
      ERREXIT(cinfo, JERR_TGA_BADPARMS);
      break;
    }
    TRACEMS2(cinfo, 1, JTRC_TGA, width, height);
    break;
  case 3:			/* Grayscale image */
    components = 1;
    cinfo->in_color_space = JCS_GRAYSCALE;
    if (source->pixel_size == 1)
      source->get_pixel_rows = get_8bit_gray_row;
    else
      ERREXIT(cinfo, JERR_TGA_BADPARMS);
    TRACEMS2(cinfo, 1, JTRC_TGA_GRAY, width, height);
    break;
  default:
    ERREXIT(cinfo, JERR_TGA_BADPARMS);
    break;
  }

  if (is_bottom_up) {
    /* Create a virtual array to buffer the upside-down image. */
    source->whole_image = (*cinfo->mem->request_virt_sarray)
      ((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
       (JDIMENSION) width * components, (JDIMENSION) height, (JDIMENSION) 1);
    if (cinfo->progress != NULL) {
      cd_progress_ptr progress = (cd_progress_ptr) cinfo->progress;
      progress->total_extra_passes++; /* count file input as separate pass */
    }
    /* source->pub.buffer will point to the virtual array. */
    source->pub.buffer_height = 1; /* in case anyone looks at it */
    source->pub.get_pixel_rows = preload_image;
  } else {
    /* Don't need a virtual array, but do need a one-row input buffer. */
    source->whole_image = NULL;
    source->pub.buffer = (*cinfo->mem->alloc_sarray)
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       (JDIMENSION) width * components, (JDIMENSION) 1);
    source->pub.buffer_height = 1;
    source->pub.get_pixel_rows = source->get_pixel_rows;
  }
  
  while (idlen--)		/* Throw away ID field */
    (void) read_byte(source);

  if (maplen > 0) {
    if (maplen > 256 || GET_2B(3) != 0)
      ERREXIT(cinfo, JERR_TGA_BADCMAP);
    /* Allocate space to store the colormap */
    source->colormap = (*cinfo->mem->alloc_sarray)
      ((j_common_ptr) cinfo, JPOOL_IMAGE, (JDIMENSION) maplen, (JDIMENSION) 3);
    /* and read it from the file */
    read_colormap(source, (int) maplen, UCH(targaheader[7]));
  } else {
    if (cmaptype)		/* but you promised a cmap! */
      ERREXIT(cinfo, JERR_TGA_BADPARMS);
    source->colormap = NULL;
  }

  cinfo->input_components = components;
  cinfo->data_precision = 8;
  cinfo->image_width = width;
  cinfo->image_height = height;
}


/*
 * Finish up at the end of the file.
 */

METHODDEF(void)
finish_input_tga (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
{
  /* no work */
}


/*
 * The module selection routine for Targa format input.
 */

GLOBAL(cjpeg_source_ptr)
jinit_read_targa (j_compress_ptr cinfo)
{
  tga_source_ptr source;

  /* Create module interface object */
  source = (tga_source_ptr)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  SIZEOF(tga_source_struct));
  source->cinfo = cinfo;	/* make back link for subroutines */
  /* Fill in method ptrs, except get_pixel_rows which start_input sets */
  source->pub.start_input = start_input_tga;
  source->pub.finish_input = finish_input_tga;

  return (cjpeg_source_ptr) source;
}

#endif /* TARGA_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\rdppm.c ===
/*
 * rdppm.c
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains routines to read input images in PPM/PGM format.
 * The extended 2-byte-per-sample raw PPM/PGM formats are supported.
 * The PBMPLUS library is NOT required to compile this software
 * (but it is highly useful as a set of PPM image manipulation programs).
 *
 * These routines may need modification for non-Unix environments or
 * specialized applications.  As they stand, they assume input from
 * an ordinary stdio stream.  They further assume that reading begins
 * at the start of the file; start_input may need work if the
 * user interface has already read some data (e.g., to determine that
 * the file is indeed PPM format).
 */

#include "cdjpeg.h"		/* Common decls for cjpeg/djpeg applications */

#ifdef PPM_SUPPORTED


/* Portions of this code are based on the PBMPLUS library, which is:
**
** Copyright (C) 1988 by Jef Poskanzer.
**
** Permission to use, copy, modify, and distribute this software and its
** documentation for any purpose and without fee is hereby granted, provided
** that the above copyright notice appear in all copies and that both that
** copyright notice and this permission notice appear in supporting
** documentation.  This software is provided "as is" without express or
** implied warranty.
*/


/* Macros to deal with unsigned chars as efficiently as compiler allows */

#ifdef HAVE_UNSIGNED_CHAR
typedef unsigned char U_CHAR;
#define UCH(x)	((int) (x))
#else /* !HAVE_UNSIGNED_CHAR */
#ifdef CHAR_IS_UNSIGNED
typedef char U_CHAR;
#define UCH(x)	((int) (x))
#else
typedef char U_CHAR;
#define UCH(x)	((int) (x) & 0xFF)
#endif
#endif /* HAVE_UNSIGNED_CHAR */


#define	ReadOK(file,buffer,len)	(JFREAD(file,buffer,len) == ((size_t) (len)))


/*
 * On most systems, reading individual bytes with getc() is drastically less
 * efficient than buffering a row at a time with fread().  On PCs, we must
 * allocate the buffer in near data space, because we are assuming small-data
 * memory model, wherein fread() can't reach far memory.  If you need to
 * process very wide images on a PC, you might have to compile in large-memory
 * model, or else replace fread() with a getc() loop --- which will be much
 * slower.
 */


/* Private version of data source object */

typedef struct {
  struct cjpeg_source_struct pub; /* public fields */

  U_CHAR *iobuffer;		/* non-FAR pointer to I/O buffer */
  JSAMPROW pixrow;		/* FAR pointer to same */
  size_t buffer_width;		/* width of I/O buffer */
  JSAMPLE *rescale;		/* => maxval-remapping array, or NULL */
} ppm_source_struct;

typedef ppm_source_struct * ppm_source_ptr;


LOCAL(int)
pbm_getc (FILE * infile)
/* Read next char, skipping over any comments */
/* A comment/newline sequence is returned as a newline */
{
  register int ch;

  ch = getc(infile);
  if (ch == '#') {
    do {
      ch = getc(infile);
    } while (ch != '\n' && ch != EOF);
  }
  return ch;
}


LOCAL(unsigned int)
read_pbm_integer (j_compress_ptr cinfo, FILE * infile)
/* Read an unsigned decimal integer from the PPM file */
/* Swallows one trailing character after the integer */
/* Note that on a 16-bit-int machine, only values up to 64k can be read. */
/* This should not be a problem in practice. */
{
  register int ch;
  register unsigned int val;

  /* Skip any leading whitespace */
  do {
    ch = pbm_getc(infile);
    if (ch == EOF)
      ERREXIT(cinfo, JERR_INPUT_EOF);
  } while (ch == ' ' || ch == '\t' || ch == '\n' || ch == '\r');

  if (ch < '0' || ch > '9')
    ERREXIT(cinfo, JERR_PPM_NONNUMERIC);

  val = ch - '0';
  while ((ch = pbm_getc(infile)) >= '0' && ch <= '9') {
    val *= 10;
    val += ch - '0';
  }
  return val;
}


/*
 * Read one row of pixels.
 *
 * We provide several different versions depending on input file format.
 * In all cases, input is scaled to the size of JSAMPLE.
 *
 * A really fast path is provided for reading byte/sample raw files with
 * maxval = MAXJSAMPLE, which is the normal case for 8-bit data.
 */


METHODDEF(JDIMENSION)
get_text_gray_row (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
/* This version is for reading text-format PGM files with any maxval */
{
  ppm_source_ptr source = (ppm_source_ptr) sinfo;
  FILE * infile = source->pub.input_file;
  register JSAMPROW ptr;
  register JSAMPLE *rescale = source->rescale;
  JDIMENSION col;

  ptr = source->pub.buffer[0];
  for (col = cinfo->image_width; col > 0; col--) {
    *ptr++ = rescale[read_pbm_integer(cinfo, infile)];
  }
  return 1;
}


METHODDEF(JDIMENSION)
get_text_rgb_row (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
/* This version is for reading text-format PPM files with any maxval */
{
  ppm_source_ptr source = (ppm_source_ptr) sinfo;
  FILE * infile = source->pub.input_file;
  register JSAMPROW ptr;
  register JSAMPLE *rescale = source->rescale;
  JDIMENSION col;

  ptr = source->pub.buffer[0];
  for (col = cinfo->image_width; col > 0; col--) {
    *ptr++ = rescale[read_pbm_integer(cinfo, infile)];
    *ptr++ = rescale[read_pbm_integer(cinfo, infile)];
    *ptr++ = rescale[read_pbm_integer(cinfo, infile)];
  }
  return 1;
}


METHODDEF(JDIMENSION)
get_scaled_gray_row (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
/* This version is for reading raw-byte-format PGM files with any maxval */
{
  ppm_source_ptr source = (ppm_source_ptr) sinfo;
  register JSAMPROW ptr;
  register U_CHAR * bufferptr;
  register JSAMPLE *rescale = source->rescale;
  JDIMENSION col;

  if (! ReadOK(source->pub.input_file, source->iobuffer, source->buffer_width))
    ERREXIT(cinfo, JERR_INPUT_EOF);
  ptr = source->pub.buffer[0];
  bufferptr = source->iobuffer;
  for (col = cinfo->image_width; col > 0; col--) {
    *ptr++ = rescale[UCH(*bufferptr++)];
  }
  return 1;
}


METHODDEF(JDIMENSION)
get_scaled_rgb_row (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
/* This version is for reading raw-byte-format PPM files with any maxval */
{
  ppm_source_ptr source = (ppm_source_ptr) sinfo;
  register JSAMPROW ptr;
  register U_CHAR * bufferptr;
  register JSAMPLE *rescale = source->rescale;
  JDIMENSION col;

  if (! ReadOK(source->pub.input_file, source->iobuffer, source->buffer_width))
    ERREXIT(cinfo, JERR_INPUT_EOF);
  ptr = source->pub.buffer[0];
  bufferptr = source->iobuffer;
  for (col = cinfo->image_width; col > 0; col--) {
    *ptr++ = rescale[UCH(*bufferptr++)];
    *ptr++ = rescale[UCH(*bufferptr++)];
    *ptr++ = rescale[UCH(*bufferptr++)];
  }
  return 1;
}


METHODDEF(JDIMENSION)
get_raw_row (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
/* This version is for reading raw-byte-format files with maxval = MAXJSAMPLE.
 * In this case we just read right into the JSAMPLE buffer!
 * Note that same code works for PPM and PGM files.
 */
{
  ppm_source_ptr source = (ppm_source_ptr) sinfo;

  if (! ReadOK(source->pub.input_file, source->iobuffer, source->buffer_width))
    ERREXIT(cinfo, JERR_INPUT_EOF);
  return 1;
}


METHODDEF(JDIMENSION)
get_word_gray_row (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
/* This version is for reading raw-word-format PGM files with any maxval */
{
  ppm_source_ptr source = (ppm_source_ptr) sinfo;
  register JSAMPROW ptr;
  register U_CHAR * bufferptr;
  register JSAMPLE *rescale = source->rescale;
  JDIMENSION col;

  if (! ReadOK(source->pub.input_file, source->iobuffer, source->buffer_width))
    ERREXIT(cinfo, JERR_INPUT_EOF);
  ptr = source->pub.buffer[0];
  bufferptr = source->iobuffer;
  for (col = cinfo->image_width; col > 0; col--) {
    register int temp;
    temp  = UCH(*bufferptr++);
    temp |= UCH(*bufferptr++) << 8;
    *ptr++ = rescale[temp];
  }
  return 1;
}


METHODDEF(JDIMENSION)
get_word_rgb_row (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
/* This version is for reading raw-word-format PPM files with any maxval */
{
  ppm_source_ptr source = (ppm_source_ptr) sinfo;
  register JSAMPROW ptr;
  register U_CHAR * bufferptr;
  register JSAMPLE *rescale = source->rescale;
  JDIMENSION col;

  if (! ReadOK(source->pub.input_file, source->iobuffer, source->buffer_width))
    ERREXIT(cinfo, JERR_INPUT_EOF);
  ptr = source->pub.buffer[0];
  bufferptr = source->iobuffer;
  for (col = cinfo->image_width; col > 0; col--) {
    register int temp;
    temp  = UCH(*bufferptr++);
    temp |= UCH(*bufferptr++) << 8;
    *ptr++ = rescale[temp];
    temp  = UCH(*bufferptr++);
    temp |= UCH(*bufferptr++) << 8;
    *ptr++ = rescale[temp];
    temp  = UCH(*bufferptr++);
    temp |= UCH(*bufferptr++) << 8;
    *ptr++ = rescale[temp];
  }
  return 1;
}


/*
 * Read the file header; return image size and component count.
 */

METHODDEF(void)
start_input_ppm (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
{
  ppm_source_ptr source = (ppm_source_ptr) sinfo;
  int c;
  unsigned int w, h, maxval;
  boolean need_iobuffer, use_raw_buffer, need_rescale;

  if (getc(source->pub.input_file) != 'P')
    ERREXIT(cinfo, JERR_PPM_NOT);

  c = getc(source->pub.input_file); /* save format discriminator for a sec */

  /* fetch the remaining header info */
  w = read_pbm_integer(cinfo, source->pub.input_file);
  h = read_pbm_integer(cinfo, source->pub.input_file);
  maxval = read_pbm_integer(cinfo, source->pub.input_file);

  if (w <= 0 || h <= 0 || maxval <= 0) /* error check */
    ERREXIT(cinfo, JERR_PPM_NOT);

  cinfo->data_precision = BITS_IN_JSAMPLE; /* we always rescale data to this */
  cinfo->image_width = (JDIMENSION) w;
  cinfo->image_height = (JDIMENSION) h;

  /* initialize flags to most common settings */
  need_iobuffer = TRUE;		/* do we need an I/O buffer? */
  use_raw_buffer = FALSE;	/* do we map input buffer onto I/O buffer? */
  need_rescale = TRUE;		/* do we need a rescale array? */

  switch (c) {
  case '2':			/* it's a text-format PGM file */
    cinfo->input_components = 1;
    cinfo->in_color_space = JCS_GRAYSCALE;
    TRACEMS2(cinfo, 1, JTRC_PGM_TEXT, w, h);
    source->pub.get_pixel_rows = get_text_gray_row;
    need_iobuffer = FALSE;
    break;

  case '3':			/* it's a text-format PPM file */
    cinfo->input_components = 3;
    cinfo->in_color_space = JCS_RGB;
    TRACEMS2(cinfo, 1, JTRC_PPM_TEXT, w, h);
    source->pub.get_pixel_rows = get_text_rgb_row;
    need_iobuffer = FALSE;
    break;

  case '5':			/* it's a raw-format PGM file */
    cinfo->input_components = 1;
    cinfo->in_color_space = JCS_GRAYSCALE;
    TRACEMS2(cinfo, 1, JTRC_PGM, w, h);
    if (maxval > 255) {
      source->pub.get_pixel_rows = get_word_gray_row;
    } else if (maxval == MAXJSAMPLE && SIZEOF(JSAMPLE) == SIZEOF(U_CHAR)) {
      source->pub.get_pixel_rows = get_raw_row;
      use_raw_buffer = TRUE;
      need_rescale = FALSE;
    } else {
      source->pub.get_pixel_rows = get_scaled_gray_row;
    }
    break;

  case '6':			/* it's a raw-format PPM file */
    cinfo->input_components = 3;
    cinfo->in_color_space = JCS_RGB;
    TRACEMS2(cinfo, 1, JTRC_PPM, w, h);
    if (maxval > 255) {
      source->pub.get_pixel_rows = get_word_rgb_row;
    } else if (maxval == MAXJSAMPLE && SIZEOF(JSAMPLE) == SIZEOF(U_CHAR)) {
      source->pub.get_pixel_rows = get_raw_row;
      use_raw_buffer = TRUE;
      need_rescale = FALSE;
    } else {
      source->pub.get_pixel_rows = get_scaled_rgb_row;
    }
    break;

  default:
    ERREXIT(cinfo, JERR_PPM_NOT);
    break;
  }

  /* Allocate space for I/O buffer: 1 or 3 bytes or words/pixel. */
  if (need_iobuffer) {
    source->buffer_width = (size_t) w * cinfo->input_components *
      ((maxval<=255) ? SIZEOF(U_CHAR) : (2*SIZEOF(U_CHAR)));
    source->iobuffer = (U_CHAR *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  source->buffer_width);
  }

  /* Create compressor input buffer. */
  if (use_raw_buffer) {
    /* For unscaled raw-input case, we can just map it onto the I/O buffer. */
    /* Synthesize a JSAMPARRAY pointer structure */
    /* Cast here implies near->far pointer conversion on PCs */
    source->pixrow = (JSAMPROW) source->iobuffer;
    source->pub.buffer = & source->pixrow;
    source->pub.buffer_height = 1;
  } else {
    /* Need to translate anyway, so make a separate sample buffer. */
    source->pub.buffer = (*cinfo->mem->alloc_sarray)
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       (JDIMENSION) w * cinfo->input_components, (JDIMENSION) 1);
    source->pub.buffer_height = 1;
  }

  /* Compute the rescaling array if required. */
  if (need_rescale) {
    INT32 val, half_maxval;

    /* On 16-bit-int machines we have to be careful of maxval = 65535 */
    source->rescale = (JSAMPLE *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  (size_t) (((long) maxval + 1L) * SIZEOF(JSAMPLE)));
    half_maxval = maxval / 2;
    for (val = 0; val <= (INT32) maxval; val++) {
      /* The multiplication here must be done in 32 bits to avoid overflow */
      source->rescale[val] = (JSAMPLE) ((val*MAXJSAMPLE + half_maxval)/maxval);
    }
  }
}


/*
 * Finish up at the end of the file.
 */

METHODDEF(void)
finish_input_ppm (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
{
  /* no work */
}


/*
 * The module selection routine for PPM format input.
 */

GLOBAL(cjpeg_source_ptr)
jinit_read_ppm (j_compress_ptr cinfo)
{
  ppm_source_ptr source;

  /* Create module interface object */
  source = (ppm_source_ptr)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  SIZEOF(ppm_source_struct));
  /* Fill in method ptrs, except get_pixel_rows which start_input sets */
  source->pub.start_input = start_input_ppm;
  source->pub.finish_input = finish_input_ppm;

  return (cjpeg_source_ptr) source;
}

#endif /* PPM_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\wrbmp.c ===
/*
 * wrbmp.c
 *
 * Copyright (C) 1994-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains routines to write output images in Microsoft "BMP"
 * format (MS Windows 3.x and OS/2 1.x flavors).
 * Either 8-bit colormapped or 24-bit full-color format can be written.
 * No compression is supported.
 *
 * These routines may need modification for non-Unix environments or
 * specialized applications.  As they stand, they assume output to
 * an ordinary stdio stream.
 *
 * This code contributed by James Arthur Boucher.
 */

#include "cdjpeg.h"		/* Common decls for cjpeg/djpeg applications */

#ifdef BMP_SUPPORTED


/*
 * To support 12-bit JPEG data, we'd have to scale output down to 8 bits.
 * This is not yet implemented.
 */

#if BITS_IN_JSAMPLE != 8
  Sorry, this code only copes with 8-bit JSAMPLEs. /* deliberate syntax err */
#endif

/*
 * Since BMP stores scanlines bottom-to-top, we have to invert the image
 * from JPEG's top-to-bottom order.  To do this, we save the outgoing data
 * in a virtual array during put_pixel_row calls, then actually emit the
 * BMP file during finish_output.  The virtual array contains one JSAMPLE per
 * pixel if the output is grayscale or colormapped, three if it is full color.
 */

/* Private version of data destination object */

typedef struct {
  struct djpeg_dest_struct pub;	/* public fields */

  boolean is_os2;		/* saves the OS2 format request flag */

  jvirt_sarray_ptr whole_image;	/* needed to reverse row order */
  JDIMENSION data_width;	/* JSAMPLEs per row */
  JDIMENSION row_width;		/* physical width of one row in the BMP file */
  int pad_bytes;		/* number of padding bytes needed per row */
  JDIMENSION cur_output_row;	/* next row# to write to virtual array */
} bmp_dest_struct;

typedef bmp_dest_struct * bmp_dest_ptr;


/* Forward declarations */
LOCAL(void) write_colormap
	JPP((j_decompress_ptr cinfo, bmp_dest_ptr dest,
	     int map_colors, int map_entry_size));


/*
 * Write some pixel data.
 * In this module rows_supplied will always be 1.
 */

METHODDEF(void)
put_pixel_rows (j_decompress_ptr cinfo, djpeg_dest_ptr dinfo,
		JDIMENSION rows_supplied)
/* This version is for writing 24-bit pixels */
{
  bmp_dest_ptr dest = (bmp_dest_ptr) dinfo;
  JSAMPARRAY image_ptr;
  register JSAMPROW inptr, outptr;
  register JDIMENSION col;
  int pad;

  /* Access next row in virtual array */
  image_ptr = (*cinfo->mem->access_virt_sarray)
    ((j_common_ptr) cinfo, dest->whole_image,
     dest->cur_output_row, (JDIMENSION) 1, TRUE);
  dest->cur_output_row++;

  /* Transfer data.  Note destination values must be in BGR order
   * (even though Microsoft's own documents say the opposite).
   */
  inptr = dest->pub.buffer[0];
  outptr = image_ptr[0];
  for (col = cinfo->output_width; col > 0; col--) {
    outptr[2] = *inptr++;	/* can omit GETJSAMPLE() safely */
    outptr[1] = *inptr++;
    outptr[0] = *inptr++;
    outptr += 3;
  }

  /* Zero out the pad bytes. */
  pad = dest->pad_bytes;
  while (--pad >= 0)
    *outptr++ = 0;
}

METHODDEF(void)
put_gray_rows (j_decompress_ptr cinfo, djpeg_dest_ptr dinfo,
	       JDIMENSION rows_supplied)
/* This version is for grayscale OR quantized color output */
{
  bmp_dest_ptr dest = (bmp_dest_ptr) dinfo;
  JSAMPARRAY image_ptr;
  register JSAMPROW inptr, outptr;
  register JDIMENSION col;
  int pad;

  /* Access next row in virtual array */
  image_ptr = (*cinfo->mem->access_virt_sarray)
    ((j_common_ptr) cinfo, dest->whole_image,
     dest->cur_output_row, (JDIMENSION) 1, TRUE);
  dest->cur_output_row++;

  /* Transfer data. */
  inptr = dest->pub.buffer[0];
  outptr = image_ptr[0];
  for (col = cinfo->output_width; col > 0; col--) {
    *outptr++ = *inptr++;	/* can omit GETJSAMPLE() safely */
  }

  /* Zero out the pad bytes. */
  pad = dest->pad_bytes;
  while (--pad >= 0)
    *outptr++ = 0;
}


/*
 * Startup: normally writes the file header.
 * In this module we may as well postpone everything until finish_output.
 */

METHODDEF(void)
start_output_bmp (j_decompress_ptr cinfo, djpeg_dest_ptr dinfo)
{
  /* no work here */
}


/*
 * Finish up at the end of the file.
 *
 * Here is where we really output the BMP file.
 *
 * First, routines to write the Windows and OS/2 variants of the file header.
 */

LOCAL(void)
write_bmp_header (j_decompress_ptr cinfo, bmp_dest_ptr dest)
/* Write a Windows-style BMP file header, including colormap if needed */
{
  char bmpfileheader[14];
  char bmpinfoheader[40];
#define PUT_2B(array,offset,value)  \
	(array[offset] = (char) ((value) & 0xFF), \
	 array[offset+1] = (char) (((value) >> 8) & 0xFF))
#define PUT_4B(array,offset,value)  \
	(array[offset] = (char) ((value) & 0xFF), \
	 array[offset+1] = (char) (((value) >> 8) & 0xFF), \
	 array[offset+2] = (char) (((value) >> 16) & 0xFF), \
	 array[offset+3] = (char) (((value) >> 24) & 0xFF))
  INT32 headersize, bfSize;
  int bits_per_pixel, cmap_entries;

  /* Compute colormap size and total file size */
  if (cinfo->out_color_space == JCS_RGB) {
    if (cinfo->quantize_colors) {
      /* Colormapped RGB */
      bits_per_pixel = 8;
      cmap_entries = 256;
    } else {
      /* Unquantized, full color RGB */
      bits_per_pixel = 24;
      cmap_entries = 0;
    }
  } else {
    /* Grayscale output.  We need to fake a 256-entry colormap. */
    bits_per_pixel = 8;
    cmap_entries = 256;
  }
  /* File size */
  headersize = 14 + 40 + cmap_entries * 4; /* Header and colormap */
  bfSize = headersize + (INT32) dest->row_width * (INT32) cinfo->output_height;
  
  /* Set unused fields of header to 0 */
  MEMZERO(bmpfileheader, SIZEOF(bmpfileheader));
  MEMZERO(bmpinfoheader, SIZEOF(bmpinfoheader));

  /* Fill the file header */
  bmpfileheader[0] = 0x42;	/* first 2 bytes are ASCII 'B', 'M' */
  bmpfileheader[1] = 0x4D;
  PUT_4B(bmpfileheader, 2, bfSize); /* bfSize */
  /* we leave bfReserved1 & bfReserved2 = 0 */
  PUT_4B(bmpfileheader, 10, headersize); /* bfOffBits */

  /* Fill the info header (Microsoft calls this a BITMAPINFOHEADER) */
  PUT_2B(bmpinfoheader, 0, 40);	/* biSize */
  PUT_4B(bmpinfoheader, 4, cinfo->output_width); /* biWidth */
  PUT_4B(bmpinfoheader, 8, cinfo->output_height); /* biHeight */
  PUT_2B(bmpinfoheader, 12, 1);	/* biPlanes - must be 1 */
  PUT_2B(bmpinfoheader, 14, bits_per_pixel); /* biBitCount */
  /* we leave biCompression = 0, for none */
  /* we leave biSizeImage = 0; this is correct for uncompressed data */
  if (cinfo->density_unit == 2) { /* if have density in dots/cm, then */
    PUT_4B(bmpinfoheader, 24, (INT32) (cinfo->X_density*100)); /* XPels/M */
    PUT_4B(bmpinfoheader, 28, (INT32) (cinfo->Y_density*100)); /* XPels/M */
  }
  PUT_2B(bmpinfoheader, 32, cmap_entries); /* biClrUsed */
  /* we leave biClrImportant = 0 */

  if (JFWRITE(dest->pub.output_file, bmpfileheader, 14) != (size_t) 14)
    ERREXIT(cinfo, JERR_FILE_WRITE);
  if (JFWRITE(dest->pub.output_file, bmpinfoheader, 40) != (size_t) 40)
    ERREXIT(cinfo, JERR_FILE_WRITE);

  if (cmap_entries > 0)
    write_colormap(cinfo, dest, cmap_entries, 4);
}


LOCAL(void)
write_os2_header (j_decompress_ptr cinfo, bmp_dest_ptr dest)
/* Write an OS2-style BMP file header, including colormap if needed */
{
  char bmpfileheader[14];
  char bmpcoreheader[12];
  INT32 headersize, bfSize;
  int bits_per_pixel, cmap_entries;

  /* Compute colormap size and total file size */
  if (cinfo->out_color_space == JCS_RGB) {
    if (cinfo->quantize_colors) {
      /* Colormapped RGB */
      bits_per_pixel = 8;
      cmap_entries = 256;
    } else {
      /* Unquantized, full color RGB */
      bits_per_pixel = 24;
      cmap_entries = 0;
    }
  } else {
    /* Grayscale output.  We need to fake a 256-entry colormap. */
    bits_per_pixel = 8;
    cmap_entries = 256;
  }
  /* File size */
  headersize = 14 + 12 + cmap_entries * 3; /* Header and colormap */
  bfSize = headersize + (INT32) dest->row_width * (INT32) cinfo->output_height;
  
  /* Set unused fields of header to 0 */
  MEMZERO(bmpfileheader, SIZEOF(bmpfileheader));
  MEMZERO(bmpcoreheader, SIZEOF(bmpcoreheader));

  /* Fill the file header */
  bmpfileheader[0] = 0x42;	/* first 2 bytes are ASCII 'B', 'M' */
  bmpfileheader[1] = 0x4D;
  PUT_4B(bmpfileheader, 2, bfSize); /* bfSize */
  /* we leave bfReserved1 & bfReserved2 = 0 */
  PUT_4B(bmpfileheader, 10, headersize); /* bfOffBits */

  /* Fill the info header (Microsoft calls this a BITMAPCOREHEADER) */
  PUT_2B(bmpcoreheader, 0, 12);	/* bcSize */
  PUT_2B(bmpcoreheader, 4, cinfo->output_width); /* bcWidth */
  PUT_2B(bmpcoreheader, 6, cinfo->output_height); /* bcHeight */
  PUT_2B(bmpcoreheader, 8, 1);	/* bcPlanes - must be 1 */
  PUT_2B(bmpcoreheader, 10, bits_per_pixel); /* bcBitCount */

  if (JFWRITE(dest->pub.output_file, bmpfileheader, 14) != (size_t) 14)
    ERREXIT(cinfo, JERR_FILE_WRITE);
  if (JFWRITE(dest->pub.output_file, bmpcoreheader, 12) != (size_t) 12)
    ERREXIT(cinfo, JERR_FILE_WRITE);

  if (cmap_entries > 0)
    write_colormap(cinfo, dest, cmap_entries, 3);
}


/*
 * Write the colormap.
 * Windows uses BGR0 map entries; OS/2 uses BGR entries.
 */

LOCAL(void)
write_colormap (j_decompress_ptr cinfo, bmp_dest_ptr dest,
		int map_colors, int map_entry_size)
{
  JSAMPARRAY colormap = cinfo->colormap;
  int num_colors = cinfo->actual_number_of_colors;
  FILE * outfile = dest->pub.output_file;
  int i;

  if (colormap != NULL) {
    if (cinfo->out_color_components == 3) {
      /* Normal case with RGB colormap */
      for (i = 0; i < num_colors; i++) {
	putc(GETJSAMPLE(colormap[2][i]), outfile);
	putc(GETJSAMPLE(colormap[1][i]), outfile);
	putc(GETJSAMPLE(colormap[0][i]), outfile);
	if (map_entry_size == 4)
	  putc(0, outfile);
      }
    } else {
      /* Grayscale colormap (only happens with grayscale quantization) */
      for (i = 0; i < num_colors; i++) {
	putc(GETJSAMPLE(colormap[0][i]), outfile);
	putc(GETJSAMPLE(colormap[0][i]), outfile);
	putc(GETJSAMPLE(colormap[0][i]), outfile);
	if (map_entry_size == 4)
	  putc(0, outfile);
      }
    }
  } else {
    /* If no colormap, must be grayscale data.  Generate a linear "map". */
    for (i = 0; i < 256; i++) {
      putc(i, outfile);
      putc(i, outfile);
      putc(i, outfile);
      if (map_entry_size == 4)
	putc(0, outfile);
    }
  }
  /* Pad colormap with zeros to ensure specified number of colormap entries */ 
  if (i > map_colors)
    ERREXIT1(cinfo, JERR_TOO_MANY_COLORS, i);
  for (; i < map_colors; i++) {
    putc(0, outfile);
    putc(0, outfile);
    putc(0, outfile);
    if (map_entry_size == 4)
      putc(0, outfile);
  }
}


METHODDEF(void)
finish_output_bmp (j_decompress_ptr cinfo, djpeg_dest_ptr dinfo)
{
  bmp_dest_ptr dest = (bmp_dest_ptr) dinfo;
  register FILE * outfile = dest->pub.output_file;
  JSAMPARRAY image_ptr;
  register JSAMPROW data_ptr;
  JDIMENSION row;
  register JDIMENSION col;
  cd_progress_ptr progress = (cd_progress_ptr) cinfo->progress;

  /* Write the header and colormap */
  if (dest->is_os2)
    write_os2_header(cinfo, dest);
  else
    write_bmp_header(cinfo, dest);

  /* Write the file body from our virtual array */
  for (row = cinfo->output_height; row > 0; row--) {
    if (progress != NULL) {
      progress->pub.pass_counter = (long) (cinfo->output_height - row);
      progress->pub.pass_limit = (long) cinfo->output_height;
      (*progress->pub.progress_monitor) ((j_common_ptr) cinfo);
    }
    image_ptr = (*cinfo->mem->access_virt_sarray)
      ((j_common_ptr) cinfo, dest->whole_image, row-1, (JDIMENSION) 1, FALSE);
    data_ptr = image_ptr[0];
    for (col = dest->row_width; col > 0; col--) {
      putc(GETJSAMPLE(*data_ptr), outfile);
      data_ptr++;
    }
  }
  if (progress != NULL)
    progress->completed_extra_passes++;

  /* Make sure we wrote the output file OK */
  fflush(outfile);
  if (ferror(outfile))
    ERREXIT(cinfo, JERR_FILE_WRITE);
}


/*
 * The module selection routine for BMP format output.
 */

GLOBAL(djpeg_dest_ptr)
jinit_write_bmp (j_decompress_ptr cinfo, boolean is_os2)
{
  bmp_dest_ptr dest;
  JDIMENSION row_width;

  /* Create module interface object, fill in method pointers */
  dest = (bmp_dest_ptr)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  SIZEOF(bmp_dest_struct));
  dest->pub.start_output = start_output_bmp;
  dest->pub.finish_output = finish_output_bmp;
  dest->is_os2 = is_os2;

  if (cinfo->out_color_space == JCS_GRAYSCALE) {
    dest->pub.put_pixel_rows = put_gray_rows;
  } else if (cinfo->out_color_space == JCS_RGB) {
    if (cinfo->quantize_colors)
      dest->pub.put_pixel_rows = put_gray_rows;
    else
      dest->pub.put_pixel_rows = put_pixel_rows;
  } else {
    ERREXIT(cinfo, JERR_BMP_COLORSPACE);
  }

  /* Calculate output image dimensions so we can allocate space */
  jpeg_calc_output_dimensions(cinfo);

  /* Determine width of rows in the BMP file (padded to 4-byte boundary). */
  row_width = cinfo->output_width * cinfo->output_components;
  dest->data_width = row_width;
  while ((row_width & 3) != 0) row_width++;
  dest->row_width = row_width;
  dest->pad_bytes = (int) (row_width - dest->data_width);

  /* Allocate space for inversion array, prepare for write pass */
  dest->whole_image = (*cinfo->mem->request_virt_sarray)
    ((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
     row_width, cinfo->output_height, (JDIMENSION) 1);
  dest->cur_output_row = 0;
  if (cinfo->progress != NULL) {
    cd_progress_ptr progress = (cd_progress_ptr) cinfo->progress;
    progress->total_extra_passes++; /* count file input as separate pass */
  }

  /* Create decompressor output buffer. */
  dest->pub.buffer = (*cinfo->mem->alloc_sarray)
    ((j_common_ptr) cinfo, JPOOL_IMAGE, row_width, (JDIMENSION) 1);
  dest->pub.buffer_height = 1;

  return (djpeg_dest_ptr) dest;
}

#endif /* BMP_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\wrgif.c ===
/*
 * wrgif.c
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 **************************************************************************
 * WARNING: You will need an LZW patent license from Unisys in order to   *
 * use this file legally in any commercial or shareware application.      *
 **************************************************************************
 *
 * This file contains routines to write output images in GIF format.
 *
 * These routines may need modification for non-Unix environments or
 * specialized applications.  As they stand, they assume output to
 * an ordinary stdio stream.
 */

/*
 * This code is loosely based on ppmtogif from the PBMPLUS distribution
 * of Feb. 1991.  That file contains the following copyright notice:
 *    Based on GIFENCODE by David Rowley <mgardi@watdscu.waterloo.edu>.
 *    Lempel-Ziv compression based on "compress" by Spencer W. Thomas et al.
 *    Copyright (C) 1989 by Jef Poskanzer.
 *    Permission to use, copy, modify, and distribute this software and its
 *    documentation for any purpose and without fee is hereby granted, provided
 *    that the above copyright notice appear in all copies and that both that
 *    copyright notice and this permission notice appear in supporting
 *    documentation.  This software is provided "as is" without express or
 *    implied warranty.
 *
 * We are also required to state that
 *    "The Graphics Interchange Format(c) is the Copyright property of
 *    CompuServe Incorporated. GIF(sm) is a Service Mark property of
 *    CompuServe Incorporated."
 */

#include "cdjpeg.h"		/* Common decls for cjpeg/djpeg applications */

#ifdef GIF_SUPPORTED


#define	MAX_LZW_BITS	12	/* maximum LZW code size (4096 symbols) */

typedef INT16 code_int;		/* must hold -1 .. 2**MAX_LZW_BITS */

#define LZW_TABLE_SIZE	((code_int) 1 << MAX_LZW_BITS)

#define HSIZE		5003	/* hash table size for 80% occupancy */

typedef int hash_int;		/* must hold -2*HSIZE..2*HSIZE */

#define MAXCODE(n_bits)	(((code_int) 1 << (n_bits)) - 1)


/*
 * The LZW hash table consists of two parallel arrays:
 *   hash_code[i]	code of symbol in slot i, or 0 if empty slot
 *   hash_value[i]	symbol's value; undefined if empty slot
 * where slot values (i) range from 0 to HSIZE-1.  The symbol value is
 * its prefix symbol's code concatenated with its suffix character.
 *
 * Algorithm:  use open addressing double hashing (no chaining) on the
 * prefix code / suffix character combination.  We do a variant of Knuth's
 * algorithm D (vol. 3, sec. 6.4) along with G. Knott's relatively-prime
 * secondary probe.
 *
 * The hash_value[] table is allocated from FAR heap space since it would
 * use up rather a lot of the near data space in a PC.
 */

typedef INT32 hash_entry;	/* must hold (code_int<<8) | byte */

#define HASH_ENTRY(prefix,suffix)  ((((hash_entry) (prefix)) << 8) | (suffix))


/* Private version of data destination object */

typedef struct {
  struct djpeg_dest_struct pub;	/* public fields */

  j_decompress_ptr cinfo;	/* back link saves passing separate parm */

  /* State for packing variable-width codes into a bitstream */
  int n_bits;			/* current number of bits/code */
  code_int maxcode;		/* maximum code, given n_bits */
  int init_bits;		/* initial n_bits ... restored after clear */
  INT32 cur_accum;		/* holds bits not yet output */
  int cur_bits;			/* # of bits in cur_accum */

  /* LZW string construction */
  code_int waiting_code;	/* symbol not yet output; may be extendable */
  boolean first_byte;		/* if TRUE, waiting_code is not valid */

  /* State for LZW code assignment */
  code_int ClearCode;		/* clear code (doesn't change) */
  code_int EOFCode;		/* EOF code (ditto) */
  code_int free_code;		/* first not-yet-used symbol code */

  /* LZW hash table */
  code_int *hash_code;		/* => hash table of symbol codes */
  hash_entry FAR *hash_value;	/* => hash table of symbol values */

  /* GIF data packet construction buffer */
  int bytesinpkt;		/* # of bytes in current packet */
  char packetbuf[256];		/* workspace for accumulating packet */

} gif_dest_struct;

typedef gif_dest_struct * gif_dest_ptr;


/*
 * Routines to package compressed data bytes into GIF data blocks.
 * A data block consists of a count byte (1..255) and that many data bytes.
 */

LOCAL(void)
flush_packet (gif_dest_ptr dinfo)
/* flush any accumulated data */
{
  if (dinfo->bytesinpkt > 0) {	/* never write zero-length packet */
    dinfo->packetbuf[0] = (char) dinfo->bytesinpkt++;
    if (JFWRITE(dinfo->pub.output_file, dinfo->packetbuf, dinfo->bytesinpkt)
	!= (size_t) dinfo->bytesinpkt)
      ERREXIT(dinfo->cinfo, JERR_FILE_WRITE);
    dinfo->bytesinpkt = 0;
  }
}


/* Add a character to current packet; flush to disk if necessary */
#define CHAR_OUT(dinfo,c)  \
	{ (dinfo)->packetbuf[++(dinfo)->bytesinpkt] = (char) (c);  \
	    if ((dinfo)->bytesinpkt >= 255)  \
	      flush_packet(dinfo);  \
	}


/* Routine to convert variable-width codes into a byte stream */

LOCAL(void)
output (gif_dest_ptr dinfo, code_int code)
/* Emit a code of n_bits bits */
/* Uses cur_accum and cur_bits to reblock into 8-bit bytes */
{
  dinfo->cur_accum |= ((INT32) code) << dinfo->cur_bits;
  dinfo->cur_bits += dinfo->n_bits;

  while (dinfo->cur_bits >= 8) {
    CHAR_OUT(dinfo, dinfo->cur_accum & 0xFF);
    dinfo->cur_accum >>= 8;
    dinfo->cur_bits -= 8;
  }

  /*
   * If the next entry is going to be too big for the code size,
   * then increase it, if possible.  We do this here to ensure
   * that it's done in sync with the decoder's codesize increases.
   */
  if (dinfo->free_code > dinfo->maxcode) {
    dinfo->n_bits++;
    if (dinfo->n_bits == MAX_LZW_BITS)
      dinfo->maxcode = LZW_TABLE_SIZE; /* free_code will never exceed this */
    else
      dinfo->maxcode = MAXCODE(dinfo->n_bits);
  }
}


/* The LZW algorithm proper */


LOCAL(void)
clear_hash (gif_dest_ptr dinfo)
/* Fill the hash table with empty entries */
{
  /* It's sufficient to zero hash_code[] */
  MEMZERO(dinfo->hash_code, HSIZE * SIZEOF(code_int));
}


LOCAL(void)
clear_block (gif_dest_ptr dinfo)
/* Reset compressor and issue a Clear code */
{
  clear_hash(dinfo);			/* delete all the symbols */
  dinfo->free_code = dinfo->ClearCode + 2;
  output(dinfo, dinfo->ClearCode);	/* inform decoder */
  dinfo->n_bits = dinfo->init_bits;	/* reset code size */
  dinfo->maxcode = MAXCODE(dinfo->n_bits);
}


LOCAL(void)
compress_init (gif_dest_ptr dinfo, int i_bits)
/* Initialize LZW compressor */
{
  /* init all the state variables */
  dinfo->n_bits = dinfo->init_bits = i_bits;
  dinfo->maxcode = MAXCODE(dinfo->n_bits);
  dinfo->ClearCode = ((code_int) 1 << (i_bits - 1));
  dinfo->EOFCode = dinfo->ClearCode + 1;
  dinfo->free_code = dinfo->ClearCode + 2;
  dinfo->first_byte = TRUE;	/* no waiting symbol yet */
  /* init output buffering vars */
  dinfo->bytesinpkt = 0;
  dinfo->cur_accum = 0;
  dinfo->cur_bits = 0;
  /* clear hash table */
  clear_hash(dinfo);
  /* GIF specifies an initial Clear code */
  output(dinfo, dinfo->ClearCode);
}


LOCAL(void)
compress_byte (gif_dest_ptr dinfo, int c)
/* Accept and compress one 8-bit byte */
{
  register hash_int i;
  register hash_int disp;
  register hash_entry probe_value;

  if (dinfo->first_byte) {	/* need to initialize waiting_code */
    dinfo->waiting_code = c;
    dinfo->first_byte = FALSE;
    return;
  }

  /* Probe hash table to see if a symbol exists for
   * waiting_code followed by c.
   * If so, replace waiting_code by that symbol and return.
   */
  i = ((hash_int) c << (MAX_LZW_BITS-8)) + dinfo->waiting_code;
  /* i is less than twice 2**MAX_LZW_BITS, therefore less than twice HSIZE */
  if (i >= HSIZE)
    i -= HSIZE;

  probe_value = HASH_ENTRY(dinfo->waiting_code, c);
  
  if (dinfo->hash_code[i] != 0) { /* is first probed slot empty? */
    if (dinfo->hash_value[i] == probe_value) {
      dinfo->waiting_code = dinfo->hash_code[i];
      return;
    }
    if (i == 0)			/* secondary hash (after G. Knott) */
      disp = 1;
    else
      disp = HSIZE - i;
    for (;;) {
      i -= disp;
      if (i < 0)
	i += HSIZE;
      if (dinfo->hash_code[i] == 0)
	break;			/* hit empty slot */
      if (dinfo->hash_value[i] == probe_value) {
	dinfo->waiting_code = dinfo->hash_code[i];
	return;
      }
    }
  }

  /* here when hashtable[i] is an empty slot; desired symbol not in table */
  output(dinfo, dinfo->waiting_code);
  if (dinfo->free_code < LZW_TABLE_SIZE) {
    dinfo->hash_code[i] = dinfo->free_code++; /* add symbol to hashtable */
    dinfo->hash_value[i] = probe_value;
  } else
    clear_block(dinfo);
  dinfo->waiting_code = c;
}


LOCAL(void)
compress_term (gif_dest_ptr dinfo)
/* Clean up at end */
{
  /* Flush out the buffered code */
  if (! dinfo->first_byte)
    output(dinfo, dinfo->waiting_code);
  /* Send an EOF code */
  output(dinfo, dinfo->EOFCode);
  /* Flush the bit-packing buffer */
  if (dinfo->cur_bits > 0) {
    CHAR_OUT(dinfo, dinfo->cur_accum & 0xFF);
  }
  /* Flush the packet buffer */
  flush_packet(dinfo);
}


/* GIF header construction */


LOCAL(void)
put_word (gif_dest_ptr dinfo, unsigned int w)
/* Emit a 16-bit word, LSB first */
{
  putc(w & 0xFF, dinfo->pub.output_file);
  putc((w >> 8) & 0xFF, dinfo->pub.output_file);
}


LOCAL(void)
put_3bytes (gif_dest_ptr dinfo, int val)
/* Emit 3 copies of same byte value --- handy subr for colormap construction */
{
  putc(val, dinfo->pub.output_file);
  putc(val, dinfo->pub.output_file);
  putc(val, dinfo->pub.output_file);
}


LOCAL(void)
emit_header (gif_dest_ptr dinfo, int num_colors, JSAMPARRAY colormap)
/* Output the GIF file header, including color map */
/* If colormap==NULL, synthesize a gray-scale colormap */
{
  int BitsPerPixel, ColorMapSize, InitCodeSize, FlagByte;
  int cshift = dinfo->cinfo->data_precision - 8;
  int i;

  if (num_colors > 256)
    ERREXIT1(dinfo->cinfo, JERR_TOO_MANY_COLORS, num_colors);
  /* Compute bits/pixel and related values */
  BitsPerPixel = 1;
  while (num_colors > (1 << BitsPerPixel))
    BitsPerPixel++;
  ColorMapSize = 1 << BitsPerPixel;
  if (BitsPerPixel <= 1)
    InitCodeSize = 2;
  else
    InitCodeSize = BitsPerPixel;
  /*
   * Write the GIF header.
   * Note that we generate a plain GIF87 header for maximum compatibility.
   */
  putc('G', dinfo->pub.output_file);
  putc('I', dinfo->pub.output_file);
  putc('F', dinfo->pub.output_file);
  putc('8', dinfo->pub.output_file);
  putc('7', dinfo->pub.output_file);
  putc('a', dinfo->pub.output_file);
  /* Write the Logical Screen Descriptor */
  put_word(dinfo, (unsigned int) dinfo->cinfo->output_width);
  put_word(dinfo, (unsigned int) dinfo->cinfo->output_height);
  FlagByte = 0x80;		/* Yes, there is a global color table */
  FlagByte |= (BitsPerPixel-1) << 4; /* color resolution */
  FlagByte |= (BitsPerPixel-1);	/* size of global color table */
  putc(FlagByte, dinfo->pub.output_file);
  putc(0, dinfo->pub.output_file); /* Background color index */
  putc(0, dinfo->pub.output_file); /* Reserved (aspect ratio in GIF89) */
  /* Write the Global Color Map */
  /* If the color map is more than 8 bits precision, */
  /* we reduce it to 8 bits by shifting */
  for (i=0; i < ColorMapSize; i++) {
    if (i < num_colors) {
      if (colormap != NULL) {
	if (dinfo->cinfo->out_color_space == JCS_RGB) {
	  /* Normal case: RGB color map */
	  putc(GETJSAMPLE(colormap[0][i]) >> cshift, dinfo->pub.output_file);
	  putc(GETJSAMPLE(colormap[1][i]) >> cshift, dinfo->pub.output_file);
	  putc(GETJSAMPLE(colormap[2][i]) >> cshift, dinfo->pub.output_file);
	} else {
	  /* Grayscale "color map": possible if quantizing grayscale image */
	  put_3bytes(dinfo, GETJSAMPLE(colormap[0][i]) >> cshift);
	}
      } else {
	/* Create a gray-scale map of num_colors values, range 0..255 */
	put_3bytes(dinfo, (i * 255 + (num_colors-1)/2) / (num_colors-1));
      }
    } else {
      /* fill out the map to a power of 2 */
      put_3bytes(dinfo, 0);
    }
  }
  /* Write image separator and Image Descriptor */
  putc(',', dinfo->pub.output_file); /* separator */
  put_word(dinfo, 0);		/* left/top offset */
  put_word(dinfo, 0);
  put_word(dinfo, (unsigned int) dinfo->cinfo->output_width); /* image size */
  put_word(dinfo, (unsigned int) dinfo->cinfo->output_height);
  /* flag byte: not interlaced, no local color map */
  putc(0x00, dinfo->pub.output_file);
  /* Write Initial Code Size byte */
  putc(InitCodeSize, dinfo->pub.output_file);

  /* Initialize for LZW compression of image data */
  compress_init(dinfo, InitCodeSize+1);
}


/*
 * Startup: write the file header.
 */

METHODDEF(void)
start_output_gif (j_decompress_ptr cinfo, djpeg_dest_ptr dinfo)
{
  gif_dest_ptr dest = (gif_dest_ptr) dinfo;

  if (cinfo->quantize_colors)
    emit_header(dest, cinfo->actual_number_of_colors, cinfo->colormap);
  else
    emit_header(dest, 256, (JSAMPARRAY) NULL);
}


/*
 * Write some pixel data.
 * In this module rows_supplied will always be 1.
 */

METHODDEF(void)
put_pixel_rows (j_decompress_ptr cinfo, djpeg_dest_ptr dinfo,
		JDIMENSION rows_supplied)
{
  gif_dest_ptr dest = (gif_dest_ptr) dinfo;
  register JSAMPROW ptr;
  register JDIMENSION col;

  ptr = dest->pub.buffer[0];
  for (col = cinfo->output_width; col > 0; col--) {
    compress_byte(dest, GETJSAMPLE(*ptr++));
  }
}


/*
 * Finish up at the end of the file.
 */

METHODDEF(void)
finish_output_gif (j_decompress_ptr cinfo, djpeg_dest_ptr dinfo)
{
  gif_dest_ptr dest = (gif_dest_ptr) dinfo;

  /* Flush LZW mechanism */
  compress_term(dest);
  /* Write a zero-length data block to end the series */
  putc(0, dest->pub.output_file);
  /* Write the GIF terminator mark */
  putc(';', dest->pub.output_file);
  /* Make sure we wrote the output file OK */
  fflush(dest->pub.output_file);
  if (ferror(dest->pub.output_file))
    ERREXIT(cinfo, JERR_FILE_WRITE);
}


/*
 * The module selection routine for GIF format output.
 */

GLOBAL(djpeg_dest_ptr)
jinit_write_gif (j_decompress_ptr cinfo)
{
  gif_dest_ptr dest;

  /* Create module interface object, fill in method pointers */
  dest = (gif_dest_ptr)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  SIZEOF(gif_dest_struct));
  dest->cinfo = cinfo;		/* make back link for subroutines */
  dest->pub.start_output = start_output_gif;
  dest->pub.put_pixel_rows = put_pixel_rows;
  dest->pub.finish_output = finish_output_gif;

  if (cinfo->out_color_space != JCS_GRAYSCALE &&
      cinfo->out_color_space != JCS_RGB)
    ERREXIT(cinfo, JERR_GIF_COLORSPACE);

  /* Force quantization if color or if > 8 bits input */
  if (cinfo->out_color_space != JCS_GRAYSCALE || cinfo->data_precision > 8) {
    /* Force quantization to at most 256 colors */
    cinfo->quantize_colors = TRUE;
    if (cinfo->desired_number_of_colors > 256)
      cinfo->desired_number_of_colors = 256;
  }

  /* Calculate output image dimensions so we can allocate space */
  jpeg_calc_output_dimensions(cinfo);

  if (cinfo->output_components != 1) /* safety check: just one component? */
    ERREXIT(cinfo, JERR_GIF_BUG);

  /* Create decompressor output buffer. */
  dest->pub.buffer = (*cinfo->mem->alloc_sarray)
    ((j_common_ptr) cinfo, JPOOL_IMAGE, cinfo->output_width, (JDIMENSION) 1);
  dest->pub.buffer_height = 1;

  /* Allocate space for hash table */
  dest->hash_code = (code_int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				HSIZE * SIZEOF(code_int));
  dest->hash_value = (hash_entry FAR *)
    (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				HSIZE * SIZEOF(hash_entry));

  return (djpeg_dest_ptr) dest;
}

#endif /* GIF_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\wrjpgcom.c ===
/*
 * wrjpgcom.c
 *
 * Copyright (C) 1994-1995, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains a very simple stand-alone application that inserts
 * user-supplied text as a COM (comment) marker in a JFIF file.
 * This may be useful as an example of the minimum logic needed to parse
 * JPEG markers.
 */

#define JPEG_CJPEG_DJPEG	/* to get the command-line config symbols */
#include "jinclude.h"		/* get auto-config symbols, <stdio.h> */

#ifndef HAVE_STDLIB_H		/* <stdlib.h> should declare malloc() */
extern void * malloc ();
#endif
#include <ctype.h>		/* to declare isupper(), tolower() */
#ifdef USE_SETMODE
#include <fcntl.h>		/* to declare setmode()'s parameter macros */
/* If you have setmode() but not <io.h>, just delete this line: */
#include <io.h>			/* to declare setmode() */
#endif

#ifdef USE_CCOMMAND		/* command-line reader for Macintosh */
#ifdef __MWERKS__
#include <SIOUX.h>              /* Metrowerks needs this */
#include <console.h>		/* ... and this */
#endif
#ifdef THINK_C
#include <console.h>		/* Think declares it here */
#endif
#endif

#ifdef DONT_USE_B_MODE		/* define mode parameters for fopen() */
#define READ_BINARY	"r"
#define WRITE_BINARY	"w"
#else
#define READ_BINARY	"rb"
#define WRITE_BINARY	"wb"
#endif

#ifndef EXIT_FAILURE		/* define exit() codes if not provided */
#define EXIT_FAILURE  1
#endif
#ifndef EXIT_SUCCESS
#ifdef VMS
#define EXIT_SUCCESS  1		/* VMS is very nonstandard */
#else
#define EXIT_SUCCESS  0
#endif
#endif

/* Reduce this value if your malloc() can't allocate blocks up to 64K.
 * On DOS, compiling in large model is usually a better solution.
 */

#ifndef MAX_COM_LENGTH
#define MAX_COM_LENGTH 65000	/* must be < 65534 in any case */
#endif


/*
 * These macros are used to read the input file and write the output file.
 * To reuse this code in another application, you might need to change these.
 */

static FILE * infile;		/* input JPEG file */

/* Return next input byte, or EOF if no more */
#define NEXTBYTE()  getc(infile)

static FILE * outfile;		/* output JPEG file */

/* Emit an output byte */
#define PUTBYTE(x)  putc((x), outfile)


/* Error exit handler */
#define ERREXIT(msg)  (fprintf(stderr, "%s\n", msg), exit(EXIT_FAILURE))


/* Read one byte, testing for EOF */
static int
read_1_byte (void)
{
  int c;

  c = NEXTBYTE();
  if (c == EOF)
    ERREXIT("Premature EOF in JPEG file");
  return c;
}

/* Read 2 bytes, convert to unsigned int */
/* All 2-byte quantities in JPEG markers are MSB first */
static unsigned int
read_2_bytes (void)
{
  int c1, c2;

  c1 = NEXTBYTE();
  if (c1 == EOF)
    ERREXIT("Premature EOF in JPEG file");
  c2 = NEXTBYTE();
  if (c2 == EOF)
    ERREXIT("Premature EOF in JPEG file");
  return (((unsigned int) c1) << 8) + ((unsigned int) c2);
}


/* Routines to write data to output file */

static void
write_1_byte (int c)
{
  PUTBYTE(c);
}

static void
write_2_bytes (unsigned int val)
{
  PUTBYTE((val >> 8) & 0xFF);
  PUTBYTE(val & 0xFF);
}

static void
write_marker (int marker)
{
  PUTBYTE(0xFF);
  PUTBYTE(marker);
}

static void
copy_rest_of_file (void)
{
  int c;

  while ((c = NEXTBYTE()) != EOF)
    PUTBYTE(c);
}


/*
 * JPEG markers consist of one or more 0xFF bytes, followed by a marker
 * code byte (which is not an FF).  Here are the marker codes of interest
 * in this program.  (See jdmarker.c for a more complete list.)
 */

#define M_SOF0  0xC0		/* Start Of Frame N */
#define M_SOF1  0xC1		/* N indicates which compression process */
#define M_SOF2  0xC2		/* Only SOF0-SOF2 are now in common use */
#define M_SOF3  0xC3
#define M_SOF5  0xC5		/* NB: codes C4 and CC are NOT SOF markers */
#define M_SOF6  0xC6
#define M_SOF7  0xC7
#define M_SOF9  0xC9
#define M_SOF10 0xCA
#define M_SOF11 0xCB
#define M_SOF13 0xCD
#define M_SOF14 0xCE
#define M_SOF15 0xCF
#define M_SOI   0xD8		/* Start Of Image (beginning of datastream) */
#define M_EOI   0xD9		/* End Of Image (end of datastream) */
#define M_SOS   0xDA		/* Start Of Scan (begins compressed data) */
#define M_COM   0xFE		/* COMment */


/*
 * Find the next JPEG marker and return its marker code.
 * We expect at least one FF byte, possibly more if the compressor used FFs
 * to pad the file.  (Padding FFs will NOT be replicated in the output file.)
 * There could also be non-FF garbage between markers.  The treatment of such
 * garbage is unspecified; we choose to skip over it but emit a warning msg.
 * NB: this routine must not be used after seeing SOS marker, since it will
 * not deal correctly with FF/00 sequences in the compressed image data...
 */

static int
next_marker (void)
{
  int c;
  int discarded_bytes = 0;

  /* Find 0xFF byte; count and skip any non-FFs. */
  c = read_1_byte();
  while (c != 0xFF) {
    discarded_bytes++;
    c = read_1_byte();
  }
  /* Get marker code byte, swallowing any duplicate FF bytes.  Extra FFs
   * are legal as pad bytes, so don't count them in discarded_bytes.
   */
  do {
    c = read_1_byte();
  } while (c == 0xFF);

  if (discarded_bytes != 0) {
    fprintf(stderr, "Warning: garbage data found in JPEG file\n");
  }

  return c;
}


/*
 * Read the initial marker, which should be SOI.
 * For a JFIF file, the first two bytes of the file should be literally
 * 0xFF M_SOI.  To be more general, we could use next_marker, but if the
 * input file weren't actually JPEG at all, next_marker might read the whole
 * file and then return a misleading error message...
 */

static int
first_marker (void)
{
  int c1, c2;

  c1 = NEXTBYTE();
  c2 = NEXTBYTE();
  if (c1 != 0xFF || c2 != M_SOI)
    ERREXIT("Not a JPEG file");
  return c2;
}


/*
 * Most types of marker are followed by a variable-length parameter segment.
 * This routine skips over the parameters for any marker we don't otherwise
 * want to process.
 * Note that we MUST skip the parameter segment explicitly in order not to
 * be fooled by 0xFF bytes that might appear within the parameter segment;
 * such bytes do NOT introduce new markers.
 */

static void
copy_variable (void)
/* Copy an unknown or uninteresting variable-length marker */
{
  unsigned int length;

  /* Get the marker parameter length count */
  length = read_2_bytes();
  write_2_bytes(length);
  /* Length includes itself, so must be at least 2 */
  if (length < 2)
    ERREXIT("Erroneous JPEG marker length");
  length -= 2;
  /* Skip over the remaining bytes */
  while (length > 0) {
    write_1_byte(read_1_byte());
    length--;
  }
}

static void
skip_variable (void)
/* Skip over an unknown or uninteresting variable-length marker */
{
  unsigned int length;

  /* Get the marker parameter length count */
  length = read_2_bytes();
  /* Length includes itself, so must be at least 2 */
  if (length < 2)
    ERREXIT("Erroneous JPEG marker length");
  length -= 2;
  /* Skip over the remaining bytes */
  while (length > 0) {
    (void) read_1_byte();
    length--;
  }
}


/*
 * Parse the marker stream until SOFn or EOI is seen;
 * copy data to output, but discard COM markers unless keep_COM is true.
 */

static int
scan_JPEG_header (int keep_COM)
{
  int marker;

  /* Expect SOI at start of file */
  if (first_marker() != M_SOI)
    ERREXIT("Expected SOI marker first");
  write_marker(M_SOI);

  /* Scan miscellaneous markers until we reach SOFn. */
  for (;;) {
    marker = next_marker();
    switch (marker) {
    case M_SOF0:		/* Baseline */
    case M_SOF1:		/* Extended sequential, Huffman */
    case M_SOF2:		/* Progressive, Huffman */
    case M_SOF3:		/* Lossless, Huffman */
    case M_SOF5:		/* Differential sequential, Huffman */
    case M_SOF6:		/* Differential progressive, Huffman */
    case M_SOF7:		/* Differential lossless, Huffman */
    case M_SOF9:		/* Extended sequential, arithmetic */
    case M_SOF10:		/* Progressive, arithmetic */
    case M_SOF11:		/* Lossless, arithmetic */
    case M_SOF13:		/* Differential sequential, arithmetic */
    case M_SOF14:		/* Differential progressive, arithmetic */
    case M_SOF15:		/* Differential lossless, arithmetic */
      return marker;

    case M_SOS:			/* should not see compressed data before SOF */
      ERREXIT("SOS without prior SOFn");
      break;

    case M_EOI:			/* in case it's a tables-only JPEG stream */
      return marker;

    case M_COM:			/* Existing COM: conditionally discard */
      if (keep_COM) {
	write_marker(marker);
	copy_variable();
      } else {
	skip_variable();
      }
      break;

    default:			/* Anything else just gets copied */
      write_marker(marker);
      copy_variable();		/* we assume it has a parameter count... */
      break;
    }
  } /* end loop */
}


/* Command line parsing code */

static const char * progname;	/* program name for error messages */


static void
usage (void)
/* complain about bad command line */
{
  fprintf(stderr, "wrjpgcom inserts a textual comment in a JPEG file.\n");
  fprintf(stderr, "You can add to or replace any existing comment(s).\n");

  fprintf(stderr, "Usage: %s [switches] ", progname);
#ifdef TWO_FILE_COMMANDLINE
  fprintf(stderr, "inputfile outputfile\n");
#else
  fprintf(stderr, "[inputfile]\n");
#endif

  fprintf(stderr, "Switches (names may be abbreviated):\n");
  fprintf(stderr, "  -replace         Delete any existing comments\n");
  fprintf(stderr, "  -comment \"text\"  Insert comment with given text\n");
  fprintf(stderr, "  -cfile name      Read comment from named file\n");
  fprintf(stderr, "Notice that you must put quotes around the comment text\n");
  fprintf(stderr, "when you use -comment.\n");
  fprintf(stderr, "If you do not give either -comment or -cfile on the command line,\n");
  fprintf(stderr, "then the comment text is read from standard input.\n");
  fprintf(stderr, "It can be multiple lines, up to %u characters total.\n",
	  (unsigned int) MAX_COM_LENGTH);
#ifndef TWO_FILE_COMMANDLINE
  fprintf(stderr, "You must specify an input JPEG file name when supplying\n");
  fprintf(stderr, "comment text from standard input.\n");
#endif

  exit(EXIT_FAILURE);
}


static int
keymatch (char * arg, const char * keyword, int minchars)
/* Case-insensitive matching of (possibly abbreviated) keyword switches. */
/* keyword is the constant keyword (must be lower case already), */
/* minchars is length of minimum legal abbreviation. */
{
  register int ca, ck;
  register int nmatched = 0;

  while ((ca = *arg++) != '\0') {
    if ((ck = *keyword++) == '\0')
      return 0;			/* arg longer than keyword, no good */
    if (isupper(ca))		/* force arg to lcase (assume ck is already) */
      ca = tolower(ca);
    if (ca != ck)
      return 0;			/* no good */
    nmatched++;			/* count matched characters */
  }
  /* reached end of argument; fail if it's too short for unique abbrev */
  if (nmatched < minchars)
    return 0;
  return 1;			/* A-OK */
}


/*
 * The main program.
 */

int
main (int argc, char **argv)
{
  int argn;
  char * arg;
  int keep_COM = 1;
  char * comment_arg = NULL;
  FILE * comment_file = NULL;
  unsigned int comment_length = 0;
  int marker;

  /* On Mac, fetch a command line. */
#ifdef USE_CCOMMAND
  argc = ccommand(&argv);
#endif

  progname = argv[0];
  if (progname == NULL || progname[0] == 0)
    progname = "wrjpgcom";	/* in case C library doesn't provide it */

  /* Parse switches, if any */
  for (argn = 1; argn < argc; argn++) {
    arg = argv[argn];
    if (arg[0] != '-')
      break;			/* not switch, must be file name */
    arg++;			/* advance over '-' */
    if (keymatch(arg, "replace", 1)) {
      keep_COM = 0;
    } else if (keymatch(arg, "cfile", 2)) {
      if (++argn >= argc) usage();
      if ((comment_file = fopen(argv[argn], "r")) == NULL) {
	fprintf(stderr, "%s: can't open %s\n", progname, argv[argn]);
	exit(EXIT_FAILURE);
      }
    } else if (keymatch(arg, "comment", 1)) {
      if (++argn >= argc) usage();
      comment_arg = argv[argn];
      /* If the comment text starts with '"', then we are probably running
       * under MS-DOG and must parse out the quoted string ourselves.  Sigh.
       */
      if (comment_arg[0] == '"') {
	comment_arg = (char *) malloc((size_t) MAX_COM_LENGTH);
	if (comment_arg == NULL)
	  ERREXIT("Insufficient memory");
	strcpy(comment_arg, argv[argn]+1);
	for (;;) {
	  comment_length = strlen(comment_arg);
	  if (comment_length > 0 && comment_arg[comment_length-1] == '"') {
	    comment_arg[comment_length-1] = '\0'; /* zap terminating quote */
	    break;
	  }
	  if (++argn >= argc)
	    ERREXIT("Missing ending quote mark");
	  strcat(comment_arg, " ");
	  strcat(comment_arg, argv[argn]);
	}
      }
      comment_length = strlen(comment_arg);
    } else
      usage();
  }

  /* Cannot use both -comment and -cfile. */
  if (comment_arg != NULL && comment_file != NULL)
    usage();
  /* If there is neither -comment nor -cfile, we will read the comment text
   * from stdin; in this case there MUST be an input JPEG file name.
   */
  if (comment_arg == NULL && comment_file == NULL && argn >= argc)
    usage();

  /* Open the input file. */
  if (argn < argc) {
    if ((infile = fopen(argv[argn], READ_BINARY)) == NULL) {
      fprintf(stderr, "%s: can't open %s\n", progname, argv[argn]);
      exit(EXIT_FAILURE);
    }
  } else {
    /* default input file is stdin */
#ifdef USE_SETMODE		/* need to hack file mode? */
    setmode(fileno(stdin), O_BINARY);
#endif
#ifdef USE_FDOPEN		/* need to re-open in binary mode? */
    if ((infile = fdopen(fileno(stdin), READ_BINARY)) == NULL) {
      fprintf(stderr, "%s: can't open stdin\n", progname);
      exit(EXIT_FAILURE);
    }
#else
    infile = stdin;
#endif
  }

  /* Open the output file. */
#ifdef TWO_FILE_COMMANDLINE
  /* Must have explicit output file name */
  if (argn != argc-2) {
    fprintf(stderr, "%s: must name one input and one output file\n",
	    progname);
    usage();
  }
  if ((outfile = fopen(argv[argn+1], WRITE_BINARY)) == NULL) {
    fprintf(stderr, "%s: can't open %s\n", progname, argv[argn+1]);
    exit(EXIT_FAILURE);
  }
#else
  /* Unix style: expect zero or one file name */
  if (argn < argc-1) {
    fprintf(stderr, "%s: only one input file\n", progname);
    usage();
  }
  /* default output file is stdout */
#ifdef USE_SETMODE		/* need to hack file mode? */
  setmode(fileno(stdout), O_BINARY);
#endif
#ifdef USE_FDOPEN		/* need to re-open in binary mode? */
  if ((outfile = fdopen(fileno(stdout), WRITE_BINARY)) == NULL) {
    fprintf(stderr, "%s: can't open stdout\n", progname);
    exit(EXIT_FAILURE);
  }
#else
  outfile = stdout;
#endif
#endif /* TWO_FILE_COMMANDLINE */

  /* Collect comment text from comment_file or stdin, if necessary */
  if (comment_arg == NULL) {
    FILE * src_file;
    int c;

    comment_arg = (char *) malloc((size_t) MAX_COM_LENGTH);
    if (comment_arg == NULL)
      ERREXIT("Insufficient memory");
    comment_length = 0;
    src_file = (comment_file != NULL ? comment_file : stdin);
    while ((c = getc(src_file)) != EOF) {
      if (comment_length >= (unsigned int) MAX_COM_LENGTH) {
	fprintf(stderr, "Comment text may not exceed %u bytes\n",
		(unsigned int) MAX_COM_LENGTH);
	exit(EXIT_FAILURE);
      }
      comment_arg[comment_length++] = (char) c;
    }
    if (comment_file != NULL)
      fclose(comment_file);
  }

  /* Copy JPEG headers until SOFn marker;
   * we will insert the new comment marker just before SOFn.
   * This (a) causes the new comment to appear after, rather than before,
   * existing comments; and (b) ensures that comments come after any JFIF
   * or JFXX markers, as required by the JFIF specification.
   */
  marker = scan_JPEG_header(keep_COM);
  /* Insert the new COM marker, but only if nonempty text has been supplied */
  if (comment_length > 0) {
    write_marker(M_COM);
    write_2_bytes(comment_length + 2);
    while (comment_length > 0) {
      write_1_byte(*comment_arg++);
      comment_length--;
    }
  }
  /* Duplicate the remainder of the source file.
   * Note that any COM markers occuring after SOF will not be touched.
   */
  write_marker(marker);
  copy_rest_of_file();

  /* All done. */
  exit(EXIT_SUCCESS);
  return 0;			/* suppress no-return-value warnings */
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\wrppm.c ===
/*
 * wrppm.c
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains routines to write output images in PPM/PGM format.
 * The extended 2-byte-per-sample raw PPM/PGM formats are supported.
 * The PBMPLUS library is NOT required to compile this software
 * (but it is highly useful as a set of PPM image manipulation programs).
 *
 * These routines may need modification for non-Unix environments or
 * specialized applications.  As they stand, they assume output to
 * an ordinary stdio stream.
 */

#include "cdjpeg.h"		/* Common decls for cjpeg/djpeg applications */

#ifdef PPM_SUPPORTED


/*
 * For 12-bit JPEG data, we either downscale the values to 8 bits
 * (to write standard byte-per-sample PPM/PGM files), or output
 * nonstandard word-per-sample PPM/PGM files.  Downscaling is done
 * if PPM_NORAWWORD is defined (this can be done in the Makefile
 * or in jconfig.h).
 * (When the core library supports data precision reduction, a cleaner
 * implementation will be to ask for that instead.)
 */

#if BITS_IN_JSAMPLE == 8
#define PUTPPMSAMPLE(ptr,v)  *ptr++ = (char) (v)
#define BYTESPERSAMPLE 1
#define PPM_MAXVAL 255
#else
#ifdef PPM_NORAWWORD
#define PUTPPMSAMPLE(ptr,v)  *ptr++ = (char) ((v) >> (BITS_IN_JSAMPLE-8))
#define BYTESPERSAMPLE 1
#define PPM_MAXVAL 255
#else
/* The word-per-sample format always puts the LSB first. */
#define PUTPPMSAMPLE(ptr,v)			\
	{ register int val_ = v;		\
	  *ptr++ = (char) (val_ & 0xFF);	\
	  *ptr++ = (char) ((val_ >> 8) & 0xFF);	\
	}
#define BYTESPERSAMPLE 2
#define PPM_MAXVAL ((1<<BITS_IN_JSAMPLE)-1)
#endif
#endif


/*
 * When JSAMPLE is the same size as char, we can just fwrite() the
 * decompressed data to the PPM or PGM file.  On PCs, in order to make this
 * work the output buffer must be allocated in near data space, because we are
 * assuming small-data memory model wherein fwrite() can't reach far memory.
 * If you need to process very wide images on a PC, you might have to compile
 * in large-memory model, or else replace fwrite() with a putc() loop ---
 * which will be much slower.
 */


/* Private version of data destination object */

typedef struct {
  struct djpeg_dest_struct pub;	/* public fields */

  /* Usually these two pointers point to the same place: */
  char *iobuffer;		/* fwrite's I/O buffer */
  JSAMPROW pixrow;		/* decompressor output buffer */
  size_t buffer_width;		/* width of I/O buffer */
  JDIMENSION samples_per_row;	/* JSAMPLEs per output row */
} ppm_dest_struct;

typedef ppm_dest_struct * ppm_dest_ptr;


/*
 * Write some pixel data.
 * In this module rows_supplied will always be 1.
 *
 * put_pixel_rows handles the "normal" 8-bit case where the decompressor
 * output buffer is physically the same as the fwrite buffer.
 */

METHODDEF(void)
put_pixel_rows (j_decompress_ptr cinfo, djpeg_dest_ptr dinfo,
		JDIMENSION rows_supplied)
{
  ppm_dest_ptr dest = (ppm_dest_ptr) dinfo;

  (void) JFWRITE(dest->pub.output_file, dest->iobuffer, dest->buffer_width);
}


/*
 * This code is used when we have to copy the data and apply a pixel
 * format translation.  Typically this only happens in 12-bit mode.
 */

METHODDEF(void)
copy_pixel_rows (j_decompress_ptr cinfo, djpeg_dest_ptr dinfo,
		 JDIMENSION rows_supplied)
{
  ppm_dest_ptr dest = (ppm_dest_ptr) dinfo;
  register char * bufferptr;
  register JSAMPROW ptr;
  register JDIMENSION col;

  ptr = dest->pub.buffer[0];
  bufferptr = dest->iobuffer;
  for (col = dest->samples_per_row; col > 0; col--) {
    PUTPPMSAMPLE(bufferptr, GETJSAMPLE(*ptr++));
  }
  (void) JFWRITE(dest->pub.output_file, dest->iobuffer, dest->buffer_width);
}


/*
 * Write some pixel data when color quantization is in effect.
 * We have to demap the color index values to straight data.
 */

METHODDEF(void)
put_demapped_rgb (j_decompress_ptr cinfo, djpeg_dest_ptr dinfo,
		  JDIMENSION rows_supplied)
{
  ppm_dest_ptr dest = (ppm_dest_ptr) dinfo;
  register char * bufferptr;
  register int pixval;
  register JSAMPROW ptr;
  register JSAMPROW color_map0 = cinfo->colormap[0];
  register JSAMPROW color_map1 = cinfo->colormap[1];
  register JSAMPROW color_map2 = cinfo->colormap[2];
  register JDIMENSION col;

  ptr = dest->pub.buffer[0];
  bufferptr = dest->iobuffer;
  for (col = cinfo->output_width; col > 0; col--) {
    pixval = GETJSAMPLE(*ptr++);
    PUTPPMSAMPLE(bufferptr, GETJSAMPLE(color_map0[pixval]));
    PUTPPMSAMPLE(bufferptr, GETJSAMPLE(color_map1[pixval]));
    PUTPPMSAMPLE(bufferptr, GETJSAMPLE(color_map2[pixval]));
  }
  (void) JFWRITE(dest->pub.output_file, dest->iobuffer, dest->buffer_width);
}


METHODDEF(void)
put_demapped_gray (j_decompress_ptr cinfo, djpeg_dest_ptr dinfo,
		   JDIMENSION rows_supplied)
{
  ppm_dest_ptr dest = (ppm_dest_ptr) dinfo;
  register char * bufferptr;
  register JSAMPROW ptr;
  register JSAMPROW color_map = cinfo->colormap[0];
  register JDIMENSION col;

  ptr = dest->pub.buffer[0];
  bufferptr = dest->iobuffer;
  for (col = cinfo->output_width; col > 0; col--) {
    PUTPPMSAMPLE(bufferptr, GETJSAMPLE(color_map[GETJSAMPLE(*ptr++)]));
  }
  (void) JFWRITE(dest->pub.output_file, dest->iobuffer, dest->buffer_width);
}


/*
 * Startup: write the file header.
 */

METHODDEF(void)
start_output_ppm (j_decompress_ptr cinfo, djpeg_dest_ptr dinfo)
{
  ppm_dest_ptr dest = (ppm_dest_ptr) dinfo;

  /* Emit file header */
  switch (cinfo->out_color_space) {
  case JCS_GRAYSCALE:
    /* emit header for raw PGM format */
    fprintf(dest->pub.output_file, "P5\n%ld %ld\n%d\n",
	    (long) cinfo->output_width, (long) cinfo->output_height,
	    PPM_MAXVAL);
    break;
  case JCS_RGB:
    /* emit header for raw PPM format */
    fprintf(dest->pub.output_file, "P6\n%ld %ld\n%d\n",
	    (long) cinfo->output_width, (long) cinfo->output_height,
	    PPM_MAXVAL);
    break;
  default:
    ERREXIT(cinfo, JERR_PPM_COLORSPACE);
  }
}


/*
 * Finish up at the end of the file.
 */

METHODDEF(void)
finish_output_ppm (j_decompress_ptr cinfo, djpeg_dest_ptr dinfo)
{
  /* Make sure we wrote the output file OK */
  fflush(dinfo->output_file);
  if (ferror(dinfo->output_file))
    ERREXIT(cinfo, JERR_FILE_WRITE);
}


/*
 * The module selection routine for PPM format output.
 */

GLOBAL(djpeg_dest_ptr)
jinit_write_ppm (j_decompress_ptr cinfo)
{
  ppm_dest_ptr dest;

  /* Create module interface object, fill in method pointers */
  dest = (ppm_dest_ptr)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  SIZEOF(ppm_dest_struct));
  dest->pub.start_output = start_output_ppm;
  dest->pub.finish_output = finish_output_ppm;

  /* Calculate output image dimensions so we can allocate space */
  jpeg_calc_output_dimensions(cinfo);

  /* Create physical I/O buffer.  Note we make this near on a PC. */
  dest->samples_per_row = cinfo->output_width * cinfo->out_color_components;
  dest->buffer_width = dest->samples_per_row * (BYTESPERSAMPLE * SIZEOF(char));
  dest->iobuffer = (char *) (*cinfo->mem->alloc_small)
    ((j_common_ptr) cinfo, JPOOL_IMAGE, dest->buffer_width);

  if (cinfo->quantize_colors || BITS_IN_JSAMPLE != 8 ||
      SIZEOF(JSAMPLE) != SIZEOF(char)) {
    /* When quantizing, we need an output buffer for colormap indexes
     * that's separate from the physical I/O buffer.  We also need a
     * separate buffer if pixel format translation must take place.
     */
    dest->pub.buffer = (*cinfo->mem->alloc_sarray)
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       cinfo->output_width * cinfo->output_components, (JDIMENSION) 1);
    dest->pub.buffer_height = 1;
    if (! cinfo->quantize_colors)
      dest->pub.put_pixel_rows = copy_pixel_rows;
    else if (cinfo->out_color_space == JCS_GRAYSCALE)
      dest->pub.put_pixel_rows = put_demapped_gray;
    else
      dest->pub.put_pixel_rows = put_demapped_rgb;
  } else {
    /* We will fwrite() directly from decompressor output buffer. */
    /* Synthesize a JSAMPARRAY pointer structure */
    /* Cast here implies near->far pointer conversion on PCs */
    dest->pixrow = (JSAMPROW) dest->iobuffer;
    dest->pub.buffer = & dest->pixrow;
    dest->pub.buffer_height = 1;
    dest->pub.put_pixel_rows = put_pixel_rows;
  }

  return (djpeg_dest_ptr) dest;
}

#endif /* PPM_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\wrrle.c ===
/*
 * wrrle.c
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains routines to write output images in RLE format.
 * The Utah Raster Toolkit library is required (version 3.1 or later).
 *
 * These routines may need modification for non-Unix environments or
 * specialized applications.  As they stand, they assume output to
 * an ordinary stdio stream.
 *
 * Based on code contributed by Mike Lijewski,
 * with updates from Robert Hutchinson.
 */

#include "cdjpeg.h"		/* Common decls for cjpeg/djpeg applications */

#ifdef RLE_SUPPORTED

/* rle.h is provided by the Utah Raster Toolkit. */

#include <rle.h>

/*
 * We assume that JSAMPLE has the same representation as rle_pixel,
 * to wit, "unsigned char".  Hence we can't cope with 12- or 16-bit samples.
 */

#if BITS_IN_JSAMPLE != 8
  Sorry, this code only copes with 8-bit JSAMPLEs. /* deliberate syntax err */
#endif


/*
 * Since RLE stores scanlines bottom-to-top, we have to invert the image
 * from JPEG's top-to-bottom order.  To do this, we save the outgoing data
 * in a virtual array during put_pixel_row calls, then actually emit the
 * RLE file during finish_output.
 */


/*
 * For now, if we emit an RLE color map then it is always 256 entries long,
 * though not all of the entries need be used.
 */

#define CMAPBITS	8
#define CMAPLENGTH	(1<<(CMAPBITS))

typedef struct {
  struct djpeg_dest_struct pub; /* public fields */

  jvirt_sarray_ptr image;	/* virtual array to store the output image */
  rle_map *colormap;	 	/* RLE-style color map, or NULL if none */
  rle_pixel **rle_row;		/* To pass rows to rle_putrow() */

} rle_dest_struct;

typedef rle_dest_struct * rle_dest_ptr;

/* Forward declarations */
METHODDEF(void) rle_put_pixel_rows
    JPP((j_decompress_ptr cinfo, djpeg_dest_ptr dinfo,
	 JDIMENSION rows_supplied));


/*
 * Write the file header.
 *
 * In this module it's easier to wait till finish_output to write anything.
 */

METHODDEF(void)
start_output_rle (j_decompress_ptr cinfo, djpeg_dest_ptr dinfo)
{
  rle_dest_ptr dest = (rle_dest_ptr) dinfo;
  size_t cmapsize;
  int i, ci;
#ifdef PROGRESS_REPORT
  cd_progress_ptr progress = (cd_progress_ptr) cinfo->progress;
#endif

  /*
   * Make sure the image can be stored in RLE format.
   *
   * - RLE stores image dimensions as *signed* 16 bit integers.  JPEG
   *   uses unsigned, so we have to check the width.
   *
   * - Colorspace is expected to be grayscale or RGB.
   *
   * - The number of channels (components) is expected to be 1 (grayscale/
   *   pseudocolor) or 3 (truecolor/directcolor).
   *   (could be 2 or 4 if using an alpha channel, but we aren't)
   */

  if (cinfo->output_width > 32767 || cinfo->output_height > 32767)
    ERREXIT2(cinfo, JERR_RLE_DIMENSIONS, cinfo->output_width, 
	     cinfo->output_height);

  if (cinfo->out_color_space != JCS_GRAYSCALE &&
      cinfo->out_color_space != JCS_RGB)
    ERREXIT(cinfo, JERR_RLE_COLORSPACE);

  if (cinfo->output_components != 1 && cinfo->output_components != 3)
    ERREXIT1(cinfo, JERR_RLE_TOOMANYCHANNELS, cinfo->num_components);

  /* Convert colormap, if any, to RLE format. */

  dest->colormap = NULL;

  if (cinfo->quantize_colors) {
    /* Allocate storage for RLE-style cmap, zero any extra entries */
    cmapsize = cinfo->out_color_components * CMAPLENGTH * SIZEOF(rle_map);
    dest->colormap = (rle_map *) (*cinfo->mem->alloc_small)
      ((j_common_ptr) cinfo, JPOOL_IMAGE, cmapsize);
    MEMZERO(dest->colormap, cmapsize);

    /* Save away data in RLE format --- note 8-bit left shift! */
    /* Shifting would need adjustment for JSAMPLEs wider than 8 bits. */
    for (ci = 0; ci < cinfo->out_color_components; ci++) {
      for (i = 0; i < cinfo->actual_number_of_colors; i++) {
        dest->colormap[ci * CMAPLENGTH + i] =
          GETJSAMPLE(cinfo->colormap[ci][i]) << 8;
      }
    }
  }

  /* Set the output buffer to the first row */
  dest->pub.buffer = (*cinfo->mem->access_virt_sarray)
    ((j_common_ptr) cinfo, dest->image, (JDIMENSION) 0, (JDIMENSION) 1, TRUE);
  dest->pub.buffer_height = 1;

  dest->pub.put_pixel_rows = rle_put_pixel_rows;

#ifdef PROGRESS_REPORT
  if (progress != NULL) {
    progress->total_extra_passes++;  /* count file writing as separate pass */
  }
#endif
}


/*
 * Write some pixel data.
 *
 * This routine just saves the data away in a virtual array.
 */

METHODDEF(void)
rle_put_pixel_rows (j_decompress_ptr cinfo, djpeg_dest_ptr dinfo,
		    JDIMENSION rows_supplied)
{
  rle_dest_ptr dest = (rle_dest_ptr) dinfo;

  if (cinfo->output_scanline < cinfo->output_height) {
    dest->pub.buffer = (*cinfo->mem->access_virt_sarray)
      ((j_common_ptr) cinfo, dest->image,
       cinfo->output_scanline, (JDIMENSION) 1, TRUE);
  }
}

/*
 * Finish up at the end of the file.
 *
 * Here is where we really output the RLE file.
 */

METHODDEF(void)
finish_output_rle (j_decompress_ptr cinfo, djpeg_dest_ptr dinfo)
{
  rle_dest_ptr dest = (rle_dest_ptr) dinfo;
  rle_hdr header;		/* Output file information */
  rle_pixel **rle_row, *red, *green, *blue;
  JSAMPROW output_row;
  char cmapcomment[80];
  int row, col;
  int ci;
#ifdef PROGRESS_REPORT
  cd_progress_ptr progress = (cd_progress_ptr) cinfo->progress;
#endif

  /* Initialize the header info */
  header = *rle_hdr_init(NULL);
  header.rle_file = dest->pub.output_file;
  header.xmin     = 0;
  header.xmax     = cinfo->output_width  - 1;
  header.ymin     = 0;
  header.ymax     = cinfo->output_height - 1;
  header.alpha    = 0;
  header.ncolors  = cinfo->output_components;
  for (ci = 0; ci < cinfo->output_components; ci++) {
    RLE_SET_BIT(header, ci);
  }
  if (cinfo->quantize_colors) {
    header.ncmap   = cinfo->out_color_components;
    header.cmaplen = CMAPBITS;
    header.cmap    = dest->colormap;
    /* Add a comment to the output image with the true colormap length. */
    sprintf(cmapcomment, "color_map_length=%d", cinfo->actual_number_of_colors);
    rle_putcom(cmapcomment, &header);
  }

  /* Emit the RLE header and color map (if any) */
  rle_put_setup(&header);

  /* Now output the RLE data from our virtual array.
   * We assume here that (a) rle_pixel is represented the same as JSAMPLE,
   * and (b) we are not on a machine where FAR pointers differ from regular.
   */

#ifdef PROGRESS_REPORT
  if (progress != NULL) {
    progress->pub.pass_limit = cinfo->output_height;
    progress->pub.pass_counter = 0;
    (*progress->pub.progress_monitor) ((j_common_ptr) cinfo);
  }
#endif

  if (cinfo->output_components == 1) {
    for (row = cinfo->output_height-1; row >= 0; row--) {
      rle_row = (rle_pixel **) (*cinfo->mem->access_virt_sarray)
        ((j_common_ptr) cinfo, dest->image,
	 (JDIMENSION) row, (JDIMENSION) 1, FALSE);
      rle_putrow(rle_row, (int) cinfo->output_width, &header);
#ifdef PROGRESS_REPORT
      if (progress != NULL) {
        progress->pub.pass_counter++;
        (*progress->pub.progress_monitor) ((j_common_ptr) cinfo);
      }
#endif
    }
  } else {
    for (row = cinfo->output_height-1; row >= 0; row--) {
      rle_row = (rle_pixel **) dest->rle_row;
      output_row = * (*cinfo->mem->access_virt_sarray)
        ((j_common_ptr) cinfo, dest->image,
	 (JDIMENSION) row, (JDIMENSION) 1, FALSE);
      red = rle_row[0];
      green = rle_row[1];
      blue = rle_row[2];
      for (col = cinfo->output_width; col > 0; col--) {
        *red++ = GETJSAMPLE(*output_row++);
        *green++ = GETJSAMPLE(*output_row++);
        *blue++ = GETJSAMPLE(*output_row++);
      }
      rle_putrow(rle_row, (int) cinfo->output_width, &header);
#ifdef PROGRESS_REPORT
      if (progress != NULL) {
        progress->pub.pass_counter++;
        (*progress->pub.progress_monitor) ((j_common_ptr) cinfo);
      }
#endif
    }
  }

#ifdef PROGRESS_REPORT
  if (progress != NULL)
    progress->completed_extra_passes++;
#endif

  /* Emit file trailer */
  rle_puteof(&header);
  fflush(dest->pub.output_file);
  if (ferror(dest->pub.output_file))
    ERREXIT(cinfo, JERR_FILE_WRITE);
}


/*
 * The module selection routine for RLE format output.
 */

GLOBAL(djpeg_dest_ptr)
jinit_write_rle (j_decompress_ptr cinfo)
{
  rle_dest_ptr dest;

  /* Create module interface object, fill in method pointers */
  dest = (rle_dest_ptr)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
                                  SIZEOF(rle_dest_struct));
  dest->pub.start_output = start_output_rle;
  dest->pub.finish_output = finish_output_rle;

  /* Calculate output image dimensions so we can allocate space */
  jpeg_calc_output_dimensions(cinfo);

  /* Allocate a work array for output to the RLE library. */
  dest->rle_row = (*cinfo->mem->alloc_sarray)
    ((j_common_ptr) cinfo, JPOOL_IMAGE,
     cinfo->output_width, (JDIMENSION) cinfo->output_components);

  /* Allocate a virtual array to hold the image. */
  dest->image = (*cinfo->mem->request_virt_sarray)
    ((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
     (JDIMENSION) (cinfo->output_width * cinfo->output_components),
     cinfo->output_height, (JDIMENSION) 1);

  return (djpeg_dest_ptr) dest;
}

#endif /* RLE_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\mediadet\dll.cpp ===
// Copyright (c) 1999  Microsoft Corporation.  All Rights Reserved.
// mediadet.cpp : Defines the entry point for the DLL application.
//

#include "stdafx.h"
#include <initguid.h>
#include "dll.h"
#include "dll_i.c"

/*
BOOL APIENTRY DllMain( HANDLE hModule, 
                       DWORD  ul_reason_for_call, 
                       LPVOID lpReserved
					 )
{
    return TRUE;
}
*/
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\wrtarga.c ===
/*
 * wrtarga.c
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains routines to write output images in Targa format.
 *
 * These routines may need modification for non-Unix environments or
 * specialized applications.  As they stand, they assume output to
 * an ordinary stdio stream.
 *
 * Based on code contributed by Lee Daniel Crocker.
 */

#include "cdjpeg.h"		/* Common decls for cjpeg/djpeg applications */

#ifdef TARGA_SUPPORTED


/*
 * To support 12-bit JPEG data, we'd have to scale output down to 8 bits.
 * This is not yet implemented.
 */

#if BITS_IN_JSAMPLE != 8
  Sorry, this code only copes with 8-bit JSAMPLEs. /* deliberate syntax err */
#endif

/*
 * The output buffer needs to be writable by fwrite().  On PCs, we must
 * allocate the buffer in near data space, because we are assuming small-data
 * memory model, wherein fwrite() can't reach far memory.  If you need to
 * process very wide images on a PC, you might have to compile in large-memory
 * model, or else replace fwrite() with a putc() loop --- which will be much
 * slower.
 */


/* Private version of data destination object */

typedef struct {
  struct djpeg_dest_struct pub;	/* public fields */

  char *iobuffer;		/* physical I/O buffer */
  JDIMENSION buffer_width;	/* width of one row */
} tga_dest_struct;

typedef tga_dest_struct * tga_dest_ptr;


LOCAL(void)
write_header (j_decompress_ptr cinfo, djpeg_dest_ptr dinfo, int num_colors)
/* Create and write a Targa header */
{
  char targaheader[18];

  /* Set unused fields of header to 0 */
  MEMZERO(targaheader, SIZEOF(targaheader));

  if (num_colors > 0) {
    targaheader[1] = 1;		/* color map type 1 */
    targaheader[5] = (char) (num_colors & 0xFF);
    targaheader[6] = (char) (num_colors >> 8);
    targaheader[7] = 24;	/* 24 bits per cmap entry */
  }

  targaheader[12] = (char) (cinfo->output_width & 0xFF);
  targaheader[13] = (char) (cinfo->output_width >> 8);
  targaheader[14] = (char) (cinfo->output_height & 0xFF);
  targaheader[15] = (char) (cinfo->output_height >> 8);
  targaheader[17] = 0x20;	/* Top-down, non-interlaced */

  if (cinfo->out_color_space == JCS_GRAYSCALE) {
    targaheader[2] = 3;		/* image type = uncompressed gray-scale */
    targaheader[16] = 8;	/* bits per pixel */
  } else {			/* must be RGB */
    if (num_colors > 0) {
      targaheader[2] = 1;	/* image type = colormapped RGB */
      targaheader[16] = 8;
    } else {
      targaheader[2] = 2;	/* image type = uncompressed RGB */
      targaheader[16] = 24;
    }
  }

  if (JFWRITE(dinfo->output_file, targaheader, 18) != (size_t) 18)
    ERREXIT(cinfo, JERR_FILE_WRITE);
}


/*
 * Write some pixel data.
 * In this module rows_supplied will always be 1.
 */

METHODDEF(void)
put_pixel_rows (j_decompress_ptr cinfo, djpeg_dest_ptr dinfo,
		JDIMENSION rows_supplied)
/* used for unquantized full-color output */
{
  tga_dest_ptr dest = (tga_dest_ptr) dinfo;
  register JSAMPROW inptr;
  register char * outptr;
  register JDIMENSION col;

  inptr = dest->pub.buffer[0];
  outptr = dest->iobuffer;
  for (col = cinfo->output_width; col > 0; col--) {
    outptr[0] = (char) GETJSAMPLE(inptr[2]); /* RGB to BGR order */
    outptr[1] = (char) GETJSAMPLE(inptr[1]);
    outptr[2] = (char) GETJSAMPLE(inptr[0]);
    inptr += 3, outptr += 3;
  }
  (void) JFWRITE(dest->pub.output_file, dest->iobuffer, dest->buffer_width);
}

METHODDEF(void)
put_gray_rows (j_decompress_ptr cinfo, djpeg_dest_ptr dinfo,
	       JDIMENSION rows_supplied)
/* used for grayscale OR quantized color output */
{
  tga_dest_ptr dest = (tga_dest_ptr) dinfo;
  register JSAMPROW inptr;
  register char * outptr;
  register JDIMENSION col;

  inptr = dest->pub.buffer[0];
  outptr = dest->iobuffer;
  for (col = cinfo->output_width; col > 0; col--) {
    *outptr++ = (char) GETJSAMPLE(*inptr++);
  }
  (void) JFWRITE(dest->pub.output_file, dest->iobuffer, dest->buffer_width);
}


/*
 * Write some demapped pixel data when color quantization is in effect.
 * For Targa, this is only applied to grayscale data.
 */

METHODDEF(void)
put_demapped_gray (j_decompress_ptr cinfo, djpeg_dest_ptr dinfo,
		   JDIMENSION rows_supplied)
{
  tga_dest_ptr dest = (tga_dest_ptr) dinfo;
  register JSAMPROW inptr;
  register char * outptr;
  register JSAMPROW color_map0 = cinfo->colormap[0];
  register JDIMENSION col;

  inptr = dest->pub.buffer[0];
  outptr = dest->iobuffer;
  for (col = cinfo->output_width; col > 0; col--) {
    *outptr++ = (char) GETJSAMPLE(color_map0[GETJSAMPLE(*inptr++)]);
  }
  (void) JFWRITE(dest->pub.output_file, dest->iobuffer, dest->buffer_width);
}


/*
 * Startup: write the file header.
 */

METHODDEF(void)
start_output_tga (j_decompress_ptr cinfo, djpeg_dest_ptr dinfo)
{
  tga_dest_ptr dest = (tga_dest_ptr) dinfo;
  int num_colors, i;
  FILE *outfile;

  if (cinfo->out_color_space == JCS_GRAYSCALE) {
    /* Targa doesn't have a mapped grayscale format, so we will */
    /* demap quantized gray output.  Never emit a colormap. */
    write_header(cinfo, dinfo, 0);
    if (cinfo->quantize_colors)
      dest->pub.put_pixel_rows = put_demapped_gray;
    else
      dest->pub.put_pixel_rows = put_gray_rows;
  } else if (cinfo->out_color_space == JCS_RGB) {
    if (cinfo->quantize_colors) {
      /* We only support 8-bit colormap indexes, so only 256 colors */
      num_colors = cinfo->actual_number_of_colors;
      if (num_colors > 256)
	ERREXIT1(cinfo, JERR_TOO_MANY_COLORS, num_colors);
      write_header(cinfo, dinfo, num_colors);
      /* Write the colormap.  Note Targa uses BGR byte order */
      outfile = dest->pub.output_file;
      for (i = 0; i < num_colors; i++) {
	putc(GETJSAMPLE(cinfo->colormap[2][i]), outfile);
	putc(GETJSAMPLE(cinfo->colormap[1][i]), outfile);
	putc(GETJSAMPLE(cinfo->colormap[0][i]), outfile);
      }
      dest->pub.put_pixel_rows = put_gray_rows;
    } else {
      write_header(cinfo, dinfo, 0);
      dest->pub.put_pixel_rows = put_pixel_rows;
    }
  } else {
    ERREXIT(cinfo, JERR_TGA_COLORSPACE);
  }
}


/*
 * Finish up at the end of the file.
 */

METHODDEF(void)
finish_output_tga (j_decompress_ptr cinfo, djpeg_dest_ptr dinfo)
{
  /* Make sure we wrote the output file OK */
  fflush(dinfo->output_file);
  if (ferror(dinfo->output_file))
    ERREXIT(cinfo, JERR_FILE_WRITE);
}


/*
 * The module selection routine for Targa format output.
 */

GLOBAL(djpeg_dest_ptr)
jinit_write_targa (j_decompress_ptr cinfo)
{
  tga_dest_ptr dest;

  /* Create module interface object, fill in method pointers */
  dest = (tga_dest_ptr)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  SIZEOF(tga_dest_struct));
  dest->pub.start_output = start_output_tga;
  dest->pub.finish_output = finish_output_tga;

  /* Calculate output image dimensions so we can allocate space */
  jpeg_calc_output_dimensions(cinfo);

  /* Create I/O buffer.  Note we make this near on a PC. */
  dest->buffer_width = cinfo->output_width * cinfo->output_components;
  dest->iobuffer = (char *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(size_t) (dest->buffer_width * SIZEOF(char)));

  /* Create decompressor output buffer. */
  dest->pub.buffer = (*cinfo->mem->alloc_sarray)
    ((j_common_ptr) cinfo, JPOOL_IMAGE, dest->buffer_width, (JDIMENSION) 1);
  dest->pub.buffer_height = 1;

  return (djpeg_dest_ptr) dest;
}

#endif /* TARGA_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\mediadet\mediadet.cpp ===
// Copyright (c) 1999  Microsoft Corporation.  All Rights Reserved.
#include <streams.h>
#include "stdafx.h"
#include <qeditint.h>
#include <qedit.h>
#include "..\util\filfuncs.h"
#include "mediadet.h"
#include "..\util\conv.cxx"
#include "..\render\dexhelp.h"
#include <shfolder.h>

// this ini file holds media type information about various streams in various
// files. It uses structured storage. All file accesses are serialized through
// a mutex.
//
#define OUR_VERSION 1
const WCHAR * gszMEDIADETCACHEFILE = L"DCBC2A71-70D8-4DAN-EHR8-E0D61DEA3FDF.ini";
WCHAR gszCacheDirectoryName[_MAX_PATH];


//############################################################################
//
//############################################################################

CMediaDet::CMediaDet( TCHAR * pName, IUnknown * pUnk, HRESULT * pHr )
    : CUnknown( pName, pUnk )
    , m_nStream( 0 )
    , m_cStreams( 0 )
    , m_bBitBucket( false )
    , m_bAllowCached( true )
    , m_hDD( 0 )
    , m_hDC( 0 )
    , m_hDib( NULL )
    , m_hOld( 0 )
    , m_pDibBits( NULL )
    , m_nDibWidth( 0 )
    , m_nDibHeight( 0 )
    , m_pCache( NULL )
    , m_hCacheMutex( NULL )
    , m_dLastSeekTime( -1.0 )
    , m_punkSite( NULL )
{
    m_szFilename[0] = 0;

    // create a system-wide mutex so we can serialize access through the
    // caching functions
    //
    m_hCacheMutex = CreateMutex( NULL, FALSE, _T("TheMediaDet") );
}

//############################################################################
//
//############################################################################

CMediaDet::~CMediaDet( )
{
    // wipe out the graph 'n' stuff
    //
    _ClearOutEverything( );

    // close the cache memory
    //
    _FreeCacheMemory( );

    // if we have these objects open, close them now
    //
    if( m_hDD )
    {
        DrawDibClose( m_hDD );
    }
    if( m_hDib )
    {
        DeleteObject( SelectObject( m_hDC, m_hOld ) );
    }
    if( m_hDC )
    {
        DeleteDC( m_hDC );
    }
    if( m_hCacheMutex )
    {
        CloseHandle( m_hCacheMutex );
    }

}

// it's "loaded" if either of these are set
//
bool CMediaDet::_IsLoaded( )
{
    if( m_pCache || m_pMediaDet )
    {
        return true;
    }
    return false;
}

//############################################################################
// free up the cache memory that's being used for this particular file
//############################################################################

void CMediaDet::_FreeCacheMemory( )
{
    if( m_pCache )
    {
        delete [] m_pCache;
        m_pCache = NULL;
    }
}

//############################################################################
// serialize read in the cache file information and put it into a buffer
//############################################################################

HRESULT CMediaDet::_ReadCacheFile( )
{
    if( !m_hCacheMutex )
    {
        return E_OUTOFMEMORY;
    }

    WaitForSingleObject( m_hCacheMutex, INFINITE );

    USES_CONVERSION;
    HRESULT hr = 0;

    // if no filename, we can't do anything.
    //
    if( !m_szFilename[0] )
    {
        ReleaseMutex( m_hCacheMutex );
        return NOERROR;
    }

    CComPtr< IStorage > m_pStorage;

    // create the pathname for the .ini file
    //
    WCHAR SystemDir[_MAX_PATH];
    _GetCacheDirectoryName( SystemDir );

    WCHAR SystemPath[_MAX_PATH];
    wcscpy( SystemPath, SystemDir );
    wcscat( SystemPath, L"\\" );
    wcscat( SystemPath, gszMEDIADETCACHEFILE );

    // open the storage up. If it's not there, well too bad
    //
    hr = StgOpenStorage(
        SystemPath,
        NULL,
        STGM_READWRITE | STGM_TRANSACTED,
        NULL,
        0,
        &m_pStorage );

    // no storage file, can't read it
    //
    if( FAILED( hr ) )
    {
        ReleaseMutex( m_hCacheMutex );
        return hr;
    }

    // free up the cache file that already exists
    //
    _FreeCacheMemory( );

    // create a unique name for the storage directory
    //
    WCHAR Filename[_MAX_PATH];
    _GetStorageFilename( m_szFilename, Filename );

    // open up the storage for this particular file
    //
    CComPtr< IStorage > pFileStore;
    hr = m_pStorage->OpenStorage(
        Filename,
        NULL,
        STGM_READ | STGM_SHARE_EXCLUSIVE,
        NULL,
        0,
        &pFileStore );
    if( FAILED( hr ) )
    {
        ReleaseMutex( m_hCacheMutex );
        return hr;
    }

    // open up the stream to read in the cached information
    //
    CComPtr< IStream > pStream;
    hr = pFileStore->OpenStream(
        L"MainStream",
        NULL,
        STGM_READ | STGM_SHARE_EXCLUSIVE,
        0,
        &pStream );
    if( FAILED( hr ) )
    {
        ReleaseMutex( m_hCacheMutex );
        return hr;
    }

    // first, read the size of the cache info
    //
    long size = 0;
    hr = pStream->Read( &size, sizeof( size ), NULL );
    if( FAILED( hr ) )
    {
        ReleaseMutex( m_hCacheMutex );
        return hr;
    }

    // do a smart check first, just in case
    //
    if( size > 1000000 )
    {
        ReleaseMutex( m_hCacheMutex );
        return E_OUTOFMEMORY;
    }

    // create the cache block
    //
    m_pCache = (MDCache*) new char[size];
    if( !m_pCache )
    {
        ReleaseMutex( m_hCacheMutex );
        return E_OUTOFMEMORY;
    }

    hr = pStream->Read( m_pCache, size, NULL );

    pStream.Release( );

    pFileStore.Release( );

    m_pStorage.Release( );

    ReleaseMutex( m_hCacheMutex );
    return hr;
}

//############################################################################
//
//############################################################################

HRESULT CMediaDet::_WriteCacheFile( )
{
    HRESULT hr;

    if( !m_hCacheMutex )
    {
        return E_OUTOFMEMORY;
    }

    WaitForSingleObject( m_hCacheMutex, INFINITE );

    CComPtr< IStorage > m_pStorage;

    WCHAR SystemDir[_MAX_PATH];
    _GetCacheDirectoryName( SystemDir );

    WCHAR SystemPath[_MAX_PATH];

    USES_CONVERSION;

    wcscpy( SystemPath, SystemDir );
    wcscat( SystemPath, L"\\" );
    wcscat( SystemPath, gszMEDIADETCACHEFILE );

    hr = StgCreateDocfile(
        SystemPath,
        STGM_READWRITE | STGM_TRANSACTED, // FAILIFTHERE is IMPLIED
        0,
        &m_pStorage );

    if( hr == STG_E_FILEALREADYEXISTS )
    {
        hr = StgOpenStorage(
            SystemPath,
            NULL,
            STGM_READWRITE | STGM_TRANSACTED,
            NULL,
            0,
            &m_pStorage );
    }

    if( FAILED( hr ) )
    {
        ReleaseMutex( m_hCacheMutex );
        return hr;
    }

    // tell the main storage to open up a storage for this file
    //
    CComPtr< IStorage > pFileStore;
    WCHAR Filename[_MAX_PATH];
    _GetStorageFilename( m_szFilename, Filename );
    hr = m_pStorage->CreateStorage(
        Filename,
        STGM_WRITE | STGM_SHARE_EXCLUSIVE, // FAILIFTHERE is IMPLIED
        0, 0,
        &pFileStore );
    if( FAILED( hr ) )
    {
        if( hr == STG_E_FILEALREADYEXISTS )
        {
            // need to delete the storage first
            //
            hr = m_pStorage->DestroyElement( Filename );

            if( SUCCEEDED( hr ) )
            {
                hr = m_pStorage->CreateStorage(
                    Filename,
                    STGM_WRITE | STGM_SHARE_EXCLUSIVE, // FAILIFTHERE is IMPLIED
                    0, 0,
                    &pFileStore );
            }
        }

        if( FAILED( hr ) )
        {
            DbgLog( ( LOG_ERROR, 1, "Could not Destroy, then reCreateStorage" ) );

            _ClearGraphAndStreams( );
            ReleaseMutex( m_hCacheMutex );
            return hr;
        }
    }

    // write out this MDCache
    //
    CComPtr< IStream > pStream;
    hr = pFileStore->CreateStream(
        L"MainStream",
        STGM_WRITE | STGM_SHARE_EXCLUSIVE,
        0, 0,
        &pStream );
    if( FAILED( hr ) )
    {
        DbgLog( ( LOG_ERROR, 1, "Could not CreateStream" ) );

        _ClearGraphAndStreams( );
        ReleaseMutex( m_hCacheMutex );
        return hr;
    }

    long size = sizeof( long ) + sizeof( FILETIME ) + sizeof( long ) + sizeof( MDCacheFile ) * m_cStreams;

    // write the size of what we're about to write
    //
    hr = pStream->Write( &size, sizeof( size ), NULL );

    // write the whole block in one chunk
    //
    hr = pStream->Write( m_pCache, size, NULL );
    if( FAILED( hr ) )
    {
        DbgLog( ( LOG_ERROR, 1, "Could not Write to stream" ) );

        _ClearGraphAndStreams( );
        ReleaseMutex( m_hCacheMutex );
        return hr;
    }

    hr = pStream->Commit( STGC_DEFAULT );
    if( FAILED( hr ) )
    {
        DbgLog( ( LOG_ERROR, 1, "Could not Commit stream" ) );

        _ClearGraphAndStreams( );
        ReleaseMutex( m_hCacheMutex );
        return hr;
    }

    pStream.Release( );

    hr = pFileStore->Commit( STGC_DEFAULT );

    if( m_pStorage )
    {
        m_pStorage->Commit( STGC_DEFAULT );
        m_pStorage.Release( );
    }

    _ClearGraph( ); // don't clear stream count info, we can use that

    ReleaseMutex( m_hCacheMutex );

    return NOERROR;
}

//############################################################################
//
//############################################################################

STDMETHODIMP CMediaDet::GetSampleGrabber( ISampleGrabber ** ppVal )
{
    CheckPointer( ppVal, E_POINTER );

    if( m_pBitBucketFilter )
    {
        HRESULT hr = m_pBitBucketFilter->QueryInterface( IID_ISampleGrabber, (void**) ppVal );
        return hr;
    }
    else
    {
        return E_NOINTERFACE;
    }
}

//############################################################################
//
//############################################################################

STDMETHODIMP CMediaDet::NonDelegatingQueryInterface( REFIID i, void ** p )
{
    CheckPointer( p, E_POINTER );

    if( i == IID_IMediaDet )
    {
        return GetInterface( (IMediaDet*) this, p );
    }
    else if( i == IID_IObjectWithSite )
    {
        return GetInterface( (IObjectWithSite*) this, p );
    }
    else if( i == IID_IServiceProvider )
    {
        return GetInterface( (IServiceProvider*) this, p );
    }

    return CUnknown::NonDelegatingQueryInterface( i, p );
}

//############################################################################
// unload the filter, anything it's connected to, and stream info
// called from:
//      WriteCacheFile (because it found a cache file, it doesn't need graph)
//      ClearGraphAndStreams (duh)
//      get_StreamMediaType (it only does this if it's cached, this should have no effect!)
//      EnterBitmapGrabMode (it only does this if no graph, this should have no effect!)
//          if EnterBitmapGrabMode fails, it will also call this. Hm....
//############################################################################

void CMediaDet::_ClearGraph( )
{
    m_pGraph.Release( );
    m_pFilter.Release( );
    m_pMediaDet.Release( );
    m_pBitBucketFilter.Release( );
    m_pBitRenderer.Release( );
    m_bBitBucket = false;
}

//############################################################################
//
//############################################################################

void CMediaDet::_ClearGraphAndStreams( )
{
    _ClearGraph( );
    _FreeCacheMemory( ); // this causes _IsLoaded to return false now
    m_nStream = 0;
    m_cStreams = 0;
}

//############################################################################
//
//############################################################################

void CMediaDet::_ClearOutEverything( )
{
    _ClearGraphAndStreams( );
    m_szFilename[0] = 0;
}

//############################################################################
//
//############################################################################

STDMETHODIMP CMediaDet::get_Filter( IUnknown* *pVal)
{
    CheckPointer( pVal, E_POINTER );
    *pVal = m_pFilter;
    if( *pVal )
    {
        (*pVal)->AddRef( );
    }
    return NOERROR;
}

//############################################################################
//
//############################################################################

STDMETHODIMP CMediaDet::put_Filter( IUnknown* newVal)
{
    CheckPointer( newVal, E_POINTER );

    // make sure it's a filter
    //
    CComQIPtr< IBaseFilter, &IID_IBaseFilter > pBase( newVal );
    if( !pBase )
    {
        return E_NOINTERFACE;
    }

    // clear anything out
    //
    _ClearOutEverything( );

    // set our filter now
    //
    m_pFilter = pBase;

    // load up the info
    //
    HRESULT hr = _Load( );

    // if we failed, don't hold onto the pointer
    //
    if( FAILED( hr ) )
    {
        _ClearOutEverything( );
    }

    return hr;
}

//############################################################################
//
//############################################################################

STDMETHODIMP CMediaDet::get_Filename( BSTR *pVal)
{
    CheckPointer( pVal, E_POINTER );

    // if no name's been set
    //
    if( !m_szFilename[0] )
    {
        *pVal = NULL;
        return NOERROR;
    }

    *pVal = SysAllocString( m_szFilename );
    if( !(*pVal) ) return E_OUTOFMEMORY;
    return NOERROR;
}

//############################################################################
//
//############################################################################

STDMETHODIMP CMediaDet::put_Filename( BSTR newVal)
{
    // see if the file exists first
    //
    if( wcslen( newVal ) == 0 )
    {
        return E_INVALIDARG;
    }

    USES_CONVERSION;
    TCHAR * tFilename = W2T( newVal );
    HANDLE h = CreateFile
    (
        tFilename,
        GENERIC_READ, // access
        FILE_SHARE_READ, // share mode
        NULL, // security
        OPEN_EXISTING, // creation disposition
        0, // flags
        NULL
    );
    if( h == INVALID_HANDLE_VALUE )
    {
        return MAKE_HRESULT( SEVERITY_ERROR, FACILITY_WIN32, GetLastError( ) );
    }
    CloseHandle( h );

    // clear anything out first
    //
    _ClearOutEverything( );

    // copy over the filename
    //
    wcscpy( m_szFilename, newVal );

    // try to get our info
    //
    HRESULT hr = _Load( );

    // if it failed, free up the name
    //
    if( FAILED( hr ) )
    {
        m_szFilename[0] = 0;
    }

    return hr;
}

//############################################################################
// internal function
//############################################################################

TCHAR * CMediaDet::_GetKeyName( TCHAR * tSuffix )
{
    static TCHAR Key[256];
    wsprintf( Key, _T("Stream%2.2ld%s"), m_nStream, tSuffix);
    return Key;
}

//############################################################################
//
//############################################################################

STDMETHODIMP CMediaDet::get_CurrentStream( long *pVal)
{
    CheckPointer( pVal, E_POINTER );

    *pVal = 0;

    if( !_IsLoaded( ) )
    {
        return NOERROR;
    }

    // either m_pCache or m_pMediaDet is valid, so m_nStream must be valid

    CheckPointer( pVal, E_POINTER );
    *pVal = m_nStream;

    return NOERROR;
}

//############################################################################
//
//############################################################################

STDMETHODIMP CMediaDet::put_CurrentStream( long newVal)
{
    if( m_bBitBucket )
    {
        return E_INVALIDARG;
    }
    if( !_IsLoaded( ) )
    {
        return E_INVALIDARG;
    }

    // since m_pCache or m_pMediaDet is valid, we know m_nStreams is valid

    // force it to load m_cStreams
    //
    long Streams = 0;
    get_OutputStreams( &Streams );

    if( newVal >= Streams )
    {
        return E_INVALIDARG;
    }
    if( newVal < 0 )
    {
        return E_INVALIDARG;
    }
    m_nStream = newVal;
    return NOERROR;
}

//############################################################################
//
//############################################################################

STDMETHODIMP CMediaDet::get_StreamTypeB( BSTR *pVal)
{
    // if we're in bit bucket mode, then we can't return
    // a stream type
    //
    if( m_bBitBucket )
    {
        return E_INVALIDARG;
    }

    // get the stream type and convert to a BSTR
    //
    GUID Type = GUID_NULL;
    HRESULT hr = get_StreamType( &Type );
    if( FAILED( hr ) )
    {
        return hr;
    }

    WCHAR * TempVal = NULL;
    hr = StringFromCLSID( Type, &TempVal );
    if( FAILED( hr ) )
    {
        return hr;

    }

    // if you call StringFromCLSID, VB will fault out. You need to allocate it
    //
    *pVal = SysAllocString( TempVal );
    hr = *pVal ? NOERROR : E_OUTOFMEMORY;
    CoTaskMemFree( TempVal );

    return hr;
}

//############################################################################
//
//############################################################################

HRESULT CMediaDet::_Load( )
{
    USES_CONVERSION;

    HRESULT hr = 0;

    FILETIME WriteTime;
    ZeroMemory( &WriteTime, sizeof( WriteTime ) );

    TCHAR * tFilename = W2T( m_szFilename );

    if( m_szFilename[0] && m_bAllowCached )
    {
        // attempt to open the file. if we can't open the file, we cannot cache the
        // values
        //
        HANDLE hFile = CreateFile(
            tFilename,
            GENERIC_READ,
            FILE_SHARE_READ,
            NULL,
            OPEN_EXISTING,
            0,
            NULL );

        if( hFile != INVALID_HANDLE_VALUE )
        {
            // get the real write time
            //
            BOOL b = GetFileTime( hFile, NULL, NULL, &WriteTime );
            CloseHandle( hFile );
        }

        hr = _ReadCacheFile( );
        if( !FAILED( hr ) )
        {
            // if they don't match, we didn't get a hit
            //
            if( memcmp( &WriteTime, &m_pCache->FileTime, sizeof( WriteTime ) ) == 0 )
            {
                return NOERROR;
            }
        }
        else
        {
            hr = 0;
        }

        // ... drop through and do normal processing. We will cache the answer
        // if possible in the registry as we find it.
    }

    // if we don't have a filter *, then we need one now. Note! This allows us
    // to have a valid m_pFilter but not an m_pGraph!
    //
    if( !m_pFilter )
    {
        CComPtr< IUnknown > pUnk;
        hr = MakeSourceFilter( &pUnk, m_szFilename, NULL, NULL, NULL, NULL, 0, NULL );
        ASSERT( !FAILED( hr ) );
        if( FAILED( hr ) )
        {
            DbgLog( ( LOG_ERROR, 1, "Could not MakeSourceFilter" ) );

            _ClearGraphAndStreams( );
            return hr;
        }

        pUnk->QueryInterface( IID_IBaseFilter, (void**) &m_pFilter );
    }

    // now we have a filter. But we don't know how many streams it has.
    // put both the source filter and the mediadet in the graph and tell it to
    // Render( ) the source. All the mediadet pins will then be hooked up.
    // Note! This allows us to have a valid m_pMediaDet without a valid m_pGraph!

    ASSERT( !m_pMediaDet );

    hr = CoCreateInstance(
        CLSID_MediaDetFilter,
        NULL,
        CLSCTX_INPROC_SERVER,
        IID_IBaseFilter,
        (void**) &m_pMediaDet );
    ASSERT( !FAILED( hr ) );
    if( FAILED( hr ) )
    {
        DbgLog( ( LOG_ERROR, 1, "Could not create MediaDetFilter" ) );

        _ClearGraphAndStreams( );
        return hr;
    }

    hr = CoCreateInstance(
        CLSID_FilterGraph,
        NULL,
        CLSCTX_INPROC_SERVER,
        IID_IGraphBuilder,
        (void**) &m_pGraph );
    ASSERT( !FAILED( hr ) );
    if( FAILED( hr ) )
    {
        DbgLog( ( LOG_ERROR, 1, "Could not create graph!" ) );

        _ClearGraphAndStreams( );
        return hr;
    }

    // give the graph a pointer back to us. Only tell the graph about us
    // if we've got a site to give. Otherwise, we may clear out a site
    // that already exists.
    //
    if( m_punkSite )
    {
        CComQIPtr< IObjectWithSite, &IID_IObjectWithSite > pOWS( m_pGraph );
        ASSERT( pOWS );
        if( pOWS )
        {
            pOWS->SetSite( (IServiceProvider *) this );
        }
    }

    hr = m_pGraph->AddFilter( m_pFilter, L"Source" );
    if( FAILED( hr ) )
    {
        DbgLog( ( LOG_ERROR, 1, "Could not add source filter to graph" ) );

        _ClearGraphAndStreams( );
        return hr;
    }

    hr = m_pGraph->AddFilter( m_pMediaDet, L"MediaDet" );
    ASSERT( !FAILED( hr ) );
    if( FAILED( hr ) )
    {
        DbgLog( ( LOG_ERROR, 1, "Could not add MediaDet filter to graph" ) );

        _ClearGraphAndStreams( );
        return hr;
    }

    // render ALL output pins
    //
    BOOL FoundAtLeastSomething = FALSE;
    long SourcePinCount = GetPinCount( m_pFilter, PINDIR_OUTPUT );
    for( int pin = 0 ; pin < SourcePinCount ; pin++ )
    {
        IPin * pFilterOutPin = GetOutPin( m_pFilter, pin );
        HRESULT hr2 = m_pGraph->Render( pFilterOutPin );
        if( !FAILED( hr2 ) )
        {
            FoundAtLeastSomething = TRUE;
        }
    }
    if( !FoundAtLeastSomething )
    {
        DbgLog( ( LOG_ERROR, 1, "Could not render anything on source" ) );

        _ClearGraphAndStreams( );
        return VFW_E_INVALIDMEDIATYPE;
    }

    // all the pins should be hooked up now.

    // find the number of pins
    //
    CComQIPtr< IMediaDetFilter, &IID_IMediaDetFilter > pDetect( m_pMediaDet );
    pDetect->get_PinCount( &m_cStreams );

    // if we just gave us a filter, don't bother
    // saving back to the registry
    //
    if( !m_szFilename[0] || !m_bAllowCached )
    {
        // but do bother finding out how many streams we've got
        //
        return hr;
    }

    _FreeCacheMemory( );

    long size = sizeof( long ) + sizeof( FILETIME ) + sizeof( long ) + sizeof( MDCacheFile ) * m_cStreams;

    // don't assign this to m_pCache, since functions look at it.
    //
    MDCache * pCache = (MDCache*) new char[size];
    if( !pCache )
    {
        DbgLog( ( LOG_ERROR, 1, "Could not allocate cache memory" ) );

        _ClearGraphAndStreams( );
        return E_OUTOFMEMORY;
    }
    ZeroMemory( pCache, size );

    pCache->FileTime = WriteTime;
    pCache->Count = m_cStreams;
    pCache->Version = OUR_VERSION;

    // for each pin, find it's media type, etc
    //
    for( int i = 0 ; i < m_cStreams ; i++ )
    {
        m_nStream = i;
        GUID Type = GUID_NULL;
        hr = get_StreamType( &Type );
        double Length = 0.0;
        hr = get_StreamLength( &Length );

        pCache->CacheFile[i].StreamLength = Length;
        pCache->CacheFile[i].StreamType = Type;
    }

    // NOW assign it!
    //
    m_pCache = pCache;

    // if it bombs, there's nothing we can do. We can still allow us to use
    // m_pCache for getting information, but it won't read in next time we
    // try to read it. Next time, it will need to generate the cache information
    // again!
    //
    hr = _WriteCacheFile( );
    if( FAILED( hr ) )
    {
        DbgLog( ( LOG_ERROR, 1, "Couldn't write out the mediadet cache file!" ) );
        hr = NOERROR;
    }

    return hr;
}

//############################################################################
//
//############################################################################

STDMETHODIMP CMediaDet::get_StreamType( GUID *pVal )
{
    CheckPointer( pVal, E_POINTER );

    if( m_bBitBucket )
    {
        return E_INVALIDARG;
    }
    if( !_IsLoaded( ) )
    {
        return E_INVALIDARG;
    }

    // if we have a cache, use that information now
    //
    if( m_pCache )
    {
        *pVal = m_pCache->CacheFile[m_nStream].StreamType;
        return NOERROR;
    }

    // because of the IsLoaded( ) check above, and the m_pCache check, m_pMediaDet MUST be valid
    //
    IPin * pPin = GetInPin( m_pMediaDet, m_nStream );
    ASSERT( pPin );

    HRESULT hr = 0;

    // ask for it's media type
    //
    AM_MEDIA_TYPE Type;
    hr = pPin->ConnectionMediaType( &Type );
    if( FAILED( hr ) )
    {
        return hr;
    }

    *pVal = Type.majortype;
    FreeMediaType(Type);
    return NOERROR;
}

//############################################################################
//
//############################################################################

STDMETHODIMP CMediaDet::get_StreamMediaType( AM_MEDIA_TYPE * pVal )
{
    CheckPointer( pVal, E_POINTER );

    HRESULT hr = 0;

    // can't do it in bit bucket mode
    //
    if( m_bBitBucket )
    {
        return E_INVALIDARG;
    }
    if( !_IsLoaded( ) )
    {
        return E_INVALIDARG;
    }

    // if we have a cache, use that information now
    //
    if( m_pCache )
    {
        // need to free up the cached stuff and force a load
        //
        _ClearGraph( );
        _FreeCacheMemory( ); // _IsLoaded( ) will now return false!
        m_bAllowCached = false;
        hr = _Load( );
        if( FAILED( hr ) )
        {
            return hr; // whoops!
        }
    }

    // because of the IsLoaded( ) check above, and the reload with m_bAllowCached set
    // to false, m_pMediaDet MUST be valid
    //
    ASSERT( m_pMediaDet );
    IPin * pPin = GetInPin( m_pMediaDet, m_nStream );
    ASSERT( pPin );

    // ask for it's media type
    //
    hr = pPin->ConnectionMediaType( pVal );
    if( FAILED( hr ) )
    {
        return hr;
    }

    return NOERROR;
}

//############################################################################
//
//############################################################################

STDMETHODIMP CMediaDet::get_StreamLength( double *pVal )
{
    CheckPointer( pVal, E_POINTER );

    if( m_bBitBucket )
    {
        return E_INVALIDARG;
    }
    if( !_IsLoaded( ) )
    {
        return E_INVALIDARG;
    }

    // if we have a cache, use that information now
    //
    if( m_pCache )
    {
        *pVal = m_pCache->CacheFile[m_nStream].StreamLength;
        return NOERROR;
    }

    // because of the IsLoaded( ) check above, and the cache check, m_pMediaDet MUST be valid
    //
    HRESULT hr = 0;

    CComQIPtr< IMediaDetFilter, &IID_IMediaDetFilter > pDetector( m_pMediaDet );
    hr = pDetector->get_Length( m_nStream, pVal );
    return hr;
}

//############################################################################
//
//############################################################################

STDMETHODIMP CMediaDet::get_OutputStreams( long *pVal)
{
    if( m_bBitBucket )
    {
        return E_INVALIDARG;
    }
    if( !_IsLoaded( ) )
    {
        return E_INVALIDARG;
    }

    // if we have a cache, use that information now
    //
    if( m_pCache )
    {
        *pVal = m_pCache->Count;
        return NOERROR;
    }

    // it wasn't cached, so it MUST have been loaded in _Load( )
    // m_cStreams will be valid
    //
    CheckPointer( pVal, E_POINTER );
    *pVal = m_cStreams;
    return NOERROR;
}

//############################################################################
//
//############################################################################

HRESULT CMediaDet::_InjectBitBuffer( )
{
    HRESULT hr = 0;

    m_bBitBucket = true;

    hr = CoCreateInstance(
        CLSID_SampleGrabber,
        NULL,
        CLSCTX_INPROC_SERVER,
        IID_IBaseFilter,
        (void**) &m_pBitBucketFilter );

    if( FAILED( hr ) )
    {
        return hr;
    }

    // tell the sample grabber what to do
    //
    CComQIPtr< ISampleGrabber, &IID_ISampleGrabber > pGrabber( m_pBitBucketFilter );
    CMediaType SetType;
    SetType.SetType( &MEDIATYPE_Video );
    SetType.SetSubtype( &MEDIASUBTYPE_RGB24 );
    SetType.SetFormatType( &FORMAT_VideoInfo ); // this will prevent upsidedown dibs
    pGrabber->SetMediaType( &SetType );
    pGrabber->SetOneShot( FALSE );
    pGrabber->SetBufferSamples( TRUE );

    hr = CoCreateInstance(
        CLSID_NullRenderer,
        NULL,
        CLSCTX_INPROC_SERVER,
        IID_IBaseFilter,
        (void**) &m_pBitRenderer );

    if( FAILED( hr ) )
    {
        return hr;
    }

    // disconnect the mediadet, the source, and who's between
    //
    IPin * pMediaDetPin = GetInPin( m_pMediaDet, m_nStream );
    if( !pMediaDetPin )
    {
        return E_FAIL;
    }

    // find the first pin which provides the requested output media type, this will
    // be the source or a splitter, supposedly
    //
    CComPtr< IPin > pLastPin;
    hr = FindFirstPinWithMediaType( &pLastPin, pMediaDetPin, MEDIATYPE_Video );
    if( FAILED( hr ) )
    {
        return hr;
    }

    // remove the mediadetfilter, etc
    //
    RemoveChain( pLastPin, pMediaDetPin );
    hr = m_pGraph->RemoveFilter( m_pMediaDet );

    // add the bit bucket
    //
    hr = m_pGraph->AddFilter( m_pBitBucketFilter, L"BitBucket" );
    if( FAILED( hr ) )
    {
        return hr;
    }

    IPin * pBitInPin = GetInPin( m_pBitBucketFilter, 0 );
    if( !pBitInPin )
    {
        return E_FAIL;
    }

    hr = m_pGraph->Connect( pLastPin, pBitInPin );
    if( FAILED( hr ) )
    {
        return hr;
    }

    IPin * pBitOutPin = GetOutPin( m_pBitBucketFilter, 0 );
    if( !pBitOutPin )
    {
        return E_FAIL;
    }

    IPin * pRendererInPin = GetInPin( m_pBitRenderer, 0 );
    if( !pRendererInPin )
    {
        return E_FAIL;
    }

    m_pGraph->AddFilter( m_pBitRenderer, L"NullRenderer" );
    if( FAILED( hr ) )
    {
        return hr;
    }

    hr = m_pGraph->Connect( pBitOutPin, pRendererInPin );
    if( FAILED( hr ) )
    {
        return hr;
    }

    CComQIPtr< IMediaFilter, &IID_IMediaFilter > pMF( m_pGraph );
    if( pMF )
    {
        pMF->SetSyncSource( NULL );
    }

    return S_OK;
}

//############################################################################
//
//############################################################################

STDMETHODIMP CMediaDet::GetBitmapBits(
                                      double StreamTime,
                                      long * pBufferSize,
                                      char * pBuffer,
                                      long Width,
                                      long Height)
{
    HRESULT hr = 0;

    // has to have been loaded before
    //
    if( !pBuffer )
    {
        CheckPointer( pBufferSize, E_POINTER );
        *pBufferSize = sizeof( BITMAPINFOHEADER ) + WIDTHBYTES( Width * 24 ) * Height;
        return S_OK;
    }

    hr = EnterBitmapGrabMode( StreamTime );
    if( FAILED( hr ) )
    {
        return hr;
    }

    CComQIPtr< ISampleGrabber, &IID_ISampleGrabber > pGrabber( m_pBitBucketFilter );
    if( !pGrabber )
    {
        return E_NOINTERFACE;
    }
//    pGrabber->SetOneShot( TRUE );

    // we can't ask Ourselves for our media type, since we're in bitbucket
    // mode, so ask the sample grabber what's up
    //
    CMediaType ConnectType;
    hr = pGrabber->GetConnectedMediaType( &ConnectType );
    ASSERT( !FAILED( hr ) );
    if( FAILED( hr ) )
    {
        return E_OUTOFMEMORY;
    }
    if( *ConnectType.FormatType( ) != FORMAT_VideoInfo )
    {
        return VFW_E_INVALIDMEDIATYPE;
    }
    VIDEOINFOHEADER * pVIH = (VIDEOINFOHEADER*) ConnectType.Format( );
    if( !pVIH )
    {
        return VFW_E_INVALIDMEDIATYPE;
    }
    BITMAPINFOHEADER * pSourceBIH = &pVIH->bmiHeader;

    hr = _SeekGraphToTime( StreamTime );
    if( FAILED( hr ) )
    {
        return hr;
    }

    long BufferSize = 0;
    pGrabber->GetCurrentBuffer( &BufferSize, NULL );
    if( BufferSize <= 0 )
    {
        ASSERT( BufferSize > 0 );
        return E_UNEXPECTED;
    }
    char * pOrgBuffer = new char[BufferSize+sizeof(BITMAPINFOHEADER)];
    if( !pOrgBuffer )
    {
        return E_OUTOFMEMORY;
    }
    pGrabber->GetCurrentBuffer( &BufferSize, (long*) ( pOrgBuffer + sizeof(BITMAPINFOHEADER) ) );
    memcpy( pOrgBuffer, pSourceBIH, sizeof( BITMAPINFOHEADER ) );
    pSourceBIH = (BITMAPINFOHEADER*) pOrgBuffer;
    char * pSourceBits = ((char*)pSourceBIH) + sizeof( BITMAPINFOHEADER );

    // memcpy over the bitmapinfoheader
    //
    BITMAPINFO BitmapInfo;
    memset( &BitmapInfo, 0, sizeof( BitmapInfo ) );
    BitmapInfo.bmiHeader.biSize = sizeof( BITMAPINFOHEADER );
    BitmapInfo.bmiHeader.biSizeImage = DIBSIZE( BitmapInfo.bmiHeader );
    BitmapInfo.bmiHeader.biWidth = Width;
    BitmapInfo.bmiHeader.biHeight = Height;
    BitmapInfo.bmiHeader.biPlanes = 1;
    BitmapInfo.bmiHeader.biBitCount = 24;
    BITMAPINFOHEADER * pDestBIH = (BITMAPINFOHEADER*) pBuffer;
    *pDestBIH = BitmapInfo.bmiHeader;
    char * pDestBits = pBuffer + sizeof( BITMAPINFOHEADER );

    // if the sizes don't match, free stuff
    //
    if( Width != m_nDibWidth || Height != m_nDibHeight )
    {
        if( m_hDD )
        {
            DrawDibClose( m_hDD );
            m_hDD = NULL;
        }
        if( m_hDib )
        {
            DeleteObject( SelectObject( m_hDC, m_hOld ) );
            m_hDib = NULL;
            m_hOld = NULL;
        }
        if( m_hDC )
        {
            DeleteDC( m_hDC );
            m_hDC = NULL;
        }
    }

    m_nDibWidth = Width;
    m_nDibHeight = Height;

    // need to scale the image
    //
    if( !m_hDC )
    {
        // create a DC for the scaled image
        //
        HDC screenDC = GetDC( NULL );
        if( !screenDC )
        {
            return E_OUTOFMEMORY;
        }

        m_hDC = CreateCompatibleDC( screenDC );
        ReleaseDC( NULL, screenDC );

        char * pDibBits = NULL;

        m_hDib = CreateDIBSection(
            m_hDC,
            &BitmapInfo,
            DIB_RGB_COLORS,
            (void**) &m_pDibBits,
            NULL,
            0 );

        if( !m_hDib )
        {
            DeleteDC( m_hDC );
            delete [] pOrgBuffer;
            return E_OUTOFMEMORY;
        }

        ValidateReadWritePtr( m_pDibBits, Width * Height * 3 );

        // Select the dibsection into the hdc
        //
        m_hOld = SelectObject( m_hDC, m_hDib );
        if( !m_hOld )
        {
            DeleteDC( m_hDC );
            delete [] pOrgBuffer;
            return E_OUTOFMEMORY;
        }

        m_hDD = DrawDibOpen( );
        if( !m_hDD )
        {
            DeleteObject( SelectObject( m_hDC, m_hOld ) );
            DeleteDC( m_hDC );
            delete [] pOrgBuffer;
            return E_OUTOFMEMORY;
        }

    }

    ValidateReadWritePtr( pSourceBits, WIDTHBYTES( pSourceBIH->biWidth * pSourceBIH->biPlanes ) * pSourceBIH->biHeight );

    BOOL Worked = DrawDibDraw(
        m_hDD,
        m_hDC,
        0,
        0,
        Width, Height,
        pSourceBIH,
        pSourceBits,
        0, 0,
        pSourceBIH->biWidth, pSourceBIH->biHeight,
        0 );

    memcpy( pDestBits, m_pDibBits, WIDTHBYTES( Width * 24 ) * Height );

    delete [] pOrgBuffer;

    if( !Worked )
    {
        return VFW_E_INVALIDMEDIATYPE;
    }

    return S_OK;
}

//############################################################################
//
//############################################################################

STDMETHODIMP CMediaDet::WriteBitmapBits(
                                        double StreamTime,
                                        long Width,
                                        long Height,
                                        BSTR Filename )
{
    HRESULT hr = 0;

    USES_CONVERSION;
    TCHAR * t = W2T( Filename );

    BOOL Deleted = DeleteFile( t );
    if( !Deleted )
    {
        hr = GetLastError( );
        if( hr != ERROR_FILE_NOT_FOUND )
        {
            return STG_E_ACCESSDENIED;
        }
    }

    // round up to mod 4
    //
    long Mod = Width % 4;
    if( Mod != 0 )
    {
        Width += ( 4 - Mod );
    }

    // find the size of the buffer required
    //
    long BufferSize = 0;
    hr = GetBitmapBits( StreamTime, &BufferSize, NULL, Width, Height );
    if( FAILED( hr ) )
    {
        return hr;
    }

    // allocate and get the buffer
    //
    char * pBuffer = new char[BufferSize];

    if( !pBuffer )
    {
        return E_OUTOFMEMORY;
    }

    hr = GetBitmapBits( StreamTime, 0, pBuffer, Width, Height );
    if( FAILED( hr ) )
    {
        delete [] pBuffer;
        return hr;
    }

    HANDLE hf = CreateFile(
        t,
        GENERIC_WRITE,
        0,
        NULL,
        CREATE_ALWAYS,
        NULL,
        NULL );
    if( hf == INVALID_HANDLE_VALUE )
    {
        delete [] pBuffer;
        return E_FAIL;
    }

    BITMAPFILEHEADER bfh;
    memset( &bfh, 0, sizeof( bfh ) );
    bfh.bfType = 'MB';
    bfh.bfSize = sizeof( bfh ) + BufferSize;
    bfh.bfOffBits = sizeof( BITMAPINFOHEADER ) + sizeof( BITMAPFILEHEADER );

    DWORD Written = 0;
    WriteFile( hf, &bfh, sizeof( bfh ), &Written, NULL );
    Written = 0;
    WriteFile( hf, pBuffer, BufferSize, &Written, NULL );

    CloseHandle( hf );

    delete [] pBuffer;

    return 0;
}

//############################################################################
//
//############################################################################

STDMETHODIMP CMediaDet::get_FrameRate(double *pVal)
{
    CheckPointer( pVal, E_POINTER );
    *pVal = 0.0;

    CMediaType MediaType;
    HRESULT hr = get_StreamMediaType( &MediaType );
    if( FAILED( hr ) )
    {
        return hr;
    }

    // no frame rate if not video
    //
    if( *MediaType.Type( ) != MEDIATYPE_Video )
    {
        return VFW_E_INVALIDMEDIATYPE;
    }

    if( *MediaType.FormatType( ) != FORMAT_VideoInfo )
    {
        return VFW_E_INVALIDMEDIATYPE;
    }

    VIDEOINFOHEADER * pVIH = (VIDEOINFOHEADER*) MediaType.Format( );
    REFERENCE_TIME rt = pVIH->AvgTimePerFrame;

    // !!! hey! Poor filters may tell us the frame rate isn't right.
    // if this is so, just set it to some default
    //
    if( rt )
    {
        hr = 0;
        *pVal = double( UNITS ) / double( rt );
    }
    else
    {
        *pVal = 0;
        hr = S_FALSE;
    }

    return hr;
}

//############################################################################
//
//############################################################################

STDMETHODIMP CMediaDet::EnterBitmapGrabMode( double StreamTime )
{
    HRESULT hr = 0;

    if( !_IsLoaded( ) )
    {
        return E_INVALIDARG;
    }

    if( !m_pGraph ) // if no graph, then m_pCache must be valid, we must throw it away.
    {
        _ClearGraph( ); // should do nothing!
        _FreeCacheMemory( ); // _IsLoaded should not return false
        m_bAllowCached = false;
        hr = _Load( );
        if( FAILED( hr ) )
        {
            return hr; // whoops!
        }
    }

    // kinda a redundant check. hr passing the fail check above should mean it's
    // loaded, right?
    //
    if( !_IsLoaded( ) )
    {
        return E_INVALIDARG;
    }

    // if we haven't put the bit bucket in the graph, then do it now
    //
    if( m_bBitBucket )
    {
        return NOERROR;
    }

    // make sure we're aligned on a stream that produces video.
    //
    GUID StreamType = GUID_NULL;
    get_StreamType( &StreamType );
    if( StreamType != MEDIATYPE_Video )
    {
        BOOL Found = FALSE;
        for( int i = 0 ; i < m_cStreams ; i++ )
        {
            GUID Major = GUID_NULL;
            put_CurrentStream( i );
            get_StreamType( &Major );
            if( Major == MEDIATYPE_Video )
            {
                Found = TRUE;
                break;
            }
        }
        if( !Found )
        {
            return VFW_E_INVALIDMEDIATYPE;
        }
    }

    hr = _InjectBitBuffer( );
    if( FAILED( hr ) )
    {
        DbgLog( ( LOG_ERROR, 1, "Could not inject BitBuffer" ) );

        // bombed, don't clear out stream count info
        //
        _ClearGraph( );
        return hr;
    }

    // get the full size image as it exists. this necessitates a memory copy to our buffer
    // get our helper interfaces now
    //
    CComQIPtr< IMediaControl, &IID_IMediaControl > pControl( m_pGraph );
    hr = pControl->Pause( );
    if( FAILED( hr ) )
    {
        DbgLog( ( LOG_ERROR, 1, "Could not pause graph" ) );

        // bombed, don't clear out stream count info
        //
        _ClearGraph( );
        return hr;
    }

    // we need to wait until this is fully paused, or when we issue
    // a seek, we'll really hose out

    OAFilterState FilterState;
    long Counter = 0;
    while( Counter++ < 600 )
    {
        hr = pControl->GetState( 50, &FilterState );
        if( FAILED( hr ) )
        {
            DbgLog((LOG_ERROR,1, TEXT( "MediaDet: Seek Complete, got an error %lx" ), hr ));
            Counter = 0; // clear counter so we see the real error
            break;
        }
        if( hr != VFW_S_STATE_INTERMEDIATE && FilterState == State_Paused )
        {
            DbgLog((LOG_TRACE,1, TEXT( "MediaDet: Seek Complete, state = %ld" ), FilterState ));
            hr = 0;
            Counter = 0;
            break;
        }
    }

    if( Counter != 0 )
    {
        return VFW_E_TIME_EXPIRED;
    }

    hr = _SeekGraphToTime( StreamTime );
    if( FAILED( hr ) )
    {
        DbgLog( ( LOG_ERROR, 1, "Could not seek graph" ) );

        _ClearGraph( );
        return hr;
    }

    return hr;
}

//############################################################################
// lookup filename must not exceed 31 characters in length.
// !!! change this to do something smart someday!
//############################################################################

void CMediaDet::_GetStorageFilename( WCHAR * In, WCHAR * Out )
{
    if( wcslen( In ) < 32 )
    {
        wcscpy( Out, In );
    }
    else
    {
        // the storage lookup name can only be 32 characters, copy the left
        // 10 characters and the right 22
        //
        for( int i = 0 ; i < 10 ; i++ )
        {
            Out[i] = In[i];
        }
        for( i = 0 ; i < 21 ; i++ )
        {
            Out[10+i] = In[wcslen(In)-22+i];
        }
    }
    for( unsigned int i = 0 ; i < wcslen( Out ) ; i++ )
    {
        bool okay = false;
        if( Out[i] >= '0' && Out[i] <= '9' )
        {
            okay = true;
        }
        else if( Out[i] >= 'A' && Out[i] <= 'Z' )
        {
            okay = true;
        }
        else if( Out[i] >= 'a' && Out[i] <= 'z' )
        {
            okay = true;
        }

        if( okay ) continue;

        switch( Out[i] )
        {
        case '\\': Out[i] = '-';
            break;
        case '.': Out[i] = '+';
            break;
        case ':': Out[i] = '@';
            break;
        case ' ': Out[i] = '-';
            break;
        default:
            Out[i] = 'A' + ( Out[i] % 26 );
            break;
        } // switch
    }
    Out[31] = 0;
}

//############################################################################
//
//############################################################################

HRESULT CMediaDet::_SeekGraphToTime( double StreamTime )
{
    if( !m_pGraph )
    {
        return E_FAIL;
    }

    if( StreamTime == m_dLastSeekTime )
    {
        return NOERROR;
    }

    HRESULT hr = 0;

    // get the full size image as it exists. this necessitates a memory copy to our buffer
    // get our helper interfaces now
    //
    CComQIPtr< IMediaControl, &IID_IMediaControl > pControl( m_pGraph );
    CComQIPtr< IMediaSeeking, &IID_IMediaSeeking > pSeeking( m_pGraph );

    // seek to the required time FIRST, then pause
    //
    REFERENCE_TIME Start = DoubleToRT( StreamTime );
    REFERENCE_TIME Stop = Start; // + UNITS;
    DbgLog((LOG_TRACE,1, TEXT( "MediaDet: Seeking to %ld ms" ), long( Start / 10000 ) ));
    hr = pSeeking->SetPositions( &Start, AM_SEEKING_AbsolutePositioning, &Stop, AM_SEEKING_AbsolutePositioning );
    if( FAILED( hr ) )
    {
        return hr;
    }

    OAFilterState FilterState;
    long Counter = 0;
    while( Counter++ < 600 )
    {
        hr = pControl->GetState( 50, &FilterState );
        if( FAILED( hr ) )
        {
            DbgLog((LOG_ERROR,1, TEXT( "MediaDet: Seek Complete, got an error %lx" ), hr ));
            Counter = 0; // clear counter so we see the real error
            break;
        }
        if( hr != VFW_S_STATE_INTERMEDIATE )
        {
            DbgLog((LOG_TRACE,1, TEXT( "MediaDet: Seek Complete, state = %ld" ), FilterState ));
            hr = 0;
            Counter = 0;
            break;
        }
    }

    if( Counter != 0 )
    {
        DbgLog((LOG_TRACE,1, TEXT( "MediaDet: ERROR! Could not seek to %ld ms" ), long( Start / 10000 ) ));
        return VFW_E_TIME_EXPIRED;
    }

    if( !FAILED( hr ) )
    {
        m_dLastSeekTime = StreamTime;
    }

    return hr;
}

 //############################################################################
//
//############################################################################
// IObjectWithSite::SetSite
// remember who our container is, for QueryService or other needs
STDMETHODIMP CMediaDet::SetSite(IUnknown *pUnkSite)
{
    // note: we cannot addref our site without creating a circle
    // luckily, it won't go away without releasing us first.
    m_punkSite = pUnkSite;

    if( m_punkSite && m_pGraph )
    {
        CComQIPtr< IObjectWithSite, &IID_IObjectWithSite > pOWS( m_pGraph );
        ASSERT( pOWS );
        if( pOWS )
        {
            pOWS->SetSite( (IServiceProvider *) this );
        }
    }

    return S_OK;
}

//############################################################################
//
//############################################################################
// IObjectWithSite::GetSite
// return an addrefed pointer to our containing object
STDMETHODIMP CMediaDet::GetSite(REFIID riid, void **ppvSite)
{
    if (m_punkSite)
        return m_punkSite->QueryInterface(riid, ppvSite);

    return E_NOINTERFACE;
}

//############################################################################
//
//############################################################################
// Forward QueryService calls up to the "real" host
STDMETHODIMP CMediaDet::QueryService(REFGUID guidService, REFIID riid, void **ppvObject)
{
    IServiceProvider *pSP;

    if (!m_punkSite)
        return E_NOINTERFACE;

    HRESULT hr = m_punkSite->QueryInterface(IID_IServiceProvider, (void **) &pSP);

    if (SUCCEEDED(hr)) {
        hr = pSP->QueryService(guidService, riid, ppvObject);
        pSP->Release();
    }

    return hr;
}

//############################################################################
//
//############################################################################

HRESULT CMediaDet::_GetCacheDirectoryName( WCHAR * pName )
{
    // already found, just copy it
    //
    if( gszCacheDirectoryName[0] )
    {
        wcscpy( pName, gszCacheDirectoryName );
        return NOERROR;
    }

    HRESULT hr = E_FAIL;
    USES_CONVERSION;
    typedef HRESULT (*SHGETFOLDERPATHW) (HWND hwndOwner,int nFolder,HANDLE hToken,DWORD dwFlags,LPWSTR pszPath);
    SHGETFOLDERPATHW pFuncW = NULL;
    TCHAR tBuffer[_MAX_PATH];
    tBuffer[0] = 0;

    // go find it by dynalinking
    //
    HMODULE h = LoadLibrary( TEXT("ShFolder.dll") );
    if( NULL != h )
    {
        pFuncW = (SHGETFOLDERPATHW) GetProcAddress( h, "SHGetFolderPathW" );
    }

loop:

    // if we couldn't get a function pointer, just call system directory
    //
    if( !pFuncW )
    {
        UINT i = GetSystemDirectory( tBuffer, _MAX_PATH - 1 );

        // if we got some characters, we did fine, otherwise, we're going to fail
        //
        if( i > 0 )
        {
            wcscpy( gszCacheDirectoryName, T2W( tBuffer ) );
            hr = NOERROR;
        }
    }
    else
    {
        hr = pFuncW( NULL, CSIDL_LOCAL_APPDATA, NULL, 0, gszCacheDirectoryName );
        // hr can be S_FALSE if the folder doesn't exist where it should!

        // didn't work? Try the roaming one!
        //
        if( hr != NOERROR )
        {
            hr = pFuncW( NULL, CSIDL_APPDATA, NULL, 0, gszCacheDirectoryName );
            // hr can be S_FALSE if the folder doesn't exist where it should!
        }

        if( hr != NOERROR )
        {
            // hr could be S_FALSE, or some other non-zero return code.
            // force it into an error if it wasn't an error, so it will at least try the
            // system directory
            //
            if( !FAILED( hr ) )
            {
                hr = E_FAIL;
            }

            // go back and try system directory?
            //
            pFuncW = NULL;
            goto loop;
        }
    }

    // if we succeeded, copy the name for future use
    //
    if( hr == NOERROR )
    {
        wcscpy( pName, gszCacheDirectoryName );
    }

    if( h )
    {
        FreeLibrary( h );
    }

    return hr;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\mediadet\stdafx.cpp ===
// Copyright (c) 1999  Microsoft Corporation.  All Rights Reserved.
// stdafx.cpp : source file that includes just the standard includes
//	mediadet.pch will be the pre-compiled header
//	stdafx.obj will contain the pre-compiled type information

#include <streams.h>
#include "stdafx.h"

// TODO: reference any additional headers you need in STDAFX.H
// and not in this file
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\mediadet\mediadet.h ===
// Copyright (c) 1999  Microsoft Corporation.  All Rights Reserved.
#ifndef __MEDIADET_H__
#define __MEDIADET_H__

extern const AMOVIESETUP_FILTER sudMediaDetFilter;
//extern const AMOVIESETUP_FILTER sudBitBucketFilter;

typedef struct _MDCacheFile
{
    double StreamLength;
    double StreamRate;
    GUID StreamType;
} MDCacheFile;

typedef struct _MDCache
{
    long Version;
    FILETIME FileTime;
    long Count;
    MDCacheFile CacheFile[1];
} MDCache;

class CMediaDetPin
    : public CBaseInputPin
{
    friend class CMediaDetFilter;
    CMediaDetFilter * m_pFilter;
    CCritSec m_Lock;
    LONG m_cPinRef;          // Pin's reference count

protected:

    GUID m_mtAccepted;

    CMediaDetPin( CMediaDetFilter * pFilter, HRESULT *phr, LPCWSTR Name );

    STDMETHODIMP_(ULONG) NonDelegatingAddRef();
    STDMETHODIMP_(ULONG) NonDelegatingRelease();

    // CBaseInputPin necessary overrides
    HRESULT CheckMediaType( const CMediaType *pmtIn );

    // CBasePin overrides
    HRESULT GetMediaType( int Pos, CMediaType * pMediaType );
    HRESULT CompleteConnect( IPin * pReceivePin );
};

class CMediaDetFilter
    : public CBaseFilter
    , public IMediaDetFilter
{
    friend class CMediaDetPin;
    typedef CGenericList <CMediaDetPin> CInputList;
    CInputList m_PinList;
    CCritSec m_Lock;

    CMediaDetFilter( TCHAR *pName, LPUNKNOWN pUnk, HRESULT *phr );
    ~CMediaDetFilter( );

protected:

    long m_nPins;

public:

    // needed to define IUnknown methods
    DECLARE_IUNKNOWN;
    
    // Function needed for the class factory
    static CUnknown * WINAPI CreateInstance( LPUNKNOWN pUnk, HRESULT *phr );

    // CBaseFilter overrides
    STDMETHODIMP NonDelegatingQueryInterface( REFIID, void ** );

    // IMediaDetFilter
    STDMETHODIMP put_AcceptedMediaType( long PinNo, GUID * pMajorType );
    STDMETHODIMP get_Length( long PinNo, double * pVal );
    STDMETHODIMP put_AcceptedMediaTypeB( long PinNo, BSTR MajorType );
    STDMETHODIMP get_PinCount( long * pVal );

    // CBaseFilter overrides
    CBasePin * GetPin( int n );
    CMediaDetPin * GetPin2( int n );
    int GetPinCount( );

    // random pin stuff
    void InitInputPinsList( );
    CMediaDetPin * CreateNextInputPin( );
    void DeleteInputPin( CMediaDetPin * pPin );
    int GetNumFreePins();
};

class CMediaDet
    : public CUnknown
    , public IMediaDet
    , public IServiceProvider
    , public IObjectWithSite
{
    WCHAR m_szFilename[_MAX_PATH];
    CComPtr< IBaseFilter > m_pFilter;
    CComPtr< IGraphBuilder > m_pGraph;
    CComPtr< IBaseFilter > m_pMediaDet;
    CComPtr< IBaseFilter > m_pBitBucketFilter;
    CComPtr< IBaseFilter > m_pBitRenderer;

    // storage stuff
    //
    MDCache * m_pCache;
    HANDLE m_hCacheMutex;
    HRESULT _ReadCacheFile( );
    HRESULT _WriteCacheFile( );
    void _FreeCacheMemory( );
    void _GetStorageFilename( WCHAR * In, WCHAR * Out );


    long m_nStream;
    long m_cStreams;
    bool m_bBitBucket;
    bool m_bAllowCached;

    // stuff for the frame grabbing
    //
    HDRAWDIB m_hDD;
    HDC m_hDC;
    HBITMAP m_hDib;
    HGDIOBJ m_hOld;
    char * m_pDibBits;
    long m_nDibWidth;
    long m_nDibHeight;
    double m_dLastSeekTime;

    HRESULT _SeekGraphToTime( double SeekTime );
    void _ClearOutEverything( ); // clear out filters, streams, and filename
    void _ClearGraphAndStreams( ); // clear out filters, plus streamcount info
    void _ClearGraph( ); // clear out any filters we've loaded
    HRESULT _Load( );
    HRESULT _InjectBitBuffer( );
    TCHAR * _GetKeyName( TCHAR * tSuffix );
    IPin * _GetNthStreamPin( long Stream );
    HRESULT _GetCacheDirectoryName( WCHAR * pPath );
    bool _IsLoaded( );

    CMediaDet( TCHAR *pName, LPUNKNOWN pUnk, HRESULT *phr );
    ~CMediaDet( );

public:

    // needed to define IUnknown methods
    DECLARE_IUNKNOWN;

    // CUnknown overrides
    STDMETHODIMP NonDelegatingQueryInterface( REFIID, void ** );

    // Function needed for the class factory
    static CUnknown * WINAPI CreateInstance( LPUNKNOWN pUnk, HRESULT *phr );

    STDMETHODIMP get_Filter( IUnknown* *pVal);
    STDMETHODIMP put_Filter( IUnknown* newVal);
    STDMETHODIMP get_Filename( BSTR *pVal);
    STDMETHODIMP put_Filename( BSTR newVal);
    STDMETHODIMP get_OutputStreams( long *pVal);
    STDMETHODIMP get_CurrentStream( long *pVal);
    STDMETHODIMP put_CurrentStream( long newVal);
    STDMETHODIMP get_StreamType( GUID *pVal);
    STDMETHODIMP get_StreamTypeB( BSTR *pVal);
    STDMETHODIMP get_StreamLength( double *pVal);
    STDMETHODIMP GetBitmapBits(double StreamTime, long * pBufferSize, char * pBuffer, long Width, long Height);
    STDMETHODIMP WriteBitmapBits(double StreamTime, long Width, long Height, BSTR Filename );
    STDMETHODIMP get_StreamMediaType(AM_MEDIA_TYPE *pVal);
    STDMETHODIMP GetSampleGrabber( ISampleGrabber ** ppVal );
    STDMETHODIMP get_FrameRate(double *pVal);
    STDMETHODIMP EnterBitmapGrabMode( double SeekTime );

    // --- IObjectWithSite methods
    // This interface is here so we can keep track of the context we're
    // living in.
    STDMETHODIMP    SetSite(IUnknown *pUnkSite);
    STDMETHODIMP    GetSite(REFIID riid, void **ppvSite);

    IUnknown *        m_punkSite;

    // IServiceProvider
    STDMETHODIMP QueryService(REFGUID guidService, REFIID riid, void **ppvObject);

};

//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------

class CBitBucketPin
    : public CRendererInputPin
{
    friend class CBitBucketFilter;

protected:

    CBitBucketPin( CBitBucketFilter * pFilter, HRESULT *phr, LPCWSTR Name );

    // CBasePin overrides
    HRESULT GetMediaType( int Pos, CMediaType * pMediaType );
};

class CBitBucketFilter
    : public CBaseRenderer
//    , public IBitBucket
{
    friend class CBitBucketPin;

    CMediaType m_mtIn;                  // Source connection media type
    char * m_pBuffer;

    CBitBucketFilter( TCHAR *pName, LPUNKNOWN pUnk, HRESULT *phr );
    ~CBitBucketFilter( );

public:

    // needed to define IUnknown methods
    DECLARE_IUNKNOWN;
    
    // Function needed for the class factory
    static CUnknown * WINAPI CreateInstance( LPUNKNOWN pUnk, HRESULT *phr );

    // CBaseFilter overrides
    STDMETHODIMP NonDelegatingQueryInterface( REFIID, void ** );

    // CBaseRenderer overrides
    STDMETHODIMP GetState(DWORD dwMSecs, FILTER_STATE *State);
    HRESULT DoRenderSample( IMediaSample *pMediaSample );
    HRESULT CheckMediaType( const CMediaType *pmtIn );
    HRESULT SetMediaType( const CMediaType *pmt );
    HRESULT Receive( IMediaSample * pMediaSample );
    virtual void OnReceiveFirstSample( IMediaSample * pSample ) 
    { 
        DoRenderSample( pSample ); 
    }
    virtual HRESULT ShouldDrawSampleNow( IMediaSample *pMediaSample, REFERENCE_TIME *pStartTime, REFERENCE_TIME *pEndTime )
    {
        return S_OK;
    }

    // IBitBucket
    STDMETHODIMP GetCurrentImage( long * pBufferSize, long * pDibImage );
};


#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\mediadet\mediadetf.cpp ===
// Copyright (c) 1999  Microsoft Corporation.  All Rights Reserved.
#include <streams.h>
#include "stdafx.h"
#include <qeditint.h>
#include <qedit.h>
#include "mediadet.h"
#include "..\util\conv.cxx"

CMediaDetPin::CMediaDetPin( CMediaDetFilter * pFilter, HRESULT * pHr, LPCWSTR Name )
    : CBaseInputPin( TEXT("MediaDetPin"), pFilter, &m_Lock, pHr, Name )
    , m_pFilter( pFilter )
    , m_mtAccepted( GUID_NULL )
    , m_cPinRef( 0 )
{
}

//
// NonDelegatingAddRef
//
// We need override this method so that we can do proper reference counting
// on each input pin. The CBasePin implementation of NonDelegatingAddRef
// refcounts the filter, but this won't work for use since we need to know
// when we should delete individual pins.
//
STDMETHODIMP_(ULONG) CMediaDetPin::NonDelegatingAddRef()
{
#ifdef DEBUG
    // Update the debug only variable maintained by the base class
    m_cRef++;
    ASSERT(m_cRef > 0);
#endif

    // Now update our reference count
    m_cPinRef++;
    ASSERT(m_cPinRef > 0);

    // If our reference count == 2, then someone besides the filter has referenced
    // us.  Therefore we need to AddRef the filter.  The reference on the filter will
    // be released when our ref count gets back to 1.
//    if (2 == m_cPinRef)
//	m_pFilter->AddRef();

    return m_cPinRef;
} /* CAudMixerInputPin::NonDelegatingAddRef */


//
// NonDelegatingRelease
//
// CAudMixerInputPin overrides this class so that we can take the pin out of our
// input pins list and delete it when its reference count drops to 1 and there
// is at least two free pins.
//
// Note that CreateNextInputPin holds a reference count on the pin so that
// when the count drops to 1, we know that no one else has the pin.
//
STDMETHODIMP_(ULONG) CMediaDetPin::NonDelegatingRelease()
{
#ifdef DEBUG
    // Update the debug only variable in CBasePin
    m_cRef--;
    ASSERT(m_cRef >= 0);
#endif

    // Now update our reference count
    m_cPinRef--;
    ASSERT(m_cPinRef >= 0);

    // if the reference count on the object has gone to one, remove
    // the pin from our output pins list and physically delete it
    // provided there are atealst two free pins in the list(including
    // this one)

    // Also, when the ref count drops to 0, it really means that our
    // filter that is holding one ref count has released it so we
    // should delete the pin as well.

    // since DeleteINputPin will wipe out "this"'s stack, we need
    // to save this off as a local variable.
    //
    ULONG ul = m_cPinRef;

    if ( 0 == ul )
    {
	m_pFilter->DeleteInputPin(this);
    }
    return ul;
} /* CAudMixerInputPin::NonDelegatingRelease */

HRESULT CMediaDetPin::CheckMediaType( const CMediaType * pmtIn )
{
    CheckPointer( pmtIn, E_POINTER );

    GUID Incoming = *pmtIn->Type( );
    if( Incoming == MEDIATYPE_Video )
    {
        if( *pmtIn->FormatType( ) != FORMAT_VideoInfo )
        {
            return -1;
        }
    }

    if( m_mtAccepted == GUID_NULL )
    {
        if( Incoming == MEDIATYPE_Video )
        {
            return 0;
        }
        if( Incoming == MEDIATYPE_Audio )
        {
            return 0;
        }
        return -1;
    }

    if( Incoming == m_mtAccepted )
    {
        return 0;
    }

    return -1;
}

HRESULT CMediaDetPin::GetMediaType( int Pos, CMediaType * pmt )
{
    if( Pos < 0 )
        return E_INVALIDARG;
    if( Pos > 1 )
        return VFW_S_NO_MORE_ITEMS;

    pmt->InitMediaType( );
    pmt->SetType( &m_mtAccepted );

    return NOERROR;
}

HRESULT CMediaDetPin::CompleteConnect( IPin *pReceivePin )
{
    ASSERT( m_Connected == pReceivePin );
    HRESULT hr = CBaseInputPin::CompleteConnect( pReceivePin );

    // Since this pin has been connected up, create another input pin
    // if there are no unconnected pins.
    if( SUCCEEDED( hr ) )
    {
        int n = m_pFilter->GetNumFreePins( );

        if( n == 0 )
        {
            // No unconnected pins left so spawn a new one
            CMediaDetPin * pInputPin = m_pFilter->CreateNextInputPin( );
            if( pInputPin != NULL )
            {
                m_pFilter->IncrementPinVersion();
            }
        }
    }

    return hr;
} /* CAudMixerInputPin::CompleteConnect */

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

CMediaDetFilter::CMediaDetFilter( TCHAR * pName, IUnknown * pUnk, HRESULT * pHr )
    : CBaseFilter( TEXT("MediaDetFilter"), pUnk, &m_Lock, CLSID_MediaDetFilter )
    , m_PinList( NAME("Input Pins list") )
{
    // Create a single input pin at this time and add it to the list
    InitInputPinsList();
    CMediaDetPin * pInputPin = CreateNextInputPin( );
}

CMediaDetFilter::~CMediaDetFilter( )
{
    InitInputPinsList( );
}

STDMETHODIMP CMediaDetFilter::NonDelegatingQueryInterface( REFIID i, void ** p )
{
    if( i == IID_IMediaDetFilter )
    {
        return GetInterface( (IMediaDetFilter*) this, p );
    }
    return CBaseFilter::NonDelegatingQueryInterface( i, p );
}

STDMETHODIMP CMediaDetFilter::put_AcceptedMediaType( long PinNo, GUID * pMajorType )
{
    CheckPointer( pMajorType, E_POINTER );
    CMediaDetPin * pPin = GetPin2( PinNo );
    pPin->m_mtAccepted = *pMajorType;
    return 0;
}

STDMETHODIMP CMediaDetFilter::put_AcceptedMediaTypeB( long PinNo, BSTR MajorTypeCLSID )
{
    GUID Guid = GUID_NULL;
    HRESULT hr = CLSIDFromString( MajorTypeCLSID, &Guid );
    if( FAILED( hr ) )
    {
        return hr;
    }
    CMediaDetPin * pPin = GetPin2( PinNo );
    pPin->m_mtAccepted = Guid;
    return 0;
}

STDMETHODIMP CMediaDetFilter::get_Length( long PinNo, double * pVal )
{
    // get the pin
    //
    CMediaDetPin * pPin = GetPin2( PinNo );
    CComPtr< IPin > pOtherPin;
    pPin->ConnectedTo( &pOtherPin );
    if( !pOtherPin )
    {
        *pVal = 0;
        return NOERROR;
    }
    CComQIPtr< IMediaSeeking, &IID_IMediaSeeking > pSeek( pOtherPin );
    if( !pSeek )
    {
        *pVal = 0;
        return NOERROR;
    }

    REFERENCE_TIME Duration = 0;
    HRESULT hr = pSeek->GetDuration( &Duration );
    if( FAILED( hr ) )
    {
        *pVal = 0;
        return hr;
    }

    *pVal = RTtoDouble( Duration );
    return 0;
}

//
// InitInputPinsList
//
void CMediaDetFilter::InitInputPinsList( )
{
    // Release all pins in the list and remove them from the list.
    //
    POSITION pos = m_PinList.GetHeadPosition( );
    while( pos )
    {
        CMediaDetPin * pInputPin = m_PinList.GetNext( pos );
        pInputPin->Release( );
    }
    m_nPins = 0;
    m_PinList.RemoveAll( );

} /* CMediaDetFilter::InitInputPinsList */

//
// CreateNextInputPin
//
CMediaDetPin * CMediaDetFilter::CreateNextInputPin( )
{
    DbgLog( ( LOG_TRACE, 1, TEXT("CMediaDetFilter: Create an input pin" ) ) );

    HRESULT hr = NOERROR;
    CMediaDetPin * pPin = new CMediaDetPin( this, &hr, L"InputPin" );

    if( FAILED( hr ) || pPin == NULL )
    {
        delete pPin;
        pPin = NULL;
    }
    else
    {
        pPin->AddRef( );
	m_nPins++;
	m_PinList.AddTail( pPin );
    }

    return pPin;
} /* CMediaDetFilter::CreateNextInputPin */

//
// DeleteInputPin
//
void CMediaDetFilter::DeleteInputPin( CMediaDetPin * pPin )
{
    // Iterate our input pin list looking for the specified pin.
    // If we find the pin, delete it and remove it from the list.
    POSITION pos = m_PinList.GetHeadPosition( );
    while( pos )
    {
        POSITION posold = pos;         // Remember this position
        CMediaDetPin * pInputPin = m_PinList.GetNext( pos );
        if( pInputPin == pPin )
        {
            m_PinList.Remove( posold );
            m_nPins--;
            IncrementPinVersion( );

            delete pPin;
            break;
        }
    }
} /* CMediaDetFilter::DeleteInputPin */

//
// GetNumFreePins
//
int CMediaDetFilter::GetNumFreePins( )
{
    // Iterate our pin list, counting pins that are not connected.
    int n = 0;
    POSITION pos = m_PinList.GetHeadPosition( );
    while( pos )
    {
        CMediaDetPin * pInputPin = m_PinList.GetNext( pos );
        if( !pInputPin->IsConnected( ) )
        {
            n++;
        }
    }
    return n;
} /* CMediaDetFilter::GetNumFreePins */

HRESULT CMediaDetFilter::get_PinCount( long * pVal )
{
    CheckPointer( pVal, E_POINTER );
    *pVal = m_nPins - 1;
    return NOERROR;
} /* CAudMixer::GetPinCount */

int CMediaDetFilter::GetPinCount( )
{
    return m_nPins;
}

//
// GetPin
//
CBasePin * CMediaDetFilter::GetPin( int n )
{
    CMediaDetPin * pInputPin = NULL;
    // Validate the position being asked for
    if( n < m_nPins && n >= 0 )
    {
        // Iterate through the list, returning the pin at position n+1
        POSITION pos = m_PinList.GetHeadPosition( );
        n++;        // Convert zero starting index to 1

        while( n )
        {
            pInputPin = m_PinList.GetNext( pos );
            n--;
        }
    }
    return pInputPin;
}

CMediaDetPin * CMediaDetFilter::GetPin2( int n )
{
    CMediaDetPin * pInputPin = NULL;
    // Validate the position being asked for
    if( n < m_nPins && n >= 0 )
    {
        // Iterate through the list, returning the pin at position n+1
        POSITION pos = m_PinList.GetHeadPosition( );
        n++;        // Convert zero starting index to 1

        while( n )
        {
            pInputPin = m_PinList.GetNext( pos );
            n--;
        }
    }
    return pInputPin;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\mediadet\stdafx.h ===
// Copyright (c) 1999  Microsoft Corporation.  All Rights Reserved.
// stdafx.h : include file for standard system include files,
//  or project specific include files that are used frequently, but
//      are changed infrequently
//

#if !defined(AFX_STDAFX_H__A1EEFB50_0D2D_11D3_920A_00C0DF10D434__INCLUDED_)
#define AFX_STDAFX_H__A1EEFB50_0D2D_11D3_920A_00C0DF10D434__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000


// Insert your headers here
#define WIN32_LEAN_AND_MEAN		// Exclude rarely-used stuff from Windows headers

#include <windows.h>
#include <atlbase.h>
#include <vfw.h>

// TODO: reference additional headers your program requires here

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_STDAFX_H__A1EEFB50_0D2D_11D3_920A_00C0DF10D434__INCLUDED_)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\mediadet\setup.cpp ===
// Copyright (c) 1999  Microsoft Corporation.  All Rights Reserved.
#include <streams.h>
#include "stdafx.h"
#include <qeditint.h>
#include <qedit.h>
#include "mediadet.h"
#ifdef MSDEV
    #include "qedit_i.c"
    #include <atlconv.cpp>
    // why the h*** this isn't defined already escapes me.
    struct IUnknown * __stdcall ATL::AtlComPtrAssign(struct IUnknown** pp, struct IUnknown* lp)
    {
	    if (lp != NULL)
		    lp->AddRef();
	    if (*pp)
		    (*pp)->Release();
	    *pp = lp;
	    return lp;
    }
#endif

const AMOVIESETUP_MEDIATYPE sudPinTypes =
{
    &MEDIATYPE_NULL,         // Major CLSID
    &MEDIASUBTYPE_NULL       // Minor type
};

const AMOVIESETUP_PIN psudPins[] =
{
    { L"Input",             // Pin's string name
      TRUE,                 // Is it rendered
      FALSE,                // Is it an output
      FALSE,                // Allowed none
      FALSE,                // Allowed many
      &CLSID_NULL,          // Connects to filter
      L"Output",            // Connects to pin
      1,                    // Number of types
      &sudPinTypes }        // Pin information
};

const AMOVIESETUP_FILTER sudMediaDetFilter =
{
    &CLSID_MediaDetFilter,             // CLSID of filter
    L"MediaDetFilter",    // Filter's name
    MERIT_DO_NOT_USE,       // Filter merit
    1,                      // Number of pins we start out with
    psudPins                // Pin information
};

/*
const AMOVIESETUP_FILTER sudBitBucketFilter =
{
    &CLSID_BitBucket,             // CLSID of filter
    L"BitBucket",    // Filter's name
    MERIT_DO_NOT_USE,       // Filter merit
    1,                      // Number of pins we start out with
    psudPins                // Pin information
};
*/

#ifdef FILTER_DLL
CFactoryTemplate g_Templates [ ] =
{
    { L"MediaDetFilter"
    , &CLSID_MediaDetFilter
    , CMediaDetFilter::CreateInstance
    , NULL
    , &sudMediaDetFilter }
/*    ,
    { L"BitBucket"
    , &CLSID_BitBucket
    , CBitBucketFilter::CreateInstance
    , NULL
    , &sudBitBucketFilter },
    { L"MediaDet"
    , &CLSID_MediaDet
    , CMediaDet::CreateInstance
    , NULL
    , NULL }
*/
};

int g_cTemplates = sizeof( g_Templates ) / sizeof( g_Templates[ 0 ] );

//
// DllRegisterServer
//
STDAPI DllRegisterServer( )
{
    return AMovieDllRegisterServer2( TRUE );
}


//
// DllUnregisterServer
//
STDAPI
DllUnregisterServer( )
{
    return AMovieDllRegisterServer2( FALSE );
}
#endif // ifdef FILTER_DLL

// Creator function for the class ID
//
CUnknown * WINAPI CMediaDetFilter::CreateInstance( LPUNKNOWN pUnk, HRESULT * phr )
{
    return new CMediaDetFilter( NAME( "MediaDetFilter" ), pUnk, phr );
}

// Creator function for the class ID
//
CUnknown * WINAPI CMediaDet::CreateInstance( LPUNKNOWN pUnk, HRESULT * phr )
{
    return new CMediaDet( NAME( "MediaDet" ), pUnk, phr );
}

// Creator function for the class ID
//
/*
CUnknown * WINAPI CBitBucketFilter::CreateInstance( LPUNKNOWN pUnk, HRESULT * phr )
{
    return new CBitBucketFilter( NAME( "BitBucket" ), pUnk, phr );
}
*/
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\medloc\medialoc.cpp ===
// Copyright (c) 1998 - 1999  Microsoft Corporation.  All Rights Reserved.
// MediaLocator.cpp : Implementation of CMediaLocator
#include "stdafx.h"
#include <qeditint.h>
#include <qedit.h>
#include "MediaLoc.h"
#ifdef FILTER_DLL
    #include "qedit_i.c"
#endif

#define MAX_FILTER_STRING 1024

const long DEFAULT_DIRECTORIES = 8;
TCHAR * gszRegistryLoc = TEXT("Software\\Microsoft\\ActiveMovie\\MediaLocator");

CMediaLocator::CMediaLocator( )
{
    m_bUseLocal = FALSE;

    HKEY hKey = NULL;

    // create the key just to make sure it's there
    //
    RegCreateKey(
        HKEY_CURRENT_USER,
        gszRegistryLoc,
        &hKey );

    if( hKey )
    {
        RegCloseKey( hKey );
    }

    // now open the key
    //
    long Result = RegOpenKeyEx(
        HKEY_CURRENT_USER,
        gszRegistryLoc ,
        0, // reserved options
        KEY_READ | KEY_WRITE, // access
        &hKey );

    if( Result == ERROR_SUCCESS )
    {
        // go find out if we're supposed to look locally
        //
        DWORD Size = sizeof( long );
        DWORD Type = REG_DWORD;
        long UseLocal = 0;
        Result = RegQueryValueEx(
            hKey,
            TEXT("UseLocal"),
            0, // reserved
            &Type,
            (BYTE*) &UseLocal,
            &Size );
        if( Result == ERROR_SUCCESS )
        {
            m_bUseLocal = UseLocal;
        }

        RegCloseKey( hKey );

    }
}

/////////////////////////////////////////////////////////////////////////////
// FindMediaFile - try to find the media file using some cacheing mechanism
// Use the registry to hold the caching directories. A return value of S_FALSE
// means the file was replaced with another, a return code of E_FAIL means
// the file couldn't be found anywhere.
/////////////////////////////////////////////////////////////////////////////
//
HRESULT CMediaLocator::FindMediaFile
    ( BSTR Input, BSTR FilterString, BSTR * pOutput, long ValidateFlags )
{
    CheckPointer( pOutput, E_POINTER );

    BOOL UseLocal = ( ( ValidateFlags & SFN_VALIDATEF_USELOCAL ) == SFN_VALIDATEF_USELOCAL );
    BOOL WantUI = ( ( ValidateFlags & SFN_VALIDATEF_POPUP ) == SFN_VALIDATEF_POPUP );
    BOOL WarnReplace = ( ( ValidateFlags & SFN_VALIDATEF_TELLME ) == SFN_VALIDATEF_TELLME );
    BOOL DontFind = ( ( ValidateFlags & SFN_VALIDATEF_NOFIND ) == SFN_VALIDATEF_NOFIND );
    UseLocal |= m_bUseLocal ;

    // reset this now
    //
    *pOutput = NULL;

    // !!! what if the incoming file is not on a disk, like
    // 1) On the web
    // 2) On external hardware!

    USES_CONVERSION;
    TCHAR * tInput = W2T( Input );
    BOOL FoundFileAsSpecified = FALSE;

    HANDLE hcf = CreateFile(
        tInput,
        GENERIC_READ, // access
        FILE_SHARE_READ, // share mode
        NULL, // security
        OPEN_EXISTING, // creation disposition
        0, // flags
        NULL );

    if( INVALID_HANDLE_VALUE != hcf )
    {
        FoundFileAsSpecified = TRUE;
        CloseHandle( hcf );
    }

    // if we found the file where the user asked and they didn't specify use local
    // then return
    //
    if( FoundFileAsSpecified )
    {
        if( !UseLocal )
        {
            return NOERROR;
        }
        else
        {
            // they specified use local and it is local
            //
            if( tInput[0] != '\\' || tInput[1] != '\\' )
            {
                return NOERROR;
            }
        }
    }

    // cut up the filename into little bits
    //
    TCHAR Dir[_MAX_PATH];
    TCHAR Path[_MAX_PATH];
    TCHAR File[_MAX_PATH];
    TCHAR Ext[_MAX_PATH];
    _tsplitpath( tInput, Dir, Path, File, Ext );
    TCHAR tNewFileName[_MAX_PATH];

    // can't find nothing
    //
    if( wcslen( Input ) == 0 )
    {
        return E_INVALIDARG;
    }

    // where did we look last?
    //
    HKEY hKey = NULL;
    long Result = RegOpenKeyEx(
        HKEY_CURRENT_USER,
        gszRegistryLoc ,
        0, // reserved options
        KEY_READ | KEY_WRITE, // access
        &hKey );

    if( Result != ERROR_SUCCESS )
    {
        return MAKE_HRESULT( 1, 4, Result );
    }

    // find out how many cached directories to look in
    //
    long DirectoryCount = DEFAULT_DIRECTORIES;
    DWORD Size = sizeof( long );
    DWORD Type = REG_DWORD;
    Result = RegQueryValueEx(
        hKey,
        TEXT("Directories"),
        0, // reserved
        &Type,
        (BYTE*) &DirectoryCount,
        &Size );

    if( Result != ERROR_SUCCESS )
    {
        // if we don't have a count, default to something
        //
        DirectoryCount = DEFAULT_DIRECTORIES;
    }

    while( !DontFind )
    {
        // look in each directory
        //
        bool foundit = false;
        for( long i = 0 ; i < DirectoryCount ; i++ )
        {
            TCHAR ValueName[256];
            wsprintf( ValueName, TEXT("Directory%2.2ld"), i );
            TCHAR DirectoryName[256];
            Size = sizeof(DirectoryName);
            Type = REG_SZ;

            Result = RegQueryValueEx(
                hKey,
                ValueName,
                0, // reserved
                &Type,
                (BYTE*) DirectoryName,
                &Size );

            if( Result != ERROR_SUCCESS )
            {
                // didn't find it, must not exist, do the next one
                //
                continue;
            }

            // found a directory

            // build up a new filename
            //
            _tcscpy( tNewFileName, DirectoryName );
            _tcscat( tNewFileName, File );
            _tcscat( tNewFileName, Ext );

            // if UseLocal is set, and this directory is on the net, then
            // ignore it
            //
            if( UseLocal  )
            {
                if( tNewFileName[0] == '\\' && tNewFileName[1] == '\\' )
                {
                    continue;
                }
            }

            HANDLE h = CreateFile(
                tNewFileName,
                GENERIC_READ, // access
                FILE_SHARE_READ, // share mode
                NULL, // security
                OPEN_EXISTING, // creation disposition
                0, // flags
                NULL );

            if( INVALID_HANDLE_VALUE == h )
            {
                // didn't find it, continue
                //
                continue;
            }

            // found the directory it was in, break;
            //
            CloseHandle( h );
            foundit = true;
            break;
        }

        // found it!
        //
        if( foundit )
        {
            AddOneToDirectoryCache( hKey, i );
            *pOutput = SysAllocString( T2W(tNewFileName) );
            HRESULT hr = *pOutput ? S_FALSE : E_OUTOFMEMORY;
            if( WarnReplace )
            {
                ShowWarnReplace( Input, *pOutput );
            }
            RegCloseKey( hKey );
            hKey = NULL;
            return hr;
        }

        // we didn't find it. :-(

        // if we got here, we found it where it was supposed to be, but
        // we tried to look for it locally instead. Return we found it.
        //
        if( FoundFileAsSpecified )
        {
            RegCloseKey( hKey );
            return NOERROR;
        }

        if( !UseLocal )
        {
            break; // out of while loop
        }
        UseLocal = FALSE;

    } // while 1 ( UseLocal will break us out )

    // it's REALLY not around!

    // if we don't want UI, just signal we couldn't find it
    //
    if( !WantUI )
    {
        // we return S_FALSE to signify the file was replaced, and
        // a failure code to signify we couldn't find it period.
        //
        RegCloseKey( hKey );
        hKey = NULL;
        return E_FAIL;
    }

    // bring up a UI and try to go find it
    //
    OPENFILENAME ofn;
    ZeroMemory( &ofn, sizeof( ofn ) );

    // we need to find two double-nulls in a row if they really specified a
    // filter string
    TCHAR * tFilter = NULL;
    TCHAR ttFilter[MAX_FILTER_STRING];

    if( FilterString )
    {
        long FilterLen = wcslen( FilterString );
        if( FilterLen < 2 )
        {
            return E_INVALIDARG;
        }

        // look for two nulls
        //
        for( int i = 0 ; i < MAX_FILTER_STRING - 1 ; i++ )
        {
            // found it
            //
            if( FilterString[i] == 0 && FilterString[i+1] == 0 )
            {
                break;
            }
        }
	if( i >= MAX_FILTER_STRING - 1 )
	{
	    return E_INVALIDARG;
	}

#ifndef UNICODE
        // copy it to a shorty string, with two nulls
        //
        WideCharToMultiByte( CP_ACP, 0, FilterString, i + 2, ttFilter, MAX_FILTER_STRING, NULL, NULL );
#else if
        // need to copy both the extra zero's as well, or the filter string will fail
        memcpy(ttFilter, FilterString, 2*(i+2) );
#endif

        // point to it
        //
        tFilter = ttFilter;
    }

    TCHAR tReturnName[_MAX_PATH];
    _tcscpy( tReturnName, File );
    _tcscat( tReturnName, Ext );

    // fashion a title so the user knows what file to find
    //
    HINSTANCE hinst = _Module.GetModuleInstance( );

    TCHAR tErrorMsg[256];
    int ReadIn = LoadString( hinst, IDS_CANNOT_FIND_FILE, tErrorMsg, 256 );
    TCHAR tTitle[_MAX_PATH + 256];
    if( ReadIn )
    {
        _tcscpy( tTitle, tErrorMsg );
        _tcscat( tTitle, tReturnName );
        ofn.lpstrTitle = tTitle;
    }
    else
    {
        ReadIn = GetLastError( );
    }

    ofn.lStructSize = sizeof( ofn );
    ofn.hwndOwner = NULL;
    ofn.hInstance = _Module.GetModuleInstance( );
    ofn.lpstrFilter = tFilter;
    ofn.lpstrFile = tReturnName;
    ofn.nMaxFile = _MAX_PATH;
    ofn.Flags = OFN_ENABLESIZING | OFN_EXPLORER | OFN_FILEMUSTEXIST | OFN_LONGNAMES;
    long r = GetOpenFileName( &ofn );
    if( r == 0 )
    {
        // not a very good error code, is it?
        //
        RegCloseKey( hKey );
        hKey = NULL;
        return E_FAIL;
    }

    _tsplitpath( ofn.lpstrFile, Dir, Path, File, Ext );
    _tcscat( Dir, Path );

    long i = GetLeastUsedDirectory( hKey, DirectoryCount );
    MakeSureDirectoryExists( hKey, i );
    ReplaceDirectoryPath( hKey, i, Dir );

    WCHAR * wNewFile = T2W( ofn.lpstrFile );

    *pOutput = SysAllocString( wNewFile );
    HRESULT hr = *pOutput ? S_FALSE : E_OUTOFMEMORY;

    RegCloseKey( hKey );
    hKey = NULL;

    return hr;
}

void CMediaLocator::AddOneToDirectoryCache( HKEY hKey, int WhichDirectory )
{
    DWORD Size = sizeof( long );
    DWORD Type = REG_DWORD;
    long UsageCount = 0;
    TCHAR ValueName[25];
    wsprintf( ValueName, TEXT("Dir%2.2ldUses"), WhichDirectory );

    long Result = RegQueryValueEx(
        hKey,
        ValueName,
        0, // reserved
        &Type,
        (BYTE*) &UsageCount,
        &Size );

    if( Result != ERROR_SUCCESS )
    {
        return;
    }

    UsageCount++;

    RegSetValueEx(
        hKey,
        ValueName,
        0, // reserverd
        REG_DWORD,
        (BYTE*) &UsageCount,
        sizeof( UsageCount ) );

}

void CMediaLocator::MakeSureDirectoryExists( HKEY hKey, int WhichDirectory )
{
    return;
}

int CMediaLocator::GetLeastUsedDirectory( HKEY hKey, int DirectoryCount )
{
    long Min = -1;
    long WhichDir = 0;

    long i;
    for( i = 0 ; i < DirectoryCount ; i++ )
    {
        TCHAR ValueName[25];
        wsprintf( ValueName, TEXT("Dir%2.2ldUses"), i );
        DWORD Size = sizeof( long );
        DWORD Type = REG_DWORD;
        long UsageCount = 0;

        long Result = RegQueryValueEx(
                hKey,
                ValueName,
                0, // reserved
                &Type,
                (BYTE*) &UsageCount,
                &Size );

        if( Result != ERROR_SUCCESS )
        {
            // since this key didn't exist yet, it's certainly not
            // used, so we can return "i".
            //
            return i;
        }

        if( i == 0 )
        {
            Min = UsageCount;
        }

        if( UsageCount < Min )
        {
            Min = UsageCount;
            WhichDir = i;
        }

    } // for

    return WhichDir;
}

void CMediaLocator::ReplaceDirectoryPath( HKEY hKey, int WhichDirectory, TCHAR * Path )
{
    TCHAR ValueName[256];
    wsprintf( ValueName, TEXT("Directory%2.2ld"), WhichDirectory );
    DWORD Size = sizeof(TCHAR) * (lstrlen( Path ) + 1);
    DWORD Type = REG_SZ;

    long Result = RegSetValueEx(
            hKey,
            ValueName,
            0, // reserved
            REG_SZ,
            (BYTE*) Path,
            Size );

    long UsageCount = 0;
    wsprintf( ValueName, TEXT("Dir%2.2ldUses"), WhichDirectory );

    RegSetValueEx(
        hKey,
        ValueName,
        0, // reserverd
        REG_DWORD,
        (BYTE*) &UsageCount,
        sizeof( UsageCount ) );
}

STDMETHODIMP CMediaLocator::AddFoundLocation( BSTR Dir )
{
    // where did we look last?
    //
    HKEY hKey = NULL;
    long Result = RegOpenKeyEx(
        HKEY_CURRENT_USER,
        gszRegistryLoc ,
        0, // reserved options
        KEY_READ | KEY_WRITE, // access
        &hKey );

    if( Result != ERROR_SUCCESS )
    {
        return MAKE_HRESULT( 1, 4, Result );
    }

    // find out how many cached directories to look in
    //
    long DirectoryCount = DEFAULT_DIRECTORIES;
    DWORD Size = sizeof( long );
    DWORD Type = REG_DWORD;
    Result = RegQueryValueEx(
        hKey,
        TEXT("Directories"),
        0, // reserved
        &Type,
        (BYTE*) &DirectoryCount,
        &Size );

    if( Result != ERROR_SUCCESS )
    {
        // if we don't have a count, default to something
        //
        DirectoryCount = DEFAULT_DIRECTORIES;
    }

    USES_CONVERSION;
    TCHAR * tDir = W2T( Dir );
    long i = GetLeastUsedDirectory( hKey, DirectoryCount );
    MakeSureDirectoryExists( hKey, i );
    ReplaceDirectoryPath( hKey, i, tDir );

    RegCloseKey( hKey );

    return NOERROR;
}

void CMediaLocator::ShowWarnReplace( WCHAR * pOriginal, WCHAR * pReplaced )
{
    CAutoLock Lock( &m_Lock );

    HINSTANCE h = _Module.GetModuleInstance( );

    wcscpy( CMediaLocator::szShowWarnOriginal, pOriginal );
    wcscpy( CMediaLocator::szShowWarnReplaced, pReplaced );

    HWND hDlg = CreateDialog( h, MAKEINTRESOURCE( IDD_MEDLOC_DIALOG ), NULL, DlgProc );
    if( !hDlg )
    {
        return;
    }

    static int cx = 0;
    static int cy = 0;
    cx += 20;
    cy += 15;

    if( cx > 600 ) cx -= 600;
    if( cy > 400 ) cy -= 400;

    ShowWindow( hDlg, SW_SHOW );

    SetWindowPos( hDlg, NULL, cx, cy, 0, 0, SWP_NOSIZE | SWP_NOZORDER );

    USES_CONVERSION;
    TCHAR * tOriginal = W2T( CMediaLocator::szShowWarnOriginal );
    TCHAR * tReplaced = W2T( CMediaLocator::szShowWarnReplaced );

    SetDlgItemText( hDlg, IDC_ORIGINAL, tOriginal );
    SetDlgItemText( hDlg, IDC_FOUND, tReplaced );

    DWORD ThreadId = 0;
    HANDLE NewThread = CreateThread( NULL, 0, ThreadProc, (LPVOID) hDlg, 0, &ThreadId );
    if( !NewThread )
    {
        EndDialog( hDlg, TRUE );
    }
    else
    {
        SetThreadPriority( NewThread, THREAD_PRIORITY_BELOW_NORMAL );
    }

    // by the time this dialog call gets back, it will have used the values
    // stored in the static vars and they are free to be used again
}

WCHAR CMediaLocator::szShowWarnOriginal[_MAX_PATH];
WCHAR CMediaLocator::szShowWarnReplaced[_MAX_PATH];

INT_PTR CALLBACK CMediaLocator::DlgProc( HWND h, UINT i, WPARAM w, LPARAM l )
{
    switch( i )
    {
    case WM_INITDIALOG:
        {
        return TRUE;
        }
    }
    return FALSE;
}

DWORD WINAPI CMediaLocator::ThreadProc( LPVOID lpParam )
{
    Sleep( 3000 );
    EndDialog( (HWND) lpParam, TRUE );
    return 0;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\medloc\medialoc.h ===
// Copyright (c) 1998 - 1999  Microsoft Corporation.  All Rights Reserved.
// MediaLocator.h : Declaration of the CMediaLocator

#ifndef __MEDIALOCATOR_H_
#define __MEDIALOCATOR_H_

#include "resource.h"       // main symbols

/////////////////////////////////////////////////////////////////////////////
// CMediaLocator
class ATL_NO_VTABLE CMediaLocator : 
	public CComObjectRootEx<CComSingleThreadModel>,
	public CComCoClass<CMediaLocator, &CLSID_MediaLocator>,
	public IDispatchImpl<IMediaLocator, &IID_IMediaLocator, &LIBID_DexterLib>
{
    CCritSec m_Lock;
    BOOL m_bUseLocal;
    static WCHAR szShowWarnOriginal[_MAX_PATH];
    static WCHAR szShowWarnReplaced[_MAX_PATH];
    static INT_PTR CALLBACK DlgProc( HWND h, UINT i, WPARAM w, LPARAM l );
    static DWORD WINAPI ThreadProc( LPVOID lpParam );

public:
	CMediaLocator();

DECLARE_REGISTRY_RESOURCEID(IDR_MEDIALOCATOR)

DECLARE_PROTECT_FINAL_CONSTRUCT()

BEGIN_COM_MAP(CMediaLocator)
	COM_INTERFACE_ENTRY(IMediaLocator)
	COM_INTERFACE_ENTRY(IUnknown)
END_COM_MAP()

    void AddOneToDirectoryCache( HKEY h, int WhichDirectory );
    void MakeSureDirectoryExists( HKEY h, int WhichDirectory );
    int  GetLeastUsedDirectory( HKEY h, int DirectoryCount );
    void ReplaceDirectoryPath( HKEY h, int WhichDirectory, TCHAR * Path );
    void ShowWarnReplace( WCHAR * pOriginal, WCHAR * pReplaced );

// IMediaLocator
public:
    STDMETHODIMP FindMediaFile( BSTR Input, BSTR FilterString, BSTR * pOutput, long Flags );
    STDMETHODIMP AddFoundLocation( BSTR DirectoryName );
};

#endif //__MEDIALOCATOR_H_
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\medloc\stdafx.cpp ===
// Copyright (c) 1998 - 1999  Microsoft Corporation.  All Rights Reserved.
// stdafx.cpp : source file that includes just the standard includes
//  stdafx.pch will be the pre-compiled header
//  stdafx.obj will contain the pre-compiled type information

#include "stdafx.h"

#ifdef FILTER_DLL
    #ifdef _ATL_STATIC_REGISTRY
        #include <statreg.h>
        #include <statreg.cpp>
    #endif
    #include <atlimpl.cpp>
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\medloc\resource.h ===
// Copyright (c) 1998 - 1999  Microsoft Corporation.  All Rights Reserved.
//{{NO_DEPENDENCIES}}
// Microsoft Developer Studio generated include file.
// Used by medloc.rc
//
#define IDD_MEDLOC_DIALOG               903
#define IDC_ORIGINAL                    904
#define IDC_FOUND                       905
#define IDR_MEDIALOCATOR                901
#define IDS_CANNOT_FIND_FILE            902

// Next default values for new objects
// 
#ifdef APSTUDIO_INVOKED
#ifndef APSTUDIO_READONLY_SYMBOLS
#define _APS_NEXT_RESOURCE_VALUE        202
#define _APS_NEXT_COMMAND_VALUE         32768
#define _APS_NEXT_CONTROL_VALUE         202
#define _APS_NEXT_SYMED_VALUE           102
#endif
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\jpeglib\piint.c ===
/***************************************************************************
*
*                INTEL Corporation Proprietary Information  
*
*      
*                  Copyright (c) 1996 Intel Corporation.
*                         All rights reserved.
*
***************************************************************************
			AUTHOR:  Kumar Balasubramanian 
***************************************************************************

** Pentium version of the "integer LLM mode" within IJG decompressor code.
** The following is a non-MMX Pentium implementation of the integer slow mode
** IDCT within the IJG code.
*/

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */

#ifdef DCT_ISLOW_SUPPORTED

#ifndef _X86_

GLOBAL(void)
pidct8x8llm (JCOEFPTR inptr, short *quantptr, short *wsptr,
		 JSAMPARRAY output_buf, JDIMENSION output_col, JSAMPLE *range_limit )
{
}

#else

/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif



#if BITS_IN_JSAMPLE == 8
#define CONST_BITS  13
#define PASS1_BITS  2
#else
#define CONST_BITS  13
#define PASS1_BITS  1		/* lose a little precision to avoid overflow */
#endif

/* Define the constants for the case BITS_IN_JSAMPLE = 8 */


static const INT32 const_0_2986	=	0x0000098E ;
static const INT32 const_0_3901	=	0x0fffff384;
static const INT32 const_0_54119	=	0x00001151;
static const INT32 const_0_7653	=	0x0000187E;
static const INT32 const_0_899	=	0x0ffffe333;
static const INT32 const_1_175	=	0x000025a1;
static const INT32 const_1_501	=	0x0000300b;
static const INT32 const_1_8477	=	0x0ffffc4df;
static const INT32 const_1_961	=	0x0ffffc13b;
static const INT32 const_2_053	=	0x000041b3;
static const INT32 const_2_562	=	0x0ffffadfd;
static const INT32 const_3_072	=	0x00006254;

static const INT32 const_round	=	0x00000400;
static const INT32 const_round_row	=	0x00020000;
static const INT32 const_mask		=	0x000003ff;


/*
 * Perform dequantization and inverse DCT on one block of coefficients.
 */

GLOBAL(void)
pidct8x8llm (JCOEFPTR inptr, short *quantptr, short *wsptr,
		 JSAMPARRAY output_buf, JDIMENSION output_col, JSAMPLE *range_limit )
{

INT32   locdwinptr, locdwqptr, locdwwsptr, locdwtmp0, locdwtmp1 ;
INT32   locdwtmp2, locdwtmp3, locdwtmp00, locdwtmp01, locdwtmp02 ;
INT32   locdwtmp03, locdwtmp10, locdwtmp11, locdwtmp12 ;
INT32   locdwtmp13, locdwcounter, locdwrowctr ;	



// Inline assembly to do the IDCT and store the result */

__asm {

mov		esi, inptr	; point to start of source
mov		edi, quantptr	;

mov		eax, wsptr
mov		locdwinptr, esi	; point to start of source

mov		locdwqptr, edi	;
mov		locdwwsptr, eax

mov	locdwcounter, 8
mov		eax, [esi]		; warm up the cache

mov		ebx, [esi+32]
mov		ecx, [esi+64]

mov		edx, [esi+96]
mov		eax, [edi]

mov		ebx, [edi+32]
mov		ecx, [edi+64]

mov		edx, [edi+96]

;; 1D-IDCT of all the eight columns
idct_column:

mov		esi, locdwinptr	; point to start of source
mov		edi, locdwqptr		;

;; do the even part

mov		ax, [esi+16*2]
mov		bx, [edi+16*2]

shl		eax, 16		; sign extend the i/p
mov		cx, [esi+16*6]

sar		eax, 16
mov		dx, [edi+16*6]

shl		ebx, 16		; sign extend the quant factor

sar		ebx, 16

imul	eax, ebx	; dequantized C2 = z2

shl		ecx, 16

sar		ecx, 16

shl		edx, 16

sar		edx, 16

imul	ecx, edx	; dequantized C6 = z3

mov		ebx, eax	; copy of z2

imul	eax, const_0_7653

add		ebx, ecx	; z2 + z3

imul	ecx, const_1_8477

imul	ebx, const_0_54119	; z1

mov		dx, [edi+16*4]	; quant factor for C4
add		ecx, ebx	; tmp2

add		eax, ebx	; tmp3
mov		locdwtmp2, ecx

mov		locdwtmp3, eax

mov		cx, [esi+16*4]	; C4
mov		ax, [esi+16*0]	; C0

mov		bx, [edi+16*0]	; quant factor for C0

movsx	edx, dx

movsx	ecx, cx

movsx	eax, ax

movsx	ebx, bx

imul	ecx, edx	; dequantize C4 = z3

imul	eax, ebx	; dequantize C0 = z2

mov		edx, ecx	; copy of z3
add		ecx, eax	; z2 + z3

shl		ecx, 13		; tmp0
sub		eax, edx	; z2 - z3

shl		eax, 13		; tmp1
mov		ebx, ecx	; copy of tmp0

add		ecx, locdwtmp3	; tmp10
mov		edx, eax	; copy of tmp1

add		eax, locdwtmp2	; tmp11
mov		locdwtmp00, ecx

sub		ebx, locdwtmp3	; tmp13
mov		locdwtmp01, eax

sub		edx, locdwtmp2	; tmp12
mov		locdwtmp03, ebx

mov		ax, [esi+16*7]	; C7 for the odd part
mov		locdwtmp02, edx

mov		bx, [edi+16*7]	; quant factor for C7

;; now do the odd part

shl		eax, 16
mov		cx, [esi+16*3]

sar		eax, 16
mov		dx, [edi+16*3]

shl		ebx, 16

sar		ebx, 16

imul	eax, ebx		; dequantized C7 = tmp0

shl		ecx, 16

sar		ecx, 16

shl		edx, 16

sar		edx, 16
mov		bx, [esi+16*1]

imul	ecx, edx		; dequantized C3 = tmp2

shl		ebx, 16
mov		dx, [edi+16*1]

sar		ebx, 16

shl		edx, 16

sar		edx, 16

imul	ebx, edx		; dequantized C1 = tmp3

mov		locdwtmp0, eax
mov		locdwtmp2, ecx

mov		ax, [esi+16*5]
mov		dx, [edi+16*5]

shl		eax, 16

sar		eax, 16

shl		edx, 16

sar		edx, 16

imul	eax, edx	; dequantized C5 = tmp1

imul	ecx, const_3_072	; tmp2

mov		locdwtmp3, ebx
mov		edx, locdwtmp0

imul	ebx, const_1_501	; tmp3

imul	edx, const_0_2986	; tmp0

mov		locdwtmp1, eax	; store tmp1
mov		locdwtmp10, edx

imul	eax, const_2_053	; tmp1

mov		locdwtmp11, eax
mov		locdwtmp12, ecx

mov		locdwtmp13, ebx
mov		eax, locdwtmp0

mov		ebx, locdwtmp1
mov		ecx, eax

mov		edx, ebx
add		eax, locdwtmp3	; z1

add		ebx, locdwtmp3	; z4
add		ecx, locdwtmp2	; z3

add		edx, locdwtmp2	; z2
mov		esi, ecx	; copy of z3

imul	eax,  const_0_899	; z1

imul	edx,  const_2_562	; z2

add		esi, ebx	; z3 + z4

imul	esi,  const_1_175	; z5

imul	ecx,  const_1_961	; z3

imul	ebx,  const_0_3901	; z4

add		ecx, esi	; z3
add		ebx, esi	; z4

mov		esi, eax	; copy of z1
add		eax, ecx	; z1 + z3

add		esi, ebx	; z1 + z4
add		ecx, edx	; z3 + z2

add		edx, ebx	; z2 + z4
add		eax, locdwtmp10		; tmp0

add		edx, locdwtmp11		; tmp1
add		ecx, locdwtmp12		; tmp2

add		esi, locdwtmp13		; tmp3
mov		ebx, locdwtmp03

sub		ebx, eax			; w4
add		eax, locdwtmp03		; w3

add		ebx,  const_round
mov		edi, locdwwsptr		; keep in mind that wsptr stores 32 bit values

sar		ebx, 11				; So store/update the pointer accordingly
add		eax,  const_round

sar		eax, 11
mov		[edi+32*4], ebx

mov		[edi+32*3], eax
mov		ebx, locdwtmp02

mov		eax, locdwtmp01
sub		ebx, edx			; w5

add		edx, locdwtmp02		; w2
sub		eax, ecx			; w6

add		ecx, locdwtmp01		; w1
add		ebx,  const_round

sar		ebx, 11
add		eax,  const_round

sar		eax, 11
add		edx,  const_round

add		ecx,  const_round
mov		[edi+32*5], ebx

sar		edx, 11
mov		[edi+32*6], eax

sar		ecx, 11
mov		[edi+32*2], edx

mov		eax, locdwtmp00
mov		[edi+32*1], ecx

mov		ebx, eax
sub		eax, esi			; w7

add		ebx, esi			; w0
add		eax, const_round

sar		eax, 11
add		ebx, const_round

sar		ebx, 11
mov		[edi+32*7], eax

mov		[edi+32*0], ebx
mov		eax, locdwcounter

add		locdwinptr, 2
add		locdwwsptr, 4		; wsptr stores 32 bit quantities

add		locdwqptr, 2
dec		eax

mov		locdwcounter, eax
jnz		idct_column

;; End of 1D-idct of all the columns

;; get ready for the 1D-idct of the rows

mov		esi, wsptr
mov		locdwcounter, 8

mov		locdwrowctr, 0
mov		locdwwsptr, esi


;; 1D-IDCT of all the eight rows
idct_row:

mov		esi, locdwwsptr	; point to start of source
mov		edi, output_buf	

add		edi, locdwrowctr
mov		edi, [edi]

add		locdwrowctr, 4
add		edi, output_col	; this is the dest start addr for this row


;; do the even part

mov		eax, [esi+4*2]
mov		ecx, [esi+4*6]

mov		ebx, eax	; copy of z2
mov		edx, [edi]	; warm up the cache for writing this output row

imul	eax, const_0_7653

add		ebx, ecx	; z2 + z3

imul	ecx,  const_1_8477

imul	ebx,  const_0_54119	; z1

add		ecx, ebx	; tmp2
add		eax, ebx	; tmp3

mov		locdwtmp2, ecx
mov		locdwtmp3, eax

mov		ecx, [esi+4*4]	; C4
mov		eax, [esi+4*0]	; C0

mov		edx, ecx	; copy of z3

add		ecx, eax	; z2 + z3
sub		eax, edx	; z2 - z3

shl		ecx, 13		; tmp0

shl		eax, 13		; tmp1
mov		ebx, ecx	; copy of tmp0

add		ecx, locdwtmp3	; tmp10
mov		edx, eax	; copy of tmp1

add		eax, locdwtmp2	; tmp11
mov		locdwtmp00, ecx

sub		ebx, locdwtmp3	; tmp13
mov		locdwtmp01, eax

sub		edx, locdwtmp2	; tmp12
mov		locdwtmp03, ebx

mov		eax, [esi+4*7]	; C7 for the odd part
mov		locdwtmp02, edx

;; now do the odd part

mov		ecx, [esi+4*3]
mov		ebx, [esi+4*1]

mov		locdwtmp0, eax
mov		locdwtmp2, ecx

mov		eax, [esi+4*5]
mov		locdwtmp3, ebx

imul	ecx,  const_3_072	; tmp2

mov		edx, locdwtmp0

imul	ebx,  const_1_501	; tmp3

imul	edx,  const_0_2986	; tmp0

mov		locdwtmp1, eax	; store tmp1

imul	eax, const_2_053	; tmp1

mov		locdwtmp10, edx
mov		locdwtmp11, eax

mov		locdwtmp12, ecx
mov		locdwtmp13, ebx

mov		eax, locdwtmp0
mov		ebx, locdwtmp1

mov		ecx, eax
mov		edx, ebx

add		eax, locdwtmp3	; z1
add		edx, locdwtmp2	; z2

add		ebx, locdwtmp3	; z4
add		ecx, locdwtmp2	; z3

mov		esi, ecx	; copy of z3

imul	eax,  const_0_899	; z1

imul	edx, const_2_562	; z2

add		esi, ebx	; z3 + z4

imul	esi, const_1_175	; z5

imul	ecx, const_1_961	; z3

imul	ebx,  const_0_3901	; z4

add		ecx, esi	; z3
add		ebx, esi	; z4

mov		esi, eax	; copy of z1
add		eax, ecx	; z1 + z3

add		esi, ebx	; z1 + z4
add		ecx, edx	; z3 + z2

add		edx, ebx	; z2 + z4
add		eax, locdwtmp10		; tmp0

add		edx, locdwtmp11		; tmp1
add		ecx, locdwtmp12		; tmp2

add		esi, locdwtmp13		; tmp3
mov		locdwtmp0, eax

mov		locdwtmp1, edx
mov		locdwtmp2, ecx

mov		locdwtmp3, esi
mov		ebx, locdwtmp03

add		ebx, locdwtmp0	; out3
mov		ecx, locdwtmp00

sub		ecx, locdwtmp3	; out7
add		ebx,  const_round_row

sar		ebx, 18
add		ecx,  const_round_row

sar		ecx, 18
mov		esi, range_limit

and		ebx,  const_mask
and		ecx, const_mask

mov		al, [esi][ebx]
mov		dl, [esi][ecx]

mov		ebx, locdwtmp02
mov		ecx, locdwtmp01

add		ebx, locdwtmp1	; out2
sub		ecx, locdwtmp2	; out6

shl		eax, 8		; get ready to receive next output byte
add		ebx,  const_round_row

shl		edx, 8		; get ready to receive next output byte
add		ecx, const_round_row

sar		ebx, 18

sar		ecx, 18
and		ebx,  const_mask

and		ecx,  const_mask
mov		al, [esi][ebx]

mov		dl, [esi][ecx]
mov		ebx, locdwtmp01

mov		ecx, locdwtmp02
add		ebx, locdwtmp2	; out1

shl		eax, 8		; get ready to receive next output byte
sub		ecx, locdwtmp1	; out5

shl		edx, 8		; get ready to receive next output byte
add		ebx,  const_round_row

sar		ebx, 18
add		ecx,  const_round_row

sar		ecx, 18
and		ebx,  const_mask

and		ecx,  const_mask
mov		al, [esi][ebx]	; out1

mov		dl, [esi][ecx]	; out5
mov		ebx, locdwtmp00

mov		ecx, locdwtmp03
add		ebx, locdwtmp3	; out0

shl		eax, 8		; get ready to receive next output byte
sub		ecx, locdwtmp0	; out4

shl		edx, 8		; get ready to receive next output byte
add		ebx,  const_round_row

sar		ebx, 18
add		ecx,  const_round_row

sar		ecx, 18
and		ebx,  const_mask

and		ecx,  const_mask
mov		al, [esi][ebx]	; out0

mov		dl, [esi][ecx]	; out4
mov		[edi], eax		; store the first four bytes

mov		[edi+4], edx	; store the next four bytes of this row
mov		eax, locdwcounter

add		locdwwsptr, 32		; wsptr stores 32 bit quantities
dec		eax

mov		locdwcounter, eax
jnz		idct_row

} //end of __asm

}


#endif /* X86 */

#endif /* DCT_ISLOW_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\msgrab\msgrab.h ===
//==========================================================================;
//
//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
//  PURPOSE.
//
//  Copyright (c) 1992 - 1999  Microsoft Corporation.  All Rights Reserved.
//
//--------------------------------------------------------------------------;

//extern const CLSID CLSID_SampleGrabber;
//extern const CLSID CLSID_NullRenderer;

extern const AMOVIESETUP_FILTER sudSampleGrabber;
extern const AMOVIESETUP_FILTER sudNullRenderer;

class CSampleGrabber;
class CSampleGrabberInput;

class CNullRenderer
    : public CBaseRenderer
{
public:

    static CUnknown *WINAPI CreateInstance(LPUNKNOWN punk, HRESULT *phr);

    CNullRenderer( IUnknown * pUnk, HRESULT * pHr );

    HRESULT DoRenderSample( IMediaSample * pms ) { return NOERROR; }
    HRESULT CheckMediaType( const CMediaType * pmt ) { return NOERROR; }
    HRESULT EndOfStream( );

};

//
// CSampleGrabber
//
class CSampleGrabber
    : public CTransInPlaceFilter
    , public ISampleGrabber
{
    friend class CSampleGrabberInput;

    REFERENCE_TIME m_rtMediaStop;
    CMediaType m_mt;
    BOOL m_bOneShot;
    BOOL m_bBufferSamples;
    char * m_pBuffer;
    long m_nBufferSize;
    long m_nSizeInBuffer;
    CComPtr< ISampleGrabberCB > m_pCallback;
    long m_nCallbackMethod;

protected:

    CMediaType m_mtAccept;

public:

    static CUnknown *WINAPI CreateInstance(LPUNKNOWN punk, HRESULT *phr);

    //expose ISampleGrabber
    STDMETHODIMP NonDelegatingQueryInterface(REFIID riid, void ** ppv);
    DECLARE_IUNKNOWN;

    // Constructor - just calls the base class constructor
    CSampleGrabber(TCHAR *tszName, LPUNKNOWN punk, HRESULT *phr);
    ~CSampleGrabber() ;                                            // destructor

    // Overrides the PURE virtual Transform of CTransInPlaceFilter base class
    HRESULT Transform(IMediaSample *pSample) { return NOERROR ;};
    // overrides receive function to take care ouput pin is not connected when running
    HRESULT Receive(IMediaSample *pSample);
    // don't allow cueing if we're a one-shot
    STDMETHODIMP GetState(DWORD dwMSecs, FILTER_STATE *State);

    // We accept any input type.  We'd return S_FALSE for any we didn't like.
    HRESULT CheckInputType(const CMediaType* mtIn);
    HRESULT SetMediaType( PIN_DIRECTION Dir, const CMediaType * mtIn );

    // ISampleGrabber interface
    STDMETHODIMP SetOneShot( BOOL OneShot );
    STDMETHODIMP GetConnectedMediaType( AM_MEDIA_TYPE * pType );
    STDMETHODIMP SetMediaType( const AM_MEDIA_TYPE * pType );
    STDMETHODIMP SetBufferSamples( BOOL BufferThem );
    STDMETHODIMP GetCurrentBuffer( long * pBufferSize, long * pBuffer );
    STDMETHODIMP GetCurrentSample( IMediaSample ** ppSample );
    STDMETHODIMP SetCallback( ISampleGrabberCB * pCallback, long WhichMethodToCallback );

};

// 
// CSampleGrabberInput
//
class CSampleGrabberInput 
    : public CTransInPlaceInputPin
{
    friend class CSampleGrabber;

    CSampleGrabber *m_pMyFilter;

public:
    CSampleGrabberInput::CSampleGrabberInput(
        TCHAR              * pObjectName,
        CSampleGrabber    * pFilter,
        HRESULT            * phr,
        LPCWSTR              pPinName);

    //overwrite receive to make this filter able to act like render
    HRESULT  CheckStreaming();

    // override to provide media type for fast connects
    HRESULT GetMediaType( int iPosition, CMediaType *pMediaType );

};
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\medloc\medloc.cpp ===
// Copyright (c) 1998 - 1999  Microsoft Corporation.  All Rights Reserved.
// medloc.cpp : Implementation of DLL Exports.


// Note: Proxy/Stub Information
//      To build a separate proxy/stub DLL,
//      run nmake -f medlocps.mk in the project directory.

#include "stdafx.h"
#include "resource.h"

#ifdef FILTER_DLL

    #include <qeditint.h>
    #include <qedit.h>
    #include "MediaLoc.h"

    CComModule _Module;

    BEGIN_OBJECT_MAP(ObjectMap)
    OBJECT_ENTRY(CLSID_MediaLocator, CMediaLocator)
    END_OBJECT_MAP()

    /////////////////////////////////////////////////////////////////////////////
    // DLL Entry Point

    extern "C"
    BOOL WINAPI DllMain(HINSTANCE hInstance, DWORD dwReason, LPVOID /*lpReserved*/)
    {
        if (dwReason == DLL_PROCESS_ATTACH)
        {
            _Module.Init(ObjectMap, hInstance);
            DisableThreadLibraryCalls(hInstance);
        }
        else if (dwReason == DLL_PROCESS_DETACH)
            _Module.Term();
        return TRUE;    // ok
    }

    /////////////////////////////////////////////////////////////////////////////
    // Used to determine whether the DLL can be unloaded by OLE

    STDAPI DllCanUnloadNow(void)
    {
        return (_Module.GetLockCount()==0) ? S_OK : S_FALSE;
    }

    /////////////////////////////////////////////////////////////////////////////
    // Returns a class factory to create an object of the requested type
    STDAPI DllGetClassObject(REFCLSID rclsid, REFIID riid, LPVOID* ppv)
    {
        return _Module.GetClassObject(rclsid, riid, ppv);
    }

    /////////////////////////////////////////////////////////////////////////////
    // DllRegisterServer - Adds entries to the system registry

    STDAPI DllRegisterServer(void)
    {
        // registers object, typelib and all interfaces in typelib
        long result = _Module.RegisterServer(TRUE);
        if( result != 0 )
        {
            return result;
        }

        // register the keys we'll use
        //
        HKEY hKey = 0;
        result = RegCreateKey
        (
            HKEY_CURRENT_USER,
            TEXT("Software\\Microsoft\\ActiveMovie\\MediaLocator"),
            &hKey
        );
        if( hKey )
        {
            // we just wanted to create it, that's all
            //
            RegCloseKey( hKey );
            hKey = NULL;
        }
        else
        {
            // key creation failed, so does RegisterServer
            //
            _Module.UnregisterServer(TRUE);
        }

        return result;
    }

    /////////////////////////////////////////////////////////////////////////////
    // DllUnregisterServer - Removes entries from the system registry

    STDAPI DllUnregisterServer(void)
    {
        RegDeleteKey
            (
            HKEY_CURRENT_USER,
            TEXT("Software\\Microsoft\\ActiveMovie\\MediaLocator")
            );

        return _Module.UnregisterServer(TRUE);
    }

#endif // #ifdef FILTER_DLL
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\medloc\stdafx.h ===
// Copyright (c) 1998 - 1999  Microsoft Corporation.  All Rights Reserved.
// stdafx.h : include file for standard system include files,
//      or project specific include files that are used frequently,
//      but are changed infrequently

#if !defined(AFX_STDAFX_H__CC1101E8_79DC_11D2_8CE6_00A0C9441E20__INCLUDED_)
#define AFX_STDAFX_H__CC1101E8_79DC_11D2_8CE6_00A0C9441E20__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

#ifndef STRICT
#define STRICT
#endif
#ifndef _WIN32_WINNT
#define _WIN32_WINNT 0x0400
#endif
#define _ATL_APARTMENT_THREADED

#include <atlbase.h>
//You may derive a class from CComModule and use it if you want to override
//something, but do not change the name of _Module
extern CComModule _Module;
#include <atlcom.h>
#include <streams.h>

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_STDAFX_H__CC1101E8_79DC_11D2_8CE6_00A0C9441E20__INCLUDED)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\msgrab\msgrab.cpp ===
//==========================================================================;
//
//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
//  PURPOSE.
//
//  Copyright (c) 1992 - 1999  Microsoft Corporation.  All Rights Reserved.
//
//--------------------------------------------------------------------------;

#include <streams.h>     // Active Movie (includes windows.h)
#include <atlbase.h>
#include <initguid.h>    // declares DEFINE_GUID to declare an EXTERN_C const.
#include <qeditint.h>
#include <qedit.h>
#include "msgrab.h"

// setup data - allows the self-registration to work.
const AMOVIESETUP_MEDIATYPE sudPinTypes =
{ &MEDIATYPE_NULL        // clsMajorType
, &MEDIASUBTYPE_NULL };  // clsMinorType

const AMOVIESETUP_PIN psudSampleGrabberPins[] =
{ { L"Input"            // strName
  , FALSE               // bRendered
  , FALSE               // bOutput
  , FALSE               // bZero
  , FALSE               // bMany
  , &CLSID_NULL         // clsConnectsToFilter
  , L""                 // strConnectsToPin
  , 1                   // nTypes
  , &sudPinTypes        // lpTypes
  }
, { L"Output"           // strName
  , FALSE               // bRendered
  , TRUE                // bOutput
  , FALSE               // bZero
  , FALSE               // bMany
  , &CLSID_NULL         // clsConnectsToFilter
  , L""                 // strConnectsToPin
  , 1                   // nTypes
  , &sudPinTypes        // lpTypes
  }
};
const AMOVIESETUP_PIN psudNullRendererPins[] =
{ { L"Input"            // strName
  , TRUE                // bRendered
  , FALSE               // bOutput
  , FALSE               // bZero
  , FALSE               // bMany
  , &CLSID_NULL         // clsConnectsToFilter
  , L""                 // strConnectsToPin
  , 1                   // nTypes
  , &sudPinTypes        // lpTypes
  }
};

const AMOVIESETUP_FILTER sudSampleGrabber =
{ &CLSID_SampleGrabber                  // clsID
, L"SampleGrabber"                 // strName
, MERIT_DO_NOT_USE                // dwMerit
, 2                               // nPins
, psudSampleGrabberPins };                     // lpPin
const AMOVIESETUP_FILTER sudNullRenderer =
{ &CLSID_NullRenderer                  // clsID
, L"Null Renderer"                 // strName
, MERIT_DO_NOT_USE                // dwMerit
, 1                               // nPins
, psudNullRendererPins };                     // lpPin


#ifdef FILTER_DLL

// Needed for the CreateInstance mechanism
CFactoryTemplate g_Templates[]=
{
    { L"Sample Grabber"
        , &CLSID_SampleGrabber
        , CSampleGrabber::CreateInstance
        , NULL
        , &sudSampleGrabber },
    { L"Null Renderer"
        , &CLSID_NullRenderer
        , CNullRenderer::CreateInstance
        , NULL
        , &sudNullRenderer }
};
int g_cTemplates = sizeof(g_Templates)/sizeof(g_Templates[0]);

/******************************Public*Routine******************************\
* exported entry points for registration and
* unregistration (in this case they only call
* through to default implmentations).
** History:
*\**************************************************************************/
STDAPI
DllRegisterServer()
{
  return AMovieDllRegisterServer2( TRUE );
}

STDAPI
DllUnregisterServer()
{
  return AMovieDllRegisterServer2( FALSE );
}
#endif


//
// CreateInstance
//
// Provide the way for COM to create a CSampleGrabber object
CUnknown * WINAPI CSampleGrabber::CreateInstance(LPUNKNOWN punk, HRESULT *phr)
{
    CSampleGrabber *pNewObject = new CSampleGrabber(NAME("MSample Grabber"), punk, phr );
    if (pNewObject == NULL) {
        *phr = E_OUTOFMEMORY;
    }

    return pNewObject;
} // CreateInstance

// Constructor - just calls the base class constructor
CSampleGrabber::CSampleGrabber(TCHAR *tszName, LPUNKNOWN punk, HRESULT *phr)
    : CTransInPlaceFilter (tszName, punk, CLSID_SampleGrabber, phr,FALSE)
    , m_rtMediaStop(MAX_TIME)
    , m_bOneShot( FALSE )
    , m_bBufferSamples( FALSE )
    , m_pBuffer( NULL )
    , m_nBufferSize( 0 )
    , m_nSizeInBuffer( 0 )
    , m_nCallbackMethod( 0 )
{
    ZeroMemory( &m_mt, sizeof( m_mt ) );

    m_pInput = new CSampleGrabberInput( NAME("Msgrab input pin")
                                         , this        // Owner filter
                                        , phr         // Result code
                                        , L"Input"    // Pin name
                                        );

}

CSampleGrabber::~CSampleGrabber()
{
    FreeMediaType( m_mt );

    if( m_pBuffer )
    {
        delete [] m_pBuffer;
        m_pBuffer = NULL;
    }
    m_nBufferSize = 0;
}


HRESULT CSampleGrabber::Receive(IMediaSample *pSample)
{
    HRESULT hr = 0;

    /*  Check for other streams and pass them on */
    AM_SAMPLE2_PROPERTIES * const pProps = m_pInput->SampleProps();
    if (pProps->dwStreamId != AM_STREAM_MEDIA)
    {
        if( m_pOutput->IsConnected() )
            return m_pOutput->Deliver(pSample);
        else
            return NOERROR;
    }

    REFERENCE_TIME StartTime, StopTime;
    pSample->GetTime( &StartTime, &StopTime);

    // don't accept preroll either
    //
    if( pSample->IsPreroll( ) == S_OK )
    {
        return NOERROR;
    }

    StartTime += m_pInput->CurrentStartTime( );
    StopTime += m_pInput->CurrentStartTime( );

    DbgLog((LOG_TRACE,1, TEXT( "msgrab: Receive %ld to %ld, (delta=%ld)" ), long( StartTime/10000 ), long( StopTime/10000 ), long( ( StopTime - StartTime ) / 10000 ) ));

    long BufferSize = pSample->GetActualDataLength( );
    BYTE * pSampleBuffer = NULL;
    pSample->GetPointer( &pSampleBuffer );

    // if user told us to buffer, then copy sample
    //
    if( m_bBufferSamples )
    {
        if( BufferSize > m_nBufferSize )
        {
            if( m_pBuffer )
                delete [] m_pBuffer;
            m_pBuffer = NULL;
            m_nBufferSize = 0;
        }

        // if no buffer, make one now.
        //
        if( !m_pBuffer )
        {
            m_nBufferSize = BufferSize;
            m_pBuffer = new char[ m_nBufferSize ];
            if( !m_pBuffer )
            {
                m_nBufferSize = 0;
            }
        }

        // if we still have a buffer, copy the bits
        //

        if( pSampleBuffer && m_pBuffer )
        {
            memcpy( m_pBuffer, pSampleBuffer, BufferSize );
            m_nSizeInBuffer = BufferSize;
        }
    }

    if( m_pCallback )
    {
        if( m_nCallbackMethod == 0 )
        {
            m_pCallback->SampleCB( double( StartTime ) / double( UNITS ), pSample );
        }
        else
        {
            m_pCallback->BufferCB( double( StartTime ) / double( UNITS ), pSampleBuffer, BufferSize );
        }
    }

    if( m_pOutput->IsConnected() )
    {
        hr = m_pOutput->Deliver(pSample);
    }

    // if we're a one-shot receiver, then return now and
    // tell the graph to stop
    //
    if( m_bOneShot )
    {
        DbgLog((LOG_ERROR,1, TEXT( "MSGRAB:Sending EC_COMPLETE @ %d" ), timeGetTime( ) ));
        EndOfStream();
        return S_FALSE;
    }

    return hr;
} // Receive

STDMETHODIMP CSampleGrabber::NonDelegatingQueryInterface(
    REFIID riid,
    void ** ppv
    )
{
    if (riid == IID_ISampleGrabber) {
        return GetInterface((ISampleGrabber *) this, ppv);
    } else {
        return CTransInPlaceFilter::NonDelegatingQueryInterface(riid, ppv);
    }
}


HRESULT CSampleGrabber::SetMediaType( PIN_DIRECTION Dir, const CMediaType * mtIn )
{
    if( Dir == PINDIR_INPUT )
    {
        m_mt = *mtIn;
    }

    return CTransInPlaceFilter::SetMediaType( Dir, mtIn );
}

HRESULT CSampleGrabber::CheckInputType(const CMediaType* mtIn)
{
    // one of the things we DON'T accept, no matter what,
    // is inverted dibs!!
    //
    if( *mtIn->FormatType( ) == FORMAT_VideoInfo )
    {
        VIDEOINFOHEADER * pVIH = (VIDEOINFOHEADER*) mtIn->Format( );
        if( pVIH )
        {
            if( pVIH->bmiHeader.biHeight < 0 )
            {
                return E_INVALIDARG;
            }
        }
    }
    if( *mtIn->FormatType( ) == FORMAT_VideoInfo2 )
    {
        // we don't want to deal with this. Thanks anyway.
        //
        return VFW_E_INVALIDMEDIATYPE;
    }

    if( *m_mtAccept.Type( ) == GUID_NULL )
    {
        return S_OK;
    }

    if( *(mtIn->Type( )) != *m_mtAccept.Type( ) )
    {
        return VFW_E_INVALIDMEDIATYPE;
    }

    if( *m_mtAccept.Subtype( ) == GUID_NULL )
    {
        return S_OK;
    }

    if( *(mtIn->Subtype( )) != *m_mtAccept.Subtype( ) )
    {
        return VFW_E_INVALIDMEDIATYPE;
    }

    if( *m_mtAccept.FormatType( ) == GUID_NULL )
    {
        return S_OK;
    }

    if( *(mtIn->FormatType( )) != *m_mtAccept.FormatType( ) )
    {
        return VFW_E_INVALIDMEDIATYPE;
    }

    if( *m_mtAccept.FormatType( ) == FORMAT_WaveFormatEx )
    {
        WAVEFORMATEX * pIn = (WAVEFORMATEX*) mtIn->Format( );
        WAVEFORMATEX * pAccept = (WAVEFORMATEX*) m_mtAccept.pbFormat;

        // if they both have formats
        //
        if( pAccept && pIn )
        {
            // then if we only want to look at any uncompressed, accept it now
            //
            if( pAccept->wFormatTag == WAVE_FORMAT_PCM && pAccept->nChannels == 0 )
            {
                if( pIn->wFormatTag == WAVE_FORMAT_PCM )
                {
                    return NOERROR;
                }
            }

            // otherwise, they have to match exactly
            //
            if( memcmp( pIn, pAccept, sizeof( WAVEFORMATEX ) ) != 0 )
            {
                return VFW_E_INVALIDMEDIATYPE;
            }
        }
    }

    return NOERROR;
}

STDMETHODIMP CSampleGrabber::SetMediaType( const AM_MEDIA_TYPE * pType )
{
    if( !pType )
    {
        m_mtAccept = CMediaType( );
    }
    else
    {
        CopyMediaType( &m_mtAccept, pType );
    }

    return NOERROR;
}

STDMETHODIMP CSampleGrabber::SetOneShot( BOOL OneShot )
{
    m_bOneShot = OneShot;
    return NOERROR;
}

STDMETHODIMP CSampleGrabber::SetBufferSamples( BOOL BufferThem )
{
    m_bBufferSamples = BufferThem;
    return NOERROR;
}

STDMETHODIMP CSampleGrabber::GetState(DWORD dwMSecs, FILTER_STATE *State)
{
    HRESULT hr = CTransInPlaceFilter::GetState( dwMSecs, State );

    // if we're a one shot, tell the graph we cannot pause
    //
    if( m_bOneShot )
    {
        if( *State == State_Paused )
        {
            hr = VFW_S_CANT_CUE;
        }
    }

    return hr;
}

//
// input pin
//

CSampleGrabberInput::CSampleGrabberInput(
    TCHAR              * pObjectName,
    CSampleGrabber    * pFilter,
    HRESULT            * phr,
    LPCWSTR              pPinName) :
    CTransInPlaceInputPin(pObjectName, pFilter, phr, pPinName)
{
    m_pMyFilter=pFilter;
}


// the base classes don't allow the output to be unconnected,
// but we'll allow this.
HRESULT
CSampleGrabberInput::CheckStreaming()
{
    ASSERT( ( m_pMyFilter->OutputPin() ) != NULL);
    if (! ( (m_pMyFilter->OutputPin())->IsConnected() ) ) {
        return S_OK;
    } else {
        //  Shouldn't be able to get any data if we're not connected!
        ASSERT(IsConnected());

        //  Don't process stuff in Stopped state
        if (IsStopped()) {
            return VFW_E_WRONG_STATE;
        }
        if (m_bRunTimeError) {
            return VFW_E_RUNTIME_ERROR;
        }
        return S_OK;
    }
}

HRESULT CSampleGrabberInput::GetMediaType( int iPosition, CMediaType *pMediaType )
{
    if (iPosition < 0) {
        return E_INVALIDARG;
    }
    if (iPosition > 0) {
        return VFW_S_NO_MORE_ITEMS;
    }

    *pMediaType = m_pMyFilter->m_mtAccept;
    return S_OK;
}

CUnknown * WINAPI CNullRenderer::CreateInstance(LPUNKNOWN punk, HRESULT *phr)
{
    CNullRenderer *pNewObject = new CNullRenderer( punk, phr );
    if (pNewObject == NULL)
    {
        *phr = E_OUTOFMEMORY;
    }

    return pNewObject;
} // CreateInstance

CNullRenderer::CNullRenderer( LPUNKNOWN punk, HRESULT *phr )
    : CBaseRenderer( CLSID_NullRenderer, NAME("Null Renderer"), punk, phr )
{
}

STDMETHODIMP CSampleGrabber::GetCurrentSample( IMediaSample ** ppSample )
{
    return E_NOTIMPL;
}

STDMETHODIMP CSampleGrabber::GetCurrentBuffer( long * pBufferSize, long * pBuffer )
{
    CheckPointer( pBufferSize, E_POINTER );

    // if buffering is not set, then return an error
    //
    if( !m_bBufferSamples )
    {
        return E_INVALIDARG;
    }

    if( !m_pBuffer )
    {
        return VFW_E_WRONG_STATE;
    }

    // if they wanted to know the buffer size
    //
    if( pBuffer == NULL )
    {
        *pBufferSize = m_nBufferSize;
        return NOERROR;
    }

    memcpy( pBuffer, m_pBuffer, m_nBufferSize );

    return 0;
}

STDMETHODIMP CSampleGrabber::SetCallback( ISampleGrabberCB * pCallback, long WhichMethodToCallback )
{
    if( WhichMethodToCallback < 0 || WhichMethodToCallback > 1 )
    {
        return E_INVALIDARG;
    }

    m_pCallback.Release( );
    m_pCallback = pCallback;
    m_nCallbackMethod = WhichMethodToCallback;
    return NOERROR;
}

STDMETHODIMP CSampleGrabber::GetConnectedMediaType( AM_MEDIA_TYPE * pType )
{
    if( !m_pInput || !m_pInput->IsConnected( ) )
    {
        return VFW_E_NOT_CONNECTED;
    }

    return m_pInput->ConnectionMediaType( pType );
}

HRESULT CNullRenderer::EndOfStream( )
{
    return CBaseRenderer::EndOfStream( );
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\qedwipes\qedwipes.cpp ===
// Copyright (c) 1999  Microsoft Corporation.  All Rights Reserved.
// Resource container for QEDIT's SMPTE grayscale JPEG, GIF images
#include <windows.h>

BOOL CALLBACK DllMain(HANDLE, DWORD, LPVOID)
{
  return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\qedit\qedit.cpp ===
//
// Copyright (c) 1994 - 1999  Microsoft Corporation.  All Rights Reserved.
//

#include <streams.h>
#include <process.h>
#undef SubclassWindow

#include <initguid.h>
#define INITGUID
#include <ddrawex.h>
#include <ddraw.h>
#include <d3drm.h>
#include <vfw.h>

#include <qeditint.h>
#include <qedit.h>

// magicly done for me #define _ATL_STATIC_REGISTRY
#ifdef FILTER_LIB

// If FILTER_LIB is defined then the component filters
// are being built as filter libs, to link into this dll,
// hence we need all these gubbins!
// ehr: What the heck is a gubbin?

#include <qeditint_i.c>
#include "..\xmltl\xml2dex.h"

// for DXTWrap
#include "..\dxt\dxtwrap\dxt.h"
// for FRC
#include "..\frc\frc.h"
// for RESIZER
#include "..\resize\stretch.h"
// for BLACK
#include "..\black\black.h"
// for AudMix
#include "..\audmix\audmix.h"
#include "..\audmix\prop.h"
// for SILENCE
#include "..\silence\silence.h"
// for STILLVID
#include "..\stillvid\stillvid.h"
#include "..\stillvid\stilprop.h"
// for SQCDEST
//#include "..\sqcdest\sqcdest.h"
// for BIG SWITCH
#include "..\switch\switch.h"
// for SMART RECOMPRESSOR
#include "..\sr\sr.h"
// for AUDIO REPACKAGER
#include "..\audpack\audpack.h"
// for TIMELINE DATABASE
#include "atlbase.h"
#include "..\tldb\tldb.h"
// for RENDER ENGINE
#include "..\..\pnp\devenum\cmgrbase.cpp"
#include "..\util\filfuncs.h"
#include "..\render\irendeng.h"
// for GCACHE
#include "..\gcache\grfcache.h"
// for MEDLOC
#include "..\medloc\medialoc.h"
// for DA source
//#include "..\dasource\dasource.h"
// for Output Queue
#include "..\queue\queue.h"
// for Property Setter
#include "..\xmltl\varyprop.h"
// for MediaDet
#include "..\mediadet\mediadet.h"
// for MSGrab
#include "..\msgrab\msgrab.h"
    #include <DXTmpl.h>
    #include <dtbase.h>
// for DXT Jpeg
#include "..\dxtjpegdll\dxtjpeg.h"
#include "..\dxtjpegdll\dxtjpegpp.h"
// for Compositor
#include "..\dxt\comp\comp.h"
// for keying DXT
#include "..\dxtkey\Dxtkey.h"

HANDLE g_devenum_mutex = 0;


// individual source filter's includes
// note: some of the filters are registered as COM objects and not DSHOW filters
CFactoryTemplate g_Templates[] =
{
    {L"DirectX Transform Wrapper", &CLSID_DXTWrap, CDXTWrap::CreateInstance},
        //, NULL, &sudDXTWrap },
    {L"DirectX Transform Wrapper Property Page", &CLSID_DXTProperties, CPropPage::CreateInstance},
        // NULL, NULL},
    {L"Frame Rate Converter", &CLSID_FrmRateConverter, CFrmRateConverter::CreateInstance},
        // NULL, &sudFrmRateConv },
    {L"Frame Rate Converter Property Page", &CLSID_FRCProp, CFrcPropertyPage::CreateInstance},
        // NULL, NULL},
    {L"Stretch", &CLSID_Resize, CStretch::CreateInstance},
        // NULL, &sudStretchFilter },
    {L"Stretch Property Page", &CLSID_ResizeProp, CResizePropertyPage::CreateInstance},
        // NULL, NULL},
    {L"Big Switch", &CLSID_BigSwitch, CBigSwitch::CreateInstance},
        // NULL, &sudBigSwitch },
    {L"Smart Recompressor", &CLSID_SRFilter, CSR::CreateInstance},
        // NULL, &sudSR },
    {L"Generate Black Video", &CLSID_GenBlkVid, CGenBlkVid::CreateInstance},
        // NULL, &sudBlkVid},
    {L"Black Generator Property Page", &CLSID_GenVidPropertiesPage, CGenVidProperties::CreateInstance},
        // NULL, NULL},
    {L"Audio Mixer", &CLSID_AudMixer, CAudMixer::CreateInstance},
        // NULL, &sudAudMixer},
    { L"Audio Mixer Property", &CLSID_AudMixPropertiesPage, CAudMixProperties::CreateInstance},
        // NULL,NULL },
    { L"Pin Property", &CLSID_AudMixPinPropertiesPage, CAudMixPinProperties::CreateInstance},
        // NULL, NULL},
    {L"Silence", &CLSID_Silence, CSilenceFilter::CreateInstance},
        // NULL, &sudSilence},
    {L"Silence Generator Property Page", &CLSID_SilenceProp, CFilterPropertyPage::CreateInstance},
        // NULL, NULL},
    {L"Generate Still Video", &CLSID_GenStilVid, CGenStilVid::CreateInstance},
        // NULL, &sudStillVid},
    {L"Still Video Property Page", &CLSID_GenStilPropertiesPage, CGenStilProperties::CreateInstance},
        // NULL, NULL},
    //{L"SqcDest", &CLSID_SqcDest, CSqcDest::CreateInstance},
        // NULL, &sudSqcDest},
    {L"MS Timeline", &CLSID_AMTimeline, CAMTimeline::CreateInstance},
    {L"Audio Repackager", &CLSID_AudRepack, CAudRepack::CreateInstance},
        // NULL, &sudAudRepack},
    {L"Audio Repackager Property Page", &CLSID_AUDProp, CAudPropertyPage::CreateInstance},
        // NULL, NULL},
    //{L"DASource", &CLSID_DASourcer, CDASource::CreateInstance},
        // NULL, NULL },
    //{L"DAScriptParser", &CLSID_DAScriptParser, CDAScriptParser::CreateInstance},
        // NULL, &sudDASourceax},
    {L"Dexter Queue", &CLSID_DexterQueue, CDexterQueue::CreateInstance},
        // NULL, &sudQueue},
    {L"Property Setter", &CLSID_PropertySetter, CPropertySetter::CreateInstance, NULL, NULL},
    {L"MediaDetFilter", &CLSID_MediaDetFilter, CMediaDetFilter::CreateInstance},
        // NULL, &sudMediaDetFilter},
    {L"MediaDet", &CLSID_MediaDet, CMediaDet::CreateInstance, NULL, NULL},
    {L"Sample Grabber", &CLSID_SampleGrabber, CSampleGrabber::CreateInstance, NULL, &sudSampleGrabber},
    {L"Null Renderer", &CLSID_NullRenderer, CNullRenderer::CreateInstance, NULL, &sudNullRenderer}
};


int g_cTemplates = sizeof(g_Templates) / sizeof(g_Templates[0]);

#include "..\dxt\dxtenum\vidfx1.h"
#include "..\dxt\dxtenum\vidfx2.h"


#ifdef _ATL_STATIC_REGISTRY
#include <statreg.h>
#include <statreg.cpp>
#endif // _ATL_STATIC_REGISTRY

#include <atlimpl.cpp>
#include <atlctl.cpp>
#include <atlwin.cpp>
#include <dtbase.cpp>


CComModule _Module;

BEGIN_OBJECT_MAP(ObjectMap)
  OBJECT_ENTRY(CLSID_VideoEffects1Category, CVidFX1ClassManager)
  OBJECT_ENTRY(CLSID_VideoEffects2Category, CVidFX2ClassManager)
  OBJECT_ENTRY(CLSID_RenderEngine, CRenderEngine)
  OBJECT_ENTRY(CLSID_SmartRenderEngine, CSmartRenderEngine)
  OBJECT_ENTRY(CLSID_MediaLocator, CMediaLocator)
  OBJECT_ENTRY(CLSID_GrfCache, CGrfCache)
  OBJECT_ENTRY(CLSID_Xml2Dex, CXml2Dex)
  OBJECT_ENTRY(CLSID_DxtJpeg, CDxtJpeg)
  OBJECT_ENTRY(CLSID_DxtJpegPP, CDxtJpegPP)
  OBJECT_ENTRY(CLSID_DxtKey, CDxtKey)
  OBJECT_ENTRY(CLSID_DxtCompositor, CDxtCompositor)
  OBJECT_ENTRY(CLSID_DxtAlphaSetter, CDxtAlphaSetter)
END_OBJECT_MAP()


#else   // !DFILTER_LIB


#endif  // DFILTER_LIB

extern "C" BOOL QEditDllEntry(HINSTANCE hInstance, ULONG ulReason, LPVOID pv);
extern "C" BOOL WINAPI DllEntryPoint(HINSTANCE hInstance, ULONG ulReason, LPVOID pv);

BOOL QEditDllEntry(HINSTANCE hInstance, ULONG ulReason, LPVOID pv)
{
    BOOL f = DllEntryPoint(hInstance, ulReason, pv);

    // if loading this dll, we want to call the 2nd dll entry point
    // only if the first one succeeded. if unloading, always call
    // both. if the second one fails, undo the first one.  HAVE NOT
    // verified that failing DllEntryPoint for ATTACH does not cause
    // the loader to call in again w/ DETACH. but that seems silly
    if(f || ulReason == DLL_PROCESS_DETACH)
    {
        if (ulReason == DLL_PROCESS_ATTACH)
        {
            _ASSERTE(g_devenum_mutex == 0);
            g_devenum_mutex = CreateMutex(
                NULL,                   // no security attributes
                FALSE,                  // not initially owned
                TEXT("eed3bd3a-a1ad-4e99-987b-d7cb3fcfa7f0")); // name
            if(!g_devenum_mutex) {
                return FALSE;
            }


            _Module.Init(ObjectMap, hInstance);
            DisableThreadLibraryCalls(hInstance);

        }
        else if (ulReason == DLL_PROCESS_DETACH)
        {
            // We hit this ASSERT in NT setup
            // ASSERT(_Module.GetLockCount()==0 );
            _Module.Term();

            _ASSERTE(g_devenum_mutex != 0);
            BOOL f = CloseHandle(g_devenum_mutex);
            _ASSERTE(f);
        }
    }

    return f;
}

//
// stub entry points
//

STDAPI
QEDIT_DllRegisterServer( void )
{
  // register the still video source filetypes
  HKEY hkey;
  OLECHAR wch[CHARS_IN_GUID];
  StringFromGUID2(CLSID_GenStilVid, wch, CHARS_IN_GUID);

  USES_CONVERSION;
  TCHAR *ch = W2T(wch);
  DWORD cb = CHARS_IN_GUID * sizeof(TCHAR); // incl. null

  HKEY hkExt;
  LONG l = RegCreateKey(HKEY_CLASSES_ROOT, TEXT("Media Type\\Extensions"), &hkExt);
  if(l == ERROR_SUCCESS)
  {
      static TCHAR *rgszext[] = {
          TEXT(".bmp"),
          TEXT(".dib"),
          TEXT(".jpg"),
          TEXT(".jpeg"),
          TEXT(".jpe"),
          TEXT(".jfif"),
          TEXT(".gif"),
          TEXT(".tga")
      };

      for(int i = 0; i < NUMELMS(rgszext); i++)
      {
          l = RegCreateKey(hkExt, rgszext[i], &hkey);
          if (l == ERROR_SUCCESS) {
              l = RegSetValueEx(hkey, TEXT("Source Filter"), 0, REG_SZ, (BYTE *)ch, cb);
              RegCloseKey(hkey);
          }

          if(l != ERROR_SUCCESS) {
              break;
          }
      }

      RegCloseKey(hkExt);
  }

  if (l != ERROR_SUCCESS) {
      ASSERT(0);
      return HRESULT_FROM_WIN32(l);
  }


  HRESULT hr =  AMovieDllRegisterServer2( TRUE );
  if(SUCCEEDED(hr)) {
      hr = _Module.RegisterServer(FALSE);
  }


  //  Register our type library
  if (SUCCEEDED(hr)) {
        // get file name (where g_hInst is the
        // instance handle of the filter dll)
        //
        WCHAR achFileName[MAX_PATH];

        // WIN95 doesn't support GetModuleFileNameW
        //
        char achTemp[MAX_PATH];

        DbgLog((LOG_TRACE, 2, TEXT("- get module file name")));

        GetModuleFileNameA( g_hInst, achTemp, sizeof(achTemp) );

        MultiByteToWideChar( CP_ACP, 0L, achTemp, -1, achFileName, MAX_PATH );
        ITypeLib *pTLB;
        if (SUCCEEDED(LoadTypeLib(achFileName, &pTLB))) {
            RegisterTypeLib(pTLB, achFileName, NULL);
            pTLB->Release();
        }
  }
  return hr;
}

STDAPI
QEDIT_DllUnregisterServer( void )
{
  HRESULT hr = AMovieDllRegisterServer2( FALSE );
  if(SUCCEEDED(hr)) {
      hr = _Module.UnregisterServer();
  }

  return hr;
}

//  BOOL WINAPI
//  DllMain(HINSTANCE hInstance, ULONG ulReason, LPVOID pv)
//  {
//      return QEditDllEntry(hInstance, ulReason, pv);
//  }

STDAPI
QEDIT_DllGetClassObject(
    REFCLSID rClsID,
    REFIID riid,
    void **ppv)
{
    HRESULT hr = DllGetClassObject(rClsID, riid, ppv);
    if(FAILED(hr)) {
	hr = _Module.GetClassObject(rClsID, riid, ppv);
    }

    // not neccc. the right error if the the first call failed.
    return hr;
}

STDAPI QEDIT_DllCanUnloadNow(void)
{
    HRESULT hr = DllCanUnloadNow();
    if (hr == S_OK) {
	hr = (_Module.GetLockCount()==0) ? S_OK : S_FALSE;
    }

    return hr;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\qedit\stdafx.h ===
// Copyright (c) 1999  Microsoft Corporation.  All Rights Reserved.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\render\deadpool.h ===
// Copyright (c) 1999  Microsoft Corporation.  All Rights Reserved.
#ifndef __DEADPOOL_H__
#define __DEADPOOL_H__

#define MAX_DEAD 2048

class CDeadGraph : public IDeadGraph
{
    CCritSec m_Lock;

    long m_ID[MAX_DEAD];

    // we don't need to reference count these, since they're stored in a seperate graph
    IPin * m_pStartPin[MAX_DEAD];
    IPin * m_pStopPin[MAX_DEAD];
    IBaseFilter * m_pFilter[MAX_DEAD];
    IBaseFilter * m_pDanglyBit[MAX_DEAD];
    long m_nCount;
    HRESULT m_hrGraphCreate;
    CComPtr< IGraphBuilder > m_pGraph;

    HRESULT _SleepFilter( IBaseFilter * pFilter );
    HRESULT _ReviveFilter( IBaseFilter * pFilter, IGraphBuilder * pGraph );
    HRESULT _RetireAllDownstream( IGraphConfig *pConfig, IBaseFilter *pF);
    HRESULT _ReviveAllDownstream( IGraphBuilder *pGraph, IGraphConfig *pConfig, IBaseFilter *pF);

public:

    CDeadGraph( );
    ~CDeadGraph( );

    // fake out COM
    STDMETHODIMP_(ULONG) AddRef() { return 2; }
    STDMETHODIMP_(ULONG) Release() { return 1; }
    STDMETHODIMP QueryInterface(REFIID riid, void ** ppv);

    // IDeadGraph
    STDMETHODIMP PutChainToRest( long Identifier, IPin * pStartPin, IPin * pStopPin, IBaseFilter *pDanglyBit );
    STDMETHODIMP PutFilterToRest( long Identifier, IBaseFilter * pFilter );
    STDMETHODIMP PutFilterToRestNoDis( long Identifier, IBaseFilter * pFilter );
    STDMETHODIMP ReviveChainToGraph( IGraphBuilder * pGraph, long Identifier, IPin ** ppStartPin, IPin ** ppStopPin, IBaseFilter **ppDanglyBit );
    STDMETHODIMP ReviveFilterToGraph( IGraphBuilder * pGraph, long Identifier, IBaseFilter ** ppFilter );
    STDMETHODIMP Clear( );
    STDMETHODIMP GetGraph( IGraphBuilder ** ppGraph );
};

#endif // #ifndef __DEADPOOL_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\render\deadpool.cpp ===
// Copyright (c) 1999  Microsoft Corporation.  All Rights Reserved.
#include <streams.h> 
#include "stdafx.h"
#include "deadpool.h"
#include "..\util\filfuncs.h"

const int TRACE_HIGHEST = 2;
const int TRACE_MEDIUM = 3;
const int TRACE_LOW = 4;
const int TRACE_LOWEST = 5;

//############################################################################
// 
//############################################################################

CDeadGraph::CDeadGraph( )
{
    Clear( );
    m_hrGraphCreate = CoCreateInstance( CLSID_FilterGraphNoThread,
        NULL,
        CLSCTX_INPROC_SERVER,
        IID_IGraphBuilder,
        (void**) &m_pGraph );
}

//############################################################################
// 
//############################################################################

CDeadGraph::~CDeadGraph( )
{
}

//############################################################################
// 
//############################################################################

// the chain must be disconnected at both ends and be linear
// puts a chain of filters into this dead graph.  If it's already in the dead graph, it merely sets
// its ID to the given ID
//
HRESULT CDeadGraph::PutChainToRest( long ID, IPin * pStartPin, IPin * pStopPin, IBaseFilter *pDanglyBit )
{
    CAutoLock Lock( &m_Lock );

    DbgLog((LOG_TRACE,TRACE_HIGHEST, "deadgraph: PutChainToRest, chain = %ld", ID ));

#ifdef DEBUG
    long ttt1 = timeGetTime( );
#endif

    if( FAILED( m_hrGraphCreate ) )
    {
        return m_hrGraphCreate;
    }

    // one of the pins has to exist, at least
    if( !pStartPin && !pStopPin )
    {
        return E_INVALIDARG;
    }

    // no passing 0 as the ID
    if( ID == 0 )
    {
        return E_INVALIDARG;
    }

    // not too many in our list. what's a good number?
    if( m_nCount == MAX_DEAD )
    {
        return E_OUTOFMEMORY;
    }

    CComPtr< IPin > pConnected;
    IPin * pChainPin = NULL;

    // make sure it's not connected
    if( pStartPin )
    {
        pChainPin = pStartPin;

        pStartPin->ConnectedTo( &pConnected );

        if( pConnected )
        {
            return E_INVALIDARG;
        }
    } // if pStartPin

    // make sure it's not connected
    if( pStopPin )
    {
        pChainPin = pStopPin;

        pStopPin->ConnectedTo( &pConnected );

        if( pConnected )
        {
            return E_INVALIDARG;
        }
    } // if pStopPin

    // if the filters are connected, then they have to be in a graph.
    IFilterGraph * pCurrentGraph = GetFilterGraphFromPin( pChainPin );
    ASSERT( pCurrentGraph );
    if( !pCurrentGraph )
    {
        return E_INVALIDARG;
    }

    // see if our graph supports IGraphConfig, if it doesn't, we cannot do this
    // function
    CComQIPtr< IGraphConfig, &IID_IGraphConfig > pConfig( pCurrentGraph );
    ASSERT( pConfig );
    if( !pConfig )
    {
        return E_UNEXPECTED; // DEX_IDS_INSTALL_PROBLEM;
    }

    // put it in our list
    m_pStartPin[m_nCount] = pStartPin;
    m_pStopPin[m_nCount] = pStopPin;
    m_pFilter[m_nCount] = NULL;
    m_ID[m_nCount] = ID;
    m_pDanglyBit[m_nCount] = pDanglyBit;
    m_nCount++;

    // if the graphs are the same, don't do anything!
    if( pCurrentGraph == m_pGraph )
    {
        return NOERROR;
    }

    // tell each filter in the current graph that it's DEAD.
    HRESULT hr = 0;
    CComPtr< IBaseFilter > pStartFilter = pStartPin ? GetFilterFromPin( pStartPin ) : 
        GetStartFilterOfChain( pChainPin );

    hr = _RetireAllDownstream(pConfig, pStartFilter);
    
#ifdef DEBUG
    ttt1 = timeGetTime( ) - ttt1;
    DbgLog((LOG_TIMING,TRACE_HIGHEST, "deadgraph: PutChainToRest took %ld ms", ttt1 ));
#endif

    return hr;
}


HRESULT CDeadGraph::_RetireAllDownstream(IGraphConfig *pConfig, IBaseFilter *pStartFilter)
{
    CheckPointer(pConfig, E_POINTER);
    CheckPointer(pStartFilter, E_POINTER);

    HRESULT hr = S_OK;

    CComPtr< IEnumPins > pEnum;
    hr = pStartFilter->EnumPins(&pEnum);

    // recursively retire everything downstream of us
    while (hr == S_OK) {
        CComPtr <IPin> pPinOut;
        ULONG Fetched = 0;
        pEnum->Next(1, &pPinOut, &Fetched);
        if (!pPinOut) {
            break;
        }
        PIN_INFO pi;
        pPinOut->QueryPinInfo(&pi);
        if (pi.pFilter) 
            pi.pFilter->Release();
	if (pi.dir != PINDIR_OUTPUT)
	    continue;
        CComPtr <IPin> pPinIn;
        pPinOut->ConnectedTo(&pPinIn);
	if (pPinIn) {
            IBaseFilter *pF = GetFilterFromPin(pPinIn);
            if (pF)
	        hr = _RetireAllDownstream(pConfig, pF);
	}
    }

    // then retire ourself
    if (hr == S_OK) {
        FILTER_INFO fi;
        pStartFilter->QueryFilterInfo( &fi );
        if( fi.pGraph ) fi.pGraph->Release( );
        hr = pConfig->RemoveFilterEx( pStartFilter, REMFILTERF_LEAVECONNECTED );
        ASSERT( !FAILED( hr ) );
        // !!! what do we do if it bombed? Danny?
        hr = m_pGraph->AddFilter( pStartFilter, fi.achName );
        ASSERT( !FAILED( hr ) );
        if (FAILED(hr)) {
            m_nCount--;
            return hr;
        }
    }
    return hr;
}


//############################################################################
// 
//############################################################################

HRESULT CDeadGraph::PutFilterToRestNoDis( long ID, IBaseFilter * pFilter )
{
    CAutoLock Lock( &m_Lock );

    DbgLog((LOG_TRACE,TRACE_HIGHEST, "deadgraph: PutFilterToRestNoDis, ID = %ld", ID ));

    HRESULT hr = 0;

#ifdef DEBUG
    long ttt1 = timeGetTime( );
#endif

    if( FAILED( m_hrGraphCreate ) )
    {
        return m_hrGraphCreate;
    }

    if( !pFilter )
    {
        return E_INVALIDARG;
    }

    // no passing 0 as the ID
    if( ID == 0 )
    {
        return E_INVALIDARG;
    }

    // not too many in our list. what's a good number?
    if( m_nCount == MAX_DEAD )
    {
        return E_OUTOFMEMORY;
    }

    // by this time, all filters connected to pFilter had
    // better had SetSyncSource( NULL ) called on them,
    // because any filter that has a sync source upon it
    // will inadvertently call UpstreamReorder on the filter 
    // graph and find out that some filters in the chain
    // aren't connected in the same graph, and will bomb.

    // put just the filter passed in into our list of
    // cached filters, but pull across every connected
    // filter into the dead graph as well
    hr = _SleepFilter( pFilter );
    if( FAILED( hr ) )
    {
        return hr;
    }

    // put it in our list
    m_pFilter[m_nCount] = pFilter;
    m_pStartPin[m_nCount] = NULL;
    m_pStopPin[m_nCount] = NULL;
    m_ID[m_nCount] = ID;
    m_nCount++;


#ifdef DEBUG
    ttt1 = timeGetTime( ) - ttt1;
    DbgLog((LOG_TIMING,TRACE_HIGHEST, "deadgraph: PutFilterToRest took %ld ms", ttt1 ));
#endif

    return hr;
}

//############################################################################
// 
//############################################################################

HRESULT CDeadGraph::PutFilterToRest( long ID, IBaseFilter * pFilter )
{
    CAutoLock Lock( &m_Lock );

    DbgLog((LOG_TRACE,TRACE_HIGHEST, "deadgraph: PutFilterToRest, ID = %ld", ID ));

#ifdef DEBUG
    long ttt1 = timeGetTime( );
#endif

    if( FAILED( m_hrGraphCreate ) )
    {
        return m_hrGraphCreate;
    }

    if( !pFilter )
    {
        return E_INVALIDARG;
    }

    // no passing 0 as the ID
    if( ID == 0 )
    {
        return E_INVALIDARG;
    }

    // not too many in our list. what's a good number?
    if( m_nCount == MAX_DEAD )
    {
        return E_OUTOFMEMORY;
    }

    FILTER_INFO fi;
    pFilter->QueryFilterInfo( &fi );

    IFilterGraph * pCurrentGraph = fi.pGraph;
    if( !pCurrentGraph )
    {
        return E_INVALIDARG;
    }
    pCurrentGraph->Release( );

    // put it in our list
    m_pFilter[m_nCount] = pFilter;
    m_pStartPin[m_nCount] = NULL;
    m_pStopPin[m_nCount] = NULL;
    m_ID[m_nCount] = ID;
    m_nCount++;

    // if the graphs are the same, don't do anything!
    if( pCurrentGraph == m_pGraph )
    {
        return NOERROR;
    }

    HRESULT hr = 0;

    pFilter->AddRef( );

    hr = pCurrentGraph->RemoveFilter( pFilter );
    ASSERT( !FAILED( hr ) );
    // !!! what do we do if it bombed? Danny?
    hr = m_pGraph->AddFilter( pFilter, fi.achName );

    pFilter->Release( );

    ASSERT( !FAILED( hr ) );
    if (FAILED(hr)) 
    {
        m_nCount--;
        return hr;
    }

#ifdef DEBUG
    ttt1 = timeGetTime( ) - ttt1;
    DbgLog((LOG_TIMING,TRACE_HIGHEST, "deadgraph: PutFilterToRest took %ld ms", ttt1 ));
#endif

    return hr;
}

//############################################################################
// 
//############################################################################

HRESULT CDeadGraph::ReviveChainToGraph( IGraphBuilder * pGraph, long ID, IPin ** ppStartPin, IPin ** ppStopPin, IBaseFilter **ppDanglyBit )
{
    CAutoLock Lock( &m_Lock );

    if (ppDanglyBit)
	*ppDanglyBit = NULL;

    DbgLog((LOG_TRACE,TRACE_HIGHEST, "deadgraph: ReviveChainToGraph, ID = %ld", ID ));

#ifdef DEBUG
    long ttt1 = timeGetTime( );
#endif

    if( FAILED( m_hrGraphCreate ) )
    {
        return m_hrGraphCreate;
    }

    // no passing 0 as the ID
    if( ID == 0 )
    {
        return E_INVALIDARG;
    }

    CComQIPtr< IGraphConfig, &IID_IGraphConfig > pConfig( m_pGraph );
    ASSERT( pConfig );
    if( !pConfig )
    {
        return E_UNEXPECTED;    // DEX_IDS_INSTALL_PROBLEM;
    }

    // linear search, how long does this take?
    for( int i = 0 ; i < m_nCount ; i++ )
    {
        if( ID == m_ID[i] )
        {
            break;
        }
    }

    // didn't find it
    //
    if( i >= m_nCount )
    {
        DbgLog((LOG_TRACE,TRACE_HIGHEST, "deadgraph: not found" ));
        return E_FAIL;
    }

    IPin * pChainPin = m_pStopPin[i];
    if( !pChainPin )
    {
        pChainPin = m_pStartPin[i];
    }

    HRESULT hr = 0;
    CComPtr< IBaseFilter > pStartFilter = m_pStartPin[i] ? 
        GetFilterFromPin( m_pStartPin[i] ) :
        GetStartFilterOfChain( pChainPin );

    hr = _ReviveAllDownstream(pGraph, pConfig, pStartFilter);

    if( ppStartPin )
    {
        *ppStartPin = m_pStartPin[i];
        (*ppStartPin)->AddRef( );
    }
    if( ppStopPin )
    {
        *ppStopPin = m_pStopPin[i];
        (*ppStopPin)->AddRef( );
    }

    // figure out if we're reviving not just this chain, but a dangly bit too,
    // off another parser pin not connected with this chain
    if (ppDanglyBit && m_pStopPin[i] && !m_pStartPin[i]) {
	// walk upstream until we find a filter with >1 output pin
	IPin *pOut = m_pStopPin[i];
	while (1) {
	    IPin *pIn;
	    IBaseFilter *pF = GetFilterFromPin(pOut);
	    ASSERT(pF);
	    if (!pF) break;

	    // this filter has >1 output pin.  It's the splitter. We can now
	    // find out if there's an extra appendage off of it
	    IPin *pTest = GetOutPin(pF, 1);
	    if (pTest) {
		// find a connected pin that isn't pOut, and you've found it
		int z = 0;
		while (1) {
		    pTest = GetOutPin(pF, z);
		    if (!pTest) break;
		    pIn = NULL;
		    pTest->ConnectedTo(&pIn);
		    if (pIn) {
			pIn->Release();
			if (pOut != pTest) {
			    *ppDanglyBit = GetFilterFromPin(pIn);
			    break;
			}
		    }
		    z++;
		}
	    }
	    if (*ppDanglyBit) break;
	    pIn = GetInPin(pF, 0);
	    if (!pIn) break;	// all done, no extra appendage
	    pIn->ConnectedTo(&pOut);	// addrefs
	    ASSERT(pOut);
            if (!pOut) break;
	    pOut->Release();
	}
    }

    m_pStopPin[i] = 0;
    m_pStartPin[i] = 0;

#ifdef DEBUG
    ttt1 = timeGetTime( ) - ttt1;
    DbgLog((LOG_TIMING,TRACE_HIGHEST, "deadgraph: ReviveChain took %ld ms", ttt1 ));
#endif

    return NOERROR;
}


HRESULT CDeadGraph::_ReviveAllDownstream(IGraphBuilder *pGraph, IGraphConfig * pConfig, IBaseFilter *pStartFilter)
{
    CheckPointer(pGraph, E_POINTER);
    CheckPointer(pConfig, E_POINTER);
    CheckPointer(pStartFilter, E_POINTER);

    HRESULT hr = S_OK;

    CComPtr< IEnumPins > pEnum;
    hr = pStartFilter->EnumPins(&pEnum);

    // recursively revive everything downstream of us
    while (hr == S_OK) {
        CComPtr <IPin> pPinOut;
        ULONG Fetched = 0;
        pEnum->Next(1, &pPinOut, &Fetched);
        if (!pPinOut) {
            break;
        }
        PIN_INFO pi;
        pPinOut->QueryPinInfo(&pi);
        if (pi.pFilter) 
            pi.pFilter->Release();
	if (pi.dir != PINDIR_OUTPUT)
	    continue;
        CComPtr <IPin> pPinIn;
        pPinOut->ConnectedTo(&pPinIn);
	if (pPinIn) {
            IBaseFilter *pF = GetFilterFromPin(pPinIn);
            if (pF)
	        hr = _ReviveAllDownstream(pGraph, pConfig, pF);
	}
    }

    // then revive ourself
    if (hr == S_OK) {
        FILTER_INFO fi;
        pStartFilter->QueryFilterInfo( &fi );
        if( fi.pGraph ) fi.pGraph->Release( );
        hr = pConfig->RemoveFilterEx( pStartFilter, REMFILTERF_LEAVECONNECTED );
        ASSERT( !FAILED( hr ) );
        // what do we do if it bombed? Danny?
        hr = pGraph->AddFilter( pStartFilter, fi.achName );
        ASSERT( !FAILED( hr ) );
        if (FAILED(hr)) {

            //m_pStopPin[i] = 0;
            //m_pStartPin[i] = 0;

            // this could get scary if it bombs halfway through the chain... djm
            return hr;
        }
        // what do we do if it bombed? Danny?
        pStartFilter = GetNextDownstreamFilter( pStartFilter );
    }
    return S_OK;
}


//############################################################################
// 
//############################################################################

HRESULT CDeadGraph::ReviveFilterToGraph( IGraphBuilder * pGraph, long ID, IBaseFilter ** ppFilter )
{
    CAutoLock Lock( &m_Lock );

    DbgLog((LOG_TRACE,TRACE_HIGHEST, "deadgraph: ReviveFilterToGraph, ID = %ld", ID ));

    HRESULT hr = 0;

    CheckPointer( ppFilter, E_POINTER );

#ifdef DEBUG
    long ttt1 = timeGetTime( );
#endif

    if( FAILED( m_hrGraphCreate ) )
    {
        return m_hrGraphCreate;
    }

    // no passing 0 as the ID
    if( ID == 0 )
    {
        return E_INVALIDARG;
    }

    // !!! linear search, how long does this take?
    for( int i = 0 ; i < m_nCount ; i++ )
    {
        if( ID == m_ID[i] )
        {
            break;
        }
    }

    // didn't find it
    //
    if( i >= m_nCount )
    {
        DbgLog((LOG_TRACE,TRACE_HIGHEST, "deadgraph: not found" ) );
        return E_FAIL;
    }

    IBaseFilter * pFilter = m_pFilter[i];

    hr = _ReviveFilter( pFilter, pGraph );
    ASSERT( !FAILED( hr ) );

    *ppFilter = pFilter;
    (*ppFilter)->AddRef( );

    m_pFilter[i] = 0;
    m_pStopPin[i] = 0;
    m_pStartPin[i] = 0;

#ifdef DEBUG
    ttt1 = timeGetTime( ) - ttt1;
    DbgLog((LOG_TIMING,TRACE_HIGHEST, "deadgraph: ReviveFilter took %ld ms", ttt1 ));
#endif

    return NOERROR;
}

//############################################################################
// 
//############################################################################

HRESULT CDeadGraph::Clear( )
{
    CAutoLock Lock( &m_Lock );

#ifdef DEBUG
    long ttt1 = timeGetTime( );
#endif

    WipeOutGraph( m_pGraph );
    for( int i = 0 ; i < MAX_DEAD ; i++ )
    {
        m_ID[i] = 0;
        m_pStartPin[i] = NULL;
        m_pStopPin[i] = NULL;
        m_pFilter[i] = NULL;
    }
    m_nCount = 0;

#ifdef DEBUG
    ttt1 = timeGetTime( ) - ttt1;
    DbgLog((LOG_TIMING,TRACE_HIGHEST, "deadgraph: Clear took %ld ms", ttt1 ));
#endif

    return 0;
}

//############################################################################
// 
//############################################################################

HRESULT CDeadGraph::GetGraph( IGraphBuilder ** ppGraph )
{
    CAutoLock Lock( &m_Lock );

    CheckPointer( ppGraph, E_POINTER );
    *ppGraph = m_pGraph;
    if( m_pGraph )
    {
        (*ppGraph)->AddRef( );
        return NOERROR;
    }
    else
    {
        return E_FAIL;
    }
}

//############################################################################
// 
//############################################################################

HRESULT CDeadGraph::QueryInterface(REFIID riid, void ** ppv)
{
    if( riid == IID_IDeadGraph || riid == IID_IUnknown ) 
    {
        *ppv = (void *) static_cast< IDeadGraph *> ( this );
        return NOERROR;
    }    
    return E_NOINTERFACE;
}

//############################################################################
// 
//############################################################################

HRESULT CDeadGraph::_SleepFilter( IBaseFilter * pFilter )
{
    HRESULT hr = 0;

    FILTER_INFO fi;
    pFilter->QueryFilterInfo( &fi );
    if( fi.pGraph ) fi.pGraph->Release( );

    // if the graphs are the same, then don't do anything
    if( fi.pGraph == m_pGraph ) return NOERROR;

#ifdef DEBUG
    USES_CONVERSION;
    TCHAR * t = W2T( fi.achName );
    DbgLog((LOG_TRACE,TRACE_HIGHEST, "deadgraph: SleepFilter %s", t ));
#endif

    pFilter->AddRef( );

    // remove it from here...
    CComQIPtr< IGraphConfig, &IID_IGraphConfig > pConfig( fi.pGraph );
    hr = pConfig->RemoveFilterEx( pFilter, REMFILTERF_LEAVECONNECTED );
    ASSERT( !FAILED( hr ) );

    // and put it here
    hr = m_pGraph->AddFilter( pFilter, fi.achName );
    ASSERT( !FAILED( hr ) );

    pFilter->Release( );

    // go through each of the pins on this filter and move connected filters
    // over too
    CComPtr< IEnumPins > pEnum;
    pFilter->EnumPins( &pEnum );

    if( !pEnum )
    {
        return NOERROR;
    }

    while( 1 )
    {
        CComPtr< IPin > pPin;
        ULONG Fetched = 0;
        pEnum->Next( 1, &pPin, &Fetched );
        if( !pPin )
        {
            break;
        }

        CComPtr< IPin > pConnected;
        pPin->ConnectedTo( &pConnected );

        if( pConnected )
        {
            PIN_INFO pi;
            pConnected->QueryPinInfo( &pi );
            if( pi.pFilter ) 
            {
                pi.pFilter->Release( );
                hr = _SleepFilter( pi.pFilter );
                ASSERT( !FAILED( hr ) );
            }
        }
    }

    return NOERROR;
}

//############################################################################
// 
//############################################################################

HRESULT CDeadGraph::_ReviveFilter( IBaseFilter * pFilter, IGraphBuilder * pGraph )
{
    HRESULT hr = 0;

    FILTER_INFO fi;
    pFilter->QueryFilterInfo( &fi );
    if( fi.pGraph ) fi.pGraph->Release( );

    // if the graphs are the same, then don't do anything
    if( pGraph == fi.pGraph ) return NOERROR;

#ifdef DEBUG
    USES_CONVERSION;
    TCHAR * t = W2T( fi.achName );
    DbgLog((LOG_TRACE,TRACE_HIGHEST, "deadgraph: ReviveFilter %s", t ));
#endif

    pFilter->AddRef( );

    // remove it from here...
    CComQIPtr< IGraphConfig, &IID_IGraphConfig > pConfig( m_pGraph );
    hr = pConfig->RemoveFilterEx( pFilter, REMFILTERF_LEAVECONNECTED );
    ASSERT( !FAILED( hr ) );

    // and put it here
    hr = pGraph->AddFilter( pFilter, fi.achName );
    ASSERT( !FAILED( hr ) );

    pFilter->Release( );

    // go through each of the pins on this filter and move connected filters
    // over too
    CComPtr< IEnumPins > pEnum;
    pFilter->EnumPins( &pEnum );

    if( !pEnum )
    {
        return NOERROR;
    }

    while( 1 )
    {
        CComPtr< IPin > pPin;
        ULONG Fetched = 0;
        pEnum->Next( 1, &pPin, &Fetched );
        if( !pPin )
        {
            break;
        }

        CComPtr< IPin > pConnected;
        pPin->ConnectedTo( &pConnected );

        if( pConnected )
        {
            PIN_INFO pi;
            pConnected->QueryPinInfo( &pi );
            if( pi.pFilter ) 
            {
                pi.pFilter->Release( );
                hr = _ReviveFilter( pi.pFilter, pGraph );
                ASSERT( !FAILED( hr ) );
            }
        }
    }

    return NOERROR;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\queue\queue.h ===
//==========================================================================;
//
//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
//  PURPOSE.
//
//  Copyright (c) 1992 - 1999  Microsoft Corporation.  All Rights Reserved.
//
//--------------------------------------------------------------------------;

#ifndef __QUEUE__
#define __QUEUE__

extern const AMOVIESETUP_FILTER sudQueue;

class CDexterQueue;
class CDexterQueueOutputPin;
class CMyOutputQueue;

// class for the filter's Input pin

class CDexterQueueInputPin : public CBaseInputPin
{
    friend class CDexterQueueOutputPin;
    CDexterQueue *m_pQ;                  // Main filter object

public:

    // Constructor and destructor
    CDexterQueueInputPin(TCHAR *pObjName,
                 CDexterQueue *pQ,
                 HRESULT *phr,
                 LPCWSTR pPinName);

    ~CDexterQueueInputPin();

    // Used to check the input pin connection
    HRESULT CheckMediaType(const CMediaType *pmt);
    HRESULT BreakConnect();
    HRESULT Active();
    HRESULT Inactive();

    // Reconnect outputs if necessary at end of completion
    virtual HRESULT CompleteConnect(IPin *pReceivePin);

    STDMETHODIMP NotifyAllocator(IMemAllocator *pAllocator, BOOL bReadOnly);

    // Pass through calls downstream
    STDMETHODIMP EndOfStream();
    STDMETHODIMP BeginFlush();
    STDMETHODIMP EndFlush();
    STDMETHODIMP NewSegment(
                    REFERENCE_TIME tStart,
                    REFERENCE_TIME tStop,
                    double dRate);

    // Handles the next block of data from the stream
    STDMETHODIMP Receive(IMediaSample *pSample);

    int m_cBuffers;	    // number of buffers in allocator
    int m_cbBuffer;	    // size of the allocator buffers

};


// Class for the Queue filter's Output pins.

class CDexterQueueOutputPin : public CBaseOutputPin
{
    friend class CDexterQueueInputPin;
    friend class CDexterQueue;

    CDexterQueue *m_pQ;                  // Main filter object pointer
    CMyOutputQueue *m_pOutputQueue;  // Streams data to the peer pin
    IUnknown *m_pPosition;	// pass seek upstream

public:

    // Constructor and destructor

    CDexterQueueOutputPin(TCHAR *pObjName,
                   CDexterQueue *pQ,
                   HRESULT *phr,
                   LPCWSTR pPinName);

    ~CDexterQueueOutputPin();

    STDMETHODIMP NonDelegatingQueryInterface(REFIID riid, void **ppv);

    // Override to enumerate media types
    STDMETHODIMP EnumMediaTypes(IEnumMediaTypes **ppEnum);

    // Check that we can support an output type
    HRESULT CheckMediaType(const CMediaType *pmt);
    HRESULT SetMediaType(const CMediaType *pmt);
    HRESULT GetMediaType(int iPosition,
                         CMediaType *pMediaType);

    // Negotiation to use our input pins allocator
    HRESULT DecideAllocator(IMemInputPin *pPin, IMemAllocator **ppAlloc);
    HRESULT DecideBufferSize(IMemAllocator *pMemAllocator,
                              ALLOCATOR_PROPERTIES * ppropInputRequest);

    // Used to create output queue objects
    HRESULT Active();
    HRESULT Inactive();

    // Overriden to create and destroy output pins
    HRESULT CompleteConnect(IPin *pReceivePin);

    // Overriden to pass data to the output queues
    HRESULT Deliver(IMediaSample *pMediaSample);
    HRESULT DeliverEndOfStream();
    HRESULT DeliverBeginFlush();
    HRESULT DeliverEndFlush();
    HRESULT DeliverNewSegment(
                    REFERENCE_TIME tStart,
                    REFERENCE_TIME tStop,
                    double dRate);


    // Overriden to handle quality messages
    STDMETHODIMP Notify(IBaseFilter *pSender, Quality q);
};


// Class for the Queue filter

class CDexterQueue: public CCritSec, public CBaseFilter,
		    public IAMOutputBuffering
{
    // Let the pins access our internal state
    friend class CDexterQueueInputPin;
    friend class CDexterQueueOutputPin;
    friend class CMyOutputQueue;

    // Declare an input pin.
    CDexterQueueInputPin m_Input;

    // And an output pin
    CDexterQueueOutputPin m_Output;

    IMemAllocator *m_pAllocator;    // Allocator from our input pin

public:

    DECLARE_IUNKNOWN

    // Reveals IAMOutputBuffering
    STDMETHODIMP NonDelegatingQueryInterface(REFIID riid, void ** ppv);

    CDexterQueue(TCHAR *pName,LPUNKNOWN pUnk,HRESULT *hr);
    ~CDexterQueue();

    CBasePin *GetPin(int n);
    int GetPinCount();

    // Function needed for the class factory
    static CUnknown * WINAPI CreateInstance(LPUNKNOWN pUnk, HRESULT *phr);

    // Send EndOfStream if no input connection
    STDMETHODIMP Run(REFERENCE_TIME tStart);
    STDMETHODIMP Pause();

    // IAMOutputBuffering
    STDMETHODIMP GetOutputBuffering(int *);
    STDMETHODIMP SetOutputBuffering(int);

protected:

    HANDLE m_hEventStall;

    Quality m_qLate;	// last Notify message received
    BOOL m_fLate;	// valid?
    int m_nOutputBuffering;

    // receive lock for the FILTER, not the pin
    CCritSec m_csReceive;
};

// overridden to get number of samples the thread has queued
//
class CMyOutputQueue: public COutputQueue
{

    friend class CDexterQueueInputPin;

public:
    CMyOutputQueue(CDexterQueue *pQ,		// owner filter
		 IPin    *pInputPin,          //  Pin to send stuff to
                 HRESULT   *phr,                //  'Return code'
                 BOOL       bAuto = TRUE,       //  Ask pin if blocks
                 BOOL       bQueue = TRUE,      //  Send through queue (ignored if
                                                //  bAuto set)
                 LONG       lBatchSize = 1,     //  Batch
                 BOOL       bBatchExact = FALSE,//  Batch exactly to BatchSize
                 LONG       lListSize =         //  Likely number in the list
                                DEFAULTCACHE,
                 DWORD      dwPriority =        //  Priority of thread to create
                                THREAD_PRIORITY_NORMAL
                );
    ~CMyOutputQueue();

    CDexterQueue *m_pQ;
    int GetThreadQueueSize();
};


#endif // __QUEUE__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\queue\queue.cpp ===
//==========================================================================;
//
//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
//  PURPOSE.
//
//  Copyright (c) 1992 - 1999  Microsoft Corporation.  All Rights Reserved.
//
//--------------------------------------------------------------------------;

#include <streams.h>
#include <qeditint.h>
#include <qedit.h>
#include "queue.h"

const AMOVIESETUP_MEDIATYPE sudPinTypes =
{
    &MEDIATYPE_Video,        // Major CLSID
    &MEDIASUBTYPE_NULL       // Minor type
};

const AMOVIESETUP_PIN psudPins[] =
{
    { L"Input",             // Pin's string name
      FALSE,                // Is it rendered
      FALSE,                // Is it an output
      FALSE,                // Allowed none
      FALSE,                // Allowed many
      &CLSID_NULL,          // Connects to filter
      L"Output",            // Connects to pin
      1,                    // Number of types
      &sudPinTypes },       // Pin information
    { L"Output",            // Pin's string name
      FALSE,                // Is it rendered
      TRUE,                 // Is it an output
      FALSE,                // Allowed none
      FALSE,                // Allowed many
      &CLSID_NULL,          // Connects to filter
      L"Input",             // Connects to pin
      1,                    // Number of types
      &sudPinTypes },       // Pin information
};

const AMOVIESETUP_FILTER sudQueue =
{
    &CLSID_DexterQueue,       // CLSID of filter
    L"Dexter Queue",          // Filter's name
    MERIT_DO_NOT_USE,       // Filter merit
    2,                      // Number of pins
    psudPins                // Pin information
};

#ifdef FILTER_DLL
//
// Provide the ActiveMovie templates for classes supported by this DLL.
//
CFactoryTemplate g_Templates[] =
{
    {L"Dexter Queue",                         &CLSID_DexterQueue,
        CDexterQueue::CreateInstance, NULL, &sudQueue }
};

int g_cTemplates = sizeof(g_Templates) / sizeof(g_Templates[0]);
#endif

// Using this pointer in constructor
#pragma warning(disable:4355)

//
// CreateInstance
//
// Creator function for the class ID
//
CUnknown * WINAPI CDexterQueue::CreateInstance(LPUNKNOWN pUnk, HRESULT *phr)
{
    return new CDexterQueue(NAME("Dexter Queue Filter"), pUnk, phr);
}

const int TRACE_HIGHEST = 2;
const int TRACE_MEDIUM = 3;
const int TRACE_LOW = 4;
const int TRACE_LOWEST = 5;

// ================================================================
// CDexterQueue Constructor
// ================================================================

CDexterQueue::CDexterQueue(TCHAR *pName, LPUNKNOWN pUnk, HRESULT *phr) :
    m_pAllocator(NULL),
    m_Input(NAME("Input Pin"), this, phr, L"Input"),
    m_Output(NAME("Output Pin"), this, phr, L"Output"),
    CBaseFilter(NAME("Dexter Queue filter"), pUnk, this, CLSID_DexterQueue),
    m_fLate(FALSE),
    m_nOutputBuffering(DEX_DEF_OUTPUTBUF)
{
    ASSERT(phr);
}


//
// Destructor
//
CDexterQueue::~CDexterQueue()
{
}



//
// GetPinCount
//
int CDexterQueue::GetPinCount()
{
    return (2);
}


//
// GetPin
//
CBasePin *CDexterQueue::GetPin(int n)
{
    if (n < 0 || n > 1)
        return NULL ;

    // Pin zero is the one and only input pin
    if (n == 0)
        return &m_Input;
    else
        return &m_Output;
}


STDMETHODIMP CDexterQueue::NonDelegatingQueryInterface(REFIID riid, void ** ppv)
{
    CheckPointer(ppv,E_POINTER);

    if( riid == IID_IAMOutputBuffering )
    {
        return GetInterface( (IAMOutputBuffering*) this, ppv );
    }
    return CBaseFilter::NonDelegatingQueryInterface(riid, ppv);
}


//
// Pause
//
// Overriden to handle no input connections
//
STDMETHODIMP CDexterQueue::Pause()
{
    CAutoLock cObjectLock(m_pLock);
    HRESULT hr = CBaseFilter::Pause();

    if (m_Input.IsConnected() == FALSE) {
        m_Input.EndOfStream();
    }
    return hr;
}


//
// Run
//
// Overriden to handle no input connections
//
STDMETHODIMP CDexterQueue::Run(REFERENCE_TIME tStart)
{
    CAutoLock cObjectLock(m_pLock);

    HRESULT hr = CBaseFilter::Run(tStart);

    // unblock pause stall, AFTER state change has gone through
    SetEvent(m_hEventStall);

    if (m_Input.IsConnected() == FALSE) {
        m_Input.EndOfStream();
    }
    return hr;
}


HRESULT CDexterQueue::GetOutputBuffering(int *pnBuffer)
{
    CheckPointer( pnBuffer, E_POINTER );
    *pnBuffer = m_nOutputBuffering;
    return NOERROR;

}


HRESULT CDexterQueue::SetOutputBuffering(int nBuffer)
{
    // minimum 2, or switch hangs
    if (nBuffer <=1)
	return E_INVALIDARG;
    m_nOutputBuffering = nBuffer;
    return NOERROR;
}


// ================================================================
// CDexterQueueInputPin constructor
// ================================================================

CDexterQueueInputPin::CDexterQueueInputPin(TCHAR *pName,
                           CDexterQueue *pQ,
                           HRESULT *phr,
                           LPCWSTR pPinName) :
    CBaseInputPin(pName, pQ, pQ, phr, pPinName),
    m_pQ(pQ),
    m_cBuffers(0),
    m_cbBuffer(0)
{
    ASSERT(pQ);
}


//
// CDexterQueueInputPin destructor
//
CDexterQueueInputPin::~CDexterQueueInputPin()
{
    //DbgLog((LOG_TRACE, TRACE_MEDIUM,TEXT("CDexterQueueInputPin destructor")));
    ASSERT(m_pQ->m_pAllocator == NULL);
}



HRESULT CDexterQueueInputPin::Active()
{
    return CBaseInputPin::Active();
}


HRESULT CDexterQueueInputPin::Inactive()
{
    // make sure this receive isn't blocking
    SetEvent(m_pQ->m_hEventStall);

    // now wait for receive to complete
    CAutoLock cs(&m_pQ->m_csReceive);

    return CBaseInputPin::Inactive();
}


//
// CheckMediaType
//
HRESULT CDexterQueueInputPin::CheckMediaType(const CMediaType *pmt)
{
    //DbgLog((LOG_TRACE, TRACE_LOW,TEXT("Input::CheckMT %d bit"), HEADER(pmt->Format())->biBitCount));

    CAutoLock lock_it(m_pLock);

    HRESULT hr = NOERROR;

#ifdef DEBUG
    // Display the type of the media for debugging perposes
    //!!!DisplayMediaType(TEXT("Input Pin Checking"), pmt);
#endif

    // The media types that we can support are entirely dependent on the
    // downstream connections. If we have downstream connections, we should
    // check with them - walk through the list calling each output pin

            if (m_pQ->m_Output.m_Connected != NULL) {
                // The pin is connected, check its peer
                hr = m_pQ->m_Output.m_Connected->QueryAccept(pmt);
                if (hr != NOERROR) {
    		    //DbgLog((LOG_TRACE, TRACE_LOW,TEXT("NOT ACCEPTED!")));
                    return VFW_E_TYPE_NOT_ACCEPTED;
		}
            }

    // Either all the downstream pins have accepted or there are none.
    //DbgLog((LOG_TRACE, TRACE_LOW,TEXT("ACCEPTED!")));
    return NOERROR;

} // CheckMediaType


//
// BreakConnect
//
HRESULT CDexterQueueInputPin::BreakConnect()
{
    //DbgLog((LOG_TRACE, TRACE_LOW,TEXT("Input::BreakConnect")));

    // Release any allocator that we are holding
    if (m_pQ->m_pAllocator)
    {
        m_pQ->m_pAllocator->Release();
        m_pQ->m_pAllocator = NULL;
    }
    return NOERROR;

} // BreakConnect


//
// NotifyAllocator
//
STDMETHODIMP
CDexterQueueInputPin::NotifyAllocator(IMemAllocator *pAllocator, BOOL bReadOnly)
{
    CAutoLock lock_it(m_pLock);
    if (pAllocator == NULL)
        return E_FAIL;

    // Free the old allocator if any
    if (m_pQ->m_pAllocator)
        m_pQ->m_pAllocator->Release();

    // Store away the new allocator
    pAllocator->AddRef();
    m_pQ->m_pAllocator = pAllocator;

    ALLOCATOR_PROPERTIES prop;
    HRESULT hr = m_pQ->m_pAllocator->GetProperties(&prop);
    if (SUCCEEDED(hr)) {
        DbgLog((LOG_TRACE, TRACE_MEDIUM,TEXT("Allocator is using %d buffers, size %d"),
						prop.cBuffers, prop.cbBuffer));
	m_cBuffers = prop.cBuffers;
	m_cbBuffer = prop.cbBuffer;
    }

    // Notify the base class about the allocator
    return CBaseInputPin::NotifyAllocator(pAllocator,bReadOnly);

} // NotifyAllocator


//
// EndOfStream
//
HRESULT CDexterQueueInputPin::EndOfStream()
{
    CAutoLock lock_it(m_pLock);
    HRESULT hr = NOERROR;

    DbgLog((LOG_TRACE, TRACE_LOW,TEXT("Queue::EndOfStream")));

    // send the message downstream

    hr = m_pQ->m_Output.DeliverEndOfStream();
    if (FAILED(hr))
        return hr;

    return(NOERROR);

} // EndOfStream


//
// BeginFlush
//
HRESULT CDexterQueueInputPin::BeginFlush()
{
    CAutoLock lock_it(m_pLock);

    // FIRST, make sure future receives will fail
    DbgLog((LOG_TRACE, TRACE_LOW,TEXT("Queue::BeginFlush flushing...")));
    HRESULT hr = CBaseInputPin::BeginFlush();

    // NEXT, make sure this receive isn't blocking
    DbgLog((LOG_TRACE, TRACE_LOW,TEXT("Queue::BeginFlush setting EVENT...")));
    SetEvent(m_pQ->m_hEventStall);

    // Walk through the output pins list, sending the message downstream
    hr = m_pQ->m_Output.DeliverBeginFlush();

    // wait for receive to complete? CAutoLock cs(&m_pQ->m_csReceive);

    return hr;
} // BeginFlush


//
// EndFlush
//
HRESULT CDexterQueueInputPin::EndFlush()
{
    CAutoLock lock_it(m_pLock);
    HRESULT hr = NOERROR;

    // send the message downstream

    hr = m_pQ->m_Output.DeliverEndFlush();
    if (FAILED(hr))
        return hr;

    return CBaseInputPin::EndFlush();

} // EndFlush

//
// NewSegment
//

HRESULT CDexterQueueInputPin::NewSegment(REFERENCE_TIME tStart,
                                 REFERENCE_TIME tStop,
                                 double dRate)
{
    CAutoLock lock_it(m_pLock);
    HRESULT hr = NOERROR;

    // send the message downstream

    hr = m_pQ->m_Output.DeliverNewSegment(tStart, tStop, dRate);
    if (FAILED(hr))
        return hr;

    return CBaseInputPin::NewSegment(tStart, tStop, dRate);

} // NewSegment


//
// Receive
//
HRESULT CDexterQueueInputPin::Receive(IMediaSample *pSample)
{
    CAutoLock cs(&m_pQ->m_csReceive);

    // Check that all is well with the base class
    HRESULT hr = NOERROR;
    hr = CBaseInputPin::Receive(pSample);
    if (hr != NOERROR) {
        //DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("Base class ERROR!")));
        return hr;
    }

    // if no Q, no receivey
    //
    if( !m_pQ->m_Output.m_pOutputQueue )
    {
        return S_FALSE;
    }

    //DbgLog((LOG_TRACE, TRACE_LOW,TEXT("Queue::Receive")));

    int size = m_pQ->m_Output.m_pOutputQueue->GetThreadQueueSize();
    DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("Queue::Receive, %d already on q"), size));

    // Our queue will block in pause mode if the filter we delivered to
    // has blocked.  As long as the downstream guy is satisfied that it
    // has enough pre-roll, why should we waste time queuing up samples that
    // just might get thrown away if we seek before running?
    //
    // Doing this GREATLY IMPROVES performance of seeking; otherwise we read
    // and decode and process 20 frames every seek!

    // We'll actually even hang the big switch if we don't do this!  If during
    // a seek, this queue is allowed to fill up, that makes all of the buffers
    // in the switch's pool allocator (common to all input pins) busy.
    // Well, the switch's GetBuffer will then block waiting for a buffer, and
    // flushing won't be able to unblock the pin's receive thread (since it's
    // getting buffers from an allocator that doesn't belong to it).
    //

    while (m_pQ->m_State == State_Paused && size > 0) {
        DbgLog((LOG_TRACE, TRACE_LOW,TEXT("Queue::Receive blocking...")));
	WaitForSingleObject(m_pQ->m_hEventStall, INFINITE);
        size = m_pQ->m_Output.m_pOutputQueue->GetThreadQueueSize();
	if (m_bFlushing)
	    break;
    }
    //DbgLog((LOG_TRACE, TRACE_LOW,TEXT("Queue::Receive good to go...")));

    hr = m_pQ->m_Output.Deliver(pSample);

    // We have received a quality message we need to pass upstream.  We need
    // to do this on the thread that the switch delivered to us, not on the
    // queue's thread that got the quality message, or the switch will hang.
    if (m_pQ->m_fLate)
	PassNotify(m_pQ->m_qLate);
    m_pQ->m_fLate = FALSE;

    // This will prevent us from receiving any more data!
    if (hr != NOERROR) {
        DbgLog((LOG_ERROR,1,TEXT("ERROR: failing Receive")));
        return hr;
    }
    return NOERROR;

} // Receive


//
// Completed a connection to a pin
//
HRESULT CDexterQueueInputPin::CompleteConnect(IPin *pReceivePin)
{
    //DbgLog((LOG_TRACE, TRACE_LOW,TEXT("Input::CompleteConnect %d bit"), HEADER(m_mt.Format())->biBitCount));

    HRESULT hr = CBaseInputPin::CompleteConnect(pReceivePin);
    if (FAILED(hr)) {
        return hr;
    }

    // Force any output pins to use our type

    // Check with downstream pin
    if (m_pQ->m_Output.m_Connected != NULL) {
        if (m_mt != m_pQ->m_Output.m_mt) {
    	    //DbgLog((LOG_TRACE, TRACE_LOW,TEXT("IN Connected: RECONNECT OUT")));
            m_pQ->ReconnectPin(&m_pQ->m_Output, &m_mt);
	}
    }
    return S_OK;
}


// ================================================================
// CDexterQueueOutputPin constructor
// ================================================================

CDexterQueueOutputPin::CDexterQueueOutputPin(TCHAR *pName,
                             CDexterQueue *pQ,
                             HRESULT *phr,
                             LPCWSTR pPinName) :
    CBaseOutputPin(pName, pQ, pQ, phr, pPinName) ,
    m_pOutputQueue(NULL),
    m_pQ(pQ),
    m_pPosition(NULL)
{
    ASSERT(pQ);
}



//
// CDexterQueueOutputPin destructor
//
CDexterQueueOutputPin::~CDexterQueueOutputPin()
{
    ASSERT(m_pOutputQueue == NULL);
    if (m_pPosition) m_pPosition->Release();
}



STDMETHODIMP
CDexterQueueOutputPin::NonDelegatingQueryInterface(REFIID riid, void **ppv)
{
    if (riid == IID_IMediaSeeking) {

        if (m_pPosition == NULL) {

            HRESULT hr = CreatePosPassThru(
                             GetOwner(),
                             FALSE,
                             (IPin *)&m_pQ->m_Input,
                             &m_pPosition);
            if (FAILED(hr)) {
                return hr;
            }
        }
        return m_pPosition->QueryInterface(riid, ppv);
    } else {
        return CBaseOutputPin::NonDelegatingQueryInterface(riid, ppv);
    }
}


//
// DecideBufferSize
//
// This has to be present to override the PURE virtual class base function
//
HRESULT CDexterQueueOutputPin::DecideBufferSize(IMemAllocator *pMemAllocator,
                                        ALLOCATOR_PROPERTIES * ppropInputRequest)
{
    return NOERROR;

} // DecideBufferSize


//
// DecideAllocator
//
HRESULT CDexterQueueOutputPin::DecideAllocator(IMemInputPin *pPin, IMemAllocator **ppAlloc)
{
    ASSERT(m_pQ->m_pAllocator != NULL);
    *ppAlloc = NULL;

    HRESULT hr = NOERROR;
    hr = pPin->NotifyAllocator(m_pQ->m_pAllocator, m_pQ->m_Input.m_bReadOnly);
    if (FAILED(hr))
        return hr;

    // Return the allocator
    *ppAlloc = m_pQ->m_pAllocator;
    m_pQ->m_pAllocator->AddRef();
    return NOERROR;

} // DecideAllocator


//
// CheckMediaType
//
HRESULT CDexterQueueOutputPin::CheckMediaType(const CMediaType *pmt)
{
    CAutoLock lock_it(m_pLock);
    //DbgLog((LOG_TRACE, TRACE_LOW,TEXT("TTOut: CheckMT %d bit"), HEADER(pmt->Format())->biBitCount));

    HRESULT hr = NOERROR;

#ifdef DEBUG
    // Display the type of the media for debugging purposes
    //!!!DisplayMediaType(TEXT("Output Pin Checking"), pmt);
#endif

    // The input needs to have been connected first
    if (m_pQ->m_Input.m_Connected == NULL) {
        //DbgLog((LOG_TRACE, TRACE_LOW,TEXT("FAIL: In not connected")));
        return VFW_E_NOT_CONNECTED;
    }

    // If it doesn't match our input type, the input better be willing to
    // reconnect, and the other output better be too
    if (*pmt != m_pQ->m_Input.m_mt) {
        //DbgLog((LOG_TRACE, TRACE_LOW,TEXT("Hmmm.. not same as input type")));
	CDexterQueueOutputPin *pOut = &m_pQ->m_Output;
	IPin *pCon = pOut->m_Connected;
	if (pOut != this && pCon) {
	    if (pCon->QueryAccept(pmt) != S_OK) {
        	//DbgLog((LOG_TRACE, TRACE_LOW,TEXT("FAIL:Other out can't accept")));
		return VFW_E_TYPE_NOT_ACCEPTED;
	    }
	}
	hr = m_pQ->m_Input.m_Connected->QueryAccept(pmt);
	if (hr != S_OK) {
            //DbgLog((LOG_TRACE, TRACE_LOW,TEXT("FAIL: In can't reconnect")));
            return VFW_E_TYPE_NOT_ACCEPTED;
	}
    }

    return NOERROR;

} // CheckMediaType


//
// EnumMediaTypes
//
STDMETHODIMP CDexterQueueOutputPin::EnumMediaTypes(IEnumMediaTypes **ppEnum)
{
    CAutoLock lock_it(m_pLock);
    ASSERT(ppEnum);

    // Make sure that we are connected
    if (m_pQ->m_Input.m_Connected == NULL)
        return VFW_E_NOT_CONNECTED;

    return CBaseOutputPin::EnumMediaTypes (ppEnum);
} // EnumMediaTypes

//
// GetMediaType
//
HRESULT CDexterQueueOutputPin::GetMediaType(
    int iPosition,
    CMediaType *pMediaType
    )
{
    // Make sure that we have an input connected
    if (m_pQ->m_Input.m_Connected == NULL)
        return VFW_E_NOT_CONNECTED;

    IEnumMediaTypes *pEnum;
    HRESULT hr;

    // the first thing we offer is the current type other pins are connected
    // with... because if one output pin is connected to a filter whose input
    // pin offers media types, the current connected type might not be in
    // the list we're about to enumerate!
    if (iPosition == 0) {
	*pMediaType = m_pQ->m_Input.m_mt;
	return S_OK;
    }

    // offer all the types the filter upstream of us can offer, because we
    // may be able to reconnect and end up using any of them.
    AM_MEDIA_TYPE *pmt;
    hr = m_pQ->m_Input.m_Connected->EnumMediaTypes(&pEnum);
    if (hr == NOERROR) {
        ULONG u;
	if (iPosition > 1)
            pEnum->Skip(iPosition - 1);
        hr = pEnum->Next(1, &pmt, &u);
        pEnum->Release();
	if (hr == S_OK) {
	    *pMediaType = *pmt;
	    DeleteMediaType(pmt);
	    return S_OK;
	} else {
	    return VFW_S_NO_MORE_ITEMS;
	}
    } else {
        return E_FAIL;
    }

} // GetMediaType

//
// SetMediaType
//
HRESULT CDexterQueueOutputPin::SetMediaType(const CMediaType *pmt)
{
    CAutoLock lock_it(m_pLock);

#ifdef DEBUG
    // Display the format of the media for debugging purposes
    // !!! DisplayMediaType(TEXT("Output pin type agreed"), pmt);
#endif

    // Make sure that we have an input connected
    if (m_pQ->m_Input.m_Connected == NULL)
        return VFW_E_NOT_CONNECTED;

    // Make sure that the base class likes it
    HRESULT hr = NOERROR;
    hr = CBaseOutputPin::SetMediaType(pmt);
    if (FAILED(hr))
        return hr;

    return NOERROR;

} // SetMediaType


//
// CompleteConnect
//
HRESULT CDexterQueueOutputPin::CompleteConnect(IPin *pReceivePin)
{
    CAutoLock lock_it(m_pLock);
    ASSERT(m_Connected == pReceivePin);
    HRESULT hr = NOERROR;

    //DbgLog((LOG_TRACE, TRACE_LOW,TEXT("Output::CompleteConnect %d bit"), HEADER(m_mt.Format())->biBitCount));

    hr = CBaseOutputPin::CompleteConnect(pReceivePin);
    if (FAILED(hr))
        return hr;

    // If the type is not the same as that stored for the input
    // pin then force the input pins peer to be reconnected

    if (m_mt != m_pQ->m_Input.m_mt)
    {
    	//DbgLog((LOG_TRACE, TRACE_LOW,TEXT("OUT Connected: RECONNECT IN")));
        hr = m_pQ->ReconnectPin(m_pQ->m_Input.m_Connected, &m_mt);
        if(FAILED(hr)) {
            return hr;
        }
    }

    return NOERROR;

} // CompleteConnect


//
// Active
//
// This is called when we transition from stop to paused. We create the
// output queue object to send data to our associated peer pin
//
HRESULT CDexterQueueOutputPin::Active()
{
    CAutoLock lock_it(m_pLock);
    HRESULT hr = NOERROR;

    // Make sure that the pin is connected
    if (m_Connected == NULL)
        return NOERROR;

    // Create the output queue if we have to
    if (m_pOutputQueue == NULL)
    {
        m_pQ->m_hEventStall = CreateEvent(NULL, FALSE, FALSE, NULL);
        if (m_pQ->m_hEventStall == NULL)
	    return E_OUTOFMEMORY;

 	// ALWAYS use a separate thread... with as many buffers as we've been
	// told to use
        DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("Making a Q %d big"),
					m_pQ->m_nOutputBuffering));
        m_pOutputQueue = new CMyOutputQueue(m_pQ, m_Connected, &hr, FALSE,
				TRUE, 1, FALSE, m_pQ->m_nOutputBuffering,
				THREAD_PRIORITY_NORMAL);
        if (m_pOutputQueue == NULL)
            return E_OUTOFMEMORY;

        // Make sure that the constructor did not return any error
        if (FAILED(hr))
        {
            delete m_pOutputQueue;
            m_pOutputQueue = NULL;
            return hr;
        }

	m_pOutputQueue->SetPopEvent(m_pQ->m_hEventStall);
    }

    // Pass the call on to the base class
    CBaseOutputPin::Active();
    return NOERROR;

} // Active


//
// Inactive
//
// This is called when we stop streaming
// We delete the output queue at this time
//
HRESULT CDexterQueueOutputPin::Inactive()
{
    CAutoLock lock_it(m_pLock);

    // make sure we sync with receive, or it may hammer on the output Q.
    //
    CAutoLock cs(&m_pQ->m_csReceive);

    // Delete the output queue associated with the pin.  This will close the
    // handle
    if (m_pOutputQueue)
    {
        delete m_pOutputQueue;
        m_pOutputQueue = NULL;
    }

    // now close the handle after the queue has gone away
    if (m_pQ->m_hEventStall)
    {
	CloseHandle(m_pQ->m_hEventStall);
        m_pQ->m_hEventStall = NULL;
    }

    CBaseOutputPin::Inactive();
    return NOERROR;

} // Inactive


//
// Deliver
//
HRESULT CDexterQueueOutputPin::Deliver(IMediaSample *pMediaSample)
{
    HRESULT hr = NOERROR;

    // Make sure that we have an output queue
    if (m_pOutputQueue == NULL)
        return NOERROR;

    pMediaSample->AddRef();
    //DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("Putting on capture Q")));
    return m_pOutputQueue->Receive(pMediaSample);
} // Deliver


//
// DeliverEndOfStream
//
HRESULT CDexterQueueOutputPin::DeliverEndOfStream()
{
    // Make sure that we have an output queue
    if (m_pOutputQueue == NULL)
        return NOERROR;

    DbgLog((LOG_TRACE, TRACE_LOW,TEXT("Queue::DeliverEndOfStream")));

    m_pOutputQueue->EOS();
    return NOERROR;

} // DeliverEndOfStream


//
// DeliverBeginFlush
//
HRESULT CDexterQueueOutputPin::DeliverBeginFlush()
{
    // Make sure that we have an output queue
    if (m_pOutputQueue == NULL)
        return NOERROR;

    m_pOutputQueue->BeginFlush();
    return NOERROR;

} // DeliverBeginFlush


//
// DeliverEndFlush
//
HRESULT CDexterQueueOutputPin::DeliverEndFlush()
{
    // Make sure that we have an output queue
    if (m_pOutputQueue == NULL)
        return NOERROR;

    m_pOutputQueue->EndFlush();
    return NOERROR;

} // DeliverEndFlish

//
// DeliverNewSegment
//
HRESULT CDexterQueueOutputPin::DeliverNewSegment(REFERENCE_TIME tStart,
                                         REFERENCE_TIME tStop,
                                         double dRate)
{
    // Make sure that we have an output queue
    if (m_pOutputQueue == NULL)
        return NOERROR;

    m_pOutputQueue->NewSegment(tStart, tStop, dRate);
    return NOERROR;

} // DeliverNewSegment


//
// Notify - pass it upstream
//
STDMETHODIMP CDexterQueueOutputPin::Notify(IBaseFilter *pSender, Quality q)
{
    m_pQ->m_qLate = q;
    m_pQ->m_fLate = TRUE;
    return E_FAIL;	// renderer, keep trying yourself
}




CMyOutputQueue::CMyOutputQueue(CDexterQueue *pQ, IPin *pInputPin, HRESULT *phr,
                 		BOOL bAuto, BOOL bQueue, LONG lBatchSize,
                 		BOOL bBatchExact, LONG lListSize,
                 		DWORD dwPriority) :
    COutputQueue(pInputPin, phr, bAuto, bQueue, lBatchSize, bBatchExact,
			lListSize, dwPriority)
{
    m_pQ = pQ;
}


CMyOutputQueue::~CMyOutputQueue()
{
}


// how many samples are queued but not sent?
int CMyOutputQueue::GetThreadQueueSize()
{
    if (m_List)
        return m_List->GetCount();
    else
	return 0;
}


#ifdef FILTER_DLL
//
// DllRegisterServer
//
STDAPI DllRegisterServer()
{
    return AMovieDllRegisterServer2( TRUE );
}


//
// DllUnregisterServer
//
STDAPI
DllUnregisterServer()
{
    return AMovieDllRegisterServer2( FALSE );
}
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\render\grid.cpp ===
// Copyright (c) 1998 - 1999  Microsoft Corporation.  All Rights Reserved.
#include <streams.h>
#include "stdafx.h"
#include "grid.h"
#include "..\util\filfuncs.h"
#include "..\util\perf_defs.h"

#define GROW_SIZE 256
#define RENDER_TRACE_LEVEL 5
#define RENDER_DUMP_LEVEL 1
const int TRACE_HIGHEST = 2;
const int TRACE_MEDIUM = 3;
const int TRACE_LOW = 4;
const int TRACE_LOWEST = 5;


CTimingCol::CTimingCol( CTimingGrid * pGrid )
: m_rtStart( 0 )
, m_rtStop( 0 )
, m_pNext( NULL )
, m_pPrev( NULL )
, m_pHeadBox( NULL )
, m_pTailBox( NULL )
//, m_nBoxCount( 0 )
, m_pGrid( pGrid )
{
}

CTimingCol::~CTimingCol( )
{
    // delete all the boxes in the list
    //
    CTimingBox * pBox = m_pHeadBox;
    while( pBox )
    {
        CTimingBox * pTemp = pBox;
        pBox = pBox->m_pNext;
        delete pTemp;
    }
}

CTimingBox * CTimingCol::GetRowBox( long Row )
{
    // do a run of the array and see if we have the asked
    // for box at the row. If not, return NULL.
    // !!! to make this faster, we could start at the tail,
    // if we had a clue about the row #'s in our little list
    //
    for( CTimingBox * pBox = m_pHeadBox ; pBox ; pBox = pBox->m_pNext )
    {
        if( pBox->m_nRow == Row )
        {
            // treat unassigned boxes as if they weren't there
            //
            if( pBox->m_nValue == ROW_PIN_UNASSIGNED )
            {
                return NULL;
            }

            return pBox;
        }
        if( pBox->m_nRow > Row )
        {
            return NULL;
        }
    }
    return NULL;
}

CTimingBox * CTimingCol::GetRowBoxDammit( long Row )
{
    // do a run of the array and see if we have the asked
    // for box at the row. If not, return NULL.
    // !!! to make this faster, we could start at the tail,
    // if we had a clue about the row #'s in our little list
    //
    for( CTimingBox * pBox = m_pHeadBox ; pBox ; pBox = pBox->m_pNext )
    {
        if( pBox->m_nRow == Row )
        {
            return pBox;
        }
        if( pBox->m_nRow > Row )
        {
            return NULL;
        }
    }
    return NULL;
}

CTimingBox * CTimingCol::GetGERowBox( long Row )
{
    for( CTimingBox * pBox = m_pHeadBox ; pBox ; pBox = pBox->m_pNext )
    {
        if( pBox->m_nRow >= Row && pBox->m_nValue != ROW_PIN_UNASSIGNED )
        {
            return pBox;
        }
    }
    return NULL;
}

CTimingBox * CTimingCol::GetEarlierRowBox( long RowToBeEarlierThan )
{
    for( CTimingBox * pBox = m_pTailBox ; pBox ; pBox = pBox->m_pPrev )
    {
        if( pBox->m_nRow < RowToBeEarlierThan && pBox->m_nValue != ROW_PIN_UNASSIGNED )
        {
            return pBox;
        }
    }
    return NULL;
}

CTimingBox * CTimingCol::GetHeadBox( )
{
    // treat unassigned boxes as if they weren't there
    // !!! can this cause a bug?
    //
    CTimingBox * pBox = m_pHeadBox;
    while( pBox && pBox->m_nValue == ROW_PIN_UNASSIGNED )
        pBox = pBox->m_pNext;
    return pBox;
}

CTimingBox * CTimingCol::GetTailBox( )
{
    // treat unassigned boxes as if they weren't there
    // !!! can this cause a bug?
    //
    CTimingBox * pBox = m_pTailBox;
    while( pBox && pBox->m_nValue == ROW_PIN_UNASSIGNED )
        pBox = pBox->m_pPrev;
    return pBox;
}

// add a box with the given row, or replace a box that's already there
// this either adds the newly allocated box to the array, or if it's
// already the same row, sets the values and deletes the passed in new box
//
void CTimingCol::AddBox( CTimingBox * b )
{
    //m_nBoxCount++;

    // if we don't already have a head, then this is it
    //
    if( !m_pHeadBox )
    {
        m_pHeadBox = b;
        m_pTailBox = b;
        return;
    }

    // if the same last row, then change it
    //
    if( b->m_nRow == m_pTailBox->m_nRow )
    {
        m_pTailBox->m_nValue = b->m_nValue;
        m_pTailBox->m_nVCRow = b->m_nVCRow;
        //m_nBoxCount--;
        delete b; // don't need it
        return;
    }

    // if the new row is > the last row, just add it
    //
    if( b->m_nRow >= m_pTailBox->m_nRow )
    {
        m_pTailBox->m_pNext = b;
        b->m_pPrev = m_pTailBox;
        m_pTailBox = b;
        return;
    }

    // we need to find where to insert it
    //
    CTimingBox * pBox = m_pTailBox;
    while( pBox && ( b->m_nRow < pBox->m_nRow ) )
    {
        pBox = pBox->m_pPrev;
    }

    // this box we're trying to add is the smallest!
    // Well, our search didn't work very well, did it?
    //
    if( !pBox )
    {
        b->m_pNext = m_pHeadBox;
        m_pHeadBox->m_pPrev = b;
        m_pHeadBox = b;
        return;
    }

    // if the box has the same row, then change it's values
    //
    ASSERT( !( pBox->m_nRow == b->m_nRow ) );
    if( pBox->m_nRow == b->m_nRow )
    {
        pBox->m_nValue = b->m_nValue;
        pBox->m_nVCRow = b->m_nVCRow;
        //m_nBoxCount--;
        delete b; // don't need it
        return;
    }

    // the box needs inserted after pBox
    //
    b->m_pPrev = pBox;
    b->m_pNext = pBox->m_pNext;
    pBox->m_pNext->m_pPrev = b;
    pBox->m_pNext = b;
    return;
}

bool CTimingCol::Split( REFERENCE_TIME SplitTime, CTimingCol ** ppTail )
{
    DbgTimer Timer1( "(grid) CTimingCol::Split" );

    // make a new column
    //
    CTimingCol * pNewCol = new CTimingCol( m_pGrid );
    if( !pNewCol )
    {
        return false;
    }

    if( SplitTime > m_rtStop )
    {
        // faked out. Actually asked us to add a column after us.
        // this CANNOT happen for a col that is not the last one
        // in the list, since all the start/stop times are back to
        // back. Just add a blank one after us.
        //
        pNewCol->m_rtStart = m_rtStop;
        pNewCol->m_rtStop = SplitTime;
    }
    else
    {
        // split the column into two. Copy over all the boxes
        // to the new column
        //
        for( CTimingBox * pBox = m_pHeadBox ; pBox ; pBox = pBox->m_pNext )
        {
            // treat unassigned boxes as if they weren't there
            //
            if( pBox->m_nValue != ROW_PIN_UNASSIGNED )
            {
                CTimingBox * pNewBox = new CTimingBox( pBox );
                if( !pNewBox )
                {
                    delete pNewCol;
                    return false;
                }
                pNewCol->AddBox( pNewBox );
            }
        }

        pNewCol->m_rtStart = SplitTime;
        pNewCol->m_rtStop = m_rtStop;
        m_rtStop = SplitTime;
    }

    // link the new one in
    //
    pNewCol->m_pNext = m_pNext;
    pNewCol->m_pPrev = this;
    if( m_pNext )
    {
        m_pNext->m_pPrev = pNewCol;
    }
    m_pNext = pNewCol;
    *ppTail = pNewCol;

    return true;
}

bool CTimingCol::Prune( )
{
    // go from top to bottom and look for any box that
    // has a VC row. When we find one, follow the VC chain
    // to it's completion and see if there's one MORE
    // output ahead of it, if there is, we can trash
    // this chain.

    for( CTimingBox * pBox = m_pHeadBox ; pBox ; pBox = pBox->m_pNext )
    {

        // didn't go to a vc row, continue
        //
        if( pBox->m_nVCRow == ROW_PIN_UNASSIGNED )
        {
            continue;
        }

        CTimingBox *pTemp1 = pBox;
        long vcrow = pBox->m_nVCRow;

        while( vcrow != ROW_PIN_UNASSIGNED )
        {
            pTemp1 = GetRowBoxDammit(vcrow);

            ASSERT( pTemp1 );
            if( !pTemp1 )
            {
                ASSERT( pTemp1 );
                return false; // shouldn't ever happen
            }

            vcrow = pTemp1->m_nVCRow;

        }

        // there sometimes aren't virtual connected rows all the way through
        // a valid chain (like for audio mixing) so it this chain just stops,
        // it's probably a valid chain, so don't prune it!
        if( pTemp1->m_nValue != ROW_PIN_OUTPUT && pTemp1->m_nValue != ROW_PIN_UNASSIGNED ) {
            continue;
        }

        CTimingBox * pTempStop = pTemp1;
        CTimingBox * pTemp2 = pTemp1->m_pNext;
        bool FoundOut = false;
        while( pTemp2 )
        {
            if( pTemp2->m_nValue == ROW_PIN_OUTPUT )
            {
                FoundOut = true;
                break;
            }

            pTemp2 = pTemp2->m_pNext;
        }

        // if we found another output, we need to blank out
        // this chain
        //
        if( FoundOut )
        {
            pTemp1 = pBox;
            while( pTemp1 )
            {
                DbgLog( ( LOG_TRACE, RENDER_TRACE_LEVEL, "in col at time %ld, pruning box at row %ld, VC = %ld", long( m_rtStart/10000), pTemp1->m_nRow, pTemp1->m_nVCRow ) );
                int n = pTemp1->m_nVCRow;
                pTemp1->m_nValue = ROW_PIN_UNASSIGNED;
                pTemp1->m_nVCRow = ROW_PIN_UNASSIGNED;
                if( pTemp1 == pTempStop )
                {
                    break;
                }
                pTemp1 = GetRowBoxDammit(n);
            }
        }

    } // for pBox

    // go through each of the boxes from bottom up and
    // leave out all the duplicate outputs, so we don't have
    // to parse them later
    //
    CTimingBox * pHead = NULL;
    CTimingBox * pTail = NULL;
    long FoundOut = 0;

    for( pBox = m_pTailBox ; pBox ; pBox = pBox->m_pPrev )
    {
        // ignore unassigned ones
        //
        if( pBox->m_nValue == ROW_PIN_UNASSIGNED )
        {
            continue;
        }

        // ignore dups
        //
        if( pBox->m_nValue == ROW_PIN_OUTPUT )
        {
            FoundOut++;
            if( FoundOut > 1 )
            {
//                DbgLog( ( LOG_TRACE, RENDER_TRACE_LEVEL, "in col at time %ld, skipping dup out at row %ld", long( m_rtStart/10000), pBox->m_nRow ) );
                continue;
            }
        }

        // add it
        //
        CTimingBox * pNewBox = new CTimingBox( pBox );

        // error condition
        //
        if( !pNewBox )
        {
            while( pHead )
            {
                CTimingBox * t = pHead;
                pHead = pHead->m_pNext;
                delete t;
            }
            return false;
        }
        pNewBox->m_pNext = pHead;
        if( !pTail )
        {
            pTail = pNewBox;
            pHead = pNewBox;
        }
        else
        {
            pHead->m_pPrev = pNewBox;
            pHead = pNewBox;
        }
    }

    // if there wasn't any rows that go to the output,
    // we need to add one now. THIS SHOULD NEVER HAPPEN!
    // (but who knows, right?....)
    //
    if( !FoundOut )
    {
        // if there's an new chain that's already been
        // created, go delete it now
        //
        while( pHead )
        {
            CTimingBox * t = pHead;
            pHead = pHead->m_pNext;
            delete t;
        }

        // create one blank box at row 0, just to keep somebody happy
        //
        pHead = pTail = new CTimingBox( 0, ROW_PIN_OUTPUT );
        if( !pHead )
        {
            return false;
        }

        m_pGrid->m_pRowArray[0].m_bBlank = false;
    }

    // delete old list
    //
    while( m_pHeadBox )
    {
        CTimingBox * t = m_pHeadBox;
        m_pHeadBox = m_pHeadBox->m_pNext;
        delete t;
    }

    m_pHeadBox = pHead;
    m_pTailBox = pTail;

#ifdef DEBUG
    for( pBox = m_pHeadBox ; pBox ; pBox = pBox->m_pNext )
    {
        for( CTimingBox * pBox2 = m_pHeadBox ; pBox2 ; pBox2 = pBox2->m_pNext )
        {
            if( pBox2 == pBox ) continue;

            ASSERT( pBox->m_nValue != pBox2->m_nValue );
        }
    }
#endif

    return true;
}

#ifdef DEBUG
void CTimingCol::print( )
{
    for( CTimingBox * pBox = m_pHeadBox ; pBox ; pBox = pBox->m_pNext )
    {
        DbgLog( ( LOG_TIMING, 1, "box row %d val %d", pBox->m_nRow, pBox->m_nValue ) );
    }
}
#endif

// $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
// $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
// $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
// $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

CTimingGrid::CTimingGrid( )
: m_pRowArray( NULL )
, m_pHeadCol( NULL )
, m_pTailCol( NULL )
, m_nRows( 0 )
, m_pRow( NULL )
, m_nCurrentRow( 0 )
, m_nMaxRowUsed( -1 )   // only used in for loops
, m_pTempCol( NULL )
, m_bStartNewRow( true )
, m_nBlankLevel( 0 )
, m_rtBlankDuration( 0 )
{
}

CTimingGrid::~CTimingGrid( )
{
    delete [] m_pRowArray;
    CTimingCol * pCol = m_pHeadCol;
    while( pCol )
    {
        CTimingCol * pTemp = pCol;
        pCol = pCol->m_pNext;
        delete pTemp;
    }
}

void CTimingGrid::DumpGrid( )
{

#ifdef DEBUG
    if (!DbgCheckModuleLevel(LOG_TRACE,RENDER_DUMP_LEVEL))
        return;

#define RENDER_BUFFER_DEBUG_SIZE 512

    DbgLog((LOG_TRACE,RENDER_DUMP_LEVEL,TEXT("              ===========<DUMPGRID>============")));
    TCHAR buf1[2560];
    TCHAR buf2[2560];
    _tcscpy( buf1, TEXT(" ROW   DD  TT  SP  MR  ") );
    for( CTimingCol * pCol = m_pHeadCol ; pCol ; pCol = pCol->m_pNext )
    {
        if( _tcslen( buf1 ) > RENDER_BUFFER_DEBUG_SIZE )
        {
            break;
        }
        wsprintf( buf2, TEXT("%05d "), (long) pCol->m_rtStart / 10000 );
        _tcscat( buf1, buf2 );
    }
    DbgLog((LOG_TRACE,RENDER_DUMP_LEVEL,TEXT("%s"), buf1));

    _tcscpy( buf1, TEXT(" ROW   DD  TT  SP  MR  ") );
    for( pCol = m_pHeadCol ; pCol ; pCol = pCol->m_pNext )
    {
        if( _tcslen( buf1 ) > RENDER_BUFFER_DEBUG_SIZE )
        {
            break;
        }
        wsprintf( buf2, TEXT("%05d "), (long) pCol->m_rtStop / 10000 );
        _tcscat( buf1, buf2 );
    }
    DbgLog((LOG_TRACE,RENDER_DUMP_LEVEL,TEXT("%s"), buf1));


    for( int row = 0 ; row <= m_nMaxRowUsed ; row++ )
    {
        REFERENCE_TIME InOut = -1;
        REFERENCE_TIME Stop = -1;
        long Value;
        buf1[0] = 0;
        char cc = ' ';
        if( m_pRowArray[row].m_bIsSource )
        {
            cc = '!';
        }
        wsprintf( buf1, TEXT("%04d %c%03d %03d %03d %03d "), row, cc, m_pRowArray[row].m_nModDepth, m_pRowArray[row].m_nTrack, m_pRowArray[row].m_nSwitchPin, m_pRowArray[row].m_nMergeRow );

        for( CTimingCol * pCol = m_pHeadCol ; pCol ; pCol = pCol->m_pNext )
        {
            CTimingBox * pBox = pCol->GetRowBox( row );
            long VCRow = ROW_PIN_UNASSIGNED;
            long Value = ROW_PIN_UNASSIGNED - 1;
            if( pBox )
            {
                Value = pBox->m_nValue;
                VCRow = pBox->m_nVCRow;
            }

            if( Value == ROW_PIN_OUTPUT )
            {
                _tcscpy( buf2, TEXT("   OUT") );
            }
            else if( Value == -1 )
            {
                _tcscpy( buf2, TEXT("   ...") );
            }
            else if( Value == -2 )
            {
                _tcscpy( buf2, TEXT("    . ") );
            }
            else if( Value >= 0 )
            {
                wsprintf( buf2, TEXT("   %03d"), Value );
            }
            _tcscat( buf1, buf2 );

            if( _tcslen( buf1 ) > RENDER_BUFFER_DEBUG_SIZE )
            {
                break;
            }

        } // for pCol

        DbgLog((LOG_TRACE,RENDER_DUMP_LEVEL,TEXT("%s"), buf1));
    }
#endif
}


bool CTimingGrid::PruneGrid( )
{
    DbgLog((LOG_TRACE, RENDER_TRACE_LEVEL, TEXT("RENDG::PRUNE the grid")));

    // remove duplicate pins which want to go to the output and unassigned
    //
    for( CTimingCol * pCol = m_pHeadCol ; pCol ; pCol = pCol->m_pNext )
    {
        bool b = pCol->Prune( );
        if( !b ) return false;
    } // for pCol

    // find the merge rows first
    //
    for( int r = m_nMaxRowUsed ; r >= 1 ; r-- )
    {
        m_pRowArray[r].m_nMergeRow = -1;

        for( int r2 = r - 1 ; r2 >= 0 ; r2-- )
        {
            if( m_pRowArray[r2].m_nSwitchPin == m_pRowArray[r].m_nSwitchPin &&
                   !m_pRowArray[r2].m_bBlank && !m_pRowArray[r].m_bBlank)
            {
                m_pRowArray[r].m_nMergeRow = r2;
            }
        }
    }

    // merge emulated rows back into original row
    //
    for( pCol = m_pHeadCol ; pCol ; pCol = pCol->m_pNext )
    {
        for( CTimingBox * pBox = pCol->GetHeadBox( ) ; pBox ; pBox = pBox->Next( ) )
        {
            long r = pBox->m_nRow;
            long v = pBox->m_nValue;
            long vc = pBox->m_nVCRow;
            long MergeRow = m_pRowArray[r].m_nMergeRow;

            // if no merge row, then continue
            //
            if( MergeRow == -1 )
            {
                continue;
            }

            if( MergeRow == r )
            {
                continue;
            }

            if( v == ROW_PIN_UNASSIGNED )
            {
                // who cares
                //
                continue;
            }

            // zero out the old box
            //
            pBox->m_nValue = ROW_PIN_UNASSIGNED;
            pBox->m_nVCRow = ROW_PIN_UNASSIGNED;

            // add in the new box at the right merge row
            //
            CTimingBox * pNewBox = new CTimingBox( MergeRow, v, vc );
            if( !pNewBox )
            {
                return false;
            }

            pCol->AddBox( pNewBox );

        } // while pBox

    } // for pCol

    // if our stuff ended earlier than the set duration, then
    // make a last column with a box in it that goes to output, at row 0,
    // which should be "silence"
    //
    if( m_pTailCol )
    {
        if( m_pTailCol->m_rtStop < m_rtBlankDuration )
        {
            // this will add one extra column at the end, with the
            // start time of the too-short-duration, and the stop time
            // of m_rtBlankDuration
            //
            CTimingCol * pCol = SliceGridAtTime( m_rtBlankDuration );
            if( !pCol )
                return false;
            CTimingBox * pBox = new CTimingBox( 0, ROW_PIN_OUTPUT );
            if( !pBox )
                return false;
            pCol->AddBox( pBox );
            m_pRowArray[0].m_bBlank = false;
        }
    }

    return true;
}

// tell us how many rows we're going to use, so we can allocate an array
// !!! someday, just grow this as needed
//
bool CTimingGrid::SetNumberOfRows( long Rows )
{
    delete [] m_pRowArray;

    m_pRowArray = new CTimingRow[Rows];
    if( !m_pRowArray )
    {
        m_nRows = 0;
        return false;
    }

    m_nRows = Rows;
    m_nCurrentRow = 0;
    m_pRow = &m_pRowArray[0];

    for( int i = 0 ; i < Rows ; i++ )
    {
        m_pRowArray[i].m_nWhichRow = i;
    }

    return true;
}

// the OwnerTrackNumber is the track's priority as defined by it's owner composition
//
void CTimingGrid::WorkWithRow( long Row )
{
    ASSERT( Row < m_nRows );

    m_nCurrentRow = Row;
    m_pRow = &m_pRowArray[Row];
    m_pTempCol = NULL;
    m_bStartNewRow = true;

    DbgLog( ( LOG_TRACE, RENDER_TRACE_LEVEL, TEXT("RENDG::Setting to row %d"), Row ) );
}

void CTimingGrid::WorkWithNewRow( long SwitchPin, long Row, long EmbedDepth, long OwnerTrackNumber )
{
    ASSERT( Row < m_nRows );

    m_nCurrentRow = Row;
    m_pRow = &m_pRowArray[Row];
    m_pRow->m_nEmbedDepth = EmbedDepth;

    // these shouldn't be necessary here
    //
    m_pTempCol = NULL;
    m_bStartNewRow = true;

    m_pRow->m_nSwitchPin = SwitchPin;
    m_pRow->m_nTrack = OwnerTrackNumber;
    m_pRow->m_nModDepth = EmbedDepth;

    if( Row > m_nMaxRowUsed )
    {
        m_nMaxRowUsed = Row;
    }

    DbgLog( ( LOG_TRACE, RENDER_TRACE_LEVEL, TEXT("RENDG::Working with new row %d"), Row ) );
}

bool CTimingGrid::RowIAmOutputNow( REFERENCE_TIME Start, REFERENCE_TIME Stop, long OutPin )
{
    DbgLog( ( LOG_TRACE, RENDER_TRACE_LEVEL, TEXT("RENDG::RowIAmOutputNow") ) );

    DbgTimer Timer1( "(grid) IAmOutputNow" );

    // this would screw up and create a confusing empty column
    if (Start == Stop)
        return true;

    // error check
    //
    if( !m_pRow )
    {
        return false;
    }

    // don't allow start times less than 0
    //
    if( Start < 0 )
    {
        Start = 0;
    }

    CTimingCol * pSlicedCol;
    pSlicedCol = SliceGridAtTime( Stop );
    if( !pSlicedCol ) return false;
    pSlicedCol = SliceGridAtTime( Start );
    if( !pSlicedCol ) return false;

    for( CTimingCol * pCol = pSlicedCol ; pCol ; pCol = pCol->m_pNext )
    {
        // too early
        //
        if( pCol->m_rtStart < Start )
        {
            continue;
        }

        // too late
        //
        if( pCol->m_rtStart >= Stop )
        {
            break;
        }

        // add a box saying we're the output
        //
        CTimingBox * pNewBox = new CTimingBox( m_nCurrentRow, ROW_PIN_OUTPUT );
        if( !pNewBox ) return false;
        pCol->AddBox( pNewBox );
        m_pRow->m_bBlank = false;

    } // for pCol

    return true;
}

bool CTimingGrid::RowIAmTransitionNow( REFERENCE_TIME Start, REFERENCE_TIME Stop, long OutPinA, long OutPinB )
{
    DbgTimer Timer1( "(grid) IAmTransitionNow" );

    // this would screw up and create a confusing empty column
    if (Start == Stop)
        return true;

    // error check
    //
    if( !m_pRow )
    {
        return false;
    }

    // don't allow start times less than 0
    //
    if( Start < 0 )
    {
        Start = 0;
    }

    CTimingCol * pSlicedCol;
    pSlicedCol = SliceGridAtTime( Stop );
    if( !pSlicedCol ) return false;
    pSlicedCol = SliceGridAtTime( Start );
    if( !pSlicedCol ) return false;

    // find the starting row for the B track
    //
    long TrackBStartRow = _GetStartRow( m_nCurrentRow );

    // find the starting row for the A track
    //
    long StartRow = _GetStartRow( TrackBStartRow - 1 );

    if( m_pRowArray[StartRow].m_nModDepth < m_pRow->m_nModDepth - 1 )
    {
        // too deep! This transition is supposed to happen on top of black!
        //
        StartRow = TrackBStartRow;
    }

    // anybody who thinks they are the output, or one less than the output now needs to be rerouted
    // to the new outputs. However, don't do this for rows which aren't sources.

    for( CTimingCol * pCol = pSlicedCol ; pCol ; pCol = pCol->m_pNext )
    {
        // too early
        //
        if( pCol->m_rtStart < Start )
        {
            continue;
        }

        // too late
        //
        if( pCol->m_rtStart >= Stop )
        {
            break;
        }

        // go see if any of the rows prior to us has a source on it
        //
        bool hassource = false;

        CTimingBox * pEarlierRow = pCol->GetEarlierRowBox( m_nCurrentRow );

        // do this column
        //
        for( CTimingBox * pBox = pEarlierRow ; pBox ; pBox = pBox->m_pPrev )
        {
            long row = pBox->m_nRow;

            if( m_pRowArray[row].m_nModDepth < m_pRow->m_nModDepth )
            {
                break;
            }

            if( m_pRowArray[row].m_bIsSource )
            {
                hassource = true;
                break;
            }

        } // for pBox

        // if we found a source, we can switch things around.  The row with
	// -100 is pin B, and the row closest above it <-100 is pin A. (It
	// might not be -101)
	// row
        //
        if( hassource )
        {
	    long lRow = 0;

            bool AssignedA = false;
            bool AssignedB = false;

            for( CTimingBox * pBox = pEarlierRow ; pBox ; pBox = pBox->m_pPrev )
            {
                long v = pBox->m_nValue;
                long r = pBox->m_nRow;

                // don't go looking past our master composition (parent)
                //
                if( r < StartRow )
                {
                    break;
                }

		// A transition MUST act on one thing from this embed depth
		// and one thing BEFORE it
                if( !AssignedA && ( lRow && v == ROW_PIN_OUTPUT && m_pRowArray[r].m_nModDepth < m_pRowArray[lRow].m_nModDepth ) )
                {
                    AssignedA = true;

                    DbgLog( ( LOG_TRACE, RENDER_TRACE_LEVEL, TEXT("RENDG::sending row %d from %d to %d at time %d"), r, v, OutPinA, long( pCol->m_rtStart / 10000 ) ) );
                    pBox->m_nValue = OutPinA;
		    // Once going out OutPinA, it will come back to the
		    // switch via input pin #m_nCurrentRow
                    pBox->m_nVCRow = m_nCurrentRow;
		    break;
                }
                if( !AssignedB && ( v == ROW_PIN_OUTPUT ) )
                {
                    AssignedB = true;

                    DbgLog( ( LOG_TRACE, RENDER_TRACE_LEVEL, TEXT("RENDG::sending row %d from %d to %d at time %d"), r, v, OutPinB, long( pCol->m_rtStart / 10000 ) ) );
                    pBox->m_nValue = OutPinB;
		    // Once going out OutPinB, it will come back to the
		    // switch via input pin #m_nCurrentRow
	    	    pBox->m_nVCRow = m_nCurrentRow;
		    lRow = r;	// the row going to input #2 of trans
		    ASSERT(lRow > 0);
                }

                if( AssignedA && AssignedB )
                {
                    break;
                }

            } // for pBox

            // if we didn't find a box, that means we probably ended up in no-man's land
            //
            ASSERT( AssignedB );

            if( !AssignedA )
            {
                // well SOMETHING needs to go to the effect! Find the earliest unassigned row
                //
                pBox = pCol->GetHeadBox( );
                ASSERT( pBox );

                // no box? Well make one at the last blank layer
                //
                long BlankRow;
                if( pBox == NULL )
                {
                    BlankRow = m_nBlankLevel - 1;
                }
                else
                {
                    BlankRow = pBox->m_nRow - 1;
                    if( BlankRow >= m_nBlankLevel )
                    {
                        BlankRow = m_nBlankLevel - 1;
                    }
                }

                // we need a box earlier than this box and direct it to us
                //
                ASSERT( BlankRow >= 0 );
                CTimingBox * pNewBox = new CTimingBox( BlankRow, OutPinA, m_nCurrentRow );
                if( !pNewBox ) return false;
                pCol->AddBox( pNewBox );
                m_pRowArray[ BlankRow ].m_bBlank = false;
            }

            CTimingBox * pNewBox = new CTimingBox( m_nCurrentRow, ROW_PIN_OUTPUT );
            if( !pNewBox ) return false;
            pCol->AddBox( pNewBox );
            m_pRow->m_bBlank = false;

        } // if we found a source

    } // for pCol

    return true;
}

// this function should scan from the 'start' row all the way to the current row. For layers,
// its the layer start row, for sources, it's the source's start row, but since effect times on
// sources are bounded, it doesn't make any difference
//
bool CTimingGrid::RowIAmEffectNow( REFERENCE_TIME Start, REFERENCE_TIME Stop, long OutPin )
{
    DbgLog( ( LOG_TRACE, RENDER_TRACE_LEVEL, TEXT("RENDG::RowIAmEffectNow"), long(Start/10000), long(Stop/10000) ) );
    DbgTimer Timer1( "(grid) IAmEffectNow" );

    // this would screw up and create a confusing empty column
    if (Start == Stop)
        return true;

    // error check
    //
    if( !m_pRow )
    {
        return false;
    }

    // don't allow start times less than 0
    //
    if( Start < 0 )
    {
        Start = 0;
    }

    CTimingCol * pSlicedCol;
    pSlicedCol = SliceGridAtTime( Stop );
    if( !pSlicedCol ) return false;
    pSlicedCol = SliceGridAtTime( Start );
    if( !pSlicedCol ) return false;

    // since we are an effect with the same embed depth on the current row as all the rest
    // preceding us, we call GetStartRow , which means, "start at current row and go
    // backwards looking for a lesser embed depth than us"
    //
    long StartRow = _GetStartRow( m_nCurrentRow );

    // anybody who thinks they are the output, or one less than the output now needs to be rerouted
    // to the new outputs. However, don't do this for rows which aren't sources.

    for( CTimingCol * pCol = pSlicedCol ; pCol ; pCol = pCol->m_pNext )
    {
        // too early
        //
        if( pCol->m_rtStart < Start )
        {
            continue;
        }

        // too late
        //
        if( pCol->m_rtStart >= Stop )
        {
            break;
        }

        bool hassource = false;

        CTimingBox * pEarlierBox = pCol->GetEarlierRowBox( m_nCurrentRow );

        // do this column
        //
        for( CTimingBox * pBox = pEarlierBox ; pBox ; pBox = pBox->m_pPrev )
        {
            long row = pBox->m_nRow;

            if( row < StartRow )
            {
                break;
            }

            if( m_pRowArray[row].m_nModDepth < m_pRow->m_nModDepth )
            {
                break;
            }

            if( m_pRowArray[row].m_bIsSource )
            {
                hassource = true;
                break;
            }

        } // for pBox

        // if we found a source, we can switch things around
        //
        if( hassource )
        {
            bool Assigned = false;
            bool AlreadyAssigned = false;

            for( CTimingBox * pBox = pCol->GetTailBox( ) ; pBox ; pBox = pBox->m_pPrev )
            {
                long v = pBox->m_nValue;
                long r = pBox->m_nRow;

                // don't go looking past our master composition (parent)
                //
                if( r < StartRow ) // this should never happen?
                {
                    break;
                }

                if( r != m_nCurrentRow )
                {
                    if( v == ROW_PIN_OUTPUT )
                    {
                        DbgLog( ( LOG_TRACE, RENDER_TRACE_LEVEL, TEXT("RENDG::sending row %d from %d to %d at time %d"), r, v, OutPin, long( pCol->m_rtStart / 10000 ) ) );

                        pBox->m_nValue = OutPin;
			// Once going out OutPin, it will come back to the
			// switch via input pin #m_nCurrentRow
	    		pBox->m_nVCRow = m_nCurrentRow;

                        Assigned = true;

                        // no more rows can be affected, break
                        //
                        break;
                    }
                    else
                    {
                        // Is it already assigned to the outpin?
                        //
                        if( v == OutPin )
                        {
                            Assigned = true;
                            AlreadyAssigned = true;
                            break;
                        }
                    }
                }

            } // for pBox

            if( !Assigned )
            {
                // well SOMETHING needs to go to the effect! Find the earliest unassigned row
                //
                pBox = pCol->GetHeadBox( );
                ASSERT( pBox );

                // no box? Well make one at the last blank layer
                //
                long BlankRow;
                if( pBox == NULL )
                {
                    BlankRow = m_nBlankLevel - 1;
                }
                else
                {
                    BlankRow = pBox->m_nRow - 1;
                    if( BlankRow >= m_nBlankLevel )
                    {
                        BlankRow = m_nBlankLevel - 1;
                    }
                }

                // we need a box earlier than this box and direct it to us
                //
                ASSERT( BlankRow >= 0 );
                CTimingBox * pNewBox = new CTimingBox( BlankRow, OutPin, m_nCurrentRow );
                if( !pNewBox ) return false;
                pCol->AddBox( pNewBox );
                m_pRowArray[ BlankRow ].m_bBlank = false;
            }

            if( !AlreadyAssigned )
            {
                CTimingBox * pNewBox = new CTimingBox( m_nCurrentRow, ROW_PIN_OUTPUT );
                if( !pNewBox ) return false;
                pCol->AddBox( pNewBox );
                m_pRow->m_bBlank = false;
            }

        } // if we found a source

    } // for pCol

    return true;
}

// if the user passes in -1, -1, it will give the first start/stop, like 0-2. If the user passes in
// 0-2, we'll pass back 2-4. If the end is 4-6, and the user passes in 4-6, we'll pass back 6-6
//
bool CTimingGrid::RowGetNextRange( REFERENCE_TIME * pInOut, REFERENCE_TIME * pStop, long * pValue )
{
    // this happens once in a while. A -1 means the same thing
    // as starting a new row
    //
    if( *pInOut == -1 )
    {
        m_pTempCol = NULL;
        m_bStartNewRow = true;
    }

    if( !m_pRow )
    {
        return false;
    }
    if( m_bStartNewRow )
    {
        m_bStartNewRow = false;
        m_pTempCol = m_pHeadCol;
        ASSERT( *pInOut <= 0 );
    }
    if( !m_pTempCol )
    {
        *pInOut = *pStop;
        return true;
    }

    CTimingCol * pCol = m_pTempCol;

    // this is the box with the value we're looking for
    //
    CTimingBox * pBox = pCol->GetRowBox( m_nCurrentRow );
    long Value = ROW_PIN_UNASSIGNED;
    if( pBox )
    {
        Value = pBox->m_nValue;
    }

    CTimingCol * pCol2 = pCol;

    while( 1 )
    {
        CTimingCol * pColTemp = pCol2;
        pCol2 = pCol2->m_pNext;

        if( !pCol2 )
        {
            *pValue = Value;
            m_pTempCol = NULL;

            // if we found NOTHING, then return as if completely blank
            //
            if( Value == ROW_PIN_UNASSIGNED && pCol == m_pHeadCol )
            {
                *pInOut = *pStop;
                return true;
            }
            else
            {
                *pInOut = pCol->m_rtStart;
                *pStop = pColTemp->m_rtStop;
            }

            return true;
        }

        pBox = pCol2->GetRowBox( m_nCurrentRow );
        long Value2 = ROW_PIN_UNASSIGNED;
        if( pBox )
        {
            Value2 = pBox->m_nValue;
        }

        if( Value != Value2 )
        {
            *pInOut = pCol->m_rtStart;
            *pStop = pColTemp->m_rtStop;
            *pValue = Value;
            m_pTempCol = pColTemp->m_pNext;
            return true;
        }
    }

    return true;
}

bool CTimingGrid::PleaseGiveBackAPieceSoICanBeACutPoint(
    REFERENCE_TIME Start,
    REFERENCE_TIME Stop,
    REFERENCE_TIME CutPoint )
{
    // this would screw up and create a confusing empty column
    if (Start == Stop)
        return true;

    // error check
    //
    if( !m_pRow )
    {
        return false;
    }

    // don't allow start times less than 0
    //
    if( Start < 0 )
    {
        Start = 0;
    }

    CTimingCol * pSlicedCol;
    pSlicedCol = SliceGridAtTime( Stop );
    if( !pSlicedCol ) return false;
    pSlicedCol = SliceGridAtTime( CutPoint );
    if( !pSlicedCol ) return false;
    pSlicedCol = SliceGridAtTime( Start );
    if( !pSlicedCol ) return false;

    for( CTimingCol * pCol = pSlicedCol ; pCol ; pCol = pCol->m_pNext )
    {
        // too early
        //
        if( pCol->m_rtStart < Start )
        {
            continue;
        }

        // too late
        //
        if( pCol->m_rtStart >= Stop )
        {
            break;
        }

        bool FoundFirst = false;
        bool FoundSecond = false;

        // do this column
        //
        for( CTimingBox * pBox = pCol->GetTailBox( ) ; pBox ; pBox = pBox->m_pPrev )
        {
            long v = pBox->m_nValue;

            if( pCol->m_rtStart < CutPoint )
            {
                if( v == ROW_PIN_OUTPUT )
                {
                    if( !FoundFirst )
                    {
                        FoundFirst = true;
                        pBox->m_nValue = ROW_PIN_UNASSIGNED;
                    }
                    else if( !FoundSecond )
                    {
                        FoundSecond = true;
                    }
                    else
                    {
                        // found both of them, we're done
                        //
                        break;
                    }
                }
            }
            else
            {
                if( v == ROW_PIN_OUTPUT )
                {
                    if( !FoundFirst )
                    {
                        FoundFirst = true;
                    }
                    else if( !FoundSecond )
                    {
                        FoundSecond = true;
                        pBox->m_nValue = ROW_PIN_UNASSIGNED;
                    }
                    else
                    {
                        break;
                    }
                }
            }

        } // for pBox

    } // for pCol

    return true;

}

void CTimingGrid::RowSetIsSource( IAMTimelineObj * pSource, BOOL IsCompatible )
{
    DbgLog((LOG_TRACE, RENDER_TRACE_LEVEL, TEXT("RENDG::RowSetIsSource, row = %d, IsCompat = %d"), m_nCurrentRow, IsCompatible ));

    if( !m_pRow )
    {
        return;
    }

    m_pRow->m_bIsSource = true;
    m_pRow->m_bIsCompatible = ( IsCompatible == TRUE );
}

CTimingCol * CTimingGrid::_GetColAtTime( REFERENCE_TIME t )
{
    if( t > m_pTailCol->m_rtStop / 2 ) // look backwards
    {
        for( CTimingCol * pCol = m_pTailCol ; pCol ; pCol = pCol->m_pPrev )
        {
            if( t >= pCol->m_rtStart )
            {
                return pCol;
            }
        }
        return m_pHeadCol;
    }
    else
    {
        for( CTimingCol * pCol = m_pHeadCol ; pCol ; pCol = pCol->m_pNext )
        {
            if( t < pCol->m_rtStop )
            {
                return pCol;
            }
        }
        return m_pTailCol;
    }
}

CTimingCol * CTimingGrid::SliceGridAtTime( REFERENCE_TIME t )
{
    if( !m_pHeadCol )
    {
        CTimingCol * pCol = new CTimingCol( this );
        if( !pCol )
        {
            return NULL;
        }
        pCol->m_rtStart = 0;
        pCol->m_rtStop = t;

        m_pHeadCol = pCol;
        m_pTailCol = pCol;

        return pCol;
    }

    // if we're over, slice the last one and return
    //
    if( t > m_pTailCol->m_rtStop )
    {
        CTimingCol * pTail = NULL;
        bool ret = m_pTailCol->Split( t, &pTail );
        if( !ret ) return NULL;
        m_pTailCol = pTail;
        return pTail;
    }

    // gets the col that spans t or if t is > the max time,
    // get the last column
    //
    CTimingCol * pCol = _GetColAtTime( t );

    // we test for Stop == t because we've been asked to slice
    // the grid at this time. I've arranged the code so that nothing
    // will use the returned Col as if it has the start time of t when
    // this happens
    //
    if( pCol->m_rtStart == t || pCol->m_rtStop == t )
    {
        return pCol;
    }

    // we need to split a column that already exists
    //
    CTimingCol * pColDesired = NULL;
    bool ret = pCol->Split( t, &pColDesired );
    if( !ret ) return NULL;
    if( pCol == m_pTailCol )
    {
        m_pTailCol = pColDesired;
    }
    return pColDesired;
}

void CTimingGrid::DoneWithLayer( )
{
    DbgTimer Timer1( "(grid) DoneWithLayer" );

    long CurrentEmbedDepth = m_pRow->m_nModDepth;
    for( long i = m_nCurrentRow - 1 ; i >= 0 ; i-- )
    {
        if( m_pRowArray[i].m_nModDepth < CurrentEmbedDepth )
        {
            break;
        }
        if( m_pRowArray[i].m_nModDepth > 0 )
        {
            m_pRowArray[i].m_nModDepth--;
        }
    }
    DbgLog( ( LOG_TRACE, RENDER_TRACE_LEVEL, TEXT("RENDG::DoneWithLayer, going back to layer %d"), i + 1 ) );
    if( m_pRow->m_nModDepth > 0 )
    {
        m_pRow->m_nModDepth--;
    }
}

// get the starting row in the grid of the composition encompasing the current row
//
long CTimingGrid::_GetStartRow( long StartRow )
{
    // go find the first row (backwards) that doesn't have the same ModDepth as the first one
    //
    for( int i = StartRow ; i >= 0 ; i-- )
    {
        if( m_pRowArray[i].m_nModDepth != m_pRowArray[StartRow].m_nModDepth )
        {
            break;
        }
    }
    DbgLog( ( LOG_TRACE, RENDER_TRACE_LEVEL, TEXT("RENDG::GetStartRow=%d"), i + 1 ) );
    return i + 1;
}

// return the maximum amount of tracks that need to be mixed for the current
// group of tracks that the last row in the grid is referencing. This will normally
// be a composition's entire group of tracks
//
long CTimingGrid::MaxMixerTracks( )
{
    DbgTimer Timer1( "(grid) MaxMixerTracks" );

    // since this is a mix on a composition, we want to start one row back to find beginning,
    // a composition has a last (current) row in the grid with a LESSER embed depth than those
    // that precede it, but we want to find the starting row in the grid for all tracks that
    // this composition used.
    //
    long StartRow = _GetStartRow( m_nCurrentRow - 1 );
    long MaxTracks = 0;

    for( CTimingCol * pCol = m_pHeadCol ; pCol ; pCol = pCol->m_pNext )
    {
        // do this column
        //
        long Tracks = 0;
        for( CTimingBox * pBox = pCol->GetEarlierRowBox( m_nCurrentRow ) ; pBox ; pBox = pBox->m_pPrev )
        {
            if( pBox->m_nRow < StartRow )
            {
                break;
            }

            // get the output pin this row/column is assigned to
            //
            long v = pBox->m_nValue;

            // there is overlap (and the need to mix) only if the first output value is < -100
            //
            if( v == ROW_PIN_OUTPUT )
            {
                Tracks++;
            }

        } // for pBox

        if( Tracks > MaxTracks )
        {
            MaxTracks = Tracks;
        }

    } // for pCol

    return MaxTracks;
}

bool CTimingGrid::DoMix( IBaseFilter * pMixer, long OutPin )
{
    {
        DbgTimer Timer1( "(grid) DoMix start" );
    }

    DbgTimer Timer1( "(grid) DoMix" );

    // since this is a mix on a composition, we want to start one row back to find beginning,
    // a composition has a last (current) row in the grid with a LESSER embed depth than those
    // that precede it, but we want to find the starting row in the grid for all tracks that
    // this composition used.
    //
    long StartRow = _GetStartRow( m_nCurrentRow - 1 );

    // now go through each of the rows and connect up unassigned outputs to the mixer inputs

    // flag that we don't need a mixer yet.
    //
    bool NeedMix = false;
    for( CTimingCol * pCol = m_pHeadCol ; pCol ; pCol = pCol->m_pNext )
    {
        // if this isn't true, look for a mixer need PER COLUMN. If it's
        // defined, then once a mixer is put in, it stays for the rest of the track
        //
#ifndef SMOOTH_FADEOFF
        NeedMix = false;
#endif
        long TracksWithOutput = 0;

        CTimingBox * pStartRowBox = pCol->GetGERowBox( StartRow );
        CTimingBox * pBox;

        if( !NeedMix )
        {
            for( pBox = pStartRowBox ; pBox ; pBox = pBox->Next( ) )
            {
                long r = pBox->m_nRow;

                // get the output pin this row/column is assigned to
                //
                long v = pBox->m_nValue;

                // we need to mix if two rows go to the output
                //
                if( v == ROW_PIN_OUTPUT )
                {
                    TracksWithOutput++;
                    if( TracksWithOutput > 1 )
                    {
                        NeedMix = true;
                        DbgLog( ( LOG_TRACE, RENDER_TRACE_LEVEL, TEXT("RENDG::Need mix because %d rows go to OUT at time %d"), TracksWithOutput, pCol->m_rtStart ) );
                    }
                }

            } // for pBox
        }

        if( !NeedMix )
        {
            continue;
        }

        // we need to mix, so set the mixer's output pin to be active in this
        // segment
        //
        DbgLog( ( LOG_TRACE, RENDER_TRACE_LEVEL, TEXT("RENDG::Sending the mixer's output pin...") ) );

        CTimingBox * pNewBox = new CTimingBox( m_nCurrentRow, ROW_PIN_OUTPUT );
        if( !pNewBox ) return false;
        pCol->AddBox( pNewBox );
        m_pRow->m_bBlank = false;

        for( pBox = pStartRowBox ; pBox ; pBox = pBox->Next( ) )
        {
            long r = pBox->m_nRow;
            long v = pBox->m_nValue;

            if( r >= m_nCurrentRow )
            {
                break;
            }

            // if it went to an output, now it goes to a mixer input pin,
            // which is determined by which track the layer was on
            //
            if( v == ROW_PIN_OUTPUT )
            {
                long mi = m_pRowArray[r].m_nTrack;
                pBox->m_nValue = OutPin + mi;
                DbgLog( ( LOG_TRACE, RENDER_TRACE_LEVEL, TEXT("RENDG::Pin %d redirected to mixer input %d"), r, mi ) );
                DbgLog( ( LOG_TRACE, RENDER_TRACE_LEVEL, TEXT("    .... from time %d to time %d"), long( pCol->m_rtStart / 10000 ), long( pCol->m_rtStop / 10000 ) ) );

                // need to inform the pin itself about the output range. Hacky, but it works, I guess
                //
                IPin * pPin = GetInPin( pMixer, mi );
                ASSERT( pPin );
                CComQIPtr< IAudMixerPin, &IID_IAudMixerPin > pMixerPin( pPin );
                ASSERT( pMixerPin );
                HRESULT hr = pMixerPin->ValidateRange( pCol->m_rtStart, pCol->m_rtStop );
                DbgLog( ( LOG_TRACE, RENDER_TRACE_LEVEL, TEXT("RENDG::Validated the range on mixer pin %d from time %d to %d"), mi, long( pCol->m_rtStart / 10000 ), long( pCol->m_rtStop / 10000 ) ) );
            }

        } // for pBox

    } // for pCol

    return true;
}

bool CTimingGrid::YoureACompNow( long TrackPriorityOfComp )
{
    DbgLog( ( LOG_TRACE, RENDER_TRACE_LEVEL, TEXT("RENDG::Calling YoureACompNow") ) );
    DbgTimer Timer1( "(grid) YoureACompNow" );

    // since this is a mix on a composition, we want to start one row back to find beginning,
    // a composition has a last (current) row in the grid with a LESSER embed depth than those
    // that precede it, but we want to find the starting row in the grid for all tracks that
    // this composition used.
    //
    long StartRow = _GetStartRow( m_nCurrentRow - 1 );

    // now go through each of the rows and connect up unassigned outputs to the mixer inputs
    //
    for( CTimingCol * pCol = m_pHeadCol ; pCol ; pCol = pCol->m_pNext )
    {
        bool NeedMix = false;
        long TracksWithOutput = 0;

        for( CTimingBox * pBox = pCol->GetGERowBox( StartRow ) ; pBox ; pBox = pBox->Next( ) )
        {
            long r = pBox->m_nRow;
            if( r >= m_nCurrentRow )
            {
                break;
            }

            // get the output pin this row/column is assigned to
            //
            long v = pBox->m_nValue;

            if( v == ROW_PIN_OUTPUT )
            {
                m_pRowArray[r].m_nTrack = TrackPriorityOfComp;
                DbgLog( ( LOG_TRACE, RENDER_TRACE_LEVEL, TEXT("RENDG::Row %d is an OUTPUT at time %d, now has new Track priority of %d"), r, pCol->m_rtStart, TrackPriorityOfComp ) );
            }

        } // for pBox

    } // for pCol;

    return true;
}

// if a waveform envelope is needed on a pin, it is sent to the mixer's pin immediately
// instead of being directed to the normal "output" pin. DoMix could be called later,
// but since it's already been sent to the Mixer Pin, DoMix is happy and ignores it. This
// combination makes both Wave Envelopes and mixing logic work together in peace and harmoney.
// this code is almost exactly like DoMix, except it will direct ONE pin to the mixer, not
// any of them that match.
//
bool CTimingGrid::XferToMixer(
                                 IBaseFilter * pMixer,
                                 long OutPin,
                                 long Track,
                                 REFERENCE_TIME EffectStart,
                                 REFERENCE_TIME EffectStop )
{
    DbgTimer Timer1( "(grid) XferToMixer" );

    // since this is a mix on a composition, we want to start one row back to find beginning,
    // a composition has a last (current) row in the grid with a LESSER embed depth than those
    // that precede it, but we want to find the starting row in the grid for all tracks that
    // this composition used.
    //
    long StartRow = _GetStartRow( m_nCurrentRow - 1 );

    bool SetRange = false;

    for( CTimingCol * pCol = m_pHeadCol ; pCol ; pCol = pCol->m_pNext )
    {
        for( CTimingBox * pBox = pCol->GetGERowBox( StartRow ) ; pBox ; pBox = pBox->Next( ) )
        {
            long r = pBox->m_nRow;
            if( r >= m_nCurrentRow )
            {
                break;
            }

            // if this row isn't the same track, then we don't care about it
            //
            if( m_pRowArray[r].m_nTrack != Track )
            {
                continue;
            }

            long MixerInput = m_pRowArray[r].m_nTrack;

            // get the output pin this row/column is assigned to
            //
            long v = pBox->m_nValue;

            // if it wanted to go to an output of some priority, too bad, now it goes to the mixer
            //
            if( v == ROW_PIN_OUTPUT )
            {
                HRESULT hr;

                // need to inform the pin itself about the output range. Hacky, but it works, I guess
                //
                IPin * pPin = GetInPin( pMixer, MixerInput );
                ASSERT( pPin );
                CComQIPtr< IAudMixerPin, &IID_IAudMixerPin > pMixerPin( pPin );
                ASSERT( pMixerPin );

                if( !SetRange )
                {
                    if( EffectStart != -1 )
                    {
                        hr = pMixerPin->SetEnvelopeRange( EffectStart, EffectStop );
                    }
                    SetRange = true;
                }

                // tell the grid's track it goes to the mixer now
                //
                pBox->m_nValue = OutPin + MixerInput;

                CTimingBox * pNewBox = new CTimingBox( m_nCurrentRow, ROW_PIN_OUTPUT );
                if( !pNewBox ) return false;
                pCol->AddBox( pNewBox );
                m_pRow->m_bBlank = false;

                DbgLog( ( LOG_TRACE, RENDER_TRACE_LEVEL, TEXT("RENDG::Pin %d redirected to mixer input %d"), r, MixerInput ) );
                DbgLog( ( LOG_TRACE, RENDER_TRACE_LEVEL, TEXT("    .... from time %d to time %d"), long( pCol->m_rtStart / 10000 ), long( pCol->m_rtStop / 10000 ) ) );

                hr = pMixerPin->ValidateRange( pCol->m_rtStart, pCol->m_rtStop );
                DbgLog( ( LOG_TRACE, RENDER_TRACE_LEVEL, TEXT("RENDG::Validated the range on mixer pin %d from time %d to %d"), MixerInput, long( pCol->m_rtStart / 10000 ), long( pCol->m_rtStop / 10000 ) ) );
            }

        } // for pBox

    } // for pCol

    return true;
}

void CTimingGrid::RemoveAnyNonCompatSources( )
{
    DbgLog((LOG_TRACE, RENDER_TRACE_LEVEL, TEXT("RENDG::Remove any non-compat sources")));
    DbgTimer Timer1( "(grid) RemoveAnyNonCompat" );

    long col = 0;
    for( CTimingCol * pCol = m_pHeadCol ; pCol ; pCol = pCol->m_pNext )
    {
        DbgLog((LOG_TRACE, RENDER_TRACE_LEVEL, TEXT("RENDG::looking at column %d, time = %d"), col++, pCol->m_rtStart ));
        bool FoundARowWithOutput = false;

        for( CTimingBox * pBox = pCol->GetHeadBox( ) ; pBox ; pBox = pBox->Next( ) )
        {
            long r = pBox->m_nRow;
            long v = pBox->m_nValue;

            // found the row with the output
            if( v == ROW_PIN_OUTPUT )
            {
                DbgLog((LOG_TRACE, RENDER_TRACE_LEVEL, TEXT("  for this column, row %d has the output"), r ));

                FoundARowWithOutput = true;

                // if this row isn't a (compat) source, then this column isn't
                // active for a compressed switch
                if( !m_pRowArray[r].m_bIsSource || !m_pRowArray[r].m_bIsCompatible )
                {
                    if( !m_pRowArray[r].m_bIsCompatible )
                    {
                        DbgLog((LOG_TRACE, RENDER_TRACE_LEVEL, TEXT("  this output row is not compatible")));
                    }
                    if( !m_pRowArray[r].m_bIsSource )
                    {
                        DbgLog((LOG_TRACE, RENDER_TRACE_LEVEL, TEXT("  this output row is not a source")));
                    }

                    // wipe out this column. NOTHING goes to the output in this
                    // section
                    CTimingBox * pBox2 = pCol->GetHeadBox( );
                    while( pBox2 )
                    {
                        pBox2->m_nValue = ROW_PIN_UNASSIGNED;
                        pBox2 = pBox2->Next( );
                    }

                    break;
                }
                else
                {
                    DbgLog((LOG_TRACE, RENDER_TRACE_LEVEL, TEXT("  this output row is a compatible source")));
                }

                // well we ARE a compat source and we go to the output. However, NOTHING
                // else in the grid for this column is allowed to go anywhere
                CTimingBox * pBox2 = pCol->GetHeadBox( );
                while( pBox2 )
                {
                    if( pBox2->m_nRow != pBox->m_nRow )
                    {
                        pBox2->m_nValue = ROW_PIN_UNASSIGNED;
                    }
                    pBox2 = pBox2->Next( );
                }

                break;

            } // if v = OUTPUT

        } // for pBox


        // if we didn't find SOME row with an output, then set the whole column to
        // nothing. This should never happen, but deal with it anyhow, for completeness.
        //
        if( !FoundARowWithOutput )
        {
            DbgLog((LOG_TRACE, RENDER_TRACE_LEVEL, TEXT("  this column didn't have an output row anywhere")));

            for( CTimingBox * pBox = pCol->GetHeadBox( ) ; pBox ; pBox = pBox->Next( ) )
            {
                pBox->m_nValue = ROW_PIN_UNASSIGNED;
            }
        }

    } // for pCol

    // set flag for rows that are really blank
    //
    for( int r = 0; r <= m_nMaxRowUsed ; r++ )
    {
        bool Blank = true;

        for( CTimingCol * pCol = m_pHeadCol ; pCol ; pCol = pCol->m_pNext )
        {
            CTimingBox * pBox = pCol->GetRowBox( r );
            if( pBox )
            {
                if( pBox->m_nValue == ROW_PIN_OUTPUT )
                {
                    Blank = false;
                    break;
                }
            }
        }
        m_pRowArray[r].m_bBlank = Blank;
        if( Blank )
        {
            DbgLog((LOG_TRACE, RENDER_TRACE_LEVEL, TEXT("RENDG::The row %d is completely blank now"), r ));
        }
    }
}

bool CTimingGrid::IsRowTotallyBlank( )
{
    if( !m_pRow )
    {
        return false;
    }
    return m_pRow->m_bBlank;
}

long CTimingGrid::GetRowSwitchPin( )
{
    return m_pRow->m_nSwitchPin;
}

void CTimingGrid::SetBlankLevel( long Layers, REFERENCE_TIME Duration )
{
    m_nBlankLevel = Layers;
    m_rtBlankDuration = Duration;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\render\grid.h ===
// Copyright (c) 1999  Microsoft Corporation.  All Rights Reserved.
enum
{
    ROW_PIN_UNASSIGNED = -1,
    ROW_PIN_OUTPUT = -100
};

// a class, but more like a struct
//
class CTimingBox
{
    friend class CTimingCol;

public:

    long m_nRow;            // the row this box represents
    long m_nValue;          // the output pin of the switch
    long m_nVCRow;          // ???  
    CTimingBox * m_pNext;   // linked list stuff
    CTimingBox * m_pPrev;   // linked list stuff

    CTimingBox( )
    {
        m_nRow = 0;
        m_nValue = ROW_PIN_UNASSIGNED;
        m_nVCRow = ROW_PIN_UNASSIGNED;
        m_pNext = NULL;
        m_pPrev = NULL;
    }

    CTimingBox( CTimingBox * p )
    {
        m_nRow = p->m_nRow;
        m_nValue = p->m_nValue;
        m_nVCRow = p->m_nVCRow;
        m_pNext = NULL;
        m_pPrev = NULL;
    }

    CTimingBox( long Row, long Value, long VCRow = ROW_PIN_UNASSIGNED )
    {
        m_nRow = Row;
        m_nValue = Value;
        m_nVCRow = VCRow;
        m_pNext = NULL;
        m_pPrev = NULL;
    }

    CTimingBox * Next( )
    {
        return m_pNext;
    }

};

// a class, but more like a struct, used as an array
//
class CTimingRow
{
    friend class CTimingGrid;
    friend class CTimingCol;

protected:

    bool m_bIsSource;       // does this row represent a source
    bool m_bIsCompatible;   // if this row is a source, is it recompressible
    bool m_bBlank;          // is this row completely blank - for perf reasons
    long m_nEmbedDepth;     // the timeline's embed depth, used for searching the grid
    long m_nModDepth;       // the timeline's modifiied embed depth, used for searching
    long m_nTrack;          // the timeline's track #, used for searching the grid
    long m_nWhichRow;       // which row is this in the row array
    long m_nSwitchPin;      // which switch input pin does this row represent
    long m_nMergeRow;       // used when pruning grid

public:
    CTimingRow( )
    : m_bBlank( true )
    , m_bIsSource( false )
    , m_bIsCompatible( false )
    , m_nTrack( 0 )         // only used for audio functions. Not used for video
    , m_nEmbedDepth( 0 )    // the ACTUAL non-changing embed depth. This value is NEVER used.
    , m_nModDepth( 0 )      // the modified embed depth
    , m_nWhichRow( 0 )
    , m_nSwitchPin( 0 )
    , m_nMergeRow( 0 )
    {
    }
};

/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

class CTimingCol
{
    CTimingBox * m_pHeadBox;    // a sparse-array (list) of allocated rows
    CTimingBox * m_pTailBox;    // a sparse-array (list) of allocated rows
    CTimingGrid * m_pGrid;

public:

    CTimingCol * m_pNext;       // linked list stuff
    CTimingCol * m_pPrev;       // linked list stuff

    REFERENCE_TIME m_rtStart;   // the start/stop times of this col
    REFERENCE_TIME m_rtStop;

    // this was kept WRONGLY and not used anyway
    //long         m_nBoxCount;   // how many boxes total (for perf reasons)

    // get row box, NULL if none at that row
    CTimingBox *    GetRowBox( long Row );

    // get row box, even if the box is empty
    CTimingBox *    GetRowBoxDammit( long Row );

    // get head box, NULL if none
    CTimingBox *    GetHeadBox( );

    // get tail box, NULL if none
    CTimingBox *    GetTailBox( );

    // get a row box that is at a row earlier than the given row
    CTimingBox *    GetEarlierRowBox( long RowToBeEarlierThan );

    // get a row box that is >= the given row
    CTimingBox *    GetGERowBox( long Row ); // GE = Greater or Equal To

    // add a box with the given row, or replace a box already at that row
    void            AddBox( CTimingBox * Box );

    // split col into two. If SplitTime > the col's stop time, then make a new col
    // and link it in. Return the pointer to the column with the start time = splittime
    bool            Split( REFERENCE_TIME SplitTime, CTimingCol ** ppColWithSplitTime );

    // remove any UNASSIGNED or duplicate OUTPUT row boxes
    bool            Prune( );

#ifdef DEBUG
    void print( );
#endif

    CTimingCol( CTimingGrid * pGrid );
    ~CTimingCol( );
};

/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

class CTimingGrid
{
    friend class CTimingRow;
    friend class CTimingCol;

    CTimingCol * m_pHeadCol;    // double-linked list
    CTimingCol * m_pTailCol;
    long m_nRows;               // how many rows have been allocated
    CTimingRow * m_pRow;        // the current row we're working with
    long m_nCurrentRow;         // the current row we're working with
    long m_nMaxRowUsed;         // max row used by anybody
    CTimingCol * m_pTempCol;    // used solely for RowGetNextRange
    bool m_bStartNewRow;        // used solely for RowGetNextRange
    long m_nBlankLevel;
    REFERENCE_TIME m_rtBlankDuration;

    long _GetStartRow( long RowToStartAt );
    CTimingCol * _GetColAtTime( REFERENCE_TIME t );

protected:

    CTimingRow * m_pRowArray;   // single-linked list for each row

public:
    CTimingGrid( );
    ~CTimingGrid( );

    bool SetNumberOfRows( long Rows );
    bool PruneGrid();
    void RemoveAnyNonCompatSources( );
    void WorkWithNewRow( long SwitchPin, long RowNumber, long EmbedDepth, long OwnerTrackNumber );
    void WorkWithRow( long RowNumber );
    void DoneWithLayer( );
    void SetBlankLevel( long Layers, REFERENCE_TIME Duration );
    bool RowIAmTransitionNow( REFERENCE_TIME Start, REFERENCE_TIME Stop, long OutPinA, long OutPinB );
    bool RowIAmEffectNow( REFERENCE_TIME Start, REFERENCE_TIME Stop, long OutPin );
    bool PleaseGiveBackAPieceSoICanBeACutPoint( REFERENCE_TIME Start, REFERENCE_TIME Stop, REFERENCE_TIME CutPoint );
    bool RowIAmOutputNow( REFERENCE_TIME Start, REFERENCE_TIME Stop, long OutPin );
    bool RowGetNextRange( REFERENCE_TIME * pInOut, REFERENCE_TIME * pStop, long * pValue );
    void RowSetIsSource( IAMTimelineObj * pSource, BOOL IsCompatible );
    void DumpGrid( );
    CTimingCol * SliceGridAtTime( REFERENCE_TIME Time );
    long MaxMixerTracks( );
    bool XferToMixer( 
        IBaseFilter * pMixer, 
        long OutPin, 
        long MixerPin, 
        REFERENCE_TIME EffectStart, 
        REFERENCE_TIME EffectStop );
    bool DoMix( IBaseFilter * pMixer, long OutPin );
    bool YoureACompNow( long TrackOwner );
    bool IsRowTotallyBlank( );
    long GetRowSwitchPin( );

};
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\render\dexhelp.cpp ===
// Copyright (c) 1998 - 1999  Microsoft Corporation.  All Rights Reserved.
#include <streams.h>
#include <atlbase.h>
#include <qeditint.h>
#include <qedit.h>
#include "dexhelp.h"
#include "..\util\filfuncs.h"
#include "..\..\..\filters\h\ftype.h"
#include <initguid.h>

#define DEXHELP_TRACE_LEVEL 2

DEFINE_GUID( CLSID_CrappyOldASFReader, 0x6B6D0800, 0x9ADA, 0x11d0, 0xa5, 0x20, 0x00, 0xa0, 0xd1, 0x01, 0x29, 0xc0 );

// this function is only called by dexhelp
// itself (in BuildSourcePart) and the mediadet
//
HRESULT MakeSourceFilter(
                        IUnknown **ppVal,
                        BSTR bstrMediaName,
                        const GUID *pSubObjectGuid,
                        AM_MEDIA_TYPE *pSourceMT,
                        CAMSetErrorLog *pErr,
                        WCHAR * pMedLocFilterString,
                        long MedLocFlags,
                        IMediaLocator * pMedLocOverride )
{
    USES_CONVERSION;

    long t1 = timeGetTime( );

    CheckPointer(ppVal, E_POINTER);

    // we may pass a NULL pointer in, so make a local copy to make testing easy
    //
    BOOL NoName = TRUE;
    WCHAR FilenameToTry[_MAX_PATH];
    FilenameToTry[0] = 0;
    if( bstrMediaName && bstrMediaName[0] )
    {
        NoName = FALSE;
        lstrcpynW( FilenameToTry, bstrMediaName, _MAX_PATH );
        
    }

    // we may pass a NULL pointer in, so make a local copy to make testing easy
    //
    GUID SubObjectGuid = GUID_NULL;
    if (pSubObjectGuid)
        SubObjectGuid = *pSubObjectGuid;

    HRESULT hr = 0;
    *ppVal = NULL;
    CComPtr< IUnknown > pFilter;

    // if they didn't give us any source information, we must want to generate
    // 'blankness', either audio or video style
    //
    if ( NoName && SubObjectGuid == GUID_NULL)
    {
	if (pSourceMT == NULL)
        {
	    return E_INVALIDARG;	// !!! maybe they used sub object
        }
	if (pSourceMT->majortype == MEDIATYPE_Video)
        {
            hr = CoCreateInstance(
                        CLSID_GenBlkVid,
                        NULL,
                        CLSCTX_INPROC_SERVER,
                        IID_IBaseFilter,
                        (void**) &pFilter );
            if( FAILED( hr ) )
            {
		ASSERT(FALSE);
                if (pErr) pErr->_GenerateError( 2, DEX_IDS_INSTALL_PROBLEM, hr);
		return hr;
            }
	}
        else if (pSourceMT->majortype == MEDIATYPE_Audio)
        {
            hr = CoCreateInstance(
                        CLSID_Silence,
                        NULL,
                        CLSCTX_INPROC_SERVER,
                        IID_IBaseFilter,
                        (void**) &pFilter );
            if( FAILED( hr ) )
            {
                ASSERT(FALSE);
                if (pErr) pErr->_GenerateError( 2, DEX_IDS_INSTALL_PROBLEM, hr);
		return hr;
            }
	} else
        {
	    return VFW_E_INVALIDMEDIATYPE;
	}

        // BLACK and SILENCE filters need to see the media type
        CComQIPtr< IBaseFilter, &IID_IBaseFilter > pBaseFilter( pFilter );
        IPin * pOutPin = GetOutPin( pBaseFilter, 0 );
        if( !pOutPin )
        {
            ASSERT( FALSE );
	    hr = E_FAIL;
	    if (pErr) pErr->_GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
	    return hr;
        }
        CComQIPtr< IDexterSequencer, &IID_IDexterSequencer > pSeq(pOutPin);
        if( pSeq )
        {
	    hr = pSeq->put_MediaType( pSourceMT );
        }

    }
    else // not a blankness filter, we actually want something here
    {
        // we're about to find what type and subtype the source provides
        //
        GUID Type = GUID_NULL;
        GUID Subtype = GUID_NULL;
        CLSID SourceClsid = SubObjectGuid;

        // in case we need to use this variant for an error call, invent one
        //
        VARIANT v;
        VariantInit( &v );

        // if we have a name, then write it into the potential error string
        //
        if( !NoName )
        {
            v.vt = VT_BSTR;
            v.bstrVal = FilenameToTry;
        }

        // if the user hasn't told us what our source CLSID is, then
        // we have to find it now by looking in the registry
        //
        if( SourceClsid == GUID_NULL )
        {
	    // if we don't have any source media name, we can't guess
	    // a sub-object
	    //
	    if( NoName )
	    {
                if (pErr) pErr->_GenerateError( 1, L"Filename was required, but wasn't given",
				 DEX_IDS_MISSING_SOURCE_NAME, E_INVALIDARG );
	        return E_INVALIDARG;
	    }

            // split it up so we can look at the extension
            //
            WCHAR Drive[_MAX_PATH];
            WCHAR Path[_MAX_PATH];
            WCHAR Name[_MAX_PATH];
            WCHAR Ext[_MAX_PATH];
            Ext[0] = 0;
            _wsplitpath( FilenameToTry, Drive, Path, Name, Ext );

            // !!! hack for purposely finding the DASource filter
            //
            if(!DexCompareW( Ext, L".htm" ))
            {
                SourceClsid = CLSID_DAScriptParser;
                hr = NOERROR;
            }
            else
            {
                // ask DShow for the filter we need.
                // !!!C may want to ask user for the clsid?
                //
                BOOL Retried = FALSE;

                // if we're not to check, the fake out retried so we don't look
                //
                BOOL DoCheck = ( ( MedLocFlags & SFN_VALIDATEF_CHECK ) == SFN_VALIDATEF_CHECK );
                if( !DoCheck ) Retried = TRUE;

                while( 1 )
                {
                    // convert wide name to TCHAR
                    //
                    const TCHAR * pName = W2CT( FilenameToTry );

                    hr = GetMediaTypeFile( pName, &Type, &Subtype, &SourceClsid );

                    // !!! hack for ASF files! Yikes!
                    //
                    if( SourceClsid == CLSID_CrappyOldASFReader )
                    {
                        SourceClsid = CLSID_WMAsfReader;
                    }

                    // 0x80070003 = HRESULT_FROM_WIN32( E_PATH_NOT_FOUND )
                    bool FailedToFind = false;
                    if( hr == 0x80070003 || hr == 0x80070002 )
                    {
                        FailedToFind = true;
                    }

                    // if no error, or if we've already done this once, break out
                    //
                    if( !FAILED( hr ) || Retried || !FailedToFind )
                    {
                        break;
                    }

                    Retried = TRUE;

                    // if failed to load, use the media detector
                    //
                    CComPtr< IMediaLocator > pLocator;
                    if( pMedLocOverride )
                    {
                        pLocator = pMedLocOverride;
                    }
                    else
                    {
                        HRESULT hr2 = CoCreateInstance(
                            CLSID_MediaLocator,
                            NULL,
                            CLSCTX_INPROC_SERVER,
                            IID_IMediaLocator,
                            (void**) &pLocator );

                        if( FAILED( hr2 ) )
                        {
                            if (pErr) pErr->_GenerateError( 1, L"Filename doesn't exist or cannot be interpreted",
         		        DEX_IDS_BAD_SOURCE_NAME2, E_INVALIDARG, &v );
                            return hr;
                        }
                    }

                    BSTR FoundName;
                    HRESULT FoundHr = pLocator->FindMediaFile( FilenameToTry, pMedLocFilterString, &FoundName, MedLocFlags );

                    // should never happen
                    //
                    if( FoundHr == NOERROR )
                    {
                        break;
                    }

                    // found something
                    //
                    if( FoundHr == S_FALSE )
                    {
                        wcscpy( FilenameToTry, FoundName );
                        SysFreeString( FoundName );
                        continue;
                    }

                    break;

                } // while 1

            } // not .htm file

            // if GetMediaTypeFile bombed, then bail
            //
            if( FAILED( hr ) )
            {
                if (pErr) pErr->_GenerateError( 1, L"Filename doesn't exist, or DShow doesn't recognize the filetype",
			DEX_IDS_BAD_SOURCE_NAME, E_INVALIDARG, &v );
                return hr;
            }
        }

        // create the source filter
        //
        hr = CoCreateInstance( SourceClsid, NULL, CLSCTX_INPROC_SERVER, IID_IBaseFilter, (void**) &pFilter );
        if( FAILED( hr ) )
        {
            if (pErr) pErr->_GenerateError( 1, L"unexpected error - some DShow component not installed correctly",
					    DEX_IDS_INSTALL_PROBLEM, E_INVALIDARG );
            return hr;
        }

        // ask for the file source interface.
        //
        if( !NoName )
        {
            CComQIPtr< IFileSourceFilter, &IID_IFileSourceFilter > pSourceFilter( pFilter );
            if( !pSourceFilter )
            {
                if (pErr) pErr->_GenerateError( 1, L"Source filter does not accept filenames",
				DEX_IDS_NO_SOURCE_NAMES, E_NOINTERFACE, &v );
                return E_NOINTERFACE;
            }

            // load it. Give it the media type we found, so it can find the splitter faster?
            //
            AM_MEDIA_TYPE FilterType;
            ZeroMemory( &FilterType, sizeof( FilterType ) );
            FilterType.majortype = Type;
            FilterType.subtype = Subtype;

            hr = pSourceFilter->Load( FilenameToTry, &FilterType );
            if( FAILED( hr ) )
            {
                if (pErr) pErr->_GenerateError( 1, L"File contains invalid data",
				DEX_IDS_BAD_SOURCE_NAME2, E_INVALIDARG, &v );
                return hr;
            }
        }
    }

    long t2 = timeGetTime( ) - t1;
    DbgLog((LOG_TIMING,1, "DEXHELP::Creating source filter took %ld ms", t2 ));

    // stuff it in the return
    //
    *ppVal = (IUnknown *)pFilter;
    (*ppVal)->AddRef();

    return NOERROR;
}

// look at the resizer and it's connections and figure out of the input size
// is the same as the desired output size and if it is, then disconnect it.
// If the output pin is unconnected at the time we call this, then the resizer
// will be removed from the graph and thrown away. ppOutPin should then be
// non-NULL and will then be stuffed with the output pin of the upstream
// filter from the resizer. If the output pin is connected when we call this,
// then the upstream filter from the resizer will be reconnected to the down-
// stream filter. In either case, if it's possible to remove it, the resizer
// is thrown away.
//
HRESULT RemoveResizerIfPossible( IBaseFilter * pResizer, long DesiredWidth, long DesiredHeight, IPin ** ppOutPin )
{
    HRESULT hr = 0;

    CheckPointer( pResizer, E_POINTER );

    IPin * pIn = GetInPin( pResizer, 0 );
    IPin * pOut = GetOutPin( pResizer, 0 );
    if( !pIn || !pOut )
    {
        return VFW_E_NOT_FOUND;
    }

    CComPtr< IPin > pInConnected;
    pIn->ConnectedTo( &pInConnected );
    if( !pInConnected )
    {
        return VFW_E_NOT_CONNECTED;
    }
    CComPtr< IPin > pOutConnected;
    pOut->ConnectedTo( &pOutConnected );

    // find the input pin's media type
    AM_MEDIA_TYPE mt;
    ZeroMemory( &mt, sizeof(AM_MEDIA_TYPE) );
    hr = pIn->ConnectionMediaType( &mt );
    if( FAILED( hr ) )
    {
	return hr;
    }

    LPBITMAPINFOHEADER lpbi = HEADER( mt.pbFormat );
    if( ( mt.formattype == FORMAT_VideoInfo )
	&&
	( DesiredWidth == HEADER(mt.pbFormat)->biWidth )
	&&
	( DesiredHeight == HEADER(mt.pbFormat)->biHeight ) )
    {
        hr = pIn->Disconnect( );
        ASSERT( !FAILED( hr ) );
        if( FAILED( hr ) )
        {
            return hr;
        }
        hr = pInConnected->Disconnect( );
        ASSERT( !FAILED( hr ) );
        if( FAILED( hr ) )
        {
            return hr;
        }

        // if we used to be connected, reconnect now
        //
        if( pOutConnected )
        {
            hr = pOut->Disconnect( );
            ASSERT( !FAILED( hr ) );
            if( FAILED( hr ) )
            {
                return hr;
            }
            hr = pOutConnected->Disconnect( );
            ASSERT( !FAILED( hr ) );
            if( FAILED( hr ) )
            {
                return hr;
            }
            hr = pInConnected->Connect( pOutConnected, &mt );
            ASSERT( !FAILED( hr ) );
            if( FAILED( hr ) )
            {
                return hr;
            }
        }

        FILTER_INFO FilterInfo;
        hr = pResizer->QueryFilterInfo(&FilterInfo);
        if( FAILED( hr ) )
        {
            return hr;
        }
        hr  = FilterInfo.pGraph->RemoveFilter(pResizer);
        if (FilterInfo.pGraph) FilterInfo.pGraph->Release();
        if( FAILED( hr ) )
        {
            return hr;
        }

        DbgLog((LOG_TRACE,DEXHELP_TRACE_LEVEL,TEXT("DEXHELP::Removed unnecessary resizer")));

        // if user wanted to know the output pin, addref and returnit
        //
        if( ppOutPin )
        {
            *ppOutPin = pInConnected;
            (*ppOutPin)->AddRef( );
        }
    }
    else
    {
        if( ppOutPin )
        {
            *ppOutPin = pOut;
            (*ppOutPin)->AddRef( );
        }
    }

    FreeMediaType( mt );

    return hr;
}

// this is called by the render engine OR the big switch (if dynamic)

// if this is being called by the big switch, then it's because of
// dynamic sources. The big switch could be part of a graph which is
// being played all by itself ( no render engine ),
// or it could be from a graph which was built by the render engine,
// which desires caching ability.
//
// when we're calling BuildSourcePart, we're looking to PULL from the cache,
// not put things in. We're passed in a pointer to a CDeadGraph, and we have
// a unique ID, so use those to pull it out.
//
HRESULT BuildSourcePart(
                        IGraphBuilder *pGraph,              // the big graph we're building to
                        BOOL fSource,                       // if this is really a source filter or just black
                        double SourceFPS,                   //
	                AM_MEDIA_TYPE *pSourceMT,           // the media type for the source to produce
                        double GroupFPS,                    //
                        long StreamNumber,                  // the source stream number
                        int nStretchMode,                   // the source stretch mode, if video
	                int cSkew,                          // number of skew structs
                        STARTSTOPSKEW *pSkew,               // skew struct array
	                CAMSetErrorLog *pErr,               // the error log you can use
                        BSTR bstrSourceName,                // the source name, if applicable
                        const GUID * SourceGUID,            // the source GUID, if applicable
                        IPin *pSplitPin,                    // src is this unconnected splitter pin
                        IPin **ppOutput,                    // the pin to connect to the switch
                        long UniqueID,                      // the source's unique Identifier
                        IDeadGraph * pCache,                // the cache we can pull dead filters from
                        BOOL InSmartRecompressionGraph,     // if we're using smart recompression
                        WCHAR * pMedLocFilterString,        // stuff for the media detector
                        long MedLocFlags,                   // stuff for the media detector
                        IMediaLocator * pMedLocOverride,    // stuff for the media detector
                        IPropertySetter * pSetter,          // properties for the source
                        IBaseFilter **ppDanglyBit)          // properties for the source
{
    DbgLog((LOG_TRACE,1,TEXT("BuildSourcePart")));

    DbgTimer t( "(rendeng) BuildSourcePart" );

    CheckPointer(ppOutput, E_POINTER);

    HRESULT hr = 0;

#ifdef DEBUG
    long tt1, tt2;
    tt1 = timeGetTime( );
#endif

    HRESULT Revived = E_FAIL;
    IPin *pOutPin = NULL;
    CComPtr< IBaseFilter > pSource;
    CComPtr< IBaseFilter > pFRC;	// frc or audpack, actually

    CDeadGraph gBuilderGraph;	// do most of our graph building in a private
				// graph (it's faster)

    // who shall we revive it to? a seperate graph or the real one?
    // a seperate one might be better.  Faster.  No millions of switch pins
    //
    CComPtr< IGraphBuilder > pBuilderGraph;
    gBuilderGraph.GetGraph( &pBuilderGraph ); // this will addreff it once
    if( !pBuilderGraph )
    {
        return E_UNEXPECTED;
    }

    // copy site from main graph to extra graph
    IObjectWithSite* pObjectWithSite = NULL;
    HRESULT hrKey = pGraph->QueryInterface(IID_IObjectWithSite, (void**)&pObjectWithSite);
    if( SUCCEEDED(hrKey) )
    {
        IUnknown *punkSite;
        hrKey = pObjectWithSite->GetSite(IID_IUnknown, (void **) &punkSite);
        pObjectWithSite->Release();

        if( SUCCEEDED(hrKey) )
        {
            hrKey = pBuilderGraph->QueryInterface(IID_IObjectWithSite, (void**)&pObjectWithSite);
            if( SUCCEEDED(hrKey) )
            {
                hrKey = pObjectWithSite->SetSite( (IUnknown *) punkSite );
                pObjectWithSite->Release( );
            }
            punkSite->Release();
        }
    }

#ifdef DEBUG
    tt1 = timeGetTime( ) - tt1;
    DbgLog( ( LOG_TRACE, DEXHELP_TRACE_LEVEL, TEXT("DEXHELP::took %ld to set up Key"), tt1 ) );
    tt1 = timeGetTime( );
#endif

    CComPtr< IPin > pStopPin;

    // we are just supposed to connect from this splitter pin
    if (pSplitPin) {
	pOutPin = pSplitPin;
	pBuilderGraph = pGraph; // we must do our building in the main graph
				// since the source is already in the main graph

	// Is the split pin connected yet?
  	CComPtr <IPin> pCon;
  	pOutPin->ConnectedTo(&pCon);
  	if (pCon) {
	    // treat the extra appendage like it's just been revived, and fix
	    // it up with the settings it really needs (might not be correct)
	    IBaseFilter *pF = GetStopFilterOfChain(pCon);
	    pStopPin = GetOutPin(pF, 0);	// this will AddRef
	    Revived = S_OK;
    	    DbgLog((LOG_TRACE,1,TEXT("Fixing up already connected extra appendage")));
	    goto FixAppendage;
	} else {
	    // set pSource, it will be NULL
	    ASSERT(pSource == NULL);
	    pSource = GetStartFilterOfChain(pOutPin);
    	    DbgLog((LOG_TRACE,1,TEXT("Going to make an extra appendage")));
	    goto Split;
	}
    }

  {

    // see if this chain already exists in the dead pool. We'll deal with whether it's
    // okay to use it in a second.
    //
    if( pCache && UniqueID )
    {
        Revived = pCache->ReviveChainToGraph( pBuilderGraph, UniqueID, NULL, &pStopPin, ppDanglyBit ); // will addref pStopPin, but not ppDanglyBit
    }

    // if we couldn't load it, jump to the section that loads it
    //
    if( Revived != S_OK )
    {
        DbgLog( ( LOG_TRACE, DEXHELP_TRACE_LEVEL, TEXT("DEXHELP::Could not revive chain %ld, wasn't there"), UniqueID ) );
        goto LoadIt;
    }

    DbgLog((LOG_TRACE,1,TEXT("Successfully revived a chain from the cache")));

FixAppendage:
    // we'll save at least the source filter, which is already loaded,
    // and reconnect from there.
    //
    pSource = GetStartFilterOfChain( pStopPin );
    pFRC = GetFilterFromPin( pStopPin );
    if( !pSource || !pFRC )
    {
        DbgLog( ( LOG_TRACE, DEXHELP_TRACE_LEVEL, TEXT("DEXHELP::Couldn't find Source or couldn't find FRC, bail!") ) );
        goto LoadIt;
    }

    // Don't waste 2 seconds trying to connect audio pins to a video resizer
    // and vice versa.  Don't try a poor mediatype
    // !!! won't work when Dexter supports other types
    if (pOutPin == NULL) {	// we already know the right pin?
        GUID guid;
        if (pSourceMT->majortype == MEDIATYPE_Video) {
            guid = MEDIATYPE_Audio;
        } else {
            guid = MEDIATYPE_Video;
        }
        pOutPin = GetOutPinNotOfType( pSource, 0, &guid);
    }


    // try and see if the chain we loaded works for us

    if( pSourceMT->majortype == MEDIATYPE_Video )
    {
        DbgLog( ( LOG_TRACE, DEXHELP_TRACE_LEVEL, TEXT("DEXHELP::Revived VIDEO chain %ld..."), UniqueID ) );

        // get the current info
        //
        VIDEOINFOHEADER * pVIH = (VIDEOINFOHEADER*) pSourceMT->pbFormat;
        long DesiredWidth = pVIH->bmiHeader.biWidth;
        long DesiredHeight = pVIH->bmiHeader.biHeight;
        unsigned long DesiredCropMethod = nStretchMode;
        long DesiredBitDepth = pVIH->bmiHeader.biBitCount;

        // how do we find the size of the current chain? We cannot look for
        // a resize filter, since it may not be present in the chain. So
        // we look for the FRC (which is always there) and ask for it's
        // connection media type on the upstream (connected) pin

        // ask the input pin of the FRC for it's media type.
        // This will return the RESIZED size
        //
        IPin * pFRCInPin = GetInPin( pFRC, 0 );
        AM_MEDIA_TYPE FrcType;
        ZeroMemory( &FrcType, sizeof( FrcType ) );
        hr = pFRCInPin->ConnectionMediaType( &FrcType );
        if( FAILED( hr ) )
        {
            return hr; // this may have failed due to lack of memory?
        }
        pVIH = (VIDEOINFOHEADER*) FrcType.pbFormat;
        long OldOutputHeight = pVIH->bmiHeader.biHeight;
        long OldOutputWidth = pVIH->bmiHeader.biWidth;
        long OldBitDepth = pVIH->bmiHeader.biBitCount;

        // see if the output height matches the height we're looking for,
        // if they don't, then we must bail
        //
        if( ( OldOutputHeight != DesiredHeight ) ||
            ( OldOutputWidth != DesiredWidth ) ||
	    // !!! BUGBUG 565/555 broken!
            ( OldBitDepth != DesiredBitDepth ) )
        {
            DbgLog( ( LOG_TRACE, DEXHELP_TRACE_LEVEL, TEXT("DEXHELP::Revived chain didn't have same output size (or bit depth)") ) );
            goto LoadIt;
        }

        // force the frame rate upon the FRC
        //
        CComQIPtr< IDexterSequencer, &IID_IDexterSequencer > pSeq( pFRC );
        hr = pSeq->put_OutputFrmRate( GroupFPS );
        ASSERT( !FAILED( hr ) ); // should never fail
        if( FAILED( hr ) )
        {
            // if it can't handle the rate, then we can't handle it's output
            return hr;
        }

        // tell the FRC about the start/stop times it's going to produce
        //
        hr = pSeq->ClearStartStopSkew();

        // !!! WE NEED A WAY TO VARY THE RATE ON SOURCE w/o MEDIA TIMES!

        for (int z=0; z<cSkew; z++)
        {
	    hr = pSeq->AddStartStopSkew( pSkew[z].rtStart, pSkew[z].rtStop,
					    pSkew[z].rtSkew, pSkew[z].dRate );
            ASSERT(hr == S_OK);
            if( FAILED( hr ) )
            {
                return hr;
            }
        }

        // inform the FRC that it's not to do rate conversions if smart recompressing
        if( InSmartRecompressionGraph )
        {
            pSeq->put_OutputFrmRate( 0.0 );
        }

        // force source frame rate on the source
        pSeq = pSource;
        if( pSeq )
        {
            hr = pSeq->put_OutputFrmRate( SourceFPS );
            if( FAILED( hr ) )
            {
                DbgLog( ( LOG_ERROR, 2, TEXT("DEXHELP::Source didn't like being told it's frame rate") ) );
                return hr;
            }
        }

        // the sizes match, which means that either they're the same, or a resizer
        // is in use. So if the user has specified a crop method, if a resizer is
        // present, we can set it. Get it?
        //
        IBaseFilter * pResizeFilter = FindFilterWithInterfaceUpstream( pFRC, &IID_IResize );
        if( pResizeFilter )
        {
            DbgLog( ( LOG_TRACE, DEXHELP_TRACE_LEVEL, TEXT("DEXHELP::setting new crop/size on revived resizer (even if same)") ) );
            CComQIPtr< IResize, &IID_IResize > pResize( pResizeFilter );
            hr = pResize->put_Size( DesiredHeight, DesiredWidth, DesiredCropMethod );
            if( FAILED( hr ) )
            {
                // oh boy, it didn't like that. Guess what?
                //
                DbgLog( ( LOG_ERROR, 1, TEXT("DEXHELP::resizer wouldn't take new size") ) );
                return hr;
            }
            CComPtr< IPin > pNewStopPin;
            hr = RemoveResizerIfPossible( pResizeFilter, DesiredWidth, DesiredHeight, &pNewStopPin );
            if( FAILED( hr ) )
            {
                return hr;
            }
        }
    }
    else if( pSourceMT->majortype == MEDIATYPE_Audio )
    {
        DbgLog( ( LOG_TRACE, DEXHELP_TRACE_LEVEL, TEXT("DEXHELP::Revived AUDIO chain %ld..."), UniqueID ) );

        // get the current info
        //
        WAVEFORMATEX * pFormat = (WAVEFORMATEX*) pSourceMT->pbFormat;
        long DesiredChannels = pFormat->nChannels;
        long DesiredBitDepth = pFormat->wBitsPerSample;
        long DesiredSampleRate = pFormat->nSamplesPerSec;

        // only two things could have changed - the format of the audio itself OR the
        // rate at which the audpacker sends stuff downstream. All we need to do is
        // disconnect the audpacker's input pin, set the format, and reconnect it.

        IPin * pPackerInPin = GetInPin( pFRC, 0 );
        AM_MEDIA_TYPE OldType;
        ZeroMemory( &OldType, sizeof( OldType ) );
        hr = pPackerInPin->ConnectionMediaType( &OldType );
        if( FAILED( hr ) )
        {
            return hr;
        }
        pFormat = (WAVEFORMATEX*) OldType.pbFormat;
        long OldChannels = pFormat->nChannels;
        long OldBitDepth = pFormat->wBitsPerSample;
        long OldSampleRate = pFormat->nSamplesPerSec;

        if( ( OldChannels != DesiredChannels ) ||
            ( OldSampleRate != DesiredSampleRate ) ||
            ( OldBitDepth != DesiredBitDepth ) )
        {
            DbgLog( ( LOG_TRACE, DEXHELP_TRACE_LEVEL, TEXT("DEXHELP::Revived chain didn't have same audio parameters") ) );
            goto LoadIt;
        }

        // force the frame rate upon the FRC
        //
        CComQIPtr< IDexterSequencer, &IID_IDexterSequencer > pSeq( pFRC );
        hr = pSeq->put_OutputFrmRate( GroupFPS );
        if( FAILED( hr ) )
        {
            // if it can't handle the rate, then we can't handle it's output
            return hr;
        }

        // tell the FRC about the start/stop times it's going to produce
        //
        hr = pSeq->ClearStartStopSkew();

        // !!! WE NEED A WAY TO VARY THE RATE ON SOURCE w/o MEDIA TIMES!

        for (int z=0; z<cSkew; z++)
        {
	    hr = pSeq->AddStartStopSkew( pSkew[z].rtStart, pSkew[z].rtStop,
					    pSkew[z].rtSkew, pSkew[z].dRate );
            ASSERT(hr == S_OK);
            if( FAILED( hr ) )
            {
                return hr;
            }
        }

        // force source frame rate on the source
        pSeq = pSource;
        if( pSeq )
        {
            hr = pSeq->put_OutputFrmRate( SourceFPS );
            if( FAILED( hr ) )
            {
                DbgLog( ( LOG_ERROR, 2, TEXT("DEXHELP::Source didn't like being told it's frame rate") ) );
            }
        }
    }
    else
    {
        // just ain't gonna happen, we don't deal with it right
        //
        goto LoadIt;
    }

    // if we got here, then the chain worked.

    hr = ReconnectToDifferentSourcePin( pBuilderGraph, pSource, StreamNumber, &pSourceMT->majortype );
    if( FAILED( hr ) )
    {
	VARIANT var;
	VariantInit(&var);
	var.vt = VT_I4;
	var.lVal = StreamNumber;
	if (pErr) pErr->_GenerateError( 2, DEX_IDS_STREAM_NUMBER, hr, &var);
	return hr;
    }

    if (pBuilderGraph != pGraph) {
        // the chain we just revived has a unique ID associated with it.
        // This call, instead of bringing it from some other graph to
        // the builder graph, will just force the unique ID to 1.
        //
        // I have no idea what to do if this bombs. It shouldn't.
        // if it does, we're in trouble.
        hr = gBuilderGraph.PutChainToRest( 1, NULL, pStopPin, NULL );
        ASSERT(SUCCEEDED(hr));
        if( !FAILED( hr ) )
        {
            hr = gBuilderGraph.ReviveChainToGraph( pGraph, 1, NULL, ppOutput, NULL ); // this will addref ppOutput
        }
    } else {
	*ppOutput = pStopPin;	// return this pin
	(*ppOutput)->AddRef();
    }
    gBuilderGraph.Clear( );

#ifdef DEBUG
    tt2 = timeGetTime( );
    DbgLog( ( LOG_TIMING, 1, TEXT("DEXHELP::Took %ld ms to use revived chain"), tt2 - tt1 ) );
#endif

    DbgLog((LOG_TRACE,1,TEXT("Successfully re-programmed revived chain. Done")));

    return hr;


LoadIt:

    DbgLog((LOG_TRACE,1,"Cannot use cached chain!"));

    // if the chain was revived, but we got here, then we cannot
    // use the source chain. But we can use the source filter and the
    // FRC/audpack, save them off. This is simpler than a bunch of extra logic
    // to see what we need to tear
    // down and what we don't.
    //
    if( Revived == S_OK )
    {
        // disconnect just this pin of the source filter (it might be shared
        // with somebody else)
        //
	if (pOutPin) {
  	    CComPtr <IPin> pCon;
  	    pOutPin->ConnectedTo(&pCon);
	    if (pCon) {
                hr = pOutPin->Disconnect();
                hr = pCon->Disconnect();
	    }
	}
        if( FAILED( hr ) )
        {
            return hr;
        }

        // throw away all the others
        //
        hr = RemoveUpstreamFromPin( pStopPin );
        if( FAILED( hr ) )
        {
            return hr;
        }

	// we revived a dangly bit too, that also must die
	if (ppDanglyBit && *ppDanglyBit) {
	    hr = RemoveDownstreamFromFilter(*ppDanglyBit);
	    *ppDanglyBit = NULL;
	}

        // we'll save the FRC by leaving the pointer alone,
        // it should be disconnected now

        DbgLog((LOG_TRACE,2,"DEXHELP::We can at least use SRC and FRC/AUDPACK"));
    }

    // if the revive chain didn't have a source in it, then load the
    // source NOW
    //
    if( !pSource )
    {
        CComPtr< IUnknown > pUnk;
        DbgLog((LOG_TRACE,1,TEXT("Making a SourceFilter")));
        hr = MakeSourceFilter( &pUnk, bstrSourceName, SourceGUID, pSourceMT, pErr, pMedLocFilterString, MedLocFlags, pMedLocOverride );
        if( FAILED( hr ) )
        {
            return hr;
        }

	// give the properties to the source. SOURCES ONLY SUPPORT STATIC PROPS
	if (pSetter) {
	    pSetter->SetProps(pUnk, -1);
	}

        pUnk->QueryInterface( IID_IBaseFilter, (void**) &pSource );

        // ************************
        // the point here is to add the filter to the graph
        // and be able to find it's ID later so we can associate it with
        // something we're looking up
        // ************************

        // put the object in the graph
        //
        WCHAR FilterName[256];
        GetFilterName( UniqueID, L"Source", FilterName, 256 );
        hr = pBuilderGraph->AddFilter( pSource, FilterName );
        ASSERT( !FAILED( hr ) );
        if( FAILED( hr ) )
        {
	    if (pErr) pErr->_GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
	    return hr;
        }
    }

    // tell it about our error log - Still image source supports this
    //
    CComQIPtr< IAMSetErrorLog, &IID_IAMSetErrorLog > pLog( pSource );
    if( pLog )
    {
	pLog->put_ErrorLog( pErr->m_pErrorLog );
    }

    // Don't waste 2 seconds trying to connect audio pins to a video resizer
    // and vice versa.  Don't try a poor mediatype
    // !!! won't work when Dexter supports other types
    if (pOutPin == NULL) {	// we already know the right pin?
        GUID guid;
        if (pSourceMT->majortype == MEDIATYPE_Video) {
            guid = MEDIATYPE_Audio;
        } else {
            guid = MEDIATYPE_Video;
        }
        pOutPin = GetOutPinNotOfType( pSource, 0, &guid);
    }

  }

// we have an unconnected splitter output as our source jumps straight here
Split:

  ///////////
  // VIDEO //
  ///////////

  if (pSourceMT->majortype == MEDIATYPE_Video) {

    ASSERT( pOutPin );
    if( !pOutPin )
    {
	hr = E_FAIL;
	if (pErr) pErr->_GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
	return hr;
    }

    // if the filter supports telling it the frame rate, then tell it, this
    // will help out still image sources, etc.
    //
    CComQIPtr< IDexterSequencer, &IID_IDexterSequencer > pGenVideo( pOutPin );
    if( pGenVideo)
    {
	// This is just in case... we don't care if they fail
	if (fSource) {
	    pGenVideo->put_OutputFrmRate(SourceFPS); // stillvid wants this
	} else {
	    pGenVideo->put_OutputFrmRate(GroupFPS);  // black wants this
	}
    }

    IPin *pResizeOutput = NULL;

    // resizer stuff
    if( fSource && !InSmartRecompressionGraph ) {
        // put a resize in the graph
        //
        CComPtr< IBaseFilter > pResizeBase;
        hr = CoCreateInstance(
	    CLSID_Resize,
	    NULL,
	    CLSCTX_INPROC_SERVER,
	    IID_IBaseFilter,
	    (void**) &pResizeBase );
        ASSERT( !FAILED( hr ) );
        if( FAILED( hr ) )
        {
	    if (pErr) pErr-> _GenerateError( 2, DEX_IDS_INSTALL_PROBLEM, hr );
	    return hr;
        }

        // !!! hr = _AddFilter( lll, pResizeBase, L"Resizer" );
        hr = pBuilderGraph->AddFilter( pResizeBase, L"Resizer" );
        ASSERT( !FAILED( hr ) );
        if( FAILED( hr ) )
        {
	    if (pErr) pErr->_GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
	    return hr;
        }

        CComQIPtr< IResize, &IID_IResize > pResize( pResizeBase );
        if( !pResize )
        {
	    hr = E_NOINTERFACE;
	    if (pErr) pErr->_GenerateError( 2, DEX_IDS_INTERFACE_ERROR, hr );
	    return hr;
        }

        // ask the source how it wants to be sized, and tell the resizer that
        //
        hr = pResize->put_MediaType(pSourceMT);
        ASSERT( !FAILED( hr ) );
        if( FAILED( hr ) )
        {
#if 0	// !!!
	    VARIANT var;
	    VariantInit(&var);
	    var.vt = VT_I4;
	    var.lVal = WhichGroup;
	    if (pErr) pErr->_GenerateError( 2, DEX_IDS_BAD_MEDIATYPE, hr, &var );
	    return hr;
#endif
	    if (pErr) pErr->_GenerateError( 2, DEX_IDS_BAD_MEDIATYPE, hr );
	    return hr;
        }
        long Height = HEADER(pSourceMT->pbFormat)->biHeight;
        long Width = HEADER(pSourceMT->pbFormat)->biWidth;
        hr = pResize->put_Size( Height, Width, nStretchMode );
        ASSERT( !FAILED( hr ) );

        // get the pins on the resizer
        //
        IPin * pResizeInput = GetInPin( pResizeBase, 0 );
        ASSERT( pResizeInput );
        if( !pResizeInput )
        {
	    if (pErr) pErr->_GenerateError(1,DEX_IDS_GRAPH_ERROR,E_UNEXPECTED);
	    return E_UNEXPECTED;
        }

        pResizeOutput = GetOutPin( pResizeBase, 0 );
        ASSERT( pResizeOutput );
        if( !pResizeOutput )
        {
	    if (pErr) pErr->_GenerateError(1,DEX_IDS_GRAPH_ERROR, E_UNEXPECTED);
	    return E_UNEXPECTED;
        }

        // hook up the resizer input
        //
#ifdef DEBUG
        DbgLog((LOG_TIMING,1,"PERF: Connect in main graph? = %d",
			pBuilderGraph == pGraph));
	DWORD dwT = timeGetTime();
#endif
        hr = pBuilderGraph->Connect( pOutPin, pResizeInput );
#ifdef DEBUG
	dwT = timeGetTime() - dwT;
        DbgLog((LOG_TIMING,1,"PERF: Connect: %dms", (int)dwT));
#endif

	// why didn't we find the right pin off the bat?
        int iPin = 0;
        while( FAILED( hr ) )
        {
	    ASSERT(FALSE);
            pOutPin = GetOutPin( pSource, ++iPin );

            // if no more pins, give up
            if( !pOutPin )
                break;

            hr = pBuilderGraph->Connect( pOutPin, pResizeInput );
        }


        if( FAILED( hr ) )
        {
	    if (bstrSourceName) {
	        VARIANT var;
	        VariantInit(&var);
	        var.vt = VT_BSTR;
	        var.bstrVal = bstrSourceName;
	        if (pErr) pErr->_GenerateError( 1, DEX_IDS_BAD_SOURCE_NAME2,
		    E_INVALIDARG, &var);
	        return E_INVALIDARG;
	    } else {
	        if (pErr) pErr->_GenerateError( 1, DEX_IDS_BAD_SOURCE_NAME2,
		        E_INVALIDARG);
	        return E_INVALIDARG;
	    }
        }

        // maybe we didn't need a resizer cuz the size was OK already
        hr = RemoveResizerIfPossible(pResizeBase, Width, Height,&pResizeOutput);
	if (FAILED(hr)) {
	    if (pErr) pErr->_GenerateError( 1, DEX_IDS_GRAPH_ERROR, hr);
	    return hr;
	}
	pResizeOutput->Release();  // it was just addrefed

    } else {
	// this is the output pin to connect to the FRC
	pResizeOutput = pOutPin;
    }

    // put a FRC in the graph
    //
    if( !pFRC )
    {
        hr = CoCreateInstance(
	    CLSID_FrmRateConverter,
	    NULL,
	    CLSCTX_INPROC_SERVER,
	    IID_IBaseFilter,
	    (void**) &pFRC );
        ASSERT( !FAILED( hr ) );
        if( FAILED( hr ) )
        {
	    if (pErr) pErr->_GenerateError( 2, DEX_IDS_INSTALL_PROBLEM, hr );
	    return hr;
        }

        hr = pBuilderGraph->AddFilter( pFRC, L"Frame Rate Converter" );
        ASSERT( !FAILED( hr ) );
        if( FAILED( hr ) )
        {
	    if (pErr) pErr->_GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
	    return hr;
        }
    }

    // set the FRC now, before connecting
    //
    CComQIPtr< IDexterSequencer, &IID_IDexterSequencer > pFRCInt( pFRC );

    // tell the FRC about the start/stop times it's going to produce
    //
    hr = pFRCInt->ClearStartStopSkew();

    // !!! WE NEED A WAY TO VARY THE RATE ON SOURCE w/o MEDIA TIMES!

    for (int z=0; z<cSkew; z++) {
	hr = pFRCInt->AddStartStopSkew(pSkew[z].rtStart, pSkew[z].rtStop,
					pSkew[z].rtSkew, pSkew[z].dRate);
        ASSERT(hr == S_OK);
    }

    // tell the FRC what frame rate to give out
    //
    hr = pFRCInt->put_OutputFrmRate( GroupFPS );
    ASSERT( !FAILED( hr ) );
    if( InSmartRecompressionGraph )
    {
        pFRCInt->put_OutputFrmRate( 0.0 );
    }

    // tell the FRC what media type it should accept
    //
    hr = pFRCInt->put_MediaType( pSourceMT );
    ASSERT( !FAILED( hr ) );
    if( FAILED( hr ) )
    {
#if 0	// !!!
	VARIANT var;
	VariantInit(&var);
	var.vt = VT_I4;
	var.lVal = WhichGroup;
	if (pErr) pErr->_GenerateError( 2, DEX_IDS_BAD_MEDIATYPE, hr, &var );
	return hr;
#endif
	if (pErr) pErr->_GenerateError( 2, DEX_IDS_BAD_MEDIATYPE, hr );
	return hr;
    }

    IPin * pFRCInput = GetInPin( pFRC, 0 );
    ASSERT( pFRCInput );
    if( !pFRCInput )
    {
	if (pErr) pErr->_GenerateError( 2, DEX_IDS_GRAPH_ERROR, E_UNEXPECTED);
	return E_UNEXPECTED;
    }

    // connect the FRC input pin
    //
    hr = pBuilderGraph->Connect( pResizeOutput, pFRCInput );

    // Somehow we got the wrong output pin from the source filter
    if( FAILED(hr) && InSmartRecompressionGraph )
    {
	ASSERT(FALSE);
        int iPin = 0;
        while( FAILED( hr ) )
        {
            pResizeOutput = GetOutPin( pSource, ++iPin );

            // if no more pins, give up
            if( !pResizeOutput )
            {
                break;
            }

            hr = pBuilderGraph->Connect( pResizeOutput, pFRCInput );
        }
    }

    ASSERT( !FAILED( hr ) );
    if( FAILED( hr ) )
    {
	if (pErr) pErr->_GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
	return hr;
    }

    // if we need a stream > 0 then we have to disconnect things and
    // try a different one.
    // !!! Much faster to somehow get stream right the first time
    if( StreamNumber && fSource )
    {
	hr = ReconnectToDifferentSourcePin(pBuilderGraph, pSource,
			StreamNumber, &MEDIATYPE_Video);
	if( FAILED( hr ) )
	{
	    VARIANT var;
	    VariantInit(&var);
	    var.vt = VT_I4;
	    var.lVal = StreamNumber;
	    if (pErr) pErr->_GenerateError( 2, DEX_IDS_STREAM_NUMBER, hr, &var);
	    return hr;
	}
    } // if StreamNumber

    IPin * pFRCOutput = GetOutPin( pFRC, 0 );
    ASSERT( pFRCOutput );
    if( !pFRCOutput )
    {
	if (pErr) pErr->_GenerateError( 2, DEX_IDS_GRAPH_ERROR, E_UNEXPECTED );
	return E_UNEXPECTED;
    }

    *ppOutput = pFRCOutput;


  ///////////
  // AUDIO //
  ///////////

  } else if (pSourceMT->majortype == MEDIATYPE_Audio) {

    ASSERT( pOutPin );
    if( !pOutPin )
    {
	hr = E_FAIL;
	if (pErr) pErr->_GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
	return hr;
    }

    CComQIPtr< IDexterSequencer, &IID_IDexterSequencer > pGenVideo( pOutPin );
    if( pGenVideo)
    {
	// This is just in case... we don't care if they fail
	if (fSource) {
	    pGenVideo->put_OutputFrmRate(SourceFPS); // ???????? wants this
	} else {
	    pGenVideo->put_OutputFrmRate(GroupFPS);  // silence wants this
	}
    }

    if (!pFRC) {
        // put an audio repacker in the graph
        //
        hr = CoCreateInstance(
	    CLSID_AudRepack,
	    NULL,
	    CLSCTX_INPROC_SERVER,
	    IID_IBaseFilter,
	    (void**) &pFRC );
        ASSERT( !FAILED( hr ) );
        if( FAILED( hr ) )
        {
	    if (pErr) pErr->_GenerateError( 2, DEX_IDS_INSTALL_PROBLEM, hr );
	    return hr;
        }

        // add the repacker to the graph
        //
        hr = pBuilderGraph->AddFilter( pFRC, L"Audio Repackager" );
        ASSERT( !FAILED( hr ) );
        if( FAILED( hr ) )
        {
	    if (pErr) pErr->_GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
	    return hr;
        }
    }

    // set the AudPack properties now BEFORE connecting!
    //
    CComQIPtr< IDexterSequencer, &IID_IDexterSequencer > pRepackerInt( pFRC );
    hr = pRepackerInt->ClearStartStopSkew();

    // !!! WE NEED A WAY TO VARY THE RATE ON SOURCE w/o MEDIA TIMES!

    for (int z=0; z<cSkew; z++) {
	hr = pRepackerInt->AddStartStopSkew(pSkew[z].rtStart, pSkew[z].rtStop,
					pSkew[z].rtSkew, pSkew[z].dRate);
	ASSERT(hr == S_OK);
    }
    hr = pRepackerInt->put_OutputFrmRate( GroupFPS );
    ASSERT( !FAILED( hr ) );
    hr = pRepackerInt->put_MediaType( pSourceMT );
    ASSERT( !FAILED( hr ) );
    if( FAILED( hr ) )
    {
#if 0 // !!!
	VARIANT var;
	VariantInit(&var);
	var.vt = VT_I4;
	var.lVal = WhichGroup;
	return _GenerateError( 2, DEX_IDS_BAD_MEDIATYPE, hr, &var );
#endif
	if (pErr) pErr->_GenerateError( 2, DEX_IDS_BAD_MEDIATYPE, hr );
	return hr;
    }

    IPin * pRepackerInput = GetInPin( pFRC, 0 );
    ASSERT( pRepackerInput );
    if( !pRepackerInput )
    {
	if (pErr) pErr->_GenerateError( 1, DEX_IDS_GRAPH_ERROR, E_UNEXPECTED);
	return E_UNEXPECTED;
    }

#ifdef DEBUG
    DbgLog((LOG_TIMING,1,"PERF: Connect in main graph? = %d",
			pBuilderGraph == pGraph));
    DWORD dwT = timeGetTime();
#endif
    hr = pBuilderGraph->Connect( pOutPin, pRepackerInput );
#ifdef DEBUG
    dwT = timeGetTime() - dwT;
    DbgLog((LOG_TIMING,1,"PERF: Connect: %dms", (int)dwT));
#endif

    if( FAILED( hr ) )
    {
	if (bstrSourceName) {
	    VARIANT var;
	    VariantInit(&var);
	    var.vt = VT_BSTR;
	    var.bstrVal = bstrSourceName;
	    if (pErr) pErr->_GenerateError( 1, DEX_IDS_BAD_SOURCE_NAME2,
		    hr, &var);
	    return hr;
	} else {
	    if (pErr) pErr->_GenerateError( 1, DEX_IDS_BAD_SOURCE_NAME2,
		    hr);
	    return hr;
	}
    }

    // if we need a stream > 0 then we have to disconnect things and
    // try a different one, we only hooked up stream 0
    // !!! find the right stream off the bat? Put in parser by hand?
    if( StreamNumber && fSource )
    {
	hr = ReconnectToDifferentSourcePin(pBuilderGraph, pSource,
		StreamNumber, &MEDIATYPE_Audio);
	if( FAILED( hr ) )
	{
	    VARIANT var;
	    VariantInit(&var);
	    var.vt = VT_I4;
	    var.lVal = StreamNumber;
	    if (pErr) pErr->_GenerateError( 2, DEX_IDS_STREAM_NUMBER, hr, &var);
	    return hr;
	}
    } // if StreamNumber

    IPin * pRepackerOutput = GetOutPin( pFRC, 0 );
    ASSERT( pRepackerOutput );
    if( !pRepackerOutput )
    {
	if (pErr) pErr->_GenerateError( 2, DEX_IDS_GRAPH_ERROR, E_UNEXPECTED );
	return E_UNEXPECTED;
    }

    *ppOutput = pRepackerOutput;
  }

    if (pBuilderGraph != pGraph) {
        // the chain we just built does NOT have a unique ID associated with it.
        // This call, instead of bringing it from some other graph to
        // the builder graph, will just force a unique ID to be associated with this
        // chain.
        //
        hr = gBuilderGraph.PutChainToRest( 1, NULL, *ppOutput, NULL );
        if( !FAILED( hr ) )
        {
            hr = gBuilderGraph.ReviveChainToGraph( pGraph, 1, NULL, ppOutput, NULL ); // this will addref ppOutput
        }
    } else {
	(*ppOutput)->AddRef();
    }
    gBuilderGraph.Clear( );

#ifdef DEBUG
    tt2 = timeGetTime( ) - tt1;
    DbgLog((LOG_TIMING,1, "DEXHELP::Hooking up source chain took %ld ms", tt2 ));
#endif

    DbgLog((LOG_TRACE,1,TEXT("BuildSourcePart successfully created new chain")));

    return hr;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\render\dexhelp.h ===
// Copyright (c) 1998 - 1999  Microsoft Corporation.  All Rights Reserved.
#include <streams.h>
#include "..\errlog\cerrlog.h"
#include "..\render\deadpool.h"

HRESULT MakeSourceFilter(
                        IUnknown **ppVal, 
                        BSTR szMediaName,
                        const GUID *pSubObjectGuid, 
                        AM_MEDIA_TYPE *pmt, 
                        CAMSetErrorLog *pErr,
                        WCHAR * pMedLocFilterString,
                        long MedLocFlags,
                        IMediaLocator * pChain );

HRESULT BuildSourcePart(
                        IGraphBuilder *pGraph, 
	                BOOL fSource, 		// real source, or blk/silence?
                        double sfps, 		// source fps
                        AM_MEDIA_TYPE *pMT, 	// source MT
                        double fps,		// group fps
	                long StreamNumber, 	
                        int nStretchMode, 
                        int cSkew, 		// to program skewer with
                        STARTSTOPSKEW *pSkew,
	                CAMSetErrorLog *pErr, 
                        BSTR bstrName, 		// source name or
                        const GUID * SourceGuid,// source filter clsid
			IPin *pSplitterSource,	// src is this unc split pin
                        IPin **ppOutput,	// returns chain output
                        long UniqueID,		// source GenID
                        IDeadGraph * pCache,	// pull from this cache
                        BOOL InSmartRecompressGraph,
                        WCHAR * pMedLocFilterString,
                        long MedLocFlags,
                        IMediaLocator * pChain,
			IPropertySetter *pSetter,  	// props for the source
			IBaseFilter **ppDanglyBit);	// start of unused chain
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\render\render.cpp ===
// Copyright (c) 1998 - 1999  Microsoft Corporation.  All Rights Reserved.
// render.cpp : Implementation of DLL Exports.


// Note: Proxy/Stub Information
//      To build a separate proxy/stub DLL, 
//      run nmake -f renderps.mk in the project directory.

#include <streams.h>
#include "stdafx.h"

#ifdef FILTER_DLL

    #include "resource.h"
    #include "IRendEng.h"
    #include "qedit_i.c"

    CComModule _Module;

    BEGIN_OBJECT_MAP(ObjectMap)
    OBJECT_ENTRY(CLSID_RenderEngine, CRenderEngine)
    OBJECT_ENTRY(CLSID_SmartRenderEngine, CSmartRenderEngine)
    END_OBJECT_MAP()

    /////////////////////////////////////////////////////////////////////////////
    // DLL Entry Point

    extern "C"
    BOOL WINAPI DllMain(HINSTANCE hInstance, DWORD dwReason, LPVOID /*lpReserved*/)
    {
        if (dwReason == DLL_PROCESS_ATTACH)
        {
            _Module.Init(ObjectMap, hInstance);
            DisableThreadLibraryCalls(hInstance);
        }
        else if (dwReason == DLL_PROCESS_DETACH)
            _Module.Term();
        return TRUE;    // ok
    }

    /////////////////////////////////////////////////////////////////////////////
    // Used to determine whether the DLL can be unloaded by OLE

    STDAPI DllCanUnloadNow(void)
    {
        return (_Module.GetLockCount()==0) ? S_OK : S_FALSE;
    }

    /////////////////////////////////////////////////////////////////////////////
    // Returns a class factory to create an object of the requested type
    STDAPI DllGetClassObject(REFCLSID rclsid, REFIID riid, LPVOID* ppv)
    {
        return _Module.GetClassObject(rclsid, riid, ppv);
    }

    /////////////////////////////////////////////////////////////////////////////
    // DllRegisterServer - Adds entries to the system registry

    STDAPI DllRegisterServer(void)
    {
        return _Module.RegisterServer(TRUE);
    }

    /////////////////////////////////////////////////////////////////////////////
    // DllUnregisterServer - Removes entries from the system registry

    STDAPI DllUnregisterServer(void)
    {
        return _Module.UnregisterServer();
    }


#endif // #ifdef FILTER_DLL
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\render\irendeng.h ===
// Copyright (c) 1998 - 1999  Microsoft Corporation.  All Rights Reserved.
// IRendEng.h : Declaration of the CRenderEngine

#ifndef __RENDERENGINE_H_
#define __RENDERENGINE_H_

class CDeadGraph;
#include "resource.h"

// the maximum amount of switchers in our graph possible
//
const long MAX_SWITCHERS = 132;

// the default FPS we hook stuff up at
//
const double DEFAULT_FPS = 15.0;

// our output trace level
//
extern const int RENDER_TRACE_LEVEL;

// how severe the error is we're throwing
//
typedef enum
{
    ERROR_SEVERE = 1,
    ERROR_MEDIUM,
    ERROR_LIGHT
} ERROR_PRIORITY;

// used for the _Connect method, flags what type of connection we're making
//
typedef enum
{
    CONNECT_TYPE_NONE,
    CONNECT_TYPE_SOURCE,
    CONNECT_TYPE_RENDERER
} CONNECT_TYPE;

enum
{
    ID_OFFSET_EFFECT = 1,
    ID_OFFSET_TRANSITION,
};

typedef struct {
    long MyID;		// GENID of this source
    long MatchID;	// GENID of the matching source in the other group
    IPin *pPin;		// other splitter pin for matched source to use
    int  nSwitch0InPin; // first group chain goes to this input pin
} ShareAV;

/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

class ATL_NO_VTABLE CRenderEngine : 
    public CComObjectRootEx<CComMultiThreadModel>,
    public CComCoClass<CRenderEngine, &CLSID_RenderEngine>,
    public IDispatchImpl<IRenderEngine, &IID_IRenderEngine, &LIBID_DexterLib>,
    public IObjectWithSite,
    public IServiceProvider,
    public CAMSetErrorLog
{
private:

    // caching stuff
    // caching stuff
    // caching stuff

    // caching vars
    long m_nLastGroupCount;
    CDeadGraph * m_pDeadCache;
    long m_nDynaFlags;

    // caching methods
    HRESULT _LoadCache( );
    HRESULT _ClearCache( );

    // dynamic recompression stuff
    // dynamic recompression stuff
    // dynamic recompression stuff

    BOOL                m_bSmartCompress;
    BOOL                m_bUsedInSmartRecompression;

    // media location stuff
    //
    CComPtr< IMediaLocator > m_pMedLocChain;
    WCHAR                   m_MedLocFilterString[_MAX_PATH];
    long                    m_nMedLocFlags;

    // non caching stuff
    // non caching stuff
    // non caching stuff

    // stuff that lets us share a source for both audio/video
    ShareAV	*m_share;	// list of all sources that will match
    int		m_cshare;	// size of array used
    int		m_cshareMax;	// allocated size of array
    IBaseFilter **m_pdangly;	// list of extra dangly bits
    int		m_cdangly;	// size of array used
    int		m_cdanglyMax;	// allocated size of array

    CCritSec                m_CritSec;
    CComPtr< IAMTimeline >  m_pTimeline;
    IBigSwitcher *          m_pSwitcherArray[MAX_SWITCHERS];
    CComPtr< IPin >         m_pSwitchOuttie[MAX_SWITCHERS];
    CComPtr<IGraphBuilder>  m_pGraph;
    CComPtr< IGrfCache >    m_pSourceConnectCB;
    long                    m_nGroupsAdded;
    REFERENCE_TIME          m_rtRenderStart;
    REFERENCE_TIME          m_rtRenderStop;
    HRESULT                 m_hBrokenCode;

    HRESULT _CreateObject( CLSID Clsid, GUID Interface, void ** pObject, long ID = 0 );
    HRESULT _AddFilter( IBaseFilter * pFilter, LPCWSTR pName, long ID = 0 );
    HRESULT _RemoveFilter( IBaseFilter * pFilter );
    HRESULT _Connect( IPin * pPin1, IPin * pPin2 );
    HRESULT _Disconnect( IPin * pPin1, IPin * pPin2 );
    HRESULT _HookupSwitchers( );
    HRESULT _AddVideoGroupFromTimeline( long WhichGroup, AM_MEDIA_TYPE * mt );
    HRESULT _AddAudioGroupFromTimeline( long WhichGroup, AM_MEDIA_TYPE * mt );
    long    _HowManyMixerOutputs( long WhichGroup );
    HRESULT _RemoveFromDanglyList( IPin *pDanglyPin );
    //HRESULT _AddRandomGroupFromTimeline( long WhichGroup, AM_MEDIA_TYPE * mt );
    void    _CheckErrorCode( long ErrorCode ) { if( FAILED( ErrorCode ) ) m_hBrokenCode = ErrorCode; }
    HRESULT _SetPropsOnAudioMixer( IBaseFilter * pAudMixer, AM_MEDIA_TYPE * pMediaType, double fps, long WhichGroup );
    HRESULT _ScrapIt( BOOL fWipeGraph);
    HRESULT _FindMatchingSource(BSTR bstrName, REFERENCE_TIME SourceStartOrig,
		REFERENCE_TIME SourceStopOrig, REFERENCE_TIME MediaStartOrig,
		REFERENCE_TIME MediaStopOrig, int WhichGroup, int WhichTrack,
		int WhichSource, AM_MEDIA_TYPE *pGroupMediaType,
		double GroupFPS, long *ID);

    IUnknown *       m_punkSite;

public:
    CRenderEngine();
    ~CRenderEngine();
    HRESULT FinalConstruct();

DECLARE_REGISTRY_RESOURCEID(IDR_RENDERENGINE)

DECLARE_PROTECT_FINAL_CONSTRUCT()

BEGIN_COM_MAP(CRenderEngine)
    COM_INTERFACE_ENTRY(IRenderEngine)
    COM_INTERFACE_ENTRY(IAMSetErrorLog)
    COM_INTERFACE_ENTRY(IObjectWithSite)
    COM_INTERFACE_ENTRY(IServiceProvider)
END_COM_MAP()

// IRenderEngine
public:
    STDMETHODIMP SetTimelineObject( IAMTimeline * pTimeline );
    STDMETHODIMP GetTimelineObject( IAMTimeline ** ppTimeline );
    STDMETHODIMP GetFilterGraph( IGraphBuilder ** ppFG );
    STDMETHODIMP SetFilterGraph( IGraphBuilder * pFG );
    STDMETHODIMP SetInterestRange( REFERENCE_TIME Start, REFERENCE_TIME Stop );
    STDMETHODIMP SetInterestRange2( double Start, double Stop );
    STDMETHODIMP SetRenderRange( REFERENCE_TIME Start, REFERENCE_TIME Stop );
    STDMETHODIMP SetRenderRange2( double Start, double Stop );
    STDMETHODIMP GetGroupOutputPin( long Group, IPin ** ppRenderPin );
    STDMETHODIMP ScrapIt( );
    STDMETHODIMP RenderOutputPins( );
    STDMETHODIMP GetVendorString( BSTR * pVendorID );
    STDMETHODIMP ConnectFrontEnd( );
    STDMETHODIMP SetSourceConnectCallback( IGrfCache * pCallback );
    STDMETHODIMP SetDynamicReconnectLevel( long Level );
    STDMETHODIMP DoSmartRecompression( );
    STDMETHODIMP UseInSmartRecompressionGraph( );
    STDMETHODIMP SetSourceNameValidation( BSTR FilterString, IMediaLocator * pCallback, LONG Flags );
    STDMETHODIMP Commit( );
    STDMETHODIMP Decommit( );
    STDMETHODIMP GetCaps( long Index, long * pReturn );

    // --- IObjectWithSite methods
    // This interface is here so we can keep track of the context we're
    // living in.
    STDMETHODIMP    SetSite(IUnknown *pUnkSite);
    STDMETHODIMP    GetSite(REFIID riid, void **ppvSite);

    // IServiceProvider
    STDMETHODIMP QueryService(REFGUID guidService, REFIID riid, void **ppvObject);
};

class ATL_NO_VTABLE CSmartRenderEngine : 
    public CComObjectRootEx<CComMultiThreadModel>,
    public CComCoClass<CSmartRenderEngine, &CLSID_SmartRenderEngine>,
    public IDispatchImpl<IRenderEngine, &IID_IRenderEngine, &LIBID_DexterLib>,
    public ISmartRenderEngine,
    public IObjectWithSite,
    public IServiceProvider,
    public CAMSetErrorLog
{
private:

    // the "uncompressed" render engine
    CComPtr< IRenderEngine > m_pRenderer;

    // the "compressed" render engine
    CComPtr< IRenderEngine > m_pCompRenderer;

    CComPtr< IBaseFilter > * m_ppCompressor;
    long m_nGroups; // how many groups in the timeline

    CComPtr< IFindCompressorCB > m_pCompressorCB;

    BOOL IsGroupCompressed( long Group );

public:
    CSmartRenderEngine();
    ~CSmartRenderEngine();

DECLARE_REGISTRY_RESOURCEID(IDR_SMARTRENDERENGINE)

DECLARE_PROTECT_FINAL_CONSTRUCT()                                               

BEGIN_COM_MAP(CSmartRenderEngine)
    COM_INTERFACE_ENTRY(IRenderEngine)
    COM_INTERFACE_ENTRY(ISmartRenderEngine)
    COM_INTERFACE_ENTRY(IObjectWithSite)
    COM_INTERFACE_ENTRY(IServiceProvider)
    COM_INTERFACE_ENTRY(IAMSetErrorLog)
END_COM_MAP()

// IRenderEngine
public:
    STDMETHODIMP Commit( );
    STDMETHODIMP Decommit( );
    STDMETHODIMP SetInterestRange( REFERENCE_TIME Start, REFERENCE_TIME Stop );
    STDMETHODIMP SetInterestRange2( double Start, double Stop );
    STDMETHODIMP SetRenderRange( REFERENCE_TIME Start, REFERENCE_TIME Stop );
    STDMETHODIMP SetRenderRange2( double Start, double Stop );
    STDMETHODIMP SetTimelineObject( IAMTimeline * pTimeline );
    STDMETHODIMP GetTimelineObject( IAMTimeline ** ppTimeline );
    STDMETHODIMP Run( REFERENCE_TIME Start, REFERENCE_TIME Stop );
    STDMETHODIMP GetCaps( long Index, long * pReturn );
    STDMETHODIMP GetVendorString( BSTR * pVendorID );
    STDMETHODIMP GetFilterGraph( IGraphBuilder ** ppFG );
    STDMETHODIMP SetFilterGraph( IGraphBuilder * pFG );
    STDMETHODIMP ConnectFrontEnd( );
    STDMETHODIMP ScrapIt( );
    STDMETHODIMP RenderOutputPins( );
    STDMETHODIMP SetSourceConnectCallback( IGrfCache * pCallback );
    STDMETHODIMP GetGroupOutputPin( long Group, IPin ** ppRenderPin );
    STDMETHODIMP SetDynamicReconnectLevel( long Level );
    STDMETHODIMP DoSmartRecompression( );
    STDMETHODIMP UseInSmartRecompressionGraph( );
    STDMETHODIMP SetSourceNameValidation( BSTR FilterString, IMediaLocator * pCallback, LONG Flags );

    // ISmartRenderEngine
    STDMETHODIMP SetGroupCompressor( long Group, IBaseFilter * pCompressor ); 
    STDMETHODIMP GetGroupCompressor( long Group, IBaseFilter ** ppCompressor ); 
    STDMETHODIMP SetFindCompressorCB( IFindCompressorCB * pCallback );

    STDMETHODIMP _InitSubComponents( );

    // --- IObjectWithSite methods
    // This interface is here so we can keep track of the context we're
    // living in.
    STDMETHODIMP    SetSite(IUnknown *pUnkSite);
    STDMETHODIMP    GetSite(REFIID riid, void **ppvSite);

    IUnknown *       m_punkSite;

    // IServiceProvider
    STDMETHODIMP QueryService(REFGUID guidService, REFIID riid, void **ppvObject);
};

#endif //__RENDERENGINE_H_
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\render\resource.h ===
// Copyright (c) 1998 - 1999  Microsoft Corporation.  All Rights Reserved.
//{{NO_DEPENDENCIES}}
// Microsoft Developer Studio generated include file.
// Used by render.rc
//
#define IDR_RENDERENGINE                1500
#define IDR_SMARTRENDERENGINE           1501

// Next default values for new objects
// 
#ifdef APSTUDIO_INVOKED
#ifndef APSTUDIO_READONLY_SYMBOLS
#define _APS_NEXT_RESOURCE_VALUE        203
#define _APS_NEXT_COMMAND_VALUE         32768
#define _APS_NEXT_CONTROL_VALUE         201
#define _APS_NEXT_SYMED_VALUE           103
#endif
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\render\rencache.cpp ===
// Copyright (c) 1999  Microsoft Corporation.  All Rights Reserved.
#include <streams.h>
#include "stdafx.h"
#include "grid.h"
#include "deadpool.h"
#include "..\errlog\cerrlog.h"
#include "..\util\filfuncs.h"
#include "IRendEng.h"
#include "dexhelp.h"

const long THE_OUTPUT_PIN = -1;

// in this function, we're taking a GRAPH which has certain filters in it which
// were built by the render engine, and we're going to strip them out of the
// graph and put them in the dead place.

HRESULT CRenderEngine::_LoadCache( )
{
    DbgLog((LOG_TRACE,1, "RENcache::Loading up the cache, there are %d old groups", m_nLastGroupCount ));

    HRESULT hr = 0;

#ifdef DEBUG
    long t1 = timeGetTime( );
#endif

    // go through every switch and pull off all the sources and 
    // stick them in the dead pool. Also, disconnect other things connected
    //
    for( int i = 0 ; i < m_nLastGroupCount ; i++ )
    {
        IBigSwitcher * pSwitch = m_pSwitcherArray[i];
        CComQIPtr< IBaseFilter, &IID_IBaseFilter > pFilter( pSwitch );

        // how many input pins does this switch have? Ask it!
        //
        long InPins = 0;
        pSwitch->GetInputDepth( &InPins );

        // pull off each source string connected to an input pin
        //
        for( int in = 0 ; in < InPins ; in++ )
        {
            // get the input pin
            //
            CComPtr<IPin> pPin;
            pSwitch->GetInputPin(in, &pPin);
            ASSERT(pPin);

            CComPtr< IPin > pConnected = NULL;
            hr = pPin->ConnectedTo( &pConnected );

            if( !pConnected )
            {
                continue;
            }

            // disconnect all input pins
            //
            hr = pConnected->Disconnect( );
            ASSERT( !FAILED( hr ) );
            if( FAILED( hr ) )
            {
                return hr;
            }

            hr = pPin->Disconnect( );
            ASSERT( !FAILED( hr ) );
            if( FAILED( hr ) )
            {
                return hr;
            }

            // ask switch if the pin is a source
            //
            BOOL IsSource = FALSE;
            pSwitch->IsInputASource( in, &IsSource );

            if( !IsSource )
            {
                continue;
            }

            // pull it out and put it in the dead pool
            //
            // how do we get the source ID for this filter chain?
            // we need the source filter's ID to identify this chain later
            CComPtr< IBaseFilter > pSourceFilter = GetStartFilterOfChain( pConnected );

	    // This chain may have an appendage to be a shared source with
	    // group 1.  If so, disconnect the appendage from the switch, so
	    // we can put both chains into the cache.
	    //
	    IBaseFilter *pDanglyBit = NULL;
	    if (i == 0) {
            	CComPtr<IAMTimelineObj> pGroupObj;
		hr = m_pTimeline->GetGroup(&pGroupObj, 1);
		if (hr == S_OK) {	// maybe there isn't a group 1
        	    CComQIPtr<IAMTimelineGroup, &IID_IAMTimelineGroup>
							pGroup(pGroupObj);
        	    CComQIPtr<IBaseFilter, &IID_IBaseFilter>
						pSwitch(m_pSwitcherArray[1]);
		    AM_MEDIA_TYPE mt;
		    if (pGroup) {
		        hr = pGroup->GetMediaType(&mt);
		        ASSERT(hr == S_OK);
		    }
		    hr = DisconnectExtraAppendage(pSourceFilter, &mt.majortype,
							pSwitch, &pDanglyBit);
		}
	    }	

            // look up the source filter's unique ID based on the filter #
            //
            long SourceID = 0;
            SourceID = GetFilterGenID( pSourceFilter );
            if( SourceID != 0 )
            {
                hr = m_pDeadCache->PutChainToRest( SourceID, NULL, pConnected, pDanglyBit );
                DbgLog((LOG_TRACE,1, "RENcache::pin %ld's source (%ld) put to sleep", in, SourceID ));
                if( FAILED( hr ) )
                {
                    return hr;
		}
            }
            else
            {
                DbgLog((LOG_TRACE,1, "RENcache::pin %ld was a non-tagged source", in ));
            }

        } // for each input pin on the switch

        // for each output on the switch
        //
        long OutPins = 0;
        pSwitch->GetOutputDepth( &OutPins );

        // pull off everything on the output, except the 0th pin, and throw them away
        //
        for( int out = 1 ; out < OutPins ; out++ )
        {
            // get the output pin
            //
            CComPtr<IPin> pPin;
            pSwitch->GetOutputPin( out, &pPin );
            ASSERT(pPin);

            CComPtr< IPin > pConnected = NULL;
            hr = pPin->ConnectedTo( &pConnected );

            if( !pConnected )
            {
                continue;
            }

            hr = pConnected->Disconnect( );
            ASSERT( !FAILED( hr ) );
            if( FAILED( hr ) )
            {
                return hr;
            }
            hr = pPin->Disconnect( );
            ASSERT( !FAILED( hr ) );
            if( FAILED( hr ) )
            {
                return hr;
            }

            // put the filter that was connected into
            // the cache too
            
            // this is 0'ed out because it doesn't save us too much time
            //
            if( 0 )
            {
                PIN_INFO pi;
                pConnected->QueryPinInfo( &pi );
                if( pi.pFilter ) pi.pFilter->Release( );

                long ID = 0;
                ID = GetFilterGenID( pi.pFilter );

                if( ID != 0 )
                {
                    hr = m_pDeadCache->PutFilterToRest( ID, pi.pFilter );
                    DbgLog((LOG_TRACE,1, "RENcache::out pin %ld's effect %ld put to sleep", out, ID ));
                    if( FAILED( hr ) )
                    {
                        return hr;
                    }
                }
            }
        }
    } // for each group

    // need to zero out sync source for all filters in this
    // chain, since the waveout filter's internal SetSyncSource( NULL )
    // is called upon filter removal. It then looks at all the filters
    // in the graph and finds some filters are already in a different
    // graph and CRASHES. This avoids the problem

    CComQIPtr< IMediaFilter, &IID_IMediaFilter > pMedia( m_pGraph );
    hr = pMedia->SetSyncSource( NULL );
    ASSERT( !FAILED( hr ) );

    // put all the switches to sleep in the dead graph. This will pull in
    // their output pins and anything connected to the output pins too
    for( i = 0 ; i < m_nLastGroupCount ; i++ )
    {
        IBigSwitcher * pSwitch = m_pSwitcherArray[i];
        CComQIPtr< IBaseFilter, &IID_IBaseFilter > pFilter( pSwitch );
        if( !GetFilterGraphFromFilter( pFilter ) )
        {
            continue;
        }

        long SwitchID = 0;
        SwitchID = GetFilterGenID( pFilter );
        ASSERT( SwitchID );

        // put the big switch itself into the dead pool
        //
        hr = m_pDeadCache->PutFilterToRestNoDis( SwitchID, pFilter );
        if( FAILED( hr ) )
        {
            return hr;
        }
    }

    // !!! restore default sync for the graph, somebody may
    // not like this, but they can bug us about it later
    //
    CComQIPtr< IFilterGraph, &IID_IFilterGraph > pFG( m_pGraph );
    hr = pFG->SetDefaultSyncSource( );

#ifdef DEBUG
    long t2 = timeGetTime( );
    DbgLog( ( LOG_TIMING, 1, TEXT("RENCACHE::Took %ld load up graph"), t2 - t1 ) );
#endif

    return NOERROR;
}

HRESULT CRenderEngine::_ClearCache( )
{
    DbgLog((LOG_TRACE,1, "RENcache::Cleared the cache" ));

    if( !m_pDeadCache )
    {
        return NOERROR;
    }

    return m_pDeadCache->Clear( );
}

HRESULT CRenderEngine::SetDynamicReconnectLevel( long Level )
{
    CAutoLock Lock( &m_CritSec );

    m_nDynaFlags = Level;
    return 0;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\render\stdafx.h ===
// Copyright (c) 1998 - 1999  Microsoft Corporation.  All Rights Reserved.
// stdafx.h : include file for standard system include files,
//      or project specific include files that are used frequently,
//      but are changed infrequently

#if !defined(AFX_STDAFX_H__08E7CDC6_7F58_11D2_8CF1_00A0C9441E20__INCLUDED_)
#define AFX_STDAFX_H__08E7CDC6_7F58_11D2_8CF1_00A0C9441E20__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

#define _ATL_APARTMENT_THREADED
#define WIN32_LEAN_AND_MEAN		// Exclude rarely-used stuff from Windows headers

#include <atlbase.h>
extern CComModule _Module;
#include <atlcom.h>
#include <qeditint.h>
#include <qedit.h>

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_STDAFX_H__08E7CDC6_7F58_11D2_8CF1_00A0C9441E20__INCLUDED)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\render\srender.cpp ===
// Copyright (c) 1999  Microsoft Corporation.  All Rights Reserved.
#include <streams.h>
#include "stdafx.h"
#include "grid.h"
#include "deadpool.h"
#include "..\errlog\cerrlog.h"
#include "..\util\filfuncs.h"
#include "..\util\conv.cxx"
#include "IRendEng.h"
#include "dexhelp.h"

#include <initguid.h>
DEFINE_GUID( CLSID_Dump, 0x36A5F770, 0xFE4C, 0x11CE, 0xA8, 0xED, 0x00, 0xaa, 0x00, 0x2F, 0xEA, 0xB5 );

// notes:
// Smart Recompression is still rather uninteligent. The way it works is this:
// there is a compressed RE and an uncompressed RE. The URE will send
// <everything>, just like a normal non-SR project, to the SR filter. (Thus, it will
// be just as slow as normal, not taking into account the recompression step)
// however, the SR filter will ignore the uncompressed data unless it needs it.
// The CRE will only connect up compressed sources that it can send directly
// to the SR. I imagine this means there will be gaps in the CRE's playback. 

//############################################################################
// 
//############################################################################

CSmartRenderEngine::CSmartRenderEngine( )
    : m_punkSite( NULL )
    , m_ppCompressor( NULL )

{
    m_nGroups = 0;

    // don't create the renderers here because we can't return an error code
}

//############################################################################
// 
//############################################################################

CSmartRenderEngine::~CSmartRenderEngine( )
{
    for( int g = 0 ; g < m_nGroups ; g++ )
    {
        if( m_ppCompressor[g] )
        {
            m_ppCompressor[g].Release( );
        }
    }
    delete [] m_ppCompressor;
}

STDMETHODIMP CSmartRenderEngine::Commit( )
{
    return E_NOTIMPL;
}

STDMETHODIMP CSmartRenderEngine::Decommit( )
{
    return E_NOTIMPL;
}

STDMETHODIMP CSmartRenderEngine::SetInterestRange( REFERENCE_TIME Start, REFERENCE_TIME Stop )
{
    return E_NOTIMPL;
}

STDMETHODIMP CSmartRenderEngine::GetCaps( long Index, long * pReturn )
{
    return E_NOTIMPL;
}

STDMETHODIMP CSmartRenderEngine::GetVendorString( BSTR * pVendorID )
{
    return E_NOTIMPL;
}

STDMETHODIMP CSmartRenderEngine::SetSourceConnectCallback( IGrfCache * pCallback )
{
    return E_NOTIMPL;
}

STDMETHODIMP CSmartRenderEngine::SetFindCompressorCB( IFindCompressorCB * pCallback )
{
    return E_NOTIMPL;
}

STDMETHODIMP CSmartRenderEngine::SetDynamicReconnectLevel( long Level )
{
    // WE decide, not the user
    return E_NOTIMPL;
}

STDMETHODIMP CSmartRenderEngine::DoSmartRecompression( )
{
    // duh...
    return NOERROR;
}

//############################################################################
// 
//############################################################################

STDMETHODIMP CSmartRenderEngine::_InitSubComponents( )
{
    if( m_pRenderer && m_pCompRenderer )
    {
        return NOERROR;
    }

    HRESULT hr = 0;

    if( !m_pRenderer )
    {
        hr = CoCreateInstance(
            CLSID_RenderEngine,
            NULL,
            CLSCTX_INPROC_SERVER,
            IID_IRenderEngine,
            (void**) &m_pRenderer );
        if( FAILED( hr ) )
        {
            return hr;
        }

        // give the child rendeng a pointer back to us
        {
            CComQIPtr< IObjectWithSite, &IID_IObjectWithSite > pOWS( m_pRenderer );

            pOWS->SetSite( (IServiceProvider *) this );
        }

        m_pRenderer->UseInSmartRecompressionGraph( );
    }

    if( !m_pCompRenderer )
    {
        hr = CoCreateInstance(
            CLSID_RenderEngine,
            NULL,
            CLSCTX_INPROC_SERVER,
            IID_IRenderEngine,
            (void**) &m_pCompRenderer );
        if( FAILED( hr ) )
        {
            return hr;
        }

        // give the child rendeng a pointer back to us
        {
            CComQIPtr< IObjectWithSite, &IID_IObjectWithSite > pOWS( m_pCompRenderer );
            ASSERT( pOWS );
            if( pOWS )
            {            
                pOWS->SetSite( (IServiceProvider *) this );
            }                
        }

        // this one is the compressed one
        //
        m_pCompRenderer->DoSmartRecompression( );
        m_pCompRenderer->UseInSmartRecompressionGraph( );
    }

    return NOERROR;
}

//############################################################################
// 
//############################################################################

STDMETHODIMP CSmartRenderEngine::RenderOutputPins( )
{
    HRESULT hr = 0;

    long Groups = 0;
    CComPtr< IAMTimeline > pTimeline;
    m_pRenderer->GetTimelineObject( &pTimeline );
    if( !pTimeline )
    {
        return E_UNEXPECTED;
    }
    CComPtr< IGraphBuilder > pGraph;
    m_pRenderer->GetFilterGraph( &pGraph );
    if( !pGraph )
    {
        return E_UNEXPECTED;
    }
    pTimeline->GetGroupCount( &Groups );

    for( int g = 0 ; g < Groups ; g++ )
    {
        CComPtr< IAMTimelineObj > pGroupObj;
        hr = pTimeline->GetGroup( &pGroupObj, g );
        ASSERT( !FAILED( hr ) );
        CComQIPtr< IAMTimelineGroup, &IID_IAMTimelineGroup > pGroup( pGroupObj );
        AM_MEDIA_TYPE MediaType;
        hr = pGroup->GetMediaType( &MediaType );
        GUID MajorType = MediaType.majortype;
        FreeMediaType( MediaType );

        // ask OURSELVES for the output pin, then render it
        //
        CComPtr< IPin > pOut;
        hr = GetGroupOutputPin( g, &pOut );
        if( hr == S_FALSE || !pOut )
        {
            // didn't have a pin for this one, but didn't fail
            //
            continue;
        }
        if( FAILED( hr ) )
        {
            return hr;
        }

        // see if output pin is already connected
        //
        CComPtr< IPin > pConnected;
        pOut->ConnectedTo( &pConnected );
        if( pConnected )
        {
            continue;
        }

        if( MajorType == MEDIATYPE_Video )
        {
            // create a video renderer, to provide a destination
            //
            CComPtr< IBaseFilter > pVidRenderer;
            hr = CoCreateInstance(
                CLSID_VideoRenderer,
                NULL,
                CLSCTX_INPROC_SERVER,
                IID_IBaseFilter,
                (void**) &pVidRenderer );
            ASSERT( !FAILED( hr ) );

            // put it in the graph
            //
            hr = pGraph->AddFilter( pVidRenderer, L"Video Renderer" );
            ASSERT( !FAILED( hr ) );

            // find a pin
            //
            IPin * pVidRendererPin = GetInPin( pVidRenderer , 0 );
            ASSERT( pVidRendererPin );

            hr = pGraph->Connect( pOut, pVidRendererPin );
            ASSERT( !FAILED( hr ) );
        }
        else if( MajorType == MEDIATYPE_Audio )
        {
            // create a audio renderer so we can hear it
            CComPtr< IBaseFilter > pAudRenderer;
            hr = CoCreateInstance(
                CLSID_DSoundRender,
                NULL,
                CLSCTX_INPROC_SERVER,
                IID_IBaseFilter,
                (void**) &pAudRenderer );
            ASSERT( !FAILED( hr ) );

            hr = pGraph->AddFilter( pAudRenderer, L"Audio Renderer" );
            ASSERT( !FAILED( hr ) );

            IPin * pAudRendererPin = GetInPin( pAudRenderer , 0 );
            ASSERT( pAudRendererPin );

            hr = pGraph->Connect( pOut, pAudRendererPin );
            ASSERT( !FAILED( hr ) );
        }
    }

    return NOERROR;
}

//############################################################################
// 
//############################################################################

STDMETHODIMP CSmartRenderEngine::SetRenderRange( REFERENCE_TIME Start, REFERENCE_TIME Stop )
{
    HRESULT hr = _InitSubComponents( );
    if( FAILED( hr ) )
    {
        return E_MUST_INIT_RENDERER;
    }

    hr = m_pRenderer->SetRenderRange( Start, Stop );
    if( FAILED( hr ) )
    {
        return hr;
    }

    return m_pCompRenderer->SetRenderRange( Start, Stop );
}

//############################################################################
// 
//############################################################################

STDMETHODIMP CSmartRenderEngine::SetTimelineObject( IAMTimeline * pTimeline )
{
    HRESULT hr = _InitSubComponents( );
    if( FAILED( hr ) )
    {
        return E_MUST_INIT_RENDERER;
    }

    // clear out the other groups first
    //
    if( m_ppCompressor )
    {
        for( int g = 0 ; g < m_nGroups ; g++ )
        {
            m_ppCompressor[g].Release( );        
        }
        delete [] m_ppCompressor;
        m_ppCompressor = NULL;
        m_nGroups = 0;
    }

    pTimeline->GetGroupCount( &m_nGroups );
    m_ppCompressor = new CComPtr< IBaseFilter >[m_nGroups];
    if( !m_ppCompressor )
    {
        m_nGroups = 0;
        return E_OUTOFMEMORY;
    }

    m_pErrorLog.Release( );

    // grab the timeline's error log
    //
    CComQIPtr< IAMSetErrorLog, &IID_IAMSetErrorLog > pTimelineLog( pTimeline );
    if( pTimelineLog )
    {
        pTimelineLog->get_ErrorLog( &m_pErrorLog );
    }

    hr = m_pRenderer->SetTimelineObject( pTimeline );
    if( FAILED( hr ) )
    {
        return hr;
    }

    return m_pCompRenderer->SetTimelineObject( pTimeline );
}

//############################################################################
// 
//############################################################################

STDMETHODIMP CSmartRenderEngine::GetTimelineObject( IAMTimeline ** ppTimeline )
{
    HRESULT hr = _InitSubComponents( );
    if( FAILED( hr ) )
    {
        return E_MUST_INIT_RENDERER;
    }

    return m_pCompRenderer->GetTimelineObject( ppTimeline );
}

//############################################################################
// 
//############################################################################

STDMETHODIMP CSmartRenderEngine::GetFilterGraph( IGraphBuilder ** ppFG )
{
    HRESULT hr = _InitSubComponents( );
    if( FAILED( hr ) )
    {
        return E_MUST_INIT_RENDERER;
    }

    return m_pCompRenderer->GetFilterGraph( ppFG );
}

//############################################################################
// 
//############################################################################

STDMETHODIMP CSmartRenderEngine::SetFilterGraph( IGraphBuilder * pFG )
{
    HRESULT hr = _InitSubComponents( );
    if( FAILED( hr ) )
    {
        return E_MUST_INIT_RENDERER;
    }

    hr = m_pRenderer->SetFilterGraph( pFG );
    if( FAILED( hr ) )
    {
        return hr;
    }

    return m_pCompRenderer->SetFilterGraph( pFG );
}

//############################################################################
// 
//############################################################################

STDMETHODIMP CSmartRenderEngine::ScrapIt( )
{
    HRESULT hr = _InitSubComponents( );
    if( FAILED( hr ) )
    {
        return E_MUST_INIT_RENDERER;
    }

    hr = m_pRenderer->ScrapIt( );
    if( FAILED( hr ) )
    {
        return hr;
    }

    return m_pCompRenderer->ScrapIt( );
}

//############################################################################
// 
//############################################################################

STDMETHODIMP CSmartRenderEngine::GetGroupOutputPin( long Group, IPin ** ppRenderPin )
{
    CheckPointer( ppRenderPin, E_POINTER );

    HRESULT hr = _InitSubComponents( );
    if( FAILED( hr ) )
    {
        return E_MUST_INIT_RENDERER;
    }

    *ppRenderPin = NULL;

    // if this group isn't recompressed, evidenced by NOT having a compressor, 
    // then just return the uncompressed
    // renderer's pin
    //
    if( m_nGroups == 0 )
    {
        return E_UNEXPECTED;
    }

    if( !m_ppCompressor[Group] || !IsGroupCompressed( Group ) )
    {
        return m_pRenderer->GetGroupOutputPin( Group, ppRenderPin );
    }

    // return the SR's output pin for this combo

    CComPtr< IPin > pPin;
    m_pRenderer->GetGroupOutputPin( Group, &pPin );
    if( !pPin )
    {
        return E_UNEXPECTED;
    }

    // The compressed renderer is connected to the SR filter.
    // If something went wrong with trying to do smart recompression, there will
    // be no SR filter, in which case, fall back to doing non-smart rendering
    // instead of aborting the project
    //
    CComPtr< IPin > pSRIn;
    pPin->ConnectedTo( &pSRIn );
    if( !pSRIn )
    {
        return m_pRenderer->GetGroupOutputPin( Group, ppRenderPin );
    }

    IBaseFilter * pSR = GetFilterFromPin( pSRIn );
    IPin * pSROut = GetOutPin( pSR, 0 );
    if( !pSROut )
    {
        return E_UNEXPECTED;
    }

    pSROut->AddRef( );
    *ppRenderPin = pSROut;
    return NOERROR;
}

//############################################################################
// 
//############################################################################

BOOL CSmartRenderEngine::IsGroupCompressed( long Group )
{
    HRESULT hr = _InitSubComponents( );
    if( FAILED( hr ) )
    {
        return E_MUST_INIT_RENDERER;
    }

    CComPtr< IAMTimeline > pTimeline;
    m_pRenderer->GetTimelineObject( &pTimeline );
    if( !pTimeline )
    {
        return FALSE;
    }

    CComPtr< IAMTimelineObj > pGroupObj;
    pTimeline->GetGroup( &pGroupObj, Group );
    if( !pGroupObj )
    {
        return FALSE;
    }
    CComQIPtr< IAMTimelineGroup, &IID_IAMTimelineGroup > pGroup( pGroupObj );

    BOOL Val = FALSE;
    pGroup->IsSmartRecompressFormatSet( &Val );
    return Val;
}

//############################################################################
// 
//############################################################################

STDMETHODIMP CSmartRenderEngine::UseInSmartRecompressionGraph( )
{
    // duh
    return NOERROR;
}

//############################################################################
// 
//############################################################################

STDMETHODIMP CSmartRenderEngine::SetGroupCompressor( long Group, IBaseFilter * pCompressor )
{
    if( Group < 0 || Group >= m_nGroups )
    {
        return E_INVALIDARG;
    }

    m_ppCompressor[Group].Release( );
    m_ppCompressor[Group] = pCompressor;
    return NOERROR;
}


//############################################################################
// 
//############################################################################

STDMETHODIMP CSmartRenderEngine::GetGroupCompressor( long Group, IBaseFilter ** ppCompressor )
{
    if( Group < 0 || Group >= m_nGroups )
    {
        return E_INVALIDARG;
    }
    CheckPointer(ppCompressor, E_POINTER);

    *ppCompressor = m_ppCompressor[Group];
    if (*ppCompressor) {
        (*ppCompressor)->AddRef();
    }
    return NOERROR;
}


//############################################################################
// 
//############################################################################

STDMETHODIMP CSmartRenderEngine::ConnectFrontEnd( )
{
    HRESULT hr = _InitSubComponents( );
    if( FAILED( hr ) )
    {
        return E_MUST_INIT_RENDERER;
    }

    // we need to ask the render engine if it already 
    // has a graph first, or BOTH of them will create one
    // for us.
    CComPtr< IGraphBuilder > pTempGraph;
    hr = m_pRenderer->GetFilterGraph( &pTempGraph );

    hr = m_pRenderer->ConnectFrontEnd( );
    if( FAILED( hr ) )
    {
        return hr;
    }

    if( !pTempGraph )
    {
        m_pRenderer->GetFilterGraph( &pTempGraph );
        ASSERT( pTempGraph );
        if( pTempGraph )
        {
            m_pCompRenderer->SetFilterGraph( pTempGraph );
        }
    }

    hr = m_pCompRenderer->ConnectFrontEnd( );
    if( FAILED( hr ) )
    {
        return hr;
    }

    long Groups = 0;
    CComPtr< IAMTimeline > pTimeline;
    m_pRenderer->GetTimelineObject( &pTimeline );
    if( !pTimeline )
    {
        return E_UNEXPECTED;
    }
    CComPtr< IGraphBuilder > pGraph;
    m_pRenderer->GetFilterGraph( &pGraph );
    if( !pGraph )
    {
        return E_UNEXPECTED;
    }
    pTimeline->GetGroupCount( &Groups );

    for( int g = 0 ; g < Groups ; g++ )
    {
        BOOL Compressed = IsGroupCompressed( g );
        if( !Compressed )
        {
            continue;
        }

        CComPtr< IPin > pOutUncompressed;
        hr = m_pRenderer->GetGroupOutputPin( g, &pOutUncompressed );
        if( FAILED( hr ) )
        {
            return hr;
        }

        CComPtr< IPin > pOutCompressed;
        hr = m_pCompRenderer->GetGroupOutputPin( g, &pOutCompressed );
        if( FAILED( hr ) )
        {
            return hr;
        }

        CComPtr< IPin > pOutUncConnected;
        CComPtr< IPin > pOutCompConnected;
        pOutUncompressed->ConnectedTo( &pOutUncConnected );
        pOutCompressed->ConnectedTo( &pOutCompConnected );

        CComPtr< IBaseFilter > pSR;

        // see if we already have an SR filter. If not, create one.
        //
        if( pOutUncConnected )
        {
            PIN_INFO pi;
            pOutUncConnected->QueryPinInfo( &pi );
            pSR = pi.pFilter;
            pi.pFilter->Release( );
        }
        else
        {
            hr = CoCreateInstance( CLSID_SRFilter,
                NULL,
                CLSCTX_INPROC_SERVER,
                IID_IBaseFilter,
                (void**) &pSR );
            if( FAILED( hr ) )
            {
                return hr;
            }

            hr = pGraph->AddFilter( pSR, L"SmartRecompressor" );
            if( FAILED( hr ) )
            {
                return hr;
            }
        }

        // get the pins from the SR
        //
        IPin * pSRInUncompressed = GetInPin( pSR, 0 ); 
        IPin * pSRInCompressed = GetInPin( pSR, 1 ); 
        IPin * pSROutToCompressor = GetOutPin( pSR, 1 );
        IPin * pSRInFromCompressor = GetInPin( pSR, 2 );

        // if we already have a SR filter, then instead of comparing everything, we'll
        // purposely disconnect everything and reconnect. It's easier this way
        //
        if( pOutUncConnected )
        {
            pOutUncompressed->Disconnect( );
            pSRInUncompressed->Disconnect( );
            pOutCompressed->Disconnect( );
            pSRInCompressed->Disconnect( );

            // disconnect and throw out everything between two compressor pins
            //
            RemoveChain( pSROutToCompressor, pSRInFromCompressor );
        }

        CComQIPtr< IAMSmartRecompressor, &IID_IAMSmartRecompressor > pSmartie( pSR );
        pSmartie->AcceptFirstCompressed( );
    
        hr = pGraph->Connect( pOutCompressed, pSRInCompressed );
        if( FAILED( hr ) )
        {
            return hr;
        }

        hr = pGraph->Connect( pOutUncompressed, pSRInUncompressed );
        if( FAILED( hr ) )
        {
            return hr;
        }

        CComPtr< IBaseFilter > pCompressor;

        // if we were told a compressor for this group, then use that one
        //
        if( m_ppCompressor[g] )
        {
            pCompressor = m_ppCompressor[g];
        }

        AM_MEDIA_TYPE UncompressedType;
        AM_MEDIA_TYPE CompressedType;
        hr = pSRInUncompressed->ConnectionMediaType( &UncompressedType );
        if( FAILED( hr ) )
        {
            return hr;
        }
        hr = pSRInCompressed->ConnectionMediaType( &CompressedType );
        if( FAILED( hr ) )
        {
            FreeMediaType( UncompressedType );
            return hr;
        }

        VIDEOINFOHEADER * pVIH = (VIDEOINFOHEADER*) CompressedType.pbFormat;
        double FrameRate = 1.0 / RTtoDouble( pVIH->AvgTimePerFrame );
        hr = pSmartie->SetFrameRate( FrameRate );
        if( FAILED( hr ) )
        {
            return hr;
        }
        hr = pSmartie->SetPreviewMode( FALSE );

        // if we don't HAVE a compressor, then do we have a callback in
        // order to get one?
        //
        if( !pCompressor )
        {
            if( m_pCompressorCB )
            {
                // find the types on the connected SR input pins
                //
                hr = m_pCompressorCB->GetCompressor( 
                    &UncompressedType, 
                    &CompressedType, 
                    &pCompressor );

		// Now remember which one was used if the app asks
		SetGroupCompressor(g, pCompressor);

            }
        }

        if( !pCompressor )
        {
            hr = FindCompressor( &UncompressedType, &CompressedType, &pCompressor, (IServiceProvider *) this );
	    // Now remember which one was used if the app asks
	    SetGroupCompressor(g, pCompressor);
        }

        if( !pCompressor )
        {
            // no compressor, make this group output pin UNCOMPRESSED then.
            //
            _GenerateError( 2, DEX_IDS_CANT_FIND_COMPRESSOR, hr );
            RemoveChain(pOutUncompressed, pSRInUncompressed);
            RemoveChain(pOutCompressed, pSRInCompressed);
            pGraph->RemoveFilter( pSR );
            FreeMediaType( UncompressedType );
            FreeMediaType( CompressedType );
            continue;
        }

        hr = pGraph->AddFilter( pCompressor, L"Compressor" );
        if( FAILED( hr ) )
        {
            return hr;
        }
        IPin * pCompIn = GetInPin( pCompressor, 0 );
        IPin * pCompOut = GetOutPin( pCompressor, 0 );

        hr = pGraph->Connect( pSROutToCompressor, pCompIn );
        if( FAILED( hr ) )
        {
            // no compressor, make this group output pin UNCOMPRESSED then.
            //
            _GenerateError( 2, DEX_IDS_CANT_FIND_COMPRESSOR, hr );
            RemoveChain(pOutUncompressed, pSRInUncompressed);
            RemoveChain(pOutCompressed, pSRInCompressed);
            pGraph->RemoveFilter( pSR );
            FreeMediaType( UncompressedType );
            FreeMediaType( CompressedType );
            continue;
        }

        // now program the compressor to produce the right kind of output
        IAMStreamConfig *pSC = NULL;
        pCompOut->QueryInterface(IID_IAMStreamConfig, (void**)&pSC);
        if (pSC) {
            // !!! BUGBUGS !!!
            // ABORT if this fails?
            // Fix up ZERO data rate to some default for WMV?
            pSC->SetFormat(&CompressedType);
            pSC->Release();
        }

        FreeMediaType( UncompressedType );
        FreeMediaType( CompressedType );

        hr = pGraph->Connect( pCompOut, pSRInFromCompressor );
        if( FAILED( hr ) )
        {
            return _GenerateError( 2, DEX_IDS_CANT_FIND_COMPRESSOR, hr );
        }

        // we've got the two renderers connected. Now, when somebody asks us
        // for a group output pin, we'll return the SR filter's
    }
   
    return NOERROR;
}

//############################################################################
// 
//############################################################################
// IObjectWithSite::SetSite
// remember who our container is, for QueryService or other needs
STDMETHODIMP CSmartRenderEngine::SetSite(IUnknown *pUnkSite)
{
    // note: we cannot addref our site without creating a circle
    // luckily, it won't go away without releasing us first.
    m_punkSite = pUnkSite;

    return S_OK;
}

//############################################################################
// 
//############################################################################
// IObjectWithSite::GetSite
// return an addrefed pointer to our containing object
STDMETHODIMP CSmartRenderEngine::GetSite(REFIID riid, void **ppvSite)
{
    if (m_punkSite)
        return m_punkSite->QueryInterface(riid, ppvSite);

    return E_NOINTERFACE;
}

//############################################################################
// 
//############################################################################
// Forward QueryService calls up to the "real" host
STDMETHODIMP CSmartRenderEngine::QueryService(REFGUID guidService, REFIID riid, void **ppvObject)
{
    IServiceProvider *pSP;

    if (!m_punkSite)
	return E_NOINTERFACE;

    HRESULT hr = m_punkSite->QueryInterface(IID_IServiceProvider, (void **) &pSP);

    if (SUCCEEDED(hr)) {
	hr = pSP->QueryService(guidService, riid, ppvObject);
	pSP->Release();
    }

    return hr;
}

//############################################################################
// 
//############################################################################

STDMETHODIMP CSmartRenderEngine::SetSourceNameValidation
    ( BSTR FilterString, IMediaLocator * pCallback, LONG Flags )
{
    HRESULT hr = _InitSubComponents( );
    if( FAILED( hr ) )
    {
        return E_MUST_INIT_RENDERER;
    }

    m_pRenderer->SetSourceNameValidation( FilterString, pCallback, Flags );
    m_pCompRenderer->SetSourceNameValidation( FilterString, pCallback, Flags );

    return NOERROR;
}

STDMETHODIMP CSmartRenderEngine::SetInterestRange2( double Start, double Stop )
{
    return SetInterestRange( DoubleToRT( Start ), DoubleToRT( Stop ) );
}

STDMETHODIMP CSmartRenderEngine::SetRenderRange2( double Start, double Stop )
{
    return SetRenderRange( DoubleToRT( Start ), DoubleToRT( Stop ) );
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\render\stdafx.cpp ===
// Copyright (c) 1998 - 1999  Microsoft Corporation.  All Rights Reserved.
// stdafx.cpp : source file that includes just the standard includes
//  stdafx.pch will be the pre-compiled header
//  stdafx.obj will contain the pre-compiled type information

#include <streams.h>
#include "stdafx.h"

#ifdef FILTER_DLL
    #ifdef _ATL_STATIC_REGISTRY
        #include <statreg.h>
        #include <statreg.cpp>
    #endif
    #include <atlimpl.cpp>
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\resize\resource.h ===
// Copyright (c) 1998 - 1999  Microsoft Corporation.  All Rights Reserved.
#define IDD_RESIZE			    700
#define IDS_RESIZE_TITLE		    711
#define IDC_RESIZE_HEIGHT		    720
#define IDC_RESIZE_WIDTH		    721
#define IDC_DEXTER_RESIZE_CROP		    722
#define IDC_DEXTER_RESIZE_PRESERVE_RATIO    723
#define IDC_DEXTER_RESIZE		    724
#ifndef IDC_STATIC
#define IDC_STATIC        -1
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\resize\prop.cpp ===
//==========================================================================;
//
//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
//  PURPOSE.
//
//  Copyright (c) 1992 - 1999  Microsoft Corporation.  All Rights Reserved.
//
//--------------------------------------------------------------------------;

#include <windows.h>
#include <streams.h>
#include <qeditint.h>
#include <qedit.h>
#include "stretch.h"
#include "resource.h"

//////////////////////////////////////////////////////////////////////////
//
// CResizePropertyPage
//
//////////////////////////////////////////////////////////////////////////

//
// CreateInstance
//
CUnknown *CResizePropertyPage::CreateInstance(LPUNKNOWN lpunk, HRESULT *phr)

  { // CreateInstance //

    CUnknown *punk = new CResizePropertyPage(lpunk, phr);

    if (NULL == punk)
	    *phr = E_OUTOFMEMORY;

    return punk;

  } // CreateInstance //

CResizePropertyPage::CResizePropertyPage(LPUNKNOWN pUnk, HRESULT *phr) :
  CBasePropertyPage(NAME("Video Resize Property Page"),
		   pUnk, IDD_RESIZE, IDS_RESIZE_TITLE), m_bInitialized(FALSE), m_pirs(NULL)

  { // Constructor //
  } // Constructor //

void CResizePropertyPage::SetDirty()

  { // SetDirty //

      m_bDirty = TRUE;

      if (m_pPageSite)
	m_pPageSite->OnStatusChange(PROPPAGESTATUS_DIRTY);

  } // SetDirty //

HRESULT CResizePropertyPage::OnActivate (void)

  { // OnActivate //

    if (m_dwResizeFlag == RESIZEF_STRETCH)
        CheckRadioButton(m_Dlg, IDC_DEXTER_RESIZE_CROP, IDC_DEXTER_RESIZE,
					IDC_DEXTER_RESIZE);
    else if (m_dwResizeFlag == RESIZEF_CROP)
        CheckRadioButton(m_Dlg, IDC_DEXTER_RESIZE_CROP, IDC_DEXTER_RESIZE,
					IDC_DEXTER_RESIZE_CROP);
    else
        CheckRadioButton(m_Dlg, IDC_DEXTER_RESIZE_CROP, IDC_DEXTER_RESIZE,
					IDC_DEXTER_RESIZE_PRESERVE_RATIO);

    m_bInitialized = TRUE;

    return NOERROR;

  } // OnActivate //

HRESULT CResizePropertyPage::OnDeactivate (void)

  { // OnDeactivate //

    m_bInitialized = FALSE;

    GetControlValues();

    return NOERROR;

  } // OnDeactivate //

INT_PTR CResizePropertyPage::OnReceiveMessage (HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)

  { // OnReceiveMessage //

    switch(uMsg)

      { // Switch

	case WM_COMMAND:

	  if (!m_bInitialized)
	    return CBasePropertyPage::OnReceiveMessage(hwnd,uMsg,wParam,lParam);

	  m_bDirty = TRUE;

	  if (m_pPageSite)
	    m_pPageSite->OnStatusChange(PROPPAGESTATUS_DIRTY);

	  return TRUE;

	case WM_INITDIALOG:
	  SetDlgItemInt(hwnd, IDC_RESIZE_HEIGHT, m_ResizedHeight, FALSE);
	  SetDlgItemInt(hwnd, IDC_RESIZE_WIDTH, m_ResizedWidth, FALSE);
	  return TRUE;
	  break;

	default:
	  return CBasePropertyPage::OnReceiveMessage(hwnd,uMsg,wParam,lParam);
	  break;

      } // Switch

  } // OnReceiveMessage //

HRESULT CResizePropertyPage::OnConnect (IUnknown *pUnknown)

  { // OnConnect //

    pUnknown->QueryInterface(IID_IResize, (void **)&m_pirs);

    ASSERT(m_pirs != NULL);

    m_pirs->get_Size(&m_ResizedHeight, &m_ResizedWidth, &m_dwResizeFlag);

    m_bInitialized = FALSE;

    return NOERROR;

  } // OnConnect //

HRESULT CResizePropertyPage::OnDisconnect()

  { // OnDisconnect //

    if (m_pirs)

      { // Release

	m_pirs->Release();
	m_pirs = NULL;

      } // Release

    m_bInitialized = FALSE;

    return NOERROR;

  } // OnDisconnect //

HRESULT CResizePropertyPage::OnApplyChanges()

  { // OnApplyChanges //

    ASSERT(m_pirs != NULL);

    GetControlValues();

    m_pirs->put_Size(m_ResizedHeight, m_ResizedWidth, m_dwResizeFlag);

    return (NOERROR);

  } // OnApplyChanges //

void CResizePropertyPage::GetControlValues (void)

  { // GetControlValues //

    // Sampling rate
    m_ResizedHeight = GetDlgItemInt(m_Dlg, IDC_RESIZE_HEIGHT, NULL, FALSE);

    m_ResizedWidth = GetDlgItemInt(m_Dlg, IDC_RESIZE_WIDTH, NULL, FALSE);

    //get flags
    m_dwResizeFlag=0;

   for (DWORD dw = IDC_DEXTER_RESIZE_CROP; dw <= IDC_DEXTER_RESIZE; dw++) {
       if (IsDlgButtonChecked(m_Dlg, (int)dw)) {
	    if (dw == IDC_DEXTER_RESIZE_CROP)
                m_dwResizeFlag = RESIZEF_CROP;
	    else if (dw == IDC_DEXTER_RESIZE)
                m_dwResizeFlag = RESIZEF_STRETCH;
	    else
                m_dwResizeFlag = RESIZEF_PRESERVEASPECTRATIO;
            break;
        }
    }

  } // GetControlValues //
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\resize\stretchc.cpp ===
// Copyright (c) 1998 - 1999  Microsoft Corporation.  All Rights Reserved.
/*
 * StretchC.C
 *
 * StretchBlt for DIBs
 *
 * C version of stretch.asm: StretchDIB optimised for AVI.
 *
 * NOTES
 *	- does not handle mirroring in x or y
 *	- does not handle pixel translation
 *	- will not work in place.
 *
 * AUTHOR
 *      C version by Geraint Davies
 */

#include <streams.h>

/* Outline:
 *
 * we select a y-stretching function depending on the ratio (eg 1:N or N:1).
 * it copies scanlines from source to destination, duplicating or omitting
 * scanlines as necessary to fit the destination. It copies each scanline
 * via the X_FUNC function we passed as an argument: this copies one scanline
 * duplicating or omitting pixels to fit the destination: we select an X_FUNC
 * depending on the bit-depth as well as the x-stretching ratio.
 *
 * both x and y stretching functions use the following basic model for deciding
 * when to insert/omit elements:
 *
 * 	delta = <larger extent> -1;
 *
 *      for (number of destination elements) {
 *
 *		copy one element
 *		advance pointer to larger region
 *		delta -= <smaller extent>
 *		if (delta < 0) {
 *			delta += <larger extent>;
 *			advance pointer to smaller region
 *		}
 *	}
 */


/* stretch proportions */
#define STRETCH_1_1	1
#define STRETCH_1_2	2
#define STRETCH_1_4	3
#define STRETCH_1_N	4
#define STRETCH_N_1	5
#define STRETCH_4_1	6
#define STRETCH_2_1	7



/*
 * an X_FUNC is a function that copies one scanline, stretching or shrinking it
 * to fit a destination scanline. Pick an X_FUNC depending on
 * bitdepth and stretch ratio (1:1, 1:2, 1:4, 1:N, N:1, 4:1, 2:1)
 *
 * the x_fract argument is the delta fraction: it is a representation
 * of the smaller extent (whichever that is) as a fraction of the larger,
 * and is used when stretching or shrinking to advance the pointer to the
 * smaller scanline every (fract) pixels of the larger.
 * Thus if we are expanding 1:8, x_fract will be 1/8, we will advance the
 * source pointer once every 8 pixels, and thus copy each source pixel to
 * 8 dest pixels. Note that if shrinking 8:1, x_fract will still be 1/8
 * and we will use it to control advancement of the dest pointer.
 * the fraction is multiplied by 65536.
 */
typedef void (*X_FUNC) (LPBYTE lpSrc,
			LPBYTE lpDst,
			int SrcXE,
			int DstXE,
			int x_fract);


void X_Stretch_1_1_8Bits(LPBYTE lpSrc, LPBYTE lpDst, int SrcXE, int DstXE, int x_fract);
void X_Stretch_1_2_8Bits(LPBYTE lpSrc, LPBYTE lpDst, int SrcXE, int DstXE, int x_fract);
void X_Stretch_1_4_8Bits(LPBYTE lpSrc, LPBYTE lpDst, int SrcXE, int DstXE, int x_fract);
void X_Stretch_1_N_8Bits(LPBYTE lpSrc, LPBYTE lpDst, int SrcXE, int DstXE, int x_fract);
void X_Stretch_N_1_8Bits(LPBYTE lpSrc, LPBYTE lpDst, int SrcXE, int DstXE, int x_fract);

void X_Stretch_1_1_16Bits(LPBYTE lpSrc, LPBYTE lpDst, int SrcXE, int DstXE, int x_fract);
void X_Stretch_1_2_16Bits(LPBYTE lpSrc, LPBYTE lpDst, int SrcXE, int DstXE, int x_fract);
void X_Stretch_1_N_16Bits(LPBYTE lpSrc, LPBYTE lpDst, int SrcXE, int DstXE, int x_fract);
void X_Stretch_N_1_16Bits(LPBYTE lpSrc, LPBYTE lpDst, int SrcXE, int DstXE, int x_fract);

void X_Stretch_1_1_24Bits(LPBYTE lpSrc, LPBYTE lpDst, int SrcXE, int DstXE, int x_fract);
void X_Stretch_1_N_24Bits(LPBYTE lpSrc, LPBYTE lpDst, int SrcXE, int DstXE, int x_fract);
void X_Stretch_N_1_24Bits(LPBYTE lpSrc, LPBYTE lpDst, int SrcXE, int DstXE, int x_fract);

void X_Stretch_1_1_32Bits(LPBYTE lpSrc, LPBYTE lpDst, int SrcXE, int DstXE, int x_fract);
void X_Stretch_1_N_32Bits(LPBYTE lpSrc, LPBYTE lpDst, int SrcXE, int DstXE, int x_fract);
void X_Stretch_N_1_32Bits(LPBYTE lpSrc, LPBYTE lpDst, int SrcXE, int DstXE, int x_fract);


/*
 * Y_Stretch_* functions copy DstYE scanlines (using
 * an X_FUNC to copy each scanline) omitting or duplicating scanlines to
 * fit the destination extent. Pick a Y_ depending on the ratio
 * (1:N, N:1...)
 */

void Y_Stretch_1_N(LPBYTE lpSrc, LPBYTE lpDst, int SrcXE,int SrcYE, int DstXE,
		   int DstYE, int SrcWidth, int DstWidth, int x_fract,
		   X_FUNC x_func, int nBits);

void Y_Stretch_N_1(LPBYTE lpSrc, LPBYTE lpDst, int SrcXE,int SrcYE, int DstXE,
		   int DstYE, int SrcWidth, int DstWidth, int x_fract,
		   X_FUNC x_func);

/*
 * special case y-stretch functions for 1:2 in both dimensions for 8 and 16 bits
 * takes no X_FUNC arg. Will do entire stretch.
 */
void Stretch_1_2_8Bits(LPBYTE lpSrc, LPBYTE lpDst, int SrcXE,int SrcYE, int DstXE,
		   int DstYE, int SrcWidth, int DstWidth, int x_fract);


void Stretch_1_2_16Bits(LPBYTE lpSrc, LPBYTE lpDst, int SrcXE,int SrcYE, int DstXE,
		   int DstYE, int SrcWidth, int DstWidth, int x_fract);

/* straight copy of one scanline of count bytes */
void X_CopyScanline(LPBYTE lpSrc, LPBYTE lpDst, int count);


/* -------------------------------------------------------------------- */

/*
 * StretchFactor
 *
 * calculate the stretch factor (proportion of source extent to destination
 * extent: 1:1, 1:2, 1:4, 1:N, N:1, 4:1,or 2:1) and also the
 * delta fraction (see above comment on X_FUNC). This is the ratio of
 * the smaller extent to the larger extent, represented as a fraction
 * multiplied by 65536.
 *
 * returns: the stretch factor  (stores the delta fraction in *pfract)
 */

int
StretchFactor(int SrcE, int DstE, int *pfract)
{


	if (SrcE == DstE) {
		if (pfract != NULL) {
			pfract = 0;	     	
		}

		return(STRETCH_1_1);

	}


	if (SrcE > DstE) {
		if (pfract != NULL) {
			*pfract = ( (DstE << 16) / SrcE) & 0xffff;
		}

		if (SrcE == (DstE * 2)) {
			return(STRETCH_2_1);
		} else if (SrcE == (DstE * 4)) {
			return(STRETCH_4_1);
		} else {
			return(STRETCH_N_1);
		}

	} else {

		/* calculate delta fraction based on smallest / largest */
		if (pfract != NULL) {
			*pfract = ( (SrcE << 16) / DstE) & 0xffff;
		}
	
		if (DstE == (SrcE * 2)) {
			return(STRETCH_1_2);
		} else if (DstE == (SrcE * 4)) {
			return(STRETCH_1_4);
		} else {
			return(STRETCH_1_N);
		}
	}
}


/* -------------------------------------------------------------------- */

/*
 * StretchDIB
 *
 */

void FAR PASCAL
StretchDIB(
	LPBITMAPINFOHEADER biDst,   //	--> BITMAPINFO of destination
	LPVOID	lpvDst,		    //	--> to destination bits
	int	DstX,		    //	Destination origin - x coordinate
	int	DstY,		    //	Destination origin - y coordinate
	int	DstXE,		    //	x extent of the BLT
	int	DstYE,		    //	y extent of the BLT
	LPBITMAPINFOHEADER biSrc,   //	--> BITMAPINFO of source
	LPVOID	lpvSrc,		    //	--> to source bits
	int	SrcX,		    //	Source origin - x coordinate
	int	SrcY,		    //	Source origin - y coordinate
	int	SrcXE,		    //	x extent of the BLT
	int	SrcYE	 	    //	y extent of the BLT
	)
{

	int nBits;
	int SrcWidth, DstWidth;
	LPBYTE lpDst = (LPBYTE)lpvDst, lpSrc = (LPBYTE)lpvSrc;
	int x_fract;
	int x_factor;
	int y_factor;
	X_FUNC xfunc;
	

	/*
	 * check that bit depths are same and 8, 16 or 24
	 */

	if ((nBits = biDst->biBitCount) != biSrc->biBitCount) {
		return;
	}

	if ( (nBits != 8 ) && (nBits != 16) && (nBits != 24) &&
							(nBits != 32)) {
		return;
	}

	/*
	 * check that extents are not bad
	 */
	if ( (SrcXE <= 0) || (SrcYE <= 0) || (DstXE <= 0) || (DstYE <= 0)) {
		return;
	}

	/*
	 * calculate width of one scan line in bytes, rounded up to
	 * DWORD boundary.
	 */
	SrcWidth = (((biSrc->biWidth * nBits) + 31) & ~31) / 8;
	DstWidth = (((biDst->biWidth * nBits) + 31) & ~31) / 8;

	/*
	 * set initial source and dest pointers
	 */
	lpSrc += (SrcY * SrcWidth) + ((SrcX * nBits) / 8);
	lpDst += (DstY * DstWidth) + ((DstX * nBits) / 8);


	/*
	 * calculate stretch proportions (1:1, 1:2, 1:N, N:1 etc) and
	 * also the fractional stretch factor. (we are not interested in
	 * the y stretch fraction - this is only used in x stretching.
	 */

	y_factor = StretchFactor(SrcYE, DstYE, NULL);
	x_factor = StretchFactor(SrcXE, DstXE, &x_fract);

	/*
	 * we have special case routines for 1:2 in both dimensions
	 * for 8 and 16 bits
	 */
	if ((y_factor == x_factor) && (y_factor == STRETCH_1_2)) {

		if (nBits == 8) {
			//StartCounting();
			Stretch_1_2_8Bits(lpSrc, lpDst, SrcXE, SrcYE,
					  DstXE, DstYE, SrcWidth, DstWidth,
					  x_fract);
			//EndCounting("8 bit");
			return;

		} else if (nBits == 16) {
			//StartCounting();
			Stretch_1_2_16Bits(lpSrc, lpDst, SrcXE, SrcYE,
					  DstXE, DstYE, SrcWidth, DstWidth,
					  x_fract);
			//EndCounting("16 bit");
			return;
		}
	}


	/* pick an X stretch function */
	switch(nBits) {

	case 8:
		switch(x_factor) {
		case STRETCH_1_1:
			xfunc = X_Stretch_1_1_8Bits;
			break;

		case STRETCH_1_2:
			xfunc = X_Stretch_1_2_8Bits;
			break;

		case STRETCH_1_4:
			xfunc = X_Stretch_1_4_8Bits;
			break;

		case STRETCH_1_N:
			xfunc = X_Stretch_1_N_8Bits;
			break;

		case STRETCH_N_1:
		case STRETCH_4_1:
		case STRETCH_2_1:
			xfunc = X_Stretch_N_1_8Bits;
			break;

		}
		break;

	case 16:
		switch(x_factor) {
		case STRETCH_1_1:
			xfunc = X_Stretch_1_1_16Bits;
			break;

		case STRETCH_1_2:
			xfunc = X_Stretch_1_2_16Bits;
			break;

		case STRETCH_1_4:
		case STRETCH_1_N:
			xfunc = X_Stretch_1_N_16Bits;
			break;

		case STRETCH_N_1:
		case STRETCH_4_1:
		case STRETCH_2_1:
			xfunc = X_Stretch_N_1_16Bits;
			break;

		}
		break;

	case 24:
		switch(x_factor) {
		case STRETCH_1_1:
			xfunc = X_Stretch_1_1_24Bits;
			break;

		case STRETCH_1_2:
		case STRETCH_1_4:
		case STRETCH_1_N:
			xfunc = X_Stretch_1_N_24Bits;
			break;

		case STRETCH_N_1:
		case STRETCH_4_1:
		case STRETCH_2_1:
			xfunc = X_Stretch_N_1_24Bits;
			break;

		}
		break;

	case 32:
		switch(x_factor) {
		case STRETCH_1_1:
			xfunc = X_Stretch_1_1_32Bits;
			break;

		case STRETCH_1_2:
		case STRETCH_1_4:
		case STRETCH_1_N:
			xfunc = X_Stretch_1_N_32Bits;
			break;

		case STRETCH_N_1:
		case STRETCH_4_1:
		case STRETCH_2_1:
			xfunc = X_Stretch_N_1_32Bits;
			break;

		}
		break;

	}


	/*
	 * now call appropriate stretching function depending
	 * on the y stretch factor
	 */
	switch (y_factor) {
	case STRETCH_1_1:
	case STRETCH_1_2:
	case STRETCH_1_4:
	case STRETCH_1_N:
		Y_Stretch_1_N(lpSrc, lpDst, SrcXE, SrcYE,
			      DstXE, DstYE, SrcWidth, DstWidth, x_fract, xfunc, nBits);
		break;

	case STRETCH_N_1:
	case STRETCH_4_1:
	case STRETCH_2_1:
		Y_Stretch_N_1(lpSrc, lpDst, SrcXE, SrcYE,
			      DstXE, DstYE, SrcWidth, DstWidth, x_fract, xfunc);
		break;

	}
	return;
}


/* ---- y stretching -------------------------------------------- */

/*
 * call an X_FUNC to copy scanlines from lpSrc to lpDst. Duplicate or
 * omit scanlines to stretch SrcYE to DstYE.
 */


/*
 * Y_Stretch_1_N
 *
 * write DstYE scanlines based on SrcYE scanlines, DstYE > SrcYE
 *
 */

void
Y_Stretch_1_N(LPBYTE lpSrc,
              LPBYTE lpDst,
              int SrcXE,
              int SrcYE,
              int DstXE,
              int DstYE,
	      int SrcWidth,
	      int DstWidth,
              int x_fract,
              X_FUNC x_func,
              int nBits)
{

	int ydelta;
	int i;
	LPBYTE lpPrev = NULL;

	ydelta = DstYE -1;

	for (i = 0; i < DstYE; i++) {

		/* have we already stretched this scanline ? */
		if (lpPrev == NULL) {
			/* no - copy one scanline */
			(*x_func)(lpSrc, lpDst, SrcXE, DstXE, x_fract);
			lpPrev = lpDst;
		} else {	
			/* yes - this is a duplicate scanline. do
			 * a straight copy of one that has already
			 * been stretched/shrunk
			 */
			X_CopyScanline(lpPrev, lpDst, DstXE * nBits / 8);
		}

		/* advance dest pointer */
		lpDst += DstWidth;

		/* should we advance source pointer this time ? */
		if ( (ydelta -= SrcYE) < 0) {
			ydelta += DstYE;
			lpSrc += SrcWidth;
			lpPrev = NULL;
		}
	}
}


/*
 * Y_Stretch_N_1
 *
 * write DstYE scanlines based on SrcYE scanlines, DstYE < SrcYE
 *
 */
void
Y_Stretch_N_1(LPBYTE lpSrc,
              LPBYTE lpDst,
              int SrcXE,
              int SrcYE,
              int DstXE,
              int DstYE,
	      int SrcWidth,
	      int DstWidth,
              int x_fract,
              X_FUNC x_func)
{

	int ydelta;
	int i;

	ydelta = SrcYE -1;

	for (i = 0; i < DstYE; i++) {

		/* copy one scanline */
		(*x_func)(lpSrc, lpDst, SrcXE, DstXE, x_fract);

		/* advance dest pointer */
		lpDst += DstWidth;

		/* how many times do we advance source pointer this time ? */
		do {
			lpSrc += SrcWidth;
			ydelta -= DstYE;
		} while (ydelta >= 0);

		ydelta += SrcYE;
	}
}

/* ---8-bit X stretching -------------------------------------------------- */

/*
 * X_Stretch_1_N_8Bits
 *
 * copy one scan line, stretching 1:N (DstXE > SrcXE). For 8-bit depth.
 */
void
X_Stretch_1_N_8Bits(LPBYTE lpSrc,
		    LPBYTE lpDst,
		    int SrcXE,
		    int DstXE,
		    int x_fract)
{
	int xdelta;
	int i;

	xdelta = DstXE -1;

	for (i = 0; i < DstXE; i++) {

		/* copy one byte and advance dest */
		*lpDst++ = *lpSrc;

		/* should we advance source pointer this time ? */
		if ( (xdelta -= SrcXE) < 0) {
			xdelta += DstXE;
			lpSrc++;
		}
	}
}


/*
 * X_Stretch_N_1_8Bits
 *
 * copy one scan line, shrinking N:1 (DstXE < SrcXE). For 8-bit depth.
 */
void
X_Stretch_N_1_8Bits(LPBYTE lpSrc,
		    LPBYTE lpDst,
		    int SrcXE,
		    int DstXE,
		    int x_fract)
{
	int xdelta;
	int i;

	xdelta = SrcXE -1;

	for (i = 0; i < DstXE; i++) {

		/* copy one byte and advance dest */
		*lpDst++ = *lpSrc;

		/* how many times do we advance source pointer this time ? */
		do {
			lpSrc++;
			xdelta -= DstXE;
		} while (xdelta >= 0);

		xdelta += SrcXE;
	}
}

/*
 * copy one scanline of count bytes from lpSrc to lpDst. used by 1:1
 * scanline functions for all bit depths
 */
void
X_CopyScanline(LPBYTE lpSrc, LPBYTE lpDst, int count)
{
	int i;

	/*
	 * if the alignment of lpSrc and lpDst is the same, then
	 * we can get them aligned and do a faster copy
	 */
        if (((DWORD_PTR) lpSrc & 0x3) == ( (DWORD_PTR) lpDst & 0x3)) {
		
		/* align on WORD boundary */
		if ( (DWORD_PTR) lpSrc & 0x1) {
			*lpDst++ = *lpSrc++;
			count--;
		}

		/* align on DWORD boundary */
		if ((DWORD_PTR) lpSrc & 0x2) {
			* ((LPWORD) lpDst) = *((LPWORD) lpSrc);
			lpDst += sizeof(WORD);
			lpSrc += sizeof(WORD);
			count -= sizeof(WORD);
		}

		/* copy whole DWORDS */
		for ( i = (count / 4); i > 0; i--) {
			*((LPDWORD) lpDst) =  *((LPDWORD) lpSrc);
			lpSrc += sizeof(DWORD);
			lpDst += sizeof(DWORD);
		}
	} else {
		/* the lpSrc and lpDst pointers are different
		 * alignment, so leave them unaligned and
		 * copy all the whole DWORDs
		 */
                for (i = (count / 4); i> 0; i--) {
			*( (DWORD UNALIGNED FAR *) lpDst) =
				*((DWORD UNALIGNED FAR *) lpSrc);
			lpSrc += sizeof(DWORD);
			lpDst += sizeof(DWORD);
		}
	}

	/* in either case, copy last (up to 3) bytes. */
	for ( i = count % 4; i > 0; i--) {
		*lpDst++ = *lpSrc++;
	}
}
		
/*
 * X_Stretch_1_1_8Bits
 *
 * copy a scanline with no change (1:1)
 */
void
X_Stretch_1_1_8Bits(LPBYTE lpSrc,
		    LPBYTE lpDst,
		    int SrcXE,
		    int DstXE,
		    int x_fract)
{

	X_CopyScanline(lpSrc, lpDst, DstXE);
}


/*
 * X_Stretch_1_2_8Bits
 *
 * copy a scanline, doubling all the pixels (1:2)
 */
void
X_Stretch_1_2_8Bits(LPBYTE lpSrc,
		    LPBYTE lpDst,
		    int SrcXE,
		    int DstXE,
		    int x_fract)
{
   	WORD wPix;
	int i;

	for (i = 0; i < SrcXE; i++) {
		
		/* get a pixel and double it */
		wPix = *lpSrc++;
		wPix |= (wPix << 8);
		* ((WORD UNALIGNED *) lpDst) = wPix;
		lpDst += sizeof(WORD);
	}
}


/*
 * X_Stretch_1_4_8Bits
 *
 * copy a scanline, quadrupling all the pixels (1:4)
 */
void
X_Stretch_1_4_8Bits(LPBYTE lpSrc,
		    LPBYTE lpDst,
		    int SrcXE,
		    int DstXE,
		    int x_fract)
{
	DWORD dwPix;
	int i;

	for (i = 0; i < SrcXE; i++) {

		/* get a pixel and make four copies of it */
		dwPix = *lpSrc++;
		dwPix |= (dwPix <<8);
		dwPix |= (dwPix << 16);
		* ((DWORD UNALIGNED *) lpDst) = dwPix;
		lpDst += sizeof(DWORD);
	}
}


/*  -- 16-bit X functions -----------------------------------------------*/

/*
 * copy one scan-line of 16 bits with no change (1:1)
 */
void
X_Stretch_1_1_16Bits(LPBYTE lpSrc,
		    LPBYTE lpDst,
		    int SrcXE,
		    int DstXE,
		    int x_fract)
{

	X_CopyScanline(lpSrc, lpDst, DstXE * sizeof(WORD));

}


/*
 * copy one scanline of 16 bpp duplicating each pixel
 */
void
X_Stretch_1_2_16Bits(LPBYTE lpSrc,
		    LPBYTE lpDst,
		    int SrcXE,
		    int DstXE,
		    int x_fract)
{

   	DWORD dwPix;
	int i;

	for (i = 0; i < SrcXE; i++) {
		
		/* get a pixel and double it */
		dwPix = * ((WORD *)lpSrc);
		dwPix |= (dwPix << 16);
		* ((DWORD UNALIGNED *) lpDst) = dwPix;

		lpDst += sizeof(DWORD);
		lpSrc += sizeof(WORD);
	}

}

/*
 * copy one scanline of 16 bits, stretching 1:n (dest > source)
 */
void
X_Stretch_1_N_16Bits(LPBYTE lpSrc,
		    LPBYTE lpDst,
		    int SrcXE,
		    int DstXE,
		    int x_fract)
{
	int xdelta;
	int i;

	xdelta = DstXE -1;

	for (i = 0; i < DstXE; i++) {

		/* copy one pixel and advance dest */
		*((WORD *) lpDst) = *((WORD *) lpSrc);

		lpDst += sizeof(WORD);

		/* should we advance source pointer this time ? */
		if ( (xdelta -= SrcXE) < 0) {
			xdelta += DstXE;
			lpSrc += sizeof(WORD);
		}
	}
}

/*
 * copy one scanline of 16bits, shrinking n:1 (dest < source)
 */
void
X_Stretch_N_1_16Bits(LPBYTE lpSrc,
		    LPBYTE lpDst,
		    int SrcXE,
		    int DstXE,
		    int x_fract)
{

	int xdelta;
	int i;

	xdelta = SrcXE -1;

	for (i = 0; i < DstXE; i++) {

		/* copy one pixel and advance dest */
		*((WORD *) lpDst) = *((WORD *)lpSrc);

		lpDst += sizeof(WORD);

		/* how many times do we advance source pointer this time ? */
		do {
			lpSrc += sizeof(WORD);
			xdelta -= DstXE;
		} while (xdelta >= 0);

		xdelta += SrcXE;
	}

}


/* 24-bits ---------------------------------------------------------*/

/*
 * copy one 24-bpp scanline as is (1:1)
 */
void
X_Stretch_1_1_24Bits(LPBYTE lpSrc,
		    LPBYTE lpDst,
		    int SrcXE,
		    int DstXE,
		    int x_fract)
{
	X_CopyScanline(lpSrc, lpDst, DstXE * 3);
}

/*
 * copy one 24-bpp scanline stretching 1:n (dest > source)
 */
void
X_Stretch_1_N_24Bits(LPBYTE lpSrc,
		    LPBYTE lpDst,
		    int SrcXE,
		    int DstXE,
		    int x_fract)
{

	int xdelta;
	int i;

	xdelta = DstXE -1;

	for (i = 0; i < DstXE; i++) {
		/* copy first word of pixel and advance dest */
		*((WORD UNALIGNED *) lpDst) = *((WORD UNALIGNED *) lpSrc);

		lpDst += sizeof(WORD);

		/* copy third byte and advance dest */
		*lpDst++ = lpSrc[sizeof(WORD)];

		/* should we advance source pointer this time ? */
		if ( (xdelta -= SrcXE) < 0) {
			xdelta += DstXE;
			lpSrc += 3;
		}
	}
}

/*
 * copy one scanline of 24 bits, shrinking n:1 (dest < source)
 */
void
X_Stretch_N_1_24Bits(LPBYTE lpSrc,
		    LPBYTE lpDst,
		    int SrcXE,
		    int DstXE,
		    int x_fract)
{
	int xdelta;
	int i;

	xdelta = SrcXE -1;

	for (i = 0; i < DstXE; i++) {

		/* copy first word of pixel and advance dest */
		*((WORD UNALIGNED *) lpDst) = *((WORD UNALIGNED *) lpSrc);

		lpDst += sizeof(WORD);

		/* copy third byte and advance dest */
		*lpDst++ = lpSrc[sizeof(WORD)];


		/* how many times do we advance source pointer this time ? */
		do {
			lpSrc += 3;
			xdelta -= DstXE;
		} while (xdelta >= 0);

		xdelta += SrcXE;
	}
}		


/* 32-bits ---------------------------------------------------------*/

/*
 * copy one 32-bpp scanline as is (1:1)
 */
void
X_Stretch_1_1_32Bits(LPBYTE lpSrc,
            LPBYTE lpDst,
            int SrcXE,
            int DstXE,
            int x_fract)
{
    X_CopyScanline((BYTE*) lpSrc, (BYTE*) lpDst, DstXE * sizeof( RGBQUAD ) );
}

/*
 * copy one 32-bpp scanline stretching 1:n (dest > source)
 */
void
X_Stretch_1_N_32Bits(LPBYTE lpSrc0,
            LPBYTE lpDst0,
            int SrcXE,
            int DstXE,
            int x_fract)
{

    int xdelta;
    int i;

    RGBQUAD *lpSrc=(RGBQUAD *)lpSrc0;
    RGBQUAD *lpDst=(RGBQUAD *)lpDst0;
    

    xdelta = DstXE -1;

    for (i = 0; i < DstXE; i++) 
    {
        /* copy first word of pixel and advance dest */
        *lpDst = *lpSrc;
        lpDst++;

        /* should we advance source pointer this time ? */
        if ( (xdelta -= SrcXE) < 0) 
        {
            xdelta += DstXE;
            lpSrc++;
        }
    }
}

/*
 * copy one scanline of 32 bits, shrinking n:1 (dest < source)
 */
void
X_Stretch_N_1_32Bits(LPBYTE lpSrc0,
            LPBYTE lpDst0,
            int SrcXE,
            int DstXE,
            int x_fract)
{
    int xdelta;
    int i;

    RGBQUAD *lpSrc=(RGBQUAD *)lpSrc0;
    RGBQUAD *lpDst=(RGBQUAD *)lpDst0;
    
    xdelta = SrcXE -1;

    for (i = 0; i < DstXE; i++) 
    {
        *lpDst = *lpSrc;
        lpDst++;

        /* how many times do we advance source pointer this time ? */
        do 
        {
                lpSrc++;
                xdelta -= DstXE;
        } while (xdelta >= 0);

        xdelta += SrcXE;
    }
}        




/* -- special-case 1:2 -------------------------------------------*/

/*
 * stretch 1:2 in both directions, for 8 bits.
 *
 * An experiment was done on x86 to only write every other line during
 * the stretch and when the whole frame was done to use memcpy to fill
 * in the gaps.  This is slower than doing the stretch in a single pass.
 */
void
Stretch_1_2_8Bits(LPBYTE lpSrc, LPBYTE lpDst, int SrcXE,int SrcYE, int DstXE,
		   int DstYE, int SrcWidth, int DstWidth, int x_fract)
{

	int SrcInc, DstInc;
	int i, j;
	WORD wPix;
	DWORD dwPix4;

	/* amount to advance source by at the end of each scan */
	SrcInc = SrcWidth - SrcXE;


	/* amount to advance dest by at the end of each scan - note
	 * that we write two scans at once, so advance past the next
	 * scan line
	 */
	DstInc = (DstWidth * 2) - DstXE;

	/*
	 * we would like to copy the pixels DWORD at a time. this means
	 * being aligned. if we are currently aligned on a WORD boundary,
	 * then copy one pixel to get aligned. If we are on a byte
	 * boundary, we can never get aligned, so use the slower loop.
	 */
	if ( ((DWORD_PTR)lpDst) & 1) {

		/*
		 * dest is byte aligned - so we can never align it
		 * by writing WORDs - use slow loop.
		 */
		for (i = 0; i < SrcYE; i++) {
	
			for (j = 0; j < SrcXE; j++) {
	
				/* get a pixel and double it */
	
				wPix = *lpSrc++;
				wPix |= (wPix<<8);
	
	
				/* write doubled pixel to this scanline */
	
				*( (WORD UNALIGNED *) lpDst) = wPix;
	
				/* write double pixel to next scanline */
				*( (WORD UNALIGNED *) (lpDst + DstWidth)) = wPix;
	
				lpDst += sizeof(WORD);
			}
			lpSrc += SrcInc;
			lpDst += DstInc;
		}
		return;
	}

	/*
	 * this will be the aligned version. align each scan line
	 */
	for ( i = 0; i < SrcYE; i++) {

		/* count of pixels remaining */
		j = SrcXE;

		/* align this scan line */
		if (((DWORD_PTR)lpDst) & 2) {

			/* word aligned - copy one doubled pixel and we are ok */
			wPix = *lpSrc++;
			wPix |= (wPix << 8);
	
			*( (WORD *) lpDst) = wPix;
  			*( (WORD *) (lpDst + DstWidth)) = wPix;
			lpDst += sizeof(WORD);

			j -= 1;
		}


		/* now dest is aligned - so loop eating two pixels at a time
		 * until there is at most one left
		 */
               	for ( ; j > 1; j -= 2) {

			/* read two pixels and double them */
			wPix = * ((WORD UNALIGNED *) lpSrc);
			lpSrc += sizeof(WORD);

			dwPix4 = (wPix & 0xff) | ((wPix & 0xff) << 8);
			dwPix4 |= ((wPix & 0xff00) << 8) | ((wPix & 0xff00) << 16);
			*((DWORD *) lpDst) = dwPix4;
  			*((DWORD *) (lpDst + DstWidth)) = dwPix4;

			lpDst += sizeof(DWORD);
		}

		/* odd byte remaining ? */
		if (j > 0) {
			/* word aligned - copy one doubled pixel and we are ok */
			wPix = *lpSrc++;
			wPix |= (wPix << 8);
	
			*( (WORD *) lpDst) = wPix;
			*( (WORD *) (lpDst + DstWidth)) = wPix;
			lpDst += sizeof(WORD);

			j -= 1;
		}
		lpSrc += SrcInc;
		lpDst += DstInc;
	}
}



/* ----------------------------------------------------------------*/

/*
 * stretch 1:2 in both directions, for 16-bits
 */

void
Stretch_1_2_16Bits(LPBYTE lpSrc, LPBYTE lpDst, int SrcXE,int SrcYE, int DstXE,
		   int DstYE, int SrcWidth, int DstWidth, int x_fract)

{
	int SrcInc, DstInc;
	int i, j;
	DWORD dwPix;

	/* amount to advance source by at the end of each scan */
	SrcInc = SrcWidth - (SrcXE * sizeof(WORD));


	/* amount to advance dest by at the end of each scan - note
	 * that we write two scans at once, so advance past the next
	 * scan line
	 */
	DstInc = (DstWidth * 2) - (DstXE * sizeof(WORD));

	for (i = 0; i < SrcYE; i++) {

		for (j = 0; j < SrcXE; j++) {

			/* get a pixel and double it */

			dwPix = *((WORD *)lpSrc);
			dwPix |= (dwPix<<16);

			lpSrc += sizeof(WORD);

			/* write doubled pixel to this scanline */

			*( (DWORD UNALIGNED *) lpDst) = dwPix;

			/* write double pixel to next scanline */
			*( (DWORD UNALIGNED *) (lpDst + DstWidth)) = dwPix;

			lpDst += sizeof(DWORD);
		}
	        lpSrc += SrcInc;
		lpDst += DstInc;

	}
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\shotb\research.h ===
#ifndef SHOTBOUNDARY_H
#define SHOTBOUNDARY_H

#include "StdAfx.h"

class CShotBoundary
{
public:
    CShotBoundary();
    ~CShotBoundary();

    void SetBins(int num_y, int num_u, int num_v);   // set number of color hist bins for YUV
    void SetDimension(int width, int height);        // set the width and height of the input frame
    void SetParameters(float scale, int  duration);  // scale: the higher the scale, the higher the difference
                                                     // threshold and the less shot boundaries will be found
                                                     // for normal video, set it to 5, for talks, set it to 8
                                                     // duration: defines the mininum interval we allow a shot
                                                     // boundary to happen. e.g. duration = 10 means there is
                                                     // not possible for a shot to be shorter than 10 frames

    // pass in a UYVY frame and find out if a shot or not
    int GetDecision(unsigned char * curr_image, REFERENCE_TIME *curr_time, long Yoff, long Uoff, long Voff );
     
private:

    // compute hist for m_curr_img and update hist for m_prev_img
    void ComputeHist(BYTE * pCurrImage, long Yoff, long Uoff, long Voff );
    void HistogramIntersection(BYTE * pCurrImage, int mode, long Yoff, long Uoff, long Voff );

    float *         m_distance;
    float *         m_cumuDiff;  
    float           m_ratioBar;
    float           m_distBar;
    float           m_ratio;
    float           m_dist;
    int             m_duration;
    float **        m_diffBuffer;
    int             m_numShots;
    int             m_num_y;
    int             m_num_u;
    int             m_num_v;
    int             m_num_bins;
    int             m_binwidth_y;
    int             m_binwidth_u;
    int             m_binwidth_v;
    int             m_width;
    int             m_height;
    int             m_size;
    unsigned char * m_curr_img;
    long **         m_prev_hist;
    long **         m_curr_hist;
    float           m_curr_y;
    float           m_prev_y;
    float           m_blackThreshold;
    BOOL            m_bPrevBlack;
    BOOL            m_bPrevBright;
    BOOL            m_bBrightDrop;
    int             m_waitIndex;
    int             m_flashDuration;
    REFERENCE_TIME  m_waitTime;
    int             m_xBlocks;
    int             m_yBlocks;
    int             m_numBlocks;
    int             m_xBlockSize;
    int             m_yBlockSize;
    int             m_blockSize;
    int             m_index;
};

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\shotb\research.cpp ===
#include "stdafx.h"
#include <streams.h>
#include "research.h"

CShotBoundary::CShotBoundary()
{
    m_numShots = 0;
    m_distBar  = 0.16f;
    m_ratioBar = 4.0;
    m_duration = 10;
    m_xBlocks  = 3;
    m_yBlocks  = 3;
    m_numBlocks = m_xBlocks * m_yBlocks;

    m_curr_y   = m_prev_y = 100;
    m_blackThreshold = 0;
    m_bPrevBlack   = FALSE;
    m_bPrevBright  = FALSE;
    m_bBrightDrop  = FALSE;
    m_flashDuration = 4;

    m_ratio = 0;
    m_dist  = 0;
    m_curr_y = 0;
    m_index = 0;

    m_distance = (float *)calloc(m_numBlocks, sizeof(float));
    m_cumuDiff = (float *)calloc(m_numBlocks, sizeof(float));
    m_curr_hist = (long **)calloc(m_numBlocks, sizeof(long *));
    m_prev_hist = (long **)calloc(m_numBlocks, sizeof(long *));
}

CShotBoundary::~CShotBoundary()
{
    for(int i = 0; i < m_numBlocks; i++)
    {
        free(m_prev_hist[i]);
        free(m_curr_hist[i]);
        free(m_diffBuffer[i]);
    }
    free(m_prev_hist);
    free(m_curr_hist);

    free(m_distance);
    free(m_cumuDiff);
    free(m_diffBuffer);
}

// scale is [1, 10]
void CShotBoundary::SetParameters(float scale, int duration)
{
    m_distBar  = (float)(0.5 / scale);
    m_ratioBar = 20  / scale;
    m_duration = duration;

    m_diffBuffer = (float **)calloc(m_numBlocks, sizeof(float *));
    for(int i = 0; i < m_numBlocks; i++)
    {
        m_diffBuffer[i] = (float *)calloc(m_duration, sizeof(float));
    }
}

void CShotBoundary::SetBins(int num_y, int num_u, int num_v)
{
    m_num_y    = num_y;
    m_num_u    = num_u;
    m_num_v    = num_v;
    m_num_bins = m_num_u * m_num_v;

    m_binwidth_y = 256 / m_num_y;
    m_binwidth_u = 256 / m_num_u;
    m_binwidth_v = 256 / m_num_v;

    for(int i = 0; i < m_numBlocks; i++)
    {
        m_prev_hist[i]   = (long *)calloc(m_num_bins, sizeof(long));
        m_curr_hist[i]   = (long *)calloc(m_num_bins, sizeof(long));
    }
}

void CShotBoundary::SetDimension(int width, int height)
{
    m_width  = width;
    m_height = height;
    m_size   = m_width * m_height;
}



int CShotBoundary::GetDecision(unsigned char *curr_image, REFERENCE_TIME *curr_time, long Yoff, long Uoff, long Voff )
{
    static int start = 0;
    static int end = 0;
    static int frameCount = 0;
    int        id;
    int        mode;
    int        i;

    m_index++;

    m_ratio = 0;

    HistogramIntersection( curr_image, 0, Yoff, Uoff, Voff );

    unsigned char *ptrY = curr_image + Yoff;
    m_prev_y = m_curr_y;
    m_curr_y = 0;
    for (i=0 ; i< m_size; i++) 
    {
        m_curr_y += *ptrY;
        ptrY += 2;
    }
    m_curr_y /= m_size;

    if(m_curr_y < m_blackThreshold)   // black
    {
        m_bPrevBlack = TRUE;
        mode = 1;
    }
    else  // not black
    {
        if(m_bPrevBlack)
        {
            m_bPrevBlack = FALSE;
            mode = 0;
        }
        else
        {
            if(m_bPrevBright)
            {
                // drop within m_flashDuration frames
                if(m_index - m_waitIndex <= m_flashDuration)
                {
                    mode = 1;
                    if(m_prev_y >= m_curr_y * 1.1)
                        m_bBrightDrop = TRUE;
                }
                else // does not drop within m_flashDuration frames
                {
                    m_bPrevBright = FALSE;
                    if(m_bBrightDrop)
                        mode = 2;  // it is a flash 
                    else
                        mode = -1; // it is a boundary
                        
                    m_bBrightDrop = FALSE;
                }
            }
            else
            {
                m_ratio = 0;
                for(id = 0; id < m_numBlocks; id++)
                {
                    if( m_distance[id] * m_duration / (m_cumuDiff[id] + 0.001) >= m_ratioBar &&
                        m_distance[id] >= m_distBar )
                    {
                        m_ratio ++;
                    }
                }

                if(m_ratio > m_numBlocks / 2)
                {
                    if(m_curr_y >= m_prev_y * 1.1)  // bright
                    {
                        m_bPrevBright = TRUE;
                        m_waitIndex   = m_index;
                        m_waitTime    = *curr_time;

                        mode = 1; 
                    }
                    else 
                        mode = 0;
                }
                else
                    mode = 1;
            }
        }
    }

    // computer m_cumuDiff
    int tail = m_index % m_duration;
    for(id = 0; id < m_numBlocks; id++)
    {
        m_cumuDiff[id]         += m_distance[id];
        m_cumuDiff[id]         -= m_diffBuffer[id][tail];
        m_diffBuffer[id][tail] =  m_distance[id];
    }
    frameCount ++;

    // Make sure we have a shot at the beginning
    if (m_numShots == 0 && m_index == 5)
        mode = -1;

    switch(mode)
    {
    case -1:  // previous frame is boundary
        if( m_index - start >= m_duration || m_numShots == 0)
        {
            m_numShots++;
            for(id = 0; id < m_numBlocks; id++)
            {
                m_cumuDiff[id] = 0;
                for(i = 0; i < m_duration; i++)
                    m_diffBuffer[id][i] = 0;
            }
            frameCount = 0;

            end = m_index - 1;
            start = end + 1;

            *curr_time = m_waitTime;
            return (m_waitIndex - m_index);
        }
        else
        {
            return 1;
        }

        break;

    case 0:  // current frame is boundary
        if( m_index - start >= m_duration || m_numShots == 0)
        {
            m_numShots++;

            for(id = 0; id < m_numBlocks; id++)
            {
                m_cumuDiff[id] = 0;
                for(i = 0; i < m_duration; i++)
                    m_diffBuffer[id][i] = 0;
            }
            frameCount = 0;

            end = m_index - 1;
            start = end + 1;

            return 0;
        }
        else
        {
            return 1;
        }

        break;

    case 1:  // not boundary

        return 1;

        break;

    case 2:  // not boundary -- it is a flash

        for(id = 0; id < m_numBlocks; id++)
        {
            m_cumuDiff[id] = 0;
            for(i = 0; i < m_duration; i++)
                m_diffBuffer[id][i] = 0;
        }
        frameCount = 0;

        end = m_index - 1;
        start = end + 1;

        return 1;

        break;

    default:
        return 1;
    }
}

void CShotBoundary::ComputeHist( BYTE * pCurrImage, long Yoff, long Uoff, long Voff )
{
    unsigned char * ptrBase;
    unsigned char * ptrU;
    unsigned char * ptrV;

    int col2, col3;
  
    m_xBlockSize = m_width  / m_xBlocks;
    m_yBlockSize = m_height / m_yBlocks;
    m_blockSize  = m_xBlockSize * m_yBlockSize;

    int offset = m_xBlockSize  * (m_xBlocks - 1) * 2;
    
    ASSERT(256 % m_num_y==0 && 256%m_num_u==0 && 256%m_num_v==0);
    for(int y = 0; y < m_yBlocks; y++)
    {
        for(int x = 0; x < m_xBlocks; x++)
        {
            int id = y * m_xBlocks + x;
            memcpy(m_prev_hist[id], m_curr_hist[id], m_num_bins * sizeof( long ) );
            memset(m_curr_hist[id], 0, m_num_bins * sizeof(long)); 

            ptrBase = pCurrImage + (y * m_xBlocks * m_blockSize + x * m_xBlockSize) * 2;
            ptrU = ptrBase + Uoff;
            ptrV = ptrBase + Voff;
            for (int j = 0 ; j < m_yBlockSize; j++) 
            {
                for(int i = 0; i < m_xBlockSize / 2; i++)
                {
                    col2 = *ptrU / m_binwidth_u;
                    col3 = *ptrV / m_binwidth_v;

                    (m_curr_hist[id][col2 * m_num_v + col3])++;

                    ptrU += 4;
                    ptrV += 4;
                }

                ptrU += offset;
                ptrV += offset;

            }
        }
    }
}

void CShotBoundary::HistogramIntersection( BYTE * pCurrImage, int mode, long Yoff, long Uoff, long Voff )
{
    long * ptr1;
    long * ptr2;

    if(mode == 0)
        ComputeHist( pCurrImage, Yoff, Uoff, Voff );

    for(int id = 0; id < m_numBlocks; id++)
    {
        ptr2 = m_curr_hist[id];
        ptr1 = m_prev_hist[id];

        m_distance[id] = 0;
        for (int i=0 ; i<m_num_bins ; i++) 
        {
            m_distance[id] += min(*ptr1, *ptr2);
            ptr1++;  ptr2++;
        }
        m_distance[id] = 1 - m_distance[id] / m_blockSize * 2;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\resize\stretch.cpp ===
//==========================================================================;
//
//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
//  PURPOSE.
//
//  Copyright (c) 1992 - 1999  Microsoft Corporation.  All Rights Reserved.
//
//--------------------------------------------------------------------------;

// A Transform filter that stretches a video image as it passes through

#include <windows.h>
#include <streams.h>
#ifdef FILTER_DLL
#include <initguid.h>
#endif
#include <qeditint.h>
#include <qedit.h>
#include <Stretch.h>
#include <resource.h>

const int DEFAULT_WIDTH   = 320;
const int DEFAULT_HEIGHT  = 240;

#ifdef FILTER_DLL
    // List of class IDs and creator functions for the class factory. This
    // provides the link between the OLE entry point in the DLL and an object
    // being created. The class factory will call the static CreateInstance
    // function when it is asked to create a CLSID_Resize COM object

    CFactoryTemplate g_Templates[] = {

	{L"Stretch", &CLSID_Resize, CStretch::CreateInstance,NULL,
							    &sudStretchFilter },
	{
	  L"Stretch Property Page",
	  &CLSID_ResizeProp,
	  CResizePropertyPage::CreateInstance
	}

    };
    int g_cTemplates = sizeof(g_Templates) / sizeof(g_Templates[0]);

    // Exported entry points for registration of server

    STDAPI DllRegisterServer()
    {
      return AMovieDllRegisterServer2(TRUE);
    }

    STDAPI DllUnregisterServer()
    {
      return AMovieDllRegisterServer2(FALSE);
    }
#endif


// Setup data

const AMOVIESETUP_MEDIATYPE sudStretchPinTypes =
{
    &MEDIATYPE_Video,           // Major
    &MEDIASUBTYPE_NULL          // Subtype
};

const AMOVIESETUP_PIN sudStretchPin[] =
{
    { L"Input",                 // Name of the pin
      FALSE,                    // Is pin rendered
      FALSE,                    // Is an Output pin
      FALSE,                    // Ok for no pins
      FALSE,                    // Can we have many
      &CLSID_NULL,              // Connects to filter
      NULL,                     // Name of pin connect
      1,                        // Number of pin types
      &sudStretchPinTypes },    // Details for pins

    { L"Output",                // Name of the pin
      FALSE,                    // Is pin rendered
      TRUE,                     // Is an Output pin
      FALSE,                    // Ok for no pins
      FALSE,                    // Can we have many
      &CLSID_NULL,              // Connects to filter
      NULL,                     // Name of pin connect
      1,                        // Number of pin types
      &sudStretchPinTypes }     // Details for pins
};

const AMOVIESETUP_FILTER sudStretchFilter =
{
    &CLSID_Resize,             // CLSID of filter
    L"Stretch Video",           // Filter name
    MERIT_DO_NOT_USE,               // Filter merit
    2,                          // Number of pins
    sudStretchPin               // Pin information
};

// Constructor

CStretch::CStretch(LPUNKNOWN pUnk, HRESULT *phr) :
    CTransformFilter(NAME("Stretch"),pUnk,CLSID_Resize),
    CPersistStream(pUnk, phr),
    m_lBufferRequest(1),
    m_dwResizeFlag(RESIZEF_STRETCH)
{
    CreatePreferredMediaType(&m_mt);
}

CStretch::~CStretch()
{
    FreeMediaType(m_mt);
}



// This goes in the factory template table to create new filter instances

CUnknown *CStretch::CreateInstance(LPUNKNOWN punk, HRESULT *phr)
{
    CStretch *pNewObject = new CStretch(punk, phr);
    if (pNewObject == NULL) {
	*phr = E_OUTOFMEMORY;
    }
    return pNewObject;
}


// overridden to make a special input pin
//
CBasePin * CStretch::GetPin(int n)
{
    HRESULT hr = S_OK;

    // Create an input pin if necessary

    if (n == 0 && m_pInput == NULL) {
        DbgLog((LOG_TRACE,2,TEXT("Creating an input pin")));

        m_pInput = new CStretchInputPin(NAME("Resize input pin"),
                                          this,              // Owner filter
                                          &hr,               // Result code
                                          L"Input");         // Pin name

        // a failed return code should delete the object

        if (FAILED(hr) || m_pInput == NULL) {
            delete m_pInput;
            m_pInput = NULL;
        }
    }

    // Or alternatively create an output pin

    if (n == 1 && m_pOutput == NULL) {

        DbgLog((LOG_TRACE,2,TEXT("Creating an output pin")));

        m_pOutput = new CTransformOutputPin(NAME("Transform output pin"),
                                            this,            // Owner filter
                                            &hr,             // Result code
                                            L"Output");      // Pin name

        // a failed return code should delete the object

        if (FAILED(hr) || m_pOutput == NULL) {
            delete m_pOutput;
            m_pOutput = NULL;
        }
    }

    // Return the appropriate pin

    if (n == 0) {
        return m_pInput;
    }
    return m_pOutput;
}


//
//  resize function
//
//

#define BITMAP_WIDTH(width,bitCount) \
    (int)((int)(((((int)width) * ((int)bitCount)) + 31L) & (int)~31L) / 8L)


extern void StretchDIB(
    LPBITMAPINFOHEADER pbiDst,   //    --> to destination BIH
    LPVOID    lpvDst,            //    --> to destination bits
    int    DstX,            //    Destination origin - x coordinate
    int    DstY,            //    Destination origin - y coordinate
    int    DstXE,            //    x extent of the BLT
    int    DstYE,            //    y extent of the BLT
    LPBITMAPINFOHEADER pbiSrc,   //    --> to source BIH
    LPVOID    lpvSrc,            //    --> to source bits
    int    SrcX,            //    Source origin - x coordinate
    int    SrcY,            //    Source origin - y coordinate
    int    SrcXE,            //    x extent of the BLT
    int    SrcYE             //    y extent of the BLT
    );

void CStretch::ResizeRGB( BITMAPINFOHEADER *pbiIn,    //Src's BitMapInFoHeader
			  const unsigned char * dibBits,    //Src bits
			  BITMAPINFOHEADER *pbiOut,
			  unsigned char *pFrame,    //Dst bits
			  int iNewWidth,            //new W in pixel
			  int iNewHeight)           //new H in pixel
{
    // NICE!
    //
    StretchDIB(
	pbiOut,   	    //	--> BITMAPINFO of destination
	pFrame,             //  --> to destination bits
	0,                  //  Destination origin - x coordinate
	0,                  //  Destination origin - y coordinate
	iNewWidth,          //  x extent of the BLT
	iNewHeight,         //  y extent of the BLT
	pbiIn,   	    //	--> BITMAPINFO of destination
	(void*) dibBits,    //  --> to source bits
	0,                  //  Source origin - x coordinate
	0,                  //  Source origin - y coordinate
	pbiIn->biWidth,    //  x extent of the BLT
	pbiIn->biHeight    //  y extent of the BLT
	);

    return;
}

void CropRGB(	BITMAPINFOHEADER *pbiIn,	//Src's BitMapInfoHeader
		const unsigned char * dibBits,  //Src bits
		BITMAPINFOHEADER *pbiOut,	//Dst's BitmapinfoHeader
		unsigned char *pOutBuf )	//Dst bits
{
    // check video bits
    long nBits;

    if ( (nBits = pbiOut->biBitCount) != pbiIn->biBitCount)
    {
	ASSERT( nBits == pbiIn->biBitCount);
	return;
    }


    long lSrcX, lDstX;	    //start point at x axis;
    long lWidthOff=(pbiOut->biWidth  - pbiIn->biWidth)>>1;
    long lInWidthBytes=(((pbiIn->biWidth * nBits) + 31) & ~31) / 8;
    long lOutWidthBytes=(((pbiOut->biWidth * nBits) + 31) & ~31) / 8;

    long lCropWidth;
    if(lWidthOff >=0)
    {
	//Src width < Dst Width, take whole source
	lSrcX	    =0L;
	lDstX	    =(((lWidthOff * nBits) + 31) & ~31) / 8;
	lCropWidth  =lInWidthBytes;
    }
    else
    {
	//Src Width > Dst Width, take part of Src
	lSrcX	    =-(((lWidthOff * nBits) + 31) & ~31) / 8;
	lDstX	    =0;
	lCropWidth  =lOutWidthBytes;
    }



    long lSrcY,lDstY;	    //Src start point at y axis
    long lHeightOff=(pbiOut->biHeight - pbiIn->biHeight)>>1;
    long lCropHeight;
    if(lHeightOff >=0)
    {
	//SRC height <Dst Height, take whole Src height
	lSrcY   =0L;
	lDstY	=lHeightOff;
	lCropHeight  =pbiIn->biHeight;
    }
    else
    {
	lSrcY	    =-lHeightOff;
	lDstY	    =0;
	lCropHeight =pbiOut->biHeight;
    }


    //	biBitCount: 0, bit implied by JPEG format
    //	1: monoChrome, 4: 16 color, 8, 16, 24, 32
    //we only support 8,16,24,32 bits.

    for(long y=lSrcY; y<(lSrcY+lCropHeight); y++)
    {
	long lSrcOffSet=lSrcX + y	*lInWidthBytes;
	long lDstOffSet=lDstX +	lDstY	*lOutWidthBytes;

	CopyMemory(&pOutBuf[lDstOffSet],&dibBits[lSrcOffSet],lCropWidth);
	lDstY++;
    }
}
///
//  Transform
//
HRESULT CStretch::Transform(IMediaSample *pIn, IMediaSample *pOut)
{

    pOut->SetPreroll(pIn->IsPreroll() == S_OK);

    //get in and out buffer
    BYTE *pInBuffer, *pOutBuffer;
    pIn->GetPointer(&pInBuffer);
    pOut->GetPointer(&pOutBuffer);

    //get input and output BitMapInfoHeader
    BITMAPINFOHEADER *pbiOut = HEADER(m_mtOut.Format());
    BITMAPINFOHEADER *pbiIn = HEADER(m_mtIn.Format());

    if(m_dwResizeFlag == RESIZEF_CROP)
    {
	ZeroMemory(pOutBuffer, DIBSIZE(*pbiOut));
	CropRGB( pbiIn,		//Src's BitMapInfoHeader
		 pInBuffer,	//Src bits
		 pbiOut,	//Dsr'a BitmapinfoHeader
		 pOutBuffer );	//Dst bits
    }
    else if (m_dwResizeFlag == RESIZEF_PRESERVEASPECTRATIO_NOLETTERBOX)
    {
	double dy=(double)(pbiOut->biHeight)/(double)(pbiIn->biHeight);
	double dx=(double)(pbiOut->biWidth)/(double)(pbiIn->biWidth);

	if(dy!=dx)
	{
	    //keep the Y/X ratio
	    // variables for Source X and Y extant, and X and Y Coordinates
	    long lSrcXE,lSrcYE,lSrcX,lSrcY;
	    ZeroMemory(pOutBuffer, DIBSIZE(*pbiOut));

	    if( dy < dx )
	    {
		// the y ratio is smaller, therefore we need to fit the srcX competely to the destX
		// this will cause the srcY to stretch beyond the destY
		// therefore we will have to worry about the srcYExtant and srcY starting coordinate
		lSrcXE = pbiIn->biWidth;
		lSrcYE = pbiOut->biHeight * pbiIn->biWidth/pbiOut->biWidth;  // this will be the height of the destination
		lSrcX = 0;
		lSrcY = (pbiIn->biHeight - lSrcYE) >> 1;    // (difference in width) / 2
	    }
	    else
	    {
		// dy > dx
		// now the x ratio is smaller, therefore we need to fit srcY completely into destY
		// but this will cause srcX to stretch beyond destX
		// therfore we will modify srcXExtant, and srcX starting coordinate
		lSrcXE = pbiOut->biWidth * pbiIn->biHeight/pbiOut->biHeight;
		lSrcYE = pbiIn->biHeight;
		lSrcX = (pbiIn->biWidth - lSrcXE) >> 1;
		lSrcY = 0;
	    }
	    StretchDIB(
		pbiOut,   	    // --> BITMAPINFO of destination
		pOutBuffer,         // --> to destination bits
		0,                  // Destination origin - x coordinate
		0,                  // Destination origin - y coordinate
		pbiOut->biWidth,    // x extent of the BLT
		pbiOut->biHeight,   // y extent of the BLT
		pbiIn,   	    // --> BITMAPINFO of destination
		(void*) pInBuffer,  // --> to source bits
		lSrcX,              // Source origin - x coordinate
		lSrcY,              // Source origin - y coordinate
		lSrcXE,		    // x extent of the BLT
		lSrcYE		    // y extent of the BLT
		);
	}
	else
	    goto goto_Resize;
    }
    else if (m_dwResizeFlag == RESIZEF_PRESERVEASPECTRATIO)
    {
	double dy=(double)(pbiOut->biHeight)/(double)(pbiIn->biHeight);
	double dx=(double)(pbiOut->biWidth)/(double)(pbiIn->biWidth);

	if(dy!=dx)
	{
	    //keep the Y/X ratio
	    long lDstXE,lDstYE,lDstX,lDstY;
	    ZeroMemory(pOutBuffer, DIBSIZE(*pbiOut));

	    if( dy < dx )
	    {
		//y full strech,
		lDstXE	=pbiIn->biWidth*pbiOut->biHeight/pbiIn->biHeight;
		lDstYE	=pbiOut->biHeight;
		lDstX	=(pbiOut->biWidth-lDstXE)>>1;
		lDstY	=0;
	    }
	    else
	    {
		//x full strech
		lDstYE	=pbiIn->biHeight*pbiOut->biWidth/pbiIn->biWidth;
		lDstXE	=pbiOut->biWidth;
		lDstY	=(pbiOut->biHeight-lDstYE)>>1;
		lDstX	=0;
	    }
	    StretchDIB(
		pbiOut,   	    //	--> BITMAPINFO of destination
		pOutBuffer,             //  --> to destination bits
		lDstX,                  //  Destination origin - x coordinate
		lDstY,                  //  Destination origin - y coordinate
		lDstXE,          //  x extent of the BLT
		lDstYE,         //  y extent of the BLT
		pbiIn,   	 //	--> BITMAPINFO of destination
		(void*) pInBuffer,    //  --> to source bits
		0,                  //  Source origin - x coordinate
		0,                  //  Source origin - y coordinate
		pbiIn->biWidth,    //  x extent of the BLT
		pbiIn->biHeight    //  y extent of the BLT
		);
	}
	else
	    goto goto_Resize;
    // STRETCH
    } else {
	ASSERT(m_dwResizeFlag == RESIZEF_STRETCH);
goto_Resize:
	ZeroMemory(pOutBuffer, DIBSIZE(*pbiOut));

	ResizeRGB(  pbiIn,                          //Src's BitMapInFoHeader
		    pInBuffer,                      //Src bits
		    pbiOut,			    //Dst's BitMapInFoHeader
		    pOutBuffer,                     //Dst bits
		    (int)pbiOut->biWidth,           //new W in pixel
		    (int)pbiOut->biHeight );        //new H in pixel
    }

    pOut->SetActualDataLength(DIBSIZE(*pbiOut));

    return NOERROR;
}

// CheckInputType accepts any media type matching the media
// type set via the API, given the dimensions are non-zero.
HRESULT CStretch::CheckInputType(const CMediaType *mtIn)
{
    //DbgLog((LOG_TRACE,3,TEXT("Stretch::CheckInputType")));

    if (FAILED(InternalPartialCheckMediaTypes(mtIn, &m_mt)))
      return E_FAIL;

    VIDEOINFOHEADER *pv = (VIDEOINFOHEADER *)mtIn->Format();
    LPBITMAPINFOHEADER lpbi = HEADER(pv);

    // Final check - key fields: biCompression, biBitCount, biHeight, biWidth
    if (!lpbi->biHeight || !lpbi->biWidth)
      return E_FAIL;

    // we don't know how to deal with topside-right.  !!! We could!
    if (lpbi->biHeight < 0)
	return E_FAIL;

    return S_OK;
}


// CheckTransform - guarantee the media types for the input and output
// match our expectations (m_mt). The input type is guarded by the
// CheckInputType() method, so we're just perform a couple quick checks.
HRESULT CStretch::CheckTransform(const CMediaType *mtIn, const CMediaType *mtOut)
{
    if (FAILED(InternalPartialCheckMediaTypes(mtIn, mtOut)))
        return E_FAIL;

    LPBITMAPINFOHEADER lpbi = HEADER(mtOut->Format());

    if (lpbi->biHeight != HEADER(m_mt.Format())->biHeight ||
				lpbi->biWidth != HEADER(m_mt.Format())->biWidth)
        return E_FAIL;

    return S_OK;
}


// Tell the output pin's allocator what size buffers we require

HRESULT CStretch::DecideBufferSize(IMemAllocator *pAlloc,ALLOCATOR_PROPERTIES *pProperties)
{
    ASSERT(pAlloc);
    ASSERT(pProperties);

    if (m_pInput->IsConnected() == FALSE) {
	return E_UNEXPECTED;
    }

    pProperties->cBuffers = 1;
    pProperties->cbBuffer = HEADER(m_mt.Format())->biSizeImage;

    ASSERT(pProperties->cbBuffer);

    // Ask the allocator to reserve us some sample memory, NOTE the function
    // can succeed (that is return NOERROR) but still not have allocated the
    // memory that we requested, so we must check we got whatever we wanted

    ALLOCATOR_PROPERTIES Actual;
    HRESULT hr = pAlloc->SetProperties(pProperties,&Actual);
    if (FAILED(hr)) {
	return hr;
    }

    // Check we got at least what we asked for

    if ((pProperties->cBuffers > Actual.cBuffers) ||
	(pProperties->cbBuffer > Actual.cbBuffer)) {
	    return E_FAIL;
    }
    return NOERROR;
}


// Disconnected one of our pins

HRESULT CStretch::BreakConnect(PIN_DIRECTION dir)
{
    if (dir == PINDIR_INPUT) {
	m_mtIn.SetType(&GUID_NULL);
	return NOERROR;
    }

    ASSERT(dir == PINDIR_OUTPUT);
    m_mtOut.SetType(&GUID_NULL);
    return NOERROR;
}


// Tells us what media type we will be transforming

HRESULT CStretch::SetMediaType(PIN_DIRECTION direction,const CMediaType *pmt)
{
    if (direction == PINDIR_INPUT) {
	m_mtIn = *pmt;
	return NOERROR;
    }

    ASSERT(direction == PINDIR_OUTPUT);
    m_mtOut = *pmt;
    return NOERROR;
}


// I support one type namely the type of the input pin

HRESULT CStretch::GetMediaType(int iPosition, CMediaType *pMediaType)
{
    if (m_pInput->IsConnected() == FALSE) {
	return E_UNEXPECTED;
    }

    ASSERT(iPosition >= 0);
    if (iPosition > 0) {
	return VFW_S_NO_MORE_ITEMS;
    }

    *pMediaType = m_mt;

// !!! alter bit rate, other fields?

    return NOERROR;
}

STDMETHODIMP CStretch::NonDelegatingQueryInterface (REFIID riid, void **ppv)

  { // NonDelegatingQueryInterface //

    if (IsEqualIID(IID_ISpecifyPropertyPages, riid)) {
        return GetInterface((ISpecifyPropertyPages *)this, ppv);
    } else if (riid == IID_IPersistStream) {
	return GetInterface((IPersistStream *) this, ppv);
    } else if (IsEqualIID(IID_IResize, riid)) {
      return GetInterface((IResize *)this, ppv);
    } else {
        return CTransformFilter::NonDelegatingQueryInterface(riid, ppv);
    }

  } // NonDelegatingQueryInterface //

// --- ISpecifyPropertyPages ---

STDMETHODIMP CStretch::GetPages (CAUUID *pPages)

  { // GetPages //

    pPages->cElems = 1;
    pPages->pElems = (GUID *)CoTaskMemAlloc(sizeof(GUID));

    if (pPages->pElems == NULL)
	return E_OUTOFMEMORY;

    *(pPages->pElems) = CLSID_ResizeProp;

    return NOERROR;

  } // GetPages




// IPersistStream

// tell our clsid
//
STDMETHODIMP CStretch::GetClassID(CLSID *pClsid)
{
    CheckPointer(pClsid, E_POINTER);
    *pClsid = CLSID_Resize;
    return S_OK;
}

typedef struct _ResizeSave {
    int version;
    long dwResizeFlag;
    AM_MEDIA_TYPE mt;
    long x;	// fmt hidden here
} ResizeSave;

// persist ourself
//
HRESULT CStretch::WriteToStream(IStream *pStream)
{
    DbgLog((LOG_TRACE,1,TEXT("CStretch::WriteToStream")));

    CheckPointer(pStream, E_POINTER);
    ResizeSave *px;

    int savesize = sizeof(ResizeSave) + m_mt.cbFormat;
    DbgLog((LOG_TRACE,1,TEXT("Persisted data is %d bytes"), savesize));
    px = (ResizeSave *)QzTaskMemAlloc(savesize);
    if (px == NULL) {
        DbgLog((LOG_ERROR,1,TEXT("*** Out of memory")));
	return E_OUTOFMEMORY;
    }
    px->version = 1;
    px->dwResizeFlag= m_dwResizeFlag;

    px->mt = m_mt;
    // Can't persist pointers
    px->mt.pbFormat = NULL;
    px->mt.pUnk = NULL;		// !!!

    // the format goes after the array
    CopyMemory(&px->x, m_mt.pbFormat, m_mt.cbFormat);

    HRESULT hr = pStream->Write(px, savesize, 0);
    QzTaskMemFree(px);
    if(FAILED(hr)) {
        DbgLog((LOG_ERROR,1,TEXT("*** WriteToStream FAILED")));
        return hr;
    }
    return NOERROR;
}


// load ourself
//
HRESULT CStretch::ReadFromStream(IStream *pStream)
{
    DbgLog((LOG_TRACE,1,TEXT("CStretch::ReadFromStream")));
    CheckPointer(pStream, E_POINTER);

    int savesize1 = sizeof(ResizeSave) - sizeof(long);
    ResizeSave *px = (ResizeSave *)QzTaskMemAlloc(savesize1);
    if (px == NULL) {
        DbgLog((LOG_ERROR,1,TEXT("*** Out of memory")));
	return E_OUTOFMEMORY;
    }

    HRESULT hr = pStream->Read(px, savesize1, 0);
    if(FAILED(hr)) {
        DbgLog((LOG_ERROR,1,TEXT("*** ReadFromStream FAILED")));
        QzTaskMemFree(px);
        return hr;
    }

    if (px->version != 1) {
        DbgLog((LOG_ERROR,1,TEXT("*** ERROR! Bad version file")));
        QzTaskMemFree(px);
	return S_OK;
    }

    // how much saved data was there, really?  Get the rest
    int savesize = sizeof(ResizeSave) + px->mt.cbFormat;
    DbgLog((LOG_TRACE,1,TEXT("Persisted data is %d bytes"), savesize));
    px = (ResizeSave *)QzTaskMemRealloc(px, savesize);
    if (px == NULL) {
        DbgLog((LOG_ERROR,1,TEXT("*** Out of memory")));
	return E_OUTOFMEMORY;
    }
    hr = pStream->Read(&(px->x), savesize - savesize1, 0);
    if(FAILED(hr)) {
        DbgLog((LOG_ERROR,1,TEXT("*** ReadFromStream FAILED")));
        QzTaskMemFree(px);
        return hr;
    }


    AM_MEDIA_TYPE mt = px->mt;

    put_Size(HEADER(m_mt.Format())->biHeight,HEADER(m_mt.Format())->biWidth,
							px->dwResizeFlag);

    mt.pbFormat = (BYTE *)QzTaskMemAlloc(mt.cbFormat);
    // remember, the format is after the array
    CopyMemory(mt.pbFormat, &(px->x), mt.cbFormat);

    put_MediaType(&mt);
    FreeMediaType(mt);
    QzTaskMemFree(px);
    SetDirty(FALSE);
    return S_OK;
}


// how big is our save data?
//
int CStretch::SizeMax()
{
    return sizeof(ResizeSave) + m_mt.cbFormat;
}



//
// --- IResize ---
//

HRESULT CStretch::get_Size(int *Height, int *Width, long *pdwFlag)
{
    CAutoLock cAutolock(&m_csFilter);

    CheckPointer(Height,E_POINTER);
    CheckPointer(Width,E_POINTER);

    *Height = HEADER(m_mt.Format())->biHeight;
    *Width = HEADER(m_mt.Format())->biWidth;
    *pdwFlag= m_dwResizeFlag;

    return NOERROR;

}

HRESULT CStretch::get_InputSize( int * Height, int * Width )
{
    CAutoLock Lock( &m_csFilter );

    CheckPointer( Height, E_POINTER );
    CheckPointer( Width, E_POINTER );

    if( !m_mtIn.Format( ) )
    {
        return E_POINTER;
    }

    *Height = HEADER( m_mtIn.Format( ) )->biHeight;
    *Width = HEADER( m_mtIn.Format( ) )->biWidth;

    return NOERROR;
}

HRESULT CStretch::put_Size(int Height, int Width, long dwFlag)
{
    CAutoLock cAutolock(&m_csFilter);

    // only do the check if the sizes differ
    //
    if( HEADER(m_mt.Format())->biHeight != Height ||
        HEADER(m_mt.Format())->biWidth != Width )
    {
        if (m_pOutput && m_pOutput->IsConnected())
        {
            // must succeed
            m_pGraph->Reconnect( m_pOutput );
        }

        HEADER(m_mt.Format())->biHeight = Height;
        HEADER(m_mt.Format())->biWidth = Width;
        HEADER(m_mt.Format())->biSizeImage = DIBSIZE(*HEADER(m_mt.Format()));
    }

    m_dwResizeFlag  = dwFlag;

    return NOERROR;

}


HRESULT CStretch::get_MediaType(AM_MEDIA_TYPE *pmt)
{
    CAutoLock cAutolock(&m_csFilter);
    CheckPointer(pmt, E_POINTER);
    CopyMediaType(pmt, &m_mt);
    return NOERROR;

}


HRESULT CStretch::put_MediaType(const AM_MEDIA_TYPE *pmt)
{
    CAutoLock cAutolock(&m_csFilter);
    if (m_pInput && m_pInput->IsConnected())
	return VFW_E_ALREADY_CONNECTED;
    if (m_pOutput && m_pOutput->IsConnected())
	return VFW_E_ALREADY_CONNECTED;
    // anything but uncompressed VIDEOINFO is not allowed in this filter
    if (pmt->majortype != MEDIATYPE_Video ||
		pmt->formattype != FORMAT_VideoInfo ||
		pmt->lSampleSize == 0) {
	return VFW_E_INVALID_MEDIA_TYPE;
    }

    FreeMediaType(m_mt);
    CopyMediaType(&m_mt, pmt);
    return NOERROR;

    // Reconnect if this is allowed to change when connected
}




HRESULT CStretch::InternalPartialCheckMediaTypes(const CMediaType *mt1, const CMediaType *mt2)

  { // InternalPartialCheckMediaTypes //

    if (!IsEqualGUID(*mt1->Type(), *mt2->Type()))
      return E_FAIL;

    if (!IsEqualGUID(*mt1->Subtype(), *mt2->Subtype()))
      return E_FAIL;

    if (*mt1->FormatType() != *mt2->FormatType())
      return E_FAIL;

    LPBITMAPINFOHEADER lpbi1 = HEADER(mt1->Format());
    LPBITMAPINFOHEADER lpbi2 = HEADER(mt2->Format());

#if 0	// COCO uses BI_BITFIELDS for 555!
    if (lpbi1->biCompression != lpbi2->biCompression)
      return E_FAIL;
#endif

    if (lpbi1->biBitCount != lpbi2->biBitCount)
      return E_FAIL;

    return S_OK;

  } // InternalPartialCheckMediaTypes //





// Create our filter's preferred media type (RGB32, DEFAULT HEIGHT x DEF WIDTH)
// Lifted the code from ..\switch (with slight modification)
void CStretch::CreatePreferredMediaType (CMediaType *pmt)

  { // CreatePreferredMediaType //

    //ZeroMemory(pmt, sizeof(AM_MEDIA_TYPE));

    pmt->majortype = MEDIATYPE_Video;
    pmt->subtype = MEDIASUBTYPE_RGB32;
    pmt->formattype = FORMAT_VideoInfo;
    pmt->bFixedSizeSamples = TRUE;
    pmt->bTemporalCompression = FALSE;
    pmt->pbFormat = (BYTE *)QzTaskMemAlloc( sizeof(VIDEOINFOHEADER) );
    pmt->cbFormat = sizeof( VIDEOINFOHEADER );

    ZeroMemory(pmt->pbFormat, pmt->cbFormat);

    VIDEOINFOHEADER * pVI = (VIDEOINFOHEADER*) pmt->pbFormat;
    LPBITMAPINFOHEADER lpbi = &pVI->bmiHeader;

    lpbi->biSize = sizeof(BITMAPINFOHEADER);
    lpbi->biCompression = BI_RGB;
    lpbi->biBitCount = 32;
    lpbi->biWidth = DEFAULT_WIDTH;
    lpbi->biHeight = DEFAULT_HEIGHT;
    lpbi->biPlanes = 1;
    lpbi->biSizeImage = DIBSIZE(*lpbi);

    pmt->lSampleSize = DIBSIZE(*lpbi);
  } // CreatePreferredMediaType //

CStretchInputPin::CStretchInputPin(
    TCHAR              * pObjectName,
    CStretch 	       * pFilter,
    HRESULT            * phr,
    LPCWSTR              pPinName) :

    CTransformInputPin(pObjectName, pFilter, phr, pPinName)
{
}

CStretchInputPin::~CStretchInputPin()
{
};


// speed up intelligent connect INFINITELY by providing a VIDEO type here.
// DO NOT offer a fully specified type, that would connect us with that type,
// not the upstream filter's prefered type.  Then when the render engine
// disconnects this filter, and connects the upstream guy to somebody else,
// assuming he'll get the same type, he won't!  And graph building will fail
//
HRESULT CStretchInputPin::GetMediaType(int iPosition, CMediaType *pMediaType)
{
    ASSERT(iPosition >= 0);
    if (iPosition > 0) {
	return VFW_S_NO_MORE_ITEMS;
    }

    pMediaType->SetType(&MEDIATYPE_Video);
    return NOERROR;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\resize\stretch.h ===
//==========================================================================;
//
//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
//  PURPOSE.
//
//  Copyright (c) 1992 - 1999  Microsoft Corporation.  All Rights Reserved.
//
//--------------------------------------------------------------------------;

// Stretch Filter Object

extern const AMOVIESETUP_FILTER sudStretchFilter;

class CStretch;
class CStretchInputPin;
class CResizePropertyPage;

class CStretch : public CTransformFilter, public ISpecifyPropertyPages,
					public IResize, public CPersistStream
{

public:

    DECLARE_IUNKNOWN;

    static CUnknown *CreateInstance(LPUNKNOWN punk, HRESULT *phr);

    HRESULT Transform(IMediaSample *pIn, IMediaSample *pOut);
    HRESULT CheckInputType(const CMediaType *mtIn);
    HRESULT CheckTransform(const CMediaType *mtIn, const CMediaType *mtOut);
    HRESULT DecideBufferSize(IMemAllocator *pAlloc,ALLOCATOR_PROPERTIES *pProperties);
    HRESULT GetMediaType(int iPosition, CMediaType *pMediaType);
    HRESULT SetMediaType(PIN_DIRECTION direction,const CMediaType *pmt);
    HRESULT BreakConnect(PIN_DIRECTION dir);

    CBasePin *GetPin(int);

    // Reveal our property interface
    STDMETHODIMP NonDelegatingQueryInterface (REFIID, void **);

    // ISpecifyPropertyPages
    STDMETHODIMP GetPages (CAUUID *);

    // IResize
    STDMETHODIMP get_Size(int *piHeight, int *piWidth, long *dwFlag);
    STDMETHODIMP get_InputSize(int *piHeight, int *piWidth);
    STDMETHODIMP put_Size(int iHeight, int iWidth, long dwFlag);
    STDMETHODIMP get_MediaType(AM_MEDIA_TYPE *pmt);
    STDMETHODIMP put_MediaType(const AM_MEDIA_TYPE *pmt);

    // CPersistStream
    HRESULT WriteToStream(IStream *pStream);
    HRESULT ReadFromStream(IStream *pStream);
    STDMETHODIMP GetClassID(CLSID *pClsid);
    int SizeMax();

protected:

    CStretch(LPUNKNOWN punk, HRESULT *phr);
    ~CStretch();

    CCritSec m_StretchLock;             // Internal play critical section
    CMediaType m_mtIn;                  // Source filter media type
    CMediaType m_mtOut;                 // Output connection media type
    const long m_lBufferRequest;        // Number of buffers to request

    //stretch function
    void ResizeRGB(BITMAPINFOHEADER *pbiSrc,	    //Src's BitMapInFoHeader
		  const unsigned char * dibBits,    //Src bits
    		  BITMAPINFOHEADER *pbiDst,	    //Dst's BitMapInFoHeader
		  unsigned char *pFrame,    //Dst bits
		  int iNewWidth,	    //new W in pixel
		  int iNewHeight);	    //new H in pixel

    CMediaType m_mt;

    long m_dwResizeFlag;	    //crop, preserve ratio
    // Helper methods
    HRESULT InternalPartialCheckMediaTypes (const CMediaType *mt1, const CMediaType *mt2);
    void CreatePreferredMediaType (CMediaType *mt);

    friend class CResizePropertyPage;
    friend class CStretchInputPin;

};

class CResizePropertyPage : public CBasePropertyPage
{

    public:

      static CUnknown *CreateInstance(LPUNKNOWN lpunk, HRESULT *phr);

    private:

      INT_PTR OnReceiveMessage (HWND, UINT ,WPARAM ,LPARAM);

      HRESULT OnConnect (IUnknown *);
      HRESULT OnDisconnect (void);
      HRESULT OnActivate (void);
      HRESULT OnDeactivate (void);
      HRESULT OnApplyChanges (void);

      void SetDirty (void);

      CResizePropertyPage (LPUNKNOWN, HRESULT *);

      void GetControlValues (void);

      BOOL m_bInitialized;

      IResize *m_pirs;

      // Temporary holding until OK/Apply
      int m_ResizedHeight;
      int m_ResizedWidth;
      long m_dwResizeFlag;


};

class CStretchInputPin : public CTransformInputPin
{
    public:

        CStretchInputPin(
            TCHAR              * pObjectName,
            CStretch	       * pFilter,
            HRESULT            * phr,
            LPCWSTR              pPinName);

        ~CStretchInputPin();

	// speed up intelligent connect INFINITELY by providing a type here!
	HRESULT GetMediaType(int iPosition, CMediaType *pMediaType);

    private:

};
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\shotb\resource.h ===
// Copyright (c) 1999  Microsoft Corporation.  All Rights Reserved.
//{{NO_DEPENDENCIES}}
// Microsoft Developer Studio generated include file.
// Used by shotb.rc
//
#define IDS_TITLE                       1
#define IDD_DIALOG                      101
#define IDC_FILENAME                    1000
#define IDC_BINY                        1002
#define IDC_BINU                        1003
#define IDC_BINV                        1004
#define IDC_SCALE                       1005
#define IDC_DURATION                    1006

// Next default values for new objects
// 
#ifdef APSTUDIO_INVOKED
#ifndef APSTUDIO_READONLY_SYMBOLS
#define _APS_NEXT_RESOURCE_VALUE        102
#define _APS_NEXT_COMMAND_VALUE         40001
#define _APS_NEXT_CONTROL_VALUE         1006
#define _APS_NEXT_SYMED_VALUE           101
#endif
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\shotb\setup.cpp ===
// Copyright (c) 1999  Microsoft Corporation.  All Rights Reserved.
#include "stdafx.h"
#include <streams.h>
#include <atlbase.h>
#include "ishotb.h"
#include "shotb.h"
#include "ishotb_i.c"
#include <atlimpl.cpp>

// define this struct for Registry purposes
const AMOVIESETUP_MEDIATYPE sudPinTypes =
{
    &MEDIATYPE_Video,   // Major CLSID
    &MEDIASUBTYPE_RGB24  // Minor type
};

// define this struct for Registry purposes
const AMOVIESETUP_PIN psudPins[] =
{
    { L"Input",            // Pin's string name - this pin is what pulls the filter into the graph
      FALSE,                // Is it rendered
      FALSE,                // Is it an output
      FALSE,                // Allowed none
      FALSE,                // Allowed many
      &CLSID_NULL,          // Connects to filter
      NULL,                 // Connects to pin
      1,                    // Number of types
      &sudPinTypes },	    // Pin information
    { L"Output",            // Pin's string name
      FALSE,                // Is it rendered
      TRUE,                 // Is it an output
      FALSE,                // Allowed none
      FALSE,                // Allowed many
      &CLSID_NULL,          // Connects to filter
      L"Input",             // Connects to pin
      1,                    // Number of types
      &sudPinTypes }        // Pin information
};

// define this struct for Registry purposes
const AMOVIESETUP_FILTER sudFilter =
{
    &CLSID_ShotBoundaryDet,         // CLSID of filter
    L"NewShotBoundaryDet",                  // Filter's name
    MERIT_DO_NOT_USE,               // Filter merit
    2,                              // Number of pins
    psudPins                        // Pin information
};

// define this for Registry purposes
CFactoryTemplate g_Templates[] = 
{
    { L"NewShotBoundaryDet", &CLSID_ShotBoundaryDet, CShotBoundaryFilter::CreateInstance, NULL, &sudFilter },
    { L"NewShotBoundaryPP", &CLSID_ShotBoundaryPP, CShotPP::CreateInstance, NULL, NULL }
};
int g_cTemplates = sizeof(g_Templates) / sizeof(g_Templates[0]);

STDAPI DllRegisterServer()
{
    return AMovieDllRegisterServer2( TRUE );
}

STDAPI DllUnregisterServer()
{
    return AMovieDllRegisterServer2( FALSE );
}

CUnknown * WINAPI CShotBoundaryFilter::CreateInstance( LPUNKNOWN pUnk, HRESULT *phr )
{
    return new CShotBoundaryFilter( NAME( "NewShotBoundaryDet" ), pUnk, phr );
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\shotb\shotb.h ===
// Copyright (c) 1999  Microsoft Corporation.  All Rights Reserved.
#ifndef __SHOTB_H__
#define __SHOTB_H__

#include "research.h"

class CShotBoundaryFilter 
    : public CTransInPlaceFilter
    , public CShotBoundary
    , public IShotBoundaryDet
    , public ISpecifyPropertyPages
{
    CCritSec m_Lock;
    BYTE * m_pPrevBuff;
    BYTE * m_pCurrBuff;
    long m_nWidth;
    long m_nHeight;
    CMediaType mt_Accepted;
    HANDLE m_hFile;
    CComPtr< IStream > m_pStream;
    WCHAR m_wFilename[_MAX_PATH];
    CComPtr< IShotBoundaryDetCB > m_pCallback;
    int m_nBinY;
    int m_nBinU;
    int m_nBinV;
    double m_dScale;
    double m_dDuration;

    BYTE m_RecDate[4]; // hh:mm:ss,ff
    BYTE m_RecTime[4]; // hh:mm:ss,ff
    BOOL GetDVDecision( BYTE *pBuffer);
    
    // private constructor/destructor
    CShotBoundaryFilter( TCHAR * tszName, IUnknown * pUnk, HRESULT * pHr );
    ~CShotBoundaryFilter( );

public:
    // needed to create filter
    static CUnknown *WINAPI CreateInstance( IUnknown * pUnk, HRESULT * pHr );

    //expose our interfaces
    STDMETHODIMP NonDelegatingQueryInterface(REFIID riid, void ** ppv);

    // default unknown funcs
    DECLARE_IUNKNOWN;

    // Overrides the PURE virtual Transform of CTransInPlaceFilter base class
    HRESULT Transform( IMediaSample *pSample );

    // override to set what media type we accept
    HRESULT CheckInputType(const CMediaType* mtIn);

    // PURE
    HRESULT SetMediaType( PIN_DIRECTION Dir, const CMediaType * mtIn );

    // override quality messages so we can prevent them
    HRESULT AlterQuality( Quality q );

    // record a shot boundary to the file
    //
    HRESULT RecordShotToFile( REFERENCE_TIME Time, long Value );

    // ISpecifyPropertyPages
    STDMETHODIMP GetPages( CAUUID * );

    // IShotBoundaryDet
    STDMETHODIMP SetWriteFile( BSTR Filename );
    STDMETHODIMP GetWriteFile( BSTR * pFilename );
    STDMETHODIMP SetWriteStream( IStream * pStream );
    STDMETHODIMP Reset( );
    STDMETHODIMP SetCallback( IShotBoundaryDetCB * );
    STDMETHODIMP SetParams( int BinY, int BinU, int BinV, double scale, double duration );
    STDMETHODIMP GetParams( int * pBinY, int * pBinU, int * pBinV, double * pScale, double * pDuration );
};

class CShotPP
    : public CBasePropertyPage
{
    BOOL m_bInitialized;
    IShotBoundaryDet * m_pFilter;

    BOOL OnReceiveMessage( HWND h, UINT msg, WPARAM wParam, LPARAM lParam );

    HRESULT OnConnect( IUnknown * );
    HRESULT OnDisconnect( );
    HRESULT OnActivate( );
    HRESULT OnDeactivate( );
    HRESULT OnApplyChanges( );
    void    SetDirty( );

    CShotPP( IUnknown * pUnk, HRESULT * pHR );

public:

    static CUnknown *CreateInstance( IUnknown * pUnk, HRESULT * pHR );
};

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\shotb\shotb.cpp ===
// Copyright (c) 1999  Microsoft Corporation.  All Rights Reserved.
#include <streams.h>
#include <atlbase.h>
#include "ishotb.h"
#include "shotb.h"

bool ConvTableSet = false;
struct {
    BYTE Y;
    BYTE U;
    BYTE V;
} Table[32768];
__int16 T5652555[65536];

CShotBoundaryFilter::CShotBoundaryFilter( TCHAR *tszName, IUnknown * pUnk, HRESULT * pHr )
    : CTransInPlaceFilter( tszName, pUnk, CLSID_ShotBoundaryDet, pHr )
    , m_pPrevBuff( NULL )
    , m_pCurrBuff( NULL )
    , m_hFile( NULL )
{ 
    SetParams( 4, 8, 8, 5.0, 15 );
    m_wFilename[0] = 0;
    m_wFilename[1] = 0;

    if( !ConvTableSet )
    {
        ConvTableSet = true;
        for( int i = 0 ; i < 32768 ; i++ )
        {
            double Red = i >> 7;
            double Green = (i >> 2) & 0xF8;
            double Blue = (i & 0x1F) << 3;

            //  Keep V in range
            double Normalize = 128.0 / 158.0;
            Table[i].Y = (BYTE) (LONG) (Normalize * (0.299*Red+0.587*Green+0.114*Blue));
            Table[i].U = (BYTE) (128 + (LONG) (Normalize * (-0.147*Red-0.289*Green+0.436*Blue)));
            Table[i].V = (BYTE) (128 + (LONG) (Normalize * (0.615*Red-0.515*Green-0.100*Blue)));
        }
        for( i = 0 ; i < 65536 ; i++ )
        {
            long j = ( i & 0x1F ) | ( ( i >> 1 ) & ~0x1F );
            T5652555[i] = (__int16) j;
        }
    }

    // !!!
    // default to writing to C drive. this is ugly!
//    SetWriteFile( L"c:\\shotboundary.txt" );
}

CShotBoundaryFilter::~CShotBoundaryFilter( )
{
    if( m_pPrevBuff )
    {
        delete [] m_pPrevBuff;
    }
    if( m_pCurrBuff )
    {
        delete [] m_pCurrBuff;
    }
    Reset( );
}

HRESULT CShotBoundaryFilter::NonDelegatingQueryInterface( REFIID riid, void ** ppv )
{
    if( riid == IID_IShotBoundaryDet )
    {
        return GetInterface( (IShotBoundaryDet*) this, ppv );
    }
    if( riid == IID_ISpecifyPropertyPages )
    {
        return GetInterface( (ISpecifyPropertyPages*) this, ppv );
    }
    return CTransInPlaceFilter::NonDelegatingQueryInterface( riid, ppv );
}

// --- ISpecifyPropertyPages ---

STDMETHODIMP CShotBoundaryFilter::GetPages (CAUUID *pPages)
{
    pPages->cElems = 1;
    pPages->pElems = (GUID*) CoTaskMemAlloc( sizeof(GUID) );

    if( pPages->pElems == NULL ) 
    {
        return E_OUTOFMEMORY;
    }

    *(pPages->pElems) = CLSID_ShotBoundaryPP;

    return NOERROR;
}

HRESULT CShotBoundaryFilter::CheckInputType( const CMediaType * pType )
{
    if( *pType->Type( ) != MEDIATYPE_Video )
    {
        return VFW_E_INVALIDMEDIATYPE;
    }

    bool Okay = false;

    if( *pType->Subtype( ) == MEDIASUBTYPE_YUY2 )
    {
        Okay = true;
        goto done;
    }
    if( *pType->Subtype( ) == MEDIASUBTYPE_YVYU )
    {
        Okay = true;
        goto done;
    }
    if( *pType->Subtype( ) == MEDIASUBTYPE_UYVY )
    {
        Okay = true;
        goto done;
    }
    if( *pType->Subtype( ) == MEDIASUBTYPE_RGB24 )
    {
        Okay = true;
        goto done;
    }
    if( *pType->Subtype( ) == MEDIASUBTYPE_RGB555 )
    {
        Okay = true;
        goto done;
    }
    if( *pType->Subtype( ) == MEDIASUBTYPE_RGB565 )
    {
        Okay = true;
        goto done;
    }

    if( *pType->Subtype( ) == MEDIASUBTYPE_dvsd ||
//      *pType->Subtype( ) == MEDIASUBTYPE_dvc ||
        *pType->Subtype( ) == MEDIASUBTYPE_dvhd ||
        *pType->Subtype( ) == MEDIASUBTYPE_dvsl )
    {
        Okay = true;
        goto done;
    }
done:

    if( !Okay )
    {
        return VFW_E_INVALIDMEDIATYPE;
    }

    // make sure it's a video info header
    //
    if( *(pType->FormatType( )) != FORMAT_VideoInfo )
    {
        return VFW_E_INVALIDMEDIATYPE;
    }

    VIDEOINFOHEADER * vih = (VIDEOINFOHEADER*) pType->Format( );

    return NOERROR;
}

HRESULT CShotBoundaryFilter::SetMediaType( PIN_DIRECTION Dir, const CMediaType * pType )
{
    if( Dir != PINDIR_INPUT )
    {
        return NOERROR;
    }

    VIDEOINFOHEADER * vih = (VIDEOINFOHEADER*) pType->Format( );
    long Width = vih->bmiHeader.biWidth;
    long Height = vih->bmiHeader.biHeight;
    long Size = WIDTHBYTES( Width * 16) * Height;
    m_nWidth = Width;
    m_nHeight = Height;
    
    if( m_pPrevBuff )
    {
        delete [] m_pPrevBuff;
    }
    if( m_pCurrBuff )
    {
        delete [] m_pCurrBuff;
    }

    m_pPrevBuff = new BYTE[ Size ];
    m_pCurrBuff = new BYTE[ Size ];

    SetDimension( Width, Height );

    return NOERROR;
}

#define DIFBLK_SIZE 12000
BOOL CShotBoundaryFilter::GetDVDecision( BYTE *pBuffer)
{
    PUCHAR pDIFBlk;
    PUCHAR pS0, pS1, pSID0;
    ULONG i, j;
    BOOL bGetRecDate;
    BOOL bGetRecTime;
    DWORD AbsTrackNumber;
    PUCHAR pSID1;
    BYTE  Timecode2[4]; // hh:mm:ss,ff
    BYTE  RecDate[4]; // hh:mm:ss,ff
    BYTE  RecTime[4]; // hh:mm:ss,ff

    
    bGetRecTime = TRUE;
    bGetRecDate = TRUE;

    ULONG nDIF = 10 /* DVFormatInfoTable[pDevExt->VideoFormatIndex].ulNumOfDIFSequences */;

    pDIFBlk = pBuffer + nDIF * DIFBLK_SIZE / 2;

    //
    // REC Data (VRD) and Time (VRT) on in the 2nd half oa a video frame
    // 
    for(i=nDIF / 2; i < nDIF; i++) {

        pS0 = pDIFBlk + 80;
        pS1 = pS0     + 80;

        //
        // Find SC0 and SC1. See Table 36 (P.111) of the Blue Book
        //
        // SC0/1: ID(0,1,2), Data (3,50), Reserved(51-79)
        //     SC0:Data: SSYB0(3..10), SSYB1(11..18), SSYB2(19..26), SSYB3(27..34), SSYB4(35..42),   SSYB5(43..50)
        //     SC1:Data: SSYB6(3..10), SSYB7(11..18), SSYB8(19..26), SSYB9(27..34), SSYB10(35..42), SSYB11(43..50)
        //         SSYBx(SubCodeId0, SubcodeID1, Reserved, Pack(3,4,5,6,7))
        //
        //  TTC are in the 1st half: SSYB0..11 (every)
        //  TTC are in the 2nd half: SSYB0,3,6,9
        //  VRD are in the 2nd half of a video frame, SSYB1,4,7,10
        //  VRT are in the 2nd half of a video frame, SSYB2,5,8,11
        //

        // Subcode data ?
        if ((pS0[0] & 0xe0) == 0x20 && (pS1[0] & 0xe0) == 0x20) {

            //
            // RecDate: VRD
            //
            if(bGetRecDate) {
                // go thru 6 sync blocks (8 bytes per block) per Subcode; idx 1(SSYB1),4(SSYB4) for SC0
                for(j=0; j <= 5 ; j++) {
                    if(j == 1 || j == 4) {
                        // 0x62== RecDate
                        if(pS0[3+3+j*8] == 0x62) {
                            RecDate[0] = pS0[3+3+j*8+4]&0x3f;
                            RecDate[1] = pS0[3+3+j*8+3]&0x7f;
                            RecDate[2] = pS0[3+3+j*8+2]&0x7f;
                            RecDate[3] = pS0[3+3+j*8+1]&0x3f;
                            bGetRecDate = FALSE;
                            break;
                        }
                    }
                }
            }

            if(bGetRecDate) {
                // go thru 6 sync blocks (8 bytes per block) per Subcode; idx 1 (SSYB7),4(SSYB10) for SC1
                for(j=0; j <= 5; j++) {
                    if(j == 1 || j == 4) {
                        // 0x62== RecDate
                        if(pS1[3+3+j*8] == 0x62) {
                            RecDate[0] = pS1[3+3+j*8+4]&0x3f;
                            RecDate[1] = pS1[3+3+j*8+3]&0x7f;
                            RecDate[2] = pS1[3+3+j*8+2]&0x7f;
                            RecDate[3] = pS1[3+3+j*8+1]&0x3f;
                            bGetRecDate = FALSE;
                            break;
                        }
                    }
               }
            }

            //
            // RecTime: VRT
            //
            if(bGetRecTime) {
                // go thru 6 sync blocks (8 bytes per block) per Subcode; idx 2(SSYB2),5(SSYB5) for SC0
                for(j=0; j <= 5 ; j++) {
                    if(j == 2 || j == 5) {
                        // 0x63== RecTime
                        if(pS0[3+3+j*8] == 0x63) {
                            RecTime[0] = pS0[3+3+j*8+4]&0x3f;
                            RecTime[1] = pS0[3+3+j*8+3]&0x7f;
                            RecTime[2] = pS0[3+3+j*8+2]&0x7f;
                            RecTime[3] = pS0[3+3+j*8+1]&0x3f;
                            bGetRecTime = FALSE;
                            break;
                        }
                    }
                }
            }

            if(bGetRecTime) {
                // go thru 6 sync blocks (8 bytes per block) per Subcode; idx 2 (SSYB8),5(SSYB11) for SC1
                for(j=0; j <= 5; j++) {
                    if(j == 2 || j == 5) {
                        // 0x63== RecTime
                        if(pS1[3+3+j*8] == 0x63) {
                            RecTime[0] = pS1[3+3+j*8+4]&0x3f;
                            RecTime[1] = pS1[3+3+j*8+3]&0x7f;
                            RecTime[2] = pS1[3+3+j*8+2]&0x7f;
                            RecTime[3] = pS1[3+3+j*8+1]&0x3f;
                            bGetRecTime = FALSE;
                            break;
                        }
                    }
                }
            }

        }

        if (!bGetRecDate && !bGetRecTime)
            break;
        
        pDIFBlk += DIFBLK_SIZE;  // Get to next block         
    }

    BOOL bDifferent = FALSE;

#define FROMBCD(x) (((x) & 0x0f) + (((x) & 0xf0) >> 4) * 10)
    if (/* !bGetRecDate || */ !bGetRecTime) {
        ULONG oldsecs = FROMBCD(m_RecTime[0]) * 3600 + FROMBCD(m_RecTime[1]) * 60 + FROMBCD(m_RecTime[2]); 
        ULONG newsecs = FROMBCD(RecTime[0]) * 3600 + FROMBCD(RecTime[1]) * 60 + FROMBCD(RecTime[2]);

        if (newsecs - oldsecs > 1) {
            DbgLog((LOG_TRACE, 1, "Discontinuity of %d seconds found", newsecs - oldsecs));
            bDifferent = TRUE;
        }
    }

    if (!bGetRecDate) {
        CopyMemory(m_RecDate, RecDate, sizeof(RecDate));
        DbgLog((LOG_TRACE, 1, "Got recDate: (%x, %x, %x, %x) = %d-%x-%x",
                RecDate[0], RecDate[1], RecDate[2], RecDate[3], 1980 + FROMBCD(RecDate[0]), RecDate[1]&0x0f, RecDate[2]&0x1f));
    } else {
        DbgLog((LOG_TRACE, 2, "didn't find date"));
    }
    
    if (!bGetRecTime) {
        CopyMemory(m_RecTime, RecTime, sizeof(RecTime));
        DbgLog((LOG_TRACE, 1, "Got recTime: (%x, %x, %x, %x)",
                RecTime[0], RecTime[1], RecTime[2], RecTime[3]));
    } else {
        DbgLog((LOG_TRACE, 2, "didn't find time"));
    }
    
    return bDifferent;
}


HRESULT CShotBoundaryFilter::Transform( IMediaSample * pSample )
{
    CAutoLock Lock( &m_Lock );

    BYTE * pBuffer = NULL;
    pSample->GetPointer( &pBuffer );
    long len = m_nWidth * m_nHeight;
    BYTE * pYUV = pBuffer;

    if( *m_pInput->CurrentMediaType().Subtype( ) == MEDIASUBTYPE_RGB24 )
    {
        pYUV = m_pCurrBuff;

        for( int i = len - 1 ; i >= 0 ; i-=2 )
        {
            LONG i16 = pBuffer[2] << 7;
            i16 &= 0x7C00;
            i16 += pBuffer[1] << 2;
            i16 &= 0x7FE0;
            i16 += pBuffer[0] >> 3;
            pBuffer += 3;
            ASSERT(i16<65536);
            *pYUV++ = Table[i16].U;
            *pYUV++ = Table[i16].Y;
            i16 = pBuffer[2] << 7;
            i16 &= 0x7C00;
            i16 += pBuffer[1] << 2;
            i16 &= 0x7FE0;
            i16 += pBuffer[0] >> 3;
            pBuffer += 3;
            ASSERT(i16<65536);
            *pYUV++ = Table[i16].V;
            *pYUV++ = Table[i16].Y;
        }

        pYUV = m_pCurrBuff;
    } 
    else if( *m_pInput->CurrentMediaType().Subtype( ) == MEDIASUBTYPE_RGB555 )
    {
        pYUV = m_pCurrBuff;

        for( int i = len - 1 ; i >= 0 ; i-=2 )
        {
            long i16;
            i16 = *(WORD *)pBuffer;
            pBuffer += 2;
            ASSERT(i16<65536);
            *pYUV++ = Table[i16].U;
            *pYUV++ = Table[i16].Y;
            i16 = *(WORD *)pBuffer;
            pBuffer += 2;
            ASSERT(i16<65536);
            *pYUV++ = Table[i16].V;
            *pYUV++ = Table[i16].Y;
        }

        pYUV = m_pCurrBuff;
    }
    else if( *m_pInput->CurrentMediaType().Subtype( ) == MEDIASUBTYPE_RGB565 )
    {
        pYUV = m_pCurrBuff;

        for( int i = len - 1 ; i >= 0 ; i-=2 )
        {
            long i16;
            i16 = *(WORD *)pBuffer;
            pBuffer += 2;
            i16 = T5652555[i16];
            ASSERT(i16<65536);
            *pYUV++ = Table[i16].U;
            *pYUV++ = Table[i16].Y;
            i16 = *(WORD *)pBuffer;
            pBuffer += 2;
            i16 = T5652555[i16];
            ASSERT(i16<65536);
            *pYUV++ = Table[i16].V;
            *pYUV++ = Table[i16].Y;
        }

        pYUV = m_pCurrBuff;
    } else if( *m_pInput->CurrentMediaType().Subtype( ) == MEDIASUBTYPE_YUY2 )
    {
        // do nothing
    }
    else if( *m_pInput->CurrentMediaType().Subtype( ) == MEDIASUBTYPE_YVYU )
    {
        // do nothing
    }
    else if( *m_pInput->CurrentMediaType().Subtype( ) == MEDIASUBTYPE_UYVY )
    {
        // do nothing
    }
    else // must be DV
    {
        REFERENCE_TIME StartTime = 0;
        REFERENCE_TIME StopTime = 0;
        pSample->GetTime( &StartTime, &StopTime );

        BOOL Boundary = GetDVDecision( pBuffer );
        if( Boundary )
        {
            RecordShotToFile( StartTime, 1 );
        }

        return NOERROR;
    }

    REFERENCE_TIME StartTime = 0;
    REFERENCE_TIME StopTime = 0;
    pSample->GetTime( &StartTime, &StopTime );

    int Boundary;
    if( *m_pInput->CurrentMediaType().Subtype( ) == MEDIASUBTYPE_UYVY )
    {
        Boundary = GetDecision( pYUV, &StartTime, 1, 0, 2 );
    }
    else if( *m_pInput->CurrentMediaType().Subtype( ) == MEDIASUBTYPE_YUY2 )
    {
        Boundary = GetDecision( pYUV, &StartTime, 0, 1, 3 );
    }
    else if( *m_pInput->CurrentMediaType().Subtype( ) == MEDIASUBTYPE_YVYU )
    {
        Boundary = GetDecision( pYUV, &StartTime, 0, 3, 1 );
    }
    else
    {
        // if it's been converted, it's UYVY
        //
        Boundary = GetDecision( pYUV, &StartTime, 1, 0, 2 );
    }

    if( Boundary <= 0 )
    {
        RecordShotToFile( StartTime, Boundary );
    }

    return NOERROR;
}

HRESULT CShotBoundaryFilter::AlterQuality( Quality q )
{
    return NOERROR;
}

STDMETHODIMP CShotBoundaryFilter::SetWriteFile( BSTR Filename )
{
    CAutoLock Lock( &m_Lock );

    if( wcslen( Filename ) > _MAX_PATH )
    {
        return E_INVALIDARG;
    }

    if( m_pStream || m_hFile )
    {
        Reset( );
    }
    USES_CONVERSION;
    TCHAR * tName = W2T( Filename );
    m_hFile = CreateFile( tName, GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, 0, NULL );
    if( m_hFile == INVALID_HANDLE_VALUE )
    {
        m_hFile = NULL;
        return GetLastError( );
    }
    wcscpy( m_wFilename, Filename );

    return NOERROR;
}

STDMETHODIMP CShotBoundaryFilter::GetWriteFile( BSTR * pFilename )
{
    CAutoLock Lock( &m_Lock );

    if( !m_wFilename[0] )
    {
        return E_INVALIDARG;
    }

    pFilename = SysAllocString( m_wFilename );
    HRESULT hr = pFilename ? NOERROR : E_OUTOFMEMORY;
    return hr;
}

STDMETHODIMP CShotBoundaryFilter::SetWriteStream( IStream * pStream )
{
    CAutoLock Lock( &m_Lock );

    if( m_pStream || m_hFile )
    {
        Reset( );
    }
    if( !pStream )
    {
        return E_POINTER;
    }

    m_pStream.Release( );
    m_pStream = pStream;

    return NOERROR;
}

STDMETHODIMP CShotBoundaryFilter::Reset( )
{
    CAutoLock Lock( &m_Lock );

    if( m_pStream )
    {
        m_pStream->Commit( 0 );
        m_pStream.Release( );
    }
    if( m_hFile )
    {
        CloseHandle( m_hFile );
        m_hFile = NULL;
    }
    m_wFilename[0] = 0;
    m_wFilename[1] = 0;

    return NOERROR;
}

HRESULT CShotBoundaryFilter::RecordShotToFile( REFERENCE_TIME Time, long Value )
{
    HRESULT hr = 0;
    char pBuffer[256];
    DWORD Written = 0;
    long HiLong = long( Time >> 32 );
    long LoLong = long( Time & 0xFFFF );
    wsprintf( pBuffer, "%8.8lx%8.8lx %ld\r\n", HiLong, LoLong, Value );

    if( m_pCallback )
    {
        m_pCallback->LogShot( double( Time ) / double( UNITS ), Value );
    }

    if( m_hFile )
    {
        BOOL Worked = WriteFile( m_hFile, pBuffer, strlen( pBuffer ), &Written, NULL );
        if( !Worked )
        {
            hr = GetLastError( );
        }
    }
    if( m_pStream )
    {
        hr = m_pStream->Write( pBuffer, strlen( pBuffer ), NULL );
    }

    return hr;
}

STDMETHODIMP CShotBoundaryFilter::SetCallback( IShotBoundaryDetCB * p )
{
    CAutoLock Lock( &m_Lock );
    m_pCallback = p;
    return NOERROR;
}

STDMETHODIMP CShotBoundaryFilter::SetParams( int BinY, int BinU, int BinV, double scale, double duration )
{
    while( 256 % BinY != 0 )
    {
        BinY++;
    }
    while( 256 % BinU != 0 )
    {
        BinU++;
    }
    while( 256 % BinV != 0 )
    {
        BinV++;
    }
    m_nBinY = BinY;
    m_nBinU = BinU;
    m_nBinV = BinV;
    m_dScale = scale;
    m_dDuration = duration;
    SetBins( BinY, BinU, BinV );
    SetParameters( (float) scale, (float) duration );
    return NOERROR;
}

STDMETHODIMP CShotBoundaryFilter::GetParams( int * pBinY, int * pBinU, int * pBinV, double * pScale, double * pDuration )
{
    CheckPointer( pBinY, E_POINTER );
    CheckPointer( pBinU, E_POINTER );
    CheckPointer( pBinV, E_POINTER );
    CheckPointer( pScale, E_POINTER );
    CheckPointer( pDuration, E_POINTER );
    *pBinY = m_nBinY;
    *pBinU = m_nBinU;
    *pBinV = m_nBinV;
    *pScale = m_dScale;
    *pDuration = m_dDuration;
    return NOERROR;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\shotb\shotpp.cpp ===
// Copyright (c) 1999  Microsoft Corporation.  All Rights Reserved.
#include <streams.h>
#include <atlbase.h>
#include "ishotb.h"
#include "shotb.h"
#include "resource.h"
#include <stdio.h>

CUnknown *CShotPP::CreateInstance(LPUNKNOWN lpunk, HRESULT *phr) 
{ 
    CUnknown *punk = new CShotPP(lpunk, phr);

    if (NULL == punk) 
        *phr = E_OUTOFMEMORY;
    return punk;
} 

CShotPP::CShotPP( LPUNKNOWN pUnk, HRESULT *phr ) 
    : CBasePropertyPage( NAME("Frame Rate Converter Property Page"), pUnk, IDD_DIALOG, IDS_TITLE )
    , m_pFilter( NULL )
    , m_bInitialized( FALSE )
{ 
} 

void CShotPP::SetDirty()
{ 
    m_bDirty = TRUE;
    if (m_pPageSite)
        m_pPageSite->OnStatusChange(PROPPAGESTATUS_DIRTY);
} 

HRESULT CShotPP::OnActivate (void)
{ 
    m_bInitialized = TRUE;

    // fill out our UI

    // set the filename
    //
    BSTR wFilename;
    m_pFilter->GetWriteFile( &wFilename );
    USES_CONVERSION;
    TCHAR * tFilename = W2T( wFilename );
    SetDlgItemText( m_hwnd, IDC_FILENAME, tFilename );
    SysFreeString( &wFilename );

    int biny, binu, binv;
    double scale, duration;
    m_pFilter->GetParams( &biny, &binu, &binv, &scale, &duration );

    SetDlgItemInt( m_hwnd, IDC_BINY, biny, FALSE );
    SetDlgItemInt( m_hwnd, IDC_BINU, binu, FALSE );
    SetDlgItemInt( m_hwnd, IDC_BINV, binv, FALSE );
    char Float[20];
    wsprintf( Float, "%5.3f", scale );
    SetDlgItemText( m_hwnd, IDC_SCALE, Float );
    wsprintf( Float, "%5.3f", duration );
    SetDlgItemText( m_hwnd, IDC_DURATION, Float );

    return NOERROR;
} 

HRESULT CShotPP::OnDeactivate (void)
{ 
    m_bInitialized = FALSE;
    return NOERROR;
} 

BOOL CShotPP::OnReceiveMessage (HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{ 
    ASSERT( m_pFilter != NULL );

    switch(uMsg)
    { 
	case WM_COMMAND:
        {
            if( !m_bInitialized )
            {
                return CBasePropertyPage::OnReceiveMessage( hwnd, uMsg, wParam, lParam );
            }

            m_bDirty = TRUE;

            if( m_pPageSite )
            {
                m_pPageSite->OnStatusChange( PROPPAGESTATUS_DIRTY );
            }

            return TRUE;
        }

        case WM_INITDIALOG:
        {
            return TRUE;
        }

        default:
        {
            return CBasePropertyPage::OnReceiveMessage( hwnd, uMsg, wParam, lParam );
        }

    } // switch
} 

HRESULT CShotPP::OnConnect( IUnknown * pUnknown )
{ 
    m_bInitialized = FALSE;

    pUnknown->QueryInterface( IID_IShotBoundaryDet, (void **) &m_pFilter );

    return NOERROR;
} 

HRESULT CShotPP::OnDisconnect()
{ 
    m_bInitialized = FALSE;

    if( m_pFilter )
    { 
	m_pFilter->Release();
	m_pFilter = NULL;
    } 

    return NOERROR;

} 

HRESULT CShotPP::OnApplyChanges()
{ 
    ASSERT( m_pFilter != NULL );

    // send what we've got to the filter
    //
    TCHAR tFilename[_MAX_PATH];
    GetDlgItemText( m_hwnd, IDC_FILENAME, tFilename, _MAX_PATH );
    USES_CONVERSION;
    WCHAR * wFilename = T2W( tFilename );
    HRESULT hr = m_pFilter->SetWriteFile( wFilename );

    TCHAR Value[_MAX_PATH];
    GetDlgItemText( m_hwnd, IDC_SCALE, Value, _MAX_PATH );
    double scale = atoi( Value );
    GetDlgItemText( m_hwnd, IDC_DURATION, Value, _MAX_PATH );
    double duration = atoi( Value );
    int biny = GetDlgItemInt( m_hwnd, IDC_BINY, NULL, FALSE );
    int binu = GetDlgItemInt( m_hwnd, IDC_BINU, NULL, FALSE );
    int binv = GetDlgItemInt( m_hwnd, IDC_BINV, NULL, FALSE );
    if( 
        ( 256 % biny != 0 ) || 
        ( 256 % binu != 0 ) || 
        ( 256 % binv != 0 ) || 
        ( biny < 2 ) || 
        ( biny > 256 ) ||
        ( binu < 2 ) ||
        ( binu > 256 ) ||
        ( binv < 2 ) ||
        ( binv > 256 ) )
    {
        MessageBox( NULL, "Each of the bin values needs to be a multiple of 2 less than or equal to 256", "Whoops", MB_OK | MB_TASKMODAL );
        return S_FALSE;
    }
    hr = m_pFilter->SetParams( biny, biny, binv, scale, duration );

    return hr;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\shotb\stdafx.cpp ===
// Copyright (c) 1999  Microsoft Corporation.  All Rights Reserved.
// stdafx.cpp : source file that includes just the standard includes
//	shotb.pch will be the pre-compiled header
//	stdafx.obj will contain the pre-compiled type information

#include "stdafx.h"

// TODO: reference any additional headers you need in STDAFX.H
// and not in this file
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\shotb\stdafx.h ===
// Copyright (c) 1999  Microsoft Corporation.  All Rights Reserved.
// stdafx.h : include file for standard system include files,
//  or project specific include files that are used frequently, but
//      are changed infrequently
//

#if !defined(AFX_STDAFX_H__7461ADD2_117F_4674_82FA_9C936FBA471D__INCLUDED_)
#define AFX_STDAFX_H__7461ADD2_117F_4674_82FA_9C936FBA471D__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000


// Insert your headers here
#define WIN32_LEAN_AND_MEAN		// Exclude rarely-used stuff from Windows headers

#include <windows.h>
#include <streams.h>
#include <atlbase.h>
#include "ishotb.h"
#include "shotb.h"

// TODO: reference additional headers your program requires here

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_STDAFX_H__7461ADD2_117F_4674_82FA_9C936FBA471D__INCLUDED_)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\silence\resource.h ===
// Copyright (c) 1998 - 1999  Microsoft Corporation.  All Rights Reserved.
#define IDD_PROPPAGE 			400
#define IDC_RATE 			402
#define IDC_START4 			403
#define IDC_DUR 			404
#define IDC_SILENCE_NCHANNELNUM         405
#define IDC_SILENCE_NBITS               406
#define IDS_TITLE4			407
#ifndef IDC_STATIC
#define IDC_STATIC 	-1
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\render\rendeng.cpp ===
// Copyright (c) 1998 - 1999  Microsoft Corporation.  All Rights Reserved.


// DbgLog( ( LOG_TRACE, TRACE_HIGHEST, RENDENG::Took %ld to process switch X-Y hookups", zzz1 ) );

//############################################################################
/*

 Notes Section

 CACHEING

 The RE that is being used for smart compression cannot use the cache, since
 the caching code needs to know about FRC's and the like. It ALSO uses
 dynamic sources, always, for simplicity.
 
 m_bSmartCompressed === IsCompressed. They are one and the same flag

CONNECTING VIDEO PART overall skeleton
--------------------------------------
Get Video Source Count
Create the video Big Switch
Get the Timeline Group
Get the group compression info
Get the group's dynamicness info
Get track count
make a new grid
Get switch information, program it
calculate the number of switch input/output pins
set up the switch
set up the black layers
for each layer
    skip muted layers
    get embedded depth
    for each source
        skip muted source
        get source info
        ignore sources out of render range
        set up skew structure
        find the right switch input pin with the skew structure on it
        if used in SR & is dynamic source, find recompressability
        tell grid about source
        either connect source now or flag it as dynamic for layer
        if source has effects
            create dxt wrapper
            hook it up to the graph
            for each effect
                get effect info
                if !compressed, Q the parameter data with the DXT wrap
                tell grid about effect
            loop
        end if
        free up source reuse struct
    loop
    if track has effects
        create dxt wrapper
        hook it up to the graph
        for each effect
            get effect info
            if !compressed, Q the paramter data with the DXT wrap
            tell grid about effect
        loop
    end if
    if track has transitions
        if !compressed
            create DXT
            add DXT to graph
        end if
        add DXT to graph
        for each transition
            skip muted transitions
            get transition info
            if !compressed, Q the parameter data with the DXT
            tell the grid about trans
        loop
    end if
loop
prune the grid
if compressed, remove everything but sources
for each switch input pin
    if compressed
        if row is blank, ignore it
        if black row, ignore it
        find out how many ranges row has
        create skew array
        for each range in row, set switch's x-y
        merge skews
    else
        for each range in row, set switch's x-y
    end if
    set up black sources
loop

*/
//############################################################################

#include <streams.h>
#include "stdafx.h"
#include "grid.h"
#include "deadpool.h"
#include "..\errlog\cerrlog.h"
#include "..\util\filfuncs.h"
#include "..\util\filfuncs.cpp"
#include "..\util\dexmisc.cpp"
#include "..\util\conv.cxx"
#include "..\util\perf_defs.h"
#include "IRendEng.h"
#include "dexhelp.h"
#include <initguid.h>

const int RENDER_TRACE_LEVEL = 2;
const long THE_OUTPUT_PIN = -1;
const int TRACE_HIGHEST = 2;
const int TRACE_MEDIUM = 3;
const int TRACE_LOW = 4;
const int TRACE_LOWEST = 5;
const WCHAR * gwszSpecialCompSwitchName = L"DEXCOMPSWITCH";
const int HACKY_PADDING = 10000000;
const BOOL SHARE_SOURCES = TRUE;

typedef struct {
    REFERENCE_TIME rtStart;
    REFERENCE_TIME rtStop;
    REFERENCE_TIME rtMediaStop;
} MINI_SKEW;

//############################################################################
// 
//############################################################################

void ValidateTimes( 
                   REFERENCE_TIME & TLStart,
                   REFERENCE_TIME & TLStop,
                   REFERENCE_TIME & MStart,
                   REFERENCE_TIME & MStop,
                   double FPS,
                   REFERENCE_TIME ProjectLength )
{
    bool ExactlyOne = ( ( MStop - MStart ) == ( TLStop - TLStart ) );

    // calculate the slope first so we can remember the rate
    // the user wanted to play
    //
    ASSERT( TLStop != TLStart );
    double slope = double(MStop-MStart)/double(TLStop-TLStart);

    // round the timeline times to the nearest frames. This means we'll
    // have to fix up the media times to have the EXACT SAME original rate
    //
    TLStart = Frame2Time( Time2Frame( TLStart, FPS ), FPS );
    TLStop  = Frame2Time( Time2Frame( TLStop,  FPS ), FPS );

    // make sure the timeline start and stop times are within bounds
    //
    if( TLStart < 0 )
    {
        MStart -= (REFERENCE_TIME)(TLStart * slope);
        TLStart = 0;
    }
    if( TLStop > ProjectLength )
    {
        TLStop = ProjectLength;
    }

    REFERENCE_TIME FixedMediaLen;    // len of fixed up media times
    if( ExactlyOne )
    {
        FixedMediaLen = TLStop - TLStart;
    }
    else
    {
        FixedMediaLen = REFERENCE_TIME( slope * ( TLStop - TLStart ) );
    }

    // We have to be careful when growing the media times to be in the right
    // ratio to the timeline times, because we don't want to make the start
    // get < 0, or the stop be > the movie length (which we don't know).
    // So we'll grow by moving the start back, until it hits 0, in which case
    // we'll grow the stop too, but hopefully this cannot cause a problem
    // because we're fudging by at most one output frame length, so the
    // switch should get all the frames it needs.

    if( FixedMediaLen > MStop - MStart ) // new len is longer! oh oh!
    {
        // we adjust just the start time, since we can
        //
        if( MStop >= FixedMediaLen )
        {
            MStart = MStop - FixedMediaLen;
        }
        else // start time would have gone < 0, adjust both ends
        {
            MStart = 0;
            MStop = FixedMediaLen;
        }
    }
    else // new len is shorter or same. Shrink the end down slightly
    {
        MStop = MStart + FixedMediaLen;
    }
}

CRenderEngine::CRenderEngine( )
: m_pGraph( NULL )
, m_nGroupsAdded( 0 )
, m_rtRenderStart( -1 )
, m_rtRenderStop( -1 )
, m_hBrokenCode( 0 )
, m_nDynaFlags( CONNECTF_DYNAMIC_SOURCES )
, m_nLastGroupCount( 0 )
, m_bSmartCompress( FALSE )
, m_bUsedInSmartRecompression( FALSE )
, m_punkSite( NULL )
, m_nMedLocFlags( 0 )
, m_pDeadCache( 0 )
{
    for( int i = 0 ; i < MAX_SWITCHERS ; i++ )
    {
        m_pSwitcherArray[i] = NULL;
    }
    
    m_MedLocFilterString[0] = 0;
    m_MedLocFilterString[1] = 0;
}

HRESULT CRenderEngine::FinalConstruct()
{
    m_pDeadCache = new CDeadGraph;
    // need to dekey this guy too
    if( m_pDeadCache )
    {
        CComPtr< IGraphBuilder > pGraph;
        m_pDeadCache->GetGraph( &pGraph );
        if( pGraph )
        {
            CComQIPtr< IObjectWithSite, &IID_IObjectWithSite > pOWS( pGraph );
            if( pOWS )
            {
                pOWS->SetSite( (IServiceProvider *) this );
            }
        }
    }
    return m_pDeadCache ? S_OK : E_OUTOFMEMORY;
}

//############################################################################
// 
//############################################################################

CRenderEngine::~CRenderEngine( )
{
    // disconnect EVERYTHING
    //
    _ScrapIt( FALSE );
    
    delete m_pDeadCache;
}

//############################################################################
// Remove everything from the graph, every last thing.
//############################################################################

HRESULT CRenderEngine::ScrapIt( )
{
    CAutoLock Lock( &m_CritSec );
    return _ScrapIt( TRUE );
}

HRESULT CRenderEngine::_ScrapIt( BOOL bWipeGraph ) // internal method
{
    HRESULT hr = 0;
    
    if( bWipeGraph )
    {
        // stopping the graph below won't necessarily keep the graph stopped if
        // a video window is around to ask for a repaint.  make sure we won't
        // start up again, or we'll assert and hang tearing the graph down
        //HideVideoWindows( m_pGraph);

        // stop it first
        //
        if( m_pGraph )
        {
            CComQIPtr< IMediaControl, &IID_IMediaControl > pControl( m_pGraph );
            pControl->Stop( );
        }
        
        // remove everything from the graph
        //
        WipeOutGraph( m_pGraph );
    }
    
    // release all our switcher array pins
    //
    for( int i = 0 ; i < MAX_SWITCHERS ; i++ )
    {
        if( m_pSwitcherArray[i] )
        {
            m_pSwitcherArray[i]->Release( );
            m_pSwitcherArray[i] = 0;
        }
    }
    m_nGroupsAdded = 0;
    m_nLastGroupCount = 0;
    if(m_pDeadCache) {
        m_pDeadCache->Clear( );
    }
    
    // clear the broken code since we're torn down everything
    //
    m_hBrokenCode = 0;
    
    return NOERROR;
}

//############################################################################
// gets the maker of this render engine
//############################################################################

STDMETHODIMP CRenderEngine::GetVendorString( BSTR * pVendorID )
{
    CheckPointer( pVendorID, E_POINTER );
    *pVendorID = SysAllocString( L"Microsoft Corporation" );
    HRESULT hr = *pVendorID ? NOERROR : E_OUTOFMEMORY;
    return hr;
}

//############################################################################
// disconnect two pins from anything
//############################################################################

HRESULT CRenderEngine::_Disconnect( IPin * pPin1, IPin * pPin2 )
{
    HRESULT hr = 0;
    
    if( pPin1 )
    {
        hr = pPin1->Disconnect( );
        ASSERT( !FAILED( hr ) );
    }
    if( pPin2 )
    {
        hr = pPin2->Disconnect( );
        ASSERT( !FAILED( hr ) );
    }
    return NOERROR;
}

//############################################################################
// add a filter into the graph. Defer to the cache manager for how to do this.
//############################################################################

HRESULT CRenderEngine::_AddFilter( IBaseFilter * pFilter, LPCWSTR pName, long ID )
{
    HRESULT hr = 0;

    // if filter is already in the graph, don't do a thing. This REALLY HAPPENS,
    // taking it out of the cache automatically adds it to our graph
    //
    FILTER_INFO fi;
    pFilter->QueryFilterInfo( &fi );
    if( fi.pGraph ) fi.pGraph->Release( );
    if( fi.pGraph == m_pGraph )
    {
        return NOERROR;
    }

    WCHAR FilterName[256];
    if( wcscmp( pName, gwszSpecialCompSwitchName ) == 0 )
    {
        wcscpy( FilterName, gwszSpecialCompSwitchName );
    }
    else
    {
        GetFilterName( ID, (WCHAR*) pName, FilterName, 256 );
    }

    hr = m_pGraph->AddFilter( pFilter, FilterName );
    ASSERT( SUCCEEDED(hr) );

    return hr;
}

//############################################################################
// 
//############################################################################

HRESULT CRenderEngine::_RemoveFilter( IBaseFilter * pFilter )
{
    HRESULT hr = 0;

    hr = m_pGraph->RemoveFilter( pFilter );
    return hr;
}

//############################################################################
// connect up two pins with respecive ID's.
//############################################################################

HRESULT CRenderEngine::_Connect( IPin * pPin1, IPin * pPin2 )
{
    DbgTimer t( "(rendeng) _Connect" );
    
    return m_pGraph->Connect( pPin1, pPin2 );
}

//############################################################################
// ask the render engine which timeline it's using
//############################################################################

STDMETHODIMP CRenderEngine::GetTimelineObject( IAMTimeline ** ppTimeline )
{
    CAutoLock Lock( &m_CritSec );
    
    // they should pass in a valid one
    //
    CheckPointer( ppTimeline, E_POINTER );
    
    *ppTimeline = m_pTimeline;
    if( *ppTimeline )
    {
        (*ppTimeline)->AddRef( );
    }
    
    return NOERROR;
}

//############################################################################
// tell the render engine what timeline we're going to be working with.
// This function also copies over any error log the timeline is using.
//############################################################################

STDMETHODIMP CRenderEngine::SetTimelineObject( IAMTimeline * pTimeline )
{
    CAutoLock Lock( &m_CritSec );
    
    // they should pass in a valid one
    //
    CheckPointer( pTimeline, E_POINTER );
    
    // if they already match, then the user's probably just being silly
    //
    if( pTimeline == m_pTimeline )
    {
        return NOERROR;
    }
    
    // if we already have a timeline, then forget about it and set the new one.
    //
    if( m_pTimeline )
    {
        ScrapIt( );
        m_pTimeline.Release( );
        m_pGraph.Release( );
    }
    
    m_pTimeline = pTimeline;
    
    m_pErrorLog.Release( );
    
    // grab the timeline's error log
    //
    CComQIPtr< IAMSetErrorLog, &IID_IAMSetErrorLog > pTimelineLog( pTimeline );
    if( pTimelineLog )
    {
        pTimelineLog->get_ErrorLog( &m_pErrorLog );
    }
    
    return NOERROR;
}

//############################################################################
// get the graph we're working with
//############################################################################

STDMETHODIMP CRenderEngine::GetFilterGraph( IGraphBuilder ** ppFG )
{
    CAutoLock Lock( &m_CritSec );
    
    CheckPointer( ppFG, E_POINTER );
    
    *ppFG = m_pGraph;
    if( m_pGraph )
    {
        (*ppFG)->AddRef( );
    }
    
    return NOERROR;
}

//############################################################################
// (pre)set the graph the render engine will use.
//############################################################################

STDMETHODIMP CRenderEngine::SetFilterGraph( IGraphBuilder * pFG )
{
    CAutoLock Lock( &m_CritSec );
    
    // no setting the graph after we already created one.
    //
    if( m_pGraph )
    {
        return E_INVALIDARG;
    }
    
    m_pGraph = pFG;
    
    return NOERROR;
}

//############################################################################
// set the callback that we want to use for connecting up sources.
//############################################################################

STDMETHODIMP CRenderEngine::SetSourceConnectCallback( IGrfCache * pCallback )
{
    CAutoLock Lock( &m_CritSec );
    
    m_pSourceConnectCB = pCallback;
    return NOERROR;
}

//############################################################################
// find the output pin for a group, each group has one and only one.
//############################################################################

STDMETHODIMP CRenderEngine::GetGroupOutputPin( long Group, IPin ** ppRenderPin )
{
    CAutoLock Lock( &m_CritSec );
    
    // if it's broken, don't do anything.
    //
    if( m_hBrokenCode )
    {
        return E_RENDER_ENGINE_IS_BROKEN;
    }
    
    CheckPointer( ppRenderPin, E_POINTER );
    
    *ppRenderPin = NULL;
    
    // don't let the group number be out of bounds
    //
    if( Group < 0 || Group >= MAX_SWITCHERS )
    {
        return E_INVALIDARG;
    }
    
    // error if we don't have a graph
    //
    if( !m_pGraph )
    {
        return E_INVALIDARG;
    }
    
    // this switcher might not exist for this group,
    // if it was skipped
    //
    if( !m_pSwitcherArray[Group] )
    {
        return S_FALSE;
    }
    
    // this should always work
    //
    CComQIPtr< IBaseFilter, &IID_IBaseFilter > pSwitcherBase( m_pSwitcherArray[Group] );
    
    m_pSwitcherArray[Group]->GetOutputPin( 0, ppRenderPin );
    ASSERT( *ppRenderPin );
    
    return NOERROR;
}

//############################################################################
// hook up the switchers and then render the output pins in one fell swoop
//############################################################################

HRESULT CRenderEngine::ConnectFrontEnd( )
{
    CAutoLock Lock( &m_CritSec );
    
    // if it's broken, don't do anything.
    //
    if( m_hBrokenCode )
    {
        return E_RENDER_ENGINE_IS_BROKEN;
    }

    DbgLog((LOG_TRACE,1,TEXT("RENDENG::ConnectFrontEnd" )));

    // init memory used to source/parser sharing
    m_cshare = 0; // init using same source for both A&V
    m_cshareMax = 25;
    m_share = (ShareAV *)CoTaskMemAlloc(m_cshareMax * sizeof(ShareAV));
    if (m_share == NULL)
	return E_OUTOFMEMORY;

    // init memory used to keep track of unused dangly bits from source sharing
    m_cdangly = 0;
    m_cdanglyMax = 25;
    m_pdangly = (IBaseFilter **)CoTaskMemAlloc(m_cdanglyMax * sizeof(IBaseFilter *));
    if (m_pdangly == NULL) {
	CoTaskMemFree(m_share);
	return E_OUTOFMEMORY;
    }

    // stopping the graph below won't necessarily keep the graph stopped if
    // a video window is around to ask for a repaint.  make sure we won't start
    // up again, or we'll assert and hang tearing the graph down
    //HideVideoWindows( m_pGraph);
    // !!! UH OH!

    // right now, reconnecting up the graph won't work unless we're stopped
    //
    if( m_pGraph )
    {
        CComQIPtr< IMediaControl, &IID_IMediaControl > pControl( m_pGraph );
        pControl->Stop( );
    }

    HRESULT hrRet = _HookupSwitchers( );
    _CheckErrorCode( hrRet );

    // free the shared memory
    if (m_share)        // re-alloc fail could make this NULL
        CoTaskMemFree(m_share);

    // kill all the leftover dangly bits
    for (int z=0; z < m_cdangly; z++) {
	if (m_pdangly[z]) {
	    IPin *pIn = GetInPin(m_pdangly[z], 0);
	    ASSERT(pIn);
	    IPin *pOut = NULL;
	    pIn->ConnectedTo(&pOut);
	    ASSERT(pOut);
	    pIn->Disconnect();
	    pOut->Disconnect();
	    RemoveDownstreamFromFilter(m_pdangly[z]);
	}
    }
    if (m_pdangly)      // re-alloc fail could make this NULL
        CoTaskMemFree(m_pdangly);

    return hrRet;
}

//############################################################################
//
//############################################################################

#define TESTROWS 500

HRESULT CRenderEngine::_HookupSwitchers( )
{
    HRESULT hr = 0;

#if 0

    CTimingGrid tempGrid;
    tempGrid.SetNumberOfRows( TESTROWS );

    {
    DbgTimer Timer1( "setting up temp grid" );

    for( int z = 0 ; z < TESTROWS ; z++ )
    {
        DbgLog((LOG_TIMING,1, "Adding source %ld", z ));
        tempGrid.WorkWithNewRow( z, z, 0, z );
        REFERENCE_TIME Start = ( rand( ) % TESTROWS ) * UNITS;
        REFERENCE_TIME Stop = ( rand( ) % TESTROWS ) * UNITS;
        REFERENCE_TIME t = 0;
        if( Stop < Start )
        {
            t = Start;
            Start = Stop;
            Stop = t;
        }
        tempGrid.RowIAmOutputNow( Start, Stop, THE_OUTPUT_PIN );
    }
    }

    tempGrid.PruneGrid( );
    {
    DbgTimer Timer1( "reading grid" );
    for( int z = 0 ; z < TESTROWS ; z++ )
    {
        DbgLog((LOG_TIMING,1, "reading source %ld", z ));

        REFERENCE_TIME InOut = -1;
        REFERENCE_TIME Stop = -1;
        tempGrid.WorkWithRow( z );
        DbgTimer RowTimer( "row timer" );
        while( 1 )
        {
            long Value = 0;
            tempGrid.RowGetNextRange( &InOut, &Stop, &Value );
            if( InOut == Stop )
            {
                break;
            }
        }
    }
    }

#endif

    // if our timeline hasn't been set, we've got an error
    //
    if( !m_pTimeline )
    {
        return E_INVALIDARG;
    }
    
    // if we don't already have a graph, create one now
    //
    if( !m_pGraph )
    {
        hr = _CreateObject(
            CLSID_FilterGraph,
            IID_IFilterGraph,
            (void**) &m_pGraph );
        
        if( FAILED( hr ) )
        {
            return hr;
        }
        
        // give the graph a pointer back to us
        // !!! only if( m_punkSite ) ?
        {
            CComQIPtr< IObjectWithSite, &IID_IObjectWithSite > pOWS( m_pGraph );
            
            pOWS->SetSite( (IServiceProvider *) this );
        }
    }

#ifdef DEBUG
    CComQIPtr< IGraphConfig, &IID_IGraphConfig > pConfig( m_pGraph );
    if( !pConfig )
    {
        DbgLog((LOG_ERROR,1, TEXT( "RENDENG::******** Old version of Quartz.dll detected." )));
        static bool warned = false;
        if( !warned )
        {
            warned = true;
            MessageBox( NULL, TEXT("You have an old version of Quartz installed. This version of Dexter won't work with it."),
                TEXT("Whoops!"), MB_OK | MB_TASKMODAL );
            return DEX_IDS_INSTALL_PROBLEM;
        }
    }
#endif
    
    // we've always assumed that the user has wiped out the graph
    // when they call ConnectFrontEnd, which calls us. Make sure this
    // is so from now on. 
    
    // ask the timeline how many groups it has
    //
    long GroupCount = 0;
    hr = m_pTimeline->GetGroupCount( &GroupCount );
    if( FAILED( hr ) )
    {
        return hr;
    }
    if( GroupCount < 0 )
    {
        return E_INVALIDARG;
    }

    bool BlowCache = false;

    // look at the list of groups and see if we need to blow our cache
    //
    if( GroupCount != m_nLastGroupCount )
    {
        BlowCache = true;
    }
    else
    {
        // okay, the group count matches, so look at the group
        // id's and see if they're the same
        //
        for( int g = 0 ; g < GroupCount ; g++ )
        {
            CComPtr< IAMTimelineObj > pGroupObj;
            hr = m_pTimeline->GetGroup( &pGroupObj, g );
            ASSERT( !FAILED( hr ) );
            if( FAILED( hr ) )
            {
                return _GenerateError( 2, DEX_IDS_TIMELINE_PARSE, hr );
            }
            long NewSwitchID = 0;
            pGroupObj->GetGenID( &NewSwitchID );

            // if we no longer have a switch, we blow the cache
            //
            if( !m_pSwitcherArray[g] )
            {
                BlowCache = true;
                break;
            }

            // get the switch filter and ask for it's ID
            //
            CComQIPtr< IBaseFilter, &IID_IBaseFilter > pSwitch( m_pSwitcherArray[g] );
            
            long OldSwitchID = GetFilterGenID( pSwitch );

            if( OldSwitchID != NewSwitchID )
            {
                BlowCache = true;
                break;
            }
        }

    }
    if( BlowCache )
    {
        _ClearCache( );
    }

    if( !m_bSmartCompress )
    {
        if( !BlowCache )
        {
            // if we're not the compressed RE, whether in recompression mode or not,
            // attempt to use the cache
            //
            _LoadCache( ); // if BlowCache, then this is a NO-OP

        }

        // remove everything from the graph
        //
        WipeOutGraph( m_pGraph );
    }
    
    // release all our switcher array pins before we go a' settin' them
    //
    //
    for( int i = 0 ; i < MAX_SWITCHERS ; i++ )
    {
        if( m_pSwitcherArray[i] )
        {
            m_pSwitcherArray[i]->Release( );
            m_pSwitcherArray[i] = 0;
        }
    }
    m_nGroupsAdded = 0;
    
    // clear the broken code since we're torn down everything
    //
    m_hBrokenCode = 0;
    
    // for each group we've got, parse it and connect up the necessary filters.
    //
    for( int CurrentGroup = 0 ; CurrentGroup < GroupCount ; CurrentGroup++ )
    {
        DbgTimer t( "(rendeng) Time to connect up group" );

        CComPtr< IAMTimelineObj > pGroupObj;
        hr = m_pTimeline->GetGroup( &pGroupObj, CurrentGroup );
        if( FAILED( hr ) )
        {
            return hr;
        }
        CComQIPtr< IAMTimelineGroup, &IID_IAMTimelineGroup > pGroup( pGroupObj );
        
        // ask the group if it's compressed. If we're in compressed mode
        // and the group isn't, don't process it. 
        //
        BOOL Compressed = FALSE;
        pGroup->IsSmartRecompressFormatSet( &Compressed );
        if( m_bSmartCompress && !Compressed )
        {
            continue;
        }
        
        AM_MEDIA_TYPE MediaType;
        hr = pGroup->GetMediaType( &MediaType );
        if( FAILED( hr ) )
        {
            return hr;
        }
        
        if( MediaType.pbFormat == NULL )
        {
#if DEBUG
            MessageBox( NULL, TEXT("REND--Need to set the format of the media type in the timeline group"), TEXT("REND--error"), MB_TASKMODAL | MB_OK );
#endif
            return VFW_E_INVALIDMEDIATYPE;
        }
        
        if( MediaType.majortype == MEDIATYPE_Video )
        {
            hr = _AddVideoGroupFromTimeline( CurrentGroup, &MediaType );
        }
        else if( MediaType.majortype == MEDIATYPE_Audio )
        {
            hr = _AddAudioGroupFromTimeline( CurrentGroup, &MediaType );
        }
        else
        {
	    ASSERT(FALSE);
            //hr = _AddRandomGroupFromTimeline( CurrentGroup, &MediaType );
        }
        FreeMediaType( MediaType );
        
        if( FAILED( hr ) )
        {
            return hr;
        }
    }
    
    m_nLastGroupCount = m_nGroupsAdded;
    
    // we can clear the cache no matter who we are, it won't do anything
    // the second time we call it
    //
    _ClearCache( );

    if( BlowCache )
    {
        return S_WARN_OUTPUTRESET;
    }
    
    return NOERROR;
}

//############################################################################
// 
//############################################################################

HRESULT CRenderEngine::_AddVideoGroupFromTimeline( long WhichGroup, AM_MEDIA_TYPE * pGroupMediaType )

{
    HRESULT hr = 0;
    
    // we've already checked for m_pTimeline being valid
    
    long Dummy = 0;
    long VideoSourceCount = 0;
    m_pTimeline->GetCountOfType( WhichGroup, &VideoSourceCount, &Dummy, TIMELINE_MAJOR_TYPE_SOURCE );
    
    // somebody said that if we have a group with no video sources in it, but the group
    // exists, then the blank group should just produce "blankness", or black
    
    if( VideoSourceCount < 1 )
    {
        //        return NOERROR;
    }

    // get group first, so we can get group ID and cache the switch
    //
    CComPtr< IAMTimelineObj > pGroupObj;
    hr = m_pTimeline->GetGroup( &pGroupObj, WhichGroup );
    ASSERT( !FAILED( hr ) );
    if( FAILED( hr ) )
    {
        return _GenerateError( 2, DEX_IDS_TIMELINE_PARSE, hr );
    }
    long SwitchID = 0;
    pGroupObj->GetGenID( &SwitchID );
    
    // check to see if graph already holds our Compressed Video Switcher. If we find one,
    // use it. If it's not in the cache, we might not find it.
    //
    m_pSwitcherArray[WhichGroup] = NULL;

    if( m_bSmartCompress )
    {
        CComPtr< IBaseFilter > pFoundFilter;
        m_pGraph->FindFilterByName( gwszSpecialCompSwitchName, &pFoundFilter );

        if( pFoundFilter )
        {
            pFoundFilter->QueryInterface( IID_IBigSwitcher, (void**) &m_pSwitcherArray[WhichGroup] );
        }
    }

    if( !m_pSwitcherArray[WhichGroup] )
    {
        // create a switch for each group we add.
        //
        hr = _CreateObject(
            CLSID_BigSwitch,
            IID_IBigSwitcher,
            (void**) &m_pSwitcherArray[WhichGroup],
            SwitchID );
    }
    
    if( FAILED( hr ) )
    {
        return _GenerateError( 2, DEX_IDS_INSTALL_PROBLEM, hr );
    }
    
    m_pSwitcherArray[WhichGroup]->Reset( );
    // the switch may need to know what group it is
    m_pSwitcherArray[WhichGroup]->SetGroupNumber( WhichGroup );

    CComQIPtr< IAMTimelineComp, &IID_IAMTimelineComp > pGroupComp( pGroupObj );
    if( !pGroupComp )
    {
        hr = E_NOINTERFACE;
        return _GenerateError( 2, DEX_IDS_TIMELINE_PARSE, hr );
    }
    CComQIPtr< IAMTimelineGroup, &IID_IAMTimelineGroup > pGroup( pGroupObj );
    if( !pGroup )
    {
        hr = E_NOINTERFACE;
        return _GenerateError( 2, DEX_IDS_TIMELINE_PARSE, hr );
    }
    
    // find out if this group expects us to recompress
    //
    CMediaType CompressedGroupType;
    SCompFmt0 * pFormat = NULL;
    pGroup->GetSmartRecompressFormat( (long**) &pFormat );
    if( pFormat )
    {
        CompressedGroupType = pFormat->MediaType;
    }
    
    BOOL IsCompressed = FALSE;
    // how can we delete pFormat cleanly?
    
    // By now we know that if we're in a Smart Rec group, we are the
    // compressed switch
    //
    if( m_bSmartCompress )
    {
        if( !pFormat )
        {
            return E_UNEXPECTED;
        }
        
        IsCompressed = TRUE;
        pGroupMediaType = &CompressedGroupType;
        m_pSwitcherArray[WhichGroup]->SetCompressed( );
    }
    
    if (pFormat) FreeMediaType( pFormat->MediaType );
    if (pFormat) delete pFormat;
    
    // ask the group if somebody has changed the smart compress format.
    // if they have, then we should re-tell the sources if they're compatible
    // or at least clear the flags
    
    BOOL ResetCompatibleFlags = FALSE;
    pGroup->IsRecompressFormatDirty( &ResetCompatibleFlags );
    pGroup->ClearRecompressFormatDirty( );
    
    // If in compressed mode, put switch in dynamic mode
    // !!! Smart recompression MUST USE DYNAMIC SOURCES or things
    // will break trying to re-use a source that might not exist
    // (the first instance may not have been a match with the
    // smart recompression format if there was a rate change)
    // If using smart recompression, the UNcompressed switch must NOT be
    // dynamic (so we can look at the sources as we load them to see if they're
    // compatible - we won't load them if we're dynamic)
    long DynaFlags = m_nDynaFlags;
    if( IsCompressed )
    {
        DynaFlags |= CONNECTF_DYNAMIC_SOURCES;
    } else if (m_bUsedInSmartRecompression) {
        DynaFlags &= ~CONNECTF_DYNAMIC_SOURCES;
    }
    
    // tell the switch if we're doing dynamic reconnections or not
    hr = m_pSwitcherArray[WhichGroup]->SetDynamicReconnectLevel(DynaFlags);
    ASSERT(SUCCEEDED(hr));
    
    // tell the switch about our error log
    //
    CComQIPtr< IAMSetErrorLog, &IID_IAMSetErrorLog > pSwitchLog( m_pSwitcherArray[WhichGroup] );
    if( pSwitchLog )
    {
        pSwitchLog->put_ErrorLog( m_pErrorLog );
    }
    
    // are we allowed to have transitions on the timeline right now?
    //
    BOOL EnableTransitions = FALSE;
    BOOL EnableFx = FALSE;
    m_pTimeline->EffectsEnabled( &EnableFx );
    m_pTimeline->TransitionsEnabled( &EnableTransitions );
    
    // ask timeline how many actual tracks it has
    //
    long VideoTrackCount = 0;
    long VideoLayers = 0;
    m_pTimeline->GetCountOfType( WhichGroup, &VideoTrackCount, &VideoLayers, TIMELINE_MAJOR_TYPE_TRACK );
    
#if 0  // one bad group will stop the whole project from playing
    if( VideoTrackCount < 1 )
    {
        return NOERROR;
    }
#endif
    
    CTimingGrid VidGrid;
    
    // ask for this group's frate rate, so we can tell the switch about it
    //
    double GroupFPS = DEFAULT_FPS;
    pGroup->GetOutputFPS(&GroupFPS);
    if( GroupFPS <= 0.0 )
    {
        GroupFPS = DEFAULT_FPS;
    }
    
    // ask it if it's in preview mode, so we can tell the switch about it
    //
    BOOL fPreview = FALSE;
    hr = pGroup->GetPreviewMode(&fPreview);
    
    // no previewing mode when smart recompressing
    if( IsCompressed )
    {
        fPreview = FALSE;
    }
    
    // ask how much buffering this group wants
    //
    int nOutputBuffering;
    hr = pGroup->GetOutputBuffering(&nOutputBuffering);
    ASSERT(SUCCEEDED(hr));
    
    WCHAR GroupName[256];
    BSTR bstrGroupName;
    hr = pGroup->GetGroupName( &bstrGroupName );
    if( FAILED( hr ) )
    {
        return E_OUTOFMEMORY;
    }
    wcscpy( GroupName, bstrGroupName );
    SysFreeString( bstrGroupName );
    
    // for compressed version, add a C
    if( IsCompressed )
    {
        wcscpy( GroupName, gwszSpecialCompSwitchName );
        SwitchID = 0;
    }
    
    // add the switch to the graph
    //
    IBigSwitcher *&_pVidSwitcherBase = m_pSwitcherArray[WhichGroup];
    CComQIPtr< IBaseFilter, &IID_IBaseFilter > pVidSwitcherBase( _pVidSwitcherBase );
    hr = _AddFilter( pVidSwitcherBase, GroupName, SwitchID );
    ASSERT( !FAILED( hr ) );
    if( FAILED( hr ) )
    {
        return _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
    }

    // find out if the switch output pin is connected. If it is,
    // disconnect it, but remember what it was connected to so we can
    // connect it up later. We can't leave it connected and try to 
    // connect input pins.
    // Cannot leave output connected because Switch's SetMediaType will bomb
    // if any input or output is connected.
    //
    CComPtr< IPin > pSwitchRenderPin;
    _pVidSwitcherBase->GetOutputPin( 0, &pSwitchRenderPin );
    if( pSwitchRenderPin )
    {
        pSwitchRenderPin->ConnectedTo( &m_pSwitchOuttie[WhichGroup] );
        if( m_pSwitchOuttie[WhichGroup] )
        {
            m_pSwitchOuttie[WhichGroup]->Disconnect( );
            pSwitchRenderPin->Disconnect( );
        }
    }

    long vidoutpins = VideoSourceCount;    // fx on clips
    vidoutpins += 2 * VideoLayers;    // trans on track, comp & group
    vidoutpins += VideoLayers;     // fx on track, comp & group
    vidoutpins += 1;               // rendering pin
    
    long vidinpins = VideoSourceCount;    // clip fx outputs
    vidinpins += VideoLayers;    // track, comp & group fx outputs
    vidinpins += VideoLayers;    // track, comp & group trans outputs
    vidinpins += VideoSourceCount;    // the actual sources
    vidinpins += VideoLayers;    // a black source for each layer
    if (vidinpins == 0) vidinpins = 1; // don't error out
    
    long vidswitcheroutpin = 0;
    long vidswitcherinpin = 0;
    long gridinpin = 0;
    vidswitcheroutpin++;
    
    hr = m_pSwitcherArray[WhichGroup]->SetInputDepth( vidinpins );
    if( FAILED( hr ) )
    {
        return _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
    }
    hr = m_pSwitcherArray[WhichGroup]->SetOutputDepth( vidoutpins );
    if( FAILED( hr ) )
    {
        return _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
    }
    
    // set the media type it accepts
    //
    hr = m_pSwitcherArray[WhichGroup]->SetMediaType( pGroupMediaType );
    if( FAILED( hr ) )
    {
        VARIANT var;
        VariantInit(&var);
        var.vt = VT_I4;
        var.lVal = WhichGroup;
        return _GenerateError( 2, DEX_IDS_BAD_MEDIATYPE, hr, &var );
    }
    
    // set the frame rate
    //
    hr = m_pSwitcherArray[WhichGroup]->SetFrameRate( GroupFPS );
    ASSERT(SUCCEEDED(hr));
    
    // set preview mode
    //
    hr = m_pSwitcherArray[WhichGroup]->SetPreviewMode( fPreview );
    ASSERT(SUCCEEDED(hr));
    
    CComQIPtr< IAMOutputBuffering, &IID_IAMOutputBuffering > pBuffer ( 
        m_pSwitcherArray[WhichGroup] );
    hr = pBuffer->SetOutputBuffering( nOutputBuffering );
    ASSERT(SUCCEEDED(hr));
    
    // set the duration
    //
    REFERENCE_TIME TotalDuration = 0;
    m_pTimeline->GetDuration( &TotalDuration );
    if( m_rtRenderStart != -1 )
    {
        if( TotalDuration > ( m_rtRenderStop - m_rtRenderStart ) )
        {
            TotalDuration = m_rtRenderStop - m_rtRenderStart;
        }
    }
    pGroupObj->FixTimes( NULL, &TotalDuration );

    if (TotalDuration == 0)
        return S_FALSE; // don't abort, other groups might still work

    hr = m_pSwitcherArray[WhichGroup]->SetProjectLength( TotalDuration );
    ASSERT(SUCCEEDED(hr));
    
    bool worked = VidGrid.SetNumberOfRows( vidinpins + 1 );
    if( !worked )
    {
        hr = E_OUTOFMEMORY;
        return _GenerateError( 2, DEX_IDS_GRID_ERROR, hr );
    }
    
    // there is a virtual black track per layer that comes first... everything
    // transparent on the real tracks makes you see this black track.  Each
    // track or composite might have a transition from black to the content of
    // its track, so we may need a black source for each of them.
    
    // We don't of course know yet if we need the black source, so we won't
    // put it in the graph yet. But we'll add a whole lot of black to the grid,
    // to pretend like it's there.
    
    // this operation is inexpensive, go ahead and do it for compressed version
    // as well
    VidGrid.SetBlankLevel( VideoLayers, TotalDuration );
    for (int xx=0; xx<VideoLayers; xx++) 
    {
        // tell the grid about it
        //
        VidGrid.WorkWithNewRow( vidswitcherinpin, gridinpin, 0, 0 );
        vidswitcherinpin++;
        gridinpin++;
        
    } // for all video layers
    
    // we are going to be clever, and if the same source is used
    // more than once in a project, we'll use the same source filter
    // instead of opening the source several times.
	
    // for each source in the project, we'll fill in this structure, which
    // contains everything necessary to determine if it's really exactly the
    // same, plus an array of all the times it's used in other places, so we
    // can re-use it only if none of the times it is used overlap (we can't
    // very well have one source filter giving 2 spots in the same movie at
    // the same time, can we?)

    typedef struct {
	long ID;
   	BSTR bstrName;
   	GUID guid;
	int  nStretchMode;
   	double dfps;
   	long nStreamNum;
	int nPin;
	int cTimes;	// how big the following array is
        int cTimesMax;	// how much space is allocated
        MINI_SKEW * pMiniSkew;
        double dTimelineRate;
    } DEX_REUSE;

    // make a place to hold an array of names and guids (of the sources
    // in this project) and which pin they are on
    long cListMax = 20, cList = 0;
    DEX_REUSE *pREUSE = (DEX_REUSE *)QzTaskMemAlloc(cListMax *
						sizeof(DEX_REUSE));
    if (pREUSE == NULL) {
        return _GenerateError( 1, DEX_IDS_GRAPH_ERROR, E_OUTOFMEMORY);
    }

    // which physical track are we on in our enumeration? (0-based) not counting
    // comps and the group
    int WhichTrack = -1;

    long LastEmbedDepth = 0;
    long LastUsedNewGridRow = 0;

    // add source filters for each source on the timeline
    //
    for( int CurrentLayer = 0 ; CurrentLayer < VideoLayers ; CurrentLayer++ )
    {
        DbgTimer CurrentLayerTimer( "(rendeng) Current Layer" );

        // get the layer itself
        //
        CComPtr< IAMTimelineObj > pLayer;
	// NB: This function enumerates things inside out... tracks, then
	// the comp they're in, etc. until finally returning the group
	// It's NOT only giving real tracks!
        hr = pGroupComp->GetRecursiveLayerOfType( &pLayer, CurrentLayer, TIMELINE_MAJOR_TYPE_TRACK );
        ASSERT( !FAILED( hr ) );
        if( FAILED( hr ) )
        {
            hr = _GenerateError( 2, DEX_IDS_TIMELINE_PARSE, hr );
            goto die;
        }
        
        DbgTimer CurrentLayerTimer1( "(rendeng) Current Layer 1" );

	// I'm figuring out which physical track we're on
	TIMELINE_MAJOR_TYPE tx;
	pLayer->GetTimelineType(&tx);
	if (tx == TIMELINE_MAJOR_TYPE_TRACK)
	    WhichTrack++;

        // ask if the layer is muted
        //
        BOOL LayerMuted = FALSE;
        pLayer->GetMuted( &LayerMuted );
        if( LayerMuted )
        {
            // don't look at this layer
            //
            continue; // skip this layer, don't worry about grid
        }
        
        long LayerEmbedDepth = 0;
        pLayer->GetEmbedDepth( &LayerEmbedDepth );
        LayerEmbedDepth++;	// for our purposes, original black tracks are
        // 0 and actual layers are 1-based
        
        CComQIPtr< IAMTimelineTrack, &IID_IAMTimelineTrack > pTrack( pLayer );
        
        // get the TrackID for this layer
        //
        long TrackID = 0;
        pLayer->GetGenID( &TrackID );
        
        bool bUsedNewGridRow = false;

        // get all the sources for this layer
        //
        if( pTrack )
        {
            CComPtr< IAMTimelineObj > pSourceLast;
            CComPtr< IAMTimelineObj > pSourceObj;

	    // which source are we on?
	    int WhichSource = -1;

            while( 1 )
            {
                DbgTimer CurrentSourceTimer( "(rendeng) Video Source" );

                pSourceLast = pSourceObj;
                pSourceObj.Release();

                // get the next source on this layer, given a time.
                //
                hr = pTrack->GetNextSrcEx( pSourceLast, &pSourceObj );

                DbgLog( ( LOG_TRACE, 1, "Next Source" ) );

                ASSERT( !FAILED( hr ) );
                if( hr != NOERROR )
                {
                    // all done with sources
                    //
                    break;
                }
                
                CComQIPtr< IAMTimelineSrc, &IID_IAMTimelineSrc > pSource( pSourceObj );
                ASSERT( pSource );
                if( !pSource )
                {
                    // this one bombed, look at the next
                    //
                    continue; // sources
                }
                
		// keeping track of which source this is
		WhichSource++;

                // ask if the source is muted
                //
                BOOL SourceMuted = FALSE;
                pSourceObj->GetMuted( &SourceMuted );
                if( SourceMuted )
                {
                    // don't look at this source
                    //
                    continue; // sources
                }
                
                // get the source's SourceID
                //
                long SourceID = 0;
                pSourceObj->GetGenID( &SourceID );
                
                // ask the source which stream number it wants to provide, since it
                // may be one of many
                //
                long StreamNumber = 0;
                hr = pSource->GetStreamNumber( &StreamNumber );
                    
                int nStretchMode;
                hr = pSource->GetStretchMode( &nStretchMode );
                
                CComBSTR bstrName;
                hr = pSource->GetMediaName( &bstrName );
                GUID guid;
                hr = pSourceObj->GetSubObjectGUID(&guid);
                double sfps;
                hr = pSource->GetDefaultFPS( &sfps );
                ASSERT(hr == S_OK); // can't fail, really

                // this is the order things MUST be done
                // 1. Get Start/Stop times
                // 2. Get MediaTimes
                // 3. Make sure MediaStop <> MediaStart
                // 4. Offset for RenderRange MUST be done before fixing up the
                // times because of rounding issues with the slope calculation 
                // in ValidateTimes.
                // 5. Fix Source Times
                // 6. Fix Media Times

                // ask this source for it's start/stop times
                //
                REFERENCE_TIME SourceStart = 0;
                REFERENCE_TIME SourceStop = 0;
                hr = pSourceObj->GetStartStop( &SourceStart, &SourceStop );
		// I want to remember what these were, originally
		REFERENCE_TIME SourceStartOrig = SourceStart;
		REFERENCE_TIME SourceStopOrig = SourceStop;
                ASSERT( !FAILED( hr ) );
                if( FAILED( hr ) || SourceStart == SourceStop)
                {
                    // this one bombed, or exists for zero time
                    //
                    continue; // sources
                }
                // ask this source for it's media start/stops
                //
                REFERENCE_TIME MediaStart = 0;
                REFERENCE_TIME MediaStop = 0;
                hr = pSource->GetMediaTimes( &MediaStart, &MediaStop );
		// I want to remember what these were, originally
		REFERENCE_TIME MediaStartOrig = MediaStart;
		REFERENCE_TIME MediaStopOrig = MediaStop;
                ASSERT( !FAILED( hr ) );
                if( FAILED( hr ) )
                {
                    // this one bombed, look at the next
                    //
                    continue; // sources
                }
                
                DbgTimer CurrentSourceTimer2( "(rendeng) Video Source 2" );

                // !!! Not sure the right way to handle sources with no media times
                // So the FRC doesn't get confused, we'll make MTime = TLTime
                if (MediaStart == MediaStop) {
                    MediaStop = MediaStart + (SourceStop - SourceStart);
                }
                
                // skew the times for the particular render range
                //
                if( m_rtRenderStart != -1 )
                {
                    SourceStart -= m_rtRenderStart;
                    SourceStop -= m_rtRenderStart;

                    if( ( SourceStop <= 0 ) || ( SourceStart >= ( m_rtRenderStop - m_rtRenderStart ) ) )
                    {
                        continue; // out of range
                    }
                }
                
                // make sure no times go < 0
                //                
                ValidateTimes( SourceStart, SourceStop, MediaStart, MediaStop, GroupFPS, TotalDuration );
                
                if(SourceStart == SourceStop)
                {
                    // source combining, among other things, will mess up if
                    // we try and play something for 0 length.  ignore this.
                    //
                    continue; // sources
                }

                STARTSTOPSKEW skew;
                skew.rtStart = MediaStart;
                skew.rtStop = MediaStop;
                skew.rtSkew = SourceStart - MediaStart;
                // !!! rate calculation appears in several places
                if (MediaStop == MediaStart || SourceStop == SourceStart)
                    skew.dRate = 1;
                else
                    skew.dRate = (double) ( MediaStop - MediaStart ) /
                    ( SourceStop - SourceStart );

    		DbgLog((LOG_TRACE,1,TEXT("RENDENG::Working with source")));
    		DbgLog((LOG_TRACE,1,TEXT("%ls"), (WCHAR *)bstrName));

		// get the props for the source
		CComPtr< IPropertySetter > pSetter;
		hr = pSourceObj->GetPropertySetter(&pSetter);

		// in the spirit of using only 1 source filter for
		// both the video and the audio of a file, if both
		// are needed, let's see if we have another group
		// with the same piece of this file but with another
		// media type - SHARING ONLY HAPPENS BETWEEN GROUP 0 AND 1
		long MatchID = 0;
		IPin *pSplit, *pSharePin = NULL;
		BOOL fShareSource = FALSE;
                int nSwitch0InPin;
                // in smart recomp, we don't know what video pieces are needed,
                // they may not match the audio pieces needed, so source sharing
                // will NEVER WORK.  Don't try it
		if (WhichGroup == 0 && !m_bUsedInSmartRecompression) {
		    // If the match is muted, we'll never try and use it,
                    // but that should be OK
                    // !!! Don't share if we're dealing with compressed data
                    // OK for now, since only video can be compressed now
		    hr = _FindMatchingSource(bstrName, SourceStartOrig,
			    SourceStopOrig, MediaStartOrig, MediaStopOrig,
			    WhichGroup, WhichTrack, WhichSource,
			    pGroupMediaType, GroupFPS, &MatchID);
    		    DbgLog((LOG_TRACE,1,TEXT("GenID %d matches with ID %d"),
						SourceID, MatchID));
		    
		} else if (WhichGroup == 1 && !m_bUsedInSmartRecompression) {
		    for (int zyz = 0; zyz < m_cshare; zyz++) {
			if (SourceID == m_share[zyz].MatchID) {
			    fShareSource = SHARE_SOURCES;
                            // this is the split pin we need to build off of
			    pSharePin = m_share[zyz].pPin;
                            // this is the switch pin used by group 0
			    nSwitch0InPin = m_share[zyz].nSwitch0InPin;
                            // OK, we have a split pin, but not necessarily the
                            // right one, if we're using a special stream #
                            // We need the right one or BuildSourcePart's
                            // caching won't work
                            if (StreamNumber > 0 && pSharePin) {
                                // not addreffed or released
                                pSharePin = FindOtherSplitterPin(pSharePin, MEDIATYPE_Video,
                                                StreamNumber);
                            }
			    // it's a dangly bit we are using
			    _RemoveFromDanglyList(pSharePin);
    		    	    DbgLog((LOG_TRACE,1,TEXT("GenID %d matches with ID %d"),
					SourceID, m_share[zyz].MatchID));
    			    DbgLog((LOG_TRACE,1,TEXT("Time to SHARE source!")));
			    break;
			}
		    }
		}

	    // If this source has been used before, and all the important
	    // parameters are the same, and the times don't overlap, then
	    // just re-use it using the same source filter we already made
	    // for it.

	    BOOL fCanReuse = FALSE;
            int nGrow;
            long SwitchInPinToUse = vidswitcherinpin;
	    int xxx;

	    // if a source has properties, do NOT share it with anybody, that
	    // other guy will unwittingly get my properties!
	    if (pSetter) {
		MatchID = 0;
		fShareSource = FALSE;
	    }

	    // go through all the sources in the project looking for a match
	    for (xxx = 0; xxx < cList; xxx++) {

	        // if a source has properties, do NOT re-use it, that
	        // other guy will unwittingly get my properties!
		if (pSetter) {
		    break;
		}

		// !!! Full path/no path will look different but won't be!
		if (!DexCompareW(pREUSE[xxx].bstrName, bstrName) &&
			pREUSE[xxx].guid == guid &&
			pREUSE[xxx].nStretchMode == nStretchMode &&
			pREUSE[xxx].dfps == sfps &&
			pREUSE[xxx].nStreamNum == StreamNumber) {

		    // we found this source already in use.  But do the 
		    // different times it's needed overlap?
	    	    fCanReuse = TRUE;

                    nGrow = -1;

		    for (int yyy = 0; yyy < pREUSE[xxx].cTimes; yyy++) {
			// Here's the deal.  Re-using a file needs to seek
			// the file to the new spot, which must take < 1/30s
			// or it will interrupt playback.  If there are few
			// keyframes (ASF) this will take hours.  We cannot
			// re-use sources if they are consecutive.  Open it
			// twice, it'll play better avoiding the seek, and ping
			// pong between the 2 sources every other source.

#ifdef COMBINE_SAME_SOURCES
                        double Rate1 = double( MediaStop - MediaStart ) / double( SourceStop - SourceStart );
                        double Rate2 = pREUSE[xxx].dTimelineRate;
                        REFERENCE_TIME OldMediaStop = pREUSE[xxx].pMiniSkew[yyy].rtMediaStop;
                        if( !IsCompressed && AreTimesAndRateReallyClose( 
                            pREUSE[xxx].pMiniSkew[yyy].rtStop, SourceStart, 
                            OldMediaStop, MediaStart, 
                            Rate1, Rate2, GroupFPS ) )
                        {
                            nGrow = yyy;
                            skew.dRate = 0.0;
    			    DbgLog((LOG_TRACE,1,TEXT("COMBINING with a previous source")));
                            break;
                        }
#endif

                        // if the start is really close to the reuse stop,
                        // and the rates are the same, we can combine them
                        //
			if (SourceStart < pREUSE[xxx].pMiniSkew[yyy].rtStop + HACKY_PADDING &&
				SourceStop > pREUSE[xxx].pMiniSkew[yyy].rtStart) {
        			fCanReuse = FALSE;
        			break;
			}
		    }
		    if (fCanReuse)
			break;
		}
	    }

            // Actually, we CAN'T re-use, if we're re-using a guy that is
            // sharing a parser... that would be both REUSE and SHARE, which,
            // as explained elsewhere, is illegal.
            if (WhichGroup == 1) {
                for (int zz = 0; zz < m_cshare; zz++) {
                    if (m_share[zz].MatchID == pREUSE[xxx].ID) {
                        fCanReuse = FALSE;
                    }
                }
            }

	    // We are re-using a previous source!  Add the times it is being
	    // used for this segment to the list of times it is used
	    if (fCanReuse) {

		// this is the pin the old source is coming in on
		SwitchInPinToUse = pREUSE[xxx].nPin;
            	DbgLog((LOG_TRACE,1,TEXT("Row %d can REUSE source from pin %ld")
						, gridinpin, SwitchInPinToUse));

                if( nGrow == -1 )
                {
		    // need to grow the array first?
	            if (pREUSE[xxx].cTimes == pREUSE[xxx].cTimesMax) {
		        pREUSE[xxx].cTimesMax += 10;
	                pREUSE[xxx].pMiniSkew = (MINI_SKEW*)QzTaskMemRealloc(
			    	    pREUSE[xxx].pMiniSkew,
				    pREUSE[xxx].cTimesMax * sizeof(MINI_SKEW));
	                if (pREUSE[xxx].pMiniSkew == NULL)
		            goto die;
	            }
		    pREUSE[xxx].pMiniSkew[pREUSE[xxx].cTimes].rtStart = SourceStart;
		    pREUSE[xxx].pMiniSkew[pREUSE[xxx].cTimes].rtStop = SourceStop;
		    pREUSE[xxx].pMiniSkew[pREUSE[xxx].cTimes].rtMediaStop = MediaStop;
		    pREUSE[xxx].cTimes++;
                }
                else
                {
                    // We MUST grow by a whole number of frame intervals.
                    // All these numbers be rounded to frame lengths, or things
                    // can screw up.  The timeline and media lengths are
                    // already an even # of frame lengths, so adding that much
                    // should be safe.
		    pREUSE[xxx].pMiniSkew[nGrow].rtStop += SourceStop -
                                                                SourceStart;
                    pREUSE[xxx].pMiniSkew[nGrow].rtMediaStop += MediaStop -
                                                                MediaStart;
                }

		// you CANNOT both share a source and re-use. It will never
		// work.  Don't even try. (When one branch finishes a segment
		// and seeks upstream, it will kill the other branch)
                // (source combining is OK... that's not really re-using)
		// RE-USING can improve perf n-1, sharing only 2-1, so I pick
		// RE-USING to win out.

		// if we were about to re-use an old parser, DON'T!
    		DbgLog((LOG_TRACE,1,TEXT("Re-using, can't share!")));

		// take the guy we're re-using from out of the race for possible
		// source re-usal
                if (WhichGroup == 0) {
                    for (int zz = 0; zz < m_cshare; zz++) {
                        if (m_share[zz].MyID == pREUSE[xxx].ID) {
                            m_share[zz].MatchID = 0;
                        }
                    }
                }
		fShareSource = FALSE;
		MatchID = 0;

	    // We are NOT re-using this source.  Put this new source on the
	    // list of unique sources to possibly be re-used later
	    //
	    } else {
	        pREUSE[cList].ID = SourceID;	// for sharing a source filter
	        pREUSE[cList].bstrName = SysAllocString(bstrName);
	        if (pREUSE[cList].bstrName == NULL)
		    goto die;
	        pREUSE[cList].guid = guid;
	        pREUSE[cList].nPin = SwitchInPinToUse;
	        pREUSE[cList].nStretchMode = nStretchMode;
	        pREUSE[cList].dfps = sfps;
	        pREUSE[cList].nStreamNum = StreamNumber;
	        pREUSE[cList].cTimesMax = 10;
	        pREUSE[cList].cTimes = 0;
                // we only need to set this once, since all others must match it
                pREUSE[cList].dTimelineRate = double( MediaStop - MediaStart ) / double( SourceStop - SourceStart );
	        pREUSE[cList].pMiniSkew = (MINI_SKEW*)QzTaskMemAlloc(
			    pREUSE[cList].cTimesMax * sizeof(MINI_SKEW));
	        if (pREUSE[cList].pMiniSkew == NULL) {
                    SysFreeString(pREUSE[cList].bstrName);
                    pREUSE[cList].bstrName = NULL;
		    goto die;
                }
	        pREUSE[cList].cTimes = 1;
	        pREUSE[cList].pMiniSkew->rtStart = SourceStart;
	        pREUSE[cList].pMiniSkew->rtStop = SourceStop;
	        pREUSE[cList].pMiniSkew->rtMediaStop = MediaStop;

		// grow the list if necessary
	        cList++;
	        if (cList == cListMax) {
		    cListMax += 20;
                    DEX_REUSE *pxxx = (DEX_REUSE *)QzTaskMemRealloc(pREUSE,
                                        cListMax * sizeof(DEX_REUSE));
		    if (pxxx == NULL) {
		        goto die;
                    }
                    pREUSE = pxxx;
	        }
	    }

            // !!! We could save some time, by the following
            // if (fCanReuse)
            //     This Source's Recompressability = That Of The Source Reused
            // but I don't have access to the other source object

            DbgTimer CurrentSourceTimer3( "(rendeng) Video Source 3" );

            CComQIPtr< IAMTimelineSrcPriv, &IID_IAMTimelineSrcPriv > pSrcPriv( pSource );

            // if we're to reset the compat flags, then do so now. Since the group's
            // recompress type changed, we'll have to re-ask the sources
            //
            if( ResetCompatibleFlags )
            {
                pSrcPriv->ClearAnyKnowledgeOfRecompressability( );
            }

            // is this source compatibilly compressed? We'll ask the mediadet, since
            // it can do this function. It seems like scary code, but really, there's no
            // other way to do it. We look to see this information if it IS compressed,
            // or if it's not compressed, but it's not about to load the source anyhow.
            // Note that if the source has already figured this information out, then
            // GetIsRecompressable will return right away and we won't need to use a
            // mediadet. This information really only needs to be found out ONCE for
            // a source, if the app is smart about it.
            //
            // turn off Compat if the rate isn't right
            //
            BOOL NormalRate = FALSE;
            pSource->IsNormalRate( &NormalRate );

            // if we're the compressed RE, we need to know by this point if the source is
            // recompressable, so we need to go through this.

                BOOL Compat = FALSE;
                if( IsCompressed )
	        {
                    if( pSrcPriv )
                    {
                        hr = pSrcPriv->GetIsRecompressable( &Compat );
                        
                        if( hr == S_FALSE )
                        {
                            if( !NormalRate )
                            {
                                Compat = FALSE;
                            }
                            else
                            {
                                // the source didn't know. We have to find out, then
                                // tell it for future reference
                                CComPtr< IMediaDet > pDet;
                                hr = _CreateObject( CLSID_MediaDet,
                                    IID_IMediaDet,
                                    (void**) &pDet );
                                if( FAILED( hr ) )
                                {
                                    goto die;
                                }
                                
                                // set service provider for keyed filters
                                {
                                    CComQIPtr< IObjectWithSite, &IID_IObjectWithSite > pOWS( pDet );
                                    ASSERT( pOWS );
                                    if( pOWS )
                                    {                                    
                                        pOWS->SetSite((IUnknown *) (IServiceProvider *) m_punkSite );
                                    }                                        
                                }
                                hr = pDet->put_Filename( bstrName );
                                if( FAILED( hr ) )
                                {
                                    goto die;
                                }
                                
                                // I need to find a video stream first
                                //
                                long Streams = 0;
                                hr = pDet->get_OutputStreams( &Streams );
                                if( FAILED( hr ) )
                                {
                                    goto die;
                                }

                                // go look for a video type
                                //
                                CMediaType Type;
                                long FoundVideo = 0;
                                BOOL FoundStream = FALSE;
                                for( long i = 0 ; i < Streams ; i++ )
                                {
                                    hr = pDet->put_CurrentStream( i );
                                    if( FAILED( hr ) )
                                    {
                                        goto die;
                                    }

                                    FreeMediaType( Type );
                                    hr = pDet->get_StreamMediaType( &Type );
                                    if( *Type.Type( ) == MEDIATYPE_Video )
                                    {
                                        if( FoundVideo == StreamNumber )
                                        {
                                            FoundStream = TRUE;
                                            break;
                                        }

                                        FoundVideo++;
                                    }
                                }

                                // didn't find the right stream number, this should NEVER happen
                                //
                                if( !FoundStream )
                                {
                                    ASSERT( 0 );
                                    hr = VFW_E_INVALIDMEDIATYPE;
                                    goto die;
                                }

                                // compare the source's type to the group's to determine
                                // if they're compatible
                                
                                Compat = AreMediaTypesCompatible( &Type, pGroupMediaType );
                                
                                FreeMediaType( Type );
                                
                                pSrcPriv->SetIsRecompressable( Compat );
                            }
                        }
                    }
                }
                    
                DbgTimer CurrentSourceTimer4( "(rendeng) Video Source 4" );

                bUsedNewGridRow = true;

                // tell the grid about it.
                //
                VidGrid.WorkWithNewRow( SwitchInPinToUse, gridinpin, LayerEmbedDepth, 0 );

                VidGrid.RowSetIsSource( pSourceObj, Compat );
                DbgTimer CurrentSourceTimer402( "(rendeng) Video Source 402" );
                worked = VidGrid.RowIAmOutputNow( SourceStart, SourceStop, THE_OUTPUT_PIN );
                if( !worked )
                {
                    hr = E_OUTOFMEMORY;
                    goto die;
                }

                DbgTimer CurrentSourceTimer41( "(rendeng) Video Source 41" );
                //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                // don't do any switch connections unless we're not compressed.
                // we'll do that later
                //
		if( !IsCompressed || ( IsCompressed && Compat ) )
                {

	            // NO dynamic reconnections, make the source now
                    // !!!Smart recompression MUST USE DYNAMIC SOURCES or things
		    // will break trying to re-use a source that might not exist
		    // (the first instance may not have been a match with the
		    // smart recompression format if there was a rate change)
                    //
                    if( !( DynaFlags & CONNECTF_DYNAMIC_SOURCES ) ) 
                    {

                        // We are not re-using a previous source, make the source now
                        if( !fCanReuse ) 
                        {
                            CComPtr< IPin > pOutput;
        		    DbgLog((LOG_TRACE,1,TEXT("Call BuildSourcePart")));
                            
			    IBaseFilter *pDangly = NULL;
                            hr = BuildSourcePart(
                                m_pGraph, 
                                TRUE, 
                                sfps, 
                                pGroupMediaType,
                                GroupFPS, 
                                StreamNumber, 
                                nStretchMode, 
                                1, 
                                &skew,
                                this, 
                                bstrName, 
                                &guid,
				pSharePin,  // connect from this splitter pin
                                &pOutput, 
                                SourceID, 
                                m_pDeadCache,
                                IsCompressed,
                                m_MedLocFilterString,
                                m_nMedLocFlags,
                                m_pMedLocChain,
				pSetter, &pDangly);

			    // We built more than we bargained for. We have
			    // an appendage that we need to kill later if it
			    // isn't used
			    if (pDangly) {
			        m_pdangly[m_cdangly] = pDangly;
			        m_cdangly++;
			        if (m_cdangly == m_cdanglyMax) {
				    m_cdanglyMax += 25;
				    m_pdangly = (IBaseFilter **)CoTaskMemRealloc
					(m_pdangly,
					m_cdanglyMax * sizeof(IBaseFilter *));
				    if (m_pdangly == NULL) {
                                        // !!! leaves things dangling (no leak)
                                        hr =_GenerateError(2,DEX_IDS_GRAPH_ERROR,
							    E_OUTOFMEMORY);
                                        m_cdangly = 0;
                                        goto die;
				    }
			        }
			    }
                            
                            if (FAILED(hr)) {
                                // error was already logged
                                goto die;
                            }
                            
                            if( m_bUsedInSmartRecompression && !IsCompressed )
                            {
                                // pause a second and find out if this source has
                                // a compatible media type. In case we'll use it
                                // for a smart recompression later
                                
                                // we need the source filter... look upstream of the pOutput pin
                                // for the source filter
                                //
                                IBaseFilter * pStartFilter = GetStartFilterOfChain( pOutput );
                                
                                hr = pSrcPriv->GetIsRecompressable( &Compat );
                                if( hr == S_FALSE )
                                {
                                    if( !NormalRate )
                                    {
                                        Compat = FALSE;
                                    }
                                    else
                                    {
                                        // set the major type for the format we're looking for
                                        //
                                        AM_MEDIA_TYPE FindMediaType;
                                        ZeroMemory( &FindMediaType, sizeof( FindMediaType ) );
                                        FindMediaType.majortype = MEDIATYPE_Video;
                                        
					// !!! Did I break this function?
                                        hr = FindMediaTypeInChain( pStartFilter, &FindMediaType, StreamNumber );
                                        
                                        // compare the two media types
                                        // !!! redefined it
                                        BOOL Compat = AreMediaTypesCompatible( &FindMediaType, &CompressedGroupType );
                                        
                                        FreeMediaType( FindMediaType );
                                        
                                        pSrcPriv->SetIsRecompressable( Compat );
                                    }
                                }
                            }
                            
                            CComPtr< IPin > pSwitchIn;
                            _pVidSwitcherBase->GetInputPin(SwitchInPinToUse, &pSwitchIn);
                            if( !pSwitchIn )
                            {
                                ASSERT(FALSE);
                                hr =_GenerateError(2,DEX_IDS_GRAPH_ERROR,E_OUTOFMEMORY);
                                goto die;
                            }
                            hr = _Connect( pOutput, pSwitchIn );
                            
                            ASSERT( !FAILED( hr ) );
                            if( FAILED( hr ) )
                            {
                                hr = _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
                                goto die;
                            }
                            
			    // If we are going to use this source for both audio
			    // and video, get an unused split pin of the right
			    // type as a good place to start the other chain
			    if (MatchID) {
				GUID guid = MEDIATYPE_Audio;
				pSplit = FindOtherSplitterPin(pOutput, guid,0);
				if (!pSplit) {
				    MatchID = 0;
				}
			    }

                            // we ARE re-using a previous source. Add the new range
                        } 
                        else 
                        {
                            DbgTimer ReuseSourceTimer( "(rendeng) Reuse Video Source" );
    			    DbgLog((LOG_TRACE,1,TEXT("Adding another skew..")));

                            CComPtr< IPin > pPin;
                            m_pSwitcherArray[WhichGroup]->GetInputPin(SwitchInPinToUse, &pPin);
                            ASSERT( pPin);
                            if( !pPin )
                            {
                                hr =_GenerateError(2,DEX_IDS_GRAPH_ERROR,E_OUTOFMEMORY);
                                goto die;
                            }
                            IPin * pCon;

                            hr = pPin->ConnectedTo(&pCon);
                            
                            ASSERT(hr == S_OK);

                            IBaseFilter *pFil = GetFilterFromPin(pCon);
                            pCon->Release( );
                            ASSERT( pFil);
                            if( !pFil )
                            {
                                hr =_GenerateError(2,DEX_IDS_GRAPH_ERROR,E_OUTOFMEMORY);
                                goto die;
                            }

                            CComQIPtr<IDexterSequencer, &IID_IDexterSequencer>
                                pDex( pFil );
                            ASSERT(pDex);
                            if( !pDex )
                            {
                                hr =_GenerateError(2,DEX_IDS_GRAPH_ERROR,E_OUTOFMEMORY);
                                goto die;
                            }

                            hr = pDex->AddStartStopSkew(skew.rtStart, skew.rtStop,
                                skew.rtSkew, skew.dRate);
                            ASSERT(SUCCEEDED(hr));
                            if(FAILED(hr))
                            {
                                hr =_GenerateError(2,DEX_IDS_GRAPH_ERROR,hr);
                                goto die;
                            }

			    // If we are going to use this source for both audio
			    // and video, get an unused split pin of the right
			    // type as a good place to start the other chain
			    if (MatchID) {
				ASSERT(FALSE);	// can't both re-use and share
				GUID guid = MEDIATYPE_Audio;
				pSplit = FindOtherSplitterPin(pCon, guid,0);
				if (!pSplit) {
				    MatchID = 0;
				}
			    }

                        }

			// remember which source we are going to use on the
			// other splitter pin
			if (MatchID) {
			    m_share[m_cshare].MatchID = MatchID;
			    m_share[m_cshare].MyID = SourceID;
			    m_share[m_cshare].pPin = pSplit;
                            // remember which group 0 switch in pin was used
			    m_share[m_cshare].nSwitch0InPin = SwitchInPinToUse;
			    m_cshare++;
			    if (m_cshare == m_cshareMax) {
				m_cshareMax += 25;
				m_share = (ShareAV *)CoTaskMemRealloc(m_share,
						m_cshareMax * sizeof(ShareAV));
				if (m_share == NULL) {
                                    hr =_GenerateError(2,DEX_IDS_GRAPH_ERROR,
							E_OUTOFMEMORY);
                                    goto die;
				}
			    }
			}
                    }
                    else 
                    {
                        // DYNAMIC reconnections - make the source later
                        
                        // schedule this source to be dynamically loaded by the switcher
                        // at a later time. This will merge skews of like sources
    			DbgLog((LOG_TRACE,1,TEXT("Calling AddSourceToConnect")));
                        AM_MEDIA_TYPE mt;
                        ZeroMemory(&mt, sizeof(AM_MEDIA_TYPE));
                        if (!fShareSource || WhichGroup != 1) {
                            // Normal case - we are not the shared appendage
                            hr = m_pSwitcherArray[WhichGroup]->AddSourceToConnect(
                                bstrName,
                                &guid, nStretchMode,
                                StreamNumber, sfps,
                                1, &skew,
                                SwitchInPinToUse, FALSE, 0, mt, 0.0,
			        pSetter);
                        } else {
                            // We are a shared appendage.  Tell the group 0 
                            // switch about this source, which will build and
                            // destroy both chains to both switches at the same
                            // time.
                            ASSERT(WhichGroup == 1);
                            DbgLog((LOG_TRACE,1,TEXT("SHARING: Giving switch 0 info about switch 1")));
                            hr = m_pSwitcherArray[0]->AddSourceToConnect(
                                bstrName,
                                &guid, nStretchMode,
                                StreamNumber, sfps,
                                1, &skew,
                                nSwitch0InPin,      // group 0's switch inpin
                                TRUE, SwitchInPinToUse, // our switch's inpin
                                *pGroupMediaType, GroupFPS,
			        pSetter);
                        }
                        if (FAILED(hr)) 
                        {
                            hr = _GenerateError( 1, DEX_IDS_INSTALL_PROBLEM, hr );
                            goto die;
                        }

			// remember which source we are going to use on the
			// other splitter pin
			if (MatchID) {
			    m_share[m_cshare].MatchID = MatchID;
			    m_share[m_cshare].MyID = SourceID;
			    m_share[m_cshare].pPin = NULL; // don't have this
                            // remember which group 0 switch in pin was used
			    m_share[m_cshare].nSwitch0InPin = SwitchInPinToUse;
			    m_cshare++;
			    if (m_cshare == m_cshareMax) {
				m_cshareMax += 25;
				m_share = (ShareAV *)CoTaskMemRealloc(m_share,
						m_cshareMax * sizeof(ShareAV));
				if (m_share == NULL) {
                                    hr =_GenerateError(2,DEX_IDS_GRAPH_ERROR,
							E_OUTOFMEMORY);
                                    goto die;
				}
			    }
			}

                    }
            
                    // tell the switcher that we're a source pin
                    //
                    hr = m_pSwitcherArray[WhichGroup]->InputIsASource(
                        SwitchInPinToUse, TRUE );
            
                } // if !IsCompressed
            
                //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

                DbgTimer CurrentSourceTimer5( "(rendeng) Video Source 5" );

                gridinpin++;
                if( !fCanReuse )
                {
                    vidswitcherinpin++;
                }
            
                // check and see if we have source effects
                //
                CComQIPtr< IAMTimelineEffectable, &IID_IAMTimelineEffectable > pSourceEffectable( pSource );
                long SourceEffectCount = 0;
                long SourceEffectInPin = 0;
                long SourceEffectOutPin = 0;
                CComPtr< IAMMixEffect > pSourceMixEffect;
                if( pSourceEffectable )
                {
                    pSourceEffectable->EffectGetCount( &SourceEffectCount );
                }
            
                // if we don't want effects, set the effect count to 0
                //
                if( !EnableFx )
                {
                    SourceEffectCount = 0;
                }
            
                if( SourceEffectCount )
                {
                    DbgTimer SourceEffectTimer( "Source Effects" );

                    if( !IsCompressed )
                    {
                        // create the DXT wrapper
                        //
                        CComPtr< IBaseFilter > pDXTBase;
                        hr = _CreateObject(
                            CLSID_DXTWrap,
                            IID_IBaseFilter,
                            (void**) &pDXTBase,
                            SourceID + ID_OFFSET_EFFECT );
                        ASSERT( !FAILED( hr ) );
                        if( FAILED( hr ) )
                        {
                            hr = _GenerateError( 2, DEX_IDS_INSTALL_PROBLEM, hr );
                            goto die;
                        }
                    
                        // tell it about our error log
                        //
                        CComQIPtr< IAMSetErrorLog, &IID_IAMSetErrorLog > pErrLog( pDXTBase );
                        if( pErrLog )
                        {
                            pErrLog->put_ErrorLog( m_pErrorLog );
                        }
                    
                        // get the effect interface
                        //
                        hr = pDXTBase->QueryInterface( IID_IAMMixEffect, (void**) &pSourceMixEffect );
                        ASSERT( !FAILED( hr ) );
                        if( FAILED( hr ) )
                        {
                            hr = _GenerateError( 2, DEX_IDS_INTERFACE_ERROR, hr );      
                            goto die;
                        }
                    
                        // reset the DXT so we can reprogram it.
                        // !!! take this out someday, make QParamdata more efficient
                        //
                        pSourceMixEffect->Reset( );
                
                        // set up some stuff now
                        //
                        hr = pSourceMixEffect->SetNumInputs( 1 );
                        ASSERT( !FAILED( hr ) );
                        hr = pSourceMixEffect->SetMediaType( pGroupMediaType );
                        ASSERT( !FAILED( hr ) );
                    
                        // set the defaults
                        //
                        GUID DefaultEffect = GUID_NULL;
                        m_pTimeline->GetDefaultEffect( &DefaultEffect );
                        hr = pSourceMixEffect->SetDefaultEffect( &DefaultEffect );
                    
                        // add it to the graph
                        //
                        hr = _AddFilter( pDXTBase, L"DXT Wrapper", SourceID + 1 );
                        ASSERT( !FAILED( hr ) );
                        if( FAILED( hr ) )
                        {
                            hr = _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );      
                            goto die;
                        }
                    
                        // find pins...
                        //
                        IPin * pFilterInPin = NULL;
                        pFilterInPin = GetInPin( pDXTBase, 0 );
                        ASSERT( pFilterInPin );
                        if( !pFilterInPin )
                        {
                            hr = _GenerateError( 2, DEX_IDS_GRAPH_ERROR, E_OUTOFMEMORY);
                            goto die;
                        }
                        // !!! error check
                        IPin * pFilterOutPin = NULL;
                        pFilterOutPin = GetOutPin( pDXTBase, 0 );
                        ASSERT( pFilterOutPin );
                        if( !pFilterOutPin )
                        {
                            hr = _GenerateError( 2, DEX_IDS_GRAPH_ERROR, E_OUTOFMEMORY);
                            goto die;
                        }
                        CComPtr< IPin > pSwitcherOutPin;
                        _pVidSwitcherBase->GetOutputPin(vidswitcheroutpin, &pSwitcherOutPin);
                        ASSERT( pSwitcherOutPin );
                        if( !pSwitcherOutPin )
                        {
                            hr = _GenerateError( 2, DEX_IDS_GRAPH_ERROR, E_OUTOFMEMORY);
                            goto die;
                        }
                        CComPtr< IPin > pSwitcherInPin;
                        _pVidSwitcherBase->GetInputPin(vidswitcherinpin, &pSwitcherInPin);
                        ASSERT( pSwitcherInPin );
                        if( !pSwitcherInPin )
                        {
                            hr = _GenerateError( 2, DEX_IDS_GRAPH_ERROR, E_OUTOFMEMORY);
                            goto die;
                        }
                    
                        // connect them
                        //
                        hr = _Connect( pSwitcherOutPin, pFilterInPin );
                        ASSERT( !FAILED( hr ) );
                        if( FAILED( hr ) )
                        {
                            hr = _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
                            goto die;
                        }
                        hr = _Connect( pFilterOutPin, pSwitcherInPin );
                        ASSERT( !FAILED( hr ) );
                        if( FAILED( hr ) )
                        {
                            hr = _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
                            goto die;
                        }
                    } // if !IsCompressed
                
                    // use one DXT for all the effects we wish to apply
                    //
                    SourceEffectInPin = vidswitcherinpin;
                    SourceEffectOutPin = vidswitcheroutpin;
                
                    // new row on the grid. NOTE: Clip effects technically should be one layer
                    // deeper than the clip itself, but since clip effect ranges are bounded by the length
                    // of the clip, they will never affect anything outside that clip, and we don't need to
                    // do it right.
                    //
                    VidGrid.WorkWithNewRow( SourceEffectInPin, gridinpin, LayerEmbedDepth, 0 );

                    // go through each effect and apply it to the DXT wrapper
                    //
                    for( int SourceEffectN = 0 ; SourceEffectN < SourceEffectCount ; SourceEffectN++ )
                    {
                        CComPtr< IAMTimelineObj > pEffect;
                        hr = pSourceEffectable->GetEffect( &pEffect, SourceEffectN );
                    
                        // if for some reason, it didn't work, ignore it (I guess)
                        //
                        if( !pEffect )
                        {
                            // !!! should we notify app that something didn't work?
                            continue; // effects
                        }
                    
                        // ask if the effect is muted
                        //
                        BOOL effectMuted = FALSE;
                        pEffect->GetMuted( &effectMuted );
                        if( effectMuted )
                        {
                            // don't look at this effect
                            //
                            // !!! should we notify app that something didn't work?
                            continue; // effects
                        }
                    
                        // find the effect's lifetime
                        //
                        REFERENCE_TIME EffectStart = 0;
                        REFERENCE_TIME EffectStop = 0;
                        hr = pEffect->GetStartStop( &EffectStart, &EffectStop );
                        ASSERT( !FAILED( hr ) ); // should always work
                    
                        // add in the effect's parent's time
                        //
                        EffectStart += SourceStart;
                        EffectStop += SourceStart;
                    
                        // do some minimal error checking
                        //
                        if( m_rtRenderStart != -1 )
                        {
                            if( ( EffectStop <= m_rtRenderStart ) || ( EffectStart >= m_rtRenderStop ) )
                            {
                                // !!! should we notify app that something didn't work?
                                continue; // effects
                            }
                            else
                            {
                                EffectStart -= m_rtRenderStart;
                                EffectStop -= m_rtRenderStart;
                            }
                        }
                    
                        // fix up the times to align on a frame boundary
                        //
                        hr = pEffect->FixTimes( &EffectStart, &EffectStop );
                    
                        // too short, we're ignoring it
                        if (EffectStart >= EffectStop)
                            continue;
                
                        if( !IsCompressed )
                        {
                            // find the effect's subobject or GUID, whichever comes first
                            //
                            BOOL Loaded = FALSE;
                            pEffect->GetSubObjectLoaded( &Loaded );
                            GUID EffectGuid = GUID_NULL;
                            CComPtr< IUnknown > EffectPtr;
                            if( Loaded )
                            {
                                hr = pEffect->GetSubObject( &EffectPtr );
                            }
                            else
                            {
                                hr = pEffect->GetSubObjectGUID( &EffectGuid );
                            }
                            ASSERT( !FAILED( hr ) );
                            if( FAILED( hr ) )
                            {
                                // !!! should we notify app that something didn't work?
                                continue; // effects
                            }
                        
                            CComPtr< IPropertySetter > pSetter;
                            hr = pEffect->GetPropertySetter( &pSetter );
                            // can't fail
                            ASSERT( !FAILED( hr ) );
                        
                            // ask for the wrap interface
                            //
                            DEXTER_PARAM_DATA ParamData;
                            ZeroMemory( &ParamData, sizeof( ParamData ) );
                            ParamData.rtStart = EffectStart;
                            ParamData.rtStop = EffectStop;
                            ParamData.pSetter = pSetter;
                            hr = pSourceMixEffect->QParamData(
                                EffectStart,
                                EffectStop,
                                EffectGuid,
                                EffectPtr,
                                &ParamData );
                            if( FAILED( hr ) )
                            {
                                // QParamData logs its own errors
                                continue; // effects
                            }
                            // QParamData logs its own errors
                        } // if !IsCompressed
                    
                        // tell the grid who is grabbing what
                        //
                        worked = VidGrid.RowIAmEffectNow( EffectStart, EffectStop, SourceEffectOutPin );
                        if( !worked )
                        {
                            hr = E_OUTOFMEMORY;
                            goto die;
                        }

        		VidGrid.DumpGrid( );
                    
                    } // for all the effects
                
                    // bump these to make room for the effect
                    //
                    vidswitcheroutpin++;
                    vidswitcherinpin++;
                    gridinpin++;
                
                } // if any effects on Source
            
            } // while sources

            if( !bUsedNewGridRow )
            {
                // nothing was on this Video TRACK, so ignore everything on it. This
                // only happens for a video TRACK, not a composition or a group
                //
                continue;
            }

        } // if pTrack
        
        CComQIPtr< IAMTimelineEffectable, &IID_IAMTimelineEffectable > pTrackEffectable( pLayer );
        long TrackEffectCount = 0;
        if( pTrackEffectable )
        {
            pTrackEffectable->EffectGetCount( &TrackEffectCount );
        }
        
        if( !EnableFx )
        {
            TrackEffectCount = 0;
        }
        
        REFERENCE_TIME TrackStart = 0;
        REFERENCE_TIME TrackStop = 0;
        pLayer->GetStartStop( &TrackStart, &TrackStop );
        
        if( TrackEffectCount )
        {
            DbgTimer TrackEffectTimer( "Track Effects" );

            CComPtr< IAMMixEffect > pTrackMixEffect;
            if (!IsCompressed) {
                // if we are rendering only a portion of the timeline, and the count
                // shows that an effect is present, we'll put a DXT wrapper in the 
                // graph even if, during the amount of time that we're active,
                // an effect doesn't happen. This way, we'll be faster for scrubbing.
                
                // create the DXT wrapper
                //
                CComPtr< IBaseFilter > pDXTBase;
                hr = _CreateObject(
                    CLSID_DXTWrap,
                    IID_IBaseFilter,
                    (void**) &pDXTBase,
                    TrackID + ID_OFFSET_EFFECT );
                ASSERT( !FAILED( hr ) );
                if( FAILED( hr ) )
                {
                    hr = _GenerateError( 2, DEX_IDS_INSTALL_PROBLEM, hr );
                    goto die;
                }
                
                // tell it about our error log
                //
                CComQIPtr< IAMSetErrorLog, &IID_IAMSetErrorLog > pErrLog( pDXTBase );
                if( pErrLog )
                {
                    pErrLog->put_ErrorLog( m_pErrorLog );
                }
                
                // add it to the graph
                //
                hr = _AddFilter( pDXTBase, L"DXT Wrapper", TrackID + ID_OFFSET_EFFECT );
                ASSERT( !FAILED( hr ) );
                if( FAILED( hr ) )
                {
                    hr = _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
                    goto die;
                }
                
                // get the effect interface
                //
                hr = pDXTBase->QueryInterface( IID_IAMMixEffect, (void**) &pTrackMixEffect );
                ASSERT( !FAILED( hr ) );
                if( FAILED( hr ) )
                {
                    hr = _GenerateError( 2, DEX_IDS_INTERFACE_ERROR, hr );
                    goto die;
                }
                
                // reset the DXT so we can reprogram it.
                // !!! take this out someday, make QParamdata more efficient
                //
                pTrackMixEffect->Reset( );
                
                // set up some stuff now
                //
                hr = pTrackMixEffect->SetNumInputs( 1 );
                hr = pTrackMixEffect->SetMediaType( pGroupMediaType );
                ASSERT( !FAILED( hr ) );
                
                // set the defaults
                //
                GUID DefaultEffect = GUID_NULL;
                m_pTimeline->GetDefaultEffect( &DefaultEffect );
                hr = pTrackMixEffect->SetDefaultEffect( &DefaultEffect );
                ASSERT(SUCCEEDED(hr));
                
                // find pins...
                //
                IPin * pFilterInPin = NULL;
                pFilterInPin = GetInPin( pDXTBase, 0 );
                ASSERT( pFilterInPin );
                if( !pFilterInPin )
                {
                    hr = _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
                    goto die;
                }
                IPin * pFilterOutPin = NULL;
                pFilterOutPin = GetOutPin( pDXTBase, 0 );
                ASSERT( pFilterOutPin );
                if( !pFilterOutPin )
                {
                    hr = _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
                    goto die;
                }
                CComPtr< IPin > pSwitcherOutPin;
                _pVidSwitcherBase->GetOutputPin(vidswitcheroutpin, &pSwitcherOutPin );
                ASSERT( pSwitcherOutPin );
                if( !pSwitcherOutPin )
                {
                    hr = _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
                    goto die;
                }
                CComPtr< IPin > pSwitcherInPin;
                _pVidSwitcherBase->GetInputPin(vidswitcherinpin, &pSwitcherInPin );
                ASSERT( pSwitcherInPin );
                if( !pSwitcherInPin )
                {
                    hr = _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
                    goto die;
                }
                
                // connect it up
                //
                hr = _Connect( pSwitcherOutPin, pFilterInPin );
                ASSERT( !FAILED( hr ) );
                if( FAILED( hr ) )
                {
                    hr = _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
                    goto die;
                }
                hr = _Connect( pFilterOutPin, pSwitcherInPin );
                ASSERT( !FAILED( hr ) );
                if( FAILED( hr ) )
                {
                    hr = _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
                    goto die;
                }
                
          } // if (!IsCompressed)
          
          // new row on the grid
          //
          bUsedNewGridRow = true;
          VidGrid.WorkWithNewRow( vidswitcherinpin, gridinpin, LayerEmbedDepth, 0 );
          
          // go through every effect and program up the DXT for it
          //
          for( int TrackEffectN = 0 ; TrackEffectN < TrackEffectCount ; TrackEffectN++ )
          {
              CComPtr< IAMTimelineObj > pEffect;
              pTrackEffectable->GetEffect( &pEffect, TrackEffectN );
              if( !pEffect )
              {
                  // effect didn't show up, ignore it
                  //
                  continue; // effects
              }
              
              // ask if the effect is muted
              //
              BOOL effectMuted = FALSE;
              pEffect->GetMuted( &effectMuted );
              if( effectMuted )
              {
                  // don't look at this effect
                  //
                  continue; // effects
              }
              
              // find the effect's lifetime, this should always work
              //
              REFERENCE_TIME EffectStart = 0;
              REFERENCE_TIME EffectStop = 0;
              hr = pEffect->GetStartStop( &EffectStart, &EffectStop );
              ASSERT( !FAILED( hr ) );
              
              EffectStart += TrackStart;
              EffectStop += TrackStart;
              
              // minimal error checking on times
              //
              if( m_rtRenderStart != -1 )
              {
                  if( ( EffectStop <= m_rtRenderStart ) || ( EffectStart >= m_rtRenderStop ) )
                  {
                      continue; // effects
                  }
                  else
                  {
                      EffectStart -= m_rtRenderStart;
                      EffectStop -= m_rtRenderStart;
                  }
              }
                  
              // align times to frame boundary
              //
              hr = pEffect->FixTimes( &EffectStart, &EffectStop );
              
              // too short, we're ignoring it
              if (EffectStart >= EffectStop)
                  continue;
                
              if (!IsCompressed) {
                  // find the effect's GUID.
                  //
                  GUID EffectGuid = GUID_NULL;
                  hr = pEffect->GetSubObjectGUID( &EffectGuid );
                  ASSERT( !FAILED( hr ) );
                  if( FAILED( hr ) )
                  {
                      // effect failed to give us something valuable, we should ignore it.
                      //
                      continue; // effects
                  }
                  
                  CComPtr< IPropertySetter > pSetter;
                  hr = pEffect->GetPropertySetter( &pSetter );
                  // can't fail
                  ASSERT( !FAILED( hr ) );
                  
                  // ask for the wrap interface
                  //
                  DEXTER_PARAM_DATA ParamData;
                  ZeroMemory( &ParamData, sizeof( ParamData ) );
                  ParamData.rtStart = EffectStart;
                  ParamData.rtStop = EffectStop;
                  ParamData.pSetter = pSetter;
                  hr = pTrackMixEffect->QParamData(
                      EffectStart,
                      EffectStop,
                      EffectGuid,
                      NULL, // effect com object
                      &ParamData );
                  if( FAILED( hr ) )
                  {
                      // QParamData logs its own errors
                      continue; // effects
                  }
                  // QParamData logs its own errors
                  
              }	// if (!IsCompressed)
              
              // tell the grid who is grabbing what
              
              worked = VidGrid.RowIAmEffectNow( EffectStart, EffectStop, vidswitcheroutpin );
                if( !worked )
                {
                    hr = E_OUTOFMEMORY;
                    goto die;
                }
                  
              VidGrid.DumpGrid( );

          } // for all the effects
          
          // bump these to make room for the effect
          //
          vidswitcheroutpin++;
          vidswitcherinpin++;
          gridinpin++;
          
        } // if any effects on track
        
        // ask this TRACK if it has a transition, or two
        //
        CComQIPtr< IAMTimelineTransable, &IID_IAMTimelineTransable > pTrackTransable( pLayer );
        ASSERT( pTrackTransable );
        long TransitionCount = 0;
        hr = pTrackTransable->TransGetCount( &TransitionCount );
        if( TransitionCount )
        {
            DbgTimer TransitionTimer( "Trans Timer" );

            CComPtr< IAMMixEffect > pMixEffect;
            if( !IsCompressed )
            {
                // create the DXT wrapper
                //
                CComPtr< IBaseFilter > pDXTBase;
                hr = _CreateObject(
                    CLSID_DXTWrap,
                    IID_IBaseFilter,
                    (void**) &pDXTBase,
                    TrackID + ID_OFFSET_TRANSITION );
                ASSERT( !FAILED( hr ) );
                if( FAILED( hr ) )
                {
                    hr = _GenerateError( 2, DEX_IDS_INSTALL_PROBLEM, hr );
                    goto die;
                }

                // tell it about our error log
                //
                CComQIPtr< IAMSetErrorLog, &IID_IAMSetErrorLog > pErrLog( pDXTBase);
                if( pErrLog )
                {
                    pErrLog->put_ErrorLog( m_pErrorLog );
                }
                
                // add it to the graph
                //
                hr = _AddFilter( pDXTBase, L"DXT Wrapper", TrackID + ID_OFFSET_TRANSITION );
                ASSERT( !FAILED( hr ) );
                if( FAILED( hr ) )
                {
                    hr = _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
                    goto die;
                }
                
                // get the effect interface
                //
                hr = pDXTBase->QueryInterface( IID_IAMMixEffect, (void**) &pMixEffect );
                ASSERT( !FAILED( hr ) );
                
                // reset the DXT so we can reprogram it.
                // !!! take this out someday, make QParamdata more efficient
                //
                pMixEffect->Reset( );
                
                // set up some stuff now
                //
                hr = pMixEffect->SetNumInputs( 2 );
                hr = pMixEffect->SetMediaType( pGroupMediaType );
                ASSERT( !FAILED( hr ) );
                
                // set the default effect
                //
                GUID DefaultEffect = GUID_NULL;
                m_pTimeline->GetDefaultTransition( &DefaultEffect );
                hr = pMixEffect->SetDefaultEffect( &DefaultEffect );
                
                // find it's pins...
                //
                IPin * pFilterInPin1 = NULL;
                IPin * pFilterInPin2 = NULL;
                IPin * pFilterOutPin = NULL;
                pFilterInPin1 = GetInPin( pDXTBase, 0 );
                ASSERT( pFilterInPin1 );
                if( !pFilterInPin1 )
                {
                    hr = _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
                    goto die;
                }
                pFilterInPin2 = GetInPin( pDXTBase, 1 );
                ASSERT( pFilterInPin2 );
                if( !pFilterInPin2 )
                {
                    hr = _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
                    goto die;
                }
                pFilterOutPin = GetOutPin( pDXTBase, 0 );
                ASSERT( pFilterOutPin );
                if( !pFilterOutPin )
                {
                    hr = _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
                    goto die;
                }
                CComPtr< IPin > pSwitcherOutPin1;
                _pVidSwitcherBase->GetOutputPin( vidswitcheroutpin, &pSwitcherOutPin1 );
                ASSERT( pSwitcherOutPin1 );
                if( !pSwitcherOutPin1 )
                {
                    hr = _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
                    goto die;
                }
                CComPtr< IPin > pSwitcherOutPin2;
                _pVidSwitcherBase->GetOutputPin(vidswitcheroutpin + 1, &pSwitcherOutPin2 );
                ASSERT( pSwitcherOutPin2 );
                if( !pSwitcherOutPin2 )
                {
                    hr = _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
                    goto die;
                }
                CComPtr< IPin > pSwitcherInPin;
                _pVidSwitcherBase->GetInputPin( vidswitcherinpin, &pSwitcherInPin );
                ASSERT( pSwitcherInPin );
                if( !pSwitcherInPin )
                {
                    hr = _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
                    goto die;
                }

                // connect them all up
                //
                hr = _Connect( pSwitcherOutPin1, pFilterInPin1 );
                if( FAILED( hr ) )
                {
                    hr = _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
                    goto die;
                }
                ASSERT( !FAILED( hr ) );

                hr = _Connect( pSwitcherOutPin2, pFilterInPin2 );
                ASSERT( !FAILED( hr ) );
                if( FAILED( hr ) )
                {
                    hr = _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
                    goto die;
                }

                hr = _Connect( pFilterOutPin, pSwitcherInPin );
                ASSERT( !FAILED( hr ) ); 
                if( FAILED( hr ) )
                {
                    hr = _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
                    goto die;
                }

            } // if !IsCompressed
            
            bUsedNewGridRow = true;
            VidGrid.WorkWithNewRow( vidswitcherinpin, gridinpin, LayerEmbedDepth, 0 );
            
            // for each transition on the track, add it to the DXT wrapper
            //
            REFERENCE_TIME TransInOut = 0;
            for( long CurTrans = 0 ; CurTrans < TransitionCount ; CurTrans++ )
            {
                // yup, it's got one alright
                //
                CComPtr< IAMTimelineObj > pTransObj;
                hr = pTrackTransable->GetNextTrans( &pTransObj, &TransInOut );
                if( !pTransObj )
                {
                    // for some reason, it didn't show up, ignore it
                    //
                    continue; // transitions
                }
                
                // ask if the Trans is muted 
                //
                BOOL TransMuted = FALSE;
                pTransObj->GetMuted( &TransMuted );
                if( TransMuted )
                {
                    // don't look at this
                    //
                    continue; // transitions
                }
                
                CComQIPtr< IAMTimelineTrans, &__uuidof(IAMTimelineTrans) > pTrans( pTransObj );
                
                // ask the trans which direction to go
                //
                BOOL fSwapInputs;
                pTrans->GetSwapInputs(&fSwapInputs);
                
                // and get it's start/stop times
                //
                REFERENCE_TIME TransStart = 0;
                REFERENCE_TIME TransStop = 0;
                GUID TransGuid = GUID_NULL;
                pTransObj->GetStartStop( &TransStart, &TransStop );
                
                // need to add parent's times to transition's
                //
                TransStart += TrackStart;
                TransStop += TrackStart;
                
                // do some minimal error checking
                //
                if( m_rtRenderStart != -1 )
                {
                    if( ( TransStop <= m_rtRenderStart ) || ( TransStart >= m_rtRenderStop ) )
                    {
                        continue; // transitions
                    }
                    else
                    {
                        TransStart -= m_rtRenderStart;
                        TransStop -= m_rtRenderStart;
                    }
                }
                    
                // align the times to a frame boundary
                //
                hr = pTransObj->FixTimes( &TransStart, &TransStop );

                // too short, we're ignoring it
                if (TransStart >= TransStop)
                    continue;
                
                // get the cut point, in case we just do cuts only
                //
                REFERENCE_TIME CutTime = 0;
                hr = pTrans->GetCutPoint( &CutTime );
                ASSERT( !FAILED( hr ) );
                
                // this is an offset, so we need to bump it to get to TL time
                //
                CutTime += TrackStart;
                hr = pTransObj->FixTimes( &CutTime, NULL );
                
                // ask if we're only doing a cut
                //
                BOOL CutsOnly = FALSE;
                hr = pTrans->GetCutsOnly( &CutsOnly );
                
                // if we haven't enabled this transition for real, then we need
                // to tell the grid we need some space in order to live
                //
                if( !EnableTransitions || CutsOnly )
                {
                    worked = VidGrid.PleaseGiveBackAPieceSoICanBeACutPoint( TransStart, TransStop, TransStart + CutTime );
                    if( !worked )
                    {
                        hr = E_OUTOFMEMORY;
                        goto die;
                    }
                
                    // that's all, do the next one
                    //
                    continue; // transitions
                }
                
                if( !IsCompressed )
                {
                    // ask the transition for the effect it wants to provide
                    //
                    hr = pTransObj->GetSubObjectGUID( &TransGuid );
                    if( FAILED( hr ) )
                    {
                        continue; // transitions
                    }
                    
                    CComPtr< IPropertySetter > pSetter;
                    hr = pTransObj->GetPropertySetter( &pSetter );
                    // can't fail
                    ASSERT( !FAILED( hr ) );
                    
                    // ask for the wrap interface
                    //
                    DEXTER_PARAM_DATA ParamData;
                    ZeroMemory( &ParamData, sizeof( ParamData ) );
                    ParamData.rtStart = TransStart;
                    ParamData.rtStop = TransStop;
                    ParamData.pSetter = pSetter;
                    ParamData.fSwapInputs = fSwapInputs;
                    hr = pMixEffect->QParamData(
                        TransStart,
                        TransStop,
                        TransGuid,
                        NULL,
                        &ParamData );
                    if( FAILED( hr ) )
                    {
                        // QParamData logs its own errors
                        continue; // transitions
                    }
                    // QParamData logs its own errors
                } // if !IsCompressed
                
                {
                    DbgTimer d( "RowIAmTransitionNow" );

                    // tell the grid about it
                    //
                    worked = VidGrid.RowIAmTransitionNow( TransStart, TransStop, vidswitcheroutpin, vidswitcheroutpin + 1 );
                    if( !worked )
                    {
                        hr = E_OUTOFMEMORY;
                        goto die;
                    }

                    VidGrid.DumpGrid( );
                }
                
            } // for CurTrans
            
            vidswitcheroutpin += 2;
            vidswitcherinpin++;
            gridinpin++;
            
        } // if TransitionCount

        // we must only call DoneWithLayer if we've called WorkWithNewRow above
        // (bUsedNewGridRow) or if we're a composition and some deeper depth
        // called DoneWithLayer.
        // We won't get this far for an emtpy track, so if bUsedNewGridRow is
        // not set, we know we're a comp.
        //
        if ((LastEmbedDepth > LayerEmbedDepth &&
                LastUsedNewGridRow > LayerEmbedDepth) || bUsedNewGridRow) {
            VidGrid.DoneWithLayer( );
            VidGrid.DumpGrid( );
            LastUsedNewGridRow = LayerEmbedDepth; // last layer to call Done
        }

        // remember these previous settings
        LastEmbedDepth = LayerEmbedDepth;

    } // while VideoLayers
    
die:

    DbgTimer ExtraTimer( "(rendeng) Extra Stuff" );
    
    // free the re-using source stuff now that we're either done or we
    // hit an error
    for (int yyy = 0; yyy < cList; yyy++) {
	SysFreeString(pREUSE[yyy].bstrName);
        if (pREUSE[yyy].pMiniSkew)      // failed re-alloc would make this NULL
	    QzTaskMemFree(pREUSE[yyy].pMiniSkew);
    }
    if (pREUSE)
        QzTaskMemFree(pREUSE);
    if (FAILED(hr))
	return hr;


    worked = VidGrid.PruneGrid( );
    if( !worked )
    {
        hr = E_OUTOFMEMORY;
        return hr;
    }
    VidGrid.DumpGrid( );
    
    if( IsCompressed )
    {
        VidGrid.RemoveAnyNonCompatSources( );
    }

#ifdef DEBUG
    long zzz1 = timeGetTime( );
#endif

    // make the switch connections now
    //
    for( int vip = 0 ; vip < vidinpins ; vip++ )
    {
        VidGrid.WorkWithRow( vip );
        long SwitchPin = VidGrid.GetRowSwitchPin( );
        REFERENCE_TIME InOut = -1;
        REFERENCE_TIME Stop = -1;
        int nUsed = 0;	// how many different ranges there are for each BLACK
        STARTSTOPSKEW * pSkew = NULL;
        int nSkew = 0;
        
        if( VidGrid.IsRowTotallyBlank( ) )
        {
            continue;
        }

        if( IsCompressed )
        {
            // if we're compressed, then we need to do some source stuff now.

            // ignore black layers, we don't deal with these in the compressed case
            //
            if( vip < VideoLayers )
            {
                continue;
            }
            
            // find out how many different ranges this layer is going to have. We
            // need to tell the switcher to set up the skews for all the dynamic
            // source information.
            //
            long Count = 0;
            while( 1 )
            {
                long Value = 0;
                VidGrid.RowGetNextRange( &InOut, &Stop, &Value );
                if( InOut == Stop )
                {
                    break;
                }
                if( Value != ROW_PIN_OUTPUT )
                {
                    continue;
                }
                
                Count++;
            }
            
            // create a skew array
            //
            STARTSTOPSKEW * pSkews = new STARTSTOPSKEW[Count];
            if( !pSkews )
            {
                hr = E_OUTOFMEMORY;
                return hr;
            }
            
            InOut = -1;
            Stop = -1;
            Count = 0;
            
            // go through each range and set up the switch's X-Y values for this layer
            //
            while( 1 )
            {
                long Value = 0;
                
                VidGrid.RowGetNextRange( &InOut, &Stop, &Value );
                
                // ah, we're done with all the columns, we can go to the next row (pin)
                //
                if( InOut == Stop || InOut >= TotalDuration )
                {
                    break;
                }
                
                if( Value != ROW_PIN_OUTPUT )
                {
                    hr = m_pSwitcherArray[WhichGroup]->SetX2Y( InOut, SwitchPin, -1 );
                    ASSERT( !FAILED( hr ) );
                    if( FAILED( hr ) )
                    {
                        // must be out of memory
                        return _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
                    }
                    continue;
                }
                
                Value = 0;
                
                // tell the switch to go from x to y at time
                //
                hr= m_pSwitcherArray[WhichGroup]->SetX2Y(InOut, SwitchPin, Value);
                ASSERT( !FAILED( hr ) );
                if( FAILED( hr ) )
                {
                    // must be out of memory
                    return _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
                }
                
                pSkews[Count].rtStart = InOut;
                pSkews[Count].rtStop = Stop;
                pSkews[Count].rtSkew = 0;
                pSkews[Count].dRate = 1.0;
                Count++;
                
            } // while( 1 ) (columns for row)

            // merge what we can and set up the skews right
            //
            hr = m_pSwitcherArray[WhichGroup]->ReValidateSourceRanges( SwitchPin, Count, pSkews );
            if( FAILED( hr ) )
            {
                return hr;
            }
            
            delete [] pSkews;
        }
        else
        {
            // the row is not compressed. go through each range on the row
            // and find out where it goes to and set up the switch's X-Y array
            //
            while( 1 )
            {
                long Value = 0;
                
                VidGrid.RowGetNextRange( &InOut, &Stop, &Value );
                
                // ah, we're done with all the columns, we can go to the next row (pin)
                //
                if( InOut == Stop || InOut >= TotalDuration )
                {
                    break;
                }
                
                // if this pin wants to go somewhere on the output
                //
                if( Value >= 0 || Value == ROW_PIN_OUTPUT )
                {
                    // if it wants to go to the output pin...
                    //
                    if (Value == ROW_PIN_OUTPUT)
                    {
                        Value = 0;
                    }
                    
                    // do some fancy processing for setting up the black sources, if not compressed
                    //
                    if( vip < VideoLayers )
                    {
                        if( nUsed == 0 ) 
                        {
                            nSkew = 10;	// start with space for 10
                            pSkew = (STARTSTOPSKEW *)CoTaskMemAlloc(nSkew *
                                sizeof(STARTSTOPSKEW));
                            if (pSkew == NULL)
                                return _GenerateError( 1, DEX_IDS_GRAPH_ERROR,	
                                E_OUTOFMEMORY);
                        } else if (nUsed == nSkew) {
                            nSkew += 10;
                            pSkew = (STARTSTOPSKEW *)CoTaskMemRealloc(pSkew, nSkew *
                                sizeof(STARTSTOPSKEW));
                            if (pSkew == NULL)
                                return _GenerateError( 1, DEX_IDS_GRAPH_ERROR,	
                                E_OUTOFMEMORY);
                        }
                        pSkew[nUsed].rtStart = InOut;
                        pSkew[nUsed].rtStop = Stop;
                        pSkew[nUsed].rtSkew = 0;
                        pSkew[nUsed].dRate = 1.0;
                        nUsed++;
                        
                    } // if a black layer
                    
                    // tell the switch to go from x to y at time
                    //
                    hr= m_pSwitcherArray[WhichGroup]->SetX2Y(InOut, SwitchPin, Value);
                    ASSERT( !FAILED( hr ) );
                    if( FAILED( hr ) )
                    {
                        // must be out of memory
                        return _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
                    }
                    
                } // the pin wanted to go somewhere on the output
                
                // either it's unassigned or another track has higher priority and
                // no transition exists at this time, so it should be invisible
                //
                else if( Value == ROW_PIN_UNASSIGNED || Value < ROW_PIN_OUTPUT )
                {
                    // make sure not to program anything if this is a black source
                    // that is about to be removed, or programmed later, or the
                    // switch won't work
                    if (SwitchPin >= VideoLayers || nUsed)
                    {
                        hr = m_pSwitcherArray[WhichGroup]->SetX2Y( InOut, SwitchPin,
                            ROW_PIN_UNASSIGNED );
                        ASSERT( !FAILED( hr ) );
                        if( FAILED( hr ) )
                        {
                            // must be out of memory
                            return _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
                        }
                    }
                }
                
                // this should never happen
                //
                else
                {
                    ASSERT( 0 );
                }
                
            } // while( 1 ) (columns for row)
        } // if !Compressed
        
        // if compressed, the above logic forces nUsed to be 0, so the below
        // code doesn't execute
        
        // Process the black sources now, since we forgot before
        
        // No dynamic sources, make the black source now
        //
        if( !( DynaFlags & CONNECTF_DYNAMIC_SOURCES ) ) {
            
            if (nUsed) {
                IPin * pOutPin = NULL;
                hr = BuildSourcePart(
                    m_pGraph, 
                    FALSE, 
                    0, 
                    pGroupMediaType, 
                    GroupFPS, 
                    0, 
                    0, 
                    nUsed, 
                    pSkew, 
                    this, 
                    NULL, 
                    NULL,
		    NULL,
                    &pOutPin, 
                    0, 
                    m_pDeadCache,
                    IsCompressed,
                    m_MedLocFilterString,
                    m_nMedLocFlags,
                    m_pMedLocChain, NULL, NULL );
                
                CoTaskMemFree(pSkew);
                
                if (FAILED(hr)) {
                    // error was already logged
                    return hr;
                }
                
                pOutPin->Release(); // not the last ref
                
                CComPtr< IPin > pSwitchIn;
                _pVidSwitcherBase->GetInputPin( SwitchPin, &pSwitchIn);
                if( !pSwitchIn )
                {
                    ASSERT(FALSE);
                    return _GenerateError(1,DEX_IDS_GRAPH_ERROR,E_OUTOFMEMORY);
                }
                
                hr = _Connect( pOutPin, pSwitchIn );
                ASSERT( !FAILED( hr ) );
                if( FAILED( hr ) )
                {
                    return _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
                }
                
                // tell the switcher that we're a source pin
                //
                hr = m_pSwitcherArray[WhichGroup]->InputIsASource(SwitchPin,TRUE);
                
            }
            
            // DYNAMIC sources, make the source later
            //
        } else {
            if (nUsed) {
                // this will merge skews
                AM_MEDIA_TYPE mt;
                ZeroMemory(&mt, sizeof(AM_MEDIA_TYPE));
                hr = m_pSwitcherArray[WhichGroup]->AddSourceToConnect(
                    NULL, &GUID_NULL,
                    0, 0, 0,
                    nUsed, pSkew, SwitchPin, FALSE, 0, mt, 0.0, NULL);
                CoTaskMemFree(pSkew);
                if (FAILED(hr))	// out of memory?
                    return _GenerateError( 1, DEX_IDS_INSTALL_PROBLEM, hr );
                
                // tell the switcher that we're a source pin
                //
                hr = m_pSwitcherArray[WhichGroup]->InputIsASource(SwitchPin,TRUE);
                
            }
        }
    } // for vip (video input pin)
    
    // finally, at long last, see if the switch used to have something connected
    // to it. If it did, restore the connection
    // !!! this might fail if we're using 3rd party  filters which don't
    // accept input pin reconnections if the output pin is already connected.\
    // if this happens, we might have to write some clever connect function that
    // deals with this scenario.
    //
    if( m_pSwitchOuttie[WhichGroup] )
    {
        CComPtr< IPin > pSwitchRenderPin;
        _pVidSwitcherBase->GetOutputPin( 0, &pSwitchRenderPin );
        hr = _Connect( pSwitchRenderPin, m_pSwitchOuttie[WhichGroup] );
        ASSERT( !FAILED( hr ) );
        m_pSwitchOuttie[WhichGroup].Release( );
    }

#ifdef DEBUG
    zzz1 = timeGetTime( ) - zzz1;
    DbgLog( ( LOG_TIMING, 1, "RENDENG::Took %ld to process switch X-Y hookups", zzz1 ) );
#endif

    m_nGroupsAdded++;
    
    return hr;
}


// little helper function in DXT.cpp
//
extern HRESULT VariantFromGuid(VARIANT *pVar, BSTR *pbstr, GUID *pGuid);

//############################################################################
// 
//############################################################################

HRESULT CRenderEngine::_AddAudioGroupFromTimeline( long WhichGroup, AM_MEDIA_TYPE * pGroupMediaType )
{
    HRESULT hr = 0;
    
    // ask for how many sources we have total
    //
    long Dummy = 0;
    long AudioSourceCount = 0;
    m_pTimeline->GetCountOfType( WhichGroup, &AudioSourceCount, &Dummy, TIMELINE_MAJOR_TYPE_SOURCE );
    
    // if this group has nothing in it, we'll product audio silence
    //
    if( AudioSourceCount < 1 )
    {
        //        return NOERROR;
    }
    
    // are we allowed to have effects on the timeline right now?
    //
    BOOL EnableFx = FALSE;
    m_pTimeline->EffectsEnabled( &EnableFx );
    
    // ask for how many effects we have total
    //
    Dummy = 0;
    long EffectCount = 0;
    m_pTimeline->GetCountOfType( WhichGroup, &EffectCount, &Dummy, TIMELINE_MAJOR_TYPE_EFFECT );
    if( !EnableFx )
    {
        EffectCount = 0;
    }
    
    CComPtr< IAMTimelineObj > pGroupObj;
    hr = m_pTimeline->GetGroup( &pGroupObj, WhichGroup );
    ASSERT( !FAILED( hr ) );
    if( FAILED( hr ) )
    {
        return _GenerateError( 2, DEX_IDS_TIMELINE_PARSE, hr );
    }

    long SwitchID = 0;
    pGroupObj->GetGenID( &SwitchID );
    
    hr = _CreateObject(
        CLSID_BigSwitch,
        IID_IBigSwitcher,
        (void**) &m_pSwitcherArray[WhichGroup],
        SwitchID );
    ASSERT( !FAILED( hr ) );
    if( FAILED( hr ) )
    {
        return _GenerateError( 2, DEX_IDS_INSTALL_PROBLEM, hr );
    }
    
    m_pSwitcherArray[WhichGroup]->Reset( );
    // the switch may need to know what group it is
    m_pSwitcherArray[WhichGroup]->SetGroupNumber( WhichGroup );

    // tell the switch if we're doing dynamic reconnections or not
    hr = m_pSwitcherArray[WhichGroup]->SetDynamicReconnectLevel(m_nDynaFlags);
    ASSERT(SUCCEEDED(hr));
    
    // tell the switch about our error log
    //
    CComQIPtr< IAMSetErrorLog, &IID_IAMSetErrorLog > pSwitchLog( m_pSwitcherArray[WhichGroup] );
    if( pSwitchLog )
    {
        pSwitchLog->put_ErrorLog( m_pErrorLog );
    }
    
    // ask timeline how many actual tracks it has
    //
    long AudioTrackCount = 0;   // tracks only
    long AudioLayers = 0;       // tracks including compositions
    m_pTimeline->GetCountOfType( WhichGroup, &AudioTrackCount, &AudioLayers, TIMELINE_MAJOR_TYPE_TRACK );
    
#if 0  // one bad group will stop the whole project from playing
    if( AudioTrackCount < 1 )
    {
        return NOERROR;
    }
#endif
    
    CTimingGrid AudGrid;
    
    CComQIPtr< IAMTimelineComp, &IID_IAMTimelineComp > pGroupComp( pGroupObj );
    if( !pGroupComp )
    {
        hr = E_NOINTERFACE;
        return _GenerateError( 2, DEX_IDS_INTERFACE_ERROR, hr );
    }
    CComQIPtr< IAMTimelineGroup, &IID_IAMTimelineGroup > pGroup( pGroupObj );
    if( !pGroup )
    {
        hr = E_NOINTERFACE;
        return _GenerateError( 2, DEX_IDS_INTERFACE_ERROR, hr );
    }
    
    // ask for this group's frame rate, so we can tell switch about it
    //
    double GroupFPS = DEFAULT_FPS;
    hr = pGroup->GetOutputFPS(&GroupFPS);
    ASSERT(hr == S_OK);
    
    // aks it for it's preview mode, so we can tell switch about it
    //
    BOOL fPreview;
    hr = pGroup->GetPreviewMode(&fPreview);
    
    WCHAR GroupName[256];
    BSTR bstrGroupName;
    hr = pGroup->GetGroupName( &bstrGroupName );
    if( FAILED( hr ) )
    {
        return E_OUTOFMEMORY;
    }
    wcscpy( GroupName, bstrGroupName );
    SysFreeString( bstrGroupName );
    
    // add the switch to the graph
    //
    IBigSwitcher *&_pAudSwitcherBase = m_pSwitcherArray[WhichGroup];
    CComQIPtr< IBaseFilter, &IID_IBaseFilter > pAudSwitcherBase( _pAudSwitcherBase );
    hr = _AddFilter( pAudSwitcherBase, GroupName, SwitchID );
    ASSERT( !FAILED( hr ) );
    if( FAILED( hr ) )
    {
        return _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
    }
    
    // find out if the switch output pin is connected. If it is,
    // disconnect it, but remember what it was connected to
    //
    CComPtr< IPin > pSwitchRenderPin;
    _pAudSwitcherBase->GetOutputPin( 0, &pSwitchRenderPin );
    if( pSwitchRenderPin )
    {
        pSwitchRenderPin->ConnectedTo( &m_pSwitchOuttie[WhichGroup] );
        if( m_pSwitchOuttie[WhichGroup] )
        {
            m_pSwitchOuttie[WhichGroup]->Disconnect( );
            pSwitchRenderPin->Disconnect( );
        }
    }

    long audoutpins = 0;
    audoutpins += 1;            // rendering pin
    audoutpins += EffectCount;  // one output pin per effect
    audoutpins += AudioLayers;  // one output pin per layer, this includes tracks and comps
    audoutpins += _HowManyMixerOutputs( WhichGroup );   
    long audinpins = audoutpins + AudioSourceCount;
    long audswitcheroutpin = 0;
    long audswitcherinpin = 0;
    long gridinpin = 0;
    audswitcheroutpin++;
    
    audinpins += AudioTrackCount;                      // account for black sources
    
    // set the switch's pin depths, in and out
    //
    hr = m_pSwitcherArray[WhichGroup]->SetInputDepth( audinpins );
    ASSERT( !FAILED( hr ) );
    if( FAILED( hr ) )
    {
        // must be out of memory
        return _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
    }
    hr = m_pSwitcherArray[WhichGroup]->SetOutputDepth( audoutpins );
    ASSERT( !FAILED( hr ) );
    if( FAILED( hr ) )
    {
        // must be out of memory
        return _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
    }
    
    // set the media type it accepts
    //
    hr = m_pSwitcherArray[WhichGroup]->SetMediaType( pGroupMediaType );
    ASSERT( !FAILED( hr ) );
    if( FAILED( hr ) )
    {
        VARIANT var;
        VariantInit(&var);
        var.vt = VT_I4;
        var.lVal = WhichGroup;
        return _GenerateError( 2, DEX_IDS_BAD_MEDIATYPE, hr, &var );
    }
    
    // set the frame rate
    //
    m_pSwitcherArray[WhichGroup]->SetFrameRate( GroupFPS );
    ASSERT( !FAILED( hr ) );
    
    // set the preview mode
    //
    hr = m_pSwitcherArray[WhichGroup]->SetPreviewMode( fPreview );
    ASSERT( !FAILED( hr ) );
    
    // set the duration
    //
    REFERENCE_TIME TotalDuration = 0;
    m_pTimeline->GetDuration( &TotalDuration );
    
    if( m_rtRenderStart != -1 )
    {
        if( TotalDuration > ( m_rtRenderStop - m_rtRenderStart ) )
        {
            TotalDuration = m_rtRenderStop - m_rtRenderStart;
        }
    }
    pGroupObj->FixTimes( NULL, &TotalDuration );

    if (TotalDuration == 0)
        return S_FALSE; // don't abort, other groups might still work

    hr = m_pSwitcherArray[WhichGroup]->SetProjectLength( TotalDuration );
    ASSERT( !FAILED( hr ) );
    
    bool worked = AudGrid.SetNumberOfRows( audinpins + 1 );
    if( !worked )
    {
        hr = E_OUTOFMEMORY;
        return _GenerateError( 2, DEX_IDS_GRID_ERROR, hr );
    }
    
    // there is a virtual silence track as the first track... any real
    // tracks with transparent holes in them will make you hear this
    // silence.
    
    // tell the grid about the silent row... it's a special row that is
    // never supposed to be mixed with anything 
    // so use -1.
    //
    AudGrid.WorkWithNewRow( audswitcherinpin, gridinpin, -1, 0 );
    worked = AudGrid.RowIAmOutputNow( 0, TotalDuration, THE_OUTPUT_PIN );
    if( !worked )
    {
        hr = E_OUTOFMEMORY;
        return hr;
    }
    
    audswitcherinpin++;
    gridinpin++;
    
    // we are going to be clever, and if the same source is used
    // more than once in a project, we'll use the same source filter
    // instead of opening the source several times.
	
    // for each source in the project, we'll fill in this structure, which
    // contains everything necessary to determine if it's really exactly the
    // same, plus an array of all the times it's used in other places, so we
    // can re-use it only if none of the times it is used overlap (we can't
    // very well have one source filter giving 2 spots in the same movie at
    // the same time, can we?)

    typedef struct {
	long ID;
   	BSTR bstrName;
   	GUID guid;
   	long nStreamNum;
	int nPin;
	int cTimes;	// how big the following array is
        int cTimesMax;	// how much space is allocated
        MINI_SKEW * pMiniSkew;
        double dTimelineRate;
    } DEX_REUSE;

    // make a place to hold an array of names and guids (of the sources
    // in this project) and which pin they are on
    long cListMax = 20, cList = 0;
    DEX_REUSE *pREUSE = (DEX_REUSE *)QzTaskMemAlloc(cListMax *
						sizeof(DEX_REUSE));
    if (pREUSE == NULL) {
        return _GenerateError( 1, DEX_IDS_GRAPH_ERROR, E_OUTOFMEMORY);
    }

    // which physical track are we on in our enumeration? (0-based) not counting
    // comps and the group
    int WhichTrack = -1;

    long LastEmbedDepth = 0;
    long LastUsedNewGridRow = 0;

    // add source filters for each source on the timeline
    //
    for(  int CurrentLayer = 0 ; CurrentLayer < AudioLayers ; CurrentLayer++ )
    {
        DbgTimer CurrentLayerTimer( "(rendeng) Audio Layer" );

        // get the layer itself
        //
        CComPtr< IAMTimelineObj > pLayer;
	// NB: This function enumerates things inside out... tracks, then
	// the comp they're in, etc. until finally returning the group
	// It's NOT only giving real tracks!
        hr = pGroupComp->GetRecursiveLayerOfType( &pLayer, CurrentLayer, TIMELINE_MAJOR_TYPE_TRACK );
        ASSERT( !FAILED( hr ) );
        if( FAILED( hr ) )
        {
            continue; // audio layers
        }
        
        DbgTimer CurrentLayerTimer2( "(rendeng) Audio Layer 2" );

	// I'm figuring out which physical track we're on
	TIMELINE_MAJOR_TYPE tx;
	pLayer->GetTimelineType(&tx);
	if (tx == TIMELINE_MAJOR_TYPE_TRACK)
	    WhichTrack++;

        // ask if the layer is muted
        //
        BOOL LayerMuted = FALSE;
        pLayer->GetMuted( &LayerMuted );
        if( LayerMuted )
        {
            // don't look at this layer
            //
            continue; // audio layers
        }
        
        long TrackPriority = 0;
        CComQIPtr< IAMTimelineVirtualTrack, &IID_IAMTimelineVirtualTrack > pVTrack( pLayer );
        if( pVTrack )
        {
            pVTrack->TrackGetPriority( &TrackPriority );
        }
        
        DbgTimer CurrentLayerTimer3( "(rendeng) Audio Layer 3" );
        
        long LayerEmbedDepth = 0;
        pLayer->GetEmbedDepth( &LayerEmbedDepth );
        
        CComQIPtr< IAMTimelineTrack, &IID_IAMTimelineTrack > pTrack( pLayer );
        
        bool bUsedNewGridRow = false;

        // get all the sources for this layer
        //
	if ( pTrack )
        {
            CComPtr< IAMTimelineObj > pSourceLast;
            CComPtr< IAMTimelineObj > pSourceObj;

	    // which source are we on?
	    int WhichSource = -1;

            while( 1 )
            {
                DbgTimer CurrentSourceTimer( "(rendeng) Audio Source" );

                pSourceLast = pSourceObj;
                pSourceObj.Release();

                // get the next source on this layer, given a time.
                //
                hr = pTrack->GetNextSrcEx( pSourceLast, &pSourceObj );

                // ran out of sources, so we're done
                //
                if( hr != NOERROR )
                {
                    break;
                }
                
                CComQIPtr< IAMTimelineSrc, &IID_IAMTimelineSrc > pSource( pSourceObj );
                ASSERT( pSource );
                if( !pSource )
                {
                    // this one bombed, look at the next
                    //
                    continue; // sources
                }
                
		// keeping track of which source this is
		WhichSource++;

                // ask if the source is muted
                //
                BOOL SourceMuted = FALSE;
                pSourceObj->GetMuted( &SourceMuted );
                if( SourceMuted )
                {
                    // don't look at this source
                    //
                    continue; // sources
                }
                
                // ask this source for it's start/stop times
                //
                REFERENCE_TIME SourceStart = 0;
                REFERENCE_TIME SourceStop = 0;
                hr = pSourceObj->GetStartStop( &SourceStart, &SourceStop );
		REFERENCE_TIME SourceStartOrig = SourceStart;
		REFERENCE_TIME SourceStopOrig = SourceStop;
                ASSERT( !FAILED( hr ) );
                if (FAILED(hr) || SourceStart == SourceStop) {
                    // this source exists for zero time!
                    continue;
                }
                
                long SourceID = 0;
                pSourceObj->GetGenID( &SourceID );
                
                // ask this source for it's media start/stops
                //
                REFERENCE_TIME MediaStart = 0;
                REFERENCE_TIME MediaStop = 0;
                hr = pSource->GetMediaTimes( &MediaStart, &MediaStop );
		REFERENCE_TIME MediaStartOrig = MediaStart;
		REFERENCE_TIME MediaStopOrig = MediaStop;
                ASSERT( !FAILED( hr ) );
                
                // !!! Not sure the right way to handle sources with no media times
                // So the AUDPACK doesn't mess up, we'll make MTime = TLTime
                if (MediaStart == MediaStop) {
                    MediaStop = MediaStart + (SourceStop - SourceStart);
                }
                
                // if this is out of our render range, then skip it
                //
                if( m_rtRenderStart != -1 )
                {
                    SourceStart -= m_rtRenderStart;
                    SourceStop -= m_rtRenderStart;

                    if( ( SourceStop <= 0 ) || SourceStart >= ( m_rtRenderStop - m_rtRenderStart ) )
                    {
                        continue; // while sources
                    }
                }
                
                ValidateTimes( SourceStart, SourceStop, MediaStart, MediaStop, GroupFPS, TotalDuration );
                
                if(SourceStart == SourceStop)
                {
                    // source combining, among other things, will mess up if
                    // we try and play something for 0 length.  ignore this.
                    //
                    continue; // sources
                }

                // ask the source which stream number it wants to provide, since it
                // may be one of many
                //
                long StreamNumber = 0;
                hr = pSource->GetStreamNumber( &StreamNumber );
                
                CComBSTR bstrName;
                hr = pSource->GetMediaName( &bstrName );
                if( FAILED( hr ) )
                {
                    goto die;
                }
                GUID guid;
                hr = pSourceObj->GetSubObjectGUID(&guid);
                double sfps;
                hr = pSource->GetDefaultFPS( &sfps );
                ASSERT(hr == S_OK); // can't fail, really
                
                STARTSTOPSKEW skew;
                skew.rtStart = MediaStart;
                skew.rtStop = MediaStop;
                skew.rtSkew = SourceStart - MediaStart;
                
#if 0	// needed for audio?
                // !!! Not sure the right way to handle sources with no media times
                // So the FRC doesn't get confused, we'll make MTime = TLTime
                if (MediaStart == MediaStop) {
                    MediaStop = MediaStart + (SourceStop - SourceStart);
                }
#endif

	    // !!! rate calculation appears in several places
            if (MediaStop == MediaStart || SourceStop == SourceStart)
	        skew.dRate = 1;
            else
	        skew.dRate = (double) ( MediaStop - MediaStart ) /
					( SourceStop - SourceStart );

    	    DbgLog((LOG_TRACE,1,TEXT("RENDENG::Working with source")));
    	    DbgLog((LOG_TRACE,1,TEXT("%ls"), (WCHAR *)bstrName));

	    // get the props for the source
            CComPtr< IPropertySetter > pSetter;
            hr = pSourceObj->GetPropertySetter(&pSetter);

	    // in the spirit of using only 1 source filter for
	    // both the video and the audio of a file, if both
	    // are needed, let's see if we have another group
	    // with the same piece of this file but with another
	    // media type
	    long MatchID = 0;
	    IPin *pSplit, *pSharePin = NULL;
	    BOOL fShareSource = FALSE;
            int nSwitch0InPin;
            // in smart recomp, we don't know what video pieces are needed,
            // they may not match the audio pieces needed, so source sharing
            // will NEVER WORK.  Don't try it
	    if (WhichGroup == 0 && !m_bUsedInSmartRecompression) {
		// I don't make sure the matching source isn't muted, etc.
		hr = _FindMatchingSource(bstrName, SourceStartOrig,
			    SourceStopOrig, MediaStartOrig, MediaStopOrig,
			    WhichGroup, WhichTrack, WhichSource,
			    pGroupMediaType, GroupFPS, &MatchID);
    		DbgLog((LOG_TRACE,1,TEXT("GenID %d matches with ID %d"),
						SourceID, MatchID));
	    } else if (WhichGroup == 1 && !m_bUsedInSmartRecompression) {
		for (int zyz = 0; zyz < m_cshare; zyz++) {
		    if (SourceID == m_share[zyz].MatchID) {
			fShareSource = SHARE_SOURCES;
                        // the split pin we're to build from
			pSharePin = m_share[zyz].pPin;
                        // group 0's switch inpin used for the shared source
			nSwitch0InPin = m_share[zyz].nSwitch0InPin;
                        // OK, we have a split pin, but not necessarily the
                        // right one, if we're using a special stream #
                        // We need the right one or BuildSourcePart's
                        // caching won't work
                        if (StreamNumber > 0 && pSharePin) {
                            // not addreffed or released
                            pSharePin = FindOtherSplitterPin(pSharePin, MEDIATYPE_Audio,
                                StreamNumber);
                        }
			// it's a dangly bit we are using
			_RemoveFromDanglyList(pSharePin);
    		    	DbgLog((LOG_TRACE,1,TEXT("GenID %d matches with ID %d"),
					SourceID, m_share[zyz].MatchID));
    			DbgLog((LOG_TRACE,1,TEXT("Time to SHARE source!")));
			break;
		    }
		}
	    }

	    // if a source has properties, do NOT share it with anybody, that
	    // other guy will unwittingly get my properties!
	    if (pSetter) {
		MatchID = 0;
		fShareSource = FALSE;
	    }

	    // If this source has been used before, and all the important
	    // parameters are the same, and the times don't overlap, then
	    // just re-use it using the same source filter we already made
	    // for it.

	    BOOL fCanReuse = FALSE;
            int nGrow;
            long SwitchInPinToUse = audswitcherinpin;
	    int xxx;

	    // go through all the sources in the project looking for a match
	    for (xxx = 0; xxx < cList; xxx++) {

	        // if a source has properties, do NOT re-use it, that
	        // other guy will unwittingly get my properties!
		if (pSetter) {
		    break;
		}

		// !!! Full path/no path will look different but won't be!
		if (!DexCompareW(pREUSE[xxx].bstrName, bstrName) &&
			pREUSE[xxx].guid == guid &&
			pREUSE[xxx].nStreamNum == StreamNumber) {

		    // we found this source already in use.  But do the 
		    // different times it's needed overlap?
	    	    fCanReuse = TRUE;
                    nGrow = -1;

		    for (int yyy = 0; yyy < pREUSE[xxx].cTimes; yyy++) {
			// Here's the deal.  Re-using a file needs to seek
			// the file to the new spot, which must take < 1/30s
			// or it will interrupt playback.  If there are few
			// keyframes (ASF) this will take hours.  We cannot
			// re-use sources if they are consecutive.  Open it
			// twice, it'll play better avoiding the seek, and ping
			// pong between the 2 sources every other source.

#ifdef COMBINE_SAME_SOURCES
                        double Rate1 = double( MediaStop - MediaStart ) / double( SourceStop - SourceStart );
                        double Rate2 = pREUSE[xxx].dTimelineRate;
                        REFERENCE_TIME OldMediaStop = pREUSE[xxx].pMiniSkew[yyy].rtMediaStop;
                        if( AreTimesAndRateReallyClose( 
                            pREUSE[xxx].pMiniSkew[yyy].rtStop, SourceStart, 
                            OldMediaStop, MediaStart, 
                            Rate1, Rate2, GroupFPS ) )
                        {
                            nGrow = yyy;
                            skew.dRate = 0.0;
    			    DbgLog((LOG_TRACE,1,TEXT("COMBINING with a previous source")));
                            break;
                        }
#endif

                        // if the start is really close to the reuse stop,
                        // and the rates are the same, we can combine them
                        //
			if (SourceStart < pREUSE[xxx].pMiniSkew[yyy].rtStop + HACKY_PADDING &&
				SourceStop > pREUSE[xxx].pMiniSkew[yyy].rtStart) {
        			fCanReuse = FALSE;
        			break;
			}
		    }
		    if (fCanReuse)
			break;
		}
	    }

            // Actually, we CAN'T re-use, if we're re-using a guy that is
            // sharing a parser... that would be both REUSE and SHARE, which,
            // as explained elsewhere, is illegal.
            if (WhichGroup == 1) {
                for (int zz = 0; zz < m_cshare; zz++) {
                    if (m_share[zz].MatchID == pREUSE[xxx].ID) {
                        fCanReuse = FALSE;
                    }
                }
            }

	    // We are re-using a previous source!  Add the times it is being
	    // used for this segment to the list of times it is used
	    if (fCanReuse) {

		// this is the pin the old source is coming in on
		SwitchInPinToUse = pREUSE[xxx].nPin;
            	DbgLog((LOG_TRACE,1,TEXT("Row %d REUSE source from pin %ld")
						, gridinpin, SwitchInPinToUse));

                if( nGrow == -1 )
                {
		    // need to grow the array first?
	            if (pREUSE[xxx].cTimes == pREUSE[xxx].cTimesMax) {
		        pREUSE[xxx].cTimesMax += 10;
	                pREUSE[xxx].pMiniSkew = (MINI_SKEW*)QzTaskMemRealloc(
			    	    pREUSE[xxx].pMiniSkew,
				    pREUSE[xxx].cTimesMax * sizeof(MINI_SKEW));
	                if (pREUSE[xxx].pMiniSkew == NULL)
		            goto die;
	            }
		    pREUSE[xxx].pMiniSkew[pREUSE[xxx].cTimes].rtStart = SourceStart;
		    pREUSE[xxx].pMiniSkew[pREUSE[xxx].cTimes].rtStop = SourceStop;
		    pREUSE[xxx].pMiniSkew[pREUSE[xxx].cTimes].rtMediaStop = MediaStop;
		    pREUSE[xxx].cTimes++;
                }
                else
                {
                    // We MUST grow by a whole number of frame intervals.
                    // All these numbers be rounded to frame lengths, or things
                    // can screw up.  The timeline and media lengths are
                    // already an even # of frame lengths, so adding that much
                    // should be safe.
		    pREUSE[xxx].pMiniSkew[nGrow].rtStop += SourceStop -
                                                                SourceStart;
                    pREUSE[xxx].pMiniSkew[nGrow].rtMediaStop += MediaStop -
                                                                MediaStart;
                }

		// if we were about to re-use an old parser, DON'T!
    		DbgLog((LOG_TRACE,1,TEXT("Re-using, can't share!")));

		// you CANNOT both share a source and re-use. It will never
		// work.  Don't even try. (When one branch finishes a segment
		// and seeks upstream, it will kill the other branch)
                // (source combining is OK... that's not really re-using)
		// RE-USING can improve perf n-1, sharing only 2-1, so I pick
		// RE-USING to win out.

		// take the guy we're re-using from out of the race for possible
		// source re-usal
                if (WhichGroup == 0) {
                    for (int zz = 0; zz < m_cshare; zz++) {
                        if (m_share[zz].MyID == pREUSE[xxx].ID) {
                            m_share[zz].MatchID = 0;
                        }
                    }
                }
		fShareSource = FALSE;
		MatchID = 0;

	    // We are NOT re-using this source.  Put this new source on the
	    // list of unique sources to possibly be re-used later
	    //
	    } else {
	        pREUSE[cList].ID = SourceID;	// for sharing a source filter
	        pREUSE[cList].bstrName = SysAllocString(bstrName);
	        if (pREUSE[cList].bstrName == NULL)
		    goto die;
	        pREUSE[cList].guid = guid;
	        pREUSE[cList].nPin = SwitchInPinToUse;
	        pREUSE[cList].nStreamNum = StreamNumber;
	        pREUSE[cList].cTimesMax = 10;
	        pREUSE[cList].cTimes = 0;
                // we only need to set this once, since all others must match it
                pREUSE[cList].dTimelineRate = double( MediaStop - MediaStart ) / double( SourceStop - SourceStart );
	        pREUSE[cList].pMiniSkew = (MINI_SKEW*)QzTaskMemAlloc(
			    pREUSE[cList].cTimesMax * sizeof(MINI_SKEW));
	        if (pREUSE[cList].pMiniSkew == NULL) {
                    SysFreeString(pREUSE[cList].bstrName);
                    pREUSE[cList].bstrName = NULL;
		    goto die;
                }
	        pREUSE[cList].cTimes = 1;
	        pREUSE[cList].pMiniSkew->rtStart = SourceStart;
	        pREUSE[cList].pMiniSkew->rtStop = SourceStop;
	        pREUSE[cList].pMiniSkew->rtMediaStop = MediaStop;

		// grow the list if necessary
	        cList++;
	        if (cList == cListMax) {
		    cListMax += 20;
		    DEX_REUSE *pxxx = (DEX_REUSE *)QzTaskMemRealloc(pREUSE,
                                        cListMax * sizeof(DEX_REUSE));
		    if (pxxx == NULL)
		        goto die;
                    pREUSE = pxxx;
	        }
	    }

            // tell the grid about it
            //
            bUsedNewGridRow = true;
            AudGrid.WorkWithNewRow( SwitchInPinToUse, gridinpin, LayerEmbedDepth, TrackPriority );
            AudGrid.RowSetIsSource( pSourceObj, FALSE );
            worked = AudGrid.RowIAmOutputNow( SourceStart, SourceStop, THE_OUTPUT_PIN );
            if( !worked )
            {
                hr = E_OUTOFMEMORY;
                goto die;
            }

	    // no dynamic sources - load it now if it's not being re-used
	    //
	    if( !( m_nDynaFlags & CONNECTF_DYNAMIC_SOURCES ) )
	    {

		// We are not re-using a previous source, make the source now
		if( !fCanReuse ) 
                {
	            CComPtr< IPin > pOutput;
        	    DbgLog((LOG_TRACE,1,TEXT("Call BuildSourcePart")));

		    IBaseFilter *pDangly = NULL;
                    hr = BuildSourcePart(
                        m_pGraph, 
                        TRUE, 
                        sfps, 
                        pGroupMediaType,
		        GroupFPS, 
                        StreamNumber, 
                        0, 
                        1, 
                        &skew,
		        this, 
                        bstrName, 
                        &guid,
			pSharePin,	// splitter pin is our source?
			&pOutput,
			SourceID,
			m_pDeadCache,
			FALSE,
			m_MedLocFilterString,
			m_nMedLocFlags,
			m_pMedLocChain,
		        pSetter, &pDangly);

                    if (FAILED(hr)) {
                        // error was already logged
                        goto die;
                    }

		    // We built more than we bargained for. We have
		    // an appendage that we need to kill later if it
		    // isn't used
		    if (pDangly) {
			m_pdangly[m_cdangly] = pDangly;
			m_cdangly++;
			if (m_cdangly == m_cdanglyMax) {
			    m_cdanglyMax += 25;
			    m_pdangly = (IBaseFilter **)CoTaskMemRealloc
				(m_pdangly,
				m_cdanglyMax * sizeof(IBaseFilter *));
			    if (m_pdangly == NULL) {
                                // !!! leaves things dangling (no leak)
				hr =_GenerateError(2,DEX_IDS_GRAPH_ERROR,
						    E_OUTOFMEMORY);
                                m_cdangly = 0;
				goto die;
			    }
			}
		    }

                        CComPtr< IPin > pSwitchIn;
                        _pAudSwitcherBase->GetInputPin( SwitchInPinToUse, &pSwitchIn);
                        ASSERT( pSwitchIn );
                        if( !pSwitchIn )
                        {
                            hr = _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
                            goto die;
                        }
                        
                        hr = _Connect( pOutput, pSwitchIn );
                        ASSERT( !FAILED( hr ) );
                        if( FAILED( hr ) )
                        {
                            hr = _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
                            goto die;
                        }

                        // If we are going to use this source for both audio
                        // and video, get an unused split pin of the right
                        // type as a good place to start the other chain
			if (MatchID) {
			    GUID guid = MEDIATYPE_Video;
			    pSplit = FindOtherSplitterPin(pOutput, guid,0);
			    if (!pSplit) {
				MatchID = 0;
			    }
			}

                // we ARE re-using a previous source. Add the new range
                } else {
    			DbgLog((LOG_TRACE,1,TEXT("Adding another skew..")));

                        CComPtr< IPin > pPin;
                        _pAudSwitcherBase->GetInputPin( SwitchInPinToUse, &pPin);
                        ASSERT( pPin);
                        if( !pPin )
                        {
                            hr =_GenerateError(2,DEX_IDS_GRAPH_ERROR,E_OUTOFMEMORY);
                            goto die;
                        }
                        IPin * pCon;
                        hr = pPin->ConnectedTo(&pCon);
                        ASSERT(hr == S_OK);
                        pCon->Release( );
                        IBaseFilter *pFil = GetFilterFromPin(pCon);
                        ASSERT( pFil);
                        if( !pFil )
                        {
                            hr =_GenerateError(2,DEX_IDS_GRAPH_ERROR,E_OUTOFMEMORY);
                            goto die;
                        }
                        CComQIPtr<IDexterSequencer, &IID_IDexterSequencer>
                            pDex( pFil );
                        ASSERT(pDex);
                        if( !pDex )
                        {
                            hr =_GenerateError(2,DEX_IDS_GRAPH_ERROR,E_OUTOFMEMORY);
                            goto die;
                        }
                        hr = pDex->AddStartStopSkew(skew.rtStart, skew.rtStop,
                            skew.rtSkew, skew.dRate);
                        ASSERT(SUCCEEDED(hr));
                        if(FAILED(hr))
                        {
                            hr =_GenerateError(2,DEX_IDS_GRAPH_ERROR,hr);
                            goto die;
			}

                        // If we are going to use this source for both audio
                        // and video, get an unused split pin of the right
                        // type as a good place to start the other chain
			if (MatchID) {
			    ASSERT(FALSE);	// can't do both!
			    GUID guid = MEDIATYPE_Video;
			    pSplit = FindOtherSplitterPin(pCon, guid,0);
			    if (!pSplit) {
			        MatchID = 0;
			    }
			}

		}

		// remember which source we are going to use on the
		// other splitter pin
		if (MatchID) {
		    m_share[m_cshare].MatchID = MatchID;
		    m_share[m_cshare].MyID = SourceID;
		    m_share[m_cshare].pPin = pSplit;
                    // remember what inpin group 0's switch used for this src
		    m_share[m_cshare].nSwitch0InPin = SwitchInPinToUse;
		    m_cshare++;
		    if (m_cshare == m_cshareMax) {
			m_cshareMax += 25;
			m_share = (ShareAV *)CoTaskMemRealloc(m_share,
						m_cshareMax * sizeof(ShareAV));
			if (m_share == NULL) {
                            hr =_GenerateError(2,DEX_IDS_GRAPH_ERROR,
							E_OUTOFMEMORY);
                            goto die;
			}
		    }
		}

	    // DYNAMIC sources - load them later
	    //
	    }
	    else
	    {
    		DbgLog((LOG_TRACE,1,TEXT("Calling AddSourceToConnect")));

                // schedule this source to be dynamically loaded by the switcher
                // at a later time, this will merge skews
                AM_MEDIA_TYPE mt;
                ZeroMemory(&mt, sizeof(AM_MEDIA_TYPE));

                if (!fShareSource || WhichGroup != 1) {
                    // Normal case - we are not a shared appendage
                    hr = m_pSwitcherArray[WhichGroup]->AddSourceToConnect(
							bstrName,
							&guid,
							0, StreamNumber, 0,
                                                        1, &skew,
                                                        SwitchInPinToUse,
                                                        FALSE, 0, mt, 0.0,
							pSetter);
                } else {
                    // We are a shared appendage.  Tell the group 0 
                    // switch about this source, which will build and
                    // destroy both chains to both switches at the same
                    // time.
                    ASSERT(WhichGroup == 1);
                    DbgLog((LOG_TRACE,1,TEXT("SHARING: Giving switch 0 info about switch 1")));
                    hr = m_pSwitcherArray[0]->AddSourceToConnect(
                        bstrName,
                        &guid, 0,
                        StreamNumber, 0,
                        1, &skew,
                        nSwitch0InPin,          // group 0's switch in pin
                        TRUE, SwitchInPinToUse, // our switch's pin
                        *pGroupMediaType, GroupFPS,
                        pSetter);
                }

	        if (FAILED(hr)) {
                    hr = _GenerateError( 1, DEX_IDS_INSTALL_PROBLEM, hr );
		    goto die;
	        }

                // remember which source we are going to use on the
                // other splitter pin
                if (MatchID) {
                    m_share[m_cshare].MatchID = MatchID;
                    m_share[m_cshare].MyID = SourceID;
                    m_share[m_cshare].pPin = NULL; // don't have this
                    // remember which group 0 switch in pin was used
                    m_share[m_cshare].nSwitch0InPin = SwitchInPinToUse;
                    m_cshare++;
                    if (m_cshare == m_cshareMax) {
                        m_cshareMax += 25;
                        m_share = (ShareAV *)CoTaskMemRealloc(m_share,
                                        m_cshareMax * sizeof(ShareAV));
                        if (m_share == NULL) {
                            hr =_GenerateError(2,DEX_IDS_GRAPH_ERROR,
                                                E_OUTOFMEMORY);
                            goto die;
                        }
                    }
                }

	    }

            // tell the switcher about input pins
            //
            hr = m_pSwitcherArray[WhichGroup]->InputIsASource( SwitchInPinToUse, TRUE );

            gridinpin++;
            if( !fCanReuse )
            {
                audswitcherinpin++;
            }

            // check and see if we have source effects
            //
            CComQIPtr< IAMTimelineEffectable, &IID_IAMTimelineEffectable > pSourceEffectable( pSource );
            long SourceEffectCount = 0;
            long SourceEffectInPin = 0;
            long SourceEffectOutPin = 0;
            CComPtr< IAMMixEffect > pSourceMixEffect;
            if( pSourceEffectable )
            {
                pSourceEffectable->EffectGetCount( &SourceEffectCount );
            }

            if( !EnableFx )
            {
                SourceEffectCount = 0;
            }

            if( SourceEffectCount )
            {
                // store these
                //
                SourceEffectInPin = audswitcherinpin;
                SourceEffectOutPin = audswitcheroutpin;
                
                // bump these to make room for the effects
                //
                audswitcheroutpin += SourceEffectCount;
                audswitcherinpin += SourceEffectCount;
                
                for( int SourceEffectN = 0 ; SourceEffectN < SourceEffectCount ; SourceEffectN++ )
                {
                    CComPtr< IAMTimelineObj > pEffect;
                    pSourceEffectable->GetEffect( &pEffect, SourceEffectN );
                    
                    if( !pEffect )
                    {
                        // didn't work, continue
                        //
                        continue; // source effects
                    }
                    
                    // ask if the effect is muted
                    //
                    BOOL effectMuted = FALSE;
                    pEffect->GetMuted( &effectMuted );
                    if( effectMuted )
                    {
                        // don't look at this effect
                        //
                        continue; // source effects
                    }
                    
                    // find the effect's lifetime
                    //
                    REFERENCE_TIME EffectStart = 0;
                    REFERENCE_TIME EffectStop = 0;
                    hr = pEffect->GetStartStop( &EffectStart, &EffectStop );
                    ASSERT( !FAILED( hr ) );
                    
                    // add in the effect's parent's time to get timeline time
                    //
                    EffectStart += SourceStart;
                    EffectStop += SourceStart;
                    
                    // align times to nearest timing boundary
                    //
                    hr = pEffect->FixTimes( &EffectStart, &EffectStop );
                    
                    // too short, we're ignoring it
                    if (EffectStart >= EffectStop)
                        continue;
                
                    // make sure we're within render range
                    //
                    if( m_rtRenderStart != -1 )
                    {
                        if( ( EffectStop <= m_rtRenderStart ) || ( EffectStart >= m_rtRenderStop ) )
                        {
                            // outside of range
                            //
                            continue; // source effects
                        }
                        else
                        {
                            // inside range, so skew for render range
                            //
                            EffectStart -= m_rtRenderStart;
                            EffectStop -= m_rtRenderStart;
                        }
                    }

                    // find the effect's GUID.
                    //
                    GUID EffectGuid;
                    hr = pEffect->GetSubObjectGUID( &EffectGuid );
                    
                    // get the effect's ID
                    //
                    long EffectID = 0;
                    pEffect->GetGenID( &EffectID );
                    
                    // tell the grid who is grabbing what
                    
                    bUsedNewGridRow = true;
                    AudGrid.WorkWithNewRow( SourceEffectInPin, gridinpin, LayerEmbedDepth, TrackPriority );
                    worked = AudGrid.RowIAmEffectNow( EffectStart, EffectStop, SourceEffectOutPin );
                    if( !worked )
                    {
                        hr = E_OUTOFMEMORY;
                        goto die;
                    }
                    
                    // instantiate the filter and hook it up
                    //
                    CComPtr< IBaseFilter > pAudEffectBase;
                    hr = _CreateObject(
                        EffectGuid,
                        IID_IBaseFilter,
                        (void**) &pAudEffectBase,
                        EffectID );
                    ASSERT( !FAILED( hr ) );
                    if( FAILED( hr ) )
                    {
                        hr = _GenerateError( 2, DEX_IDS_INSTALL_PROBLEM, hr );
                        goto die;
                    }
                    
                    // if it's a volume effect, then do something special to give it properties
                    //
                    if( EffectGuid == CLSID_AudMixer )
                    {
                        IPin * pPin = GetInPin( pAudEffectBase, 0 );
                        ASSERT( pPin );
                        CComQIPtr< IAudMixerPin, &IID_IAudMixerPin > pMixerPin( pPin );
                        ASSERT( pMixerPin );
                        pMixerPin->SetEnvelopeRange( EffectStart, EffectStop );

                        hr = _SetPropsOnAudioMixer( pAudEffectBase, pGroupMediaType, GroupFPS, WhichGroup );
                        if( FAILED( hr ) )
                        {
                            goto die;
                        }
                        
                        CComPtr< IPropertySetter > pSetter;
                        hr = pEffect->GetPropertySetter( &pSetter );
                        IPin * pMixerInPin = GetInPin( pAudEffectBase, 0 );
                        CComQIPtr< IAudMixerPin, &IID_IAudMixerPin > pAudMixerPin( pMixerInPin );
                        if( pAudMixerPin )
                        {
			    if (pSetter) {
                                hr = pAudMixerPin->put_PropertySetter( pSetter );
			    }
			    // to make it easy to find which mixer pin
			    // goes with with volume envelope
			    long ID;
			    hr = pEffect->GetUserID(&ID);
			    hr = pAudMixerPin->put_UserID(ID);
                        }
                    } else {

			// Give the STATIC properties to the audio effect
			// general audio effects can't do dynamic props
			//
                        CComPtr< IPropertySetter > pSetter;
                        hr = pEffect->GetPropertySetter(&pSetter);
                        if (pSetter) {
			    pSetter->SetProps(pAudEffectBase, -1);
                        }
		    }
                        
                    // add it to the graph
                    //
                    hr = _AddFilter( pAudEffectBase, L"Audio Effect", EffectID );
                    ASSERT( !FAILED( hr ) );
                    if( FAILED( hr ) )
                    {
                        hr = _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
                        goto die;
                    }
                    
                    // find it's pins...
                    //
                    IPin * pFilterInPin = NULL;
                    pFilterInPin = GetInPin( pAudEffectBase, 0 );
                    ASSERT( pFilterInPin );
                    if( !pFilterInPin )
                    {
                        hr = _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
                        goto die;
                    }
                    IPin * pFilterOutPin = NULL;
                    pFilterOutPin = GetOutPin( pAudEffectBase, 0 );
                    ASSERT( pFilterOutPin );
                    if( !pFilterOutPin )
                    {
                        hr = _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
                        goto die;
                    }
                    CComPtr< IPin > pSwitcherOutPin;
                    _pAudSwitcherBase->GetOutputPin( SourceEffectOutPin, &pSwitcherOutPin );
                    ASSERT( pSwitcherOutPin );
                    if( !pSwitcherOutPin )
                    {
                        hr = _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
                        goto die;
                    }
                    CComPtr< IPin > pSwitcherInPin;
                    _pAudSwitcherBase->GetInputPin( SourceEffectInPin, &pSwitcherInPin );
                    ASSERT( pSwitcherInPin );

                    if( !pSwitcherInPin )
                    {
                        hr = _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
			goto die;
                    }

                    // connect them
                    //
                    hr = _Connect( pSwitcherOutPin, pFilterInPin );
                    ASSERT( !FAILED( hr ) );
                    if( FAILED( hr ) )
                    {
                        hr = _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
			goto die;
                    }
                    hr = _Connect( pFilterOutPin, pSwitcherInPin );
                    ASSERT( !FAILED( hr ) );
                    if( FAILED( hr ) )
                    {
                        hr = _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
			goto die;
                    }

                    SourceEffectInPin++;
                    SourceEffectOutPin++;
                    gridinpin++;
                } // for all the effects

            } // if SourceEffectCount

          } // while sources

          if( !bUsedNewGridRow )
          {
              // nothing was on this track, so completely ignore it
              //
              continue;
          }

        } // if pTrack
                    
        DbgTimer AudioAfterSources( "(rendeng) Audio post-sources" );
                    
        REFERENCE_TIME TrackStart, TrackStop;
        pLayer->GetStartStop( &TrackStart, &TrackStop );
        
        AudGrid.DumpGrid( );
        
        // if we're a composition, it's time to deal with all the sub-tracks that need
        // to be mixed... enumerate all the comp's tracks, find out if they need waveforms
        // modified or need mixing, etc.
        
        bool fSkipDoneUnlessNew = false;

        CComQIPtr< IAMTimelineComp, &IID_IAMTimelineComp > pComp( pLayer );
        if( !pComp )
        {
            // not a composition, continue, please.
            //
            AudGrid.DumpGrid( );
            DbgLog( ( LOG_TRACE, RENDER_TRACE_LEVEL, TEXT("REND--Layer is not a composition, so continue...") ) );
            LastUsedNewGridRow = LayerEmbedDepth;   // last depth to call Done
            LastEmbedDepth = LayerEmbedDepth;
            goto NonVol; // do non-vol track/comp/group fx, then layer is done
        }

        // we must only call DoneWithLayer if we've called WorkWithNewRow above
        // (bUsedNewGridRow) or if we're a composition and some deeper depth
        // called DoneWithLayer.
        //
        if ((LastEmbedDepth <= LayerEmbedDepth ||
                LastUsedNewGridRow <= LayerEmbedDepth) && !bUsedNewGridRow) {
            LastEmbedDepth = LayerEmbedDepth;
            // after the goto, skip the DoneWithLayer, unless NewRow is called
            fSkipDoneUnlessNew = true;
            goto NonVol;
        }

        LastUsedNewGridRow = LayerEmbedDepth; // last depth to call DoneWithLay
        LastEmbedDepth = LayerEmbedDepth;

        {
        DbgTimer AudBeforeMix( "(rendeng) Audio, before mix" );
        // Find out how many Mixed tracks we have at once.
        // Find out if there's a volume envelope on the output pin
        // For each track...
        //      Find out if track has a volume envelope, if so,
        //      Transfer that track to the mixer input pin
        // Set the output track's envelope if any
        // put the mixer in the graph and hook it up

        // since we may have or may NOT have called WorkWithNewRow already, we need to tell the Grid
        // we're ABOUT to work with another row. If it turns out that we didn't need to
        // call this, it's okay, another call to it with the same audswitcherinpin will overwrite it.
        // LayerEmbedDepth will be the embed depth for this composition, and will be one LESS than
        // the embed depth of everything above it in the grid.
        //
        AudGrid.WorkWithNewRow( audswitcherinpin, gridinpin, LayerEmbedDepth, TrackPriority );
        
        // find out how many tracks are concurrent at the same time for THIS COMP ONLY
        //
        long MaxMixerTracks = AudGrid.MaxMixerTracks( );
        
        DbgLog( ( LOG_TRACE, RENDER_TRACE_LEVEL, TEXT("REND--Layer %ld is a COMP and has %ld mixed tracks"), CurrentLayer, MaxMixerTracks ) );
        
        // here's a blank mixer pointer...
        //
        HRESULT hr = 0;
        CComPtr< IBaseFilter > pMixer;
        REFERENCE_TIME VolEffectStart = -1;
        REFERENCE_TIME VolEffectStop = -1;
        REFERENCE_TIME CompVolEffectStart = -1;
        REFERENCE_TIME CompVolEffectStop = -1;
        
	// the UserID of the track and group volume effect object
        long IDSetter = 0;
        long IDOutputSetter = 0;
	    
        // figure out if the group needs an envelope.
        // Group Envelopes happen by setting volume on the OUTPUT pin, as opposed to
        // everything else setting input pin volumes.
        //
        CComPtr< IPropertySetter > pOutputSetter;
        if( CurrentLayer == AudioLayers - 1 )
        {
            DbgLog( ( LOG_TRACE, RENDER_TRACE_LEVEL, TEXT("REND--Layer %ld is the GROUP layer"), CurrentLayer ) );
            
            // ask it if it has any effects
            //
            long TrackEffectCount = 0;
            CComQIPtr< IAMTimelineEffectable, &IID_IAMTimelineEffectable > pTrackEffectable( pLayer );
            if( pTrackEffectable )
            {
                pTrackEffectable->EffectGetCount( &TrackEffectCount );
                
                // for each effect, see if there's a waveform modifier
                //
                for( int e = 0 ; e < TrackEffectCount ; e++ )
                {
                    CComPtr< IAMTimelineObj > pEffect;
                    pTrackEffectable->GetEffect( &pEffect, e );
                    if( !pEffect )
                    {
                        continue;
                    }
                    
                    // ask if the effect is muted
                    //
                    BOOL effectMuted = FALSE;
                    pEffect->GetMuted( &effectMuted );
                    if( effectMuted )
                    {
                        // don't look at this effect
                        //
                        continue; // track effects
                    }
                    
                    // find the effect's lifetime
                    //
                    REFERENCE_TIME EffectStart = 0;
                    REFERENCE_TIME EffectStop = 0;
                    hr = pEffect->GetStartStop( &EffectStart, &EffectStop );
                    ASSERT( !FAILED( hr ) );
                    
                    // add in the effect's parent's time to get timeline time
                    //
                    EffectStart += TrackStart;
                    EffectStop += TrackStart;
                    
                    // align times to nearest frame boundary
                    //
                    hr = pEffect->FixTimes( &EffectStart, &EffectStop );
                    
                    // too short, we're ignoring it
                    if (EffectStart >= EffectStop)
                        continue;
                
                    // make sure we're within render range
                    //
                    if( m_rtRenderStart != -1 ) {
                        if( ( EffectStop <= m_rtRenderStart ) || ( EffectStart >= m_rtRenderStop ) )
                        {
                            continue; // track effects
                        }
                        else
                        {
                            EffectStart -= m_rtRenderStart;
                            EffectStop -= m_rtRenderStart;
                        }
		    }
                        
                    // find the effect's GUID
                    //
                    GUID EffectGuid;
                    hr = pEffect->GetSubObjectGUID( &EffectGuid );
                        
                    // if the effect is a volume effect, then do something special to the audio mixer pin
                    //
                    if( EffectGuid != CLSID_AudMixer )
                    {
                        continue; // track effects
                    }
                    
                    DbgLog( ( LOG_TRACE, RENDER_TRACE_LEVEL, TEXT("REND--Group layer needs an envelope on it") ) );
                    hr = pEffect->GetPropertySetter( &pOutputSetter );
		    CompVolEffectStart = EffectStart;
		    CompVolEffectStop = EffectStop;
		    hr = pEffect->GetUserID(&IDOutputSetter); // remember ID too
                    break;

                } // for effects
            } // if pTrackEffectable
        } // if the group layer
        
        // run through and find out if any of our tracks have volume envelopes on them
        //
        long CompTracks = 0;
        pComp->VTrackGetCount( &CompTracks );

        CComPtr< IAMTimelineObj > pTr;
        
        // ask each track
        //
        for( int t = 0 ; t < CompTracks ; t++ )
        {
            CComPtr< IPropertySetter > pSetter;
            
            // get the next track
            //
            CComPtr< IAMTimelineObj > pNextTr;
            pComp->GetNextVTrack(pTr, &pNextTr);
            if (!pNextTr)
                continue;
            pTr = pNextTr;
            
            // ask it if it has any effects
            //
            long TrackEffectCount = 0;
            CComQIPtr< IAMTimelineEffectable, &IID_IAMTimelineEffectable > pTrackEffectable( pTr );
            if( !pTrackEffectable )
            {
                continue;
            }
            pTrackEffectable->EffectGetCount( &TrackEffectCount );
            
            // for each effect, see if there's a waveform modifier
            //
            for( int e = 0 ; e < TrackEffectCount ; e++ )
            {
                CComPtr< IAMTimelineObj > pEffect;
                pTrackEffectable->GetEffect( &pEffect, e );
                if( !pEffect )
                {
                    continue;
                }
                
                // ask if the effect is muted
                //
                BOOL effectMuted = FALSE;
                pEffect->GetMuted( &effectMuted );
                if( effectMuted )
                {
                    // don't look at this effect
                    //
                    continue; // track effects
                }
                
                // find the effect's lifetime
                //
                REFERENCE_TIME EffectStart = 0;
                REFERENCE_TIME EffectStop = 0;
                hr = pEffect->GetStartStop( &EffectStart, &EffectStop );
                ASSERT( !FAILED( hr ) );
                
                // add in the effect's parent's time to get timeline time
                //
                EffectStart += TrackStart;
                EffectStop += TrackStart;
                
                // align times to nearest frame boundary
                //
                hr = pEffect->FixTimes( &EffectStart, &EffectStop );
                
                // too short, we're ignoring it
                if (EffectStart >= EffectStop)
                    continue;
                
                // make sure we're within render range
                //
                if( m_rtRenderStart != -1 ) {
                    if( ( EffectStop <= m_rtRenderStart ) || ( EffectStart >= m_rtRenderStop ) )
                    {
                        continue; // track effecs
                    }
                    else
                    {
                        EffectStart -= m_rtRenderStart;
                        EffectStop -= m_rtRenderStart;
                    }
		}
                    
                // find the effect's GUID
                //
                GUID EffectGuid;
                hr = pEffect->GetSubObjectGUID( &EffectGuid );
                    
                // if the effect is a volume effect, then do something special to the audio mixer pin
                //
                if( EffectGuid == CLSID_AudMixer )
                {
                    hr = pEffect->GetPropertySetter( &pSetter );
		    hr = pEffect->GetUserID(&IDSetter);	// remember ID too
                    DbgLog( ( LOG_TRACE, RENDER_TRACE_LEVEL, TEXT("REND--Layer %ld of COMP needs an envelope on it, need Mixer = TRUE"), e ) );
		    // NOTE: Only 1 volume effect per track is supported!
                    VolEffectStart = EffectStart;
                    VolEffectStop = EffectStop;
                    break;
                }
                    
            } // for effects
            
            // this pin will be sent to the mixer if we need an envelope (on the track)
            // OR, if the output volume needs enveloped, we need to send this track to the mixer as well.
            //
            if (pSetter || IDSetter || pOutputSetter || IDOutputSetter)
            {
                DbgLog( ( LOG_TRACE, RENDER_TRACE_LEVEL, TEXT("REND--Created mixer...") ) );
                
                if( !pMixer )
                {
                    hr = _CreateObject(
                        CLSID_AudMixer,
                        IID_IBaseFilter,
                        (void**) &pMixer );
                    ASSERT( !FAILED( hr ) );
                    if( FAILED( hr ) )
                    {
                        hr = _GenerateError( 2, DEX_IDS_INSTALL_PROBLEM, hr );
                        goto die;
                    }
                    
                    CComQIPtr< IAudMixer, &IID_IAudMixer > pAudMixer( pMixer );
                    hr = pAudMixer->put_InputPins( CompTracks );
                    hr = pAudMixer->InvalidatePinTimings( );
                }
                
                // get the property setter, which contains the envelope
                //
                // can't fail
                ASSERT( !FAILED( hr ) );
                
                IPin * pMixerInPin = GetInPin( pMixer, t );
                CComQIPtr< IAudMixerPin, &IID_IAudMixerPin > p( pMixerInPin );

                // tell the mixer audio pin about the property setter
                // we only set the props if we have props
                //
                if( pSetter )
                {
                    hr = p->put_PropertySetter( pSetter );
                    DbgLog( ( LOG_TRACE, RENDER_TRACE_LEVEL, TEXT("REND--Set envelope on mixer's %ld input pin"), t ) );
		}

		if (IDSetter) {
		    // to make it easy to find which mixer pin
		    // goes with with volume envelope
		    hr = p->put_UserID(IDSetter);
		}

                // transfer all normal outputs to the mixer's input pin instead,
                // (this does NOT deal with the mixer's output pin)
                //
                // NOTE: The reason this logic works in conjunction with DoMix below is
                // because the grid stealing functions look for OUTPUT pins. XFerToMixer will
                // create a new grid row, but assign the old row completely to the mixer's input
                // pin. The new grid row thus becomes a proxy for the old grid row and DoMix is
                // fooled into thinking it's okay. Same thing with DoMix, it takes values from
                // the old rows and assigns them to the mixer, and creates a mixed row. It all works.
                //
                // !!! check return value
                worked = AudGrid.XferToMixer(pMixer, audswitcheroutpin, t, VolEffectStart, VolEffectStop );
                if( !worked )
                {
                    hr = E_OUTOFMEMORY;
                    goto die;
                }
                
                DbgLog( ( LOG_TRACE, RENDER_TRACE_LEVEL, TEXT("REND--Transferring grid pins to mixers %ld pin"), t ) );
                
                AudGrid.DumpGrid( );
                
            } // if need mixer
            
        } // for tracks
        
        // if we have a volume envelope we need to put on the mixer's output...
        //
        // tell the mixer audio pin about the property setter
        //
	if (pOutputSetter || IDOutputSetter) {
            IPin * pMixerInPin = GetOutPin( pMixer, 0 );
            CComQIPtr< IAudMixerPin, &IID_IAudMixerPin > p( pMixerInPin );
	    if (pOutputSetter)
	    {
                hr = p->put_PropertySetter( pOutputSetter );
                DbgLog( ( LOG_TRACE, RENDER_TRACE_LEVEL, TEXT("REND--Set envelope on mixer's output pin") ) );

                // tell the output what it's valid envelope range is, we got these times way above
                //
                hr = p->SetEnvelopeRange( CompVolEffectStart, CompVolEffectStop );
	    }
	    if (IDOutputSetter) {
	        // to make it easy to find which mixer pin
	        // goes with with volume envelope
	        hr = p->put_UserID(IDOutputSetter);
	    }

        }
        
        // NOTE: if MaxMixerTracks > 1 then we will already force ALL the tracks to go to the mixer, and we don't need
        // to worry about envelopes
        
        // if we don't need a mixer, we can just go on with our layer search
        //
        if( !pMixer && ( MaxMixerTracks < 2 ) )
        {
            // this means we have ONE track under us, and it doesn't have a waveform. Go through
            // and force the output track # in the grid that had the output pin to be OUR track #
            // so the mix above us will work right
            //
            // NOTE: we've told the grid that we've got a new row by calling WorkWithNewRow, but we're
            // now not going to need it. Fortunately, YoureACompNow does the right thing. Calling DoneWithLayer
            // below will also happily ignore the "fake" new row. As long as we didn't bump audmixerinpin,
            // we're okay.
            //
            worked = AudGrid.YoureACompNow( TrackPriority );
            if( !worked )
            {
                hr = E_OUTOFMEMORY;
                goto die;
            }
            
            DbgLog( ( LOG_TRACE, RENDER_TRACE_LEVEL, TEXT("REND--layer didn't need a mixer, so we're done.") ) );
            AudGrid.DumpGrid( );
            goto NonVol;
        }
        
        // create mixer
        //
        if( !pMixer )
        {
            hr = _CreateObject(
                CLSID_AudMixer,
                IID_IBaseFilter,
                (void**) &pMixer );
            
            // tell the mixer to be this big, so we can validate timing ranges on the input
            // pins without having to create them one by one
            //
            CComQIPtr< IAudMixer, &IID_IAudMixer > pAudMixer( pMixer );
            hr = pAudMixer->put_InputPins( CompTracks );
            hr = pAudMixer->InvalidatePinTimings( );
            DbgLog( ( LOG_TRACE, RENDER_TRACE_LEVEL, TEXT("REND--Creating a mixer!") ) );
        }
        
        // give the mixer the buffer size it needs and the media type
        //
        hr = _SetPropsOnAudioMixer( pMixer, pGroupMediaType, GroupFPS, WhichGroup );
        if( FAILED( hr ) )
        {
            goto die;
        }
        
        // add it to the graph and...
        //
        hr = _AddFilter( pMixer, L"AudMixer" );
        ASSERT( !FAILED( hr ) );
        if( FAILED( hr ) )
        {
            hr = _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
            goto die;
        }
        
        // connect up the input mixer pins. 
        //
        for( int t = 0 ; t < CompTracks ; t++ )
        {
            CComPtr< IPin > pSwitchOutPin;
            _pAudSwitcherBase->GetOutputPin( audswitcheroutpin + t, &pSwitchOutPin );
            ASSERT( pSwitchOutPin );
            IPin * pMixerInPin = GetInPin( pMixer, t );
            ASSERT( pMixerInPin );
            hr = _Connect( pMixerInPin, pSwitchOutPin );
        }
        
        // connect the output mixer pin to the input switcher
        //
        IPin * pMixerOutPin = GetOutPin( pMixer, 0 );
        CComPtr< IPin > pSwitchInPin;
        _pAudSwitcherBase->GetInputPin( audswitcherinpin, &pSwitchInPin );
        hr = _Connect( pMixerOutPin, pSwitchInPin );
        
        // do the mix, rely on the grid's function to tell the pins what's what
        //
        worked = AudGrid.DoMix( pMixer, audswitcheroutpin );
        if( !worked )
        {
            hr = E_OUTOFMEMORY;
            goto die;
        }
        
        // make all tracks in the grid which have an output now think they have
        // the output track priority of their parent's
        //
        worked = AudGrid.YoureACompNow( TrackPriority );
        if( !worked )
        {
            hr = E_OUTOFMEMORY;
            goto die;
        }
        
        // we used this many pins up doing the connecting.
        //
        audswitcherinpin++;
        gridinpin++;
        audswitcheroutpin += CompTracks ;
        
        AudGrid.DumpGrid( );
        }

        // now do non-volume effects

NonVol:

        // reset.  fSkipDoneUnlessNew wants to see if this gets set now
        bUsedNewGridRow = false;

        CComQIPtr< IAMTimelineEffectable, &IID_IAMTimelineEffectable > pTrackEffectable( pLayer );
        long TrackEffectCount = 0;
        if( pTrackEffectable )
        {
            pTrackEffectable->EffectGetCount( &TrackEffectCount );
        }
        
        if( !EnableFx )
        {
            TrackEffectCount = 0;
        }
        
        if( TrackEffectCount )
        {
            for( int TrackEffectN = 0 ; TrackEffectN < TrackEffectCount ; TrackEffectN++ )
            {
                CComPtr< IAMTimelineObj > pEffect;
                pTrackEffectable->GetEffect( &pEffect, TrackEffectN );
                if( !pEffect )
                {
                    // didn't work, so continue
                    //
                    continue; // track effects
                }
                
                // ask if the effect is muted
                //
                BOOL effectMuted = FALSE;
                pEffect->GetMuted( &effectMuted );
                if( effectMuted )
                {
                    // don't look at this effect
                    //
                    continue; // track effects
                }
                
                // find the effect's lifetime
                //
                REFERENCE_TIME EffectStart = 0;
                REFERENCE_TIME EffectStop = 0;
                hr = pEffect->GetStartStop( &EffectStart, &EffectStop );
                ASSERT( !FAILED( hr ) );
                
                // add in the effect's parent's time to get timeline time
                //
                EffectStart += TrackStart;
                EffectStop += TrackStart;
                
                // align times to nearest frame boundary
                //
                hr = pEffect->FixTimes( &EffectStart, &EffectStop );
                
                // too short, we're ignoring it
                if (EffectStart >= EffectStop)
                    continue;
                
                // make sure we're within render range
                //
                if( m_rtRenderStart != -1 )
                {
                    if( ( EffectStop <= m_rtRenderStart ) || ( EffectStart >= m_rtRenderStop ) )
                    {
                        continue; // track effecs
                    }
                    else
                    {
                        EffectStart -= m_rtRenderStart;
                        EffectStop -= m_rtRenderStart;
                    }
                }
                    
                // find the effect's GUID
                //
                GUID EffectGuid;
                hr = pEffect->GetSubObjectGUID( &EffectGuid );
                
                long EffectID = 0;
                pEffect->GetGenID( &EffectID );
                
                // if it's a volume effect, ignore it until later
                //
                if( EffectGuid == CLSID_AudMixer )
                {
                    continue;
                }
                
                // tell the grid who is grabbing what
                //
                bUsedNewGridRow = true;
                AudGrid.WorkWithNewRow( audswitcherinpin, gridinpin, LayerEmbedDepth, TrackPriority );
                worked = AudGrid.RowIAmEffectNow( EffectStart, EffectStop, audswitcheroutpin );
                if( !worked )
                {
                    hr = E_OUTOFMEMORY;
                    goto die;
                }

                // instantiate the filter and hook it up
                //
                CComPtr< IBaseFilter > pAudEffectBase;
                hr = _CreateObject(
                    EffectGuid,
                    IID_IBaseFilter,
                    (void**) &pAudEffectBase,
                    EffectID );
                if( FAILED( hr ) )
                {
                    VARIANT var;
                    BSTR bstr;
                    VariantFromGuid(&var, &bstr, &EffectGuid);
                    hr = _GenerateError(2, DEX_IDS_INVALID_AUDIO_FX, E_INVALIDARG,
                        &var);
                    if (var.bstrVal)
                        SysFreeString(var.bstrVal);
                    goto die;
                }
                
                // Give the STATIC properties to the NON-MIXER audio effect
                // general audio effects can't do dynamic props
                //
                CComPtr< IPropertySetter > pSetter;
                hr = pEffect->GetPropertySetter(&pSetter);
                if (pSetter) {
                    pSetter->SetProps(pAudEffectBase, -1);
                }

                // add it to the graph
                //
                hr = _AddFilter( pAudEffectBase, L"Audio Effect", EffectID );
                ASSERT( !FAILED( hr ) );
                if( FAILED( hr ) )
                {
                    hr = _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
                    goto die;
                }
                
                // find it's pins...
                //
                IPin * pFilterInPin = NULL;
                pFilterInPin = GetInPin( pAudEffectBase, 0 );
                if( !pFilterInPin )
                {
                    VARIANT var;
                    BSTR bstr;
                    VariantFromGuid(&var, &bstr, &EffectGuid);
                    hr = _GenerateError(2, DEX_IDS_INVALID_AUDIO_FX, E_INVALIDARG,
                        &var);
                    if (var.bstrVal)
                        SysFreeString(var.bstrVal);
                    goto die;
                }
                IPin * pFilterOutPin = NULL;
                pFilterOutPin = GetOutPin( pAudEffectBase, 0 );
                if( !pFilterOutPin )
                {
                    VARIANT var;
                    BSTR bstr;
                    VariantFromGuid(&var, &bstr, &EffectGuid);
                    hr = _GenerateError(2, DEX_IDS_INVALID_AUDIO_FX, E_INVALIDARG,
                        &var);
                    if (var.bstrVal)
                        SysFreeString(var.bstrVal);
                    goto die;
                }
                CComPtr< IPin > pSwitcherOutPin;
                _pAudSwitcherBase->GetOutputPin( audswitcheroutpin, &pSwitcherOutPin );
                ASSERT( pSwitcherOutPin );
                if( !pSwitcherOutPin )
                {
                    hr = _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
                    goto die;
                }
                CComPtr< IPin > pSwitcherInPin;
                _pAudSwitcherBase->GetInputPin( audswitcherinpin, &pSwitcherInPin );
                ASSERT( pSwitcherInPin );
                if( !pSwitcherInPin )
                {
                    hr = _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
                    goto die;
                }
                
                // connect them
                //
                hr = _Connect( pSwitcherOutPin, pFilterInPin );
                if( FAILED( hr ) )
                {
                    VARIANT var;
                    BSTR bstr;
                    VariantFromGuid(&var, &bstr, &EffectGuid);
                    hr = _GenerateError(2, DEX_IDS_INVALID_AUDIO_FX, E_INVALIDARG,
                        &var);
                    if (var.bstrVal)
                        SysFreeString(var.bstrVal);
                    goto die;
                }
                hr = _Connect( pFilterOutPin, pSwitcherInPin );
                ASSERT( !FAILED( hr ) );
                if( FAILED( hr ) )
                {
                    VARIANT var;
                    BSTR bstr;
                    VariantFromGuid(&var, &bstr, &EffectGuid);
                    hr = _GenerateError(2, DEX_IDS_INVALID_AUDIO_FX, E_INVALIDARG,
                        &var);
                    if (var.bstrVal)
                        SysFreeString(var.bstrVal);
                    goto die;
                }
                
                // bump to make room for effect
                //
                audswitcherinpin++;
                gridinpin++;
                audswitcheroutpin++;
                    
            } // for all the effects
            
        } // if any effects on track

        if (!(!bUsedNewGridRow && fSkipDoneUnlessNew)) {
            AudGrid.DoneWithLayer( );
        }
        AudGrid.DumpGrid( );
        
    } // while AudioLayers
    
die:
    // free the re-using source stuff now that we're either done or we
    // hit an error
    for (int yyy = 0; yyy < cList; yyy++) {
	SysFreeString(pREUSE[yyy].bstrName);
        if (pREUSE[yyy].pMiniSkew)      // failed re-alloc would make this NULL
	    QzTaskMemFree(pREUSE[yyy].pMiniSkew);
    }
    if (pREUSE)
        QzTaskMemFree(pREUSE);
    if (FAILED(hr))
	return hr;

    AudGrid.PruneGrid( );
    if( !worked )
    {
        hr = E_OUTOFMEMORY;
        return hr;
    }
    AudGrid.DumpGrid( );
    
    // make the switch connections now
    //
    for( int aip = 0 ; aip < audinpins ; aip++ )
    {
        AudGrid.WorkWithRow( aip );
        long SwitchPin = AudGrid.GetRowSwitchPin( );
        REFERENCE_TIME InOut = -1;
        REFERENCE_TIME Stop = -1;
        int nUsed = 0; // the # of ranges the silent source is needed for
        STARTSTOPSKEW *pSkew;
        int nSkew = 0;
        
        if( AudGrid.IsRowTotallyBlank( ) )
        {
            continue;
        }

        while (1) 
        {
            long Value = 0;
            AudGrid.RowGetNextRange( &InOut, &Stop, &Value );
            if( InOut == Stop || InOut >= TotalDuration ) {
                break;
            }
            
            if( Value >= 0 || Value == ROW_PIN_OUTPUT) {
                if (Value == ROW_PIN_OUTPUT) {
                    Value = 0;
                }
                
                // do some fancy processing for setting up the SILENT regions
                //
                if (aip == 0) {
                    if( nUsed == 0 ) {
                        nSkew = 10;	// start with space for 10
                        pSkew = (STARTSTOPSKEW *)CoTaskMemAlloc(nSkew *
                            sizeof(STARTSTOPSKEW));
                        if (pSkew == NULL)
                            return _GenerateError( 1, DEX_IDS_GRAPH_ERROR,	
                            E_OUTOFMEMORY);
                    } else if (nUsed == nSkew) {
                        nSkew += 10;
                        pSkew = (STARTSTOPSKEW *)CoTaskMemRealloc(pSkew, nSkew *
                            sizeof(STARTSTOPSKEW));
                        if (pSkew == NULL)
                            return _GenerateError( 1, DEX_IDS_GRAPH_ERROR,	
                            E_OUTOFMEMORY);
                    }
                    pSkew[nUsed].rtStart = InOut;
                    pSkew[nUsed].rtStop = Stop;
                    pSkew[nUsed].rtSkew = 0;
                    pSkew[nUsed].dRate = 1.0;
                    nUsed++;
                }
                
                hr = m_pSwitcherArray[WhichGroup]->SetX2Y(InOut, SwitchPin, Value);
                ASSERT(SUCCEEDED(hr));
                if (FAILED(hr)) {
                    return _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
                }
            }
            
            // either it's unassigned or another track has higher priority and
            // no transition exists at this time, so it should be invisible
            //
            else if( Value == ROW_PIN_UNASSIGNED || Value < ROW_PIN_OUTPUT )
            {
                // make sure not to program anything if this is a SILENCE source
                // that will be programmed later
                if (aip > 0 || nUsed) {
                    hr = m_pSwitcherArray[WhichGroup]->SetX2Y(InOut, SwitchPin,
                        ROW_PIN_UNASSIGNED );
                    ASSERT( !FAILED( hr ) );
                    if( FAILED( hr ) )
                    {
                        // must be out of memory
                        return _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
                    }
                }
            }
            
            // this should never happen
            //
            else
            {
                ASSERT( 0 );
            }
            
        }
        
        // not dynamic - load silent source now
        //
        if( !( m_nDynaFlags & CONNECTF_DYNAMIC_SOURCES ) ) {
            
            if (nUsed) {
                IPin * pOutPin = NULL;
                hr = BuildSourcePart(
                    m_pGraph, 
                    FALSE, 
                    0, 
                    pGroupMediaType, 
                    GroupFPS,
                    0, 
                    0, 
                    nUsed, 
                    pSkew, 
                    this, 
                    NULL, 
                    NULL,
                    NULL,
                    &pOutPin, 
                    0, 
                    m_pDeadCache,
                    FALSE,
                    m_MedLocFilterString,
                    m_nMedLocFlags,
                    m_pMedLocChain, NULL, NULL );
                
                CoTaskMemFree(pSkew);
                
                if (FAILED(hr)) {
                    // error already logged
                    return hr;
                }
                
                pOutPin->Release(); // not the last ref
                
                // get the switch pin
                //
                CComPtr< IPin > pSwitchIn;
                _pAudSwitcherBase->GetInputPin(SwitchPin, &pSwitchIn);
                ASSERT( pSwitchIn );
                if( !pSwitchIn )
                {
                    return _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
                }
                
                // connect to the switch
                //
                hr = _Connect( pOutPin, pSwitchIn );
                ASSERT( !FAILED( hr ) );
                if( FAILED( hr ) )
                {
                    return _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
                }
                
                // tell the switcher that we're a source pin
                //
                hr = m_pSwitcherArray[WhichGroup]->InputIsASource(SwitchPin,TRUE);
            }
            
            
            // DYNAMIC - load silent source later
            //
        } else {
            if (nUsed) {
                // this will merge skews
                AM_MEDIA_TYPE mt;
                ZeroMemory(&mt, sizeof(AM_MEDIA_TYPE));
                hr = m_pSwitcherArray[WhichGroup]->AddSourceToConnect(
                    NULL, &GUID_NULL,
                    0, 0, 0,
                    nUsed, pSkew, SwitchPin, FALSE, 0, mt, 0.0, NULL);
                CoTaskMemFree(pSkew);
                if (FAILED(hr))	// out of memory?
                    return _GenerateError( 1, DEX_IDS_INSTALL_PROBLEM, hr );
                
                // tell the switcher that we're a source pin
                //
                hr = m_pSwitcherArray[WhichGroup]->InputIsASource(SwitchPin,TRUE);
            }
        }
    }
    
    // finally, at long last, see if the switch used to have something connected
    // to it. If it did, restore the connection
    // !!! this might fail if we're using 3rd party filters which don't
    // accept input pin reconnections if the output pin is already connected.\
    //
    if( m_pSwitchOuttie[WhichGroup] )
    {
        CComPtr< IPin > pSwitchRenderPin;
        _pAudSwitcherBase->GetOutputPin( 0, &pSwitchRenderPin );
        hr = _Connect( pSwitchRenderPin, m_pSwitchOuttie[WhichGroup] );
        ASSERT( !FAILED( hr ) );
        m_pSwitchOuttie[WhichGroup].Release( );
    }

    m_nGroupsAdded++;
    
    return hr;
}

//############################################################################
// 
//############################################################################

long CRenderEngine::_HowManyMixerOutputs( long WhichGroup )
{
    HRESULT hr = 0;
    DbgTimer d( "(rendeng) HowManyMixerOutputs" );
    
    // ask timeline how many actual tracks it has
    //
    long AudioTrackCount = 0;   // tracks only
    long AudioLayers = 0;       // tracks including compositions
    m_pTimeline->GetCountOfType( WhichGroup, &AudioTrackCount, &AudioLayers, TIMELINE_MAJOR_TYPE_TRACK );
    
    // how many layers do we have?
    //
    CComPtr< IAMTimelineObj > pGroupObj;
    hr = m_pTimeline->GetGroup( &pGroupObj, WhichGroup );
    ASSERT( !FAILED( hr ) );
    if( FAILED( hr ) )
    {
        return 0;
    }
    CComQIPtr< IAMTimelineComp, &IID_IAMTimelineComp > pGroupComp( pGroupObj );
    if( !pGroupComp )
    {
        return 0;
    }
    
    long MixerPins = 0;
    
    // add source filters for each source on the timeline
    //
    for(  int CurrentLayer = 0 ; CurrentLayer < AudioLayers ; CurrentLayer++ )
    {
        // get the layer itself
        //
        CComPtr< IAMTimelineObj > pLayer;
        hr = pGroupComp->GetRecursiveLayerOfType( &pLayer, CurrentLayer, TIMELINE_MAJOR_TYPE_TRACK );
        ASSERT( !FAILED( hr ) );
        if( FAILED( hr ) )
        {
            continue; // audio layers
        }
        
        CComQIPtr< IAMTimelineTrack, &IID_IAMTimelineTrack > pTrack( pLayer );
        
        CComQIPtr< IAMTimelineComp, &IID_IAMTimelineComp > pComp( pLayer );
        if( !pComp )
        {
            continue; // layers
        }
        
        // run through and find out if any of our tracks have volume envelopes on them
        //
        long CompTracks = 0;
        pComp->VTrackGetCount( &CompTracks );
        
        MixerPins += CompTracks;
        
    } // while AudioLayers
    
    return MixerPins;
}

//############################################################################
// 
//############################################################################

STDMETHODIMP CRenderEngine::RenderOutputPins( )
{

    CAutoLock Lock( &m_CritSec );
    DbgTimer d( "(rendeng) RenderOutputPins" );

#ifdef DEBUG
    long ttt1 = timeGetTime( );
#endif
    
    // if it's broken, don't do anything.
    //
    if( m_hBrokenCode )
    {
        return E_RENDER_ENGINE_IS_BROKEN;
    }
    
    // need a graph to render anything
    //
    if( !m_pGraph )
    {
        return E_INVALIDARG;
    }
    
    HRESULT hr = 0;
    
    long GroupCount = 0;
    hr = m_pTimeline->GetGroupCount( &GroupCount );
    
    // need some groups first
    //
    if( !GroupCount )
    {
        return E_INVALIDARG;
    }
    
    // hookup each group in the timeline
    //
    for( int CurrentGroup = 0 ; CurrentGroup < GroupCount ; CurrentGroup++ )
    {
        DbgTimer d( "(rendereng) RenderOutputPins, for group" );

        CComPtr< IAMTimelineObj > pGroupObj;
        hr = m_pTimeline->GetGroup( &pGroupObj, CurrentGroup );
        ASSERT( !FAILED( hr ) );
        if( FAILED( hr ) )
        {
            //            hr = _GenerateError( 2, DEX_IDS_TIMELINE_PARSE, hr );
            continue;
        }
        CComQIPtr< IAMTimelineGroup, &IID_IAMTimelineGroup > pGroup( pGroupObj );
        if( !pGroup )
        {
            //            hr = _GenerateError( 2, DEX_IDS_TIMELINE_PARSE, hr );
            continue;
        }
        AM_MEDIA_TYPE MediaType;
        memset( &MediaType, 0, sizeof( MediaType ) );
        hr = pGroup->GetMediaType( &MediaType );
        GUID MajorType = MediaType.majortype;
        FreeMediaType( MediaType );
        if( FAILED( hr ) )
        {
            //            hr = _GenerateError( 2, DEX_IDS_TIMELINE_PARSE, hr );
            continue;
        }
        CComQIPtr< IBaseFilter, &IID_IBaseFilter > pSwitcherBase( m_pSwitcherArray[CurrentGroup] );
        if( !pSwitcherBase )
        {
            //            hr = _GenerateError( 2, DEX_IDS_INTERFACE_ERROR, hr );
            // couldn't find pin, may as well render the rest of them
            //
            continue;
        }
        CComPtr< IPin > pSwitchOut;
        m_pSwitcherArray[CurrentGroup]->GetOutputPin( 0, &pSwitchOut );
        ASSERT( pSwitchOut );
        if( !pSwitchOut )
        {
            hr = _GenerateError( 2, DEX_IDS_GRAPH_ERROR, E_FAIL );
            return hr;
        }
        
        if( FAILED( hr ) )
        {
            _CheckErrorCode( hr );
            return hr;
        }
        
        // see if output pin is already connected
        //
        CComPtr< IPin > pConnected;
        pSwitchOut->ConnectedTo( &pConnected );
        if( pConnected )
        {
            continue;
        }

        if( MajorType == MEDIATYPE_Video )
        {
            // The Dexter Queue has an output queue to improve performance by
            // letting the graph get ahead during fast parts so slow DXT's don't
            // drag us down!  MUXES typically have their own queues... only do
            // this for preview mode!
            //
            CComPtr< IBaseFilter > pQueue;
            hr = _CreateObject( CLSID_DexterQueue,
                IID_IBaseFilter,
                (void**) &pQueue );
            ASSERT( !FAILED( hr ) );
            if( FAILED( hr ) )
            {
                _CheckErrorCode( hr );
                return _GenerateError( 2, DEX_IDS_INSTALL_PROBLEM, hr );
            }
            
            // ask how much buffering this group wants
            //
            int nOutputBuffering;
            hr = pGroup->GetOutputBuffering(&nOutputBuffering);
            ASSERT(SUCCEEDED(hr));
            
            CComQIPtr< IAMOutputBuffering, &IID_IAMOutputBuffering > pBuffer ( 
                pQueue );
            hr = pBuffer->SetOutputBuffering( nOutputBuffering );
            ASSERT(SUCCEEDED(hr));
            
            // put the QUEUE in the graph
            //
            hr = _AddFilter( pQueue, L"Dexter Queue" );
            ASSERT( !FAILED( hr ) );
            if( FAILED( hr ) )
            {
                _CheckErrorCode( hr );
                return _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
            }
            
            // find some pins
            //
            IPin * pQueueInPin = GetInPin( pQueue , 0 );
            ASSERT( pQueueInPin );
            if( !pQueueInPin )
            {
                _CheckErrorCode( hr );
                return _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
            }
            IPin * pQueueOutPin = GetOutPin( pQueue , 0 );
            ASSERT( pQueueOutPin );
            if( !pQueueOutPin )
            {
                _CheckErrorCode( hr );
                return _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
            }
            
            // connect the QUEUE to the switch
            //
            hr = _Connect( pSwitchOut, pQueueInPin );
            ASSERT( !FAILED( hr ) );
            if( FAILED( hr ) )
            {
                _CheckErrorCode( hr );
                return _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
            }
            
            // create a video renderer, to provide a destination
            //
            CComPtr< IBaseFilter > pVidRenderer;
            hr = _CreateObject(
                CLSID_VideoRenderer,
                IID_IBaseFilter,
                (void**) &pVidRenderer );
            ASSERT( !FAILED( hr ) );
            if( FAILED( hr ) )
            {
                _CheckErrorCode( hr );
                return _GenerateError( 2, DEX_IDS_INSTALL_PROBLEM, hr );
            }
            
            // put it in the graph
            //
            hr = _AddFilter( pVidRenderer, L"Video Renderer" );
            ASSERT( !FAILED( hr ) );
            if( FAILED( hr ) )
            {
                _CheckErrorCode( hr );
                return _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
            }
            
            // find a pin
            //
            IPin * pVidRendererPin = GetInPin( pVidRenderer , 0 );
            ASSERT( pVidRendererPin );
            if( !pVidRendererPin )
            {
                _CheckErrorCode( hr );
                return _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
            }
            
            // connect the QUEUE to the video renderer
            //
            hr = _Connect( pQueueOutPin, pVidRendererPin );
            ASSERT( !FAILED( hr ) );
            if( FAILED( hr ) )
            {
                _CheckErrorCode( hr );
                return _GenerateError( 2, DEX_IDS_GRAPH_ERROR, hr );
            }
        }
        else if( MajorType == MEDIATYPE_Audio )
        {
            // create a audio renderer so we can hear it
            CComPtr< IBaseFilter > pAudRenderer;
            hr = _CreateObject(
                CLSID_DSoundRender,
                IID_IBaseFilter,
                (void**) &pAudRenderer );
            if( FAILED( hr ) )
            {
                return VFW_S_AUDIO_NOT_RENDERED;
            }
            
            hr = _AddFilter( pAudRenderer, L"Audio Renderer" );
            if( FAILED( hr ) )
            { 
                return VFW_S_AUDIO_NOT_RENDERED;
            }
            
            IPin * pAudRendererPin = GetInPin( pAudRenderer , 0 );
            if( !pAudRendererPin )
            {
		m_pGraph->RemoveFilter(pAudRenderer);
                return VFW_S_AUDIO_NOT_RENDERED;
            }
            
            hr = _Connect( pSwitchOut, pAudRendererPin );
            if( FAILED( hr ) )
            {
		m_pGraph->RemoveFilter(pAudRenderer);
                return VFW_S_AUDIO_NOT_RENDERED;
            }
        }
        else
        {
            // !!! just call render???
        }
    } // for all groups
    
#ifdef DEBUG
    ttt1 = timeGetTime( ) - ttt1;
    DbgLog((LOG_ERROR,1, "RENDENG::RenderOutputPins took %ld ms", ttt1 ));
#endif

    return hr;
}

//############################################################################
// attempts to set a range where scrubbing will not have to reconnect
//############################################################################

STDMETHODIMP CRenderEngine::SetInterestRange( REFERENCE_TIME Start, REFERENCE_TIME Stop )
{
    CAutoLock Lock( &m_CritSec );
    
    // if it's broken, don't do anything.
    //
    if( m_hBrokenCode )
    {
        return E_RENDER_ENGINE_IS_BROKEN;
    }
    
    // can't set an interest range if the timeline's not been set
    //
    if( !m_pTimeline )
    {
        return E_INVALIDARG;
    }
    
    HRESULT hr = 0;
    hr = m_pTimeline->SetInterestRange( Start, Stop );
    if( FAILED( hr ) )
    {
        //        return hr;
    }
    
    return NOERROR;
}

//############################################################################
// tells us where we want to render from
//############################################################################

STDMETHODIMP CRenderEngine::SetRenderRange( REFERENCE_TIME Start, REFERENCE_TIME Stop )
{
    CAutoLock Lock( &m_CritSec );
    
    m_rtRenderStart = Start;
    m_rtRenderStop = Stop;
    return NOERROR;
}

//############################################################################
// tells the render engine to allocate whatever resources it needs to. (connect the graph)
//############################################################################

STDMETHODIMP CRenderEngine::Commit( )
{
    // !!! do this
    return E_NOTIMPL;
}

//############################################################################
// informs the render engine we would like to free up as much mem as possible. (disconnect the graph)
//############################################################################

STDMETHODIMP CRenderEngine::Decommit( )
{
    // !!! do this
    return E_NOTIMPL;
}

//############################################################################
// ask some info about render engine
//############################################################################

STDMETHODIMP CRenderEngine::GetCaps( long Index, long * pReturn )
{
    // !!! do this
    return E_NOTIMPL;
}

//############################################################################
// 
//############################################################################

HRESULT CRenderEngine::_SetPropsOnAudioMixer( IBaseFilter * pBaseFilter, AM_MEDIA_TYPE * pMediaType, double GroupFPS, long WhichGroup )
{
    HRESULT hr = 0;
    
    // give the mixer the buffer size and media type
    //
    CComQIPtr<IAudMixer, &IID_IAudMixer> pAudMixer(pBaseFilter);
    hr = pAudMixer->set_OutputBuffering(4,(int)(1000.0 / GroupFPS ) + 100 );
    ASSERT( !FAILED( hr ) );
    hr = pAudMixer->put_MediaType( pMediaType );
    ASSERT( !FAILED( hr ) );
    if( FAILED( hr ) )
    {
        VARIANT var;
        VariantInit(&var);
        var.vt = VT_I4;
        var.lVal = WhichGroup;
        return _GenerateError(2, DEX_IDS_BAD_MEDIATYPE, hr, &var );
    }
    
    return hr;
}

//############################################################################
// called by the SR to tell this renderer it's the compressed RE.
//############################################################################

STDMETHODIMP CRenderEngine::DoSmartRecompression( )
{
    CAutoLock Lock( &m_CritSec );
    m_bSmartCompress = TRUE;
    return NOERROR;
}

//############################################################################
// called by the SR to tell us we're being controlled by the SRE.
//############################################################################

STDMETHODIMP CRenderEngine::UseInSmartRecompressionGraph( )
{
    CAutoLock Lock( &m_CritSec );
    m_bUsedInSmartRecompression = TRUE;
    return NOERROR;
}

//############################################################################
// 
//############################################################################
// IObjectWithSite::SetSite
// remember who our container is, for QueryService or other needs
STDMETHODIMP CRenderEngine::SetSite(IUnknown *pUnkSite)
{
    // note: we cannot addref our site without creating a circle
    // luckily, it won't go away without releasing us first.
    m_punkSite = pUnkSite;
    
    return S_OK;
}

//############################################################################
// 
//############################################################################
// IObjectWithSite::GetSite
// return an addrefed pointer to our containing object
STDMETHODIMP CRenderEngine::GetSite(REFIID riid, void **ppvSite)
{
    if (m_punkSite)
        return m_punkSite->QueryInterface(riid, ppvSite);
    
    return E_NOINTERFACE;
}

//############################################################################
// 
//############################################################################
// Forward QueryService calls up to the "real" host
STDMETHODIMP CRenderEngine::QueryService(REFGUID guidService, REFIID riid, void **ppvObject)
{
    IServiceProvider *pSP;
    
    if (!m_punkSite)
        return E_NOINTERFACE;
    
    HRESULT hr = m_punkSite->QueryInterface(IID_IServiceProvider, (void **) &pSP);
    
    if (SUCCEEDED(hr)) {
        hr = pSP->QueryService(guidService, riid, ppvObject);
        pSP->Release();
    }
    
    return hr;
}

//############################################################################
// 
//############################################################################

STDMETHODIMP CRenderEngine::SetSourceNameValidation( BSTR FilterString, IMediaLocator * pCallback, LONG Flags )
{
    CAutoLock Lock( &m_CritSec );
    
    if( !FilterString || ( FilterString[0] == 0 ) )
    {
        m_MedLocFilterString[0] = 0;                            
        m_MedLocFilterString[1] = 0;
    }
    else
    {
        wcsncpy( m_MedLocFilterString, FilterString, _MAX_PATH );
    }
    
    m_pMedLocChain = pCallback;
    m_nMedLocFlags = Flags;
    return NOERROR;
}

STDMETHODIMP CRenderEngine::SetInterestRange2( double Start, double Stop )
{
    return SetInterestRange( DoubleToRT( Start ), DoubleToRT( Stop ) );
}

STDMETHODIMP CRenderEngine::SetRenderRange2( double Start, double Stop )
{
    return SetRenderRange( DoubleToRT( Start ), DoubleToRT( Stop ) );
}

// IMPORTANT! This function either creates the object, period, or if it's in the cache,
// "restores" it and puts it in the graph FOR YOU. DO NOT call AddFilter( ) yourself on a restored
// filter, or it will be added twice to the same graph. Call the internal _AddFilter( ) method
// instead, which checks for you if it's already added.
//
HRESULT CRenderEngine::_CreateObject( CLSID Clsid, GUID Interface, void ** ppObject, long ID )
{
    HRESULT hr = 0;

    // if we want something from the cache, ID will be non-zero
    //
    if( ID != 0 )
    {
        CComPtr< IBaseFilter > pFilter = NULL;
        hr = m_pDeadCache->ReviveFilterToGraph( m_pGraph, ID, &pFilter );
        if( pFilter ) 
        {
            hr = pFilter->QueryInterface( Interface, ppObject );
            return hr;
        }
    }

    DbgLog( ( LOG_TRACE, 2, "RENDENG::Creating object with ID %ld", ID ) );

    hr = CoCreateInstance( Clsid, NULL, CLSCTX_INPROC_SERVER, Interface, ppObject );
    return hr;
}

/*
Tearing down the graph

Sources: pull them off and put them in the dead zone. When we want to put
a source back in, do a lookup based on the source GenID.

Effects: pull them off and put them in the dead zone based on the parent's
index. When we need to put them back in, do a lookup based on the parent's
index.

Transitions: same as effects.

Output pins from the big switcher do NOT get put into the dead zone - they
stay connected! The configuration of the timeline doesn't affect output pins


*/


// Look for matching source in group w/ diff MT. This would be very expensive,
// so we are going to look in the same spot as we are in, in our group. We will
// only check the same physical track # (eg. 4th track in this group, not
// counting how many comps are in there too, or how they're arranged, so that
// just adding extra comp layers to one group (like MediaPad does) won't spoil
// finding the matching source.  It also has to be the same source #, eg.
// the 5th source in that track. If everything about that source matches, and
// it's the other media type, we can use 1 source filter for both the audio and
// video and avoid opening the source twice
// BUT: We only share sources for groups with the same frame rate.  Otherwise
// seeking to a spot might end up in a different video segment than audio
// segment, so only one group will seek the parser, and it might be on the pin
// that is ignoring seeks.
//
HRESULT CRenderEngine::_FindMatchingSource(BSTR bstrName, REFERENCE_TIME SourceStart, REFERENCE_TIME SourceStop, REFERENCE_TIME MediaStart, REFERENCE_TIME MediaStop, int WhichGroup, int WhichTrack, int WhichSource, AM_MEDIA_TYPE *pGroupMediaType, double GroupFPS, long *ID)
{
#ifdef DEBUG
    DWORD dw = timeGetTime();
#endif

    DbgLog((LOG_TRACE,1,TEXT("FindMatchingSource")));

    while (1) {
	int group = WhichGroup + 1;	// we can only share with the next group

        CComPtr< IAMTimelineObj > pGroupObj;
        HRESULT hr = m_pTimeline->GetGroup(&pGroupObj, group);
        if (FAILED(hr)) {
	    break;
	}
        CComQIPtr<IAMTimelineGroup, &IID_IAMTimelineGroup> pGroup(pGroupObj);
	if (pGroup == NULL) {
	    return E_OUTOFMEMORY;
	}

	// if the frame rate doesn't match, don't share sources (see above)
	double fps;
        hr = pGroup->GetOutputFPS(&fps);
	if (FAILED(hr) || fps != GroupFPS) {
	    break;
	}

	// we need a group with a different media type to share sources
	CMediaType mt;
	hr = pGroup->GetMediaType(&mt);
	if (FAILED(hr) || mt.majortype == pGroupMediaType->majortype) {
	    break;
	}

    	CComQIPtr <IAMTimelineNode, &IID_IAMTimelineNode> pNode(pGroup);
	ASSERT(pNode);
        CComPtr< IAMTimelineObj > pTrackObj;
	hr = pNode->XGetNthKidOfType(TIMELINE_MAJOR_TYPE_TRACK, WhichTrack,
				&pTrackObj);
	if (pTrackObj == NULL) {
	    break;
	}

#if 0
    	CComQIPtr <IAMTimelineTrack, &IID_IAMTimelineTrack> pTrack(pTrackObj);
	ASSERT(pTrack);
	
        CComPtr< IAMTimelineObj > pSourceObjLast;
        CComPtr< IAMTimelineObj > pSourceObj;
	do {
	    pSourceObjLast = pSourceObj;
	    pSourceObj.Release();
	    hr = pTrack->GetNextSrcEx(pSourceObjLast, &pSourceObj);
	    if (pSourceObj == NULL) {
	        break;
	    }
	} while (WhichSource--);
#else	// Eric promises this will become faster
        CComPtr< IAMTimelineObj > pSourceObj;
    	CComQIPtr <IAMTimelineNode, &IID_IAMTimelineNode> pNode2(pTrackObj);
	ASSERT(pNode2);
	hr = pNode2->XGetNthKidOfType(TIMELINE_MAJOR_TYPE_SOURCE, WhichSource,
				&pSourceObj);
#endif

	if (pSourceObj == NULL) {
	    break;
	}

        CComQIPtr<IAMTimelineSrc, &IID_IAMTimelineSrc> pSource(pSourceObj);
	ASSERT(pSource);

	REFERENCE_TIME mstart, mstop, start, stop;
	pSourceObj->GetStartStop(&start, &stop);
	if (start != SourceStart || stop != SourceStop) {
	    break;
	}
	CComBSTR bstr;
	hr = pSource->GetMediaName(&bstr);
	if (FAILED(hr)) {
	    break;
	}
	if (DexCompareW(bstr, bstrName)) {
	    break;
	}
	pSource->GetMediaTimes(&mstart, &mstop);
	if (mstart != MediaStart || mstop != MediaStop) {
	    break;
	}
	
	// I don't believe it!  We found a match!
	pSourceObj->GetGenID(ID);
#ifdef DEBUG
        DbgLog((LOG_TRACE,1,TEXT("Source MATCHES group %d  ID %d"),
			(int)group, (int)(*ID)));
    	dw = timeGetTime() - dw;
    	DbgLog((LOG_TIMING,2,TEXT("Match took %d ms"), (int)dw));
#endif
	return S_OK;
    }

#ifdef DEBUG
    dw = timeGetTime() - dw;
    DbgLog((LOG_TIMING,2,TEXT("Failed match took %d ms"), (int)dw));
#endif
    DbgLog((LOG_TRACE,1,TEXT("Failed to find matching source")));
    return E_FAIL;
}


// remove the filter attached to this pin from the dangly list
//
HRESULT CRenderEngine::_RemoveFromDanglyList(IPin *pDanglyPin)
{
    if (m_cdangly == 0)
	return S_OK;	// there is no list

    CheckPointer(pDanglyPin, E_POINTER);
    CComPtr <IPin> pIn;

    pDanglyPin->ConnectedTo(&pIn);
    if (pIn == NULL)
	return S_OK;	// it won't be on the list

    IBaseFilter *pF = GetFilterFromPin(pIn);
    ASSERT(pF);

    for (int z = 0; m_cdangly; z++) {
	if (m_pdangly[z] == pF) {
	    m_pdangly[z] = NULL;
	    break;
	}
    }
    return S_OK;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\silence\silence.cpp ===
// !!! allow setting entire media type, not just sample rate for other uses

// !!! use 2 ro buffers, call GetBuffer twice!

//==========================================================================;
//
//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
//  PURPOSE.
//
//  Copyright (c) 1992 - 1999  Microsoft Corporation.  All Rights Reserved.
//
//--------------------------------------------------------------------------;

#include <streams.h>
#include <qeditint.h>
#include <qedit.h>
#ifdef FILTER_DLL
#include <initguid.h>
#endif
#include "silence.h"
#include "resource.h"

const int DEFAULT_DELAY = 0000;  /* in ms */
const int DEFAULT_AUDIORATE = 44100;  /* samples/sec */

#ifdef FILTER_DLL

CFactoryTemplate g_Templates[] =

  {
    {
      L"Silence",
      &CLSID_Silence,
      CSilenceFilter::CreateInstance,
      NULL, &sudSilence
    },
    {
      L"Silence Generator Property Page",
      &CLSID_SilenceProp,
      CFilterPropertyPage::CreateInstance
    }
  };

int g_cTemplates = sizeof(g_Templates) / sizeof(g_Templates[0]);

#endif

// //////////////////////////////////////////////////////////////////////////////////
// /////// CSilenceFilter ///////////////////////////////////////////////////////////
// //////////////////////////////////////////////////////////////////////////////////

CUnknown * WINAPI CSilenceFilter::CreateInstance (LPUNKNOWN lpunk, HRESULT *phr)

  { // CreateInstance //

    CUnknown *punk = new CSilenceFilter(lpunk, phr);

    if (NULL == punk)
        *phr = E_OUTOFMEMORY;

    return punk;

  } // CreateInstance //

CSilenceFilter::CSilenceFilter (LPUNKNOWN lpunk, HRESULT *phr) :
  CSource(NAME("Silence"), lpunk, CLSID_Silence)
  ,CPersistStream(lpunk, phr)


  { // Constructor //

    CAutoLock lock(&m_cStateLock);

    m_paStreams = (CSourceStream **) new CSilenceStream*[1];

    if (NULL == m_paStreams)
      {
        *phr = E_OUTOFMEMORY;
        return;
      }

    m_paStreams[0] = new CSilenceStream(phr, this, L"Audio out");

    if (NULL == m_paStreams[0])
      {
        *phr = E_OUTOFMEMORY;
        return;
      }

  } // Constructor //

CSilenceFilter::~CSilenceFilter(void)

  { // Destructor //
  } // Destructor //

STDMETHODIMP CSilenceFilter::NonDelegatingQueryInterface (REFIID riid, void **ppv)

  { // NonDelegatingQueryInterface //

    if (riid == IID_IPersistStream)
	return GetInterface((IPersistStream *) this, ppv);

    return CSource::NonDelegatingQueryInterface(riid, ppv);

  } // NonDelegatingQueryInterface //



// ---------- IPersistStream

// tell our clsid
//
STDMETHODIMP CSilenceFilter::GetClassID(CLSID *pClsid)
{
    CheckPointer(pClsid, E_POINTER);
    *pClsid = CLSID_Silence;
    return S_OK;
}

typedef struct _SILENCESave {
    REFERENCE_TIME	rtStartTime;
    REFERENCE_TIME	rtDuration;
    AM_MEDIA_TYPE mt; // format is hidden after the array
} SILENCESav;

// !!! we only support 1 stat/stop/skew right now

// persist ourself
//
HRESULT CSilenceFilter::WriteToStream(IStream *pStream)
{
    DbgLog((LOG_TRACE,1,TEXT("CSilenceFilter::WriteToStream")));

    CheckPointer(pStream, E_POINTER);
    SILENCESav *px;

    CSilenceStream *pOutpin=( CSilenceStream *)m_paStreams[0];

    CMediaType MyMt;
    pOutpin->get_MediaType( &MyMt );

    int savesize = sizeof(SILENCESav) + MyMt.cbFormat;

    DbgLog((LOG_TRACE,1,TEXT("Persisted data is %d bytes"), savesize));

    px = (SILENCESav *)QzTaskMemAlloc(savesize);
    if (px == NULL) {
        DbgLog((LOG_ERROR,1,TEXT("*** Out of memory")));
	FreeMediaType(MyMt);
	return E_OUTOFMEMORY;
    }

    //save data
    REFERENCE_TIME rtStop, rt;
    double d;
    pOutpin->GetStartStopSkew(&(px->rtStartTime), &rtStop, &rt, &d);
    px->rtDuration = rtStop - px->rtStartTime;

    px->mt	    = MyMt;
    // Can't persist pointers
    px->mt.pbFormat = NULL;
    px->mt.pUnk	    = NULL;		// !!!

    // the format goes after the array
    BYTE *pb;
    pb=(BYTE *)(px)+sizeof(SILENCESav);
    CopyMemory(pb, MyMt.pbFormat, MyMt.cbFormat);

    HRESULT hr = pStream->Write(px, savesize, 0);
    FreeMediaType(MyMt);
    QzTaskMemFree(px);
    if(FAILED(hr)) {
        DbgLog((LOG_ERROR,1,TEXT("*** WriteToStream FAILED")));
        return hr;
    }
    return NOERROR;

}


// load ourself
//
HRESULT CSilenceFilter::ReadFromStream(IStream *pStream)
{
    DbgLog((LOG_TRACE,1,TEXT("CenBlkVid::ReadFromStream")));

    CheckPointer(pStream, E_POINTER);

    int savesize=sizeof(SILENCESav);

    // we don't yet know how many saved connections there are
    // all we know we have for sure is the beginning of the struct
    SILENCESav *px = (SILENCESav *)QzTaskMemAlloc(savesize);
    if (px == NULL) {
        DbgLog((LOG_ERROR,1,TEXT("*** Out of memory")));
	return E_OUTOFMEMORY;
    }

    HRESULT hr = pStream->Read(px, savesize, 0);
    if(FAILED(hr)) {
        DbgLog((LOG_ERROR,1,TEXT("*** ReadFromStream FAILED")));
        QzTaskMemFree(px);
        return hr;
    }

    if(px->mt.cbFormat)
    {
	// how much saved data was there, really?  Get the rest
	savesize +=  px->mt.cbFormat;
	px = (SILENCESav *)QzTaskMemRealloc(px, savesize);
	if (px == NULL) {
	    DbgLog((LOG_ERROR,1,TEXT("*** Out of memory")));
	    return E_OUTOFMEMORY;
	}

    }
    DbgLog((LOG_TRACE,1,TEXT("Persisted data is %d bytes"), savesize));


    BYTE *pb;
    pb=(BYTE *)(px)+sizeof(SILENCESav) ;
    hr = pStream->Read(pb, (savesize-sizeof(SILENCESav)), 0);
    if(FAILED(hr)) {
        DbgLog((LOG_ERROR,1,TEXT("*** ReadFromStream FAILED")));
        QzTaskMemFree(px);
        return hr;
    }

    CSilenceStream *pOutpin=( CSilenceStream *)m_paStreams[0];
    pOutpin->ClearStartStopSkew();
    pOutpin->AddStartStopSkew(px->rtStartTime, px->rtStartTime +
					px->rtDuration, 0, 1);

    AM_MEDIA_TYPE MyMt = px->mt;
    MyMt.pbFormat = (BYTE *)QzTaskMemAlloc(MyMt.cbFormat);
    if (MyMt.pbFormat == NULL) {
        QzTaskMemFree(px);
        return E_OUTOFMEMORY;
    }

    // remember, the format is after the array
    CopyMemory(MyMt.pbFormat, pb, MyMt.cbFormat);

    pOutpin->put_MediaType (&MyMt);
    FreeMediaType(MyMt);
    QzTaskMemFree(px);

    SetDirty(FALSE);
    return S_OK;
}

// how big is our save data?
int CSilenceFilter::SizeMax()
{
    return sizeof(SILENCESav);
}


// //////////////////////////////////////////////////////////////////////////////////
// /////// CSilenceStream ///////////////////////////////////////////////////////////
// //////////////////////////////////////////////////////////////////////////////////

CSilenceStream::CSilenceStream (HRESULT *phr, CSilenceFilter *pParent, LPCWSTR pName) :
    CSourceStream(NAME("Src Stream"),phr, pParent, pName)
    , m_iBufferCnt(0)    //How many source buffer we get
    , m_ppbDstBuf(NULL)	 //will be used to zero the Dst buffers
    , m_bZeroBufCnt(0)	// How many source buffer already set to zero.
    , m_rtNewSeg(0)	// last NewSeg given

  { // Constructor //

    ZeroMemory(&m_mtAccept, sizeof(AM_MEDIA_TYPE));

    //set default
    m_mtAccept.majortype = MEDIATYPE_Audio;
    m_mtAccept.subtype = MEDIASUBTYPE_PCM;
    m_mtAccept.formattype = FORMAT_WaveFormatEx;

    WAVEFORMATEX * pwf = (WAVEFORMATEX*)
			 m_mtAccept.AllocFormatBuffer( sizeof(WAVEFORMATEX) );
    if( !pwf )
    {
        *phr = E_OUTOFMEMORY;
        return;
    }
    ZeroMemory(pwf, sizeof(WAVEFORMATEX));
    pwf->wFormatTag       = WAVE_FORMAT_PCM;
    pwf->nSamplesPerSec   = 44100;
    pwf->wBitsPerSample   = 16;
    pwf->nChannels        = 2;
    pwf->nBlockAlign      = pwf->wBitsPerSample * pwf->nChannels / 8;
    pwf->nAvgBytesPerSec  = (int)((DWORD) pwf->nBlockAlign * pwf->nSamplesPerSec);
    pwf->cbSize           = 0;

    pParent->m_stream = this;

    // Defaults; use IDexterSequencer to set 'real' values
    m_rtStartTime       = DEFAULT_DELAY*10000;
    // MUST BE INFINITE stop time, Dexter doesn't set a stop time!
    // not too big so math on it will overflow, though
    m_rtDuration        = (MAX_TIME / 1000) - m_rtStartTime;
    m_rtStamp = m_rtStartTime;

    // !!! Fix DecideBufferSize if this changes
    m_rtDelta           = 2500000;  // 1/4 second

  } // Constructor //

CSilenceStream::~CSilenceStream(void)

  { // Destructor //
    /* BUFFER POINTER */
    if (m_ppbDstBuf)
        delete [] m_ppbDstBuf;

    FreeMediaType( m_mtAccept );
  } // Destructor //


STDMETHODIMP CSilenceStream::NonDelegatingQueryInterface (REFIID riid, void **ppv)
{
    if (IsEqualIID(IID_IDexterSequencer, riid))
      return GetInterface((IDexterSequencer *)this, ppv);
    else if (IsEqualIID(IID_ISpecifyPropertyPages, riid))
	return GetInterface((ISpecifyPropertyPages *)this, ppv);
    else if (IsEqualIID(IID_IMediaSeeking, riid))
      return GetInterface((IMediaSeeking *)this, ppv);
    else
      return CSourceStream::NonDelegatingQueryInterface(riid, ppv);

}


HRESULT CSilenceStream::GetMediaType (CMediaType *pmt)

  { // GetMediaType //

    CopyMediaType(pmt, &m_mtAccept);

    return S_OK;

  } // GetMediaType //

HRESULT CSilenceStream::DecideAllocator (IMemInputPin *pPin, IMemAllocator **ppAlloc)

  { // DecideAllocator //

      HRESULT hr = NOERROR;

      *ppAlloc = NULL;

      ALLOCATOR_PROPERTIES prop;
      ZeroMemory(&prop, sizeof(prop));

      prop.cbAlign = 1;

      // Downstream allocation?
      hr = pPin->GetAllocator(ppAlloc);

      if (SUCCEEDED(hr))

        { // Downstream allocation

          hr = DecideBufferSize(*ppAlloc, &prop);

          if (SUCCEEDED(hr))

            { // DecideBufferSize success

              // Read-only buffers?!
              hr = pPin->NotifyAllocator(*ppAlloc, TRUE);

              if (SUCCEEDED(hr))
                return NOERROR;

            } // DecideBufferSize success

        } // Downstream allocation

      /* If the GetAllocator failed we may not have an interface */

      if (*ppAlloc)
        {
          (*ppAlloc)->Release();
          *ppAlloc = NULL;
        }

      // Output pin allocation?

      hr = InitAllocator(ppAlloc);

      if (SUCCEEDED(hr))

        { // Output pin's allocation

          // Note - the properties passed here are in the same
          // structure as above and may have been modified by
          // the previous call to DecideBufferSize

          hr = DecideBufferSize(*ppAlloc, &prop);

          if (SUCCEEDED(hr))

            { // DecideBufferSize success

              // Read-only buffers?!
              hr = pPin->NotifyAllocator(*ppAlloc, TRUE);

              if (SUCCEEDED(hr))
                return NOERROR;

            } // DecideBufferSize success

        } // Output pin's allocation

      // Release interface pointers if needed
      if (*ppAlloc)
        {
          (*ppAlloc)->Release();
          *ppAlloc = NULL;
        }

     return hr;

  } // DecideAllocator //

HRESULT CSilenceStream::DecideBufferSize (IMemAllocator *pAlloc, ALLOCATOR_PROPERTIES *pProperties)

  { // DecideBufferSize //

    ASSERT(pAlloc);
    ASSERT(pProperties);

    WAVEFORMATEX *pwf = (WAVEFORMATEX *)(m_mtAccept.pbFormat);
    ASSERT(pwf);

    CAutoLock lock(m_pFilter->pStateLock());

    // MAXBUFFERCNT read-only buffers !
    if (pProperties->cBuffers < MAXBUFFERCNT )
      pProperties->cBuffers = MAXBUFFERCNT;

    if (pProperties->cbBuffer < (int)pwf->nSamplesPerSec)
      pProperties->cbBuffer = pwf->nSamplesPerSec;

    if (pProperties->cbAlign == 0)
      pProperties->cbAlign = 1;

    ALLOCATOR_PROPERTIES Actual;

    pAlloc->SetProperties(pProperties,&Actual);

    if (Actual.cbBuffer < pProperties->cbBuffer)
      return E_FAIL;

    //because I am not insisting my own buffer, I may get more than MAXBUFFERCNT buffers.
    m_iBufferCnt =Actual.cBuffers; //how many buffer need to be set to 0

    return NOERROR;

  } // DecideBufferSize //

HRESULT CSilenceStream::FillBuffer (IMediaSample *pms)

  { // FillBuffer //

    CAutoLock foo(&m_csFilling);

    ASSERT( m_ppbDstBuf != NULL );
    ASSERT( m_iBufferCnt );


    // The base class will automatically deliver end-of-stream when
    // the FillBuffer() returns S_FALSE so exploit this point when
    // the time comes.

    if (m_rtStamp >= m_rtStartTime + m_rtDuration) {
        DbgLog((LOG_TRACE,3,TEXT("Silence: all done")));
        return S_FALSE;
    }

    if( m_bZeroBufCnt < m_iBufferCnt  )	
    {
	//
	// there is no guarantee that the buffer is initialized yet
	//

	BYTE *pData;

	//pms: output media sample pointer
	pms->GetPointer(&pData);	    //get pointer to output buffer

	int	i	= 0;
	BOOL	bInit	= FALSE;
	while ( i <  m_bZeroBufCnt )
	{
	    if( m_ppbDstBuf[ i++ ] == pData)
	    {
		bInit	= TRUE;
		break;
	    }
	}

	if( bInit   == FALSE )
	{
	    long lDataLen = pms->GetSize(); //get output buffer size
    	    ZeroMemory( pData, lDataLen );  //clear memory
	    m_ppbDstBuf[ i ]	= pData;    //save this data pointer	
	    m_bZeroBufCnt++;
	}
    }


    REFERENCE_TIME rtSampleStop = m_rtStamp+m_rtDelta;

    pms->SetTime(&m_rtStamp, &rtSampleStop);

    DbgLog((LOG_TRACE,3,TEXT("Silence: Filled buffer %d"),
					(int)(m_rtStamp / 10000)));
    m_rtStamp += m_rtDelta;

    return NOERROR;

  } // FillBuffer //

HRESULT CSilenceStream::Active (void)

  { // Active //

    m_rtStamp = m_rtStartTime;

    //how many buffer is already set to 0.
    m_bZeroBufCnt	    =0;

    // will be used to zero the Dst buffers
    delete [] m_ppbDstBuf;
    m_ppbDstBuf		= new BYTE *[ m_iBufferCnt ];   //NULL;
    if( !m_ppbDstBuf )
    {
        return E_OUTOFMEMORY;
    }

    // don't reset m_rtNewSeg!  A seek might happen while stopped!

    for (int i=0; i<m_iBufferCnt; i++)
	m_ppbDstBuf[i]=NULL;

    return CSourceStream::Active();

  } // Active //



// --- IDexterSequencer implementation ---

HRESULT CSilenceStream::get_MediaType  (AM_MEDIA_TYPE *pmt)
{
    CAutoLock cAutolock(m_pFilter->pStateLock());

    CheckPointer(pmt,E_POINTER);

    CopyMediaType(pmt, &m_mtAccept);

    return NOERROR;

}


HRESULT CSilenceStream::put_MediaType (const AM_MEDIA_TYPE *pmt)
{
    CAutoLock cAutolock(m_pFilter->pStateLock());
    CheckPointer(pmt, E_POINTER);

    if (IsConnected())
	return VFW_E_ALREADY_CONNECTED;


    WAVEFORMATEX * pwf = (WAVEFORMATEX*) (pmt->pbFormat);

    if( (pmt->majortype != MEDIATYPE_Audio ) ||
	(pwf->wFormatTag != WAVE_FORMAT_PCM) )
	return E_FAIL;  //only accept uncompressed audio

    //accept any Samples/second
    //pwf->nSamplesPerSec;
    if( pwf->nChannels>0 )
    {	
	//at least one channel exits
        WORD wn=pwf->wBitsPerSample;
        if(wn ==16  || wn ==8  )
	{
	    FreeMediaType(m_mtAccept);
	    CopyMediaType(&m_mtAccept, pmt);
	    return NOERROR;
	}
    }
    return E_FAIL;

}



// !!! We only support 1 start/stop right now.  No skew!

HRESULT CSilenceStream::ClearStartStopSkew()
{
    return NOERROR;
}


HRESULT CSilenceStream::GetStartStopSkewCount(int *pCount)
{
    CheckPointer(pCount, E_POINTER);
    *pCount = 1;
    return NOERROR;
}


HRESULT CSilenceStream::GetStartStopSkew(REFERENCE_TIME *StartTime, REFERENCE_TIME *StopTime, REFERENCE_TIME *Skew, double *pdRate)
{
    CheckPointer(StartTime, E_POINTER);
    CheckPointer(StopTime, E_POINTER);
    CheckPointer(Skew, E_POINTER);
    CheckPointer(pdRate, E_POINTER);

    *StartTime = m_rtStartTime;
    *StopTime = m_rtStartTime + m_rtDuration;

    *pdRate = 1.0;

    return NOERROR;

}


HRESULT CSilenceStream::AddStartStopSkew(REFERENCE_TIME StartTime, REFERENCE_TIME StopTime, REFERENCE_TIME Skew, double dRate)
{

    if (dRate != 1.0)
	return E_INVALIDARG;

    m_rtStartTime = StartTime;
    m_rtDuration = StopTime - StartTime;

    return NOERROR;
}




// --- ISpecifyPropertyPages ---

STDMETHODIMP CSilenceStream::GetPages (CAUUID *pPages)

  { // GetPages //

    pPages->cElems = 1;
    pPages->pElems = (GUID *)CoTaskMemAlloc(sizeof(GUID));

    if (pPages->pElems == NULL)
        return E_OUTOFMEMORY;

    *(pPages->pElems) = CLSID_SilenceProp;

    return NOERROR;

  } // GetPages

#ifdef FILTER_DLL
// /////// Filter registration /////////////

STDAPI DllRegisterServer ()

  { // DllRegisterServer //

    return AMovieDllRegisterServer2(TRUE);

  } // DllRegisterServer //

STDAPI DllUnregisterServer ()

  { // DllUnregisterServer //

    return AMovieDllRegisterServer2(FALSE);

  } // DllUnregisterServer //
#endif

// //////////////////////////////////////////////////////////////////////////////////
// /////// CFilterPropertyPage //////////////////////////////////////////////////////
// //////////////////////////////////////////////////////////////////////////////////

//
// CreateInstance
//
CUnknown *CFilterPropertyPage::CreateInstance(LPUNKNOWN lpunk, HRESULT *phr)

  { // CreateInstance //

    CUnknown *punk = new CFilterPropertyPage(lpunk, phr);

    if (NULL == punk)
	    *phr = E_OUTOFMEMORY;

    return punk;

  } // CreateInstance //

CFilterPropertyPage::CFilterPropertyPage(LPUNKNOWN pUnk, HRESULT *phr) : CBasePropertyPage(NAME("Silence Generator Property Page"), pUnk, IDD_PROPPAGE, IDS_TITLE4), m_pis(NULL), m_bInitialized(FALSE)

  { // Constructor //
  } // Constructor //

void CFilterPropertyPage::SetDirty()

  { // SetDirty //

      m_bDirty = TRUE;

      if (m_pPageSite)
        m_pPageSite->OnStatusChange(PROPPAGESTATUS_DIRTY);

  } // SetDirty //

HRESULT CFilterPropertyPage::OnActivate (void)

  { // OnActivate //

    m_bInitialized = TRUE;

    return NOERROR;

  } // OnActivate //

HRESULT CFilterPropertyPage::OnDeactivate (void)

  { // OnDeactivate //

    m_bInitialized = FALSE;

    GetControlValues();

    return NOERROR;

  } // OnDeactivate //

INT_PTR CFilterPropertyPage::OnReceiveMessage (HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)

  { // OnReceiveMessage //

    ASSERT(m_pis != NULL);

    switch(uMsg)

      { // Switch

        case WM_COMMAND:

          if (!m_bInitialized)
            return CBasePropertyPage::OnReceiveMessage(hwnd,uMsg,wParam,lParam);

          m_bDirty = TRUE;

          if (m_pPageSite)
            m_pPageSite->OnStatusChange(PROPPAGESTATUS_DIRTY);

          return TRUE;

        case WM_INITDIALOG:

          SetDlgItemInt(hwnd, IDC_RATE, m_nSamplesPerSec, FALSE);
          SetDlgItemInt(hwnd, IDC_SILENCE_NCHANNELNUM, m_nChannelNum, FALSE);
	  SetDlgItemInt(hwnd, IDC_SILENCE_NBITS, m_nBits, FALSE);
          SetDlgItemInt(hwnd, IDC_START4, (int)(m_rtStartTime / 10000), FALSE);
          SetDlgItemInt(hwnd, IDC_DUR, (int)(m_rtDuration / 10000), FALSE);

          return TRUE;

          break;

        default:
          return CBasePropertyPage::OnReceiveMessage(hwnd,uMsg,wParam,lParam);
          break;

      } // Switch

  } // OnReceiveMessage //

HRESULT CFilterPropertyPage::OnConnect (IUnknown *pUnknown)

  { // OnConnect //

    pUnknown->QueryInterface(IID_IDexterSequencer, (void **)&m_pis);

    ASSERT(m_pis != NULL);


    // Defaults from filter's current values (via IDexterSequencer)
    REFERENCE_TIME rtStop, rt;
    double d;
    m_pis->GetStartStopSkew(&m_rtStartTime, &rtStop, &rt, &d);
    m_rtDuration = rtStop - m_rtStartTime;

    CMediaType mt;
    mt.AllocFormatBuffer( sizeof( WAVEFORMATEX ) );

    m_pis->get_MediaType( &mt );
    WAVEFORMATEX * pwf = (WAVEFORMATEX*) mt.Format( );

    m_nSamplesPerSec	=pwf->nSamplesPerSec;
    m_nChannelNum	=pwf->nChannels;
    m_nBits		=(int)pwf->wBitsPerSample;

    FreeMediaType(mt);

    return NOERROR;

  } // OnConnect //

HRESULT CFilterPropertyPage::OnDisconnect()

  { // OnDisconnect //

    if (m_pis)

      { // Release

        m_pis->Release();
        m_pis = NULL;

      } // Release

    m_bInitialized = FALSE;

    return NOERROR;

  } // OnDisconnect //

HRESULT CFilterPropertyPage::OnApplyChanges()

  { // OnApplyChanges //

    ASSERT(m_pis != NULL);

    HRESULT hr =GetControlValues();
    if(hr!=NOERROR)
	return E_FAIL; //data is not valid

    //build new mediatype
    CMediaType mt;
    mt.AllocFormatBuffer( sizeof( WAVEFORMATEX ) );

    //old format
    hr=m_pis->get_MediaType( &mt );
    if(hr!=NOERROR)
    {
	FreeMediaType(mt);
	return E_FAIL;
    }

    WAVEFORMATEX * vih	= (WAVEFORMATEX*) mt.Format( );
    vih->nSamplesPerSec = m_nSamplesPerSec;
    vih->nChannels	= (WORD)m_nChannelNum;
    vih->wBitsPerSample = (WORD)m_nBits;
    vih->nBlockAlign    = vih->wBitsPerSample * vih->nChannels / 8;
    vih->nAvgBytesPerSec= vih->nBlockAlign * vih->nSamplesPerSec;
	
    m_pis->put_MediaType( &mt );
    m_pis->AddStartStopSkew(m_rtStartTime, m_rtStartTime + m_rtDuration, 0, 1);

    FreeMediaType(mt);
    return (NOERROR);

  } // OnApplyChanges //

HRESULT CFilterPropertyPage::GetControlValues (void)

  { // GetControlValues //

    // Sampling rate
    //accept any Samples/second
    m_nSamplesPerSec = GetDlgItemInt(m_Dlg, IDC_RATE, NULL, FALSE);


    int n=0;
    n= GetDlgItemInt(m_Dlg, IDC_SILENCE_NCHANNELNUM, NULL, FALSE);
    if( n>0 )
    {	
	//at least one channel exits
        m_nChannelNum =n;
        n=GetDlgItemInt(m_Dlg, IDC_SILENCE_NBITS, NULL, FALSE);
        if(n ==16 || n==8 )
	{	
	    m_nBits	  =n ;
	    m_rtStartTime = GetDlgItemInt(m_Dlg, IDC_START4, NULL, FALSE) * (LONGLONG)10000;
	    m_rtDuration = GetDlgItemInt(m_Dlg, IDC_DUR, NULL, FALSE) * (LONGLONG)10000;
	    return NOERROR;
	}
    }

    return S_FALSE;

  } // GetControlValues //




// --- IMediaSeeking methods ----------


STDMETHODIMP
CSilenceStream::GetCapabilities(DWORD * pCaps)
{
    CheckPointer(pCaps,E_POINTER);
    // we always know the current position
    *pCaps =     AM_SEEKING_CanSeekAbsolute
		   | AM_SEEKING_CanSeekForwards
		   | AM_SEEKING_CanSeekBackwards
		   | AM_SEEKING_CanGetCurrentPos
		   | AM_SEEKING_CanGetStopPos
		   | AM_SEEKING_CanGetDuration;
		   //| AM_SEEKING_CanDoSegments
		   //| AM_SEEKING_Source;
    return S_OK;
}


STDMETHODIMP
CSilenceStream::CheckCapabilities(DWORD * pCaps)
{
    CheckPointer(pCaps,E_POINTER);

    DWORD dwMask = 0;
    GetCapabilities(&dwMask);
    *pCaps &= dwMask;

    return S_OK;
}


STDMETHODIMP
CSilenceStream::IsFormatSupported(const GUID * pFormat)
{
    CheckPointer(pFormat,E_POINTER);
    return (*pFormat == TIME_FORMAT_MEDIA_TIME) ? S_OK : S_FALSE;
}

STDMETHODIMP
CSilenceStream::QueryPreferredFormat(GUID *pFormat)
{
    CheckPointer(pFormat,E_POINTER);
    *pFormat = TIME_FORMAT_MEDIA_TIME;
    return S_OK;
}

STDMETHODIMP
CSilenceStream::SetTimeFormat(const GUID * pFormat)
{
    CheckPointer(pFormat,E_POINTER);

    if(*pFormat == TIME_FORMAT_MEDIA_TIME)
	return S_OK;
    else
	return E_FAIL;
}

STDMETHODIMP
CSilenceStream::GetTimeFormat(GUID *pFormat)
{
    CheckPointer(pFormat,E_POINTER);
    *pFormat = TIME_FORMAT_MEDIA_TIME ;
    return S_OK;
}

STDMETHODIMP
CSilenceStream::IsUsingTimeFormat(const GUID * pFormat)
{
    CheckPointer(pFormat,E_POINTER);
    if (*pFormat == TIME_FORMAT_MEDIA_TIME)
	return S_OK;
    else
	return S_FALSE;
}

// The biggie!
//
STDMETHODIMP
CSilenceStream::SetPositions( LONGLONG * pCurrent, DWORD CurrentFlags
			  , LONGLONG * pStop, DWORD StopFlags )
{
    // make sure we're not filling a buffer right now
    m_csFilling.Lock();

    HRESULT hr;
    REFERENCE_TIME rtStart, rtStop;

    // we don't do segments
    if ((CurrentFlags & AM_SEEKING_Segment) ||
				(StopFlags & AM_SEEKING_Segment)) {
    	DbgLog((LOG_TRACE,1,TEXT("FRC: ERROR-Seek used EC_ENDOFSEGMENT!")));
        m_csFilling.Unlock();
	return E_INVALIDARG;
    }

    // default to current values unless this seek changes them
    GetCurrentPosition(&rtStart);
    GetStopPosition(&rtStop);

    // figure out where we're seeking to
    DWORD dwFlags = (CurrentFlags & AM_SEEKING_PositioningBitsMask);
    if (dwFlags == AM_SEEKING_AbsolutePositioning) {
	CheckPointer(pCurrent, E_POINTER);
	rtStart = *pCurrent;
    } else if (dwFlags == AM_SEEKING_RelativePositioning) {
	CheckPointer(pCurrent, E_POINTER);
	hr = GetCurrentPosition(&rtStart);
	rtStart += *pCurrent;
    } else if (dwFlags) {
    	DbgLog((LOG_TRACE,1,TEXT("Switch::Invalid Current Seek flags")));
        m_csFilling.Unlock();
	return E_INVALIDARG;
    }

    dwFlags = (StopFlags & AM_SEEKING_PositioningBitsMask);
    if (dwFlags == AM_SEEKING_AbsolutePositioning) {
	CheckPointer(pStop, E_POINTER);
	rtStop = *pStop;
    } else if (dwFlags == AM_SEEKING_RelativePositioning) {
	CheckPointer(pStop, E_POINTER);
	hr = GetStopPosition(&rtStop);
	rtStop += *pStop;
    } else if (dwFlags == AM_SEEKING_IncrementalPositioning) {
	CheckPointer(pStop, E_POINTER);
	hr = GetCurrentPosition(&rtStop);
	rtStop += *pStop;
    }

    // !!! silence should be made not to need an audio repackager

    // flush first, so that our thread won't be blocked delivering
    DeliverBeginFlush();

    // Unlock/Stop so that our thread can wake up and stop without hanging
    m_csFilling.Unlock();
    Stop();

    // now fix the new values
    m_rtStartTime = rtStart;
    m_rtDuration = rtStop - rtStart;

    // now finish flushing
    DeliverEndFlush();

    DeliverNewSegment(rtStart, rtStop, 1.0);
    m_rtNewSeg = rtStart;

    // now start time stamps at 0-based
    m_rtStartTime = 0;
    m_rtStamp = m_rtStartTime;

    // reset same stuff we reset when we start streaming
    m_bZeroBufCnt = 0;

    // now start the thread up again
    Pause();

    DbgLog((LOG_TRACE,3,TEXT("Completed SILENCE seek")));

    return S_OK;
}

STDMETHODIMP
CSilenceStream::GetPositions(LONGLONG *pCurrent, LONGLONG * pStop)
{
    CheckPointer(pCurrent, E_POINTER);
    CheckPointer(pStop, E_POINTER);
    GetCurrentPosition(pCurrent);
    GetStopPosition(pStop);
    return S_OK;
}

STDMETHODIMP
CSilenceStream::GetCurrentPosition(LONGLONG *pCurrent)
{
    CheckPointer(pCurrent, E_POINTER);
    *pCurrent = m_rtStamp + m_rtNewSeg;
    return S_OK;
}

STDMETHODIMP
CSilenceStream::GetStopPosition(LONGLONG *pStop)
{
    CheckPointer(pStop, E_POINTER);
    *pStop = m_rtStartTime + m_rtDuration + m_rtNewSeg;
    return S_OK;
}

STDMETHODIMP
CSilenceStream::GetAvailable( LONGLONG *pEarliest, LONGLONG *pLatest )
{
    CheckPointer(pEarliest, E_POINTER);
    CheckPointer(pLatest, E_POINTER);
    *pEarliest = 0;
    *pLatest = MAX_TIME;
    return S_OK;
}

STDMETHODIMP
CSilenceStream::GetDuration( LONGLONG *pDuration )
{
    CheckPointer(pDuration, E_POINTER);
    *pDuration = m_rtDuration;
    return S_OK;
}

STDMETHODIMP
CSilenceStream::GetRate( double *pdRate )
{
    CheckPointer(pdRate, E_POINTER);
    *pdRate = 1.0;
    return S_OK;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\silence\silence.h ===
//==========================================================================;
//
//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
//  PURPOSE.
//
//  Copyright (c) 1992 - 1999  Microsoft Corporation.  All Rights Reserved.
//
//--------------------------------------------------------------------------;

// Designed for warning level:4
#pragma warning (disable: 4100 4201 4244)

#ifndef __SILENCE__
#define __SILENCE__

#define MAXBUFFERCNT   1

class CSilenceFilter;
class CSilenceStream;
class CFilterPropertyPage;

// -------------------------------------------------------------------------
// CSilenceStream
// -------------------------------------------------------------------------

class CSilenceStream :    public CSourceStream
			, public IDexterSequencer
			, public ISpecifyPropertyPages
			, public IMediaSeeking
{ // CSilenceStream //

    public:

      // CSourceStream

      CSilenceStream (HRESULT *phr, CSilenceFilter *pParent, LPCWSTR pPinName);
      ~CSilenceStream ();

      DECLARE_IUNKNOWN;

      // Reveal our interfaces
      STDMETHODIMP NonDelegatingQueryInterface (REFIID, void **);

      HRESULT FillBuffer (IMediaSample *);
      HRESULT GetMediaType (CMediaType *);
      HRESULT DecideBufferSize (IMemAllocator *, ALLOCATOR_PROPERTIES *);
      HRESULT DecideAllocator (IMemInputPin *, IMemAllocator **);
      HRESULT Active (void);

      // ISpecifyPropertyPages
      STDMETHODIMP GetPages (CAUUID *);

      // IDexterSequencer methods
      STDMETHODIMP get_MediaType(AM_MEDIA_TYPE *pmt);
      STDMETHODIMP put_MediaType(const AM_MEDIA_TYPE *pmt);
      STDMETHODIMP get_OutputFrmRate(double *pRate) {return E_NOTIMPL;};
      STDMETHODIMP put_OutputFrmRate(double Rate) {return E_NOTIMPL;};
      STDMETHODIMP GetStartStopSkew(REFERENCE_TIME *, REFERENCE_TIME *,
					REFERENCE_TIME *, double *);
      STDMETHODIMP AddStartStopSkew(REFERENCE_TIME, REFERENCE_TIME,
					REFERENCE_TIME, double);
      STDMETHODIMP ClearStartStopSkew();
      STDMETHODIMP GetStartStopSkewCount(int *);

      // IMediaSeeking methods
      STDMETHODIMP GetCapabilities (DWORD *);
      STDMETHODIMP CheckCapabilities (DWORD *);
      STDMETHODIMP SetTimeFormat (const GUID *);
      STDMETHODIMP GetTimeFormat (GUID *);
      STDMETHODIMP IsUsingTimeFormat (const GUID *);
      STDMETHODIMP IsFormatSupported (const GUID *);
      STDMETHODIMP QueryPreferredFormat (GUID *);
      STDMETHODIMP ConvertTimeFormat (LONGLONG *, const GUID *, LONGLONG, const GUID *) { return E_NOTIMPL; };
      STDMETHODIMP SetPositions (LONGLONG *, DWORD, LONGLONG *, DWORD);
      STDMETHODIMP GetPositions (LONGLONG *, LONGLONG *);
      STDMETHODIMP GetCurrentPosition (LONGLONG *);
      STDMETHODIMP GetStopPosition (LONGLONG *);
      STDMETHODIMP SetRate (double) { return E_NOTIMPL; };
      STDMETHODIMP GetRate (double *);
      STDMETHODIMP GetDuration (LONGLONG *);
      STDMETHODIMP GetAvailable (LONGLONG *, LONGLONG *);
      STDMETHODIMP GetPreroll (LONGLONG *) { return E_NOTIMPL; };

    private:

      REFERENCE_TIME  m_rtStartTime;
      REFERENCE_TIME  m_rtDuration;

      REFERENCE_TIME  m_rtStamp;
      REFERENCE_TIME  m_rtDelta;

      REFERENCE_TIME  m_rtNewSeg;	// last NewSeg we sent

      CMediaType m_mtAccept;	// accept only this type

      friend class CSilenceFilter;


      int		m_iBufferCnt;			//record how many buffer it can gets
      BYTE		m_bZeroBufCnt;			// How many buffer already set to 0
      BYTE		**m_ppbDstBuf;

      CCritSec	m_csFilling;	// are we filling a buffer now?


  };

// -------------------------------------------------------------------------
// CSilenceFilter
// -------------------------------------------------------------------------

class CSilenceFilter : public CSource
			, public CPersistStream

  { // CSilenceFilter //

    public:

      static CUnknown * WINAPI CreateInstance (LPUNKNOWN, HRESULT *);
      ~CSilenceFilter ();

      DECLARE_IUNKNOWN;

      // Reveal our interfaces
      STDMETHODIMP NonDelegatingQueryInterface (REFIID, void **);

      // CPersistStream
      HRESULT WriteToStream(IStream *pStream);
      HRESULT ReadFromStream(IStream *pStream);
      STDMETHODIMP GetClassID(CLSID *pClsid);
      int SizeMax();

    private:

      friend class CSilenceStream;

      CSilenceFilter (LPUNKNOWN, HRESULT *);

      CSilenceStream *m_stream;

  };

class CFilterPropertyPage : public CBasePropertyPage

  { // CFilterPropertyPage //

    public:

      static CUnknown *CreateInstance(LPUNKNOWN lpunk, HRESULT *phr);

    private:

      INT_PTR OnReceiveMessage (HWND, UINT ,WPARAM ,LPARAM);

      HRESULT OnConnect (IUnknown *);
      HRESULT OnDisconnect (void);
      HRESULT OnActivate (void);
      HRESULT OnDeactivate (void);
      HRESULT OnApplyChanges (void);

      void SetDirty (void);

      CFilterPropertyPage (LPUNKNOWN, HRESULT *);

      HRESULT GetControlValues (void);

      IDexterSequencer *m_pis;

      // Temporary variables (until OK/Apply)

      REFERENCE_TIME  m_rtStartTime;
      REFERENCE_TIME  m_rtDuration;

      UINT            m_nSamplesPerSec;  //samples/second
      int	      m_nChannelNum;	// audio channel
      int	      m_nBits;		// bits/sample

      BOOL            m_bInitialized;

};  // CFilterPropertyPage //

const AMOVIESETUP_MEDIATYPE sudOpPinTypes =

  {   // Media types - output

    &MEDIATYPE_Audio,   // clsMajorType
    &MEDIASUBTYPE_NULL  // clsMinorType

  };  // Media types - output

const AMOVIESETUP_PIN sudOpPin =
{ L"Output"          // strName
, FALSE              // bRendered
, TRUE               // bOutput
, FALSE              // bZero
, FALSE              // bMany
, &CLSID_NULL        // clsConnectsToFilter
, L"Input"           // strConnectsToPin
, 1                  // nTypes
, &sudOpPinTypes };  // lpTypes

const AMOVIESETUP_FILTER sudSilence =
{
  &CLSID_Silence,
  L"Silence",
  MERIT_DO_NOT_USE,
  1,
  &sudOpPin
};

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\sqcdest\sqcdest.cpp ===
//==========================================================================;
//
//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
//  PURPOSE.
//
//  Copyright (c) 1992 - 1999  Microsoft Corporation.  All Rights Reserved.
//
//--------------------------------------------------------------------------;

//
// A renderer that dumps DIB Video frames into a dib sequece files
//
//
// Summary
//
// We only accept DIb now.
// For each video frame we receive we write it into a DIB/JPEG file. 
// The file we will write into is specified when the filter is created.
// Graphedt creates a file open dialog automatically when it sees a filter being
// created that supports the ActiveMovie defined IFileSinkFilter interface
//

#include <windows.h>
#include <streams.h>
#include <atlbase.h>
#ifdef FILTER_DLL
#include <initguid.h>
#endif
#include "..\idl\qeditint.h"
#include <qedit.h>
#include "sqcdest.h"


// util for DIB sequces
static DWORD dseqParseFileName(	LPTSTR lpszFileName,	    //the first file name
				LPTSTR lpszTemplate,	    //file template
				DWORD FAR * lpdwMaxValue);  

// Setup data

const AMOVIESETUP_MEDIATYPE sudPinTypes =
{
    &MEDIATYPE_NULL,            // Major type
    &MEDIASUBTYPE_NULL          // Minor type
};

const AMOVIESETUP_PIN sudPins =
{
    L"Input",                   // Pin string name
    FALSE,                      // Is it rendered
    FALSE,                      // Is it an output
    FALSE,                      // Allowed none
    FALSE,                      // Likewise many
    &CLSID_NULL,                // Connects to filter
    L"Output",                  // Connects to pin
    1,                          // Number of types
    &sudPinTypes                // Pin information
};

const AMOVIESETUP_FILTER sudSqcDest =
{
    &CLSID_SqcDest,                // Filter CLSID
    L"SqcDest",                    // String name
    MERIT_DO_NOT_USE,           // Filter merit
    1,                          // Number pins
    &sudPins                    // Pin details
};

#ifdef FILTER_DLL
// COM global table of objects in this dll

//
//  Object creation stuff
//
CFactoryTemplate g_Templates[]= {
    L"SqcDest", &CLSID_SqcDest, CSqcDest::CreateInstance, NULL, &sudSqcDest
};
int g_cTemplates = sizeof(g_Templates) / sizeof(g_Templates[0]);

//
// DllRegisterSever
//
// Handle the registration of this filter
//
STDAPI DllRegisterServer()
{
    return AMovieDllRegisterServer2( TRUE );

} // DllRegisterServer


//
// DllUnregisterServer
//
STDAPI DllUnregisterServer()
{
    return AMovieDllRegisterServer2( FALSE );

} // DllUnregisterServer

#endif

// Constructor

CSqcDestFilter::CSqcDestFilter(CSqcDest *pSqcDest,
                         LPUNKNOWN pUnk,
                         CCritSec *pLock,
                         HRESULT *phr) :
    CBaseFilter(NAME("CSqcDestFilter"), pUnk, pLock, CLSID_SqcDest),
    m_pSqcDest(pSqcDest)
{
}


//
// GetPin
//
CBasePin * CSqcDestFilter::GetPin(int n)
{
    if (n == 0) {
        return m_pSqcDest->m_pPin;
    } else {
        return NULL;
    }
}


//
// GetPinCount
//
int CSqcDestFilter::GetPinCount()
{
    return 1;
}



//
//  Definition of CSqcDestInpuPin
//
CSqcDestInpuPin::CSqcDestInpuPin(CSqcDest *pSqcDest,
                             LPUNKNOWN pUnk,
                             CBaseFilter *pFilter,
                             CCritSec *pLock,
                             CCritSec *pReceiveLock,
                             HRESULT *phr) :

    CRenderedInputPin(NAME("CSqcDestInpuPin"),
                  pFilter,                   // Filter
                  pLock,                     // Locking
                  phr,                       // Return code
                  L"Input"),                 // Pin name
    m_pReceiveLock(pReceiveLock),
    m_pSqcDest(pSqcDest),
    m_tLast(0)
{
}


//
// CheckMediaType
//
// Check if the pin can support this specific proposed type and format
//
HRESULT CSqcDestInpuPin::CheckMediaType(const CMediaType *pmt)
{
    if( ( pmt->majortype == MEDIATYPE_Video ) &&
	( pmt->formattype == FORMAT_VideoInfo) )
    {

	VIDEOINFO *pvi = (VIDEOINFO *) pmt->Format();
	LPBITMAPINFOHEADER lpbi = HEADER(pvi);
	
	 switch (lpbi->biBitCount)
	{
	case 32:
	    if(pmt->subtype != MEDIASUBTYPE_ARGB32 )
		return E_INVALIDARG;
	    break;
	case 24:
	    if(pmt->subtype != MEDIASUBTYPE_RGB24 )
		return E_INVALIDARG;
	    break;
	case 16:
	    if (lpbi->biCompression == BI_RGB)
	    {
		if( pmt->subtype != MEDIASUBTYPE_RGB555)
		    return E_INVALIDARG;
	    }
	    else 
	    {
		DWORD *p = (DWORD *)(lpbi + 1);
		if (*p == 0x7c00 && *(p+1) == 0x03e0 && *(p+2) == 0x001f)
		{
		    if( pmt->subtype != MEDIASUBTYPE_RGB555)
			 return E_INVALIDARG;
		}
		else if (*p == 0xf800 && *(p+1) == 0x07e0 && *(p+2) == 0x001f)
		{
		    if( pmt->subtype != MEDIASUBTYPE_RGB565)
			 return E_INVALIDARG;
		}
		else
		    return E_UNEXPECTED;
	    }
	    break;
	case 8:
	    if(pmt->subtype != MEDIASUBTYPE_RGB8 )
		return E_INVALIDARG;
	    break;
	case 4:
	    if(pmt->subtype != MEDIASUBTYPE_RGB4 )
		return E_INVALIDARG;
	    break;
	case 1:
	    if(pmt->subtype != MEDIASUBTYPE_RGB1 )
		return E_INVALIDARG;
	    break;
	default:
	    return E_UNEXPECTED;
	    break;
	}
    }
    
    return S_OK;
}


//
// BreakConnect
//
// Break a connection
//
HRESULT CSqcDestInpuPin::BreakConnect()
{
    if (m_pSqcDest->m_pPosition != NULL) {
        m_pSqcDest->m_pPosition->ForceRefresh();
    }
    return CRenderedInputPin::BreakConnect();
}


//
// ReceiveCanBlock
//
// We don't hold up source threads on Receive
//
STDMETHODIMP CSqcDestInpuPin::ReceiveCanBlock()
{
    return S_FALSE;
}


//
// Receive
//
// Do something with this media sample
//
STDMETHODIMP CSqcDestInpuPin::Receive(IMediaSample *pSample)
{
    CAutoLock lock(m_pReceiveLock);
    PBYTE pbData;
    
    //whether we can output more sample
    if( m_pSqcDest->IsMaxOutputSample() ==TRUE )
	return FALSE; 

    REFERENCE_TIME tStart, tStop;
    pSample->GetTime(&tStart, &tStop);
    DbgLog((LOG_TRACE, 1, TEXT("tStart(%s), tStop(%s), Diff(%d ms), Bytes(%d)"),
           (LPCTSTR) CDisp(tStart),
           (LPCTSTR) CDisp(tStop),
           (LONG)((tStart - m_tLast) / 10000),
           pSample->GetActualDataLength()));

    m_tLast = tStart;

    // get output data
    HRESULT hr = pSample->GetPointer(&pbData);
    if (FAILED(hr)) {
        return hr;
    }

    // open file
    HANDLE hFile=m_pSqcDest->OpenFile();
    if ( hFile == INVALID_HANDLE_VALUE)
    {
        DbgLog((LOG_TRACE,1,TEXT("SqcDest could not open file to write\n")));
        return NOERROR;
    }
    else
    {
	//write to file
	HRESULT hr=m_pSqcDest->Write(pbData,pSample->GetActualDataLength(), hFile, &m_mt);
	CloseHandle(hFile);
	return hr;
    }

}

//
// EndOfStream
//
STDMETHODIMP CSqcDestInpuPin::EndOfStream(void)
{
    CAutoLock lock(m_pReceiveLock);
    return CRenderedInputPin::EndOfStream();

} // EndOfStream


//
// NewSegment
//
// Called when we are seeked
//
STDMETHODIMP CSqcDestInpuPin::NewSegment(REFERENCE_TIME tStart,
                                       REFERENCE_TIME tStop,
                                       double dRate)
{
    m_tLast = 0;
    return S_OK;

} // NewSegment


//
//  CSqcDest class
//
CSqcDest::CSqcDest(LPUNKNOWN pUnk, HRESULT *phr) :
    CUnknown(NAME("CSqcDest"), pUnk)
    ,m_lpszDIBFileTemplate(NULL)
    ,m_dwMaxDIBFileCnt(0)
    ,m_dwFirstFile(0)
    ,m_dwOutputSampleCnt(0)
    ,m_pFilter(NULL)
    ,m_pPin(NULL)
    ,m_pPosition(NULL)
    ,m_pFileName(0)
{
    m_pFilter = new CSqcDestFilter(this, GetOwner(), &m_Lock, phr);
    if (m_pFilter == NULL) {
        *phr = E_OUTOFMEMORY;
        return;
    }

    m_pPin = new CSqcDestInpuPin(this,GetOwner(),
                               m_pFilter,
                               &m_Lock,
                               &m_ReceiveLock,
                               phr);
    if (m_pPin == NULL) {
        *phr = E_OUTOFMEMORY;
        return;
    }
}


//
// SetFileName
//
// Implemented for IFileSinkFilter support
//
STDMETHODIMP CSqcDest::SetFileName(LPCOLESTR lpwszFileName,const AM_MEDIA_TYPE *pmt)
{
    // Is this a valid filename supplied
    CheckPointer(lpwszFileName,E_POINTER);
    if(wcslen(lpwszFileName) > MAX_PATH)
        return ERROR_FILENAME_EXCED_RANGE;

    //delete old file name
    if ( m_pFileName)
    {	
	delete [] m_pFileName; 
	m_pFileName=NULL;
    }
    if ( m_lpszDIBFileTemplate)
    {
	delete []m_lpszDIBFileTemplate;
	m_lpszDIBFileTemplate=NULL;
    }

    USES_CONVERSION;
    TCHAR * lpszFileName = W2T( (WCHAR*) lpwszFileName );

    m_pFileName = new WCHAR[wcslen( lpwszFileName ) + 1];
    if (m_pFileName!=NULL)
        wcscpy( m_pFileName, lpwszFileName );
    else
	return E_OUTOFMEMORY;

    m_lpszDIBFileTemplate	=new TCHAR[MAX_PATH];
    if (m_lpszDIBFileTemplate ==NULL) 
	return E_OUTOFMEMORY;
	
//	make file name template
//
// Examples:
//  lpszFileName = "FOO0047.DIB"
//	 -> lpszTemplate = "FOO%04d.DIB", dwMaxValue = 9999, return = 47
//
//  lpszFileName = "TEST01.DIB"
//	 -> lpszTemplate = "TEST%01d.DIB", dwMaxValue = 9, return = 1
//
//  lpszFileName = "TEST1.DIB"
//	 -> lpszTemplate = "TEST%d.DIB", dwMaxValue = 9999, return = 1
//
//  lpszFileName = "SINGLE.DIB"
//	 -> lpszTemplate = "SINGLE.DIB", dwMaxValue = 0, return = 0
//


    m_dwFirstFile =dseqParseFileName( lpszFileName,	    //the first file name
			m_lpszDIBFileTemplate,	    //file template
			&m_dwMaxDIBFileCnt);      //how many file exist

    // if user does not specify the start file00000.dib
    // set file name as file000.dib
    if( (m_dwMaxDIBFileCnt==0) && (m_dwFirstFile==0) )
    {
	/* the user has put in a bogus name for a dib sequence   */
	/* so let's build him a name instead.  Ude default number */
		/* build the template */
	wsprintf(m_lpszDIBFileTemplate, TEXT("%s0000.%s"), lpszFileName,TEXT(".dib"));
	m_dwMaxDIBFileCnt= 9999;
	//m_dwFirstFile=0;
    }

    return S_OK;

} // SetFileName


//
// GetCurFile
//
// Implemented for IFileSinkFilter support
//
STDMETHODIMP CSqcDest::GetCurFile(LPOLESTR * ppszFileName,AM_MEDIA_TYPE *pmt)
{
    CheckPointer(ppszFileName, E_POINTER);

    *ppszFileName = NULL;
    if (m_pFileName != NULL) {
        *ppszFileName = (LPOLESTR)QzTaskMemAlloc(sizeof(WCHAR) 
						    * (1+lstrlenW(m_pFileName)));
        if (*ppszFileName != NULL) {
            lstrcpyW(*ppszFileName, m_pFileName);
        }
    }

    if(pmt) {
        ZeroMemory(pmt, sizeof(*pmt));
        pmt->majortype = MEDIATYPE_NULL;
        pmt->subtype = MEDIASUBTYPE_NULL;
    }
    return S_OK;

} // GetCurFile


// Destructor

CSqcDest::~CSqcDest()
{

    //Sequence DIB file
    if(m_lpszDIBFileTemplate!=NULL)
    {
	delete []m_lpszDIBFileTemplate;
	m_lpszDIBFileTemplate=NULL;
    }

    delete m_pPin;
    delete m_pFilter;
    delete m_pPosition;

    if (m_pFileName){ delete [] m_pFileName; m_pFileName=NULL;};
}


//
// CreateInstance
//
// Provide the way for COM to create a SqcDest filter
//
CUnknown * WINAPI CSqcDest::CreateInstance(LPUNKNOWN punk, HRESULT *phr)
{
    CSqcDest *pNewObject = new CSqcDest(punk, phr);
    if (pNewObject == NULL) {
        *phr = E_OUTOFMEMORY;
    }
    return pNewObject;

} // CreateInstance


//
// NonDelegatingQueryInterface
//
// Override this to say what interfaces we support where
//
STDMETHODIMP CSqcDest::NonDelegatingQueryInterface(REFIID riid, void ** ppv)
{
    CheckPointer(ppv,E_POINTER);
    CAutoLock lock(&m_Lock);

    // Do we have this interface

    if (riid == IID_IFileSinkFilter) {
        return GetInterface((IFileSinkFilter *) this, ppv);
    } else if (riid == IID_IBaseFilter || riid == IID_IMediaFilter || riid == IID_IPersist) {
	return m_pFilter->NonDelegatingQueryInterface(riid, ppv);
    } else if (riid == IID_IMediaPosition || riid == IID_IMediaSeeking) {
        if (m_pPosition == NULL) {

            HRESULT hr = S_OK;
            m_pPosition = new CPosPassThru(NAME("SqcDest Pass Through"),
                                           (IUnknown *) GetOwner(),
                                           (HRESULT *) &hr, m_pPin);
            if (m_pPosition == NULL) {
                return E_OUTOFMEMORY;
            }

            if (FAILED(hr)) {
                delete m_pPosition;
                m_pPosition = NULL;
                return hr;
            }
        }
        return m_pPosition->NonDelegatingQueryInterface(riid, ppv);
    } else {
	return CUnknown::NonDelegatingQueryInterface(riid, ppv);
    }

} // NonDelegatingQueryInterface


//
// OpenFile
//
// Opens the file ready for dumping
// return file handle
//
HANDLE CSqcDest::OpenFile()
{
    // Has a filename been set yet
    if (m_pFileName == NULL) {
        return INVALID_HANDLE_VALUE;
    }

    // Convert the UNICODE filename if necessary
    USES_CONVERSION;
    TCHAR *pFileName = W2T( m_pFileName );

    // Try to open the file
    TCHAR	  ach[_MAX_PATH];
    wsprintf(ach, m_lpszDIBFileTemplate, m_dwOutputSampleCnt + m_dwFirstFile);

    HANDLE hFile = CreateFile((LPCTSTR) ach,   // The filename
                         GENERIC_WRITE,         // File access
                         (DWORD) 0,             // Share access
                         NULL,                  // Security
                         CREATE_ALWAYS,         // Open flags
                         (DWORD) 0,             // More flags
                         NULL);                 // Template
    
    return hFile;

} // Open

//
// Write
//
HRESULT CSqcDest::Write(PBYTE pbData, LONG lData, HANDLE hFile, CMediaType *pmt)
{
    
    BITMAPFILEHEADER	hdr;
    LPBITMAPINFOHEADER  lpbi;
    DWORD               dwSize;
    DWORD		dwWritten;

    //write file header
    VIDEOINFO *pvi = (VIDEOINFO *) pmt->Format();
    lpbi = HEADER(pvi);
	
    dwSize		= lpbi->biSize;

#define BFT_BITMAP 0x4d42	//"BM"

    hdr.bfType          = BFT_BITMAP;
    hdr.bfSize          = dwSize + sizeof(BITMAPFILEHEADER);
    hdr.bfReserved1     = 0;
    hdr.bfReserved2     = 0;
    hdr.bfOffBits       = (DWORD)sizeof(BITMAPFILEHEADER) + dwSize;

    if (!WriteFile(hFile,(PVOID)&hdr,sizeof(BITMAPFILEHEADER),&dwWritten,NULL)) 
    {
	ASSERT(dwWritten==sizeof(BITMAPFILEHEADER));
        DWORD dwErr = GetLastError();
        return HRESULT_FROM_WIN32(dwErr);
    }
    

    //write bitMapinfor header
    if (!WriteFile(hFile,(PVOID)lpbi,sizeof(BITMAPINFOHEADER),&dwWritten,NULL)) 
    {
	ASSERT(dwWritten==sizeof(BITMAPINFOHEADER));
        DWORD dwErr = GetLastError();
        return HRESULT_FROM_WIN32(dwErr);
    }
    

    //write data
    if (!WriteFile(hFile,(PVOID)pbData,lData,&dwWritten,NULL)) 
    {
	ASSERT(dwWritten==(DWORD)lData);
        DWORD dwErr = GetLastError();
        return HRESULT_FROM_WIN32(dwErr);
    }
    
    
    m_dwOutputSampleCnt++;

    return S_OK;
}

static DWORD dseqParseFileName(	LPTSTR lpszFileName,	    //file name
				LPTSTR lpszTemplate,	    //
				DWORD FAR * lpdwMaxValue)
{

    TCHAR	aTchar[_MAX_PATH];
    DWORD	dwFirst;
    WORD	wFieldWidth;
    DWORD	dwMult;
    BOOL	fLeadingZero = FALSE;
    

    LPTSTR	lp;
    LPTSTR	lp2;
    LPTSTR	lpExt;
        
    /* Find end of string */
    lp2 = lpszFileName;
    lp = aTchar;

    while (*lp2)
    {
	*lp = *lp2;
    	lp = CharNext(lp);
	lp2 = CharNext(lp2);
    }

    *lp = TEXT('\0') ;
    
    /* Make lp2 point at last character of base filename (w/o extension) */
    /* Make lpExt point at the extension (without the dot) */
    for (lp2 = lp; *lp2 != TEXT('.'); ) {
	lpExt = lp2;
	if ((lp2 == aTchar) || ( *lp2 == TEXT('\\')) 
				|| (*lp2 == TEXT(':')) || (*lp2 ==TEXT('!'))) {
	    /* There is no extension */
	    lp2 = lp;
	    lpExt = lp;
	    break;
	}
	lp2=CharPrev(aTchar,lp2);
    }
    
    lp2=CharPrev(aTchar,lp2);

    // Count the number of numeric characters here....
    dwFirst = 0;
    wFieldWidth = 0;
    dwMult = 1;
    while (lp2 >= aTchar && (*lp2 >= TEXT('0')) && (*lp2 <= TEXT('9'))) {
	fLeadingZero = (*lp2 == TEXT('0'));
	dwFirst += dwMult * (*lp2 - TEXT('0'));
	dwMult *= 10;
	wFieldWidth++;
	lp2=CharPrev(aTchar, lp2);
    }
    
    *lpdwMaxValue = dwMult - 1;
    
    lp2=CharNext(lp2);
    *lp2 = TEXT('\0');

    // Make the format specifier....
    if (wFieldWidth) {
	if (fLeadingZero) {
	    wsprintf(lpszTemplate,TEXT("%s%%0%ulu.%s"),
			      aTchar, wFieldWidth,lpExt);
	} else {
	    wsprintf(lpszTemplate,TEXT("%s%%lu.%s"),
			     aTchar,lpExt);
	    *lpdwMaxValue = 999999L;
	    // !!! This should really be based on the number of
	    // characters left after the base name....
	}
    } else
	wsprintf(lpszTemplate,TEXT("%s.%s"),
			 aTchar, lpExt);
	    
    DbgLog((LOG_TRACE,3,TEXT("First = %lu, Width = %u, Template = '%s'"), 
			dwFirst, wFieldWidth, lpszTemplate));
    
    return dwFirst;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\sqcdest\sqcdest.h ===
//==========================================================================;
//
//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
//  PURPOSE.
//
//  Copyright (c) 1992 - 1999  Microsoft Corporation.  All Rights Reserved.
//
//--------------------------------------------------------------------------;

// {CB764DA0-E89C-11d2-9EFC-006008039E37}
//DEFINE_GUID(CLSID_SqcDest, 
//0xcb764da0, 0xe89c, 0x11d2, 0x9e, 0xfc, 0x0, 0x60, 0x8, 0x3, 0x9e, 0x37);

extern const AMOVIESETUP_FILTER sudSqcDest;

class CSqcDestInpuPin;
class CSqcDest;
class CSqcDestFilter;

#define BYTES_PER_LINE 20
#define FIRST_HALF_LINE "   %2x %2x %2x %2x %2x %2x %2x %2x %2x %2x"
#define SECOND_HALF_LINE " %2x %2x %2x %2x %2x %2x %2x %2x %2x %2x"


// Main filter object

class CSqcDestFilter : public CBaseFilter
{
    CSqcDest * const m_pSqcDest;

public:

    // Constructor
    CSqcDestFilter(CSqcDest *pSqcDest,
                LPUNKNOWN pUnk,
                CCritSec *pLock,
                HRESULT *phr);

    // Pin enumeration
    CBasePin * GetPin(int n);
    int GetPinCount();
};


//  Pin object

class CSqcDestInpuPin : public CRenderedInputPin
{
    CSqcDest    * const m_pSqcDest;           // Main renderer object
    CCritSec * const m_pReceiveLock;    // Sample critical section
    REFERENCE_TIME m_tLast;             // Last sample receive time

public:

    CSqcDestInpuPin(CSqcDest *pSqcDest,
                  LPUNKNOWN pUnk,
                  CBaseFilter *pFilter,
                  CCritSec *pLock,
                  CCritSec *pReceiveLock,
                  HRESULT *phr);

    // Do something with this media sample
    STDMETHODIMP Receive(IMediaSample *pSample);
    STDMETHODIMP EndOfStream(void);
    STDMETHODIMP ReceiveCanBlock();

    // Check if the pin can support this specific proposed type and format
    HRESULT CheckMediaType(const CMediaType *);

    // Break connection
    HRESULT BreakConnect();

    // Track NewSegment
    STDMETHODIMP NewSegment(REFERENCE_TIME tStart,
                            REFERENCE_TIME tStop,
                            double dRate);

};


//  CSqcDest object which has filter and pin members

class CSqcDest : public CUnknown, public IFileSinkFilter
{
    friend class CSqcDestFilter;
    friend class CSqcDestInpuPin;

    CSqcDestFilter *m_pFilter;         // Methods for filter interfaces
    CSqcDestInpuPin *m_pPin;          // A simple rendered input pin
    CCritSec m_Lock;                // Main renderer critical section
    CCritSec m_ReceiveLock;         // Sublock for received samples
    CPosPassThru *m_pPosition;      // Renderer position controls
    
    LPOLESTR m_pFileName;           // The filename where we dump to
    LPTSTR	m_lpszDIBFileTemplate;	//space for DIB file name template
    
    DWORD m_dwOutputSampleCnt;
    DWORD m_dwFirstFile;
    DWORD m_dwMaxDIBFileCnt;
    
public:

    DECLARE_IUNKNOWN

    CSqcDest(LPUNKNOWN pUnk, HRESULT *phr);
    ~CSqcDest();

    static CUnknown * WINAPI CreateInstance(LPUNKNOWN punk, HRESULT *phr);

    // Write data streams to a file
    HRESULT Write(PBYTE pbData,LONG lData, HANDLE hFile, CMediaType *pmt);

    BOOL IsMaxOutputSample(){ return m_dwMaxDIBFileCnt < (m_dwFirstFile+m_dwOutputSampleCnt); };

    // Implements the IFileSinkFilter interface
    STDMETHODIMP SetFileName(LPCOLESTR pszFileName,const AM_MEDIA_TYPE *pmt);
    STDMETHODIMP GetCurFile(LPOLESTR * ppszFileName,AM_MEDIA_TYPE *pmt);

private:

    // Overriden to say what interfaces we support where
    STDMETHODIMP NonDelegatingQueryInterface(REFIID riid, void ** ppv);

    // Open and write to the file
    HANDLE OpenFile();
};
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\stillvid\loadgif.h ===
/*-- 
Structs from IE img.hxx 
--*/

enum
{
    gifNoneSpecified =  0, // no disposal method specified
    gifNoDispose =      1, // do not dispose, leave the bits there
    gifRestoreBkgnd =   2, // replace the image with the background color
    gifRestorePrev =    3  // replace the image with the previous pixels
};


#define dwGIFVerUnknown     ((DWORD)0)   // unknown version of GIF file
#define dwGIFVer87a         ((DWORD)87)  // GIF87a file format
#define dwGIFVer89a         ((DWORD)89)  // GIF89a file format.

/** End Structs **/
 
#define MAXCOLORMAPSIZE     256

#define TRUE    1
#define FALSE   0

#define CM_RED      0
#define CM_GREEN    1
#define CM_BLUE     2

#define MAX_LWZ_BITS        12

#define INTERLACE       0x40
#define LOCALCOLORMAP   0x80
#define BitSet(byte, bit)   (((byte) & (bit)) == (bit))

#define LM_to_uint(a,b)         ((((unsigned int) b)<<8)|((unsigned int)a))

#define dwIndefiniteGIFThreshold 300    // 300 seconds == 5 minutes
                                        // If the GIF runs longer than
                                        // this, we will assume the author
                                        // intended an indefinite run.
#define dwMaxGIFBits 13107200           // keep corrupted GIFs from causing
                                        // us to allocate _too_ big a buffer.
                                        // This one is 1280 X 1024 X 10.

typedef struct _GIFSCREEN
{
        unsigned long Width;
        unsigned long Height;
        unsigned char ColorMap[3][MAXCOLORMAPSIZE];
        unsigned long NumColors;
        unsigned long ColorResolution;
        unsigned long Background;
        unsigned long AspectRatio;
}
GIFSCREEN;

typedef struct _GIF89
{
        long transparent;
        long delayTime;
        long inputFlag;
        long disposal;
}
GIF89;

#define MAX_STACK_SIZE  ((1 << (MAX_LWZ_BITS)) * 2)
#define MAX_TABLE_SIZE  (1 << MAX_LWZ_BITS)
typedef struct m_gifinfo
{
    GIF89 Gif89;
    long lGifLoc;
    long ZeroDataBlock;

/*
 **  Pulled out of nextCode
 */
    long curbit, lastbit, get_done;
    long last_byte;
    long return_clear;
/*
 **  Out of nextLWZ
 */
    unsigned short *pstack, *sp;
    long stacksize;
    long code_size, set_code_size;
    long max_code, max_code_size;
    long clear_code, end_code;

/*
 *   Were statics in procedures
 */
    unsigned char buf[280];
    unsigned short *table[2];
    long tablesize;
    long firstcode, oldcode;

} GIFINFO,*PGIFINFO;

typedef struct LIST
{
    PBYTE pbImage;
    long delayTime;
    LIST  *next;
}  LIST;

/*
 DirectAnimation wrapper class for GIF info
*/
class CImgGif
{
   // Class methods
   public:
      CImgGif(HANDLE hFile);
      ~CImgGif();

      BOOL          Read(unsigned char *buffer, DWORD len);
      long          ReadColorMap(long number, RGBQUAD *pRGB);
      long          DoExtension(long label);
      long          GetDataBlock(unsigned char *buf);
      HRESULT       ReadImage(long x, long y, long left, long top, long width, long height, long stride, int transparency, BOOL fInterlace, BOOL fGIFFrame, RGBQUAD *prgb, PBYTE pData);
      HRESULT       Dispose2(LPBYTE, long, long, long, long, long);
      HRESULT       Dispose3(LPBYTE, LPBYTE, long, long, long, long, long);
      long          readLWZ();
      long          nextLWZ();
      long          nextCode(long code_size);
      BOOL          initLWZ(long input_code_size);
      unsigned short *  growStack();
      BOOL          growTables();
      
   // Data members
   public:
      HANDLE              m_hFile;
      BOOL                m_fInterleaved;
      BOOL                m_fInvalidateAll;
      int                 m_yLogRow;
      GIFINFO             m_gifinfo;
      //int                 m_xWidth;
      //int                 m_yHeight;
      LONG                m_ITrans;
      LIST *              m_pList;    //header point to a circular link list
      LIST *              m_pListTail; //point to a circular link list
      GIFSCREEN           m_GifScreen;
      long                m_imageCount;
      DWORD               m_dwGIFVer;
        
      HRESULT ReadGIFMaster(VIDEOINFO *pvi);
      HRESULT OpenGIFFile ( LIST **ppList, CMediaType *pmt);

};
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\sr\sr.cpp ===
// !!! CANT OBEY SEEK COMMANDS YET

// This filter receives data on its uncompressed pin, from 0 to END, unbroken
// It also receives data on the compressed pin, but only part of the time.
//
// It will use the data on the compressed pin whenever it exists, and only use
// the uncompressed data when there is no compressed data.  The uncompressed
// data must be sent to a compressor before going to the main output, so that
// our filter's main output is always compressed.
//
// It is a state machine.  First of all, a WAITING state, to get input on both
// pins. Then if the U has earlier data than C, it goes into UNCOMPRESSED state,
// where it uses that pin.  Otherwise, into COMPRESSED state.
//
// When compressed pin runs out, or when a gap is seen, it seeks the
// UNCOMPRESSED pin to where it ran out and moves to UNCOMPRESSED state.
//
// When uncompressed pin gets to the time available on the compressed pin,
// it switches to COMPRESSED state.
//
// One more complication; the compressed pin throws away everything until it
// sees a key frame before letting it switch to using that data, or you'll get
// a corrupt data stream.
//

// Input 0 is uncompressed
// Input 1 is compressed
// Input 2 is the output of the compressor
//
// Output 0 is the main output
// Output 1 is to the compressor, which comes back as Input 2
//

//==========================================================================;
//
//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
//  PURPOSE.
//
//  Copyright (c) 1992 - 1999  Microsoft Corporation.  All Rights Reserved.
//
//--------------------------------------------------------------------------;

#include <streams.h>
#include <qeditint.h>
#include <qedit.h>
#include <vfw.h>
#include "sr.h"
#include "..\util\conv.cxx"

//#define TEST

const AMOVIESETUP_FILTER sudSR =
{
    &CLSID_SRFilter,        // CLSID of filter
    L"Smart Recompressor",  // Filter's name
    MERIT_DO_NOT_USE,       // Filter merit
    0,                      // Number of pins
    NULL //psudPins         // Pin information
};

#ifdef FILTER_DLL
//
// Provide the ActiveMovie templates for classes supported by this DLL.
//
CFactoryTemplate g_Templates[] =
{
    {L"Smart Recompressor", &CLSID_SRFilter, CSR::CreateInstance, NULL, &sudSR}
};

int g_cTemplates = sizeof(g_Templates) / sizeof(g_Templates[0]);
#endif

//
// CreateInstance
//
// Creator function for the class ID
//
CUnknown * WINAPI CSR::CreateInstance(LPUNKNOWN pUnk, HRESULT *phr)
{
    return new CSR(NAME("Smart Recompressor"), pUnk, phr);
}

const double DEFAULT_FPS = 15.0;

// ================================================================
// CSR Constructor
// ================================================================

CSR::CSR(TCHAR *pName, LPUNKNOWN pUnk, HRESULT *phr) :
    m_cInputs(0),	// no pins yet
    m_cOutputs(0),
    m_rtStop(-1),	// at what time we switch from U to C
    m_dFrameRate(DEFAULT_FPS),	// everything must be at this frame rate
    m_rtLastSeek(0),	// last seek command in timeline time
    m_fSeeking(FALSE),  // in the middle of seeking?
    m_fSpecialSeek(FALSE),  // we are seeking our own U pin, not an app seek
    m_cbPrefix(0),
    m_bAcceptFirstCompressed( TRUE ), // when connecting, use the media type first suggested on an input pin
    m_cbAlign(1),
    m_cbBuffer(512),
    m_fPreview(TRUE),
    m_nOutputBuffering(DEX_DEF_OUTPUTBUF),
    m_fEOS( FALSE ),
    m_rtNewLastSeek( 0 ),
    m_myState( 0 ),
    m_fThreadCanSeek( FALSE ),
    m_fNewSegOK( FALSE ),
    CBaseFilter(pName, pUnk, this, CLSID_SRFilter),
    CPersistStream(pUnk, phr)
{
    DbgLog((LOG_TRACE,1,TEXT("::CSR")));

    ZeroMemory(&m_mtAccept, sizeof(AM_MEDIA_TYPE));
    m_mtAccept.majortype = GUID_NULL;

    // as well as all the individual allocators, we have a pool of buffers
    // that all the inputs can use if they want to
    //
    m_pPoolAllocator = NULL;
    m_pPoolAllocator = new CMemAllocator(
		NAME("Special Switch pool allocator"), NULL, phr);
    if (FAILED(*phr)) {
	return;
    }
    m_pPoolAllocator->AddRef();
    DbgLog((LOG_TRACE,1,TEXT("Created a POOL Allocator")));

    CreateInputPins(3);
    CreateOutputPins(2);

    ASSERT(phr);

#ifdef TEST
	// accept CINEPAK 320x240

	AM_MEDIA_TYPE mt;
	ZeroMemory(&mt, sizeof(AM_MEDIA_TYPE));
        mt.majortype = MEDIATYPE_Video;
        FOURCCMap FourCCMap(MKFOURCC('c','v','i','d'));
        mt.subtype = (GUID)FourCCMap;
        mt.formattype = FORMAT_VideoInfo;
        mt.bFixedSizeSamples = FALSE;
        mt.bTemporalCompression = TRUE;
        mt.pbFormat = (BYTE *)QzTaskMemAlloc(SIZE_PREHEADER +
						sizeof(BITMAPINFOHEADER));
        mt.cbFormat = SIZE_PREHEADER + sizeof(BITMAPINFOHEADER);
        ZeroMemory(mt.pbFormat, mt.cbFormat);
        LPBITMAPINFOHEADER lpbi = HEADER(mt.pbFormat);
	VIDEOINFOHEADER *pvi = (VIDEOINFOHEADER *)mt.pbFormat;
	pvi->AvgTimePerFrame = (REFERENCE_TIME)(UNITS / m_dFrameRate);
        lpbi->biSize = sizeof(BITMAPINFOHEADER);
        lpbi->biCompression = MKFOURCC('c','v','i','d');
        lpbi->biBitCount = 24;
	lpbi->biWidth = 320;
  	lpbi->biHeight = 240;
        lpbi->biPlanes = 1;
        lpbi->biSizeImage = DIBSIZE(*lpbi);
        //mt.lSampleSize = DIBSIZE(*lpbi);
	// !!! AvgTimePerFrame?  dwBitRate?

	SetMediaType(&mt);
	FreeMediaType(mt);
#endif

}


//
// Destructor
//
CSR::~CSR()
{
    DbgLog((LOG_TRACE,1,TEXT("::~CSR")));

    DbgLog((LOG_TRACE,1,TEXT("Deleting inputs")));
    for (int z = 0; z < m_cInputs; z++)
	delete m_pInput[z];
    if (m_cInputs)
        delete m_pInput;
    DbgLog((LOG_TRACE,1,TEXT("Deleting outputs")));
    for (z = 0; z < m_cOutputs; z++)
	delete m_pOutput[z];
    if (m_cOutputs)
        delete m_pOutput;
    FreeMediaType( m_mtAccept );
    if (m_pPoolAllocator)
        m_pPoolAllocator->Release();
}



STDMETHODIMP CSR::NonDelegatingQueryInterface(REFIID riid, void ** ppv)
{
    CheckPointer(ppv,E_POINTER);

    if (riid == IID_IAMSetErrorLog) {
        return GetInterface( (IAMSetErrorLog*) this, ppv );
    } else if (riid == IID_IAMOutputBuffering) {
        return GetInterface( (IAMOutputBuffering*) this, ppv );
    } else if (riid == IID_IAMSmartRecompressor) {
        DbgLog((LOG_TRACE,1,TEXT("CSR: QI for IAMSmartRecompressor")));
        return GetInterface((IAMSmartRecompressor *) this, ppv);
    } else if (riid == IID_IPersistStream) {
        return GetInterface((IPersistStream *) this, ppv);
    }
    return CBaseFilter::NonDelegatingQueryInterface(riid, ppv);
}

//
// IAMSmartRecompressor implementation
//

// connect with this media type
//
STDMETHODIMP CSR::SetMediaType(AM_MEDIA_TYPE *pmt)
{
    CAutoLock cObjectLock(m_pLock);
    CheckPointer(pmt, E_POINTER);
    if (m_State != State_Stopped)
	return VFW_E_NOT_STOPPED;

    DbgLog((LOG_TRACE,1,TEXT("IAMSmartRecompressor::SetMediaType")));
    for (int i = 0; i < m_cInputs; i++) {
	if (m_pInput[i]->IsConnected())
	    return VFW_E_ALREADY_CONNECTED;
    }
    for (i = 0; i < m_cOutputs; i++) {
	if (m_pOutput[i]->IsConnected())
	    return VFW_E_ALREADY_CONNECTED;
    }

    FreeMediaType(m_mtAccept);
    CopyMediaType(&m_mtAccept, pmt);
    SetDirty(TRUE);
    return S_OK;
}


// what media type are we connecting with?
//
STDMETHODIMP CSR::GetMediaType(AM_MEDIA_TYPE *pmt)
{
    CAutoLock cObjectLock(m_pLock);
    DbgLog((LOG_TRACE,1,TEXT("IAMSmartRecompressor::GetMediaType")));
    CheckPointer(pmt, E_POINTER);
    CopyMediaType(pmt, &m_mtAccept);
    return S_OK;
}



STDMETHODIMP CSR::GetFrameRate(double *pd)
{
    CAutoLock cObjectLock(m_pLock);
    CheckPointer(pd, E_POINTER);
    *pd = m_dFrameRate;
    DbgLog((LOG_TRACE,1,TEXT("IAMSmartRecompressor::GetFrameRate %d/10"), (int)(*pd * 10)));
    return S_OK;
}


STDMETHODIMP CSR::SetFrameRate(double d)
{
    CAutoLock cObjectLock(m_pLock);
    if (m_State != State_Stopped)
	return VFW_E_NOT_STOPPED;
    if (d <= 0.)
	return E_INVALIDARG;
    DbgLog((LOG_TRACE,1,TEXT("IAMSmartRecompressor::SetFrameRate %d/10 fps"),
						(int)(d * 10)));
    m_dFrameRate = d;
    SetDirty(TRUE);
    return S_OK;
}


STDMETHODIMP CSR::SetPreviewMode(BOOL fPreview)
{
    CAutoLock cObjectLock(m_pLock);
    if (m_State != State_Stopped)
	return VFW_E_NOT_STOPPED;
    DbgLog((LOG_TRACE,2,TEXT("SR:  PreviewMode %d"), fPreview));
    m_fPreview = fPreview;
    return NOERROR;
}


STDMETHODIMP CSR::GetPreviewMode(BOOL *pfPreview)
{
    CAutoLock cObjectLock(m_pLock);
    if (m_State != State_Stopped)
	return VFW_E_NOT_STOPPED;
    CheckPointer(pfPreview, E_POINTER);
    *pfPreview = m_fPreview;
    return NOERROR;
}



//
// GetPinCount
//
int CSR::GetPinCount()
{
    return (m_cInputs + m_cOutputs);
}


//
// GetPin
//
CBasePin *CSR::GetPin(int n)
{
    if (n < 0 || n >= m_cInputs + m_cOutputs)
        return NULL;

    if (n < m_cInputs) {
        return m_pInput[n];
    } else {
	return m_pOutput[n - m_cInputs];
    }
}


//
// CreateInputPins
//
HRESULT CSR::CreateInputPins(long Depth)
{
    DbgLog((LOG_TRACE,3,TEXT("CSR::CreateInputPins")));
    HRESULT hr = NOERROR;
    const WCHAR *szbuf;
    CSRInputPin *pPin;

    m_pInput = new CSRInputPin *[Depth];
    for (int z = 0; z < Depth; z++) {
	if (z == U_INPIN)
            szbuf = L"Uncompressed";
	else if (z == C_INPIN)
            szbuf = L"Compressed";
	else if (z == COMP_INPIN)
            szbuf = L"From Compressor";
	else
            ASSERT(FALSE);
        pPin = new CSRInputPin(NAME("Switch Input"), this, &hr, szbuf);
        if (FAILED(hr) || pPin == NULL) {
            delete pPin;
            return E_OUTOFMEMORY;
        }
	m_cInputs++;
 	m_pInput[z] = pPin;
	pPin->m_iInpin = z;	// which pin is this?
    }
    return S_OK;
}


//
// CreateOutputPins
//
HRESULT CSR::CreateOutputPins(long Depth)
{
    DbgLog((LOG_TRACE,3,TEXT("CSR::CreateOutputPins")));
    HRESULT hr = NOERROR;
    const WCHAR *szbuf;
    CSROutputPin *pPin;

    m_pOutput = new CSROutputPin *[Depth];
    for (int z = 0; z < Depth; z++) {
	if (z == 0)
            szbuf = L"Output";
	else if (z == 1)
            szbuf = L"To Compressor";
	else
            ASSERT(FALSE);
        pPin = new CSROutputPin(NAME("Switch Output"), this, &hr, szbuf);
        if (FAILED(hr) || pPin == NULL) {
            delete pPin;
            return E_OUTOFMEMORY;
        }
	m_cOutputs++;
 	m_pOutput[z] = pPin;
	pPin->m_iOutpin = z;	// which pin is this?
    }
    return S_OK;
}



//
// IPersistStream
//

// tell our clsid
//
STDMETHODIMP CSR::GetClassID(CLSID *pClsid)
{
    CheckPointer(pClsid, E_POINTER);
    *pClsid = CLSID_SRFilter;
    return S_OK;
}


typedef struct {
    int version;
    double dFrameRate;
    BOOL fPreviewMode;
    AM_MEDIA_TYPE mt; // format is hidden after the array
} saveSwitch;


// persist ourself - we have a bunch of random stuff to save, our media type
// (sans format), an array of queued connections, and finally the format of
// the media type
//
HRESULT CSR::WriteToStream(IStream *pStream)
{
    DbgLog((LOG_TRACE,1,TEXT("CSR::WriteToStream")));

    CheckPointer(pStream, E_POINTER);
    int savesize;
    saveSwitch *px;

    savesize = sizeof(saveSwitch) + m_mtAccept.cbFormat;
    DbgLog((LOG_TRACE,1,TEXT("Persisted data is %d bytes"), savesize));
    px = (saveSwitch *)QzTaskMemAlloc(savesize);
    if (px == NULL) {
        DbgLog((LOG_ERROR,1,TEXT("*** Out of memory")));
	return E_OUTOFMEMORY;
    }
    px->version = 1;  // version 2 has dynamic stuff in it!
    px->dFrameRate = m_dFrameRate;
    px->fPreviewMode = m_fPreview;
    px->mt = m_mtAccept;
    // Can't persist pointers
    px->mt.pbFormat = NULL;
    px->mt.pUnk = NULL;		// !!!

    // the format goes after the array
    CopyMemory(px + 1, m_mtAccept.pbFormat, m_mtAccept.cbFormat);

    HRESULT hr = pStream->Write(px, savesize, 0);
    QzTaskMemFree(px);
    if(FAILED(hr)) {
        DbgLog((LOG_ERROR,1,TEXT("*** WriteToStream FAILED")));
        return hr;
    }
    return NOERROR;
}


// load ourself back in
//
HRESULT CSR::ReadFromStream(IStream *pStream)
{
    DbgLog((LOG_TRACE,1,TEXT("CSR::ReadFromStream")));
    CheckPointer(pStream, E_POINTER);

    // we don't yet know how many saved connections there are
    // all we know we have for sure is the beginning of the struct
    int savesize1 = sizeof(saveSwitch);
    saveSwitch *px = (saveSwitch *)QzTaskMemAlloc(savesize1);
    if (px == NULL) {
        DbgLog((LOG_ERROR,1,TEXT("*** Out of memory")));
	return E_OUTOFMEMORY;
    }

    HRESULT hr = pStream->Read(px, savesize1, 0);
    if(FAILED(hr)) {
        DbgLog((LOG_ERROR,1,TEXT("*** ReadFromStream FAILED")));
        QzTaskMemFree(px);
        return hr;
    }

    if (px->version != 1) {
        DbgLog((LOG_ERROR,1,TEXT("*** ERROR! Bad version file")));
        QzTaskMemFree(px);
	return S_OK;
    }

    // how much saved data was there, really?  Get the rest
    int savesize = sizeof(saveSwitch) + px->mt.cbFormat;
    DbgLog((LOG_TRACE,1,TEXT("Persisted data is %d bytes"), savesize));
    px = (saveSwitch *)QzTaskMemRealloc(px, savesize);
    if (px == NULL) {
        DbgLog((LOG_ERROR,1,TEXT("*** Out of memory")));
	// ??? QzTaskMemFree(px);
	return E_OUTOFMEMORY;
    }
    hr = pStream->Read(px + 1, savesize - savesize1, 0);
    if(FAILED(hr)) {
        DbgLog((LOG_ERROR,1,TEXT("*** ReadFromStream FAILED")));
        QzTaskMemFree(px);
        return hr;
    }

    SetFrameRate(px->dFrameRate);
    SetPreviewMode(px->fPreviewMode);

    AM_MEDIA_TYPE mt = px->mt;
    mt.pbFormat = (BYTE *)QzTaskMemAlloc(mt.cbFormat);
    // remember, the format is after the array
    CopyMemory(mt.pbFormat, px + 1, mt.cbFormat);

    SetMediaType(&mt);
    FreeMediaType(mt);
    QzTaskMemFree(px);
    SetDirty(FALSE);
    return S_OK;
}


// how big is our save data?
//
int CSR::SizeMax()
{
    return sizeof(saveSwitch) + m_mtAccept.cbFormat;
}


// Pause
//
// Overriden to handle no input connections
//
STDMETHODIMP CSR::Pause()
{
    DbgLog((LOG_TRACE,1,TEXT("CSR::Pause")));

    CAutoLock cObjectLock(m_pLock);
    HRESULT hr = S_OK;

    if (m_State == State_Stopped) {

	m_fEOS = FALSE;
        m_fThreadCanSeek = FALSE;	// can't seek ourself yet

	m_fNewSegOK = TRUE;	// the first NewSeg after we start is OK
				// to propogate downstream

	// set initial state of state machine to WAITING
        m_myState = SR_INVALID;
        CheckState();

        hr = m_pPoolAllocator->Commit(); // !!! danny had this outside the 'if'
        if (FAILED(hr))
	    return hr;
    }
    return CBaseFilter::Pause();
}


// the state machine sees if it's time to change state
//
HRESULT CSR::CheckState()
{
    CAutoLock cs(&m_csState);

    // uninitialized state? go into WAITING state.
    // in the WAITING state, all pins block in receive, and are not ready
    //
    if (m_myState == SR_INVALID) {
        m_myState = SR_WAITING;
        DbgLog((LOG_TRACE,2,TEXT("CSR::Entering WAITING state")));

	// only the U and C pins get reset like this
	for (int z=0; z < COMP_INPIN; z++) {
	    m_pInput[z]->m_fReady = FALSE;
	    m_pInput[z]->m_fEatKeys = FALSE;
	    ResetEvent(m_pInput[z]->m_hEventBlock);
	    m_pInput[z]->m_rtLastDelivered = -1;
	}
    }

    // not ready to change state yet unless both U and C are ready
    if (!m_pInput[U_INPIN]->m_fReady || !m_pInput[C_INPIN]->m_fReady)
	return S_OK;

    // all done?
    if (m_pInput[U_INPIN]->m_fEOS && m_pInput[C_INPIN]->m_fEOS) {
        DbgLog((LOG_TRACE,2,TEXT("CSR::ALL DONE!")));
	AllDone();
	return S_OK;
    }

    // change state?

    if (m_myState == SR_WAITING) {
        DbgLog((LOG_TRACE,2,TEXT("CSR::Both inputs are ready.")));

	// we have uncompressed data strictly earlier than compressed data.
	// so UNC state is next
	if (CompareTimes(m_pInput[U_INPIN]->m_rtBlock,
				m_pInput[C_INPIN]->m_rtBlock) > 0) {
            DbgLog((LOG_TRACE,2,TEXT("CSR::Entering UNCOMPRESSED state")));
	    m_myState = SR_UNCOMPRESSED;
	    // this makes sure U won't throw away its blocked sample, because
	    // the sample it's blocking is one we need to use
	    m_pInput[U_INPIN]->m_fReady = TRUE;	// don't throw it away
	    // to make the compressor realize this new data being compressed
	    // in no way relates to whatever it last saw
	    m_pInput[U_INPIN]->m_fNeedDiscon = TRUE;
	    // this is where we'll switch back to C samples
	    m_rtStop = m_pInput[C_INPIN]->m_rtBlock;
	    // let U go
	    SetEvent(m_pInput[U_INPIN]->m_hEventBlock);
	} else {
            DbgLog((LOG_TRACE,2,TEXT("CSR::Entering COMPRESSED state")));
	    m_myState = SR_COMPRESSED;
	    // this makes sure C won't throw away its blocked sample
	    m_pInput[C_INPIN]->m_fReady = TRUE;	// don't throw it away
	    // Let C go
	    SetEvent(m_pInput[C_INPIN]->m_hEventBlock);
	}


    // after UNC state can only come COMP state
    } else if (m_myState == SR_UNCOMPRESSED) {
        DbgLog((LOG_TRACE,2,TEXT("CSR::Finished UNCOMPRESSED state")));
        DbgLog((LOG_TRACE,2,TEXT("     Last sent: %dms"),
			(int)(m_pInput[U_INPIN]->m_rtLastDelivered / 10000)));
	m_myState = SR_COMPRESSED;
	// this makes sure C won't throw away its blocked sample
	m_pInput[C_INPIN]->m_fReady = TRUE;	// don't throw it away
	// tell compressor filter to release any cached data, in case it
	// delivers several frames behind us delivering to it.  When the
	// compressor gives us an EOS, we'll know it's safe to go into
	// COMP state, and do it then.
	m_pOutput[COMP_OUTPIN]->DeliverEndOfStream();
        DbgLog((LOG_TRACE,1,TEXT("CSR::Waiting for compressor to finish.")));

    // after COMP state can only come UNC state
    } else if (m_myState == SR_COMPRESSED) {
        DbgLog((LOG_TRACE,2,TEXT("CSR::Finished COMPRESSED state")));
        DbgLog((LOG_TRACE,2,TEXT("     Last sent: %dms"),
			(int)(m_pInput[C_INPIN]->m_rtLastDelivered / 10000)));
	m_myState = SR_UNCOMPRESSED;
	// this makes sure U throws away its blocked sample and starts where
	// we seek it.. the sample it's holding is old and stale, we're about
	// to seek it to the spot we want
	m_pInput[U_INPIN]->m_fReady = FALSE;	// throw it away
	// to make the compressor realize this new data being compressed
	// in no way relates to whatever it last saw
	m_pInput[U_INPIN]->m_fNeedDiscon = TRUE;
	// this is when to switch to C state, the point where C has samples
	m_rtStop = m_pInput[C_INPIN]->m_rtBlock;
	// seek U pin to next part we need
	m_fThreadCanSeek = TRUE;	// OK to seek our own U pin
	HRESULT hr = SeekNextSegment();	// OK, U pin, seek to where we need you
	if (FAILED(hr))
	    return hr;
	// now let the U pin go
        DbgLog((LOG_TRACE,1,TEXT("CSR:Seek done.Entering UNCOMPRESSED state")));

	// The seek will generate a flush, since the pin is active, and that
	// flush will unblock the U pin
	//SetEvent(m_pInput[U_INPIN]->m_hEventBlock);
    }


    return S_OK;
}


STDMETHODIMP CSR::Stop()
{
    DbgLog((LOG_TRACE,1,TEXT("CSR::Stop")));

    CAutoLock cObjectLock(m_pLock);

    m_pPoolAllocator->Decommit();

    return CBaseFilter::Stop();
}



// Are they close, or is one really so much bigger that it's a whole frame
// away?  Also, is is >1 frame away?
//
int CSR::CompareTimes(REFERENCE_TIME rt1, REFERENCE_TIME rt2)
{
    // half a frame
    REFERENCE_TIME half = (REFERENCE_TIME)(UNITS / m_dFrameRate / 2);

// !!! is this right?

    if (rt1 + half >= rt2 && rt2 + half >= rt1)
	return 0;			// same
    else if (rt1 + 3 * half < rt2)
	return 2;			// rt2 >1 frame bigger
    else if (rt1 < rt2)
	return 1;			// rt2 1 frame bigger
    else if (rt2 + 3 * half < rt1)
	return -2;			// rt1 >1 frame bigger
    else if (rt2 < rt1)
	return -1;			// rt1 1 frame bigger
	
    ASSERT(FALSE);
    return 0;
}




// seek the U pin to the next spot it needs to provide.  Note that this is
// only ever called on the C pin's thread, that is why it is safe to do this.
// Seeking a pin on its thread HANGS
//
HRESULT CSR::SeekNextSegment()
{
    // we can't seek at the same time the app seeks us
    CAutoLock cAutolock(&m_csThread);

    // it is not safe for us to seek ourselves, app is doing it
    if (!m_fThreadCanSeek) {
	return S_OK;
    }
    m_fThreadCanSeek = FALSE;

    DbgLog((LOG_TRACE,1,TEXT("SR:Seek U ourselves for NextSegment")));

    // figure out where to seek U pin... last C frame delivered plus 1
    ASSERT(m_pInput[C_INPIN]->m_rtLastDelivered >= 0);
    LONGLONG frame = RoundTime2Frame(m_pInput[C_INPIN]->m_rtLastDelivered,
					m_dFrameRate);
    REFERENCE_TIME rtStart = Frame2Time(frame + 1, m_dFrameRate);
    DbgLog((LOG_TRACE,1,TEXT("C ended on frame %d, seek U to %dms"),
				(int)frame, (int)(rtStart / 10000)));

    // note we're seeking during the flush that this will generate
    m_fSeeking = TRUE;
    m_fSpecialSeek = TRUE;	// it's a special self-seek

    IMediaSeeking *pMS;
    IPin *pPin = m_pInput[U_INPIN]->GetConnected();
    HRESULT hr = pPin->QueryInterface(IID_IMediaSeeking, (void **)&pMS);
    if (FAILED(hr))
	return E_FAIL;
    // Make sure we're talking MEDIA TIME
    hr = pMS->SetTimeFormat(&TIME_FORMAT_MEDIA_TIME);
    // this will FAIL if we're not stopped, and that's OK

    // what's the stop time?
    REFERENCE_TIME rtStop;
    hr = pMS->GetStopPosition(&rtStop);
    if (FAILED(hr)) {
	rtStop = 3600*UNITS;	// !!! one hour OK?
    }
    DbgLog((LOG_TRACE,2,TEXT("Stop time is %d"), (int)(rtStop / 10000)));

    if (rtStop > rtStart) {
        // this can fail, we're streaming
        hr = pMS->SetRate(1.0);

        hr = pMS->SetPositions(&rtStart, AM_SEEKING_AbsolutePositioning,
			&rtStop, AM_SEEKING_AbsolutePositioning);
        if (hr != S_OK) {
            DbgLog((LOG_ERROR,1,TEXT("SR: ERROR in SetPositions")));
	    pMS->Release();
	    return hr;
        }
    } else {
	// looks like we're seeking to the end of the project, which means...
 	// WE'RE DONE! YAY!
	m_pInput[U_INPIN]->EndOfStream();
    }

    // DO NOT update m_rtLastSeek as a result of a private seek like this. That
    // variable means where did an app last seek us

    // all done
    m_fSpecialSeek = FALSE;
    m_fSeeking = FALSE;

    pMS->Release();

    // only now that the above calculations were made, can we accept data again
    // Receive is blocked not letting us process samples until the seek settles
    // down
    SetEvent(m_pInput[U_INPIN]->m_hEventSeek);

    return S_OK;
}


// ================================================================
// CSRInputPin constructor
// ================================================================

CSRInputPin::CSRInputPin(TCHAR *pName,
                           CSR *pSwitch,
                           HRESULT *phr,
                           LPCWSTR pPinName) :
    CBaseInputPin(pName, pSwitch, pSwitch, phr, pPinName),
    m_pSwitch(pSwitch),
    m_cbBuffer(0),
    m_cBuffers(0),
    m_pAllocator(NULL),
    m_hEventBlock(NULL),
    m_hEventSeek(NULL),
    m_fNeedDiscon(FALSE),
    m_fOwnAllocator( FALSE )
{
    DbgLog((LOG_TRACE,2,TEXT("::CSRInputPin")));
    ASSERT(pSwitch);

}


//
// CSRInputPin destructor
//
CSRInputPin::~CSRInputPin()
{
    DbgLog((LOG_TRACE,3,TEXT("::~CSRInputPin")));
}

// overridden to allow cyclic-looking graphs - we say that we aren't actually
// connected to anybody
// !!! maybe we could tell the truth? does it matter?
//
STDMETHODIMP CSRInputPin::QueryInternalConnections(IPin **apPin, ULONG *nPin)
{
    DbgLog((LOG_TRACE,99,TEXT("CSRIn::QueryInteralConnections")));
    CheckPointer(nPin, E_POINTER);
    *nPin = 0;
    return S_OK;
}


//
// CheckMediaType - only allow the type we're supposed to allow, except for
//		    the uncompressed input pin, which allows any uncompressed
//		    type similar to the compressed pin's type
// Also, it can accept only the type that it's first queried with (eric added
// that)
//
HRESULT CSRInputPin::CheckMediaType(const CMediaType *pmt)
{
    DbgLog((LOG_TRACE,5,TEXT("CSRIn[%d]::CheckMT"), m_iInpin));

    if( m_pSwitch->m_bAcceptFirstCompressed )
    {
        if( m_pSwitch->m_mtAccept.majortype == GUID_NULL )
        {
            CopyMediaType( &m_pSwitch->m_mtAccept, pmt );
        }
    }

    CAutoLock lock_it(m_pLock);
    CMediaType mtAccept(m_pSwitch->m_mtAccept);

    if (IsEqualGUID(*pmt->Type(), *mtAccept.Type())) {
	// the uncompressed input doesn't need to be compressed
        if (m_iInpin == U_INPIN || IsEqualGUID(*pmt->Subtype(),
						*mtAccept.Subtype())) {
	    if (*pmt->FormatType() == *mtAccept.FormatType()) {

// !!! check FRAME RATE and DATA RATE

        	    if (IsEqualGUID(*pmt->FormatType(), FORMAT_VideoInfo)) {
			LPBITMAPINFOHEADER lpbi = HEADER((VIDEOINFOHEADER *)
							pmt->Format());
			LPBITMAPINFOHEADER lpbiAccept =HEADER((VIDEOINFOHEADER*)
							mtAccept.Format());
			if (lpbi->biWidth != lpbiAccept->biWidth ||
				lpbi->biHeight != lpbiAccept->biHeight) {
			    return VFW_E_INVALIDMEDIATYPE;
			}

			if (m_iInpin == C_INPIN || m_iInpin == COMP_INPIN) {
			    if ((lpbi->biCompression == lpbiAccept->biCompression)
				&& (lpbi->biBitCount == lpbiAccept->biBitCount))
		    	    return S_OK;
			} else if (m_iInpin == 0) {
			    // !!! Make sure compressor accepts this bit depth
			    if (lpbi->biCompression <= BI_BITFIELDS)
		    	        return S_OK;
			}

#if 0
			// colour converter gives 555 as bitfields!
			if (lpbi->biCompression == BI_BITFIELDS &&
				lpbiAccept->biCompression == BI_RGB &&
				lpbi->biBitCount == lpbiAccept->biBitCount &&
				*pmt->Subtype() == MEDIASUBTYPE_RGB555)
			    return S_OK;
#endif

		    // only video is acceptable, sorry
        	    } else {
		    }
		}
                else
                {
                    DbgLog((LOG_TRACE,5,TEXT("fmt lengths didn't match")));
                }
        }
    }
    return VFW_E_INVALIDMEDIATYPE;

} // CheckMediaType


//
// GetMediaType - return the type we prefer. If we're the uncompressed input,
// then it's not our switch's type, it's an uncompressed type similar to
// our switch's compressed type, but uncompressed
// !!! I chose 555 at random, because it's the default switch type
//
//
HRESULT CSRInputPin::GetMediaType(int iPosition, CMediaType *pMediaType)
{
    if (iPosition != 0)
        return VFW_S_NO_MORE_ITEMS;

    CopyMediaType(pMediaType, &m_pSwitch->m_mtAccept);

    // our uncompressed pin preferred type is RGB555
    if (pMediaType->FormatLength() && m_iInpin == U_INPIN) {
	LPBITMAPINFOHEADER lpbi = HEADER(pMediaType->Format());
	pMediaType->SetSubtype(&MEDIASUBTYPE_RGB555);
        // compressed biSize may have been different
	lpbi->biSize = sizeof(BITMAPINFOHEADER);
	lpbi->biCompression = BI_RGB;
	lpbi->biBitCount = 16;
	lpbi->biSizeImage = DIBSIZE(*lpbi);
	pMediaType->SetSampleSize(DIBSIZE(*lpbi));
	pMediaType->SetTemporalCompression(FALSE);
    }

    return S_OK;

} // GetMediaType



//
// BreakConnect
//
HRESULT CSRInputPin::BreakConnect()
{
    DbgLog((LOG_TRACE,3,TEXT("CSRIn[%d]::BreakConnect"), m_iInpin));

    // !!!
    // Release any allocator that we are holding
    if (m_pAllocator)
    {
        m_pAllocator->Release();
        m_pAllocator = NULL;
    }
    return CBaseInputPin::BreakConnect();
} // BreakConnect


// for efficiency, our input pins use their own allocators
//
STDMETHODIMP CSRInputPin::GetAllocator(IMemAllocator **ppAllocator)
{

    CheckPointer(ppAllocator,E_POINTER);
    ValidateReadWritePtr(ppAllocator,sizeof(IMemAllocator *));
    CAutoLock cObjectLock(m_pLock);

    DbgLog((LOG_TRACE,2,TEXT("CSRIn[%d]: GetAllocator"), m_iInpin));

    if (m_pAllocator == NULL) {
	HRESULT hr = S_OK;

	/* Create the new allocator object */

	CSRInputAllocator *pMemObject = new CSRInputAllocator(
				NAME("Big switch input allocator"), NULL, &hr);
	if (pMemObject == NULL) {
	    return E_OUTOFMEMORY;
	}

	if (FAILED(hr)) {
	    ASSERT(pMemObject);
	    delete pMemObject;
	    return hr;
	}

        m_pAllocator = pMemObject;

        /*  We AddRef() our own allocator */
        m_pAllocator->AddRef();

	//remember pin using it
	((CSRInputAllocator *)m_pAllocator)->m_pSwitchPin = this;

        DbgLog((LOG_TRACE,2,TEXT("Created a FAKE allocator")));
    }
    ASSERT(m_pAllocator != NULL);
    m_pAllocator->AddRef();
    *ppAllocator = m_pAllocator;
    return NOERROR;
}


// Make sure we use the maximum alignment and prefix required by any pin or
// we'll fault.
//
STDMETHODIMP
CSRInputPin::GetAllocatorRequirements(ALLOCATOR_PROPERTIES*pProps)
{
    CheckPointer(pProps, E_POINTER);
    pProps->cbAlign = m_pSwitch->m_cbAlign;
    pProps->cbPrefix = m_pSwitch->m_cbPrefix;
    pProps->cbBuffer = m_pSwitch->m_cbBuffer;
    return S_OK;
}


//
// NotifyAllocator
//
STDMETHODIMP
CSRInputPin::NotifyAllocator(IMemAllocator *pAllocator, BOOL bReadOnly)
{
    CAutoLock lock_it(m_pLock);
    IUnknown *p1, *p2;

    DbgLog((LOG_TRACE,2,TEXT("CSRIn[%d]: NotifyAllocator"), m_iInpin));

    m_fOwnAllocator = FALSE;
    if (pAllocator->QueryInterface(IID_IUnknown, (void **)&p1) == S_OK) {
        if (m_pAllocator && m_pAllocator->QueryInterface(IID_IUnknown,
						(void **)&p2) == S_OK) {
	    if (p1 == p2)
		m_fOwnAllocator = TRUE;
	    p2->Release();
	}
	p1->Release();
    }

#ifdef DEBUG
    if (m_fOwnAllocator) {
        DbgLog((LOG_TRACE,2,TEXT("Using our own allocator")));
    } else {
        DbgLog((LOG_ERROR,2,TEXT("Using a FOREIGN allocator")));
    }
#endif

    HRESULT hr = CBaseInputPin::NotifyAllocator(pAllocator, bReadOnly);
    if (SUCCEEDED(hr)) {
	ALLOCATOR_PROPERTIES prop;
	hr = pAllocator->GetProperties(&prop);
	if (SUCCEEDED(hr)) {
	    m_cBuffers = prop.cBuffers;
	    m_cbBuffer = prop.cbBuffer;

	    if (prop.cbAlign < m_pSwitch->m_cbAlign ||
				prop.cbPrefix < m_pSwitch->m_cbPrefix) {
		// !!! Nasty filters don't listen to our buffering requirement
		// so failing if cbBuffer is too small would prevent us from
		// connecting
                DbgLog((LOG_ERROR,1,TEXT("Allocator too small!")));
		return E_FAIL;
	    }

	    // update the maximum alignment and prefix needed
	    if (m_pSwitch->m_cbPrefix < prop.cbPrefix)
		m_pSwitch->m_cbPrefix = prop.cbPrefix;
	    if (m_pSwitch->m_cbAlign < prop.cbAlign)
		m_pSwitch->m_cbAlign = prop.cbAlign;
	    if (m_pSwitch->m_cbBuffer < prop.cbBuffer)
		m_pSwitch->m_cbBuffer = prop.cbBuffer;

            DbgLog((LOG_TRACE,2,TEXT("Allocator is using %d buffers, size %d"),
						prop.cBuffers, prop.cbBuffer));
            DbgLog((LOG_TRACE,2,TEXT("Prefix %d   Align %d"),
						prop.cbPrefix, prop.cbAlign));
	}
    }

    return hr;

} // NotifyAllocator

// Use POOL buffers if we run out of buffers
//
HRESULT CSRInputAllocator::GetBuffer(IMediaSample **ppBuffer,
                  	REFERENCE_TIME *pStartTime, REFERENCE_TIME *pEndTime,
			DWORD dwFlags)
{

        ASSERT(m_pSwitchPin->m_fOwnAllocator);

	HRESULT hr;

        DbgLog((LOG_TRACE,3,TEXT("CSRIn[%d]::GetBuffer"),
						m_pSwitchPin->m_iInpin));

	// For read only, we can't very well use random buffers from our pool
	if (m_pSwitchPin->m_bReadOnly) {
            DbgLog((LOG_TRACE,3,TEXT("R/O: Can't use POOL")));
             return CMemAllocator::GetBuffer(ppBuffer, pStartTime, pEndTime,
						dwFlags);
	} else {
            hr = CMemAllocator::GetBuffer(ppBuffer, pStartTime, pEndTime,
						dwFlags | AM_GBF_NOWAIT);
	    if (hr == VFW_E_TIMEOUT) {
                DbgLog((LOG_TRACE,3,TEXT("BUSY: Use POOL allocator")));

		// !!! THIS WILL HANG!  This allocator doesn't belong to us,
		// so this will not unblock when we flush.  We are counting
		// on the queue not letting all these buffers get outstanding
		// at once (see special code in the queue, m_hEventStall)
		// If we were connected to a different filter that didn't block
		// in receive, then this code will hang!

                hr = m_pSwitchPin->m_pSwitch->m_pPoolAllocator->GetBuffer(
				    ppBuffer, pStartTime, pEndTime, dwFlags);
	        return hr;
	    } else {
	        return hr;
	    }
	}
}


//
// BeginFlush - only the U pin's flush goes downstream to avoid many of them
// a seek we caused ourselves must NOT flush downstream
//
HRESULT CSRInputPin::BeginFlush()
{
    DbgLog((LOG_TRACE,2,TEXT("CSRIn[%d]:BeginFlush"), m_iInpin));

    // enter flushing state
    CBaseInputPin::BeginFlush();

    m_fReady = FALSE;

    // unblock receive AFTER we've set ready to false so receive knows
    // to bail after waking up, not to crash,hang,etc
    SetEvent(m_hEventBlock);
    if (m_pSwitch->m_fSeeking)
        SetEvent(m_hEventSeek);

    // only flushing the U pin will do anything downstream.
    // That should be enough?
    if (m_iInpin != U_INPIN)
	return S_OK;

    if (!m_pSwitch->m_fSeeking)
        DbgLog((LOG_ERROR,1,TEXT("SR::FLUSH WITHOUT SEEK!")));

    // pass the flush downstream only necessary during a seek?
    // Seeks we did ourselves shouldn't flush downstream
    if (m_pSwitch->m_fSeeking && !m_pSwitch->m_fSpecialSeek) {
        for (int z=0; z<m_pSwitch->m_cOutputs; z++) {
            DbgLog((LOG_TRACE,1,TEXT("CSR:Flushing outpin %d"), z));
	    m_pSwitch->m_pOutput[z]->DeliverBeginFlush();
        }
    } else if (m_pSwitch->m_fSeeking) {
	// a new segment is going to be compressed, having nothing to do
	// with the last thing compressed... let the compressor know to not
	// consider the previous frame it got anymore... throw it away!
        DbgLog((LOG_TRACE,1,TEXT("CSR:Flushing COMPRESSOR")));
	m_pSwitch->m_pOutput[1]->DeliverBeginFlush();
    }

    return S_OK;
}


//
// EndFlush - only the U pin's flush goes downstream to avoid many of them
// a seek we caused ourselves must NOT flush downstream
// Note this is the last time we've seeked, if the app seeked us.
// Hold off all receives until the seek settles down.
//
HRESULT CSRInputPin::EndFlush()
{
    DbgLog((LOG_TRACE,2,TEXT("CSRIn[%d]:EndFlush"), m_iInpin));

    if (m_pSwitch->m_fSeeking) {
        DbgLog((LOG_TRACE,2,TEXT("Block this input until seek is done")));

	// update this before NewSeg comes, but only for REAL seeks
	if (!m_pSwitch->m_fSpecialSeek) {
	    m_pSwitch->m_rtLastSeek = m_pSwitch->m_rtNewLastSeek;
	}

	// this is only for the U and C pins
	if (m_iInpin != COMP_INPIN) {
    	    // we're seeking, so every pin is flushing.  Until every other input
    	    // is flushed and ready, and we know our new current position, hold
    	    // off all input on this pin (or it will think new arriving data is
    	    // from before the seek)
	    ResetEvent(m_hEventSeek);
	}
    }

    ResetEvent(m_hEventBlock);

    m_rtBlock = -1;	// we're no longer blocked, or at EOS
    m_fEOS = FALSE;

    // always exit flush mode, since we always enter it
    CBaseInputPin::EndFlush();

    // only flushing the U pin will do anything downstream.
    // That should be enough?
    if (m_iInpin != U_INPIN)
	return S_OK;

    if (m_pSwitch->m_fSeeking && !m_pSwitch->m_fSpecialSeek) {
        for (int z=0; z<m_pSwitch->m_cOutputs; z++) {
	    m_pSwitch->m_pOutput[z]->DeliverEndFlush();
        }
    } else if (m_pSwitch->m_fSeeking) {
	// a new segment is going to be compressed, having nothing to do
	// with the last thing compressed... let the compressor know to not
	// consider the previous frame it got anymore... throw it away!
	m_pSwitch->m_pOutput[1]->DeliverEndFlush();
    }

    return S_OK;
}


// NewSegment - we remember the new segment we are given, but the one we
// broadcast is the timeline time we were last seeked to BY THE APP
// NOTE: We only send a newseg the first time after a Pause.  All other newsegs
// come from our own private seeks and must NOT make it downstream
//
HRESULT CSRInputPin::NewSegment(REFERENCE_TIME tStart,
                                 REFERENCE_TIME tStop, double dRate)
{
    DbgLog((LOG_TRACE,2,TEXT("CSRIn[%d]:NewSegment"), m_iInpin));

    // Only the U pin passes downstream, and only if allowed
    if (m_iInpin == U_INPIN && m_pSwitch->m_fNewSegOK) {
	m_pSwitch->m_fNewSegOK = FALSE;
        DbgLog((LOG_TRACE,1,TEXT("Passing on NewSegment=%dms to all outputs"),
				(int)(m_pSwitch->m_rtLastSeek / 10000)));
        for (int i = 0; i < m_pSwitch->m_cOutputs; i++) {
	    m_pSwitch->m_pOutput[i]->DeliverNewSegment(m_pSwitch->m_rtLastSeek,
			m_pSwitch->m_rtLastSeek + tStop - tStart, dRate);
        }
    }

    // remember the newsegment times we were given so we know the real time
    // of arriving data (it could be different for each input pin)
    HRESULT hr = CBaseInputPin::NewSegment(tStart, tStop, dRate);
    return hr;
}

// just say yes, don't recurse
//
HRESULT CSRInputPin::ReceiveCanBlock()
{
    return S_OK;
}


//
// Receive - send this sample to whoever gets it at this moment
//
HRESULT CSRInputPin::Receive(IMediaSample *pSample)
{
    CAutoLock cs(&m_csReceive);

    HRESULT hr = CBaseInputPin::Receive(pSample);
    if (hr != NOERROR) {
        DbgLog((LOG_ERROR,1,TEXT("CSRIn[%d]:Receive base class ERROR!"),
                                                                    m_iInpin));
        return hr;
    }

    // we're supposed to be all done.
    if (m_pSwitch->m_fEOS) {
            return S_FALSE;
    }

    // we're in the middle of seeking, and we're supposed to hold all input
    DbgLog((LOG_TRACE,3,TEXT("CSRIn[%d]::Receive seek block"), m_iInpin));

    // (not necessary for COMP_INPIN)
    WaitForSingleObject(m_hEventSeek, INFINITE);

    // our variables are in flux, we're seeking and this is an OLD sample
    if (m_pSwitch->m_fSeeking)
	return S_FALSE;

    // add newsegment time to get the real timeline time of this sample
    REFERENCE_TIME rtStart, rtStop;
    hr = pSample->GetTime(&rtStart, &rtStop);
    if (hr != S_OK) {
	EndOfStream();
	return E_FAIL;
    }

    rtStart += m_tStart;	// add NewSegment offset
    rtStop += m_tStart;

    // Fix the time stamps if our new segment is higher than the filters'.
    // EG: We're seeking to timeline time 10, but this input doesn't have
    // anything until time 15.  So our pins' new segment was 15, but the new
    // segment we passed on to the transform was 10.  Now it's finally time 15,
    // and we have a sample with time stamp 0, which if delivered downstream,
    // will be thought to belong at timestamp 10, so we need to set the time
    // stamp to 5 so that the transform will know that it belongs at time 15.

    REFERENCE_TIME a = rtStart, b = rtStop;
    a -= m_pSwitch->m_rtLastSeek;
    b -= m_pSwitch->m_rtLastSeek;
    hr = pSample->SetTime(&a, &b);
    if (hr != S_OK) {
	EndOfStream();
	return E_FAIL;
    }

    // which pin is this?
    if (m_iInpin == U_INPIN) {
	return U_Receive(pSample, rtStart);
    } else if (m_iInpin == C_INPIN) {
	return C_Receive(pSample, rtStart);
    } else if (m_iInpin == COMP_INPIN) {
	return COMP_Receive(pSample, rtStart);
    }

    ASSERT(FALSE);
    return E_NOTIMPL;
}


// UNCOMPRESSED data receive
//
HRESULT CSRInputPin::U_Receive(IMediaSample *pSample, REFERENCE_TIME rt)
{

  while (1) {
    // we're waiting for data to arrive on both the U and C pins
    //
    if (m_pSwitch->m_myState == SR_WAITING) {
        DbgLog((LOG_TRACE,3,TEXT("U_INPIN:WAITING")));
	// this pin is done waiting
	m_fReady = TRUE;
	m_rtBlock = rt;	// here's the sample we're ready with
	// see if everybody's ready to change state (like we are)
	m_pSwitch->CheckState();

	// this will fire when we're ready to change state
        WaitForSingleObject(m_hEventBlock, INFINITE);
        ResetEvent(m_hEventBlock);
        // we are apparently flushing now and NOT supposed to deliver this
        if (m_bFlushing)
	    return S_OK;
        // oops - we finished since we blocked
        if (m_pSwitch->m_fEOS)
	    return S_FALSE;

	// this will tell us to swallow or actually deliver it
	if (m_fReady) {
	    m_fReady = FALSE;
	    continue;
	} else {
	    return S_OK;
	}

    } else if (m_pSwitch->m_myState == SR_UNCOMPRESSED) {
        DbgLog((LOG_TRACE,3,TEXT("U_INPIN:UNCOMPRESSED")));
	// not time to switch to C samples yet
	if (m_pSwitch->CompareTimes(rt, m_pSwitch->m_rtStop) > 0) {
	    // a MUX will get confused if we don't send it frames that strictly
	    // increase in time - no big deal to skip an uncompressed frame
	    if (rt > m_rtLastDelivered &&
			rt > m_pSwitch->m_pInput[C_INPIN]->m_rtLastDelivered) {
                m_rtLastDelivered = rt;
	        // to make the compressor realize this new data being compressed
	        // in no way relates to whatever it last saw
	        if (m_fNeedDiscon) {
        	    DbgLog((LOG_TRACE,3,TEXT("Setting DISCONT for compressor")));
		    pSample->SetDiscontinuity(TRUE);
		    m_fNeedDiscon = FALSE;
	        }
                return m_pSwitch->m_pOutput[1]->Deliver(pSample);
	    } else {
		return S_OK;
	    }
	} else {
	    // OK, now time for compressed samples
	    m_fReady = TRUE;
	    m_rtBlock = rt;	// here's the sample we're ready with
	    m_pSwitch->CheckState();

	    // wait until state goes BACK to UNCompressed again
            WaitForSingleObject(m_hEventBlock, INFINITE);
            ResetEvent(m_hEventBlock);
    	    // we are apparently flushing now and NOT supposed to deliver this
    	    if (m_bFlushing)
		return S_OK;
            // oops - we finished since we blocked
            if (m_pSwitch->m_fEOS)
	        return S_FALSE;

	    // this will tell us to swallow or actually deliver it
	    if (m_fReady) {
	        m_fReady = FALSE;
	        continue;
	    } else {
	        return S_OK;
	    }
	}

    // this should never happen
    } else if (m_pSwitch->m_myState == SR_COMPRESSED) {
	ASSERT(FALSE);
	return S_OK;
    }

    ASSERT(FALSE);
    return E_NOTIMPL;
  }
}


// COMPRESSED data receive
//
HRESULT CSRInputPin::C_Receive(IMediaSample *pSample, REFERENCE_TIME rt)
{

  while (1) {

    // we're waiting for data to arrive on both the U and C pins
    //
    if (m_pSwitch->m_myState == SR_WAITING) {
        DbgLog((LOG_TRACE,3,TEXT("C_INPIN:WAITING")));

	// eat samples until a keyframe, we must start with one
	if (pSample->IsSyncPoint() != S_OK) {
            DbgLog((LOG_TRACE,3,TEXT("eating a non-key")));
	    return S_OK;
	}
	// this pin is done waiting
	m_fReady = TRUE;
	m_rtBlock = rt;	// here's the sample we're ready with
	// see if everybody's ready to change state (like we are)
	m_pSwitch->CheckState();

	// this will fire when we're ready
        WaitForSingleObject(m_hEventBlock, INFINITE);
        ResetEvent(m_hEventBlock);
        // we are apparently flushing now and NOT supposed to deliver this
        if (m_bFlushing)
	    return S_OK;
        // oops - we finished since we blocked
        if (m_pSwitch->m_fEOS)
	    return S_FALSE;

	// Now it's out turn to deliver?
	if (!m_fReady)
	    return S_OK;
	// we're looking for GAPS in sample times we get - we need to switch
	// to U samples temporarily to fill any gaps
	m_rtLastDelivered = rt;	// so discontinuity won't scare us
	continue;

    } else if (m_pSwitch->m_myState == SR_COMPRESSED) {
        DbgLog((LOG_TRACE,3,TEXT("C_INPIN:COMPRESSED")));

	// Don't deliver!  Either we're eating keyframes, or it's time to
	// switch back to U samples because we saw a GAP in our data,
	// or we have a discontinuity that is not a key
	if (m_fEatKeys || (pSample->IsDiscontinuity() == S_OK &&
		 (m_pSwitch->CompareTimes(m_rtLastDelivered, rt) > 1 ||
		  pSample->IsSyncPoint() != S_OK))) {

	    // eat samples from now on until a keyframe.  That's where you'll
	    // be able to switch back to compressed samples, after the U has
	    // a go for a while
	    if (pSample->IsSyncPoint() != S_OK) {
		m_fEatKeys = TRUE;
                DbgLog((LOG_TRACE,3,TEXT("C DONE:eating a non-key")));
	        return S_OK;
	    }
	
	    m_fEatKeys = FALSE;
	
	    // time to switch back to uncompressed stuff
	    m_fReady = TRUE;
	    m_rtBlock = rt;	// here's the sample we're ready with
	    m_pSwitch->CheckState();

	    // wait until time for compressed again
            WaitForSingleObject(m_hEventBlock, INFINITE);
            ResetEvent(m_hEventBlock);
    	    // we are apparently flushing now and NOT supposed to deliver this
    	    if (m_bFlushing)
		return S_OK;
            // oops - we finished since we blocked
            if (m_pSwitch->m_fEOS)
	        return S_FALSE;

	    if (m_fReady == FALSE)
		return S_OK;
	    m_rtLastDelivered = rt;	// so discontinuity won't scare us
	    continue;

	// deliver to the main output
	} else {
	    m_rtLastDelivered = rt;
    	    DbgLog((LOG_TRACE,3,TEXT("SR:Deliver %dms"), (int)(rt / 10000)));
            return m_pSwitch->m_pOutput[0]->Deliver(pSample);
	}

    // this should never happen
    } else if (m_pSwitch->m_myState == SR_UNCOMPRESSED) {
	ASSERT(FALSE);
	return S_OK;
    }

    ASSERT(FALSE);
    return E_NOTIMPL;
  }
}


// RECURSIVE COMPRESSOR INPUT data receive
// always deliver to main output
//
HRESULT CSRInputPin::COMP_Receive(IMediaSample *pSample, REFERENCE_TIME rt)
{
    DbgLog((LOG_TRACE,3,TEXT("SR:Deliver %dms"), (int)(rt / 10000)));
    return m_pSwitch->m_pOutput[0]->Deliver(pSample);
}



HRESULT CSRInputPin::Active()
{
    DbgLog((LOG_TRACE,2,TEXT("CSRIn[%d]: Active"), m_iInpin));
    // blocks until it's time to process input
    m_hEventBlock = CreateEvent(NULL, TRUE, FALSE, NULL);
    if (m_hEventBlock == NULL)
	return E_OUTOFMEMORY;
    // blocks when we're in the middle of a seek until seek is over
    m_hEventSeek = CreateEvent(NULL, TRUE, TRUE, NULL);
    if (m_hEventSeek == NULL) {
	CloseHandle(m_hEventBlock);
	m_hEventBlock = NULL;
	return E_OUTOFMEMORY;
    }
    m_rtBlock = -1;	// we are not blocked, nor at EOS
    m_fEOS = FALSE;
    return CBaseInputPin::Active();
}


HRESULT CSRInputPin::Inactive()
{
    DbgLog((LOG_TRACE,2,TEXT("CSRIn[%d]: Inactive"), m_iInpin));

    // make sure receive isn't blocked
    m_bFlushing = TRUE;
    m_fReady = FALSE;	// make sure receive dies after waking up, instead of
			// hanging,etc
    SetEvent(m_hEventBlock);
    SetEvent(m_hEventSeek);

    // make sure receive won't get entered any more
    HRESULT hr = CBaseInputPin::Inactive();

    // now make sure receive is done
    CAutoLock cs(&m_csReceive);

    // now destroy things, knowing receive won't try to use them
    if (m_hEventBlock)
    {
	CloseHandle(m_hEventBlock);
        m_hEventBlock = NULL;
    }
    if (m_hEventSeek)
    {
	CloseHandle(m_hEventSeek);
        m_hEventSeek = NULL;
    }

    return hr;
}


// EOS means this pin is always ready to change state, and we can never provide
// more data.
// When the COMPRESSOR filter gives us this, it means it's safe to switch
// from U to C state.
//
HRESULT CSRInputPin::EndOfStream()
{
    DbgLog((LOG_TRACE,2,TEXT("CSRIn[%d]: EOS"), m_iInpin));
    m_fEOS = TRUE;
    m_fEatKeys = FALSE;

    // if C ever runs out of data, U needs to do the rest of the project itself
    m_rtBlock = MAX_TIME;

    // the compressor is done, OK to switch back to compressed samples
    if (m_iInpin == COMP_INPIN) {
        DbgLog((LOG_TRACE,2,TEXT("COMPRESSOR is done. Switch to COMPRESS state")));
	SetEvent(m_pSwitch->m_pInput[C_INPIN]->m_hEventBlock);
	return CBaseInputPin::EndOfStream();
    }

    // nothing more interesting is happening to this pin.  Change state?
    m_fReady = TRUE;
    m_pSwitch->CheckState();

    return CBaseInputPin::EndOfStream();
}



// All done.  Stop processing.
//
HRESULT CSR::AllDone()
{
    // give the final renderer its EOS.
    DbgLog((LOG_TRACE,1,TEXT("*** ALL DONE!  Delivering EOS")));
    if (!m_fEOS)
        m_pOutput[0]->DeliverEndOfStream();

    // !!! Fire all events... is this right?
    m_fEOS = TRUE;

    for (int z = 0; z < m_cInputs; z++) {
	SetEvent(m_pInput[z]->m_hEventBlock);
    }

    return NOERROR;
}



HRESULT CSR::GetOutputBuffering(int *pnBuffer)
{
    CheckPointer( pnBuffer, E_POINTER );
    *pnBuffer = m_nOutputBuffering;
    return NOERROR;

}


HRESULT CSR::SetOutputBuffering(int nBuffer)
{
    // minimum 2, or we could hang.  If there's only 1, and the FRC is doing
    // a data copy to avoid giving the switch a read only buffer, the FRC has
    // a ref on the only pool buffer.   Then it goes through a DXT and another
    // switch input needs a pool buffer, because it's own buffer is still
    // addrefed by the output queue.  HANG.  If the FRC doesn't call GetBuffer
    // twice we don't have this problem
    if (nBuffer <=1)
	return E_INVALIDARG;
    m_nOutputBuffering = nBuffer;
    return NOERROR;
}

//
// Don't allow our input to connect directly to our output
//
HRESULT CSRInputPin::CompleteConnect(IPin *pReceivePin)
{
    DbgLog((LOG_TRACE,2,TEXT("CSRIn[%d]::CompleteConnect"), m_iInpin));

    PIN_INFO pinfo;
    IAMSmartRecompressor *pBS;
    HRESULT hr = pReceivePin->QueryPinInfo(&pinfo);
    if (hr == S_OK) {
	pinfo.pFilter->Release();	// it won't go away yet
	hr = pinfo.pFilter->QueryInterface(IID_IAMSmartRecompressor, (void **)&pBS);
	if (hr == S_OK) {
	    pBS->Release();
            DbgLog((LOG_TRACE,1,TEXT("CSRIn[%d]::CompleteConnect failing because it was another switch"), m_iInpin));
	    return E_FAIL;
	}
    }
    return CBaseInputPin::CompleteConnect(pReceivePin);
}



// ================================================================
// CSROutputPin constructor
// ================================================================

CSROutputPin::CSROutputPin(TCHAR *pName,
                             CSR *pSwitch,
                             HRESULT *phr,
                             LPCWSTR pPinName) :
    CBaseOutputPin(pName, pSwitch, pSwitch, phr, pPinName) ,
    m_pSwitch(pSwitch),
    m_fOwnAllocator( FALSE )
{
    DbgLog((LOG_TRACE,3,TEXT("::CSROutputPin")));
    ASSERT(pSwitch);
}



//
// CSROutputPin destructor
//
CSROutputPin::~CSROutputPin()
{
    DbgLog((LOG_TRACE,3,TEXT("::~CSROutputPin")));
}


// overridden to allow cyclic-looking graphs - this output is not connected
// to any of our input pins
//
STDMETHODIMP CSROutputPin::QueryInternalConnections(IPin **apPin, ULONG *nPin)
{
    DbgLog((LOG_TRACE,99,TEXT("CSROut::QueryInternalConnections")));
    CheckPointer(nPin, E_POINTER);
    *nPin = 0;
    return S_OK;
}


//
// DecideBufferSize
//
// This has to be present to override the PURE virtual class base function
//
// !!! insist on max buffers of all inputs to avoid hanging?
HRESULT CSROutputPin::DecideBufferSize(IMemAllocator *pAllocator,
                                        ALLOCATOR_PROPERTIES * pProperties)
{
    DbgLog((LOG_TRACE,1,TEXT("CSROut[%d]::DecideBufferSize"),
								m_iOutpin));

    // !!! don't lie? admit we have more buffers in a pool?
    if (pProperties->cBuffers == 0)
        pProperties->cBuffers = 1;

    // bump up this allocator to have as much alignment and prefix as the
    // highest required by any pin
    if (m_pSwitch->m_cbPrefix > pProperties->cbPrefix)
        pProperties->cbPrefix = m_pSwitch->m_cbPrefix;
    if (m_pSwitch->m_cbAlign > pProperties->cbAlign)
        pProperties->cbAlign = m_pSwitch->m_cbAlign;
    if (m_pSwitch->m_cbBuffer > pProperties->cbBuffer)
        pProperties->cbBuffer = m_pSwitch->m_cbBuffer;

    // keep the max up to date
    if (pProperties->cbPrefix > m_pSwitch->m_cbPrefix)
	m_pSwitch->m_cbPrefix = pProperties->cbPrefix;
    if (pProperties->cbAlign > m_pSwitch->m_cbAlign)
	m_pSwitch->m_cbAlign = pProperties->cbAlign;
    if (pProperties->cbBuffer > m_pSwitch->m_cbBuffer)
	m_pSwitch->m_cbBuffer = pProperties->cbBuffer;

    ALLOCATOR_PROPERTIES Actual;
    HRESULT hr = pAllocator->SetProperties(pProperties,&Actual);
    if (FAILED(hr)) {
        DbgLog((LOG_ERROR,1,TEXT("Error in SetProperties")));
	return hr;
    }

    if (Actual.cbBuffer < pProperties->cbBuffer ||
			Actual.cbPrefix < pProperties->cbPrefix ||
    			Actual.cbAlign < pProperties->cbAlign) {
	// can't use this allocator
        DbgLog((LOG_ERROR,1,TEXT("Can't use allocator - something too small")));
	return E_INVALIDARG;
    }

    DbgLog((LOG_TRACE,1,TEXT("Using %d buffers of size %d"),
					Actual.cBuffers, Actual.cbBuffer));
    DbgLog((LOG_TRACE,1,TEXT("Prefix=%d Align=%d"),
					Actual.cbPrefix, Actual.cbAlign));


    return S_OK;
}


//
// DecideAllocator - override to notice if it's our allocator
//
HRESULT CSROutputPin::DecideAllocator(IMemInputPin *pPin, IMemAllocator **ppAlloc)
{
    HRESULT hr = NOERROR;
    *ppAlloc = NULL;

    // get downstream prop request
    // the derived class may modify this in DecideBufferSize, but
    // we assume that he will consistently modify it the same way,
    // so we only get it once
    ALLOCATOR_PROPERTIES prop;
    ZeroMemory(&prop, sizeof(prop));

// !!! BUGBUG TEMPORARY FIX WHO CARES WHAT HE WANTS?  GIVE HIM WHAT OUR INPUTS
//     ARE USING
    // whatever he returns, we assume prop is either all zeros
    // or he has filled it out.
    // pPin->GetAllocatorRequirements(&prop);
    prop.cbBuffer = m_pSwitch->m_cbBuffer;
    prop.cbAlign = m_pSwitch->m_cbAlign;
    prop.cbPrefix = m_pSwitch->m_cbPrefix;
// !!! END BUGBUG

    // if he doesn't care about alignment, then set it to 1
    if (prop.cbAlign == 0) {
        prop.cbAlign = 1;
    }

    /* Try the allocator provided by the input pin */

    // !!! We seem to HANG if we don't provide the allocator
    // We always use our allocator for efficiency (no DDraw!!!)

    hr = E_FAIL; //pPin->GetAllocator(ppAlloc);
    if (SUCCEEDED(hr)) {

	hr = DecideBufferSize(*ppAlloc, &prop);
	if (SUCCEEDED(hr)) {
	    hr = pPin->NotifyAllocator(*ppAlloc, FALSE);
	    if (SUCCEEDED(hr)) {
	 	m_fOwnAllocator = FALSE;
    	        DbgLog((LOG_TRACE,1,TEXT("CSROut[%d]: using a foreign allocator"), m_iOutpin));
		return NOERROR;
	    }
	}
    }

    /* If the GetAllocator failed we may not have an interface */

    if (*ppAlloc) {
	(*ppAlloc)->Release();
	*ppAlloc = NULL;
    }

    /* Try the output pin's allocator by the same method */

    hr = InitAllocator(ppAlloc);
    if (SUCCEEDED(hr)) {

        // note - the properties passed here are in the same
        // structure as above and may have been modified by
        // the previous call to DecideBufferSize
	hr = DecideBufferSize(*ppAlloc, &prop);
	if (SUCCEEDED(hr)) {
	    // !!! read only?
	    hr = pPin->NotifyAllocator(*ppAlloc, FALSE);
	    if (SUCCEEDED(hr)) {
		m_fOwnAllocator = TRUE;
    	        DbgLog((LOG_TRACE,1,TEXT("CSROut[%d]: using our own allocator"), m_iOutpin));
		goto FixOtherAllocators;
	    }
	}
    }

    /* Likewise we may not have an interface to release */

    if (*ppAlloc) {
	(*ppAlloc)->Release();
	*ppAlloc = NULL;
    }
    return hr;

FixOtherAllocators:
    ALLOCATOR_PROPERTIES actual;

#if 0	// !!! BUGBUG TEMPORARY FIX
    // we have to make all the input allocators know about the alignment and
    // prefix this output needs.  If it's our allocator, just make a note of it
    // otherwise we need to reconnect (which we hate to do; takes forever)
    // (!!! so don't do it this often, only after all outputs connected!)
    // Luckily, the common scenario is that inputs use their own allocator
    //
    if (this == m_pSwitch->m_pOutput[0]) {
      for (int z=0; z<m_pSwitch->m_cInputs; z++) {

	if (m_pSwitch->m_pInput[z]->IsConnected()) {
	    hr = m_pSwitch->ReconnectPin(m_pSwitch->m_pInput[z],
				(AM_MEDIA_TYPE *)&m_pSwitch->m_pInput[z]->m_mt);
	    ASSERT(hr == S_OK);
    	    DbgLog((LOG_TRACE,1,TEXT("*Reconnecting input %d to fix allocator"),
							z));
	}
      }
    }
#endif

    // make sure the pool has a whole bunch of buffers, obeying align and prefix
    // !!! You can't connect the main output first, or we won't yet know how
    // big pool buffers need to be (no inputs connected yet) and we'll blow up.
    // Luckily, Dexter can only connect the main output last.
    prop.cBuffers = m_pSwitch->m_nOutputBuffering;
    hr = m_pSwitch->m_pPoolAllocator->SetProperties(&prop, &actual);
    ASSERT(SUCCEEDED(hr));
    if (FAILED(hr))
	return hr;
    DbgLog((LOG_TRACE,1,TEXT("Increased POOL to %d buffers"), actual.cBuffers));

    return S_OK;

} // DecideAllocator


//
// CheckMediaType - output 0 accepts only our switch's compressed type
//                - output 1 accepts only what the uncompressed input is using
//
HRESULT CSROutputPin::CheckMediaType(const CMediaType *pmt)
{
    DbgLog((LOG_TRACE,5,TEXT("CSROut[%d]::CheckMT"), m_iOutpin));

    CAutoLock lock_it(m_pLock);

    CMediaType mtAccept(m_pSwitch->m_mtAccept);

    if (IsEqualGUID(*pmt->Type(), *mtAccept.Type())) {
	// the output going to a compressor doesn't need to be compressed
        if (m_iOutpin == COMP_OUTPIN ||
			IsEqualGUID(*pmt->Subtype(), *mtAccept.Subtype())) {
	    if (*pmt->FormatType() == *mtAccept.FormatType()) {
	        if (pmt->FormatLength() >= mtAccept.FormatLength()) {

// !!! check frame rate and data rate too

        	    if (IsEqualGUID(*pmt->FormatType(), FORMAT_VideoInfo)) {
			LPBITMAPINFOHEADER lpbi = HEADER((VIDEOINFOHEADER *)
							pmt->Format());
			LPBITMAPINFOHEADER lpbiAccept =HEADER((VIDEOINFOHEADER*)
							mtAccept.Format());

			if (lpbi->biWidth != lpbiAccept->biWidth ||
				lpbi->biHeight != lpbiAccept->biHeight) {
			    return VFW_E_INVALIDMEDIATYPE;
			}

			// our output going to the compressor only accepts
			// what the uncompressed input is using
		 	if (m_iOutpin == COMP_OUTPIN) {
			    // if the U pin is not connected, accept any U type
			    // !!! I'd reject the connection, but loading a
			    // saved GRF tries this connection before U's
			    if (!m_pSwitch->m_pInput[U_INPIN]->IsConnected()) {
				if (lpbi->biCompression <= BI_BITFIELDS)
				    return S_OK;
			    }
			    AM_MEDIA_TYPE *pmtU =
					&m_pSwitch->m_pInput[U_INPIN]->m_mt;
			    lpbiAccept = HEADER(pmtU->pbFormat);
			}
			if ((lpbi->biCompression == lpbiAccept->biCompression)
				&& (lpbi->biBitCount == lpbiAccept->biBitCount))
		    	    return S_OK;

		    // will other formats match exactly?
		    }
		}
	    }
        }
    }
    return VFW_E_INVALIDMEDIATYPE;

} // CheckMediaType



//
// GetMediaType - return the type we accept.   If we're the output going to a
// compressor, then it's not our switch's type, it's the type of our
// uncompressed input pin
//
HRESULT CSROutputPin::GetMediaType(int iPosition, CMediaType *pMediaType)
{
    if (iPosition != 0)
        return VFW_S_NO_MORE_ITEMS;

    CopyMediaType(pMediaType, &m_pSwitch->m_mtAccept);

    // we like whatever our U inpin is connected as
    //
    if (pMediaType->FormatLength() && m_iOutpin == COMP_OUTPIN) {
	// U inpin has to be connected
	if (!m_pSwitch->m_pInput[U_INPIN]->IsConnected())
	    return VFW_S_NO_MORE_ITEMS;
	AM_MEDIA_TYPE *pmtAccept = &m_pSwitch->m_pInput[U_INPIN]->m_mt;
	LPBITMAPINFOHEADER lpbi = HEADER(pMediaType->Format());
	LPBITMAPINFOHEADER lpbiAccept = HEADER(pmtAccept->pbFormat);
	pMediaType->SetSubtype(&pmtAccept->subtype);
        // compressed biSize may have been different
	lpbi->biSize = sizeof(BITMAPINFOHEADER);
	lpbi->biCompression = lpbiAccept->biCompression;
	lpbi->biBitCount = lpbiAccept->biBitCount;
	lpbi->biSizeImage = DIBSIZE(*lpbi);
	pMediaType->SetSampleSize(DIBSIZE(*lpbi));
	pMediaType->SetTemporalCompression(FALSE);
    }

    return S_OK;

} // GetMediaType


//
// Notify
//
STDMETHODIMP CSROutputPin::Notify(IBaseFilter *pSender, Quality q)
{
    CAutoLock lock_it(m_pLock);

    DbgLog((LOG_TRACE,1,TEXT("SR: LATE %d ms"), (int)(q.Late / 10000)));
    REFERENCE_TIME rt = q.Late;

// !!! CODE GOES HERE!

    // we handle this, renderer do NOT drop frames!  The compressor in the graph
    // is slow, and we're always behind!
    return S_OK;
}

#ifdef FILTER_DLL
//
// DllRegisterServer
//
STDAPI DllRegisterServer()
{
    return AMovieDllRegisterServer2( TRUE );
}


//
// DllUnregisterServer
//
STDAPI
DllUnregisterServer()
{
    return AMovieDllRegisterServer2( FALSE );
}
#endif

HRESULT CSROutputPin::IsFormatSupported(const GUID * pFormat)
{
    CheckPointer(pFormat, E_POINTER);
    return (*pFormat == TIME_FORMAT_MEDIA_TIME) ? S_OK : S_FALSE;
}

HRESULT CSROutputPin::QueryPreferredFormat(GUID *pFormat)
{
    CheckPointer(pFormat, E_POINTER);
    *pFormat = TIME_FORMAT_MEDIA_TIME;
    return S_OK;
}

HRESULT CSROutputPin::SetTimeFormat(const GUID * pFormat)
{
    CheckPointer(pFormat, E_POINTER);
    if (*pFormat == TIME_FORMAT_MEDIA_TIME)
        return S_OK;
    return E_FAIL;
}

HRESULT CSROutputPin::IsUsingTimeFormat(const GUID * pFormat)
{
    CheckPointer(pFormat, E_POINTER);
    if (*pFormat != TIME_FORMAT_MEDIA_TIME)
        return S_FALSE;
    return S_OK;
}

HRESULT CSROutputPin::GetTimeFormat(GUID *pFormat)
{
    CheckPointer(pFormat, E_POINTER);
    *pFormat = TIME_FORMAT_MEDIA_TIME ;
    return S_OK;
}

HRESULT CSROutputPin::GetDuration(LONGLONG *pDuration)
{
    CheckPointer(pDuration, E_POINTER);

    DbgLog((LOG_TRACE,5,TEXT("SR: GetDuration")));
    HRESULT hr = E_UNEXPECTED;
    if (m_pSwitch->m_pInput[U_INPIN]->IsConnected()) {
	IPin *pPin = m_pSwitch->m_pInput[U_INPIN]->GetConnected();
	if (pPin == NULL)
	    return E_UNEXPECTED;
	IMediaSeeking *pMS;
	hr = pPin->QueryInterface(IID_IMediaSeeking, (void **)&pMS);
	if (SUCCEEDED(hr)) {
	    hr = pMS->GetDuration(pDuration);
	    pMS->Release();
	}
    }
    return hr;
}


// !!! We don't listen to stop positions right now
//
HRESULT CSROutputPin::GetStopPosition(LONGLONG *pStop)
{
    CheckPointer(pStop, E_POINTER);

    // !!! ACK!
    return GetDuration(pStop);
}


// What's the last thing we sent?
// !!! This is wrong, at end of playback and other times... LastDelivered isn't
// up to date (if we finish on a compressed segment, we go into U mode but
// LastDelivered isn't updated)
//
HRESULT CSROutputPin::GetCurrentPosition(LONGLONG *pCurrent)
{
    CheckPointer(pCurrent, E_POINTER);

    if (m_pSwitch->m_myState == SR_UNCOMPRESSED)
	*pCurrent = m_pSwitch->m_pInput[U_INPIN]->m_rtLastDelivered;
    else if (m_pSwitch->m_myState == SR_COMPRESSED)
	*pCurrent = m_pSwitch->m_pInput[C_INPIN]->m_rtLastDelivered;
    else
	*pCurrent = 0;	// !!!
	

    return S_OK;
}

HRESULT CSROutputPin::GetCapabilities(DWORD *pCap)
{
    CheckPointer(pCap, E_POINTER);
    *pCap =	AM_SEEKING_CanSeekAbsolute |
		AM_SEEKING_CanSeekForwards |
		AM_SEEKING_CanSeekBackwards |
		AM_SEEKING_CanGetCurrentPos |
		AM_SEEKING_CanGetStopPos |
                AM_SEEKING_CanGetDuration;

    // ask UNC input?

    return S_OK;
}

HRESULT CSROutputPin::CheckCapabilities( DWORD * pCapabilities )
{
    DWORD dwMask;
    GetCapabilities(&dwMask);
    *pCapabilities &= dwMask;
    return S_OK;
}


HRESULT CSROutputPin::ConvertTimeFormat(
  		LONGLONG * pTarget, const GUID * pTargetFormat,
  		LONGLONG    Source, const GUID * pSourceFormat )
{
    return E_NOTIMPL;
}


// Here's the biggie... SEEK!
//
HRESULT CSROutputPin::SetPositions(
		LONGLONG * pCurrent,  DWORD CurrentFlags,
  		LONGLONG * pStop,  DWORD StopFlags )
{

    // !!! THIS IS STILL BUGGY, and not really necessary
    return E_NOTIMPL;

    // app can't seek us while we're seeking our own U pin ourselves
    CAutoLock cAutolock(&m_pSwitch->m_csThread);

    // don't let us seek ourselves anymore
    m_pSwitch->m_fThreadCanSeek = FALSE;

    // !!! I don't handle changing STOP time

    REFERENCE_TIME rtCurrent, rtDuration, rtCurrentOld;
    HRESULT hr = GetCurrentPosition(&rtCurrent);
    if (FAILED(hr))
	return hr;
    rtCurrentOld = rtCurrent;
    hr = GetDuration(&rtDuration);
    if (FAILED(hr))
	return hr;

    // segment not supported
    if ((CurrentFlags & AM_SEEKING_Segment) ||
				(StopFlags & AM_SEEKING_Segment)) {
    	DbgLog((LOG_TRACE,1,TEXT("SR: ERROR-Seek used EC_ENDOFSEGMENT!")));
	return E_INVALIDARG;
    }

    DWORD dwFlags = (CurrentFlags & AM_SEEKING_PositioningBitsMask);

    // start ABSOLUTE seek
    if (dwFlags == AM_SEEKING_AbsolutePositioning) {
	CheckPointer(pCurrent, E_POINTER);
	if (*pCurrent < 0 || *pCurrent > rtDuration) {
    	    DbgLog((LOG_TRACE,1,TEXT("SR::Invalid Seek to %dms"),
					(int)(*pCurrent / 10000)));
	    return E_INVALIDARG;
	}
    	DbgLog((LOG_TRACE,1,TEXT("SR::Seek to %dms"),
					(int)(*pCurrent / 10000)));
	rtCurrent = *pCurrent;

    // start RELATIVE seek
    } else if (dwFlags == AM_SEEKING_RelativePositioning) {
	CheckPointer(pCurrent, E_POINTER);
	if (rtCurrent + *pCurrent < 0 || rtCurrent + *pCurrent > rtDuration) {
    	    DbgLog((LOG_TRACE,1,TEXT("SR::Invalid Relative Seek to %dms"),
			(int)((rtCurrent + *pCurrent) / 10000)));
	    return E_INVALIDARG;
	}
    	DbgLog((LOG_TRACE,1,TEXT("SR::Relative Seek to %dms"),
			(int)((rtCurrent + *pCurrent) / 10000)));
	rtCurrent += *pCurrent;

    } else if (dwFlags) {
    	DbgLog((LOG_TRACE,1,TEXT("SR::Invalid Current Seek flags")));
	return E_INVALIDARG;
    }

    // return the time?
    if ((CurrentFlags & AM_SEEKING_ReturnTime) && pCurrent)
	*pCurrent = rtCurrent;
    if ((StopFlags & AM_SEEKING_ReturnTime) && pStop)
	*pStop = rtDuration;	// !!! Nope

    // so after all that, has the current or stop time changed?
    if (rtCurrent != rtCurrentOld) {

	// YEP!  Time to seek!
	
        m_pSwitch->m_fSeeking = TRUE;
	// EndFlush or us will update rtLastSeek to this value
        m_pSwitch->m_rtNewLastSeek = rtCurrent;	// the last seek was to here
	// after seeking, it's OK to propogate a newseg downstream
	m_pSwitch->m_fNewSegOK = TRUE;

	// we're no longer at EOS.  Do this BEFORE passing seek upstream or
	// we might get new data while we still think we're at EOS
	m_pSwitch->m_fEOS = FALSE;		// not at EOS yet

	// seek upstream of the U and C inpins only
	for (int i = 0; i < COMP_INPIN; i++) {

	    IPin *pPin = m_pSwitch->m_pInput[i]->GetConnected();
	    IMediaSeeking *pMS;

	    // only bother to seek pins that will evenutally do something
	    if (pPin) {
		hr = pPin->QueryInterface(IID_IMediaSeeking, (void **)&pMS);
		if (hr == S_OK) {
		    // convert all seeks to absolute seek commands.  Pass on
		    // FLUSH flag.
		    DWORD CFlags=(CurrentFlags &AM_SEEKING_PositioningBitsMask)?
				AM_SEEKING_AbsolutePositioning :
				AM_SEEKING_NoPositioning;
		    if (CurrentFlags & AM_SEEKING_NoFlush)
			CFlags |= AM_SEEKING_NoFlush;
		    DWORD SFlags =(StopFlags & AM_SEEKING_PositioningBitsMask) ?
				AM_SEEKING_AbsolutePositioning :
				AM_SEEKING_NoPositioning;
		    if (StopFlags & AM_SEEKING_NoFlush)
			SFlags |= AM_SEEKING_NoFlush;
		    // make sure we're in MEDIA TIME format
		    if (pMS->IsUsingTimeFormat(&TIME_FORMAT_MEDIA_TIME) != S_OK)
			pMS->SetTimeFormat(&TIME_FORMAT_MEDIA_TIME);
    		    DbgLog((LOG_TRACE,1,TEXT("SR::Passing seek upstream")));
		    // !!! Stop isn't right
		    hr = pMS->SetPositions(&rtCurrent, CFlags,
							&rtDuration, SFlags);

		    if (FAILED(hr)) {
			ASSERT(FALSE);
            		DbgLog((LOG_ERROR,1,TEXT("SR: ERROR in SetPositions")));
	    		pMS->Release();
	    		return hr;
		    }

		    pMS->Release();
		} else {
    		    DbgLog((LOG_ERROR,1,TEXT("SR::In %d CAN'T SEEK"), i));
		    ASSERT(FALSE); // we're screwed
		}
	    }
	}

        // we know all the flushes have now come through

	// Reset this AGAIN because seeking upstream could set it again
	m_pSwitch->m_fEOS = FALSE;		// not at EOS yet

        m_pSwitch->m_fSeeking = FALSE;	// this thread is all done

        // if the push thread was stopped, we won't get flushed, and this won't
        // have been updated.   !!! I ASSUME the push thread won't be started
	// until this thread does it when this function returns, or there is a
	// race condition (so the NewSeg will come after we do this)
        m_pSwitch->m_rtLastSeek = m_pSwitch->m_rtNewLastSeek;

	// now that we've seeked, our state machine starts over again
	m_pSwitch->m_myState = SR_WAITING;

        DbgLog((LOG_TRACE,1,TEXT("Completing the seek to %d,%dms"),
				(int)(rtCurrent / 10000),
				(int)(rtDuration / 10000)));

	// do stuff that EndFlush did for each pin, in case no EndFlush happened
	for (i = 0; i < m_pSwitch->m_cInputs; i++) {
	    // if we weren't streaming, EndFlush didn't do this yet
	    m_pSwitch->m_pInput[i]->m_rtBlock = -1;
	    m_pSwitch->m_pInput[i]->m_fReady = FALSE;	// not ready
	    m_pSwitch->m_pInput[i]->m_fEOS = FALSE;
	    SetEvent(m_pSwitch->m_pInput[i]->m_hEventSeek);
	    ResetEvent(m_pSwitch->m_pInput[i]->m_hEventBlock);
	}
    }
    return S_OK;
}


HRESULT CSROutputPin::GetPositions(LONGLONG * pCurrent, LONGLONG * pStop)
{
    HRESULT hr = GetCurrentPosition(pCurrent);
    if (SUCCEEDED(hr))
	hr = GetStopPosition(pStop);
    return hr;
}

HRESULT CSROutputPin::GetAvailable( LONGLONG * pEarliest, LONGLONG * pLatest )
{
    DbgLog((LOG_TRACE,5,TEXT("SR: GetAvailable")));
    HRESULT hr = E_UNEXPECTED;
    if (m_pSwitch->m_pInput[U_INPIN]->IsConnected()) {
	IPin *pPin = m_pSwitch->m_pInput[U_INPIN]->GetConnected();
	if (pPin == NULL)
	    return E_UNEXPECTED;
	IMediaSeeking *pMS;
	hr = pPin->QueryInterface(IID_IMediaSeeking, (void **)&pMS);
	if (SUCCEEDED(hr)) {
	    hr = pMS->GetAvailable(pEarliest, pLatest);
	    pMS->Release();
	}
    }
    return hr;
}

HRESULT CSROutputPin::SetRate( double dRate)
{
    return E_NOTIMPL;
}

HRESULT CSROutputPin::GetRate( double * pdRate)
{
    return E_NOTIMPL;
}

HRESULT CSROutputPin::GetPreroll(LONGLONG *pPreroll)
{
    return E_NOTIMPL;
}

STDMETHODIMP CSROutputPin::NonDelegatingQueryInterface(REFIID riid, void ** ppv)
{
    CheckPointer(ppv,E_POINTER);

    // only the render pin supports seeking
    if (this == m_pSwitch->m_pOutput[0] && riid == IID_IMediaSeeking) {
        //DbgLog((LOG_TRACE,9,TEXT("CSROut: QI for IMediaSeeking")));
        return GetInterface((IMediaSeeking *) this, ppv);
    } else {
        return CBaseOutputPin::NonDelegatingQueryInterface(riid, ppv);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\stillvid\loadjpg.cpp ===
/////////////////////////////////////////////////////////////////////////
// Copyright (c) 1998 - 1999  Microsoft Corporation.  All Rights Reserved.
// All Rights Reserved.
////////////////////////////////////////////////////////////////////////
// The loadJpg.cpp originally comes from ..\filters\netshow\imgdnld\loadjpeg.cpp
// I made changes 
//  10-20-98  Xuping Wu
// LoadJPG.CPP
//
// Load a JPEG image from a file and create a DIBSECTION bitmap
// Uses code from the Independent JPEG group's JPEG decompression library
//

#include <streams.h>

#include <stdio.h>	// !!!
//#define _INT32_DEFINED   // Keep jpeglib.h from redefining this
#include "..\jpeglib\jpeglib.h"

extern WORD DibNumColors (VOID FAR *pv); 

// Error handling code for IJG's decompressor
#include <setjmp.h>

// tonycan: #defines to get this to compile
#define Assert( x )         ASSERT( x )
#define ThrowIfFailed( x )  ( x )

/////////////////////////////////////////////////////////////////////////
struct my_error_mgr {
  struct jpeg_error_mgr pub;
  jmp_buf setjmp_buffer;
};

typedef struct my_error_mgr * my_error_ptr;

////////////////////////////////////////////////////////////////////////
METHODDEF(void) my_error_exit ( j_common_ptr cinfo) {
  my_error_ptr myerr = (my_error_ptr) cinfo->err;

/* Return control to the setjmp point */
  longjmp(myerr->setjmp_buffer, 1);
}

//////////////////////////////////////////////////////////////////////////
HBITMAP _jpeg_create_bitmap(j_decompress_ptr cinfo, CMediaType *pmt) {
  int bytes_per_line;
  LPBYTE  image    = NULL;
  LPBITMAPINFO pBi = NULL;
  HBITMAP hImage   = NULL;
  LPBYTE pBuffer;

  // to set up media type
  VIDEOINFO *pvi = (VIDEOINFO *) pmt->AllocFormatBuffer(sizeof(VIDEOINFO));
  if(!pvi) {
      return 0;
  }
  ZeroMemory(pvi, sizeof(VIDEOINFO));

// Set up windows bitmap info header
//
  pBi = (LPBITMAPINFO) &pvi->bmiHeader;

  pBi->bmiHeader.biSize     = sizeof(BITMAPINFOHEADER);
  pBi->bmiHeader.biWidth    =   cinfo->output_width;
  pBi->bmiHeader.biHeight   = - (int) cinfo->output_height;
//*X*
  
  if (cinfo->quantize_colors) {
    // The decompressor has quantized the color to 8-bit for us.
    int byteperpix = 1; //cinfo->output_components;

    // Set up palette for new image

    int i;   // Loop Counter

    switch (cinfo->jpeg_color_space) {

        case JCS_GRAYSCALE:
            for (i=0;  i < 256;  ++i) {
                pBi->bmiColors[i].rgbRed   =
                pBi->bmiColors[i].rgbGreen =
                pBi->bmiColors[i].rgbBlue  = cinfo->colormap[0][i];
                pBi->bmiColors[i].rgbReserved = 255; // opaque
            }
            break;

        case JCS_YCbCr:
            // YUV entries are already converted to RGB.
            // ** FALL THROUGH **

        case JCS_RGB:
            for (i=0;  i < 256;  ++i) {
                pBi->bmiColors[i].rgbRed   = cinfo->colormap[2][i];
                pBi->bmiColors[i].rgbGreen = cinfo->colormap[1][i];
                pBi->bmiColors[i].rgbBlue  = cinfo->colormap[0][i];
                pBi->bmiColors[i].rgbReserved = 255; // opaque
            }
            break;

        case JCS_YCCK:
            // YUV entries are already converted to RGB.
            // ** FALL THROUGH **

        case JCS_CMYK:
            // For CMYK, the CMY channels have already been converted to RGB,
            // and the K channel has been inverted.  The CMY entries have been
            // scaled to the range [0,255], covering the spectrum in [K,255].
            // For example, C' = K + (C/255)(255-K).

            for (i=0;  i < 256;  ++i) {
                unsigned int C = 255 - cinfo->colormap[0][i];
                unsigned int M = 255 - cinfo->colormap[1][i];
                unsigned int Y = 255 - cinfo->colormap[2][i];
                unsigned int K = 255 - cinfo->colormap[3][i];

                pBi->bmiColors[i].rgbRed   = (BYTE)(255 - (K+C-((C*K)/255)));
                pBi->bmiColors[i].rgbGreen = (BYTE)(255 - (K+M-((M*K)/255)));
                pBi->bmiColors[i].rgbBlue  = (BYTE)(255 - (K+Y-((Y*K)/255)));
                pBi->bmiColors[i].rgbReserved = 255; // opaque
            }
            break;

        default:
            // If the colorspace is unknown or unhandled, then leave the
            // color lookup table as-is.

            Assert (!"Unknown or unhandled JPEG colorspace.");
            break;
    }

    bytes_per_line = (cinfo->output_width + 3) & -4; // even # of DWORDs
    //*X*
    pBi->bmiHeader.biPlanes   = 1;
    pBi->bmiHeader.biBitCount = 8;
    pBi->bmiHeader.biCompression   = BI_RGB;
    pBi->bmiHeader.biSizeImage     = 0;
    pBi->bmiHeader.biXPelsPerMeter = 0;
    pBi->bmiHeader.biYPelsPerMeter = 0;
    pBi->bmiHeader.biClrUsed       = 0;   // maximum # of colors
    pBi->bmiHeader.biClrImportant  = 0;   // all colors are important

  } else {
    // The compressor has not quantized color (and we're either a
    // grey scale or a 24bpp image)
    //

    // Make sure it's a format we can handle.
    //
    int byteperpix = cinfo->out_color_components;
    if (byteperpix != 3) goto jpeg_error;

    pBi->bmiHeader.biBitCount = byteperpix * 8;

    bytes_per_line = ((cinfo->output_width * byteperpix) + 3) & -4;
    
    pBi->bmiHeader.biPlanes   = 1;
    pBi->bmiHeader.biBitCount = byteperpix * 8;
    pBi->bmiHeader.biCompression   = BI_RGB;
    pBi->bmiHeader.biSizeImage     = 0;   //*X*SET UP LATER
    pBi->bmiHeader.biXPelsPerMeter = 0;
    pBi->bmiHeader.biYPelsPerMeter = 0;
    pBi->bmiHeader.biClrUsed       = 0;   // maximum # of colors
    pBi->bmiHeader.biClrImportant  = 0;   // all colors are important

}


// Create our DIBSECTION bitmap...
//
  hImage = CreateDIBSection(NULL,pBi,DIB_RGB_COLORS,(LPVOID *) &image,NULL,0);
  if (NULL == hImage) goto jpeg_error;

// Read the image data
//
  pBuffer = image;

  while (cinfo->output_scanline < cinfo->output_height) {
    jpeg_read_scanlines(cinfo, &pBuffer, 1);
    pBuffer += bytes_per_line;
  }
  
  //*x* 10-22-98, get media type
  if (NULL != pvi) 
  {
    LPBITMAPINFO lpbi  = (BITMAPINFO *)&pvi->bmiHeader;
    LPBITMAPINFOHEADER lpbih = (BITMAPINFOHEADER *)&pvi->bmiHeader;

    //*X* 10-29-98  Fill in some default values if they are zero 
    if (lpbih->biSizeImage == 0) 
    { 
#if 0
	WORD h, w;
	h=lpbih->biHeight>0? lpbih->biHeight: -lpbih->biHeight;
	w=lpbih->biWidth>0? lpbih->biWidth: -lpbih->biWidth;

        lpbih->biSizeImage = WIDTHBYTES ( w * lpbih->biBitCount) * h ;
#endif
        lpbih->biSizeImage = DIBSIZE(*lpbih);

    } 
    // calc DIB number colors
    WORD      nNumColors; 
    nNumColors = DibNumColors (lpbih); 
    pmt->SetType(&MEDIATYPE_Video);
    switch (lpbih->biBitCount)
    {
    case 24:
	pmt->SetSubtype(&MEDIASUBTYPE_RGB24);
	break;
    case 8:
	pmt->SetSubtype(&MEDIASUBTYPE_RGB8);
	break;
    case 4:
	pmt->SetSubtype(&MEDIASUBTYPE_RGB4);
	break;
    case 32:
	pmt->SetSubtype(&MEDIASUBTYPE_ARGB32);
	break;
    default:
	pmt->SetSubtype(&MEDIASUBTYPE_NULL);
	break;
    }
    pmt->SetFormatType(&FORMAT_VideoInfo);
    pmt->SetTemporalCompression(FALSE);
    // Calculate the memory needed to hold the DIB  
    pmt->SetSampleSize(lpbih->biSizeImage);
  }
  
  return hImage;

jpeg_error:
  if (hImage) DeleteObject(hImage);

  return NULL;
}

//X* 10-22-98 change to void from HBITMAP
///////////////////////////////////////////////////////////////////////////
HBITMAP LoadJPEGImage(LPTSTR filename, CMediaType *pmt) {
  FILE* infile;    /* source file */
  struct jpeg_decompress_struct cinfo; //the IJG jpeg structure
  struct my_error_mgr jerr;

#ifndef UNICODE
  if ((infile = fopen(filename, "rb")) == NULL) return NULL;
#else
  if ((infile = _wfopen(filename, L"rb")) == NULL) return NULL;
#endif



// Step 1: allocate and initialize JPEG decompression object
// We set up the normal JPEG error routines, then override error_exit.
//
  cinfo.err = jpeg_std_error(&jerr.pub);
  jerr.pub.error_exit = my_error_exit;

// Establish the setjmp return context for my_error_exit to use.
// If we get here, the JPEG code has signaled an error.
// We need to clean up the JPEG object, close the input file, and return.
//
  if (setjmp(jerr.setjmp_buffer)) {
    jpeg_destroy_decompress(&cinfo);
    fclose(infile);
    //XXXX HACKHACKHACK return -1 to stop the import from attempting to use
    //XXXX HACKHACKHACK the jpeg plugin, remove this code when it works and
    //XXXX HACKHACKHACK return NULL instead
   return (HBITMAP)-1;
  }

// Now we can initialize the JPEG decompression object.
//
  jpeg_create_decompress(&cinfo);

/* Step 2: specify data source (eg, a file) */

  jpeg_stdio_src(&cinfo, infile);

/* Step 3: read file parameters with jpeg_read_header() */

  (void) jpeg_read_header(&cinfo, TRUE);
/* We can ignore the return value from jpeg_read_header since
 *   (a) suspension is not possible with the stdio data source, and
 *   (b) we passed TRUE to reject a tables-only JPEG file as an error.
 * See libjpeg.doc for more info.
*/

/* Step 4: set parameters for decompression */
  if(cinfo.out_color_space == JCS_GRAYSCALE)
  {
    cinfo.quantize_colors = TRUE;
  }
 /*X* else
  {
// does this limit us to 8-bit color for now?
//
    cinfo.quantize_colors = TRUE;
  }
*X*/

/* In this example, we don't need to change any of the defaults set by
 * jpeg_read_header(), so we do nothing here.
*/

  /* Step 5: Start decompressor */

  (void) jpeg_start_decompress(&cinfo);
  /* We can ignore the return value since suspension is not possible
   * with the stdio data source.
   */


  /* Step 6: while (scan lines remain to be read) */
  /*           jpeg_read_scanlines(...); */
   HBITMAP hImage = _jpeg_create_bitmap(&cinfo, pmt);

  /* Step 7: Finish decompression */
 
  (void) jpeg_finish_decompress(&cinfo);

  /* Step 8: Release JPEG decompression object */
  jpeg_destroy_decompress(&cinfo);

  /* After finish_decompress, we can close the input file.
   * Here we postpone it until after no more JPEG errors are possible,
   * so as to simplify the setjmp error logic above.  (Actually, I don't
   * think that jpeg_destroy can do an error exit, but why assume anything...)
   */
  fclose(infile);

    return hImage;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\sr\sr.h ===
//==========================================================================;
//
//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
//  PURPOSE.
//
//  Copyright (c) 1992 - 1999  Microsoft Corporation.  All Rights Reserved.
//
//--------------------------------------------------------------------------;

#ifndef __SR__
#define __SR__

#include "..\errlog\cerrlog.h"

// which input pin does what?
#define U_INPIN 0
#define C_INPIN 1
#define COMP_INPIN 2
#define COMP_OUTPIN 1

// our state machine
#define SR_INVALID -1
enum {
    SR_WAITING,	// waiting to get inputs on both pins
    SR_COMPRESSED,	// currently sending compressed data
    SR_UNCOMPRESSED // currently sending uncompressed data
};
	
extern const AMOVIESETUP_FILTER sudSR;

class CSR;
class CSROutputPin;
class CSRInputPin;
class CSRInputAllocator;

// class for the SR filter's Input allocator

class CSRInputAllocator : public CMemAllocator
{
    friend class CSRInputPin;

protected:

    CSRInputPin *m_pSwitchPin;

public:

    CSRInputAllocator(TCHAR *pName, LPUNKNOWN pUnk, HRESULT *phr) :
    	CMemAllocator(pName, pUnk, phr) {};
    ~CSRInputAllocator() {};

    STDMETHODIMP GetBuffer(IMediaSample **ppBuffer, REFERENCE_TIME *pStartTime,
                                  REFERENCE_TIME *pEndTime, DWORD dwFlags);
};


class CSRInputPin : public CBaseInputPin
{
    friend class CSRInputAllocator;
    friend class CSROutputPin;
    friend class CSR;

public:

    // Constructor and destructor
    CSRInputPin(TCHAR *pObjName,
                 CSR *pTee,
                 HRESULT *phr,
                 LPCWSTR pPinName);
    ~CSRInputPin();

    // overridden to allow cyclic-looking graphs
    STDMETHODIMP QueryInternalConnections(IPin **apPin, ULONG *nPin);

    // check the input pin connection
    HRESULT CheckMediaType(const CMediaType *pmt);

    // release our special allocator, if any
    HRESULT BreakConnect();

    // get our special SR allocator
    STDMETHODIMP GetAllocator(IMemAllocator **ppAllocator);

    // provide a type to make connecting faster?
    HRESULT GetMediaType(int iPosition, CMediaType *pMediaType);

    // don't allow us to connect directly to a switch output pin
    virtual HRESULT CompleteConnect(IPin *pReceivePin);

    // ask the switch for the allocator requirements
    STDMETHODIMP GetAllocatorRequirements(ALLOCATOR_PROPERTIES*pProps);

    // does special processing to make sure switch knows about the biggest
    // allocator provided to it
    STDMETHODIMP NotifyAllocator(IMemAllocator *pAllocator, BOOL bReadOnly);

    // pass on EOS, then see if we need to do a crank
    STDMETHODIMP EndOfStream();

    // very complicated function...
    STDMETHODIMP BeginFlush();

    // very complicated function...
    STDMETHODIMP EndFlush();

    // deliver every input's newsegment to every output pin
    //
    STDMETHODIMP NewSegment(
                    REFERENCE_TIME tStart,
                    REFERENCE_TIME tStop,
                    double dRate);

    // Just say yes, could possibly infinite loop?
    STDMETHODIMP ReceiveCanBlock();

    // Handles the next block of data from the stream
    STDMETHODIMP Receive(IMediaSample *pSample);

    // each type of pin does receive a little differently
    STDMETHODIMP U_Receive(IMediaSample *pSample, REFERENCE_TIME);
    STDMETHODIMP C_Receive(IMediaSample *pSample, REFERENCE_TIME);
    STDMETHODIMP COMP_Receive(IMediaSample *pSample, REFERENCE_TIME);

    // create and destroy synchronization events
    HRESULT Active();
    HRESULT Inactive();

protected:

    CSRInputAllocator *m_pAllocator; // our special allocator
    CSR *m_pSwitch;      // Main filter object
    int m_iInpin;	        // which input pin are we?
    int m_cBuffers;	        // number of buffers in allocator
    int m_cbBuffer;	        // size of the allocator buffers
    BOOL m_fOwnAllocator;	//using our own?
    HANDLE m_hEventBlock;	// event blocking receive/getbuffer
    HANDLE m_hEventSeek;	// block input while seeking
    REFERENCE_TIME m_rtBlock;	// sample arrived here
    REFERENCE_TIME m_rtLastDelivered;	// end time of last thing delivered
    BOOL m_fEOS;

    BOOL m_fReady;	// in WAITING state, is this pin done?
    BOOL m_fEatKeys;	// key eating mode?
    BOOL m_fNeedDiscon;	// U pin needs to set discon bit

    CCritSec m_csReceive;
};


// Class for the big switch filter's Output pins.

class CSROutputPin : public CBaseOutputPin, IMediaSeeking
{
    friend class CSRInputAllocator;
    friend class CSRInputPin;
    friend class CSR;

public:

    // Constructor and destructor

    CSROutputPin(TCHAR *pObjName,
                   CSR *pTee,
                   HRESULT *phr,
                   LPCWSTR pPinName);
    ~CSROutputPin();

    DECLARE_IUNKNOWN

    // Reveals IMediaSeeking
    STDMETHODIMP NonDelegatingQueryInterface(REFIID riid, void ** ppv);

    // overridden to allow cyclic-looking graphs
    STDMETHODIMP QueryInternalConnections(IPin **apPin, ULONG *nPin);

    // Check that we can support an output type, checks against switch's MT
    HRESULT CheckMediaType(const CMediaType *pmt);

    // gets the switch media type
    HRESULT GetMediaType(int iPosition, CMediaType *pMediaType);

    // Negotiation to use our input pins allocator. Weird fancy allocator stuff
    HRESULT DecideAllocator(IMemInputPin *pPin, IMemAllocator **ppAlloc);

    // make sure the allocator has the biggest size of any of our input pins
    // and output pins
    HRESULT DecideBufferSize(IMemAllocator *pMemAllocator,
                              ALLOCATOR_PROPERTIES * ppropInputRequest);

    // Overriden to handle quality messages
    STDMETHODIMP Notify(IBaseFilter *pSender, Quality q);

    // IMediaSeeking
    STDMETHODIMP IsFormatSupported(const GUID * pFormat);
    STDMETHODIMP QueryPreferredFormat(GUID *pFormat);
    STDMETHODIMP SetTimeFormat(const GUID * pFormat);
    STDMETHODIMP IsUsingTimeFormat(const GUID * pFormat);
    STDMETHODIMP GetTimeFormat(GUID *pFormat);
    STDMETHODIMP GetDuration(LONGLONG *pDuration);
    STDMETHODIMP GetStopPosition(LONGLONG *pStop);
    STDMETHODIMP GetCurrentPosition(LONGLONG *pCurrent);
    STDMETHODIMP GetCapabilities( DWORD * pCapabilities );
    STDMETHODIMP CheckCapabilities( DWORD * pCapabilities );
    STDMETHODIMP ConvertTimeFormat(
	LONGLONG * pTarget, const GUID * pTargetFormat,
	LONGLONG    Source, const GUID * pSourceFormat );
    STDMETHODIMP SetPositions(
	LONGLONG * pCurrent,  DWORD CurrentFlags,
	LONGLONG * pStop,  DWORD StopFlags );
    STDMETHODIMP GetPositions( LONGLONG * pCurrent, LONGLONG * pStop );
    STDMETHODIMP GetAvailable( LONGLONG * pEarliest, LONGLONG * pLatest );
    STDMETHODIMP SetRate( double dRate);
    STDMETHODIMP GetRate( double * pdRate);
    STDMETHODIMP GetPreroll(LONGLONG *pPreroll);

protected:

    CSR *m_pSwitch;                  // Main filter object pointer
    BOOL m_fOwnAllocator;	     // using our own?
    int m_iOutpin;	             // which output pin are we?
};




// Class for the Smart Recompression Filter

class CSR
    : public CCritSec
    , public CBaseFilter
    , public IAMSmartRecompressor
    , public CPersistStream
    , public CAMSetErrorLog
    , public IAMOutputBuffering	// ??
{
    // Let the pins access our internal state
    friend class CSRInputPin;
    friend class CSROutputPin;
    friend class CSRInputAllocator;
    friend class CSRWorker;
    
protected:

    STDMETHODIMP CreateInputPins(long);
    STDMETHODIMP CreateOutputPins(long);
    HRESULT AllDone();

    CSRInputPin **m_pInput;
    CSROutputPin **m_pOutput;
    int m_cInputs;
    int m_cOutputs;
    BOOL m_bAcceptFirstCompressed;

    REFERENCE_TIME m_rtStop;
    double m_dFrameRate;

    AM_MEDIA_TYPE m_mtAccept;		// all pins only connect with this

    BOOL m_fEOS;	// we are all done

    REFERENCE_TIME m_rtLastSeek;	// last timeline time seeked to
    REFERENCE_TIME m_rtNewLastSeek;	// last timeline time seeked to

    BOOL m_fSeeking;	// inside a seek?
    BOOL m_fSpecialSeek;// we are seeking ourself

    int m_cbPrefix, m_cbAlign;	// each pin needs its allocator to do these
    LONG m_cbBuffer;		// 

    CMemAllocator *m_pPoolAllocator;  // pool of extra buffers

    BOOL m_fPreview;

    int  m_nOutputBuffering;	// IAMOutputBuffering

public:

    DECLARE_IUNKNOWN

    // Reveals IAMSmartRecompressor
    STDMETHODIMP NonDelegatingQueryInterface(REFIID riid, void ** ppv);

    CSR(TCHAR *pName,LPUNKNOWN pUnk,HRESULT *hr);
    ~CSR();

    CBasePin *GetPin(int n);
    int GetPinCount();

    // Function needed for the class factory
    static CUnknown * WINAPI CreateInstance(LPUNKNOWN pUnk, HRESULT *phr);

    STDMETHODIMP Pause();
    STDMETHODIMP Stop();

    // IAMSmartRecompressor goes here
    //
    STDMETHODIMP GetMediaType(AM_MEDIA_TYPE *);
    STDMETHODIMP SetMediaType(AM_MEDIA_TYPE *);
    STDMETHODIMP GetFrameRate(double *);
    STDMETHODIMP SetFrameRate(double);
    STDMETHODIMP SetPreviewMode(BOOL);
    STDMETHODIMP GetPreviewMode(BOOL *);
    STDMETHODIMP AcceptFirstCompressed( ) { m_bAcceptFirstCompressed = TRUE; return NOERROR; }

    // IAMOutputBuffering ???
    STDMETHODIMP GetOutputBuffering(int *);
    STDMETHODIMP SetOutputBuffering(int);

    // CPersistStream
    HRESULT WriteToStream(IStream *pStream);
    HRESULT ReadFromStream(IStream *pStream);
    STDMETHODIMP GetClassID(CLSID *pClsid);
    int SizeMax();

    // change state of state machine
    HRESULT CheckState();

    // which time is bigger, and by how much?
    int CompareTimes(REFERENCE_TIME, REFERENCE_TIME);

    // seek our own U pin to the next spot needed
    HRESULT SeekNextSegment();

    int m_myState;

    BOOL m_fThreadCanSeek;	// safe to seek ourself?
    CCritSec m_csState;		// changing the state machine
    CCritSec m_csThread;	// we seek ourself, and the app seeks us

    BOOL m_fNewSegOK;		// OK to send a new segment

};

#endif // __SR__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\stillvid\loadgif2.cpp ===
// !!! support transparent GIFs by controlling background colour (black or
//     random is what you get now)
// !!! support getting gif size and frame count with IMediaDet?
// !!! support just using some frames from the GIF by supporting MediaTimes?
// !!! backwards playback would be easy

#include <streams.h>
#include "loadgif.h"

//*X* 
CImgGif::CImgGif( HANDLE hFile) 
{
   m_hFile      =hFile;
   
   m_pList      =NULL;
   m_pListTail  =NULL; 

   m_gifinfo.pstack = NULL;
   m_gifinfo.table[0] = NULL;
   m_gifinfo.table[1] = NULL;
}

CImgGif::~CImgGif() 
{
   free(m_gifinfo.pstack);
   free(m_gifinfo.table[0]);
   free(m_gifinfo.table[1]);
    
   //delete the (possibly) circular link list
   if(m_pList != NULL)
   {
        LIST *p=m_pList->next;

        while(m_pList !=p && p != NULL)
        {
            LIST *p1 = p->next;
            delete [] p->pbImage;
            delete p;
            p = p1;
        }
           
	delete [] m_pList->pbImage;
        delete m_pList;

        m_pList=NULL;
        m_pListTail=NULL;
   }          
    

}

static int GetColorMode() { return 0; };

#ifndef DEBUG
#pragma optimize("t",on)
#endif

BOOL CImgGif::Read(unsigned char *buffer, DWORD len)
{
    DWORD lenout;
   
    ReadFile( m_hFile,
			buffer,				// pointer to buffer that receives daata
			len,		// Number of bytes to read
			&lenout,				// Munber of bytes read
			NULL);

    return (lenout == len);
}

long CImgGif::ReadColorMap(long number, RGBQUAD *pRGB)
{
    long i;
    unsigned char rgb[3];

    for (i = 0; i < number; ++i)
    {
        if (!Read(rgb, sizeof(rgb)))
        {
        	DbgLog((LOG_TRACE, 1, TEXT("bad gif colormap\n")));
            return (TRUE);
        }

	// !!! SUPERBLACK is reserved for the transparency key - don't allow
	// it to actually appear in the bitmap
	// Converting to 16 bit makes anything < 8 turn into 0
	if (rgb[0] < 8 && rgb[1] < 8 && rgb[2] < 8) {
	    rgb[0] = 8;
	    rgb[1] = 8;
	    rgb[2] = 8;
	}

        pRGB[i].rgbRed   = rgb[0];
        pRGB[i].rgbGreen = rgb[1];
        pRGB[i].rgbBlue  = rgb[2];
        pRGB[i].rgbReserved = 255; // opaque

    }
    return FALSE;
}
//*X****************************************************
//  Called by nextCode(), nextLWZ(), DoExtension(), ReadImage()
//  m_ modified:  m_gifinfo.ZeroDataBlock
//*X*****************************************************
long CImgGif::GetDataBlock(unsigned char *buf)
{
   unsigned char count;

   count = 0;
   if (!Read(&count, 1))
   {
        return -1;
   }
   m_gifinfo.ZeroDataBlock = count == 0;

   if ((count != 0) && (!Read(buf, count)))
   {
        return -1;
   }

   return ((long) count);
}

#define MIN_CODE_BITS 5
#define MIN_STACK_SIZE 64
#define MINIMUM_CODE_SIZE 2
//*X****************************************************
//  Called by:    ReadImage()
//  m_ modified:  m_gifinfo.*
//*X*****************************************************
BOOL CImgGif::initLWZ(long input_code_size)
{
   if(input_code_size < MINIMUM_CODE_SIZE)
     return FALSE;

   m_gifinfo.set_code_size  = input_code_size;
   m_gifinfo.code_size      = m_gifinfo.set_code_size + 1;
   m_gifinfo.clear_code     = 1 << m_gifinfo.set_code_size;
   m_gifinfo.end_code       = m_gifinfo.clear_code + 1;
   m_gifinfo.max_code_size  = 2 * m_gifinfo.clear_code;
   m_gifinfo.max_code       = m_gifinfo.clear_code + 2;

   m_gifinfo.curbit         = m_gifinfo.lastbit = 0;
   m_gifinfo.last_byte      = 2;
   m_gifinfo.get_done       = FALSE;

   m_gifinfo.return_clear = TRUE;
    
    if(input_code_size >= MIN_CODE_BITS)
        m_gifinfo.stacksize = ((1 << (input_code_size)) * 2);
    else
        m_gifinfo.stacksize = MIN_STACK_SIZE;

    if ( m_gifinfo.pstack != NULL )
        free( m_gifinfo.pstack );
    if ( m_gifinfo.table[0] != NULL  )
        free( m_gifinfo.table[0] );
    if ( m_gifinfo.table[1] != NULL  )
        free( m_gifinfo.table[1] );

    m_gifinfo.table[0] = 0;
    m_gifinfo.table[1] = 0;
    m_gifinfo.pstack = 0;

    m_gifinfo.pstack = (unsigned short *) malloc((m_gifinfo.stacksize)*sizeof(unsigned short));
    if(m_gifinfo.pstack == 0){
        goto ErrorExit;
    }    
    m_gifinfo.sp = m_gifinfo.pstack;

    // Initialize the two tables.
    m_gifinfo.tablesize = (m_gifinfo.max_code_size);

    m_gifinfo.table[0] = (unsigned short *) malloc((m_gifinfo.tablesize)*sizeof(unsigned short));
    m_gifinfo.table[1] = (unsigned short *) malloc((m_gifinfo.tablesize)*sizeof(unsigned short));
    if((m_gifinfo.table[0] == 0) || (m_gifinfo.table[1] == 0)){
        goto ErrorExit;
    }

    return TRUE;

   ErrorExit:
    if(m_gifinfo.pstack){
        free(m_gifinfo.pstack);
        m_gifinfo.pstack = 0;
    }

    if(m_gifinfo.table[0]){
        free(m_gifinfo.table[0]);
        m_gifinfo.table[0] = 0;
    }

    if(m_gifinfo.table[1]){
        free(m_gifinfo.table[1]);
        m_gifinfo.table[1] = 0;
    }

    return FALSE;
}
//*X****************************************************
//  Called by:    nextLWZ()
//  m_ modified:  m_gifinfo.return_clea
//  m_ depends:  m_gifinfo.buf[0],m_gifinfo.clear_code
//               m_gifinfo.return_clea,m_gifinfo.curbi
//              m_gifinfo.lastbit, m_gifinfo.get_done
//*X*****************************************************
long CImgGif::nextCode(long code_size)
{
   static const long maskTbl[16] =
   {
          0x0000, 0x0001, 0x0003, 0x0007,
          0x000f, 0x001f, 0x003f, 0x007f,
          0x00ff, 0x01ff, 0x03ff, 0x07ff,
          0x0fff, 0x1fff, 0x3fff, 0x7fff,
   };
   long i, j, ret, end;
   unsigned char *buf = &m_gifinfo.buf[0];

   if (m_gifinfo.return_clear)
   {
        m_gifinfo.return_clear = FALSE;
        return m_gifinfo.clear_code;
   }

   end = m_gifinfo.curbit + code_size;

   if (end >= m_gifinfo.lastbit)
   {
        long count;

        if (m_gifinfo.get_done)
        {
            return -1;
        }
        buf[0] = buf[m_gifinfo.last_byte - 2];
        buf[1] = buf[m_gifinfo.last_byte - 1];

        if ((count = GetDataBlock(&buf[2])) == 0)
            m_gifinfo.get_done = TRUE;
        if (count < 0)
        {
            return -1;
        }
        m_gifinfo.last_byte = 2 + count;
        m_gifinfo.curbit = (m_gifinfo.curbit - m_gifinfo.lastbit) + 16;
        m_gifinfo.lastbit = (2 + count) * 8;

        end = m_gifinfo.curbit + code_size;

        // Okay, bug 30784 time. It's possible that we only got 1
        // measly byte in the last data block. Rare, but it does happen.
        // In that case, the additional byte may still not supply us with
        // enough bits for the next code, so, as Mars Needs Women, IE
        // Needs Data.
        if ( end >= m_gifinfo.lastbit && !m_gifinfo.get_done )
        {
        // protect ourselve from the ( theoretically impossible )
        // case where between the last data block, the 2 bytes from
        // the block preceding that, and the potential 0xFF bytes in
        // the next block, we overflow the buffer.
        // Since count should always be 1,
            ASSERT( count == 1 );
        // there should be enough room in the buffer, so long as someone
        // doesn't shrink it.
            if ( count + 0x101 >= sizeof( m_gifinfo.buf ) )
            {
                ASSERT ( FALSE ); // 
                return -1;
            }

            if ((count = GetDataBlock(&buf[2 + count])) == 0)
                m_gifinfo.get_done = TRUE;
            if (count < 0)
            {
              return -1;
            }
            m_gifinfo.last_byte += count;
            m_gifinfo.lastbit = m_gifinfo.last_byte * 8;

            end = m_gifinfo.curbit + code_size;
        }
   }

   j = end / 8;
   i = m_gifinfo.curbit / 8;

   if (i == j)
        ret = buf[i];
   else if (i + 1 == j)
        ret = buf[i] | (((long) buf[i + 1]) << 8);
   else
        ret = buf[i] | (((long) buf[i + 1]) << 8) | (((long) buf[i + 2]) << 16);

   ret = (ret >> (m_gifinfo.curbit % 8)) & maskTbl[code_size];

   m_gifinfo.curbit += code_size;

   return ret;
}

//*X****************************************************
//  Called by:    nextLWZ()
//  m_ modified:  m_gifinfo.*
//  m_ depends:  m_gifinfo.*
//*X*****************************************************
// Grows the stack and returns the top of the stack.
unsigned short * CImgGif::growStack()
{
    long index;
    unsigned short *lp;
    
    if (m_gifinfo.stacksize >= MAX_STACK_SIZE) return 0;

    index = (long)(m_gifinfo.sp - m_gifinfo.pstack);
    lp = (unsigned short *)realloc(m_gifinfo.pstack, (m_gifinfo.stacksize)*2*sizeof(unsigned short));
    if(lp == 0)
        return 0;
        
    m_gifinfo.pstack = lp;
    m_gifinfo.sp = &(m_gifinfo.pstack[index]);
    m_gifinfo.stacksize = (m_gifinfo.stacksize)*2;
    lp = &(m_gifinfo.pstack[m_gifinfo.stacksize]);
    return lp;
}

//*X****************************************************
//  Called by:    nextLWZ()
//  m_ modified:  m_gifinfo.table
//  m_ depends:  m_gifinfo.table
//*X*****************************************************
BOOL CImgGif::growTables()
{
    unsigned short *lp;

    lp = (unsigned short *) realloc(m_gifinfo.table[0], (m_gifinfo.max_code_size)*sizeof(unsigned short));
    if(lp == 0){
        return FALSE; 
    }
    m_gifinfo.table[0] = lp;
    
    lp = (unsigned short *) realloc(m_gifinfo.table[1], (m_gifinfo.max_code_size)*sizeof(unsigned short));
    if(lp == 0){
        return FALSE; 
    }
    m_gifinfo.table[1] = lp;

    return TRUE;

}
//*X****************************************************
//  Called by:    ReadImage()
//  m_ modified:  
//  m_ depends:  m_gifinfo.sp, m_gifinfo.pdysvk
//  Call:        nextLWZ()
//*X*****************************************************
inline long CImgGif::readLWZ()
{
   return((m_gifinfo.sp > m_gifinfo.pstack) ? *--(m_gifinfo.sp) : nextLWZ());
}

//*X****************************************************
//  Called by:    readLWZ() which is called by ReadImage() which is called by ReadGIFMaster()
//  m_ modified:  
//  m_ depends:  m_gifinfo.*
//  Call:        readCode(), growTables()
//*X*****************************************************
#define CODE_MASK 0xffff
long CImgGif::nextLWZ()
{
    long code, incode;
    unsigned short usi;
    unsigned short *table0 = m_gifinfo.table[0];
    unsigned short *table1 = m_gifinfo.table[1];
    unsigned short *pstacktop = &(m_gifinfo.pstack[m_gifinfo.stacksize]);

    while ((code = nextCode(m_gifinfo.code_size)) >= 0)
    {
        if (code == m_gifinfo.clear_code)
        {
            /* corrupt GIFs can make this happen */
            if (m_gifinfo.clear_code >= (1 << MAX_LWZ_BITS))
            {
                return -2;
            }

            
            m_gifinfo.code_size = m_gifinfo.set_code_size + 1;
            m_gifinfo.max_code_size = 2 * m_gifinfo.clear_code;
            m_gifinfo.max_code = m_gifinfo.clear_code + 2;

            if(!growTables())
                return -2;
                    
            table0 = m_gifinfo.table[0];
            table1 = m_gifinfo.table[1];

            m_gifinfo.tablesize = m_gifinfo.max_code_size;


            for (usi = 0; usi < m_gifinfo.clear_code; ++usi)
            {
                table1[usi] = usi;
            }
            memset(table0,0,sizeof(unsigned short )*(m_gifinfo.tablesize));
            memset(&table1[m_gifinfo.clear_code],0,sizeof(unsigned short)*((m_gifinfo.tablesize)-m_gifinfo.clear_code));
            m_gifinfo.sp = m_gifinfo.pstack;
            do
            {
                    m_gifinfo.firstcode = m_gifinfo.oldcode = nextCode(m_gifinfo.code_size);
            }
            while (m_gifinfo.firstcode == m_gifinfo.clear_code);
            return m_gifinfo.firstcode;
        }

        if (code == m_gifinfo.end_code)
        {
            long count;
            unsigned char buf[260];

            if (m_gifinfo.ZeroDataBlock)
            {
                    return -2;
            }

            while ((count = GetDataBlock(buf)) > 0)
                    ;

            if (count != 0)
            return -2;
        }

        incode = code;

        if (code >= m_gifinfo.max_code)
        {
            if (m_gifinfo.sp >= pstacktop)
            {
                pstacktop = growStack();
                if(pstacktop == 0)
                    return -2;
            }
            *(m_gifinfo.sp)++ = (unsigned short)((CODE_MASK ) & (m_gifinfo.firstcode));
            code = m_gifinfo.oldcode;
        }

        while (code >= m_gifinfo.clear_code)
        {
            if (m_gifinfo.sp >= pstacktop)
            {
                pstacktop = growStack();
                if(pstacktop == 0)
                    return -2;
            }
            *(m_gifinfo.sp)++ = table1[code];
            if (code == (long)(table0[code]))
            {
                return (code);
            }
            code = (long)(table0[code]);
        }

        if (m_gifinfo.sp >= pstacktop){
            pstacktop = growStack();
            if(pstacktop == 0)
                return -2;
        }

        m_gifinfo.firstcode = (long)table1[code];
        *(m_gifinfo.sp)++ = table1[code];

        if ((code = m_gifinfo.max_code) < (1 << MAX_LWZ_BITS))
        {
            table0[code] = (unsigned short)((m_gifinfo.oldcode) & CODE_MASK);
            table1[code] = (unsigned short)((m_gifinfo.firstcode) & CODE_MASK);
            ++m_gifinfo.max_code;
            if ((m_gifinfo.max_code >= m_gifinfo.max_code_size) && (m_gifinfo.max_code_size < ((1 << MAX_LWZ_BITS))))
            {
                m_gifinfo.max_code_size *= 2;
                ++m_gifinfo.code_size;
                if(!growTables())
                    return -2;
       
                table0 = m_gifinfo.table[0];
                table1 = m_gifinfo.table[1];

                // Tables have been reallocated to the correct size but initialization
                // still remains to be done. This initialization is different from
                // the first time initialization of these tables.
                memset(&(table0[m_gifinfo.tablesize]),0,
                    sizeof(unsigned short )*(m_gifinfo.max_code_size - m_gifinfo.tablesize));

                memset(&(table1[m_gifinfo.tablesize]),0,
                    sizeof(unsigned short )*(m_gifinfo.max_code_size - m_gifinfo.tablesize));

                m_gifinfo.tablesize = (m_gifinfo.max_code_size);
            }
        }

        m_gifinfo.oldcode = incode;

        if (m_gifinfo.sp > m_gifinfo.pstack)
            return ((long)(*--(m_gifinfo.sp)));
    }
    return code;
}

#ifndef DEBUG
// Return to default optimization flags
#pragma optimize("",on)
#endif

//*X****************************************************
//  Called by:    ReadGIFMaster()
//  m_ modified:  
//  m_ depends:  
//  Call: GetDataBlack(), initLWZ()
//*X*****************************************************
//
// This function will fill pbImage with a 32 bit RGB decoding of the GIF.
// left, top, width, height are in pixels, stride is in bytes
//
HRESULT CImgGif::ReadImage(long w, long h, long left, long top, long width, long height, long stride, int trans, BOOL fInterlace, BOOL fGIFFrame, RGBQUAD *prgb, PBYTE pbImage)
{
    unsigned char *dp, c;
    long v;
    long xpos = 0, ypos = 0, pass = 0;
    unsigned char *image;
    // long padlen = ((len + 3) / 4) * 4;
    DWORD cbImage = 0;
    char buf[256]; // need a buffer to read trailing blocks (up to terminator)

    /*
       ** Initialize the Compression routines
    */
    if (!Read(&c, 1))
    {
        return (NULL);
    }

    /*
       **  If this is an "uninteresting picture" ignore it.
    */
    // !!! height is not the image height, it's smaller
    cbImage = stride * height * sizeof(char);

    if (c == 1)
    {
        // Netscape seems to field these bogus GIFs by filling treating them
        // as transparent. While not the optimal way to simulate this effect,
        // we'll fake it by pushing the initial code size up to a safe value,
        // consuming the input, and returning a buffer full of the transparent
        // color or zero, if no transparency is indicated.
        if (initLWZ(MINIMUM_CODE_SIZE))
            while (readLWZ() >= 0);
        else {
             DbgLog((LOG_TRACE, 1, TEXT("GIF: failed LZW decode.\n")));
             //RaiseException_UserError(E_FAIL, IDS_ERR_CORRUPT_FILE,_szFileName);
        }

        if (m_gifinfo.Gif89.transparent != -1)
            FillMemory(pbImage, cbImage, (unsigned char)m_gifinfo.Gif89.transparent);
        else // fall back on the background color 
            FillMemory(pbImage, cbImage, 0);
                
        return NOERROR;
    }
    else if (initLWZ(c) == FALSE)
    {
        DbgLog((LOG_TRACE, 1, TEXT("GIF: failed LZW decode.\n")));
        //RaiseException_UserError(E_FAIL, IDS_ERR_CORRUPT_FILE,_szFileName);
        return NULL;
    }

    // go to the first pixel we care about
    pbImage += stride * top + left * 4;

    if (fInterlace)
    {
        //*X* image is interlaced
        long i;
        long pass = 0, step = 8;

        if (!fGIFFrame && (height > 4))
            m_fInterleaved = TRUE;

        for (i = 0; i < height; i++)
        {
            dp = &pbImage[stride * ((height-1) - ypos)];
            for (xpos = 0; xpos < width; xpos++)
            {
                if ((v = readLWZ()) < 0)
                    goto abort;

                // the GIF may be asking us to fill in bits off screen that
                // will fault, but we still need to read them from the stream
                if (left + xpos < w && top + (height - 1) - ypos < h) {
		    if (v != trans)
                        *((RGBQUAD *)dp) = prgb[v];
		    dp+=4;
                }
            }
            ypos += step;
            while (ypos >= height)
            {
                if (pass++ > 0)
                    step /= 2;
                ypos = step / 2;
            }
            if (!fGIFFrame)
            {
                m_yLogRow = i;

            }
        }

        if (!fGIFFrame && height <= 4)
        {
            m_yLogRow = height-1;
        }
    }
    else
    {

        if (!fGIFFrame) 
            m_yLogRow = -1;

        for (ypos = height-1; ypos >= 0; ypos--)
        {
            dp = &pbImage[stride * ypos];
            for (xpos = 0; xpos < width; xpos++)
            {
                if ((v = readLWZ()) < 0)
                    goto abort;

                // the GIF may be asking us to fill in bits off screen that
                // will fault, but we still need to read them from the stream
                if (left + xpos < w && top + ypos < h) {
		    if (v != trans)
                        *((RGBQUAD *)dp) = prgb[v];
		    dp+=4;
                }

            }
            if (!fGIFFrame)
            {
                m_yLogRow++;
            }
        }

    }

    // consume blocks up to image block terminator so we can proceed to the next image
    while (GetDataBlock((unsigned char *) buf) > 0)
               ;

    return NOERROR;

abort:
    return ERROR;
}


// This will zero out a sub rect of 32bpp pbImage, required for dispose method 2
//
HRESULT CImgGif::Dispose2(LPBYTE pbImage, long stride, long Left, long Top, long Width, long Height)
{
    for (long z = Top; z < Top + Height; z++) {
    	LPDWORD pdw = (LPDWORD)(pbImage + z * stride + Left * 4);
	for (long y = 0; y < Width; y++) {
    	    *pdw++ = 0;
	}
    }
    return S_OK;
}


// This will copy a sub rect from one 32bpp image to another, required for
// dispose method 3
//
HRESULT CImgGif::Dispose3(LPBYTE pbImage, LPBYTE pbSrc, long stride, long Left, long Top, long Width, long Height)
{
    for (long z = Top; z < Top + Height; z++) {
    	LPDWORD pdwDest = (LPDWORD)(pbImage + z * stride + Left * 4);
    	LPDWORD pdwSrc = (LPDWORD)(pbSrc + z * stride + Left * 4);
	for (long y = 0; y < Width; y++) {
    	    *pdwDest++ = *pdwSrc++;
	}
    }
    return S_OK;
}


//*X****************************************************
//  Called by:    ReadGIFMaster()
//  m_ modified:  
//  m_ depends:  
//  Call: GetDataBlack(), memcmp(), initLWZ()
//  We should consume all extension bits, but do nothing about it.
//*X*****************************************************
long CImgGif::DoExtension(long label)
{
    unsigned char buf[256];
    int count;

    switch (label)
    {
        case 0x01:              /* Plain Text Extension */
            break;
        case 0xff:              /* Application Extension */
            // Is it the Netscape looping extension
            count = GetDataBlock((unsigned char *) buf);
            if (count >= 11)
            {
                char *szNSExt = "NETSCAPE2.0";

                if ( memcmp( buf, szNSExt, strlen( szNSExt ) ) == 0 )
                { // if it has their signature, get the data subblock with the iter count
                    count = GetDataBlock((unsigned char *) buf);
                }
            }
            //*X* consume all bits
            while (GetDataBlock((unsigned char *) buf) > 0)
                ;
            return FALSE;
            break;
        case 0xfe:              /* Comment Extension */
            while (GetDataBlock((unsigned char *) buf) > 0)
            {
                DbgLog((LOG_TRACE, 1, TEXT("GIF comment: %s\n"), buf));
            }
            return FALSE;
        case 0xf9:              /* Graphic Control Extension */
            count = GetDataBlock((unsigned char *) buf);
            if (count >= 3)
            {
                m_gifinfo.Gif89.disposal = (buf[0] >> 2) & 0x7;
                DbgLog((LOG_TRACE,3,TEXT("disposal=%d"),
					(int)m_gifinfo.Gif89.disposal));
                m_gifinfo.Gif89.inputFlag = (buf[0] >> 1) & 0x1;
                m_gifinfo.Gif89.delayTime = LM_to_uint(buf[1], buf[2]);
                if ((buf[0] & 0x1) != 0) {
                    m_gifinfo.Gif89.transparent = buf[3];
                    DbgLog((LOG_TRACE,3,TEXT("transparency=%d"), (int)buf[3]));
                } else {
                    m_gifinfo.Gif89.transparent = -1;
		}
            }
            DbgLog((LOG_TRACE,3,TEXT("count=%d (%d,%d,%d,%d)"), count,
				(int)buf[0],
				(int)buf[1],
				(int)buf[2],
				(int)buf[3]));
            while ((count = GetDataBlock((unsigned char *) buf)) > 0)
                DbgLog((LOG_TRACE,3,TEXT("count=%d"), count));
                ;
            return FALSE;
        default:
            DbgLog((LOG_TRACE,3,TEXT("UNKNOWN BLOCK")));
            break;
    }

    while ((count = GetDataBlock((unsigned char *) buf)) > 0)
        DbgLog((LOG_TRACE,3,TEXT("count=%d"), count));
        ;

    return FALSE;
}

//*X****************************************************
//  Called by:    ReadGIFMaster()
//  Call:
//*X*****************************************************
BOOL IsGifHdr(BYTE * pb)
{
    return(pb[0] == 'G' && pb[1] == 'I' && pb[2] == 'F'
        && pb[3] == '8' && (pb[4] == '7' || pb[4] == '9') && pb[5] == 'a');
}

//*X****************************************************
//  Called by:    BIT_Make_DIB_PAL_Header(), BIT_Make_DIB_RGB_Header_Screen()
////*X*****************************************************
void BuildBitMapInfoHeader(LPBITMAPINFOHEADER lpbi
                            , int xsize
                            , int ysize
                            , long BitCount
                            , WORD biClrUsed )
{
    lpbi->biSize = sizeof(BITMAPINFOHEADER);
    lpbi->biWidth = xsize;
    lpbi->biHeight = ysize;
    lpbi->biPlanes = 1;
    lpbi->biBitCount = (WORD)BitCount;
    lpbi->biCompression = BI_RGB;         /* no compression */
    lpbi->biSizeImage = 0;                /* not needed when not compressed */
    lpbi->biXPelsPerMeter = 0;
    lpbi->biYPelsPerMeter = 0;
    lpbi->biClrUsed = biClrUsed;
    lpbi->biClrImportant = 0;
}
//*X****************************************************
//  Called by:  
//  m_ modified:  ,
//  m_ depends:  
//  Call: ReadColorMap(), Read(),IsGifHdr(),
//*X*****************************************************
HRESULT CImgGif::ReadGIFMaster( VIDEOINFO *pvi)
{
    CheckPointer(pvi, E_POINTER);

    unsigned char buf[16];
    unsigned char c;
    bool useGlobalColormap;
    long imageNumber = 1;   //*X* Const. 
    unsigned char *image = NULL;
    unsigned long i;
    long NumColors; 
    WORD bitCount, gBitCount;
    HRESULT hr=ERROR;
    // to store the GIF global palette and each local frame palette
    RGBQUAD rgbGlobal[256];
    RGBQUAD rgbLocal[256];
    int disposal = 1;  // default to no disposal
    long oldLeft, oldTop, oldWidth, oldHeight;
    LIST *pListOldTail = NULL;
    ASSERT(m_pList == NULL);
    ASSERT(m_pListTail == NULL);

    LPBITMAPINFOHEADER lpbi = HEADER(pvi);

        //*X* read to get media type, and init m_gifinfo, m_GifScreen

        //*X* i add
        m_dwGIFVer=dwGIFVerUnknown;
    
        //*X* m_gifinfo is CimgGif's private var which holds all gif infomation
        m_gifinfo.ZeroDataBlock = 0;

        /*
        * Initialize GIF89 extensions
        */
        m_gifinfo.Gif89.transparent = -1;
        m_gifinfo.Gif89.delayTime   = 10;
        m_gifinfo.Gif89.inputFlag   = -1;
        m_gifinfo.Gif89.disposal    = disposal;
        m_gifinfo.lGifLoc           = 0;


        //*X* read len(6) characters into buffer 
        if (!Read(buf, 6))
        {
            DbgLog((LOG_TRACE, 1, TEXT("GIF: error reading magic number\n")));
            goto exitPoint;
        }

        //*X* check whether it is a gif file GIF87/9a
        if (!IsGifHdr(buf)) {
            DbgLog((LOG_TRACE, 1, TEXT("GIF: Malformed header\n")));
            goto exitPoint;
        }


        //*X* 
        m_dwGIFVer = (buf[4] == '7') ? dwGIFVer87a : dwGIFVer89a;

        //*X* read len(7) characters into buffer 
        if (!Read(buf, 7))
        {
            DbgLog((LOG_TRACE, 1, TEXT("GIF: failed to read screen descriptor\n")));
            //RaiseException_UserError(E_FAIL, IDS_ERR_CORRUPT_FILE,_szFileName);
            goto exitPoint;
        }
    
        //*X* get video config
        m_GifScreen.Width = LM_to_uint(buf[0], buf[1]);
        m_GifScreen.Height = LM_to_uint(buf[2], buf[3]);

        m_GifScreen.NumColors = 2 << (buf[4] & 0x07);
        // gBitCount   =(buf[4] & 0x07)+1;
	gBitCount = 8;
        //m_GifScreen.ColorResolution = (((buf[4] & 0x70) >> 3) + 1);
        m_GifScreen.Background = buf[5];
//!!!
        m_GifScreen.AspectRatio = buf[6];

        DbgLog((LOG_TRACE, 2, TEXT("GIF FILE: (%d,%d) %d\n"),
			(int)m_GifScreen.Width, (int)m_GifScreen.Height,
			(int)buf[4]));
    
        //*X* color map in this GIF file
        if (BitSet(buf[4], LOCALCOLORMAP))
        {      
             /* Global Colormap */
            int scale = 65536 / MAXCOLORMAPSIZE;

            if (ReadColorMap(m_GifScreen.NumColors, rgbGlobal))
            {
                DbgLog((LOG_TRACE, 1, TEXT("error reading global colormap\n")));
                goto exitPoint;
            }
           
        }


        //*X* check pixel Aspect Ratio
        if (m_GifScreen.AspectRatio != 0 && m_GifScreen.AspectRatio != 49)
        {
            float r;
            r = ((float) (m_GifScreen.AspectRatio) + (float) 15.0) / (float) 64.0;
            DbgLog((LOG_TRACE, 1, TEXT("GIF Warning: non-square pixels!\n")));
        }
    

    while(1)
    {
        if (!Read(&c, 1))
        {
            DbgLog((LOG_TRACE, 1, TEXT("EOF / read error on image data\n")));
            //*X*  RaiseException_UserError(E_FAIL, IDS_ERR_CORRUPT_FILE,_szFileName);
            goto exitPoint;
        }
        
        //*X* search for ;-> terminator !->extension  ,->not a valid start charactor
        if (c == ';')
        {   /* GIF terminator */
            if (m_imageCount < imageNumber)
            {
                DbgLog((LOG_TRACE, 1, TEXT("No images found in file\n")));
                //RaiseException_UserError(E_FAIL, IDS_ERR_DECODER_FAILED,_szFileName);
                goto exitPoint;
             }
        }

        if (c == '!')
        {     /* Extension */
              if (!Read(&c, 1))
              {
                DbgLog((LOG_TRACE, 1, TEXT("EOF / read error on extension function code\n")));
                //RaiseException_UserError(E_FAIL, IDS_ERR_CORRUPT_FILE,_szFileName);
                goto exitPoint;
               }
		// this will update the disposal. remember what it used to be
		// (the frame we are reading is affected by the PREVIOUS 
		// disposal)
               disposal = m_gifinfo.Gif89.disposal;
               DoExtension(c);
               continue;
        }

        if (c != ',')
        {    /* Not a valid start character */
            goto exitPoint;
        }

        ++m_imageCount;

        //*X* read another 9 charactor
        if (!Read(buf, 9))
        {
            DbgLog((LOG_TRACE, 1, TEXT("couldn't read left/top/width/height\n")));
            goto exitPoint;
        }
        // Use the GIF's main palette, not a special palette for this frame
        useGlobalColormap = !BitSet(buf[8], LOCALCOLORMAP);

	// if this frame has its own palette, how many colors?
        NumColors = 1 << ((buf[8] & 0x07) + 1);
        //bitCount =(buf[8] & 0x07)+1;
	bitCount = 8;

        /*
         * We only want to set width and height for the imageNumber
         * we are requesting.
         */
        //if (imageCount == imageNumber)  //*X* imageNumber is set to 1
        if (lpbi!=NULL)  
        {
           // Replicate some of Netscape's special cases:
           // Don't use the logical screen if it's a GIF87a and the topLeft of the first image is at the origin.
           // Don't use the logical screen if the first image spills out of the logical screen.
           // These are artifacts of primitive authoring tools falling into the hands of hapless users.
           RECT    rectImage;  // rect defining bounds of GIF
           //RECT    rectLS;     // rect defining bounds of GIF logical screen.
           //RECT    rectSect;   // intersection of image an logical screen
           //BOOL    fNoSpill;   // True if the image doesn't spill out of the logical screen
           //BOOL    fGoofy87a;  // TRUE if its one of the 87a pathologies that Netscape special cases

           rectImage.left = LM_to_uint(buf[0], buf[1]);
           rectImage.top = LM_to_uint(buf[2], buf[3]);
           rectImage.right = rectImage.left + LM_to_uint(buf[4], buf[5]);
           rectImage.bottom = rectImage.top + LM_to_uint(buf[6], buf[7]);

           DbgLog((LOG_TRACE,3,TEXT("(%d,%d,%d,%d) %d"),
			(int)rectImage.left,
			(int)rectImage.top,
			(int)(rectImage.right - rectImage.left),
			(int)(rectImage.bottom - rectImage.top),
			(int)buf[8]));

// this screws up real GIFS I tested with - not shown to help anything
#if 0
           rectLS.left = rectLS.top = 0;
           rectLS.right = m_GifScreen.Width;
           rectLS.bottom = m_GifScreen.Height;

           IntersectRect( &rectSect, &rectImage, &rectLS );

           fNoSpill = EqualRect( &rectImage, &rectSect );
           fGoofy87a = FALSE;

           //*X* replay last line
           if (m_dwGIFVer == dwGIFVer87a)
           {
               // netscape ignores the logical screen if the image is flush against
               // either the upper left or lower right corner
               fGoofy87a = (rectImage.top == 0 && rectImage.left == 0) ||
                       (rectImage.bottom == rectLS.bottom &&
                        rectImage.right == rectLS.right);
           }   

           if (!fGoofy87a && fNoSpill)
           {
               m_xWidth = m_GifScreen.Width;  
               m_yHeight = m_GifScreen.Height;
           }
           else
           {
               // Something is amiss. Fall back to the image's dimensions.

               // If the sizes match, but the image is offset, or we're ignoring
               // the logical screen cuz it's a goofy 87a, then pull it back to 
               // to the origin
               if ((LM_to_uint(buf[4], buf[5]) == m_GifScreen.Width &&
                 LM_to_uint(buf[6], buf[7]) == m_GifScreen.Height) ||
                fGoofy87a)
               {
                   buf[0] = buf[1] = 0; // left corner to zero
                   buf[2] = buf[3] = 0; // top to zero.
               }

               m_xWidth = LM_to_uint(buf[4], buf[5]);
               m_yHeight = LM_to_uint(buf[6], buf[7]);
           }
#endif

            m_ITrans = m_gifinfo.Gif89.transparent;
        }
        
        // this frame has its own palette
        if (!useGlobalColormap)
        {
            if (ReadColorMap(NumColors, rgbLocal)) {
                DbgLog((LOG_TRACE, 1, TEXT("error reading local colormap\n")));
                goto exitPoint;
            }
        }

	// make a 32 bit per pixel area
        long w = m_GifScreen.Width;
        long stride = w * 4;	// 4 bytes per pixel
        stride = ((stride + 3) / 4) * 4;
        long h = m_GifScreen.Height;
        long dwBits  = stride * h;

	// this particular frame's placement
	long left = LM_to_uint(buf[0], buf[1]);
	long top = LM_to_uint(buf[2], buf[3]);
	long width = LM_to_uint(buf[4], buf[5]);
	long height = LM_to_uint(buf[6], buf[7]);
	// correct for upside downness
	top = h - (top + height);

        PBYTE pbImage = new BYTE[dwBits];
	if (pbImage == NULL) 
	    return E_OUTOFMEMORY;

	// Disposal mode 0/1 means DO NOT DISPOSE.  Any transparency in the next
	// frame will see right through to what was in this frame
	// Disposal mode 2 means DISPOSE of this frame when you're done, and 
	// write BACKGROUND colour in the rectangle
	// Disposal mode 3 means DISPOSE of this frame by putting everything
	// back the way it was in the PREVIOUS FRAME
	//

	// something in this frame will be transparent - either because this
	// image has a transparency colour, or it does not fill the entire 
	// canvas
        BOOL fSeeThru = m_ITrans != -1 || height < h || width < w;

	ASSERT(disposal < 4);	// not yet invented
        DbgLog((LOG_TRACE,3,TEXT("Using previous disposal=%d"), disposal));

	// Disposal 0 or 1 - if any pixels will be transparent, init with
	// previous frames bits
	if (m_pList && disposal < 2 && fSeeThru) {
	    CopyMemory(pbImage, m_pListTail->pbImage, dwBits);

	// Disposal 2 - dispose of last frame's rect with key colour
	} else if (m_pList && disposal == 2 && fSeeThru) {
	    // init with the previous frame outside of the area being disposed
	    if (oldWidth < w || oldHeight < h) {
	        CopyMemory(pbImage, m_pListTail->pbImage, dwBits);
	    }
	    // now dispose of the last frame's portion
	    Dispose2(pbImage, stride, oldLeft, oldTop, oldWidth, oldHeight);

	// Disposal 3 - dispose of last frame's rect with 2nd to last frame data
	// 		(if there is one)
	} else if (pListOldTail && disposal == 3 && fSeeThru) {
	    // init with the previous frame outside of the area being disposed
	    if (oldWidth < w || oldHeight < h) {
	        CopyMemory(pbImage, m_pListTail->pbImage, dwBits);
	    }
	    // now dispose of the last frame by replacing with 2nd to last frame
	    Dispose3(pbImage, pListOldTail->pbImage, stride, oldLeft,
						oldTop, oldWidth, oldHeight);

	// else init with key color if anything transparent
	} else if (fSeeThru) {
	    ZeroMemory(pbImage, dwBits);    // init to key color (superblack)
	}
        
        hr = ReadImage(w, h, left, top, width, height,	// all in pixels
				stride,			// stride in bytes
				m_ITrans, 		// transparency
                                BitSet(buf[8], INTERLACE),
                                m_imageCount != imageNumber, 
				// special palette for this frame?
				useGlobalColormap ? rgbGlobal : rgbLocal,
                                pbImage);

	// remember the frame before last
	pListOldTail = m_pListTail;

        if(m_pList==NULL)
        {
            m_pList=new LIST;
            m_pList->pbImage=pbImage;
	    // remember the duration for this frame of the animated GIF
            m_pList->delayTime=m_gifinfo.Gif89.delayTime;
	    if (m_pList->delayTime < 5)
		m_pList->delayTime = 10;	// IE does this so I better too
            DbgLog((LOG_TRACE,3,TEXT("GIF delay=%ld"), m_pList->delayTime));
	    m_pList->next = NULL;
            m_pListTail=m_pList;
        }
        else
        {
            m_pListTail->next=new LIST;
            m_pListTail=m_pListTail->next;
            m_pListTail->pbImage=pbImage;
	    // remember the duration for this frame of the animated GIF
            m_pListTail->delayTime=m_gifinfo.Gif89.delayTime;
	    if (m_pListTail->delayTime < 5)
		m_pListTail->delayTime = 10;	// IE does this so I better too
            DbgLog((LOG_TRACE,3,TEXT("GIF delay=%ld"), m_pListTail->delayTime));
	    m_pListTail->next = NULL;
        }

	// there may not be a new duration on each frame... just keep the
	// delay time and disposal variables as they are in case they aren't
	// set for the next frame

        // sanity check the numbers, before remembering them or we'll fault.
        // The above code needed to see them as they were, without being fixed.
        if (left + width > w)
            width = w - left;
        if (top + height > h)
            height = h - top;

	// the area covered by this last frame
	oldTop = top;
	oldLeft = left;
	oldWidth = width;
	oldHeight = height;
    }

    //*X* make new media format

exitPoint:
    if(m_pList!=NULL) {
	// our media type is a 32 bit type
        BuildBitMapInfoHeader(lpbi, m_GifScreen.Width, m_GifScreen.Height,
								32, 0);
    }                   

    return hr;
}

/*X* 
    open gif file to get the mediatype
*X*/
HRESULT CImgGif::OpenGIFFile( LIST **ppList, CMediaType *pmt)
{
    ASSERT( (ppList!=NULL) );

    //*X* open an new GIF file, set m_imageCount to 0
    m_imageCount=0;

    //make media type
    VIDEOINFO *pvi = (VIDEOINFO *) pmt->AllocFormatBuffer(sizeof(VIDEOINFO));
    if (NULL == pvi) 
	    return(E_OUTOFMEMORY);
    ZeroMemory(pvi, sizeof(VIDEOINFO));

    LPBITMAPINFOHEADER lpbi = HEADER(pvi);

    //read the first page, return the format we're sending.
    HRESULT hr=ReadGIFMaster(pvi);

    // not possible?
    if (lpbi->biCompression > BI_BITFIELDS)
	    return E_INVALIDARG;

    pmt->SetType(&MEDIATYPE_Video);

    // we always produce 32 bit at the moment, but...
    switch (lpbi->biBitCount)
    {
        case 32:
	        pmt->SetSubtype(&MEDIASUBTYPE_ARGB32);
	        break;
        case 24:
		ASSERT(FALSE);
	        pmt->SetSubtype(&MEDIASUBTYPE_RGB24);
	        break;
        case 16:
		ASSERT(FALSE);
	        if (lpbi->biCompression == BI_RGB)
	            pmt->SetSubtype(&MEDIASUBTYPE_RGB555);
	        else {
	            DWORD *p = (DWORD *)(lpbi + 1);
	            if (*p == 0x7c00 && *(p+1) == 0x03e0 && *(p+2) == 0x001f)
    	            pmt->SetSubtype(&MEDIASUBTYPE_RGB555);
	            else if (*p == 0xf800 && *(p+1) == 0x07e0 && *(p+2) == 0x001f)
	                pmt->SetSubtype(&MEDIASUBTYPE_RGB565);
	            else
		            return E_INVALIDARG;
	        }
	        break;
        case 8:
		ASSERT(FALSE);
	        if (lpbi->biCompression == BI_RLE8) {
	            FOURCCMap fcc = BI_RLE8;
	            pmt->SetSubtype(&fcc);
	        } else
	            pmt->SetSubtype(&MEDIASUBTYPE_RGB8);

	        break;
        case 4:
		ASSERT(FALSE);
	        if (lpbi->biCompression == BI_RLE4) {
	            FOURCCMap fcc = BI_RLE4;
	            pmt->SetSubtype(&fcc);
	        } else
	        pmt->SetSubtype(&MEDIASUBTYPE_RGB4);
	        break;
        case 1:
		ASSERT(FALSE);
	        pmt->SetSubtype(&MEDIASUBTYPE_RGB1);
	        break;
        default:
		ASSERT(FALSE);
	        return E_UNEXPECTED;
	        break;
    }
    pmt->SetFormatType(&FORMAT_VideoInfo);
    pmt->SetTemporalCompression(FALSE);

    // Calculate the memory needed to hold the DIB - DON'T TRUST biSizeImage!
    DWORD dwBits = DIBSIZE(*lpbi); 
    pmt->SetSampleSize(dwBits);

    //make it circular link list
    m_pListTail->next=m_pList;

    *ppList = m_pList;
    
    return hr;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\stillvid\resource.h ===
// Copyright (c) 1998  Microsoft Corporation.  All Rights Reserved.
//{{NO_DEPENDENCIES}}
// Microsoft Developer Studio generated include file.
// Used by stilprop.rc
//
#define IDS_STILLTITLE                  500
#define IDD_GENSTILL                    501
#define IDC_STILL_START                 502
#define IDC_STILL_DURATION              503
#define IDC_STILL_FRMRATE               504
#define IDS_STATIC                      -1

// Next default values for new objects
// 
#ifdef APSTUDIO_INVOKED
#ifndef APSTUDIO_READONLY_SYMBOLS
#define _APS_NEXT_RESOURCE_VALUE        101
#define _APS_NEXT_COMMAND_VALUE         40001
#define _APS_NEXT_CONTROL_VALUE         1000
#define _APS_NEXT_SYMED_VALUE           101
#endif
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\stillvid\ourtgafile.h ===
/****************************************************************************
**
**	For more information about the original Truevision TGA(tm) file format,
**	or for additional information about the new extensions to the
**	Truevision TGA file, refer to the "Truevision TGA File Format
**	Specification Version 2.0" available from Truevision or your
**	Truevision dealer.
**
**  FILE STRUCTURE FOR THE ORIGINAL TRUEVISION TGA FILE				
**	  FIELD 1 :	NUMBER OF CHARACTERS IN ID FIELD (1 BYTES)	
**	  FIELD 2 :	COLOR MAP TYPE (1 BYTES)			
**	  FIELD 3 :	IMAGE TYPE CODE (1 BYTES)			
**					= 0	NO IMAGE DATA INCLUDED		
**					= 1	UNCOMPRESSED, COLOR-MAPPED IMAGE
**					= 2	UNCOMPRESSED, TRUE-COLOR IMAGE	
**					= 3	UNCOMPRESSED, BLACK AND WHITE IMAGE
**					= 9	RUN-LENGTH ENCODED COLOR-MAPPED IMAGE
**					= 10 RUN-LENGTH ENCODED TRUE-COLOR IMAGE
**					= 11 RUN-LENGTH ENCODED BLACK AND WHITE IMAGE
**	  FIELD 4 :	COLOR MAP SPECIFICATION	(5 BYTES)		
**				4.1 : COLOR MAP ORIGIN (2 BYTES)	
**				4.2 : COLOR MAP LENGTH (2 BYTES)	
**				4.3 : COLOR MAP ENTRY SIZE (2 BYTES)	
**	  FIELD 5 :	IMAGE SPECIFICATION (10 BYTES)			
**				5.1 : X-ORIGIN OF IMAGE (2 BYTES)	
**				5.2 : Y-ORIGIN OF IMAGE (2 BYTES)	
**				5.3 : WIDTH OF IMAGE (2 BYTES)		
**				5.4 : HEIGHT OF IMAGE (2 BYTES)		
**				5.5 : IMAGE PIXEL SIZE (1 BYTE)		
**				5.6 : IMAGE DESCRIPTOR BYTE (1 BYTE) 	
**	  FIELD 6 :	IMAGE ID FIELD (LENGTH SPECIFIED BY FIELD 1)	
**	  FIELD 7 :	COLOR MAP DATA (BIT WIDTH SPECIFIED BY FIELD 4.3 AND
**				NUMBER OF COLOR MAP ENTRIES SPECIFIED IN FIELD 4.2)
**	  FIELD 8 :	IMAGE DATA FIELD (WIDTH AND HEIGHT SPECIFIED IN
**				FIELD 5.3 AND 5.4)				
****************************************************************************/

typedef struct _devDir
{
	unsigned short	tagValue;
	UINT32	tagOffset;
	UINT32	tagSize;
} DevDir;

typedef struct _TGAFile
{
	BYTE	idLength;		/* length of ID string */
	BYTE	mapType;		/* color map type */
	BYTE	imageType;		/* image type code */
	unsigned short	mapOrigin;		/* starting index of map */
	unsigned short	mapLength;		/* length of map */
	BYTE	mapWidth;		/* width of map in bits */
	unsigned short	xOrigin;		/* x-origin of image */
	unsigned short	yOrigin;		/* y-origin of image */
	unsigned short	imageWidth;		/* width of image */
	unsigned short	imageHeight;	/* height of image */
	BYTE	pixelDepth;		/* bits per pixel */
	BYTE	imageDesc;		/* image descriptor */
	char	idString[256];	/* image ID string */
	unsigned short	devTags;		/* number of developer tags in directory */
	DevDir	*devDirs;		/* pointer to developer directory entries */
	unsigned short	extSize;		/* extension area size */
	char	author[41];		/* name of the author of the image */
	char	authorCom[4][81];	/* author's comments */
	unsigned short	month;			/* date-time stamp */
	unsigned short	day;
	unsigned short	year;
	unsigned short	hour;
	unsigned short	minute;
	unsigned short	second;
	char	jobID[41];		/* job identifier */
	unsigned short	jobHours;		/* job elapsed time */
	unsigned short	jobMinutes;
	unsigned short	jobSeconds;
	char	softID[41];		/* software identifier/program name */
	unsigned short	versionNum;		/* software version designation */
	BYTE	versionLet;
	UINT32	keyColor;		/* key color value as A:R:G:B */
	unsigned short	pixNumerator;	/* pixel aspect ratio */
	unsigned short	pixDenominator;
	unsigned short	gammaNumerator;	/* gamma correction factor */
	unsigned short	gammaDenominator;
	UINT32	colorCorrectOffset;	/* offset to color correction table */
	UINT32	stampOffset;	/* offset to postage stamp data */
	UINT32	scanLineOffset;	/* offset to scan line table */
	BYTE	alphaAttribute;	/* alpha attribute description */
	UINT32	*scanLineTable;	/* address of scan line offset table */
	BYTE	stampWidth;		/* width of postage stamp */
	BYTE	stampHeight;	/* height of postage stamp */
	void	*postStamp;		/* address of postage stamp data */
	unsigned short	*colorCorrectTable;
	UINT32	extAreaOffset;	/* extension area offset */
	UINT32	devDirOffset;	/* developer directory offset */
	char	signature[18];	/* signature string	*/
} TGAFile;
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\stillvid\stillvid.h ===
//==========================================================================;
//
//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
//  PURPOSE.
//
//  Copyright (c) 1992 - 1999  Microsoft Corporation.  All Rights Reserved.
//
//--------------------------------------------------------------------------;

#include "..\errlog\cerrlog.h"
#include "loadgif.h"

extern const AMOVIESETUP_FILTER sudStillVid;

enum
{
    STILLVID_FILETYPE_DIB = 1,
    STILLVID_FILETYPE_JPG =2,
    STILLVID_FILETYPE_GIF =3,
    STILLVID_FILETYPE_TGA = 4
};

// this filter uses more memory than anything else, don't waste memory
#define MAXBUFFERCNT   1

// The class managing the output pin
class CStilVidStream;	    //Still Video stream
class CImgGif;

// Main object for a Generate Still Video
class CGenStilVid : public CSource
		    , public IFileSourceFilter
		    , public CPersistStream
		    , public CAMSetErrorLog

{
    friend class CStilVidStream ;
    friend class CImgGif;

public:

    CGenStilVid(LPUNKNOWN lpunk, HRESULT *phr);
    ~CGenStilVid();

    // Create GenBlkVid filter!
    static CUnknown * WINAPI CreateInstance(LPUNKNOWN lpunk, HRESULT *phr);

    STDMETHODIMP NonDelegatingQueryInterface(REFIID riid,void **ppv);
    DECLARE_IUNKNOWN;

    //IFileSourceFilter
    STDMETHODIMP Load( LPCOLESTR pszFileName,const AM_MEDIA_TYPE *pmt);
    /* Free any resources acquired by Load */
    STDMETHODIMP Unload();
    STDMETHODIMP GetCurFile(LPOLESTR * ppszFileName,AM_MEDIA_TYPE *pmt);

    CBasePin *GetPin (int n) ;                         // gets a pin ptr
    int CGenStilVid::GetPinCount();

    // CPersistStream
    HRESULT WriteToStream(IStream *pStream);
    HRESULT ReadFromStream(IStream *pStream);
    STDMETHODIMP GetClassID(CLSID *pClsid);
    int SizeMax();

private:
    void get_CurrentMT(CMediaType *pmt){ *pmt=m_mt; };  
    void put_CurrentMT(CMediaType mt){ m_mt=mt; };  

    //for DIB sequence
    LPTSTR	m_lpszDIBFileTemplate;	//space for DIB file name template
    BOOL	m_bFileType;	    //1:DIB sequence; 2 JPEG sequence
    DWORD	m_dwMaxDIBFileCnt;
    DWORD	m_dwFirstFile;

    LPOLESTR	m_pFileName;		//source file name
    LONGLONG	m_llSize;		//
    PBYTE	m_pbData;		//source data pointer
    HBITMAP     m_hbitmap;	// holds the JPEG data
    // media type of the src data
    CMediaType  m_mt;

    BOOL m_fAllowSeq;	// allow dib sequences?

    CImgGif *m_pGif;
    LIST        *m_pList, *m_pListHead;
    REFERENCE_TIME m_rtGIFTotal;	// total duration of animated GIF
    
}; // CGenStilVid


// CStilVidStream manages the data flow from the output pin.
class CStilVidStream : public CSourceStream 
		    ,public IGenVideo
		    , public IDexterSequencer
		    ,public ISpecifyPropertyPages
		    ,public IMediaSeeking
{
    friend class CGenStilVid ;

public:

    CStilVidStream(HRESULT *phr, CGenStilVid *pParent, LPCWSTR pPinName);
    ~CStilVidStream();

    //expose	IGenVideo
    //		ISpecifyPropertyPages
    //		IDexterSequencer
    STDMETHODIMP NonDelegatingQueryInterface(REFIID riid,void **ppv);
    DECLARE_IUNKNOWN;


    // put blank RGB32 video into the supplied video frame
    HRESULT DoBufferProcessingLoop();
    HRESULT FillBuffer(IMediaSample *pms);

    // To say "read only buffer"
    HRESULT DecideAllocator(IMemInputPin *pPin, IMemAllocator **ppAlloc);

    // Ask for buffers of the size appropriate to the agreed media type
    HRESULT DecideBufferSize(IMemAllocator *pIMemAlloc,
                             ALLOCATOR_PROPERTIES *pProperties);


    HRESULT CheckMediaType(const CMediaType *pMediaType);
    HRESULT GetMediaType(int iPosition, CMediaType *pmt);
    HRESULT SetMediaType(const CMediaType* pmt);

    // Resets the stream time to zero
    HRESULT OnThreadCreate(void);

    // DO NO SUPPORT Quality control notifications sent to us
    // STDMETHODIMP Notify(IBaseFilter * pSender, Quality q);
    
    // IMediaSeeking methods
    STDMETHODIMP GetCapabilities( DWORD * pCapabilities );
    STDMETHODIMP CheckCapabilities( DWORD * pCapabilities ); 
    STDMETHODIMP SetTimeFormat(const GUID * pFormat);	
    STDMETHODIMP GetTimeFormat(GUID *pFormat);		    
    STDMETHODIMP IsUsingTimeFormat(const GUID * pFormat);  
    STDMETHODIMP IsFormatSupported( const GUID * pFormat); 
    STDMETHODIMP QueryPreferredFormat( GUID *pFormat);	    
    STDMETHODIMP SetPositions( LONGLONG * pCurrent, DWORD CurrentFlags
                             , LONGLONG * pStop, DWORD StopFlags );
    STDMETHODIMP GetPositions( LONGLONG * pCurrent, LONGLONG * pStop );
    STDMETHODIMP GetCurrentPosition( LONGLONG * pCurrent );
    STDMETHODIMP GetStopPosition( LONGLONG * pStop );
    STDMETHODIMP GetAvailable( LONGLONG *pEarliest, LONGLONG *pLatest );
    STDMETHODIMP GetDuration( LONGLONG *pDuration );
    STDMETHODIMP GetPreroll( LONGLONG *pllPreroll )
	{ if( pllPreroll) *pllPreroll =0; return S_OK; };
    STDMETHODIMP SetRate( double dRate);
    STDMETHODIMP GetRate( double * pdRate);
    STDMETHODIMP ConvertTimeFormat(LONGLONG *pTarget, const GUID *pTargetFormat,
				   LONGLONG Source, const GUID *pSourceFormat ) { return E_NOTIMPL ;};

    
    //can be called by IMedieaSeeking's SetPositions()
    //STDMETHODIMP set_StartStop(REFERENCE_TIME start, REFERENCE_TIME stop);

    STDMETHODIMP Notify(IBaseFilter * pSender, Quality q);
    STDMETHODIMP GetPages(CAUUID *pPages);

    
    //IDexterSequencer
    STDMETHODIMP get_OutputFrmRate( double *dpFrmRate );
    STDMETHODIMP put_OutputFrmRate( double dFrmRate );
    STDMETHODIMP get_MediaType( AM_MEDIA_TYPE *pmt);
    STDMETHODIMP put_MediaType( const AM_MEDIA_TYPE *pmt);
    STDMETHODIMP GetStartStopSkewCount(int *piCount);
    STDMETHODIMP GetStartStopSkew(REFERENCE_TIME *prtStart,
			REFERENCE_TIME *prtStop, REFERENCE_TIME *prtSkew,
			double *pdRate);
    STDMETHODIMP AddStartStopSkew(REFERENCE_TIME rtStart,
			REFERENCE_TIME rtStop, REFERENCE_TIME rtSkew,
			double dRate);
    STDMETHODIMP ClearStartStopSkew();

    //IGenVideo
    STDMETHODIMP ImportSrcBuffer( const AM_MEDIA_TYPE *pmt,
				const BYTE *pBuf) {return E_NOTIMPL;};
    STDMETHODIMP get_RGBAValue(long *dwRGBA){return E_NOTIMPL;};
    STDMETHODIMP put_RGBAValue(long dwRGBA){return E_NOTIMPL;};

private:

    CGenStilVid		*m_pGenStilVid;
    	    
    REFERENCE_TIME	m_rtStartTime;
    REFERENCE_TIME	m_rtDuration;

    REFERENCE_TIME	m_rtNewSeg;	// last NewSeg given

    REFERENCE_TIME	m_rtLastStop;		// used for animated GIF
    LONG		m_lDataLen;		//actual output data lenght
    DWORD		m_dwOutputSampleCnt;	// output frame cnt
    double		m_dOutputFrmRate;	// Output frm rate frames/second
    BYTE		m_bIntBufCnt;		// CNT for first 2 samples
    int			m_iBufferCnt;		// how many buffers it gets
    BYTE		m_bZeroBufCnt;		// How many buffer already 0'd
    BYTE		**m_ppbDstBuf;
   
    CCritSec    m_csFilling;	// are we delivering?

}; // CStilVidStream
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\stillvid\stilprop.h ===
//==========================================================================;
//
//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
//  PURPOSE.
//
//  Copyright (c) 1992 - 1999  Microsoft Corporation.  All Rights Reserved.
//
//--------------------------------------------------------------------------;
//
// Stilprop.h
//
// {693644B0-6858-11d2-9EEB-006008039E37}
DEFINE_GUID(CLSID_GenStilPropertiesPage, 
0x693644b0, 0x6858, 0x11d2, 0x9e, 0xeb, 0x0, 0x60, 0x8, 0x3, 0x9e, 0x37);


class CGenStilProperties : public CBasePropertyPage
{

public:

    static CUnknown *CreateInstance(LPUNKNOWN lpunk, HRESULT *phr);
         
private:
    INT_PTR OnReceiveMessage(HWND hwnd,UINT uMsg,WPARAM wParam,LPARAM lParam);
    HRESULT OnConnect(IUnknown *pUnknown);
    HRESULT OnDisconnect();
    HRESULT OnActivate();
    HRESULT OnDeactivate();
    HRESULT OnApplyChanges();

    void SetDirty();

    CGenStilProperties(LPUNKNOWN lpunk, HRESULT *phr);


    STDMETHODIMP GetFromDialog();

    BOOL m_bIsInitialized;  // Will be false while we set init values in Dlg
                            // to prevent theDirty flag from being set.

    REFERENCE_TIME	m_rtStartTime;
    REFERENCE_TIME	m_rtDuration;
    double		m_dOutputFrmRate;		// Output frm rate frames/second
    char		m_sFileName[60];		//source file name


    IDexterSequencer	*m_pGenStil;
    IDexterSequencer	*piGenStill(void) { ASSERT(m_pGenStil); return m_pGenStil; }

};
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\stillvid\stillvid.cpp ===
// !!! FILTER should support IGenVideo/IDexterSequencer, not the pin?

//==========================================================================;
//
//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
//  PURPOSE.
//
//  Copyright (c) 1992 - 1999  Microsoft Corporation.  All Rights Reserved.
//
//--------------------------------------------------------------------------;
#include <streams.h>
#ifdef FILTER_DLL
#include <initguid.h>
#endif
#include <qeditint.h>
#include <qedit.h>
#include "StillVid.h"
#include "StilProp.h"
#include "ourtgafile.h"

#include "..\util\conv.cxx"

#define GIF_UNIT 100000	// # of UNITs per unit of GIF delay

//TODO: what is good return type
extern HBITMAP LoadJPEGImage(LPTSTR filename, CMediaType *pmt);

// util for DIB sequces
static DWORD dseqParseFileName(	LPTSTR lpszFileName,	    //the first file name
				LPTSTR lpszTemplate,	    //file template
				DWORD FAR * lpdwMaxValue);

static DWORD dseqFileNumber(	LPTSTR lpszTemplate, // file template
				DWORD dwFirstFile,  //first file number
				DWORD dwMaxDibFileCnt);	//

HRESULT OpenDIBFile ( HANDLE hFile, PBYTE *ppbData, CMediaType *pmt, PBYTE pBuf) ;
HRESULT OpenTGAFile ( HANDLE hFile, PBYTE *ppbData, CMediaType *pmt, PBYTE pBuf) ;
HRESULT ReadDibBitmapInfo (HANDLE hFile, LPBITMAPINFOHEADER lpbi);
HRESULT ReadTgaBitmapInfo (HANDLE hFile, LPBITMAPINFOHEADER lpbi);

TCHAR* LSTRRCHR( const TCHAR* lpString, int bChar )
{
  if( lpString != NULL ) {	
    const TCHAR*	lpBegin;
    lpBegin = lpString;

    while( *lpString != 0 ) lpString=CharNext(lpString);
    while( 1 ) {
      if( *lpString == bChar ) return (TCHAR*)lpString;
      if( lpString == lpBegin ) break;
      lpString=CharPrev(lpBegin,lpString);
    }
  }

  return NULL;
} /* LSTRRCHR */


// Setup data

const AMOVIESETUP_MEDIATYPE sudOpPinTypes =
{
    &MEDIATYPE_Video,       // Major type
    &MEDIASUBTYPE_NULL      // Minor type
};

const AMOVIESETUP_PIN sudOpPin =
{
    L"Output",              // Pin string name
    FALSE,                  // Is it rendered
    TRUE,                   // Is it an output
    FALSE,                  // Can we have none
    FALSE,                  // Can we have many
    &CLSID_NULL,            // Connects to filter
    NULL,                   // Connects to pin
    1,                      // Number of types
    &sudOpPinTypes };       // Pin details

const AMOVIESETUP_FILTER sudStillVid =
{
    &CLSID_GenStilVid,    // Filter CLSID
    L"Generate Still Video",  // String name
    MERIT_DO_NOT_USE,       // Filter merit
    1,                      // Number pins
    &sudOpPin               // Pin details
};


#ifdef FILTER_DLL
// COM global table of objects in this dll

CFactoryTemplate g_Templates[] = {
  { L"Generate Still Video"
  , &CLSID_GenStilVid
  , CGenStilVid::CreateInstance
  , NULL
  , &sudStillVid
  },
  {L"Video Property"
  , &CLSID_GenStilPropertiesPage
  , CGenStilProperties::CreateInstance
  }
};
int g_cTemplates = sizeof(g_Templates) / sizeof(g_Templates[0]);


//
// DllRegisterServer
//
// Exported entry points for registration and unregistration
//
STDAPI DllRegisterServer()
{
    // !!! Register the file types here!
    return AMovieDllRegisterServer2( TRUE );

} // DllRegisterServer


//
// DllUnregisterServer
//
STDAPI DllUnregisterServer()
{
    return AMovieDllRegisterServer2( FALSE );

} // DllUnregisterServer
#endif


//
// CreateInstance
//
// Create GenStilVid filter
//
CUnknown * WINAPI CGenStilVid::CreateInstance(LPUNKNOWN lpunk, HRESULT *phr)
{
    CUnknown *punk = new CGenStilVid(lpunk, phr);
    if (punk == NULL) {
        *phr = E_OUTOFMEMORY;
    }
    return punk;

} // CreateInstance


//
// Constructor
//
// Initialise a CStilVidStream object so that we have a pin.
//
CGenStilVid::CGenStilVid(LPUNKNOWN lpunk, HRESULT *phr) :
    CSource(NAME("Generate Still Video"),
            lpunk,
            CLSID_GenStilVid)
     ,CPersistStream(lpunk, phr)
     ,m_lpszDIBFileTemplate(NULL)
     ,m_bFileType(NULL)
     ,m_dwMaxDIBFileCnt(0)
     ,m_dwFirstFile(0)
     ,m_pFileName(NULL)
     ,m_llSize(0)
     ,m_pbData (NULL)
     ,m_hbitmap(NULL)
     ,m_fAllowSeq(FALSE)
     ,m_pGif(NULL)
     ,m_pList(NULL)
     ,m_pListHead(NULL)
     ,m_rtGIFTotal(0)
{
}

CGenStilVid::~CGenStilVid()
{
    delete [] m_lpszDIBFileTemplate;

    Unload();

    FreeMediaType(m_mt);

    delete m_pGif;
    if (m_paStreams) {
        delete m_paStreams[0];
    }
    delete [] m_paStreams;
};

STDMETHODIMP CGenStilVid::NonDelegatingQueryInterface(
    REFIID riid,
    void ** ppv
    )
{
    if (riid == IID_IFileSourceFilter) {
	return GetInterface((IFileSourceFilter *) this, ppv);
    }else if (riid == IID_IPersistStream) {
	return GetInterface((IPersistStream *) this, ppv);
    }else if (riid == IID_IAMSetErrorLog) {
	return GetInterface((IAMSetErrorLog *) this, ppv);
    }else {
        return CSource::NonDelegatingQueryInterface(riid, ppv);
    }

}

// IPersistStream

// tell our clsid
//
STDMETHODIMP CGenStilVid::GetClassID(CLSID *pClsid)
{
    CheckPointer(pClsid, E_POINTER);
    *pClsid = CLSID_GenStilVid;
    return S_OK;
}


typedef struct _STILLSave {
    REFERENCE_TIME	rtStartTime;
    REFERENCE_TIME	rtDuration;
    double		dOutputFrmRate;		// Output frm rate frames/second
} STILLSav;

// !!! Persist the media type too?
// !!! we only use 1 start/stop/skew right now

// persist ourself
//
HRESULT CGenStilVid::WriteToStream(IStream *pStream)
{
    DbgLog((LOG_TRACE,1,TEXT("CGenStilVid::WriteToStream")));

    CheckPointer(pStream, E_POINTER);
    CheckPointer(m_paStreams, E_POINTER);
    CheckPointer(m_paStreams[0], E_POINTER);

    STILLSav x;

    DbgLog((LOG_TRACE,1,TEXT("Persisted data is %d bytes"), sizeof(x)));

    CStilVidStream *pOutpin=( CStilVidStream *)m_paStreams[0];

    x.rtStartTime	= pOutpin->m_rtStartTime;
    x.rtDuration	= pOutpin->m_rtDuration;
    x.dOutputFrmRate	= pOutpin->m_dOutputFrmRate;

    HRESULT hr = pStream->Write(&x, sizeof(x), 0);
    if(FAILED(hr)) {
        DbgLog((LOG_ERROR,1,TEXT("*** WriteToStream FAILED")));
        return hr;
    }
    return NOERROR;
}


// load ourself
//
HRESULT CGenStilVid::ReadFromStream(IStream *pStream)
{
    DbgLog((LOG_TRACE,1,TEXT("CenBlkVid::ReadFromStream")));

    CheckPointer(pStream, E_POINTER);
    CheckPointer(m_paStreams, E_POINTER);
    CheckPointer(m_paStreams[0], E_POINTER);

    STILLSav x;

    HRESULT hr = pStream->Read(&x, sizeof(x), 0);
    if(FAILED(hr)) {
        DbgLog((LOG_ERROR,1,TEXT("*** ReadFromStream FAILED")));
        return hr;
    }

    CStilVidStream *pOutpin=( CStilVidStream *)m_paStreams[0];

    pOutpin->put_OutputFrmRate(x.dOutputFrmRate);
    pOutpin->ClearStartStopSkew();
    pOutpin->AddStartStopSkew(x.rtStartTime, x.rtStartTime + x.rtDuration, 0,1);	
    SetDirty(FALSE);
    return S_OK;
}

// how big is our save data?
int CGenStilVid::SizeMax()
{
    return sizeof(STILLSav);
}


// return a non-addrefed pointer to the CBasePin.
CBasePin *CGenStilVid::GetPin(int n)
{
    if ( m_paStreams != NULL)
    {
	if ( (!n) && m_paStreams[0] != NULL)
	return m_paStreams[0];
    }
    return NULL;
}
int CGenStilVid::GetPinCount()
{
    if ( m_paStreams != NULL)
    {
	if(m_paStreams[0] != NULL)
	    return 1;
    }
    return 0;
}

//
// lFileSourceFilter
//
STDMETHODIMP CGenStilVid::Unload()
{
    if (m_pFileName) {
	delete[] m_pFileName;
	m_pFileName = NULL;
    }

    // if we have an hbitmap, then m_pbData is in that and doesn't need freeing
    if (m_hbitmap) {
	DeleteObject(m_hbitmap);
	m_hbitmap = NULL;
    } else if(m_pbData) {
	delete[] m_pbData;
	m_pbData=NULL;
    }

    return S_OK;
}

STDMETHODIMP CGenStilVid::Load(
    LPCOLESTR lpwszFileName,
    const AM_MEDIA_TYPE *pmt)
{
    DbgLog((LOG_TRACE,2,TEXT("Still::Load")));
    CheckPointer(lpwszFileName, E_POINTER);

    // Remove previous name
    Unload();

    if(m_lpszDIBFileTemplate!=NULL)
    {
	delete []m_lpszDIBFileTemplate;
	m_lpszDIBFileTemplate=NULL;
    }

    USES_CONVERSION;
    TCHAR * lpszFileName = W2T((WCHAR*) lpwszFileName );

    //
    // Compare against known extensions that we don't punt to the plugin
    // decoders
    //

    TCHAR* ext = LSTRRCHR(lpszFileName, (int)TEXT('.'));
    HRESULT hr = S_OK;

    // create output pin
    if (m_paStreams == NULL) {
        m_paStreams = (CSourceStream **)new CStilVidStream*[1];
        if (m_paStreams == NULL)
            return E_OUTOFMEMORY;

        m_paStreams[0] = new CStilVidStream(&hr, this, L"Generate Still Video");
        if (m_paStreams[0] == NULL) {
	    delete [] m_paStreams;
	    m_paStreams = NULL;
            return E_OUTOFMEMORY;
	}
    }

    hr = E_FAIL;

    // if it's a .bmp or a .jpg or a .tga
    //
    if (ext && (!DexCompare(ext, TEXT(".bmp")) || !DexCompare(ext, TEXT(".dib")) ||
		!DexCompare(ext, TEXT(".jpg")) || !DexCompare(ext, TEXT(".jpeg"))||
		!DexCompare(ext, TEXT(".jfif")) || !DexCompare(ext, TEXT(".jpe")) ||
                !DexCompare(ext, TEXT(".tga"))
                ))
    {
	//open space to SAVE file name
	m_lpszDIBFileTemplate	= new TCHAR[MAX_PATH];
	if (!m_lpszDIBFileTemplate)
        return E_OUTOFMEMORY;
   
    //check how many dib files exist
	m_dwFirstFile= dseqParseFileName( lpszFileName,	    //file name
				m_lpszDIBFileTemplate,	    //
				&m_dwMaxDIBFileCnt);

	//open the first DIB/JPEG file
	HANDLE hFile = CreateFile(lpszFileName,		//file name	
			      GENERIC_READ,		//DesiredAccess
                              FILE_SHARE_READ,		//dwShareMode
                              NULL,			//SecurityAttrib
                              OPEN_EXISTING,		//dwCreationDisposition
                              0,			//dwFlagsAndAttributes
                              NULL);			//hTemplateFile

	if ( hFile == INVALID_HANDLE_VALUE)
	{
	    DbgLog((LOG_TRACE,2,TEXT("Could not open %s\n"), lpszFileName));
	    return E_INVALIDARG;
	}

	//have to open file to get mt
        //
	if (!DexCompare(ext, TEXT(".bmp")) || !DexCompare(ext, TEXT(".dib")))
	{
	    //only one DIB file
	    hr= OpenDIBFile (hFile, &m_pbData, &m_mt, NULL);	
	    CloseHandle(hFile);
		//X* I can use LoadImage(). But do not know whether it support BITMAPCOREHEADER
	}
	else if( !DexCompare( ext, TEXT(".tga")) )
	{
            hr = OpenTGAFile( hFile, &m_pbData, &m_mt, NULL );
        }
        else
        {
	    CloseHandle(hFile);
		
	    // it is a JPEG file
	    BITMAP bi;
	    m_hbitmap = LoadJPEGImage(lpszFileName, &m_mt);
	    if (m_hbitmap != NULL && m_hbitmap != (HANDLE)-1)
	    {   //get buffer pointer
	        GetObject(m_hbitmap, sizeof(BITMAP),&bi);
	        m_pbData=(PBYTE)bi.bmBits;
	        hr=NOERROR;
	    } else {
		hr=E_INVALIDARG;
	    }
	}

	// can we do sequences?  (We don't know yet if we want to)
	if (m_dwFirstFile==0 && m_dwMaxDIBFileCnt ==0)
	{
	    // one file
	    delete [] m_lpszDIBFileTemplate;
	    m_lpszDIBFileTemplate=NULL;
	
	}
	else
	{
	    //sequence
	    if (!DexCompare(ext, TEXT(".bmp")) ||
					!DexCompare(ext, TEXT(".dib"))) {
	 	m_bFileType =STILLVID_FILETYPE_DIB;
	    } else if( !DexCompare( ext, TEXT(".tga") ) )
            {
	 	m_bFileType = STILLVID_FILETYPE_TGA;
            }
            else
            {
	 	m_bFileType =STILLVID_FILETYPE_JPG;
		// Leave the first jpeg loaded.. we may not do sequences, and
		// the single one we've loaded may be needed
	    }
	}
    }
    else if ( ext && (!DexCompare(ext, TEXT(".gif")))) // if it's a gif
    {

        HANDLE hFile = CreateFile(lpszFileName,		//file name	
			      GENERIC_READ,		//DesiredAccess
                              FILE_SHARE_READ,		//dwShareMode
                              NULL,			//SecurityAttrib
                              OPEN_EXISTING,		//dwCreationDisposition
                              0,			//dwFlagsAndAttributes
                              NULL);			//hTemplateFile

	if ( hFile == INVALID_HANDLE_VALUE)
	{
	        DbgLog((LOG_TRACE,2,TEXT("Could not open %s\n"), lpszFileName));
	        return E_INVALIDARG;
	}

        m_bFileType=STILLVID_FILETYPE_GIF;

        //create a GIF object
        m_pGif  = new CImgGif( hFile);
	if (m_pGif == NULL) {
	    CloseHandle(hFile);
	    return E_OUTOFMEMORY;
	}

	// !!! This loads EVERY FRAME of the animated GIF up front and uses
	// an extra frame copy for every delta frame that could all be avoided
	// by loading the GIF as needed into a single output buffer.
	// !!! But then seeking would be slower.. we'd need to re-read many
	// frames every seek (although no memory copies)
	//
	hr = m_pGif->OpenGIFFile(&m_pList, &m_mt);	// gets MT too
	CloseHandle(hFile);
        m_pListHead = m_pList;
	m_rtGIFTotal = 0;
	int count = 0;

	if (SUCCEEDED(hr)) {
	    do {
	        m_rtGIFTotal += m_pList->delayTime * GIF_UNIT;
		count++;
		m_pList = m_pList->next;
	    } while (m_pList != m_pListHead);

// no, we want to let people play it looped
#if 0
	    // until we're seeked, default to playing an animated GIF once.
	    if (m_pListHead->next != m_pListHead) {	// animated?
    		CStilVidStream *pOutpin=(CStilVidStream *)m_paStreams[0];
	        pOutpin->m_rtDuration = m_rtGIFTotal;
	    }
#endif

	    m_pList = m_pListHead;	// put this back
            DbgLog((LOG_TRACE,2,TEXT("GIF Total play time = %dms"),
					(int)(m_rtGIFTotal / 10000)));
	    if (count > 1) {
		VIDEOINFOHEADER *pvi = (VIDEOINFOHEADER *)m_mt.Format();
	        pvi->AvgTimePerFrame = m_rtGIFTotal / count;
                DbgLog((LOG_TRACE,2,TEXT("AvgTimePerFrame = %dms"),
					(int)(pvi->AvgTimePerFrame / 10000)));
	    }
	}
    }
    else
    {
        DbgLog((LOG_TRACE, 1, TEXT("not supported compressiion format.\n")));
    }						

    if (SUCCEEDED(hr)) {
	//copy file name
	//m_Stream.Init(m_ppbData, m_llSize);
	m_pFileName = new WCHAR[wcslen(lpwszFileName) + 1];
	if (m_pFileName!=NULL) {
	    wcscpy(m_pFileName, lpwszFileName);
	}
    }

    return hr;
}

//
// GetCurFile
//
STDMETHODIMP CGenStilVid::GetCurFile(
		LPOLESTR * ppszFileName,
                AM_MEDIA_TYPE *pmt)
{
    // return the current file name from avifile

    CheckPointer(ppszFileName, E_POINTER);
    *ppszFileName = NULL;
    if (m_pFileName!=NULL) {
        *ppszFileName = (LPOLESTR) QzTaskMemAlloc( sizeof(WCHAR)
                                                 * (1+lstrlenW(m_pFileName)));
        if (*ppszFileName!=NULL) {
            lstrcpyW(*ppszFileName, m_pFileName);
        }
    }

    if (pmt) {
	pmt->majortype = GUID_NULL;   // Later!
	pmt->subtype = GUID_NULL;     // Later!
	pmt->pUnk = NULL;             // Later!
	pmt->lSampleSize = 0;         // Later!
	pmt->cbFormat = 0;            // Later!
    }

    return NOERROR;
}

WORD DibNumColors (VOID FAR *pv)
{
    int bits;
    LPBITMAPINFOHEADER lpbi;
    LPBITMAPCOREHEADER lpbc;

    lpbi = ((LPBITMAPINFOHEADER)pv);
    lpbc = ((LPBITMAPCOREHEADER)pv);

    //  With the BITMAPINFO format headers, the size of the palette
    //  is in biClrUsed, whereas in the BITMAPCORE - style headers, it
    //  is dependent on the bits per pixel ( = 2 raised to the power of
    //  bits/pixel).
    //
    if (lpbi->biSize != sizeof(BITMAPCOREHEADER))
    {
        if (lpbi->biClrUsed != 0)
            return (WORD)lpbi->biClrUsed;
        bits = lpbi->biBitCount;
    }
    else
        bits = lpbc->bcBitCount;

    switch (bits)
    {
    case 1:
        return 2;   //
    case 4:
        return 16;
    case 8:
        return 256;
    default:
        /* higher bitcounts have no color table */
        return 0;
    }
}

//
// OpenDIBFile()
// Function: build media type pmt
//	     read DIB data to a buffer, and pbData points to it
//	
HRESULT OpenDIBFile ( HANDLE hFile, PBYTE *ppbData, CMediaType *pmt, PBYTE pBuf)
{
    ASSERT( (ppbData!=NULL) | (pBuf!= NULL) );

    //make media type
    VIDEOINFO *pvi = (VIDEOINFO *) pmt->AllocFormatBuffer(sizeof(VIDEOINFO));
    if (NULL == pvi) {
	return(E_OUTOFMEMORY);
    }
    ZeroMemory(pvi, sizeof(VIDEOINFO));

    LPBITMAPINFOHEADER lpbi = HEADER(pvi);

    //Retrieves the BITMAPINFOHEADER info
    if( ReadDibBitmapInfo(hFile, lpbi) != NOERROR )
	return E_FAIL;

    // !!! support compression?
    if (lpbi->biCompression > BI_BITFIELDS)
	return E_INVALIDARG;

    pmt->SetType(&MEDIATYPE_Video);
    switch (lpbi->biBitCount)
    {
    case 32:
	pmt->SetSubtype(&MEDIASUBTYPE_ARGB32);
	break;
    case 24:
	pmt->SetSubtype(&MEDIASUBTYPE_RGB24);
	break;
    case 16:
	if (lpbi->biCompression == BI_RGB)
	    pmt->SetSubtype(&MEDIASUBTYPE_RGB555);
	else {
	    DWORD *p = (DWORD *)(lpbi + 1);
	    if (*p == 0x7c00 && *(p+1) == 0x03e0 && *(p+2) == 0x001f)
	        pmt->SetSubtype(&MEDIASUBTYPE_RGB555);
	    else if (*p == 0xf800 && *(p+1) == 0x07e0 && *(p+2) == 0x001f)
	        pmt->SetSubtype(&MEDIASUBTYPE_RGB565);
	    else
		return E_INVALIDARG;
	}
	break;
    case 8:
	if (lpbi->biCompression == BI_RLE8) {
	    FOURCCMap fcc = BI_RLE8;
	    pmt->SetSubtype(&fcc);
	} else
	    pmt->SetSubtype(&MEDIASUBTYPE_RGB8);
	break;
    case 4:
	if (lpbi->biCompression == BI_RLE4) {
	    FOURCCMap fcc = BI_RLE4;
	    pmt->SetSubtype(&fcc);
	} else
	    pmt->SetSubtype(&MEDIASUBTYPE_RGB4);
	break;
    case 1:
	pmt->SetSubtype(&MEDIASUBTYPE_RGB1);
	break;
    default:
	return E_UNEXPECTED;
	// !!! pmt->SetSubtype(&MEDIASUBTYPE_NULL);
	break;
    }
    pmt->SetFormatType(&FORMAT_VideoInfo);
    pmt->SetTemporalCompression(FALSE);

    // Calculate the memory needed to hold the DIB - DON'T TRUST biSizeImage!
    DWORD dwBits = DIBSIZE(*lpbi);
    pmt->SetSampleSize(dwBits);

    //Retrieves the BITMAPINFOHEADER info. block associated with a CF_DIB format memory block
    //DibInfo(hdib,&bi);

    // set a buffer for DIB
    PBYTE pbMem;
    if(ppbData==NULL)
    {
	pbMem=pBuf;
    }
    else
    {
	pbMem = new BYTE[dwBits];
	if (pbMem == NULL)
	    return E_OUTOFMEMORY;
    }

    //Read Data to Buffer
    DWORD dwBytesRead=0;
    if (!ReadFile(hFile,
                  (LPVOID)pbMem,	// pointer to buffer that receives daata
                  dwBits,		// Number of bytes to read
                  &dwBytesRead,		// Munber of bytes read
                  NULL) ||
		  dwBytesRead != dwBits)
    {
	DbgLog((LOG_TRACE, 1, TEXT("Could not read file\n")));
        delete [] pbMem;
        return E_INVALIDARG;
    }

    if(ppbData!=NULL)
	*ppbData =pbMem;

    return NOERROR;
}

//
// OpenDIBFile()
// Function: build media type pmt
//	     read DIB data to a buffer, and pbData points to it
//	
HRESULT OpenTGAFile ( HANDLE hFile, PBYTE *ppbData, CMediaType *pmt, PBYTE pBuf)
{
    ASSERT( (ppbData!=NULL) | (pBuf!= NULL) );

    //make media type
    //
    VIDEOINFO * pvi = (VIDEOINFO *) pmt->AllocFormatBuffer( sizeof(VIDEOINFO) );
    if (NULL == pvi)
    {
	return(E_OUTOFMEMORY);
    }
    ZeroMemory(pvi, sizeof(VIDEOINFO));

    LPBITMAPINFOHEADER lpbi = HEADER(pvi);

    //Retrieves the BITMAPINFOHEADER info
    HRESULT hrRead = ReadTgaBitmapInfo(hFile, lpbi);
    if( FAILED( hrRead ) ) return hrRead;

    pmt->SetType(&MEDIATYPE_Video);
    switch (lpbi->biBitCount)
    {
    case 32:
	pmt->SetSubtype(&MEDIASUBTYPE_ARGB32);
	break;
    case 24:
	pmt->SetSubtype(&MEDIASUBTYPE_RGB24);
	break;
    case 16:
	pmt->SetSubtype(&MEDIASUBTYPE_RGB555);
	break;
    default:
        return E_UNEXPECTED;
    }
    pmt->SetFormatType(&FORMAT_VideoInfo);
    pmt->SetTemporalCompression(FALSE);

    // Calculate the memory needed to hold the DIB - DON'T TRUST biSizeImage!
    DWORD dwBits = DIBSIZE(*lpbi);
    pmt->SetSampleSize(dwBits);

    // set a buffer for DIB
    PBYTE pbMem;
    if(ppbData==NULL)
    {
	pbMem=pBuf;
    }
    else
    {
	pbMem = new BYTE[dwBits];
	if (pbMem == NULL)
	    return E_OUTOFMEMORY;
    }

    //Read Data to Buffer
    DWORD dwBytesRead=0;
    if (!ReadFile(hFile,
                  (LPVOID)pbMem,	// pointer to buffer that receives daata
                  dwBits,		// Number of bytes to read
                  &dwBytesRead,		// Munber of bytes read
                  NULL) ||
		  dwBytesRead != dwBits)
    {
	DbgLog((LOG_TRACE, 1, TEXT("Could not read file\n")));
        delete [] pbMem;
        return E_INVALIDARG;
    }

    if(ppbData!=NULL)
	*ppbData =pbMem;

    return NOERROR;
}


//
// ReadDibBitmapInfo()
// It works with "old" (BITMAPCOREHEADER) and "new" (BITMAPINFOHEADER)
//       bitmap formats, but will always return a "new" BITMAPINFO
//
HRESULT ReadDibBitmapInfo (HANDLE hFile, LPBITMAPINFOHEADER lpbi)
{
    CheckPointer(lpbi, E_POINTER);

    DWORD dwBytesRead=0;

    if (hFile == NULL)
        return E_FAIL;

    // Reset file pointer and read file BITMAPFILEHEADER
    DWORD  dwResult = SetFilePointer(	hFile,
					0L,
					NULL,
					FILE_BEGIN);
    DWORD off =dwResult;
    if(dwResult == 0xffffffff)
    {
	DbgLog((LOG_TRACE, 3, TEXT("Could not seek to the beginning of the File\n")));
        return E_INVALIDARG;
    }
    BITMAPFILEHEADER   bf;
    if ( !ReadFile(	hFile,
			(LPVOID)&bf,				// pointer to buffer that receives daata
			sizeof(BITMAPFILEHEADER),		// Number of bytes to read
			&dwBytesRead,				// Munber of bytes read
			NULL) ||
			dwBytesRead != sizeof(BITMAPFILEHEADER) )
    {
	DbgLog((LOG_TRACE, 1, TEXT("Could not read BitMapFileHeader\n")));
        return E_INVALIDARG;
    }

    // Do we have a RC HEADER?
#define BFT_BITMAP 0x4d42	//"BM"
    if ( bf.bfType !=BFT_BITMAP)
    {
        bf.bfOffBits = 0L;
        DWORD dwResult1 = SetFilePointer(hFile,
					dwResult,
					NULL,
					FILE_BEGIN);

	if(dwResult1 == 0xffffffff)
        {
	    DbgLog((LOG_TRACE, 1, TEXT("Could not seek to RC HEADER\n")));
	    return E_INVALIDARG;
        }
    }

    // Read BITMAPINFOHEADER
    BITMAPINFOHEADER   bi;
    if (!ReadFile(	hFile,
			(LPVOID)&bi,					// pointer to buffer that receives daata
			sizeof(BITMAPINFOHEADER),		// Number of bytes to read
			&dwBytesRead,					// Munber of bytes read
			NULL) ||
			dwBytesRead != sizeof(BITMAPINFOHEADER) )
    {
	DbgLog((LOG_TRACE, 1, TEXT("Could not read BitMapInfoHeader\n")));
        return E_INVALIDARG;
    }

    // calc DIB number colors
    WORD      nNumColors;
    nNumColors = DibNumColors (&bi);
    if( nNumColors > 256 )
    {
        return VFW_E_INVALIDMEDIATYPE;
    }

    /* Check the nature (BITMAPINFO or BITMAPCORE) of the info. block
     * and extract the field information accordingly. If a BITMAPCOREHEADER,
     * transfer it's field information to a BITMAPINFOHEADER-style block
     */
    int       size;
    DWORD          dwWidth = 0;
    DWORD          dwHeight = 0;
    switch (size = (int)bi.biSize)
    {
    case sizeof (BITMAPINFOHEADER):
        break;

    case sizeof (BITMAPCOREHEADER):
	//make BITMAPHEADER
	BITMAPCOREHEADER   bc;
	WORD           wPlanes, wBitCount;

	bc = *(BITMAPCOREHEADER*)&bi;
        dwWidth   = (DWORD)bc.bcWidth;
        dwHeight  = (DWORD)bc.bcHeight;
        wPlanes   = bc.bcPlanes;
        wBitCount = bc.bcBitCount;
        bi.biSize           = sizeof(BITMAPINFOHEADER);
        bi.biWidth          = dwWidth;
        bi.biHeight         = dwHeight;
        bi.biPlanes         = wPlanes;
        bi.biBitCount       = wBitCount;
        bi.biCompression    = BI_RGB;
        bi.biSizeImage      = 0;
        bi.biXPelsPerMeter  = 0;
        bi.biYPelsPerMeter  = 0;
        bi.biClrUsed        = nNumColors;
        bi.biClrImportant   = nNumColors;

	dwResult = SetFilePointer(hFile,
				  LONG(sizeof (BITMAPCOREHEADER) -
					sizeof (BITMAPINFOHEADER)),
				  NULL,
				  FILE_BEGIN);

	if(dwResult == 0xffffffff)
        {
   	    DbgLog((LOG_TRACE, 1, TEXT("Could not seek to Data\n")));
	    return E_INVALIDARG;
        }

        break;

    default:
        // Not a DIB!
        return E_FAIL;
    }

    //  Fill in some default values if they are zero
    if (bi.biSizeImage == 0)
    {
        bi.biSizeImage = WIDTHBYTES((DWORD)bi.biWidth * bi.biBitCount)
            * bi.biHeight;
    }
    if (bi.biClrUsed == 0)
        bi.biClrUsed = DibNumColors(&bi);
    if( bi.biClrUsed > 256 )
    {
        return VFW_E_INVALIDMEDIATYPE;
    }


    // set bitMapInforHeader
    *lpbi = bi;

    // Get a pointer to the color table
    RGBQUAD FAR  *pRgb = (RGBQUAD FAR *)((LPSTR)lpbi + bi.biSize);
    if (nNumColors)
    {
        if (size == sizeof(BITMAPCOREHEADER))
        {
            // Convert a old color table (3 byte RGBTRIPLEs) to a new
            // color table (4 byte RGBQUADs)
	    if ( !ReadFile( hFile,
			    (LPVOID)pRgb,			// pointer to buffer that receives daata
			    nNumColors * sizeof(RGBTRIPLE),		// Number of bytes to read
			    &dwBytesRead,				// Munber of bytes read
			    NULL) ||
			    dwBytesRead != (nNumColors * sizeof(RGBTRIPLE)) )
	    {
		DbgLog((LOG_TRACE, 1, TEXT("Could not read RGB table\n")));
		return E_INVALIDARG;
	    }

            for (int i = nNumColors - 1; i >= 0; i--)
            {
                RGBQUAD rgb;

                rgb.rgbRed  = ((RGBTRIPLE FAR *)pRgb)[i].rgbtRed;
                rgb.rgbBlue = ((RGBTRIPLE FAR *)pRgb)[i].rgbtBlue;
                rgb.rgbGreen    = ((RGBTRIPLE FAR *)pRgb)[i].rgbtGreen;
                rgb.rgbReserved = 255; // opaque

                pRgb[i] = rgb;
            }
        }
        else
        {
    	
	    if ( !ReadFile( hFile,
			    (LPVOID)pRgb,			// pointer to buffer that receives daata
			    nNumColors * sizeof(RGBQUAD),		// Number of bytes to read
			    &dwBytesRead,				// Munber of bytes read
			    NULL) ||
			    dwBytesRead != (nNumColors * sizeof(RGBQUAD) ) )
	    {
		DbgLog((LOG_TRACE, 1, TEXT("Could not read RGBQUAD table\n")));
		return E_INVALIDARG;
	    }
	}
    }

    if (bf.bfOffBits != 0L)
    {
       	dwResult = SetFilePointer(hFile,
		  (off + bf.bfOffBits),								
		  NULL,
		  FILE_BEGIN);

	if(dwResult == 0xffffffff)
        {
   	    DbgLog((LOG_TRACE, 1, TEXT("Could not seek to Data\n")));
	    return E_INVALIDARG;
        }
    }

    return NOERROR;
}

HRESULT ReadTgaBitmapInfo( HANDLE hFile, BITMAPINFOHEADER * pBIH )
{
    CheckPointer( pBIH, E_POINTER );
    if( !hFile ) return E_POINTER;

    DWORD dwResult = SetFilePointer( hFile, 0, NULL, FILE_BEGIN );
    if( dwResult == 0xffffffff )
    {
        return STG_E_SEEKERROR;
    }

    // you absolutely, CANNOT, no matter what you THINK you know,
    // read this structure in one fell swoop. You must read them
    // individually
    //
    DWORD dwBytesRead = 0;
    TGAFile TgaHeader;
    DWORD totRead = 0;
    ReadFile( hFile, &TgaHeader.idLength, 1, &dwBytesRead, NULL );
    totRead += dwBytesRead;
    ReadFile( hFile, &TgaHeader.mapType, 1, &dwBytesRead, NULL );
    totRead += dwBytesRead;
    ReadFile( hFile, &TgaHeader.imageType, 1, &dwBytesRead, NULL );
    totRead += dwBytesRead;
    ReadFile( hFile, &TgaHeader.mapOrigin, 2, &dwBytesRead, NULL );
    totRead += dwBytesRead;
    ReadFile( hFile, &TgaHeader.mapLength, 2, &dwBytesRead, NULL );
    totRead += dwBytesRead;
    ReadFile( hFile, &TgaHeader.mapWidth, 1, &dwBytesRead, NULL );
    totRead += dwBytesRead;
    ReadFile( hFile, &TgaHeader.xOrigin, 2, &dwBytesRead, NULL );
    totRead += dwBytesRead;
    ReadFile( hFile, &TgaHeader.yOrigin, 2, &dwBytesRead, NULL );
    totRead += dwBytesRead;
    ReadFile( hFile, &TgaHeader.imageWidth, 2, &dwBytesRead, NULL );
    totRead += dwBytesRead;
    ReadFile( hFile, &TgaHeader.imageHeight, 2, &dwBytesRead, NULL );
    totRead += dwBytesRead;
    ReadFile( hFile, &TgaHeader.pixelDepth, 1, &dwBytesRead, NULL );
    totRead += dwBytesRead;
    ReadFile( hFile, &TgaHeader.imageDesc, 1, &dwBytesRead, NULL );
    totRead += dwBytesRead;

    // it has to have read at least the header length
    //
    if( totRead != 18 )
    {
        return VFW_E_INVALID_MEDIA_TYPE;
    }

    // we only read uncompressed TGA's
    //
    if( TgaHeader.imageType != 2 )
    {
        return VFW_E_INVALID_MEDIA_TYPE;
    }

    // we only read 24 bit or 32 bit TGA's
    //
    if( TgaHeader.pixelDepth < 16 )
    {
        return VFW_E_INVALID_MEDIA_TYPE;
    }

    BYTE dummy[256];
    if( TgaHeader.idLength > 256 )
    {
        return E_FAIL;
    }
    if( TgaHeader.idLength > 0 )
    {
        ReadFile( hFile, dummy, TgaHeader.idLength, &dwBytesRead, NULL );
        if( dwBytesRead != TgaHeader.idLength )
        {
            return VFW_E_INVALID_MEDIA_TYPE;
        }
    }

    memset( pBIH, 0, sizeof( BITMAPINFOHEADER ) );
    pBIH->biSize = sizeof(BITMAPINFOHEADER);
    pBIH->biWidth = TgaHeader.imageWidth;
    pBIH->biHeight = TgaHeader.imageHeight;
    pBIH->biPlanes = 1;
    pBIH->biBitCount = TgaHeader.pixelDepth;
    pBIH->biSizeImage = DIBSIZE(*pBIH);

    return NOERROR;
}

//
// output pin Constructor
//
CStilVidStream::CStilVidStream(HRESULT *phr,
                         CGenStilVid *pParent,
                         LPCWSTR pPinName) :
    CSourceStream(NAME("Generate Still Video"),phr, pParent, pPinName),
    m_pGenStilVid(pParent),
    m_rtStartTime(0),
    m_rtDuration(MAX_TIME/1000), // MUST BE INFINITE, Dexter doesn't set stop
				 // time (but not so big math on it overflows)
    m_rtNewSeg(0),
    m_rtLastStop(0),
    m_lDataLen(0), // output buffer data length
    m_dwOutputSampleCnt(0),
    m_dOutputFrmRate(0.1),
    m_bIntBufCnt(0),
    m_iBufferCnt(0),    //How many buffer we get
    m_bZeroBufCnt(0),
    m_ppbDstBuf(NULL)
{
} // (Constructor)

    //X
// destructor
CStilVidStream::~CStilVidStream()
{
    /* BUFFER POINTER */
    if (m_ppbDstBuf)
    {
	delete [] m_ppbDstBuf;
	m_ppbDstBuf=NULL;
    }

}

//
// NonDelegatingQueryInterface
//
STDMETHODIMP CStilVidStream::NonDelegatingQueryInterface(
    REFIID riid,
    void ** ppv
    )
{
    if (riid == IID_IGenVideo) {			
        return GetInterface((IGenVideo *) this, ppv);
    } else if (riid == IID_IDexterSequencer) {			
        return GetInterface((IDexterSequencer *) this, ppv);
    } else if (riid == IID_ISpecifyPropertyPages) {
        return GetInterface((ISpecifyPropertyPages *) this, ppv);
    } else if (IsEqualIID(IID_IMediaSeeking, riid)) {
        return GetInterface((IMediaSeeking *) this, ppv);
    } else {
        return CSourceStream::NonDelegatingQueryInterface(riid, ppv);
    }

}


// overridden NOT to spin when GetBuffer Fails - base class
//
HRESULT CStilVidStream::DoBufferProcessingLoop(void) {

    Command com;

    OnThreadStartPlay();

    do {
	while (!CheckRequest(&com)) {

	    IMediaSample *pSample;

	    HRESULT hr = GetDeliveryBuffer(&pSample,NULL,NULL,0);
	    if (FAILED(hr)) {
		return S_OK;	// !!! Overridden to fix this base class bug
	    }

	    // Virtual function user will override.
	    hr = FillBuffer(pSample);

	    if (hr == S_OK) {
		hr = Deliver(pSample);
                pSample->Release();

                // downstream filter returns S_FALSE if it wants us to
                // stop or an error if it's reporting an error.
                if(hr != S_OK)
                {
                  DbgLog((LOG_TRACE, 2, TEXT("Deliver() returned %08x; stopping"), hr));
                  return S_OK;
                }

	    } else if (hr == S_FALSE) {
                // derived class wants us to stop pushing data
		pSample->Release();
		DeliverEndOfStream();
		return S_OK;
	    } else {
                // derived class encountered an error
                pSample->Release();
		DbgLog((LOG_ERROR, 1, TEXT("Error %08lX from FillBuffer!!!"), hr));
                DeliverEndOfStream();
                m_pFilter->NotifyEvent(EC_ERRORABORT, hr, 0);
                return hr;
	    }

            // all paths release the sample
	}

        // For all commands sent to us there must be a Reply call!

	if (com == CMD_RUN || com == CMD_PAUSE) {
	    Reply(NOERROR);
	} else if (com != CMD_STOP) {
	    Reply((DWORD) E_UNEXPECTED);
	    DbgLog((LOG_ERROR, 1, TEXT("Unexpected command!!!")));
	}
    } while (com != CMD_STOP);

    return S_FALSE;
}

// copy and flip image or just copy. handles in-place flips
//
void CopyWithFlip(BYTE *pbDest, BYTE *pbSrc, AM_MEDIA_TYPE *pmt, bool fFlip)
{
    LONG lHeight = abs(HEADER(pmt->pbFormat)->biHeight);
    LONG lBytesPerLine = DIBWIDTHBYTES(*HEADER(pmt->pbFormat));

    if(pbDest != pbSrc)
    {
        if(fFlip)
        {
            for(LONG iLine = 0; iLine < lHeight; iLine++)
            {
                CopyMemory(pbDest + iLine * lBytesPerLine,
                           pbSrc + (lHeight - 1) * lBytesPerLine - lBytesPerLine * iLine,
                           lBytesPerLine);
            }
        }
        else
        {
            CopyMemory(pbDest, pbSrc, lHeight * lBytesPerLine);
        }
    }
    else if(fFlip)
    {
        // slower in place flip
        //
        // DIB lines start on DWORD boundaries.
        ASSERT(lBytesPerLine % sizeof(DWORD) == 0);

        for(LONG iLine = 0; iLine < lHeight / 2; iLine++)
        {
            DWORD *pdwTop = (DWORD *)(pbDest + iLine * lBytesPerLine);
            DWORD *pdwBot = (DWORD *)(pbSrc + (lHeight - 1 - iLine) * lBytesPerLine);

            for(int iw = 0; (ULONG)iw < lBytesPerLine / sizeof(DWORD); iw++)
            {
                DWORD dwTmp = *pdwTop;
                *pdwTop++ = *pdwBot;
                *pdwBot++ = dwTmp;
            }
        }
    }
}

//
// FillBuffer called by HRESULT CSourceStream::DoBufferProcessingLoop(void) {
//
// Plots a Still video into the supplied video buffer
//
// Give  a start time, a duration, and a frame rate,
// it sends  a certain size (RGB32) Still frames out time stamped appropriately starting
// at the start time.
//
HRESULT CStilVidStream::FillBuffer(IMediaSample *pms)
{
    CAutoLock foo(&m_csFilling);

    ASSERT( m_ppbDstBuf != NULL );
    ASSERT( m_iBufferCnt );

    // !!! Figure out AvgTimePerFrame and set that in the media type?

    // calc the output sample times the SAME WAY FRC DOES, or we'll HANG!
    LONGLONG llOffset = Time2Frame( m_rtNewSeg + m_rtStartTime, m_dOutputFrmRate );

    // calc the output sample's start time
    REFERENCE_TIME rtStart = Frame2Time( llOffset + m_dwOutputSampleCnt, m_dOutputFrmRate );
    rtStart -= m_rtNewSeg;


    // calc the outut sample's stop time
    REFERENCE_TIME rtStop = Frame2Time( llOffset + m_dwOutputSampleCnt + 1, m_dOutputFrmRate );
    rtStop -= m_rtNewSeg;

    // animated GIFs have variable frame rate and need special code to
    // figure out the time stamps
    if (m_pGenStilVid->m_bFileType == STILLVID_FILETYPE_GIF &&
			m_pGenStilVid->m_pList != m_pGenStilVid->m_pList->next){
	// gif delay is in 1/100th seconds
        REFERENCE_TIME rtDur = m_pGenStilVid->m_pList->delayTime * GIF_UNIT;
	ASSERT(rtDur > 0);	// should have been fixed up already
	if (m_dwOutputSampleCnt > 0) {
	    rtStart = m_rtLastStop;
	} else {
	    rtStart = 0;
	}
	rtStop = rtStart + rtDur;
	m_rtLastStop = rtStop;
    }

    // seeking from (n,n) should at least send SOMETHING, or the sample grabber
    // won't work (it seeks us to (0,0)
    if ( rtStart > m_rtStartTime + m_rtDuration ||
		(rtStart == m_rtStartTime + m_rtDuration && m_rtDuration > 0))
    {
        DbgLog((LOG_TRACE,3,TEXT("Still: All done")));
        return S_FALSE;
    }

    BYTE *pData;

    //pms: output media sample pointer
    pms->GetPointer(&pData);	    //get pointer to output buffer


    USES_CONVERSION;

    if (m_pGenStilVid->m_fAllowSeq && m_pGenStilVid->m_lpszDIBFileTemplate)
    {
	HRESULT hr = 0;
	
	// sequence
	TCHAR		ach[_MAX_PATH];
	DbgLog((LOG_TRACE, 2, TEXT("!!! %s\n"), m_pGenStilVid->m_lpszDIBFileTemplate));
	wsprintf(ach, m_pGenStilVid->m_lpszDIBFileTemplate,
		(int)(llOffset + m_dwOutputSampleCnt + m_pGenStilVid->m_dwFirstFile));
        WCHAR * wach = T2W( ach );

	if(m_pGenStilVid->m_bFileType ==STILLVID_FILETYPE_DIB)
	{
	    HANDLE hFile = CreateFile(ach,		//file name	
			      GENERIC_READ,		//DesiredAccess
                              FILE_SHARE_READ,		//dwShareMode
                              NULL,			//SecurityAttrib
                              OPEN_EXISTING,		//dwCreationDisposition
                              0,			//dwFlagsAndAttributes
                              NULL);			//hTemplateFile

	    if ( hFile == INVALID_HANDLE_VALUE) {
		DbgLog((LOG_TRACE, 2, TEXT("Could not open %s\n"), ach));
		// VITALLY IMPORTANT to return S_FALSE, which means stop pushing
		// This MAY NOT BE AN ERROR, if we've played all we need to play
		// signalling an error would grind dexter to a halt needlessly
		return S_FALSE;
	    }

	    //DIB
	    CMediaType TmpMt;
	    hr= OpenDIBFile (hFile, NULL, &TmpMt, pData );

	    CloseHandle(hFile);

	    if(hr!=NOERROR)
	     return S_FALSE;

            // sign flipped?
            if(HEADER(TmpMt.pbFormat)->biHeight == -HEADER(m_mt.pbFormat)->biHeight) {
                // flip image (in-place)
                CopyWithFlip(pData, pData, &TmpMt, true);
            }

	    //we only stream media samples which have same mt
	    if(TmpMt!=m_pGenStilVid->m_mt) {
		// oops, one of these things is not like the others...
                VARIANT v;
                VariantInit(&v);

                v.vt = VT_BSTR;
                v.bstrVal = SysAllocString( wach );

		hr = E_INVALIDARG;

                if( !v.bstrVal )
                {
                    return E_OUTOFMEMORY;
                }

		m_pGenStilVid->_GenerateError(2, DEX_IDS_DIBSEQ_NOTALLSAME,
							hr, &v);

                SysFreeString( v.bstrVal );
		return S_FALSE;
	    }
	}
	else if(m_pGenStilVid->m_bFileType ==STILLVID_FILETYPE_TGA)
	{
	    HANDLE hFile = CreateFile(ach,		//file name	
			      GENERIC_READ,		//DesiredAccess
                              FILE_SHARE_READ,		//dwShareMode
                               NULL,			//SecurityAttrib
                              OPEN_EXISTING,		//dwCreationDisposition
                              0,			//dwFlagsAndAttributes
                              NULL);			//hTemplateFile

	    if ( hFile == INVALID_HANDLE_VALUE) {
		DbgLog((LOG_TRACE, 2, TEXT("Could not open %s\n"), ach));
		// VITALLY IMPORTANT to return S_FALSE, which means stop pushing
		// This MAY NOT BE AN ERROR, if we've played all we need to play
		// signalling an error would grind dexter to a halt needlessly
		return S_FALSE;
	    }

	    //DIB
	    CMediaType TmpMt;
	    hr= OpenTGAFile (hFile, NULL, &TmpMt, pData );

            // sign flipped?
            if(HEADER(TmpMt.pbFormat)->biHeight == -HEADER(m_mt.pbFormat)->biHeight) {
                // flip image (in-place)
                CopyWithFlip(pData, pData, &TmpMt, true);
            }

	    CloseHandle(hFile);

	    if(hr!=NOERROR)
	     return S_FALSE;

	    //we only stream media samples which have same mt
	    if(TmpMt!=m_pGenStilVid->m_mt) {
		// oops, one of these things is not like the others...
                VARIANT v;
                VariantInit(&v);

                v.vt = VT_BSTR;
                v.bstrVal = SysAllocString( wach );

		hr = E_INVALIDARG;

                if( !v.bstrVal )
                {
                    return E_OUTOFMEMORY;
                }

		m_pGenStilVid->_GenerateError(2, DEX_IDS_DIBSEQ_NOTALLSAME,
							hr, &v);

                SysFreeString( v.bstrVal );
		return S_FALSE;
	    }
	}
	else
	{
	    //jpeg
	    HBITMAP hBitMap;
	    BITMAP bi;
	    CMediaType TmpMt;
	    hBitMap=LoadJPEGImage(ach, &TmpMt);
            WCHAR * wach = T2W( ach );

	    if (hBitMap == NULL)
	        return S_FALSE;

            bool fFlip = false;
            if(HEADER(TmpMt.pbFormat)->biHeight == -HEADER(m_mt.pbFormat)->biHeight) {
                fFlip = true;
            }

	    //we only stream media samples which have same mt
	    if(TmpMt!=m_pGenStilVid->m_mt) {
		// oops, one of these things is not like the others...
                VARIANT v;
                VariantInit(&v);

                v.vt = VT_BSTR;
                v.bstrVal = SysAllocString( wach );

		hr = E_INVALIDARG;

                if( !v.bstrVal )
                {
                    return E_OUTOFMEMORY;
                }

		m_pGenStilVid->_GenerateError(2, DEX_IDS_DIBSEQ_NOTALLSAME,
							hr, &v);
                SysFreeString( v.bstrVal );
		return S_FALSE;
	    }

	    if(hBitMap!=NULL)
	    {
		//get buffer pointer
		GetObject(hBitMap, sizeof(BITMAP),&bi);

  		//we can do something to avoid copy later.!!!!!
                CopyWithFlip(pData, (PBYTE)bi.bmBits, &m_mt, fFlip);

		hr=NOERROR;
	    }
	}
    }
    else
    {
        if(m_pGenStilVid->m_bFileType==STILLVID_FILETYPE_GIF)
        {
	    // !!! avoid this copying

            bool fFlip = false;
            if(HEADER(m_pGenStilVid->m_mt.pbFormat)->biHeight == -HEADER(m_mt.pbFormat)->biHeight) {
                fFlip = true;
            }

            CopyWithFlip(pData, m_pGenStilVid->m_pList->pbImage, &m_mt, fFlip);

	    // circular...
            m_pGenStilVid->m_pList = m_pGenStilVid->m_pList->next;
        }
        else
        {
            if( m_bZeroBufCnt < m_iBufferCnt  )	
            {
                //
                // there is no guarenty that the buffer we just get is not initilized before
                //
                int	i	= 0;
                BOOL	bInit	= FALSE;
                while ( i <  m_bZeroBufCnt )
                {
                    if( m_ppbDstBuf[ i++ ] == pData)
                    {
                        bInit	= TRUE;
                        break;
                    }
                }

                if( bInit   == FALSE )
                {
                    bool fFlip = false;
                    if(HEADER(m_pGenStilVid->m_mt.pbFormat)->biHeight == -HEADER(m_mt.pbFormat)->biHeight) {
                        fFlip = true;
                    }
                    CopyWithFlip(pData, m_pGenStilVid->m_pbData, &m_mt, fFlip);
                    m_ppbDstBuf[i] = pData;
                    m_bZeroBufCnt++;
                }
            }
        }
    }


    DbgLog( ( LOG_TRACE, 2, TEXT("StillVid::FillBuffer, sample = %ld to %ld"), long( rtStart/ 10000 ), long( rtStop / 10000 ) ) );

    pms->SetTime( &rtStart,&rtStop);

    m_dwOutputSampleCnt++;
    pms->SetActualDataLength(m_lDataLen);
    pms->SetSyncPoint(TRUE);
    return NOERROR;

} // FillBuffer


//
// GetMediaType
//
// return a 32bit mediatype
//
HRESULT CStilVidStream::GetMediaType(int iPosition, CMediaType *pmt)
{
    CAutoLock cAutoLock(m_pFilter->pStateLock());

    if(iPosition == 0)
    {
        //Decided by CGenStilVid reads the input file
        m_pGenStilVid->get_CurrentMT(pmt);
    }
    else if(iPosition == 1)
    {
        //Decided by CGenStilVid reads the input file
        m_pGenStilVid->get_CurrentMT(pmt);

        // we can flip the image.
        HEADER(pmt->Format())->biHeight = - HEADER(pmt->Format())->biHeight;
    }
    else
    {
        return VFW_S_NO_MORE_ITEMS;
    }

    return NOERROR;

} // GetMediaType


// set media type
//
HRESULT CStilVidStream::SetMediaType(const CMediaType* pmt)
{
    HRESULT hr;
    DbgLog((LOG_TRACE,2,TEXT("SetMediaType %x %dbit %dx%d"),
		HEADER(pmt->Format())->biCompression,
		HEADER(pmt->Format())->biBitCount,
		HEADER(pmt->Format())->biWidth,
		HEADER(pmt->Format())->biHeight));

    //Decided by CGenStilVid reads the input file
    CMediaType mt;
    m_pGenStilVid->get_CurrentMT(&mt);


    hr = CheckMediaType(pmt);
    if(SUCCEEDED(hr)) {
        hr =  CSourceStream::SetMediaType(pmt);
    }
    return hr;
}

//
// CheckMediaType
//
// We accept mediatype =vids, subtype =MEDIASUBTYPE_ARGB32
// Returns E_INVALIDARG if the mediatype is not acceptable
//
HRESULT CStilVidStream::CheckMediaType(const CMediaType *pMediaType)
{
    CAutoLock cAutoLock(m_pFilter->pStateLock());

    //Decided by CGenStilVid reads the input file
    CMediaType mt;
    m_pGenStilVid->get_CurrentMT(&mt);

    if ( mt != *pMediaType)
    {
        // we can flip
        HEADER(mt.Format())->biHeight = - HEADER(mt.Format())->biHeight;
        if ( mt != *pMediaType) {
            return VFW_E_TYPE_NOT_ACCEPTED;
        }
    }

    return S_OK;  // This format is acceptable.

} // CheckMediaType


//
// Since the Original image will be only coped once,  it does not matter who's buffer to use
//
HRESULT CStilVidStream::DecideAllocator(IMemInputPin *pPin, IMemAllocator **ppAlloc)
{
    HRESULT hr = NOERROR;
    *ppAlloc = NULL;

    // get downstream prop request
    // the derived class may modify this in DecideBufferSize, but
    // we assume that he will consistently modify it the same way,
    // so we only get it once
    ALLOCATOR_PROPERTIES prop;
    ZeroMemory(&prop, sizeof(prop));

    // whatever he returns, we assume prop is either all zeros
    // or he has filled it out.
    pPin->GetAllocatorRequirements(&prop);

    // if he doesn't care about alignment, then set it to 1
    if (prop.cbAlign == 0) {
        prop.cbAlign = 1;
    }

    /* Try the allocator provided by the input pin */

    hr = pPin->GetAllocator(ppAlloc);
    if (SUCCEEDED(hr)) {

        hr = DecideBufferSize(*ppAlloc, &prop);
        if (SUCCEEDED(hr)) {
	    // !!! OVERRIDDEN to say Read Only
            hr = pPin->NotifyAllocator(*ppAlloc, TRUE);
            if (SUCCEEDED(hr)) {
                return NOERROR;
            }
        }
    }

    /* If the GetAllocator failed we may not have an interface */

    if (*ppAlloc) {
        (*ppAlloc)->Release();
        *ppAlloc = NULL;
    }

    /* Try the output pin's allocator by the same method */

    hr = InitAllocator(ppAlloc);
    if (SUCCEEDED(hr)) {

        // note - the properties passed here are in the same
        // structure as above and may have been modified by
        // the previous call to DecideBufferSize
        hr = DecideBufferSize(*ppAlloc, &prop);
        if (SUCCEEDED(hr)) {
	    // !!! OVERRIDDEN to say Read Only
            hr = pPin->NotifyAllocator(*ppAlloc, TRUE);
            if (SUCCEEDED(hr)) {
                return NOERROR;
            }
        }
    }

    /* Likewise we may not have an interface to release */

    if (*ppAlloc) {
        (*ppAlloc)->Release();
        *ppAlloc = NULL;
    }
    return hr;
}

//
// DecideBufferSize
//
// This will always be called after the format has been sucessfully
// negotiated. So we have a look at m_mt to see what size image we agreed.
// Then we can ask for buffers of the correct size to contain them.
//
HRESULT CStilVidStream::DecideBufferSize(IMemAllocator *pAlloc,ALLOCATOR_PROPERTIES *pProperties)
{
    CAutoLock cAutoLock(m_pFilter->pStateLock());

    ASSERT(pAlloc);
    ASSERT(pProperties);
    HRESULT hr = NOERROR;

    VIDEOINFO *pvi = (VIDEOINFO *) m_mt.Format();

    if (pProperties->cBuffers < MAXBUFFERCNT)
        pProperties->cBuffers = MAXBUFFERCNT;   //only one read-only buffer
    if (pProperties->cbBuffer < (long)DIBSIZE(pvi->bmiHeader))
        pProperties->cbBuffer = DIBSIZE(pvi->bmiHeader);
    if (pProperties->cbAlign == 0)
        pProperties->cbAlign = 1;


    // Ask the allocator to reserve us some sample memory, NOTE the function
    // can succeed (that is return NOERROR) but still not have allocated the
    // memory that we requested, so we must check we got whatever we wanted

    ALLOCATOR_PROPERTIES Actual;
    hr = pAlloc->SetProperties(pProperties,&Actual);
    if (FAILED(hr)) {
        return hr;
    }

    // Is this allocator unsuitable

    if (Actual.cbBuffer < (long)DIBSIZE(pvi->bmiHeader)) {
        return E_FAIL;
    }

    //because I am not insisting my own buffer, I may get more than MAXBUFFERCNT buffers.
    m_iBufferCnt =Actual.cBuffers; //how many buffer need to be set to 0

    return NOERROR;

} // DecideBufferSize



//
// OnThreadCreate
//
//
HRESULT CStilVidStream::OnThreadCreate()
{
    // we have to have at least MAXBUFFERCNT buffer
    ASSERT(m_iBufferCnt >= MAXBUFFERCNT);

    //output frame cnt
    m_dwOutputSampleCnt	    =0;

    //how many buffer is already set to 0.
    m_bZeroBufCnt	    =0;

    // actual output buffer's data size
    VIDEOINFO *pvi = (VIDEOINFO *) m_mt.Format();
    m_lDataLen = DIBSIZE(pvi->bmiHeader);

    // will be used to zero the Dst buffers
    delete [] m_ppbDstBuf;
    m_ppbDstBuf = new BYTE *[ m_iBufferCnt ];   //NULL;
    if( !m_ppbDstBuf )
    {
        return E_OUTOFMEMORY;
    }

    for (int i=0; i<m_iBufferCnt; i++)
	m_ppbDstBuf[i]=NULL;

    // don't reset m_rtNewSeg!  We might have seeked while stopped

    // now round m_rtStartTime to be on a frame boundary!
    LONGLONG llOffset = Time2Frame( m_rtStartTime, m_dOutputFrmRate );
    m_rtStartTime = Frame2Time( llOffset, m_dOutputFrmRate );


    return NOERROR;

} // OnThreadCreate


//
// Notify
//
//
STDMETHODIMP CStilVidStream::Notify(IBaseFilter * pSender, Quality q)
{
    //Even I am later, I do not care. I still send my time frame as nothing happened.
    return NOERROR;

} // Notify

//
// GetPages
//
// Returns the clsid's of the property pages we support
//
STDMETHODIMP CStilVidStream::GetPages(CAUUID *pPages)
{
    pPages->cElems = 1;
    pPages->pElems = (GUID *) CoTaskMemAlloc(sizeof(GUID));
    if (pPages->pElems == NULL)
    {
        return E_OUTOFMEMORY;
    }
    *(pPages->pElems) = CLSID_GenStilPropertiesPage;
    return NOERROR;

} // GetPages


//
// IDexterSequencer
//


STDMETHODIMP CStilVidStream::get_OutputFrmRate( double *dpFrmRate )
{
    CAutoLock cAutolock(m_pFilter->pStateLock());

    CheckPointer(dpFrmRate,E_POINTER);

    *dpFrmRate = m_dOutputFrmRate;

    return NOERROR;

} // get_OutputFrmRate


//
// Frame rate can be changed as long as the filter is stopped.
//
STDMETHODIMP CStilVidStream::put_OutputFrmRate( double dFrmRate )
{
    CAutoLock cAutolock(m_pFilter->pStateLock());
    //can not change property if our filter is not currently stopped
    if(!IsStopped() )
      return VFW_E_WRONG_STATE;

    // don't blow up with 0 fps, but don't allow dib sequences
    if (dFrmRate == 0.0) {
        m_dOutputFrmRate = 0.01;	// ???
	m_pGenStilVid->m_fAllowSeq = FALSE;
    } else {
        m_dOutputFrmRate = dFrmRate;
	m_pGenStilVid->m_fAllowSeq = TRUE;
    }

    return NOERROR;

} // put_OutputFrmRate

STDMETHODIMP CStilVidStream::get_MediaType( AM_MEDIA_TYPE *pmt )
{
    CAutoLock cAutolock(m_pFilter->pStateLock());
    CheckPointer(pmt,E_POINTER);

    *pmt=m_mt;   //return current media type

    return E_NOTIMPL;

}

//
// size can be changed only the output pin is not connected yet.
//
STDMETHODIMP CStilVidStream::put_MediaType( const AM_MEDIA_TYPE *pmt )
{
    CAutoLock cAutolock(m_pFilter->pStateLock());
    CheckPointer(pmt,E_POINTER);

    if ( IsConnected() )
	return VFW_E_ALREADY_CONNECTED;

    // only useful when ImportSrcBuffer() is called.
    // If importSrcBuffer() is not called, the load() will reset m_mt
    m_pGenStilVid->put_CurrentMT(*pmt);


    return NOERROR;

}

// !!! We only support 1 start/stop/skew right now

//
STDMETHODIMP CStilVidStream::GetStartStopSkewCount(int *piCount)
{
    CheckPointer(piCount, E_POINTER);
    *piCount = 1;
    return S_OK;
}


STDMETHODIMP CStilVidStream::GetStartStopSkew(REFERENCE_TIME *prtStart, REFERENCE_TIME *prtStop, REFERENCE_TIME *prtSkew, double *pdRate )
{
    CAutoLock cAutolock(m_pFilter->pStateLock());
    CheckPointer(prtStart,E_POINTER);
    CheckPointer(prtStop,E_POINTER);
    CheckPointer(prtSkew,E_POINTER);
    CheckPointer(pdRate,E_POINTER);

    //can not change starttime if our filter is not currently stopped
    if(!IsStopped() )
	return VFW_E_WRONG_STATE;

    *prtStart= m_rtStartTime;
    *prtStop= m_rtStartTime + m_rtDuration;
    *prtSkew= 0;
    *pdRate = 1.0;
    return NOERROR;

}

//
// Start/Stop can be changed as long as the filter is stopped.
//
STDMETHODIMP CStilVidStream::AddStartStopSkew(REFERENCE_TIME rtStart, REFERENCE_TIME rtStop, REFERENCE_TIME rtSkew, double dRate )
{

    if (dRate != 1.0)
	return E_INVALIDARG;

    CAutoLock cAutolock(m_pFilter->pStateLock());
    //can not change starttime if our filter is not currently stopped
    if(!IsStopped() )
	return VFW_E_WRONG_STATE;

    m_rtStartTime= rtStart;
    m_rtDuration= rtStop - rtStart;
    return NOERROR;

}


//
STDMETHODIMP CStilVidStream::ClearStartStopSkew()
{
    return S_OK;
}


// --- IMediaSeeking methods ----------

STDMETHODIMP CStilVidStream::GetCapabilities(DWORD * pCaps)
{
    CheckPointer(pCaps,E_POINTER);

    // we always know the current position
    *pCaps =     AM_SEEKING_CanSeekAbsolute
		   | AM_SEEKING_CanSeekForwards
		   | AM_SEEKING_CanSeekBackwards
		   | AM_SEEKING_CanGetCurrentPos
		   | AM_SEEKING_CanGetStopPos
		   | AM_SEEKING_CanGetDuration;
		   //| AM_SEEKING_CanDoSegments
		   //| AM_SEEKING_Source;	  //has to flush
    return S_OK;
}


STDMETHODIMP CStilVidStream::CheckCapabilities(DWORD * pCaps)
{
    CheckPointer(pCaps,E_POINTER);

    DWORD dwMask = 0;
    GetCapabilities(&dwMask);
    *pCaps &= dwMask;

    return S_OK;
}


STDMETHODIMP CStilVidStream::IsFormatSupported(const GUID * pFormat)
{
    CheckPointer(pFormat,E_POINTER);
    return (*pFormat == TIME_FORMAT_MEDIA_TIME) ? S_OK : S_FALSE;
}

STDMETHODIMP CStilVidStream::QueryPreferredFormat(GUID *pFormat)
{
    CheckPointer(pFormat,E_POINTER);
    *pFormat = TIME_FORMAT_MEDIA_TIME;
    return S_OK;
}

STDMETHODIMP CStilVidStream::SetTimeFormat(const GUID * pFormat)
{
    CheckPointer(pFormat,E_POINTER);

    if(*pFormat == TIME_FORMAT_MEDIA_TIME)
	return S_OK;
    else
	return E_FAIL;
}

STDMETHODIMP CStilVidStream::GetTimeFormat(GUID *pFormat)
{
    CheckPointer(pFormat,E_POINTER);
    *pFormat = TIME_FORMAT_MEDIA_TIME ;
    return S_OK;
}

STDMETHODIMP CStilVidStream::IsUsingTimeFormat(const GUID * pFormat)
{
    CheckPointer(pFormat,E_POINTER);
    if (*pFormat == TIME_FORMAT_MEDIA_TIME)
	return S_OK;
    else
	return S_FALSE;
}

//
//  !!SetPositions!!
//
STDMETHODIMP CStilVidStream::SetPositions( LONGLONG * pCurrent, DWORD CurrentFlags
			  , LONGLONG * pStop, DWORD StopFlags )
{
    // make sure we're not filling a buffer right now
    m_csFilling.Lock();

    HRESULT hr;
    REFERENCE_TIME rtStart, rtStop;

    // we don't do segments ->can't call EC_ENDOFSEGMENT at end of the stream
    if ((CurrentFlags & AM_SEEKING_Segment) ||
				(StopFlags & AM_SEEKING_Segment)) {
    	DbgLog((LOG_TRACE,1,TEXT("Still: ERROR-Seek used EC_ENDOFSEGMENT!")));
        m_csFilling.Unlock();
	return E_INVALIDARG;
    }

    // default to current values unless this seek changes them
    GetCurrentPosition(&rtStart);
    GetStopPosition(&rtStop);

    // figure out where we're seeking to
    DWORD dwFlags = (CurrentFlags & AM_SEEKING_PositioningBitsMask);
    if (dwFlags == AM_SEEKING_AbsolutePositioning) {
	CheckPointer(pCurrent, E_POINTER);
	rtStart = *pCurrent;
    } else if (dwFlags == AM_SEEKING_RelativePositioning) {
	CheckPointer(pCurrent, E_POINTER);
	hr = GetCurrentPosition(&rtStart);
	rtStart += *pCurrent;
    } else if (dwFlags) {
    	DbgLog((LOG_TRACE,1,TEXT("Switch::Invalid Current Seek flags")));
        m_csFilling.Unlock();
	return E_INVALIDARG;
    }

    dwFlags = (StopFlags & AM_SEEKING_PositioningBitsMask);
    if (dwFlags == AM_SEEKING_AbsolutePositioning) {
	CheckPointer(pStop, E_POINTER);
	rtStop = *pStop;
    } else if (dwFlags == AM_SEEKING_RelativePositioning) {
	CheckPointer(pStop, E_POINTER);
	hr = GetStopPosition(&rtStop);
	rtStop += *pStop;
    } else if (dwFlags == AM_SEEKING_IncrementalPositioning) {
	CheckPointer(pStop, E_POINTER);
	hr = GetCurrentPosition(&rtStop);
	rtStop += *pStop;
    }

    DbgLog((LOG_TRACE,3,TEXT("STILL:  Start=%d Stop=%d"),
			(int)(rtStart / 10000), (int)(rtStop / 10000)));

    // flush first, so that our thread won't be blocked delivering
    DeliverBeginFlush();

    // Unlock/Stop so that our thread can wake up and stop without hanging
    m_csFilling.Unlock();
    Stop();

    // now fix the new values
    // now do the actual seek - rounding the start time to a frame boundary
    LONGLONG llOffset = Time2Frame( rtStart, m_dOutputFrmRate );
    m_rtStartTime = Frame2Time( llOffset, m_dOutputFrmRate );

    // for an animated gif, there is a variable frame rate, and m_dOutputFrmRate
    // is nonsense, so we need to calculate where the seek was
    if (m_pGenStilVid->m_bFileType == STILLVID_FILETYPE_GIF &&
	    m_pGenStilVid->m_pListHead != m_pGenStilVid->m_pListHead->next) {
	m_rtStartTime = rtStart / m_pGenStilVid->m_rtGIFTotal;	
	REFERENCE_TIME rtOff = rtStart % m_pGenStilVid->m_rtGIFTotal;
	REFERENCE_TIME rtGIF = 0;
	m_pGenStilVid->m_pList = m_pGenStilVid->m_pListHead;
	do {
	    if (rtGIF + m_pGenStilVid->m_pList->delayTime * GIF_UNIT > rtOff) {
		break;
	    }
	    rtGIF += m_pGenStilVid->m_pList->delayTime * GIF_UNIT;
	    m_pGenStilVid->m_pList = m_pGenStilVid->m_pList->next;
	    ASSERT(m_pGenStilVid->m_pList != m_pGenStilVid->m_pListHead);
	
	} while (m_pGenStilVid->m_pList != m_pGenStilVid->m_pListHead);
	m_rtStartTime *= m_pGenStilVid->m_rtGIFTotal;
	m_rtStartTime += rtGIF;

	// Now m_rtStartTime and m_pList are set to behave properly post seek
        DbgLog((LOG_TRACE,2,TEXT("Seeked %dms into GIF cycle of %d"),
	    (int)(rtOff / 10000), (int)(m_pGenStilVid->m_rtGIFTotal / 10000)));
        DbgLog((LOG_TRACE,2,TEXT("NewSeg will be %d"),
					(int)(m_rtStartTime / 10000)));
    }

    m_rtDuration = rtStop - m_rtStartTime;

    // now finish flushing
    DeliverEndFlush();

    DeliverNewSegment(m_rtStartTime, rtStop, 1.0);
    m_rtNewSeg = m_rtStartTime;

    // now make the time stamps 0 based
    m_rtStartTime = 0;

    // reset same stuff we reset when we start streaming
    m_dwOutputSampleCnt = 0;
    //m_bZeroBufCnt = 0;

    // now start the thread up again
    Pause();

    DbgLog((LOG_TRACE,3,TEXT("Completed STILL seek  dur=%d"),
				(int)(m_rtDuration / 10000)));

    return S_OK;
}

STDMETHODIMP CStilVidStream::GetPositions(LONGLONG *pCurrent, LONGLONG * pStop)
{
    CheckPointer(pCurrent, E_POINTER);
    CheckPointer(pStop, E_POINTER);
    GetCurrentPosition(pCurrent);
    GetStopPosition(pStop);
    return S_OK;
}

//
// !! GetCurrentPosition !!
//
STDMETHODIMP
CStilVidStream::GetCurrentPosition(LONGLONG *pCurrent)
{
    CheckPointer(pCurrent, E_POINTER);
    *pCurrent = m_rtNewSeg + m_rtStartTime +
			Frame2Time(m_dwOutputSampleCnt, m_dOutputFrmRate);
    return S_OK;
}

//
// !! GetStopPostion !!
//
STDMETHODIMP CStilVidStream::GetStopPosition(LONGLONG *pStop)
{
    CheckPointer(pStop, E_POINTER);
    *pStop = m_rtNewSeg + m_rtStartTime + m_rtDuration;
    return S_OK;
}

STDMETHODIMP
CStilVidStream::GetAvailable( LONGLONG *pEarliest, LONGLONG *pLatest )
{
    CheckPointer(pEarliest, E_POINTER);
    CheckPointer(pLatest, E_POINTER);
    *pEarliest = 0;
    *pLatest = MAX_TIME;
    return S_OK;
}

//*x*
// if it is DIB sequence, figure out the
//*X*
STDMETHODIMP
CStilVidStream::GetDuration( LONGLONG *pDuration )
{
    CheckPointer(pDuration, E_POINTER);

    // if we are playing an animated GIF, give the app the actual length
    // !!! We still play it forever in a loop, but just report the length
    // to be nice
    if (m_pGenStilVid->m_bFileType == STILLVID_FILETYPE_GIF &&
		m_pGenStilVid->m_pList != m_pGenStilVid->m_pList->next) {
        *pDuration = m_pGenStilVid->m_rtGIFTotal;
    // for a dib sequence, give infinity, or whatever we were last seeked to
    } else if (m_pGenStilVid->m_fAllowSeq && m_pGenStilVid->m_lpszDIBFileTemplate) {
        *pDuration = m_rtDuration;
    // for a single image, give 0?
    } else {
        *pDuration = 0;
    }
    return S_OK;
}

STDMETHODIMP
CStilVidStream::GetRate( double *pdRate )
{
    CheckPointer(pdRate, E_POINTER);
    *pdRate = 1.0;
    return S_OK;
}

STDMETHODIMP
CStilVidStream::SetRate( double dRate )
{
    // yeah, whatever, the FRC doesn't know we're a still, so it will set
    // funky rates
    return S_OK;
}

// util function for read DIB sequece

/*	-	-	-	-	-	-	-	-	*/

//
// This function takes the name of the first file in a DIB sequence, and
// returns a printf() specifier which can be used to create the names in
// the sequence, along with minimum and maximum values that can be used.
//
//
// Examples:
//  lpszFileName = "FOO0047.DIB"
//	 -> lpszTemplate = "FOO%04d.DIB", dwMaxValue = 9999, return = 47
//
//  lpszFileName = "TEST01.DIB"
//	 -> lpszTemplate = "TEST%01d.DIB", dwMaxValue = 9, return = 1
//
//  lpszFileName = "TEST1.DIB"
//	 -> lpszTemplate = "TEST%d.DIB", dwMaxValue = 9999, return = 1
//
//  lpszFileName = "SINGLE.DIB"
//	 -> lpszTemplate = "SINGLE.DIB", dwMaxValue = 0, return = 0
//
static DWORD dseqParseFileName(	LPTSTR lpszFileName,	    //file name
				LPTSTR lpszTemplate,	    //
				DWORD FAR * lpdwMaxValue)
{

    TCHAR	aTchar[_MAX_PATH];
    DWORD	dwFirst;
    WORD	wFieldWidth;
    DWORD	dwMult;
    BOOL	fLeadingZero = FALSE;


    LPTSTR	lp;
    LPTSTR	lp2;
    LPTSTR	lpExt;

    /* Find end of string */
    lp2 = lpszFileName;
    lp = aTchar;

    while (*lp2)
    {
	*lp++ = *lp2++;
    }

    *lp = TEXT('\0') ;

    /* Make lp2 point at last character of base filename (w/o extension) */
    /* Make lpExt point at the extension (without the dot) */
    for (lp2 = lp; *lp2 != TEXT('.'); ) {
	lpExt = lp2;
	if ((lp2 == aTchar) || ( *lp2 == TEXT('\\'))
				|| (*lp2 == TEXT(':')) || (*lp2 ==TEXT('!'))) {
	    /* There is no extension */
	    lp2 = lp;
	    lpExt = lp;
	    break;
	}
	lp2=CharPrev(aTchar,lp2);
    }

    lp2=CharPrev(aTchar,lp2);

    // Count the number of numeric characters here....
    dwFirst = 0;
    wFieldWidth = 0;
    dwMult = 1;
    while (lp2 >= aTchar && (*lp2 >= TEXT('0')) && (*lp2 <= TEXT('9'))) {
	fLeadingZero = (*lp2 == TEXT('0'));
	dwFirst += dwMult * (*lp2 - TEXT('0'));
	dwMult *= 10;
	wFieldWidth++;
	lp2=CharPrev(aTchar, lp2);
    }

    *lpdwMaxValue = dwMult - 1;

    lp2=CharNext(lp2);
    *lp2 = TEXT('\0');

    // Make the format specifier....
    if (wFieldWidth) {
	if (fLeadingZero) {
	    wsprintf(lpszTemplate,TEXT("%s%%0%uu.%s"),
			      aTchar, (int)wFieldWidth,lpExt);
	} else {
	    wsprintf(lpszTemplate,TEXT("%s%%u.%s"),
			     aTchar,lpExt);
	    *lpdwMaxValue = 999999L;
	    // !!! This should really be based on the number of
	    // characters left after the base name....
	}
    } else
	wsprintf(lpszTemplate,TEXT("%s.%s"),
			 aTchar, lpExt);
	
    DbgLog((LOG_TRACE,3,TEXT("First = %u, Width = %u, Template = '%s'"),
			(int)dwFirst, (int)wFieldWidth, lpszTemplate));

    return dwFirst;
}

//
// count how many DIB sequence file
static DWORD dseqFileNumber( LPTSTR lpszTemplate, DWORD dwFirstFile, DWORD dwMaxDIBFileCnt)
{
    //DIB sequence, count how many files are present
    TCHAR		ach[_MAX_PATH];
    DWORD		dwFrame;
	
    for (dwFrame = 0; TRUE; dwFrame++) {
	if (dwFrame > dwMaxDIBFileCnt)
	    break;

	wsprintf(ach,lpszTemplate, dwFrame + dwFirstFile);

	HANDLE hFile = CreateFile(ach,		//file name	
				GENERIC_READ,		//DesiredAccess
                              FILE_SHARE_READ,		//dwShareMode
                              NULL,			//SecurityAttrib
                              OPEN_EXISTING,		//dwCreationDisposition
                              0,			//dwFlagsAndAttributes
                              NULL);			//hTemplateFile

	if ( hFile == INVALID_HANDLE_VALUE) {
	    DbgLog((LOG_TRACE, 2, TEXT("Could not open %s\n"), ach));
	    break;
	}
	CloseHandle(hFile);
    }
    return dwFrame;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\switch\outpin.cpp ===
#include <streams.h>
#include <qeditint.h>
#include <qedit.h>
#include "switch.h"
#include "..\util\conv.cxx"
#include "..\util\filfuncs.h"
#include "..\render\dexhelp.h"
#include "..\util\perf_defs.h"

const int TRACE_EXTREME = 0;
const int TRACE_HIGHEST = 2;
const int TRACE_MEDIUM = 3;
const int TRACE_LOW = 4;
const int TRACE_LOWEST = 5;

const int LATE_THRESHOLD = 1 * UNITS / 10;
const int JUMP_AHEAD_BY = 1 * UNITS / 4;

// ================================================================
// CBigSwitchOutputPin constructor
// ================================================================

CBigSwitchOutputPin::CBigSwitchOutputPin(TCHAR *pName,
                             CBigSwitch *pSwitch,
                             HRESULT *phr,
                             LPCWSTR pPinName) :
    CBaseOutputPin(pName, pSwitch, pSwitch, phr, pPinName) ,
    m_pSwitch(pSwitch)
{
    DbgLog((LOG_TRACE, TRACE_LOW, TEXT("::CBigSwitchOutputPin")));
    ASSERT(pSwitch);
}



//
// CBigSwitchOutputPin destructor
//
CBigSwitchOutputPin::~CBigSwitchOutputPin()
{
    DbgLog((LOG_TRACE, TRACE_LOW, TEXT("::~CBigSwitchOutputPin")));
    //ASSERT(m_pOutputQueue == NULL);
}


// overridden to allow cyclic-looking graphs - this output is not connected
// to any of our input pins
//
STDMETHODIMP CBigSwitchOutputPin::QueryInternalConnections(IPin **apPin, ULONG *nPin)
{
    DbgLog((LOG_TRACE,99,TEXT("CBigSwitchOut::QueryInternalConnections")));
    CheckPointer(nPin, E_POINTER);
    *nPin = 0;
    return S_OK;
}


//
// DecideBufferSize
//
// This has to be present to override the PURE virtual class base function
//
// !!! insist on max buffers of all inputs to avoid hanging?
HRESULT CBigSwitchOutputPin::DecideBufferSize(IMemAllocator *pAllocator,
                                        ALLOCATOR_PROPERTIES * pProperties)
{
    DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("CBigSwitchOut[%d]::DecideBufferSize"),
								m_iOutpin));

    HRESULT hrRet = S_OK;

    // !!! don't lie? admit we have more buffers in a pool?
    if (pProperties->cBuffers == 0)
        pProperties->cBuffers = 1;

    // bump up this allocator to have as much alignment and prefix as the
    // highest required by any pin
    if (m_pSwitch->m_cbPrefix > pProperties->cbPrefix)
        pProperties->cbPrefix = m_pSwitch->m_cbPrefix;
    if (m_pSwitch->m_cbAlign > pProperties->cbAlign)
        pProperties->cbAlign = m_pSwitch->m_cbAlign;
    if (m_pSwitch->m_cbBuffer > pProperties->cbBuffer)
        pProperties->cbBuffer = m_pSwitch->m_cbBuffer;

    // keep the max up to date - if we need to bump our max, then return a
    // special return code so the caller knows this and can reconnect other
    // pins so they know it too.
    if (pProperties->cbPrefix > m_pSwitch->m_cbPrefix) {
	m_pSwitch->m_cbPrefix = pProperties->cbPrefix;
	hrRet = S_FALSE;
    }
    if (pProperties->cbAlign > m_pSwitch->m_cbAlign) {
	m_pSwitch->m_cbAlign = pProperties->cbAlign;
	hrRet = S_FALSE;
    }
    if (pProperties->cbBuffer > m_pSwitch->m_cbBuffer) {
	m_pSwitch->m_cbBuffer = pProperties->cbBuffer;
	hrRet = S_FALSE;
    }

    ALLOCATOR_PROPERTIES Actual;
    HRESULT hr = pAllocator->SetProperties(pProperties,&Actual);
    if (FAILED(hr)) {
        DbgLog((LOG_ERROR,1,TEXT("Error in SetProperties")));
	return hr;
    }

    if (Actual.cbBuffer < pProperties->cbBuffer ||
			Actual.cbPrefix < pProperties->cbPrefix ||
    			Actual.cbAlign < pProperties->cbAlign) {
	// can't use this allocator
        DbgLog((LOG_ERROR,1,TEXT("Can't use allocator - something too small")));
	return E_INVALIDARG;
    }

    DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("Using %d buffers of size %d"),
					Actual.cBuffers, Actual.cbBuffer));
    DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("Prefix=%d Align=%d"),
					Actual.cbPrefix, Actual.cbAlign));

    return hrRet;
}


//
// DecideAllocator - override to notice if it's our allocator
//
HRESULT CBigSwitchOutputPin::DecideAllocator(IMemInputPin *pPin, IMemAllocator **ppAlloc)
{
    HRESULT hr = NOERROR;
    *ppAlloc = NULL;

    // get downstream prop request
    // the derived class may modify this in DecideBufferSize, but
    // we assume that he will consistently modify it the same way,
    // so we only get it once
    ALLOCATOR_PROPERTIES prop;
    ZeroMemory(&prop, sizeof(prop));

    // whatever he returns, we assume prop is either all zeros
    // or he has filled it out.
    pPin->GetAllocatorRequirements(&prop);

    // if he doesn't care about alignment, then set it to 1
    if (prop.cbAlign == 0) {
        prop.cbAlign = 1;
    }

    // !!! We don't work with funny allocator requirements... well we almost
    // do, except the AVI parser cannot connect straight to FRC and SWITCH when
    // the AVI MUX is on the output wanting special alignment and prefixing.
    // Connecting the MUX reconnects the switch inputs (telling them of the
    // new buffer requirements) which makes the FRC reconnect its input, which
    // fails, because the parser can't do it.  So avoid this problem by not
    // letting anyone use anything but align=1 and prefix=0
    prop.cbAlign = 1;
    prop.cbPrefix = 0;

    /* Try the allocator provided by the input pin */
    // REMOVED - we have to use our own allocator - GetBuffer requires it

    /* If the GetAllocator failed we may not have an interface */

    if (*ppAlloc) {
	(*ppAlloc)->Release();
	*ppAlloc = NULL;
    }

    /* Try the output pin's allocator by the same method */

    hr = InitAllocator(ppAlloc);
    if (SUCCEEDED(hr)) {

        // note - the properties passed here are in the same
        // structure as above and may have been modified by
        // the previous call to DecideBufferSize
	HRESULT hrRet = DecideBufferSize(*ppAlloc, &prop);
	if (SUCCEEDED(hrRet)) {
	    // !!! read only?
	    hr = pPin->NotifyAllocator(*ppAlloc, FALSE);
	    if (SUCCEEDED(hr)) {
		m_fOwnAllocator = TRUE;
    	        DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("CBigSwitchOut[%d]: using our own allocator"), m_iOutpin));
		if (hrRet == S_OK) {
		    goto SkipFix;
		} else {
		    // this means we bumped up the allocator requirements, and
		    // we need to reconnect our input pins
		    goto FixOtherAllocators;
		}
	    }
	} else {
	    hr = hrRet;
	}
    }

    /* Likewise we may not have an interface to release */

    if (*ppAlloc) {
	(*ppAlloc)->Release();
	*ppAlloc = NULL;
    }
    return hr;

FixOtherAllocators:

    // we have to make all the input allocators know about the alignment and
    // prefix this output needs.  If it's our allocator, just make a note of it
    // otherwise we need to reconnect (which we hate to do; takes forever)
    // (!!! so don't do it this often, only after all outputs connected!)
    // Luckily, the common scenario is that inputs use their own allocator
    //
    ALLOCATOR_PROPERTIES actual;
    if (this == m_pSwitch->m_pOutput[0]) {
      for (int z=0; z<m_pSwitch->m_cInputs; z++) {

        // the FRC needs to know the new properties too, unfortunately we really
        // do have to reconnect
	if (m_pSwitch->m_pInput[z]->IsConnected()) {
	    hr = m_pSwitch->ReconnectPin(m_pSwitch->m_pInput[z],
				(AM_MEDIA_TYPE *)&m_pSwitch->m_pInput[z]->m_mt);
	    ASSERT(hr == S_OK);
    	    DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("*Reconnecting input %d to fix allocator"),
							z));
	}
      }
    }

SkipFix:

    // make sure the pool has a whole bunch of buffers, obeying align and prefix
    // !!! You can't connect the main output first, or we won't yet know how
    // big pool buffers need to be (no inputs connected yet) and we'll blow up.
    // Luckily, Dexter can only connect the main output last.
    prop.cBuffers = m_pSwitch->m_nOutputBuffering;
    hr = m_pSwitch->m_pPoolAllocator->SetProperties(&prop, &actual);
    ASSERT(SUCCEEDED(hr));
    if (FAILED(hr))
	return hr;
    DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("Increased POOL to %d buffers"), actual.cBuffers));

    return S_OK;

} // DecideAllocator


//
// CheckMediaType - accept only the type we're supposed to accept
//
HRESULT CBigSwitchOutputPin::CheckMediaType(const CMediaType *pmt)
{
    DbgLog((LOG_TRACE, TRACE_LOWEST, TEXT("CBigSwitchOut[%d]::CheckMT"), m_iOutpin));

    CAutoLock lock_it(m_pLock);

    CMediaType mtAccept(m_pSwitch->m_mtAccept);

    if (IsEqualGUID(*pmt->Type(), *mtAccept.Type())) {
        if (IsEqualGUID(*pmt->Subtype(), *mtAccept.Subtype())) {
	    if (*pmt->FormatType() == *mtAccept.FormatType()) {
	        if (pmt->FormatLength() >= mtAccept.FormatLength()) {

		    // !!! video formats will NOT match exactly
        	    if (IsEqualGUID(*pmt->FormatType(), FORMAT_VideoInfo)) {
			LPBITMAPINFOHEADER lpbi = HEADER((VIDEOINFOHEADER *)
							pmt->Format());
			LPBITMAPINFOHEADER lpbiAccept =HEADER((VIDEOINFOHEADER*)
							mtAccept.Format());
			if ((lpbi->biCompression == lpbiAccept->biCompression)
				&& (lpbi->biBitCount == lpbiAccept->biBitCount))
		    	    return S_OK;

		    // will other formats match exactly?
        	    } else {
		        LPBYTE lp1 = pmt->Format();
		        LPBYTE lp2 = mtAccept.Format();
		        if (memcmp(lp1, lp2, mtAccept.FormatLength()) == 0)
		            return S_OK;
		    }
		}
	    }
        }
    }
    return VFW_E_INVALIDMEDIATYPE;

} // CheckMediaType



//
// GetMediaType - return the type we accept
//
HRESULT CBigSwitchOutputPin::GetMediaType(int iPosition, CMediaType *pMediaType)
{
    if (iPosition != 0)
        return VFW_S_NO_MORE_ITEMS;

    CopyMediaType(pMediaType, &m_pSwitch->m_mtAccept);

    return S_OK;

} // GetMediaType


//
// Notify
//
STDMETHODIMP CBigSwitchOutputPin::Notify(IBaseFilter *pSender, Quality q)
{
    // NO! This gets called in Receive! CAutoLock lock_it(m_pLock);

    DbgLog((
        LOG_TIMING,
        TRACE_MEDIUM,
        TEXT("Switch: LATE %d ms, late timestamp = %ld"),
        (int)(q.Late / 10000),
        (int)(q.TimeStamp/10000) ));
    REFERENCE_TIME rt = q.Late;

#ifdef LATE_FIX

// !!! FIGURE OUT THE BEST TIME TO SKIP (after how many ms) and how far
// !!! to skip ahead for best results

    // if we're NOT late, reset our threshold, so we dn't allow us to get too behind
    // audio later
    //
    if( rt <= 0 )
    {
        m_pSwitch->m_qLastLate = 0;
    }

    // More than such-and-such late? And that's at least ? frames in the future?
    if (m_pSwitch->m_fPreview && rt > LATE_THRESHOLD &&	// !!!
	    rt >= (m_pSwitch->m_rtNext - m_pSwitch->m_rtLastDelivered)) {

        // we're late, but we're getting less late. Don't pass a notify
        // upstream or we might upset our catching up
        //
        if( m_pSwitch->m_qLastLate > rt )
        {
            DbgLog((LOG_TRACE, TRACE_MEDIUM, "allowing catch up" ));
            return E_NOTIMPL;
        }

        // flush the output downstream of us, in case it's logged up a bunch of stuff
        //
        m_pSwitch->FlushOutput( );

        // flag how late we are.
        m_pSwitch->m_qLastLate = rt + JUMP_AHEAD_BY;

	// the late value we get is based on the time we delivered to the
	// renderer. It MUST BE FRAME ALIGNED or we can hang (one frame will
	// be thought of as too early, and the next one too late)
	rt = m_pSwitch->m_rtLastDelivered + rt + JUMP_AHEAD_BY; // !!! better choice
	DWORDLONG dwl = Time2Frame(rt, m_pSwitch->m_dFrameRate);
	rt = Frame2Time(dwl, m_pSwitch->m_dFrameRate);
#ifdef DEBUG
        dwl = Time2Frame( q.Late + JUMP_AHEAD_BY, m_pSwitch->m_dFrameRate );
        DbgLog((
            LOG_TRACE,
            TRACE_MEDIUM,TEXT("last delivered to %ld, LATE CRANK to %d ms"),
            (int)(m_pSwitch->m_rtLastDelivered/10000),
            (int)(rt / 10000)));
        m_pSwitch->m_nSkippedTotal += dwl;
        DbgLog((LOG_TRACE, TRACE_MEDIUM,"(skipping %ld frames, tot = %ld)", long( dwl ), long( m_pSwitch->m_nSkippedTotal ) ));
#endif
        // don't crank yet, we're still in the middle of delivering something
	m_pSwitch->m_fJustLate = TRUE;
	q.Late = rt;	// make a note of we need to crank to
	m_pSwitch->m_qJustLate = q;
    }
#else
    // More than such-and-such late? And that's at least ? frames in the future?
    if (m_pSwitch->m_fPreview && rt > 1000000 &&	// !!!
	    rt >= (m_pSwitch->m_rtNext - m_pSwitch->m_rtLastDelivered)) {
	// the late value we get is based on the time we delivered to the
	// renderer. It MUST BE FRAME ALIGNED or we can hang (one frame will
	// be thought of as too early, and the next one too late)
	rt = m_pSwitch->m_rtLastDelivered + rt;	// !!! better choice
	DWORDLONG dwl = Time2Frame(rt, m_pSwitch->m_dFrameRate);
	rt = Frame2Time(dwl, m_pSwitch->m_dFrameRate);
        DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("LATE CRANK to %d ms"), (int)(rt / 10000)));
        // don't crank yet, we're still in the middle of delivering something
	m_pSwitch->m_fJustLate = TRUE;
	q.Late = rt;	// make a note of where we need to crank to
	m_pSwitch->m_qJustLate = q;
    }

#endif

    // make the render keep trying to make up time, too
    return E_NOTIMPL;
}

HRESULT CBigSwitchOutputPin::IsFormatSupported(const GUID * pFormat)
{
    CheckPointer(pFormat, E_POINTER);
    return (*pFormat == TIME_FORMAT_MEDIA_TIME) ? S_OK : S_FALSE;
}

HRESULT CBigSwitchOutputPin::QueryPreferredFormat(GUID *pFormat)
{
    CheckPointer(pFormat, E_POINTER);
    *pFormat = TIME_FORMAT_MEDIA_TIME;
    return S_OK;
}

HRESULT CBigSwitchOutputPin::SetTimeFormat(const GUID * pFormat)
{
    CheckPointer(pFormat, E_POINTER);
    if (*pFormat == TIME_FORMAT_MEDIA_TIME)
        return S_OK;
    return E_FAIL;
}

HRESULT CBigSwitchOutputPin::IsUsingTimeFormat(const GUID * pFormat)
{
    CheckPointer(pFormat, E_POINTER);
    if (*pFormat != TIME_FORMAT_MEDIA_TIME)
        return S_FALSE;
    return S_OK;
}

HRESULT CBigSwitchOutputPin::GetTimeFormat(GUID *pFormat)
{
    CheckPointer(pFormat, E_POINTER);
    *pFormat = TIME_FORMAT_MEDIA_TIME ;
    return S_OK;
}

HRESULT CBigSwitchOutputPin::GetDuration(LONGLONG *pDuration)
{
    CheckPointer(pDuration, E_POINTER);
    DbgLog((LOG_TRACE, TRACE_LOWEST, TEXT("Switch: Duration is %d"),
				(int)(m_pSwitch->m_rtProjectLength / 10000)));
    *pDuration = m_pSwitch->m_rtProjectLength;
    return S_OK;
}

HRESULT CBigSwitchOutputPin::GetStopPosition(LONGLONG *pStop)
{
    CheckPointer(pStop, E_POINTER);
    DbgLog((LOG_TRACE, TRACE_LOWEST, TEXT("Switch: Stop is %d"),
				(int)(m_pSwitch->m_rtStop / 10000)));
    *pStop = m_pSwitch->m_rtStop;
    return S_OK;
}

HRESULT CBigSwitchOutputPin::GetCurrentPosition(LONGLONG *pCurrent)
{
    CheckPointer(pCurrent, E_POINTER);
    DbgLog((LOG_TRACE, TRACE_LOWEST, TEXT("Switch: Current is %d"),
				(int)(m_pSwitch->m_rtCurrent / 10000)));
    *pCurrent = m_pSwitch->m_rtCurrent;
    return S_OK;
}

HRESULT CBigSwitchOutputPin::GetCapabilities(DWORD *pCap)
{
    CheckPointer(pCap, E_POINTER);
    *pCap =	AM_SEEKING_CanSeekAbsolute |
		AM_SEEKING_CanSeekForwards |
		AM_SEEKING_CanSeekBackwards |
		AM_SEEKING_CanGetCurrentPos |
		AM_SEEKING_CanGetStopPos |
                AM_SEEKING_CanGetDuration;

    // !!! AM_SEEKING_Source?

    return S_OK;
}

HRESULT CBigSwitchOutputPin::CheckCapabilities( DWORD * pCapabilities )
{
    DWORD dwMask;
    GetCapabilities(&dwMask);
    *pCapabilities &= dwMask;
    return S_OK;
}


HRESULT CBigSwitchOutputPin::ConvertTimeFormat(
  		LONGLONG * pTarget, const GUID * pTargetFormat,
  		LONGLONG    Source, const GUID * pSourceFormat )
{
    return E_NOTIMPL;
}


// Here's the biggie... SEEK!
//
HRESULT CBigSwitchOutputPin::SetPositions(
		LONGLONG * pCurrent,  DWORD CurrentFlags,
  		LONGLONG * pStop,  DWORD StopFlags )
{
    // I want to make sure we don't get paused during the seek, or that this
    // doesn't change while I'm unloading a dynamic shared source
    CAutoLock lock_it(m_pLock);

    HRESULT hr;
    REFERENCE_TIME rtCurrent = m_pSwitch->m_rtCurrent;
    REFERENCE_TIME rtStop = m_pSwitch->m_rtStop;

    // segment not supported
    if ((CurrentFlags & AM_SEEKING_Segment) ||
				(StopFlags & AM_SEEKING_Segment)) {
    	DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("Switch: ERROR-Seek used EC_ENDOFSEGMENT!")));
	return E_INVALIDARG;
    }

    DWORD dwFlags = (CurrentFlags & AM_SEEKING_PositioningBitsMask);

    // start ABSOLUTE seek
    if (dwFlags == AM_SEEKING_AbsolutePositioning) {
	CheckPointer(pCurrent, E_POINTER);
	if (*pCurrent < 0) {
    	    DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("Switch::Invalid Seek to %dms"),
					(int)(*pCurrent / 10000)));
	    ASSERT(FALSE);
	    return E_INVALIDARG;
	}
	// this happens if other switches are in the graph
	if (*pCurrent > m_pSwitch->m_rtProjectLength) {
	    *pCurrent = m_pSwitch->m_rtProjectLength;
	}
	rtCurrent = *pCurrent;
    	DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("Switch::Seek to %dms"),
					(int)(rtCurrent / 10000)));

    // start RELATIVE seek
    } else if (dwFlags == AM_SEEKING_RelativePositioning) {
	CheckPointer(pCurrent, E_POINTER);
	if (m_pSwitch->m_rtCurrent + *pCurrent < 0) {
    	    DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("Switch::Invalid Relative Seek to %dms"),
			(int)((m_pSwitch->m_rtCurrent + *pCurrent) / 10000)));
	    ASSERT(FALSE);
	    return E_INVALIDARG;
	}
	// this happens if other switches are in the graph
	if (m_pSwitch->m_rtCurrent + *pCurrent > m_pSwitch->m_rtProjectLength) {
	    rtCurrent = m_pSwitch->m_rtProjectLength;
	} else {
	    rtCurrent += *pCurrent;
	}
    	DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("Switch::Relative Seek to %dms"),
					(int)((rtCurrent) / 10000)));

    } else if (dwFlags) {
    	DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("Switch::Invalid Current Seek flags")));
	return E_INVALIDARG;
    }

    dwFlags = (StopFlags & AM_SEEKING_PositioningBitsMask);

    // stop ABSOLUTE seek
    if (dwFlags == AM_SEEKING_AbsolutePositioning) {
	CheckPointer(pStop, E_POINTER);
	if (*pStop < 0 || *pStop < rtCurrent) {
    	    DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("Switch::Invalid Seek until %dms"),
					(int)(*pStop / 10000)));
	    ASSERT(FALSE);
	    return E_INVALIDARG;
	}
	if (*pStop > m_pSwitch->m_rtProjectLength) {
	    *pStop = m_pSwitch->m_rtProjectLength;
	}
    	DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("Switch::Seek until %dms"),
					(int)(*pStop / 10000)));
	rtStop = *pStop;

    // stop RELATIVE seek
    } else if (dwFlags == AM_SEEKING_RelativePositioning) {
	CheckPointer(pStop, E_POINTER);
	if (m_pSwitch->m_rtStop + *pStop < 0 || m_pSwitch->m_rtStop + *pStop <
					rtCurrent) {
    	    DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("Switch::Invalid Relative Seek until %dms")
			, (int)((m_pSwitch->m_rtStop + *pStop) / 10000)));
	    ASSERT(FALSE);
	    return E_INVALIDARG;
	}
	if (m_pSwitch->m_rtStop + *pStop > m_pSwitch->m_rtProjectLength) {
	    rtStop = m_pSwitch->m_rtProjectLength;
	} else {
	    rtStop += *pStop;
	}
    	DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("Switch::Relative Seek until %dms"),
						(int)(rtStop / 10000)));

    // stop INCREMENTAL seek
    } else if (dwFlags == AM_SEEKING_IncrementalPositioning) {
	CheckPointer(pStop, E_POINTER);
	if (rtCurrent + *pStop < 0) {
    	    DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("Switch::Invalid Increment Seek until %dms"
			), (int)((rtCurrent + *pStop) / 10000)));
	    ASSERT(FALSE);
	    return E_INVALIDARG;
	}
	if (rtCurrent + *pStop > m_pSwitch->m_rtProjectLength) {
	    rtStop = m_pSwitch->m_rtProjectLength;
	} else {
	    rtStop = rtCurrent + *pStop;
	}
    	DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("Switch::Incremental Seek until %dms"),
					(int)(rtStop / 10000)));
    }

    // I'm going to round the current seek time down to a frame boundary, or
    // a seek to (x,x) will not send anything instead of sending 1 frame.  It's
    // x rounded down to a frame boundary which is the first thing the switch
    // will see, so we don't want it throwing it away as being too early.
    // The next frame time stamped >x is too late and playback will stop.
    LONGLONG llOffset = Time2Frame( rtCurrent, m_pSwitch->m_dFrameRate );
    rtCurrent = Frame2Time( llOffset, m_pSwitch->m_dFrameRate );
    DbgLog((LOG_TRACE, TRACE_LOW, TEXT("New current pos rounded down to %dms"),
					(int)(rtCurrent / 10000)));

    // return the time?
    if ((CurrentFlags & AM_SEEKING_ReturnTime) && pCurrent)
	*pCurrent = rtCurrent;
    if ((StopFlags & AM_SEEKING_ReturnTime) && pStop)
	*pStop = rtStop;

    // if we seek to the end, and we're already at the end, that's pointless
    // It will also hang us.  The non-source pins will flush the video renderer
    // yet no source will have been passed the seek, so no data or EOS will
    // be forthcoming, and the renderer will never complete a state change
    //
    if (rtCurrent >= m_pSwitch->m_rtProjectLength && m_pSwitch->m_rtCurrent >=
						m_pSwitch->m_rtProjectLength) {
	// or else when we are paused, we'll think the last seek was somewhere
	// else!
        m_pSwitch->m_rtLastSeek = rtCurrent;

	// we're not actually seeking, better send this now?
        DbgLog((LOG_TRACE,TRACE_HIGHEST,TEXT("Switch: Send NewSeg=%dms"),
				(int)(rtCurrent / 10000)));
        for (int i = 0; i < m_pSwitch->m_cOutputs; i++) {
	    m_pSwitch->m_pOutput[i]->DeliverNewSegment(rtCurrent, rtStop, 1.0);
        }
	m_pSwitch->m_fNewSegSent = TRUE;

	return S_OK;
    }

    // if we're seeking to the end, there are no sources needed at the new time,
    // so nobody will flush and send EOS, which is necessary.  So let's do it.
    if (rtCurrent >= m_pSwitch->m_rtProjectLength && m_pSwitch->m_rtCurrent <
						m_pSwitch->m_rtProjectLength) {
        for (int z=0; z < m_pSwitch->m_cOutputs; z++) {
	    m_pSwitch->m_pOutput[z]->DeliverBeginFlush();
	    m_pSwitch->m_pOutput[z]->DeliverEndFlush();
        }
        m_pSwitch->AllDone();   // deliver EOS, etc.
        return S_OK;
    }

    // so after all that, has the current or stop time changed?
    // it doesn't matter!  If it's delivering time 100 and we want to seek back
    // to 100, we still need to seek! Or we'll hang!
    // if (rtCurrent != m_pSwitch->m_rtCurrent || rtStop != m_pSwitch->m_rtStop)
    {

	// YEP!  Time to seek!


	if (m_pSwitch->IsDynamic()) {
	    // make sure any new sources needed at the new time are in so we can
	    // seek them below

	    // Dynamic graph building while seeking HANGS (that's the rule)
	    // so this won't work
	    // m_pSwitch->DoDynamicStuff(rtCurrent);

	    // so make our thread do it for us, at a higher priority than its
	    // normal low priority (it will set itself back to low priority)
#ifdef CHANGE_THREAD_PRIORITIES
    	    SetThreadPriority(m_pSwitch->m_worker.m_hThread,
						THREAD_PRIORITY_NORMAL);
#endif
	    // when woken up, use this time
	    m_pSwitch->m_worker.m_rt = rtCurrent;
	    SetEvent(m_pSwitch->m_hEventThread);
	}

	// during the seek, people need to know where we're seeking to
        m_pSwitch->m_rtSeekCurrent = rtCurrent;
        m_pSwitch->m_rtSeekStop = rtStop;

        m_pSwitch->m_fSeeking = TRUE;
        m_pSwitch->m_rtLastSeek = rtCurrent;	// the last seek was to here
	m_pSwitch->m_fNewSegSent = FALSE;	// need to send this new time

	// we're no longer at EOS.  Do this BEFORE passing seek upstream or
	// we might get new data while we still think we're at EOS
	m_pSwitch->m_fEOS = FALSE;		// not at EOS yet

	// If a pin was not flushed by surprise before this seek, let's find
	// out if it gets flushed during this seek.  If so, m_fFlushAfterSeek
	// will be reset.  If not, then we can expect a flush to come by
	// surprise later. If not paused, no flushing happens
        if (m_pSwitch->m_State == State_Paused) {
            for (int j = 0; j < m_pSwitch->m_cInputs; j++) {
		if (!m_pSwitch->m_pInput[j]->m_fFlushBeforeSeek &&
				m_pSwitch->m_pInput[j]->m_fIsASource) {
	            m_pSwitch->m_pInput[j]->m_fFlushAfterSeek = TRUE;
		}
	    }
	}

	// seek upstream of every input pin
        // not all inputs are sources, so ignore error codes!!!
	for (int i = 0; i < m_pSwitch->m_cInputs; i++) {

	    // only bother to seek sources
	    if (!m_pSwitch->m_pInput[i]->m_fIsASource &&
	    			m_pSwitch->m_pInput[i]->IsConnected()) {
		// since we're not seeking upstream of this pin, it won't get
		// flushed unless we do it ourself, and that will not block
		// this input until the seek is complete, and we'll hang
		m_pSwitch->m_pInput[i]->BeginFlush();
		m_pSwitch->m_pInput[i]->EndFlush();
		continue;
	    }

	    IPin *pPin = m_pSwitch->m_pInput[i]->GetConnected();
	    IMediaSeeking *pMS;
    	    int n = m_pSwitch->m_pInput[i]->OutpinFromTime(rtCurrent);
    	    if (n == -1)
	 	n = m_pSwitch->m_pInput[i]->NextOutpinFromTime(rtCurrent, NULL);

#ifdef NOFLUSH
            m_pSwitch->m_pInput[i]->m_fSawNewSeg = TRUE;        // assume OK
#endif

	    // only bother to seek pins that will evenutally do something
	    if (pPin && n != -1) {
		hr = pPin->QueryInterface(IID_IMediaSeeking, (void **)&pMS);
		if (hr == S_OK) {
		    // convert all seeks to absolute seek commands.  Pass on
		    // FLUSH flag.
		    DWORD CFlags=(CurrentFlags &AM_SEEKING_PositioningBitsMask)?
				AM_SEEKING_AbsolutePositioning :
				AM_SEEKING_NoPositioning;
		    if (CurrentFlags & AM_SEEKING_NoFlush)
			CFlags |= AM_SEEKING_NoFlush;
		    DWORD SFlags =(StopFlags & AM_SEEKING_PositioningBitsMask) ?
				AM_SEEKING_AbsolutePositioning :
				AM_SEEKING_NoPositioning;
		    if (StopFlags & AM_SEEKING_NoFlush)
			SFlags |= AM_SEEKING_NoFlush;
		    // make sure we're in MEDIA TIME format
		    if (pMS->IsUsingTimeFormat(&TIME_FORMAT_MEDIA_TIME) != S_OK)
			pMS->SetTimeFormat(&TIME_FORMAT_MEDIA_TIME);

#ifdef NOFLUSH
                    // see if the seek makes a NewSeg happen.  If it's the seek
                    // the frc or audpack is waiting for, it will send one
                    m_pSwitch->m_pInput[i]->m_fSawNewSeg = FALSE;
#endif

    		    DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("Switch[%d]::Passing seek upstream"), i));
		    hr = pMS->SetPositions(&rtCurrent, CFlags, &rtStop, SFlags);

		    if (FAILED(hr)) {
		        // !!! Seeking audio parser pin when both are connected
			// fails silently and doesn't cause flushing!
    		        DbgLog((LOG_ERROR,1,TEXT("Switch::SEEK FAILED!")));
    		        // seek failed, we won't get flushed, this won't happen
    		        m_pSwitch->m_pInput[i]->m_rtBlock = -1;
    		        m_pSwitch->m_pInput[i]->m_fEOS = FALSE;
    		        m_pSwitch->m_pInput[i]->m_rtLastDelivered =
						m_pSwitch->m_rtSeekCurrent;
		    }

		    pMS->Release();
		} else {
    		    DbgLog((LOG_ERROR,1,TEXT("Switch::In %d CAN'T SEEK"), i));
		    ASSERT(FALSE); // we're in trouble
		}
            } else if (n != 1 || pPin) {
                // If this pin is connected and blocked, but not used after the
                // seek, we still need to unblock it! (but not seek it)
		// In Dynamic sources, this pin might not be connected yet, but
		// it is the source we need to use now because of this seek, and
		// we're counting on getting flushed, which won't happen since
		// it's not connected yet.  We need to pretend a source upstream
		// flushed us, or the renderer won't get flushed, and it will
		// ignore what we send it after this seek (when paused) and the
		// seek will not show the new frame
		m_pSwitch->m_pInput[i]->BeginFlush();
		m_pSwitch->m_pInput[i]->EndFlush();
		continue;
	    } else {
		// we are a source that is not needed after this seek point, so
		// we're not going to seek it.  Well, we better also darn well
		// not think we're going to get a flush on this pin!
		m_pSwitch->m_pInput[i]->m_fFlushAfterSeek = FALSE;
	    }
	}

        // we know all the flushes have now come through

	// Reset this AGAIN because seeking upstream could set it again
	m_pSwitch->m_fEOS = FALSE;		// not at EOS yet

        m_pSwitch->m_fSeeking = FALSE;	// this thread is all done

        DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("Completing the seek to %d,%dms"),
				(int)(m_pSwitch->m_rtSeekCurrent / 10000),
				(int)(m_pSwitch->m_rtSeekStop / 10000)));

	// update our internal clock to the new position
 	m_pSwitch->m_rtCurrent = m_pSwitch->m_rtSeekCurrent;

	// !!! assumed so because of a new segment?
	m_pSwitch->m_fDiscon = FALSE;	// after a seek, no discontinuity?
        m_pSwitch->m_rtNext = Frame2Time( Time2Frame( m_pSwitch->m_rtCurrent,
                       m_pSwitch->m_dFrameRate ) + 1, m_pSwitch->m_dFrameRate );
 	m_pSwitch->m_rtStop = m_pSwitch->m_rtSeekStop;
        m_pSwitch->m_llFramesDelivered = 0;	// nothing delivered yet

	// now that new current and stop times are set, reset every input's
	// last delivered time, and default back to blocking every input until
	// its time to deliver
	// Also, send NewSeg if necessary, and let pins start delivering again

#ifdef NOFLUSH
        // don't let a NewSeg happen now.  If it happens after we decide to
        // go stale but before we set fStaleData, it will never go unstale
        m_pSwitch->m_csNewSeg.Lock();
#endif

	for (i = 0; i < m_pSwitch->m_cInputs; i++) {

	    // if we didn't get flushed, EndFlush didn't do this important stuff
	    m_pSwitch->m_pInput[i]->m_rtLastDelivered = m_pSwitch->m_rtCurrent;
            m_pSwitch->m_pInput[i]->m_rtBlock = -1;
            m_pSwitch->m_pInput[i]->m_fEOS = FALSE;

	    // We got a seek, which didn't generate a flush, but should have.
	    // I can only conclude we're sharing a parser, and the seek was
	    // ignored by our pin, and at some later date, the other parser pin
	    // will get seeked.  It's important we don't deliver anything else
	    // until that seek really happens, or we'll crank and screw up our
	    // variables set by the seek.  So we block receives now.  When the
	    // flush comes later, it will be OK to deliver again, and unblock.
	    if ((m_pSwitch->m_pInput[i]->m_fFlushAfterSeek
#ifdef NOFLUSH
                        && !m_pSwitch->m_pInput[i]->m_fSawNewSeg
#endif
                        ) && m_pSwitch->m_pInput[i]->IsConnected()) {
	        DbgLog((LOG_TRACE,2,TEXT("Switch[%d]:SEEK W/O FLUSH - going STALE"),
						i));
	        m_pSwitch->m_pInput[i]->m_fStaleData = TRUE;
	        m_pSwitch->m_cStaleData++;
	        ResetEvent(m_pSwitch->m_pInput[i]->m_hEventSeek);
	    }
	    ResetEvent(m_pSwitch->m_pInput[i]->m_hEventBlock);
	}

#ifdef NOFLUSH
        m_pSwitch->m_csNewSeg.Unlock();
#endif

	// We need to send a NewSeg now, unless anybody was stale, in which
	// case they might still deliver old data, and we better NOT send
	// a NewSeg now, or the offsets will be wrong!
        // If we don't send a NewSeg, we can't let ANY INPUT PIN deliver yet,
        // or the filter downstream will be screwed up
	if (m_pSwitch->m_cStaleData == 0) {
            DbgLog((LOG_TRACE,TRACE_HIGHEST,TEXT("Switch:Send NewSeg=%dms"),
					(int)(rtCurrent / 10000)));
            for (int j = 0; j < m_pSwitch->m_cOutputs; j++) {
	        m_pSwitch->m_pOutput[j]->DeliverNewSegment(rtCurrent,
							rtStop, 1.0);
	    }
	    m_pSwitch->m_fNewSegSent = TRUE;

	    // last but not least, after the NewSeg has been sent, let the pins
	    // start delivering.
	    for (i = 0; i < m_pSwitch->m_cInputs; i++) {
	        SetEvent(m_pSwitch->m_pInput[i]->m_hEventSeek);
	    }
	}
    }
    return S_OK;
}


HRESULT CBigSwitchOutputPin::GetPositions(LONGLONG * pCurrent, LONGLONG * pStop)
{
    DbgLog((LOG_TRACE, TRACE_LOWEST, TEXT("Switch: Positions are %d and %d"),
			(int)(m_pSwitch->m_rtCurrent / 10000),
			(int)(m_pSwitch->m_rtStop / 10000)));
    if (pCurrent)
    	*pCurrent = m_pSwitch->m_rtCurrent;
    if (pStop)
	*pStop = m_pSwitch->m_rtStop;
    return S_OK;
}

HRESULT CBigSwitchOutputPin::GetAvailable( LONGLONG * pEarliest, LONGLONG * pLatest )
{
    DbgLog((LOG_TRACE, TRACE_LOWEST, TEXT("Switch: GetAvailable")));
    if (pEarliest)
    	*pEarliest = 0;
    if (pLatest)
	*pLatest = m_pSwitch->m_rtProjectLength;
    return S_OK;
}

HRESULT CBigSwitchOutputPin::SetRate( double dRate)
{
    return E_NOTIMPL;
}

HRESULT CBigSwitchOutputPin::GetRate( double * pdRate)
{
    return E_NOTIMPL;
}

HRESULT CBigSwitchOutputPin::GetPreroll(LONGLONG *pPreroll)
{
    return E_NOTIMPL;
}

STDMETHODIMP CBigSwitchOutputPin::NonDelegatingQueryInterface(REFIID riid, void ** ppv)
{
    CheckPointer(ppv,E_POINTER);

    // only the render pin supports seeking
    if (this == m_pSwitch->m_pOutput[0] && riid == IID_IMediaSeeking) {
        //DbgLog((LOG_TRACE,9,TEXT("CBigSwitchOut: QI for IMediaSeeking")));
        return GetInterface((IMediaSeeking *) this, ppv);
    } else {
        return CBaseOutputPin::NonDelegatingQueryInterface(riid, ppv);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\stillvid\stilprop.cpp ===
//==========================================================================;
//
//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
//  PURPOSE.
//
//  Copyright (c) 1992 - 1999  Microsoft Corporation.  All Rights Reserved.
//
//--------------------------------------------------------------------------;
//
//Stilprop.cpp
//

#include <streams.h>
#include <qeditint.h>
#include <qedit.h>
#include "resource.h"
#include "StilProp.h"

//void Handle_Browse( HWND hWndDlg );

// *
// * CGenStilProperties
// *


//
// CreateInstance
//
CUnknown *CGenStilProperties::CreateInstance(LPUNKNOWN lpunk, HRESULT *phr)
{

    CUnknown *punk = new CGenStilProperties(lpunk, phr);
    if (punk == NULL)
    {
	*phr = E_OUTOFMEMORY;
    }

    return punk;
}


//
// CGenStilProperties::Constructor
//
CGenStilProperties::CGenStilProperties(LPUNKNOWN pUnk, HRESULT *phr)
    : CBasePropertyPage(NAME("GenStilVid Property Page"),pUnk,
        IDD_GENSTILL, IDS_STILLTITLE)
    , m_pGenStil(NULL)
    , m_bIsInitialized(FALSE)
{
    //m_sFileName[60]="";
}


//
// SetDirty
//
// Sets m_hrDirtyFlag and notifies the property page site of the change
//
void CGenStilProperties::SetDirty()
{
    m_bDirty = TRUE;
    if (m_pPageSite)
    {
        m_pPageSite->OnStatusChange(PROPPAGESTATUS_DIRTY);
    }
}


INT_PTR CGenStilProperties::OnReceiveMessage(HWND hwnd,
                                        UINT uMsg,
                                        WPARAM wParam,
                                        LPARAM lParam)
{
    switch (uMsg)
    {
        case WM_INITDIALOG:
        {
	    //start time
	    SetDlgItemInt(hwnd, IDC_STILL_START, (int)(m_rtStartTime / 10000),FALSE);
	
	    //frame rate
	    SetDlgItemInt(hwnd, IDC_STILL_FRMRATE, (int)(m_dOutputFrmRate * 100), FALSE);

    	    //duration
	    SetDlgItemInt(hwnd, IDC_STILL_DURATION, (int)(m_rtDuration/ 10000), FALSE);

            return (LRESULT) 1;
        }
        case WM_COMMAND:
        {
            if (m_bIsInitialized)
            {
                m_bDirty = TRUE;
                if (m_pPageSite)
                {
                    m_pPageSite->OnStatusChange(PROPPAGESTATUS_DIRTY);
                }
            }

	   /*X* switch ( LOWORD(wParam) )
	    {
		case IDC_BT_BROWSE:
		    Handle_Browse( hwnd );
		    break;
	    }
	    *X*/
            return (LRESULT) 1;
        }
    }
    return CBasePropertyPage::OnReceiveMessage(hwnd,uMsg,wParam,lParam);
}

HRESULT CGenStilProperties::OnConnect(IUnknown *pUnknown)
{

    // Get IDexterSequencer interface
    ASSERT(m_pGenStil == NULL);
    HRESULT hr = pUnknown->QueryInterface(IID_IDexterSequencer,
				(void **) &m_pGenStil);
    if (FAILED(hr))
    {
	return E_NOINTERFACE;
    }

    ASSERT(m_pGenStil);

    // get init data
    piGenStill()->get_OutputFrmRate( &m_dOutputFrmRate );
    REFERENCE_TIME rt;
    double d;
    piGenStill()->GetStartStopSkew( &m_rtStartTime, &m_rtDuration, &rt, &d );
    m_rtDuration -= m_rtStartTime;

    m_bIsInitialized = FALSE ;

    return NOERROR;
}

HRESULT CGenStilProperties::OnDisconnect()
{
    // Release the interface

    if (m_pGenStil == NULL)
    {
        return(E_UNEXPECTED);
    }
    m_pGenStil->Release();
    m_pGenStil = NULL;
    return NOERROR;
}


// We are being activated

HRESULT CGenStilProperties::OnActivate()
{
    m_bIsInitialized = TRUE;
    return NOERROR;
}


// We are being deactivated

HRESULT CGenStilProperties::OnDeactivate(void)
{
    // remember present effect level for next Activate() call

    GetFromDialog();
    return NOERROR;
}

//
// get data from Dialog

STDMETHODIMP CGenStilProperties::GetFromDialog(void)
{
    int n;

    //get start time
    m_rtStartTime = GetDlgItemInt(m_Dlg, IDC_STILL_START, NULL, FALSE);
    m_rtStartTime *= 10000;

    //get frame rate
    n = GetDlgItemInt(m_Dlg, IDC_STILL_FRMRATE, NULL, FALSE);
    m_dOutputFrmRate = (double)(n / 100.);

    // duration
    m_rtDuration = GetDlgItemInt(m_Dlg, IDC_STILL_DURATION, NULL, FALSE);
    m_rtDuration *= 10000;

    return NOERROR;
}


HRESULT CGenStilProperties::OnApplyChanges()
{
    GetFromDialog();

    m_bDirty  = FALSE; // the page is now clean

    // set data
    piGenStill()->put_OutputFrmRate( m_dOutputFrmRate );
    piGenStill()->ClearStartStopSkew();
    piGenStill()->AddStartStopSkew( m_rtStartTime, m_rtStartTime + m_rtDuration,
								0, 1);
    return(NOERROR);

}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\filterus\dexter\switch\switch.cpp ===
//depot/private/Lab06_DEV/MultiMedia/DShow/filterus/dexter/switch/switch.cpp#5 - edit change 27342 (text)
//depot/private/Lab06_DEV/MultiMedia/DShow/filterus/dexter/switch/switch.cpp#3 - edit change 24879 (text)
// !!! When you seek, chances are it's not on a frame boundary (according to
// the fps value we have).  Should the first crank value after the seek be
// rounded down to the frame boundary?  It seems to work OK because the FRC is
// smart enough to send all new streams with time stamps on frame boundaries.

// !!! At a given crank value, we don't know the next value we're going to crank
// to, so we guess!  Any bad repercussions?

/*

THE BIG SWITCHER:

It can have many inputs and many outputs.  Inputs can either be from video
sources (all must be the same frame rate), or outputs that have been re-routed
back to the input.  The last output pin is the final output stream.  Every
other output pin goes into a one input or two input effect filter, and then
back to an input.

The switcher knows which input pin to send to which output pin at what time.
This can be programmed arbitrarily.

As far as timing goes, this filter has an internal time of the current timeline
time being processed.  If it is seeked to time 10, it waits until all inputs
that were supposed to send something at time 10 do so, and then it updates its
internal clock to the earliest incoming time stamp of its sources.

Here is how the allocator fun works:  Our inputs and output both like to
be the allocator.  That way, we can do evil switchy things and not upset the
other filters.  When we receive a sample, we can send it to any output we
please without a copy.  So we need to make sure all buffers have max alignment
and prefixing of any of the connected pins.  As far as number of buffers go,
we are happy with 1 buffer for each input pin allocator to save space, but we
have a pool of 30 or however many extra buffers all inputs can share.  Only
if an input pin's buffers are not read only, is it allowed to partake of the
pool if its own buffer is busy.  Assuming we have an output queue on the final
output, this allows the graph to run ahead a second or two, for when slow DXT's
slow us down, and we might still play flawlessly!  And we don't need 30 buffers
per pin (which could be thousands) and we don't do any memory copies.
Pretty neat, eh?

*/

	//////////////////////////////////////////////////////////
	// * SEE THE ESSAY ON SHARING A SOURCE IN AUDPACK.CPP * //
	//////////////////////////////////////////////////////////

/*

Here is more info about source sharing for the switch:  If we are attached
to a shared parser pin that ignores seeks, when somebody seeks the other pin,
we get seeked without any warning.  We'll see a FLUSH on one of our pins for
no good reason.  At some later point in time, we'll see a Seek come on our
output pin associated with the surprise flush.  In between these 2 events,
the AUDPACK or FRC that is in front of us is smart enough not to deliver us
any data because it is going to be data from before the seek, not data from
after the seek like we are expecting.  This keeps us from breaking and doing the
wrong thing.

The other possibility is that we get seeked 1st, but some of our pins that we
pass the seek along to ignore the seek.  They're still delivering old data,
until some later point when the seek makes it up the other branch of the shared
source, and those input pins of ours will get flushed without warning and start
sending the new post-seek data.  When we try to seek a pin, and it isn't flushed
that pin goes STALE (m_fStaleData) meaning that it cannot deliver any data,
or accept an EOS, or do ANYTHING until it gets flushed and it's sending the new
data, from after the seek we gave it long ago.

We keep a count, when we are seeked, of how many pins are stale (didn't flush
but should have), and we don't let those pins do anything to us anymore... they
don't deliver, send us EOS, or do anything.  Then when all the stale pins are
finally flushed, we deliver the new seg downstream for the seek, and let all
the pins start partying again


#ifdef NOFLUSH

If you have a parser that doesn't ALWAYS FLUSH when it's seeked and streaming,
you need all the code ifdef'd out right now in NOFLUSH.  Thankfully, all
the Dexter sources that exist right now will always flush, even if they haven't
ever sent data before so theoretically don't need to flush

Actually it's a little more complicated than that.  Some parsers don't flush
if they've never delivered data yet, so we can't count on getting the flush,
so here's what we do:

1. A pin will go unstale if it gets a NewSeg OR if it gets flushed (the flush
   might not happen, but the NewSeg will) (I hope)
2. If you get a NewSeg during the seek (see audpack.cpp - one might get sent
   then) that's the same as getting a flush.  DO NOT consider that pin stale
3. There is a timing hole... Protect with a CritSec NewSeg from being called
   while seeking (see :SetPositions for explanation)

#endif

*/


// This code assumes that the switch IS the allocator for all its connections
// in order to work its magic.


//==========================================================================;
//
//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
//  PURPOSE.
//
//  Copyright (c) 1992 - 1999  Microsoft Corporation.  All Rights Reserved.
//
//--------------------------------------------------------------------------;

#include <streams.h>
#include <qeditint.h>
#include <qedit.h>
//#include <vfw.h>
#include "switch.h"
#include "..\util\conv.cxx"
#include "..\util\filfuncs.h"
#include "..\render\dexhelp.h"
#include "..\util\perf_defs.h"

#include <atlbase.h>
extern CComModule _Module;
#include <atlcom.h>

// don't have this many dynamic inputs connected at a time if they're not all
// needed at the same time (mostly to get around the 75 instances of an ICM
// codec limit).
#define MAX_SOURCES_LOADED	5

const int TRACE_EXTREME = 0;
const int TRACE_HIGHEST = 2;
const int TRACE_MEDIUM = 3;
const int TRACE_LOW = 4;
const int TRACE_LOWEST = 5;

const double DEFAULT_FPS = 15.0;

// ================================================================
// CBigSwitch Constructor
// ================================================================

CBigSwitch::CBigSwitch(TCHAR *pName, LPUNKNOWN pUnk, HRESULT *phr) :
    m_cInputs(0),	// no pins yet
    m_cOutputs(0),
    m_rtProjectLength(0),	// length of time the graph will run
    m_rtStop(0),	// if we want to stop before the project is done
    m_dFrameRate(DEFAULT_FPS),	// everything must be at this frame rate
    m_rtLastSeek(0),	// last seek command in timeline time
    m_fSeeking(FALSE),  // in the middle of seeking
    m_fNewSegSent(FALSE), // fwd'd the NewSeg yet?
    m_pFilterLoad(NULL),// sources to dynamically load
    m_pGraphConfig(NULL), // IAMGraphConfig interface (no addref)
    m_cbPrefix(0),
    m_cbAlign(1),
    m_cbBuffer(512),
    m_fPreview(TRUE),
    m_fDiscon(FALSE),
    m_bIsCompressed(FALSE),
    m_nDynaFlags( CONNECTF_DYNAMIC_NONE ),
    m_nOutputBuffering(DEX_DEF_OUTPUTBUF),
    m_nLastInpin(-1),
    m_cLoaded(0),
    m_fJustLate(FALSE),
    CBaseFilter(NAME("Big Switch filter"), pUnk, this, CLSID_BigSwitch),
    CPersistStream(pUnk, phr),
    m_hEventThread( NULL ),
    m_pDeadGraph( NULL ),
    m_nGroupNumber( -1 ),
    m_pShareSwitch( NULL ),
    m_rtCurrent( NULL )
{
#ifdef DEBUG
    m_nSkippedTotal = 0;
#endif

    DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("::CBigSwitch")));

    ZeroMemory(&m_mtAccept, sizeof(AM_MEDIA_TYPE));
    m_mtAccept.majortype = GUID_NULL;
    m_qLastLate = 0;

    // as well as all the individual allocators, we have a pool of buffers
    // that all the inputs can use if they want to
    //
    m_pPoolAllocator = NULL;
    m_pPoolAllocator = new CMemAllocator(
		NAME("Special Switch pool allocator"), NULL, phr);
    if (FAILED(*phr)) {
	return;
    }
    m_pPoolAllocator->AddRef();
    DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("Created a POOL Allocator")));

    // Init the pool allocator now.  It may never happen otherwise if we don't
    // connect any output pins, and an uninited allocator prevents the filter
    // from streaming
    ALLOCATOR_PROPERTIES prop, actual;
    prop.cBuffers = m_nOutputBuffering;
    prop.cbBuffer = m_cbBuffer;
    prop.cbAlign = m_cbAlign;
    prop.cbPrefix = m_cbPrefix;
    m_pPoolAllocator->SetProperties(&prop, &actual);

#ifdef TEST
        SetInputDepth(2);
        SetOutputDepth(1);
 	SetFrameRate(15.0);
	InputIsASource(0, TRUE);
	InputIsASource(1, TRUE);

	AM_MEDIA_TYPE mt;
	ZeroMemory(&mt, sizeof(AM_MEDIA_TYPE));
        mt.majortype = MEDIATYPE_Video;
        FOURCCMap FourCCMap(MKFOURCC('c','v','i','d'));
        mt.subtype = (GUID)FourCCMap;
        mt.formattype = FORMAT_VideoInfo;
        mt.bFixedSizeSamples = FALSE;
        mt.bTemporalCompression = TRUE;
        mt.pbFormat = (BYTE *)QzTaskMemAlloc(SIZE_PREHEADER +
						sizeof(BITMAPINFOHEADER));
        mt.cbFormat = SIZE_PREHEADER + sizeof(BITMAPINFOHEADER);
        ZeroMemory(mt.pbFormat, mt.cbFormat);
        LPBITMAPINFOHEADER lpbi = HEADER(mt.pbFormat);
        lpbi->biSize = sizeof(BITMAPINFOHEADER);
        lpbi->biCompression = MKFOURCC('c','v','i','d');
        lpbi->biBitCount = 24;
	lpbi->biWidth = 320;
  	lpbi->biHeight = 240;
        lpbi->biPlanes = 1;
        lpbi->biSizeImage = DIBSIZE(*lpbi);
        //mt.lSampleSize = DIBSIZE(*lpbi);
	// !!! AvgTimePerFrame?  dwBitRate?
	SetMediaType(&mt);
	FreeMediaType(mt);

	SetX2Y(0, 0, 0);
	SetX2Y(2*UNITS, 0, -1);

	SetX2Y(4*UNITS, 1, 0);

        SetProjectLength(6*UNITS);

	IsEverythingConnectedRight();
	
#endif

    ASSERT(phr);

}


//
// Destructor
//
CBigSwitch::~CBigSwitch()
{
    DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("::~CBigSwitch")));

    Reset();

    DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("Deleting inputs")));
    for (int z = 0; z < m_cInputs; z++)
	delete m_pInput[z];
    if (m_cInputs)
        delete m_pInput;
    DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("Deleting outputs")));
    for (z = 0; z < m_cOutputs; z++)
	delete m_pOutput[z];
    if (m_cOutputs)
        delete m_pOutput;
    FreeMediaType( m_mtAccept );
    if (m_pPoolAllocator)
        m_pPoolAllocator->Release();
    if (m_pShareSwitch)
        m_pShareSwitch->Release();
}



STDMETHODIMP CBigSwitch::NonDelegatingQueryInterface(REFIID riid, void ** ppv)
{
    CheckPointer(ppv,E_POINTER);

    if (riid == IID_IAMSetErrorLog) {
        return GetInterface( (IAMSetErrorLog*) this, ppv );
    } else if (riid == IID_IAMOutputBuffering) {
        return GetInterface( (IAMOutputBuffering*) this, ppv );
    } else if (riid == IID_IBigSwitcher) {
        DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("CBigSwitch: QI for IBigSwitcher")));
        return GetInterface((IBigSwitcher *) this, ppv);
    } else if (riid == IID_IPersistPropertyBag) {
        // return GetInterface((IPersistPropertyBag *) this, ppv);
    } else if (riid == IID_IGraphConfigCallback) {
        return GetInterface((IGraphConfigCallback *) this, ppv);
    } else if (riid == IID_IPersistStream) {
        return GetInterface((IPersistStream *) this, ppv);
    }
    return CBaseFilter::NonDelegatingQueryInterface(riid, ppv);
}

//
// IBigSwitcher implementation
//

// Throw all queued data away, and start over
//
STDMETHODIMP CBigSwitch::Reset()
{
    CAutoLock cObjectLock(m_pLock);
    if (m_State != State_Stopped)
	return VFW_E_NOT_STOPPED;

    DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("CBigSwitch::Reset switch matrix")));
    for (int i = 0; i < m_cInputs; i++) {

        InputIsASource( i, FALSE );

        CRANK *p = m_pInput[i]->m_pCrankHead, *p2;
        while (p) {
	    p2 = p->Next;
	    delete p;
 	    p = p2;
        }
        m_pInput[i]->m_pCrankHead = NULL;
    }

    // free delayload info
    //
    if( IsDynamic( ) )
    {
        CAutoLock lock(&m_csFilterLoad);

        UnloadAll();	// unload all the dynamic sources

        FILTERLOADINFO *pfli = m_pFilterLoad;
        while (pfli) {
            if (pfli->bstrURL) {
                SysFreeString(pfli->bstrURL);
            }
	    if (pfli->pSkew) {
		CoTaskMemFree(pfli->pSkew);
	    }
	    if (pfli->pSetter) {
		pfli->pSetter->Release();
	    }
            FreeMediaType(pfli->mtShare);

            FILTERLOADINFO *p = pfli;
            pfli = pfli->pNext;
            delete p;
        }

        m_pFilterLoad = NULL;
    }

    SetDirty(TRUE);
    return S_OK;
}


// pin X goes to pin Y starting at time rt
//
STDMETHODIMP CBigSwitch::SetX2Y( REFERENCE_TIME rt, long X, long Y )
{
    CAutoLock cObjectLock(m_pLock);
    if (m_State != State_Stopped)
	return VFW_E_NOT_STOPPED;

    if (X < 0 || X >= m_cInputs || Y >= m_cOutputs)
	return E_INVALIDARG;
    if (rt < 0)
	return E_INVALIDARG;

    DbgLog((LOG_TRACE, TRACE_MEDIUM,TEXT("SetX2Y %dms (%d,%d)"), (int)(rt / 10000), X, Y));

    CRANK *p = m_pInput[X]->m_pCrankHead, *pNew, *pP = NULL;

    // insert into our linked list sorted by time.  Fix the end times to be
    // the start time of the next pin's connection

    while (p && p->rtStart < rt) {
	pP = p;
	p = p->Next;
    }
    if (p && p->rtStart == rt)
	return E_INVALIDARG;
    pNew = new CRANK;
    if (pNew == NULL)
	return E_OUTOFMEMORY;
    pNew->iOutpin = Y;
    pNew->rtStart = rt;
    pNew->rtStop = MAX_TIME;
    if (p)
	pNew->rtStop = p->rtStart;
    if (pP) {
	pP->rtStop = rt;
	pP->Next = pNew;
    }
    pNew->Next = p;
    if (m_pInput[X]->m_pCrankHead == NULL || p == m_pInput[X]->m_pCrankHead)
	m_pInput[X]->m_pCrankHead = pNew;

#ifdef DEBUG
    m_pInput[X]->DumpCrank();
#endif
    SetDirty(TRUE);
    return S_OK;
}



// !!! error can't back out the ones that worked, scrap this?
//
STDMETHODIMP CBigSwitch::SetX2YArray( REFERENCE_TIME *relative, long * pX, long * pY, long ArraySize )
{
    CAutoLock cObjectLock(m_pLock);
    if (m_State != State_Stopped)
	return VFW_E_NOT_STOPPED;

    HRESULT hr;
    for (int i = 0; i < ArraySize; i++) {
	hr = SetX2Y(relative[i], pX[i], pY[i]);
	if (hr != NOERROR)
	    break;
    }
    return hr;
}


// how many input pins?
//
STDMETHODIMP CBigSwitch::GetInputDepth( long * pDepth )
{
    CAutoLock cObjectLock(m_pLock);
    CheckPointer(pDepth,E_POINTER);

    if (m_cInputs == 0)
	return E_UNEXPECTED;
    else
	*pDepth = m_cInputs;
    return NOERROR;
}


// how many input pins do we have?
//
STDMETHODIMP CBigSwitch::SetInputDepth( long Depth )
{
    CAutoLock cObjectLock(m_pLock);
    if (m_State != State_Stopped)
	return VFW_E_NOT_STOPPED;

    DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("IBigSwitcher::SetInputDepth to %d"), Depth));
    if (Depth <= 0)
	return E_INVALIDARG;
    else
        return CreateInputPins(Depth);
}

// how many output pins?
//
STDMETHODIMP CBigSwitch::GetOutputDepth( long * pDepth )
{
    CAutoLock cObjectLock(m_pLock);
    CheckPointer(pDepth,E_POINTER);
    if (m_cOutputs == 0)
	return E_UNEXPECTED;
    else
	*pDepth = m_cOutputs;
    return NOERROR;
}


// how many output pins do we have?
//
STDMETHODIMP CBigSwitch::SetOutputDepth( long Depth )
{
    CAutoLock cObjectLock(m_pLock);
    if (m_State != State_Stopped)
	return VFW_E_NOT_STOPPED;

    DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("IBigSwitcher::SetOutputDepth to %d"), Depth));
    if (Depth <= 0)
	return E_INVALIDARG;
    else
        return CreateOutputPins(Depth);
}


STDMETHODIMP CBigSwitch::GetVendorString( BSTR * pVendorString )
{
    return E_NOTIMPL;
}


STDMETHODIMP CBigSwitch::GetCaps( long Index, long * pReturn )
{
    return E_NOTIMPL;
}


// which TLDB group this switch is used for
//
STDMETHODIMP CBigSwitch::SetGroupNumber( int n )
{
    CAutoLock cObjectLock(m_pLock);

    if (n < 0)
	return E_INVALIDARG;
    else
	m_nGroupNumber = n;
    return NOERROR;
}


// which TLDB group this switch is used for
//
STDMETHODIMP CBigSwitch::GetGroupNumber( int *pn )
{
    CAutoLock cObjectLock(m_pLock);
    CheckPointer(pn, E_POINTER);

    *pn = m_nGroupNumber;
    return NOERROR;
}


// our current CRANK position
//
STDMETHODIMP CBigSwitch::GetCurrentPosition( REFERENCE_TIME *prt )
{
    CAutoLock cObjectLock(m_pLock);
    CheckPointer(prt, E_POINTER);

    *prt = m_rtCurrent;
    return NOERROR;
}


// !!! only checks for muxing - the graph won't necessarily accomplish anything
// !!! doesn't say if an output won't get data at time 0
// !!! return which inputs go to the same output on failure?
//
// Does the current switch matrix make sense, or can we find something that
// was programmed wrong?  Are we ready to run?
//
STDMETHODIMP CBigSwitch::IsEverythingConnectedRight()
{
    CAutoLock cObjectLock(m_pLock);
    if (m_State != State_Stopped)
	return VFW_E_NOT_STOPPED;

    DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("IBigSwitcher::IsEverythingConnectedRight")));
    if (m_cInputs == 0 || m_cOutputs == 0) {
        DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("NO - no pins")));
	return VFW_E_NOT_CONNECTED;
    }
    if (m_mtAccept.majortype == GUID_NULL) {
        DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("NO - no media type")));
	return VFW_E_INVALIDMEDIATYPE;
    }
#if 0   // some groups might be empty, but others might not, so don't error
    if (m_rtProjectLength <= 0) {
        DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("NO - project length is 0")));
	return E_INVALIDARG;
    }
#endif
    if (m_dFrameRate <= 0) {
        DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("NO - no frame rate set")));
	return E_INVALIDARG;
    }
// in order for smart recompression to fail gracefully, this isn't an error
// If there's no sound card, the app can notice RenderOutputPins failing
#if 0
    if (m_pOutput[0]->m_Connected == NULL) {
	DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("NO - render pin is not connected")));
	return VFW_E_NOT_CONNECTED;
    }
#endif

    // check that the necessary inputs and outputs are connected, and that
    // the times are not too high
    for (int z = 0; z < m_cInputs; z++) {
        CRANK *p = m_pInput[z]->m_pCrankHead;

        if( !IsDynamic( ) )
        {
	    if (p && m_pInput[z]->m_Connected == NULL) {
                DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("NO - in %d is not connected"), z));
	        return VFW_E_NOT_CONNECTED;
	    }
        }
        else
        {
	    // sources are connected dynamically
	    if(p && m_pInput[z]->m_Connected == NULL && !m_pInput[z]->m_fIsASource){
                DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("NO - in %d is not connected"), z));
	        return VFW_E_NOT_CONNECTED;
	    }
        }

	while (p) {
	    if (p->iOutpin >0 && m_pOutput[p->iOutpin]->m_Connected == NULL) {
		DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("NO - out %d is not connected"),
					p->iOutpin));
		return VFW_E_NOT_CONNECTED;
	    }
	    if (p->iOutpin >= 0 && p->rtStart >= m_rtProjectLength) {
		DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("NO - out %d connected at time %dms"),
					p->iOutpin, (int)(p->rtStart / 10000)));
		DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("   and project length is only %dms"),
					(int)(m_rtProjectLength / 10000)));
		return E_INVALIDARG;
	    }
	    p = p->Next;
	}
    }

    // check that more than one input isn't trying to get at the same output
    // at the same time
    for (z = 0; z < m_cInputs - 1; z++) {
        CRANK *p = m_pInput[z]->m_pCrankHead;
	while (p) {
	    for (int y = z + 1; y < m_cInputs; y++) {
		CRANK *p2 = m_pInput[y]->m_pCrankHead;
		while (p2) {
		    if ((p->iOutpin == p2->iOutpin) && (p->iOutpin != -1) &&
			    ((p2->rtStart >= p->rtStart &&
			    p2->rtStart < p->rtStop) || (p2->rtStop > p->rtStart
			    && p2->rtStop < p->rtStop))) {
        		DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("NO - in %d & %d both go to out %d"), z, y, p->iOutpin));
			return E_INVALIDARG;
		    }
		    p2 = p2->Next;
		}
	    }
	    p = p->Next;
	}
    }
    DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("YES!")));
    return S_OK;
}


// connect with this media type
//
STDMETHODIMP CBigSwitch::SetMediaType(AM_MEDIA_TYPE *pmt)
{
    CAutoLock cObjectLock(m_pLock);
    CheckPointer(pmt, E_POINTER);
    if (m_State != State_Stopped)
	return VFW_E_NOT_STOPPED;

    DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("IBigSwitcher::SetMediaType")));
    for (int i = 0; i < m_cInputs; i++) {
	if (m_pInput[i]->IsConnected())
	    return VFW_E_ALREADY_CONNECTED;
    }
    for (i = 0; i < m_cOutputs; i++) {
	if (m_pOutput[i]->IsConnected())
	    return VFW_E_ALREADY_CONNECTED;
    }

    // Make sure our buffers are going to be big enough to hold a video frame
    // or 1/FPS sec worth of audio.  If we're doing dynamic connections
    // we're not going to connect any sources, so nobody is ever going to
    // tell us how big to make our buffers.  We need to figure it out
    // now or blow up
    // !!! this won't work if the switch accepts compressed audio
    if (pmt->majortype == MEDIATYPE_Audio) {
        ASSERT(IsEqualGUID(pmt->formattype, FORMAT_WaveFormatEx));
	LPWAVEFORMATEX pwfx = (LPWAVEFORMATEX)pmt->pbFormat;
	// a little extra to be safe
	m_cbBuffer = (LONG)(pwfx->nSamplesPerSec / m_dFrameRate * 1.2 *
						pwfx->nBlockAlign);
    } else if (pmt->majortype == MEDIATYPE_Video) {
	if (pmt->lSampleSize) {
	    m_cbBuffer = pmt->lSampleSize;
	} else {
	    //
            if (IsEqualGUID(pmt->formattype, FORMAT_VideoInfo)) {
		VIDEOINFOHEADER *pvi = (VIDEOINFOHEADER *)pmt->pbFormat;
		m_cbBuffer = (LONG)(HEADER(pvi)->biSizeImage);
	        // broken file doesn't have biSizeImage set.  Assume as
	        // big as uncompressed
	        if (m_cbBuffer == 0) {
		    m_cbBuffer = DIBSIZE(*HEADER(pvi));
	        }
	    } else if (IsEqualGUID(pmt->formattype, FORMAT_MPEGVideo)) {
		MPEG1VIDEOINFO *pvi = (MPEG1VIDEOINFO *)pmt->pbFormat;
		m_cbBuffer = (LONG)(pvi->hdr.bmiHeader.biSizeImage);
	        // broken file doesn't have biSizeImage set.  Assume as
	        // big as uncompressed
	        if (m_cbBuffer == 0) {
		    m_cbBuffer = DIBSIZE(pvi->hdr.bmiHeader);
	        }

// !!! This won't work.  If we ever support MPEG smart recompression,
// be careful - biSizeImage is going to be 0.

#if 0
	    } else if (IsEqualGUID(pmt->formattype, FORMAT_VideoInfo2)) {
		VIDEOINFOHEADER2 *pvi = (VIDEOINFOHEADER2 *)pmt->pbFormat;
		m_cbBuffer = (LONG)(pvi->bmiHeader.biSizeImage);
	    } else if (IsEqualGUID(pmt->formattype, FORMAT_MPEG2Video)) {
		MPEG2VIDEOINFO *pvi = (MPEG2VIDEOINFO *)pmt->pbFormat;
		m_cbBuffer = (LONG)(pvi->bmiHeader.biSizeImage);
#endif
	    } else {
		// !!! DShow, how can I tell generically?
		ASSERT(FALSE);
		m_cbBuffer = 100000;	// ick ick
	    }
	}
    }

    FreeMediaType(m_mtAccept);
    CopyMediaType(&m_mtAccept, pmt);
    SetDirty(TRUE);
    return S_OK;
}


// what media type are we connecting with?
//
STDMETHODIMP CBigSwitch::GetMediaType(AM_MEDIA_TYPE *pmt)
{
    CAutoLock cObjectLock(m_pLock);
    DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("IBigSwitcher::GetMediaType")));
    CheckPointer(pmt, E_POINTER);
    CopyMediaType(pmt, &m_mtAccept);
    return S_OK;
}



STDMETHODIMP CBigSwitch::GetProjectLength(REFERENCE_TIME *prt)
{
    CAutoLock cObjectLock(m_pLock);
    DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("IBigSwitcher::GetProjectLength")));
    CheckPointer(prt, E_POINTER);
    *prt = m_rtProjectLength;
    return S_OK;
}


STDMETHODIMP CBigSwitch::SetProjectLength(REFERENCE_TIME rt)
{
    CAutoLock cObjectLock(m_pLock);
    if (m_State != State_Stopped)
	return VFW_E_NOT_STOPPED;
    DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("IBigSwitcher::SetProjectLength")));
    if (rt < 0)
	return E_INVALIDARG;
    m_rtProjectLength = rt;
    m_rtStop = rt;	// unless told otherwise, play the whole project
    SetDirty(TRUE);
    return S_OK;
}


STDMETHODIMP CBigSwitch::GetFrameRate(double *pd)
{
    CAutoLock cObjectLock(m_pLock);
    CheckPointer(pd, E_POINTER);
    *pd = m_dFrameRate;
    DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("IBigSwitcher::GetFrameRate %f"), (float)*pd));
    return S_OK;
}


STDMETHODIMP CBigSwitch::SetFrameRate(double d)
{
    CAutoLock cObjectLock(m_pLock);
    if (m_State != State_Stopped)
	return VFW_E_NOT_STOPPED;
    if (d <= 0.)
	return E_INVALIDARG;
    DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("IBigSwitcher::SetFrameRate %d/10 fps"),
						(int)(d * 10)));
    m_dFrameRate = d;
    m_rtCurrent = Frame2Time( Time2Frame( m_rtCurrent, m_dFrameRate ), m_dFrameRate );
    m_rtNext = Frame2Time( Time2Frame( m_rtCurrent, m_dFrameRate ) + 1, m_dFrameRate );

    // for audio, make sure our buffers are going to be big enough to hold
    // enough data for 1/FPS sec worth of audio.  If we're doing dynamic
    // connections, we're not going to connect any sources, so nobody is ever
    // going to tell us how big to make our buffers.  We need to figure it out
    // now or blow up
    if (m_mtAccept.majortype == MEDIATYPE_Audio) {
        ASSERT(IsEqualGUID(m_mtAccept.formattype, FORMAT_WaveFormatEx));
	LPWAVEFORMATEX pwfx = (LPWAVEFORMATEX)m_mtAccept.pbFormat;
	// a little extra to be safe
	m_cbBuffer = (LONG)(pwfx->nSamplesPerSec / m_dFrameRate * 1.2 *
						pwfx->nBlockAlign);
    }

    SetDirty(TRUE);
    return S_OK;
}


STDMETHODIMP CBigSwitch::InputIsASource(int n, BOOL fSource)
{
    if (n < 0 || n >= m_cInputs)
	return E_INVALIDARG;

    m_pInput[n]->m_fIsASource = fSource;
    if (fSource)
        DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("IBigSwitch::Input %d is a SOURCE"), n));

    return NOERROR;
}

STDMETHODIMP CBigSwitch::IsInputASource( int n, BOOL * pBool )
{
    CheckPointer( pBool, E_POINTER );

    *pBool = m_pInput[n]->m_fIsASource;
    return NOERROR;
}

STDMETHODIMP CBigSwitch::SetPreviewMode(BOOL fPreview)
{
    CAutoLock cObjectLock(m_pLock);
    if (m_State != State_Stopped)
	return VFW_E_NOT_STOPPED;
    DbgLog((LOG_TRACE, TRACE_MEDIUM,TEXT("Switch:  PreviewMode %d"), fPreview));
    m_fPreview = fPreview;
    return NOERROR;
}


STDMETHODIMP CBigSwitch::GetPreviewMode(BOOL *pfPreview)
{
    CAutoLock cObjectLock(m_pLock);
    if (m_State != State_Stopped)
	return VFW_E_NOT_STOPPED;
    CheckPointer(pfPreview, E_POINTER);
    *pfPreview = m_fPreview;
    return NOERROR;
}

STDMETHODIMP CBigSwitch::GetInputPin(int iPin, IPin **ppPin)
{
    CheckPointer(ppPin, E_POINTER);

    if (iPin < 0 || iPin >= m_cInputs)
        return E_INVALIDARG;

    *ppPin = m_pInput[iPin];
    m_pInput[iPin]->AddRef();

    return S_OK;
}

STDMETHODIMP CBigSwitch::GetOutputPin(int iPin, IPin **ppPin)
{
    CheckPointer(ppPin, E_POINTER);

    if (iPin < 0 || iPin >= m_cOutputs)
        return E_INVALIDARG;

    *ppPin = m_pOutput[iPin];
    m_pOutput[iPin]->AddRef();

    return S_OK;
}


#if 0
//
// We have to declare ourselves a "live graph" to avoid hanging if we don't
// always deliver frames in pause mode. We do this by returning VFW_S_CANT_CUE
// !!! Is this necessary?  In theory, no...
//
STDMETHODIMP CBigSwitch::GetState(DWORD dwMSecs, FILTER_STATE *State)
{
    //UNREFERENCED_PARAMETER(dwMSecs);
    CheckPointer(State,E_POINTER);
    ValidateReadWritePtr(State,sizeof(FILTER_STATE));

    *State = m_State;
    if (m_State == State_Paused) {
        //DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("*** Cant cue!")));
	return VFW_S_CANT_CUE;
    } else {
        return S_OK;
    }
    return CBaseFilter::GetState(dwMSecs, State);
}
#endif

//
// GetPinCount
//
int CBigSwitch::GetPinCount()
{
    return (m_cInputs + m_cOutputs);
}


//
// GetPin
//
CBasePin *CBigSwitch::GetPin(int n)
{
    if (n < 0 || n >= m_cInputs + m_cOutputs)
        return NULL;

    if (n < m_cInputs) {
        return m_pInput[n];
    } else {
	return m_pOutput[n - m_cInputs];
    }
}

// we provide our own pin enumerator because the one in the base class
// takes O(n^2) time and this filter has many pins making pin
// enumeration a huge hotspot
//
HRESULT CBigSwitch::EnumPins(IEnumPins ** ppEnum)
{
    HRESULT hr = S_OK;
    *ppEnum = 0;

    typedef CComEnum<IEnumPins,
        &IID_IEnumPins, IPin*,
        _CopyInterface<IPin> >
        CEnumPin;

    CEnumPin *pep = new CComObject<CEnumPin>;
    if(pep)
    {
        // make an array of pins to send atl enumerator which does an
        // alloc and copy. can't see how to save that step.
        ULONG cPins = m_cInputs + m_cOutputs;
        IPin **rgpPin = new IPin *[cPins];
        if(rgpPin)
        {
            for(LONG i = 0; i < m_cInputs; i++) {
                rgpPin[i] = m_pInput[i];
            }
            for(i = 0; i < m_cOutputs; i++) {
                rgpPin[i + m_cInputs] = m_pOutput[i];
            }

            hr = pep->Init(rgpPin, rgpPin + cPins, 0, AtlFlagCopy);
            if(SUCCEEDED(hr))
            {
                *ppEnum = pep;
                pep->AddRef();
            }
            delete[] rgpPin;
        }
        else
        {
            hr = E_OUTOFMEMORY;
        }

        if(FAILED(hr)) {
            delete pep;
        }
    }
    else
    {
        hr = E_OUTOFMEMORY;
    }

    return hr;
}

//
// CreateInputPins
//
HRESULT CBigSwitch::CreateInputPins(long Depth)
{
    DbgLog((LOG_TRACE, TRACE_LOW, TEXT("CBigSwitch::CreateInputPins")));
    HRESULT hr = NOERROR;
    WCHAR szbuf[40];
    CBigSwitchInputPin *pPin;

    // make a new array as big as we'll need
    //
    CBigSwitchInputPin **pNew = new CBigSwitchInputPin *[Depth];
    if (pNew == NULL)
	return E_OUTOFMEMORY;

    // if we're shrinking the input pin count, delete the extras
    //
    if( Depth < m_cInputs )
    {
        for( int z = Depth ; z < m_cInputs ; z++ )
        {
            delete m_pInput[z];
            m_pInput[z] = NULL;
        }
    }

    // copy over as many as we can from the old array
    //
    for (int z = 0; z < min( Depth, m_cInputs ); z++) {
	pNew[z] = m_pInput[z];
    }

    // if the old array existed, delete it now, since we copied it
    //
    if (m_cInputs)
        delete m_pInput;
    m_pInput = pNew;

    // if we grew the array, create new pins and put them in the array
    //
    if( Depth > m_cInputs )
    {
        for (z = m_cInputs; z < Depth; z++) {
            wsprintfW(szbuf, L"Input %d", z);
            pPin = new CBigSwitchInputPin(NAME("Switch Input"), this, &hr, szbuf);
            if (FAILED(hr) || pPin == NULL) {
                delete pPin;
                return E_OUTOFMEMORY;
            }
 	    m_pInput[z] = pPin;
	    pPin->m_iInpin = z;	// which pin is this?
        }
    }

    m_cInputs = Depth;

    return S_OK;
}


//
// CreateOutputPins
//
HRESULT CBigSwitch::CreateOutputPins(long Depth)
{
    DbgLog((LOG_TRACE, TRACE_LOW, TEXT("CBigSwitch::CreateOutputPins")));
    HRESULT hr = NOERROR;
    WCHAR szbuf[40];
    CBigSwitchOutputPin *pPin;

    CBigSwitchOutputPin **pNew = new CBigSwitchOutputPin *[Depth];
    if (pNew == NULL)
	return E_OUTOFMEMORY;

    if( Depth < m_cOutputs )
    {
        for( int z = Depth ; z < m_cOutputs ; z++ )
        {
            delete m_pOutput[z];
            m_pOutput[z] = NULL;
        }
    }

    for (int z = 0; z < min( Depth,  m_cOutputs ); z++) {
	pNew[z] = m_pOutput[z];
    }

    if (m_cOutputs)
        delete m_pOutput;
    m_pOutput = pNew;

    if( Depth > m_cOutputs )
    {
        for (z = m_cOutputs; z < Depth; z++) {
            wsprintfW(szbuf, L"Output %d", z);
            pPin = new CBigSwitchOutputPin(NAME("Switch Output"), this, &hr, szbuf);
            if (FAILED(hr) || pPin == NULL) {
                delete pPin;
                return E_OUTOFMEMORY;
            }
 	    m_pOutput[z] = pPin;
	    pPin->m_iOutpin = z;	// which pin is this?
        }
    }

    m_cOutputs = Depth;

    return S_OK;
}



//
// IPersistStream
//

// tell our clsid
//
STDMETHODIMP CBigSwitch::GetClassID(CLSID *pClsid)
{
    CheckPointer(pClsid, E_POINTER);
    *pClsid = CLSID_BigSwitch;
    return S_OK;
}


typedef struct {
    REFERENCE_TIME rtStart;
    int iInpin;
    int iOutpin;
} CRANK2;

typedef struct {
    int version;
    long nDynaFlags;	// dynamic or not?
    int InputDepth;
    int OutputDepth;
    int nGroupNumber;
    REFERENCE_TIME rtProjectLength;
    double dFrameRate;
    BOOL fPreviewMode;
    BOOL fIsCompressed;
    AM_MEDIA_TYPE mt; // format is hidden after the array
    int count;
    CRANK2 crank[1];
    // also hidden after the array is the list of which inputs are sources
} saveSwitch;


// persist ourself - we have a bunch of random stuff to save, our media type
// (sans format), an array of queued connections, and finally the format of
// the media type
//
HRESULT CBigSwitch::WriteToStream(IStream *pStream)
{
    DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("CBigSwitch::WriteToStream")));

    CheckPointer(pStream, E_POINTER);
    int count = 0;
    int savesize;
    saveSwitch *px;
    CRANK *p;

    // how many queued connections to save?

    for (int i = 0; i < m_cInputs; i++) {
        p = m_pInput[i]->m_pCrankHead;
        while (p) {
	    count++;
	    p = p->Next;
        }
    }

    // how big will our saved data be?
    savesize = sizeof(saveSwitch) + (count - 1) * sizeof(CRANK2) +
					m_mtAccept.cbFormat +
					m_cInputs * sizeof(BOOL);

    // !!! We need to change version number based on whether we're dynamic
    // or not???

    // m_pFilterLoad won't be valid unless we're dynamic
    //
    FILTERLOADINFO *pfli = m_pFilterLoad;
    DWORD cLoadInfo = 0;
    if (pfli) {
        savesize += sizeof(cLoadInfo); // count to load
        while (pfli) {
	    if (pfli->bstrURL)
                savesize += sizeof(FILTERLOADINFO) + sizeof(WCHAR) *
					(lstrlenW(pfli->bstrURL) + 1);
	    else
		savesize += sizeof(FILTERLOADINFO) + sizeof(WCHAR);
	    ASSERT(pfli->cSkew > 0);
	    savesize += sizeof(pfli->cSkew) + pfli->cSkew *
					sizeof(STARTSTOPSKEW);
	    savesize += pfli->mtShare.cbFormat;
	    savesize += sizeof(LONG);	// size of props
	    if (pfli->pSetter) {	// how much to save the props?
		LONG cBlob = 0;
		BYTE *pBlob = NULL;
		pfli->pSetter->SaveToBlob(&cBlob, &pBlob);
		if (cBlob) savesize += cBlob;
	    }
            ++cLoadInfo;
            pfli = pfli->pNext;
        }
    }

    DbgLog((LOG_TRACE, TRACE_HIGHEST,TEXT("Persisted data is %d bytes"), savesize));
    px = (saveSwitch *)QzTaskMemAlloc(savesize);
    if (px == NULL) {
        DbgLog((LOG_ERROR,1,TEXT("*** Out of memory")));
	return E_OUTOFMEMORY;
    }
    px->version = 1;  // version 2 has dynamic stuff in it!
    px->nDynaFlags = m_nDynaFlags;
    px->InputDepth = m_cInputs;
    px->OutputDepth = m_cOutputs;
    px->nGroupNumber = m_nGroupNumber;
    px->rtProjectLength = m_rtProjectLength;
    px->dFrameRate = m_dFrameRate;
    px->fPreviewMode = m_fPreview;
    px->fIsCompressed = m_bIsCompressed;
    px->count = 0;
    // save all the queued connection data
    for (i = 0; i < m_cInputs; i++) {
        p = m_pInput[i]->m_pCrankHead;
        while (p) {
	    px->crank[px->count].rtStart = p->rtStart;
	    px->crank[px->count].iInpin = i;
	    px->crank[px->count].iOutpin = p->iOutpin;
            px->count++;
	    p = p->Next;
        }
    }
    px->mt = m_mtAccept;
    // Can't persist pointers
    px->mt.pbFormat = NULL;
    px->mt.pUnk = NULL;		// !!!

    // the format goes after the array
    CopyMemory(&px->crank[px->count], m_mtAccept.pbFormat, m_mtAccept.cbFormat);

    // finally, the array of which inputs are sources
    BOOL *pfSource = (BOOL *)((BYTE *)(&px->crank[px->count]) +
						m_mtAccept.cbFormat);
    for (i = 0; i < m_cInputs; i++){
	*(pfSource + i) = m_pInput[i]->m_fIsASource;
    }

    // but after that, comes the dynamic loading info....
    BYTE *pStuff = (BYTE *) pfSource + m_cInputs * sizeof(BOOL);

    if (cLoadInfo) {
        px->version = 2;  // mark as having dynamic stuff

        CopyMemory(pStuff, (BYTE *) &cLoadInfo, sizeof(cLoadInfo));
        pStuff += sizeof(cLoadInfo);

        pfli = m_pFilterLoad;
        while (pfli) {
            CopyMemory(pStuff, pfli, sizeof(FILTERLOADINFO));
            AM_MEDIA_TYPE *pmt = &(((FILTERLOADINFO *)pStuff)->mtShare);
            pmt->pbFormat = NULL;       // can't persist these as is
            pmt->pUnk = NULL;

	    ((FILTERLOADINFO *)pStuff)->pSetter = NULL;	// can't persist as is

	    int cb;
	    if (pfli->bstrURL)
                cb = sizeof(WCHAR) * (lstrlenW(pfli->bstrURL) + 1);
	    else
                cb = sizeof(WCHAR);

            // hack: overwrite first DWORD with string length
            CopyMemory(pStuff, (BYTE *) &cb, sizeof(cb));

            pStuff += sizeof(FILTERLOADINFO);

	    CopyMemory(pStuff, &pfli->c