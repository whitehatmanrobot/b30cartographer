         get {
                return this.coBrandField;
            }
            set {
                this.coBrandField = value;
            }
        }
        
        /// <remarks/>
        public string PartnerEmailServiceUrl {
            get {
                return this.partnerEmailServiceUrlField;
            }
            set {
                this.partnerEmailServiceUrlField = value;
            }
        }
        
        /// <remarks/>
        public string[] CustomStrings {
            get {
                return this.customStringsField;
            }
            set {
                this.customStringsField = value;
            }
        }
        
        /// <remarks/>
        public DeliveryType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum DeliveryType {
        
        /// <remarks/>
        Email = 1,
        
        /// <remarks/>
        PendingRole = 2,
        
        /// <remarks/>
        PartnerEmail = 4,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class Rolemap {
        
        private Principal[] principalsField;
        
        private Service serviceField;
        
        /// <remarks/>
        public Principal[] Principals {
            get {
                return this.principalsField;
            }
            set {
                this.principalsField = value;
            }
        }
        
        /// <remarks/>
        public Service Service {
            get {
                return this.serviceField;
            }
            set {
                this.serviceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class Principal {
        
        private RoleId[] roleIdsField;
        
        private IdentityInfo identityInfoField;
        
        /// <remarks/>
        public RoleId[] RoleIds {
            get {
                return this.roleIdsField;
            }
            set {
                this.roleIdsField = value;
            }
        }
        
        /// <remarks/>
        public IdentityInfo IdentityInfo {
            get {
                return this.identityInfoField;
            }
            set {
                this.identityInfoField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class IdentityInfo {
        
        private IdentityState stateField;
        
        private IdentityHandle handleField;
        
        private string displayNameField;
        
        /// <remarks/>
        public IdentityState State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        public IdentityHandle Handle {
            get {
                return this.handleField;
            }
            set {
                this.handleField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum IdentityState {
        
        /// <remarks/>
        Pending,
        
        /// <remarks/>
        Declined,
        
        /// <remarks/>
        Accepted,
        
        /// <remarks/>
        Removed,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class IdentityHandle {
        
        private IdentityType typeField;
        
        private string nameField;
        
        private long puidField;
        
        private bool isPassportNameHiddenField;
        
        /// <remarks/>
        public IdentityType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public long Puid {
            get {
                return this.puidField;
            }
            set {
                this.puidField = value;
            }
        }
        
        /// <remarks/>
        public bool IsPassportNameHidden {
            get {
                return this.isPassportNameHiddenField;
            }
            set {
                this.isPassportNameHiddenField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum IdentityType {
        
        /// <remarks/>
        User,
        
        /// <remarks/>
        Everyone,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class PrincipalFilter {
        
        private IdentityHandle[] identityHandlesField;
        
        private RoleId[] roleIdsField;
        
        /// <remarks/>
        public IdentityHandle[] IdentityHandles {
            get {
                return this.identityHandlesField;
            }
            set {
                this.identityHandlesField = value;
            }
        }
        
        /// <remarks/>
        public RoleId[] RoleIds {
            get {
                return this.roleIdsField;
            }
            set {
                this.roleIdsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class InviteOptions {
        
        private string userTextField;
        
        private string marketField;
        
        private string inviterNameField;
        
        private string customMarketingField;
        
        private string coBrandField;
        
        private string partnerEmailServiceUrlField;
        
        private string[] customStringsField;
        
        private DeliveryType typeField;
        
        /// <remarks/>
        public string UserText {
            get {
                return this.userTextField;
            }
            set {
                this.userTextField = value;
            }
        }
        
        /// <remarks/>
        public string Market {
            get {
                return this.marketField;
            }
            set {
                this.marketField = value;
            }
        }
        
        /// <remarks/>
        public string InviterName {
            get {
                return this.inviterNameField;
            }
            set {
                this.inviterNameField = value;
            }
        }
        
        /// <remarks/>
        public string CustomMarketing {
            get {
                return this.customMarketingField;
            }
            set {
                this.customMarketingField = value;
            }
        }
        
        /// <remarks/>
        public string CoBrand {
            get {
                return this.coBrandField;
            }
            set {
                this.coBrandField = value;
            }
        }
        
        /// <remarks/>
        public string PartnerEmailServiceUrl {
            get {
                return this.partnerEmailServiceUrlField;
            }
            set {
                this.partnerEmailServiceUrlField = value;
            }
        }
        
        /// <remarks/>
        public string[] CustomStrings {
            get {
                return this.customStringsField;
            }
            set {
                this.customStringsField = value;
            }
        }
        
        /// <remarks/>
        public DeliveryType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class AddPrincipalOptions {
        
        private bool sendInvitationField;
        
        private InviteOptions customInviteOptionsField;
        
        private IdentityState initialIdentityStateField;
        
        /// <remarks/>
        public bool SendInvitation {
            get {
                return this.sendInvitationField;
            }
            set {
                this.sendInvitationField = value;
            }
        }
        
        /// <remarks/>
        public InviteOptions CustomInviteOptions {
            get {
                return this.customInviteOptionsField;
            }
            set {
                this.customInviteOptionsField = value;
            }
        }
        
        /// <remarks/>
        public IdentityState InitialIdentityState {
            get {
                return this.initialIdentityStateField;
            }
            set {
                this.initialIdentityStateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class FindInverseServiceResult {
        
        private ServiceLocation[] serviceLocationsField;
        
        private System.DateTime lastChangeField;
        
        /// <remarks/>
        public ServiceLocation[] ServiceLocations {
            get {
                return this.serviceLocationsField;
            }
            set {
                this.serviceLocationsField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastChange {
            get {
                return this.lastChangeField;
            }
            set {
                this.lastChangeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class ServiceFilter {
        
        private ServiceType[] typesField;
        
        private ServiceHandle[] handlesField;
        
        private System.DateTime lastChangeField;
        
        /// <remarks/>
        public ServiceType[] Types {
            get {
                return this.typesField;
            }
            set {
                this.typesField = value;
            }
        }
        
        /// <remarks/>
        public ServiceHandle[] Handles {
            get {
                return this.handlesField;
            }
            set {
                this.handlesField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastChange {
            get {
                return this.lastChangeField;
            }
            set {
                this.lastChangeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class CallTraceEntry {
        
        private short depthField;
        
        private string hostNameField;
        
        private string apiField;
        
        private long partitionKeyField;
        
        private short partitionIdField;
        
        private CallResponseType responseField;
        
        private string errorInfoField;
        
        /// <remarks/>
        public short Depth {
            get {
                return this.depthField;
            }
            set {
                this.depthField = value;
            }
        }
        
        /// <remarks/>
        public string HostName {
            get {
                return this.hostNameField;
            }
            set {
                this.hostNameField = value;
            }
        }
        
        /// <remarks/>
        public string Api {
            get {
                return this.apiField;
            }
            set {
                this.apiField = value;
            }
        }
        
        /// <remarks/>
        public long PartitionKey {
            get {
                return this.partitionKeyField;
            }
            set {
                this.partitionKeyField = value;
            }
        }
        
        /// <remarks/>
        public short PartitionId {
            get {
                return this.partitionIdField;
            }
            set {
                this.partitionIdField = value;
            }
        }
        
        /// <remarks/>
        public CallResponseType Response {
            get {
                return this.responseField;
            }
            set {
                this.responseField = value;
            }
        }
        
        /// <remarks/>
        public string ErrorInfo {
            get {
                return this.errorInfoField;
            }
            set {
                this.errorInfoField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum CallResponseType {
        
        /// <remarks/>
        Unknown,
        
        /// <remarks/>
        Success,
        
        /// <remarks/>
        Failure,
        
        /// <remarks/>
        Redirect,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class CallTraceHeader {
        
        private short maxDepthField;
        
        private short redirectsField;
        
        private short failuresField;
        
        private CallTraceEntry[] callsField;
        
        /// <remarks/>
        public short MaxDepth {
            get {
                return this.maxDepthField;
            }
            set {
                this.maxDepthField = value;
            }
        }
        
        /// <remarks/>
        public short Redirects {
            get {
                return this.redirectsField;
            }
            set {
                this.redirectsField = value;
            }
        }
        
        /// <remarks/>
        public short Failures {
            get {
                return this.failuresField;
            }
            set {
                this.failuresField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Calls")]
        public CallTraceEntry[] Calls {
            get {
                return this.callsField;
            }
            set {
                this.callsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class AffinityClusterSettings {
        
        private bool commonClusterActAsProxyField;
        
        private bool proxyCrossClusterCallsField;
        
        private bool ignoreFEMembershipField;
        
        private ClusterUrlType proxyUrlTypeField;
        
        /// <remarks/>
        public bool CommonClusterActAsProxy {
            get {
                return this.commonClusterActAsProxyField;
            }
            set {
                this.commonClusterActAsProxyField = value;
            }
        }
        
        /// <remarks/>
        public bool ProxyCrossClusterCalls {
            get {
                return this.proxyCrossClusterCallsField;
            }
            set {
                this.proxyCrossClusterCallsField = value;
            }
        }
        
        /// <remarks/>
        public bool IgnoreFEMembership {
            get {
                return this.ignoreFEMembershipField;
            }
            set {
                this.ignoreFEMembershipField = value;
            }
        }
        
        /// <remarks/>
        public ClusterUrlType ProxyUrlType {
            get {
                return this.proxyUrlTypeField;
            }
            set {
                this.proxyUrlTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum ClusterUrlType {
        
        /// <remarks/>
        Public,
        
        /// <remarks/>
        Private,
        
        /// <remarks/>
        WcfPrivate,
        
        /// <remarks/>
        Secure,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class PartitionedResource {
        
        private System.Guid partitionKeyField;
        
        private short partitionIdField;
        
        /// <remarks/>
        public System.Guid PartitionKey {
            get {
                return this.partitionKeyField;
            }
            set {
                this.partitionKeyField = value;
            }
        }
        
        /// <remarks/>
        public short PartitionId {
            get {
                return this.partitionIdField;
            }
            set {
                this.partitionIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class ABContext {
        
        private System.Guid aBIdField;
        
        private long ownerPuidField;
        
        private long ownerCidField;
        
        private string ownerPassportField;
        
        private string ownerDisplayNameField;
        
        private bool ownerIsRestrictedField;
        
        private short partitionIdField;
        
        private bool partitionIdChangedField;
        
        private PartitionedResource sqlResField;
        
        /// <remarks/>
        public System.Guid ABId {
            get {
                return this.aBIdField;
            }
            set {
                this.aBIdField = value;
            }
        }
        
        /// <remarks/>
        public long OwnerPuid {
            get {
                return this.ownerPuidField;
            }
            set {
                this.ownerPuidField = value;
            }
        }
        
        /// <remarks/>
        public long OwnerCid {
            get {
                return this.ownerCidField;
            }
            set {
                this.ownerCidField = value;
            }
        }
        
        /// <remarks/>
        public string OwnerPassport {
            get {
                return this.ownerPassportField;
            }
            set {
                this.ownerPassportField = value;
            }
        }
        
        /// <remarks/>
        public string OwnerDisplayName {
            get {
                return this.ownerDisplayNameField;
            }
            set {
                this.ownerDisplayNameField = value;
            }
        }
        
        /// <remarks/>
        public bool OwnerIsRestricted {
            get {
                return this.ownerIsRestrictedField;
            }
            set {
                this.ownerIsRestrictedField = value;
            }
        }
        
        /// <remarks/>
        public short PartitionId {
            get {
                return this.partitionIdField;
            }
            set {
                this.partitionIdField = value;
            }
        }
        
        /// <remarks/>
        public bool PartitionIdChanged {
            get {
                return this.partitionIdChangedField;
            }
            set {
                this.partitionIdChangedField = value;
            }
        }
        
        /// <remarks/>
        public PartitionedResource SqlRes {
            get {
                return this.sqlResField;
            }
            set {
                this.sqlResField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class CallForwardHeader {
        
        private System.Guid originalApplicationIdField;
        
        private ABSecurityPrivilege originalPrivilegeField;
        
        private bool isSecureConnectionField;
        
        private bool callerIsAdminField;
        
        private ABContext targetABField;
        
        private short callDepthField;
        
        /// <remarks/>
        public System.Guid OriginalApplicationId {
            get {
                return this.originalApplicationIdField;
            }
            set {
                this.originalApplicationIdField = value;
            }
        }
        
        /// <remarks/>
        public ABSecurityPrivilege OriginalPrivilege {
            get {
                return this.originalPrivilegeField;
            }
            set {
                this.originalPrivilegeField = value;
            }
        }
        
        /// <remarks/>
        public bool IsSecureConnection {
            get {
                return this.isSecureConnectionField;
            }
            set {
                this.isSecureConnectionField = value;
            }
        }
        
        /// <remarks/>
        public bool CallerIsAdmin {
            get {
                return this.callerIsAdminField;
            }
            set {
                this.callerIsAdminField = value;
            }
        }
        
        /// <remarks/>
        public ABContext TargetAB {
            get {
                return this.targetABField;
            }
            set {
                this.targetABField = value;
            }
        }
        
        /// <remarks/>
        public short CallDepth {
            get {
                return this.callDepthField;
            }
            set {
                this.callDepthField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum ABSecurityPrivilege {
        
        /// <remarks/>
        Partner,
        
        /// <remarks/>
        Public,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.msn.com/webservices/AddressBook", IsNullable=false)]
    public partial class ABTestHeader : System.Web.Services.Protocols.SoapHeader {
        
        private bool disableAuthField;
        
        private bool enableHiddenAPIField;
        
        private bool skipCIDLookupField;
        
        private string provisionPartitionIdField;
        
        private bool resetClusterMembershipField;
        
        private bool traceCrossClusterCallsField;
        
        private AffinityClusterSettings clusterSettingsField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        public bool DisableAuth {
            get {
                return this.disableAuthField;
            }
            set {
                this.disableAuthField = value;
            }
        }
        
        /// <remarks/>
        public bool EnableHiddenAPI {
            get {
                return this.enableHiddenAPIField;
            }
            set {
                this.enableHiddenAPIField = value;
            }
        }
        
        /// <remarks/>
        public bool SkipCIDLookup {
            get {
                return this.skipCIDLookupField;
            }
            set {
                this.skipCIDLookupField = value;
            }
        }
        
        /// <remarks/>
        public string ProvisionPartitionId {
            get {
                return this.provisionPartitionIdField;
            }
            set {
                this.provisionPartitionIdField = value;
            }
        }
        
        /// <remarks/>
        public bool ResetClusterMembership {
            get {
                return this.resetClusterMembershipField;
            }
            set {
                this.resetClusterMembershipField = value;
            }
        }
        
        /// <remarks/>
        public bool TraceCrossClusterCalls {
            get {
                return this.traceCrossClusterCallsField;
            }
            set {
                this.traceCrossClusterCallsField = value;
            }
        }
        
        /// <remarks/>
        public AffinityClusterSettings ClusterSettings {
            get {
                return this.clusterSettingsField;
            }
            set {
                this.clusterSettingsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.msn.com/webservices/AddressBook", IsNullable=false)]
    public partial class ServiceHeader : System.Web.Services.Protocols.SoapHeader {
        
        private string versionField;
        
        private string cacheKeyField;
        
        private bool cacheKeyChangedField;
        
        private string preferredHostNameField;
        
        private CallTraceHeader crossClusterCallsField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        public string Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        public string CacheKey {
            get {
                return this.cacheKeyField;
            }
            set {
                this.cacheKeyField = value;
            }
        }
        
        /// <remarks/>
        public bool CacheKeyChanged {
            get {
                return this.cacheKeyChangedField;
            }
            set {
                this.cacheKeyChangedField = value;
            }
        }
        
        /// <remarks/>
        public string PreferredHostName {
            get {
                return this.preferredHostNameField;
            }
            set {
                this.preferredHostNameField = value;
            }
        }
        
        /// <remarks/>
        public CallTraceHeader CrossClusterCalls {
            get {
                return this.crossClusterCallsField;
            }
            set {
                this.crossClusterCallsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.msn.com/webservices/AddressBook", IsNullable=false)]
    public partial class ABApplicationHeader : System.Web.Services.Protocols.SoapHeader {
        
        private System.Guid applicationIdField;
        
        private bool isMigrationField;
        
        private string partnerScenarioField;
        
        private string brandIdField;
        
        private string cacheKeyField;
        
        private CallForwardHeader callForwardInfoField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        public System.Guid ApplicationId {
            get {
                return this.applicationIdField;
            }
            set {
                this.applicationIdField = value;
            }
        }
        
        /// <remarks/>
        public bool IsMigration {
            get {
                return this.isMigrationField;
            }
            set {
                this.isMigrationField = value;
            }
        }
        
        /// <remarks/>
        public string PartnerScenario {
            get {
                return this.partnerScenarioField;
            }
            set {
                this.partnerScenarioField = value;
            }
        }
        
        /// <remarks/>
        public string BrandId {
            get {
                return this.brandIdField;
            }
            set {
                this.brandIdField = value;
            }
        }
        
        /// <remarks/>
        public string CacheKey {
            get {
                return this.cacheKeyField;
            }
            set {
                this.cacheKeyField = value;
            }
        }
        
        /// <remarks/>
        public CallForwardHeader CallForwardInfo {
            get {
                return this.callForwardInfoField;
            }
            set {
                this.callForwardInfoField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum MembershipView {
        
        /// <remarks/>
        Full,
        
        /// <remarks/>
        Minimal,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddNamespaceCompletedEventHandler(object sender, AddNamespaceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddNamespaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddNamespaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteNamespaceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateNamespaceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void FindNamespaceCompletedEventHandler(object sender, FindNamespaceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FindNamespaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FindNamespaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Namespace[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Namespace[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddServiceCompletedEventHandler(object sender, AddServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public short Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((short)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteServiceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateServiceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SetServicePermissionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void FindServiceCompletedEventHandler(object sender, FindServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FindServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FindServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Service[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Service[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void FindInverseServiceCompletedEventHandler(object sender, FindInverseServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FindInverseServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FindInverseServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FindInverseServiceResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FindInverseServiceResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddInverseServiceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteInverseServiceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddPrincipalCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeletePrincipalCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void FindPrincipalCompletedEventHandler(object sender, FindPrincipalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FindPrincipalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FindPrincipalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Rolemap[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Rolemap[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void FindIdentityRolesCompletedEventHandler(object sender, FindIdentityRolesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FindIdentityRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FindIdentityRolesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Principal[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Principal[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void InviteIdentityCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RequestMembershipCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RequestMultipleMembershipsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RequestMultipleMembershipsByEmailCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RequestMembershipByEmailCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AcceptMembershipRequestCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeclineMembershipRequestCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SendInvitationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AcceptInvitationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeclineInvitationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void FindMembershipCompletedEventHandler(object sender, FindMembershipCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FindMembershipCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FindMembershipCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MembershipResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MembershipResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void FindMembershipByRoleCompletedEventHandler(object sender, FindMembershipByRoleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FindMembershipByRoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FindMembershipByRoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MembershipResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MembershipResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CountMembersByRoleCompletedEventHandler(object sender, CountMembersByRoleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CountMembersByRoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CountMembersByRoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CountInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CountInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void PageMembershipByRoleCompletedEventHandler(object sender, PageMembershipByRoleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PageMembershipByRoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PageMembershipByRoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PagedMembershipResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PagedMembershipResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void FindMembershipByMemberCompletedEventHandler(object sender, FindMembershipByMemberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FindMembershipByMemberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FindMembershipByMemberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MembershipResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MembershipResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddMemberCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateMemberCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteMemberCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SetMembershipCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void MemberHasRoleCompletedEventHandler(object sender, MemberHasRoleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MemberHasRoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MemberHasRoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void MemberHasRolesCompletedEventHandler(object sender, MemberHasRolesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MemberHasRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MemberHasRolesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public HasRoleResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HasRoleResults)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void FanOutNotificationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void FindMailingListCompletedEventHandler(object sender, FindMailingListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FindMailingListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FindMailingListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FindMailingListResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FindMailingListResult)(this.results[0]));
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\config\BucketServer.cs ===
using System;
using System.Runtime.InteropServices;

namespace xonline.common.config
{

[ComVisible(false)]
public class BucketServer : IBucketServer
{
    public BucketServer(string iface)
    {
        _iface = iface;
    }

    public IInterfaceInfo CurrentServer
    {
        get { return Config.GetInterface(_currentServerName, _iface); }
    }

    public string CurrentServerName
    {
        get { return _currentServerName; }
        set { _currentServerName = value; } 
    }

    public IInterfaceInfo NextServer
    {
        get { return Config.GetInterface(_nextServerName, _iface); }
    }

    public string NextServerName
    {
        get { return _nextServerName; }
        set { _nextServerName = value; } 
    }    

    public DateTime NextServerStart
    {
        get { return _nextServerStart; }
        set { _nextServerStart = value; }
    }

    public string Info1
    {
        get { return _info1; }
        set { _info1 = value; }
    }

    public string Info2
    {
        get { return _info2; }
        set { _info2 = value; }
    }

    public string Info3
    {
        get { return _info3; }
        set { _info3 = value; }
    }

    public string Info4
    {
        get { return _info4; }
        set { _info4 = value; }
    }

    public override string ToString()
    {
        return "{"
            +_iface.ToString()+","
            +(_currentServerName == null ? "<null>" : _currentServerName)+","
            +(_nextServerName == null ? "<null>" : _nextServerName)+","
            +_nextServerStart.ToString()+","
            +(_info1 == null ? "<null>" : _info1)+","
            +(_info2 == null ? "<null>" : _info2)+","
            +(_info3 == null ? "<null>" : _info3)+","
            +(_info4 == null ? "<null>" : _info4)+"}";
    }

    private string _iface;

    private string _currentServerName;
    private string _nextServerName;
    private DateTime _nextServerStart;
    private string _info1;
    private string _info2;
    private string _info3;
    private string _info4;
}

} // end namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\config\ComponentInfo.cs ===
using System;
using System.Runtime.InteropServices;

namespace xonline.common.config
{

[ComVisible(false)]
public class ComponentInfo : IComponentInfo
{
    private string _component = xonline.common.config.Component.unknown;
    private string _executable = null;
    private Installer _installer = Installer.unspecified;
    private string _username = null;
    private string _password = null;
    private string _info1 = null;
    private string _info2 = null;

    public string Component
    {
        get { return _component; }
        set { _component = value; }
    }

    public string Executable
    {
        get { return _executable; }
        set { _executable = value; }
    }

    public Installer Installer
    {
        get { return _installer; }
        set { _installer = value; }
    }

    public string Username
    {
        get { return _username; }
        set { _username = value; }
    }

    public string Password
    {
        get { return _password; }
        set { _password = value; }
    }

    public string Info1
    {
        get { return _info1; }
        set { _info1 = value; }
    }

    public string Info2
    {
        get { return _info2; }
        set { _info2 = value; }
    }
}

} // end namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\community\utilities\stutilcore.cs ===
using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Net;
using System.Security.Cryptography;
using System.Text;
using Microsoft.Webstore.WstClient;

using xonline.common.config;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.sql.webstore;


//NOTE: if you're changing this file, please also add a test to the
//      unit test for this at private/common/test/tools/stutilcoretest.cs

namespace xonline.common.tools.stutilcore
{

    //=====================================================================
    // CLASS:  StUtil
    //=====================================================================
    public class StUtil
    {

        public static void Sign(string sigServer, string strFile)
        {
            const int OffsetPartToSign = 0;
            const int SizePartToSign = 124;
            const int OffsetSignature = 128;
            const int SizeSignature = 256;

            FileStream      file = null;

            try
            {
                file = new FileStream(strFile, FileMode.Open, FileAccess.ReadWrite, FileShare.None);

                // Read part to sign and sign it
                byte[] partToSign = new byte[SizePartToSign];
                if(file.Read(partToSign, OffsetPartToSign, SizePartToSign) != SizePartToSign)
                    throw new Exception("Failed to read part to sign");
                byte[] signature;
                SignBlob(sigServer, partToSign, out signature);

                // write it to the file padded
                byte[] fullsignature = new byte[SizeSignature];
                signature.CopyTo(fullsignature, 0);
                file.Seek(OffsetSignature, SeekOrigin.Begin);
                file.Write(fullsignature, 0, SizeSignature);
            }
            finally
            {
                if(file != null)
                    file.Close();
            }
        }


        // Write
        // Read a file and write it to the database
        public static void DBWrite(string  strFileSrc, string  strStorePath)
        {
            FileStream          file = null;
            byte[]              blob = null;
            PathInfo            pathinfo = PathInfo.Parse(strStorePath);
            uint                uiTitleId = Convert.ToUInt32(pathinfo._pathName.Split(new char[1]{'/'})[1], 16);

            try
            {
                // Read file
                file = File.OpenRead(strFileSrc);
                blob = new byte[file.Length];
                file.Read(blob, 0, (int) file.Length);

                // Write it on the db
                //DbWriteFile(0, 1, pathinfo._keyValue, pathinfo._pathName, uiTitleId, blob);
                DBWrite( blob, strStorePath );
            }
            finally
            {
                if(file != null)
                    file.Close();
            }
        }

        // Write - overload for callers without a file on disk
        public static void DBWrite( byte[] blob, string  strStorePath )
        {
            PathInfo   pathinfo = PathInfo.Parse(strStorePath);
            uint       uiTitleId = Convert.ToUInt32(pathinfo._pathName.Split(new char[1]{'/'})[1], 16);

            // Write it on the db
            DbWriteFile( 0, 1, pathinfo._keyValue, pathinfo._pathName, uiTitleId, blob );

        }

        //created to allow ease of use in testing...
        public static byte[] DBRead( string pathName )
        {
            PathInfo   pathinfo = PathInfo.Parse(pathName);
            uint       uiTitleId = Convert.ToUInt32(pathinfo._pathName.Split(new char[1]{'/'})[1], 16);
            byte[]     blob = null;

            DbReadFile( 0, 1, pathinfo._keyValue, pathinfo._pathName, out blob );
            return blob;

        }

        public static void DBRemove(string strStorePath)
        {
            PathInfo pathinfo = PathInfo.Parse(strStorePath);

            DbRemoveFile(pathinfo._keyValue, pathinfo._pathName);

        }

        /// <summary>
        /// Remove a file from User Storage
        /// </summary>
        /// <param name="PUID"></param>
        /// <param name="strStorePath"></param>
        public static void DBRemove( ulong PUID, string strStorePath)
        {
            PathInfo   pathinfo = PathInfo.Parse(strStorePath);
            uint       uiTitleId = Convert.ToUInt32(pathinfo._pathName.Split(new char[1]{'/'})[1], 16);

            // DBRemoveFile(int DomainID, int KeyType, ulong Key, string PathName, // pathname minus partitioning metadata
            //              int TitleID, int TitleVersion, ulong PUID, ulong XboxPUID
            DbRemoveFile( 0, 1, pathinfo._keyValue, pathinfo._pathName, uiTitleId, 0, PUID, 0 );
        }


        private static void CheckParamConsistency(PathInfo pathinfo, uint titleid, ulong userid)
        {
            // Grab the titleid out of the path info if it exists
            if (0 != titleid && IdType.TitleId == pathinfo.KeyType)
            {
                if ((uint)pathinfo.KeyValue != titleid)
                {
                    throw new ApplicationException(String.Format(
                        "The titleid specified (0x{0:X8}) doesn't match the titleid in the path (0x{1:X8}).",
                        titleid,
                        pathinfo.KeyValue));
                }
            }

            if (0 != userid && IdType.UserId == pathinfo.KeyType)
            {
                if ((uint)pathinfo.KeyValue != userid)
                {
                    throw new ApplicationException(String.Format(
                        "The userid specified (0x{0:X16}) doesn't match the userid in the path (0x{1:X16}).",
                        userid,
                        pathinfo.KeyValue));
                }
            }
        }


        public static RepEnumerateFiles[] GetStorageEntries(string path, uint titleid, uint requestStart, uint requestEnd, ref uint actualFileCount)
        {
            WstConnection   conn    = null;
            WstCommand      cmd     = null;
            WstDataReader   dataset = null;
            SqlParameter    ret     = null;
            ArrayList       enumResults = new ArrayList();

            // initialize out parameter to 0
            actualFileCount = 0;

            try
            {
                // Parse the partial path for the domain and partitioning data
                PathInfo pathinfo = PathInfo.Parse(path);

                // Make sure any specified parameters match what's in the specified path
                CheckParamConsistency(pathinfo, titleid, 0 /* userid */);

                // Grab the titleid out of the path info if it exists
                if (IdType.TitleId == pathinfo.KeyType)
                    titleid = (uint)pathinfo.KeyValue;

                // Default the titleid if necessary
                if (0 == titleid)
                    titleid = XOn.XENON_DASH_TITLE_ID;

                // Open a connection
                conn = new WstConnection(pathinfo.Domain.WebstoreApp);
                conn.Open();

                // Create a command to call the stored procedure
                cmd = conn.CreateCommand();
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "dbo.p_file_enumerate";
                cmd.WstFailoverMode = WstFailoverMode.PrimaryThenSecondary;

                // Data is partitioned by user puid
                cmd.PartitionType   = WstPartitionType.Logical;
                cmd.Partition       = WSClient.GetHashPartition(pathinfo.KeyValue, pathinfo.Domain.WebstoreApp);

                // Set the stored procedure parameters
                ret = new SqlParameter();
                ret.Direction = ParameterDirection.ReturnValue;
                cmd.Parameters.Add(ret);
                cmd.Parameters.Add("@i_domain_id", SqlDbType.Int).Value         = (int) pathinfo.Domain.Id;
                cmd.Parameters.Add("@i_key_type", SqlDbType.Int).Value          = (int) pathinfo.KeyType;
                cmd.Parameters.Add("@bi_key_value", SqlDbType.BigInt).Value     = (long) pathinfo.KeyValue;

                //TODO: we should probably not allow multiple wildcards
                string dbPath = pathinfo.PathName.Replace("*", "%");
#if false
                // replace * with % but only allow one * character
                if ( pathName.IndexOf("*") != -1 )
                {
                    dbPath = pathName.Substring(0, pathName.IndexOf("*")+1);
                    dbPath = dbPath.Replace("*", "%");
                }
#endif
                cmd.Parameters.Add("@vc_path", SqlDbType.NVarChar, 256).Value           = dbPath;
                cmd.Parameters.Add("@vc_partition_part", SqlDbType.NVarChar, 256).Value = pathinfo.PartitionInfo;
                cmd.Parameters.Add("@i_title_id", SqlDbType.Int).Value                  = (int)titleid;

                // These parameters are required but not used by
                // p_file_enumerate.  They can be anything.
                cmd.Parameters.Add("@i_title_version", SqlDbType.Int).Value = (int)0;
                cmd.Parameters.Add("@bi_user_puid", SqlDbType.BigInt).Value = (long)0;
                cmd.Parameters.Add("@bi_xbox_puid", SqlDbType.BigInt).Value = (long)0;

#if false
                // Modified date is not currently supported.  To do so we'd
                // just need to add a parameter, but since it's not required
                // yet it's not added yet.
                if ( 0 == req._ifModifiedSinceDate )
                {
                    cmd.Parameters.Add("@dt_if_modified_since", SqlDbType.DateTime).Value = DBNull.Value;
                }
                else
                {
                    cmd.Parameters.Add("@dt_if_modified_since", SqlDbType.DateTime).Value = DateTime.FromFileTime(req._ifModifiedSinceDate).ToUniversalTime();
                }
#endif // false

                // Execute stored procedure
                dataset = cmd.ExecuteReader();

                // the first result set consists of the total number of files
                // matching the path criteria
                dataset.Read();
                actualFileCount = (uint) dataset.GetInt32(0);

                // the second result set consists of the files themselves
                dataset.NextResult();

                uint fileNumber = 0;

                while (dataset.Read())
                {
                    RepEnumerateFiles f = new RepEnumerateFiles();

                    f._titleId = (uint) dataset.GetInt32(0);
                    f._titleVersion = (uint) dataset.GetInt32(1);
                    f._userPuid = (ulong) dataset.GetInt64(2);
                    f._userCountryId = dataset.GetByte(3);
                    f._xboxPuid = (ulong) dataset.GetInt64(4);
                    f._contentType = (uint) dataset.GetInt32(5);
                    f._blobSize = (uint) dataset.GetInt32(6);
                    f._blobSizeUncompressed = (uint) dataset.GetInt32(7);
                    f._creationDate = dataset.GetDateTime(8).ToLocalTime().ToFileTime();
                    f._modifiedDate = dataset.GetDateTime(9).ToLocalTime().ToFileTime();
                    f._attributesSize = (ushort) dataset.GetInt32(10);

                    if ( f._attributesSize > 0 && !dataset.IsDBNull(11) )
                    {
                        f._attributes = new byte[f._attributesSize];
                        // UNDONE (needed?): ReadDbBlob(dataset, 11, f._attributes, f._attributes.Length);
                    }

                    f._pathName = dataset.GetString(12);

                    byte[] encName = Encoding.UTF8.GetBytes(f._pathName);

                    f._pathNameSize = (ushort) encName.Length;

                    encName = null;

                    if (fileNumber >= requestStart && fileNumber <= requestEnd)
                    {
                        enumResults.Add(f);
                    }

                    f = null;

                    fileNumber++;
                }

                dataset.Close();
                dataset = null;

                // Check return code
                if ((int)ret.Value != 0)
                {
                    HResult hr = (uint) ((int)ret.Value);
                    throw new XRLException(hr, XEvent.Id.COMMON_CODE_206, "GetStorageEntries: stored procedure p_file_enumerate failed with hr = " + hr);
                }
            }
            catch (SqlException e)
            {
                // for timeouts, try and add the server information to the event log message
                if (cmd != null && cmd.Database != null)
                {
                    throw new ApplicationException(String.Format(
                        "SqlException thrown while connecting to sql machine '{0}'",
                        cmd.Database.Server), e);
                }

                throw;
            }
            finally
            {
                if (conn != null)
                {
                    conn.Close();
                    conn = null;
                }

                if (dataset != null)
                {
                    dataset.Close();
                    dataset = null;
                }
            }

            return((RepEnumerateFiles[])enumResults.ToArray(typeof(RepEnumerateFiles)));
        }

        public static void Write(ulong userId, ulong xboxId, string path, uint titleId, bool overwrite, string fileName)
        {
            Write(userId, xboxId, path, titleId, overwrite, fileName, false, false);
        }

        public static void Write(ulong userId, ulong xboxId, string path, uint titleId, bool overwrite, string fileName, bool sign, bool isPackage)
        {
            if (titleId == 0)
                titleId = XOn.XENON_DASH_TITLE_ID;

            byte[] blob;


            // Read file
            using (FileStream file = File.OpenRead(fileName))
            {
                blob = new byte[file.Length];
                file.Read(blob, 0, (int) file.Length);
            }

            Write(userId, xboxId, path, titleId, overwrite, blob, sign, isPackage);
        }

        public static void Write(ulong userId, ulong xboxId, string path, uint titleId, bool overwrite, byte[] blob)
        {
            Write(userId, xboxId, path, titleId, overwrite, blob, false, false);
        }

        public static void Write(ulong userId, ulong xboxId, string path, uint titleId, bool overwrite, byte [] blob, bool sign, bool isPackage)
        {
            if (overwrite)
            {
                try
                {
                    // first remove the file.  Ignore if it fails
                    Remove(userId, xboxId, path, titleId);
                }
                catch {}
            }

            WriteFileToken t = new WriteFileToken();
            t._operation = (ushort) Operation.FileWrite;
            t._version = AccessToken.accessTokenVersion;
            t._serviceId = (uint) XOService.Storage;
            t._userPuid = userId;
            t._xboxPuid = xboxId;
            t._pathName = path;

            t._tokenExpirationDate = 0;
            t._fileExpirationDate = (new DateTime(2333, 11, 15)).ToLocalTime().ToFileTime();
            t._maxFileSize = Int32.MaxValue;

            // only stats uses signed access tokens
            if ( path.StartsWith("//stats") )
            {
                XSigAuthData authData = new XSigAuthData();
                authData._titleID = titleId;
                authData._titleVersion = 0;
                authData._userID1 = userId;
                authData._userID2 = 0;
                authData._userID3 = 0;
                authData._userID4 = 0;
                authData._XboxID = xboxId;
                t.SignOnBehalf(XOService.Storage, authData);

                t.VerifySignature(XOService.Storage);
                t.VerifySignature();
                t._signatureSize = (ushort) t._signature.Length;
            }

            ReqHdrWriteFile msg     = new ReqHdrWriteFile();
            msg._titleId            = titleId;
            msg._titleVersion       = 0;
            msg._userCountryId      = 103;

            msg._compressionType    = 0;
            msg._contentType        = (uint)(isPackage ? ContentType.ContentPackage : ContentType.ContentBlob);
            msg._blobHash           = _sha1.ComputeHash(blob);

            if (!sign)
            {
                msg._blobSignature      = new byte[ProtocolConstants.sizeSignature];
            }
            else
            {
                if (isPackage)
                {
                    SignPackage(ref blob, titleId, xboxId, userId, out msg._blobHash, out msg._blobSignature);
                }
                else
                {
                    msg._blobSignature      = SignHashOnBehalf(titleId, xboxId, userId, msg._blobHash);
                }
            }

            msg._blobSizeUncompressed = (uint) blob.Length;
            msg._blobSize           = (uint) blob.Length;
            //msg._attributes         = new byte[] {42, 3, 5, 7, 11, 13, 17, 19};
            //msg._attributes         = new byte[999];
            msg._accessToken        = t;
            //msg._teamTickets        = _teamTickets;
            msg._teamTickets        = null;

            MemoryStream memStream  = new MemoryStream();
            BinaryWriter writer     = new BinaryWriter(memStream);
            msg.WriteTo(writer);
            writer.Write(blob);

            byte[] reqbuf = memStream.ToArray();


            XrlRequest req = new XrlRequest();
            req.TargetVirtualInterface= VirtualInterface.stfd_storage_int;
            req.PostData = reqbuf;

            HTTPAuthData authdata = new HTTPAuthData(0, 0, 0, xboxId, userId, titleId, (uint)XOService.Storage, 0);
            authdata.OverrideXUsers[0].dwUserFlags = 0x00006700;
            authdata.OverrideTitleVersion = 0;

            req.AuthData = authdata.GetBase64EncodedString();
            req.Path = msg.GetXRL();

            HResult hr = req.Send();

            if (HResult.Failed(hr))
            {
                throw new Exception("WriteFile() failed with hr = " + hr);
            }
        }

        public static void Read(ulong userId, ulong xboxId, string path, uint titleId, string fileName)
        {
            byte[] blob = Read(userId, xboxId, path, titleId);

            // write the file
            using (FileStream file = File.Open(fileName, FileMode.Create))
            {
                file.Write(blob, 0, blob.Length);
                file.Close();
            }
        }

        public static byte [] Read(ulong userId, ulong xboxId, string path, uint titleId)
        {
            if (titleId == 0)
                titleId = XOn.XENON_DASH_TITLE_ID;

            ReadFileToken t  = new ReadFileToken();
            t._operation = (ushort) Operation.FileRead;
            t._version = AccessToken.accessTokenVersion;
            t._serviceId = (uint) XOService.Storage;
            t._userPuid = userId;
            t._xboxPuid = xboxId;
            t._pathName = path;

            t._tokenExpirationDate = 0;
            t._signature = null;

            //t._flags    = (uint) ( _teamTickets == null ? 0 : (uint) FlagType.TeamTicket );

            ReqReadFile msg          = new ReqReadFile();
            msg._titleId             = titleId;
            msg._titleVersion        = 1;
            msg._userCountryId       = 103;
            msg._rangeStart          = 0;
            msg._rangeEnd            = 0;
            msg._ifModifiedSinceDate = 0;
            msg._accessToken         = t;
            //msg._teamTickets         = _teamTickets;
            msg._teamTickets         = null;

            MemoryStream memStream  = new MemoryStream();
            BinaryWriter writer     = new BinaryWriter(memStream);
            msg.WriteTo(writer);

            byte[] reqbuf = memStream.ToArray();
            HResult hr = HResult.S_OK;
            byte[] blob = null;

            XrlRequest req = new XrlRequest();
            req.TargetVirtualInterface= VirtualInterface.stfd_storage_int;
            req.PostData = reqbuf;

            HTTPAuthData authdata = new HTTPAuthData(0, 0, 0, xboxId, userId, titleId, (uint)XOService.Storage, 0);
            authdata.OverrideXUsers[0].dwUserFlags = 0x00006700;
            authdata.OverrideTitleVersion = 1;

            req.AuthData = authdata.GetBase64EncodedString();
            req.Path = msg.GetXRL();

            hr = req.Send();

            if (HResult.Succeeded(hr))
            {
                RepHdrReadFile rep      = new RepHdrReadFile();
                memStream               = new MemoryStream(req.ResponseData);
                BinaryReader reader     = new BinaryReader(memStream);
                rep.ReadFrom(reader);

                blob = reader.ReadBytes((int)rep._blobSize);
            }

            if (HResult.Failed(hr))
            {
                throw new Exception("ReadFile() failed with hr = " + hr);
            }

            return blob;
        }

        public static void Remove(ulong userId, ulong xboxId, string path, uint titleId)
        {
            if (titleId == 0)
                titleId = XOn.XENON_DASH_TITLE_ID;

            RemoveFileToken t  = new RemoveFileToken();
            t._operation = (ushort) Operation.FileRemove;
            t._version = AccessToken.accessTokenVersion;
            t._serviceId = 0;
            t._userPuid = userId;
            t._xboxPuid = xboxId;
            t._pathName = path;

            t._tokenExpirationDate = 0;

/*
            if ( path.StartsWith("//stats") )
            {
                if (StorageUnitest._verifyAccessTokens)
                {
                    XSigAuthData authData = new XSigAuthData();
                    authData._titleID = TITLE_ID;
                    authData._titleVersion = 1;
                    authData._userID1 = userId;
                    authData._userID2 = 0;
                    authData._userID3 = 0;
                    authData._userID4 = 0;
                    authData._XboxID = xboxId;
                    t.SignOnBehalf((XOService)Int32.MinValue, authData);

                    t._signatureSize = ProtocolConstants.sizeSignature;
                    //t._signature = new byte[ProtocolConstants.sizeSignature];
                }
            }
*/
            //t._flags    = (uint) ( _teamTickets == null ? 0 : (uint) FlagType.TeamTicket );

            ReqRemoveFile msg       = new ReqRemoveFile();
            msg._titleId            = titleId;
            msg._titleVersion       = 1;
            msg._accessToken        = t;
            //msg._teamTickets        = _teamTickets;

            MemoryStream memStream  = new MemoryStream();
            BinaryWriter writer     = new BinaryWriter(memStream);
            msg.WriteTo(writer);

            byte[] reqbuf = memStream.ToArray();
            HResult hr = HResult.S_OK;


            XrlRequest req = new XrlRequest();
            req.TargetVirtualInterface= VirtualInterface.stfd_storage_int;
            req.PostData = reqbuf;

            HTTPAuthData authdata = new HTTPAuthData(0, 0, 0, xboxId, userId, titleId, (uint)XOService.Storage, 0);
            authdata.OverrideXUsers[0].dwUserFlags = 0x00006700;
            authdata.OverrideTitleVersion = 1;

            req.AuthData = authdata.GetBase64EncodedString();
            req.Path = msg.GetXRL();

            hr = req.Send();
            if (HResult.Failed(hr) && hr != HResult.XONLINE_E_STORAGE_FILE_NOT_FOUND)
            {
                throw new Exception("Remove() failed with hr = " + hr);
            }

        }




        // DbWriteFile
        // Write file to database
        static private void DbWriteFile(
            uint    uiDomain, // domain. E.g. 0 for stats.0
            int     keyType,  // key type. E.g. UserId for user puid
            ulong   ulKey,    // key
            string  pathName, // pathname minus partitioning metadata
            uint    uiTitleId,
            byte[]  blob // file blob
            )
        {
            WstConnection   conn    = null;
            WstCommand      cmd     = null;
            WstDataReader   dataset = null;
            SqlParameter    ret     = null;

            try
            {
                // Open a connection
                conn = new WstConnection(ProtocolConstants.wstStoreApp);
                conn.Open();

                // Create a command to call the stored procedure
                cmd = conn.CreateCommand();
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "dbo.p_file_put";
                cmd.WstFailoverMode = WstFailoverMode.PrimaryOnly;
                // Data is partitioned by user puid
                cmd.PartitionType = WstPartitionType.Logical;
                cmd.Partition     = WSClient.GetHashPartition(ulKey, ProtocolConstants.wstStoreApp);

                // compute SHA1 hash of blob for ref counting
                byte[] blobHash = _sha1.ComputeHash(blob);

                // Set the stored procedure parameters
                ret = new SqlParameter();
                ret.Direction = ParameterDirection.ReturnValue;
                cmd.Parameters.Add(ret);
                cmd.Parameters.Add("@i_domain_id", SqlDbType.Int).Value             = (int) uiDomain;
                cmd.Parameters.Add("@i_key_type", SqlDbType.Int).Value              = (int) keyType;
                cmd.Parameters.Add("@bi_key_value", SqlDbType.BigInt).Value         = (long) ulKey;
                cmd.Parameters.Add("@vc_name", SqlDbType.NVarChar, 256).Value       = pathName;
                cmd.Parameters.Add("@i_title_id", SqlDbType.Int).Value              = (int) uiTitleId;
                cmd.Parameters.Add("@i_title_version", SqlDbType.Int).Value         = (int) 0;
                cmd.Parameters.Add("@bi_user_puid", SqlDbType.BigInt).Value         = (long) 0;
                cmd.Parameters.Add("@ti_user_country_id", SqlDbType.Int).Value      = 0;
                cmd.Parameters.Add("@bi_xbox_puid", SqlDbType.BigInt).Value         = (long) 0;
                cmd.Parameters.Add("@bin_client_hash", SqlDbType.Binary, ProtocolConstants.sizeHash).Value = new byte[20];
                cmd.Parameters.Add("@bin_client_signature", SqlDbType.Binary, ProtocolConstants.sizeSignature).Value = new byte[100];
                cmd.Parameters.Add("@i_size", SqlDbType.Int).Value                  = blob.Length;
                cmd.Parameters.Add("@i_size_uncompressed", SqlDbType.Int).Value     = (int) blob.Length;
                cmd.Parameters.Add("@i_compression_type", SqlDbType.Int).Value      = 0;
                cmd.Parameters.Add("@i_content_type", SqlDbType.Int).Value          = (int) 0;
                cmd.Parameters.Add("@bin_server_hash", SqlDbType.Binary, ProtocolConstants.sizeHash).Value = blobHash;
                cmd.Parameters.Add("@bin_blob", SqlDbType.Image, blob.Length).Value = blob;
                cmd.Parameters.Add("@si_Hash_Bucket", SqlDbType.Int).Value          = (int) cmd.Partition;

                // Execute stored procedure
                dataset = cmd.ExecuteReader();
                dataset.Close();
                dataset = null;

                // Check return code
                if ((int)ret.Value != 0)
                {
                    HResult hr = (uint) ret.Value;
                    throw new Exception("WriteFile: stored procedure p_file_put failed with hr = " + hr);
                }
            }
            finally
            {
                if (conn != null)
                {
                    conn.Close();
                    conn = null;
                }

                if (dataset != null)
                {
                    dataset.Close();
                    dataset = null;
                }
            }
        }

        static private void DbReadFile(
            uint uiDomain,
            int keyType,
            ulong ulKey,
            string pathName,
            out byte[] blob)
        {
            WstConnection   conn    = null;
            WstCommand      cmd     = null;
            WstDataReader   dataset = null;
            SqlParameter    ret     = null;

            try
            {
                // Open a connection
                conn = new WstConnection(ProtocolConstants.wstStoreApp);
                conn.Open();

                // Create a command to call the stored procedure
                cmd = conn.CreateCommand();
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "dbo.p_file_get";
                cmd.WstFailoverMode = WstFailoverMode.PrimaryThenSecondary;

                // Data is partitioned by user puid
                cmd.PartitionType   = WstPartitionType.Logical;
                cmd.Partition       = WSClient.GetHashPartition(ulKey, ProtocolConstants.wstStoreApp);

                // Set the stored procedure parameters
                ret = new SqlParameter();
                ret.Direction = ParameterDirection.ReturnValue;
                cmd.Parameters.Add(ret);
                cmd.Parameters.Add("@i_domain_id", SqlDbType.Int).Value         = (int) uiDomain;
                cmd.Parameters.Add("@i_key_type", SqlDbType.Int).Value          = (int) IdType.UserId;
                cmd.Parameters.Add("@bi_key_value", SqlDbType.BigInt).Value     = (long) ulKey;
                cmd.Parameters.Add("@vc_name", SqlDbType.NVarChar, 256).Value   = pathName;
                cmd.Parameters.Add("@i_title_id", SqlDbType.Int).Value          = (int) 0;
                cmd.Parameters.Add("@i_title_version", SqlDbType.Int).Value     = (int) 0;
                cmd.Parameters.Add("@bi_user_puid", SqlDbType.BigInt).Value     = (long) 0;
                cmd.Parameters.Add("@bi_xbox_puid", SqlDbType.BigInt).Value     = (long) 0;
                cmd.Parameters.Add("@i_update_read_count", SqlDbType.Int).Value = 0 ;

                // Execute stored procedure
                dataset = cmd.ExecuteReader();

                if (dataset.Read())
                {
                    uint blobSize   = (uint) dataset.GetInt32(8);
                    blob            = dataset.GetSqlBinary(14).Value;
                }
                else
                {
                    //file non-existence shouldn't warrant an exception
                    //no caller appears to rely on this exception...
                    //throw new Exception("ReadFile: file not found: " + pathName);
                    blob = null;
                }

                dataset.Close();
                dataset = null;

                // Check return code
                // Cannot directly cast from boxed int to unboxed uint
                HResult hr = (uint) ( (int) ret.Value );
                if (
                    ( hr != 0 ) &&
                    ( hr != HResult.XONLINE_E_STORAGE_FILE_NOT_FOUND )
                    )
                {
                    throw new Exception("ReadFile: stored procedure p_file_get failed with hr = " + hr);
                }

            }
            finally
            {
                if (conn != null)
                {
                    conn.Close();
                    conn = null;
                }

                if (dataset != null)
                {
                    dataset.Close();
                    dataset = null;
                }
            }
        }

        static private void DbRemoveFile(
            ulong   Key,    // key
            string  PathName // pathname minus partitioning metadata
            )
        {
            DbRemoveFile( 0, 1, Key, PathName, 0, 0, 0, 0 );
        }

        //create additional signature with more flexibility...
        static private void DbRemoveFile(
            int     DomainID,       // ?
            int     KeyType,        // 'user' or other key types
            ulong   Key,            // key
            string  PathName,       // pathname minus partitioning metadata
            uint    TitleID,        // title
            int     TitleVersion,   // often 0
            ulong   PUID,           // for user storage, key and puid are the same
            ulong   XboxPUID        //
            )
        {
            WstConnection   conn    = null;
            WstCommand      cmd     = null;
            WstDataReader   dataset = null;
            SqlParameter    ret     = null;

            try
            {
                // Open a connection
                conn = new WstConnection(ProtocolConstants.wstStoreApp);
                conn.Open();

                // Create a command to call the stored procedure
                cmd = conn.CreateCommand();
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "dbo.p_file_remove";
                cmd.WstFailoverMode = WstFailoverMode.PrimaryThenSecondary;

                // Data is partitioned by user puid
                cmd.PartitionType = WstPartitionType.Logical;
                cmd.Partition     = WSClient.GetHashPartition(Key, ProtocolConstants.wstStoreApp);

                // Set the stored procedure parameters
                ret = new SqlParameter();
                ret.Direction = ParameterDirection.ReturnValue;
                cmd.Parameters.Add(ret);
                cmd.Parameters.Add("@i_domain_id", SqlDbType.Int).Value             = (int) DomainID;
                cmd.Parameters.Add("@i_key_type", SqlDbType.Int).Value              = (int) KeyType;
                cmd.Parameters.Add("@bi_key_value", SqlDbType.BigInt).Value         = (long) Key;
                cmd.Parameters.Add("@vc_name", SqlDbType.NVarChar, 256).Value       = PathName;
                cmd.Parameters.Add("@i_title_id", SqlDbType.Int).Value              = (int) TitleID;
                cmd.Parameters.Add("@i_title_version", SqlDbType.Int).Value         = (int) TitleVersion;
                cmd.Parameters.Add("@bi_user_puid", SqlDbType.BigInt).Value         = (long) PUID;
                cmd.Parameters.Add("@bi_xbox_puid", SqlDbType.BigInt).Value         = (long) XboxPUID;

                // Execute stored procedure
                dataset = cmd.ExecuteReader();
                dataset.Close();
                dataset = null;

                //you cannot go directly from a boxed int to a uint...
                HResult hr = (uint)( (int)ret.Value );

                // Check return code
                if ( hr != 0)
                {
                    //we don't care if it's just not found...
                    //0x8015c004 XONLINE_E_STORAGE_FILE_NOT_FOUND
                    if ( hr != 0x8015C004 )
                    {
                        throw new Exception("RemoveFile: stored procedure p_file_remove failed with hr = " + hr);
                    }
                }
            }
            finally
            {
                if (conn != null)
                {
                    conn.Close();
                    conn = null;
                }

                if (dataset != null)
                {
                    dataset.Close();
                    dataset = null;
                }
            }
        }

        static void SignBlob(
            string sigserver,
            byte[] blob,
            out byte[] sign)
        {
            MemoryStream m = new MemoryStream();
            BinaryWriter w = new BinaryWriter(m);

            byte[] digest = _sha1.ComputeHash(blob);
            byte[] authData = GetAuthData();

            HResult hr = HResult.S_OK;

            WebRequest req = WebRequest.Create("http://" + sigserver + "/xsig/SignOnBehalf.ashx");
            req.Timeout = 10000;
            req.Method = "POST";
            req.ContentType = "xon/" + ((int)XOService.Signature_Server).ToString("x");
            req.ContentLength = 4 + digest.Length + authData.Length;

            Stream reqStream = req.GetRequestStream();
            w = new BinaryWriter(reqStream);
            w.Write((uint)XOService.Storage);
            w.Write(digest);
            w.Write(authData);
            reqStream.Close();

            WebResponse resp = req.GetResponse();
            Stream respStream = resp.GetResponseStream();
            BinaryReader r = new BinaryReader(respStream);
            hr = r.ReadUInt32();
            sign = r.ReadBytes(ProtocolConstants.sizeSignature); //TODO: fix this
        }

        static byte[] GetAuthData()
        {
            MemoryStream m = new MemoryStream();
            BinaryWriter w = new BinaryWriter(m);
            w.Write((ushort)0); // sg.wAuthDataVersion);
            w.Write((ushort)0); // sg.wAuthDataSize);
            w.Write((ushort)0); // sg.wMajorVersion);
            w.Write((ushort)0); // sg.wMinorVersion);
            w.Write((ushort)0); // sg.wBuildNumber);
            w.Write((ushort)0); // sg.wQFENumber);
            w.Write((uint)0); // sg.dwTitleID);
            w.Write((uint)0); // sg.dwTitleVersion);
            w.Write((uint)0); // sg.dwTitleRegion);
            w.Write((ulong)0); // sg.qwXboxID);
            for (int i=0; i < 4; i++)
            {
                w.Write((ulong)0); // sg.xUsers[i].qwUserID);
                w.Write((uint)0); // sg.xUsers[i].dwUserFlags);
            }
            w.Write((uint)12); // sg.dwNumServices);
            for(int i=0; i < 12; i++)
            {
                w.Write((uint)0xabababab); // sg.dwServiceIds[i]);
            }
            byte[] authData = m.ToArray();
            return authData;
        }

        static void DumpBlob(byte[] blob)
        {
            Console.Write("\n");
            for(int i=0; i < blob.Length; i++)
            {
                Console.Write(Convert.ToString(blob[i], 16).PadRight(2,'0'));
            }
        }

        public static byte [] SignHashOnBehalf(uint titleID, ulong xboxPuid, ulong userPuid, byte [] hash)
        {
            byte [][] oneHash = new byte[1][];
            oneHash[0] = hash;

            byte [][] oneSignature = SignHashesOnBehalf(titleID, xboxPuid, userPuid, oneHash);

            return oneSignature[0];
        }

        public static byte [][] SignHashesOnBehalf(uint titleID, ulong xboxPuid, ulong userPuid, byte [] [] hashes)
        {
            int hashCount = hashes.Length;
            byte [] postData = new byte[hashCount * XSigSignOnBehalfRequest.GetSizeInBytes()];

            MemoryStream reqStream = new MemoryStream(postData);
            BinaryWriter reqWriter = new BinaryWriter(reqStream);

            XSigAuthData authData = new XSigAuthData();
            authData._titleID = titleID;
            authData._titleVersion = 0;
            authData._userID1 = userPuid;
            authData._userID2 = 0;
            authData._userID3 = 0;
            authData._userID4 = 0;
            authData._XboxID = xboxPuid;

            XSigSignOnBehalfRequest signRequest = new XSigSignOnBehalfRequest();

            foreach (byte [] hash in hashes)
            {
                signRequest._serviceId = (uint) XOService.Storage;
                signRequest._authData = authData;
                signRequest._digest = hash;

                signRequest.WriteStream(reqWriter);
            }


            XrlRequest req = new XrlRequest();
            req.TargetVirtualInterface= VirtualInterface.xsig_int;
            req.PostData = postData;

            HTTPAuthData authdata = new HTTPAuthData(0, 0, 0, 0, userPuid, titleID, (uint)XOService.Signature_Server, 0);
            authdata.OverrideXUsers[0].dwUserFlags = 0x00006700;
            authdata.OverrideTitleVersion = 0;

            req.AuthData = authdata.GetBase64EncodedString();
            req.Path = signRequest.GetXRL();

            HResult hr = req.Send();

            MemoryStream respStream = new MemoryStream(req.ResponseData);
            BinaryReader respReader = new BinaryReader(respStream);

            byte [][] signatures = new byte [hashCount] [];

            for (int i = 0; i < hashCount; i++)
            {
                XSigSignOnBehalfResponse signResponse = new XSigSignOnBehalfResponse();
                signResponse.ReadStream(respReader);

                if (signResponse._hresult != HResult.S_OK)
                    throw new Exception(string.Format(
                        "Signature server returned unexpected hr = {0}", (HResult) signResponse._hresult));

                signatures[i] = (byte []) signResponse._signature;
            }

            return signatures;
        }

        private static void SignPackage(ref byte [] data, uint titleID, ulong xboxPuid, ulong userPuid,
            out byte [] hash, out byte [] signature)
        {
            SHA1CryptoServiceProvider sha1 = new SHA1CryptoServiceProvider();

            // set up a stream so we can jump around in the array
            using (MemoryStream cabStream = new MemoryStream(data))
            {
                // set up a binary reader on that stream to make it easier to read off data types
                using (BinaryReader cabReader = new BinaryReader(cabStream))
                {
                    // set up a binary writer to aid writing the hashes and signatures back into the array
                    using (BinaryWriter cabWriter = new BinaryWriter(cabStream))
                    {
                        /*

                        Packages need two separate Live signatures.  We will request these in two
                        seperate requests to xsig.  The first signature is validated
                        when the package is downloaded, and then it is thrown away.  Subsequent
                        uses of the file will validate the signature within the contentmeta.xbx
                        file.

                        Refer to cabinet.h, xcabinet.h, and xcontsig.h in the xbox client tree
                        to understand the following layout of the interesting parts of
                        the "data" byte array:

                        CFHEADER
                        CFRESERVE
                        RC4_SHA_HEADER
                        RC4_SHA_HEADER

                        (everything preceding can also be understood as a single XONLINECONTENT_HEADER)

                        CFFOLDER structures (cFolders of them)
                        CFDATA structures (the first is contentmeta.xbx)

                        */

                        const int XONLINECONTENT_FIXED_HEADER_SIZE_WITH_HMAC = 124;
                        const int CFHEADER_SIZE = 36; // 6 longs + 6 shorts
                        const int CFDATA_SIZE = 8; // 1 long + 2 shorts
                        const int CFFOLDER_HMAC_SIZE = 36; // 1 long + 2 shorts + checksum(20) + confounder(8)

                        const int CFOLDERS_OFFSET_WITHIN_CFHEADER = 26; // 6 longs + 1 short
                        const int MAGIC_NUMBER_OFFSET_WITHIN_XCONTSIG_HEADER = 20; // 1 digest
                        const int TITLE_ID_OFFSET_WITHIN_XCONTSIG_HEADER = 36; // 1 digest + 4 longs
                        const int CBDATA_OFFSET_WITHIN_CFDATA = 4; // 1 long
                        const int HMAC_CHECKSUM_OFFSET_WITHIN_CFFOLDER = 8; // 1 long + 2 shorts
                        const int DIGESTFOLDERS_CHECKSUM_OFFSET_WITHIN_XONLINECONTENT_HEADER =
                            CFHEADER_SIZE + 4; // CFHEADER_SIZE + 1 short + 2 bytes

                        char [] XCONTSIG_MAGIC = { 'X', 'C', 'S', 'F' };

                        // first we need to find out how many folders are in the cab
                        cabStream.Seek(CFOLDERS_OFFSET_WITHIN_CFHEADER, SeekOrigin.Begin);
                        ushort cFolders = cabReader.ReadUInt16();

                        // now start over, moving past the whole CFHEADER, and read off CFRESERVE.cbCFHeader
                        // note that we don't check CFHEADER.flags, since we know CFRESERVE will also be present
                        // this value tells us how many bytes are in CFHEADER.abReserve
                        cabStream.Seek(CFHEADER_SIZE, SeekOrigin.Begin);
                        ushort cbCFHeader = cabReader.ReadUInt16();

                        // skip past the remaing 2 CFRESERVE bytes, plus the entire CFHEADER.abReserve section
                        cabStream.Seek(2 + cbCFHeader, SeekOrigin.Current);

                        // now we're at the first of the CFFOLDER structures
                        long coffFolders = cabStream.Position;

                        // read coffCabStart and cCFData from the first CFFOLDER structure
                        long coffCabStart = cabReader.ReadUInt32();
                        uint cCFData = cabReader.ReadUInt32();

                        // now that we have coffCabStart, we now know the location of contentmeta.xbx
                        // so, let's sanity check by observing the magic number
                        // we need to just skip over the CFDATA structure and the jump to the proper offset
                        cabStream.Seek(coffCabStart + CFDATA_SIZE + MAGIC_NUMBER_OFFSET_WITHIN_XCONTSIG_HEADER,
                            SeekOrigin.Begin);
                        byte [] magicNumber = cabReader.ReadBytes(4);
                        if (magicNumber.Length < 4)
                            throw new Exception("The package passed in doesn't appear to be a cab file!");

                        for (int i = 0; i < 4; i++)
                        {
                            if (magicNumber[i] != XCONTSIG_MAGIC[i])
                                throw new Exception("The package passed in doesn't appear to be a cab file!");
                        }

                        // now let's jump to the titleID and make sure it checks out
                        cabStream.Seek(coffCabStart + CFDATA_SIZE + TITLE_ID_OFFSET_WITHIN_XCONTSIG_HEADER,
                            SeekOrigin.Begin);
                        uint packageTitleID = cabReader.ReadUInt32();
                        if (packageTitleID != titleID)
                            throw new Exception(string.Format(
                                "TitleID in package ({0}) does not match title ID passed into API ({1})",
                                packageTitleID, titleID));

                        // we need sign a 112 byte region starting at offset 36 within contentmeta.xbx
                        cabStream.Seek(coffCabStart + CFDATA_SIZE + 36, SeekOrigin.Begin);
                        byte [] regionOfContentMetaXbx = cabReader.ReadBytes(112);
                        byte [] hashOfContentMetaXbx = sha1.ComputeHash(regionOfContentMetaXbx);
                        hash = hashOfContentMetaXbx;

                        byte [] signatureOfContentMetaXbx =
                            SignHashOnBehalf(titleID, xboxPuid, userPuid, hashOfContentMetaXbx);
                        signature = signatureOfContentMetaXbx;

                        // the signature should be written to XCONTSIG_LIVE_SIGNATURE.Signature
                        cabWriter.Write(signatureOfContentMetaXbx, 0, 100);
                        cabWriter.Flush();

                        // now that we have modified xcontentmeta.xbx, we need to zero out
                        // the csum over the CFDATA for contentmeta.xbx
                        UInt32 crc = 0;

                        // write the crc back into CFDATA.csum
                        cabStream.Seek(coffCabStart, SeekOrigin.Begin);
                        cabWriter.Write(crc);
                        cabWriter.Flush();

                        // now we are ready to fix the hash which verified all CFDATA file content

                        // starting with the first CFDATA, we will iteratively hash the contents
                        // of each CFDATA (including the.ab region into a single hash value
                        cabStream.Seek(coffCabStart, SeekOrigin.Begin);
                        sha1.Initialize();

                        // update the sha1 with each data block except for the last one
                        for (int i = 0; i < cCFData - 1; i++)
                        {
                            cabStream.Seek(CBDATA_OFFSET_WITHIN_CFDATA, SeekOrigin.Current);
                            int cbData = (int) cabReader.ReadUInt16();
                            int cbTotalCFDataSize = cbData + CFDATA_SIZE;

                            // the entire CFDATA (including ab) must be included in the hash
                            int dataArrayOffset = (int) cabStream.Position - 6;

                            // this API is generic, so the last two parameters for TransformBlock, below,
                            // actually not used for anything in the function, we are just calculating a hash

                            // point the sha1 at the proper place in the byte array
                            sha1.TransformBlock(data, dataArrayOffset, cbTotalCFDataSize,
                                data, dataArrayOffset);

                            // now update the stream pointer to point to the next CFDATA structure
                            cabStream.Seek(2 + cbData, SeekOrigin.Current);
                        }

                        // now we do the same thing for the last block, but call TransformFinalBlock
                        cabStream.Seek(CBDATA_OFFSET_WITHIN_CFDATA, SeekOrigin.Current);
                        int lastCbData = (int) cabReader.ReadUInt16();
                        int lastCbTotalCFDataSize = lastCbData + CFDATA_SIZE;

                        // the entire CFDATA (including ab) must be included in the hash
                        int lastDataArrayOffset = (int) cabStream.Position - 6;

                        sha1.TransformFinalBlock(data, lastDataArrayOffset, lastCbTotalCFDataSize);

                        // now we've calculated the hash that verifies all file content, now including
                        // our modification to contentmeta.xbx
                        byte [] hashOfCFDatas = sha1.Hash;

                        // seek to the RC4_SHA_HEADER.Checksum of the first CFFOLDER entry
                        cabStream.Seek(coffFolders + HMAC_CHECKSUM_OFFSET_WITHIN_CFFOLDER, SeekOrigin.Begin);

                        // write out the checksum
                        cabWriter.Write(hashOfCFDatas);
                        cabWriter.Flush();

                        // now we have changed the first folder entry, and so we must update the
                        // hash that verifies all the folder information

                        // read all the CFFOLDER structures into a single byte array
                        sha1.Initialize();

                        cabStream.Seek(coffFolders, SeekOrigin.Begin);
                        byte [] regionCFFolders = cabReader.ReadBytes(cFolders * CFFOLDER_HMAC_SIZE);
                        byte [] hashCFFolders = sha1.ComputeHash(regionCFFolders);

                        // seek to XONLINECONTENT_HEADER.digestFolders.Checksum
                        cabStream.Seek(DIGESTFOLDERS_CHECKSUM_OFFSET_WITHIN_XONLINECONTENT_HEADER,
                            SeekOrigin.Begin);

                        // write out the checksum
                        cabWriter.Write(hashCFFolders);
                        cabWriter.Flush();

                        // now we are finally ready to sign XONLINECONTENT_HEADER
                        cabStream.Seek(0, SeekOrigin.Begin);
                        byte [] regionHeaderData = cabReader.ReadBytes(XONLINECONTENT_FIXED_HEADER_SIZE_WITH_HMAC);
                        byte [] hashHeaderData = sha1.ComputeHash(regionHeaderData);
                        byte [] signatureHeaderData = SignHashOnBehalf(titleID, xboxPuid, userPuid, hashHeaderData);

                        // Signing the attachment moved the stream past XONLINECONTENT_HEADER and the HMAC,
                        // now move past the DWORD checkpoint
                        cabStream.Seek(4, SeekOrigin.Current);

                        cabWriter.Write(signatureHeaderData);
                        cabWriter.Flush();
                    }
                }
            }
        }


        // SHA1 object for computing blob hashes
        protected static SHA1 _sha1 = new SHA1CryptoServiceProvider();

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\community\SocialQuery\TitleStringFetcher.cs ===
﻿using System;
using xonline.common.config;

namespace xonline.common.community.socialquery
{
    public interface ITitleStringFetcher
    {
        string GetTitleString(uint titleId, ushort localeId);
    }

    public class TitleStringFetcher : ITitleStringFetcher
    {
        public string GetTitleString(uint titleId, ushort localeId)
        {
            return TitleConfig.GetTitle(titleId, true).Names[localeId.ToString()];
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\config\AvatarAssetId.cs ===
﻿using System;
using System.Collections.Generic;
using System.Text;

namespace xonline.common.config
{
    // An avatar asset id (sometimes call an avatar item id in places like XLAST)
    // is a structure packed into a guid.
    //
    // For reference, indexes into the byte array returned by System.Guid are ordered like this:
    //   03020100-0504-0706-0809-0a0b0c0d0e0f
    //
    // There are multiple version of the avatar asset id guid structure for different purposes.
    // The version is encoded into the low nybble of byte 7
    //
    // version 0 -> free avatar asset from console flash
    // version 1 -> awarded avatar asset
    // version 2 -> marketplace asset available for purchase
    //
    // The structure of free (TOC) assets (version 0) is as follows:
    // ID Structure:  gggggggg-xxxx-0y0b-Cppp-pppppppppppp
    //   g: Category mask
    //   x: TOC asset index
    //   y: Version
    //   b: Body mask
    //   p: asset pack id
    //
    // The structure of awarded assets (version 1) is as follows:
    // ID Structure:  gggggggg-xxxx-ryrb-Crrr-rrrrtttttttt
    //   g: Category mask
    //   x: Id unique to the title
    //   y: Version
    //   b: Body mask
    //   r: Random number generated by XLAST
    //   t: Title ID

    public class AvatarAssetId
    {
        public const byte AVATAR_ASSET_VERSION_FREE         = 0;
        public const byte AVATAR_ASSET_VERSION_AWARD        = 1;
        public const byte AVATAR_ASSET_VERSION_MARKETPLACE  = 2;

        public enum BodyType : byte
        {
            Unknown = 0,
            Male = 1,
            Female = 2,
            All = 3
        }

        public AvatarAssetId(Guid id)
        {
            this.id = id;
            this.bytes = id.ToByteArray();
        }

        private Guid id;
        public Guid Id
        {
            get { return id; }
        }

        private byte[] bytes;
        public byte[] Bytes
        {
            get { return bytes; }
        }

        public byte Version
        {
            get { return (byte)(bytes[7] & 0xF); }
        }

        public byte BodyTypeMask
        {
            get
            {
                return (byte)(bytes[6] & 0xF);
            }
        }

        public uint BodyComponent
        {
            get
            {
                return (((uint)bytes[3]) << 24) + (((uint)bytes[2]) << 16) + (((uint)bytes[1]) << 8) + (uint)bytes[0];
            }
        }

        public uint TitleId
        {
            get
            {
                if (Version != AVATAR_ASSET_VERSION_AWARD)
                    return 0;
                return (((uint)bytes[12]) << 24) + (((uint)bytes[13]) << 16) + (((uint)bytes[14]) << 8) + (uint)bytes[15];
            }
        }

        public uint AwardOrdinal
        {
            get
            {
                if (Version != AVATAR_ASSET_VERSION_AWARD)
                    return 0;
                return (((uint)bytes[5]) << 8) + (uint)bytes[4];
            }
        }

        public static implicit operator Guid(AvatarAssetId value)
        {
            return value.Id;
        }

        public static implicit operator AvatarAssetId(Guid value)
        {
            return new AvatarAssetId(value);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\config\ConfigAttribute.cs ===
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.Reflection;
using System.Security.Permissions;
using System.Text;

namespace xonline.common.config
{
    [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = false)]
    public sealed class ConfigAttribute : Attribute
    {
        private readonly string _component;

        public ConfigAttribute(string component)
        {
            _component = component;
        }


        public string Component
        {
            get
            {
                return _component;
            }
        }

        [PermissionSet(SecurityAction.LinkDemand, Name = "FullTrust")]
        public static string GetComponent()
        {
            if (_CachedComponent != null)
            {
                return _CachedComponent;
            }

            // We can't user the assembly-qualified or this will fail test code, such as StfLive 
            string typeName = typeof(ConfigAttribute).FullName;
            string component = null;

            List<Assembly> assemblyList = new List<Assembly>();

            foreach (Assembly assembly in AppDomain.CurrentDomain.GetAssemblies())
            {
                try
                {
                    object[] attributes = assembly.GetCustomAttributes(false);

                    foreach (object attribute in attributes)
                    {
                        Type attributeType = ((Attribute)attribute).GetType();
                        if (attributeType.FullName != typeName) continue;
                        MemberInfo[] nameMemberList = attributeType.GetMember("Component");

                        if (nameMemberList == null || nameMemberList.Length == 0)
                        {
                            throw new InvalidOperationException(
                                "ConfigAttribute must have a readable string property named 'Component'." +
                                "The property cannot be found on '" + attributeType.AssemblyQualifiedName + "'"
                            );
                        }

                        PropertyInfo configNameProperty = nameMemberList[0] as PropertyInfo;

                        if (configNameProperty == null)
                        {
                            throw new InvalidOperationException(
                                "ConfigAttribute must have a read-only string property named 'Component'." +
                                "A member by that name was found on '" + attributeType.AssemblyQualifiedName + "', but it is not a property."
                            );
                        }

                        if (!configNameProperty.CanRead)
                        {
                            throw new InvalidOperationException(
                                "ConfigAttribute must have a readable string property named 'Component'." +
                                "A property by that name was found on '" + attributeType.AssemblyQualifiedName + "', but it is not readable."
                            );
                        }

                        if (configNameProperty.PropertyType != typeof(string))
                        {
                            throw new InvalidOperationException(
                                "ConfigAttribute must have a readable string property named 'Component'." +
                                "A readable property by that name was found on '" + attributeType.AssemblyQualifiedName + "', but it is not a string"
                            );
                        }

                        // record the name. we keep going looking for more, and 
                        // will overwrite this if we find  others.  it is  okay
                        // though because we throw later if  we  find  mulitple

                        assemblyList.Add(assembly);
                        component = (string)configNameProperty.GetValue(attribute, null);
                    }
                }

                catch (FileNotFoundException)
                {
                    // if we can't load one of the files in the manifest,  then
                    // that is okay.  we just won't get any attributes from  it
                }
            }

            // We expect exactly one assembly.  Anything more is ambiguous
            // and we throw with enough info to track it down and  resolve

            if (assemblyList.Count > 1)
            {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.AppendLine("Multiple assemblies in the same process are attributed with the ConfigAttribute.  Instances were found in:\r\n");

                foreach (Assembly assembly in assemblyList)
                {
                    stringBuilder.AppendFormat("    {0} ({1})\r\n", assembly.FullName, assembly.GlobalAssemblyCache ? "Loaded from GAC" : assembly.Location);
                }

                throw new InvalidOperationException(stringBuilder.ToString());
            }

            if (component != null)
                _CachedComponent = component;
            else
            {
                // No assemblies were marked with ComponentNameAttribute - lets return the process name
                _CachedComponent = Process.GetCurrentProcess().ProcessName;
            }

            return _CachedComponent;
        }

        [PermissionSet(SecurityAction.LinkDemand, Name = "FullTrust")]
        public static string GetFriendlyComponent()
        {
            return FriendlyComponent.Get(GetComponent());
        }
        
        private static string _CachedComponent = null;

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\config\ConfigEventClasses.cs ===
using System;
using System.Runtime.InteropServices;

namespace xonline.common.config
{
    // The delegate for being notified of changes to server lists,
    // and it's EventArgs class

    [ComVisible(false)]
    public delegate void ServerListChangeEventHandler(
        object sender,
        ServerListChangeEventArgs e);

    [ComVisible(false)]
    public class ServerListChangeEventArgs :
        EventArgs,
        IServerListChangeEventArgs
    {
        private readonly string _environment;
        private readonly string _iface;
        private readonly string[] _valueOld;
        private readonly string[] _valueNew;

        public ServerListChangeEventArgs(
            string environment,
            string iface,
            string[] valueOld,
            string[] valueNew)
        {
            _environment = environment;
            _iface = iface;
            _valueOld = valueOld;
            _valueNew = valueNew;
        }

        public string Environment
        {
            get
            {
                return _environment;
            }
        }

        public string Interface
        {
            get
            {
                return _iface;
            }
        }

        public string[] ValueOld
        {
            get
            {
                return _valueOld;
            }
        }

        public string[] ValueNew
        {
            get
            {
                return _valueNew;
            }
        }
    }

    // The delegate for being notified of changes to Interfaces,
    // and it's EventArgs class
    [ComVisible(false)]
    public delegate void InterfaceChangeEventHandler(
        object sender,
        InterfaceChangeEventArgs e);

    [ComVisible(false)]
    public class InterfaceChangeEventArgs :
        EventArgs,
        IInterfaceChangeEventArgs
    {
        private readonly string _environment;
        private readonly string _server;
        private readonly string _iface;
        private readonly IInterfaceInfo _valueOld;
        private readonly IInterfaceInfo _valueNew;

        public InterfaceChangeEventArgs(
            string environment,
            string server,
            string iface,
            IInterfaceInfo valueOld,
            IInterfaceInfo valueNew)
        {
            _environment = environment;
            _server = server;
            _iface = iface;
            _valueOld = valueOld;
            _valueNew = valueNew;
        }

        public string Environment
        {
            get
            {
                return _environment;
            }
        }

        public string Server
        {
            get
            {
                return _server;
            }
        }

        public string Interface
        {
            get
            {
                return _iface;
            }
        }

        public IInterfaceInfo ValueOld
        {
            get
            {
                return _valueOld;
            }
        }

        public IInterfaceInfo ValueNew
        {
            get
            {
                return _valueNew;
            }
        }
    }

    // The delegate for being notified of changes to Interface Buckets,
    // and it's EventArgs class
    [ComVisible(false)]
    public delegate void InterfaceBucketChangeEventHandler(
        object sender,
        InterfaceBucketChangeEventArgs e);

    [ComVisible(false)]
    public class InterfaceBucketChangeEventArgs :
        EventArgs,
        IInterfaceBucketChangeEventArgs
    {
        private readonly string _environment;
        private readonly uint _titleId;
        private readonly uint _bucket;
        private readonly string _iface;
        private readonly IBucketServer _valueOld;
        private readonly IBucketServer _valueNew;

        public InterfaceBucketChangeEventArgs(
            string environment,
            uint titleId,
            uint bucket,
            string iface,
            IBucketServer valueOld,
            IBucketServer valueNew)
        {
            _environment = environment;
            _titleId = titleId;
            _bucket = bucket;
            _iface = iface;
            _valueOld = valueOld;
            _valueNew = valueNew;
        }

        public string Environment
        {
            get
            {
                return _environment;
            }
        }

        public uint TitleId
        {
            get
            {
                return _titleId;
            }
        }

        public uint Bucket
        {
            get
            {
                return _bucket;
            }
        }

        public string Interface
        {
            get
            {
                return _iface;
            }
        }

        public IBucketServer ValueOld
        {
            get
            {
                return _valueOld;
            }
        }

        public IBucketServer ValueNew
        {
            get
            {
                return _valueNew;
            }
        }
    }


    // The delegate for being notified of changes to VirtualInterfaces,
    // and it's EventArgs class
    [ComVisible(false)]
    public delegate void VirtualInterfaceChangeEventHandler(
        object sender,
        VirtualInterfaceChangeEventArgs e);

    [ComVisible(false)]
    public class VirtualInterfaceChangeEventArgs :
        EventArgs,
        IVirtualInterfaceChangeEventArgs
    {
        private readonly string _environment;
        private readonly int _siteId;
        private readonly string _virtualInterface;
        private readonly IVirtualInterfaceInfo _valueOld;
        private readonly IVirtualInterfaceInfo _valueNew;

        public VirtualInterfaceChangeEventArgs(
            string environment,
            int siteId,
            string virtualInterface,
            IVirtualInterfaceInfo valueOld,
            IVirtualInterfaceInfo valueNew)
        {
            _environment = environment;
            _siteId = siteId;
            _virtualInterface = virtualInterface;
            _valueOld = valueOld;
            _valueNew = valueNew;
        }

        public string Environment
        {
            get
            {
                return _environment;
            }
        }

        public int SiteId
        {
            get
            {
                return _siteId;
            }
        }

        public string VirtualInterface
        {
            get
            {
                return _virtualInterface;
            }
        }

        public IVirtualInterfaceInfo ValueOld
        {
            get
            {
                return _valueOld;
            }
        }

        public IVirtualInterfaceInfo ValueNew
        {
            get
            {
                return _valueNew;
            }
        }
    }

    // The delegate for being notified of changes to virtual interface lists,
    // and it's EventArgs class
    [ComVisible(false)]
    public delegate void VirtualInterfaceListChangeEventHandler(
        object sender,
        VirtualInterfaceListChangeEventArgs e);

    [ComVisible(false)]
    public class VirtualInterfaceListChangeEventArgs :
        EventArgs,
        IVirtualInterfaceListChangeEventArgs
    {
        private readonly string _environment;
        private readonly int _siteId;
        private readonly string[] _valueOld;
        private readonly string[] _valueNew;

        public VirtualInterfaceListChangeEventArgs(
            string environment,
            int siteId,
            string[] valueOld,
            string[] valueNew)
        {
            _environment = environment;
            _siteId = siteId;
            _valueOld = valueOld;
            _valueNew = valueNew;
        }

        public string Environment
        {
            get
            {
                return _environment;
            }
        }

        public int SiteId
        {
            get
            {
                return _siteId;
            }
        }

        public string[] ValueOld
        {
            get
            {
                return _valueOld;
            }
        }

        public string[] ValueNew
        {
            get
            {
                return _valueNew;
            }
        }
    }

    // The delegate for being notified of changes to Settings,
    // and it's EventArgs class
    [ComVisible(false)]
    public delegate void SettingChangeEventHandler(
        object sender,
        SettingChangeEventArgs e);

    [ComVisible(false)]
    public class SettingChangeEventArgs :
        EventArgs,
        ISettingChangeEventArgs
    {
        private readonly string _environment;
        private readonly int _siteId;
        private readonly string _server;
        private readonly string _component;
        private readonly string _setting;
        private readonly string _valueOld;
        private readonly string _valueNew;

        public SettingChangeEventArgs(
            string environment,
            int siteId,
            string server,
            string component,
            string setting,
            string valueOld,
            string valueNew)
        {
            _environment = environment;
            _siteId = siteId;
            _server = server;
            _component = component;
            _setting = setting;
            _valueOld = valueOld;
            _valueNew = valueNew;
        }

        public string Environment
        {
            get
            {
                return _environment;
            }
        }

        public int SiteId
        {
            get
            {
                return _siteId;
            }
        }

        public string Server
        {
            get
            {
                return _server;
            }
        }

        public string Component
        {
            get
            {
                return _component;
            }
        }

        public string Setting
        {
            get
            {
                return _setting;
            }
        }

        public string ValueOld
        {
            get
            {
                return _valueOld;
            }
        }

        public string ValueNew
        {
            get
            {
                return _valueNew;
            }
        }
    }

    // The delegate for being notified of changes to MultiSettings,
    // and it's EventArgs class
    [ComVisible(false)]
    public delegate void MultiSettingChangeEventHandler(
        object sender,
        MultiSettingChangeEventArgs e);

    [ComVisible(false)]
    public class MultiSettingChangeEventArgs :
        EventArgs,
        IMultiSettingChangeEventArgs
    {
        private readonly string _environment;
        private readonly string _server;
        private readonly int _siteId;
        private readonly string _component;
        private readonly string _multiSetting;
        private readonly string[] _valueOld;
        private readonly string[] _valueNew;

        public MultiSettingChangeEventArgs(
            string environment,
            int siteId,
            string server,
            string component,
            string multiSetting,
            string[] valueOld,
            string[] valueNew)
        {
            _environment = environment;
            _siteId = siteId;
            _server = server;
            _component = component;
            _multiSetting = multiSetting;
            _valueOld = valueOld;
            _valueNew = valueNew;
        }

        public string Environment
        {
            get
            {
                return _environment;
            }
        }

        public int SiteId
        {
            get
            {
                return _siteId;
            }
        }

        public string Server
        {
            get
            {
                return _server;
            }
        }

        public string Component
        {
            get
            {
                return _component;
            }
        }

        public string MultiSetting
        {
            get
            {
                return _multiSetting;
            }
        }

        public string[] ValueOld
        {
            get
            {
                return _valueOld;
            }
        }

        public string[] ValueNew
        {
            get
            {
                return _valueNew;
            }
        }
    }

    // The delegate for being notified of changes to t_game_config table.
    // This event uses the default EventArgs class, since
    // no information is passed
    [ComVisible(false)]
    public delegate void GameConfigChangeEventHandler(
        object sender,
        EventArgs e);

    // The delegate for being notified of changes to t_xdelay_settings.
    // This event uses the default EventArgs class, since
    // no information is passed
    [ComVisible(false)]
    public delegate void XdelaySettingsChangeEventHandler(
        object sender,
        EventArgs e);

    // The delegate for being notified of changes to t_xdelay_settings.
    // This event uses the default EventArgs class, since
    // no information is passed
    [ComVisible(false)]
    public delegate void XrlMappingsChangeEventHandler(
        object sender,
        EventArgs e);

    // The delegate for being notified of changes to t_health_mappings.
    // This event uses the default EventArgs class, since
    // no information is passed
    [ComVisible(false)]
    public delegate void HealthMappingsChangeEventHandler(
        object sender,
        EventArgs e);


    // The delegate for being notified of changes to t_live_registry_settings.
    // This event uses the default EventArgs class, since
    // no information is passed
    [ComVisible(false)]
    public delegate void LiveRegistrySettingsChangeEventHandler(
        object sender,
        EventArgs e);

    // The delegate for being notified of changes to t_service_keys.
    // This event uses the default EventArgs class, since
    // no information is passed
    [ComVisible(false)]
    public delegate void ServiceKeysChangeEventHandler(
        object sender,
        EventArgs e);

    // The delegate for being notified of changes to t_config_blobs.
    // This event uses the default EventArgs class, since
    // no information is passed
    [ComVisible(false)]
    public delegate void ConfigBlobChangeEventHandler(
        object sender,
        EventArgs e);

    // The delegate for being notified of changes to the etx manifest.
    // This event uses the default EventArgs class, since
    // no information is passed
    [ComVisible(false)]
    public delegate void EtxManifestChangeEventHandler(
        object sender,
        EventArgs e);

    // General npdb notification event handler.  Used only for testing.
    [ComVisible(false)]
    public delegate void RefreshTypeEventHandler(NpdbRefreshTypes npdbRefreshType);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\config\Config.cs ===
using System.Collections.Generic;
using System;
using System.IO;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;

namespace xonline.common.config
{
    [ComVisible(true)]
    public enum Installer
    {
        unspecified,
        installutil,    // identifies a component as one that installutil can be run on
        xblsvc          // identifies a component as one that can be run with the -install parameter
    }

    [ComVisible(true)]
    public enum Site
    {
        // This is used to get a virtual interface for the "main" site, defined as the site
        // that contains NPDB, since NPDB is guaranteed to be a singleton
        main,

        // This is used to get a virtual interface for the same site as the server
        // that is making the request
        same,

        // This is used to get the only instance of a virtual interface in the service,
        // no matter what site it's in
        only
    }

    // No explicit initialization is required by the component
    // to get configuration information. The current environment name, siteid, server name,
    // and component name are detected automatically by the class. The current
    // component name is set to the current assembly name for C# components. Non-C#
    // components or C# components that need or want to specify a different component name
    // (e.g. shared code) may use one of the GetSetting overrides.
    [ComVisible(false)]
    public class Config : ConfigEventLogger
    {
        private static ConfigInstance _defaultInstance = null;
        private static readonly List<ConfigInstance> _instances = new List<ConfigInstance>();
        // Event fowarder delegates
        // EtxManifestChange
        private static void ForwardEtxManifestChange(
            object sender,
            EventArgs e)
        {
            OnEtxManifestChange(e);
        }

        private static readonly EtxManifestChangeEventHandler forwardEtxManifestChange = ForwardEtxManifestChange;

        // Event forwarder delegates.
        // ServerListChange
        private static void ForwardServerListChange(
            object sender,
            ServerListChangeEventArgs e)
        {
            OnServerListChange(e);
        }

        private static readonly ServerListChangeEventHandler forwardServerListChange = ForwardServerListChange;

        // InterfaceChange
        private static void ForwardInterfaceChange(
            object sender,
            InterfaceChangeEventArgs e)
        {
            OnInterfaceChange(e);
        }

        private static readonly InterfaceChangeEventHandler forwardInterfaceChange = ForwardInterfaceChange;

        // InterfaceBucketChange
        private static void ForwardInterfaceBucketChange(
            object sender,
            InterfaceBucketChangeEventArgs e)
        {
            OnInterfaceBucketChange(e);
        }

        private static readonly InterfaceBucketChangeEventHandler forwardInterfaceBucketChange = ForwardInterfaceBucketChange;

        // VirtualInterfaceChange
        private static void ForwardVirtualInterfaceChange(
            object sender,
            VirtualInterfaceChangeEventArgs e)
        {
            OnVirtualInterfaceChange(e);
        }

        private static readonly VirtualInterfaceChangeEventHandler forwardVirtualInterfaceChange = ForwardVirtualInterfaceChange;

        // VirtualInterfaceListChange
        private static void ForwardVirtualInterfaceListChange(
            object sender,
            VirtualInterfaceListChangeEventArgs e)
        {
            OnVirtualInterfaceListChange(e);
        }

        private static readonly VirtualInterfaceListChangeEventHandler forwardVirtualInterfaceListChange = ForwardVirtualInterfaceListChange;

        // SettingChange
        private static void ForwardSettingChange(
            object sender,
            SettingChangeEventArgs e)
        {
            OnSettingChange(e);
        }

        private static readonly SettingChangeEventHandler forwardSettingChange = ForwardSettingChange;

        // MultiSettingChange
        private static void ForwardMultiSettingChange(
            object sender,
            MultiSettingChangeEventArgs e)
        {
            OnMultiSettingChange(e);
        }

        private static readonly MultiSettingChangeEventHandler forwardMultiSettingChange = ForwardMultiSettingChange;

        // GameConfigChange
        private static void ForwardGameConfigChange(
            object sender,
            EventArgs e)
        {
            OnGameConfigChange(e);
        }

        private static readonly GameConfigChangeEventHandler forwardGameConfigChange = ForwardGameConfigChange;

        // XdelaySettingsChange
        private static void ForwardXdelaySettingsChange(
            object sender,
            EventArgs e)
        {
            OnXdelaySettingsChange(e);
        }

        private static readonly XdelaySettingsChangeEventHandler forwardXdelaySettingsChange = ForwardXdelaySettingsChange;

        // XrlMappingsChange
        private static void ForwardXrlMappingsChange(
            object sender,
            EventArgs e)
        {
            OnXrlMappingsChange(e);
        }

        private static readonly XrlMappingsChangeEventHandler forwardXrlMappingsChange = ForwardXrlMappingsChange;

        // HealthMappingsChange
        private static void ForwardHealthMappingsChange(
            object sender,
            EventArgs e)
        {
            OnHealthMappingsChange(e);
        }

        private static readonly HealthMappingsChangeEventHandler forwardHealthMappingsChange = ForwardHealthMappingsChange;

        // LiveRegistrySettingsChange
        private static void ForwardLiveRegistrySettingsChange(
            object sender,
            EventArgs e)
        {
            OnLiveRegistrySettingsChange(e);
        }

        private static readonly LiveRegistrySettingsChangeEventHandler forwardLiveRegistrySettingsChange = ForwardLiveRegistrySettingsChange;

        // LiveRegistrySettingsChange
        private static void ForwardServiceKeysChange(
            object sender,
            EventArgs e)
        {
            OnServiceKeysChange(e);
        }

        private static readonly ServiceKeysChangeEventHandler forwardServiceKeysChange = ForwardServiceKeysChange;

        // _npdbRefreshNotification
        private static void ForwardNpdbRefreshNotification(NpdbRefreshTypes npdbRefreshType)
        {
            OnNpdbRefresh(npdbRefreshType);
        }
        private static readonly RefreshTypeEventHandler forwardNpdbRefreshNotification = ForwardNpdbRefreshNotification;

        // We need the reader writer lock to be initialized before any
        // member is called, so we initialize it in a static constructor.
        // We also use this opportunity to attach our global change
        // event handlers.
        private static object _initLock = new object();
        private static void InitializeDefault()
        {
            lock (_initLock)
            {
                if (_defaultInstance != null)
                    return;

                _defaultInstance = ConfigInstance.Create();
                _instances.Add(_defaultInstance);

                _defaultInstance.ServerListChange += forwardServerListChange;
                _defaultInstance.InterfaceChange += forwardInterfaceChange;
                _defaultInstance.InterfaceBucketChange += forwardInterfaceBucketChange;
                _defaultInstance.VirtualInterfaceChange += forwardVirtualInterfaceChange;
                _defaultInstance.VirtualInterfaceListChange += forwardVirtualInterfaceListChange;
                _defaultInstance.SettingChange += forwardSettingChange;
                _defaultInstance.MultiSettingChange += forwardMultiSettingChange;
                _defaultInstance.GameConfigChange += forwardGameConfigChange;
                _defaultInstance.XdelaySettingsChange += forwardXdelaySettingsChange;
                _defaultInstance.XrlMappingsChange += forwardXrlMappingsChange;
                _defaultInstance.HealthMappingsChange += forwardHealthMappingsChange;
                _defaultInstance.LiveRegistrySettingsChange += forwardLiveRegistrySettingsChange;
            _defaultInstance.EtxManifestChange += forwardEtxManifestChange;
                _defaultInstance.ServiceKeysChange += forwardServiceKeysChange;
                _defaultInstance._npdbRefreshNotification += forwardNpdbRefreshNotification;
            }
        }

        // this is relative to HKLM

        public static ConfigInstance DefaultInstance
        {
            get
            {
                if (_defaultInstance == null)
                    InitializeDefault();

                return _defaultInstance;
            }
        }

        public static Int64 LatestChangeId
        {
            get
            {
                return DefaultInstance.LatestChangeId;
            }
        }

        public static TimeSpan MinEventInterval
        {
            get
            {
                return DefaultInstance.MinEventInterval;
            }
        }

        public static int CacheRefreshInterval
        {
            get
            {
                return DefaultInstance.CacheRefreshInterval;
            }
        }

        //While this could be use for other things, it is currently planned to be used for testing
        #region NPDB Refresh Type Notification

        public static event RefreshTypeEventHandler _npdbRefreshNotification = null;
        protected static void OnNpdbRefresh(NpdbRefreshTypes npdbRefreshType)
        {
            if (null != _npdbRefreshNotification)
            {
                _npdbRefreshNotification(npdbRefreshType);
            }
        }

        #endregion

        public static void CheckForUpdates()
        {
            DefaultInstance.CheckForUpdates();
        }


        public static string NpdbServer
        {
            get
            {
                return DefaultInstance.NpdbServer;
            }
            set
            {
                DefaultInstance.NpdbServer = value;
            }
        }

        public static string NpdbDatabase
        {
            get
            {
                return DefaultInstance.NpdbDatabase;
            }
            set
            {
                DefaultInstance.NpdbDatabase = value;
            }
        }

        public static System.Reflection.Assembly Assembly
        {
            [MethodImpl(MethodImplOptions.NoInlining)]
            get
            {
                return DefaultInstance.Assembly;
            }

            set {
                DefaultInstance.Assembly = value;
            }
        }

        public static string AssemblyPath
        {
            get
            {
                return DefaultInstance.AssemblyPath;
            }
        }

        public static string AssemblyDirectory
        {
            get
            {
                return DefaultInstance.AssemblyDirectory;
            }
        }

        public static string SqlApplicationName
        {
            get
            {
                return DefaultInstance.SqlApplicationName;
            }

            set
            {
                DefaultInstance.SqlApplicationName = value;
            }
        }
        public static string ComponentName
        {
            get
            {
                return DefaultInstance.ComponentName;
            }

            // This set method is provided for C++ clients accessing
            // config through COM interop. For these components,
            // GetCallingAssembly().GetName().Name resolves to
            // CommonConfig, instead of the caller's executable.
            // this results in the Component property resolving to
            // Component.unknown, which means that component specific
            // overrides don't work. It also means that the NT events
            // are written with ComponentName "CommonConfig" which gets
            // very confusing because it's hard to tell which NT events
            // came from which C++ components. Allowing C++ compoents
            // to set their Component name will resolve both of these
            // difficulties.
            set
            {
                DefaultInstance.ComponentName = value;
            }
        }
        
        public static int NpdbConnectionTimeout
        {
            get
            {
                return DefaultInstance.NpdbConnectionTimeout;
            }
            set
            {
                DefaultInstance.NpdbConnectionTimeout = value;
            }
        }
        
        public static string NpdbConnectionStringWithTimeout(int timeout)
        {
            return DefaultInstance.NpdbConnectionStringWithTimeout(timeout);
        }        

        public static string NpdbConnectionString
        {
            get
            {
                return DefaultInstance.NpdbConnectionString;
            }
        }

        public static string NativeNpdbConnectionString
        {
            get
            {
                return DefaultInstance.NativeNpdbConnectionString;
            }
        }

        public static string Environment
        {
            get
            {
                return DefaultInstance.Environment;
            }
        }

        public static string EnvironmentType
        {
            get
            {
                return DefaultInstance.EnvironmentType;
            }
        }

        // Some features are only allowed in test environments.  Encapsulate what
        // constitutes a test environment here
        public static bool IsTestEnvironment()
        {
            return DefaultInstance.IsTestEnvironment();
        }

        public static int SiteId
        {
            get
            {
                return DefaultInstance.SiteId;
            }
        }

        public static int MainSiteId
        {
            get
            {
                return DefaultInstance.MainSiteId;
            }
        }

        public static string Server
        {
            get
            {
                return DefaultInstance.Server;
            }
        }

        /// <summary>
        /// DO NOT USE!!!  SERIOUSLY!!!  WHAT ARE YOU THINKING???
        /// This is a Test Only Method.
        /// DO NOT USE!!!  SERIOUSLY!!!
        /// </summary>
        public static string ServerSet_TestOnly_DoNotUse
        {
            set
            {
                DefaultInstance.ServerSet_TestOnly_DoNotUse = value;
            }
        }

        /// <summary>
        /// Gets the ID used by the cleanser's ReportMessage protocol based on the current component.
        /// 0 is returned if no mapping for the current component has been defined.
        /// </summary>
        public static int ReportMessageComponentId
        {
            get
            {
                return DefaultInstance.ReportMessageComponentId;
            }
        }

        public static string ReportMessageCleanserVirtualInterface
        {
            get
            {
                return DefaultInstance.ReportMessageCleanserVirtualInterface;
            }
        }

        // Allows components to add additional mappings without having to modify the default mappings in
        // the Component class.
        public static void AddReportMessageComponentIdMapping(string component, int reportMessageId)
        {
            DefaultInstance.AddReportMessageComponentIdMapping(component, reportMessageId);
        }

        public static void RemoveReportMessageComponentIdMapping(string component)
        {
            DefaultInstance.RemoveReportMessageComponentIdMapping(component);
        }

        // This method discards all cached configuration information,
        // forcing it to be reread from the source. Services can use this
        // in response to an xmgmt command asking them to reread configuration data.
        public static void DiscardCachedValues()
        {
            DefaultInstance.DiscardCachedValues();
        }

        public static void GetServerInfo(string server, out int siteId)
        {
            DefaultInstance.GetServerInfo(server, out siteId);
        }

        // Gets a list of server names that are exposing a particular interface name
        public static string[] GetServerListByInterface(string iface)
        {
            return DefaultInstance.GetServerListByInterface(iface);
        }

        // attach ServerListChangeEventHandler delegates to this event to be notified
        // when server lists change in NPDB
        public static event ServerListChangeEventHandler ServerListChange;
        protected static void OnServerListChange(ServerListChangeEventArgs e)
        {
            if (ServerListChange != null)
            {
                ServerListChange(null, e);
            }
            else
            {
                // This is ok to do because DefaultInstance is NEVER exposed
                // in any way other than through the Config static methods i.e.
                // no one except the Config class will ever register event handlers.
                // So, an empty delegate list here should have the same behavior 
                // as an empty delegate list on the ConfigInstance class, which will
                // never be the case for DefaultInstance since Config always registers
                // its handlers.
                VetoServerListChange();
            }
        }

        // if the ServerListChangeHandler wants to veto the change, it calls
        // VetoServerListChange, which sets the _approveServerListChange flag to false
        public static void VetoServerListChange()
        {
            // ServerListChangeEventHandlers call this method if they
            // need to indicate that the server list change indicated by
            // the ServerListChangeEventArgs should not be committed
            // to the cache
            DefaultInstance.VetoServerListChange();
        }

        public static IInterfaceInfo GetInterface(
            string iface)
        {
            return DefaultInstance.GetInterface(iface);
        }


        public static IInterfaceInfo GetInterface(
            string server,
            string iface)
        {
            return DefaultInstance.GetInterface(server, iface);
        }


        public static IInterfaceInfo GetInterface(
            string environment,
            string server,
            string iface)
        {
            return DefaultInstance.GetInterface(environment, server, iface);
        }



        // attach InterfaceChangeEventHandler delegates to this event to be notified
        // when interface info changes in NPDB
        public static event InterfaceChangeEventHandler InterfaceChange;
        protected static void OnInterfaceChange(InterfaceChangeEventArgs e)
        {
            if (InterfaceChange != null)
            {
                InterfaceChange(null, e);
            }
            else
            {
                // This is ok to do because DefaultInstance is NEVER exposed
                // in any way other than through the Config static methods i.e.
                // no one except the Config class will ever register event handlers.
                // So, an empty delegate list here should have the same behavior 
                // as an empty delegate list on the ConfigInstance class, which will
                // never be the case for DefaultInstance since Config always registers
                // its handlers.
                VetoInterfaceChange();
            }
        }

        // if the InterfaceChangeHandler wants to veto the change, it calls
        // VetoInterfaceChange, which sets the _approveInterfaceChange flag to false
        public static void VetoInterfaceChange()
        {
            // InterfaceChangeEventHandlers call this method if they
            // need to indicate that the interface change indicated by
            // the InterfaceChangeEventArgs should not be committed
            // to the cache
            DefaultInstance.VetoInterfaceChange();
        }

        // Retrieves the information required to reach a particular interface,
        // when the caller expects only one server to expose that interface.
        // A good example of when this might be used is when querying for
        // a non-partitioned database interface. The interface is not virtual,
        // but there will still only be one instance of that interface because
        // the data is not partitioned. If more than one server exposes the
        // specified interface, then an ApplicationException will be thrown
        public static IInterfaceInfo GetSingleInterface(string iface)
        {
            return DefaultInstance.GetSingleInterface(iface);
        }

        public static IBucketServer GetBucketServer(string iface, uint bucket)
        {
            return DefaultInstance.GetBucketServer(iface, bucket);
        }

        public static IBucketServer GetTitleBucketServer(
            string iface,
            uint titleId,
            uint bucket)
        {
            return DefaultInstance.GetTitleBucketServer(iface, titleId, bucket);
        }

        // attach InterfaceBucketChangeEventHandler delegates to this event to be notified
        // when interface bucket info changes in NPDB
        public static event InterfaceBucketChangeEventHandler InterfaceBucketChange;
        protected static void OnInterfaceBucketChange(InterfaceBucketChangeEventArgs e)
        {
            if(InterfaceBucketChange != null)
            {
                InterfaceBucketChange(null, e);
            }
            else
            {
                // This is ok to do because DefaultInstance is NEVER exposed
                // in any way other than through the Config static methods i.e.
                // no one except the Config class will ever register event handlers.
                // So, an empty delegate list here should have the same behavior 
                // as an empty delegate list on the ConfigInstance class, which will
                // never be the case for DefaultInstance since Config always registers
                // its handlers.
                VetoInterfaceBucketChange();
            }
        }

        // if the InterfaceBucketChangeHandler wants to veto the change, it calls
        // VetoInterfaceBucketChange, which sets the _approveInterfaceBucketChange
        // flag to false
        public static void VetoInterfaceBucketChange()
        {
            // InterfaceBucketChangeEventHandlers call this method if they
            // need to indicate that the interface change indicated by
            // the InterfaceBucketChangeEventArgs should not be committed
            // to the cache
            DefaultInstance.VetoInterfaceBucketChange();
        }


        public static uint GetBucketNum(string iface, ulong hashValue)
        {
            return DefaultInstance.GetBucketNum(iface, hashValue);
        }

        public static uint GetRandomBucketNum(string iface)
        {
            return DefaultInstance.GetRandomBucketNum(iface);
        }


        public static uint GetBucketCount(string iface)
        {
            return DefaultInstance.GetBucketCount(iface);
        }


        public static bool TryGetBucketCount(string iface, out uint bucketCount)
        {
            return DefaultInstance.TryGetBucketCount(iface, out bucketCount);
        }

        public static void CompleteMigration(string iface, uint bucket)
        {
            DefaultInstance.CompleteMigration(iface, bucket);
        }

        // this method does not modify the interface bucket cache - we rely on the usual
        // detection and notification procedure to take care of that
        public static void CompleteTitleMigration(string iface, uint titleId, uint bucket)
        {
            DefaultInstance.CompleteTitleMigration(iface, titleId, bucket);
        }

        public static string[] GetVirtualInterfaceListBySite(Site site)
        {
            return DefaultInstance.GetVirtualInterfaceListBySite(site);
        }

        public static string[] GetVirtualInterfaceListBySite(int siteId)
        {
            return DefaultInstance.GetVirtualInterfaceListBySite(siteId);
        }

        // attach VirtualInterfaceListChangeEventHandler delegates to this event to be notified
        // when virtual interface lists change in NPDB
        public static event VirtualInterfaceListChangeEventHandler VirtualInterfaceListChange;
        protected static void OnVirtualInterfaceListChange(VirtualInterfaceListChangeEventArgs e)
        {
            if (VirtualInterfaceListChange != null)
            {
                VirtualInterfaceListChange(null, e);
            }
            else
            {
                // This is ok to do because DefaultInstance is NEVER exposed
                // in any way other than through the Config static methods i.e.
                // no one except the Config class will ever register event handlers.
                // So, an empty delegate list here should have the same behavior 
                // as an empty delegate list on the ConfigInstance class, which will
                // never be the case for DefaultInstance since Config always registers
                // its handlers.
                VetoVirtualInterfaceListChange();
            }
        }

        // if the VirtualInterfaceListChangeHandler wants to veto the change, it calls
        // VetoVirtualInterfaceListChange, which sets the _approveVirtualInterfaceListChange flag to false
        public static void VetoVirtualInterfaceListChange()
        {
            // VirtualInterfaceListChangeEventHandlers call this method if they
            // need to indicate that the virtual interface list change indicated by
            // the VirtualInterfaceListChangeEventArgs should not be committed
            // to the cache
            DefaultInstance.VetoVirtualInterfaceListChange();
        }

        public static IVirtualInterfaceInfo[] GetVirtualInterfaceInfoBySite(Site site)
        {
            return DefaultInstance.GetVirtualInterfaceInfoBySite(site);
        }

        public static IVirtualInterfaceInfo[] GetVirtualInterfaceInfoBySite(int siteId)
        {
            return DefaultInstance.GetVirtualInterfaceInfoBySite(siteId);
        }

        // Retrieves the information required to reach a virtual interface.
        public static bool TryGetVirtualInterface(string virtualInterface, out IVirtualInterfaceInfo virtualInterfaceInfo)
        {
            return DefaultInstance.TryGetVirtualInterface(virtualInterface, out virtualInterfaceInfo);
        }

        // Retrieves the information required to reach a virtual interface.
        public static IVirtualInterfaceInfo GetVirtualInterface(string virtualInterface)
        {
            return DefaultInstance.GetVirtualInterface(virtualInterface);
        }

        public static IVirtualInterfaceInfo GetVirtualInterface(string virtualInterface, Site site)
        {
            return DefaultInstance.GetVirtualInterface(virtualInterface, site);
        }

        public static IVirtualInterfaceInfo GetVirtualInterface(string virtualInterface, int siteId)
        {
            return DefaultInstance.GetVirtualInterface(virtualInterface, siteId);
        }

        // attach VirtualInterfaceChangeEventHandler delegates to this event to be notified
        // when virtual interface info changes in NPDB
        public static event VirtualInterfaceChangeEventHandler VirtualInterfaceChange;
        protected static void OnVirtualInterfaceChange(VirtualInterfaceChangeEventArgs e)
        {
            if (VirtualInterfaceChange != null)
            {
                VirtualInterfaceChange(null, e);
            }
            else
            {
                // This is ok to do because DefaultInstance is NEVER exposed
                // in any way other than through the Config static methods i.e.
                // no one except the Config class will ever register event handlers.
                // So, an empty delegate list here should have the same behavior 
                // as an empty delegate list on the ConfigInstance class, which will
                // never be the case for DefaultInstance since Config always registers
                // its handlers.
                VetoVirtualInterfaceChange();
            }
        }

        // if the VirtualInterfaceChangeHandler wants to veto the change, it calls
        // VetoVirtualInterfaceChange, which sets the _approveVirtualInterfaceChange flag to false
        public static void VetoVirtualInterfaceChange()
        {
            // VirtualInterfaceChangeEventHandlers call this method if they
            // need to indicate that the virtual interface change indicated by
            // the VirtualInterfaceChangeEventArgs should not be committed
            // to the cache
            DefaultInstance.VetoVirtualInterfaceChange();
        }

        // use this API to retrieve the value for a boolean setting for the
        // current component on the current server
        public static bool GetBoolSetting(string setting)
        {
            return DefaultInstance.GetBoolSetting(setting);
        }

        // use this API to convert the value for a boolean setting
        // for instance, when the string value is given in a SettingChangeEventArgs
        public static bool ConvertBoolSetting(string settingValue)
        {
            string val = (settingValue ?? "").ToLower();
            return (val == "1" || val == "yes" || val == "true" || val == "on");
        }

        // use this API to retrieve the value for a signed integer setting for the
        // current component on the current server
        public static int GetIntSetting(string setting)
        {
            return DefaultInstance.GetIntSetting(setting);
        }

        // use this API to retrieve the value for an unsigned integer setting for the
        // current component on the current server
        public static uint GetUIntSetting(string setting)
        {
            return DefaultInstance.GetUIntSetting(setting);
        }

        // use this API to retrieve the value for an IP address as an unsigned integer setting for the
        // current component on the current server
        public static uint GetUIntIpSetting(string setting)
        {
            return DefaultInstance.GetUIntIpSetting(setting);
        }

        // use this API to retrieve the value for a signed integer setting for the
        // current component on the current server
        public static long GetLongSetting(string setting)
        {
            return DefaultInstance.GetLongSetting(setting);
        }

        // use this API to retrieve the value for an unsigned integer setting for the
        // current component on the current server
        public static ulong GetULongSetting(string setting)
        {
            return DefaultInstance.GetULongSetting(setting);
        }

        // use this API to retrieve the value for a double precision floating point setting for the
        // current component on the current server
        public static double GetDoubleSetting(string setting)
        {
            return DefaultInstance.GetDoubleSetting(setting);
        }

        // use this API to retrieve the value for a setting for the
        // current component on the current server
        public static string GetSetting(string setting)
        {
            return DefaultInstance.GetSetting(setting);
        }

        // Gets a setting from the blob table
        public static byte[] GetBlobSetting(string setting)
        {
            return DefaultInstance.GetBlobSetting(setting);
        }

        // attach SettingChangeEventHandler delegates to this event to be notified
        // when settings change in NPDB
        public static event SettingChangeEventHandler SettingChange;
        protected static void OnSettingChange(SettingChangeEventArgs e)
        {
            if (SettingChange != null)
            {
                SettingChange(null, e);
            }
        }

        // if the SettingChangeEventHandler wants to veto the change, it calls
        // VetoSetingChange, which sets the _approveSettingsChange flag to false
        public static void VetoSettingChange()
        {
            // SettingChangeEventHandlers call this method if they
            // need to indicate that the setting change indicated by
            // the SettingChangeEventArgs should not be committed
            // to the cache
            DefaultInstance.VetoSettingChange();
        }

        public static void TryCacheSettings(
            params string[] settings)
        {
            DefaultInstance.TryCacheSettings(settings);
        }


        public static void RegisterDynamicSetting(string setting)
        {
            DefaultInstance.RegisterDynamicSetting(setting);
        }

        public static void UnRegisterDynamicSetting(string setting)
        {
            DefaultInstance.UnRegisterDynamicSetting(setting);
        }

        // use this API to retrieve the values for a multisetting for the
        // current component on the current server
        public static string[] GetMultiSetting(
            string multiSetting)
        {
            return DefaultInstance.GetMultiSetting(multiSetting);
        }

        // this API provides a way to explicitly specify the component name
        // may be useful for shared code
        public static string[] GetMultiSetting(
            string multiSetting,
            string component)
        {
            return DefaultInstance.GetMultiSetting(multiSetting, component);
        }

        // this API provides a way to explicitly specify the environment, siteid, server, and component
        public static string[] GetMultiSetting(
            string environment,
            int siteId,
            string server,
            string component,
            string multiSetting)
        {
            return DefaultInstance.GetMultiSetting(environment, siteId, server, component, multiSetting);
        }

        // attach MultiSettingChangeEventHandler delegates to this event to be notified
        // when multi settings change in NPDB
        public static event MultiSettingChangeEventHandler MultiSettingChange;
        protected static void OnMultiSettingChange(MultiSettingChangeEventArgs e)
        {
            if (MultiSettingChange != null)
            {
                MultiSettingChange(null, e);
            }
        }

        // if the MultiSettingChangeEventHandler wants to veto the change, it calls
        // VetoMultiSettingChange, which sets the _approveMultiSettingChange flag to false
        public static void VetoMultiSettingChange()
        {
            // MultiSettingChangeEventHandlers call this method if they
            // need to indicate that the multi setting change indicated by
            // the MultiSettingChangeEventArgs should not be committed
            // to the cache
            DefaultInstance.VetoMultiSettingChange();
        }


        // the following methods are intended for use by Setup and not services
        public static string[] GetInstallUnitListByServer(
            string server)
        {
            return DefaultInstance.GetInstallUnitListByServer(server);
        }

        public static InstallUnitInfo[] GetInstallUnitInfoByServer(
            string server)
        {
            return DefaultInstance.GetInstallUnitInfoByServer(server);
        }

        public static string[] GetInstallUnitListByServer(
            string environment,
            string server)
        {
            return DefaultInstance.GetInstallUnitListByServer(environment, server);
        }

        public static InstallUnitInfo[] GetInstallUnitInfoByServer(
            string environment,
            string server)
        {
            throw new Exception("not yet implemented");
        }

        public static IInstallUnitInfo GetInstallUnit(string installUnit)
        {
            return DefaultInstance.GetInstallUnit(installUnit);
        }

        public static string[] GetComponentListByServer(
            string server)
        {
            return DefaultInstance.GetComponentListByServer(server);
        }

        public static ComponentInfo[] GetComponentInfoByServer(
            string server)
        {
            return DefaultInstance.GetComponentInfoByServer(server);
        }

        public static string[] GetComponentListByServer(
            string environment,
            string server)
        {
            return DefaultInstance.GetComponentListByServer(environment, server);
        }


        public static bool CheckServerConfiguration(string environment, string server, string component)
        {
            return DefaultInstance.CheckServerConfiguration(environment, server, component);
        }

        public static ComponentInfo[] GetComponentInfoByServer(
            string environment,
            string server)
        {
            return DefaultInstance.GetComponentInfoByServer(environment, server);
        }

        public static IComponentInfo GetComponent(string component)
        {
            return DefaultInstance.GetComponent(component);
        }

        public static string[] GetInterfaceListByServer(
            string server)
        {
            return DefaultInstance.GetInterfaceListByServer(server);
        }

        public static InterfaceInfo[] GetInterfaceInfoByServer(
            string server)
        {
            return DefaultInstance.GetInterfaceInfoByServer(server);
        }

        public static string[] GetInterfaceListByServer(
            string environment,
            string server)
        {
            return DefaultInstance.GetInterfaceListByServer(environment, server);
        }

        // also used by SG, in addition to setup
        public static InterfaceInfo[] GetInterfaceInfoByServer(
            string environment,
            string server)
        {
            return DefaultInstance.GetInterfaceInfoByServer(environment, server);
        }

        // attach GameConfigChangeEventHandler delegates to this event to be notified
        // when t_game_config is modified in NPDB
        public static event GameConfigChangeEventHandler GameConfigChange;
        protected static void OnGameConfigChange(EventArgs e)
        {
            if (GameConfigChange != null)
            {
                GameConfigChange(null, e);
            }
        }

        // attach XdelaySettingsChangeEventHandler delegates to this event to be notified
        // when t_xdelay_settings is modified in NPDB
        public static event XdelaySettingsChangeEventHandler XdelaySettingsChange;
        protected static void OnXdelaySettingsChange(EventArgs e)
        {
            if (XdelaySettingsChange != null)
            {
                XdelaySettingsChange(null, e);
            }
        }

        // attach XrlMappingsChangeEventHandler delegates to this event to be notified
        // when t_xdelay_settings is modified in NPDB
        public static event XrlMappingsChangeEventHandler XrlMappingsChange;
        protected static void OnXrlMappingsChange(EventArgs e)
        {
            if (XrlMappingsChange != null)
            {
                XrlMappingsChange(null, e);
            }
        }

        // attach HealthMappingsChangeEventHandler delegates to this event to be notified
        // when t_health_mappings is modified in NPDB
        public static event HealthMappingsChangeEventHandler HealthMappingsChange;
        protected static void OnHealthMappingsChange(EventArgs e)
        {
            if (HealthMappingsChange != null)
            {
                HealthMappingsChange(null, e);
            }
        }


        // attach LiveRegistrySettingsChangeEventHandler delegates to this event to be notified
        // when t_live_registry_settings is modified in NPDB
        public static event LiveRegistrySettingsChangeEventHandler LiveRegistrySettingsChange;
        protected static void OnLiveRegistrySettingsChange(EventArgs e)
        {
            if (LiveRegistrySettingsChange != null)
            {
                LiveRegistrySettingsChange(null, e);
            }
        }

        // attach SeviceKeyChangeEventHandler delegates to this event to be notified
        // when t_service_keys is modified in NPDB
        public static event ServiceKeysChangeEventHandler ServiceKeysChange;
        protected static void OnServiceKeysChange(EventArgs e)
        {
            if (ServiceKeysChange != null)
            {
                ServiceKeysChange(null, e);
            }
        }

        // attach EtxManifestChangeEventHandler delegates to this event to be notified
        // when an etx manifest table is modified in NPDB
        public static event EtxManifestChangeEventHandler EtxManifestChange;
        protected static void OnEtxManifestChange(EventArgs e)
        {
            if (EtxManifestChange != null)
            {
                EtxManifestChange(null, e);
            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="environment"></param>
        /// <param name="server"></param>
        /// <param name="iface"></param>
        public static void AddServerInterfaceConfiguration(
            string environment,
            string server,
            string iface)
        {
            DefaultInstance.AddServerInterfaceConfiguration(environment, server, iface);
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="environment"></param>
        /// <param name="server"></param>
        /// <param name="iface"></param>
        public static void RemoveServerInterfaceConfiguration(
            string environment,
            string server,
            string iface)
        {
            DefaultInstance.RemoveServerInterfaceConfiguration(environment, server, iface);
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="userrole"></param>
        /// <returns></returns>
        public static IUserRole GetUserRole(string userrole)
        {
            return DefaultInstance.GetUserRole(userrole);
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="environment"></param>
        /// <param name="userrole"></param>
        /// <returns></returns>
        public static IUserRole GetUserRole(string environment, string userrole)
        {
            return DefaultInstance.GetUserRole(environment, userrole);
        }


#if TEST
    public static void SetSingleInterface(string iface, IInterfaceInfo info)
    {
        DefaultInstance.SetSingleInterface(iface, info);
    }

    public static void SetInterface(string server, string iface, IInterfaceInfo info)
    {
        DefaultInstance.SetInterface(server, iface, info);
    }
#endif

    }

} // end namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\config\ConfigEventLogger.cs ===
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Text;

namespace xonline.common.config
{

// This class implements a couple of static methods to log stuff to the
// NT event log. Both the ConfigInterop and Config classes inherit these methods.
// We don't use the xmgmt event logging stuff because xmgmt needs to use
// Config during it's startup. We're putting this stuff in a base class
// so we can make it protected. We don't want non-Config code calling these
// methods directly - we want non-config code to go through xmgmt.
[ComVisible(false)]
public class ConfigEventLogger
{
    public const int MaxEventLength = 32000;

    private static EventLogEntryType XEventIdToEventLogEntryType(ConfigEvent.Id eventId)
    {
        if (ConfigEvent.SeverityFromId(eventId) == ConfigEvent.Severity.Info)
        {
            return EventLogEntryType.Information;
        }

        if (ConfigEvent.SeverityFromId(eventId) == ConfigEvent.Severity.Warning)
        {
            return EventLogEntryType.Warning;
        }

        return EventLogEntryType.Error;
    }

    private static UInt16 XEventIdToEventLogEventId(ConfigEvent.Id eventId)
    {
        return (UInt16) ConfigEvent.MessageFromId(eventId);
    }

    internal static void LogNtEvent(string component, string msg, ConfigEvent.Id eventId)
    {
        StringBuilder eventText = new StringBuilder();
        eventText.Append("\r\n\r\n----- CommonConfig -----\r\n");
        eventText.Append(msg);
        eventText.Append("\r\n");

        int start;
        int len;
        int maxIndex = eventText.Length - 1;

        for( start = 0; start < maxIndex; start += len ) { // event string must be < 32766 characters
            len = Math.Min(eventText.Length - start, ConfigEventLogger.MaxEventLength);
            EventLog.WriteEntry(
                component,
                eventText.ToString( start, len ),
                XEventIdToEventLogEntryType( eventId ),
                XEventIdToEventLogEventId( eventId ),
                0,
                null );
        }
    }

    internal static void LogNtEvent(string component, Exception e, string stackTrace, ConfigEvent.Id eventId)
    {
        StringBuilder eventText = new StringBuilder();
        eventText.Append("\r\n\r\n----- Exception in CommonConfig -----\r\n");
        eventText.Append(e.GetType().ToString() + ": " + e.Message + "\r\n");
        eventText.Append(stackTrace);
        eventText.Append("\r\n");

        int start;
        int len;
        int maxIndex = eventText.Length - 1;

        for( start = 0; start < maxIndex; start += len ) { // event string must be < 32766 characters
            len = Math.Min( eventText.Length - start, ConfigEventLogger.MaxEventLength );
            EventLog.WriteEntry(
                component,
                eventText.ToString( start, len ),
                XEventIdToEventLogEntryType( eventId ),
                XEventIdToEventLogEventId( eventId ),
                0,
                null );
        }
    }
}

} // end namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\config\ConfigInterop.cs ===
using System;
using System.Runtime.InteropServices;
using System.Threading;


namespace xonline.common.config
{

// This class exists for COM interop - it implements the IConfig interface
// which is exported by tlbexp and consumed by COM clients. These methods simply
// call the static Config methods.

// 
// Since this object is used by c++ components, any exceptions thrown by common
//  config are lost in the translation. To avoid this, the Interop methods all catch their
//  own exceptions and log NT events before re-throwing. 
//
    [ComVisible(true)]
[GuidAttribute("07623A8A-002E-4906-B931-DD31819A5812")] // fix the guid, so it doesn't change with each build
[ClassInterfaceAttribute(ClassInterfaceType.None)]  // force clients to use the IConfig interface
public class ConfigInterop : ConfigEventLogger, IConfig
{
    public ConfigInterop()
    {
        // create delegates to the change events that translate them
        // into calls to the ConfigListener
        _serverListChangeEventHandler           = new ServerListChangeEventHandler(this.ServerListChange);
        _interfaceChangeEventHandler            = new InterfaceChangeEventHandler(this.InterfaceChange);
        _interfaceBucketChangeEventHandler      = new InterfaceBucketChangeEventHandler(this.InterfaceBucketChange);
        _virtualInterfaceChangeEventHandler     = new VirtualInterfaceChangeEventHandler(this.VirtualInterfaceChange);
        _virtualInterfaceListChangeEventHandler = new VirtualInterfaceListChangeEventHandler(this.VirtualInterfaceListChange);
        _settingChangeEventHandler              = new SettingChangeEventHandler(this.SettingChange);
        _multiSettingChangeEventHandler         = new MultiSettingChangeEventHandler(this.MultiSettingChange);
        _gameConfigChangeEventHandler           = new GameConfigChangeEventHandler(this.GameConfigChange);
        _xdelaySettingsChangeEventHandler       = new XdelaySettingsChangeEventHandler(this.XdelaySettingsChange);
        _xrlMappingsChangeEventHandler          = new XrlMappingsChangeEventHandler(this.XrlMappingsChange);
    }

    private void ServerListChange(object sender, ServerListChangeEventArgs e)
    {
        if (ConfigListener != null)
        {
            ConfigListener.ServerListChange(e);
        }
    }

    private void InterfaceChange(object sender, InterfaceChangeEventArgs e)
    {
        if (ConfigListener != null)
        {
            ConfigListener.InterfaceChange(e);
        }
    }

    private void InterfaceBucketChange(object sender, InterfaceBucketChangeEventArgs e)
    {
        if (ConfigListener != null)
        {
            ConfigListener.InterfaceBucketChange(e);
        }
    }

    private void VirtualInterfaceChange(object sender, VirtualInterfaceChangeEventArgs e)
    {
        if (ConfigListener != null)
        {
            ConfigListener.VirtualInterfaceChange(e);
        }
    }

    private void VirtualInterfaceListChange(object sender, VirtualInterfaceListChangeEventArgs e)
    {
        if (ConfigListener != null)
        {
            ConfigListener.VirtualInterfaceListChange(e);
        }
    }

    private void SettingChange(object sender, SettingChangeEventArgs e)
    {
        if (ConfigListener != null)
        {
            ConfigListener.SettingChange(e);
        }
    }

    private void MultiSettingChange(object sender, MultiSettingChangeEventArgs e)
    {
        if (ConfigListener != null)
        {
            ConfigListener.MultiSettingChange(e);
        }
    }

    private void GameConfigChange(object sender, EventArgs e)
    {
        if (ConfigListener != null)
        {
            ConfigListener.GameConfigChange();
        }
    }

    private void XdelaySettingsChange(object sender, EventArgs e)
    {
        if (ConfigListener != null)
        {
            ConfigListener.XdelaySettingsChange();
        }
    }

    private void XrlMappingsChange(object sender, EventArgs e)
    {
        if (ConfigListener != null)
        {
            ConfigListener.XrlMappingsChange();
        }
    }

    public void VetoInterfaceBucketChange()
    {
        Config.VetoInterfaceBucketChange(); ;
    }

    public void VetoInterfaceChange()
    {
        Config.VetoInterfaceChange();
    }

    public void VetoMultiSettingChange()
    {
        Config.VetoMultiSettingChange();
    }

    public void VetoServerListChange()
    {
        Config.VetoServerListChange();
    }

    public void VetoSettingChange()
    {
        Config.VetoSettingChange();
    }

    public void VetoVirtualInterfaceChange()
    {
        Config.VetoVirtualInterfaceChange();
    }

    public void VetoVirtualInterfaceListChange()
    {
        Config.VetoVirtualInterfaceListChange();
    }
    
    public string InstallUnitToString(string installUnit)
    {
        return installUnit;
    }

    public string ComponentToString(string component)
    {
        return component;
    }

    public string InterfaceToString(string iface)
    {
        return iface;
    }

    public string VirtualInterfaceToString(string viface)
    {
        return viface;
    }

    public string SettingToString(string setting)
    {
        return setting;
    }

    public string MultiSettingToString(string multiSetting)
    {
        return multiSetting;
    }

    public string InstallerToString(Installer installer)
    {
        return installer.ToString();
    }

    public string SiteToString(Site site)
    {
        return site.ToString();
    }

    public void CheckForUpdates()
    {
        Config.CheckForUpdates();
    }

    private IConfigListener _configListener = null;

    private ServerListChangeEventHandler           _serverListChangeEventHandler           = null;
    private InterfaceChangeEventHandler            _interfaceChangeEventHandler            = null;
    private InterfaceBucketChangeEventHandler      _interfaceBucketChangeEventHandler      = null;
    private VirtualInterfaceChangeEventHandler     _virtualInterfaceChangeEventHandler     = null;
    private VirtualInterfaceListChangeEventHandler _virtualInterfaceListChangeEventHandler = null;
    private SettingChangeEventHandler              _settingChangeEventHandler              = null;
    private MultiSettingChangeEventHandler         _multiSettingChangeEventHandler         = null;
    private GameConfigChangeEventHandler           _gameConfigChangeEventHandler           = null;
    private XdelaySettingsChangeEventHandler       _xdelaySettingsChangeEventHandler       = null;
    private XrlMappingsChangeEventHandler          _xrlMappingsChangeEventHandler          = null;

    public IConfigListener ConfigListener
    {
        set
        {
            if (_configListener != null)
            {
                Marshal.ReleaseComObject(_configListener);
            }
            
            _configListener = value;

            if (null != _configListener) 
            {
                // attach delegates
                Config.ServerListChange           += _serverListChangeEventHandler;
                Config.InterfaceChange            += _interfaceChangeEventHandler;
                Config.InterfaceBucketChange      += _interfaceBucketChangeEventHandler;
                Config.VirtualInterfaceChange     += _virtualInterfaceChangeEventHandler;
                Config.VirtualInterfaceListChange += _virtualInterfaceListChangeEventHandler;
                Config.SettingChange              += _settingChangeEventHandler;
                Config.MultiSettingChange         += _multiSettingChangeEventHandler;
                Config.GameConfigChange           += _gameConfigChangeEventHandler;
                Config.XdelaySettingsChange       += _xdelaySettingsChangeEventHandler;
                Config.XrlMappingsChange          += _xrlMappingsChangeEventHandler;
            }
            else 
            {
                // detach delegates
                Config.ServerListChange           -= _serverListChangeEventHandler;
                Config.InterfaceChange            -= _interfaceChangeEventHandler;
                Config.InterfaceBucketChange      -= _interfaceBucketChangeEventHandler;
                Config.VirtualInterfaceChange     -= _virtualInterfaceChangeEventHandler;
                Config.VirtualInterfaceListChange -= _virtualInterfaceListChangeEventHandler;
                Config.SettingChange              -= _settingChangeEventHandler;
                Config.MultiSettingChange         -= _multiSettingChangeEventHandler;
                Config.GameConfigChange           -= _gameConfigChangeEventHandler;
                Config.XdelaySettingsChange       -= _xdelaySettingsChangeEventHandler;
                Config.XrlMappingsChange          -= _xrlMappingsChangeEventHandler;
            }
        }
        get
        {
            return _configListener;
        }
    }

    public string Environment
    {
        get
        {
            string environment = null;

            try
            {
                environment = Config.Environment;
            }
            catch (Exception e)
            {
                Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_186);
                throw;
            }

            return environment;
        }
    }

    public int SiteId
    {
        get
        {
            int siteId = 0;

            try
            {
                siteId = Config.SiteId;
            }
            catch (Exception e)
            {
                Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_187);
                throw;
            }

            return siteId;
        }
    }

    public string Server
    {
        get
        {
            string server = null;

            try
            {
                server = Config.Server;
            }
            catch (Exception e)
            {
                Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_188);
                throw;
            }

            return server;
        }
    }

    public string ServerSet_TestOnly_DoNotUse
    {
        set
        {
            try
            {
                Config.ServerSet_TestOnly_DoNotUse = value;
            }
            catch (Exception e)
            {
                Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_189);
                throw;
            }
        }
    }

    public string NpdbDatabase
    {
        get
        {
            try
            {
                return Config.NpdbDatabase;
            }
            catch (Exception e)
            {
                Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_190);
                throw;
            }
        }
    }

    public string NpdbServer
    {
        get
        {
            try
            {
                return Config.NpdbServer;
            }
            catch (Exception e)
            {
                Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_190);
                throw;
            }
        }
    }

    public string NpdbConnectionString
    {
        get
        {
            try
            {
                return Config.NativeNpdbConnectionString;
            }
            catch (Exception e)
            {
                Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_190);
                throw;
            }
        }
    }
    
    public string Component
    {
        get
        {
            string component = xonline.common.config.Component.unknown;

            try
            {
                component = Config.ComponentName;
            }
            catch (Exception e)
            {
                Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_191);
                throw;
            }

            return component;
        }
    }

    public string ComponentName
    {
        get
        {
            string componentName = null;

            try
            {
                componentName = Config.ComponentName;
            }
            catch (Exception e)
            {
                Config.LogNtEvent("CommonConfig", e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_192);
                throw;
            }

            return componentName;
        }
        set
        {
            try
            {
                Config.ComponentName = value;
            }
            catch (Exception e)
            {
                Config.LogNtEvent("CommonConfig", e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_193);
                throw;
            }
        }
    }

    public int ReportMessageComponentId 
    { 
        get
        {
            int componentId = 0;

            try
            {
                componentId = Config.ReportMessageComponentId;
            }
            catch (Exception e)
            {
                Config.LogNtEvent("CommonConfig", e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_INTEROP_REPORTMESSAGECOMPONENTID_FAILURE);
                throw;
            }

            return componentId;
        }
    }

    public string ReportMessageCleanserVirtualInterface 
    { 
        get
        {
            string virtInt = "";

            try
            {
                virtInt = Config.ReportMessageCleanserVirtualInterface;
            }
            catch (Exception e)
            {
                Config.LogNtEvent("CommonConfig", e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_INTEROP_REPORTMESSAGECLEANSERVIRTUALINTERFACE_FAILURE);
                throw;
            }

            return virtInt;
        }
    }

    public void AddReportMessageComponentIdMapping(string component, int reportMessageId)
    {
        try
        {
            Config.AddReportMessageComponentIdMapping(component, reportMessageId);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_INTEROP_ADDREPORTMESSAGECOMPONENTIDMAPPING_FAILURE);
            throw;
        }

        return;
    }

    public void GetServerInfo(string server, out int siteId)
    {
        try
        {
            Config.GetServerInfo(server, out siteId);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_194);
            throw;
        }

        return;
    }

    public string[] GetServerListByInterface(string iface)
    {
        string[] serverList = null;
        
        try
        {
            serverList = Config.GetServerListByInterface(iface);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_195);
            throw;
        }

        return serverList;
    }

    public IInterfaceInfo GetInterface(string server, string iface)
    {
        IInterfaceInfo interfaceInfo = null;
        
        try
        {
            interfaceInfo = Config.GetInterface(server, iface);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_196);
            throw;
        }

        return interfaceInfo;
    }

    public IInterfaceInfo GetInterface(string iface)
    {
        IInterfaceInfo interfaceInfo = null;
        
        try
        {
            interfaceInfo = Config.GetInterface(iface);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_196);
            throw;
        }

        return interfaceInfo;
    }

    public IInterfaceInfo GetSingleInterface(string iface)
    {
        IInterfaceInfo interfaceInfo = null;
        
        try
        {
            interfaceInfo = Config.GetSingleInterface(iface);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_197);
            throw;
        }

        return interfaceInfo;
    }

    public IBucketServer GetBucketServer(string iface, uint bucket)
    {
        IBucketServer bucketServer = null;

        try
        {
            bucketServer = Config.GetBucketServer(iface, bucket);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_198);
            throw;
        }
        return bucketServer;
    }

    public IBucketServer GetTitleBucketServer(string iface, uint titleId, uint bucket)
    {
        IBucketServer bucketServer = null;

        try
        {
            bucketServer = Config.GetTitleBucketServer(iface, titleId, bucket);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_199);
            throw;
        }
        return bucketServer;
    }

    public uint GetBucketNum(string iface, ulong hashValue)
    {
        uint bucketNum = 0;

        try
        {
            bucketNum = Config.GetBucketNum(iface, hashValue);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_200);
            throw;
        }
        return bucketNum;
    }

    public uint GetBucketCount(string iface)
    {
        uint bucketCount = 0;

        try
        {
            bucketCount = Config.GetBucketCount(iface);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_201);
            throw;
        }
        return bucketCount;
    }

    public void CompleteMigration(string iface, uint bucket)
    {
        try
        {
            Config.CompleteMigration(iface, bucket);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_202);
            throw;
        }
        return;
    }

    public void CompleteTitleMigration(string iface, uint titleId, uint bucket)
    {
        try
        {
            Config.CompleteTitleMigration(iface, titleId, bucket);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_203);
            throw;
        }
        return;
    }

    public string[] GetVirtualInterfaceListBySite(Site site)
    {
        string[] virtualInterface = null;
        
        try
        {
            virtualInterface = Config.GetVirtualInterfaceListBySite(site);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_204);
            throw;
        }

        return virtualInterface;
    }

    public string[] GetVirtualInterfaceListBySite(int siteId)
    {
        string[] virtualInterface = null;
        
        try
        {
            virtualInterface = Config.GetVirtualInterfaceListBySite(siteId);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_205);
            throw;
        }

        return virtualInterface;
    }

    public IVirtualInterfaceInfo[] GetVirtualInterfaceInfoBySite(Site site)
    {        
        IVirtualInterfaceInfo[] virtualInterfaceInfo = null;
        
        try
        {
            virtualInterfaceInfo = Config.GetVirtualInterfaceInfoBySite(site);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_206);
            throw;
        }

        return virtualInterfaceInfo;
    }

    public IVirtualInterfaceInfo[] GetVirtualInterfaceInfoBySite(int siteId)
    {
        IVirtualInterfaceInfo[] virtualInterfaceInfo = null;
        
        try
        {
            virtualInterfaceInfo = Config.GetVirtualInterfaceInfoBySite(siteId);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_207);
            throw;
        }

        return virtualInterfaceInfo;
    }

    public IVirtualInterfaceInfo GetVirtualInterface(string virtualInterface)
    {
        IVirtualInterfaceInfo virtualInterfaceInfo = null;
        
        try
        {
             virtualInterfaceInfo = Config.GetVirtualInterface(virtualInterface);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_208);
            throw;
        }

        return virtualInterfaceInfo;
    }

    public IVirtualInterfaceInfo GetVirtualInterface(string virtualInterface, Site site)
    {
        IVirtualInterfaceInfo virtualInterfaceInfo = null;
        
        try
        {
             virtualInterfaceInfo = Config.GetVirtualInterface(virtualInterface, site);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_209);
            throw;
        }

        return virtualInterfaceInfo;
    }

    public IVirtualInterfaceInfo GetVirtualInterface(string virtualInterface, int siteId)
    {
        IVirtualInterfaceInfo virtualInterfaceInfo = null;
        
        try
        {
             virtualInterfaceInfo = Config.GetVirtualInterface(virtualInterface, siteId);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_210);
            throw;
        }

        return virtualInterfaceInfo;
    }

    public bool GetBoolSetting(string setting)
    {
        bool    value;
        
        try
        {
            value = Config.GetBoolSetting(setting);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_211);
            throw;
        }

        return value;
    }

    public int GetIntSetting(string setting)
    {
        int    value;
        
        try
        {
            value = Config.GetIntSetting(setting);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_212);
            throw;
        }

        return value;
    }

    public uint GetUIntSetting(string setting)
    {
        uint    value;
        
        try
        {
            value = Config.GetUIntSetting(setting);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_213);
            throw;
        }

        return value;
    }

    public uint GetUIntIpSetting(string setting)
    {
        uint    value;
        
        try
        {
            value = Config.GetUIntIpSetting(setting);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_214);
            throw;
        }

        return value;
    }

    public long GetLongSetting(string setting)
    {
        long    value;
        
        try
        {
            value = Config.GetLongSetting(setting);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_215);
            throw;
        }

        return value;
    }

    public ulong GetULongSetting(string setting)
    {
        ulong    value;
        
        try
        {
            value = Config.GetULongSetting(setting);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_216);
            throw;
        }

        return value;
    }
   
    public double GetDoubleSetting(string setting)
    {
        double    value;
        
        try
        {
            value = Config.GetDoubleSetting(setting);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_217);
            throw;
        }

        return value;
    }
    
    public string GetSetting(string setting)
    {
        string    value;
        
        try
        {
            value = Config.GetSetting(setting);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_218);
            throw;
        }

        return value;
    }

    public void RegisterDynamicSetting(string setting)
    {
        try
        {
            Config.RegisterDynamicSetting(setting);
        }
        catch(Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_REGISTER_DYNAMIC_SETTING_FAILURE);
        }
    }

    public string[] GetMultiSetting(string multiSetting)
    {
        string[] values;
        
        try
        {
            values = Config.GetMultiSetting(multiSetting);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_221);
            throw;
        }

        return values;
    }

    public string[] GetMultiSetting(
        string component,
        string multiSetting)
    {
        string[] values;
        
        try
        {
            values = Config.GetMultiSetting(multiSetting, component);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_222);
            throw;
        }

        return values;
    }

    public string[] GetMultiSetting(
        string environment,
        int siteId,
        string server,
        string component,
        string multiSetting)
    {
        string[] values;

        try
        {
            values = Config.GetMultiSetting(
                environment,
                siteId,
                server,
                component,
                multiSetting);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_223);
            throw;
        }

        return values;
    }

    public string[] GetInstallUnitListByServer(
        string server)
    {
        string[] installUnitList = null;
        
        try
        {
            installUnitList = Config.GetInstallUnitListByServer(server);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_224);
            throw;
        }

        return installUnitList;
    }

    public IInstallUnitInfo[] GetInstallUnitInfoByServer(
        string server)
    {
        IInstallUnitInfo[] installUnitInfo = null;
        
        try
        {
            installUnitInfo = Config.GetInstallUnitInfoByServer(server);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_225);
            throw;
        }

        return installUnitInfo;
    }

    public string[] GetInstallUnitListByServer(
        string environment,
        string server)
    {
        string[] installUnitList = null;
        
        try
        {
            installUnitList = Config.GetInstallUnitListByServer(environment, server);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_226);
            throw;
        }

        return installUnitList;
    }

    public IInstallUnitInfo[] GetInstallUnitInfoByServer(
        string environment,
        string server)
    {
        IInstallUnitInfo[] installUnitInfo = null;
        
        try
        {
            installUnitInfo = Config.GetInstallUnitInfoByServer(environment, server);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_227);
            throw;
        }

        return installUnitInfo;
    }

    public IInstallUnitInfo GetInstallUnit(string installUnit)
    {
        IInstallUnitInfo installUnitInfo = null;
        
        try
        {
            installUnitInfo = Config.GetInstallUnit(installUnit);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_228);
            throw;
        }

        return installUnitInfo;
    }

    public string[] GetComponentListByServer(
        string server)
    {
        string[] componentList = null;
        
        try
        {
            componentList = Config.GetComponentListByServer(server);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_229);
            throw;
        }

        return componentList;
    }

    public IComponentInfo[] GetComponentInfoByServer(
        string server)
    {
        IComponentInfo[] componentInfo = null;
        
        try
        {
            componentInfo = Config.GetComponentInfoByServer(server);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_230);
            throw;
        }

        return componentInfo;
    }

    public string[] GetComponentListByServer(
        string environment,
        string server)
    {
        string[] componentList = null;
        
        try
        {
            componentList = Config.GetComponentListByServer(environment, server);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_231);
            throw;
        }

        return componentList;
    }

    public IComponentInfo[] GetComponentInfoByServer(
        string environment,
        string server)
    {
        IComponentInfo[] componentInfo = null;
        
        try
        {
            componentInfo = Config.GetComponentInfoByServer(environment, server);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_232);
            throw;
        }

        return componentInfo;
    }

    public IComponentInfo GetComponent(string component)
    {
        IComponentInfo componentInfo = null;
        
        try
        {
            componentInfo = Config.GetComponent(component);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_233);
            throw;
        }

        return componentInfo;
    }

    public string[] GetInterfaceListByServer(
        string server)
    {
        string[] interfaceList = null;
        
        try
        {
            interfaceList = Config.GetInterfaceListByServer(server);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_234);
            throw;
        }

        return interfaceList;
    }

    public IInterfaceInfo[] GetInterfaceInfoByServer(
        string server)
    {
        IInterfaceInfo[] interfaceInfoList = null;
        
        try
        {
            interfaceInfoList = Config.GetInterfaceInfoByServer(server);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_235);
            throw;
        }

        return interfaceInfoList;
    }

    public string[] GetInterfaceListByServer(
        string environment,
        string server)
    {
        string[] iface = null;
        
        try
        {
            iface = Config.GetInterfaceListByServer(environment, server);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_236);
            throw;
        }

        return iface;
    }

    public IInterfaceInfo[] GetInterfaceInfoByServer(
        string environment,
        string server)
    {
        IInterfaceInfo[] interfaceInfoList = null;
        
        try
        {
            interfaceInfoList = Config.GetInterfaceInfoByServer(environment, server);
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_237);
            throw;
        }

        return interfaceInfoList;
    }

    public void DiscardCachedValues()
    {
        try
        {
            Config.DiscardCachedValues();
        }
        catch (Exception e)
        {
            Config.LogNtEvent(Config.ComponentName, e, e.StackTrace, ConfigEvent.Id.COMMON_CONFIG_238);
            throw;
        }
    }
}

} // end namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\config\ConfigUtil.cs ===
using System;
using System.Collections;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Xml;

namespace xonline.common.config
{
    [ComVisible(false)]
    public static class ConfigUtil
    {
        public static uint IpAddressToDword( IPAddress ip )
        {
            byte[] addr = ip.GetAddressBytes();
            return ((uint)addr[3]) + ((uint)addr[2] << 8) + ((uint)addr[1] << 16) + ((uint)addr[0] << 24);
        }

        public static string UodbWebstoreApp
        {
            get
            {
                IVirtualInterfaceInfo vInterfaceInfo = Config.GetVirtualInterface(VirtualInterface.uodb, Config.SiteId);

                return vInterfaceInfo.WebstoreApp;
            }
        }

        public static string SecMachineHistoryWebstoreApp
        {
           get
           {
               IVirtualInterfaceInfo vInterfaceInfo = Config.GetVirtualInterface(VirtualInterface.secmachinehistory, Config.SiteId);
               return vInterfaceInfo.WebstoreApp;
           }
        }

        public static string SecUserHistoryWebstoreApp
        {
           get
           {
               IVirtualInterfaceInfo vInterfaceInfo = Config.GetVirtualInterface(VirtualInterface.secuserhistory, Config.SiteId);
               return vInterfaceInfo.WebstoreApp;
           }
        }

        public static string SecDbWebstoreApp
        {
           get
           {
               IVirtualInterfaceInfo vInterfaceInfo = Config.GetVirtualInterface(VirtualInterface.secdb, Config.SiteId);
               return vInterfaceInfo.WebstoreApp;
           }
        }

        public static string TokendbWebstoreApp
        {
            get
            {
                IVirtualInterfaceInfo vInterfaceInfo = Config.GetVirtualInterface(VirtualInterface.tokendb, Config.SiteId);

                return vInterfaceInfo.WebstoreApp;
            }
        }

        public static string UserCommercedbWebstoreApp
        {
            get
            {
                IVirtualInterfaceInfo vInterfaceInfo = Config.GetVirtualInterface(VirtualInterface.usercommercedb, Config.SiteId);

                return vInterfaceInfo.WebstoreApp;
            }
        }

        public static string EventSysDbWebstoreApp
        {
            get
            {
                IVirtualInterfaceInfo vInterfaceInfo = Config.GetVirtualInterface(VirtualInterface.eventsysdb, Config.SiteId);

                return vInterfaceInfo.WebstoreApp;
            }
        }

        public static string NpdbWebstoreApp
        {
            get
            {
                IVirtualInterfaceInfo vInterfaceInfo = Config.GetVirtualInterface(VirtualInterface.npdb, Config.SiteId);

                return vInterfaceInfo.WebstoreApp;
            }
        }

        public static string GetWebstoreApp(string viface)
        {
            IVirtualInterfaceInfo vInterfaceInfo = Config.GetVirtualInterface(viface, Config.SiteId);
            return vInterfaceInfo.WebstoreApp;
        }


        public static string FECatalogDBXboxConnectionString
        {
            get
            {
                IVirtualInterfaceInfo fexbox = Config.GetVirtualInterface(VirtualInterface.fecatalogdbxbox);
                return fexbox.SqlConnectionString;
            }
        }

        public static IVirtualInterfaceInfo FECatalogDBZuneVirtualInterfaceInfo
        {
            get
            {
                string virtualInterfaceName = Config.GetSetting(Setting.catalog_activeFECatalogDBZuneVirtualInterface);

                try
                {
                    IVirtualInterfaceInfo fezune = Config.GetVirtualInterface(virtualInterfaceName);
                    return fezune;
                }
                catch (ApplicationException e)
                {
                    throw new ApplicationException(string.Format(
                        "There was a problem loading the FECatalogDBZune virtual interface '{0}' from the " +
                        "catalog_activeFECatalogDBZuneVirtualInterface setting.  Have the Zune NPDB-upgrade scripts " +
                        "been run in this environment?\n", virtualInterfaceName), e);
                }
            }
        }

        public static IVirtualInterfaceInfo FECatalogDBZuneAppsVirtualInterfaceInfo
        {
            get
            {                
                string virtualInterfaceName = Config.GetSetting(Setting.zune_dvi_FECatalogDBZuneApps_active);

                try
                {
                    IVirtualInterfaceInfo fezune = Config.GetVirtualInterface(virtualInterfaceName);
                    return fezune;
                }
                catch (ApplicationException e)
                {
                    throw new ApplicationException(string.Format(
                        "There was a problem loading the FECatalogDBZuneApps virtual interface '{0}' from the " +
                        "zune_dvi_FECatalogDBZuneApps_active setting.  Have the Zune NPDB-upgrade scripts " +
                        "been run in this environment?\n", virtualInterfaceName), e);
                }
            }
        }

        public static string FECatalogDBZuneConnectionString
        {
            get
            {
                IVirtualInterfaceInfo fezune = FECatalogDBZuneVirtualInterfaceInfo;
                return fezune.SqlConnectionString;
            }
        }

        public static IVirtualInterfaceInfo FECatalogDBSearchVirtualInterfaceInfo
        {
            get
            {
                string virtualInterfaceName = Config.GetSetting(Setting.catalog_activeFECatalogDBSearchVirtualInterface);
                try
                {
                    IVirtualInterfaceInfo feSearch = Config.GetVirtualInterface(virtualInterfaceName);
                    return feSearch;
                }
                catch (ApplicationException e)
                {
                    throw new ApplicationException(string.Format(
                        "There was a problem loading the FECatalogDBSearch virtual interface '{0}' from the " +
                        "catalog_activeFECatalogDBSearchVirtualInterface setting.  Have the Zune NPDB-upgrade scripts " +
                        "been run in this environment?\n", virtualInterfaceName), e);
                }
            }
        }

        public static string FECatalogDBSearchConnectionString
        {
            get
            {
                IVirtualInterfaceInfo feSearch = FECatalogDBSearchVirtualInterfaceInfo;
                return feSearch.SqlConnectionString;
            }
        }

        public static string NpdbConnectionString
        {
            get
            {
                return Config.NpdbConnectionString;
            }
        }

        public static string WebdbConnectionString
        {
            get
            {
                IInterfaceInfo webdb = Config.GetSingleInterface(Interface.webdb);
                return webdb.SqlConnectionString;
            }
        }

        public static string ToolsdbConnectionString
        {
            get
            {
                IInterfaceInfo toolsdb = Config.GetSingleInterface(Interface.toolsdb);
                return toolsdb.SqlConnectionString;
            }
        }

        //
        // Web services
        //
        public static string AlertsWebServiceURL
        {
            get
            {
                IVirtualInterfaceInfo wcalerts = Config.GetVirtualInterface(VirtualInterface.wcalerts, 1);
                return string.Format("http://{0}:{1}/alerts/alerts.asmx", wcalerts.IPAddressString, wcalerts.Port);
            }
        }

        public static string QueryWebServiceURL
        {
            get
            {
                IVirtualInterfaceInfo wcquery = Config.GetVirtualInterface(VirtualInterface.wcquery, 1);
                return string.Format("http://{0}:{1}/query/query.asmx", wcquery.IPAddressString, wcquery.Port);
            }
        }

        public static string PresenceWebServiceURL
        {
            get
            {
                IVirtualInterfaceInfo wcpresence = Config.GetVirtualInterface(VirtualInterface.wcpresence, 1);
                return string.Format("http://{0}:{1}/presence/presence.asmx", wcpresence.IPAddressString, wcpresence.Port);
            }
        }

        public static string GetUserCommerceWebstoreApp()
        {
            return ConfigUtil.UserCommercedbWebstoreApp;
        }

        public static string GetParams(string[,] parameters)
        {
            string str = "";

            for (int n = 0; n < parameters.GetLength(0); n++)
            {
                if (String.IsNullOrEmpty(parameters[n,0]))
                {
                    continue;
                }
                str = String.Concat(
                    str,
                    parameters[n,0],
                    "=",
                    parameters[n,1],
                    ";"
                    );
            }
            return str;
        }

        public static string[,] GetParams(string str)
        {
            if ( str == null )
            {
                return null;
            }

            string[] pairs = str.Split( new char[] { ';' } );
            pairs = Array.FindAll<string>(pairs, delegate(string s) {
                 return !String.IsNullOrEmpty(s);
            });
            string[] param;
            string[,] paramList = new string[pairs.Length, 2];
            char[] pairDelim = new char[] { '=' };

            for (int n = 0; n < pairs.Length; n++)
            {
                param = pairs[n].Split( pairDelim );

                if (param.Length != 2)
                {
// TODO: to call Xom.NtEvent now would require bringing a dependency on
// xonline.server.mgmt.mc into components that don't have that now.
// Instead of logging and continuing, this should really throw an exception
// with an event id of XEvent.Id.COMMON_CONFIG_239.  I don't want to change the
// behavior of this now with all of the config churn but once everything has
// stabilized and there is a 1-box environment, I will change this.
                    return null;
                }

                paramList[n,0] = param[0].ToLower();
                paramList[n,1] = param[1];
            }

            return paramList;
        }

        public static string[,] GetParams(string str, string defaults)
        {
            bool found;
            int  index;
            int  m;
            int  n;
            int  total;

            if ( defaults == null )
            {
                return GetParams(str);
            }
            if ( str == null)
            {
                return GetParams(defaults);
            }

            string[,] pairs = GetParams(str);
            string[,] defaultPairs = GetParams(defaults);

            //
            // We have to store at least the original number of entries
            //
            total = pairs.GetLength(0);

            //
            // Count the number of pairs we will need for the final result
            //
            for (n = 0; n < defaultPairs.GetLength(0); n++)
            {
                found = false;

                for (m = 0; m < pairs.GetLength(0); m++)
                {
                    if (pairs[m,0] == defaultPairs[n,0])
                    {
                        found = true;
                        break;
                    }
                }

                if (found == false)
                {
                    total++;
                }
            }

            //
            // Build a final pairs that can hold the merged set
            //
            string[,] final = new string[total, 2];

            //
            // Copy in the original values
            //
            for (n = 0; n < pairs.GetLength(0); n++)
            {
                final[n,0] = pairs[n,0];
                final[n,1] = pairs[n,1];
            }

            //
            // Copy in the missing entries
            //
            for (index = pairs.GetLength(0), n = 0; n < defaultPairs.GetLength(0); n++)
            {
                found = false;

                for (m = 0; m < pairs.GetLength(0); m++)
                {
                    if (pairs[m,0] == defaultPairs[n,0])
                    {
                        found = true;
                        break;
                    }
                }

                if (found == false)
                {
                    final[index,0] = defaultPairs[n,0];
                    final[index,1] = defaultPairs[n,1];
                    index++;
                }
            }

            return final;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\config\IComponentInfo.cs ===
using System;
using System.Runtime.InteropServices;

namespace xonline.common.config
{

[ComVisible(true)]
[Guid("058EE87C-C7AD-4342-A769-B99A055F1DC4")]
[InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
public interface IComponentInfo
{
    string Component
    {
        get;
    }

    string Executable
    {
        get;
    }

    Installer Installer
    {
        get;
    }

    string Username
    {
        get;
    }

    string Password
    {
        get;
    }

    string Info1
    {
        get;
    }

    string Info2
    {
        get;
    }

}

} // end namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\config\IBucketServer.cs ===
using System;
using System.Runtime.InteropServices;

namespace xonline.common.config
{

[ComVisible(true)]
[Guid("FFF88330-DB97-428A-B61D-B857F4FE30CB")]
[InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
public interface IBucketServer
{
    IInterfaceInfo CurrentServer { get; }
    IInterfaceInfo NextServer  { get; }
    string CurrentServerName { get; }
    string NextServerName  { get; }
    DateTime NextServerStart  { get; }
    string Info1 { get; }
    string Info2 { get; }
    string Info3 { get; }
    string Info4 { get; }

    string ToString();
}

} // end namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\config\FileSettingsReader.cs ===
﻿using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Runtime.InteropServices;
using System.Xml;
using System.Xml.XPath;

namespace xonline.common.config
{
    [ComVisible(false)]
    public class FileSettingsReader
    {
        private const string XPathPrefix = "/configuration/XblConfig/";

        private const string UnspecifiedValue = "##_NOTHING_SPECIFIED_##";

        private readonly Regex Base64Regex = new Regex("^base64\\((.*)\\)$");

        private readonly XPathNavigator navigator;
        
        public FileSettingsReader(string filename)
        {
            if (filename == null)
            {
                throw new ArgumentNullException("filename");
            }

            XPathDocument document = new XPathDocument(filename);
            this.navigator = document.CreateNavigator();
        }
        
        private FileSettingsReader(XPathDocument document)
        {
            if (document == null)
            {
                throw new ArgumentNullException("document");
            }
            
            this.navigator = document.CreateNavigator();
        }
        
        public static FileSettingsReader TryOpen(params string[] filenames)
        {
            FileSettingsReader reader = null;
            
            foreach (string filename in filenames)
            {
                try
                {
                    XPathDocument document = new XPathDocument(filename);
                    reader = new FileSettingsReader(document);
                    break;
                }
                catch (FileNotFoundException)
                {
                }
                catch (DirectoryNotFoundException)
                {
                }
            }
            
            return reader;
        }

        public string GetSetting(string setting)
        {
            string value = this.GetSettingInternal(setting);

            if (value != null)
            {
                var match = Base64Regex.Match(value);
                if (match.Success)
                {
                    byte[] blob = Convert.FromBase64String(match.Groups[1].Value);
                    value = Encoding.UTF8.GetString(blob);
                }
            }

            return value;
        }

        public string[] GetMultiSetting(string multiSetting)
        {
            if (multiSetting == null)
            {
                throw new ArgumentNullException("multiSetting");
            }

            var expression = string.Format("{0}{1}", XPathPrefix, multiSetting);
            var node = this.navigator.SelectSingleNode(expression);
            
            if (node == null)
            {
                return null;
            }
            
            var nodes = node.Select("string");
            var values = new string[nodes.Count];

            for (int i = 0; nodes.MoveNext(); ++i)
            {
                var match = Base64Regex.Match(nodes.Current.Value);
                if (match.Success)
                {
                    byte[] blob = Convert.FromBase64String(match.Groups[1].Value);
                    values[i] = Encoding.UTF8.GetString(blob);
                }
                else
                {
                    values[i] = nodes.Current.Value;
                }
            }

            return values;
        }

        public byte[] GetBlobSetting(string blobSetting)
        {
            string value = this.GetSettingInternal(blobSetting);

            if (value == null)
            {
                return null;
            }

            var match = Base64Regex.Match(value);
            if (!match.Success)
            {
                return null;
            }

            return Convert.FromBase64String(match.Groups[1].Value);
        }

        private string GetSettingInternal(string setting)
        {
            if (setting == null)
            {
                throw new ArgumentNullException("setting");
            }

            var expression = string.Format("{0}{1}", XPathPrefix, setting);
            var node = this.navigator.SelectSingleNode(expression);

            if (node == null)
            {
                return null;
            }

            if (string.Compare(node.Value, UnspecifiedValue, StringComparison.Ordinal) == 0)
            {
                return null;
            }

            return node.Value;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\config\IInstallUnitInfo.cs ===
using System;
using System.Runtime.InteropServices;

namespace xonline.common.config
{

[ComVisible(true)]
[Guid("497FC85F-6415-4C02-9E13-E6AC77B80D52")]
[InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
public interface IInstallUnitInfo
{
    string InstallUnit
    {
        get;
    }

    string Info1
    {
        get;
    }

    string Info2
    {
        get;
    }

    string Info3
    {
        get;
    }

    string Info4
    {
        get;
    }
}

} // end namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\config\InstallUnitInfo.cs ===
using System;
using System.Runtime.InteropServices;

namespace xonline.common.config
{

[ComVisible(false)]
public class InstallUnitInfo : IInstallUnitInfo
{
    private string _installUnit = "";
    private string _info1 = null;
    private string _info2 = null;
    private string _info3 = null;
    private string _info4 = null;

    public string InstallUnit
    {
        get { return _installUnit; }
        set { _installUnit = value; }
    }

    public string Info1
    {
        get { return _info1; }
        set { _info1 = value; }
    }

    public string Info2
    {
        get { return _info2; }
        set { _info2 = value; }
    }

    public string Info3
    {
        get { return _info3; }
        set { _info3 = value; }
    }

    public string Info4
    {
        get { return _info4; }
        set { _info4 = value; }
    }
}

} // end namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\config\IConfig.cs ===
using System;
using System.Runtime.InteropServices;

namespace xonline.common.config
{

[ComVisible(true)]
[Guid("EF8B1B06-3D19-4755-86E6-4F1B3B7A7100")]
[InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
public interface IServerListChangeEventArgs
{
    string Environment { get; }
    string Interface { get; }
    string[] ValueOld { get; }
    string[] ValueNew { get; }
}

[ComVisible(true)]
[Guid("EF8B1B06-3D19-4755-86E6-4F1B3B7A7101")]
[InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
public interface IInterfaceChangeEventArgs
{
    string Environment { get; }
    string Server { get; }
    string Interface { get; }
    IInterfaceInfo ValueOld { get; }
    IInterfaceInfo ValueNew { get; }
}

[ComVisible(true)]
[Guid("EF8B1B06-3D19-4755-86E6-4F1B3B7A7102")]
[InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
public interface IInterfaceBucketChangeEventArgs
{
    string Environment { get; }
    uint TitleId { get; }
    uint Bucket { get; }
    string Interface { get; }
    IBucketServer ValueOld { get; }
    IBucketServer ValueNew { get; }
}

[ComVisible(true)]
[Guid("EF8B1B06-3D19-4755-86E6-4F1B3B7A7103")]
[InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
public interface IVirtualInterfaceChangeEventArgs
{
    string Environment { get; }
    int SiteId { get; }
    string VirtualInterface { get; }
    IVirtualInterfaceInfo ValueOld { get; }
    IVirtualInterfaceInfo ValueNew { get; }
}

[ComVisible(true)]
[Guid("EF8B1B06-3D19-4755-86E6-4F1B3B7A7104")]
[InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
public interface IVirtualInterfaceListChangeEventArgs
{
    string Environment { get; }
    int SiteId { get; }
    string[] ValueOld { get; }
    string[] ValueNew { get; }
}

[ComVisible(true)]
[Guid("EF8B1B06-3D19-4755-86E6-4F1B3B7A7105")]
[InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
public interface ISettingChangeEventArgs
{
    string Environment { get; }
    int SiteId { get; }
    string Server { get; }
    string Component { get; }
    string Setting { get; }
    string ValueOld { get; }
    string ValueNew { get; }
}

[ComVisible(true)]
[Guid("EF8B1B06-3D19-4755-86E6-4F1B3B7A7106")]
[InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
public interface IMultiSettingChangeEventArgs
{
    string Environment { get; }
    int SiteId { get; }
    string Server { get; }
    string Component { get; }
    string MultiSetting { get; }
    string[] ValueOld { get; }
    string[] ValueNew { get; }
}

[ComVisible(true)]
[Guid("EF8B1B06-3D19-4755-86E6-4F1B3B7A7107")]
[InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
public interface IConfigListener
{
    void ServerListChange(IServerListChangeEventArgs e);
    void InterfaceChange(IInterfaceChangeEventArgs e);
    void InterfaceBucketChange(IInterfaceBucketChangeEventArgs e);
    void VirtualInterfaceChange(IVirtualInterfaceChangeEventArgs e);
    void VirtualInterfaceListChange(IVirtualInterfaceListChangeEventArgs e);
    void SettingChange(ISettingChangeEventArgs e);
    void MultiSettingChange(IMultiSettingChangeEventArgs e);
    void GameConfigChange();
    void XdelaySettingsChange();
    void XrlMappingsChange();
}

[ComVisible(true)]
[Guid("EF8B1B06-3D19-4755-86E6-4F1B3B7A7108")]
[InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
public interface IConfig
{
    IConfigListener ConfigListener { set; }

    // C++ has no easy way to translate from an enum value to
    // the corresponding string the way C# does, so I'm providing
    // these utility functions in this interface so C++ code
    // can ask the C# code to do the translation. This can be
    // useful for event and log text.
    string InstallUnitToString(string installUnit);
    string ComponentToString(string component);
    string InterfaceToString(string iface);
    string VirtualInterfaceToString(string viface);
    string SettingToString(string setting);
    string MultiSettingToString(string multiSetting);

    string InstallerToString(Installer installer);
    string SiteToString(Site site);

    string Environment { get; }
    int SiteId { get; }
    string Server { get; }
    string ServerSet_TestOnly_DoNotUse { set; }
    string Component { get; }
    string ComponentName { get; set; }
    int ReportMessageComponentId { get; }
    string ReportMessageCleanserVirtualInterface { get; }

    void AddReportMessageComponentIdMapping(string component, int reportMessageId);

    void CheckForUpdates();

    void GetServerInfo(string server, out int siteId);
    string[] GetServerListByInterface(string iface);
    IInterfaceInfo GetInterface(string server, string iface);
    IInterfaceInfo GetInterface(string iface);
    IBucketServer GetBucketServer(string iface, uint bucket);
    IBucketServer GetTitleBucketServer(string iface, uint titleId, uint bucket);
    uint GetBucketNum(string iface, ulong hashValue);
    uint GetBucketCount(string iface);
    void CompleteMigration(string iface, uint bucket);
    void CompleteTitleMigration(string iface, uint titleId, uint bucket);
    IInterfaceInfo GetSingleInterface(string iface);
    string[]  GetVirtualInterfaceListBySite(Site site);
    string[]  GetVirtualInterfaceListBySite(int siteId);
    IVirtualInterfaceInfo[] GetVirtualInterfaceInfoBySite(Site site);
    IVirtualInterfaceInfo[] GetVirtualInterfaceInfoBySite(int siteId);
    IVirtualInterfaceInfo GetVirtualInterface(string virtualInterface, int siteId);
    bool GetBoolSetting(string setting);
    int GetIntSetting(string setting);
    uint GetUIntSetting(string setting);
    uint GetUIntIpSetting(string setting);
    long GetLongSetting(string setting);
    ulong GetULongSetting(string setting);
    double GetDoubleSetting(string setting);
    string GetSetting(string setting);    
    string[] GetMultiSetting(string multiSetting);
    string[] GetMultiSetting(string component, string multiSetting);
    string[] GetMultiSetting(
        string environment,
        int siteId,
        string server,
        string component,
        string multiSetting);
    string[] GetInstallUnitListByServer(string server);
    string[] GetInstallUnitListByServer(string environment, string server);
    IInstallUnitInfo[] GetInstallUnitInfoByServer(string server);
    IInstallUnitInfo[] GetInstallUnitInfoByServer(string environment, string server);
    IInstallUnitInfo GetInstallUnit(string installUnit);
    string[] GetComponentListByServer(string server);
    string[] GetComponentListByServer(string environment, string server);
    IComponentInfo[] GetComponentInfoByServer(string server);
    IComponentInfo[] GetComponentInfoByServer(string environment, string server);
    IComponentInfo GetComponent(string component);
    string[]  GetInterfaceListByServer(string server);
    string[]  GetInterfaceListByServer(string environment, string server);
    IInterfaceInfo[] GetInterfaceInfoByServer(string server);
    IInterfaceInfo[] GetInterfaceInfoByServer(string environment, string server);
    void DiscardCachedValues();
    string NpdbDatabase { get; }
    string NpdbServer { get; }
    string NpdbConnectionString { get; }

    void RegisterDynamicSetting(string setting);

    void VetoInterfaceBucketChange();
    void VetoInterfaceChange();
    void VetoMultiSettingChange();
    void VetoServerListChange();
    void VetoSettingChange();
    void VetoVirtualInterfaceChange();
    void VetoVirtualInterfaceListChange();
}

} // end namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\config\IInterfaceInfo.cs ===
using System;
using System.Net;
using System.Runtime.InteropServices;

namespace xonline.common.config
{
[ComVisible(true)]
[Guid("D8FE4B71-D23C-444A-B044-CC64AE4B5337")]
[InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
public interface IInterfaceInfo
{
    string Interface
    {
        get;
    }

    string Protocol
    {
        get;
    }

    IPAddress IPAddress
    {
        get;
    }

    string IPAddressString
    {
        get;
    }

    uint IPAddressDword
    {
        get;
    }

    IPAddress IPNetMask
    {
        get;
    }

    string IPNetMaskString
    {
        get;
    }

    uint IPNetMaskDword
    {
        get;
    }

    IPAddress IPDefaultGateway
    {
        get;
    }

    string IPDefaultGatewayString
    {
        get;
    }

    uint IPDefaultGatewayDword
    {
        get;
    }

    int Port
    {
        get;
    }

    int PortEnd
    {
        get;
    }

    string VSite
    {
        get;
    }

    int VSiteId
    {
        get;
    }

    string VDir
    {
        get;
    }

    string DBName
    {
        get;
    }

    string Sharename
    {
        get;
    }

    int Timeout
    {
        get;
    }

    int ServiceId
    {
        get;
    }

    string ServiceName
    {
        get;
    }

    string Mac
    {
        get;
    }

    IPAddress SgIpAddressBegin
    {
        get;
    }

    string SgIpAddressBeginString
    {
        get;
    }

    uint SgIpAddressBeginDword
    {
        get;
    }

    IPAddress SgIpAddressEnd
    {
        get;
    }

    string SgIpAddressEndString
    {
        get;
    }

    uint SgIpAddressEndDword
    {
        get;
    }

    int SgPortBegin
    {
        get;
    }

    int SgPortEnd
    {
        get;
    }

    bool NeedSGInfo
    {
        get;
    }

    IPAddress WiretapIpAddress
    {
        get;
    }

    string WiretapIpAddressString
    {
        get;
    }

    uint WiretapIpAddressDword
    {
        get;
    }

    bool NicDisabled
    {
        get;
    }

    string Username
    {
        get;
    }

    string Password
    {
        get;
    }

    string Info1
    {
        get;
    }

    string Info2
    {
        get;
    }

    string ServerName
    {
        get;
    }

    [ComVisible(false)]
    int? MinConnectionPoolSize
    {
        get;
    }

    [ComVisible(false)]
    int? MaxConnectionPoolSize
    {
        get;
    }

    [ComVisible(false)]
    int? LoadBalanceTimeout
    {
        get;
    }

    [ComVisible(false)]
    int? ConnectionTimeout
    {
        get;
    }

    Uri Url
    {
        get;
    }

    string SqlConnectionString
    {
        get;
    }

    string GetNotificationUrl(string notification);

    string ToString();
}

} // end namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\config\InterfaceInfo.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Net;
using System.Runtime.InteropServices;

namespace xonline.common.config
{

[ComVisible(false)]
public class InterfaceInfo : ConfigEventLogger, IInterfaceInfo
{
    private string _interface = xonline.common.config.Interface.None;
    private string _protocol = null;
    private IPAddress _ipAddress = null;
    private IPAddress _ipNetMask = null;
    private IPAddress _ipDefaultGateway = null;
    private int _port = 0;
    private int _portEnd = 0;
    private string _vsite = null;
    private int _vsiteid = 0;
    private string _vdir = null;
    private string _dbname = null;
    private string _sharename = null;
    private int _timeout = 0;
    private int _serviceId = 0;
    private string _serviceName = null;
    private string _mac = null;
    private IPAddress _sgIpAddressBegin = null;
    private IPAddress _sgIpAddressEnd = null;
    private int _sgPortBegin = 0;
    private int _sgPortEnd = 0;
    private bool _needSGInfo = false;
    private IPAddress _wiretapIpAddress = null;
    private bool _nicDisabled = false;
    private string _username = null;
    private string _password = null;
    private string _info1 = null;
    private string _info2 = null;
    private string _serverName = null;
    private int? _minConnectionPoolSize = null;
    private int? _maxConnectionPoolSize = null;
    private int? _loadBalanceTimeout = null;
    private int? _connectionTimeout = null;
    private Dictionary<string,string> _notificationUrls = null;
    private object _notificationLock = new object();

    public override string ToString()
    {
        return "{{"
            +_interface.ToString()+","
            +(_protocol == null ? "<null>" : _protocol)+","
            +(_ipAddress== null ? "<null>" : _ipAddress.ToString())+","
            +(_ipNetMask== null ? "<null>" : _ipNetMask.ToString())+","
            +(_ipDefaultGateway== null ? "<null>" : _ipDefaultGateway.ToString())+","
            +_port.ToString()+","
            +_portEnd.ToString()+","
            +(_vsite== null ? "<null>" : _vsite)+","
            +_vsiteid.ToString()+","
            +(_vdir== null ? "<null>" : _vdir)+","
            +(_dbname== null ? "<null>" : _dbname)+","
            +(_sharename== null ? "<null>" : _sharename)+","
            +_timeout.ToString()+","
            +_serviceId.ToString()+","
            +(_serviceName== null ? "<null>" : _serviceName)+","
            +(_mac== null ? "<null>" : _mac)+","
            +(_sgIpAddressBegin== null ? "<null>" : _sgIpAddressBegin.ToString())+","
            +(_sgIpAddressEnd== null ? "<null>" : _sgIpAddressEnd.ToString())+","
            +_sgPortBegin.ToString()+","
            +_sgPortEnd.ToString()+","
            +_needSGInfo.ToString()+","
            +(_wiretapIpAddress== null ? "<null>" : _wiretapIpAddress.ToString())+","
            +_nicDisabled.ToString()+","
            +(_username== null ? "<null>" : _username)+","
            +(_password== null ? "<null>" : _password)+","
            +(_info1== null ? "<null>" : _info1)+","
            +(_info2== null ? "<null>" : _info2)+","
            +(_serverName== null ? "<null>" : _serverName)+","
            +(_minConnectionPoolSize==null ? "<null>" : _minConnectionPoolSize.ToString())+","
            +(_maxConnectionPoolSize==null ? "<null>" : _maxConnectionPoolSize.ToString())+","
            +(_loadBalanceTimeout==null ? "<null>" : _loadBalanceTimeout.ToString())+","
            +(_connectionTimeout==null ? "<null>" : _connectionTimeout.ToString())+","
            +(_notificationUrls==null ? "<null>" : 
              "[" + string.Join(";", _notificationUrls.Select( u => u.Key + ":" + u.Value ).ToArray() ) +"]")
            +"}}";
    }

    public string Interface
    {
        get { return _interface; }
        set { _interface = value; }
    }

    public string Protocol
    {
        get { return _protocol; }
        set { _protocol = value; }
    }

    public IPAddress IPAddress
    {
        get { return _ipAddress; }
        set { _ipAddress = value; }
    }

    public string IPAddressString
    {
        get { return _ipAddress == null ? null : _ipAddress.ToString(); }
    }

    public uint IPAddressDword
    {
        get { return _ipAddress == null ? 0 : ConfigUtil.IpAddressToDword( _ipAddress ); }
    }

    public IPAddress IPNetMask
    {
        get { return _ipNetMask; }
        set { _ipNetMask = value; }
    }

    public string IPNetMaskString
    {
        get { return _ipNetMask == null ? null : _ipNetMask.ToString(); }
    }

    public uint IPNetMaskDword
    {
        get { return _ipNetMask == null ? 0 : ConfigUtil.IpAddressToDword( _ipNetMask ); }
    }

    public IPAddress IPDefaultGateway
    {
        get { return _ipDefaultGateway; }
        set { _ipDefaultGateway = value; }
    }

    public string IPDefaultGatewayString
    {
        get { return _ipDefaultGateway == null ? null : _ipDefaultGateway.ToString(); }
    }

    public uint IPDefaultGatewayDword
    {
        get { return _ipDefaultGateway == null ? 0 : ConfigUtil.IpAddressToDword( _ipDefaultGateway ); }
    }

    public int Port
    {
        get { return _port; }
        set { _port = value; }
    }

    public int PortEnd
    {
        get { return _portEnd; }
        set { _portEnd = value; }
    }

    public string VSite
    {
        get { return _vsite; }
        set { _vsite = value; }
    }

    public int VSiteId
    {
        get { return _vsiteid; }
        set { _vsiteid = value; }
    }

    public string VDir
    {
        get { return _vdir; }
        set { _vdir = value; }
    }

    public string DBName
    {
        get { return _dbname; }
        set { _dbname = value; }
    }

    public string Sharename
    {
        get { return _sharename; }
        set { _sharename= value; }
    }

    public int Timeout
    {
        get { return (_connectionTimeout ?? _timeout); }
        set { _timeout = value; }
    }

    public int ServiceId
    {
        get { return _serviceId; }
        set { _serviceId = value; }
    }

    public string ServiceName
    {
        get { return _serviceName; }
        set { _serviceName = value; }
    }

    public string Mac
    {
        get { return _mac; }
        set { _mac = value; }
    }

    public IPAddress SgIpAddressBegin
    {
        get { return _sgIpAddressBegin; }
        set { _sgIpAddressBegin = value ; }
    }

    public string SgIpAddressBeginString
    {
        get { return _sgIpAddressBegin == null ? null : _sgIpAddressBegin.ToString(); }
    }

    public uint SgIpAddressBeginDword
    {
        get { return _sgIpAddressBegin == null ? 0 : ConfigUtil.IpAddressToDword( _sgIpAddressBegin ); }
    }

    public IPAddress SgIpAddressEnd
    {
        get { return _sgIpAddressEnd; }
        set { _sgIpAddressEnd = value ; }
    }

    public string SgIpAddressEndString
    {
        get { return _sgIpAddressEnd == null ? null : _sgIpAddressEnd.ToString(); }
    }

    public uint SgIpAddressEndDword
    {
        get { return _sgIpAddressEnd == null ? 0 : ConfigUtil.IpAddressToDword( _sgIpAddressEnd ); }
    }

    public int SgPortBegin
    {
        get { return _sgPortBegin; }
        set { _sgPortBegin = value; }
    }

    public int SgPortEnd
    {
        get { return _sgPortEnd; }
        set { _sgPortEnd = value; }
    }

    public bool NeedSGInfo
    {
        get { return _needSGInfo; }
        set { _needSGInfo = value; }
    }

    public IPAddress WiretapIpAddress
    {
        get { return _wiretapIpAddress; }
        set { _wiretapIpAddress = value ; }
    }

    public string WiretapIpAddressString
    {
        get { return _wiretapIpAddress == null ? null : _wiretapIpAddress.ToString(); }
    }

    public uint WiretapIpAddressDword
    {
        get { return _wiretapIpAddress == null ? 0 : ConfigUtil.IpAddressToDword( _wiretapIpAddress ); }
    }

    public bool NicDisabled
    {
        get { return _nicDisabled; }
        set { _nicDisabled = value; }
    }

    public string Username
    {
        get { return _username; }
        set { _username = value; }
    }

    public string Password
    {
        get { return _password; }
        set { _password = value; }
    }

    public string Info1
    {
        get { return _info1; }
        set { _info1 = value; }
    }

    public string Info2
    {
        get { return _info2; }
        set { _info2 = value; }
    }

    public string ServerName
    {
        get { return _serverName; }
        set { _serverName = value; }
    }

    public int? MinConnectionPoolSize
    {
        get { return _minConnectionPoolSize; }
        set { _minConnectionPoolSize = value; }
    }

    public int? MaxConnectionPoolSize
    {
        get { return _maxConnectionPoolSize; }
        set { _maxConnectionPoolSize = value; }
    }

    public int? LoadBalanceTimeout
    {
        get { return _loadBalanceTimeout; }
        set { _loadBalanceTimeout = value; }
    }

    public int? ConnectionTimeout
    {
        get { return _connectionTimeout; }
        set { _connectionTimeout = value; }
    }

    public Uri Url
    {
        get
        {
            if (Protocol == null || IPAddressString == null)
            {
                return null;
            }

            UriBuilder b = new UriBuilder();
            b.Scheme = Protocol;
            b.Host = IPAddressString;

            // Port == 0 means port was not specified, so leave it out
            // of the Uri
            if (Port != 0)
            {
                b.Port = Port;
            }

            return b.Uri;
        }
    }

    public string GetNotificationUrl(string notification)
    {
        if (_notificationUrls == null || 
            String.IsNullOrEmpty(notification))
        {
            return null;
        }
        notification = notification.ToLower();

        lock( _notificationLock )
        {
            string value = null;

            _notificationUrls.TryGetValue(notification, out value);
            return value;
        }
    }

    public void AddNotificationUrl(string notification, string url)
    {
        if (String.IsNullOrEmpty(notification))
        {
            return;
        }
        notification = notification.ToLower();

        lock( _notificationLock )
        {
            if (_notificationUrls == null)
            {
                _notificationUrls = new Dictionary<string,string>();
            }
            _notificationUrls[notification] = url;
        }
    }

    public string[] NotificationUrls
    {
        get
        {
            lock( _notificationLock )
            {
                if (_notificationUrls == null)
                {
                    return new string[0];
                }
                return _notificationUrls.Keys.ToArray();
            }
        }
    }

    public string SqlConnectionString
    {
        get
        {
            // only makes sense if the protocol is sql
            if (Protocol == null || Protocol != "sql")
            {
                string message = String.Format(
                    "InterfaceInfo.SqlConnectionString: Interface {0} does not have a Protocol of 'sql'.",
                    Interface.ToString());

                ApplicationException ae = new ApplicationException(message);
                LogNtEvent("XblConfig", message + "\r\n\r\n" + System.Environment.StackTrace, ConfigEvent.Id.COMMON_CONFIG_240);
                throw ae;
            }

            // need an IPAddress
            if ((IPAddress == null) || (IPAddress == System.Net.IPAddress.None))
            {
                string message = String.Format(
                    "InterfaceInfo.SqlConnectionString: Interface {0} does not have a valid IP address.",
                    Interface.ToString());

                ApplicationException ae = new ApplicationException(message);
                LogNtEvent("XblConfig", message + "\r\n\r\n" + System.Environment.StackTrace, ConfigEvent.Id.COMMON_CONFIG_241);
                throw ae;
            }

            // need a DBName
            if ((DBName == null) || (DBName.Length == 0))
            {
                string message = String.Format(
                    "InterfaceInfo.SqlConnectionString: Interface {0} does not have a database name specified.",
                    Interface.ToString());

                ApplicationException ae = new ApplicationException(message);
                LogNtEvent("XblConfig", message + "\r\n\r\n" + System.Environment.StackTrace, ConfigEvent.Id.COMMON_CONFIG_242);
                throw ae;
            }

            SqlConnectionStringBuilder  scsb = new SqlConnectionStringBuilder();

            scsb.DataSource = IPAddressString;
            scsb.InitialCatalog = DBName;
            scsb.IntegratedSecurity=true;
            scsb.ApplicationName = Config.ComponentName;

            // Calculate the timeout of the connection. The value in NPDB is
            // stored in millisecs, but seconds is needed for the builder
            scsb.ConnectTimeout = Timeout / 1000;

            // optional fields
            if (_minConnectionPoolSize != null)
            {
                scsb.MinPoolSize = _minConnectionPoolSize.Value;
            }
            if (_maxConnectionPoolSize != null)
            {
                scsb.MaxPoolSize = _maxConnectionPoolSize.Value;
            }
            if (_loadBalanceTimeout != null)
            {
                // Calculate the load balance timeout. The value in NPDB is
                // stored in millisecs, but seconds is needed for the builder
                int loadBalanceTimeout = _loadBalanceTimeout.Value / 1000;

                if (loadBalanceTimeout > 0)
                {
                    scsb.LoadBalanceTimeout = loadBalanceTimeout;
                }
            }

            return scsb.ToString().Replace("Integrated Security=True", "Integrated Security=SSPI");
        }
    }

}

[ComVisible(false)]
public class InterfaceInfoServerComparer : IComparer
{
    public int Compare ( object x, object y )
    {
        InterfaceInfo iiA = x as InterfaceInfo;
        InterfaceInfo iiB = y as InterfaceInfo;

        if( null != iiA && null != iiB )
        {
            return string.Compare( iiA.ServerName, iiB.ServerName );
        }
        else
        {
            throw new ArgumentException();
        }
    }
}

} // end namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\config\ConfigItemClasses.cs ===
// This is a generated file. Please don't modify directly.
//
// This file defines a number of classes which provide a symbolic way to reference instances of configuration
// items (e.g. Interfaces, Settings, etc.). 
//
// It is generated from the private\common\config\configItems.xml file. Please update that file and this
// code will get updated automatically by the build.
//

using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;

namespace xonline.common.config 
{

  

    public class ReportMessageComponentInfo
    {
        public string VirtualInterface;
        public int ComponentID;

        public ReportMessageComponentInfo( int compID, string virtInterface )
        {
            ComponentID = compID;
            VirtualInterface = virtInterface;
        }
    }

    // Components
    [ComVisible(false)]
    public class Component 
    {
  
        public const string aamodule = "aamodule";
        public const string acceleration = "acceleration";
        public const string ALL = "ALL";
        public const string audit = "audit";
        public const string auditdb = "auditdb";
        public const string authsg = "authsg";
        public const string avatardb = "avatardb";
        public const string catalog = "catalog";
        public const string cleanser = "cleanser";
        public const string compplugins = "compplugins";
        public const string ContentIngestionCatalogDB = "ContentIngestionCatalogDB";
        public const string cron = "cron";
        public const string cronlib = "cronlib";
        public const string download = "download";
        public const string eventsdb = "eventsdb";
        public const string eventservice = "eventservice";
        public const string eventsink = "eventsink";
        public const string eventsysdb = "eventsysdb";
        public const string fastEspMarketplaceSearch = "fastEspMarketplaceSearch";
        public const string fbserver = "fbserver";
        public const string fecatalogdbsearch = "fecatalogdbsearch";
        public const string fecatalogdbxbox = "fecatalogdbxbox";
        public const string fecatalogdbzune = "fecatalogdbzune";
        public const string filterdb = "filterdb";
        public const string finbus = "finbus";
        public const string genealogy = "genealogy";
        public const string kdcsvc = "kdcsvc";
        public const string lbsvr = "lbsvr";
        public const string leet_leetwebcommunity_db = "leet_leetwebcommunity_db";
        public const string Lists = "Lists";
        public const string livecache = "livecache";
        public const string LiveConnectDb = "LiveConnectDb";
        public const string liveinfo = "liveinfo";
        public const string livepxy = "livepxy";
        public const string lspfd = "lspfd";
        public const string marketplacecatalog = "marketplacecatalog";
        public const string messagingfd = "messagingfd";
        public const string mixbetamanagement = "mixbetamanagement";
        public const string mixmatch = "mixmatch";
        public const string mixoffermanagement = "mixoffermanagement";
        public const string mixproductmanagement = "mixproductmanagement";
        public const string mixsettingsmanagement = "mixsettingsmanagement";
        public const string mixstats = "mixstats";
        public const string mixstorage = "mixstorage";
        public const string mixsubscriptionfamily = "mixsubscriptionfamily";
        public const string mixtitlemanagement = "mixtitlemanagement";
        public const string mixtokenmanagement = "mixtokenmanagement";
        public const string msgdb = "msgdb";
        public const string NotificationCache = "NotificationCache";
        public const string npdb = "npdb";
        public const string PresenceCache = "PresenceCache";
        public const string ProfileCache = "ProfileCache";
        public const string profileshimfd = "profileshimfd";
        public const string progressshimfd = "progressshimfd";
        public const string provisioning = "provisioning";
        public const string querydb = "querydb";
        public const string querylib = "querylib";
        public const string ratings = "ratings";
        public const string rawcatalogdb = "rawcatalogdb";
        public const string reportarchivedb = "reportarchivedb";
        public const string reportingdb = "reportingdb";
        public const string reportrealtimedb = "reportrealtimedb";
        public const string reportssisdb = "reportssisdb";
        public const string rosetta = "rosetta";
        public const string rufus = "rufus";
        public const string secdb = "secdb";
        public const string secmachinehistory = "secmachinehistory";
        public const string secuserhistory = "secuserhistory";
        public const string serialdb = "serialdb";
        public const string sgsvc = "sgsvc";
        public const string SocialCache = "SocialCache";
        public const string sqlns = "sqlns";
        public const string stfd = "stfd";
        public const string storedb = "storedb";
        public const string stringsvr = "stringsvr";
        public const string sts = "sts";
        public const string svctunnel = "svctunnel";
        public const string testfd = "testfd";
        public const string testfdxstsmvc = "testfdxstsmvc";
        public const string testfdxstssoap = "testfdxstssoap";
        public const string testfdxstswcf = "testfdxstswcf";
        public const string testrefl = "testrefl";
        public const string titledb = "titledb";
        public const string tokendb = "tokendb";
        public const string toolsdb = "toolsdb";
        public const string toolsmgmtsrv = "toolsmgmtsrv";
        public const string tteamdb = "tteamdb";
        public const string tuserdb = "tuserdb";
        public const string udpadpt = "udpadpt";
        public const string unknown = "unknown";
        public const string uodb = "uodb";
        public const string usercommercedb = "usercommercedb";
        public const string vortexfd = "vortexfd";
        public const string vortexinh = "vortexinh";
        public const string wcalerts = "wcalerts";
        public const string wcDebugTest = "wcDebugTest";
        public const string wcgeneral = "wcgeneral";
        public const string wcmessaging = "wcmessaging";
        public const string wcmusic = "wcmusic";
        public const string wcpresence = "wcpresence";
        public const string wcProfile = "wcProfile";
        public const string wcquery = "wcquery";
        public const string wcsignature = "wcsignature";
        public const string wcstats = "wcstats";
        public const string wcstorage = "wcstorage";
        public const string wcteams = "wcteams";
        public const string wctoolsmgmt = "wctoolsmgmt";
        public const string wcusers = "wcusers";
        public const string webdb = "webdb";
        public const string websg = "websg";
        public const string xarb = "xarb";
        public const string xarbInh = "xarbInh";
        public const string xbanc = "xbanc";
        public const string xbl4xboxcom = "xbl4xboxcom";
        public const string xblmetadb = "xblmetadb";
        public const string xbltools = "xbltools";
        public const string xbos = "xbos";
        public const string xboxcom_forums_db = "xboxcom_forums_db";
        public const string xcache = "xcache";
        public const string xcbk = "xcbk";
        public const string XConnSrv = "XConnSrv";
        public const string xcrypto = "xcrypto";
        public const string xds = "xds";
        public const string xevents = "xevents";
        public const string xlfsmon = "xlfsmon";
        public const string xmachine = "xmachine";
        public const string xmatch = "xmatch";
        public const string xmatchfd = "xmatchfd";
        public const string xmgmtsrv = "xmgmtsrv";
        public const string XNotiCache = "XNotiCache";
        public const string xpnfd = "xpnfd";
        public const string xqry = "xqry";
        public const string xrlscan = "xrlscan";
        public const string xsecsup = "xsecsup";
        public const string xsig = "xsig";
        public const string xstatsfd = "xstatsfd";
        public const string xsts = "xsts";
        public const string xsuppapi = "xsuppapi";
        public const string xtou = "xtou";
        public const string xuacs = "xuacs";
        public const string xuser = "xuser";
        
        // Two arrays used by the config library to initialize the mapping table between component names
        // and ReportMessage IDs (used by the cleanser service/LogTarget). Add a reportMessageId="[numeric id]" 
        // attribute to a component element in the configItems.xml file to have that component added to this list.
        
        public static string[] ReportMessageComponents = new string[]
        {
  
               "kdcsvc",
               "messagingfd",
               "profileshimfd",
               "progressshimfd",
               "ratings",
               "sgsvc",
               "stringsvr",
               "sts",
               "vortexfd",
               "xbos",
               "xcbk",
               "xmatchfd",
               "xpnfd",
               "xsig",
               "xstatsfd",
               "xuacs",        
        };

        public static ReportMessageComponentInfo[] ReportMessageComponentInfoList = new ReportMessageComponentInfo[]
        {
            
            new ReportMessageComponentInfo(30,"cleanservx"),
            
            new ReportMessageComponentInfo(18,"cleanseriis"),
            
            new ReportMessageComponentInfo(34,"cleanseriis"),
            
            new ReportMessageComponentInfo(35,"cleanseriis"),
            
            new ReportMessageComponentInfo(28,"cleanseriis"),
            
            new ReportMessageComponentInfo(23,"cleanservx"),
            
            new ReportMessageComponentInfo(8,"cleanseriis"),
            
            new ReportMessageComponentInfo(29,"cleanseriis"),
            
            new ReportMessageComponentInfo(32,"cleanservx"),
            
            new ReportMessageComponentInfo(6,"cleanseriis"),
            
            new ReportMessageComponentInfo(5,"cleanseriis"),
            
            new ReportMessageComponentInfo(26,"cleanseriis"),
            
            new ReportMessageComponentInfo(27,"cleanseriis"),
            
            new ReportMessageComponentInfo(13,"cleanseriis"),
            
            new ReportMessageComponentInfo(9,"cleanseriis"),
            
            new ReportMessageComponentInfo(7,"cleanseriis"),
                    
        };
    }

    // Mapping of component name to a friendlier name, if provided.
    [ComVisible(false)]
    public static class FriendlyComponent
    {
        public static string Get(string component)
        {
            string s;
            if (!_Mapping.TryGetValue(component, out s))
            {
                return component;
            }
            return s;
        }

        static FriendlyComponent()
        {
            _Mapping = new Dictionary<string, string>();
            
            _Mapping[Component.aamodule] = @"ActiveAuth Module";
            _Mapping[Component.acceleration] = @"Acceleration Svc";
            _Mapping[Component.authsg] = @"ActiveAuth Gateway FD";
            _Mapping[Component.catalog] = @"Catalog FD";
            _Mapping[Component.cleanser] = @"Cleanser Svc";
            _Mapping[Component.cron] = @"Cron FD";
            _Mapping[Component.eventservice] = @"EventService";
            _Mapping[Component.fastEspMarketplaceSearch] = @"Fast ESP Document Search";
            _Mapping[Component.fbserver] = @"Feedback FD";
            _Mapping[Component.finbus] = @"FinBus Publisher Svc";
            _Mapping[Component.kdcsvc] = @"KDC Svc";
            _Mapping[Component.lbsvr] = @"Leaderboard Svc";
            _Mapping[Component.Lists] = @"Lists FD";
            _Mapping[Component.livecache] = @"Livecache FD";
            _Mapping[Component.liveinfo] = @"LiveInfo FD";
            _Mapping[Component.livepxy] = @"WebCache: LiveProxy";
            _Mapping[Component.lspfd] = @"LSP FD";
            _Mapping[Component.marketplacecatalog] = @"Marketplace Catalog FD";
            _Mapping[Component.messagingfd] = @"Messaging FD";
            _Mapping[Component.mixbetamanagement] = @"Mix Beta Management";
            _Mapping[Component.mixmatch] = @"Mix Match";
            _Mapping[Component.mixoffermanagement] = @"Mix Offer Ingestion";
            _Mapping[Component.mixproductmanagement] = @"Mix Content Ingestion";
            _Mapping[Component.mixsettingsmanagement] = @"Mix Settings Management";
            _Mapping[Component.mixstats] = @"Mix Stats";
            _Mapping[Component.mixstorage] = @"Mix Storage";
            _Mapping[Component.mixsubscriptionfamily] = @"Mix Subscription Family";
            _Mapping[Component.mixtitlemanagement] = @"Mix Title Management";
            _Mapping[Component.mixtokenmanagement] = @"Mix Token Management";
            _Mapping[Component.NotificationCache] = @"Notification Cache Svc";
            _Mapping[Component.PresenceCache] = @"Presence Cache Svc";
            _Mapping[Component.ProfileCache] = @"Profile Cache Svc";
            _Mapping[Component.profileshimfd] = @"Profile Shim FD";
            _Mapping[Component.progressshimfd] = @"Progress Shim FD";
            _Mapping[Component.ratings] = @"Ratings FD";
            _Mapping[Component.sgsvc] = @"Security Gateway Svc";
            _Mapping[Component.SocialCache] = @"Social Cache Server";
            _Mapping[Component.stfd] = @"Storage FD";
            _Mapping[Component.stringsvr] = @"String FD";
            _Mapping[Component.sts] = @"STS FD";
            _Mapping[Component.svctunnel] = @"Svc Tunnel";
            _Mapping[Component.testfd] = @"Test FD";
            _Mapping[Component.testfdxstsmvc] = @"TestFD XSTS MVC";
            _Mapping[Component.testfdxstssoap] = @"TestFD XSTS SOAP";
            _Mapping[Component.testfdxstswcf] = @"TestFD XSTS WCF";
            _Mapping[Component.testrefl] = @"Test Reflector FD";
            _Mapping[Component.toolsmgmtsrv] = @"Toolsmgmt Service";
            _Mapping[Component.udpadpt] = @"UDP Adapter Svc";
            _Mapping[Component.vortexfd] = @"Vortex FD";
            _Mapping[Component.vortexinh] = @"Vortex INH";
            _Mapping[Component.wcalerts] = @"WebCache: Alerts";
            _Mapping[Component.wcDebugTest] = @"WebCache: Test";
            _Mapping[Component.wcgeneral] = @"WebCache: GeneralInfo";
            _Mapping[Component.wcmessaging] = @"WebCache: Messaging";
            _Mapping[Component.wcmusic] = @"WebCache: Music";
            _Mapping[Component.wcpresence] = @"WebCache: Presence";
            _Mapping[Component.wcProfile] = @"WebCache: Profile";
            _Mapping[Component.wcquery] = @"WebCache: Query";
            _Mapping[Component.wcsignature] = @"WebCache: Signature";
            _Mapping[Component.wcstats] = @"WebCache: Stats";
            _Mapping[Component.wcstorage] = @"WebCache: Storage";
            _Mapping[Component.wcteams] = @"WebCache: Teams";
            _Mapping[Component.wctoolsmgmt] = @"WebCache: Toolsmgmt";
            _Mapping[Component.wcusers] = @"WebCache: UserAccount";
            _Mapping[Component.websg] = @"WebSG Svc";
            _Mapping[Component.xarb] = @"Arbitration FD";
            _Mapping[Component.xarbInh] = @"Arbitration Svc";
            _Mapping[Component.xbanc] = @"XBanc Svc";
            _Mapping[Component.xbos] = @"Billing FD";
            _Mapping[Component.xcache] = @"XCache Svc";
            _Mapping[Component.xcbk] = @"Callback FD";
            _Mapping[Component.XConnSrv] = @"Connection Svc";
            _Mapping[Component.xcrypto] = @"XCrypto FD";
            _Mapping[Component.xds] = @"Diagnostics Svc";
            _Mapping[Component.xlfsmon] = @"XLFS Monitor";
            _Mapping[Component.xmachine] = @"XMachine FD";
            _Mapping[Component.xmatchfd] = @"Match FD";
            _Mapping[Component.xmgmtsrv] = @"XMgmt Svc";
            _Mapping[Component.xpnfd] = @"Presence FD";
            _Mapping[Component.xqry] = @"Query FD";
            _Mapping[Component.xsecsup] = @"XSecurity Support FD";
            _Mapping[Component.xsig] = @"Signature FD";
            _Mapping[Component.xstatsfd] = @"Stats FD";
            _Mapping[Component.xsts] = @"XSts FD";
            _Mapping[Component.xsuppapi] = @"Cust Support FD";
            _Mapping[Component.xtou] = @"Terms Of Use FD";
            _Mapping[Component.xuacs] = @"UserAccount FD";
            _Mapping[Component.xuser] = @"XUser FD"; 
        }

        private static Dictionary<string, string> _Mapping;
    }
    
    
    // Interfaces
    [ComVisible(false)]
    public class Interface 
    {
  
        public const string aamodule = "aamodule";
        public const string acceleration = "acceleration";
        public const string alertsApp = "alertsApp";
        public const string alertsInstance = "alertsInstance";
        public const string audit = "audit";
        public const string auditdb = "auditdb";
        public const string authsg = "authsg";
        public const string authsg_int = "authsg_int";
        public const string authsg_ssl = "authsg_ssl";
        public const string avatardb = "avatardb";
        public const string catalog = "catalog";
        public const string catalog_int = "catalog_int";
        public const string cleanser = "cleanser";
        public const string compplugins = "compplugins";
        public const string contentIngestion = "contentIngestion";
        public const string ContentIngestionCatalogDB = "ContentIngestionCatalogDB";
        public const string cron_int = "cron_int";
        public const string cronlib = "cronlib";
        public const string download = "download";
        public const string download_share = "download_share";
        public const string eventsdb = "eventsdb";
        public const string eventservice = "eventservice";
        public const string eventsink = "eventsink";
        public const string eventsysdb = "eventsysdb";
        public const string fastEspMarketplaceSearch = "fastEspMarketplaceSearch";
        public const string fbserver = "fbserver";
        public const string fbserver_int = "fbserver_int";
        public const string fecatalogdbsearch = "fecatalogdbsearch";
        public const string fecatalogdbxbox = "fecatalogdbxbox";
        public const string fecatalogdbzune = "fecatalogdbzune";
        public const string filterdb = "filterdb";
        public const string finbus = "finbus";
        public const string genealogy = "genealogy";
        public const string kdcsvc = "kdcsvc";
        public const string lbsvr = "lbsvr";
        public const string leet_leetwebcommunity_db = "leet_leetwebcommunity_db";
        public const string Lists = "Lists";
        public const string Lists_int = "Lists_int";
        public const string livecache = "livecache";
        public const string LiveConnectDb = "LiveConnectDb";
        public const string liveinfo = "liveinfo";
        public const string liveinfo_int = "liveinfo_int";
        public const string livepxy = "livepxy";
        public const string lspfd = "lspfd";
        public const string lspfd_int = "lspfd_int";
        public const string marketplacecatalog = "marketplacecatalog";
        public const string marketplacecatalog_int = "marketplacecatalog_int";
        public const string mixbetamanagement = "mixbetamanagement";
        public const string mixmatch = "mixmatch";
        public const string mixoffermanagement = "mixoffermanagement";
        public const string mixproductmanagement = "mixproductmanagement";
        public const string mixsettingsmanagement = "mixsettingsmanagement";
        public const string mixstats = "mixstats";
        public const string mixstorage = "mixstorage";
        public const string mixsubscriptionfamily = "mixsubscriptionfamily";
        public const string mixtitlemanagement = "mixtitlemanagement";
        public const string mixtokenmanagement = "mixtokenmanagement";
        public const string msgdb = "msgdb";
        public const string None = "None";
        public const string NotificationCache = "NotificationCache";
        public const string npdb = "npdb";
        public const string olapAchievements = "olapAchievements";
        public const string olapCdbCruxUsage = "olapCdbCruxUsage";
        public const string olapCruxUsage = "olapCruxUsage";
        public const string olapGameUsage = "olapGameUsage";
        public const string olapRealtime = "olapRealtime";
        public const string PresenceCache = "PresenceCache";
        public const string ProfileCache = "ProfileCache";
        public const string profilefd = "profilefd";
        public const string profilefd_int = "profilefd_int";
        public const string progressfd = "progressfd";
        public const string progressfd_int = "progressfd_int";
        public const string provisioning = "provisioning";
        public const string querydb = "querydb";
        public const string querylib = "querylib";
        public const string ratings = "ratings";
        public const string ratings_int = "ratings_int";
        public const string rawcatalogdb = "rawcatalogdb";
        public const string reportarchivedb = "reportarchivedb";
        public const string reportingdb = "reportingdb";
        public const string reportrealtimedb = "reportrealtimedb";
        public const string reportssisdb = "reportssisdb";
        public const string rosetta = "rosetta";
        public const string rufus = "rufus";
        public const string secdb = "secdb";
        public const string secmachinehistory = "secmachinehistory";
        public const string secuserhistory = "secuserhistory";
        public const string serialdb = "serialdb";
        public const string sgsvc = "sgsvc";
        public const string sgsvc_int = "sgsvc_int";
        public const string SocialCache = "SocialCache";
        public const string stfd_name_resolution = "stfd_name_resolution";
        public const string stfd_name_resolution_int = "stfd_name_resolution_int";
        public const string stfd_storage = "stfd_storage";
        public const string stfd_storage_int = "stfd_storage_int";
        public const string storedb = "storedb";
        public const string stringsvr = "stringsvr";
        public const string stringsvr_int = "stringsvr_int";
        public const string sts = "sts";
        public const string sts_int = "sts_int";
        public const string svctunnel = "svctunnel";
        public const string TagRecycleCronJobs = "TagRecycleCronJobs";
        public const string testfd = "testfd";
        public const string testfd_int = "testfd_int";
        public const string testfdxstsmvc = "testfdxstsmvc";
        public const string testfdxstsmvc_int = "testfdxstsmvc_int";
        public const string testfdxstssoap = "testfdxstssoap";
        public const string testfdxstssoap_int = "testfdxstssoap_int";
        public const string testfdxstswcf = "testfdxstswcf";
        public const string testfdxstswcf_int = "testfdxstswcf_int";
        public const string testrefl = "testrefl";
        public const string testrefl2 = "testrefl2";
        public const string titledb = "titledb";
        public const string tokendb = "tokendb";
        public const string toolsdb = "toolsdb";
        public const string tteamdb = "tteamdb";
        public const string tuserdb = "tuserdb";
        public const string udpadpt = "udpadpt";
        public const string uodb = "uodb";
        public const string usercommercedb = "usercommercedb";
        public const string vortexfd = "vortexfd";
        public const string vortexfd_udp = "vortexfd_udp";
        public const string vortexinh = "vortexinh";
        public const string vortexinh_udp = "vortexinh_udp";
        public const string wcalerts = "wcalerts";
        public const string wcDebugTest = "wcDebugTest";
        public const string wcgeneral = "wcgeneral";
        public const string wcmessaging = "wcmessaging";
        public const string wcmusic = "wcmusic";
        public const string wcpresence = "wcpresence";
        public const string wcprofile = "wcprofile";
        public const string wcquery = "wcquery";
        public const string wcsignature = "wcsignature";
        public const string wcstats = "wcstats";
        public const string wcstorage = "wcstorage";
        public const string wcteams = "wcteams";
        public const string wctoolsmgmt = "wctoolsmgmt";
        public const string wcusers = "wcusers";
        public const string webdb = "webdb";
        public const string websg = "websg";
        public const string websg_int = "websg_int";
        public const string xarb = "xarb";
        public const string xarb_int = "xarb_int";
        public const string xarbInh = "xarbInh";
        public const string xbanc = "xbanc";
        public const string xbl4xboxcom = "xbl4xboxcom";
        public const string xblmetadb = "xblmetadb";
        public const string xbltools = "xbltools";
        public const string xbos_autoupdate = "xbos_autoupdate";
        public const string xbos_base_subscription = "xbos_base_subscription";
        public const string xbos_billing_offering = "xbos_billing_offering";
        public const string xbos_drm = "xbos_drm";
        public const string xbos_drm_int = "xbos_drm_int";
        public const string xbos_int = "xbos_int";
        public const string xboxcom_forums_db = "xboxcom_forums_db";
        public const string xcache = "xcache";
        public const string xcbk = "xcbk";
        public const string XConnSrv = "XConnSrv";
        public const string xcrypto_int = "xcrypto_int";
        public const string xds = "xds";
        public const string xevents = "xevents";
        public const string xmachine = "xmachine";
        public const string xmachine_int = "xmachine_int";
        public const string xmatch = "xmatch";
        public const string xmatchfd = "xmatchfd";
        public const string xmatchfd_int = "xmatchfd_int";
        public const string xmgmtsrv = "xmgmtsrv";
        public const string XNotiCache = "XNotiCache";
        public const string xpnfd_messaging = "xpnfd_messaging";
        public const string xpnfd_messaging_int = "xpnfd_messaging_int";
        public const string xpnfd_presence = "xpnfd_presence";
        public const string xpnfd_presence_int = "xpnfd_presence_int";
        public const string xpnfd_teams = "xpnfd_teams";
        public const string xpnfd_teams_int = "xpnfd_teams_int";
        public const string xqry = "xqry";
        public const string xqry_int = "xqry_int";
        public const string xrlscan = "xrlscan";
        public const string xsecsup = "xsecsup";
        public const string xsecsup_int = "xsecsup_int";
        public const string xsig = "xsig";
        public const string xsig_int = "xsig_int";
        public const string xstatsfd = "xstatsfd";
        public const string xstatsfd_int = "xstatsfd_int";
        public const string xsts = "xsts";
        public const string xsts_int = "xsts_int";
        public const string xsuppapi = "xsuppapi";
        public const string xtou = "xtou";
        public const string xtou_int = "xtou_int";
        public const string xuacs = "xuacs";
        public const string xuacs_int = "xuacs_int";
        public const string xuser = "xuser";
        public const string xuser_int = "xuser_int";
    }
    
    // VirtualInterfaces
    [ComVisible(false)]
    public class VirtualInterface 
    {
  
        public const string authsg = "authsg";
        public const string authsg_int = "authsg_int";
        public const string authsg_ssl = "authsg_ssl";
        public const string avatardb = "avatardb";
        public const string catalog = "catalog";
        public const string catalog_int = "catalog_int";
        public const string cleanseriis = "cleanseriis";
        public const string cleanserinh = "cleanserinh";
        public const string cleansersg = "cleansersg";
        public const string cleanservx = "cleanservx";
        public const string contentIngestion = "contentIngestion";
        public const string cron_int = "cron_int";
        public const string download = "download";
        public const string eventservice = "eventservice";
        public const string eventsysdb = "eventsysdb";
        public const string fastEspMarketplaceSearch = "fastEspMarketplaceSearch";
        public const string fbserver = "fbserver";
        public const string fbserver_int = "fbserver_int";
        public const string fecatalogdbsearch = "fecatalogdbsearch";
        public const string fecatalogdbwatcher = "fecatalogdbwatcher";
        public const string fecatalogdbxbox = "fecatalogdbxbox";
        public const string fecatalogdbzune = "fecatalogdbzune";
        public const string kdcsvc = "kdcsvc";
        public const string Lists = "Lists";
        public const string Lists_int = "Lists_int";
        public const string livecache = "livecache";
        public const string liveinfo = "liveinfo";
        public const string liveinfo_int = "liveinfo_int";
        public const string livepxy = "livepxy";
        public const string marketplacecatalog = "marketplacecatalog";
        public const string marketplacecatalog_int = "marketplacecatalog_int";
        public const string mixbetamanagement = "mixbetamanagement";
        public const string mixmatch = "mixmatch";
        public const string mixoffermanagement = "mixoffermanagement";
        public const string mixproductmanagement = "mixproductmanagement";
        public const string mixsettingsmanagement = "mixsettingsmanagement";
        public const string mixstats = "mixstats";
        public const string mixstorage = "mixstorage";
        public const string mixsubscriptionfamily = "mixsubscriptionfamily";
        public const string mixtitlemanagement = "mixtitlemanagement";
        public const string mixtokenmanagement = "mixtokenmanagement";
        public const string msgdb = "msgdb";
        public const string None = "None";
        public const string npdb = "npdb";
        public const string profilefd = "profilefd";
        public const string profilefd_int = "profilefd_int";
        public const string progressfd = "progressfd";
        public const string progressfd_int = "progressfd_int";
        public const string ratings = "ratings";
        public const string ratings_int = "ratings_int";
        public const string secdb = "secdb";
        public const string secmachinehistory = "secmachinehistory";
        public const string secuserhistory = "secuserhistory";
        public const string sgsvc = "sgsvc";
        public const string SocialCache = "SocialCache";
        public const string stfd_name_resolution = "stfd_name_resolution";
        public const string stfd_name_resolution_int = "stfd_name_resolution_int";
        public const string stfd_storage = "stfd_storage";
        public const string stfd_storage_int = "stfd_storage_int";
        public const string storedb = "storedb";
        public const string stringsvr = "stringsvr";
        public const string stringsvr_int = "stringsvr_int";
        public const string sts = "sts";
        public const string sts_int = "sts_int";
        public const string svctunnel = "svctunnel";
        public const string TagRecycleCronJobs = "TagRecycleCronJobs";
        public const string testfd = "testfd";
        public const string testfd_int = "testfd_int";
        public const string testfdxstsmvc = "testfdxstsmvc";
        public const string testfdxstsmvc_int = "testfdxstsmvc_int";
        public const string testfdxstssoap = "testfdxstssoap";
        public const string testfdxstssoap_int = "testfdxstssoap_int";
        public const string testfdxstswcf = "testfdxstswcf";
        public const string testfdxstswcf_int = "testfdxstswcf_int";
        public const string testrefl = "testrefl";
        public const string testrefl2 = "testrefl2";
        public const string titledb = "titledb";
        public const string tokendb = "tokendb";
        public const string tteamdb = "tteamdb";
        public const string tuserdb = "tuserdb";
        public const string udpadpt = "udpadpt";
        public const string uodb = "uodb";
        public const string usercommercedb = "usercommercedb";
        public const string vortexfd = "vortexfd";
        public const string vortexfd_udp = "vortexfd_udp";
        public const string vortexinh = "vortexinh";
        public const string vortexinh_udp = "vortexinh_udp";
        public const string wcalerts = "wcalerts";
        public const string wcDebugTest = "wcDebugTest";
        public const string wcgeneral = "wcgeneral";
        public const string wcmessaging = "wcmessaging";
        public const string wcmusic = "wcmusic";
        public const string wcpresence = "wcpresence";
        public const string wcprofile = "wcprofile";
        public const string wcquery = "wcquery";
        public const string wcsignature = "wcsignature";
        public const string wcstats = "wcstats";
        public const string wcstorage = "wcstorage";
        public const string wcteams = "wcteams";
        public const string wctoolsmgmt = "wctoolsmgmt";
        public const string wcusers = "wcusers";
        public const string websg = "websg";
        public const string xarb = "xarb";
        public const string xarb_int = "xarb_int";
        public const string xarbInh = "xarbInh";
        public const string xbos_autoupdate = "xbos_autoupdate";
        public const string xbos_base_subscription = "xbos_base_subscription";
        public const string xbos_billing_offering = "xbos_billing_offering";
        public const string xbos_drm = "xbos_drm";
        public const string xbos_drm_int = "xbos_drm_int";
        public const string xbos_int = "xbos_int";
        public const string xcache = "xcache";
        public const string xcbk = "xcbk";
        public const string XConnSrv = "XConnSrv";
        public const string xcrypto_int = "xcrypto_int";
        public const string xds = "xds";
        public const string xmachine = "xmachine";
        public const string xmachine_int = "xmachine_int";
        public const string xmatchfd = "xmatchfd";
        public const string xmatchfd_int = "xmatchfd_int";
        public const string xpnfd_messaging = "xpnfd_messaging";
        public const string xpnfd_messaging_int = "xpnfd_messaging_int";
        public const string xpnfd_presence = "xpnfd_presence";
        public const string xpnfd_presence_int = "xpnfd_presence_int";
        public const string xpnfd_teams = "xpnfd_teams";
        public const string xpnfd_teams_int = "xpnfd_teams_int";
        public const string xqry = "xqry";
        public const string xqry_int = "xqry_int";
        public const string xsecsup = "xsecsup";
        public const string xsecsup_int = "xsecsup_int";
        public const string xsig = "xsig";
        public const string xsig_int = "xsig_int";
        public const string xstatsfd = "xstatsfd";
        public const string xstatsfd_int = "xstatsfd_int";
        public const string xsts = "xsts";
        public const string xsts_int = "xsts_int";
        public const string xsuppapi = "xsuppapi";
        public const string xtou = "xtou";
        public const string xtou_int = "xtou_int";
        public const string xuacs = "xuacs";
        public const string xuacs_int = "xuacs_int";
        public const string xuser = "xuser";
        public const string xuser_int = "xuser_int";
  
        // An array used by the HealthRequest HTTPHandler to determine which VirtualInterfaces are valid to 
        // send a health XRL request to. Add a healthCheckEnabled="true" attribute to a virtualInterface
        // element in the configItems.xml file to have that virtualInterface automatically included in this array.
          
        public static string[] VirtualInterfacesWithHealth = new string[]
        {
  
               "authsg",
               "authsg_int",
               "authsg_ssl",
               "catalog",
               "catalog_int",
               "cron_int",
               "eventservice",
               "fbserver",
               "fbserver_int",
               "Lists",
               "Lists_int",
               "livecache",
               "liveinfo",
               "liveinfo_int",
               "livepxy",
               "marketplacecatalog",
               "marketplacecatalog_int",
               "mixsubscriptionfamily",
               "profilefd",
               "profilefd_int",
               "progressfd",
               "progressfd_int",
               "stfd_name_resolution",
               "stfd_name_resolution_int",
               "stfd_storage",
               "stfd_storage_int",
               "stringsvr",
               "stringsvr_int",
               "wcalerts",
               "wcDebugTest",
               "wcgeneral",
               "wcmessaging",
               "wcmusic",
               "wcpresence",
               "wcprofile",
               "wcquery",
               "wcsignature",
               "wcstats",
               "wcstorage",
               "wcteams",
               "wctoolsmgmt",
               "wcusers",
               "xarb",
               "xarb_int",
               "xbos_autoupdate",
               "xbos_base_subscription",
               "xbos_billing_offering",
               "xbos_drm",
               "xbos_drm_int",
               "xbos_int",
               "xcbk",
               "xcrypto_int",
               "xmachine",
               "xmachine_int",
               "xmatchfd",
               "xmatchfd_int",
               "xpnfd_messaging",
               "xpnfd_messaging_int",
               "xpnfd_presence",
               "xpnfd_presence_int",
               "xpnfd_teams",
               "xpnfd_teams_int",
               "xqry",
               "xqry_int",
               "xsecsup",
               "xsecsup_int",
               "xsig",
               "xsig_int",
               "xstatsfd",
               "xstatsfd_int",
               "xsts",
               "xsts_int",
               "xsuppapi",
               "xtou",
               "xtou_int",
               "xuacs",
               "xuacs_int",
               "xuser",
               "xuser_int",
        };
    }
    
    // Settings
    [ComVisible(false)]
    public class Setting 
    {
  
        public const string aainfo_xbancExpirationInSeconds = "aainfo_xbancExpirationInSeconds";
        public const string aamodule_antidosBanTimeInSeconds = "aamodule_antidosBanTimeInSeconds";
        public const string aamodule_antidosBlockingThreshold = "aamodule_antidosBlockingThreshold";
        public const string aamodule_antidosMaxRecordsToTrack = "aamodule_antidosMaxRecordsToTrack";
        public const string aamodule_antidosThrottlingThreshold = "aamodule_antidosThrottlingThreshold";
        public const string aamodule_antidosTrackingThreshold = "aamodule_antidosTrackingThreshold";
        public const string aamodule_audienceUriMode = "aamodule_audienceUriMode";
        public const string aamodule_certificateRevocationMode = "aamodule_certificateRevocationMode";
        public const string aamodule_certificateValidationMode = "aamodule_certificateValidationMode";
        public const string aamodule_Rps_site = "aamodule_Rps_site";
        public const string aamodule_sts_deviceId_cert_subject_prefix = "aamodule_sts_deviceId_cert_subject_prefix";
        public const string aamodule_suppress_xmgmt_connection = "aamodule_suppress_xmgmt_connection";
        public const string aamodule_useLoadBalancerSslHeaders = "aamodule_useLoadBalancerSslHeaders";
        public const string aamodule_wp7_deviceId_cert_subject_prefix = "aamodule_wp7_deviceId_cert_subject_prefix";
        public const string aamodule_wp8_deviceId_cert_subject_prefix = "aamodule_wp8_deviceId_cert_subject_prefix";
        public const string abch_abserviceUrl = "abch_abserviceUrl";
        public const string abch_allowQueryAtLoginAsQueryAtSignup = "abch_allowQueryAtLoginAsQueryAtSignup";
        public const string abch_applicationId = "abch_applicationId";
        public const string abch_fastFailBlockIntervalSeconds = "abch_fastFailBlockIntervalSeconds";
        public const string abch_fastFailTimeoutThresholdCount = "abch_fastFailTimeoutThresholdCount";
        public const string abch_fastFailTimeoutTimespanSeconds = "abch_fastFailTimeoutTimespanSeconds";
        public const string abch_getMessengerBuddiesTimeoutSeconds = "abch_getMessengerBuddiesTimeoutSeconds";
        public const string abch_getSoapConnectionPoolSize = "abch_getSoapConnectionPoolSize";
        public const string abch_sharingServiceUrl = "abch_sharingServiceUrl";
        public const string acceleration_allocation_page_size = "acceleration_allocation_page_size";
        public const string acceleration_allocation_sizes = "acceleration_allocation_sizes";
        public const string acceleration_context_duration_alert_limit = "acceleration_context_duration_alert_limit";
        public const string acceleration_fastFailBlockIntervalSeconds = "acceleration_fastFailBlockIntervalSeconds";
        public const string acceleration_fastFailTimeoutThresholdCount = "acceleration_fastFailTimeoutThresholdCount";
        public const string acceleration_fastFailTimeoutTimespanSeconds = "acceleration_fastFailTimeoutTimespanSeconds";
        public const string acceleration_heartbeat_interval = "acceleration_heartbeat_interval";
        public const string acceleration_localCacheItemDuration = "acceleration_localCacheItemDuration";
        public const string acceleration_localCacheMaxSize = "acceleration_localCacheMaxSize";
        public const string acceleration_low_water_data_storage_bytes = "acceleration_low_water_data_storage_bytes";
        public const string acceleration_max_key_length = "acceleration_max_key_length";
        public const string acceleration_notificationChangelistSize = "acceleration_notificationChangelistSize";
        public const string acceleration_notificationPollInterval = "acceleration_notificationPollInterval";
        public const string acceleration_numHashtableBuckets = "acceleration_numHashtableBuckets";
        public const string acceleration_record_maintenance_period = "acceleration_record_maintenance_period";
        public const string acceleration_replyTimeout = "acceleration_replyTimeout";
        public const string acceleration_total_data_storage_bytes = "acceleration_total_data_storage_bytes";
        public const string authsg_allowlistheadersincoming = "authsg_allowlistheadersincoming";
        public const string authsg_allowlistheadersoutgoing = "authsg_allowlistheadersoutgoing";
        public const string authsg_gatewayTimeoutSeconds = "authsg_gatewayTimeoutSeconds";
        public const string authsg_requestTimeoutSeconds = "authsg_requestTimeoutSeconds";
        public const string authsg_sslCertSubject = "authsg_sslCertSubject";
        public const string authsg_whitelistheaders = "authsg_whitelistheaders";
        public const string bdk_auditEnabled = "bdk_auditEnabled";
        public const string bif_AllowBehaviorInjections = "bif_AllowBehaviorInjections";
        public const string billing_activateTokenTimeout = "billing_activateTokenTimeout";
        public const string billing_activateTokenTimeout_LiveService = "billing_activateTokenTimeout_LiveService";
        public const string billing_activateTokenTimeout_Xbox1 = "billing_activateTokenTimeout_Xbox1";
        public const string billing_addCommentTimeout = "billing_addCommentTimeout";
        public const string billing_addCommentTimeout_LiveService = "billing_addCommentTimeout_LiveService";
        public const string billing_addCommentTimeout_Xbox1 = "billing_addCommentTimeout_Xbox1";
        public const string billing_addPaymentInstrumentTimeout = "billing_addPaymentInstrumentTimeout";
        public const string billing_addPaymentInstrumentTimeout_LiveService = "billing_addPaymentInstrumentTimeout_LiveService";
        public const string billing_addPaymentInstrumentTimeout_Xbox1 = "billing_addPaymentInstrumentTimeout_Xbox1";
        public const string billing_addRoleAssignmentTimeout = "billing_addRoleAssignmentTimeout";
        public const string billing_addRoleAssignmentTimeout_LiveService = "billing_addRoleAssignmentTimeout_LiveService";
        public const string billing_addRoleAssignmentTimeout_Xbox1 = "billing_addRoleAssignmentTimeout_Xbox1";
        public const string billing_addViolationTimeout = "billing_addViolationTimeout";
        public const string billing_addViolationTimeout_LiveService = "billing_addViolationTimeout_LiveService";
        public const string billing_addViolationTimeout_Xbox1 = "billing_addViolationTimeout_Xbox1";
        public const string billing_allowEditorialPurchasesAsZeroPoints = "billing_allowEditorialPurchasesAsZeroPoints";
        public const string billing_allowFakeActivationCode = "billing_allowFakeActivationCode";
        public const string billing_allowInjectedScsErrorInRequest = "billing_allowInjectedScsErrorInRequest";
        public const string billing_allowUrlOverrideInRequest = "billing_allowUrlOverrideInRequest";
        public const string billing_bdkUrl = "billing_bdkUrl";
        public const string billing_calculateTaxTimeout = "billing_calculateTaxTimeout";
        public const string billing_calculateTaxTimeout_LiveService = "billing_calculateTaxTimeout_LiveService";
        public const string billing_calculateTaxTimeout_Xbox1 = "billing_calculateTaxTimeout_Xbox1";
        public const string billing_cancelSubscriptionTimeout = "billing_cancelSubscriptionTimeout";
        public const string billing_cancelSubscriptionTimeout_LiveService = "billing_cancelSubscriptionTimeout_LiveService";
        public const string billing_cancelSubscriptionTimeout_Xbox1 = "billing_cancelSubscriptionTimeout_Xbox1";
        public const string billing_checkProvisioningStatusTimeout = "billing_checkProvisioningStatusTimeout";
        public const string billing_checkProvisioningStatusTimeout_LiveService = "billing_checkProvisioningStatusTimeout_LiveService";
        public const string billing_checkProvisioningStatusTimeout_Xbox1 = "billing_checkProvisioningStatusTimeout_Xbox1";
        public const string billing_closeBalanceTimeout = "billing_closeBalanceTimeout";
        public const string billing_connectionLimit = "billing_connectionLimit";
        public const string billing_connectToBilling = "billing_connectToBilling";
        public const string billing_convertSubscriptionExTimeout = "billing_convertSubscriptionExTimeout";
        public const string billing_convertSubscriptionExTimeout_LiveService = "billing_convertSubscriptionExTimeout_LiveService";
        public const string billing_convertSubscriptionExTimeout_Xbox1 = "billing_convertSubscriptionExTimeout_Xbox1";
        public const string billing_convertSubscriptionTimeout = "billing_convertSubscriptionTimeout";
        public const string billing_convertSubscriptionTimeout_LiveService = "billing_convertSubscriptionTimeout_LiveService";
        public const string billing_convertSubscriptionTimeout_Xbox1 = "billing_convertSubscriptionTimeout_Xbox1";
        public const string billing_createAccountTimeout = "billing_createAccountTimeout";
        public const string billing_createAccountTimeout_LiveService = "billing_createAccountTimeout_LiveService";
        public const string billing_createAccountTimeout_Xbox1 = "billing_createAccountTimeout_Xbox1";
        public const string billing_creditPaymentInstrumentExTimeout = "billing_creditPaymentInstrumentExTimeout";
        public const string billing_creditPaymentInstrumentTimeout = "billing_creditPaymentInstrumentTimeout";
        public const string billing_ctpAllowUrlOverride = "billing_ctpAllowUrlOverride";
        public const string billing_ctpconnectbilling = "billing_ctpconnectbilling";
        public const string billing_ctpJoinSubscriptionTimeoutSeconds = "billing_ctpJoinSubscriptionTimeoutSeconds";
        public const string billing_ctpMigrateAccountTimeoutSeconds = "billing_ctpMigrateAccountTimeoutSeconds";
        public const string billing_ctppurchase_roundboundarymonths = "billing_ctppurchase_roundboundarymonths";
        public const string billing_ctpPurchaseTransactionServiceTimeoutSeconds = "billing_ctpPurchaseTransactionServiceTimeoutSeconds";
        public const string billing_ctpPurchaseTransactionServiceUrl = "billing_ctpPurchaseTransactionServiceUrl";
        public const string billing_ctpTenantName = "billing_ctpTenantName";
        public const string billing_deprovisionServicesTimeout = "billing_deprovisionServicesTimeout";
        public const string billing_deprovisionServicesTimeout_LiveService = "billing_deprovisionServicesTimeout_LiveService";
        public const string billing_deprovisionServicesTimeout_Xbox1 = "billing_deprovisionServicesTimeout_Xbox1";
        public const string billing_familyGoldLimit = "billing_familyGoldLimit";
        public const string billing_getAccountIdFromAdminPUIDTimeout = "billing_getAccountIdFromAdminPUIDTimeout";
        public const string billing_getAccountIdFromAdminPUIDTimeout_LiveService = "billing_getAccountIdFromAdminPUIDTimeout_LiveService";
        public const string billing_getAccountIdFromAdminPUIDTimeout_Xbox1 = "billing_getAccountIdFromAdminPUIDTimeout_Xbox1";
        public const string billing_getAccountInfoTimeout = "billing_getAccountInfoTimeout";
        public const string billing_getAccountInfoTimeout_LiveService = "billing_getAccountInfoTimeout_LiveService";
        public const string billing_getAccountInfoTimeout_Xbox1 = "billing_getAccountInfoTimeout_Xbox1";
        public const string billing_getCommentsTimeout = "billing_getCommentsTimeout";
        public const string billing_getCommentsTimeout_LiveService = "billing_getCommentsTimeout_LiveService";
        public const string billing_getCommentsTimeout_Xbox1 = "billing_getCommentsTimeout_Xbox1";
        public const string billing_getEligibleOfferingsTimeout = "billing_getEligibleOfferingsTimeout";
        public const string billing_getEligibleOfferingsTimeout_LiveService = "billing_getEligibleOfferingsTimeout_LiveService";
        public const string billing_getEligibleOfferingsTimeout_Xbox1 = "billing_getEligibleOfferingsTimeout_Xbox1";
        public const string billing_getKeyTimeout = "billing_getKeyTimeout";
        public const string billing_getKeyTimeout_LiveService = "billing_getKeyTimeout_LiveService";
        public const string billing_getKeyTimeout_Xbox1 = "billing_getKeyTimeout_Xbox1";
        public const string billing_getPartnerConfigurationTimeout = "billing_getPartnerConfigurationTimeout";
        public const string billing_getPartnerConfigurationTimeout_LiveService = "billing_getPartnerConfigurationTimeout_LiveService";
        public const string billing_getPartnerConfigurationTimeout_Xbox1 = "billing_getPartnerConfigurationTimeout_Xbox1";
        public const string billing_getPaymentInstrumentsExTimeout = "billing_getPaymentInstrumentsExTimeout";
        public const string billing_getPaymentInstrumentsExTimeout_LiveService = "billing_getPaymentInstrumentsExTimeout_LiveService";
        public const string billing_getPaymentInstrumentsExTimeout_Xbox1 = "billing_getPaymentInstrumentsExTimeout_Xbox1";
        public const string billing_getPaymentInstrumentsTimeout = "billing_getPaymentInstrumentsTimeout";
        public const string billing_getPaymentInstrumentsTimeout_LiveService = "billing_getPaymentInstrumentsTimeout_LiveService";
        public const string billing_getPaymentInstrumentsTimeout_Xbox1 = "billing_getPaymentInstrumentsTimeout_Xbox1";
        public const string billing_getPermitsForObjectIdTimeout = "billing_getPermitsForObjectIdTimeout";
        public const string billing_getPermitsForObjectIdTimeout_LiveService = "billing_getPermitsForObjectIdTimeout_LiveService";
        public const string billing_getPermitsForObjectIdTimeout_Xbox1 = "billing_getPermitsForObjectIdTimeout_Xbox1";
        public const string billing_getSubscriptionStatusTimeout = "billing_getSubscriptionStatusTimeout";
        public const string billing_getSubscriptionStatusTimeout_LiveService = "billing_getSubscriptionStatusTimeout_LiveService";
        public const string billing_getSubscriptionStatusTimeout_Xbox1 = "billing_getSubscriptionStatusTimeout_Xbox1";
        public const string billing_getSubscriptionsTimeout = "billing_getSubscriptionsTimeout";
        public const string billing_getSubscriptionsTimeout_LiveService = "billing_getSubscriptionsTimeout_LiveService";
        public const string billing_getSubscriptionsTimeout_Xbox1 = "billing_getSubscriptionsTimeout_Xbox1";
        public const string billing_getTokenInfoExTimeout = "billing_getTokenInfoExTimeout";
        public const string billing_getTokenInfoExTimeout_LiveService = "billing_getTokenInfoExTimeout_LiveService";
        public const string billing_getTokenInfoExTimeout_Xbox1 = "billing_getTokenInfoExTimeout_Xbox1";
        public const string billing_initializeCTPWrapper = "billing_initializeCTPWrapper";
        public const string billing_loadTokenInstanceTimeout = "billing_loadTokenInstanceTimeout";
        public const string billing_loadTokenInstanceTimeout_LiveService = "billing_loadTokenInstanceTimeout_LiveService";
        public const string billing_loadTokenInstanceTimeout_Xbox1 = "billing_loadTokenInstanceTimeout_Xbox1";
        public const string billing_maxEditorialPurchasesAsZeroPointsPerMinute = "billing_maxEditorialPurchasesAsZeroPointsPerMinute";
        public const string billing_maxTrialCount = "billing_maxTrialCount";
        public const string billing_migrateOfferTimeout = "billing_migrateOfferTimeout";
        public const string billing_migrateOfferTimeout_LiveService = "billing_migrateOfferTimeout_LiveService";
        public const string billing_migrateOfferTimeout_Xbox1 = "billing_migrateOfferTimeout_Xbox1";
        public const string billing_migrationOfferId = "billing_migrationOfferId";
        public const string billing_newContentWindow = "billing_newContentWindow";
        public const string billing_offsetOrderCommentInfoCommentCode = "billing_offsetOrderCommentInfoCommentCode";
        public const string billing_offsetOrderFinancialReportingCode = "billing_offsetOrderFinancialReportingCode";
        public const string billing_offsetOrderTimeout = "billing_offsetOrderTimeout";
        public const string billing_offsetOrderTimeout_LiveService = "billing_offsetOrderTimeout_LiveService";
        public const string billing_offsetOrderTimeout_Xbox1 = "billing_offsetOrderTimeout_Xbox1";
        public const string billing_provisionServicesTimeout = "billing_provisionServicesTimeout";
        public const string billing_provisionServicesTimeout_LiveService = "billing_provisionServicesTimeout_LiveService";
        public const string billing_provisionServicesTimeout_Xbox1 = "billing_provisionServicesTimeout_Xbox1";
        public const string billing_proxy = "billing_proxy";
        public const string billing_pumpUserBillingInfoQueue = "billing_pumpUserBillingInfoQueue";
        public const string billing_pumpUserBillingInfoQueueInterval = "billing_pumpUserBillingInfoQueueInterval";
        public const string billing_purchaseItemTimeout = "billing_purchaseItemTimeout";
        public const string billing_purchaseItemTimeout_LiveService = "billing_purchaseItemTimeout_LiveService";
        public const string billing_purchaseItemTimeout_Xbox1 = "billing_purchaseItemTimeout_Xbox1";
        public const string billing_purchaseOfferingExTimeout = "billing_purchaseOfferingExTimeout";
        public const string billing_purchaseOfferingExTimeout_LiveService = "billing_purchaseOfferingExTimeout_LiveService";
        public const string billing_purchaseOfferingExTimeout_Xbox1 = "billing_purchaseOfferingExTimeout_Xbox1";
        public const string billing_purchaseOfferingTimeout = "billing_purchaseOfferingTimeout";
        public const string billing_purchaseOfferingTimeout_LiveService = "billing_purchaseOfferingTimeout_LiveService";
        public const string billing_purchaseOfferingTimeout_Xbox1 = "billing_purchaseOfferingTimeout_Xbox1";
        public const string billing_queueUserBillingInfo = "billing_queueUserBillingInfo";
        public const string billing_reinstateSubscriptionTimeout = "billing_reinstateSubscriptionTimeout";
        public const string billing_reinstateSubscriptionTimeout_LiveService = "billing_reinstateSubscriptionTimeout_LiveService";
        public const string billing_reinstateSubscriptionTimeout_Xbox1 = "billing_reinstateSubscriptionTimeout_Xbox1";
        public const string billing_removePaymentInstrumentTimeout = "billing_removePaymentInstrumentTimeout";
        public const string billing_removePaymentInstrumentTimeout_LiveService = "billing_removePaymentInstrumentTimeout_LiveService";
        public const string billing_removePaymentInstrumentTimeout_Xbox1 = "billing_removePaymentInstrumentTimeout_Xbox1";
        public const string billing_removeRoleAssignmentTimeout = "billing_removeRoleAssignmentTimeout";
        public const string billing_removeRoleAssignmentTimeout_LiveService = "billing_removeRoleAssignmentTimeout_LiveService";
        public const string billing_removeRoleAssignmentTimeout_Xbox1 = "billing_removeRoleAssignmentTimeout_Xbox1";
        public const string billing_removeViolationTimeout = "billing_removeViolationTimeout";
        public const string billing_removeViolationTimeout_LiveService = "billing_removeViolationTimeout_LiveService";
        public const string billing_removeViolationTimeout_Xbox1 = "billing_removeViolationTimeout_Xbox1";
        public const string billing_scsSourcePartnerId = "billing_scsSourcePartnerId";
        public const string billing_setPartnerConfigurationTimeout = "billing_setPartnerConfigurationTimeout";
        public const string billing_setPartnerConfigurationTimeout_LiveService = "billing_setPartnerConfigurationTimeout_LiveService";
        public const string billing_setPartnerConfigurationTimeout_Xbox1 = "billing_setPartnerConfigurationTimeout_Xbox1";
        public const string billing_settleBalanceTimeout = "billing_settleBalanceTimeout";
        public const string billing_settleBalanceTimeout_LiveService = "billing_settleBalanceTimeout_LiveService";
        public const string billing_settleBalanceTimeout_Xbox1 = "billing_settleBalanceTimeout_Xbox1";
        public const string billing_stopPaymentsTimeout = "billing_stopPaymentsTimeout";
        public const string billing_submitOrderTimeout = "billing_submitOrderTimeout";
        public const string billing_submitOrderTimeout_LiveService = "billing_submitOrderTimeout_LiveService";
        public const string billing_submitOrderTimeout_Xbox1 = "billing_submitOrderTimeout_Xbox1";
        public const string billing_switchPaymentInstrumentsTimeout = "billing_switchPaymentInstrumentsTimeout";
        public const string billing_switchPaymentInstrumentsTimeout_LiveService = "billing_switchPaymentInstrumentsTimeout_LiveService";
        public const string billing_switchPaymentInstrumentsTimeout_Xbox1 = "billing_switchPaymentInstrumentsTimeout_Xbox1";
        public const string billing_testConnectionTimeout = "billing_testConnectionTimeout";
        public const string billing_testConnectionTimeout_LiveService = "billing_testConnectionTimeout_LiveService";
        public const string billing_testConnectionTimeout_Xbox1 = "billing_testConnectionTimeout_Xbox1";
        public const string billing_timeout = "billing_timeout";
        public const string billing_timeoutBlockInterval = "billing_timeoutBlockInterval";
        public const string billing_transferBalanceTimeout = "billing_transferBalanceTimeout";
        public const string billing_transferBalanceTimeout_LiveService = "billing_transferBalanceTimeout_LiveService";
        public const string billing_transferBalanceTimeout_Xbox1 = "billing_transferBalanceTimeout_Xbox1";
        public const string billing_updateAccountInfoTimeout = "billing_updateAccountInfoTimeout";
        public const string billing_updateAccountInfoTimeout_LiveService = "billing_updateAccountInfoTimeout_LiveService";
        public const string billing_updateAccountInfoTimeout_Xbox1 = "billing_updateAccountInfoTimeout_Xbox1";
        public const string billing_updatePaymentInstrumentInfoTimeout = "billing_updatePaymentInstrumentInfoTimeout";
        public const string billing_updatePaymentInstrumentInfoTimeout_LiveService = "billing_updatePaymentInstrumentInfoTimeout_LiveService";
        public const string billing_updatePaymentInstrumentInfoTimeout_Xbox1 = "billing_updatePaymentInstrumentInfoTimeout_Xbox1";
        public const string billing_updateSubscriptionInfoTimeout = "billing_updateSubscriptionInfoTimeout";
        public const string billing_updateSubscriptionInfoTimeout_LiveService = "billing_updateSubscriptionInfoTimeout_LiveService";
        public const string billing_updateSubscriptionInfoTimeout_Xbox1 = "billing_updateSubscriptionInfoTimeout_Xbox1";
        public const string billing_useCatalogSubscriptionOffers = "billing_useCatalogSubscriptionOffers";
        public const string billing_validateProvisioningDataTimeout = "billing_validateProvisioningDataTimeout";
        public const string billing_validateProvisioningDataTimeout_LiveService = "billing_validateProvisioningDataTimeout_LiveService";
        public const string billing_validateProvisioningDataTimeout_Xbox1 = "billing_validateProvisioningDataTimeout_Xbox1";
        public const string casvc_genericSslIssuerName = "casvc_genericSslIssuerName";
        public const string casvc_oscarIssuerName = "casvc_oscarIssuerName";
        public const string catalog_activeFECatalogDBSearchVirtualInterface = "catalog_activeFECatalogDBSearchVirtualInterface";
        public const string catalog_activeFECatalogDBZuneVirtualInterface = "catalog_activeFECatalogDBZuneVirtualInterface";
        public const string catalog_appMediaTypes = "catalog_appMediaTypes";
        public const string catalog_consumableMediaTypes = "catalog_consumableMediaTypes";
        public const string catalog_editorial_ips0 = "catalog_editorial_ips0";
        public const string catalog_editorial_ips1 = "catalog_editorial_ips1";
        public const string catalog_editorial_ips2 = "catalog_editorial_ips2";
        public const string catalog_editorial_priv0 = "catalog_editorial_priv0";
        public const string catalog_editorial_priv1 = "catalog_editorial_priv1";
        public const string catalog_editorial_priv2 = "catalog_editorial_priv2";
        public const string catalog_editorial_time0 = "catalog_editorial_time0";
        public const string catalog_editorial_time1 = "catalog_editorial_time1";
        public const string catalog_editorial_time2 = "catalog_editorial_time2";
        public const string catalog_gameMediaTypes = "catalog_gameMediaTypes";
        public const string catalog_musicMediaTypes = "catalog_musicMediaTypes";
        public const string catalog_pointsBundleMediaTypes = "catalog_pointsBundleMediaTypes";
        public const string catalog_repurchasableMediaTypes = "catalog_repurchasableMediaTypes";
        public const string catalog_subscriptionMediaTypes = "catalog_subscriptionMediaTypes";
        public const string catalog_videoMediaTypes = "catalog_videoMediaTypes";
        public const string catalogwatcher_azure_connection_string = "catalogwatcher_azure_connection_string";
        public const string catalogwatcher_azure_connection_string_speech = "catalogwatcher_azure_connection_string_speech";
        public const string catalogwatcher_azure_feed_prefix = "catalogwatcher_azure_feed_prefix";
        public const string catalogwatcher_azure_feed_prefix_speech = "catalogwatcher_azure_feed_prefix_speech";
        public const string catalogwatcher_azure_feed_suffix = "catalogwatcher_azure_feed_suffix";
        public const string catalogwatcher_azure_feed_suffix_speech = "catalogwatcher_azure_feed_suffix_speech";
        public const string catalogwatcher_azure_storage_blob_format_date_part = "catalogwatcher_azure_storage_blob_format_date_part";
        public const string catalogwatcher_azure_storage_blob_format_delta = "catalogwatcher_azure_storage_blob_format_delta";
        public const string catalogwatcher_azure_storage_blob_format_delta_speech = "catalogwatcher_azure_storage_blob_format_delta_speech";
        public const string catalogwatcher_azure_storage_blob_format_full = "catalogwatcher_azure_storage_blob_format_full";
        public const string catalogwatcher_azure_storage_blob_format_full_speech = "catalogwatcher_azure_storage_blob_format_full_speech";
        public const string catalogwatcher_azure_storage_container = "catalogwatcher_azure_storage_container";
        public const string catalogwatcher_azure_storage_container_speech = "catalogwatcher_azure_storage_container_speech";
        public const string catalogwatcher_azure_storage_max_documents_per_batch = "catalogwatcher_azure_storage_max_documents_per_batch";
        public const string catalogwatcher_azure_storage_max_documents_per_batch_speech = "catalogwatcher_azure_storage_max_documents_per_batch_speech";
        public const string catalogwatcher_commands_timeout_in_secs = "catalogwatcher_commands_timeout_in_secs";
        public const string catalogwatcher_extractor_timeout_in_secs = "catalogwatcher_extractor_timeout_in_secs";
        public const string catalogwatcher_fast_esp_collection_name = "catalogwatcher_fast_esp_collection_name";
        public const string catalogwatcher_fast_esp_ingestion_port = "catalogwatcher_fast_esp_ingestion_port";
        public const string catalogwatcher_fast_esp_max_document_size = "catalogwatcher_fast_esp_max_document_size";
        public const string catalogwatcher_fast_esp_max_documents_per_batch = "catalogwatcher_fast_esp_max_documents_per_batch";
        public const string catalogwatcher_fast_esp_virtual_collection_name = "catalogwatcher_fast_esp_virtual_collection_name";
        public const string catalogwatcher_fast_wait_for_indexing = "catalogwatcher_fast_wait_for_indexing";
        public const string catalogwatcher_media_extractor_batch_size = "catalogwatcher_media_extractor_batch_size";
        public const string catalogwatcher_media_extractor_version = "catalogwatcher_media_extractor_version";
        public const string catalogwatcher_perform_and_log_validation_on_error = "catalogwatcher_perform_and_log_validation_on_error";
        public const string catalogwatcher_producer_consumer_media_max_queue_size = "catalogwatcher_producer_consumer_media_max_queue_size";
        public const string catalogwatcher_producer_consumer_speech_max_queue_size = "catalogwatcher_producer_consumer_speech_max_queue_size";
        public const string catalogwatcher_producer_consumer_video_max_queue_size = "catalogwatcher_producer_consumer_video_max_queue_size";
        public const string catalogwatcher_speech_extractor_batch_size = "catalogwatcher_speech_extractor_batch_size";
        public const string catalogwatcher_speech_extractor_timeout_in_secs = "catalogwatcher_speech_extractor_timeout_in_secs";
        public const string catalogwatcher_speech_extractor_version = "catalogwatcher_speech_extractor_version";
        public const string catalogwatcher_video_document_builder_firstpartyprovider = "catalogwatcher_video_document_builder_firstpartyprovider";
        public const string catalogwatcher_video_extractor_batch_size = "catalogwatcher_video_extractor_batch_size";
        public const string catalogwatcher_video_extractor_timeout_in_secs = "catalogwatcher_video_extractor_timeout_in_secs";
        public const string clean_clip_delete_window_minute = "clean_clip_delete_window_minute";
        public const string cleanser_clientDeadSec = "cleanser_clientDeadSec";
        public const string cleanser_EtxEventTarget = "cleanser_EtxEventTarget";
        public const string cleanser_fdbQueueMaxFreeEntriesCount = "cleanser_fdbQueueMaxFreeEntriesCount";
        public const string cleanser_fdbReconnectIntervalSec = "cleanser_fdbReconnectIntervalSec";
        public const string cleanser_fdbUpdateIntervalSec = "cleanser_fdbUpdateIntervalSec";
        public const string cleanser_log_target = "cleanser_log_target";
        public const string cleanser_maxQueueLength = "cleanser_maxQueueLength";
        public const string cleanser_maxTcpConnections = "cleanser_maxTcpConnections";
        public const string cleanser_watchDogTimerIntervalSec = "cleanser_watchDogTimerIntervalSec";
        public const string cleanser_workerThreadsPerProcessor = "cleanser_workerThreadsPerProcessor";
        public const string cleanser_XomFileTarget = "cleanser_XomFileTarget";
        public const string community_ownerNotifyCacheExpirySeconds = "community_ownerNotifyCacheExpirySeconds";
        public const string compPlugins_allowClientResultsSubmissions = "compPlugins_allowClientResultsSubmissions";
        public const string compPlugins_allowTimeAdjustment = "compPlugins_allowTimeAdjustment";
        public const string config_cacheRefreshInterval = "config_cacheRefreshInterval";
        public const string config_loadTitleConnectionTimeoutSeconds = "config_loadTitleConnectionTimeoutSeconds";
        public const string config_minEventInterval = "config_minEventInterval";
        public const string cron_deleteCompletedJobs = "cron_deleteCompletedJobs";
        public const string cron_jobCheckInterval = "cron_jobCheckInterval";
        public const string cron_load_job_max_sleep_time_milliseconds = "cron_load_job_max_sleep_time_milliseconds";
        public const string cron_requestThreads = "cron_requestThreads";
        public const string cron_retryInterval = "cron_retryInterval";
        public const string crux_allowTestAddPoints = "crux_allowTestAddPoints";
        public const string crux_allowTestCreateAccount = "crux_allowTestCreateAccount";
        public const string crux_MusicNetAESKeyType = "crux_MusicNetAESKeyType";
        public const string crux_MusicNetAESKeyVer = "crux_MusicNetAESKeyVer";
        public const string crux_MusicNetTokenMagicString = "crux_MusicNetTokenMagicString";
        public const string crux_MusicNetTokenSaltLen = "crux_MusicNetTokenSaltLen";
        public const string crux_passportSiteAddress = "crux_passportSiteAddress";
        public const string crux_useMusicNetForProvisioning = "crux_useMusicNetForProvisioning";
        public const string crux_VODLicenseWindowInMinutes = "crux_VODLicenseWindowInMinutes";
        public const string crypto_serviceKeyType = "crypto_serviceKeyType";
        public const string crypto_serviceKeyVersion = "crypto_serviceKeyVersion";
        public const string CTPPurchase_fastFailMaxThreshold = "CTPPurchase_fastFailMaxThreshold";
        public const string CTPPurchase_fastFailMinThreshold = "CTPPurchase_fastFailMinThreshold";
        public const string CTPPurchase_fastFailThrottling = "CTPPurchase_fastFailThrottling";
        public const string CTPPurchase_fastFailWindow = "CTPPurchase_fastFailWindow";
        public const string dmp_addPromotionalBalanceMaxAttempts = "dmp_addPromotionalBalanceMaxAttempts";
        public const string dmp_addPromotionalBalanceTimeoutSeconds = "dmp_addPromotionalBalanceTimeoutSeconds";
        public const string dmp_allowUrlOverride = "dmp_allowUrlOverride";
        public const string dmp_auditEnabled = "dmp_auditEnabled";
        public const string dmp_autoRegisterUsers = "dmp_autoRegisterUsers";
        public const string dmp_blacklistBlockIntervalSeconds = "dmp_blacklistBlockIntervalSeconds";
        public const string dmp_blacklistTimeoutThresholdCount = "dmp_blacklistTimeoutThresholdCount";
        public const string dmp_blacklistTimeoutTimespanSeconds = "dmp_blacklistTimeoutTimespanSeconds";
        public const string dmp_cancelPurchaseItemMaxAttempts = "dmp_cancelPurchaseItemMaxAttempts";
        public const string dmp_cancelPurchaseItemTimeoutSeconds = "dmp_cancelPurchaseItemTimeoutSeconds";
        public const string dmp_clientCertSubject = "dmp_clientCertSubject";
        public const string Dmp_fastFailMaxThreshold = "Dmp_fastFailMaxThreshold";
        public const string Dmp_fastFailMinThreshold = "Dmp_fastFailMinThreshold";
        public const string Dmp_fastFailWindow = "Dmp_fastFailWindow";
        public const string dmp_getBalanceDetailsMaxAttempts = "dmp_getBalanceDetailsMaxAttempts";
        public const string dmp_getBalanceDetailsTimeoutSeconds = "dmp_getBalanceDetailsTimeoutSeconds";
        public const string dmp_getBalanceMaxAttempts = "dmp_getBalanceMaxAttempts";
        public const string dmp_getBalanceTimeoutSeconds = "dmp_getBalanceTimeoutSeconds";
        public const string dmp_maxAcquisitionTitleLength = "dmp_maxAcquisitionTitleLength";
        public const string dmp_maxItemCategoryLength = "dmp_maxItemCategoryLength";
        public const string dmp_maxItemTitleLength = "dmp_maxItemTitleLength";
        public const string dmp_maxPointsBalance = "dmp_maxPointsBalance";
        public const string dmp_pumpPurchasesQueue = "dmp_pumpPurchasesQueue";
        public const string dmp_pumpRewardsQueue = "dmp_pumpRewardsQueue";
        public const string dmp_purchaseItemMaxAttempts = "dmp_purchaseItemMaxAttempts";
        public const string dmp_purchaseItemTimeoutSeconds = "dmp_purchaseItemTimeoutSeconds";
        public const string dmp_purchaseTransactionConsiderFailedSeconds = "dmp_purchaseTransactionConsiderFailedSeconds";
        public const string dmp_purchaseTransactionExpiredSeconds = "dmp_purchaseTransactionExpiredSeconds";
        public const string dmp_queuePumpIntervalSeconds = "dmp_queuePumpIntervalSeconds";
        public const string dmp_registerUserMaxAttempts = "dmp_registerUserMaxAttempts";
        public const string dmp_registerUserTimeoutSeconds = "dmp_registerUserTimeoutSeconds";
        public const string dmp_rewardTransactionExpiredSeconds = "dmp_rewardTransactionExpiredSeconds";
        public const string dmp_tenantID = "dmp_tenantID";
        public const string dmp_transactionUrl = "dmp_transactionUrl";
        public const string dmp_transferBalanceMaxAttempts = "dmp_transferBalanceMaxAttempts";
        public const string dmp_transferBalanceTimeoutSeconds = "dmp_transferBalanceTimeoutSeconds";
        public const string dmp_transferPointsTimeoutSeconds = "dmp_transferPointsTimeoutSeconds";
        public const string DmpUps_fastFailMaxThreshold = "DmpUps_fastFailMaxThreshold";
        public const string DmpUps_fastFailMinThreshold = "DmpUps_fastFailMinThreshold";
        public const string DmpUps_fastFailWindow = "DmpUps_fastFailWindow";
        public const string download_contentDirectory = "download_contentDirectory";
        public const string etx_default_header_version = "etx_default_header_version";
        public const string eventsink_excludeApps = "eventsink_excludeApps";
        public const string fastEsp_allow_debug_xslt = "fastEsp_allow_debug_xslt";
        public const string fastEsp_persist_connection_in_secs = "fastEsp_persist_connection_in_secs";
        public const string fastEsp_use_result_views = "fastEsp_use_result_views";
        public const string fastfail_bucketCount = "fastfail_bucketCount";
        public const string fastfail_disableThrottling = "fastfail_disableThrottling";
        public const string feapp_completionPortThreads = "feapp_completionPortThreads";
        public const string feapp_workerThreads = "feapp_workerThreads";
        public const string feedback_coeffBias = "feedback_coeffBias";
        public const string feedback_coeffFudgeFactor = "feedback_coeffFudgeFactor";
        public const string feedback_coeffNegativeReview = "feedback_coeffNegativeReview";
        public const string feedback_coeffPositiveReview = "feedback_coeffPositiveReview";
        public const string feedback_coeffRange = "feedback_coeffRange";
        public const string feedback_coeffSlope = "feedback_coeffSlope";
        public const string feedback_maxComplaintType = "feedback_maxComplaintType";
        public const string feedback_maxFeedbackTypes = "feedback_maxFeedbackTypes";
        public const string feedback_maxReviewType = "feedback_maxReviewType";
        public const string feedback_minFeedbackServiceType = "feedback_minFeedbackServiceType";
        public const string feedback_ratingDecayFactor = "feedback_ratingDecayFactor";
        public const string feedback_ratingDecayFloor = "feedback_ratingDecayFloor";
        public const string feedback_reviewIgnoreThreshold = "feedback_reviewIgnoreThreshold";
        public const string finbus_certificateSubject = "finbus_certificateSubject";
        public const string finbus_clientPartnerId = "finbus_clientPartnerId";
        public const string finbus_closeTimeout = "finbus_closeTimeout";
        public const string finbus_endpointAddress = "finbus_endpointAddress";
        public const string finbus_fastFailMaxThreshold = "finbus_fastFailMaxThreshold";
        public const string finbus_fastFailMinThreshold = "finbus_fastFailMinThreshold";
        public const string finbus_fastFailWindow = "finbus_fastFailWindow";
        public const string finbus_getPendingItemsMaxItems = "finbus_getPendingItemsMaxItems";
        public const string finbus_ignoreSslPolicyErrors = "finbus_ignoreSslPolicyErrors";
        public const string finbus_maxActiveRequests = "finbus_maxActiveRequests";
        public const string finbus_maxBufferPoolSize = "finbus_maxBufferPoolSize";
        public const string finbus_maxBufferSize = "finbus_maxBufferSize";
        public const string finbus_maxConnections = "finbus_maxConnections";
        public const string finbus_maxReceivedMessageSize = "finbus_maxReceivedMessageSize";
        public const string finbus_openTimeout = "finbus_openTimeout";
        public const string finbus_pumpQueue = "finbus_pumpQueue";
        public const string finbus_queuePumpIntervalSeconds = "finbus_queuePumpIntervalSeconds";
        public const string finbus_receiveTimeout = "finbus_receiveTimeout";
        public const string finbus_sendTimeout = "finbus_sendTimeout";
        public const string finbus_throttleWaitMilliseconds = "finbus_throttleWaitMilliseconds";
        public const string finbus_transactionConsiderFailureSeconds = "finbus_transactionConsiderFailureSeconds";
        public const string finbus_transactionExpiredSeconds = "finbus_transactionExpiredSeconds";
        public const string fse_bookmarkDaysFloor = "fse_bookmarkDaysFloor";
        public const string fse_bookmarkDaysThreshold = "fse_bookmarkDaysThreshold";
        public const string fse_bookmarkHoursFloor = "fse_bookmarkHoursFloor";
        public const string fse_bookmarkHoursThreshold = "fse_bookmarkHoursThreshold";
        public const string fse_bookmarkMinutesFloor = "fse_bookmarkMinutesFloor";
        public const string fse_bookmarkMinutesThreshold = "fse_bookmarkMinutesThreshold";
        public const string fse_configChange = "fse_configChange";
        public const string fse_reservationSeconds = "fse_reservationSeconds";
        public const string fse_reservationWaitSeconds = "fse_reservationWaitSeconds";
        public const string fse_reservationWaitSecondsMaximum = "fse_reservationWaitSecondsMaximum";
        public const string geofencing_allowAccessOnGeoInfoExceptions = "geofencing_allowAccessOnGeoInfoExceptions";
        public const string geofencing_allowAccessOnGeoInfoNulls = "geofencing_allowAccessOnGeoInfoNulls";
        public const string geofencing_maximumDaysBetweenGeoDbUpdate = "geofencing_maximumDaysBetweenGeoDbUpdate";
        public const string geofencing_offerGeoFencingEnabled = "geofencing_offerGeoFencingEnabled";
        public const string geofencing_pathToGeoDb = "geofencing_pathToGeoDb";
        public const string geofencing_videoGeoFencingEnabled = "geofencing_videoGeoFencingEnabled";
        public const string global_buildVersion = "global_buildVersion";
        public const string global_enableTestApis = "global_enableTestApis";
        public const string global_protocolVersion = "global_protocolVersion";
        public const string healthcheck_executionPeriodInSeconds = "healthcheck_executionPeriodInSeconds";
        public const string kdcsvc_askdc_checkForDos = "kdcsvc_askdc_checkForDos";
        public const string kdcsvc_askdc_DoS_cacheTimeMillis = "kdcsvc_askdc_DoS_cacheTimeMillis";
        public const string kdcsvc_askdc_DoS_numEntries = "kdcsvc_askdc_DoS_numEntries";
        public const string kdcsvc_askdc_DoS_tooSoonTimeMillis = "kdcsvc_askdc_DoS_tooSoonTimeMillis";
        public const string kdcsvc_askdc_DoS2_blockingTime = "kdcsvc_askdc_DoS2_blockingTime";
        public const string kdcsvc_askdc_DoS2_cacheSize = "kdcsvc_askdc_DoS2_cacheSize";
        public const string kdcsvc_askdc_DoS2_enabled = "kdcsvc_askdc_DoS2_enabled";
        public const string kdcsvc_askdc_DoS2_interval = "kdcsvc_askdc_DoS2_interval";
        public const string kdcsvc_askdc_DoS2_maxRequests = "kdcsvc_askdc_DoS2_maxRequests";
        public const string kdcsvc_askdc_echo_enabled = "kdcsvc_askdc_echo_enabled";
        public const string kdcsvc_askdc_echo_lifetimeInSeconds = "kdcsvc_askdc_echo_lifetimeInSeconds";
        public const string kdcsvc_askdc_keyVersion = "kdcsvc_askdc_keyVersion";
        public const string kdcsvc_askdc_machine_allowLegacyKey = "kdcsvc_askdc_machine_allowLegacyKey";
        public const string kdcsvc_askdc_timeSkewSeconds = "kdcsvc_askdc_timeSkewSeconds";
        public const string kdcsvc_core_ATQThreads = "kdcsvc_core_ATQThreads";
        public const string kdcsvc_managed_command_timeout = "kdcsvc_managed_command_timeout";
        public const string kdcsvc_managed_limitEventWarnRecurranceInSeconds = "kdcsvc_managed_limitEventWarnRecurranceInSeconds";
        public const string kdcsvc_managed_limitThreadPercentDeactivationThreshold = "kdcsvc_managed_limitThreadPercentDeactivationThreshold";
        public const string kdcsvc_managed_limitThreadPercentPerPartition = "kdcsvc_managed_limitThreadPercentPerPartition";
        public const string kdcsvc_managed_limitThreadPercentThreshold = "kdcsvc_managed_limitThreadPercentThreshold";
        public const string kdcsvc_managed_rpsPCLifetimeInSeconds = "kdcsvc_managed_rpsPCLifetimeInSeconds";
        public const string kdcsvc_managed_rpsXenonLifetimeInSeconds = "kdcsvc_managed_rpsXenonLifetimeInSeconds";
        public const string kdcsvc_managed_simulateDbLatencyInMs = "kdcsvc_managed_simulateDbLatencyInMs";
        public const string kdcsvc_xkdc_allowUnknownVersion = "kdcsvc_xkdc_allowUnknownVersion";
        public const string kdcsvc_xkdc_cacheLifeTimeInSeconds = "kdcsvc_xkdc_cacheLifeTimeInSeconds";
        public const string kdcsvc_xkdc_cacheTableSize = "kdcsvc_xkdc_cacheTableSize";
        public const string kdcsvc_xkdc_DoS_checkForDos = "kdcsvc_xkdc_DoS_checkForDos";
        public const string kdcsvc_xkdc_DoS_numEntries = "kdcsvc_xkdc_DoS_numEntries";
        public const string kdcsvc_xkdc_DoS2_blockingTime = "kdcsvc_xkdc_DoS2_blockingTime";
        public const string kdcsvc_xkdc_DoS2_cacheSize = "kdcsvc_xkdc_DoS2_cacheSize";
        public const string kdcsvc_xkdc_DoS2_enabled = "kdcsvc_xkdc_DoS2_enabled";
        public const string kdcsvc_xkdc_DoS2_interval = "kdcsvc_xkdc_DoS2_interval";
        public const string kdcsvc_xkdc_DoS2_maxRequests = "kdcsvc_xkdc_DoS2_maxRequests";
        public const string kdcsvc_xkdc_enableUserMachineTrust = "kdcsvc_xkdc_enableUserMachineTrust";
        public const string kdcsvc_xkdc_enforceClientVersion = "kdcsvc_xkdc_enforceClientVersion";
        public const string kdcsvc_xkdc_hashTableSize = "kdcsvc_xkdc_hashTableSize";
        public const string kdcsvc_xkdc_ignoreDuplicateRequests = "kdcsvc_xkdc_ignoreDuplicateRequests";
        public const string kdcsvc_xkdc_minTicketLifetimeSeconds = "kdcsvc_xkdc_minTicketLifetimeSeconds";
        public const string kdcsvc_xkdc_removeUserPrivilegesOnRequiresManagement = "kdcsvc_xkdc_removeUserPrivilegesOnRequiresManagement";
        public const string kdcsvc_xkdc_RequestCache_enabled = "kdcsvc_xkdc_RequestCache_enabled";
        public const string kdcsvc_xkdc_RequestCache_lifetimeInSeconds = "kdcsvc_xkdc_RequestCache_lifetimeInSeconds";
        public const string kdcsvc_xkdc_timeSkewSeconds = "kdcsvc_xkdc_timeSkewSeconds";
        public const string kdcsvc_xkdc_userAuthorizationBackwardsCompatibility = "kdcsvc_xkdc_userAuthorizationBackwardsCompatibility";
        public const string kdcsvc_xkdc_useUniqueSigninKey = "kdcsvc_xkdc_useUniqueSigninKey";
        public const string kdcsvc_xmacs_acceptDevKits = "kdcsvc_xmacs_acceptDevKits";
        public const string kdcsvc_xmacs_consoleExceptionList = "kdcsvc_xmacs_consoleExceptionList";
        public const string kdcsvc_xmacs_consoleTypeMask = "kdcsvc_xmacs_consoleTypeMask";
        public const string kdcsvc_xmacs_disableDOS = "kdcsvc_xmacs_disableDOS";
        public const string kdcsvc_xmacs_DoS2_blockingTime = "kdcsvc_xmacs_DoS2_blockingTime";
        public const string kdcsvc_xmacs_DoS2_cacheSize = "kdcsvc_xmacs_DoS2_cacheSize";
        public const string kdcsvc_xmacs_DoS2_enabled = "kdcsvc_xmacs_DoS2_enabled";
        public const string kdcsvc_xmacs_DoS2_interval = "kdcsvc_xmacs_DoS2_interval";
        public const string kdcsvc_xmacs_DoS2_maxRequests = "kdcsvc_xmacs_DoS2_maxRequests";
        public const string kdcsvc_xmacs_DOSStage1CacheTimeout = "kdcsvc_xmacs_DOSStage1CacheTimeout";
        public const string kdcsvc_xmacs_DOSStage2CacheTimeout = "kdcsvc_xmacs_DOSStage2CacheTimeout";
        public const string kdcsvc_xmacs_hashListPercentageWarning = "kdcsvc_xmacs_hashListPercentageWarning";
        public const string kdcsvc_xmacs_keyEncryptionKeyVersion = "kdcsvc_xmacs_keyEncryptionKeyVersion";
        public const string kdcsvc_xmacs_LimitedPcTokens = "kdcsvc_xmacs_LimitedPcTokens";
        public const string kdcsvc_xmacs_maxAllowancePerHour = "kdcsvc_xmacs_maxAllowancePerHour";
        public const string kdcsvc_xmacs_nCipherInitTimeoutInSecs = "kdcsvc_xmacs_nCipherInitTimeoutInSecs";
        public const string kdcsvc_xmacs_PUIDBlockSize = "kdcsvc_xmacs_PUIDBlockSize";
        public const string kdcsvc_xmacs_timeSkewSeconds = "kdcsvc_xmacs_timeSkewSeconds";
        public const string kdcsvc_xmacs_use_xcrypto = "kdcsvc_xmacs_use_xcrypto";
        public const string kdcsvc_xmacs_useNCipher = "kdcsvc_xmacs_useNCipher";
        public const string kdcsvc_xmacs_UseTestMasterSigningKey = "kdcsvc_xmacs_UseTestMasterSigningKey";
        public const string kdcsvc_xmacs_UseTestXmacsKey = "kdcsvc_xmacs_UseTestXmacsKey";
        public const string lbsvr_BufferManagerPageSize = "lbsvr_BufferManagerPageSize";
        public const string lbsvr_DatabaseWriteThreads = "lbsvr_DatabaseWriteThreads";
        public const string lbsvr_DbLoadingThreadCount = "lbsvr_DbLoadingThreadCount";
        public const string lbsvr_DbLoadIntervalSeconds = "lbsvr_DbLoadIntervalSeconds";
        public const string lbsvr_DbLoadRetryCount = "lbsvr_DbLoadRetryCount";
        public const string lbsvr_FullNamePagingFile = "lbsvr_FullNamePagingFile";
        public const string lbsvr_IOThreadCount = "lbsvr_IOThreadCount";
        public const string lbsvr_JobResetHour = "lbsvr_JobResetHour";
        public const string lbsvr_MaxCSndBuffer = "lbsvr_MaxCSndBuffer";
        public const string lbsvr_NetHelloTimeout = "lbsvr_NetHelloTimeout";
        public const string lbsvr_NetMaxConnections = "lbsvr_NetMaxConnections";
        public const string lbsvr_PagingFileInitialSize = "lbsvr_PagingFileInitialSize";
        public const string lbsvr_PersisterRetryInterval = "lbsvr_PersisterRetryInterval";
        public const string lbsvr_ReservedPhysicalMemory = "lbsvr_ReservedPhysicalMemory";
        public const string lbsvr_SizeRcvBuffer = "lbsvr_SizeRcvBuffer";
        public const string lbsvr_SizeSndBuffer = "lbsvr_SizeSndBuffer";
        public const string lbsvr_VirtualAllocSize = "lbsvr_VirtualAllocSize";
        public const string leet_webcommunity_db_Enabled = "leet_webcommunity_db_Enabled";
        public const string Lists_ConfigChange = "Lists_ConfigChange";
        public const string Lists_ValidateXmlMode = "Lists_ValidateXmlMode";
        public const string livecache_defaultConnectionLimit = "livecache_defaultConnectionLimit";
        public const string livecache_errorResultTTL = "livecache_errorResultTTL";
        public const string livecache_forwardRetryInterval = "livecache_forwardRetryInterval";
        public const string livecache_lastModified = "livecache_lastModified";
        public const string livecache_maxHeaderCollectionCount = "livecache_maxHeaderCollectionCount";
        public const string livecache_MaxRequestRatePerUser = "livecache_MaxRequestRatePerUser";
        public const string livecache_serviceEnabled = "livecache_serviceEnabled";
        public const string livecache_UserLimitInMinutes = "livecache_UserLimitInMinutes";
        public const string livecache_UserLimitRandMinutes = "livecache_UserLimitRandMinutes";
        public const string livecontent_sites = "livecontent_sites";
        public const string liveinfo_clientconfiglimit = "liveinfo_clientconfiglimit";
        public const string liveoffer_ContentCheckMode = "liveoffer_ContentCheckMode";
        public const string livepxy_forwardHeaders = "livepxy_forwardHeaders";
        public const string livepxy_MasterKeyVersion = "livepxy_MasterKeyVersion";
        public const string livepxy_maxGamerTagLookupsPerRequest = "livepxy_maxGamerTagLookupsPerRequest";
        public const string livepxy_maxPUIDLookupsPerRequest = "livepxy_maxPUIDLookupsPerRequest";
        public const string livepxy_SiteKeyType = "livepxy_SiteKeyType";
        public const string livetitle_allowBaseVersionZero = "livetitle_allowBaseVersionZero";
        public const string locale_AE = "locale_AE";
        public const string locale_AT = "locale_AT";
        public const string locale_AU = "locale_AU";
        public const string locale_BE = "locale_BE";
        public const string locale_BR = "locale_BR";
        public const string locale_CA = "locale_CA";
        public const string locale_CH = "locale_CH";
        public const string locale_CL = "locale_CL";
        public const string locale_CO = "locale_CO";
        public const string locale_CZ = "locale_CZ";
        public const string locale_DE = "locale_DE";
        public const string locale_DK = "locale_DK";
        public const string locale_ES = "locale_ES";
        public const string locale_FI = "locale_FI";
        public const string locale_FR = "locale_FR";
        public const string locale_GB = "locale_GB";
        public const string locale_GR = "locale_GR";
        public const string locale_HK = "locale_HK";
        public const string locale_HU = "locale_HU";
        public const string locale_IE = "locale_IE";
        public const string locale_IT = "locale_IT";
        public const string locale_JP = "locale_JP";
        public const string locale_KR = "locale_KR";
        public const string locale_language1 = "locale_language1";
        public const string locale_language10 = "locale_language10";
        public const string locale_language11 = "locale_language11";
        public const string locale_language12 = "locale_language12";
        public const string locale_language13 = "locale_language13";
        public const string locale_language14 = "locale_language14";
        public const string locale_language15 = "locale_language15";
        public const string locale_language16 = "locale_language16";
        public const string locale_language17 = "locale_language17";
        public const string locale_language18 = "locale_language18";
        public const string locale_language19 = "locale_language19";
        public const string locale_language2 = "locale_language2";
        public const string locale_language20 = "locale_language20";
        public const string locale_language3 = "locale_language3";
        public const string locale_language4 = "locale_language4";
        public const string locale_language5 = "locale_language5";
        public const string locale_language6 = "locale_language6";
        public const string locale_language7 = "locale_language7";
        public const string locale_language8 = "locale_language8";
        public const string locale_language9 = "locale_language9";
        public const string locale_MX = "locale_MX";
        public const string locale_NL = "locale_NL";
        public const string locale_NO = "locale_NO";
        public const string locale_NZ = "locale_NZ";
        public const string locale_PL = "locale_PL";
        public const string locale_PT = "locale_PT";
        public const string locale_RU = "locale_RU";
        public const string locale_SE = "locale_SE";
        public const string locale_SG = "locale_SG";
        public const string locale_TW = "locale_TW";
        public const string locale_US = "locale_US";
        public const string locale_validLocales = "locale_validLocales";
        public const string locale_ZA = "locale_ZA";
        public const string logCollectorModule_badDigestResponseCode = "logCollectorModule_badDigestResponseCode";
        public const string logCollectorModule_returnFixedResponseCodeForAllCalls = "logCollectorModule_returnFixedResponseCodeForAllCalls";
        public const string lspfd_databaseCachingEnabled = "lspfd_databaseCachingEnabled";
        public const string lspfd_fastFailBlockIntervalSeconds = "lspfd_fastFailBlockIntervalSeconds";
        public const string lspfd_fastFailTimeoutThresholdCount = "lspfd_fastFailTimeoutThresholdCount";
        public const string lspfd_fastFailTimeoutTimespanSeconds = "lspfd_fastFailTimeoutTimespanSeconds";
        public const string MasterKey_currentEncryptKeyVersion = "MasterKey_currentEncryptKeyVersion";
        public const string mix_default_LeaderBoardServer = "mix_default_LeaderBoardServer";
        public const string mix_default_MatchServer = "mix_default_MatchServer";
        public const string mix_productMgmt_imageCleanup = "mix_productMgmt_imageCleanup";
        public const string mix_titleMgmt_kdcReloadTimeout = "mix_titleMgmt_kdcReloadTimeout";
        public const string mix_titlemgmt_liveconnectdbhost = "mix_titlemgmt_liveconnectdbhost";
        public const string mix_wcfMaxReceivedMsgSize = "mix_wcfMaxReceivedMsgSize";
        public const string mixsettingsmanagement_etx_vortex_mgmt_timeout_ms = "mixsettingsmanagement_etx_vortex_mgmt_timeout_ms";
        public const string msnrr_allowUrlOverride = "msnrr_allowUrlOverride";
        public const string msnrr_failFastBlockIntervalSeconds = "msnrr_failFastBlockIntervalSeconds";
        public const string msnrr_failFastThresholdCount = "msnrr_failFastThresholdCount";
        public const string msnrr_failFastThresholdIntervalSeconds = "msnrr_failFastThresholdIntervalSeconds";
        public const string msnrr_getRatingAveragesTimeoutSeconds = "msnrr_getRatingAveragesTimeoutSeconds";
        public const string msnrr_getRatingByUserWithAverageTimeoutSeconds = "msnrr_getRatingByUserWithAverageTimeoutSeconds";
        public const string msnrr_ignorefdrequests = "msnrr_ignorefdrequests";
        public const string msnrr_saveRatingTimeoutSeconds = "msnrr_saveRatingTimeoutSeconds";
        public const string msnrr_serviceAggregatorUrl = "msnrr_serviceAggregatorUrl";
        public const string msnrr_serviceSingleRatingUrl = "msnrr_serviceSingleRatingUrl";
        public const string msnrr_testContentType = "msnrr_testContentType";
        public const string msnrr_testUserPuid = "msnrr_testUserPuid";
        public const string musicnet_addSubscriptionOfferTimeoutSeconds = "musicnet_addSubscriptionOfferTimeoutSeconds";
        public const string musicnet_addTrialSubscriptionOfferTimeoutSeconds = "musicnet_addTrialSubscriptionOfferTimeoutSeconds";
        public const string musicnet_allowUrlOverride = "musicnet_allowUrlOverride";
        public const string musicnet_apiMaxRetryAttempts = "musicnet_apiMaxRetryAttempts";
        public const string musicnet_auditEnabled = "musicnet_auditEnabled";
        public const string musicnet_cancelSubscriptionOfferTimeoutSeconds = "musicnet_cancelSubscriptionOfferTimeoutSeconds";
        public const string musicnet_closeAccountTimeoutSeconds = "musicnet_closeAccountTimeoutSeconds";
        public const string musicnet_createAccountTimeoutSeconds = "musicnet_createAccountTimeoutSeconds";
        public const string musicnet_dmpPurchaseGlobalMusicCampaignID = "musicnet_dmpPurchaseGlobalMusicCampaignID";
        public const string musicnet_dmpPurchaseGlobalMusicSKU = "musicnet_dmpPurchaseGlobalMusicSKU";
        public const string musicnet_dmpPurchaseMusicAlbumCategory = "musicnet_dmpPurchaseMusicAlbumCategory";
        public const string musicnet_dmpPurchaseMusicTrackCategory = "musicnet_dmpPurchaseMusicTrackCategory";
        public const string musicnet_dmpPurchaseTitleArtistFormatString = "musicnet_dmpPurchaseTitleArtistFormatString";
        public const string musicnet_downgradeSubscriptionOfferTimeoutSeconds = "musicnet_downgradeSubscriptionOfferTimeoutSeconds";
        public const string musicnet_endTrialSubscriptionOfferTimeoutSeconds = "musicnet_endTrialSubscriptionOfferTimeoutSeconds";
        public const string musicnet_failFastBlockIntervalSeconds = "musicnet_failFastBlockIntervalSeconds";
        public const string musicnet_failFastThresholdCount = "musicnet_failFastThresholdCount";
        public const string musicnet_failFastThresholdIntervalSeconds = "musicnet_failFastThresholdIntervalSeconds";
        public const string musicnet_getServiceConfigurationTimeoutSeconds = "musicnet_getServiceConfigurationTimeoutSeconds";
        public const string musicnet_getServiceConfigurationUrl = "musicnet_getServiceConfigurationUrl";
        public const string musicnet_offerIdMusicNetSkuOverrides = "musicnet_offerIdMusicNetSkuOverrides";
        public const string musicnet_pumpPurchasesQueue = "musicnet_pumpPurchasesQueue";
        public const string musicnet_purchaseAssetsTimeoutSeconds = "musicnet_purchaseAssetsTimeoutSeconds";
        public const string musicnet_purchaseTransactionConsiderFailedSeconds = "musicnet_purchaseTransactionConsiderFailedSeconds";
        public const string musicnet_purchaseTransactionExpiredSeconds = "musicnet_purchaseTransactionExpiredSeconds";
        public const string musicnet_queuePumpIntervalSeconds = "musicnet_queuePumpIntervalSeconds";
        public const string musicnet_resumeAccountTimeoutSeconds = "musicnet_resumeAccountTimeoutSeconds";
        public const string musicnet_retailerID = "musicnet_retailerID";
        public const string musicnet_subscriptionSku = "musicnet_subscriptionSku";
        public const string musicnet_suspendAccountTimeoutSeconds = "musicnet_suspendAccountTimeoutSeconds";
        public const string musicnet_transferPurchaseDBEntitlementsTimeoutSeconds = "musicnet_transferPurchaseDBEntitlementsTimeoutSeconds";
        public const string musicnet_trialSubscriptionSku = "musicnet_trialSubscriptionSku";
        public const string musicnet_upgradeSubscriptionOfferTimeoutSeconds = "musicnet_upgradeSubscriptionOfferTimeoutSeconds";
        public const string nameResolver_ruleExpirationHours = "nameResolver_ruleExpirationHours";
        public const string NotificationCache_fastFailBlockIntervalSeconds = "NotificationCache_fastFailBlockIntervalSeconds";
        public const string NotificationCache_fastFailTimeoutThresholdCount = "NotificationCache_fastFailTimeoutThresholdCount";
        public const string NotificationCache_fastFailTimeoutTimespanSeconds = "NotificationCache_fastFailTimeoutTimespanSeconds";
        public const string NotificationCache_replyTimeout = "NotificationCache_replyTimeout";
        public const string offer_cacheTimeSeconds = "offer_cacheTimeSeconds";
        public const string partnermgr_webCaches = "partnermgr_webCaches";
        public const string passport_blacklistBlockIntervalSeconds = "passport_blacklistBlockIntervalSeconds";
        public const string passport_blacklistTimeoutThresholdCount = "passport_blacklistTimeoutThresholdCount";
        public const string passport_blacklistTimeoutTimespanSeconds = "passport_blacklistTimeoutTimespanSeconds";
        public const string passport_clientCertName = "passport_clientCertName";
        public const string passport_fakeService = "passport_fakeService";
        public const string passport_partnerCallTimeoutSeconds = "passport_partnerCallTimeoutSeconds";
        public const string passport_partnerUrl = "passport_partnerUrl";
        public const string passport_publicKeyCert = "passport_publicKeyCert";
        public const string passport_publicKeyCertUrl = "passport_publicKeyCertUrl";
        public const string passport_siteAddress = "passport_siteAddress";
        public const string passport_siteAddressMsn = "passport_siteAddressMsn";
        public const string passport_siteId = "passport_siteId";
        public const string passport_sitePolicy = "passport_sitePolicy";
        public const string passport_sitePolicyMsn = "passport_sitePolicyMsn";
        public const string PassportCreation_fastFailMaxThreshold = "PassportCreation_fastFailMaxThreshold";
        public const string PassportCreation_fastFailMinThreshold = "PassportCreation_fastFailMinThreshold";
        public const string PassportCreation_fastFailWindow = "PassportCreation_fastFailWindow";
        public const string PassportCredentials_fastFailMaxThreshold = "PassportCredentials_fastFailMaxThreshold";
        public const string PassportCredentials_fastFailMinThreshold = "PassportCredentials_fastFailMinThreshold";
        public const string PassportCredentials_fastFailWindow = "PassportCredentials_fastFailWindow";
        public const string PassportLogin_fastFailMaxThreshold = "PassportLogin_fastFailMaxThreshold";
        public const string PassportLogin_fastFailMinThreshold = "PassportLogin_fastFailMinThreshold";
        public const string PassportLogin_fastFailWindow = "PassportLogin_fastFailWindow";
        public const string presence_AffiliatesAvoidingMeListSize = "presence_AffiliatesAvoidingMeListSize";
        public const string presence_AffiliatesCompletedGameListSize = "presence_AffiliatesCompletedGameListSize";
        public const string presence_AffiliatesEncounteredListSize = "presence_AffiliatesEncounteredListSize";
        public const string presence_AffiliatesFavoritesListSize = "presence_AffiliatesFavoritesListSize";
        public const string presence_AffiliatesNegativeFeedbackListSize = "presence_AffiliatesNegativeFeedbackListSize";
        public const string presence_AffiliatesPositiveFeedbackListSize = "presence_AffiliatesPositiveFeedbackListSize";
        public const string presence_BucketReloadDelay = "presence_BucketReloadDelay";
        public const string presence_ConcurrentSQLThreads = "presence_ConcurrentSQLThreads";
        public const string presence_ContextDurationAlertLimit = "presence_ContextDurationAlertLimit";
        public const string presence_DeadSgOnFailedQVal = "presence_DeadSgOnFailedQVal";
        public const string presence_EnableRichPresence = "presence_EnableRichPresence";
        public const string presence_ExpirationCheckInterval = "presence_ExpirationCheckInterval";
        public const string presence_HeartbeatDelay = "presence_HeartbeatDelay";
        public const string presence_IdleQValsCheck = "presence_IdleQValsCheck";
        public const string presence_MaxFriends = "presence_MaxFriends";
        public const string presence_MaxNumPoolBuffers = "presence_MaxNumPoolBuffers";
        public const string presence_MaxPresenceUsers = "presence_MaxPresenceUsers";
        public const string presence_MaxQValsPerHeartbeat = "presence_MaxQValsPerHeartbeat";
        public const string presence_MaxRichPresenceBytes = "presence_MaxRichPresenceBytes";
        public const string presence_MessageTimeout = "presence_MessageTimeout";
        public const string presence_MessageTypeExpiration = "presence_MessageTypeExpiration";
        public const string presence_MessagingDailyRecipients = "presence_MessagingDailyRecipients";
        public const string presence_MessagingDailySends = "presence_MessagingDailySends";
        public const string presence_NumSQLThreads = "presence_NumSQLThreads";
        public const string presence_PeerPort = "presence_PeerPort";
        public const string presence_PoolBufferSize = "presence_PoolBufferSize";
        public const string presence_PresUserCleanupDelay = "presence_PresUserCleanupDelay";
        public const string presence_pubsubEventTimeout = "presence_pubsubEventTimeout";
        public const string presence_pubsubEventUrl = "presence_pubsubEventUrl";
        public const string presence_pubsubNotificationEnabled = "presence_pubsubNotificationEnabled";
        public const string presence_QueryAffiliatesOkToPeerSubscribe = "presence_QueryAffiliatesOkToPeerSubscribe";
        public const string presence_QValRetryDelays = "presence_QValRetryDelays";
        public const string presence_RichPresenceDebug = "presence_RichPresenceDebug";
        public const string presence_SGIndexSize = "presence_SGIndexSize";
        public const string presence_SGQValRecvPort = "presence_SGQValRecvPort";
        public const string presence_SGQValSendPort = "presence_SGQValSendPort";
        public const string presence_StartNumPoolBuffers = "presence_StartNumPoolBuffers";
        public const string presence_StateBitsNotifyWhitelist = "presence_StateBitsNotifyWhitelist";
        public const string presence_StoreStateInVelocity = "presence_StoreStateInVelocity";
        public const string presence_UserIndexSize = "presence_UserIndexSize";
        public const string presence_ValidMessageTypes = "presence_ValidMessageTypes";
        public const string presence_WebUserTimeout = "presence_WebUserTimeout";
        public const string presence_WelcomeToNewConsoleMessage = "presence_WelcomeToNewConsoleMessage";
        public const string presence_WelcomeToXboxLiveMessage = "presence_WelcomeToXboxLiveMessage";
        public const string presence_XBoxIndexSize = "presence_XBoxIndexSize";
        public const string presence_XonWatchIPs = "presence_XonWatchIPs";
        public const string PresenceCache_fastFailBlockIntervalSeconds = "PresenceCache_fastFailBlockIntervalSeconds";
        public const string PresenceCache_fastFailTimeoutThresholdCount = "PresenceCache_fastFailTimeoutThresholdCount";
        public const string PresenceCache_fastFailTimeoutTimespanSeconds = "PresenceCache_fastFailTimeoutTimespanSeconds";
        public const string PresenceCache_replyTimeout = "PresenceCache_replyTimeout";
        public const string presenceFD_NumPoolThreads = "presenceFD_NumPoolThreads";
        public const string presenceWidget_friendsCacheExpirationSeconds = "presenceWidget_friendsCacheExpirationSeconds";
        public const string ProfileCache_fastFailBlockIntervalSeconds = "ProfileCache_fastFailBlockIntervalSeconds";
        public const string ProfileCache_fastFailTimeoutThresholdCount = "ProfileCache_fastFailTimeoutThresholdCount";
        public const string ProfileCache_fastFailTimeoutTimespanSeconds = "ProfileCache_fastFailTimeoutTimespanSeconds";
        public const string ProfileCache_replyTimeout = "ProfileCache_replyTimeout";
        public const string PubSubEvent_fastFailBlockIntervalSeconds = "PubSubEvent_fastFailBlockIntervalSeconds";
        public const string PubSubEvent_fastFailTimeoutThresholdCount = "PubSubEvent_fastFailTimeoutThresholdCount";
        public const string PubSubEvent_fastFailTimeoutTimespanSeconds = "PubSubEvent_fastFailTimeoutTimespanSeconds";
        public const string puidmgr_blockSize = "puidmgr_blockSize";
        public const string puidmgr_bucketCount = "puidmgr_bucketCount";
        public const string puidmgr_userPuidBucket = "puidmgr_userPuidBucket";
        public const string query_enableTitleLog = "query_enableTitleLog";
        public const string query_LspBackcompTitles = "query_LspBackcompTitles";
        public const string querylib_trustUpdates = "querylib_trustUpdates";
        public const string ratings_aggregate_use_ventura = "ratings_aggregate_use_ventura";
        public const string ratings_aggregate_ventura_listIdRegex = "ratings_aggregate_ventura_listIdRegex";
        public const string ratings_contenttype_mapping = "ratings_contenttype_mapping";
        public const string ratings_max_allowable_reviewcount = "ratings_max_allowable_reviewcount";
        public const string ratings_use_msnrr = "ratings_use_msnrr";
        public const string ratings_use_ventura = "ratings_use_ventura";
        public const string reporting_DeleteRoot = "reporting_DeleteRoot";
        public const string reporting_DistributionDataFileGrowth = "reporting_DistributionDataFileGrowth";
        public const string reporting_DistributionDataFileSize = "reporting_DistributionDataFileSize";
        public const string reporting_DistributionDBName = "reporting_DistributionDBName";
        public const string reporting_DistributionLogFileGrowth = "reporting_DistributionLogFileGrowth";
        public const string reporting_DistributionLogFileSize = "reporting_DistributionLogFileSize";
        public const string reporting_DistributionMaxHistoryRetention = "reporting_DistributionMaxHistoryRetention";
        public const string reporting_DistributionMaxRetention = "reporting_DistributionMaxRetention";
        public const string reporting_ReplicationShare = "reporting_ReplicationShare";
        public const string reporting_RSUtilPath = "reporting_RSUtilPath";
        public const string reporting_SSISUseReplica = "reporting_SSISUseReplica";
        public const string reporting_WMISCertSubject = "reporting_WMISCertSubject";
        public const string reporting_WMISDBDrop = "reporting_WMISDBDrop";
        public const string reporting_WMISDBUrl = "reporting_WMISDBUrl";
        public const string scs_blacklistBlockIntervalSeconds = "scs_blacklistBlockIntervalSeconds";
        public const string scs_blacklistTimeoutThresholdCount = "scs_blacklistTimeoutThresholdCount";
        public const string scs_blacklistTimeoutTimespanSeconds = "scs_blacklistTimeoutTimespanSeconds";
        public const string scs_pumpPurchaseItemQueue = "scs_pumpPurchaseItemQueue";
        public const string scs_purchaseItemTransactionConsiderFailedSeconds = "scs_purchaseItemTransactionConsiderFailedSeconds";
        public const string scs_purchaseItemTransactionExpiredSeconds = "scs_purchaseItemTransactionExpiredSeconds";
        public const string scs_queuePumpIntervalSeconds = "scs_queuePumpIntervalSeconds";
        public const string SCSCreditCard_fastFailMaxThreshold = "SCSCreditCard_fastFailMaxThreshold";
        public const string SCSCreditCard_fastFailMinThreshold = "SCSCreditCard_fastFailMinThreshold";
        public const string SCSCreditCard_fastFailWindow = "SCSCreditCard_fastFailWindow";
        public const string SCSNonCreditCard_fastFailMaxThreshold = "SCSNonCreditCard_fastFailMaxThreshold";
        public const string SCSNonCreditCard_fastFailMinThreshold = "SCSNonCreditCard_fastFailMinThreshold";
        public const string SCSNonCreditCard_fastFailWindow = "SCSNonCreditCard_fastFailWindow";
        public const string setup_approot = "setup_approot";
        public const string setup_logroot = "setup_logroot";
        public const string setup_secureUNC = "setup_secureUNC";
        public const string setup_sqldbroot = "setup_sqldbroot";
        public const string setup_sqlftroot = "setup_sqlftroot";
        public const string setup_sqllogroot = "setup_sqllogroot";
        public const string sg_AesMinClientVersionPc = "sg_AesMinClientVersionPc";
        public const string sg_AesMinClientVersionXbox360 = "sg_AesMinClientVersionXbox360";
        public const string sg_AesProtocolEnabled = "sg_AesProtocolEnabled";
        public const string sg_ArpNegativeTimeoutInSeconds = "sg_ArpNegativeTimeoutInSeconds";
        public const string sg_ArpPositiveTimeoutInSeconds = "sg_ArpPositiveTimeoutInSeconds";
        public const string sg_ArpRequestRetries = "sg_ArpRequestRetries";
        public const string sg_ArpRexmitTimeoutInSeconds = "sg_ArpRexmitTimeoutInSeconds";
        public const string sg_BlockLimit = "sg_BlockLimit";
        public const string sg_ChalHeartbeatTimeoutInSeconds = "sg_ChalHeartbeatTimeoutInSeconds";
        public const string sg_ClientHistoryLimit = "sg_ClientHistoryLimit";
        public const string sg_ClientLimit = "sg_ClientLimit";
        public const string sg_ClientPortLimit = "sg_ClientPortLimit";
        public const string sg_ConnectionServerPortLimit = "sg_ConnectionServerPortLimit";
        public const string sg_DesKeySize = "sg_DesKeySize";
        public const string sg_DhInfoCacheSize = "sg_DhInfoCacheSize";
        public const string sg_DhLimitHysteresisInMs = "sg_DhLimitHysteresisInMs";
        public const string sg_DhLimitOpsPerSec = "sg_DhLimitOpsPerSec";
        public const string sg_DnsRefreshFailureIntervalInSeconds = "sg_DnsRefreshFailureIntervalInSeconds";
        public const string sg_DnsRefreshIntervalInMinutes = "sg_DnsRefreshIntervalInMinutes";
        public const string sg_DvdChalShiftIntervalInSeconds = "sg_DvdChalShiftIntervalInSeconds";
        public const string sg_EnableChallengeResponse = "sg_EnableChallengeResponse";
        public const string sg_EnableConnectionServices = "sg_EnableConnectionServices";
        public const string sg_HashTableOverheadInPercent = "sg_HashTableOverheadInPercent";
        public const string sg_IpHdrTos = "sg_IpHdrTos";
        public const string sg_IpHdrTtl = "sg_IpHdrTtl";
        public const string sg_KerberosApReqDeltaInMinutes = "sg_KerberosApReqDeltaInMinutes";
        public const string sg_KeyExBlockIntervalInSeconds = "sg_KeyExBlockIntervalInSeconds";
        public const string sg_KeyExDontSendIcmp = "sg_KeyExDontSendIcmp";
        public const string sg_KeyExIcmpVip = "sg_KeyExIcmpVip";
        public const string sg_KeyExMinRetryInMs = "sg_KeyExMinRetryInMs";
        public const string sg_KeyExXbToSgInitMinSize = "sg_KeyExXbToSgInitMinSize";
        public const string sg_LogClientUpdates = "sg_LogClientUpdates";
        public const string sg_LuaStateTableSize = "sg_LuaStateTableSize";
        public const string sg_NatDetectionDisconnectInSeconds = "sg_NatDetectionDisconnectInSeconds";
        public const string sg_NotifyBatchIntervalInSeconds = "sg_NotifyBatchIntervalInSeconds";
        public const string sg_PacketPool = "sg_PacketPool";
        public const string sg_PacketPoolMax = "sg_PacketPoolMax";
        public const string sg_ProcessorQuantum = "sg_ProcessorQuantum";
        public const string sg_SgToXbChallengePeriodInSeconds = "sg_SgToXbChallengePeriodInSeconds";
        public const string sg_SgToXbKeyExTimeoutInSeconds = "sg_SgToXbKeyExTimeoutInSeconds";
        public const string sg_SgToXbPulseTimeoutInSeconds = "sg_SgToXbPulseTimeoutInSeconds";
        public const string sg_SgToXbScanFrequencyInSeconds = "sg_SgToXbScanFrequencyInSeconds";
        public const string sg_SgToXbTimeoutInSeconds = "sg_SgToXbTimeoutInSeconds";
        public const string sg_ShareDatacenterNicWithWindows = "sg_ShareDatacenterNicWithWindows";
        public const string sg_ShareInternetNicWithWindows = "sg_ShareInternetNicWithWindows";
        public const string sg_SpiFlow = "sg_SpiFlow";
        public const string sg_SpiFlowDataLimit = "sg_SpiFlowDataLimit";
        public const string sg_SpiWatchdogTimeoutInSeconds = "sg_SpiWatchdogTimeoutInSeconds";
        public const string sg_StatsConfidenceLimitInClients = "sg_StatsConfidenceLimitInClients";
        public const string sg_StatsDisconnectSigmaInterval = "sg_StatsDisconnectSigmaInterval";
        public const string sg_StatsHistoryInMs = "sg_StatsHistoryInMs";
        public const string sg_StatsPenaltyTimeInSeconds = "sg_StatsPenaltyTimeInSeconds";
        public const string sg_StatsRefreshFrequencyInSeconds = "sg_StatsRefreshFrequencyInSeconds";
        public const string sg_StatsReportIntervalInSeconds = "sg_StatsReportIntervalInSeconds";
        public const string sg_StatsWarningSigmaInterval = "sg_StatsWarningSigmaInterval";
        public const string sg_WiretapTimeoutInMinutes = "sg_WiretapTimeoutInMinutes";
        public const string sg_XbToSgChallengeAckInSeconds = "sg_XbToSgChallengeAckInSeconds";
        public const string sg_XbToSgChallengeTimeoutInSeconds = "sg_XbToSgChallengeTimeoutInSeconds";
        public const string sg_XbToSgPulseTimeoutInSeconds = "sg_XbToSgPulseTimeoutInSeconds";
        public const string sg_XbToSgReplayWindow = "sg_XbToSgReplayWindow";
        public const string sg_XbToSgTimeoutInSeconds = "sg_XbToSgTimeoutInSeconds";
        public const string sginfo_maxRetries = "sginfo_maxRetries";
        public const string sginfo_retrieveForFlowToken = "sginfo_retrieveForFlowToken";
        public const string sginfo_supportedHttpAuthDataVersion = "sginfo_supportedHttpAuthDataVersion";
        public const string sginfo_timeout = "sginfo_timeout";
        public const string sginfo_useOldProtocol = "sginfo_useOldProtocol";
        public const string sginfo_verifyAuth = "sginfo_verifyAuth";
        public const string sginfo_verifyTestTitleVersion = "sginfo_verifyTestTitleVersion";
        public const string signature_crlRevocationMode = "signature_crlRevocationMode";
        public const string signature_digestReloadInterval = "signature_digestReloadInterval";
        public const string signature_licenseTransferMinDaysToRestart = "signature_licenseTransferMinDaysToRestart";
        public const string signature_licenseTransferTimeoutInMinutes = "signature_licenseTransferTimeoutInMinutes";
        public const string signature_machineReloadInterval = "signature_machineReloadInterval";
        public const string signature_serviceKeyType = "signature_serviceKeyType";
        public const string signature_serviceKeyVersion = "signature_serviceKeyVersion";
        public const string signature_titleReloadInterval = "signature_titleReloadInterval";
        public const string signature_userReloadInterval = "signature_userReloadInterval";
        public const string signature_validateCertificateValidUntilMinutes = "signature_validateCertificateValidUntilMinutes";
        public const string SocialCache_BulkGetBatchMaxSize = "SocialCache_BulkGetBatchMaxSize";
        public const string SocialCache_BytesPerPooledBuffer = "SocialCache_BytesPerPooledBuffer";
        public const string SocialCache_CacheEntryExpirationTimeout = "SocialCache_CacheEntryExpirationTimeout";
        public const string SocialCache_DataThreadpoolSize = "SocialCache_DataThreadpoolSize";
        public const string SocialCache_fastFailBlockIntervalSeconds = "SocialCache_fastFailBlockIntervalSeconds";
        public const string SocialCache_fastFailTimeoutThresholdCount = "SocialCache_fastFailTimeoutThresholdCount";
        public const string SocialCache_fastFailTimeoutTimespanSeconds = "SocialCache_fastFailTimeoutTimespanSeconds";
        public const string SocialCache_MaxClientSockets = "SocialCache_MaxClientSockets";
        public const string SocialCache_MaxMessageBytes = "SocialCache_MaxMessageBytes";
        public const string SocialCache_MaxObjectsPerMessage = "SocialCache_MaxObjectsPerMessage";
        public const string SocialCache_MemCacheDllName = "SocialCache_MemCacheDllName";
        public const string SocialCache_RelationshipsLookupTableBuckets = "SocialCache_RelationshipsLookupTableBuckets";
        public const string SocialCache_replyTimeoutMS = "SocialCache_replyTimeoutMS";
        public const string SocialCache_SocketBufferSize = "SocialCache_SocketBufferSize";
        public const string SocialCache_TCPKeepAliveTimeout = "SocialCache_TCPKeepAliveTimeout";
        public const string SocialCache_UserLookupTableBuckets = "SocialCache_UserLookupTableBuckets";
        public const string stats_AllowAlternateDestination = "stats_AllowAlternateDestination";
        public const string stats_allowTitleReset = "stats_allowTitleReset";
        public const string stats_allowUnverifiedWrite = "stats_allowUnverifiedWrite";
        public const string stats_dbMaxRetry = "stats_dbMaxRetry";
        public const string stats_dbRetryInteval = "stats_dbRetryInteval";
        public const string stats_debugPuid = "stats_debugPuid";
        public const string stats_enableCertificationMode = "stats_enableCertificationMode";
        public const string stats_enableTitlePerfCounters = "stats_enableTitlePerfCounters";
        public const string stats_trackCountersPerLb = "stats_trackCountersPerLb";
        public const string storage_xbancCacheTimeOut = "storage_xbancCacheTimeOut";
        public const string storageFD_allowZeroUserPuidsFromInternet = "storageFD_allowZeroUserPuidsFromInternet";
        public const string storageFD_httpCacheHeader = "storageFD_httpCacheHeader";
        public const string storageFD_httpContentTypeHeader = "storageFD_httpContentTypeHeader";
        public const string storageFD_removeFileSqlTimeout = "storageFD_removeFileSqlTimeout";
        public const string storageFD_verifyAccessTokens = "storageFD_verifyAccessTokens";
        public const string storageFD_writeFileSqlTimeout = "storageFD_writeFileSqlTimeout";
        public const string storageModule_enableXbancCaching = "storageModule_enableXbancCaching";
        public const string storageModule_maxUrlLength = "storageModule_maxUrlLength";
        public const string storageModule_returnFixedResponseCodeForAllCalls = "storageModule_returnFixedResponseCodeForAllCalls";
        public const string storageModule_urlPathRegEx = "storageModule_urlPathRegEx";
        public const string storageModule_urlRedirectPath = "storageModule_urlRedirectPath";
        public const string storageModule_urlReplacementString = "storageModule_urlReplacementString";
        public const string storageModule_urlStringToReplace = "storageModule_urlStringToReplace";
        public const string storageWidget_fakeFrontDoorFailures = "storageWidget_fakeFrontDoorFailures";
        public const string storageWidget_fakeXCache = "storageWidget_fakeXCache";
        public const string storageWidget_fakeXSig = "storageWidget_fakeXSig";
        public const string stringsvr_flushStringsInterval = "stringsvr_flushStringsInterval";
        public const string stringsvr_loadStringsInterval = "stringsvr_loadStringsInterval";
        public const string stringsvr_reportingAggregateKeys = "stringsvr_reportingAggregateKeys";
        public const string sts_cert_subject = "sts_cert_subject";
        public const string sts_machine_token_expiration_seconds = "sts_machine_token_expiration_seconds";
        public const string sts_partner_token_expiration_seconds = "sts_partner_token_expiration_seconds";
        public const string sts_token_issuer_name = "sts_token_issuer_name";
        public const string sts_token_window_minutes = "sts_token_window_minutes";
        public const string sts_user_token_expiration_seconds = "sts_user_token_expiration_seconds";
        public const string svct_heartbeatTimeout = "svct_heartbeatTimeout";
        public const string tagrecycle_comber_job_batch_size = "tagrecycle_comber_job_batch_size";
        public const string tagrecycle_disassociated_job_batch_size = "tagrecycle_disassociated_job_batch_size";
        public const string tagrecycle_disassociater_high_value_files = "tagrecycle_disassociater_high_value_files";
        public const string tagrecycle_disassociater_reservation_console_id = "tagrecycle_disassociater_reservation_console_id";
        public const string tagrecycle_emailer_job_batch_size = "tagrecycle_emailer_job_batch_size";
        public const string tagrecycle_emailer_job_file_path = "tagrecycle_emailer_job_file_path";
        public const string tagrecycle_emailer1_file_name = "tagrecycle_emailer1_file_name";
        public const string tagrecycle_emailer2_file_name = "tagrecycle_emailer2_file_name";
        public const string TagRecycleCronJobs = "TagRecycleCronJobs";
        public const string testfd_PermissionLevel = "testfd_PermissionLevel";
        public const string testfd_whitelistTitles = "testfd_whitelistTitles";
        public const string titlevault_root = "titlevault_root";
        public const string tokenService_batchSize = "tokenService_batchSize";
        public const string tokenService_considerStaleSeconds = "tokenService_considerStaleSeconds";
        public const string tokenService_delayBaseNumber = "tokenService_delayBaseNumber";
        public const string tokenService_delayExponentFactor = "tokenService_delayExponentFactor";
        public const string tokenService_finalOutputDirectory = "tokenService_finalOutputDirectory";
        public const string tokenService_keyType = "tokenService_keyType";
        public const string tokenService_keyVersion = "tokenService_keyVersion";
        public const string tokenService_maxFailureThreshold = "tokenService_maxFailureThreshold";
        public const string tokenService_maxNumTokens = "tokenService_maxNumTokens";
        public const string tokenService_scsBatchSize = "tokenService_scsBatchSize";
        public const string tokenService_sqlBatchSize = "tokenService_sqlBatchSize";
        public const string tokenService_tempOutputDirectory = "tokenService_tempOutputDirectory";
        public const string tokenService_vetTokens = "tokenService_vetTokens";
        public const string toolsmgmt_filePrefix = "toolsmgmt_filePrefix";
        public const string toolsmgmt_fileshare = "toolsmgmt_fileshare";
        public const string toolsmgmt_pollingInterval = "toolsmgmt_pollingInterval";
        public const string toolsmgmt_SDClient = "toolsmgmt_SDClient";
        public const string toolsmgmt_SDPort = "toolsmgmt_SDPort";
        public const string udpadpt_numOfThreads = "udpadpt_numOfThreads";
        public const string ups_blacklistBlockIntervalSeconds = "ups_blacklistBlockIntervalSeconds";
        public const string ups_blacklistTimeoutThresholdCount = "ups_blacklistTimeoutThresholdCount";
        public const string ups_blacklistTimeoutTimespanSeconds = "ups_blacklistTimeoutTimespanSeconds";
        public const string ups_clientCertName = "ups_clientCertName";
        public const string ups_getProfileTimeoutSeconds = "ups_getProfileTimeoutSeconds";
        public const string ups_partnerId = "ups_partnerId";
        public const string ups_updateProfileTimeoutSeconds = "ups_updateProfileTimeoutSeconds";
        public const string ups_url = "ups_url";
        public const string user_forbiddenNamesReloadIntervalMinutes = "user_forbiddenNamesReloadIntervalMinutes";
        public const string user_nameReservationMinutes = "user_nameReservationMinutes";
        public const string venturarr_aggregateRatingTimeoutSeconds = "venturarr_aggregateRatingTimeoutSeconds";
        public const string venturarr_clientVersion = "venturarr_clientVersion";
        public const string venturarr_customerGroup = "venturarr_customerGroup";
        public const string venturarr_defaultConnectionLimit = "venturarr_defaultConnectionLimit";
        public const string venturarr_deviceId = "venturarr_deviceId";
        public const string venturarr_failFastEnabled = "venturarr_failFastEnabled";
        public const string venturarr_failFastMaxThreshold = "venturarr_failFastMaxThreshold";
        public const string venturarr_failFastMinThreshold = "venturarr_failFastMinThreshold";
        public const string venturarr_failFastTimeWindow = "venturarr_failFastTimeWindow";
        public const string venturarr_formatSuperVuid = "venturarr_formatSuperVuid";
        public const string venturarr_formatVuid = "venturarr_formatVuid";
        public const string venturarr_ignoreSslPolicyErrors = "venturarr_ignoreSslPolicyErrors";
        public const string venturarr_locale = "venturarr_locale";
        public const string venturarr_padCredentialExpiryMilliseconds = "venturarr_padCredentialExpiryMilliseconds";
        public const string venturarr_serviceAuthKeyArray = "venturarr_serviceAuthKeyArray";
        public const string venturarr_serviceAuthKeyIndex = "venturarr_serviceAuthKeyIndex";
        public const string venturarr_serviceDirectoryServiceUrl = "venturarr_serviceDirectoryServiceUrl";
        public const string venturarr_singleRatingTimeoutSeconds = "venturarr_singleRatingTimeoutSeconds";
        public const string venturarr_superUserVuidPart = "venturarr_superUserVuidPart";
        public const string vortex_alwaysUseWorkerThread = "vortex_alwaysUseWorkerThread";
        public const string vortex_cake_stream_recipe_template_xml = "vortex_cake_stream_recipe_template_xml";
        public const string vortex_defaultEventTypeCountWindowSeconds = "vortex_defaultEventTypeCountWindowSeconds";
        public const string vortex_defaultInputEventQueueSize = "vortex_defaultInputEventQueueSize";
        public const string vortex_logweb_v1_p3p = "vortex_logweb_v1_p3p";
        public const string vortex_logweb_v1_producer = "vortex_logweb_v1_producer";
        public const string vortex_maxIoThreads = "vortex_maxIoThreads";
        public const string vortex_maxWorkerThreadLatencyMs = "vortex_maxWorkerThreadLatencyMs";
        public const string vortex_maxWorkerThreads = "vortex_maxWorkerThreads";
        public const string vortex_maxWorkItemQueueSize = "vortex_maxWorkItemQueueSize";
        public const string vortex_minIoThreads = "vortex_minIoThreads";
        public const string vortex_minWorkerThreads = "vortex_minWorkerThreads";
        public const string vortex_numOverlappedIoOperations = "vortex_numOverlappedIoOperations";
        public const string vortex_retrieveSgInfoForUnknownEvents = "vortex_retrieveSgInfoForUnknownEvents";
        public const string vortex_udpReceiveBufferSize = "vortex_udpReceiveBufferSize";
        public const string vortex_unknownEventHeaderVersion = "vortex_unknownEventHeaderVersion";
        public const string wcgeneral_titleListValidSeconds = "wcgeneral_titleListValidSeconds";
        public const string wcsignature_createSignatureURL = "wcsignature_createSignatureURL";
        public const string wcsignature_maximumAdminIdLength = "wcsignature_maximumAdminIdLength";
        public const string wcsignature_maximumVerifySignaturesPerRequest = "wcsignature_maximumVerifySignaturesPerRequest";
        public const string wcsignature_signatureSite = "wcsignature_signatureSite";
        public const string wcsignature_verifySignatureURL = "wcsignature_verifySignatureURL";
        public const string wcstats_AboveMax = "wcstats_AboveMax";
        public const string wcstats_BelowMax = "wcstats_BelowMax";
        public const string wcstats_EnumEntriesMax = "wcstats_EnumEntriesMax";
        public const string wcstats_EnumRawEntriesMax = "wcstats_EnumRawEntriesMax";
        public const string wcstats_EnumRawStartMin = "wcstats_EnumRawStartMin";
        public const string wcstats_EnumStartMax = "wcstats_EnumStartMax";
        public const string wcstats_EnumStartMin = "wcstats_EnumStartMin";
        public const string wcstats_LeaderboardListValidSeconds = "wcstats_LeaderboardListValidSeconds";
        public const string wcstats_RemoveDups = "wcstats_RemoveDups";
        public const string wcstats_SingleAppDomain = "wcstats_SingleAppDomain";
        public const string wcstats_SortByRating = "wcstats_SortByRating";
        public const string wcstats_TagListMax = "wcstats_TagListMax";
        public const string wctoolsmgmt_actionTableXML = "wctoolsmgmt_actionTableXML";
        public const string wctoolsmgmt_autopropLBServer = "wctoolsmgmt_autopropLBServer";
        public const string wctoolsmgmt_autopropMMServer = "wctoolsmgmt_autopropMMServer";
        public const string wctoolsmgmt_concurrentJobs = "wctoolsmgmt_concurrentJobs";
        public const string wctoolsmgmt_pingInterval = "wctoolsmgmt_pingInterval";
        public const string wctoolsmgmt_uploadPathRoot = "wctoolsmgmt_uploadPathRoot";
        public const string wctoolsmgmt_workPathRoot = "wctoolsmgmt_workPathRoot";
        public const string wcusers_alertsSite = "wcusers_alertsSite";
        public const string wcusers_cacheExpirationSeconds = "wcusers_cacheExpirationSeconds";
        public const string wcusers_uacsGetUserSettingsURL = "wcusers_uacsGetUserSettingsURL";
        public const string wcusers_uacsLinkUserURL = "wcusers_uacsLinkUserURL";
        public const string wcusers_uacsSite = "wcusers_uacsSite";
        public const string webSG_capturePath = "webSG_capturePath";
        public const string webSG_certIssuerCN1 = "webSG_certIssuerCN1";
        public const string webSG_certIssuerCN2 = "webSG_certIssuerCN2";
        public const string webSG_certIssuerCN3 = "webSG_certIssuerCN3";
        public const string webSG_certIssuerCN4 = "webSG_certIssuerCN4";
        public const string webSG_maxInReqSize = "webSG_maxInReqSize";
        public const string wiredata_postLimit = "wiredata_postLimit";
        public const string wiredata_stringLimit = "wiredata_stringLimit";
        public const string wiretap_AuthDataReplyPort = "wiretap_AuthDataReplyPort";
        public const string wiretap_AuthDataWaitTimeInSecs = "wiretap_AuthDataWaitTimeInSecs";
        public const string wiretap_DumpDirectory = "wiretap_DumpDirectory";
        public const string wiretap_MaxNumOfRetrys = "wiretap_MaxNumOfRetrys";
        public const string wiretap_MaxNumOfTaps = "wiretap_MaxNumOfTaps";
        public const string wiretap_MaxSGAuthDataRetry = "wiretap_MaxSGAuthDataRetry";
        public const string wiretap_NumOfCarrierNodes = "wiretap_NumOfCarrierNodes";
        public const string wiretap_NumOfReceiverNodes = "wiretap_NumOfReceiverNodes";
        public const string wiretap_PacketBufferSize = "wiretap_PacketBufferSize";
        public const string wiretap_SGSessionTimeoutInSecs = "wiretap_SGSessionTimeoutInSecs";
        public const string wiretap_UnwantedIPs = "wiretap_UnwantedIPs";
        public const string wmis_allowUrlOverride = "wmis_allowUrlOverride";
        public const string wmis_apiMaxRetryAttempts = "wmis_apiMaxRetryAttempts";
        public const string wmis_clientCertSubject = "wmis_clientCertSubject";
        public const string wmis_dmpPurchaseGlobalVideoCampaignID = "wmis_dmpPurchaseGlobalVideoCampaignID";
        public const string wmis_dmpPurchaseGlobalVideoSKU = "wmis_dmpPurchaseGlobalVideoSKU";
        public const string wmis_dmpPurchaseVideoCategory = "wmis_dmpPurchaseVideoCategory";
        public const string wmis_failFastBlockIntervalSeconds = "wmis_failFastBlockIntervalSeconds";
        public const string wmis_failFastThresholdCount = "wmis_failFastThresholdCount";
        public const string wmis_failFastThresholdIntervalSeconds = "wmis_failFastThresholdIntervalSeconds";
        public const string wmis_getVideoPurchaseDetailsTimeoutSeconds = "wmis_getVideoPurchaseDetailsTimeoutSeconds";
        public const string wmis_serviceUrl = "wmis_serviceUrl";
        public const string xarb_AllowAlternateDestination = "xarb_AllowAlternateDestination";
        public const string xarb_BundleRetryPeriodInSeconds = "xarb_BundleRetryPeriodInSeconds";
        public const string xarb_EnableDebugResult = "xarb_EnableDebugResult";
        public const string xarb_GarbageCollectionIntervalInSeconds = "xarb_GarbageCollectionIntervalInSeconds";
        public const string xarb_InterfaceBucketInterceptThrottleInMillis = "xarb_InterfaceBucketInterceptThrottleInMillis";
        public const string xarb_MaxBundleRetrySeconds = "xarb_MaxBundleRetrySeconds";
        public const string xarb_MaxDelayedTrustUpdates = "xarb_MaxDelayedTrustUpdates";
        public const string xarb_MaxSessionSeconds = "xarb_MaxSessionSeconds";
        public const string xarb_MaxStatsBundleSize = "xarb_MaxStatsBundleSize";
        public const string xarb_MaxTournamentBundleSize = "xarb_MaxTournamentBundleSize";
        public const string xarb_MemoryUsageHighWaterMark = "xarb_MemoryUsageHighWaterMark";
        public const string xarb_MemoryUsageLowWaterMark = "xarb_MemoryUsageLowWaterMark";
        public const string xarb_MigrationWaitWindowMinutes = "xarb_MigrationWaitWindowMinutes";
        public const string xarb_NumberFlushBundleThreads = "xarb_NumberFlushBundleThreads";
        public const string xarb_NumberFlushTrustRatingThreads = "xarb_NumberFlushTrustRatingThreads";
        public const string xarb_SessionTimeoutExtensionSeconds = "xarb_SessionTimeoutExtensionSeconds";
        public const string xarb_TitleParameterReloadPeriodInSeconds = "xarb_TitleParameterReloadPeriodInSeconds";
        public const string xarb_TrailingReportRetriesWaitSeconds = "xarb_TrailingReportRetriesWaitSeconds";
        public const string xarb_TrustFlushPeriodInSeconds = "xarb_TrustFlushPeriodInSeconds";
        public const string xarb_TrustIdleSecondsBeforeFlush = "xarb_TrustIdleSecondsBeforeFlush";
        public const string xarb_TrustSummationExecutionTimeInSeconds = "xarb_TrustSummationExecutionTimeInSeconds";
        public const string xarb_TrustSummationPeriodInSeconds = "xarb_TrustSummationPeriodInSeconds";
        public const string xarb_TrustSummationRetryInSeconds = "xarb_TrustSummationRetryInSeconds";
        public const string xarb_TrustSummationTimeoutSeconds = "xarb_TrustSummationTimeoutSeconds";
        public const string xarb_VerboseLogging = "xarb_VerboseLogging";
        public const string xbanc_context_duration_alert_limit = "xbanc_context_duration_alert_limit";
        public const string xbanc_fastFailBlockIntervalSeconds = "xbanc_fastFailBlockIntervalSeconds";
        public const string xbanc_fastFailTimeoutThresholdCount = "xbanc_fastFailTimeoutThresholdCount";
        public const string xbanc_fastFailTimeoutTimespanSeconds = "xbanc_fastFailTimeoutTimespanSeconds";
        public const string xbanc_heartbeat_interval = "xbanc_heartbeat_interval";
        public const string xbanc_localCacheItemDuration = "xbanc_localCacheItemDuration";
        public const string xbanc_localCacheMaxSize = "xbanc_localCacheMaxSize";
        public const string xbanc_low_water_data_storage_bytes = "xbanc_low_water_data_storage_bytes";
        public const string xbanc_max_key_length = "xbanc_max_key_length";
        public const string xbanc_record_maintenance_period = "xbanc_record_maintenance_period";
        public const string xbanc_replyTimeout = "xbanc_replyTimeout";
        public const string xbanc_total_data_storage_bytes = "xbanc_total_data_storage_bytes";
        public const string xbos_allowMultiItemSubmitOrderTransactions = "xbos_allowMultiItemSubmitOrderTransactions";
        public const string xbos_auditEnabled = "xbos_auditEnabled";
        public const string xbos_AutoCacheFlushHour = "xbos_AutoCacheFlushHour";
        public const string xbos_blockPurchaseMediaOffersSubmitOrderTransactions = "xbos_blockPurchaseMediaOffersSubmitOrderTransactions";
        public const string xbos_CTPPurchaseTransactionConsiderFailedSeconds = "xbos_CTPPurchaseTransactionConsiderFailedSeconds";
        public const string xbos_ctpTimeConversionRatio = "xbos_ctpTimeConversionRatio";
        public const string xbos_CTPTransactionExpiredSeconds = "xbos_CTPTransactionExpiredSeconds";
        public const string xbos_EnablePaymentTypeIdSupportInZuneCatalog = "xbos_EnablePaymentTypeIdSupportInZuneCatalog";
        public const string xbos_gfwlOrderAttributeGuid = "xbos_gfwlOrderAttributeGuid";
        public const string xbos_limitedChildContentPurchaseCountryList = "xbos_limitedChildContentPurchaseCountryList";
        public const string xbos_limitedChildOfferTypePurchaseCountryList = "xbos_limitedChildOfferTypePurchaseCountryList";
        public const string xbos_MaxCacheSize_ContentEnumerate = "xbos_MaxCacheSize_ContentEnumerate";
        public const string xbos_MaxCacheSize_EnumerateTitlesByFilter = "xbos_MaxCacheSize_EnumerateTitlesByFilter";
        public const string xbos_MaxCacheSize_GetTitleDetails = "xbos_MaxCacheSize_GetTitleDetails";
        public const string xbos_newContentWindowHours = "xbos_newContentWindowHours";
        public const string xbos_populateNewPurchaseHistoryFromOldPurchase = "xbos_populateNewPurchaseHistoryFromOldPurchase";
        public const string xbos_pumpCTPPurchaseQueue = "xbos_pumpCTPPurchaseQueue";
        public const string xbos_pumpOffsetOrderQueue = "xbos_pumpOffsetOrderQueue";
        public const string xbos_pumpSubmitOrderQueue = "xbos_pumpSubmitOrderQueue";
        public const string xbos_queuePumpIntervalSeconds = "xbos_queuePumpIntervalSeconds";
        public const string xbos_submitOrderTransactionConsiderFailedSeconds = "xbos_submitOrderTransactionConsiderFailedSeconds";
        public const string xbos_submitOrderTransactionExpiredSeconds = "xbos_submitOrderTransactionExpiredSeconds";
        public const string xbos_subscriptionMaxTimeCredit = "xbos_subscriptionMaxTimeCredit";
        public const string xbos_titleActivation_disableAllTitles = "xbos_titleActivation_disableAllTitles";
        public const string xbos_useExternalVideoMarketplaceCatalog = "xbos_useExternalVideoMarketplaceCatalog";
        public const string xbos_xbox360OrderAttributeGuid = "xbos_xbox360OrderAttributeGuid";
        public const string xcache_connection_receive_timeout_milliseconds = "xcache_connection_receive_timeout_milliseconds";
        public const string xcache_connection_send_timeout_milliseconds = "xcache_connection_send_timeout_milliseconds";
        public const string xcache_connectionTimeoutSeconds = "xcache_connectionTimeoutSeconds";
        public const string xcache_db_batchSize = "xcache_db_batchSize";
        public const string xcache_db_pollingInterval = "xcache_db_pollingInterval";
        public const string xcache_db_transactionTimeout = "xcache_db_transactionTimeout";
        public const string xcache_db_usedatabaselocks = "xcache_db_usedatabaselocks";
        public const string xcache_gamertag_hash_buckets = "xcache_gamertag_hash_buckets";
        public const string XCache_MaxClientSockets = "XCache_MaxClientSockets";
        public const string XCache_MaxMessageBytes = "XCache_MaxMessageBytes";
        public const string xcache_maxPipeConnections = "xcache_maxPipeConnections";
        public const string xcache_memory_page_size = "xcache_memory_page_size";
        public const string xcache_passport_hash_buckets = "xcache_passport_hash_buckets";
        public const string XCache_SocketBufferSize = "XCache_SocketBufferSize";
        public const string xcache_test_num_users = "xcache_test_num_users";
        public const string xcache_test_random_seed = "xcache_test_random_seed";
        public const string xcache_userid_hash_buckets = "xcache_userid_hash_buckets";
        public const string xcbk_auditEnabled = "xcbk_auditEnabled";
        public const string xcbk_billingNotificationTimeout = "xcbk_billingNotificationTimeout";
        public const string xcbk_scs_heartbeatTimeout = "xcbk_scs_heartbeatTimeout";
        public const string xcbk_sslCertSubject = "xcbk_sslCertSubject";
        public const string XConnSrv_BulkGetBatchMaxSize = "XConnSrv_BulkGetBatchMaxSize";
        public const string XConnSrv_BytesPerPooledBuffer = "XConnSrv_BytesPerPooledBuffer";
        public const string XConnSrv_DataThreadpoolSize = "XConnSrv_DataThreadpoolSize";
        public const string XConnSrv_MaxClientSockets = "XConnSrv_MaxClientSockets";
        public const string XConnSrv_MaxMessageBytes = "XConnSrv_MaxMessageBytes";
        public const string XConnSrv_MaxObjectsPerMessage = "XConnSrv_MaxObjectsPerMessage";
        public const string XConnSrv_MaxSubscriptionsPerConnection = "XConnSrv_MaxSubscriptionsPerConnection";
        public const string XConnSrv_MemCacheDllName = "XConnSrv_MemCacheDllName";
        public const string XConnSrv_NumLookupTableBuckets = "XConnSrv_NumLookupTableBuckets";
        public const string XConnSrv_SocketBufferSize = "XConnSrv_SocketBufferSize";
        public const string XConnSrv_TCPKeepAliveTimeout = "XConnSrv_TCPKeepAliveTimeout";
        public const string XConnSrv_UseSGAuth = "XConnSrv_UseSGAuth";
        public const string xcrypto_DoRealPakTest = "xcrypto_DoRealPakTest";
        public const string xcrypto_useNCipher = "xcrypto_useNCipher";
        public const string xcrypto_useTestKey = "xcrypto_useTestKey";
        public const string xds_ARPRetryEventThrottle = "xds_ARPRetryEventThrottle";
        public const string xds_ARPRetryIntervalInSeconds = "xds_ARPRetryIntervalInSeconds";
        public const string xds_cacheHashTableSize = "xds_cacheHashTableSize";
        public const string xds_cacheSize = "xds_cacheSize";
        public const string xds_eventCacheThrottleLifeTimeInSeconds = "xds_eventCacheThrottleLifeTimeInSeconds";
        public const string xds_gatewayLookupIntervalInSeconds = "xds_gatewayLookupIntervalInSeconds";
        public const string xds_ICMPReplyAddr = "xds_ICMPReplyAddr";
        public const string xds_infactionLimitPerMinute = "xds_infactionLimitPerMinute";
        public const string xds_maxLogLength = "xds_maxLogLength";
        public const string xds_minICMPRequestLength = "xds_minICMPRequestLength";
        public const string xds_minLogRequestLength = "xds_minLogRequestLength";
        public const string xds_numberOfProcessingThreads = "xds_numberOfProcessingThreads";
        public const string xds_packetBufferSize = "xds_packetBufferSize";
        public const string xds_port = "xds_port";
        public const string xds_skewTimeInMilliSecs = "xds_skewTimeInMilliSecs";
        public const string xds_TOS = "xds_TOS";
        public const string xds_TTL = "xds_TTL";
        public const string xevents_buffers = "xevents_buffers";
        public const string xevents_threads = "xevents_threads";
        public const string xlfsmon_AdminFdURL = "xlfsmon_AdminFdURL";
        public const string xlfsmon_ClientCertificateName = "xlfsmon_ClientCertificateName";
        public const string xlfsmon_ClientCertificateThumbprint = "xlfsmon_ClientCertificateThumbprint";
        public const string xlfsmon_ClientFdURL = "xlfsmon_ClientFdURL";
        public const string xlfsmon_DownloaderPath = "xlfsmon_DownloaderPath";
        public const string xlfsmon_EnvironmentName = "xlfsmon_EnvironmentName";
        public const string xlfsmon_ProxyURL = "xlfsmon_ProxyURL";
        public const string xlfsmon_SaveDirectory = "xlfsmon_SaveDirectory";
        public const string xlfsmon_SubscriptionId = "xlfsmon_SubscriptionId";
        public const string xlfsmon_UseRealSTS = "xlfsmon_UseRealSTS";
        public const string xmachine_doubleWriteHistory = "xmachine_doubleWriteHistory";
        public const string xmatchfd_defaultSessionExpiration = "xmatchfd_defaultSessionExpiration";
        public const string xmatchfd_disableAffiliateQuery = "xmatchfd_disableAffiliateQuery";
        public const string xmatchfd_enableAuthCheck = "xmatchfd_enableAuthCheck";
        public const string xmatchfd_enableTitlePerfCounters = "xmatchfd_enableTitlePerfCounters";
        public const string xmatchfd_fastFailBlockIntervalSeconds = "xmatchfd_fastFailBlockIntervalSeconds";
        public const string xmatchfd_fastFailBucketIntervalSeconds = "xmatchfd_fastFailBucketIntervalSeconds";
        public const string xmatchfd_fastFailNumBuckets = "xmatchfd_fastFailNumBuckets";
        public const string xmatchfd_fastFailReservedThreadsPerDB = "xmatchfd_fastFailReservedThreadsPerDB";
        public const string xmatchfd_fastFailTimeoutThresholdCount = "xmatchfd_fastFailTimeoutThresholdCount";
        public const string xmatchfd_fastFailTimeoutTimespanSeconds = "xmatchfd_fastFailTimeoutTimespanSeconds";
        public const string xmatchfd_fastFailTimeTolerance = "xmatchfd_fastFailTimeTolerance";
        public const string xmatchfd_fastFailTotalSharedThreads = "xmatchfd_fastFailTotalSharedThreads";
        public const string xmatchfd_insertRetries = "xmatchfd_insertRetries";
        public const string xmatchfd_nolockRetries = "xmatchfd_nolockRetries";
        public const string xmatchfd_relaxXenonValidation = "xmatchfd_relaxXenonValidation";
        public const string xmatchfd_sessioncacheexpiration = "xmatchfd_sessioncacheexpiration";
        public const string xmatchfd_valueOfAvoidingMe = "xmatchfd_valueOfAvoidingMe";
        public const string xmatchfd_valueOfCompletedGame = "xmatchfd_valueOfCompletedGame";
        public const string xmatchfd_valueOfFriend = "xmatchfd_valueOfFriend";
        public const string xmatchfd_valueOfNegativeFeedback = "xmatchfd_valueOfNegativeFeedback";
        public const string xmatchfd_valueOfPositiveFeedback = "xmatchfd_valueOfPositiveFeedback";
        public const string xmgmt_area_aainfo = "xmgmt_area_aainfo";
        public const string xmgmt_area_aamodule = "xmgmt_area_aamodule";
        public const string xmgmt_area_AccelerationClient = "xmgmt_area_AccelerationClient";
        public const string xmgmt_area_AccelerationDebug = "xmgmt_area_AccelerationDebug";
        public const string xmgmt_area_AccelerationProxy = "xmgmt_area_AccelerationProxy";
        public const string xmgmt_area_ASkdc = "xmgmt_area_ASkdc";
        public const string xmgmt_area_atTrace = "xmgmt_area_atTrace";
        public const string xmgmt_area_audit = "xmgmt_area_audit";
        public const string xmgmt_area_authsglog = "xmgmt_area_authsglog";
        public const string xmgmt_area_authsgtrace = "xmgmt_area_authsgtrace";
        public const string xmgmt_area_bcfgtrace = "xmgmt_area_bcfgtrace";
        public const string xmgmt_area_blackbox = "xmgmt_area_blackbox";
        public const string xmgmt_area_blstTrace = "xmgmt_area_blstTrace";
        public const string xmgmt_area_catalog = "xmgmt_area_catalog";
        public const string xmgmt_area_catalogwatcherlog = "xmgmt_area_catalogwatcherlog";
        public const string xmgmt_area_cfgtrace = "xmgmt_area_cfgtrace";
        public const string xmgmt_area_checkready = "xmgmt_area_checkready";
        public const string xmgmt_area_cleanclips = "xmgmt_area_cleanclips";
        public const string xmgmt_area_cleansermissingdata = "xmgmt_area_cleansermissingdata";
        public const string xmgmt_area_cleansertrace = "xmgmt_area_cleansertrace";
        public const string xmgmt_area_computil = "xmgmt_area_computil";
        public const string xmgmt_area_contentutiltrace = "xmgmt_area_contentutiltrace";
        public const string xmgmt_area_crontest = "xmgmt_area_crontest";
        public const string xmgmt_area_crontrace = "xmgmt_area_crontrace";
        public const string xmgmt_area_cryptomgr = "xmgmt_area_cryptomgr";
        public const string xmgmt_area_cryptotools = "xmgmt_area_cryptotools";
        public const string xmgmt_area_ctpTransactionServiceLog = "xmgmt_area_ctpTransactionServiceLog";
        public const string xmgmt_area_ctpTransactionServiceTrace = "xmgmt_area_ctpTransactionServiceTrace";
        public const string xmgmt_area_ctxDebug = "xmgmt_area_ctxDebug";
        public const string xmgmt_area_deactivator = "xmgmt_area_deactivator";
        public const string xmgmt_area_Debug = "xmgmt_area_Debug";
        public const string xmgmt_area_DefaultNtLog = "xmgmt_area_DefaultNtLog";
        public const string xmgmt_area_DefaultTrace = "xmgmt_area_DefaultTrace";
        public const string xmgmt_area_dmplog = "xmgmt_area_dmplog";
        public const string xmgmt_area_dmptrace = "xmgmt_area_dmptrace";
        public const string xmgmt_area_domTrace = "xmgmt_area_domTrace";
        public const string xmgmt_area_DOS = "xmgmt_area_DOS";
        public const string xmgmt_area_ElimEntrants = "xmgmt_area_ElimEntrants";
        public const string xmgmt_area_ElimEvents = "xmgmt_area_ElimEvents";
        public const string xmgmt_area_Elimination = "xmgmt_area_Elimination";
        public const string xmgmt_area_elimtest = "xmgmt_area_elimtest";
        public const string xmgmt_area_enfTrace = "xmgmt_area_enfTrace";
        public const string xmgmt_area_enmrdfTrace = "xmgmt_area_enmrdfTrace";
        public const string xmgmt_area_espengine = "xmgmt_area_espengine";
        public const string xmgmt_area_EventService = "xmgmt_area_EventService";
        public const string xmgmt_area_feedbacklog = "xmgmt_area_feedbacklog";
        public const string xmgmt_area_FeedbackProxy = "xmgmt_area_FeedbackProxy";
        public const string xmgmt_area_feedbackTrace = "xmgmt_area_feedbackTrace";
        public const string xmgmt_area_finbusLog = "xmgmt_area_finbusLog";
        public const string xmgmt_area_finbusTrace = "xmgmt_area_finbusTrace";
        public const string xmgmt_area_FlokenMap = "xmgmt_area_FlokenMap";
        public const string xmgmt_area_fseLog = "xmgmt_area_fseLog";
        public const string xmgmt_area_fseTrace = "xmgmt_area_fseTrace";
        public const string xmgmt_area_geoFenceLog = "xmgmt_area_geoFenceLog";
        public const string xmgmt_area_geoFenceTrace = "xmgmt_area_geoFenceTrace";
        public const string xmgmt_area_GetPostalCode = "xmgmt_area_GetPostalCode";
        public const string xmgmt_area_glcTrace = "xmgmt_area_glcTrace";
        public const string xmgmt_area_graduateUserTrace = "xmgmt_area_graduateUserTrace";
        public const string xmgmt_area_gtqTrace = "xmgmt_area_gtqTrace";
        public const string xmgmt_area_Integration = "xmgmt_area_Integration";
        public const string xmgmt_area_KdcBase = "xmgmt_area_KdcBase";
        public const string xmgmt_area_KdcCore = "xmgmt_area_KdcCore";
        public const string xmgmt_area_kdcmanaged = "xmgmt_area_kdcmanaged";
        public const string xmgmt_area_LbsTrace = "xmgmt_area_LbsTrace";
        public const string xmgmt_area_lbsvrclient = "xmgmt_area_lbsvrclient";
        public const string xmgmt_area_listsTrace = "xmgmt_area_listsTrace";
        public const string xmgmt_area_livecachelog = "xmgmt_area_livecachelog";
        public const string xmgmt_area_livecachetrace = "xmgmt_area_livecachetrace";
        public const string xmgmt_area_livepxy = "xmgmt_area_livepxy";
        public const string xmgmt_area_livepxylog = "xmgmt_area_livepxylog";
        public const string xmgmt_area_log = "xmgmt_area_log";
        public const string xmgmt_area_LogCleanser = "xmgmt_area_LogCleanser";
        public const string xmgmt_area_LogCode = "xmgmt_area_LogCode";
        public const string xmgmt_area_LogCodeWindows = "xmgmt_area_LogCodeWindows";
        public const string xmgmt_area_LogCollectorModuleLog = "xmgmt_area_LogCollectorModuleLog";
        public const string xmgmt_area_logCollectorModuleTrace = "xmgmt_area_logCollectorModuleTrace";
        public const string xmgmt_area_LogDvd = "xmgmt_area_LogDvd";
        public const string xmgmt_area_LogTitle = "xmgmt_area_LogTitle";
        public const string xmgmt_area_LogWindows = "xmgmt_area_LogWindows";
        public const string xmgmt_area_lua = "xmgmt_area_lua";
        public const string xmgmt_area_marketplacecatalog = "xmgmt_area_marketplacecatalog";
        public const string xmgmt_area_matchdblog = "xmgmt_area_matchdblog";
        public const string xmgmt_area_matchdbtrace = "xmgmt_area_matchdbtrace";
        public const string xmgmt_area_matchprestrace = "xmgmt_area_matchprestrace";
        public const string xmgmt_area_MatchProxy = "xmgmt_area_MatchProxy";
        public const string xmgmt_area_matchtrace = "xmgmt_area_matchtrace";
        public const string xmgmt_area_MessageProxy = "xmgmt_area_MessageProxy";
        public const string xmgmt_area_messagingfd = "xmgmt_area_messagingfd";
        public const string xmgmt_area_messagingfdLog = "xmgmt_area_messagingfdLog";
        public const string xmgmt_area_MessagingLog = "xmgmt_area_MessagingLog";
        public const string xmgmt_area_metro = "xmgmt_area_metro";
        public const string xmgmt_area_mllog = "xmgmt_area_mllog";
        public const string xmgmt_area_mltrace = "xmgmt_area_mltrace";
        public const string xmgmt_area_msgmanager = "xmgmt_area_msgmanager";
        public const string xmgmt_area_msnrraggregationlog = "xmgmt_area_msnrraggregationlog";
        public const string xmgmt_area_msnrraggregationtrace = "xmgmt_area_msnrraggregationtrace";
        public const string xmgmt_area_msnrrLog = "xmgmt_area_msnrrLog";
        public const string xmgmt_area_msnrrTrace = "xmgmt_area_msnrrTrace";
        public const string xmgmt_area_musicnetLog = "xmgmt_area_musicnetLog";
        public const string xmgmt_area_musicnetTrace = "xmgmt_area_musicnetTrace";
        public const string xmgmt_area_nametrace = "xmgmt_area_nametrace";
        public const string xmgmt_area_NicMgr = "xmgmt_area_NicMgr";
        public const string xmgmt_area_NotificationDebug = "xmgmt_area_NotificationDebug";
        public const string xmgmt_area_NotificationLog = "xmgmt_area_NotificationLog";
        public const string xmgmt_area_nrTrace = "xmgmt_area_nrTrace";
        public const string xmgmt_area_offer = "xmgmt_area_offer";
        public const string xmgmt_area_oledbw = "xmgmt_area_oledbw";
        public const string xmgmt_area_passportLog = "xmgmt_area_passportLog";
        public const string xmgmt_area_passportTrace = "xmgmt_area_passportTrace";
        public const string xmgmt_area_pathTrace = "xmgmt_area_pathTrace";
        public const string xmgmt_area_PingLog = "xmgmt_area_PingLog";
        public const string xmgmt_area_PipeDbg = "xmgmt_area_PipeDbg";
        public const string xmgmt_area_plugintest = "xmgmt_area_plugintest";
        public const string xmgmt_area_Policy = "xmgmt_area_Policy";
        public const string xmgmt_area_PPALoader = "xmgmt_area_PPALoader";
        public const string xmgmt_area_PresenceDebug = "xmgmt_area_PresenceDebug";
        public const string xmgmt_area_PresenceFDDebug = "xmgmt_area_PresenceFDDebug";
        public const string xmgmt_area_PresenceFDLog = "xmgmt_area_PresenceFDLog";
        public const string xmgmt_area_PresenceLog = "xmgmt_area_PresenceLog";
        public const string xmgmt_area_PresenceProxy = "xmgmt_area_PresenceProxy";
        public const string xmgmt_area_PresenceRPDebug = "xmgmt_area_PresenceRPDebug";
        public const string xmgmt_area_profilelog = "xmgmt_area_profilelog";
        public const string xmgmt_area_progresslog = "xmgmt_area_progresslog";
        public const string xmgmt_area_prov = "xmgmt_area_prov";
        public const string xmgmt_area_provdr = "xmgmt_area_provdr";
        public const string xmgmt_area_provisioning = "xmgmt_area_provisioning";
        public const string xmgmt_area_pss = "xmgmt_area_pss";
        public const string xmgmt_area_puidmgr = "xmgmt_area_puidmgr";
        public const string xmgmt_area_QFlag = "xmgmt_area_QFlag";
        public const string xmgmt_area_QueryTest = "xmgmt_area_QueryTest";
        public const string xmgmt_area_ratingstrace = "xmgmt_area_ratingstrace";
        public const string xmgmt_area_rdfTrace = "xmgmt_area_rdfTrace";
        public const string xmgmt_area_readsitekeys = "xmgmt_area_readsitekeys";
        public const string xmgmt_area_replacePassportTrace = "xmgmt_area_replacePassportTrace";
        public const string xmgmt_area_ReportConnection = "xmgmt_area_ReportConnection";
        public const string xmgmt_area_Reporting = "xmgmt_area_Reporting";
        public const string xmgmt_area_Reporting_v2 = "xmgmt_area_Reporting_v2";
        public const string xmgmt_area_rfhTrace = "xmgmt_area_rfhTrace";
        public const string xmgmt_area_rmfTrace = "xmgmt_area_rmfTrace";
        public const string xmgmt_area_selog = "xmgmt_area_selog";
        public const string xmgmt_area_serialnumber = "xmgmt_area_serialnumber";
        public const string xmgmt_area_ServHlpDebug = "xmgmt_area_ServHlpDebug";
        public const string xmgmt_area_SgClientStats = "xmgmt_area_SgClientStats";
        public const string xmgmt_area_sginfotrace = "xmgmt_area_sginfotrace";
        public const string xmgmt_area_SGProxy = "xmgmt_area_SGProxy";
        public const string xmgmt_area_soaptrace = "xmgmt_area_soaptrace";
        public const string xmgmt_area_SocialCacheAPI = "xmgmt_area_SocialCacheAPI";
        public const string xmgmt_area_SocialCacheConnection = "xmgmt_area_SocialCacheConnection";
        public const string xmgmt_area_SocialCacheLog = "xmgmt_area_SocialCacheLog";
        public const string xmgmt_area_spslog = "xmgmt_area_spslog";
        public const string xmgmt_area_spsproxy = "xmgmt_area_spsproxy";
        public const string xmgmt_area_spsproxyLog = "xmgmt_area_spsproxyLog";
        public const string xmgmt_area_spsqueuetrace = "xmgmt_area_spsqueuetrace";
        public const string xmgmt_area_spstrace = "xmgmt_area_spstrace";
        public const string xmgmt_area_sqltrace = "xmgmt_area_sqltrace";
        public const string xmgmt_area_statslog = "xmgmt_area_statslog";
        public const string xmgmt_area_stfdTrace = "xmgmt_area_stfdTrace";
        public const string xmgmt_area_stlog = "xmgmt_area_stlog";
        public const string xmgmt_area_storageHealthTrace = "xmgmt_area_storageHealthTrace";
        public const string xmgmt_area_StorageModuleLog = "xmgmt_area_StorageModuleLog";
        public const string xmgmt_area_storageModuleTrace = "xmgmt_area_storageModuleTrace";
        public const string xmgmt_area_storageUtilsTrace = "xmgmt_area_storageUtilsTrace";
        public const string xmgmt_area_stringLog = "xmgmt_area_stringLog";
        public const string xmgmt_area_StringProxy = "xmgmt_area_StringProxy";
        public const string xmgmt_area_stringSvrHealthTrace = "xmgmt_area_stringSvrHealthTrace";
        public const string xmgmt_area_stringTrace = "xmgmt_area_stringTrace";
        public const string xmgmt_area_sts = "xmgmt_area_sts";
        public const string xmgmt_area_ststrace = "xmgmt_area_ststrace";
        public const string xmgmt_area_subcodemgr = "xmgmt_area_subcodemgr";
        public const string xmgmt_area_switchPassportTrace = "xmgmt_area_switchPassportTrace";
        public const string xmgmt_area_synccastLog = "xmgmt_area_synccastLog";
        public const string xmgmt_area_synccastTrace = "xmgmt_area_synccastTrace";
        public const string xmgmt_area_TagRecycleCronJobs = "xmgmt_area_TagRecycleCronJobs";
        public const string xmgmt_area_TALKER = "xmgmt_area_TALKER";
        public const string xmgmt_area_TCPCnt = "xmgmt_area_TCPCnt";
        public const string xmgmt_area_TCPConnection = "xmgmt_area_TCPConnection";
        public const string xmgmt_area_TeamProxy = "xmgmt_area_TeamProxy";
        public const string xmgmt_area_TeamsLog = "xmgmt_area_TeamsLog";
        public const string xmgmt_area_Test = "xmgmt_area_Test";
        public const string xmgmt_area_testfd = "xmgmt_area_testfd";
        public const string xmgmt_area_TestUtilities = "xmgmt_area_TestUtilities";
        public const string xmgmt_area_title = "xmgmt_area_title";
        public const string xmgmt_area_tmrlog = "xmgmt_area_tmrlog";
        public const string xmgmt_area_tokenTrace = "xmgmt_area_tokenTrace";
        public const string xmgmt_area_toolspslog = "xmgmt_area_toolspslog";
        public const string xmgmt_area_ToolsSrv = "xmgmt_area_ToolsSrv";
        public const string xmgmt_area_ToolsSrvLog = "xmgmt_area_ToolsSrvLog";
        public const string xmgmt_area_trace = "xmgmt_area_trace";
        public const string xmgmt_area_UDPADAPT = "xmgmt_area_UDPADAPT";
        public const string xmgmt_area_UDPADPTLog = "xmgmt_area_UDPADPTLog";
        public const string xmgmt_area_UDPMGR = "xmgmt_area_UDPMGR";
        public const string xmgmt_area_UNITTEST = "xmgmt_area_UNITTEST";
        public const string xmgmt_area_user2 = "xmgmt_area_user2";
        public const string xmgmt_area_userbillinginfo = "xmgmt_area_userbillinginfo";
        public const string xmgmt_area_Vlan = "xmgmt_area_Vlan";
        public const string xmgmt_area_VortexFlow = "xmgmt_area_VortexFlow";
        public const string xmgmt_area_VortexOutput = "xmgmt_area_VortexOutput";
        public const string xmgmt_area_VortexOutputUnknown = "xmgmt_area_VortexOutputUnknown";
        public const string xmgmt_area_VortexTrace = "xmgmt_area_VortexTrace";
        public const string xmgmt_area_voucher = "xmgmt_area_voucher";
        public const string xmgmt_area_wcAlertsLog = "xmgmt_area_wcAlertsLog";
        public const string xmgmt_area_wcgenerallog = "xmgmt_area_wcgenerallog";
        public const string xmgmt_area_wcgeneraltrace = "xmgmt_area_wcgeneraltrace";
        public const string xmgmt_area_wcMessagingLog = "xmgmt_area_wcMessagingLog";
        public const string xmgmt_area_wcMessagingTrace = "xmgmt_area_wcMessagingTrace";
        public const string xmgmt_area_wcmusiclog = "xmgmt_area_wcmusiclog";
        public const string xmgmt_area_wcpresencelog = "xmgmt_area_wcpresencelog";
        public const string xmgmt_area_wcQueryLog = "xmgmt_area_wcQueryLog";
        public const string xmgmt_area_wcsignaturelog = "xmgmt_area_wcsignaturelog";
        public const string xmgmt_area_wcstatscache = "xmgmt_area_wcstatscache";
        public const string xmgmt_area_wcstatsdomain = "xmgmt_area_wcstatsdomain";
        public const string xmgmt_area_wcstatslog = "xmgmt_area_wcstatslog";
        public const string xmgmt_area_wcstatstrace = "xmgmt_area_wcstatstrace";
        public const string xmgmt_area_wcstoragelog = "xmgmt_area_wcstoragelog";
        public const string xmgmt_area_wcteamslog = "xmgmt_area_wcteamslog";
        public const string xmgmt_area_wctoolsmgmtlog = "xmgmt_area_wctoolsmgmtlog";
        public const string xmgmt_area_wctoolsmgmttrace = "xmgmt_area_wctoolsmgmttrace";
        public const string xmgmt_area_wcuserslog = "xmgmt_area_wcuserslog";
        public const string xmgmt_area_wcutilitieslog = "xmgmt_area_wcutilitieslog";
        public const string xmgmt_area_wcutilitiestrace = "xmgmt_area_wcutilitiestrace";
        public const string xmgmt_area_websg = "xmgmt_area_websg";
        public const string xmgmt_area_WINHTTP = "xmgmt_area_WINHTTP";
        public const string xmgmt_area_WireDataBin = "xmgmt_area_WireDataBin";
        public const string xmgmt_area_WireDataTxt = "xmgmt_area_WireDataTxt";
        public const string xmgmt_area_wmisLog = "xmgmt_area_wmisLog";
        public const string xmgmt_area_wmisTrace = "xmgmt_area_wmisTrace";
        public const string xmgmt_area_wrfTrace = "xmgmt_area_wrfTrace";
        public const string xmgmt_area_wsttrace = "xmgmt_area_wsttrace";
        public const string xmgmt_area_xarblog = "xmgmt_area_xarblog";
        public const string xmgmt_area_XBancClient = "xmgmt_area_XBancClient";
        public const string xmgmt_area_XBancDebug = "xmgmt_area_XBancDebug";
        public const string xmgmt_area_XBancProxy = "xmgmt_area_XBancProxy";
        public const string xmgmt_area_xbos = "xmgmt_area_xbos";
        public const string xmgmt_area_xboxcom = "xmgmt_area_xboxcom";
        public const string xmgmt_area_XCacheClient = "xmgmt_area_XCacheClient";
        public const string xmgmt_area_XCacheData = "xmgmt_area_XCacheData";
        public const string xmgmt_area_XCacheDatabase = "xmgmt_area_XCacheDatabase";
        public const string xmgmt_area_XCacheLog = "xmgmt_area_XCacheLog";
        public const string xmgmt_area_XCacheLookup = "xmgmt_area_XCacheLookup";
        public const string xmgmt_area_XCacheProxy = "xmgmt_area_XCacheProxy";
        public const string xmgmt_area_XCacheService = "xmgmt_area_XCacheService";
        public const string xmgmt_area_xcbk = "xmgmt_area_xcbk";
        public const string xmgmt_area_XConnSrvAPI = "xmgmt_area_XConnSrvAPI";
        public const string xmgmt_area_XConnSrvCache = "xmgmt_area_XConnSrvCache";
        public const string xmgmt_area_XConnSrvConnection = "xmgmt_area_XConnSrvConnection";
        public const string xmgmt_area_XConnSrvLog = "xmgmt_area_XConnSrvLog";
        public const string xmgmt_area_XConnSrvSubscription = "xmgmt_area_XConnSrvSubscription";
        public const string xmgmt_area_XDb = "xmgmt_area_XDb";
        public const string xmgmt_area_Xds = "xmgmt_area_Xds";
        public const string xmgmt_area_Xkdc = "xmgmt_area_Xkdc";
        public const string xmgmt_area_XkdcTicketLog = "xmgmt_area_XkdcTicketLog";
        public const string xmgmt_area_xlastutil = "xmgmt_area_xlastutil";
        public const string xmgmt_area_xlisttrace = "xmgmt_area_xlisttrace";
        public const string xmgmt_area_xmachine = "xmgmt_area_xmachine";
        public const string xmgmt_area_XMACS = "xmgmt_area_XMACS";
        public const string xmgmt_area_XMGMT = "xmgmt_area_XMGMT";
        public const string xmgmt_area_XomInstrumentation = "xmgmt_area_XomInstrumentation";
        public const string xmgmt_area_xqry = "xmgmt_area_xqry";
        public const string xmgmt_area_xrltrace = "xmgmt_area_xrltrace";
        public const string xmgmt_area_xsecsup = "xmgmt_area_xsecsup";
        public const string xmgmt_area_xsig = "xmgmt_area_xsig";
        public const string xmgmt_area_xsiglog = "xmgmt_area_xsiglog";
        public const string xmgmt_area_xsuppapi = "xmgmt_area_xsuppapi";
        public const string xmgmt_area_xsuppapiEmailSentLog = "xmgmt_area_xsuppapiEmailSentLog";
        public const string xmgmt_area_xsuppapiLog = "xmgmt_area_xsuppapiLog";
        public const string xmgmt_area_xuacs = "xmgmt_area_xuacs";
        public const string xmgmt_area_XWireTap = "xmgmt_area_XWireTap";
        public const string xmgmt_area_XWireTapHash = "xmgmt_area_XWireTapHash";
        public const string xmgmt_area_XWireTapNicMgr = "xmgmt_area_XWireTapNicMgr";
        public const string xmgmt_area_XWireTapProdCons = "xmgmt_area_XWireTapProdCons";
        public const string xmgmt_default_target_settings = "xmgmt_default_target_settings";
        public const string xmgmt_ntevents = "xmgmt_ntevents";
        public const string xmgmt_target_ = "xmgmt_target_";
        public const string xmgmt_target_catalogwatcherlog = "xmgmt_target_catalogwatcherlog";
        public const string xmgmt_target_cleansermissingdata = "xmgmt_target_cleansermissingdata";
        public const string xmgmt_target_ctpTransactionServiceLog = "xmgmt_target_ctpTransactionServiceLog";
        public const string xmgmt_target_dmplog = "xmgmt_target_dmplog";
        public const string xmgmt_target_espengine = "xmgmt_target_espengine";
        public const string xmgmt_target_geofencelog = "xmgmt_target_geofencelog";
        public const string xmgmt_target_log = "xmgmt_target_log";
        public const string xmgmt_target_logcleanser = "xmgmt_target_logcleanser";
        public const string xmgmt_target_logcode = "xmgmt_target_logcode";
        public const string xmgmt_target_logcodewindows = "xmgmt_target_logcodewindows";
        public const string xmgmt_target_logdvd = "xmgmt_target_logdvd";
        public const string xmgmt_target_logwindows = "xmgmt_target_logwindows";
        public const string xmgmt_target_lua = "xmgmt_target_lua";
        public const string xmgmt_target_msglog = "xmgmt_target_msglog";
        public const string xmgmt_target_msnrraggregationlog = "xmgmt_target_msnrraggregationlog";
        public const string xmgmt_target_musicnetlog = "xmgmt_target_musicnetlog";
        public const string xmgmt_target_notlog = "xmgmt_target_notlog";
        public const string xmgmt_target_passportlog = "xmgmt_target_passportlog";
        public const string xmgmt_target_preslog = "xmgmt_target_preslog";
        public const string xmgmt_target_remote = "xmgmt_target_remote";
        public const string xmgmt_target_report = "xmgmt_target_report";
        public const string xmgmt_target_sgclientstats = "xmgmt_target_sgclientstats";
        public const string xmgmt_target_spslog = "xmgmt_target_spslog";
        public const string xmgmt_target_synccastlog = "xmgmt_target_synccastlog";
        public const string xmgmt_target_teamslog = "xmgmt_target_teamslog";
        public const string xmgmt_target_ticketlog = "xmgmt_target_ticketlog";
        public const string xmgmt_target_wmislog = "xmgmt_target_wmislog";
        public const string xmgmt_target_xdslog = "xmgmt_target_xdslog";
        public const string xmgmt_target_XomInstrumentationLog = "xmgmt_target_XomInstrumentationLog";
        public const string xmgmt_target_xsuppapiemaillog = "xmgmt_target_xsuppapiemaillog";
        public const string xmgmt_target_xsuppapilog = "xmgmt_target_xsuppapilog";
        public const string xmgmt_targets = "xmgmt_targets";
        public const string xmstv_accessInfoUri = "xmstv_accessInfoUri";
        public const string xmstv_crldp = "xmstv_crldp";
        public const string xmstv_issuerCertName = "xmstv_issuerCertName";
        public const string xmstv_lastCaRevocationTicks = "xmstv_lastCaRevocationTicks";
        public const string xmstv_maximumCertificatesAllowed = "xmstv_maximumCertificatesAllowed";
        public const string xmstv_subjectNameSuffix = "xmstv_subjectNameSuffix";
        public const string xrlscan_allowHead = "xrlscan_allowHead";
        public const string xrlutil_allowAlternateUrl = "xrlutil_allowAlternateUrl";
        public const string xsts_issuer_name = "xsts_issuer_name";
        public const string xsts_signing_cert_name = "xsts_signing_cert_name";
        public const string xsuppapi_extraLicensesIncrementBy = "xsuppapi_extraLicensesIncrementBy";
        public const string xsuppapi_extraLicensesMaximum = "xsuppapi_extraLicensesMaximum";
        public const string xsuppapi_FNCFormatString = "xsuppapi_FNCFormatString";
        public const string xsuppapi_FNCRegenMaxTries = "xsuppapi_FNCRegenMaxTries";
        public const string xsuppapi_Xbox1AccountFNCFlags = "xsuppapi_Xbox1AccountFNCFlags";
        public const string xsuppapi_XboxComAccountFNCFlags = "xsuppapi_XboxComAccountFNCFlags";
        public const string xsuppapi_XenonAccountGoldFNCFlags = "xsuppapi_XenonAccountGoldFNCFlags";
        public const string xsuppapi_XenonAccountSilverFNCFlags = "xsuppapi_XenonAccountSilverFNCFlags";
        public const string xsuppapi_ZuneAccountFNCFlags = "xsuppapi_ZuneAccountFNCFlags";
        public const string xtou_cacheDurationSeconds = "xtou_cacheDurationSeconds";
        public const string xuacs_allowClearSubscriptions = "xuacs_allowClearSubscriptions";
        public const string xuacs_allowDisableSubscription = "xuacs_allowDisableSubscription";
        public const string xuacs_allowGetNoAgeOut = "xuacs_allowGetNoAgeOut";
        public const string xuacs_allowSetUserAccountStatus = "xuacs_allowSetUserAccountStatus";
        public const string xuacs_allowSetUserSettings2 = "xuacs_allowSetUserSettings2";
        public const string xuacs_allowUncheckedRecovery = "xuacs_allowUncheckedRecovery";
        public const string xuacs_auditEnabled = "xuacs_auditEnabled";
        public const string xuacs_autoGenCC = "xuacs_autoGenCC";
        public const string xuacs_billingdecline_notificationcount = "xuacs_billingdecline_notificationcount";
        public const string xuacs_defaultGamercardReputation = "xuacs_defaultGamercardReputation";
        public const string xuacs_domain = "xuacs_domain";
        public const string xuacs_familyGoldAssignmentCoolDownWaitIntervalDays = "xuacs_familyGoldAssignmentCoolDownWaitIntervalDays";
        public const string xuacs_familyGoldAssignmentDistinctUsers = "xuacs_familyGoldAssignmentDistinctUsers";
        public const string xuacs_familyGoldAssignmentThrottlingWindowDays = "xuacs_familyGoldAssignmentThrottlingWindowDays";
        public const string xuacs_familyGoldChangeWaitIntervalHours = "xuacs_familyGoldChangeWaitIntervalHours";
        public const string xuacs_FamilyGoldConvertionRatio = "xuacs_FamilyGoldConvertionRatio";
        public const string xuacs_gamertagChangeWaitIntervalHours = "xuacs_gamertagChangeWaitIntervalHours";
        public const string xuacs_generateGamertagMinsToReserve = "xuacs_generateGamertagMinsToReserve";
        public const string xuacs_graduateUserPumpQueue = "xuacs_graduateUserPumpQueue";
        public const string xuacs_graduateUserQueuePumpIntervalSeconds = "xuacs_graduateUserQueuePumpIntervalSeconds";
        public const string xuacs_graduateUserQueuePumpRetryLimit = "xuacs_graduateUserQueuePumpRetryLimit";
        public const string xuacs_hijackingIntervalHours = "xuacs_hijackingIntervalHours";
        public const string xuacs_link_failureWindowMinutes = "xuacs_link_failureWindowMinutes";
        public const string xuacs_link_maxFailedAttempts = "xuacs_link_maxFailedAttempts";
        public const string xuacs_machineGamertagIntervalDays = "xuacs_machineGamertagIntervalDays";
        public const string xuacs_machineGamertagThreshold = "xuacs_machineGamertagThreshold";
        public const string xuacs_machinePassportIntervalDays = "xuacs_machinePassportIntervalDays";
        public const string xuacs_machinePassportThreshold = "xuacs_machinePassportThreshold";
        public const string xuacs_machineRecoveryIntervalDays = "xuacs_machineRecoveryIntervalDays";
        public const string xuacs_machineRecoveryThreshold = "xuacs_machineRecoveryThreshold";
        public const string xuacs_max_family_dependents = "xuacs_max_family_dependents";
        public const string xuacs_passport_generateddomain = "xuacs_passport_generateddomain";
        public const string xuacs_passport_generatedprefix = "xuacs_passport_generatedprefix";
        public const string xuacs_passportChangeWaitIntervalHours = "xuacs_passportChangeWaitIntervalHours";
        public const string xuacs_PassportCreateGeneratedRetries = "xuacs_PassportCreateGeneratedRetries";
        public const string xuacs_replaceUserPassportDaysBetween = "xuacs_replaceUserPassportDaysBetween";
        public const string xuacs_replaceUserPassportPumpQueue = "xuacs_replaceUserPassportPumpQueue";
        public const string xuacs_replaceUserPassportQueuePumpIntervalSeconds = "xuacs_replaceUserPassportQueuePumpIntervalSeconds";
        public const string xuacs_replaceUserPassportQueuePumpRetryLimit = "xuacs_replaceUserPassportQueuePumpRetryLimit";
        public const string xuacs_restore_failureWindowMinutes = "xuacs_restore_failureWindowMinutes";
        public const string xuacs_restore_maxFailedAttempts = "xuacs_restore_maxFailedAttempts";
        public const string xuacs_seedbasedGamertagDefault = "xuacs_seedbasedGamertagDefault";
        public const string xuacs_setNoAgeOutQueueIntervalSeconds = "xuacs_setNoAgeOutQueueIntervalSeconds";
        public const string xuacs_setNoAgeOutQueueRetryLimit = "xuacs_setNoAgeOutQueueRetryLimit";
        public const string xuacs_setNoAgeOutQueueStart = "xuacs_setNoAgeOutQueueStart";
        public const string xuacs_subscriptionNotificationWindowDays = "xuacs_subscriptionNotificationWindowDays";
        public const string xuacs_subscriptionTenureGracePeriodDays = "xuacs_subscriptionTenureGracePeriodDays";
        public const string xuacs_switchUserCountryAllowMultipleSubscriptions = "xuacs_switchUserCountryAllowMultipleSubscriptions";
        public const string xuacs_switchUserCountryConsiderExpiredSeconds = "xuacs_switchUserCountryConsiderExpiredSeconds";
        public const string xuacs_switchUserCountryDaysBetween = "xuacs_switchUserCountryDaysBetween";
        public const string xuacs_switchUserCountryMigrateAccountOfferId = "xuacs_switchUserCountryMigrateAccountOfferId";
        public const string xuacs_switchUserCountryPumpQueue = "xuacs_switchUserCountryPumpQueue";
        public const string xuacs_switchUserCountryQueuePumpIntervalSeconds = "xuacs_switchUserCountryQueuePumpIntervalSeconds";
        public const string xuacs_switchUserCountryRetryTimeoutsImmediately = "xuacs_switchUserCountryRetryTimeoutsImmediately";
        public const string xuacs_switchUserPassportDaysBetween = "xuacs_switchUserPassportDaysBetween";
        public const string xuacs_switchUserPassportPumpQueue = "xuacs_switchUserPassportPumpQueue";
        public const string xuacs_switchUserPassportQueuePumpIntervalSeconds = "xuacs_switchUserPassportQueuePumpIntervalSeconds";
        public const string xuacs_switchUserPassportQueuePumpRetryLimit = "xuacs_switchUserPassportQueuePumpRetryLimit";
        public const string xuacs_trialSubscriptionNotificationWindowDays = "xuacs_trialSubscriptionNotificationWindowDays";
        public const string xuacs_userDateWindowForThrottling = "xuacs_userDateWindowForThrottling";
        public const string xuacs_userGamertagIntervalDays = "xuacs_userGamertagIntervalDays";
        public const string xuacs_userGamertagThreshold = "xuacs_userGamertagThreshold";
        public const string xuacs_userNumberOfAccountsPerMachineId = "xuacs_userNumberOfAccountsPerMachineId";
        public const string xuacs_userPassportIntervalDays = "xuacs_userPassportIntervalDays";
        public const string xuacs_userPassportThreshold = "xuacs_userPassportThreshold";
        public const string xuacs_userRecoveryIntervalDays = "xuacs_userRecoveryIntervalDays";
        public const string xuacs_userRecoveryThreshold = "xuacs_userRecoveryThreshold";
        public const string xuacs_WelcomeToXboxLiveMessageForGeneratedAccount = "xuacs_WelcomeToXboxLiveMessageForGeneratedAccount";
        public const string xuacs_xonwatch_creditCard = "xuacs_xonwatch_creditCard";
        public const string xuacs_xonwatch_ips = "xuacs_xonwatch_ips";
        public const string xuacs_xonwatch_voucher = "xuacs_xonwatch_voucher";
        public const string xuser_doubleWriteHistory = "xuser_doubleWriteHistory";
        public const string zune_dvi_FECatalogDBZuneApps_active = "zune_dvi_FECatalogDBZuneApps_active";
        public const string zunedb_catalogwatcher_extractor_batch_size = "zunedb_catalogwatcher_extractor_batch_size";
        public const string zunedb_catalogwatcher_extractor_timeout_in_secs = "zunedb_catalogwatcher_extractor_timeout_in_secs";
        public const string zunedb_catalogwatcher_fast_esp_collection_name = "zunedb_catalogwatcher_fast_esp_collection_name";
        public const string zunedb_catalogwatcher_fast_esp_ingestion_port = "zunedb_catalogwatcher_fast_esp_ingestion_port";
        public const string zunedb_catalogwatcher_fast_esp_max_documents_per_batch = "zunedb_catalogwatcher_fast_esp_max_documents_per_batch";
        public const string zunedb_catalogwatcher_fast_wait_for_indexing = "zunedb_catalogwatcher_fast_wait_for_indexing";
        public const string zunedb_catalogwatcher_perform_and_log_validation_on_error = "zunedb_catalogwatcher_perform_and_log_validation_on_error";
        public const string zunedb_catalogwatcher_producer_consumer_zuneapp_max_queue_size = "zunedb_catalogwatcher_producer_consumer_zuneapp_max_queue_size";

        // An array used by the SettingChangeFilter defined by the config library. Items not in this array will not have changes
        // to the settings data in NPDB propigated into the Config class' caches and will not be offered to the Config client code.
        // Add a dynamic="true" attribute to a setting element in the configItems.xml file to have that setting automatically included in this array.
          
        public static string[] DynamicSettings = new string[]
        {
  
               "aainfo_xbancExpirationInSeconds",
               "aamodule_antidosBanTimeInSeconds",
               "aamodule_antidosBlockingThreshold",
               "aamodule_antidosMaxRecordsToTrack",
               "aamodule_antidosThrottlingThreshold",
               "aamodule_antidosTrackingThreshold",
               "aamodule_Rps_site",
               "aamodule_sts_deviceId_cert_subject_prefix",
               "aamodule_useLoadBalancerSslHeaders",
               "aamodule_wp7_deviceId_cert_subject_prefix",
               "aamodule_wp8_deviceId_cert_subject_prefix",
               "abch_fastFailBlockIntervalSeconds",
               "abch_fastFailTimeoutThresholdCount",
               "abch_fastFailTimeoutTimespanSeconds",
               "acceleration_context_duration_alert_limit",
               "acceleration_fastFailBlockIntervalSeconds",
               "acceleration_fastFailTimeoutThresholdCount",
               "acceleration_fastFailTimeoutTimespanSeconds",
               "acceleration_heartbeat_interval",
               "acceleration_localCacheItemDuration",
               "acceleration_localCacheMaxSize",
               "acceleration_low_water_data_storage_bytes",
               "acceleration_notificationPollInterval",
               "acceleration_record_maintenance_period",
               "acceleration_replyTimeout",
               "acceleration_total_data_storage_bytes",
               "authsg_allowlistheadersincoming",
               "authsg_allowlistheadersoutgoing",
               "authsg_gatewayTimeoutSeconds",
               "authsg_requestTimeoutSeconds",
               "authsg_sslCertSubject",
               "authsg_whitelistheaders",
               "bdk_auditEnabled",
               "bif_AllowBehaviorInjections",
               "billing_activateTokenTimeout",
               "billing_activateTokenTimeout_LiveService",
               "billing_activateTokenTimeout_Xbox1",
               "billing_addCommentTimeout",
               "billing_addCommentTimeout_LiveService",
               "billing_addCommentTimeout_Xbox1",
               "billing_addPaymentInstrumentTimeout",
               "billing_addPaymentInstrumentTimeout_LiveService",
               "billing_addPaymentInstrumentTimeout_Xbox1",
               "billing_addRoleAssignmentTimeout",
               "billing_addRoleAssignmentTimeout_LiveService",
               "billing_addRoleAssignmentTimeout_Xbox1",
               "billing_addViolationTimeout",
               "billing_addViolationTimeout_LiveService",
               "billing_addViolationTimeout_Xbox1",
               "billing_allowEditorialPurchasesAsZeroPoints",
               "billing_allowFakeActivationCode",
               "billing_allowInjectedScsErrorInRequest",
               "billing_allowUrlOverrideInRequest",
               "billing_bdkUrl",
               "billing_calculateTaxTimeout",
               "billing_calculateTaxTimeout_LiveService",
               "billing_calculateTaxTimeout_Xbox1",
               "billing_cancelSubscriptionTimeout",
               "billing_cancelSubscriptionTimeout_LiveService",
               "billing_cancelSubscriptionTimeout_Xbox1",
               "billing_checkProvisioningStatusTimeout",
               "billing_checkProvisioningStatusTimeout_LiveService",
               "billing_checkProvisioningStatusTimeout_Xbox1",
               "billing_closeBalanceTimeout",
               "billing_connectionLimit",
               "billing_connectToBilling",
               "billing_convertSubscriptionExTimeout",
               "billing_convertSubscriptionExTimeout_LiveService",
               "billing_convertSubscriptionExTimeout_Xbox1",
               "billing_convertSubscriptionTimeout",
               "billing_convertSubscriptionTimeout_LiveService",
               "billing_convertSubscriptionTimeout_Xbox1",
               "billing_createAccountTimeout",
               "billing_createAccountTimeout_LiveService",
               "billing_createAccountTimeout_Xbox1",
               "billing_creditPaymentInstrumentExTimeout",
               "billing_creditPaymentInstrumentTimeout",
               "billing_ctpAllowUrlOverride",
               "billing_ctpconnectbilling",
               "billing_ctpJoinSubscriptionTimeoutSeconds",
               "billing_ctpMigrateAccountTimeoutSeconds",
               "billing_ctppurchase_roundboundarymonths",
               "billing_ctpPurchaseTransactionServiceTimeoutSeconds",
               "billing_ctpPurchaseTransactionServiceUrl",
               "billing_ctpTenantName",
               "billing_deprovisionServicesTimeout",
               "billing_deprovisionServicesTimeout_LiveService",
               "billing_deprovisionServicesTimeout_Xbox1",
               "billing_familyGoldLimit",
               "billing_getAccountIdFromAdminPUIDTimeout",
               "billing_getAccountIdFromAdminPUIDTimeout_LiveService",
               "billing_getAccountIdFromAdminPUIDTimeout_Xbox1",
               "billing_getAccountInfoTimeout",
               "billing_getAccountInfoTimeout_LiveService",
               "billing_getAccountInfoTimeout_Xbox1",
               "billing_getCommentsTimeout",
               "billing_getCommentsTimeout_LiveService",
               "billing_getCommentsTimeout_Xbox1",
               "billing_getEligibleOfferingsTimeout",
               "billing_getEligibleOfferingsTimeout_LiveService",
               "billing_getEligibleOfferingsTimeout_Xbox1",
               "billing_getKeyTimeout",
               "billing_getKeyTimeout_LiveService",
               "billing_getKeyTimeout_Xbox1",
               "billing_getPartnerConfigurationTimeout",
               "billing_getPartnerConfigurationTimeout_LiveService",
               "billing_getPartnerConfigurationTimeout_Xbox1",
               "billing_getPaymentInstrumentsExTimeout",
               "billing_getPaymentInstrumentsExTimeout_LiveService",
               "billing_getPaymentInstrumentsExTimeout_Xbox1",
               "billing_getPaymentInstrumentsTimeout",
               "billing_getPaymentInstrumentsTimeout_LiveService",
               "billing_getPaymentInstrumentsTimeout_Xbox1",
               "billing_getPermitsForObjectIdTimeout",
               "billing_getPermitsForObjectIdTimeout_LiveService",
               "billing_getPermitsForObjectIdTimeout_Xbox1",
               "billing_getSubscriptionStatusTimeout",
               "billing_getSubscriptionStatusTimeout_LiveService",
               "billing_getSubscriptionStatusTimeout_Xbox1",
               "billing_getSubscriptionsTimeout",
               "billing_getSubscriptionsTimeout_LiveService",
               "billing_getSubscriptionsTimeout_Xbox1",
               "billing_getTokenInfoExTimeout",
               "billing_getTokenInfoExTimeout_LiveService",
               "billing_getTokenInfoExTimeout_Xbox1",
               "billing_initializeCTPWrapper",
               "billing_loadTokenInstanceTimeout",
               "billing_loadTokenInstanceTimeout_LiveService",
               "billing_loadTokenInstanceTimeout_Xbox1",
               "billing_maxEditorialPurchasesAsZeroPointsPerMinute",
               "billing_maxTrialCount",
               "billing_migrateOfferTimeout",
               "billing_migrateOfferTimeout_LiveService",
               "billing_migrateOfferTimeout_Xbox1",
               "billing_migrationOfferId",
               "billing_newContentWindow",
               "billing_offsetOrderCommentInfoCommentCode",
               "billing_offsetOrderFinancialReportingCode",
               "billing_offsetOrderTimeout",
               "billing_offsetOrderTimeout_LiveService",
               "billing_offsetOrderTimeout_Xbox1",
               "billing_provisionServicesTimeout",
               "billing_provisionServicesTimeout_LiveService",
               "billing_provisionServicesTimeout_Xbox1",
               "billing_pumpUserBillingInfoQueue",
               "billing_pumpUserBillingInfoQueueInterval",
               "billing_purchaseItemTimeout",
               "billing_purchaseItemTimeout_LiveService",
               "billing_purchaseItemTimeout_Xbox1",
               "billing_purchaseOfferingExTimeout",
               "billing_purchaseOfferingExTimeout_LiveService",
               "billing_purchaseOfferingExTimeout_Xbox1",
               "billing_purchaseOfferingTimeout",
               "billing_purchaseOfferingTimeout_LiveService",
               "billing_purchaseOfferingTimeout_Xbox1",
               "billing_queueUserBillingInfo",
               "billing_reinstateSubscriptionTimeout",
               "billing_reinstateSubscriptionTimeout_LiveService",
               "billing_reinstateSubscriptionTimeout_Xbox1",
               "billing_removePaymentInstrumentTimeout",
               "billing_removePaymentInstrumentTimeout_LiveService",
               "billing_removePaymentInstrumentTimeout_Xbox1",
               "billing_removeRoleAssignmentTimeout",
               "billing_removeRoleAssignmentTimeout_LiveService",
               "billing_removeRoleAssignmentTimeout_Xbox1",
               "billing_removeViolationTimeout",
               "billing_removeViolationTimeout_LiveService",
               "billing_removeViolationTimeout_Xbox1",
               "billing_scsSourcePartnerId",
               "billing_setPartnerConfigurationTimeout",
               "billing_setPartnerConfigurationTimeout_LiveService",
               "billing_setPartnerConfigurationTimeout_Xbox1",
               "billing_settleBalanceTimeout",
               "billing_settleBalanceTimeout_LiveService",
               "billing_settleBalanceTimeout_Xbox1",
               "billing_stopPaymentsTimeout",
               "billing_submitOrderTimeout",
               "billing_submitOrderTimeout_LiveService",
               "billing_submitOrderTimeout_Xbox1",
               "billing_switchPaymentInstrumentsTimeout",
               "billing_switchPaymentInstrumentsTimeout_LiveService",
               "billing_switchPaymentInstrumentsTimeout_Xbox1",
               "billing_testConnectionTimeout",
               "billing_testConnectionTimeout_LiveService",
               "billing_testConnectionTimeout_Xbox1",
               "billing_timeout",
               "billing_timeoutBlockInterval",
               "billing_transferBalanceTimeout",
               "billing_transferBalanceTimeout_LiveService",
               "billing_transferBalanceTimeout_Xbox1",
               "billing_updateAccountInfoTimeout",
               "billing_updateAccountInfoTimeout_LiveService",
               "billing_updateAccountInfoTimeout_Xbox1",
               "billing_updatePaymentInstrumentInfoTimeout",
               "billing_updatePaymentInstrumentInfoTimeout_LiveService",
               "billing_updatePaymentInstrumentInfoTimeout_Xbox1",
               "billing_updateSubscriptionInfoTimeout",
               "billing_updateSubscriptionInfoTimeout_LiveService",
               "billing_updateSubscriptionInfoTimeout_Xbox1",
               "billing_useCatalogSubscriptionOffers",
               "billing_validateProvisioningDataTimeout",
               "billing_validateProvisioningDataTimeout_LiveService",
               "billing_validateProvisioningDataTimeout_Xbox1",
               "casvc_genericSslIssuerName",
               "casvc_oscarIssuerName",
               "catalog_activeFECatalogDBSearchVirtualInterface",
               "catalog_activeFECatalogDBZuneVirtualInterface",
               "catalog_appMediaTypes",
               "catalog_consumableMediaTypes",
               "catalog_editorial_ips0",
               "catalog_editorial_ips1",
               "catalog_editorial_ips2",
               "catalog_editorial_priv0",
               "catalog_editorial_priv1",
               "catalog_editorial_priv2",
               "catalog_editorial_time0",
               "catalog_editorial_time1",
               "catalog_editorial_time2",
               "catalog_gameMediaTypes",
               "catalog_musicMediaTypes",
               "catalog_pointsBundleMediaTypes",
               "catalog_repurchasableMediaTypes",
               "catalog_subscriptionMediaTypes",
               "catalog_videoMediaTypes",
               "catalogwatcher_azure_connection_string",
               "catalogwatcher_azure_connection_string_speech",
               "catalogwatcher_azure_feed_prefix",
               "catalogwatcher_azure_feed_prefix_speech",
               "catalogwatcher_azure_feed_suffix",
               "catalogwatcher_azure_feed_suffix_speech",
               "catalogwatcher_azure_storage_blob_format_date_part",
               "catalogwatcher_azure_storage_blob_format_delta",
               "catalogwatcher_azure_storage_blob_format_delta_speech",
               "catalogwatcher_azure_storage_blob_format_full",
               "catalogwatcher_azure_storage_blob_format_full_speech",
               "catalogwatcher_azure_storage_container",
               "catalogwatcher_azure_storage_container_speech",
               "catalogwatcher_azure_storage_max_documents_per_batch",
               "catalogwatcher_azure_storage_max_documents_per_batch_speech",
               "catalogwatcher_commands_timeout_in_secs",
               "catalogwatcher_extractor_timeout_in_secs",
               "catalogwatcher_fast_esp_collection_name",
               "catalogwatcher_fast_esp_ingestion_port",
               "catalogwatcher_fast_esp_max_document_size",
               "catalogwatcher_fast_esp_max_documents_per_batch",
               "catalogwatcher_fast_esp_virtual_collection_name",
               "catalogwatcher_fast_wait_for_indexing",
               "catalogwatcher_media_extractor_batch_size",
               "catalogwatcher_media_extractor_version",
               "catalogwatcher_perform_and_log_validation_on_error",
               "catalogwatcher_producer_consumer_media_max_queue_size",
               "catalogwatcher_producer_consumer_speech_max_queue_size",
               "catalogwatcher_producer_consumer_video_max_queue_size",
               "catalogwatcher_speech_extractor_batch_size",
               "catalogwatcher_speech_extractor_timeout_in_secs",
               "catalogwatcher_speech_extractor_version",
               "catalogwatcher_video_document_builder_firstpartyprovider",
               "catalogwatcher_video_extractor_batch_size",
               "catalogwatcher_video_extractor_timeout_in_secs",
               "clean_clip_delete_window_minute",
               "cleanser_clientDeadSec",
               "cleanser_EtxEventTarget",
               "cleanser_fdbReconnectIntervalSec",
               "cleanser_watchDogTimerIntervalSec",
               "cleanser_XomFileTarget",
               "community_ownerNotifyCacheExpirySeconds",
               "compPlugins_allowClientResultsSubmissions",
               "compPlugins_allowTimeAdjustment",
               "cron_deleteCompletedJobs",
               "cron_jobCheckInterval",
               "cron_load_job_max_sleep_time_milliseconds",
               "cron_requestThreads",
               "cron_retryInterval",
               "crux_allowTestAddPoints",
               "crux_allowTestCreateAccount",
               "crux_MusicNetAESKeyType",
               "crux_MusicNetAESKeyVer",
               "crux_MusicNetTokenMagicString",
               "crux_MusicNetTokenSaltLen",
               "crux_passportSiteAddress",
               "crux_useMusicNetForProvisioning",
               "crux_VODLicenseWindowInMinutes",
               "CTPPurchase_fastFailMaxThreshold",
               "CTPPurchase_fastFailMinThreshold",
               "CTPPurchase_fastFailThrottling",
               "CTPPurchase_fastFailWindow",
               "dmp_addPromotionalBalanceMaxAttempts",
               "dmp_addPromotionalBalanceTimeoutSeconds",
               "dmp_allowUrlOverride",
               "dmp_auditEnabled",
               "dmp_autoRegisterUsers",
               "dmp_blacklistBlockIntervalSeconds",
               "dmp_blacklistTimeoutThresholdCount",
               "dmp_blacklistTimeoutTimespanSeconds",
               "dmp_cancelPurchaseItemMaxAttempts",
               "dmp_cancelPurchaseItemTimeoutSeconds",
               "dmp_clientCertSubject",
               "Dmp_fastFailMaxThreshold",
               "Dmp_fastFailMinThreshold",
               "Dmp_fastFailWindow",
               "dmp_getBalanceDetailsMaxAttempts",
               "dmp_getBalanceDetailsTimeoutSeconds",
               "dmp_getBalanceMaxAttempts",
               "dmp_getBalanceTimeoutSeconds",
               "dmp_maxAcquisitionTitleLength",
               "dmp_maxItemCategoryLength",
               "dmp_maxItemTitleLength",
               "dmp_maxPointsBalance",
               "dmp_pumpPurchasesQueue",
               "dmp_pumpRewardsQueue",
               "dmp_purchaseItemMaxAttempts",
               "dmp_purchaseItemTimeoutSeconds",
               "dmp_purchaseTransactionConsiderFailedSeconds",
               "dmp_purchaseTransactionExpiredSeconds",
               "dmp_queuePumpIntervalSeconds",
               "dmp_registerUserMaxAttempts",
               "dmp_registerUserTimeoutSeconds",
               "dmp_rewardTransactionExpiredSeconds",
               "dmp_tenantID",
               "dmp_transactionUrl",
               "dmp_transferBalanceMaxAttempts",
               "dmp_transferBalanceTimeoutSeconds",
               "dmp_transferPointsTimeoutSeconds",
               "DmpUps_fastFailMaxThreshold",
               "DmpUps_fastFailMinThreshold",
               "DmpUps_fastFailWindow",
               "etx_default_header_version",
               "fastEsp_allow_debug_xslt",
               "fastEsp_persist_connection_in_secs",
               "fastEsp_use_result_views",
               "fastfail_bucketCount",
               "fastfail_disableThrottling",
               "feedback_coeffBias",
               "feedback_coeffFudgeFactor",
               "feedback_coeffNegativeReview",
               "feedback_coeffPositiveReview",
               "feedback_coeffRange",
               "feedback_coeffSlope",
               "feedback_maxComplaintType",
               "feedback_maxFeedbackTypes",
               "feedback_maxReviewType",
               "feedback_minFeedbackServiceType",
               "feedback_ratingDecayFactor",
               "feedback_ratingDecayFloor",
               "feedback_reviewIgnoreThreshold",
               "finbus_certificateSubject",
               "finbus_clientPartnerId",
               "finbus_closeTimeout",
               "finbus_endpointAddress",
               "finbus_fastFailMaxThreshold",
               "finbus_fastFailMinThreshold",
               "finbus_fastFailWindow",
               "finbus_getPendingItemsMaxItems",
               "finbus_ignoreSslPolicyErrors",
               "finbus_maxActiveRequests",
               "finbus_maxBufferPoolSize",
               "finbus_maxBufferSize",
               "finbus_maxConnections",
               "finbus_maxReceivedMessageSize",
               "finbus_openTimeout",
               "finbus_pumpQueue",
               "finbus_queuePumpIntervalSeconds",
               "finbus_receiveTimeout",
               "finbus_sendTimeout",
               "finbus_throttleWaitMilliseconds",
               "finbus_transactionConsiderFailureSeconds",
               "finbus_transactionExpiredSeconds",
               "fse_bookmarkDaysFloor",
               "fse_bookmarkDaysThreshold",
               "fse_bookmarkHoursFloor",
               "fse_bookmarkHoursThreshold",
               "fse_bookmarkMinutesFloor",
               "fse_bookmarkMinutesThreshold",
               "fse_configChange",
               "fse_reservationSeconds",
               "fse_reservationWaitSeconds",
               "fse_reservationWaitSecondsMaximum",
               "geofencing_allowAccessOnGeoInfoExceptions",
               "geofencing_allowAccessOnGeoInfoNulls",
               "geofencing_maximumDaysBetweenGeoDbUpdate",
               "geofencing_offerGeoFencingEnabled",
               "geofencing_pathToGeoDb",
               "geofencing_videoGeoFencingEnabled",
               "global_protocolVersion",
               "healthcheck_executionPeriodInSeconds",
               "kdcsvc_askdc_DoS_cacheTimeMillis",
               "kdcsvc_askdc_DoS_tooSoonTimeMillis",
               "kdcsvc_askdc_DoS2_blockingTime",
               "kdcsvc_askdc_DoS2_enabled",
               "kdcsvc_askdc_DoS2_interval",
               "kdcsvc_askdc_DoS2_maxRequests",
               "kdcsvc_askdc_echo_enabled",
               "kdcsvc_askdc_echo_lifetimeInSeconds",
               "kdcsvc_askdc_keyVersion",
               "kdcsvc_askdc_machine_allowLegacyKey",
               "kdcsvc_askdc_timeSkewSeconds",
               "kdcsvc_core_ATQThreads",
               "kdcsvc_managed_command_timeout",
               "kdcsvc_managed_limitEventWarnRecurranceInSeconds",
               "kdcsvc_managed_limitThreadPercentDeactivationThreshold",
               "kdcsvc_managed_limitThreadPercentPerPartition",
               "kdcsvc_managed_limitThreadPercentThreshold",
               "kdcsvc_managed_rpsPCLifetimeInSeconds",
               "kdcsvc_managed_rpsXenonLifetimeInSeconds",
               "kdcsvc_managed_simulateDbLatencyInMs",
               "kdcsvc_xkdc_allowUnknownVersion",
               "kdcsvc_xkdc_cacheLifeTimeInSeconds",
               "kdcsvc_xkdc_DoS2_blockingTime",
               "kdcsvc_xkdc_DoS2_enabled",
               "kdcsvc_xkdc_DoS2_interval",
               "kdcsvc_xkdc_DoS2_maxRequests",
               "kdcsvc_xkdc_enableUserMachineTrust",
               "kdcsvc_xkdc_enforceClientVersion",
               "kdcsvc_xkdc_ignoreDuplicateRequests",
               "kdcsvc_xkdc_minTicketLifetimeSeconds",
               "kdcsvc_xkdc_removeUserPrivilegesOnRequiresManagement",
               "kdcsvc_xkdc_RequestCache_enabled",
               "kdcsvc_xkdc_RequestCache_lifetimeInSeconds",
               "kdcsvc_xkdc_timeSkewSeconds",
               "kdcsvc_xkdc_userAuthorizationBackwardsCompatibility",
               "kdcsvc_xkdc_useUniqueSigninKey",
               "kdcsvc_xmacs_acceptDevKits",
               "kdcsvc_xmacs_consoleExceptionList",
               "kdcsvc_xmacs_consoleTypeMask",
               "kdcsvc_xmacs_DoS2_blockingTime",
               "kdcsvc_xmacs_DoS2_enabled",
               "kdcsvc_xmacs_DoS2_interval",
               "kdcsvc_xmacs_DoS2_maxRequests",
               "kdcsvc_xmacs_DOSStage1CacheTimeout",
               "kdcsvc_xmacs_DOSStage2CacheTimeout",
               "kdcsvc_xmacs_hashListPercentageWarning",
               "kdcsvc_xmacs_keyEncryptionKeyVersion",
               "kdcsvc_xmacs_LimitedPcTokens",
               "kdcsvc_xmacs_maxAllowancePerHour",
               "kdcsvc_xmacs_PUIDBlockSize",
               "kdcsvc_xmacs_timeSkewSeconds",
               "kdcsvc_xmacs_use_xcrypto",
               "Lists_ConfigChange",
               "Lists_ValidateXmlMode",
               "livecache_errorResultTTL",
               "livecache_forwardRetryInterval",
               "livecache_lastModified",
               "livecache_maxHeaderCollectionCount",
               "livecache_MaxRequestRatePerUser",
               "livecache_serviceEnabled",
               "livecache_UserLimitInMinutes",
               "livecache_UserLimitRandMinutes",
               "livecontent_sites",
               "liveinfo_clientconfiglimit",
               "liveoffer_ContentCheckMode",
               "logCollectorModule_badDigestResponseCode",
               "logCollectorModule_returnFixedResponseCodeForAllCalls",
               "lspfd_databaseCachingEnabled",
               "lspfd_fastFailBlockIntervalSeconds",
               "lspfd_fastFailTimeoutThresholdCount",
               "lspfd_fastFailTimeoutTimespanSeconds",
               "MasterKey_currentEncryptKeyVersion",
               "mix_default_LeaderBoardServer",
               "mix_default_MatchServer",
               "mix_productMgmt_imageCleanup",
               "mix_titleMgmt_kdcReloadTimeout",
               "mix_titlemgmt_liveconnectdbhost",
               "mix_wcfMaxReceivedMsgSize",
               "mixsettingsmanagement_etx_vortex_mgmt_timeout_ms",
               "msnrr_allowUrlOverride",
               "msnrr_failFastBlockIntervalSeconds",
               "msnrr_failFastThresholdCount",
               "msnrr_failFastThresholdIntervalSeconds",
               "msnrr_getRatingAveragesTimeoutSeconds",
               "msnrr_getRatingByUserWithAverageTimeoutSeconds",
               "msnrr_ignorefdrequests",
               "msnrr_saveRatingTimeoutSeconds",
               "msnrr_serviceAggregatorUrl",
               "msnrr_serviceSingleRatingUrl",
               "msnrr_testContentType",
               "msnrr_testUserPuid",
               "musicnet_addSubscriptionOfferTimeoutSeconds",
               "musicnet_addTrialSubscriptionOfferTimeoutSeconds",
               "musicnet_allowUrlOverride",
               "musicnet_apiMaxRetryAttempts",
               "musicnet_auditEnabled",
               "musicnet_cancelSubscriptionOfferTimeoutSeconds",
               "musicnet_closeAccountTimeoutSeconds",
               "musicnet_createAccountTimeoutSeconds",
               "musicnet_dmpPurchaseGlobalMusicCampaignID",
               "musicnet_dmpPurchaseGlobalMusicSKU",
               "musicnet_dmpPurchaseMusicAlbumCategory",
               "musicnet_dmpPurchaseMusicTrackCategory",
               "musicnet_dmpPurchaseTitleArtistFormatString",
               "musicnet_downgradeSubscriptionOfferTimeoutSeconds",
               "musicnet_endTrialSubscriptionOfferTimeoutSeconds",
               "musicnet_failFastBlockIntervalSeconds",
               "musicnet_failFastThresholdCount",
               "musicnet_failFastThresholdIntervalSeconds",
               "musicnet_getServiceConfigurationTimeoutSeconds",
               "musicnet_getServiceConfigurationUrl",
               "musicnet_offerIdMusicNetSkuOverrides",
               "musicnet_pumpPurchasesQueue",
               "musicnet_purchaseAssetsTimeoutSeconds",
               "musicnet_purchaseTransactionConsiderFailedSeconds",
               "musicnet_purchaseTransactionExpiredSeconds",
               "musicnet_queuePumpIntervalSeconds",
               "musicnet_resumeAccountTimeoutSeconds",
               "musicnet_retailerID",
               "musicnet_subscriptionSku",
               "musicnet_suspendAccountTimeoutSeconds",
               "musicnet_transferPurchaseDBEntitlementsTimeoutSeconds",
               "musicnet_trialSubscriptionSku",
               "musicnet_upgradeSubscriptionOfferTimeoutSeconds",
               "nameResolver_ruleExpirationHours",
               "NotificationCache_fastFailBlockIntervalSeconds",
               "NotificationCache_fastFailTimeoutThresholdCount",
               "NotificationCache_fastFailTimeoutTimespanSeconds",
               "NotificationCache_replyTimeout",
               "passport_blacklistBlockIntervalSeconds",
               "passport_blacklistTimeoutThresholdCount",
               "passport_blacklistTimeoutTimespanSeconds",
               "passport_partnerCallTimeoutSeconds",
               "passport_publicKeyCert",
               "PassportCreation_fastFailMaxThreshold",
               "PassportCreation_fastFailMinThreshold",
               "PassportCreation_fastFailWindow",
               "PassportCredentials_fastFailMaxThreshold",
               "PassportCredentials_fastFailMinThreshold",
               "PassportCredentials_fastFailWindow",
               "PassportLogin_fastFailMaxThreshold",
               "PassportLogin_fastFailMinThreshold",
               "PassportLogin_fastFailWindow",
               "presence_AffiliatesAvoidingMeListSize",
               "presence_AffiliatesCompletedGameListSize",
               "presence_AffiliatesEncounteredListSize",
               "presence_AffiliatesFavoritesListSize",
               "presence_AffiliatesNegativeFeedbackListSize",
               "presence_AffiliatesPositiveFeedbackListSize",
               "presence_BucketReloadDelay",
               "presence_ConcurrentSQLThreads",
               "presence_ContextDurationAlertLimit",
               "presence_DeadSgOnFailedQVal",
               "presence_EnableRichPresence",
               "presence_ExpirationCheckInterval",
               "presence_HeartbeatDelay",
               "presence_IdleQValsCheck",
               "presence_MaxFriends",
               "presence_MaxNumPoolBuffers",
               "presence_MaxPresenceUsers",
               "presence_MaxQValsPerHeartbeat",
               "presence_MaxRichPresenceBytes",
               "presence_MessageTimeout",
               "presence_MessageTypeExpiration",
               "presence_MessagingDailyRecipients",
               "presence_MessagingDailySends",
               "presence_NumSQLThreads",
               "presence_PoolBufferSize",
               "presence_PresUserCleanupDelay",
               "presence_pubsubEventTimeout",
               "presence_pubsubEventUrl",
               "presence_pubsubNotificationEnabled",
               "presence_QueryAffiliatesOkToPeerSubscribe",
               "presence_QValRetryDelays",
               "presence_RichPresenceDebug",
               "presence_SGIndexSize",
               "presence_StartNumPoolBuffers",
               "presence_StateBitsNotifyWhitelist",
               "presence_StoreStateInVelocity",
               "presence_UserIndexSize",
               "presence_ValidMessageTypes",
               "presence_WebUserTimeout",
               "presence_WelcomeToNewConsoleMessage",
               "presence_WelcomeToXboxLiveMessage",
               "presence_XBoxIndexSize",
               "presence_XonWatchIPs",
               "PresenceCache_fastFailBlockIntervalSeconds",
               "PresenceCache_fastFailTimeoutThresholdCount",
               "PresenceCache_fastFailTimeoutTimespanSeconds",
               "PresenceCache_replyTimeout",
               "ProfileCache_fastFailBlockIntervalSeconds",
               "ProfileCache_fastFailTimeoutThresholdCount",
               "ProfileCache_fastFailTimeoutTimespanSeconds",
               "ProfileCache_replyTimeout",
               "PubSubEvent_fastFailBlockIntervalSeconds",
               "PubSubEvent_fastFailTimeoutThresholdCount",
               "PubSubEvent_fastFailTimeoutTimespanSeconds",
               "query_enableTitleLog",
               "query_LspBackcompTitles",
               "ratings_aggregate_use_ventura",
               "ratings_aggregate_ventura_listIdRegex",
               "ratings_use_msnrr",
               "ratings_use_ventura",
               "scs_blacklistBlockIntervalSeconds",
               "scs_blacklistTimeoutThresholdCount",
               "scs_blacklistTimeoutTimespanSeconds",
               "scs_pumpPurchaseItemQueue",
               "scs_purchaseItemTransactionConsiderFailedSeconds",
               "scs_purchaseItemTransactionExpiredSeconds",
               "scs_queuePumpIntervalSeconds",
               "SCSCreditCard_fastFailMaxThreshold",
               "SCSCreditCard_fastFailMinThreshold",
               "SCSCreditCard_fastFailWindow",
               "SCSNonCreditCard_fastFailMaxThreshold",
               "SCSNonCreditCard_fastFailMinThreshold",
               "SCSNonCreditCard_fastFailWindow",
               "sg_AesMinClientVersionPc",
               "sg_AesMinClientVersionXbox360",
               "sg_AesProtocolEnabled",
               "sg_ArpNegativeTimeoutInSeconds",
               "sg_ArpPositiveTimeoutInSeconds",
               "sg_ArpRequestRetries",
               "sg_ArpRexmitTimeoutInSeconds",
               "sg_ChalHeartbeatTimeoutInSeconds",
               "sg_DesKeySize",
               "sg_DnsRefreshFailureIntervalInSeconds",
               "sg_DnsRefreshIntervalInMinutes",
               "sg_DvdChalShiftIntervalInSeconds",
               "sg_EnableChallengeResponse",
               "sg_HashTableOverheadInPercent",
               "sg_IpHdrTos",
               "sg_IpHdrTtl",
               "sg_KerberosApReqDeltaInMinutes",
               "sg_KeyExBlockIntervalInSeconds",
               "sg_KeyExDontSendIcmp",
               "sg_KeyExIcmpVip",
               "sg_KeyExMinRetryInMs",
               "sg_KeyExXbToSgInitMinSize",
               "sg_LogClientUpdates",
               "sg_LuaStateTableSize",
               "sg_NatDetectionDisconnectInSeconds",
               "sg_NotifyBatchIntervalInSeconds",
               "sg_SgToXbChallengePeriodInSeconds",
               "sg_SgToXbKeyExTimeoutInSeconds",
               "sg_SgToXbPulseTimeoutInSeconds",
               "sg_SgToXbScanFrequencyInSeconds",
               "sg_SgToXbTimeoutInSeconds",
               "sg_SpiFlow",
               "sg_SpiFlowDataLimit",
               "sg_SpiWatchdogTimeoutInSeconds",
               "sg_StatsConfidenceLimitInClients",
               "sg_StatsDisconnectSigmaInterval",
               "sg_StatsHistoryInMs",
               "sg_StatsPenaltyTimeInSeconds",
               "sg_StatsRefreshFrequencyInSeconds",
               "sg_StatsReportIntervalInSeconds",
               "sg_StatsWarningSigmaInterval",
               "sg_WiretapTimeoutInMinutes",
               "sg_XbToSgChallengeAckInSeconds",
               "sg_XbToSgChallengeTimeoutInSeconds",
               "sg_XbToSgPulseTimeoutInSeconds",
               "sg_XbToSgReplayWindow",
               "sg_XbToSgTimeoutInSeconds",
               "sginfo_maxRetries",
               "sginfo_retrieveForFlowToken",
               "sginfo_supportedHttpAuthDataVersion",
               "sginfo_timeout",
               "sginfo_useOldProtocol",
               "sginfo_verifyAuth",
               "sginfo_verifyTestTitleVersion",
               "signature_crlRevocationMode",
               "signature_digestReloadInterval",
               "signature_licenseTransferMinDaysToRestart",
               "signature_licenseTransferTimeoutInMinutes",
               "signature_machineReloadInterval",
               "signature_serviceKeyType",
               "signature_serviceKeyVersion",
               "signature_titleReloadInterval",
               "signature_userReloadInterval",
               "signature_validateCertificateValidUntilMinutes",
               "SocialCache_BulkGetBatchMaxSize",
               "SocialCache_CacheEntryExpirationTimeout",
               "SocialCache_fastFailBlockIntervalSeconds",
               "SocialCache_fastFailTimeoutThresholdCount",
               "SocialCache_fastFailTimeoutTimespanSeconds",
               "SocialCache_MaxMessageBytes",
               "SocialCache_MaxObjectsPerMessage",
               "SocialCache_replyTimeoutMS",
               "SocialCache_SocketBufferSize",
               "stats_AllowAlternateDestination",
               "stats_allowTitleReset",
               "stats_allowUnverifiedWrite",
               "stats_dbMaxRetry",
               "stats_dbRetryInteval",
               "stats_debugPuid",
               "stats_enableCertificationMode",
               "stats_enableTitlePerfCounters",
               "stats_trackCountersPerLb",
               "storage_xbancCacheTimeOut",
               "storageFD_allowZeroUserPuidsFromInternet",
               "storageFD_httpCacheHeader",
               "storageFD_httpContentTypeHeader",
               "storageFD_removeFileSqlTimeout",
               "storageFD_verifyAccessTokens",
               "storageFD_writeFileSqlTimeout",
               "storageModule_enableXbancCaching",
               "storageModule_maxUrlLength",
               "storageModule_returnFixedResponseCodeForAllCalls",
               "storageModule_urlPathRegEx",
               "storageModule_urlRedirectPath",
               "storageModule_urlReplacementString",
               "storageModule_urlStringToReplace",
               "stringsvr_flushStringsInterval",
               "stringsvr_loadStringsInterval",
               "stringsvr_reportingAggregateKeys",
               "sts_cert_subject",
               "sts_machine_token_expiration_seconds",
               "sts_partner_token_expiration_seconds",
               "sts_token_issuer_name",
               "sts_token_window_minutes",
               "sts_user_token_expiration_seconds",
               "tagrecycle_comber_job_batch_size",
               "tagrecycle_disassociated_job_batch_size",
               "tagrecycle_disassociater_high_value_files",
               "tagrecycle_disassociater_reservation_console_id",
               "tagrecycle_emailer_job_batch_size",
               "tagrecycle_emailer_job_file_path",
               "tagrecycle_emailer1_file_name",
               "tagrecycle_emailer2_file_name",
               "testfd_PermissionLevel",
               "testfd_whitelistTitles",
               "tokenService_batchSize",
               "tokenService_considerStaleSeconds",
               "tokenService_delayBaseNumber",
               "tokenService_delayExponentFactor",
               "tokenService_finalOutputDirectory",
               "tokenService_keyType",
               "tokenService_keyVersion",
               "tokenService_maxFailureThreshold",
               "tokenService_maxNumTokens",
               "tokenService_scsBatchSize",
               "tokenService_sqlBatchSize",
               "tokenService_tempOutputDirectory",
               "tokenService_vetTokens",
               "ups_blacklistBlockIntervalSeconds",
               "ups_blacklistTimeoutThresholdCount",
               "ups_blacklistTimeoutTimespanSeconds",
               "user_forbiddenNamesReloadIntervalMinutes",
               "venturarr_aggregateRatingTimeoutSeconds",
               "venturarr_clientVersion",
               "venturarr_customerGroup",
               "venturarr_defaultConnectionLimit",
               "venturarr_deviceId",
               "venturarr_failFastEnabled",
               "venturarr_failFastMaxThreshold",
               "venturarr_failFastMinThreshold",
               "venturarr_failFastTimeWindow",
               "venturarr_formatSuperVuid",
               "venturarr_formatVuid",
               "venturarr_ignoreSslPolicyErrors",
               "venturarr_locale",
               "venturarr_padCredentialExpiryMilliseconds",
               "venturarr_serviceAuthKeyArray",
               "venturarr_serviceAuthKeyIndex",
               "venturarr_serviceDirectoryServiceUrl",
               "venturarr_singleRatingTimeoutSeconds",
               "venturarr_superUserVuidPart",
               "vortex_alwaysUseWorkerThread",
               "vortex_cake_stream_recipe_template_xml",
               "vortex_defaultEventTypeCountWindowSeconds",
               "vortex_defaultInputEventQueueSize",
               "vortex_logweb_v1_p3p",
               "vortex_logweb_v1_producer",
               "vortex_maxIoThreads",
               "vortex_maxWorkerThreadLatencyMs",
               "vortex_maxWorkerThreads",
               "vortex_maxWorkItemQueueSize",
               "vortex_minIoThreads",
               "vortex_minWorkerThreads",
               "vortex_numOverlappedIoOperations",
               "vortex_retrieveSgInfoForUnknownEvents",
               "vortex_udpReceiveBufferSize",
               "vortex_unknownEventHeaderVersion",
               "wcstats_AboveMax",
               "wcstats_BelowMax",
               "wcstats_EnumEntriesMax",
               "wcstats_EnumRawEntriesMax",
               "wcstats_EnumRawStartMin",
               "wcstats_EnumStartMax",
               "wcstats_EnumStartMin",
               "wcstats_LeaderboardListValidSeconds",
               "wcstats_RemoveDups",
               "wcstats_SingleAppDomain",
               "wcstats_SortByRating",
               "wcstats_TagListMax",
               "wctoolsmgmt_actionTableXML",
               "wctoolsmgmt_autopropLBServer",
               "wctoolsmgmt_autopropMMServer",
               "wctoolsmgmt_concurrentJobs",
               "wctoolsmgmt_pingInterval",
               "wctoolsmgmt_uploadPathRoot",
               "wctoolsmgmt_workPathRoot",
               "webSG_capturePath",
               "wmis_allowUrlOverride",
               "wmis_apiMaxRetryAttempts",
               "wmis_clientCertSubject",
               "wmis_dmpPurchaseGlobalVideoCampaignID",
               "wmis_dmpPurchaseGlobalVideoSKU",
               "wmis_dmpPurchaseVideoCategory",
               "wmis_failFastBlockIntervalSeconds",
               "wmis_failFastThresholdCount",
               "wmis_failFastThresholdIntervalSeconds",
               "wmis_getVideoPurchaseDetailsTimeoutSeconds",
               "wmis_serviceUrl",
               "xarb_AllowAlternateDestination",
               "xarb_BundleRetryPeriodInSeconds",
               "xarb_EnableDebugResult",
               "xarb_GarbageCollectionIntervalInSeconds",
               "xarb_InterfaceBucketInterceptThrottleInMillis",
               "xarb_MaxBundleRetrySeconds",
               "xarb_MaxDelayedTrustUpdates",
               "xarb_MaxSessionSeconds",
               "xarb_MaxStatsBundleSize",
               "xarb_MaxTournamentBundleSize",
               "xarb_MemoryUsageHighWaterMark",
               "xarb_MemoryUsageLowWaterMark",
               "xarb_MigrationWaitWindowMinutes",
               "xarb_SessionTimeoutExtensionSeconds",
               "xarb_TitleParameterReloadPeriodInSeconds",
               "xarb_TrailingReportRetriesWaitSeconds",
               "xarb_TrustFlushPeriodInSeconds",
               "xarb_TrustIdleSecondsBeforeFlush",
               "xarb_TrustSummationExecutionTimeInSeconds",
               "xarb_TrustSummationPeriodInSeconds",
               "xarb_TrustSummationRetryInSeconds",
               "xarb_TrustSummationTimeoutSeconds",
               "xarb_VerboseLogging",
               "xbanc_context_duration_alert_limit",
               "xbanc_fastFailBlockIntervalSeconds",
               "xbanc_fastFailTimeoutThresholdCount",
               "xbanc_fastFailTimeoutTimespanSeconds",
               "xbanc_heartbeat_interval",
               "xbanc_localCacheItemDuration",
               "xbanc_localCacheMaxSize",
               "xbanc_low_water_data_storage_bytes",
               "xbanc_max_key_length",
               "xbanc_record_maintenance_period",
               "xbanc_replyTimeout",
               "xbanc_total_data_storage_bytes",
               "xbos_allowMultiItemSubmitOrderTransactions",
               "xbos_auditEnabled",
               "xbos_AutoCacheFlushHour",
               "xbos_blockPurchaseMediaOffersSubmitOrderTransactions",
               "xbos_CTPPurchaseTransactionConsiderFailedSeconds",
               "xbos_ctpTimeConversionRatio",
               "xbos_CTPTransactionExpiredSeconds",
               "xbos_EnablePaymentTypeIdSupportInZuneCatalog",
               "xbos_gfwlOrderAttributeGuid",
               "xbos_limitedChildContentPurchaseCountryList",
               "xbos_limitedChildOfferTypePurchaseCountryList",
               "xbos_MaxCacheSize_ContentEnumerate",
               "xbos_MaxCacheSize_EnumerateTitlesByFilter",
               "xbos_MaxCacheSize_GetTitleDetails",
               "xbos_newContentWindowHours",
               "xbos_populateNewPurchaseHistoryFromOldPurchase",
               "xbos_pumpCTPPurchaseQueue",
               "xbos_pumpOffsetOrderQueue",
               "xbos_pumpSubmitOrderQueue",
               "xbos_queuePumpIntervalSeconds",
               "xbos_submitOrderTransactionConsiderFailedSeconds",
               "xbos_submitOrderTransactionExpiredSeconds",
               "xbos_subscriptionMaxTimeCredit",
               "xbos_titleActivation_disableAllTitles",
               "xbos_useExternalVideoMarketplaceCatalog",
               "xbos_xbox360OrderAttributeGuid",
               "xcache_connection_receive_timeout_milliseconds",
               "xcache_connection_send_timeout_milliseconds",
               "xcache_db_batchSize",
               "xcache_db_pollingInterval",
               "xcache_db_transactionTimeout",
               "xcache_db_usedatabaselocks",
               "XCache_MaxMessageBytes",
               "XCache_SocketBufferSize",
               "xcbk_auditEnabled",
               "xcbk_sslCertSubject",
               "XConnSrv_BulkGetBatchMaxSize",
               "XConnSrv_MaxMessageBytes",
               "XConnSrv_MaxObjectsPerMessage",
               "XConnSrv_MaxSubscriptionsPerConnection",
               "XConnSrv_SocketBufferSize",
               "XConnSrv_UseSGAuth",
               "xcrypto_DoRealPakTest",
               "xds_ARPRetryEventThrottle",
               "xds_ARPRetryIntervalInSeconds",
               "xds_gatewayLookupIntervalInSeconds",
               "xds_ICMPReplyAddr",
               "xds_infactionLimitPerMinute",
               "xds_maxLogLength",
               "xds_minICMPRequestLength",
               "xds_minLogRequestLength",
               "xds_skewTimeInMilliSecs",
               "xds_TOS",
               "xds_TTL",
               "xmachine_doubleWriteHistory",
               "xmatchfd_defaultSessionExpiration",
               "xmatchfd_disableAffiliateQuery",
               "xmatchfd_enableAuthCheck",
               "xmatchfd_enableTitlePerfCounters",
               "xmatchfd_fastFailBlockIntervalSeconds",
               "xmatchfd_fastFailBucketIntervalSeconds",
               "xmatchfd_fastFailReservedThreadsPerDB",
               "xmatchfd_fastFailTimeoutThresholdCount",
               "xmatchfd_fastFailTimeoutTimespanSeconds",
               "xmatchfd_fastFailTotalSharedThreads",
               "xmatchfd_insertRetries",
               "xmatchfd_nolockRetries",
               "xmatchfd_relaxXenonValidation",
               "xmatchfd_sessioncacheexpiration",
               "xmatchfd_valueOfAvoidingMe",
               "xmatchfd_valueOfCompletedGame",
               "xmatchfd_valueOfFriend",
               "xmatchfd_valueOfNegativeFeedback",
               "xmatchfd_valueOfPositiveFeedback",
               "xmgmt_ntevents",
               "xmstv_accessInfoUri",
               "xmstv_crldp",
               "xmstv_issuerCertName",
               "xmstv_lastCaRevocationTicks",
               "xmstv_maximumCertificatesAllowed",
               "xmstv_subjectNameSuffix",
               "xrlscan_allowHead",
               "xsts_issuer_name",
               "xsts_signing_cert_name",
               "xsuppapi_extraLicensesIncrementBy",
               "xsuppapi_extraLicensesMaximum",
               "xsuppapi_FNCFormatString",
               "xsuppapi_FNCRegenMaxTries",
               "xsuppapi_Xbox1AccountFNCFlags",
               "xsuppapi_XboxComAccountFNCFlags",
               "xsuppapi_XenonAccountGoldFNCFlags",
               "xsuppapi_XenonAccountSilverFNCFlags",
               "xsuppapi_ZuneAccountFNCFlags",
               "xtou_cacheDurationSeconds",
               "xuacs_auditEnabled",
               "xuacs_defaultGamercardReputation",
               "xuacs_familyGoldAssignmentCoolDownWaitIntervalDays",
               "xuacs_familyGoldAssignmentDistinctUsers",
               "xuacs_familyGoldAssignmentThrottlingWindowDays",
               "xuacs_familyGoldChangeWaitIntervalHours",
               "xuacs_FamilyGoldConvertionRatio",
               "xuacs_gamertagChangeWaitIntervalHours",
               "xuacs_generateGamertagMinsToReserve",
               "xuacs_graduateUserPumpQueue",
               "xuacs_graduateUserQueuePumpIntervalSeconds",
               "xuacs_graduateUserQueuePumpRetryLimit",
               "xuacs_hijackingIntervalHours",
               "xuacs_machineGamertagIntervalDays",
               "xuacs_machineGamertagThreshold",
               "xuacs_machinePassportIntervalDays",
               "xuacs_machinePassportThreshold",
               "xuacs_machineRecoveryIntervalDays",
               "xuacs_machineRecoveryThreshold",
               "xuacs_passport_generateddomain",
               "xuacs_passport_generatedprefix",
               "xuacs_passportChangeWaitIntervalHours",
               "xuacs_PassportCreateGeneratedRetries",
               "xuacs_replaceUserPassportDaysBetween",
               "xuacs_replaceUserPassportPumpQueue",
               "xuacs_replaceUserPassportQueuePumpIntervalSeconds",
               "xuacs_replaceUserPassportQueuePumpRetryLimit",
               "xuacs_seedbasedGamertagDefault",
               "xuacs_setNoAgeOutQueueIntervalSeconds",
               "xuacs_setNoAgeOutQueueRetryLimit",
               "xuacs_setNoAgeOutQueueStart",
               "xuacs_subscriptionNotificationWindowDays",
               "xuacs_subscriptionTenureGracePeriodDays",
               "xuacs_switchUserCountryConsiderExpiredSeconds",
               "xuacs_switchUserCountryDaysBetween",
               "xuacs_switchUserCountryMigrateAccountOfferId",
               "xuacs_switchUserCountryPumpQueue",
               "xuacs_switchUserCountryQueuePumpIntervalSeconds",
               "xuacs_switchUserCountryRetryTimeoutsImmediately",
               "xuacs_switchUserPassportDaysBetween",
               "xuacs_switchUserPassportPumpQueue",
               "xuacs_switchUserPassportQueuePumpIntervalSeconds",
               "xuacs_switchUserPassportQueuePumpRetryLimit",
               "xuacs_trialSubscriptionNotificationWindowDays",
               "xuacs_userDateWindowForThrottling",
               "xuacs_userGamertagIntervalDays",
               "xuacs_userGamertagThreshold",
               "xuacs_userNumberOfAccountsPerMachineId",
               "xuacs_userPassportIntervalDays",
               "xuacs_userPassportThreshold",
               "xuacs_userRecoveryIntervalDays",
               "xuacs_userRecoveryThreshold",
               "xuacs_WelcomeToXboxLiveMessageForGeneratedAccount",
               "xuser_doubleWriteHistory",
               "zune_dvi_FECatalogDBZuneApps_active",
               "zunedb_catalogwatcher_extractor_batch_size",
               "zunedb_catalogwatcher_extractor_timeout_in_secs",
               "zunedb_catalogwatcher_fast_esp_collection_name",
               "zunedb_catalogwatcher_fast_esp_ingestion_port",
               "zunedb_catalogwatcher_fast_esp_max_documents_per_batch",
               "zunedb_catalogwatcher_fast_wait_for_indexing",
               "zunedb_catalogwatcher_perform_and_log_validation_on_error",
               "zunedb_catalogwatcher_producer_consumer_zuneapp_max_queue_size",
        };

        // All the remaining, non-dynamic (static), settings.

        public static string[] StaticSettings = new string[]
        {
  
               "aamodule_audienceUriMode",
               "aamodule_certificateRevocationMode",
               "aamodule_certificateValidationMode",
               "aamodule_suppress_xmgmt_connection",
               "abch_abserviceUrl",
               "abch_allowQueryAtLoginAsQueryAtSignup",
               "abch_applicationId",
               "abch_getMessengerBuddiesTimeoutSeconds",
               "abch_getSoapConnectionPoolSize",
               "abch_sharingServiceUrl",
               "acceleration_allocation_page_size",
               "acceleration_allocation_sizes",
               "acceleration_max_key_length",
               "acceleration_notificationChangelistSize",
               "acceleration_numHashtableBuckets",
               "billing_proxy",
               "cleanser_fdbQueueMaxFreeEntriesCount",
               "cleanser_fdbUpdateIntervalSec",
               "cleanser_log_target",
               "cleanser_maxQueueLength",
               "cleanser_maxTcpConnections",
               "cleanser_workerThreadsPerProcessor",
               "config_cacheRefreshInterval",
               "config_loadTitleConnectionTimeoutSeconds",
               "config_minEventInterval",
               "crypto_serviceKeyType",
               "crypto_serviceKeyVersion",
               "download_contentDirectory",
               "eventsink_excludeApps",
               "feapp_completionPortThreads",
               "feapp_workerThreads",
               "global_buildVersion",
               "global_enableTestApis",
               "kdcsvc_askdc_checkForDos",
               "kdcsvc_askdc_DoS_numEntries",
               "kdcsvc_askdc_DoS2_cacheSize",
               "kdcsvc_xkdc_cacheTableSize",
               "kdcsvc_xkdc_DoS_checkForDos",
               "kdcsvc_xkdc_DoS_numEntries",
               "kdcsvc_xkdc_DoS2_cacheSize",
               "kdcsvc_xkdc_hashTableSize",
               "kdcsvc_xmacs_disableDOS",
               "kdcsvc_xmacs_DoS2_cacheSize",
               "kdcsvc_xmacs_nCipherInitTimeoutInSecs",
               "kdcsvc_xmacs_useNCipher",
               "kdcsvc_xmacs_UseTestMasterSigningKey",
               "kdcsvc_xmacs_UseTestXmacsKey",
               "lbsvr_BufferManagerPageSize",
               "lbsvr_DatabaseWriteThreads",
               "lbsvr_DbLoadingThreadCount",
               "lbsvr_DbLoadIntervalSeconds",
               "lbsvr_DbLoadRetryCount",
               "lbsvr_FullNamePagingFile",
               "lbsvr_IOThreadCount",
               "lbsvr_JobResetHour",
               "lbsvr_MaxCSndBuffer",
               "lbsvr_NetHelloTimeout",
               "lbsvr_NetMaxConnections",
               "lbsvr_PagingFileInitialSize",
               "lbsvr_PersisterRetryInterval",
               "lbsvr_ReservedPhysicalMemory",
               "lbsvr_SizeRcvBuffer",
               "lbsvr_SizeSndBuffer",
               "lbsvr_VirtualAllocSize",
               "leet_webcommunity_db_Enabled",
               "livecache_defaultConnectionLimit",
               "livepxy_forwardHeaders",
               "livepxy_MasterKeyVersion",
               "livepxy_maxGamerTagLookupsPerRequest",
               "livepxy_maxPUIDLookupsPerRequest",
               "livepxy_SiteKeyType",
               "livetitle_allowBaseVersionZero",
               "locale_AE",
               "locale_AT",
               "locale_AU",
               "locale_BE",
               "locale_BR",
               "locale_CA",
               "locale_CH",
               "locale_CL",
               "locale_CO",
               "locale_CZ",
               "locale_DE",
               "locale_DK",
               "locale_ES",
               "locale_FI",
               "locale_FR",
               "locale_GB",
               "locale_GR",
               "locale_HK",
               "locale_HU",
               "locale_IE",
               "locale_IT",
               "locale_JP",
               "locale_KR",
               "locale_language1",
               "locale_language10",
               "locale_language11",
               "locale_language12",
               "locale_language13",
               "locale_language14",
               "locale_language15",
               "locale_language16",
               "locale_language17",
               "locale_language18",
               "locale_language19",
               "locale_language2",
               "locale_language20",
               "locale_language3",
               "locale_language4",
               "locale_language5",
               "locale_language6",
               "locale_language7",
               "locale_language8",
               "locale_language9",
               "locale_MX",
               "locale_NL",
               "locale_NO",
               "locale_NZ",
               "locale_PL",
               "locale_PT",
               "locale_RU",
               "locale_SE",
               "locale_SG",
               "locale_TW",
               "locale_US",
               "locale_validLocales",
               "locale_ZA",
               "offer_cacheTimeSeconds",
               "partnermgr_webCaches",
               "passport_clientCertName",
               "passport_fakeService",
               "passport_partnerUrl",
               "passport_publicKeyCertUrl",
               "passport_siteAddress",
               "passport_siteAddressMsn",
               "passport_siteId",
               "passport_sitePolicy",
               "passport_sitePolicyMsn",
               "presence_PeerPort",
               "presence_SGQValRecvPort",
               "presence_SGQValSendPort",
               "presenceFD_NumPoolThreads",
               "presenceWidget_friendsCacheExpirationSeconds",
               "puidmgr_blockSize",
               "puidmgr_bucketCount",
               "puidmgr_userPuidBucket",
               "querylib_trustUpdates",
               "ratings_contenttype_mapping",
               "ratings_max_allowable_reviewcount",
               "reporting_DeleteRoot",
               "reporting_DistributionDataFileGrowth",
               "reporting_DistributionDataFileSize",
               "reporting_DistributionDBName",
               "reporting_DistributionLogFileGrowth",
               "reporting_DistributionLogFileSize",
               "reporting_DistributionMaxHistoryRetention",
               "reporting_DistributionMaxRetention",
               "reporting_ReplicationShare",
               "reporting_RSUtilPath",
               "reporting_SSISUseReplica",
               "reporting_WMISCertSubject",
               "reporting_WMISDBDrop",
               "reporting_WMISDBUrl",
               "setup_approot",
               "setup_logroot",
               "setup_secureUNC",
               "setup_sqldbroot",
               "setup_sqlftroot",
               "setup_sqllogroot",
               "sg_BlockLimit",
               "sg_ClientHistoryLimit",
               "sg_ClientLimit",
               "sg_ClientPortLimit",
               "sg_ConnectionServerPortLimit",
               "sg_DhInfoCacheSize",
               "sg_DhLimitHysteresisInMs",
               "sg_DhLimitOpsPerSec",
               "sg_EnableConnectionServices",
               "sg_PacketPool",
               "sg_PacketPoolMax",
               "sg_ProcessorQuantum",
               "sg_ShareDatacenterNicWithWindows",
               "sg_ShareInternetNicWithWindows",
               "SocialCache_BytesPerPooledBuffer",
               "SocialCache_DataThreadpoolSize",
               "SocialCache_MaxClientSockets",
               "SocialCache_MemCacheDllName",
               "SocialCache_RelationshipsLookupTableBuckets",
               "SocialCache_TCPKeepAliveTimeout",
               "SocialCache_UserLookupTableBuckets",
               "storageWidget_fakeFrontDoorFailures",
               "storageWidget_fakeXCache",
               "storageWidget_fakeXSig",
               "svct_heartbeatTimeout",
               "TagRecycleCronJobs",
               "titlevault_root",
               "toolsmgmt_filePrefix",
               "toolsmgmt_fileshare",
               "toolsmgmt_pollingInterval",
               "toolsmgmt_SDClient",
               "toolsmgmt_SDPort",
               "udpadpt_numOfThreads",
               "ups_clientCertName",
               "ups_getProfileTimeoutSeconds",
               "ups_partnerId",
               "ups_updateProfileTimeoutSeconds",
               "ups_url",
               "user_nameReservationMinutes",
               "wcgeneral_titleListValidSeconds",
               "wcsignature_createSignatureURL",
               "wcsignature_maximumAdminIdLength",
               "wcsignature_maximumVerifySignaturesPerRequest",
               "wcsignature_signatureSite",
               "wcsignature_verifySignatureURL",
               "wcusers_alertsSite",
               "wcusers_cacheExpirationSeconds",
               "wcusers_uacsGetUserSettingsURL",
               "wcusers_uacsLinkUserURL",
               "wcusers_uacsSite",
               "webSG_certIssuerCN1",
               "webSG_certIssuerCN2",
               "webSG_certIssuerCN3",
               "webSG_certIssuerCN4",
               "webSG_maxInReqSize",
               "wiredata_postLimit",
               "wiredata_stringLimit",
               "wiretap_AuthDataReplyPort",
               "wiretap_AuthDataWaitTimeInSecs",
               "wiretap_DumpDirectory",
               "wiretap_MaxNumOfRetrys",
               "wiretap_MaxNumOfTaps",
               "wiretap_MaxSGAuthDataRetry",
               "wiretap_NumOfCarrierNodes",
               "wiretap_NumOfReceiverNodes",
               "wiretap_PacketBufferSize",
               "wiretap_SGSessionTimeoutInSecs",
               "wiretap_UnwantedIPs",
               "xarb_NumberFlushBundleThreads",
               "xarb_NumberFlushTrustRatingThreads",
               "xcache_connectionTimeoutSeconds",
               "xcache_gamertag_hash_buckets",
               "XCache_MaxClientSockets",
               "xcache_maxPipeConnections",
               "xcache_memory_page_size",
               "xcache_passport_hash_buckets",
               "xcache_test_num_users",
               "xcache_test_random_seed",
               "xcache_userid_hash_buckets",
               "xcbk_billingNotificationTimeout",
               "xcbk_scs_heartbeatTimeout",
               "XConnSrv_BytesPerPooledBuffer",
               "XConnSrv_DataThreadpoolSize",
               "XConnSrv_MaxClientSockets",
               "XConnSrv_MemCacheDllName",
               "XConnSrv_NumLookupTableBuckets",
               "XConnSrv_TCPKeepAliveTimeout",
               "xcrypto_useNCipher",
               "xcrypto_useTestKey",
               "xds_cacheHashTableSize",
               "xds_cacheSize",
               "xds_eventCacheThrottleLifeTimeInSeconds",
               "xds_numberOfProcessingThreads",
               "xds_packetBufferSize",
               "xds_port",
               "xevents_buffers",
               "xevents_threads",
               "xlfsmon_AdminFdURL",
               "xlfsmon_ClientCertificateName",
               "xlfsmon_ClientCertificateThumbprint",
               "xlfsmon_ClientFdURL",
               "xlfsmon_DownloaderPath",
               "xlfsmon_EnvironmentName",
               "xlfsmon_ProxyURL",
               "xlfsmon_SaveDirectory",
               "xlfsmon_SubscriptionId",
               "xlfsmon_UseRealSTS",
               "xmatchfd_fastFailNumBuckets",
               "xmatchfd_fastFailTimeTolerance",
               "xmgmt_area_aainfo",
               "xmgmt_area_aamodule",
               "xmgmt_area_AccelerationClient",
               "xmgmt_area_AccelerationDebug",
               "xmgmt_area_AccelerationProxy",
               "xmgmt_area_ASkdc",
               "xmgmt_area_atTrace",
               "xmgmt_area_audit",
               "xmgmt_area_authsglog",
               "xmgmt_area_authsgtrace",
               "xmgmt_area_bcfgtrace",
               "xmgmt_area_blackbox",
               "xmgmt_area_blstTrace",
               "xmgmt_area_catalog",
               "xmgmt_area_catalogwatcherlog",
               "xmgmt_area_cfgtrace",
               "xmgmt_area_checkready",
               "xmgmt_area_cleanclips",
               "xmgmt_area_cleansermissingdata",
               "xmgmt_area_cleansertrace",
               "xmgmt_area_computil",
               "xmgmt_area_contentutiltrace",
               "xmgmt_area_crontest",
               "xmgmt_area_crontrace",
               "xmgmt_area_cryptomgr",
               "xmgmt_area_cryptotools",
               "xmgmt_area_ctpTransactionServiceLog",
               "xmgmt_area_ctpTransactionServiceTrace",
               "xmgmt_area_ctxDebug",
               "xmgmt_area_deactivator",
               "xmgmt_area_Debug",
               "xmgmt_area_DefaultNtLog",
               "xmgmt_area_DefaultTrace",
               "xmgmt_area_dmplog",
               "xmgmt_area_dmptrace",
               "xmgmt_area_domTrace",
               "xmgmt_area_DOS",
               "xmgmt_area_ElimEntrants",
               "xmgmt_area_ElimEvents",
               "xmgmt_area_Elimination",
               "xmgmt_area_elimtest",
               "xmgmt_area_enfTrace",
               "xmgmt_area_enmrdfTrace",
               "xmgmt_area_espengine",
               "xmgmt_area_EventService",
               "xmgmt_area_feedbacklog",
               "xmgmt_area_FeedbackProxy",
               "xmgmt_area_feedbackTrace",
               "xmgmt_area_finbusLog",
               "xmgmt_area_finbusTrace",
               "xmgmt_area_FlokenMap",
               "xmgmt_area_fseLog",
               "xmgmt_area_fseTrace",
               "xmgmt_area_geoFenceLog",
               "xmgmt_area_geoFenceTrace",
               "xmgmt_area_GetPostalCode",
               "xmgmt_area_glcTrace",
               "xmgmt_area_graduateUserTrace",
               "xmgmt_area_gtqTrace",
               "xmgmt_area_Integration",
               "xmgmt_area_KdcBase",
               "xmgmt_area_KdcCore",
               "xmgmt_area_kdcmanaged",
               "xmgmt_area_LbsTrace",
               "xmgmt_area_lbsvrclient",
               "xmgmt_area_listsTrace",
               "xmgmt_area_livecachelog",
               "xmgmt_area_livecachetrace",
               "xmgmt_area_livepxy",
               "xmgmt_area_livepxylog",
               "xmgmt_area_log",
               "xmgmt_area_LogCleanser",
               "xmgmt_area_LogCode",
               "xmgmt_area_LogCodeWindows",
               "xmgmt_area_LogCollectorModuleLog",
               "xmgmt_area_logCollectorModuleTrace",
               "xmgmt_area_LogDvd",
               "xmgmt_area_LogTitle",
               "xmgmt_area_LogWindows",
               "xmgmt_area_lua",
               "xmgmt_area_marketplacecatalog",
               "xmgmt_area_matchdblog",
               "xmgmt_area_matchdbtrace",
               "xmgmt_area_matchprestrace",
               "xmgmt_area_MatchProxy",
               "xmgmt_area_matchtrace",
               "xmgmt_area_MessageProxy",
               "xmgmt_area_messagingfd",
               "xmgmt_area_messagingfdLog",
               "xmgmt_area_MessagingLog",
               "xmgmt_area_metro",
               "xmgmt_area_mllog",
               "xmgmt_area_mltrace",
               "xmgmt_area_msgmanager",
               "xmgmt_area_msnrraggregationlog",
               "xmgmt_area_msnrraggregationtrace",
               "xmgmt_area_msnrrLog",
               "xmgmt_area_msnrrTrace",
               "xmgmt_area_musicnetLog",
               "xmgmt_area_musicnetTrace",
               "xmgmt_area_nametrace",
               "xmgmt_area_NicMgr",
               "xmgmt_area_NotificationDebug",
               "xmgmt_area_NotificationLog",
               "xmgmt_area_nrTrace",
               "xmgmt_area_offer",
               "xmgmt_area_oledbw",
               "xmgmt_area_passportLog",
               "xmgmt_area_passportTrace",
               "xmgmt_area_pathTrace",
               "xmgmt_area_PingLog",
               "xmgmt_area_PipeDbg",
               "xmgmt_area_plugintest",
               "xmgmt_area_Policy",
               "xmgmt_area_PPALoader",
               "xmgmt_area_PresenceDebug",
               "xmgmt_area_PresenceFDDebug",
               "xmgmt_area_PresenceFDLog",
               "xmgmt_area_PresenceLog",
               "xmgmt_area_PresenceProxy",
               "xmgmt_area_PresenceRPDebug",
               "xmgmt_area_profilelog",
               "xmgmt_area_progresslog",
               "xmgmt_area_prov",
               "xmgmt_area_provdr",
               "xmgmt_area_provisioning",
               "xmgmt_area_pss",
               "xmgmt_area_puidmgr",
               "xmgmt_area_QFlag",
               "xmgmt_area_QueryTest",
               "xmgmt_area_ratingstrace",
               "xmgmt_area_rdfTrace",
               "xmgmt_area_readsitekeys",
               "xmgmt_area_replacePassportTrace",
               "xmgmt_area_ReportConnection",
               "xmgmt_area_Reporting",
               "xmgmt_area_Reporting_v2",
               "xmgmt_area_rfhTrace",
               "xmgmt_area_rmfTrace",
               "xmgmt_area_selog",
               "xmgmt_area_serialnumber",
               "xmgmt_area_ServHlpDebug",
               "xmgmt_area_SgClientStats",
               "xmgmt_area_sginfotrace",
               "xmgmt_area_SGProxy",
               "xmgmt_area_soaptrace",
               "xmgmt_area_SocialCacheAPI",
               "xmgmt_area_SocialCacheConnection",
               "xmgmt_area_SocialCacheLog",
               "xmgmt_area_spslog",
               "xmgmt_area_spsproxy",
               "xmgmt_area_spsproxyLog",
               "xmgmt_area_spsqueuetrace",
               "xmgmt_area_spstrace",
               "xmgmt_area_sqltrace",
               "xmgmt_area_statslog",
               "xmgmt_area_stfdTrace",
               "xmgmt_area_stlog",
               "xmgmt_area_storageHealthTrace",
               "xmgmt_area_StorageModuleLog",
               "xmgmt_area_storageModuleTrace",
               "xmgmt_area_storageUtilsTrace",
               "xmgmt_area_stringLog",
               "xmgmt_area_StringProxy",
               "xmgmt_area_stringSvrHealthTrace",
               "xmgmt_area_stringTrace",
               "xmgmt_area_sts",
               "xmgmt_area_ststrace",
               "xmgmt_area_subcodemgr",
               "xmgmt_area_switchPassportTrace",
               "xmgmt_area_synccastLog",
               "xmgmt_area_synccastTrace",
               "xmgmt_area_TagRecycleCronJobs",
               "xmgmt_area_TALKER",
               "xmgmt_area_TCPCnt",
               "xmgmt_area_TCPConnection",
               "xmgmt_area_TeamProxy",
               "xmgmt_area_TeamsLog",
               "xmgmt_area_Test",
               "xmgmt_area_testfd",
               "xmgmt_area_TestUtilities",
               "xmgmt_area_title",
               "xmgmt_area_tmrlog",
               "xmgmt_area_tokenTrace",
               "xmgmt_area_toolspslog",
               "xmgmt_area_ToolsSrv",
               "xmgmt_area_ToolsSrvLog",
               "xmgmt_area_trace",
               "xmgmt_area_UDPADAPT",
               "xmgmt_area_UDPADPTLog",
               "xmgmt_area_UDPMGR",
               "xmgmt_area_UNITTEST",
               "xmgmt_area_user2",
               "xmgmt_area_userbillinginfo",
               "xmgmt_area_Vlan",
               "xmgmt_area_VortexFlow",
               "xmgmt_area_VortexOutput",
               "xmgmt_area_VortexOutputUnknown",
               "xmgmt_area_VortexTrace",
               "xmgmt_area_voucher",
               "xmgmt_area_wcAlertsLog",
               "xmgmt_area_wcgenerallog",
               "xmgmt_area_wcgeneraltrace",
               "xmgmt_area_wcMessagingLog",
               "xmgmt_area_wcMessagingTrace",
               "xmgmt_area_wcmusiclog",
               "xmgmt_area_wcpresencelog",
               "xmgmt_area_wcQueryLog",
               "xmgmt_area_wcsignaturelog",
               "xmgmt_area_wcstatscache",
               "xmgmt_area_wcstatsdomain",
               "xmgmt_area_wcstatslog",
               "xmgmt_area_wcstatstrace",
               "xmgmt_area_wcstoragelog",
               "xmgmt_area_wcteamslog",
               "xmgmt_area_wctoolsmgmtlog",
               "xmgmt_area_wctoolsmgmttrace",
               "xmgmt_area_wcuserslog",
               "xmgmt_area_wcutilitieslog",
               "xmgmt_area_wcutilitiestrace",
               "xmgmt_area_websg",
               "xmgmt_area_WINHTTP",
               "xmgmt_area_WireDataBin",
               "xmgmt_area_WireDataTxt",
               "xmgmt_area_wmisLog",
               "xmgmt_area_wmisTrace",
               "xmgmt_area_wrfTrace",
               "xmgmt_area_wsttrace",
               "xmgmt_area_xarblog",
               "xmgmt_area_XBancClient",
               "xmgmt_area_XBancDebug",
               "xmgmt_area_XBancProxy",
               "xmgmt_area_xbos",
               "xmgmt_area_xboxcom",
               "xmgmt_area_XCacheClient",
               "xmgmt_area_XCacheData",
               "xmgmt_area_XCacheDatabase",
               "xmgmt_area_XCacheLog",
               "xmgmt_area_XCacheLookup",
               "xmgmt_area_XCacheProxy",
               "xmgmt_area_XCacheService",
               "xmgmt_area_xcbk",
               "xmgmt_area_XConnSrvAPI",
               "xmgmt_area_XConnSrvCache",
               "xmgmt_area_XConnSrvConnection",
               "xmgmt_area_XConnSrvLog",
               "xmgmt_area_XConnSrvSubscription",
               "xmgmt_area_XDb",
               "xmgmt_area_Xds",
               "xmgmt_area_Xkdc",
               "xmgmt_area_XkdcTicketLog",
               "xmgmt_area_xlastutil",
               "xmgmt_area_xlisttrace",
               "xmgmt_area_xmachine",
               "xmgmt_area_XMACS",
               "xmgmt_area_XMGMT",
               "xmgmt_area_XomInstrumentation",
               "xmgmt_area_xqry",
               "xmgmt_area_xrltrace",
               "xmgmt_area_xsecsup",
               "xmgmt_area_xsig",
               "xmgmt_area_xsiglog",
               "xmgmt_area_xsuppapi",
               "xmgmt_area_xsuppapiEmailSentLog",
               "xmgmt_area_xsuppapiLog",
               "xmgmt_area_xuacs",
               "xmgmt_area_XWireTap",
               "xmgmt_area_XWireTapHash",
               "xmgmt_area_XWireTapNicMgr",
               "xmgmt_area_XWireTapProdCons",
               "xmgmt_default_target_settings",
               "xmgmt_target_",
               "xmgmt_target_catalogwatcherlog",
               "xmgmt_target_cleansermissingdata",
               "xmgmt_target_ctpTransactionServiceLog",
               "xmgmt_target_dmplog",
               "xmgmt_target_espengine",
               "xmgmt_target_geofencelog",
               "xmgmt_target_log",
               "xmgmt_target_logcleanser",
               "xmgmt_target_logcode",
               "xmgmt_target_logcodewindows",
               "xmgmt_target_logdvd",
               "xmgmt_target_logwindows",
               "xmgmt_target_lua",
               "xmgmt_target_msglog",
               "xmgmt_target_msnrraggregationlog",
               "xmgmt_target_musicnetlog",
               "xmgmt_target_notlog",
               "xmgmt_target_passportlog",
               "xmgmt_target_preslog",
               "xmgmt_target_remote",
               "xmgmt_target_report",
               "xmgmt_target_sgclientstats",
               "xmgmt_target_spslog",
               "xmgmt_target_synccastlog",
               "xmgmt_target_teamslog",
               "xmgmt_target_ticketlog",
               "xmgmt_target_wmislog",
               "xmgmt_target_xdslog",
               "xmgmt_target_XomInstrumentationLog",
               "xmgmt_target_xsuppapiemaillog",
               "xmgmt_target_xsuppapilog",
               "xmgmt_targets",
               "xrlutil_allowAlternateUrl",
               "xuacs_allowClearSubscriptions",
               "xuacs_allowDisableSubscription",
               "xuacs_allowGetNoAgeOut",
               "xuacs_allowSetUserAccountStatus",
               "xuacs_allowSetUserSettings2",
               "xuacs_allowUncheckedRecovery",
               "xuacs_autoGenCC",
               "xuacs_billingdecline_notificationcount",
               "xuacs_domain",
               "xuacs_link_failureWindowMinutes",
               "xuacs_link_maxFailedAttempts",
               "xuacs_max_family_dependents",
               "xuacs_restore_failureWindowMinutes",
               "xuacs_restore_maxFailedAttempts",
               "xuacs_switchUserCountryAllowMultipleSubscriptions",
               "xuacs_xonwatch_creditCard",
               "xuacs_xonwatch_ips",
               "xuacs_xonwatch_voucher",
        };



    }
    
    // MultiSettings
    [ComVisible(false)]
    public class MultiSetting 
    {
  
        public const string aamodule_antidosIpOverrides = "aamodule_antidosIpOverrides";
        public const string aamodule_audienceUris = "aamodule_audienceUris";
        public const string aamodule_rpsDelegationAppIdAllowList = "aamodule_rpsDelegationAppIdAllowList";
        public const string aamodule_rpsDelegationOfferActions = "aamodule_rpsDelegationOfferActions";
        public const string aamodule_rpsDelegationSiteNames = "aamodule_rpsDelegationSiteNames";
        public const string aamodule_rpsSiteNames = "aamodule_rpsSiteNames";
        public const string aamodule_serviceCertsSubject = "aamodule_serviceCertsSubject";
        public const string aamodule_trustedIssuersSubject = "aamodule_trustedIssuersSubject";
        public const string aamodule_XblEnhancedKeyUsages = "aamodule_XblEnhancedKeyUsages";
        public const string authsg_hostNameMappings = "authsg_hostNameMappings";
        public const string billing_geoid_region = "billing_geoid_region";
        public const string billing_nonUserBillingErrors = "billing_nonUserBillingErrors";
        public const string billingNotifications_ClientCertificate = "billingNotifications_ClientCertificate";
        public const string billingNotifications_CreditCardDeclineReason = "billingNotifications_CreditCardDeclineReason";
        public const string catalog_storeCatalogDefault = "catalog_storeCatalogDefault";
        public const string catalog_storeMediaTypeCatalogOverride = "catalog_storeMediaTypeCatalogOverride";
        public const string community_cacheDataTypes = "community_cacheDataTypes";
        public const string etx_manifest_producers = "etx_manifest_producers";
        public const string fastEspFlatFieldsDateTime = "fastEspFlatFieldsDateTime";
        public const string fastEspFlatFieldsInt32 = "fastEspFlatFieldsInt32";
        public const string fastEspFlatFieldsSingle = "fastEspFlatFieldsSingle";
        public const string fastEspFlatFieldsString = "fastEspFlatFieldsString";
        public const string fastEspFlatFieldsXml = "fastEspFlatFieldsXml";
        public const string fastEspMarketplaceIngestionIps = "fastEspMarketplaceIngestionIps";
        public const string fastEspNavigatorParameters = "fastEspNavigatorParameters";
        public const string fastEspOrderByParameters = "fastEspOrderByParameters";
        public const string fastEspRemappingParameters = "fastEspRemappingParameters";
        public const string fastEspReplaceDashForParameter = "fastEspReplaceDashForParameter";
        public const string fastEspSpellCheckLanguage = "fastEspSpellCheckLanguage";
        public const string fastEspZuneAppIngestionIps = "fastEspZuneAppIngestionIps";
        public const string fastRatingExemptGCForTitles = "fastRatingExemptGCForTitles";
        public const string fastRatingExemptMediaTypes = "fastRatingExemptMediaTypes";
        public const string fastRatingNonExemptMediaIds = "fastRatingNonExemptMediaIds";
        public const string fastRatingNonExemptRatingSystem = "fastRatingNonExemptRatingSystem";
        public const string feapp_compressionPaths = "feapp_compressionPaths";
        public const string geofencing_territoryMapping = "geofencing_territoryMapping";
        public const string kdcsvc_managed_rpsPCSites = "kdcsvc_managed_rpsPCSites";
        public const string kdcsvc_managed_rpsXenonSites = "kdcsvc_managed_rpsXenonSites";
        public const string kdcsvc_xkdc_legacyPcTitles = "kdcsvc_xkdc_legacyPcTitles";
        public const string kdcsvc_xkdc_sgSite1Ips = "kdcsvc_xkdc_sgSite1Ips";
        public const string liveinfo_allowed_shared_config_names = "liveinfo_allowed_shared_config_names";
        public const string mix_offerMgmt_nonOfferType = "mix_offerMgmt_nonOfferType";
        public const string passport_secretQuestionsXml = "passport_secretQuestionsXml";
        public const string pdlc_mediatypes = "pdlc_mediatypes";
        public const string presenceFD_StringPresence_BlackList = "presenceFD_StringPresence_BlackList";
        public const string ratings_mediatypes = "ratings_mediatypes";
        public const string reporting_nonSplitComponentIds = "reporting_nonSplitComponentIds";
        public const string reporting_ReportServerAllowedIPs = "reporting_ReportServerAllowedIPs";
        public const string scs_creditCardAuthApis = "scs_creditCardAuthApis";
        public const string sg_NullMachineId = "sg_NullMachineId";
        public const string storageModule_DefaultAvatarPicBody = "storageModule_DefaultAvatarPicBody";
        public const string storageModule_DefaultAvatarPicLarge = "storageModule_DefaultAvatarPicLarge";
        public const string storageModule_DefaultAvatarPicSmall = "storageModule_DefaultAvatarPicSmall";
        public const string storageModule_urlFilePathExclusionSet = "storageModule_urlFilePathExclusionSet";
        public const string storageModule_validResponseCodesForCacheUpdate = "storageModule_validResponseCodesForCacheUpdate";
        public const string stringsvr_LogStringPrefix = "stringsvr_LogStringPrefix";
        public const string sts_audienceDenyList = "sts_audienceDenyList";
        public const string testfd_API_PermissionLevel = "testfd_API_PermissionLevel";
        public const string user_forbiddenNamesExcludedTitles = "user_forbiddenNamesExcludedTitles";
        public const string vortex_cake_log_config_xml = "vortex_cake_log_config_xml";
        public const string vortex_cake_query_config_xml = "vortex_cake_query_config_xml";
        public const string vortex_categoriesAllowedThroughIFLC = "vortex_categoriesAllowedThroughIFLC";
        public const string xbos_ContentOfferIdsForReporting = "xbos_ContentOfferIdsForReporting";
        public const string xbos_freeGamertagOffers = "xbos_freeGamertagOffers";
        public const string xbos_limitedChildContentPurchaseAllowedMediaTypes = "xbos_limitedChildContentPurchaseAllowedMediaTypes";
        public const string xbos_limitedChildPurchaseAllowedOfferTypes = "xbos_limitedChildPurchaseAllowedOfferTypes";
        public const string xbos_reducedPriceCheckStores = "xbos_reducedPriceCheckStores";
        public const string xbos_subscriptionCountryCreditMapping = "xbos_subscriptionCountryCreditMapping";
        public const string xbos_titleActivation_testTitles = "xbos_titleActivation_testTitles";
        public const string xbos_zeroTaxIncludedCountryList = "xbos_zeroTaxIncludedCountryList";
        public const string xmgmt_eventThrottles = "xmgmt_eventThrottles";
        public const string xuacs_nameToClientTypeMapping = "xuacs_nameToClientTypeMapping";
        public const string xuacs_platformToClientTypeMapping = "xuacs_platformToClientTypeMapping";
  
        public static string[] Settings = new string[]
        {
  
               "aamodule_antidosIpOverrides",
               "aamodule_audienceUris",
               "aamodule_rpsDelegationAppIdAllowList",
               "aamodule_rpsDelegationOfferActions",
               "aamodule_rpsDelegationSiteNames",
               "aamodule_rpsSiteNames",
               "aamodule_serviceCertsSubject",
               "aamodule_trustedIssuersSubject",
               "aamodule_XblEnhancedKeyUsages",
               "authsg_hostNameMappings",
               "billing_geoid_region",
               "billing_nonUserBillingErrors",
               "billingNotifications_ClientCertificate",
               "billingNotifications_CreditCardDeclineReason",
               "catalog_storeCatalogDefault",
               "catalog_storeMediaTypeCatalogOverride",
               "community_cacheDataTypes",
               "etx_manifest_producers",
               "fastEspFlatFieldsDateTime",
               "fastEspFlatFieldsInt32",
               "fastEspFlatFieldsSingle",
               "fastEspFlatFieldsString",
               "fastEspFlatFieldsXml",
               "fastEspMarketplaceIngestionIps",
               "fastEspNavigatorParameters",
               "fastEspOrderByParameters",
               "fastEspRemappingParameters",
               "fastEspReplaceDashForParameter",
               "fastEspSpellCheckLanguage",
               "fastEspZuneAppIngestionIps",
               "fastRatingExemptGCForTitles",
               "fastRatingExemptMediaTypes",
               "fastRatingNonExemptMediaIds",
               "fastRatingNonExemptRatingSystem",
               "feapp_compressionPaths",
               "geofencing_territoryMapping",
               "kdcsvc_managed_rpsPCSites",
               "kdcsvc_managed_rpsXenonSites",
               "kdcsvc_xkdc_legacyPcTitles",
               "kdcsvc_xkdc_sgSite1Ips",
               "liveinfo_allowed_shared_config_names",
               "mix_offerMgmt_nonOfferType",
               "passport_secretQuestionsXml",
               "pdlc_mediatypes",
               "presenceFD_StringPresence_BlackList",
               "ratings_mediatypes",
               "reporting_nonSplitComponentIds",
               "reporting_ReportServerAllowedIPs",
               "scs_creditCardAuthApis",
               "sg_NullMachineId",
               "storageModule_DefaultAvatarPicBody",
               "storageModule_DefaultAvatarPicLarge",
               "storageModule_DefaultAvatarPicSmall",
               "storageModule_urlFilePathExclusionSet",
               "storageModule_validResponseCodesForCacheUpdate",
               "stringsvr_LogStringPrefix",
               "sts_audienceDenyList",
               "testfd_API_PermissionLevel",
               "user_forbiddenNamesExcludedTitles",
               "vortex_cake_log_config_xml",
               "vortex_cake_query_config_xml",
               "vortex_categoriesAllowedThroughIFLC",
               "xbos_ContentOfferIdsForReporting",
               "xbos_freeGamertagOffers",
               "xbos_limitedChildContentPurchaseAllowedMediaTypes",
               "xbos_limitedChildPurchaseAllowedOfferTypes",
               "xbos_reducedPriceCheckStores",
               "xbos_subscriptionCountryCreditMapping",
               "xbos_titleActivation_testTitles",
               "xbos_zeroTaxIncludedCountryList",
               "xmgmt_eventThrottles",
               "xuacs_nameToClientTypeMapping",
               "xuacs_platformToClientTypeMapping",
        };
    }
    
    // ConfigBlobs
    [ComVisible(false)]
    public class ConfigBlob
    {
  
        public const string etx_schema_document = "etx_schema_document";
  
        public static string[] Settings = new string[]
        {
  
               "etx_schema_document",
        };
    }
    

  
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\config\IUserRole.cs ===
using System;
using System.Runtime.InteropServices;

namespace xonline.common.config
{

[Guid("261263AA-2F3D-4740-9548-0D78EFA11AA1")]
[InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
public interface IUserRole
{
	string Name
    {
        get;
    }

	string FullUsername
	{
		get;
	}

	string Domainname
	{
		get;
	}

    string Username
    {
        get;
    }

    string Password
    {
        get;
    }
}

} // end namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\config\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

$(INETROOT)\private\common\core\inc\commonconfig.h: TransformXml.js configItems.xml CommonConfigCppHeader.xsl
    @
    cscript /e:jscript /nologo TransformXml.js configItems.xml CommonConfigCppHeader.xsl $@ & \
    if errorlevel 1 echo NMAKE : TransformXml.js: error transforming $@

ConfigItemClasses.cs: TransformXml.js configItems.xml ConfigItemClasses.xsl
    @
    cscript /e:jscript /nologo TransformXml.js configItems.xml ConfigItemClasses.xsl $@ & \
    if errorlevel 1 echo NMAKE : TransformXml.js: error transforming $@

clean:
    del /F /Q $(NTTARGETFILE0)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\config\IVirtualInterfaceInfo.cs ===
using System;
using System.Net;
using System.Runtime.InteropServices;

namespace xonline.common.config
{
    [ComVisible(true)]
[Guid("9625F602-A1C4-4F5C-ABF9-0CD504203A3A")]
[InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
public interface IVirtualInterfaceInfo
{
    string VirtualInterface
    {
        get;
    }

    string Interface
    {
        get;
    }

    string Protocol
    {
        get;
    }

    IPAddress IPAddress
    {
        get;
    }

    string IPAddressString
    {
        get;
    }

    uint IPAddressDword
    {
        get;
    }

    int Port
    {
        get;
    }

    int PortEnd
    {
        get;
    }

    string VDir
    {
        get;
    }

    string WebstoreApp
    {
        get;
    }

    int Timeout
    {
        get;
    }

    int ServiceId
    {
        get;
    }

    string ServiceName
    {
        get;
    }

    bool NeedSGInfo
    {
        get;
    }

    int InternetPort
    {
        get;
    }

    int InternetPortEnd
    {
        get;
    }

    string Info1
    {
        get;
    }

    string Info2
    {
        get;
    }

    Uri Url
    {
        get;
    }

    string SqlConnectionString
    {
        get;
    }

    string GetNotificationUrl(string notification);

    string[] NotificationUrls
    {
        get;
    }

    string HealthCheckUrl
    {
        get;
    }

    string ToString();
}

} // end namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\config\NpdbRefreshTypes.cs ===
namespace xonline.common.config
{
    public enum NpdbRefreshTypes
    {
        REFRESH_STARTS,
        REFRESH_SERVER_LIST,
        REFRESH_INTERFACES,
        REFRESH_INTERFACE_BUCKETS,
        REFRESH_VIRTUAL_INTERFACE_LISTS,
        REFRESH_VIRTUAL_INTERFACES,
        REFRESH_SETTINGS,
        REFRESH_MULTI_SETTINGS,
        REFRESH_XRL_MAPPINGS,
        REFRESH_XDELAY,
        REFRESH_GAME_CONFIG,
        REFRESH_HEALTH_MAPPINGS,
        REFRESH_LIVE_REGISTRY_SETTINGS,
        REFRESH_SERVICE_KEYS,
        REFRESH_CONFIG_BLOBS,
        REFRESH_ETX_MANIFEST,
        REFRESH_ENDS
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\config\Npdb.cs ===
using System;
using System.Data.SqlClient;
using System.Data;
using System.Collections;

namespace xonline.common.config
{
   public partial class ConfigInstance
   {
        internal class NpdbAccess
        {
            public static Hashtable GetBatchSettingsFromDB(string npdbConnectionString, string szEnvironment, int iSiteId, string szServer, string szComponent, string szXmlQuery)
            {
                //This calls NPDB p_config_batch_get_settings_ranked
                //input XML String = <a vc_setting="" /> ==> NOTE ALL SETTINGS MUST BE UNIQUE
                //output RowSet = (vc_setting, vc_value)
                //If the setting is not found in NPDB, vc_value is NULL.
                //NOTE: the old common config used to throw an exception when vc_value is NULL
                Hashtable htSettings = new Hashtable();
                
                using (SqlConnection npdbConnection = new SqlConnection(npdbConnectionString))
                {
                    npdbConnection.Open();

                    SqlCommand cmd = npdbConnection.CreateCommand();
                    cmd.CommandText = "p_config_batch_get_settings_ranked";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@vc_environment_override_info", SqlDbType.NVarChar).Value = szEnvironment;
                    cmd.Parameters.Add("@i_site_id_override_info", SqlDbType.Int).Value = iSiteId;
                    cmd.Parameters.Add("@vc_server_override_info", SqlDbType.NVarChar).Value = szServer;
                    cmd.Parameters.Add("@vc_component_override_info", SqlDbType.NVarChar).Value = szComponent;
                    cmd.Parameters.Add("@xml_setting_input", SqlDbType.Xml).Value = szXmlQuery;

                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        if (reader != null)
                        {
                            while (reader.Read())
                            {
                                string szValue = null;

                                string szSetting = (string) reader["vc_setting"];

                                if (!DBNull.Value.Equals(reader["vc_value"]))
                                {
                                    szValue = (string) reader["vc_value"];
                                }

                                if (null == szValue)
                                {
                                    //The setting does not exist or has been deleted
                                    string szMessage = String.Format("Expected Setting {0} not found in NPDB", szSetting);

                                    LogNtEvent("XblConfig", szMessage, ConfigEvent.Id.COMMON_SETTING_BATCH_SETTING_DELETED);
                                    continue; //move to next setting
                                }

                                SettingsKey settingkey = new SettingsKey(szEnvironment, iSiteId, szServer, szComponent,
                                                                         szSetting);

                                if (null == htSettings[settingkey])
                                {
                                    htSettings.Add(settingkey, szValue);
                                }
                            }
                        }
                    }
                }

                return htSettings;
            }


            public static Hashtable GetBatchBucketsFromDB(string npdbConnectionString, string szXmlQuery)
            {
                Hashtable htBuckets = new Hashtable();
                
                using (SqlConnection npdbConnection = new SqlConnection(npdbConnectionString))
                {
                    npdbConnection.Open();

                    SqlCommand cmd = npdbConnection.CreateCommand();
                    cmd.CommandText = "p_config_batch_get_interface_buckets";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@xml_bucket_input", SqlDbType.Xml).Value = szXmlQuery;

                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        if (reader != null)
                        {
                            while (reader.Read())
                            {
                                string szEnvironment = (string) reader["vc_environment"];
                                string szInterface = (string) reader["vc_interface"];
                                uint titleId = (uint) ((int) reader["i_title_id"]);
                                uint bucketId = (uint) ((int) reader["i_bucket"]);

                                if (
                                    DBNull.Value.Equals(reader["vc_server"]) &&
                                    DBNull.Value.Equals(reader["vc_next_server"]) &&
                                    DBNull.Value.Equals(reader["dt_migration_start"]) &&
                                    DBNull.Value.Equals(reader["vc_info1"]) &&
                                    DBNull.Value.Equals(reader["vc_info2"]) &&
                                    DBNull.Value.Equals(reader["vc_info3"]) &&
                                    DBNull.Value.Equals(reader["vc_info4"])
                                    )
                                {
                                    //The bucket does not exist or has been deleted
                                    string szMessage =
                                        String.Format(
                                            "Expected Bucket {0} Interface {1} Title {2} Environment {3} not found in NPDB",
                                            bucketId, szInterface, titleId, szEnvironment);

                                    LogNtEvent("XblConfig", szMessage, ConfigEvent.Id.COMMON_BUCKET_BATCH_DELETED);
                                    continue; //move to next bucket
                                }

                                InterfaceBucketKey bucketKey = new InterfaceBucketKey(szEnvironment, szInterface,
                                                                                      titleId, bucketId);
                                BucketServer bucketserver = new BucketServer(szInterface);

                                bucketserver.CurrentServerName = ((string) reader["vc_server"]).ToUpper();
                                bucketserver.NextServerName = ((string) reader["vc_next_server"]).ToUpper();
                                bucketserver.NextServerStart = (DateTime) reader["dt_migration_start"];
                                bucketserver.Info1 = (string) reader["vc_info1"];
                                bucketserver.Info2 = (string) reader["vc_info2"];
                                bucketserver.Info3 = (string) reader["vc_info3"];
                                bucketserver.Info4 = (string) reader["vc_info4"];

                                if (null == htBuckets[bucketKey])
                                {
                                    htBuckets.Add(bucketKey, bucketserver);
                                }
                            }
                        }
                    }
                }

                return htBuckets;
            }


            //returns A hash table of ArrayList, Hashtable1 =  (function, ArrayList) and ArrayList = (table)
            public static Hashtable GetAllRefreshFunctions(string npdbConnectionString)
            {
                Hashtable htFunctionTableMapping = new Hashtable();
                
                using (SqlConnection npdbConnection = new SqlConnection(npdbConnectionString))
                {
                    npdbConnection.Open();

                    SqlCommand cmd = npdbConnection.CreateCommand();
                    cmd.CommandText = "p_config_get_all_refresh_functions";
                    cmd.CommandType = CommandType.StoredProcedure;

                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        if (reader != null)
                        {
                            while (reader.Read())
                            {
                                string szfunction = "";
                                string sztable = "";
                                try
                                {
                                    szfunction = (string) reader["vc_function"];
                                    sztable = (string) reader["vc_table"];

                                    //converting the function to internal enum
                                    NpdbRefreshTypes refreshType =
                                        (NpdbRefreshTypes)
                                        Enum.Parse(typeof (NpdbRefreshTypes), szfunction);

                                    if (null == htFunctionTableMapping[refreshType])
                                    {
                                        htFunctionTableMapping.Add(refreshType, new ArrayList());
                                    }

                                    ArrayList arrTableExist = (ArrayList) htFunctionTableMapping[refreshType];
                                    arrTableExist.Add(sztable);
                                }
                                catch (Exception e)
                                {
                                    LogNtEvent(
                                        "XblConfig", String.Format(
                                        "Error Processing Refresh Functions szFunction {0}, szTable {1}\r\n {2}",
                                        szfunction, sztable, e), ConfigEvent.Id.COMMON_CONFIG_GET_REFRESH_FUNCTIONS
                                    );
                                }
                            }
                        }
                    }
                }

                return htFunctionTableMapping;
            }
        }
  }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\config\SettingChangeFilter.cs ===
using System;
using System.Collections;
using System.Collections.Generic;

namespace xonline.common.config
{

    /// <summary>
    /// Implements a SettingChangeEventHandler that vetos any changes to settings that
    /// are not supposed to be dynamically consumed.
    /// </summary>
    /// <remarks>
    /// This is really a last minute hack to make up for a design shortcoming with the Config class.
    /// The Config library was designed to not accept any changes to items in the NPDB config database
    /// unless a SettingChangeEventHandler was registered with the Config class to allow components that
    /// were not designed to handle dynamic changes. Unfortunatly this did not take into account that 
    /// components that can not handle values to dynamically change might link in untiltiy libraries that
    /// were designed to accept dynamic changes. Once one of these utility libraries regestered an EventHandler
    /// to accept their setting changes, all settings were then allowed to be updated dynamically. 
    /// To get around this issue, this global SettingChangeEventHandler was created that would veto changes for
    /// any item that had not been marked as dynamic.
    /// To mark an item as one that can be dynamically consumed, add a dynamic="true" attribute to
    /// the setting element for that element in the common/config/configItems.xml file. If your setting is not
    /// defined in the XML file, you can also register the setting as dynamic by calling the RegisterDynamicSetting 
    /// method of this class.
    /// </remarks>
    public class SettingChangeFilter
    {
        private static SortedDictionary<string, string> dynamicSettings;

        private static SortedDictionary<string, string> GetDynamicSettingsTable()
        {
            if (dynamicSettings == null)
            {
                lock (typeof(SettingChangeFilter))
                {
                    if (dynamicSettings == null)
                    {
                        SortedDictionary<string, string> newSettingTable = new SortedDictionary<string, string>();

                        foreach (string settingName in Setting.DynamicSettings)
                        {
                            newSettingTable.Add(settingName, settingName);
                        }

                        dynamicSettings = newSettingTable;
                    }
                }
            }

            return dynamicSettings;
        }

        public static void RegisterDynamicSetting(string settingName)
        {
            if (settingName == null)
            {
                throw new ArgumentNullException("settingName");
            }

            SortedDictionary<string, string> dynamicSettingsTable = GetDynamicSettingsTable();

            if (!dynamicSettingsTable.ContainsKey(settingName))
            {
                dynamicSettingsTable.Add(settingName, settingName);
            }
        }

        public static void UnRegisterDynamicSetting(string settingName)
        {
            if (settingName == null)
            {
                throw new ArgumentNullException("settingName");
            }

            SortedDictionary<string, string> dynamicSettingsTable = GetDynamicSettingsTable();

            if(dynamicSettingsTable.ContainsKey(settingName))
            {
                dynamicSettingsTable.Remove(settingName);
            }
        }

        public static void GlobalHandler(object sender, SettingChangeEventArgs e)
        {
            // anything we accept dynamically should be listed here.
            // anything we reject changes to gets the default, which calls VetoSettingChange
            // some servers still register their own handlers to do extra processing
            // when settings change, but those handlers should not call VetoSettingChange,
            // nor should they do anything with any setting that's not listed below.
        
            SortedDictionary<string, string> dynamicSettingsTable = GetDynamicSettingsTable();

            if (!dynamicSettingsTable.ContainsKey(e.Setting))
            {
                Config.VetoSettingChange();
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\config\setupdecode.cs ===
using System;
using System.Xml;
using System.IO;
using System.Runtime.InteropServices;
using System.Collections;
using System.Reflection;

using xonline.common.config;

namespace xonline.common.config
{

    public class CSetupSecureResolver
    {
        public XmlDocument Doc
        {
            get
            {
                if (_doc == null)
                {
                    _doc = new XmlDocument();
                    _doc.Load(Path);
                }
                return _doc;
            }
        }

        public string Path
        {
            get
            {
                if (_path == null)
                {
                    _path = System.IO.Path.Combine(SetupUNC, "SITE.XML");
                }

                return _path;
            }
        }

        public String SetupUNC
        {
            get
            {
                if (_setupUNC == null)
                {
                    _setupUNC = Config.GetSetting(Setting.setup_secureUNC);
                }

                return _setupUNC;
            }
        }

        public string UserSecret(string identifier)
        {
            XmlNode node = Doc.DocumentElement.SelectSingleNode("//Site/Domain/Account[@Identifier = \"" + identifier + "\"]/Password");

            if (node == null)
            {
                throw new ApplicationException("ConfigDB specified account with identifier " + identifier + " that was not found in " + Path);
            }
            else
            {
                return node.InnerText;
            }
        }


        public string SSL_Secret(string identifier)
        {
            XmlNode node = Doc.DocumentElement.SelectSingleNode("//Site/Certificates/SSLCert[@Identifier = \"" + identifier + "\"]/Password");

            if (node == null)
            {
                throw new ApplicationException("ConfigDB specified an SSL Cert with identifier " + identifier + " that was not found in " + Path);
            }
            else
            {
                return node.InnerText;
            }
        }

        [Obsolete("Please use SSL_PFXFilePath(identifier) instead", false)]
        public string SSL_File(string identifier)
        {
            XmlNode node = Doc.DocumentElement.SelectSingleNode("//Site/Certificates/SSLCert[@Identifier = \"" + identifier + "\"]");
            
            if (node == null)
            {
                throw new ApplicationException("ConfigDB specified an SSL Cert with identifier " + identifier + " that was not found in " + Path);
            }
            else
            {
                return node.Attributes.GetNamedItem("File").Value;
            }         
        }

        public string SSL_PFXFilePath(string identifier)
        {
            XmlNode node = Doc.DocumentElement.SelectSingleNode("//Site/Certificates/SSLCert[@Identifier = \"" + identifier + "\"]");
            XmlNode node2 = node != null ? node.Attributes.GetNamedItem("File") : null;
            
            if (node == null || node2 == null)
            {
                throw new ApplicationException("ConfigDB specified an SSL Cert with identifier " + identifier + " that was not found in " + Path);
            }
            else
            {
                return GetFullPath(node2.Value);
            }         
        }

        [Obsolete("Please use SSL_CTLFilePath(identifier) instead", false)]
        public string SSL_CTLFile(string identifier)
        {
            XmlNode node = Doc.DocumentElement.SelectSingleNode("//Site/Certificates/SSLCert[@Identifier = \"" + identifier + "\"]");

            if (node == null)
            {
                throw new ApplicationException("ConfigDB specified an SSL Cert (CTL) with identifier " + identifier + " that was not found in " + Path);
            }
            else
            {
                return node.Attributes.GetNamedItem("CTLFile").Value;
            }
        }

        public string SSL_CTLFilePath(string identifier)
        {
            XmlNode node = Doc.DocumentElement.SelectSingleNode("//Site/Certificates/SSLCert[@Identifier = \"" + identifier + "\"]");
            XmlNode node2 = node != null ? node.Attributes.GetNamedItem("CTLFile") : null;

            if (node == null || node2 == null)
            {
                throw new ApplicationException("ConfigDB specified an SSL Cert (CTL) with identifier " + identifier + " that was not found in " + Path);
            }
            else
            {
                return GetFullPath(node2.Value);
            }
        }

        [Obsolete("Please use SSL_P7BFilePath(identifier) instead", false)]
        public string SSL_P7BFile(string identifier)
        {
            XmlNode node = Doc.DocumentElement.SelectSingleNode("//Site/Certificates/SSLCert[@Identifier = \"" + identifier + "\"]");

            if (node == null)
            {
                throw new ApplicationException("ConfigDB specified an SSL Cert (P7B) with identifier " + identifier + " that was not found in " + Path);
            }
            else
            {
                return node.Attributes.GetNamedItem("P7BFile").Value;
            }
        }

        public string SSL_P7BFilePath(string identifier)
        {
            XmlNode node = Doc.DocumentElement.SelectSingleNode("//Site/Certificates/SSLCert[@Identifier = \"" + identifier + "\"]");
            XmlNode node2 = node != null ? node.Attributes.GetNamedItem("P7BFile") : null;

            if (node == null || node2 == null)
            {
                throw new ApplicationException("ConfigDB specified an SSL Cert (P7B) with identifier " + identifier + " that was not found in " + Path);
            }
            else
            {
                return GetFullPath(node2.Value);
            }
        }

        private string GetFullPath(String filePath)
        {
            if (System.IO.Path.IsPathRooted(filePath))
            {
                return filePath;
            }
            else
            {
                return System.IO.Path.Combine(SetupUNC, filePath);
            }
        }

        private String _setupUNC = null;
        private XmlDocument _doc = null;
        private string _path = null;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\config\TitleConfig.cs ===
using System;
using System.Collections;
using System.Collections.Specialized;
using System.Xml;
using System.Xml.XPath;
using System.Data;
using System.Data.SqlClient;

namespace xonline.common.config
{
    public enum ConsoleTypeEnum
    {
        Xbox1 = 0,
        XboxCom = 1,
        Xenon = 2,
        Marketplace = 3,
        PC = 4,
        Mobile = 5,
        WebGames = 6
    }

    public class TitleConfig : ConfigEventLogger
    {
        public const uint          X_STRINGID_TITLE = 0x8000;

        public enum SupportedPlatforms
        {
            Xbox360 = 0, // Xbox1 doesn't have achievements
            PC,
            Mobile,
            WebGames,
            MaxPlatforms,
        };

        public uint                TitleId;
        public string              XlastVersion;
        public string              ProjectVersion;
        public LocalizedDictionary Names;
        public SortedList          Achievements;
        public SortedList          AvatarAssets;
        public SortedList          Contexts;
        public SortedList          GameModes;
        public SortedList          Leaderboards;
        public uint                MaxCred;
        public bool[]              Platforms;

        // Key: attribute id
        public SortedList          MatchConstants;

        // use an arraylist for MatchSchema to preserve order. This is important
        // for generating SQL code for legacy xbox 1 titles
        public ArrayList           MatchSchema;

        // Key: query id
        public SortedList          MatchQueries;

        private string             _defaultLocale;

        private static Hashtable   _titleConfigs = new Hashtable();
        private static DateTime    _dtLastChange = DateTime.Now;
        private static Hashtable   _titleLocks = new Hashtable();
        private static object      _allTitlesLock = new Object();

        static TitleConfig()
        {
            Config.GameConfigChange += new GameConfigChangeEventHandler(TitleConfig.OnGameConfigChange);
        }

        public static TitleConfig GetTitle(uint titleId)
        {
            return(GetTitle(titleId, true));
        }

        public static int LoadTitleConnectionTimeout
        {
            get
            {
                const int DefaultLoadTitleConnectionTimeoutSeconds = 60;  // long enough to handle large xlast files (like Lips... 33 MB!)

                int timeoutSeconds;

                try
                {
                    timeoutSeconds = Config.GetIntSetting(Setting.config_loadTitleConnectionTimeoutSeconds);
                }
                catch (Exception) // ignore any exception, use the default timeout instead
                {
                    // We don't want LoadTitle to fail if the default loadtitle timeout config setting
                    // can't be determined, so ignore any exception and use the default timeout instead.

                    // There is no XomTrace available in the xonline.common.config namespace and we don't
                    // want to create Event spam for this case.  Also, this code will change for Brandenberg
                    // in several months' time, so there is no event fired for this failure.

                    timeoutSeconds = DefaultLoadTitleConnectionTimeoutSeconds;
                }

                if (timeoutSeconds < Config.NpdbConnectionTimeout)
                {
                    timeoutSeconds = Config.NpdbConnectionTimeout; // put a floor on the timeout
                }

                return timeoutSeconds;
            }
        }

        public static TitleConfig GetTitle(uint titleId, bool throwWhenNotFound)
        {
            TitleConfig cfg;

            cfg = (TitleConfig)_titleConfigs[titleId];

            if (cfg == null) // optimize the common case (don't take a per-title lock if already non-null)
            {
                lock (_allTitlesLock) // all threads block here...
                {
                    if (_titleLocks[titleId] == null) // ensure the titleId locks exists, and if not, create it
                    {
                        _titleLocks[titleId] = new object();
                    }
                }

                lock (_titleLocks[titleId]) // only threads representing titleIds that are already loading block here...
                {
                    cfg = (TitleConfig)_titleConfigs[titleId];

                    if (cfg == null)
                    {
                        cfg = LoadTitle(titleId);

                        if (cfg == null && throwWhenNotFound)
                        {
                            throw new ApplicationException("Configuration for title id " + titleId.ToString("x") + " not found!");
                        }
                        else
                        {
                            lock (typeof(TitleConfig))
                            {
                                _titleConfigs[titleId] = cfg;
                            }
                        }
                    }
                }
            }

            return cfg;
        }

        public static Hashtable AllTitles
        {
            get
            {
                return _titleConfigs;
            }
        }



        public static TitleConfig LoadTitle(uint titleId)
        {
            TitleConfig cfg = null;

            using (SqlConnection npdbConnection = new SqlConnection(Config.NpdbConnectionStringWithTimeout(LoadTitleConnectionTimeout)))
            {
                npdbConnection.Open();

                using (SqlCommand cmd = npdbConnection.CreateCommand())
                {
                    cmd.CommandText = "p_game_get_config";
                    cmd.CommandType = CommandType.StoredProcedure;

                    cmd.Parameters.Add("@i_title_id", SqlDbType.Int).Value = (int)titleId;

                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            try
                            {
                                cfg = new TitleConfig(titleId, (string)reader["xml_config"]);
                            }
                            catch (Exception)
                            {
                                // eat any exception and return null.
                            }
                        }
                    }
                }
            }

            return cfg;
        }

        public static void LoadChangedTitles() {
            DateTime dtNow = DateTime.Now;

            using (SqlConnection conn = new SqlConnection(Config.NpdbConnectionStringWithTimeout(LoadTitleConnectionTimeout)))            
            {
                conn.Open();

                using (SqlCommand cmd = new SqlCommand("p_game_get_all_configs", conn))
                {
                    cmd.CommandType = CommandType.StoredProcedure;

                    SqlParameter param = new SqlParameter();

                    param.ParameterName = "@dt_changed";
                    param.Direction = ParameterDirection.Input;
                    param.DbType = DbType.Date;
                    param.Value = _dtLastChange;

                    cmd.Parameters.Add(param);

                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        int titleIdOrd = reader.GetOrdinal("i_title_id");
                        int xmlConfOrd = reader.GetOrdinal("xml_config");

                        while ( reader.Read() )
                        {
                            uint   titleId = (uint)reader.GetInt32( titleIdOrd );
                            string xmlConf = reader.GetString( xmlConfOrd );

                            try
                            {
                                TitleConfig cfg = new TitleConfig(titleId, xmlConf);
                                lock (typeof(TitleConfig))
                                {
                                    _titleConfigs[titleId] = cfg;
                                }
                            }
                            catch (Exception e)
                            {
                                Config.LogNtEvent(Config.ComponentName,
                                                  "Invalid title config found for title id " + titleId.ToString("x") + ":\n" + e.ToString(),
                                                  ConfigEvent.Id.COMMON_CONFIG_BAD_XLAST_FILE);

                                //Continue loading title config data after exception
                            }
                        }

                    }
                }
            }

            _dtLastChange = dtNow;
        }

        public static void OnGameConfigChange(object sender, EventArgs e)
        {
            // $QFE (jojohn): erasing all config entries causes ASP.NET queueing on requests
            LoadChangedTitles();
        }



        public TitleConfig() {}
        public TitleConfig(uint titleId, string xlastXml)
        {
            ParseXml(titleId, xlastXml);
        }

        public void ParseXml(uint titleId, string xlastXml)
        {
            // i hate namespaces
            xlastXml = xlastXml.Replace("xmlns=\"http://www.xboxlive.com/xlast\"", String.Empty);

            XmlDocument doc = new XmlDocument();
            doc.LoadXml(xlastXml);
            XPathNavigator root = doc.CreateNavigator();

            XPathNodeIterator it = root.Select("/XboxLiveSubmissionProject");
            if (it.Count == 0)
            {
                throw new ApplicationException("Invalid game config xml found for title id " + titleId.ToString("x") + ":" +
                    "Could not find /XboxLiveSubmissionProject");
            }
            if (it.Count > 1)
            {
                // we can't handle this.. is it necessary?
                throw new ApplicationException("Invalid game config xml found for title id " + titleId.ToString("x") + ":" +
                    "Too many XboxLiveSubmissionProject nodes!");
            }
            it.MoveNext();

            // grab the xlast version
            XlastVersion = it.Current.GetAttribute("Version", String.Empty);

            it = root.Select("/XboxLiveSubmissionProject/GameConfigProject");
            if (it.Count == 0)
            {
                throw new ApplicationException("Invalid game config xml found for title id " + titleId.ToString("x") + ":" +
                    "Could not find /XboxLiveSubmissionProject/GameConfigProject");
            }
            if (it.Count > 1)
            {
                // we can't handle this.. is it necessary?
                throw new ApplicationException("Invalid game config xml found for title id " + titleId.ToString("x") + ":" +
                    "Too many GameConfigProject nodes!");
            }

            // titleid
            it.MoveNext();
            TitleId = ParseUInt32(it.Current.GetAttribute("titleId", String.Empty));
            ProjectVersion = it.Current.GetAttribute("projectVersion", String.Empty);

            // locale
            //
            it = root.Select("/XboxLiveSubmissionProject/GameConfigProject/LocalizedStrings");
            if (it.Count != 1)
            {
                throw new ApplicationException("Invalid game config xml found for title id " + titleId.ToString("x") + ":" +
                    "Unexpected number of LocalilzedStrings nodes (" + it.Count + ")!");
            }


            it.MoveNext();
            _defaultLocale = it.Current.GetAttribute("defaultLocale", String.Empty);


            //
            // title names
            //
            it = root.Select("/XboxLiveSubmissionProject/GameConfigProject");
            it.MoveNext();

            Names = GetLocalizedStrings(root, (int)X_STRINGID_TITLE);

            ParseAchievements(root);
            ParseAvatarAssets(titleId, root);
            ParseContexts(root);
            ParseGameModes(root);
            ParseMatch(root);
            ParseLeaderboards(root);
            ParsePlatforms(root);

        }

        private void ParseAchievements(XPathNavigator root)
        {
            XPathNodeIterator it = root.Select("/XboxLiveSubmissionProject/GameConfigProject/Achievements/Achievement");
            XPathNodeIterator it2;
            int i;

            Achievements = new SortedList(it.Count);
            MaxCred = 0;

            while (it.MoveNext())
            {
                TitleAchievement a = new TitleAchievement();

                a.Id = ParseUInt32(it.Current.GetAttribute("id", String.Empty));
                a.Cred = XmlConvert.ToInt32(it.Current.GetAttribute("cred", String.Empty));
                a.ShowUnachieved = XmlConvert.ToBoolean(it.Current.GetAttribute("showUnachieved", String.Empty));
                a.Type = (TitleAchievementType)Enum.Parse(typeof(TitleAchievementType), it.Current.GetAttribute("achievementType", String.Empty), true);

                a.FriendlyName = it.Current.GetAttribute("titleStringId", String.Empty);
                a.Title = GetLocalizedStrings(root, XmlConvert.ToInt32(it.Current.GetAttribute("titleStringId", String.Empty)));

                if (String.IsNullOrEmpty(it.Current.GetAttribute("unachievedStringId", String.Empty)))
                    i = -1;
                else
                    i = XmlConvert.ToInt32(it.Current.GetAttribute("unachievedStringId", String.Empty));

                a.Unachieved = GetLocalizedStrings(root, i);

                a.Description = GetLocalizedStrings(root, XmlConvert.ToInt32(it.Current.GetAttribute("descriptionStringId", String.Empty)));

                if (!String.IsNullOrEmpty(it.Current.GetAttribute("imageId", String.Empty)))
                    a.ImageId = XmlConvert.ToUInt32(it.Current.GetAttribute("imageId", String.Empty));

                // next ids
                //
                it2 = it.Current.Select("Next");
                a.NextIds = new uint[it2.Count];
                i = 0;
                while (it2.MoveNext())
                {
                    a.NextIds[i++] = ParseUInt32(it2.Current.GetAttribute("id", String.Empty));
                }

                // replace ids
                //
                it2 = it.Current.Select("Replace");
                a.ReplaceIds = new uint[it2.Count];
                i = 0;
                while (it2.MoveNext())
                {
                    a.ReplaceIds[i++] = ParseUInt32(it2.Current.GetAttribute("id", String.Empty));
                }


                Achievements.Add(a.Id, a);
                MaxCred += (uint)a.Cred;
            }
        }

        private TitleAvatarAsset ParseAvatarAward(XPathNodeIterator it, XPathNavigator root,
            bool showUnachieved, LocalizedDictionary unachievedStrings, LocalizedDictionary descriptionStrings, string friendlyName, // shared attributes
            string guidAttr, string imageAttr, string displayStringAttr, string subCategoryAttr) // names of award-specific attributes
        {
            string guidValue = it.Current.GetAttribute(guidAttr, String.Empty);
            if (String.IsNullOrEmpty(guidValue) || guidValue == "0" || guidValue == "{00000000-0000-0000-0000-000000000000}")
            {
                return null;
            }

            TitleAvatarAsset a = new TitleAvatarAsset();

            a.ShowUnachieved = showUnachieved;
            a.Unachieved = unachievedStrings;
            a.Description = descriptionStrings;
            a.FriendlyName = friendlyName;

            // Create awards using award-specific fields
            a.Id = new AvatarAssetId(new Guid(guidValue));

            a.Title = GetLocalizedStrings(root, XmlConvert.ToInt32(it.Current.GetAttribute(displayStringAttr, String.Empty)));

            string imageId = it.Current.GetAttribute(imageAttr, String.Empty);
            if (!String.IsNullOrEmpty(imageId))
                a.ImageId = XmlConvert.ToUInt32(imageId);

            a.SubCategory = XmlConvert.ToUInt32(it.Current.GetAttribute(subCategoryAttr, String.Empty));

            return a;
        }

        private void ParseAvatarAssets(uint titleId, XPathNavigator root)
        {
            XPathNodeIterator it = root.Select("/XboxLiveSubmissionProject/GameConfigProject/AvatarItems/AvatarItem");
            int i;

            AvatarAssets = new SortedList(it.Count);

            while (it.MoveNext())
            {
                // Each element in the XLAST can contain 1 or 2 awards. If the item is gender-neutral, it will
                // only have 1 award. Gender-specific items can have 2 awards. Generate 1 entry in the array
                // for each award.
                //
                // Sample:
                //
                //<!-- Gender award -->
                //<AvatarAwards clsid="{5A72CE58-51F0-4AA4-980F-782210E96671}">
                //   <AvatarAward clsid="{9FE46E41-6718-4CEF-AA72-422186EF67C3}" showUnachieved="true" unachievedStringId="18" friendlyName="award" descriptionStringId="19"
                //      guid1="{00000002-0002-4101-C111-01235841089A}" imageId1="0" displayStringId1="20" subCategory1="0" binLocation1="..\avatar1.bin" imageMedLocation1="..\avatar1_128_128.png"
                //      guid2="{00000002-0002-4102-C111-01235841089A}" imageId2="0" displayStringId2="21" subCategory2="0" binLocation2="..\avatar2.bin" imageMedLocation2="..\avatar2_128_128.png"/>
                //</AvatarAwards>
                //
                //<!-- Neutral award -->
                //<AvatarAwards clsid="{5A72CE58-51F0-4AA4-980F-782210E96671}">
                //   <AvatarAward clsid="{9FE46E41-6718-4CEF-AA72-422186EF67C3}" showUnachieved="true" unachievedStringId="18" friendlyName="award" descriptionStringId="19"
                //      guid1="{00000002-0002-4103-C111-01235841089A}" imageId1="0" displayStringId1="20" subCategory1="0" binLocation1="..\avatar2.bin" imageMedLocation1="..\avatar3_128_128.png"
                //      guid2="{00000000-0000-0000-0000-000000000000}" imageId2="0" displayStringId2="21" subCategory2="0" binLocation2="0" imageMedLocation2="0"/>
                //</AvatarAwards>

                // Retrieve the shared fields
                bool showUnachieved = XmlConvert.ToBoolean(it.Current.GetAttribute("showUnachieved", String.Empty));

                string unachievedStringId = it.Current.GetAttribute("unachievedStringId", String.Empty);
                if (String.IsNullOrEmpty(unachievedStringId))
                {
                    i = -1;
                }
                else
                {
                    i = XmlConvert.ToInt32(unachievedStringId);
                }
                LocalizedDictionary unachievedStrings = GetLocalizedStrings(root, i);
                LocalizedDictionary descriptionStrings = GetLocalizedStrings(root, XmlConvert.ToInt32(it.Current.GetAttribute("descriptionStringId", String.Empty)));

                string friendlyName = it.Current.GetAttribute("friendlyName", String.Empty);

                TitleAvatarAsset a;
                a = ParseAvatarAward(it, root, showUnachieved, unachievedStrings, descriptionStrings, friendlyName, "guid1", "imageId1", "displayStringId1", "subCategory1");
                if (a != null)
                {
                    AvatarAssets.Add(new TitleAvatarAssetKey(titleId, a.Id.AwardOrdinal, a.Id.BodyTypeMask), a);
                }

                a = ParseAvatarAward(it, root, showUnachieved, unachievedStrings, descriptionStrings, friendlyName, "guid2", "imageId2", "displayStringId2", "subCategory2");
                if (a != null)
                {
                    AvatarAssets.Add(new TitleAvatarAssetKey(titleId, a.Id.AwardOrdinal, a.Id.BodyTypeMask), a);
                }
            }
        }

        private void ParseContexts(XPathNavigator root)
        {

            XPathNodeIterator it = root.Select("/XboxLiveSubmissionProject/GameConfigProject/Contexts/Context");
            XPathNodeIterator it2;

            Contexts = new SortedList(it.Count);

            while (it.MoveNext())
            {
                TitleContext c = new TitleContext();

                c.Id = ParseUInt32(it.Current.GetAttribute("id", String.Empty));

                it2 = it.Current.Select("ContextValue");
                c.Values = new SortedList(it2.Count);

                while (it2.MoveNext())
                {
                    TitleContextValue cv = new TitleContextValue();
                    cv.Id = ParseUInt32(it2.Current.GetAttribute("value", String.Empty));
                    cv.Name = GetLocalizedStrings(root, XmlConvert.ToInt32(it2.Current.GetAttribute("stringId", String.Empty)));

                    c.Values.Add(cv.Id, cv);
                }

                Contexts.Add(c.Id, c);
            }

        }

        private void ParseGameModes(XPathNavigator root)
        {

            XPathNodeIterator it = root.Select("/XboxLiveSubmissionProject/GameConfigProject/GameModes/GameMode");

            GameModes = new SortedList(it.Count);

            while (it.MoveNext())
            {
                GameMode m = new GameMode();

                m.Id = ParseUInt32(it.Current.GetAttribute("value", String.Empty));
                m.DrawProbability = ParseUInt32(it.Current.GetAttribute("drawProbability", String.Empty));
                m.Name = GetLocalizedStrings(root, XmlConvert.ToInt32(it.Current.GetAttribute("stringId", String.Empty)));

                GameModes.Add(m.Id, m);
            }
        }


        private void ParseMatch(XPathNavigator root)
        {
            ParseMatchConstants(root);
            ParseMatchSchema(root);
            ParseMatchQueries(root);
        }

        private void ParseMatchConstants(XPathNavigator root)
        {
            XPathNodeIterator it = root.Select("/XboxLiveSubmissionProject"+
                "/GameConfigProject/Matchmaking/Constants/Constant");

            MatchConstants = new SortedList(it.Count);

            while (it.MoveNext())
            {
                MatchConstant c = new MatchConstant();

                c.Id = ParseUInt32(it.Current.GetAttribute("id", String.Empty));
                c.Name = it.Current.GetAttribute("name", String.Empty);
                c.Value = it.Current.GetAttribute("value", String.Empty);

                MatchConstants.Add(c.Id, c);
            }
        }

        private void ParseMatchSchema(XPathNavigator root)
        {
            XPathNodeIterator it = root.Select("/XboxLiveSubmissionProject"+
                "/GameConfigProject/Matchmaking/Schema/Attribute");

            MatchSchema = new ArrayList(it.Count);

            while (it.MoveNext())
            {
                MatchSchemaAttribute a = new MatchSchemaAttribute();

                a.Id = ParseUInt32(it.Current.GetAttribute("id", String.Empty));

                MatchSchema.Add(a);
            }
        }

        private void ParseMatchQueries(XPathNavigator root)
        {
            XPathNodeIterator it = root.Select("/XboxLiveSubmissionProject"+
                "/GameConfigProject/Matchmaking/Queries/Query");

            MatchQueries = new SortedList(it.Count);

            while (it.MoveNext())
            {
                MatchQuery q = ParseMatchQuery(it.Current);
                MatchQueries.Add(q.Id, q);
            }
        }

        private void ParseLeaderboards(XPathNavigator root)
        {
            XPathNodeIterator it = root.Select("/XboxLiveSubmissionProject/GameConfigProject/StatsViews/StatsView");

            Leaderboards = new SortedList(it.Count);

            while (it.MoveNext())
            {
                Leaderboard lb = new Leaderboard();

                lb.Id = ParseUInt32(it.Current.GetAttribute("id", String.Empty));
                lb.MaxAttachments = ParseUInt32(it.Current.GetAttribute("maxAttachments", String.Empty));

                // todo: add all the other stuff for leaderboards..

                Leaderboards.Add(lb.Id, lb);
            }
        }

        private void ParsePlatforms(XPathNavigator root)
        {
            XPathNodeIterator it = root.Select("/XboxLiveSubmissionProject/GameConfigProject/ProductInformation/Platform");

            Platforms = new bool[(int)SupportedPlatforms.MaxPlatforms];
            for (int i = 0; i < (int)SupportedPlatforms.MaxPlatforms; i++)
            {
                Platforms[i] = false;
            }

            if (it.Count == 0)
            {
                // There's no Platform Defined, meaning it is a 360
                Platforms[(int)SupportedPlatforms.Xbox360] = true;
            }
            else
            {
                while (it.MoveNext())
                {
                    string idAttr = it.Current.GetAttribute("id", String.Empty);
                    if(idAttr.Length == 0)
                    {
                        throw new ApplicationException("Missing Platform 'id' attribute.");
                    }

                    int platId;
                    if (int.TryParse(idAttr, out platId) == false)
                    {
                        throw new ApplicationException("Non-integer Platform 'id' value ('" + idAttr + "')");
                    }

                    switch ((ConsoleTypeEnum)platId)
                    {
                        case ConsoleTypeEnum.Xenon:
                            Platforms[(int)SupportedPlatforms.Xbox360] = true;
                            break;
                        case ConsoleTypeEnum.PC:
                            Platforms[(int)SupportedPlatforms.PC] = true;
                            break;
            case ConsoleTypeEnum.Mobile:
                            Platforms[(int)SupportedPlatforms.Mobile] = true;
                            break;
            case ConsoleTypeEnum.WebGames:
                Platforms[(int)SupportedPlatforms.WebGames] = true;
                break;
                        default:
                            throw new ApplicationException("Unrecognized Platform 'id' value ('" + platId + "')");
                    }
                }
            }
        }


        private MatchQuery ParseMatchQuery(XPathNavigator query)
        {
            MatchQuery q = new MatchQuery();
            q.Id = ParseUInt32(query.GetAttribute("id", String.Empty));
            q.FriendlyName = query.GetAttribute("friendlyName", String.Empty);
            q.MaxResults = ParseUInt32(query.GetAttribute("maxResults", String.Empty));
            q.Type = query.GetAttribute("type", String.Empty);
            q.GroupBy = ParseUInt32(query.GetAttribute("groupBy", String.Empty));
            q.Parameters = ParseMatchQueryParams(query);
            q.Filters = ParseMatchQueryFilters(query);
            q.SortOps = ParseMatchQuerySortOps(query);
            q.Returns = ParseMatchQueryReturns(query);
            return q;
        }

        private ArrayList ParseMatchQueryParams(XPathNavigator query)
        {
            XPathNodeIterator it = query.Select("Parameters/Parameter");

            ArrayList paramList = new ArrayList(it.Count);

            while (it.MoveNext())
            {
                MatchQueryParam p = new MatchQueryParam();
                p.Id = ParseUInt32(it.Current.GetAttribute("id", String.Empty));
                paramList.Add(p);
            }

            return paramList;
        }

        private ArrayList ParseMatchQueryFilters(XPathNavigator query)
        {
            XPathNodeIterator it = query.Select("Filters/Filter");

            ArrayList filters = new ArrayList(it.Count);

            while (it.MoveNext())
            {
                MatchQueryFilter f = new MatchQueryFilter();
                f.Left = ParseUInt32(it.Current.GetAttribute("left", String.Empty));
                f.LeftType = it.Current.GetAttribute("leftType", String.Empty);
                f.Op = it.Current.GetAttribute("op", String.Empty);
                f.Right = ParseUInt32(it.Current.GetAttribute("right", String.Empty));
                f.RightType = it.Current.GetAttribute("rightType", String.Empty);
                filters.Add(f);
            }

            return filters;
        }

        private SortedList ParseMatchQuerySortOps(XPathNavigator query)
        {
            XPathNodeIterator it = query.Select("SortOperations/SortOperation");

            SortedList sortOps = new SortedList(it.Count);

            while (it.MoveNext())
            {
                MatchQuerySortOp s = new MatchQuerySortOp();
                s.Id = ParseUInt32(it.Current.GetAttribute("id", String.Empty));
                s.Type = it.Current.GetAttribute("type", String.Empty);
                s.Distanceid = ParseUInt32(it.Current.GetAttribute("distanceid", String.Empty));
                s.Ordinal = ParseUInt32(it.Current.GetAttribute("ordinal", String.Empty));
                sortOps.Add(s.Ordinal, s);
            }

            return sortOps;
        }

        private SortedList ParseMatchQueryReturns(XPathNavigator query)
        {
            XPathNodeIterator it = query.Select("Returns/Return");

            SortedList returns = new SortedList(it.Count);

            while (it.MoveNext())
            {
                MatchQueryReturn r = new MatchQueryReturn();
                r.Id = ParseUInt32(it.Current.GetAttribute("id", String.Empty));
                r.Type = it.Current.GetAttribute("type", String.Empty);
                r.Ordinal = ParseUInt32(it.Current.GetAttribute("ordinal", String.Empty));
                returns.Add(r.Ordinal, r);
            }

            return returns;
        }


        private LocalizedDictionary GetLocalizedStrings(XPathNavigator root, int id)
        {
            LocalizedDictionary dict = new LocalizedDictionary(_defaultLocale);
            if (id == -1)
            {
                dict.Add(_defaultLocale, String.Empty);
                return dict;
            }

            XPathNodeIterator it = root.Select("/XboxLiveSubmissionProject/GameConfigProject/LocalizedStrings/LocalizedString[@id=" + id + "]/Translation");

            if (it.Count == 0)
                throw new ApplicationException("Couldn't find localized strings with id " + id);

            while (it.MoveNext())
            {
                dict.Add(it.Current.GetAttribute("locale", String.Empty), it.Current.Value);
            }

            return dict;
        }


        private uint ParseUInt32(string str)
        {
            int fromBase = 10;

            if (str.StartsWith("0x"))
            {
                fromBase = 16;
                str = str.Substring(2);
            }

            return Convert.ToUInt32(str, fromBase);
        }
    }

    public enum TitleAchievementType
    {
        Completion = 1,
        Leveling,
        Unlock,
        Event,
        Tournament,
        Checkpoint,
        Other
    }

    public class TitleAchievement
    {
        public uint Id;
        public string FriendlyName;
        public string DefaultLocale;

        public TitleAchievementType Type;
        public int Cred;
        public bool ShowUnachieved;

        public uint[] NextIds;
        public uint[] ReplaceIds;

        public uint ImageId = 0xffffffff;
        public LocalizedDictionary Title;
        public LocalizedDictionary Unachieved;
        public LocalizedDictionary Description;
    }

    // Key for the SortedList TitleConfig.AvatarAssets, containing TitleAvatarAsset objects
    public class TitleAvatarAssetKey : IComparable
    {
        public TitleAvatarAssetKey(uint TitleId, uint Ordinal, byte BodyTypeMask)
        {
            this.TitleId = TitleId;
            this.Ordinal = Ordinal;
            this.BodyTypeMask = BodyTypeMask;
        }

        public uint TitleId;
        public uint Ordinal;
        public byte BodyTypeMask;

        public override int GetHashCode()
        {
            // Ordinal will generally be in the range 1..5, though if we use a fake title
            // to contain free downloads for the 'asset refresh' functionality, it may potentially
            // hold hundreds of assets. BodyTypeMask will be 1, 2, or 3.
            // Given the above, use 1009 as an arbitrary prime to generate a hash.
            return (int) (Ordinal + BodyTypeMask*1009 + TitleId);
        }

        public override bool Equals(object obj)
        {
            TitleAvatarAssetKey other = (TitleAvatarAssetKey)obj;

            return (TitleId == other.TitleId) && (Ordinal == other.Ordinal) && (BodyTypeMask == other.BodyTypeMask);
        }

        // Provide an order for avatar assets. This defines the order in which unawarded
        // assets are returned to a client.
        public int CompareTo(object obj)
        {
            TitleAvatarAssetKey other = (TitleAvatarAssetKey)obj;

            if (TitleId != other.TitleId)
                return TitleId.CompareTo(other.TitleId);

            if (Ordinal != other.Ordinal)
                return Ordinal.CompareTo(other.Ordinal);

            return BodyTypeMask.CompareTo(other.BodyTypeMask);
        }
    }

    public class TitleAvatarAsset
    {
        public AvatarAssetId Id;
        public string FriendlyName;
        public string DefaultLocale;

        public bool ShowUnachieved;

        public uint SubCategory;

        public uint ImageId = 0xffffffff;
        public LocalizedDictionary Title;
        public LocalizedDictionary Unachieved;
        public LocalizedDictionary Description;
    }

    public class TitleContext
    {
        public uint Id;
        public SortedList Values;
    }

    public class TitleContextValue
    {
        public uint Id;
        public LocalizedDictionary Name;
    }

    public class Leaderboard
    {
        public uint Id;
        public uint MaxAttachments;
    }

    public class GameMode
    {
        public uint Id;
        public uint DrawProbability;
        public LocalizedDictionary Name;
    }


    public class MatchConstant
    {
        public string Name;
        public uint Id;
        public string Value;
    }

    public class MatchSchemaAttribute
    {
        public uint Id;
    }

    public class MatchQuery
    {
        public uint Id;
        public string FriendlyName;
        public uint MaxResults;
        public string Type;
        // don't bother with qosProbe attribute
        public uint GroupBy;

        // order is significant in parameters for xbox 1 titles, so
        // use array list
        public ArrayList Parameters;

        // filters don't have an order, but also don't have a natural key
        // so use an array list
        public ArrayList Filters;

        // sort operations have an explicit ordering by the ordinal attribute
        // so use a sorted list
        public SortedList SortOps;

        // returns also have an explicity ordering by ordinal
        public SortedList Returns;
    }

    public class MatchQueryParam
    {
        public uint Id;
    }

    public class MatchQueryFilter
    {
        public uint Left;
        public string LeftType;
        public string Op;
        public uint Right;
        public string RightType;
    }

    public class MatchQuerySortOp
    {
        public uint Id;
        public string Type;
        public uint Distanceid;
        public uint Ordinal;
    }

    public class MatchQueryReturn
    {
        public uint Id;
        public string Type;
        public uint Ordinal;
    }

    public class LocalizedDictionary : HybridDictionary
    {
        public LocalizedDictionary(string defaultLocale)
        {
            _defaultLocale = defaultLocale.ToLower();
        }

        [Obsolete]
        public string this[int key]
        {
            get {return null;}
            set {}
        }

        public string this[string key]
        {
            set { base[key.ToLower()] = value; }
            get { return (string)(this.Contains(key.ToLower()) ? base[key.ToLower()] : base[_defaultLocale]); }
        }
        public new string this[object key]
        {
            set { base[(string)key] = value; }
            get { return (string)(this.Contains(((string)key).ToLower()) ? base[((string)key).ToLower()] : base[_defaultLocale]); }
        }

        public string this[string[] keys]
        {
            get {
                foreach (string key in keys)
                {
                    if (this.Contains(key.ToLower()))
                        return (string)base[key.ToLower()];
                }

                return (string)base[_defaultLocale];
            }
        }

        public void Add(string name, string value)
        {
            base.Add(name.ToLower(), value);
        }

        public bool ContainsKey(string key)
        {
            return base.Contains(key.ToLower());
        }


        private string _defaultLocale;
    }

    public class LocaleMapper
    {
        public static string[] LocaleIdToString(ushort locale)
        {
            string loc = Enum.GetName(typeof(Locales), locale);

            if (null == loc)
                loc = "en-us";
            else
                loc = loc.Replace("_", "-");

            return(new string[] { loc });
        }
    }


    public enum Locales
    {
        // Using Country-Specific Locales, as defined at
        // http://msdn2.microsoft.com/en-us/library/system.globalization.cultureinfo(VS.80).aspx
        // and http://msdn2.microsoft.com/en-us/library/ms776260.aspx
        // and http://www.microsoft.com/globaldev/reference/lcid-all.mspx
        zh_CHS = 0004, // Chinese (Simplified)
        zh_TW = 1028, // Chinese (Taiwan)
        da_DK = 1030, // Danish (Denmark)
        de_DE = 1031, // German (Germany)
        el_GR = 1032, // Greek (Greece)
        en_US = 1033, // English (United States)
        fi_FI = 1035, // Finnish (Finland)
        fr_FR = 1036, // French (France)
        hu_HU = 1038, // Hungarian (Hungary)
        it_IT = 1040, // Italian (Italy)
        ja_JP = 1041, // Japanese (Japan)
        ko_KR = 1042, // Korean (Korea)
        nl_NL = 1043, // Dutch (Netherlands)
        nb_NO = 1044, // Norwegian (Bokml) (Norway)
        pl_PL = 1045, // Polish (Poland)
        pt_BR = 1046, // Portuguese (Brazil)
        ru_RU = 1049, // Russian (Russian Federation)
        sv_SE = 1053, // Swedish (Sweden)
        zh_CN = 2052, // Chinese (China)
        de_CH = 2055, // German (Switzerland)
        en_GB = 2057, // English (United Kingdom)
        es_MX = 2058, // Spanish (Mexico)
        fr_BE = 2060, // French (Belgium)
        nl_BE = 2067, // Dutch (Belgium)
        pt_PT = 2070, // Portuguese (Portugal)
        zh_HK = 3076, // Chinese (Hong Kong S.A.R.)
        de_AT = 3079, // German (Austria)
        en_AU = 3081, // English (Australia)
        es_ES = 3082, // Spanish (Spain)
        fr_CA = 3084, // French (Canada)
        zh_SG = 4100, // Chinese (Singapore)
        en_CA = 4105, // English (Canada)
        fr_CH = 4108, // French (Switzerland)
        en_NZ = 5129, // English (New Zealand)
        en_IE = 6153, // English (Ireland)
        en_ZA = 7177, // English (South Africa)
        es_CO = 9226, // Spanish (Colombia)
        es_CL = 13322, // Spanish (Chile)
        en_AE = 14337, // English (United Arab Emirates)
        en_IN = 16393, // English (India)
        zh_CHT = 31748, // Chinese (Traditional)

    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\config\UserRole.cs ===
using System;
using System.Runtime.InteropServices;

namespace xonline.common.config
{
	[ComVisible(false)]
	public class UserRole : IUserRole
	{
		private string _rolename;
		private string _username;
		private string _domainname;
		private string _password;

		public string Name
		{
			get { return _rolename; }
			set { _rolename = value; }
		}

		public string FullUsername
		{
			get { return _domainname + "\\" + _username; }
			set 
			{ 
				String [] split = value.Split('\\');

				if( split.Length == 1 )
				{
					_domainname = ".";
					_username = split[0];
				}
				else if( split.Length == 2 )
				{
					_domainname = split[0];
					_username = split[1];
				}
				else
				{
					throw new ArgumentException("Invalid username");
				}
			}
		}

		public string Username
		{
			get { return _username; }
		}

		public string Domainname
		{
			get { return _domainname; }
		}

		public string Password
		{
			get { return _password; }
			set { _password = value; }
		}

		public UserRole()
		{
			_rolename = null;
			_username  = null;
			_password = null;
		}
	}
} // end namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\config\VirtualInterfaceInfo.cs ===
using System;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Runtime.InteropServices;

namespace xonline.common.config
{

[ComVisible(false)]
public class VirtualInterfaceInfo : ConfigEventLogger, IVirtualInterfaceInfo
{
    private string _virtualInterface = xonline.common.config.VirtualInterface.None;
    private string _interface = xonline.common.config.Interface.None;
    private string _protocol = null;
    private string _ipAddress = null;
    private IPAddress _resolvedIp = null;
    private int _port = 0;
    private int _portEnd = 0;
    private string _vdir = null;
    private string _webstoreApp = null;
    private int _timeout = 0;
    private int _serviceId = 0; // 0 correpsonds to invalid service in another enum somewhere...
    private string _serviceName = null;
    private bool _needSGInfo = false;
    private int _internetPort = 0;
    private int _internetPortEnd = 0;
    private string _info1 = null;
    private string _info2 = null;
    private int? _minConnectionPoolSize = null;
    private int? _maxConnectionPoolSize = null;
    private int? _loadBalanceTimeout = null;
    private int? _connectionTimeout = null;
    private string _healthCheckUrl = null;
    private Dictionary<string,string> _notificationUrls = null;
    private object _notificationLock = new object();

    public override string ToString()
    {
        return "{{"
            +_virtualInterface.ToString()+","
            +_interface.ToString()+","
            +(_protocol == null ? "<null>" : _protocol)+","
            +(_ipAddress ?? "<null>")+","
            +_port.ToString()+","
            +_portEnd.ToString()+","
            +(_vdir== null ? "<null>" : _vdir)+","
            +(_webstoreApp== null ? "<null>" : _webstoreApp)+","
            +_timeout.ToString()+","
            +_serviceId.ToString()+","
            +(_serviceName== null ? "<null>" : _serviceName)+","
            +_needSGInfo.ToString()+","
            +_internetPort.ToString()+","
            +_internetPortEnd.ToString()+","
            +(_info1== null ? "<null>" : _info1)+","
            +(_info2== null ? "<null>" : _info2)+","
            +(_minConnectionPoolSize==null ? "<null>" : _minConnectionPoolSize.ToString())+","
            +(_maxConnectionPoolSize==null ? "<null>" : _maxConnectionPoolSize.ToString())+","
            +(_loadBalanceTimeout==null ? "<null>" : _loadBalanceTimeout.ToString())+","
            +(_connectionTimeout==null ? "<null>" : _connectionTimeout.ToString())+","
            +(_notificationUrls==null ? "<null>" : 
              "[" + string.Join(";", _notificationUrls.Select( u => u.Key + ":" + u.Value ).ToArray() ) +"]")
            +"}}";
    }

    public string VirtualInterface
    {
        get { return _virtualInterface; }
        set { _virtualInterface = value; }
    }

    public string Interface
    {
        get { return _interface; }
        set { _interface = value; }
    }

    public string Protocol
    {
        get { return _protocol; }
        set { _protocol = value; }
    }

//    [Obsolete]
    public IPAddress IPAddress
    {
        get
        {
            if (_resolvedIp == null)
            {
                foreach (IPAddress ip in Dns.GetHostAddresses(_ipAddress))
                {
                    if (ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
                    {
                        _resolvedIp = ip;
                    }
                }
                //_resolvedIp = Dns.GetHostAddresses(_ipAddress)
                //                .FirstOrDefault(ip => ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork);
            }
            return _resolvedIp;
        }
        set { _ipAddress = value.ToString(); _resolvedIp = value; }
    }

    public string IPAddressString
    {
        get { return _ipAddress == null? null : _ipAddress.ToString(); }
        set { _ipAddress = value; _resolvedIp = null; }
    }

//    [Obsolete]
    public uint IPAddressDword
    {
#pragma warning disable 612
        get { return String.IsNullOrEmpty(_ipAddress) ? 0 : ConfigUtil.IpAddressToDword( IPAddress ); }
#pragma warning restore 612
    }

    public int Port
    {
        get { return _port; }
        set { _port = value; }
    }

    public int PortEnd
    {
        get { return _portEnd; }
        set { _portEnd = value; }
    }

    public string VDir
    {
        get { return _vdir; }
        set { _vdir = value; }
    }

    public int Timeout
    {
        get { return (_connectionTimeout ?? _timeout); }
        set { _timeout = value; }
    }

    public string WebstoreApp
    {
        get { return _webstoreApp; }
        set { _webstoreApp = value; }
    }

    public int ServiceId
    {
        get { return _serviceId; }
        set { _serviceId = value; }
    }

    public string ServiceName
    {
        get { return _serviceName; }
        set { _serviceName = value; }
    }

    public bool NeedSGInfo
    {
        get { return _needSGInfo; }
        set { _needSGInfo = value; }
    }

    public int InternetPort
    {
        get { return _internetPort; }
        set { _internetPort = value; }
    }

    public int InternetPortEnd
    {
        get { return _internetPortEnd; }
        set { _internetPortEnd = value; }
    }

    public string Info1
    {
        get { return _info1; }
        set { _info1 = value; }
    }

    public string Info2
    {
        get { return _info2; }
        set { _info2 = value; }
    }

    public int? MinConnectionPoolSize
    {
        get { return _minConnectionPoolSize; }
        set { _minConnectionPoolSize = value; }
    }

    public int? MaxConnectionPoolSize
    {
        get { return _maxConnectionPoolSize; }
        set { _maxConnectionPoolSize = value; }
    }

    public int? LoadBalanceTimeout
    {
        get { return _loadBalanceTimeout; }
        set { _loadBalanceTimeout = value; }
    }

    public int? ConnectionTimeout
    {
        get { return _connectionTimeout; }
        set { _connectionTimeout = value; }
    }

    public Uri Url
    {
        get
        {
            if (Protocol == null || IPAddressString == null)
            {
                return null;
            }

            UriBuilder b = new UriBuilder();
            b.Scheme = Protocol;
            b.Host = IPAddressString;

            // Port == 0 means port was not specified, so leave it out
            // of the Uri
            if (Port != 0)
            {
                b.Port = Port;
            }

            return b.Uri;
        }
    }

    public string GetNotificationUrl(string notification)
    {
        if (_notificationUrls == null || String.IsNullOrEmpty(notification))
        {
            return null;
        }
        notification = notification.ToLower();

        lock( _notificationLock )
        {
            string value = null;

            _notificationUrls.TryGetValue(notification, out value);
            return value;
        }
    }

    public void AddNotificationUrl(string notification, string url)
    {
        if (String.IsNullOrEmpty(notification) == true)
        {
            return;
        }
        notification = notification.ToLower();

        lock( _notificationLock )
        {
            if (_notificationUrls == null)
            {
                _notificationUrls = new Dictionary<string,string>();
            }
            _notificationUrls[notification] = url;
        }
    }

    public string[] NotificationUrls
    {
        get
        {
            lock( _notificationLock )
            {
                if (_notificationUrls == null)
                {
                    return new string[0];
                }
                return _notificationUrls.Keys.ToArray();
            }
        }
    }

    public string HealthCheckUrl
    {
        get { return _healthCheckUrl; }
        set { _healthCheckUrl = value; }
    }

    public string SqlConnectionString
    {
        get
        {
            // only makes sense if the protocol is sql
            if (Protocol == null || Protocol != "sql")
            {
                string message = String.Format(
                    "VirtualInterfaceInfo.SqlConnectionString: VirtualInterface {0} does not have a Protocol of 'sql'.",
                    VirtualInterface.ToString());

                ApplicationException ae = new ApplicationException(message);
                LogNtEvent("XblConfig", message + "\r\n\r\n" + System.Environment.StackTrace, ConfigEvent.Id.COMMON_CONFIG_240);
                throw ae;
            }

            // need an IPAddress
            if (String.IsNullOrEmpty(IPAddressString))
            {
                string message = String.Format(
                    "VirtualInterfaceInfo.SqlConnectionString: VirtualInterface {0} does not have a valid address.",
                    VirtualInterface.ToString());

                ApplicationException ae = new ApplicationException(message);
                LogNtEvent("XblConfig", message + "\r\n\r\n" + System.Environment.StackTrace, ConfigEvent.Id.COMMON_CONFIG_241);
                throw ae;
            }

            // need a DBName
            if ((WebstoreApp == null) || (WebstoreApp.Length == 0))
            {
                string message = String.Format(
                    "VirtualInterfaceInfo.SqlConnectionString: VirtualInterface {0} does not have a database name specified.",
                    VirtualInterface.ToString());

                ApplicationException ae = new ApplicationException(message);
                LogNtEvent("XblConfig", message + "\r\n\r\n" + System.Environment.StackTrace, ConfigEvent.Id.COMMON_CONFIG_242);
                throw ae;
            }

            SqlConnectionStringBuilder  scsb = new SqlConnectionStringBuilder();

            scsb.DataSource = IPAddressString;
            scsb.InitialCatalog = WebstoreApp;
            scsb.IntegratedSecurity=true;
            scsb.ApplicationName = Config.ComponentName;

            // Calculate the timeout of the connection. The value in NPDB is
            // stored in millisecs, but seconds is needed for the builder
            scsb.ConnectTimeout = Timeout / 1000;

            // Calculate the load balance timeout. The value in NPDB is
            // stored in millisecs, but seconds is needed for the builder
            int loadBalanceTimeout = 0;
            if (_loadBalanceTimeout != null)
            {
                loadBalanceTimeout = _loadBalanceTimeout.Value / 1000;
            }
            else if ((Info1 != null) && (Info1.Length > 0))
            {
                loadBalanceTimeout = (int.Parse(Info1)) / 1000;
            }
            if (loadBalanceTimeout > 0)
            {
                scsb.LoadBalanceTimeout = loadBalanceTimeout;
            }

            // optional fields
            if (_minConnectionPoolSize != null)
            {
                scsb.MinPoolSize = _minConnectionPoolSize.Value;
            }
            if (_maxConnectionPoolSize != null)
            {
                scsb.MaxPoolSize = _maxConnectionPoolSize.Value;
            }

            return scsb.ToString();
        }
    }

}

} // end namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\config\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86_config_csfiles_none_12.4.56.0_none_41cd9c3365498336
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86_config_csfiles_no-public-key_12.4.56.0_x-ww_92f314a0
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=config_csfiles
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86_config_csfiles_no-public-key_12.4.56.0_x-ww_92f314a0
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86_config_csfiles_no-public-key_12.4.56.0_x-ww_92f314a0.manifest
XP_MANIFEST_PATH=manifests\x86_config_csfiles_no-public-key_12.4.56.0_x-ww_92f314a0.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86_config_csfiles_no-public-key_12.4.56.0_x-ww_92f314a0.cat
XP_CATALOG_PATH=manifests\x86_config_csfiles_no-public-key_12.4.56.0_x-ww_92f314a0.cat
XP_PAYLOAD_PATH=x86_config_csfiles_no-public-key_12.4.56.0_x-ww_92f314a0
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=config_csfiles,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\dll\Installer.cs ===
using System;
using System.ComponentModel;

/*
using xonline.common.installer;
using xonline.common.mgmt;

namespace xonline.config
{
    [RunInstaller(true)]
    public class CoreInstaller : XomConfiguratorInstall
    {
    }

    [RunInstaller(true)]
    public class CorePerformanceCounterInstaller : XomPerformanceCounterInstall
    {
    }
}*/
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\dll\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\config\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86_config_csfiles_none_12.4.56.0_none_41cd9c3365498336
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86_config_csfiles_no-public-key_12.4.56.0_x-ww_92f314a0
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=config_csfiles
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86_config_csfiles_no-public-key_12.4.56.0_x-ww_92f314a0
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86_config_csfiles_no-public-key_12.4.56.0_x-ww_92f314a0.manifest
XP_MANIFEST_PATH=manifests\x86_config_csfiles_no-public-key_12.4.56.0_x-ww_92f314a0.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86_config_csfiles_no-public-key_12.4.56.0_x-ww_92f314a0.cat
XP_CATALOG_PATH=manifests\x86_config_csfiles_no-public-key_12.4.56.0_x-ww_92f314a0.cat
XP_PAYLOAD_PATH=x86_config_csfiles_no-public-key_12.4.56.0_x-ww_92f314a0
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=config_csfiles,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\dll\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\events\ConfigEvent.cs ===
using System;
using System.Diagnostics;

namespace xonline.common.config {
    internal partial class ConfigEvent {
        public enum Severity : uint {
            Info    = 0x40000000,
            Warning = 0x80000000,
            Error   = 0xC0000000
        }

        public static Severity SeverityFromId(ConfigEvent.Id eventId)
        {
            uint severity = ((uint) eventId) & 0xC0000000;
            Debug.Assert(severity != 0);
            return (Severity) severity;
        }

        public static ushort MessageFromId(ConfigEvent.Id eventId)
        {
            return (ushort) (((uint) eventId) & 0xFFFF);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\events\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

configeventids.cs.xsl: ..\..\core\events\xeventids.xsl

# different xsl for each of the generated  sources

.SUFFIXES: .xml .cs

.xml{$(_OBJ_DIR)}.cs:
    $(EXTPATH)\xonline-ext\xmltransform\xmltransform.exe -xml $< -xsl configeventids.cs.xsl -out $@

.SUFFIXES: .xml

$(CSTARGETS): configeventids.cs.xsl

$(_OBJ_DIR)\ConfigEvent.Id.cs: $(CSTARGETS)
        echo // AUTO GENERATED FILE > $@
        echo // MODIFY THE CORRESPONDING .xml AND .xsl FILES >> $@
        echo /////////////////////////////////////////////////////////////////////////////// >> $@
        echo. >> $@
        echo using System; >> $@
        echo. >> $@
        echo namespace xonline.common.config >> $@
        echo { >> $@
        echo ^ ^ ^ ^ internal partial class ConfigEvent >> $@
        echo ^ ^ ^ ^ { >> $@
        echo ^ ^ ^ ^ ^ ^ ^ ^ public enum Id : uint >> $@
        echo ^ ^ ^ ^ ^ ^ ^ ^ { >> $@
        type $(CSTARGETS) >> $@
        echo. >> $@
        echo ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^// AUTOGENERATED - do not add ids here >> $@
        echo ^ ^ ^ ^ ^ ^ ^ ^ } >> $@
        echo ^ ^ ^ ^ } >> $@
        echo } >> $@
        echo. >> $@
        echo /////////////////////////////////////////////////////////////////////////////// >> $@
        echo // AUTO GENERATED FILE >> $@
        echo // MODIFY THE CORRESPONDING .xml AND .xsl FILES >> $@

ConfigEvent.Id.cs: $(_OBJ_DIR)\ConfigEvent.Id.cs
	copy $(_OBJ_DIR)\ConfigEvent.Id.cs $@

$(_OBJ_DIR)\ConfigEvent.cs: ConfigEvent.cs
	copy ConfigEvent.cs $@

clean:
    del /F /Q $(NTTARGETFILE0) $(CSTARGETS)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\events\obj\common.cs ===
SGINFO_CALL_SOURCE_INVALID = 40001 | ConfigEvent.Severity.Error,
            SGINFO_VERIFY_PRIVILEGE = 40002 | ConfigEvent.Severity.Error,
            XMGMT_FAILED_TO_REGISTER_ASSEMBLY = 40050 | ConfigEvent.Severity.Warning,
            HEALTH_REQUEST_FAILED = 40051 | ConfigEvent.Severity.Error,
            HEALTH_INITIALIZE_INTEROP_FAILED = 40052 | ConfigEvent.Severity.Error,
            HEALTH_REGISTERNATIVEHEALTHBLOCK_FAILED = 40053 | ConfigEvent.Severity.Error,
            HEALTH_LISTENER_CALLBACK_REQUEST_FAILED = 40054 | ConfigEvent.Severity.Error,
            HEALTH_LISTENER_CALLBACK_FAILED = 40055 | ConfigEvent.Severity.Error,
            MSNRR_EXTERNAL_EXCEPTION = 40056 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_INFO_SERVICE_KEYS_CHANGE = 40057 | ConfigEvent.Severity.Info,
            COMMON_CONFIG_SERVICE_KEYS_CHANGE = 40058 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_USING_NPDB_SETTINGS = 40059 | ConfigEvent.Severity.Warning,
            COMMON_CODE_20 = 50845 | ConfigEvent.Severity.Error,
            CRYPTO_GENERAL_ERROR = 50846 | ConfigEvent.Severity.Error,
            COMMON_CODE_22 = 50847 | ConfigEvent.Severity.Error,
            COMMON_CODE_23 = 50848 | ConfigEvent.Severity.Error,
            COMMON_CODE_24 = 50849 | ConfigEvent.Severity.Error,
            MC_APPLICATION_ERROR = 50850 | ConfigEvent.Severity.Error,
            COMMON_CODE_26 = 50851 | ConfigEvent.Severity.Error,
            COMMON_CODE_27 = 50852 | ConfigEvent.Severity.Error,
            COMMON_CODE_28 = 50853 | ConfigEvent.Severity.Error,
            COMMON_CODE_29 = 50854 | ConfigEvent.Severity.Error,
            COMMON_CODE_30 = 50855 | ConfigEvent.Severity.Error,
            COMMON_CODE_31 = 50856 | ConfigEvent.Severity.Error,
            COMMON_CODE_32 = 50857 | ConfigEvent.Severity.Error,
            COMMON_CODE_33 = 50858 | ConfigEvent.Severity.Error,
            COMMON_CODE_34 = 50859 | ConfigEvent.Severity.Error,
            COMMON_CODE_35 = 50860 | ConfigEvent.Severity.Error,
            COMMON_CODE_36 = 50861 | ConfigEvent.Severity.Error,
            COMMON_CODE_37 = 50862 | ConfigEvent.Severity.Error,
            COMMON_CODE_38 = 50863 | ConfigEvent.Severity.Error,
            MC_PLUGIN_ERROR = 50864 | ConfigEvent.Severity.Error,
            MC_PLUGIN_ERROR_1 = 50865 | ConfigEvent.Severity.Error,
            COMMON_CODE_41 = 50866 | ConfigEvent.Severity.Error,
            COMMON_CODE_42 = 50867 | ConfigEvent.Severity.Error,
            COMMON_CODE_43 = 50868 | ConfigEvent.Severity.Error,
            COMMON_CODE_46 = 50871 | ConfigEvent.Severity.Error,
            COMMON_CODE_48 = 50873 | ConfigEvent.Severity.Error,
            QUERY_BAD_PARAMETER = 50876 | ConfigEvent.Severity.Error,
            QUERY_BAD_PARAMETER_1 = 50877 | ConfigEvent.Severity.Error,
            COMMON_CODE_53 = 50878 | ConfigEvent.Severity.Error,
            COMMON_CODE_54 = 50879 | ConfigEvent.Severity.Error,
            COMMON_CODE_55 = 50880 | ConfigEvent.Severity.Error,
            COMMON_CODE_56 = 50881 | ConfigEvent.Severity.Error,
            COMMON_CODE_57 = 50882 | ConfigEvent.Severity.Error,
            COMMON_CODE_58 = 50883 | ConfigEvent.Severity.Error,
            COMMON_CODE_59 = 50884 | ConfigEvent.Severity.Error,
            MC_BAD_PARAMETER = 50885 | ConfigEvent.Severity.Error,
            MC_BAD_PARAMETER_1 = 50886 | ConfigEvent.Severity.Error,
            MC_APPLICATION_ERROR_1 = 50887 | ConfigEvent.Severity.Error,
            MC_APPLICATION_ERROR_2 = 50888 | ConfigEvent.Severity.Error,
            MC_APPLICATION_ERROR_3 = 50889 | ConfigEvent.Severity.Error,
            MC_BAD_PARAMETER_2 = 50890 | ConfigEvent.Severity.Error,
            COMMON_CODE_66 = 50891 | ConfigEvent.Severity.Error,
            MC_BAD_CODE = 50892 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_1 = 50893 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_2 = 50894 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_3 = 50895 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_4 = 50896 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_5 = 50897 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_6 = 50898 | ConfigEvent.Severity.Error,
            COMMON_CODE_74 = 50899 | ConfigEvent.Severity.Error,
            COMMON_CODE_75 = 50900 | ConfigEvent.Severity.Error,
            COMMON_CODE_76 = 50901 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_7 = 50902 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_8 = 50903 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_9 = 50904 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_10 = 50905 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_11 = 50906 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_12 = 50907 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_13 = 50908 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_14 = 50909 | ConfigEvent.Severity.Error,
            COMMON_CODE_85 = 50910 | ConfigEvent.Severity.Error,
            COMMON_CODE_86 = 50911 | ConfigEvent.Severity.Error,
            FORBIDDEN_NAMES_LOAD_FAILURE = 50912 | ConfigEvent.Severity.Error,
            MC_APPLICATION_ERROR_5 = 50913 | ConfigEvent.Severity.Error,
            MC_APPLICATION_ERROR_6 = 50914 | ConfigEvent.Severity.Error,
            MC_APPLICATION_ERROR_7 = 50915 | ConfigEvent.Severity.Error,
            COMMON_CODE_91 = 50916 | ConfigEvent.Severity.Error,
            COMMON_CODE_92 = 50917 | ConfigEvent.Severity.Error,
            MGMT_GENERIC_ERROR = 50918 | ConfigEvent.Severity.Error,
            MGMT_GENERIC_ERROR_1 = 50919 | ConfigEvent.Severity.Error,
            MGMT_GENERIC_ERROR_2 = 50920 | ConfigEvent.Severity.Error,
            MGMT_GENERIC_ERROR_3 = 50921 | ConfigEvent.Severity.Error,
            COMMON_CODE_97 = 50922 | ConfigEvent.Severity.Error,
            MGMT_GENERIC_ERROR_4 = 50923 | ConfigEvent.Severity.Error,
            COMMON_CODE_99 = 50924 | ConfigEvent.Severity.Error,
            COMMON_CODE_100 = 50925 | ConfigEvent.Severity.Error,
            COMMON_CODE_101 = 50926 | ConfigEvent.Severity.Error,
            COMMON_CODE_102 = 50927 | ConfigEvent.Severity.Error,
            COMMON_CODE_103 = 50928 | ConfigEvent.Severity.Error,
            COMMON_CODE_104 = 50929 | ConfigEvent.Severity.Error,
            COMMON_CODE_105 = 50930 | ConfigEvent.Severity.Error,
            COMMON_CODE_106 = 50931 | ConfigEvent.Severity.Error,
            COMMON_CODE_107 = 50932 | ConfigEvent.Severity.Error,
            COMMON_CODE_108 = 50933 | ConfigEvent.Severity.Error,
            COMMON_CODE_109 = 50934 | ConfigEvent.Severity.Error,
            HEALTH_GENERIC_ERROR_1 = 50935 | ConfigEvent.Severity.Error,
            SQL_EXECUTE_READER = 50936 | ConfigEvent.Severity.Error,
            SQL_EXECUTE_READER_BEHAVIOR = 50937 | ConfigEvent.Severity.Error,
            SQL_EXECUTE_NON_QUERY = 50938 | ConfigEvent.Severity.Error,
            SQL_EXECUTE_SCALAR = 50939 | ConfigEvent.Severity.Error,
            COUNTRY_LIST_MISSING = 50940 | ConfigEvent.Severity.Error,
            COMMON_CODE_117 = 50942 | ConfigEvent.Severity.Error,
            COMMON_CODE_118 = 50943 | ConfigEvent.Severity.Error,
            COMMON_CODE_119 = 50944 | ConfigEvent.Severity.Error,
            COMMON_CODE_120 = 50945 | ConfigEvent.Severity.Error,
            COMMON_CODE_121 = 50946 | ConfigEvent.Severity.Error,
            COMMON_CODE_122 = 50947 | ConfigEvent.Severity.Error,
            MUSICNET_EXTERNAL_EXCEPTION = 50958 | ConfigEvent.Severity.Error,
            COMMON_CODE_146 = 50971 | ConfigEvent.Severity.Error,
            COMMON_CODE_147 = 50972 | ConfigEvent.Severity.Error,
            COMMON_CODE_148 = 50973 | ConfigEvent.Severity.Error,
            COMMON_CODE_149 = 50974 | ConfigEvent.Severity.Error,
            COMMON_CODE_150 = 50975 | ConfigEvent.Severity.Error,
            COMMON_CODE_151 = 50976 | ConfigEvent.Severity.Error,
            COMMON_CODE_152 = 50977 | ConfigEvent.Severity.Error,
            COMMON_CODE_153 = 50978 | ConfigEvent.Severity.Error,
            COMMON_CODE_154 = 50979 | ConfigEvent.Severity.Error,
            COMMON_CODE_155 = 50980 | ConfigEvent.Severity.Error,
            COMMON_CODE_156 = 50981 | ConfigEvent.Severity.Error,
            COMMON_CODE_157 = 50982 | ConfigEvent.Severity.Error,
            COMMON_CODE_158 = 50983 | ConfigEvent.Severity.Error,
            COMMON_CODE_159 = 50984 | ConfigEvent.Severity.Error,
            COMMON_CODE_160 = 50985 | ConfigEvent.Severity.Error,
            COMMON_CODE_161 = 50986 | ConfigEvent.Severity.Error,
            COMMON_CODE_162 = 50987 | ConfigEvent.Severity.Error,
            COMMON_CODE_163 = 50988 | ConfigEvent.Severity.Error,
            COMMON_CODE_164 = 50989 | ConfigEvent.Severity.Error,
            COMMON_CODE_165 = 50990 | ConfigEvent.Severity.Error,
            COMMON_CODE_166 = 50991 | ConfigEvent.Severity.Error,
            COMMON_CODE_167 = 50992 | ConfigEvent.Severity.Error,
            COMMON_CODE_168 = 50993 | ConfigEvent.Severity.Error,
            COMMON_CODE_169 = 50994 | ConfigEvent.Severity.Error,
            COMMON_CODE_170 = 50995 | ConfigEvent.Severity.Error,
            COMMON_CODE_171 = 50996 | ConfigEvent.Severity.Error,
            COMMON_CODE_172 = 50997 | ConfigEvent.Severity.Error,
            COMMON_CODE_173 = 50998 | ConfigEvent.Severity.Error,
            COMMON_CODE_174 = 50999 | ConfigEvent.Severity.Error,
            COMMON_CODE_175 = 51000 | ConfigEvent.Severity.Error,
            COMMON_CODE_176 = 51001 | ConfigEvent.Severity.Error,
            COMMON_CODE_177 = 51002 | ConfigEvent.Severity.Error,
            COMMON_CODE_178 = 51003 | ConfigEvent.Severity.Error,
            COMMON_CODE_179 = 51004 | ConfigEvent.Severity.Error,
            COMMON_CODE_180 = 51005 | ConfigEvent.Severity.Error,
            COMMON_CODE_181 = 51006 | ConfigEvent.Severity.Error,
            COMMON_CODE_182 = 51007 | ConfigEvent.Severity.Error,
            COMMON_CODE_183 = 51008 | ConfigEvent.Severity.Error,
            COMMON_CODE_184 = 51009 | ConfigEvent.Severity.Error,
            COMMON_CODE_185 = 51010 | ConfigEvent.Severity.Error,
            WEBSTORE_EXECUTE_ERROR = 51011 | ConfigEvent.Severity.Error,
            WEBSTORE_EXECUTE_TIMEOUT_ERROR = 51012 | ConfigEvent.Severity.Error,
            WEBSTORE_EXECUTE_DEADLOCK_ERROR = 51013 | ConfigEvent.Severity.Error,
            COMMON_CODE_189 = 51014 | ConfigEvent.Severity.Error,
            COMMON_CODE_190 = 51015 | ConfigEvent.Severity.Error,
            COMMON_CODE_191 = 51016 | ConfigEvent.Severity.Error,
            COMMON_CODE_192 = 51017 | ConfigEvent.Severity.Error,
            COMMON_CODE_193 = 51018 | ConfigEvent.Severity.Error,
            COMMON_CODE_194 = 51019 | ConfigEvent.Severity.Error,
            COMMON_CODE_195 = 51020 | ConfigEvent.Severity.Error,
            COMMON_CODE_196 = 51021 | ConfigEvent.Severity.Error,
            COMMON_CODE_197 = 51022 | ConfigEvent.Severity.Error,
            COMMON_CODE_198 = 51023 | ConfigEvent.Severity.Error,
            COMMON_CODE_199 = 51024 | ConfigEvent.Severity.Error,
            COMMON_CODE_200 = 51025 | ConfigEvent.Severity.Error,
            DEPRECATED_SYNCCAST_EXTERNAL_EXCEPTION = 51030 | ConfigEvent.Severity.Error,
            COMMON_CODE_208 = 51033 | ConfigEvent.Severity.Error,
            COMMON_CODE_209 = 51034 | ConfigEvent.Severity.Error,
            COMMON_CODE_210 = 51035 | ConfigEvent.Severity.Error,
            COMMON_CODE_211 = 51036 | ConfigEvent.Severity.Error,
            COMMON_CODE_212 = 51037 | ConfigEvent.Severity.Error,
            COMMON_CODE_213 = 51038 | ConfigEvent.Severity.Error,
            COMMON_CODE_214 = 51039 | ConfigEvent.Severity.Error,
            COMMON_CODE_215 = 51040 | ConfigEvent.Severity.Error,
            COMMON_CODE_216 = 51041 | ConfigEvent.Severity.Error,
            COMMON_CODE_217 = 51042 | ConfigEvent.Severity.Error,
            COMMON_CODE_218 = 51043 | ConfigEvent.Severity.Error,
            COMMON_CODE_219 = 51044 | ConfigEvent.Severity.Error,
            COMMON_CODE_220 = 51045 | ConfigEvent.Severity.Error,
            COMMON_CODE_221 = 51046 | ConfigEvent.Severity.Error,
            COMMON_CODE_222 = 51047 | ConfigEvent.Severity.Error,
            COMMON_CODE_223 = 51048 | ConfigEvent.Severity.Error,
            COMMON_CODE_224 = 51049 | ConfigEvent.Severity.Error,
            COMMON_CODE_225 = 51050 | ConfigEvent.Severity.Error,
            COMMON_CODE_226 = 51051 | ConfigEvent.Severity.Error,
            COMMON_CODE_227 = 51052 | ConfigEvent.Severity.Error,
            COMMON_CODE_228 = 51053 | ConfigEvent.Severity.Error,
            DEPRECATED_COMMON_CODE_229 = 51054 | ConfigEvent.Severity.Error,
            DEPRECATED_COMMON_CODE_230 = 51055 | ConfigEvent.Severity.Error,
            COMMON_CODE_231 = 51056 | ConfigEvent.Severity.Error,
            COMMON_CODE_232 = 51057 | ConfigEvent.Severity.Error,
            WMIS_EXTERNAL_EXCEPTION = 51058 | ConfigEvent.Severity.Error,
            COMMON_CODE_MATCH_STARTMIGRATE_FAILED = 51059 | ConfigEvent.Severity.Error,
            COMMON_CODE_MATCH_MIGRATESTATUS_FAILED_SPROC = 51060 | ConfigEvent.Severity.Error,
            COMMON_CODE_MATCH_UPDLTC_TV_FAILED = 51061 | ConfigEvent.Severity.Error,
            COMMON_CODE_MATCH_UPDLTC_NPDB_FAILED = 51062 | ConfigEvent.Severity.Error,
            COMMON_CODE_LSPLIB_SQLEXCEPTION = 51063 | ConfigEvent.Severity.Error,
            HEALTH_REPORT_RED = 51064 | ConfigEvent.Severity.Error,
            HEALTH_ENGINE_FAILURE = 51065 | ConfigEvent.Severity.Error,
            FEAPP_INITIALIZATION_METHOD_FAILED = 51066 | ConfigEvent.Severity.Error,
            FEAPP_INITIALIZATION_METHOD_NOT_FOUND = 51067 | ConfigEvent.Severity.Error,
            FAST_FAIL_MISSING_COUNTERS = 51068 | ConfigEvent.Severity.Error,
            FAST_FAIL_MISSING_RESOURCE = 51069 | ConfigEvent.Severity.Error,
            FEAPP_COMPRESSION_ERROR = 51070 | ConfigEvent.Severity.Error,
            UNHANDLED_THREAD_EXCEPTION = 51071 | ConfigEvent.Severity.Error,
            FEAPP_INIT_FAILURE = 51072 | ConfigEvent.Severity.Error,
            FORBIDDEN_NAMES_EXCLUDED_TITLES_CONFIG_ERROR = 51073 | ConfigEvent.Severity.Error,
            COMMON_COMM_6 = 51231 | ConfigEvent.Severity.Error,
            COMMON_COMM_7 = 51232 | ConfigEvent.Severity.Error,
            COMMON_COMM_8 = 51233 | ConfigEvent.Severity.Error,
            COMMON_COMM_9 = 51234 | ConfigEvent.Severity.Error,
            COMMON_COMM_10 = 51235 | ConfigEvent.Severity.Error,
            COMMON_COMM_11 = 51236 | ConfigEvent.Severity.Error,
            COMMON_COMM_12 = 51237 | ConfigEvent.Severity.Error,
            COMMON_COMM_13 = 51238 | ConfigEvent.Severity.Error,
            XCACHE_CLIENT_BROKEN_PIPE = 51239 | ConfigEvent.Severity.Error,
            XCACHE_CLIENT_BROKEN_PIPE_1 = 51240 | ConfigEvent.Severity.Error,
            XCACHE_CLIENT_BROKEN_PIPE_2 = 51241 | ConfigEvent.Severity.Error,
            XCACHE_CLIENT_BROKEN_PIPE_3 = 51242 | ConfigEvent.Severity.Error,
            XCACHE_CLIENT_BROKEN_PIPE_4 = 51243 | ConfigEvent.Severity.Error,
            XCACHE_SERVER_BUSY = 51244 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE = 51245 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_1 = 51246 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_2 = 51247 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_3 = 51248 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_4 = 51249 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_5 = 51250 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_6 = 51251 | ConfigEvent.Severity.Error,
            PIPE_FAILURE = 51252 | ConfigEvent.Severity.Error,
            PIPE_FAILURE_1 = 51253 | ConfigEvent.Severity.Error,
            PIPE_FAILURE_2 = 51254 | ConfigEvent.Severity.Error,
            AUTHDATA_SG_COMMUNICATION_ERROR = 51255 | ConfigEvent.Severity.Error,
            COMMON_COMM_31 = 51256 | ConfigEvent.Severity.Error,
            AUTHDATA_SG_COMMUNICATION_ERROR_1 = 51257 | ConfigEvent.Severity.Error,
            MC_XRL_REQUEST_ERROR = 51258 | ConfigEvent.Severity.Error,
            COMMON_COMM_34 = 51259 | ConfigEvent.Severity.Error,
            COMMON_COMM_35 = 51260 | ConfigEvent.Severity.Error,
            COMMON_COMM_36 = 51261 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_7 = 51262 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_RESPONSE_1 = 51263 | ConfigEvent.Severity.Error,
            FORBIDDEN_NAMES_LOAD_SUCCESS = 51264 | ConfigEvent.Severity.Info,
            FORBIDDEN_NAMES_UNVETTED_STRING = 51265 | ConfigEvent.Severity.Error,
            MUSICNET_ACCOUNT_CREATE_FAILED = 51354 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_69 = 51394 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_70 = 51395 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_71 = 51396 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_72 = 51397 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_73 = 51398 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_74 = 51399 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_75 = 51400 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_76 = 51401 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_77 = 51402 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_78 = 51403 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_79 = 51404 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_80 = 51405 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_81 = 51406 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_82 = 51407 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_83 = 51408 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_84 = 51409 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_85 = 51410 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_86 = 51411 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_87 = 51412 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_88 = 51413 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_89 = 51414 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_90 = 51415 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_91 = 51416 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_92 = 51417 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_93 = 51418 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_94 = 51419 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_95 = 51420 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_96 = 51421 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_97 = 51422 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_98 = 51423 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_99 = 51424 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_100 = 51425 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_101 = 51426 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_102 = 51427 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_103 = 51428 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_104 = 51429 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_105 = 51430 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_106 = 51431 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_107 = 51432 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_108 = 51433 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_109 = 51434 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_110 = 51435 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_111 = 51436 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_112 = 51437 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_113 = 51438 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_114 = 51439 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_115 = 51440 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_116 = 51441 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_117 = 51442 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_118 = 51443 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_119 = 51444 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_120 = 51445 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_121 = 51446 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_122 = 51447 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_123 = 51448 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_124 = 51449 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_125 = 51450 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_126 = 51451 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_127 = 51452 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_128 = 51453 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_129 = 51454 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_130 = 51455 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_131 = 51456 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_132 = 51457 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_133 = 51458 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_134 = 51459 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_135 = 51460 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_136 = 51461 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_137 = 51462 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_138 = 51463 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_139 = 51464 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_140 = 51465 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_141 = 51466 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_142 = 51467 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_143 = 51468 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_144 = 51469 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_145 = 51470 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_146 = 51471 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_147 = 51472 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_148 = 51473 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_149 = 51474 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_150 = 51475 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_151 = 51476 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_152 = 51477 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_153 = 51478 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_154 = 51479 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_155 = 51480 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_156 = 51481 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_157 = 51482 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_158 = 51483 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_159 = 51484 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_160 = 51485 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_161 = 51486 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_162 = 51487 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_163 = 51488 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_164 = 51489 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_165 = 51490 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_166 = 51491 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_167 = 51492 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_168 = 51493 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_169 = 51494 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_170 = 51495 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_171 = 51496 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_172 = 51497 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_173 = 51498 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_174 = 51499 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_175 = 51500 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_176 = 51501 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_177 = 51502 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_178 = 51503 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_179 = 51504 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_180 = 51505 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_181 = 51506 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_182 = 51507 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_183 = 51508 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_184 = 51509 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_185 = 51510 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_186 = 51511 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_187 = 51512 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_188 = 51513 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_189 = 51514 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_190 = 51515 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_191 = 51516 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_192 = 51517 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_193 = 51518 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_194 = 51519 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_195 = 51520 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_196 = 51521 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_197 = 51522 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_198 = 51523 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_199 = 51524 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_200 = 51525 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_201 = 51526 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_202 = 51527 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_203 = 51528 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_204 = 51529 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_205 = 51530 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_206 = 51531 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_207 = 51532 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_208 = 51533 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_209 = 51534 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_210 = 51535 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_211 = 51536 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_212 = 51537 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_213 = 51538 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_214 = 51539 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_215 = 51540 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_216 = 51541 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_217 = 51542 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_218 = 51543 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_219 = 51544 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_220 = 51545 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_221 = 51546 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_222 = 51547 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_223 = 51548 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_224 = 51549 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_225 = 51550 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_226 = 51551 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_227 = 51552 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_228 = 51553 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_229 = 51554 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_230 = 51555 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_231 = 51556 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_232 = 51557 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_233 = 51558 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_234 = 51559 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_235 = 51560 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_236 = 51561 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_237 = 51562 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_238 = 51563 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_239 = 51564 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_240 = 51565 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_241 = 51566 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_242 = 51567 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_243 = 51568 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_244 = 51569 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_245 = 51570 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_246 = 51571 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_247 = 51572 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_248 = 51573 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_249 = 51574 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_250 = 51575 | ConfigEvent.Severity.Error,
            DEPRECATED_COMMON_CONFIG_251 = 51576 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_252 = 51577 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_253 = 51578 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_254 = 51579 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_255 = 51580 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_256 = 51581 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_257 = 51582 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_258 = 51583 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_259 = 51584 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_260 = 51585 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_261 = 51586 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_262 = 51587 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_263 = 51588 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_264 = 51589 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_265 = 51590 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_266 = 51591 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_PIPE_HANDLE_DISPOSED = 51593 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_270 = 51595 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_272 = 51597 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_274 = 51599 | ConfigEvent.Severity.Error,
            MC_SGINFO_IS_OFF = 51600 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_276 = 51601 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_277 = 51602 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_278 = 51603 | ConfigEvent.Severity.Error,
            MC_BAD_CONFIG_DATA_4 = 51604 | ConfigEvent.Severity.Error,
            MC_BAD_CONFIG_DATA_5 = 51605 | ConfigEvent.Severity.Error,
            MC_BAD_CONFIG_DATA_6 = 51606 | ConfigEvent.Severity.Error,
            MC_BAD_CONFIG_DATA_7 = 51607 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_283 = 51608 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_284 = 51609 | ConfigEvent.Severity.Error,
            MC_BAD_CONFIG_DATA_8 = 51610 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_286 = 51611 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_287 = 51612 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_288 = 51613 | ConfigEvent.Severity.Error,
            MGMT_CRITICAL_ERROR = 51614 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE = 51615 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_291 = 51616 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_292 = 51617 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_293 = 51618 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE_1 = 51619 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE_2 = 51620 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE_3 = 51621 | ConfigEvent.Severity.Error,
            MGMT_INIT_WARNING = 51622 | ConfigEvent.Severity.Warning,
            MGMT_INIT_FAILURE_4 = 51623 | ConfigEvent.Severity.Error,
            MGMT_SRV_DISCONNECT = 51624 | ConfigEvent.Severity.Error,
            MGMT_SRV_DISCONNECT_1 = 51625 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE_5 = 51626 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE_6 = 51627 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING = 51628 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_1 = 51629 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_2 = 51630 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_3 = 51631 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_307 = 51632 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_4 = 51633 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_5 = 51634 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_310 = 51635 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_311 = 51636 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_6 = 51637 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_7 = 51638 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_8 = 51639 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_9 = 51640 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_10 = 51641 | ConfigEvent.Severity.Error,
            MGMT_REMOTE_TARGET_WARNING = 51642 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_318 = 51643 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_319 = 51644 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_320 = 51645 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_321 = 51646 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_322 = 51647 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_323 = 51648 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_324 = 51649 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_325 = 51650 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_326 = 51651 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_327 = 51652 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_328 = 51653 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_329 = 51654 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_330 = 51655 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_331 = 51656 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_332 = 51657 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_333 = 51658 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_334 = 51659 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_335 = 51660 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_336 = 51661 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_337 = 51662 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_338 = 51663 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_339 = 51664 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE_7 = 51665 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE_8 = 51666 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE_9 = 51667 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_INTEROP_REPORTMESSAGECOMPONENTID_FAILURE = 51668 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_INTEROP_ADDREPORTMESSAGECOMPONENTIDMAPPING_FAILURE = 51669 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_INTEROP_REPORTMESSAGECLEANSERVIRTUALINTERFACE_FAILURE = 51670 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_340 = 51671 | ConfigEvent.Severity.Error,
            MGMT_READ_FAILURE = 51672 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_BAD_XLAST_FILE = 51674 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_LTC_TIB_COUNTS_OUTOFSYNC = 51675 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_LTC_TIB_SERVERS_OUTOFSYNC_1 = 51676 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_LTC_TIB_SERVERS_OUTOFSYNC_2 = 51677 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_LTC_TIB_OUTOFSYNC = 51678 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_UNEXPECTED_MODE_IN_XLAST = 51679 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_MISSING_MODE_IN_XLAST = 51680 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_ENDMIGRATE_FAILED_NONEXT = 51681 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_ENDMIGRATE_FAILED_MISSING_BUCKET = 51682 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_EXPMIGRATE_FAILED_NOTSTARTED = 51683 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_ENDMIGRATE_FAILED_LTC_TIB_OUTOFSYNC = 51684 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_ADDRR_FAILED_MISSING_BUCKET = 51685 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_ADDRR_FAILED_DUPE_SERVER = 51686 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_UPDLTC_INVALID_LTC = 51687 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_DEFAULTBUCKETS_OVERWRITE = 51688 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_CONFIRMSERVER_BADSERVER = 51689 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_PREPLTC_TID_MISMATCH = 51690 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_NO_PARTMAP = 51691 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_PREPCONFIG_TID_MISMATCH = 51692 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_GET_REFRESH_FUNCTIONS = 51693 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_HEALTH_CHANGE = 51694 | ConfigEvent.Severity.Error,
            COMMON_SETTING_BATCH_CONSTRUCTION = 51695 | ConfigEvent.Severity.Error,
            COMMON_SETTING_BATCH_QUERY = 51696 | ConfigEvent.Severity.Error,
            COMMON_SETTING_BATCH_SETTING_DELETED = 51697 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_REGISTER_DYNAMIC_SETTING_FAILURE = 51698 | ConfigEvent.Severity.Error,
            COMMON_BUCKETS_BATCH_CONSTRUCTION = 51699 | ConfigEvent.Severity.Error,
            COMMON_BUCKET_BATCH_QUERY = 51700 | ConfigEvent.Severity.Error,
            COMMON_BUCKET_BATCH_DELETED = 51701 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_LIVE_REGISTRY_SETTINGS_CHANGE = 51702 | ConfigEvent.Severity.Error,
            PERFORMANCE_COUNTERS_0 = 51703 | ConfigEvent.Severity.Error,
            COMMON_HACK_4 = 52329 | ConfigEvent.Severity.Warning,
            COMMON_HACK_5 = 52330 | ConfigEvent.Severity.Warning,
            COMMON_HACK_6 = 52331 | ConfigEvent.Severity.Warning,
            COMMON_HACK_7 = 52332 | ConfigEvent.Severity.Warning,
            COMMON_HACK_8 = 52333 | ConfigEvent.Severity.Warning,
            COMMON_HACK_9 = 52334 | ConfigEvent.Severity.Warning,
            COMMON_HACK_10 = 52335 | ConfigEvent.Severity.Warning,
            COMMON_HACK_11 = 52336 | ConfigEvent.Severity.Warning,
            COMMON_HACK_12 = 52337 | ConfigEvent.Severity.Warning,
            COMMON_HACK_13 = 52338 | ConfigEvent.Severity.Warning,
            COMMON_HACK_14 = 52339 | ConfigEvent.Severity.Warning,
            COMMON_HACK_15 = 52340 | ConfigEvent.Severity.Warning,
            COMMON_HACK_16 = 52341 | ConfigEvent.Severity.Warning,
            COMMON_HACK_17 = 52342 | ConfigEvent.Severity.Warning,
            COMMON_HACK_18 = 52343 | ConfigEvent.Severity.Warning,
            COMMON_HACK_19 = 52344 | ConfigEvent.Severity.Warning,
            COMMON_HACK_20 = 52345 | ConfigEvent.Severity.Warning,
            COMMON_HACK_21 = 52346 | ConfigEvent.Severity.Warning,
            COMMON_HACK_22 = 52347 | ConfigEvent.Severity.Warning,
            COMMON_HACK_23 = 52348 | ConfigEvent.Severity.Warning,
            COMMON_HACK_24 = 52349 | ConfigEvent.Severity.Warning,
            COMMON_HACK_25 = 52350 | ConfigEvent.Severity.Warning,
            COMMON_HACK_26 = 52351 | ConfigEvent.Severity.Warning,
            COMMON_HACK_27 = 52352 | ConfigEvent.Severity.Warning,
            COMMON_HACK_28 = 52353 | ConfigEvent.Severity.Warning,
            COMMON_HACK_33 = 52358 | ConfigEvent.Severity.Warning,
            COMMON_HACK_34 = 52359 | ConfigEvent.Severity.Warning,
            COMMON_HACK_40 = 52365 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS = 52366 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_1 = 52367 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_2 = 52368 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_3 = 52369 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_4 = 52370 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_5 = 52371 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_6 = 52372 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_7 = 52373 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_BUNDLED_AUTHDATA = 52374 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR = 52375 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_1 = 52376 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_2 = 52377 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_HTTP_AUTHDATA = 52378 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_SG_AUTHDATA = 52379 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_SG_AUTHDATA_1 = 52380 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_SG_AUTHDATA_2 = 52381 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_SG_AUTHDATA_3 = 52382 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_SG_AUTHDATA_4 = 52383 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_SG_AUTHDATA_5 = 52384 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_3 = 52385 | ConfigEvent.Severity.Warning,
            COMMON_HACK_61 = 52386 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_4 = 52387 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_5 = 52388 | ConfigEvent.Severity.Warning,
            COMMON_HACK_64 = 52389 | ConfigEvent.Severity.Warning,
            COMMON_HACK_65 = 52390 | ConfigEvent.Severity.Warning,
            COMMON_HACK_66 = 52391 | ConfigEvent.Severity.Warning,
            COMMON_HACK_67 = 52392 | ConfigEvent.Severity.Warning,
            COMMON_HACK_68 = 52393 | ConfigEvent.Severity.Warning,
            COMMON_HACK_69 = 52394 | ConfigEvent.Severity.Warning,
            COMMON_HACK_70 = 52395 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_6 = 52396 | ConfigEvent.Severity.Warning,
            COMMON_HACK_72 = 52397 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_7 = 52398 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_8 = 52399 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_9 = 52400 | ConfigEvent.Severity.Warning,
            COMMON_HACK_76 = 52401 | ConfigEvent.Severity.Warning,
            COMMON_HACK_77 = 52402 | ConfigEvent.Severity.Warning,
            COMMON_HACK_78 = 52403 | ConfigEvent.Severity.Warning,
            COMMON_HACK_79 = 52404 | ConfigEvent.Severity.Warning,
            COMMON_HACK_80 = 52405 | ConfigEvent.Severity.Warning,
            HACK_CONTENT_NOT_FOUND = 52406 | ConfigEvent.Severity.Warning,
            USER_AGENT_MISSING = 52412 | ConfigEvent.Severity.Error,
            USER_AGENT_INVALID = 52413 | ConfigEvent.Severity.Error,
            AAINFO_INVALID_REQUEST = 52414 | ConfigEvent.Severity.Error,
            COMMON_HACK_81 = 52415 | ConfigEvent.Severity.Error,
            AUTHDATA_VERIFICATION_ERROR_10 = 52416 | ConfigEvent.Severity.Error,
            COMMON_INFO_4 = 52529 | ConfigEvent.Severity.Info,
            COMMON_INFO_5 = 52530 | ConfigEvent.Severity.Info,
            COMMON_INFO_6 = 52531 | ConfigEvent.Severity.Info,
            COMMON_INFO_7 = 52532 | ConfigEvent.Severity.Info,
            COMMON_INFO_8 = 52533 | ConfigEvent.Severity.Info,
            COMMON_INFO_9 = 52534 | ConfigEvent.Severity.Info,
            COMMON_INFO_10 = 52535 | ConfigEvent.Severity.Info,
            COMMON_INFO_11 = 52536 | ConfigEvent.Severity.Info,
            COMMON_INFO_12 = 52537 | ConfigEvent.Severity.Info,
            COMMON_INFO_13 = 52538 | ConfigEvent.Severity.Info,
            COMMON_INFO_14 = 52539 | ConfigEvent.Severity.Info,
            COMMON_INFO_15 = 52540 | ConfigEvent.Severity.Info,
            COMMON_INFO_16 = 52541 | ConfigEvent.Severity.Info,
            COMMON_INFO_17 = 52542 | ConfigEvent.Severity.Info,
            COMMON_INFO_18 = 52543 | ConfigEvent.Severity.Info,
            COMMON_INFO_19 = 52544 | ConfigEvent.Severity.Info,
            COMMON_INFO_20 = 52545 | ConfigEvent.Severity.Info,
            COMMON_INFO_21 = 52546 | ConfigEvent.Severity.Info,
            COMMON_INFO_22 = 52547 | ConfigEvent.Severity.Info,
            COMMON_INFO_23 = 52548 | ConfigEvent.Severity.Info,
            COMMON_INFO_24 = 52549 | ConfigEvent.Severity.Info,
            COMMON_INFO_25 = 52550 | ConfigEvent.Severity.Info,
            COMMON_INFO_26 = 52551 | ConfigEvent.Severity.Info,
            COMMON_INFO_27 = 52552 | ConfigEvent.Severity.Info,
            COMMON_INFO_28 = 52553 | ConfigEvent.Severity.Info,
            COMMON_INFO_29 = 52554 | ConfigEvent.Severity.Info,
            COMMON_INFO_30 = 52555 | ConfigEvent.Severity.Info,
            COMMON_INFO_31 = 52556 | ConfigEvent.Severity.Info,
            COMMON_INFO_32 = 52557 | ConfigEvent.Severity.Info,
            COMMON_INFO_33 = 52558 | ConfigEvent.Severity.Info,
            COMMON_INFO_34 = 52559 | ConfigEvent.Severity.Info,
            COMMON_INFO_35 = 52560 | ConfigEvent.Severity.Info,
            COMMON_INFO_36 = 52561 | ConfigEvent.Severity.Info,
            COMMON_INFO_37 = 52562 | ConfigEvent.Severity.Info,
            COMMON_INFO_38 = 52563 | ConfigEvent.Severity.Info,
            COMMON_INFO_39 = 52564 | ConfigEvent.Severity.Info,
            COMMON_INFO_40 = 52565 | ConfigEvent.Severity.Info,
            MC_APPDOMAIN_STARTED = 52566 | ConfigEvent.Severity.Info,
            MC_APPDOMAIN_STARTED_1 = 52567 | ConfigEvent.Severity.Info,
            COMMON_INFO_43 = 52568 | ConfigEvent.Severity.Info,
            COMMON_INFO_44 = 52569 | ConfigEvent.Severity.Info,
            COMMON_INFO_45 = 52570 | ConfigEvent.Severity.Info,
            COMMON_INFO_46 = 52571 | ConfigEvent.Severity.Info,
            COMMON_INFO_47 = 52572 | ConfigEvent.Severity.Info,
            COMMON_INFO_48 = 52573 | ConfigEvent.Severity.Info,
            MGMT_SRV_CONNECTED = 52574 | ConfigEvent.Severity.Info,
            REPORTINGTARGET_RECONNECTED = 52575 | ConfigEvent.Severity.Info,
            CONFIG_CHANGE_PROCESSED = 52576 | ConfigEvent.Severity.Info,
            HEALTH_REPORT_GREEN = 52577 | ConfigEvent.Severity.Info,
            COMMON_CONFIG_INFO_HEALTH_CHANGE = 52578 | ConfigEvent.Severity.Info,
            COMMON_SETTING_BATCH_COUNT = 52579 | ConfigEvent.Severity.Info,
            COMMON_BUCKET_COUNT = 52580 | ConfigEvent.Severity.Info,
            COMMON_CONFIG_INFO_LIVE_REGISTRY_SETTINGS_CHANGE = 52581 | ConfigEvent.Severity.Info,
            COMMON_CONFIG_INFO_CONFIG_BLOBS_CHANGE = 52582 | ConfigEvent.Severity.Info,
            COMMON_CONFIG_INFO_ETX_MANIFEST_CHANGE = 52583 | ConfigEvent.Severity.Info,
            COMMON_WARNING_0 = 52725 | ConfigEvent.Severity.Warning,
            HEALTH_REPORT_YELLOW = 52726 | ConfigEvent.Severity.Warning,
            AUDIT_INVALID_SUBSYSTEM = 63800 | ConfigEvent.Severity.Error,
            AUDIT_NO_SETTING = 63801 | ConfigEvent.Severity.Error,
            AUDIT_LOG_FAILURE = 63802 | ConfigEvent.Severity.Error,
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\events\obj\ConfigEvent.cs ===
using System;
using System.Diagnostics;

namespace xonline.common.config {
    internal partial class ConfigEvent {
        public enum Severity : uint {
            Info    = 0x40000000,
            Warning = 0x80000000,
            Error   = 0xC0000000
        }

        public static Severity SeverityFromId(ConfigEvent.Id eventId)
        {
            uint severity = ((uint) eventId) & 0xC0000000;
            Debug.Assert(severity != 0);
            return (Severity) severity;
        }

        public static ushort MessageFromId(ConfigEvent.Id eventId)
        {
            return (ushort) (((uint) eventId) & 0xFFFF);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\events\ConfigEvent.Id.cs ===
// AUTO GENERATED FILE 
// MODIFY THE CORRESPONDING .xml AND .xsl FILES 
/////////////////////////////////////////////////////////////////////////////// 
 
using System; 
 
namespace xonline.common.config 
{ 
    internal partial class ConfigEvent 
    { 
        public enum Id : uint 
        { 
            SGINFO_CALL_SOURCE_INVALID = 40001 | ConfigEvent.Severity.Error,
            SGINFO_VERIFY_PRIVILEGE = 40002 | ConfigEvent.Severity.Error,
            XMGMT_FAILED_TO_REGISTER_ASSEMBLY = 40050 | ConfigEvent.Severity.Warning,
            HEALTH_REQUEST_FAILED = 40051 | ConfigEvent.Severity.Error,
            HEALTH_INITIALIZE_INTEROP_FAILED = 40052 | ConfigEvent.Severity.Error,
            HEALTH_REGISTERNATIVEHEALTHBLOCK_FAILED = 40053 | ConfigEvent.Severity.Error,
            HEALTH_LISTENER_CALLBACK_REQUEST_FAILED = 40054 | ConfigEvent.Severity.Error,
            HEALTH_LISTENER_CALLBACK_FAILED = 40055 | ConfigEvent.Severity.Error,
            MSNRR_EXTERNAL_EXCEPTION = 40056 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_INFO_SERVICE_KEYS_CHANGE = 40057 | ConfigEvent.Severity.Info,
            COMMON_CONFIG_SERVICE_KEYS_CHANGE = 40058 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_USING_NPDB_SETTINGS = 40059 | ConfigEvent.Severity.Warning,
            COMMON_CODE_20 = 50845 | ConfigEvent.Severity.Error,
            CRYPTO_GENERAL_ERROR = 50846 | ConfigEvent.Severity.Error,
            COMMON_CODE_22 = 50847 | ConfigEvent.Severity.Error,
            COMMON_CODE_23 = 50848 | ConfigEvent.Severity.Error,
            COMMON_CODE_24 = 50849 | ConfigEvent.Severity.Error,
            MC_APPLICATION_ERROR = 50850 | ConfigEvent.Severity.Error,
            COMMON_CODE_26 = 50851 | ConfigEvent.Severity.Error,
            COMMON_CODE_27 = 50852 | ConfigEvent.Severity.Error,
            COMMON_CODE_28 = 50853 | ConfigEvent.Severity.Error,
            COMMON_CODE_29 = 50854 | ConfigEvent.Severity.Error,
            COMMON_CODE_30 = 50855 | ConfigEvent.Severity.Error,
            COMMON_CODE_31 = 50856 | ConfigEvent.Severity.Error,
            COMMON_CODE_32 = 50857 | ConfigEvent.Severity.Error,
            COMMON_CODE_33 = 50858 | ConfigEvent.Severity.Error,
            COMMON_CODE_34 = 50859 | ConfigEvent.Severity.Error,
            COMMON_CODE_35 = 50860 | ConfigEvent.Severity.Error,
            COMMON_CODE_36 = 50861 | ConfigEvent.Severity.Error,
            COMMON_CODE_37 = 50862 | ConfigEvent.Severity.Error,
            COMMON_CODE_38 = 50863 | ConfigEvent.Severity.Error,
            MC_PLUGIN_ERROR = 50864 | ConfigEvent.Severity.Error,
            MC_PLUGIN_ERROR_1 = 50865 | ConfigEvent.Severity.Error,
            COMMON_CODE_41 = 50866 | ConfigEvent.Severity.Error,
            COMMON_CODE_42 = 50867 | ConfigEvent.Severity.Error,
            COMMON_CODE_43 = 50868 | ConfigEvent.Severity.Error,
            COMMON_CODE_46 = 50871 | ConfigEvent.Severity.Error,
            COMMON_CODE_48 = 50873 | ConfigEvent.Severity.Error,
            QUERY_BAD_PARAMETER = 50876 | ConfigEvent.Severity.Error,
            QUERY_BAD_PARAMETER_1 = 50877 | ConfigEvent.Severity.Error,
            COMMON_CODE_53 = 50878 | ConfigEvent.Severity.Error,
            COMMON_CODE_54 = 50879 | ConfigEvent.Severity.Error,
            COMMON_CODE_55 = 50880 | ConfigEvent.Severity.Error,
            COMMON_CODE_56 = 50881 | ConfigEvent.Severity.Error,
            COMMON_CODE_57 = 50882 | ConfigEvent.Severity.Error,
            COMMON_CODE_58 = 50883 | ConfigEvent.Severity.Error,
            COMMON_CODE_59 = 50884 | ConfigEvent.Severity.Error,
            MC_BAD_PARAMETER = 50885 | ConfigEvent.Severity.Error,
            MC_BAD_PARAMETER_1 = 50886 | ConfigEvent.Severity.Error,
            MC_APPLICATION_ERROR_1 = 50887 | ConfigEvent.Severity.Error,
            MC_APPLICATION_ERROR_2 = 50888 | ConfigEvent.Severity.Error,
            MC_APPLICATION_ERROR_3 = 50889 | ConfigEvent.Severity.Error,
            MC_BAD_PARAMETER_2 = 50890 | ConfigEvent.Severity.Error,
            COMMON_CODE_66 = 50891 | ConfigEvent.Severity.Error,
            MC_BAD_CODE = 50892 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_1 = 50893 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_2 = 50894 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_3 = 50895 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_4 = 50896 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_5 = 50897 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_6 = 50898 | ConfigEvent.Severity.Error,
            COMMON_CODE_74 = 50899 | ConfigEvent.Severity.Error,
            COMMON_CODE_75 = 50900 | ConfigEvent.Severity.Error,
            COMMON_CODE_76 = 50901 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_7 = 50902 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_8 = 50903 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_9 = 50904 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_10 = 50905 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_11 = 50906 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_12 = 50907 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_13 = 50908 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_14 = 50909 | ConfigEvent.Severity.Error,
            COMMON_CODE_85 = 50910 | ConfigEvent.Severity.Error,
            COMMON_CODE_86 = 50911 | ConfigEvent.Severity.Error,
            FORBIDDEN_NAMES_LOAD_FAILURE = 50912 | ConfigEvent.Severity.Error,
            MC_APPLICATION_ERROR_5 = 50913 | ConfigEvent.Severity.Error,
            MC_APPLICATION_ERROR_6 = 50914 | ConfigEvent.Severity.Error,
            MC_APPLICATION_ERROR_7 = 50915 | ConfigEvent.Severity.Error,
            COMMON_CODE_91 = 50916 | ConfigEvent.Severity.Error,
            COMMON_CODE_92 = 50917 | ConfigEvent.Severity.Error,
            MGMT_GENERIC_ERROR = 50918 | ConfigEvent.Severity.Error,
            MGMT_GENERIC_ERROR_1 = 50919 | ConfigEvent.Severity.Error,
            MGMT_GENERIC_ERROR_2 = 50920 | ConfigEvent.Severity.Error,
            MGMT_GENERIC_ERROR_3 = 50921 | ConfigEvent.Severity.Error,
            COMMON_CODE_97 = 50922 | ConfigEvent.Severity.Error,
            MGMT_GENERIC_ERROR_4 = 50923 | ConfigEvent.Severity.Error,
            COMMON_CODE_99 = 50924 | ConfigEvent.Severity.Error,
            COMMON_CODE_100 = 50925 | ConfigEvent.Severity.Error,
            COMMON_CODE_101 = 50926 | ConfigEvent.Severity.Error,
            COMMON_CODE_102 = 50927 | ConfigEvent.Severity.Error,
            COMMON_CODE_103 = 50928 | ConfigEvent.Severity.Error,
            COMMON_CODE_104 = 50929 | ConfigEvent.Severity.Error,
            COMMON_CODE_105 = 50930 | ConfigEvent.Severity.Error,
            COMMON_CODE_106 = 50931 | ConfigEvent.Severity.Error,
            COMMON_CODE_107 = 50932 | ConfigEvent.Severity.Error,
            COMMON_CODE_108 = 50933 | ConfigEvent.Severity.Error,
            COMMON_CODE_109 = 50934 | ConfigEvent.Severity.Error,
            HEALTH_GENERIC_ERROR_1 = 50935 | ConfigEvent.Severity.Error,
            SQL_EXECUTE_READER = 50936 | ConfigEvent.Severity.Error,
            SQL_EXECUTE_READER_BEHAVIOR = 50937 | ConfigEvent.Severity.Error,
            SQL_EXECUTE_NON_QUERY = 50938 | ConfigEvent.Severity.Error,
            SQL_EXECUTE_SCALAR = 50939 | ConfigEvent.Severity.Error,
            COUNTRY_LIST_MISSING = 50940 | ConfigEvent.Severity.Error,
            COMMON_CODE_117 = 50942 | ConfigEvent.Severity.Error,
            COMMON_CODE_118 = 50943 | ConfigEvent.Severity.Error,
            COMMON_CODE_119 = 50944 | ConfigEvent.Severity.Error,
            COMMON_CODE_120 = 50945 | ConfigEvent.Severity.Error,
            COMMON_CODE_121 = 50946 | ConfigEvent.Severity.Error,
            COMMON_CODE_122 = 50947 | ConfigEvent.Severity.Error,
            MUSICNET_EXTERNAL_EXCEPTION = 50958 | ConfigEvent.Severity.Error,
            COMMON_CODE_146 = 50971 | ConfigEvent.Severity.Error,
            COMMON_CODE_147 = 50972 | ConfigEvent.Severity.Error,
            COMMON_CODE_148 = 50973 | ConfigEvent.Severity.Error,
            COMMON_CODE_149 = 50974 | ConfigEvent.Severity.Error,
            COMMON_CODE_150 = 50975 | ConfigEvent.Severity.Error,
            COMMON_CODE_151 = 50976 | ConfigEvent.Severity.Error,
            COMMON_CODE_152 = 50977 | ConfigEvent.Severity.Error,
            COMMON_CODE_153 = 50978 | ConfigEvent.Severity.Error,
            COMMON_CODE_154 = 50979 | ConfigEvent.Severity.Error,
            COMMON_CODE_155 = 50980 | ConfigEvent.Severity.Error,
            COMMON_CODE_156 = 50981 | ConfigEvent.Severity.Error,
            COMMON_CODE_157 = 50982 | ConfigEvent.Severity.Error,
            COMMON_CODE_158 = 50983 | ConfigEvent.Severity.Error,
            COMMON_CODE_159 = 50984 | ConfigEvent.Severity.Error,
            COMMON_CODE_160 = 50985 | ConfigEvent.Severity.Error,
            COMMON_CODE_161 = 50986 | ConfigEvent.Severity.Error,
            COMMON_CODE_162 = 50987 | ConfigEvent.Severity.Error,
            COMMON_CODE_163 = 50988 | ConfigEvent.Severity.Error,
            COMMON_CODE_164 = 50989 | ConfigEvent.Severity.Error,
            COMMON_CODE_165 = 50990 | ConfigEvent.Severity.Error,
            COMMON_CODE_166 = 50991 | ConfigEvent.Severity.Error,
            COMMON_CODE_167 = 50992 | ConfigEvent.Severity.Error,
            COMMON_CODE_168 = 50993 | ConfigEvent.Severity.Error,
            COMMON_CODE_169 = 50994 | ConfigEvent.Severity.Error,
            COMMON_CODE_170 = 50995 | ConfigEvent.Severity.Error,
            COMMON_CODE_171 = 50996 | ConfigEvent.Severity.Error,
            COMMON_CODE_172 = 50997 | ConfigEvent.Severity.Error,
            COMMON_CODE_173 = 50998 | ConfigEvent.Severity.Error,
            COMMON_CODE_174 = 50999 | ConfigEvent.Severity.Error,
            COMMON_CODE_175 = 51000 | ConfigEvent.Severity.Error,
            COMMON_CODE_176 = 51001 | ConfigEvent.Severity.Error,
            COMMON_CODE_177 = 51002 | ConfigEvent.Severity.Error,
            COMMON_CODE_178 = 51003 | ConfigEvent.Severity.Error,
            COMMON_CODE_179 = 51004 | ConfigEvent.Severity.Error,
            COMMON_CODE_180 = 51005 | ConfigEvent.Severity.Error,
            COMMON_CODE_181 = 51006 | ConfigEvent.Severity.Error,
            COMMON_CODE_182 = 51007 | ConfigEvent.Severity.Error,
            COMMON_CODE_183 = 51008 | ConfigEvent.Severity.Error,
            COMMON_CODE_184 = 51009 | ConfigEvent.Severity.Error,
            COMMON_CODE_185 = 51010 | ConfigEvent.Severity.Error,
            WEBSTORE_EXECUTE_ERROR = 51011 | ConfigEvent.Severity.Error,
            WEBSTORE_EXECUTE_TIMEOUT_ERROR = 51012 | ConfigEvent.Severity.Error,
            WEBSTORE_EXECUTE_DEADLOCK_ERROR = 51013 | ConfigEvent.Severity.Error,
            COMMON_CODE_189 = 51014 | ConfigEvent.Severity.Error,
            COMMON_CODE_190 = 51015 | ConfigEvent.Severity.Error,
            COMMON_CODE_191 = 51016 | ConfigEvent.Severity.Error,
            COMMON_CODE_192 = 51017 | ConfigEvent.Severity.Error,
            COMMON_CODE_193 = 51018 | ConfigEvent.Severity.Error,
            COMMON_CODE_194 = 51019 | ConfigEvent.Severity.Error,
            COMMON_CODE_195 = 51020 | ConfigEvent.Severity.Error,
            COMMON_CODE_196 = 51021 | ConfigEvent.Severity.Error,
            COMMON_CODE_197 = 51022 | ConfigEvent.Severity.Error,
            COMMON_CODE_198 = 51023 | ConfigEvent.Severity.Error,
            COMMON_CODE_199 = 51024 | ConfigEvent.Severity.Error,
            COMMON_CODE_200 = 51025 | ConfigEvent.Severity.Error,
            DEPRECATED_SYNCCAST_EXTERNAL_EXCEPTION = 51030 | ConfigEvent.Severity.Error,
            COMMON_CODE_208 = 51033 | ConfigEvent.Severity.Error,
            COMMON_CODE_209 = 51034 | ConfigEvent.Severity.Error,
            COMMON_CODE_210 = 51035 | ConfigEvent.Severity.Error,
            COMMON_CODE_211 = 51036 | ConfigEvent.Severity.Error,
            COMMON_CODE_212 = 51037 | ConfigEvent.Severity.Error,
            COMMON_CODE_213 = 51038 | ConfigEvent.Severity.Error,
            COMMON_CODE_214 = 51039 | ConfigEvent.Severity.Error,
            COMMON_CODE_215 = 51040 | ConfigEvent.Severity.Error,
            COMMON_CODE_216 = 51041 | ConfigEvent.Severity.Error,
            COMMON_CODE_217 = 51042 | ConfigEvent.Severity.Error,
            COMMON_CODE_218 = 51043 | ConfigEvent.Severity.Error,
            COMMON_CODE_219 = 51044 | ConfigEvent.Severity.Error,
            COMMON_CODE_220 = 51045 | ConfigEvent.Severity.Error,
            COMMON_CODE_221 = 51046 | ConfigEvent.Severity.Error,
            COMMON_CODE_222 = 51047 | ConfigEvent.Severity.Error,
            COMMON_CODE_223 = 51048 | ConfigEvent.Severity.Error,
            COMMON_CODE_224 = 51049 | ConfigEvent.Severity.Error,
            COMMON_CODE_225 = 51050 | ConfigEvent.Severity.Error,
            COMMON_CODE_226 = 51051 | ConfigEvent.Severity.Error,
            COMMON_CODE_227 = 51052 | ConfigEvent.Severity.Error,
            COMMON_CODE_228 = 51053 | ConfigEvent.Severity.Error,
            DEPRECATED_COMMON_CODE_229 = 51054 | ConfigEvent.Severity.Error,
            DEPRECATED_COMMON_CODE_230 = 51055 | ConfigEvent.Severity.Error,
            COMMON_CODE_231 = 51056 | ConfigEvent.Severity.Error,
            COMMON_CODE_232 = 51057 | ConfigEvent.Severity.Error,
            WMIS_EXTERNAL_EXCEPTION = 51058 | ConfigEvent.Severity.Error,
            COMMON_CODE_MATCH_STARTMIGRATE_FAILED = 51059 | ConfigEvent.Severity.Error,
            COMMON_CODE_MATCH_MIGRATESTATUS_FAILED_SPROC = 51060 | ConfigEvent.Severity.Error,
            COMMON_CODE_MATCH_UPDLTC_TV_FAILED = 51061 | ConfigEvent.Severity.Error,
            COMMON_CODE_MATCH_UPDLTC_NPDB_FAILED = 51062 | ConfigEvent.Severity.Error,
            COMMON_CODE_LSPLIB_SQLEXCEPTION = 51063 | ConfigEvent.Severity.Error,
            HEALTH_REPORT_RED = 51064 | ConfigEvent.Severity.Error,
            HEALTH_ENGINE_FAILURE = 51065 | ConfigEvent.Severity.Error,
            FEAPP_INITIALIZATION_METHOD_FAILED = 51066 | ConfigEvent.Severity.Error,
            FEAPP_INITIALIZATION_METHOD_NOT_FOUND = 51067 | ConfigEvent.Severity.Error,
            FAST_FAIL_MISSING_COUNTERS = 51068 | ConfigEvent.Severity.Error,
            FAST_FAIL_MISSING_RESOURCE = 51069 | ConfigEvent.Severity.Error,
            FEAPP_COMPRESSION_ERROR = 51070 | ConfigEvent.Severity.Error,
            UNHANDLED_THREAD_EXCEPTION = 51071 | ConfigEvent.Severity.Error,
            FEAPP_INIT_FAILURE = 51072 | ConfigEvent.Severity.Error,
            FORBIDDEN_NAMES_EXCLUDED_TITLES_CONFIG_ERROR = 51073 | ConfigEvent.Severity.Error,
            COMMON_COMM_6 = 51231 | ConfigEvent.Severity.Error,
            COMMON_COMM_7 = 51232 | ConfigEvent.Severity.Error,
            COMMON_COMM_8 = 51233 | ConfigEvent.Severity.Error,
            COMMON_COMM_9 = 51234 | ConfigEvent.Severity.Error,
            COMMON_COMM_10 = 51235 | ConfigEvent.Severity.Error,
            COMMON_COMM_11 = 51236 | ConfigEvent.Severity.Error,
            COMMON_COMM_12 = 51237 | ConfigEvent.Severity.Error,
            COMMON_COMM_13 = 51238 | ConfigEvent.Severity.Error,
            XCACHE_CLIENT_BROKEN_PIPE = 51239 | ConfigEvent.Severity.Error,
            XCACHE_CLIENT_BROKEN_PIPE_1 = 51240 | ConfigEvent.Severity.Error,
            XCACHE_CLIENT_BROKEN_PIPE_2 = 51241 | ConfigEvent.Severity.Error,
            XCACHE_CLIENT_BROKEN_PIPE_3 = 51242 | ConfigEvent.Severity.Error,
            XCACHE_CLIENT_BROKEN_PIPE_4 = 51243 | ConfigEvent.Severity.Error,
            XCACHE_SERVER_BUSY = 51244 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE = 51245 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_1 = 51246 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_2 = 51247 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_3 = 51248 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_4 = 51249 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_5 = 51250 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_6 = 51251 | ConfigEvent.Severity.Error,
            PIPE_FAILURE = 51252 | ConfigEvent.Severity.Error,
            PIPE_FAILURE_1 = 51253 | ConfigEvent.Severity.Error,
            PIPE_FAILURE_2 = 51254 | ConfigEvent.Severity.Error,
            AUTHDATA_SG_COMMUNICATION_ERROR = 51255 | ConfigEvent.Severity.Error,
            COMMON_COMM_31 = 51256 | ConfigEvent.Severity.Error,
            AUTHDATA_SG_COMMUNICATION_ERROR_1 = 51257 | ConfigEvent.Severity.Error,
            MC_XRL_REQUEST_ERROR = 51258 | ConfigEvent.Severity.Error,
            COMMON_COMM_34 = 51259 | ConfigEvent.Severity.Error,
            COMMON_COMM_35 = 51260 | ConfigEvent.Severity.Error,
            COMMON_COMM_36 = 51261 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_7 = 51262 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_RESPONSE_1 = 51263 | ConfigEvent.Severity.Error,
            FORBIDDEN_NAMES_LOAD_SUCCESS = 51264 | ConfigEvent.Severity.Info,
            FORBIDDEN_NAMES_UNVETTED_STRING = 51265 | ConfigEvent.Severity.Error,
            MUSICNET_ACCOUNT_CREATE_FAILED = 51354 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_69 = 51394 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_70 = 51395 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_71 = 51396 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_72 = 51397 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_73 = 51398 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_74 = 51399 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_75 = 51400 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_76 = 51401 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_77 = 51402 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_78 = 51403 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_79 = 51404 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_80 = 51405 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_81 = 51406 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_82 = 51407 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_83 = 51408 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_84 = 51409 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_85 = 51410 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_86 = 51411 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_87 = 51412 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_88 = 51413 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_89 = 51414 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_90 = 51415 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_91 = 51416 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_92 = 51417 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_93 = 51418 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_94 = 51419 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_95 = 51420 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_96 = 51421 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_97 = 51422 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_98 = 51423 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_99 = 51424 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_100 = 51425 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_101 = 51426 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_102 = 51427 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_103 = 51428 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_104 = 51429 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_105 = 51430 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_106 = 51431 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_107 = 51432 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_108 = 51433 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_109 = 51434 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_110 = 51435 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_111 = 51436 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_112 = 51437 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_113 = 51438 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_114 = 51439 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_115 = 51440 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_116 = 51441 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_117 = 51442 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_118 = 51443 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_119 = 51444 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_120 = 51445 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_121 = 51446 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_122 = 51447 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_123 = 51448 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_124 = 51449 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_125 = 51450 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_126 = 51451 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_127 = 51452 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_128 = 51453 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_129 = 51454 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_130 = 51455 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_131 = 51456 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_132 = 51457 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_133 = 51458 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_134 = 51459 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_135 = 51460 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_136 = 51461 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_137 = 51462 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_138 = 51463 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_139 = 51464 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_140 = 51465 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_141 = 51466 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_142 = 51467 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_143 = 51468 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_144 = 51469 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_145 = 51470 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_146 = 51471 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_147 = 51472 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_148 = 51473 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_149 = 51474 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_150 = 51475 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_151 = 51476 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_152 = 51477 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_153 = 51478 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_154 = 51479 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_155 = 51480 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_156 = 51481 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_157 = 51482 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_158 = 51483 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_159 = 51484 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_160 = 51485 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_161 = 51486 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_162 = 51487 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_163 = 51488 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_164 = 51489 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_165 = 51490 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_166 = 51491 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_167 = 51492 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_168 = 51493 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_169 = 51494 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_170 = 51495 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_171 = 51496 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_172 = 51497 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_173 = 51498 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_174 = 51499 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_175 = 51500 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_176 = 51501 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_177 = 51502 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_178 = 51503 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_179 = 51504 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_180 = 51505 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_181 = 51506 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_182 = 51507 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_183 = 51508 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_184 = 51509 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_185 = 51510 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_186 = 51511 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_187 = 51512 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_188 = 51513 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_189 = 51514 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_190 = 51515 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_191 = 51516 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_192 = 51517 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_193 = 51518 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_194 = 51519 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_195 = 51520 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_196 = 51521 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_197 = 51522 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_198 = 51523 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_199 = 51524 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_200 = 51525 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_201 = 51526 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_202 = 51527 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_203 = 51528 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_204 = 51529 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_205 = 51530 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_206 = 51531 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_207 = 51532 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_208 = 51533 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_209 = 51534 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_210 = 51535 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_211 = 51536 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_212 = 51537 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_213 = 51538 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_214 = 51539 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_215 = 51540 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_216 = 51541 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_217 = 51542 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_218 = 51543 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_219 = 51544 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_220 = 51545 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_221 = 51546 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_222 = 51547 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_223 = 51548 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_224 = 51549 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_225 = 51550 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_226 = 51551 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_227 = 51552 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_228 = 51553 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_229 = 51554 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_230 = 51555 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_231 = 51556 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_232 = 51557 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_233 = 51558 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_234 = 51559 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_235 = 51560 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_236 = 51561 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_237 = 51562 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_238 = 51563 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_239 = 51564 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_240 = 51565 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_241 = 51566 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_242 = 51567 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_243 = 51568 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_244 = 51569 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_245 = 51570 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_246 = 51571 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_247 = 51572 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_248 = 51573 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_249 = 51574 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_250 = 51575 | ConfigEvent.Severity.Error,
            DEPRECATED_COMMON_CONFIG_251 = 51576 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_252 = 51577 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_253 = 51578 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_254 = 51579 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_255 = 51580 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_256 = 51581 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_257 = 51582 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_258 = 51583 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_259 = 51584 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_260 = 51585 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_261 = 51586 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_262 = 51587 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_263 = 51588 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_264 = 51589 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_265 = 51590 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_266 = 51591 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_PIPE_HANDLE_DISPOSED = 51593 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_270 = 51595 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_272 = 51597 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_274 = 51599 | ConfigEvent.Severity.Error,
            MC_SGINFO_IS_OFF = 51600 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_276 = 51601 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_277 = 51602 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_278 = 51603 | ConfigEvent.Severity.Error,
            MC_BAD_CONFIG_DATA_4 = 51604 | ConfigEvent.Severity.Error,
            MC_BAD_CONFIG_DATA_5 = 51605 | ConfigEvent.Severity.Error,
            MC_BAD_CONFIG_DATA_6 = 51606 | ConfigEvent.Severity.Error,
            MC_BAD_CONFIG_DATA_7 = 51607 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_283 = 51608 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_284 = 51609 | ConfigEvent.Severity.Error,
            MC_BAD_CONFIG_DATA_8 = 51610 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_286 = 51611 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_287 = 51612 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_288 = 51613 | ConfigEvent.Severity.Error,
            MGMT_CRITICAL_ERROR = 51614 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE = 51615 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_291 = 51616 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_292 = 51617 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_293 = 51618 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE_1 = 51619 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE_2 = 51620 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE_3 = 51621 | ConfigEvent.Severity.Error,
            MGMT_INIT_WARNING = 51622 | ConfigEvent.Severity.Warning,
            MGMT_INIT_FAILURE_4 = 51623 | ConfigEvent.Severity.Error,
            MGMT_SRV_DISCONNECT = 51624 | ConfigEvent.Severity.Error,
            MGMT_SRV_DISCONNECT_1 = 51625 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE_5 = 51626 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE_6 = 51627 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING = 51628 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_1 = 51629 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_2 = 51630 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_3 = 51631 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_307 = 51632 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_4 = 51633 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_5 = 51634 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_310 = 51635 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_311 = 51636 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_6 = 51637 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_7 = 51638 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_8 = 51639 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_9 = 51640 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_10 = 51641 | ConfigEvent.Severity.Error,
            MGMT_REMOTE_TARGET_WARNING = 51642 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_318 = 51643 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_319 = 51644 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_320 = 51645 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_321 = 51646 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_322 = 51647 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_323 = 51648 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_324 = 51649 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_325 = 51650 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_326 = 51651 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_327 = 51652 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_328 = 51653 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_329 = 51654 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_330 = 51655 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_331 = 51656 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_332 = 51657 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_333 = 51658 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_334 = 51659 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_335 = 51660 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_336 = 51661 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_337 = 51662 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_338 = 51663 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_339 = 51664 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE_7 = 51665 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE_8 = 51666 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE_9 = 51667 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_INTEROP_REPORTMESSAGECOMPONENTID_FAILURE = 51668 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_INTEROP_ADDREPORTMESSAGECOMPONENTIDMAPPING_FAILURE = 51669 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_INTEROP_REPORTMESSAGECLEANSERVIRTUALINTERFACE_FAILURE = 51670 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_340 = 51671 | ConfigEvent.Severity.Error,
            MGMT_READ_FAILURE = 51672 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_BAD_XLAST_FILE = 51674 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_LTC_TIB_COUNTS_OUTOFSYNC = 51675 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_LTC_TIB_SERVERS_OUTOFSYNC_1 = 51676 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_LTC_TIB_SERVERS_OUTOFSYNC_2 = 51677 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_LTC_TIB_OUTOFSYNC = 51678 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_UNEXPECTED_MODE_IN_XLAST = 51679 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_MISSING_MODE_IN_XLAST = 51680 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_ENDMIGRATE_FAILED_NONEXT = 51681 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_ENDMIGRATE_FAILED_MISSING_BUCKET = 51682 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_EXPMIGRATE_FAILED_NOTSTARTED = 51683 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_ENDMIGRATE_FAILED_LTC_TIB_OUTOFSYNC = 51684 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_ADDRR_FAILED_MISSING_BUCKET = 51685 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_ADDRR_FAILED_DUPE_SERVER = 51686 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_UPDLTC_INVALID_LTC = 51687 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_DEFAULTBUCKETS_OVERWRITE = 51688 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_CONFIRMSERVER_BADSERVER = 51689 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_PREPLTC_TID_MISMATCH = 51690 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_NO_PARTMAP = 51691 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_PREPCONFIG_TID_MISMATCH = 51692 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_GET_REFRESH_FUNCTIONS = 51693 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_HEALTH_CHANGE = 51694 | ConfigEvent.Severity.Error,
            COMMON_SETTING_BATCH_CONSTRUCTION = 51695 | ConfigEvent.Severity.Error,
            COMMON_SETTING_BATCH_QUERY = 51696 | ConfigEvent.Severity.Error,
            COMMON_SETTING_BATCH_SETTING_DELETED = 51697 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_REGISTER_DYNAMIC_SETTING_FAILURE = 51698 | ConfigEvent.Severity.Error,
            COMMON_BUCKETS_BATCH_CONSTRUCTION = 51699 | ConfigEvent.Severity.Error,
            COMMON_BUCKET_BATCH_QUERY = 51700 | ConfigEvent.Severity.Error,
            COMMON_BUCKET_BATCH_DELETED = 51701 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_LIVE_REGISTRY_SETTINGS_CHANGE = 51702 | ConfigEvent.Severity.Error,
            PERFORMANCE_COUNTERS_0 = 51703 | ConfigEvent.Severity.Error,
            COMMON_HACK_4 = 52329 | ConfigEvent.Severity.Warning,
            COMMON_HACK_5 = 52330 | ConfigEvent.Severity.Warning,
            COMMON_HACK_6 = 52331 | ConfigEvent.Severity.Warning,
            COMMON_HACK_7 = 52332 | ConfigEvent.Severity.Warning,
            COMMON_HACK_8 = 52333 | ConfigEvent.Severity.Warning,
            COMMON_HACK_9 = 52334 | ConfigEvent.Severity.Warning,
            COMMON_HACK_10 = 52335 | ConfigEvent.Severity.Warning,
            COMMON_HACK_11 = 52336 | ConfigEvent.Severity.Warning,
            COMMON_HACK_12 = 52337 | ConfigEvent.Severity.Warning,
            COMMON_HACK_13 = 52338 | ConfigEvent.Severity.Warning,
            COMMON_HACK_14 = 52339 | ConfigEvent.Severity.Warning,
            COMMON_HACK_15 = 52340 | ConfigEvent.Severity.Warning,
            COMMON_HACK_16 = 52341 | ConfigEvent.Severity.Warning,
            COMMON_HACK_17 = 52342 | ConfigEvent.Severity.Warning,
            COMMON_HACK_18 = 52343 | ConfigEvent.Severity.Warning,
            COMMON_HACK_19 = 52344 | ConfigEvent.Severity.Warning,
            COMMON_HACK_20 = 52345 | ConfigEvent.Severity.Warning,
            COMMON_HACK_21 = 52346 | ConfigEvent.Severity.Warning,
            COMMON_HACK_22 = 52347 | ConfigEvent.Severity.Warning,
            COMMON_HACK_23 = 52348 | ConfigEvent.Severity.Warning,
            COMMON_HACK_24 = 52349 | ConfigEvent.Severity.Warning,
            COMMON_HACK_25 = 52350 | ConfigEvent.Severity.Warning,
            COMMON_HACK_26 = 52351 | ConfigEvent.Severity.Warning,
            COMMON_HACK_27 = 52352 | ConfigEvent.Severity.Warning,
            COMMON_HACK_28 = 52353 | ConfigEvent.Severity.Warning,
            COMMON_HACK_33 = 52358 | ConfigEvent.Severity.Warning,
            COMMON_HACK_34 = 52359 | ConfigEvent.Severity.Warning,
            COMMON_HACK_40 = 52365 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS = 52366 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_1 = 52367 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_2 = 52368 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_3 = 52369 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_4 = 52370 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_5 = 52371 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_6 = 52372 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_7 = 52373 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_BUNDLED_AUTHDATA = 52374 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR = 52375 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_1 = 52376 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_2 = 52377 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_HTTP_AUTHDATA = 52378 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_SG_AUTHDATA = 52379 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_SG_AUTHDATA_1 = 52380 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_SG_AUTHDATA_2 = 52381 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_SG_AUTHDATA_3 = 52382 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_SG_AUTHDATA_4 = 52383 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_SG_AUTHDATA_5 = 52384 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_3 = 52385 | ConfigEvent.Severity.Warning,
            COMMON_HACK_61 = 52386 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_4 = 52387 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_5 = 52388 | ConfigEvent.Severity.Warning,
            COMMON_HACK_64 = 52389 | ConfigEvent.Severity.Warning,
            COMMON_HACK_65 = 52390 | ConfigEvent.Severity.Warning,
            COMMON_HACK_66 = 52391 | ConfigEvent.Severity.Warning,
            COMMON_HACK_67 = 52392 | ConfigEvent.Severity.Warning,
            COMMON_HACK_68 = 52393 | ConfigEvent.Severity.Warning,
            COMMON_HACK_69 = 52394 | ConfigEvent.Severity.Warning,
            COMMON_HACK_70 = 52395 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_6 = 52396 | ConfigEvent.Severity.Warning,
            COMMON_HACK_72 = 52397 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_7 = 52398 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_8 = 52399 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_9 = 52400 | ConfigEvent.Severity.Warning,
            COMMON_HACK_76 = 52401 | ConfigEvent.Severity.Warning,
            COMMON_HACK_77 = 52402 | ConfigEvent.Severity.Warning,
            COMMON_HACK_78 = 52403 | ConfigEvent.Severity.Warning,
            COMMON_HACK_79 = 52404 | ConfigEvent.Severity.Warning,
            COMMON_HACK_80 = 52405 | ConfigEvent.Severity.Warning,
            HACK_CONTENT_NOT_FOUND = 52406 | ConfigEvent.Severity.Warning,
            USER_AGENT_MISSING = 52412 | ConfigEvent.Severity.Error,
            USER_AGENT_INVALID = 52413 | ConfigEvent.Severity.Error,
            AAINFO_INVALID_REQUEST = 52414 | ConfigEvent.Severity.Error,
            COMMON_HACK_81 = 52415 | ConfigEvent.Severity.Error,
            AUTHDATA_VERIFICATION_ERROR_10 = 52416 | ConfigEvent.Severity.Error,
            COMMON_INFO_4 = 52529 | ConfigEvent.Severity.Info,
            COMMON_INFO_5 = 52530 | ConfigEvent.Severity.Info,
            COMMON_INFO_6 = 52531 | ConfigEvent.Severity.Info,
            COMMON_INFO_7 = 52532 | ConfigEvent.Severity.Info,
            COMMON_INFO_8 = 52533 | ConfigEvent.Severity.Info,
            COMMON_INFO_9 = 52534 | ConfigEvent.Severity.Info,
            COMMON_INFO_10 = 52535 | ConfigEvent.Severity.Info,
            COMMON_INFO_11 = 52536 | ConfigEvent.Severity.Info,
            COMMON_INFO_12 = 52537 | ConfigEvent.Severity.Info,
            COMMON_INFO_13 = 52538 | ConfigEvent.Severity.Info,
            COMMON_INFO_14 = 52539 | ConfigEvent.Severity.Info,
            COMMON_INFO_15 = 52540 | ConfigEvent.Severity.Info,
            COMMON_INFO_16 = 52541 | ConfigEvent.Severity.Info,
            COMMON_INFO_17 = 52542 | ConfigEvent.Severity.Info,
            COMMON_INFO_18 = 52543 | ConfigEvent.Severity.Info,
            COMMON_INFO_19 = 52544 | ConfigEvent.Severity.Info,
            COMMON_INFO_20 = 52545 | ConfigEvent.Severity.Info,
            COMMON_INFO_21 = 52546 | ConfigEvent.Severity.Info,
            COMMON_INFO_22 = 52547 | ConfigEvent.Severity.Info,
            COMMON_INFO_23 = 52548 | ConfigEvent.Severity.Info,
            COMMON_INFO_24 = 52549 | ConfigEvent.Severity.Info,
            COMMON_INFO_25 = 52550 | ConfigEvent.Severity.Info,
            COMMON_INFO_26 = 52551 | ConfigEvent.Severity.Info,
            COMMON_INFO_27 = 52552 | ConfigEvent.Severity.Info,
            COMMON_INFO_28 = 52553 | ConfigEvent.Severity.Info,
            COMMON_INFO_29 = 52554 | ConfigEvent.Severity.Info,
            COMMON_INFO_30 = 52555 | ConfigEvent.Severity.Info,
            COMMON_INFO_31 = 52556 | ConfigEvent.Severity.Info,
            COMMON_INFO_32 = 52557 | ConfigEvent.Severity.Info,
            COMMON_INFO_33 = 52558 | ConfigEvent.Severity.Info,
            COMMON_INFO_34 = 52559 | ConfigEvent.Severity.Info,
            COMMON_INFO_35 = 52560 | ConfigEvent.Severity.Info,
            COMMON_INFO_36 = 52561 | ConfigEvent.Severity.Info,
            COMMON_INFO_37 = 52562 | ConfigEvent.Severity.Info,
            COMMON_INFO_38 = 52563 | ConfigEvent.Severity.Info,
            COMMON_INFO_39 = 52564 | ConfigEvent.Severity.Info,
            COMMON_INFO_40 = 52565 | ConfigEvent.Severity.Info,
            MC_APPDOMAIN_STARTED = 52566 | ConfigEvent.Severity.Info,
            MC_APPDOMAIN_STARTED_1 = 52567 | ConfigEvent.Severity.Info,
            COMMON_INFO_43 = 52568 | ConfigEvent.Severity.Info,
            COMMON_INFO_44 = 52569 | ConfigEvent.Severity.Info,
            COMMON_INFO_45 = 52570 | ConfigEvent.Severity.Info,
            COMMON_INFO_46 = 52571 | ConfigEvent.Severity.Info,
            COMMON_INFO_47 = 52572 | ConfigEvent.Severity.Info,
            COMMON_INFO_48 = 52573 | ConfigEvent.Severity.Info,
            MGMT_SRV_CONNECTED = 52574 | ConfigEvent.Severity.Info,
            REPORTINGTARGET_RECONNECTED = 52575 | ConfigEvent.Severity.Info,
            CONFIG_CHANGE_PROCESSED = 52576 | ConfigEvent.Severity.Info,
            HEALTH_REPORT_GREEN = 52577 | ConfigEvent.Severity.Info,
            COMMON_CONFIG_INFO_HEALTH_CHANGE = 52578 | ConfigEvent.Severity.Info,
            COMMON_SETTING_BATCH_COUNT = 52579 | ConfigEvent.Severity.Info,
            COMMON_BUCKET_COUNT = 52580 | ConfigEvent.Severity.Info,
            COMMON_CONFIG_INFO_LIVE_REGISTRY_SETTINGS_CHANGE = 52581 | ConfigEvent.Severity.Info,
            COMMON_CONFIG_INFO_CONFIG_BLOBS_CHANGE = 52582 | ConfigEvent.Severity.Info,
            COMMON_CONFIG_INFO_ETX_MANIFEST_CHANGE = 52583 | ConfigEvent.Severity.Info,
            COMMON_WARNING_0 = 52725 | ConfigEvent.Severity.Warning,
            HEALTH_REPORT_YELLOW = 52726 | ConfigEvent.Severity.Warning,
            AUDIT_INVALID_SUBSYSTEM = 63800 | ConfigEvent.Severity.Error,
            AUDIT_NO_SETTING = 63801 | ConfigEvent.Severity.Error,
            AUDIT_LOG_FAILURE = 63802 | ConfigEvent.Severity.Error,
 
           // AUTOGENERATED - do not add ids here 
        } 
    } 
} 
 
/////////////////////////////////////////////////////////////////////////////// 
// AUTO GENERATED FILE 
// MODIFY THE CORRESPONDING .xml AND .xsl FILES
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\events\objd\ConfigEvent.cs ===
using System;
using System.Diagnostics;

namespace xonline.common.config {
    internal partial class ConfigEvent {
        public enum Severity : uint {
            Info    = 0x40000000,
            Warning = 0x80000000,
            Error   = 0xC0000000
        }

        public static Severity SeverityFromId(ConfigEvent.Id eventId)
        {
            uint severity = ((uint) eventId) & 0xC0000000;
            Debug.Assert(severity != 0);
            return (Severity) severity;
        }

        public static ushort MessageFromId(ConfigEvent.Id eventId)
        {
            return (ushort) (((uint) eventId) & 0xFFFF);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\events\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86_common_event_none_12.4.56.0_none_06100b4f63e7102e
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86_common_event_no-public-key_12.4.56.0_x-ww_27f3551c
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=common_event
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86_common_event_no-public-key_12.4.56.0_x-ww_27f3551c
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86_common_event_no-public-key_12.4.56.0_x-ww_27f3551c.manifest
XP_MANIFEST_PATH=manifests\x86_common_event_no-public-key_12.4.56.0_x-ww_27f3551c.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86_common_event_no-public-key_12.4.56.0_x-ww_27f3551c.cat
XP_CATALOG_PATH=manifests\x86_common_event_no-public-key_12.4.56.0_x-ww_27f3551c.cat
XP_PAYLOAD_PATH=x86_common_event_no-public-key_12.4.56.0_x-ww_27f3551c
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=common_event,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\events\objd\common.cs ===
SGINFO_CALL_SOURCE_INVALID = 40001 | ConfigEvent.Severity.Error,
            SGINFO_VERIFY_PRIVILEGE = 40002 | ConfigEvent.Severity.Error,
            XMGMT_FAILED_TO_REGISTER_ASSEMBLY = 40050 | ConfigEvent.Severity.Warning,
            HEALTH_REQUEST_FAILED = 40051 | ConfigEvent.Severity.Error,
            HEALTH_INITIALIZE_INTEROP_FAILED = 40052 | ConfigEvent.Severity.Error,
            HEALTH_REGISTERNATIVEHEALTHBLOCK_FAILED = 40053 | ConfigEvent.Severity.Error,
            HEALTH_LISTENER_CALLBACK_REQUEST_FAILED = 40054 | ConfigEvent.Severity.Error,
            HEALTH_LISTENER_CALLBACK_FAILED = 40055 | ConfigEvent.Severity.Error,
            MSNRR_EXTERNAL_EXCEPTION = 40056 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_INFO_SERVICE_KEYS_CHANGE = 40057 | ConfigEvent.Severity.Info,
            COMMON_CONFIG_SERVICE_KEYS_CHANGE = 40058 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_USING_NPDB_SETTINGS = 40059 | ConfigEvent.Severity.Warning,
            COMMON_CODE_20 = 50845 | ConfigEvent.Severity.Error,
            CRYPTO_GENERAL_ERROR = 50846 | ConfigEvent.Severity.Error,
            COMMON_CODE_22 = 50847 | ConfigEvent.Severity.Error,
            COMMON_CODE_23 = 50848 | ConfigEvent.Severity.Error,
            COMMON_CODE_24 = 50849 | ConfigEvent.Severity.Error,
            MC_APPLICATION_ERROR = 50850 | ConfigEvent.Severity.Error,
            COMMON_CODE_26 = 50851 | ConfigEvent.Severity.Error,
            COMMON_CODE_27 = 50852 | ConfigEvent.Severity.Error,
            COMMON_CODE_28 = 50853 | ConfigEvent.Severity.Error,
            COMMON_CODE_29 = 50854 | ConfigEvent.Severity.Error,
            COMMON_CODE_30 = 50855 | ConfigEvent.Severity.Error,
            COMMON_CODE_31 = 50856 | ConfigEvent.Severity.Error,
            COMMON_CODE_32 = 50857 | ConfigEvent.Severity.Error,
            COMMON_CODE_33 = 50858 | ConfigEvent.Severity.Error,
            COMMON_CODE_34 = 50859 | ConfigEvent.Severity.Error,
            COMMON_CODE_35 = 50860 | ConfigEvent.Severity.Error,
            COMMON_CODE_36 = 50861 | ConfigEvent.Severity.Error,
            COMMON_CODE_37 = 50862 | ConfigEvent.Severity.Error,
            COMMON_CODE_38 = 50863 | ConfigEvent.Severity.Error,
            MC_PLUGIN_ERROR = 50864 | ConfigEvent.Severity.Error,
            MC_PLUGIN_ERROR_1 = 50865 | ConfigEvent.Severity.Error,
            COMMON_CODE_41 = 50866 | ConfigEvent.Severity.Error,
            COMMON_CODE_42 = 50867 | ConfigEvent.Severity.Error,
            COMMON_CODE_43 = 50868 | ConfigEvent.Severity.Error,
            COMMON_CODE_46 = 50871 | ConfigEvent.Severity.Error,
            COMMON_CODE_48 = 50873 | ConfigEvent.Severity.Error,
            QUERY_BAD_PARAMETER = 50876 | ConfigEvent.Severity.Error,
            QUERY_BAD_PARAMETER_1 = 50877 | ConfigEvent.Severity.Error,
            COMMON_CODE_53 = 50878 | ConfigEvent.Severity.Error,
            COMMON_CODE_54 = 50879 | ConfigEvent.Severity.Error,
            COMMON_CODE_55 = 50880 | ConfigEvent.Severity.Error,
            COMMON_CODE_56 = 50881 | ConfigEvent.Severity.Error,
            COMMON_CODE_57 = 50882 | ConfigEvent.Severity.Error,
            COMMON_CODE_58 = 50883 | ConfigEvent.Severity.Error,
            COMMON_CODE_59 = 50884 | ConfigEvent.Severity.Error,
            MC_BAD_PARAMETER = 50885 | ConfigEvent.Severity.Error,
            MC_BAD_PARAMETER_1 = 50886 | ConfigEvent.Severity.Error,
            MC_APPLICATION_ERROR_1 = 50887 | ConfigEvent.Severity.Error,
            MC_APPLICATION_ERROR_2 = 50888 | ConfigEvent.Severity.Error,
            MC_APPLICATION_ERROR_3 = 50889 | ConfigEvent.Severity.Error,
            MC_BAD_PARAMETER_2 = 50890 | ConfigEvent.Severity.Error,
            COMMON_CODE_66 = 50891 | ConfigEvent.Severity.Error,
            MC_BAD_CODE = 50892 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_1 = 50893 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_2 = 50894 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_3 = 50895 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_4 = 50896 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_5 = 50897 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_6 = 50898 | ConfigEvent.Severity.Error,
            COMMON_CODE_74 = 50899 | ConfigEvent.Severity.Error,
            COMMON_CODE_75 = 50900 | ConfigEvent.Severity.Error,
            COMMON_CODE_76 = 50901 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_7 = 50902 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_8 = 50903 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_9 = 50904 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_10 = 50905 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_11 = 50906 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_12 = 50907 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_13 = 50908 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_14 = 50909 | ConfigEvent.Severity.Error,
            COMMON_CODE_85 = 50910 | ConfigEvent.Severity.Error,
            COMMON_CODE_86 = 50911 | ConfigEvent.Severity.Error,
            FORBIDDEN_NAMES_LOAD_FAILURE = 50912 | ConfigEvent.Severity.Error,
            MC_APPLICATION_ERROR_5 = 50913 | ConfigEvent.Severity.Error,
            MC_APPLICATION_ERROR_6 = 50914 | ConfigEvent.Severity.Error,
            MC_APPLICATION_ERROR_7 = 50915 | ConfigEvent.Severity.Error,
            COMMON_CODE_91 = 50916 | ConfigEvent.Severity.Error,
            COMMON_CODE_92 = 50917 | ConfigEvent.Severity.Error,
            MGMT_GENERIC_ERROR = 50918 | ConfigEvent.Severity.Error,
            MGMT_GENERIC_ERROR_1 = 50919 | ConfigEvent.Severity.Error,
            MGMT_GENERIC_ERROR_2 = 50920 | ConfigEvent.Severity.Error,
            MGMT_GENERIC_ERROR_3 = 50921 | ConfigEvent.Severity.Error,
            COMMON_CODE_97 = 50922 | ConfigEvent.Severity.Error,
            MGMT_GENERIC_ERROR_4 = 50923 | ConfigEvent.Severity.Error,
            COMMON_CODE_99 = 50924 | ConfigEvent.Severity.Error,
            COMMON_CODE_100 = 50925 | ConfigEvent.Severity.Error,
            COMMON_CODE_101 = 50926 | ConfigEvent.Severity.Error,
            COMMON_CODE_102 = 50927 | ConfigEvent.Severity.Error,
            COMMON_CODE_103 = 50928 | ConfigEvent.Severity.Error,
            COMMON_CODE_104 = 50929 | ConfigEvent.Severity.Error,
            COMMON_CODE_105 = 50930 | ConfigEvent.Severity.Error,
            COMMON_CODE_106 = 50931 | ConfigEvent.Severity.Error,
            COMMON_CODE_107 = 50932 | ConfigEvent.Severity.Error,
            COMMON_CODE_108 = 50933 | ConfigEvent.Severity.Error,
            COMMON_CODE_109 = 50934 | ConfigEvent.Severity.Error,
            HEALTH_GENERIC_ERROR_1 = 50935 | ConfigEvent.Severity.Error,
            SQL_EXECUTE_READER = 50936 | ConfigEvent.Severity.Error,
            SQL_EXECUTE_READER_BEHAVIOR = 50937 | ConfigEvent.Severity.Error,
            SQL_EXECUTE_NON_QUERY = 50938 | ConfigEvent.Severity.Error,
            SQL_EXECUTE_SCALAR = 50939 | ConfigEvent.Severity.Error,
            COUNTRY_LIST_MISSING = 50940 | ConfigEvent.Severity.Error,
            COMMON_CODE_117 = 50942 | ConfigEvent.Severity.Error,
            COMMON_CODE_118 = 50943 | ConfigEvent.Severity.Error,
            COMMON_CODE_119 = 50944 | ConfigEvent.Severity.Error,
            COMMON_CODE_120 = 50945 | ConfigEvent.Severity.Error,
            COMMON_CODE_121 = 50946 | ConfigEvent.Severity.Error,
            COMMON_CODE_122 = 50947 | ConfigEvent.Severity.Error,
            MUSICNET_EXTERNAL_EXCEPTION = 50958 | ConfigEvent.Severity.Error,
            COMMON_CODE_146 = 50971 | ConfigEvent.Severity.Error,
            COMMON_CODE_147 = 50972 | ConfigEvent.Severity.Error,
            COMMON_CODE_148 = 50973 | ConfigEvent.Severity.Error,
            COMMON_CODE_149 = 50974 | ConfigEvent.Severity.Error,
            COMMON_CODE_150 = 50975 | ConfigEvent.Severity.Error,
            COMMON_CODE_151 = 50976 | ConfigEvent.Severity.Error,
            COMMON_CODE_152 = 50977 | ConfigEvent.Severity.Error,
            COMMON_CODE_153 = 50978 | ConfigEvent.Severity.Error,
            COMMON_CODE_154 = 50979 | ConfigEvent.Severity.Error,
            COMMON_CODE_155 = 50980 | ConfigEvent.Severity.Error,
            COMMON_CODE_156 = 50981 | ConfigEvent.Severity.Error,
            COMMON_CODE_157 = 50982 | ConfigEvent.Severity.Error,
            COMMON_CODE_158 = 50983 | ConfigEvent.Severity.Error,
            COMMON_CODE_159 = 50984 | ConfigEvent.Severity.Error,
            COMMON_CODE_160 = 50985 | ConfigEvent.Severity.Error,
            COMMON_CODE_161 = 50986 | ConfigEvent.Severity.Error,
            COMMON_CODE_162 = 50987 | ConfigEvent.Severity.Error,
            COMMON_CODE_163 = 50988 | ConfigEvent.Severity.Error,
            COMMON_CODE_164 = 50989 | ConfigEvent.Severity.Error,
            COMMON_CODE_165 = 50990 | ConfigEvent.Severity.Error,
            COMMON_CODE_166 = 50991 | ConfigEvent.Severity.Error,
            COMMON_CODE_167 = 50992 | ConfigEvent.Severity.Error,
            COMMON_CODE_168 = 50993 | ConfigEvent.Severity.Error,
            COMMON_CODE_169 = 50994 | ConfigEvent.Severity.Error,
            COMMON_CODE_170 = 50995 | ConfigEvent.Severity.Error,
            COMMON_CODE_171 = 50996 | ConfigEvent.Severity.Error,
            COMMON_CODE_172 = 50997 | ConfigEvent.Severity.Error,
            COMMON_CODE_173 = 50998 | ConfigEvent.Severity.Error,
            COMMON_CODE_174 = 50999 | ConfigEvent.Severity.Error,
            COMMON_CODE_175 = 51000 | ConfigEvent.Severity.Error,
            COMMON_CODE_176 = 51001 | ConfigEvent.Severity.Error,
            COMMON_CODE_177 = 51002 | ConfigEvent.Severity.Error,
            COMMON_CODE_178 = 51003 | ConfigEvent.Severity.Error,
            COMMON_CODE_179 = 51004 | ConfigEvent.Severity.Error,
            COMMON_CODE_180 = 51005 | ConfigEvent.Severity.Error,
            COMMON_CODE_181 = 51006 | ConfigEvent.Severity.Error,
            COMMON_CODE_182 = 51007 | ConfigEvent.Severity.Error,
            COMMON_CODE_183 = 51008 | ConfigEvent.Severity.Error,
            COMMON_CODE_184 = 51009 | ConfigEvent.Severity.Error,
            COMMON_CODE_185 = 51010 | ConfigEvent.Severity.Error,
            WEBSTORE_EXECUTE_ERROR = 51011 | ConfigEvent.Severity.Error,
            WEBSTORE_EXECUTE_TIMEOUT_ERROR = 51012 | ConfigEvent.Severity.Error,
            WEBSTORE_EXECUTE_DEADLOCK_ERROR = 51013 | ConfigEvent.Severity.Error,
            COMMON_CODE_189 = 51014 | ConfigEvent.Severity.Error,
            COMMON_CODE_190 = 51015 | ConfigEvent.Severity.Error,
            COMMON_CODE_191 = 51016 | ConfigEvent.Severity.Error,
            COMMON_CODE_192 = 51017 | ConfigEvent.Severity.Error,
            COMMON_CODE_193 = 51018 | ConfigEvent.Severity.Error,
            COMMON_CODE_194 = 51019 | ConfigEvent.Severity.Error,
            COMMON_CODE_195 = 51020 | ConfigEvent.Severity.Error,
            COMMON_CODE_196 = 51021 | ConfigEvent.Severity.Error,
            COMMON_CODE_197 = 51022 | ConfigEvent.Severity.Error,
            COMMON_CODE_198 = 51023 | ConfigEvent.Severity.Error,
            COMMON_CODE_199 = 51024 | ConfigEvent.Severity.Error,
            COMMON_CODE_200 = 51025 | ConfigEvent.Severity.Error,
            DEPRECATED_SYNCCAST_EXTERNAL_EXCEPTION = 51030 | ConfigEvent.Severity.Error,
            COMMON_CODE_208 = 51033 | ConfigEvent.Severity.Error,
            COMMON_CODE_209 = 51034 | ConfigEvent.Severity.Error,
            COMMON_CODE_210 = 51035 | ConfigEvent.Severity.Error,
            COMMON_CODE_211 = 51036 | ConfigEvent.Severity.Error,
            COMMON_CODE_212 = 51037 | ConfigEvent.Severity.Error,
            COMMON_CODE_213 = 51038 | ConfigEvent.Severity.Error,
            COMMON_CODE_214 = 51039 | ConfigEvent.Severity.Error,
            COMMON_CODE_215 = 51040 | ConfigEvent.Severity.Error,
            COMMON_CODE_216 = 51041 | ConfigEvent.Severity.Error,
            COMMON_CODE_217 = 51042 | ConfigEvent.Severity.Error,
            COMMON_CODE_218 = 51043 | ConfigEvent.Severity.Error,
            COMMON_CODE_219 = 51044 | ConfigEvent.Severity.Error,
            COMMON_CODE_220 = 51045 | ConfigEvent.Severity.Error,
            COMMON_CODE_221 = 51046 | ConfigEvent.Severity.Error,
            COMMON_CODE_222 = 51047 | ConfigEvent.Severity.Error,
            COMMON_CODE_223 = 51048 | ConfigEvent.Severity.Error,
            COMMON_CODE_224 = 51049 | ConfigEvent.Severity.Error,
            COMMON_CODE_225 = 51050 | ConfigEvent.Severity.Error,
            COMMON_CODE_226 = 51051 | ConfigEvent.Severity.Error,
            COMMON_CODE_227 = 51052 | ConfigEvent.Severity.Error,
            COMMON_CODE_228 = 51053 | ConfigEvent.Severity.Error,
            DEPRECATED_COMMON_CODE_229 = 51054 | ConfigEvent.Severity.Error,
            DEPRECATED_COMMON_CODE_230 = 51055 | ConfigEvent.Severity.Error,
            COMMON_CODE_231 = 51056 | ConfigEvent.Severity.Error,
            COMMON_CODE_232 = 51057 | ConfigEvent.Severity.Error,
            WMIS_EXTERNAL_EXCEPTION = 51058 | ConfigEvent.Severity.Error,
            COMMON_CODE_MATCH_STARTMIGRATE_FAILED = 51059 | ConfigEvent.Severity.Error,
            COMMON_CODE_MATCH_MIGRATESTATUS_FAILED_SPROC = 51060 | ConfigEvent.Severity.Error,
            COMMON_CODE_MATCH_UPDLTC_TV_FAILED = 51061 | ConfigEvent.Severity.Error,
            COMMON_CODE_MATCH_UPDLTC_NPDB_FAILED = 51062 | ConfigEvent.Severity.Error,
            COMMON_CODE_LSPLIB_SQLEXCEPTION = 51063 | ConfigEvent.Severity.Error,
            HEALTH_REPORT_RED = 51064 | ConfigEvent.Severity.Error,
            HEALTH_ENGINE_FAILURE = 51065 | ConfigEvent.Severity.Error,
            FEAPP_INITIALIZATION_METHOD_FAILED = 51066 | ConfigEvent.Severity.Error,
            FEAPP_INITIALIZATION_METHOD_NOT_FOUND = 51067 | ConfigEvent.Severity.Error,
            FAST_FAIL_MISSING_COUNTERS = 51068 | ConfigEvent.Severity.Error,
            FAST_FAIL_MISSING_RESOURCE = 51069 | ConfigEvent.Severity.Error,
            FEAPP_COMPRESSION_ERROR = 51070 | ConfigEvent.Severity.Error,
            UNHANDLED_THREAD_EXCEPTION = 51071 | ConfigEvent.Severity.Error,
            FEAPP_INIT_FAILURE = 51072 | ConfigEvent.Severity.Error,
            FORBIDDEN_NAMES_EXCLUDED_TITLES_CONFIG_ERROR = 51073 | ConfigEvent.Severity.Error,
            COMMON_COMM_6 = 51231 | ConfigEvent.Severity.Error,
            COMMON_COMM_7 = 51232 | ConfigEvent.Severity.Error,
            COMMON_COMM_8 = 51233 | ConfigEvent.Severity.Error,
            COMMON_COMM_9 = 51234 | ConfigEvent.Severity.Error,
            COMMON_COMM_10 = 51235 | ConfigEvent.Severity.Error,
            COMMON_COMM_11 = 51236 | ConfigEvent.Severity.Error,
            COMMON_COMM_12 = 51237 | ConfigEvent.Severity.Error,
            COMMON_COMM_13 = 51238 | ConfigEvent.Severity.Error,
            XCACHE_CLIENT_BROKEN_PIPE = 51239 | ConfigEvent.Severity.Error,
            XCACHE_CLIENT_BROKEN_PIPE_1 = 51240 | ConfigEvent.Severity.Error,
            XCACHE_CLIENT_BROKEN_PIPE_2 = 51241 | ConfigEvent.Severity.Error,
            XCACHE_CLIENT_BROKEN_PIPE_3 = 51242 | ConfigEvent.Severity.Error,
            XCACHE_CLIENT_BROKEN_PIPE_4 = 51243 | ConfigEvent.Severity.Error,
            XCACHE_SERVER_BUSY = 51244 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE = 51245 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_1 = 51246 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_2 = 51247 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_3 = 51248 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_4 = 51249 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_5 = 51250 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_6 = 51251 | ConfigEvent.Severity.Error,
            PIPE_FAILURE = 51252 | ConfigEvent.Severity.Error,
            PIPE_FAILURE_1 = 51253 | ConfigEvent.Severity.Error,
            PIPE_FAILURE_2 = 51254 | ConfigEvent.Severity.Error,
            AUTHDATA_SG_COMMUNICATION_ERROR = 51255 | ConfigEvent.Severity.Error,
            COMMON_COMM_31 = 51256 | ConfigEvent.Severity.Error,
            AUTHDATA_SG_COMMUNICATION_ERROR_1 = 51257 | ConfigEvent.Severity.Error,
            MC_XRL_REQUEST_ERROR = 51258 | ConfigEvent.Severity.Error,
            COMMON_COMM_34 = 51259 | ConfigEvent.Severity.Error,
            COMMON_COMM_35 = 51260 | ConfigEvent.Severity.Error,
            COMMON_COMM_36 = 51261 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_7 = 51262 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_RESPONSE_1 = 51263 | ConfigEvent.Severity.Error,
            FORBIDDEN_NAMES_LOAD_SUCCESS = 51264 | ConfigEvent.Severity.Info,
            FORBIDDEN_NAMES_UNVETTED_STRING = 51265 | ConfigEvent.Severity.Error,
            MUSICNET_ACCOUNT_CREATE_FAILED = 51354 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_69 = 51394 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_70 = 51395 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_71 = 51396 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_72 = 51397 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_73 = 51398 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_74 = 51399 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_75 = 51400 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_76 = 51401 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_77 = 51402 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_78 = 51403 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_79 = 51404 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_80 = 51405 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_81 = 51406 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_82 = 51407 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_83 = 51408 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_84 = 51409 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_85 = 51410 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_86 = 51411 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_87 = 51412 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_88 = 51413 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_89 = 51414 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_90 = 51415 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_91 = 51416 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_92 = 51417 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_93 = 51418 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_94 = 51419 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_95 = 51420 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_96 = 51421 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_97 = 51422 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_98 = 51423 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_99 = 51424 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_100 = 51425 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_101 = 51426 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_102 = 51427 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_103 = 51428 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_104 = 51429 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_105 = 51430 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_106 = 51431 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_107 = 51432 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_108 = 51433 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_109 = 51434 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_110 = 51435 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_111 = 51436 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_112 = 51437 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_113 = 51438 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_114 = 51439 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_115 = 51440 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_116 = 51441 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_117 = 51442 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_118 = 51443 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_119 = 51444 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_120 = 51445 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_121 = 51446 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_122 = 51447 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_123 = 51448 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_124 = 51449 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_125 = 51450 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_126 = 51451 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_127 = 51452 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_128 = 51453 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_129 = 51454 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_130 = 51455 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_131 = 51456 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_132 = 51457 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_133 = 51458 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_134 = 51459 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_135 = 51460 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_136 = 51461 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_137 = 51462 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_138 = 51463 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_139 = 51464 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_140 = 51465 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_141 = 51466 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_142 = 51467 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_143 = 51468 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_144 = 51469 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_145 = 51470 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_146 = 51471 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_147 = 51472 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_148 = 51473 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_149 = 51474 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_150 = 51475 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_151 = 51476 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_152 = 51477 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_153 = 51478 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_154 = 51479 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_155 = 51480 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_156 = 51481 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_157 = 51482 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_158 = 51483 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_159 = 51484 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_160 = 51485 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_161 = 51486 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_162 = 51487 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_163 = 51488 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_164 = 51489 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_165 = 51490 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_166 = 51491 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_167 = 51492 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_168 = 51493 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_169 = 51494 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_170 = 51495 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_171 = 51496 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_172 = 51497 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_173 = 51498 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_174 = 51499 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_175 = 51500 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_176 = 51501 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_177 = 51502 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_178 = 51503 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_179 = 51504 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_180 = 51505 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_181 = 51506 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_182 = 51507 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_183 = 51508 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_184 = 51509 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_185 = 51510 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_186 = 51511 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_187 = 51512 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_188 = 51513 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_189 = 51514 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_190 = 51515 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_191 = 51516 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_192 = 51517 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_193 = 51518 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_194 = 51519 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_195 = 51520 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_196 = 51521 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_197 = 51522 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_198 = 51523 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_199 = 51524 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_200 = 51525 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_201 = 51526 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_202 = 51527 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_203 = 51528 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_204 = 51529 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_205 = 51530 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_206 = 51531 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_207 = 51532 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_208 = 51533 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_209 = 51534 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_210 = 51535 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_211 = 51536 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_212 = 51537 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_213 = 51538 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_214 = 51539 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_215 = 51540 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_216 = 51541 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_217 = 51542 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_218 = 51543 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_219 = 51544 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_220 = 51545 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_221 = 51546 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_222 = 51547 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_223 = 51548 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_224 = 51549 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_225 = 51550 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_226 = 51551 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_227 = 51552 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_228 = 51553 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_229 = 51554 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_230 = 51555 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_231 = 51556 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_232 = 51557 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_233 = 51558 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_234 = 51559 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_235 = 51560 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_236 = 51561 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_237 = 51562 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_238 = 51563 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_239 = 51564 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_240 = 51565 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_241 = 51566 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_242 = 51567 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_243 = 51568 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_244 = 51569 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_245 = 51570 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_246 = 51571 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_247 = 51572 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_248 = 51573 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_249 = 51574 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_250 = 51575 | ConfigEvent.Severity.Error,
            DEPRECATED_COMMON_CONFIG_251 = 51576 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_252 = 51577 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_253 = 51578 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_254 = 51579 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_255 = 51580 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_256 = 51581 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_257 = 51582 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_258 = 51583 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_259 = 51584 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_260 = 51585 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_261 = 51586 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_262 = 51587 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_263 = 51588 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_264 = 51589 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_265 = 51590 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_266 = 51591 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_PIPE_HANDLE_DISPOSED = 51593 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_270 = 51595 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_272 = 51597 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_274 = 51599 | ConfigEvent.Severity.Error,
            MC_SGINFO_IS_OFF = 51600 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_276 = 51601 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_277 = 51602 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_278 = 51603 | ConfigEvent.Severity.Error,
            MC_BAD_CONFIG_DATA_4 = 51604 | ConfigEvent.Severity.Error,
            MC_BAD_CONFIG_DATA_5 = 51605 | ConfigEvent.Severity.Error,
            MC_BAD_CONFIG_DATA_6 = 51606 | ConfigEvent.Severity.Error,
            MC_BAD_CONFIG_DATA_7 = 51607 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_283 = 51608 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_284 = 51609 | ConfigEvent.Severity.Error,
            MC_BAD_CONFIG_DATA_8 = 51610 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_286 = 51611 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_287 = 51612 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_288 = 51613 | ConfigEvent.Severity.Error,
            MGMT_CRITICAL_ERROR = 51614 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE = 51615 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_291 = 51616 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_292 = 51617 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_293 = 51618 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE_1 = 51619 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE_2 = 51620 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE_3 = 51621 | ConfigEvent.Severity.Error,
            MGMT_INIT_WARNING = 51622 | ConfigEvent.Severity.Warning,
            MGMT_INIT_FAILURE_4 = 51623 | ConfigEvent.Severity.Error,
            MGMT_SRV_DISCONNECT = 51624 | ConfigEvent.Severity.Error,
            MGMT_SRV_DISCONNECT_1 = 51625 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE_5 = 51626 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE_6 = 51627 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING = 51628 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_1 = 51629 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_2 = 51630 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_3 = 51631 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_307 = 51632 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_4 = 51633 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_5 = 51634 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_310 = 51635 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_311 = 51636 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_6 = 51637 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_7 = 51638 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_8 = 51639 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_9 = 51640 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_10 = 51641 | ConfigEvent.Severity.Error,
            MGMT_REMOTE_TARGET_WARNING = 51642 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_318 = 51643 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_319 = 51644 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_320 = 51645 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_321 = 51646 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_322 = 51647 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_323 = 51648 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_324 = 51649 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_325 = 51650 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_326 = 51651 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_327 = 51652 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_328 = 51653 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_329 = 51654 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_330 = 51655 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_331 = 51656 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_332 = 51657 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_333 = 51658 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_334 = 51659 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_335 = 51660 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_336 = 51661 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_337 = 51662 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_338 = 51663 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_339 = 51664 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE_7 = 51665 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE_8 = 51666 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE_9 = 51667 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_INTEROP_REPORTMESSAGECOMPONENTID_FAILURE = 51668 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_INTEROP_ADDREPORTMESSAGECOMPONENTIDMAPPING_FAILURE = 51669 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_INTEROP_REPORTMESSAGECLEANSERVIRTUALINTERFACE_FAILURE = 51670 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_340 = 51671 | ConfigEvent.Severity.Error,
            MGMT_READ_FAILURE = 51672 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_BAD_XLAST_FILE = 51674 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_LTC_TIB_COUNTS_OUTOFSYNC = 51675 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_LTC_TIB_SERVERS_OUTOFSYNC_1 = 51676 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_LTC_TIB_SERVERS_OUTOFSYNC_2 = 51677 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_LTC_TIB_OUTOFSYNC = 51678 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_UNEXPECTED_MODE_IN_XLAST = 51679 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_MISSING_MODE_IN_XLAST = 51680 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_ENDMIGRATE_FAILED_NONEXT = 51681 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_ENDMIGRATE_FAILED_MISSING_BUCKET = 51682 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_EXPMIGRATE_FAILED_NOTSTARTED = 51683 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_ENDMIGRATE_FAILED_LTC_TIB_OUTOFSYNC = 51684 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_ADDRR_FAILED_MISSING_BUCKET = 51685 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_ADDRR_FAILED_DUPE_SERVER = 51686 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_UPDLTC_INVALID_LTC = 51687 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_DEFAULTBUCKETS_OVERWRITE = 51688 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_CONFIRMSERVER_BADSERVER = 51689 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_PREPLTC_TID_MISMATCH = 51690 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_NO_PARTMAP = 51691 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_PREPCONFIG_TID_MISMATCH = 51692 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_GET_REFRESH_FUNCTIONS = 51693 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_HEALTH_CHANGE = 51694 | ConfigEvent.Severity.Error,
            COMMON_SETTING_BATCH_CONSTRUCTION = 51695 | ConfigEvent.Severity.Error,
            COMMON_SETTING_BATCH_QUERY = 51696 | ConfigEvent.Severity.Error,
            COMMON_SETTING_BATCH_SETTING_DELETED = 51697 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_REGISTER_DYNAMIC_SETTING_FAILURE = 51698 | ConfigEvent.Severity.Error,
            COMMON_BUCKETS_BATCH_CONSTRUCTION = 51699 | ConfigEvent.Severity.Error,
            COMMON_BUCKET_BATCH_QUERY = 51700 | ConfigEvent.Severity.Error,
            COMMON_BUCKET_BATCH_DELETED = 51701 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_LIVE_REGISTRY_SETTINGS_CHANGE = 51702 | ConfigEvent.Severity.Error,
            PERFORMANCE_COUNTERS_0 = 51703 | ConfigEvent.Severity.Error,
            COMMON_HACK_4 = 52329 | ConfigEvent.Severity.Warning,
            COMMON_HACK_5 = 52330 | ConfigEvent.Severity.Warning,
            COMMON_HACK_6 = 52331 | ConfigEvent.Severity.Warning,
            COMMON_HACK_7 = 52332 | ConfigEvent.Severity.Warning,
            COMMON_HACK_8 = 52333 | ConfigEvent.Severity.Warning,
            COMMON_HACK_9 = 52334 | ConfigEvent.Severity.Warning,
            COMMON_HACK_10 = 52335 | ConfigEvent.Severity.Warning,
            COMMON_HACK_11 = 52336 | ConfigEvent.Severity.Warning,
            COMMON_HACK_12 = 52337 | ConfigEvent.Severity.Warning,
            COMMON_HACK_13 = 52338 | ConfigEvent.Severity.Warning,
            COMMON_HACK_14 = 52339 | ConfigEvent.Severity.Warning,
            COMMON_HACK_15 = 52340 | ConfigEvent.Severity.Warning,
            COMMON_HACK_16 = 52341 | ConfigEvent.Severity.Warning,
            COMMON_HACK_17 = 52342 | ConfigEvent.Severity.Warning,
            COMMON_HACK_18 = 52343 | ConfigEvent.Severity.Warning,
            COMMON_HACK_19 = 52344 | ConfigEvent.Severity.Warning,
            COMMON_HACK_20 = 52345 | ConfigEvent.Severity.Warning,
            COMMON_HACK_21 = 52346 | ConfigEvent.Severity.Warning,
            COMMON_HACK_22 = 52347 | ConfigEvent.Severity.Warning,
            COMMON_HACK_23 = 52348 | ConfigEvent.Severity.Warning,
            COMMON_HACK_24 = 52349 | ConfigEvent.Severity.Warning,
            COMMON_HACK_25 = 52350 | ConfigEvent.Severity.Warning,
            COMMON_HACK_26 = 52351 | ConfigEvent.Severity.Warning,
            COMMON_HACK_27 = 52352 | ConfigEvent.Severity.Warning,
            COMMON_HACK_28 = 52353 | ConfigEvent.Severity.Warning,
            COMMON_HACK_33 = 52358 | ConfigEvent.Severity.Warning,
            COMMON_HACK_34 = 52359 | ConfigEvent.Severity.Warning,
            COMMON_HACK_40 = 52365 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS = 52366 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_1 = 52367 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_2 = 52368 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_3 = 52369 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_4 = 52370 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_5 = 52371 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_6 = 52372 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_7 = 52373 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_BUNDLED_AUTHDATA = 52374 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR = 52375 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_1 = 52376 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_2 = 52377 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_HTTP_AUTHDATA = 52378 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_SG_AUTHDATA = 52379 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_SG_AUTHDATA_1 = 52380 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_SG_AUTHDATA_2 = 52381 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_SG_AUTHDATA_3 = 52382 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_SG_AUTHDATA_4 = 52383 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_SG_AUTHDATA_5 = 52384 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_3 = 52385 | ConfigEvent.Severity.Warning,
            COMMON_HACK_61 = 52386 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_4 = 52387 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_5 = 52388 | ConfigEvent.Severity.Warning,
            COMMON_HACK_64 = 52389 | ConfigEvent.Severity.Warning,
            COMMON_HACK_65 = 52390 | ConfigEvent.Severity.Warning,
            COMMON_HACK_66 = 52391 | ConfigEvent.Severity.Warning,
            COMMON_HACK_67 = 52392 | ConfigEvent.Severity.Warning,
            COMMON_HACK_68 = 52393 | ConfigEvent.Severity.Warning,
            COMMON_HACK_69 = 52394 | ConfigEvent.Severity.Warning,
            COMMON_HACK_70 = 52395 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_6 = 52396 | ConfigEvent.Severity.Warning,
            COMMON_HACK_72 = 52397 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_7 = 52398 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_8 = 52399 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_9 = 52400 | ConfigEvent.Severity.Warning,
            COMMON_HACK_76 = 52401 | ConfigEvent.Severity.Warning,
            COMMON_HACK_77 = 52402 | ConfigEvent.Severity.Warning,
            COMMON_HACK_78 = 52403 | ConfigEvent.Severity.Warning,
            COMMON_HACK_79 = 52404 | ConfigEvent.Severity.Warning,
            COMMON_HACK_80 = 52405 | ConfigEvent.Severity.Warning,
            HACK_CONTENT_NOT_FOUND = 52406 | ConfigEvent.Severity.Warning,
            USER_AGENT_MISSING = 52412 | ConfigEvent.Severity.Error,
            USER_AGENT_INVALID = 52413 | ConfigEvent.Severity.Error,
            AAINFO_INVALID_REQUEST = 52414 | ConfigEvent.Severity.Error,
            COMMON_HACK_81 = 52415 | ConfigEvent.Severity.Error,
            AUTHDATA_VERIFICATION_ERROR_10 = 52416 | ConfigEvent.Severity.Error,
            COMMON_INFO_4 = 52529 | ConfigEvent.Severity.Info,
            COMMON_INFO_5 = 52530 | ConfigEvent.Severity.Info,
            COMMON_INFO_6 = 52531 | ConfigEvent.Severity.Info,
            COMMON_INFO_7 = 52532 | ConfigEvent.Severity.Info,
            COMMON_INFO_8 = 52533 | ConfigEvent.Severity.Info,
            COMMON_INFO_9 = 52534 | ConfigEvent.Severity.Info,
            COMMON_INFO_10 = 52535 | ConfigEvent.Severity.Info,
            COMMON_INFO_11 = 52536 | ConfigEvent.Severity.Info,
            COMMON_INFO_12 = 52537 | ConfigEvent.Severity.Info,
            COMMON_INFO_13 = 52538 | ConfigEvent.Severity.Info,
            COMMON_INFO_14 = 52539 | ConfigEvent.Severity.Info,
            COMMON_INFO_15 = 52540 | ConfigEvent.Severity.Info,
            COMMON_INFO_16 = 52541 | ConfigEvent.Severity.Info,
            COMMON_INFO_17 = 52542 | ConfigEvent.Severity.Info,
            COMMON_INFO_18 = 52543 | ConfigEvent.Severity.Info,
            COMMON_INFO_19 = 52544 | ConfigEvent.Severity.Info,
            COMMON_INFO_20 = 52545 | ConfigEvent.Severity.Info,
            COMMON_INFO_21 = 52546 | ConfigEvent.Severity.Info,
            COMMON_INFO_22 = 52547 | ConfigEvent.Severity.Info,
            COMMON_INFO_23 = 52548 | ConfigEvent.Severity.Info,
            COMMON_INFO_24 = 52549 | ConfigEvent.Severity.Info,
            COMMON_INFO_25 = 52550 | ConfigEvent.Severity.Info,
            COMMON_INFO_26 = 52551 | ConfigEvent.Severity.Info,
            COMMON_INFO_27 = 52552 | ConfigEvent.Severity.Info,
            COMMON_INFO_28 = 52553 | ConfigEvent.Severity.Info,
            COMMON_INFO_29 = 52554 | ConfigEvent.Severity.Info,
            COMMON_INFO_30 = 52555 | ConfigEvent.Severity.Info,
            COMMON_INFO_31 = 52556 | ConfigEvent.Severity.Info,
            COMMON_INFO_32 = 52557 | ConfigEvent.Severity.Info,
            COMMON_INFO_33 = 52558 | ConfigEvent.Severity.Info,
            COMMON_INFO_34 = 52559 | ConfigEvent.Severity.Info,
            COMMON_INFO_35 = 52560 | ConfigEvent.Severity.Info,
            COMMON_INFO_36 = 52561 | ConfigEvent.Severity.Info,
            COMMON_INFO_37 = 52562 | ConfigEvent.Severity.Info,
            COMMON_INFO_38 = 52563 | ConfigEvent.Severity.Info,
            COMMON_INFO_39 = 52564 | ConfigEvent.Severity.Info,
            COMMON_INFO_40 = 52565 | ConfigEvent.Severity.Info,
            MC_APPDOMAIN_STARTED = 52566 | ConfigEvent.Severity.Info,
            MC_APPDOMAIN_STARTED_1 = 52567 | ConfigEvent.Severity.Info,
            COMMON_INFO_43 = 52568 | ConfigEvent.Severity.Info,
            COMMON_INFO_44 = 52569 | ConfigEvent.Severity.Info,
            COMMON_INFO_45 = 52570 | ConfigEvent.Severity.Info,
            COMMON_INFO_46 = 52571 | ConfigEvent.Severity.Info,
            COMMON_INFO_47 = 52572 | ConfigEvent.Severity.Info,
            COMMON_INFO_48 = 52573 | ConfigEvent.Severity.Info,
            MGMT_SRV_CONNECTED = 52574 | ConfigEvent.Severity.Info,
            REPORTINGTARGET_RECONNECTED = 52575 | ConfigEvent.Severity.Info,
            CONFIG_CHANGE_PROCESSED = 52576 | ConfigEvent.Severity.Info,
            HEALTH_REPORT_GREEN = 52577 | ConfigEvent.Severity.Info,
            COMMON_CONFIG_INFO_HEALTH_CHANGE = 52578 | ConfigEvent.Severity.Info,
            COMMON_SETTING_BATCH_COUNT = 52579 | ConfigEvent.Severity.Info,
            COMMON_BUCKET_COUNT = 52580 | ConfigEvent.Severity.Info,
            COMMON_CONFIG_INFO_LIVE_REGISTRY_SETTINGS_CHANGE = 52581 | ConfigEvent.Severity.Info,
            COMMON_CONFIG_INFO_CONFIG_BLOBS_CHANGE = 52582 | ConfigEvent.Severity.Info,
            COMMON_CONFIG_INFO_ETX_MANIFEST_CHANGE = 52583 | ConfigEvent.Severity.Info,
            COMMON_WARNING_0 = 52725 | ConfigEvent.Severity.Warning,
            HEALTH_REPORT_YELLOW = 52726 | ConfigEvent.Severity.Warning,
            AUDIT_INVALID_SUBSYSTEM = 63800 | ConfigEvent.Severity.Error,
            AUDIT_NO_SETTING = 63801 | ConfigEvent.Severity.Error,
            AUDIT_LOG_FAILURE = 63802 | ConfigEvent.Severity.Error,
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\events\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86_common_event_none_12.4.56.0_none_06100b4f63e7102e
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86_common_event_no-public-key_12.4.56.0_x-ww_27f3551c
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=common_event
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86_common_event_no-public-key_12.4.56.0_x-ww_27f3551c
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86_common_event_no-public-key_12.4.56.0_x-ww_27f3551c.manifest
XP_MANIFEST_PATH=manifests\x86_common_event_no-public-key_12.4.56.0_x-ww_27f3551c.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86_common_event_no-public-key_12.4.56.0_x-ww_27f3551c.cat
XP_CATALOG_PATH=manifests\x86_common_event_no-public-key_12.4.56.0_x-ww_27f3551c.cat
XP_PAYLOAD_PATH=x86_common_event_no-public-key_12.4.56.0_x-ww_27f3551c
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=common_event,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\events\objd\ConfigEvent.Id.cs ===
// AUTO GENERATED FILE 
// MODIFY THE CORRESPONDING .xml AND .xsl FILES 
/////////////////////////////////////////////////////////////////////////////// 
 
using System; 
 
namespace xonline.common.config 
{ 
    internal partial class ConfigEvent 
    { 
        public enum Id : uint 
        { 
            SGINFO_CALL_SOURCE_INVALID = 40001 | ConfigEvent.Severity.Error,
            SGINFO_VERIFY_PRIVILEGE = 40002 | ConfigEvent.Severity.Error,
            XMGMT_FAILED_TO_REGISTER_ASSEMBLY = 40050 | ConfigEvent.Severity.Warning,
            HEALTH_REQUEST_FAILED = 40051 | ConfigEvent.Severity.Error,
            HEALTH_INITIALIZE_INTEROP_FAILED = 40052 | ConfigEvent.Severity.Error,
            HEALTH_REGISTERNATIVEHEALTHBLOCK_FAILED = 40053 | ConfigEvent.Severity.Error,
            HEALTH_LISTENER_CALLBACK_REQUEST_FAILED = 40054 | ConfigEvent.Severity.Error,
            HEALTH_LISTENER_CALLBACK_FAILED = 40055 | ConfigEvent.Severity.Error,
            MSNRR_EXTERNAL_EXCEPTION = 40056 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_INFO_SERVICE_KEYS_CHANGE = 40057 | ConfigEvent.Severity.Info,
            COMMON_CONFIG_SERVICE_KEYS_CHANGE = 40058 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_USING_NPDB_SETTINGS = 40059 | ConfigEvent.Severity.Warning,
            COMMON_CODE_20 = 50845 | ConfigEvent.Severity.Error,
            CRYPTO_GENERAL_ERROR = 50846 | ConfigEvent.Severity.Error,
            COMMON_CODE_22 = 50847 | ConfigEvent.Severity.Error,
            COMMON_CODE_23 = 50848 | ConfigEvent.Severity.Error,
            COMMON_CODE_24 = 50849 | ConfigEvent.Severity.Error,
            MC_APPLICATION_ERROR = 50850 | ConfigEvent.Severity.Error,
            COMMON_CODE_26 = 50851 | ConfigEvent.Severity.Error,
            COMMON_CODE_27 = 50852 | ConfigEvent.Severity.Error,
            COMMON_CODE_28 = 50853 | ConfigEvent.Severity.Error,
            COMMON_CODE_29 = 50854 | ConfigEvent.Severity.Error,
            COMMON_CODE_30 = 50855 | ConfigEvent.Severity.Error,
            COMMON_CODE_31 = 50856 | ConfigEvent.Severity.Error,
            COMMON_CODE_32 = 50857 | ConfigEvent.Severity.Error,
            COMMON_CODE_33 = 50858 | ConfigEvent.Severity.Error,
            COMMON_CODE_34 = 50859 | ConfigEvent.Severity.Error,
            COMMON_CODE_35 = 50860 | ConfigEvent.Severity.Error,
            COMMON_CODE_36 = 50861 | ConfigEvent.Severity.Error,
            COMMON_CODE_37 = 50862 | ConfigEvent.Severity.Error,
            COMMON_CODE_38 = 50863 | ConfigEvent.Severity.Error,
            MC_PLUGIN_ERROR = 50864 | ConfigEvent.Severity.Error,
            MC_PLUGIN_ERROR_1 = 50865 | ConfigEvent.Severity.Error,
            COMMON_CODE_41 = 50866 | ConfigEvent.Severity.Error,
            COMMON_CODE_42 = 50867 | ConfigEvent.Severity.Error,
            COMMON_CODE_43 = 50868 | ConfigEvent.Severity.Error,
            COMMON_CODE_46 = 50871 | ConfigEvent.Severity.Error,
            COMMON_CODE_48 = 50873 | ConfigEvent.Severity.Error,
            QUERY_BAD_PARAMETER = 50876 | ConfigEvent.Severity.Error,
            QUERY_BAD_PARAMETER_1 = 50877 | ConfigEvent.Severity.Error,
            COMMON_CODE_53 = 50878 | ConfigEvent.Severity.Error,
            COMMON_CODE_54 = 50879 | ConfigEvent.Severity.Error,
            COMMON_CODE_55 = 50880 | ConfigEvent.Severity.Error,
            COMMON_CODE_56 = 50881 | ConfigEvent.Severity.Error,
            COMMON_CODE_57 = 50882 | ConfigEvent.Severity.Error,
            COMMON_CODE_58 = 50883 | ConfigEvent.Severity.Error,
            COMMON_CODE_59 = 50884 | ConfigEvent.Severity.Error,
            MC_BAD_PARAMETER = 50885 | ConfigEvent.Severity.Error,
            MC_BAD_PARAMETER_1 = 50886 | ConfigEvent.Severity.Error,
            MC_APPLICATION_ERROR_1 = 50887 | ConfigEvent.Severity.Error,
            MC_APPLICATION_ERROR_2 = 50888 | ConfigEvent.Severity.Error,
            MC_APPLICATION_ERROR_3 = 50889 | ConfigEvent.Severity.Error,
            MC_BAD_PARAMETER_2 = 50890 | ConfigEvent.Severity.Error,
            COMMON_CODE_66 = 50891 | ConfigEvent.Severity.Error,
            MC_BAD_CODE = 50892 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_1 = 50893 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_2 = 50894 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_3 = 50895 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_4 = 50896 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_5 = 50897 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_6 = 50898 | ConfigEvent.Severity.Error,
            COMMON_CODE_74 = 50899 | ConfigEvent.Severity.Error,
            COMMON_CODE_75 = 50900 | ConfigEvent.Severity.Error,
            COMMON_CODE_76 = 50901 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_7 = 50902 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_8 = 50903 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_9 = 50904 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_10 = 50905 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_11 = 50906 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_12 = 50907 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_13 = 50908 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_14 = 50909 | ConfigEvent.Severity.Error,
            COMMON_CODE_85 = 50910 | ConfigEvent.Severity.Error,
            COMMON_CODE_86 = 50911 | ConfigEvent.Severity.Error,
            FORBIDDEN_NAMES_LOAD_FAILURE = 50912 | ConfigEvent.Severity.Error,
            MC_APPLICATION_ERROR_5 = 50913 | ConfigEvent.Severity.Error,
            MC_APPLICATION_ERROR_6 = 50914 | ConfigEvent.Severity.Error,
            MC_APPLICATION_ERROR_7 = 50915 | ConfigEvent.Severity.Error,
            COMMON_CODE_91 = 50916 | ConfigEvent.Severity.Error,
            COMMON_CODE_92 = 50917 | ConfigEvent.Severity.Error,
            MGMT_GENERIC_ERROR = 50918 | ConfigEvent.Severity.Error,
            MGMT_GENERIC_ERROR_1 = 50919 | ConfigEvent.Severity.Error,
            MGMT_GENERIC_ERROR_2 = 50920 | ConfigEvent.Severity.Error,
            MGMT_GENERIC_ERROR_3 = 50921 | ConfigEvent.Severity.Error,
            COMMON_CODE_97 = 50922 | ConfigEvent.Severity.Error,
            MGMT_GENERIC_ERROR_4 = 50923 | ConfigEvent.Severity.Error,
            COMMON_CODE_99 = 50924 | ConfigEvent.Severity.Error,
            COMMON_CODE_100 = 50925 | ConfigEvent.Severity.Error,
            COMMON_CODE_101 = 50926 | ConfigEvent.Severity.Error,
            COMMON_CODE_102 = 50927 | ConfigEvent.Severity.Error,
            COMMON_CODE_103 = 50928 | ConfigEvent.Severity.Error,
            COMMON_CODE_104 = 50929 | ConfigEvent.Severity.Error,
            COMMON_CODE_105 = 50930 | ConfigEvent.Severity.Error,
            COMMON_CODE_106 = 50931 | ConfigEvent.Severity.Error,
            COMMON_CODE_107 = 50932 | ConfigEvent.Severity.Error,
            COMMON_CODE_108 = 50933 | ConfigEvent.Severity.Error,
            COMMON_CODE_109 = 50934 | ConfigEvent.Severity.Error,
            HEALTH_GENERIC_ERROR_1 = 50935 | ConfigEvent.Severity.Error,
            SQL_EXECUTE_READER = 50936 | ConfigEvent.Severity.Error,
            SQL_EXECUTE_READER_BEHAVIOR = 50937 | ConfigEvent.Severity.Error,
            SQL_EXECUTE_NON_QUERY = 50938 | ConfigEvent.Severity.Error,
            SQL_EXECUTE_SCALAR = 50939 | ConfigEvent.Severity.Error,
            COUNTRY_LIST_MISSING = 50940 | ConfigEvent.Severity.Error,
            COMMON_CODE_117 = 50942 | ConfigEvent.Severity.Error,
            COMMON_CODE_118 = 50943 | ConfigEvent.Severity.Error,
            COMMON_CODE_119 = 50944 | ConfigEvent.Severity.Error,
            COMMON_CODE_120 = 50945 | ConfigEvent.Severity.Error,
            COMMON_CODE_121 = 50946 | ConfigEvent.Severity.Error,
            COMMON_CODE_122 = 50947 | ConfigEvent.Severity.Error,
            MUSICNET_EXTERNAL_EXCEPTION = 50958 | ConfigEvent.Severity.Error,
            COMMON_CODE_146 = 50971 | ConfigEvent.Severity.Error,
            COMMON_CODE_147 = 50972 | ConfigEvent.Severity.Error,
            COMMON_CODE_148 = 50973 | ConfigEvent.Severity.Error,
            COMMON_CODE_149 = 50974 | ConfigEvent.Severity.Error,
            COMMON_CODE_150 = 50975 | ConfigEvent.Severity.Error,
            COMMON_CODE_151 = 50976 | ConfigEvent.Severity.Error,
            COMMON_CODE_152 = 50977 | ConfigEvent.Severity.Error,
            COMMON_CODE_153 = 50978 | ConfigEvent.Severity.Error,
            COMMON_CODE_154 = 50979 | ConfigEvent.Severity.Error,
            COMMON_CODE_155 = 50980 | ConfigEvent.Severity.Error,
            COMMON_CODE_156 = 50981 | ConfigEvent.Severity.Error,
            COMMON_CODE_157 = 50982 | ConfigEvent.Severity.Error,
            COMMON_CODE_158 = 50983 | ConfigEvent.Severity.Error,
            COMMON_CODE_159 = 50984 | ConfigEvent.Severity.Error,
            COMMON_CODE_160 = 50985 | ConfigEvent.Severity.Error,
            COMMON_CODE_161 = 50986 | ConfigEvent.Severity.Error,
            COMMON_CODE_162 = 50987 | ConfigEvent.Severity.Error,
            COMMON_CODE_163 = 50988 | ConfigEvent.Severity.Error,
            COMMON_CODE_164 = 50989 | ConfigEvent.Severity.Error,
            COMMON_CODE_165 = 50990 | ConfigEvent.Severity.Error,
            COMMON_CODE_166 = 50991 | ConfigEvent.Severity.Error,
            COMMON_CODE_167 = 50992 | ConfigEvent.Severity.Error,
            COMMON_CODE_168 = 50993 | ConfigEvent.Severity.Error,
            COMMON_CODE_169 = 50994 | ConfigEvent.Severity.Error,
            COMMON_CODE_170 = 50995 | ConfigEvent.Severity.Error,
            COMMON_CODE_171 = 50996 | ConfigEvent.Severity.Error,
            COMMON_CODE_172 = 50997 | ConfigEvent.Severity.Error,
            COMMON_CODE_173 = 50998 | ConfigEvent.Severity.Error,
            COMMON_CODE_174 = 50999 | ConfigEvent.Severity.Error,
            COMMON_CODE_175 = 51000 | ConfigEvent.Severity.Error,
            COMMON_CODE_176 = 51001 | ConfigEvent.Severity.Error,
            COMMON_CODE_177 = 51002 | ConfigEvent.Severity.Error,
            COMMON_CODE_178 = 51003 | ConfigEvent.Severity.Error,
            COMMON_CODE_179 = 51004 | ConfigEvent.Severity.Error,
            COMMON_CODE_180 = 51005 | ConfigEvent.Severity.Error,
            COMMON_CODE_181 = 51006 | ConfigEvent.Severity.Error,
            COMMON_CODE_182 = 51007 | ConfigEvent.Severity.Error,
            COMMON_CODE_183 = 51008 | ConfigEvent.Severity.Error,
            COMMON_CODE_184 = 51009 | ConfigEvent.Severity.Error,
            COMMON_CODE_185 = 51010 | ConfigEvent.Severity.Error,
            WEBSTORE_EXECUTE_ERROR = 51011 | ConfigEvent.Severity.Error,
            WEBSTORE_EXECUTE_TIMEOUT_ERROR = 51012 | ConfigEvent.Severity.Error,
            WEBSTORE_EXECUTE_DEADLOCK_ERROR = 51013 | ConfigEvent.Severity.Error,
            COMMON_CODE_189 = 51014 | ConfigEvent.Severity.Error,
            COMMON_CODE_190 = 51015 | ConfigEvent.Severity.Error,
            COMMON_CODE_191 = 51016 | ConfigEvent.Severity.Error,
            COMMON_CODE_192 = 51017 | ConfigEvent.Severity.Error,
            COMMON_CODE_193 = 51018 | ConfigEvent.Severity.Error,
            COMMON_CODE_194 = 51019 | ConfigEvent.Severity.Error,
            COMMON_CODE_195 = 51020 | ConfigEvent.Severity.Error,
            COMMON_CODE_196 = 51021 | ConfigEvent.Severity.Error,
            COMMON_CODE_197 = 51022 | ConfigEvent.Severity.Error,
            COMMON_CODE_198 = 51023 | ConfigEvent.Severity.Error,
            COMMON_CODE_199 = 51024 | ConfigEvent.Severity.Error,
            COMMON_CODE_200 = 51025 | ConfigEvent.Severity.Error,
            DEPRECATED_SYNCCAST_EXTERNAL_EXCEPTION = 51030 | ConfigEvent.Severity.Error,
            COMMON_CODE_208 = 51033 | ConfigEvent.Severity.Error,
            COMMON_CODE_209 = 51034 | ConfigEvent.Severity.Error,
            COMMON_CODE_210 = 51035 | ConfigEvent.Severity.Error,
            COMMON_CODE_211 = 51036 | ConfigEvent.Severity.Error,
            COMMON_CODE_212 = 51037 | ConfigEvent.Severity.Error,
            COMMON_CODE_213 = 51038 | ConfigEvent.Severity.Error,
            COMMON_CODE_214 = 51039 | ConfigEvent.Severity.Error,
            COMMON_CODE_215 = 51040 | ConfigEvent.Severity.Error,
            COMMON_CODE_216 = 51041 | ConfigEvent.Severity.Error,
            COMMON_CODE_217 = 51042 | ConfigEvent.Severity.Error,
            COMMON_CODE_218 = 51043 | ConfigEvent.Severity.Error,
            COMMON_CODE_219 = 51044 | ConfigEvent.Severity.Error,
            COMMON_CODE_220 = 51045 | ConfigEvent.Severity.Error,
            COMMON_CODE_221 = 51046 | ConfigEvent.Severity.Error,
            COMMON_CODE_222 = 51047 | ConfigEvent.Severity.Error,
            COMMON_CODE_223 = 51048 | ConfigEvent.Severity.Error,
            COMMON_CODE_224 = 51049 | ConfigEvent.Severity.Error,
            COMMON_CODE_225 = 51050 | ConfigEvent.Severity.Error,
            COMMON_CODE_226 = 51051 | ConfigEvent.Severity.Error,
            COMMON_CODE_227 = 51052 | ConfigEvent.Severity.Error,
            COMMON_CODE_228 = 51053 | ConfigEvent.Severity.Error,
            DEPRECATED_COMMON_CODE_229 = 51054 | ConfigEvent.Severity.Error,
            DEPRECATED_COMMON_CODE_230 = 51055 | ConfigEvent.Severity.Error,
            COMMON_CODE_231 = 51056 | ConfigEvent.Severity.Error,
            COMMON_CODE_232 = 51057 | ConfigEvent.Severity.Error,
            WMIS_EXTERNAL_EXCEPTION = 51058 | ConfigEvent.Severity.Error,
            COMMON_CODE_MATCH_STARTMIGRATE_FAILED = 51059 | ConfigEvent.Severity.Error,
            COMMON_CODE_MATCH_MIGRATESTATUS_FAILED_SPROC = 51060 | ConfigEvent.Severity.Error,
            COMMON_CODE_MATCH_UPDLTC_TV_FAILED = 51061 | ConfigEvent.Severity.Error,
            COMMON_CODE_MATCH_UPDLTC_NPDB_FAILED = 51062 | ConfigEvent.Severity.Error,
            COMMON_CODE_LSPLIB_SQLEXCEPTION = 51063 | ConfigEvent.Severity.Error,
            HEALTH_REPORT_RED = 51064 | ConfigEvent.Severity.Error,
            HEALTH_ENGINE_FAILURE = 51065 | ConfigEvent.Severity.Error,
            FEAPP_INITIALIZATION_METHOD_FAILED = 51066 | ConfigEvent.Severity.Error,
            FEAPP_INITIALIZATION_METHOD_NOT_FOUND = 51067 | ConfigEvent.Severity.Error,
            FAST_FAIL_MISSING_COUNTERS = 51068 | ConfigEvent.Severity.Error,
            FAST_FAIL_MISSING_RESOURCE = 51069 | ConfigEvent.Severity.Error,
            FEAPP_COMPRESSION_ERROR = 51070 | ConfigEvent.Severity.Error,
            UNHANDLED_THREAD_EXCEPTION = 51071 | ConfigEvent.Severity.Error,
            FEAPP_INIT_FAILURE = 51072 | ConfigEvent.Severity.Error,
            FORBIDDEN_NAMES_EXCLUDED_TITLES_CONFIG_ERROR = 51073 | ConfigEvent.Severity.Error,
            COMMON_COMM_6 = 51231 | ConfigEvent.Severity.Error,
            COMMON_COMM_7 = 51232 | ConfigEvent.Severity.Error,
            COMMON_COMM_8 = 51233 | ConfigEvent.Severity.Error,
            COMMON_COMM_9 = 51234 | ConfigEvent.Severity.Error,
            COMMON_COMM_10 = 51235 | ConfigEvent.Severity.Error,
            COMMON_COMM_11 = 51236 | ConfigEvent.Severity.Error,
            COMMON_COMM_12 = 51237 | ConfigEvent.Severity.Error,
            COMMON_COMM_13 = 51238 | ConfigEvent.Severity.Error,
            XCACHE_CLIENT_BROKEN_PIPE = 51239 | ConfigEvent.Severity.Error,
            XCACHE_CLIENT_BROKEN_PIPE_1 = 51240 | ConfigEvent.Severity.Error,
            XCACHE_CLIENT_BROKEN_PIPE_2 = 51241 | ConfigEvent.Severity.Error,
            XCACHE_CLIENT_BROKEN_PIPE_3 = 51242 | ConfigEvent.Severity.Error,
            XCACHE_CLIENT_BROKEN_PIPE_4 = 51243 | ConfigEvent.Severity.Error,
            XCACHE_SERVER_BUSY = 51244 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE = 51245 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_1 = 51246 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_2 = 51247 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_3 = 51248 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_4 = 51249 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_5 = 51250 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_6 = 51251 | ConfigEvent.Severity.Error,
            PIPE_FAILURE = 51252 | ConfigEvent.Severity.Error,
            PIPE_FAILURE_1 = 51253 | ConfigEvent.Severity.Error,
            PIPE_FAILURE_2 = 51254 | ConfigEvent.Severity.Error,
            AUTHDATA_SG_COMMUNICATION_ERROR = 51255 | ConfigEvent.Severity.Error,
            COMMON_COMM_31 = 51256 | ConfigEvent.Severity.Error,
            AUTHDATA_SG_COMMUNICATION_ERROR_1 = 51257 | ConfigEvent.Severity.Error,
            MC_XRL_REQUEST_ERROR = 51258 | ConfigEvent.Severity.Error,
            COMMON_COMM_34 = 51259 | ConfigEvent.Severity.Error,
            COMMON_COMM_35 = 51260 | ConfigEvent.Severity.Error,
            COMMON_COMM_36 = 51261 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_7 = 51262 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_RESPONSE_1 = 51263 | ConfigEvent.Severity.Error,
            FORBIDDEN_NAMES_LOAD_SUCCESS = 51264 | ConfigEvent.Severity.Info,
            FORBIDDEN_NAMES_UNVETTED_STRING = 51265 | ConfigEvent.Severity.Error,
            MUSICNET_ACCOUNT_CREATE_FAILED = 51354 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_69 = 51394 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_70 = 51395 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_71 = 51396 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_72 = 51397 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_73 = 51398 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_74 = 51399 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_75 = 51400 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_76 = 51401 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_77 = 51402 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_78 = 51403 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_79 = 51404 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_80 = 51405 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_81 = 51406 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_82 = 51407 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_83 = 51408 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_84 = 51409 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_85 = 51410 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_86 = 51411 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_87 = 51412 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_88 = 51413 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_89 = 51414 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_90 = 51415 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_91 = 51416 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_92 = 51417 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_93 = 51418 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_94 = 51419 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_95 = 51420 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_96 = 51421 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_97 = 51422 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_98 = 51423 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_99 = 51424 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_100 = 51425 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_101 = 51426 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_102 = 51427 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_103 = 51428 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_104 = 51429 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_105 = 51430 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_106 = 51431 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_107 = 51432 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_108 = 51433 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_109 = 51434 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_110 = 51435 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_111 = 51436 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_112 = 51437 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_113 = 51438 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_114 = 51439 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_115 = 51440 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_116 = 51441 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_117 = 51442 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_118 = 51443 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_119 = 51444 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_120 = 51445 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_121 = 51446 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_122 = 51447 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_123 = 51448 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_124 = 51449 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_125 = 51450 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_126 = 51451 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_127 = 51452 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_128 = 51453 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_129 = 51454 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_130 = 51455 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_131 = 51456 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_132 = 51457 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_133 = 51458 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_134 = 51459 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_135 = 51460 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_136 = 51461 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_137 = 51462 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_138 = 51463 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_139 = 51464 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_140 = 51465 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_141 = 51466 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_142 = 51467 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_143 = 51468 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_144 = 51469 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_145 = 51470 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_146 = 51471 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_147 = 51472 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_148 = 51473 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_149 = 51474 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_150 = 51475 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_151 = 51476 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_152 = 51477 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_153 = 51478 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_154 = 51479 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_155 = 51480 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_156 = 51481 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_157 = 51482 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_158 = 51483 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_159 = 51484 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_160 = 51485 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_161 = 51486 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_162 = 51487 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_163 = 51488 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_164 = 51489 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_165 = 51490 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_166 = 51491 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_167 = 51492 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_168 = 51493 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_169 = 51494 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_170 = 51495 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_171 = 51496 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_172 = 51497 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_173 = 51498 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_174 = 51499 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_175 = 51500 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_176 = 51501 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_177 = 51502 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_178 = 51503 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_179 = 51504 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_180 = 51505 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_181 = 51506 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_182 = 51507 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_183 = 51508 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_184 = 51509 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_185 = 51510 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_186 = 51511 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_187 = 51512 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_188 = 51513 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_189 = 51514 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_190 = 51515 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_191 = 51516 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_192 = 51517 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_193 = 51518 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_194 = 51519 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_195 = 51520 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_196 = 51521 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_197 = 51522 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_198 = 51523 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_199 = 51524 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_200 = 51525 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_201 = 51526 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_202 = 51527 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_203 = 51528 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_204 = 51529 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_205 = 51530 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_206 = 51531 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_207 = 51532 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_208 = 51533 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_209 = 51534 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_210 = 51535 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_211 = 51536 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_212 = 51537 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_213 = 51538 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_214 = 51539 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_215 = 51540 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_216 = 51541 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_217 = 51542 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_218 = 51543 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_219 = 51544 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_220 = 51545 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_221 = 51546 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_222 = 51547 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_223 = 51548 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_224 = 51549 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_225 = 51550 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_226 = 51551 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_227 = 51552 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_228 = 51553 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_229 = 51554 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_230 = 51555 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_231 = 51556 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_232 = 51557 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_233 = 51558 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_234 = 51559 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_235 = 51560 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_236 = 51561 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_237 = 51562 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_238 = 51563 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_239 = 51564 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_240 = 51565 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_241 = 51566 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_242 = 51567 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_243 = 51568 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_244 = 51569 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_245 = 51570 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_246 = 51571 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_247 = 51572 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_248 = 51573 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_249 = 51574 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_250 = 51575 | ConfigEvent.Severity.Error,
            DEPRECATED_COMMON_CONFIG_251 = 51576 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_252 = 51577 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_253 = 51578 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_254 = 51579 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_255 = 51580 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_256 = 51581 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_257 = 51582 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_258 = 51583 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_259 = 51584 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_260 = 51585 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_261 = 51586 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_262 = 51587 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_263 = 51588 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_264 = 51589 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_265 = 51590 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_266 = 51591 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_PIPE_HANDLE_DISPOSED = 51593 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_270 = 51595 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_272 = 51597 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_274 = 51599 | ConfigEvent.Severity.Error,
            MC_SGINFO_IS_OFF = 51600 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_276 = 51601 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_277 = 51602 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_278 = 51603 | ConfigEvent.Severity.Error,
            MC_BAD_CONFIG_DATA_4 = 51604 | ConfigEvent.Severity.Error,
            MC_BAD_CONFIG_DATA_5 = 51605 | ConfigEvent.Severity.Error,
            MC_BAD_CONFIG_DATA_6 = 51606 | ConfigEvent.Severity.Error,
            MC_BAD_CONFIG_DATA_7 = 51607 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_283 = 51608 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_284 = 51609 | ConfigEvent.Severity.Error,
            MC_BAD_CONFIG_DATA_8 = 51610 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_286 = 51611 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_287 = 51612 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_288 = 51613 | ConfigEvent.Severity.Error,
            MGMT_CRITICAL_ERROR = 51614 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE = 51615 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_291 = 51616 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_292 = 51617 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_293 = 51618 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE_1 = 51619 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE_2 = 51620 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE_3 = 51621 | ConfigEvent.Severity.Error,
            MGMT_INIT_WARNING = 51622 | ConfigEvent.Severity.Warning,
            MGMT_INIT_FAILURE_4 = 51623 | ConfigEvent.Severity.Error,
            MGMT_SRV_DISCONNECT = 51624 | ConfigEvent.Severity.Error,
            MGMT_SRV_DISCONNECT_1 = 51625 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE_5 = 51626 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE_6 = 51627 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING = 51628 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_1 = 51629 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_2 = 51630 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_3 = 51631 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_307 = 51632 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_4 = 51633 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_5 = 51634 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_310 = 51635 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_311 = 51636 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_6 = 51637 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_7 = 51638 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_8 = 51639 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_9 = 51640 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_10 = 51641 | ConfigEvent.Severity.Error,
            MGMT_REMOTE_TARGET_WARNING = 51642 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_318 = 51643 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_319 = 51644 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_320 = 51645 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_321 = 51646 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_322 = 51647 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_323 = 51648 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_324 = 51649 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_325 = 51650 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_326 = 51651 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_327 = 51652 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_328 = 51653 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_329 = 51654 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_330 = 51655 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_331 = 51656 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_332 = 51657 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_333 = 51658 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_334 = 51659 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_335 = 51660 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_336 = 51661 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_337 = 51662 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_338 = 51663 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_339 = 51664 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE_7 = 51665 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE_8 = 51666 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE_9 = 51667 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_INTEROP_REPORTMESSAGECOMPONENTID_FAILURE = 51668 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_INTEROP_ADDREPORTMESSAGECOMPONENTIDMAPPING_FAILURE = 51669 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_INTEROP_REPORTMESSAGECLEANSERVIRTUALINTERFACE_FAILURE = 51670 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_340 = 51671 | ConfigEvent.Severity.Error,
            MGMT_READ_FAILURE = 51672 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_BAD_XLAST_FILE = 51674 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_LTC_TIB_COUNTS_OUTOFSYNC = 51675 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_LTC_TIB_SERVERS_OUTOFSYNC_1 = 51676 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_LTC_TIB_SERVERS_OUTOFSYNC_2 = 51677 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_LTC_TIB_OUTOFSYNC = 51678 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_UNEXPECTED_MODE_IN_XLAST = 51679 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_MISSING_MODE_IN_XLAST = 51680 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_ENDMIGRATE_FAILED_NONEXT = 51681 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_ENDMIGRATE_FAILED_MISSING_BUCKET = 51682 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_EXPMIGRATE_FAILED_NOTSTARTED = 51683 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_ENDMIGRATE_FAILED_LTC_TIB_OUTOFSYNC = 51684 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_ADDRR_FAILED_MISSING_BUCKET = 51685 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_ADDRR_FAILED_DUPE_SERVER = 51686 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_UPDLTC_INVALID_LTC = 51687 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_DEFAULTBUCKETS_OVERWRITE = 51688 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_CONFIRMSERVER_BADSERVER = 51689 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_PREPLTC_TID_MISMATCH = 51690 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_NO_PARTMAP = 51691 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_PREPCONFIG_TID_MISMATCH = 51692 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_GET_REFRESH_FUNCTIONS = 51693 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_HEALTH_CHANGE = 51694 | ConfigEvent.Severity.Error,
            COMMON_SETTING_BATCH_CONSTRUCTION = 51695 | ConfigEvent.Severity.Error,
            COMMON_SETTING_BATCH_QUERY = 51696 | ConfigEvent.Severity.Error,
            COMMON_SETTING_BATCH_SETTING_DELETED = 51697 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_REGISTER_DYNAMIC_SETTING_FAILURE = 51698 | ConfigEvent.Severity.Error,
            COMMON_BUCKETS_BATCH_CONSTRUCTION = 51699 | ConfigEvent.Severity.Error,
            COMMON_BUCKET_BATCH_QUERY = 51700 | ConfigEvent.Severity.Error,
            COMMON_BUCKET_BATCH_DELETED = 51701 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_LIVE_REGISTRY_SETTINGS_CHANGE = 51702 | ConfigEvent.Severity.Error,
            PERFORMANCE_COUNTERS_0 = 51703 | ConfigEvent.Severity.Error,
            COMMON_HACK_4 = 52329 | ConfigEvent.Severity.Warning,
            COMMON_HACK_5 = 52330 | ConfigEvent.Severity.Warning,
            COMMON_HACK_6 = 52331 | ConfigEvent.Severity.Warning,
            COMMON_HACK_7 = 52332 | ConfigEvent.Severity.Warning,
            COMMON_HACK_8 = 52333 | ConfigEvent.Severity.Warning,
            COMMON_HACK_9 = 52334 | ConfigEvent.Severity.Warning,
            COMMON_HACK_10 = 52335 | ConfigEvent.Severity.Warning,
            COMMON_HACK_11 = 52336 | ConfigEvent.Severity.Warning,
            COMMON_HACK_12 = 52337 | ConfigEvent.Severity.Warning,
            COMMON_HACK_13 = 52338 | ConfigEvent.Severity.Warning,
            COMMON_HACK_14 = 52339 | ConfigEvent.Severity.Warning,
            COMMON_HACK_15 = 52340 | ConfigEvent.Severity.Warning,
            COMMON_HACK_16 = 52341 | ConfigEvent.Severity.Warning,
            COMMON_HACK_17 = 52342 | ConfigEvent.Severity.Warning,
            COMMON_HACK_18 = 52343 | ConfigEvent.Severity.Warning,
            COMMON_HACK_19 = 52344 | ConfigEvent.Severity.Warning,
            COMMON_HACK_20 = 52345 | ConfigEvent.Severity.Warning,
            COMMON_HACK_21 = 52346 | ConfigEvent.Severity.Warning,
            COMMON_HACK_22 = 52347 | ConfigEvent.Severity.Warning,
            COMMON_HACK_23 = 52348 | ConfigEvent.Severity.Warning,
            COMMON_HACK_24 = 52349 | ConfigEvent.Severity.Warning,
            COMMON_HACK_25 = 52350 | ConfigEvent.Severity.Warning,
            COMMON_HACK_26 = 52351 | ConfigEvent.Severity.Warning,
            COMMON_HACK_27 = 52352 | ConfigEvent.Severity.Warning,
            COMMON_HACK_28 = 52353 | ConfigEvent.Severity.Warning,
            COMMON_HACK_33 = 52358 | ConfigEvent.Severity.Warning,
            COMMON_HACK_34 = 52359 | ConfigEvent.Severity.Warning,
            COMMON_HACK_40 = 52365 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS = 52366 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_1 = 52367 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_2 = 52368 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_3 = 52369 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_4 = 52370 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_5 = 52371 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_6 = 52372 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_7 = 52373 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_BUNDLED_AUTHDATA = 52374 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR = 52375 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_1 = 52376 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_2 = 52377 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_HTTP_AUTHDATA = 52378 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_SG_AUTHDATA = 52379 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_SG_AUTHDATA_1 = 52380 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_SG_AUTHDATA_2 = 52381 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_SG_AUTHDATA_3 = 52382 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_SG_AUTHDATA_4 = 52383 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_SG_AUTHDATA_5 = 52384 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_3 = 52385 | ConfigEvent.Severity.Warning,
            COMMON_HACK_61 = 52386 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_4 = 52387 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_5 = 52388 | ConfigEvent.Severity.Warning,
            COMMON_HACK_64 = 52389 | ConfigEvent.Severity.Warning,
            COMMON_HACK_65 = 52390 | ConfigEvent.Severity.Warning,
            COMMON_HACK_66 = 52391 | ConfigEvent.Severity.Warning,
            COMMON_HACK_67 = 52392 | ConfigEvent.Severity.Warning,
            COMMON_HACK_68 = 52393 | ConfigEvent.Severity.Warning,
            COMMON_HACK_69 = 52394 | ConfigEvent.Severity.Warning,
            COMMON_HACK_70 = 52395 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_6 = 52396 | ConfigEvent.Severity.Warning,
            COMMON_HACK_72 = 52397 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_7 = 52398 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_8 = 52399 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_9 = 52400 | ConfigEvent.Severity.Warning,
            COMMON_HACK_76 = 52401 | ConfigEvent.Severity.Warning,
            COMMON_HACK_77 = 52402 | ConfigEvent.Severity.Warning,
            COMMON_HACK_78 = 52403 | ConfigEvent.Severity.Warning,
            COMMON_HACK_79 = 52404 | ConfigEvent.Severity.Warning,
            COMMON_HACK_80 = 52405 | ConfigEvent.Severity.Warning,
            HACK_CONTENT_NOT_FOUND = 52406 | ConfigEvent.Severity.Warning,
            USER_AGENT_MISSING = 52412 | ConfigEvent.Severity.Error,
            USER_AGENT_INVALID = 52413 | ConfigEvent.Severity.Error,
            AAINFO_INVALID_REQUEST = 52414 | ConfigEvent.Severity.Error,
            COMMON_HACK_81 = 52415 | ConfigEvent.Severity.Error,
            AUTHDATA_VERIFICATION_ERROR_10 = 52416 | ConfigEvent.Severity.Error,
            COMMON_INFO_4 = 52529 | ConfigEvent.Severity.Info,
            COMMON_INFO_5 = 52530 | ConfigEvent.Severity.Info,
            COMMON_INFO_6 = 52531 | ConfigEvent.Severity.Info,
            COMMON_INFO_7 = 52532 | ConfigEvent.Severity.Info,
            COMMON_INFO_8 = 52533 | ConfigEvent.Severity.Info,
            COMMON_INFO_9 = 52534 | ConfigEvent.Severity.Info,
            COMMON_INFO_10 = 52535 | ConfigEvent.Severity.Info,
            COMMON_INFO_11 = 52536 | ConfigEvent.Severity.Info,
            COMMON_INFO_12 = 52537 | ConfigEvent.Severity.Info,
            COMMON_INFO_13 = 52538 | ConfigEvent.Severity.Info,
            COMMON_INFO_14 = 52539 | ConfigEvent.Severity.Info,
            COMMON_INFO_15 = 52540 | ConfigEvent.Severity.Info,
            COMMON_INFO_16 = 52541 | ConfigEvent.Severity.Info,
            COMMON_INFO_17 = 52542 | ConfigEvent.Severity.Info,
            COMMON_INFO_18 = 52543 | ConfigEvent.Severity.Info,
            COMMON_INFO_19 = 52544 | ConfigEvent.Severity.Info,
            COMMON_INFO_20 = 52545 | ConfigEvent.Severity.Info,
            COMMON_INFO_21 = 52546 | ConfigEvent.Severity.Info,
            COMMON_INFO_22 = 52547 | ConfigEvent.Severity.Info,
            COMMON_INFO_23 = 52548 | ConfigEvent.Severity.Info,
            COMMON_INFO_24 = 52549 | ConfigEvent.Severity.Info,
            COMMON_INFO_25 = 52550 | ConfigEvent.Severity.Info,
            COMMON_INFO_26 = 52551 | ConfigEvent.Severity.Info,
            COMMON_INFO_27 = 52552 | ConfigEvent.Severity.Info,
            COMMON_INFO_28 = 52553 | ConfigEvent.Severity.Info,
            COMMON_INFO_29 = 52554 | ConfigEvent.Severity.Info,
            COMMON_INFO_30 = 52555 | ConfigEvent.Severity.Info,
            COMMON_INFO_31 = 52556 | ConfigEvent.Severity.Info,
            COMMON_INFO_32 = 52557 | ConfigEvent.Severity.Info,
            COMMON_INFO_33 = 52558 | ConfigEvent.Severity.Info,
            COMMON_INFO_34 = 52559 | ConfigEvent.Severity.Info,
            COMMON_INFO_35 = 52560 | ConfigEvent.Severity.Info,
            COMMON_INFO_36 = 52561 | ConfigEvent.Severity.Info,
            COMMON_INFO_37 = 52562 | ConfigEvent.Severity.Info,
            COMMON_INFO_38 = 52563 | ConfigEvent.Severity.Info,
            COMMON_INFO_39 = 52564 | ConfigEvent.Severity.Info,
            COMMON_INFO_40 = 52565 | ConfigEvent.Severity.Info,
            MC_APPDOMAIN_STARTED = 52566 | ConfigEvent.Severity.Info,
            MC_APPDOMAIN_STARTED_1 = 52567 | ConfigEvent.Severity.Info,
            COMMON_INFO_43 = 52568 | ConfigEvent.Severity.Info,
            COMMON_INFO_44 = 52569 | ConfigEvent.Severity.Info,
            COMMON_INFO_45 = 52570 | ConfigEvent.Severity.Info,
            COMMON_INFO_46 = 52571 | ConfigEvent.Severity.Info,
            COMMON_INFO_47 = 52572 | ConfigEvent.Severity.Info,
            COMMON_INFO_48 = 52573 | ConfigEvent.Severity.Info,
            MGMT_SRV_CONNECTED = 52574 | ConfigEvent.Severity.Info,
            REPORTINGTARGET_RECONNECTED = 52575 | ConfigEvent.Severity.Info,
            CONFIG_CHANGE_PROCESSED = 52576 | ConfigEvent.Severity.Info,
            HEALTH_REPORT_GREEN = 52577 | ConfigEvent.Severity.Info,
            COMMON_CONFIG_INFO_HEALTH_CHANGE = 52578 | ConfigEvent.Severity.Info,
            COMMON_SETTING_BATCH_COUNT = 52579 | ConfigEvent.Severity.Info,
            COMMON_BUCKET_COUNT = 52580 | ConfigEvent.Severity.Info,
            COMMON_CONFIG_INFO_LIVE_REGISTRY_SETTINGS_CHANGE = 52581 | ConfigEvent.Severity.Info,
            COMMON_CONFIG_INFO_CONFIG_BLOBS_CHANGE = 52582 | ConfigEvent.Severity.Info,
            COMMON_CONFIG_INFO_ETX_MANIFEST_CHANGE = 52583 | ConfigEvent.Severity.Info,
            COMMON_WARNING_0 = 52725 | ConfigEvent.Severity.Warning,
            HEALTH_REPORT_YELLOW = 52726 | ConfigEvent.Severity.Warning,
            AUDIT_INVALID_SUBSYSTEM = 63800 | ConfigEvent.Severity.Error,
            AUDIT_NO_SETTING = 63801 | ConfigEvent.Severity.Error,
            AUDIT_LOG_FAILURE = 63802 | ConfigEvent.Severity.Error,
 
           // AUTOGENERATED - do not add ids here 
        } 
    } 
} 
 
/////////////////////////////////////////////////////////////////////////////// 
// AUTO GENERATED FILE 
// MODIFY THE CORRESPONDING .xml AND .xsl FILES
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\events\obj\ConfigEvent.Id.cs ===
// AUTO GENERATED FILE 
// MODIFY THE CORRESPONDING .xml AND .xsl FILES 
/////////////////////////////////////////////////////////////////////////////// 
 
using System; 
 
namespace xonline.common.config 
{ 
    internal partial class ConfigEvent 
    { 
        public enum Id : uint 
        { 
            SGINFO_CALL_SOURCE_INVALID = 40001 | ConfigEvent.Severity.Error,
            SGINFO_VERIFY_PRIVILEGE = 40002 | ConfigEvent.Severity.Error,
            XMGMT_FAILED_TO_REGISTER_ASSEMBLY = 40050 | ConfigEvent.Severity.Warning,
            HEALTH_REQUEST_FAILED = 40051 | ConfigEvent.Severity.Error,
            HEALTH_INITIALIZE_INTEROP_FAILED = 40052 | ConfigEvent.Severity.Error,
            HEALTH_REGISTERNATIVEHEALTHBLOCK_FAILED = 40053 | ConfigEvent.Severity.Error,
            HEALTH_LISTENER_CALLBACK_REQUEST_FAILED = 40054 | ConfigEvent.Severity.Error,
            HEALTH_LISTENER_CALLBACK_FAILED = 40055 | ConfigEvent.Severity.Error,
            MSNRR_EXTERNAL_EXCEPTION = 40056 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_INFO_SERVICE_KEYS_CHANGE = 40057 | ConfigEvent.Severity.Info,
            COMMON_CONFIG_SERVICE_KEYS_CHANGE = 40058 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_USING_NPDB_SETTINGS = 40059 | ConfigEvent.Severity.Warning,
            COMMON_CODE_20 = 50845 | ConfigEvent.Severity.Error,
            CRYPTO_GENERAL_ERROR = 50846 | ConfigEvent.Severity.Error,
            COMMON_CODE_22 = 50847 | ConfigEvent.Severity.Error,
            COMMON_CODE_23 = 50848 | ConfigEvent.Severity.Error,
            COMMON_CODE_24 = 50849 | ConfigEvent.Severity.Error,
            MC_APPLICATION_ERROR = 50850 | ConfigEvent.Severity.Error,
            COMMON_CODE_26 = 50851 | ConfigEvent.Severity.Error,
            COMMON_CODE_27 = 50852 | ConfigEvent.Severity.Error,
            COMMON_CODE_28 = 50853 | ConfigEvent.Severity.Error,
            COMMON_CODE_29 = 50854 | ConfigEvent.Severity.Error,
            COMMON_CODE_30 = 50855 | ConfigEvent.Severity.Error,
            COMMON_CODE_31 = 50856 | ConfigEvent.Severity.Error,
            COMMON_CODE_32 = 50857 | ConfigEvent.Severity.Error,
            COMMON_CODE_33 = 50858 | ConfigEvent.Severity.Error,
            COMMON_CODE_34 = 50859 | ConfigEvent.Severity.Error,
            COMMON_CODE_35 = 50860 | ConfigEvent.Severity.Error,
            COMMON_CODE_36 = 50861 | ConfigEvent.Severity.Error,
            COMMON_CODE_37 = 50862 | ConfigEvent.Severity.Error,
            COMMON_CODE_38 = 50863 | ConfigEvent.Severity.Error,
            MC_PLUGIN_ERROR = 50864 | ConfigEvent.Severity.Error,
            MC_PLUGIN_ERROR_1 = 50865 | ConfigEvent.Severity.Error,
            COMMON_CODE_41 = 50866 | ConfigEvent.Severity.Error,
            COMMON_CODE_42 = 50867 | ConfigEvent.Severity.Error,
            COMMON_CODE_43 = 50868 | ConfigEvent.Severity.Error,
            COMMON_CODE_46 = 50871 | ConfigEvent.Severity.Error,
            COMMON_CODE_48 = 50873 | ConfigEvent.Severity.Error,
            QUERY_BAD_PARAMETER = 50876 | ConfigEvent.Severity.Error,
            QUERY_BAD_PARAMETER_1 = 50877 | ConfigEvent.Severity.Error,
            COMMON_CODE_53 = 50878 | ConfigEvent.Severity.Error,
            COMMON_CODE_54 = 50879 | ConfigEvent.Severity.Error,
            COMMON_CODE_55 = 50880 | ConfigEvent.Severity.Error,
            COMMON_CODE_56 = 50881 | ConfigEvent.Severity.Error,
            COMMON_CODE_57 = 50882 | ConfigEvent.Severity.Error,
            COMMON_CODE_58 = 50883 | ConfigEvent.Severity.Error,
            COMMON_CODE_59 = 50884 | ConfigEvent.Severity.Error,
            MC_BAD_PARAMETER = 50885 | ConfigEvent.Severity.Error,
            MC_BAD_PARAMETER_1 = 50886 | ConfigEvent.Severity.Error,
            MC_APPLICATION_ERROR_1 = 50887 | ConfigEvent.Severity.Error,
            MC_APPLICATION_ERROR_2 = 50888 | ConfigEvent.Severity.Error,
            MC_APPLICATION_ERROR_3 = 50889 | ConfigEvent.Severity.Error,
            MC_BAD_PARAMETER_2 = 50890 | ConfigEvent.Severity.Error,
            COMMON_CODE_66 = 50891 | ConfigEvent.Severity.Error,
            MC_BAD_CODE = 50892 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_1 = 50893 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_2 = 50894 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_3 = 50895 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_4 = 50896 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_5 = 50897 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_6 = 50898 | ConfigEvent.Severity.Error,
            COMMON_CODE_74 = 50899 | ConfigEvent.Severity.Error,
            COMMON_CODE_75 = 50900 | ConfigEvent.Severity.Error,
            COMMON_CODE_76 = 50901 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_7 = 50902 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_8 = 50903 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_9 = 50904 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_10 = 50905 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_11 = 50906 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_12 = 50907 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_13 = 50908 | ConfigEvent.Severity.Error,
            MC_BAD_CODE_14 = 50909 | ConfigEvent.Severity.Error,
            COMMON_CODE_85 = 50910 | ConfigEvent.Severity.Error,
            COMMON_CODE_86 = 50911 | ConfigEvent.Severity.Error,
            FORBIDDEN_NAMES_LOAD_FAILURE = 50912 | ConfigEvent.Severity.Error,
            MC_APPLICATION_ERROR_5 = 50913 | ConfigEvent.Severity.Error,
            MC_APPLICATION_ERROR_6 = 50914 | ConfigEvent.Severity.Error,
            MC_APPLICATION_ERROR_7 = 50915 | ConfigEvent.Severity.Error,
            COMMON_CODE_91 = 50916 | ConfigEvent.Severity.Error,
            COMMON_CODE_92 = 50917 | ConfigEvent.Severity.Error,
            MGMT_GENERIC_ERROR = 50918 | ConfigEvent.Severity.Error,
            MGMT_GENERIC_ERROR_1 = 50919 | ConfigEvent.Severity.Error,
            MGMT_GENERIC_ERROR_2 = 50920 | ConfigEvent.Severity.Error,
            MGMT_GENERIC_ERROR_3 = 50921 | ConfigEvent.Severity.Error,
            COMMON_CODE_97 = 50922 | ConfigEvent.Severity.Error,
            MGMT_GENERIC_ERROR_4 = 50923 | ConfigEvent.Severity.Error,
            COMMON_CODE_99 = 50924 | ConfigEvent.Severity.Error,
            COMMON_CODE_100 = 50925 | ConfigEvent.Severity.Error,
            COMMON_CODE_101 = 50926 | ConfigEvent.Severity.Error,
            COMMON_CODE_102 = 50927 | ConfigEvent.Severity.Error,
            COMMON_CODE_103 = 50928 | ConfigEvent.Severity.Error,
            COMMON_CODE_104 = 50929 | ConfigEvent.Severity.Error,
            COMMON_CODE_105 = 50930 | ConfigEvent.Severity.Error,
            COMMON_CODE_106 = 50931 | ConfigEvent.Severity.Error,
            COMMON_CODE_107 = 50932 | ConfigEvent.Severity.Error,
            COMMON_CODE_108 = 50933 | ConfigEvent.Severity.Error,
            COMMON_CODE_109 = 50934 | ConfigEvent.Severity.Error,
            HEALTH_GENERIC_ERROR_1 = 50935 | ConfigEvent.Severity.Error,
            SQL_EXECUTE_READER = 50936 | ConfigEvent.Severity.Error,
            SQL_EXECUTE_READER_BEHAVIOR = 50937 | ConfigEvent.Severity.Error,
            SQL_EXECUTE_NON_QUERY = 50938 | ConfigEvent.Severity.Error,
            SQL_EXECUTE_SCALAR = 50939 | ConfigEvent.Severity.Error,
            COUNTRY_LIST_MISSING = 50940 | ConfigEvent.Severity.Error,
            COMMON_CODE_117 = 50942 | ConfigEvent.Severity.Error,
            COMMON_CODE_118 = 50943 | ConfigEvent.Severity.Error,
            COMMON_CODE_119 = 50944 | ConfigEvent.Severity.Error,
            COMMON_CODE_120 = 50945 | ConfigEvent.Severity.Error,
            COMMON_CODE_121 = 50946 | ConfigEvent.Severity.Error,
            COMMON_CODE_122 = 50947 | ConfigEvent.Severity.Error,
            MUSICNET_EXTERNAL_EXCEPTION = 50958 | ConfigEvent.Severity.Error,
            COMMON_CODE_146 = 50971 | ConfigEvent.Severity.Error,
            COMMON_CODE_147 = 50972 | ConfigEvent.Severity.Error,
            COMMON_CODE_148 = 50973 | ConfigEvent.Severity.Error,
            COMMON_CODE_149 = 50974 | ConfigEvent.Severity.Error,
            COMMON_CODE_150 = 50975 | ConfigEvent.Severity.Error,
            COMMON_CODE_151 = 50976 | ConfigEvent.Severity.Error,
            COMMON_CODE_152 = 50977 | ConfigEvent.Severity.Error,
            COMMON_CODE_153 = 50978 | ConfigEvent.Severity.Error,
            COMMON_CODE_154 = 50979 | ConfigEvent.Severity.Error,
            COMMON_CODE_155 = 50980 | ConfigEvent.Severity.Error,
            COMMON_CODE_156 = 50981 | ConfigEvent.Severity.Error,
            COMMON_CODE_157 = 50982 | ConfigEvent.Severity.Error,
            COMMON_CODE_158 = 50983 | ConfigEvent.Severity.Error,
            COMMON_CODE_159 = 50984 | ConfigEvent.Severity.Error,
            COMMON_CODE_160 = 50985 | ConfigEvent.Severity.Error,
            COMMON_CODE_161 = 50986 | ConfigEvent.Severity.Error,
            COMMON_CODE_162 = 50987 | ConfigEvent.Severity.Error,
            COMMON_CODE_163 = 50988 | ConfigEvent.Severity.Error,
            COMMON_CODE_164 = 50989 | ConfigEvent.Severity.Error,
            COMMON_CODE_165 = 50990 | ConfigEvent.Severity.Error,
            COMMON_CODE_166 = 50991 | ConfigEvent.Severity.Error,
            COMMON_CODE_167 = 50992 | ConfigEvent.Severity.Error,
            COMMON_CODE_168 = 50993 | ConfigEvent.Severity.Error,
            COMMON_CODE_169 = 50994 | ConfigEvent.Severity.Error,
            COMMON_CODE_170 = 50995 | ConfigEvent.Severity.Error,
            COMMON_CODE_171 = 50996 | ConfigEvent.Severity.Error,
            COMMON_CODE_172 = 50997 | ConfigEvent.Severity.Error,
            COMMON_CODE_173 = 50998 | ConfigEvent.Severity.Error,
            COMMON_CODE_174 = 50999 | ConfigEvent.Severity.Error,
            COMMON_CODE_175 = 51000 | ConfigEvent.Severity.Error,
            COMMON_CODE_176 = 51001 | ConfigEvent.Severity.Error,
            COMMON_CODE_177 = 51002 | ConfigEvent.Severity.Error,
            COMMON_CODE_178 = 51003 | ConfigEvent.Severity.Error,
            COMMON_CODE_179 = 51004 | ConfigEvent.Severity.Error,
            COMMON_CODE_180 = 51005 | ConfigEvent.Severity.Error,
            COMMON_CODE_181 = 51006 | ConfigEvent.Severity.Error,
            COMMON_CODE_182 = 51007 | ConfigEvent.Severity.Error,
            COMMON_CODE_183 = 51008 | ConfigEvent.Severity.Error,
            COMMON_CODE_184 = 51009 | ConfigEvent.Severity.Error,
            COMMON_CODE_185 = 51010 | ConfigEvent.Severity.Error,
            WEBSTORE_EXECUTE_ERROR = 51011 | ConfigEvent.Severity.Error,
            WEBSTORE_EXECUTE_TIMEOUT_ERROR = 51012 | ConfigEvent.Severity.Error,
            WEBSTORE_EXECUTE_DEADLOCK_ERROR = 51013 | ConfigEvent.Severity.Error,
            COMMON_CODE_189 = 51014 | ConfigEvent.Severity.Error,
            COMMON_CODE_190 = 51015 | ConfigEvent.Severity.Error,
            COMMON_CODE_191 = 51016 | ConfigEvent.Severity.Error,
            COMMON_CODE_192 = 51017 | ConfigEvent.Severity.Error,
            COMMON_CODE_193 = 51018 | ConfigEvent.Severity.Error,
            COMMON_CODE_194 = 51019 | ConfigEvent.Severity.Error,
            COMMON_CODE_195 = 51020 | ConfigEvent.Severity.Error,
            COMMON_CODE_196 = 51021 | ConfigEvent.Severity.Error,
            COMMON_CODE_197 = 51022 | ConfigEvent.Severity.Error,
            COMMON_CODE_198 = 51023 | ConfigEvent.Severity.Error,
            COMMON_CODE_199 = 51024 | ConfigEvent.Severity.Error,
            COMMON_CODE_200 = 51025 | ConfigEvent.Severity.Error,
            DEPRECATED_SYNCCAST_EXTERNAL_EXCEPTION = 51030 | ConfigEvent.Severity.Error,
            COMMON_CODE_208 = 51033 | ConfigEvent.Severity.Error,
            COMMON_CODE_209 = 51034 | ConfigEvent.Severity.Error,
            COMMON_CODE_210 = 51035 | ConfigEvent.Severity.Error,
            COMMON_CODE_211 = 51036 | ConfigEvent.Severity.Error,
            COMMON_CODE_212 = 51037 | ConfigEvent.Severity.Error,
            COMMON_CODE_213 = 51038 | ConfigEvent.Severity.Error,
            COMMON_CODE_214 = 51039 | ConfigEvent.Severity.Error,
            COMMON_CODE_215 = 51040 | ConfigEvent.Severity.Error,
            COMMON_CODE_216 = 51041 | ConfigEvent.Severity.Error,
            COMMON_CODE_217 = 51042 | ConfigEvent.Severity.Error,
            COMMON_CODE_218 = 51043 | ConfigEvent.Severity.Error,
            COMMON_CODE_219 = 51044 | ConfigEvent.Severity.Error,
            COMMON_CODE_220 = 51045 | ConfigEvent.Severity.Error,
            COMMON_CODE_221 = 51046 | ConfigEvent.Severity.Error,
            COMMON_CODE_222 = 51047 | ConfigEvent.Severity.Error,
            COMMON_CODE_223 = 51048 | ConfigEvent.Severity.Error,
            COMMON_CODE_224 = 51049 | ConfigEvent.Severity.Error,
            COMMON_CODE_225 = 51050 | ConfigEvent.Severity.Error,
            COMMON_CODE_226 = 51051 | ConfigEvent.Severity.Error,
            COMMON_CODE_227 = 51052 | ConfigEvent.Severity.Error,
            COMMON_CODE_228 = 51053 | ConfigEvent.Severity.Error,
            DEPRECATED_COMMON_CODE_229 = 51054 | ConfigEvent.Severity.Error,
            DEPRECATED_COMMON_CODE_230 = 51055 | ConfigEvent.Severity.Error,
            COMMON_CODE_231 = 51056 | ConfigEvent.Severity.Error,
            COMMON_CODE_232 = 51057 | ConfigEvent.Severity.Error,
            WMIS_EXTERNAL_EXCEPTION = 51058 | ConfigEvent.Severity.Error,
            COMMON_CODE_MATCH_STARTMIGRATE_FAILED = 51059 | ConfigEvent.Severity.Error,
            COMMON_CODE_MATCH_MIGRATESTATUS_FAILED_SPROC = 51060 | ConfigEvent.Severity.Error,
            COMMON_CODE_MATCH_UPDLTC_TV_FAILED = 51061 | ConfigEvent.Severity.Error,
            COMMON_CODE_MATCH_UPDLTC_NPDB_FAILED = 51062 | ConfigEvent.Severity.Error,
            COMMON_CODE_LSPLIB_SQLEXCEPTION = 51063 | ConfigEvent.Severity.Error,
            HEALTH_REPORT_RED = 51064 | ConfigEvent.Severity.Error,
            HEALTH_ENGINE_FAILURE = 51065 | ConfigEvent.Severity.Error,
            FEAPP_INITIALIZATION_METHOD_FAILED = 51066 | ConfigEvent.Severity.Error,
            FEAPP_INITIALIZATION_METHOD_NOT_FOUND = 51067 | ConfigEvent.Severity.Error,
            FAST_FAIL_MISSING_COUNTERS = 51068 | ConfigEvent.Severity.Error,
            FAST_FAIL_MISSING_RESOURCE = 51069 | ConfigEvent.Severity.Error,
            FEAPP_COMPRESSION_ERROR = 51070 | ConfigEvent.Severity.Error,
            UNHANDLED_THREAD_EXCEPTION = 51071 | ConfigEvent.Severity.Error,
            FEAPP_INIT_FAILURE = 51072 | ConfigEvent.Severity.Error,
            FORBIDDEN_NAMES_EXCLUDED_TITLES_CONFIG_ERROR = 51073 | ConfigEvent.Severity.Error,
            COMMON_COMM_6 = 51231 | ConfigEvent.Severity.Error,
            COMMON_COMM_7 = 51232 | ConfigEvent.Severity.Error,
            COMMON_COMM_8 = 51233 | ConfigEvent.Severity.Error,
            COMMON_COMM_9 = 51234 | ConfigEvent.Severity.Error,
            COMMON_COMM_10 = 51235 | ConfigEvent.Severity.Error,
            COMMON_COMM_11 = 51236 | ConfigEvent.Severity.Error,
            COMMON_COMM_12 = 51237 | ConfigEvent.Severity.Error,
            COMMON_COMM_13 = 51238 | ConfigEvent.Severity.Error,
            XCACHE_CLIENT_BROKEN_PIPE = 51239 | ConfigEvent.Severity.Error,
            XCACHE_CLIENT_BROKEN_PIPE_1 = 51240 | ConfigEvent.Severity.Error,
            XCACHE_CLIENT_BROKEN_PIPE_2 = 51241 | ConfigEvent.Severity.Error,
            XCACHE_CLIENT_BROKEN_PIPE_3 = 51242 | ConfigEvent.Severity.Error,
            XCACHE_CLIENT_BROKEN_PIPE_4 = 51243 | ConfigEvent.Severity.Error,
            XCACHE_SERVER_BUSY = 51244 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE = 51245 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_1 = 51246 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_2 = 51247 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_3 = 51248 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_4 = 51249 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_5 = 51250 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_6 = 51251 | ConfigEvent.Severity.Error,
            PIPE_FAILURE = 51252 | ConfigEvent.Severity.Error,
            PIPE_FAILURE_1 = 51253 | ConfigEvent.Severity.Error,
            PIPE_FAILURE_2 = 51254 | ConfigEvent.Severity.Error,
            AUTHDATA_SG_COMMUNICATION_ERROR = 51255 | ConfigEvent.Severity.Error,
            COMMON_COMM_31 = 51256 | ConfigEvent.Severity.Error,
            AUTHDATA_SG_COMMUNICATION_ERROR_1 = 51257 | ConfigEvent.Severity.Error,
            MC_XRL_REQUEST_ERROR = 51258 | ConfigEvent.Severity.Error,
            COMMON_COMM_34 = 51259 | ConfigEvent.Severity.Error,
            COMMON_COMM_35 = 51260 | ConfigEvent.Severity.Error,
            COMMON_COMM_36 = 51261 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_7 = 51262 | ConfigEvent.Severity.Error,
            XCACHE_INVALID_RESPONSE_1 = 51263 | ConfigEvent.Severity.Error,
            FORBIDDEN_NAMES_LOAD_SUCCESS = 51264 | ConfigEvent.Severity.Info,
            FORBIDDEN_NAMES_UNVETTED_STRING = 51265 | ConfigEvent.Severity.Error,
            MUSICNET_ACCOUNT_CREATE_FAILED = 51354 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_69 = 51394 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_70 = 51395 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_71 = 51396 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_72 = 51397 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_73 = 51398 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_74 = 51399 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_75 = 51400 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_76 = 51401 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_77 = 51402 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_78 = 51403 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_79 = 51404 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_80 = 51405 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_81 = 51406 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_82 = 51407 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_83 = 51408 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_84 = 51409 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_85 = 51410 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_86 = 51411 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_87 = 51412 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_88 = 51413 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_89 = 51414 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_90 = 51415 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_91 = 51416 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_92 = 51417 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_93 = 51418 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_94 = 51419 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_95 = 51420 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_96 = 51421 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_97 = 51422 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_98 = 51423 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_99 = 51424 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_100 = 51425 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_101 = 51426 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_102 = 51427 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_103 = 51428 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_104 = 51429 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_105 = 51430 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_106 = 51431 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_107 = 51432 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_108 = 51433 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_109 = 51434 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_110 = 51435 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_111 = 51436 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_112 = 51437 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_113 = 51438 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_114 = 51439 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_115 = 51440 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_116 = 51441 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_117 = 51442 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_118 = 51443 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_119 = 51444 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_120 = 51445 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_121 = 51446 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_122 = 51447 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_123 = 51448 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_124 = 51449 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_125 = 51450 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_126 = 51451 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_127 = 51452 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_128 = 51453 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_129 = 51454 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_130 = 51455 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_131 = 51456 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_132 = 51457 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_133 = 51458 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_134 = 51459 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_135 = 51460 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_136 = 51461 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_137 = 51462 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_138 = 51463 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_139 = 51464 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_140 = 51465 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_141 = 51466 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_142 = 51467 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_143 = 51468 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_144 = 51469 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_145 = 51470 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_146 = 51471 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_147 = 51472 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_148 = 51473 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_149 = 51474 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_150 = 51475 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_151 = 51476 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_152 = 51477 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_153 = 51478 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_154 = 51479 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_155 = 51480 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_156 = 51481 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_157 = 51482 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_158 = 51483 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_159 = 51484 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_160 = 51485 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_161 = 51486 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_162 = 51487 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_163 = 51488 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_164 = 51489 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_165 = 51490 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_166 = 51491 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_167 = 51492 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_168 = 51493 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_169 = 51494 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_170 = 51495 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_171 = 51496 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_172 = 51497 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_173 = 51498 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_174 = 51499 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_175 = 51500 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_176 = 51501 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_177 = 51502 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_178 = 51503 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_179 = 51504 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_180 = 51505 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_181 = 51506 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_182 = 51507 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_183 = 51508 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_184 = 51509 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_185 = 51510 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_186 = 51511 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_187 = 51512 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_188 = 51513 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_189 = 51514 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_190 = 51515 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_191 = 51516 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_192 = 51517 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_193 = 51518 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_194 = 51519 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_195 = 51520 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_196 = 51521 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_197 = 51522 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_198 = 51523 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_199 = 51524 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_200 = 51525 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_201 = 51526 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_202 = 51527 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_203 = 51528 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_204 = 51529 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_205 = 51530 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_206 = 51531 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_207 = 51532 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_208 = 51533 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_209 = 51534 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_210 = 51535 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_211 = 51536 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_212 = 51537 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_213 = 51538 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_214 = 51539 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_215 = 51540 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_216 = 51541 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_217 = 51542 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_218 = 51543 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_219 = 51544 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_220 = 51545 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_221 = 51546 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_222 = 51547 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_223 = 51548 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_224 = 51549 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_225 = 51550 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_226 = 51551 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_227 = 51552 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_228 = 51553 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_229 = 51554 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_230 = 51555 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_231 = 51556 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_232 = 51557 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_233 = 51558 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_234 = 51559 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_235 = 51560 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_236 = 51561 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_237 = 51562 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_238 = 51563 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_239 = 51564 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_240 = 51565 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_241 = 51566 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_242 = 51567 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_243 = 51568 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_244 = 51569 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_245 = 51570 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_246 = 51571 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_247 = 51572 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_248 = 51573 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_249 = 51574 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_250 = 51575 | ConfigEvent.Severity.Error,
            DEPRECATED_COMMON_CONFIG_251 = 51576 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_252 = 51577 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_253 = 51578 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_254 = 51579 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_255 = 51580 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_256 = 51581 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_257 = 51582 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_258 = 51583 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_259 = 51584 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_260 = 51585 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_261 = 51586 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_262 = 51587 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_263 = 51588 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_264 = 51589 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_265 = 51590 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_266 = 51591 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_PIPE_HANDLE_DISPOSED = 51593 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_270 = 51595 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_272 = 51597 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_274 = 51599 | ConfigEvent.Severity.Error,
            MC_SGINFO_IS_OFF = 51600 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_276 = 51601 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_277 = 51602 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_278 = 51603 | ConfigEvent.Severity.Error,
            MC_BAD_CONFIG_DATA_4 = 51604 | ConfigEvent.Severity.Error,
            MC_BAD_CONFIG_DATA_5 = 51605 | ConfigEvent.Severity.Error,
            MC_BAD_CONFIG_DATA_6 = 51606 | ConfigEvent.Severity.Error,
            MC_BAD_CONFIG_DATA_7 = 51607 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_283 = 51608 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_284 = 51609 | ConfigEvent.Severity.Error,
            MC_BAD_CONFIG_DATA_8 = 51610 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_286 = 51611 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_287 = 51612 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_288 = 51613 | ConfigEvent.Severity.Error,
            MGMT_CRITICAL_ERROR = 51614 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE = 51615 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_291 = 51616 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_292 = 51617 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_293 = 51618 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE_1 = 51619 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE_2 = 51620 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE_3 = 51621 | ConfigEvent.Severity.Error,
            MGMT_INIT_WARNING = 51622 | ConfigEvent.Severity.Warning,
            MGMT_INIT_FAILURE_4 = 51623 | ConfigEvent.Severity.Error,
            MGMT_SRV_DISCONNECT = 51624 | ConfigEvent.Severity.Error,
            MGMT_SRV_DISCONNECT_1 = 51625 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE_5 = 51626 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE_6 = 51627 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING = 51628 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_1 = 51629 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_2 = 51630 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_3 = 51631 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_307 = 51632 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_4 = 51633 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_5 = 51634 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_310 = 51635 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_311 = 51636 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_6 = 51637 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_7 = 51638 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_8 = 51639 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_9 = 51640 | ConfigEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_10 = 51641 | ConfigEvent.Severity.Error,
            MGMT_REMOTE_TARGET_WARNING = 51642 | ConfigEvent.Severity.Warning,
            COMMON_CONFIG_318 = 51643 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_319 = 51644 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_320 = 51645 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_321 = 51646 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_322 = 51647 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_323 = 51648 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_324 = 51649 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_325 = 51650 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_326 = 51651 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_327 = 51652 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_328 = 51653 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_329 = 51654 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_330 = 51655 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_331 = 51656 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_332 = 51657 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_333 = 51658 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_334 = 51659 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_335 = 51660 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_336 = 51661 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_337 = 51662 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_338 = 51663 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_339 = 51664 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE_7 = 51665 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE_8 = 51666 | ConfigEvent.Severity.Error,
            MGMT_INIT_FAILURE_9 = 51667 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_INTEROP_REPORTMESSAGECOMPONENTID_FAILURE = 51668 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_INTEROP_ADDREPORTMESSAGECOMPONENTIDMAPPING_FAILURE = 51669 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_INTEROP_REPORTMESSAGECLEANSERVIRTUALINTERFACE_FAILURE = 51670 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_340 = 51671 | ConfigEvent.Severity.Error,
            MGMT_READ_FAILURE = 51672 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_BAD_XLAST_FILE = 51674 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_LTC_TIB_COUNTS_OUTOFSYNC = 51675 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_LTC_TIB_SERVERS_OUTOFSYNC_1 = 51676 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_LTC_TIB_SERVERS_OUTOFSYNC_2 = 51677 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_LTC_TIB_OUTOFSYNC = 51678 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_UNEXPECTED_MODE_IN_XLAST = 51679 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_MISSING_MODE_IN_XLAST = 51680 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_ENDMIGRATE_FAILED_NONEXT = 51681 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_ENDMIGRATE_FAILED_MISSING_BUCKET = 51682 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_EXPMIGRATE_FAILED_NOTSTARTED = 51683 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_ENDMIGRATE_FAILED_LTC_TIB_OUTOFSYNC = 51684 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_ADDRR_FAILED_MISSING_BUCKET = 51685 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_ADDRR_FAILED_DUPE_SERVER = 51686 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_UPDLTC_INVALID_LTC = 51687 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_DEFAULTBUCKETS_OVERWRITE = 51688 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_CONFIRMSERVER_BADSERVER = 51689 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_PREPLTC_TID_MISMATCH = 51690 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_NO_PARTMAP = 51691 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_MATCH_PREPCONFIG_TID_MISMATCH = 51692 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_GET_REFRESH_FUNCTIONS = 51693 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_HEALTH_CHANGE = 51694 | ConfigEvent.Severity.Error,
            COMMON_SETTING_BATCH_CONSTRUCTION = 51695 | ConfigEvent.Severity.Error,
            COMMON_SETTING_BATCH_QUERY = 51696 | ConfigEvent.Severity.Error,
            COMMON_SETTING_BATCH_SETTING_DELETED = 51697 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_REGISTER_DYNAMIC_SETTING_FAILURE = 51698 | ConfigEvent.Severity.Error,
            COMMON_BUCKETS_BATCH_CONSTRUCTION = 51699 | ConfigEvent.Severity.Error,
            COMMON_BUCKET_BATCH_QUERY = 51700 | ConfigEvent.Severity.Error,
            COMMON_BUCKET_BATCH_DELETED = 51701 | ConfigEvent.Severity.Error,
            COMMON_CONFIG_LIVE_REGISTRY_SETTINGS_CHANGE = 51702 | ConfigEvent.Severity.Error,
            PERFORMANCE_COUNTERS_0 = 51703 | ConfigEvent.Severity.Error,
            COMMON_HACK_4 = 52329 | ConfigEvent.Severity.Warning,
            COMMON_HACK_5 = 52330 | ConfigEvent.Severity.Warning,
            COMMON_HACK_6 = 52331 | ConfigEvent.Severity.Warning,
            COMMON_HACK_7 = 52332 | ConfigEvent.Severity.Warning,
            COMMON_HACK_8 = 52333 | ConfigEvent.Severity.Warning,
            COMMON_HACK_9 = 52334 | ConfigEvent.Severity.Warning,
            COMMON_HACK_10 = 52335 | ConfigEvent.Severity.Warning,
            COMMON_HACK_11 = 52336 | ConfigEvent.Severity.Warning,
            COMMON_HACK_12 = 52337 | ConfigEvent.Severity.Warning,
            COMMON_HACK_13 = 52338 | ConfigEvent.Severity.Warning,
            COMMON_HACK_14 = 52339 | ConfigEvent.Severity.Warning,
            COMMON_HACK_15 = 52340 | ConfigEvent.Severity.Warning,
            COMMON_HACK_16 = 52341 | ConfigEvent.Severity.Warning,
            COMMON_HACK_17 = 52342 | ConfigEvent.Severity.Warning,
            COMMON_HACK_18 = 52343 | ConfigEvent.Severity.Warning,
            COMMON_HACK_19 = 52344 | ConfigEvent.Severity.Warning,
            COMMON_HACK_20 = 52345 | ConfigEvent.Severity.Warning,
            COMMON_HACK_21 = 52346 | ConfigEvent.Severity.Warning,
            COMMON_HACK_22 = 52347 | ConfigEvent.Severity.Warning,
            COMMON_HACK_23 = 52348 | ConfigEvent.Severity.Warning,
            COMMON_HACK_24 = 52349 | ConfigEvent.Severity.Warning,
            COMMON_HACK_25 = 52350 | ConfigEvent.Severity.Warning,
            COMMON_HACK_26 = 52351 | ConfigEvent.Severity.Warning,
            COMMON_HACK_27 = 52352 | ConfigEvent.Severity.Warning,
            COMMON_HACK_28 = 52353 | ConfigEvent.Severity.Warning,
            COMMON_HACK_33 = 52358 | ConfigEvent.Severity.Warning,
            COMMON_HACK_34 = 52359 | ConfigEvent.Severity.Warning,
            COMMON_HACK_40 = 52365 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS = 52366 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_1 = 52367 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_2 = 52368 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_3 = 52369 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_4 = 52370 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_5 = 52371 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_6 = 52372 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_7 = 52373 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_BUNDLED_AUTHDATA = 52374 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR = 52375 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_1 = 52376 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_2 = 52377 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_HTTP_AUTHDATA = 52378 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_SG_AUTHDATA = 52379 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_SG_AUTHDATA_1 = 52380 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_SG_AUTHDATA_2 = 52381 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_SG_AUTHDATA_3 = 52382 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_SG_AUTHDATA_4 = 52383 | ConfigEvent.Severity.Warning,
            AUTHDATA_BAD_SG_AUTHDATA_5 = 52384 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_3 = 52385 | ConfigEvent.Severity.Warning,
            COMMON_HACK_61 = 52386 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_4 = 52387 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_5 = 52388 | ConfigEvent.Severity.Warning,
            COMMON_HACK_64 = 52389 | ConfigEvent.Severity.Warning,
            COMMON_HACK_65 = 52390 | ConfigEvent.Severity.Warning,
            COMMON_HACK_66 = 52391 | ConfigEvent.Severity.Warning,
            COMMON_HACK_67 = 52392 | ConfigEvent.Severity.Warning,
            COMMON_HACK_68 = 52393 | ConfigEvent.Severity.Warning,
            COMMON_HACK_69 = 52394 | ConfigEvent.Severity.Warning,
            COMMON_HACK_70 = 52395 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_6 = 52396 | ConfigEvent.Severity.Warning,
            COMMON_HACK_72 = 52397 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_7 = 52398 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_8 = 52399 | ConfigEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_9 = 52400 | ConfigEvent.Severity.Warning,
            COMMON_HACK_76 = 52401 | ConfigEvent.Severity.Warning,
            COMMON_HACK_77 = 52402 | ConfigEvent.Severity.Warning,
            COMMON_HACK_78 = 52403 | ConfigEvent.Severity.Warning,
            COMMON_HACK_79 = 52404 | ConfigEvent.Severity.Warning,
            COMMON_HACK_80 = 52405 | ConfigEvent.Severity.Warning,
            HACK_CONTENT_NOT_FOUND = 52406 | ConfigEvent.Severity.Warning,
            USER_AGENT_MISSING = 52412 | ConfigEvent.Severity.Error,
            USER_AGENT_INVALID = 52413 | ConfigEvent.Severity.Error,
            AAINFO_INVALID_REQUEST = 52414 | ConfigEvent.Severity.Error,
            COMMON_HACK_81 = 52415 | ConfigEvent.Severity.Error,
            AUTHDATA_VERIFICATION_ERROR_10 = 52416 | ConfigEvent.Severity.Error,
            COMMON_INFO_4 = 52529 | ConfigEvent.Severity.Info,
            COMMON_INFO_5 = 52530 | ConfigEvent.Severity.Info,
            COMMON_INFO_6 = 52531 | ConfigEvent.Severity.Info,
            COMMON_INFO_7 = 52532 | ConfigEvent.Severity.Info,
            COMMON_INFO_8 = 52533 | ConfigEvent.Severity.Info,
            COMMON_INFO_9 = 52534 | ConfigEvent.Severity.Info,
            COMMON_INFO_10 = 52535 | ConfigEvent.Severity.Info,
            COMMON_INFO_11 = 52536 | ConfigEvent.Severity.Info,
            COMMON_INFO_12 = 52537 | ConfigEvent.Severity.Info,
            COMMON_INFO_13 = 52538 | ConfigEvent.Severity.Info,
            COMMON_INFO_14 = 52539 | ConfigEvent.Severity.Info,
            COMMON_INFO_15 = 52540 | ConfigEvent.Severity.Info,
            COMMON_INFO_16 = 52541 | ConfigEvent.Severity.Info,
            COMMON_INFO_17 = 52542 | ConfigEvent.Severity.Info,
            COMMON_INFO_18 = 52543 | ConfigEvent.Severity.Info,
            COMMON_INFO_19 = 52544 | ConfigEvent.Severity.Info,
            COMMON_INFO_20 = 52545 | ConfigEvent.Severity.Info,
            COMMON_INFO_21 = 52546 | ConfigEvent.Severity.Info,
            COMMON_INFO_22 = 52547 | ConfigEvent.Severity.Info,
            COMMON_INFO_23 = 52548 | ConfigEvent.Severity.Info,
            COMMON_INFO_24 = 52549 | ConfigEvent.Severity.Info,
            COMMON_INFO_25 = 52550 | ConfigEvent.Severity.Info,
            COMMON_INFO_26 = 52551 | ConfigEvent.Severity.Info,
            COMMON_INFO_27 = 52552 | ConfigEvent.Severity.Info,
            COMMON_INFO_28 = 52553 | ConfigEvent.Severity.Info,
            COMMON_INFO_29 = 52554 | ConfigEvent.Severity.Info,
            COMMON_INFO_30 = 52555 | ConfigEvent.Severity.Info,
            COMMON_INFO_31 = 52556 | ConfigEvent.Severity.Info,
            COMMON_INFO_32 = 52557 | ConfigEvent.Severity.Info,
            COMMON_INFO_33 = 52558 | ConfigEvent.Severity.Info,
            COMMON_INFO_34 = 52559 | ConfigEvent.Severity.Info,
            COMMON_INFO_35 = 52560 | ConfigEvent.Severity.Info,
            COMMON_INFO_36 = 52561 | ConfigEvent.Severity.Info,
            COMMON_INFO_37 = 52562 | ConfigEvent.Severity.Info,
            COMMON_INFO_38 = 52563 | ConfigEvent.Severity.Info,
            COMMON_INFO_39 = 52564 | ConfigEvent.Severity.Info,
            COMMON_INFO_40 = 52565 | ConfigEvent.Severity.Info,
            MC_APPDOMAIN_STARTED = 52566 | ConfigEvent.Severity.Info,
            MC_APPDOMAIN_STARTED_1 = 52567 | ConfigEvent.Severity.Info,
            COMMON_INFO_43 = 52568 | ConfigEvent.Severity.Info,
            COMMON_INFO_44 = 52569 | ConfigEvent.Severity.Info,
            COMMON_INFO_45 = 52570 | ConfigEvent.Severity.Info,
            COMMON_INFO_46 = 52571 | ConfigEvent.Severity.Info,
            COMMON_INFO_47 = 52572 | ConfigEvent.Severity.Info,
            COMMON_INFO_48 = 52573 | ConfigEvent.Severity.Info,
            MGMT_SRV_CONNECTED = 52574 | ConfigEvent.Severity.Info,
            REPORTINGTARGET_RECONNECTED = 52575 | ConfigEvent.Severity.Info,
            CONFIG_CHANGE_PROCESSED = 52576 | ConfigEvent.Severity.Info,
            HEALTH_REPORT_GREEN = 52577 | ConfigEvent.Severity.Info,
            COMMON_CONFIG_INFO_HEALTH_CHANGE = 52578 | ConfigEvent.Severity.Info,
            COMMON_SETTING_BATCH_COUNT = 52579 | ConfigEvent.Severity.Info,
            COMMON_BUCKET_COUNT = 52580 | ConfigEvent.Severity.Info,
            COMMON_CONFIG_INFO_LIVE_REGISTRY_SETTINGS_CHANGE = 52581 | ConfigEvent.Severity.Info,
            COMMON_CONFIG_INFO_CONFIG_BLOBS_CHANGE = 52582 | ConfigEvent.Severity.Info,
            COMMON_CONFIG_INFO_ETX_MANIFEST_CHANGE = 52583 | ConfigEvent.Severity.Info,
            COMMON_WARNING_0 = 52725 | ConfigEvent.Severity.Warning,
            HEALTH_REPORT_YELLOW = 52726 | ConfigEvent.Severity.Warning,
            AUDIT_INVALID_SUBSYSTEM = 63800 | ConfigEvent.Severity.Error,
            AUDIT_NO_SETTING = 63801 | ConfigEvent.Severity.Error,
            AUDIT_LOG_FAILURE = 63802 | ConfigEvent.Severity.Error,
 
           // AUTOGENERATED - do not add ids here 
        } 
    } 
} 
 
/////////////////////////////////////////////////////////////////////////////// 
// AUTO GENERATED FILE 
// MODIFY THE CORRESPONDING .xml AND .xsl FILES
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\unittest\ConfigInstance\GetSettingTests.cs ===
﻿using System;
using System.Collections.Generic;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using xonline.common.config;

namespace configinstance
{
    [TestClass]
    [DeploymentItem("TestFiles", "TestFiles")]
    public class GetSettingTests : TestBase
    {
        public TestContext TestContext { get; set; }

        [TestInitialize]
        public void TestInitialize()
        {
            SetupMockingFramework();
        }
        
        [TestMethod]
        public void GetUndefined()
        {
            string value = TestGetSetting("string_setting");
            Assert.IsNull(value);
        }

        [TestMethod]
        public void GetOnlyInDb()
        {
            dbSettings["string_setting"] = "db_value";
            string value = TestGetSetting("string_setting");
            Assert.AreEqual("db_value", value);
        }

        [TestMethod]
        public void GetOnlyFile()
        {
            UseSettingsFile("test_settings_1.xml");
            string value = TestGetSetting("string_setting");
            Assert.AreEqual("file_value", value);
        }

        [TestMethod]
        public void GetInDbAndFile()
        {
            dbSettings["string_setting"] = "db_value";
            dbSettings["string_setting_db"] = "db_value";
            UseSettingsFile("test_settings_1.xml");
            string value = TestGetSetting("string_setting");
            Assert.AreEqual("file_value", value);
            value = TestGetSetting("string_setting_db");
            Assert.AreEqual("db_value", value);
        }

        [TestMethod]
        public void GetInCacheAfterFileDelete()
        {
            dbSettings["string_setting"] = "db_value";
            UseSettingsFile("test_settings_1.xml");
            string value = TestGetSetting("string_setting");
            Assert.AreEqual("file_value", value);
            DeleteSettingsFile();
            value = TestGetSetting("string_setting"); 
            Assert.AreEqual("file_value", value);
        }

        [TestMethod]
        public void GetInCacheAfterFileChange()
        {
            dbSettings["string_setting"] = "db_value";
            UseSettingsFile("test_settings_1.xml");
            string value = TestGetSetting("string_setting");
            Assert.AreEqual("file_value", value);
            UseSettingsFile("test_settings_2.xml");
            value = TestGetSetting("string_setting");
            Assert.AreEqual("file_value", value);
        }

        [TestMethod]
        public void GetInCacheAfterDbChange()
        {
            dbSettings["string_setting"] = "db_value";
            string value = TestGetSetting("string_setting");
            Assert.AreEqual("db_value", value);
            dbSettings["string_setting"] = "db_value_2";
            value = TestGetSetting("string_setting");
            Assert.AreEqual("db_value", value);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\unittest\ConfigInstance\GetMultiSettingTests.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using xonline.common.config;

namespace configinstance
{
    [TestClass]
    [DeploymentItem("TestFiles", "TestFiles")]
    public class GetMultiSettingTests : TestBase
    {
        public TestContext TestContext { get; set; }

        [TestInitialize]
        public void TestInitialize()
        {
            SetupMockingFramework();
        }
        
        [TestMethod]
        public void GetUndefined()
        {
            string[] value = TestGetMultiSetting("string_multisetting");
            Assert.IsNotNull(value);
            Assert.AreEqual(0, value.Length);
        }

        [TestMethod]
        public void GetOnlyInDb()
        {
            string[] setting = new[] { "db_first", "db_second", "db_third" };
            dbMultiSettings["string_multisetting"] = setting;
            string[] value = TestGetMultiSetting("string_multisetting");
            Assert.IsTrue(setting.SequenceEqual(value));
        }

        [TestMethod]
        public void GetOnlyFile()
        {
            string[] setting = new[] { "file_first", "file_second", "file_third" };
            UseSettingsFile("test_settings_1.xml");
            string[] value = TestGetMultiSetting("string_multisetting");
            Assert.IsTrue(setting.SequenceEqual(value));
        }

        [TestMethod]
        public void GetInDbAndFile()
        {
            string[] dbSetting = new[] { "db_first", "db_second", "db_third" };
            string[] fileSetting = new[] { "file_first", "file_second", "file_third" };
            dbMultiSettings["string_multisetting"] = dbSetting;
            dbMultiSettings["string_multisetting_db"] = dbSetting;
            UseSettingsFile("test_settings_1.xml");
            string[] value = TestGetMultiSetting("string_multisetting");
            Assert.IsTrue(fileSetting.SequenceEqual(value));
            value = TestGetMultiSetting("string_multisetting_db");
            Assert.IsTrue(dbSetting.SequenceEqual(value));
        }

        [TestMethod]
        public void GetInCacheAfterFileDelete()
        {
            string[] dbSetting = new[] { "db_first", "db_second", "db_third" };
            string[] fileSetting = new[] { "file_first", "file_second", "file_third" };
            dbMultiSettings["string_multisetting"] = dbSetting;
            UseSettingsFile("test_settings_1.xml");
            string[] value = TestGetMultiSetting("string_multisetting");
            Assert.IsTrue(fileSetting.SequenceEqual(value));
            DeleteSettingsFile();
            value = TestGetMultiSetting("string_multisetting");
            Assert.IsTrue(fileSetting.SequenceEqual(value));
        }

        [TestMethod]
        public void GetInCacheAfterFileChange()
        {
            string[] dbSetting = new[] { "db_first", "db_second", "db_third" };
            string[] fileSetting = new[] { "file_first", "file_second", "file_third" };
            dbMultiSettings["string_multisetting"] = dbSetting;
            UseSettingsFile("test_settings_1.xml");
            string[] value = TestGetMultiSetting("string_multisetting");
            Assert.IsTrue(fileSetting.SequenceEqual(value));
            UseSettingsFile("test_settings_2.xml");
            value = TestGetMultiSetting("string_multisetting");
            Assert.IsTrue(fileSetting.SequenceEqual(value));
        }

        [TestMethod]
        public void GetInCacheAfterDbChange()
        {
            string[] dbSetting = new[] { "db_first", "db_second", "db_third" };
            dbMultiSettings["string_multisetting"] = dbSetting;
            string[] value = TestGetMultiSetting("string_multisetting");
            Assert.IsTrue(dbSetting.SequenceEqual(value));
            dbMultiSettings["string_multisetting"] = new[] { "db_fourth", "db_fifth", "db_sixth" };
            value = TestGetMultiSetting("string_multisetting");
            Assert.IsTrue(dbSetting.SequenceEqual(value));
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\unittest\ConfigInstance\ReloadMultiSettingsTests.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.MMF;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using xonline.common.config;

namespace configinstance
{
    [TestClass]
    [DeploymentItem("TestFiles", "TestFiles")]
    public class ReloadMultiSettingsTests : TestBase
    {
        public TestContext TestContext { get; set; }

        private string[] dbMultiSetting1 = new[] { "db_first", "db_second", "db_third" };

        private string[] dbMultiSetting2 = new[] { "db_fourth", "db_fifth", "db_sixth" };

        private string[] fileMultiSetting1 = new[] { "file_first", "file_second", "file_third" };

        private string[] fileMultiSetting2 = new[] { "file_fourth", "file_fifth", "file_sixth" };

        [TestInitialize]
        public void TestInitialize()
        {
            SetupMockingFramework();
        }

        [TestMethod]
        public void UndefinedReloadWithNoChange()
        {
            string[] value = TestGetMultiSetting("string_multisetting");
            Assert.IsNotNull(value);
            Assert.AreEqual(0, value.Length);
            TestCheckForUpdates();
            configMimic.AssertsThat("RefreshMultiSettings").WasNotCalled();
            value = TestGetMultiSetting("string_multisetting");
            Assert.IsNotNull(value);
            Assert.AreEqual(0, value.Length);
        }

        [TestMethod]
        public void UndefinedChangeDbAndReload()
        {
            string[] value = TestGetMultiSetting("string_multisetting");
            Assert.IsNotNull(value);
            Assert.AreEqual(0, value.Length);
            dbMultiSettings["string_multisetting"] = dbMultiSetting2;
            TestCheckForUpdates(refreshDbMultiSettings: true);
            configMimic.AssertsThat("RefreshMultiSettings").WasCalledOneTime();
            value = TestGetMultiSetting("string_multisetting");
            Assert.IsTrue(value.SequenceEqual(dbMultiSetting2));
        }

        [TestMethod]
        public void UndefinedChangeFileAndReload()
        {
            string[] value = TestGetMultiSetting("string_multisetting");
            Assert.IsNotNull(value);
            Assert.AreEqual(0, value.Length);
            UseSettingsFile("test_settings_2.xml");
            TestCheckForUpdates();
            configMimic.AssertsThat("RefreshMultiSettings").WasCalledOneTime();
            value = TestGetMultiSetting("string_multisetting");
            Assert.IsTrue(value.SequenceEqual(fileMultiSetting2));
        }

        [TestMethod]
        public void UndefinedChangeBothAndReload()
        {
            string[] value = TestGetMultiSetting("string_multisetting");
            Assert.IsNotNull(value);
            Assert.AreEqual(0, value.Length);
            dbMultiSettings["string_multisetting"] = dbMultiSetting2;
            UseSettingsFile("test_settings_2.xml");
            TestCheckForUpdates(refreshDbMultiSettings: true);
            configMimic.AssertsThat("RefreshMultiSettings").WasCalledOneTime();
            value = TestGetMultiSetting("string_multisetting");
            Assert.IsTrue(value.SequenceEqual(fileMultiSetting2));
        }

        [TestMethod]
        public void DbOnlyReloadWithNoChange()
        {
            dbMultiSettings["string_multisetting"] = dbMultiSetting1;
            string[] value = TestGetMultiSetting("string_multisetting");
            Assert.IsTrue(value.SequenceEqual(dbMultiSetting1));
            TestCheckForUpdates();
            configMimic.AssertsThat("RefreshMultiSettings").WasNotCalled();
            value = TestGetMultiSetting("string_multisetting");
            Assert.IsTrue(value.SequenceEqual(dbMultiSetting1));
        }
        
        [TestMethod]
        public void DbOnlyChangeDbAndReload()
        {
            dbMultiSettings["string_multisetting"] = dbMultiSetting1;
            string[] value = TestGetMultiSetting("string_multisetting");
            Assert.IsTrue(value.SequenceEqual(dbMultiSetting1));
            dbMultiSettings["string_multisetting"] = dbMultiSetting2;
            TestCheckForUpdates(refreshDbMultiSettings: true);
            configMimic.AssertsThat("RefreshMultiSettings").WasCalledOneTime();
            value = TestGetMultiSetting("string_multisetting");
            Assert.IsTrue(value.SequenceEqual(dbMultiSetting2));
        }

        [TestMethod]
        public void FileOnlyReloadWithNoChange()
        {
            UseSettingsFile("test_settings_1.xml");
            string[] value = TestGetMultiSetting("string_multisetting");
            Assert.IsTrue(value.SequenceEqual(fileMultiSetting1));
            TestCheckForUpdates();
            configMimic.AssertsThat("RefreshMultiSettings").WasNotCalled();
            value = TestGetMultiSetting("string_multisetting");
            Assert.IsTrue(value.SequenceEqual(fileMultiSetting1));
        }

        [TestMethod]
        public void FileOnlyTouchAndReloadFile()
        {
            UseSettingsFile("test_settings_1.xml");
            string[] value = TestGetMultiSetting("string_multisetting");
            Assert.IsTrue(value.SequenceEqual(fileMultiSetting1));
            TouchSettingsFile();
            TestCheckForUpdates();
            configMimic.AssertsThat("RefreshMultiSettings").WasCalledOneTime();
            value = TestGetMultiSetting("string_multisetting");
            Assert.IsTrue(value.SequenceEqual(fileMultiSetting1));
        }

        [TestMethod]
        public void FileOnlyChangeFileAndReload()
        {
            UseSettingsFile("test_settings_1.xml");
            string[] value = TestGetMultiSetting("string_multisetting");
            Assert.IsTrue(value.SequenceEqual(fileMultiSetting1));
            UseSettingsFile("test_settings_2.xml");
            TestCheckForUpdates();
            configMimic.AssertsThat("RefreshMultiSettings").WasCalledOneTime();
            value = TestGetMultiSetting("string_multisetting");
            Assert.IsTrue(value.SequenceEqual(fileMultiSetting2));
        }

        [TestMethod]
        public void DbOnlyChangeFileAndReload()
        {
            dbMultiSettings["string_multisetting"] = dbMultiSetting1;
            string[] value = TestGetMultiSetting("string_multisetting");
            Assert.IsTrue(value.SequenceEqual(dbMultiSetting1));
            UseSettingsFile("test_settings_1.xml");
            TestCheckForUpdates();
            configMimic.AssertsThat("RefreshMultiSettings").WasCalledOneTime();
            value = TestGetMultiSetting("string_multisetting");
            Assert.IsTrue(value.SequenceEqual(fileMultiSetting1));
        }

        [TestMethod]
        public void DbAndFileReloadWithNoChange()
        {
            dbMultiSettings["string_multisetting"] = dbMultiSetting1;
            UseSettingsFile("test_settings_1.xml");
            string[] value = TestGetMultiSetting("string_multisetting");
            Assert.IsTrue(value.SequenceEqual(fileMultiSetting1));
            TestCheckForUpdates();
            configMimic.AssertsThat("RefreshMultiSettings").WasNotCalled();
            value = TestGetMultiSetting("string_multisetting");
            Assert.IsTrue(value.SequenceEqual(fileMultiSetting1));
        }

        [TestMethod]
        public void DbAndFileTouchAndReloadFile()
        {
            dbMultiSettings["string_multisetting"] = dbMultiSetting1;
            UseSettingsFile("test_settings_1.xml");
            string[] value = TestGetMultiSetting("string_multisetting");
            Assert.IsTrue(value.SequenceEqual(fileMultiSetting1));
            TouchSettingsFile();
            TestCheckForUpdates();
            configMimic.AssertsThat("RefreshMultiSettings").WasCalledOneTime();
            value = TestGetMultiSetting("string_multisetting");
            Assert.IsTrue(value.SequenceEqual(fileMultiSetting1));
        }

        [TestMethod]
        public void DbAndFileChangeDbAndReload()
        {
            dbMultiSettings["string_multisetting"] = dbMultiSetting1;
            UseSettingsFile("test_settings_1.xml");
            string[] value = TestGetMultiSetting("string_multisetting");
            Assert.IsTrue(value.SequenceEqual(fileMultiSetting1));
            dbMultiSettings["string_multisetting"] = dbMultiSetting2;
            TestCheckForUpdates(refreshDbMultiSettings: true);
            configMimic.AssertsThat("RefreshMultiSettings").WasCalledOneTime();
            value = TestGetMultiSetting("string_multisetting");
            Assert.IsTrue(value.SequenceEqual(fileMultiSetting1));
        }

        [TestMethod]
        public void DbAndFileChangeFileAndReload()
        {
            dbMultiSettings["string_multisetting"] = dbMultiSetting1;
            UseSettingsFile("test_settings_1.xml");
            string[] value = TestGetMultiSetting("string_multisetting");
            Assert.IsTrue(value.SequenceEqual(fileMultiSetting1));
            UseSettingsFile("test_settings_2.xml");
            TestCheckForUpdates();
            configMimic.AssertsThat("RefreshMultiSettings").WasCalledOneTime();
            value = TestGetMultiSetting("string_multisetting");
            Assert.IsTrue(value.SequenceEqual(fileMultiSetting2));
        }

        [TestMethod]
        public void DbAndFileChangeBothAndReload()
        {
            dbMultiSettings["string_multisetting"] = dbMultiSetting1;
            UseSettingsFile("test_settings_1.xml");
            string[] value = TestGetMultiSetting("string_multisetting");
            Assert.IsTrue(value.SequenceEqual(fileMultiSetting1));
            dbMultiSettings["string_multisetting"] = dbMultiSetting2;
            UseSettingsFile("test_settings_2.xml");
            TestCheckForUpdates(refreshDbMultiSettings: true);
            configMimic.AssertsThat("RefreshMultiSettings").WasCalledOneTime();
            value = TestGetMultiSetting("string_multisetting");
            Assert.IsTrue(value.SequenceEqual(fileMultiSetting2));
        }

        [TestMethod]
        public void FileSettingsReaderLifetime()
        {
            // Reader starts as NULL
            Assert.IsNull(GetInternalSettingsReader());
            // Getting one setting should attempt to open the reader
            dbMultiSettings["string_multisetting"] = dbMultiSetting1;
            string[] value = TestGetMultiSetting("string_multisetting");
            Assert.IsTrue(value.SequenceEqual(dbMultiSetting1));
            configMimic.AssertsThat("GetFileSettings", false).WasCalledOneTime();
            Assert.IsNull(GetInternalSettingsReader());
            configMimic.ResetRecordedMethods();
            // Trying to get a new setting should attempt to open the reader again
            value = TestGetMultiSetting("string_multisetting_2");
            Assert.IsNotNull(value);
            Assert.AreEqual(0, value.Length);
            configMimic.AssertsThat("GetFileSettings", false).WasCalledOneTime();
            Assert.IsNull(GetInternalSettingsReader());
            configMimic.ResetRecordedMethods();
            // Checking for updates should open and close the reader
            UseSettingsFile("test_settings_1.xml");
            TestCheckForUpdates();
            configMimic.AssertsThat("GetFileSettings", true).WasCalledTwoTimes();
            configMimic.ResetRecordedMethods();
            Assert.IsNull(GetInternalSettingsReader());
            // The following should re-open the settings file which was closed by the last CheckForUpdates call
            value = TestGetMultiSetting("string_multisetting_3");
            Assert.IsNotNull(value);
            Assert.AreEqual(0, value.Length);
            Assert.IsNotNull(GetInternalSettingsReader());
            configMimic.AssertsThat("GetFileSettings", false).WasCalledOneTime();
            configMimic.ResetRecordedMethods();
            // Checking for updates should close the reader
            TouchSettingsFile();
            TestCheckForUpdates();
            configMimic.AssertsThat("GetFileSettings", true).WasCalledTwoTimes();
            configMimic.ResetRecordedMethods();
            Assert.IsNull(GetInternalSettingsReader());
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\unittest\ConfigInstance\ReloadSettingsTests.cs ===
﻿using System;
using System.Collections.Generic;
using System.Text;
using Microsoft.MMF;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using xonline.common.config;

namespace configinstance
{
    [TestClass]
    [DeploymentItem("TestFiles", "TestFiles")]
    public class ReloadSettingsTests : TestBase
    {
        public TestContext TestContext { get; set; }

        [TestInitialize]
        public void TestInitialize()
        {
            SetupMockingFramework();
        }

        [TestMethod]
        public void UndefinedReloadWithNoChange()
        {
            string value = TestGetSetting("string_setting");
            Assert.IsNull(value);
            TestCheckForUpdates();
            configMimic.AssertsThat("RefreshSettings").WasNotCalled();
            value = TestGetSetting("string_setting");
            Assert.IsNull(value);
        }

        [TestMethod]
        public void UndefinedChangeDbAndReload()
        {
            string value = TestGetSetting("string_setting");
            Assert.IsNull(value);
            dbSettings["string_setting"] = "db_second";
            TestCheckForUpdates(refreshDbSettings: true);
            configMimic.AssertsThat("RefreshSettings").WasCalledOneTime();
            value = TestGetSetting("string_setting");
            Assert.AreEqual("db_second", value);
        }

        [TestMethod]
        public void UndefinedChangeFileAndReload()
        {
            string value = TestGetSetting("string_setting");
            Assert.IsNull(value);
            UseSettingsFile("test_settings_2.xml");
            TestCheckForUpdates();
            configMimic.AssertsThat("RefreshSettings").WasCalledOneTime();
            value = TestGetSetting("string_setting");
            Assert.AreEqual("file_value_2", value);
        }

        [TestMethod]
        public void UndefinedChangeBothAndReload()
        {
            string value = TestGetSetting("string_setting");
            Assert.IsNull(value);
            dbSettings["string_setting"] = "db_second";
            UseSettingsFile("test_settings_2.xml");
            TestCheckForUpdates(refreshDbSettings: true);
            configMimic.AssertsThat("RefreshSettings").WasCalledOneTime();
            value = TestGetSetting("string_setting");
            Assert.AreEqual("file_value_2", value);
        }

        [TestMethod]
        public void DbOnlyReloadWithNoChange()
        {
            dbSettings["string_setting"] = "db_value";
            string value = TestGetSetting("string_setting");
            Assert.AreEqual("db_value", value);
            TestCheckForUpdates();
            configMimic.AssertsThat("RefreshSettings").WasNotCalled();
            value = TestGetSetting("string_setting");
            Assert.AreEqual("db_value", value);
        }
        
        [TestMethod]
        public void DbOnlyChangeDbAndReload()
        {
            dbSettings["string_setting"] = "db_value";
            string value = TestGetSetting("string_setting");
            Assert.AreEqual("db_value", value);
            dbSettings["string_setting"] = "db_second";
            TestCheckForUpdates(refreshDbSettings: true);
            configMimic.AssertsThat("RefreshSettings").WasCalledOneTime();
            value = TestGetSetting("string_setting");
            Assert.AreEqual("db_second", value);
        }

        [TestMethod]
        public void FileOnlyReloadWithNoChange()
        {
            UseSettingsFile("test_settings_1.xml");
            string value = TestGetSetting("string_setting");
            Assert.AreEqual("file_value", value);
            TestCheckForUpdates();
            configMimic.AssertsThat("RefreshSettings").WasNotCalled();
            value = TestGetSetting("string_setting");
            Assert.AreEqual("file_value", value);
        }

        [TestMethod]
        public void FileOnlyTouchAndReloadFile()
        {
            UseSettingsFile("test_settings_1.xml");
            string value = TestGetSetting("string_setting");
            Assert.AreEqual("file_value", value);
            TouchSettingsFile();
            TestCheckForUpdates();
            configMimic.AssertsThat("RefreshSettings").WasCalledOneTime();
            value = TestGetSetting("string_setting");
            Assert.AreEqual("file_value", value);
        }

        [TestMethod]
        public void FileOnlyChangeFileAndReload()
        {
            UseSettingsFile("test_settings_1.xml");
            string value = TestGetSetting("string_setting");
            Assert.AreEqual("file_value", value);
            UseSettingsFile("test_settings_2.xml");
            TestCheckForUpdates();
            configMimic.AssertsThat("RefreshSettings").WasCalledOneTime();
            value = TestGetSetting("string_setting");
            Assert.AreEqual("file_value_2", value);
        }

        [TestMethod]
        public void DbOnlyChangeFileAndReload()
        {
            dbSettings["string_setting"] = "db_value";
            string value = TestGetSetting("string_setting");
            Assert.AreEqual("db_value", value);
            UseSettingsFile("test_settings_1.xml");
            TestCheckForUpdates();
            configMimic.AssertsThat("RefreshSettings").WasCalledOneTime();
            value = TestGetSetting("string_setting");
            Assert.AreEqual("file_value", value);
        }

        [TestMethod]
        public void DbAndFileReloadWithNoChange()
        {
            dbSettings["string_setting"] = "db_value";
            UseSettingsFile("test_settings_1.xml");
            string value = TestGetSetting("string_setting");
            Assert.AreEqual("file_value", value);
            TestCheckForUpdates();
            configMimic.AssertsThat("RefreshSettings").WasNotCalled();
            value = TestGetSetting("string_setting");
            Assert.AreEqual("file_value", value);
        }

        [TestMethod]
        public void DbAndFileTouchAndReloadFile()
        {
            dbSettings["string_setting"] = "db_value";
            UseSettingsFile("test_settings_1.xml");
            string value = TestGetSetting("string_setting");
            Assert.AreEqual("file_value", value);
            TouchSettingsFile();
            TestCheckForUpdates();
            configMimic.AssertsThat("RefreshSettings").WasCalledOneTime();
            value = TestGetSetting("string_setting");
            Assert.AreEqual("file_value", value);
        }

        [TestMethod]
        public void DbAndFileChangeDbAndReload()
        {
            dbSettings["string_setting"] = "db_value";
            UseSettingsFile("test_settings_1.xml");
            string value = TestGetSetting("string_setting");
            Assert.AreEqual("file_value", value);
            dbSettings["string_setting"] = "db_second";
            TestCheckForUpdates(refreshDbSettings: true);
            configMimic.AssertsThat("RefreshSettings").WasCalledOneTime();
            value = TestGetSetting("string_setting");
            Assert.AreEqual("file_value", value);
        }

        [TestMethod]
        public void DbAndFileChangeFileAndReload()
        {
            dbSettings["string_setting"] = "db_value";
            UseSettingsFile("test_settings_1.xml");
            string value = TestGetSetting("string_setting");
            Assert.AreEqual("file_value", value);
            UseSettingsFile("test_settings_2.xml");
            TestCheckForUpdates();
            configMimic.AssertsThat("RefreshSettings").WasCalledOneTime();
            value = TestGetSetting("string_setting");
            Assert.AreEqual("file_value_2", value);
        }

        [TestMethod]
        public void DbAndFileChangeBothAndReload()
        {
            dbSettings["string_setting"] = "db_value";
            UseSettingsFile("test_settings_1.xml");
            string value = TestGetSetting("string_setting");
            Assert.AreEqual("file_value", value);
            dbSettings["string_setting"] = "db_second";
            UseSettingsFile("test_settings_2.xml");
            TestCheckForUpdates(refreshDbSettings: true);
            configMimic.AssertsThat("RefreshSettings").WasCalledOneTime();
            value = TestGetSetting("string_setting");
            Assert.AreEqual("file_value_2", value);
        }

        [TestMethod]
        public void FileSettingsReaderLifetime()
        {
            // Reader starts as NULL
            Assert.IsNull(GetInternalSettingsReader());
            // Getting one setting should attempt to open the reader
            dbSettings["string_setting"] = "db_value";
            string value = TestGetSetting("string_setting");
            Assert.AreEqual("db_value", value);
            configMimic.AssertsThat("GetFileSettings", false).WasCalledOneTime();
            Assert.IsNull(GetInternalSettingsReader());
            configMimic.ResetRecordedMethods();
            // Trying to get a new setting should attempt to open the reader again
            value = TestGetSetting("string_setting_2");
            Assert.IsNull(value);
            configMimic.AssertsThat("GetFileSettings", false).WasCalledOneTime();
            Assert.IsNull(GetInternalSettingsReader());
            configMimic.ResetRecordedMethods();
            // Checking for updates should open and close the reader
            UseSettingsFile("test_settings_1.xml");
            TestCheckForUpdates();
            configMimic.AssertsThat("GetFileSettings", true).WasCalledTwoTimes();
            configMimic.ResetRecordedMethods();
            Assert.IsNull(GetInternalSettingsReader());
            // The following should re-open the settings file which was closed by the last CheckForUpdates call
            value = TestGetSetting("string_setting_3");
            Assert.IsNull(value);
            Assert.IsNotNull(GetInternalSettingsReader());
            configMimic.AssertsThat("GetFileSettings", false).WasCalledOneTime();
            configMimic.ResetRecordedMethods();
            // Checking for updates should close the reader
            TouchSettingsFile();
            TestCheckForUpdates();
            configMimic.AssertsThat("GetFileSettings", true).WasCalledTwoTimes();
            configMimic.ResetRecordedMethods();
            Assert.IsNull(GetInternalSettingsReader());
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\unittest\ConfigInstance\TryCacheSettingsTests.cs ===
﻿using System;
using System.Collections.Generic;
using System.Text;
using Microsoft.MMF;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using xonline.common.config;

namespace configinstance
{
    [TestClass]
    [DeploymentItem("TestFiles", "TestFiles")]
    public class TryCacheSettingsTests : TestBase
    {
        public TestContext TestContext { get; set; }

        [TestInitialize]
        public void TestInitialize()
        {
            SetupMockingFramework();
        }
        
        [TestMethod]
        public void InitialCacheIsEmpty()
        {
            var cache = GetCachedSettings();
            Assert.AreEqual(0, cache.Count);
        }

        [TestMethod]
        public void CacheUndefinedValue()
        {
            var cache = TestTryCacheSettings("string_setting");
            AssertGetBatchSettingsFromDBWasCalled(1);
            Assert.AreEqual(0, cache.Count);
        }

        [TestMethod]
        public void CacheFromDb()
        {
            dbSettings["string_setting"] = "db_value";
            dbSettings["string_setting_2"] = "db_value_2";
            var cache = TestTryCacheSettings("string_setting", "string_setting_2");
            AssertGetBatchSettingsFromDBWasCalled(1);
            Assert.AreEqual(2, cache.Count);
            Assert.AreEqual(cache["string_setting"].Value, "db_value");
            Assert.AreEqual(cache["string_setting_2"].Value, "db_value_2");
        }

        [TestMethod]
        public void CacheFromFile()
        {
            UseSettingsFile("test_settings_1.xml");
            var cache = TestTryCacheSettings("string_setting", "string_setting_2");
            AssertGetBatchSettingsFromDBWasCalled(0);
            Assert.AreEqual(2, cache.Count);
            Assert.AreEqual(cache["string_setting"].Value, "file_value");
            Assert.AreEqual(cache["string_setting_2"].Value, "file_value_2");
        }

        [TestMethod]
        public void CacheFromFileAndDb()
        {
            UseSettingsFile("test_settings_1.xml");
            dbSettings["string_setting_3"] = "db_value_3";
            var cache = TestTryCacheSettings("string_setting", "string_setting_2", "string_setting_3");
            AssertGetBatchSettingsFromDBWasCalled(1);
            Assert.AreEqual(3, cache.Count);
            Assert.AreEqual(cache["string_setting"].Value, "file_value");
            Assert.AreEqual(cache["string_setting_2"].Value, "file_value_2");
            Assert.AreEqual(cache["string_setting_3"].Value, "db_value_3");
        }

        [TestMethod]
        public void CacheFromFileThenDeleteAndCache()
        {
            UseSettingsFile("test_settings_1.xml");
            var cache = TestTryCacheSettings("string_setting", "string_setting_2");
            AssertGetBatchSettingsFromDBWasCalled(0);
            Assert.AreEqual(2, cache.Count);
            Assert.AreEqual(cache["string_setting"].Value, "file_value");
            Assert.AreEqual(cache["string_setting_2"].Value, "file_value_2");
            DeleteSettingsFile();
            cache = TestTryCacheSettings("string_setting", "string_setting_2");
            AssertGetBatchSettingsFromDBWasCalled(0);
            Assert.AreEqual(2, cache.Count);
            Assert.AreEqual(cache["string_setting"].Value, "file_value");
            Assert.AreEqual(cache["string_setting_2"].Value, "file_value_2");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\config\ConfigInstance.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Principal;
using System.Text;
using System.Threading;
using System.Xml;
using System.Globalization;
using Microsoft.Win32;

// Making internals of this assembly visible to the MMF framework to enable unit testing of XblConfig
// For more information see: http://toolbox/mmf
[assembly: InternalsVisibleTo("MMFMocks, PublicKey=0024000004800000940000000602000000240000525341310004000001000100836e4d3f3dbf2701bcb7ac84d745c1a920ec889d31a08a4312bf23e811cac0a2e7fa9a2e0b51ae44ac989df5a4d25e6f517315660e26c90991b530f50d83251cf325927b8dabe12773167f9a2acd5925479e4f2e6b41e76abbc2abf77affe39564d17702c15e263b925410b21c6410e65dc338bf81058d95a7a1b57305b1d2d8")]
[assembly: InternalsVisibleTo("MMFStubs, PublicKey=0024000004800000940000000602000000240000525341310004000001000100836e4d3f3dbf2701bcb7ac84d745c1a920ec889d31a08a4312bf23e811cac0a2e7fa9a2e0b51ae44ac989df5a4d25e6f517315660e26c90991b530f50d83251cf325927b8dabe12773167f9a2acd5925479e4f2e6b41e76abbc2abf77affe39564d17702c15e263b925410b21c6410e65dc338bf81058d95a7a1b57305b1d2d8")]
[assembly: InternalsVisibleTo("MMFMimicTests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100836e4d3f3dbf2701bcb7ac84d745c1a920ec889d31a08a4312bf23e811cac0a2e7fa9a2e0b51ae44ac989df5a4d25e6f517315660e26c90991b530f50d83251cf325927b8dabe12773167f9a2acd5925479e4f2e6b41e76abbc2abf77affe39564d17702c15e263b925410b21c6410e65dc338bf81058d95a7a1b57305b1d2d8")]

namespace xonline.common.config
{
    // Since it is no longer possible for the config code to reference Xom explicitly,
    // Add the code to perform XomLogging via a delegate.  All of the code that performs
    // Logging in config should now go through the event delegate, which in xonline
    // builds should point to Xom.NtEvent

    public delegate void LogEventHandler(uint eventId, string message, string componentName);

    // No explicit initialization is required by the component
    // to get configuration information. The current environment name, siteid, server name,
    // and component name are detected automatically by the class. The current
    // component name is set to the current assembly name for C# components. Non-C#
    // components or C# components that need or want to specify a different component name
    // (e.g. shared code) may use one of the GetSetting overrides.
    [ComVisible(false)]
    public partial class ConfigInstance : ConfigEventLogger
    {
        public event LogEventHandler HandleLogEvent;

        public interface IConfigurationOverride
        {
            string GetInjectedNpdbValue(string setting, string value);
        }

        /// <summary>
        /// This class encapsulates all NPDB discovery logic.  This logic was moved out of
        /// the Config class on 5/8/2008 so that very restricted locking could occur
        /// on the setting of _npdbServer and _npdbDatabase via lock(this), rather than
        /// piggy-backing on _rwLock in the Config class.
        /// </summary>
        private class NpdbInfo
        {
            private readonly ConfigInstance _configInstance;
            private string _npdbServer;
            private string _npdbDatabase;

            public NpdbInfo(ConfigInstance instance, string npdbServer, string npdbDatabase)
            {
                _configInstance = instance;
                _npdbServer = npdbServer;
                _npdbDatabase = npdbDatabase;
            }

            public string NpdbServer
            {
                get
                {
                    string capturedErrors = "";

                    if (_npdbServer != null)
                    {
                        // we've already figured out where NPDB lives, so return it
                        return _npdbServer;
                    }

                    lock (this)
                    {
                        if (_npdbServer != null)
                        {
                            // we've already figured out where NPDB lives, so return it
                            return _npdbServer;
                        }

                        // 1st precedence is to use the server specified in the XBL_CONFIG_SERVER environment variable
                        string serverEnvSetting = System.Environment.GetEnvironmentVariable(_xblConfigServerEnvVarName);
                        if (serverEnvSetting != null)
                        {
                            _npdbServer = serverEnvSetting;

                            _configInstance.LogNtEvent(
                                ConfigEvent.Id.COMMON_INFO_9,
                                "Using NPDB server specified in '" + _xblConfigServerEnvVarName + 
                                "' environment variable, value: " + _npdbServer
                            );

                            return _npdbServer;
                        }

                        // 2nd precedence is to use the server specified in the Server value in the registry key:
                        // \HKLM\Software\Microsoft\XboxLive\CommonConfig
                        RegistryKey commonConfig = Registry.LocalMachine.OpenSubKey(_CommonConfigRegKeyPath);
                        if (commonConfig != null)
                        {
                            object o = commonConfig.GetValue(_ServerRegValueName);

                            if (o != null)
                            {
                                // we should be able to cast this to a string, but we don't want to
                                // completely fail if the cast is bad
                                try
                                {
                                    string temp = (string) o;

                                    _npdbServer = temp;

                                    _configInstance.LogNtEvent(
                                        ConfigEvent.Id.COMMON_INFO_10,
                                        "Using NPDB server specified in registry at '" +
                                        _CommonConfigRegKeyPath + "', value: " + _npdbServer
                                    );

                                    return _npdbServer;
                                }
                                catch (InvalidCastException)
                                {
                                    string errorMessage = "Unable to cast '" +
                                                          _ServerRegValueName +
                                                          "' registry value at path '" + _CommonConfigRegKeyPath +
                                                          "' to a string. This registry setting will be ignored";
                                    capturedErrors += errorMessage + "\n";
                                    _configInstance.LogNtEvent(
                                        ConfigEvent.Id.COMMON_CONFIG_71,
                                        errorMessage
                                    );
                                }
                            }
                        }

                        // 3rd precedence is to use the server pointed to by DNS
                        GetHostByName delegateGetHostByName = Dns.GetHostEntry;
                        IAsyncResult iAsyncResult = delegateGetHostByName.BeginInvoke(
                            _xblConfigServerDNSName,
                            null,
                            null);

                        // wait for up to iTimeoutMilliseconds for the read operation
                        // to complete
                        bool bSignal = iAsyncResult.AsyncWaitHandle.WaitOne(_xblConfigDNSTimeout, false);
                        if (!bSignal)
                        {
                            // the wait timed out, log an NT event noting this, and move along
                            string errorMessage = "Dns.GetHostByName(" + _xblConfigServerDNSName +
                                                  ") timed out. DNS will not be used to find NPDB";
                            capturedErrors += errorMessage + "\n";
                            _configInstance.LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_72, errorMessage);
                        }
                        else
                        {
                            try
                            {
                                IPHostEntry ipHostEntry = delegateGetHostByName.EndInvoke(iAsyncResult);
                                if (ipHostEntry == null)
                                {
                                    // apparently there was no record, log an NT event noting this, and move along
                                    string errorMessage = "Dns.GetHostByName(" + _xblConfigServerDNSName +
                                                          ") returned null. DNS will not be used to find NPDB";
                                    capturedErrors += errorMessage + "\n";
                                    _configInstance.LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_73, errorMessage);
                                }
                                else
                                {
                                    if (ipHostEntry.AddressList.Length < 1)
                                    {
                                        // apparently there was a record, but no addresses for it.
                                        // log an NT event noting this, and move along
                                        string errorMessage = "Dns.GetHostByName(" +
                                                              _xblConfigServerDNSName +
                                                              ") returned a zero length list of IP addresses. DNS will not be used to find NPDB";
                                        capturedErrors += errorMessage + "\n";
                                        
                                        _configInstance.LogNtEvent(
                                            ConfigEvent.Id.COMMON_CONFIG_74,
                                            errorMessage
                                        );
                                    }
                                    else
                                    {
                                        // we have at least one IP address. Use the first one in the list
                                        if (ipHostEntry.AddressList.Length > 1)
                                        {
                                            string errorMessage = "Dns.GetHostByName(" +
                                                                  _xblConfigServerDNSName +
                                                                  ") returned " + ipHostEntry.AddressList.Length +
                                                                  " IP addresses. The first address in the list will be used and the rest will be ignored";
                                            _configInstance.LogNtEvent(
                                                ConfigEvent.Id.COMMON_CONFIG_75,
                                                errorMessage
                                            );
                                        }

                                        _npdbServer = ipHostEntry.AddressList[0].ToString();

                                        _configInstance.LogNtEvent(
                                           ConfigEvent.Id.COMMON_INFO_11,
                                           "Using NPDB server specified by DNS for hostname '" +
                                           _xblConfigServerDNSName + "'value: " + _npdbServer
                                           
                                        );

                                        return _npdbServer;
                                    }
                                }
                            }
                            catch (SocketException e)
                            {
                                // Dns.GetHostByName will throw a socket exception if the host is not
                                // known. Simply log an event and move along
                                string errorMessage = "Dns.GetHostByName(" + _xblConfigServerDNSName +
                                                      ") threw a SocketException. DNS will not be used to find NPDB. Exception message: " +
                                                      e.Message;
                                capturedErrors += errorMessage + "\n";
                                _configInstance.LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_76, errorMessage);
                            }
                        }

                        // 4th precedence is to use the server specified in CommonConfig.xml
                        // in the directory where the calling assembly lives
                        string defaultConfigFile = Path.Combine(_configInstance.AssemblyDirectory, _defaultConfigFileName);
                        if (!File.Exists(defaultConfigFile))
                        {
                            string errorMessage = "The default xml configuration file '" +
                                                  defaultConfigFile + "' was not found.";

                            capturedErrors += errorMessage + "\n";
                            _configInstance.LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_77, errorMessage);
                        }
                        else
                        {
                            string temp = _configInstance.LoadServerFromXml(defaultConfigFile);

                            // if we got a server, then we're done, otherwise, fall through
                            // to the next option to figure out the server
                            if (temp != null)
                            {
                                _npdbServer = temp;

                                _configInstance.LogNtEvent(ConfigEvent.Id.COMMON_INFO_12, 
                                   "Using NPDB server specified in '" + defaultConfigFile +
                                   "' xml configuration file, value: " + _npdbServer
                                );

                                return _npdbServer;
                            }
                        }

                        // if we get here, we didn't figure out where NPDB lives, so we log an
                        // event and throw
                        ApplicationException ae =
                            new ApplicationException("Unable to determine location of NPDB\n" + capturedErrors);
                        _configInstance.LogNtEvent(
                            ConfigEvent.Id.COMMON_CONFIG_78, 
                            ae + "\n" + System.Environment.StackTrace);
                        throw ae;
                    }
                }
                set
                {
                    lock (this)
                    {
                        // flush any cached information, then remember what
                        // server the caller wants us to use from now on.
                        _configInstance.DiscardCachedValues();

                        _npdbServer = value;

                        _configInstance.LogNtEvent(ConfigEvent.Id.COMMON_INFO_13, 
                                   "Using NPDB server specified by caller, value: " + _npdbServer );
                    }
                }
            }

            public string NpdbDatabase
            {
                get
                {
                    if (_npdbDatabase != null)
                    {
                        // we've already figured out what the name of the NPDB database is, so return it
                        return _npdbDatabase;
                    }

                    lock (this)
                    {
                        if (_npdbDatabase != null)
                        {
                            return _npdbDatabase;
                        }

                        // 1st precedence is to use the server specified in the XBL_CONFIG_DATABASE environment variable
                        string databaseEnvSetting = System.Environment.GetEnvironmentVariable(_xblConfigDatabaseEnvVarName);
                        if (databaseEnvSetting != null)
                        {
                            _npdbDatabase = databaseEnvSetting;

                            _configInstance.LogNtEvent(ConfigEvent.Id.COMMON_INFO_14, 
                                       "Using NPDB database name specified in '" +
                                       _xblConfigDatabaseEnvVarName + "' environment variable, value: " + _npdbDatabase);
                            return _npdbDatabase;
                        }

                        // 2nd precedence is to use the database name specified in the Database value in the registry key:
                        // \HKLM\Software\Microsoft\XboxLive\CommonConfig
                        RegistryKey commonConfig = Registry.LocalMachine.OpenSubKey(_CommonConfigRegKeyPath);
                        if (commonConfig != null)
                        {
                            object o = commonConfig.GetValue(_DatabaseRegValueName);
                            // we should be able to cast this to a string, but we don't want to
                            // completely fail if the cast is bad
                            string temp = null;
                            try
                            {
                                temp = (string)o;
                            }
                            catch (InvalidCastException)
                            {
                                _configInstance.LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_79, 
                                           "Unable to cast '" + _DatabaseRegValueName +
                                           "' registry value at path '" + _CommonConfigRegKeyPath +
                                           "' to a string. This registry setting will be ignored"
                                           );
                            }

                            // if we got a database name, then we're done, otherwise, fall through
                            // to the next option to figure out the database name
                            if (temp != null)
                            {
                                _npdbDatabase = temp;

                                _configInstance.LogNtEvent(ConfigEvent.Id.COMMON_INFO_15, 
                                           "Using NPDB database name specified in registry at '" +
                                           _CommonConfigRegKeyPath + "', value: " + _npdbDatabase
                                           );
                                return _npdbDatabase;
                            }
                        }

                        // 3rd precedence is to use the database name specified in CommonConfig.xml
                        // in the directory where the calling assembly lives
                        string defaultConfigFile = Path.Combine(Path.GetDirectoryName(_configInstance.AssemblyPath), _defaultConfigFileName);
                        if (File.Exists(defaultConfigFile))
                        {
                            string temp2 = _configInstance.LoadDatabaseFromXml(defaultConfigFile);

                            _npdbDatabase = temp2;

                            // if we got a server, then we're done, otherwise, fall through
                            // to the next option to figure out the server
                            if (_npdbDatabase != null)
                            {
                                _configInstance.LogNtEvent(ConfigEvent.Id.COMMON_INFO_16,
                                           "Using NPDB database name specified in '" +
                                           defaultConfigFile +
                                           "' xml configuration file, value: " + _npdbDatabase
                                           );
                                return _npdbDatabase;
                            }
                        }

                        // if we get here, none of the locations above specified a value for the
                        // database name, so we use the default of "npdb". I don't want services
                        // to compile defaults in, because I want those defaults to be in NPDB,
                        // but since this is a bootstrap to get to npdb, I think it's ok to compile
                        // in a default.
                        _configInstance.LogNtEvent(ConfigEvent.Id.COMMON_INFO_17, 
                                   "Using default NPDB database name of '" + _defaultDatabaseName +
                                   "'");

                        _npdbDatabase = _defaultDatabaseName;

                        return _npdbDatabase;
                    }
                }
                set
                {
                    lock(this)
                    {
                        // flush any cached information, then remember what
                        // database name the caller wants us to use from now on.
                        _configInstance.DiscardCachedValues();

                        _npdbDatabase = value;

                        _configInstance.LogNtEvent(
                            ConfigEvent.Id.COMMON_INFO_18,
                            "Using NPDB database name specified by caller, value: " + _npdbDatabase
                        );
                    }
                }
            }
        }

        // This ReaderWriterLock is used in place of the lock(typeof(Config)) idiom
        // that was found to be too slow.
        private readonly ReaderWriterLock _rwLock;
        private readonly NpdbInfo _npdbInfo;
        private readonly string _connStringSuffix = null;

        // We use this timeout on all lock requests. If we ever see it timeout
        // we're very likely in a deadlock situation and should investigate.
        // The config class should not be holding write locks for 60 seconds.
        private const int _rwLockTimeout = 60000;

        private Hashtable _refreshFunction; // A hash table of ArrayList, Hashtable1 =  (function, ArrayList) and ArrayList = (table)

        public Hashtable RefreshFunction
        {
            get
            {
                if (null != _refreshFunction)
                {
                    return _refreshFunction;
                }

                _rwLock.AcquireWriterLock(_rwLockTimeout);
                try
                {
                    if (null != _refreshFunction)
                    {
                        return _refreshFunction;
                    }

                    _refreshFunction = NpdbAccess.GetAllRefreshFunctions(NpdbConnectionString);

                    return _refreshFunction;
                }
                finally
                {
                    _rwLock.ReleaseWriterLock();
                }
            }

            set
            {
                _rwLock.AcquireWriterLock(_rwLockTimeout);
                try
                {
                    _refreshFunction = value;
                }
                finally
                {
                    _rwLock.ReleaseWriterLock();
                }
            }
        }

        public static ConfigInstance Create()
        {
            return new ConfigInstance();
        }

        public static ConfigInstance Create(string npdbServer, string npdbDatabase)
        {
            return new ConfigInstance(npdbServer, npdbDatabase);
        }

        public static ConfigInstance Create(string npdbServer, string npdbDatabase, string connectionStringSuffix)
        {
            return new ConfigInstance(npdbServer, npdbDatabase, connectionStringSuffix);
        }

        // We need the reader writer lock to be initialized before any
        // member is called, so we initialize it in a constructor.
        // We also use this opportunity to attach our global change
        // event handlers.
        private ConfigInstance()
        {
            _rwLock = new ReaderWriterLock();
            SettingChange += SettingChangeFilter.GlobalHandler;
            _npdbInfo = new NpdbInfo(this, null, null);
        }

        // We need the reader writer lock to be initialized before any
        // member is called, so we initialize it in a constructor.
        // We also use this opportunity to attach our global change
        // event handlers.
        private ConfigInstance(string npdbServer, string npdbDatabase)
        {
            _rwLock = new ReaderWriterLock();
            SettingChange += SettingChangeFilter.GlobalHandler;
            _npdbInfo = new NpdbInfo(this, npdbServer, npdbDatabase);
        }

        // We need the reader writer lock to be initialized before any
        // member is called, so we initialize it in a constructor.
        // We also use this opportunity to attach our global change
        // event handlers.
        //
        // RWLock is initialized first by calling base constructor
        private ConfigInstance(string npdbServer, string npdbDatabase, string connectionStringSuffix)
            : this(npdbServer, npdbDatabase)
        {
            _connStringSuffix = connectionStringSuffix;
            if (_connStringSuffix.Length > 0 && _connStringSuffix[0] != ';')
                _connStringSuffix = ";" + _connStringSuffix;
        }

        public const string _xblConfigServerEnvVarName = "XBL_CONFIG_SERVER";
        private const string _xblConfigDatabaseEnvVarName = "XBL_CONFIG_DATABASE";

        private const string _xblConfigServerDNSName = "npdb";
        private const int _xblConfigDNSTimeout = 60000;

        private int _npdbConnectionTimeout = 15;

        public int NpdbConnectionTimeout
        {
            get
            {
                return _npdbConnectionTimeout;
            }
            set
            {
                Interlocked.Exchange(ref _npdbConnectionTimeout, value);
            }
        }
        
        private const string _defaultSettingsFileName = "XblConfig.config";
		
		private const string _environmentSettingsFileName = "XblConfig.{0}.config";
        
        private string[] SettingFilePaths
        {
            get
            {
                return new string[]
                {
					Path.Combine(System.Environment.CurrentDirectory, string.Format(_environmentSettingsFileName, Environment)),
                    Path.Combine(System.Environment.CurrentDirectory, _defaultSettingsFileName),
					Path.Combine(AssemblyDirectory, string.Format(_environmentSettingsFileName, Environment)),
                    Path.Combine(AssemblyDirectory, _defaultSettingsFileName),
                };
            }
        }

        private const string _defaultConfigFileName = "CommonConfig.xml";
        private const string _defaultDatabaseName = "npdb";

        private const string _npdbServerXpath = "/npdb/@server";
        private const string _npdbDBNameXpath = "/npdb/@dbname";

        // this is relative to HKLM
        private const string _CommonConfigRegKeyPath = "Software\\Microsoft\\XboxLive\\CommonConfig";
        private const string _ServerRegValueName = "Server";
        private const string _DatabaseRegValueName = "Database";

        private IConfigurationOverride _configOverride;
        private Assembly _assembly;
        private string _assemblyPath;
        private string _applicationName;
        private string _componentName;
        private string _environment;
        private string _environmentType;
        private int _siteId;
        private bool _siteIdLookedUp;
        private string _server;
        private string _component = config.Component.unknown;
        private int _mainSiteId;
        private bool _mainSiteIdLookedUp;
        private Hashtable _reportMessageComponentIdMapping;

        private Random _rand;

        private int _inUpdate;

        // this Timer is what checks for updates, and the timer callback
        // needs to impersonte the windows identity of the process that
        // is using config
        private Timer _refreshTimer;
        private Int64 _latestChangeId;
        private Int64 _latestChangeFileTime;
        private bool _firstTimerCallback;
        private int _minEventInterval;
        private int _cacheRefreshInterval;
        
        private volatile FileSettingsReader _fileSettings;
        private object _fileSettingsLock = new object();
        
        private FileSettingsReader GetFileSettings(bool reload)
        {
            FileSettingsReader reader = _fileSettings;
            if (reader == null || reload)
            {
                reader = FileSettingsReader.TryOpen(SettingFilePaths);
                if (reader != null)
                {
                    // No locking will happen if the file does not exist.
                    lock (_fileSettingsLock)
                    {
                        if (_fileSettings == null || reload)
                        {
                            _fileSettings = reader;
                        }
                        else
                        {
							// Another thread went ahead and opened it first. Return that copy instead.
                            reader = _fileSettings;
                        }
                    }
                }
            }
            
            return reader;
        }
        
        private void CloseFileSettings()
        {
			// No lock needed because GetFileSettings always operates on a copy of _fileSettings 
            _fileSettings = null;
        }

        public IConfigurationOverride ConfigurationOverride
        {
            get
            {
                return _configOverride;
            }
            set
            {
                _configOverride = value;
            }
        }

        public Int64 LatestChangeId
        {
            get
            {
                return _latestChangeId;
            }
        }
        private Int64 LatestChangeIdSet
        {
            set
            {
                Interlocked.Exchange(ref _latestChangeId, value);
            }
        }

        public Int64 LatestChangeFileTime
        {
            get
            {
                return _latestChangeFileTime;
            }
        }
        
        private Int64 LatestChangeFileTimeSet
        {
            set
            {
                Interlocked.Exchange(ref _latestChangeFileTime, value);
            }
        }

        public TimeSpan MinEventInterval
        {
            get
            {
                return new TimeSpan(0, 0, 0, 0, _minEventInterval);
            }
        }
        private int MinEventIntervalSet
        {
            set
            {
                Interlocked.Exchange(ref _minEventInterval, value);
            }
        }

        public int CacheRefreshInterval
        {
            get
            {
                return _cacheRefreshInterval;
            }
        }
        private int CacheRefreshIntervalSet
        {
            set
            {
                Interlocked.Exchange(ref _cacheRefreshInterval, value);
            }
        }
        
        private int _npdbSettingAccess = 0;
        
        private void LogNpdbSettingAccess()
        {
            int original = Interlocked.CompareExchange(ref _npdbSettingAccess, 1, 0);
            
            if (original == 0)
            {
                LogNtEvent(
                    ConfigEvent.Id.COMMON_CONFIG_USING_NPDB_SETTINGS, 
                    string.Format("NPDB accessed for settings by {0} at the following stack:\n{1}",
                    ComponentName,
                    System.Environment.StackTrace));
            }
        }

        private void RefreshTimerInit()
        {
            if (_refreshTimer == null)
            {
                // get the minimum interval that must pass before we'll signal
                // an additional NT event for a particular stale cache line
                MinEventIntervalSet = GetMinEventInterval();

                // log the min event interval
                LogMinEventInterval();

                // get the iterval that we'll check for updates in npdb
                CacheRefreshIntervalSet = GetCacheRefreshInterval();

                // log the cache refresh interval
                LogCacheRefreshInterval();

                RecreateRefreshTimer();
            }
        }

        private void RecreateRefreshTimer()
        {
            // for informational purposes, log the current windows identity
            WindowsIdentity current = WindowsIdentity.GetCurrent();
            string currentName = (current == null ? "<unknown identity>" : current.Name);

            LogNtEvent(
                       ComponentName,
                       "The NPDB refresh timer is being created by a thread using the following windows identity: " +
                       currentName + "\n", ConfigEvent.Id.COMMON_INFO_4);

            // get the latest change id in the database
            LatestChangeIdSet = GetLatestChangeId();
            LatestChangeFileTimeSet = GetLatestChangeFileTime();
            // no need to check return, will throw if invalid

            // setup the timer that will periodically call CheckForUpdates
            // make sure we keep a reference to the timer, or else it
            // will be disposed on us

            _firstTimerCallback = true;
            Timer timerToDispose = Interlocked.Exchange(
                ref _refreshTimer,
                new Timer(CheckForUpdatesCallback, null,
                          CacheRefreshInterval +
                          Rand.Next(0, CacheRefreshInterval),
                          CacheRefreshInterval));


            //  Dispose the old timer.
            if (timerToDispose != null)
            {
                timerToDispose.Dispose();
            }
        }

        private void CheckForUpdatesCallback(object state)
        {
            if (_firstTimerCallback)
            {
                _rwLock.AcquireWriterLock(_rwLockTimeout);
                try
                {
                    if (_firstTimerCallback)
                    {
                        WindowsIdentity current = WindowsIdentity.GetCurrent();
                        string currentName = (current == null ? "<unknown identity>" : current.Name);

                        // for informational purposes, log the current windows identity
                        // but we only do this the first time the timer calls us
                        LogNtEvent(
                            ConfigEvent.Id.COMMON_INFO_4,
                            "The NPDB refresh timer is being called by a thread using the following windows identity: " +
                            currentName + "\n"
                        );

                        _firstTimerCallback = false;
                    }
                }
                finally
                {
                    _rwLock.ReleaseWriterLock();
                }
            }

            CheckForUpdates();
        }


        private bool ShouldUpdateData(NpdbRefreshTypes refreshType, Hashtable htModifiedTables)
        {
            bool fRet = false;

            ArrayList arrTablesOfInterest = (ArrayList)RefreshFunction[refreshType];

            if (null != arrTablesOfInterest)
            {
                foreach (string szTable in arrTablesOfInterest)
                {
                    if (htModifiedTables.ContainsKey(szTable))
                    {
                        fRet = true; //i am interested in this table
                        break;
                    }
                }
            }
            else
            {
                fRet = true;// if this function is not configured, then by default we would refresh by default
            }

            return fRet;
        }


        //While this could be use for other things, it is currently planned to be used for testing
        #region NPDB Refresh Type Notification

        public event RefreshTypeEventHandler _npdbRefreshNotification = null;
        protected void OnNpdbRefresh(NpdbRefreshTypes npdbRefreshType)
        {
            if (null != _npdbRefreshNotification)
            {
                _npdbRefreshNotification(npdbRefreshType);
            }
        }

        #endregion

        public void CheckForUpdates()
        {
            // track how much time is spent processing the change
            System.Diagnostics.Stopwatch timeElapsed = new System.Diagnostics.Stopwatch();
            timeElapsed.Start();

            if (Interlocked.CompareExchange(ref _inUpdate, 1, 0) == 1)
            {
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_69,
                    "A prior configuration change has not yet finished propagating\n"
                   + "through the system.  If this persists it may indicate a\n"
                   + "deadlocked state.");
                return;
            }

            try
            {
                // get the highest change id in NPDB and xml settings file
                Int64 currentChangeId = GetLatestChangeId();
                Int64 currentChangeFileTime = GetLatestChangeFileTime();
                // no need to check return, will throw if invalid
                
                bool refreshedSettings = false;
                bool refreshedMultiSettings = false;

                // if the latest change id is higher than the one
                // from our last check, something has changed in NPDB
                // and we need to refresh the cache
                if (currentChangeId > LatestChangeId)
                {
                    //LogNtEvent(ConfigEvent.Id.COMMON_INFO_6,
                    //    "A configuration change has been detected in NPDB\n"
                    //    + "NPDB will now be examined for relevant changes\n"
                    //    + "Previous Change ID: " + LatestChangeId + "\n"
                    //    + "New Change ID: " + currentChangeId + "\n");

                    // Get a list of the tables that have been modified
                    // since the last change id we were aware of
                    Hashtable modifiedTables = GetModifiedTables(LatestChangeId);

                    // Update the latest change id first, before we do anything
                    // below. We want to make sure that no matter what happens
                    // in the calls below, we won't reexamine the caches for
                    // the same change again.
                    LatestChangeIdSet = currentChangeId;

                    if (null != modifiedTables["t_config_refresh_functions"])
                    {
                        RefreshFunction = NpdbAccess.GetAllRefreshFunctions(NpdbConnectionString);
                    }

                    OnNpdbRefresh(NpdbRefreshTypes.REFRESH_STARTS);

                    if (ShouldUpdateData(NpdbRefreshTypes.REFRESH_SERVER_LIST, modifiedTables))
                    {
                        OnNpdbRefresh(NpdbRefreshTypes.REFRESH_SERVER_LIST);
                        RefreshServerLists();
                    }

                    if (ShouldUpdateData(NpdbRefreshTypes.REFRESH_INTERFACES, modifiedTables))
                    {
                        OnNpdbRefresh(NpdbRefreshTypes.REFRESH_INTERFACES);
                        RefreshInterfaces();
                    }

                    if (ShouldUpdateData(NpdbRefreshTypes.REFRESH_INTERFACE_BUCKETS, modifiedTables))
                    {
                        OnNpdbRefresh(NpdbRefreshTypes.REFRESH_INTERFACE_BUCKETS);
                        RefreshInterfaceBuckets();
                    }

                    if (ShouldUpdateData(NpdbRefreshTypes.REFRESH_VIRTUAL_INTERFACE_LISTS, modifiedTables))
                    {
                        OnNpdbRefresh(NpdbRefreshTypes.REFRESH_VIRTUAL_INTERFACE_LISTS);
                        RefreshVirtualInterfaceLists();
                    }

                    if (ShouldUpdateData(NpdbRefreshTypes.REFRESH_VIRTUAL_INTERFACES, modifiedTables))
                    {
                        OnNpdbRefresh(NpdbRefreshTypes.REFRESH_VIRTUAL_INTERFACES);
                        RefreshVirtualInterfaces();
                    }

                    if (ShouldUpdateData(NpdbRefreshTypes.REFRESH_SETTINGS, modifiedTables))
                    {
                        OnNpdbRefresh(NpdbRefreshTypes.REFRESH_SETTINGS);
                        RefreshSettings();
                        refreshedSettings = true;
                    }

                    if (ShouldUpdateData(NpdbRefreshTypes.REFRESH_MULTI_SETTINGS, modifiedTables))
                    {
                        OnNpdbRefresh(NpdbRefreshTypes.REFRESH_MULTI_SETTINGS);
                        RefreshMultiSettings();
                        refreshedMultiSettings = true;
                    }

                    if (ShouldUpdateData(NpdbRefreshTypes.REFRESH_GAME_CONFIG, modifiedTables))
                    {
                        OnNpdbRefresh(NpdbRefreshTypes.REFRESH_GAME_CONFIG);
                        RefreshGameConfig();
                    }

                    if (ShouldUpdateData(NpdbRefreshTypes.REFRESH_XDELAY, modifiedTables))
                    {
                        OnNpdbRefresh(NpdbRefreshTypes.REFRESH_XDELAY);
                        RefreshXDelaySettings();
                    }

                    if (ShouldUpdateData(NpdbRefreshTypes.REFRESH_XRL_MAPPINGS, modifiedTables))
                    {
                        OnNpdbRefresh(NpdbRefreshTypes.REFRESH_XRL_MAPPINGS);
                        RefreshXrlMappings();
                    }

                    if (ShouldUpdateData(NpdbRefreshTypes.REFRESH_HEALTH_MAPPINGS, modifiedTables))
                    {
                        OnNpdbRefresh(NpdbRefreshTypes.REFRESH_HEALTH_MAPPINGS);
                        RefreshHealthMappings();
                    }

                    if (ShouldUpdateData(NpdbRefreshTypes.REFRESH_LIVE_REGISTRY_SETTINGS, modifiedTables))
                    {
                        OnNpdbRefresh(NpdbRefreshTypes.REFRESH_LIVE_REGISTRY_SETTINGS);
                        RefreshLiveRegistrySettings();
                    }

                    if (ShouldUpdateData(NpdbRefreshTypes.REFRESH_SERVICE_KEYS, modifiedTables))
                    {
                        OnNpdbRefresh(NpdbRefreshTypes.REFRESH_SERVICE_KEYS);
                        RefreshServiceKeys();
                    }

                    if (ShouldUpdateData(NpdbRefreshTypes.REFRESH_CONFIG_BLOBS, modifiedTables))
                    {
                        OnNpdbRefresh(NpdbRefreshTypes.REFRESH_CONFIG_BLOBS);
                        RefreshConfigBlobs();
                    }

                    if (ShouldUpdateData(NpdbRefreshTypes.REFRESH_ETX_MANIFEST, modifiedTables))
                    {
                        OnNpdbRefresh(NpdbRefreshTypes.REFRESH_ETX_MANIFEST);
                        RefreshEtxManifest();
                    }

                    OnNpdbRefresh(NpdbRefreshTypes.REFRESH_ENDS);

                    // Record an informational event indicating how much time was spent
                    // processing the change.
                    LogNtEvent(ConfigEvent.Id.CONFIG_CHANGE_PROCESSED,
                        "NPDB configuration change ID: " + currentChangeId + " has been processed.\n"
                        + "Time elapsed: " + timeElapsed.Elapsed.Milliseconds + " milliseconds.\n");
                }
                
                if (currentChangeFileTime > LatestChangeFileTime)
                {
                    var timeElapsedFile = System.Diagnostics.Stopwatch.StartNew();
                    
                    LatestChangeFileTimeSet = currentChangeFileTime;
                    
                    if (!refreshedSettings)
                    {
                        RefreshSettings();
                    }
                    
                    if (!refreshedMultiSettings)
                    {
                        RefreshMultiSettings();
                    }
                    
                    // Record an informational event indicating how much time was spent
                    // processing the change.
                    LogNtEvent(ConfigEvent.Id.CONFIG_CHANGE_PROCESSED,
                        "XML file configuration change ID: " + currentChangeFileTime + " has been processed.\n"
                        + "Time elapsed: " + timeElapsedFile.Elapsed.Milliseconds + " milliseconds.\n");
                }
                
                // to relieve memory pressure, close the xml settings file in every refresh cycle 
                // and allow it to be reopened if a new setting is required
                CloseFileSettings();

                // the caches have been refreshed, the client code has been
                // signaled of each change, so we're done.
            }
            catch (Exception e)
            {
                LogNtEvent(ConfigEvent.Id.COMMON_COMM_7,
                    "Failed to retrieve all configuration changes.\n"
                    + "Some cached configuration settings will be used\n"
                    + "until this issue is resolved.\n"
                    + "(time elapsed processing: " + timeElapsed.Elapsed.Milliseconds + " milliseconds)\n"
                    + "Exception Message: " + e.Message + "\n");
            }
            finally
            {
                Interlocked.Exchange(ref _inUpdate, 0);
            }
        }

        public string ProcessConfigCache(string xmgmtCommand, string [] commandArgs)
        {
            switch (xmgmtCommand)
            {
                case "assemblypath":
                    return AssemblyPath;

                case "cacherefreshinterval":
                    return CacheRefreshInterval.ToString();

                case "component":
                    return Component;

                case "componentname":
                    return ComponentName;

                case "environment":
                    return Environment;

                case "help":
                    return ProcessConfigCacheHelp();

                case "interface":
                    return ProcessConfigCacheInterface(commandArgs);

                case "interfaces":
                    return ProcessConfigCacheInterfaces();

                case "interfacebucket":
                    return ProcessConfigCacheInterfaceBucket(commandArgs);

                case "interfacebuckets":
                    return ProcessConfigCacheInterfaceBuckets(Interface.None);

                case "latestchangeid":
                    return LatestChangeId.ToString();

                case "mainsiteid":
                    return MainSiteId.ToString();

                case "mineventinterval":
                    return MinEventInterval.TotalMilliseconds.ToString();

                case "multisetting":
                    return ProcessConfigCacheMultiSetting(commandArgs);

                case "multisettings":
                    return ProcessConfigCacheMultiSettings();

                case "nativenpdbconnectionstring":
                    return NativeNpdbConnectionString;

                case "npdbconnectionstring":
                    return NpdbConnectionString;

                case "npdbdatabase":
                    return NpdbDatabase;

                case "npdbserver":
                    return NpdbServer;

                case "server":
                    return Server;

                case "serverlist":
                    return ProcessConfigCacheServerList(commandArgs);

                case "serverlists":
                    return ProcessConfigCacheServerLists();

                case "setting":
                    return ProcessConfigCacheSetting(commandArgs);

                case "settings":
                    return ProcessConfigCacheSettings();

                case "siteid":
                    return SiteId.ToString();

                case "virtualinterface":
                    return ProcessConfigCacheVirtualInterface(commandArgs);

                case "virtualinterfaces":
                    return ProcessConfigCacheVirtualInterfaces();

                case "virtualinterfacelist":
                    return ProcessConfigCacheVirtualInterfaceList(commandArgs);

                case "virtualinterfacelists":
                    return ProcessConfigCacheVirtualInterfaceLists();

                default:
                    return ProcessConfigCacheHelp();
            }
        }

        private static string ProcessConfigCacheHelp()
        {
            //.........1.........2.........3.........4.........5.........6.........7..........8
            return
                 "configcache <command> [parameters]\r\n"
                + " where <command> is one of:\r\n"
                + "  assemblypath        - show current assembly path\r\n"
                + "  cacherefreshinterval- show the amount of time (in milliseconds)\r\n"
                + "                        between checks for updates in npdb\r\n"
                + "  component           - show current default component\r\n"
                + "                        note: may be 'unknown' if component name\r\n"
                + "                        does not match any known components\r\n"
                + "  componentname       - show current component name\r\n"
                + "  environment         - show current default environment\r\n"
                + "  help                - show this message\r\n"
                + "  interface <server> <name> \r\n"
                + "                      - show interface cache entry for interface <name>\r\n"
                + "                        on server <server> that matches current default\r\n"
                + "                        environment\r\n"
                + "  interfaces          - show entire interface cache\r\n"
                + "  interfacebucket <name> \r\n"
                + "                      - show interfacebucket cache entries for interface\r\n"
                + "                        <name> for the default environment\r\n"
                + "  interfacebuckets    - show entire interfacebucket cache\r\n"
                + "  latestchangeid      - show the latest changeid known by this component\r\n"
                + "  mainsiteid          - show main site id\r\n"
                + "                        the main site id is the site that contains npdb\r\n"
                + "  mineventinterval    - show the amount of time (in milliseconds)\r\n"
                + "                        that must elapse before a duplicate stale config\r\n"
                + "                        event will be written\r\n"
                + "  multisetting <name> - show multisetting cache entry for <name>\r\n"
                + "                        that matches current default environment,\r\n"
                + "                        siteid, server, and component\r\n"
                + "  multisettings       - show entire multisetting cache\r\n"
                + "  nativenpdbconnectionstring\r\n"
                + "                      - show npdb connection string used by native code\r\n"
                + "  npdbconnectionstring- show npdb connection string\r\n"
                + "  npdbdatabase        - show npdb database name\r\n"
                + "  npdbserver          - show npdb server ip or name\r\n"
                + "  server              - show current default server name\r\n"
                + "  serverlist <name>   - show server list cache entry for interface <name>\r\n"
                + "                        that matches current default environment\r\n"
                + "  serverlists         - show entire server list cache\r\n"
                + "  setting <name>      - show setting cache entry for <name>\r\n"
                + "                        that matches current default environment,\r\n"
                + "                        siteid, server, and component\r\n"
                + "  settings            - show entire setting cache\r\n"
                + "  siteid              - show current default siteid\r\n"
                + "  virtualinterface <name> <site>\r\n"
                + "                      - show virtual interface cache line for virtual\r\n"
                + "                        interface <name> for site id <site> in the\r\n"
                + "                        default environment\r\n"
                + "  virtualinterfaces   - show entire virtual interface cache\r\n"
                + "  virtualinterfacelist <site>\r\n"
                + "                      - show virtual interface list cache line for\r\n"
                + "                        siteid <site> for the default environment\r\n"
                + "  virtualinterfacelists\r\n"
                + "                      - show entire virtual interface list cache\r\n";
        }

        private string ProcessConfigCacheInterface(string[] args)
        {
            if (args.Length != 3
                || String.IsNullOrEmpty(args[1])
                || String.IsNullOrEmpty(args[2]))
            {
                return "Error: invalid command arguments\r\n\r\n"
                    + ProcessConfigCacheHelp();
            }

            string server = args[1];
            string interfaceName = args[2];

            // create the key of the cache line we're looking for:
            InterfaceKey key = new InterfaceKey();
            key._environment = Environment;
            key._server = server;
            key._iface = interfaceName;

            // see if we have a cache line for this entry
            if (InterfaceCache.ContainsKey(key))
            {
                InterfaceCacheLine cacheLine = (InterfaceCacheLine)InterfaceCache[key];

                // we have a cache line, so return it
                return "{environment,server,interface}{value,isStale,lastEventTime,newValue}\r\n"
                    + "{" + key + "}{" + cacheLine + "}\r\n";
            }
            return "Error: No interface cache line found matching key {" + key + "}\r\n";
        }

        private string ProcessConfigCacheInterfaces()
        {
            // iterate through all Interface cache lines, and add each
            // one to the output string
            StringBuilder output = new StringBuilder();
            output.Append(InterfaceCache.Count
                + " lines are present in the interface cache\r\n");
            output.Append("Format of cache lines is:\r\n");
            output.Append("{environment,server,interface}{value,isStale,lastEventTime,newValue}\r\n\r\n");

            foreach (DictionaryEntry de in InterfaceCache)
            {
                InterfaceKey key = (InterfaceKey)de.Key;
                InterfaceCacheLine cacheLine = (InterfaceCacheLine)de.Value;
                output.Append("{" + key + "}{" + cacheLine + "}\r\n");
            }

            return output.ToString();
        }

        private string ProcessConfigCacheInterfaceBucket(string[] args)
        {
            if (args.Length != 2
                || string.IsNullOrEmpty(args[1]))
            {
                return "Error: invalid command arguments\r\n\r\n"
                    + ProcessConfigCacheHelp();
            }

            string iface = args[1];

            // use ProcessConfigCacheInterfaceBuckets to output the cache lines,
            // but only those that match the interface provided
            return ProcessConfigCacheInterfaceBuckets(iface);
        }

        private string ProcessConfigCacheInterfaceBuckets(string iface)
        {
            // iterate through all InterfaceBucket cache lines, and add each
            // one to the output string
            StringBuilder output = new StringBuilder();
            if (iface == Interface.None)
            {
                output.Append(InterfaceBucketCache.Count
                    + " lines are present in the interface bucket cache\r\n");
                output.Append("Format of cache lines is:\r\n");
            }
            output.Append("{environment,interface,titleid,bucket}{value,isStale,lastEventTime,newValue}\r\n");
            if (iface == Interface.None)
            {
                output.Append("\r\n");
            }

            foreach (DictionaryEntry de in InterfaceBucketCache)
            {
                InterfaceBucketKey key = (InterfaceBucketKey)de.Key;
                if (iface == Interface.None || key._iface == iface)
                {
                    InterfaceBucketCacheLine cacheLine = (InterfaceBucketCacheLine)de.Value;
                    output.Append("{" + key + "}{" + cacheLine + "}\r\n");
                }
            }

            return output.ToString();
        }

        private string ProcessConfigCacheMultiSetting(string[] args)
        {
            if (args.Length != 2
                || string.IsNullOrEmpty(args[1]))
            {
                return "Error: invalid command arguments\r\n\r\n"
                    + ProcessConfigCacheHelp();
            }

            string multiSetting = args[1];

            // create the key of the cache line we're looking for:
            MultiSettingKey key = new MultiSettingKey();
            key._environment = Environment;
            key._siteId = SiteId;
            key._server = Server;
            key._component = Component;
            key._multiSetting = multiSetting;

            // see if we have a cache line for this entry
            if (MultiSettingCache.ContainsKey(key))
            {
                MultiSettingCacheLine cacheLine = (MultiSettingCacheLine)MultiSettingCache[key];

                // we have a cache line, so output it
                return "{environment,siteid,server,component,multisetting}{value,isStale,lastEventTime,newValue}\r\n"
                    + "{" + key + "}{" + cacheLine + "}\r\n";
            }
            return "Error: No multisetting cache line found matching key {" + key + "}\r\n";
        }

        private string ProcessConfigCacheMultiSettings()
        {
            // iterate through all MultiSetting cache lines, and add each
            // one to the output string
            StringBuilder output = new StringBuilder();
            output.Append(MultiSettingCache.Count
                + " lines are present in the multisetting cache\r\n");
            output.Append("Format of cache lines is:\r\n");
            output.Append("{environment,siteid,server,component,multisetting}{value,isStale,lastEventTime,newValue}\r\n\r\n");

            foreach (DictionaryEntry de in MultiSettingCache)
            {
                MultiSettingKey key = (MultiSettingKey)de.Key;
                MultiSettingCacheLine cacheLine = (MultiSettingCacheLine)de.Value;
                output.Append("{" + key + "}{" + cacheLine + "}\r\n");
            }

            return output.ToString();
        }

        private string ProcessConfigCacheServerList(string[] args)
        {
            if (args.Length != 2
                || string.IsNullOrEmpty(args[1]))
            {
                return "Error: invalid command arguments\r\n\r\n"
                    + ProcessConfigCacheHelp();
            }

            string iface = args[1];

            // create the key of the cache line we're looking for:
            ServerListKey key = new ServerListKey();
            key._environment = Environment;
            key._iface = iface;

            // see if we have a cache line for this entry
            if (ServerListCache.ContainsKey(key))
            {
                ServerListCacheLine cacheLine = (ServerListCacheLine)ServerListCache[key];

                // we have a cache line, so return it
                return "{environment,interface}{value,isStale,lastEventTime,newValue}\r\n"
                    + "{" + key + "}{" + cacheLine + "}\r\n";
            }
            return "Error: No server list cache line found matching key {" + key + "}\r\n";
        }

        private string ProcessConfigCacheServerLists()
        {
            // iterate through all ServerList cache lines, and add each
            // one to the output string
            StringBuilder output = new StringBuilder();
            output.Append(ServerListCache.Count
                + " lines are present in the server list cache\r\n");
            output.Append("Format of cache lines is:\r\n");
            output.Append("{environment,interface}{value,isStale,lastEventTime,newValue}\r\n\r\n");

            foreach (DictionaryEntry de in ServerListCache)
            {
                ServerListKey key = (ServerListKey)de.Key;
                ServerListCacheLine cacheLine = (ServerListCacheLine)de.Value;
                output.Append("{" + key + "}{" + cacheLine + "}\r\n");
            }

            return output.ToString();
        }

        private string ProcessConfigCacheSetting(string[] args)
        {
            if (args.Length != 2
                || string.IsNullOrEmpty(args[1]))
            {
                return "Error: invalid command arguments\r\n\r\n"
                    + ProcessConfigCacheHelp();
            }

            string setting = args[1];

            // create the key of the cache line we're looking for:
            SettingsKey key = new SettingsKey();
            key._environment = Environment;
            key._siteId = SiteId;
            key._server = Server;
            key._component = Component;
            key._setting = setting;

            // see if we have a cache line for this entry
            if (SettingsCache.ContainsKey(key))
            {
                SettingsCacheLine cacheLine = (SettingsCacheLine)SettingsCache[key];

                // we have a cache line, so output it
                return "{environment,siteid,server,component,setting}{value,isStale,lastEventTime,newValue}\r\n"
                    + "{" + key + "}{" + cacheLine + "}\r\n";
            }
            return "Error: No setting cache line found matching key {" + key + "}\r\n";
        }

        private string ProcessConfigCacheSettings()
        {
            // iterate through all Setting cache lines, and add each
            // one to the output string
            StringBuilder output = new StringBuilder();
            output.Append(SettingsCache.Count
                + " lines are present in the setting cache\r\n");
            output.Append("Format of cache lines is:\r\n");
            output.Append("{environment,siteid,server,component,setting}{value,isStale,lastEventTime,newValue}\r\n\r\n");

            foreach (DictionaryEntry de in SettingsCache)
            {
                SettingsKey key = (SettingsKey)de.Key;
                SettingsCacheLine cacheLine = (SettingsCacheLine)de.Value;
                output.Append("{" + key + "}{" + cacheLine + "}\r\n");
            }

            return output.ToString();
        }

        private string ProcessConfigCacheVirtualInterface(string[] args)
        {
            if (args.Length != 3
                || args[1] == null
                || args[2] == null
                || args[1] == String.Empty
                || args[2] == String.Empty)
            {
                return "Error: invalid command arguments\r\n\r\n"
                    + ProcessConfigCacheHelp();
            }

            string virtualInterface = args[1];
            string siteIdString = args[2];
            int siteId;

            // try to parse the siteid
            try
            {
                siteId = Int32.Parse(siteIdString);
            }
            catch (Exception)
            {
                return "Error: " + siteIdString + " is not a valid site id\r\n";
            }

            // create the key of the cache line we're looking for:
            VirtualInterfaceKey key = new VirtualInterfaceKey();
            key._environment = Environment;
            key._siteId = siteId;
            key._virtualInterface = virtualInterface;

            // see if we have a cache line for this entry
            if (VirtualInterfaceCache.ContainsKey(key))
            {
                VirtualInterfaceCacheLine cacheLine
                    = (VirtualInterfaceCacheLine)VirtualInterfaceCache[key];

                // we have a cache line, so return it
                return "{environment,siteid,virtualinterface}{value,isStale,lastEventTime,newValue}\r\n"
                    + "{" + key + "}{" + cacheLine + "}\r\n";
            }
            return "Error: No virtual interface cache line found matching key {" + key + "}\r\n";
        }

        private string ProcessConfigCacheVirtualInterfaces()
        {
            // iterate through all VirtualInterface cache lines, and add each
            // one to the output string
            StringBuilder output = new StringBuilder();
            output.Append(VirtualInterfaceCache.Count
                + " lines are present in the virtual interface cache\r\n");
            output.Append("Format of cache lines is:\r\n");
            output.Append("{environment,siteid,virtualinterface}{value,isStale,lastEventTime,newValue}\r\n\r\n");

            foreach (DictionaryEntry de in VirtualInterfaceCache)
            {
                VirtualInterfaceKey key = (VirtualInterfaceKey)de.Key;
                VirtualInterfaceCacheLine cacheLine = (VirtualInterfaceCacheLine)de.Value;
                output.Append("{" + key + "}{" + cacheLine + "}\r\n");
            }

            return output.ToString();
        }

        private string ProcessConfigCacheVirtualInterfaceList(string[] args)
        {
            if (args.Length != 2
                || string.IsNullOrEmpty(args[1]))
            {
                return "Error: invalid command arguments\r\n\r\n"
                    + ProcessConfigCacheHelp();
            }

            string siteIdString = args[1];

            // convert the siteid to an integer
            int siteId;
            try
            {
                siteId = Int32.Parse(siteIdString);
            }
            catch (Exception)
            {
                return "Error: " + siteIdString + " is not a valid site number\r\n";
            }

            // create the key of the cache line we're looking for:
            VirtualInterfaceListKey key = new VirtualInterfaceListKey();
            key._environment = Environment;
            key._siteId = siteId;

            // see if we have a cache line for this entry
            if (VirtualInterfaceListCache.ContainsKey(key))
            {
                VirtualInterfaceListCacheLine cacheLine
                    = (VirtualInterfaceListCacheLine)VirtualInterfaceListCache[key];

                // we have a cache line, so return it
                return "{environment,siteid}{value,isStale,lastEventTime,newValue}\r\n"
                    + "{" + key + "}{" + cacheLine + "}\r\n";
            }
            return "Error: No virtual interface list cache line found matching key {" + key + "}\r\n";
        }

        private string ProcessConfigCacheVirtualInterfaceLists()
        {
            // iterate through all VirtualInterfaceList cache lines, and add each
            // one to the output string
            StringBuilder output = new StringBuilder();
            output.Append(VirtualInterfaceListCache.Count
                + " lines are present in the virtual interface list cache\r\n");
            output.Append("Format of cache lines is:\r\n");
            output.Append("{environment,siteid}{value,isStale,lastEventTime,newValue}\r\n\r\n");

            foreach (DictionaryEntry de in VirtualInterfaceListCache)
            {
                VirtualInterfaceListKey key = (VirtualInterfaceListKey)de.Key;
                VirtualInterfaceListCacheLine cacheLine = (VirtualInterfaceListCacheLine)de.Value;
                output.Append("{" + key + "}{" + cacheLine + "}\r\n");
            }

            return output.ToString();
        }

        public string ProcessConfigCacheRefresh()
        {
            Int64 startingChangeId = LatestChangeId;
            try
            {
                CheckForUpdates();
            }
            catch (Exception e)
            {
                string errMessage = "Exception calling CheckForUpdates, details below:\r\n"
                    + "Exception Message: " + e.Message + "\r\n"
                    + "Exception Stack Trace: " + e.StackTrace + "\r\n";
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_70,
                    errMessage);
                return errMessage;
            }

            Int64 endingChangeId = LatestChangeId;
            if (endingChangeId != startingChangeId)
            {
                return "Changes in NPDB detected, old changeid = "
                    + startingChangeId
                    + ", new changeid = "
                    + endingChangeId + "\r\n";
            }
            return "No changes in NPDB detected, current changeid = " + endingChangeId + "\r\n";
        }

        private delegate IPHostEntry GetHostByName(string s);

        public string NpdbServer
        {
            get
            {
                return _npdbInfo.NpdbServer;
            }
            set
            {
                _npdbInfo.NpdbServer = value;
            }
        }

        public string NpdbDatabase
        {
            get
            {
                return _npdbInfo.NpdbDatabase;
            }
            set
            {
                _npdbInfo.NpdbDatabase = value;
            }
        }

        private string LoadServerFromXml(string xmlFile)
        {
            XmlDocument configXmlDoc = new XmlDocument();
            try
            {
                configXmlDoc.Load(xmlFile);
            }
            catch (XmlException)
            {
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_80, "Error loading Xml from configuration file '" + xmlFile + "' This configuration file will be ignored.");
                return null;
            }

            XmlNode serverNode = configXmlDoc.SelectSingleNode(_npdbServerXpath);
            if (serverNode == null)
            {
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_81, "Unable to locate server information in '" + xmlFile + "' at xpath: " + _npdbServerXpath);
                return null;
            }

            return serverNode.Value;
        }

        private string LoadDatabaseFromXml(string xmlFile)
        {
            XmlDocument configXmlDoc = new XmlDocument();
            try
            {
                configXmlDoc.Load(xmlFile);
            }
            catch (XmlException)
            {
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_82, "Error loading Xml from configuration file '" + xmlFile + "' This configuration file will be ignored.");
                return null;
            }

            XmlNode databaseNode = configXmlDoc.SelectSingleNode(_npdbDBNameXpath);
            if (databaseNode == null)
            {
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_83, "Unable to locate database name information in '" + xmlFile + "' at xpath: " + _npdbDBNameXpath);
                return null;
            }

            return databaseNode.Value;
        }

        private Random Rand
        {
            get
            {
                if (_rand == null)
                {
                    _rand = new Random();
                }
                return _rand;
            }
        }

        public Assembly Assembly
        {
            [MethodImpl(MethodImplOptions.NoInlining)]
            get
            {
                if (_assembly == null)
                {
                    _assembly = System.Reflection.Assembly.GetCallingAssembly();
                }

                return _assembly;
            }

            set
            {
                _assembly = value;
            }
        }


        public string AssemblyPath
        {
            get
            {
                if (_assemblyPath == null)
                {
                    Uri assemblyUri = new Uri(Assembly.CodeBase);
                    _assemblyPath = assemblyUri.LocalPath;
                }

                return _assemblyPath;
            }
        }

        public string AssemblyDirectory
        {
            get
            {
                return Path.GetDirectoryName(AssemblyPath);
            }
        }

        internal string SqlApplicationName
        {
            get
            {
                if (String.IsNullOrEmpty(_applicationName))
                {
                    _applicationName = ComponentName;
                }

                return _applicationName;
            }

            set
            {
                _applicationName = value;
            }
        }

        public string ComponentName
        {
            get
            {
                if (_componentName == null)
                {
                    _componentName = ConfigAttribute.GetComponent();
                }

                return _componentName;
            }

            set
            {
                _rwLock.AcquireWriterLock(_rwLockTimeout);
                try
                {
                    if (String.Equals(_componentName, value, StringComparison.OrdinalIgnoreCase))
                    {
                        // no change, *do not* throw away the ConfigCache, else lots of 
                        // settings break.
                        return;
                    }
                    
                    // We probably shouldn't allow you to change the component name more 
                    // than once, since doing so basically orphans the previous settings 
                    // -- it becomes impossible to update those values with a restart of 
                    // the service.  This should be left for the future though, to 
                    // preserve backward compatibility this late in the release.

                    //we need to flush the cache because changing the component name could 
                    //mean new overridden values. any settings loaded prior to this are 
                    //now orphaned unless the code calls GetSetting() again.
                    DiscardCachedValues();

                    string componentName = _componentName;
                    _componentName = value;

                    LogNtEvent(
                        ConfigEvent.Id.COMMON_INFO_19,  (string.IsNullOrEmpty(componentName) ?
                        "Component name is being set" : "ComponentName is being changed from "
                        + componentName) + " to " + _componentName
                    );
                }
                finally
                {
                    _rwLock.ReleaseWriterLock();
                }
            }
        }

        public string NpdbConnectionStringWithTimeout(int timeout)
        {
            string connString = "Data Source=" + NpdbServer
                    + ";Initial Catalog=" + NpdbDatabase
                    + ";Integrated Security=SSPI"
                    + ";Connection Timeout=" + timeout
                    + ";Application Name=" + SqlApplicationName;

            if (_connStringSuffix != null)
            {
                connString = connString + _connStringSuffix;
            }

            return connString;
        }

        public string NpdbConnectionString
        {
            get
            {
                return NpdbConnectionStringWithTimeout(NpdbConnectionTimeout);
            }
        }

        public string NativeNpdbConnectionString
        {
            get
            {
                string connString = "Provider=SQLOLEDB"
                    + ";Data Source=" + NpdbServer
                    + ";Initial Catalog=" + NpdbDatabase
                    + ";Trusted_Connection=yes"
                    + ";Connection Timeout=" + NpdbConnectionTimeout
                    + ";Application Name=" + SqlApplicationName;

                if (_connStringSuffix != null)
                {
                    connString = connString + _connStringSuffix;
                }

                return connString;
            }
        }

        public string Environment
        {
            get
            {
                if (_environment != null)
                {
                    return _environment;
                }

                _rwLock.AcquireWriterLock(_rwLockTimeout);
                try
                {
                    if (_environment != null)
                    {
                        return _environment;
                    }

                    GetCurrentEnvironment();

                    return _environment;
                }
                finally
                {
                    _rwLock.ReleaseWriterLock();
                }
            }
        }

        public string EnvironmentType
        {
            get
            {
                if (_environmentType != null)
                {
                    return _environmentType;
                }

                _rwLock.AcquireWriterLock(_rwLockTimeout);
                try
                {
                    if (_environmentType != null)
                    {
                        return _environmentType;
                    }

                    GetCurrentEnvironment();

                    return _environmentType;
                }
                finally
                {
                    _rwLock.ReleaseWriterLock();
                }
            }
        }

        // Some features are only allowed in test environments.  Encapsulate what
        // constitutes a test environment here
        public bool IsTestEnvironment()
        {
            return Config.EnvironmentType.Equals("development", StringComparison.OrdinalIgnoreCase);
        }


        protected void GetCurrentEnvironment()
        {
            // we dont' know what the current environment is, so let's figure it out
            using (SqlConnection npdbConnection = new SqlConnection(NpdbConnectionString))
            {
                npdbConnection.Open();

                SqlCommand cmd = npdbConnection.CreateCommand();
                cmd.CommandText = "p_config_get_current_environment";
                cmd.CommandType = CommandType.StoredProcedure;

                using(SqlDataReader reader = cmd.ExecuteReader())
                {
                    if (reader == null || !reader.Read())
                    {
                        ApplicationException ae =
                            new ApplicationException(
                                "p_config_get_current_environment returned zero rows, cannot determine current environment.");
                        LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_84,
                                   ae + "\n" + System.Environment.StackTrace);
                        throw ae;
                    }

                    string env = (string) reader["vc_environment"];

                    if (string.IsNullOrEmpty(env))
                    {
                        ApplicationException ae =
                            new ApplicationException(
                                "p_config_get_current_environment returned a null or an empty string, cannot determine current environment.");
                        LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_85,
                                   ae + "\n" + System.Environment.StackTrace);
                        throw ae;
                    }

                    string envType = (string) reader["vc_environment_type"];

                    if (string.IsNullOrEmpty(envType))
                    {
                        ApplicationException ae =
                            new ApplicationException(
                                "p_config_get_current_environment returned a null or an empty string, cannot determine current environment type.");
                        LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_85,
                                   ae + "\n" + System.Environment.StackTrace);
                        throw ae;
                    }

                    if (reader.Read())
                    {
                        // more than one row was returned, throw
                        ApplicationException ae =
                            new ApplicationException(
                                "p_config_get_current_environment returned more than one row, cannot determine current environment.");
                        LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_86,
                                   ae + "\n" + System.Environment.StackTrace);
                        throw ae;
                    }

                    // everything is good -- set environment and environment type
                    _environment = env.Trim();
                    _environmentType = envType.Trim();

                    LogNtEvent(ConfigEvent.Id.COMMON_INFO_20, "Current environment is " + _environment + " (type: " + _environmentType + ")");
                }
            }
        }

        public int SiteId
        {
            get
            {
                if (_siteIdLookedUp)
                {
                    return _siteId;
                }

                _rwLock.AcquireWriterLock(_rwLockTimeout);
                try
                {
                    if (_siteIdLookedUp)
                    {
                        return _siteId;
                    }

                    // look up both the server id and the
                    // site id while we're at it
                    int tempSiteId;
                    GetServerInfo(Server, out tempSiteId);

                    _siteId = tempSiteId;
                    _siteIdLookedUp = true;

                    return _siteId;
                }
                finally
                {
                    _rwLock.ReleaseWriterLock();
                }
            }
        }

        public int MainSiteId
        {
            get
            {
                if (_mainSiteIdLookedUp)
                {
                    return _mainSiteId;
                }

                _rwLock.AcquireWriterLock(_rwLockTimeout);
                try
                {
                    if (_mainSiteIdLookedUp)
                    {
                        return _mainSiteId;
                    }
                    int tempSiteId = 1;

                    // Temporary hack to get around issue where NpdbServer can be an IP address.  Need to be able to get site information
                    // from npdb, but since there are installation dependencies that need to be worked out first.
                    // GetServerInfo(NpdbServer, out tempSiteId);
                    if (tempSiteId == 0)
                    {
                        // this shouldn't happen. NPDB must exist, and we have to know what
                        // site it's in!
                        ApplicationException ae = new ApplicationException("Could not determine site for NPDB server named '"
                            + NpdbServer
                            + "'");
                        LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_88, ae + "\n" + System.Environment.StackTrace);
                        throw ae;
                    }

                    _mainSiteId = tempSiteId;
                    _mainSiteIdLookedUp = true;

                    LogNtEvent(ConfigEvent.Id.COMMON_INFO_21, "NPDB is in siteid " + _mainSiteId);
                    return _mainSiteId;
                }
                finally
                {
                    _rwLock.ReleaseWriterLock();
                }
            }
        }

        public string Server
        {
            get
            {
                if (_server != null)
                {
                    return _server;
                }

                _rwLock.AcquireWriterLock(_rwLockTimeout);
                try
                {
                    if (_server != null)
                    {
                        return _server;
                    }

                    // determine the machine name of the server we are currently running on
                    string machineName = System.Environment.MachineName;
                    if (machineName == String.Empty)
                    {
                        ApplicationException ae =
                            new ApplicationException(
                                "Cannot determine current machine name: Process.GetCurrentProcess().MachineName is null or String.Empty");
                        LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_89,
                                   ae + "\n" + System.Environment.StackTrace);
                        throw ae;
                    }

                    _server = machineName;

                    // reset the site and server ids, so the next time anyone needs to know
                    // the site, it's sure to get looked up, using whatever
                    // server name we settled on
                    _siteIdLookedUp = false;
                    _siteId = 0;

                    LogNtEvent(ConfigEvent.Id.COMMON_INFO_22, "Current server is " + _server);
                    return _server;
                }
                finally
                {
                    _rwLock.ReleaseWriterLock();
                }
            }
        }

        /// <summary>
        /// DO NOT USE!!!  SERIOUSLY!!!  WHAT ARE YOU THINKING???
        /// This is a Test Only Method.
        /// DO NOT USE!!!  SERIOUSLY!!!
        /// </summary>
        public string ServerSet_TestOnly_DoNotUse
        {
            set
            {
                _server = value;

                // reset the site and server ids, so the next time anyone needs to know
                // the site, it's sure to get looked up, using whatever
                // server name we settled on
                _siteIdLookedUp = false;
                _siteId = 0;
            }
        }

        public string Component
        {
            get
            {
                if (_component != xonline.common.config.Component.unknown)
                {
                    return _component;
                }

                _rwLock.AcquireWriterLock(_rwLockTimeout);
                try
                {
                    if (_component != xonline.common.config.Component.unknown)
                    {
                        return _component;
                    }

                    if (ComponentExists(ComponentName))
                    {
                        _component = ComponentName;
                    }
                    else
                    {
                        // can't convert it to an enum, so the component is not known
                        LogNtEvent(ConfigEvent.Id.COMMON_INFO_23,
                                   "Unable to determine current component, using Component.unknown. " +
                                   "Component specific overrides will not be used by this component. ");
                    }

                    LogNtEvent(ConfigEvent.Id.COMMON_INFO_24, "Current component is " + _component);
                    return _component;
                }
                finally
                {
                    _rwLock.ReleaseWriterLock();
                }
            }
        }

        /// <summary>
        /// Gets the ID used by the cleanser's ReportMessage protocol based on the current component.
        /// 0 is returned if no mapping for the current component has been defined.
        /// </summary>
        public int ReportMessageComponentId
        {
            get
            {
                int id = 0;
                object mappedInfo = ReportMessageComponentIdMapping[Component];

                if (mappedInfo != null)
                {
                    id = ((ReportMessageComponentInfo)mappedInfo).ComponentID;
                }

                return id;
            }
        }

        public string ReportMessageCleanserVirtualInterface
        {
            get
            {
                string virtInt = "cleanseriis";
                object mappedInfo = ReportMessageComponentIdMapping[Component];

                if (mappedInfo != null)
                {
                    virtInt = ((ReportMessageComponentInfo)mappedInfo).VirtualInterface;
                }

                return virtInt;
            }
        }

        private Hashtable ReportMessageComponentIdMapping
        {
            get
            {
                if (_reportMessageComponentIdMapping == null)
                {
                    int numDefaultMaps = config.Component.ReportMessageComponents.Length;
                    Hashtable defaultMaps = new Hashtable(config.Component.ReportMessageComponents.Length);


                    for (int i = 0; i < numDefaultMaps; i++)
                    {
                        defaultMaps.Add(config.Component.ReportMessageComponents[i], config.Component.ReportMessageComponentInfoList[i]);
                    }

                    _reportMessageComponentIdMapping = defaultMaps;
                }

                return _reportMessageComponentIdMapping;
            }
        }

        // Allows components to add additional mappings without having to modify the default mappings in
        // the Component class.
        public void AddReportMessageComponentIdMapping(string component, int reportMessageId)
        {
            lock (ReportMessageComponentIdMapping)
            {
                ReportMessageComponentIdMapping.Add(component, new ReportMessageComponentInfo(reportMessageId, component));
            }
        }

        public void RemoveReportMessageComponentIdMapping(string component)
        {
            lock (ReportMessageComponentIdMapping)
            {
                ReportMessageComponentIdMapping.Remove(component);
            }
        }

        // This method discards all cached configuration information,
        // forcing it to be reread from the source. Services can use this
        // in response to an xmgmt command asking them to reread configuration data.
        public void DiscardCachedValues()
        {
            _rwLock.AcquireWriterLock(_rwLockTimeout);
            try
            {
                // shut down the Timer that's calling into CheckForUpdates
                // periodically
                if (_refreshTimer != null)
                {
                    _refreshTimer.Dispose();
                }

                // CheckForUpdates will do nothing if _refreshTimer == null,
                // so if it gets called once or twice after this function
                // returns, there should be no harm done. The other option would
                // be to wait on an event that Dispose would signal when it's
                // shut everything down, but I'm not sure how long that might take
                // and I don't want to block the caller for an indefinate amount
                // of time.
                _refreshTimer = null;

                // clear the other cache related statics, plus the caches themselves
                LatestChangeIdSet = 0;
                LatestChangeFileTimeSet = 0;

                // flush the cache used by GetServerListByInterface
                _serverListCache = null;

                // flush the cache used by GetInterface
                _interfaceCache = null;

                // flush the cache used by GetTitleBucketServer
                // and the bucket count cache
                _interfaceBucketCache = null;
                _bucketCountCache = null;

                // flush the cache used by GetVirtualInterface
                _virtualInterfaceCache = null;

                // flush the cache used by GetVirtualInterfaceList
                _virtualInterfaceListCache = null;

                // flush the cache used by GetSetting
                _settingsCache = null;

                // flush the cache used by GetMultiSetting
                _multiSettingCache = null;

                // clear the rest of the state, which will all get
                // redetermined on the next call that needs it.
                // We do not clear _componentName, so C++ clients can
                // do it once only at startup and be sure it will "stick".
                _environment = null;
                _siteId = 0;
                _siteIdLookedUp = false;
                _server = null;
                _component = config.Component.unknown;
                _mainSiteId = 0;
                _mainSiteIdLookedUp = false;
            }
            finally
            {
                _rwLock.ReleaseWriterLock();
            }
        }

        private Int64 GetLatestChangeId()
        {
            // call p_config_get_latest_change_id to retrieve the most
            // recent change id from t_config_log

            using (SqlConnection npdbConnection = new SqlConnection(NpdbConnectionString))
            {
                npdbConnection.Open();

                SqlCommand cmd = npdbConnection.CreateCommand();
                cmd.CommandText = "p_config_get_latest_change_id";
                cmd.CommandType = CommandType.StoredProcedure;

                object o = cmd.ExecuteScalar();
                if (o == null)
                {
                    ApplicationException ae = new ApplicationException("p_config_get_latest_change_id did not return a value");
                    LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_91, ae + "\n" + System.Environment.StackTrace);
                    throw ae;
                }

                try
                {
                    // try to cast the returned object to an Int64
                    return (Int64)o;
                }
                catch (InvalidCastException e)
                {
                    ApplicationException ae = new ApplicationException("p_config_get_latest_change_id returned an object that could not be cast to Int64", e);
                    LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_92, ae + "\n" + System.Environment.StackTrace);
                    throw ae;
                }
            }
        }
        
        private Int64 GetLatestChangeFileTime()
        {
            // Gets the latest filetime in which the settings file was changed
            Int64 time = -1;
            foreach (string path in SettingFilePaths)
            {
                try
                {
                    FileInfo fi = new FileInfo(path);
                    if (fi.Exists)
                    {
                        if (DateTime.Compare(fi.CreationTimeUtc, fi.LastWriteTimeUtc) < 0)
                        {
                            time = fi.LastWriteTimeUtc.ToFileTimeUtc();
                        }
                        else
                        {
                            time = fi.CreationTimeUtc.ToFileTimeUtc();
                        }
                        
                        break;
                    }
                    // If for some reason the caller does not have access to the file, assume it doesnot exist
                }
                catch (IOException)
                {
                }
                catch (System.Security.SecurityException)
                {
                }
                catch (UnauthorizedAccessException)
                {
                }
            }
            
            return time;
        }

        private Hashtable GetModifiedTables(Int64 changeId)
        {
            // call p_config_get_modifed_tables to retrieve the list
            // of tables that have been modified since changeId
            Hashtable modifiedTables = new Hashtable();
            using (SqlConnection npdbConnection = new SqlConnection(NpdbConnectionString))
            {
                npdbConnection.Open();

                SqlCommand cmd = npdbConnection.CreateCommand();
                cmd.CommandText = "p_config_get_modified_tables";
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@bi_change_id", SqlDbType.BigInt).Value = changeId;

                using (SqlDataReader reader = cmd.ExecuteReader())
                {
                    if (reader != null)
                    {
                        while (reader.Read())
                        {
                            modifiedTables.Add(reader["vc_table"], true);
                        }
                    }
                }
            }

            return modifiedTables;
        }

        public void GetServerInfo(string server, out int siteId)
        {
            if (server == null)
            {
                ArgumentNullException e = new ArgumentNullException("server");
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_93, e + "\n" + System.Environment.StackTrace);
                throw e;
            }

            // default to zero
            siteId = 0;

            using (SqlConnection npdbConnection = new SqlConnection(NpdbConnectionString))
            {
                npdbConnection.Open();

                SqlCommand cmd = npdbConnection.CreateCommand();
                cmd.CommandText = "p_config_get_server_info";
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = Environment;
                cmd.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = server;

                using (SqlDataReader reader = cmd.ExecuteReader())
                {
                    if (reader != null && reader.Read())
                    {
                        // i_site_id is declared not null
                        siteId = (Int32)reader["i_site_id"];

                        // sanity check - make sure only one row was received
                        if (reader.Read())
                        {
                            ApplicationException ae =
                                new ApplicationException("p_config_get_server_info returned more than one row");
                            LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_94,
                                       ae + "\n" + System.Environment.StackTrace);
                            throw ae;
                        }
                    }
                }

                // We don't throw if the server was not found, since it
                // is valid to ask about a server that's not in the database.
                // Instead we just return default of 0 for siteId
            }
            return;
        }

        // Gets a list of server names that are exposing a particular interface name
        public string[] GetServerListByInterface(string iface)
        {
            return GetServerListByInterfaceFromCache(Environment, iface);
        }

        // attach ServerListChangeEventHandler delegates to this event to be notified
        // when server lists change in NPDB
        public event ServerListChangeEventHandler ServerListChange;
        protected void OnServerListChange(ServerListChangeEventArgs e)
        {
            if (ServerListChange != null)
            {
                ServerListChange(null, e);
            }
        }

        // if the ServerListChangeHandler wants to veto the change, it calls
        // VetoServerListChange, which sets the _approveServerListChange flag to false
        private bool _approveServerListChange = true;
        public void VetoServerListChange()
        {
            // ServerListChangeEventHandlers call this method if they
            // need to indicate that the server list change indicated by
            // the ServerListChangeEventArgs should not be committed
            // to the cache
            _approveServerListChange = false;
        }

        // the server list cache is implemented as a Hashtable, where the
        // keys are ServerListKey objects and the values are ServerListCacheLine
        // objects.
        private Hashtable _serverListCache;
        private class ServerListKey : IComparable
        {
            public string _environment;
            public string _iface;

            public override int GetHashCode()
            {
                return unchecked(_environment.GetHashCode()
                    + _iface.GetHashCode());
            }

            public override string ToString()
            {
                return _environment + ","
                    + _iface;
            }

            public override bool Equals(object o)
            {
                return (CompareTo(o) == 0);
            }

            public int CompareTo(object o)
            {
                if (typeof(ServerListKey) != o.GetType())
                {
                    throw new ArgumentException(
                        "Object provided to ServerListKey.CompareTo is not a ServerListKey");
                }

                ServerListKey key = (ServerListKey)o;

                int environmentCompare = String.Compare(_environment, key._environment, false, CultureInfo.InvariantCulture);
                if (environmentCompare != 0)
                {
                    return environmentCompare;
                }

                // environments are equal

                return String.Compare(_iface, key._iface, false, CultureInfo.InvariantCulture);
            }
        }

        private class ServerListCacheLine
        {
            public string[] _value;
            public bool _dirty;
            public DateTime _lastEvent;
            public string[] _newValue; // used to store the new value if the line is dirty

            public override string ToString()
            {
                return CollectionToString(_value) + ","
                    + _dirty + ","
                    + _lastEvent + ","
                    + CollectionToString(_newValue);
            }
        }

        private Hashtable ServerListCache
        {
            get
            {
                if (_serverListCache != null)
                {
                    return _serverListCache;
                }

                _rwLock.AcquireWriterLock(_rwLockTimeout);
                try
                {
                    if (_serverListCache != null)
                    {
                        return _serverListCache;
                    }

                    _serverListCache = new Hashtable();

                    // make sure the timer callback has been set up
                    RefreshTimerInit();

                    return _serverListCache;
                }
                finally
                {
                    _rwLock.ReleaseWriterLock();
                }
            }
        }

        private string[] GetServerListByInterfaceFromCache(string environment, string iface)
        {
            // validate parameters
            if (environment == null)
            {
                ArgumentNullException ae = new ArgumentNullException("environment");
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_95, ae + "\n" + System.Environment.StackTrace);
                throw ae;
            }

            // check the cache for the requested setting
            ServerListKey key = new ServerListKey();
            key._environment = environment;
            key._iface = iface;

            if (ServerListCache.ContainsKey(key))
            {
                ServerListCacheLine cacheLine = (ServerListCacheLine)ServerListCache[key];

                // if this cache line is dirty, we should consider logging an NT event
                if (cacheLine._dirty)
                {
                    LogStaleServerListEvent(key, cacheLine);
                }

                // we've done our duty and notified ops that this process is using
                // stale config data, so return the stale data and get on with it
                return cacheLine._value;
            }

            // if we get here, the server list was not found in the cache, so
            // get the info from the database and add it to the cache
            string[] value = GetServerListByInterfaceFromDB(environment, iface);

            ServerListCacheLine newCacheLine = new ServerListCacheLine();
            newCacheLine._value = value;
            newCacheLine._dirty = false;

            // set the last event time to a valid time that's far enough in the
            // past to guarantee that if the line gets dirty, we'll log the
            // event the first time
            newCacheLine._lastEvent = DateTime.MinValue;

            // save the line in the cache
            lock(ServerListCache)
            {
                ServerListCache[key] = newCacheLine;
            }

            return value;
        }

        private void RefreshServerLists()
        {
            // for each line in the server list cache, requery that virtual interface list from NPDB
            foreach (DictionaryEntry de in ServerListCache)
            {
                // requery for the server list from the database
                ServerListKey key = (ServerListKey)de.Key;
                string[] value = GetServerListByInterfaceFromDB(
                    key._environment,
                    key._iface);

                // has the server list changed?
                ServerListCacheLine cacheLine = (ServerListCacheLine)de.Value;
                if (!CollectionEquals(value, cacheLine._value))
                {
                    // if the server list has changed, but Config.ServerListChange
                    // is null (which means no delegates have been attached to the Event) then
                    // we can't commit this change to the cache, because we didn't get approval
                    // from the client code. So mark this cache line as dirty, log an event,
                    // and move along to the next cache line
                    if (ServerListChange == null)
                    {
                        cacheLine._dirty = true;
                        cacheLine._newValue = value;
                        LogServerListChangeNoHandlerEvent(key, cacheLine._value, value);
                        continue;
                    }

                    // if we get here, ServerListChange is not null, so
                    // we signal the Event to notify the client code of the change.
                    // first we set _approveServerListChange to true, so we can
                    // see if any of the event handlers vetoed the change
                    ServerListChangeEventArgs eventArgs
                        = new ServerListChangeEventArgs(
                        key._environment,
                        key._iface,
                        cacheLine._value,
                        value);
                    _approveServerListChange = true;

                    // we want to wrap this in a try catch block, so if any
                    // registered handlers throw an exception we behave in
                    // a predictable fashion
                    try
                    {
                        OnServerListChange(eventArgs);
                    }
                    catch (Exception e)
                    {
                        // Log that the exception was thrown and then treat
                        // this as a rejected change
                        LogServerListChangeExceptionEvent(key, cacheLine._value, value, e);
                        _approveServerListChange = false;
                    }

                    // if _approveServerListChange is still true, then none of the
                    // ServerListChangeEventHandler delegates called VetoServerListChange,
                    // therefore we can commit the change to the cache
                    if (_approveServerListChange)
                    {
                        LogServerListChangeAcceptedEvent(key, cacheLine._value, value);
                        cacheLine._value = value;
                    }
                    else
                    {
                        // if _approveServerListChange is now false, one or more of the
                        // ServerListChangeEventHandler delegates called VetoServerListChange,
                        // therefore we should flag this cache line as dirty, and log
                        // an NT event
                        LogServerListChangeRejectedEvent(key, cacheLine._value, value);
                        cacheLine._dirty = true;
                        cacheLine._newValue = value;
                    }
                }
                else if (cacheLine._dirty)
                {
                    //  In this case the values are equal but the cacheline is currently marked dirty
                    //  This means the value has been returned to its original value, clear the
                    //  dirty flag.
                    cacheLine._dirty = false;
                    cacheLine._lastEvent = DateTime.MinValue;
                    cacheLine._newValue = null;
                }
            }
        }

        private void LogServerListChangeAcceptedEvent(
            ServerListKey key,
            string[] oldValue,
        string[] newValue)
        {
            LogNtEvent(ConfigEvent.Id.COMMON_INFO_25,
                "A server list change has been accepted by this component (details below)\n"
                + "Environment: " + key._environment + "\n"
                + "Interface: " + key._iface + "\n"
                + "Old Value: " + CollectionToString(oldValue) + "\n"
                + "New Value: " + CollectionToString(newValue) + "\n");
        }

        private void LogServerListChangeRejectedEvent(
            ServerListKey key,
            string[] oldValue,
        string[] newValue)
        {
            LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_96,
                "A server list change has been rejected by this component (details below)\n"
                + "Environment: " + key._environment + "\n"
                + "Interface: " + key._iface + "\n"
                + "Old Value: " + CollectionToString(oldValue) + "\n"
                + "New Value: " + CollectionToString(newValue) + "\n");
        }

        private void LogServerListChangeNoHandlerEvent(
            ServerListKey key,
            string[] oldValue,
        string[] newValue)
        {
            LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_97,
                "A server list change event was not handled by this component (details below)\n"
                + "Environment: " + key._environment + "\n"
                + "Interface: " + key._iface + "\n"
                + "Old Value: " + CollectionToString(oldValue) + "\n"
                + "New Value: " + CollectionToString(newValue) + "\n");
        }

        private void LogServerListChangeExceptionEvent(
            ServerListKey key,
            string[] oldValue,
        string[] newValue,
        Exception e)
        {
            LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_98,
                "A server list change handler threw an exception! (details below)\n"
                + "Environment: " + key._environment + "\n"
                + "Interface: " + key._iface + "\n"
                + "Old Value: " + CollectionToString(oldValue) + "\n"
                + "New Value: " + CollectionToString(newValue) + "\n"
                + "Exception Message: " + e.Message + "\n"
                + "Exception Stack Trace: " + e.StackTrace + "\n");
        }

        private void LogStaleServerListEvent(
            ServerListKey key,
            ServerListCacheLine cacheLine)
        {
            // check to see how long ago we logged an event about this setting
            if ((DateTime.Now - cacheLine._lastEvent) >= MinEventInterval)
            {
                // time for another event!
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_99,
                    "This component is not using the latest server list information from NPDB (details below)\n"
                    + "Operator action may be required. Please investigate!\n"
                    + "Note: This event will not be logged again for this particular problem until at least "
                    + MinEventInterval.TotalMilliseconds
                    + " milliseconds have elapsed\n"
                    + "Environment: " + key._environment + "\n"
                    + "Interface: " + key._iface + "\n"
                    + "Stale Value: " + CollectionToString(cacheLine._value) + "\n"
                    + "New Value: " + CollectionToString(cacheLine._newValue) + "\n");

                // remember the current time...
                LockCookie lc = _rwLock.UpgradeToWriterLock(_rwLockTimeout);
                try
                {
                    cacheLine._lastEvent = DateTime.Now;
                }
                finally
                {
                    _rwLock.DowngradeFromWriterLock(ref lc);
                }
            }
        }

        private string[] GetServerListByInterfaceFromDB(string environment, string iface)
        {
            SortedList serverList = new SortedList();

            using (SqlConnection npdbConnection = new SqlConnection(NpdbConnectionString))
            {
                npdbConnection.Open();

                SqlCommand cmd = npdbConnection.CreateCommand();
                cmd.CommandText = "p_config_get_server_list_by_interface";
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = (string)environment;
                cmd.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = (string)iface.ToString();

                using (SqlDataReader reader = cmd.ExecuteReader())
                {
                    if (reader != null)
                    {
                        while (reader.Read())
                        {
                            string server = ((string) reader["vc_server"]).ToUpper();

                            // sanity check - make sure it's not a duplicate,
                            // This would indicate a problem with the db schema or stored proc
                            // since the primary key on the servers table should ensure no duplicates
                            // are created
                            if (serverList.Contains(server))
                            {
                                ApplicationException ae = new ApplicationException(
                                    "Duplicate server named '"
                                    + server
                                    + "' returned by p_config_get_server_list_by_interface");
                                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_100,
                                           ae + "\n" + System.Environment.StackTrace);
                                throw ae;
                            }

                            serverList.Add(server, server);
                        }
                    }
                }
            }

            // convert the sorted list to an array
            string[] servers = new string[serverList.Count];
            serverList.Values.CopyTo(servers, 0);
            return servers;
        }

        public IInterfaceInfo GetInterface(
            string iface)
        {
            return GetInterfaceFromCache(Environment, iface, Server);
        }


        public IInterfaceInfo GetInterface(
            string server,
            string iface)
        {
            return GetInterfaceFromCache(Environment, iface, server);
        }


        public IInterfaceInfo GetInterface(
            string environment,
            string server,
        string iface)
        {
            return GetInterfaceFromCache(environment, iface, server);
        }



        // attach InterfaceChangeEventHandler delegates to this event to be notified
        // when interface info changes in NPDB
        public event InterfaceChangeEventHandler InterfaceChange;
        protected void OnInterfaceChange(InterfaceChangeEventArgs e)
        {
            if (InterfaceChange != null)
            {
                InterfaceChange(null, e);
            }
        }

        // if the InterfaceChangeHandler wants to veto the change, it calls
        // VetoInterfaceChange, which sets the _approveInterfaceChange flag to false
        private bool _approveInterfaceChange = true;
        public void VetoInterfaceChange()
        {
            // InterfaceChangeEventHandlers call this method if they
            // need to indicate that the interface change indicated by
            // the InterfaceChangeEventArgs should not be committed
            // to the cache
            _approveInterfaceChange = false;
        }

        // the virtual interface cache is implemented as a hashtable, where the
        // keys are InterfaceKey objects and the values are InterfaceCacheLine
        // objects.
        private Hashtable _interfaceCache;
        private class InterfaceKey : IComparable
        {
            public string _environment;
            public string _server;
            public string _iface;

            public InterfaceKey()
            {

            }

            public InterfaceKey(string environment, string server, string iface)
            {
                _environment = environment;
                _server = server;
                _iface = iface;
            }


            public override int GetHashCode()
            {
                return unchecked(_environment.GetHashCode()
                    + _server.GetHashCode()
                    + _iface.GetHashCode());
            }

            public override string ToString()
            {
                return _environment + ","
                    + _server + ","
                    + _iface;
            }

            public override bool Equals(object o)
            {
                return (CompareTo(o) == 0);
            }

            public int CompareTo(object o)
            {
                if (typeof(InterfaceKey) != o.GetType())
                {
                    throw new ArgumentException(
                        "Object provided to InterfaceKey.CompareTo is not a InterfaceKey");
                }

                InterfaceKey key = (InterfaceKey)o;
                int environmentCompare = String.Compare(_environment, key._environment, false, CultureInfo.InvariantCulture);
                if (environmentCompare != 0)
                {
                    return environmentCompare;
                }

                int serverCompare = String.Compare(_server, key._server, false, CultureInfo.InvariantCulture);
                if (serverCompare != 0)
                {
                    return serverCompare;
                }

                // servers are equal

                return String.Compare(_iface, key._iface, false, CultureInfo.InvariantCulture);
            }
        }

        private class InterfaceCacheLine
        {
            public IInterfaceInfo _value;
            public bool _dirty;
            public DateTime _lastEvent;
            public IInterfaceInfo _newValue; // used to store the new value if the line is dirty

            public override string ToString()
            {
                return _value.ToString() + ","
                    + _dirty + ","
                    + _lastEvent + ","
                    + (_newValue == null ? "<null>" : _newValue.ToString());
            }
        }

        private Hashtable InterfaceCache
        {
            get
            {
                if (_interfaceCache != null)
                {
                    return _interfaceCache;
                }

                _rwLock.AcquireWriterLock(_rwLockTimeout);
                try
                {
                    if (_interfaceCache != null)
                    {
                        return _interfaceCache;
                    }

                    _interfaceCache = new Hashtable();

                    // make sure the timer callback has been set up
                    RefreshTimerInit();

                    return _interfaceCache;
                }
                finally
                {
                    _rwLock.ReleaseWriterLock();
                }
            }
        }

        // gets the interface information from the cache if present,
        // or from the database if not present, and adds that information to the
        // cache. If the cache does not exist, it is created
        private IInterfaceInfo GetInterfaceFromCache(
            string environment,
            string iface,
        string server)
        {
            // validate parameters
            if (environment == null)
            {
                ArgumentNullException ae = new ArgumentNullException("environment");
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_101, ae + "\n" + System.Environment.StackTrace);
                throw ae;
            }

            if (server == null)
            {
                ArgumentNullException ae = new ArgumentNullException("server");
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_102, ae + "\n" + System.Environment.StackTrace);
                throw ae;
            }

            // check the cache for the requested interface
            InterfaceKey key = new InterfaceKey(environment, server, iface);

            if (InterfaceCache.ContainsKey(key))
            {
                InterfaceCacheLine cacheLine = (InterfaceCacheLine)InterfaceCache[key];

                // if this cache line is dirty, we should consider logging an NT event
                if (cacheLine._dirty)
                {
                    LogStaleInterfaceEvent(key, cacheLine);
                }

                // we've done our duty and notified ops that this process is using
                // stale config data, so return the stale data and get on with it
                return cacheLine._value;
            }

            // if we get here, the interface was not found in the cache, so
            // get the info from the database and add it to the cache
            IInterfaceInfo value = GetInterfaceFromDB(
                environment,
                server,
                iface);

            AddToInterfaceCache(key, value);

            return value;
        }


        private void AddToInterfaceCache(InterfaceKey key, IInterfaceInfo value)
        {
            if (!InterfaceCache.ContainsKey(key))
            {

                InterfaceCacheLine newCacheLine = new InterfaceCacheLine();
                newCacheLine._value = value;
                newCacheLine._dirty = false;

                // set the last event time to a valid time that's far enough in the
                // past to guarantee that if the line gets dirty, we'll log the
                // event the first time
                newCacheLine._lastEvent = DateTime.MinValue;

                lock(InterfaceCache)
                {
                    InterfaceCache[key] = newCacheLine;
                }
            }
        }


        private void RemoveFromInterfaceCache(InterfaceKey key)
        {
            if (InterfaceCache.ContainsKey(key))
            {
                lock(InterfaceCache)
                {
                    InterfaceCache.Remove(key);
                }
            }
        }

        private void RefreshInterfaces()
        {
            ArrayList interfacesToDelete = new ArrayList();

            // for each line in the interface cache, requery that interface from NPDB
            foreach (DictionaryEntry de in InterfaceCache)
            {
                // requery for the interface from the database
                InterfaceKey key = (InterfaceKey)de.Key;
                IInterfaceInfo value;

                try
                {
                    value = GetInterfaceFromDB(
                        key._environment,
                        key._server,
                        key._iface);
                }
                catch (ApplicationException)
                {
                    // for whatever reason, this key didnt refresh so well.  we'll just remove it from the cache.
                    interfacesToDelete.Add(key);
                    continue;
                }

                // has the interface changed?
                InterfaceCacheLine cacheLine = (InterfaceCacheLine)de.Value;
                if (value.ToString() != cacheLine._value.ToString())
                {
                    // if the interface has changed, but Config.InterfaceChange
                    // is null (which means no delegates have been attached to the Event) then
                    // we can't commit this change to the cache, because we didn't get approval
                    // from the client code. So mark this cache line as dirty, log an event,
                    // and move along to the next cache line
                    if (InterfaceChange == null)
                    {
                        cacheLine._dirty = true;
                        cacheLine._newValue = value;
                        LogInterfaceChangeNoHandlerEvent(key, cacheLine._value, value);
                        continue;
                    }

                    // if we get here, InterfaceChange is not null, so we
                    // we signal the Event to notifiy the client code of the change.
                    // first we set _approveInterfaceChange to true, so we can
                    // see if any of the event handlers vetoed the change
                    InterfaceChangeEventArgs eventArgs
                        = new InterfaceChangeEventArgs(
                            key._environment,
                            key._server,
                            key._iface,
                            cacheLine._value,
                            value);

                    _approveInterfaceChange = true;

                    // we want to wrap this in a try catch block, so if any
                    // registered handlers throw an exception we behave in
                    // a predictable fashion
                    try
                    {
                        OnInterfaceChange(eventArgs);
                    }
                    catch (Exception e)
                    {
                        // Log that the exception was thrown and then treat
                        // this as a rejected change
                        LogInterfaceChangeExceptionEvent(key, cacheLine._value, value, e);

                        _approveInterfaceChange = false;
                    }

                    // if _approveInterfaceChange is still true, then none of the
                    // VirtualChangeEventHandler delegates called VetoInterfaceChange,
                    // therefore we can commit the change to the cache
                    if (_approveInterfaceChange)
                    {
                        LogInterfaceChangeAcceptedEvent(key, cacheLine._value, value);

                        cacheLine._value = value;
                    }
                    else
                    {
                        // if _approveInterfaceChange is now false, one or more of the
                        // InterfaceChangeEventHandler delegates called VetoInterfaceChange,
                        // therefore we should flag this cache line as dirty, and log
                        // an NT event
                        LogInterfaceChangeRejectedEvent(key, cacheLine._value, value);

                        cacheLine._dirty = true;
                        cacheLine._newValue = value;
                    }
                }
                else if (cacheLine._dirty)
                {
                    //  In this case the values are equal but the cacheline is currently marked dirty
                    //  This means the value has been returned to its original value, clear the
                    //  dirty flag.
                    LockCookie lc = _rwLock.UpgradeToWriterLock(_rwLockTimeout);
                    try
                    {
                        cacheLine._dirty = false;
                        cacheLine._lastEvent = DateTime.MinValue;
                        cacheLine._newValue = null;
                    }
                    finally
                    {
                        _rwLock.DowngradeFromWriterLock(ref lc);
                    }
                }
            }

            // remove any keys that didnt refresh.
            lock (InterfaceCache)
            {
                foreach (InterfaceKey key in interfacesToDelete)
                {
                    InterfaceCache.Remove(key);
                }
            }
        }

        private void LogInterfaceChangeAcceptedEvent(
            InterfaceKey key,
            IInterfaceInfo oldValue,
        IInterfaceInfo newValue)
        {
            LogNtEvent(ConfigEvent.Id.COMMON_INFO_26,
                "An interface change has been accepted by this component (details below)\n"
                + "Environment: " + key._environment + "\n"
                + "Server: " + key._server + "\n"
                + "Interface: " + key._iface + "\n"
                + "Old Value: " + oldValue.ToString() + "\n"
                + "New Value: " + newValue.ToString() + "\n");
        }

        private void LogInterfaceChangeRejectedEvent(
            InterfaceKey key,
            IInterfaceInfo oldValue,
        IInterfaceInfo newValue)
        {
            LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_103,
                "An interface change has been rejected by this component (details below)\n"
                + "Environment: " + key._environment + "\n"
                + "Server: " + key._server + "\n"
                + "Interface: " + key._iface + "\n"
                + "Old Value: " + oldValue.ToString() + "\n"
                + "New Value: " + newValue.ToString() + "\n");
        }

        private void LogInterfaceChangeNoHandlerEvent(
            InterfaceKey key,
            IInterfaceInfo oldValue,
        IInterfaceInfo newValue)
        {
            LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_104,
                "An interface change event was not handled by this component (details below)\n"
                + "Environment: " + key._environment + "\n"
                + "Server: " + key._server + "\n"
                + "Interface: " + key._iface + "\n"
                + "Old Value: " + oldValue.ToString() + "\n"
                + "New Value: " + newValue.ToString() + "\n");
        }

        private void LogInterfaceChangeExceptionEvent(
            InterfaceKey key,
            IInterfaceInfo oldValue,
        IInterfaceInfo newValue,
        Exception e)
        {
            LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_105,
                "An interface change handler threw an exception! (details below)\n"
                + "Environment: " + key._environment + "\n"
                + "Server: " + key._server + "\n"
                + "Interface: " + key._iface + "\n"
                + "Old Value: " + oldValue.ToString() + "\n"
                + "New Value: " + newValue.ToString() + "\n"
                + "Exception Message: " + e.Message + "\n"
                + "Exception Stack Trace: " + e.StackTrace + "\n");
        }

        private void LogStaleInterfaceEvent(
            InterfaceKey key,
            InterfaceCacheLine cacheLine)
        {
            // check to see how long ago we logged an event about this setting
            if ((DateTime.Now - cacheLine._lastEvent) >= MinEventInterval)
            {
                // time for another event!
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_106,
                    "This component is not using the latest interface information from NPDB (details below)\n"
                    + "Operator action may be required. Please investigate!\n"
                    + "Note: This event will not be logged again for this particular problem until at least "
                    + MinEventInterval.TotalMilliseconds
                    + " milliseconds have elapsed\n"
                    + "Environment: " + key._environment + "\n"
                    + "Server: " + key._server + "\n"
                    + "Interface: " + key._iface + "\n"
                    + "Stale Value: " + cacheLine._value.ToString() + "\n"
                    + "New Value: " + cacheLine._newValue.ToString() + "\n");

                // remember the current time...
                cacheLine._lastEvent = DateTime.Now;
            }
        }

        // Retrieves the information required to reach an interface on a particular server
        private IInterfaceInfo GetInterfaceFromDB(
            string environment,
            string server,
        string iface)
        {
            if (environment == null)
            {
                ArgumentNullException e = new ArgumentNullException("environment");
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_107, e + "\n" + System.Environment.StackTrace);
                throw e;
            }

            if (server == null)
            {
                ArgumentNullException e = new ArgumentNullException("server");
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_108, e + "\n" + System.Environment.StackTrace);
                throw e;
            }

#if TEST
        if (_overrides.Contains(server + "_" + iface.ToString()))
        {
            return (IInterfaceInfo)_overrides[server + "_" + iface.ToString()];
        }

#endif

            using (SqlConnection npdbConnection = new SqlConnection(NpdbConnectionString))
            {
                npdbConnection.Open();
                SqlDataReader reader;
                InterfaceInfo interfaceInfo;

                // This proc gets the default interface info from t_interfaces
                SqlCommand cmd = npdbConnection.CreateCommand();

                cmd.CommandText = "p_config_get_interface";
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = environment;
                cmd.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = server;
                cmd.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = iface;
                cmd.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = ComponentName;

                using (reader = cmd.ExecuteReader())
                {
                    if (reader != null && !reader.Read())
                    {
                        ApplicationException ae = new ApplicationException("Interface '"
                                                                           + iface
                                                                           + "' not present on server '"
                                                                           + server
                                                                           + "' for environment '"
                                                                           + environment
                                                                           + "'");
                        LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_109,
                                   ae + "\n" + System.Environment.StackTrace);
                        throw ae;
                    }

                    interfaceInfo = CreateInterfaceInfo(server, reader);
                }

                OverrideInterfaceInfo(server, iface, interfaceInfo, npdbConnection);

                return interfaceInfo;
            }
        }


        // Adds the information regarding an interface on a particular server
        private IInterfaceInfo AddServerInterfaceToDB(
            string environment,
            string server,
            string iface)
        {
            ValidateParameterIsNull(environment, "environment", ConfigEvent.Id.COMMON_CONFIG_107);
            ValidateParameterIsNull(server, "server", ConfigEvent.Id.COMMON_CONFIG_108);

            using (SqlConnection npdbConnection = new SqlConnection(NpdbConnectionString))
            {
                npdbConnection.Open();
                SqlDataReader reader;
                InterfaceInfo interfaceInfo;

                // This proc gets the default interface info from t_interfaces
                using (reader = AddServerInterface(npdbConnection, environment, server, iface))
                {
                    if (!reader.Read())
                    {
                        ApplicationException ae = new ApplicationException("Unable to add Interface '"
                                                                           + iface
                                                                           + "' on server '"
                                                                           + server
                                                                           + "'");
                        LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_109,
                                   ae + "\n" + System.Environment.StackTrace);
                        throw ae;
                    }

                    interfaceInfo = CreateInterfaceInfo(server, reader);
                }

                OverrideInterfaceInfo(server, iface, interfaceInfo, npdbConnection);

                return interfaceInfo;
            }
        }


        // Adds the information regarding an interface on a particular server
        private void RemoveServerInterfaceFromDB(
            string environment,
            string server,
            string iface)
        {
            ValidateParameterIsNull(environment, "environment", ConfigEvent.Id.COMMON_CONFIG_107);
            ValidateParameterIsNull(server, "server", ConfigEvent.Id.COMMON_CONFIG_108);

            using (SqlConnection npdbConnection = new SqlConnection(NpdbConnectionString))
            {
                npdbConnection.Open();

                // This proc gets the default interface info from t_interfaces
                RemoveServerInterface(npdbConnection, environment, server, iface);
            }
        }


        private void OverrideInterfaceInfo(string server, string iface, InterfaceInfo interfaceInfo, SqlConnection npdbConnection)
        {
            // now, get any environment type overrides and apply them
            SqlDataReader reader = GetEnvironmentTypeInterfaceOverrides(npdbConnection, iface);
            if (reader.Read())
            {
                OverrideInterfaceInfoOnEnvironmentType(interfaceInfo, reader);
            }
            reader.Close();


            // now, get any environment overrides and apply them
            reader = GetEnvironmentInterfaceOverrides(npdbConnection, iface);
            if (reader.Read())
            {
                OverrideInterfaceInfoOnEnvironment(interfaceInfo, reader);
            }
            reader.Close();


            // now, get any server overrides and apply them
            reader = GetServerInterfaceOverrides(npdbConnection, server, iface);
            if (reader.Read())
            {
                OverrideInterfaceInfoOnServer(interfaceInfo, reader);
            }
            reader.Close();

        }


        private static void OverrideInterfaceInfoOnServer(InterfaceInfo interfaceInfo, IDataRecord reader)
        {

            // there is an override row, so apply anything that's not null
            if (reader["i_port"] != DBNull.Value)
            {
                interfaceInfo.Port = (Int32)reader["i_port"];
            }

            if (reader["i_port_end"] != DBNull.Value)
            {
                interfaceInfo.PortEnd = (Int32)reader["i_port_end"];
            }

            if (reader["vc_vdir"] != DBNull.Value)
            {
                interfaceInfo.VDir = (string)reader["vc_vdir"];
            }

            if (reader["vc_dbname"] != DBNull.Value)
            {
                interfaceInfo.DBName = (string)reader["vc_dbname"];
            }

            if (reader["vc_sharename"] != DBNull.Value)
            {
                interfaceInfo.Sharename = (string)reader["vc_sharename"];
            }

            if (reader["i_timeout"] != DBNull.Value)
            {
                interfaceInfo.Timeout = (Int32)reader["i_timeout"];
            }

            if (reader["vc_info1"] != DBNull.Value)
            {
                interfaceInfo.Info1 = (string)reader["vc_info1"];
            }

            if (reader["vc_info2"] != DBNull.Value)
            {
                interfaceInfo.Info2 = (string)reader["vc_info2"];
            }
        }

        private static void OverrideInterfaceInfoOnEnvironment(InterfaceInfo interfaceInfo, IDataRecord reader)
        {

            // there is an override row, so apply anything that's not null
            if (reader["i_port"] != DBNull.Value)
            {
                interfaceInfo.Port = (Int32)reader["i_port"];
            }

            if (reader["i_port_end"] != DBNull.Value)
            {
                interfaceInfo.PortEnd = (Int32)reader["i_port_end"];
            }

            if (reader["vc_vdir"] != DBNull.Value)
            {
                interfaceInfo.VDir = (string)reader["vc_vdir"];
            }

            if (reader["vc_dbname"] != DBNull.Value)
            {
                interfaceInfo.DBName = (string)reader["vc_dbname"];
            }

            if (reader["vc_sharename"] != DBNull.Value)
            {
                interfaceInfo.Sharename = (string)reader["vc_sharename"];
            }

            if (reader["i_timeout"] != DBNull.Value)
            {
                interfaceInfo.Timeout = (Int32)reader["i_timeout"];
            }

            if (reader["vc_info1"] != DBNull.Value)
            {
                interfaceInfo.Info1 = (string)reader["vc_info1"];
            }

            if (reader["vc_info2"] != DBNull.Value)
            {
                interfaceInfo.Info2 = (string)reader["vc_info2"];
            }
        }

        private static void OverrideInterfaceInfoOnEnvironmentType(InterfaceInfo interfaceInfo, IDataRecord reader)
        {

            // there is an override row, so apply anything that's not null
            if (reader["i_port"] != DBNull.Value)
            {
                interfaceInfo.Port = (Int32)reader["i_port"];
            }

            if (reader["i_port_end"] != DBNull.Value)
            {
                interfaceInfo.PortEnd = (Int32)reader["i_port_end"];
            }

            if (reader["vc_vdir"] != DBNull.Value)
            {
                interfaceInfo.VDir = (string)reader["vc_vdir"];
            }

            if (reader["vc_dbname"] != DBNull.Value)
            {
                interfaceInfo.DBName = (string)reader["vc_dbname"];
            }

            if (reader["vc_sharename"] != DBNull.Value)
            {
                interfaceInfo.Sharename = (string)reader["vc_sharename"];
            }

            if (reader["i_timeout"] != DBNull.Value)
            {
                interfaceInfo.Timeout = (Int32)reader["i_timeout"];
            }

            if (reader["vc_info1"] != DBNull.Value)
            {
                interfaceInfo.Info1 = (string)reader["vc_info1"];
            }

            if (reader["vc_info2"] != DBNull.Value)
            {
                interfaceInfo.Info2 = (string)reader["vc_info2"];
            }
        }

        private InterfaceInfo CreateInterfaceInfo(string server, SqlDataReader reader)
        {
            InterfaceInfo interfaceInfo = new InterfaceInfo();

            interfaceInfo.ServerName = server.ToUpper();
            interfaceInfo.Interface = (string)reader["vc_interface"];

            // vc_protocol is declared as not null
            interfaceInfo.Protocol = (string)reader["vc_protocol"];

            // vc_ip is declared as not null, but could be invalid
            try
            {
                interfaceInfo.IPAddress = IPAddress.Parse((string)reader["vc_ip"]);
            }
            catch (Exception e)
            {
                ApplicationException ae = new ApplicationException(
                    "Could not parse vc_ip as an IPAddress, value: "
                    + (string)reader["vc_ip"],
                    e);
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_111, ae + "\n" + System.Environment.StackTrace);
                throw ae;
            }

            // vc_ip_netmask may be null or invalid
            if (reader["vc_ip_netmask"] != DBNull.Value)
            {
                try
                {
                    interfaceInfo.IPNetMask = IPAddress.Parse((string)reader["vc_ip_netmask"]);
                }
                catch (Exception e)
                {
                    ApplicationException ae = new ApplicationException(
                        "Could not parse vc_ip_netmask as an IPAddress, value: "
                        + (string)reader["vc_ip_netmask"],
                        e);
                    LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_112, ae + "\n" + System.Environment.StackTrace);
                    throw ae;
                }
            }

            // vc_ip_default_gateway may be null or invalid
            if (reader["vc_ip_default_gateway"] != DBNull.Value)
            {
                try
                {
                    interfaceInfo.IPDefaultGateway = IPAddress.Parse((string)reader["vc_ip_default_gateway"]);
                }
                catch (Exception e)
                {
                    ApplicationException ae = new ApplicationException(
                        "Could not parse vc_ip_netmask as an IPAddress, value: "
                        + (string)reader["vc_ip_netmask"],
                        e);
                    LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_113, ae + "\n" + System.Environment.StackTrace);
                    throw ae;
                }
            }

            // i_port may be null
            if (reader["i_port"] != DBNull.Value)
            {
                interfaceInfo.Port = (Int32)reader["i_port"];
            }

            // i_port_end may be null
            if (reader["i_port_end"] != DBNull.Value)
            {
                interfaceInfo.PortEnd = (Int32)reader["i_port_end"];
            }

            // vc_vsite may be null
            if (reader["vc_vsite"] != DBNull.Value)
            {
                interfaceInfo.VSite = (string)reader["vc_vsite"];
            }

            // i_vsite_id may be null
            if (reader["i_vsite_id"] != DBNull.Value)
            {
                interfaceInfo.VSiteId = (Int32)reader["i_vsite_id"];
            }

            // vc_vdir may be null
            if (reader["vc_vdir"] != DBNull.Value)
            {
                interfaceInfo.VDir = (string)reader["vc_vdir"];
            }

            // vc_dbname may be null
            if (reader["vc_dbname"] != DBNull.Value)
            {
                interfaceInfo.DBName = (string)reader["vc_dbname"];
            }

            // vc_sharename may be null
            if (reader["vc_sharename"] != DBNull.Value)
            {
                interfaceInfo.Sharename = (string)reader["vc_sharename"];
            }

            // i_timeout may be null
            if (reader["i_timeout"] != DBNull.Value)
            {
                interfaceInfo.Timeout = (Int32)reader["i_timeout"];
            }

            // i_service_id may be null
            if (reader["i_service_id"] != DBNull.Value)
            {
                interfaceInfo.ServiceId = (Int32)reader["i_service_id"];
            }

            // vc_service_name may be null
            if (reader["vc_service_name"] != DBNull.Value)
            {
                interfaceInfo.ServiceName = (string)reader["vc_service_name"];
            }

            // vc_mac may be null
            if (reader["vc_mac"] != DBNull.Value)
            {
                interfaceInfo.Mac = (string)reader["vc_mac"];
            }

            // vc_sg_ip_begin may be null or invalid
            if (reader["vc_sg_ip_begin"] != DBNull.Value)
            {
                try
                {
                    interfaceInfo.SgIpAddressBegin = IPAddress.Parse((string)reader["vc_sg_ip_begin"]);
                }
                catch (Exception e)
                {
                    ApplicationException ae = new ApplicationException(
                        "Could not parse vc_sg_ip_begin as an IPAddress, value: "
                        + (string)reader["vc_sg_ip_begin"],
                        e);
                    LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_114, ae + "\n" + System.Environment.StackTrace);
                    throw ae;
                }
            }

            // vc_sg_ip_end may be null or invalid
            if (reader["vc_sg_ip_end"] != DBNull.Value)
            {
                try
                {
                    interfaceInfo.SgIpAddressEnd = IPAddress.Parse((string)reader["vc_sg_ip_end"]);
                }
                catch (Exception e)
                {
                    ApplicationException ae = new ApplicationException(
                        "Could not parse vc_sg_ip_end as an IPAddress, value: "
                        + (string)reader["vc_sg_ip_end"],
                        e);
                    LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_115, ae + "\n" + System.Environment.StackTrace);
                    throw ae;
                }
            }

            // i_sg_port_begin may be null
            if (reader["i_sg_port_begin"] != DBNull.Value)
            {
                interfaceInfo.SgPortBegin = (Int32)reader["i_sg_port_begin"];
            }

            // i_sg_port_end may be null
            if (reader["i_sg_port_end"] != DBNull.Value)
            {
                interfaceInfo.SgPortEnd = (Int32)reader["i_sg_port_end"];
            }

            // b_need_sg_info may be null
            if (reader["b_need_sg_info"] != DBNull.Value)
            {
                interfaceInfo.NeedSGInfo = (bool)reader["b_need_sg_info"];
            }

            // vc_wiretap_ip may be null or invalid
            if (reader["vc_wiretap_ip"] != DBNull.Value)
            {
                try
                {
                    interfaceInfo.WiretapIpAddress = IPAddress.Parse((string)reader["vc_wiretap_ip"]);
                }
                catch (Exception e)
                {
                    ApplicationException ae = new ApplicationException(
                        "Could not parse vc_wiretap_ip as an IPAddress, value: "
                        + (string)reader["vc_wiretap_ip"],
                        e);
                    LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_116, ae + "\n" + System.Environment.StackTrace);
                    throw ae;
                }
            }

            // b_disabled may be null
            if (reader["b_disabled"] != DBNull.Value)
            {
                interfaceInfo.NicDisabled = (bool)reader["b_disabled"];
            }

            // vc_username may be null
            if (reader["vc_username"] != DBNull.Value)
            {
                interfaceInfo.Username = (string)reader["vc_username"];
                interfaceInfo.Username = interfaceInfo.Username.Replace("%COMPUTERNAME%", System.Environment.MachineName);
            }

            // vc_password may be null
            if (reader["vc_password"] != DBNull.Value)
            {
                interfaceInfo.Password = (string)reader["vc_password"];
            }

            // vc_info1 may be null
            if (reader["vc_info1"] != DBNull.Value)
            {
                interfaceInfo.Info1 = (string)reader["vc_info1"];
            }

            // vc_info2 may be null
            if (reader["vc_info2"] != DBNull.Value)
            {
                interfaceInfo.Info2 = (string)reader["vc_info2"];
            }

            // i_min_connection_pool_size may be null
            if (reader["i_min_connection_pool_size"] != DBNull.Value)
            {
                interfaceInfo.MinConnectionPoolSize = (Int32)reader["i_min_connection_pool_size"];
            }

            // i_max_connection_pool_size may be null
            if (reader["i_max_connection_pool_size"] != DBNull.Value)
            {
                interfaceInfo.MaxConnectionPoolSize = (Int32)reader["i_max_connection_pool_size"];
            }

            // i_load_balance_timeout may be null
            if (reader["i_load_balance_timeout"] != DBNull.Value)
            {
                interfaceInfo.LoadBalanceTimeout = (Int32)reader["i_load_balance_timeout"];
            }

            // i_connection_timeout may be null
            if (reader["i_connection_timeout"] != DBNull.Value)
            {
                interfaceInfo.ConnectionTimeout = (Int32)reader["i_connection_timeout"];
            }

            // Do we have another result set?
            if (reader.NextResult())
            {
                // Generic Notification Interfaces are stored here
                while (reader.Read())
                {
                    string vc_notification = (string)reader["vc_notification"];
                    string vc_url          = (string)reader["vc_url"];

                    interfaceInfo.AddNotificationUrl( vc_notification, vc_url );
                }
            }

            return interfaceInfo;
        }

        // Retrieves the information required to reach a particular interface,
        // when the caller expects only one server to expose that interface.
        // A good example of when this might be used is when querying for
        // a non-partitioned database interface. The interface is not virtual,
        // but there will still only be one instance of that interface because
        // the data is not partitioned. If more than one server exposes the
        // specified interface, then an ApplicationException will be thrown
        public IInterfaceInfo GetSingleInterface(string iface)
        {
            string[] servers = GetServerListByInterface(iface);
            if (servers.Length == 0)
            {
                ApplicationException ae = new ApplicationException("Could not find Interface '"
                    + iface
                    + "' on any Server");
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_117, ae + "\n" + System.Environment.StackTrace);
                throw ae;
            }
            if (servers.Length > 1)
            {
                ApplicationException ae = new ApplicationException("More than one Server was found exposing Interface '"
                    + iface
                    + "' when only one was expected");
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_118, ae + "\n" + System.Environment.StackTrace);
                throw ae;
            }

            return GetInterface(servers[0], iface);
        }

        public IBucketServer GetBucketServer(string iface, uint bucket)
        {
            return GetTitleBucketServer(iface, 0, bucket);
        }

        public IBucketServer GetTitleBucketServer(
            string iface,
            uint titleId,
            uint bucket)
        {
            return GetInterfaceBucketFromCache(Environment, iface, titleId, bucket);
        }

        // attach InterfaceBucketChangeEventHandler delegates to this event to be notified
        // when interface bucket info changes in NPDB
        public event InterfaceBucketChangeEventHandler InterfaceBucketChange;
        protected void OnInterfaceBucketChange(InterfaceBucketChangeEventArgs e)
        {
            InterfaceBucketChange(null, e);
        }

        // if the InterfaceBucketChangeHandler wants to veto the change, it calls
        // VetoInterfaceBucketChange, which sets the _approveInterfaceBucketChange
        // flag to false
        private bool _approveInterfaceBucketChange = true;
        public void VetoInterfaceBucketChange()
        {
            // InterfaceBucketChangeEventHandlers call this method if they
            // need to indicate that the interface change indicated by
            // the InterfaceBucketChangeEventArgs should not be committed
            // to the cache
            _approveInterfaceBucketChange = false;
        }

        // the virtual interface cache is implemented as a hashtable, where the
        // keys are InterfaceBucketKey objects and the values are InterfaceBucketCacheLine
        // objects.
        private Hashtable _interfaceBucketCache;
        private class InterfaceBucketKey : IComparable
        {
            public string _environment;
            public string _iface;
            public uint _titleId;
            public uint _bucket;

            public InterfaceBucketKey()
            {

            }

            public InterfaceBucketKey(string szEnvironment, string szInterface, uint titleId, uint bucketId)
            {
                _environment = szEnvironment;
                _iface   = szInterface;
                _titleId = titleId;
                _bucket  = bucketId;
            }

            public override int GetHashCode()
            {
                return unchecked(_environment.GetHashCode()
                    + _iface.GetHashCode()
                    + _titleId.GetHashCode()
                    + _bucket.GetHashCode());
            }

            public override string ToString()
            {
                return _environment + ","
                    + _iface + ","
                    + _titleId + ","
                    + _bucket;
            }

            public override bool Equals(object o)
            {
                return (CompareTo(o) == 0);
            }

            public string ToXmlBatchQueryFormat()
            {
                return String.Format(   @"<a vc_environment=""{0}"" vc_interface=""{1}"" i_title_id=""{2}"" i_bucket=""{3}""/>",
                                        _environment,
                                        _iface,
                                        (int)_titleId,  // cast to signed integer, so that we don't overflow the signed column in sql
                                        _bucket
                                     );
            }

            public int CompareTo(object o)
            {
                if (typeof(InterfaceBucketKey) != o.GetType())
                {
                    throw new ArgumentException(
                        "Object provided to InterfaceBucketKey.CompareTo is not a InterfaceBucketKey");
                }

                InterfaceBucketKey key = (InterfaceBucketKey)o;
                int environmentCompare = String.Compare(_environment, key._environment, false, CultureInfo.InvariantCulture);
                if (environmentCompare != 0)
                {
                    return environmentCompare;
                }

                // environments are equal

                int ifaceCompare = String.Compare(_iface, key._iface, false, CultureInfo.InvariantCulture);
                if (ifaceCompare != 0)
                {
                    return ifaceCompare;
                }

                // interfaces are equal

                if (_titleId < key._titleId)
                {
                    return -1;
                }
                if (_titleId > key._titleId)
                {
                    return 1;
                }
                // titleids are equal

                if (_bucket < key._bucket)
                {
                    return -1;
                }
                if (_bucket > key._bucket)
                {
                    return 1;
                }
                // buckets are equal

                return 0;
            }

        }

        private class InterfaceBucketCacheLine
        {
            public IBucketServer _value;
            public bool _dirty;
            public DateTime _lastEvent;
            public IBucketServer _newValue; // used to store the new value if the line is dirty

            public override string ToString()
            {
                return _value.ToString() + ","
                    + _dirty + ","
                    + _lastEvent + ","
                    + (_newValue == null ? "<null>" : _newValue.ToString());
            }
        }

        private Hashtable InterfaceBucketCache
        {
            get
            {
                if (_interfaceBucketCache != null)
                {
                    return _interfaceBucketCache;
                }

                _rwLock.AcquireWriterLock(_rwLockTimeout);
                try
                {
                    if (_interfaceBucketCache != null)
                    {
                        return _interfaceBucketCache;
                    }

                    _interfaceBucketCache = new Hashtable();

                    // make sure the timer callback has been set up
                    RefreshTimerInit();

                    return _interfaceBucketCache;
                }
                finally
                {
                    _rwLock.ReleaseWriterLock();
                }
            }
        }

        // gets the interface bucket information from the cache if present,
        // or from the database if not present, and adds that information to the
        // cache. If the cache does not exist, it is created
        private IBucketServer GetInterfaceBucketFromCache(
            string environment,
            string iface,
            uint titleId,
            uint bucket)
        {
            // validate parameters
            if (environment == null)
            {
                ArgumentNullException ae = new ArgumentNullException("environment");
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_119, ae + "\n" + System.Environment.StackTrace);
                throw ae;
            }

            // check the cache for the requested interface bucket
            InterfaceBucketKey key = new InterfaceBucketKey();
            key._environment = environment;
            key._iface = iface;
            key._titleId = titleId;
            key._bucket = bucket;

            if (InterfaceBucketCache.ContainsKey(key))
            {
                InterfaceBucketCacheLine cacheLine = (InterfaceBucketCacheLine)InterfaceBucketCache[key];

                // if this cache line is dirty, we should consider logging an NT event
                if (cacheLine._dirty)
                {
                    LogStaleInterfaceBucketEvent(key, cacheLine);
                }

                // we've done our duty and notified ops that this process is using
                // stale config data, so return the stale data and get on with it
                return cacheLine._value;
            }

            //hit the database
            Hashtable htBucketValuesFromNpdb = NpdbAccess.GetBatchBucketsFromDB(NpdbConnectionString, key.ToXmlBatchQueryFormat());
            IBucketServer value = (IBucketServer) htBucketValuesFromNpdb[key];

            if (null == value)
            {
                string szMessage = String.Format("Specified interface bucket was not found.This probably indicates a configuration error.  Details below.\nInterface {0} TitleID {1} Bucket {2}", iface, titleId, bucket);

                ApplicationException ae = new ApplicationException(szMessage);

                throw ae;
            }


            InterfaceBucketCacheLine newCacheLine = new InterfaceBucketCacheLine();

            newCacheLine._value = value;
            newCacheLine._dirty = false;

            // set the last event time to a valid time that's far enough in the
            // past to guarantee that if the line gets dirty, we'll log the
            // event the first time
            newCacheLine._lastEvent = DateTime.MinValue;

            // save the line in the cache
            lock(InterfaceBucketCache)
            {
                InterfaceBucketCache[key] = newCacheLine;
            }

            return value;
        }

        private void RefreshInterfaceBuckets()
        {
            StringBuilder xml = new StringBuilder();

            int nBatchCount = 0;

            // First - Construct an xml
            foreach (DictionaryEntry de in InterfaceBucketCache)
            {
                try
                {
                    InterfaceBucketKey key = (InterfaceBucketKey) de.Key;

                    xml.Append(key.ToXmlBatchQueryFormat());
                    nBatchCount = nBatchCount + 1;
                }
                catch (Exception e)
                {
                    LogNtEvent(ConfigEvent.Id.COMMON_BUCKETS_BATCH_CONSTRUCTION, e.Message);
                }
            }

            Hashtable htBucketValuesFromNpdb = null;

            // Second - Perform database transaction
            if (xml.Length > 0)
            {
                try
                {
                    string szXmlQuery = xml.ToString();

                    LogNtEvent(ConfigEvent.Id.COMMON_BUCKET_COUNT,
                               String.Format("Querying {0} number of buckets at once from NPDB", nBatchCount));

                    htBucketValuesFromNpdb = NpdbAccess.GetBatchBucketsFromDB(NpdbConnectionString, szXmlQuery);
                }
                catch (Exception e)
                {
                    LogNtEvent(ConfigEvent.Id.COMMON_BUCKET_BATCH_QUERY, e.Message);
                }
            }

            // Third - Analyze Result
            if (null != htBucketValuesFromNpdb)
            {
                foreach (DictionaryEntry deResult in htBucketValuesFromNpdb)
                {
                    InterfaceBucketKey key = (InterfaceBucketKey) deResult.Key;
                    InterfaceBucketCacheLine cacheLine = (InterfaceBucketCacheLine) InterfaceBucketCache[key];

                    if (null != cacheLine)
                    {
                        IBucketServer value = (IBucketServer) deResult.Value;

                        if (value.ToString() != cacheLine._value.ToString())
                        {
                            // if the interface bucket has changed, but Config.InterfaceBucketChange
                            // is null (which means no delegates have been attached to the Event) then
                            // we can't commit this change to the cache, because we didn't get approval
                            // from the client code. So mark this cache line as dirty, log an event,
                            // and move along to the next cache line
                            if (InterfaceBucketChange == null)
                            {
                                cacheLine._dirty = true;
                                cacheLine._newValue = value;
                                LogInterfaceBucketChangeNoHandlerEvent(key, cacheLine._value, value);
                                continue;
                            }

                            // if we get here, InterfaceBucketChange is not null, so we
                            // we signal the Event to notify the client code of the change.
                            // first we set _approveInterfaceBucketChange to true, so we can
                            // see if any of the event handlers vetoed the change
                            InterfaceBucketChangeEventArgs eventArgs
                                = new InterfaceBucketChangeEventArgs(
                                    key._environment,
                                    key._titleId,
                                    key._bucket,
                                    key._iface,
                                    cacheLine._value,
                                    value);

                            _approveInterfaceBucketChange = true;

                            // we want to wrap this in a try catch block, so if any
                            // registered handlers throw an exception we behave in
                            // a predictable fashion
                            try
                            {
                                OnInterfaceBucketChange(eventArgs);
                            }
                            catch (Exception e)
                            {
                                // Log that the exception was thrown and then treat
                                // this as a rejected change
                                LogInterfaceBucketChangeExceptionEvent(key, cacheLine._value, value, e);
                                _approveInterfaceBucketChange = false;
                            }

                            // if _approveInterfaceBucketChange is still true, then none of the
                            // InterfaceBucketChangeEventHandler delegates called VetoInterfaceBucketChange,
                            // therefore we can commit the change to the cache
                            if (_approveInterfaceBucketChange)
                            {
                                LogInterfaceBucketChangeAcceptedEvent(key, cacheLine._value, value);
                                cacheLine._value = value;
                            }
                            else
                            {
                                // if _approveInterfaceBucketChange is now false, one or more of the
                                // InterfaceBucketChangeEventHandler delegates called VetoInterfaceBucketChange,
                                // therefore we should flag this cache line as dirty, and log
                                // an NT event
                                LogInterfaceBucketChangeRejectedEvent(key, cacheLine._value, value);
                                cacheLine._dirty = true;
                                cacheLine._newValue = value;
                            }
                        }
                        else if (cacheLine._dirty)
                        {
                            //  In this case the values are equal but the cacheline is currently marked dirty
                            //  This means the value has been returned to its original value, clear the
                            //  dirty flag.
                            LockCookie lc = _rwLock.UpgradeToWriterLock(_rwLockTimeout);
                            try
                            {
                                cacheLine._dirty = false;
                                cacheLine._lastEvent = DateTime.MinValue;
                                cacheLine._newValue = null;
                            }
                            finally
                            {
                                _rwLock.DowngradeFromWriterLock(ref lc);
                            }
                        }
                    }
                }
            }
        }

        private void LogInterfaceBucketChangeAcceptedEvent(
            InterfaceBucketKey key,
            IBucketServer oldValue,
        IBucketServer newValue)
        {
            LogNtEvent(ConfigEvent.Id.COMMON_INFO_27,
                "An interface bucket change has been accepted by this component (details below)\n"
                + "Environment: " + key._environment + "\n"
                + "Interface: " + key._iface + "\n"
                + "TitleId: " + key._titleId + "\n"
                + "Bucket: " + key._bucket + "\n"
                + "Old Value: " + oldValue.ToString() + "\n"
                + "New Value: " + newValue.ToString() + "\n");
        }

        private void LogInterfaceBucketChangeRejectedEvent(
            InterfaceBucketKey key,
            IBucketServer oldValue,
        IBucketServer newValue)
        {
            LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_120,
                "An interface bucket change has been rejected by this component (details below)\n"
                + "Environment: " + key._environment + "\n"
                + "Interface: " + key._iface + "\n"
                + "TitleId: " + key._titleId + "\n"
                + "Bucket: " + key._bucket + "\n"
                + "Old Value: " + oldValue.ToString() + "\n"
                + "New Value: " + newValue.ToString() + "\n");
        }

        private void LogInterfaceBucketChangeNoHandlerEvent(
            InterfaceBucketKey key,
            IBucketServer oldValue,
        IBucketServer newValue)
        {
            LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_121,
                "An interface bucket change event was not handled by this component (details below)\n"
                + "Environment: " + key._environment + "\n"
                + "Interface: " + key._iface + "\n"
                + "TitleId: " + key._titleId + "\n"
                + "Bucket: " + key._bucket + "\n"
                + "Old Value: " + oldValue.ToString() + "\n"
                + "New Value: " + newValue.ToString() + "\n");
        }

        private void LogInterfaceBucketChangeExceptionEvent(
            InterfaceBucketKey key,
            IBucketServer oldValue,
        IBucketServer newValue,
        Exception e)
        {
            LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_122,
                "An interface bucket change handler threw an exception! (details below)\n"
                + "Environment: " + key._environment + "\n"
                + "Interface: " + key._iface + "\n"
                + "TitleId: " + key._titleId + "\n"
                + "Bucket: " + key._bucket + "\n"
                + "Old Value: " + oldValue.ToString() + "\n"
                + "New Value: " + newValue.ToString() + "\n"
                + "Exception Message: " + e.Message + "\n"
                + "Exception Stack Trace: " + e.StackTrace + "\n");
        }

        private void LogStaleInterfaceBucketEvent(
            InterfaceBucketKey key,
            InterfaceBucketCacheLine cacheLine)
        {
            // check to see how long ago we logged an event about this setting
            if ((DateTime.Now - cacheLine._lastEvent) >= MinEventInterval)
            {
                // time for another event!
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_123,
                    "This component is not using the latest interface bucket information from NPDB (details below)\n"
                    + "Operator action may be required. Please investigate!\n"
                    + "Note: This event will not be logged again for this particular problem until at least "
                    + MinEventInterval.TotalMilliseconds
                    + " milliseconds have elapsed\n"
                    + "Environment: " + key._environment + "\n"
                    + "Interface: " + key._iface + "\n"
                    + "TitleId: " + key._titleId + "\n"
                    + "Bucket: " + key._bucket + "\n"
                    + "Stale Value: " + cacheLine._value.ToString() + "\n"
                    + "New Value: " + cacheLine._newValue.ToString() + "\n");

                // remember the current time...
                cacheLine._lastEvent = DateTime.Now;
            }
        }

        public uint GetBucketNum(string iface, ulong hashValue)
        {
            return (uint)(hashValue % GetBucketCount(iface));
        }

        public uint GetRandomBucketNum(string iface)
        {
            return (uint)(Rand.Next(0, (int)GetBucketCount(iface) - 1));
        }

        // We do not support changing the number of buckets on the fly.
        // the idea is that we choose the number of buckets to be large enough that
        // we can accomplish any load balancing we wish by moving a bucket from
        // one server to another. This way, we can add new servers on the fly, then
        // move buckets from existing servers to new servers using stateful
        // server migration. Therefore, we do not implement notifications like the
        // other caches in this class, because it should never change.
        private Hashtable _bucketCountCache;

        private Hashtable BucketCountCache
        {
            get
            {
                if (_bucketCountCache != null)
                {
                    return _bucketCountCache;
                }

                _rwLock.AcquireWriterLock(_rwLockTimeout);
                try
                {
                    if (_bucketCountCache != null)
                    {
                        return _bucketCountCache;
                    }

                    _bucketCountCache = new Hashtable();

                    return _bucketCountCache;
                }
                finally
                {
                    _rwLock.ReleaseWriterLock();
                }
            }
        }

        public uint GetBucketCount(string iface)
        {
            uint bucketCount;
            if (TryGetBucketCount(iface, out bucketCount)) return bucketCount;

            ApplicationException ae = new ApplicationException(
                "No interface buckets found for specified interface " + iface + ". " +
                "This probably indicates a configuration error.  Details below.\n\n" +
                "p_config_get_interface_partition_count(" + String.Join(",", new string[]
                { Environment, iface }) + ") did not return any results ! Check npdb.t_interface_buckets."
            );

            LogNtEvent(
                ConfigEvent.Id.COMMON_CONFIG_126, ae + "\n" + System.Environment.StackTrace
            );

            throw ae;
        }


        public bool TryGetBucketCount(string iface, out uint bucketCount)
        {
            if (!BucketCountCache.Contains(iface))
            {
                using (SqlConnection cxn = new SqlConnection(NpdbConnectionString))
                {
                    cxn.Open();
                    SqlCommand cmd = new SqlCommand("p_config_get_interface_partition_count", cxn);
                    cmd.CommandType = CommandType.StoredProcedure;

                    cmd.Parameters.Add(new SqlParameter("@vc_environment", Environment));
                    cmd.Parameters.Add(new SqlParameter("@vc_interface", iface));
                    cmd.Parameters.Add(new SqlParameter("@i_num_buckets", 0));
                    cmd.Parameters[2].SqlDbType = SqlDbType.Int;
                    cmd.Parameters[2].Direction = ParameterDirection.Output;

                    cmd.ExecuteNonQuery();

                    if (cmd.Parameters[2].Value == DBNull.Value)
                    {
                        bucketCount = 0;
                        return false;
                    }

                    lock(BucketCountCache)
                    {
                        BucketCountCache[iface] = (uint)((int)cmd.Parameters[2].Value) + 1;
                    }
                }
            }

            bucketCount = (uint) BucketCountCache[iface];
            return true;
        }

        public void CompleteMigration(string iface, uint bucket)
        {
            CompleteTitleMigration(iface, 0, bucket);
        }

        // this method does not modify the interface bucket cache - we rely on the usual
        // detection and notification procedure to take care of that
        public void CompleteTitleMigration(string iface, uint titleId, uint bucket)
        {
            using (SqlConnection cxn = new SqlConnection(NpdbConnectionString))
            {
                cxn.Open();
                SqlCommand cmd = new SqlCommand("p_config_complete_bucket_migration", cxn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.Add(new SqlParameter("@vc_environment", Environment));
                cmd.Parameters.Add(new SqlParameter("@vc_interface", iface));
                cmd.Parameters.Add(new SqlParameter("@i_title_id", (int)titleId));
                cmd.Parameters.Add(new SqlParameter("@i_bucket", (int)bucket));

                cmd.ExecuteNonQuery();
            }
        }

        public string[] GetVirtualInterfaceListBySite(Site site)
        {
            ApplicationException ae;
            string[] virtualInterfaces = null;
            switch (site)
            {
                case Site.main:
                    virtualInterfaces = GetVirtualInterfaceListBySite(MainSiteId);
                    break;

                case Site.same:
                    if (SiteId == 0)
                    {
                        ae = new ApplicationException("GetVirtualInterfaceListBySite(Site.same) called when current site is unknown");
                        LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_127, ae + "\n" + System.Environment.StackTrace);
                        throw ae;
                    }
                    virtualInterfaces = GetVirtualInterfaceListBySite(SiteId);
                    break;

                case Site.only:
                    ae = new ApplicationException("GetVirtualInterfaceListBySite(Site.only) is not allowed");
                    LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_128, ae + "\n" + System.Environment.StackTrace);
                    throw ae;
            }

            return virtualInterfaces;
        }

        public string[] GetVirtualInterfaceListBySite(int siteId)
        {
            return GetVirtualInterfaceListBySiteFromCache(Environment, siteId);
        }

        // attach VirtualInterfaceListChangeEventHandler delegates to this event to be notified
        // when virtual interface lists change in NPDB
        public event VirtualInterfaceListChangeEventHandler VirtualInterfaceListChange;
        protected void OnVirtualInterfaceListChange(VirtualInterfaceListChangeEventArgs e)
        {
            if (VirtualInterfaceListChange != null)
            {
                VirtualInterfaceListChange(null, e);
            }
        }

        // if the VirtualInterfaceListChangeHandler wants to veto the change, it calls
        // VetoVirtualInterfaceListChange, which sets the _approveVirtualInterfaceListChange flag to false
        private bool _approveVirtualInterfaceListChange = true;
        public void VetoVirtualInterfaceListChange()
        {
            // VirtualInterfaceListChangeEventHandlers call this method if they
            // need to indicate that the virtual interface list change indicated by
            // the VirtualInterfaceListChangeEventArgs should not be committed
            // to the cache
            _approveVirtualInterfaceListChange = false;
        }

        // the virtual interface list cache is implemented as a hashtable, where the
        // keys are VirtualInterfaceListKey objects and the values are VirtualInterfaceListCacheLine
        // objects.
        private Hashtable _virtualInterfaceListCache;
        private class VirtualInterfaceListKey : IComparable
        {
            public string _environment;
            public int _siteId;

            public override int GetHashCode()
            {
                return unchecked(_environment.GetHashCode()
                    + _siteId.GetHashCode());
            }

            public override string ToString()
            {
                return _environment + ","
                    + _siteId;
            }

            public override bool Equals(object o)
            {
                return (CompareTo(o) == 0);
            }

            public int CompareTo(object o)
            {
                if (typeof(VirtualInterfaceListKey) != o.GetType())
                {
                    throw new ArgumentException(
                        "Object provided to VirtualInterfaceListKey.CompareTo is not a VirtualInterfaceListKey");
                }

                VirtualInterfaceListKey key = (VirtualInterfaceListKey)o;
                int environmentCompare = String.Compare(_environment, key._environment, false, CultureInfo.InvariantCulture);
                if (environmentCompare != 0)
                {
                    return environmentCompare;
                }

                // environments are equal

                if (_siteId < key._siteId)
                {
                    return -1;
                }
                if (_siteId > key._siteId)
                {
                    return 1;
                }
                // siteids are equal

                return 0;
            }

        }

        private class VirtualInterfaceListCacheLine
        {
            public string[] _value;
            public bool _dirty;
            public DateTime _lastEvent;
            public string[] _newValue; // used to store the new value if the line is dirty

            public override string ToString()
            {
                return CollectionToString(_value) + ","
                    + _dirty + ","
                    + _lastEvent + ","
                    + CollectionToString(_newValue);
            }
        }

        private Hashtable VirtualInterfaceListCache
        {
            get
            {
                if (_virtualInterfaceListCache != null)
                {
                    return _virtualInterfaceListCache;
                }

                _rwLock.AcquireWriterLock(_rwLockTimeout);
                try
                {
                    if (_virtualInterfaceListCache != null)
                    {
                        return _virtualInterfaceListCache;
                    }

                    _virtualInterfaceListCache = new Hashtable();

                    // make sure the timer callback has been set up
                    RefreshTimerInit();

                    return _virtualInterfaceListCache;
                }
                finally
                {
                    _rwLock.ReleaseWriterLock();
                }
            }
        }

        private string[] GetVirtualInterfaceListBySiteFromCache(string environment, int siteId)
        {
            // validate parameters
            if (environment == null)
            {
                ArgumentNullException ae = new ArgumentNullException("environment");
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_129, ae + "\n" + System.Environment.StackTrace);
                throw ae;
            }

            // check the cache for the requested setting
            VirtualInterfaceListKey key = new VirtualInterfaceListKey();
            key._environment = environment;
            key._siteId = siteId;

            if (VirtualInterfaceListCache.ContainsKey(key))
            {
                VirtualInterfaceListCacheLine cacheLine = (VirtualInterfaceListCacheLine)VirtualInterfaceListCache[key];

                // if this cache line is dirty, we should consider logging an NT event
                if (cacheLine._dirty)
                {
                    LogStaleVirtualInterfaceListEvent(key, cacheLine);
                }

                // we've done our duty and notified ops that this process is using
                // stale config data, so return the stale data and get on with it
                return cacheLine._value;
            }

            // if we get here, the virtual interface list was not found in the cache, so
            // get the info from the database and add it to the cache
            string[] value = GetVirtualInterfaceListBySiteFromDB(environment, siteId);

            VirtualInterfaceListCacheLine newCacheLine = new VirtualInterfaceListCacheLine();

            newCacheLine._value = value;
            newCacheLine._dirty = false;

            // set the last event time to a valid time that's far enough in the
            // past to guarantee that if the line gets dirty, we'll log the
            // event the first time
            newCacheLine._lastEvent = DateTime.MinValue;

            // save the line in the cache
            lock (VirtualInterfaceListCache)
            {
                VirtualInterfaceListCache[key] = newCacheLine;
            }

            return value;
        }

        private void RefreshVirtualInterfaceLists()
        {
            // for each line in the virtual interface list cache, requery that virtual interface list from NPDB
            foreach (DictionaryEntry de in VirtualInterfaceListCache)
            {
                // requery for the virtual interface list from the database
                VirtualInterfaceListKey key = (VirtualInterfaceListKey) de.Key;
                string[] value = GetVirtualInterfaceListBySiteFromDB(
                    key._environment,
                    key._siteId);
                // GetVirtualInterfaceList will throw if the virtual interface does not exist

                // has the virtual interface list changed?
                VirtualInterfaceListCacheLine cacheLine = (VirtualInterfaceListCacheLine) de.Value;
                if (!CollectionEquals(value, cacheLine._value))
                {
                    // if the virtual interface list has changed, but Config.VirtualInterfaceListChange
                    // is null (which means no delegates have been attached to the Event) then
                    // we can't commit this change to the cache, because we didn't get approval
                    // from the client code. So mark this cache line as dirty, log an event,
                    // and move along to the next cache line
                    if (VirtualInterfaceListChange == null)
                    {
                        cacheLine._dirty = true;
                        cacheLine._newValue = value;
                        LogVirtualInterfaceListChangeNoHandlerEvent(key, cacheLine._value, value);
                        continue;
                    }

                    // if we get here, VirtualInterfaceListChange is not null, so we
                    // we signal the Event to notifiy the client code of the change.
                    // first we set _approveVirtualInterfaceListChange to true, so we can
                    // see if any of the event handlers vetoed the change
                    VirtualInterfaceListChangeEventArgs eventArgs
                        = new VirtualInterfaceListChangeEventArgs(
                            key._environment,
                            key._siteId,
                            cacheLine._value,
                            value);
                    _approveVirtualInterfaceListChange = true;

                    // we want to wrap this in a try catch block, so if any
                    // registered handlers throw an exception we behave in
                    // a predictable fashion
                    try
                    {
                        OnVirtualInterfaceListChange(eventArgs);
                    }
                    catch (Exception e)
                    {
                        // Log that the exception was thrown and then treat
                        // this as a rejected change
                        LogVirtualInterfaceListChangeExceptionEvent(key, cacheLine._value, value, e);
                        _approveVirtualInterfaceListChange = false;
                    }

                    // if _approveVirtualInterfaceListChange is still true, then none of the
                    // VirtualInterfaceListChangeEventHandler delegates called VetoVirtualInterfaceListChange,
                    // therefore we can commit the change to the cache
                    if (_approveVirtualInterfaceListChange)
                    {
                        LogVirtualInterfaceListChangeAcceptedEvent(key, cacheLine._value, value);
                        cacheLine._value = value;
                    }
                    else
                    {
                        // if _approveVirtualInterfaceListChange is now false, one or more of the
                        // VirtualInterfaceListChangeEventHandler delegates called VetoVirtualInterfaceListChange,
                        // therefore we should flag this cache line as dirty, and log
                        // an NT event
                        LogVirtualInterfaceListChangeRejectedEvent(key, cacheLine._value, value);
                        cacheLine._dirty = true;
                        cacheLine._newValue = value;
                    }
                }
                else if (cacheLine._dirty)
                {
                    //  In this case the values are equal but the cacheline is currently marked dirty
                    //  This means the value has been returned to its original value, clear the
                    //  dirty flag.
                    cacheLine._dirty = false;
                    cacheLine._lastEvent = DateTime.MinValue;
                    cacheLine._newValue = null;
                }
            }
        }

        private void LogVirtualInterfaceListChangeAcceptedEvent(
            VirtualInterfaceListKey key,
            string[] oldValue,
        string[] newValue)
        {
            LogNtEvent(ConfigEvent.Id.COMMON_INFO_28,
                "A virtual interface list change has been accepted by this component (details below)\n"
                + "Environment: " + key._environment + "\n"
                + "SiteId: " + key._siteId + "\n"
                + "Old Value: " + CollectionToString(oldValue) + "\n"
                + "New Value: " + CollectionToString(newValue) + "\n");
        }

        private void LogVirtualInterfaceListChangeRejectedEvent(
            VirtualInterfaceListKey key,
            string[] oldValue,
        string[] newValue)
        {
            LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_130,
                "A virtual interface list change has been rejected by this component (details below)\n"
                + "Environment: " + key._environment + "\n"
                + "SiteId: " + key._siteId + "\n"
                + "Old Value: " + CollectionToString(oldValue) + "\n"
                + "New Value: " + CollectionToString(newValue) + "\n");
        }

        private void LogVirtualInterfaceListChangeNoHandlerEvent(
            VirtualInterfaceListKey key,
            string[] oldValue,
        string[] newValue)
        {
            LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_131,
                "A virtual interface list change event was not handled by this component (details below)\n"
                + "Environment: " + key._environment + "\n"
                + "SiteId: " + key._siteId + "\n"
                + "Old Value: " + CollectionToString(oldValue) + "\n"
                + "New Value: " + CollectionToString(newValue) + "\n");
        }

        private void LogVirtualInterfaceListChangeExceptionEvent(
            VirtualInterfaceListKey key,
            string[] oldValue,
        string[] newValue,
        Exception e)
        {
            LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_132,
                "A virtual interface list change handler threw an exception! (details below)\n"
                + "Environment: " + key._environment + "\n"
                + "SiteId: " + key._siteId + "\n"
                + "Old Value: " + CollectionToString(oldValue) + "\n"
                + "New Value: " + CollectionToString(newValue) + "\n"
                + "Exception Message:" + e.Message + "\n"
                + "Exception Stack Trace:" + e.StackTrace + "\n");
        }

        private void LogStaleVirtualInterfaceListEvent(
            VirtualInterfaceListKey key,
            VirtualInterfaceListCacheLine cacheLine)
        {
            // check to see how long ago we logged an event about this setting
            if ((DateTime.Now - cacheLine._lastEvent) >= MinEventInterval)
            {
                // time for another event!
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_133,
                    "This component is not using the latest virtual interface list information from NPDB (details below)\n"
                    + "Operator action may be required. Please investigate!\n"
                    + "Note: This event will not be logged again for this particular problem until at least "
                    + MinEventInterval.TotalMilliseconds
                    + " milliseconds have elapsed\n"
                    + "Environment: " + key._environment + "\n"
                    + "SiteId: " + key._siteId + "\n"
                    + "Stale Value: " + CollectionToString(cacheLine._value) + "\n"
                    + "New Value: " + CollectionToString(cacheLine._newValue) + "\n");

                // remember the current time...
                cacheLine._lastEvent = DateTime.Now;
            }
        }

        private string[] GetVirtualInterfaceListBySiteFromDB(string environment, int siteId)
        {
            SortedList virtualInterfaceList = new SortedList();

            using (SqlConnection npdbConnection = new SqlConnection(NpdbConnectionString))
            {
                npdbConnection.Open();

                SqlCommand cmd = npdbConnection.CreateCommand();

                cmd.CommandText = "p_config_get_virtual_interface_list_by_site";
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = environment;
                cmd.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = siteId;
                using (SqlDataReader reader = cmd.ExecuteReader())
                {
                    if (reader != null)
                    {
                        while (reader.Read())
                        {
                            string virtualInterface = (string) reader["vc_virtual_interface"];

                            // add it to the list
                            virtualInterfaceList.Add(virtualInterface, virtualInterface);
                        }
                    }
                }
            }

            // convert the sorted list to an array
            string[] virtualInterfaces = new string[virtualInterfaceList.Count];
            virtualInterfaceList.Values.CopyTo(virtualInterfaces, 0);
            return virtualInterfaces;
        }

        public IVirtualInterfaceInfo[] GetVirtualInterfaceInfoBySite(Site site)
        {
            ApplicationException ae;
            IVirtualInterfaceInfo[] virtualInterfaceInfos = null;
            switch (site)
            {
                case Site.main:
                    virtualInterfaceInfos = GetVirtualInterfaceInfoBySite(MainSiteId);
                    break;

                case Site.same:
                    if (SiteId == 0)
                    {
                        ae = new ApplicationException("GetVirtualInterfaceInfoBySite(Site.same) called when current site is unknown");
                        LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_135, ae + "\n" + System.Environment.StackTrace);
                        throw ae;
                    }
                    virtualInterfaceInfos = GetVirtualInterfaceInfoBySite(SiteId);
                    break;

                case Site.only:
                    ae = new ApplicationException("GetVirtualInterfaceInfoBySite(Site.only) is not allowed");
                    LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_136, ae + "\n" + System.Environment.StackTrace);
                    throw ae;
            }

            return virtualInterfaceInfos;
        }

        public IVirtualInterfaceInfo[] GetVirtualInterfaceInfoBySite(int siteId)
        {
            string[] virtualInterfaces = GetVirtualInterfaceListBySite(siteId);

            IVirtualInterfaceInfo[] virtualInterfaceInfos
                = new IVirtualInterfaceInfo[virtualInterfaces.Length];

            for (int i = 0; i < virtualInterfaces.Length; ++i)
            {
                virtualInterfaceInfos[i] = GetVirtualInterface(virtualInterfaces[i], siteId);
            }

            return virtualInterfaceInfos;
        }

        // Retrieves the information required to reach a virtual interface.
        public bool TryGetVirtualInterface(string virtualInterface, out IVirtualInterfaceInfo virtualInterfaceInfo)
        {
            virtualInterfaceInfo = GetVirtualInterface(virtualInterface, Site.same, true);
            return virtualInterfaceInfo != null;
        }

        // Retrieves the information required to reach a virtual interface.
        public IVirtualInterfaceInfo GetVirtualInterface(string virtualInterface)
        {
            return GetVirtualInterface(virtualInterface, Site.same, false);
        }

        public IVirtualInterfaceInfo GetVirtualInterface(string virtualInterface, Site site)
        {
            return GetVirtualInterface(virtualInterface, site, false);
        }

        private IVirtualInterfaceInfo GetVirtualInterface(string virtualInterface, Site site, bool tryGet)
        {
            ApplicationException ae;
            IVirtualInterfaceInfo virtualInterfaceInfo = null;
            switch (site)
            {
                case Site.main:
                    virtualInterfaceInfo = GetVirtualInterface(virtualInterface, MainSiteId, tryGet);
                    break;

                case Site.same:
                    if (SiteId == 0)
                    {
                        ae = new ApplicationException("GetVirtualInterface(Site.same) called when current site is unknown");
                        LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_137, ae + "\n" + System.Environment.StackTrace);
                        throw ae;
                    }
                    virtualInterfaceInfo = GetVirtualInterface(virtualInterface, SiteId, tryGet);
                    break;

                case Site.only:
                    ae = new ApplicationException("GetVirtualInterface(Site.only) not yet implemented");
                    LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_138, ae + "\n" + System.Environment.StackTrace);
                    throw ae;
            }

            return virtualInterfaceInfo;
        }

        public IVirtualInterfaceInfo GetVirtualInterface(string virtualInterface, int siteId)
        {
            return GetVirtualInterfaceFromCache(virtualInterface, siteId, Environment, false);
        }

        private IVirtualInterfaceInfo GetVirtualInterface(string virtualInterface, int siteId, bool tryGet)
        {
            return GetVirtualInterfaceFromCache(virtualInterface, siteId, Environment, tryGet);
        }

        // attach VirtualInterfaceChangeEventHandler delegates to this event to be notified
        // when virtual interface info changes in NPDB
        public event VirtualInterfaceChangeEventHandler VirtualInterfaceChange;
        protected void OnVirtualInterfaceChange(VirtualInterfaceChangeEventArgs e)
        {
            if (VirtualInterfaceChange != null)
            {
                VirtualInterfaceChange(null, e);
            }
        }

        // if the VirtualInterfaceChangeHandler wants to veto the change, it calls
        // VetoVirtualInterfaceChange, which sets the _approveVirtualInterfaceChange flag to false
        private bool _approveVirtualInterfaceChange = true;
        public void VetoVirtualInterfaceChange()
        {
            // VirtualInterfaceChangeEventHandlers call this method if they
            // need to indicate that the virtual interface change indicated by
            // the VirtualInterfaceChangeEventArgs should not be committed
            // to the cache
            _approveVirtualInterfaceChange = false;
        }

        // the virtual interface cache is implemented as a hashtable, where the
        // keys are VirtualInterfaceKey objects and the values are VirtualInterfaceCacheLine
        // objects.
        private Hashtable _virtualInterfaceCache;
        private class VirtualInterfaceKey : IComparable
        {
            public string _environment;
            public int _siteId;
            public string _virtualInterface;

            public override int GetHashCode()
            {
                return unchecked(_environment.GetHashCode()
                    + _siteId.GetHashCode()
                    + _virtualInterface.GetHashCode());
            }

            public override string ToString()
            {
                return _environment + ","
                    + _siteId + ","
                    + _virtualInterface;
            }

            public override bool Equals(object o)
            {
                return (CompareTo(o) == 0);
            }

            public int CompareTo(object o)
            {
                if (typeof(VirtualInterfaceKey) != o.GetType())
                {
                    throw new ArgumentException(
                        "Object provided to VirtualInterfaceKey.CompareTo is not a VirtualInterfaceKey");
                }

                VirtualInterfaceKey key = (VirtualInterfaceKey)o;

                int environmentCompare = String.Compare(_environment, key._environment, false, CultureInfo.InvariantCulture);
                if (environmentCompare != 0)
                {
                    return environmentCompare;
                }

                // environments are equal

                if (_siteId < key._siteId)
                {
                    return -1;
                }
                if (_siteId > key._siteId)
                {
                    return 1;
                }
                // siteids are equal

                return String.Compare(_virtualInterface, key._virtualInterface, false, CultureInfo.InvariantCulture);
            }
        }

        private class VirtualInterfaceCacheLine
        {
            public IVirtualInterfaceInfo _value;
            public bool _dirty;
            public DateTime _lastEvent;
            public IVirtualInterfaceInfo _newValue; // used to store the new value if the line is dirty

            public override string ToString()
            {
                return _value.ToString() + ","
                    + _dirty + ","
                    + _lastEvent + ","
                    + (_newValue == null ? "<null>" : _newValue.ToString());
            }
        }

        private Hashtable VirtualInterfaceCache
        {
            get
            {
                if (_virtualInterfaceCache != null)
                {
                    return _virtualInterfaceCache;
                }

                _rwLock.AcquireWriterLock(_rwLockTimeout);
                try
                {
                    if (_virtualInterfaceCache != null)
                    {
                        return _virtualInterfaceCache;
                    }

                    _virtualInterfaceCache = new Hashtable();

                    // make sure the timer callback has been set up
                    RefreshTimerInit();

                    return _virtualInterfaceCache;
                }
                finally
                {
                    _rwLock.ReleaseWriterLock();
                }
            }
        }

        // gets the virtual interface information from the cache if present,
        // or from the database if not present, and adds that information to the
        // cache. If the cache does not exist, it is created
        private IVirtualInterfaceInfo GetVirtualInterfaceFromCache(
            string virtualInterface,
            int siteId,
            string environment,
            bool tryGet)
        {
            // validate parameters
            if (environment == null)
            {
                ArgumentNullException ae = new ArgumentNullException("environment");
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_139, ae + "\n" + System.Environment.StackTrace);
                throw ae;
            }

            // check the cache for the requested setting
            VirtualInterfaceKey key = new VirtualInterfaceKey();
            key._environment = environment;
            key._siteId = siteId;
            key._virtualInterface = virtualInterface;

            if (VirtualInterfaceCache.ContainsKey(key))
            {
                VirtualInterfaceCacheLine cacheLine = (VirtualInterfaceCacheLine)VirtualInterfaceCache[key];

                // if this cache line is dirty, we should consider logging an NT event
                if (cacheLine._dirty)
                {
                    LogStaleVirtualInterfaceEvent(key, cacheLine);
                }

                // we've done our duty and notified ops that this process is using
                // stale config data, so return the stale data and get on with it
                return cacheLine._value;
            }

            // if we get here, the virtual interface was not found in the cache, so
            // get the info from the database and add it to the cache
            IVirtualInterfaceInfo value = GetVirtualInterfaceFromDB(
                virtualInterface,
                siteId,
                environment,
                tryGet
            );

            if (value == null) return null;
            VirtualInterfaceCacheLine newCacheLine = new VirtualInterfaceCacheLine();

            newCacheLine._value = value;
            newCacheLine._dirty = false;

            // set the last event time to a valid time that's far enough in the
            // past to guarantee that if the line gets dirty, we'll log the
            // event the first time
            newCacheLine._lastEvent = DateTime.MinValue;

            // save the line in the cache
            lock (VirtualInterfaceCache)
            {
                VirtualInterfaceCache[key] = newCacheLine;
            }

            return value;
        }

        private void RefreshVirtualInterfaces()
        {
            // for each line in the virtual interface cache, requery that virtual interface from NPDB
            foreach (DictionaryEntry de in VirtualInterfaceCache)
            {
                // requery for the virtual interface from the database
                VirtualInterfaceKey key = (VirtualInterfaceKey)de.Key;
                IVirtualInterfaceInfo value = GetVirtualInterfaceFromDB(
                    key._virtualInterface,
                    key._siteId,
                    key._environment,
                    false);
                // GetVirtualInterface will throw if the virtual interface does not exist

                // has the virtual interface changed?
                VirtualInterfaceCacheLine cacheLine = (VirtualInterfaceCacheLine)de.Value;
                if (value.ToString() != cacheLine._value.ToString())
                {
                    // if the virtual interface has changed, but Config.VirtualInterfaceChange
                    // is null (which means no delegates have been attached to the Event) then
                    // we can't commit this change to the cache, because we didn't get approval
                    // from the client code. So mark this cache line as dirty, log an event,
                    // and move along to the next cache line
                    if (VirtualInterfaceChange == null)
                    {
                        cacheLine._dirty = true;
                        cacheLine._newValue = value;

                        LogVirtualInterfaceChangeNoHandlerEvent(key, cacheLine._value, value);
                        continue;
                    }

                    // if we get here, VirtualInterfaceChange is not null, so we
                    // we signal the Event to notifiy the client code of the change.
                    // first we set _approveVirtualInterfaceChange to true, so we can
                    // see if any of the event handlers vetoed the change
                    VirtualInterfaceChangeEventArgs eventArgs
                        = new VirtualInterfaceChangeEventArgs(
                            key._environment,
                            key._siteId,
                            key._virtualInterface,
                            cacheLine._value,
                            value);
                    _approveVirtualInterfaceChange = true;

                    // we want to wrap this in a try catch block, so if any
                    // registered handlers throw an exception we behave in
                    // a predictable fashion
                    try
                    {
                        OnVirtualInterfaceChange(eventArgs);
                    }
                    catch (Exception e)
                    {
                        // Log that the exception was thrown and then treat
                        // this as a rejected change
                        LogVirtualInterfaceChangeExceptionEvent(key, cacheLine._value, value, e);
                        _approveVirtualInterfaceChange = false;
                    }

                    // if _approveVirtualInterfaceChange is still true, then none of the
                    // VirtualInterfaceChangeEventHandler delegates called VetoVirtualInterfaceChange,
                    // therefore we can commit the change to the cache
                    if (_approveVirtualInterfaceChange)
                    {
                        LogVirtualInterfaceChangeAcceptedEvent(key, cacheLine._value, value);
                        cacheLine._value = value;
                    }
                    else
                    {
                        // if _approveVirtualInterfaceChange is now false, one or more of the
                        // VirtualInterfaceChangeEventHandler delegates called VetoVirtualInterfaceChange,
                        // therefore we should flag this cache line as dirty, and log
                        // an NT event
                        LogVirtualInterfaceChangeRejectedEvent(key, cacheLine._value, value);
                        cacheLine._dirty = true;
                        cacheLine._newValue = value;
                    }
                }
                else if (cacheLine._dirty)
                {
                    //  In this case the values are equal but the cacheline is currently marked dirty
                    //  This means the value has been returned to its original value, clear the
                    //  dirty flag.
                    cacheLine._dirty = false;
                    cacheLine._lastEvent = DateTime.MinValue;
                    cacheLine._newValue = null;
                }
            }
        }

        private void LogVirtualInterfaceChangeAcceptedEvent(
            VirtualInterfaceKey key,
            IVirtualInterfaceInfo oldValue,
        IVirtualInterfaceInfo newValue)
        {
            LogNtEvent(ConfigEvent.Id.COMMON_INFO_29,
                "A virtual interface change has been accepted by this component (details below)\n"
                + "Environment: " + key._environment + "\n"
                + "SiteId: " + key._siteId + "\n"
                + "VirtualInterface: " + key._virtualInterface + "\n"
                + "Old Value: " + oldValue.ToString() + "\n"
                + "New Value: " + newValue.ToString() + "\n");
        }

        private void LogVirtualInterfaceChangeRejectedEvent(VirtualInterfaceKey key, IVirtualInterfaceInfo oldValue, IVirtualInterfaceInfo newValue)
        {
            LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_140,
                "A virtual interface change has been rejected by this component (details below)\n"
                + "Environment: " + key._environment + "\n"
                + "SiteId: " + key._siteId + "\n"
                + "VirtualInterface: " + key._virtualInterface + "\n"
                + "Old Value: " + oldValue.ToString() + "\n"
                + "New Value: " + newValue.ToString() + "\n");
        }

        private void LogVirtualInterfaceChangeNoHandlerEvent(VirtualInterfaceKey key, IVirtualInterfaceInfo oldValue, IVirtualInterfaceInfo newValue)
        {
            LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_141,
                "A virtual interface change event was not handled by this component (details below)\n"
                + "Environment: " + key._environment + "\n"
                + "SiteId: " + key._siteId + "\n"
                + "VirtualInterface: " + key._virtualInterface + "\n"
                + "Old Value: " + oldValue.ToString() + "\n"
                + "New Value: " + newValue.ToString() + "\n");
        }

        private void LogVirtualInterfaceChangeExceptionEvent(
            VirtualInterfaceKey key,
            IVirtualInterfaceInfo oldValue,
            IVirtualInterfaceInfo newValue,
            Exception e)
        {
            LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_142,
                "A virtual interface change handler threw an exception! (details below)\n"
                + "Environment: " + key._environment + "\n"
                + "SiteId: " + key._siteId + "\n"
                + "VirtualInterface: " + key._virtualInterface + "\n"
                + "Old Value: " + oldValue.ToString() + "\n"
                + "New Value: " + newValue.ToString() + "\n"
                + "Exception Message:" + e.Message + "\n"
                + "Exception Stack Trace:" + e.StackTrace + "\n");
        }

        private void LogStaleVirtualInterfaceEvent(VirtualInterfaceKey key, VirtualInterfaceCacheLine cacheLine)
        {
            // check to see how long ago we logged an event about this setting
            if ((DateTime.Now - cacheLine._lastEvent) >= MinEventInterval)
            {
                // time for another event!
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_143,
                    "This component is not using the latest virtual interface information from NPDB (details below)\n"
                    + "Operator action may be required. Please investigate!\n"
                    + "Note: This event will not be logged again for this particular problem until at least "
                    + MinEventInterval.TotalMilliseconds
                    + " milliseconds have elapsed\n"
                    + "Environment: " + key._environment + "\n"
                    + "SiteId: " + key._siteId + "\n"
                    + "VirtualInterface: " + key._virtualInterface + "\n"
                    + "Stale Value: " + cacheLine._value.ToString() + "\n"
                    + "New Value: " + cacheLine._newValue.ToString() + "\n");

                // remember the current time...
                cacheLine._lastEvent = DateTime.Now;
            }
        }

        // Get the virtual interface information directly from the database
        private IVirtualInterfaceInfo GetVirtualInterfaceFromDB(
            string virtualInterface,
            int siteId,
            string environment,
            bool tryGet)
        {
            // default contructor inits everything to null or invalid values. These will be used
            // if no value is provided in NPDB for a particular value
            VirtualInterfaceInfo virtualInterfaceInfo = new VirtualInterfaceInfo();

            using (SqlConnection npdbConnection = new SqlConnection(NpdbConnectionString))
            {
                npdbConnection.Open();

                SqlCommand cmd = npdbConnection.CreateCommand();
                cmd.CommandText = "p_config_get_virtual_interface";
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = environment;
                cmd.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = siteId;
                cmd.Parameters.Add("@vc_virtual_interface", SqlDbType.NVarChar).Value = virtualInterface;
                cmd.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = ComponentName;

                SqlDataReader reader;
                
                using(reader = cmd.ExecuteReader())
                {
                    if(reader != null)
                    {
                        if (!reader.Read())
                        {
                            if (tryGet) return null;

                            ApplicationException ae = new ApplicationException("VirtualInterface '"
                                + virtualInterface
                                + "' not present in site id "
                                + siteId);
                            LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_144, ae + "\n" + System.Environment.StackTrace);
                            throw ae;
                        }

                        // if it's returned by the stored proc, it can't be null
                        virtualInterfaceInfo.VirtualInterface = (string)reader["vc_virtual_interface"];

                        // if it's returned by the stored proc, it can't be null
                        virtualInterfaceInfo.Interface = (string)reader["vc_interface"];

                        // vc_protocol is declared as not null
                        virtualInterfaceInfo.Protocol = (string)reader["vc_protocol"];

                        // vc_ip may be null, and could be invalid
                        if (reader["vc_ip"] != DBNull.Value)
                        {
                            try
                            {
                                virtualInterfaceInfo.IPAddressString = (string)reader["vc_ip"];
                            }
                            catch (Exception e)
                            {
                                ApplicationException ae = new ApplicationException(
                                    "Could not parse vc_ip as an IPAddress, value: "
                                    + (string)reader["vc_ip"],
                                    e);
                                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_147, ae + "\n" + System.Environment.StackTrace);
                                throw ae;
                            }
                        }

                        // i_port may be null
                        if (reader["i_port"] != DBNull.Value)
                        {
                            virtualInterfaceInfo.Port = (Int32)reader["i_port"];
                        }

                        // i_port_end may be null
                        if (reader["i_port_end"] != DBNull.Value)
                        {
                            virtualInterfaceInfo.PortEnd = (Int32)reader["i_port_end"];
                        }

                        // vc_vdir may be null
                        if (reader["vc_vdir"] != DBNull.Value)
                        {
                            virtualInterfaceInfo.VDir = (string)reader["vc_vdir"];
                        }

                        // vc_webstore_app may be null
                        if (reader["vc_webstore_app"] != DBNull.Value)
                        {
                            virtualInterfaceInfo.WebstoreApp = (string)reader["vc_webstore_app"];
                        }

                        // i_timeout may be null
                        if (reader["i_timeout"] != DBNull.Value)
                        {
                            virtualInterfaceInfo.Timeout = (Int32)reader["i_timeout"];
                        }

                        // i_service_id may be null
                        if (reader["i_service_id"] != DBNull.Value)
                        {
                            virtualInterfaceInfo.ServiceId = (Int32)reader["i_service_id"];
                        }

                        // old version of this stored proc will not return this column. Until we have
                        // regular builds of testnet, I'll squash the exception that indicates the
                        // column is not returned. This will allow developers to deploy private
                        // builds that include this new config code without requiring NPDB to be updated
                        try
                        {
                            // vc_service_name may be null
                            if (reader["vc_service_name"] != DBNull.Value)
                            {
                                virtualInterfaceInfo.ServiceName = (string)reader["vc_service_name"];
                            }
                        }
                        catch (IndexOutOfRangeException)
                        {
                            // just squash the exception, which treats the column like a NULL
                        }

                        // old version of this stored proc will not return this column. Until we have
                        // regular builds of testnet, I'll squash the exception that indicates the
                        // column is not returned. This will allow developers to deploy private
                        // builds that include this new config code without requiring NPDB to be updated
                        try
                        {
                            // b_need_sg_info may be null
                            if (reader["b_need_sg_info"] != DBNull.Value)
                            {
                                virtualInterfaceInfo.NeedSGInfo = (bool)reader["b_need_sg_info"];
                            }
                        }
                        catch (IndexOutOfRangeException)
                        {
                            // just squash the exception, which treats the column like a NULL
                        }

                        // i_internet_port may be null
                        if (reader["i_internet_port"] != DBNull.Value)
                        {
                            virtualInterfaceInfo.InternetPort = (Int32)reader["i_internet_port"];
                        }

                        // i_internet_port_end may be null
                        if (reader["i_internet_port_end"] != DBNull.Value)
                        {
                            virtualInterfaceInfo.InternetPortEnd = (Int32)reader["i_internet_port_end"];
                        }

                        // vc_info1 may be null
                        if (reader["vc_info1"] != DBNull.Value)
                        {
                            virtualInterfaceInfo.Info1 = (string)reader["vc_info1"];
                        }

                        // vc_info2 may be null
                        if (reader["vc_info2"] != DBNull.Value)
                        {
                            virtualInterfaceInfo.Info2 = (string)reader["vc_info2"];
                        }
                        // i_min_connection_pool_size may be null
                        if (reader["i_min_connection_pool_size"] != DBNull.Value)
                        {
                            virtualInterfaceInfo.MinConnectionPoolSize = (Int32)reader["i_min_connection_pool_size"];
                        }

                        // i_max_connection_pool_size may be null
                        if (reader["i_max_connection_pool_size"] != DBNull.Value)
                        {
                            virtualInterfaceInfo.MaxConnectionPoolSize = (Int32)reader["i_max_connection_pool_size"];
                        }

                        // i_load_balance_timeout may be null
                        if (reader["i_load_balance_timeout"] != DBNull.Value)
                        {
                            virtualInterfaceInfo.LoadBalanceTimeout = (Int32)reader["i_load_balance_timeout"];
                        }

                        // i_connection_timeout may be null
                        if (reader["i_connection_timeout"] != DBNull.Value)
                        {
                            virtualInterfaceInfo.ConnectionTimeout = (Int32)reader["i_connection_timeout"];
                        }

                        // vc_health_xrl may be null or might not exist
                        try
                        {
                            if (reader["vc_health_xrl"] != DBNull.Value)
                            {
                                virtualInterfaceInfo.HealthCheckUrl = (string)reader["vc_health_xrl"];
                            }
                        } 
                        catch (IndexOutOfRangeException)
                        {
                            // Ignore
                        }

                        // Do we have another result set?
                        if (reader.NextResult())
                        {
                            // Generic Notification Interfaces are stored here
                            while (reader.Read())
                            {
                                string vc_notification = (string)reader["vc_notification"];
                                string vc_url          = (string)reader["vc_url"];

                                virtualInterfaceInfo.AddNotificationUrl( vc_notification, vc_url );
                            }
                        }

                    }
                }

                // now, get any environment type overrides and apply them
                cmd = npdbConnection.CreateCommand();
                cmd.CommandText = "p_config_get_environment_type_virtual_interface_overrides";
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = environment;
                cmd.Parameters.Add("@vc_virtual_interface", SqlDbType.NVarChar).Value = virtualInterface;
                
                using(reader = cmd.ExecuteReader())
                {
                    if (reader != null && reader.Read())
                    {
                        // there is an override row, so apply anything that's not null
                        if (reader["i_port"] != DBNull.Value)
                        {
                            virtualInterfaceInfo.Port = (Int32) reader["i_port"];
                        }

                        if (reader["i_port_end"] != DBNull.Value)
                        {
                            virtualInterfaceInfo.PortEnd = (Int32) reader["i_port_end"];
                        }

                        if (reader["vc_vdir"] != DBNull.Value)
                        {
                            virtualInterfaceInfo.VDir = (string) reader["vc_vdir"];
                        }

                        if (reader["vc_webstore_app"] != DBNull.Value)
                        {
                            virtualInterfaceInfo.WebstoreApp = (string) reader["vc_webstore_app"];
                        }

                        if (reader["i_timeout"] != DBNull.Value)
                        {
                            virtualInterfaceInfo.Timeout = (Int32) reader["i_timeout"];
                        }

                        try
                        {
                            if (reader["i_internet_port"] != DBNull.Value)
                            {
                                virtualInterfaceInfo.InternetPort = (Int32) reader["i_internet_port"];
                            }
                        }
                        catch
                        {
                            // just squash the exception, which treats the column like a NULL
                        }

                        try
                        {
                            if (reader["i_internet_port_end"] != DBNull.Value)
                            {
                                virtualInterfaceInfo.InternetPortEnd = (Int32) reader["i_internet_port_end"];
                            }
                        }
                        catch
                        {
                            // just squash the exception, which treats the column like a NULL
                        }

                        if (reader["vc_info1"] != DBNull.Value)
                        {
                            virtualInterfaceInfo.Info1 = (string) reader["vc_info1"];
                        }

                        if (reader["vc_info2"] != DBNull.Value)
                        {
                            virtualInterfaceInfo.Info2 = (string) reader["vc_info2"];
                        }
                    }
                }

                // now, get any site overrides and apply them
                cmd = npdbConnection.CreateCommand();
                cmd.CommandText = "p_config_get_site_virtual_interface_overrides";
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = environment;
                cmd.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = siteId;
                cmd.Parameters.Add("@vc_virtual_interface", SqlDbType.NVarChar).Value = virtualInterface;
                
                using(reader = cmd.ExecuteReader())
                {
                    if (reader != null && reader.Read())
                    {
                        // there is an override row, so apply anything that's not null
                        if (reader["i_port"] != DBNull.Value)
                        {
                            virtualInterfaceInfo.Port = (Int32) reader["i_port"];
                        }

                        if (reader["i_port_end"] != DBNull.Value)
                        {
                            virtualInterfaceInfo.PortEnd = (Int32) reader["i_port_end"];
                        }

                        if (reader["vc_vdir"] != DBNull.Value)
                        {
                            virtualInterfaceInfo.VDir = (string) reader["vc_vdir"];
                        }

                        if (reader["vc_webstore_app"] != DBNull.Value)
                        {
                            virtualInterfaceInfo.WebstoreApp = (string) reader["vc_webstore_app"];
                        }

                        if (reader["i_timeout"] != DBNull.Value)
                        {
                            virtualInterfaceInfo.Timeout = (Int32) reader["i_timeout"];
                        }

                        try
                        {
                            if (reader["i_internet_port"] != DBNull.Value)
                            {
                                virtualInterfaceInfo.InternetPort = (Int32) reader["i_internet_port"];
                            }
                        }
                        catch
                        {
                            // just squash the exception, which treats the column like a NULL
                        }

                        try
                        {
                            if (reader["i_internet_port_end"] != DBNull.Value)
                            {
                                virtualInterfaceInfo.InternetPortEnd = (Int32) reader["i_internet_port_end"];
                            }
                        }
                        catch
                        {
                            // just squash the exception, which treats the column like a NULL
                        }

                        if (reader["vc_info1"] != DBNull.Value)
                        {
                            virtualInterfaceInfo.Info1 = (string) reader["vc_info1"];
                        }

                        if (reader["vc_info2"] != DBNull.Value)
                        {
                            virtualInterfaceInfo.Info2 = (string) reader["vc_info2"];
                        }
                    }
                }
            }

            return virtualInterfaceInfo;
        }

        // use this API to retrieve the value for a boolean setting for the
        // current component on the current server
        public bool GetBoolSetting(string setting)
        {
            string val = GetSetting(setting);
            return Config.ConvertBoolSetting(val);
        }

        // use this API to retrieve the value for a signed integer setting for the
        // current component on the current server
        public int GetIntSetting(string setting)
        {
            string val = GetSetting(setting);
            return Int32.Parse(val);
        }

        // use this API to retrieve the value for an unsigned integer setting for the
        // current component on the current server
        public uint GetUIntSetting(string setting)
        {
            string val = GetSetting(setting);
            return UInt32.Parse(val);
        }

        // use this API to retrieve the value for an IP address as an unsigned integer setting for the
        // current component on the current server
        public uint GetUIntIpSetting(string setting)
        {
            string val = GetSetting(setting);
            return ConfigUtil.IpAddressToDword(IPAddress.Parse(val));
        }

        // use this API to retrieve the value for a signed integer setting for the
        // current component on the current server
        public long GetLongSetting(string setting)
        {
            string val = GetSetting(setting);
            return Int64.Parse(val);
        }

        // use this API to retrieve the value for an unsigned integer setting for the
        // current component on the current server
        public ulong GetULongSetting(string setting)
        {
            string val = GetSetting(setting);
            return UInt64.Parse(val);
        }

        // use this API to retrieve the value for a double precision floating point setting for the
        // current component on the current server
        public double GetDoubleSetting(string setting)
        {
            string val = GetSetting(setting);
            return Double.Parse(val);
        }

        // use this API to retrieve the value for a setting for the
        // current component on the current server
        public string GetSetting(string setting)
        {
            string value = GetSettingFromCache(
                Environment,
                SiteId,
                Server,
                Component,
                setting);

            IConfigurationOverride configOverride = this.ConfigurationOverride;
            if (configOverride != null)
                return configOverride.GetInjectedNpdbValue(setting, value);
            else
                return value;
        }

        // Gets a setting from the blob table
        public byte[] GetBlobSetting(string setting)
        {
            // Try reading the blob from the local settings file first
            FileSettingsReader fileReader = GetFileSettings(false);
            if (fileReader != null)
            {
                byte[] value = fileReader.GetBlobSetting(setting);
                if (value != null)
                {
                    return value;
                }
            }
            
            LogNpdbSettingAccess();
            
            using (SqlConnection npdb = new SqlConnection(NpdbConnectionString))
            {
                npdb.Open();

                // Read certificate template from npdb
                SqlCommand cmd = npdb.CreateCommand();
                cmd.CommandText = "dbo.p_config_blob_get";
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@vc_config_blob_name", SqlDbType.NVarChar).Value = setting;

                using (SqlDataReader reader = cmd.ExecuteReader())
                {
                    if (reader == null || !reader.Read())
                    {
                        return null;
                    }

                    return reader.GetSqlBytes(0).Value;
                }
            }
        }

        // attach SettingChangeEventHandler delegates to this event to be notified
        // when settings change in NPDB
        public event SettingChangeEventHandler SettingChange;
        protected void OnSettingChange(SettingChangeEventArgs e)
        {
            if (SettingChange != null)
            {
                SettingChange(this, e);
            }
        }

        // if the SettingChangeEventHandler wants to veto the change, it calls
        // VetoSetingChange, which sets the _approveSettingsChange flag to false
        private bool _approveSettingsChange = true;
        public void VetoSettingChange()
        {
            // SettingChangeEventHandlers call this method if they
            // need to indicate that the setting change indicated by
            // the SettingChangeEventArgs should not be committed
            // to the cache
            _approveSettingsChange = false;
        }



        // the settings cache is implemented as a hashtable, where the
        // keys are SettingsKey objects and the values are SettingsCacheLine
        // objects.
        private Hashtable _settingsCache;
        private class SettingsKey : IComparable
        {
            public string _environment;
            public int _siteId;
            public string _server;
            public string _component;
            public string _setting;

            public SettingsKey()
            {

            }

            public SettingsKey(string szEnvironment, int iSiteId, string szServer, string szComponent, string szSetting)
            {
                _environment = szEnvironment;
                _siteId = iSiteId;
                _server = szServer;
                _component = szComponent;
                _setting = szSetting;
            }

            public string ToXmlBatchQueryFormat()
            {
                return String.Format(@"<a vc_setting=""{0}""/>", _setting);
            }

            public override int GetHashCode()
            {
                return unchecked(_environment.GetHashCode()
                                 + _siteId.GetHashCode()
                                 + _server.GetHashCode()
                                 + _component.GetHashCode()
                                 + _setting.GetHashCode());
            }

            public override string ToString()
            {
                return _environment + ","
                       + _siteId + ","
                       + _server + ","
                       + _component + ","
                       + _setting;
            }

            public override bool Equals(object o)
            {
                return (CompareTo(o) == 0);
            }

            public int CompareTo(object o)
            {
                if (typeof(SettingsKey) != o.GetType())
                {
                    throw new ArgumentException(
                        "Object provided to SettingsKey.CompareTo is not a SettingsKey");
                }

                SettingsKey key = (SettingsKey)o;
                int environmentCompare = String.Compare(_environment, key._environment, false, CultureInfo.InvariantCulture);
                if (environmentCompare != 0)
                {
                    return environmentCompare;
                }

                // environments are equal

                if (_siteId < key._siteId)
                {
                    return -1;
                }
                if (_siteId > key._siteId)
                {
                    return 1;
                }
                // siteids are equal

                int serverCompare = String.Compare(_server, key._server, false, CultureInfo.InvariantCulture);
                if (serverCompare != 0)
                {
                    return serverCompare;
                }

                // servers are equal

                int componentCompare = String.Compare(_component, key._component, false, CultureInfo.InvariantCulture);
                if (componentCompare != 0)
                {
                    return componentCompare;
                }

                // components are equal

                return String.Compare(_setting, key._setting, false, CultureInfo.InvariantCulture);
            }
        }

        private class SettingsCacheLine
        {
            public string _value;
            public bool _dirty;
            public DateTime _lastEvent;
            public string _newValue; // used to store the new value if the line is dirty

            public override string ToString()
            {
                return _value + ","
                    + _dirty + ","
                    + _lastEvent + ","
                    + (_newValue ?? "<null>");
            }
        }

        private Hashtable SettingsCache
        {
            get
            {
                if (_settingsCache != null)
                {
                    return _settingsCache;
                }

                _rwLock.AcquireWriterLock(_rwLockTimeout);
                try
                {
                    if (_settingsCache != null)
                    {
                        return _settingsCache;
                    }

                    _settingsCache = new Hashtable();

                    // make sure the timer callback has been set up
                    RefreshTimerInit();

                    return _settingsCache;
                }
                finally
                {
                    _rwLock.ReleaseWriterLock();
                }
            }
        }

        /*
        private string SettingCacheToString()
        {
            StringBuilder sb = new StringBuilder();

            foreach (DictionaryEntry de in SettingsCache)
            {
                SettingsKey key = (SettingsKey)de.Key;
                SettingsCacheLine cacheLine = (SettingsCacheLine)de.Value;

                sb.Append(key.ToString());
                sb.Append(":");
                sb.Append(cacheLine.ToString());
                sb.Append("\n");
            }

            return sb.ToString();
        }
        */

        private string GetSettingFromCache(
            string environment,
            int siteId,
            string server,
            string component,
            string setting)
        {
            // validate parameters
            if (environment == null)
            {
                ArgumentNullException ae = new ArgumentNullException("environment");
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_148, ae + "\n" + System.Environment.StackTrace);
                throw ae;
            }

            if (server == null)
            {
                ArgumentNullException ae = new ArgumentNullException("server");
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_149, ae + "\n" + System.Environment.StackTrace);
                throw ae;
            }

            // check the cache for the requested setting
            SettingsKey key = new SettingsKey();
            key._environment = environment;
            key._siteId = siteId;
            key._server = server;
            key._component = component;
            key._setting = setting;

            if (SettingsCache.ContainsKey(key))
            {
                SettingsCacheLine cacheLine = (SettingsCacheLine)SettingsCache[key];

                // if this cache line is dirty, we should consider logging an NT event
                if (cacheLine._dirty)
                {
                    LogStaleSettingEvent(key, cacheLine);
                }

                // we've done our duty and notified ops that this process is using
                // stale config data, so return the stale data and get on with it
                return cacheLine._value;
            }

            // if we get here, the setting was not found in the cache
            // try loading it from the local xml settings file first
            // if not found in the file, get it from NPDB and add it to the cache
            string value = GetSettingFromFile(setting);
            if (value == null)
            {
                value = GetSettingFromDB(
                    environment,
                    siteId,
                    server,
                    component,
                    setting);
            }

            SettingsCacheLine newCacheLine = new SettingsCacheLine();
            newCacheLine._value = value;
            newCacheLine._dirty = false;

            // set the last event time to a valid time that's far enough in the
            // past to guarantee that if the line gets dirty, we'll log the
            // event the first time
            newCacheLine._lastEvent = DateTime.MinValue;

            // save the line in the cache
            lock (SettingsCache)
            {
                SettingsCache[key] = newCacheLine;
            }

            return value;
        }

        internal void TryCacheSettings(
            params string[] settings)
        {
            string environment = Environment;
            int siteId = SiteId;
            string server = Server;
            string component = Component;

            StringBuilder settingsToLoad = new StringBuilder();
            FileSettingsReader fileSettings = GetFileSettings(false);

            foreach (string setting in settings)
            {
                SettingsKey key = new SettingsKey();
                key._environment = environment;
                key._siteId = siteId;
                key._server = server;
                key._component = component;
                key._setting = setting;

                if (!SettingsCache.ContainsKey(key))
                {
                    string value = fileSettings != null ? fileSettings.GetSetting(setting) : null;
                    if (value != null)
                    {
                        SettingsCacheLine newCacheLine = new SettingsCacheLine();
                        newCacheLine._value = value;
                        newCacheLine._dirty = false;

                        // set the last event time to a valid time that's far enough in the
                        // past to guarantee that if the line gets dirty, we'll log the
                        // event the first time
                        newCacheLine._lastEvent = DateTime.MinValue;

                        // save the line in the cache
                        lock (SettingsCache)
                        {
                            SettingsCache[key] = newCacheLine;
                        }
                    }
                    else
                    {
                        settingsToLoad.Append(key.ToXmlBatchQueryFormat());
                    }
                }
            }

            if (settingsToLoad.Length > 0)
            {
                LogNpdbSettingAccess();
                
                Hashtable htSettingValue =
                    NpdbAccess.GetBatchSettingsFromDB(NpdbConnectionString, environment, siteId, server, component, settingsToLoad.ToString());

                foreach (SettingsKey key in htSettingValue.Keys)
                {
                    SettingsCacheLine newCacheLine = new SettingsCacheLine();
                    newCacheLine._value = (string)htSettingValue[key];
                    newCacheLine._dirty = false;

                    // set the last event time to a valid time that's far enough in the
                    // past to guarantee that if the line gets dirty, we'll log the
                    // event the first time
                    newCacheLine._lastEvent = DateTime.MinValue;

                    // save the line in the cache
                    lock (SettingsCache)
                    {
                        SettingsCache[key] = newCacheLine;
                    }
                }
            }
        }

        private void LogSettingChangeAcceptedEvent(SettingsKey key, string oldValue, string newValue)
        {
            LogNtEvent(ConfigEvent.Id.COMMON_INFO_30,
                "A setting change has been accepted by this component (details below)\n"
                + "Environment: " + key._environment + "\n"
                + "SiteId: " + key._siteId + "\n"
                + "Server: " + key._server + "\n"
                + "Component: " + key._component + "\n"
                + "Setting: " + key._setting + "\n"
                + "Old Value: " + oldValue + "\n"
                + "New Value: " + newValue + "\n");
        }

        private void LogSettingChangeRejectedEvent(SettingsKey key, string oldValue, string newValue)
        {
            LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_150,
                "A setting change has been rejected by this component (details below)\n"
                + "Environment: " + key._environment + "\n"
                + "SiteId: " + key._siteId + "\n"
                + "Server: " + key._server + "\n"
                + "Component: " + key._component + "\n"
                + "Setting: " + key._setting + "\n"
                + "Old Value: " + oldValue + "\n"
                + "New Value: " + newValue + "\n");
        }

        private void LogSettingChangeNoHandlerEvent(SettingsKey key, string oldValue, string newValue)
        {
            LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_151,
                "A setting change event was not handled by this component (details below)\n"
                + "Environment: " + key._environment + "\n"
                + "SiteId: " + key._siteId + "\n"
                + "Server: " + key._server + "\n"
                + "Component: " + key._component + "\n"
                + "Setting: " + key._setting + "\n"
                + "Old Value: " + oldValue + "\n"
                + "New Value: " + newValue + "\n");
        }

        private void LogSettingChangeExceptionEvent(
            SettingsKey key,
            string oldValue,
        string newValue,
        Exception e)
        {
            LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_152,
                "A setting change handler threw an exception! (details below)\n"
                + "Environment: " + key._environment + "\n"
                + "SiteId: " + key._siteId + "\n"
                + "Server: " + key._server + "\n"
                + "Component: " + key._component + "\n"
                + "Setting: " + key._setting + "\n"
                + "Old Value: " + oldValue + "\n"
                + "New Value: " + newValue + "\n"
                + "Exception Message: " + e.Message + "\n"
                + "Exception Stack Trace: " + e.StackTrace + "\n");
        }

        private void LogStaleSettingEvent(SettingsKey key, SettingsCacheLine cacheLine)
        {
            // check to see how long ago we logged an event about this setting
            if ((DateTime.Now - cacheLine._lastEvent) >= MinEventInterval)
            {
                // time for another event!
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_153,
                    "This component is not using the latest setting information from NPDB (details below)\n"
                    + "Operator action may be required. Please investigate!\n"
                    + "Note: This event will not be logged again for this particular problem until at least "
                    + MinEventInterval.TotalMilliseconds
                    + " milliseconds have elapsed\n"
                    + "Environment: " + key._environment + "\n"
                    + "SiteId: " + key._siteId + "\n"
                    + "Server: " + key._server + "\n"
                    + "Component: " + key._component + "\n"
                    + "Setting: " + key._setting + "\n"
                    + "Stale Value: " + cacheLine._value + "\n"
                    + "New Value: " + cacheLine._newValue + "\n");

                cacheLine._lastEvent = DateTime.Now;
            }
        }
        
        private int GetMinEventInterval()
        {
            return GetMinEventInterval(null);
        }

        private int GetMinEventInterval(FileSettingsReader fileSettings)
        {
            // get the minimum interval that must pass before we'll signal
            // an additional NT event for a particular stale cache line
            string minEventIntervalString = null;
            
            if (fileSettings != null)
            {
                minEventIntervalString = fileSettings.GetSetting(Setting.config_minEventInterval);
            }
            
            if (minEventIntervalString == null)
            {
                minEventIntervalString = GetSettingFromDB(
                    Environment,
                    SiteId,
                    Server,
                    Component,
                    Setting.config_minEventInterval);
                    
                // GetSetting will throw if the setting is not found, we do not
                // need to check for that condition here
            }
            
            // try to parse the event interval as an integer
            int minEventIntervalMilliseconds;
            try
            {
                minEventIntervalMilliseconds = Int32.Parse(minEventIntervalString);
            }
            catch (Exception e)
            {
                ApplicationException ae = new ApplicationException(
                    "Unable to parse '"
                    + minEventIntervalString
                    + "' (config_minEventInterval) as an int", e);
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_154, ae + "\n" + System.Environment.StackTrace);
                throw ae;
            }

            return minEventIntervalMilliseconds;
        }
        
        private int GetCacheRefreshInterval()
        {
            return GetCacheRefreshInterval(null);
        }

        private int GetCacheRefreshInterval(FileSettingsReader fileSettings)
        {
            // get the interval we should check for config updates from npdb
            string cacheRefreshIntervalString = null;
            
            if (fileSettings != null)
            {
                cacheRefreshIntervalString = fileSettings.GetSetting(Setting.config_cacheRefreshInterval);
            }
            
            if (cacheRefreshIntervalString == null)
            {
                cacheRefreshIntervalString = GetSettingFromDB(
                    Environment,
                    SiteId,
                    Server,
                    Component,
                    Setting.config_cacheRefreshInterval);
                    
                // GetSettingFromDB will throw if the setting is not found, we do not
                // need to check for that condition here
            }
            
            // try to parse the refresh interval as an integer
            try
            {
                int cacheRefreshInterval = Int32.Parse(cacheRefreshIntervalString);
                return cacheRefreshInterval;
            }
            catch (Exception e)
            {
                ApplicationException ae = new ApplicationException(
                    "Unable to parse '"
                    + cacheRefreshIntervalString
                    + "' (config_cacheRefreshInterval) as an int", e);
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_155, ae + "\n" + System.Environment.StackTrace);
                throw ae;
            }
        }

        private void LogMinEventInterval()
        {
            LogNtEvent(ConfigEvent.Id.COMMON_INFO_31,
                       "The minimum interval between consecutive stale data events is set to " +
                       MinEventInterval.TotalMilliseconds + " milliseconds\n");
        }

        private void LogCacheRefreshInterval()
        {
            LogNtEvent(ConfigEvent.Id.COMMON_INFO_32,
                       "This component will check for updates in NPDB every " +
                       CacheRefreshInterval + " milliseconds\n");
        }

        private void RefreshSettings()
        {
            // first we should deal with any changes to the two settings
            // that this class consumes
            
            FileSettingsReader fileSettings = GetFileSettings(true);

            // we can simply refresh this one unconditionally, no muss, no fuss
            TimeSpan newMinEventInterval = new TimeSpan(0, 0, 0, 0, GetMinEventInterval(fileSettings));
            if (newMinEventInterval != MinEventInterval)
            {
                MinEventIntervalSet = newMinEventInterval.Milliseconds;
                LogMinEventInterval();
            }

            // get the interval we should check for config updates from npdb
            int newCacheRefreshInterval = GetCacheRefreshInterval(fileSettings);
            if (newCacheRefreshInterval != CacheRefreshInterval)
            {
                CacheRefreshIntervalSet = newCacheRefreshInterval;
                LogCacheRefreshInterval();
                RecreateRefreshTimer();
            }

            // This hashtable will contain settings combined from both file and DB
            Hashtable htSettingValues = new Hashtable();
            
            StringBuilder xml = new StringBuilder();

            int nSettingCount = 0;

            // First - Construct an xml that will be used for batch queries from NPDB
            //       - Ignore those settings that were found in the configuration file
            foreach (DictionaryEntry de in SettingsCache)
            {
                try
                {
                    SettingsKey key = (SettingsKey) de.Key;
                    string value = fileSettings != null ? fileSettings.GetSetting(key._setting) : null;
                    if (value != null)
                    {
                        htSettingValues[key] = value;
                    }
                    else
                    {
                        xml.AppendFormat(key.ToXmlBatchQueryFormat());
                        nSettingCount = nSettingCount + 1;
                    }
                }
                catch (Exception e)
                {
                    LogNtEvent(ConfigEvent.Id.COMMON_SETTING_BATCH_CONSTRUCTION, e.Message);
                }
            }

            // Second - Perform database transaction
            //        - Combine results with those found in the configuration file
            if (xml.Length > 0)
            {
                try
                {
                    string szXmlQuery = xml.ToString();
                    
                    LogNpdbSettingAccess();

                    LogNtEvent(ConfigEvent.Id.COMMON_SETTING_BATCH_COUNT,
                               String.Format("Querying {0} number of setting at once from NPDB", nSettingCount));

                    Hashtable htSettingValuesInNpdb = NpdbAccess.GetBatchSettingsFromDB(
                        NpdbConnectionString, 
                        Environment,
                        SiteId,
                        Server,
                        Component,
                        szXmlQuery
                        );
                        
                    foreach (DictionaryEntry deResult in htSettingValuesInNpdb)
                    {
                        htSettingValues[deResult.Key] = deResult.Value;
                    }
                }
                catch (Exception e)
                {
                    LogNtEvent(ConfigEvent.Id.COMMON_SETTING_BATCH_QUERY, e.Message);
                }
            }

            // Third - Analyze Result
            foreach (DictionaryEntry deResult in htSettingValues)
            {
                SettingsKey key = (SettingsKey) deResult.Key;
                SettingsCacheLine cacheLine = (SettingsCacheLine) SettingsCache[key];

                if (null != cacheLine)
                {
                    string value = (string) deResult.Value;

                    if (value != cacheLine._value)
                    {
                        // if the setting has changed, but Config.SettingChange is null (which means
                        // no delegates have been attached to the Event) then we can't commit
                        // this change to the cache, because we didn't get approval from the
                        // client code. So mark this cache line as dirty, log an event,
                        // and move along to the next cache line
                        if (SettingChange == null)
                        {
                            LockCookie lc = _rwLock.UpgradeToWriterLock(_rwLockTimeout);
                            try
                            {
                                cacheLine._dirty = true;
                                cacheLine._newValue = value;
                            }
                            finally
                            {
                                _rwLock.DowngradeFromWriterLock(ref lc);
                            }

                            LogSettingChangeNoHandlerEvent(key, cacheLine._value, value);
                            continue;
                        }

                        // if we get here, SettingChange is not null, so we
                        // we signal the Event to notifiy the client code of the change.
                        // first we set _approveSettingChange to true, so we can
                        // see if any of the event handlers vetoed the change
                        SettingChangeEventArgs eventArgs
                            = new SettingChangeEventArgs(
                                key._environment,
                                key._siteId,
                                key._server,
                                key._component,
                                key._setting,
                                cacheLine._value,
                                value);
                        _approveSettingsChange = true;

                        // we want to wrap this in a try catch block, so if any
                        // registered handlers throw an exception we behave in
                        // a predictable fashion
                        try
                        {
                            OnSettingChange(eventArgs);
                        }
                        catch (Exception e)
                        {
                            // Log that the exception was thrown and then treat
                            // this as a rejected change
                            LogSettingChangeExceptionEvent(key, cacheLine._value, value, e);
                            _approveSettingsChange = false;
                        }

                        // if _approveSettingChange is still true, then none of the
                        // SettingChangeEventHandler delegates called VetoSettingChange,
                        // therefore we can commit the change to the cache
                        if (_approveSettingsChange)
                        {
                            LogSettingChangeAcceptedEvent(key, cacheLine._value, value);
                            cacheLine._value = value;
                        }
                        else
                        {
                            // if _approveSettingChange is now false, one or more of the
                            // SettingChangeEventHandler delegates called VetoSettingChange,
                            // therefore we should flag this cache line as dirty, and log
                            // an NT event
                            LogSettingChangeRejectedEvent(key, cacheLine._value, value);
                            cacheLine._dirty = true;
                            cacheLine._newValue = value;
                        }
                    }
                    else if (cacheLine._dirty)
                    {
                        LockCookie lc = _rwLock.UpgradeToWriterLock(_rwLockTimeout);
                        try
                        {
                            //  In this case the values are equal but the cacheline is currently marked dirty
                            //  This means the value has been returned to its original value, clear the
                            //  dirty flag.
                            cacheLine._dirty = false;
                            cacheLine._lastEvent = DateTime.MinValue;
                            cacheLine._newValue = null;
                        }
                        finally
                        {
                            _rwLock.DowngradeFromWriterLock(ref lc);
                        }
                    }
                }
            }
        }
        
        private string GetSettingFromFile(
            string setting)
        {
            FileSettingsReader reader = GetFileSettings(false);
            return reader != null ? reader.GetSetting(setting) : null;
        }
        
        private string GetSettingFromDB(
            string environment,
            int siteId,
            string server,
            string component,
            string setting)
        {
            if (environment == null)
            {
                ArgumentNullException ae = new ArgumentNullException("environment");
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_156,
                           ae + "\n" + System.Environment.StackTrace);
                throw ae;
            }

            if (server == null)
            {
                ArgumentNullException ae = new ArgumentNullException("server");
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_157,
                           ae + "\n" + System.Environment.StackTrace);
                throw ae;
            }
            
            LogNpdbSettingAccess();

            SettingsKey key = new SettingsKey(environment, siteId, server, component, setting);

            //this should throw exception for database issues or can't find setting
            Hashtable htSettingValue =
                NpdbAccess.GetBatchSettingsFromDB(NpdbConnectionString, environment, siteId, server, component, key.ToXmlBatchQueryFormat());

            string szValue = (string) htSettingValue[key];

            if (null == szValue)
            {
                //we did not find it - throw the same exception as we did before
                ApplicationException ae =
                    new ApplicationException("Setting '" + setting + "' not found in t_settings table in NPDB");
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_158,
                           ae + "\n" + System.Environment.StackTrace);
                throw ae;
            }

            return szValue;
        }

        public void RegisterDynamicSetting(string setting)
        {
            SettingChangeFilter.RegisterDynamicSetting(setting);
        }

        public void UnRegisterDynamicSetting(string setting)
        {
            SettingChangeFilter.UnRegisterDynamicSetting(setting);
        }

        // use this API to retrieve the values for a multisetting for the
        // current component on the current server
        public string[] GetMultiSetting(
            string multiSetting)
        {
            return GetMultiSettingFromCache(
                Environment,
                SiteId,
                Server,
                Component,
                multiSetting);
        }

        // this API provides a way to explicitly specify the component name
        // may be useful for shared code
        public string[] GetMultiSetting(
            string multiSetting,
            string component)
        {
            return GetMultiSettingFromCache(
                    Environment,
                    SiteId,
                    Server,
                    component,
                    multiSetting);
        }

        // this API provides a way to explicitly specify the environment, siteid, server, and component
        public string[] GetMultiSetting(
            string environment,
            int siteId,
        string server,
        string component,
        string multiSetting)
        {
            return GetMultiSettingFromCache(
                    environment,
                    siteId,
                    server,
                    component,
                    multiSetting);
        }

        // attach MultiSettingChangeEventHandler delegates to this event to be notified
        // when multi settings change in NPDB
        public event MultiSettingChangeEventHandler MultiSettingChange;
        protected void OnMultiSettingChange(MultiSettingChangeEventArgs e)
        {
            if (MultiSettingChange != null)
            {
                MultiSettingChange(null, e);
            }
        }

        // if the MultiSettingChangeEventHandler wants to veto the change, it calls
        // VetoMultiSettingChange, which sets the _approveMultiSettingChange flag to false
        private bool _approveMultiSettingChange = true;
        public void VetoMultiSettingChange()
        {
            // MultiSettingChangeEventHandlers call this method if they
            // need to indicate that the multi setting change indicated by
            // the MultiSettingChangeEventArgs should not be committed
            // to the cache
            _approveMultiSettingChange = false;
        }

        // the multisetting cache is implemented as a hashtable, where the
        // keys are MultiSettingKey objects and the values are MultiSettingCacheLine
        // objects.
        private Hashtable _multiSettingCache;
        private class MultiSettingKey : IComparable
        {
            public string _environment;
            public int _siteId;
            public string _server;
            public string _component;
            public string _multiSetting;

            public override int GetHashCode()
            {
                return unchecked(_environment.GetHashCode()
                    + _siteId.GetHashCode()
                    + _server.GetHashCode()
                    + _component.GetHashCode()
                    + _multiSetting.GetHashCode());
            }

            public override string ToString()
            {
                return _environment + ","
                    + _siteId + ","
                    + _server + ","
                    + _component + ","
                    + _multiSetting;
            }

            public override bool Equals(object o)
            {
                return (CompareTo(o) == 0);
            }

            public int CompareTo(object o)
            {
                if (typeof(MultiSettingKey) != o.GetType())
                {
                    throw new ArgumentException(
                        "Object provided to MultiSettingKey.CompareTo is not a MultiSettingKey");
                }

                MultiSettingKey key = (MultiSettingKey)o;
                int environmentCompare = String.Compare(_environment, key._environment, false, CultureInfo.InvariantCulture);
                if (environmentCompare != 0)
                {
                    return environmentCompare;
                }

                // environments are equal

                if (_siteId < key._siteId)
                {
                    return -1;
                }
                if (_siteId > key._siteId)
                {
                    return 1;
                }
                // siteids are equal

                int serverCompare = String.Compare(_server, key._server, false, CultureInfo.InvariantCulture);
                if (serverCompare != 0)
                {
                    return serverCompare;
                }

                // servers are equal

                int componentCompare = String.Compare(_component, key._component, false, CultureInfo.InvariantCulture);
                if (componentCompare != 0)
                {
                    return componentCompare;
                }

                // components are equal

                return String.Compare(_multiSetting, key._multiSetting, false, CultureInfo.InvariantCulture);
            }
        }

        private class MultiSettingCacheLine
        {
            public string[] _value;
            public bool _dirty;
            public DateTime _lastEvent;
            public string[] _newValue; // used to store the new value if the line is dirty

            public override string ToString()
            {
                return CollectionToString(_value) + ","
                    + _dirty + ","
                    + _lastEvent + ","
                    + (_newValue == null ? "<null>" : CollectionToString(_newValue));
            }
        }

        private Hashtable MultiSettingCache
        {
            get
            {
                if (_multiSettingCache != null)
                {
                    return _multiSettingCache;
                }

                _rwLock.AcquireWriterLock(_rwLockTimeout);
                try
                {
                    if (_multiSettingCache != null)
                    {
                        return _multiSettingCache;
                    }

                    _multiSettingCache = new Hashtable();

                    // make sure the timer callback has been set up
                    RefreshTimerInit();


                    return _multiSettingCache;
                }
                finally
                {
                    _rwLock.ReleaseWriterLock();
                }
            }
        }

        /*
                private string MultiSettingCacheToString()
                {
                    StringBuilder sb = new StringBuilder();

                    foreach (DictionaryEntry de in MultiSettingCache)
                    {
                        MultiSettingKey key = (MultiSettingKey)de.Key;
                        MultiSettingCacheLine cacheLine = (MultiSettingCacheLine)de.Value;

                        sb.Append(key.ToString());
                        sb.Append(":");
                        sb.Append(cacheLine.ToString());
                        sb.Append("\n");
                    }

                    return sb.ToString();
                }
        */

        private string[] GetMultiSettingFromCache(
            string environment,
            int siteId,
            string server,
            string component,
            string multiSetting)
        {
            // validate parameters
            if (environment == null)
            {
                ArgumentNullException ae = new ArgumentNullException("environment");
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_161, ae + "\n" + System.Environment.StackTrace);
                throw ae;
            }

            if (server == null)
            {
                ArgumentNullException ae = new ArgumentNullException("server");
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_162, ae + "\n" + System.Environment.StackTrace);
                throw ae;
            }

            // check the cache for the requested multi setting
            MultiSettingKey key = new MultiSettingKey();
            key._environment = environment;
            key._siteId = siteId;
            key._server = server;
            key._component = component;
            key._multiSetting = multiSetting;

            if (MultiSettingCache.ContainsKey(key))
            {
                MultiSettingCacheLine cacheLine = (MultiSettingCacheLine)MultiSettingCache[key];

                // if this cache line is dirty, we should consider logging an NT event
                if (cacheLine._dirty)
                {
                    LogStaleMultiSettingEvent(key, cacheLine);
                }

                // we've done our duty and notified ops that this process is using
                // stale config data, so return the stale data and get on with it
                return cacheLine._value;
            }

            string[] value = null;

            // if we get here, the multi setting was not found in the cache,
            // try loading it from the local xml settings file first
            if (environment == Environment && siteId == SiteId && server == Server && component == Component)
            {
                value = GetMultiSettingFromFile(multiSetting);
            }
            
            // otherwise get it from the database and add it to the cache
            if (value == null)
            {
                value = GetMultiSettingFromDB(
                    environment,
                    siteId,
                    server,
                    component,
                    multiSetting);
            }

            MultiSettingCacheLine newCacheLine = new MultiSettingCacheLine();

            newCacheLine._value = value;
            newCacheLine._dirty = false;

            // set the last event time to a valid time that's far enough in the
            // past to guarantee that if the line gets dirty, we'll log the
            // event the first time
            newCacheLine._lastEvent = DateTime.MinValue;

            // save the line in the cache
            lock (MultiSettingCache)
            {
                MultiSettingCache[key] = newCacheLine;
            }

            return value;
        }

        private void RefreshMultiSettings()
        {
            FileSettingsReader reader = GetFileSettings(true);
            
            // for each line in the multi settings cache,
            // requery that multi setting from NPDB
            foreach (DictionaryEntry de in MultiSettingCache)
            {
                // requery for the multi setting from the database
                MultiSettingKey key = (MultiSettingKey)de.Key;
                
                string[] value = reader != null ? reader.GetMultiSetting(key._multiSetting) : null;
                
                if (value == null)
                {
                    value = GetMultiSettingFromDB(
                        key._environment,
                        key._siteId,
                        key._server,
                        key._component,
                        key._multiSetting);
                    
                    // GetMultiSetting will throw if the multisetting does not exist
                }

                // has the multisetting changed?
                MultiSettingCacheLine cacheLine = (MultiSettingCacheLine)de.Value;
                if (!CollectionEquals(value, cacheLine._value))
                {
                    // if the multi setting has changed, but Config.MultiSettingChange is null (which means
                    // no delegates have been attached to the Event) then we can't commit
                    // this change to the cache, because we didn't get approval from the
                    // client code. So mark this cache line as dirty, log an event,
                    // and move along to the next cache line
                    if (MultiSettingChange == null)
                    {
                        cacheLine._dirty = true;
                        cacheLine._newValue = value;
                        LogMultiSettingChangeNoHandlerEvent(key, cacheLine._value, value);
                        continue;
                    }

                    // if we get here, MultiSettingChange is not null, so we
                    // we signal the Event to notifiy the client code of the change.
                    // first we set _approveMultiSettingChange to true, so we can
                    // see if any of the event handlers vetoed the change
                    MultiSettingChangeEventArgs eventArgs
                        = new MultiSettingChangeEventArgs(
                            key._environment,
                            key._siteId,
                            key._server,
                            key._component,
                            key._multiSetting,
                            cacheLine._value,
                            value);
                    _approveMultiSettingChange = true;

                    // we want to wrap this in a try catch block, so if any
                    // registered handlers throw an exception we behave in
                    // a predictable fashion
                    try
                    {
                        OnMultiSettingChange(eventArgs);
                    }
                    catch (Exception e)
                    {
                        // Log that the exception was thrown and then treat
                        // this as a rejected change
                        LogMultiSettingChangeExceptionEvent(key, cacheLine._value, value, e);
                        _approveMultiSettingChange = false;
                    }

                    // if _approveMultiSettingChange is still true, then none of the
                    // MultiSettingChangeEventHandler delegates called VetoSettingChange,
                    // therefore we can commit the change to the cache
                    if (_approveMultiSettingChange)
                    {
                        LogMultiSettingChangeAcceptedEvent(key, cacheLine._value, value);
                        cacheLine._value = value;
                    }
                    else
                    {
                        // if _approveMultiSettingChange is now false, one or more of the
                        // MultiSettingChangeEventHandler delegates called VetoMultiSettingChange,
                        // therefore we should flag this cache line as dirty, and log
                        // an NT event
                        LogMultiSettingChangeRejectedEvent(key, cacheLine._value, value);
                        cacheLine._dirty = true;
                        cacheLine._newValue = value;
                    }
                }
                else if (cacheLine._dirty)
                {
                    //  In this case the values are equal but the cacheline is currently marked dirty
                    //  This means the value has been returned to its original value, clear the
                    //  dirty flag.
                    cacheLine._dirty = false;
                    cacheLine._lastEvent = DateTime.MinValue;
                    cacheLine._newValue = null;
                }
            }
        }

        private void LogMultiSettingChangeAcceptedEvent(
            MultiSettingKey key,
            string[] oldValue,
            string[] newValue)
        {
            LogNtEvent(ConfigEvent.Id.COMMON_INFO_33,
                "A multisetting change has been accepted by this component (details below)\n"
                + "Environment: " + key._environment + "\n"
                + "SiteId: " + key._siteId + "\n"
                + "Server: " + key._server + "\n"
                + "Component: " + key._component + "\n"
                + "MultiSetting: " + key._multiSetting + "\n"
                + "Old Value: " + CollectionToString(oldValue) + "\n"
                + "New Value: " + CollectionToString(newValue) + "\n");
        }

        private void LogMultiSettingChangeRejectedEvent(
            MultiSettingKey key,
            string[] oldValue,
            string[] newValue)
        {
            LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_163,
                "A multisetting change has been rejected by this component (details below)\n"
                + "Environment: " + key._environment + "\n"
                + "SiteId: " + key._siteId + "\n"
                + "Server: " + key._server + "\n"
                + "Component: " + key._component + "\n"
                + "MultiSetting: " + key._multiSetting + "\n"
                + "Old Value: " + CollectionToString(oldValue) + "\n"
                + "New Value: " + CollectionToString(newValue) + "\n");
        }

        private void LogMultiSettingChangeNoHandlerEvent(
            MultiSettingKey key,
            string[] oldValue,
            string[] newValue)
        {
            LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_164,
                "A multisetting change event was not handled by this component (details below)\n"
                + "Environment: " + key._environment + "\n"
                + "SiteId: " + key._siteId + "\n"
                + "Server: " + key._server + "\n"
                + "Component: " + key._component + "\n"
                + "MultiSetting: " + key._multiSetting + "\n"
                + "Old Value: " + CollectionToString(oldValue) + "\n"
                + "New Value: " + CollectionToString(newValue) + "\n");
        }

        private void LogMultiSettingChangeExceptionEvent(
            MultiSettingKey key,
            string[] oldValue,
            string[] newValue,
            Exception e)
        {
            LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_165,
                "A multisetting change handler threw an exception! (details below)\n"
                + "Environment: " + key._environment + "\n"
                + "SiteId: " + key._siteId + "\n"
                + "Server: " + key._server + "\n"
                + "Component: " + key._component + "\n"
                + "MultiSetting: " + key._multiSetting + "\n"
                + "Old Value: " + CollectionToString(oldValue) + "\n"
                + "New Value: " + CollectionToString(newValue) + "\n"
                + "Exception Message: " + e.Message + "\n"
                + "Exception Stack Trace: " + e.StackTrace + "\n");
        }

        private void LogStaleMultiSettingEvent(
            MultiSettingKey key,
            MultiSettingCacheLine cacheLine)
        {
            // check to see how long ago we logged an event about this setting
            if ((DateTime.Now - cacheLine._lastEvent) >= MinEventInterval)
            {
                // time for another event!
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_166,
                    "This component is not using the latest multisetting information from NPDB (details below)\n"
                    + "Operator action may be required. Please investigate!\n"
                    + "Note: This event will not be logged again for this particular problem until at least "
                    + MinEventInterval.TotalMilliseconds
                    + " milliseconds have elapsed\n"
                    + "Environment: " + key._environment + "\n"
                    + "SiteId: " + key._siteId + "\n"
                    + "Server: " + key._server + "\n"
                    + "Component: " + key._component + "\n"
                    + "MultiSetting: " + key._multiSetting + "\n"
                    + "Stale Value: " + CollectionToString(cacheLine._value) + "\n"
                    + "New Value: " + CollectionToString(cacheLine._newValue) + "\n");

                // remember the current time...
                LockCookie lc = _rwLock.UpgradeToWriterLock(_rwLockTimeout);
                try
                {
                    cacheLine._lastEvent = DateTime.Now;
                }
                finally
                {
                    _rwLock.DowngradeFromWriterLock(ref lc);
                }
            }
        }
        
        private string[] GetMultiSettingFromFile(
            string multiSetting)
        {
            FileSettingsReader reader = GetFileSettings(false);
            return reader != null ? reader.GetMultiSetting(multiSetting) : null;
        }

        // all the other GetSetting methods call this one to do the real work
        private string[] GetMultiSettingFromDB(
            string environment,
            int siteId,
            string server,
            string component,
            string multiSetting)
        {
            // server is allowed to be null - which simply indicates that the caller is not
            // running on a server that is listed in the xml file, but we have to be
            // given an environment
            if (environment == null)
            {
                ArgumentNullException ae = new ArgumentNullException("environment");
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_167, ae + "\n" + System.Environment.StackTrace);
                throw ae;
            }
            
            LogNpdbSettingAccess();

            // unlike regular settings, multisettings are allowed to exist as a name but
            // have no values assigned to them. i.e. the list of values assigned to a multisetting
            // is allowed to be zero length. Therefore, we approach multisettings in the opposite
            // way we approach settings. First we look for the most specific overrides, working
            // our way back to the default values. If no values were specified at any level, then
            // we return a zero length array of strings.
            using (SqlConnection npdbConnection = new SqlConnection(NpdbConnectionString))
            {
                npdbConnection.Open();

                // Because there may be multiple rows that apply to this component, on this server
                // in this site, we need some precedence rules. vc_component is considered the
                // most significant field, since it is the most granular, followed by
                // vc_server, then i_site_id.
                //
                // The table below show the 8 possible rows returned by p_config_get_setting_overrides
                // in order from higest to lowest precedence.
                //
                // i_site_id,  vc_server,  vc_component
                // <match>,     <match>,    <match>
                // -1,          <match>,    <match>
                // <match>,     ALL,        <match>
                // -1,          ALL,        <match>
                // <match>,     <match>,    ALL
                // -1,          <match>,    ALL
                // <match>,     ALL,        ALL
                // -1,          ALL,        ALL
                //
                // The code below loops through any rows returned, and applies the precedence in
                // the chart above. The most significant result is returned.
                //
                // The stored proc is basically returning 8 possible sets of values, all mixed together.
                // To fix this, we examine each one, and decide which of the 8 sets the row is part of
                // and add it to an ArrayList for that set. Once we've processed all the rows, we
                // find the non-empty set with the highest precedence and return that, if
                // any rows were returned.
                ArrayList matchedComponentServerSite = new ArrayList();
                ArrayList matchedComponentServer = new ArrayList();
                ArrayList matchedComponentSite = new ArrayList();
                ArrayList matchedComponent = new ArrayList();
                ArrayList matchedServerSite = new ArrayList();
                ArrayList matchedServer = new ArrayList();
                ArrayList matchedSite = new ArrayList();
                ArrayList matchedNone = new ArrayList();

                SqlCommand cmd = npdbConnection.CreateCommand();
                cmd.CommandText = "p_config_get_multisetting_overrides";
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = environment;
                cmd.Parameters.Add("@i_site_id", SqlDbType.Int).Value = siteId;
                cmd.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = server ?? "ALL";
                cmd.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = component;
                cmd.Parameters.Add("@vc_multisetting", SqlDbType.NVarChar).Value = multiSetting;
                using (SqlDataReader reader = cmd.ExecuteReader())
                {
                    if (reader != null)
                    {
                        while (reader.Read())
                        {
                            int siteOverride = (Int32) reader["i_site_id"];
                            string serverOverride = ((string) reader["vc_server"]).ToUpper();
                            string componentOverride = (string) reader["vc_component"];
                            string value = (string) reader["vc_value"];

                            if (componentOverride == "ALL")
                            {
                                if (serverOverride == "ALL")
                                {
                                    if (siteOverride == -1)
                                    {
                                        matchedNone.Add(value);
                                    }
                                    else
                                    {
                                        matchedSite.Add(value);
                                    }
                                }
                                else
                                {
                                    if (siteOverride == -1)
                                    {
                                        matchedServer.Add(value);
                                    }
                                    else
                                    {
                                        matchedServerSite.Add(value);
                                    }
                                }
                            }
                            else
                            {
                                if (serverOverride == "ALL")
                                {
                                    if (siteOverride == -1)
                                    {
                                        matchedComponent.Add(value);
                                    }
                                    else
                                    {
                                        matchedComponentSite.Add(value);
                                    }
                                }
                                else
                                {
                                    if (siteOverride == -1)
                                    {
                                        matchedComponentServer.Add(value);
                                    }
                                    else
                                    {
                                        matchedComponentServerSite.Add(value);
                                    }
                                }
                            }
                        }
                    }
                }

                // walk through the ArrayLists in order from highest to
                // lowest precedence. Return the first one to contain any
                // values, if any.
                ArrayList values = null;
                if (matchedComponentServerSite.Count > 0)
                {
                    values = matchedComponentServerSite;
                }
                else if (matchedComponentServer.Count > 0)
                {
                    values = matchedComponentServer;
                }
                else if (matchedComponentSite.Count > 0)
                {
                    values = matchedComponentSite;
                }
                else if (matchedComponent.Count > 0)
                {
                    values = matchedComponent;
                }
                else if (matchedServerSite.Count > 0)
                {
                    values = matchedServerSite;
                }
                else if (matchedServer.Count > 0)
                {
                    values = matchedServer;
                }
                else if (matchedSite.Count > 0)
                {
                    values = matchedSite;
                }
                else if (matchedNone.Count > 0)
                {
                    values = matchedNone;
                }

                // if values is not null, then we have a hit, so return it
                if (values != null)
                {
                    string[] valuesArray = new string[values.Count];
                    values.CopyTo(valuesArray);
                    return valuesArray;
                }

                // if we get here, then there was no applicable data in the
                // t_multisetting_overrides table, so next we check
                // t_environment_type_multisetting_overrides
                cmd = npdbConnection.CreateCommand();
                cmd.CommandText = "p_config_get_environment_type_multisetting_override";
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = environment;
                cmd.Parameters.Add("@vc_multisetting", SqlDbType.NVarChar).Value = multiSetting;

                ArrayList envTypeValues = new ArrayList();
                using (SqlDataReader reader = cmd.ExecuteReader())
                {
                    if (reader != null)
                    {
                        while (reader.Read())
                        {
                            // we have an environment type override, so use it
                            // vc_value is declared as not null
                            envTypeValues.Add(reader["vc_value"]);
                        }
                    }
                }

                // if envTypeValues is not zero length, then we have a hit, so return it
                if (envTypeValues.Count > 0)
                {
                    string[] valuesArray = new string[envTypeValues.Count];
                    envTypeValues.CopyTo(valuesArray);
                    return valuesArray;
                }

                // finally check the t_multisettings table
                cmd = npdbConnection.CreateCommand();
                cmd.CommandText = "p_config_get_multisetting";
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@vc_multisetting", SqlDbType.NVarChar).Value = multiSetting;

                ArrayList defaultValues = new ArrayList();
                using (SqlDataReader reader = cmd.ExecuteReader())
                {
                    if (reader != null)
                    {
                        while (reader.Read())
                        {
                            // we have an environment type override, so use it
                            // vc_value is declared as not null
                            defaultValues.Add(reader["vc_value"]);
                        }
                    }
                }

                // if defaultValues is not null, then we have a hit, so return it
                if (defaultValues.Count != 0)
                {
                    string[] valuesArray = new string[defaultValues.Count];
                    defaultValues.CopyTo(valuesArray);
                    return valuesArray;
                }
            }

            // if we get here, then there were no applicable multisetting rows
            // anywhere, so return a zero length array
            return new string[0];
        }

        // the following methods are intended for use by Setup and not services
        public string[] GetInstallUnitListByServer(
            string server)
        {
            return GetInstallUnitListByServer(Environment, server);
        }

        public InstallUnitInfo[] GetInstallUnitInfoByServer(
            string server)
        {
            throw new Exception("not yet implemented");
        }

        public string[] GetInstallUnitListByServer(
            string environment,
            string server)
        {
            if (environment == null)
            {
                ArgumentNullException ae = new ArgumentNullException("environment");
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_168, ae + "\n" + System.Environment.StackTrace);
                throw ae;
            }
            if (server == null)
            {
                ArgumentNullException ae = new ArgumentNullException("server");
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_169, ae + "\n" + System.Environment.StackTrace);
                throw ae;
            }

            ArrayList installUnitList = new ArrayList();

            using (SqlConnection npdbConnection = new SqlConnection(NpdbConnectionString))
            {
                npdbConnection.Open();

                SqlCommand cmd = npdbConnection.CreateCommand();

                cmd.CommandText = "p_config_get_install_unit_list_by_server";
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = environment;
                cmd.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = server;

                using (SqlDataReader reader = cmd.ExecuteReader())
                {
                    if (reader != null)
                    {
                        while (reader.Read())
                        {
                            string installUnitString = (string) reader["vc_install_unit"];

                            // add it to the list
                            installUnitList.Add(installUnitString);
                        }
                    }
                }
            }

            installUnitList.Sort();

            string[] installUnits = new string[installUnitList.Count];
            installUnitList.CopyTo(installUnits);
            return installUnits;
        }

        public InstallUnitInfo[] GetInstallUnitInfoByServer(
            string environment,
            string server)
        {
            throw new Exception("not yet implemented");
        }

        public IInstallUnitInfo GetInstallUnit(string installUnit)
        {
            // default constructor inits everything to null
            InstallUnitInfo installUnitInfo = new InstallUnitInfo();

            using (SqlConnection npdbConnection = new SqlConnection(NpdbConnectionString))
            {
                npdbConnection.Open();

                SqlCommand cmd = npdbConnection.CreateCommand();

                cmd.CommandText = "p_config_get_install_unit";
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@vc_install_unit", SqlDbType.NVarChar).Value = installUnit;

                using (SqlDataReader reader = cmd.ExecuteReader())
                {
                    if(reader != null)
                    {
                        if (!reader.Read())
                        {
                            ApplicationException ae =
                                new ApplicationException("install unit " + installUnit + " not found in npdb");
                            LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_171,
                                       ae + "\n" + System.Environment.StackTrace);
                            throw ae;
                        }

                        if (reader["vc_info1"] != DBNull.Value)
                        {
                            installUnitInfo.Info1 = (string)reader["vc_info1"];
                        }
                        if (reader["vc_info2"] != DBNull.Value)
                        {
                            installUnitInfo.Info2 = (string)reader["vc_info2"];
                        }
                        if (reader["vc_info3"] != DBNull.Value)
                        {
                            installUnitInfo.Info3 = (string)reader["vc_info3"];
                        }
                        if (reader["vc_info4"] != DBNull.Value)
                        {
                            installUnitInfo.Info4 = (string)reader["vc_info4"];
                        }
                    }
                }
            }

            return installUnitInfo;
        }

        public string[] GetComponentListByServer(
            string server)
        {
            return GetComponentListByServer(Environment, server);
        }

        public ComponentInfo[] GetComponentInfoByServer(
            string server)
        {
            throw new Exception("not yet implemented");
        }

        public string[] GetComponentListByServer(
            string environment,
            string server)
        {
            if (environment == null)
            {
                ArgumentNullException ae = new ArgumentNullException("environment");
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_172, ae + "\n" + System.Environment.StackTrace);
                throw ae;
            }
            if (server == null)
            {
                ArgumentNullException ae = new ArgumentNullException("server");
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_173, ae + "\n" + System.Environment.StackTrace);
                throw ae;
            }

            SortedList componentList = new SortedList();

            using (SqlConnection npdbConnection = new SqlConnection(NpdbConnectionString))
            {
                npdbConnection.Open();

                SqlCommand cmd = npdbConnection.CreateCommand();

                cmd.CommandText = "p_config_get_component_list_by_server";
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = environment;
                cmd.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = server;

                using (SqlDataReader reader = cmd.ExecuteReader())
                {
                    if (reader != null)
                    {
                        while (reader.Read())
                        {
                            string component = (string) reader["vc_component"];

                            // add it to the list, use the string value as the
                            // key so we get the list in alphabetical order
                            componentList.Add(component, component);
                        }
                    }
                }
            }

            // convert the sorted list to an array of Components
            string[] components = new string[componentList.Count];
            componentList.Values.CopyTo(components, 0);
            return components;
        }


        public bool CheckServerConfiguration(string environment, string server, string component)
        {
            bool hasComponent = false;

            if (String.IsNullOrEmpty(server))
            {
                throw new ArgumentException("Server parameter cannot be empty. Current value - {0} ", server);
            }

            if (String.IsNullOrEmpty(environment))
            {
                throw new ArgumentException("Environment parameter cannot be empty. Current value - {0} ", environment);
            }

            //Get the list of components for the Server, Environment
            string[] components = GetComponentListByServer(environment, server);


            //If component param is empty, we dont check the entries. We just check to make sure the Server has atleast one component.
            if ((string.IsNullOrEmpty(component)) || (String.Compare(component, ".", true) == 0))
            {
                if (components.Length > 0)
                {
                    hasComponent = true;
                }
            }
            else
            {

                for (int i = 0; i < components.Length; i++)
                {
                    //Console.WriteLine(" \t {0}, {1} , {2} ", environment, server, aComponent);
                    string aComponent = components[i];
                    if (String.Equals(aComponent, component, StringComparison.CurrentCultureIgnoreCase))
                    {
                        hasComponent = true;
                        break;
                    }
                }
            }

            return hasComponent;
        }

        public ComponentInfo[] GetComponentInfoByServer(
            string environment,
            string server)
        {
            throw new Exception("not yet implemented");
        }

        private bool ComponentExists(string component)
        {
            if (component == config.Component.unknown)
            {
                ArgumentException ae = new ArgumentException("Component.unknown cannot be passed to Config.ComponentExists", "component");
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_175, ae + "\n" + System.Environment.StackTrace);
                throw ae;
            }

            using (SqlConnection npdbConnection = new SqlConnection(NpdbConnectionString))
            {
                npdbConnection.Open();

                SqlCommand cmd = npdbConnection.CreateCommand();
                cmd.CommandText = "p_config_get_component";
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = Environment;
                cmd.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = component;

                using (SqlDataReader reader = cmd.ExecuteReader())
                {
                    return reader == null ? false : reader.Read();
                }
            }
        }

        public IComponentInfo GetComponent(string component)
        {
            if (component == config.Component.unknown)
            {
                ArgumentException ae =
                    new ArgumentException("Component.unknown cannot be passed to Config.GetComponent", "component");
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_175, ae + "\n" + System.Environment.StackTrace);
                throw ae;
            }

            // default constructor inits everything to null or invalid values
            ComponentInfo componentInfo = new ComponentInfo();

            using (SqlConnection npdbConnection = new SqlConnection(NpdbConnectionString))
            {
                npdbConnection.Open();

                SqlCommand cmd = npdbConnection.CreateCommand();
                cmd.CommandText = "p_config_get_component";
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = Environment;
                cmd.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = component;

                using (SqlDataReader reader = cmd.ExecuteReader())
                {
                    if (reader == null || !reader.Read())
                    {
                        ArgumentException ae =
                            new ArgumentException("component " + component + " not found in npdb");
                        LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_176,
                                   ae + "\n" + System.Environment.StackTrace);
                        throw ae;
                    }

                    if (reader["vc_executable"] != DBNull.Value)
                    {
                        componentInfo.Executable = (string)reader["vc_executable"];
                    }
                    if (reader["vc_installer"] != DBNull.Value)
                    {
                        string installerString = (string)reader["vc_installer"];
                        try
                        {
                            componentInfo.Installer = (Installer)Enum.Parse(typeof(Installer), installerString);
                        }
                        catch (ArgumentException)
                        {
                            // this may be a new installer type that was added after this
                            // component was created, map it to "unspecified" and warn
                            LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_177,
                                       "Installer of '" + installerString +
                                       "' returned by p_config_get_component " +
                                       "is not recognized by this component and will be ignored.");
                            componentInfo.Installer = Installer.unspecified;
                        }
                    }
                    if (reader["vc_username"] != DBNull.Value)
                    {
                        componentInfo.Username = (string)reader["vc_username"];
                        componentInfo.Username =
                            componentInfo.Username.Replace("%COMPUTERNAME%", System.Environment.MachineName);
                    }
                    if (reader["vc_password"] != DBNull.Value)
                    {
                        componentInfo.Password = (string)reader["vc_password"];
                    }
                    if (reader["vc_info1"] != DBNull.Value)
                    {
                        componentInfo.Info1 = (string)reader["vc_info1"];
                    }
                    if (reader["vc_info2"] != DBNull.Value)
                    {
                        componentInfo.Info2 = (string)reader["vc_info2"];
                    }
                }
            }

            return componentInfo;
        }

        public string[] GetInterfaceListByServer(
            string server)
        {
            return GetInterfaceListByServer(Environment, server);
        }

        public InterfaceInfo[] GetInterfaceInfoByServer(
            string server)
        {
            throw new Exception("not yet implemented");
        }

        public string[] GetInterfaceListByServer(
            string environment,
            string server)
        {
            if (environment == null)
            {
                ArgumentNullException ae = new ArgumentNullException("environment");
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_178, ae + "\n" + System.Environment.StackTrace);
                throw ae;
            }
            if (server == null)
            {
                ArgumentNullException ae = new ArgumentNullException("server");
                LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_179, ae + "\n" + System.Environment.StackTrace);
                throw ae;
            }

            SortedList interfaceList = new SortedList();

            using (SqlConnection npdbConnection = new SqlConnection(NpdbConnectionString))
            {
                npdbConnection.Open();

                SqlCommand cmd = npdbConnection.CreateCommand();

                cmd.CommandText = "p_config_get_interface_list_by_server";
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = environment;
                cmd.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = server;

                using (SqlDataReader reader = cmd.ExecuteReader())
                {
                    if (reader != null)
                    {
                        while (reader.Read())
                        {
                            string interfaceString = (string) reader["vc_interface"];

                            // add it to the list
                            interfaceList.Add(interfaceString, interfaceString);
                        }
                    }
                }
            }

            // convert the sorted list to an array
            string[] interfaces = new string[interfaceList.Count];
            interfaceList.Values.CopyTo(interfaces, 0);
            return interfaces;
        }

        // also used by SG, in addition to setup
        public InterfaceInfo[] GetInterfaceInfoByServer(
            string environment,
            string server)
        {
            throw new Exception("not yet implemented");
        }

        // attach GameConfigChangeEventHandler delegates to this event to be notified
        // when t_game_config is modified in NPDB
        public event GameConfigChangeEventHandler GameConfigChange;
        protected void OnGameConfigChange(EventArgs e)
        {
            if (GameConfigChange != null)
            {
                GameConfigChange(null, e);
            }
        }

        private void RefreshGameConfig()
        {
            LogGameConfigChangeEvent();
            try
            {
                OnGameConfigChange(EventArgs.Empty);
            }
            catch (Exception e)
            {
                // note the exception was thrown
                LogGameConfigChangeExceptionEvent(e);
            }
        }

        private void LogGameConfigChangeEvent()
        {
            //LogNtEvent(ConfigEvent.Id.COMMON_INFO_34,
            //    "This component has been notified of a change to t_game_config in NPDB\n"
            //    + "Environment: " + Environment + "\n"
            //    + "SiteId: " + SiteId + "\n"
            //    + "Server: " + Server + "\n"
            //    + "Component: " + Component + "\n");
        }

        private void LogGameConfigChangeExceptionEvent(Exception e)
        {
            LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_181,
                "A game config change handler threw an exception! (details below)\n"
                + "Environment: " + Environment + "\n"
                + "SiteId: " + SiteId + "\n"
                + "Server: " + Server + "\n"
                + "Component: " + Component + "\n"
                + "Exception Message: " + e.Message + "\n"
                + "Exception Stack Trace: " + e.StackTrace + "\n");
        }

        // attach XdelaySettingsChangeEventHandler delegates to this event to be notified
        // when t_xdelay_settings is modified in NPDB
        public event XdelaySettingsChangeEventHandler XdelaySettingsChange;
        protected void OnXdelaySettingsChange(EventArgs e)
        {
            if (XdelaySettingsChange != null)
            {
                XdelaySettingsChange(null, e);
            }
        }

        private void RefreshXDelaySettings()
        {
            LogXdelaySettingsChangeEvent();
            try
            {
                OnXdelaySettingsChange(EventArgs.Empty);
            }
            catch (Exception e)
            {
                // note the exception was thrown
                LogXdelaySettingsChangeExceptionEvent(e);
            }
        }

        private void LogXdelaySettingsChangeEvent()
        {
            //LogNtEvent(ConfigEvent.Id.COMMON_INFO_35,
            //    "This component has been notified of a change to t_xdelay_settings in NPDB\n"
            //    + "Environment: " + Environment + "\n"
            //    + "SiteId: " + SiteId + "\n"
            //    + "Server: " + Server + "\n"
            //    + "Component: " + Component + "\n");
        }

        private void LogXdelaySettingsChangeExceptionEvent(Exception e)
        {
            LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_182,
                "An xdelay settings change handler threw an exception! (details below)\n"
                + "Environment: " + Environment + "\n"
                + "SiteId: " + SiteId + "\n"
                + "Server: " + Server + "\n"
                + "Component: " + Component + "\n"
                + "Exception Message: " + e.Message + "\n"
                + "Exception Stack Trace: " + e.StackTrace + "\n");
        }

        // attach XrlMappingsChangeEventHandler delegates to this event to be notified
        // when t_xdelay_settings is modified in NPDB
        public event XrlMappingsChangeEventHandler XrlMappingsChange;
        protected void OnXrlMappingsChange(EventArgs e)
        {
            if (XrlMappingsChange != null)
            {
                XrlMappingsChange(null, e);
            }
        }

        private void RefreshXrlMappings()
        {
            LogXrlMappingsChangeEvent();
            try
            {
                OnXrlMappingsChange(EventArgs.Empty);
            }
            catch (Exception e)
            {
                // note the exception was thrown
                LogXrlMappingsChangeExceptionEvent(e);
            }
        }

        private void LogXrlMappingsChangeEvent()
        {
            //LogNtEvent(ConfigEvent.Id.COMMON_INFO_36,
            //    "This component has been notified of a change to t_xrl_virtual_interface_mappings in NPDB\n"
            //    + "Environment: " + Environment + "\n"
            //    + "SiteId: " + SiteId + "\n"
            //    + "Server: " + Server + "\n"
            //    + "Component: " + Component + "\n");
        }

        private void LogXrlMappingsChangeExceptionEvent(Exception e)
        {
            LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_183,
                "An xrl mappings change handler threw an exception! (details below)\n"
                + "Environment: " + Environment + "\n"
                + "SiteId: " + SiteId + "\n"
                + "Server: " + Server + "\n"
                + "Component: " + Component + "\n"
                + "Exception Message: " + e.Message + "\n"
                + "Exception Stack Trace: " + e.StackTrace + "\n");
        }

        // attach HealthMappingsChangeEventHandler delegates to this event to be notified
        // when t_health_mappings is modified in NPDB
        public event HealthMappingsChangeEventHandler HealthMappingsChange;
        protected void OnHealthMappingsChange(EventArgs e)
        {
            if (HealthMappingsChange != null)
            {
                HealthMappingsChange(null, e);
            }
        }

        private void RefreshHealthMappings()
        {
            LogHealthMappingsChangeEvent();
            try
            {
                OnHealthMappingsChange(EventArgs.Empty);
            }
            catch (Exception e)
            {
                // note the exception was thrown
                LogHealthMappingsChangeExceptionEvent(e);
            }
        }

        private void LogHealthMappingsChangeEvent()
        {
            //LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_INFO_HEALTH_CHANGE,
            //    "This component has been notified of a change to t_health_mappings in NPDB\n"
            //    + "Environment: " + Environment + "\n"
            //    + "SiteId: " + SiteId + "\n"
            //    + "Server: " + Server + "\n"
            //    + "Component: " + Component + "\n");
        }

        private void LogHealthMappingsChangeExceptionEvent(Exception e)
        {
            LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_HEALTH_CHANGE,
                "A health mappings change handler threw an exception! (details below)\n"
                + "Environment: " + Environment + "\n"
                + "SiteId: " + SiteId + "\n"
                + "Server: " + Server + "\n"
                + "Component: " + Component + "\n"
                + "Exception Message: " + e.Message + "\n"
                + "Exception Stack Trace: " + e.StackTrace + "\n");
        }

        #region Config Blob Refresh

        protected void RefreshConfigBlobs()
        {
            LogConfigBlobsChangeEvent();
            try
            {
                OnConfigBlobsChange(EventArgs.Empty);
            }
            catch (Exception e)
            {
                LogConfigBlobsChangeExceptionEvent(e);
            }
        }

        private void LogConfigBlobsChangeEvent()
        {
            LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_INFO_CONFIG_BLOBS_CHANGE,
                "This component has been notified of a change to t_config_blobs in NPDB\n"
                + "Environment: " + Environment + "\n"
                + "SiteId: " + SiteId + "\n"
                + "Server: " + Server + "\n"
                + "Component: " + Component + "\n");
        }

        private void LogConfigBlobsChangeExceptionEvent(Exception e)
        {
            LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_INFO_CONFIG_BLOBS_CHANGE,
                "A config_blobs change handler threw an exception! (details below)\n"
                + "Environment: " + Environment + "\n"
                + "SiteId: " + SiteId + "\n"
                + "Server: " + Server + "\n"
                + "Component: " + Component + "\n"
                + "Exception Message: " + e.Message + "\n"
                + "Exception Stack Trace: " + e.StackTrace + "\n"
                );
        }

        public virtual event ConfigBlobChangeEventHandler ConfigBlobChange;

        protected void OnConfigBlobsChange(EventArgs e)
        {
            if (ConfigBlobChange != null)
            {
                ConfigBlobChange(null, e);
            }
        }

        #endregion

        #region ETX Manifest Refresh

        protected void RefreshEtxManifest()
        {
            LogEtxManifestChangeEvent();
            try
            {
                OnEtxManifestChange(EventArgs.Empty);
            }
            catch (Exception e)
            {
                LogEtxManifestChangeExceptionEvent(e);
            }
        }

        private void LogEtxManifestChangeEvent()
        {
            //LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_INFO_ETX_MANIFEST_CHANGE,
            //    "This component has been notified of a change to the etx manifest in NPDB\n"
            //    + "Environment: " + Environment + "\n"
            //    + "SiteId: " + SiteId + "\n"
            //    + "Server: " + Server + "\n"
            //    + "Component: " + Component + "\n");
        }

        private void LogEtxManifestChangeExceptionEvent(Exception e)
        {
            LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_INFO_ETX_MANIFEST_CHANGE,
                "A etx manifest change handler threw an exception! (details below)\n"
                + "Environment: " + Environment + "\n"
                + "SiteId: " + SiteId + "\n"
                + "Server: " + Server + "\n"
                + "Component: " + Component + "\n"
                + "Exception Message: " + e.Message + "\n"
                );
        }

        public virtual event EtxManifestChangeEventHandler EtxManifestChange;

        protected void OnEtxManifestChange(EventArgs e)
        {
            if (EtxManifestChange != null)
            {
                EtxManifestChange(null, e);
            }
        }

        #endregion

        // attach LiveRegistrySettingsChangeEventHandler delegates to this event to be notified
        // when t_live_registry_settings is modified in NPDB
        public event LiveRegistrySettingsChangeEventHandler LiveRegistrySettingsChange;
        protected void OnLiveRegistrySettingsChange(EventArgs e)
        {
            if (LiveRegistrySettingsChange != null)
            {
                LiveRegistrySettingsChange(null, e);
            }
        }

        private void RefreshLiveRegistrySettings()
        {
            LogLiveRegistrySettingsChangeEvent();
            try
            {
                OnLiveRegistrySettingsChange(EventArgs.Empty);
            }
            catch (Exception e)
            {
                // note the exception was thrown
                LogLiveRegistrySettingsChangeExceptionEvent(e);
            }
        }

        private void LogLiveRegistrySettingsChangeEvent()
        {
            //LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_INFO_LIVE_REGISTRY_SETTINGS_CHANGE,
            //    "This component has been notified of a change to t_live_registry_settings in NPDB\n"
            //    + "Environment: " + Environment + "\n"
            //    + "SiteId: " + SiteId + "\n"
            //    + "Server: " + Server + "\n"
            //    + "Component: " + Component + "\n");
        }

        private void LogLiveRegistrySettingsChangeExceptionEvent(Exception e)
        {
            LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_LIVE_REGISTRY_SETTINGS_CHANGE,
                "A live_registry_settings change handler threw an exception! (details below)\n"
                + "Environment: " + Environment + "\n"
                + "SiteId: " + SiteId + "\n"
                + "Server: " + Server + "\n"
                + "Component: " + Component + "\n"
                + "Exception Message: " + e.Message + "\n"
                + "Exception Stack Trace: " + e.StackTrace + "\n");
        }

        // attach ServiceKeysChangeEventHandler delegates to this event to be notified
        // when t_service_keys is modified in NPDB
        public event ServiceKeysChangeEventHandler ServiceKeysChange;
        protected void OnServiceKeysChange(EventArgs e)
        {
            if (ServiceKeysChange != null)
            {
                ServiceKeysChange(null, e);
            }
        }

        private void RefreshServiceKeys()
        {
            LogServiceKeysChangeEvent();

            try
            {
                OnServiceKeysChange(EventArgs.Empty);
            }
            catch (Exception e)
            {
                // note the exception was thrown
                LogServiceKeysChangeExceptionEvent(e);
            }
        }

        private void LogServiceKeysChangeEvent()
        {
            //LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_INFO_SERVICE_KEYS_CHANGE,
            //    "This component has been notified of a change to t_service_keys in NPDB\n"
            //    + "Environment: " + Environment + "\n"
            //    + "SiteId: " + SiteId + "\n"
            //    + "Server: " + Server + "\n"
            //    + "Component: " + Component + "\n");
        }

        private void LogServiceKeysChangeExceptionEvent(Exception e)
        {
            LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_SERVICE_KEYS_CHANGE,
                "A service keys change handler threw an exception! (details below)\n"
                + "Environment: " + Environment + "\n"
                + "SiteId: " + SiteId + "\n"
                + "Server: " + Server + "\n"
                + "Component: " + Component + "\n"
                + "Exception Message: " + e.Message + "\n"
                + "Exception Stack Trace: " + e.StackTrace + "\n");
        }

        private void LogNtEvent(ConfigEvent.Id eventId, string message)
        {
            if (HandleLogEvent != null)
            {
                HandleLogEvent((uint)eventId, message, ComponentName);
            }
            else
            {
                LogNtEvent(ComponentName, message, eventId);
            }
        }

        public static string CollectionToString(ICollection items)
        {
            if (items == null)
            {
                return "<null>";
            }

            StringBuilder sb = new StringBuilder();
            sb.Append("{");
            foreach (Object o in items)
            {
                sb.Append(o.ToString());
                sb.Append(",");
            }
            // pop the last "," off the string, but only if there
            // was at least one element in the collection
            if (items.Count > 0)
            {
                sb.Remove(sb.Length - 1, 1);
            }
            sb.Append("}");
            return sb.ToString();
        }

        // note: do not use this method with a type of collection where
        // order is not deterministic. This method considers two collections
        // equal if, when you enumerate through each collection in lockstep,
        // each element of the collection compares equal. This will work fine
        // for objects of type Array, ArrayList, SortedList, Queue, and any
        // other class that implements ICollection where the order is 
        // deterministic in some fashion. For example, you may find that the
        // results of this method are unpredictable when used on Hashtable objects
        private static bool CollectionEquals(ICollection items1, ICollection items2)
        {
            // if both are null, then they are considered equal
            if (items1 == null && items2 == null)
            {
                return true;
            }

            // if either one by itself is null, they are not considered equal
            if (items1 == null || items2 == null)
            {
                return false;
            }

            // if they are not the same size, they are not considered equal
            if (items1.Count != items2.Count)
            {
                return false;
            }

            // if each corresponding element does compare equal (according to Object.Equals)
            // note, since we've already checked the length, this loop assumes the lengths
            // are equal
            IEnumerator enum1 = items1.GetEnumerator();
            IEnumerator enum2 = items2.GetEnumerator();
            while (enum1.MoveNext())
            {
                enum2.MoveNext();
                if (!enum1.Current.Equals(enum2.Current))
                {
                    return false;
                }
            }

            // if we get here, all the elements matched, so the collections are considered equal
            return true;
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="environment"></param>
        /// <param name="server"></param>
        /// <param name="iface"></param>
        public void AddServerInterfaceConfiguration(
            string environment,
            string server,
            string iface)
        {
            //Parameter Validation
            ValidateParameterIsNull(environment, "environment", ConfigEvent.Id.COMMON_CONFIG_107);
            ValidateParameterIsNull(server, "server", ConfigEvent.Id.COMMON_CONFIG_108);
            ValidateParameterIsNull(iface, "interface", ConfigEvent.Id.COMMON_CONFIG_108);


            if (iface != "-")
            {
                //Inputs can be ; delimited
                char[] seperator = new char[] { ';' };
                string[] servers = server.Split(seperator, StringSplitOptions.RemoveEmptyEntries);
                string[] interfaces = iface.Split(seperator, StringSplitOptions.RemoveEmptyEntries);

                foreach (string aServer in servers)
                {
                    foreach (string anInterface in interfaces)
                    {
                        AddSingleServerInterface(environment, aServer, anInterface);
                    }
                }
            }
        }

        private void AddSingleServerInterface(string environment, string server, string iface)
        {
            //Check the cache if the (environment, server, iface) combo exists already
            // Issue: GetInterfaceFromDB() will THROW exception if there is no NPDB entry for that "interface on the given server"
            try
            {
                GetInterface(environment, server, iface);
            }
            catch (ApplicationException ae)
            {
                if (ae.Message.Contains("not present on server"))
                {
                    //If NOT EXIST - Create t-server_interface cache.

                    //Add entry in t_server_interfaces
                    IInterfaceInfo interfaceInfo = AddServerInterfaceToDB(environment, server, iface);

                    //Add to InterfaceCache
                    InterfaceKey key = new InterfaceKey(environment, server, iface);
                    AddToInterfaceCache(key, interfaceInfo);
                }
                else
                {
                    //Some other error, so just bubble it up
                    throw new ApplicationException(String.Format("Unable to add configuration for interface {0} on server {1}", iface, server)
                                                    , ae);
                }
            }
            return;
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="environment"></param>
        /// <param name="server"></param>
        /// <param name="iface"></param>
        public void RemoveServerInterfaceConfiguration(string environment,
            string server,
        string iface)
        {

            //Parameter Validation
            ValidateParameterIsNull(environment, "environment", ConfigEvent.Id.COMMON_CONFIG_107);
            ValidateParameterIsNull(server, "server", ConfigEvent.Id.COMMON_CONFIG_108);
            ValidateParameterIsNull(iface, "interface", ConfigEvent.Id.COMMON_CONFIG_108);


            if (iface == "-") return;

            //Inputs can be ; delimited
            char[] separator = new char[] { ';' };
            string[] servers = server.Split(separator, StringSplitOptions.RemoveEmptyEntries);
            string[] interfaces = iface.Split(separator, StringSplitOptions.RemoveEmptyEntries);

            foreach (string aServer in servers)
            {
                foreach (string anInterface in interfaces)
                {
                    RemoveSingleServerInterface(environment, aServer, anInterface);
                }
            }
        }


        private void RemoveSingleServerInterface(string environment, string server, string iface)
        {

            //Currently checks are done in the sproc
            //Check if Interface exists
            //Check if Server exists

            // Ignoring

            //Check the cache if the (environment, server, iface) combo exists already. If not GetInterface() throws exception
            //IInterfaceInfo interfaceInfo = GetInterface(environment, server, iface);

            //if (interfaceInfo != null)
            {
                //Remove From DB
                RemoveServerInterfaceFromDB(environment, server, iface);

                //Remove from Cache
                InterfaceKey key = new InterfaceKey(environment, server, iface);
                RemoveFromInterfaceCache(key);
            }


        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="userrole"></param>
        /// <returns></returns>
        public IUserRole GetUserRole(string userrole)
        {
            return GetUserRole(Environment, userrole);
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="environment"></param>
        /// <param name="userrole"></param>
        /// <returns></returns>
        public IUserRole GetUserRole(string environment, string userrole)
        {
            using (SqlConnection npdbConnection = new SqlConnection(NpdbConnectionString))
            {
                npdbConnection.Open();

                SqlCommand cmd = npdbConnection.CreateCommand();

                cmd.CommandText = "p_config_get_user_role";
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = environment;
                cmd.Parameters.Add("@vc_user_role", SqlDbType.NVarChar).Value = userrole;

                using (SqlDataReader reader = cmd.ExecuteReader())
                {
                    if (reader == null || !reader.Read())
                    {
                        ApplicationException ae =
                            new ApplicationException("user role " + userrole + " not found in npdb");
                        LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_171,
                                   ae + "\n" + System.Environment.StackTrace);
                        throw ae;
                    }

                    UserRole role = new UserRole();

                    role.Name = (string) reader["vc_user_role"];

                    if (reader["vc_username"] != DBNull.Value)
                    {
                        String userName = (string) reader["vc_username"];
                        role.FullUsername = userName.Replace("%COMPUTERNAME%", System.Environment.MachineName);
                    }
                    if (reader["vc_password"] != DBNull.Value)
                    {
                        role.Password = (string) reader["vc_password"];
                    }

                    return role;
                }
            }
        }

        #region Parameter Validation


        private void ValidateParameterIsNull(string value, string description, ConfigEvent.Id eventId)
        {
            if (value == null)
            {
                ArgumentNullException e = new ArgumentNullException(description);
                LogNtEvent(eventId, e + "\n" + System.Environment.StackTrace);
                throw e;
            }
        }

        #endregion Parameter Validation


        #region Data Access Methods


        private SqlDataReader GetServerInterfaceOverrides(SqlConnection npdbConnection, string server, string iface)
        {
            SqlCommand cmd = npdbConnection.CreateCommand();
            cmd.CommandText = "p_config_get_server_interface_overrides";
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = Environment;
            cmd.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = server;
            cmd.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = iface;
            SqlDataReader reader = cmd.ExecuteReader();

            return reader;
        }

        private SqlDataReader GetEnvironmentInterfaceOverrides(SqlConnection npdbConnection, string iface)
        {
            SqlCommand cmd = npdbConnection.CreateCommand();
            cmd.CommandText = "p_config_get_environment_interface_overrides";
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = Environment;
            cmd.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = iface;
            SqlDataReader reader = cmd.ExecuteReader();

            return reader;
        }

        private SqlDataReader GetEnvironmentTypeInterfaceOverrides(SqlConnection npdbConnection, string iface)
        {
            SqlCommand cmd = npdbConnection.CreateCommand();
            cmd.CommandText = "p_config_get_environment_type_interface_overrides";
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = Environment;
            cmd.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = iface;
            SqlDataReader reader = cmd.ExecuteReader();

            return reader;
        }


        private static SqlDataReader AddServerInterface(SqlConnection npdbConnection, string environment, string server, string iface)
        {
            SqlCommand cmd = npdbConnection.CreateCommand();
            cmd.CommandText = "p_config_add_server_interface";
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add("@environment", SqlDbType.NVarChar).Value = environment;
            cmd.Parameters.Add("@server", SqlDbType.NVarChar).Value = server;
            cmd.Parameters.Add("@interface", SqlDbType.NVarChar).Value = iface;
            SqlDataReader reader = cmd.ExecuteReader();

            return reader;
        }

        private static void RemoveServerInterface(SqlConnection npdbConnection, string environment, string server, string iface)
        {
            SqlCommand cmd = npdbConnection.CreateCommand();
            cmd.CommandText = "p_config_remove_server_interface";
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add("@environment", SqlDbType.NVarChar).Value = environment;
            cmd.Parameters.Add("@server", SqlDbType.NVarChar).Value = server;
            cmd.Parameters.Add("@interface", SqlDbType.NVarChar).Value = iface;
            cmd.ExecuteNonQuery();
        }

        #endregion Data Access Methods


#if TEST
    private Hashtable _overrides = new Hashtable();

    public void SetSingleInterface(string iface, IInterfaceInfo info)
    {
        string[] servers = GetServerListByInterface(iface);
        if (servers.Length == 0)
        {
            ApplicationException ae = new ApplicationException("Could not find Interface '"
                + iface.ToString()
                + "' on any Server");
            LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_184, ae +"\n" + System.Environment.StackTrace);
            throw ae;
        }
        if (servers.Length > 1)
        {
            ApplicationException ae = new ApplicationException("More than one Server was found exposing Interface '"
                + iface.ToString()
                + "' when only one was expected");
            LogNtEvent(ConfigEvent.Id.COMMON_CONFIG_185, ae +"\n" + System.Environment.StackTrace);
            throw ae;
        }

        SetInterface(servers[0], iface, info);
    }

    public void SetInterface(string server, string iface, IInterfaceInfo info)
    {
        _overrides[server + "_" + iface.ToString()] = info;
    }
#endif

    }
} // end namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\unittest\FileSettingsReader\FileSettingsReaderTests.cs ===
﻿using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Xml;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using xonline.common.config;

namespace filesettingsreader
{
    [TestClass]
    public class FileSettingsReaderTests
    {
        public TestContext TestContext { get; set; }
        
        [TestMethod]
        [ExpectedException(typeof(DirectoryNotFoundException))]
        public void DirectoryDoesNotExist()
        {
            FileSettingsReader reader = new FileSettingsReader(@"C:\directory\doesnot\exist\file.xml");
        }

        [TestMethod]
        public void TryOpenDirectoryDoesNotExist()
        {
            FileSettingsReader reader = FileSettingsReader.TryOpen(@"C:\directory\doesnot\exist\file.xml");
            Assert.IsNull(reader);
        }

        [TestMethod]
        [ExpectedException(typeof(FileNotFoundException))]
        public void FileDoesNotExist()
        {
            FileSettingsReader reader = new FileSettingsReader(Path.Combine(TestContext.TestRunDirectory, "nofile.xml"));
        }
        
        [TestMethod]
        public void TryOpenFileDoesNotExist()
        {
            FileSettingsReader reader = FileSettingsReader.TryOpen(Path.Combine(TestContext.TestRunDirectory, "nofile.xml"));
            Assert.IsNull(reader);
        }

        [TestMethod]
        [ExpectedException(typeof(XmlException))]
        public void EmptyXmlFile()
        {
            string filename = Path.Combine(TestContext.TestRunDirectory, TestContext.TestName + ".xml");
            using (var file = File.Create(filename))
            {
                file.Flush();
            }

            FileSettingsReader reader = new FileSettingsReader(filename);
        }

        [TestMethod]
        [ExpectedException(typeof(XmlException))]
        public void MalformedXmlFile()
        {
            string xml = "<?xml version=\"1.0\"?><configuration><XblConfig></configuration>";
            string filename = Path.Combine(TestContext.TestRunDirectory, TestContext.TestName + ".xml");
            using (var file = File.CreateText(filename))
            {
                file.Write(xml);
                file.Flush();
            }

            FileSettingsReader reader = new FileSettingsReader(filename);
        }

        [TestMethod]
        public void EmptyConfigurationFile()
        {
            string xml = "<?xml version=\"1.0\"?><configuration><XblConfig /></configuration>";
            string filename = Path.Combine(TestContext.TestRunDirectory, TestContext.TestName + ".xml");
            using (var file = File.CreateText(filename))
            {
                file.Write(xml);
                file.Flush();
            }

            FileSettingsReader reader = new FileSettingsReader(filename);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\unittest\obj\amd64\_generated.cs ===
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Runtime.InteropServices.ComVisible(false)]
[assembly: System.CLSCompliant(false)]
[assembly: System.Reflection.AssemblyProduct("\r\n      DEPOT\r\n    ")]
[assembly: System.Reflection.AssemblyVersion("12.4.0.0")]
[assembly: System.Reflection.AssemblyFileVersion("12.4.56.0")]

// Generated by the MSBuild WriteCodeFragment class on 10/27/2012 5:08:22 PM.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\unittest\FileSettingsReader\GetMultiSettingTests.cs ===
﻿using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Xml;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using xonline.common.config;

namespace filesettingsreader
{
    [TestClass]
    public class GetMultiSettingTests
    {
        public TestContext TestContext { get; set; }

        [TestMethod]
        public void EmptyConfigurationFile()
        {
            string xml = "<?xml version=\"1.0\"?><configuration><XblConfig /></configuration>";
            string filename = Path.Combine(TestContext.TestRunDirectory, TestContext.TestName + ".xml");
            using (var file = File.CreateText(filename))
            {
                file.Write(xml);
                file.Flush();
            }

            FileSettingsReader reader = new FileSettingsReader(filename);
            string[] values = reader.GetMultiSetting("no_setting");
            Assert.IsNull(values);
        }

        [TestMethod]
        public void NoMultiSetting()
        {
            string xml = "<?xml version=\"1.0\"?><configuration><XblConfig><data /></XblConfig></configuration>";
            string filename = Path.Combine(TestContext.TestRunDirectory, TestContext.TestName + ".xml");
            using (var file = File.CreateText(filename))
            {
                file.Write(xml);
                file.Flush();
            }

            FileSettingsReader reader = new FileSettingsReader(filename);
            string[] values = reader.GetMultiSetting("no_setting");
            Assert.IsNull(values);
        }

        [TestMethod]
        public void EmptyMultiSetting()
        {
            string xml = "<?xml version=\"1.0\"?><configuration><XblConfig><empty_setting /></XblConfig></configuration>";
            string filename = Path.Combine(TestContext.TestRunDirectory, TestContext.TestName + ".xml");
            using (var file = File.CreateText(filename))
            {
                file.Write(xml);
                file.Flush();
            }

            FileSettingsReader reader = new FileSettingsReader(filename);
            string[] values = reader.GetMultiSetting("empty_setting");
            Assert.IsNotNull(values);
            Assert.AreEqual(0, values.Length);
        }

        [TestMethod]
        public void BadMultiSetting()
        {
            string xml = "<?xml version=\"1.0\"?><configuration><XblConfig><data>SomeText</data></XblConfig></configuration>";
            string filename = Path.Combine(TestContext.TestRunDirectory, TestContext.TestName + ".xml");
            using (var file = File.CreateText(filename))
            {
                file.Write(xml);
                file.Flush();
            }

            FileSettingsReader reader = new FileSettingsReader(filename);
            string[] values = reader.GetMultiSetting("no_setting");
            Assert.IsNull(values);
        }

        [TestMethod]
        public void SimpleStrings()
        {
            string xml = "<?xml version=\"1.0\"?><configuration><XblConfig><data><string>value1</string><string>value2</string></data></XblConfig></configuration>";
            string filename = Path.Combine(TestContext.TestRunDirectory, TestContext.TestName + ".xml");
            using (var file = File.CreateText(filename))
            {
                file.Write(xml);
                file.Flush();
            }

            FileSettingsReader reader = new FileSettingsReader(filename);
            string[] values = reader.GetMultiSetting("data");
            Assert.IsNotNull(values);
            Assert.AreEqual(2, values.Length);
            Assert.AreEqual("value1", values[0]);
            Assert.AreEqual("value2", values[1]);
        }

        [TestMethod]
        public void CombinedValueTypes()
        {
            string simple = "simple value";
            string cdata = "<?xml version=\"1.0\"?><root><base64 /></root>";
            string base64 = Convert.ToBase64String(Encoding.UTF8.GetBytes(simple));

            string data = string.Format("<data><string>{0}</string><string><![CDATA[{1}]]></string><string>base64({2})</string></data>", simple, cdata, base64);
            string xml = string.Format("<?xml version=\"1.0\"?><configuration><XblConfig>{0}</XblConfig></configuration>", data);
            string filename = Path.Combine(TestContext.TestRunDirectory, TestContext.TestName + ".xml");
            using (var file = File.CreateText(filename))
            {
                file.Write(xml);
                file.Flush();
            }

            FileSettingsReader reader = new FileSettingsReader(filename);
            string[] values = reader.GetMultiSetting("data");
            Assert.IsNotNull(values);
            Assert.AreEqual(3, values.Length);
            Assert.AreEqual(simple, values[0]);
            Assert.AreEqual(cdata, values[1]);
            Assert.AreEqual(simple, values[2]);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\unittest\objd\amd64\_generated.cs ===
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Runtime.InteropServices.ComVisible(false)]
[assembly: System.CLSCompliant(false)]
[assembly: System.Reflection.AssemblyProduct("\r\n      DEPOT\r\n    ")]
[assembly: System.Reflection.AssemblyVersion("11.8.0.0")]
[assembly: System.Reflection.AssemblyFileVersion("11.8.31.0")]

// Generated by the MSBuild WriteCodeFragment class on 10/27/2012 7:29:45 PM.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\unittest\ConfigInstance\TestBase.cs ===
﻿using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Text;
using System.Xml;
using System.Xml.XPath;
using Microsoft.MMF;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using xonline.common.config;

namespace configinstance
{
    public class CachedSetting
    {
        public bool Dirty { get; set; }

        public string NewValue { get; set; }

        public string Value { get; set; }

        public static CachedSetting FromSettingsCacheLine(object line)
        {
            PrivateObject poLine = new PrivateObject(line);
            CachedSetting setting = new CachedSetting();
            setting.Dirty = (bool)poLine.GetField("_dirty");
            setting.NewValue = poLine.GetField("_newValue") as string;
            setting.Value = poLine.GetField("_value") as string;
            return setting;
        }
    }

    public class TestBase
    {
        protected PrivateType ptConfig;

        protected PrivateObject poConfigInstance;
        
        protected StaticMimicTest configTest;

        protected MimicTest<xonline.common.config.ConfigInstance> configInstanceTest;

        protected ConfigInstance configInstance;

        protected StubMimicObjectWrapper<ConfigInstance> configMimic;

        protected StubObjectWrapper<MMFStatic> staticStub;
        
        protected Dictionary<string, string> dbSettings;

        protected Dictionary<string, string[]> dbMultiSettings;

        protected long dbLatestChangeId;

        protected bool dbSettingsChanged;

        protected bool dbMultiSettingsChanged;

        protected string targetSettings;

        protected void UseSettingsFile(string filename)
        {
            DeleteSettingsFile();
            File.Copy(Path.Combine("TestFiles", filename), targetSettings, true);
            FileInfo fi = new FileInfo(targetSettings);
            fi.CreationTimeUtc = DateTime.UtcNow;
        }

        protected void TouchSettingsFile()
        {
            FileInfo fi = new FileInfo(targetSettings);
            fi.LastWriteTimeUtc = DateTime.UtcNow;
        }

        protected string TestGetSetting(string settingName)
        {
            string value = null;
            configTest.Test(() => value = Config.GetSetting(settingName));
            return value;
        }

        protected string[] TestGetMultiSetting(string multiSettingName)
        {
            string[] value = null;
            configTest.Test(() => value = Config.GetMultiSetting(multiSettingName));
            return value;
        }

        protected Dictionary<string, CachedSetting> TestTryCacheSettings(params string[] settingNames)
        {
            configTest.Test(() => Config.TryCacheSettings(settingNames));
            return GetCachedSettings();
        }

        protected void TestCheckForUpdates(bool refreshDbSettings = false, bool refreshDbMultiSettings = false)
        {
            dbSettingsChanged = refreshDbSettings;
            dbMultiSettingsChanged = refreshDbMultiSettings;

            if (dbSettingsChanged || dbMultiSettingsChanged)
            {
                ++dbLatestChangeId;
            }

            configInstanceTest.Test(instance => instance.CheckForUpdates());
        }

        protected Dictionary<string, CachedSetting> GetCachedSettings()
        {
            Dictionary<string, CachedSetting> result = new Dictionary<string, CachedSetting>();
            Hashtable cache = poConfigInstance.GetField("_settingsCache", BindingFlags.Instance | BindingFlags.NonPublic) as Hashtable;
            if (cache != null)
            {
                foreach (var key in cache.Keys)
                {
                    PrivateObject poKey = new PrivateObject(key);
                    string setting = poKey.GetField("_setting") as string;
                    CachedSetting value = CachedSetting.FromSettingsCacheLine(cache[key]);
                    result[setting] = value;
                }
            }

            return result;
        }

        public void AssertGetBatchSettingsFromDBWasCalled(int nTimes)
        {
            staticStub
                .IgnoresAllArguments()
                .WhenAssertingThat(
                    "GetBatchSettingsFromDB",
                    string.Empty,   // connection string
                    string.Empty,   // environment
                    (int)0,         // siteId
                    string.Empty,   // server
                    string.Empty,   // component
                    string.Empty    // xml
                    )
                .WasCalledXTimes(nTimes);
        }

        public FileSettingsReader GetInternalSettingsReader()
        {
            return poConfigInstance.GetField("_fileSettings", BindingFlags.Instance | BindingFlags.NonPublic) as FileSettingsReader;
        }

        protected void DeleteSettingsFile()
        {
            File.Delete(targetSettings);
        }
        
        protected string GetSettingFromDB(string setting)
        {
            string value = null;
            dbSettings.TryGetValue(setting, out value);
            return value;
        }

        protected string[] GetMultiSettingFromDB(string multiSetting)
        {
            string[] value = null;
            if (!dbMultiSettings.TryGetValue(multiSetting, out value))
            {
                value = new string[0];
            }

            return value;
        }

        protected Hashtable GetBatchSettingsFromDB(string environment, int siteId, string server, string component, string xmlQuery)
        {
            var tKey = typeof(ConfigInstance).GetNestedType("SettingsKey", BindingFlags.NonPublic);
            Hashtable results = new Hashtable();
            using (StringReader s = new StringReader(string.Format("<q>{0}</q>",xmlQuery)))
            {
                XPathDocument doc = new XPathDocument(s);
                var settings = doc.CreateNavigator().Select("/q/a");
                while (settings.MoveNext())
                {
                    string settingName = settings.Current.GetAttribute("vc_setting", string.Empty);
                    object key = Activator.CreateInstance(tKey, environment, siteId, server, component, settingName);
                    string setting = null;
                    if (dbSettings.TryGetValue(settingName, out setting))
                    {
                        results[key] = setting;
                    }
                }
            }

            return results;
        }

        protected bool ShouldUpdateData(NpdbRefreshTypes type)
        {
            switch (type)
            {
                case NpdbRefreshTypes.REFRESH_SETTINGS:
                    return dbSettingsChanged;

                case NpdbRefreshTypes.REFRESH_MULTI_SETTINGS:
                    return dbMultiSettingsChanged;

                default:
                    return false;
            }
        }

        protected void SetupMockingFramework()
        {
            ptConfig = new PrivateType(typeof(xonline.common.config.Config));

            ptConfig.SetStaticField("_defaultInstance", BindingFlags.NonPublic, null);
            List<ConfigInstance> instances = ptConfig.GetStaticField("_instances", BindingFlags.NonPublic) as List<ConfigInstance>;
            instances.Clear();

            configInstance = xonline.common.config.Config.DefaultInstance;
            configInstance.HandleLogEvent += (id, msg, component) => { };
            poConfigInstance = new PrivateObject(configInstance);
            poConfigInstance.SetField("_server", BindingFlags.Instance | BindingFlags.NonPublic, Environment.MachineName);
            poConfigInstance.SetField("_component", BindingFlags.Instance | BindingFlags.NonPublic, "test");
            poConfigInstance.SetField("_componentName", BindingFlags.Instance | BindingFlags.NonPublic, "test");
            poConfigInstance.SetField("_environment", BindingFlags.Instance | BindingFlags.NonPublic, "test");
            poConfigInstance.SetField("_environmentType", BindingFlags.Instance | BindingFlags.NonPublic, "test");
            poConfigInstance.SetField("_siteIdLookedUp", BindingFlags.Instance | BindingFlags.NonPublic, true);
            poConfigInstance.SetField("_siteId", BindingFlags.Instance | BindingFlags.NonPublic, 1);

            Random r = new Random();
            string[] settingPaths = poConfigInstance.GetProperty("SettingFilePaths", BindingFlags.Instance | BindingFlags.NonPublic) as string[];
            foreach (var path in settingPaths)
            {
                File.Delete(path);
            }

            // Alternate among the possible target files that are supported for XblConfig.xml
            targetSettings = settingPaths[r.Next(settingPaths.Length)];
            DeleteSettingsFile();

            var tNpdbInfo = typeof(ConfigInstance).GetNestedType("NpdbInfo", BindingFlags.NonPublic);
            object npdbInfo = Activator.CreateInstance(tNpdbInfo, configInstance, "npdb", "npdb");
            poConfigInstance.SetField("_npdbInfo", BindingFlags.Instance | BindingFlags.NonPublic, npdbInfo);

            dbSettings = new Dictionary<string, string>();
            dbSettings[Setting.config_minEventInterval] = "60000";
            dbSettings[Setting.config_cacheRefreshInterval] = "300000"; // Effectively disable automatic reloading
            dbMultiSettings = new Dictionary<string, string[]>();
            dbLatestChangeId = 0;

            configMimic = StubFactory.CreateMimic<xonline.common.config.ConfigInstance>(configInstance);
            configMimic.Stubs().On("LogMinEventInterval");
            configMimic.Stubs().On("LogCacheRefreshInterval");
            configMimic
                .ReturnsByCalling(p => { return dbLatestChangeId; })
                .On("GetLatestChangeId");
            configMimic
                .IgnoresAllArguments()
                .AndReturns(new Hashtable())
                .On("GetModifiedTables", 0L);
            configMimic
                .IgnoresAllArguments()
                .AndReturnsByCalling(p => ShouldUpdateData((NpdbRefreshTypes)p[0]))
                .On("ShouldUpdateData", NpdbRefreshTypes.REFRESH_STARTS, new Hashtable());
            configMimic
                .IgnoresAllArguments()
                .AndReturnsByCalling(p => GetSettingFromDB(p[4] as string))
                .On("GetSettingFromDB",
                    string.Empty,   // environment
                    (int)0,         // siteId
                    string.Empty,   // server
                    string.Empty,   // component
                    string.Empty    // setting
                    );
            configMimic
                .IgnoresAllArguments()
                .AndReturnsByCalling(p => GetMultiSettingFromDB(p[4] as string))
                .On("GetMultiSettingFromDB",
                    string.Empty,   // environment
                    (int)0,         // siteId
                    string.Empty,   // server
                    string.Empty,   // component
                    string.Empty    // setting
                    );

            var tNpdbAccess = typeof(ConfigInstance).GetNestedType("NpdbAccess", BindingFlags.NonPublic);
            var mGetBatchSettingsFromDB = tNpdbAccess.GetMethod("GetBatchSettingsFromDB");

            staticStub = StubFactory.CreateStatic(tNpdbAccess);
            staticStub
                .IgnoresAllArguments()
                .AndReturnsByCalling(p => GetBatchSettingsFromDB(
                    p[1] as string, // enviornment
                    (int)p[2],      // siteId
                    p[3] as string, // server
                    p[4] as string, // component
                    p[5] as string  // xml
                    ))
                .On(
                    "GetBatchSettingsFromDB",
                    string.Empty,   // connection string
                    string.Empty,   // environment
                    (int)0,         // siteId
                    string.Empty,   // server
                    string.Empty,   // component
                    string.Empty    // xml
                    );

            configTest = new StaticMimicTest();
            configTest.Redirects<ConfigInstance>().ByCalling(configMimic);
            configTest.RedirectsStaticMethodsByCalling(staticStub);

            configInstanceTest = new MimicTest<ConfigInstance>();
            configInstanceTest.Redirects<ConfigInstance>().ByCalling(configMimic);
            configInstanceTest.RedirectsStaticMethodsByCalling(staticStub);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\unittest\obj\i386\_generated.cs ===
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Runtime.InteropServices.ComVisible(false)]
[assembly: System.CLSCompliant(false)]
[assembly: System.Reflection.AssemblyProduct("\r\n      DEPOT\r\n    ")]
[assembly: System.Reflection.AssemblyVersion("12.4.0.0")]
[assembly: System.Reflection.AssemblyFileVersion("12.4.56.0")]

// Generated by the MSBuild WriteCodeFragment class on 10/27/2012 5:24:25 PM.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\unittest\FileSettingsReader\GetBlobSettingTests.cs ===
﻿using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Xml;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using xonline.common.config;

namespace filesettingsreader
{
    [TestClass]
    public class GetBlobSettingTests
    {
        public TestContext TestContext { get; set; }

        [TestMethod]
        public void EmptyConfigurationFile()
        {
            string xml = "<?xml version=\"1.0\"?><configuration><XblConfig /></configuration>";
            string filename = Path.Combine(TestContext.TestRunDirectory, TestContext.TestName + ".xml");
            using (var file = File.CreateText(filename))
            {
                file.Write(xml);
                file.Flush();
            }

            FileSettingsReader reader = new FileSettingsReader(filename);
            byte[] value = reader.GetBlobSetting("no_setting");
            Assert.IsNull(value);
        }

        [TestMethod]
        public void UnspecifiedValue()
        {
            string xml = "<?xml version=\"1.0\"?><configuration><XblConfig><unspecified>##_NOTHING_SPECIFIED_##</unspecified></XblConfig></configuration>";
            string filename = Path.Combine(TestContext.TestRunDirectory, TestContext.TestName + ".xml");
            using (var file = File.CreateText(filename))
            {
                file.Write(xml);
                file.Flush();
            }

            FileSettingsReader reader = new FileSettingsReader(filename);
            byte[] value = reader.GetBlobSetting("unspecified");
            Assert.IsNull(value);
        }

        [TestMethod]
        public void EmtpyValue()
        {
            string xml = "<?xml version=\"1.0\"?><configuration><XblConfig><empty /></XblConfig></configuration>";
            string filename = Path.Combine(TestContext.TestRunDirectory, TestContext.TestName + ".xml");
            using (var file = File.CreateText(filename))
            {
                file.Write(xml);
                file.Flush();
            }

            FileSettingsReader reader = new FileSettingsReader(filename);
            byte[] value = reader.GetBlobSetting("empty");
            Assert.IsNull(value);
        }

        [TestMethod]
        public void NonBase64Value()
        {
            string xml = "<?xml version=\"1.0\"?><configuration><XblConfig><data>Not a base64 value</data></XblConfig></configuration>";
            string filename = Path.Combine(TestContext.TestRunDirectory, TestContext.TestName + ".xml");
            using (var file = File.CreateText(filename))
            {
                file.Write(xml);
                file.Flush();
            }

            FileSettingsReader reader = new FileSettingsReader(filename);
            byte[] value = reader.GetBlobSetting("data");
            Assert.IsNull(value);
        }

        [TestMethod]
        public void DateTimeBase64Value()
        {
            DateTime decoded = DateTime.Now;
            string encoded = Convert.ToBase64String(BitConverter.GetBytes(decoded.ToBinary()));

            string base64Value = string.Format("base64({0})", encoded);
            string xml = string.Format("<?xml version=\"1.0\"?><configuration><XblConfig><data>{0}</data></XblConfig></configuration>", base64Value);
            string filename = Path.Combine(TestContext.TestRunDirectory, TestContext.TestName + ".xml");
            using (var file = File.CreateText(filename))
            {
                file.Write(xml);
                file.Flush();
            }

            FileSettingsReader reader = new FileSettingsReader(filename);
            byte[] value = reader.GetBlobSetting("data");
            Assert.IsNotNull(value);
            DateTime dateValue = DateTime.FromBinary(BitConverter.ToInt64(value, 0));
            Assert.AreEqual(decoded, dateValue);
        }

        [TestMethod]
        public void BadBase64Value()
        {
            DateTime decoded = DateTime.Now;
            string encoded = Convert.ToBase64String(BitConverter.GetBytes(decoded.ToBinary()));

            // Note the exclamation mark (!) after base64() which breaks the format expected by the parser.
            string base64Value = string.Format("base64({0})!", encoded);
            string xml = string.Format("<?xml version=\"1.0\"?><configuration><XblConfig><data>{0}</data></XblConfig></configuration>", base64Value);
            string filename = Path.Combine(TestContext.TestRunDirectory, TestContext.TestName + ".xml");
            using (var file = File.CreateText(filename))
            {
                file.Write(xml);
                file.Flush();
            }

            FileSettingsReader reader = new FileSettingsReader(filename);
            byte[] value = reader.GetBlobSetting("data");

            // The parser should have returned null as it wasn't in a valid base64 format.
            Assert.IsNull(value);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\unittest\objd\i386\_generated.cs ===
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Runtime.InteropServices.ComVisible(false)]
[assembly: System.CLSCompliant(false)]
[assembly: System.Reflection.AssemblyProduct("\r\n      DEPOT\r\n    ")]
[assembly: System.Reflection.AssemblyVersion("12.4.0.0")]
[assembly: System.Reflection.AssemblyFileVersion("12.4.56.0")]

// Generated by the MSBuild WriteCodeFragment class on 11/2/2012 2:55:34 AM.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\configsn\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\unittest\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("XblConfigUnitTests")]
[assembly: AssemblyDescription("Unit tests for XblConfig.dll")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("4421e99b-1e10-40f4-bd19-a7d0aee8852f")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\configsn\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\configsn\configdll.cs ===
using System;
using System.Reflection;


[assembly: AssemblyTrademark("Microsoft(R) is a registered trademark of Microsoft Corporation. Xbox(TM) is a trademark of Microsoft Corporation.")]

namespace xonline.common.config
{
} // end namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\unittest\FileSettingsReader\GetSettingTests.cs ===
﻿using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Xml;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using xonline.common.config;

namespace filesettingsreader
{
    [TestClass]
    public class GetSettingTests
    {
        public TestContext TestContext { get; set; }

        [TestMethod]
        public void EmptyConfigurationFile()
        {
            string xml = "<?xml version=\"1.0\"?><configuration><XblConfig /></configuration>";
            string filename = Path.Combine(TestContext.TestRunDirectory, TestContext.TestName + ".xml");
            using (var file = File.CreateText(filename))
            {
                file.Write(xml);
                file.Flush();
            }

            FileSettingsReader reader = new FileSettingsReader(filename);
            string value = reader.GetSetting("no_setting");
            Assert.IsNull(value);
        }

        [TestMethod]
        public void UnspecifiedValue()
        {
            string xml = "<?xml version=\"1.0\"?><configuration><XblConfig><unspecified>##_NOTHING_SPECIFIED_##</unspecified></XblConfig></configuration>";
            string filename = Path.Combine(TestContext.TestRunDirectory, TestContext.TestName + ".xml");
            using (var file = File.CreateText(filename))
            {
                file.Write(xml);
                file.Flush();
            }

            FileSettingsReader reader = new FileSettingsReader(filename);
            string value = reader.GetSetting("unspecified");
            Assert.IsNull(value);
        }

        [TestMethod]
        public void EmtpyValue()
        {
            string xml = "<?xml version=\"1.0\"?><configuration><XblConfig><empty /></XblConfig></configuration>";
            string filename = Path.Combine(TestContext.TestRunDirectory, TestContext.TestName + ".xml");
            using (var file = File.CreateText(filename))
            {
                file.Write(xml);
                file.Flush();
            }

            FileSettingsReader reader = new FileSettingsReader(filename);
            string value = reader.GetSetting("empty");
            Assert.IsNotNull(value);
            Assert.AreEqual(0, value.Length);
        }

        [TestMethod]
        public void CDataValue()
        {
            string cdata = "<?xml version=\"1.0\"?><root><some_xml /></root>";
            string xml = string.Format("<?xml version=\"1.0\"?><configuration><XblConfig><data><![CDATA[{0}]]></data></XblConfig></configuration>", cdata);
            string filename = Path.Combine(TestContext.TestRunDirectory, TestContext.TestName + ".xml");
            using (var file = File.CreateText(filename))
            {
                file.Write(xml);
                file.Flush();
            }

            FileSettingsReader reader = new FileSettingsReader(filename);
            string value = reader.GetSetting("data");
            Assert.IsNotNull(value);
            Assert.AreEqual(cdata, value);
        }

        [TestMethod]
        public void Base64Value()
        {
            string decoded = "<![CDATA[<?xml version=\"1.0\"?><root><base64 /></root>]]>";
            string encoded = Convert.ToBase64String(Encoding.UTF8.GetBytes(decoded));

            string base64Value = string.Format("base64({0})", encoded);
            string xml = string.Format("<?xml version=\"1.0\"?><configuration><XblConfig><data>{0}</data></XblConfig></configuration>", base64Value);
            string filename = Path.Combine(TestContext.TestRunDirectory, TestContext.TestName + ".xml");
            using (var file = File.CreateText(filename))
            {
                file.Write(xml);
                file.Flush();
            }

            FileSettingsReader reader = new FileSettingsReader(filename);
            string value = reader.GetSetting("data");
            Assert.IsNotNull(value);
            Assert.AreEqual(decoded, value);
        }

        [TestMethod]
        public void BadBase64Value()
        {
            string decoded = "<![CDATA[<?xml version=\"1.0\"?><root><base64 /></root>]]>";
            string encoded = Convert.ToBase64String(Encoding.UTF8.GetBytes(decoded));

            // Note the exclamation mark (!) after base64() which breaks the format expected by the parser.
            string base64Value = string.Format("base64({0})!", encoded);
            string xml = string.Format("<?xml version=\"1.0\"?><configuration><XblConfig><data>{0}</data></XblConfig></configuration>", base64Value);
            string filename = Path.Combine(TestContext.TestRunDirectory, TestContext.TestName + ".xml");
            using (var file = File.CreateText(filename))
            {
                file.Write(xml);
                file.Flush();
            }

            FileSettingsReader reader = new FileSettingsReader(filename);
            string value = reader.GetSetting("data");
            Assert.IsNotNull(value);

            // The parser should have preserved the whole string as it wasn't in a valid base64 format.
            Assert.AreEqual(base64Value, value);
        }

        [TestMethod]
        public void SimpleString()
        {
            string xml = "<?xml version=\"1.0\"?><configuration><XblConfig><data>A simple value</data></XblConfig></configuration>";
            string filename = Path.Combine(TestContext.TestRunDirectory, TestContext.TestName + ".xml");
            using (var file = File.CreateText(filename))
            {
                file.Write(xml);
                file.Flush();
            }

            FileSettingsReader reader = new FileSettingsReader(filename);
            string value = reader.GetSetting("data");
            Assert.IsNotNull(value);
            Assert.AreEqual("A simple value", value);
        }

        [TestMethod]
        public void DuplicatedSetting()
        {
            string xml = "<?xml version=\"1.0\"?><configuration><XblConfig><data>First instance</data><data>Second instance</data></XblConfig></configuration>";
            string filename = Path.Combine(TestContext.TestRunDirectory, TestContext.TestName + ".xml");
            using (var file = File.CreateText(filename))
            {
                file.Write(xml);
                file.Flush();
            }

            FileSettingsReader reader = new FileSettingsReader(filename);
            string value = reader.GetSetting("data");
            Assert.IsNotNull(value);
            Assert.AreEqual("First instance", value);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\configtlb\makefile.inc ===
!INCLUDE $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\console\console\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\console\console\CommandLineParameterAttribute.cs ===
﻿using System;

namespace xonline.common.console
{
    [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)]
    public class CommandLineParameterAttribute : Attribute
    {
        public String Name { get; private set; }
        public String Help { get; private set; }
        public Boolean Required { get; set; }
        public bool HasValue { get; set; }
        public String DefaultValue { get; set; }

        public CommandLineParameterAttribute(string parameterName, string helpString)
        {
            Name = parameterName;
            Help = helpString;
            Required = false;
            HasValue = true;
            DefaultValue = null;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\console\console\ICommandHandler.cs ===
﻿using System.Collections.Generic;

namespace xonline.common.console
{
    /// <summary>
    /// All classes that implement a command line command
    /// should derive from CommandHandlerBase, which implements
    /// this interface.
    /// </summary>
    public interface ICommandHandler
    {
        /// <summary>
        /// Help string for this command.  Should list all
        /// parameters, both required and optional.
        /// </summary>
        /// <returns></returns>
        string Help();

        /// <summary>
        /// Executes the command.
        /// </summary>
        /// <param name="parameters"></param>
        /// <returns></returns>
        int Execute(Dictionary<string,string> parameters);

        /// <summary>
        /// Returns the command name.
        /// </summary>
        string Command { get; }

        /// <summary>
        /// Returns the description for the command.
        /// </summary>
        string Description { get; }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\console\console\NamedArgParser.cs ===
using System;
using System.IO;
using System.Collections;
using System.Globalization;
using System.Collections.Specialized;
using System.Diagnostics;

namespace xonline.common.tools.console
{


/// <remarks>
///     Generic class for parsing out command line arguments, in the
///     form of:
///
///     <example>
///         myprogram.exe /a:argument1 /b arg2 /novaluearg
///     </example>
///
///     Parsing takes place by calling the Parse() function.   the resulting
///     tag/value pairs can be access via the [] accessor (or Item() property).
/// </remarks>
public class NamedArgParser : StringDictionary
{
    private static char[] _defaultDelims = { '/', '-' };

    private bool _ignoreCase = true;
    private string _invalidArgText = "";

    private char[] _delims;
    private string[] _tags;



    /// <summary>
    ///     default constructor.  initalizes with default delimeters ('/' or '-')
    ///     and no specific tags.
    /// </summary>
    public NamedArgParser()             : this(null, _defaultDelims) { }
    /// <summary>
    ///     Initalize, limiting valid arguments to the given list of <paramref name='tags'>tags</paramref>.
    ///     initalizes with default delimeters ('/' or '-').
    ///     <param name='tags'>
    ///         tags to be used
    ///     </param>
    /// </summary>
    public NamedArgParser(string[] tags)    : this(tags, _defaultDelims) { }
    /// <summary>
    ///     Initalize, limiting valid arguments to the given list of <paramref name='tags'>tags</paramref>,
    ///     and using the given <paramref name='delimeters'>delimeters</paramref> for denoting tags.
    ///     <param name='tags'>
    ///         tags to be used
    ///     </param>
    ///     <param name='delimeters'>
    ///         argument delimeters to look for
    ///     </param>
    /// </summary>
    public NamedArgParser(string[] tags, char[] delimeters)
    {
        _tags = tags;
        _delims = delimeters;

#if DEBUG
        // tags cannot contain delimeters or ':' or '@'
        if (_tags != null) {
            for (int n=0; n < _tags.Length; n++) {
                Debug.Assert(_tags[n].IndexOf(":") == -1);
                Debug.Assert(_tags[n].IndexOf("@") == -1);
                for (int j=0; j < _delims.Length; j++) {
                    Debug.Assert(_tags[n].IndexOf(_delims[j]) == -1);
                }
            }
        }
#endif

    }

    /// <summary>
    ///     list of valid delimiter characters.  defaults to '/' and '-'
    /// </summary>
    public char[] Delimiters
    {
        set { _delims = value; }
        get { return _delims; }
    }

    /// <summary>
    ///     list of valid tags.  if not specified, all tags are allowed.
    ///     if it is specified, Parse() will fail if it encouters tags that
    ///     aren't listed in this array.
    /// </summary>
    public string[] Tags
    {
        set { _tags = value; }
        get { return _tags; }
    }

    /// <summary>
    ///     set to false if tags should be verified in a case-sensitive
    ///     way.  Defaults to true.
    /// </summary>
    public bool IgnoreCase
    {
        set { _ignoreCase = value; }
        get { return _ignoreCase; }
    }

    /// <summary>
    ///     returns an argument as an uint, or 0 if it can't be parsed.
    /// </summary>
    public uint ParseHexUInt(string tag) { bool b; return ParseHexUInt(tag, out b); }
    public uint ParseHexUInt(string tag, out bool success)
    {
        return (uint)ParseInt(tag, NumberStyles.HexNumber, out success);
    }



    /// <summary>
    ///     returns an argument as an uint, or 0 if it can't be parsed.
    /// </summary>
    public uint ParseUInt(string tag) { bool b; return ParseUInt(tag, out b); }
    public uint ParseUInt(string tag, out bool b) { return ParseUInt(tag, NumberStyles.Integer, out b); }
    public uint ParseUInt(string tag, NumberStyles defaultStyle, out bool success)
    {
        NumberStyles style = defaultStyle;
        string valstr;
        uint val = 0;

        success = true;

        try
        {
            valstr = this[tag];
            if (valstr == "" || valstr == null)
            {
                success = false;
                return val;
            }

            // check for hex indicator
            if (valstr.StartsWith("0x"))
            {
                style = NumberStyles.HexNumber;
                valstr = valstr.Substring(2);
            }

            val = UInt32.Parse(valstr, style);
        }
        catch (Exception)
        {
            success = false;
        }

        return val;
    }

    /// <summary>
    ///     returns an argument as an int, or 0 if it can't be parsed.
    /// </summary>
    public int ParseInt(string tag) { bool b; return ParseInt(tag, out b); }
    public int ParseInt(string tag, out bool b) { return ParseInt(tag, NumberStyles.Integer, out b); }
    public int ParseInt(string tag, NumberStyles defaultStyle, out bool success)
    {
        NumberStyles style = defaultStyle;
        string valstr;
        int val = 0;

        success = true;

        try
        {
            valstr = this[tag];
            if (valstr == "" || valstr == null)
            {
                success = false;
                return val;
            }

            // check for hex indicator
            if (valstr.StartsWith("0x"))
            {
                style = NumberStyles.HexNumber;
                valstr = valstr.Substring(2);
            }

            val = Int32.Parse(valstr, style);
        }
        catch (Exception)
        {
            success = false;
        }


        return val;
    }

    /// <summary>
    ///     returns an argument as an uLong, or 0 if it can't be parsed.
    /// </summary>
    public ulong ParseULong(string tag) { bool b; return ParseULong(tag, out b); }
    public ulong ParseULong(string tag, out bool success)
    {
        return (ulong)ParseLong(tag, out success);
    }

    /// <summary>
    ///     returns an argument as an uLong, or 0 if it can't be parsed.
    /// </summary>
    public ulong ParseHexULong(string tag) { bool b; return ParseULong(tag, out b); }
    public ulong ParseHexULong(string tag, out bool success)
    {
        return (ulong)ParseLong(tag, NumberStyles.HexNumber, out success);
    }

    /// <summary>
    ///     returns an argument as an Long, or 0 if it can't be parsed.
    /// </summary>
    public long ParseLong(string tag) { bool b; return ParseLong(tag, out b); }
    public long ParseLong(string tag, out bool success)  { return ParseLong(tag, NumberStyles.Integer, out success); }
    public long ParseLong(string tag, NumberStyles defaultStyle, out bool success)
    {
        NumberStyles style = defaultStyle;
        string valstr;
        long val = 0;

        success = true;

        try
        {
            valstr = this[tag];
            if (valstr == "" || valstr == null)
            {
                success = false;
                return val;
            }

            // check for hex indicator
            if (valstr.StartsWith("0x"))
            {
                style = NumberStyles.HexNumber;
                valstr = valstr.Substring(2);
            }

            val = Int64.Parse(valstr, style);
        }
        catch (Exception)
        {
            success = false;
        }


        return val;
    }


    /// <summary>
    ///     If a call to Parse() returns false, contains the
    ///     text of the argument that cased the failure.
    /// </summary>
    public string InvalidArgText
    {
        get { return _invalidArgText; }
    }

    /// <summary>
    ///     parses the list of arguments and populates the Args[] mapping.
    ///
    ///     <param name='args'>
    ///         the list of arguments, typically the arg list passed into Main()
    ///     </param>
    /// </summary>
    public bool Parse(string[] args)
    {
        int n;
        string arg;
        string tag;
        string value;
        int valueIndex;

        bool success = true;

        // The calling function is trying to parse args
        // but an empty string array have been passed.
        if( args.Length == 0 ){
            _invalidArgText = "Trying to parse an empty arg string.";
            success = false;
        }

        for (n = 0; n < args.Length; n++) {

            arg = args[n];

            if (arg[0] == '@')
            {
                // it's a response file.
                success = ParseResponseFile(arg.Substring(1));
                if (!success) break;

                continue;
            }


            // get the tag
            tag = GetTag(arg);
            if (tag == "") {
                // no tag found, bad args
                _invalidArgText = arg;
                success = false;
                break;
            }

            // get the value associated with the tag (if any)
            value = "";
            valueIndex = arg.IndexOf(':');
            if (valueIndex > 0) {

                // the arg contains the value
                value = arg.Substring(valueIndex + 1);
            }

            // add the tag/value pair to the dictionary
            if (_ignoreCase == true) {
                tag = tag.ToLower();
            }

            base.Add(tag, value);

        }

        return success;
    }

    /// <summary>
    ///     Gets the tag name from the given <paramref name='arg'>argument</paramref> string.
    ///
    ///     <param name='arg'>the argument to parse</param>
    /// </summary>
    private string GetTag(string arg)
    {
        int n;
        string tag;

        for (n = 0; n < _delims.Length; n++) {
            if (arg[0] == _delims[n]) break;
        }

        if (n == _delims.Length) {
            // delimeter not found, must not be a tag
            return "";
        }

        // remove the delimeter
        arg = arg.Substring(1);

        n = arg.IndexOf(':');
        if (n > 0) {
            tag = arg.Substring(0, n);
        }
        else {
            tag = arg;
        }

        // if a set of tags have been specified, verify the list
        // against this potential tag.
        if (_tags != null) {
            for (n = 0; n < _tags.Length; n++) {
                if ((_ignoreCase == true && _tags[n].ToLower() == tag.ToLower()) ||
                    (_ignoreCase == false && _tags[n] == tag))  break;
            }

            if (n == _tags.Length) {
                // tag not found
                return "";
            }
        }

        return tag;

    }

    /// <summary>
    ///     Parses a file containing additional arguments.
    /// </summary>
    private bool ParseResponseFile(string filename)
    {
        StreamReader reader;
        StringCollection argList = new StringCollection();
        string[] args;
        string arg;

        try
        {
            reader = File.OpenText(filename);
            arg = reader.ReadLine();

            while (arg != null)
            {
                arg = arg.Trim();
                if (arg != "")
                    argList.Add(arg.Trim());

                arg = reader.ReadLine();
            }

            reader.Close();

            args = new string[argList.Count];
            argList.CopyTo(args, 0);

            return Parse(args);
        }
        catch(Exception e)
        {
            _invalidArgText = e.Message;
            return false;
        }
    }


}

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\console\console\CommandAttribute.cs ===
﻿using System;

namespace xonline.common.console
{
    [AttributeUsage(AttributeTargets.Class)]
    public class CommandAttribute : Attribute
    {
        public String Name { get; private set; }
        public String Description { get; set; }

        /// <summary>
        /// Command constructor.
        /// </summary>
        /// <param name="commandName"></param>
        /// <param name="description"></param>
        public CommandAttribute(string commandName, string description)
        {
            if(string.IsNullOrEmpty(commandName))
            {
                throw new ArgumentException("Null or empty command name is not allowed.", "commandName");
            }

            if(string.IsNullOrEmpty(description))
            {
                throw new ArgumentException("Null or empty command description is not allowed.", "commandName");
            }

            Name = commandName;
            Description = description;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\console\console\CommandHandlerBase.cs ===
﻿using System;
using System.Collections.Generic;
using System.Reflection;
using System.Text;

namespace xonline.common.console
{
    public abstract class CommandHandlerBase : ICommandHandler
    {
        #region Static Helper Methods

        /// <summary>
        /// Main command processing entry point.
        /// </summary>
        /// <param name="args"></param>
        /// <returns></returns>
        public static int ProcessCommand(string[] args)
        {
            if(args.Length == 0 || args[0] == "/?" || args[0] == "-?")
            {
                return ProcessHelp();
            }

            CommandHandlerBase handler = GetHandler(args[0]);
            if(handler == null)
            {
                ProcessHelp();
                return -1;
            }

            Dictionary<string, string> parameters = handler.ParseArgs(args);
            if(parameters == null)
            {
                ProcessHelp(args[0]);
                return -1;
            }

            return handler.Execute(parameters);
        }

        /// <summary>
        /// Find all command handlers in the current assembly, and
        /// emit their help strings.
        /// </summary>
        /// <returns></returns>
        protected static int ProcessHelp()
        {
            StringBuilder helpString = new StringBuilder();
            helpString.AppendLine("Commands:");

            CommandHandlerBase[] handlers = GetCommandHandlers();
            foreach (CommandHandlerBase handler in handlers)
            {
                helpString.AppendFormat("\t{0}\r\n", handler.Command);
            }

            helpString.AppendLine(
                string.Format(
                    "\r\nFor details on a specific command use \"{0} <command>\".  Commands are case sensitive.",
                    Assembly.GetEntryAssembly().FullName));

            Console.Write(helpString.ToString());

            return 0;    
        }

        /// <summary>
        /// Emit help for the specified command.
        /// </summary>
        /// <param name="command"></param>
        /// <returns></returns>
        protected static int ProcessHelp(string command)
        {
            Console.Write(GetHandler(command).Help());

            return 0;
        }

        /// <summary>
        /// Return a list of command handler instances for all defined command handlers.
        /// </summary>
        /// <returns></returns>
        protected static CommandHandlerBase[] GetCommandHandlers()
        {
            List<CommandHandlerBase> commandHandlerList = new List<CommandHandlerBase>();

            Type[] assemblyTypes = Assembly.GetEntryAssembly().GetTypes();

            foreach(Type t in assemblyTypes)
            {
                if(Attribute.GetCustomAttribute(t, typeof (CommandAttribute)) == null)
                {
                    continue;
                }

                ConstructorInfo constructorInfo = t.GetConstructor(new Type[0]);
                CommandHandlerBase handler = (CommandHandlerBase)(constructorInfo.Invoke(new object[0]));
                commandHandlerList.Add(handler);
            }

            return commandHandlerList.ToArray();
        }

        /// <summary>
        /// Create a new handler for the specified command.
        /// </summary>
        /// <param name="command"></param>
        /// <returns></returns>
        protected static CommandHandlerBase GetHandler(string command)
        {
            CommandHandlerBase[] handlers = GetCommandHandlers();
            foreach (CommandHandlerBase handler in handlers)
            {
                if(handler.Command == command)
                {
                    return handler;
                }
            }

            return null;
        }

        #endregion

        protected string GetCommand()
        {
            var commandAttribute = (CommandAttribute) Attribute.GetCustomAttribute(GetType(), typeof (CommandAttribute));
            return commandAttribute == null ? null : commandAttribute.Name;
        }

        protected string GetDescription()
        {
            var commandAttribute = (CommandAttribute)Attribute.GetCustomAttribute(GetType(), typeof(CommandAttribute));
            return commandAttribute == null ? null : commandAttribute.Description;
        }

        protected CommandLineParameterAttribute[] GetCommandLineParameters()
        {
            CommandLineParameterAttribute[] commandLineParameterAttributes =
                (CommandLineParameterAttribute[])
                Attribute.GetCustomAttributes(GetType(), typeof (CommandLineParameterAttribute));

            return commandLineParameterAttributes;
        }

        /// <summary>
        /// Convert the command line args string array into a Dictionary of
        /// name/value pairs.  Returns null if any parameters are incorrect.
        /// </summary>
        /// <param name="args"></param>
        /// <returns></returns>
        protected Dictionary<string, string> ParseArgs(string[] args)
        {
            Dictionary<string, string> parameters = new Dictionary<string, string>();
            CommandLineParameterAttribute[] parameterAttributes = GetCommandLineParameters();

            int argIndex = 1; // Skip the first arg, which is the command name.

            // Parse all items in the arg list.
            while(argIndex < args.Length)
            {
                string prefix = args[argIndex].Substring(0, 1);
                if(prefix != "/" && prefix != "-")
                {
                    return null;
                }

                string parameterName = args[argIndex].Substring(1);

                foreach(CommandLineParameterAttribute parameter in parameterAttributes)
                {
                    if (parameter.Name != parameterName) continue;

                    string parameterValue = null;
                    if (parameter.HasValue)
                    {
                        parameterValue = argIndex > args.Length ? null : args[argIndex + 1];

                        if (parameterValue == null || parameterValue.StartsWith("/") || parameterValue.StartsWith("-"))
                        {
                            if (string.IsNullOrEmpty(parameter.DefaultValue))
                            {
                                Console.WriteLine(string.Format("Missing value for {0} parameter.", parameterName));
                                return null;
                            }

                            parameterValue = parameter.DefaultValue;
                            ++argIndex;
                        }
                        else
                        {
                            argIndex += 2;
                        }
                    }
                    else
                    {
                        ++argIndex;
                    }

                    parameters.Add(parameterName, parameterValue);
                    break;
                }

                if(!parameters.ContainsKey(parameterName))
                {
                    Console.WriteLine("Unrecognized command line parameter: {0}", args[argIndex]);
                    return null;
                }
            }

            foreach (CommandLineParameterAttribute parameterAttribute in parameterAttributes)
            {
                // Make sure we have all required parameters.
                if(parameterAttribute.Required && !parameters.ContainsKey(parameterAttribute.Name))
                {
                    return null;
                }

                // Add any missing parameters that have default values.
                if(!parameterAttribute.Required && parameterAttribute.DefaultValue != null && !parameters.ContainsKey(parameterAttribute.Name))
                {
                    parameters.Add(parameterAttribute.Name, parameterAttribute.DefaultValue);
                }
            }

            return parameters;
        }

        #region ICommandHandler Members

        /// <summary>
        /// Autoformats the help string for a command based on
        /// its attributes.
        /// </summary>
        /// <returns></returns>
        public string Help()
        {
            StringBuilder helpString = new StringBuilder();
            helpString.AppendFormat("Command: {0}\r\n", Command);
            helpString.AppendLine(Description);
            helpString.AppendLine();
            helpString.AppendLine("Parameters:");

            CommandLineParameterAttribute[] parameterAttributes = GetCommandLineParameters();

            foreach(CommandLineParameterAttribute parameterAttribute in parameterAttributes)
            {
                    helpString.AppendFormat(
                        "\t-{0} [{1}] {2}\r\n",
                        parameterAttribute.Name,
                        parameterAttribute.Required ? "Required" : "Optional",
                        parameterAttribute.Help);
            }

            helpString.AppendLine();

            return helpString.ToString();
        }

        public abstract int Execute(Dictionary<string,string> parameters);

        public string Command
        {
            get { return GetCommand(); }
        }

        public string Description
        {
            get { return GetDescription(); }
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\console\console\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__console_0_none_12.4.56.0_none_831cf036774b3435
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__console_0_no-public-key_12.4.56.0_x-ww_dcb850df
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_console_0
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__console_0_no-public-key_12.4.56.0_x-ww_dcb850df
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__console_0_no-public-key_12.4.56.0_x-ww_dcb850df.manifest
XP_MANIFEST_PATH=manifests\x86__console_0_no-public-key_12.4.56.0_x-ww_dcb850df.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__console_0_no-public-key_12.4.56.0_x-ww_dcb850df.cat
XP_CATALOG_PATH=manifests\x86__console_0_no-public-key_12.4.56.0_x-ww_dcb850df.cat
XP_PAYLOAD_PATH=x86__console_0_no-public-key_12.4.56.0_x-ww_dcb850df
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_console_0,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\console\dll\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\console\console\HelpCommandHandler.cs ===
﻿using System;
using System.Collections.Generic;

namespace xonline.common.console
{
    [Command("Help", "Displays general help for the console application.")]
    class HelpCommandHandler : CommandHandlerBase
    {
        public override int Execute(Dictionary<string, string> parameters)
        {
            return ProcessHelp();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\console\dll\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\console\console\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__console_0_none_12.4.56.0_none_831cf036774b3435
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__console_0_no-public-key_12.4.56.0_x-ww_dcb850df
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_console_0
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__console_0_no-public-key_12.4.56.0_x-ww_dcb850df
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__console_0_no-public-key_12.4.56.0_x-ww_dcb850df.manifest
XP_MANIFEST_PATH=manifests\x86__console_0_no-public-key_12.4.56.0_x-ww_dcb850df.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__console_0_no-public-key_12.4.56.0_x-ww_dcb850df.cat
XP_CATALOG_PATH=manifests\x86__console_0_no-public-key_12.4.56.0_x-ww_dcb850df.cat
XP_PAYLOAD_PATH=x86__console_0_no-public-key_12.4.56.0_x-ww_dcb850df
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_console_0,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\console\dll\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\console\dll\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_xblconsole_none_12.4.56.0_none_ddf88b7dceaf5524
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_xblconsole_no-public-key_12.4.56.0_x-ww_f8810c98
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=xblconsole
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_xblconsole_no-public-key_12.4.56.0_x-ww_f8810c98
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_xblconsole_no-public-key_12.4.56.0_x-ww_f8810c98.manifest
XP_MANIFEST_PATH=manifests\msil_xblconsole_no-public-key_12.4.56.0_x-ww_f8810c98.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_xblconsole_no-public-key_12.4.56.0_x-ww_f8810c98.cat
XP_CATALOG_PATH=manifests\msil_xblconsole_no-public-key_12.4.56.0_x-ww_f8810c98.cat
XP_PAYLOAD_PATH=msil_xblconsole_no-public-key_12.4.56.0_x-ww_f8810c98
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=xblconsole,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\console\dll\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_xblconsole_none_12.4.56.0_none_ddf88b7dceaf5524
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_xblconsole_no-public-key_12.4.56.0_x-ww_f8810c98
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=xblconsole
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_xblconsole_no-public-key_12.4.56.0_x-ww_f8810c98
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_xblconsole_no-public-key_12.4.56.0_x-ww_f8810c98.manifest
XP_MANIFEST_PATH=manifests\msil_xblconsole_no-public-key_12.4.56.0_x-ww_f8810c98.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_xblconsole_no-public-key_12.4.56.0_x-ww_f8810c98.cat
XP_CATALOG_PATH=manifests\msil_xblconsole_no-public-key_12.4.56.0_x-ww_f8810c98.cat
XP_PAYLOAD_PATH=msil_xblconsole_no-public-key_12.4.56.0_x-ww_f8810c98
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=xblconsole,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\audit\AuditParam.cs ===
/*
 *  AuditParam.cs
 *  Copyright (c) Microsoft Corporation.  All Rights Reserved.
 *
 */

using System;
using System.Diagnostics;

using xonline.common.sql.webstore;

namespace xonline.common.audit
{
    public class AuditParam {
        private  string name;
        internal string value;

        private AuditParam(string name) {
            Debug.Assert(name != null);
            this.name = name;
        }

        public AuditParam(
            string name, string value
        ) : this(name) {
            this.value = value;
        }

        public AuditParam(
            string name, int value
        ) : this(name) {
            this.value = value.ToString();
        }

        public AuditParam(
            string name, short value
        ) : this(name) {
            this.value = value.ToString();
        }

        public AuditParam(
            string name, byte value
        ) : this(name) {
            this.value = value.ToString();
        }

        public AuditParam(
            string name, bool value
        ) : this(name) {
            this.value = value.ToString();
        }

        public AuditParam(
            string name, double value
        ) : this(name) {
            this.value = value.ToString();
        }

        public AuditParam(
            string name, DateTime value
        ) : this(name) {
            this.value = value.ToString();
        }

        public AuditParam(
            string name, Guid value
        )
            : this(name)
        {
            this.value = value.ToString();
        }

        public AuditParam(
            WSClient wsClient
        ) {
            name  = wsClient.StoredProc;
            value = wsClient.GetCallSignature().Substring(name.Length + 1);
        }

        public string Name {
            get { return name; }
        }

        public string Value {
            get { return value; }
        }

        internal int Size {
            get { return name.Length * 2 + (value == null ? 0 : value.Length); }
        }
    }

    public class AuditXmlParam : AuditParam {
        public AuditXmlParam(
            string name, string value
        ) : base(name, value) {
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\audit\AuditInfo.cs ===
/*
 *  AuditInfo.cs
 *  Copyright (c) Microsoft Corporation.  All Rights Reserved.
 *
 *  The AuditInfo class contains data for a single audit point.
 *  AuditInfo is typically buffered on an AuditStream until it
 *  is written to the AuditLog.
 * 
 */

using System;
using System.Collections.Generic;
using System.Text;
using System.Web;
using System.Xml;

namespace xonline.common.audit
{
    public class AuditInfo {

        private ulong            userPuid;
        private Guid             correlationId;
        private AuditSubsystem   subsystem;
        private string           apiName;
        private string           auditMessage;
        private List<AuditParam> auditParams;
        private DateTime         timestamp;
        private bool             optional;
        private int              size;

        internal AuditInfo(
            ulong          userPuid,
            Guid           correlationId, 
            AuditSubsystem subsystem,
            string         apiName,
            string         auditMessage,
            AuditParam[]   auditParams, 
            DateTime       timestamp,
            bool           optional
        ) {
            this.userPuid      = userPuid;
            this.correlationId = correlationId;
            this.subsystem     = subsystem;
            this.apiName       = apiName;
            this.auditMessage  = auditMessage;
            this.auditParams   = new List<AuditParam>(auditParams.Length);
            this.timestamp     = timestamp;
            this.optional      = optional;

            foreach (AuditParam auditParam in auditParams) {
                this.auditParams.Add(auditParam);
                this.size += auditParam.Size;
            }
        }

        internal Guid CorrelationId {
            get { return correlationId; }
        }

        internal string ApiName {
            get { return apiName; }
        }

        internal string Message {
            get { return auditMessage; }
        }

        internal bool Optional {
            get { return optional; }
        }

        internal int Size {
            get { return size; }
        }

        internal AuditSubsystem Subsystem {
            get { return subsystem; }
        }

        internal DateTime Timestamp {
            get { return timestamp;  }
        }

        internal ulong UserPuid {
            get { return userPuid; }
        }

        internal string ToXml()
        {
            // guess at initial capacity based on number of params and size of text
            StringBuilder stringBuilder = new StringBuilder((auditParams.Count) * 8 + size + 32);
            stringBuilder.AppendLine("<params>");

            foreach (AuditParam auditParam in auditParams) {
                if (auditParam is AuditXmlParam) {

                    // it's supposed to be XML,  but if it does
                    // not parse,  just fall through and encode

                    try {
                        XmlDocument document = new XmlDocument();
                        document.LoadXml(auditParam.value);
                        stringBuilder.AppendLine("<" + auditParam.Name + ">" + document.DocumentElement.OuterXml + "</" + auditParam.Name + ">");

                        continue;
                    }
                    
                    catch 
                    {
                        // ignore it and encode with HTML below
                    }
                }

                stringBuilder.AppendLine("<" + auditParam.Name + ">" + HttpUtility.HtmlEncode(auditParam.Value) + "</" + auditParam.Name + ">");
            }

            stringBuilder.AppendLine("</params>");
            return stringBuilder.ToString();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\audit\AuditSettings.cs ===
/*
 *  AuditLog.cs
 *  Copyright (c) Microsoft Corporation.  All Rights Reserved.
 *
 */

using System;

using xonline.common.config;
using xonline.common.service;

namespace xonline.common.audit
{
    public enum AuditSubsystem
    {
        XBOS,
        XUACS,
        XCBK,
        DMP,
        BDK,
        SUPPORT,
        MUSICNET,
        CTP,

        // if you add  something  here,  then
        // be sure to add to the switch below
    }

    internal class AuditSettings {
        internal static string SubsystemName(
            AuditSubsystem subsystem
        ) {
            switch (subsystem) {
                case AuditSubsystem.XBOS    : return "xbos";
                case AuditSubsystem.XUACS   : return "xuacs";
                case AuditSubsystem.XCBK    : return "xcbk";
                case AuditSubsystem.DMP     : return "dmp";
                case AuditSubsystem.BDK     : return "bdk";
                case AuditSubsystem.SUPPORT : return "support";
                case AuditSubsystem.MUSICNET : return "musicnet";
                case AuditSubsystem.CTP     : return "ctp";
            }

            throw new XRLException(
                HResult.XONLINE_E_AUDIT_INVALID_SUBSYSTEM, XEvent.Id.AUDIT_INVALID_SUBSYSTEM,
                "AuditSettings.SubsystemName(): invalid subsystem " + subsystem.ToString()
            );
        }

        internal static bool Enabled(
            AuditSubsystem subsystem
        ) {
            string subsystemName = SubsystemName(subsystem) + "_auditEnabled";

            try {
                return Config.GetBoolSetting(subsystemName);
            } catch (ApplicationException) {
                throw new XRLException(
                    HResult.XONLINE_E_AUDIT_NO_SETTING, XEvent.Id.AUDIT_NO_SETTING,
                    "AuditSettings.Enabled(): no setting for '" + subsystemName + "'"
                );
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\audit\AuditStream.cs ===
/*
 * AuditStream.cs
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.
 *
 * AuditStream is the public class for writing to the audit log.
 * All the other audit classes are internal.  Users access  the
 * stream for their thread using static methods.
 */

using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Threading;

using xonline.common.mgmt;
using xonline.common.service;
using xonline.common.sql.webstore;

[assembly: XomAreaDefinition(XomAreaName.audit)]

namespace xonline.common.audit
{
    public class AuditStream {

        private const string    SLOT_NAME = "xonline.common.audit.stream";
        private List<AuditInfo> auditList = new List<AuditInfo>();
        private Guid            correlationId = Guid.Empty;
        private DateTime        timestamp;
        private ulong           userPuid;


        private AuditStream() {
        }

        private Guid CorrelationId {
            get {
                if (correlationId == Guid.Empty) correlationId = Guid.NewGuid();
                return correlationId;
            }
        }

        private void Flush(bool all) {
            List<AuditInfo> flushList = new List<AuditInfo>();

            foreach (AuditInfo auditInfo in auditList) {
                flushList.Add(auditInfo);

                if (! auditInfo.Optional) {
                    foreach (AuditInfo flushInfo in flushList) {
                        if (auditInfo.UserPuid == 0) continue;
                        AuditLog.Write(flushInfo);
                    }

                    flushList.Clear();
                }
            }

            // if there is unflushed  optional  data,  then
            // put it back on the audit list to flush later

            auditList = flushList;
        }

        private void Clear() {
            userPuid      = 0;
            correlationId = Guid.Empty;

            auditList.Clear();
        }

        private void Write(
            ulong             userPuid,
            AuditSubsystem    subsystem,
            string            apiName,
            string            auditMessage,
            List<AuditParam>  auditParams,
            bool              optional
        ) {
            AuditParam[] array = new AuditParam[auditParams.Count];
            auditParams.CopyTo(array);
            Write(userPuid, subsystem, apiName, auditMessage, array, optional);
        }

        private void Write(
            ulong          userPuid,
            AuditSubsystem subsystem,
            string         apiName,
            string         auditMessage,
            AuditParam[]   auditParams,
            bool           optional
        )
        {
            // check if auditing is disabled for the subsystem
            if (! AuditSettings.Enabled(subsystem)) return;
            if (correlationId == Guid.Empty) correlationId = Guid.NewGuid();

            // if the puid is zero, then use existing  puid,
            // and then save the puid with the audit stream

            if (userPuid == 0) userPuid = this.userPuid;
            this.userPuid = userPuid;

            // timestamp is part of key.  rounding renders
            // values within 3.333 milliseconds  identical

            DateTime timestamp = DateTime.UtcNow;
            this.timestamp = this.timestamp.AddMilliseconds(4);

            if (timestamp > this.timestamp)
                this.timestamp = timestamp;
            else {
                timestamp = this.timestamp;
            }

            // add the audit info to the list for  this  stream
            auditList.Add(new AuditInfo(
                userPuid, correlationId, subsystem, apiName,
                auditMessage, auditParams, timestamp, optional
            ));
        }

        // public static methods

        public static void Cleanup(bool flush) {
            try {
                try {
                    AuditStream auditStream = GetAuditStream();
                    if (flush) auditStream.Flush(false);
                }
                finally {
                    GetAuditStream().Clear();
                }
            }

            // failure to audit should not cause larger failures

            catch (Exception e) {
                Xom.Log(XomAreaName.audit, "Failed to cleanup audit context, " + e.Message);
            }
        }

        public static void Flush() {
            try {
                AuditStream auditStream = GetAuditStream();
                auditStream.Flush(false);
            } catch (Exception e) {
                Xom.Log(XomAreaName.audit, "Failed to flush audit stream, " + e.Message);
            }
        }

        public static void Write(
            ulong          userPuid,
            AuditSubsystem subsystem,
            WSClient       webstoreClient,
            string         auditMessage
        ) {
            try {
                Write(userPuid, subsystem, webstoreClient, auditMessage, false);
            } catch (Exception e) {
                Xom.Log(XomAreaName.audit, "Failed to write to audit stream, " + e.Message);
            }
        }

        public static void Write(
            ulong          userPuid,
            AuditSubsystem subsystem,
            string         apiName,
            string         auditMessage,
            params         AuditParam[] auditParams
        )
        {
            try {
                AuditStream auditStream = AuditStream.GetAuditStream();
                auditStream.Write(userPuid, subsystem, apiName, auditMessage, auditParams, false);
            } catch (Exception e) {
                Xom.Log(XomAreaName.audit, "Failed to write to audit stream, " + e.Message);
            }
        }

        public static void Write(
            ulong            userPuid,
            AuditSubsystem   subsystem,
            string           apiName,
            string           auditMessage,
            List<AuditParam> auditParams
        )
        {
            try {
                AuditStream auditStream = AuditStream.GetAuditStream();
                auditStream.Write(userPuid, subsystem, apiName, auditMessage, auditParams, false);
            } catch (Exception e) {
                Xom.Log(XomAreaName.audit, "Failed to write to audit stream, " + e.Message);
            }
        }

        public static void WriteOptional(
            ulong          userPuid,
            AuditSubsystem subsystem,
            WSClient       webstoreClient,
            string         auditMessage
        ) {
            try {
                Write(userPuid, subsystem, webstoreClient, auditMessage, true);
            } catch (Exception e) {
                Xom.Log(XomAreaName.audit, "Failed to write to audit stream, " + e.Message);
            }
        }

        public static void WriteOptional(
            ulong               userPuid,
            AuditSubsystem      subsystem,
            string              apiName,
            string              auditMessage,
            params AuditParam[] auditParams
        ) {
            try {
                AuditStream auditStream = AuditStream.GetAuditStream();
                auditStream.Write(userPuid, subsystem, apiName, auditMessage, auditParams, true);
            } catch (Exception e) {
                Xom.Log(XomAreaName.audit, "Failed to write to audit stream, " + e.Message);
            }
        }

        public static void WriteOptional(
            ulong            userPuid,
            AuditSubsystem   subsystem,
            string           apiName,
            string           auditMessage,
            List<AuditParam> auditParams
        ) {
            try {
                AuditStream auditStream = AuditStream.GetAuditStream();
                auditStream.Write(userPuid, subsystem, apiName, auditMessage, auditParams, true);
            } catch (Exception e) {
                Xom.Log(XomAreaName.audit, "Failed to write to audit stream, " + e.Message);
            }
        }

        // internal/private static routines all called by the public static routines
        private static void Write(
            ulong          userPuid,
            AuditSubsystem subsystem,
            WSClient       webstoreClient,
            string         auditMessage,
            bool           optional
        ) {
            List<AuditParam> auditList = new List<AuditParam>();
            SqlParameterCollection parameters = webstoreClient.Parameters;

            foreach (SqlParameter parameter in parameters) {
                string parameterValue = string.Empty;

                // This kludge is meant to avoid the behavior where the default .NET ToString()
                // behavior for System.Byte[] results in the literal "System.Byte[]".
                if (parameter.DbType == System.Data.DbType.Binary)
                    parameterValue = "0x" + ByteConvert.ToString((byte[])parameter.Value);
                else
                    parameterValue = parameter.Value.ToString();

                auditList.Add(new AuditParam(parameter.ParameterName.TrimStart('@'), parameterValue));
            }

            AuditStream auditStream = AuditStream.GetAuditStream();
            auditStream.Write(userPuid, subsystem, webstoreClient.StoredProc, auditMessage, auditList, optional);
        }

        private static AuditStream GetAuditStream()
        {
            LocalDataStoreSlot slot = Thread.GetNamedDataSlot(SLOT_NAME);
            AuditStream auditStream = (AuditStream) Thread.GetData(slot);

            if (auditStream == null) {
                auditStream = new AuditStream();
                Thread.SetData(slot, auditStream);
            }

            return auditStream;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\dll\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\config\ConfigXmgmtCmd.cs ===
using System;
using System.Runtime.InteropServices;
using xonline.common.mgmt;
using xonline.common.service;
using xonline.common.utilities2;

namespace xonline.common.config
{

[ComVisible(false)]
public class ConfigXmgmtCmd
{
    private XomAdminSession _xomAdminSession = null;
    private int _timeout = 0;

    public static void Init()
    {
        XomControl.ControlRequestEvent += ConfigXmgmtCmd.OnControlRequest;
    }

    private static void OnControlRequest(object sender, ControlRequestEventArgs args)
    {
        try
        {
            switch (args.Command)
            {
                case "help":
                    XomControlConnection.SendMessage(
                        "Config help:\r\n" +
                        " configcache -- display the state of the config cache \r\n" +
                        " configcacheflush -- drops all cached configuration from memory\r\n" +
                        " configcacherefresh -- forces the config class to look for\r\n" +
                        "                       config updates in NPDB immediately\r\n" +
                        " ForceGC -- force an immediate garbage collection \r\n" +
                        "\r\n",
                        args.RequestId);
                    args.Handled = true;
                    break;

                case "configcache":
                    {
                        string cacheCommand = (args.CommandArgs.Length != 0) ? args.CommandArgs[0] : string.Empty;
                        XomControlConnection.SendMessage(Config.DefaultInstance.ProcessConfigCache(cacheCommand, args.CommandArgs), args.RequestId);
                        args.Handled = true;
                    }  break;

                case "configcacherefresh":
                    XomControlConnection.SendMessage(Config.DefaultInstance.ProcessConfigCacheRefresh(), args.RequestId);
                    args.Handled = true;
                    break;

                case "configcacheflush":
                    Config.DefaultInstance.DiscardCachedValues();
                    XomControlConnection.SendMessage("Cache flush successful.", args.RequestId);
                    args.Handled = true;
                    break;

                case "forcegc":
                    long bytes = GC.GetTotalMemory(true);
                    XomControlConnection.SendMessage("Collection complete. Bytes currently allocated: " + bytes + "\r\n", args.RequestId);
                    args.Handled = true;
                    break;
            }
        }
        catch (Exception e)
        {
            XomControlConnection.SendMessage("Error: " + e + "\r\n\r\n", args.RequestId);
            Xom.NtEvent(XEvent.Id.COMMON_INFO_8, Config.ComponentName + "\n" + "In Config.OnControlRequest\n" + "args.FullCommand: " + args.FullCommand + "\n" + "args.Command: " + args.Command + "\n" + "args.CommandArgs: " + CollectionUtil.ToString(args.CommandArgs) + "\n" + "args.RequestId: " + args.RequestId + "\n");
        }
    }

    public ConfigXmgmtCmd(XomAdminSession xomAdminSession, int timeout)
    {
        _xomAdminSession = xomAdminSession;
        _timeout = timeout;
    }

    public void Close()
    {
        _xomAdminSession.Close();
        _xomAdminSession = null;
    }

    private void CheckAdminSessionOpen()
    {
        if (_xomAdminSession == null)
        {
            throw new Exception("Xmgmt admin session has been closed");
        }
    }

    private string SimpleCommand(
        string process,
        string component,
        string command)
    {
        CheckAdminSessionOpen();

        string[] responses;
        int resultCode;
        _xomAdminSession.SendCommand(
            process,
            component,
            command,
            _timeout,
            out responses,
            out resultCode);

        if (responses.Length != 1)
        {
            throw new Exception(command+" command had "
                + (responses.Length - 1)
                + " responses; 1 response was expected");
        }

        return responses[0];
    }

    public bool ConfigCacheFlush(
        string process,
        string component)
    {
        string response = SimpleCommand(process, component, "configcacheflush");
        return response.Contains("successful");
    }

    public bool ConfigCacheRefresh(
        string process,
        string component)
    {
        string response = SimpleCommand(process, component, "configcacherefresh");
        if (response.StartsWith("No"))
        {
            return false;
        }
        return true;
    }

    private string ConfigCache(
        string process,
        string component,
        string subcommand)
    {
        return SimpleCommand(process, component, "configcache "+subcommand);
    }

    private string ConfigCache(
        string process,
        string component,
        string subcommand,
        string param1)
    {
        return SimpleCommand(process, component, "configcache "+subcommand+" "+param1);
    }

    private string ConfigCache(
        string process,
        string component,
        string subcommand,
        string param1,
        string param2)
    {
        return SimpleCommand(process, component, "configcache "+subcommand+" "+param1+" "+param2);
    }

    public string AssemblyPath(string process, string component)
    {
        return ConfigCache(process, component, "assemblypath");
    }

    public string CacheRefreshInterval(string process, string component)
    {
        return ConfigCache(process, component, "cacherefreshinterval");
    }

    public string Component(string process, string component)
    {
        return ConfigCache(process, component, "component");
    }

    public string ComponentName(string process, string component)
    {
        return ConfigCache(process, component, "componentname");
    }

    public string Environment(string process, string component)
    {
        return ConfigCache(process, component, "environment");
    }

    public string Interface(string process, string component, string name, string server)
    {
        return ConfigCache(process, component, "interface", name, server);
    }

    public string Interfaces(string process, string component)
    {
        return ConfigCache(process, component, "interfaces");
    }

    public string InterfaceBucket(string process, string component, string name)
    {
        return ConfigCache(process, component, "interfacebucket", name);
    }

    public string InterfaceBuckets(string process, string component)
    {
        return ConfigCache(process, component, "interfacebuckets");
    }

    public string LatestChangeId(string process, string component)
    {
        return ConfigCache(process, component, "latestchangeid");
    }

    public string MainSiteId(string process, string component)
    {
        return ConfigCache(process, component, "mainsiteid");
    }

    public string MinEventInterval(string process, string component)
    {
        return ConfigCache(process, component, "mineventinterval");
    }

    public string MultiSetting(string process, string component, string name)
    {
        return ConfigCache(process, component, "multisetting", name);
    }

    public string MultiSettings(string process, string component)
    {
        return ConfigCache(process, component, "multisettings");
    }

    public string NpdbConnectionString(string process, string component)
    {
        return ConfigCache(process, component, "npdbconnectionstring");
    }

    public string NpdbDatabase(string process, string component)
    {
        return ConfigCache(process, component, "npdbdatabase");
    }

    public string NpdbServer(string process, string component)
    {
        return ConfigCache(process, component, "npdbserver");
    }

    public string Server(string process, string component)
    {
        return ConfigCache(process, component, "server");
    }

    public string ServerList(string process, string component, string name)
    {
        return ConfigCache(process, component, "serverlist", name);
    }

    public string ServerLists(string process, string component)
    {
        return ConfigCache(process, component, "serverlists");
    }

    public string Setting(string process, string component, string name)
    {
        return ConfigCache(process, component, "setting", name);
    }

    public string Settings(string process, string component)
    {
        return ConfigCache(process, component, "settings");
    }

    public string SiteId(string process, string component)
    {
        return ConfigCache(process, component, "siteid");
    }

    public string VirtualInterface(string process, string component, string name, int siteId)
    {
        return ConfigCache(process, component, "virtualinterface", name, siteId.ToString());
    }

    public string VirtualInterfaces(string process, string component)
    {
        return ConfigCache(process, component, "virtualinterfaces");
    }

    public string VirtualInterfaceList(string process, string component, int siteId)
    {
        return ConfigCache(process, component, "virtualinterfacelist", siteId.ToString());
    }

    public string VirtualInterfaceLists(string process, string component)
    {
        return ConfigCache(process, component, "virtualinterfacelists");
    }

}

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\audit\AuditLog.cs ===
/*
 *  AuditLog.cs
 *  Copyright (c) Microsoft Corporation.  All Rights Reserved.
 *
 */

using System;
using Microsoft.Webstore.WstClient;

using xonline.common.config;
using xonline.common.service;
using xonline.common.sql.webstore;
using xonline.common.mgmt;

namespace xonline.common.audit
{
    internal class AuditLog {

        private AuditLog() {
        }

        internal static void Write(
            AuditInfo auditInfo
        ) {
            using(WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
            {
                // Data is partitioned by user puid
                ws.PartitionType = WstPartitionType.Logical;
                ws.SetHashVal(auditInfo.UserPuid);

                ws.StoredProc = "dbo.p_user_add_audit_info";

                ws.AddParameter(ParamType.RETVAL, "@ret", 0);
                ws.AddParameter("@bi_user_puid", (long) auditInfo.UserPuid);
                ws.AddParameter("@ui_correlation_id", auditInfo.CorrelationId.ToString());
                ws.AddParameter("@dt_timestamp", auditInfo.Timestamp);
                ws.AddParameter("@vc_subsystem_name", AuditSettings.SubsystemName(auditInfo.Subsystem));
                ws.AddParameter("@vc_api_name", auditInfo.ApiName);
                ws.AddParameter("@vc_audit_message", auditInfo.Message);
                ws.AddParameter("@xml_audit_info", auditInfo.ToXml());
                ws.AddParameter("@si_hash_bucket", ws.Partition);

                ws.ExecuteNonQuery();

                HResult hr = HResult.S_OK;
                string message = string.Empty;

                try {
                    hr = (uint) ws.GetIntParameter("@ret");
                } catch (Exception e) {
                    message = string.Format("\n{0}\n", e.ToString());
                    hr = HResult.XONLINE_E_AUDIT_LOG_FAILURE;
                    throw e;
                } finally {
                    if (hr.IsFailure())
                    {
                        Xom.NtEvent(XEvent.Id.AUDIT_LOG_FAILURE,
                            string.Format("Error writing to audit log, hr = {0}\n{1}", hr, message)
                        );
                    }
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\dll\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\dll\Installer.cs ===
using System;
using System.ComponentModel;

using xonline.common.installer;
using xonline.common.mgmt;

namespace xonline.core
{
    [RunInstaller(true)]
    public class CoreInstaller : XomConfiguratorInstall
    {
    }

    [RunInstaller(true)]
    public class CorePerformanceCounterInstaller : XomPerformanceCounterInstall
    {
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\diagnostics\assert.cs ===
using System;
using System.Runtime.InteropServices;

namespace xonline.common.diagnostics
{
    [ComVisible(false)]
    public class Assert
    {
        public static void IsTrue(bool f)
        {
            IsTrue(f, "Assertion failed!");
        }
        
        public static void IsTrue(bool f, string msg)
        {
            if (!f) 
                throw new AssertionFailedException(msg);
        }
        
        
        public static void AreEqual(int expected, int got)
        {
            AreEqual(expected, got, null);
        }
        public static void AreEqual(int expected, int got, string msg)
        {
            if (expected != got)
                throw new AssertionFailedException("Assertion failed!  " + expected.ToString() + " does not equal " + got.ToString() + 
                    (msg == null ? "" : msg));
        }
        public static void AreEqual(uint expected, uint got)
        {
            AreEqual(expected, got, null);
        }
        public static void AreEqual(uint expected, uint got, string msg)
        {
            if (expected != got)
                throw new AssertionFailedException("Assertion failed!  " + expected.ToString() + " (" + expected.ToString("x8") + ") " + 
                    "does not equal " + got.ToString() + " (" + got.ToString("x8") + ")" + 
                    (msg == null ? "" : msg));
        }
        public static void AreEqual(long expected, long got)
        {
            AreEqual(expected, got, null);
        }
        public static void AreEqual(long expected, long got, string msg)
        {
            if (expected != got)
                throw new AssertionFailedException("Assertion failed!  " + expected.ToString() + " does not equal " + got.ToString() + 
                    (msg == null ? "" : msg));

        }
        public static void AreEqual(ulong expected, ulong got)
        {
            AreEqual(expected, got, null);
        }
        public static void AreEqual(ulong expected, ulong got, string msg)
        {
            if (expected != got)
                throw new AssertionFailedException("Assertion failed!  " + expected.ToString() + " does not equal " + got.ToString() +
                    (msg == null ? "" : msg));
        }
        public static void AreEqual(IComparable expected, object got)
        {
            AreEqual(expected, got, null);
        }
        public static void AreEqual(IComparable expected, object got, string msg)
        {
            if (expected == null && got == null)
            {
                return;
            }
            if (expected == null && got != null) {
                throw new AssertionFailedException("Assertion failed!  Expected null, Got " + got.ToString() +
                    (msg == null ? "" : msg));
            }
            if (expected != null && got == null) {
                throw new AssertionFailedException("Assertion failed!  Expected " + expected.ToString() + ", Got null" +
                    (msg == null ? "" : msg));
            }
            if (got.GetType() != expected.GetType()) {
               throw new AssertionFailedException("Assertion failed!  " + expected.ToString() + " is not the same type as " + got.ToString() +
                    (msg == null ? "" : msg));
            }
            if (0 != expected.CompareTo(got)) {
                throw new AssertionFailedException("Assertion failed!  " + expected.ToString() + " does not equal " + got.ToString() +
                    (msg == null ? "" : msg));
            }
        }

        public static void AreEqual(object expected, object got)
        {
            AreEqual(expected, got, null);
        }
        public static void AreEqual(object expected, object got, string msg)
        {
            if (expected == null && got == null)
            {
                return;
            }
            if (expected == null && got != null) {
                throw new AssertionFailedException("Assertion failed!  Expected null, Got " + got.ToString() + 
                    (msg == null ? "" : msg));
            }
            if (expected != null && got == null) {
                throw new AssertionFailedException("Assertion failed!  Expected " + expected.ToString() + ", Got null" + 
                    (msg == null ? "" : msg));
            }
            if (got.GetType() != expected.GetType()) {
               throw new AssertionFailedException("Assertion failed!  " + expected.ToString() + " is not the same type as " + got.ToString() +
                    (msg == null ? "" : msg));
            }
            if (expected.ToString() != got.ToString()) {
                throw new AssertionFailedException("Assertion failed!  " + expected.ToString() + " does not equal " + got.ToString() +
                    (msg == null ? "" : msg));
            }
        }

        public static void AreEqual(Array expected, Array got)
        {
            AreEqual(expected, got, null);
        }
        public static void AreEqual(Array expected, Array got, string msg)
        {
            if (expected == null && got == null)
            {
                return;
            }
            if (expected == null && got != null) {
                throw new AssertionFailedException("Assertion failed!  Expected null, Got " + got.ToString() + 
                    (msg == null ? "" : msg));
            }
            if (expected != null && got == null) {
                throw new AssertionFailedException("Assertion failed!  Expected " + expected.ToString() + ", Got null" + 
                    (msg == null ? "" : msg));
            }
            
            if (expected.Length != got.Length) {
                throw new AssertionFailedException("Assertion failed!  Number of elements in first array don't equal the number of elements in the second!" + 
                    (msg == null ? "" : msg));
            }   
            if (expected.Length == 0) {
                return;
            }     
            if (got.GetValue(new int[] {0}).GetType() != expected.GetValue(new int[] {0}).GetType()) {
               throw new AssertionFailedException("Assertion failed!  " + expected.ToString() + " is not the same type as " + got.ToString() + 
                    (msg == null ? "" : msg));
            }
            for(int i = 0; i < expected.Length; i++)
            {
                if (expected.GetValue(new int[] {i}) is IComparable &&
                    got.GetValue(new int[] {i}) is IComparable)
                {
                    if (0 != ((IComparable)expected.GetValue(new int[] {i})).CompareTo(got.GetValue(new int[] {i}))) 
                    {
                        throw new AssertionFailedException("Assertion failed!  In element " + i + " of the array, " + expected.GetValue(new int[] {i}).ToString() + " does not equal " + got.GetValue(new int[] {i}).ToString() +
                            (msg == null ? "" : msg));
                    }    
                }
                else
                {
                    if (expected.GetValue(new int[] {i}) != got.GetValue(new int[] {i})) 
                    {
                        throw new AssertionFailedException("Assertion failed!  In element " + i + " of the array, " + expected.GetValue(new int[] {i}).ToString() + " does not equal " + got.GetValue(new int[] {i}).ToString() +
                            (msg == null ? "" : msg));
                    }    
                }                
                
                    
            }        
        }
    }
    
    [ComVisible(false)]
    public class AssertionFailedException : ApplicationException
    {
        public AssertionFailedException()                           : base()        {}
        public AssertionFailedException(string msg )                : base(msg)     {}
        public AssertionFailedException(string msg, Exception e)    : base(msg, e)  {}
        
    }
        
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\etx\lib\Collections.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using System.Xml.Serialization;

using xonline.common.service;
using xonline.core.wiredata;
using xonline.common.utilities2;

namespace xonline.common.core.etx.collections
{
    /// <summary>
    /// Producer key descriptor identifiers
    /// </summary>
    public enum ProducerCollectionKeys
    {
        Fingerprint
    }

    /// <summary>
    /// Represents a collection of Producer, addressable by their symbols or id keys.
    /// </summary>
    /// <remarks>
    /// This object is not thread safe, the burden of synchronization rests on the consumer.
    /// </remarks>
    public class ProducerCollection : MultiKeyCollection<ProducerCollectionKeys, Producer>
    {
        /// <summary>
        /// Initializes a new instance of the ProducerCollection class.
        /// </summary>
        public ProducerCollection()
            : base
            (
                new KeyDescriptor<ProducerCollectionKeys, Blob, Producer>(ProducerCollectionKeys.Fingerprint, p => p.Fingerprint)
            )
        {
            Fingerprints = new MultiKeyLookup<ProducerCollectionKeys, Blob, Producer>(this, ProducerCollectionKeys.Fingerprint);
        }

        /// <summary>
        /// Gets a fingerprint lookup helper.
        /// </summary>
        public MultiKeyLookup<ProducerCollectionKeys, Blob, Producer> Fingerprints
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// DataField key descriptor identifiers
    /// </summary>
    public enum DataFieldCollectionKeys
    {
        Ordinal,
        Name
    }

    /// <summary>
    /// Represents a collection of DataFields, addressable by ordinal or name keys.
    /// </summary>
    /// <remarks>
    /// This object is not thread safe, the burden of synchronization rests on the consumer.
    /// </remarks>
    public class DataFieldCollection : MultiKeyCollection<DataFieldCollectionKeys, DataField>
    {
        /// <summary>
        /// Initializes a new instance of the DataFieldCollection class.
        /// </summary>
        public DataFieldCollection()
            : base
            (
                new KeyDescriptor<DataFieldCollectionKeys, uint, DataField>(DataFieldCollectionKeys.Ordinal, e => e.Ordinal),
                new KeyDescriptor<DataFieldCollectionKeys, string, DataField>(DataFieldCollectionKeys.Name, e => e.Name)
            )
        {
            Ordinals = new MultiKeyLookup<DataFieldCollectionKeys, uint, DataField>(this, DataFieldCollectionKeys.Ordinal);
            Names = new MultiKeyLookup<DataFieldCollectionKeys, string, DataField>(this, DataFieldCollectionKeys.Name);
        }

        /// <summary>
        /// Gets a ordinal lookup helper.
        /// </summary>
        public MultiKeyLookup<DataFieldCollectionKeys, uint, DataField> Ordinals
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets a name lookup helper.
        /// </summary>
        public MultiKeyLookup<DataFieldCollectionKeys, string, DataField> Names
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Event key descriptor identifiers
    /// </summary>
    public enum EventCollectionKeys
    {
        Fingerprint,
        Ordinal,
        Symbol,
        LogStringId
    }

    /// <summary>
    /// Represents a collection of Events, addressable by value or symbol keys.
    /// </summary>
    /// <remarks>
    /// This object is not thread safe, the burden of synchronization rests on the consumer.
    /// </remarks>
    public class EventCollection : MultiKeyCollection<EventCollectionKeys, Event>
    {
        /// <summary>
        /// Initializes a new instance of the EventCollection class.
        /// </summary>
        public EventCollection() 
            : base
            (
                new MultiKeyCollectionOptions<EventCollectionKeys>() { NullOmittingDescriptors = new EventCollectionKeys[] { EventCollectionKeys.LogStringId } },
                new KeyDescriptor<EventCollectionKeys, string, Event>(EventCollectionKeys.Symbol, e => e.Symbol),
                new KeyDescriptor<EventCollectionKeys, uint, Event>(EventCollectionKeys.Ordinal, e => e.Ordinal),
                new KeyDescriptor<EventCollectionKeys, Blob, Event>(EventCollectionKeys.Fingerprint, e => e.Fingerprint),
                new KeyDescriptor<EventCollectionKeys, string, Event>(EventCollectionKeys.LogStringId, e => e.LogStringId)
            )
        {
            Symbols = new MultiKeyLookup<EventCollectionKeys, string, Event>(this, EventCollectionKeys.Symbol);
            Ordinals = new MultiKeyLookup<EventCollectionKeys, uint, Event>(this, EventCollectionKeys.Ordinal);
            Fingerprints = new MultiKeyLookup<EventCollectionKeys, Blob, Event>(this, EventCollectionKeys.Fingerprint);
            LogStringIds = new MultiKeyLookup<EventCollectionKeys, string, Event>(this, EventCollectionKeys.LogStringId);
        }

        /// <summary>
        /// Gets a symbol lookup helper.
        /// </summary>
        public MultiKeyLookup<EventCollectionKeys, string, Event> Symbols
        {
            get;
            private set;
        }

        /// <summary>
        /// Ordinal position of the event in the collection.
        /// </summary>
        public MultiKeyLookup<EventCollectionKeys, uint, Event> Ordinals
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets a fingerprint lookup helper.
        /// </summary>
        public MultiKeyLookup<EventCollectionKeys, Blob, Event> Fingerprints
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets a logstringid lookup helper.
        /// </summary>
        public MultiKeyLookup<EventCollectionKeys, string, Event> LogStringIds
        {
            get;
            private set;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\etx\lib\Common.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using System.Xml.Serialization;

using xonline.common.service;
using xonline.core.wiredata;

namespace xonline.common.core.etx
{
    /// <summary>
    /// Enumeration of possible privacy treatment flags
    /// </summary>
    [Flags]
    public enum PrivacyTreatments : long
    {
        PassThrough = 0,
        LBI = 1,
        MBI = 2
    }

    /// <summary>
    /// Enumeration of possible ETX DataField auto values.
    /// </summary>
    public enum AutoValues
    {
        Unknown,

        CallSiteSequenceId,
        CallSiteVersion,
        Callstack,
        ConsoleId,
        ConsumerSequenceId,
        CountryId,
        CultureId,
        FamilySettings,
        FlowToken,
        FreeStorageSize,
        GameMovieAndTvRatings,
        Ipv4Address,
        LanguageId,
        LogonId,
        LogStringId,
        MachineId,
        MembershipType,
        OmnitureArea,
        PlayTimerSettings,
        PrimarySgNonce,
        Processor,
        ProcessType,
        ProfileCounts,
        SystemVersion,
        SystemSettings,
        ThreadId,
        Timestamp,
        TimeZone,
        TitleId,
        TitleVersion,
        TotalStorageSize,
        VideoInfo,
        VisitorId,
        WebRepGroupId,
        XuidFromUserIndex,
        LookupRequestHeader,
        LookupCookie,
        LookupQueryString,
        LookupQuerystringLeftover,
    }

    /// <summary>
    /// Enumeration of origin of possible ETX DataField auto values.
    /// </summary>
    public enum AutoValueCreators
    {
        Unknown,

        LogMacro,
        LocalConsumer,
        LiveUploaderDynamic,
        LiveService
    }

    /// <summary>
    /// Enumeration of types for ETX DataField inType.
    /// </summary>
    public enum DataFieldType
    {
        Unknown,

        UnicodeString,
        AnsiString,
        Int8,
        UInt8,
        Int16,
        UInt16,
        Int32,
        UInt32,
        Int64,
        UInt64,
        Float,
        Double,
        Binary,
        GUID
    }

    /// <summary>
    /// Category to which the associated event belongs to.
    /// </summary>
    public enum EventCategory : int
    {
        Invalid                 = 0,
        Standard                = 1,
        Clickstream             = 2,
        OfflineClickstream      = 3,
        LiveBusinessCritical    = 4,
        LocalDebug              = 5,
        HighFrequency           = 6,
        TitleStandard           = 7,
        XlfsUpload              = 8
    }

    /// <summary>
    /// Enumeration of types for ETX DataField outType.
    /// </summary>
    public enum OutputType
    {
        Unknown,        // unrecognized output type

        String,         // simple conversion
        Number,         // signed decimal: 30, -1
        HexNumber,      // hexadecimal: 1E, FFFFFFFF
        Float,          // floating point: 30.14, -1.1
        DateTime,       // "Xom" style: 2010/07/03 13:22:10.477
        GUID,           // Guid: {203bc72d-5d50-4f6d-aedc-6c2fa6e450d5}
        HResult,        // lookup: "XONLINE_E_SIGNATURE_LICENSE_COUNT_EXCEEDED"
        XexVersion,     // full dotted version: 2.0.1881.0
        TitleName,      // lookup: "Halo 3"
        ConsoleId,      // dash version: 012345678905

        // Privacy related out types
        SgNonce,        // (MBI+PII) The SGNonce field of all scrubbed LBI logs MUST be all empty (empty string)
        FlowToken,      // (MBI+PII) The FlowToken field of all scrubbed LBI logs MUST be masked so that the field is all empty (empty string)
        Ipv4Address,    // (MBI) The IPAddress field of all scrubbed LBI logs MUST be masked so that the field is all empty (empty string)
        Xuid,           // (MBI+PII) Detect and convert to PXUID via a one-way hash across all instances in scrubbed LBI logs
        LBIOnlyGUID,    // (LBI) Speech SessionID field of all MBI logs MUST be masked so that the field is all empty (empty string)
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\etx\lib\EtxHeaderCache.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.IO;
using System.Linq;
using System.Text;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Serialization;

using xonline.common.config;
using xonline.common.utilities2;
using xonline.common.sql.sqlclient;
using xonline.common.core.etx.collections;

namespace xonline.common.core.etx
{
    /// <summary>
    /// Stores header definition information.
    /// </summary>
    public struct HeaderEventData
    {
        /// <summary>
        /// Initializes a new instance of the HeaderEventData.
        /// </summary>
        /// <param name="headerDefinition">Field definition to associate with the header.</param>
        /// <param name="modifiedDate">Last modified date to associate with the header.</param>
        public HeaderEventData(Event headerDefinition, DateTime modifiedDate)
            : this()
        {
            if (null == headerDefinition)
            {
                throw new ArgumentNullException("headerDefinition");
            }

            HeaderVersion = (byte)headerDefinition.Value;
            HeaderDefinition = headerDefinition;
            ModifiedDate = modifiedDate;
        }

        /// <summary>
        /// Gets or sets the version associated with a particular header.
        /// </summary>
        public byte HeaderVersion
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the field definition associated with a particular header.
        /// </summary>
        public Event HeaderDefinition
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the modified date associated with a particular header.
        /// </summary>
        public DateTime ModifiedDate
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Exposes a caching object for Header Events.
    /// </summary>
    public class EtxHeaderCache : IEnumerable<HeaderEventData>
    {
        private Dictionary<Byte, HeaderEventData> cache;

        /// <summary>
        /// Gets the Event associated with the specified header version.
        /// </summary>
        /// <param name="headerVersion">The header version to look for.</param>
        /// <returns>Returns an Event representing the Header Fields.</returns>
        public Event this[Byte headerVersion]
        {
            get
            {
                Event result;

                if (TryGet(headerVersion, out result))
                {
                    return result;
                }

                throw new KeyNotFoundException("Could not find the specified header version: " + headerVersion.ToString());
            }
        }

        /// <summary>
        /// Gets all Events within the specified date range.
        /// </summary>
        /// <param name="minModified">Lower bound on the date range.</param>
        /// <param name="maxModified">Upper bound on the date range.</param>
        /// <returns>Returns a collection of all Event Headers modified within the specified date range.</returns>
        public IEnumerable<Event> this[DateTime minModified, DateTime maxModified]
        {
            get
            {
                List<Event> results;

                results = new List<Event>();

                lock (cache)
                {
                    foreach (var header in cache.Values)
                    {
                        if (header.ModifiedDate > minModified && header.ModifiedDate <= maxModified)
                        {
                            results.Add(header.HeaderDefinition);
                        }
                    }
                }

                return results;
            }
        }

        /// <summary>
        /// Gets the number of items in the cache.
        /// </summary>
        public int Count
        {
            get { return cache.Count; }
        }

        /// <summary>
        /// Initializes a new instance of EtxHeaderCache.
        /// </summary>
        public EtxHeaderCache()
        {
            cache = new Dictionary<Byte, HeaderEventData>();
        }

        /// <summary>
        /// Attempts to fetch the specified Event Header definition from the cache.
        /// </summary>
        /// <param name="headerVersion">Header version identifier associated with the target header defintion.</param>
        /// <param name="header">Returns the header definition if found; otherwise null.</param>
        /// <returns>Returns true if header definition is found; otherwise false.</returns>
        public bool TryGet(byte headerVersion, out Event header)
        {
            HeaderEventData result;

            lock (cache)
            {
                if (cache.TryGetValue(headerVersion, out result))
                {
                    header = result.HeaderDefinition;
                    return true;
                }
            }

            header = null;

            return false;
        }

        /// <summary>
        /// Caches a header definition.
        /// </summary>
        /// <param name="headerVersion">Header version identifier associated with the cached header defintion.</param>
        /// <param name="header">Header definition to cache.</param>
        /// <param name="modified">Date the header definition was modified.</param>
        /// <returns>Returns the header definition.</returns>
        public Event Insert(Byte headerVersion, Event header, DateTime modified)
        {
            lock (cache)
            {
                cache[headerVersion] = new HeaderEventData(header, modified);
            }

            return header;
        }

        /// <summary>
        /// Re-initializes the cache to contain the specified set of header definitions.
        /// </summary>
        /// <param name="header">Collection of headers to seed the cache with.</param>
        public void ReplaceHeaders(IEnumerable<HeaderEventData> headers)
        {
            Dictionary<byte, HeaderEventData> replacement;

            if (null == headers)
            {
                throw new ArgumentNullException("headers");
            }

            replacement = new Dictionary<byte, HeaderEventData>();

            foreach (var header in headers)
            {
                replacement.Add(header.HeaderVersion, header);
            }

            cache = replacement;
        }

        /// <summary>
        /// Clears the header definition cache.
        /// </summary>
        public void Clear()
        {
            cache = new Dictionary<byte, HeaderEventData>();
        }

        /// <summary>
        /// Gets an enumerator for all the header definitions in the cache.
        /// </summary>
        /// <returns>Returns an enumerator for all the header definitions in the cache.</returns>
        public IEnumerator<HeaderEventData> GetEnumerator()
        {
            return cache.Values.GetEnumerator();
        }

        /// <summary>
        /// Gets an enumerator for all the header definitions in the cache.
        /// </summary>
        /// <returns>Returns an enumerator for all the header definitions in the cache.</returns>
        IEnumerator IEnumerable.GetEnumerator()
        {
            return cache.Values.GetEnumerator();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\etx\lib\DataField.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using System.Xml.Serialization;

using xonline.common.service;
using xonline.core.wiredata;

namespace xonline.common.core.etx
{
    using collections;

    [XmlRoot(DataField.ELEMENT_NAME)]
    /// <summary>
    /// Represents the data element of the ETX Manifest.
    /// </summary>
    public class DataField : SchemaObject
    {
        #region Constants and Fields

        protected const string ORDINAL_ATTRIBUTE = "ordinal";
        protected const string NAME_ATTRIBUTE = "name";
        protected const string INTYPE_ATRIBUTE = "inType";
        protected const string AUTOVALUE_ATTRIBUTE = "autovalue";
        protected const string AUTOVALUECREATOR_ATTRIBUTE = "autovaluecreator";
        protected const string DEPRECATED_ATTRIBUTE = "deprecated";
        protected const string OMNITUREVAR_ATTRIBUTE = "omniturevar";
        protected const string OUTPUTTYPE_ATTRIBUTE = "outType";
        protected const string ELEMENT_NAME = "data";

        private UInt32 ordinal;
        private string name;
        private string autovalueContent;
        private string autovalueCreatorContent;
        private string inTypeContent;
        private string outTypeContent;
        private AutoValues autovalue;
        private AutoValueCreators autovalueCreator;
        private DataFieldType inType;
        private OutputType outType;
        #endregion

        #region Properties

        /// <summary>
        /// Gets or sets the type associated with the DataField.
        /// </summary>
        public DataFieldType InType
        {
            get
            {
                return inType;
            }
            set
            {
                inType = value;
                inTypeContent = inType.ToString(); // content must be non-empty
            }
        }

        /// <summary>
        /// Gets or sets the AutoValue associated with the DataField.
        /// </summary>
        /// <remarks>
        /// TODO: Do away with nullable, Unknown should take its place
        /// </remarks>
        public AutoValues? AutoValue 
        {
            get
            {
                return autovalue != AutoValues.Unknown ? autovalue : (AutoValues?)null;
            }
            set
            {
                autovalue = value ?? AutoValues.Unknown;
                autovalueContent = (autovalue != AutoValues.Unknown) ? autovalue.ToString() : null;
            }
        }

        /// <summary>
        /// Gets or sets the creator associated with the AutoValue.
        /// </summary>
        /// <remarks>
        /// TODO: Do away with nullable, Unknown should take its place
        /// </remarks>
        public AutoValueCreators? AutoValueCreator {
            get
            {
                return autovalueCreator != AutoValueCreators.Unknown ? autovalueCreator : (AutoValueCreators?)null;
            }
            set
            {
                autovalueCreator = value ?? AutoValueCreators.Unknown;
                autovalueCreatorContent = (autovalueCreator != AutoValueCreators.Unknown) ? autovalueCreator.ToString() : null;
            }
        }

        /// <summary>
        /// Gets or sets a value indicating whether the value will be passed up by the client.
        /// </summary>
        public bool Deprecated { get; set; }

        /// <summary>
        /// Gets or sets an indicator of the omniture variable name.
        /// </summary>
        public string OmnitureVar { get; set; }

        /// <summary>
        /// Gets or sets the canonical output type\format of this field.
        /// </summary>
        public OutputType OutType
        {
            get
            {
                return outType;
            }
            set
            {
                outType = value;
                outTypeContent = value.ToString();
            }
        }

        /// <summary>
        /// Gets the ordinal associated with the DataField.
        /// </summary>
        public UInt32 Ordinal
        {
            get
            {
                return ordinal;
            }
        }

        /// <summary>
        /// Gets the name associated with the DataField.
        /// </summary>
        public string Name
        {
            get
            {
                return name;
            }
        }

        /// <summary>
        /// Gets or sets the text associated with the DataField.
        /// </summary>
        public string Text
        {
            get;
            set;
        }

        #endregion

        /// <summary>
        /// Constructor put in place to appease the System.Xml.Serialization gods.  Should not be used by mortals.
        /// </summary>
        protected DataField()
        {
        }

        /// <summary>
        /// Initializes a new instance of a DataField via deserialization.
        /// </summary>
        /// <param name="reader">The XmlReader stream from which the object is deserialized.</param>
        public DataField(XmlReader reader) : base(reader)
        {
        }

        /// <summary>
        /// Initializes a new instance of a DataField via deserialization.
        /// </summary>
        /// <param name="element">The XElement containing the object definition.</param>
        public DataField(XElement element) : base(element)
        {
        }

        /// <summary>
        /// Initializes a new instance of a DataField via its key values.
        /// </summary>
        /// <param name="ordinal">Ordinal uniquely identifying the DataField.</param>
        /// <param name="name">Name uniquely identifying the DataField.</param>
        public DataField(UInt32 ordinal, string name)
        {
            this.ordinal = ordinal;
            this.name = name;
            this.InType = DataFieldType.AnsiString;
            this.AutoValue = null;
            this.OutType = DefaultOutputType(InType, AutoValue, false);
        }

        /// <summary>
        /// Duplicates the specified DataField but supplies the specified key values.
        /// </summary>
        /// <param name="source">Source DataField to copy non-key values from.</param>
        /// <param name="ordinal">Ordinal uniquely identifying the DataField.</param>
        /// <param name="name">Name uniquely identifying the DataField.</param>
        /// <remarks>The new DataField is not added to any collections automatically.</remarks>
        public DataField(DataField source, UInt32 ordinal, string name)
            : this(ordinal, name)
        {
            if (null == source)
            {
                throw new ArgumentNullException("source");
            }

            AutoValue = source.AutoValue;
            AutoValueCreator = source.AutoValueCreator;
            Deprecated = source.Deprecated;
            InType = source.InType;
            OmnitureVar = source.OmnitureVar;
            OutType = source.OutType;
            Text = source.Text;
        }

        /// <summary>
        /// Determines whether or not the specified items match.
        /// </summary>
        /// <param name="obj">Target of comparison.</param>
        /// <returns>Returns true if the objects are equal; otherwise false.</returns>
        public override bool Equals(object obj)
        {
            DataField target = obj as DataField;

            if (null == target)
            {
                return false;
            }

            return
                Ordinal == target.Ordinal &&
                Name == target.Name &&
                Deprecated == target.Deprecated &&
                InType == target.InType &&
                AutoValue == target.AutoValue &&
                AutoValueCreator == target.AutoValueCreator &&
                OmnitureVar == target.OmnitureVar &&
                OutType == target.OutType;
        }

        /// <summary>
        /// Gets the hash code associated with this object.
        /// </summary>
        /// <returns>Returns a hash of this objects value.</returns>
        public override int GetHashCode()
        {
            return
                Ordinal.GetHashCode() ^
                Name.GetHashCode() ^
                Deprecated.GetHashCode() ^
                InType.GetHashCode() ^
                AutoValue.GetHashCode() ^
                AutoValueCreator.GetHashCode() ^
                (OmnitureVar == null ? 0 : OmnitureVar.GetHashCode()) ^
                OutType.GetHashCode();
        }

        /// <summary>
        /// Converts the DataField to a string representation.
        /// </summary>
        /// <returns>Returns a string representation of this DataField.</returns>
        public override string ToString()
        {
 	        StringBuilder result = new StringBuilder();

            result.AppendFormat(
                "DataField [Ordinal={0}, Name={1}, InType={2}, AutoValue={3}, AutoValueCreator={4}, Deprecated={5}, OmnitureVar={6}, OutputType={7}]",
                Ordinal,
                Name,
                InType,
                AutoValue.HasValue ? AutoValue.ToString() : "(none)",
                AutoValueCreator.HasValue ? AutoValueCreator.ToString() : "(none)",
                Deprecated,
                OmnitureVar ?? "(null)",
                OutType);

            return result.ToString();
        }

        #region EtxSchemaObject Implementation

        /// <summary>
        /// Generates a DataField from its XML representation.
        /// </summary>
        /// <param name="reader">The XElement containing the object definition.</param>
        protected override void ReadElement(XElement element)
        {
            ordinal = ReadAttributeUInt(element, ORDINAL_ATTRIBUTE);
            name = ReadAttribute(element, NAME_ATTRIBUTE);
            inType = ReadAttributeEnum<DataFieldType>(element, INTYPE_ATRIBUTE, DataFieldType.Unknown, out inTypeContent);
            autovalue = ReadAttributeEnum<AutoValues>(element, AUTOVALUE_ATTRIBUTE, AutoValues.Unknown, out autovalueContent);
            autovalueCreator = ReadAttributeEnum<AutoValueCreators>(element, AUTOVALUECREATOR_ATTRIBUTE, AutoValueCreators.Unknown, out autovalueCreatorContent);
            outType = ReadAttributeEnum<OutputType>(element, OUTPUTTYPE_ATTRIBUTE, OutputType.Unknown, out outTypeContent);
            Deprecated = ReadOptionalAttributeBoolFromUInt(element, DEPRECATED_ATTRIBUTE) ?? false;
            OmnitureVar = ReadAttribute(element, OMNITUREVAR_ATTRIBUTE);
            Text = element.Value;

            if (OutType == OutputType.Unknown)
            {
                // We need to stick with the old defaults, from before Vortex existed. The 
                // client manifest compiler will output the new defaults for all future 
                // manifests.
                outType = DefaultOutputType(InType, AutoValue, false);
            }
        }

        /// <summary>
        /// Converts an DataField into its XML representation.
        /// </summary>
        /// <param name="writer">The XmlWriter stream to which the object is serialized.</param>
        protected override void WriteXml(XmlWriter writer)
        {
            WriteAttribute(writer, ORDINAL_ATTRIBUTE, ordinal.ToString());
            WriteAttribute(writer, NAME_ATTRIBUTE, name);
            WriteAttribute(writer, INTYPE_ATRIBUTE, inTypeContent);
            WriteAttribute(writer, AUTOVALUE_ATTRIBUTE, autovalueContent);
            WriteAttribute(writer, AUTOVALUECREATOR_ATTRIBUTE, autovalueCreatorContent);

            if (Deprecated)
            {
                WriteAttribute(writer, DEPRECATED_ATTRIBUTE, 1);
            }

            WriteAttribute(writer, OMNITUREVAR_ATTRIBUTE, OmnitureVar);
            WriteAttribute(writer, OUTPUTTYPE_ATTRIBUTE, outTypeContent);

            writer.WriteString(Text);
        }

        #endregion

        #region Default output types
        // {{{

        private static Dictionary<AutoValues, OutputType> _DefaultOutputTypeForAutoValueNew =
            new Dictionary<AutoValues, OutputType>()
        {
            { AutoValues.ConsoleId, OutputType.ConsoleId },
            { AutoValues.FlowToken, OutputType.FlowToken },
            { AutoValues.Ipv4Address, OutputType.Ipv4Address },
            { AutoValues.SystemVersion, OutputType.XexVersion },
            { AutoValues.Timestamp, OutputType.DateTime },
            { AutoValues.TitleId, OutputType.TitleName },
        };

        private static Dictionary<AutoValues, OutputType> _DefaultOutputTypeForAutoValueOld =
            new Dictionary<AutoValues, OutputType>()
        {
            { AutoValues.ConsoleId, OutputType.String },
            { AutoValues.FlowToken, OutputType.HexNumber },
            { AutoValues.Ipv4Address, OutputType.HexNumber },
            { AutoValues.SystemVersion, OutputType.HexNumber },
            { AutoValues.Timestamp, OutputType.HexNumber },
            { AutoValues.TitleId, OutputType.HexNumber },
        };

        private static Dictionary<DataFieldType, OutputType> _DefaultOutputTypeForInType =
            new Dictionary<DataFieldType, OutputType>()
        {
            { DataFieldType.UnicodeString, OutputType.String },
            { DataFieldType.AnsiString, OutputType.String },
            { DataFieldType.Int8, OutputType.Number },
            { DataFieldType.UInt8, OutputType.HexNumber },
            { DataFieldType.Int16, OutputType.Number },
            { DataFieldType.UInt16, OutputType.HexNumber },
            { DataFieldType.Int32, OutputType.Number },
            { DataFieldType.UInt32, OutputType.HexNumber },
            { DataFieldType.Int64, OutputType.Number },
            { DataFieldType.UInt64, OutputType.HexNumber },
            { DataFieldType.Float, OutputType.Float },
            { DataFieldType.Double, OutputType.Float },
            { DataFieldType.Binary, OutputType.String },
            { DataFieldType.GUID, OutputType.GUID },
        };

        private static OutputType DefaultOutputType(DataFieldType inType, AutoValues? autoValue, bool useNewDefaults)
        {
            // Some autovalues have explicit default output types. Others will just use 
            // whatever the default is for their input type. But if the inType is a 
            // string, then our outType will always be a string, no matter what.
 
            if (inType == DataFieldType.AnsiString ||
                inType == DataFieldType.UnicodeString)
            {
                return OutputType.String;
            }

            OutputType outType;

            if (autoValue.HasValue)
            {
                if (useNewDefaults)
                {
                    if (_DefaultOutputTypeForAutoValueNew.TryGetValue((AutoValues)autoValue, out outType))
                    {
                        return outType;
                    }
                }
                else
                {
                    if (_DefaultOutputTypeForAutoValueOld.TryGetValue((AutoValues)autoValue, out outType))
                    {
                        return outType;
                    }
                }
            }

            if (!_DefaultOutputTypeForInType.TryGetValue(inType, out outType))
            {
                throw new ArgumentException("inType not recognized: " + inType, "inType");
            }

            return outType;
        }

        // }}}
        #endregion
    }

    [XmlRoot(DataField.ELEMENT_NAME)]
    /// <summary>
    /// Represents the data element of the ETX Manifest for a header field.  This class
    /// is used to assist in the process of writing header fields to xml.
    /// </summary>
    internal class HeaderDataField : DataField
    {
        internal const string HEADER_ATTRIBUTE = "header";

        /// <summary>
        /// Converts a DataField to HeaderDataField.
        /// </summary>
        /// <param name="field">Input DataField to convert to a HeaderDataField.</param>
        /// <returns>Returns the converted HeaderDataField.</returns>
        public static HeaderDataField CreateHeader(DataField field)
        {
            if (null == field)
            {
                throw new ArgumentNullException("field");
            }

            if (field is HeaderDataField)
            {
                return field as HeaderDataField;
            }

            return new HeaderDataField(field);
        }

        /// <summary>
        /// Initializes an instance of the HeaderDataField by cloning the specified
        /// DataField's properties.
        /// </summary>
        /// <param name="field">Input DataField to clone.</param>
        private HeaderDataField(DataField field) : base(field, field.Ordinal, field.Name)
        {
        }

        /// <summary>
        /// Converts an DataField into its XML representation.
        /// </summary>
        /// <param name="writer">The XmlWriter stream to which the object is serialized.</param>
        protected override void WriteXml(XmlWriter writer)
        {
            WriteAttribute(writer, HEADER_ATTRIBUTE, 1);

            base.WriteXml(writer);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\etx\lib\EtxLoader.cs ===
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using System.Xml.Serialization;
using System.Xml.XPath;

using xonline.common.config;
using xonline.common.utilities2;
using xonline.common.sql.sqlclient;
using xonline.common.core.etx.collections;
using xonline.common.mgmt;
using xonline.common.service;

namespace xonline.common.core.etx
{
    /// <summary>
    /// Mode associated with producer lookup.
    /// </summary>
    public enum ProducerFetchMode
    {
        Raw,
        Normalized
    }

    /// <summary>
    /// Utility class used for loading Etx Manifests objects.
    /// </summary>
    public static class EtxLoader
    {
        /// <summary>
        /// Utility class used for loading Etx Manifests objects from npdb.
        /// </summary>
        public static class NPDB
        {
            #region Database and Xml Name Constants

            private const string SprocIngestProducerManifest = "p_etx_ingest_producer_manifest";
            private const string SprocIngestHeaderDefinition = "p_etx_insert_event_header";
            private const string SprocGetEventManifest = "p_etx_get_event_manifests";
            private const string SprocGetProducerManifestNormalized = "p_etx_get_producer_normalized_manifests";
            private const string SprocGetProducerManifestRaw = "p_etx_get_producer_raw_manifests";
            private const string SprocEnumerateProducers = "p_etx_get_producers";
            private const string SprocEnumerateEventHeaders = "p_etx_get_event_headers";
            private const string ParamEventFingerprint = "@vb_event_fingerprint";
            private const string ParamEventLogstringId = "@vc_logstringid";
            private const string ParamEventSymbol = "@vc_symbol";
            private const string ParamEventMinModifiedDate = "@dt_min_event_modified";
            private const string ParamProducerFingerprint = "@vb_producer_fingerprint";
            private const string ParamProducerSymbol = "@vc_symbol";
            private const string ParamProducerMinModifiedDate = "@dt_min_producer_modified";
            private const string ParamGenericMinModifiedDate = "@dt_min_modified";
            private const string ParamGenericMaxModifiedDate = "@dt_max_modified";
            private const string ParamXmlEventHeader = "@xml_event_header";
            private const string ParamXmlProducer = "@xml_producer";
            private const string ParamHeaderVersion = "@i_header_version";
            private const string ColumnEventXml = "xml_event";
            private const string ColumnProducerXml = "xml_producer";
            private const string ColumnProducerModifiedDate = "dt_modified";
            private const string ColumnProducerFingerprint = "vb_producer_fingerprint";
            private const string ColumnHeaderModifiedDate = "dt_modified";
            private const string ColumnHeaderXml = "xml_header";
            private const string XmlElementEventsRoot = "events";
            private const string XmlAttributeNewestEventModifiedDate = "modified";

            #endregion

            #region Static Fields

            private static EtxHeaderCache headerDefinitionCache;

            #endregion

            /// <summary>
            /// Gets the header definition cache.
            /// </summary>
            public static EtxHeaderCache HeaderDefinitionCache
            {
                get
                {
                    if (null == headerDefinitionCache)
                    {
                        if (null == Interlocked.CompareExchange(ref headerDefinitionCache, new EtxHeaderCache(), null))
                        {
                            // attach cache flush operation to etx manifest change notification

                            Config.EtxManifestChange += (sender, e) => headerDefinitionCache.Clear();
                        }
                    }

                    return headerDefinitionCache;
                }
            }

            /// <summary>
            /// Creates an XElement from a column in the current row.
            /// </summary>
            /// <param name="reader">SqlDataReader pointing to the current record.</param>
            /// <param name="ordinal">Column ordinal of xml document.</param>
            /// <returns>Returns an XElement created from parsing the target column.</returns>
            private static XElement CreateXDocument(SqlDataReader reader, int ordinal)
            {
                SqlXml xml = reader.GetSqlXml(ordinal);

                using (var xr = xml.CreateReader())
                {
                    XElement result;

                    result = XElement.Load(xr);

                    // prune header field - header fields should not find their way to the database
                    Array.ForEach(result.XPathSelectElements("//data[@header='1']").ToArray(), e => e.Remove());
                    
                    return result;
                }
            }

            /// <summary>
            /// Creates an XElement from a column in the current row.
            /// </summary>
            /// <param name="reader">SqlDataReader pointing to the current record.</param>
            /// <param name="column">Column name of xml document.</param>
            /// <returns>Returns an XElement created from parsing the target column.</returns>
            private static XElement CreateXDocument(SqlDataReader reader, string column)
            {
                return CreateXDocument(reader, reader.GetOrdinal(column));
            }

            /// <summary>
            /// Downloads the etx manifest schema document from npdb.
            /// </summary>
            /// <returns>Return the XmlReaderSettings used for validating an etx manifest xml.</returns>
            public static XmlReaderSettings DownloadValidationSettings()
            {
                XmlReaderSettings settings;
                string xsd;

                settings = new XmlReaderSettings();
                xsd = Encoding.UTF8.GetString(Config.GetBlobSetting(ConfigBlob.etx_schema_document));

                using (StringReader reader = new StringReader(xsd))
                {
                    settings.Schemas = new XmlSchemaSet();
                    settings.Schemas.Add(XmlSchema.Read(reader, ValidationCallback));
                }

                settings.ValidationEventHandler += ValidationCallback;
                settings.ValidationType = ValidationType.Schema;
                
                return settings;
            }

            /// <summary>
            /// Etx manifest validation callback.
            /// </summary>
            /// <param name="sender">Ignored parameter.</param>
            /// <param name="e">Validation failure details.</param>
            private static void ValidationCallback(object sender, ValidationEventArgs e)
            {
                throw e.Exception;
            }

            /// <summary>
            /// Creates an XmlReader that performs schema validation on reader.
            /// </summary>
            /// <param name="stream">Stream for output XmlReader.</param>
            /// <returns>Returns an XmlReader configured to perform validation on read.</returns>
            public static XmlReader CreateValidatingReader(Stream stream)
            {
                return XmlReader.Create(stream, DownloadValidationSettings());
            }

            /// <summary>
            /// Creates an XmlReader that performs schema validation on reader.
            /// </summary>
            /// <param name="reader">TextReader for output XmlReader.</param>
            /// <returns>Returns an XmlReader configured to perform validation on read.</returns>
            public static XmlReader CreateValidatingReader(TextReader reader)
            {
                return XmlReader.Create(reader, DownloadValidationSettings());
            }

            /// <summary>
            /// Creates an XmlReader that performs schema validation on reader.
            /// </summary>
            /// <param name="inputUri">Uri for output XmlReader.</param>
            /// <returns>Returns an XmlReader configured to perform validation on read.</returns>
            public static XmlReader CreateValidationReader(string inputUri)
            {
                return XmlReader.Create(inputUri, DownloadValidationSettings());
            }

            /// <summary>
            /// Uploads all producers in the manifest to the NPDB storage tables.
            /// </summary>
            /// <param name="connection">Connection to use to complete to request.  Owner is responsible for cleanup.</param>
            /// <param name="manifest">Target manifest, whose producers will be uploaded.</param>
            public static void UploadManifest(SqlClient connection, EtxManifest manifest)
            {
                if (null == connection)
                {
                    throw new ArgumentNullException("connection");
                }

                if (null == manifest)
                {
                    throw new ArgumentNullException("manifest");
                }

                foreach (Producer producer in manifest.Producers)
                {
                    UploadProducer(connection, producer);
                }
            }

            /// <summary>
            /// Uploads all producers in the manifest to the NPDB storage tables.
            /// </summary>
            /// <param name="manifest">Target manifest, whose producers will be uploaded.</param>
            public static void UploadManifest(EtxManifest manifest)
            {
                using (SqlClient connection = new SqlClient(Interface.npdb))
                {
                    UploadManifest(connection, manifest);
                }
            }

            /// <summary>
            /// Uploads the specified producer to the NPDB storage tables.
            /// </summary>
            /// <param name="connection">Connection to use to complete to request.  Owner is responsible for cleanup.</param>
            /// <param name="producer">Target producer to upload.</param>
            public static void UploadProducer(SqlClient connection, Producer producer)
            {
                XmlSerializer serializer;

                if (null == connection)
                {
                    throw new ArgumentNullException("connection");
                }

                if (null == producer)
                {
                    throw new ArgumentNullException("producer");
                }

                // Set default header versions if not specified. 0 counts as not 
                // specified.
                byte defaultHeaderVersion = (byte)Config.GetIntSetting(Setting.etx_default_header_version);
                List<Event> eventsToExpand = new List<Event>();
                foreach (Event evt in producer.Events)
                {
                    if (evt.HeaderVersion == 0)
                    {
                        evt.HeaderVersion = defaultHeaderVersion;
                        eventsToExpand.Add(evt);
                    }
                }

                serializer = new XmlSerializer(typeof(Producer));

                using (MemoryStream ms = new MemoryStream())
                {
                    using (XmlWriter writer = XmlWriter.Create(ms))
                    {
                        serializer.Serialize(writer, producer);
                    }

                    ms.Position = 0;

                    using (XmlReader reader = XmlReader.Create(ms))
                    {
                        SqlXml xml;

                        xml = new SqlXml(reader);

                        connection.ClearParameters();

                        connection.StoredProc = SprocIngestProducerManifest;
                        connection.Command.Parameters.Add(new SqlParameter(ParamXmlProducer, xml));

                        connection.ExecuteNonQuery();
                    }
                }

                // Re-populate the new header fields for any events that changed their 
                // header version. We don't want to upload the header fields, which is why 
                // we're doing this after the sproc call.
                foreach (Event evt in eventsToExpand)
                {
                    ExpandEvent(connection, evt);
                }
            }

            /// <summary>
            /// Uploads the specified producer to the NPDB storage tables.
            /// </summary>
            /// <param name="producer">Target producer to upload.</param>
            public static void UploadProducer(Producer producer)
            {
                using (SqlClient connection = new SqlClient(Interface.npdb))
                {
                    UploadProducer(connection, producer);
                }
            }

            /// <summary>
            /// Uploads the specified header to the NPDB storage tables.
            /// </summary>
            /// <param name="headerVersion">Version identifier associated with the header definition.</param>
            /// <param name="headerDefinition">Header definition to upload to the storage.</param>
            public static void UploadHeaderDefinition(byte headerVersion, Event headerDefinition)
            {
                using (SqlClient connection = new SqlClient(Interface.npdb))
                {
                    UploadHeaderDefinition(connection, headerVersion, headerDefinition);
                }
            }

            /// <summary>
            /// Uploads the specified header to the NPDB storage tables.
            /// </summary>
            /// <param name="connection">Connection to use to complete to request.  Owner is responsible for cleanup.</param>
            /// <param name="headerVersion">Version identifier associated with the header definition.</param>
            /// <param name="headerDefinition">Header definition to upload to the storage.</param>
            public static void UploadHeaderDefinition(SqlClient connection, byte headerVersion, Event headerDefinition)
            {
                XmlSerializer serializer;

                if (null == connection)
                {
                    throw new ArgumentNullException("connection");
                }

                if (null == headerDefinition)
                {
                    throw new ArgumentNullException("headerDefinition");
                }

                if (headerVersion == 0)
                {
                    throw new ArgumentOutOfRangeException("headerVersion", headerVersion, "value cannot be 0");
                }

                serializer = new XmlSerializer(typeof(Event));

                using (MemoryStream ms = new MemoryStream())
                {
                    using (XmlWriter writer = XmlWriter.Create(ms))
                    {
                        serializer.Serialize(writer, headerDefinition);
                    }

                    ms.Position = 0;

                    using (XmlReader reader = XmlReader.Create(ms))
                    {
                        SqlXml xml;

                        xml = new SqlXml(reader);

                        connection.ClearParameters();

                        connection.StoredProc = SprocIngestHeaderDefinition;
                        connection.Command.Parameters.Add(new SqlParameter(ParamXmlEventHeader, xml));
                        connection.Command.Parameters.Add(new SqlParameter(ParamHeaderVersion, headerVersion));

                        connection.ExecuteNonQuery();
                    }
                }
            }

            /// <summary>
            /// Gets an Event from npdb by its fingerprint.
            /// </summary>
            /// <param name="connection">Connection to use to complete to request.  Owner is responsible for cleanup.</param>
            /// <param name="fingerprint">Event fingerprint of the target Event.</param>
            /// <returns>Returns an Event associated with the specified fingerprint.</returns>
            public static Event GetEvent(SqlClient connection, Blob fingerprint)
            {
                return GetEvent(connection, fingerprint, null);
            }

            /// <summary>
            /// Gets an Event from npdb by its fingerprint.
            /// </summary>
            /// <param name="connection">Connection to use to complete to request.  Owner is responsible for cleanup.</param>
            /// <param name="fingerprint">Event fingerprint of the target Event.</param>
            /// <param name="headerVersionOverride">Optional override to the header version pulled from the database.</param>
            /// <returns>Returns an Event associated with the specified fingerprint.</returns>
            public static Event GetEvent(SqlClient connection, Blob fingerprint, byte? headerVersionOverride)
            {
                Event result;

                if (null == connection)
                {
                    throw new ArgumentNullException("connection");
                }

                connection.ClearParameters();

                connection.StoredProc = SprocGetEventManifest;
                connection.AddParameter(ParamEventFingerprint, fingerprint);

                result = null;

                using (SqlDataReader reader = connection.Execute())
                {
                    if (reader.Read())
                    {
                        result = new Event(CreateXDocument(reader, ColumnEventXml));
                        result.HeaderVersion = headerVersionOverride ?? result.HeaderVersion;
                    }
                }

                if (null != result)
                {
                    return ExpandEvent(connection, result);
                }
                else
                {
                    throw new ArgumentException(string.Format("event not found with fingerprint: {0}", fingerprint), "fingerprint");
                }
            }

            /// <summary>
            /// Gets an Event from npdb by its fingerprint.
            /// </summary>
            /// <param name="fingerprint">Event fingerprint of the target Event.</param>
            /// <returns>Returns an Event associated with the specified fingerprint.</returns>
            public static Event GetEvent(Blob fingerprint)
            {
                return GetEvent(fingerprint, null);
            }

            /// <summary>
            /// Gets an Event from npdb by its fingerprint.
            /// </summary>
            /// <param name="fingerprint">Event fingerprint of the target Event.</param>
            /// <param name="headerVersionOverride">Optional override to the header version pulled from the database.</param>
            /// <returns>Returns an Event associated with the specified fingerprint.</returns>
            public static Event GetEvent(Blob fingerprint, byte? headerVersionOverride)
            {
                using (SqlClient connection = new SqlClient(Interface.npdb))
                {
                    return GetEvent(connection, fingerprint, headerVersionOverride);
                }
            }

            /// <summary>
            /// Gets a collection of Events from npdb associated with the specified fingerprints.
            /// </summary>
            /// <param name="connection">Connection to use to complete to request.  Owner is responsible for cleanup.</param>
            /// <param name="fingerprints">Collection of event fingerprints to lookup.</param>
            /// <returns>Returns a collection of Events associated with the specified fingerprints.</returns>
            public static IEnumerable<Event> GetEvents(SqlClient connection, IEnumerable<Blob> fingerprints)
            {
                List<Event> events;

                events = new List<Event>();

                foreach (var print in fingerprints)
                {
                    events.Add(GetEvent(connection, print, null));
                }

                return events;
            }

            /// <summary>
            /// Gets a collection of Events from npdb associated with the specified fingerprints.
            /// </summary>
            /// <param name="fingerprints">Collection of event fingerprints to lookup.</param>
            /// <returns>Returns a collection of Events associated with the specified fingerprints.</returns>
            public static IEnumerable<Event> GetEvents(IEnumerable<Blob> fingerprints)
            {
                using (SqlClient connection = new SqlClient(Interface.npdb))
                {
                    return GetEvents(connection, fingerprints);
                }
            }

            /// <summary>
            /// Gets all versions of events associated with the specified logstringid.
            /// </summary>
            /// <param name="connection">Connection to use to complete to request.  Owner is responsible for cleanup.</param>
            /// <param name="logStringId">Target event logstringid.</param>
            /// <returns>Returns a collection of Event's associated with the specified event logstringid.</returns>
            public static IEnumerable<Event> GetEventVersionsByLogStringId(SqlClient connection, string logStringId)
            {
                List<Event> events;

                if (null == connection)
                {
                    throw new ArgumentNullException("connection");
                }

                connection.ClearParameters();

                connection.StoredProc = SprocGetEventManifest;
                connection.AddParameter(ParamEventLogstringId, logStringId);

                events = new List<Event>();
                
                using (SqlDataReader reader = connection.Execute())
                {
                    while (reader.Read())
                    {
                        events.Add(new Event(CreateXDocument(reader, ColumnEventXml)));
                    }
                }

                events.ForEach(entry => ExpandEvent(connection, entry));

                if (events.Count == 0)
                {
                    throw new ArgumentException(string.Format("no events found with LogStringId: {0}", logStringId), "logStringId");
                }

                return events;
            }

            /// <summary>
            /// Gets all versions of events associated with the specified logstringid.
            /// </summary>
            /// <param name="logStringId">Target event logstringid.</param>
            /// <returns>Returns a collection of Event's associated with the specified event logstringid.</returns>
            public static IEnumerable<Event> GetEventVersionsByLogStringId(string logStringId)
            {
                using (SqlClient connection = new SqlClient(Interface.npdb))
                {
                    return GetEventVersionsByLogStringId(connection, logStringId);
                }
            }

            /// <summary>
            /// Gets all versions of events associated with the specified symbol.
            /// </summary>
            /// <param name="connection">Connection to use to complete to request.  Owner is responsible for cleanup.</param>
            /// <param name="symbol">Target event symbol.</param>
            /// <returns>Returns a collection of Event's associated with the specified event symbol.</returns>
            public static IEnumerable<Event> GetEventVersionsBySymbol(SqlClient connection, string symbol)
            {
                List<Event> events;

                if (null == connection)
                {
                    throw new ArgumentNullException("connection");
                }

                connection.ClearParameters();

                connection.StoredProc = SprocGetEventManifest;    
                connection.AddParameter(ParamEventSymbol, symbol);

                events = new List<Event>();

                using (SqlDataReader reader = connection.Execute())
                {
                    while (reader.Read())
                    {
                        events.Add(new Event(CreateXDocument(reader, ColumnEventXml)));
                    }
                }

                events.ForEach(entry => ExpandEvent(connection, entry));

                if (events.Count == 0)
                {
                    throw new ArgumentException(string.Format("no events found with symbol: {0}", symbol), "symbol");
                }

                return events;
            }

            /// <summary>
            /// Gets all versions of events associated with the specified symbol.
            /// </summary>
            /// <param name="symbol">Target event symbol.</param>
            /// <returns>Returns a collection of Event's associated with the specified event symbol.</returns>
            public static IEnumerable<Event> GetEventVersionsBySymbol(string symbol)
            {
                using (SqlClient connection = new SqlClient(Interface.npdb))
                {
                    return GetEventVersionsBySymbol(connection, symbol);
                }
            }

            /// <summary>
            /// Gets a producer by its fingerprint.
            /// </summary>
            /// <param name="connection">Connection to use to complete to request.  Owner is responsible for cleanup.</param>
            /// <param name="fingerprint">Producer fingerprint to search against.</param>
            /// <param name="mode">Producer manifest fetch mode.</param>
            /// <returns>Returns the Producer associated with the specified fingerprint.</returns>
            public static Producer GetProducer(SqlClient connection, Blob fingerprint, ProducerFetchMode mode)
            {
                Producer result;

                if (null == connection)
                {
                    throw new ArgumentNullException("connection");
                }

                connection.ClearParameters();

                connection.StoredProc = (mode == ProducerFetchMode.Normalized) ?
                        SprocGetProducerManifestNormalized :
                        SprocGetProducerManifestRaw;
                connection.AddParameter(ParamProducerFingerprint, fingerprint);

                result = null;

                using (SqlDataReader reader = connection.Execute())
                {
                    if (reader.Read())
                    {
                        result = new Producer(CreateXDocument(reader, ColumnProducerXml));
                    }
                }

                if (null != result)
                {
                    return ExpandProducer(connection, result);
                }
                else
                {
                    throw new ArgumentException(string.Format("producer not found with fingerprint: {0}", fingerprint), "fingerprint");
                }
            }

            /// <summary>
            /// Gets a producer by its fingerprint.
            /// </summary>
            /// <param name="fingerprint">Producer fingerprint to search against.</param>
            /// <param name="mode">Producer manifest fetch mode.</param>
            /// <returns>Returns the Producer associated with the specified fingerprint.</returns>
            public static Producer GetProducer(Blob fingerprint, ProducerFetchMode mode)
            {
                using (SqlClient connection = new SqlClient(Interface.npdb))
                {
                    return GetProducer(connection, fingerprint, mode);
                }
            }

            /// <summary>
            /// Gets a collection of Producers in a batch via a collection of Producer fingerprints.
            /// </summary>
            /// <param name="connection">Connection to use to complete to request.  Owner is responsible for cleanup.</param>
            /// <param name="fingerprints">Collection of fingerprints to lookup.</param>
            /// <param name="mode">Producer manifest fetch mode.</param>
            /// <returns>Returns the collection of Producers corresponding the collection of Producer fingerprints.</returns>
            public static IEnumerable<Producer> GetProducers(SqlClient connection, IEnumerable<Blob> fingerprints, ProducerFetchMode mode)
            {
                List<Producer> producers;

                producers = new List<Producer>();

                foreach (var print in fingerprints)
                {
                    producers.Add(GetProducer(connection, print, mode));
                }

                return producers;
            }

            /// <summary>
            /// Gets a collection of Producers in a batch via a collection of Producer fingerprints.
            /// </summary>
            /// <param name="fingerprints">Collection of fingerprints to lookup.</param>
            /// <param name="mode">Producer manifest fetch mode.</param>
            /// <returns>Returns the collection of Producers corresponding the collection of Producer fingerprints.</returns>
            public static IEnumerable<Producer> GetProducers(IEnumerable<Blob> fingerprints, ProducerFetchMode mode)
            {
                using (SqlClient connection = new SqlClient(Interface.npdb))
                {
                    return GetProducers(connection, fingerprints, mode);
                }
            }

            /// <summary>
            /// Gets all versions of Producers associated with the specified Producer symbol.
            /// </summary>
            /// <param name="connection">Connection to use to complete to request.  Owner is responsible for cleanup.</param>
            /// <param name="symbol">Target Producer symbol.</param>
            /// <param name="mode">Producer manifest fetch mode.</param>
            /// <returns>Returns the collection of versions of the Producer associated with the specified symbol.</returns>
            public static IEnumerable<Producer> GetProducerVersionsBySymbol(SqlClient connection, string symbol, ProducerFetchMode mode)
            {
                List<Producer> producers;

                if (null == connection)
                {
                    throw new ArgumentNullException("connection");
                }

                connection.ClearParameters();

                connection.StoredProc = (mode == ProducerFetchMode.Normalized) ?
                        SprocGetProducerManifestNormalized :
                        SprocGetProducerManifestRaw;
                connection.AddParameter(ParamProducerSymbol, symbol);

                producers = new List<Producer>();

                using (SqlDataReader reader = connection.Execute())
                {
                    while (reader.Read())
                    {
                        producers.Add(new Producer(CreateXDocument(reader, ColumnProducerXml)));
                    }
                }

                producers.ForEach(entry => ExpandProducer(connection, entry));

                if (producers.Count == 0)
                {
                    throw new ArgumentException(string.Format("no producers found with symbol: {0}", symbol), "symbol");
                }

                return producers;
            }

            /// <summary>
            /// Gets all versions of Producers associated with the specified Producer symbol.
            /// </summary>
            /// <param name="symbol">Target Producer symbol.</param>
            /// <param name="mode">Producer manifest fetch mode.</param>
            /// <returns>Returns the collection of versions of the Producer associated with the specified symbol.</returns>
            public static IEnumerable<Producer> GetProducerVersionsBySymbol(string symbol, ProducerFetchMode mode)
            {
                using (SqlClient connection = new SqlClient(Interface.npdb))
                {
                    return GetProducerVersionsBySymbol(connection, symbol, mode);
                }
            }

            /// <summary>
            /// Creates a Producer from a recordset row and logs modification dates.
            /// </summary>
            /// <param name="mode">Producer manifest fetch mode.</param>
            /// <param name="reader">Target recordset row.</param>
            /// <param name="newestProducer">Updated to reflect newest Producer modification date.</param>
            /// <param name="newestEvent">Updated to reflect newest Event modification date.</param>
            /// <returns>Returns the Producer described in the recordset row.</returns>
            private static Producer CreateProducer(ProducerFetchMode mode, SqlDataReader reader, ref DateTime newestProducer, ref DateTime newestEvent)
            {
                XElement element;
                DateTime lastEventDate;
                DateTime producerDate;

                element = CreateXDocument(reader, ColumnProducerXml);

                producerDate = reader.GetDateTime(reader.GetOrdinal(ColumnProducerModifiedDate));

                if (mode == ProducerFetchMode.Normalized)
                {
                    // In Normalized mode events are not always supplied with the producer, the sproc will inject a modification date for the newest event
                    lastEventDate = (DateTime)element.Element(XmlElementEventsRoot).Attribute(XmlAttributeNewestEventModifiedDate);
                }
                else
                {
                    // In Raw mode events are supplied with the producer - so dates match
                    lastEventDate = producerDate;
                }

                newestProducer = producerDate > newestProducer ? producerDate : newestProducer;
                newestEvent = lastEventDate > newestEvent ? lastEventDate : newestEvent;

                return new Producer(element);
            }

            /// <summary>
            /// Creates an EtxManifest representing all versions of all producers and logs modification dates.
            /// </summary>
            /// <param name="connection">Connection to use to complete to request.  Owner is responsible for cleanup.</param>
            /// <param name="mode">Producer manifest fetch mode.</param>
            /// <param name="newestProducer">Updated to reflect newest Producer modification date.</param>
            /// <param name="newestEvent">Updated to reflect newest Event modification date.</param>
            /// <returns>Returns the EtxManifest containing all producer definitions.</returns>
            public static EtxManifest GetManifest(SqlClient connection, ProducerFetchMode mode, out DateTime newestProducer, out DateTime newestEvent)
            {
                EtxManifest manifest;
                Blob[] removedProducers;

                manifest = new EtxManifest();

                newestProducer = SqlDateTime.MinValue.Value;
                newestEvent = SqlDateTime.MinValue.Value;

                return GetManifestDelta(connection, manifest, mode, ref newestProducer, ref newestEvent, out removedProducers);
            }

            /// <summary>
            /// Creates an EtxManifest representing all versions of all producers and logs modification dates.
            /// </summary>
            /// <param name="mode">Producer manifest fetch mode.</param>
            /// <param name="newestProducer">Updated to reflect newest Producer modification date.</param>
            /// <param name="newestEvent">Updated to reflect newest Event modification date.</param>
            /// <returns>Returns the EtxManifest containing all producer definitions.</returns>
            public static EtxManifest GetManifest(ProducerFetchMode mode, out DateTime newestProducer, out DateTime newestEvent)
            {
                using (SqlClient connection = new SqlClient(Interface.npdb))
                {
                    return GetManifest(connection, mode, out newestProducer, out newestEvent);
                }
            }

            /// <summary>
            /// Creates an EtxManifest representing the specified producers and logs modification dates.
            /// </summary>
            /// <param name="connection">Connection to use to complete to request.  Owner is responsible for cleanup.</param>
            /// <param name="fingerprints">Collection of Producer fingerprints to lookup.</param>
            /// <param name="mode">Producer manifest fetch mode.</param>
            /// <param name="newestProducer">Updated to reflect newest Producer modification date.</param>
            /// <param name="newestEvent">Updated to reflect newest Event modification date.</param>
            /// <returns>Returns the EtxManifest containing the specified producer definitions.</returns>
            public static EtxManifest GetManifest(SqlClient connection, IEnumerable<Blob> fingerprints, ProducerFetchMode mode, out DateTime newestProducer, out DateTime newestEvent)
            {
                EtxManifest manifest;

                if (null == connection)
                {
                    throw new ArgumentNullException("connection");
                }

                manifest = new EtxManifest();

                newestProducer = SqlDateTime.MinValue.Value;
                newestEvent = SqlDateTime.MinValue.Value;

                foreach (var print in fingerprints)
                {
                    connection.ClearParameters();

                    connection.StoredProc = (mode == ProducerFetchMode.Normalized) ?
                        SprocGetProducerManifestNormalized :
                        SprocGetProducerManifestRaw;
                    connection.AddParameter(ParamProducerFingerprint, print);

                    using (SqlDataReader reader = connection.Execute())
                    {
                        if (reader.Read())
                        {
                            manifest.Producers.Add(CreateProducer(mode, reader, ref newestProducer, ref newestEvent));
                        }
                    }
                }

                return ExpandManifest(connection, manifest);
            }

            /// <summary>
            /// Creates an EtxManifest representing the specified producers and logs modification dates.
            /// </summary>
            /// <param name="fingerprints">Collection of Producer fingerprints to lookup.</param>
            /// <param name="mode">Producer manifest fetch mode.</param>
            /// <param name="newestProducer">Updated to reflect newest Producer modification date.</param>
            /// <param name="newestEvent">Updated to reflect newest Event modification date.</param>
            /// <returns>Returns the EtxManifest containing the specified producer definitions.</returns>
            public static EtxManifest GetManifest(IEnumerable<Blob> fingerprints, ProducerFetchMode mode, out DateTime newestProducer, out DateTime newestEvent)
            {
                using (SqlClient connection = new SqlClient(Interface.npdb))
                {
                    return GetManifest(connection, fingerprints, mode, out newestProducer, out newestEvent);
                }
            }

            /// <summary>
            /// Gets the delta between the specified manifest and the current state of the manifest in npdb.
            /// </summary>
            /// <param name="connection">Connection to use to complete to request.  Owner is responsible for cleanup.</param>
            /// <param name="manifest">Original manifest to compare against.</param>
            /// <param name="mode">Producer manifest fetch mode.</param>
            /// <param name="newestProducer">Timestamp on the newest producer in the manifest.</param>
            /// <param name="newestEvent">Timestamp of the newest event in the manifest.</param>
            /// <param name="removedProducers">Returns an array of producers that have been removed.</param>
            /// <returns>Returns a new EtxManifest representing the producer and event addtions.</returns>
            public static EtxManifest GetManifestDelta(SqlClient connection, EtxManifest manifest, ProducerFetchMode mode, ref DateTime newestProducer, ref DateTime newestEvent, out Blob[] removedProducers)
            {
                EtxManifest delta;
                HashSet<Blob> removed;

                if (null == connection)
                {
                    throw new ArgumentNullException("connection");
                }

                delta = new EtxManifest();
                removed = new HashSet<Blob>(manifest.Producers.Fingerprints);

                // Determining which producers, if any, were removed
                if (removed.Count > 0)
                {
                    connection.ClearParameters();

                    connection.StoredProc = SprocEnumerateProducers;
                    connection.AddParameter(ParamGenericMinModifiedDate, SqlDateTime.MinValue.Value);

                    using (SqlDataReader reader = connection.Execute())
                    {
                        int fingerprintOrdinal;

                        fingerprintOrdinal = reader.GetOrdinal(ColumnProducerFingerprint);

                        while (removed.Count > 0 && reader.Read())
                        {
                            byte[] buffer;

                            buffer = new byte[reader.GetBytes(fingerprintOrdinal, 0, null, 0, 0)];
                            reader.GetBytes(fingerprintOrdinal, 0, buffer, 0, buffer.Length);

                            removed.Remove(buffer);
                        }
                    }
                }

                // Generating a delta EtxManifest to reflect changes
                connection.ClearParameters();

                if (mode == ProducerFetchMode.Normalized)
                {
                    connection.StoredProc = SprocGetProducerManifestNormalized;
                    connection.AddParameter(ParamProducerMinModifiedDate, newestProducer);
                    connection.AddParameter(ParamEventMinModifiedDate, newestEvent);
                }
                else
                {
                    connection.StoredProc = SprocGetProducerManifestRaw;
                    connection.AddParameter(ParamGenericMinModifiedDate, newestProducer);
                }

                using (SqlDataReader reader = connection.Execute())
                {
                    while (reader.Read())
                    {
                        delta.Producers.Add(CreateProducer(mode, reader, ref newestProducer, ref newestEvent));
                    }
                }

                ExpandManifest(connection, delta);

                // Report the removed producers
                removedProducers = removed.ToArray();

                return delta;
            }

            /// <summary>
            /// Gets the delta between the specified manifest and the current state of the manifest in npdb.
            /// </summary>
            /// <param name="manifest">Original manifest to compare against.</param>
            /// <param name="mode">Producer manifest fetch mode.</param>
            /// <param name="newestProducer">Timestamp on the newest producer in the manifest.</param>
            /// <param name="newestEvent">Timestamp of the newest event in the manifest.</param>
            /// <param name="removedProducers">Returns an array of producers that have been removed.</param>
            /// <returns>Returns a new EtxManifest representing the producer and event addtions.</returns>
            public static EtxManifest GetManifestDelta(EtxManifest manifest, ProducerFetchMode mode, ref DateTime newestProducer, ref DateTime newestEvent, out Blob[] removedProducers)
            {
                using (SqlClient connection = new SqlClient(Interface.npdb))
                {
                    return GetManifestDelta(connection, manifest, mode, ref newestProducer, ref newestEvent, out removedProducers);
                }
            }

            /// <summary>
            /// Updates a manifest to reflect newest version of the manifest in npdb.
            /// </summary>
            /// <param name="connection">Connection to use to complete to request.  Owner is responsible for cleanup.</param>
            /// <param name="manifest">Target EtxManifest to update.</param>
            /// <param name="mode">Producer manifest fetch mode.</param>
            /// <param name="newestProducer">Timestamp on the newest producer in the manifest.</param>
            /// <param name="newestEvent">Timestamp of the newest event in the manifest.</param>
            /// <returns>Returns true if the manifest was updated; otherwise, false.</returns>
            public static bool UpdateManifest(SqlClient connection, EtxManifest manifest, ProducerFetchMode mode, ref DateTime newestProducer, ref DateTime newestEvent)
            {
                EtxManifest delta;
                Blob[] removedProducers;
                bool changed;

                delta = GetManifestDelta(connection, manifest, mode, ref newestProducer, ref newestEvent, out removedProducers);

                changed = false;

                foreach (var producer in removedProducers)
                {
                    manifest.Producers.Remove(ProducerCollectionKeys.Fingerprint, producer);

                    changed = true;
                }

                changed |= manifest.Merge(delta);

                return changed;
            }

            /// <summary>
            /// Updates a manifest to reflect newest version of the manifest in npdb.
            /// </summary>
            /// <param name="manifest">Target EtxManifest to update.</param>
            /// <param name="mode">Producer manifest fetch mode.</param>
            /// <param name="newestProducer">Timestamp on the newest producer in the manifest.</param>
            /// <param name="newestEvent">Timestamp of the newest event in the manifest.</param>
            /// <returns>Returns true if the manifest was updated; otherwise, false.</returns>
            public static bool UpdateManifest(EtxManifest manifest, ProducerFetchMode mode, ref DateTime newestProducer, ref DateTime newestEvent)
            {
                using (SqlClient connection = new SqlClient(Interface.npdb))
                {
                    return UpdateManifest(connection, manifest, mode, ref newestProducer, ref newestEvent);
                }
            }

            /// <summary>
            /// Gets the event header definition for the specified header version.
            /// </summary>
            /// <param name="headerVersion">Header version associated with the header to lookup.</param>
            /// <returns>Return the header definition for the specified header version.</returns>
            public static Event GetHeaderDefinition(Byte headerVersion)
            {
                Event header;

                // try the cache before establishing a connection
                if (HeaderDefinitionCache.TryGet(headerVersion, out header))
                {
                    return header;
                }

                using (SqlClient connection = new SqlClient(Interface.npdb))
                {
                    return GetHeaderDefinition(connection, headerVersion);
                }
            }

            /// <summary>
            /// Gets the event header definition for the specified header version.
            /// </summary>
            /// <param name="connection">Connection to use to complete to request.  Owner is responsible for cleanup.</param>
            /// <param name="headerVersion">Header version associated with the header to lookup.</param>
            /// <returns>Return the header definition for the specified header version.</returns>
            public static Event GetHeaderDefinition(SqlClient connection, byte headerVersion)
            {
                Event header;

                if (null == connection)
                {
                    throw new ArgumentNullException("connection");
                }

                if (HeaderDefinitionCache.TryGet(headerVersion, out header))
                {
                    return header;
                }

                PopulateCache(
                    connection, 
                    entry => // find the target item in the process of population
                    {
                        if (entry.HeaderVersion == headerVersion)
                        {
                            header = entry.HeaderDefinition;
                        }
                    });

                if (null != header)
                {
                    return header;
                }

                throw new ArgumentException("header definition not found with header version: " + headerVersion.ToString(), "headerVersion");
            }

            /// <summary>
            /// Enumerates all header definitions for the specified header version.
            /// </summary>
            /// <returns>Returns a collection of Events representing a header fields definition.</returns>
            public static IEnumerable<Event> GetHeaderDefinitions()
            {
                IEnumerable<Event> cachedResults;

                if (null != (cachedResults = ReadCache(null, null)))
                {
                    return cachedResults;
                }

                using (SqlClient connection = new SqlClient(Interface.npdb))
                {
                    return GetHeaderDefinitions(connection);
                }
            }

            /// <summary>
            /// Enumerates all header definitions for the specified header version.
            /// </summary>
            /// <param name="connection">Connection to use to complete to request.  Owner is responsible for cleanup.</param>
            /// <returns>Returns a collection of Events representing a header fields definition.</returns>
            public static IEnumerable<Event> GetHeaderDefinitions(SqlClient connection)
            {
                IEnumerable<Event> cachedResults;
                List<Event> fetchedResults;

                if (null == connection)
                {
                    throw new ArgumentNullException("connection");
                }

                if (null != (cachedResults = ReadCache(null, null)))
                {
                    return cachedResults;
                }

                fetchedResults = new List<Event>();

                PopulateCache(
                    connection,
                    entry =>
                    {
                        fetchedResults.Add(entry.HeaderDefinition);
                    });

                return fetchedResults;
            }

            /// <summary>
            /// Enumerates all header definitions for the specified header version modified in
            /// a particular time range.
            /// </summary>
            /// <param name="minModified">Lower bound on modification date, exclusive.</param>
            /// <param name="maxModified">Upper bound on modification date, inclusive.</param>
            /// <returns>Returns a collection of Event header field definitions modified with the specified to range.</returns>
            public static IEnumerable<Event> GetHeaderDefinitions(DateTime minModified, DateTime maxModified)
            {
                IEnumerable<Event> cachedResults;

                if (null != (cachedResults = ReadCache(minModified, maxModified)))
                {
                    return cachedResults;
                }

                using (SqlClient connection = new SqlClient(Interface.npdb))
                {
                    return GetHeaderDefinitions(connection, minModified, maxModified);
                }
            }

            /// <summary>
            /// Enumerates all header definitions for the specified header version modified in
            /// a particular time range.
            /// </summary>
            /// <param name="connection">Connection to use to complete to request.  Owner is responsible for cleanup.</param>
            /// <param name="minModified">Lower bound on modification date, exclusive.</param>
            /// <param name="maxModified">Upper bound on modification date, inclusive.</param>
            /// <returns>Returns a collection of Event header field definitions modified with the specified to range.</returns>
            public static IEnumerable<Event> GetHeaderDefinitions(SqlClient connection, DateTime minModified, DateTime maxModified)
            {
                IEnumerable<Event> cachedResults;
                List<Event> fetchedResults;

                if (null == connection)
                {
                    throw new ArgumentNullException("connection");
                }

                if (null != (cachedResults = ReadCache(minModified, maxModified)))
                {
                    return cachedResults;
                }

                fetchedResults = new List<Event>();

                PopulateCache(
                    connection, 
                    entry => 
                    {
                        if (entry.ModifiedDate > minModified && entry.ModifiedDate <= maxModified)
                        {
                            fetchedResults.Add(entry.HeaderDefinition);
                        }
                    });

                return fetchedResults;
            }

            /// <summary>
            /// Reads header definitions from the header cache.
            /// </summary>
            /// <param name="min">Optional lower bound on modification date, exclusive.</param>
            /// <param name="max">Optional upper bound on modification date, inclusive.</param>
            /// <returns>
            /// Returns the potentially empty collection of entries matching the search criteria, 
            /// or null if the cache is empty.
            /// </returns>
            private static IEnumerable<Event> ReadCache(DateTime? min, DateTime? max)
            {
                if (min == null || max == null)
                {
                    List<Event> results;

                    results = HeaderDefinitionCache.Select(h => h.HeaderDefinition).ToList();

                    if (results.Count > 0)
                    {
                        return results;
                    }
                }
                else
                {
                    List<HeaderEventData> results;

                    results = new List<HeaderEventData>(HeaderDefinitionCache);

                    if (results.Count > 0)
                    {
                        return results
                            .Where(h => h.ModifiedDate > min && h.ModifiedDate <= max)
                            .Select(h => h.HeaderDefinition);
                    }
                }

                return null;
            }

            /// <summary>
            /// Populates the header cache with all headers stored in npdb.
            /// </summary>
            /// <param name="connection">Connection to use to complete to request.  Owner is responsible for cleanup.</param>
            /// <param name="inspector">Action to perform on each entry pulled down from npdb.</param>
            private static IEnumerable<HeaderEventData> PopulateCache(SqlClient connection, Action<HeaderEventData> inspector)
            {
                List<HeaderEventData> seed;

                seed = new List<HeaderEventData>();

                connection.ClearParameters();

                connection.StoredProc = SprocEnumerateEventHeaders;

                using (SqlDataReader reader = connection.Execute())
                {
                    int xmlOrdinal;
                    int modifiedOrdinal;

                    xmlOrdinal = reader.GetOrdinal(ColumnHeaderXml);
                    modifiedOrdinal = reader.GetOrdinal(ColumnHeaderModifiedDate);

                    while (reader.Read())
                    {
                        DateTime modified;
                        SqlXml xml;

                        xml = reader.GetSqlXml(xmlOrdinal);
                        modified = reader.GetDateTime(modifiedOrdinal);

                        using (XmlReader xr = xml.CreateReader())
                        {
                            HeaderEventData entry;

                            entry = new HeaderEventData(new Event(xr), modified);
                            
                            inspector(entry);

                            seed.Add(entry);
                        }
                    }
                }

                HeaderDefinitionCache.ReplaceHeaders(seed);

                return seed;
            }

            /// <summary>
            /// Expands an event definition by injecting the header field definitions.
            /// </summary>
            /// <param name="connection">Connection to use to complete to request.  Owner is responsible for cleanup.</param>
            /// <param name="target">Target event to expand.</param>
            /// <returns>Returns the event that was input.</returns>
            /// <remarks>The connection must have no active readers.</remarks>
            private static Event ExpandEvent(SqlClient connection, Event target)
            {
                if (target.HeaderVersion != 0)
                {
                    Event header;

                    try
                    {
                        header = GetHeaderDefinition(connection, target.HeaderVersion);

                        target.HeaderFields.Clear();
                        target.HeaderFields.AddRange(header.DataFields);
                    }
                    catch (ArgumentException)
                    {
                        Xom.NtEvent(XEvent.Id.ETX_EVENT_HEADER_VERSION_MISSING,
                            "An etx event with fingerprint={0} is mapped to an undefined header version {1}. Continuing, no header fields loaded for this event and header version being remapped to 0.",
                            target.Fingerprint, target.HeaderVersion);

                        // mark the header version as 0 [for empty]
                        target.HeaderVersion = 0;
                    }
                }

                return target;
            }

            /// <summary>
            /// Expands a producer definition by injecting the header field definitions 
            /// into each of the event contained within.
            /// </summary>
            /// <param name="connection">Connection to use to complete to request.  Owner is responsible for cleanup.</param>
            /// <param name="target">Target producer to expand.</param>
            /// <returns>Returns the producer that was input.</returns>
            /// <remarks>The connection must have no active readers.</remarks>
            private static Producer ExpandProducer(SqlClient connection, Producer target)
            {
                foreach (Event entry in target.Events)
                {
                    ExpandEvent(connection, entry);
                }

                return target;
            }

            /// <summary>
            /// Expands a manifest definition by injecting the header field definitions 
            /// into each of the event contained within each producer.
            /// </summary>
            /// <param name="connection">Connection to use to complete to request.  Owner is responsible for cleanup.</param>
            /// <param name="target">Target manifest to expand.</param>
            /// <returns>Returns the manifest that was input.</returns>
            /// <remarks>The connection must have no active readers.</remarks>
            private static EtxManifest ExpandManifest(SqlClient connection, EtxManifest target)
            {
                foreach (Producer entry in target.Producers)
                {
                    ExpandProducer(connection, entry);
                }

                return target;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\etx\lib\ManagedEtxManifest.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data.SqlTypes;
using System.Linq;
using System.Text;
using System.Threading;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using System.Xml.Serialization;

using xonline.common.config;
using xonline.common.service;
using xonline.core.wiredata;
using xonline.common.utilities2;

namespace xonline.common.core.etx
{
    /// <summary>
    /// Event delegate used to communicate contextual information about EtxManifest updates within
    /// a ManagedEtxManifest.
    /// </summary>
    /// <param name="manifest">ManagedEtxManifest updated.</param>
    /// <param name="originalProducerDate">Timestamp associated with the original NewestProducerTimestamp.</param>
    /// <param name="originalEventDate">Timestamp associated with the original NewestEventTimestamp.</param>
    public delegate void ManifestUpdatedEvent(ManagedEtxManifest manifest, DateTime originalProducerDate, DateTime originalEventDate);

    /// <summary>
    /// Event delegate used to communicate contextual information about an EtxManifest updated.
    /// </summary>
    /// <param name="manifest">ManagedEtxManifest reset.</param>
    public delegate void ManifestResetEvent(ManagedEtxManifest manifest);

    /// <summary>
    /// Event delegate used to communicate contextual information about an EtxManifest error.
    /// </summary>
    /// <param name="manifest">ManagedEtxManifest error is associated with.</param>
    /// <param name="e">Exception that occured.</param>
    public delegate bool ManifestErrorEvent(ManagedEtxManifest manifest, Exception e);

    /// <summary>
    /// This class represents an actively updated EtxManifest.  These updates are occuring against Npdb.
    /// </summary>
    public sealed class ManagedEtxManifest : IDisposable
    {
        /// <summary>
        /// Event triggered each time an update is taken from NPDB.
        /// </summary>
        public event ManifestUpdatedEvent ManifestUpdate;

        /// <summary>
        /// Event triggered each time a reset is performed on the manifest.
        /// </summary>
        public event ManifestResetEvent ManifestReset;

        /// <summary>
        /// Event triggered each time a manifest loading error occurs.
        /// </summary>
        public event ManifestErrorEvent ManifestError;

        /// <summary>
        /// Gets the timestamp associated with the youngest producer in the collection.
        /// </summary>
        public DateTime NewestProducerTimestamp
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets the timestamp associated with the youngest event in the collection.
        /// </summary>
        public DateTime NewestEventTimestamp
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets the current state of the Etx Manifest.
        /// </summary>
        public EtxManifest CurrentManifest
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets the ProducerFetchMode associated with the manifest construction.
        /// </summary>
        public ProducerFetchMode ProducerFetchMode
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets a lock that can be used to synchronize access against the members
        /// of this structure.
        /// </summary>
        private ReaderWriterLockSlim Sync
        {
            get;
            set;
        }

        /// <summary>
        /// Initializes a new instance of the ManagedEtxManifest
        /// </summary>
        public ManagedEtxManifest() : this(ProducerFetchMode.Normalized)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ManagedEtxManifest.
        /// </summary>
        /// <param name="fetchMode">Mode of producer construction to while retreive the EtxManifest from npdb.</param>
        public ManagedEtxManifest(ProducerFetchMode fetchMode)
        {
            Sync = new ReaderWriterLockSlim(LockRecursionPolicy.SupportsRecursion);
            ProducerFetchMode = fetchMode;

            try
            {
                Reset();

                Config.EtxManifestChange += EtxManifestUpdated;
            }
            catch
            {
                CurrentManifest = new EtxManifest();
                NewestEventTimestamp = SqlDateTime.MinValue.Value;
                NewestProducerTimestamp = SqlDateTime.MinValue.Value;

                throw;
            }
        }

        /// <summary>
        /// Implicitly converts an ManagedEtxManifest class to an EtxManifest.
        /// </summary>
        /// <param name="activeEtxManifest">Target ManagedEtxManifest.</param>
        /// <returns>Returns the EtxManifest within the specified ManagedEtxManifest.</returns>
        public static implicit operator EtxManifest(ManagedEtxManifest activeEtxManifest)
        {
            if (null == activeEtxManifest)
            {
                return null;
            }

            return activeEtxManifest.CurrentManifest;
        }

        /// <summary>
        /// Regenerates the entire EtxManifest via a download of the full manifest
        /// from npdb.
        /// </summary>
        /// <param name="fetchMode">Mode of producer construction to while retreive the EtxManifest from npdb.</param>
        /// <remarks>Future automatic updates will also use the specified ProducerFetchMode.</remarks>
        public void Reset(ProducerFetchMode fetchMode)
        {
            Sync.EnterWriteLock();

            try
            {
                DateTime newpt;
                DateTime newet;

                NewestEventTimestamp = SqlDateTime.MinValue.Value;
                NewestProducerTimestamp = SqlDateTime.MinValue.Value;

                CurrentManifest = EtxLoader.NPDB.GetManifest(fetchMode, out newpt, out newet);
                ProducerFetchMode = fetchMode;
                NewestProducerTimestamp = newpt;
                NewestEventTimestamp = newet;
            }
            catch (Exception e)
            {
                if (!OnManifestError(e))
                {
                    throw;
                }
            }
            finally
            {
                Sync.ExitWriteLock();
            }

            OnManifestReset();
        }

        /// <summary>
        /// Regenerates the entire EtxManifest via a download of the full manifest
        /// from npdb.
        /// </summary>
        /// <remarks>Uses the existing ProducerFetchMode associated with this instance.</remarks>
        public void Reset()
        {
            Reset(ProducerFetchMode);
        }

        /// <summary>
        /// Updates the EtxManifest with the current state of the manifest in npdb.
        /// </summary>
        /// <returns>Returns true when the manifest is modified; otherwise false.</returns>
        public bool Update()
        {
            DateTime newpt, oldpt;
            DateTime newet, oldet;
            bool result;

            newpt = oldpt = NewestProducerTimestamp;
            newet = oldet = NewestEventTimestamp;

            result = false;

            Sync.EnterWriteLock();

            try
            {
                result = EtxLoader.NPDB.UpdateManifest(
                    CurrentManifest,
                    ProducerFetchMode,
                    ref newpt,
                    ref newet);

                NewestProducerTimestamp = newpt;
                NewestEventTimestamp = newet;
            }
            catch (Exception e)
            {
                if (!OnManifestError(e))
                {
                    throw;
                }
            }
            finally
            {
                Sync.ExitWriteLock();
            }

            if (result)
            {
                OnManifestUpdate(oldpt, oldet);
            }

            return result;
        }

        /// <summary>
        /// Unsubscribes to the EtxManifest change notification messages.
        /// </summary>
        public void Dispose()
        {
            Config.EtxManifestChange -= EtxManifestUpdated;
        }

        /// <summary>
        /// Callback method for the EtxManifest.
        /// </summary>
        /// <param name="sender">Ignored parameter.</param>
        /// <param name="e">Empty event arguments.</param>
        private void EtxManifestUpdated(object sender, EventArgs e)
        {
            Update();
        }

        /// <summary>
        /// Method used to invoke the ManifestUpdate event.
        /// </summary>
        /// <param name="originalProducerDate">Timestamp associated with the original NewestProducerTimestamp.</param>
        /// <param name="originalEventDate">Timestamp associated with the original NewestEventTimestamp.</param>
        private void OnManifestUpdate(DateTime originalProducerDate, DateTime originalEventDate)
        {
            if (null != ManifestUpdate)
            {
                ManifestUpdate(this, originalProducerDate, originalEventDate);
            }
        }

        /// <summary>
        /// Method used to invoke the ManifestReset event.
        /// </summary>
        private void OnManifestReset()
        {
            if (null != ManifestReset)
            {
                ManifestReset(this);
            }
        }

        /// <summary>
        /// Method used to invoke the ManifestError event.
        /// </summary>
        /// <param name="e">Exception that occured.</param>
        private bool OnManifestError(Exception e)
        {
            bool trap;

            trap = false;

            if (null != ManifestError)
            {
                foreach (ManifestErrorEvent del in ManifestError.GetInvocationList())
                {
                    trap |= del(this, e);
                }
            }
            
            return trap;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\etx\lib\Event.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Security.Cryptography;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using System.Xml.Serialization;

using xonline.common.service;
using xonline.core.wiredata;
using xonline.common.utilities2;

namespace xonline.common.core.etx
{
    using collections;

    [XmlRoot(Event.ELEMENT_NAME)]
    /// <summary>
    /// Represents the event element of the ETX Manifest.
    /// </summary>
    public class Event : SchemaObject
    {
        #region Constants and Fields

        private readonly static XmlSerializer dataFieldSerializer = new XmlSerializer(typeof(DataField));

        protected const string FINGERPRINT_ATTRIBUTE = "id";
        protected const string VALUE_ATTRIBUTE = "value";
        protected const string INDEX_ATTRIBUTE = "index";
        protected const string SYMBOL_ATTRIBUTE = "symbol";
        protected const string CATEGORY_ATTRIBUTE = "category";
        protected const string LOGSTRINGID_ATTRIBUTE = "logstringid";
        protected const string OMNITUREAREA_ATTRIBUTE = "omniturearea";
        protected const string DEPRECATED_ATTRIBUTE = "deprecated";
        protected const string HEADERVERSION_ATTRIBUTE = "header";
        protected const string OWNERS_ATTRIBUTE = "owners";
        protected const string TREATMENTS_ATTRIBUTE = "treatments";
        protected const string DESCRIPTION_ELEMENT = "description";
        protected const string DATAFIELDS_ELEMENT = "datafields";
        protected const string METADATA_ELEMENT = "metadata";
        protected const string PRIVACY_METADATA_ELEMENT = "privacy";
        protected const string DATA_ELEMENT = "data";
        protected const string ELEMENT_NAME = "event";

        private DataFieldCollection dataFields;
        private DataFieldCollection headerFields;
        private Blob fingerprint;
        private object sync;
        private XElement metadata;
        private string categoryContent;
        private EventCategory category;

        #endregion

        #region Properties

        /// <summary>
        /// Gets or sets the metadata associated with the event.
        /// </summary>
        /// <remarks>
        /// This value may be null for either get or set.  When the value
        /// is non-null for a set it must an element named metadata.
        /// </remarks>
        public XElement Metadata
        {
            get
            {
                return metadata;
            }
            set
            {
                if (null != value)
                {
                    if (value.Name != METADATA_ELEMENT)
                    {
                        throw new ArgumentException("element name must be: " + METADATA_ELEMENT, "value");
                    }
                }

                metadata = value;
            }
        }

        /// <summary>
        /// Gets the privacy treatments metadata associated with the event.
        /// </summary>
        /// <remarks>
        /// By default the PassThrough treatment is used.  This treatment is supplied when metadata
        /// or privacy elements are missing.
        /// </remarks>
        public PrivacyTreatments PrivacyTreatments
        {
            get
            {
                XElement metadataElement = this.Metadata;

                if (null != metadataElement)
                {
                    XElement privacyElement = metadataElement.Element(PRIVACY_METADATA_ELEMENT);

                    if (null != privacyElement)
                    {
                        XAttribute treatments = privacyElement.Attribute(TREATMENTS_ATTRIBUTE);
                        string contents;

                        if (null != treatments && !string.IsNullOrEmpty(treatments.Value.Trim()))
                        {
                            return ReadAttributeEnum<PrivacyTreatments>(
                                privacyElement,
                                TREATMENTS_ATTRIBUTE,
                                PrivacyTreatments.LBI,
                                out contents);
                        }
                    }
                }

                return PrivacyTreatments.PassThrough;
            }
        }

        /// <summary>
        /// Gets the unique fingerprint identifying the Event.
        /// </summary>
        public Blob Fingerprint
        {
            get
            {
                if (fingerprint == Blob.Empty)
                {
                    lock (sync)
                    {
                        if (fingerprint == Blob.Empty)
                        {
                            fingerprint = CalculateFingerprint();
                        }
                    }
                }

                return fingerprint;
            }
            internal set
            {
                fingerprint = value;
            }
        }

        /// <summary>
        /// Gets or sets a value indicating whether the event is deprecated
        /// </summary>
        public bool? Deprecated { get; set; }

        /// <summary>
        /// Gets or sets the description associated with this event.
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the owners associated with this event.
        /// </summary>
        public string Owners { get; set; }

        /// <summary>
        /// Gets or sets the category associated with this event.
        /// <summary>
        public EventCategory Category
        {
            get
            {
                return category;
            }
            set
            {
                category = value;
                categoryContent = value.ToString();
            }
        }

        /// <summary>
        /// Gets or sets the stringsvr log string identifier associated with this event.
        /// </summary>
        public string LogStringId { get; set; }

        /// <summary>
        /// Gets or sets the logging area used to identify this global event to the Omniture web analytics site.
        /// </summary>
        public string OmnitureArea { get; set; }

        /// <summary>
        /// Gets or sets the value associated with the event.
        /// </summary>
        public UInt32 Value { get; private set; }

        /// <summary>
        /// Gets the unique numeric index assigned to this event.
        /// </summary>
        public UInt32 Ordinal { get; private set; }

        /// <summary>
        /// Gets the unique symbol name assigned to this event.
        /// </summary>
        public string Symbol { get; private set; }

        /// <summary>
        /// Gets or sets the header version associated with the header definition.
        /// </summary>
        public Byte HeaderVersion { get; set; }

        /// <summary>
        /// Gets the DataFields associated with the server headers for this Event.
        /// </summary>
        public DataFieldCollection HeaderFields
        {
            get
            {
                if (null == headerFields)
                {
                    lock (this)
                    {
                        if (null == headerFields)
                        {
                            headerFields = new DataFieldCollection();
                        }
                    }
                }

                return headerFields;
            }
        }

        /// <summary>
        /// Gets the DataFields associated with the Event.
        /// </summary>
        public DataFieldCollection DataFields
        {
            get
            {
                if (null == dataFields)
                {
                    lock (this)
                    {
                        if (null == dataFields)
                        {
                            dataFields = new DataFieldCollection();
                        }
                    }
                }

                return dataFields;
            }
        }

        #endregion

        /// <summary>
        /// Constructor put in place to appease the System.Xml.Serialization gods.  Should not be used by mortals.
        /// </summary>
        protected Event()
        {
            Category = EventCategory.Invalid;

            this.sync = new object();
        }

        /// <summary>
        /// Initializes a new instance of the Event class.
        /// </summary>
        /// <param name="ordinal">Unique numeric index associated with event.</param>
        /// <param name="symbol">Unique symbol associated with event.</param>
        public Event(UInt32 ordinal, string symbol)
            : this(ordinal, symbol, Blob.Empty)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Event class.
        /// </summary>
        /// <param name="ordinal">Unique numeric index associated with event.</param>
        /// <param name="symbol">Unique symbol associated with event.</param>
        /// <param name="fingerprint">Fingerprint associated with the event.</param>
        public Event(UInt32 ordinal, string symbol, Blob fingerprint)
        {
            Category = EventCategory.Invalid;
            Fingerprint = fingerprint;
            Ordinal = Value = ordinal;
            Symbol = symbol;

            this.sync = new object();
        }

        /// <summary>
        /// Initializes a new instance of the Event class via deserialization.
        /// </summary>
        /// <param name="reader">The XmlReader stream from which the object is deserialized.</param>
        public Event(XmlReader reader) : base(reader)
        {
            this.sync = new object();
        }

        /// <summary>
        /// Initializes a new instance of the Event class via deserialization.
        /// </summary>
        /// <param name="element">The XElement containing the object definition.</param>
        public Event(XElement element) : base(element)
        {
            this.sync = new object();
        }

        /// <summary>
        /// Merges the data fields from the specified event into this event.
        /// </summary>
        /// <param name="target">Event to merge with.</param>
        /// <returns>Returns true if the event was changed due to the merge; otherwise false.</returns>
        public bool Merge(Event target)
        {
            bool changed = false;

            if (null == target)
            {
                throw new ArgumentNullException("target");
            }

            if (HeaderVersion != target.HeaderVersion)
            {
                // new header version set
                HeaderVersion = target.HeaderVersion;

                HeaderFields.Clear();
                HeaderFields.AddRange(target.HeaderFields);

                changed = true;
            }
            else if (HeaderFields.Count != target.HeaderFields.Count || false == Array.TrueForAll(target.HeaderFields.ToArray(), f => HeaderFields.Contains(f)))
            {
                // definition of header version changed (outside of policy during creation, but policy may change in time)
                HeaderFields.Clear();
                HeaderFields.AddRange(target.HeaderFields);

                changed = true;
            }

            if (categoryContent != target.categoryContent)
            {
                category = target.category;
                categoryContent = target.categoryContent;
                changed = true;
            }

            if (Owners != target.Owners)
            {
                Owners = target.Owners;
                changed = true;
            }

            if (Metadata == null && target.Metadata != null)
            {
                Metadata = target.Metadata;
                changed = true;
            }
            else if (Metadata != null && target.Metadata == null)
            {
                Metadata = target.Metadata;
                changed = true;
            }
            else if (!XElement.DeepEquals(Metadata, target.Metadata))
            {
                Metadata = target.Metadata;
                changed = true;
            }

            if (Description != target.Description)
            {
                Description = target.Description;
                changed = true;
            }

            if (Deprecated != target.Deprecated)
            {
                Deprecated = target.Deprecated;
                changed = true;
            }

            return changed;
        }

        /// <summary>
        /// Indicate that the fingerprint is invalidated.  This should be called if the
        /// event or its fields are updated.
        /// </summary>
        public void InvalidateFingerprint()
        {
            fingerprint = Blob.Empty;
        }

        /// <summary>
        /// This method calculates the fingerprint of this event.  This method will
        /// not update this event.
        /// </summary>
        /// <returns>Returns a blob containing the MD5 hash of this Event.</returns>
        /// <remarks>
        /// Several pieces of data are deliberately omitted from the Fingerprint
        /// calculation. The is due to change policy, the omitted data is free to vary
        /// and be updated over the lifetime of tracking the event.  Here is a
        /// complete list of those items: Description, HeaderVersion, HeaderFields.
        /// </remarks>
        public Blob CalculateFingerprint()
        {
            return FingerprintAlgorithm.MD5Event.GenerateFingerprint(this);
        }

        /// <summary>
        /// Determines whether or not the specified items match.
        /// </summary>
        /// <param name="obj">Target of comparison.</param>
        /// <returns>Returns true if the objects are equal; otherwise false.</returns>
        public override bool Equals(object obj)
        {
            Event target = obj as Event;

            if (null == target)
            {
                return false;
            }

            return Fingerprint == target.Fingerprint;
        }

        /// <summary>
        /// Gets the hash code associated with this object.
        /// </summary>
        /// <returns>Returns a hash of this objects value.</returns>
        public override int GetHashCode()
        {
            return CalculateFingerprint().GetHashCode();
        }

        #region EtxSchemaObject Implementation

        /// <summary>
        /// Generates a Event from its XML representation.
        /// </summary>
        /// <param name="reader">The XElement containing the object definition.</param>
        protected override void ReadElement(XElement element)
        {
            Fingerprint = Blob.Empty;

            Value = ReadAttributeUInt(element, VALUE_ATTRIBUTE);
            Ordinal = element.Attribute(INDEX_ATTRIBUTE) == null ?
                (GetElementPosition(element) ?? Value) :
                (ReadAttributeUInt(element, INDEX_ATTRIBUTE));
            Symbol = ReadAttribute(element, SYMBOL_ATTRIBUTE);
            category = ReadAttributeEnum<EventCategory>(element, CATEGORY_ATTRIBUTE, EventCategory.Invalid, out categoryContent);
            LogStringId = ReadAttribute(element, LOGSTRINGID_ATTRIBUTE);
            OmnitureArea = ReadAttribute(element, OMNITUREAREA_ATTRIBUTE);
            Owners = ReadAttribute(element, OWNERS_ATTRIBUTE);
            Description = ReadSimpleElement(element, DESCRIPTION_ELEMENT);
            Deprecated = ReadOptionalAttributeBoolFromUInt(element, DEPRECATED_ATTRIBUTE);
            HeaderVersion = ReadOptionalAttributeByte(element, HEADERVERSION_ATTRIBUTE);
            Metadata = element.Element(METADATA_ELEMENT);

            if (element.Attribute(FINGERPRINT_ATTRIBUTE) != null)
            {
                Fingerprint = ReadAttributeBlob(element, FINGERPRINT_ATTRIBUTE);
            }

            ReadFields(element);
        }

        /// <summary>
        /// Reads the header and data fields for the specified element.
        /// </summary>
        /// <param name="element">Target event element to read fields for.</param>
        private void ReadFields(XElement element)
        {
            XElement items;

            HeaderFields.Clear();
            DataFields.Clear();

            if (null != (items = element.Element(DATAFIELDS_ELEMENT)))
            {
                uint maxHeaderOrdinal;

                maxHeaderOrdinal = 0;

                // locate header fields
                var headers =
                    from el in items.Elements()
                    where
                        (el.Name == DATA_ELEMENT) &&
                        (true == (ReadOptionalAttributeBoolFromUInt(el, HeaderDataField.HEADER_ATTRIBUTE) ?? false))
                    select new DataField(el);

                // locate regular fields
                var fields =
                    from el in items.Elements()
                    where
                        (el.Name == DATA_ELEMENT) &&
                        (false == (ReadOptionalAttributeBoolFromUInt(el, HeaderDataField.HEADER_ATTRIBUTE) ?? false))
                    select new DataField(el);

                // load in header fields, noting the max ordinal
                foreach (var field in headers)
                {
                    HeaderFields.Add(field);
                    maxHeaderOrdinal = Math.Max(maxHeaderOrdinal, field.Ordinal);
                }

                // load in regular fields, offset by max header ordinal
                foreach (var field in fields)
                {
                    DataFields.Add(new DataField(field, field.Ordinal - maxHeaderOrdinal, field.Name));
                }
            }
        }

        /// <summary>
        /// Gets the element position within the collection of elements.
        /// </summary>
        /// <param name="element">Element whose position will be looked up.</param>
        /// <returns>Returns the position associated with the specified element.</returns>
        private UInt32? GetElementPosition(XElement element)
        {
            XElement parent;
            UInt32 position;

            if (null == element.Parent)
            {
                return null;
            }

            parent = element.Parent;
            position = 0;

            foreach (XElement el in parent.Elements(element.Name))
            {
                if (el == element)
                {
                    break;
                }

                position++;
            }

            return position;
        }

        /// <summary>
        /// Converts an Event into its XML representation.
        /// </summary>
        /// <param name="writer">The XmlWriter stream to which the object is serialized.</param>
        protected override void WriteXml(XmlWriter writer)
        {
            uint maxHeaderOrdinal;

            maxHeaderOrdinal = 0;

            WriteAttribute(writer, FINGERPRINT_ATTRIBUTE, Fingerprint);
            WriteAttribute(writer, VALUE_ATTRIBUTE, Value);
            WriteAttribute(writer, INDEX_ATTRIBUTE, Ordinal);
            WriteAttribute(writer, SYMBOL_ATTRIBUTE, Symbol);
            WriteAttribute(writer, CATEGORY_ATTRIBUTE, categoryContent);
            WriteAttribute(writer, LOGSTRINGID_ATTRIBUTE, LogStringId);
            WriteAttribute(writer, OMNITUREAREA_ATTRIBUTE, OmnitureArea);
            WriteAttribute(writer, HEADERVERSION_ATTRIBUTE, HeaderVersion);
            WriteAttribute(writer, OWNERS_ATTRIBUTE, Owners);

            if (Deprecated == true)
            {
                WriteAttribute(writer, DEPRECATED_ATTRIBUTE, 1);
            }

            WriteElement(writer, DESCRIPTION_ELEMENT, Description);

            writer.WriteStartElement(DATAFIELDS_ELEMENT);

            // write header fields out first - noting the max header ordinal
            foreach (DataField field in HeaderFields.OrderBy(df => df.Ordinal))
            {
                dataFieldSerializer.Serialize(writer, HeaderDataField.CreateHeader(field));
                
                maxHeaderOrdinal = field.Ordinal;
            }

            // write the regular fields out - offset by header ordinal max
            foreach (DataField field in DataFields.OrderBy(df => df.Ordinal))
            {
                dataFieldSerializer.Serialize(writer, new DataField(field, field.Ordinal + maxHeaderOrdinal, field.Name));
            }            

            writer.WriteEndElement();

            if (null != metadata)
            {
                // force name to metadata
                metadata.Name = METADATA_ELEMENT;

                metadata.WriteTo(writer);
            }
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\etx\lib\EtxManifest.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using System.Xml.Serialization;

using xonline.common.service;
using xonline.core.wiredata;
using xonline.common.utilities2;

namespace xonline.common.core.etx
{
    using collections;

    [XmlRoot(EtxManifest.ELEMENT_NAME)]
    /// <summary>
    /// Represents a merged Manifest document.
    /// </summary>
    public class EtxManifest : SchemaObject
    {
        #region Constants and Fields

        private readonly static XmlSerializer producerSerializer = new XmlSerializer(typeof(Producer));

        protected const string INSTRUMENTATION_ELEMENT = "instrumentation";
        protected const string PRODUCERS_ELEMENT = "globaleventproducers";
        protected const string PRODUCER_ELEMENT = "producer";
        protected const string XMLNS_PREFIX = "xmlns";
        protected const string WIN_NAMESPACE = "win";
        protected const string XS_NAMESPACE = "xs";
        protected const string WIN_NAMESPACE_URL = "http://manifests.microsoft.com/win/2004/08/windows/events";
        protected const string XS_NAMESPACE_URL = "http://www.w3.org/2001/XMLSchema";
        protected const string ELEMENT_NAME = "etxmanifest";

        private ProducerCollection producers;

        #endregion

        #region Properties

        /// <summary>
        /// Gets the collection of producers stored in the manifest.
        /// </summary>
        public ProducerCollection Producers
        {
            get
            {
                if (null == producers)
                {
                    lock (this)
                    {
                        if (null == producers)
                        {
                            producers = new ProducerCollection();
                        }
                    }
                }

                return producers;
            }
        }
        
        #endregion

        /// <summary>
        /// Initializes a new instance of the EtxManifest.
        /// </summary>
        public EtxManifest()
        {
        }

        /// <summary>
        /// Initializes a new instance of an EtxManifest via object deserialization.
        /// </summary>
        /// <param name="reader">The XmlReader stream from which the object is deserialized.</param>
        public EtxManifest(XmlReader reader) : base(reader)
        {
        }

        /// <summary>
        /// Initializes a new instance of an EtxManifest via object deserialization.
        /// </summary>
        /// <param name="element">XElement containing the xml representation of the object.</param>
        public EtxManifest(XElement element) : base(element)
        {
        }
        
        /// <summary>
        /// Merges the producers from the specified manifest into this manifest.
        /// </summary>
        /// <param name="target">Manifest to merge with.</param>
        /// <returns>Returns true if the manifest was changed due to the merge; otherwise false.</returns>
        public bool Merge(EtxManifest target)
        {
            bool changed = false;

            if (null == target)
            {
                throw new ArgumentNullException("target");
            }

            lock (Producers)
            {
                foreach (Producer producer in target.Producers)
                {
                    Producer existing;

                    if (Producers.Fingerprints.TryGetValue(producer.Fingerprint, out existing))
                    {
                        if (existing.Equals(producer))
                        {
                            changed |= existing.Merge(producer);
                        }
                        else
                        {
                            throw new InvalidOperationException(
                                string.Format("Collision occured on existing producer.\nFingerprint: {0}", producer.Fingerprint));
                        }
                    }
                    else
                    {
                        Producers.Add(producer);
                        changed = true;
                    }
                }
            }

            return changed;
            
        }

        #region EtxSchemaObject Implementation

        /// <summary>
        /// Generates a Manifest from its XML representation.
        /// </summary>
        /// <param name="reader">The XElement containing the object definition.</param>
        protected override void ReadElement(XElement element)
        {
            XElement container;

            Producers.Clear();

            container = element.Element(INSTRUMENTATION_ELEMENT);
            container = null == container ? null : container.Element(PRODUCERS_ELEMENT);

            if (null != container)
            {
                Producers.AddRange
                (
                    from el in container.Elements()
                    where el.Name == PRODUCER_ELEMENT
                    select new Producer(el)
                );
            }
        }

        /// <summary>
        /// Converts an Manifest into its XML representation.
        /// </summary>
        /// <param name="writer">The XmlWriter stream to which the object is serialized.</param>
        protected override void WriteXml(XmlWriter writer)
        {
            writer.WriteAttributeString(XMLNS_PREFIX, WIN_NAMESPACE, null, WIN_NAMESPACE_URL);
            writer.WriteAttributeString(XMLNS_PREFIX, XS_NAMESPACE, null, XS_NAMESPACE_URL);
            writer.WriteStartElement(INSTRUMENTATION_ELEMENT);
            writer.WriteStartElement(PRODUCERS_ELEMENT);

            foreach (Producer producer in Producers.Values.OrderBy(p => p.Fingerprint))
            {
                producerSerializer.Serialize(writer, producer);
            }

            writer.WriteEndElement();
            writer.WriteEndElement();
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\etx\lib\Extensions.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using xonline.common.utilities2;

namespace xonline.common.core.etx.extensions
{
    /// <summary>
    /// Helper methods for Etx object access.
    /// </summary>
	public static class EtxExtensions
	{
        /// <summary>
        /// Gets an event from a manifest given its producer fingerprint and event fingerprint.
        /// </summary>
        /// <param name="manifest">Manifest to search from.</param>
        /// <param name="producerFingerprint">Fingerprint associated with the producer.</param>
        /// <param name="eventFingerprint">Fingerprint associated with the event.</param>
        /// <returns>Returns the event identified by the specified fingerprints.</returns>
        public static Event GetEvent(this EtxManifest manifest, Blob producerFingerprint, Blob eventFingerprint)
        {
            if (null == manifest)
            {
                throw new ArgumentNullException("manifest");
            }

            if (null == producerFingerprint)
            {
                throw new ArgumentNullException("producerFingerprint");
            }
            
            if (null == eventFingerprint)
            {
                throw new ArgumentNullException("eventFingerprint");
            }

            return manifest.Producers.Fingerprints[producerFingerprint].Events.Fingerprints[eventFingerprint];
        }

        /// <summary>
        /// Gets an event from a manifest given its producer fingerprint and event oridinal.
        /// </summary>
        /// <param name="manifest">Manifest to search from.</param>
        /// <param name="producerFingerprint">Fingerprint associated with the producer.</param>
        /// <param name="eventOrdinal">Ordinal associated with the event.</param>
        /// <returns>Returns the event identified by the specified identifiers.</returns>
        public static Event GetEventByOrdinal(this EtxManifest manifest, Blob producerFingerprint, uint eventOrdinal)
        {
            if (null == manifest)
            {
                throw new ArgumentNullException("manifest");
            }

            if (null == producerFingerprint)
            {
                throw new ArgumentNullException("producerFingerprint");
            }

            return manifest.Producers.Fingerprints[producerFingerprint].Events.Ordinals[eventOrdinal];
        }

        /// <summary>
        /// Gets an event from a manifest given its producer fingerprint and event oridinal.
        /// </summary>
        /// <param name="manifest">Manifest to search from.</param>
        /// <param name="producerFingerprint">Fingerprint associated with the producer.</param>
        /// <param name="eventOrdinal">Ordinal associated with the event.</param>
        /// <param name="result">Upon succesful completion will contain the target event; otherwise null.</param>
        /// <returns>Returns true if the search was successful; otherwise false.</returns>
        public static bool TryGetEventByOrdinal(this EtxManifest manifest, Blob producerFingerprint, uint eventOrdinal, out Event result)
        {
            Producer producer;

            if (null == manifest)
            {
                throw new ArgumentNullException("manifest");
            }

            if (null == producerFingerprint)
            {
                throw new ArgumentNullException("producerFingerprint");
            }

            result = null;

            if (manifest.Producers.Fingerprints.TryGetValue(producerFingerprint, out producer))
            {
                if (producer.Events.Ordinals.TryGetValue(eventOrdinal, out result))
                {
                    return true;
                }
            }

            return false;
        }
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\etx\lib\SchemaObject.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using System.Xml.Serialization;

using xonline.common.service;
using xonline.common.utilities2;
using xonline.core.wiredata;

namespace xonline.common.core.etx
{
    using collections;

    /// <summary>
    /// Base class for all ETXManifest Schema Objects
    /// </summary>
    public abstract class SchemaObject : IXmlSerializable
    {
        /// <summary>
        /// Initializes a new instance of an EtxSchemaObject.
        /// </summary>
        protected SchemaObject()
        {
        }

        /// <summary>
        /// Initializes a new instance of an EtxSchemaObject via object deserialization.
        /// </summary>
        /// <param name="reader">The XmlReader stream from which the object is deserialized.</param>
        protected SchemaObject(XmlReader reader)
        {
            if (null == reader)
            {
                throw new ArgumentNullException("reader");
            }

            ((IXmlSerializable)this).ReadXml(reader);
        }

        /// <summary>
        /// Initializes a new instance of an EtxSchemaObject via object deserialization.
        /// </summary>
        /// <param name="element">XElement containing the xml representation of the object.</param>
        protected SchemaObject(XElement element)
        {
            if (null == element)
            {
                throw new ArgumentNullException("element");
            }

            ReadElement(element);
        }

        #region Reader Helper Methods

        /// <summary>
        /// Reads an attribute from an XElement.  The attribute does not need to exist.
        /// </summary>
        /// <param name="element">Source XElement to read from.</param>
        /// <param name="name">Name of target XAttribute to read from.</param>
        /// <returns>Returns the string value of the attribute, or null if attribute is not present.</returns>
        protected static string ReadAttribute(XElement element, string name)
        {
            XAttribute attrib = element.Attribute(name);
            return attrib == null ? (string)null : attrib.Value;
        }

        /// <summary>
        /// Reads an attribute from an XElement as a uint.  The attribute must exist.
        /// </summary>
        /// <param name="element">Source XElement to read from.</param>
        /// <param name="name">Name of target XAttribute to read from.</param>
        /// <returns>Returns the parsed uint value of the attribute.</returns>
        protected static UInt32 ReadAttributeUInt(XElement element, string name)
        {
            return UInt32.Parse(ReadAttribute(element, name));
        }

        /// <summary>
        /// Reads an attribute from an XElement as a ushort.  The attribute must exist.
        /// </summary>
        /// <param name="element">Source XElement to read from.</param>
        /// <param name="name">Name of target XAttribute to read from.</param>
        /// <returns>Returns the parsed ushort value of the attribute.</returns>
        protected static UInt16 ReadAttributeUInt16(XElement element, string name)
        {
            return UInt16.Parse(ReadAttribute(element, name));
        }

        /// <summary>
        /// Reads an attribute from an XElement as a byte.  The attribute must exist.
        /// </summary>
        /// <param name="element">Source XElement to read from.</param>
        /// <param name="name">Name of target XAttribute to read from.</param>
        /// <returns>Returns the parsed byte value of the attribute.</returns>
        protected static byte ReadOptionalAttributeByte(XElement element, string name)
        {
            string val;

            if (string.IsNullOrEmpty(val = ReadAttribute(element, name)))
            {
                return 0;
            }

            return byte.Parse(val);
        }

        /// <summary>
        /// Reads an attribute from an XElement as a Blob.  The attribute must exist.
        /// </summary>
        /// <param name="element">Source XElement to read from.</param>
        /// <param name="name">Name of target XAttribute to read from.</param>
        /// <returns>Returns the parsed Blob value of the attribute.</returns>
        protected static Blob ReadAttributeBlob(XElement element, string name)
        {
            string g;

            if (string.IsNullOrEmpty(g = ReadAttribute(element, name)))
            {
                throw new ArgumentException("Attribute is missing or empty: " + name, "name");
            }

            return Blob.Parse(g);
        }

        /// <summary>
        /// Reads an attribute from an XElement as a nilable bool.  The attribute is optional.
        /// </summary>
        /// <param name="element">Source XElement to read from.</param>
        /// <param name="name">Name of target XAttribute to read from.</param>
        /// <returns>Returns the parsed bool value of the element.</returns>
        protected static bool? ReadOptionalAttributeBoolFromUInt(XElement element, string name)
        {
            string text = ReadAttribute(element, name);

            return null == text ? (bool?)null : UInt32.Parse(text) != 0;
        }

        /// <summary>
        /// Reads an attribute from an XElement as an enum.  The attribute must exist.
        /// </summary>
        /// <typeparam name="T">Type associated with enum.</typeparam>
        /// <param name="element">Source XElement to read from.</param>
        /// <param name="name">Name of target XAttribute to read from.</param>
        /// <returns>Returns the parsed enum value of the element.</returns>
        protected static T ReadAttributeEnum<T>(XElement element, string name)
        {
            return ReadAttributeEnum<T>(element, name, s => s);
        }

        /// <summary>
        /// Reads an attribute from an XElement as an enum.  The attribute need not exist.
        /// </summary>
        /// <typeparam name="T">Type associated with enum.</typeparam>
        /// <param name="element">Source XElement to read from.</param>
        /// <param name="name">Name of target XAttribute to read from.</param>
        /// <param name="default">Default enum value to return if the read fails or attribute isn't present.</param>
        /// <param name="contents">Returns the contents of the attribute, or null if it wasn't present.</param>
        /// <returns>Returns the parsed enum value, or the default if the parse failed.</returns>
        protected static T ReadAttributeEnum<T>(XElement element, string name, T @default, out string contents)
        {
            contents = ReadAttribute(element, name);

            if (!string.IsNullOrEmpty(contents))
            {
                try
                {
                    return (T)Enum.Parse(typeof(T), contents);
                }
                catch
                {
                    // swallowing exceptions
                }
            }

            return @default;
        }

        /// <summary>
        /// Reads an attribute from an XElement as an enum.  The attribute must exist.
        /// </summary>
        /// <typeparam name="T">Type associated with enum.</typeparam>
        /// <param name="element">Source XElement to read from.</param>
        /// <param name="name">Name of target XAttribute to read from.</param>
        /// <param name="munipulator">Function to munipulate input text prior to it being parsed by the enum.</param>
        /// <returns>Returns the parsed enum value of the element.</returns>
        protected static T ReadAttributeEnum<T>(XElement element, string name, Func<string, string> munipulator)
        {
            string g;

            if (string.IsNullOrEmpty(g = ReadAttribute(element, name)))
            {
                throw new ArgumentException("Attribute is missing or empty: " + name, "name");
            }

            return (T)Enum.Parse(typeof(T), munipulator(g));
        }

        /// <summary>
        /// Returns an attribute from an XElement as an Enum.  The attribute does not need to exist.
        /// </summary>
        /// <typeparam name="T">Type associated with enum.</typeparam>
        /// <param name="element">Source XElement to read from.</param>
        /// <param name="name">Name of target XAttribute to read from.</param>
        /// <returns>Returns the parsed enum value of the element, or null if the attribute is missing.</returns>
        protected static T? ReadOptionalAttributeEnum<T>(XElement element, string name) where T : struct
        {
            string attrib;
            T? result;

            attrib = ReadAttribute(element, name);

            if (null == attrib)
            {
                result = null;
            }
            else
            {
                result = (T)Enum.Parse(typeof(T), attrib);
            }

            return result;
        }

        /// <summary>
        /// Returns the text contents of a simple element.  The element does not need to exist.
        /// </summary>
        /// <param name="element">Source XElement to read from.</param>
        /// <param name="name">Name of target child XElement to read from.</param>
        /// <returns>Returns the value of the simple element, or null if it is missing.</returns>
        protected string ReadSimpleElement(XElement element, string name)
        {
            XElement item = element.Element(name);
            return null == item ? (string)null : item.Value;
        }

        #endregion

        #region Writer Helper Methods

        /// <summary>
        /// Writes an attribute to the current element if the value is not null.
        /// </summary>
        /// <param name="writer">The XmlWriter stream to which the attribute is serialized.</param>
        /// <param name="name">Name of the target attribute.</param>
        /// <param name="value">Value to write to the element, this value may be null.</param>
        protected static void WriteAttribute(XmlWriter writer, string name, object value)
        {
            if (null != value)
            {
                if (value is Guid)
                {
                    // want the 32 hex digit representation of guid
                    writer.WriteAttributeString(name, ((Guid)value).ToString("N"));
                }
                else
                {
                    writer.WriteAttributeString(name, value.ToString());
                }
            }
        }

        /// <summary>
        /// Writes an attribute to the current element if the value is present.
        /// </summary>
        /// <typeparam name="T">Value type associated with the value serialized to the attribute.</typeparam>
        /// <param name="writer">The XmlWriter stream to which the attribute is serialized.</param>
        /// <param name="name">Name of the target attribute.</param>
        /// <param name="value">Nullable value to write to the element, this value may be null.</param>
        protected static void WriteAttribute<T>(XmlWriter writer, string name, T? value) where T : struct
        {
            if (value.HasValue)
            {
                writer.WriteAttributeString(name, value.ToString());
            }
        }

        /// <summary>
        /// Writes a simple element to the current element if the value is not null.
        /// </summary>
        /// <param name="writer">The XmlWriter stream to which the attribute is serialized.</param>
        /// <param name="name">Name of the target element.</param>
        /// <param name="value">Value to write to the element, this value may be null.</param>
        protected static void WriteElement(XmlWriter writer, string name, object value)
        {
            if (null != value)
            {
                writer.WriteElementString(name, value.ToString());
            }
        }

        #endregion

        /// <summary>
        /// When implemented by a subclass, this method generates an EtxSchemaObject from its
        /// XElement representation.
        /// </summary>
        /// <param name="element">The XElement representation from which the object is deserialized.</param>
        protected abstract void ReadElement(XElement element);

        /// <summary>
        /// When implemented by a subclass, this method converts an EtxSchemaObject into its
        /// XML representation.
        /// </summary>
        /// <param name="writer">The XmlWriter stream to which the object is serialized.</param>
        protected abstract void WriteXml(XmlWriter writer);

        #region IXmlSerializable Implementation
        
        /// <summary>
        /// This method does not do anything, ignore it.
        /// </summary>
        /// <returns>Returns null.</returns>
        XmlSchema IXmlSerializable.GetSchema()
        {
            return null;
        }

        /// <summary>
        /// Generates an EtxSchemaObject from its XML representation.
        /// </summary>
        /// <param name="reader">The XmlReader stream from which the object is deserialized.</param>
        void IXmlSerializable.ReadXml(XmlReader reader)
        {
            ReadElement(XElement.Load(reader, LoadOptions.SetLineInfo | LoadOptions.PreserveWhitespace));
        }

        /// <summary>
        /// Converts an EtxSchemaObject into its XML representation.
        /// </summary>
        /// <param name="writer">The XmlWriter stream to which the object is serialized.</param>
        void IXmlSerializable.WriteXml(XmlWriter writer)
        {
            WriteXml(writer);
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\etx\lib\Producer.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using System.Xml.Serialization;

using xonline.common.service;
using xonline.common.utilities2;
using xonline.core.wiredata;

namespace xonline.common.core.etx
{
    using collections;

    [XmlRoot(Producer.ELEMENT_NAME)]
    /// <summary>
    /// Represents the producer element of the ETX Manifest.
    /// </summary>
    public class Producer : SchemaObject
    {
        #region Constants and Fields

        private static readonly XmlSerializer eventSerializer = new XmlSerializer(typeof(Event));

        protected const string SYMBOL_ATTRIBUTE = "symbol";
        protected const string ID_ATTRIBUTE = "id";
        protected const string OWNERS_ATTRIBUTE = "owners";
        protected const string DESCRIPTION_ELEMENT = "description";
        protected const string EVENTS_ELEMENT = "events";
        protected const string EVENT_ELEMENT = "event";
        protected const string METADATA_ELEMENT = "metadata";
        protected const string ELEMENT_NAME = "producer";

        private EventCollection events;
        private XElement metadata;

        #endregion

        #region Properties
        
        /// <summary>
        /// Gets or sets the metadata associated with the event.
        /// </summary>
        /// <remarks>
        /// This value may be null for either get or set.  When the value
        /// is non-null for a set it must an element named metadata.
        /// </remarks>
        public XElement Metadata
        {
            get
            {
                return metadata;
            }
            set
            {
                if (null != value)
                {
                    if (value.Name != METADATA_ELEMENT)
                    {
                        throw new ArgumentException("element name must be: " + METADATA_ELEMENT, "value");
                    }
                }

                metadata = value;
            }
        }

        /// <summary>
        /// Gets or sets the description associated with the producer.
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// Gets the unique symbol associated with this producer.
        /// </summary>
        public string Symbol { get; private set; }

        /// <summary>
        /// Gets or sets the owners associated with this producer.
        /// </summary>
        public string Owners { get; set; }

        /// <summary>
        /// Gets the unique numeric namespace associated with this producer.
        /// </summary>
        public Blob Fingerprint { get; private set; }

        /// <summary>
        /// Gets the collection of events associated with this producer.
        /// </summary>
        public EventCollection Events
        {
            get
            {
                if (null == events)
                {
                    lock (this)
                    {
                        if (null == events)
                        {
                            events = new EventCollection();
                        }
                    }
                }

                return events;
            }
        }

        #endregion

        /// <summary>
        /// Constructor put in place to appease the System.Xml.Serialization gods.  Should not be used by mortals.
        /// </summary>
        protected Producer()
        {
        }

        /// <summary>
        /// Initializes a new instance of a Producer.
        /// </summary>
        /// <param name="symbol">Symbol associated with the manifest.</param>
        /// <param name="fingerprint">Fingerprint associated with the Producer.</param>
        public Producer(string symbol, Blob fingerprint)
        {
            if (null == fingerprint)
            {
                throw new ArgumentNullException("fingerprint");
            }

            Fingerprint = Blob.Parse(fingerprint.ToString());
            Symbol = symbol;
        }

        /// <summary>
        /// Initializes a new instance of an Producer via object deserialization.
        /// </summary>
        /// <param name="reader">The XmlReader stream from which the object is deserialized.</param>
        public Producer(XmlReader reader) : base(reader)
        {
        }

        /// <summary>
        /// Initializes a new instance of an Producer via object deserialization.
        /// </summary>
        /// <param name="element">XElement containing the xml representation of the object.</param>
        public Producer(XElement element) : base(element)
        {
        }

        /// <summary>
        /// Merges the events from the specified producer into this producer.
        /// </summary>
        /// <param name="target">Manifest to merge with.</param>
        /// <returns>Returns true if the producer was changed due to the merge; otherwise false.</returns>
        public bool Merge(Producer target)
        {
            bool changed = false;

            if (null == target)
            {
                throw new ArgumentNullException("target");
            }

            if (Description != target.Description)
            {
                Description = target.Description;
                changed = true;
            }

            // allow for event description updates
            foreach (var e in target.Events)
            {
                Event source;

                if (Events.Fingerprints.TryGetValue(e.Fingerprint, out source) && source.Equals(e))
                {
                    changed |= source.Merge(e);
                }
                else
                {
                    throw new ArgumentException(
                        "Missing or mis-match of event with fingerprint: " + e.Fingerprint.ToString(), 
                        "target");
                }
            }

            if (Owners != target.Owners)
            {
                Owners = target.Owners;
                changed = true;
            }

            if (Metadata == null && target.Metadata != null)
            {
                Metadata = target.Metadata;
                changed = true;
            }
            else if (Metadata != null && target.Metadata == null)
            {
                Metadata = target.Metadata;
                changed = true;
            }
            else if (!XElement.DeepEquals(Metadata, target.Metadata))
            {
                Metadata = target.Metadata;
                changed = true;
            }

            return changed;
        }

        /// <summary>
        /// Determines whether or not the specified items match.
        /// </summary>
        /// <param name="obj">Target of comparison.</param>
        /// <returns>Returns true if the objects are equal; otherwise false.</returns>
        public override bool Equals(object obj)
        {
            Producer target = obj as Producer;

            if (null == target)
            {
                return false;
            }

            return
                Fingerprint == target.Fingerprint &&
                Symbol == target.Symbol &&
                Events.Count == target.Events.Count &&
                Array.TrueForAll(target.Events.ToArray(), e => Events.Contains(e));
        }

        /// <summary>
        /// Gets the hash code associated with this object.
        /// </summary>
        /// <returns>Returns a hash of this objects value.</returns>
        public override int GetHashCode()
        {
            return Fingerprint.GetHashCode() 
                ^ (Symbol ?? "").GetHashCode() 
                ^ Events.Aggregate(0, (a, e) => a ^ e.GetHashCode());
        }

        #region EtxSchemaObject Implementation

        /// <summary>
        /// Generates a Producer from its XML representation.
        /// </summary>
        /// <param name="reader">The XElement containing the object definition.</param>
        protected override void ReadElement(XElement element)
        {
            XElement items;

            Fingerprint = ReadAttributeBlob(element, ID_ATTRIBUTE);
            Symbol = ReadAttribute(element, SYMBOL_ATTRIBUTE);
            Description = ReadSimpleElement(element, DESCRIPTION_ELEMENT);
            Owners = ReadAttribute(element, OWNERS_ATTRIBUTE);
            Metadata = element.Element(METADATA_ELEMENT);

            Events.Clear();

            if (null != (items = element.Element(EVENTS_ELEMENT)))
            {
                Events.AddRange
                (
                    from el in items.Elements()
                    where el.Name == EVENT_ELEMENT
                    select new Event(el)
                );
            }
        }

        /// <summary>
        /// Converts an Producer into its XML representation.
        /// </summary>
        /// <param name="writer">The XmlWriter stream to which the object is serialized.</param>
        protected override void WriteXml(XmlWriter writer)
        {
            WriteAttribute(writer, SYMBOL_ATTRIBUTE, Symbol);
            WriteAttribute(writer, ID_ATTRIBUTE, Fingerprint);
            WriteAttribute(writer, OWNERS_ATTRIBUTE, Owners);
            WriteElement(writer, DESCRIPTION_ELEMENT, Description);

            writer.WriteStartElement(EVENTS_ELEMENT);

            foreach (Event @event in Events.OrderBy(df => df.Ordinal))
            {
                eventSerializer.Serialize(writer, @event);
            }

            writer.WriteEndElement();

            if (null != metadata)
            {
                // force name to metadata
                metadata.Name = METADATA_ELEMENT;

                metadata.WriteTo(writer);
            }
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\etx\lib\fingerprint\FingerprintAlgorithmSharedResources.cs ===
//------------------------------------------------------------------------------
//  <copyright file="FingerprintAlgorithmSharedResources.cs" company="Microsoft">
//      Copyright (c) Microsoft. All rights reserved.
//      Internal use only.    
//  </copyright>
//------------------------------------------------------------------------------

namespace xonline.common.core.etx
{
    using System.Security.Cryptography;

    // Contains shared FingerprintAlgorithm objects
    internal static class FingerprintAlgorithmSharedResources
    {
        // MD5 hash algorithm used by several resources
        internal static byte[] ComputeHash(byte[] buffer)
        {
            using (MD5 hash = MD5.Create())
            {
                return hash.ComputeHash(buffer);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\etx\lib\fingerprint\FingerprintAlgorithms.cs ===
//------------------------------------------------------------------------------
//  <copyright file="FingerprintAlgorithm.cs" company="Microsoft">
//      Copyright (c) Microsoft. All rights reserved.
//      Internal use only.    
//  </copyright>
//------------------------------------------------------------------------------

namespace xonline.common.core.etx
{
    using System;

    using xonline.common.utilities2;

    /// <summary>
    /// Abstract base of all managed ETX fingerprint generation algorithms
    /// </summary>
    public abstract class FingerprintAlgorithm
    {
        /// <summary>
        /// Delegate representing fingerprint parameter validation logic.
        /// </summary>
        /// <param name="sender">Algorithm instance requesting validation.</param>
        /// <param name="parameters">Parameters to validate.</param>
        public delegate void Validator(FingerprintAlgorithm sender, FingerprintParameters parameters);

        /// <summary>
        /// Validator that performs no validation.
        /// </summary>
        public static readonly Validator NoValidation = (s, p) => { };

        /// <summary>
        /// Exposes the MD5 based event fingerprint algorithm. This algorithm
        /// was introduced with the release ETX during Berlin. Xbox360 console
        /// ETX manifest are ingested using this algorithm. Event fingerprints
        /// are generated with this algorithm within the API by default.
        /// </summary>
        public static readonly EtxMD5EventFingerprintAlgorithm MD5Event = new EtxMD5EventFingerprintAlgorithm();

        /// <summary>
        /// Exposes the Sequential producer fingerprint algorithm.  This
        /// algorithm is introduced to serve Xbox.com's ETX manifest
        /// creation needs.
        /// 
        /// Sequential manifests should not be generated by uncoordinated
        /// processes since sequence collisions break validation; as they
        /// should.
        /// </summary>
        public static readonly SequentialProducerFingerprintAlgorithm SequentialProducer = new SequentialProducerFingerprintAlgorithm();

        /// <summary>
        /// Exposes the Sequential event fingerprint algorithm.  This
        /// algorithm is introduced to serve Xbox.com's ETX manifest
        /// creation needs
        /// 
        /// Sequential manifests should not be generated by uncoordinated
        /// processes since sequence collisions break validation; as they
        /// should.
        /// </summary>
        public static readonly SequentialEventFingerprintAlgorithm SequentialEvent = new SequentialEventFingerprintAlgorithm();

        // This delegate contains custom validation logic.  The constructor logic
        // ensures that this value is never null; given no bugs or reflection
        // trickery.
        private Validator customParameterValidation;

        /// <summary>
        /// Initializes a new instance of the FingerprintAlgorithm.
        /// </summary>
        /// <param name="name">Human friendly name of the algorithm.</param>
        /// <param name="version">
        /// Unique version of the algorithm.  There is no enforcement mechanism
        /// ensuring uniqueness.
        /// </param>
        protected FingerprintAlgorithm(string name, ushort version)
            : this(name, version, NoValidation)
        {
        }

        /// <summary>
        /// Initializes a new instace of the FingerprintAlgorithm.
        /// </summary>
        /// <param name="name">Human friendly name of the algorithm.</param>
        /// <param name="version">
        /// Unique version of the algorithm.  There is no enforcement mechanism
        /// ensuring uniqueness.
        /// </param>
        /// <param name="customParameterValidation">Custom fingerprint parameter validation logic.</param>
        protected FingerprintAlgorithm(
            string name,
            ushort version,
            Validator customParameterValidation)
        {
            if (string.IsNullOrEmpty(name))
            {
                throw new ArgumentNullException("name", "FingerprintAlgorithm name cannot be null");
            }

            this.customParameterValidation = customParameterValidation ?? NoValidation;

            this.Name = name;
            this.Version = version;
        }

        /// <summary>
        /// Gets the human friendly name of the algorithm.
        /// </summary>
        public string Name
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets the unique version of the algorithm.  The algorithm will only
        /// accept FingerprintParameters of matching version.
        /// </summary>
        public ushort Version
        {
            get;
            private set;
        }

        /// <summary>
        /// Performs validation logic on the input fingerprint parameters.
        /// </summary>
        /// <remarks>
        /// The Version property of the input FingerprintParameters parameter
        /// needs to match this FingerprintAlgorithm's Version.
        /// </remarks>
        /// <param name="parameters">Parameters to validate.</param>
        /// <exception cref="ArgumentNullException">Caused when the parameters parameter is null.</exception>
        /// <exception cref="ArgumentException">Caused when the parameters and algorithm version dont match.</exception>
        public void ValidateParameters(FingerprintParameters parameters)
        {
            if (parameters == null)
            {
                throw new ArgumentNullException(
                    "parameters",
                    string.Format("{0}: input FingerprintParameters object cannot be null.", 
                        this));
            }

            if (parameters.AlgorithmVersion != Version)
            {
                throw new ArgumentException(
                    string.Format("{0}: FingerprintParameter version ({1}) does not match.", 
                        this, 
                        parameters.AlgorithmVersion), 
                    "parameters");
            }

            customParameterValidation(this, parameters);
        }

        /// <summary>
        /// Generates a fingerprint using the specified FingerprintParameters.
        /// The parameters are validated before generation takes place.
        /// </summary>
        /// <remarks>
        /// The Version property of the input FingerprintParameters parameter
        /// needs to match this FingerprintAlgorithm's Version.
        /// </remarks>
        /// <param name="parameters">Parameters used to drive fingerprint generation.</param>
        /// <returns>Returns the object fingerprint as a Blob.</returns>
        public Blob GenerateFingerprint(FingerprintParameters parameters)
        {
            ValidateParameters(parameters);

            return GenerateFingerprintAlg(parameters);
        }

        /// <summary>
        /// When overriden this method is responsible for fingerprint generation.
        /// </summary>
        /// <param name="parameters">Parameters used to drive fingerprint generation.</param>
        /// <returns>Returns the object fingerprint as a Blob.</returns>
        protected abstract Blob GenerateFingerprintAlg(FingerprintParameters parameters);

        /// <summary>
        /// Converts the algorithm to a string describing the algorithm.
        /// </summary>
        /// <returns>Returns a string describing the algorithm.</returns>
        public override string ToString()
        {
 	        return string.Format("FingerprintAlgorithm[{0}, {1}]", Version, Name);
        }
    }

    /// <summary>
    /// Abstract base of all managed ETX fingerprint generation algorithms.  This
    /// base allows subclasses to deal with FingerprintParameters via generics
    /// </summary>
    /// <typeparam name="ParamType">Type associated with FingerprintParameters.</typeparam>
    public abstract class FingerprintAlgorithm<ParamType> : FingerprintAlgorithm
        where ParamType : FingerprintParameters
    {
        /// <summary>
        /// Delegate representing fingerprint parameter validation logic.
        /// </summary>
        /// <param name="sender">Algorithm instance requesting validation.</param>
        /// <param name="parameters">Parameters to validate.</param>
        public delegate void TypedValidator(FingerprintAlgorithm sender, ParamType parameters);

        /// <summary>
        /// Validator that performs no validation.
        /// </summary>
        public static readonly TypedValidator NoTypedValidation = (s, p) => { };

        #region Constructor Helper Methods

        // Validates that the parameter conforms to the ParamType generic type.
        private static void CheckParameterType(FingerprintAlgorithm sender, FingerprintParameters parameters)
        {
            if (!(parameters is ParamType))
            {
                throw new ArgumentException(
                    string.Format("{0}: FingerprintParameter object must be assignable to type {1}",
                        sender.ToString(),
                        typeof(ParamType).Name,
                    "parameters"));
            }
        }

        // Validates that the parameter conforms to the ParamType generic type, and that
        // its value passes the supplied value validation action.  valueCheck cannot be null.
        private static void CheckParameterTypeAndValue(FingerprintAlgorithm sender, FingerprintParameters parameters, TypedValidator valueCheck)
        {
            CheckParameterType(sender, parameters);

            valueCheck(sender, (ParamType)parameters);
        }

        #endregion

        /// <summary>
        /// Initializes a new instance of the FingerprintAlgorithm.
        /// </summary>
        /// <remarks>
        /// This constructor automatically adds custom validation to the
        /// base FingerprintAlgorithm for FingerprintParameters generic
        /// type enforcement.
        /// </remarks>
        /// <param name="name">Human friendly name of the algorithm.</param>
        /// <param name="version">
        /// Unique version of the algorithm.  There is no enforcement mechanism
        /// ensuring uniqueness.
        /// </param>
        protected FingerprintAlgorithm(string name, ushort version)
            : base(name, version, CheckParameterType)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FingerprintAlgorithm.
        /// </summary>
        /// <remarks>
        /// This constructor automatically adds custom validation to the
        /// base FingerprintAlgorithm for FingerprintParameters generic
        /// type enforcement.
        /// </remarks>
        /// <param name="name">Human friendly name of the algorithm.</param>
        /// <param name="version">
        /// Unique version of the algorithm.  There is no enforcement mechanism
        /// ensuring uniqueness.
        /// </param>
        /// <param name="paramValueValidation">Validation action for parameter value.</param>
        protected FingerprintAlgorithm(string name, ushort version, TypedValidator paramValueValidation)
            : base(name, version, (s, p) => { CheckParameterTypeAndValue(s, p, paramValueValidation ?? NoTypedValidation ); })
        {
        }

        /// <summary>
        /// Generates the fingerprint associated with the specified parameters.
        /// </summary>
        /// <param name="parameters">Parameters used to drive generation.</param>
        /// <returns>Returns the object fingerprint as a Blob.</returns>
        protected override Blob GenerateFingerprintAlg(FingerprintParameters parameters)
        {
            return InternalGenerateFingerprintAlg((ParamType)parameters);
        }

        /// <summary>
        /// When overriden this method is responsible for fingerprint generation.
        /// </summary>
        /// <param name="parameters">Parameters used to drive fingerprint generation.</param>
        /// <returns>Returns the object fingerprint as a Blob.</returns>
        protected abstract Blob InternalGenerateFingerprintAlg(ParamType parameters);
    } 
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\etx\lib\fingerprint\FingerprintParameters.cs ===
//------------------------------------------------------------------------------
//  <copyright file="FingerprintParameters.cs" company="Microsoft">
//      Copyright (c) Microsoft. All rights reserved.
//      Internal use only.    
//  </copyright>
//------------------------------------------------------------------------------

namespace xonline.common.core.etx
{
    /// <summary>
    /// Abstract base to all managed ETX fingerprint algorithm input parameters.
    /// </summary>
    public abstract class FingerprintParameters
    {
        /// <summary>
        /// Initializes a new instance of FingerprintParameters.
        /// </summary>
        /// <param name="algorithmVersion">Algorithm version this parameter is associated with.</param>
        protected FingerprintParameters(ushort algorithmVersion)
        {
            this.AlgorithmVersion = algorithmVersion;
        }

        /// <summary>
        /// Algorithm version this parameters object serves.  Fingerprint
        /// generation will always fail if this value does not match the
        /// algorithms version.
        /// </summary>
        public ushort AlgorithmVersion
        {
            get;
            private set;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\etx\lib\fingerprint\SequentialEventFingerprintAlgorithm.cs ===
//------------------------------------------------------------------------------
//  <copyright file="SequentialEventFingerprintAlgorithm.cs" company="Microsoft">
//      Copyright (c) Microsoft. All rights reserved.
//      Internal use only.    
//  </copyright>
//------------------------------------------------------------------------------

namespace xonline.common.core.etx
{
    using System;
    using System.Collections.Generic;
    using System.Text;

    using xonline.common.utilities2;

    /// <summary>
    /// An event fingerprint generation algorithm that uses a custom algorithm
    /// know as sequential hashing.  This technique relies on a hash of the
    /// combined producer and event name.  The sequence number is concatenated
    /// to the fingerprint.
    /// 
    /// This technique enables a predictable versioning scheme.
    /// </summary>
    public class SequentialEventFingerprintAlgorithm : FingerprintAlgorithm<SequentialEventFingerprintAlgorithm.AlgorithmParameters>
    {
        private static ushort implementedAlgorithmVersion = 2;

        #region Validation Helper Statics

        // Validates parameters values, ensuring that producer symbol and event name are never null.
        private static void ValidateParameters(FingerprintAlgorithm algorithm, AlgorithmParameters parameters)
        {
            if (string.IsNullOrEmpty(parameters.ProducerSymbol))
            {
                throw new ArgumentNullException(
                    "parameters.ProducerSymbol",
                    string.Format("{0}: input FingerprintParameters producer symbol cannot be null.", algorithm));
            }

            if (string.IsNullOrEmpty(parameters.EventName))
            {
                throw new ArgumentNullException(
                    "parameters.EventName",
                    string.Format("{0}: input FingerprintParameters event name cannot be null.", algorithm));
            }
        }

        #endregion

        /// <summary>
        /// Initializes a new instance of SequentialEventFingerprintAlgorithm
        /// </summary>
        public SequentialEventFingerprintAlgorithm()
            : base(
                "Sequential Event Fingerprint",
                implementedAlgorithmVersion,
                ValidateParameters)
        {
        }

        /// <summary>
        /// Generates a fingerprint using the specified values.
        /// </summary>
        /// <param name="producerSymbol">Symbol associated with the owning producer.</param>
        /// <param name="eventName">Name associated with the owning event.</param>
        /// <param name="sequence">Sequence, or version, number of the event.</param>
        /// <returns>Returns the object fingerprint as a Blob.</returns>
        public Blob GenerateFingerprint(string producerSymbol, string eventName, ushort sequence)
        {
            return GenerateFingerprint(new AlgorithmParameters(producerSymbol, eventName, sequence));
        }

        /// <summary>
        /// Verifies that the supplied fingerprint is a valid SequentialEvent fingerprint.
        /// </summary>
        /// <param name="fingerprint">Fingerprint to validate.</param>
        /// <returns>Returns true when speified a valid fingerprint; otherwise false.</returns>
        public bool IsFingerprintValid(Blob fingerprint)
        {
            return FingerprintSerializer.IsFingerprintValid(fingerprint);
        }

        /// <summary>
        /// Extracts the sequence number from a SequentialEvent fingerprint.
        /// </summary>
        /// <param name="fingerprint">Valid fingerprint to extract from.</param>
        /// <returns>Returns the sequence number encoded in the fingerprint.</returns>
        /// <exception cref="ArgumentException">Thrown when the specified fingerprint is not valid.</exception>
        public ushort GetFingerprintSequence(Blob fingerprint)
        {
            return FingerprintSerializer.ExtractSequence(fingerprint);
        }

        /// <summary>
        /// Implementation of the fingerprint generation algorithm.
        /// </summary>
        /// <param name="parameters">Parameters for fingerprint generation.</param>
        /// <returns>Returns the object fingerprint as a Blob.</returns>
        protected override Blob InternalGenerateFingerprintAlg(AlgorithmParameters parameters)
        {
            FingerprintSerializer serializer = new FingerprintSerializer();
            string hashedText;
            byte[] encoding;
            byte[] hash;

            // Combine producer and event name to form hash text
            hashedText = string.Format("{0},{1}", parameters.ProducerSymbol, parameters.EventName);

            // UTF8 encode the lower-cased hashed Text
            encoding = Encoding.UTF8.GetBytes(hashedText.ToLower());

            // Derive the hash from the MD5 sum and the length of the hashed Text
            hash = FingerprintAlgorithmSharedResources.ComputeHash(encoding);
            hash[15] = (byte)hashedText.Length;

            serializer.Sequence = parameters.Sequence;
            serializer.Hash = BitConverter.ToInt64(hash, 0);

            return serializer.ToArray();
        }

        /// <summary>
        /// Parameters used to drive the SequentialEventFingerprintAlgorithm
        /// fingerprint generation process.
        /// </summary>
        public class AlgorithmParameters : FingerprintParameters
        {
            /// <summary>
            /// Initializes a new instance of AlgorithmParameters
            /// </summary>
            /// <param name="producerSymbol">Symbol associated with the owner producer.</param>
            /// <param name="eventName">Name associated with the owner event.</param>
            /// <param name="sequence">Sequence, or version, number of the event.</param>
            public AlgorithmParameters(string producerSymbol, string eventName, ushort sequence)
                : base(implementedAlgorithmVersion)
            {
                this.ProducerSymbol = producerSymbol;
                this.EventName = eventName;
                this.Sequence = sequence;
            }

            /// <summary>
            /// Initializes a new instance of AlgorithmParameters
            /// </summary>
            public AlgorithmParameters()
                : this(null, null, 0)
            {
            }

            /// <summary>
            /// Gets or sets the symbol associated with the owner producer.
            /// </summary>
            public string ProducerSymbol
            {
                get;
                set;
            }

            /// <summary>
            /// Gets or sets the name associated with the owner event.
            /// </summary>
            public string EventName
            {
                get;
                set;
            }

            /// <summary>
            /// Gets or sets the version number of the event.
            /// </summary>
            public ushort Sequence
            {
                get;
                set;
            }
        }

        // Responsible for byte[] serializing the data encoded in the fingerprint
        private struct FingerprintSerializer
        {
            private static readonly List<byte> preamble;

            // Generate the preamble
            static FingerprintSerializer()
            {
                preamble = new List<byte>();

                preamble.Add(0x45);
                preamble.Add(0x54);
                preamble.AddRange(BitConverter.GetBytes(implementedAlgorithmVersion));
            }

            // Verifies that the specified fingerprint is a valid sequential event fingerprint
            public static bool IsFingerprintValid(Blob fingerprint)
            {
                if (null == fingerprint)
                {
                    throw new ArgumentNullException("fingerprint");
                }

                return
                    fingerprint.Length == 14 &&
                    fingerprint[0] == preamble[0] &&
                    fingerprint[1] == preamble[1] &&
                    fingerprint[2] == preamble[2] &&
                    fingerprint[3] == preamble[3];
            }

            // Extracts the sequence number from the fingerprint
            public static ushort ExtractSequence(Blob fingerprint)
            {
                if (!IsFingerprintValid(fingerprint))
                {
                    throw new ArgumentException("The specified fingerprint is not a valid SequentialEventFingerprint.", "fingerprint");
                }

                return BitConverter.ToUInt16(fingerprint, 12);
            }

            // Sequence number
            public ushort Sequence
            {
                get;
                set;
            }

            // Hash of the producer and event name
            public Int64 Hash
            {
                get;
                set;
            }

            // Preamble
            public byte[] Preamble
            {
                get
                {
                    return preamble.ToArray();
                }
            }

            // Converts to a fingerprint byte[]
            public byte[] ToArray()
            {
                List<byte> result = new List<byte>();

                result.AddRange(Preamble);
                result.AddRange(BitConverter.GetBytes(Hash));
                result.AddRange(BitConverter.GetBytes(Sequence));

                return result.ToArray();
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\etx\lib\fingerprint\EtxMD5EventFingerprintAlgorithm.cs ===
//------------------------------------------------------------------------------
//  <copyright file="EtxMD5EventFingerprintAlgorithm.cs" company="Microsoft">
//      Copyright (c) Microsoft. All rights reserved.
//      Internal use only.    
//  </copyright>
//------------------------------------------------------------------------------

namespace xonline.common.core.etx
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;

    using xonline.common.utilities2;

    /// <summary>
    /// An event fingerprint generation algorithm that uses an MD5 Hash of the
    /// event schema to create a fingerprint.
    /// </summary>
    public class EtxMD5EventFingerprintAlgorithm : FingerprintAlgorithm<EtxMD5EventFingerprintAlgorithm.AlgorithmParameters>
    {
        private static ushort implementedAlgorithmVersion = 0;

        #region Validation Helper Statics

        // Fingerprint parameter value validation, verifies that the Event parameter is not null.
        private static void ValidateParameters(FingerprintAlgorithm algorithm, AlgorithmParameters parameters)
        {
            if (null == parameters.Event)
            {
                throw new ArgumentNullException(
                    "parameters.Event",
                    string.Format("{0}: input FingerprintParameters event cannot be null.", algorithm));
            }
        }

        #endregion

        #region Fingerprint Helper Statics

        // Gets a byte array from a uint.
        private static byte[] GetBytes(uint value)
        {
            return BitConverter.GetBytes(value);
        }

        // Gets a byte array from a nullable type
        private static byte[] GetBytes<T>(T? value) where T : struct
        {
            if (!value.HasValue)
            {
                return new byte[0];
            }

            return Encoding.UTF8.GetBytes(value.ToString());
        }

        // Gets a byte array from a string.
        private static byte[] GetBytes(string value)
        {
            if (string.IsNullOrEmpty(value))
            {
                return new byte[0];
            }

            return Encoding.UTF8.GetBytes(value);
        }

        #endregion

        /// <summary>
        /// Initializes a new instance of EtxMD5EventFingerprintAlgorithm.
        /// </summary>
        public EtxMD5EventFingerprintAlgorithm()
            : base(
                "ETX MD5 Event Fingerprint", 
                implementedAlgorithmVersion, 
                ValidateParameters)
        {
        }

        /// <summary>
        /// Generates a fingerprint using the specified Event.
        /// </summary>
        /// <param name="event">Event used to generate fingerprint; value cannot be null.</param>
        /// <returns>Returns the object fingerprint as a Blob.</returns>
        public Blob GenerateFingerprint(Event @event)
        {
            return GenerateFingerprint(new AlgorithmParameters(@event));
        }

        /// <summary>
        /// Implementation of the fingerprint generation algorithm.
        /// </summary>
        /// <param name="parameters">Parameters for fingerprint generation.</param>
        /// <returns>Returns the object fingerprint as a Blob.</returns>
        protected override Blob InternalGenerateFingerprintAlg(AlgorithmParameters parameters)
        {
            List<byte> buffer = new List<byte>();
            Event e = parameters.Event;

            // encode event details
            buffer.AddRange(GetBytes(e.Symbol)); buffer.Add(0);
            buffer.AddRange(GetBytes(e.LogStringId)); buffer.Add(0);
            buffer.AddRange(GetBytes(e.OmnitureArea)); buffer.Add(0);

            // encode sorted field details
            foreach (var field in e.DataFields.Values.OrderBy(df => df.Ordinal))
            {
                buffer.AddRange(GetBytes(field.Ordinal));
                buffer.AddRange(GetBytes(field.Name)); buffer.Add(0);
                buffer.AddRange(GetBytes(field.InType.ToString())); buffer.Add(0);
                buffer.AddRange(GetBytes(field.AutoValue)); buffer.Add(0);
                buffer.AddRange(GetBytes(field.OmnitureVar)); buffer.Add(0);
                buffer.Add(field.Deprecated ? (byte)1 : (byte)0);
                buffer.AddRange(GetBytes(field.OutType.ToString())); buffer.Add(0);
            }

            return FingerprintAlgorithmSharedResources.ComputeHash(buffer.ToArray());
        }

        /// <summary>
        /// Parameters used to drive the EtxMD5EventFingerprintAlgorithm
        /// fingerprint generation process.
        /// </summary>
        public class AlgorithmParameters : FingerprintParameters
        {
            /// <summary>
            /// Intializes a new instance of AlgorithmParameters.
            /// </summary>
            /// <param name="event">Event to perform MD5 hash against.</param>
            public AlgorithmParameters(Event @event)
                : base(implementedAlgorithmVersion)
            {
                this.Event = @event;
            }

            /// <summary>
            /// Intializes a new instance of AlgorithmParameters.
            /// </summary>
            public AlgorithmParameters()
                : this(null)
            {
            }

            /// <summary>
            /// Gets or sets the event whose fingerprint will be generated using MD5 hash.
            /// </summary>
            public Event Event
            {
                get;
                set;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\etx\lib\fingerprint\SequentialProducerFingerprintAlgorithm.cs ===
//------------------------------------------------------------------------------
//  <copyright file="SequentialProducerFingerprintAlgorithm.cs" company="Microsoft">
//      Copyright (c) Microsoft. All rights reserved.
//      Internal use only.    
//  </copyright>
//------------------------------------------------------------------------------

namespace xonline.common.core.etx
{
    using System;
    using System.Collections.Generic;
    using System.Text;

    using xonline.common.utilities2;

    /// <summary>
    /// An producer fingerprint generation algorithm that uses a custom algorithm
    /// know as sequential hashing.  This technique relies on a hash of the
    /// producer name.  The sequence number is concatenated to the fingerprint.
    /// 
    /// This technique enables a predictable versioning scheme.
    /// </summary>
    public class SequentialProducerFingerprintAlgorithm : FingerprintAlgorithm<SequentialProducerFingerprintAlgorithm.AlgorithmParameters>
    {
        private static ushort implementedAlgorithmVersion = 1;

        #region Validation Helper Statics

        // Validates parameters values, ensuring that producer symbol is never null.
        private static void ValidateParameters(FingerprintAlgorithm algorithm, AlgorithmParameters parameters)
        {
            if (string.IsNullOrEmpty(parameters.ProducerSymbol))
            {
                throw new ArgumentNullException(
                    "parameters.ProducerSymbol",
                    string.Format("{0}: input FingerprintParameters producer symbol cannot be null.", algorithm));
            }
        }

        #endregion

        /// <summary>
        /// Initializes a new instance of SequentialProducerFingerprintAlgorithm
        /// </summary>
        public SequentialProducerFingerprintAlgorithm()
            : base(
                "Sequential Producer Fingerprint",
                implementedAlgorithmVersion,
                ValidateParameters)
        {
        }

        /// <summary>
        /// Generates a fingerprint using the specified values.
        /// </summary>
        /// <param name="producerSymbol">Symbol associated with the owning producer.</param>
        /// <param name="sequence">Sequence, or version, number of the producer.</param>
        /// <returns>Returns the object fingerprint as a Blob.</returns>
        public Blob GenerateFingerprint(string producerSymbol, ushort sequence)
        {
            return GenerateFingerprint(new AlgorithmParameters(producerSymbol, sequence));
        }

        /// <summary>
        /// Verifies that the supplied fingerprint is a valid SequentialProducer fingerprint.
        /// </summary>
        /// <param name="fingerprint">Fingerprint to validate.</param>
        /// <returns>Returns true when speified a valid fingerprint; otherwise false.</returns>
        public bool IsFingerprintValid(Blob fingerprint)
        {
            return FingerprintSerializer.IsFingerprintValid(fingerprint);
        }

        /// <summary>
        /// Extracts the sequence number from a SequentialProducer fingerprint.
        /// </summary>
        /// <param name="fingerprint">Valid fingerprint to extract from.</param>
        /// <returns>Returns the sequence number encoded in the fingerprint.</returns>
        /// <exception cref="ArgumentException">Thrown when the specified fingerprint is not valid.</exception>
        public ushort GetFingerprintSequence(Blob fingerprint)
        {
            return FingerprintSerializer.ExtractSequence(fingerprint);
        }

        /// <summary>
        /// Implementation of the fingerprint generation algorithm.
        /// </summary>
        /// <param name="parameters">Parameters for fingerprint generation.</param>
        /// <returns>Returns the object fingerprint as a Blob.</returns>
        protected override Blob InternalGenerateFingerprintAlg(AlgorithmParameters parameters)
        {
            FingerprintSerializer serializer = new FingerprintSerializer();
            byte[] encoding;
            byte[] hash;

            // UTF8 encode the lower-cased producer name
            encoding = Encoding.UTF8.GetBytes(parameters.ProducerSymbol.ToLower());

            // Derive the hash from the MD5 sum and the length of the producer symbol
            hash = FingerprintAlgorithmSharedResources.ComputeHash(encoding);
            hash[15] = (byte)parameters.ProducerSymbol.Length;

            serializer.Sequence = parameters.Sequence;
            serializer.Hash = BitConverter.ToInt64(hash, 0);

            return serializer.ToArray();
        }

        /// <summary>
        /// Parameters used to drive the SequentialProducerFingerprintAlgorithm
        /// fingerprint generation process.
        /// </summary>
        public class AlgorithmParameters : FingerprintParameters
        {
            /// <summary>
            /// Initializes a new instance of AlgorithmParameters
            /// </summary>
            /// <param name="producerSymbol">Symbol associated with the owner producer.</param>
            /// <param name="sequence">Sequence, or version, number of the producer.</param>
            public AlgorithmParameters(string producerSymbol, ushort sequence)
                : base(implementedAlgorithmVersion)
            {
                this.ProducerSymbol = producerSymbol;
                this.Sequence = sequence;
            }

            /// <summary>
            /// Initializes a new instance of AlgorithmParameters
            /// </summary>
            public AlgorithmParameters()
                : this(null, 0)
            {
            }

            /// <summary>
            /// Gets or sets the symbol associated with the owner producer.
            /// </summary>
            public string ProducerSymbol
            {
                get;
                set;
            }

            /// <summary>
            /// Gets or sets the version number of the event.
            /// </summary>
            public ushort Sequence
            {
                get;
                set;
            }
        }

        // Responsible for byte[] serializing the data encoded in the fingerprint
        private struct FingerprintSerializer
        {
            private static readonly List<byte> preamble;

            // Generate the preamble
            static FingerprintSerializer()
            {
                preamble = new List<byte>();

                preamble.Add(0x45);
                preamble.Add(0x54);
                preamble.AddRange(BitConverter.GetBytes(implementedAlgorithmVersion));
            }

            // Verifies that the specified fingerprint is a valid sequential producer fingerprint
            public static bool IsFingerprintValid(Blob fingerprint)
            {
                if (null == fingerprint)
                {
                    throw new ArgumentNullException("fingerprint");
                }

                return
                    fingerprint.Length == 14 &&
                    fingerprint[0] == preamble[0] &&
                    fingerprint[1] == preamble[1] &&
                    fingerprint[2] == preamble[2] &&
                    fingerprint[3] == preamble[3];
            }

            // Extracts the sequence number from the fingerprint
            public static ushort ExtractSequence(Blob fingerprint)
            {
                if (!IsFingerprintValid(fingerprint))
                {
                    throw new ArgumentException("The specified fingerprint is not a valid SequentialProducerFingerprint.", "fingerprint");
                }

                return BitConverter.ToUInt16(fingerprint, 12);
            }

            // Sequence number
            public ushort Sequence
            {
                get;
                set;
            }

            // Hash of the producer and event name
            public Int64 Hash
            {
                get;
                set;
            }

            // Preamble
            public byte[] Preamble
            {
                get
                {
                    return preamble.ToArray();
                }
            }

            // Converts to a fingerprint byte[]
            public byte[] ToArray()
            {
                List<byte> result = new List<byte>();

                result.AddRange(Preamble);
                result.AddRange(BitConverter.GetBytes(Hash));
                result.AddRange(BitConverter.GetBytes(Sequence));

                return result.ToArray();
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\events\makefile.inc ===
!include $(INETROOT)\build\makefile.inc

xeventids.cs.xsl: xeventids.xsl
xeventids.h.xsl: xeventids.xsl

# different xsl for each of the generated  sources

.SUFFIXES: .xml .cs

.xml{$(_OBJ_DIR)}.cs:
    $(EXTPATH)\xonline-ext\xmltransform\xmltransform.exe -xml $< -xsl xeventids.cs.xsl -out $@

.SUFFIXES: .xml .h

.xml{$(_OBJ_DIR)}.h:
    $(EXTPATH)\xonline-ext\xmltransform\xmltransform.exe -xml $< -xsl xeventids.h.xsl -out $@

$(HTARGETS): xeventids.h.xsl
$(CSTARGETS): xeventids.cs.xsl

$(_OBJ_DIR)\xeventids.h: $(HTARGETS)
        echo // AUTO GENERATED FILE > $@
        echo // MODIFY THE CORRESPONDING .xml AND .xsl FILES >> $@
        echo /////////////////////////////////////////////////////////////////////////////// >> $@
        echo. >> $@
        type $(HTARGETS) >> $@
        echo. >> $@
        echo /////////////////////////////////////////////////////////////////////////////// >> $@
        echo // AUTO GENERATED FILE >> $@
        echo // MODIFY THE CORRESPONDING .xml AND .xsl FILES >> $@

$(_OBJ_DIR)\XEvent.Id.cs: $(CSTARGETS)
        echo // AUTO GENERATED FILE > $@
        echo // MODIFY THE CORRESPONDING .xml AND .xsl FILES >> $@
        echo /////////////////////////////////////////////////////////////////////////////// >> $@
        echo. >> $@
        echo using System; >> $@
        echo. >> $@
        echo namespace xonline.common.service >> $@
        echo { >> $@
        echo ^ ^ ^ ^ public partial class XEvent >> $@
        echo ^ ^ ^ ^ { >> $@
        echo ^ ^ ^ ^ ^ ^ ^ ^ public enum Id : uint >> $@
        echo ^ ^ ^ ^ ^ ^ ^ ^ { >> $@
        type $(CSTARGETS) >> $@
        echo. >> $@
        echo ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^// AUTOGENERATED - do not add ids here >> $@
        echo ^ ^ ^ ^ ^ ^ ^ ^ } >> $@
        echo ^ ^ ^ ^ } >> $@
        echo } >> $@
        echo. >> $@
        echo /////////////////////////////////////////////////////////////////////////////// >> $@
        echo // AUTO GENERATED FILE >> $@
        echo // MODIFY THE CORRESPONDING .xml AND .xsl FILES >> $@

XEvent.Id.cs: $(_OBJ_DIR)\XEvent.Id.cs
	copy $(_OBJ_DIR)\XEvent.Id.cs $@

$(_OBJ_DIR)\XEvent.cs: XEvent.cs
	copy XEvent.cs $@

clean:
    del /F /Q $(NTTARGETFILE0) $(CSTARGETS) $(HTARGETS)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\events\XEvent.cs ===
using System;
using System.Diagnostics;

namespace xonline.common.service {
    public partial class XEvent {
        public enum Severity : uint {
            Info    = 0x40000000,
            Warning = 0x80000000,
            Error   = 0xC0000000
        }

        public static Severity SeverityFromId(XEvent.Id eventId)
        {
            uint severity = ((uint) eventId) & 0xC0000000;
            Debug.Assert(severity != 0);
            return (Severity) severity;
        }

        public static ushort MessageFromId(XEvent.Id eventId)
        {
            return (ushort) (((uint) eventId) & 0xFFFF);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\events\obj\acceleration.cs ===
ACCELERATION_STARTUP_MGMT_INIT_FAILED = 20500 | XEvent.Severity.Error,
            ACCELERATION_STARTUP_MGMT_REGISTER_FAILED = 20501 | XEvent.Severity.Error,
            ACCELERATION_STARTUP_CONFIG_FAILED = 20502 | XEvent.Severity.Error,
            ACCELERATION_STARTUP_PERF_COUNTERS_FAILED = 20503 | XEvent.Severity.Error,
            ACCELERATION_STARTUP_BUFFER_POOL_FAILED = 20504 | XEvent.Severity.Error,
            ACCELERATION_STARTUP_SWITCHBOARD_FAILED = 20505 | XEvent.Severity.Error,
            ACCELERATION_STARTUP_MRU_LIST_FAILED = 20506 | XEvent.Severity.Error,
            ACCELERATION_STARTUP_CHANGELIST_FAILED = 20507 | XEvent.Severity.Error,
            ACCELERATION_STARTUP_LOOKUP_TABLE_FAILED = 20508 | XEvent.Severity.Error,
            ACCELERATION_STARTUP_LISTENER_FAILED = 20509 | XEvent.Severity.Error,
            ACCELERATION_STARTUP_ALLOCATOR_FAILED = 20517 | XEvent.Severity.Error,
            ACCELERATION_CONFIG_LISTENER_FAILED = 20510 | XEvent.Severity.Error,
            ACCELERATION_CONFIG_SETTING_FAILED = 20511 | XEvent.Severity.Error,
            ACCELERATION_CONFIG_OUT_OF_MEMORY = 20512 | XEvent.Severity.Error,
            ACCELERATION_CONFIG_POST_COMPLETION_FAILED = 20513 | XEvent.Severity.Error,
            ACCELERATION_CONFIG_WAIT_COMPLETION_FAILED = 20514 | XEvent.Severity.Error,
            ACCELERATION_CONFIG_HEALTHINTEROP_CREATE = 20515 | XEvent.Severity.Error,
            ACCELERATION_CONFIG_HEALTHINTEROP_INIT = 20516 | XEvent.Severity.Error,
            ACCELERATION_SOCKET_INIT_COMPLETION_PORT_FAILED = 20520 | XEvent.Severity.Error,
            ACCELERATION_SOCKET_INIT_CREATE_INSTANCE_FAILED = 20521 | XEvent.Severity.Error,
            ACCELERATION_SOCKET_INIT_FAILED = 20522 | XEvent.Severity.Error,
            ACCELERATION_SOCKET_INIT_LISTEN_FAILED = 20523 | XEvent.Severity.Error,
            ACCELERATION_SOCKET_ACCEPT_FAILED = 20524 | XEvent.Severity.Error,
            ACCELERATION_SOCKET_SIZE_MISMATCH = 20525 | XEvent.Severity.Error,
            ACCELERATION_SOCKET_PROCESS_REQUEST_FAILED = 20526 | XEvent.Severity.Error,
            ACCELERATION_PROXY_BUCKET_MAP_FAILED = 20530 | XEvent.Severity.Error,
            ACCELERATION_PROXY_BUCKET_CHANGE_FAILED = 20531 | XEvent.Severity.Error,
            ACCELERATION_PROXY_SERVER_CHANGE_FAILED = 20532 | XEvent.Severity.Error,
            ACCELERATION_PROXY_CONNECT_FAILED = 20533 | XEvent.Severity.Error,
            ACCELERATION_PROXY_SEND_FAILED = 20534 | XEvent.Severity.Error,
            ACCELERATION_PROXY_RECEIVE_FAILED = 20535 | XEvent.Severity.Error,
            ACCELERATION_PROXY_CALLBACK_EXCEPTION = 20536 | XEvent.Severity.Error,
            ACCELERATION_PROXY_REMOVE_FAILED = 20537 | XEvent.Severity.Error,
            ACCELERATION_PROXY_REQUEST_FAILED = 20538 | XEvent.Severity.Error,
            ACCELERATION_PROXY_NOT_INITIALIZED = 20539 | XEvent.Severity.Error,
            ACCELERATION_PROXY_NOTIFICATION_FAILED = 20540 | XEvent.Severity.Error,
            ACCELERATION_UNSUPPORTED_MESSAGE = 20575 | XEvent.Severity.Error,
            ACCELERATION_SERVER_TOO_BUSY = 20576 | XEvent.Severity.Error,
            ACCELERATION_SERVER_BUFFERPOOL_OUTOFMEMORY = 20577 | XEvent.Severity.Error,
            ACCELERATION_WARN_0 = 20600 | XEvent.Severity.Warning,
            ACCELERATION_STARTED = 20700 | XEvent.Severity.Info,
            ACCELERATION_SHUTDOWN_STARTED = 20701 | XEvent.Severity.Info,
            ACCELERATION_SHUTDOWN_COMPLETE = 20702 | XEvent.Severity.Info,
            ACCELERATION_CONFIG_SETTING_CHANGED = 20703 | XEvent.Severity.Info,
            ACCELERATION_INFO_SERVER_RESUME = 20704 | XEvent.Severity.Info,
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\events\obj\activeauth.h ===
// XEVENT_AAGW_CONFIG_INVALID_ALLOWLISTENTRY, 15000, Error
#define XEVENT_AAGW_CONFIG_INVALID_ALLOWLISTENTRY 0xC0003A98

// XEVENT_AAM_UODB_DATABASE_ERROR, 63825, Error
#define XEVENT_AAM_UODB_DATABASE_ERROR 0xC000F951

// XEVENT_AAM_HANDLEREQUEST_ERROR, 63826, Error
#define XEVENT_AAM_HANDLEREQUEST_ERROR 0xC000F952

// XEVENT_AAM_CONFIG_INFO, 63827, Info
#define XEVENT_AAM_CONFIG_INFO 0x4000F953

// XEVENT_AAM_CONFIG_WARNING, 63828, Warning
#define XEVENT_AAM_CONFIG_WARNING 0x8000F954

// XEVENT_AAM_CONFIG_ERROR, 63829, Error
#define XEVENT_AAM_CONFIG_ERROR 0xC000F955

// XEVENT_AAM_POLICY_RELOADED, 63830, Info
#define XEVENT_AAM_POLICY_RELOADED 0x4000F956

// XEVENT_AAM_CONFIG_RPS_ERROR, 63831, Error
#define XEVENT_AAM_CONFIG_RPS_ERROR 0xC000F957

// XEVENT_AAM_INFO_TRACKING_START, 63832, Warning
#define XEVENT_AAM_INFO_TRACKING_START 0x8000F958

// XEVENT_AAM_INFO_TRACKING_STOP, 63833, Info
#define XEVENT_AAM_INFO_TRACKING_STOP 0x4000F959

// XEVENT_AAM_INFO_THROTTLING_START, 63834, Warning
#define XEVENT_AAM_INFO_THROTTLING_START 0x8000F95A

// XEVENT_AAM_INFO_THROTTLING_STOP, 63835, Info
#define XEVENT_AAM_INFO_THROTTLING_STOP 0x4000F95B

// XEVENT_AAM_INFO_BLOCKING_START, 63836, Warning
#define XEVENT_AAM_INFO_BLOCKING_START 0x8000F95C

// XEVENT_AAM_INFO_BLOCKING_STOP, 63837, Info
#define XEVENT_AAM_INFO_BLOCKING_STOP 0x4000F95D

// XEVENT_AAM_ANTIDOS_LIMIT_EXCEEDED, 63838, Error
#define XEVENT_AAM_ANTIDOS_LIMIT_EXCEEDED 0xC000F95E

// XEVENT_AAGW_HACK_URL, 63850, Error
#define XEVENT_AAGW_HACK_URL 0xC000F96A

// XEVENT_AAGW_HACK_UNKNOWN_SERVICE, 63851, Error
#define XEVENT_AAGW_HACK_UNKNOWN_SERVICE 0xC000F96B

// XEVENT_AAGW_HACK_UNKNOWN_HTTP_METHOD, 63852, Error
#define XEVENT_AAGW_HACK_UNKNOWN_HTTP_METHOD 0xC000F96C

// XEVENT_AAGW_HACK_URL_TOO_LONG, 63853, Error
#define XEVENT_AAGW_HACK_URL_TOO_LONG 0xC000F96D

// XEVENT_AAGW_HACK_QUERY_TOO_LONG, 63854, Error
#define XEVENT_AAGW_HACK_QUERY_TOO_LONG 0xC000F96E

// XEVENT_AAGW_HACK_CONTENT_TOO_LONG, 63855, Error
#define XEVENT_AAGW_HACK_CONTENT_TOO_LONG 0xC000F96F

// XEVENT_AAGW_EXCEPTION_WITH_NO_RESPONSE, 63856, Error
#define XEVENT_AAGW_EXCEPTION_WITH_NO_RESPONSE 0xC000F970

// XEVENT_AAGW_CONFIG_INVALID_SETTING, 63857, Error
#define XEVENT_AAGW_CONFIG_INVALID_SETTING 0xC000F971

// XEVENT_AAGW_CONFIG_SERVICE_TABLE, 63858, Error
#define XEVENT_AAGW_CONFIG_SERVICE_TABLE 0xC000F972

// XEVENT_AAGW_CONFIG_INFO, 63859, Info
#define XEVENT_AAGW_CONFIG_INFO 0x4000F973

// XEVENT_AAGW_INTERNAL_ERROR, 63860, Error
#define XEVENT_AAGW_INTERNAL_ERROR 0xC000F974
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\events\obj\alerts.cs ===
XEVENTS_FAIL_INIT = 50000 | XEvent.Severity.Error,
            XEVENTS_FAIL_INIT_1 = 50001 | XEvent.Severity.Error,
            XEVENTS_FAIL_INIT_2 = 50002 | XEvent.Severity.Error,
            XEVENTS_FAIL_INIT_3 = 50003 | XEvent.Severity.Error,
            XEVENTS_FAIL_INIT_4 = 50004 | XEvent.Severity.Error,
            XEVENTS_NULL_BUFFER = 50005 | XEvent.Severity.Error,
            XEVENTS_NULL_BUFFER_1 = 50006 | XEvent.Severity.Error,
            ALERTS_CODE_7 = 50007 | XEvent.Severity.Error,
            ALERTS_CODE_8 = 50008 | XEvent.Severity.Error,
            XEVENTS_BAD_PACKET = 50009 | XEvent.Severity.Error,
            XEVENTS_BAD_PACKET_1 = 50010 | XEvent.Severity.Error,
            XEVENTS_FAIL_INIT_5 = 50011 | XEvent.Severity.Error,
            XEVENTS_FAIL_INIT_6 = 50012 | XEvent.Severity.Error,
            XEVENTS_FAIL_INIT_7 = 50013 | XEvent.Severity.Error,
            XEVENTS_FAIL_INIT_8 = 50014 | XEvent.Severity.Error,
            XEVENTS_FAIL_INIT_9 = 50015 | XEvent.Severity.Error,
            XEVENTS_FAIL_INIT_10 = 50016 | XEvent.Severity.Error,
            XEVENTS_FAIL_INIT_11 = 50017 | XEvent.Severity.Error,
            XEVENTS_FAIL_INIT_12 = 50018 | XEvent.Severity.Error,
            XEVENTS_RECEIVE_FAIL = 50050 | XEvent.Severity.Error,
            XEVENTS_RECEIVE_FAIL_1 = 50051 | XEvent.Severity.Error,
            ALERTS_COMM_2 = 50052 | XEvent.Severity.Error,
            ALERTS_COMM_3 = 50053 | XEvent.Severity.Error,
            ALERTS_COMM_4 = 50054 | XEvent.Severity.Error,
            ALERTS_COMM_5 = 50055 | XEvent.Severity.Error,
            ALERTS_COMM_6 = 50056 | XEvent.Severity.Error,
            ALERTS_COMM_7 = 50057 | XEvent.Severity.Error,
            ALERTS_COMM_8 = 50058 | XEvent.Severity.Error,
            ALERTS_COMM_9 = 50059 | XEvent.Severity.Error,
            ALERTS_CONFIG_0 = 50100 | XEvent.Severity.Error,
            ALERTS_CONFIG_1 = 50101 | XEvent.Severity.Error,
            ALERTS_CONFIG_2 = 50102 | XEvent.Severity.Error,
            ALERTS_CONFIG_3 = 50103 | XEvent.Severity.Error,
            ALERTS_CONFIG_4 = 50104 | XEvent.Severity.Error,
            ALERTS_CONFIG_5 = 50105 | XEvent.Severity.Error,
            ALERTS_CONFIG_6 = 50106 | XEvent.Severity.Error,
            ALERTS_CONFIG_7 = 50107 | XEvent.Severity.Error,
            ALERTS_INFO_0 = 50125 | XEvent.Severity.Info,
            ALERTS_INFO_1 = 50126 | XEvent.Severity.Info,
            ALERTS_INFO_2 = 50127 | XEvent.Severity.Info,
            ALERTS_INFO_3 = 50128 | XEvent.Severity.Info,
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\events\obj\activeauth.cs ===
AAGW_CONFIG_INVALID_ALLOWLISTENTRY = 15000 | XEvent.Severity.Error,
            AAM_UODB_DATABASE_ERROR = 63825 | XEvent.Severity.Error,
            AAM_HANDLEREQUEST_ERROR = 63826 | XEvent.Severity.Error,
            AAM_CONFIG_INFO = 63827 | XEvent.Severity.Info,
            AAM_CONFIG_WARNING = 63828 | XEvent.Severity.Warning,
            AAM_CONFIG_ERROR = 63829 | XEvent.Severity.Error,
            AAM_POLICY_RELOADED = 63830 | XEvent.Severity.Info,
            AAM_CONFIG_RPS_ERROR = 63831 | XEvent.Severity.Error,
            AAM_INFO_TRACKING_START = 63832 | XEvent.Severity.Warning,
            AAM_INFO_TRACKING_STOP = 63833 | XEvent.Severity.Info,
            AAM_INFO_THROTTLING_START = 63834 | XEvent.Severity.Warning,
            AAM_INFO_THROTTLING_STOP = 63835 | XEvent.Severity.Info,
            AAM_INFO_BLOCKING_START = 63836 | XEvent.Severity.Warning,
            AAM_INFO_BLOCKING_STOP = 63837 | XEvent.Severity.Info,
            AAM_ANTIDOS_LIMIT_EXCEEDED = 63838 | XEvent.Severity.Error,
            AAGW_HACK_URL = 63850 | XEvent.Severity.Error,
            AAGW_HACK_UNKNOWN_SERVICE = 63851 | XEvent.Severity.Error,
            AAGW_HACK_UNKNOWN_HTTP_METHOD = 63852 | XEvent.Severity.Error,
            AAGW_HACK_URL_TOO_LONG = 63853 | XEvent.Severity.Error,
            AAGW_HACK_QUERY_TOO_LONG = 63854 | XEvent.Severity.Error,
            AAGW_HACK_CONTENT_TOO_LONG = 63855 | XEvent.Severity.Error,
            AAGW_EXCEPTION_WITH_NO_RESPONSE = 63856 | XEvent.Severity.Error,
            AAGW_CONFIG_INVALID_SETTING = 63857 | XEvent.Severity.Error,
            AAGW_CONFIG_SERVICE_TABLE = 63858 | XEvent.Severity.Error,
            AAGW_CONFIG_INFO = 63859 | XEvent.Severity.Info,
            AAGW_INTERNAL_ERROR = 63860 | XEvent.Severity.Error,
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\events\obj\acceleration.h ===
// XEVENT_ACCELERATION_STARTUP_MGMT_INIT_FAILED, 20500, Error
#define XEVENT_ACCELERATION_STARTUP_MGMT_INIT_FAILED 0xC0005014

// XEVENT_ACCELERATION_STARTUP_MGMT_REGISTER_FAILED, 20501, Error
#define XEVENT_ACCELERATION_STARTUP_MGMT_REGISTER_FAILED 0xC0005015

// XEVENT_ACCELERATION_STARTUP_CONFIG_FAILED, 20502, Error
#define XEVENT_ACCELERATION_STARTUP_CONFIG_FAILED 0xC0005016

// XEVENT_ACCELERATION_STARTUP_PERF_COUNTERS_FAILED, 20503, Error
#define XEVENT_ACCELERATION_STARTUP_PERF_COUNTERS_FAILED 0xC0005017

// XEVENT_ACCELERATION_STARTUP_BUFFER_POOL_FAILED, 20504, Error
#define XEVENT_ACCELERATION_STARTUP_BUFFER_POOL_FAILED 0xC0005018

// XEVENT_ACCELERATION_STARTUP_SWITCHBOARD_FAILED, 20505, Error
#define XEVENT_ACCELERATION_STARTUP_SWITCHBOARD_FAILED 0xC0005019

// XEVENT_ACCELERATION_STARTUP_MRU_LIST_FAILED, 20506, Error
#define XEVENT_ACCELERATION_STARTUP_MRU_LIST_FAILED 0xC000501A

// XEVENT_ACCELERATION_STARTUP_CHANGELIST_FAILED, 20507, Error
#define XEVENT_ACCELERATION_STARTUP_CHANGELIST_FAILED 0xC000501B

// XEVENT_ACCELERATION_STARTUP_LOOKUP_TABLE_FAILED, 20508, Error
#define XEVENT_ACCELERATION_STARTUP_LOOKUP_TABLE_FAILED 0xC000501C

// XEVENT_ACCELERATION_STARTUP_LISTENER_FAILED, 20509, Error
#define XEVENT_ACCELERATION_STARTUP_LISTENER_FAILED 0xC000501D

// XEVENT_ACCELERATION_STARTUP_ALLOCATOR_FAILED, 20517, Error
#define XEVENT_ACCELERATION_STARTUP_ALLOCATOR_FAILED 0xC0005025

// XEVENT_ACCELERATION_CONFIG_LISTENER_FAILED, 20510, Error
#define XEVENT_ACCELERATION_CONFIG_LISTENER_FAILED 0xC000501E

// XEVENT_ACCELERATION_CONFIG_SETTING_FAILED, 20511, Error
#define XEVENT_ACCELERATION_CONFIG_SETTING_FAILED 0xC000501F

// XEVENT_ACCELERATION_CONFIG_OUT_OF_MEMORY, 20512, Error
#define XEVENT_ACCELERATION_CONFIG_OUT_OF_MEMORY 0xC0005020

// XEVENT_ACCELERATION_CONFIG_POST_COMPLETION_FAILED, 20513, Error
#define XEVENT_ACCELERATION_CONFIG_POST_COMPLETION_FAILED 0xC0005021

// XEVENT_ACCELERATION_CONFIG_WAIT_COMPLETION_FAILED, 20514, Error
#define XEVENT_ACCELERATION_CONFIG_WAIT_COMPLETION_FAILED 0xC0005022

// XEVENT_ACCELERATION_CONFIG_HEALTHINTEROP_CREATE, 20515, Error
#define XEVENT_ACCELERATION_CONFIG_HEALTHINTEROP_CREATE 0xC0005023

// XEVENT_ACCELERATION_CONFIG_HEALTHINTEROP_INIT, 20516, Error
#define XEVENT_ACCELERATION_CONFIG_HEALTHINTEROP_INIT 0xC0005024

// XEVENT_ACCELERATION_SOCKET_INIT_COMPLETION_PORT_FAILED, 20520, Error
#define XEVENT_ACCELERATION_SOCKET_INIT_COMPLETION_PORT_FAILED 0xC0005028

// XEVENT_ACCELERATION_SOCKET_INIT_CREATE_INSTANCE_FAILED, 20521, Error
#define XEVENT_ACCELERATION_SOCKET_INIT_CREATE_INSTANCE_FAILED 0xC0005029

// XEVENT_ACCELERATION_SOCKET_INIT_FAILED, 20522, Error
#define XEVENT_ACCELERATION_SOCKET_INIT_FAILED 0xC000502A

// XEVENT_ACCELERATION_SOCKET_INIT_LISTEN_FAILED, 20523, Error
#define XEVENT_ACCELERATION_SOCKET_INIT_LISTEN_FAILED 0xC000502B

// XEVENT_ACCELERATION_SOCKET_ACCEPT_FAILED, 20524, Error
#define XEVENT_ACCELERATION_SOCKET_ACCEPT_FAILED 0xC000502C

// XEVENT_ACCELERATION_SOCKET_SIZE_MISMATCH, 20525, Error
#define XEVENT_ACCELERATION_SOCKET_SIZE_MISMATCH 0xC000502D

// XEVENT_ACCELERATION_SOCKET_PROCESS_REQUEST_FAILED, 20526, Error
#define XEVENT_ACCELERATION_SOCKET_PROCESS_REQUEST_FAILED 0xC000502E

// XEVENT_ACCELERATION_PROXY_BUCKET_MAP_FAILED, 20530, Error
#define XEVENT_ACCELERATION_PROXY_BUCKET_MAP_FAILED 0xC0005032

// XEVENT_ACCELERATION_PROXY_BUCKET_CHANGE_FAILED, 20531, Error
#define XEVENT_ACCELERATION_PROXY_BUCKET_CHANGE_FAILED 0xC0005033

// XEVENT_ACCELERATION_PROXY_SERVER_CHANGE_FAILED, 20532, Error
#define XEVENT_ACCELERATION_PROXY_SERVER_CHANGE_FAILED 0xC0005034

// XEVENT_ACCELERATION_PROXY_CONNECT_FAILED, 20533, Error
#define XEVENT_ACCELERATION_PROXY_CONNECT_FAILED 0xC0005035

// XEVENT_ACCELERATION_PROXY_SEND_FAILED, 20534, Error
#define XEVENT_ACCELERATION_PROXY_SEND_FAILED 0xC0005036

// XEVENT_ACCELERATION_PROXY_RECEIVE_FAILED, 20535, Error
#define XEVENT_ACCELERATION_PROXY_RECEIVE_FAILED 0xC0005037

// XEVENT_ACCELERATION_PROXY_CALLBACK_EXCEPTION, 20536, Error
#define XEVENT_ACCELERATION_PROXY_CALLBACK_EXCEPTION 0xC0005038

// XEVENT_ACCELERATION_PROXY_REMOVE_FAILED, 20537, Error
#define XEVENT_ACCELERATION_PROXY_REMOVE_FAILED 0xC0005039

// XEVENT_ACCELERATION_PROXY_REQUEST_FAILED, 20538, Error
#define XEVENT_ACCELERATION_PROXY_REQUEST_FAILED 0xC000503A

// XEVENT_ACCELERATION_PROXY_NOT_INITIALIZED, 20539, Error
#define XEVENT_ACCELERATION_PROXY_NOT_INITIALIZED 0xC000503B

// XEVENT_ACCELERATION_PROXY_NOTIFICATION_FAILED, 20540, Error
#define XEVENT_ACCELERATION_PROXY_NOTIFICATION_FAILED 0xC000503C

// XEVENT_ACCELERATION_UNSUPPORTED_MESSAGE, 20575, Error
#define XEVENT_ACCELERATION_UNSUPPORTED_MESSAGE 0xC000505F

// XEVENT_ACCELERATION_SERVER_TOO_BUSY, 20576, Error
#define XEVENT_ACCELERATION_SERVER_TOO_BUSY 0xC0005060

// XEVENT_ACCELERATION_SERVER_BUFFERPOOL_OUTOFMEMORY, 20577, Error
#define XEVENT_ACCELERATION_SERVER_BUFFERPOOL_OUTOFMEMORY 0xC0005061

// XEVENT_ACCELERATION_WARN_0, 20600, Warning
#define XEVENT_ACCELERATION_WARN_0 0x80005078

// XEVENT_ACCELERATION_STARTED, 20700, Info
#define XEVENT_ACCELERATION_STARTED 0x400050DC

// XEVENT_ACCELERATION_SHUTDOWN_STARTED, 20701, Info
#define XEVENT_ACCELERATION_SHUTDOWN_STARTED 0x400050DD

// XEVENT_ACCELERATION_SHUTDOWN_COMPLETE, 20702, Info
#define XEVENT_ACCELERATION_SHUTDOWN_COMPLETE 0x400050DE

// XEVENT_ACCELERATION_CONFIG_SETTING_CHANGED, 20703, Info
#define XEVENT_ACCELERATION_CONFIG_SETTING_CHANGED 0x400050DF

// XEVENT_ACCELERATION_INFO_SERVER_RESUME, 20704, Info
#define XEVENT_ACCELERATION_INFO_SERVER_RESUME 0x400050E0
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\events\obj\alerts.h ===
// XEVENT_XEVENTS_FAIL_INIT, 50000, Error
#define XEVENT_XEVENTS_FAIL_INIT 0xC000C350

// XEVENT_XEVENTS_FAIL_INIT_1, 50001, Error
#define XEVENT_XEVENTS_FAIL_INIT_1 0xC000C351

// XEVENT_XEVENTS_FAIL_INIT_2, 50002, Error
#define XEVENT_XEVENTS_FAIL_INIT_2 0xC000C352

// XEVENT_XEVENTS_FAIL_INIT_3, 50003, Error
#define XEVENT_XEVENTS_FAIL_INIT_3 0xC000C353

// XEVENT_XEVENTS_FAIL_INIT_4, 50004, Error
#define XEVENT_XEVENTS_FAIL_INIT_4 0xC000C354

// XEVENT_XEVENTS_NULL_BUFFER, 50005, Error
#define XEVENT_XEVENTS_NULL_BUFFER 0xC000C355

// XEVENT_XEVENTS_NULL_BUFFER_1, 50006, Error
#define XEVENT_XEVENTS_NULL_BUFFER_1 0xC000C356

// XEVENT_ALERTS_CODE_7, 50007, Error
#define XEVENT_ALERTS_CODE_7 0xC000C357

// XEVENT_ALERTS_CODE_8, 50008, Error
#define XEVENT_ALERTS_CODE_8 0xC000C358

// XEVENT_XEVENTS_BAD_PACKET, 50009, Error
#define XEVENT_XEVENTS_BAD_PACKET 0xC000C359

// XEVENT_XEVENTS_BAD_PACKET_1, 50010, Error
#define XEVENT_XEVENTS_BAD_PACKET_1 0xC000C35A

// XEVENT_XEVENTS_FAIL_INIT_5, 50011, Error
#define XEVENT_XEVENTS_FAIL_INIT_5 0xC000C35B

// XEVENT_XEVENTS_FAIL_INIT_6, 50012, Error
#define XEVENT_XEVENTS_FAIL_INIT_6 0xC000C35C

// XEVENT_XEVENTS_FAIL_INIT_7, 50013, Error
#define XEVENT_XEVENTS_FAIL_INIT_7 0xC000C35D

// XEVENT_XEVENTS_FAIL_INIT_8, 50014, Error
#define XEVENT_XEVENTS_FAIL_INIT_8 0xC000C35E

// XEVENT_XEVENTS_FAIL_INIT_9, 50015, Error
#define XEVENT_XEVENTS_FAIL_INIT_9 0xC000C35F

// XEVENT_XEVENTS_FAIL_INIT_10, 50016, Error
#define XEVENT_XEVENTS_FAIL_INIT_10 0xC000C360

// XEVENT_XEVENTS_FAIL_INIT_11, 50017, Error
#define XEVENT_XEVENTS_FAIL_INIT_11 0xC000C361

// XEVENT_XEVENTS_FAIL_INIT_12, 50018, Error
#define XEVENT_XEVENTS_FAIL_INIT_12 0xC000C362

// XEVENT_XEVENTS_RECEIVE_FAIL, 50050, Error
#define XEVENT_XEVENTS_RECEIVE_FAIL 0xC000C382

// XEVENT_XEVENTS_RECEIVE_FAIL_1, 50051, Error
#define XEVENT_XEVENTS_RECEIVE_FAIL_1 0xC000C383

// XEVENT_ALERTS_COMM_2, 50052, Error
#define XEVENT_ALERTS_COMM_2 0xC000C384

// XEVENT_ALERTS_COMM_3, 50053, Error
#define XEVENT_ALERTS_COMM_3 0xC000C385

// XEVENT_ALERTS_COMM_4, 50054, Error
#define XEVENT_ALERTS_COMM_4 0xC000C386

// XEVENT_ALERTS_COMM_5, 50055, Error
#define XEVENT_ALERTS_COMM_5 0xC000C387

// XEVENT_ALERTS_COMM_6, 50056, Error
#define XEVENT_ALERTS_COMM_6 0xC000C388

// XEVENT_ALERTS_COMM_7, 50057, Error
#define XEVENT_ALERTS_COMM_7 0xC000C389

// XEVENT_ALERTS_COMM_8, 50058, Error
#define XEVENT_ALERTS_COMM_8 0xC000C38A

// XEVENT_ALERTS_COMM_9, 50059, Error
#define XEVENT_ALERTS_COMM_9 0xC000C38B

// XEVENT_ALERTS_CONFIG_0, 50100, Error
#define XEVENT_ALERTS_CONFIG_0 0xC000C3B4

// XEVENT_ALERTS_CONFIG_1, 50101, Error
#define XEVENT_ALERTS_CONFIG_1 0xC000C3B5

// XEVENT_ALERTS_CONFIG_2, 50102, Error
#define XEVENT_ALERTS_CONFIG_2 0xC000C3B6

// XEVENT_ALERTS_CONFIG_3, 50103, Error
#define XEVENT_ALERTS_CONFIG_3 0xC000C3B7

// XEVENT_ALERTS_CONFIG_4, 50104, Error
#define XEVENT_ALERTS_CONFIG_4 0xC000C3B8

// XEVENT_ALERTS_CONFIG_5, 50105, Error
#define XEVENT_ALERTS_CONFIG_5 0xC000C3B9

// XEVENT_ALERTS_CONFIG_6, 50106, Error
#define XEVENT_ALERTS_CONFIG_6 0xC000C3BA

// XEVENT_ALERTS_CONFIG_7, 50107, Error
#define XEVENT_ALERTS_CONFIG_7 0xC000C3BB

// XEVENT_ALERTS_INFO_0, 50125, Info
#define XEVENT_ALERTS_INFO_0 0x4000C3CD

// XEVENT_ALERTS_INFO_1, 50126, Info
#define XEVENT_ALERTS_INFO_1 0x4000C3CE

// XEVENT_ALERTS_INFO_2, 50127, Info
#define XEVENT_ALERTS_INFO_2 0x4000C3CF

// XEVENT_ALERTS_INFO_3, 50128, Info
#define XEVENT_ALERTS_INFO_3 0x4000C3D0
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\events\obj\arbitration.cs ===
ARBITRATION_INTERNAL_FATAL_ERROR = 50150 | XEvent.Severity.Error,
            ARBITRATION_INTERNAL_FATAL_ERROR_1 = 50151 | XEvent.Severity.Error,
            ARBITRATION_CODE_2 = 50152 | XEvent.Severity.Error,
            ARBITRATION_CODE_3 = 50153 | XEvent.Severity.Error,
            ARBITRATION_INTERNAL_FATAL_ERROR_2 = 50154 | XEvent.Severity.Error,
            ARBITRATION_CODE_5 = 50155 | XEvent.Severity.Error,
            ARBITRATION_CODE_6 = 50156 | XEvent.Severity.Error,
            ARBITRATION_CODE_7 = 50157 | XEvent.Severity.Error,
            ARBITRATION_INTERFACE_BUCKET_THREAD = 50158 | XEvent.Severity.Error,
            ARBITRATION_INTERFACE_BUCKET_UNABLE_TO_QUEUE_EVENT = 50159 | XEvent.Severity.Error,
            ARBITRATION_COMM_0 = 50175 | XEvent.Severity.Error,
            ARBITRATION_COMM_1 = 50176 | XEvent.Severity.Error,
            ARBITRATION_COMM_2 = 50177 | XEvent.Severity.Error,
            ARBITRATION_COMM_3 = 50178 | XEvent.Severity.Error,
            ARBITRATION_COMM_4 = 50179 | XEvent.Severity.Error,
            ARBITRATION_COMM_5 = 50180 | XEvent.Severity.Error,
            ARBITRATION_COMM_6 = 50181 | XEvent.Severity.Error,
            ARBITRATION_COMM_7 = 50182 | XEvent.Severity.Error,
            ARBITRATION_COMM_8 = 50183 | XEvent.Severity.Error,
            ARBITRATION_COMM_9 = 50184 | XEvent.Severity.Error,
            ARBITRATION_COMM_10 = 50185 | XEvent.Severity.Error,
            ARBITRATION_COMM_11 = 50186 | XEvent.Severity.Error,
            ARBITRATION_COMM_12 = 50187 | XEvent.Severity.Error,
            ARBITRATION_CONFIG_0 = 50225 | XEvent.Severity.Error,
            ARBITRATION_CONFIGURATION_ERROR = 50226 | XEvent.Severity.Warning,
            ARBITRATION_CONFIGURATION_ERROR_1 = 50227 | XEvent.Severity.Error,
            ARBITRATION_CONFIGURATION_ERROR_2 = 50228 | XEvent.Severity.Error,
            ARBITRATION_CONFIGURATION_ERROR_3 = 50229 | XEvent.Severity.Error,
            ARBITRATION_CONFIGURATION_ERROR_4 = 50230 | XEvent.Severity.Error,
            ARBITRATION_CONFIGURATION_ERROR_5 = 50231 | XEvent.Severity.Error,
            ARBITRATION_CONFIGURATION_ERROR_6 = 50232 | XEvent.Severity.Warning,
            ARBITRATION_CONFIGURATION_ERROR_7 = 50233 | XEvent.Severity.Error,
            ARBITRATION_CONFIG_9 = 50234 | XEvent.Severity.Warning,
            ARBITRATION_BAD_REQUEST_FROM_CLIENT = 50275 | XEvent.Severity.Warning,
            ARBITRATION_BAD_REQUEST_FROM_CLIENT_1 = 50276 | XEvent.Severity.Warning,
            ARBITRATION_BAD_REQUEST_FROM_CLIENT_2 = 50277 | XEvent.Severity.Warning,
            ARBITRATION_BAD_REQUEST_FROM_CLIENT_3 = 50278 | XEvent.Severity.Warning,
            ARBITRATION_BAD_REQUEST_FROM_CLIENT_4 = 50279 | XEvent.Severity.Warning,
            ARBITRATION_BAD_REQUEST_FROM_CLIENT_5 = 50280 | XEvent.Severity.Warning,
            ARBITRATION_BAD_REQUEST_FROM_CLIENT_6 = 50281 | XEvent.Severity.Warning,
            ARBITRATION_BAD_REQUEST_FROM_CLIENT_7 = 50282 | XEvent.Severity.Warning,
            ARBITRATION_BAD_REQUEST_FROM_CLIENT_8 = 50283 | XEvent.Severity.Warning,
            ARBITRATION_HACKER_ALERT = 50284 | XEvent.Severity.Warning,
            ARBITRATION_HACKER_ALERT_1 = 50285 | XEvent.Severity.Warning,
            ARBITRATION_HACKER_ALERT_2 = 50286 | XEvent.Severity.Warning,
            ARBITRATION_HACKER_ALERT_3 = 50287 | XEvent.Severity.Warning,
            ARBITRATION_BAD_REQUEST_FROM_CLIENT_9 = 50288 | XEvent.Severity.Warning,
            ARBITRATION_HACKER_ALERT_4 = 50289 | XEvent.Severity.Warning,
            ARBITRATION_HACKER_ALERT_5 = 50290 | XEvent.Severity.Warning,
            ARBITRATION_BAD_REQUEST_FROM_CLIENT_10 = 50291 | XEvent.Severity.Warning,
            ARBITRATION_BAD_REQUEST_FROM_CLIENT_11 = 50292 | XEvent.Severity.Warning,
            ARBITRATION_BAD_REQUEST_FROM_CLIENT_12 = 50293 | XEvent.Severity.Warning,
            ARBITRATION_HACKER_ALERT_6 = 50294 | XEvent.Severity.Warning,
            ARBITRATION_HACKER_ALERT_7 = 50295 | XEvent.Severity.Warning,
            ARBITRATION_BAD_REQUEST_FROM_CLIENT_13 = 50296 | XEvent.Severity.Warning,
            ARBITRATION_HACKER_ALERT_8 = 50297 | XEvent.Severity.Warning,
            ARBITRATION_HACKER_ALERT_9 = 50298 | XEvent.Severity.Warning,
            ARBITRATION_BAD_REQUEST_FROM_CLIENT_14 = 50299 | XEvent.Severity.Warning,
            ARBITRATION_HACKER_ALERT_10 = 50300 | XEvent.Severity.Warning,
            ARBITRATION_BAD_REQUEST_FROM_CLIENT_15 = 50301 | XEvent.Severity.Warning,
            ARBITRATION_HACKER_ALERT_11 = 50302 | XEvent.Severity.Warning,
            ARBITRATION_HACKER_ALERT_12 = 50303 | XEvent.Severity.Warning,
            ARBITRATION_HACKER_ALERT_13 = 50304 | XEvent.Severity.Warning,
            ARBITRATION_BAD_REQUEST_FROM_CLIENT_16 = 50305 | XEvent.Severity.Warning,
            ARBITRATION_BAD_REQUEST_FROM_CLIENT_17 = 50306 | XEvent.Severity.Warning,
            ARBITRATION_BAD_REQUEST_FROM_CLIENT_18 = 50307 | XEvent.Severity.Warning,
            ARBITRATION_HACKER_ALERT_14 = 50308 | XEvent.Severity.Warning,
            ARBITRATION_HACK_34 = 50309 | XEvent.Severity.Warning,
            ARBITRATION_HACK_35 = 50310 | XEvent.Severity.Warning,
            ARBITRATION_HACK_36 = 50311 | XEvent.Severity.Warning,
            ARBITRATION_HACK_37 = 50312 | XEvent.Severity.Warning,
            ARBITRATION_HACK_38 = 50313 | XEvent.Severity.Warning,
            ARBITRATION_HACK_39 = 50314 | XEvent.Severity.Warning,
            ARBITRATION_HACK_40 = 50315 | XEvent.Severity.Warning,
            ARBITRATION_HACK_41 = 50316 | XEvent.Severity.Warning,
            ARBITRATION_HACK_42 = 50317 | XEvent.Severity.Warning,
            ARBITRATION_HACK_43 = 50318 | XEvent.Severity.Warning,
            ARBITRATION_HACK_44 = 50319 | XEvent.Severity.Warning,
            ARBITRATION_HACK_45 = 50320 | XEvent.Severity.Warning,
            ARBITRATION_INFO_1 = 50376 | XEvent.Severity.Info,
            ARBITRATION_INFO_2 = 50377 | XEvent.Severity.Info,
            ARBITRATION_INFO_3 = 50378 | XEvent.Severity.Info,
            ARBITRATION_TITLEBUG_0 = 50400 | XEvent.Severity.Error,
            ARBITRATION_TITLEBUG_1 = 50401 | XEvent.Severity.Error,
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\events\obj\arbitration.h ===
// XEVENT_ARBITRATION_INTERNAL_FATAL_ERROR, 50150, Error
#define XEVENT_ARBITRATION_INTERNAL_FATAL_ERROR 0xC000C3E6

// XEVENT_ARBITRATION_INTERNAL_FATAL_ERROR_1, 50151, Error
#define XEVENT_ARBITRATION_INTERNAL_FATAL_ERROR_1 0xC000C3E7

// XEVENT_ARBITRATION_CODE_2, 50152, Error
#define XEVENT_ARBITRATION_CODE_2 0xC000C3E8

// XEVENT_ARBITRATION_CODE_3, 50153, Error
#define XEVENT_ARBITRATION_CODE_3 0xC000C3E9

// XEVENT_ARBITRATION_INTERNAL_FATAL_ERROR_2, 50154, Error
#define XEVENT_ARBITRATION_INTERNAL_FATAL_ERROR_2 0xC000C3EA

// XEVENT_ARBITRATION_CODE_5, 50155, Error
#define XEVENT_ARBITRATION_CODE_5 0xC000C3EB

// XEVENT_ARBITRATION_CODE_6, 50156, Error
#define XEVENT_ARBITRATION_CODE_6 0xC000C3EC

// XEVENT_ARBITRATION_CODE_7, 50157, Error
#define XEVENT_ARBITRATION_CODE_7 0xC000C3ED

// XEVENT_ARBITRATION_INTERFACE_BUCKET_THREAD, 50158, Error
#define XEVENT_ARBITRATION_INTERFACE_BUCKET_THREAD 0xC000C3EE

// XEVENT_ARBITRATION_INTERFACE_BUCKET_UNABLE_TO_QUEUE_EVENT, 50159, Error
#define XEVENT_ARBITRATION_INTERFACE_BUCKET_UNABLE_TO_QUEUE_EVENT 0xC000C3EF

// XEVENT_ARBITRATION_COMM_0, 50175, Error
#define XEVENT_ARBITRATION_COMM_0 0xC000C3FF

// XEVENT_ARBITRATION_COMM_1, 50176, Error
#define XEVENT_ARBITRATION_COMM_1 0xC000C400

// XEVENT_ARBITRATION_COMM_2, 50177, Error
#define XEVENT_ARBITRATION_COMM_2 0xC000C401

// XEVENT_ARBITRATION_COMM_3, 50178, Error
#define XEVENT_ARBITRATION_COMM_3 0xC000C402

// XEVENT_ARBITRATION_COMM_4, 50179, Error
#define XEVENT_ARBITRATION_COMM_4 0xC000C403

// XEVENT_ARBITRATION_COMM_5, 50180, Error
#define XEVENT_ARBITRATION_COMM_5 0xC000C404

// XEVENT_ARBITRATION_COMM_6, 50181, Error
#define XEVENT_ARBITRATION_COMM_6 0xC000C405

// XEVENT_ARBITRATION_COMM_7, 50182, Error
#define XEVENT_ARBITRATION_COMM_7 0xC000C406

// XEVENT_ARBITRATION_COMM_8, 50183, Error
#define XEVENT_ARBITRATION_COMM_8 0xC000C407

// XEVENT_ARBITRATION_COMM_9, 50184, Error
#define XEVENT_ARBITRATION_COMM_9 0xC000C408

// XEVENT_ARBITRATION_COMM_10, 50185, Error
#define XEVENT_ARBITRATION_COMM_10 0xC000C409

// XEVENT_ARBITRATION_COMM_11, 50186, Error
#define XEVENT_ARBITRATION_COMM_11 0xC000C40A

// XEVENT_ARBITRATION_COMM_12, 50187, Error
#define XEVENT_ARBITRATION_COMM_12 0xC000C40B

// XEVENT_ARBITRATION_CONFIG_0, 50225, Error
#define XEVENT_ARBITRATION_CONFIG_0 0xC000C431

// XEVENT_ARBITRATION_CONFIGURATION_ERROR, 50226, Warning
#define XEVENT_ARBITRATION_CONFIGURATION_ERROR 0x8000C432

// XEVENT_ARBITRATION_CONFIGURATION_ERROR_1, 50227, Error
#define XEVENT_ARBITRATION_CONFIGURATION_ERROR_1 0xC000C433

// XEVENT_ARBITRATION_CONFIGURATION_ERROR_2, 50228, Error
#define XEVENT_ARBITRATION_CONFIGURATION_ERROR_2 0xC000C434

// XEVENT_ARBITRATION_CONFIGURATION_ERROR_3, 50229, Error
#define XEVENT_ARBITRATION_CONFIGURATION_ERROR_3 0xC000C435

// XEVENT_ARBITRATION_CONFIGURATION_ERROR_4, 50230, Error
#define XEVENT_ARBITRATION_CONFIGURATION_ERROR_4 0xC000C436

// XEVENT_ARBITRATION_CONFIGURATION_ERROR_5, 50231, Error
#define XEVENT_ARBITRATION_CONFIGURATION_ERROR_5 0xC000C437

// XEVENT_ARBITRATION_CONFIGURATION_ERROR_6, 50232, Warning
#define XEVENT_ARBITRATION_CONFIGURATION_ERROR_6 0x8000C438

// XEVENT_ARBITRATION_CONFIGURATION_ERROR_7, 50233, Error
#define XEVENT_ARBITRATION_CONFIGURATION_ERROR_7 0xC000C439

// XEVENT_ARBITRATION_CONFIG_9, 50234, Warning
#define XEVENT_ARBITRATION_CONFIG_9 0x8000C43A

// XEVENT_ARBITRATION_BAD_REQUEST_FROM_CLIENT, 50275, Warning
#define XEVENT_ARBITRATION_BAD_REQUEST_FROM_CLIENT 0x8000C463

// XEVENT_ARBITRATION_BAD_REQUEST_FROM_CLIENT_1, 50276, Warning
#define XEVENT_ARBITRATION_BAD_REQUEST_FROM_CLIENT_1 0x8000C464

// XEVENT_ARBITRATION_BAD_REQUEST_FROM_CLIENT_2, 50277, Warning
#define XEVENT_ARBITRATION_BAD_REQUEST_FROM_CLIENT_2 0x8000C465

// XEVENT_ARBITRATION_BAD_REQUEST_FROM_CLIENT_3, 50278, Warning
#define XEVENT_ARBITRATION_BAD_REQUEST_FROM_CLIENT_3 0x8000C466

// XEVENT_ARBITRATION_BAD_REQUEST_FROM_CLIENT_4, 50279, Warning
#define XEVENT_ARBITRATION_BAD_REQUEST_FROM_CLIENT_4 0x8000C467

// XEVENT_ARBITRATION_BAD_REQUEST_FROM_CLIENT_5, 50280, Warning
#define XEVENT_ARBITRATION_BAD_REQUEST_FROM_CLIENT_5 0x8000C468

// XEVENT_ARBITRATION_BAD_REQUEST_FROM_CLIENT_6, 50281, Warning
#define XEVENT_ARBITRATION_BAD_REQUEST_FROM_CLIENT_6 0x8000C469

// XEVENT_ARBITRATION_BAD_REQUEST_FROM_CLIENT_7, 50282, Warning
#define XEVENT_ARBITRATION_BAD_REQUEST_FROM_CLIENT_7 0x8000C46A

// XEVENT_ARBITRATION_BAD_REQUEST_FROM_CLIENT_8, 50283, Warning
#define XEVENT_ARBITRATION_BAD_REQUEST_FROM_CLIENT_8 0x8000C46B

// XEVENT_ARBITRATION_HACKER_ALERT, 50284, Warning
#define XEVENT_ARBITRATION_HACKER_ALERT 0x8000C46C

// XEVENT_ARBITRATION_HACKER_ALERT_1, 50285, Warning
#define XEVENT_ARBITRATION_HACKER_ALERT_1 0x8000C46D

// XEVENT_ARBITRATION_HACKER_ALERT_2, 50286, Warning
#define XEVENT_ARBITRATION_HACKER_ALERT_2 0x8000C46E

// XEVENT_ARBITRATION_HACKER_ALERT_3, 50287, Warning
#define XEVENT_ARBITRATION_HACKER_ALERT_3 0x8000C46F

// XEVENT_ARBITRATION_BAD_REQUEST_FROM_CLIENT_9, 50288, Warning
#define XEVENT_ARBITRATION_BAD_REQUEST_FROM_CLIENT_9 0x8000C470

// XEVENT_ARBITRATION_HACKER_ALERT_4, 50289, Warning
#define XEVENT_ARBITRATION_HACKER_ALERT_4 0x8000C471

// XEVENT_ARBITRATION_HACKER_ALERT_5, 50290, Warning
#define XEVENT_ARBITRATION_HACKER_ALERT_5 0x8000C472

// XEVENT_ARBITRATION_BAD_REQUEST_FROM_CLIENT_10, 50291, Warning
#define XEVENT_ARBITRATION_BAD_REQUEST_FROM_CLIENT_10 0x8000C473

// XEVENT_ARBITRATION_BAD_REQUEST_FROM_CLIENT_11, 50292, Warning
#define XEVENT_ARBITRATION_BAD_REQUEST_FROM_CLIENT_11 0x8000C474

// XEVENT_ARBITRATION_BAD_REQUEST_FROM_CLIENT_12, 50293, Warning
#define XEVENT_ARBITRATION_BAD_REQUEST_FROM_CLIENT_12 0x8000C475

// XEVENT_ARBITRATION_HACKER_ALERT_6, 50294, Warning
#define XEVENT_ARBITRATION_HACKER_ALERT_6 0x8000C476

// XEVENT_ARBITRATION_HACKER_ALERT_7, 50295, Warning
#define XEVENT_ARBITRATION_HACKER_ALERT_7 0x8000C477

// XEVENT_ARBITRATION_BAD_REQUEST_FROM_CLIENT_13, 50296, Warning
#define XEVENT_ARBITRATION_BAD_REQUEST_FROM_CLIENT_13 0x8000C478

// XEVENT_ARBITRATION_HACKER_ALERT_8, 50297, Warning
#define XEVENT_ARBITRATION_HACKER_ALERT_8 0x8000C479

// XEVENT_ARBITRATION_HACKER_ALERT_9, 50298, Warning
#define XEVENT_ARBITRATION_HACKER_ALERT_9 0x8000C47A

// XEVENT_ARBITRATION_BAD_REQUEST_FROM_CLIENT_14, 50299, Warning
#define XEVENT_ARBITRATION_BAD_REQUEST_FROM_CLIENT_14 0x8000C47B

// XEVENT_ARBITRATION_HACKER_ALERT_10, 50300, Warning
#define XEVENT_ARBITRATION_HACKER_ALERT_10 0x8000C47C

// XEVENT_ARBITRATION_BAD_REQUEST_FROM_CLIENT_15, 50301, Warning
#define XEVENT_ARBITRATION_BAD_REQUEST_FROM_CLIENT_15 0x8000C47D

// XEVENT_ARBITRATION_HACKER_ALERT_11, 50302, Warning
#define XEVENT_ARBITRATION_HACKER_ALERT_11 0x8000C47E

// XEVENT_ARBITRATION_HACKER_ALERT_12, 50303, Warning
#define XEVENT_ARBITRATION_HACKER_ALERT_12 0x8000C47F

// XEVENT_ARBITRATION_HACKER_ALERT_13, 50304, Warning
#define XEVENT_ARBITRATION_HACKER_ALERT_13 0x8000C480

// XEVENT_ARBITRATION_BAD_REQUEST_FROM_CLIENT_16, 50305, Warning
#define XEVENT_ARBITRATION_BAD_REQUEST_FROM_CLIENT_16 0x8000C481

// XEVENT_ARBITRATION_BAD_REQUEST_FROM_CLIENT_17, 50306, Warning
#define XEVENT_ARBITRATION_BAD_REQUEST_FROM_CLIENT_17 0x8000C482

// XEVENT_ARBITRATION_BAD_REQUEST_FROM_CLIENT_18, 50307, Warning
#define XEVENT_ARBITRATION_BAD_REQUEST_FROM_CLIENT_18 0x8000C483

// XEVENT_ARBITRATION_HACKER_ALERT_14, 50308, Warning
#define XEVENT_ARBITRATION_HACKER_ALERT_14 0x8000C484

// XEVENT_ARBITRATION_HACK_34, 50309, Warning
#define XEVENT_ARBITRATION_HACK_34 0x8000C485

// XEVENT_ARBITRATION_HACK_35, 50310, Warning
#define XEVENT_ARBITRATION_HACK_35 0x8000C486

// XEVENT_ARBITRATION_HACK_36, 50311, Warning
#define XEVENT_ARBITRATION_HACK_36 0x8000C487

// XEVENT_ARBITRATION_HACK_37, 50312, Warning
#define XEVENT_ARBITRATION_HACK_37 0x8000C488

// XEVENT_ARBITRATION_HACK_38, 50313, Warning
#define XEVENT_ARBITRATION_HACK_38 0x8000C489

// XEVENT_ARBITRATION_HACK_39, 50314, Warning
#define XEVENT_ARBITRATION_HACK_39 0x8000C48A

// XEVENT_ARBITRATION_HACK_40, 50315, Warning
#define XEVENT_ARBITRATION_HACK_40 0x8000C48B

// XEVENT_ARBITRATION_HACK_41, 50316, Warning
#define XEVENT_ARBITRATION_HACK_41 0x8000C48C

// XEVENT_ARBITRATION_HACK_42, 50317, Warning
#define XEVENT_ARBITRATION_HACK_42 0x8000C48D

// XEVENT_ARBITRATION_HACK_43, 50318, Warning
#define XEVENT_ARBITRATION_HACK_43 0x8000C48E

// XEVENT_ARBITRATION_HACK_44, 50319, Warning
#define XEVENT_ARBITRATION_HACK_44 0x8000C48F

// XEVENT_ARBITRATION_HACK_45, 50320, Warning
#define XEVENT_ARBITRATION_HACK_45 0x8000C490

// XEVENT_ARBITRATION_INFO_1, 50376, Info
#define XEVENT_ARBITRATION_INFO_1 0x4000C4C8

// XEVENT_ARBITRATION_INFO_2, 50377, Info
#define XEVENT_ARBITRATION_INFO_2 0x4000C4C9

// XEVENT_ARBITRATION_INFO_3, 50378, Info
#define XEVENT_ARBITRATION_INFO_3 0x4000C4CA

// XEVENT_ARBITRATION_TITLEBUG_0, 50400, Error
#define XEVENT_ARBITRATION_TITLEBUG_0 0xC000C4E0

// XEVENT_ARBITRATION_TITLEBUG_1, 50401, Error
#define XEVENT_ARBITRATION_TITLEBUG_1 0xC000C4E1
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\events\obj\askdc.cs ===
ASKDC_KDCMANAGED_WSREADER_ERROR_1 = 10000 | XEvent.Severity.Error,
            ASKDC_BAD_PARAMETER = 53225 | XEvent.Severity.Error,
            ASKDC_BAD_PARAMETER_1 = 53226 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY = 53227 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_1 = 53228 | XEvent.Severity.Error,
            KDC_BASE_BAD_KERBCRYPT = 53229 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_2 = 53230 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_3 = 53231 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_4 = 53232 | XEvent.Severity.Error,
            DEPRACATED_ASKDC_NO_MEMORY_5 = 53233 | XEvent.Severity.Error,
            DEPRACATED_ASKDC_NO_MEMORY_6 = 53234 | XEvent.Severity.Error,
            KDC_CODE_10 = 53235 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR = 53236 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_7 = 53237 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_1 = 53238 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_8 = 53239 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_2 = 53240 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_3 = 53241 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_4 = 53242 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_5 = 53243 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_6 = 53244 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_7 = 53245 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_9 = 53246 | XEvent.Severity.Error,
            KDC_CODE_22 = 53247 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_8 = 53248 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_10 = 53249 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_9 = 53250 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_11 = 53251 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_10 = 53252 | XEvent.Severity.Error,
            KDC_CODE_28 = 53253 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_11 = 53254 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_12 = 53255 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_13 = 53256 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_12 = 53257 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_13 = 53258 | XEvent.Severity.Error,
            DEPRACATED_ASKDC_NO_MEMORY_14 = 53259 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_15 = 53260 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_16 = 53261 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_14 = 53262 | XEvent.Severity.Error,
            KDC_CODE_38 = 53263 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_15 = 53264 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_16 = 53265 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_17 = 53266 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_18 = 53267 | XEvent.Severity.Error,
            KDC_CODE_43 = 53268 | XEvent.Severity.Error,
            DEPRACATED_ASKDC_WSREADER_ERROR_19 = 53269 | XEvent.Severity.Error,
            DEPRACATED_ASKDC_BAD_PARAMETER_2 = 53270 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_17 = 53271 | XEvent.Severity.Error,
            DEPRACATED_ASKDC_BAD_PARAMETER_3 = 53272 | XEvent.Severity.Error,
            KDC_CODE_48 = 53273 | XEvent.Severity.Error,
            KDC_CODE_49 = 53274 | XEvent.Severity.Error,
            DEPRACATED_KDC_CODE_50 = 53275 | XEvent.Severity.Error,
            DEPRACATED_KDC_CODE_51 = 53276 | XEvent.Severity.Error,
            KDC_CODE_52 = 53277 | XEvent.Severity.Error,
            KDC_CODE_53 = 53278 | XEvent.Severity.Error,
            KDC_CODE_54 = 53279 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_20 = 53280 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_21 = 53281 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_22 = 53282 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_18 = 53283 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_19 = 53284 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_23 = 53285 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_24 = 53286 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_20 = 53287 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_25 = 53288 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_26 = 53289 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_27 = 53290 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_28 = 53291 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_29 = 53292 | XEvent.Severity.Error,
            ASKDC_NO_CRYPTOHELPER = 53293 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_30 = 53294 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_21 = 53295 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_31 = 53296 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_22 = 53297 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_23 = 53298 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_24 = 53299 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_25 = 53300 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_26 = 53301 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_27 = 53302 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_28 = 53303 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_29 = 53304 | XEvent.Severity.Error,
            ASKDC_CODE_MEMORY_ALLOCATION_ERROR = 53664 | XEvent.Severity.Error,
            ASKDC_CODE_FAILED_TO_GET_CIPHERTEXT_SIZE = 53665 | XEvent.Severity.Error,
            ASKDC_CODE_MEMORY_ALLOCATION_ERROR_2 = 53666 | XEvent.Severity.Error,
            ASKDC_CODE_FAILED_TO_ENCRYPT_REPLY = 53667 | XEvent.Severity.Error,
            ASKDC_CODE_FAILED_TO_PACK_REPLY = 53668 | XEvent.Severity.Error,
            ASKDC_FAILED_TO_GET_USER_ID_FOR_PASSPORT_ID = 53669 | XEvent.Severity.Error,
            ASKDC_FAILED_TO_GET_GAMERTAG_BY_USER_ID = 53672 | XEvent.Severity.Error,
            ASKDC_FAILED_TO_LOAD_ECHO_DATA_KEY = 53675 | XEvent.Severity.Error,
            ASKDC_BAD_PARAMETER_4 = 53676 | XEvent.Severity.Error,
            ASKDC_DOS_CACHE_TOO_SMALL = 54250 | XEvent.Severity.Error,
            ASKDC_DOS_CACHE_TOO_SMALL_1 = 54251 | XEvent.Severity.Error,
            ASKDC_REGISTER_FAILURE = 54252 | XEvent.Severity.Error,
            ASKDC_REGISTER_FAILURE_1 = 54253 | XEvent.Severity.Error,
            ASKDC_REGISTER_FAILURE_2 = 54254 | XEvent.Severity.Error,
            ASKDC_REGISTER_FAILURE_3 = 54255 | XEvent.Severity.Error,
            KDC_CONFIG_6 = 54256 | XEvent.Severity.Error,
            ASKDC_INIT_FAILURE = 54257 | XEvent.Severity.Error,
            ASKDC_INIT_FAILURE_1 = 54258 | XEvent.Severity.Error,
            ASKDC_INIT_FAILURE_2 = 54259 | XEvent.Severity.Error,
            ASKDC_INIT_FAILURE_3 = 54260 | XEvent.Severity.Error,
            ASKDC_INIT_FAILURE_4 = 54261 | XEvent.Severity.Error,
            DEPRACATED_ASKDC_INIT_FAILURE_5 = 54262 | XEvent.Severity.Error,
            ASKDC_INIT_WARNING = 54263 | XEvent.Severity.Warning,
            ASKDC_INIT_WARNING_1 = 54264 | XEvent.Severity.Warning,
            ASKDC_INIT_WARNING_2 = 54265 | XEvent.Severity.Warning,
            ASKDC_INIT_WARNING_3 = 54266 | XEvent.Severity.Warning,
            ASKDC_DECRYPTION_FAILED = 54267 | XEvent.Severity.Error,
            KDC_CONFIG_18 = 54268 | XEvent.Severity.Warning,
            ASKDC_INVALID_PASSPORT_KEY_VERSION = 54269 | XEvent.Severity.Error,
            DEPRACATED_KDC_CONFIG_20 = 54270 | XEvent.Severity.Error,
            ASKDC_SET_PASSPORT_KEY_VERSION = 54271 | XEvent.Severity.Error,
            KDC_CONFIG_22 = 54272 | XEvent.Severity.Error,
            ASKDC_TOO_MANY_USER_KEY_VERSIONS = 54273 | XEvent.Severity.Error,
            KDC_CONFIG_24 = 54274 | XEvent.Severity.Error,
            ASKDC_FAILED_TO_INITIALIZE_PASSPORT = 54368 | XEvent.Severity.Error,
            ASKDC_INIT_FAILURE_6 = 54372 | XEvent.Severity.Error,
            ASKDC_CRYPTO_FAILURE = 54373 | XEvent.Severity.Error,
            ASKDC_DOS_REPLAY = 54650 | XEvent.Severity.Warning,
            KDC_HACK_1 = 54651 | XEvent.Severity.Warning,
            KDC_HACK_2 = 54652 | XEvent.Severity.Warning,
            ASKDC_PPA_PADATA_MISSING = 54653 | XEvent.Severity.Warning,
            ASKDC_BAD_CLIENT_NAME = 54654 | XEvent.Severity.Warning,
            KDC_HACK_5 = 54655 | XEvent.Severity.Warning,
            ASKDC_HACK_INVALID_PRE_AUTH_TYPE = 54702 | XEvent.Severity.Warning,
            ASKDC_HACK_MALFORMED_PRE_AUTH = 54703 | XEvent.Severity.Warning,
            ASKDC_HACK_FAILED_TO_CRACK_PASSPORT_TICKET = 54704 | XEvent.Severity.Warning,
            ASKDC_HACK_INVALID_REQUEST = 54705 | XEvent.Severity.Warning,
            ASKDC_HACK_DOS_ATTACK = 54707 | XEvent.Severity.Warning,
            ASKDC_HACK_MALFORMED_PRE_AUTH_1 = 54715 | XEvent.Severity.Warning,
            ASKDC_UNKNOWN_SERVER_PRINCIPAL = 54716 | XEvent.Severity.Error,
            ASKDC_REGISTER_SUCCESS = 54750 | XEvent.Severity.Info,
            ASKDC_REGISTER_SUCCESS_1 = 54751 | XEvent.Severity.Info,
            ASKDC_INIT_SUCCESS = 54752 | XEvent.Severity.Info,
            ASKDC_TERM_SUCCESS = 54753 | XEvent.Severity.Info,
            ASKDC_RELOAD_SUCCESS = 54754 | XEvent.Severity.Info,
            DEPRACATED_ASKDC_PPA_LOADING_INFO = 54755 | XEvent.Severity.Info,
            DEPRACATED_ASKDC_PPA_LOADING_INFO_1 = 54756 | XEvent.Severity.Info,
            KDC_INFO_7 = 54757 | XEvent.Severity.Info,
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\events\obj\askdc.h ===
// XEVENT_ASKDC_KDCMANAGED_WSREADER_ERROR_1, 10000, Error
#define XEVENT_ASKDC_KDCMANAGED_WSREADER_ERROR_1 0xC0002710

// XEVENT_ASKDC_BAD_PARAMETER, 53225, Error
#define XEVENT_ASKDC_BAD_PARAMETER 0xC000CFE9

// XEVENT_ASKDC_BAD_PARAMETER_1, 53226, Error
#define XEVENT_ASKDC_BAD_PARAMETER_1 0xC000CFEA

// XEVENT_ASKDC_NO_MEMORY, 53227, Error
#define XEVENT_ASKDC_NO_MEMORY 0xC000CFEB

// XEVENT_ASKDC_NO_MEMORY_1, 53228, Error
#define XEVENT_ASKDC_NO_MEMORY_1 0xC000CFEC

// XEVENT_KDC_BASE_BAD_KERBCRYPT, 53229, Error
#define XEVENT_KDC_BASE_BAD_KERBCRYPT 0xC000CFED

// XEVENT_ASKDC_NO_MEMORY_2, 53230, Error
#define XEVENT_ASKDC_NO_MEMORY_2 0xC000CFEE

// XEVENT_ASKDC_NO_MEMORY_3, 53231, Error
#define XEVENT_ASKDC_NO_MEMORY_3 0xC000CFEF

// XEVENT_ASKDC_NO_MEMORY_4, 53232, Error
#define XEVENT_ASKDC_NO_MEMORY_4 0xC000CFF0

// XEVENT_DEPRACATED_ASKDC_NO_MEMORY_5, 53233, Error
#define XEVENT_DEPRACATED_ASKDC_NO_MEMORY_5 0xC000CFF1

// XEVENT_DEPRACATED_ASKDC_NO_MEMORY_6, 53234, Error
#define XEVENT_DEPRACATED_ASKDC_NO_MEMORY_6 0xC000CFF2

// XEVENT_KDC_CODE_10, 53235, Error
#define XEVENT_KDC_CODE_10 0xC000CFF3

// XEVENT_ASKDC_WSREADER_ERROR, 53236, Error
#define XEVENT_ASKDC_WSREADER_ERROR 0xC000CFF4

// XEVENT_ASKDC_NO_MEMORY_7, 53237, Error
#define XEVENT_ASKDC_NO_MEMORY_7 0xC000CFF5

// XEVENT_ASKDC_WSREADER_ERROR_1, 53238, Error
#define XEVENT_ASKDC_WSREADER_ERROR_1 0xC000CFF6

// XEVENT_ASKDC_NO_MEMORY_8, 53239, Error
#define XEVENT_ASKDC_NO_MEMORY_8 0xC000CFF7

// XEVENT_ASKDC_WSREADER_ERROR_2, 53240, Error
#define XEVENT_ASKDC_WSREADER_ERROR_2 0xC000CFF8

// XEVENT_ASKDC_WSREADER_ERROR_3, 53241, Error
#define XEVENT_ASKDC_WSREADER_ERROR_3 0xC000CFF9

// XEVENT_ASKDC_WSREADER_ERROR_4, 53242, Error
#define XEVENT_ASKDC_WSREADER_ERROR_4 0xC000CFFA

// XEVENT_ASKDC_WSREADER_ERROR_5, 53243, Error
#define XEVENT_ASKDC_WSREADER_ERROR_5 0xC000CFFB

// XEVENT_ASKDC_WSREADER_ERROR_6, 53244, Error
#define XEVENT_ASKDC_WSREADER_ERROR_6 0xC000CFFC

// XEVENT_ASKDC_WSREADER_ERROR_7, 53245, Error
#define XEVENT_ASKDC_WSREADER_ERROR_7 0xC000CFFD

// XEVENT_ASKDC_NO_MEMORY_9, 53246, Error
#define XEVENT_ASKDC_NO_MEMORY_9 0xC000CFFE

// XEVENT_KDC_CODE_22, 53247, Error
#define XEVENT_KDC_CODE_22 0xC000CFFF

// XEVENT_ASKDC_WSREADER_ERROR_8, 53248, Error
#define XEVENT_ASKDC_WSREADER_ERROR_8 0xC000D000

// XEVENT_ASKDC_NO_MEMORY_10, 53249, Error
#define XEVENT_ASKDC_NO_MEMORY_10 0xC000D001

// XEVENT_ASKDC_WSREADER_ERROR_9, 53250, Error
#define XEVENT_ASKDC_WSREADER_ERROR_9 0xC000D002

// XEVENT_ASKDC_NO_MEMORY_11, 53251, Error
#define XEVENT_ASKDC_NO_MEMORY_11 0xC000D003

// XEVENT_ASKDC_WSREADER_ERROR_10, 53252, Error
#define XEVENT_ASKDC_WSREADER_ERROR_10 0xC000D004

// XEVENT_KDC_CODE_28, 53253, Error
#define XEVENT_KDC_CODE_28 0xC000D005

// XEVENT_ASKDC_WSREADER_ERROR_11, 53254, Error
#define XEVENT_ASKDC_WSREADER_ERROR_11 0xC000D006

// XEVENT_ASKDC_WSREADER_ERROR_12, 53255, Error
#define XEVENT_ASKDC_WSREADER_ERROR_12 0xC000D007

// XEVENT_ASKDC_WSREADER_ERROR_13, 53256, Error
#define XEVENT_ASKDC_WSREADER_ERROR_13 0xC000D008

// XEVENT_ASKDC_NO_MEMORY_12, 53257, Error
#define XEVENT_ASKDC_NO_MEMORY_12 0xC000D009

// XEVENT_ASKDC_NO_MEMORY_13, 53258, Error
#define XEVENT_ASKDC_NO_MEMORY_13 0xC000D00A

// XEVENT_DEPRACATED_ASKDC_NO_MEMORY_14, 53259, Error
#define XEVENT_DEPRACATED_ASKDC_NO_MEMORY_14 0xC000D00B

// XEVENT_ASKDC_NO_MEMORY_15, 53260, Error
#define XEVENT_ASKDC_NO_MEMORY_15 0xC000D00C

// XEVENT_ASKDC_NO_MEMORY_16, 53261, Error
#define XEVENT_ASKDC_NO_MEMORY_16 0xC000D00D

// XEVENT_ASKDC_WSREADER_ERROR_14, 53262, Error
#define XEVENT_ASKDC_WSREADER_ERROR_14 0xC000D00E

// XEVENT_KDC_CODE_38, 53263, Error
#define XEVENT_KDC_CODE_38 0xC000D00F

// XEVENT_ASKDC_WSREADER_ERROR_15, 53264, Error
#define XEVENT_ASKDC_WSREADER_ERROR_15 0xC000D010

// XEVENT_ASKDC_WSREADER_ERROR_16, 53265, Error
#define XEVENT_ASKDC_WSREADER_ERROR_16 0xC000D011

// XEVENT_ASKDC_WSREADER_ERROR_17, 53266, Error
#define XEVENT_ASKDC_WSREADER_ERROR_17 0xC000D012

// XEVENT_ASKDC_WSREADER_ERROR_18, 53267, Error
#define XEVENT_ASKDC_WSREADER_ERROR_18 0xC000D013

// XEVENT_KDC_CODE_43, 53268, Error
#define XEVENT_KDC_CODE_43 0xC000D014

// XEVENT_DEPRACATED_ASKDC_WSREADER_ERROR_19, 53269, Error
#define XEVENT_DEPRACATED_ASKDC_WSREADER_ERROR_19 0xC000D015

// XEVENT_DEPRACATED_ASKDC_BAD_PARAMETER_2, 53270, Error
#define XEVENT_DEPRACATED_ASKDC_BAD_PARAMETER_2 0xC000D016

// XEVENT_ASKDC_NO_MEMORY_17, 53271, Error
#define XEVENT_ASKDC_NO_MEMORY_17 0xC000D017

// XEVENT_DEPRACATED_ASKDC_BAD_PARAMETER_3, 53272, Error
#define XEVENT_DEPRACATED_ASKDC_BAD_PARAMETER_3 0xC000D018

// XEVENT_KDC_CODE_48, 53273, Error
#define XEVENT_KDC_CODE_48 0xC000D019

// XEVENT_KDC_CODE_49, 53274, Error
#define XEVENT_KDC_CODE_49 0xC000D01A

// XEVENT_DEPRACATED_KDC_CODE_50, 53275, Error
#define XEVENT_DEPRACATED_KDC_CODE_50 0xC000D01B

// XEVENT_DEPRACATED_KDC_CODE_51, 53276, Error
#define XEVENT_DEPRACATED_KDC_CODE_51 0xC000D01C

// XEVENT_KDC_CODE_52, 53277, Error
#define XEVENT_KDC_CODE_52 0xC000D01D

// XEVENT_KDC_CODE_53, 53278, Error
#define XEVENT_KDC_CODE_53 0xC000D01E

// XEVENT_KDC_CODE_54, 53279, Error
#define XEVENT_KDC_CODE_54 0xC000D01F

// XEVENT_ASKDC_WSREADER_ERROR_20, 53280, Error
#define XEVENT_ASKDC_WSREADER_ERROR_20 0xC000D020

// XEVENT_ASKDC_WSREADER_ERROR_21, 53281, Error
#define XEVENT_ASKDC_WSREADER_ERROR_21 0xC000D021

// XEVENT_ASKDC_WSREADER_ERROR_22, 53282, Error
#define XEVENT_ASKDC_WSREADER_ERROR_22 0xC000D022

// XEVENT_ASKDC_NO_MEMORY_18, 53283, Error
#define XEVENT_ASKDC_NO_MEMORY_18 0xC000D023

// XEVENT_ASKDC_NO_MEMORY_19, 53284, Error
#define XEVENT_ASKDC_NO_MEMORY_19 0xC000D024

// XEVENT_ASKDC_WSREADER_ERROR_23, 53285, Error
#define XEVENT_ASKDC_WSREADER_ERROR_23 0xC000D025

// XEVENT_ASKDC_WSREADER_ERROR_24, 53286, Error
#define XEVENT_ASKDC_WSREADER_ERROR_24 0xC000D026

// XEVENT_ASKDC_NO_MEMORY_20, 53287, Error
#define XEVENT_ASKDC_NO_MEMORY_20 0xC000D027

// XEVENT_ASKDC_WSREADER_ERROR_25, 53288, Error
#define XEVENT_ASKDC_WSREADER_ERROR_25 0xC000D028

// XEVENT_ASKDC_WSREADER_ERROR_26, 53289, Error
#define XEVENT_ASKDC_WSREADER_ERROR_26 0xC000D029

// XEVENT_ASKDC_WSREADER_ERROR_27, 53290, Error
#define XEVENT_ASKDC_WSREADER_ERROR_27 0xC000D02A

// XEVENT_ASKDC_WSREADER_ERROR_28, 53291, Error
#define XEVENT_ASKDC_WSREADER_ERROR_28 0xC000D02B

// XEVENT_ASKDC_WSREADER_ERROR_29, 53292, Error
#define XEVENT_ASKDC_WSREADER_ERROR_29 0xC000D02C

// XEVENT_ASKDC_NO_CRYPTOHELPER, 53293, Error
#define XEVENT_ASKDC_NO_CRYPTOHELPER 0xC000D02D

// XEVENT_ASKDC_WSREADER_ERROR_30, 53294, Error
#define XEVENT_ASKDC_WSREADER_ERROR_30 0xC000D02E

// XEVENT_ASKDC_NO_MEMORY_21, 53295, Error
#define XEVENT_ASKDC_NO_MEMORY_21 0xC000D02F

// XEVENT_ASKDC_WSREADER_ERROR_31, 53296, Error
#define XEVENT_ASKDC_WSREADER_ERROR_31 0xC000D030

// XEVENT_ASKDC_NO_MEMORY_22, 53297, Error
#define XEVENT_ASKDC_NO_MEMORY_22 0xC000D031

// XEVENT_ASKDC_NO_MEMORY_23, 53298, Error
#define XEVENT_ASKDC_NO_MEMORY_23 0xC000D032

// XEVENT_ASKDC_NO_MEMORY_24, 53299, Error
#define XEVENT_ASKDC_NO_MEMORY_24 0xC000D033

// XEVENT_ASKDC_NO_MEMORY_25, 53300, Error
#define XEVENT_ASKDC_NO_MEMORY_25 0xC000D034

// XEVENT_ASKDC_NO_MEMORY_26, 53301, Error
#define XEVENT_ASKDC_NO_MEMORY_26 0xC000D035

// XEVENT_ASKDC_NO_MEMORY_27, 53302, Error
#define XEVENT_ASKDC_NO_MEMORY_27 0xC000D036

// XEVENT_ASKDC_NO_MEMORY_28, 53303, Error
#define XEVENT_ASKDC_NO_MEMORY_28 0xC000D037

// XEVENT_ASKDC_NO_MEMORY_29, 53304, Error
#define XEVENT_ASKDC_NO_MEMORY_29 0xC000D038

// XEVENT_ASKDC_CODE_MEMORY_ALLOCATION_ERROR, 53664, Error
#define XEVENT_ASKDC_CODE_MEMORY_ALLOCATION_ERROR 0xC000D1A0

// XEVENT_ASKDC_CODE_FAILED_TO_GET_CIPHERTEXT_SIZE, 53665, Error
#define XEVENT_ASKDC_CODE_FAILED_TO_GET_CIPHERTEXT_SIZE 0xC000D1A1

// XEVENT_ASKDC_CODE_MEMORY_ALLOCATION_ERROR_2, 53666, Error
#define XEVENT_ASKDC_CODE_MEMORY_ALLOCATION_ERROR_2 0xC000D1A2

// XEVENT_ASKDC_CODE_FAILED_TO_ENCRYPT_REPLY, 53667, Error
#define XEVENT_ASKDC_CODE_FAILED_TO_ENCRYPT_REPLY 0xC000D1A3

// XEVENT_ASKDC_CODE_FAILED_TO_PACK_REPLY, 53668, Error
#define XEVENT_ASKDC_CODE_FAILED_TO_PACK_REPLY 0xC000D1A4

// XEVENT_ASKDC_FAILED_TO_GET_USER_ID_FOR_PASSPORT_ID, 53669, Error
#define XEVENT_ASKDC_FAILED_TO_GET_USER_ID_FOR_PASSPORT_ID 0xC000D1A5

// XEVENT_ASKDC_FAILED_TO_GET_GAMERTAG_BY_USER_ID, 53672, Error
#define XEVENT_ASKDC_FAILED_TO_GET_GAMERTAG_BY_USER_ID 0xC000D1A8

// XEVENT_ASKDC_FAILED_TO_LOAD_ECHO_DATA_KEY, 53675, Error
#define XEVENT_ASKDC_FAILED_TO_LOAD_ECHO_DATA_KEY 0xC000D1AB

// XEVENT_ASKDC_BAD_PARAMETER_4, 53676, Error
#define XEVENT_ASKDC_BAD_PARAMETER_4 0xC000D1AC

// XEVENT_ASKDC_DOS_CACHE_TOO_SMALL, 54250, Error
#define XEVENT_ASKDC_DOS_CACHE_TOO_SMALL 0xC000D3EA

// XEVENT_ASKDC_DOS_CACHE_TOO_SMALL_1, 54251, Error
#define XEVENT_ASKDC_DOS_CACHE_TOO_SMALL_1 0xC000D3EB

// XEVENT_ASKDC_REGISTER_FAILURE, 54252, Error
#define XEVENT_ASKDC_REGISTER_FAILURE 0xC000D3EC

// XEVENT_ASKDC_REGISTER_FAILURE_1, 54253, Error
#define XEVENT_ASKDC_REGISTER_FAILURE_1 0xC000D3ED

// XEVENT_ASKDC_REGISTER_FAILURE_2, 54254, Error
#define XEVENT_ASKDC_REGISTER_FAILURE_2 0xC000D3EE

// XEVENT_ASKDC_REGISTER_FAILURE_3, 54255, Error
#define XEVENT_ASKDC_REGISTER_FAILURE_3 0xC000D3EF

// XEVENT_KDC_CONFIG_6, 54256, Error
#define XEVENT_KDC_CONFIG_6 0xC000D3F0

// XEVENT_ASKDC_INIT_FAILURE, 54257, Error
#define XEVENT_ASKDC_INIT_FAILURE 0xC000D3F1

// XEVENT_ASKDC_INIT_FAILURE_1, 54258, Error
#define XEVENT_ASKDC_INIT_FAILURE_1 0xC000D3F2

// XEVENT_ASKDC_INIT_FAILURE_2, 54259, Error
#define XEVENT_ASKDC_INIT_FAILURE_2 0xC000D3F3

// XEVENT_ASKDC_INIT_FAILURE_3, 54260, Error
#define XEVENT_ASKDC_INIT_FAILURE_3 0xC000D3F4

// XEVENT_ASKDC_INIT_FAILURE_4, 54261, Error
#define XEVENT_ASKDC_INIT_FAILURE_4 0xC000D3F5

// XEVENT_DEPRACATED_ASKDC_INIT_FAILURE_5, 54262, Error
#define XEVENT_DEPRACATED_ASKDC_INIT_FAILURE_5 0xC000D3F6

// XEVENT_ASKDC_INIT_WARNING, 54263, Warning
#define XEVENT_ASKDC_INIT_WARNING 0x8000D3F7

// XEVENT_ASKDC_INIT_WARNING_1, 54264, Warning
#define XEVENT_ASKDC_INIT_WARNING_1 0x8000D3F8

// XEVENT_ASKDC_INIT_WARNING_2, 54265, Warning
#define XEVENT_ASKDC_INIT_WARNING_2 0x8000D3F9

// XEVENT_ASKDC_INIT_WARNING_3, 54266, Warning
#define XEVENT_ASKDC_INIT_WARNING_3 0x8000D3FA

// XEVENT_ASKDC_DECRYPTION_FAILED, 54267, Error
#define XEVENT_ASKDC_DECRYPTION_FAILED 0xC000D3FB

// XEVENT_KDC_CONFIG_18, 54268, Warning
#define XEVENT_KDC_CONFIG_18 0x8000D3FC

// XEVENT_ASKDC_INVALID_PASSPORT_KEY_VERSION, 54269, Error
#define XEVENT_ASKDC_INVALID_PASSPORT_KEY_VERSION 0xC000D3FD

// XEVENT_DEPRACATED_KDC_CONFIG_20, 54270, Error
#define XEVENT_DEPRACATED_KDC_CONFIG_20 0xC000D3FE

// XEVENT_ASKDC_SET_PASSPORT_KEY_VERSION, 54271, Error
#define XEVENT_ASKDC_SET_PASSPORT_KEY_VERSION 0xC000D3FF

// XEVENT_KDC_CONFIG_22, 54272, Error
#define XEVENT_KDC_CONFIG_22 0xC000D400

// XEVENT_ASKDC_TOO_MANY_USER_KEY_VERSIONS, 54273, Error
#define XEVENT_ASKDC_TOO_MANY_USER_KEY_VERSIONS 0xC000D401

// XEVENT_KDC_CONFIG_24, 54274, Error
#define XEVENT_KDC_CONFIG_24 0xC000D402

// XEVENT_ASKDC_FAILED_TO_INITIALIZE_PASSPORT, 54368, Error
#define XEVENT_ASKDC_FAILED_TO_INITIALIZE_PASSPORT 0xC000D460

// XEVENT_ASKDC_INIT_FAILURE_6, 54372, Error
#define XEVENT_ASKDC_INIT_FAILURE_6 0xC000D464

// XEVENT_ASKDC_CRYPTO_FAILURE, 54373, Error
#define XEVENT_ASKDC_CRYPTO_FAILURE 0xC000D465

// XEVENT_ASKDC_DOS_REPLAY, 54650, Warning
#define XEVENT_ASKDC_DOS_REPLAY 0x8000D57A

// XEVENT_KDC_HACK_1, 54651, Warning
#define XEVENT_KDC_HACK_1 0x8000D57B

// XEVENT_KDC_HACK_2, 54652, Warning
#define XEVENT_KDC_HACK_2 0x8000D57C

// XEVENT_ASKDC_PPA_PADATA_MISSING, 54653, Warning
#define XEVENT_ASKDC_PPA_PADATA_MISSING 0x8000D57D

// XEVENT_ASKDC_BAD_CLIENT_NAME, 54654, Warning
#define XEVENT_ASKDC_BAD_CLIENT_NAME 0x8000D57E

// XEVENT_KDC_HACK_5, 54655, Warning
#define XEVENT_KDC_HACK_5 0x8000D57F

// XEVENT_ASKDC_HACK_INVALID_PRE_AUTH_TYPE, 54702, Warning
#define XEVENT_ASKDC_HACK_INVALID_PRE_AUTH_TYPE 0x8000D5AE

// XEVENT_ASKDC_HACK_MALFORMED_PRE_AUTH, 54703, Warning
#define XEVENT_ASKDC_HACK_MALFORMED_PRE_AUTH 0x8000D5AF

// XEVENT_ASKDC_HACK_FAILED_TO_CRACK_PASSPORT_TICKET, 54704, Warning
#define XEVENT_ASKDC_HACK_FAILED_TO_CRACK_PASSPORT_TICKET 0x8000D5B0

// XEVENT_ASKDC_HACK_INVALID_REQUEST, 54705, Warning
#define XEVENT_ASKDC_HACK_INVALID_REQUEST 0x8000D5B1

// XEVENT_ASKDC_HACK_DOS_ATTACK, 54707, Warning
#define XEVENT_ASKDC_HACK_DOS_ATTACK 0x8000D5B3

// XEVENT_ASKDC_HACK_MALFORMED_PRE_AUTH_1, 54715, Warning
#define XEVENT_ASKDC_HACK_MALFORMED_PRE_AUTH_1 0x8000D5BB

// XEVENT_ASKDC_UNKNOWN_SERVER_PRINCIPAL, 54716, Error
#define XEVENT_ASKDC_UNKNOWN_SERVER_PRINCIPAL 0xC000D5BC

// XEVENT_ASKDC_REGISTER_SUCCESS, 54750, Info
#define XEVENT_ASKDC_REGISTER_SUCCESS 0x4000D5DE

// XEVENT_ASKDC_REGISTER_SUCCESS_1, 54751, Info
#define XEVENT_ASKDC_REGISTER_SUCCESS_1 0x4000D5DF

// XEVENT_ASKDC_INIT_SUCCESS, 54752, Info
#define XEVENT_ASKDC_INIT_SUCCESS 0x4000D5E0

// XEVENT_ASKDC_TERM_SUCCESS, 54753, Info
#define XEVENT_ASKDC_TERM_SUCCESS 0x4000D5E1

// XEVENT_ASKDC_RELOAD_SUCCESS, 54754, Info
#define XEVENT_ASKDC_RELOAD_SUCCESS 0x4000D5E2

// XEVENT_DEPRACATED_ASKDC_PPA_LOADING_INFO, 54755, Info
#define XEVENT_DEPRACATED_ASKDC_PPA_LOADING_INFO 0x4000D5E3

// XEVENT_DEPRACATED_ASKDC_PPA_LOADING_INFO_1, 54756, Info
#define XEVENT_DEPRACATED_ASKDC_PPA_LOADING_INFO_1 0x4000D5E4

// XEVENT_KDC_INFO_7, 54757, Info
#define XEVENT_KDC_INFO_7 0x4000D5E5
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\events\obj\billing.h ===
// XEVENT_XCBK_NOTIFY_KEY_NOT_FOUND_IN_MESSAGE, 15000, Error
#define XEVENT_XCBK_NOTIFY_KEY_NOT_FOUND_IN_MESSAGE 0xC0003A98

// XEVENT_XCBK_NOTIFY_SETTING_NOT_FOUND, 15001, Error
#define XEVENT_XCBK_NOTIFY_SETTING_NOT_FOUND 0xC0003A99

// XEVENT_XCBK_NOTIFY_UNAUTHORIZED_REQUEST, 15002, Error
#define XEVENT_XCBK_NOTIFY_UNAUTHORIZED_REQUEST 0xC0003A9A

// XEVENT_XCBK_NOTIFY_UNKNOWN_ERROR, 15003, Error
#define XEVENT_XCBK_NOTIFY_UNKNOWN_ERROR 0xC0003A9B

// XEVENT_PASSPORT_DELETE_CREDENTIAL_ERROR, 15004, Error
#define XEVENT_PASSPORT_DELETE_CREDENTIAL_ERROR 0xC0003A9C

// XEVENT_PASSPORT_ENUM_CREDENTIALS_BY_NAME_ERROR, 15005, Error
#define XEVENT_PASSPORT_ENUM_CREDENTIALS_BY_NAME_ERROR 0xC0003A9D

// XEVENT_PASSPORT_FORCE_CREDENTIAL_RENAME_ERROR, 15006, Error
#define XEVENT_PASSPORT_FORCE_CREDENTIAL_RENAME_ERROR 0xC0003A9E

// XEVENT_USER_PURCHASE_NOT_ELIGIBLE_FOR_FREE_GAMERTAG_CHANGE, 15007, Error
#define XEVENT_USER_PURCHASE_NOT_ELIGIBLE_FOR_FREE_GAMERTAG_CHANGE 0xC0003A9F

// XEVENT_XCBK_NOTIFY_BILLING_NOTIFICATION_ADD_FAILURE, 15015, Error
#define XEVENT_XCBK_NOTIFY_BILLING_NOTIFICATION_ADD_FAILURE 0xC0003AA7

// XEVENT_XCBK_NOTIFY_SUBSCRIPTION_NOTIFICATION_ADD_FAILURE, 15016, Error
#define XEVENT_XCBK_NOTIFY_SUBSCRIPTION_NOTIFICATION_ADD_FAILURE 0xC0003AA8

// XEVENT_XCBK_NOTIFY_SUBSCRIPTION_NOTIFICATION_ACCOUNT_MISMATCH, 15017, Error
#define XEVENT_XCBK_NOTIFY_SUBSCRIPTION_NOTIFICATION_ACCOUNT_MISMATCH 0xC0003AA9

// XEVENT_CTP_TRANSACTIONSERVICE_UNKNOWN_ERROR, 15008, Error
#define XEVENT_CTP_TRANSACTIONSERVICE_UNKNOWN_ERROR 0xC0003AA0

// XEVENT_CTP_TRANSACTIONSERVICE_COMMUNICATION_ERROR, 15009, Error
#define XEVENT_CTP_TRANSACTIONSERVICE_COMMUNICATION_ERROR 0xC0003AA1

// XEVENT_CTP_NON_USER_EXCEPTION, 15010, Error
#define XEVENT_CTP_NON_USER_EXCEPTION 0xC0003AA2

// XEVENT_CTP_TRANSACTIONSERVICE_VALIDATION_PATH, 15011, Error
#define XEVENT_CTP_TRANSACTIONSERVICE_VALIDATION_PATH 0xC0003AA3

// XEVENT_CTP_TRANSACTIONSERVICE_INVALID_SUBSCRIPTION_RESPONSE, 15012, Warning
#define XEVENT_CTP_TRANSACTIONSERVICE_INVALID_SUBSCRIPTION_RESPONSE 0x80003AA4

// XEVENT_CTP_TRANSACTIONSERVICE_INVALIDARGS, 15013, Error
#define XEVENT_CTP_TRANSACTIONSERVICE_INVALIDARGS 0xC0003AA5

// XEVENT_PREVIEW_PRODUCT_PURCHASE_MEDIA_TYPE_MISMATCH, 15014, Error
#define XEVENT_PREVIEW_PRODUCT_PURCHASE_MEDIA_TYPE_MISMATCH 0xC0003AA6

// XEVENT_CTP_PARTNER_CONFIGURATION_ERROR, 15018, Error
#define XEVENT_CTP_PARTNER_CONFIGURATION_ERROR 0xC0003AAA

// XEVENT_CATALOG_MEDIACLASS_SETTING_MALFORMATTED, 49991, Error
#define XEVENT_CATALOG_MEDIACLASS_SETTING_MALFORMATTED 0xC000C347

// XEVENT_OFFER_REDUCED_PRICECHECK_MALFORMATTED, 49992, Error
#define XEVENT_OFFER_REDUCED_PRICECHECK_MALFORMATTED 0xC000C348

// XEVENT_VIDEOCATALOG_SETTINGS_MALFORMATTED, 49993, Error
#define XEVENT_VIDEOCATALOG_SETTINGS_MALFORMATTED 0xC000C349

// XEVENT_STORECATALOG_DEFAULT_SETTINGS_MISSING, 49994, Error
#define XEVENT_STORECATALOG_DEFAULT_SETTINGS_MISSING 0xC000C34A

// XEVENT_STORECATALOG_DEFAULT_SETTINGS_MALFORMATTED_1, 49995, Error
#define XEVENT_STORECATALOG_DEFAULT_SETTINGS_MALFORMATTED_1 0xC000C34B

// XEVENT_STORECATALOG_DEFAULT_SETTINGS_MALFORMATTED_2, 49996, Error
#define XEVENT_STORECATALOG_DEFAULT_SETTINGS_MALFORMATTED_2 0xC000C34C

// XEVENT_STOREMEDIATYPECATALOG_OVERRIDE_SETTINGS_MALFORMATTED_1, 49997, Error
#define XEVENT_STOREMEDIATYPECATALOG_OVERRIDE_SETTINGS_MALFORMATTED_1 0xC000C34D

// XEVENT_STOREMEDIATYPECATALOG_OVERRIDE_SETTINGS_MALFORMATTED_2, 49998, Error
#define XEVENT_STOREMEDIATYPECATALOG_OVERRIDE_SETTINGS_MALFORMATTED_2 0xC000C34E

// XEVENT_STOREMEDIATYPECATALOG_OVERRIDE_SETTINGS_MALFORMATTED_3, 49999, Error
#define XEVENT_STOREMEDIATYPECATALOG_OVERRIDE_SETTINGS_MALFORMATTED_3 0xC000C34F

// XEVENT_CERT_GRABBER_GET_CERT_FAILURE, 40000, Error
#define XEVENT_CERT_GRABBER_GET_CERT_FAILURE 0xC0009C40

// XEVENT_CERT_GRABBER_PARSE_CERT_FAILURE, 40001, Error
#define XEVENT_CERT_GRABBER_PARSE_CERT_FAILURE 0xC0009C41

// XEVENT_CERT_GRABBER_UPDATE_CERT_FAILURE, 40002, Error
#define XEVENT_CERT_GRABBER_UPDATE_CERT_FAILURE 0xC0009C42

// XEVENT_PLUGIN_CERTGRABBER_CERTIFICATE_UPDATED, 40003, Info
#define XEVENT_PLUGIN_CERTGRABBER_CERTIFICATE_UPDATED 0x40009C43

// XEVENT_OFFER_ID_LOOKUP_FAILURE, 40004, Error
#define XEVENT_OFFER_ID_LOOKUP_FAILURE 0xC0009C44

// XEVENT_REINSTATE_DELAYED_CANCEL_FAILURE, 40005, Error
#define XEVENT_REINSTATE_DELAYED_CANCEL_FAILURE 0xC0009C45

// XEVENT_XCBK_UNEXPECTED_REQUEST, 50426, Error
#define XEVENT_XCBK_UNEXPECTED_REQUEST 0xC000C4FA

// XEVENT_XCBK_UNKNOWN_ERROR, 50429, Error
#define XEVENT_XCBK_UNKNOWN_ERROR 0xC000C4FD

// XEVENT_XCBK_UNKNOWN_ERROR_1, 50431, Error
#define XEVENT_XCBK_UNKNOWN_ERROR_1 0xC000C4FF

// XEVENT_XCBK_UNEXPECTED_REQUEST_1, 50434, Error
#define XEVENT_XCBK_UNEXPECTED_REQUEST_1 0xC000C502

// XEVENT_XCBK_UNKNOWN_ERROR_2, 50435, Error
#define XEVENT_XCBK_UNKNOWN_ERROR_2 0xC000C503

// XEVENT_XCBK_UNKNOWN_ERROR_3, 50436, Error
#define XEVENT_XCBK_UNKNOWN_ERROR_3 0xC000C504

// XEVENT_XCBK_UNKNOWN_ERROR_4, 50437, Error
#define XEVENT_XCBK_UNKNOWN_ERROR_4 0xC000C505

// XEVENT_MC_BAD_PARAMETER_3, 50438, Error
#define XEVENT_MC_BAD_PARAMETER_3 0xC000C506

// XEVENT_MC_APPLICATION_ERROR_8, 50440, Error
#define XEVENT_MC_APPLICATION_ERROR_8 0xC000C508

// XEVENT_MC_SPS_UNRECOGNIZED_ERROR_1, 50442, Error
#define XEVENT_MC_SPS_UNRECOGNIZED_ERROR_1 0xC000C50A

// XEVENT_FAIL_FAST_EXIT, 50455, Info
#define XEVENT_FAIL_FAST_EXIT 0x4000C517

// XEVENT_FAIL_FAST_ENTER, 50456, Error
#define XEVENT_FAIL_FAST_ENTER 0xC000C518

// XEVENT_DEPRECATED_BILLING_CODE_49, 50474, Error
#define XEVENT_DEPRECATED_BILLING_CODE_49 0xC000C52A

// XEVENT_DEPRECATED_BILLING_CODE_50, 50475, Error
#define XEVENT_DEPRECATED_BILLING_CODE_50 0xC000C52B

// XEVENT_DEPRECATED_BILLING_CODE_65, 50490, Error
#define XEVENT_DEPRECATED_BILLING_CODE_65 0xC000C53A

// XEVENT_UNKOWN_OFFER_TYPE, 50493, Error
#define XEVENT_UNKOWN_OFFER_TYPE 0xC000C53D

// XEVENT_UNKOWN_PAYMENT_TYPE, 50494, Error
#define XEVENT_UNKOWN_PAYMENT_TYPE 0xC000C53E

// XEVENT_GEOFENCE_COMPONENT_RETURNED_NULL, 50495, Warning
#define XEVENT_GEOFENCE_COMPONENT_RETURNED_NULL 0x8000C53F

// XEVENT_GEOFENCE_COMPONENT_RETURNED_EXCEPTION, 50496, Error
#define XEVENT_GEOFENCE_COMPONENT_RETURNED_EXCEPTION 0xC000C540

// XEVENT_DEPRECATED_GET_MACHINE_PART_NUMBER_FAILED, 50497, Error
#define XEVENT_DEPRECATED_GET_MACHINE_PART_NUMBER_FAILED 0xC000C541

// XEVENT_DEPRECATED_TRANSFER_MACHINE_LICENSES_FAILED, 50498, Error
#define XEVENT_DEPRECATED_TRANSFER_MACHINE_LICENSES_FAILED 0xC000C542

// XEVENT_DEPRECATED_TRANSFER_MACHINE_LICENSES_ASSET_CHECK_FAILED, 50499, Error
#define XEVENT_DEPRECATED_TRANSFER_MACHINE_LICENSES_ASSET_CHECK_FAILED 0xC000C543

// XEVENT_GET_PUID_FROM_MEMBERNAME_ERROR, 50500, Error
#define XEVENT_GET_PUID_FROM_MEMBERNAME_ERROR 0xC000C544

// XEVENT_XCBK_UNKNOWN_SERVICE_COMPONENT, 50526, Error
#define XEVENT_XCBK_UNKNOWN_SERVICE_COMPONENT 0xC000C55E

// XEVENT_MC_SPS_TIMEOUT, 50527, Error
#define XEVENT_MC_SPS_TIMEOUT 0xC000C55F

// XEVENT_MUSICNET_ADD_SUBSCRIPTION_OFFER_FAILED, 50534, Error
#define XEVENT_MUSICNET_ADD_SUBSCRIPTION_OFFER_FAILED 0xC000C566

// XEVENT_BDK_BLOCKING_SCS_APIS_BAD_MULTISETTING, 50535, Error
#define XEVENT_BDK_BLOCKING_SCS_APIS_BAD_MULTISETTING 0xC000C567

// XEVENT_CATALOG_MUSIC_MNETID_INVALID, 50536, Error
#define XEVENT_CATALOG_MUSIC_MNETID_INVALID 0xC000C568

// XEVENT_CATALOG_QUERY_ERROR, 50537, Error
#define XEVENT_CATALOG_QUERY_ERROR 0xC000C569

// XEVENT_XCBK_DATABASE_UNAVAILABLE, 50550, Error
#define XEVENT_XCBK_DATABASE_UNAVAILABLE 0xC000C576

// XEVENT_XCBK_DATABASE_UNAVAILABLE_1, 50551, Error
#define XEVENT_XCBK_DATABASE_UNAVAILABLE_1 0xC000C577

// XEVENT_MC_SPS_OFFER_MISCONFIGURATION_3, 50553, Error
#define XEVENT_MC_SPS_OFFER_MISCONFIGURATION_3 0xC000C579

// XEVENT_MC_SPS_OFFER_MISCONFIGURATION_4, 50554, Error
#define XEVENT_MC_SPS_OFFER_MISCONFIGURATION_4 0xC000C57A

// XEVENT_MC_SPS_OFFER_MISCONFIGURATION_5, 50555, Error
#define XEVENT_MC_SPS_OFFER_MISCONFIGURATION_5 0xC000C57B

// XEVENT_MC_BILLING_PROVIDER_INIT_ERROR, 50556, Error
#define XEVENT_MC_BILLING_PROVIDER_INIT_ERROR 0xC000C57C

// XEVENT_UODB_ACCESS_ERROR, 50567, Error
#define XEVENT_UODB_ACCESS_ERROR 0xC000C587

// XEVENT_MC_SPS_IS_OFF, 50568, Warning
#define XEVENT_MC_SPS_IS_OFF 0x8000C588

// XEVENT_MC_BILLING_PROVIDER_INIT_ERROR_1, 50582, Error
#define XEVENT_MC_BILLING_PROVIDER_INIT_ERROR_1 0xC000C596

// XEVENT_XCBK_SUBSCRIPTION_EXPIRATION_MESSAGE_FAILED, 50583, Error
#define XEVENT_XCBK_SUBSCRIPTION_EXPIRATION_MESSAGE_FAILED 0xC000C597

// XEVENT_DEPRECATED_BILLING_OFFERING_GEOAPI_INIT_FAILED, 50588, Error
#define XEVENT_DEPRECATED_BILLING_OFFERING_GEOAPI_INIT_FAILED 0xC000C59C

// XEVENT_XUACS_GRADUATE_USER_UPDATE_ERROR, 50679, Error
#define XEVENT_XUACS_GRADUATE_USER_UPDATE_ERROR 0xC000C5F7

// XEVENT_XUACS_GRADUATE_USER_QUEUE_ERROR, 50680, Error
#define XEVENT_XUACS_GRADUATE_USER_QUEUE_ERROR 0xC000C5F8

// XEVENT_XUACS_GRADUATE_USER_QUEUE_TIMER_ERROR, 50681, Error
#define XEVENT_XUACS_GRADUATE_USER_QUEUE_TIMER_ERROR 0xC000C5F9

// XEVENT_XUACS_GRADUATE_USER_DEQUEUE_ERROR, 50682, Error
#define XEVENT_XUACS_GRADUATE_USER_DEQUEUE_ERROR 0xC000C5FA

// XEVENT_GRADUATE_USER_QUEUE_GET_PENDING_ERROR, 50687, Error
#define XEVENT_GRADUATE_USER_QUEUE_GET_PENDING_ERROR 0xC000C5FF

// XEVENT_MC_CANNOT_COMPLETE_PURCHASE_COMMIT, 50705, Info
#define XEVENT_MC_CANNOT_COMPLETE_PURCHASE_COMMIT 0x4000C611

// XEVENT_MC_SPS_UNRECOGNIZED_ERROR, 50825, Error
#define XEVENT_MC_SPS_UNRECOGNIZED_ERROR 0xC000C689

// XEVENT_COMMON_CODE_1, 50826, Error
#define XEVENT_COMMON_CODE_1 0xC000C68A

// XEVENT_COMMON_CODE_2, 50827, Error
#define XEVENT_COMMON_CODE_2 0xC000C68B

// XEVENT_MC_SPS_INVALID_SUBSCRIPTION_ID, 50828, Error
#define XEVENT_MC_SPS_INVALID_SUBSCRIPTION_ID 0xC000C68C

// XEVENT_MC_SPS_INELIGIBLE_FOR_OFFER, 50829, Error
#define XEVENT_MC_SPS_INELIGIBLE_FOR_OFFER 0xC000C68D

// XEVENT_MC_SPS_INELIGIBLE_FOR_OFFER_1, 50830, Error
#define XEVENT_MC_SPS_INELIGIBLE_FOR_OFFER_1 0xC000C68E

// XEVENT_MC_SPS_INVALID_PUID, 50831, Error
#define XEVENT_MC_SPS_INVALID_PUID 0xC000C68F

// XEVENT_COMMON_CODE_7, 50832, Error
#define XEVENT_COMMON_CODE_7 0xC000C690

// XEVENT_COMMON_CODE_8, 50833, Error
#define XEVENT_COMMON_CODE_8 0xC000C691

// XEVENT_COMMON_CODE_9, 50834, Error
#define XEVENT_COMMON_CODE_9 0xC000C692

// XEVENT_COMMON_CODE_10, 50835, Error
#define XEVENT_COMMON_CODE_10 0xC000C693

// XEVENT_COMMON_CODE_11, 50836, Error
#define XEVENT_COMMON_CODE_11 0xC000C694

// XEVENT_MC_SPS_TOO_MANY_SERVICE_COMPONENTS, 50837, Error
#define XEVENT_MC_SPS_TOO_MANY_SERVICE_COMPONENTS 0xC000C695

// XEVENT_COMMON_CODE_13, 50838, Error
#define XEVENT_COMMON_CODE_13 0xC000C696

// XEVENT_COMMON_CODE_14, 50839, Error
#define XEVENT_COMMON_CODE_14 0xC000C697

// XEVENT_COMMON_CODE_15, 50840, Error
#define XEVENT_COMMON_CODE_15 0xC000C698

// XEVENT_MC_CANNOT_RECORD_TRANSACTION, 50841, Error
#define XEVENT_MC_CANNOT_RECORD_TRANSACTION 0xC000C699

// XEVENT_MC_CANNOT_RECORD_TRANSACTION_1, 50842, Error
#define XEVENT_MC_CANNOT_RECORD_TRANSACTION_1 0xC000C69A

// XEVENT_MC_CANNOT_RECORD_TRANSACTION_2, 50843, Error
#define XEVENT_MC_CANNOT_RECORD_TRANSACTION_2 0xC000C69B

// XEVENT_MC_CANNOT_RECORD_TRANSACTION_3, 50844, Error
#define XEVENT_MC_CANNOT_RECORD_TRANSACTION_3 0xC000C69C

// XEVENT_COMMON_CODE_123, 50948, Error
#define XEVENT_COMMON_CODE_123 0xC000C704

// XEVENT_COMMON_CODE_124, 50949, Error
#define XEVENT_COMMON_CODE_124 0xC000C705

// XEVENT_COMMON_CODE_125, 50950, Error
#define XEVENT_COMMON_CODE_125 0xC000C706

// XEVENT_COMMON_CODE_126, 50951, Error
#define XEVENT_COMMON_CODE_126 0xC000C707

// XEVENT_COMMON_CODE_127, 50952, Error
#define XEVENT_COMMON_CODE_127 0xC000C708

// XEVENT_COMMON_CODE_128, 50953, Error
#define XEVENT_COMMON_CODE_128 0xC000C709

// XEVENT_COMMON_CODE_129, 50954, Error
#define XEVENT_COMMON_CODE_129 0xC000C70A

// XEVENT_COMMON_CODE_130, 50955, Error
#define XEVENT_COMMON_CODE_130 0xC000C70B

// XEVENT_COMMON_CODE_131, 50956, Error
#define XEVENT_COMMON_CODE_131 0xC000C70C

// XEVENT_COMMON_CODE_132, 50957, Error
#define XEVENT_COMMON_CODE_132 0xC000C70D

// XEVENT_COMMON_CODE_134, 50959, Error
#define XEVENT_COMMON_CODE_134 0xC000C70F

// XEVENT_COMMON_CODE_135, 50960, Error
#define XEVENT_COMMON_CODE_135 0xC000C710

// XEVENT_COMMON_CODE_136, 50961, Error
#define XEVENT_COMMON_CODE_136 0xC000C711

// XEVENT_COMMON_CODE_137, 50962, Error
#define XEVENT_COMMON_CODE_137 0xC000C712

// XEVENT_COMMON_CODE_138, 50963, Error
#define XEVENT_COMMON_CODE_138 0xC000C713

// XEVENT_COMMON_CODE_139, 50964, Error
#define XEVENT_COMMON_CODE_139 0xC000C714

// XEVENT_COMMON_CODE_140, 50965, Error
#define XEVENT_COMMON_CODE_140 0xC000C715

// XEVENT_COMMON_CODE_141, 50966, Error
#define XEVENT_COMMON_CODE_141 0xC000C716

// XEVENT_COMMON_CODE_142, 50967, Error
#define XEVENT_COMMON_CODE_142 0xC000C717

// XEVENT_COMMON_CODE_143, 50968, Error
#define XEVENT_COMMON_CODE_143 0xC000C718

// XEVENT_COMMON_CODE_144, 50969, Error
#define XEVENT_COMMON_CODE_144 0xC000C719

// XEVENT_COMMON_CODE_145, 50970, Error
#define XEVENT_COMMON_CODE_145 0xC000C71A

// XEVENT_COMMON_CODE_201, 51026, Error
#define XEVENT_COMMON_CODE_201 0xC000C752

// XEVENT_COMMON_CODE_202, 51027, Error
#define XEVENT_COMMON_CODE_202 0xC000C753

// XEVENT_COMMON_CODE_203, 51028, Error
#define XEVENT_COMMON_CODE_203 0xC000C754

// XEVENT_COMMON_CODE_204, 51029, Error
#define XEVENT_COMMON_CODE_204 0xC000C755

// XEVENT_COMMON_COMM_0, 51225, Error
#define XEVENT_COMMON_COMM_0 0xC000C819

// XEVENT_COMMON_COMM_1, 51226, Error
#define XEVENT_COMMON_COMM_1 0xC000C81A

// XEVENT_COMMON_COMM_2, 51227, Error
#define XEVENT_COMMON_COMM_2 0xC000C81B

// XEVENT_MC_SPS_PROVISIONING_FAILURE, 51228, Error
#define XEVENT_MC_SPS_PROVISIONING_FAILURE 0xC000C81C

// XEVENT_COMMON_COMM_4, 51229, Error
#define XEVENT_COMMON_COMM_4 0xC000C81D

// XEVENT_COMMON_COMM_5, 51230, Error
#define XEVENT_COMMON_COMM_5 0xC000C81E

// XEVENT_COMMON_CONFIG_0, 51325, Warning
#define XEVENT_COMMON_CONFIG_0 0x8000C87D

// XEVENT_COMMON_CONFIG_1, 51326, Error
#define XEVENT_COMMON_CONFIG_1 0xC000C87E

// XEVENT_COMMON_CONFIG_2, 51327, Error
#define XEVENT_COMMON_CONFIG_2 0xC000C87F

// XEVENT_COMMON_CONFIG_3, 51328, Error
#define XEVENT_COMMON_CONFIG_3 0xC000C880

// XEVENT_COMMON_CONFIG_4, 51329, Error
#define XEVENT_COMMON_CONFIG_4 0xC000C881

// XEVENT_COMMON_CONFIG_5, 51330, Error
#define XEVENT_COMMON_CONFIG_5 0xC000C882

// XEVENT_COMMON_CONFIG_6, 51331, Error
#define XEVENT_COMMON_CONFIG_6 0xC000C883

// XEVENT_MC_BAD_CONFIG_DATA, 51332, Error
#define XEVENT_MC_BAD_CONFIG_DATA 0xC000C884

// XEVENT_COMMON_CONFIG_8, 51333, Error
#define XEVENT_COMMON_CONFIG_8 0xC000C885

// XEVENT_COMMON_CONFIG_9, 51334, Error
#define XEVENT_COMMON_CONFIG_9 0xC000C886

// XEVENT_COMMON_CONFIG_10, 51335, Error
#define XEVENT_COMMON_CONFIG_10 0xC000C887

// XEVENT_COMMON_CONFIG_11, 51336, Error
#define XEVENT_COMMON_CONFIG_11 0xC000C888

// XEVENT_MC_BAD_CONFIG_DATA_1, 51337, Error
#define XEVENT_MC_BAD_CONFIG_DATA_1 0xC000C889

// XEVENT_MC_BAD_CONFIG_DATA_2, 51338, Error
#define XEVENT_MC_BAD_CONFIG_DATA_2 0xC000C88A

// XEVENT_COMMON_CONFIG_14, 51339, Error
#define XEVENT_COMMON_CONFIG_14 0xC000C88B

// XEVENT_COMMON_CONFIG_15, 51340, Error
#define XEVENT_COMMON_CONFIG_15 0xC000C88C

// XEVENT_MC_BAD_CONFIG_DATA_3, 51341, Error
#define XEVENT_MC_BAD_CONFIG_DATA_3 0xC000C88D

// XEVENT_COMMON_CONFIG_17, 51342, Error
#define XEVENT_COMMON_CONFIG_17 0xC000C88E

// XEVENT_COMMON_CONFIG_18, 51343, Error
#define XEVENT_COMMON_CONFIG_18 0xC000C88F

// XEVENT_MC_SPS_INVALID_OFFER_ID, 51344, Error
#define XEVENT_MC_SPS_INVALID_OFFER_ID 0xC000C890

// XEVENT_MC_SPS_INVALID_OFFER_ID_1, 51345, Error
#define XEVENT_MC_SPS_INVALID_OFFER_ID_1 0xC000C891

// XEVENT_MC_SPS_QUEUE_ERROR, 51346, Error
#define XEVENT_MC_SPS_QUEUE_ERROR 0xC000C892

// XEVENT_MC_SPS_QUEUE_ERROR_1, 51347, Error
#define XEVENT_MC_SPS_QUEUE_ERROR_1 0xC000C893

// XEVENT_MC_SPS_QUEUE_ERROR_2, 51348, Error
#define XEVENT_MC_SPS_QUEUE_ERROR_2 0xC000C894

// XEVENT_COMMON_CONFIG_24, 51349, Error
#define XEVENT_COMMON_CONFIG_24 0xC000C895

// XEVENT_COMMON_CONFIG_25, 51350, Warning
#define XEVENT_COMMON_CONFIG_25 0x8000C896

// XEVENT_COMMON_CONFIG_26, 51351, Error
#define XEVENT_COMMON_CONFIG_26 0xC000C897

// XEVENT_COMMON_CONFIG_27, 51352, Error
#define XEVENT_COMMON_CONFIG_27 0xC000C898

// XEVENT_COMMON_CONFIG_28, 51353, Error
#define XEVENT_COMMON_CONFIG_28 0xC000C899

// XEVENT_COMMON_CONFIG_30, 51355, Error
#define XEVENT_COMMON_CONFIG_30 0xC000C89B

// XEVENT_COMMON_CONFIG_31, 51356, Error
#define XEVENT_COMMON_CONFIG_31 0xC000C89C

// XEVENT_QUEUE_FAILURE_AUTO_FIX, 51357, Error
#define XEVENT_QUEUE_FAILURE_AUTO_FIX 0xC000C89D

// XEVENT_COMMON_CONFIG_33, 51358, Error
#define XEVENT_COMMON_CONFIG_33 0xC000C89E

// XEVENT_COMMON_CONFIG_34, 51359, Error
#define XEVENT_COMMON_CONFIG_34 0xC000C89F

// XEVENT_COMMON_CONFIG_35, 51360, Error
#define XEVENT_COMMON_CONFIG_35 0xC000C8A0

// XEVENT_COMMON_CONFIG_36, 51361, Error
#define XEVENT_COMMON_CONFIG_36 0xC000C8A1

// XEVENT_COMMON_CONFIG_37, 51362, Error
#define XEVENT_COMMON_CONFIG_37 0xC000C8A2

// XEVENT_COMMON_CONFIG_38, 51363, Error
#define XEVENT_COMMON_CONFIG_38 0xC000C8A3

// XEVENT_COMMON_CONFIG_39, 51364, Error
#define XEVENT_COMMON_CONFIG_39 0xC000C8A4

// XEVENT_COMMON_CONFIG_40, 51365, Error
#define XEVENT_COMMON_CONFIG_40 0xC000C8A5

// XEVENT_COMMON_CONFIG_41, 51366, Error
#define XEVENT_COMMON_CONFIG_41 0xC000C8A6

// XEVENT_COMMON_CONFIG_42, 51367, Error
#define XEVENT_COMMON_CONFIG_42 0xC000C8A7

// XEVENT_COMMON_CONFIG_43, 51368, Error
#define XEVENT_COMMON_CONFIG_43 0xC000C8A8

// XEVENT_COMMON_CONFIG_44, 51369, Error
#define XEVENT_COMMON_CONFIG_44 0xC000C8A9

// XEVENT_COMMON_CONFIG_45, 51370, Error
#define XEVENT_COMMON_CONFIG_45 0xC000C8AA

// XEVENT_COMMON_CONFIG_46, 51371, Error
#define XEVENT_COMMON_CONFIG_46 0xC000C8AB

// XEVENT_COMMON_CONFIG_47, 51372, Error
#define XEVENT_COMMON_CONFIG_47 0xC000C8AC

// XEVENT_COMMON_CONFIG_48, 51373, Error
#define XEVENT_COMMON_CONFIG_48 0xC000C8AD

// XEVENT_COMMON_CONFIG_49, 51374, Warning
#define XEVENT_COMMON_CONFIG_49 0x8000C8AE

// XEVENT_COMMON_CONFIG_50, 51375, Warning
#define XEVENT_COMMON_CONFIG_50 0x8000C8AF

// XEVENT_MC_SPS_OFFER_MISCONFIGURATION, 51376, Error
#define XEVENT_MC_SPS_OFFER_MISCONFIGURATION 0xC000C8B0

// XEVENT_COMMON_CONFIG_52, 51377, Error
#define XEVENT_COMMON_CONFIG_52 0xC000C8B1

// XEVENT_COMMON_CONFIG_53, 51378, Error
#define XEVENT_COMMON_CONFIG_53 0xC000C8B2

// XEVENT_COMMON_CONFIG_54, 51379, Error
#define XEVENT_COMMON_CONFIG_54 0xC000C8B3

// XEVENT_COMMON_CONFIG_55, 51380, Error
#define XEVENT_COMMON_CONFIG_55 0xC000C8B4

// XEVENT_COMMON_CONFIG_56, 51381, Error
#define XEVENT_COMMON_CONFIG_56 0xC000C8B5

// XEVENT_COMMON_CONFIG_57, 51382, Error
#define XEVENT_COMMON_CONFIG_57 0xC000C8B6

// XEVENT_COMMON_CONFIG_58, 51383, Error
#define XEVENT_COMMON_CONFIG_58 0xC000C8B7

// XEVENT_COMMON_CONFIG_59, 51384, Error
#define XEVENT_COMMON_CONFIG_59 0xC000C8B8

// XEVENT_COMMON_CONFIG_60, 51385, Error
#define XEVENT_COMMON_CONFIG_60 0xC000C8B9

// XEVENT_COMMON_CONFIG_61, 51386, Error
#define XEVENT_COMMON_CONFIG_61 0xC000C8BA

// XEVENT_COMMON_CONFIG_62, 51387, Error
#define XEVENT_COMMON_CONFIG_62 0xC000C8BB

// XEVENT_COMMON_CONFIG_63, 51388, Error
#define XEVENT_COMMON_CONFIG_63 0xC000C8BC

// XEVENT_MC_SPS_OFFER_MISCONFIGURATION_1, 51389, Error
#define XEVENT_MC_SPS_OFFER_MISCONFIGURATION_1 0xC000C8BD

// XEVENT_COMMON_CONFIG_65, 51390, Error
#define XEVENT_COMMON_CONFIG_65 0xC000C8BE

// XEVENT_COMMON_CONFIG_66, 51391, Warning
#define XEVENT_COMMON_CONFIG_66 0x8000C8BF

// XEVENT_COMMON_CONFIG_67, 51392, Warning
#define XEVENT_COMMON_CONFIG_67 0x8000C8C0

// XEVENT_COMMON_CONFIG_68, 51393, Error
#define XEVENT_COMMON_CONFIG_68 0xC000C8C1

// XEVENT_COMMON_CONFIG_267, 51592, Error
#define XEVENT_COMMON_CONFIG_267 0xC000C988

// XEVENT_MC_SPS_OFFER_MISCONFIGURATION_2, 51594, Error
#define XEVENT_MC_SPS_OFFER_MISCONFIGURATION_2 0xC000C98A

// XEVENT_MC_AMBIGUOUS_OFFER_CONFIGURATION, 51673, Error
#define XEVENT_MC_AMBIGUOUS_OFFER_CONFIGURATION 0xC000C9D9

// XEVENT_COMMON_HACK_0, 52325, Warning
#define XEVENT_COMMON_HACK_0 0x8000CC65

// XEVENT_COMMON_HACK_1, 52326, Warning
#define XEVENT_COMMON_HACK_1 0x8000CC66

// XEVENT_COMMON_HACK_2, 52327, Warning
#define XEVENT_COMMON_HACK_2 0x8000CC67

// XEVENT_COMMON_HACK_3, 52328, Warning
#define XEVENT_COMMON_HACK_3 0x8000CC68

// XEVENT_COMMON_INFO_0, 52525, Info
#define XEVENT_COMMON_INFO_0 0x4000CD2D

// XEVENT_COMMON_INFO_1, 52526, Info
#define XEVENT_COMMON_INFO_1 0x4000CD2E

// XEVENT_COMMON_INFO_2, 52527, Info
#define XEVENT_COMMON_INFO_2 0x4000CD2F

// XEVENT_COMMON_INFO_3, 52528, Info
#define XEVENT_COMMON_INFO_3 0x4000CD30

// XEVENT_BILLING_SWITCH_USER_PASSPORT_QUEUE_DEQUEUE_ERROR, 62805, Error
#define XEVENT_BILLING_SWITCH_USER_PASSPORT_QUEUE_DEQUEUE_ERROR 0xC000F555

// XEVENT_BILLING_SWITCH_USER_PASSPORT_QUEUE_IMPERSONATION_ERROR, 62806, Error
#define XEVENT_BILLING_SWITCH_USER_PASSPORT_QUEUE_IMPERSONATION_ERROR 0xC000F556

// XEVENT_BILLING_SWITCH_USER_PASSPORT_QUEUE_TIMER_RESET_ERROR, 62807, Error
#define XEVENT_BILLING_SWITCH_USER_PASSPORT_QUEUE_TIMER_RESET_ERROR 0xC000F557

// XEVENT_BILLING_QUEUE_GET_PENDING_ERROR, 62819, Error
#define XEVENT_BILLING_QUEUE_GET_PENDING_ERROR 0xC000F563

// XEVENT_SWITCH_USER_PASSPORT_QUEUE_GET_PENDING_ERROR, 62821, Error
#define XEVENT_SWITCH_USER_PASSPORT_QUEUE_GET_PENDING_ERROR 0xC000F565

// XEVENT_COMMON_BILLING_CODE_0, 62825, Error
#define XEVENT_COMMON_BILLING_CODE_0 0xC000F569

// XEVENT_COMMON_BILLING_CODE_1, 62826, Error
#define XEVENT_COMMON_BILLING_CODE_1 0xC000F56A

// XEVENT_COMMON_BILLING_CODE_2, 62827, Error
#define XEVENT_COMMON_BILLING_CODE_2 0xC000F56B

// XEVENT_COMMON_BILLING_CODE_3, 62828, Error
#define XEVENT_COMMON_BILLING_CODE_3 0xC000F56C

// XEVENT_COMMON_BILLING_CODE_4, 62829, Error
#define XEVENT_COMMON_BILLING_CODE_4 0xC000F56D

// XEVENT_COMMON_BILLING_CODE_5, 62830, Error
#define XEVENT_COMMON_BILLING_CODE_5 0xC000F56E

// XEVENT_COMMON_BILLING_CODE_6, 62831, Error
#define XEVENT_COMMON_BILLING_CODE_6 0xC000F56F

// XEVENT_COMMON_BILLING_CODE_7, 62832, Error
#define XEVENT_COMMON_BILLING_CODE_7 0xC000F570

// XEVENT_COMMON_BILLING_CODE_8, 62833, Error
#define XEVENT_COMMON_BILLING_CODE_8 0xC000F571

// XEVENT_COMMON_BILLING_CODE_9, 62834, Error
#define XEVENT_COMMON_BILLING_CODE_9 0xC000F572

// XEVENT_COMMON_BILLING_CODE_10, 62835, Error
#define XEVENT_COMMON_BILLING_CODE_10 0xC000F573

// XEVENT_COMMON_BILLING_CODE_11, 62836, Error
#define XEVENT_COMMON_BILLING_CODE_11 0xC000F574

// XEVENT_COMMON_BILLING_CODE_12, 62837, Error
#define XEVENT_COMMON_BILLING_CODE_12 0xC000F575

// XEVENT_COMMON_BILLING_CODE_13, 62838, Error
#define XEVENT_COMMON_BILLING_CODE_13 0xC000F576

// XEVENT_COMMON_BILLING_CODE_14, 62839, Error
#define XEVENT_COMMON_BILLING_CODE_14 0xC000F577

// XEVENT_COMMON_BILLING_CODE_15, 62840, Error
#define XEVENT_COMMON_BILLING_CODE_15 0xC000F578

// XEVENT_COMMON_BILLING_CODE_16, 62841, Error
#define XEVENT_COMMON_BILLING_CODE_16 0xC000F579

// XEVENT_COMMON_BILLING_CODE_17, 62842, Error
#define XEVENT_COMMON_BILLING_CODE_17 0xC000F57A

// XEVENT_COMMON_BILLING_CODE_18, 62843, Error
#define XEVENT_COMMON_BILLING_CODE_18 0xC000F57B

// XEVENT_COMMON_BILLING_CODE_19, 62844, Error
#define XEVENT_COMMON_BILLING_CODE_19 0xC000F57C

// XEVENT_COMMON_BILLING_CODE_20, 62845, Error
#define XEVENT_COMMON_BILLING_CODE_20 0xC000F57D

// XEVENT_COMMON_BILLING_CODE_21, 62846, Error
#define XEVENT_COMMON_BILLING_CODE_21 0xC000F57E

// XEVENT_COMMON_BILLING_CODE_22, 62847, Error
#define XEVENT_COMMON_BILLING_CODE_22 0xC000F57F

// XEVENT_COMMON_BILLING_CODE_23, 62848, Error
#define XEVENT_COMMON_BILLING_CODE_23 0xC000F580

// XEVENT_COMMON_BILLING_CODE_24, 62849, Error
#define XEVENT_COMMON_BILLING_CODE_24 0xC000F581

// XEVENT_COMMON_BILLING_CODE_25, 62850, Error
#define XEVENT_COMMON_BILLING_CODE_25 0xC000F582

// XEVENT_COMMON_BILLING_CODE_26, 62851, Error
#define XEVENT_COMMON_BILLING_CODE_26 0xC000F583

// XEVENT_COMMON_BILLING_CODE_27, 62852, Error
#define XEVENT_COMMON_BILLING_CODE_27 0xC000F584

// XEVENT_COMMON_BILLING_CODE_28, 62853, Error
#define XEVENT_COMMON_BILLING_CODE_28 0xC000F585

// XEVENT_COMMON_BILLING_CODE_29, 62854, Error
#define XEVENT_COMMON_BILLING_CODE_29 0xC000F586

// XEVENT_COMMON_BILLING_CODE_30, 62855, Error
#define XEVENT_COMMON_BILLING_CODE_30 0xC000F587

// XEVENT_COMMON_BILLING_CODE_31, 62856, Error
#define XEVENT_COMMON_BILLING_CODE_31 0xC000F588

// XEVENT_COMMON_BILLING_CODE_32, 62857, Error
#define XEVENT_COMMON_BILLING_CODE_32 0xC000F589

// XEVENT_COMMON_BILLING_CODE_33, 62858, Error
#define XEVENT_COMMON_BILLING_CODE_33 0xC000F58A

// XEVENT_COMMON_BILLING_CODE_34, 62859, Error
#define XEVENT_COMMON_BILLING_CODE_34 0xC000F58B

// XEVENT_COMMON_BILLING_CODE_35, 62860, Error
#define XEVENT_COMMON_BILLING_CODE_35 0xC000F58C

// XEVENT_COMMON_BILLING_CODE_36, 62861, Error
#define XEVENT_COMMON_BILLING_CODE_36 0xC000F58D

// XEVENT_COMMON_BILLING_CODE_37, 62862, Error
#define XEVENT_COMMON_BILLING_CODE_37 0xC000F58E

// XEVENT_COMMON_BILLING_CODE_38, 62863, Error
#define XEVENT_COMMON_BILLING_CODE_38 0xC000F58F

// XEVENT_COMMON_BILLING_CODE_39, 62864, Error
#define XEVENT_COMMON_BILLING_CODE_39 0xC000F590

// XEVENT_COMMON_BILLING_CODE_40, 62865, Error
#define XEVENT_COMMON_BILLING_CODE_40 0xC000F591

// XEVENT_COMMON_BILLING_CODE_41, 62866, Error
#define XEVENT_COMMON_BILLING_CODE_41 0xC000F592

// XEVENT_COMMON_BILLING_CODE_42, 62867, Error
#define XEVENT_COMMON_BILLING_CODE_42 0xC000F593

// XEVENT_COMMON_BILLING_CODE_43, 62868, Error
#define XEVENT_COMMON_BILLING_CODE_43 0xC000F594

// XEVENT_COMMON_BILLING_CODE_44, 62869, Error
#define XEVENT_COMMON_BILLING_CODE_44 0xC000F595

// XEVENT_COMMON_BILLING_CODE_45, 62870, Error
#define XEVENT_COMMON_BILLING_CODE_45 0xC000F596

// XEVENT_COMMON_BILLING_CODE_46, 62871, Error
#define XEVENT_COMMON_BILLING_CODE_46 0xC000F597

// XEVENT_COMMON_BILLING_CODE_47, 62872, Error
#define XEVENT_COMMON_BILLING_CODE_47 0xC000F598

// XEVENT_COMMON_BILLING_CODE_48, 62873, Error
#define XEVENT_COMMON_BILLING_CODE_48 0xC000F599

// XEVENT_DEPRECATED_COMMON_BILLING_CODE_49, 62874, Error
#define XEVENT_DEPRECATED_COMMON_BILLING_CODE_49 0xC000F59A

// XEVENT_DEPRECATED_COMMON_BILLING_CODE_50, 62875, Error
#define XEVENT_DEPRECATED_COMMON_BILLING_CODE_50 0xC000F59B

// XEVENT_DEPRECATED_COMMON_BILLING_CODE_51, 62876, Error
#define XEVENT_DEPRECATED_COMMON_BILLING_CODE_51 0xC000F59C

// XEVENT_DEPRECATED_COMMON_BILLING_CODE_52, 62877, Error
#define XEVENT_DEPRECATED_COMMON_BILLING_CODE_52 0xC000F59D

// XEVENT_COMMON_BILLING_CODE_53, 62878, Error
#define XEVENT_COMMON_BILLING_CODE_53 0xC000F59E

// XEVENT_COMMON_BILLING_CODE_54, 62879, Error
#define XEVENT_COMMON_BILLING_CODE_54 0xC000F59F

// XEVENT_COMMON_BILLING_CODE_55, 62880, Error
#define XEVENT_COMMON_BILLING_CODE_55 0xC000F5A0

// XEVENT_COMMON_BILLING_CODE_56, 62881, Error
#define XEVENT_COMMON_BILLING_CODE_56 0xC000F5A1

// XEVENT_COMMON_BILLING_CODE_57, 62882, Error
#define XEVENT_COMMON_BILLING_CODE_57 0xC000F5A2

// XEVENT_COMMON_BILLING_CODE_58, 62883, Error
#define XEVENT_COMMON_BILLING_CODE_58 0xC000F5A3

// XEVENT_COMMON_BILLING_CODE_59, 62884, Error
#define XEVENT_COMMON_BILLING_CODE_59 0xC000F5A4

// XEVENT_COMMON_BILLING_CODE_60, 62885, Error
#define XEVENT_COMMON_BILLING_CODE_60 0xC000F5A5

// XEVENT_COMMON_BILLING_CODE_61, 62886, Error
#define XEVENT_COMMON_BILLING_CODE_61 0xC000F5A6

// XEVENT_COMMON_BILLING_CODE_62, 62887, Error
#define XEVENT_COMMON_BILLING_CODE_62 0xC000F5A7

// XEVENT_COMMON_BILLING_CODE_63, 62888, Error
#define XEVENT_COMMON_BILLING_CODE_63 0xC000F5A8

// XEVENT_DEPRECATED_COMMON_BILLING_CODE_64, 62889, Error
#define XEVENT_DEPRECATED_COMMON_BILLING_CODE_64 0xC000F5A9

// XEVENT_COMMON_BILLING_CODE_65, 62890, Error
#define XEVENT_COMMON_BILLING_CODE_65 0xC000F5AA

// XEVENT_COMMON_BILLING_CODE_66, 62891, Error
#define XEVENT_COMMON_BILLING_CODE_66 0xC000F5AB

// XEVENT_COMMON_BILLING_CODE_67, 62892, Error
#define XEVENT_COMMON_BILLING_CODE_67 0xC000F5AC

// XEVENT_COMMON_BILLING_CODE_68, 62893, Error
#define XEVENT_COMMON_BILLING_CODE_68 0xC000F5AD

// XEVENT_COMMON_BILLING_CODE_69, 62894, Error
#define XEVENT_COMMON_BILLING_CODE_69 0xC000F5AE

// XEVENT_COMMON_BILLING_CODE_70, 62895, Error
#define XEVENT_COMMON_BILLING_CODE_70 0xC000F5AF

// XEVENT_COMMON_BILLING_CODE_71, 62896, Error
#define XEVENT_COMMON_BILLING_CODE_71 0xC000F5B0

// XEVENT_COMMON_BILLING_CODE_72, 62897, Error
#define XEVENT_COMMON_BILLING_CODE_72 0xC000F5B1

// XEVENT_COMMON_BILLING_CODE_73, 62898, Error
#define XEVENT_COMMON_BILLING_CODE_73 0xC000F5B2

// XEVENT_COMMON_BILLING_CODE_74, 62899, Error
#define XEVENT_COMMON_BILLING_CODE_74 0xC000F5B3

// XEVENT_COMMON_BILLING_CODE_75, 62900, Error
#define XEVENT_COMMON_BILLING_CODE_75 0xC000F5B4

// XEVENT_COMMON_BILLING_CODE_76, 62901, Error
#define XEVENT_COMMON_BILLING_CODE_76 0xC000F5B5

// XEVENT_COMMON_BILLING_CODE_77, 62902, Error
#define XEVENT_COMMON_BILLING_CODE_77 0xC000F5B6

// XEVENT_COMMON_BILLING_CODE_78, 62903, Error
#define XEVENT_COMMON_BILLING_CODE_78 0xC000F5B7

// XEVENT_COMMON_BILLING_CODE_79, 62904, Error
#define XEVENT_COMMON_BILLING_CODE_79 0xC000F5B8

// XEVENT_COMMON_BILLING_CODE_80, 62905, Error
#define XEVENT_COMMON_BILLING_CODE_80 0xC000F5B9

// XEVENT_COMMON_BILLING_CODE_81, 62906, Error
#define XEVENT_COMMON_BILLING_CODE_81 0xC000F5BA

// XEVENT_COMMON_BILLING_CODE_82, 62907, Error
#define XEVENT_COMMON_BILLING_CODE_82 0xC000F5BB

// XEVENT_COMMON_BILLING_CODE_83, 62908, Error
#define XEVENT_COMMON_BILLING_CODE_83 0xC000F5BC

// XEVENT_COMMON_BILLING_CODE_84, 62909, Error
#define XEVENT_COMMON_BILLING_CODE_84 0xC000F5BD

// XEVENT_COMMON_BILLING_CODE_85, 62910, Error
#define XEVENT_COMMON_BILLING_CODE_85 0xC000F5BE

// XEVENT_COMMON_BILLING_CODE_86, 62911, Error
#define XEVENT_COMMON_BILLING_CODE_86 0xC000F5BF

// XEVENT_COMMON_BILLING_CODE_87, 62912, Error
#define XEVENT_COMMON_BILLING_CODE_87 0xC000F5C0

// XEVENT_COMMON_BILLING_CODE_88, 62913, Error
#define XEVENT_COMMON_BILLING_CODE_88 0xC000F5C1

// XEVENT_COMMON_BILLING_CODE_89, 62914, Error
#define XEVENT_COMMON_BILLING_CODE_89 0xC000F5C2

// XEVENT_COMMON_BILLING_CODE_90, 62915, Error
#define XEVENT_COMMON_BILLING_CODE_90 0xC000F5C3

// XEVENT_COMMON_BILLING_CODE_91, 62916, Error
#define XEVENT_COMMON_BILLING_CODE_91 0xC000F5C4

// XEVENT_COMMON_BILLING_CODE_92, 62917, Error
#define XEVENT_COMMON_BILLING_CODE_92 0xC000F5C5

// XEVENT_COMMON_BILLING_CODE_93, 62918, Error
#define XEVENT_COMMON_BILLING_CODE_93 0xC000F5C6

// XEVENT_COMMON_BILLING_CODE_94, 62919, Error
#define XEVENT_COMMON_BILLING_CODE_94 0xC000F5C7

// XEVENT_COMMON_BILLING_CODE_95, 62920, Error
#define XEVENT_COMMON_BILLING_CODE_95 0xC000F5C8

// XEVENT_COMMON_BILLING_CODE_96, 62921, Error
#define XEVENT_COMMON_BILLING_CODE_96 0xC000F5C9

// XEVENT_COMMON_BILLING_CODE_97, 62922, Error
#define XEVENT_COMMON_BILLING_CODE_97 0xC000F5CA

// XEVENT_COMMON_BILLING_CODE_98, 62923, Error
#define XEVENT_COMMON_BILLING_CODE_98 0xC000F5CB

// XEVENT_COMMON_BILLING_CODE_99, 62924, Error
#define XEVENT_COMMON_BILLING_CODE_99 0xC000F5CC

// XEVENT_COMMON_BILLING_CODE_100, 62925, Error
#define XEVENT_COMMON_BILLING_CODE_100 0xC000F5CD

// XEVENT_COMMON_BILLING_CODE_101, 62926, Error
#define XEVENT_COMMON_BILLING_CODE_101 0xC000F5CE

// XEVENT_COMMON_BILLING_CODE_102, 62927, Error
#define XEVENT_COMMON_BILLING_CODE_102 0xC000F5CF

// XEVENT_COMMON_BILLING_CODE_103, 62928, Error
#define XEVENT_COMMON_BILLING_CODE_103 0xC000F5D0

// XEVENT_COMMON_BILLING_CODE_104, 62929, Error
#define XEVENT_COMMON_BILLING_CODE_104 0xC000F5D1

// XEVENT_COMMON_BILLING_CODE_105, 62930, Error
#define XEVENT_COMMON_BILLING_CODE_105 0xC000F5D2

// XEVENT_DEPRECATED_COMMON_BILLING_CODE_106, 62931, Error
#define XEVENT_DEPRECATED_COMMON_BILLING_CODE_106 0xC000F5D3

// XEVENT_COMMON_BILLING_CODE_107, 62932, Error
#define XEVENT_COMMON_BILLING_CODE_107 0xC000F5D4

// XEVENT_DEPRECATED_COMMON_BILLING_CODE_108, 62933, Error
#define XEVENT_DEPRECATED_COMMON_BILLING_CODE_108 0xC000F5D5

// XEVENT_DEPRECATED_COMMON_BILLING_CODE_109, 62934, Error
#define XEVENT_DEPRECATED_COMMON_BILLING_CODE_109 0xC000F5D6

// XEVENT_DEPRECATED_COMMON_BILLING_CODE_110, 62935, Error
#define XEVENT_DEPRECATED_COMMON_BILLING_CODE_110 0xC000F5D7

// XEVENT_DEPRECATED_COMMON_BILLING_CODE_111, 62936, Error
#define XEVENT_DEPRECATED_COMMON_BILLING_CODE_111 0xC000F5D8

// XEVENT_DEPRECATED_COMMON_BILLING_CODE_112, 62937, Error
#define XEVENT_DEPRECATED_COMMON_BILLING_CODE_112 0xC000F5D9

// XEVENT_DEPRECATED_COMMON_BILLING_CODE_113, 62938, Error
#define XEVENT_DEPRECATED_COMMON_BILLING_CODE_113 0xC000F5DA

// XEVENT_COMMON_BILLING_CODE_114, 62939, Error
#define XEVENT_COMMON_BILLING_CODE_114 0xC000F5DB

// XEVENT_COMMON_BILLING_CODE_115, 62940, Error
#define XEVENT_COMMON_BILLING_CODE_115 0xC000F5DC

// XEVENT_COMMON_BILLING_CODE_116, 62941, Error
#define XEVENT_COMMON_BILLING_CODE_116 0xC000F5DD

// XEVENT_COMMON_BILLING_CODE_117, 62942, Error
#define XEVENT_COMMON_BILLING_CODE_117 0xC000F5DE

// XEVENT_COMMON_BILLING_CODE_118, 62943, Error
#define XEVENT_COMMON_BILLING_CODE_118 0xC000F5DF

// XEVENT_COMMON_BILLING_CODE_119, 62944, Error
#define XEVENT_COMMON_BILLING_CODE_119 0xC000F5E0

// XEVENT_COMMON_BILLING_CODE_120, 62945, Error
#define XEVENT_COMMON_BILLING_CODE_120 0xC000F5E1

// XEVENT_COMMON_BILLING_CODE_121, 62946, Error
#define XEVENT_COMMON_BILLING_CODE_121 0xC000F5E2

// XEVENT_COMMON_BILLING_CODE_122, 62947, Error
#define XEVENT_COMMON_BILLING_CODE_122 0xC000F5E3

// XEVENT_COMMON_BILLING_CODE_123, 62948, Error
#define XEVENT_COMMON_BILLING_CODE_123 0xC000F5E4

// XEVENT_COMMON_BILLING_CODE_124, 62949, Error
#define XEVENT_COMMON_BILLING_CODE_124 0xC000F5E5

// XEVENT_COMMON_BILLING_CODE_125, 62950, Error
#define XEVENT_COMMON_BILLING_CODE_125 0xC000F5E6

// XEVENT_COMMON_BILLING_CODE_126, 62951, Error
#define XEVENT_COMMON_BILLING_CODE_126 0xC000F5E7

// XEVENT_COMMON_BILLING_CODE_127, 62952, Error
#define XEVENT_COMMON_BILLING_CODE_127 0xC000F5E8

// XEVENT_COMMON_BILLING_CODE_128, 62953, Error
#define XEVENT_COMMON_BILLING_CODE_128 0xC000F5E9

// XEVENT_COMMON_BILLING_CODE_129, 62954, Error
#define XEVENT_COMMON_BILLING_CODE_129 0xC000F5EA

// XEVENT_COMMON_BILLING_CODE_130, 62955, Error
#define XEVENT_COMMON_BILLING_CODE_130 0xC000F5EB

// XEVENT_COMMON_BILLING_CODE_131, 62956, Error
#define XEVENT_COMMON_BILLING_CODE_131 0xC000F5EC

// XEVENT_COMMON_BILLING_CODE_132, 62957, Error
#define XEVENT_COMMON_BILLING_CODE_132 0xC000F5ED

// XEVENT_COMMON_BILLING_CODE_133, 62958, Error
#define XEVENT_COMMON_BILLING_CODE_133 0xC000F5EE

// XEVENT_COMMON_BILLING_CODE_134, 62959, Error
#define XEVENT_COMMON_BILLING_CODE_134 0xC000F5EF

// XEVENT_COMMON_BILLING_CODE_135, 62960, Error
#define XEVENT_COMMON_BILLING_CODE_135 0xC000F5F0

// XEVENT_COMMON_BILLING_CODE_136, 62961, Error
#define XEVENT_COMMON_BILLING_CODE_136 0xC000F5F1

// XEVENT_COMMON_BILLING_CODE_137, 62962, Error
#define XEVENT_COMMON_BILLING_CODE_137 0xC000F5F2

// XEVENT_COMMON_BILLING_CODE_138, 62963, Error
#define XEVENT_COMMON_BILLING_CODE_138 0xC000F5F3

// XEVENT_COMMON_BILLING_CODE_139, 62964, Error
#define XEVENT_COMMON_BILLING_CODE_139 0xC000F5F4

// XEVENT_COMMON_BILLING_CODE_140, 62965, Error
#define XEVENT_COMMON_BILLING_CODE_140 0xC000F5F5

// XEVENT_COMMON_BILLING_CODE_141, 62966, Error
#define XEVENT_COMMON_BILLING_CODE_141 0xC000F5F6

// XEVENT_COMMON_BILLING_CODE_142, 62967, Error
#define XEVENT_COMMON_BILLING_CODE_142 0xC000F5F7

// XEVENT_COMMON_BILLING_CODE_143, 62968, Error
#define XEVENT_COMMON_BILLING_CODE_143 0xC000F5F8

// XEVENT_COMMON_BILLING_CODE_144, 62969, Error
#define XEVENT_COMMON_BILLING_CODE_144 0xC000F5F9

// XEVENT_COMMON_BILLING_CODE_145, 62970, Error
#define XEVENT_COMMON_BILLING_CODE_145 0xC000F5FA

// XEVENT_COMMON_BILLING_CODE_146, 62971, Error
#define XEVENT_COMMON_BILLING_CODE_146 0xC000F5FB

// XEVENT_COMMON_BILLING_CODE_147, 62972, Error
#define XEVENT_COMMON_BILLING_CODE_147 0xC000F5FC

// XEVENT_COMMON_BILLING_CODE_148, 62973, Error
#define XEVENT_COMMON_BILLING_CODE_148 0xC000F5FD

// XEVENT_COMMON_BILLING_CODE_149, 62974, Error
#define XEVENT_COMMON_BILLING_CODE_149 0xC000F5FE

// XEVENT_COMMON_BILLING_CODE_150, 62975, Error
#define XEVENT_COMMON_BILLING_CODE_150 0xC000F5FF

// XEVENT_COMMON_BILLING_CODE_151, 62976, Error
#define XEVENT_COMMON_BILLING_CODE_151 0xC000F600

// XEVENT_DEPRECATED_COMMON_BILLING_CODE_152, 62977, Error
#define XEVENT_DEPRECATED_COMMON_BILLING_CODE_152 0xC000F601

// XEVENT_DEPRECATED_COMMON_BILLING_CODE_153, 62978, Error
#define XEVENT_DEPRECATED_COMMON_BILLING_CODE_153 0xC000F602

// XEVENT_DEPRECATED_COMMON_BILLING_CODE_154, 62979, Error
#define XEVENT_DEPRECATED_COMMON_BILLING_CODE_154 0xC000F603

// XEVENT_DEPRECATED_COMMON_BILLING_CODE_155, 62980, Error
#define XEVENT_DEPRECATED_COMMON_BILLING_CODE_155 0xC000F604

// XEVENT_DEPRECATED_COMMON_BILLING_CODE_156, 62981, Error
#define XEVENT_DEPRECATED_COMMON_BILLING_CODE_156 0xC000F605

// XEVENT_DEPRECATED_COMMON_BILLING_CODE_157, 62982, Error
#define XEVENT_DEPRECATED_COMMON_BILLING_CODE_157 0xC000F606

// XEVENT_DEPRECATED_COMMON_BILLING_CODE_158, 62983, Error
#define XEVENT_DEPRECATED_COMMON_BILLING_CODE_158 0xC000F607

// XEVENT_DEPRECATED_COMMON_BILLING_CODE_159, 62984, Error
#define XEVENT_DEPRECATED_COMMON_BILLING_CODE_159 0xC000F608

// XEVENT_DEPRECATED_COMMON_BILLING_CODE_160, 62985, Error
#define XEVENT_DEPRECATED_COMMON_BILLING_CODE_160 0xC000F609

// XEVENT_COMMON_BILLING_CODE_161, 62986, Error
#define XEVENT_COMMON_BILLING_CODE_161 0xC000F60A

// XEVENT_DEPRECATED_COMMON_BILLING_CODE_162, 62987, Error
#define XEVENT_DEPRECATED_COMMON_BILLING_CODE_162 0xC000F60B

// XEVENT_COMMON_BILLING_CODE_163, 62988, Error
#define XEVENT_COMMON_BILLING_CODE_163 0xC000F60C

// XEVENT_COMMON_BILLING_CODE_164, 62989, Error
#define XEVENT_COMMON_BILLING_CODE_164 0xC000F60D

// XEVENT_COMMON_BILLING_CODE_165, 62990, Error
#define XEVENT_COMMON_BILLING_CODE_165 0xC000F60E

// XEVENT_COMMON_BILLING_CODE_166, 62991, Error
#define XEVENT_COMMON_BILLING_CODE_166 0xC000F60F

// XEVENT_COMMON_BILLING_CODE_167, 62992, Error
#define XEVENT_COMMON_BILLING_CODE_167 0xC000F610

// XEVENT_COMMON_BILLING_CODE_168, 62993, Error
#define XEVENT_COMMON_BILLING_CODE_168 0xC000F611

// XEVENT_COMMON_BILLING_CODE_169, 62994, Error
#define XEVENT_COMMON_BILLING_CODE_169 0xC000F612

// XEVENT_COMMON_BILLING_CODE_170, 62995, Error
#define XEVENT_COMMON_BILLING_CODE_170 0xC000F613

// XEVENT_COMMON_BILLING_CODE_171, 62996, Error
#define XEVENT_COMMON_BILLING_CODE_171 0xC000F614

// XEVENT_COMMON_BILLING_CODE_172, 62997, Error
#define XEVENT_COMMON_BILLING_CODE_172 0xC000F615

// XEVENT_COMMON_BILLING_CODE_173, 62998, Error
#define XEVENT_COMMON_BILLING_CODE_173 0xC000F616

// XEVENT_DEPRECATED_COMMON_BILLING_CODE_174, 62999, Error
#define XEVENT_DEPRECATED_COMMON_BILLING_CODE_174 0xC000F617

// XEVENT_COMMON_BILLING_CODE_175, 63000, Error
#define XEVENT_COMMON_BILLING_CODE_175 0xC000F618

// XEVENT_COMMON_BILLING_CODE_176, 63001, Error
#define XEVENT_COMMON_BILLING_CODE_176 0xC000F619

// XEVENT_COMMON_BILLING_CODE_177, 63002, Error
#define XEVENT_COMMON_BILLING_CODE_177 0xC000F61A

// XEVENT_COMMON_BILLING_CODE_178, 63003, Error
#define XEVENT_COMMON_BILLING_CODE_178 0xC000F61B

// XEVENT_COMMON_BILLING_CODE_179, 63004, Error
#define XEVENT_COMMON_BILLING_CODE_179 0xC000F61C

// XEVENT_COMMON_BILLING_CODE_180, 63005, Error
#define XEVENT_COMMON_BILLING_CODE_180 0xC000F61D

// XEVENT_COMMON_BILLING_CODE_181, 63006, Error
#define XEVENT_COMMON_BILLING_CODE_181 0xC000F61E

// XEVENT_COMMON_BILLING_CODE_182, 63007, Error
#define XEVENT_COMMON_BILLING_CODE_182 0xC000F61F

// XEVENT_COMMON_BILLING_CODE_183, 63008, Error
#define XEVENT_COMMON_BILLING_CODE_183 0xC000F620

// XEVENT_COMMON_BILLING_CODE_184, 63009, Error
#define XEVENT_COMMON_BILLING_CODE_184 0xC000F621

// XEVENT_COMMON_BILLING_CODE_185, 63010, Error
#define XEVENT_COMMON_BILLING_CODE_185 0xC000F622

// XEVENT_COMMON_BILLING_CODE_186, 63011, Error
#define XEVENT_COMMON_BILLING_CODE_186 0xC000F623

// XEVENT_COMMON_BILLING_CODE_187, 63012, Error
#define XEVENT_COMMON_BILLING_CODE_187 0xC000F624

// XEVENT_COMMON_BILLING_CODE_188, 63013, Error
#define XEVENT_COMMON_BILLING_CODE_188 0xC000F625

// XEVENT_COMMON_BILLING_CODE_189, 63014, Error
#define XEVENT_COMMON_BILLING_CODE_189 0xC000F626

// XEVENT_DMP_EXTERNAL_EXCEPTION, 63015, Error
#define XEVENT_DMP_EXTERNAL_EXCEPTION 0xC000F627

// XEVENT_COMMON_BILLING_CODE_191, 63016, Error
#define XEVENT_COMMON_BILLING_CODE_191 0xC000F628

// XEVENT_COMMON_BILLING_CODE_192, 63017, Error
#define XEVENT_COMMON_BILLING_CODE_192 0xC000F629

// XEVENT_COMMON_BILLING_CODE_193, 63018, Error
#define XEVENT_COMMON_BILLING_CODE_193 0xC000F62A

// XEVENT_COMMON_BILLING_CODE_194, 63019, Error
#define XEVENT_COMMON_BILLING_CODE_194 0xC000F62B

// XEVENT_COMMON_BILLING_CODE_195, 63020, Error
#define XEVENT_COMMON_BILLING_CODE_195 0xC000F62C

// XEVENT_COMMON_BILLING_CODE_196, 63021, Error
#define XEVENT_COMMON_BILLING_CODE_196 0xC000F62D

// XEVENT_PASSPORT_CREATE_ERROR, 63022, Error
#define XEVENT_PASSPORT_CREATE_ERROR 0xC000F62E

// XEVENT_COMMON_BILLING_CODE_198, 63023, Error
#define XEVENT_COMMON_BILLING_CODE_198 0xC000F62F

// XEVENT_PASSPORT_CHANGE_PASSWORD_ERROR, 63024, Error
#define XEVENT_PASSPORT_CHANGE_PASSWORD_ERROR 0xC000F630

// XEVENT_PASSPORT_LOGIN_ERROR, 63025, Error
#define XEVENT_PASSPORT_LOGIN_ERROR 0xC000F631

// XEVENT_PASSPORT_CREATE_PROFILE_ERROR, 63026, Error
#define XEVENT_PASSPORT_CREATE_PROFILE_ERROR 0xC000F632

// XEVENT_PASSPORT_UPDATE_PROFILE_ERROR, 63027, Error
#define XEVENT_PASSPORT_UPDATE_PROFILE_ERROR 0xC000F633

// XEVENT_COMMON_BILLING_CODE_203, 63028, Error
#define XEVENT_COMMON_BILLING_CODE_203 0xC000F634

// XEVENT_COMMON_BILLING_CODE_204, 63029, Error
#define XEVENT_COMMON_BILLING_CODE_204 0xC000F635

// XEVENT_COMMON_BILLING_CODE_205, 63030, Error
#define XEVENT_COMMON_BILLING_CODE_205 0xC000F636

// XEVENT_COMMON_BILLING_CODE_206, 63031, Error
#define XEVENT_COMMON_BILLING_CODE_206 0xC000F637

// XEVENT_COMMON_BILLING_CODE_207, 63032, Error
#define XEVENT_COMMON_BILLING_CODE_207 0xC000F638

// XEVENT_COMMON_BILLING_CODE_208, 63033, Error
#define XEVENT_COMMON_BILLING_CODE_208 0xC000F639

// XEVENT_COMMON_BILLING_CODE_209, 63034, Error
#define XEVENT_COMMON_BILLING_CODE_209 0xC000F63A

// XEVENT_COMMON_BILLING_CODE_210, 63035, Error
#define XEVENT_COMMON_BILLING_CODE_210 0xC000F63B

// XEVENT_COMMON_BILLING_CODE_211, 63036, Error
#define XEVENT_COMMON_BILLING_CODE_211 0xC000F63C

// XEVENT_COMMON_BILLING_CODE_212, 63037, Error
#define XEVENT_COMMON_BILLING_CODE_212 0xC000F63D

// XEVENT_COMMON_BILLING_CODE_213, 63038, Error
#define XEVENT_COMMON_BILLING_CODE_213 0xC000F63E

// XEVENT_COMMON_BILLING_CODE_214, 63039, Error
#define XEVENT_COMMON_BILLING_CODE_214 0xC000F63F

// XEVENT_COMMON_BILLING_CODE_215, 63040, Error
#define XEVENT_COMMON_BILLING_CODE_215 0xC000F640

// XEVENT_COMMON_BILLING_CODE_216, 63041, Error
#define XEVENT_COMMON_BILLING_CODE_216 0xC000F641

// XEVENT_COMMON_BILLING_CODE_217, 63042, Error
#define XEVENT_COMMON_BILLING_CODE_217 0xC000F642

// XEVENT_COMMON_BILLING_CODE_218, 63043, Error
#define XEVENT_COMMON_BILLING_CODE_218 0xC000F643

// XEVENT_COMMON_BILLING_CODE_219, 63044, Error
#define XEVENT_COMMON_BILLING_CODE_219 0xC000F644

// XEVENT_COMMON_BILLING_CODE_220, 63045, Error
#define XEVENT_COMMON_BILLING_CODE_220 0xC000F645

// XEVENT_DEPRECATED_COMMON_BILLING_CODE_221, 63046, Error
#define XEVENT_DEPRECATED_COMMON_BILLING_CODE_221 0xC000F646

// XEVENT_DEPRECATED_COMMON_BILLING_CODE_222, 63047, Error
#define XEVENT_DEPRECATED_COMMON_BILLING_CODE_222 0xC000F647

// XEVENT_DEPRECATED_COMMON_BILLING_CODE_223, 63048, Error
#define XEVENT_DEPRECATED_COMMON_BILLING_CODE_223 0xC000F648

// XEVENT_COMMON_BILLING_SCS_API_BLOCKED, 63049, Error
#define XEVENT_COMMON_BILLING_SCS_API_BLOCKED 0xC000F649

// XEVENT_COMMON_BILLING_CODE_224, 63050, Error
#define XEVENT_COMMON_BILLING_CODE_224 0xC000F64A

// XEVENT_COMMON_PASSPORT_API_BLOCKED, 63051, Error
#define XEVENT_COMMON_PASSPORT_API_BLOCKED 0xC000F64B

// XEVENT_COMMON_BILLING_QUEUED_ACCOUNT_NOT_FOUND, 63052, Error
#define XEVENT_COMMON_BILLING_QUEUED_ACCOUNT_NOT_FOUND 0xC000F64C

// XEVENT_COMMON_BILLING_NOT_CONNECTED_TO_BILLING, 63053, Error
#define XEVENT_COMMON_BILLING_NOT_CONNECTED_TO_BILLING 0xC000F64D

// XEVENT_COMMON_FSE_NO_BOOKMARK_SETTING, 63054, Error
#define XEVENT_COMMON_FSE_NO_BOOKMARK_SETTING 0xC000F64E

// XEVENT_COMMON_FSE_INVALID_BOOKMARK_SETTING, 63055, Error
#define XEVENT_COMMON_FSE_INVALID_BOOKMARK_SETTING 0xC000F64F

// XEVENT_COMMON_BILLING_TEST_SETTING_WARNING, 63056, Warning
#define XEVENT_COMMON_BILLING_TEST_SETTING_WARNING 0x8000F650

// XEVENT_COMMON_BILLING_TITLEID_FORMAT, 63057, Warning
#define XEVENT_COMMON_BILLING_TITLEID_FORMAT 0x8000F651

// XEVENT_COMMON_BILLING_ADDITIONAL_ACCOUNT_DATA_REQUIRED, 63058, Error
#define XEVENT_COMMON_BILLING_ADDITIONAL_ACCOUNT_DATA_REQUIRED 0xC000F652

// XEVENT_COMMON_BILLING_MOVE_SUBSCRIPTION_FAILED, 63059, Error
#define XEVENT_COMMON_BILLING_MOVE_SUBSCRIPTION_FAILED 0xC000F653

// XEVENT_COMMON_BILLING_CHANGE_SUBSCRIPTION_STATE_FAILED, 63060, Error
#define XEVENT_COMMON_BILLING_CHANGE_SUBSCRIPTION_STATE_FAILED 0xC000F654

// XEVENT_COMMON_BILLING_CONTENT_TOKEN_OFFER_MISCONFIGURED, 63061, Error
#define XEVENT_COMMON_BILLING_CONTENT_TOKEN_OFFER_MISCONFIGURED 0xC000F655

// XEVENT_COMMON_FSE_CACHE_QUERY_ERROR, 63062, Error
#define XEVENT_COMMON_FSE_CACHE_QUERY_ERROR 0xC000F656

// XEVENT_COMMON_FSE_CACHE_INSERT_ERROR, 63063, Error
#define XEVENT_COMMON_FSE_CACHE_INSERT_ERROR 0xC000F657

// XEVENT_COMMON_FSE_CACHE_RESERVE_ERROR, 63064, Error
#define XEVENT_COMMON_FSE_CACHE_RESERVE_ERROR 0xC000F658

// XEVENT_COMMON_FSE_UNHANDLED_ERROR, 63065, Error
#define XEVENT_COMMON_FSE_UNHANDLED_ERROR 0xC000F659

// XEVENT_COMMON_BILLING_UPS_API_BLOCKED, 63066, Error
#define XEVENT_COMMON_BILLING_UPS_API_BLOCKED 0xC000F65A

// XEVENT_COMMON_FSE_CONFIGURATION_ERROR, 63067, Error
#define XEVENT_COMMON_FSE_CONFIGURATION_ERROR 0xC000F65B

// XEVENT_PASSPORT_INVALID_RESPONSE, 63068, Error
#define XEVENT_PASSPORT_INVALID_RESPONSE 0xC000F65C

// XEVENT_COMMON_UPS_ERROR, 63069, Error
#define XEVENT_COMMON_UPS_ERROR 0xC000F65D

// XEVENT_COMMON_UPS_GET_PROFILE_ERROR, 63070, Error
#define XEVENT_COMMON_UPS_GET_PROFILE_ERROR 0xC000F65E

// XEVENT_COMMON_UPS_UPDATE_PROFILE_ERROR, 63071, Error
#define XEVENT_COMMON_UPS_UPDATE_PROFILE_ERROR 0xC000F65F

// XEVENT_PASSPORT_GET_MEMBER_NAME_ERROR, 63072, Error
#define XEVENT_PASSPORT_GET_MEMBER_NAME_ERROR 0xC000F660

// XEVENT_PASSPORT_GET_MEMBER_NAME_AND_CID_ERROR, 63073, Error
#define XEVENT_PASSPORT_GET_MEMBER_NAME_AND_CID_ERROR 0xC000F661

// XEVENT_PASSPORT_GET_PUID_ERROR, 63074, Error
#define XEVENT_PASSPORT_GET_PUID_ERROR 0xC000F662

// XEVENT_PASSPORT_SET_NO_AGE_OUT_ERROR, 63075, Error
#define XEVENT_PASSPORT_SET_NO_AGE_OUT_ERROR 0xC000F663

// XEVENT_PASSPORT_GET_NO_AGE_OUT_ERROR, 63076, Error
#define XEVENT_PASSPORT_GET_NO_AGE_OUT_ERROR 0xC000F664

// XEVENT_PASSPORT_CREATE_PROFILE, 63077, Error
#define XEVENT_PASSPORT_CREATE_PROFILE 0xC000F665

// XEVENT_PASSPORT_UPDATE_PROFILE, 63078, Error
#define XEVENT_PASSPORT_UPDATE_PROFILE 0xC000F666
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\events\obj\billing.cs ===
XCBK_NOTIFY_KEY_NOT_FOUND_IN_MESSAGE = 15000 | XEvent.Severity.Error,
            XCBK_NOTIFY_SETTING_NOT_FOUND = 15001 | XEvent.Severity.Error,
            XCBK_NOTIFY_UNAUTHORIZED_REQUEST = 15002 | XEvent.Severity.Error,
            XCBK_NOTIFY_UNKNOWN_ERROR = 15003 | XEvent.Severity.Error,
            PASSPORT_DELETE_CREDENTIAL_ERROR = 15004 | XEvent.Severity.Error,
            PASSPORT_ENUM_CREDENTIALS_BY_NAME_ERROR = 15005 | XEvent.Severity.Error,
            PASSPORT_FORCE_CREDENTIAL_RENAME_ERROR = 15006 | XEvent.Severity.Error,
            USER_PURCHASE_NOT_ELIGIBLE_FOR_FREE_GAMERTAG_CHANGE = 15007 | XEvent.Severity.Error,
            XCBK_NOTIFY_BILLING_NOTIFICATION_ADD_FAILURE = 15015 | XEvent.Severity.Error,
            XCBK_NOTIFY_SUBSCRIPTION_NOTIFICATION_ADD_FAILURE = 15016 | XEvent.Severity.Error,
            XCBK_NOTIFY_SUBSCRIPTION_NOTIFICATION_ACCOUNT_MISMATCH = 15017 | XEvent.Severity.Error,
            CTP_TRANSACTIONSERVICE_UNKNOWN_ERROR = 15008 | XEvent.Severity.Error,
            CTP_TRANSACTIONSERVICE_COMMUNICATION_ERROR = 15009 | XEvent.Severity.Error,
            CTP_NON_USER_EXCEPTION = 15010 | XEvent.Severity.Error,
            CTP_TRANSACTIONSERVICE_VALIDATION_PATH = 15011 | XEvent.Severity.Error,
            CTP_TRANSACTIONSERVICE_INVALID_SUBSCRIPTION_RESPONSE = 15012 | XEvent.Severity.Warning,
            CTP_TRANSACTIONSERVICE_INVALIDARGS = 15013 | XEvent.Severity.Error,
            PREVIEW_PRODUCT_PURCHASE_MEDIA_TYPE_MISMATCH = 15014 | XEvent.Severity.Error,
            CTP_PARTNER_CONFIGURATION_ERROR = 15018 | XEvent.Severity.Error,
            CATALOG_MEDIACLASS_SETTING_MALFORMATTED = 49991 | XEvent.Severity.Error,
            OFFER_REDUCED_PRICECHECK_MALFORMATTED = 49992 | XEvent.Severity.Error,
            VIDEOCATALOG_SETTINGS_MALFORMATTED = 49993 | XEvent.Severity.Error,
            STORECATALOG_DEFAULT_SETTINGS_MISSING = 49994 | XEvent.Severity.Error,
            STORECATALOG_DEFAULT_SETTINGS_MALFORMATTED_1 = 49995 | XEvent.Severity.Error,
            STORECATALOG_DEFAULT_SETTINGS_MALFORMATTED_2 = 49996 | XEvent.Severity.Error,
            STOREMEDIATYPECATALOG_OVERRIDE_SETTINGS_MALFORMATTED_1 = 49997 | XEvent.Severity.Error,
            STOREMEDIATYPECATALOG_OVERRIDE_SETTINGS_MALFORMATTED_2 = 49998 | XEvent.Severity.Error,
            STOREMEDIATYPECATALOG_OVERRIDE_SETTINGS_MALFORMATTED_3 = 49999 | XEvent.Severity.Error,
            CERT_GRABBER_GET_CERT_FAILURE = 40000 | XEvent.Severity.Error,
            CERT_GRABBER_PARSE_CERT_FAILURE = 40001 | XEvent.Severity.Error,
            CERT_GRABBER_UPDATE_CERT_FAILURE = 40002 | XEvent.Severity.Error,
            PLUGIN_CERTGRABBER_CERTIFICATE_UPDATED = 40003 | XEvent.Severity.Info,
            OFFER_ID_LOOKUP_FAILURE = 40004 | XEvent.Severity.Error,
            REINSTATE_DELAYED_CANCEL_FAILURE = 40005 | XEvent.Severity.Error,
            XCBK_UNEXPECTED_REQUEST = 50426 | XEvent.Severity.Error,
            XCBK_UNKNOWN_ERROR = 50429 | XEvent.Severity.Error,
            XCBK_UNKNOWN_ERROR_1 = 50431 | XEvent.Severity.Error,
            XCBK_UNEXPECTED_REQUEST_1 = 50434 | XEvent.Severity.Error,
            XCBK_UNKNOWN_ERROR_2 = 50435 | XEvent.Severity.Error,
            XCBK_UNKNOWN_ERROR_3 = 50436 | XEvent.Severity.Error,
            XCBK_UNKNOWN_ERROR_4 = 50437 | XEvent.Severity.Error,
            MC_BAD_PARAMETER_3 = 50438 | XEvent.Severity.Error,
            MC_APPLICATION_ERROR_8 = 50440 | XEvent.Severity.Error,
            MC_SPS_UNRECOGNIZED_ERROR_1 = 50442 | XEvent.Severity.Error,
            FAIL_FAST_EXIT = 50455 | XEvent.Severity.Info,
            FAIL_FAST_ENTER = 50456 | XEvent.Severity.Error,
            DEPRECATED_BILLING_CODE_49 = 50474 | XEvent.Severity.Error,
            DEPRECATED_BILLING_CODE_50 = 50475 | XEvent.Severity.Error,
            DEPRECATED_BILLING_CODE_65 = 50490 | XEvent.Severity.Error,
            UNKOWN_OFFER_TYPE = 50493 | XEvent.Severity.Error,
            UNKOWN_PAYMENT_TYPE = 50494 | XEvent.Severity.Error,
            GEOFENCE_COMPONENT_RETURNED_NULL = 50495 | XEvent.Severity.Warning,
            GEOFENCE_COMPONENT_RETURNED_EXCEPTION = 50496 | XEvent.Severity.Error,
            DEPRECATED_GET_MACHINE_PART_NUMBER_FAILED = 50497 | XEvent.Severity.Error,
            DEPRECATED_TRANSFER_MACHINE_LICENSES_FAILED = 50498 | XEvent.Severity.Error,
            DEPRECATED_TRANSFER_MACHINE_LICENSES_ASSET_CHECK_FAILED = 50499 | XEvent.Severity.Error,
            GET_PUID_FROM_MEMBERNAME_ERROR = 50500 | XEvent.Severity.Error,
            XCBK_UNKNOWN_SERVICE_COMPONENT = 50526 | XEvent.Severity.Error,
            MC_SPS_TIMEOUT = 50527 | XEvent.Severity.Error,
            MUSICNET_ADD_SUBSCRIPTION_OFFER_FAILED = 50534 | XEvent.Severity.Error,
            BDK_BLOCKING_SCS_APIS_BAD_MULTISETTING = 50535 | XEvent.Severity.Error,
            CATALOG_MUSIC_MNETID_INVALID = 50536 | XEvent.Severity.Error,
            CATALOG_QUERY_ERROR = 50537 | XEvent.Severity.Error,
            XCBK_DATABASE_UNAVAILABLE = 50550 | XEvent.Severity.Error,
            XCBK_DATABASE_UNAVAILABLE_1 = 50551 | XEvent.Severity.Error,
            MC_SPS_OFFER_MISCONFIGURATION_3 = 50553 | XEvent.Severity.Error,
            MC_SPS_OFFER_MISCONFIGURATION_4 = 50554 | XEvent.Severity.Error,
            MC_SPS_OFFER_MISCONFIGURATION_5 = 50555 | XEvent.Severity.Error,
            MC_BILLING_PROVIDER_INIT_ERROR = 50556 | XEvent.Severity.Error,
            UODB_ACCESS_ERROR = 50567 | XEvent.Severity.Error,
            MC_SPS_IS_OFF = 50568 | XEvent.Severity.Warning,
            MC_BILLING_PROVIDER_INIT_ERROR_1 = 50582 | XEvent.Severity.Error,
            XCBK_SUBSCRIPTION_EXPIRATION_MESSAGE_FAILED = 50583 | XEvent.Severity.Error,
            DEPRECATED_BILLING_OFFERING_GEOAPI_INIT_FAILED = 50588 | XEvent.Severity.Error,
            XUACS_GRADUATE_USER_UPDATE_ERROR = 50679 | XEvent.Severity.Error,
            XUACS_GRADUATE_USER_QUEUE_ERROR = 50680 | XEvent.Severity.Error,
            XUACS_GRADUATE_USER_QUEUE_TIMER_ERROR = 50681 | XEvent.Severity.Error,
            XUACS_GRADUATE_USER_DEQUEUE_ERROR = 50682 | XEvent.Severity.Error,
            GRADUATE_USER_QUEUE_GET_PENDING_ERROR = 50687 | XEvent.Severity.Error,
            MC_CANNOT_COMPLETE_PURCHASE_COMMIT = 50705 | XEvent.Severity.Info,
            MC_SPS_UNRECOGNIZED_ERROR = 50825 | XEvent.Severity.Error,
            COMMON_CODE_1 = 50826 | XEvent.Severity.Error,
            COMMON_CODE_2 = 50827 | XEvent.Severity.Error,
            MC_SPS_INVALID_SUBSCRIPTION_ID = 50828 | XEvent.Severity.Error,
            MC_SPS_INELIGIBLE_FOR_OFFER = 50829 | XEvent.Severity.Error,
            MC_SPS_INELIGIBLE_FOR_OFFER_1 = 50830 | XEvent.Severity.Error,
            MC_SPS_INVALID_PUID = 50831 | XEvent.Severity.Error,
            COMMON_CODE_7 = 50832 | XEvent.Severity.Error,
            COMMON_CODE_8 = 50833 | XEvent.Severity.Error,
            COMMON_CODE_9 = 50834 | XEvent.Severity.Error,
            COMMON_CODE_10 = 50835 | XEvent.Severity.Error,
            COMMON_CODE_11 = 50836 | XEvent.Severity.Error,
            MC_SPS_TOO_MANY_SERVICE_COMPONENTS = 50837 | XEvent.Severity.Error,
            COMMON_CODE_13 = 50838 | XEvent.Severity.Error,
            COMMON_CODE_14 = 50839 | XEvent.Severity.Error,
            COMMON_CODE_15 = 50840 | XEvent.Severity.Error,
            MC_CANNOT_RECORD_TRANSACTION = 50841 | XEvent.Severity.Error,
            MC_CANNOT_RECORD_TRANSACTION_1 = 50842 | XEvent.Severity.Error,
            MC_CANNOT_RECORD_TRANSACTION_2 = 50843 | XEvent.Severity.Error,
            MC_CANNOT_RECORD_TRANSACTION_3 = 50844 | XEvent.Severity.Error,
            COMMON_CODE_123 = 50948 | XEvent.Severity.Error,
            COMMON_CODE_124 = 50949 | XEvent.Severity.Error,
            COMMON_CODE_125 = 50950 | XEvent.Severity.Error,
            COMMON_CODE_126 = 50951 | XEvent.Severity.Error,
            COMMON_CODE_127 = 50952 | XEvent.Severity.Error,
            COMMON_CODE_128 = 50953 | XEvent.Severity.Error,
            COMMON_CODE_129 = 50954 | XEvent.Severity.Error,
            COMMON_CODE_130 = 50955 | XEvent.Severity.Error,
            COMMON_CODE_131 = 50956 | XEvent.Severity.Error,
            COMMON_CODE_132 = 50957 | XEvent.Severity.Error,
            COMMON_CODE_134 = 50959 | XEvent.Severity.Error,
            COMMON_CODE_135 = 50960 | XEvent.Severity.Error,
            COMMON_CODE_136 = 50961 | XEvent.Severity.Error,
            COMMON_CODE_137 = 50962 | XEvent.Severity.Error,
            COMMON_CODE_138 = 50963 | XEvent.Severity.Error,
            COMMON_CODE_139 = 50964 | XEvent.Severity.Error,
            COMMON_CODE_140 = 50965 | XEvent.Severity.Error,
            COMMON_CODE_141 = 50966 | XEvent.Severity.Error,
            COMMON_CODE_142 = 50967 | XEvent.Severity.Error,
            COMMON_CODE_143 = 50968 | XEvent.Severity.Error,
            COMMON_CODE_144 = 50969 | XEvent.Severity.Error,
            COMMON_CODE_145 = 50970 | XEvent.Severity.Error,
            COMMON_CODE_201 = 51026 | XEvent.Severity.Error,
            COMMON_CODE_202 = 51027 | XEvent.Severity.Error,
            COMMON_CODE_203 = 51028 | XEvent.Severity.Error,
            COMMON_CODE_204 = 51029 | XEvent.Severity.Error,
            COMMON_COMM_0 = 51225 | XEvent.Severity.Error,
            COMMON_COMM_1 = 51226 | XEvent.Severity.Error,
            COMMON_COMM_2 = 51227 | XEvent.Severity.Error,
            MC_SPS_PROVISIONING_FAILURE = 51228 | XEvent.Severity.Error,
            COMMON_COMM_4 = 51229 | XEvent.Severity.Error,
            COMMON_COMM_5 = 51230 | XEvent.Severity.Error,
            COMMON_CONFIG_0 = 51325 | XEvent.Severity.Warning,
            COMMON_CONFIG_1 = 51326 | XEvent.Severity.Error,
            COMMON_CONFIG_2 = 51327 | XEvent.Severity.Error,
            COMMON_CONFIG_3 = 51328 | XEvent.Severity.Error,
            COMMON_CONFIG_4 = 51329 | XEvent.Severity.Error,
            COMMON_CONFIG_5 = 51330 | XEvent.Severity.Error,
            COMMON_CONFIG_6 = 51331 | XEvent.Severity.Error,
            MC_BAD_CONFIG_DATA = 51332 | XEvent.Severity.Error,
            COMMON_CONFIG_8 = 51333 | XEvent.Severity.Error,
            COMMON_CONFIG_9 = 51334 | XEvent.Severity.Error,
            COMMON_CONFIG_10 = 51335 | XEvent.Severity.Error,
            COMMON_CONFIG_11 = 51336 | XEvent.Severity.Error,
            MC_BAD_CONFIG_DATA_1 = 51337 | XEvent.Severity.Error,
            MC_BAD_CONFIG_DATA_2 = 51338 | XEvent.Severity.Error,
            COMMON_CONFIG_14 = 51339 | XEvent.Severity.Error,
            COMMON_CONFIG_15 = 51340 | XEvent.Severity.Error,
            MC_BAD_CONFIG_DATA_3 = 51341 | XEvent.Severity.Error,
            COMMON_CONFIG_17 = 51342 | XEvent.Severity.Error,
            COMMON_CONFIG_18 = 51343 | XEvent.Severity.Error,
            MC_SPS_INVALID_OFFER_ID = 51344 | XEvent.Severity.Error,
            MC_SPS_INVALID_OFFER_ID_1 = 51345 | XEvent.Severity.Error,
            MC_SPS_QUEUE_ERROR = 51346 | XEvent.Severity.Error,
            MC_SPS_QUEUE_ERROR_1 = 51347 | XEvent.Severity.Error,
            MC_SPS_QUEUE_ERROR_2 = 51348 | XEvent.Severity.Error,
            COMMON_CONFIG_24 = 51349 | XEvent.Severity.Error,
            COMMON_CONFIG_25 = 51350 | XEvent.Severity.Warning,
            COMMON_CONFIG_26 = 51351 | XEvent.Severity.Error,
            COMMON_CONFIG_27 = 51352 | XEvent.Severity.Error,
            COMMON_CONFIG_28 = 51353 | XEvent.Severity.Error,
            COMMON_CONFIG_30 = 51355 | XEvent.Severity.Error,
            COMMON_CONFIG_31 = 51356 | XEvent.Severity.Error,
            QUEUE_FAILURE_AUTO_FIX = 51357 | XEvent.Severity.Error,
            COMMON_CONFIG_33 = 51358 | XEvent.Severity.Error,
            COMMON_CONFIG_34 = 51359 | XEvent.Severity.Error,
            COMMON_CONFIG_35 = 51360 | XEvent.Severity.Error,
            COMMON_CONFIG_36 = 51361 | XEvent.Severity.Error,
            COMMON_CONFIG_37 = 51362 | XEvent.Severity.Error,
            COMMON_CONFIG_38 = 51363 | XEvent.Severity.Error,
            COMMON_CONFIG_39 = 51364 | XEvent.Severity.Error,
            COMMON_CONFIG_40 = 51365 | XEvent.Severity.Error,
            COMMON_CONFIG_41 = 51366 | XEvent.Severity.Error,
            COMMON_CONFIG_42 = 51367 | XEvent.Severity.Error,
            COMMON_CONFIG_43 = 51368 | XEvent.Severity.Error,
            COMMON_CONFIG_44 = 51369 | XEvent.Severity.Error,
            COMMON_CONFIG_45 = 51370 | XEvent.Severity.Error,
            COMMON_CONFIG_46 = 51371 | XEvent.Severity.Error,
            COMMON_CONFIG_47 = 51372 | XEvent.Severity.Error,
            COMMON_CONFIG_48 = 51373 | XEvent.Severity.Error,
            COMMON_CONFIG_49 = 51374 | XEvent.Severity.Warning,
            COMMON_CONFIG_50 = 51375 | XEvent.Severity.Warning,
            MC_SPS_OFFER_MISCONFIGURATION = 51376 | XEvent.Severity.Error,
            COMMON_CONFIG_52 = 51377 | XEvent.Severity.Error,
            COMMON_CONFIG_53 = 51378 | XEvent.Severity.Error,
            COMMON_CONFIG_54 = 51379 | XEvent.Severity.Error,
            COMMON_CONFIG_55 = 51380 | XEvent.Severity.Error,
            COMMON_CONFIG_56 = 51381 | XEvent.Severity.Error,
            COMMON_CONFIG_57 = 51382 | XEvent.Severity.Error,
            COMMON_CONFIG_58 = 51383 | XEvent.Severity.Error,
            COMMON_CONFIG_59 = 51384 | XEvent.Severity.Error,
            COMMON_CONFIG_60 = 51385 | XEvent.Severity.Error,
            COMMON_CONFIG_61 = 51386 | XEvent.Severity.Error,
            COMMON_CONFIG_62 = 51387 | XEvent.Severity.Error,
            COMMON_CONFIG_63 = 51388 | XEvent.Severity.Error,
            MC_SPS_OFFER_MISCONFIGURATION_1 = 51389 | XEvent.Severity.Error,
            COMMON_CONFIG_65 = 51390 | XEvent.Severity.Error,
            COMMON_CONFIG_66 = 51391 | XEvent.Severity.Warning,
            COMMON_CONFIG_67 = 51392 | XEvent.Severity.Warning,
            COMMON_CONFIG_68 = 51393 | XEvent.Severity.Error,
            COMMON_CONFIG_267 = 51592 | XEvent.Severity.Error,
            MC_SPS_OFFER_MISCONFIGURATION_2 = 51594 | XEvent.Severity.Error,
            MC_AMBIGUOUS_OFFER_CONFIGURATION = 51673 | XEvent.Severity.Error,
            COMMON_HACK_0 = 52325 | XEvent.Severity.Warning,
            COMMON_HACK_1 = 52326 | XEvent.Severity.Warning,
            COMMON_HACK_2 = 52327 | XEvent.Severity.Warning,
            COMMON_HACK_3 = 52328 | XEvent.Severity.Warning,
            COMMON_INFO_0 = 52525 | XEvent.Severity.Info,
            COMMON_INFO_1 = 52526 | XEvent.Severity.Info,
            COMMON_INFO_2 = 52527 | XEvent.Severity.Info,
            COMMON_INFO_3 = 52528 | XEvent.Severity.Info,
            BILLING_SWITCH_USER_PASSPORT_QUEUE_DEQUEUE_ERROR = 62805 | XEvent.Severity.Error,
            BILLING_SWITCH_USER_PASSPORT_QUEUE_IMPERSONATION_ERROR = 62806 | XEvent.Severity.Error,
            BILLING_SWITCH_USER_PASSPORT_QUEUE_TIMER_RESET_ERROR = 62807 | XEvent.Severity.Error,
            BILLING_QUEUE_GET_PENDING_ERROR = 62819 | XEvent.Severity.Error,
            SWITCH_USER_PASSPORT_QUEUE_GET_PENDING_ERROR = 62821 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_0 = 62825 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_1 = 62826 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_2 = 62827 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_3 = 62828 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_4 = 62829 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_5 = 62830 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_6 = 62831 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_7 = 62832 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_8 = 62833 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_9 = 62834 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_10 = 62835 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_11 = 62836 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_12 = 62837 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_13 = 62838 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_14 = 62839 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_15 = 62840 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_16 = 62841 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_17 = 62842 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_18 = 62843 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_19 = 62844 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_20 = 62845 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_21 = 62846 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_22 = 62847 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_23 = 62848 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_24 = 62849 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_25 = 62850 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_26 = 62851 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_27 = 62852 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_28 = 62853 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_29 = 62854 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_30 = 62855 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_31 = 62856 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_32 = 62857 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_33 = 62858 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_34 = 62859 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_35 = 62860 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_36 = 62861 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_37 = 62862 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_38 = 62863 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_39 = 62864 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_40 = 62865 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_41 = 62866 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_42 = 62867 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_43 = 62868 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_44 = 62869 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_45 = 62870 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_46 = 62871 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_47 = 62872 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_48 = 62873 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_49 = 62874 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_50 = 62875 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_51 = 62876 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_52 = 62877 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_53 = 62878 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_54 = 62879 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_55 = 62880 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_56 = 62881 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_57 = 62882 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_58 = 62883 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_59 = 62884 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_60 = 62885 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_61 = 62886 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_62 = 62887 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_63 = 62888 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_64 = 62889 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_65 = 62890 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_66 = 62891 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_67 = 62892 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_68 = 62893 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_69 = 62894 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_70 = 62895 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_71 = 62896 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_72 = 62897 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_73 = 62898 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_74 = 62899 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_75 = 62900 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_76 = 62901 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_77 = 62902 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_78 = 62903 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_79 = 62904 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_80 = 62905 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_81 = 62906 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_82 = 62907 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_83 = 62908 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_84 = 62909 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_85 = 62910 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_86 = 62911 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_87 = 62912 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_88 = 62913 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_89 = 62914 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_90 = 62915 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_91 = 62916 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_92 = 62917 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_93 = 62918 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_94 = 62919 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_95 = 62920 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_96 = 62921 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_97 = 62922 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_98 = 62923 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_99 = 62924 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_100 = 62925 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_101 = 62926 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_102 = 62927 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_103 = 62928 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_104 = 62929 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_105 = 62930 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_106 = 62931 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_107 = 62932 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_108 = 62933 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_109 = 62934 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_110 = 62935 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_111 = 62936 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_112 = 62937 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_113 = 62938 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_114 = 62939 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_115 = 62940 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_116 = 62941 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_117 = 62942 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_118 = 62943 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_119 = 62944 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_120 = 62945 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_121 = 62946 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_122 = 62947 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_123 = 62948 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_124 = 62949 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_125 = 62950 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_126 = 62951 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_127 = 62952 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_128 = 62953 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_129 = 62954 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_130 = 62955 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_131 = 62956 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_132 = 62957 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_133 = 62958 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_134 = 62959 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_135 = 62960 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_136 = 62961 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_137 = 62962 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_138 = 62963 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_139 = 62964 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_140 = 62965 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_141 = 62966 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_142 = 62967 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_143 = 62968 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_144 = 62969 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_145 = 62970 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_146 = 62971 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_147 = 62972 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_148 = 62973 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_149 = 62974 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_150 = 62975 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_151 = 62976 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_152 = 62977 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_153 = 62978 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_154 = 62979 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_155 = 62980 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_156 = 62981 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_157 = 62982 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_158 = 62983 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_159 = 62984 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_160 = 62985 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_161 = 62986 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_162 = 62987 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_163 = 62988 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_164 = 62989 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_165 = 62990 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_166 = 62991 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_167 = 62992 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_168 = 62993 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_169 = 62994 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_170 = 62995 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_171 = 62996 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_172 = 62997 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_173 = 62998 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_174 = 62999 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_175 = 63000 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_176 = 63001 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_177 = 63002 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_178 = 63003 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_179 = 63004 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_180 = 63005 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_181 = 63006 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_182 = 63007 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_183 = 63008 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_184 = 63009 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_185 = 63010 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_186 = 63011 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_187 = 63012 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_188 = 63013 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_189 = 63014 | XEvent.Severity.Error,
            DMP_EXTERNAL_EXCEPTION = 63015 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_191 = 63016 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_192 = 63017 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_193 = 63018 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_194 = 63019 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_195 = 63020 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_196 = 63021 | XEvent.Severity.Error,
            PASSPORT_CREATE_ERROR = 63022 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_198 = 63023 | XEvent.Severity.Error,
            PASSPORT_CHANGE_PASSWORD_ERROR = 63024 | XEvent.Severity.Error,
            PASSPORT_LOGIN_ERROR = 63025 | XEvent.Severity.Error,
            PASSPORT_CREATE_PROFILE_ERROR = 63026 | XEvent.Severity.Error,
            PASSPORT_UPDATE_PROFILE_ERROR = 63027 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_203 = 63028 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_204 = 63029 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_205 = 63030 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_206 = 63031 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_207 = 63032 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_208 = 63033 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_209 = 63034 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_210 = 63035 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_211 = 63036 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_212 = 63037 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_213 = 63038 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_214 = 63039 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_215 = 63040 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_216 = 63041 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_217 = 63042 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_218 = 63043 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_219 = 63044 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_220 = 63045 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_221 = 63046 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_222 = 63047 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_223 = 63048 | XEvent.Severity.Error,
            COMMON_BILLING_SCS_API_BLOCKED = 63049 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_224 = 63050 | XEvent.Severity.Error,
            COMMON_PASSPORT_API_BLOCKED = 63051 | XEvent.Severity.Error,
            COMMON_BILLING_QUEUED_ACCOUNT_NOT_FOUND = 63052 | XEvent.Severity.Error,
            COMMON_BILLING_NOT_CONNECTED_TO_BILLING = 63053 | XEvent.Severity.Error,
            COMMON_FSE_NO_BOOKMARK_SETTING = 63054 | XEvent.Severity.Error,
            COMMON_FSE_INVALID_BOOKMARK_SETTING = 63055 | XEvent.Severity.Error,
            COMMON_BILLING_TEST_SETTING_WARNING = 63056 | XEvent.Severity.Warning,
            COMMON_BILLING_TITLEID_FORMAT = 63057 | XEvent.Severity.Warning,
            COMMON_BILLING_ADDITIONAL_ACCOUNT_DATA_REQUIRED = 63058 | XEvent.Severity.Error,
            COMMON_BILLING_MOVE_SUBSCRIPTION_FAILED = 63059 | XEvent.Severity.Error,
            COMMON_BILLING_CHANGE_SUBSCRIPTION_STATE_FAILED = 63060 | XEvent.Severity.Error,
            COMMON_BILLING_CONTENT_TOKEN_OFFER_MISCONFIGURED = 63061 | XEvent.Severity.Error,
            COMMON_FSE_CACHE_QUERY_ERROR = 63062 | XEvent.Severity.Error,
            COMMON_FSE_CACHE_INSERT_ERROR = 63063 | XEvent.Severity.Error,
            COMMON_FSE_CACHE_RESERVE_ERROR = 63064 | XEvent.Severity.Error,
            COMMON_FSE_UNHANDLED_ERROR = 63065 | XEvent.Severity.Error,
            COMMON_BILLING_UPS_API_BLOCKED = 63066 | XEvent.Severity.Error,
            COMMON_FSE_CONFIGURATION_ERROR = 63067 | XEvent.Severity.Error,
            PASSPORT_INVALID_RESPONSE = 63068 | XEvent.Severity.Error,
            COMMON_UPS_ERROR = 63069 | XEvent.Severity.Error,
            COMMON_UPS_GET_PROFILE_ERROR = 63070 | XEvent.Severity.Error,
            COMMON_UPS_UPDATE_PROFILE_ERROR = 63071 | XEvent.Severity.Error,
            PASSPORT_GET_MEMBER_NAME_ERROR = 63072 | XEvent.Severity.Error,
            PASSPORT_GET_MEMBER_NAME_AND_CID_ERROR = 63073 | XEvent.Severity.Error,
            PASSPORT_GET_PUID_ERROR = 63074 | XEvent.Severity.Error,
            PASSPORT_SET_NO_AGE_OUT_ERROR = 63075 | XEvent.Severity.Error,
            PASSPORT_GET_NO_AGE_OUT_ERROR = 63076 | XEvent.Severity.Error,
            PASSPORT_CREATE_PROFILE = 63077 | XEvent.Severity.Error,
            PASSPORT_UPDATE_PROFILE = 63078 | XEvent.Severity.Error,
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\events\obj\catalogwatcher.cs ===
CATALOG_WATCHER_EXTRACTOR_INVALID_MEDIAID_LCID = 20000 | XEvent.Severity.Error,
            CATALOG_WATCHER_WATCHER_TIME_OUT = 20001 | XEvent.Severity.Error,
            CATALOG_WATCHER_PRODUCER_EXCEPTION = 20002 | XEvent.Severity.Error,
            CATALOG_WATCHER_WATCHER_EXCEPTION = 20003 | XEvent.Severity.Error,
            CATALOG_WATCHER_PUBLISHER_EXCEPTION = 20004 | XEvent.Severity.Error,
            CATALOG_WATCHER_ESPPUBLISHER_FAST_OPERATION_ERROR = 20005 | XEvent.Severity.Error,
            CATALOG_WATCHER_ESPPUBLISHER_FAST_OPERATION_WARNING = 20006 | XEvent.Severity.Warning,
            CATALOG_WATCHER_ESPPUBLISHER_EXCEPTION = 20007 | XEvent.Severity.Warning,
            CATALOG_WATCHER_MEDIA_EXTRACTOR_ERROR = 20008 | XEvent.Severity.Warning,
            CATALOG_WATCHER_MEDIA_PRODUCER_ERROR = 20009 | XEvent.Severity.Warning,
            CATALOG_WATCHER_MEDIA_DOCUMENT_TOO_LARGE = 20010 | XEvent.Severity.Error,
            CATALOG_WATCHER_PROCESSOR_EXCEPTION = 20011 | XEvent.Severity.Error,
            CATALOG_WATCHER_VIDEO_PRODUCER_ERROR = 20012 | XEvent.Severity.Warning,
            CATALOG_WATCHER_AZURESTORAGE_PUBLISHER_EXCEPTION = 20013 | XEvent.Severity.Warning,
            CATALOG_WATCHER_SPEECH_PRODUCER_ERROR = 20014 | XEvent.Severity.Warning,
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\events\obj\cleanser.cs ===
CLEANSER_ETX_WRITE_FAIL = 15000 | XEvent.Severity.Error,
            CLEANSER_ETX_ADD_FAIL = 15001 | XEvent.Severity.Error,
            CLEANSER_BAD_PROTOCOL_FOR_DATA_REQ = 15002 | XEvent.Severity.Error,
            CLEANSER_BAD_PROTOCOL_FOR_DISCONNECT_REQ = 15003 | XEvent.Severity.Error,
            CLEANSER_MESSAGE_ENDOFSTREAM = 15004 | XEvent.Severity.Error,
            CLEANSER_CODE_0 = 50725 | XEvent.Severity.Error,
            CLEANSER_CODE_1 = 50726 | XEvent.Severity.Error,
            CLEANSER_CODE_2 = 50727 | XEvent.Severity.Error,
            CLEANSER_CODE_3 = 50728 | XEvent.Severity.Error,
            CLEANSER_CODE_4 = 50729 | XEvent.Severity.Error,
            CLEANSER_CODE_5 = 50730 | XEvent.Severity.Error,
            CLEANSER_COMM_0 = 50750 | XEvent.Severity.Error,
            CLEANSER_COMM_1 = 50751 | XEvent.Severity.Error,
            CLEANSER_COMM_2 = 50752 | XEvent.Severity.Error,
            CLEANSER_CONFIG_0 = 50775 | XEvent.Severity.Error,
            CLEANSER_CONFIG_1 = 50776 | XEvent.Severity.Error,
            CLEANSER_CONFIG_2 = 50777 | XEvent.Severity.Error,
            CLEANSER_CONFIG_3 = 50778 | XEvent.Severity.Error,
            CLEANSER_INFO_0 = 50800 | XEvent.Severity.Info,
            CLEANSER_INFO_1 = 50801 | XEvent.Severity.Info,
            CLEANSER_INFO_2 = 50802 | XEvent.Severity.Info,
            CLEANSER_INFO_3 = 50803 | XEvent.Severity.Info,
            CLEANSER_INFO_4 = 50804 | XEvent.Severity.Info,
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\events\obj\catalogwatcher.h ===
// XEVENT_CATALOG_WATCHER_EXTRACTOR_INVALID_MEDIAID_LCID, 20000, Error
#define XEVENT_CATALOG_WATCHER_EXTRACTOR_INVALID_MEDIAID_LCID 0xC0004E20

// XEVENT_CATALOG_WATCHER_WATCHER_TIME_OUT, 20001, Error
#define XEVENT_CATALOG_WATCHER_WATCHER_TIME_OUT 0xC0004E21

// XEVENT_CATALOG_WATCHER_PRODUCER_EXCEPTION, 20002, Error
#define XEVENT_CATALOG_WATCHER_PRODUCER_EXCEPTION 0xC0004E22

// XEVENT_CATALOG_WATCHER_WATCHER_EXCEPTION, 20003, Error
#define XEVENT_CATALOG_WATCHER_WATCHER_EXCEPTION 0xC0004E23

// XEVENT_CATALOG_WATCHER_PUBLISHER_EXCEPTION, 20004, Error
#define XEVENT_CATALOG_WATCHER_PUBLISHER_EXCEPTION 0xC0004E24

// XEVENT_CATALOG_WATCHER_ESPPUBLISHER_FAST_OPERATION_ERROR, 20005, Error
#define XEVENT_CATALOG_WATCHER_ESPPUBLISHER_FAST_OPERATION_ERROR 0xC0004E25

// XEVENT_CATALOG_WATCHER_ESPPUBLISHER_FAST_OPERATION_WARNING, 20006, Warning
#define XEVENT_CATALOG_WATCHER_ESPPUBLISHER_FAST_OPERATION_WARNING 0x80004E26

// XEVENT_CATALOG_WATCHER_ESPPUBLISHER_EXCEPTION, 20007, Warning
#define XEVENT_CATALOG_WATCHER_ESPPUBLISHER_EXCEPTION 0x80004E27

// XEVENT_CATALOG_WATCHER_MEDIA_EXTRACTOR_ERROR, 20008, Warning
#define XEVENT_CATALOG_WATCHER_MEDIA_EXTRACTOR_ERROR 0x80004E28

// XEVENT_CATALOG_WATCHER_MEDIA_PRODUCER_ERROR, 20009, Warning
#define XEVENT_CATALOG_WATCHER_MEDIA_PRODUCER_ERROR 0x80004E29

// XEVENT_CATALOG_WATCHER_MEDIA_DOCUMENT_TOO_LARGE, 20010, Error
#define XEVENT_CATALOG_WATCHER_MEDIA_DOCUMENT_TOO_LARGE 0xC0004E2A

// XEVENT_CATALOG_WATCHER_PROCESSOR_EXCEPTION, 20011, Error
#define XEVENT_CATALOG_WATCHER_PROCESSOR_EXCEPTION 0xC0004E2B

// XEVENT_CATALOG_WATCHER_VIDEO_PRODUCER_ERROR, 20012, Warning
#define XEVENT_CATALOG_WATCHER_VIDEO_PRODUCER_ERROR 0x80004E2C

// XEVENT_CATALOG_WATCHER_AZURESTORAGE_PUBLISHER_EXCEPTION, 20013, Warning
#define XEVENT_CATALOG_WATCHER_AZURESTORAGE_PUBLISHER_EXCEPTION 0x80004E2D

// XEVENT_CATALOG_WATCHER_SPEECH_PRODUCER_ERROR, 20014, Warning
#define XEVENT_CATALOG_WATCHER_SPEECH_PRODUCER_ERROR 0x80004E2E
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\events\obj\cleanser.h ===
// XEVENT_CLEANSER_ETX_WRITE_FAIL, 15000, Error
#define XEVENT_CLEANSER_ETX_WRITE_FAIL 0xC0003A98

// XEVENT_CLEANSER_ETX_ADD_FAIL, 15001, Error
#define XEVENT_CLEANSER_ETX_ADD_FAIL 0xC0003A99

// XEVENT_CLEANSER_BAD_PROTOCOL_FOR_DATA_REQ, 15002, Error
#define XEVENT_CLEANSER_BAD_PROTOCOL_FOR_DATA_REQ 0xC0003A9A

// XEVENT_CLEANSER_BAD_PROTOCOL_FOR_DISCONNECT_REQ, 15003, Error
#define XEVENT_CLEANSER_BAD_PROTOCOL_FOR_DISCONNECT_REQ 0xC0003A9B

// XEVENT_CLEANSER_MESSAGE_ENDOFSTREAM, 15004, Error
#define XEVENT_CLEANSER_MESSAGE_ENDOFSTREAM 0xC0003A9C

// XEVENT_CLEANSER_CODE_0, 50725, Error
#define XEVENT_CLEANSER_CODE_0 0xC000C625

// XEVENT_CLEANSER_CODE_1, 50726, Error
#define XEVENT_CLEANSER_CODE_1 0xC000C626

// XEVENT_CLEANSER_CODE_2, 50727, Error
#define XEVENT_CLEANSER_CODE_2 0xC000C627

// XEVENT_CLEANSER_CODE_3, 50728, Error
#define XEVENT_CLEANSER_CODE_3 0xC000C628

// XEVENT_CLEANSER_CODE_4, 50729, Error
#define XEVENT_CLEANSER_CODE_4 0xC000C629

// XEVENT_CLEANSER_CODE_5, 50730, Error
#define XEVENT_CLEANSER_CODE_5 0xC000C62A

// XEVENT_CLEANSER_COMM_0, 50750, Error
#define XEVENT_CLEANSER_COMM_0 0xC000C63E

// XEVENT_CLEANSER_COMM_1, 50751, Error
#define XEVENT_CLEANSER_COMM_1 0xC000C63F

// XEVENT_CLEANSER_COMM_2, 50752, Error
#define XEVENT_CLEANSER_COMM_2 0xC000C640

// XEVENT_CLEANSER_CONFIG_0, 50775, Error
#define XEVENT_CLEANSER_CONFIG_0 0xC000C657

// XEVENT_CLEANSER_CONFIG_1, 50776, Error
#define XEVENT_CLEANSER_CONFIG_1 0xC000C658

// XEVENT_CLEANSER_CONFIG_2, 50777, Error
#define XEVENT_CLEANSER_CONFIG_2 0xC000C659

// XEVENT_CLEANSER_CONFIG_3, 50778, Error
#define XEVENT_CLEANSER_CONFIG_3 0xC000C65A

// XEVENT_CLEANSER_INFO_0, 50800, Info
#define XEVENT_CLEANSER_INFO_0 0x4000C670

// XEVENT_CLEANSER_INFO_1, 50801, Info
#define XEVENT_CLEANSER_INFO_1 0x4000C671

// XEVENT_CLEANSER_INFO_2, 50802, Info
#define XEVENT_CLEANSER_INFO_2 0x4000C672

// XEVENT_CLEANSER_INFO_3, 50803, Info
#define XEVENT_CLEANSER_INFO_3 0x4000C673

// XEVENT_CLEANSER_INFO_4, 50804, Info
#define XEVENT_CLEANSER_INFO_4 0x4000C674
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\events\obj\common.h ===
// XEVENT_SGINFO_CALL_SOURCE_INVALID, 40001, Error
#define XEVENT_SGINFO_CALL_SOURCE_INVALID 0xC0009C41

// XEVENT_SGINFO_VERIFY_PRIVILEGE, 40002, Error
#define XEVENT_SGINFO_VERIFY_PRIVILEGE 0xC0009C42

// XEVENT_XMGMT_FAILED_TO_REGISTER_ASSEMBLY, 40050, Warning
#define XEVENT_XMGMT_FAILED_TO_REGISTER_ASSEMBLY 0x80009C72

// XEVENT_HEALTH_REQUEST_FAILED, 40051, Error
#define XEVENT_HEALTH_REQUEST_FAILED 0xC0009C73

// XEVENT_HEALTH_INITIALIZE_INTEROP_FAILED, 40052, Error
#define XEVENT_HEALTH_INITIALIZE_INTEROP_FAILED 0xC0009C74

// XEVENT_HEALTH_REGISTERNATIVEHEALTHBLOCK_FAILED, 40053, Error
#define XEVENT_HEALTH_REGISTERNATIVEHEALTHBLOCK_FAILED 0xC0009C75

// XEVENT_HEALTH_LISTENER_CALLBACK_REQUEST_FAILED, 40054, Error
#define XEVENT_HEALTH_LISTENER_CALLBACK_REQUEST_FAILED 0xC0009C76

// XEVENT_HEALTH_LISTENER_CALLBACK_FAILED, 40055, Error
#define XEVENT_HEALTH_LISTENER_CALLBACK_FAILED 0xC0009C77

// XEVENT_MSNRR_EXTERNAL_EXCEPTION, 40056, Error
#define XEVENT_MSNRR_EXTERNAL_EXCEPTION 0xC0009C78

// XEVENT_SCS_NON_USER_EXCEPTION, 40057, Error
#define XEVENT_SCS_NON_USER_EXCEPTION 0xC0009C79

// XEVENT_FAST_FAIL_DUPLICATE_RESOURCE, 40058, Warning
#define XEVENT_FAST_FAIL_DUPLICATE_RESOURCE 0x80009C7A

// XEVENT_FAST_FAIL_ENABLED_DISABLED_TOGGLE, 40059, Info
#define XEVENT_FAST_FAIL_ENABLED_DISABLED_TOGGLE 0x40009C7B

// XEVENT_FAST_FAIL_BUCKET_COUNT_CHANGE, 40060, Info
#define XEVENT_FAST_FAIL_BUCKET_COUNT_CHANGE 0x40009C7C

// XEVENT_HEALTH_INITIALIZE_BLOCK_FAILED, 40061, Warning
#define XEVENT_HEALTH_INITIALIZE_BLOCK_FAILED 0x80009C7D

// XEVENT_SERVICE_KEY_LOAD_ERROR, 40062, Error
#define XEVENT_SERVICE_KEY_LOAD_ERROR 0xC0009C7E

// XEVENT_SERVICE_KEY_SAVE_ERROR, 40063, Error
#define XEVENT_SERVICE_KEY_SAVE_ERROR 0xC0009C7F

// XEVENT_SERVICE_KEY_NOT_FOUND, 40064, Error
#define XEVENT_SERVICE_KEY_NOT_FOUND 0xC0009C80

// XEVENT_GEOFENCE_TERRITORY_MAPPING_INVALID, 40065, Error
#define XEVENT_GEOFENCE_TERRITORY_MAPPING_INVALID 0xC0009C81

// XEVENT_GEOFENCE_TERRITORY_MAPPING_AMBIGUOUS, 40066, Error
#define XEVENT_GEOFENCE_TERRITORY_MAPPING_AMBIGUOUS 0xC0009C82

// XEVENT_GEOFENCE_TERRITORY_MAPPING_DUPLICATE, 40067, Info
#define XEVENT_GEOFENCE_TERRITORY_MAPPING_DUPLICATE 0x40009C83

// XEVENT_WIREDATA_DECRYPTION_ERROR, 40068, Warning
#define XEVENT_WIREDATA_DECRYPTION_ERROR 0x80009C84

// XEVENT_ACCELERATION_END_OF_STREAM, 40069, Warning
#define XEVENT_ACCELERATION_END_OF_STREAM 0x80009C85

// XEVENT_XBANC_END_OF_STREAM, 40070, Warning
#define XEVENT_XBANC_END_OF_STREAM 0x80009C86

// XEVENT_SERVICE_KEY_IMPORT_ERROR, 40071, Error
#define XEVENT_SERVICE_KEY_IMPORT_ERROR 0xC0009C87

// XEVENT_WIREDATA_DESERIALIZATION_ERROR, 40072, Warning
#define XEVENT_WIREDATA_DESERIALIZATION_ERROR 0x80009C88

// XEVENT_LSPLIB_DATABASE_ERROR, 40073, Error
#define XEVENT_LSPLIB_DATABASE_ERROR 0xC0009C89

// XEVENT_LOGTARGET_CREATE_ERROR, 40074, Error
#define XEVENT_LOGTARGET_CREATE_ERROR 0xC0009C8A

// XEVENT_SCS_QUEUE_FAILED_TO_UNCONSUME_TOKEN, 40075, Error
#define XEVENT_SCS_QUEUE_FAILED_TO_UNCONSUME_TOKEN 0xC0009C8B

// XEVENT_ACCOUNTS_HISTORY_GET_ERROR, 40076, Error
#define XEVENT_ACCOUNTS_HISTORY_GET_ERROR 0xC0009C8C

// XEVENT_ACCOUNTS_HISTORY_LOG_ERROR, 40077, Error
#define XEVENT_ACCOUNTS_HISTORY_LOG_ERROR 0xC0009C8D

// XEVENT_ACCOUNTS_GAMERTAG_HISTORY_LOG_ERROR, 40078, Error
#define XEVENT_ACCOUNTS_GAMERTAG_HISTORY_LOG_ERROR 0xC0009C8E

// XEVENT_ACCOUNTS_USER_GAMERTAG_THRESHOLD_EXCEEDED, 40079, Warning
#define XEVENT_ACCOUNTS_USER_GAMERTAG_THRESHOLD_EXCEEDED 0x80009C8F

// XEVENT_ACCOUNTS_MACHINE_GAMERTAG_THRESHOLD_EXCEEDED, 40080, Warning
#define XEVENT_ACCOUNTS_MACHINE_GAMERTAG_THRESHOLD_EXCEEDED 0x80009C90

// XEVENT_ACCOUNTS_PASSPORT_HISTORY_LOG_ERROR, 40081, Error
#define XEVENT_ACCOUNTS_PASSPORT_HISTORY_LOG_ERROR 0xC0009C91

// XEVENT_ACCOUNTS_USER_PASSPORT_THRESHOLD_EXCEEDED, 40082, Warning
#define XEVENT_ACCOUNTS_USER_PASSPORT_THRESHOLD_EXCEEDED 0x80009C92

// XEVENT_ACCOUNTS_MACHINE_PASSPORT_THRESHOLD_EXCEEDED, 40083, Warning
#define XEVENT_ACCOUNTS_MACHINE_PASSPORT_THRESHOLD_EXCEEDED 0x80009C93

// XEVENT_ACCOUNTS_RECOVERY_HISTORY_LOG_ERROR, 40084, Error
#define XEVENT_ACCOUNTS_RECOVERY_HISTORY_LOG_ERROR 0xC0009C94

// XEVENT_ACCOUNTS_USER_RECOVERY_THRESHOLD_EXCEEDED, 40085, Warning
#define XEVENT_ACCOUNTS_USER_RECOVERY_THRESHOLD_EXCEEDED 0x80009C95

// XEVENT_ACCOUNTS_MACHINE_RECOVERY_THRESHOLD_EXCEEDED, 40086, Warning
#define XEVENT_ACCOUNTS_MACHINE_RECOVERY_THRESHOLD_EXCEEDED 0x80009C96

// XEVENT_ACCOUNTS_HIJACKING_WARNING, 40087, Warning
#define XEVENT_ACCOUNTS_HIJACKING_WARNING 0x80009C97

// XEVENT_ACCOUNTS_HIJACKING_ERROR, 40088, Error
#define XEVENT_ACCOUNTS_HIJACKING_ERROR 0xC0009C98

// XEVENT_XCACHECONNECTION_NO_RECEIVETIMEOUT_SETTING, 40089, Error
#define XEVENT_XCACHECONNECTION_NO_RECEIVETIMEOUT_SETTING 0xC0009C99

// XEVENT_XCACHECONNECTION_NO_SENDTIMEOUT_SETTING, 40090, Error
#define XEVENT_XCACHECONNECTION_NO_SENDTIMEOUT_SETTING 0xC0009C9A

// XEVENT_AUTHDATA_NO_MORE_SERVICES_ERROR, 40091, Error
#define XEVENT_AUTHDATA_NO_MORE_SERVICES_ERROR 0xC0009C9B

// XEVENT_AAINFO_DATA_VERIFICATION_ERROR, 40092, Error
#define XEVENT_AAINFO_DATA_VERIFICATION_ERROR 0xC0009C9C

// XEVENT_AAINFO_DATA_VERIFICATION_WARNING, 40093, Warning
#define XEVENT_AAINFO_DATA_VERIFICATION_WARNING 0x80009C9D

// XEVENT_USER_FAMILY_DATA_MISSING, 40094, Error
#define XEVENT_USER_FAMILY_DATA_MISSING 0xC0009C9E

// XEVENT_COMMON_BILLING_CODE_CHANGE_STATE, 40095, Error
#define XEVENT_COMMON_BILLING_CODE_CHANGE_STATE 0xC0009C9F

// XEVENT_COMMON_BILLING_CODE_CHANGE_BILLING_STATE, 40096, Error
#define XEVENT_COMMON_BILLING_CODE_CHANGE_BILLING_STATE 0xC0009CA0

// XEVENT_ACCOUNTS_FAMILY_HISTORY_LOG_ERROR, 40097, Error
#define XEVENT_ACCOUNTS_FAMILY_HISTORY_LOG_ERROR 0xC0009CA1

// XEVENT_FINBUS_RECORD_TRANSACTION_INTENT_FAILURE, 40098, Error
#define XEVENT_FINBUS_RECORD_TRANSACTION_INTENT_FAILURE 0xC0009CA2

// XEVENT_FINBUS_RECORD_TRANSACTION_SUCESS_FAILURE, 40099, Error
#define XEVENT_FINBUS_RECORD_TRANSACTION_SUCESS_FAILURE 0xC0009CA3

// XEVENT_FINBUS_RECORD_TRANSACTION_RESULT_FAILURE, 40100, Error
#define XEVENT_FINBUS_RECORD_TRANSACTION_RESULT_FAILURE 0xC0009CA4

// XEVENT_FINBUS_RECORD_TRANSACTION_PREINTENT_FAILURE, 40101, Error
#define XEVENT_FINBUS_RECORD_TRANSACTION_PREINTENT_FAILURE 0xC0009CA5

// XEVENT_FINBUS_GET_RETRY_COUNT_FAILURE, 40102, Error
#define XEVENT_FINBUS_GET_RETRY_COUNT_FAILURE 0xC0009CA6

// XEVENT_FINBUS_GET_ITEM_FOR_RETRY_FAILURE, 40103, Error
#define XEVENT_FINBUS_GET_ITEM_FOR_RETRY_FAILURE 0xC0009CA7

// XEVENT_FINBUS_TOKEN_REDEMPTION_ITEM_RETRY_FAILURE, 40104, Error
#define XEVENT_FINBUS_TOKEN_REDEMPTION_ITEM_RETRY_FAILURE 0xC0009CA8

// XEVENT_FINBUS_PURCHASE_ORDER_ITEM_RETRY_FAILURE, 40105, Error
#define XEVENT_FINBUS_PURCHASE_ORDER_ITEM_RETRY_FAILURE 0xC0009CA9

// XEVENT_FINBUS_TRANSACTION_RESPONSE_IS_INVALID, 40106, Error
#define XEVENT_FINBUS_TRANSACTION_RESPONSE_IS_INVALID 0xC0009CAA

// XEVENT_FINBUS_MISSING_XNA_CREATOR_ID_ERROR, 40107, Error
#define XEVENT_FINBUS_MISSING_XNA_CREATOR_ID_ERROR 0xC0009CAB

// XEVENT_FINBUS_QUEUE_TIMER_RESET_ERROR, 40108, Error
#define XEVENT_FINBUS_QUEUE_TIMER_RESET_ERROR 0xC0009CAC

// XEVENT_FINBUS_QUEUE_IMPERSONATION_UNDO_ERROR, 40109, Error
#define XEVENT_FINBUS_QUEUE_IMPERSONATION_UNDO_ERROR 0xC0009CAD

// XEVENT_FINBUS_QUEUE_PUMP_ERROR, 40110, Error
#define XEVENT_FINBUS_QUEUE_PUMP_ERROR 0xC0009CAE

// XEVENT_FINBUS_QUEUE_GET_RETRYABLE_COUNT_ERROR, 40111, Error
#define XEVENT_FINBUS_QUEUE_GET_RETRYABLE_COUNT_ERROR 0xC0009CAF

// XEVENT_FINBUS_QUEUE_GET_ITEM_FOR_RETRY_ERROR, 40112, Error
#define XEVENT_FINBUS_QUEUE_GET_ITEM_FOR_RETRY_ERROR 0xC0009CB0

// XEVENT_FINBUS_QUEUE_RETRY_ITEM_ERROR, 40113, Error
#define XEVENT_FINBUS_QUEUE_RETRY_ITEM_ERROR 0xC0009CB1

// XEVENT_FINBUS_QUEUE_COMMUNICATION_ERROR, 40114, Error
#define XEVENT_FINBUS_QUEUE_COMMUNICATION_ERROR 0xC0009CB2

// XEVENT_MGMT_MISSING_REPORTING_COMPONENT_ID, 40115, Error
#define XEVENT_MGMT_MISSING_REPORTING_COMPONENT_ID 0xC0009CB3

// XEVENT_THREADPOOL_CONTEXT_EXCEPTION, 40116, Error
#define XEVENT_THREADPOOL_CONTEXT_EXCEPTION 0xC0009CB4

// XEVENT_THREADPOOL_THREAD_EXCEPTION, 40117, Error
#define XEVENT_THREADPOOL_THREAD_EXCEPTION 0xC0009CB5

// XEVENT_FINBUS_QUEUE_ITEM_FAILED, 40118, Warning
#define XEVENT_FINBUS_QUEUE_ITEM_FAILED 0x80009CB6

// XEVENT_ETX_EVENT_HEADER_VERSION_MISSING, 40119, Error
#define XEVENT_ETX_EVENT_HEADER_VERSION_MISSING 0xC0009CB7

// XEVENT_ACCOUNT_MOVE_SUBSCRIPTION_ERROR, 40120, Error
#define XEVENT_ACCOUNT_MOVE_SUBSCRIPTION_ERROR 0xC0009CB8

// XEVENT_SUBSCRIPTION_BAD_CREDITVALUE_ERROR, 40121, Error
#define XEVENT_SUBSCRIPTION_BAD_CREDITVALUE_ERROR 0xC0009CB9

// XEVENT_PASSPORT_GET_PROFILE_ERROR, 40122, Error
#define XEVENT_PASSPORT_GET_PROFILE_ERROR 0xC0009CBA

// XEVENT_TRACKED_API_CALL_DATABASE_ERROR, 40123, Error
#define XEVENT_TRACKED_API_CALL_DATABASE_ERROR 0xC0009CBB

// XEVENT_TRACKED_API_CALL_UCDB_DATABASE_ERROR, 40124, Error
#define XEVENT_TRACKED_API_CALL_UCDB_DATABASE_ERROR 0xC0009CBC

// XEVENT_COMMON_CODE_20, 50845, Error
#define XEVENT_COMMON_CODE_20 0xC000C69D

// XEVENT_CRYPTO_GENERAL_ERROR, 50846, Error
#define XEVENT_CRYPTO_GENERAL_ERROR 0xC000C69E

// XEVENT_COMMON_CODE_22, 50847, Error
#define XEVENT_COMMON_CODE_22 0xC000C69F

// XEVENT_COMMON_CODE_23, 50848, Error
#define XEVENT_COMMON_CODE_23 0xC000C6A0

// XEVENT_COMMON_CODE_24, 50849, Error
#define XEVENT_COMMON_CODE_24 0xC000C6A1

// XEVENT_MC_APPLICATION_ERROR, 50850, Error
#define XEVENT_MC_APPLICATION_ERROR 0xC000C6A2

// XEVENT_COMMON_CODE_26, 50851, Error
#define XEVENT_COMMON_CODE_26 0xC000C6A3

// XEVENT_COMMON_CODE_27, 50852, Error
#define XEVENT_COMMON_CODE_27 0xC000C6A4

// XEVENT_COMMON_CODE_28, 50853, Error
#define XEVENT_COMMON_CODE_28 0xC000C6A5

// XEVENT_COMMON_CODE_29, 50854, Error
#define XEVENT_COMMON_CODE_29 0xC000C6A6

// XEVENT_COMMON_CODE_30, 50855, Error
#define XEVENT_COMMON_CODE_30 0xC000C6A7

// XEVENT_COMMON_CODE_31, 50856, Error
#define XEVENT_COMMON_CODE_31 0xC000C6A8

// XEVENT_COMMON_CODE_32, 50857, Error
#define XEVENT_COMMON_CODE_32 0xC000C6A9

// XEVENT_COMMON_CODE_33, 50858, Error
#define XEVENT_COMMON_CODE_33 0xC000C6AA

// XEVENT_COMMON_CODE_34, 50859, Error
#define XEVENT_COMMON_CODE_34 0xC000C6AB

// XEVENT_COMMON_CODE_35, 50860, Error
#define XEVENT_COMMON_CODE_35 0xC000C6AC

// XEVENT_COMMON_CODE_36, 50861, Error
#define XEVENT_COMMON_CODE_36 0xC000C6AD

// XEVENT_COMMON_CODE_37, 50862, Error
#define XEVENT_COMMON_CODE_37 0xC000C6AE

// XEVENT_COMMON_CODE_38, 50863, Error
#define XEVENT_COMMON_CODE_38 0xC000C6AF

// XEVENT_MC_PLUGIN_ERROR, 50864, Error
#define XEVENT_MC_PLUGIN_ERROR 0xC000C6B0

// XEVENT_MC_PLUGIN_ERROR_1, 50865, Error
#define XEVENT_MC_PLUGIN_ERROR_1 0xC000C6B1

// XEVENT_COMMON_CODE_41, 50866, Error
#define XEVENT_COMMON_CODE_41 0xC000C6B2

// XEVENT_COMMON_CODE_42, 50867, Error
#define XEVENT_COMMON_CODE_42 0xC000C6B3

// XEVENT_COMMON_CODE_43, 50868, Error
#define XEVENT_COMMON_CODE_43 0xC000C6B4

// XEVENT_COMMON_CODE_46, 50871, Error
#define XEVENT_COMMON_CODE_46 0xC000C6B7

// XEVENT_COMMON_CODE_48, 50873, Error
#define XEVENT_COMMON_CODE_48 0xC000C6B9

// XEVENT_QUERY_BAD_PARAMETER, 50876, Error
#define XEVENT_QUERY_BAD_PARAMETER 0xC000C6BC

// XEVENT_QUERY_BAD_PARAMETER_1, 50877, Error
#define XEVENT_QUERY_BAD_PARAMETER_1 0xC000C6BD

// XEVENT_COMMON_CODE_53, 50878, Error
#define XEVENT_COMMON_CODE_53 0xC000C6BE

// XEVENT_COMMON_CODE_54, 50879, Error
#define XEVENT_COMMON_CODE_54 0xC000C6BF

// XEVENT_COMMON_CODE_55, 50880, Error
#define XEVENT_COMMON_CODE_55 0xC000C6C0

// XEVENT_COMMON_CODE_56, 50881, Error
#define XEVENT_COMMON_CODE_56 0xC000C6C1

// XEVENT_COMMON_CODE_57, 50882, Error
#define XEVENT_COMMON_CODE_57 0xC000C6C2

// XEVENT_COMMON_CODE_58, 50883, Error
#define XEVENT_COMMON_CODE_58 0xC000C6C3

// XEVENT_COMMON_CODE_59, 50884, Error
#define XEVENT_COMMON_CODE_59 0xC000C6C4

// XEVENT_MC_BAD_PARAMETER, 50885, Error
#define XEVENT_MC_BAD_PARAMETER 0xC000C6C5

// XEVENT_MC_BAD_PARAMETER_1, 50886, Error
#define XEVENT_MC_BAD_PARAMETER_1 0xC000C6C6

// XEVENT_MC_APPLICATION_ERROR_1, 50887, Error
#define XEVENT_MC_APPLICATION_ERROR_1 0xC000C6C7

// XEVENT_MC_APPLICATION_ERROR_2, 50888, Error
#define XEVENT_MC_APPLICATION_ERROR_2 0xC000C6C8

// XEVENT_MC_APPLICATION_ERROR_3, 50889, Error
#define XEVENT_MC_APPLICATION_ERROR_3 0xC000C6C9

// XEVENT_MC_BAD_PARAMETER_2, 50890, Error
#define XEVENT_MC_BAD_PARAMETER_2 0xC000C6CA

// XEVENT_COMMON_CODE_66, 50891, Error
#define XEVENT_COMMON_CODE_66 0xC000C6CB

// XEVENT_MC_BAD_CODE, 50892, Error
#define XEVENT_MC_BAD_CODE 0xC000C6CC

// XEVENT_MC_BAD_CODE_1, 50893, Error
#define XEVENT_MC_BAD_CODE_1 0xC000C6CD

// XEVENT_MC_BAD_CODE_2, 50894, Error
#define XEVENT_MC_BAD_CODE_2 0xC000C6CE

// XEVENT_MC_BAD_CODE_3, 50895, Error
#define XEVENT_MC_BAD_CODE_3 0xC000C6CF

// XEVENT_MC_BAD_CODE_4, 50896, Error
#define XEVENT_MC_BAD_CODE_4 0xC000C6D0

// XEVENT_MC_BAD_CODE_5, 50897, Error
#define XEVENT_MC_BAD_CODE_5 0xC000C6D1

// XEVENT_MC_BAD_CODE_6, 50898, Error
#define XEVENT_MC_BAD_CODE_6 0xC000C6D2

// XEVENT_COMMON_CODE_74, 50899, Error
#define XEVENT_COMMON_CODE_74 0xC000C6D3

// XEVENT_COMMON_CODE_75, 50900, Error
#define XEVENT_COMMON_CODE_75 0xC000C6D4

// XEVENT_COMMON_CODE_76, 50901, Error
#define XEVENT_COMMON_CODE_76 0xC000C6D5

// XEVENT_MC_BAD_CODE_7, 50902, Error
#define XEVENT_MC_BAD_CODE_7 0xC000C6D6

// XEVENT_MC_BAD_CODE_8, 50903, Error
#define XEVENT_MC_BAD_CODE_8 0xC000C6D7

// XEVENT_MC_BAD_CODE_9, 50904, Error
#define XEVENT_MC_BAD_CODE_9 0xC000C6D8

// XEVENT_MC_BAD_CODE_10, 50905, Error
#define XEVENT_MC_BAD_CODE_10 0xC000C6D9

// XEVENT_MC_BAD_CODE_11, 50906, Error
#define XEVENT_MC_BAD_CODE_11 0xC000C6DA

// XEVENT_MC_BAD_CODE_12, 50907, Error
#define XEVENT_MC_BAD_CODE_12 0xC000C6DB

// XEVENT_MC_BAD_CODE_13, 50908, Error
#define XEVENT_MC_BAD_CODE_13 0xC000C6DC

// XEVENT_MC_BAD_CODE_14, 50909, Error
#define XEVENT_MC_BAD_CODE_14 0xC000C6DD

// XEVENT_COMMON_CODE_85, 50910, Error
#define XEVENT_COMMON_CODE_85 0xC000C6DE

// XEVENT_COMMON_CODE_86, 50911, Error
#define XEVENT_COMMON_CODE_86 0xC000C6DF

// XEVENT_FORBIDDEN_NAMES_LOAD_FAILURE, 50912, Error
#define XEVENT_FORBIDDEN_NAMES_LOAD_FAILURE 0xC000C6E0

// XEVENT_MC_APPLICATION_ERROR_5, 50913, Error
#define XEVENT_MC_APPLICATION_ERROR_5 0xC000C6E1

// XEVENT_MC_APPLICATION_ERROR_6, 50914, Error
#define XEVENT_MC_APPLICATION_ERROR_6 0xC000C6E2

// XEVENT_MC_APPLICATION_ERROR_7, 50915, Error
#define XEVENT_MC_APPLICATION_ERROR_7 0xC000C6E3

// XEVENT_COMMON_CODE_91, 50916, Error
#define XEVENT_COMMON_CODE_91 0xC000C6E4

// XEVENT_COMMON_CODE_92, 50917, Error
#define XEVENT_COMMON_CODE_92 0xC000C6E5

// XEVENT_MGMT_GENERIC_ERROR, 50918, Error
#define XEVENT_MGMT_GENERIC_ERROR 0xC000C6E6

// XEVENT_MGMT_GENERIC_ERROR_1, 50919, Error
#define XEVENT_MGMT_GENERIC_ERROR_1 0xC000C6E7

// XEVENT_MGMT_GENERIC_ERROR_2, 50920, Error
#define XEVENT_MGMT_GENERIC_ERROR_2 0xC000C6E8

// XEVENT_MGMT_GENERIC_ERROR_3, 50921, Error
#define XEVENT_MGMT_GENERIC_ERROR_3 0xC000C6E9

// XEVENT_COMMON_CODE_97, 50922, Error
#define XEVENT_COMMON_CODE_97 0xC000C6EA

// XEVENT_MGMT_GENERIC_ERROR_4, 50923, Error
#define XEVENT_MGMT_GENERIC_ERROR_4 0xC000C6EB

// XEVENT_COMMON_CODE_99, 50924, Error
#define XEVENT_COMMON_CODE_99 0xC000C6EC

// XEVENT_COMMON_CODE_100, 50925, Error
#define XEVENT_COMMON_CODE_100 0xC000C6ED

// XEVENT_COMMON_CODE_101, 50926, Error
#define XEVENT_COMMON_CODE_101 0xC000C6EE

// XEVENT_COMMON_CODE_102, 50927, Error
#define XEVENT_COMMON_CODE_102 0xC000C6EF

// XEVENT_COMMON_CODE_103, 50928, Error
#define XEVENT_COMMON_CODE_103 0xC000C6F0

// XEVENT_COMMON_CODE_104, 50929, Error
#define XEVENT_COMMON_CODE_104 0xC000C6F1

// XEVENT_COMMON_CODE_105, 50930, Error
#define XEVENT_COMMON_CODE_105 0xC000C6F2

// XEVENT_COMMON_CODE_106, 50931, Error
#define XEVENT_COMMON_CODE_106 0xC000C6F3

// XEVENT_COMMON_CODE_107, 50932, Error
#define XEVENT_COMMON_CODE_107 0xC000C6F4

// XEVENT_COMMON_CODE_108, 50933, Error
#define XEVENT_COMMON_CODE_108 0xC000C6F5

// XEVENT_COMMON_CODE_109, 50934, Error
#define XEVENT_COMMON_CODE_109 0xC000C6F6

// XEVENT_HEALTH_GENERIC_ERROR_1, 50935, Error
#define XEVENT_HEALTH_GENERIC_ERROR_1 0xC000C6F7

// XEVENT_SQL_EXECUTE_READER, 50936, Error
#define XEVENT_SQL_EXECUTE_READER 0xC000C6F8

// XEVENT_SQL_EXECUTE_READER_BEHAVIOR, 50937, Error
#define XEVENT_SQL_EXECUTE_READER_BEHAVIOR 0xC000C6F9

// XEVENT_SQL_EXECUTE_NON_QUERY, 50938, Error
#define XEVENT_SQL_EXECUTE_NON_QUERY 0xC000C6FA

// XEVENT_SQL_EXECUTE_SCALAR, 50939, Error
#define XEVENT_SQL_EXECUTE_SCALAR 0xC000C6FB

// XEVENT_COUNTRY_LIST_MISSING, 50940, Error
#define XEVENT_COUNTRY_LIST_MISSING 0xC000C6FC

// XEVENT_COMMON_CODE_117, 50942, Error
#define XEVENT_COMMON_CODE_117 0xC000C6FE

// XEVENT_COMMON_CODE_118, 50943, Error
#define XEVENT_COMMON_CODE_118 0xC000C6FF

// XEVENT_DEPRECATED_COMMON_CODE_119, 50944, Error
#define XEVENT_DEPRECATED_COMMON_CODE_119 0xC000C700

// XEVENT_DEPRECATED_COMMON_CODE_120, 50945, Error
#define XEVENT_DEPRECATED_COMMON_CODE_120 0xC000C701

// XEVENT_COMMON_CODE_121, 50946, Error
#define XEVENT_COMMON_CODE_121 0xC000C702

// XEVENT_COMMON_CODE_122, 50947, Error
#define XEVENT_COMMON_CODE_122 0xC000C703

// XEVENT_CRYPTO_TOO_MANY_USER_KEYS, 50948, Warning
#define XEVENT_CRYPTO_TOO_MANY_USER_KEYS 0x8000C704

// XEVENT_CRYPTO_FAILED_GET_USER_KEYS, 50949, Error
#define XEVENT_CRYPTO_FAILED_GET_USER_KEYS 0xC000C705

// XEVENT_MUSICNET_EXTERNAL_EXCEPTION, 50958, Error
#define XEVENT_MUSICNET_EXTERNAL_EXCEPTION 0xC000C70E

// XEVENT_COMMON_CODE_146, 50971, Error
#define XEVENT_COMMON_CODE_146 0xC000C71B

// XEVENT_COMMON_CODE_147, 50972, Error
#define XEVENT_COMMON_CODE_147 0xC000C71C

// XEVENT_COMMON_CODE_148, 50973, Error
#define XEVENT_COMMON_CODE_148 0xC000C71D

// XEVENT_COMMON_CODE_149, 50974, Error
#define XEVENT_COMMON_CODE_149 0xC000C71E

// XEVENT_COMMON_CODE_150, 50975, Error
#define XEVENT_COMMON_CODE_150 0xC000C71F

// XEVENT_COMMON_CODE_151, 50976, Error
#define XEVENT_COMMON_CODE_151 0xC000C720

// XEVENT_COMMON_CODE_152, 50977, Error
#define XEVENT_COMMON_CODE_152 0xC000C721

// XEVENT_COMMON_CODE_153, 50978, Error
#define XEVENT_COMMON_CODE_153 0xC000C722

// XEVENT_COMMON_CODE_154, 50979, Error
#define XEVENT_COMMON_CODE_154 0xC000C723

// XEVENT_COMMON_CODE_155, 50980, Error
#define XEVENT_COMMON_CODE_155 0xC000C724

// XEVENT_COMMON_CODE_156, 50981, Error
#define XEVENT_COMMON_CODE_156 0xC000C725

// XEVENT_COMMON_CODE_157, 50982, Error
#define XEVENT_COMMON_CODE_157 0xC000C726

// XEVENT_COMMON_CODE_158, 50983, Error
#define XEVENT_COMMON_CODE_158 0xC000C727

// XEVENT_COMMON_CODE_159, 50984, Error
#define XEVENT_COMMON_CODE_159 0xC000C728

// XEVENT_COMMON_CODE_160, 50985, Error
#define XEVENT_COMMON_CODE_160 0xC000C729

// XEVENT_COMMON_CODE_161, 50986, Error
#define XEVENT_COMMON_CODE_161 0xC000C72A

// XEVENT_COMMON_CODE_162, 50987, Error
#define XEVENT_COMMON_CODE_162 0xC000C72B

// XEVENT_COMMON_CODE_163, 50988, Error
#define XEVENT_COMMON_CODE_163 0xC000C72C

// XEVENT_COMMON_CODE_164, 50989, Error
#define XEVENT_COMMON_CODE_164 0xC000C72D

// XEVENT_COMMON_CODE_165, 50990, Error
#define XEVENT_COMMON_CODE_165 0xC000C72E

// XEVENT_COMMON_CODE_166, 50991, Error
#define XEVENT_COMMON_CODE_166 0xC000C72F

// XEVENT_COMMON_CODE_167, 50992, Error
#define XEVENT_COMMON_CODE_167 0xC000C730

// XEVENT_COMMON_CODE_168, 50993, Error
#define XEVENT_COMMON_CODE_168 0xC000C731

// XEVENT_COMMON_CODE_169, 50994, Error
#define XEVENT_COMMON_CODE_169 0xC000C732

// XEVENT_COMMON_CODE_170, 50995, Error
#define XEVENT_COMMON_CODE_170 0xC000C733

// XEVENT_COMMON_CODE_171, 50996, Error
#define XEVENT_COMMON_CODE_171 0xC000C734

// XEVENT_COMMON_CODE_172, 50997, Error
#define XEVENT_COMMON_CODE_172 0xC000C735

// XEVENT_COMMON_CODE_173, 50998, Error
#define XEVENT_COMMON_CODE_173 0xC000C736

// XEVENT_COMMON_CODE_174, 50999, Error
#define XEVENT_COMMON_CODE_174 0xC000C737

// XEVENT_COMMON_CODE_175, 51000, Error
#define XEVENT_COMMON_CODE_175 0xC000C738

// XEVENT_COMMON_CODE_176, 51001, Error
#define XEVENT_COMMON_CODE_176 0xC000C739

// XEVENT_COMMON_CODE_177, 51002, Error
#define XEVENT_COMMON_CODE_177 0xC000C73A

// XEVENT_COMMON_CODE_178, 51003, Error
#define XEVENT_COMMON_CODE_178 0xC000C73B

// XEVENT_COMMON_CODE_179, 51004, Error
#define XEVENT_COMMON_CODE_179 0xC000C73C

// XEVENT_COMMON_CODE_180, 51005, Error
#define XEVENT_COMMON_CODE_180 0xC000C73D

// XEVENT_COMMON_CODE_181, 51006, Error
#define XEVENT_COMMON_CODE_181 0xC000C73E

// XEVENT_COMMON_CODE_182, 51007, Error
#define XEVENT_COMMON_CODE_182 0xC000C73F

// XEVENT_COMMON_CODE_183, 51008, Error
#define XEVENT_COMMON_CODE_183 0xC000C740

// XEVENT_COMMON_CODE_184, 51009, Error
#define XEVENT_COMMON_CODE_184 0xC000C741

// XEVENT_COMMON_CODE_185, 51010, Error
#define XEVENT_COMMON_CODE_185 0xC000C742

// XEVENT_WEBSTORE_EXECUTE_ERROR, 51011, Error
#define XEVENT_WEBSTORE_EXECUTE_ERROR 0xC000C743

// XEVENT_WEBSTORE_EXECUTE_TIMEOUT_ERROR, 51012, Error
#define XEVENT_WEBSTORE_EXECUTE_TIMEOUT_ERROR 0xC000C744

// XEVENT_WEBSTORE_EXECUTE_DEADLOCK_ERROR, 51013, Error
#define XEVENT_WEBSTORE_EXECUTE_DEADLOCK_ERROR 0xC000C745

// XEVENT_COMMON_CODE_189, 51014, Error
#define XEVENT_COMMON_CODE_189 0xC000C746

// XEVENT_COMMON_CODE_190, 51015, Error
#define XEVENT_COMMON_CODE_190 0xC000C747

// XEVENT_COMMON_CODE_191, 51016, Error
#define XEVENT_COMMON_CODE_191 0xC000C748

// XEVENT_COMMON_CODE_192, 51017, Error
#define XEVENT_COMMON_CODE_192 0xC000C749

// XEVENT_COMMON_CODE_193, 51018, Error
#define XEVENT_COMMON_CODE_193 0xC000C74A

// XEVENT_COMMON_CODE_194, 51019, Error
#define XEVENT_COMMON_CODE_194 0xC000C74B

// XEVENT_COMMON_CODE_195, 51020, Error
#define XEVENT_COMMON_CODE_195 0xC000C74C

// XEVENT_COMMON_CODE_196, 51021, Error
#define XEVENT_COMMON_CODE_196 0xC000C74D

// XEVENT_COMMON_CODE_197, 51022, Error
#define XEVENT_COMMON_CODE_197 0xC000C74E

// XEVENT_COMMON_CODE_198, 51023, Error
#define XEVENT_COMMON_CODE_198 0xC000C74F

// XEVENT_COMMON_CODE_199, 51024, Error
#define XEVENT_COMMON_CODE_199 0xC000C750

// XEVENT_COMMON_CODE_200, 51025, Error
#define XEVENT_COMMON_CODE_200 0xC000C751

// XEVENT_DEPRECATED_SYNCCAST_EXTERNAL_EXCEPTION, 51030, Error
#define XEVENT_DEPRECATED_SYNCCAST_EXTERNAL_EXCEPTION 0xC000C756

// XEVENT_COMMON_CODE_208, 51033, Error
#define XEVENT_COMMON_CODE_208 0xC000C759

// XEVENT_COMMON_CODE_209, 51034, Error
#define XEVENT_COMMON_CODE_209 0xC000C75A

// XEVENT_COMMON_CODE_210, 51035, Error
#define XEVENT_COMMON_CODE_210 0xC000C75B

// XEVENT_COMMON_CODE_211, 51036, Error
#define XEVENT_COMMON_CODE_211 0xC000C75C

// XEVENT_COMMON_CODE_212, 51037, Error
#define XEVENT_COMMON_CODE_212 0xC000C75D

// XEVENT_COMMON_CODE_213, 51038, Error
#define XEVENT_COMMON_CODE_213 0xC000C75E

// XEVENT_COMMON_CODE_214, 51039, Error
#define XEVENT_COMMON_CODE_214 0xC000C75F

// XEVENT_COMMON_CODE_215, 51040, Error
#define XEVENT_COMMON_CODE_215 0xC000C760

// XEVENT_COMMON_CODE_216, 51041, Error
#define XEVENT_COMMON_CODE_216 0xC000C761

// XEVENT_COMMON_CODE_217, 51042, Error
#define XEVENT_COMMON_CODE_217 0xC000C762

// XEVENT_COMMON_CODE_218, 51043, Error
#define XEVENT_COMMON_CODE_218 0xC000C763

// XEVENT_COMMON_CODE_219, 51044, Error
#define XEVENT_COMMON_CODE_219 0xC000C764

// XEVENT_COMMON_CODE_220, 51045, Error
#define XEVENT_COMMON_CODE_220 0xC000C765

// XEVENT_COMMON_CODE_221, 51046, Error
#define XEVENT_COMMON_CODE_221 0xC000C766

// XEVENT_COMMON_CODE_222, 51047, Error
#define XEVENT_COMMON_CODE_222 0xC000C767

// XEVENT_COMMON_CODE_223, 51048, Error
#define XEVENT_COMMON_CODE_223 0xC000C768

// XEVENT_COMMON_CODE_224, 51049, Error
#define XEVENT_COMMON_CODE_224 0xC000C769

// XEVENT_COMMON_CODE_225, 51050, Error
#define XEVENT_COMMON_CODE_225 0xC000C76A

// XEVENT_COMMON_CODE_226, 51051, Error
#define XEVENT_COMMON_CODE_226 0xC000C76B

// XEVENT_COMMON_CODE_227, 51052, Error
#define XEVENT_COMMON_CODE_227 0xC000C76C

// XEVENT_COMMON_CODE_228, 51053, Error
#define XEVENT_COMMON_CODE_228 0xC000C76D

// XEVENT_DEPRECATED_COMMON_CODE_229, 51054, Error
#define XEVENT_DEPRECATED_COMMON_CODE_229 0xC000C76E

// XEVENT_DEPRECATED_COMMON_CODE_230, 51055, Error
#define XEVENT_DEPRECATED_COMMON_CODE_230 0xC000C76F

// XEVENT_COMMON_CODE_231, 51056, Error
#define XEVENT_COMMON_CODE_231 0xC000C770

// XEVENT_COMMON_CODE_232, 51057, Error
#define XEVENT_COMMON_CODE_232 0xC000C771

// XEVENT_WMIS_EXTERNAL_EXCEPTION, 51058, Error
#define XEVENT_WMIS_EXTERNAL_EXCEPTION 0xC000C772

// XEVENT_COMMON_CODE_MATCH_STARTMIGRATE_FAILED, 51059, Error
#define XEVENT_COMMON_CODE_MATCH_STARTMIGRATE_FAILED 0xC000C773

// XEVENT_COMMON_CODE_MATCH_MIGRATESTATUS_FAILED_SPROC, 51060, Error
#define XEVENT_COMMON_CODE_MATCH_MIGRATESTATUS_FAILED_SPROC 0xC000C774

// XEVENT_COMMON_CODE_MATCH_UPDLTC_TV_FAILED, 51061, Error
#define XEVENT_COMMON_CODE_MATCH_UPDLTC_TV_FAILED 0xC000C775

// XEVENT_COMMON_CODE_MATCH_UPDLTC_NPDB_FAILED, 51062, Error
#define XEVENT_COMMON_CODE_MATCH_UPDLTC_NPDB_FAILED 0xC000C776

// XEVENT_COMMON_CODE_LSPLIB_SQLEXCEPTION, 51063, Error
#define XEVENT_COMMON_CODE_LSPLIB_SQLEXCEPTION 0xC000C777

// XEVENT_HEALTH_REPORT_RED, 51064, Error
#define XEVENT_HEALTH_REPORT_RED 0xC000C778

// XEVENT_HEALTH_ENGINE_FAILURE, 51065, Error
#define XEVENT_HEALTH_ENGINE_FAILURE 0xC000C779

// XEVENT_FEAPP_INITIALIZATION_METHOD_FAILED, 51066, Error
#define XEVENT_FEAPP_INITIALIZATION_METHOD_FAILED 0xC000C77A

// XEVENT_FEAPP_INITIALIZATION_METHOD_NOT_FOUND, 51067, Error
#define XEVENT_FEAPP_INITIALIZATION_METHOD_NOT_FOUND 0xC000C77B

// XEVENT_FAST_FAIL_MISSING_COUNTERS, 51068, Error
#define XEVENT_FAST_FAIL_MISSING_COUNTERS 0xC000C77C

// XEVENT_FAST_FAIL_MISSING_RESOURCE, 51069, Error
#define XEVENT_FAST_FAIL_MISSING_RESOURCE 0xC000C77D

// XEVENT_FEAPP_COMPRESSION_ERROR, 51070, Error
#define XEVENT_FEAPP_COMPRESSION_ERROR 0xC000C77E

// XEVENT_UNHANDLED_THREAD_EXCEPTION, 51071, Error
#define XEVENT_UNHANDLED_THREAD_EXCEPTION 0xC000C77F

// XEVENT_FEAPP_INIT_FAILURE, 51072, Error
#define XEVENT_FEAPP_INIT_FAILURE 0xC000C780

// XEVENT_FORBIDDEN_NAMES_EXCLUDED_TITLES_CONFIG_ERROR, 51073, Error
#define XEVENT_FORBIDDEN_NAMES_EXCLUDED_TITLES_CONFIG_ERROR 0xC000C781

// XEVENT_COMMON_COMM_6, 51231, Error
#define XEVENT_COMMON_COMM_6 0xC000C81F

// XEVENT_COMMON_COMM_7, 51232, Error
#define XEVENT_COMMON_COMM_7 0xC000C820

// XEVENT_COMMON_COMM_8, 51233, Error
#define XEVENT_COMMON_COMM_8 0xC000C821

// XEVENT_COMMON_COMM_9, 51234, Error
#define XEVENT_COMMON_COMM_9 0xC000C822

// XEVENT_COMMON_COMM_10, 51235, Error
#define XEVENT_COMMON_COMM_10 0xC000C823

// XEVENT_COMMON_COMM_11, 51236, Error
#define XEVENT_COMMON_COMM_11 0xC000C824

// XEVENT_COMMON_COMM_12, 51237, Error
#define XEVENT_COMMON_COMM_12 0xC000C825

// XEVENT_COMMON_COMM_13, 51238, Error
#define XEVENT_COMMON_COMM_13 0xC000C826

// XEVENT_XCACHE_CLIENT_BROKEN_PIPE, 51239, Error
#define XEVENT_XCACHE_CLIENT_BROKEN_PIPE 0xC000C827

// XEVENT_XCACHE_CLIENT_BROKEN_PIPE_1, 51240, Error
#define XEVENT_XCACHE_CLIENT_BROKEN_PIPE_1 0xC000C828

// XEVENT_XCACHE_CLIENT_BROKEN_PIPE_2, 51241, Error
#define XEVENT_XCACHE_CLIENT_BROKEN_PIPE_2 0xC000C829

// XEVENT_XCACHE_CLIENT_BROKEN_PIPE_3, 51242, Error
#define XEVENT_XCACHE_CLIENT_BROKEN_PIPE_3 0xC000C82A

// XEVENT_XCACHE_CLIENT_BROKEN_PIPE_4, 51243, Error
#define XEVENT_XCACHE_CLIENT_BROKEN_PIPE_4 0xC000C82B

// XEVENT_XCACHE_SERVER_BUSY, 51244, Error
#define XEVENT_XCACHE_SERVER_BUSY 0xC000C82C

// XEVENT_XCACHE_INVALID_MESSAGE, 51245, Error
#define XEVENT_XCACHE_INVALID_MESSAGE 0xC000C82D

// XEVENT_XCACHE_INVALID_MESSAGE_1, 51246, Error
#define XEVENT_XCACHE_INVALID_MESSAGE_1 0xC000C82E

// XEVENT_XCACHE_INVALID_MESSAGE_2, 51247, Error
#define XEVENT_XCACHE_INVALID_MESSAGE_2 0xC000C82F

// XEVENT_XCACHE_INVALID_MESSAGE_3, 51248, Error
#define XEVENT_XCACHE_INVALID_MESSAGE_3 0xC000C830

// XEVENT_XCACHE_INVALID_MESSAGE_4, 51249, Error
#define XEVENT_XCACHE_INVALID_MESSAGE_4 0xC000C831

// XEVENT_XCACHE_INVALID_MESSAGE_5, 51250, Error
#define XEVENT_XCACHE_INVALID_MESSAGE_5 0xC000C832

// XEVENT_XCACHE_INVALID_MESSAGE_6, 51251, Error
#define XEVENT_XCACHE_INVALID_MESSAGE_6 0xC000C833

// XEVENT_PIPE_FAILURE, 51252, Error
#define XEVENT_PIPE_FAILURE 0xC000C834

// XEVENT_PIPE_FAILURE_1, 51253, Error
#define XEVENT_PIPE_FAILURE_1 0xC000C835

// XEVENT_PIPE_FAILURE_2, 51254, Error
#define XEVENT_PIPE_FAILURE_2 0xC000C836

// XEVENT_AUTHDATA_SG_COMMUNICATION_ERROR, 51255, Error
#define XEVENT_AUTHDATA_SG_COMMUNICATION_ERROR 0xC000C837

// XEVENT_COMMON_COMM_31, 51256, Error
#define XEVENT_COMMON_COMM_31 0xC000C838

// XEVENT_AUTHDATA_SG_COMMUNICATION_ERROR_1, 51257, Error
#define XEVENT_AUTHDATA_SG_COMMUNICATION_ERROR_1 0xC000C839

// XEVENT_MC_XRL_REQUEST_ERROR, 51258, Error
#define XEVENT_MC_XRL_REQUEST_ERROR 0xC000C83A

// XEVENT_COMMON_COMM_34, 51259, Error
#define XEVENT_COMMON_COMM_34 0xC000C83B

// XEVENT_COMMON_COMM_35, 51260, Error
#define XEVENT_COMMON_COMM_35 0xC000C83C

// XEVENT_COMMON_COMM_36, 51261, Error
#define XEVENT_COMMON_COMM_36 0xC000C83D

// XEVENT_XCACHE_INVALID_MESSAGE_7, 51262, Error
#define XEVENT_XCACHE_INVALID_MESSAGE_7 0xC000C83E

// XEVENT_XCACHE_INVALID_RESPONSE_1, 51263, Error
#define XEVENT_XCACHE_INVALID_RESPONSE_1 0xC000C83F

// XEVENT_FORBIDDEN_NAMES_LOAD_SUCCESS, 51264, Info
#define XEVENT_FORBIDDEN_NAMES_LOAD_SUCCESS 0x4000C840

// XEVENT_FORBIDDEN_NAMES_UNVETTED_STRING, 51265, Error
#define XEVENT_FORBIDDEN_NAMES_UNVETTED_STRING 0xC000C841

// XEVENT_MUSICNET_ACCOUNT_CREATE_FAILED, 51354, Error
#define XEVENT_MUSICNET_ACCOUNT_CREATE_FAILED 0xC000C89A

// XEVENT_COMMON_CONFIG_69, 51394, Warning
#define XEVENT_COMMON_CONFIG_69 0x8000C8C2

// XEVENT_COMMON_CONFIG_70, 51395, Error
#define XEVENT_COMMON_CONFIG_70 0xC000C8C3

// XEVENT_COMMON_CONFIG_71, 51396, Warning
#define XEVENT_COMMON_CONFIG_71 0x8000C8C4

// XEVENT_COMMON_CONFIG_72, 51397, Warning
#define XEVENT_COMMON_CONFIG_72 0x8000C8C5

// XEVENT_COMMON_CONFIG_73, 51398, Warning
#define XEVENT_COMMON_CONFIG_73 0x8000C8C6

// XEVENT_COMMON_CONFIG_74, 51399, Warning
#define XEVENT_COMMON_CONFIG_74 0x8000C8C7

// XEVENT_COMMON_CONFIG_75, 51400, Warning
#define XEVENT_COMMON_CONFIG_75 0x8000C8C8

// XEVENT_COMMON_CONFIG_76, 51401, Warning
#define XEVENT_COMMON_CONFIG_76 0x8000C8C9

// XEVENT_COMMON_CONFIG_77, 51402, Warning
#define XEVENT_COMMON_CONFIG_77 0x8000C8CA

// XEVENT_COMMON_CONFIG_78, 51403, Error
#define XEVENT_COMMON_CONFIG_78 0xC000C8CB

// XEVENT_COMMON_CONFIG_79, 51404, Warning
#define XEVENT_COMMON_CONFIG_79 0x8000C8CC

// XEVENT_COMMON_CONFIG_80, 51405, Warning
#define XEVENT_COMMON_CONFIG_80 0x8000C8CD

// XEVENT_COMMON_CONFIG_81, 51406, Warning
#define XEVENT_COMMON_CONFIG_81 0x8000C8CE

// XEVENT_COMMON_CONFIG_82, 51407, Warning
#define XEVENT_COMMON_CONFIG_82 0x8000C8CF

// XEVENT_COMMON_CONFIG_83, 51408, Warning
#define XEVENT_COMMON_CONFIG_83 0x8000C8D0

// XEVENT_COMMON_CONFIG_84, 51409, Error
#define XEVENT_COMMON_CONFIG_84 0xC000C8D1

// XEVENT_COMMON_CONFIG_85, 51410, Error
#define XEVENT_COMMON_CONFIG_85 0xC000C8D2

// XEVENT_COMMON_CONFIG_86, 51411, Error
#define XEVENT_COMMON_CONFIG_86 0xC000C8D3

// XEVENT_COMMON_CONFIG_87, 51412, Error
#define XEVENT_COMMON_CONFIG_87 0xC000C8D4

// XEVENT_COMMON_CONFIG_88, 51413, Error
#define XEVENT_COMMON_CONFIG_88 0xC000C8D5

// XEVENT_COMMON_CONFIG_89, 51414, Error
#define XEVENT_COMMON_CONFIG_89 0xC000C8D6

// XEVENT_COMMON_CONFIG_90, 51415, Error
#define XEVENT_COMMON_CONFIG_90 0xC000C8D7

// XEVENT_COMMON_CONFIG_91, 51416, Error
#define XEVENT_COMMON_CONFIG_91 0xC000C8D8

// XEVENT_COMMON_CONFIG_92, 51417, Error
#define XEVENT_COMMON_CONFIG_92 0xC000C8D9

// XEVENT_COMMON_CONFIG_93, 51418, Error
#define XEVENT_COMMON_CONFIG_93 0xC000C8DA

// XEVENT_COMMON_CONFIG_94, 51419, Error
#define XEVENT_COMMON_CONFIG_94 0xC000C8DB

// XEVENT_COMMON_CONFIG_95, 51420, Error
#define XEVENT_COMMON_CONFIG_95 0xC000C8DC

// XEVENT_COMMON_CONFIG_96, 51421, Error
#define XEVENT_COMMON_CONFIG_96 0xC000C8DD

// XEVENT_COMMON_CONFIG_97, 51422, Error
#define XEVENT_COMMON_CONFIG_97 0xC000C8DE

// XEVENT_COMMON_CONFIG_98, 51423, Error
#define XEVENT_COMMON_CONFIG_98 0xC000C8DF

// XEVENT_COMMON_CONFIG_99, 51424, Error
#define XEVENT_COMMON_CONFIG_99 0xC000C8E0

// XEVENT_COMMON_CONFIG_100, 51425, Error
#define XEVENT_COMMON_CONFIG_100 0xC000C8E1

// XEVENT_COMMON_CONFIG_101, 51426, Error
#define XEVENT_COMMON_CONFIG_101 0xC000C8E2

// XEVENT_COMMON_CONFIG_102, 51427, Error
#define XEVENT_COMMON_CONFIG_102 0xC000C8E3

// XEVENT_COMMON_CONFIG_103, 51428, Error
#define XEVENT_COMMON_CONFIG_103 0xC000C8E4

// XEVENT_COMMON_CONFIG_104, 51429, Error
#define XEVENT_COMMON_CONFIG_104 0xC000C8E5

// XEVENT_COMMON_CONFIG_105, 51430, Error
#define XEVENT_COMMON_CONFIG_105 0xC000C8E6

// XEVENT_COMMON_CONFIG_106, 51431, Error
#define XEVENT_COMMON_CONFIG_106 0xC000C8E7

// XEVENT_COMMON_CONFIG_107, 51432, Error
#define XEVENT_COMMON_CONFIG_107 0xC000C8E8

// XEVENT_COMMON_CONFIG_108, 51433, Error
#define XEVENT_COMMON_CONFIG_108 0xC000C8E9

// XEVENT_COMMON_CONFIG_109, 51434, Warning
#define XEVENT_COMMON_CONFIG_109 0x8000C8EA

// XEVENT_COMMON_CONFIG_110, 51435, Error
#define XEVENT_COMMON_CONFIG_110 0xC000C8EB

// XEVENT_COMMON_CONFIG_111, 51436, Error
#define XEVENT_COMMON_CONFIG_111 0xC000C8EC

// XEVENT_COMMON_CONFIG_112, 51437, Error
#define XEVENT_COMMON_CONFIG_112 0xC000C8ED

// XEVENT_COMMON_CONFIG_113, 51438, Error
#define XEVENT_COMMON_CONFIG_113 0xC000C8EE

// XEVENT_COMMON_CONFIG_114, 51439, Error
#define XEVENT_COMMON_CONFIG_114 0xC000C8EF

// XEVENT_COMMON_CONFIG_115, 51440, Error
#define XEVENT_COMMON_CONFIG_115 0xC000C8F0

// XEVENT_COMMON_CONFIG_116, 51441, Error
#define XEVENT_COMMON_CONFIG_116 0xC000C8F1

// XEVENT_COMMON_CONFIG_117, 51442, Error
#define XEVENT_COMMON_CONFIG_117 0xC000C8F2

// XEVENT_COMMON_CONFIG_118, 51443, Error
#define XEVENT_COMMON_CONFIG_118 0xC000C8F3

// XEVENT_COMMON_CONFIG_119, 51444, Error
#define XEVENT_COMMON_CONFIG_119 0xC000C8F4

// XEVENT_COMMON_CONFIG_120, 51445, Error
#define XEVENT_COMMON_CONFIG_120 0xC000C8F5

// XEVENT_COMMON_CONFIG_121, 51446, Error
#define XEVENT_COMMON_CONFIG_121 0xC000C8F6

// XEVENT_COMMON_CONFIG_122, 51447, Error
#define XEVENT_COMMON_CONFIG_122 0xC000C8F7

// XEVENT_COMMON_CONFIG_123, 51448, Error
#define XEVENT_COMMON_CONFIG_123 0xC000C8F8

// XEVENT_COMMON_CONFIG_124, 51449, Error
#define XEVENT_COMMON_CONFIG_124 0xC000C8F9

// XEVENT_COMMON_CONFIG_125, 51450, Error
#define XEVENT_COMMON_CONFIG_125 0xC000C8FA

// XEVENT_COMMON_CONFIG_126, 51451, Error
#define XEVENT_COMMON_CONFIG_126 0xC000C8FB

// XEVENT_COMMON_CONFIG_127, 51452, Error
#define XEVENT_COMMON_CONFIG_127 0xC000C8FC

// XEVENT_COMMON_CONFIG_128, 51453, Error
#define XEVENT_COMMON_CONFIG_128 0xC000C8FD

// XEVENT_COMMON_CONFIG_129, 51454, Error
#define XEVENT_COMMON_CONFIG_129 0xC000C8FE

// XEVENT_COMMON_CONFIG_130, 51455, Error
#define XEVENT_COMMON_CONFIG_130 0xC000C8FF

// XEVENT_COMMON_CONFIG_131, 51456, Error
#define XEVENT_COMMON_CONFIG_131 0xC000C900

// XEVENT_COMMON_CONFIG_132, 51457, Error
#define XEVENT_COMMON_CONFIG_132 0xC000C901

// XEVENT_COMMON_CONFIG_133, 51458, Error
#define XEVENT_COMMON_CONFIG_133 0xC000C902

// XEVENT_COMMON_CONFIG_134, 51459, Warning
#define XEVENT_COMMON_CONFIG_134 0x8000C903

// XEVENT_COMMON_CONFIG_135, 51460, Error
#define XEVENT_COMMON_CONFIG_135 0xC000C904

// XEVENT_COMMON_CONFIG_136, 51461, Error
#define XEVENT_COMMON_CONFIG_136 0xC000C905

// XEVENT_COMMON_CONFIG_137, 51462, Error
#define XEVENT_COMMON_CONFIG_137 0xC000C906

// XEVENT_COMMON_CONFIG_138, 51463, Error
#define XEVENT_COMMON_CONFIG_138 0xC000C907

// XEVENT_COMMON_CONFIG_139, 51464, Error
#define XEVENT_COMMON_CONFIG_139 0xC000C908

// XEVENT_COMMON_CONFIG_140, 51465, Error
#define XEVENT_COMMON_CONFIG_140 0xC000C909

// XEVENT_COMMON_CONFIG_141, 51466, Error
#define XEVENT_COMMON_CONFIG_141 0xC000C90A

// XEVENT_COMMON_CONFIG_142, 51467, Error
#define XEVENT_COMMON_CONFIG_142 0xC000C90B

// XEVENT_COMMON_CONFIG_143, 51468, Error
#define XEVENT_COMMON_CONFIG_143 0xC000C90C

// XEVENT_COMMON_CONFIG_144, 51469, Error
#define XEVENT_COMMON_CONFIG_144 0xC000C90D

// XEVENT_COMMON_CONFIG_145, 51470, Error
#define XEVENT_COMMON_CONFIG_145 0xC000C90E

// XEVENT_COMMON_CONFIG_146, 51471, Warning
#define XEVENT_COMMON_CONFIG_146 0x8000C90F

// XEVENT_COMMON_CONFIG_147, 51472, Error
#define XEVENT_COMMON_CONFIG_147 0xC000C910

// XEVENT_COMMON_CONFIG_148, 51473, Error
#define XEVENT_COMMON_CONFIG_148 0xC000C911

// XEVENT_COMMON_CONFIG_149, 51474, Error
#define XEVENT_COMMON_CONFIG_149 0xC000C912

// XEVENT_COMMON_CONFIG_150, 51475, Error
#define XEVENT_COMMON_CONFIG_150 0xC000C913

// XEVENT_COMMON_CONFIG_151, 51476, Error
#define XEVENT_COMMON_CONFIG_151 0xC000C914

// XEVENT_COMMON_CONFIG_152, 51477, Error
#define XEVENT_COMMON_CONFIG_152 0xC000C915

// XEVENT_COMMON_CONFIG_153, 51478, Error
#define XEVENT_COMMON_CONFIG_153 0xC000C916

// XEVENT_COMMON_CONFIG_154, 51479, Error
#define XEVENT_COMMON_CONFIG_154 0xC000C917

// XEVENT_COMMON_CONFIG_155, 51480, Error
#define XEVENT_COMMON_CONFIG_155 0xC000C918

// XEVENT_COMMON_CONFIG_156, 51481, Error
#define XEVENT_COMMON_CONFIG_156 0xC000C919

// XEVENT_COMMON_CONFIG_157, 51482, Error
#define XEVENT_COMMON_CONFIG_157 0xC000C91A

// XEVENT_COMMON_CONFIG_158, 51483, Error
#define XEVENT_COMMON_CONFIG_158 0xC000C91B

// XEVENT_COMMON_CONFIG_159, 51484, Error
#define XEVENT_COMMON_CONFIG_159 0xC000C91C

// XEVENT_COMMON_CONFIG_160, 51485, Error
#define XEVENT_COMMON_CONFIG_160 0xC000C91D

// XEVENT_COMMON_CONFIG_161, 51486, Error
#define XEVENT_COMMON_CONFIG_161 0xC000C91E

// XEVENT_COMMON_CONFIG_162, 51487, Error
#define XEVENT_COMMON_CONFIG_162 0xC000C91F

// XEVENT_COMMON_CONFIG_163, 51488, Error
#define XEVENT_COMMON_CONFIG_163 0xC000C920

// XEVENT_COMMON_CONFIG_164, 51489, Error
#define XEVENT_COMMON_CONFIG_164 0xC000C921

// XEVENT_COMMON_CONFIG_165, 51490, Error
#define XEVENT_COMMON_CONFIG_165 0xC000C922

// XEVENT_COMMON_CONFIG_166, 51491, Error
#define XEVENT_COMMON_CONFIG_166 0xC000C923

// XEVENT_COMMON_CONFIG_167, 51492, Error
#define XEVENT_COMMON_CONFIG_167 0xC000C924

// XEVENT_COMMON_CONFIG_168, 51493, Error
#define XEVENT_COMMON_CONFIG_168 0xC000C925

// XEVENT_COMMON_CONFIG_169, 51494, Error
#define XEVENT_COMMON_CONFIG_169 0xC000C926

// XEVENT_COMMON_CONFIG_170, 51495, Warning
#define XEVENT_COMMON_CONFIG_170 0x8000C927

// XEVENT_COMMON_CONFIG_171, 51496, Error
#define XEVENT_COMMON_CONFIG_171 0xC000C928

// XEVENT_COMMON_CONFIG_172, 51497, Error
#define XEVENT_COMMON_CONFIG_172 0xC000C929

// XEVENT_COMMON_CONFIG_173, 51498, Error
#define XEVENT_COMMON_CONFIG_173 0xC000C92A

// XEVENT_COMMON_CONFIG_174, 51499, Warning
#define XEVENT_COMMON_CONFIG_174 0x8000C92B

// XEVENT_COMMON_CONFIG_175, 51500, Error
#define XEVENT_COMMON_CONFIG_175 0xC000C92C

// XEVENT_COMMON_CONFIG_176, 51501, Error
#define XEVENT_COMMON_CONFIG_176 0xC000C92D

// XEVENT_COMMON_CONFIG_177, 51502, Warning
#define XEVENT_COMMON_CONFIG_177 0x8000C92E

// XEVENT_COMMON_CONFIG_178, 51503, Error
#define XEVENT_COMMON_CONFIG_178 0xC000C92F

// XEVENT_COMMON_CONFIG_179, 51504, Error
#define XEVENT_COMMON_CONFIG_179 0xC000C930

// XEVENT_COMMON_CONFIG_180, 51505, Warning
#define XEVENT_COMMON_CONFIG_180 0x8000C931

// XEVENT_COMMON_CONFIG_181, 51506, Error
#define XEVENT_COMMON_CONFIG_181 0xC000C932

// XEVENT_COMMON_CONFIG_182, 51507, Error
#define XEVENT_COMMON_CONFIG_182 0xC000C933

// XEVENT_COMMON_CONFIG_183, 51508, Error
#define XEVENT_COMMON_CONFIG_183 0xC000C934

// XEVENT_COMMON_CONFIG_184, 51509, Error
#define XEVENT_COMMON_CONFIG_184 0xC000C935

// XEVENT_COMMON_CONFIG_185, 51510, Error
#define XEVENT_COMMON_CONFIG_185 0xC000C936

// XEVENT_COMMON_CONFIG_186, 51511, Error
#define XEVENT_COMMON_CONFIG_186 0xC000C937

// XEVENT_COMMON_CONFIG_187, 51512, Error
#define XEVENT_COMMON_CONFIG_187 0xC000C938

// XEVENT_COMMON_CONFIG_188, 51513, Error
#define XEVENT_COMMON_CONFIG_188 0xC000C939

// XEVENT_COMMON_CONFIG_189, 51514, Error
#define XEVENT_COMMON_CONFIG_189 0xC000C93A

// XEVENT_COMMON_CONFIG_190, 51515, Error
#define XEVENT_COMMON_CONFIG_190 0xC000C93B

// XEVENT_COMMON_CONFIG_191, 51516, Error
#define XEVENT_COMMON_CONFIG_191 0xC000C93C

// XEVENT_COMMON_CONFIG_192, 51517, Error
#define XEVENT_COMMON_CONFIG_192 0xC000C93D

// XEVENT_COMMON_CONFIG_193, 51518, Error
#define XEVENT_COMMON_CONFIG_193 0xC000C93E

// XEVENT_COMMON_CONFIG_194, 51519, Error
#define XEVENT_COMMON_CONFIG_194 0xC000C93F

// XEVENT_COMMON_CONFIG_195, 51520, Error
#define XEVENT_COMMON_CONFIG_195 0xC000C940

// XEVENT_COMMON_CONFIG_196, 51521, Error
#define XEVENT_COMMON_CONFIG_196 0xC000C941

// XEVENT_COMMON_CONFIG_197, 51522, Error
#define XEVENT_COMMON_CONFIG_197 0xC000C942

// XEVENT_COMMON_CONFIG_198, 51523, Error
#define XEVENT_COMMON_CONFIG_198 0xC000C943

// XEVENT_COMMON_CONFIG_199, 51524, Error
#define XEVENT_COMMON_CONFIG_199 0xC000C944

// XEVENT_COMMON_CONFIG_200, 51525, Error
#define XEVENT_COMMON_CONFIG_200 0xC000C945

// XEVENT_COMMON_CONFIG_201, 51526, Error
#define XEVENT_COMMON_CONFIG_201 0xC000C946

// XEVENT_COMMON_CONFIG_202, 51527, Error
#define XEVENT_COMMON_CONFIG_202 0xC000C947

// XEVENT_COMMON_CONFIG_203, 51528, Error
#define XEVENT_COMMON_CONFIG_203 0xC000C948

// XEVENT_COMMON_CONFIG_204, 51529, Error
#define XEVENT_COMMON_CONFIG_204 0xC000C949

// XEVENT_COMMON_CONFIG_205, 51530, Error
#define XEVENT_COMMON_CONFIG_205 0xC000C94A

// XEVENT_COMMON_CONFIG_206, 51531, Error
#define XEVENT_COMMON_CONFIG_206 0xC000C94B

// XEVENT_COMMON_CONFIG_207, 51532, Error
#define XEVENT_COMMON_CONFIG_207 0xC000C94C

// XEVENT_COMMON_CONFIG_208, 51533, Error
#define XEVENT_COMMON_CONFIG_208 0xC000C94D

// XEVENT_COMMON_CONFIG_209, 51534, Error
#define XEVENT_COMMON_CONFIG_209 0xC000C94E

// XEVENT_COMMON_CONFIG_210, 51535, Error
#define XEVENT_COMMON_CONFIG_210 0xC000C94F

// XEVENT_COMMON_CONFIG_211, 51536, Error
#define XEVENT_COMMON_CONFIG_211 0xC000C950

// XEVENT_COMMON_CONFIG_212, 51537, Error
#define XEVENT_COMMON_CONFIG_212 0xC000C951

// XEVENT_COMMON_CONFIG_213, 51538, Error
#define XEVENT_COMMON_CONFIG_213 0xC000C952

// XEVENT_COMMON_CONFIG_214, 51539, Error
#define XEVENT_COMMON_CONFIG_214 0xC000C953

// XEVENT_COMMON_CONFIG_215, 51540, Error
#define XEVENT_COMMON_CONFIG_215 0xC000C954

// XEVENT_COMMON_CONFIG_216, 51541, Error
#define XEVENT_COMMON_CONFIG_216 0xC000C955

// XEVENT_COMMON_CONFIG_217, 51542, Error
#define XEVENT_COMMON_CONFIG_217 0xC000C956

// XEVENT_COMMON_CONFIG_218, 51543, Error
#define XEVENT_COMMON_CONFIG_218 0xC000C957

// XEVENT_COMMON_CONFIG_219, 51544, Error
#define XEVENT_COMMON_CONFIG_219 0xC000C958

// XEVENT_COMMON_CONFIG_220, 51545, Error
#define XEVENT_COMMON_CONFIG_220 0xC000C959

// XEVENT_COMMON_CONFIG_221, 51546, Error
#define XEVENT_COMMON_CONFIG_221 0xC000C95A

// XEVENT_COMMON_CONFIG_222, 51547, Error
#define XEVENT_COMMON_CONFIG_222 0xC000C95B

// XEVENT_COMMON_CONFIG_223, 51548, Error
#define XEVENT_COMMON_CONFIG_223 0xC000C95C

// XEVENT_COMMON_CONFIG_224, 51549, Error
#define XEVENT_COMMON_CONFIG_224 0xC000C95D

// XEVENT_COMMON_CONFIG_225, 51550, Error
#define XEVENT_COMMON_CONFIG_225 0xC000C95E

// XEVENT_COMMON_CONFIG_226, 51551, Error
#define XEVENT_COMMON_CONFIG_226 0xC000C95F

// XEVENT_COMMON_CONFIG_227, 51552, Error
#define XEVENT_COMMON_CONFIG_227 0xC000C960

// XEVENT_COMMON_CONFIG_228, 51553, Error
#define XEVENT_COMMON_CONFIG_228 0xC000C961

// XEVENT_COMMON_CONFIG_229, 51554, Error
#define XEVENT_COMMON_CONFIG_229 0xC000C962

// XEVENT_COMMON_CONFIG_230, 51555, Error
#define XEVENT_COMMON_CONFIG_230 0xC000C963

// XEVENT_COMMON_CONFIG_231, 51556, Error
#define XEVENT_COMMON_CONFIG_231 0xC000C964

// XEVENT_COMMON_CONFIG_232, 51557, Error
#define XEVENT_COMMON_CONFIG_232 0xC000C965

// XEVENT_COMMON_CONFIG_233, 51558, Error
#define XEVENT_COMMON_CONFIG_233 0xC000C966

// XEVENT_COMMON_CONFIG_234, 51559, Error
#define XEVENT_COMMON_CONFIG_234 0xC000C967

// XEVENT_COMMON_CONFIG_235, 51560, Error
#define XEVENT_COMMON_CONFIG_235 0xC000C968

// XEVENT_COMMON_CONFIG_236, 51561, Error
#define XEVENT_COMMON_CONFIG_236 0xC000C969

// XEVENT_COMMON_CONFIG_237, 51562, Error
#define XEVENT_COMMON_CONFIG_237 0xC000C96A

// XEVENT_COMMON_CONFIG_238, 51563, Error
#define XEVENT_COMMON_CONFIG_238 0xC000C96B

// XEVENT_COMMON_CONFIG_239, 51564, Error
#define XEVENT_COMMON_CONFIG_239 0xC000C96C

// XEVENT_COMMON_CONFIG_240, 51565, Error
#define XEVENT_COMMON_CONFIG_240 0xC000C96D

// XEVENT_COMMON_CONFIG_241, 51566, Error
#define XEVENT_COMMON_CONFIG_241 0xC000C96E

// XEVENT_COMMON_CONFIG_242, 51567, Error
#define XEVENT_COMMON_CONFIG_242 0xC000C96F

// XEVENT_COMMON_CONFIG_243, 51568, Error
#define XEVENT_COMMON_CONFIG_243 0xC000C970

// XEVENT_COMMON_CONFIG_244, 51569, Error
#define XEVENT_COMMON_CONFIG_244 0xC000C971

// XEVENT_COMMON_CONFIG_245, 51570, Warning
#define XEVENT_COMMON_CONFIG_245 0x8000C972

// XEVENT_COMMON_CONFIG_246, 51571, Warning
#define XEVENT_COMMON_CONFIG_246 0x8000C973

// XEVENT_COMMON_CONFIG_247, 51572, Error
#define XEVENT_COMMON_CONFIG_247 0xC000C974

// XEVENT_COMMON_CONFIG_248, 51573, Error
#define XEVENT_COMMON_CONFIG_248 0xC000C975

// XEVENT_COMMON_CONFIG_249, 51574, Error
#define XEVENT_COMMON_CONFIG_249 0xC000C976

// XEVENT_COMMON_CONFIG_250, 51575, Error
#define XEVENT_COMMON_CONFIG_250 0xC000C977

// XEVENT_DEPRECATED_COMMON_CONFIG_251, 51576, Error
#define XEVENT_DEPRECATED_COMMON_CONFIG_251 0xC000C978

// XEVENT_COMMON_CONFIG_252, 51577, Error
#define XEVENT_COMMON_CONFIG_252 0xC000C979

// XEVENT_COMMON_CONFIG_253, 51578, Warning
#define XEVENT_COMMON_CONFIG_253 0x8000C97A

// XEVENT_COMMON_CONFIG_254, 51579, Error
#define XEVENT_COMMON_CONFIG_254 0xC000C97B

// XEVENT_COMMON_CONFIG_255, 51580, Error
#define XEVENT_COMMON_CONFIG_255 0xC000C97C

// XEVENT_COMMON_CONFIG_256, 51581, Error
#define XEVENT_COMMON_CONFIG_256 0xC000C97D

// XEVENT_COMMON_CONFIG_257, 51582, Error
#define XEVENT_COMMON_CONFIG_257 0xC000C97E

// XEVENT_COMMON_CONFIG_258, 51583, Error
#define XEVENT_COMMON_CONFIG_258 0xC000C97F

// XEVENT_COMMON_CONFIG_259, 51584, Warning
#define XEVENT_COMMON_CONFIG_259 0x8000C980

// XEVENT_COMMON_CONFIG_260, 51585, Warning
#define XEVENT_COMMON_CONFIG_260 0x8000C981

// XEVENT_COMMON_CONFIG_261, 51586, Error
#define XEVENT_COMMON_CONFIG_261 0xC000C982

// XEVENT_COMMON_CONFIG_262, 51587, Error
#define XEVENT_COMMON_CONFIG_262 0xC000C983

// XEVENT_COMMON_CONFIG_263, 51588, Error
#define XEVENT_COMMON_CONFIG_263 0xC000C984

// XEVENT_COMMON_CONFIG_264, 51589, Error
#define XEVENT_COMMON_CONFIG_264 0xC000C985

// XEVENT_COMMON_CONFIG_265, 51590, Error
#define XEVENT_COMMON_CONFIG_265 0xC000C986

// XEVENT_COMMON_CONFIG_266, 51591, Warning
#define XEVENT_COMMON_CONFIG_266 0x8000C987

// XEVENT_COMMON_CONFIG_PIPE_HANDLE_DISPOSED, 51593, Error
#define XEVENT_COMMON_CONFIG_PIPE_HANDLE_DISPOSED 0xC000C989

// XEVENT_COMMON_CONFIG_270, 51595, Error
#define XEVENT_COMMON_CONFIG_270 0xC000C98B

// XEVENT_COMMON_CONFIG_272, 51597, Error
#define XEVENT_COMMON_CONFIG_272 0xC000C98D

// XEVENT_COMMON_CONFIG_274, 51599, Error
#define XEVENT_COMMON_CONFIG_274 0xC000C98F

// XEVENT_MC_SGINFO_IS_OFF, 51600, Warning
#define XEVENT_MC_SGINFO_IS_OFF 0x8000C990

// XEVENT_COMMON_CONFIG_276, 51601, Error
#define XEVENT_COMMON_CONFIG_276 0xC000C991

// XEVENT_COMMON_CONFIG_277, 51602, Error
#define XEVENT_COMMON_CONFIG_277 0xC000C992

// XEVENT_COMMON_CONFIG_278, 51603, Error
#define XEVENT_COMMON_CONFIG_278 0xC000C993

// XEVENT_MC_BAD_CONFIG_DATA_4, 51604, Error
#define XEVENT_MC_BAD_CONFIG_DATA_4 0xC000C994

// XEVENT_MC_BAD_CONFIG_DATA_5, 51605, Error
#define XEVENT_MC_BAD_CONFIG_DATA_5 0xC000C995

// XEVENT_MC_BAD_CONFIG_DATA_6, 51606, Error
#define XEVENT_MC_BAD_CONFIG_DATA_6 0xC000C996

// XEVENT_MC_BAD_CONFIG_DATA_7, 51607, Error
#define XEVENT_MC_BAD_CONFIG_DATA_7 0xC000C997

// XEVENT_COMMON_CONFIG_283, 51608, Error
#define XEVENT_COMMON_CONFIG_283 0xC000C998

// XEVENT_COMMON_CONFIG_284, 51609, Error
#define XEVENT_COMMON_CONFIG_284 0xC000C999

// XEVENT_MC_BAD_CONFIG_DATA_8, 51610, Error
#define XEVENT_MC_BAD_CONFIG_DATA_8 0xC000C99A

// XEVENT_COMMON_CONFIG_286, 51611, Error
#define XEVENT_COMMON_CONFIG_286 0xC000C99B

// XEVENT_COMMON_CONFIG_287, 51612, Error
#define XEVENT_COMMON_CONFIG_287 0xC000C99C

// XEVENT_COMMON_CONFIG_288, 51613, Error
#define XEVENT_COMMON_CONFIG_288 0xC000C99D

// XEVENT_MGMT_CRITICAL_ERROR, 51614, Error
#define XEVENT_MGMT_CRITICAL_ERROR 0xC000C99E

// XEVENT_MGMT_INIT_FAILURE, 51615, Error
#define XEVENT_MGMT_INIT_FAILURE 0xC000C99F

// XEVENT_COMMON_CONFIG_291, 51616, Error
#define XEVENT_COMMON_CONFIG_291 0xC000C9A0

// XEVENT_COMMON_CONFIG_292, 51617, Error
#define XEVENT_COMMON_CONFIG_292 0xC000C9A1

// XEVENT_COMMON_CONFIG_293, 51618, Error
#define XEVENT_COMMON_CONFIG_293 0xC000C9A2

// XEVENT_MGMT_INIT_FAILURE_1, 51619, Error
#define XEVENT_MGMT_INIT_FAILURE_1 0xC000C9A3

// XEVENT_MGMT_INIT_FAILURE_2, 51620, Error
#define XEVENT_MGMT_INIT_FAILURE_2 0xC000C9A4

// XEVENT_MGMT_INIT_FAILURE_3, 51621, Error
#define XEVENT_MGMT_INIT_FAILURE_3 0xC000C9A5

// XEVENT_MGMT_INIT_WARNING, 51622, Warning
#define XEVENT_MGMT_INIT_WARNING 0x8000C9A6

// XEVENT_MGMT_INIT_FAILURE_4, 51623, Error
#define XEVENT_MGMT_INIT_FAILURE_4 0xC000C9A7

// XEVENT_MGMT_SRV_DISCONNECT, 51624, Error
#define XEVENT_MGMT_SRV_DISCONNECT 0xC000C9A8

// XEVENT_MGMT_SRV_DISCONNECT_1, 51625, Error
#define XEVENT_MGMT_SRV_DISCONNECT_1 0xC000C9A9

// XEVENT_MGMT_INIT_FAILURE_5, 51626, Error
#define XEVENT_MGMT_INIT_FAILURE_5 0xC000C9AA

// XEVENT_MGMT_INIT_FAILURE_6, 51627, Error
#define XEVENT_MGMT_INIT_FAILURE_6 0xC000C9AB

// XEVENT_MGMT_SUBCOMPONENT_WARNING, 51628, Error
#define XEVENT_MGMT_SUBCOMPONENT_WARNING 0xC000C9AC

// XEVENT_MGMT_SUBCOMPONENT_WARNING_1, 51629, Error
#define XEVENT_MGMT_SUBCOMPONENT_WARNING_1 0xC000C9AD

// XEVENT_MGMT_SUBCOMPONENT_WARNING_2, 51630, Error
#define XEVENT_MGMT_SUBCOMPONENT_WARNING_2 0xC000C9AE

// XEVENT_MGMT_SUBCOMPONENT_WARNING_3, 51631, Error
#define XEVENT_MGMT_SUBCOMPONENT_WARNING_3 0xC000C9AF

// XEVENT_COMMON_CONFIG_307, 51632, Error
#define XEVENT_COMMON_CONFIG_307 0xC000C9B0

// XEVENT_MGMT_SUBCOMPONENT_WARNING_4, 51633, Error
#define XEVENT_MGMT_SUBCOMPONENT_WARNING_4 0xC000C9B1

// XEVENT_MGMT_SUBCOMPONENT_WARNING_5, 51634, Error
#define XEVENT_MGMT_SUBCOMPONENT_WARNING_5 0xC000C9B2

// XEVENT_COMMON_CONFIG_310, 51635, Error
#define XEVENT_COMMON_CONFIG_310 0xC000C9B3

// XEVENT_COMMON_CONFIG_311, 51636, Error
#define XEVENT_COMMON_CONFIG_311 0xC000C9B4

// XEVENT_MGMT_SUBCOMPONENT_WARNING_6, 51637, Error
#define XEVENT_MGMT_SUBCOMPONENT_WARNING_6 0xC000C9B5

// XEVENT_MGMT_SUBCOMPONENT_WARNING_7, 51638, Error
#define XEVENT_MGMT_SUBCOMPONENT_WARNING_7 0xC000C9B6

// XEVENT_MGMT_SUBCOMPONENT_WARNING_8, 51639, Error
#define XEVENT_MGMT_SUBCOMPONENT_WARNING_8 0xC000C9B7

// XEVENT_MGMT_SUBCOMPONENT_WARNING_9, 51640, Error
#define XEVENT_MGMT_SUBCOMPONENT_WARNING_9 0xC000C9B8

// XEVENT_MGMT_SUBCOMPONENT_WARNING_10, 51641, Error
#define XEVENT_MGMT_SUBCOMPONENT_WARNING_10 0xC000C9B9

// XEVENT_MGMT_REMOTE_TARGET_WARNING, 51642, Warning
#define XEVENT_MGMT_REMOTE_TARGET_WARNING 0x8000C9BA

// XEVENT_COMMON_CONFIG_318, 51643, Error
#define XEVENT_COMMON_CONFIG_318 0xC000C9BB

// XEVENT_COMMON_CONFIG_319, 51644, Error
#define XEVENT_COMMON_CONFIG_319 0xC000C9BC

// XEVENT_COMMON_CONFIG_320, 51645, Error
#define XEVENT_COMMON_CONFIG_320 0xC000C9BD

// XEVENT_COMMON_CONFIG_321, 51646, Error
#define XEVENT_COMMON_CONFIG_321 0xC000C9BE

// XEVENT_COMMON_CONFIG_322, 51647, Error
#define XEVENT_COMMON_CONFIG_322 0xC000C9BF

// XEVENT_COMMON_CONFIG_323, 51648, Error
#define XEVENT_COMMON_CONFIG_323 0xC000C9C0

// XEVENT_COMMON_CONFIG_324, 51649, Error
#define XEVENT_COMMON_CONFIG_324 0xC000C9C1

// XEVENT_COMMON_CONFIG_325, 51650, Error
#define XEVENT_COMMON_CONFIG_325 0xC000C9C2

// XEVENT_COMMON_CONFIG_326, 51651, Error
#define XEVENT_COMMON_CONFIG_326 0xC000C9C3

// XEVENT_COMMON_CONFIG_327, 51652, Error
#define XEVENT_COMMON_CONFIG_327 0xC000C9C4

// XEVENT_COMMON_CONFIG_328, 51653, Error
#define XEVENT_COMMON_CONFIG_328 0xC000C9C5

// XEVENT_COMMON_CONFIG_329, 51654, Error
#define XEVENT_COMMON_CONFIG_329 0xC000C9C6

// XEVENT_COMMON_CONFIG_330, 51655, Error
#define XEVENT_COMMON_CONFIG_330 0xC000C9C7

// XEVENT_COMMON_CONFIG_331, 51656, Error
#define XEVENT_COMMON_CONFIG_331 0xC000C9C8

// XEVENT_COMMON_CONFIG_332, 51657, Error
#define XEVENT_COMMON_CONFIG_332 0xC000C9C9

// XEVENT_COMMON_CONFIG_333, 51658, Error
#define XEVENT_COMMON_CONFIG_333 0xC000C9CA

// XEVENT_COMMON_CONFIG_334, 51659, Error
#define XEVENT_COMMON_CONFIG_334 0xC000C9CB

// XEVENT_COMMON_CONFIG_335, 51660, Error
#define XEVENT_COMMON_CONFIG_335 0xC000C9CC

// XEVENT_COMMON_CONFIG_336, 51661, Error
#define XEVENT_COMMON_CONFIG_336 0xC000C9CD

// XEVENT_COMMON_CONFIG_337, 51662, Error
#define XEVENT_COMMON_CONFIG_337 0xC000C9CE

// XEVENT_COMMON_CONFIG_338, 51663, Error
#define XEVENT_COMMON_CONFIG_338 0xC000C9CF

// XEVENT_COMMON_CONFIG_339, 51664, Error
#define XEVENT_COMMON_CONFIG_339 0xC000C9D0

// XEVENT_MGMT_INIT_FAILURE_7, 51665, Error
#define XEVENT_MGMT_INIT_FAILURE_7 0xC000C9D1

// XEVENT_MGMT_INIT_FAILURE_8, 51666, Error
#define XEVENT_MGMT_INIT_FAILURE_8 0xC000C9D2

// XEVENT_MGMT_INIT_FAILURE_9, 51667, Error
#define XEVENT_MGMT_INIT_FAILURE_9 0xC000C9D3

// XEVENT_COMMON_CONFIG_INTEROP_REPORTMESSAGECOMPONENTID_FAILURE, 51668, Error
#define XEVENT_COMMON_CONFIG_INTEROP_REPORTMESSAGECOMPONENTID_FAILURE 0xC000C9D4

// XEVENT_COMMON_CONFIG_INTEROP_ADDREPORTMESSAGECOMPONENTIDMAPPING_FAILURE, 51669, Error
#define XEVENT_COMMON_CONFIG_INTEROP_ADDREPORTMESSAGECOMPONENTIDMAPPING_FAILURE 0xC000C9D5

// XEVENT_COMMON_CONFIG_INTEROP_REPORTMESSAGECLEANSERVIRTUALINTERFACE_FAILURE, 51670, Error
#define XEVENT_COMMON_CONFIG_INTEROP_REPORTMESSAGECLEANSERVIRTUALINTERFACE_FAILURE 0xC000C9D6

// XEVENT_COMMON_CONFIG_340, 51671, Error
#define XEVENT_COMMON_CONFIG_340 0xC000C9D7

// XEVENT_MGMT_READ_FAILURE, 51672, Error
#define XEVENT_MGMT_READ_FAILURE 0xC000C9D8

// XEVENT_COMMON_CONFIG_BAD_XLAST_FILE, 51674, Error
#define XEVENT_COMMON_CONFIG_BAD_XLAST_FILE 0xC000C9DA

// XEVENT_COMMON_CONFIG_MATCH_LTC_TIB_COUNTS_OUTOFSYNC, 51675, Error
#define XEVENT_COMMON_CONFIG_MATCH_LTC_TIB_COUNTS_OUTOFSYNC 0xC000C9DB

// XEVENT_COMMON_CONFIG_MATCH_LTC_TIB_SERVERS_OUTOFSYNC_1, 51676, Error
#define XEVENT_COMMON_CONFIG_MATCH_LTC_TIB_SERVERS_OUTOFSYNC_1 0xC000C9DC

// XEVENT_COMMON_CONFIG_MATCH_LTC_TIB_SERVERS_OUTOFSYNC_2, 51677, Error
#define XEVENT_COMMON_CONFIG_MATCH_LTC_TIB_SERVERS_OUTOFSYNC_2 0xC000C9DD

// XEVENT_COMMON_CONFIG_MATCH_LTC_TIB_OUTOFSYNC, 51678, Error
#define XEVENT_COMMON_CONFIG_MATCH_LTC_TIB_OUTOFSYNC 0xC000C9DE

// XEVENT_COMMON_CONFIG_MATCH_UNEXPECTED_MODE_IN_XLAST, 51679, Error
#define XEVENT_COMMON_CONFIG_MATCH_UNEXPECTED_MODE_IN_XLAST 0xC000C9DF

// XEVENT_COMMON_CONFIG_MATCH_MISSING_MODE_IN_XLAST, 51680, Error
#define XEVENT_COMMON_CONFIG_MATCH_MISSING_MODE_IN_XLAST 0xC000C9E0

// XEVENT_COMMON_CONFIG_MATCH_ENDMIGRATE_FAILED_NONEXT, 51681, Error
#define XEVENT_COMMON_CONFIG_MATCH_ENDMIGRATE_FAILED_NONEXT 0xC000C9E1

// XEVENT_COMMON_CONFIG_MATCH_ENDMIGRATE_FAILED_MISSING_BUCKET, 51682, Error
#define XEVENT_COMMON_CONFIG_MATCH_ENDMIGRATE_FAILED_MISSING_BUCKET 0xC000C9E2

// XEVENT_COMMON_CONFIG_MATCH_EXPMIGRATE_FAILED_NOTSTARTED, 51683, Error
#define XEVENT_COMMON_CONFIG_MATCH_EXPMIGRATE_FAILED_NOTSTARTED 0xC000C9E3

// XEVENT_COMMON_CONFIG_MATCH_ENDMIGRATE_FAILED_LTC_TIB_OUTOFSYNC, 51684, Error
#define XEVENT_COMMON_CONFIG_MATCH_ENDMIGRATE_FAILED_LTC_TIB_OUTOFSYNC 0xC000C9E4

// XEVENT_COMMON_CONFIG_MATCH_ADDRR_FAILED_MISSING_BUCKET, 51685, Error
#define XEVENT_COMMON_CONFIG_MATCH_ADDRR_FAILED_MISSING_BUCKET 0xC000C9E5

// XEVENT_COMMON_CONFIG_MATCH_ADDRR_FAILED_DUPE_SERVER, 51686, Error
#define XEVENT_COMMON_CONFIG_MATCH_ADDRR_FAILED_DUPE_SERVER 0xC000C9E6

// XEVENT_COMMON_CONFIG_MATCH_UPDLTC_INVALID_LTC, 51687, Error
#define XEVENT_COMMON_CONFIG_MATCH_UPDLTC_INVALID_LTC 0xC000C9E7

// XEVENT_COMMON_CONFIG_MATCH_DEFAULTBUCKETS_OVERWRITE, 51688, Error
#define XEVENT_COMMON_CONFIG_MATCH_DEFAULTBUCKETS_OVERWRITE 0xC000C9E8

// XEVENT_COMMON_CONFIG_MATCH_CONFIRMSERVER_BADSERVER, 51689, Error
#define XEVENT_COMMON_CONFIG_MATCH_CONFIRMSERVER_BADSERVER 0xC000C9E9

// XEVENT_COMMON_CONFIG_MATCH_PREPLTC_TID_MISMATCH, 51690, Error
#define XEVENT_COMMON_CONFIG_MATCH_PREPLTC_TID_MISMATCH 0xC000C9EA

// XEVENT_COMMON_CONFIG_MATCH_NO_PARTMAP, 51691, Error
#define XEVENT_COMMON_CONFIG_MATCH_NO_PARTMAP 0xC000C9EB

// XEVENT_COMMON_CONFIG_MATCH_PREPCONFIG_TID_MISMATCH, 51692, Error
#define XEVENT_COMMON_CONFIG_MATCH_PREPCONFIG_TID_MISMATCH 0xC000C9EC

// XEVENT_COMMON_CONFIG_GET_REFRESH_FUNCTIONS, 51693, Error
#define XEVENT_COMMON_CONFIG_GET_REFRESH_FUNCTIONS 0xC000C9ED

// XEVENT_COMMON_CONFIG_HEALTH_CHANGE, 51694, Error
#define XEVENT_COMMON_CONFIG_HEALTH_CHANGE 0xC000C9EE

// XEVENT_COMMON_SETTING_BATCH_CONSTRUCTION, 51695, Error
#define XEVENT_COMMON_SETTING_BATCH_CONSTRUCTION 0xC000C9EF

// XEVENT_COMMON_SETTING_BATCH_QUERY, 51696, Error
#define XEVENT_COMMON_SETTING_BATCH_QUERY 0xC000C9F0

// XEVENT_COMMON_SETTING_BATCH_SETTING_DELETED, 51697, Error
#define XEVENT_COMMON_SETTING_BATCH_SETTING_DELETED 0xC000C9F1

// XEVENT_COMMON_CONFIG_REGISTER_DYNAMIC_SETTING_FAILURE, 51698, Error
#define XEVENT_COMMON_CONFIG_REGISTER_DYNAMIC_SETTING_FAILURE 0xC000C9F2

// XEVENT_COMMON_BUCKETS_BATCH_CONSTRUCTION, 51699, Error
#define XEVENT_COMMON_BUCKETS_BATCH_CONSTRUCTION 0xC000C9F3

// XEVENT_COMMON_BUCKET_BATCH_QUERY, 51700, Error
#define XEVENT_COMMON_BUCKET_BATCH_QUERY 0xC000C9F4

// XEVENT_COMMON_BUCKET_BATCH_DELETED, 51701, Error
#define XEVENT_COMMON_BUCKET_BATCH_DELETED 0xC000C9F5

// XEVENT_COMMON_CONFIG_LIVE_REGISTRY_SETTINGS_CHANGE, 51702, Error
#define XEVENT_COMMON_CONFIG_LIVE_REGISTRY_SETTINGS_CHANGE 0xC000C9F6

// XEVENT_PERFORMANCE_COUNTERS_0, 51703, Error
#define XEVENT_PERFORMANCE_COUNTERS_0 0xC000C9F7

// XEVENT_COMMON_HACK_4, 52329, Warning
#define XEVENT_COMMON_HACK_4 0x8000CC69

// XEVENT_COMMON_HACK_5, 52330, Warning
#define XEVENT_COMMON_HACK_5 0x8000CC6A

// XEVENT_COMMON_HACK_6, 52331, Warning
#define XEVENT_COMMON_HACK_6 0x8000CC6B

// XEVENT_COMMON_HACK_7, 52332, Warning
#define XEVENT_COMMON_HACK_7 0x8000CC6C

// XEVENT_COMMON_HACK_8, 52333, Warning
#define XEVENT_COMMON_HACK_8 0x8000CC6D

// XEVENT_COMMON_HACK_9, 52334, Warning
#define XEVENT_COMMON_HACK_9 0x8000CC6E

// XEVENT_COMMON_HACK_10, 52335, Warning
#define XEVENT_COMMON_HACK_10 0x8000CC6F

// XEVENT_COMMON_HACK_11, 52336, Warning
#define XEVENT_COMMON_HACK_11 0x8000CC70

// XEVENT_COMMON_HACK_12, 52337, Warning
#define XEVENT_COMMON_HACK_12 0x8000CC71

// XEVENT_COMMON_HACK_13, 52338, Warning
#define XEVENT_COMMON_HACK_13 0x8000CC72

// XEVENT_COMMON_HACK_14, 52339, Warning
#define XEVENT_COMMON_HACK_14 0x8000CC73

// XEVENT_COMMON_HACK_15, 52340, Warning
#define XEVENT_COMMON_HACK_15 0x8000CC74

// XEVENT_COMMON_HACK_16, 52341, Warning
#define XEVENT_COMMON_HACK_16 0x8000CC75

// XEVENT_COMMON_HACK_17, 52342, Warning
#define XEVENT_COMMON_HACK_17 0x8000CC76

// XEVENT_COMMON_HACK_18, 52343, Warning
#define XEVENT_COMMON_HACK_18 0x8000CC77

// XEVENT_COMMON_HACK_19, 52344, Warning
#define XEVENT_COMMON_HACK_19 0x8000CC78

// XEVENT_COMMON_HACK_20, 52345, Warning
#define XEVENT_COMMON_HACK_20 0x8000CC79

// XEVENT_COMMON_HACK_21, 52346, Warning
#define XEVENT_COMMON_HACK_21 0x8000CC7A

// XEVENT_COMMON_HACK_22, 52347, Warning
#define XEVENT_COMMON_HACK_22 0x8000CC7B

// XEVENT_COMMON_HACK_23, 52348, Warning
#define XEVENT_COMMON_HACK_23 0x8000CC7C

// XEVENT_COMMON_HACK_24, 52349, Warning
#define XEVENT_COMMON_HACK_24 0x8000CC7D

// XEVENT_COMMON_HACK_25, 52350, Warning
#define XEVENT_COMMON_HACK_25 0x8000CC7E

// XEVENT_COMMON_HACK_26, 52351, Warning
#define XEVENT_COMMON_HACK_26 0x8000CC7F

// XEVENT_COMMON_HACK_27, 52352, Warning
#define XEVENT_COMMON_HACK_27 0x8000CC80

// XEVENT_COMMON_HACK_28, 52353, Warning
#define XEVENT_COMMON_HACK_28 0x8000CC81

// XEVENT_COMMON_HACK_33, 52358, Warning
#define XEVENT_COMMON_HACK_33 0x8000CC86

// XEVENT_COMMON_HACK_34, 52359, Warning
#define XEVENT_COMMON_HACK_34 0x8000CC87

// XEVENT_COMMON_HACK_40, 52365, Warning
#define XEVENT_COMMON_HACK_40 0x8000CC8D

// XEVENT_AUTHDATA_BAD_TEAM_TICKETS, 52366, Warning
#define XEVENT_AUTHDATA_BAD_TEAM_TICKETS 0x8000CC8E

// XEVENT_AUTHDATA_BAD_TEAM_TICKETS_1, 52367, Warning
#define XEVENT_AUTHDATA_BAD_TEAM_TICKETS_1 0x8000CC8F

// XEVENT_AUTHDATA_BAD_TEAM_TICKETS_2, 52368, Warning
#define XEVENT_AUTHDATA_BAD_TEAM_TICKETS_2 0x8000CC90

// XEVENT_AUTHDATA_BAD_TEAM_TICKETS_3, 52369, Warning
#define XEVENT_AUTHDATA_BAD_TEAM_TICKETS_3 0x8000CC91

// XEVENT_AUTHDATA_BAD_TEAM_TICKETS_4, 52370, Warning
#define XEVENT_AUTHDATA_BAD_TEAM_TICKETS_4 0x8000CC92

// XEVENT_AUTHDATA_BAD_TEAM_TICKETS_5, 52371, Warning
#define XEVENT_AUTHDATA_BAD_TEAM_TICKETS_5 0x8000CC93

// XEVENT_AUTHDATA_BAD_TEAM_TICKETS_6, 52372, Warning
#define XEVENT_AUTHDATA_BAD_TEAM_TICKETS_6 0x8000CC94

// XEVENT_AUTHDATA_BAD_TEAM_TICKETS_7, 52373, Warning
#define XEVENT_AUTHDATA_BAD_TEAM_TICKETS_7 0x8000CC95

// XEVENT_AUTHDATA_BAD_BUNDLED_AUTHDATA, 52374, Warning
#define XEVENT_AUTHDATA_BAD_BUNDLED_AUTHDATA 0x8000CC96

// XEVENT_AUTHDATA_VERIFICATION_ERROR, 52375, Warning
#define XEVENT_AUTHDATA_VERIFICATION_ERROR 0x8000CC97

// XEVENT_AUTHDATA_VERIFICATION_ERROR_1, 52376, Warning
#define XEVENT_AUTHDATA_VERIFICATION_ERROR_1 0x8000CC98

// XEVENT_AUTHDATA_VERIFICATION_ERROR_2, 52377, Warning
#define XEVENT_AUTHDATA_VERIFICATION_ERROR_2 0x8000CC99

// XEVENT_AUTHDATA_BAD_HTTP_AUTHDATA, 52378, Warning
#define XEVENT_AUTHDATA_BAD_HTTP_AUTHDATA 0x8000CC9A

// XEVENT_AUTHDATA_BAD_SG_AUTHDATA, 52379, Warning
#define XEVENT_AUTHDATA_BAD_SG_AUTHDATA 0x8000CC9B

// XEVENT_AUTHDATA_BAD_SG_AUTHDATA_1, 52380, Warning
#define XEVENT_AUTHDATA_BAD_SG_AUTHDATA_1 0x8000CC9C

// XEVENT_AUTHDATA_BAD_SG_AUTHDATA_2, 52381, Warning
#define XEVENT_AUTHDATA_BAD_SG_AUTHDATA_2 0x8000CC9D

// XEVENT_AUTHDATA_BAD_SG_AUTHDATA_3, 52382, Warning
#define XEVENT_AUTHDATA_BAD_SG_AUTHDATA_3 0x8000CC9E

// XEVENT_AUTHDATA_BAD_SG_AUTHDATA_4, 52383, Warning
#define XEVENT_AUTHDATA_BAD_SG_AUTHDATA_4 0x8000CC9F

// XEVENT_AUTHDATA_BAD_SG_AUTHDATA_5, 52384, Warning
#define XEVENT_AUTHDATA_BAD_SG_AUTHDATA_5 0x8000CCA0

// XEVENT_AUTHDATA_VERIFICATION_ERROR_3, 52385, Warning
#define XEVENT_AUTHDATA_VERIFICATION_ERROR_3 0x8000CCA1

// XEVENT_COMMON_HACK_61, 52386, Warning
#define XEVENT_COMMON_HACK_61 0x8000CCA2

// XEVENT_AUTHDATA_VERIFICATION_ERROR_4, 52387, Warning
#define XEVENT_AUTHDATA_VERIFICATION_ERROR_4 0x8000CCA3

// XEVENT_AUTHDATA_VERIFICATION_ERROR_5, 52388, Warning
#define XEVENT_AUTHDATA_VERIFICATION_ERROR_5 0x8000CCA4

// XEVENT_COMMON_HACK_64, 52389, Warning
#define XEVENT_COMMON_HACK_64 0x8000CCA5

// XEVENT_COMMON_HACK_65, 52390, Warning
#define XEVENT_COMMON_HACK_65 0x8000CCA6

// XEVENT_COMMON_HACK_66, 52391, Warning
#define XEVENT_COMMON_HACK_66 0x8000CCA7

// XEVENT_COMMON_HACK_67, 52392, Warning
#define XEVENT_COMMON_HACK_67 0x8000CCA8

// XEVENT_COMMON_HACK_68, 52393, Warning
#define XEVENT_COMMON_HACK_68 0x8000CCA9

// XEVENT_COMMON_HACK_69, 52394, Warning
#define XEVENT_COMMON_HACK_69 0x8000CCAA

// XEVENT_COMMON_HACK_70, 52395, Warning
#define XEVENT_COMMON_HACK_70 0x8000CCAB

// XEVENT_AUTHDATA_VERIFICATION_ERROR_6, 52396, Warning
#define XEVENT_AUTHDATA_VERIFICATION_ERROR_6 0x8000CCAC

// XEVENT_COMMON_HACK_72, 52397, Warning
#define XEVENT_COMMON_HACK_72 0x8000CCAD

// XEVENT_AUTHDATA_VERIFICATION_ERROR_7, 52398, Warning
#define XEVENT_AUTHDATA_VERIFICATION_ERROR_7 0x8000CCAE

// XEVENT_AUTHDATA_VERIFICATION_ERROR_8, 52399, Warning
#define XEVENT_AUTHDATA_VERIFICATION_ERROR_8 0x8000CCAF

// XEVENT_AUTHDATA_VERIFICATION_ERROR_9, 52400, Warning
#define XEVENT_AUTHDATA_VERIFICATION_ERROR_9 0x8000CCB0

// XEVENT_COMMON_HACK_76, 52401, Warning
#define XEVENT_COMMON_HACK_76 0x8000CCB1

// XEVENT_WIREDATA_END_OF_STREAM, 52402, Warning
#define XEVENT_WIREDATA_END_OF_STREAM 0x8000CCB2

// XEVENT_COMMON_HACK_78, 52403, Warning
#define XEVENT_COMMON_HACK_78 0x8000CCB3

// XEVENT_COMMON_HACK_79, 52404, Warning
#define XEVENT_COMMON_HACK_79 0x8000CCB4

// XEVENT_COMMON_HACK_80, 52405, Warning
#define XEVENT_COMMON_HACK_80 0x8000CCB5

// XEVENT_HACK_CONTENT_NOT_FOUND, 52406, Warning
#define XEVENT_HACK_CONTENT_NOT_FOUND 0x8000CCB6

// XEVENT_USER_AGENT_MISSING, 52412, Error
#define XEVENT_USER_AGENT_MISSING 0xC000CCBC

// XEVENT_USER_AGENT_INVALID, 52413, Error
#define XEVENT_USER_AGENT_INVALID 0xC000CCBD

// XEVENT_AAINFO_INVALID_REQUEST, 52414, Error
#define XEVENT_AAINFO_INVALID_REQUEST 0xC000CCBE

// XEVENT_COMMON_HACK_81, 52415, Error
#define XEVENT_COMMON_HACK_81 0xC000CCBF

// XEVENT_AUTHDATA_VERIFICATION_ERROR_10, 52416, Error
#define XEVENT_AUTHDATA_VERIFICATION_ERROR_10 0xC000CCC0

// XEVENT_COMMON_INFO_4, 52529, Info
#define XEVENT_COMMON_INFO_4 0x4000CD31

// XEVENT_COMMON_INFO_5, 52530, Info
#define XEVENT_COMMON_INFO_5 0x4000CD32

// XEVENT_COMMON_INFO_6, 52531, Info
#define XEVENT_COMMON_INFO_6 0x4000CD33

// XEVENT_COMMON_INFO_7, 52532, Info
#define XEVENT_COMMON_INFO_7 0x4000CD34

// XEVENT_COMMON_INFO_8, 52533, Info
#define XEVENT_COMMON_INFO_8 0x4000CD35

// XEVENT_COMMON_INFO_9, 52534, Info
#define XEVENT_COMMON_INFO_9 0x4000CD36

// XEVENT_COMMON_INFO_10, 52535, Info
#define XEVENT_COMMON_INFO_10 0x4000CD37

// XEVENT_COMMON_INFO_11, 52536, Info
#define XEVENT_COMMON_INFO_11 0x4000CD38

// XEVENT_COMMON_INFO_12, 52537, Info
#define XEVENT_COMMON_INFO_12 0x4000CD39

// XEVENT_COMMON_INFO_13, 52538, Info
#define XEVENT_COMMON_INFO_13 0x4000CD3A

// XEVENT_COMMON_INFO_14, 52539, Info
#define XEVENT_COMMON_INFO_14 0x4000CD3B

// XEVENT_COMMON_INFO_15, 52540, Info
#define XEVENT_COMMON_INFO_15 0x4000CD3C

// XEVENT_COMMON_INFO_16, 52541, Info
#define XEVENT_COMMON_INFO_16 0x4000CD3D

// XEVENT_COMMON_INFO_17, 52542, Info
#define XEVENT_COMMON_INFO_17 0x4000CD3E

// XEVENT_COMMON_INFO_18, 52543, Info
#define XEVENT_COMMON_INFO_18 0x4000CD3F

// XEVENT_COMMON_INFO_19, 52544, Info
#define XEVENT_COMMON_INFO_19 0x4000CD40

// XEVENT_COMMON_INFO_20, 52545, Info
#define XEVENT_COMMON_INFO_20 0x4000CD41

// XEVENT_COMMON_INFO_21, 52546, Info
#define XEVENT_COMMON_INFO_21 0x4000CD42

// XEVENT_COMMON_INFO_22, 52547, Info
#define XEVENT_COMMON_INFO_22 0x4000CD43

// XEVENT_COMMON_INFO_23, 52548, Info
#define XEVENT_COMMON_INFO_23 0x4000CD44

// XEVENT_COMMON_INFO_24, 52549, Info
#define XEVENT_COMMON_INFO_24 0x4000CD45

// XEVENT_COMMON_INFO_25, 52550, Info
#define XEVENT_COMMON_INFO_25 0x4000CD46

// XEVENT_COMMON_INFO_26, 52551, Info
#define XEVENT_COMMON_INFO_26 0x4000CD47

// XEVENT_COMMON_INFO_27, 52552, Info
#define XEVENT_COMMON_INFO_27 0x4000CD48

// XEVENT_COMMON_INFO_28, 52553, Info
#define XEVENT_COMMON_INFO_28 0x4000CD49

// XEVENT_COMMON_INFO_29, 52554, Info
#define XEVENT_COMMON_INFO_29 0x4000CD4A

// XEVENT_COMMON_INFO_30, 52555, Info
#define XEVENT_COMMON_INFO_30 0x4000CD4B

// XEVENT_COMMON_INFO_31, 52556, Info
#define XEVENT_COMMON_INFO_31 0x4000CD4C

// XEVENT_COMMON_INFO_32, 52557, Info
#define XEVENT_COMMON_INFO_32 0x4000CD4D

// XEVENT_COMMON_INFO_33, 52558, Info
#define XEVENT_COMMON_INFO_33 0x4000CD4E

// XEVENT_COMMON_INFO_34, 52559, Info
#define XEVENT_COMMON_INFO_34 0x4000CD4F

// XEVENT_COMMON_INFO_35, 52560, Info
#define XEVENT_COMMON_INFO_35 0x4000CD50

// XEVENT_COMMON_INFO_36, 52561, Info
#define XEVENT_COMMON_INFO_36 0x4000CD51

// XEVENT_COMMON_INFO_37, 52562, Info
#define XEVENT_COMMON_INFO_37 0x4000CD52

// XEVENT_COMMON_INFO_38, 52563, Info
#define XEVENT_COMMON_INFO_38 0x4000CD53

// XEVENT_COMMON_INFO_39, 52564, Info
#define XEVENT_COMMON_INFO_39 0x4000CD54

// XEVENT_COMMON_INFO_40, 52565, Info
#define XEVENT_COMMON_INFO_40 0x4000CD55

// XEVENT_MC_APPDOMAIN_STARTED, 52566, Info
#define XEVENT_MC_APPDOMAIN_STARTED 0x4000CD56

// XEVENT_MC_APPDOMAIN_STARTED_1, 52567, Info
#define XEVENT_MC_APPDOMAIN_STARTED_1 0x4000CD57

// XEVENT_COMMON_INFO_43, 52568, Info
#define XEVENT_COMMON_INFO_43 0x4000CD58

// XEVENT_COMMON_INFO_44, 52569, Info
#define XEVENT_COMMON_INFO_44 0x4000CD59

// XEVENT_COMMON_INFO_45, 52570, Info
#define XEVENT_COMMON_INFO_45 0x4000CD5A

// XEVENT_COMMON_INFO_46, 52571, Info
#define XEVENT_COMMON_INFO_46 0x4000CD5B

// XEVENT_COMMON_INFO_47, 52572, Info
#define XEVENT_COMMON_INFO_47 0x4000CD5C

// XEVENT_COMMON_INFO_48, 52573, Info
#define XEVENT_COMMON_INFO_48 0x4000CD5D

// XEVENT_MGMT_SRV_CONNECTED, 52574, Info
#define XEVENT_MGMT_SRV_CONNECTED 0x4000CD5E

// XEVENT_REPORTINGTARGET_RECONNECTED, 52575, Info
#define XEVENT_REPORTINGTARGET_RECONNECTED 0x4000CD5F

// XEVENT_CONFIG_CHANGE_PROCESSED, 52576, Info
#define XEVENT_CONFIG_CHANGE_PROCESSED 0x4000CD60

// XEVENT_HEALTH_REPORT_GREEN, 52577, Info
#define XEVENT_HEALTH_REPORT_GREEN 0x4000CD61

// XEVENT_COMMON_CONFIG_INFO_HEALTH_CHANGE, 52578, Info
#define XEVENT_COMMON_CONFIG_INFO_HEALTH_CHANGE 0x4000CD62

// XEVENT_COMMON_SETTING_BATCH_COUNT, 52579, Info
#define XEVENT_COMMON_SETTING_BATCH_COUNT 0x4000CD63

// XEVENT_COMMON_BUCKET_COUNT, 52580, Info
#define XEVENT_COMMON_BUCKET_COUNT 0x4000CD64

// XEVENT_COMMON_CONFIG_INFO_LIVE_REGISTRY_SETTINGS_CHANGE, 52581, Info
#define XEVENT_COMMON_CONFIG_INFO_LIVE_REGISTRY_SETTINGS_CHANGE 0x4000CD65

// XEVENT_COMMON_WARNING_0, 52725, Warning
#define XEVENT_COMMON_WARNING_0 0x8000CDF5

// XEVENT_HEALTH_REPORT_YELLOW, 52726, Warning
#define XEVENT_HEALTH_REPORT_YELLOW 0x8000CDF6

// XEVENT_AUDIT_INVALID_SUBSYSTEM, 63800, Error
#define XEVENT_AUDIT_INVALID_SUBSYSTEM 0xC000F938

// XEVENT_AUDIT_NO_SETTING, 63801, Error
#define XEVENT_AUDIT_NO_SETTING 0xC000F939

// XEVENT_AUDIT_LOG_FAILURE, 63802, Error
#define XEVENT_AUDIT_LOG_FAILURE 0xC000F93A

// XEVENT_MIX_COMMON_UNKNOWN_ERROR, 63083, Error
#define XEVENT_MIX_COMMON_UNKNOWN_ERROR 0xC000F66B

// XEVENT_MIX_COMMON_ENTITYFRAMEWORK_CONNECTION_ERROR, 63084, Error
#define XEVENT_MIX_COMMON_ENTITYFRAMEWORK_CONNECTION_ERROR 0xC000F66C

// XEVENT_MC_BAD_CODE_15, 63085, Error
#define XEVENT_MC_BAD_CODE_15 0xC000F66D

// XEVENT_MC_BAD_CODE_16, 63086, Error
#define XEVENT_MC_BAD_CODE_16 0xC000F66E

// XEVENT_COMMON_USER_1, 63087, Error
#define XEVENT_COMMON_USER_1 0xC000F66F

// XEVENT_COMMON_USER_2, 63089, Error
#define XEVENT_COMMON_USER_2 0xC000F671

// XEVENT_COMMON_USER_3, 63090, Error
#define XEVENT_COMMON_USER_3 0xC000F672

// XEVENT_COMMON_CATALOG_1, 63091, Error
#define XEVENT_COMMON_CATALOG_1 0xC000F673
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\events\obj\common.cs ===
SGINFO_CALL_SOURCE_INVALID = 40001 | XEvent.Severity.Error,
            SGINFO_VERIFY_PRIVILEGE = 40002 | XEvent.Severity.Error,
            XMGMT_FAILED_TO_REGISTER_ASSEMBLY = 40050 | XEvent.Severity.Warning,
            HEALTH_REQUEST_FAILED = 40051 | XEvent.Severity.Error,
            HEALTH_INITIALIZE_INTEROP_FAILED = 40052 | XEvent.Severity.Error,
            HEALTH_REGISTERNATIVEHEALTHBLOCK_FAILED = 40053 | XEvent.Severity.Error,
            HEALTH_LISTENER_CALLBACK_REQUEST_FAILED = 40054 | XEvent.Severity.Error,
            HEALTH_LISTENER_CALLBACK_FAILED = 40055 | XEvent.Severity.Error,
            MSNRR_EXTERNAL_EXCEPTION = 40056 | XEvent.Severity.Error,
            SCS_NON_USER_EXCEPTION = 40057 | XEvent.Severity.Error,
            FAST_FAIL_DUPLICATE_RESOURCE = 40058 | XEvent.Severity.Warning,
            FAST_FAIL_ENABLED_DISABLED_TOGGLE = 40059 | XEvent.Severity.Info,
            FAST_FAIL_BUCKET_COUNT_CHANGE = 40060 | XEvent.Severity.Info,
            HEALTH_INITIALIZE_BLOCK_FAILED = 40061 | XEvent.Severity.Warning,
            SERVICE_KEY_LOAD_ERROR = 40062 | XEvent.Severity.Error,
            SERVICE_KEY_SAVE_ERROR = 40063 | XEvent.Severity.Error,
            SERVICE_KEY_NOT_FOUND = 40064 | XEvent.Severity.Error,
            GEOFENCE_TERRITORY_MAPPING_INVALID = 40065 | XEvent.Severity.Error,
            GEOFENCE_TERRITORY_MAPPING_AMBIGUOUS = 40066 | XEvent.Severity.Error,
            GEOFENCE_TERRITORY_MAPPING_DUPLICATE = 40067 | XEvent.Severity.Info,
            WIREDATA_DECRYPTION_ERROR = 40068 | XEvent.Severity.Warning,
            ACCELERATION_END_OF_STREAM = 40069 | XEvent.Severity.Warning,
            XBANC_END_OF_STREAM = 40070 | XEvent.Severity.Warning,
            SERVICE_KEY_IMPORT_ERROR = 40071 | XEvent.Severity.Error,
            WIREDATA_DESERIALIZATION_ERROR = 40072 | XEvent.Severity.Warning,
            LSPLIB_DATABASE_ERROR = 40073 | XEvent.Severity.Error,
            LOGTARGET_CREATE_ERROR = 40074 | XEvent.Severity.Error,
            SCS_QUEUE_FAILED_TO_UNCONSUME_TOKEN = 40075 | XEvent.Severity.Error,
            ACCOUNTS_HISTORY_GET_ERROR = 40076 | XEvent.Severity.Error,
            ACCOUNTS_HISTORY_LOG_ERROR = 40077 | XEvent.Severity.Error,
            ACCOUNTS_GAMERTAG_HISTORY_LOG_ERROR = 40078 | XEvent.Severity.Error,
            ACCOUNTS_USER_GAMERTAG_THRESHOLD_EXCEEDED = 40079 | XEvent.Severity.Warning,
            ACCOUNTS_MACHINE_GAMERTAG_THRESHOLD_EXCEEDED = 40080 | XEvent.Severity.Warning,
            ACCOUNTS_PASSPORT_HISTORY_LOG_ERROR = 40081 | XEvent.Severity.Error,
            ACCOUNTS_USER_PASSPORT_THRESHOLD_EXCEEDED = 40082 | XEvent.Severity.Warning,
            ACCOUNTS_MACHINE_PASSPORT_THRESHOLD_EXCEEDED = 40083 | XEvent.Severity.Warning,
            ACCOUNTS_RECOVERY_HISTORY_LOG_ERROR = 40084 | XEvent.Severity.Error,
            ACCOUNTS_USER_RECOVERY_THRESHOLD_EXCEEDED = 40085 | XEvent.Severity.Warning,
            ACCOUNTS_MACHINE_RECOVERY_THRESHOLD_EXCEEDED = 40086 | XEvent.Severity.Warning,
            ACCOUNTS_HIJACKING_WARNING = 40087 | XEvent.Severity.Warning,
            ACCOUNTS_HIJACKING_ERROR = 40088 | XEvent.Severity.Error,
            XCACHECONNECTION_NO_RECEIVETIMEOUT_SETTING = 40089 | XEvent.Severity.Error,
            XCACHECONNECTION_NO_SENDTIMEOUT_SETTING = 40090 | XEvent.Severity.Error,
            AUTHDATA_NO_MORE_SERVICES_ERROR = 40091 | XEvent.Severity.Error,
            AAINFO_DATA_VERIFICATION_ERROR = 40092 | XEvent.Severity.Error,
            AAINFO_DATA_VERIFICATION_WARNING = 40093 | XEvent.Severity.Warning,
            USER_FAMILY_DATA_MISSING = 40094 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_CHANGE_STATE = 40095 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_CHANGE_BILLING_STATE = 40096 | XEvent.Severity.Error,
            ACCOUNTS_FAMILY_HISTORY_LOG_ERROR = 40097 | XEvent.Severity.Error,
            FINBUS_RECORD_TRANSACTION_INTENT_FAILURE = 40098 | XEvent.Severity.Error,
            FINBUS_RECORD_TRANSACTION_SUCESS_FAILURE = 40099 | XEvent.Severity.Error,
            FINBUS_RECORD_TRANSACTION_RESULT_FAILURE = 40100 | XEvent.Severity.Error,
            FINBUS_RECORD_TRANSACTION_PREINTENT_FAILURE = 40101 | XEvent.Severity.Error,
            FINBUS_GET_RETRY_COUNT_FAILURE = 40102 | XEvent.Severity.Error,
            FINBUS_GET_ITEM_FOR_RETRY_FAILURE = 40103 | XEvent.Severity.Error,
            FINBUS_TOKEN_REDEMPTION_ITEM_RETRY_FAILURE = 40104 | XEvent.Severity.Error,
            FINBUS_PURCHASE_ORDER_ITEM_RETRY_FAILURE = 40105 | XEvent.Severity.Error,
            FINBUS_TRANSACTION_RESPONSE_IS_INVALID = 40106 | XEvent.Severity.Error,
            FINBUS_MISSING_XNA_CREATOR_ID_ERROR = 40107 | XEvent.Severity.Error,
            FINBUS_QUEUE_TIMER_RESET_ERROR = 40108 | XEvent.Severity.Error,
            FINBUS_QUEUE_IMPERSONATION_UNDO_ERROR = 40109 | XEvent.Severity.Error,
            FINBUS_QUEUE_PUMP_ERROR = 40110 | XEvent.Severity.Error,
            FINBUS_QUEUE_GET_RETRYABLE_COUNT_ERROR = 40111 | XEvent.Severity.Error,
            FINBUS_QUEUE_GET_ITEM_FOR_RETRY_ERROR = 40112 | XEvent.Severity.Error,
            FINBUS_QUEUE_RETRY_ITEM_ERROR = 40113 | XEvent.Severity.Error,
            FINBUS_QUEUE_COMMUNICATION_ERROR = 40114 | XEvent.Severity.Error,
            MGMT_MISSING_REPORTING_COMPONENT_ID = 40115 | XEvent.Severity.Error,
            THREADPOOL_CONTEXT_EXCEPTION = 40116 | XEvent.Severity.Error,
            THREADPOOL_THREAD_EXCEPTION = 40117 | XEvent.Severity.Error,
            FINBUS_QUEUE_ITEM_FAILED = 40118 | XEvent.Severity.Warning,
            ETX_EVENT_HEADER_VERSION_MISSING = 40119 | XEvent.Severity.Error,
            ACCOUNT_MOVE_SUBSCRIPTION_ERROR = 40120 | XEvent.Severity.Error,
            SUBSCRIPTION_BAD_CREDITVALUE_ERROR = 40121 | XEvent.Severity.Error,
            PASSPORT_GET_PROFILE_ERROR = 40122 | XEvent.Severity.Error,
            TRACKED_API_CALL_DATABASE_ERROR = 40123 | XEvent.Severity.Error,
            TRACKED_API_CALL_UCDB_DATABASE_ERROR = 40124 | XEvent.Severity.Error,
            COMMON_CODE_20 = 50845 | XEvent.Severity.Error,
            CRYPTO_GENERAL_ERROR = 50846 | XEvent.Severity.Error,
            COMMON_CODE_22 = 50847 | XEvent.Severity.Error,
            COMMON_CODE_23 = 50848 | XEvent.Severity.Error,
            COMMON_CODE_24 = 50849 | XEvent.Severity.Error,
            MC_APPLICATION_ERROR = 50850 | XEvent.Severity.Error,
            COMMON_CODE_26 = 50851 | XEvent.Severity.Error,
            COMMON_CODE_27 = 50852 | XEvent.Severity.Error,
            COMMON_CODE_28 = 50853 | XEvent.Severity.Error,
            COMMON_CODE_29 = 50854 | XEvent.Severity.Error,
            COMMON_CODE_30 = 50855 | XEvent.Severity.Error,
            COMMON_CODE_31 = 50856 | XEvent.Severity.Error,
            COMMON_CODE_32 = 50857 | XEvent.Severity.Error,
            COMMON_CODE_33 = 50858 | XEvent.Severity.Error,
            COMMON_CODE_34 = 50859 | XEvent.Severity.Error,
            COMMON_CODE_35 = 50860 | XEvent.Severity.Error,
            COMMON_CODE_36 = 50861 | XEvent.Severity.Error,
            COMMON_CODE_37 = 50862 | XEvent.Severity.Error,
            COMMON_CODE_38 = 50863 | XEvent.Severity.Error,
            MC_PLUGIN_ERROR = 50864 | XEvent.Severity.Error,
            MC_PLUGIN_ERROR_1 = 50865 | XEvent.Severity.Error,
            COMMON_CODE_41 = 50866 | XEvent.Severity.Error,
            COMMON_CODE_42 = 50867 | XEvent.Severity.Error,
            COMMON_CODE_43 = 50868 | XEvent.Severity.Error,
            COMMON_CODE_46 = 50871 | XEvent.Severity.Error,
            COMMON_CODE_48 = 50873 | XEvent.Severity.Error,
            QUERY_BAD_PARAMETER = 50876 | XEvent.Severity.Error,
            QUERY_BAD_PARAMETER_1 = 50877 | XEvent.Severity.Error,
            COMMON_CODE_53 = 50878 | XEvent.Severity.Error,
            COMMON_CODE_54 = 50879 | XEvent.Severity.Error,
            COMMON_CODE_55 = 50880 | XEvent.Severity.Error,
            COMMON_CODE_56 = 50881 | XEvent.Severity.Error,
            COMMON_CODE_57 = 50882 | XEvent.Severity.Error,
            COMMON_CODE_58 = 50883 | XEvent.Severity.Error,
            COMMON_CODE_59 = 50884 | XEvent.Severity.Error,
            MC_BAD_PARAMETER = 50885 | XEvent.Severity.Error,
            MC_BAD_PARAMETER_1 = 50886 | XEvent.Severity.Error,
            MC_APPLICATION_ERROR_1 = 50887 | XEvent.Severity.Error,
            MC_APPLICATION_ERROR_2 = 50888 | XEvent.Severity.Error,
            MC_APPLICATION_ERROR_3 = 50889 | XEvent.Severity.Error,
            MC_BAD_PARAMETER_2 = 50890 | XEvent.Severity.Error,
            COMMON_CODE_66 = 50891 | XEvent.Severity.Error,
            MC_BAD_CODE = 50892 | XEvent.Severity.Error,
            MC_BAD_CODE_1 = 50893 | XEvent.Severity.Error,
            MC_BAD_CODE_2 = 50894 | XEvent.Severity.Error,
            MC_BAD_CODE_3 = 50895 | XEvent.Severity.Error,
            MC_BAD_CODE_4 = 50896 | XEvent.Severity.Error,
            MC_BAD_CODE_5 = 50897 | XEvent.Severity.Error,
            MC_BAD_CODE_6 = 50898 | XEvent.Severity.Error,
            COMMON_CODE_74 = 50899 | XEvent.Severity.Error,
            COMMON_CODE_75 = 50900 | XEvent.Severity.Error,
            COMMON_CODE_76 = 50901 | XEvent.Severity.Error,
            MC_BAD_CODE_7 = 50902 | XEvent.Severity.Error,
            MC_BAD_CODE_8 = 50903 | XEvent.Severity.Error,
            MC_BAD_CODE_9 = 50904 | XEvent.Severity.Error,
            MC_BAD_CODE_10 = 50905 | XEvent.Severity.Error,
            MC_BAD_CODE_11 = 50906 | XEvent.Severity.Error,
            MC_BAD_CODE_12 = 50907 | XEvent.Severity.Error,
            MC_BAD_CODE_13 = 50908 | XEvent.Severity.Error,
            MC_BAD_CODE_14 = 50909 | XEvent.Severity.Error,
            COMMON_CODE_85 = 50910 | XEvent.Severity.Error,
            COMMON_CODE_86 = 50911 | XEvent.Severity.Error,
            FORBIDDEN_NAMES_LOAD_FAILURE = 50912 | XEvent.Severity.Error,
            MC_APPLICATION_ERROR_5 = 50913 | XEvent.Severity.Error,
            MC_APPLICATION_ERROR_6 = 50914 | XEvent.Severity.Error,
            MC_APPLICATION_ERROR_7 = 50915 | XEvent.Severity.Error,
            COMMON_CODE_91 = 50916 | XEvent.Severity.Error,
            COMMON_CODE_92 = 50917 | XEvent.Severity.Error,
            MGMT_GENERIC_ERROR = 50918 | XEvent.Severity.Error,
            MGMT_GENERIC_ERROR_1 = 50919 | XEvent.Severity.Error,
            MGMT_GENERIC_ERROR_2 = 50920 | XEvent.Severity.Error,
            MGMT_GENERIC_ERROR_3 = 50921 | XEvent.Severity.Error,
            COMMON_CODE_97 = 50922 | XEvent.Severity.Error,
            MGMT_GENERIC_ERROR_4 = 50923 | XEvent.Severity.Error,
            COMMON_CODE_99 = 50924 | XEvent.Severity.Error,
            COMMON_CODE_100 = 50925 | XEvent.Severity.Error,
            COMMON_CODE_101 = 50926 | XEvent.Severity.Error,
            COMMON_CODE_102 = 50927 | XEvent.Severity.Error,
            COMMON_CODE_103 = 50928 | XEvent.Severity.Error,
            COMMON_CODE_104 = 50929 | XEvent.Severity.Error,
            COMMON_CODE_105 = 50930 | XEvent.Severity.Error,
            COMMON_CODE_106 = 50931 | XEvent.Severity.Error,
            COMMON_CODE_107 = 50932 | XEvent.Severity.Error,
            COMMON_CODE_108 = 50933 | XEvent.Severity.Error,
            COMMON_CODE_109 = 50934 | XEvent.Severity.Error,
            HEALTH_GENERIC_ERROR_1 = 50935 | XEvent.Severity.Error,
            SQL_EXECUTE_READER = 50936 | XEvent.Severity.Error,
            SQL_EXECUTE_READER_BEHAVIOR = 50937 | XEvent.Severity.Error,
            SQL_EXECUTE_NON_QUERY = 50938 | XEvent.Severity.Error,
            SQL_EXECUTE_SCALAR = 50939 | XEvent.Severity.Error,
            COUNTRY_LIST_MISSING = 50940 | XEvent.Severity.Error,
            COMMON_CODE_117 = 50942 | XEvent.Severity.Error,
            COMMON_CODE_118 = 50943 | XEvent.Severity.Error,
            DEPRECATED_COMMON_CODE_119 = 50944 | XEvent.Severity.Error,
            DEPRECATED_COMMON_CODE_120 = 50945 | XEvent.Severity.Error,
            COMMON_CODE_121 = 50946 | XEvent.Severity.Error,
            COMMON_CODE_122 = 50947 | XEvent.Severity.Error,
            CRYPTO_TOO_MANY_USER_KEYS = 50948 | XEvent.Severity.Warning,
            CRYPTO_FAILED_GET_USER_KEYS = 50949 | XEvent.Severity.Error,
            MUSICNET_EXTERNAL_EXCEPTION = 50958 | XEvent.Severity.Error,
            COMMON_CODE_146 = 50971 | XEvent.Severity.Error,
            COMMON_CODE_147 = 50972 | XEvent.Severity.Error,
            COMMON_CODE_148 = 50973 | XEvent.Severity.Error,
            COMMON_CODE_149 = 50974 | XEvent.Severity.Error,
            COMMON_CODE_150 = 50975 | XEvent.Severity.Error,
            COMMON_CODE_151 = 50976 | XEvent.Severity.Error,
            COMMON_CODE_152 = 50977 | XEvent.Severity.Error,
            COMMON_CODE_153 = 50978 | XEvent.Severity.Error,
            COMMON_CODE_154 = 50979 | XEvent.Severity.Error,
            COMMON_CODE_155 = 50980 | XEvent.Severity.Error,
            COMMON_CODE_156 = 50981 | XEvent.Severity.Error,
            COMMON_CODE_157 = 50982 | XEvent.Severity.Error,
            COMMON_CODE_158 = 50983 | XEvent.Severity.Error,
            COMMON_CODE_159 = 50984 | XEvent.Severity.Error,
            COMMON_CODE_160 = 50985 | XEvent.Severity.Error,
            COMMON_CODE_161 = 50986 | XEvent.Severity.Error,
            COMMON_CODE_162 = 50987 | XEvent.Severity.Error,
            COMMON_CODE_163 = 50988 | XEvent.Severity.Error,
            COMMON_CODE_164 = 50989 | XEvent.Severity.Error,
            COMMON_CODE_165 = 50990 | XEvent.Severity.Error,
            COMMON_CODE_166 = 50991 | XEvent.Severity.Error,
            COMMON_CODE_167 = 50992 | XEvent.Severity.Error,
            COMMON_CODE_168 = 50993 | XEvent.Severity.Error,
            COMMON_CODE_169 = 50994 | XEvent.Severity.Error,
            COMMON_CODE_170 = 50995 | XEvent.Severity.Error,
            COMMON_CODE_171 = 50996 | XEvent.Severity.Error,
            COMMON_CODE_172 = 50997 | XEvent.Severity.Error,
            COMMON_CODE_173 = 50998 | XEvent.Severity.Error,
            COMMON_CODE_174 = 50999 | XEvent.Severity.Error,
            COMMON_CODE_175 = 51000 | XEvent.Severity.Error,
            COMMON_CODE_176 = 51001 | XEvent.Severity.Error,
            COMMON_CODE_177 = 51002 | XEvent.Severity.Error,
            COMMON_CODE_178 = 51003 | XEvent.Severity.Error,
            COMMON_CODE_179 = 51004 | XEvent.Severity.Error,
            COMMON_CODE_180 = 51005 | XEvent.Severity.Error,
            COMMON_CODE_181 = 51006 | XEvent.Severity.Error,
            COMMON_CODE_182 = 51007 | XEvent.Severity.Error,
            COMMON_CODE_183 = 51008 | XEvent.Severity.Error,
            COMMON_CODE_184 = 51009 | XEvent.Severity.Error,
            COMMON_CODE_185 = 51010 | XEvent.Severity.Error,
            WEBSTORE_EXECUTE_ERROR = 51011 | XEvent.Severity.Error,
            WEBSTORE_EXECUTE_TIMEOUT_ERROR = 51012 | XEvent.Severity.Error,
            WEBSTORE_EXECUTE_DEADLOCK_ERROR = 51013 | XEvent.Severity.Error,
            COMMON_CODE_189 = 51014 | XEvent.Severity.Error,
            COMMON_CODE_190 = 51015 | XEvent.Severity.Error,
            COMMON_CODE_191 = 51016 | XEvent.Severity.Error,
            COMMON_CODE_192 = 51017 | XEvent.Severity.Error,
            COMMON_CODE_193 = 51018 | XEvent.Severity.Error,
            COMMON_CODE_194 = 51019 | XEvent.Severity.Error,
            COMMON_CODE_195 = 51020 | XEvent.Severity.Error,
            COMMON_CODE_196 = 51021 | XEvent.Severity.Error,
            COMMON_CODE_197 = 51022 | XEvent.Severity.Error,
            COMMON_CODE_198 = 51023 | XEvent.Severity.Error,
            COMMON_CODE_199 = 51024 | XEvent.Severity.Error,
            COMMON_CODE_200 = 51025 | XEvent.Severity.Error,
            DEPRECATED_SYNCCAST_EXTERNAL_EXCEPTION = 51030 | XEvent.Severity.Error,
            COMMON_CODE_208 = 51033 | XEvent.Severity.Error,
            COMMON_CODE_209 = 51034 | XEvent.Severity.Error,
            COMMON_CODE_210 = 51035 | XEvent.Severity.Error,
            COMMON_CODE_211 = 51036 | XEvent.Severity.Error,
            COMMON_CODE_212 = 51037 | XEvent.Severity.Error,
            COMMON_CODE_213 = 51038 | XEvent.Severity.Error,
            COMMON_CODE_214 = 51039 | XEvent.Severity.Error,
            COMMON_CODE_215 = 51040 | XEvent.Severity.Error,
            COMMON_CODE_216 = 51041 | XEvent.Severity.Error,
            COMMON_CODE_217 = 51042 | XEvent.Severity.Error,
            COMMON_CODE_218 = 51043 | XEvent.Severity.Error,
            COMMON_CODE_219 = 51044 | XEvent.Severity.Error,
            COMMON_CODE_220 = 51045 | XEvent.Severity.Error,
            COMMON_CODE_221 = 51046 | XEvent.Severity.Error,
            COMMON_CODE_222 = 51047 | XEvent.Severity.Error,
            COMMON_CODE_223 = 51048 | XEvent.Severity.Error,
            COMMON_CODE_224 = 51049 | XEvent.Severity.Error,
            COMMON_CODE_225 = 51050 | XEvent.Severity.Error,
            COMMON_CODE_226 = 51051 | XEvent.Severity.Error,
            COMMON_CODE_227 = 51052 | XEvent.Severity.Error,
            COMMON_CODE_228 = 51053 | XEvent.Severity.Error,
            DEPRECATED_COMMON_CODE_229 = 51054 | XEvent.Severity.Error,
            DEPRECATED_COMMON_CODE_230 = 51055 | XEvent.Severity.Error,
            COMMON_CODE_231 = 51056 | XEvent.Severity.Error,
            COMMON_CODE_232 = 51057 | XEvent.Severity.Error,
            WMIS_EXTERNAL_EXCEPTION = 51058 | XEvent.Severity.Error,
            COMMON_CODE_MATCH_STARTMIGRATE_FAILED = 51059 | XEvent.Severity.Error,
            COMMON_CODE_MATCH_MIGRATESTATUS_FAILED_SPROC = 51060 | XEvent.Severity.Error,
            COMMON_CODE_MATCH_UPDLTC_TV_FAILED = 51061 | XEvent.Severity.Error,
            COMMON_CODE_MATCH_UPDLTC_NPDB_FAILED = 51062 | XEvent.Severity.Error,
            COMMON_CODE_LSPLIB_SQLEXCEPTION = 51063 | XEvent.Severity.Error,
            HEALTH_REPORT_RED = 51064 | XEvent.Severity.Error,
            HEALTH_ENGINE_FAILURE = 51065 | XEvent.Severity.Error,
            FEAPP_INITIALIZATION_METHOD_FAILED = 51066 | XEvent.Severity.Error,
            FEAPP_INITIALIZATION_METHOD_NOT_FOUND = 51067 | XEvent.Severity.Error,
            FAST_FAIL_MISSING_COUNTERS = 51068 | XEvent.Severity.Error,
            FAST_FAIL_MISSING_RESOURCE = 51069 | XEvent.Severity.Error,
            FEAPP_COMPRESSION_ERROR = 51070 | XEvent.Severity.Error,
            UNHANDLED_THREAD_EXCEPTION = 51071 | XEvent.Severity.Error,
            FEAPP_INIT_FAILURE = 51072 | XEvent.Severity.Error,
            FORBIDDEN_NAMES_EXCLUDED_TITLES_CONFIG_ERROR = 51073 | XEvent.Severity.Error,
            COMMON_COMM_6 = 51231 | XEvent.Severity.Error,
            COMMON_COMM_7 = 51232 | XEvent.Severity.Error,
            COMMON_COMM_8 = 51233 | XEvent.Severity.Error,
            COMMON_COMM_9 = 51234 | XEvent.Severity.Error,
            COMMON_COMM_10 = 51235 | XEvent.Severity.Error,
            COMMON_COMM_11 = 51236 | XEvent.Severity.Error,
            COMMON_COMM_12 = 51237 | XEvent.Severity.Error,
            COMMON_COMM_13 = 51238 | XEvent.Severity.Error,
            XCACHE_CLIENT_BROKEN_PIPE = 51239 | XEvent.Severity.Error,
            XCACHE_CLIENT_BROKEN_PIPE_1 = 51240 | XEvent.Severity.Error,
            XCACHE_CLIENT_BROKEN_PIPE_2 = 51241 | XEvent.Severity.Error,
            XCACHE_CLIENT_BROKEN_PIPE_3 = 51242 | XEvent.Severity.Error,
            XCACHE_CLIENT_BROKEN_PIPE_4 = 51243 | XEvent.Severity.Error,
            XCACHE_SERVER_BUSY = 51244 | XEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE = 51245 | XEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_1 = 51246 | XEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_2 = 51247 | XEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_3 = 51248 | XEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_4 = 51249 | XEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_5 = 51250 | XEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_6 = 51251 | XEvent.Severity.Error,
            PIPE_FAILURE = 51252 | XEvent.Severity.Error,
            PIPE_FAILURE_1 = 51253 | XEvent.Severity.Error,
            PIPE_FAILURE_2 = 51254 | XEvent.Severity.Error,
            AUTHDATA_SG_COMMUNICATION_ERROR = 51255 | XEvent.Severity.Error,
            COMMON_COMM_31 = 51256 | XEvent.Severity.Error,
            AUTHDATA_SG_COMMUNICATION_ERROR_1 = 51257 | XEvent.Severity.Error,
            MC_XRL_REQUEST_ERROR = 51258 | XEvent.Severity.Error,
            COMMON_COMM_34 = 51259 | XEvent.Severity.Error,
            COMMON_COMM_35 = 51260 | XEvent.Severity.Error,
            COMMON_COMM_36 = 51261 | XEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_7 = 51262 | XEvent.Severity.Error,
            XCACHE_INVALID_RESPONSE_1 = 51263 | XEvent.Severity.Error,
            FORBIDDEN_NAMES_LOAD_SUCCESS = 51264 | XEvent.Severity.Info,
            FORBIDDEN_NAMES_UNVETTED_STRING = 51265 | XEvent.Severity.Error,
            MUSICNET_ACCOUNT_CREATE_FAILED = 51354 | XEvent.Severity.Error,
            COMMON_CONFIG_69 = 51394 | XEvent.Severity.Warning,
            COMMON_CONFIG_70 = 51395 | XEvent.Severity.Error,
            COMMON_CONFIG_71 = 51396 | XEvent.Severity.Warning,
            COMMON_CONFIG_72 = 51397 | XEvent.Severity.Warning,
            COMMON_CONFIG_73 = 51398 | XEvent.Severity.Warning,
            COMMON_CONFIG_74 = 51399 | XEvent.Severity.Warning,
            COMMON_CONFIG_75 = 51400 | XEvent.Severity.Warning,
            COMMON_CONFIG_76 = 51401 | XEvent.Severity.Warning,
            COMMON_CONFIG_77 = 51402 | XEvent.Severity.Warning,
            COMMON_CONFIG_78 = 51403 | XEvent.Severity.Error,
            COMMON_CONFIG_79 = 51404 | XEvent.Severity.Warning,
            COMMON_CONFIG_80 = 51405 | XEvent.Severity.Warning,
            COMMON_CONFIG_81 = 51406 | XEvent.Severity.Warning,
            COMMON_CONFIG_82 = 51407 | XEvent.Severity.Warning,
            COMMON_CONFIG_83 = 51408 | XEvent.Severity.Warning,
            COMMON_CONFIG_84 = 51409 | XEvent.Severity.Error,
            COMMON_CONFIG_85 = 51410 | XEvent.Severity.Error,
            COMMON_CONFIG_86 = 51411 | XEvent.Severity.Error,
            COMMON_CONFIG_87 = 51412 | XEvent.Severity.Error,
            COMMON_CONFIG_88 = 51413 | XEvent.Severity.Error,
            COMMON_CONFIG_89 = 51414 | XEvent.Severity.Error,
            COMMON_CONFIG_90 = 51415 | XEvent.Severity.Error,
            COMMON_CONFIG_91 = 51416 | XEvent.Severity.Error,
            COMMON_CONFIG_92 = 51417 | XEvent.Severity.Error,
            COMMON_CONFIG_93 = 51418 | XEvent.Severity.Error,
            COMMON_CONFIG_94 = 51419 | XEvent.Severity.Error,
            COMMON_CONFIG_95 = 51420 | XEvent.Severity.Error,
            COMMON_CONFIG_96 = 51421 | XEvent.Severity.Error,
            COMMON_CONFIG_97 = 51422 | XEvent.Severity.Error,
            COMMON_CONFIG_98 = 51423 | XEvent.Severity.Error,
            COMMON_CONFIG_99 = 51424 | XEvent.Severity.Error,
            COMMON_CONFIG_100 = 51425 | XEvent.Severity.Error,
            COMMON_CONFIG_101 = 51426 | XEvent.Severity.Error,
            COMMON_CONFIG_102 = 51427 | XEvent.Severity.Error,
            COMMON_CONFIG_103 = 51428 | XEvent.Severity.Error,
            COMMON_CONFIG_104 = 51429 | XEvent.Severity.Error,
            COMMON_CONFIG_105 = 51430 | XEvent.Severity.Error,
            COMMON_CONFIG_106 = 51431 | XEvent.Severity.Error,
            COMMON_CONFIG_107 = 51432 | XEvent.Severity.Error,
            COMMON_CONFIG_108 = 51433 | XEvent.Severity.Error,
            COMMON_CONFIG_109 = 51434 | XEvent.Severity.Warning,
            COMMON_CONFIG_110 = 51435 | XEvent.Severity.Error,
            COMMON_CONFIG_111 = 51436 | XEvent.Severity.Error,
            COMMON_CONFIG_112 = 51437 | XEvent.Severity.Error,
            COMMON_CONFIG_113 = 51438 | XEvent.Severity.Error,
            COMMON_CONFIG_114 = 51439 | XEvent.Severity.Error,
            COMMON_CONFIG_115 = 51440 | XEvent.Severity.Error,
            COMMON_CONFIG_116 = 51441 | XEvent.Severity.Error,
            COMMON_CONFIG_117 = 51442 | XEvent.Severity.Error,
            COMMON_CONFIG_118 = 51443 | XEvent.Severity.Error,
            COMMON_CONFIG_119 = 51444 | XEvent.Severity.Error,
            COMMON_CONFIG_120 = 51445 | XEvent.Severity.Error,
            COMMON_CONFIG_121 = 51446 | XEvent.Severity.Error,
            COMMON_CONFIG_122 = 51447 | XEvent.Severity.Error,
            COMMON_CONFIG_123 = 51448 | XEvent.Severity.Error,
            COMMON_CONFIG_124 = 51449 | XEvent.Severity.Error,
            COMMON_CONFIG_125 = 51450 | XEvent.Severity.Error,
            COMMON_CONFIG_126 = 51451 | XEvent.Severity.Error,
            COMMON_CONFIG_127 = 51452 | XEvent.Severity.Error,
            COMMON_CONFIG_128 = 51453 | XEvent.Severity.Error,
            COMMON_CONFIG_129 = 51454 | XEvent.Severity.Error,
            COMMON_CONFIG_130 = 51455 | XEvent.Severity.Error,
            COMMON_CONFIG_131 = 51456 | XEvent.Severity.Error,
            COMMON_CONFIG_132 = 51457 | XEvent.Severity.Error,
            COMMON_CONFIG_133 = 51458 | XEvent.Severity.Error,
            COMMON_CONFIG_134 = 51459 | XEvent.Severity.Warning,
            COMMON_CONFIG_135 = 51460 | XEvent.Severity.Error,
            COMMON_CONFIG_136 = 51461 | XEvent.Severity.Error,
            COMMON_CONFIG_137 = 51462 | XEvent.Severity.Error,
            COMMON_CONFIG_138 = 51463 | XEvent.Severity.Error,
            COMMON_CONFIG_139 = 51464 | XEvent.Severity.Error,
            COMMON_CONFIG_140 = 51465 | XEvent.Severity.Error,
            COMMON_CONFIG_141 = 51466 | XEvent.Severity.Error,
            COMMON_CONFIG_142 = 51467 | XEvent.Severity.Error,
            COMMON_CONFIG_143 = 51468 | XEvent.Severity.Error,
            COMMON_CONFIG_144 = 51469 | XEvent.Severity.Error,
            COMMON_CONFIG_145 = 51470 | XEvent.Severity.Error,
            COMMON_CONFIG_146 = 51471 | XEvent.Severity.Warning,
            COMMON_CONFIG_147 = 51472 | XEvent.Severity.Error,
            COMMON_CONFIG_148 = 51473 | XEvent.Severity.Error,
            COMMON_CONFIG_149 = 51474 | XEvent.Severity.Error,
            COMMON_CONFIG_150 = 51475 | XEvent.Severity.Error,
            COMMON_CONFIG_151 = 51476 | XEvent.Severity.Error,
            COMMON_CONFIG_152 = 51477 | XEvent.Severity.Error,
            COMMON_CONFIG_153 = 51478 | XEvent.Severity.Error,
            COMMON_CONFIG_154 = 51479 | XEvent.Severity.Error,
            COMMON_CONFIG_155 = 51480 | XEvent.Severity.Error,
            COMMON_CONFIG_156 = 51481 | XEvent.Severity.Error,
            COMMON_CONFIG_157 = 51482 | XEvent.Severity.Error,
            COMMON_CONFIG_158 = 51483 | XEvent.Severity.Error,
            COMMON_CONFIG_159 = 51484 | XEvent.Severity.Error,
            COMMON_CONFIG_160 = 51485 | XEvent.Severity.Error,
            COMMON_CONFIG_161 = 51486 | XEvent.Severity.Error,
            COMMON_CONFIG_162 = 51487 | XEvent.Severity.Error,
            COMMON_CONFIG_163 = 51488 | XEvent.Severity.Error,
            COMMON_CONFIG_164 = 51489 | XEvent.Severity.Error,
            COMMON_CONFIG_165 = 51490 | XEvent.Severity.Error,
            COMMON_CONFIG_166 = 51491 | XEvent.Severity.Error,
            COMMON_CONFIG_167 = 51492 | XEvent.Severity.Error,
            COMMON_CONFIG_168 = 51493 | XEvent.Severity.Error,
            COMMON_CONFIG_169 = 51494 | XEvent.Severity.Error,
            COMMON_CONFIG_170 = 51495 | XEvent.Severity.Warning,
            COMMON_CONFIG_171 = 51496 | XEvent.Severity.Error,
            COMMON_CONFIG_172 = 51497 | XEvent.Severity.Error,
            COMMON_CONFIG_173 = 51498 | XEvent.Severity.Error,
            COMMON_CONFIG_174 = 51499 | XEvent.Severity.Warning,
            COMMON_CONFIG_175 = 51500 | XEvent.Severity.Error,
            COMMON_CONFIG_176 = 51501 | XEvent.Severity.Error,
            COMMON_CONFIG_177 = 51502 | XEvent.Severity.Warning,
            COMMON_CONFIG_178 = 51503 | XEvent.Severity.Error,
            COMMON_CONFIG_179 = 51504 | XEvent.Severity.Error,
            COMMON_CONFIG_180 = 51505 | XEvent.Severity.Warning,
            COMMON_CONFIG_181 = 51506 | XEvent.Severity.Error,
            COMMON_CONFIG_182 = 51507 | XEvent.Severity.Error,
            COMMON_CONFIG_183 = 51508 | XEvent.Severity.Error,
            COMMON_CONFIG_184 = 51509 | XEvent.Severity.Error,
            COMMON_CONFIG_185 = 51510 | XEvent.Severity.Error,
            COMMON_CONFIG_186 = 51511 | XEvent.Severity.Error,
            COMMON_CONFIG_187 = 51512 | XEvent.Severity.Error,
            COMMON_CONFIG_188 = 51513 | XEvent.Severity.Error,
            COMMON_CONFIG_189 = 51514 | XEvent.Severity.Error,
            COMMON_CONFIG_190 = 51515 | XEvent.Severity.Error,
            COMMON_CONFIG_191 = 51516 | XEvent.Severity.Error,
            COMMON_CONFIG_192 = 51517 | XEvent.Severity.Error,
            COMMON_CONFIG_193 = 51518 | XEvent.Severity.Error,
            COMMON_CONFIG_194 = 51519 | XEvent.Severity.Error,
            COMMON_CONFIG_195 = 51520 | XEvent.Severity.Error,
            COMMON_CONFIG_196 = 51521 | XEvent.Severity.Error,
            COMMON_CONFIG_197 = 51522 | XEvent.Severity.Error,
            COMMON_CONFIG_198 = 51523 | XEvent.Severity.Error,
            COMMON_CONFIG_199 = 51524 | XEvent.Severity.Error,
            COMMON_CONFIG_200 = 51525 | XEvent.Severity.Error,
            COMMON_CONFIG_201 = 51526 | XEvent.Severity.Error,
            COMMON_CONFIG_202 = 51527 | XEvent.Severity.Error,
            COMMON_CONFIG_203 = 51528 | XEvent.Severity.Error,
            COMMON_CONFIG_204 = 51529 | XEvent.Severity.Error,
            COMMON_CONFIG_205 = 51530 | XEvent.Severity.Error,
            COMMON_CONFIG_206 = 51531 | XEvent.Severity.Error,
            COMMON_CONFIG_207 = 51532 | XEvent.Severity.Error,
            COMMON_CONFIG_208 = 51533 | XEvent.Severity.Error,
            COMMON_CONFIG_209 = 51534 | XEvent.Severity.Error,
            COMMON_CONFIG_210 = 51535 | XEvent.Severity.Error,
            COMMON_CONFIG_211 = 51536 | XEvent.Severity.Error,
            COMMON_CONFIG_212 = 51537 | XEvent.Severity.Error,
            COMMON_CONFIG_213 = 51538 | XEvent.Severity.Error,
            COMMON_CONFIG_214 = 51539 | XEvent.Severity.Error,
            COMMON_CONFIG_215 = 51540 | XEvent.Severity.Error,
            COMMON_CONFIG_216 = 51541 | XEvent.Severity.Error,
            COMMON_CONFIG_217 = 51542 | XEvent.Severity.Error,
            COMMON_CONFIG_218 = 51543 | XEvent.Severity.Error,
            COMMON_CONFIG_219 = 51544 | XEvent.Severity.Error,
            COMMON_CONFIG_220 = 51545 | XEvent.Severity.Error,
            COMMON_CONFIG_221 = 51546 | XEvent.Severity.Error,
            COMMON_CONFIG_222 = 51547 | XEvent.Severity.Error,
            COMMON_CONFIG_223 = 51548 | XEvent.Severity.Error,
            COMMON_CONFIG_224 = 51549 | XEvent.Severity.Error,
            COMMON_CONFIG_225 = 51550 | XEvent.Severity.Error,
            COMMON_CONFIG_226 = 51551 | XEvent.Severity.Error,
            COMMON_CONFIG_227 = 51552 | XEvent.Severity.Error,
            COMMON_CONFIG_228 = 51553 | XEvent.Severity.Error,
            COMMON_CONFIG_229 = 51554 | XEvent.Severity.Error,
            COMMON_CONFIG_230 = 51555 | XEvent.Severity.Error,
            COMMON_CONFIG_231 = 51556 | XEvent.Severity.Error,
            COMMON_CONFIG_232 = 51557 | XEvent.Severity.Error,
            COMMON_CONFIG_233 = 51558 | XEvent.Severity.Error,
            COMMON_CONFIG_234 = 51559 | XEvent.Severity.Error,
            COMMON_CONFIG_235 = 51560 | XEvent.Severity.Error,
            COMMON_CONFIG_236 = 51561 | XEvent.Severity.Error,
            COMMON_CONFIG_237 = 51562 | XEvent.Severity.Error,
            COMMON_CONFIG_238 = 51563 | XEvent.Severity.Error,
            COMMON_CONFIG_239 = 51564 | XEvent.Severity.Error,
            COMMON_CONFIG_240 = 51565 | XEvent.Severity.Error,
            COMMON_CONFIG_241 = 51566 | XEvent.Severity.Error,
            COMMON_CONFIG_242 = 51567 | XEvent.Severity.Error,
            COMMON_CONFIG_243 = 51568 | XEvent.Severity.Error,
            COMMON_CONFIG_244 = 51569 | XEvent.Severity.Error,
            COMMON_CONFIG_245 = 51570 | XEvent.Severity.Warning,
            COMMON_CONFIG_246 = 51571 | XEvent.Severity.Warning,
            COMMON_CONFIG_247 = 51572 | XEvent.Severity.Error,
            COMMON_CONFIG_248 = 51573 | XEvent.Severity.Error,
            COMMON_CONFIG_249 = 51574 | XEvent.Severity.Error,
            COMMON_CONFIG_250 = 51575 | XEvent.Severity.Error,
            DEPRECATED_COMMON_CONFIG_251 = 51576 | XEvent.Severity.Error,
            COMMON_CONFIG_252 = 51577 | XEvent.Severity.Error,
            COMMON_CONFIG_253 = 51578 | XEvent.Severity.Warning,
            COMMON_CONFIG_254 = 51579 | XEvent.Severity.Error,
            COMMON_CONFIG_255 = 51580 | XEvent.Severity.Error,
            COMMON_CONFIG_256 = 51581 | XEvent.Severity.Error,
            COMMON_CONFIG_257 = 51582 | XEvent.Severity.Error,
            COMMON_CONFIG_258 = 51583 | XEvent.Severity.Error,
            COMMON_CONFIG_259 = 51584 | XEvent.Severity.Warning,
            COMMON_CONFIG_260 = 51585 | XEvent.Severity.Warning,
            COMMON_CONFIG_261 = 51586 | XEvent.Severity.Error,
            COMMON_CONFIG_262 = 51587 | XEvent.Severity.Error,
            COMMON_CONFIG_263 = 51588 | XEvent.Severity.Error,
            COMMON_CONFIG_264 = 51589 | XEvent.Severity.Error,
            COMMON_CONFIG_265 = 51590 | XEvent.Severity.Error,
            COMMON_CONFIG_266 = 51591 | XEvent.Severity.Warning,
            COMMON_CONFIG_PIPE_HANDLE_DISPOSED = 51593 | XEvent.Severity.Error,
            COMMON_CONFIG_270 = 51595 | XEvent.Severity.Error,
            COMMON_CONFIG_272 = 51597 | XEvent.Severity.Error,
            COMMON_CONFIG_274 = 51599 | XEvent.Severity.Error,
            MC_SGINFO_IS_OFF = 51600 | XEvent.Severity.Warning,
            COMMON_CONFIG_276 = 51601 | XEvent.Severity.Error,
            COMMON_CONFIG_277 = 51602 | XEvent.Severity.Error,
            COMMON_CONFIG_278 = 51603 | XEvent.Severity.Error,
            MC_BAD_CONFIG_DATA_4 = 51604 | XEvent.Severity.Error,
            MC_BAD_CONFIG_DATA_5 = 51605 | XEvent.Severity.Error,
            MC_BAD_CONFIG_DATA_6 = 51606 | XEvent.Severity.Error,
            MC_BAD_CONFIG_DATA_7 = 51607 | XEvent.Severity.Error,
            COMMON_CONFIG_283 = 51608 | XEvent.Severity.Error,
            COMMON_CONFIG_284 = 51609 | XEvent.Severity.Error,
            MC_BAD_CONFIG_DATA_8 = 51610 | XEvent.Severity.Error,
            COMMON_CONFIG_286 = 51611 | XEvent.Severity.Error,
            COMMON_CONFIG_287 = 51612 | XEvent.Severity.Error,
            COMMON_CONFIG_288 = 51613 | XEvent.Severity.Error,
            MGMT_CRITICAL_ERROR = 51614 | XEvent.Severity.Error,
            MGMT_INIT_FAILURE = 51615 | XEvent.Severity.Error,
            COMMON_CONFIG_291 = 51616 | XEvent.Severity.Error,
            COMMON_CONFIG_292 = 51617 | XEvent.Severity.Error,
            COMMON_CONFIG_293 = 51618 | XEvent.Severity.Error,
            MGMT_INIT_FAILURE_1 = 51619 | XEvent.Severity.Error,
            MGMT_INIT_FAILURE_2 = 51620 | XEvent.Severity.Error,
            MGMT_INIT_FAILURE_3 = 51621 | XEvent.Severity.Error,
            MGMT_INIT_WARNING = 51622 | XEvent.Severity.Warning,
            MGMT_INIT_FAILURE_4 = 51623 | XEvent.Severity.Error,
            MGMT_SRV_DISCONNECT = 51624 | XEvent.Severity.Error,
            MGMT_SRV_DISCONNECT_1 = 51625 | XEvent.Severity.Error,
            MGMT_INIT_FAILURE_5 = 51626 | XEvent.Severity.Error,
            MGMT_INIT_FAILURE_6 = 51627 | XEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING = 51628 | XEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_1 = 51629 | XEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_2 = 51630 | XEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_3 = 51631 | XEvent.Severity.Error,
            COMMON_CONFIG_307 = 51632 | XEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_4 = 51633 | XEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_5 = 51634 | XEvent.Severity.Error,
            COMMON_CONFIG_310 = 51635 | XEvent.Severity.Error,
            COMMON_CONFIG_311 = 51636 | XEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_6 = 51637 | XEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_7 = 51638 | XEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_8 = 51639 | XEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_9 = 51640 | XEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_10 = 51641 | XEvent.Severity.Error,
            MGMT_REMOTE_TARGET_WARNING = 51642 | XEvent.Severity.Warning,
            COMMON_CONFIG_318 = 51643 | XEvent.Severity.Error,
            COMMON_CONFIG_319 = 51644 | XEvent.Severity.Error,
            COMMON_CONFIG_320 = 51645 | XEvent.Severity.Error,
            COMMON_CONFIG_321 = 51646 | XEvent.Severity.Error,
            COMMON_CONFIG_322 = 51647 | XEvent.Severity.Error,
            COMMON_CONFIG_323 = 51648 | XEvent.Severity.Error,
            COMMON_CONFIG_324 = 51649 | XEvent.Severity.Error,
            COMMON_CONFIG_325 = 51650 | XEvent.Severity.Error,
            COMMON_CONFIG_326 = 51651 | XEvent.Severity.Error,
            COMMON_CONFIG_327 = 51652 | XEvent.Severity.Error,
            COMMON_CONFIG_328 = 51653 | XEvent.Severity.Error,
            COMMON_CONFIG_329 = 51654 | XEvent.Severity.Error,
            COMMON_CONFIG_330 = 51655 | XEvent.Severity.Error,
            COMMON_CONFIG_331 = 51656 | XEvent.Severity.Error,
            COMMON_CONFIG_332 = 51657 | XEvent.Severity.Error,
            COMMON_CONFIG_333 = 51658 | XEvent.Severity.Error,
            COMMON_CONFIG_334 = 51659 | XEvent.Severity.Error,
            COMMON_CONFIG_335 = 51660 | XEvent.Severity.Error,
            COMMON_CONFIG_336 = 51661 | XEvent.Severity.Error,
            COMMON_CONFIG_337 = 51662 | XEvent.Severity.Error,
            COMMON_CONFIG_338 = 51663 | XEvent.Severity.Error,
            COMMON_CONFIG_339 = 51664 | XEvent.Severity.Error,
            MGMT_INIT_FAILURE_7 = 51665 | XEvent.Severity.Error,
            MGMT_INIT_FAILURE_8 = 51666 | XEvent.Severity.Error,
            MGMT_INIT_FAILURE_9 = 51667 | XEvent.Severity.Error,
            COMMON_CONFIG_INTEROP_REPORTMESSAGECOMPONENTID_FAILURE = 51668 | XEvent.Severity.Error,
            COMMON_CONFIG_INTEROP_ADDREPORTMESSAGECOMPONENTIDMAPPING_FAILURE = 51669 | XEvent.Severity.Error,
            COMMON_CONFIG_INTEROP_REPORTMESSAGECLEANSERVIRTUALINTERFACE_FAILURE = 51670 | XEvent.Severity.Error,
            COMMON_CONFIG_340 = 51671 | XEvent.Severity.Error,
            MGMT_READ_FAILURE = 51672 | XEvent.Severity.Error,
            COMMON_CONFIG_BAD_XLAST_FILE = 51674 | XEvent.Severity.Error,
            COMMON_CONFIG_MATCH_LTC_TIB_COUNTS_OUTOFSYNC = 51675 | XEvent.Severity.Error,
            COMMON_CONFIG_MATCH_LTC_TIB_SERVERS_OUTOFSYNC_1 = 51676 | XEvent.Severity.Error,
            COMMON_CONFIG_MATCH_LTC_TIB_SERVERS_OUTOFSYNC_2 = 51677 | XEvent.Severity.Error,
            COMMON_CONFIG_MATCH_LTC_TIB_OUTOFSYNC = 51678 | XEvent.Severity.Error,
            COMMON_CONFIG_MATCH_UNEXPECTED_MODE_IN_XLAST = 51679 | XEvent.Severity.Error,
            COMMON_CONFIG_MATCH_MISSING_MODE_IN_XLAST = 51680 | XEvent.Severity.Error,
            COMMON_CONFIG_MATCH_ENDMIGRATE_FAILED_NONEXT = 51681 | XEvent.Severity.Error,
            COMMON_CONFIG_MATCH_ENDMIGRATE_FAILED_MISSING_BUCKET = 51682 | XEvent.Severity.Error,
            COMMON_CONFIG_MATCH_EXPMIGRATE_FAILED_NOTSTARTED = 51683 | XEvent.Severity.Error,
            COMMON_CONFIG_MATCH_ENDMIGRATE_FAILED_LTC_TIB_OUTOFSYNC = 51684 | XEvent.Severity.Error,
            COMMON_CONFIG_MATCH_ADDRR_FAILED_MISSING_BUCKET = 51685 | XEvent.Severity.Error,
            COMMON_CONFIG_MATCH_ADDRR_FAILED_DUPE_SERVER = 51686 | XEvent.Severity.Error,
            COMMON_CONFIG_MATCH_UPDLTC_INVALID_LTC = 51687 | XEvent.Severity.Error,
            COMMON_CONFIG_MATCH_DEFAULTBUCKETS_OVERWRITE = 51688 | XEvent.Severity.Error,
            COMMON_CONFIG_MATCH_CONFIRMSERVER_BADSERVER = 51689 | XEvent.Severity.Error,
            COMMON_CONFIG_MATCH_PREPLTC_TID_MISMATCH = 51690 | XEvent.Severity.Error,
            COMMON_CONFIG_MATCH_NO_PARTMAP = 51691 | XEvent.Severity.Error,
            COMMON_CONFIG_MATCH_PREPCONFIG_TID_MISMATCH = 51692 | XEvent.Severity.Error,
            COMMON_CONFIG_GET_REFRESH_FUNCTIONS = 51693 | XEvent.Severity.Error,
            COMMON_CONFIG_HEALTH_CHANGE = 51694 | XEvent.Severity.Error,
            COMMON_SETTING_BATCH_CONSTRUCTION = 51695 | XEvent.Severity.Error,
            COMMON_SETTING_BATCH_QUERY = 51696 | XEvent.Severity.Error,
            COMMON_SETTING_BATCH_SETTING_DELETED = 51697 | XEvent.Severity.Error,
            COMMON_CONFIG_REGISTER_DYNAMIC_SETTING_FAILURE = 51698 | XEvent.Severity.Error,
            COMMON_BUCKETS_BATCH_CONSTRUCTION = 51699 | XEvent.Severity.Error,
            COMMON_BUCKET_BATCH_QUERY = 51700 | XEvent.Severity.Error,
            COMMON_BUCKET_BATCH_DELETED = 51701 | XEvent.Severity.Error,
            COMMON_CONFIG_LIVE_REGISTRY_SETTINGS_CHANGE = 51702 | XEvent.Severity.Error,
            PERFORMANCE_COUNTERS_0 = 51703 | XEvent.Severity.Error,
            COMMON_HACK_4 = 52329 | XEvent.Severity.Warning,
            COMMON_HACK_5 = 52330 | XEvent.Severity.Warning,
            COMMON_HACK_6 = 52331 | XEvent.Severity.Warning,
            COMMON_HACK_7 = 52332 | XEvent.Severity.Warning,
            COMMON_HACK_8 = 52333 | XEvent.Severity.Warning,
            COMMON_HACK_9 = 52334 | XEvent.Severity.Warning,
            COMMON_HACK_10 = 52335 | XEvent.Severity.Warning,
            COMMON_HACK_11 = 52336 | XEvent.Severity.Warning,
            COMMON_HACK_12 = 52337 | XEvent.Severity.Warning,
            COMMON_HACK_13 = 52338 | XEvent.Severity.Warning,
            COMMON_HACK_14 = 52339 | XEvent.Severity.Warning,
            COMMON_HACK_15 = 52340 | XEvent.Severity.Warning,
            COMMON_HACK_16 = 52341 | XEvent.Severity.Warning,
            COMMON_HACK_17 = 52342 | XEvent.Severity.Warning,
            COMMON_HACK_18 = 52343 | XEvent.Severity.Warning,
            COMMON_HACK_19 = 52344 | XEvent.Severity.Warning,
            COMMON_HACK_20 = 52345 | XEvent.Severity.Warning,
            COMMON_HACK_21 = 52346 | XEvent.Severity.Warning,
            COMMON_HACK_22 = 52347 | XEvent.Severity.Warning,
            COMMON_HACK_23 = 52348 | XEvent.Severity.Warning,
            COMMON_HACK_24 = 52349 | XEvent.Severity.Warning,
            COMMON_HACK_25 = 52350 | XEvent.Severity.Warning,
            COMMON_HACK_26 = 52351 | XEvent.Severity.Warning,
            COMMON_HACK_27 = 52352 | XEvent.Severity.Warning,
            COMMON_HACK_28 = 52353 | XEvent.Severity.Warning,
            COMMON_HACK_33 = 52358 | XEvent.Severity.Warning,
            COMMON_HACK_34 = 52359 | XEvent.Severity.Warning,
            COMMON_HACK_40 = 52365 | XEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS = 52366 | XEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_1 = 52367 | XEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_2 = 52368 | XEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_3 = 52369 | XEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_4 = 52370 | XEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_5 = 52371 | XEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_6 = 52372 | XEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_7 = 52373 | XEvent.Severity.Warning,
            AUTHDATA_BAD_BUNDLED_AUTHDATA = 52374 | XEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR = 52375 | XEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_1 = 52376 | XEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_2 = 52377 | XEvent.Severity.Warning,
            AUTHDATA_BAD_HTTP_AUTHDATA = 52378 | XEvent.Severity.Warning,
            AUTHDATA_BAD_SG_AUTHDATA = 52379 | XEvent.Severity.Warning,
            AUTHDATA_BAD_SG_AUTHDATA_1 = 52380 | XEvent.Severity.Warning,
            AUTHDATA_BAD_SG_AUTHDATA_2 = 52381 | XEvent.Severity.Warning,
            AUTHDATA_BAD_SG_AUTHDATA_3 = 52382 | XEvent.Severity.Warning,
            AUTHDATA_BAD_SG_AUTHDATA_4 = 52383 | XEvent.Severity.Warning,
            AUTHDATA_BAD_SG_AUTHDATA_5 = 52384 | XEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_3 = 52385 | XEvent.Severity.Warning,
            COMMON_HACK_61 = 52386 | XEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_4 = 52387 | XEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_5 = 52388 | XEvent.Severity.Warning,
            COMMON_HACK_64 = 52389 | XEvent.Severity.Warning,
            COMMON_HACK_65 = 52390 | XEvent.Severity.Warning,
            COMMON_HACK_66 = 52391 | XEvent.Severity.Warning,
            COMMON_HACK_67 = 52392 | XEvent.Severity.Warning,
            COMMON_HACK_68 = 52393 | XEvent.Severity.Warning,
            COMMON_HACK_69 = 52394 | XEvent.Severity.Warning,
            COMMON_HACK_70 = 52395 | XEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_6 = 52396 | XEvent.Severity.Warning,
            COMMON_HACK_72 = 52397 | XEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_7 = 52398 | XEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_8 = 52399 | XEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_9 = 52400 | XEvent.Severity.Warning,
            COMMON_HACK_76 = 52401 | XEvent.Severity.Warning,
            WIREDATA_END_OF_STREAM = 52402 | XEvent.Severity.Warning,
            COMMON_HACK_78 = 52403 | XEvent.Severity.Warning,
            COMMON_HACK_79 = 52404 | XEvent.Severity.Warning,
            COMMON_HACK_80 = 52405 | XEvent.Severity.Warning,
            HACK_CONTENT_NOT_FOUND = 52406 | XEvent.Severity.Warning,
            USER_AGENT_MISSING = 52412 | XEvent.Severity.Error,
            USER_AGENT_INVALID = 52413 | XEvent.Severity.Error,
            AAINFO_INVALID_REQUEST = 52414 | XEvent.Severity.Error,
            COMMON_HACK_81 = 52415 | XEvent.Severity.Error,
            AUTHDATA_VERIFICATION_ERROR_10 = 52416 | XEvent.Severity.Error,
            COMMON_INFO_4 = 52529 | XEvent.Severity.Info,
            COMMON_INFO_5 = 52530 | XEvent.Severity.Info,
            COMMON_INFO_6 = 52531 | XEvent.Severity.Info,
            COMMON_INFO_7 = 52532 | XEvent.Severity.Info,
            COMMON_INFO_8 = 52533 | XEvent.Severity.Info,
            COMMON_INFO_9 = 52534 | XEvent.Severity.Info,
            COMMON_INFO_10 = 52535 | XEvent.Severity.Info,
            COMMON_INFO_11 = 52536 | XEvent.Severity.Info,
            COMMON_INFO_12 = 52537 | XEvent.Severity.Info,
            COMMON_INFO_13 = 52538 | XEvent.Severity.Info,
            COMMON_INFO_14 = 52539 | XEvent.Severity.Info,
            COMMON_INFO_15 = 52540 | XEvent.Severity.Info,
            COMMON_INFO_16 = 52541 | XEvent.Severity.Info,
            COMMON_INFO_17 = 52542 | XEvent.Severity.Info,
            COMMON_INFO_18 = 52543 | XEvent.Severity.Info,
            COMMON_INFO_19 = 52544 | XEvent.Severity.Info,
            COMMON_INFO_20 = 52545 | XEvent.Severity.Info,
            COMMON_INFO_21 = 52546 | XEvent.Severity.Info,
            COMMON_INFO_22 = 52547 | XEvent.Severity.Info,
            COMMON_INFO_23 = 52548 | XEvent.Severity.Info,
            COMMON_INFO_24 = 52549 | XEvent.Severity.Info,
            COMMON_INFO_25 = 52550 | XEvent.Severity.Info,
            COMMON_INFO_26 = 52551 | XEvent.Severity.Info,
            COMMON_INFO_27 = 52552 | XEvent.Severity.Info,
            COMMON_INFO_28 = 52553 | XEvent.Severity.Info,
            COMMON_INFO_29 = 52554 | XEvent.Severity.Info,
            COMMON_INFO_30 = 52555 | XEvent.Severity.Info,
            COMMON_INFO_31 = 52556 | XEvent.Severity.Info,
            COMMON_INFO_32 = 52557 | XEvent.Severity.Info,
            COMMON_INFO_33 = 52558 | XEvent.Severity.Info,
            COMMON_INFO_34 = 52559 | XEvent.Severity.Info,
            COMMON_INFO_35 = 52560 | XEvent.Severity.Info,
            COMMON_INFO_36 = 52561 | XEvent.Severity.Info,
            COMMON_INFO_37 = 52562 | XEvent.Severity.Info,
            COMMON_INFO_38 = 52563 | XEvent.Severity.Info,
            COMMON_INFO_39 = 52564 | XEvent.Severity.Info,
            COMMON_INFO_40 = 52565 | XEvent.Severity.Info,
            MC_APPDOMAIN_STARTED = 52566 | XEvent.Severity.Info,
            MC_APPDOMAIN_STARTED_1 = 52567 | XEvent.Severity.Info,
            COMMON_INFO_43 = 52568 | XEvent.Severity.Info,
            COMMON_INFO_44 = 52569 | XEvent.Severity.Info,
            COMMON_INFO_45 = 52570 | XEvent.Severity.Info,
            COMMON_INFO_46 = 52571 | XEvent.Severity.Info,
            COMMON_INFO_47 = 52572 | XEvent.Severity.Info,
            COMMON_INFO_48 = 52573 | XEvent.Severity.Info,
            MGMT_SRV_CONNECTED = 52574 | XEvent.Severity.Info,
            REPORTINGTARGET_RECONNECTED = 52575 | XEvent.Severity.Info,
            CONFIG_CHANGE_PROCESSED = 52576 | XEvent.Severity.Info,
            HEALTH_REPORT_GREEN = 52577 | XEvent.Severity.Info,
            COMMON_CONFIG_INFO_HEALTH_CHANGE = 52578 | XEvent.Severity.Info,
            COMMON_SETTING_BATCH_COUNT = 52579 | XEvent.Severity.Info,
            COMMON_BUCKET_COUNT = 52580 | XEvent.Severity.Info,
            COMMON_CONFIG_INFO_LIVE_REGISTRY_SETTINGS_CHANGE = 52581 | XEvent.Severity.Info,
            COMMON_WARNING_0 = 52725 | XEvent.Severity.Warning,
            HEALTH_REPORT_YELLOW = 52726 | XEvent.Severity.Warning,
            AUDIT_INVALID_SUBSYSTEM = 63800 | XEvent.Severity.Error,
            AUDIT_NO_SETTING = 63801 | XEvent.Severity.Error,
            AUDIT_LOG_FAILURE = 63802 | XEvent.Severity.Error,
            MIX_COMMON_UNKNOWN_ERROR = 63083 | XEvent.Severity.Error,
            MIX_COMMON_ENTITYFRAMEWORK_CONNECTION_ERROR = 63084 | XEvent.Severity.Error,
            MC_BAD_CODE_15 = 63085 | XEvent.Severity.Error,
            MC_BAD_CODE_16 = 63086 | XEvent.Severity.Error,
            COMMON_USER_1 = 63087 | XEvent.Severity.Error,
            COMMON_USER_2 = 63089 | XEvent.Severity.Error,
            COMMON_USER_3 = 63090 | XEvent.Severity.Error,
            COMMON_CATALOG_1 = 63091 | XEvent.Severity.Error,
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\events\XEvent.Id.cs ===
// AUTO GENERATED FILE 
// MODIFY THE CORRESPONDING .xml AND .xsl FILES 
/////////////////////////////////////////////////////////////////////////////// 
 
using System; 
 
namespace xonline.common.service 
{ 
    public partial class XEvent 
    { 
        public enum Id : uint 
        { 
            ACCELERATION_STARTUP_MGMT_INIT_FAILED = 20500 | XEvent.Severity.Error,
            ACCELERATION_STARTUP_MGMT_REGISTER_FAILED = 20501 | XEvent.Severity.Error,
            ACCELERATION_STARTUP_CONFIG_FAILED = 20502 | XEvent.Severity.Error,
            ACCELERATION_STARTUP_PERF_COUNTERS_FAILED = 20503 | XEvent.Severity.Error,
            ACCELERATION_STARTUP_BUFFER_POOL_FAILED = 20504 | XEvent.Severity.Error,
            ACCELERATION_STARTUP_SWITCHBOARD_FAILED = 20505 | XEvent.Severity.Error,
            ACCELERATION_STARTUP_MRU_LIST_FAILED = 20506 | XEvent.Severity.Error,
            ACCELERATION_STARTUP_CHANGELIST_FAILED = 20507 | XEvent.Severity.Error,
            ACCELERATION_STARTUP_LOOKUP_TABLE_FAILED = 20508 | XEvent.Severity.Error,
            ACCELERATION_STARTUP_LISTENER_FAILED = 20509 | XEvent.Severity.Error,
            ACCELERATION_STARTUP_ALLOCATOR_FAILED = 20517 | XEvent.Severity.Error,
            ACCELERATION_CONFIG_LISTENER_FAILED = 20510 | XEvent.Severity.Error,
            ACCELERATION_CONFIG_SETTING_FAILED = 20511 | XEvent.Severity.Error,
            ACCELERATION_CONFIG_OUT_OF_MEMORY = 20512 | XEvent.Severity.Error,
            ACCELERATION_CONFIG_POST_COMPLETION_FAILED = 20513 | XEvent.Severity.Error,
            ACCELERATION_CONFIG_WAIT_COMPLETION_FAILED = 20514 | XEvent.Severity.Error,
            ACCELERATION_CONFIG_HEALTHINTEROP_CREATE = 20515 | XEvent.Severity.Error,
            ACCELERATION_CONFIG_HEALTHINTEROP_INIT = 20516 | XEvent.Severity.Error,
            ACCELERATION_SOCKET_INIT_COMPLETION_PORT_FAILED = 20520 | XEvent.Severity.Error,
            ACCELERATION_SOCKET_INIT_CREATE_INSTANCE_FAILED = 20521 | XEvent.Severity.Error,
            ACCELERATION_SOCKET_INIT_FAILED = 20522 | XEvent.Severity.Error,
            ACCELERATION_SOCKET_INIT_LISTEN_FAILED = 20523 | XEvent.Severity.Error,
            ACCELERATION_SOCKET_ACCEPT_FAILED = 20524 | XEvent.Severity.Error,
            ACCELERATION_SOCKET_SIZE_MISMATCH = 20525 | XEvent.Severity.Error,
            ACCELERATION_SOCKET_PROCESS_REQUEST_FAILED = 20526 | XEvent.Severity.Error,
            ACCELERATION_PROXY_BUCKET_MAP_FAILED = 20530 | XEvent.Severity.Error,
            ACCELERATION_PROXY_BUCKET_CHANGE_FAILED = 20531 | XEvent.Severity.Error,
            ACCELERATION_PROXY_SERVER_CHANGE_FAILED = 20532 | XEvent.Severity.Error,
            ACCELERATION_PROXY_CONNECT_FAILED = 20533 | XEvent.Severity.Error,
            ACCELERATION_PROXY_SEND_FAILED = 20534 | XEvent.Severity.Error,
            ACCELERATION_PROXY_RECEIVE_FAILED = 20535 | XEvent.Severity.Error,
            ACCELERATION_PROXY_CALLBACK_EXCEPTION = 20536 | XEvent.Severity.Error,
            ACCELERATION_PROXY_REMOVE_FAILED = 20537 | XEvent.Severity.Error,
            ACCELERATION_PROXY_REQUEST_FAILED = 20538 | XEvent.Severity.Error,
            ACCELERATION_PROXY_NOT_INITIALIZED = 20539 | XEvent.Severity.Error,
            ACCELERATION_PROXY_NOTIFICATION_FAILED = 20540 | XEvent.Severity.Error,
            ACCELERATION_UNSUPPORTED_MESSAGE = 20575 | XEvent.Severity.Error,
            ACCELERATION_SERVER_TOO_BUSY = 20576 | XEvent.Severity.Error,
            ACCELERATION_SERVER_BUFFERPOOL_OUTOFMEMORY = 20577 | XEvent.Severity.Error,
            ACCELERATION_WARN_0 = 20600 | XEvent.Severity.Warning,
            ACCELERATION_STARTED = 20700 | XEvent.Severity.Info,
            ACCELERATION_SHUTDOWN_STARTED = 20701 | XEvent.Severity.Info,
            ACCELERATION_SHUTDOWN_COMPLETE = 20702 | XEvent.Severity.Info,
            ACCELERATION_CONFIG_SETTING_CHANGED = 20703 | XEvent.Severity.Info,
            ACCELERATION_INFO_SERVER_RESUME = 20704 | XEvent.Severity.Info,
            AAGW_CONFIG_INVALID_ALLOWLISTENTRY = 15000 | XEvent.Severity.Error,
            AAM_UODB_DATABASE_ERROR = 63825 | XEvent.Severity.Error,
            AAM_HANDLEREQUEST_ERROR = 63826 | XEvent.Severity.Error,
            AAM_CONFIG_INFO = 63827 | XEvent.Severity.Info,
            AAM_CONFIG_WARNING = 63828 | XEvent.Severity.Warning,
            AAM_CONFIG_ERROR = 63829 | XEvent.Severity.Error,
            AAM_POLICY_RELOADED = 63830 | XEvent.Severity.Info,
            AAM_CONFIG_RPS_ERROR = 63831 | XEvent.Severity.Error,
            AAM_INFO_TRACKING_START = 63832 | XEvent.Severity.Warning,
            AAM_INFO_TRACKING_STOP = 63833 | XEvent.Severity.Info,
            AAM_INFO_THROTTLING_START = 63834 | XEvent.Severity.Warning,
            AAM_INFO_THROTTLING_STOP = 63835 | XEvent.Severity.Info,
            AAM_INFO_BLOCKING_START = 63836 | XEvent.Severity.Warning,
            AAM_INFO_BLOCKING_STOP = 63837 | XEvent.Severity.Info,
            AAM_ANTIDOS_LIMIT_EXCEEDED = 63838 | XEvent.Severity.Error,
            AAGW_HACK_URL = 63850 | XEvent.Severity.Error,
            AAGW_HACK_UNKNOWN_SERVICE = 63851 | XEvent.Severity.Error,
            AAGW_HACK_UNKNOWN_HTTP_METHOD = 63852 | XEvent.Severity.Error,
            AAGW_HACK_URL_TOO_LONG = 63853 | XEvent.Severity.Error,
            AAGW_HACK_QUERY_TOO_LONG = 63854 | XEvent.Severity.Error,
            AAGW_HACK_CONTENT_TOO_LONG = 63855 | XEvent.Severity.Error,
            AAGW_EXCEPTION_WITH_NO_RESPONSE = 63856 | XEvent.Severity.Error,
            AAGW_CONFIG_INVALID_SETTING = 63857 | XEvent.Severity.Error,
            AAGW_CONFIG_SERVICE_TABLE = 63858 | XEvent.Severity.Error,
            AAGW_CONFIG_INFO = 63859 | XEvent.Severity.Info,
            AAGW_INTERNAL_ERROR = 63860 | XEvent.Severity.Error,
            XEVENTS_FAIL_INIT = 50000 | XEvent.Severity.Error,
            XEVENTS_FAIL_INIT_1 = 50001 | XEvent.Severity.Error,
            XEVENTS_FAIL_INIT_2 = 50002 | XEvent.Severity.Error,
            XEVENTS_FAIL_INIT_3 = 50003 | XEvent.Severity.Error,
            XEVENTS_FAIL_INIT_4 = 50004 | XEvent.Severity.Error,
            XEVENTS_NULL_BUFFER = 50005 | XEvent.Severity.Error,
            XEVENTS_NULL_BUFFER_1 = 50006 | XEvent.Severity.Error,
            ALERTS_CODE_7 = 50007 | XEvent.Severity.Error,
            ALERTS_CODE_8 = 50008 | XEvent.Severity.Error,
            XEVENTS_BAD_PACKET = 50009 | XEvent.Severity.Error,
            XEVENTS_BAD_PACKET_1 = 50010 | XEvent.Severity.Error,
            XEVENTS_FAIL_INIT_5 = 50011 | XEvent.Severity.Error,
            XEVENTS_FAIL_INIT_6 = 50012 | XEvent.Severity.Error,
            XEVENTS_FAIL_INIT_7 = 50013 | XEvent.Severity.Error,
            XEVENTS_FAIL_INIT_8 = 50014 | XEvent.Severity.Error,
            XEVENTS_FAIL_INIT_9 = 50015 | XEvent.Severity.Error,
            XEVENTS_FAIL_INIT_10 = 50016 | XEvent.Severity.Error,
            XEVENTS_FAIL_INIT_11 = 50017 | XEvent.Severity.Error,
            XEVENTS_FAIL_INIT_12 = 50018 | XEvent.Severity.Error,
            XEVENTS_RECEIVE_FAIL = 50050 | XEvent.Severity.Error,
            XEVENTS_RECEIVE_FAIL_1 = 50051 | XEvent.Severity.Error,
            ALERTS_COMM_2 = 50052 | XEvent.Severity.Error,
            ALERTS_COMM_3 = 50053 | XEvent.Severity.Error,
            ALERTS_COMM_4 = 50054 | XEvent.Severity.Error,
            ALERTS_COMM_5 = 50055 | XEvent.Severity.Error,
            ALERTS_COMM_6 = 50056 | XEvent.Severity.Error,
            ALERTS_COMM_7 = 50057 | XEvent.Severity.Error,
            ALERTS_COMM_8 = 50058 | XEvent.Severity.Error,
            ALERTS_COMM_9 = 50059 | XEvent.Severity.Error,
            ALERTS_CONFIG_0 = 50100 | XEvent.Severity.Error,
            ALERTS_CONFIG_1 = 50101 | XEvent.Severity.Error,
            ALERTS_CONFIG_2 = 50102 | XEvent.Severity.Error,
            ALERTS_CONFIG_3 = 50103 | XEvent.Severity.Error,
            ALERTS_CONFIG_4 = 50104 | XEvent.Severity.Error,
            ALERTS_CONFIG_5 = 50105 | XEvent.Severity.Error,
            ALERTS_CONFIG_6 = 50106 | XEvent.Severity.Error,
            ALERTS_CONFIG_7 = 50107 | XEvent.Severity.Error,
            ALERTS_INFO_0 = 50125 | XEvent.Severity.Info,
            ALERTS_INFO_1 = 50126 | XEvent.Severity.Info,
            ALERTS_INFO_2 = 50127 | XEvent.Severity.Info,
            ALERTS_INFO_3 = 50128 | XEvent.Severity.Info,
            ARBITRATION_INTERNAL_FATAL_ERROR = 50150 | XEvent.Severity.Error,
            ARBITRATION_INTERNAL_FATAL_ERROR_1 = 50151 | XEvent.Severity.Error,
            ARBITRATION_CODE_2 = 50152 | XEvent.Severity.Error,
            ARBITRATION_CODE_3 = 50153 | XEvent.Severity.Error,
            ARBITRATION_INTERNAL_FATAL_ERROR_2 = 50154 | XEvent.Severity.Error,
            ARBITRATION_CODE_5 = 50155 | XEvent.Severity.Error,
            ARBITRATION_CODE_6 = 50156 | XEvent.Severity.Error,
            ARBITRATION_CODE_7 = 50157 | XEvent.Severity.Error,
            ARBITRATION_INTERFACE_BUCKET_THREAD = 50158 | XEvent.Severity.Error,
            ARBITRATION_INTERFACE_BUCKET_UNABLE_TO_QUEUE_EVENT = 50159 | XEvent.Severity.Error,
            ARBITRATION_COMM_0 = 50175 | XEvent.Severity.Error,
            ARBITRATION_COMM_1 = 50176 | XEvent.Severity.Error,
            ARBITRATION_COMM_2 = 50177 | XEvent.Severity.Error,
            ARBITRATION_COMM_3 = 50178 | XEvent.Severity.Error,
            ARBITRATION_COMM_4 = 50179 | XEvent.Severity.Error,
            ARBITRATION_COMM_5 = 50180 | XEvent.Severity.Error,
            ARBITRATION_COMM_6 = 50181 | XEvent.Severity.Error,
            ARBITRATION_COMM_7 = 50182 | XEvent.Severity.Error,
            ARBITRATION_COMM_8 = 50183 | XEvent.Severity.Error,
            ARBITRATION_COMM_9 = 50184 | XEvent.Severity.Error,
            ARBITRATION_COMM_10 = 50185 | XEvent.Severity.Error,
            ARBITRATION_COMM_11 = 50186 | XEvent.Severity.Error,
            ARBITRATION_COMM_12 = 50187 | XEvent.Severity.Error,
            ARBITRATION_CONFIG_0 = 50225 | XEvent.Severity.Error,
            ARBITRATION_CONFIGURATION_ERROR = 50226 | XEvent.Severity.Warning,
            ARBITRATION_CONFIGURATION_ERROR_1 = 50227 | XEvent.Severity.Error,
            ARBITRATION_CONFIGURATION_ERROR_2 = 50228 | XEvent.Severity.Error,
            ARBITRATION_CONFIGURATION_ERROR_3 = 50229 | XEvent.Severity.Error,
            ARBITRATION_CONFIGURATION_ERROR_4 = 50230 | XEvent.Severity.Error,
            ARBITRATION_CONFIGURATION_ERROR_5 = 50231 | XEvent.Severity.Error,
            ARBITRATION_CONFIGURATION_ERROR_6 = 50232 | XEvent.Severity.Warning,
            ARBITRATION_CONFIGURATION_ERROR_7 = 50233 | XEvent.Severity.Error,
            ARBITRATION_CONFIG_9 = 50234 | XEvent.Severity.Warning,
            ARBITRATION_BAD_REQUEST_FROM_CLIENT = 50275 | XEvent.Severity.Warning,
            ARBITRATION_BAD_REQUEST_FROM_CLIENT_1 = 50276 | XEvent.Severity.Warning,
            ARBITRATION_BAD_REQUEST_FROM_CLIENT_2 = 50277 | XEvent.Severity.Warning,
            ARBITRATION_BAD_REQUEST_FROM_CLIENT_3 = 50278 | XEvent.Severity.Warning,
            ARBITRATION_BAD_REQUEST_FROM_CLIENT_4 = 50279 | XEvent.Severity.Warning,
            ARBITRATION_BAD_REQUEST_FROM_CLIENT_5 = 50280 | XEvent.Severity.Warning,
            ARBITRATION_BAD_REQUEST_FROM_CLIENT_6 = 50281 | XEvent.Severity.Warning,
            ARBITRATION_BAD_REQUEST_FROM_CLIENT_7 = 50282 | XEvent.Severity.Warning,
            ARBITRATION_BAD_REQUEST_FROM_CLIENT_8 = 50283 | XEvent.Severity.Warning,
            ARBITRATION_HACKER_ALERT = 50284 | XEvent.Severity.Warning,
            ARBITRATION_HACKER_ALERT_1 = 50285 | XEvent.Severity.Warning,
            ARBITRATION_HACKER_ALERT_2 = 50286 | XEvent.Severity.Warning,
            ARBITRATION_HACKER_ALERT_3 = 50287 | XEvent.Severity.Warning,
            ARBITRATION_BAD_REQUEST_FROM_CLIENT_9 = 50288 | XEvent.Severity.Warning,
            ARBITRATION_HACKER_ALERT_4 = 50289 | XEvent.Severity.Warning,
            ARBITRATION_HACKER_ALERT_5 = 50290 | XEvent.Severity.Warning,
            ARBITRATION_BAD_REQUEST_FROM_CLIENT_10 = 50291 | XEvent.Severity.Warning,
            ARBITRATION_BAD_REQUEST_FROM_CLIENT_11 = 50292 | XEvent.Severity.Warning,
            ARBITRATION_BAD_REQUEST_FROM_CLIENT_12 = 50293 | XEvent.Severity.Warning,
            ARBITRATION_HACKER_ALERT_6 = 50294 | XEvent.Severity.Warning,
            ARBITRATION_HACKER_ALERT_7 = 50295 | XEvent.Severity.Warning,
            ARBITRATION_BAD_REQUEST_FROM_CLIENT_13 = 50296 | XEvent.Severity.Warning,
            ARBITRATION_HACKER_ALERT_8 = 50297 | XEvent.Severity.Warning,
            ARBITRATION_HACKER_ALERT_9 = 50298 | XEvent.Severity.Warning,
            ARBITRATION_BAD_REQUEST_FROM_CLIENT_14 = 50299 | XEvent.Severity.Warning,
            ARBITRATION_HACKER_ALERT_10 = 50300 | XEvent.Severity.Warning,
            ARBITRATION_BAD_REQUEST_FROM_CLIENT_15 = 50301 | XEvent.Severity.Warning,
            ARBITRATION_HACKER_ALERT_11 = 50302 | XEvent.Severity.Warning,
            ARBITRATION_HACKER_ALERT_12 = 50303 | XEvent.Severity.Warning,
            ARBITRATION_HACKER_ALERT_13 = 50304 | XEvent.Severity.Warning,
            ARBITRATION_BAD_REQUEST_FROM_CLIENT_16 = 50305 | XEvent.Severity.Warning,
            ARBITRATION_BAD_REQUEST_FROM_CLIENT_17 = 50306 | XEvent.Severity.Warning,
            ARBITRATION_BAD_REQUEST_FROM_CLIENT_18 = 50307 | XEvent.Severity.Warning,
            ARBITRATION_HACKER_ALERT_14 = 50308 | XEvent.Severity.Warning,
            ARBITRATION_HACK_34 = 50309 | XEvent.Severity.Warning,
            ARBITRATION_HACK_35 = 50310 | XEvent.Severity.Warning,
            ARBITRATION_HACK_36 = 50311 | XEvent.Severity.Warning,
            ARBITRATION_HACK_37 = 50312 | XEvent.Severity.Warning,
            ARBITRATION_HACK_38 = 50313 | XEvent.Severity.Warning,
            ARBITRATION_HACK_39 = 50314 | XEvent.Severity.Warning,
            ARBITRATION_HACK_40 = 50315 | XEvent.Severity.Warning,
            ARBITRATION_HACK_41 = 50316 | XEvent.Severity.Warning,
            ARBITRATION_HACK_42 = 50317 | XEvent.Severity.Warning,
            ARBITRATION_HACK_43 = 50318 | XEvent.Severity.Warning,
            ARBITRATION_HACK_44 = 50319 | XEvent.Severity.Warning,
            ARBITRATION_HACK_45 = 50320 | XEvent.Severity.Warning,
            ARBITRATION_INFO_1 = 50376 | XEvent.Severity.Info,
            ARBITRATION_INFO_2 = 50377 | XEvent.Severity.Info,
            ARBITRATION_INFO_3 = 50378 | XEvent.Severity.Info,
            ARBITRATION_TITLEBUG_0 = 50400 | XEvent.Severity.Error,
            ARBITRATION_TITLEBUG_1 = 50401 | XEvent.Severity.Error,
            ASKDC_KDCMANAGED_WSREADER_ERROR_1 = 10000 | XEvent.Severity.Error,
            ASKDC_BAD_PARAMETER = 53225 | XEvent.Severity.Error,
            ASKDC_BAD_PARAMETER_1 = 53226 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY = 53227 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_1 = 53228 | XEvent.Severity.Error,
            KDC_BASE_BAD_KERBCRYPT = 53229 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_2 = 53230 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_3 = 53231 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_4 = 53232 | XEvent.Severity.Error,
            DEPRACATED_ASKDC_NO_MEMORY_5 = 53233 | XEvent.Severity.Error,
            DEPRACATED_ASKDC_NO_MEMORY_6 = 53234 | XEvent.Severity.Error,
            KDC_CODE_10 = 53235 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR = 53236 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_7 = 53237 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_1 = 53238 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_8 = 53239 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_2 = 53240 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_3 = 53241 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_4 = 53242 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_5 = 53243 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_6 = 53244 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_7 = 53245 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_9 = 53246 | XEvent.Severity.Error,
            KDC_CODE_22 = 53247 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_8 = 53248 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_10 = 53249 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_9 = 53250 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_11 = 53251 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_10 = 53252 | XEvent.Severity.Error,
            KDC_CODE_28 = 53253 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_11 = 53254 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_12 = 53255 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_13 = 53256 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_12 = 53257 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_13 = 53258 | XEvent.Severity.Error,
            DEPRACATED_ASKDC_NO_MEMORY_14 = 53259 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_15 = 53260 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_16 = 53261 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_14 = 53262 | XEvent.Severity.Error,
            KDC_CODE_38 = 53263 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_15 = 53264 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_16 = 53265 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_17 = 53266 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_18 = 53267 | XEvent.Severity.Error,
            KDC_CODE_43 = 53268 | XEvent.Severity.Error,
            DEPRACATED_ASKDC_WSREADER_ERROR_19 = 53269 | XEvent.Severity.Error,
            DEPRACATED_ASKDC_BAD_PARAMETER_2 = 53270 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_17 = 53271 | XEvent.Severity.Error,
            DEPRACATED_ASKDC_BAD_PARAMETER_3 = 53272 | XEvent.Severity.Error,
            KDC_CODE_48 = 53273 | XEvent.Severity.Error,
            KDC_CODE_49 = 53274 | XEvent.Severity.Error,
            DEPRACATED_KDC_CODE_50 = 53275 | XEvent.Severity.Error,
            DEPRACATED_KDC_CODE_51 = 53276 | XEvent.Severity.Error,
            KDC_CODE_52 = 53277 | XEvent.Severity.Error,
            KDC_CODE_53 = 53278 | XEvent.Severity.Error,
            KDC_CODE_54 = 53279 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_20 = 53280 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_21 = 53281 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_22 = 53282 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_18 = 53283 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_19 = 53284 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_23 = 53285 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_24 = 53286 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_20 = 53287 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_25 = 53288 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_26 = 53289 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_27 = 53290 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_28 = 53291 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_29 = 53292 | XEvent.Severity.Error,
            ASKDC_NO_CRYPTOHELPER = 53293 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_30 = 53294 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_21 = 53295 | XEvent.Severity.Error,
            ASKDC_WSREADER_ERROR_31 = 53296 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_22 = 53297 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_23 = 53298 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_24 = 53299 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_25 = 53300 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_26 = 53301 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_27 = 53302 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_28 = 53303 | XEvent.Severity.Error,
            ASKDC_NO_MEMORY_29 = 53304 | XEvent.Severity.Error,
            ASKDC_CODE_MEMORY_ALLOCATION_ERROR = 53664 | XEvent.Severity.Error,
            ASKDC_CODE_FAILED_TO_GET_CIPHERTEXT_SIZE = 53665 | XEvent.Severity.Error,
            ASKDC_CODE_MEMORY_ALLOCATION_ERROR_2 = 53666 | XEvent.Severity.Error,
            ASKDC_CODE_FAILED_TO_ENCRYPT_REPLY = 53667 | XEvent.Severity.Error,
            ASKDC_CODE_FAILED_TO_PACK_REPLY = 53668 | XEvent.Severity.Error,
            ASKDC_FAILED_TO_GET_USER_ID_FOR_PASSPORT_ID = 53669 | XEvent.Severity.Error,
            ASKDC_FAILED_TO_GET_GAMERTAG_BY_USER_ID = 53672 | XEvent.Severity.Error,
            ASKDC_FAILED_TO_LOAD_ECHO_DATA_KEY = 53675 | XEvent.Severity.Error,
            ASKDC_BAD_PARAMETER_4 = 53676 | XEvent.Severity.Error,
            ASKDC_DOS_CACHE_TOO_SMALL = 54250 | XEvent.Severity.Error,
            ASKDC_DOS_CACHE_TOO_SMALL_1 = 54251 | XEvent.Severity.Error,
            ASKDC_REGISTER_FAILURE = 54252 | XEvent.Severity.Error,
            ASKDC_REGISTER_FAILURE_1 = 54253 | XEvent.Severity.Error,
            ASKDC_REGISTER_FAILURE_2 = 54254 | XEvent.Severity.Error,
            ASKDC_REGISTER_FAILURE_3 = 54255 | XEvent.Severity.Error,
            KDC_CONFIG_6 = 54256 | XEvent.Severity.Error,
            ASKDC_INIT_FAILURE = 54257 | XEvent.Severity.Error,
            ASKDC_INIT_FAILURE_1 = 54258 | XEvent.Severity.Error,
            ASKDC_INIT_FAILURE_2 = 54259 | XEvent.Severity.Error,
            ASKDC_INIT_FAILURE_3 = 54260 | XEvent.Severity.Error,
            ASKDC_INIT_FAILURE_4 = 54261 | XEvent.Severity.Error,
            DEPRACATED_ASKDC_INIT_FAILURE_5 = 54262 | XEvent.Severity.Error,
            ASKDC_INIT_WARNING = 54263 | XEvent.Severity.Warning,
            ASKDC_INIT_WARNING_1 = 54264 | XEvent.Severity.Warning,
            ASKDC_INIT_WARNING_2 = 54265 | XEvent.Severity.Warning,
            ASKDC_INIT_WARNING_3 = 54266 | XEvent.Severity.Warning,
            ASKDC_DECRYPTION_FAILED = 54267 | XEvent.Severity.Error,
            KDC_CONFIG_18 = 54268 | XEvent.Severity.Warning,
            ASKDC_INVALID_PASSPORT_KEY_VERSION = 54269 | XEvent.Severity.Error,
            DEPRACATED_KDC_CONFIG_20 = 54270 | XEvent.Severity.Error,
            ASKDC_SET_PASSPORT_KEY_VERSION = 54271 | XEvent.Severity.Error,
            KDC_CONFIG_22 = 54272 | XEvent.Severity.Error,
            ASKDC_TOO_MANY_USER_KEY_VERSIONS = 54273 | XEvent.Severity.Error,
            KDC_CONFIG_24 = 54274 | XEvent.Severity.Error,
            ASKDC_FAILED_TO_INITIALIZE_PASSPORT = 54368 | XEvent.Severity.Error,
            ASKDC_INIT_FAILURE_6 = 54372 | XEvent.Severity.Error,
            ASKDC_CRYPTO_FAILURE = 54373 | XEvent.Severity.Error,
            ASKDC_DOS_REPLAY = 54650 | XEvent.Severity.Warning,
            KDC_HACK_1 = 54651 | XEvent.Severity.Warning,
            KDC_HACK_2 = 54652 | XEvent.Severity.Warning,
            ASKDC_PPA_PADATA_MISSING = 54653 | XEvent.Severity.Warning,
            ASKDC_BAD_CLIENT_NAME = 54654 | XEvent.Severity.Warning,
            KDC_HACK_5 = 54655 | XEvent.Severity.Warning,
            ASKDC_HACK_INVALID_PRE_AUTH_TYPE = 54702 | XEvent.Severity.Warning,
            ASKDC_HACK_MALFORMED_PRE_AUTH = 54703 | XEvent.Severity.Warning,
            ASKDC_HACK_FAILED_TO_CRACK_PASSPORT_TICKET = 54704 | XEvent.Severity.Warning,
            ASKDC_HACK_INVALID_REQUEST = 54705 | XEvent.Severity.Warning,
            ASKDC_HACK_DOS_ATTACK = 54707 | XEvent.Severity.Warning,
            ASKDC_HACK_MALFORMED_PRE_AUTH_1 = 54715 | XEvent.Severity.Warning,
            ASKDC_UNKNOWN_SERVER_PRINCIPAL = 54716 | XEvent.Severity.Error,
            ASKDC_REGISTER_SUCCESS = 54750 | XEvent.Severity.Info,
            ASKDC_REGISTER_SUCCESS_1 = 54751 | XEvent.Severity.Info,
            ASKDC_INIT_SUCCESS = 54752 | XEvent.Severity.Info,
            ASKDC_TERM_SUCCESS = 54753 | XEvent.Severity.Info,
            ASKDC_RELOAD_SUCCESS = 54754 | XEvent.Severity.Info,
            DEPRACATED_ASKDC_PPA_LOADING_INFO = 54755 | XEvent.Severity.Info,
            DEPRACATED_ASKDC_PPA_LOADING_INFO_1 = 54756 | XEvent.Severity.Info,
            KDC_INFO_7 = 54757 | XEvent.Severity.Info,
            XCBK_NOTIFY_KEY_NOT_FOUND_IN_MESSAGE = 15000 | XEvent.Severity.Error,
            XCBK_NOTIFY_SETTING_NOT_FOUND = 15001 | XEvent.Severity.Error,
            XCBK_NOTIFY_UNAUTHORIZED_REQUEST = 15002 | XEvent.Severity.Error,
            XCBK_NOTIFY_UNKNOWN_ERROR = 15003 | XEvent.Severity.Error,
            PASSPORT_DELETE_CREDENTIAL_ERROR = 15004 | XEvent.Severity.Error,
            PASSPORT_ENUM_CREDENTIALS_BY_NAME_ERROR = 15005 | XEvent.Severity.Error,
            PASSPORT_FORCE_CREDENTIAL_RENAME_ERROR = 15006 | XEvent.Severity.Error,
            USER_PURCHASE_NOT_ELIGIBLE_FOR_FREE_GAMERTAG_CHANGE = 15007 | XEvent.Severity.Error,
            XCBK_NOTIFY_BILLING_NOTIFICATION_ADD_FAILURE = 15015 | XEvent.Severity.Error,
            XCBK_NOTIFY_SUBSCRIPTION_NOTIFICATION_ADD_FAILURE = 15016 | XEvent.Severity.Error,
            XCBK_NOTIFY_SUBSCRIPTION_NOTIFICATION_ACCOUNT_MISMATCH = 15017 | XEvent.Severity.Error,
            CTP_TRANSACTIONSERVICE_UNKNOWN_ERROR = 15008 | XEvent.Severity.Error,
            CTP_TRANSACTIONSERVICE_COMMUNICATION_ERROR = 15009 | XEvent.Severity.Error,
            CTP_NON_USER_EXCEPTION = 15010 | XEvent.Severity.Error,
            CTP_TRANSACTIONSERVICE_VALIDATION_PATH = 15011 | XEvent.Severity.Error,
            CTP_TRANSACTIONSERVICE_INVALID_SUBSCRIPTION_RESPONSE = 15012 | XEvent.Severity.Warning,
            CTP_TRANSACTIONSERVICE_INVALIDARGS = 15013 | XEvent.Severity.Error,
            PREVIEW_PRODUCT_PURCHASE_MEDIA_TYPE_MISMATCH = 15014 | XEvent.Severity.Error,
            CTP_PARTNER_CONFIGURATION_ERROR = 15018 | XEvent.Severity.Error,
            CATALOG_MEDIACLASS_SETTING_MALFORMATTED = 49991 | XEvent.Severity.Error,
            OFFER_REDUCED_PRICECHECK_MALFORMATTED = 49992 | XEvent.Severity.Error,
            VIDEOCATALOG_SETTINGS_MALFORMATTED = 49993 | XEvent.Severity.Error,
            STORECATALOG_DEFAULT_SETTINGS_MISSING = 49994 | XEvent.Severity.Error,
            STORECATALOG_DEFAULT_SETTINGS_MALFORMATTED_1 = 49995 | XEvent.Severity.Error,
            STORECATALOG_DEFAULT_SETTINGS_MALFORMATTED_2 = 49996 | XEvent.Severity.Error,
            STOREMEDIATYPECATALOG_OVERRIDE_SETTINGS_MALFORMATTED_1 = 49997 | XEvent.Severity.Error,
            STOREMEDIATYPECATALOG_OVERRIDE_SETTINGS_MALFORMATTED_2 = 49998 | XEvent.Severity.Error,
            STOREMEDIATYPECATALOG_OVERRIDE_SETTINGS_MALFORMATTED_3 = 49999 | XEvent.Severity.Error,
            CERT_GRABBER_GET_CERT_FAILURE = 40000 | XEvent.Severity.Error,
            CERT_GRABBER_PARSE_CERT_FAILURE = 40001 | XEvent.Severity.Error,
            CERT_GRABBER_UPDATE_CERT_FAILURE = 40002 | XEvent.Severity.Error,
            PLUGIN_CERTGRABBER_CERTIFICATE_UPDATED = 40003 | XEvent.Severity.Info,
            OFFER_ID_LOOKUP_FAILURE = 40004 | XEvent.Severity.Error,
            REINSTATE_DELAYED_CANCEL_FAILURE = 40005 | XEvent.Severity.Error,
            XCBK_UNEXPECTED_REQUEST = 50426 | XEvent.Severity.Error,
            XCBK_UNKNOWN_ERROR = 50429 | XEvent.Severity.Error,
            XCBK_UNKNOWN_ERROR_1 = 50431 | XEvent.Severity.Error,
            XCBK_UNEXPECTED_REQUEST_1 = 50434 | XEvent.Severity.Error,
            XCBK_UNKNOWN_ERROR_2 = 50435 | XEvent.Severity.Error,
            XCBK_UNKNOWN_ERROR_3 = 50436 | XEvent.Severity.Error,
            XCBK_UNKNOWN_ERROR_4 = 50437 | XEvent.Severity.Error,
            MC_BAD_PARAMETER_3 = 50438 | XEvent.Severity.Error,
            MC_APPLICATION_ERROR_8 = 50440 | XEvent.Severity.Error,
            MC_SPS_UNRECOGNIZED_ERROR_1 = 50442 | XEvent.Severity.Error,
            FAIL_FAST_EXIT = 50455 | XEvent.Severity.Info,
            FAIL_FAST_ENTER = 50456 | XEvent.Severity.Error,
            DEPRECATED_BILLING_CODE_49 = 50474 | XEvent.Severity.Error,
            DEPRECATED_BILLING_CODE_50 = 50475 | XEvent.Severity.Error,
            DEPRECATED_BILLING_CODE_65 = 50490 | XEvent.Severity.Error,
            UNKOWN_OFFER_TYPE = 50493 | XEvent.Severity.Error,
            UNKOWN_PAYMENT_TYPE = 50494 | XEvent.Severity.Error,
            GEOFENCE_COMPONENT_RETURNED_NULL = 50495 | XEvent.Severity.Warning,
            GEOFENCE_COMPONENT_RETURNED_EXCEPTION = 50496 | XEvent.Severity.Error,
            DEPRECATED_GET_MACHINE_PART_NUMBER_FAILED = 50497 | XEvent.Severity.Error,
            DEPRECATED_TRANSFER_MACHINE_LICENSES_FAILED = 50498 | XEvent.Severity.Error,
            DEPRECATED_TRANSFER_MACHINE_LICENSES_ASSET_CHECK_FAILED = 50499 | XEvent.Severity.Error,
            GET_PUID_FROM_MEMBERNAME_ERROR = 50500 | XEvent.Severity.Error,
            XCBK_UNKNOWN_SERVICE_COMPONENT = 50526 | XEvent.Severity.Error,
            MC_SPS_TIMEOUT = 50527 | XEvent.Severity.Error,
            MUSICNET_ADD_SUBSCRIPTION_OFFER_FAILED = 50534 | XEvent.Severity.Error,
            BDK_BLOCKING_SCS_APIS_BAD_MULTISETTING = 50535 | XEvent.Severity.Error,
            CATALOG_MUSIC_MNETID_INVALID = 50536 | XEvent.Severity.Error,
            CATALOG_QUERY_ERROR = 50537 | XEvent.Severity.Error,
            XCBK_DATABASE_UNAVAILABLE = 50550 | XEvent.Severity.Error,
            XCBK_DATABASE_UNAVAILABLE_1 = 50551 | XEvent.Severity.Error,
            MC_SPS_OFFER_MISCONFIGURATION_3 = 50553 | XEvent.Severity.Error,
            MC_SPS_OFFER_MISCONFIGURATION_4 = 50554 | XEvent.Severity.Error,
            MC_SPS_OFFER_MISCONFIGURATION_5 = 50555 | XEvent.Severity.Error,
            MC_BILLING_PROVIDER_INIT_ERROR = 50556 | XEvent.Severity.Error,
            UODB_ACCESS_ERROR = 50567 | XEvent.Severity.Error,
            MC_SPS_IS_OFF = 50568 | XEvent.Severity.Warning,
            MC_BILLING_PROVIDER_INIT_ERROR_1 = 50582 | XEvent.Severity.Error,
            XCBK_SUBSCRIPTION_EXPIRATION_MESSAGE_FAILED = 50583 | XEvent.Severity.Error,
            DEPRECATED_BILLING_OFFERING_GEOAPI_INIT_FAILED = 50588 | XEvent.Severity.Error,
            XUACS_GRADUATE_USER_UPDATE_ERROR = 50679 | XEvent.Severity.Error,
            XUACS_GRADUATE_USER_QUEUE_ERROR = 50680 | XEvent.Severity.Error,
            XUACS_GRADUATE_USER_QUEUE_TIMER_ERROR = 50681 | XEvent.Severity.Error,
            XUACS_GRADUATE_USER_DEQUEUE_ERROR = 50682 | XEvent.Severity.Error,
            GRADUATE_USER_QUEUE_GET_PENDING_ERROR = 50687 | XEvent.Severity.Error,
            MC_CANNOT_COMPLETE_PURCHASE_COMMIT = 50705 | XEvent.Severity.Info,
            MC_SPS_UNRECOGNIZED_ERROR = 50825 | XEvent.Severity.Error,
            COMMON_CODE_1 = 50826 | XEvent.Severity.Error,
            COMMON_CODE_2 = 50827 | XEvent.Severity.Error,
            MC_SPS_INVALID_SUBSCRIPTION_ID = 50828 | XEvent.Severity.Error,
            MC_SPS_INELIGIBLE_FOR_OFFER = 50829 | XEvent.Severity.Error,
            MC_SPS_INELIGIBLE_FOR_OFFER_1 = 50830 | XEvent.Severity.Error,
            MC_SPS_INVALID_PUID = 50831 | XEvent.Severity.Error,
            COMMON_CODE_7 = 50832 | XEvent.Severity.Error,
            COMMON_CODE_8 = 50833 | XEvent.Severity.Error,
            COMMON_CODE_9 = 50834 | XEvent.Severity.Error,
            COMMON_CODE_10 = 50835 | XEvent.Severity.Error,
            COMMON_CODE_11 = 50836 | XEvent.Severity.Error,
            MC_SPS_TOO_MANY_SERVICE_COMPONENTS = 50837 | XEvent.Severity.Error,
            COMMON_CODE_13 = 50838 | XEvent.Severity.Error,
            COMMON_CODE_14 = 50839 | XEvent.Severity.Error,
            COMMON_CODE_15 = 50840 | XEvent.Severity.Error,
            MC_CANNOT_RECORD_TRANSACTION = 50841 | XEvent.Severity.Error,
            MC_CANNOT_RECORD_TRANSACTION_1 = 50842 | XEvent.Severity.Error,
            MC_CANNOT_RECORD_TRANSACTION_2 = 50843 | XEvent.Severity.Error,
            MC_CANNOT_RECORD_TRANSACTION_3 = 50844 | XEvent.Severity.Error,
            COMMON_CODE_123 = 50948 | XEvent.Severity.Error,
            COMMON_CODE_124 = 50949 | XEvent.Severity.Error,
            COMMON_CODE_125 = 50950 | XEvent.Severity.Error,
            COMMON_CODE_126 = 50951 | XEvent.Severity.Error,
            COMMON_CODE_127 = 50952 | XEvent.Severity.Error,
            COMMON_CODE_128 = 50953 | XEvent.Severity.Error,
            COMMON_CODE_129 = 50954 | XEvent.Severity.Error,
            COMMON_CODE_130 = 50955 | XEvent.Severity.Error,
            COMMON_CODE_131 = 50956 | XEvent.Severity.Error,
            COMMON_CODE_132 = 50957 | XEvent.Severity.Error,
            COMMON_CODE_134 = 50959 | XEvent.Severity.Error,
            COMMON_CODE_135 = 50960 | XEvent.Severity.Error,
            COMMON_CODE_136 = 50961 | XEvent.Severity.Error,
            COMMON_CODE_137 = 50962 | XEvent.Severity.Error,
            COMMON_CODE_138 = 50963 | XEvent.Severity.Error,
            COMMON_CODE_139 = 50964 | XEvent.Severity.Error,
            COMMON_CODE_140 = 50965 | XEvent.Severity.Error,
            COMMON_CODE_141 = 50966 | XEvent.Severity.Error,
            COMMON_CODE_142 = 50967 | XEvent.Severity.Error,
            COMMON_CODE_143 = 50968 | XEvent.Severity.Error,
            COMMON_CODE_144 = 50969 | XEvent.Severity.Error,
            COMMON_CODE_145 = 50970 | XEvent.Severity.Error,
            COMMON_CODE_201 = 51026 | XEvent.Severity.Error,
            COMMON_CODE_202 = 51027 | XEvent.Severity.Error,
            COMMON_CODE_203 = 51028 | XEvent.Severity.Error,
            COMMON_CODE_204 = 51029 | XEvent.Severity.Error,
            COMMON_COMM_0 = 51225 | XEvent.Severity.Error,
            COMMON_COMM_1 = 51226 | XEvent.Severity.Error,
            COMMON_COMM_2 = 51227 | XEvent.Severity.Error,
            MC_SPS_PROVISIONING_FAILURE = 51228 | XEvent.Severity.Error,
            COMMON_COMM_4 = 51229 | XEvent.Severity.Error,
            COMMON_COMM_5 = 51230 | XEvent.Severity.Error,
            COMMON_CONFIG_0 = 51325 | XEvent.Severity.Warning,
            COMMON_CONFIG_1 = 51326 | XEvent.Severity.Error,
            COMMON_CONFIG_2 = 51327 | XEvent.Severity.Error,
            COMMON_CONFIG_3 = 51328 | XEvent.Severity.Error,
            COMMON_CONFIG_4 = 51329 | XEvent.Severity.Error,
            COMMON_CONFIG_5 = 51330 | XEvent.Severity.Error,
            COMMON_CONFIG_6 = 51331 | XEvent.Severity.Error,
            MC_BAD_CONFIG_DATA = 51332 | XEvent.Severity.Error,
            COMMON_CONFIG_8 = 51333 | XEvent.Severity.Error,
            COMMON_CONFIG_9 = 51334 | XEvent.Severity.Error,
            COMMON_CONFIG_10 = 51335 | XEvent.Severity.Error,
            COMMON_CONFIG_11 = 51336 | XEvent.Severity.Error,
            MC_BAD_CONFIG_DATA_1 = 51337 | XEvent.Severity.Error,
            MC_BAD_CONFIG_DATA_2 = 51338 | XEvent.Severity.Error,
            COMMON_CONFIG_14 = 51339 | XEvent.Severity.Error,
            COMMON_CONFIG_15 = 51340 | XEvent.Severity.Error,
            MC_BAD_CONFIG_DATA_3 = 51341 | XEvent.Severity.Error,
            COMMON_CONFIG_17 = 51342 | XEvent.Severity.Error,
            COMMON_CONFIG_18 = 51343 | XEvent.Severity.Error,
            MC_SPS_INVALID_OFFER_ID = 51344 | XEvent.Severity.Error,
            MC_SPS_INVALID_OFFER_ID_1 = 51345 | XEvent.Severity.Error,
            MC_SPS_QUEUE_ERROR = 51346 | XEvent.Severity.Error,
            MC_SPS_QUEUE_ERROR_1 = 51347 | XEvent.Severity.Error,
            MC_SPS_QUEUE_ERROR_2 = 51348 | XEvent.Severity.Error,
            COMMON_CONFIG_24 = 51349 | XEvent.Severity.Error,
            COMMON_CONFIG_25 = 51350 | XEvent.Severity.Warning,
            COMMON_CONFIG_26 = 51351 | XEvent.Severity.Error,
            COMMON_CONFIG_27 = 51352 | XEvent.Severity.Error,
            COMMON_CONFIG_28 = 51353 | XEvent.Severity.Error,
            COMMON_CONFIG_30 = 51355 | XEvent.Severity.Error,
            COMMON_CONFIG_31 = 51356 | XEvent.Severity.Error,
            QUEUE_FAILURE_AUTO_FIX = 51357 | XEvent.Severity.Error,
            COMMON_CONFIG_33 = 51358 | XEvent.Severity.Error,
            COMMON_CONFIG_34 = 51359 | XEvent.Severity.Error,
            COMMON_CONFIG_35 = 51360 | XEvent.Severity.Error,
            COMMON_CONFIG_36 = 51361 | XEvent.Severity.Error,
            COMMON_CONFIG_37 = 51362 | XEvent.Severity.Error,
            COMMON_CONFIG_38 = 51363 | XEvent.Severity.Error,
            COMMON_CONFIG_39 = 51364 | XEvent.Severity.Error,
            COMMON_CONFIG_40 = 51365 | XEvent.Severity.Error,
            COMMON_CONFIG_41 = 51366 | XEvent.Severity.Error,
            COMMON_CONFIG_42 = 51367 | XEvent.Severity.Error,
            COMMON_CONFIG_43 = 51368 | XEvent.Severity.Error,
            COMMON_CONFIG_44 = 51369 | XEvent.Severity.Error,
            COMMON_CONFIG_45 = 51370 | XEvent.Severity.Error,
            COMMON_CONFIG_46 = 51371 | XEvent.Severity.Error,
            COMMON_CONFIG_47 = 51372 | XEvent.Severity.Error,
            COMMON_CONFIG_48 = 51373 | XEvent.Severity.Error,
            COMMON_CONFIG_49 = 51374 | XEvent.Severity.Warning,
            COMMON_CONFIG_50 = 51375 | XEvent.Severity.Warning,
            MC_SPS_OFFER_MISCONFIGURATION = 51376 | XEvent.Severity.Error,
            COMMON_CONFIG_52 = 51377 | XEvent.Severity.Error,
            COMMON_CONFIG_53 = 51378 | XEvent.Severity.Error,
            COMMON_CONFIG_54 = 51379 | XEvent.Severity.Error,
            COMMON_CONFIG_55 = 51380 | XEvent.Severity.Error,
            COMMON_CONFIG_56 = 51381 | XEvent.Severity.Error,
            COMMON_CONFIG_57 = 51382 | XEvent.Severity.Error,
            COMMON_CONFIG_58 = 51383 | XEvent.Severity.Error,
            COMMON_CONFIG_59 = 51384 | XEvent.Severity.Error,
            COMMON_CONFIG_60 = 51385 | XEvent.Severity.Error,
            COMMON_CONFIG_61 = 51386 | XEvent.Severity.Error,
            COMMON_CONFIG_62 = 51387 | XEvent.Severity.Error,
            COMMON_CONFIG_63 = 51388 | XEvent.Severity.Error,
            MC_SPS_OFFER_MISCONFIGURATION_1 = 51389 | XEvent.Severity.Error,
            COMMON_CONFIG_65 = 51390 | XEvent.Severity.Error,
            COMMON_CONFIG_66 = 51391 | XEvent.Severity.Warning,
            COMMON_CONFIG_67 = 51392 | XEvent.Severity.Warning,
            COMMON_CONFIG_68 = 51393 | XEvent.Severity.Error,
            COMMON_CONFIG_267 = 51592 | XEvent.Severity.Error,
            MC_SPS_OFFER_MISCONFIGURATION_2 = 51594 | XEvent.Severity.Error,
            MC_AMBIGUOUS_OFFER_CONFIGURATION = 51673 | XEvent.Severity.Error,
            COMMON_HACK_0 = 52325 | XEvent.Severity.Warning,
            COMMON_HACK_1 = 52326 | XEvent.Severity.Warning,
            COMMON_HACK_2 = 52327 | XEvent.Severity.Warning,
            COMMON_HACK_3 = 52328 | XEvent.Severity.Warning,
            COMMON_INFO_0 = 52525 | XEvent.Severity.Info,
            COMMON_INFO_1 = 52526 | XEvent.Severity.Info,
            COMMON_INFO_2 = 52527 | XEvent.Severity.Info,
            COMMON_INFO_3 = 52528 | XEvent.Severity.Info,
            BILLING_SWITCH_USER_PASSPORT_QUEUE_DEQUEUE_ERROR = 62805 | XEvent.Severity.Error,
            BILLING_SWITCH_USER_PASSPORT_QUEUE_IMPERSONATION_ERROR = 62806 | XEvent.Severity.Error,
            BILLING_SWITCH_USER_PASSPORT_QUEUE_TIMER_RESET_ERROR = 62807 | XEvent.Severity.Error,
            BILLING_QUEUE_GET_PENDING_ERROR = 62819 | XEvent.Severity.Error,
            SWITCH_USER_PASSPORT_QUEUE_GET_PENDING_ERROR = 62821 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_0 = 62825 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_1 = 62826 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_2 = 62827 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_3 = 62828 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_4 = 62829 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_5 = 62830 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_6 = 62831 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_7 = 62832 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_8 = 62833 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_9 = 62834 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_10 = 62835 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_11 = 62836 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_12 = 62837 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_13 = 62838 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_14 = 62839 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_15 = 62840 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_16 = 62841 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_17 = 62842 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_18 = 62843 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_19 = 62844 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_20 = 62845 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_21 = 62846 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_22 = 62847 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_23 = 62848 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_24 = 62849 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_25 = 62850 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_26 = 62851 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_27 = 62852 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_28 = 62853 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_29 = 62854 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_30 = 62855 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_31 = 62856 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_32 = 62857 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_33 = 62858 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_34 = 62859 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_35 = 62860 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_36 = 62861 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_37 = 62862 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_38 = 62863 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_39 = 62864 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_40 = 62865 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_41 = 62866 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_42 = 62867 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_43 = 62868 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_44 = 62869 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_45 = 62870 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_46 = 62871 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_47 = 62872 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_48 = 62873 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_49 = 62874 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_50 = 62875 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_51 = 62876 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_52 = 62877 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_53 = 62878 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_54 = 62879 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_55 = 62880 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_56 = 62881 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_57 = 62882 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_58 = 62883 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_59 = 62884 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_60 = 62885 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_61 = 62886 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_62 = 62887 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_63 = 62888 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_64 = 62889 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_65 = 62890 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_66 = 62891 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_67 = 62892 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_68 = 62893 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_69 = 62894 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_70 = 62895 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_71 = 62896 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_72 = 62897 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_73 = 62898 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_74 = 62899 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_75 = 62900 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_76 = 62901 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_77 = 62902 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_78 = 62903 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_79 = 62904 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_80 = 62905 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_81 = 62906 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_82 = 62907 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_83 = 62908 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_84 = 62909 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_85 = 62910 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_86 = 62911 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_87 = 62912 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_88 = 62913 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_89 = 62914 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_90 = 62915 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_91 = 62916 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_92 = 62917 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_93 = 62918 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_94 = 62919 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_95 = 62920 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_96 = 62921 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_97 = 62922 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_98 = 62923 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_99 = 62924 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_100 = 62925 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_101 = 62926 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_102 = 62927 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_103 = 62928 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_104 = 62929 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_105 = 62930 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_106 = 62931 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_107 = 62932 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_108 = 62933 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_109 = 62934 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_110 = 62935 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_111 = 62936 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_112 = 62937 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_113 = 62938 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_114 = 62939 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_115 = 62940 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_116 = 62941 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_117 = 62942 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_118 = 62943 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_119 = 62944 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_120 = 62945 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_121 = 62946 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_122 = 62947 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_123 = 62948 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_124 = 62949 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_125 = 62950 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_126 = 62951 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_127 = 62952 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_128 = 62953 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_129 = 62954 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_130 = 62955 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_131 = 62956 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_132 = 62957 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_133 = 62958 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_134 = 62959 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_135 = 62960 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_136 = 62961 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_137 = 62962 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_138 = 62963 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_139 = 62964 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_140 = 62965 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_141 = 62966 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_142 = 62967 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_143 = 62968 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_144 = 62969 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_145 = 62970 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_146 = 62971 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_147 = 62972 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_148 = 62973 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_149 = 62974 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_150 = 62975 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_151 = 62976 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_152 = 62977 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_153 = 62978 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_154 = 62979 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_155 = 62980 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_156 = 62981 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_157 = 62982 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_158 = 62983 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_159 = 62984 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_160 = 62985 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_161 = 62986 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_162 = 62987 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_163 = 62988 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_164 = 62989 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_165 = 62990 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_166 = 62991 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_167 = 62992 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_168 = 62993 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_169 = 62994 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_170 = 62995 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_171 = 62996 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_172 = 62997 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_173 = 62998 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_174 = 62999 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_175 = 63000 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_176 = 63001 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_177 = 63002 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_178 = 63003 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_179 = 63004 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_180 = 63005 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_181 = 63006 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_182 = 63007 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_183 = 63008 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_184 = 63009 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_185 = 63010 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_186 = 63011 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_187 = 63012 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_188 = 63013 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_189 = 63014 | XEvent.Severity.Error,
            DMP_EXTERNAL_EXCEPTION = 63015 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_191 = 63016 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_192 = 63017 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_193 = 63018 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_194 = 63019 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_195 = 63020 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_196 = 63021 | XEvent.Severity.Error,
            PASSPORT_CREATE_ERROR = 63022 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_198 = 63023 | XEvent.Severity.Error,
            PASSPORT_CHANGE_PASSWORD_ERROR = 63024 | XEvent.Severity.Error,
            PASSPORT_LOGIN_ERROR = 63025 | XEvent.Severity.Error,
            PASSPORT_CREATE_PROFILE_ERROR = 63026 | XEvent.Severity.Error,
            PASSPORT_UPDATE_PROFILE_ERROR = 63027 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_203 = 63028 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_204 = 63029 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_205 = 63030 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_206 = 63031 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_207 = 63032 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_208 = 63033 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_209 = 63034 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_210 = 63035 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_211 = 63036 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_212 = 63037 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_213 = 63038 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_214 = 63039 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_215 = 63040 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_216 = 63041 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_217 = 63042 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_218 = 63043 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_219 = 63044 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_220 = 63045 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_221 = 63046 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_222 = 63047 | XEvent.Severity.Error,
            DEPRECATED_COMMON_BILLING_CODE_223 = 63048 | XEvent.Severity.Error,
            COMMON_BILLING_SCS_API_BLOCKED = 63049 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_224 = 63050 | XEvent.Severity.Error,
            COMMON_PASSPORT_API_BLOCKED = 63051 | XEvent.Severity.Error,
            COMMON_BILLING_QUEUED_ACCOUNT_NOT_FOUND = 63052 | XEvent.Severity.Error,
            COMMON_BILLING_NOT_CONNECTED_TO_BILLING = 63053 | XEvent.Severity.Error,
            COMMON_FSE_NO_BOOKMARK_SETTING = 63054 | XEvent.Severity.Error,
            COMMON_FSE_INVALID_BOOKMARK_SETTING = 63055 | XEvent.Severity.Error,
            COMMON_BILLING_TEST_SETTING_WARNING = 63056 | XEvent.Severity.Warning,
            COMMON_BILLING_TITLEID_FORMAT = 63057 | XEvent.Severity.Warning,
            COMMON_BILLING_ADDITIONAL_ACCOUNT_DATA_REQUIRED = 63058 | XEvent.Severity.Error,
            COMMON_BILLING_MOVE_SUBSCRIPTION_FAILED = 63059 | XEvent.Severity.Error,
            COMMON_BILLING_CHANGE_SUBSCRIPTION_STATE_FAILED = 63060 | XEvent.Severity.Error,
            COMMON_BILLING_CONTENT_TOKEN_OFFER_MISCONFIGURED = 63061 | XEvent.Severity.Error,
            COMMON_FSE_CACHE_QUERY_ERROR = 63062 | XEvent.Severity.Error,
            COMMON_FSE_CACHE_INSERT_ERROR = 63063 | XEvent.Severity.Error,
            COMMON_FSE_CACHE_RESERVE_ERROR = 63064 | XEvent.Severity.Error,
            COMMON_FSE_UNHANDLED_ERROR = 63065 | XEvent.Severity.Error,
            COMMON_BILLING_UPS_API_BLOCKED = 63066 | XEvent.Severity.Error,
            COMMON_FSE_CONFIGURATION_ERROR = 63067 | XEvent.Severity.Error,
            PASSPORT_INVALID_RESPONSE = 63068 | XEvent.Severity.Error,
            COMMON_UPS_ERROR = 63069 | XEvent.Severity.Error,
            COMMON_UPS_GET_PROFILE_ERROR = 63070 | XEvent.Severity.Error,
            COMMON_UPS_UPDATE_PROFILE_ERROR = 63071 | XEvent.Severity.Error,
            PASSPORT_GET_MEMBER_NAME_ERROR = 63072 | XEvent.Severity.Error,
            PASSPORT_GET_MEMBER_NAME_AND_CID_ERROR = 63073 | XEvent.Severity.Error,
            PASSPORT_GET_PUID_ERROR = 63074 | XEvent.Severity.Error,
            PASSPORT_SET_NO_AGE_OUT_ERROR = 63075 | XEvent.Severity.Error,
            PASSPORT_GET_NO_AGE_OUT_ERROR = 63076 | XEvent.Severity.Error,
            PASSPORT_CREATE_PROFILE = 63077 | XEvent.Severity.Error,
            PASSPORT_UPDATE_PROFILE = 63078 | XEvent.Severity.Error,
            CATALOG_WATCHER_EXTRACTOR_INVALID_MEDIAID_LCID = 20000 | XEvent.Severity.Error,
            CATALOG_WATCHER_WATCHER_TIME_OUT = 20001 | XEvent.Severity.Error,
            CATALOG_WATCHER_PRODUCER_EXCEPTION = 20002 | XEvent.Severity.Error,
            CATALOG_WATCHER_WATCHER_EXCEPTION = 20003 | XEvent.Severity.Error,
            CATALOG_WATCHER_PUBLISHER_EXCEPTION = 20004 | XEvent.Severity.Error,
            CATALOG_WATCHER_ESPPUBLISHER_FAST_OPERATION_ERROR = 20005 | XEvent.Severity.Error,
            CATALOG_WATCHER_ESPPUBLISHER_FAST_OPERATION_WARNING = 20006 | XEvent.Severity.Warning,
            CATALOG_WATCHER_ESPPUBLISHER_EXCEPTION = 20007 | XEvent.Severity.Warning,
            CATALOG_WATCHER_MEDIA_EXTRACTOR_ERROR = 20008 | XEvent.Severity.Warning,
            CATALOG_WATCHER_MEDIA_PRODUCER_ERROR = 20009 | XEvent.Severity.Warning,
            CATALOG_WATCHER_MEDIA_DOCUMENT_TOO_LARGE = 20010 | XEvent.Severity.Error,
            CATALOG_WATCHER_PROCESSOR_EXCEPTION = 20011 | XEvent.Severity.Error,
            CATALOG_WATCHER_VIDEO_PRODUCER_ERROR = 20012 | XEvent.Severity.Warning,
            CATALOG_WATCHER_AZURESTORAGE_PUBLISHER_EXCEPTION = 20013 | XEvent.Severity.Warning,
            CATALOG_WATCHER_SPEECH_PRODUCER_ERROR = 20014 | XEvent.Severity.Warning,
            CLEANSER_ETX_WRITE_FAIL = 15000 | XEvent.Severity.Error,
            CLEANSER_ETX_ADD_FAIL = 15001 | XEvent.Severity.Error,
            CLEANSER_BAD_PROTOCOL_FOR_DATA_REQ = 15002 | XEvent.Severity.Error,
            CLEANSER_BAD_PROTOCOL_FOR_DISCONNECT_REQ = 15003 | XEvent.Severity.Error,
            CLEANSER_MESSAGE_ENDOFSTREAM = 15004 | XEvent.Severity.Error,
            CLEANSER_CODE_0 = 50725 | XEvent.Severity.Error,
            CLEANSER_CODE_1 = 50726 | XEvent.Severity.Error,
            CLEANSER_CODE_2 = 50727 | XEvent.Severity.Error,
            CLEANSER_CODE_3 = 50728 | XEvent.Severity.Error,
            CLEANSER_CODE_4 = 50729 | XEvent.Severity.Error,
            CLEANSER_CODE_5 = 50730 | XEvent.Severity.Error,
            CLEANSER_COMM_0 = 50750 | XEvent.Severity.Error,
            CLEANSER_COMM_1 = 50751 | XEvent.Severity.Error,
            CLEANSER_COMM_2 = 50752 | XEvent.Severity.Error,
            CLEANSER_CONFIG_0 = 50775 | XEvent.Severity.Error,
            CLEANSER_CONFIG_1 = 50776 | XEvent.Severity.Error,
            CLEANSER_CONFIG_2 = 50777 | XEvent.Severity.Error,
            CLEANSER_CONFIG_3 = 50778 | XEvent.Severity.Error,
            CLEANSER_INFO_0 = 50800 | XEvent.Severity.Info,
            CLEANSER_INFO_1 = 50801 | XEvent.Severity.Info,
            CLEANSER_INFO_2 = 50802 | XEvent.Severity.Info,
            CLEANSER_INFO_3 = 50803 | XEvent.Severity.Info,
            CLEANSER_INFO_4 = 50804 | XEvent.Severity.Info,
            SGINFO_CALL_SOURCE_INVALID = 40001 | XEvent.Severity.Error,
            SGINFO_VERIFY_PRIVILEGE = 40002 | XEvent.Severity.Error,
            XMGMT_FAILED_TO_REGISTER_ASSEMBLY = 40050 | XEvent.Severity.Warning,
            HEALTH_REQUEST_FAILED = 40051 | XEvent.Severity.Error,
            HEALTH_INITIALIZE_INTEROP_FAILED = 40052 | XEvent.Severity.Error,
            HEALTH_REGISTERNATIVEHEALTHBLOCK_FAILED = 40053 | XEvent.Severity.Error,
            HEALTH_LISTENER_CALLBACK_REQUEST_FAILED = 40054 | XEvent.Severity.Error,
            HEALTH_LISTENER_CALLBACK_FAILED = 40055 | XEvent.Severity.Error,
            MSNRR_EXTERNAL_EXCEPTION = 40056 | XEvent.Severity.Error,
            SCS_NON_USER_EXCEPTION = 40057 | XEvent.Severity.Error,
            FAST_FAIL_DUPLICATE_RESOURCE = 40058 | XEvent.Severity.Warning,
            FAST_FAIL_ENABLED_DISABLED_TOGGLE = 40059 | XEvent.Severity.Info,
            FAST_FAIL_BUCKET_COUNT_CHANGE = 40060 | XEvent.Severity.Info,
            HEALTH_INITIALIZE_BLOCK_FAILED = 40061 | XEvent.Severity.Warning,
            SERVICE_KEY_LOAD_ERROR = 40062 | XEvent.Severity.Error,
            SERVICE_KEY_SAVE_ERROR = 40063 | XEvent.Severity.Error,
            SERVICE_KEY_NOT_FOUND = 40064 | XEvent.Severity.Error,
            GEOFENCE_TERRITORY_MAPPING_INVALID = 40065 | XEvent.Severity.Error,
            GEOFENCE_TERRITORY_MAPPING_AMBIGUOUS = 40066 | XEvent.Severity.Error,
            GEOFENCE_TERRITORY_MAPPING_DUPLICATE = 40067 | XEvent.Severity.Info,
            WIREDATA_DECRYPTION_ERROR = 40068 | XEvent.Severity.Warning,
            ACCELERATION_END_OF_STREAM = 40069 | XEvent.Severity.Warning,
            XBANC_END_OF_STREAM = 40070 | XEvent.Severity.Warning,
            SERVICE_KEY_IMPORT_ERROR = 40071 | XEvent.Severity.Error,
            WIREDATA_DESERIALIZATION_ERROR = 40072 | XEvent.Severity.Warning,
            LSPLIB_DATABASE_ERROR = 40073 | XEvent.Severity.Error,
            LOGTARGET_CREATE_ERROR = 40074 | XEvent.Severity.Error,
            SCS_QUEUE_FAILED_TO_UNCONSUME_TOKEN = 40075 | XEvent.Severity.Error,
            ACCOUNTS_HISTORY_GET_ERROR = 40076 | XEvent.Severity.Error,
            ACCOUNTS_HISTORY_LOG_ERROR = 40077 | XEvent.Severity.Error,
            ACCOUNTS_GAMERTAG_HISTORY_LOG_ERROR = 40078 | XEvent.Severity.Error,
            ACCOUNTS_USER_GAMERTAG_THRESHOLD_EXCEEDED = 40079 | XEvent.Severity.Warning,
            ACCOUNTS_MACHINE_GAMERTAG_THRESHOLD_EXCEEDED = 40080 | XEvent.Severity.Warning,
            ACCOUNTS_PASSPORT_HISTORY_LOG_ERROR = 40081 | XEvent.Severity.Error,
            ACCOUNTS_USER_PASSPORT_THRESHOLD_EXCEEDED = 40082 | XEvent.Severity.Warning,
            ACCOUNTS_MACHINE_PASSPORT_THRESHOLD_EXCEEDED = 40083 | XEvent.Severity.Warning,
            ACCOUNTS_RECOVERY_HISTORY_LOG_ERROR = 40084 | XEvent.Severity.Error,
            ACCOUNTS_USER_RECOVERY_THRESHOLD_EXCEEDED = 40085 | XEvent.Severity.Warning,
            ACCOUNTS_MACHINE_RECOVERY_THRESHOLD_EXCEEDED = 40086 | XEvent.Severity.Warning,
            ACCOUNTS_HIJACKING_WARNING = 40087 | XEvent.Severity.Warning,
            ACCOUNTS_HIJACKING_ERROR = 40088 | XEvent.Severity.Error,
            XCACHECONNECTION_NO_RECEIVETIMEOUT_SETTING = 40089 | XEvent.Severity.Error,
            XCACHECONNECTION_NO_SENDTIMEOUT_SETTING = 40090 | XEvent.Severity.Error,
            AUTHDATA_NO_MORE_SERVICES_ERROR = 40091 | XEvent.Severity.Error,
            AAINFO_DATA_VERIFICATION_ERROR = 40092 | XEvent.Severity.Error,
            AAINFO_DATA_VERIFICATION_WARNING = 40093 | XEvent.Severity.Warning,
            USER_FAMILY_DATA_MISSING = 40094 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_CHANGE_STATE = 40095 | XEvent.Severity.Error,
            COMMON_BILLING_CODE_CHANGE_BILLING_STATE = 40096 | XEvent.Severity.Error,
            ACCOUNTS_FAMILY_HISTORY_LOG_ERROR = 40097 | XEvent.Severity.Error,
            FINBUS_RECORD_TRANSACTION_INTENT_FAILURE = 40098 | XEvent.Severity.Error,
            FINBUS_RECORD_TRANSACTION_SUCESS_FAILURE = 40099 | XEvent.Severity.Error,
            FINBUS_RECORD_TRANSACTION_RESULT_FAILURE = 40100 | XEvent.Severity.Error,
            FINBUS_RECORD_TRANSACTION_PREINTENT_FAILURE = 40101 | XEvent.Severity.Error,
            FINBUS_GET_RETRY_COUNT_FAILURE = 40102 | XEvent.Severity.Error,
            FINBUS_GET_ITEM_FOR_RETRY_FAILURE = 40103 | XEvent.Severity.Error,
            FINBUS_TOKEN_REDEMPTION_ITEM_RETRY_FAILURE = 40104 | XEvent.Severity.Error,
            FINBUS_PURCHASE_ORDER_ITEM_RETRY_FAILURE = 40105 | XEvent.Severity.Error,
            FINBUS_TRANSACTION_RESPONSE_IS_INVALID = 40106 | XEvent.Severity.Error,
            FINBUS_MISSING_XNA_CREATOR_ID_ERROR = 40107 | XEvent.Severity.Error,
            FINBUS_QUEUE_TIMER_RESET_ERROR = 40108 | XEvent.Severity.Error,
            FINBUS_QUEUE_IMPERSONATION_UNDO_ERROR = 40109 | XEvent.Severity.Error,
            FINBUS_QUEUE_PUMP_ERROR = 40110 | XEvent.Severity.Error,
            FINBUS_QUEUE_GET_RETRYABLE_COUNT_ERROR = 40111 | XEvent.Severity.Error,
            FINBUS_QUEUE_GET_ITEM_FOR_RETRY_ERROR = 40112 | XEvent.Severity.Error,
            FINBUS_QUEUE_RETRY_ITEM_ERROR = 40113 | XEvent.Severity.Error,
            FINBUS_QUEUE_COMMUNICATION_ERROR = 40114 | XEvent.Severity.Error,
            MGMT_MISSING_REPORTING_COMPONENT_ID = 40115 | XEvent.Severity.Error,
            THREADPOOL_CONTEXT_EXCEPTION = 40116 | XEvent.Severity.Error,
            THREADPOOL_THREAD_EXCEPTION = 40117 | XEvent.Severity.Error,
            FINBUS_QUEUE_ITEM_FAILED = 40118 | XEvent.Severity.Warning,
            ETX_EVENT_HEADER_VERSION_MISSING = 40119 | XEvent.Severity.Error,
            ACCOUNT_MOVE_SUBSCRIPTION_ERROR = 40120 | XEvent.Severity.Error,
            SUBSCRIPTION_BAD_CREDITVALUE_ERROR = 40121 | XEvent.Severity.Error,
            PASSPORT_GET_PROFILE_ERROR = 40122 | XEvent.Severity.Error,
            TRACKED_API_CALL_DATABASE_ERROR = 40123 | XEvent.Severity.Error,
            TRACKED_API_CALL_UCDB_DATABASE_ERROR = 40124 | XEvent.Severity.Error,
            COMMON_CODE_20 = 50845 | XEvent.Severity.Error,
            CRYPTO_GENERAL_ERROR = 50846 | XEvent.Severity.Error,
            COMMON_CODE_22 = 50847 | XEvent.Severity.Error,
            COMMON_CODE_23 = 50848 | XEvent.Severity.Error,
            COMMON_CODE_24 = 50849 | XEvent.Severity.Error,
            MC_APPLICATION_ERROR = 50850 | XEvent.Severity.Error,
            COMMON_CODE_26 = 50851 | XEvent.Severity.Error,
            COMMON_CODE_27 = 50852 | XEvent.Severity.Error,
            COMMON_CODE_28 = 50853 | XEvent.Severity.Error,
            COMMON_CODE_29 = 50854 | XEvent.Severity.Error,
            COMMON_CODE_30 = 50855 | XEvent.Severity.Error,
            COMMON_CODE_31 = 50856 | XEvent.Severity.Error,
            COMMON_CODE_32 = 50857 | XEvent.Severity.Error,
            COMMON_CODE_33 = 50858 | XEvent.Severity.Error,
            COMMON_CODE_34 = 50859 | XEvent.Severity.Error,
            COMMON_CODE_35 = 50860 | XEvent.Severity.Error,
            COMMON_CODE_36 = 50861 | XEvent.Severity.Error,
            COMMON_CODE_37 = 50862 | XEvent.Severity.Error,
            COMMON_CODE_38 = 50863 | XEvent.Severity.Error,
            MC_PLUGIN_ERROR = 50864 | XEvent.Severity.Error,
            MC_PLUGIN_ERROR_1 = 50865 | XEvent.Severity.Error,
            COMMON_CODE_41 = 50866 | XEvent.Severity.Error,
            COMMON_CODE_42 = 50867 | XEvent.Severity.Error,
            COMMON_CODE_43 = 50868 | XEvent.Severity.Error,
            COMMON_CODE_46 = 50871 | XEvent.Severity.Error,
            COMMON_CODE_48 = 50873 | XEvent.Severity.Error,
            QUERY_BAD_PARAMETER = 50876 | XEvent.Severity.Error,
            QUERY_BAD_PARAMETER_1 = 50877 | XEvent.Severity.Error,
            COMMON_CODE_53 = 50878 | XEvent.Severity.Error,
            COMMON_CODE_54 = 50879 | XEvent.Severity.Error,
            COMMON_CODE_55 = 50880 | XEvent.Severity.Error,
            COMMON_CODE_56 = 50881 | XEvent.Severity.Error,
            COMMON_CODE_57 = 50882 | XEvent.Severity.Error,
            COMMON_CODE_58 = 50883 | XEvent.Severity.Error,
            COMMON_CODE_59 = 50884 | XEvent.Severity.Error,
            MC_BAD_PARAMETER = 50885 | XEvent.Severity.Error,
            MC_BAD_PARAMETER_1 = 50886 | XEvent.Severity.Error,
            MC_APPLICATION_ERROR_1 = 50887 | XEvent.Severity.Error,
            MC_APPLICATION_ERROR_2 = 50888 | XEvent.Severity.Error,
            MC_APPLICATION_ERROR_3 = 50889 | XEvent.Severity.Error,
            MC_BAD_PARAMETER_2 = 50890 | XEvent.Severity.Error,
            COMMON_CODE_66 = 50891 | XEvent.Severity.Error,
            MC_BAD_CODE = 50892 | XEvent.Severity.Error,
            MC_BAD_CODE_1 = 50893 | XEvent.Severity.Error,
            MC_BAD_CODE_2 = 50894 | XEvent.Severity.Error,
            MC_BAD_CODE_3 = 50895 | XEvent.Severity.Error,
            MC_BAD_CODE_4 = 50896 | XEvent.Severity.Error,
            MC_BAD_CODE_5 = 50897 | XEvent.Severity.Error,
            MC_BAD_CODE_6 = 50898 | XEvent.Severity.Error,
            COMMON_CODE_74 = 50899 | XEvent.Severity.Error,
            COMMON_CODE_75 = 50900 | XEvent.Severity.Error,
            COMMON_CODE_76 = 50901 | XEvent.Severity.Error,
            MC_BAD_CODE_7 = 50902 | XEvent.Severity.Error,
            MC_BAD_CODE_8 = 50903 | XEvent.Severity.Error,
            MC_BAD_CODE_9 = 50904 | XEvent.Severity.Error,
            MC_BAD_CODE_10 = 50905 | XEvent.Severity.Error,
            MC_BAD_CODE_11 = 50906 | XEvent.Severity.Error,
            MC_BAD_CODE_12 = 50907 | XEvent.Severity.Error,
            MC_BAD_CODE_13 = 50908 | XEvent.Severity.Error,
            MC_BAD_CODE_14 = 50909 | XEvent.Severity.Error,
            COMMON_CODE_85 = 50910 | XEvent.Severity.Error,
            COMMON_CODE_86 = 50911 | XEvent.Severity.Error,
            FORBIDDEN_NAMES_LOAD_FAILURE = 50912 | XEvent.Severity.Error,
            MC_APPLICATION_ERROR_5 = 50913 | XEvent.Severity.Error,
            MC_APPLICATION_ERROR_6 = 50914 | XEvent.Severity.Error,
            MC_APPLICATION_ERROR_7 = 50915 | XEvent.Severity.Error,
            COMMON_CODE_91 = 50916 | XEvent.Severity.Error,
            COMMON_CODE_92 = 50917 | XEvent.Severity.Error,
            MGMT_GENERIC_ERROR = 50918 | XEvent.Severity.Error,
            MGMT_GENERIC_ERROR_1 = 50919 | XEvent.Severity.Error,
            MGMT_GENERIC_ERROR_2 = 50920 | XEvent.Severity.Error,
            MGMT_GENERIC_ERROR_3 = 50921 | XEvent.Severity.Error,
            COMMON_CODE_97 = 50922 | XEvent.Severity.Error,
            MGMT_GENERIC_ERROR_4 = 50923 | XEvent.Severity.Error,
            COMMON_CODE_99 = 50924 | XEvent.Severity.Error,
            COMMON_CODE_100 = 50925 | XEvent.Severity.Error,
            COMMON_CODE_101 = 50926 | XEvent.Severity.Error,
            COMMON_CODE_102 = 50927 | XEvent.Severity.Error,
            COMMON_CODE_103 = 50928 | XEvent.Severity.Error,
            COMMON_CODE_104 = 50929 | XEvent.Severity.Error,
            COMMON_CODE_105 = 50930 | XEvent.Severity.Error,
            COMMON_CODE_106 = 50931 | XEvent.Severity.Error,
            COMMON_CODE_107 = 50932 | XEvent.Severity.Error,
            COMMON_CODE_108 = 50933 | XEvent.Severity.Error,
            COMMON_CODE_109 = 50934 | XEvent.Severity.Error,
            HEALTH_GENERIC_ERROR_1 = 50935 | XEvent.Severity.Error,
            SQL_EXECUTE_READER = 50936 | XEvent.Severity.Error,
            SQL_EXECUTE_READER_BEHAVIOR = 50937 | XEvent.Severity.Error,
            SQL_EXECUTE_NON_QUERY = 50938 | XEvent.Severity.Error,
            SQL_EXECUTE_SCALAR = 50939 | XEvent.Severity.Error,
            COUNTRY_LIST_MISSING = 50940 | XEvent.Severity.Error,
            COMMON_CODE_117 = 50942 | XEvent.Severity.Error,
            COMMON_CODE_118 = 50943 | XEvent.Severity.Error,
            DEPRECATED_COMMON_CODE_119 = 50944 | XEvent.Severity.Error,
            DEPRECATED_COMMON_CODE_120 = 50945 | XEvent.Severity.Error,
            COMMON_CODE_121 = 50946 | XEvent.Severity.Error,
            COMMON_CODE_122 = 50947 | XEvent.Severity.Error,
            CRYPTO_TOO_MANY_USER_KEYS = 50948 | XEvent.Severity.Warning,
            CRYPTO_FAILED_GET_USER_KEYS = 50949 | XEvent.Severity.Error,
            MUSICNET_EXTERNAL_EXCEPTION = 50958 | XEvent.Severity.Error,
            COMMON_CODE_146 = 50971 | XEvent.Severity.Error,
            COMMON_CODE_147 = 50972 | XEvent.Severity.Error,
            COMMON_CODE_148 = 50973 | XEvent.Severity.Error,
            COMMON_CODE_149 = 50974 | XEvent.Severity.Error,
            COMMON_CODE_150 = 50975 | XEvent.Severity.Error,
            COMMON_CODE_151 = 50976 | XEvent.Severity.Error,
            COMMON_CODE_152 = 50977 | XEvent.Severity.Error,
            COMMON_CODE_153 = 50978 | XEvent.Severity.Error,
            COMMON_CODE_154 = 50979 | XEvent.Severity.Error,
            COMMON_CODE_155 = 50980 | XEvent.Severity.Error,
            COMMON_CODE_156 = 50981 | XEvent.Severity.Error,
            COMMON_CODE_157 = 50982 | XEvent.Severity.Error,
            COMMON_CODE_158 = 50983 | XEvent.Severity.Error,
            COMMON_CODE_159 = 50984 | XEvent.Severity.Error,
            COMMON_CODE_160 = 50985 | XEvent.Severity.Error,
            COMMON_CODE_161 = 50986 | XEvent.Severity.Error,
            COMMON_CODE_162 = 50987 | XEvent.Severity.Error,
            COMMON_CODE_163 = 50988 | XEvent.Severity.Error,
            COMMON_CODE_164 = 50989 | XEvent.Severity.Error,
            COMMON_CODE_165 = 50990 | XEvent.Severity.Error,
            COMMON_CODE_166 = 50991 | XEvent.Severity.Error,
            COMMON_CODE_167 = 50992 | XEvent.Severity.Error,
            COMMON_CODE_168 = 50993 | XEvent.Severity.Error,
            COMMON_CODE_169 = 50994 | XEvent.Severity.Error,
            COMMON_CODE_170 = 50995 | XEvent.Severity.Error,
            COMMON_CODE_171 = 50996 | XEvent.Severity.Error,
            COMMON_CODE_172 = 50997 | XEvent.Severity.Error,
            COMMON_CODE_173 = 50998 | XEvent.Severity.Error,
            COMMON_CODE_174 = 50999 | XEvent.Severity.Error,
            COMMON_CODE_175 = 51000 | XEvent.Severity.Error,
            COMMON_CODE_176 = 51001 | XEvent.Severity.Error,
            COMMON_CODE_177 = 51002 | XEvent.Severity.Error,
            COMMON_CODE_178 = 51003 | XEvent.Severity.Error,
            COMMON_CODE_179 = 51004 | XEvent.Severity.Error,
            COMMON_CODE_180 = 51005 | XEvent.Severity.Error,
            COMMON_CODE_181 = 51006 | XEvent.Severity.Error,
            COMMON_CODE_182 = 51007 | XEvent.Severity.Error,
            COMMON_CODE_183 = 51008 | XEvent.Severity.Error,
            COMMON_CODE_184 = 51009 | XEvent.Severity.Error,
            COMMON_CODE_185 = 51010 | XEvent.Severity.Error,
            WEBSTORE_EXECUTE_ERROR = 51011 | XEvent.Severity.Error,
            WEBSTORE_EXECUTE_TIMEOUT_ERROR = 51012 | XEvent.Severity.Error,
            WEBSTORE_EXECUTE_DEADLOCK_ERROR = 51013 | XEvent.Severity.Error,
            COMMON_CODE_189 = 51014 | XEvent.Severity.Error,
            COMMON_CODE_190 = 51015 | XEvent.Severity.Error,
            COMMON_CODE_191 = 51016 | XEvent.Severity.Error,
            COMMON_CODE_192 = 51017 | XEvent.Severity.Error,
            COMMON_CODE_193 = 51018 | XEvent.Severity.Error,
            COMMON_CODE_194 = 51019 | XEvent.Severity.Error,
            COMMON_CODE_195 = 51020 | XEvent.Severity.Error,
            COMMON_CODE_196 = 51021 | XEvent.Severity.Error,
            COMMON_CODE_197 = 51022 | XEvent.Severity.Error,
            COMMON_CODE_198 = 51023 | XEvent.Severity.Error,
            COMMON_CODE_199 = 51024 | XEvent.Severity.Error,
            COMMON_CODE_200 = 51025 | XEvent.Severity.Error,
            DEPRECATED_SYNCCAST_EXTERNAL_EXCEPTION = 51030 | XEvent.Severity.Error,
            COMMON_CODE_208 = 51033 | XEvent.Severity.Error,
            COMMON_CODE_209 = 51034 | XEvent.Severity.Error,
            COMMON_CODE_210 = 51035 | XEvent.Severity.Error,
            COMMON_CODE_211 = 51036 | XEvent.Severity.Error,
            COMMON_CODE_212 = 51037 | XEvent.Severity.Error,
            COMMON_CODE_213 = 51038 | XEvent.Severity.Error,
            COMMON_CODE_214 = 51039 | XEvent.Severity.Error,
            COMMON_CODE_215 = 51040 | XEvent.Severity.Error,
            COMMON_CODE_216 = 51041 | XEvent.Severity.Error,
            COMMON_CODE_217 = 51042 | XEvent.Severity.Error,
            COMMON_CODE_218 = 51043 | XEvent.Severity.Error,
            COMMON_CODE_219 = 51044 | XEvent.Severity.Error,
            COMMON_CODE_220 = 51045 | XEvent.Severity.Error,
            COMMON_CODE_221 = 51046 | XEvent.Severity.Error,
            COMMON_CODE_222 = 51047 | XEvent.Severity.Error,
            COMMON_CODE_223 = 51048 | XEvent.Severity.Error,
            COMMON_CODE_224 = 51049 | XEvent.Severity.Error,
            COMMON_CODE_225 = 51050 | XEvent.Severity.Error,
            COMMON_CODE_226 = 51051 | XEvent.Severity.Error,
            COMMON_CODE_227 = 51052 | XEvent.Severity.Error,
            COMMON_CODE_228 = 51053 | XEvent.Severity.Error,
            DEPRECATED_COMMON_CODE_229 = 51054 | XEvent.Severity.Error,
            DEPRECATED_COMMON_CODE_230 = 51055 | XEvent.Severity.Error,
            COMMON_CODE_231 = 51056 | XEvent.Severity.Error,
            COMMON_CODE_232 = 51057 | XEvent.Severity.Error,
            WMIS_EXTERNAL_EXCEPTION = 51058 | XEvent.Severity.Error,
            COMMON_CODE_MATCH_STARTMIGRATE_FAILED = 51059 | XEvent.Severity.Error,
            COMMON_CODE_MATCH_MIGRATESTATUS_FAILED_SPROC = 51060 | XEvent.Severity.Error,
            COMMON_CODE_MATCH_UPDLTC_TV_FAILED = 51061 | XEvent.Severity.Error,
            COMMON_CODE_MATCH_UPDLTC_NPDB_FAILED = 51062 | XEvent.Severity.Error,
            COMMON_CODE_LSPLIB_SQLEXCEPTION = 51063 | XEvent.Severity.Error,
            HEALTH_REPORT_RED = 51064 | XEvent.Severity.Error,
            HEALTH_ENGINE_FAILURE = 51065 | XEvent.Severity.Error,
            FEAPP_INITIALIZATION_METHOD_FAILED = 51066 | XEvent.Severity.Error,
            FEAPP_INITIALIZATION_METHOD_NOT_FOUND = 51067 | XEvent.Severity.Error,
            FAST_FAIL_MISSING_COUNTERS = 51068 | XEvent.Severity.Error,
            FAST_FAIL_MISSING_RESOURCE = 51069 | XEvent.Severity.Error,
            FEAPP_COMPRESSION_ERROR = 51070 | XEvent.Severity.Error,
            UNHANDLED_THREAD_EXCEPTION = 51071 | XEvent.Severity.Error,
            FEAPP_INIT_FAILURE = 51072 | XEvent.Severity.Error,
            FORBIDDEN_NAMES_EXCLUDED_TITLES_CONFIG_ERROR = 51073 | XEvent.Severity.Error,
            COMMON_COMM_6 = 51231 | XEvent.Severity.Error,
            COMMON_COMM_7 = 51232 | XEvent.Severity.Error,
            COMMON_COMM_8 = 51233 | XEvent.Severity.Error,
            COMMON_COMM_9 = 51234 | XEvent.Severity.Error,
            COMMON_COMM_10 = 51235 | XEvent.Severity.Error,
            COMMON_COMM_11 = 51236 | XEvent.Severity.Error,
            COMMON_COMM_12 = 51237 | XEvent.Severity.Error,
            COMMON_COMM_13 = 51238 | XEvent.Severity.Error,
            XCACHE_CLIENT_BROKEN_PIPE = 51239 | XEvent.Severity.Error,
            XCACHE_CLIENT_BROKEN_PIPE_1 = 51240 | XEvent.Severity.Error,
            XCACHE_CLIENT_BROKEN_PIPE_2 = 51241 | XEvent.Severity.Error,
            XCACHE_CLIENT_BROKEN_PIPE_3 = 51242 | XEvent.Severity.Error,
            XCACHE_CLIENT_BROKEN_PIPE_4 = 51243 | XEvent.Severity.Error,
            XCACHE_SERVER_BUSY = 51244 | XEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE = 51245 | XEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_1 = 51246 | XEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_2 = 51247 | XEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_3 = 51248 | XEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_4 = 51249 | XEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_5 = 51250 | XEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_6 = 51251 | XEvent.Severity.Error,
            PIPE_FAILURE = 51252 | XEvent.Severity.Error,
            PIPE_FAILURE_1 = 51253 | XEvent.Severity.Error,
            PIPE_FAILURE_2 = 51254 | XEvent.Severity.Error,
            AUTHDATA_SG_COMMUNICATION_ERROR = 51255 | XEvent.Severity.Error,
            COMMON_COMM_31 = 51256 | XEvent.Severity.Error,
            AUTHDATA_SG_COMMUNICATION_ERROR_1 = 51257 | XEvent.Severity.Error,
            MC_XRL_REQUEST_ERROR = 51258 | XEvent.Severity.Error,
            COMMON_COMM_34 = 51259 | XEvent.Severity.Error,
            COMMON_COMM_35 = 51260 | XEvent.Severity.Error,
            COMMON_COMM_36 = 51261 | XEvent.Severity.Error,
            XCACHE_INVALID_MESSAGE_7 = 51262 | XEvent.Severity.Error,
            XCACHE_INVALID_RESPONSE_1 = 51263 | XEvent.Severity.Error,
            FORBIDDEN_NAMES_LOAD_SUCCESS = 51264 | XEvent.Severity.Info,
            FORBIDDEN_NAMES_UNVETTED_STRING = 51265 | XEvent.Severity.Error,
            MUSICNET_ACCOUNT_CREATE_FAILED = 51354 | XEvent.Severity.Error,
            COMMON_CONFIG_69 = 51394 | XEvent.Severity.Warning,
            COMMON_CONFIG_70 = 51395 | XEvent.Severity.Error,
            COMMON_CONFIG_71 = 51396 | XEvent.Severity.Warning,
            COMMON_CONFIG_72 = 51397 | XEvent.Severity.Warning,
            COMMON_CONFIG_73 = 51398 | XEvent.Severity.Warning,
            COMMON_CONFIG_74 = 51399 | XEvent.Severity.Warning,
            COMMON_CONFIG_75 = 51400 | XEvent.Severity.Warning,
            COMMON_CONFIG_76 = 51401 | XEvent.Severity.Warning,
            COMMON_CONFIG_77 = 51402 | XEvent.Severity.Warning,
            COMMON_CONFIG_78 = 51403 | XEvent.Severity.Error,
            COMMON_CONFIG_79 = 51404 | XEvent.Severity.Warning,
            COMMON_CONFIG_80 = 51405 | XEvent.Severity.Warning,
            COMMON_CONFIG_81 = 51406 | XEvent.Severity.Warning,
            COMMON_CONFIG_82 = 51407 | XEvent.Severity.Warning,
            COMMON_CONFIG_83 = 51408 | XEvent.Severity.Warning,
            COMMON_CONFIG_84 = 51409 | XEvent.Severity.Error,
            COMMON_CONFIG_85 = 51410 | XEvent.Severity.Error,
            COMMON_CONFIG_86 = 51411 | XEvent.Severity.Error,
            COMMON_CONFIG_87 = 51412 | XEvent.Severity.Error,
            COMMON_CONFIG_88 = 51413 | XEvent.Severity.Error,
            COMMON_CONFIG_89 = 51414 | XEvent.Severity.Error,
            COMMON_CONFIG_90 = 51415 | XEvent.Severity.Error,
            COMMON_CONFIG_91 = 51416 | XEvent.Severity.Error,
            COMMON_CONFIG_92 = 51417 | XEvent.Severity.Error,
            COMMON_CONFIG_93 = 51418 | XEvent.Severity.Error,
            COMMON_CONFIG_94 = 51419 | XEvent.Severity.Error,
            COMMON_CONFIG_95 = 51420 | XEvent.Severity.Error,
            COMMON_CONFIG_96 = 51421 | XEvent.Severity.Error,
            COMMON_CONFIG_97 = 51422 | XEvent.Severity.Error,
            COMMON_CONFIG_98 = 51423 | XEvent.Severity.Error,
            COMMON_CONFIG_99 = 51424 | XEvent.Severity.Error,
            COMMON_CONFIG_100 = 51425 | XEvent.Severity.Error,
            COMMON_CONFIG_101 = 51426 | XEvent.Severity.Error,
            COMMON_CONFIG_102 = 51427 | XEvent.Severity.Error,
            COMMON_CONFIG_103 = 51428 | XEvent.Severity.Error,
            COMMON_CONFIG_104 = 51429 | XEvent.Severity.Error,
            COMMON_CONFIG_105 = 51430 | XEvent.Severity.Error,
            COMMON_CONFIG_106 = 51431 | XEvent.Severity.Error,
            COMMON_CONFIG_107 = 51432 | XEvent.Severity.Error,
            COMMON_CONFIG_108 = 51433 | XEvent.Severity.Error,
            COMMON_CONFIG_109 = 51434 | XEvent.Severity.Warning,
            COMMON_CONFIG_110 = 51435 | XEvent.Severity.Error,
            COMMON_CONFIG_111 = 51436 | XEvent.Severity.Error,
            COMMON_CONFIG_112 = 51437 | XEvent.Severity.Error,
            COMMON_CONFIG_113 = 51438 | XEvent.Severity.Error,
            COMMON_CONFIG_114 = 51439 | XEvent.Severity.Error,
            COMMON_CONFIG_115 = 51440 | XEvent.Severity.Error,
            COMMON_CONFIG_116 = 51441 | XEvent.Severity.Error,
            COMMON_CONFIG_117 = 51442 | XEvent.Severity.Error,
            COMMON_CONFIG_118 = 51443 | XEvent.Severity.Error,
            COMMON_CONFIG_119 = 51444 | XEvent.Severity.Error,
            COMMON_CONFIG_120 = 51445 | XEvent.Severity.Error,
            COMMON_CONFIG_121 = 51446 | XEvent.Severity.Error,
            COMMON_CONFIG_122 = 51447 | XEvent.Severity.Error,
            COMMON_CONFIG_123 = 51448 | XEvent.Severity.Error,
            COMMON_CONFIG_124 = 51449 | XEvent.Severity.Error,
            COMMON_CONFIG_125 = 51450 | XEvent.Severity.Error,
            COMMON_CONFIG_126 = 51451 | XEvent.Severity.Error,
            COMMON_CONFIG_127 = 51452 | XEvent.Severity.Error,
            COMMON_CONFIG_128 = 51453 | XEvent.Severity.Error,
            COMMON_CONFIG_129 = 51454 | XEvent.Severity.Error,
            COMMON_CONFIG_130 = 51455 | XEvent.Severity.Error,
            COMMON_CONFIG_131 = 51456 | XEvent.Severity.Error,
            COMMON_CONFIG_132 = 51457 | XEvent.Severity.Error,
            COMMON_CONFIG_133 = 51458 | XEvent.Severity.Error,
            COMMON_CONFIG_134 = 51459 | XEvent.Severity.Warning,
            COMMON_CONFIG_135 = 51460 | XEvent.Severity.Error,
            COMMON_CONFIG_136 = 51461 | XEvent.Severity.Error,
            COMMON_CONFIG_137 = 51462 | XEvent.Severity.Error,
            COMMON_CONFIG_138 = 51463 | XEvent.Severity.Error,
            COMMON_CONFIG_139 = 51464 | XEvent.Severity.Error,
            COMMON_CONFIG_140 = 51465 | XEvent.Severity.Error,
            COMMON_CONFIG_141 = 51466 | XEvent.Severity.Error,
            COMMON_CONFIG_142 = 51467 | XEvent.Severity.Error,
            COMMON_CONFIG_143 = 51468 | XEvent.Severity.Error,
            COMMON_CONFIG_144 = 51469 | XEvent.Severity.Error,
            COMMON_CONFIG_145 = 51470 | XEvent.Severity.Error,
            COMMON_CONFIG_146 = 51471 | XEvent.Severity.Warning,
            COMMON_CONFIG_147 = 51472 | XEvent.Severity.Error,
            COMMON_CONFIG_148 = 51473 | XEvent.Severity.Error,
            COMMON_CONFIG_149 = 51474 | XEvent.Severity.Error,
            COMMON_CONFIG_150 = 51475 | XEvent.Severity.Error,
            COMMON_CONFIG_151 = 51476 | XEvent.Severity.Error,
            COMMON_CONFIG_152 = 51477 | XEvent.Severity.Error,
            COMMON_CONFIG_153 = 51478 | XEvent.Severity.Error,
            COMMON_CONFIG_154 = 51479 | XEvent.Severity.Error,
            COMMON_CONFIG_155 = 51480 | XEvent.Severity.Error,
            COMMON_CONFIG_156 = 51481 | XEvent.Severity.Error,
            COMMON_CONFIG_157 = 51482 | XEvent.Severity.Error,
            COMMON_CONFIG_158 = 51483 | XEvent.Severity.Error,
            COMMON_CONFIG_159 = 51484 | XEvent.Severity.Error,
            COMMON_CONFIG_160 = 51485 | XEvent.Severity.Error,
            COMMON_CONFIG_161 = 51486 | XEvent.Severity.Error,
            COMMON_CONFIG_162 = 51487 | XEvent.Severity.Error,
            COMMON_CONFIG_163 = 51488 | XEvent.Severity.Error,
            COMMON_CONFIG_164 = 51489 | XEvent.Severity.Error,
            COMMON_CONFIG_165 = 51490 | XEvent.Severity.Error,
            COMMON_CONFIG_166 = 51491 | XEvent.Severity.Error,
            COMMON_CONFIG_167 = 51492 | XEvent.Severity.Error,
            COMMON_CONFIG_168 = 51493 | XEvent.Severity.Error,
            COMMON_CONFIG_169 = 51494 | XEvent.Severity.Error,
            COMMON_CONFIG_170 = 51495 | XEvent.Severity.Warning,
            COMMON_CONFIG_171 = 51496 | XEvent.Severity.Error,
            COMMON_CONFIG_172 = 51497 | XEvent.Severity.Error,
            COMMON_CONFIG_173 = 51498 | XEvent.Severity.Error,
            COMMON_CONFIG_174 = 51499 | XEvent.Severity.Warning,
            COMMON_CONFIG_175 = 51500 | XEvent.Severity.Error,
            COMMON_CONFIG_176 = 51501 | XEvent.Severity.Error,
            COMMON_CONFIG_177 = 51502 | XEvent.Severity.Warning,
            COMMON_CONFIG_178 = 51503 | XEvent.Severity.Error,
            COMMON_CONFIG_179 = 51504 | XEvent.Severity.Error,
            COMMON_CONFIG_180 = 51505 | XEvent.Severity.Warning,
            COMMON_CONFIG_181 = 51506 | XEvent.Severity.Error,
            COMMON_CONFIG_182 = 51507 | XEvent.Severity.Error,
            COMMON_CONFIG_183 = 51508 | XEvent.Severity.Error,
            COMMON_CONFIG_184 = 51509 | XEvent.Severity.Error,
            COMMON_CONFIG_185 = 51510 | XEvent.Severity.Error,
            COMMON_CONFIG_186 = 51511 | XEvent.Severity.Error,
            COMMON_CONFIG_187 = 51512 | XEvent.Severity.Error,
            COMMON_CONFIG_188 = 51513 | XEvent.Severity.Error,
            COMMON_CONFIG_189 = 51514 | XEvent.Severity.Error,
            COMMON_CONFIG_190 = 51515 | XEvent.Severity.Error,
            COMMON_CONFIG_191 = 51516 | XEvent.Severity.Error,
            COMMON_CONFIG_192 = 51517 | XEvent.Severity.Error,
            COMMON_CONFIG_193 = 51518 | XEvent.Severity.Error,
            COMMON_CONFIG_194 = 51519 | XEvent.Severity.Error,
            COMMON_CONFIG_195 = 51520 | XEvent.Severity.Error,
            COMMON_CONFIG_196 = 51521 | XEvent.Severity.Error,
            COMMON_CONFIG_197 = 51522 | XEvent.Severity.Error,
            COMMON_CONFIG_198 = 51523 | XEvent.Severity.Error,
            COMMON_CONFIG_199 = 51524 | XEvent.Severity.Error,
            COMMON_CONFIG_200 = 51525 | XEvent.Severity.Error,
            COMMON_CONFIG_201 = 51526 | XEvent.Severity.Error,
            COMMON_CONFIG_202 = 51527 | XEvent.Severity.Error,
            COMMON_CONFIG_203 = 51528 | XEvent.Severity.Error,
            COMMON_CONFIG_204 = 51529 | XEvent.Severity.Error,
            COMMON_CONFIG_205 = 51530 | XEvent.Severity.Error,
            COMMON_CONFIG_206 = 51531 | XEvent.Severity.Error,
            COMMON_CONFIG_207 = 51532 | XEvent.Severity.Error,
            COMMON_CONFIG_208 = 51533 | XEvent.Severity.Error,
            COMMON_CONFIG_209 = 51534 | XEvent.Severity.Error,
            COMMON_CONFIG_210 = 51535 | XEvent.Severity.Error,
            COMMON_CONFIG_211 = 51536 | XEvent.Severity.Error,
            COMMON_CONFIG_212 = 51537 | XEvent.Severity.Error,
            COMMON_CONFIG_213 = 51538 | XEvent.Severity.Error,
            COMMON_CONFIG_214 = 51539 | XEvent.Severity.Error,
            COMMON_CONFIG_215 = 51540 | XEvent.Severity.Error,
            COMMON_CONFIG_216 = 51541 | XEvent.Severity.Error,
            COMMON_CONFIG_217 = 51542 | XEvent.Severity.Error,
            COMMON_CONFIG_218 = 51543 | XEvent.Severity.Error,
            COMMON_CONFIG_219 = 51544 | XEvent.Severity.Error,
            COMMON_CONFIG_220 = 51545 | XEvent.Severity.Error,
            COMMON_CONFIG_221 = 51546 | XEvent.Severity.Error,
            COMMON_CONFIG_222 = 51547 | XEvent.Severity.Error,
            COMMON_CONFIG_223 = 51548 | XEvent.Severity.Error,
            COMMON_CONFIG_224 = 51549 | XEvent.Severity.Error,
            COMMON_CONFIG_225 = 51550 | XEvent.Severity.Error,
            COMMON_CONFIG_226 = 51551 | XEvent.Severity.Error,
            COMMON_CONFIG_227 = 51552 | XEvent.Severity.Error,
            COMMON_CONFIG_228 = 51553 | XEvent.Severity.Error,
            COMMON_CONFIG_229 = 51554 | XEvent.Severity.Error,
            COMMON_CONFIG_230 = 51555 | XEvent.Severity.Error,
            COMMON_CONFIG_231 = 51556 | XEvent.Severity.Error,
            COMMON_CONFIG_232 = 51557 | XEvent.Severity.Error,
            COMMON_CONFIG_233 = 51558 | XEvent.Severity.Error,
            COMMON_CONFIG_234 = 51559 | XEvent.Severity.Error,
            COMMON_CONFIG_235 = 51560 | XEvent.Severity.Error,
            COMMON_CONFIG_236 = 51561 | XEvent.Severity.Error,
            COMMON_CONFIG_237 = 51562 | XEvent.Severity.Error,
            COMMON_CONFIG_238 = 51563 | XEvent.Severity.Error,
            COMMON_CONFIG_239 = 51564 | XEvent.Severity.Error,
            COMMON_CONFIG_240 = 51565 | XEvent.Severity.Error,
            COMMON_CONFIG_241 = 51566 | XEvent.Severity.Error,
            COMMON_CONFIG_242 = 51567 | XEvent.Severity.Error,
            COMMON_CONFIG_243 = 51568 | XEvent.Severity.Error,
            COMMON_CONFIG_244 = 51569 | XEvent.Severity.Error,
            COMMON_CONFIG_245 = 51570 | XEvent.Severity.Warning,
            COMMON_CONFIG_246 = 51571 | XEvent.Severity.Warning,
            COMMON_CONFIG_247 = 51572 | XEvent.Severity.Error,
            COMMON_CONFIG_248 = 51573 | XEvent.Severity.Error,
            COMMON_CONFIG_249 = 51574 | XEvent.Severity.Error,
            COMMON_CONFIG_250 = 51575 | XEvent.Severity.Error,
            DEPRECATED_COMMON_CONFIG_251 = 51576 | XEvent.Severity.Error,
            COMMON_CONFIG_252 = 51577 | XEvent.Severity.Error,
            COMMON_CONFIG_253 = 51578 | XEvent.Severity.Warning,
            COMMON_CONFIG_254 = 51579 | XEvent.Severity.Error,
            COMMON_CONFIG_255 = 51580 | XEvent.Severity.Error,
            COMMON_CONFIG_256 = 51581 | XEvent.Severity.Error,
            COMMON_CONFIG_257 = 51582 | XEvent.Severity.Error,
            COMMON_CONFIG_258 = 51583 | XEvent.Severity.Error,
            COMMON_CONFIG_259 = 51584 | XEvent.Severity.Warning,
            COMMON_CONFIG_260 = 51585 | XEvent.Severity.Warning,
            COMMON_CONFIG_261 = 51586 | XEvent.Severity.Error,
            COMMON_CONFIG_262 = 51587 | XEvent.Severity.Error,
            COMMON_CONFIG_263 = 51588 | XEvent.Severity.Error,
            COMMON_CONFIG_264 = 51589 | XEvent.Severity.Error,
            COMMON_CONFIG_265 = 51590 | XEvent.Severity.Error,
            COMMON_CONFIG_266 = 51591 | XEvent.Severity.Warning,
            COMMON_CONFIG_PIPE_HANDLE_DISPOSED = 51593 | XEvent.Severity.Error,
            COMMON_CONFIG_270 = 51595 | XEvent.Severity.Error,
            COMMON_CONFIG_272 = 51597 | XEvent.Severity.Error,
            COMMON_CONFIG_274 = 51599 | XEvent.Severity.Error,
            MC_SGINFO_IS_OFF = 51600 | XEvent.Severity.Warning,
            COMMON_CONFIG_276 = 51601 | XEvent.Severity.Error,
            COMMON_CONFIG_277 = 51602 | XEvent.Severity.Error,
            COMMON_CONFIG_278 = 51603 | XEvent.Severity.Error,
            MC_BAD_CONFIG_DATA_4 = 51604 | XEvent.Severity.Error,
            MC_BAD_CONFIG_DATA_5 = 51605 | XEvent.Severity.Error,
            MC_BAD_CONFIG_DATA_6 = 51606 | XEvent.Severity.Error,
            MC_BAD_CONFIG_DATA_7 = 51607 | XEvent.Severity.Error,
            COMMON_CONFIG_283 = 51608 | XEvent.Severity.Error,
            COMMON_CONFIG_284 = 51609 | XEvent.Severity.Error,
            MC_BAD_CONFIG_DATA_8 = 51610 | XEvent.Severity.Error,
            COMMON_CONFIG_286 = 51611 | XEvent.Severity.Error,
            COMMON_CONFIG_287 = 51612 | XEvent.Severity.Error,
            COMMON_CONFIG_288 = 51613 | XEvent.Severity.Error,
            MGMT_CRITICAL_ERROR = 51614 | XEvent.Severity.Error,
            MGMT_INIT_FAILURE = 51615 | XEvent.Severity.Error,
            COMMON_CONFIG_291 = 51616 | XEvent.Severity.Error,
            COMMON_CONFIG_292 = 51617 | XEvent.Severity.Error,
            COMMON_CONFIG_293 = 51618 | XEvent.Severity.Error,
            MGMT_INIT_FAILURE_1 = 51619 | XEvent.Severity.Error,
            MGMT_INIT_FAILURE_2 = 51620 | XEvent.Severity.Error,
            MGMT_INIT_FAILURE_3 = 51621 | XEvent.Severity.Error,
            MGMT_INIT_WARNING = 51622 | XEvent.Severity.Warning,
            MGMT_INIT_FAILURE_4 = 51623 | XEvent.Severity.Error,
            MGMT_SRV_DISCONNECT = 51624 | XEvent.Severity.Error,
            MGMT_SRV_DISCONNECT_1 = 51625 | XEvent.Severity.Error,
            MGMT_INIT_FAILURE_5 = 51626 | XEvent.Severity.Error,
            MGMT_INIT_FAILURE_6 = 51627 | XEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING = 51628 | XEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_1 = 51629 | XEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_2 = 51630 | XEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_3 = 51631 | XEvent.Severity.Error,
            COMMON_CONFIG_307 = 51632 | XEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_4 = 51633 | XEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_5 = 51634 | XEvent.Severity.Error,
            COMMON_CONFIG_310 = 51635 | XEvent.Severity.Error,
            COMMON_CONFIG_311 = 51636 | XEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_6 = 51637 | XEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_7 = 51638 | XEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_8 = 51639 | XEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_9 = 51640 | XEvent.Severity.Error,
            MGMT_SUBCOMPONENT_WARNING_10 = 51641 | XEvent.Severity.Error,
            MGMT_REMOTE_TARGET_WARNING = 51642 | XEvent.Severity.Warning,
            COMMON_CONFIG_318 = 51643 | XEvent.Severity.Error,
            COMMON_CONFIG_319 = 51644 | XEvent.Severity.Error,
            COMMON_CONFIG_320 = 51645 | XEvent.Severity.Error,
            COMMON_CONFIG_321 = 51646 | XEvent.Severity.Error,
            COMMON_CONFIG_322 = 51647 | XEvent.Severity.Error,
            COMMON_CONFIG_323 = 51648 | XEvent.Severity.Error,
            COMMON_CONFIG_324 = 51649 | XEvent.Severity.Error,
            COMMON_CONFIG_325 = 51650 | XEvent.Severity.Error,
            COMMON_CONFIG_326 = 51651 | XEvent.Severity.Error,
            COMMON_CONFIG_327 = 51652 | XEvent.Severity.Error,
            COMMON_CONFIG_328 = 51653 | XEvent.Severity.Error,
            COMMON_CONFIG_329 = 51654 | XEvent.Severity.Error,
            COMMON_CONFIG_330 = 51655 | XEvent.Severity.Error,
            COMMON_CONFIG_331 = 51656 | XEvent.Severity.Error,
            COMMON_CONFIG_332 = 51657 | XEvent.Severity.Error,
            COMMON_CONFIG_333 = 51658 | XEvent.Severity.Error,
            COMMON_CONFIG_334 = 51659 | XEvent.Severity.Error,
            COMMON_CONFIG_335 = 51660 | XEvent.Severity.Error,
            COMMON_CONFIG_336 = 51661 | XEvent.Severity.Error,
            COMMON_CONFIG_337 = 51662 | XEvent.Severity.Error,
            COMMON_CONFIG_338 = 51663 | XEvent.Severity.Error,
            COMMON_CONFIG_339 = 51664 | XEvent.Severity.Error,
            MGMT_INIT_FAILURE_7 = 51665 | XEvent.Severity.Error,
            MGMT_INIT_FAILURE_8 = 51666 | XEvent.Severity.Error,
            MGMT_INIT_FAILURE_9 = 51667 | XEvent.Severity.Error,
            COMMON_CONFIG_INTEROP_REPORTMESSAGECOMPONENTID_FAILURE = 51668 | XEvent.Severity.Error,
            COMMON_CONFIG_INTEROP_ADDREPORTMESSAGECOMPONENTIDMAPPING_FAILURE = 51669 | XEvent.Severity.Error,
            COMMON_CONFIG_INTEROP_REPORTMESSAGECLEANSERVIRTUALINTERFACE_FAILURE = 51670 | XEvent.Severity.Error,
            COMMON_CONFIG_340 = 51671 | XEvent.Severity.Error,
            MGMT_READ_FAILURE = 51672 | XEvent.Severity.Error,
            COMMON_CONFIG_BAD_XLAST_FILE = 51674 | XEvent.Severity.Error,
            COMMON_CONFIG_MATCH_LTC_TIB_COUNTS_OUTOFSYNC = 51675 | XEvent.Severity.Error,
            COMMON_CONFIG_MATCH_LTC_TIB_SERVERS_OUTOFSYNC_1 = 51676 | XEvent.Severity.Error,
            COMMON_CONFIG_MATCH_LTC_TIB_SERVERS_OUTOFSYNC_2 = 51677 | XEvent.Severity.Error,
            COMMON_CONFIG_MATCH_LTC_TIB_OUTOFSYNC = 51678 | XEvent.Severity.Error,
            COMMON_CONFIG_MATCH_UNEXPECTED_MODE_IN_XLAST = 51679 | XEvent.Severity.Error,
            COMMON_CONFIG_MATCH_MISSING_MODE_IN_XLAST = 51680 | XEvent.Severity.Error,
            COMMON_CONFIG_MATCH_ENDMIGRATE_FAILED_NONEXT = 51681 | XEvent.Severity.Error,
            COMMON_CONFIG_MATCH_ENDMIGRATE_FAILED_MISSING_BUCKET = 51682 | XEvent.Severity.Error,
            COMMON_CONFIG_MATCH_EXPMIGRATE_FAILED_NOTSTARTED = 51683 | XEvent.Severity.Error,
            COMMON_CONFIG_MATCH_ENDMIGRATE_FAILED_LTC_TIB_OUTOFSYNC = 51684 | XEvent.Severity.Error,
            COMMON_CONFIG_MATCH_ADDRR_FAILED_MISSING_BUCKET = 51685 | XEvent.Severity.Error,
            COMMON_CONFIG_MATCH_ADDRR_FAILED_DUPE_SERVER = 51686 | XEvent.Severity.Error,
            COMMON_CONFIG_MATCH_UPDLTC_INVALID_LTC = 51687 | XEvent.Severity.Error,
            COMMON_CONFIG_MATCH_DEFAULTBUCKETS_OVERWRITE = 51688 | XEvent.Severity.Error,
            COMMON_CONFIG_MATCH_CONFIRMSERVER_BADSERVER = 51689 | XEvent.Severity.Error,
            COMMON_CONFIG_MATCH_PREPLTC_TID_MISMATCH = 51690 | XEvent.Severity.Error,
            COMMON_CONFIG_MATCH_NO_PARTMAP = 51691 | XEvent.Severity.Error,
            COMMON_CONFIG_MATCH_PREPCONFIG_TID_MISMATCH = 51692 | XEvent.Severity.Error,
            COMMON_CONFIG_GET_REFRESH_FUNCTIONS = 51693 | XEvent.Severity.Error,
            COMMON_CONFIG_HEALTH_CHANGE = 51694 | XEvent.Severity.Error,
            COMMON_SETTING_BATCH_CONSTRUCTION = 51695 | XEvent.Severity.Error,
            COMMON_SETTING_BATCH_QUERY = 51696 | XEvent.Severity.Error,
            COMMON_SETTING_BATCH_SETTING_DELETED = 51697 | XEvent.Severity.Error,
            COMMON_CONFIG_REGISTER_DYNAMIC_SETTING_FAILURE = 51698 | XEvent.Severity.Error,
            COMMON_BUCKETS_BATCH_CONSTRUCTION = 51699 | XEvent.Severity.Error,
            COMMON_BUCKET_BATCH_QUERY = 51700 | XEvent.Severity.Error,
            COMMON_BUCKET_BATCH_DELETED = 51701 | XEvent.Severity.Error,
            COMMON_CONFIG_LIVE_REGISTRY_SETTINGS_CHANGE = 51702 | XEvent.Severity.Error,
            PERFORMANCE_COUNTERS_0 = 51703 | XEvent.Severity.Error,
            COMMON_HACK_4 = 52329 | XEvent.Severity.Warning,
            COMMON_HACK_5 = 52330 | XEvent.Severity.Warning,
            COMMON_HACK_6 = 52331 | XEvent.Severity.Warning,
            COMMON_HACK_7 = 52332 | XEvent.Severity.Warning,
            COMMON_HACK_8 = 52333 | XEvent.Severity.Warning,
            COMMON_HACK_9 = 52334 | XEvent.Severity.Warning,
            COMMON_HACK_10 = 52335 | XEvent.Severity.Warning,
            COMMON_HACK_11 = 52336 | XEvent.Severity.Warning,
            COMMON_HACK_12 = 52337 | XEvent.Severity.Warning,
            COMMON_HACK_13 = 52338 | XEvent.Severity.Warning,
            COMMON_HACK_14 = 52339 | XEvent.Severity.Warning,
            COMMON_HACK_15 = 52340 | XEvent.Severity.Warning,
            COMMON_HACK_16 = 52341 | XEvent.Severity.Warning,
            COMMON_HACK_17 = 52342 | XEvent.Severity.Warning,
            COMMON_HACK_18 = 52343 | XEvent.Severity.Warning,
            COMMON_HACK_19 = 52344 | XEvent.Severity.Warning,
            COMMON_HACK_20 = 52345 | XEvent.Severity.Warning,
            COMMON_HACK_21 = 52346 | XEvent.Severity.Warning,
            COMMON_HACK_22 = 52347 | XEvent.Severity.Warning,
            COMMON_HACK_23 = 52348 | XEvent.Severity.Warning,
            COMMON_HACK_24 = 52349 | XEvent.Severity.Warning,
            COMMON_HACK_25 = 52350 | XEvent.Severity.Warning,
            COMMON_HACK_26 = 52351 | XEvent.Severity.Warning,
            COMMON_HACK_27 = 52352 | XEvent.Severity.Warning,
            COMMON_HACK_28 = 52353 | XEvent.Severity.Warning,
            COMMON_HACK_33 = 52358 | XEvent.Severity.Warning,
            COMMON_HACK_34 = 52359 | XEvent.Severity.Warning,
            COMMON_HACK_40 = 52365 | XEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS = 52366 | XEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_1 = 52367 | XEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_2 = 52368 | XEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_3 = 52369 | XEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_4 = 52370 | XEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_5 = 52371 | XEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_6 = 52372 | XEvent.Severity.Warning,
            AUTHDATA_BAD_TEAM_TICKETS_7 = 52373 | XEvent.Severity.Warning,
            AUTHDATA_BAD_BUNDLED_AUTHDATA = 52374 | XEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR = 52375 | XEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_1 = 52376 | XEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_2 = 52377 | XEvent.Severity.Warning,
            AUTHDATA_BAD_HTTP_AUTHDATA = 52378 | XEvent.Severity.Warning,
            AUTHDATA_BAD_SG_AUTHDATA = 52379 | XEvent.Severity.Warning,
            AUTHDATA_BAD_SG_AUTHDATA_1 = 52380 | XEvent.Severity.Warning,
            AUTHDATA_BAD_SG_AUTHDATA_2 = 52381 | XEvent.Severity.Warning,
            AUTHDATA_BAD_SG_AUTHDATA_3 = 52382 | XEvent.Severity.Warning,
            AUTHDATA_BAD_SG_AUTHDATA_4 = 52383 | XEvent.Severity.Warning,
            AUTHDATA_BAD_SG_AUTHDATA_5 = 52384 | XEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_3 = 52385 | XEvent.Severity.Warning,
            COMMON_HACK_61 = 52386 | XEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_4 = 52387 | XEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_5 = 52388 | XEvent.Severity.Warning,
            COMMON_HACK_64 = 52389 | XEvent.Severity.Warning,
            COMMON_HACK_65 = 52390 | XEvent.Severity.Warning,
            COMMON_HACK_66 = 52391 | XEvent.Severity.Warning,
            COMMON_HACK_67 = 52392 | XEvent.Severity.Warning,
            COMMON_HACK_68 = 52393 | XEvent.Severity.Warning,
            COMMON_HACK_69 = 52394 | XEvent.Severity.Warning,
            COMMON_HACK_70 = 52395 | XEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_6 = 52396 | XEvent.Severity.Warning,
            COMMON_HACK_72 = 52397 | XEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_7 = 52398 | XEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_8 = 52399 | XEvent.Severity.Warning,
            AUTHDATA_VERIFICATION_ERROR_9 = 52400 | XEvent.Severity.Warning,
            COMMON_HACK_76 = 52401 | XEvent.Severity.Warning,
            WIREDATA_END_OF_STREAM = 52402 | XEvent.Severity.Warning,
            COMMON_HACK_78 = 52403 | XEvent.Severity.Warning,
            COMMON_HACK_79 = 52404 | XEvent.Severity.Warning,
            COMMON_HACK_80 = 52405 | XEvent.Severity.Warning,
            HACK_CONTENT_NOT_FOUND = 52406 | XEvent.Severity.Warning,
            USER_AGENT_MISSING = 52412 | XEvent.Severity.Error,
            USER_AGENT_INVALID = 52413 | XEvent.Severity.Error,
            AAINFO_INVALID_REQUEST = 52414 | XEvent.Severity.Error,
            COMMON_HACK_81 = 52415 | XEvent.Severity.Error,
            AUTHDATA_VERIFICATION_ERROR_10 = 52416 | XEvent.Severity.Error,
            COMMON_INFO_4 = 52529 | XEvent.Severity.Info,
            COMMON_INFO_5 = 52530 | XEvent.Severity.Info,
            COMMON_INFO_6 = 52531 | XEvent.Severity.Info,
            COMMON_INFO_7 = 52532 | XEvent.Severity.Info,
            COMMON_INFO_8 = 52533 | XEvent.Severity.Info,
            COMMON_INFO_9 = 52534 | XEvent.Severity.Info,
            COMMON_INFO_10 = 52535 | XEvent.Severity.Info,
            COMMON_INFO_11 = 52536 | XEvent.Severity.Info,
            COMMON_INFO_12 = 52537 | XEvent.Severity.Info,
            COMMON_INFO_13 = 52538 | XEvent.Severity.Info,
            COMMON_INFO_14 = 52539 | XEvent.Severity.Info,
            COMMON_INFO_15 = 52540 | XEvent.Severity.Info,
            COMMON_INFO_16 = 52541 | XEvent.Severity.Info,
            COMMON_INFO_17 = 52542 | XEvent.Severity.Info,
            COMMON_INFO_18 = 52543 | XEvent.Severity.Info,
            COMMON_INFO_19 = 52544 | XEvent.Severity.Info,
            COMMON_INFO_20 = 52545 | XEvent.Severity.Info,
            COMMON_INFO_21 = 52546 | XEvent.Severity.Info,
            COMMON_INFO_22 = 52547 | XEvent.Severity.Info,
            COMMON_INFO_23 = 52548 | XEvent.Severity.Info,
            COMMON_INFO_24 = 52549 | XEvent.Severity.Info,
            COMMON_INFO_25 = 52550 | XEvent.Severity.Info,
            COMMON_INFO_26 = 52551 | XEvent.Severity.Info,
            COMMON_INFO_27 = 52552 | XEvent.Severity.Info,
            COMMON_INFO_28 = 52553 | XEvent.Severity.Info,
            COMMON_INFO_29 = 52554 | XEvent.Severity.Info,
            COMMON_INFO_30 = 52555 | XEvent.Severity.Info,
            COMMON_INFO_31 = 52556 | XEvent.Severity.Info,
            COMMON_INFO_32 = 52557 | XEvent.Severity.Info,
            COMMON_INFO_33 = 52558 | XEvent.Severity.Info,
            COMMON_INFO_34 = 52559 | XEvent.Severity.Info,
            COMMON_INFO_35 = 52560 | XEvent.Severity.Info,
            COMMON_INFO_36 = 52561 | XEvent.Severity.Info,
            COMMON_INFO_37 = 52562 | XEvent.Severity.Info,
            COMMON_INFO_38 = 52563 | XEvent.Severity.Info,
            COMMON_INFO_39 = 52564 | XEvent.Severity.Info,
            COMMON_INFO_40 = 52565 | XEvent.Severity.Info,
            MC_APPDOMAIN_STARTED = 52566 | XEvent.Severity.Info,
            MC_APPDOMAIN_STARTED_1 = 52567 | XEvent.Severity.Info,
            COMMON_INFO_43 = 52568 | XEvent.Severity.Info,
            COMMON_INFO_44 = 52569 | XEvent.Severity.Info,
            COMMON_INFO_45 = 52570 | XEvent.Severity.Info,
            COMMON_INFO_46 = 52571 | XEvent.Severity.Info,
            COMMON_INFO_47 = 52572 | XEvent.Severity.Info,
            COMMON_INFO_48 = 52573 | XEvent.Severity.Info,
            MGMT_SRV_CONNECTED = 52574 | XEvent.Severity.Info,
            REPORTINGTARGET_RECONNECTED = 52575 | XEvent.Severity.Info,
            CONFIG_CHANGE_PROCESSED = 52576 | XEvent.Severity.Info,
            HEALTH_REPORT_GREEN = 52577 | XEvent.Severity.Info,
            COMMON_CONFIG_INFO_HEALTH_CHANGE = 52578 | XEvent.Severity.Info,
            COMMON_SETTING_BATCH_COUNT = 52579 | XEvent.Severity.Info,
            COMMON_BUCKET_COUNT = 52580 | XEvent.Severity.Info,
            COMMON_CONFIG_INFO_LIVE_REGISTRY_SETTINGS_CHANGE = 52581 | XEvent.Severity.Info,
            COMMON_WARNING_0 = 52725 | XEvent.Severity.Warning,
            HEALTH_REPORT_YELLOW = 52726 | XEvent.Severity.Warning,
            AUDIT_INVALID_SUBSYSTEM = 63800 | XEvent.Severity.Error,
            AUDIT_NO_SETTING = 63801 | XEvent.Severity.Error,
            AUDIT_LOG_FAILURE = 63802 | XEvent.Severity.Error,
            MIX_COMMON_UNKNOWN_ERROR = 63083 | XEvent.Severity.Error,
            MIX_COMMON_ENTITYFRAMEWORK_CONNECTION_ERROR = 63084 | XEvent.Severity.Error,
            MC_BAD_CODE_15 = 63085 | XEvent.Severity.Error,
            MC_BAD_CODE_16 = 63086 | XEvent.Severity.Error,
            COMMON_USER_1 = 63087 | XEvent.Severity.Error,
            COMMON_USER_2 = 63089 | XEvent.Severity.Error,
            COMMON_USER_3 = 63090 | XEvent.Severity.Error,
            COMMON_CATALOG_1 = 63091 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR = 52750 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_1 = 52751 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_2 = 52752 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_3 = 52753 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_4 = 52754 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_5 = 52755 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_6 = 52756 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_7 = 52757 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_8 = 52758 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_9 = 52759 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_10 = 52760 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_11 = 52761 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_12 = 52762 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_13 = 52763 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_14 = 52764 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_15 = 52765 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_16 = 52766 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_17 = 52767 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_18 = 52768 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_19 = 52769 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_20 = 52770 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_21 = 52771 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_22 = 52772 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_23 = 52773 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_24 = 52774 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_25 = 52775 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_26 = 52776 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_27 = 52777 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_28 = 52778 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_29 = 52779 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_30 = 52780 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_31 = 52781 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_32 = 52782 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_33 = 52783 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_34 = 52784 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_35 = 52785 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_36 = 52786 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_37 = 52787 | XEvent.Severity.Error,
            MC_BAD_PARAMETER_4 = 52788 | XEvent.Severity.Error,
            MC_BAD_PARAMETER_5 = 52789 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_38 = 52790 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_39 = 52791 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_40 = 52792 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_41 = 52793 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_42 = 52794 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_43 = 52795 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_44 = 52796 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_ERROR_45 = 52797 | XEvent.Severity.Error,
            COMPS_CODE_48 = 52798 | XEvent.Severity.Error,
            COMPS_CODE_49 = 52799 | XEvent.Severity.Error,
            COMPS_CODE_50 = 52800 | XEvent.Severity.Error,
            COMPS_CODE_51 = 52801 | XEvent.Severity.Error,
            MC_XRL_REQUEST_ERROR_1 = 52850 | XEvent.Severity.Error,
            MC_XRL_REQUEST_ERROR_2 = 52851 | XEvent.Severity.Error,
            MC_XRL_REQUEST_ERROR_3 = 52852 | XEvent.Severity.Error,
            QUERY_BAD_DATA = 52875 | XEvent.Severity.Error,
            QUERY_BAD_DATA_1 = 52876 | XEvent.Severity.Error,
            QUERY_SERVER_HEALTH_WARNING = 52877 | XEvent.Severity.Warning,
            QUERY_BAD_DATA_2 = 52878 | XEvent.Severity.Error,
            QUERY_PLUGIN_CONFIG_ERROR = 52879 | XEvent.Severity.Error,
            QUERY_PLUGIN_CONFIG_ERROR_1 = 52880 | XEvent.Severity.Error,
            QUERY_BAD_DATA_3 = 52881 | XEvent.Severity.Error,
            QUERY_BAD_DATA_4 = 52882 | XEvent.Severity.Error,
            QUERY_BAD_DATA_5 = 52883 | XEvent.Severity.Error,
            QUERY_BAD_DATA_6 = 52884 | XEvent.Severity.Error,
            COMPS_CONFIG_10 = 52885 | XEvent.Severity.Error,
            MGMT_TITLE_LOG_ERROR = 52886 | XEvent.Severity.Error,
            MGMT_TITLE_LOG_ERROR_1 = 52887 | XEvent.Severity.Error,
            CRON_CONFIG_FAILURE = 52888 | XEvent.Severity.Error,
            CRON_CONFIG_FAILURE_1 = 52889 | XEvent.Severity.Error,
            QUERY_SERVER_HEALTH_WARNING_1 = 52890 | XEvent.Severity.Warning,
            QUERY_PLUGIN_CONFIG_ERROR_2 = 52891 | XEvent.Severity.Error,
            QUERY_BAD_DATA_7 = 52892 | XEvent.Severity.Error,
            QUERY_BAD_DATA_8 = 52893 | XEvent.Severity.Error,
            QUERY_PLUGIN_DATA_INFO = 52925 | XEvent.Severity.Info,
            COMPS_TITLEBUG_0 = 52950 | XEvent.Severity.Error,
            CRON_JOB_FAILURE = 15000 | XEvent.Severity.Error,
            CRON_PLUGIN_XMGMT_REGISTRATION_FAILURE = 15001 | XEvent.Severity.Warning,
            CRON_UNEXPECTED_ERROR = 52975 | XEvent.Severity.Error,
            CRON_UNEXPECTED_ERROR_1 = 52976 | XEvent.Severity.Error,
            CRON_CODE_2 = 52977 | XEvent.Severity.Error,
            CRON_CODE_3 = 52978 | XEvent.Severity.Error,
            CRON_DB_FAILURE = 53000 | XEvent.Severity.Error,
            CRON_DB_FAILURE_1 = 53001 | XEvent.Severity.Error,
            CRON_DB_FAILURE_2 = 53002 | XEvent.Severity.Error,
            CRON_DB_FAILURE_3 = 53003 | XEvent.Severity.Error,
            CRON_DB_FAILURE_4 = 53004 | XEvent.Severity.Error,
            CRON_DB_FAILURE_5 = 53005 | XEvent.Severity.Error,
            CRON_DB_FAILURE_6 = 53006 | XEvent.Severity.Error,
            CRON_DB_FAILURE_7 = 53007 | XEvent.Severity.Error,
            CRON_CONFIG_FAILURE_2 = 53025 | XEvent.Severity.Error,
            CRON_CONFIG_FAILURE_3 = 53026 | XEvent.Severity.Error,
            CRON_CONFIG_FAILURE_4 = 53027 | XEvent.Severity.Error,
            QUERY_PLUGIN_CREATION_ERROR = 53028 | XEvent.Severity.Error,
            CRUX_CODE_1 = 62550 | XEvent.Severity.Warning,
            CRUX_CODE_2 = 62551 | XEvent.Severity.Warning,
            CRUX_MUSICNET_KEY_LOAD_ERROR = 62552 | XEvent.Severity.Error,
            EVENTSINK_CODE_0 = 53050 | XEvent.Severity.Error,
            EVENTSINK_CODE_1 = 53051 | XEvent.Severity.Error,
            EVENTSINK_CODE_2 = 53052 | XEvent.Severity.Error,
            EVENTSINK_COMM_0 = 53075 | XEvent.Severity.Error,
            ESP_ENGINE_EXCEPTION = 1001 | XEvent.Severity.Error,
            FEEDBACK_CODE_0 = 53100 | XEvent.Severity.Error,
            FEEDBACK_CODE_1 = 53101 | XEvent.Severity.Error,
            FEEDBACK_CODE_2 = 53102 | XEvent.Severity.Error,
            FEEDBACK_CODE_3 = 53103 | XEvent.Severity.Error,
            FEEDBACK_CODE_4 = 53104 | XEvent.Severity.Error,
            FEEDBACK_CODE_5 = 53105 | XEvent.Severity.Error,
            FEEDBACK_CODE_6 = 53106 | XEvent.Severity.Error,
            FEEDBACK_CODE_7 = 53107 | XEvent.Severity.Error,
            FEEDBACK_CONFIG_0 = 53125 | XEvent.Severity.Warning,
            FEEDBACK_CONFIG_1 = 53126 | XEvent.Severity.Warning,
            FEEDBACK_CONFIG_2 = 53127 | XEvent.Severity.Warning,
            FEEDBACK_CONFIG_3 = 53128 | XEvent.Severity.Warning,
            FEEDBACK_CONFIG_4 = 53129 | XEvent.Severity.Warning,
            FEEDBACK_CONFIG_5 = 53130 | XEvent.Severity.Warning,
            FEEDBACK_CONFIG_6 = 53131 | XEvent.Severity.Warning,
            FEEDBACK_HACK_0 = 53150 | XEvent.Severity.Warning,
            FEEDBACK_HACK_1 = 53151 | XEvent.Severity.Warning,
            FEEDBACK_HACK_2 = 53152 | XEvent.Severity.Warning,
            FEEDBACK_HACK_3 = 53153 | XEvent.Severity.Warning,
            FEEDBACK_HACK_4 = 53154 | XEvent.Severity.Warning,
            FEEDBACK_HACK_5 = 53155 | XEvent.Severity.Warning,
            FEEDBACK_HACK_6 = 53156 | XEvent.Severity.Warning,
            FEEDBACK_HACK_7 = 53157 | XEvent.Severity.Warning,
            FEEDBACK_HACK_8 = 53158 | XEvent.Severity.Warning,
            FEEDBACK_HACK_9 = 53159 | XEvent.Severity.Warning,
            FEEDBACK_HACK_10 = 53160 | XEvent.Severity.Warning,
            FEEDBACK_HACK_11 = 53161 | XEvent.Severity.Warning,
            FEEDBACK_HACK_12 = 53162 | XEvent.Severity.Warning,
            FEEDBACK_HACK_13 = 53163 | XEvent.Severity.Warning,
            FEEDBACK_HACK_14 = 53164 | XEvent.Severity.Warning,
            FEEDBACK_INFO_0 = 53200 | XEvent.Severity.Info,
            FEEDBACK_INFO_1 = 53201 | XEvent.Severity.Info,
            FINBUS_PUBLISHER_STARTED = 15000 | XEvent.Severity.Info,
            FINBUS_PUBLISHER_SHUTDOWN_STARTED = 15001 | XEvent.Severity.Info,
            FINBUS_PUBLISHER_SHUTDOWN_COMPLETE = 15002 | XEvent.Severity.Info,
            FINBUS_PUBLISHER_STARTUP_ERROR = 15003 | XEvent.Severity.Error,
            FINBUS_PUBLISHER_SHUTDOWN_ERROR = 15004 | XEvent.Severity.Error,
            FINBUS_PUBLISHER_PUBLISH_MESSAGE_ERROR = 15005 | XEvent.Severity.Error,
            FINBUS_PUBLISHER_GET_PENDING_ITEMS_ERROR = 15006 | XEvent.Severity.Error,
            FINBUS_PUBLISHER_RECORD_ITEM_FAILURE_ERROR = 15007 | XEvent.Severity.Error,
            FINBUS_PUBLISHER_UNHANDLED_EXCEPTION_ERROR = 15008 | XEvent.Severity.Error,
            KDC_CONFIG_KDCMANAGEDPROXY_INIT = 10000 | XEvent.Severity.Error,
            KDC_KDCMANAGEDPROXY_INTEROP_1 = 10001 | XEvent.Severity.Error,
            KDC_KDCMANAGEDPROXY_INTEROP_2 = 10002 | XEvent.Severity.Error,
            KDC_KDCMANAGEDPROXY_INTEROP_3 = 10003 | XEvent.Severity.Error,
            KDC_KDCMANAGEDPROXY_INTEROP_4 = 10004 | XEvent.Severity.Error,
            KDC_KDCMANAGEDPROXY_INTEROP_5 = 10005 | XEvent.Severity.Error,
            KDC_KDCMANAGEDPROXY_INTEROP_6 = 10006 | XEvent.Severity.Error,
            KDC_KDCMANAGEDPROXY_INTEROP_7 = 10007 | XEvent.Severity.Error,
            KDC_KDCMANAGEDPROXY_INTEROP_8 = 10008 | XEvent.Severity.Error,
            KDC_KDCMANAGEDPROXY_INTEROP_9 = 10009 | XEvent.Severity.Error,
            KDC_KDCMANAGEDPROXY_INTEROP_10 = 10010 | XEvent.Severity.Error,
            KDC_KDCMANAGEDPROXY_INTEROP_11 = 10011 | XEvent.Severity.Error,
            KDC_KDCMANAGEDPROXY_INTEROP_12 = 10012 | XEvent.Severity.Error,
            KDC_KDCMANAGEDPROXY_INTEROP_13 = 10013 | XEvent.Severity.Error,
            KDC_KDCMANAGEDPROXY_INTEROP_14 = 10014 | XEvent.Severity.Error,
            KDC_KDCMANAGEDPROXY_INTEROP_15 = 10015 | XEvent.Severity.Error,
            KDC_KDCMANAGEDPROXY_INTEROP_16 = 10016 | XEvent.Severity.Error,
            KDC_KDCMANAGEDPROXY_INTEROP_17 = 10017 | XEvent.Severity.Error,
            KDC_KDCMANAGEDPROXY_INTEROP_18 = 10018 | XEvent.Severity.Error,
            KDC_KDCMANAGEDPROXY_INTEROP_19 = 10019 | XEvent.Severity.Error,
            KDC_KDCMANAGEDPROXY_INTEROP_20 = 10020 | XEvent.Severity.Error,
            KDC_KDCMANAGEDPROXY_INTEROP_21 = 10021 | XEvent.Severity.Error,
            KDC_KDCMANAGEDPROXY_INTEROP_22 = 10022 | XEvent.Severity.Error,
            KDC_KDCMANAGEDPROXY_INTEROP_23 = 10023 | XEvent.Severity.Error,
            KDC_KDCMANAGEDPROXY_INTEROP_24 = 10024 | XEvent.Severity.Error,
            KDC_KDCMANAGEDPROXY_INTEROP_25 = 10025 | XEvent.Severity.Error,
            KDC_KDCMANAGEDPROXY_INTEROP_26 = 10026 | XEvent.Severity.Error,
            KDC_KDCMANAGEDPROXY_INTEROP_27 = 10027 | XEvent.Severity.Error,
            KDC_CONFIG_HEALTHINTEROP_CREATE = 10028 | XEvent.Severity.Error,
            KDC_CONFIG_HEALTHINTEROP_INIT = 10029 | XEvent.Severity.Error,
            KDC_KDCMANAGEDPROXY_BAD_OFFER_XML = 10030 | XEvent.Severity.Warning,
            KDC_KDCMANAGEDPROXY_FAILED_SET_CONSOLE_REGION = 10031 | XEvent.Severity.Error,
            KDC_KDCMANAGEDPROXY_INTEROP_28 = 10032 | XEvent.Severity.Error,
            KDC_KDCMANAGEDPROXY_INTEROP_29 = 10033 | XEvent.Severity.Error,
            KDC_KDCMANAGEDPROXY_INTEROP_30 = 10034 | XEvent.Severity.Error,
            KDC_KDCMANAGEDPROXY_INTEROP_31 = 10035 | XEvent.Severity.Error,
            KDC_KDCMANAGEDPROXY_DBLIMITER_THROTTLED_PARTITION = 10036 | XEvent.Severity.Warning,
            KDC_KDCMANAGEDPROXY_PASSPORT_INIT_FAILURE = 10037 | XEvent.Severity.Error,
            KDC_BASE_AUDIT_TICKET_RENEWAL = 53305 | XEvent.Severity.Error,
            KDC_BASE_BAD_KERBCRYPT_1 = 53306 | XEvent.Severity.Error,
            KDC_BASE_BAD_ETYPE = 53307 | XEvent.Severity.Error,
            KDC_CODE_83 = 53308 | XEvent.Severity.Error,
            KDC_CODE_84 = 53309 | XEvent.Severity.Error,
            KDC_CODE_85 = 53310 | XEvent.Severity.Error,
            KDC_BASE_NO_MEMORY = 53311 | XEvent.Severity.Error,
            KDC_BASE_NO_MEMORY_1 = 53312 | XEvent.Severity.Error,
            KDC_CODE_88 = 53313 | XEvent.Severity.Error,
            KDC_CODE_89 = 53314 | XEvent.Severity.Error,
            KDC_CODE_90 = 53315 | XEvent.Severity.Error,
            KDC_BASE_PATYPE_UNEXPECTED = 53673 | XEvent.Severity.Error,
            KDC_BASE_PATYPE_NOTFOUND = 53674 | XEvent.Severity.Error,
            KDC_PERFCOUNTER_INIT_ERROR = 54233 | XEvent.Severity.Error,
            KDC_CONFIG_25 = 54275 | XEvent.Severity.Error,
            KDC_CONFIG_26 = 54276 | XEvent.Severity.Error,
            KDC_CONFIG_27 = 54277 | XEvent.Severity.Error,
            KDC_CONFIG_28 = 54278 | XEvent.Severity.Error,
            KDC_CONFIG_29 = 54279 | XEvent.Severity.Error,
            KDC_CONFIG_30 = 54280 | XEvent.Severity.Error,
            KDC_CONFIG_31 = 54281 | XEvent.Severity.Error,
            KDC_FAILED_TO_CONFIG_DOS_DETECTION = 54370 | XEvent.Severity.Error,
            KDC_HACK_6 = 54656 | XEvent.Severity.Warning,
            KDC_HACK_7 = 54657 | XEvent.Severity.Warning,
            KDC_HACK_8 = 54658 | XEvent.Severity.Warning,
            KDC_BASE_UODB_CONNECTION_ESTABLISHED = 54758 | XEvent.Severity.Info,
            KDC_INFO_9 = 54759 | XEvent.Severity.Info,
            LISTS_LOAD_SUCCESS = 63950 | XEvent.Severity.Info,
            LISTS_LOAD_FAILURE = 63951 | XEvent.Severity.Error,
            LISTS_PROTOCOL_ERROR = 63952 | XEvent.Severity.Error,
            LISTS_XML_ERROR = 63953 | XEvent.Severity.Error,
            LISTS_NONEXISTENT_LIST_TYPE = 63954 | XEvent.Severity.Error,
            LISTS_NONEXISTENT_LIST_ID = 63955 | XEvent.Severity.Error,
            LISTS_DATA_DRIVEN_ERROR = 63956 | XEvent.Severity.Warning,
            LISTS_API_MISMATCH = 63957 | XEvent.Severity.Error,
            LIVECACHE_CODE_0 = 54850 | XEvent.Severity.Error,
            LIVECACHE_CODE_1 = 54851 | XEvent.Severity.Error,
            LIVECACHE_CODE_2 = 54852 | XEvent.Severity.Error,
            LIVECACHE_CODE_3 = 54853 | XEvent.Severity.Error,
            LIVECACHE_COMM_0 = 54875 | XEvent.Severity.Error,
            LIVECACHE_CONFIG_0 = 54900 | XEvent.Severity.Error,
            LIVECACHE_CONFIG_1 = 54901 | XEvent.Severity.Error,
            LIVECACHE_HACK_0 = 54925 | XEvent.Severity.Warning,
            LIVECACHE_HACK_1 = 54926 | XEvent.Severity.Warning,
            LIVECACHE_HACK_2 = 54927 | XEvent.Severity.Warning,
            LIVECACHE_HACK_3 = 54928 | XEvent.Severity.Warning,
            LIVECACHE_HACK_4 = 54929 | XEvent.Severity.Warning,
            GET_NETWORK_AUTHORIZATION_LIST_ERROR = 15000 | XEvent.Severity.Error,
            GET_NETWORK_AUTHORIZATION_LIST_CONFIG_ERROR = 15001 | XEvent.Severity.Error,
            GET_NETWORK_AUTHORIZATION_LIST_TITLE_NOT_ALLOWED = 15002 | XEvent.Severity.Error,
            LIVEINFO_CLIENT_ERROR = 40000 | XEvent.Severity.Error,
            LIVEINFO_HIVE_HACK_ERROR_PROCESSING_REQUEST = 63975 | XEvent.Severity.Error,
            LIVEINFO_HIVE_CONFIG_ERROR_LOADING = 63976 | XEvent.Severity.Error,
            LIVEINFO_HIVE_CONFIG_ERROR_EMPTY_RESPONSE = 63977 | XEvent.Severity.Error,
            LIVEINFO_HIVE_CONFIG_ERROR_TOO_LARGE_RESPONSE = 63978 | XEvent.Severity.Error,
            LIVEINFO_HIVE_CONFIG_ERROR_BAD_CONFIG_NAME = 63979 | XEvent.Severity.Error,
            WEBCACHE_CONTROL_REQUEST_ERROR = 53613 | XEvent.Severity.Error,
            MARKETPLACECATALOG_PARAMETER_MISSING = 35001 | XEvent.Severity.Error,
            MARKETPLACECATALOG_ERROR = 35002 | XEvent.Severity.Error,
            MARKETPLACECATALOG_GUID_ERROR = 35003 | XEvent.Severity.Warning,
            MARKETPLACECATALOG_DETAIL_LEVEL_MISSING = 35004 | XEvent.Severity.Error,
            XMATCHFD_WARN_GEN = 50869 | XEvent.Severity.Error,
            XMATCHFD_WARN_GEN_1 = 50870 | XEvent.Severity.Error,
            XMATCHFD_WARN_GEN_2 = 50872 | XEvent.Severity.Error,
            XMATCHFD_WARN_GEN_3 = 50874 | XEvent.Severity.Error,
            XMATCHFD_WARN_GEN_4 = 50875 | XEvent.Severity.Error,
            MATCH_CODE_0 = 54950 | XEvent.Severity.Error,
            MATCH_CODE_1 = 54951 | XEvent.Severity.Error,
            MATCH_CODE_2 = 54952 | XEvent.Severity.Error,
            MATCH_CODE_3 = 54953 | XEvent.Severity.Error,
            MATCH_CODE_4 = 54954 | XEvent.Severity.Error,
            MATCH_CODE_5 = 54955 | XEvent.Severity.Error,
            MATCH_CODE_6 = 54956 | XEvent.Severity.Error,
            MATCH_CODE_7 = 54957 | XEvent.Severity.Error,
            MATCH_CODE_8 = 54958 | XEvent.Severity.Error,
            MATCH_CODE_9 = 54959 | XEvent.Severity.Error,
            MATCH_CODE_10 = 54960 | XEvent.Severity.Error,
            MATCH_CODE_11 = 54961 | XEvent.Severity.Error,
            MATCH_CODE_12 = 54962 | XEvent.Severity.Error,
            MATCH_CODE_13 = 54963 | XEvent.Severity.Error,
            MATCH_CODE_14 = 54964 | XEvent.Severity.Error,
            MATCH_CODE_15 = 54965 | XEvent.Severity.Error,
            MATCH_CODE_16 = 54966 | XEvent.Severity.Error,
            MATCH_CODE_17 = 54967 | XEvent.Severity.Error,
            MATCH_CODE_18 = 54968 | XEvent.Severity.Error,
            MATCH_CODE_19 = 54969 | XEvent.Severity.Error,
            MATCH_CODE_20 = 54970 | XEvent.Severity.Error,
            MATCH_CODE_21 = 54971 | XEvent.Severity.Error,
            MATCH_CODE_22 = 54972 | XEvent.Severity.Error,
            MATCH_CODE_23 = 54973 | XEvent.Severity.Error,
            MATCH_CODE_24 = 54974 | XEvent.Severity.Error,
            MATCH_CODE_25 = 54975 | XEvent.Severity.Error,
            MATCH_CODE_26 = 54976 | XEvent.Severity.Error,
            MATCH_CODE_27 = 54977 | XEvent.Severity.Error,
            MATCH_CODE_28 = 54978 | XEvent.Severity.Error,
            MATCH_CODE_29 = 54979 | XEvent.Severity.Error,
            MATCH_CODE_30 = 54980 | XEvent.Severity.Error,
            MATCH_CODE_31 = 54981 | XEvent.Severity.Error,
            MATCH_CODE_32 = 54982 | XEvent.Severity.Error,
            MATCH_CODE_33 = 54983 | XEvent.Severity.Error,
            MATCH_CODE_34 = 54984 | XEvent.Severity.Error,
            MATCH_CODE_35 = 54985 | XEvent.Severity.Error,
            MATCH_CODE_36 = 54986 | XEvent.Severity.Error,
            MATCH_CODE_TITLECHANGE_ERROR = 54987 | XEvent.Severity.Error,
            MATCH_CODE_SESSION_LIMIT_EXCEEDED = 54988 | XEvent.Severity.Error,
            MATCH_CODE_SESSION_LIMIT_APPROACHING = 54989 | XEvent.Severity.Error,
            MATCH_COMM_0 = 55050 | XEvent.Severity.Error,
            MATCH_COMM_1 = 55051 | XEvent.Severity.Error,
            MATCH_COMM_FASTFAIL = 55052 | XEvent.Severity.Error,
            MATCH_COMM_OPEN_CONNECTION_FOR_INSERT = 55053 | XEvent.Severity.Error,
            MATCH_COMM_EXECUTE_INSERT = 55054 | XEvent.Severity.Error,
            MATCH_COMM_UPDATE = 55055 | XEvent.Severity.Error,
            MATCH_COMM_DELETE = 55056 | XEvent.Severity.Error,
            MATCH_COMM_EXECUTE_FIND_XBOX = 55057 | XEvent.Severity.Error,
            MATCH_COMM_EXECUTE_FINDBYID_XENON = 55058 | XEvent.Severity.Error,
            MATCH_COMM_EXECUTE_FINDRANKED_XENON = 55059 | XEvent.Severity.Error,
            MATCH_COMM_EXECUTE_GET_NON_AFFILIATE_RESULTS = 55060 | XEvent.Severity.Error,
            MATCH_COMM_OPEN_CONNECTION = 55061 | XEvent.Severity.Error,
            MATCH_COMM_EXECUTE_GET_AFFILIATE_RESULTS = 55062 | XEvent.Severity.Error,
            MATCH_CONFIG_0 = 55075 | XEvent.Severity.Error,
            MATCH_CONFIG_1 = 55076 | XEvent.Severity.Error,
            MATCH_CONFIG_2 = 55077 | XEvent.Severity.Error,
            MATCH_CONFIG_3 = 55078 | XEvent.Severity.Error,
            MATCH_CONFIG_4 = 55079 | XEvent.Severity.Error,
            MATCH_CONFIG_5 = 55080 | XEvent.Severity.Error,
            MATCH_CONFIG_6 = 55081 | XEvent.Severity.Error,
            MATCH_CONFIG_7 = 55082 | XEvent.Severity.Error,
            MATCH_CONFIG_8 = 55083 | XEvent.Severity.Error,
            MATCH_CONFIG_9 = 55084 | XEvent.Severity.Error,
            MATCH_CONFIG_10 = 55085 | XEvent.Severity.Error,
            MATCH_CONFIG_11 = 55086 | XEvent.Severity.Error,
            MATCH_CONFIG_12 = 55087 | XEvent.Severity.Error,
            MATCH_CONFIG_13 = 55088 | XEvent.Severity.Error,
            MATCH_CONFIG_14 = 55089 | XEvent.Severity.Error,
            MATCH_CONFIG_15 = 55090 | XEvent.Severity.Error,
            MATCH_CONFIG_16 = 55091 | XEvent.Severity.Error,
            MATCH_CONFIG_17 = 55092 | XEvent.Severity.Error,
            MATCH_CONFIG_18 = 55093 | XEvent.Severity.Error,
            MATCH_CONFIG_19 = 55094 | XEvent.Severity.Error,
            MATCH_CONFIG_20 = 55095 | XEvent.Severity.Error,
            MATCH_CONFIG_21 = 55096 | XEvent.Severity.Error,
            MATCH_CONFIG_22 = 55097 | XEvent.Severity.Error,
            MATCH_CONFIG_23 = 55098 | XEvent.Severity.Error,
            MATCH_CONFIG_24 = 55099 | XEvent.Severity.Error,
            MATCH_CONFIG_25 = 55100 | XEvent.Severity.Error,
            MATCH_CONFIG_26 = 55101 | XEvent.Severity.Error,
            MATCH_CONFIG_27 = 55102 | XEvent.Severity.Error,
            MATCH_CONFIG_28 = 55103 | XEvent.Severity.Error,
            MATCH_CONFIG_29 = 55104 | XEvent.Severity.Error,
            MATCH_CONFIG_30 = 55105 | XEvent.Severity.Error,
            MATCH_CONFIG_31 = 55106 | XEvent.Severity.Error,
            MATCH_CONFIG_32 = 55107 | XEvent.Severity.Error,
            MATCH_CONFIG_33 = 55108 | XEvent.Severity.Error,
            MATCH_CONFIG_34 = 55109 | XEvent.Severity.Error,
            MATCH_CONFIG_35 = 55110 | XEvent.Severity.Error,
            MATCH_CONFIG_36 = 55111 | XEvent.Severity.Error,
            MATCH_CONFIG_37 = 55112 | XEvent.Severity.Error,
            MATCH_CONFIG_38 = 55113 | XEvent.Severity.Error,
            MATCH_CONFIG_39 = 55114 | XEvent.Severity.Error,
            MATCH_CONFIG_40 = 55115 | XEvent.Severity.Error,
            MATCH_CONFIG_41 = 55116 | XEvent.Severity.Error,
            MATCH_CONFIG_42 = 55117 | XEvent.Severity.Error,
            MATCH_CONFIG_43 = 55118 | XEvent.Severity.Error,
            MATCH_CONFIG_44 = 55119 | XEvent.Severity.Error,
            MATCH_CONFIG_45 = 55120 | XEvent.Severity.Error,
            MATCH_CONFIG_46 = 55121 | XEvent.Severity.Error,
            MATCH_CONFIG_47 = 55122 | XEvent.Severity.Error,
            MATCH_CONFIG_48 = 55123 | XEvent.Severity.Error,
            MATCH_CONFIG_49 = 55124 | XEvent.Severity.Error,
            MATCH_CONFIG_50 = 55125 | XEvent.Severity.Error,
            MATCH_CONFIG_51 = 55126 | XEvent.Severity.Error,
            MATCH_CONFIG_52 = 55127 | XEvent.Severity.Error,
            MATCH_CONFIG_53 = 55128 | XEvent.Severity.Error,
            MATCH_CONFIG_54 = 55129 | XEvent.Severity.Error,
            MATCH_CONFIG_55 = 55130 | XEvent.Severity.Error,
            MATCH_CONFIG_56 = 55131 | XEvent.Severity.Error,
            MATCH_CONFIG_57 = 55132 | XEvent.Severity.Error,
            MATCH_CONFIG_58 = 55133 | XEvent.Severity.Error,
            MATCH_CONFIG_59 = 55134 | XEvent.Severity.Error,
            MATCH_CONFIG_60 = 55135 | XEvent.Severity.Error,
            MATCH_CONFIG_61 = 55136 | XEvent.Severity.Error,
            MATCH_CONFIG_62 = 55137 | XEvent.Severity.Error,
            MATCH_CONFIG_63 = 55138 | XEvent.Severity.Error,
            MATCH_CONFIG_64 = 55139 | XEvent.Severity.Error,
            MATCH_CONFIG_65 = 55140 | XEvent.Severity.Error,
            MATCH_CONFIG_66 = 55141 | XEvent.Severity.Error,
            MATCH_CONFIG_67 = 55142 | XEvent.Severity.Error,
            MATCH_CONFIG_68 = 55143 | XEvent.Severity.Error,
            MATCH_CONFIG_69 = 55144 | XEvent.Severity.Error,
            MATCH_CONFIG_70 = 55145 | XEvent.Severity.Error,
            MATCH_CONFIG_71 = 55152 | XEvent.Severity.Error,
            MATCH_CONFIG_72 = 55153 | XEvent.Severity.Error,
            MATCH_CONFIG_73 = 55154 | XEvent.Severity.Error,
            MATCH_CONFIG_TOO_MANY_CROSS_PLATFORM_NODES = 55155 | XEvent.Severity.Error,
            MATCH_CONFIG_LTC_ELEMENT_MISSING = 55156 | XEvent.Severity.Error,
            MATCH_CONFIG_LTC_ELEMENT_TOO_MANY = 55157 | XEvent.Severity.Error,
            MATCH_CONFIG_LTC_ELEMENT_EMPTY = 55158 | XEvent.Severity.Error,
            MATCH_CONFIG_LTC_ELEMENT_PARSE_FAILED = 55159 | XEvent.Severity.Error,
            MATCH_HACK_0 = 55275 | XEvent.Severity.Warning,
            MATCH_HACK_1 = 55276 | XEvent.Severity.Warning,
            MATCH_HACK_2 = 55277 | XEvent.Severity.Warning,
            MATCH_HACK_3 = 55278 | XEvent.Severity.Warning,
            MATCH_HACK_4 = 55279 | XEvent.Severity.Warning,
            MATCH_HACK_5 = 55280 | XEvent.Severity.Warning,
            MATCH_HACK_6 = 55281 | XEvent.Severity.Warning,
            MATCH_HACK_7 = 55282 | XEvent.Severity.Warning,
            MATCH_HACK_8 = 55283 | XEvent.Severity.Warning,
            MATCH_HACK_9 = 55284 | XEvent.Severity.Warning,
            MATCH_HACK_10 = 55285 | XEvent.Severity.Warning,
            MATCH_HACK_11 = 55286 | XEvent.Severity.Warning,
            MATCH_HACK_12 = 55287 | XEvent.Severity.Warning,
            MATCH_HACK_13 = 55288 | XEvent.Severity.Warning,
            MATCH_HACK_14 = 55289 | XEvent.Severity.Warning,
            MATCH_HACK_15 = 55290 | XEvent.Severity.Warning,
            MATCH_HACK_16 = 55291 | XEvent.Severity.Warning,
            MATCH_HACK_17 = 55292 | XEvent.Severity.Warning,
            MATCH_HACK_18 = 55293 | XEvent.Severity.Warning,
            MATCH_HACK_19 = 55294 | XEvent.Severity.Warning,
            MATCH_HACK_20 = 55295 | XEvent.Severity.Warning,
            MATCH_HACK_21 = 55296 | XEvent.Severity.Warning,
            MATCH_HACK_22 = 55297 | XEvent.Severity.Warning,
            MATCH_HACK_23 = 55298 | XEvent.Severity.Warning,
            MATCH_HACK_24 = 55299 | XEvent.Severity.Warning,
            MATCH_HACK_25 = 55300 | XEvent.Severity.Warning,
            MATCH_HACK_26 = 55301 | XEvent.Severity.Warning,
            MATCH_HACK_27 = 55302 | XEvent.Severity.Warning,
            MATCH_HACK_28 = 55303 | XEvent.Severity.Warning,
            MATCH_HACK_29 = 55304 | XEvent.Severity.Warning,
            MATCH_HACK_30 = 55305 | XEvent.Severity.Warning,
            MATCH_HACK_31 = 55306 | XEvent.Severity.Warning,
            MATCH_HACK_32 = 55307 | XEvent.Severity.Warning,
            MATCH_HACK_33 = 55308 | XEvent.Severity.Warning,
            MATCH_HACK_SPLIT_NUM_ATTR = 55309 | XEvent.Severity.Warning,
            MATCH_HACK_SPLIT_END_OF_STREAM = 55310 | XEvent.Severity.Warning,
            MATCH_HACK_SESSION_NUM_ATTR = 55311 | XEvent.Severity.Warning,
            MATCH_HACK_SESSION_END_OF_STREAM = 55312 | XEvent.Severity.Warning,
            MATCH_HACK_SEARCH_NUM_PARAMS = 55313 | XEvent.Severity.Warning,
            MATCH_HACK_SEARCH_END_OF_STREAM = 55314 | XEvent.Severity.Warning,
            MATCH_HACK_MISMATCH_LANGUAGE_ATTR = 55315 | XEvent.Severity.Warning,
            MATCH_HACK_MISMATCH_CLIENT_IPADDR = 55316 | XEvent.Severity.Warning,
            MATCH_HACK_SPLIT_SIZE_OVERFLOW = 55317 | XEvent.Severity.Warning,
            MATCH_HACK_XBOX1_PLATFORM_ATTRIBS = 55318 | XEvent.Severity.Warning,
            MATCH_INFO_0 = 55375 | XEvent.Severity.Info,
            MATCH_TITLEBUG_0 = 55400 | XEvent.Severity.Error,
            MATCH_TITLEBUG_1 = 55401 | XEvent.Severity.Error,
            MATCH_TITLEBUG_2 = 55402 | XEvent.Severity.Error,
            MATCH_TITLEBUG_3 = 55403 | XEvent.Severity.Error,
            MATCH_TITLEBUG_4 = 55404 | XEvent.Severity.Error,
            MATCH_TITLEBUG_5 = 55405 | XEvent.Severity.Error,
            MATCH_TITLEBUG_6 = 55406 | XEvent.Severity.Error,
            MATCH_TITLEBUG_7 = 55407 | XEvent.Severity.Error,
            MATCH_TITLEBUG_8 = 55408 | XEvent.Severity.Error,
            MATCH_TITLEBUG_9 = 55409 | XEvent.Severity.Error,
            MATCH_TITLEBUG_10 = 55410 | XEvent.Severity.Error,
            MATCH_TITLEBUG_11 = 55411 | XEvent.Severity.Error,
            MATCH_TITLEBUG_12 = 55412 | XEvent.Severity.Error,
            MATCH_TITLEBUG_13 = 55413 | XEvent.Severity.Error,
            MATCH_TITLEBUG_14 = 55414 | XEvent.Severity.Error,
            MATCH_TITLEBUG_15 = 55415 | XEvent.Severity.Error,
            MATCH_TITLEBUG_16 = 55416 | XEvent.Severity.Error,
            MATCH_TITLEBUG_17 = 55417 | XEvent.Severity.Error,
            MATCH_TITLEBUG_18 = 55418 | XEvent.Severity.Error,
            MATCH_TITLEBUG_19 = 55419 | XEvent.Severity.Error,
            MATCH_TITLEBUG_20 = 55420 | XEvent.Severity.Error,
            MATCH_TITLEBUG_21 = 55421 | XEvent.Severity.Error,
            MATCH_TITLEBUG_22 = 55422 | XEvent.Severity.Error,
            MATCH_TITLEBUG_23 = 55423 | XEvent.Severity.Error,
            MATCH_TITLEBUG_24 = 55424 | XEvent.Severity.Error,
            MATCH_TITLEBUG_25 = 55425 | XEvent.Severity.Error,
            MATCH_TITLEBUG_26 = 55426 | XEvent.Severity.Error,
            MATCH_TITLEBUG_27 = 55427 | XEvent.Severity.Error,
            MATCH_TITLEBUG_28 = 55428 | XEvent.Severity.Error,
            MATCH_TITLEBUG_29 = 55429 | XEvent.Severity.Error,
            MATCH_TITLEBUG_30 = 55430 | XEvent.Severity.Error,
            MATCH_TITLEBUG_31 = 55431 | XEvent.Severity.Error,
            MATCH_TITLEBUG_32 = 55432 | XEvent.Severity.Error,
            MATCH_TITLEBUG_33 = 55433 | XEvent.Severity.Error,
            MATCH_TITLEBUG_34 = 55434 | XEvent.Severity.Error,
            MATCH_TITLEBUG_35 = 55435 | XEvent.Severity.Error,
            MATCH_TITLEBUG_36 = 55436 | XEvent.Severity.Error,
            MATCH_TITLEBUG_37 = 55437 | XEvent.Severity.Error,
            MATCH_TITLEBUG_38 = 55438 | XEvent.Severity.Error,
            MATCH_TITLEBUG_39 = 55439 | XEvent.Severity.Error,
            MATCH_TITLEBUG_40 = 55440 | XEvent.Severity.Error,
            MATCH_TITLEBUG_41 = 55441 | XEvent.Severity.Error,
            MATCH_TITLEBUG_42 = 55442 | XEvent.Severity.Error,
            MATCH_TITLEBUG_43 = 55443 | XEvent.Severity.Error,
            MATCH_TITLEBUG_44 = 55444 | XEvent.Severity.Error,
            MATCH_TITLEBUG_45 = 55445 | XEvent.Severity.Error,
            MATCH_TITLEBUG_46 = 55446 | XEvent.Severity.Error,
            MATCH_TITLEBUG_47 = 55447 | XEvent.Severity.Error,
            MATCH_TITLEBUG_48 = 55448 | XEvent.Severity.Error,
            MATCH_TITLEBUG_49 = 55449 | XEvent.Severity.Error,
            MATCH_TITLEBUG_50 = 55450 | XEvent.Severity.Error,
            MATCH_TITLEBUG_51 = 55451 | XEvent.Severity.Error,
            MATCH_TITLEBUG_52 = 55452 | XEvent.Severity.Error,
            MATCH_TITLEBUG_FINDBYIDS_INVALID_SESSIONID = 55453 | XEvent.Severity.Error,
            MATCH_TITLEBUG_FINDBYIDS_INVALID_BLOB_PARAM = 55454 | XEvent.Severity.Error,
            MIX_WEBSGVALIDATION_HEADERMISSING = 15000 | XEvent.Severity.Error,
            MIX_WEBSGVALIDATION_HEADERINVALID = 15001 | XEvent.Severity.Error,
            MIX_STATS_INVALID_TITLE_ID = 15002 | XEvent.Severity.Info,
            MIX_STATS_INVALID_LEADERBOARD_ID = 15003 | XEvent.Severity.Info,
            MIX_STATS_SUCCESS = 15004 | XEvent.Severity.Info,
            MIX_TITLEMANAGEMENT_INVALID_TITLE_ID = 15005 | XEvent.Severity.Info,
            MIX_TITLEMANAGEMENT_SUCCESS = 15006 | XEvent.Severity.Info,
            MIX_TITLEMANAGEMENT_INVALID_XLAST = 15007 | XEvent.Severity.Info,
            MIX_TITLEMANAGEMENT_DECOMPRESSION_ERROR = 15008 | XEvent.Severity.Info,
            MIX_TITLEMANAGEMENT_INVALID_VERSION = 15009 | XEvent.Severity.Info,
            MIX_TITLEMANAGEMENT_INVALID_PLATFORM = 15010 | XEvent.Severity.Info,
            MIX_MATCH_SUCCESS = 15011 | XEvent.Severity.Info,
            MIX_STORAGE_SUCCESS = 15012 | XEvent.Severity.Info,
            MIX_STORAGE_INVALID_FILE_TYPE = 15013 | XEvent.Severity.Info,
            MIX_STORAGE_INVALID_GUID = 15014 | XEvent.Severity.Info,
            MIX_TITLEMANAGEMENT_INVALID_GUID = 15015 | XEvent.Severity.Info,
            MIX_MATCH_NEW_MODE_FOUND = 15016 | XEvent.Severity.Error,
            MIX_BETAMANAGEMENT_SUCCESS = 15017 | XEvent.Severity.Info,
            MIX_BETAMANAGEMENT_INVALID_GUID = 15018 | XEvent.Severity.Info,
            MIX_BETAMANAGEMENT_INVALID_FLASH_VERSION = 15019 | XEvent.Severity.Info,
            MIX_BETAMANAGEMENT_NULL_ARGUMENT = 15020 | XEvent.Severity.Info,
            MIX_STATS_FORBIDDEN_ENVIRONMENT = 15021 | XEvent.Severity.Info,
            MIX_CONCURRENCY_ERROR = 15022 | XEvent.Severity.Error,
            MIX_SUBSCRIPTION_FAMILY_ENUMERATION_ERROR = 15023 | XEvent.Severity.Error,
            MIX_SUBSCRIPTION_FAMILY_CREATE_ERROR = 15024 | XEvent.Severity.Error,
            MIX_SUBSCRIPTION_FAMILY_GET_ERROR = 15025 | XEvent.Severity.Error,
            MIX_BETAMANAGEMENT_INVALID_TITLE_VERSION = 15026 | XEvent.Severity.Info,
            MIX_BETAMANAGEMENT_INVALID_TITLE_ID = 15027 | XEvent.Severity.Info,
            MIX_SETTINGS_INVALID_ARGUMENT = 15028 | XEvent.Severity.Error,
            MIX_STATS_CUSTOMER_IMPACT = 15029 | XEvent.Severity.Info,
            MIX_BETAMANAGEMENT_INVALID_ARGUMENT = 15030 | XEvent.Severity.Error,
            MIX_STATS_FORCE_REQUIRED = 15031 | XEvent.Severity.Error,
            MIX_MATCH_MISSING_REMOVE_MODE = 15032 | XEvent.Severity.Error,
            MIX_MATCH_SQL_EXCEPTION = 15033 | XEvent.Severity.Error,
            MIX_BETAMANAGEMENT_GROUP_MUST_BE_EMPTY = 15034 | XEvent.Severity.Error,
            MIX_BETAMANAGEMENT_XKDC_RELOAD_FAILED = 15035 | XEvent.Severity.Warning,
            MIX_BETAMANAGEMENT_HIVE_RELOAD_FAILED = 15036 | XEvent.Severity.Warning,
            MIX_BETAMANAGEMENT_CANNOT_MIGRATE_TO_SELF = 15037 | XEvent.Severity.Error,
            MIX_TITLEMANAGEMENT_NULL_ARGUMENT = 15038 | XEvent.Severity.Error,
            MIX_TITLEMANAGEMENT_INVALID_ARGUMENT = 15039 | XEvent.Severity.Error,
            MIX_TITLEMANAGEMENT_ARGUMENT_TOO_LARGE = 15040 | XEvent.Severity.Error,
            MIX_TITLEMANAGEMENT_DUPLICATE_UPDATE_RANK_LOCATION = 15041 | XEvent.Severity.Error,
            MIX_TITLEMANAGEMENT_DATABASE_RETURN_ERROR = 15042 | XEvent.Severity.Error,
            MIX_TITLEMANAGEMENT_XBOS_RELOAD_FAILED = 15043 | XEvent.Severity.Warning,
            MIX_TOKEN_FILE_NOT_FOUND = 15044 | XEvent.Severity.Error,
            MIX_TOKEN_MALFORMED_TOKEN_ENTRY_FOUND = 15045 | XEvent.Severity.Error,
            MIX_TOKEN_MALFORMED_5X5_TOKEN_CODE_FOUND = 15046 | XEvent.Severity.Error,
            MIX_TOKEN_FILE_DECRYPTION_ERROR = 15047 | XEvent.Severity.Error,
            MIX_TOKEN_EOF_REACHED_BEFORE_ALL_TOKENS_RETRIEVED = 15048 | XEvent.Severity.Error,
            MIX_TOKEN_JOB_NOT_IN_REQUIRED_STATE = 15049 | XEvent.Severity.Error,
            MIX_TITLEMANAGEMENT_DUPLICATE_UPDATE_XRL_LOCATION = 15050 | XEvent.Severity.Error,
            MIX_COMMON_FRONT_DOOR_RESET_ERROR = 15051 | XEvent.Severity.Error,
            MIX_SETTINGS_ERROR_INGESTING_ETX_MANIFEST = 15052 | XEvent.Severity.Error,
            MIX_TOKEN_MANAGEMENT_SERIALIZATION_ERROR = 15053 | XEvent.Severity.Error,
            MIX_BETA_MANAGEMENT_DUPLICATE_APP_ERROR = 15054 | XEvent.Severity.Error,
            MIX_COMMON_INVALID_LOGGING_FIELD = 15055 | XEvent.Severity.Warning,
            MIX_STS_CONFIGURATION_RELOAD_FAILED = 15056 | XEvent.Severity.Warning,
            MIX_STS_CONFIGURATION_DATABASE_LOAD_FAILED = 15057 | XEvent.Severity.Error,
            MIX_STS_CONFIGURATION_PARTNER_DOES_NOT_EXIST = 15058 | XEvent.Severity.Error,
            MIX_STS_CONFIGURATION_TITLE_NOT_ASSOCIATED = 15059 | XEvent.Severity.Error,
            MIX_STS_CONFIGURATION_APPLIES_TO_DOES_NOT_EXIST = 15060 | XEvent.Severity.Error,
            MIX_STS_CONFIGURATION_DATABASE_WRITE_ERROR = 15061 | XEvent.Severity.Error,
            MIX_TITLE_MANAGEMENT_ERROR_SETTING_NACL_PRIVILEGE = 15062 | XEvent.Severity.Error,
            MIX_STS_CONFIGURATION_UNSUPPORTED_TOKEN_TYPE = 15063 | XEvent.Severity.Error,
            MIX_STS_CONFIGURATION_UNSUPPORTED_ENDPOINT_PROTOCOL = 15064 | XEvent.Severity.Error,
            MIX_STS_CONFIGURATION_INVALID_CLAIM_TYPE = 15065 | XEvent.Severity.Error,
            MIX_STS_CONFIGURATION_PRIVATE_CLAIM_TYPE = 15066 | XEvent.Severity.Error,
            MIX_STS_CONFIGURATION_PRIVATE_BUSINESS_PARTNER = 15067 | XEvent.Severity.Error,
            WEBCACHE_UNKNOWN_ERROR = 55500 | XEvent.Severity.Error,
            WEBCACHE_UNKNOWN_ERROR_1 = 55501 | XEvent.Severity.Error,
            WEBCACHE_UNKNOWN_ERROR_2 = 55502 | XEvent.Severity.Error,
            MGMT_GENERIC_ERROR_5 = 55503 | XEvent.Severity.Error,
            MGMT_GENERIC_ERROR_6 = 55504 | XEvent.Severity.Error,
            MGMT_GENERIC_ERROR_7 = 55505 | XEvent.Severity.Error,
            MGMT_GENERIC_ERROR_8 = 55506 | XEvent.Severity.Error,
            MGMT_GENERIC_ERROR_9 = 55507 | XEvent.Severity.Error,
            MGMT_GENERIC_ERROR_10 = 55508 | XEvent.Severity.Error,
            MGMT_GENERIC_ERROR_11 = 55509 | XEvent.Severity.Error,
            MGMT_GENERIC_ERROR_12 = 55510 | XEvent.Severity.Error,
            MGMT_GENERIC_ERROR_13 = 55511 | XEvent.Severity.Error,
            MGMT_GENERIC_ERROR_14 = 55512 | XEvent.Severity.Error,
            MGMT_GENERIC_ERROR_15 = 55513 | XEvent.Severity.Error,
            MGMT_GENERIC_ERROR_16 = 55514 | XEvent.Severity.Error,
            MGMT_GENERIC_ERROR_17 = 55515 | XEvent.Severity.Error,
            MGMT_GENERIC_ERROR_18 = 55516 | XEvent.Severity.Error,
            MGMT_GENERIC_ERROR_19 = 55517 | XEvent.Severity.Error,
            MGMT_GENERIC_ERROR_20 = 55518 | XEvent.Severity.Error,
            MGMT_GENERIC_ERROR_21 = 55519 | XEvent.Severity.Error,
            MGMT_PING_ERROR = 55550 | XEvent.Severity.Error,
            MGMT_PING_ERROR_1 = 55551 | XEvent.Severity.Error,
            MGMT_PING_ERROR_2 = 55552 | XEvent.Severity.Error,
            MGMT_PING_ERROR_3 = 55553 | XEvent.Severity.Error,
            MGMT_PING_ERROR_4 = 55554 | XEvent.Severity.Error,
            MGMT_PING_ERROR_5 = 55555 | XEvent.Severity.Error,
            MGMT_PING_ERROR_6 = 55556 | XEvent.Severity.Error,
            MGMT_PING_ERROR_7 = 55557 | XEvent.Severity.Error,
            MGMT_INIT_WARNING_1 = 55575 | XEvent.Severity.Warning,
            MGMT_INIT_WARNING_2 = 55576 | XEvent.Severity.Warning,
            MGMT_INIT_WARNING_3 = 55577 | XEvent.Severity.Warning,
            MGMT_INIT_WARNING_4 = 55578 | XEvent.Severity.Warning,
            MGMT_INIT_WARNING_5 = 55579 | XEvent.Severity.Warning,
            MGMT_INIT_WARNING_6 = 55580 | XEvent.Severity.Warning,
            MGMT_INIT_WARNING_7 = 55581 | XEvent.Severity.Warning,
            MGMT_INIT_WARNING_8 = 55582 | XEvent.Severity.Warning,
            MGMT_INIT_WARNING_9 = 55583 | XEvent.Severity.Warning,
            MGMT_INIT_WARNING_10 = 55584 | XEvent.Severity.Warning,
            MGMT_INIT_WARNING_11 = 55585 | XEvent.Severity.Warning,
            MGMT_INIT_WARNING_12 = 55586 | XEvent.Severity.Warning,
            MGMT_INIT_WARNING_13 = 55587 | XEvent.Severity.Warning,
            MGMT_INIT_FAILURE_10 = 55588 | XEvent.Severity.Error,
            MGMT_INIT_WARNING_14 = 55589 | XEvent.Severity.Warning,
            MGMT_CONFIG_15 = 55590 | XEvent.Severity.Warning,
            MGMT_CONFIG_16 = 55591 | XEvent.Severity.Error,
            MGMT_CONFIG_17 = 55592 | XEvent.Severity.Error,
            MGMT_CONFIG_18 = 55593 | XEvent.Severity.Error,
            MGMT_CONFIG_19 = 55594 | XEvent.Severity.Error,
            MGMT_CONFIG_20 = 55595 | XEvent.Severity.Error,
            MGMT_INIT_FAILURE_11 = 55596 | XEvent.Severity.Error,
            MGMT_INIT_FAILURE_12 = 55597 | XEvent.Severity.Error,
            MGMT_INIT_FAILURE_13 = 55598 | XEvent.Severity.Error,
            MGMT_INIT_FAILURE_14 = 55599 | XEvent.Severity.Error,
            MGMT_INIT_FAILURE_15 = 55600 | XEvent.Severity.Error,
            MGMT_INIT_FAILURE_16 = 55601 | XEvent.Severity.Error,
            MGMT_INIT_FAILURE_17 = 55602 | XEvent.Severity.Error,
            MGMT_INIT_FAILURE_18 = 55603 | XEvent.Severity.Error,
            MGMT_INIT_FAILURE_19 = 55604 | XEvent.Severity.Error,
            MGMT_INIT_FAILURE_20 = 55605 | XEvent.Severity.Error,
            MGMT_INIT_FAILURE_21 = 55606 | XEvent.Severity.Error,
            MGMT_INIT_FAILURE_22 = 55607 | XEvent.Severity.Error,
            MGMT_INIT_FAILURE_23 = 55608 | XEvent.Severity.Error,
            MGMT_INIT_FAILURE_24 = 55609 | XEvent.Severity.Error,
            MGMT_INIT_FAILURE_25 = 55610 | XEvent.Severity.Error,
            MGMT_INIT_FAILURE_26 = 55611 | XEvent.Severity.Error,
            MGMT_INIT_FAILURE_27 = 55612 | XEvent.Severity.Error,
            MGMT_INIT_FAILURE_28 = 55613 | XEvent.Severity.Error,
            MGMT_INIT_ACCEPT_FAILURE = 55614 | XEvent.Severity.Error,
            MGMT_INIT_CONNECT_PIPE_FAILURE = 55615 | XEvent.Severity.Error,
            MGMT_HACK_0 = 55675 | XEvent.Severity.Warning,
            MGMT_HACK_1 = 55676 | XEvent.Severity.Warning,
            MGMT_INIT_SUCCESS = 55700 | XEvent.Severity.Info,
            MGMT_INIT_SUCCESS_1 = 55701 | XEvent.Severity.Info,
            MC_APPDOMAIN_STARTED_2 = 55702 | XEvent.Severity.Info,
            MC_APPDOMAIN_STOPPED = 55703 | XEvent.Severity.Info,
            MGMT_ADMIN_COMMAND = 55704 | XEvent.Severity.Info,
            PRESENCE_HEADER_TRUNCATED = 15000 | XEvent.Severity.Warning,
            PRESENCE_REQUEST_TRUNCATED = 15001 | XEvent.Severity.Warning,
            PRESENCE_NO_VINTERFACE = 15002 | XEvent.Severity.Warning,
            PRESENCE_BAD_CONTENT_TYPE = 15003 | XEvent.Severity.Warning,
            PRESENCE_NOTIFICATION_MESSAGE_TRUNCATED = 15004 | XEvent.Severity.Warning,
            PRESENCE_INVALID_USERID = 15005 | XEvent.Severity.Error,
            PRESENCE_INVALID_DC_MESSAGE_TYPE = 15006 | XEvent.Severity.Warning,
            PRESENCE_INVALID_CLIENT_MESSAGE_TYPE = 15007 | XEvent.Severity.Warning,
            PRESENCE_UNKNOWN_MESSAGE_TYPE = 15008 | XEvent.Severity.Warning,
            PRESENCE_DO_NOT_LOG_EVENT = 15009 | XEvent.Severity.Info,
            PRESENCE_SGINFO_INVALID_PUID = 15010 | XEvent.Severity.Error,
            PRESENCE_ALIVE_INVALID_TITLEID = 15020 | XEvent.Severity.Warning,
            PRESENCE_ALIVE_GAMERTAG_TOO_BIG = 15021 | XEvent.Severity.Warning,
            PRESENCE_ALIVE_DB_READ_ERROR = 15022 | XEvent.Severity.Error,
            PRESENCE_LOGIN_NAME_MISMATCH = 15023 | XEvent.Severity.Error,
            PRESENCE_LICENSE_MIGRATION_ERROR = 15024 | XEvent.Severity.Error,
            PRESENCE_WELCOME_MESSAGE_ERROR = 15025 | XEvent.Severity.Error,
            PRESENCE_INVALID_GAMERTAG = 15030 | XEvent.Severity.Error,
            PRESENCE_FRIEND_NOT_SPECIFIED = 15031 | XEvent.Severity.Error,
            PRESENCE_FRIEND_IS_SENDER = 15032 | XEvent.Severity.Error,
            PRESENCE_DATA_MISMATCH = 15033 | XEvent.Severity.Error,
            PRESENCE_FRIEND_LIST_ACCESS_DENIED = 15034 | XEvent.Severity.Warning,
            PRESENCE_CACHE_NOTFOUND = 15040 | XEvent.Severity.Error,
            PRESENCE_CONFIG_PRESENCE_BLACKLIST = 15041 | XEvent.Severity.Warning,
            PRESENCE_INVALID_QUEUE_TYPE = 15050 | XEvent.Severity.Error,
            PRESENCE_UNSUPPORTED_QUEUE_TYPE = 15051 | XEvent.Severity.Error,
            PRESENCE_INVITE_SENDER_INVALID_USERID = 15070 | XEvent.Severity.Error,
            PRESENCE_INVITE_SENDER_IS_OFFLINE = 15071 | XEvent.Severity.Error,
            PRESENCE_INVITE_MISSING_SESSION_ID = 15072 | XEvent.Severity.Error,
            PRESENCE_INVITE_BAD_NUMBER_INVITEES = 15073 | XEvent.Severity.Error,
            PRESENCE_INVITEANSWER_INVALID_HOSTID = 15080 | XEvent.Severity.Error,
            PRESENCE_INVITEANSWER_INVALID_SESSIONID = 15081 | XEvent.Severity.Error,
            PRESENCE_INVITEANSWER_INVALID_ANSWER = 15082 | XEvent.Severity.Error,
            PRESENCE_INVITEANSWER_INVALID_USERID = 15083 | XEvent.Severity.Error,
            PRESENCE_INVITEANSWER_SENDER_IS_OFFLINE = 15084 | XEvent.Severity.Error,
            PRESENCE_INVITEANSWER_REVOKE_FAILED = 15085 | XEvent.Severity.Error,
            PRESENCE_CANCELINVITE_INVALID_SESSIONID = 15090 | XEvent.Severity.Error,
            PRESENCE_CANCELINVITE_INVALID_USERID = 15091 | XEvent.Severity.Error,
            PRESENCE_CANCELINVITE_SENDER_IS_OFFLINE = 15092 | XEvent.Severity.Error,
            PRESENCE_CANCELINVITE_REVOKE_FAILED = 15093 | XEvent.Severity.Error,
            PRESENCE_MUTELIST_ADD_ERROR = 15100 | XEvent.Severity.Error,
            PRESENCE_MUTELIST_DELETE_ERROR = 15101 | XEvent.Severity.Error,
            PRESENCE_NEVERLIST_ADD_ERROR = 15102 | XEvent.Severity.Error,
            PRESENCE_NEVERLIST_DELETE_ERROR = 15103 | XEvent.Severity.Error,
            PRESENCE_NEVERLIST_INVALID_USER = 15104 | XEvent.Severity.Error,
            PRESENCE_INVALIDATE_USER_UNKNOWN_USER = 15110 | XEvent.Severity.Error,
            PRESENCE_KICK_UNKNOWN_USER = 15120 | XEvent.Severity.Error,
            PRESENCE_PURGE_USER_TARGET_IS_ONLINE = 15130 | XEvent.Severity.Error,
            PRESENCE_ADD_AFFILIATES_ZERO_AFFILIATES = 15140 | XEvent.Severity.Error,
            PRESENCE_ADD_AFFILIATES_TOO_MANY_AFFILIATES = 15141 | XEvent.Severity.Error,
            PRESENCE_ADD_AFFILIATES_MULTIPLE_LISTS = 15142 | XEvent.Severity.Error,
            PRESENCE_ADD_AFFILIATES_INVALID_LIST = 15143 | XEvent.Severity.Error,
            PRESENCE_ADD_AFFILIATES_NO_BATCHING = 15144 | XEvent.Severity.Error,
            PRESENCE_ADD_AFFILIATES_ADDING_SELF = 15145 | XEvent.Severity.Error,
            PRESENCE_ADD_AFFILIATES_ADDING_ZERO_XUID = 15146 | XEvent.Severity.Error,
            PRESENCE_QUERY_AFFILIATES_NO_LISTS = 15150 | XEvent.Severity.Error,
            PRESENCE_QUERY_AFFILIATES_MULTIPLE_LIST_LIMIT = 15151 | XEvent.Severity.Error,
            PRESENCE_IS_AFFILIATE_ZERO_AFFILIATE_ID = 15160 | XEvent.Severity.Error,
            PRESENCE_IS_AFFILIATE_TO_SELF = 15161 | XEvent.Severity.Error,
            PRESENCE_TITLECONFIG_NO_GAMECONFIGPROJECT = 15170 | XEvent.Severity.Warning,
            PRESENCE_TITLECONFIG_NO_LOCALIZEDSTRINGS = 15171 | XEvent.Severity.Warning,
            PRESENCE_TITLECONFIG_NO_SUPPORTEDLOCALE = 15172 | XEvent.Severity.Warning,
            PRESENCE_TITLECONFIG_NO_PRESENCEMODE = 15173 | XEvent.Severity.Warning,
            PRESENCE_TITLECONFIG_PARSE_FAILED = 15174 | XEvent.Severity.Error,
            PRESENCE_TITLECONFIG_NO_CONTEXT = 15175 | XEvent.Severity.Error,
            PRESENCE_TITLECONFIG_NO_CONTEXTVALUE = 15176 | XEvent.Severity.Error,
            PRESENCE_TITLECONFIG_BAD_FILE = 15177 | XEvent.Severity.Error,
            PRESENCE_TITLECONFIG_SQL_LOAD_FAILED = 15178 | XEvent.Severity.Error,
            PRESENCE_TITLECONFIG_NO_SCHEMA = 15179 | XEvent.Severity.Warning,
            PRESENCE_TITLECONFIG_LODEGAMECONFIGPROC_FAILED = 15180 | XEvent.Severity.Error,
            PRESENCE_TITLECONFIG_TRANSLATION_NOT_FOUND = 15181 | XEvent.Severity.Warning,
            PRESENCE_TITLECONFIG_SCHEMA_NOT_LOADED = 15182 | XEvent.Severity.Warning,
            PRESENCE_TITLECONFIG_PARSE_SUCCESS = 15183 | XEvent.Severity.Info,
            PRESENCE_RICHPRESENCE_FORMAT_NOT_FOUND = 15190 | XEvent.Severity.Warning,
            PRESENCE_RICHPRESENCE_CONTEXT_LABEL_NOT_FOUND = 15191 | XEvent.Severity.Warning,
            PRESENCE_RICHPRESENCE_CONTEXT_NOT_FOUND = 15192 | XEvent.Severity.Warning,
            PRESENCE_RICHPRESENCE_FORMAT_FAILED = 15193 | XEvent.Severity.Error,
            PRESENCE_SGNOTIFYDELETE_INVALID_SERVICEID = 15200 | XEvent.Severity.Error,
            PRESENCE_SGNOTIFYDELETE_REQUEST_TOO_SMALL = 15201 | XEvent.Severity.Error,
            PRESENCE_SGNOTIFYDELETE_REQUEST_INVALID_LENGTH = 15202 | XEvent.Severity.Error,
            PRESENCE_SGNOTIFYDELETE_INNER_REQUEST_INVALID_LENGTH = 15203 | XEvent.Severity.Error,
            PRESENCE_SGNOTIFYDELETE_INNER_REQUEST_INVALID_TYPE = 15204 | XEvent.Severity.Error,
            PRESENCE_SGNOTIFYDELETE_UNEXPECTED_FAILURE = 15205 | XEvent.Severity.Error,
            PRESENCE_SGNOTIFYUPDATE_INVALID_SERVICEID = 15210 | XEvent.Severity.Error,
            PRESENCE_SGNOTIFYUPDATE_REQUEST_TOO_SMALL = 15211 | XEvent.Severity.Error,
            PRESENCE_SGNOTIFYUPDATE_REQUEST_INVALID_LENGTH = 15212 | XEvent.Severity.Error,
            PRESENCE_SGNOTIFYUPDATE_REQUEST_INVALID_HEADER = 15213 | XEvent.Severity.Error,
            PRESENCE_SGNOTIFYUPDATE_INNER_REQUEST_INVALID_LENGTH = 15214 | XEvent.Severity.Error,
            PRESENCE_SGNOTIFYUPDATE_INNER_REQUEST_INVALID_TYPE = 15215 | XEvent.Severity.Error,
            PRESENCE_SGNOTIFYUPDATE_UNEXPECTED_FAILURE = 15216 | XEvent.Severity.Error,
            PRESENCE_STATE_UNKNOWN_USER = 15217 | XEvent.Severity.Error,
            PRESENCE_WEBALIVE_UNKNOWN_USER = 15220 | XEvent.Severity.Error,
            PRESENCE_INFO_INVALID_USER_COUNT = 15230 | XEvent.Severity.Error,
            PRESENCE_SGNOTIFYTITLECHANGE_INVALID_SERVICEID = 15240 | XEvent.Severity.Error,
            PRESENCE_SGNOTIFYTITLECHANGE_REQUEST_TOO_SMALL = 15241 | XEvent.Severity.Error,
            PRESENCE_SGNOTIFYTITLECHANGE_REQUEST_INVALID_LENGTH = 15242 | XEvent.Severity.Error,
            PRESENCE_SGNOTIFYTITLECHANGE_INNER_REQUEST_INVALID_LENGTH = 15243 | XEvent.Severity.Error,
            PRESENCE_SGNOTIFYTITLECHANGE_INNER_REQUEST_INVALID_TYPE = 15244 | XEvent.Severity.Error,
            PRESENCE_SGNOTIFYTITLECHANGE_UNEXPECTED_FAILURE = 15245 | XEvent.Severity.Error,
            QUERY_BAD_DATA_9 = 57700 | XEvent.Severity.Error,
            QUERY_LSP_BACKCOMPAT_UNSUPPORTED_ATTRIBUTE = 57701 | XEvent.Severity.Error,
            QUERY_INVALID_SETTING_LSPBACKCOMPTITLES = 57702 | XEvent.Severity.Error,
            QUERYLIB_CODE_0 = 57725 | XEvent.Severity.Error,
            QUERY_SERVER_HEALTH_ERROR = 57750 | XEvent.Severity.Error,
            QUERY_BAD_DATA_10 = 57775 | XEvent.Severity.Error,
            QUERY_BAD_DATA_11 = 57776 | XEvent.Severity.Error,
            QUERY_BAD_DATA_12 = 57777 | XEvent.Severity.Error,
            QUERY_BAD_DATA_13 = 57778 | XEvent.Severity.Error,
            QUERY_BAD_DATA_14 = 57779 | XEvent.Severity.Error,
            QUERY_BAD_DATA_15 = 57780 | XEvent.Severity.Error,
            QUERY_BAD_DATA_16 = 57781 | XEvent.Severity.Error,
            QUERY_BAD_DATA_17 = 57782 | XEvent.Severity.Error,
            QUERY_BAD_DATA_18 = 57783 | XEvent.Severity.Error,
            MC_QUERY_TRUST_IS_OFF = 57784 | XEvent.Severity.Warning,
            QUERY_DATASET_CONFIG_ERROR = 57785 | XEvent.Severity.Error,
            QUERY_DATASET_CONFIG_ERROR_1 = 57786 | XEvent.Severity.Error,
            QUERY_PLUGIN_CREATION_ERROR_1 = 57787 | XEvent.Severity.Error,
            QUERYLIB_CONFIG_13 = 57788 | XEvent.Severity.Error,
            QUERYLIB_CONFIG_14 = 57789 | XEvent.Severity.Error,
            QUERYLIB_CONFIG_15 = 57790 | XEvent.Severity.Error,
            QUERYLIB_CONFIG_16 = 57791 | XEvent.Severity.Error,
            QUERY_PLUGIN_CREATION_ERROR_2 = 57792 | XEvent.Severity.Error,
            SOCIALCACHE_STARTED = 20000 | XEvent.Severity.Info,
            SOCIALCACHE_SHUTDOWN = 20001 | XEvent.Severity.Info,
            SOCIALCACHE_STARTUP_FAILURE = 20002 | XEvent.Severity.Error,
            SOCIALCACHE_PROTOCOL_VERSION_MISMATCH = 20003 | XEvent.Severity.Error,
            SOCIALCACHE_MSGTYPE_UNKNOWN = 20004 | XEvent.Severity.Error,
            SOCIALCACHE_MSG_BEFORE_CONNECT = 20005 | XEvent.Severity.Error,
            SOCIALCACHE_USER_INDEX_MISMATCH = 20006 | XEvent.Severity.Error,
            SOCIALCACHE_MSG_TOO_SMALL = 20007 | XEvent.Severity.Error,
            SOCIALCACHE_INVALID_USER_FLAGS = 20008 | XEvent.Severity.Error,
            SOCIALCACHE_TOO_MANY_USER_FLAGS = 20009 | XEvent.Severity.Error,
            SOCIALCACHE_NUM_USER_FLAGS_MISMATCH = 20010 | XEvent.Severity.Error,
            SOCIALCACHE_MSGTYPE_UNSUPPORTED = 20011 | XEvent.Severity.Error,
            SOCIALCACHE_MSG_TOO_BIG = 20012 | XEvent.Severity.Error,
            SOCIALCACHE_SGINFO_ERROR = 20013 | XEvent.Severity.Error,
            SOCIALCACHE_USER_NOT_PRESENT = 20014 | XEvent.Severity.Error,
            SOCIALCACHE_CONTEXT_EXCEPTION = 20015 | XEvent.Severity.Error,
            SOCIALCACHE_DATA_TOO_SMALL = 20016 | XEvent.Severity.Error,
            SOCIALCACHE_DATA_INTEGRITY_ERROR = 20017 | XEvent.Severity.Error,
            SOCIALCACHE_TOO_MANY_OBJECTS = 20019 | XEvent.Severity.Error,
            SOCIALCACHE_TOO_MANY_SUBSCRIPTIONS = 20020 | XEvent.Severity.Error,
            SOCIALCACHE_EXCEPTION_WOULD_DEADLOCK = 20021 | XEvent.Severity.Warning,
            SOCIALCACHE_THREADPOOL_EXCEPTION = 20022 | XEvent.Severity.Warning,
            SOCIALCACHE_NOTIFICATION_FORMATTING_ERROR = 20023 | XEvent.Severity.Error,
            SOCIALCACHE_DUPLICATE_USER = 20024 | XEvent.Severity.Error,
            SOCIALCACHE_PROXY_CONNECT_FAILED = 20025 | XEvent.Severity.Error,
            SOCIALCACHE_PROXY_SEND_FAILED = 20026 | XEvent.Severity.Error,
            SOCIALCACHE_PROXY_RECEIVE_FAILED = 20027 | XEvent.Severity.Error,
            SOCIALCACHE_PROXY_SERVER_CHANGE_FAILED = 20028 | XEvent.Severity.Error,
            SOCIALCACHE_PROXY_BUCKET_MAP_FAILED = 20029 | XEvent.Severity.Error,
            SOCIALCACHE_PROXY_BUCKET_CHANGE_FAILED = 20030 | XEvent.Severity.Error,
            SOCIALCACHE_PROXY_REQUEST_FAILED = 20031 | XEvent.Severity.Error,
            XBOX_AVATAR_ASSETS_NOT_SUPPORTED = 15000 | XEvent.Severity.Error,
            XBOX360_AVATAR_ASSETS_NOT_SUPPORTED = 15001 | XEvent.Severity.Error,
            PC_AVATAR_ASSETS_NOT_SUPPORTED = 15002 | XEvent.Severity.Error,
            UNKNOWN_PLATFORM_AVATAR_ASSETS_NOT_SUPPORTED = 15003 | XEvent.Severity.Error,
            CONSOLE_AUDIT_LIST_NOT_SUPPORTED = 15004 | XEvent.Severity.Error,
            CONSOLE_AUDIT_LIST_EMPTY = 15005 | XEvent.Severity.Error,
            AVATAR_ASSET_VALIDATION_FAILED = 15006 | XEvent.Severity.Error,
            STATS_MISSING_SERVER_INFO = 15007 | XEvent.Severity.Warning,
            MOBILE_ACHIEVEMENTS_NOT_SUPPORTED = 15008 | XEvent.Severity.Error,
            WEB_GAMES_ACHIEVEMENTS_NOT_SUPPORTED = 15009 | XEvent.Severity.Error,
            MOBILE_AVATAR_ASSETS_NOT_SUPPORTED = 15010 | XEvent.Severity.Error,
            WEB_GAMES_AVATAR_ASSETS_NOT_SUPPORTED = 15011 | XEvent.Severity.Error,
            STATS_PLATFORM_VISIBLE_LEADERBOARDS_GET_ALL_FAILURE = 15012 | XEvent.Severity.Error,
            STATS_PLATFORM_VISIBLE_LEADERBOARDS_ADD_TO_MAP_FAILURE = 15013 | XEvent.Severity.Error,
            STATS_PLATFORM_VISIBLE_LEADERBOARDS_LOAD_FAILURE = 15014 | XEvent.Severity.Error,
            STATS_CODE_PERF_CREATE_FAILED = 20000 | XEvent.Severity.Error,
            STATS_CODE_HEALTHINTEROP_CREATE_FAILED = 20001 | XEvent.Severity.Error,
            STATS_CODE_HEALTHINTEROP_INIT_FAILED = 20002 | XEvent.Severity.Error,
            STFD_MISSING_OR_BAD_CONFIG = 51596 | XEvent.Severity.Error,
            STFD_MISSING_OR_BAD_CONFIG_1 = 51598 | XEvent.Severity.Error,
            XSTATSFD_INVALID_REQUEST = 52354 | XEvent.Severity.Warning,
            XSTATSFD_INVALID_REQUEST_1 = 52355 | XEvent.Severity.Warning,
            XSTATSFD_INVALID_REQUEST_2 = 52356 | XEvent.Severity.Warning,
            XSTATSFD_INVALID_REQUEST_3 = 52357 | XEvent.Severity.Warning,
            XSTATSFD_INVALID_REQUEST_4 = 52360 | XEvent.Severity.Warning,
            XSTATSFD_INVALID_REQUEST_5 = 52361 | XEvent.Severity.Warning,
            XSTATSFD_INVALID_REQUEST_6 = 52362 | XEvent.Severity.Warning,
            XSTATSFD_INVALID_REQUEST_7 = 52363 | XEvent.Severity.Warning,
            XSTATSFD_INVALID_REQUEST_8 = 52364 | XEvent.Severity.Warning,
            STATS_CODE_0 = 58050 | XEvent.Severity.Error,
            STATS_CODE_1 = 58051 | XEvent.Severity.Error,
            STATS_CODE_2 = 58052 | XEvent.Severity.Error,
            STATS_CODE_3 = 58053 | XEvent.Severity.Error,
            STATS_CODE_4 = 58054 | XEvent.Severity.Error,
            STATS_CODE_5 = 58055 | XEvent.Severity.Error,
            STATS_CODE_6 = 58056 | XEvent.Severity.Error,
            MC_APPLICATION_ERROR_9 = 58057 | XEvent.Severity.Error,
            STATS_CODE_8 = 58058 | XEvent.Severity.Error,
            STATS_CODE_9 = 58059 | XEvent.Severity.Error,
            STATS_CODE_10 = 58060 | XEvent.Severity.Error,
            STATS_CODE_11 = 58061 | XEvent.Severity.Error,
            XSTATSFD_DATABASE_ERROR = 58062 | XEvent.Severity.Error,
            MC_APPLICATION_ERROR_10 = 58063 | XEvent.Severity.Error,
            STATS_CODE_14 = 58064 | XEvent.Severity.Error,
            STATS_CODE_15 = 58065 | XEvent.Severity.Error,
            STATS_CODE_16 = 58066 | XEvent.Severity.Error,
            STATS_CODE_17 = 58067 | XEvent.Severity.Error,
            STATS_CODE_18 = 58068 | XEvent.Severity.Error,
            STATS_CODE_19 = 58069 | XEvent.Severity.Error,
            XSTATSFD_INVALID_ATTACHMENT = 58070 | XEvent.Severity.Error,
            XSTATSFD_DATABASE_ERROR_1 = 58071 | XEvent.Severity.Error,
            MC_APPLICATION_ERROR_11 = 58072 | XEvent.Severity.Error,
            MC_APPLICATION_ERROR_12 = 58073 | XEvent.Severity.Error,
            STATS_CODE_24 = 58074 | XEvent.Severity.Error,
            XSTATSFD_DATABASE_ERROR_2 = 58075 | XEvent.Severity.Error,
            STATS_CODE_26 = 58076 | XEvent.Severity.Error,
            STATS_CODE_27 = 58077 | XEvent.Severity.Error,
            STATS_CODE_28 = 58078 | XEvent.Severity.Error,
            STATS_CODE_29 = 58079 | XEvent.Severity.Error,
            STATS_CODE_30 = 58080 | XEvent.Severity.Error,
            STATS_CODE_31 = 58081 | XEvent.Severity.Error,
            STATS_CODE_32 = 58082 | XEvent.Severity.Error,
            STATS_CODE_33 = 58083 | XEvent.Severity.Error,
            STATS_CODE_34 = 58084 | XEvent.Severity.Error,
            STATS_CODE_35 = 58085 | XEvent.Severity.Error,
            STATS_CODE_36 = 58086 | XEvent.Severity.Error,
            STATS_CODE_37 = 58087 | XEvent.Severity.Error,
            STATS_CODE_38 = 58088 | XEvent.Severity.Error,
            STATS_CODE_39 = 58089 | XEvent.Severity.Error,
            STATS_CODE_40 = 58090 | XEvent.Severity.Error,
            STATS_CODE_41 = 58091 | XEvent.Severity.Error,
            STATS_CODE_42 = 58092 | XEvent.Severity.Error,
            STATS_CODE_43 = 58093 | XEvent.Severity.Error,
            XSMT_UNEXPECTED = 58094 | XEvent.Severity.Error,
            XSMT_UNEXPECTED_1 = 58095 | XEvent.Severity.Error,
            XSMT_UNEXPECTED_2 = 58096 | XEvent.Severity.Error,
            XSMT_UNEXPECTED_3 = 58097 | XEvent.Severity.Error,
            XSMT_MEMORY_ERROR = 58098 | XEvent.Severity.Error,
            STATS_CODE_49 = 58099 | XEvent.Severity.Error,
            STATS_CODE_50 = 58100 | XEvent.Severity.Error,
            STATS_CODE_51 = 58101 | XEvent.Severity.Error,
            STATS_CODE_52 = 58102 | XEvent.Severity.Error,
            STATS_CODE_53 = 58103 | XEvent.Severity.Error,
            XSMT_UNEXPECTED_4 = 58104 | XEvent.Severity.Error,
            XSMT_UNEXPECTED_5 = 58105 | XEvent.Severity.Error,
            STATS_CODE_56 = 58106 | XEvent.Severity.Error,
            XSMT_UNEXPECTED_6 = 58107 | XEvent.Severity.Error,
            XSMT_UNEXPECTED_7 = 58108 | XEvent.Severity.Error,
            STATS_CODE_59 = 58109 | XEvent.Severity.Error,
            STATS_CODE_60 = 58110 | XEvent.Severity.Error,
            XSMT_UNEXPECTED_8 = 58111 | XEvent.Severity.Error,
            XSMT_UNEXPECTED_9 = 58112 | XEvent.Severity.Error,
            XSMT_UNEXPECTED_10 = 58113 | XEvent.Severity.Error,
            XSMT_UNEXPECTED_11 = 58114 | XEvent.Severity.Error,
            STATS_CODE_65 = 58115 | XEvent.Severity.Error,
            STATS_CODE_66 = 58116 | XEvent.Severity.Error,
            STATS_CODE_67 = 58117 | XEvent.Severity.Error,
            STATS_CODE_68 = 58118 | XEvent.Severity.Error,
            STATS_CODE_69 = 58119 | XEvent.Severity.Error,
            STATS_CODE_70 = 58120 | XEvent.Severity.Error,
            STATS_CODE_71 = 58121 | XEvent.Severity.Error,
            STATS_CODE_72 = 58122 | XEvent.Severity.Error,
            STATS_CODE_73 = 58123 | XEvent.Severity.Error,
            STATS_CODE_74 = 58124 | XEvent.Severity.Error,
            XSMT_UNEXPECTED_12 = 58125 | XEvent.Severity.Error,
            XSMT_UNEXPECTED_13 = 58126 | XEvent.Severity.Error,
            STATS_CODE_77 = 58127 | XEvent.Severity.Error,
            XSMT_UNEXPECTED_14 = 58128 | XEvent.Severity.Error,
            XSMT_UNEXPECTED_15 = 58129 | XEvent.Severity.Error,
            XSMT_UNEXPECTED_16 = 58130 | XEvent.Severity.Error,
            STATS_CODE_81 = 58131 | XEvent.Severity.Error,
            STATS_CODE_82 = 58132 | XEvent.Severity.Error,
            XSMT_UNEXPECTED_17 = 58133 | XEvent.Severity.Error,
            XSMT_UNEXPECTED_18 = 58134 | XEvent.Severity.Error,
            STATS_CODE_85 = 58135 | XEvent.Severity.Error,
            STATS_CODE_86 = 58136 | XEvent.Severity.Error,
            STATS_CODE_87 = 58137 | XEvent.Severity.Error,
            STATS_CODE_88 = 58138 | XEvent.Severity.Error,
            STATS_CODE_89 = 58139 | XEvent.Severity.Error,
            STATS_CODE_90 = 58140 | XEvent.Severity.Error,
            STATS_CODE_91 = 58141 | XEvent.Severity.Error,
            STATS_CODE_92 = 58142 | XEvent.Severity.Error,
            STATS_CODE_93 = 58143 | XEvent.Severity.Error,
            STATS_CODE_94 = 58144 | XEvent.Severity.Error,
            STATS_CODE_95 = 58145 | XEvent.Severity.Error,
            STATS_CODE_96 = 58146 | XEvent.Severity.Error,
            STATS_CODE_97 = 58147 | XEvent.Severity.Error,
           