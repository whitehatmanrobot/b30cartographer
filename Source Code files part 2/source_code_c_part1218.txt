000073, 0xCCCCCC8C, 0x88CCCCAB, 0x00000031, 0x25010000, 0x66130021, 0x86C9CC9C, 
0x12000F41, 0x00000080, 0x00000000, 0x06120600, 0x006CCCA8, 0x08000000, 0x0000CC00, 0x00000000, 
0x00000000, 0xCCCA9BC9, 0x9999BACC, 0xBC6975C3, 0x9999A9CC, 0xC89A26C1, 0x11112264, 0xAB6923A2, 
0x75B9CBCC, 0x55020020, 0x22122232, 0x00800F12, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 
0x00004400, 0x00000000, 0x00000000, 0x00000000, 0x99CCCACC, 0xA99BCBCC, 0x896766C6, 0xCCCCCCCC, 
0xCBBBBBBB, 0xBBBBBBBB, 0xBAAACBCC, 0x88889988, 0x22954596, 0xAB79A925, 0x12000F36, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0620000, 0x00002000, 0xCCCCACBA, 
0x22222284, 0xCACC8A06, 0x20538688, 0xC8480000, 0x00000041, 0x1084CBCC, 0x6A020000, 0x102185CB, 
0x9C140000, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00000000, 0xCCCCACC9, 0x999999CC, 0x9C6745C3, 0x9999CACC, 0xC7370000, 0x00000030, 
0x8B66C9CC, 0x8799BABB, 0x7487769A, 0xBC6A2322, 0x0080071F, 0x00000020, 0x20000000, 0xA0000800, 
0xAC00800A, 0x44000000, 0x00004400, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xCCBBBBCB, 0x897777C7, 
0x9999CC9C, 0xCBBCCBBC, 0xBBBBBBBC, 0xB8CCCC9A, 0x77B8BA78, 0x77777777, 0x77777777, 0x12000F28, 
0x20000080, 0x00800000, 0x00000000, 0x00000000, 0x00000000, 0x000000C8, 0x00000004, 0x00000000, 
0xBBBBBBCB, 0xCBCCBCBB, 0x9C6745C3, 0x9999B9CA, 0xC9CC6AC2, 0x22222262, 0x22222232, 0x22222222, 
0xC8CC9B24, 0x22223252, 0x12000D18, 0x00000020, 0x00000000, 0x0A000A00, 0x002882CA, 0x02440000, 
0x00202200, 0x00000002, 0x00000000, 0xCC9C99C9, 0x999999C9, 0x8C6745C3, 0x9999A9CC, 0xC95922C2, 
0x22222252, 0x37332232, 0x2294BBBB, 0x22222222, 0x22222222, 0x12000736, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0620000, 0x00002000, 0xACCC9CC5, 0x22222285, 
0xCCBC48C2, 0x22222284, 0xC84811C1, 0x11111142, 0x2185CCCC, 0x8B131111, 0x213296CB, 0x9A251111, 
0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00000000, 0xB9C9CCC9, 0x999999B9, 0xAB6745C3, 0x9999BACC, 0xC95922C2, 0x22222252, 0x7933B6CC, 
0x6A5496BB, 0x33333253, 0xBB5A3233, 0x1200091F, 0x00000020, 0x20000000, 0xA0000800, 0xAC00800A, 
0x44000000, 0x00004400, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xCBCCBBBB, 0xCC8C45C3, 0x9999CBCC, 
0xCCBC5804, 0x0066C7CC, 0xBC790200, 0x1085CBCC, 0x00000000, 0x00000100, 0x12000107, 0xAC000060, 
0x0040A08A, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xAACCACC9, 
0x9999B9CC, 0x8C6745C3, 0x9999B9CC, 0xCC060000, 0x3000B9CB, 0x103285CA, 0x00000000, 0xBC693401, 
0xCCCCCCCC, 0x00800218, 0x00000020, 0x00000000, 0x0A000A00, 0x002882CA, 0x02440000, 0x00202200, 
0x00000002, 0x00000000, 0xCCCCBBCC, 0xA9B9BBCC, 0x896745C3, 0xA9CCCC9C, 0xC7373333, 0x33333354, 
0x419967B8, 0x05000000, 0x7A67A97A, 0xCCCCCCCC, 0x12000736, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xC0680000, 0x00008400, 0xCBCCBC7B, 0x6965A6BC, 0xCCCCCC08, 
0x44A8CAAA, 0xC6060000, 0x00000031, 0x1084CBCC, 0x7A130000, 0x1041B8CB, 0x9C260000, 0x02000701, 
0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 
0xBCBB99C9, 0xB9CACCCC, 0x896745C3, 0xB9CCBC99, 0xC6060000, 0x00003033, 0x7697CBCC, 0xAB785655, 
0x9B99AACC, 0xCCCCCCAB, 0x00670F0A, 0x0606060A, 0x05050506, 0x00000907, 0x00000000, 0x00000700, 
0x07070000, 0x00000000, 0x00000000, 0xC3C3CEC0, 0x4E4EC3C1, 0x0000CEC3, 0x00000000, 0x35357935, 
0x78783535, 0x00003535, 0x00000000, 0xCECE58CE, 0x5757CECE, 0x0000CECE, 0x00000000, 0x00000716, 
0x00000040, 0x00000000, 0xC0460400, 0x2C000006, 0x86000000, 0x00000000, 0x00000000, 0x00000000, 
0xBBBBBBCB, 0xCCCBCCBB, 0x9B6745C3, 0xCCCCBBBB, 0xB7CCCCCC, 0x22222232, 0xCCCCCB6B, 0x22A5CBCC, 
0x00222222, 0x12000000, 0x10000521, 0x86000080, 0xCC86A840, 0x0000800C, 0x00000000, 0x000000CC, 
0x040600AA, 0x00000088, 0x00000004, 0xBCBBBBCB, 0xBBBBCBCC, 0xABBA8AC4, 0x99A9CCCC, 0x95C9CC0C, 
0x22000010, 0x22222232, 0x8A362222, 0xC9CCCCBC, 0x22225385, 0x0000072D, 0x82000060, 0x40840000, 
0x00002A80, 0x00000006, 0x02000600, 0x80AC8628, 0x00000000, 0x00000000, 0xCCAAAAAA, 0xAAAABABC, 
0xCCACCAC8, 0x66A8BCA9, 0xCACCCC9C, 0xC9999999, 0x88ABCBBC, 0x8B6676BA, 0x6666B7AC, 0x67768A66, 
0x12000915, 0x00000060, 0x00000000, 0x44CC0200, 0x00002002, 0x00000000, 0x00004000, 0x00000000, 
0x00000006, 0xCCCCBCB9, 0x4366B8CC, 0xCC9A3500, 0x1041B8CC, 0xCACCCC0C, 0x00238699, 0x53CACCBC, 
0x00000121, 0x00000000, 0x25221100, 0x00000F22, 0x82000080, 0xCC86404A, 0x000080C0, 0x00000000, 
0x0000CC00, 0x4088008A, 0x00000000, 0x00000000, 0x370230B0, 0xCC7B3437, 0xCC8C2500, 0x0030B7CC, 
0xC969A709, 0x00002066, 0x86BABBCB, 0x00001052, 0x58337526, 0x89AACBBB, 0x0C000F06, 0xCA000060, 
0x22C2A62A, 0x00008002, 0x00000000, 0x00006686, 0x004600AA, 0x00000064, 0x00000000, 0x121200B0, 
0xCCAC4623, 0xCCAC2600, 0x000084CC, 0xCC997707, 0x0075CBCC, 0x00001161, 0x13000000, 0xBC9A8957, 
0x76BACCCC, 0x00000739, 0x00000040, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000200, 0x0000000C, 0xCCACCBB9, 0x222284AB, 0xCC8B25C2, 0x222222A6, 0xCA5922C2, 0x22A6CC9B, 
0x222232A6, 0x22222222, 0x59222222, 0xA9CBCCAC, 0x12000D41, 0x00000080, 0x00000000, 0x02020600, 
0x006CCCA8, 0x08000000, 0x0000CC00, 0x00000000, 0x00000000, 0xCCCC99C9, 0x9999CCCC, 0xCCBB9AC5, 
0x999999CC, 0xCB591100, 0xBB77CCCC, 0x99AB69C7, 0xCCCCCCCC, 0x00112284, 0x13101000, 0x00800F12, 
0x82000040, 0x00888000, 0x0800C0A0, 0x00000060, 0x00004400, 0x00000000, 0x00000000, 0x00000000, 
0x9CBCC9CC, 0x9999B99A, 0x896745C3, 0x99CBCCCC, 0xC9691200, 0x00002262, 0xC9CCCCCC, 0x22222242, 
0x22222122, 0x36222234, 0x01000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00000000, 0xCCCC9CC9, 0x999999B9, 0x896745C3, 0x9999CACC, 0xC8692202, 
0x00001152, 0xBACCCCCC, 0xCBBBABAB, 0x88467597, 0x57254265, 0x0080050B, 0xC2000060, 0x20C60C2A, 
0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00000000, 0xCCCCBCCB, 0xCBCCBCCC, 
0x9C9999C9, 0x9999C9CC, 0xCBCCCCBC, 0xBBBBBBBC, 0x999999AB, 0x99999999, 0xCCACB999, 0x99A9BCCC, 
0x10000616, 0x00000040, 0x00000000, 0xC0C60A00, 0x0A000006, 0xA6000000, 0x00000000, 0x00000000, 
0x00000000, 0xCCCCBCCB, 0xCCCCCCCC, 0xAC6745C3, 0x99A9CCCC, 0xC6CCCC0C, 0x54506844, 0xCCCCCCBC, 
0x453364BA, 0x00000021, 0x26412400, 0x12000506, 0xCA000060, 0x22C2A62A, 0x00008002, 0x00000000, 
0x00006686, 0x004600AA, 0x00000044, 0x00000000, 0x10130000, 0xC9CCAC38, 0xCCCCAC06, 0x000073CB, 
0xCC694502, 0x0478CCCC, 0x00000030, 0x00000000, 0xCC791400, 0x6587CBCC, 0x12000F1B, 0x00000060, 
0x00000000, 0x00000000, 0xA08AAC00, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCCCCCB, 
0x999999CC, 0xCCB9CCC8, 0x002096CC, 0xCCCCCC0A, 0x9900CCCC, 0xCCCCCCCC, 0xCC9ACBCC, 0x001072CA, 
0xCCBC9B27, 0x12000945, 0x00000040, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xCCCCCCCC, 0xA99ACACC, 0xCCCCCCC8, 0xA9CBCCCC, 0xCBCCCC0C, 0x0000AABA, 
0xC9CCCCCC, 0x00202066, 0x44768827, 0xCCCC9979, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xCCCC9CC9, 0xCB9999CC, 0x8C6745C3, 
0xC9ACCBCC, 0xC6CCCC0C, 0x00002054, 0x32B7CCCC, 0x99987746, 0x45124286, 0xAB896676, 0x00800816, 
0x00000040, 0x00000000, 0xC0C60A00, 0x0A000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 
0xBBCBBBCB, 0xCBBCBCBC, 0x896745C3, 0xB9C9CC99, 0xA6CCCCCC, 0x22222222, 0xCCCC8BB4, 0x32B6ACCB, 
0x22222222, 0x22222222, 0x0C000528, 0x82000080, 0x00800402, 0x00000000, 0x00000000, 0x00004444, 
0x002000CA, 0x0000000A, 0x00000000, 0xBBBBBBCB, 0xCCBCBBBB, 0xCC6A45C3, 0x9999A9CC, 0x6275C96C, 
0x22222222, 0x34222282, 0x23222222, 0xCBCC7C55, 0x228499A9, 0x0C000739, 0x00000040, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000000C, 0xBC7854B2, 0x000031C9, 
0xCC9C1500, 0x00000084, 0x99051101, 0x1096CCCC, 0x002085CB, 0x00000000, 0x22220000, 0xCCCCBC47, 
0x12000D41, 0x00000080, 0x00000000, 0x02020600, 0x006CCCA8, 0x08000000, 0x0000CC00, 0x00000000, 
0x00000000, 0xCCCC9BC9, 0x9999B9CC, 0xBCBB58C3, 0x999999CB, 0x9B251101, 0xBC77CCBC, 0x348557C5, 
0xBACBCC8C, 0x02002164, 0x02000000, 0x00800912, 0x82000040, 0x00888000, 0x0800C0A0, 0x00000060, 
0x00004400, 0x00000000, 0x00000000, 0x00000000, 0xB99CC9C9, 0x9999AA99, 0x896745C3, 0x9999CBAC, 
0xC8480000, 0x00000040, 0x98CBCCCC, 0x22222242, 0x22221211, 0x67472222, 0x01000701, 0x022CC64C, 
0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xC9CBACC9, 
0x99999999, 0x896745C3, 0x9999B9CC, 0xC8380000, 0x00000040, 0xBCCCCCCC, 0x8488B9BA, 0x22222222, 
0x35442422, 0x00800816, 0x00000040, 0x00000000, 0xC0C60A00, 0x0A000006, 0xA6000000, 0x00000000, 
0x00000000, 0x00000000, 0xBBCBBBCB, 0xCBCCCBCC, 0x896745C3, 0xC999CCCB, 0xA6CCCCCC, 0x22222242, 
0xCAA9BABA, 0x5465869C, 0x33333333, 0x34333333, 0x0C000528, 0x82000080, 0x00800402, 0x00000000, 
0x00000000, 0x00004444, 0x002000CA, 0x0000000A, 0x00000000, 0xBBBBBBCB, 0xCCCCBBBB, 0xCCAB79C3, 
0x9999A9CC, 0x6259C86A, 0x52C96952, 0x22222282, 0x23222222, 0xC7CCCC6B, 0x22223432, 0x0C000732, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000C000, 0x00000008, 
0xCCBC57B2, 0x000021A6, 0xCC9C2600, 0x000030B7, 0x22021101, 0x40C99A58, 0x002022C2, 0x00000000, 
0x69230000, 0x63C9CCAC, 0x12000D41, 0x00000080, 0x00000000, 0x02020600, 0x006CCCA8, 0x08000000, 
0x0000CC00, 0x00000000, 0x00000000, 0xA9CC9CC9, 0x9999BACC, 0xBCAB58C3, 0x999999CB, 0x992512C2, 
0x9C75CCCC, 0x53988AC8, 0xB9CBCC47, 0x02002163, 0x03000000, 0x00800912, 0x82000040, 0x00888000, 
0x0800C0A0, 0x00000060, 0x00004400, 0x00000000, 0x00000000, 0x00000000, 0xCC999BC9, 0x99999ACC, 
0x896745C3, 0x99AACBCA, 0xC84822C2, 0x22222242, 0xB7CCCCCC, 0x22222232, 0x22222222, 0x36223233, 
0x01000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00000000, 0xCCCC9CC9, 0x999999A9, 0x8B8745C3, 0x9999A9CC, 0xC8380000, 0x00000040, 0xBCCCAACA, 
0xCCAC9ABB, 0x675764BA, 0x23222242, 0x0080071F, 0x00000020, 0x20000000, 0xA0000800, 0xAC00800A, 
0x44000000, 0x00004400, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xCCCCCCBC, 0x896745C3, 0x99CCCCBB, 
0xA6C9CC6C, 0x22225232, 0xCCCCABBA, 0x8675BBCB, 0x22222232, 0x24222222, 0x12000521, 0x20000080, 
0xCC284200, 0x0000200C, 0x00000000, 0x000000CC, 0x00000024, 0x00000022, 0x00000000, 0xBBBBBBCB, 
0xCCCCBBBB, 0xCC8B45C3, 0x9999A9CC, 0xC8C9CB0C, 0x30C98867, 0x00121052, 0x69242412, 0xCBCCCCAB, 
0x532532A6, 0x00000739, 0x00000040, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00008000, 0x0000000A, 0xCCAC57B2, 0x000031C9, 0xCCAC2600, 0x00001095, 0x8B041101, 0x40C9CCCC, 
0x002063CB, 0x00000000, 0x23220000, 0xCCCCCC6A, 0x12000D41, 0x00000080, 0x00000000, 0x00000000, 
0x007CCC42, 0x02000000, 0x0000CC00, 0x00000000, 0x00000000, 0xCCBC99C9, 0x9999CCCC, 0xBC9B46C3, 
0x999999CC, 0xCB581101, 0xBC77CCCC, 0xA99A8AC4, 0xA9CBCCAC, 0x02002175, 0x00000000, 0x00800912, 
0x82000040, 0x00888000, 0x0800C0A0, 0x00000060, 0x00004400, 0x00000000, 0x00000000, 0x00000000, 
0x9A99CBCB, 0x9999999A, 0x896745C3, 0x99B9BBCC, 0xC8480000, 0x00000040, 0xA7CCCCCC, 0x22222242, 
0x23221211, 0x48222242, 0x01000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00000000, 0xCBCC9CC9, 0x99999999, 0x896745C3, 0x9999C9CC, 0xC8380000, 
0x00000040, 0xBBCCCCCC, 0xCBAC99B9, 0x46557675, 0x68352232, 0x00800816, 0x00000040, 0x00000000, 
0xC0C60A00, 0x0A000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 0xCBBBBBCB, 0xCCCCCCCC, 
0x896755C4, 0xCC9CCCCC, 0xCBCCCACC, 0x55556597, 0xABCBBBBA, 0x86CABCCC, 0x55555555, 0x56555555, 
0x0C000528, 0x82000080, 0x00800402, 0x00000000, 0x00000000, 0x00004444, 0x002000CA, 0x0000000A, 
0x00000000, 0xBBBBBBCB, 0xCCBCBBBB, 0xCC9B68C3, 0x9999A9CC, 0xCCBB5862, 0x2285BABA, 0x22223286, 
0x22222222, 0xCBCCBB47, 0x8677A9BB, 0x12000D41, 0x00000080, 0x00000000, 0x02020600, 0x006CCCA8, 
0x08000000, 0x0000CC00, 0x00000000, 0x00000000, 0xCC9C99C9, 0x9999C9CC, 0xBCAB48C3, 0x999999CA, 
0xCB881401, 0xAC75CCCC, 0x998A24C1, 0xA8CBCCAC, 0x02002152, 0x00000000, 0x00800912, 0x82000040, 
0x00888000, 0x0800C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00000000, 0x99C9ACCB, 
0x9999999C, 0x896745C3, 0x9999CBCC, 0xC8480000, 0x00000040, 0x94BCCBCC, 0x22222222, 0x22221211, 
0x79242222, 0x01000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00000000, 0xABCA9CC9, 0x999999A9, 0x896745C3, 0x9999C9CC, 0xC8380000, 0x00000040, 
0xBBCCCCCC, 0x976998BB, 0x47643444, 0x69235367, 0x12000511, 0x00000060, 0xC0040400, 0x0000000C, 
0x00000000, 0x00000042, 0x00000000, 0x00000002, 0x00000000, 0xBBBBBBCB, 0xBBBBCBBC, 0x896948C3, 
0x9999CC9C, 0xC9BBCC1C, 0x11112163, 0x00000000, 0x8C130102, 0xB9CCCCCC, 0x00214286, 0x12000914, 
0x00000060, 0x00000000, 0x44C20400, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xB9CCBC58, 0x22226298, 0xCCCA59C1, 0x0073BBCC, 0xC7CCCC3C, 0x33339357, 0x87BBCCCC, 0x00005254, 
0x00000000, 0x49000000, 0x0C00072D, 0x20000060, 0x00200000, 0x00000420, 0x00000000, 0x00000000, 
0x204C2002, 0x00000000, 0x00000000, 0xCCCCBCCB, 0xCABBBCBB, 0xCCAB8AC6, 0x98CACCCC, 0xCCBCCA8A, 
0x8888B8CB, 0x76B9CBCC, 0x67668767, 0xCCBBAB9B, 0xBBBBBBCC, 0x0C800646, 0x86000040, 0x0080C60C, 
0xCC808600, 0x06000064, 0x00000000, 0x00000000, 0x200A0000, 0x00002000, 0xCBA999CB, 0xCBCCCCCC, 
0xBCC848C4, 0x99C9CCCC, 0xCBBBCCAB, 0xAAAAAAAA, 0xCBCCCCCC, 0x42227398, 0xBB582311, 0xCCAA87CB, 
0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00000000, 0xCC9999C9, 0xB99BCCCC, 0x896745C3, 0x9999CC9C, 0xC8484444, 0x44444465, 0x3442A8BA, 
0xBB464674, 0xCCBA9ACB, 0xAAAACACC, 0x12000511, 0x00000060, 0xC0040400, 0x0000000C, 0x00000000, 
0x00000042, 0x00000000, 0x00000002, 0x00000000, 0xBBBBBBCB, 0xBBBBCBBC, 0x896948C3, 0x9999CC9C, 
0xC9BBCC1C, 0x11112163, 0x00000000, 0x8C130102, 0xB9CCCCCC, 0x00214286, 0x06000914, 0x00000060, 
0x00000000, 0x44C20400, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xB9CCBC58, 
0x22226298, 0xCCCA59C1, 0x0073BBCC, 0xC7CCCC3C, 0x33339357, 0x87BBCCCC, 0x00005254, 0x00000000, 
0x49000000, 0x0C000723, 0x60000080, 0x2066000A, 0x000040A0, 0x00000000, 0x0000AC00, 0x00880048, 
0x00000000, 0x00000000, 0xCCCCBCCA, 0xC9BBBCBB, 0xCC8A59C3, 0x99C9CCCC, 0xCCACC848, 0x4444B4CB, 
0x20A7CBCC, 0x13004202, 0xCCBB9B7A, 0xABAABACC, 0x00800F46, 0x86000040, 0x0080C60C, 0xCC808600, 
0x06000064, 0x00000000, 0x00000000, 0x200A0000, 0x00002000, 0xCBA999CB, 0xCBCCCCCC, 0xBCC848C4, 
0x99C9CCCC, 0xCBBBCCAB, 0xAAAAAAAA, 0xCBCCCCCC, 0x42227398, 0xBB582311, 0xCCAA87CB, 0x02000701, 
0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 
0xCC9999C9, 0xB99BCCCC, 0x896745C3, 0x9999CC9C, 0xC8484444, 0x44444465, 0x3442A8BA, 0xBB464674, 
0xCCBA9ACB, 0xAAAACACC, 0x00800816, 0x00000040, 0x00000000, 0xC0C60A00, 0x0A000006, 0xA6000000, 
0x00000000, 0x00000000, 0x00000000, 0xBCBBBBCB, 0xCCBBCCCC, 0xB9CA68C3, 0xCCCCBB9A, 0xC9CCCC0C, 
0x60005763, 0xCCCCCB6B, 0x94B9CCCC, 0x00525522, 0x02000000, 0x0C000528, 0x82000080, 0x00800402, 
0x00000000, 0x00000000, 0x00004444, 0x002000CA, 0x0000000A, 0x00000000, 0xBBBBBBCB, 0xBBBBCCCC, 
0xCC6945C3, 0x9999CBCC, 0x77A8CC6C, 0x22222232, 0x22222272, 0x69762522, 0xBACCCCAA, 0x22426697, 
0x12000914, 0x00000060, 0x00000000, 0x00C20400, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xCCCCBCB9, 0x222263CA, 0xCC7B2300, 0x1021A6CC, 0xC8CC9C06, 0x00001251, 0x84C9CCCC, 
0x00000021, 0x00000000, 0x27221100, 0x12000807, 0xAC000060, 0x00A00080, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x222222B2, 0xCC6A2222, 0xCCAC26C2, 0x2222A6CC, 
0xBC482262, 0x2262C9CC, 0x22222272, 0x22222222, 0xBC6B2322, 0x52BACCCC, 0x12000D41, 0x00000080, 
0x00000000, 0x02020600, 0x006CCCA8, 0x08000000, 0x0000CC00, 0x00000000, 0x00000000, 0xCCCC9AC9, 
0x9999CCCC, 0xCCBB69C3, 0x999999CA, 0x9B251100, 0xBB77CCCC, 0xAB3622C2, 0xCCCCCCCC, 0x00112295, 
0x12101000, 0x00800912, 0x82000040, 0x00888000, 0x0800C0A0, 0x00000000, 0x00004400, 0x00000000, 
0x00000000, 0x00000000, 0x9ACBC9C9, 0x99999999, 0x896745C3, 0x99A99C9B, 0xCA6A2200, 0x00002262, 
0x32C6CCCC, 0x22222222, 0x22222122, 0x36222222, 0x01000701, 0x022CC64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xB9CC99C9, 0x99999999, 0x896745C3, 
0x9999BACC, 0xC86922C2, 0x22222252, 0xBACCCCCC, 0x9897AABA, 0x66242273, 0x65475368, 0x00800716, 
0x00000040, 0x00000000, 0xC0C60A00, 0x2C000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 
0xBCBBBBCB, 0xCCBCCCBC, 0x896745C3, 0xCCCBBB9A, 0xC9BCCC0C, 0x20002273, 0xCCBCAA68, 0x2232C7CC, 
0x11222222, 0x26111111, 0x12000511, 0x42000060, 0xC64A0A00, 0x0000000C, 0x00000000, 0x000000A8, 
0x00000020, 0x00000008, 0x00000004, 0xBCBBBBCB, 0xCBCCCBCC, 0xBBBB8BC4, 0x99A9CACC, 0xC8CCCC0C, 
0x32B73740, 0x22222232, 0x6A232222, 0xCACCCCBC, 0x22223286, 0x0000072D, 0x82000060, 0x40840000, 
0x00002A80, 0x00000006, 0x02000600, 0x80AC8628, 0x00000000, 0x00000000, 0xCCAAAAAA, 0xAAAABABC, 
0xCC8CC8C8, 0x7787CCCC, 0xCACCCC9C, 0xC9999999, 0x88ABCBBC, 0x8B6676BA, 0x6666B7AC, 0x67768A66, 
0x12000917, 0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 0x00AA0000, 0x00000000, 0x00000000, 
0x00000000, 0xCCCC9CB6, 0x2285CBCC, 0xCCA93762, 0x3686B7CC, 0xC9CCCC6A, 0x22252253, 0xB9CCCCBC, 
0x32662463, 0x22222222, 0x25422322, 0x00000704, 0x00C43860, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x462222C2, 0xCBBC79A7, 0xCCAC7BC3, 0x00202296, 
0xC85822C2, 0x22222252, 0xA9AACCCC, 0x22222252, 0x22422222, 0xCCBB3722, 0x06000F0B, 0xC2000060, 
0x20C60C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00000000, 0x111111B1, 
0xCC8B1522, 0xCC8C4800, 0x000084CC, 0xCC9A1503, 0x1024A6CC, 0x00001131, 0x10000000, 0xBC8A4611, 
0x2285C9CC, 0x12000D13, 0x00000060, 0x00000000, 0xAAA20C00, 0x2820CA8C, 0x66660000, 0x0046AC00, 
0x00000064, 0x00000000, 0xCCBC99C9, 0x99B9CBCC, 0xCCBA89C4, 0x999999CC, 0xCA591100, 0x9A75CCCC, 
0x7B9725C2, 0xB9CCCCCC, 0x00112242, 0x12101000, 0x0080090A, 0xAC000060, 0x00A0C060, 0x0000A000, 
0x00000000, 0x000000AA, 0x00020002, 0x00000002, 0x00000000, 0x99CCCACC, 0x9999B99A, 0x898745C3, 
0x9999CCBC, 0xC96922C2, 0x22222262, 0xBBCCCCCB, 0x222242A7, 0x22222122, 0x36228425, 0x01000701, 
0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 
0xCACC9CCB, 0x99999999, 0x896745C3, 0x9999CACC, 0xC86922C2, 0x22222252, 0xB7CCCCCC, 0x3266996A, 
0x22222222, 0x59445634, 0x00680907, 0x07080A0B, 0x00070707, 0x00000000, 0x00000000, 0x00070000, 
0x00000000, 0x00000000, 0x00000000, 0xC14EC1C1, 0x00C1C1C1, 0x00000000, 0x00000000, 0xBD78BDBD, 
0x00BDBDBD, 0x00000000, 0x00000000, 0xBE57BEBE, 0x00BEBEBE, 0x00000000, 0x00000000, 0x00800716, 
0x00000040, 0x00000000, 0xC0C60A00, 0x5C000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 
0xBBBBBBCB, 0xCCCCBBBB, 0x896745C3, 0x9999CCBC, 0xC8CCCC09, 0x11002046, 0xCCCCCCCA, 0x122352A7, 
0x11111111, 0x24111111, 0x12000128, 0x82000080, 0x00800822, 0x00000006, 0x00000000, 0x00004444, 
0x002000CA, 0x0000000A, 0x00000000, 0xBCBBBBCB, 0xBBBBBBCC, 0xAC6745C3, 0x9999A9CC, 0xC9CCBB0A, 
0x02103352, 0x22222262, 0x22222222, 0xCCBB6A23, 0x6497CBCC, 0x00000F2D, 0x82000060, 0x40840000, 
0x00002A80, 0x00000006, 0x02000600, 0x80AC8628, 0x00000000, 0x00000000, 0x54C9C8BC, 0x778B8B8C, 
0xCCCC8CC4, 0x222262C9, 0xC9CCCCCC, 0x222242C8, 0x306687CA, 0x00000000, 0x67476403, 0xCCCCBAAA, 
0x0E000F14, 0x00000060, 0x00000000, 0xAAC80A00, 0x00000004, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x95CCBCBB, 0x22222222, 0xCC6A3462, 0x2222A6CC, 0xCBCC6A62, 0x22222295, 0x74CCBCAB, 
0x22222232, 0x22222223, 0x36222222, 0x0A000F0A, 0xAC000060, 0x00A0C060, 0x0000A000, 0x00000000, 
0x000000AA, 0x00020002, 0x00000002, 0x00000000, 0x999999B9, 0xCCCCCCAC, 0x896745C3, 0xA9CBCC9A, 
0xCBCBCC6B, 0x963577B9, 0x323465B5, 0x22222222, 0x8B573522, 0x86CCCCCC, 0x00000F30, 0x80000060, 
0x00800000, 0x00000000, 0x00000000, 0x00400040, 0x08008228, 0x000000CA, 0x00000000, 0x7A1311B1, 
0x5264CAAC, 0xCC4811C1, 0x31B7CA8A, 0xCB7BC9CB, 0x331143A6, 0x11111131, 0x11111111, 0x9A251111, 
0x95BACCCC, 0x00000733, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000C00, 0x00000000, 0xBABC68C4, 0x44444475, 0xCC9A36C2, 0x222252C9, 0x753533C3, 0xBC336943, 
0x22224297, 0x22222222, 0xBC7B3422, 0x99CBCCCB, 0x0000082D, 0x82000060, 0x40840000, 0x00002A80, 
0x00000006, 0x02000600, 0x80AC8628, 0x00000000, 0x00000000, 0x58C9CCBC, 0x00000340, 0xCC7B03B0, 
0x0020A6CC, 0xC8CCCC08, 0x00000073, 0x330141CA, 0x01003042, 0x00003135, 0xCCAC2500, 0x08000917, 
0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 0x00AA0000, 0x00000000, 0x00000000, 0x00000000, 
0x999A99C9, 0xCBCCCC9C, 0x896745C3, 0x99B9CC9C, 0xC8CCCC0B, 0x00102285, 0xBACCCCCC, 0x11212175, 
0x11001100, 0x48232111, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 
0x00000000, 0x00000000, 0x00000000, 0xB9999CCA, 0xAA9999C9, 0x896745C3, 0xA9CACC99, 0xC8380000, 
0x00000040, 0xCCBCBBCA, 0x123298CB, 0x66485425, 0xC99A5554, 0x01000701, 0x022CC64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0x9A9999C9, 0xCCCCB99C, 
0x896745C3, 0x99A9CCBC, 0xC9591101, 0x21004063, 0xAABACCCC, 0x22223464, 0x69342222, 0xCCCCCCCC, 
0x0080070B, 0xC2000060, 0x20C60C0A, 0x00000008, 0x00000000, 0x00000040, 0x00060000, 0x00000060, 
0x00000000, 0xCCCCBCCB, 0xBCBBBBBB, 0xCA6845C3, 0xC9BCCCAB, 0xCACCCC0C, 0x00002094, 0x3077A989, 
0x00000000, 0x8A687626, 0xB9CCCCCC, 0x00800716, 0x00000040, 0x00000000, 0xC0C60A00, 0x5C000006, 
0xA6000000, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xCCBCBBBB, 0x896745C3, 0x99BACC9C, 
0xC8CCCC09, 0x11001041, 0xA9CCCCCC, 0x22114165, 0x11111111, 0x38111111, 0x12000140, 0xC8000080, 
0x41C40C2A, 0x00000008, 0x00000000, 0x00000000, 0x000000CC, 0x00000000, 0x00000000, 0xBBBBBBCB, 
0xBBBBBBCC, 0xAC6745C3, 0x9999A9CC, 0xCBCC9A05, 0x02204177, 0x22222262, 0x22222222, 0xCCBB6A23, 
0x6497CBCC, 0x06000F13, 0x00000060, 0x00000000, 0xAAA20C00, 0x282022CC, 0x66660000, 0x0046AA00, 
0x00000064, 0x00000000, 0xCCCCBCB8, 0x00000082, 0xCC7B0300, 0x000084CC, 0xCCAC4702, 0x0010A6CB, 
0xCBCCBC69, 0x003264A9, 0x01000000, 0x01111100, 0x00000704, 0x00C42860, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCC9CB5, 0x11112195, 0xCC9C1500, 
0x002062CA, 0xC9380000, 0x00002262, 0x643553C3, 0x11111121, 0x7B231111, 0x7497BBCC, 0x0080061F, 
0x00000020, 0x00000000, 0xA0000000, 0xAC000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xC8CCBBBB, 0x22222244, 0xCC480000, 0x0021A6CC, 0xCC9B3672, 0x2262C9CC, 0xCCCCBB8B, 0x111141C9, 
0x11111111, 0x12111111, 0x12000542, 0xCC000040, 0x20C60C4C, 0x00000008, 0x00002000, 0x00000020, 
0x0022006A, 0x00000022, 0x00000000, 0x6A2422B0, 0xA6BACBCC, 0x47020000, 0x52C9CCBC, 0xCCCABB08, 
0x9654C9CC, 0x002122B4, 0x00000000, 0x5B220100, 0xCACCCCCC, 0x12000943, 0x00000040, 0x00000000, 
0x0CC40C00, 0x000442C6, 0x22000000, 0x00006200, 0x00000000, 0x00000000, 0xBC9A99C9, 0xB9CCCCCC, 
0x896745C3, 0x99CBCC9C, 0xC8CCCC0C, 0x01117886, 0xB9CCCCCC, 0x11212176, 0x11001000, 0xAB252111, 
0x00800912, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 
0x00000000, 0x999C9BCB, 0xCAABBB9B, 0x896745C3, 0xBACBCC99, 0xC8380000, 0x00000040, 0xCCCCBCCB, 
0x123298CB, 0x66482222, 0xCA9A6867, 0x01000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00000000, 0x9C9999C9, 0xB9BBCCCC, 0x896745C3, 0x99B9CC9C, 
0xC9591101, 0x21002062, 0x97B9CCCC, 0x23222354, 0xAC684523, 0xCCCCCCCC, 0x10000736, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0020000, 0x00002000, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 
0xCCCCCCCC, 0x0C00050B, 0xC2000060, 0x20C60C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 
0x00000064, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 
0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x0C000918, 0x00000020, 0x00000000, 0x0A000A00, 
0x002882CA, 0x02440000, 0x00202200, 0x00000002, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x0C000702, 
0x0048CA6C, 0x00000000, 0x00400000, 0x00000000, 0x00000000, 0x00000000, 0x00040000, 0x00000000, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 
0xCCCCCCCC, 0xCCCCCCCC, 0x0C00050B, 0xC0000060, 0x00C00C04, 0x00000002, 0x00000000, 0x00000000, 
0x00000002, 0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCCCC, 
0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x0C000918, 0x00000020, 0x00000000, 
0x0A000A00, 0x002882CA, 0x02440000, 0x00202200, 0x00000002, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 
0x00800912, 0x20000040, 0x00222000, 0x0000C040, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 
0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x00800916, 0x00000040, 
0x00000000, 0xC0C60A00, 0x5C000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBCB, 
0xCCCCBCBB, 0x896745C3, 0x99A9CCAC, 0xC8CCCCC9, 0x22622242, 0xCCCCCCCA, 0x120030B6, 0x00000000, 
0x25000000, 0x12000128, 0x82000080, 0x00800422, 0x00000002, 0x00000000, 0x00004444, 0x008000CA, 
0x0000000A, 0x00000000, 0xBBBBBBCB, 0xBBBBCBCC, 0x8A6745C3, 0x9999A9CC, 0x52B9BC6B, 0x52B88865, 
0x22222262, 0x22222222, 0xCCBB6A23, 0x6497CBCC, 0x10000739, 0x25000040, 0x00000010, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00008000, 0x0000000C, 0xBCBBBBB7, 0x9A3662CA, 0xCCBB5762, 
0x429769B7, 0xC9696367, 0xCC88CCCC, 0x222252C9, 0x22222222, 0x22222222, 0xCCCC6B23, 0x00000730, 
0x80000060, 0x00800000, 0x00000000, 0x00000000, 0x00400040, 0x08008228, 0x000000CA, 0x00000000, 
0xA6CCBBC7, 0x22222222, 0xCCAA36C2, 0x222262CA, 0xCBBCBCCC, 0xA73573CB, 0x22222292, 0x22222222, 
0x7B232222, 0x98AACCCC, 0x12000917, 0x00000040, 0x00000000, 0x0CC60A00, 0x000311A6, 0x00AA0000, 
0x00000000, 0x00000000, 0x00000000, 0xCBCC9CC9, 0xA999B9BC, 0x896755C3, 0x9999CABC, 0xC9CCCC6B, 
0x22222252, 0xB7CCCCCC, 0x22324545, 0x22322222, 0x79662422, 0x00800812, 0x82000040, 0x00888000, 
0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00000000, 0xCBCCCCCC, 0xBBCCBCBB, 
0x896766C6, 0xAACACB9A, 0xC96966C6, 0x66666666, 0xCCCCCCCC, 0x678898CB, 0x88888988, 0xCCAB8A88, 
0x01000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00000000, 0xC9CAACC9, 0x9999C9BB, 0x896745C3, 0x9999CABC, 0xC9592262, 0x22222262, 0x6386BBCB, 
0x22227424, 0xBB682322, 0xCBCCCCCC, 0x0A00061F, 0x00000020, 0x20000000, 0xA0000800, 0xAC00800A, 
0x44000000, 0x00004400, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xCCBCBBBB, 0x896745C3, 0x99A9CCAC, 
0xC8CCCC0C, 0x11001041, 0xCBCCCCCB, 0x122363A8, 0x00000000, 0x24000000, 0x1200010E, 0x00000060, 
0xC80A0000, 0x000000AC, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x8C0400C0, 
0x89CCCCC8, 0xBBAB46C2, 0x222252B9, 0xB8CCBC6A, 0x22222252, 0x22222262, 0x45232222, 0xCABBBB7A, 
0x22222252, 0x12000917, 0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 0x00AA0000, 0x00000000, 
0x00000000, 0x00000000, 0xA9CBBCBB, 0x00000052, 0xCC7B0300, 0x000073CB, 0xCCCC5802, 0x0041B9A8, 
0xC6CCBCAB, 0x00222232, 0x01000000, 0x03111100, 0x12000506, 0xCA000060, 0x22C2A62A, 0x00008002, 
0x00000000, 0x00006686, 0x004600AA, 0x00000044, 0x00000000, 0x6A2222B2, 0xBBBBCBCC, 0x25222262, 
0x95CBCC9A, 0xCBCACA6C, 0x8954C9BC, 0x222232B6, 0x22222222, 0x9B242222, 0x89CACCCC, 0x0E000943, 
0x00000040, 0x00000000, 0x0CC40C00, 0x000221C6, 0x22000000, 0x00006200, 0x00000000, 0x00000000, 
0x9C9999C9, 0xC9ACCCCC, 0x896745C3, 0x99A9CC9C, 0xC9CCBC08, 0x00003285, 0xB8CCCCCC, 0x11233165, 
0x11001000, 0x58232111, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 
0x00000000, 0x00000000, 0x00000000, 0xCACCCCCC, 0xBBCCBCAB, 0x896745C3, 0x99CACC99, 0xC6060000, 
0x00000031, 0xCCCCCCCC, 0x124498CB, 0x66585645, 0xCC9A5855, 0x01000701, 0x022CC64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0x9C999AC9, 0xC9ACCCCC, 
0x896745C3, 0x99B9CC9C, 0xC95922C2, 0x22225263, 0x97B9CCCC, 0x22226365, 0xAC372222, 0xCCCCCCCC, 
0x00800716, 0x00000040, 0x00000000, 0xC0C60A00, 0x5C000006, 0xA6000000, 0x00000000, 0x00000000, 
0x00000000, 0xBBBBBBCB, 0xCCCCBBBB, 0x896745C3, 0x9999CCBC, 0xC8CC6A02, 0x11001041, 0xCCCC5AC4, 
0x120054B8, 0x00000000, 0x22000000, 0x10000140, 0xC8000080, 0x41C40C0A, 0x00000028, 0x00000000, 
0x00000000, 0x000000CC, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xBBBBBBCC, 0xAC6745C3, 0x9999A9CC, 
0xB8CCBB07, 0x00002142, 0x00000010, 0x01000000, 0xCCBB5802, 0x4297CBCC, 0x12000F14, 0x00000060, 
0x00000000, 0xAAC80A00, 0x00000004, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCBCCBCB8, 
0x00100072, 0xAC370200, 0x000084CC, 0xC9CC8B04, 0x00002262, 0x73CCBC8B, 0x00222222, 0x01000000, 
0x02111100, 0x12000506, 0xCA000060, 0x00C04034, 0x00002000, 0x00000000, 0x00000060, 0x00000068, 
0x00000000, 0x00000000, 0x7A2322B2, 0x96BACBCC, 0x37222262, 0x62CACCAC, 0xC9CCCC6C, 0x42222262, 
0x222222B2, 0x22222222, 0xBB7A2423, 0x2243C8CC, 0x12000943, 0x00000040, 0x00000000, 0x0CC40C00, 
0x000221C6, 0x22000000, 0x00006200, 0x00000000, 0x00000000, 0xAB9999C9, 0xC9CCCCCC, 0x896745C3, 
0x99A9CCAC, 0xC8CCCC0B, 0x00002385, 0xB9CCCCCC, 0x11212174, 0x11001000, 0x68242111, 0x00800812, 
0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00000000, 
0x9AC999C9, 0x99C9CB9C, 0x896745C3, 0xA9CACC9A, 0xC7370000, 0x00000031, 0xCCBCBBCB, 0x123298CB, 
0x66582222, 0xC99A5554, 0x01000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00000000, 0x9B9999C9, 0xC9CCCCCC, 0x896745C3, 0x99A9CCBC, 0xCAAA56C8, 
0x2231B76A, 0x98BACCCC, 0x22222364, 0x69242222, 0xCCCCCCBC, 0x00800916, 0x00000040, 0x00000000, 
0xC0C60A00, 0x5C000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 0xBBCBBBCB, 0xCCCCCCCC, 
0x896745C3, 0x99BBCCBC, 0xA6CCCBCA, 0x22742422, 0xCCCCCCC9, 0x221141B9, 0x11111111, 0x23111111, 
0x12000111, 0x00000060, 0xC6AA0400, 0x0000000C, 0x00000000, 0x00000000, 0x00000022, 0x00000000, 
0x00000000, 0xBBBBBBCB, 0xCBCBCCCC, 0xAC8745C3, 0x9999AACC, 0x98CCBB6B, 0x52B87A79, 0x22222262, 
0x36222222, 0xCCBBBB9B, 0x4278C8CC, 0x12000739, 0x00000040, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00008000, 0x0000000C, 0xCABCBBB7, 0x222262C9, 0xCCBB7A65, 0x222222A6, 
0xCC59A666, 0xBCA8CCC9, 0x222232B7, 0x22222222, 0x22222222, 0xCCCC6B23, 0x00000730, 0x80000060, 
0x00800000, 0x00000000, 0x00000000, 0x00400040, 0x08008228, 0x000000CA, 0x00000000, 0xA7CC9AC7, 
0x76878888, 0xCC7A55C5, 0x557688CA, 0xCA99CBCC, 0x7754CAAC, 0x55555596, 0x55555555, 0xBC7B5555, 
0x87CBCCCC, 0x12000917, 0x00000040, 0x00000000, 0x0CC60A00, 0x000311A6, 0x00AA0000, 0x00000000, 
0x00000000, 0x00000000, 0xC9CC9CC9, 0x9999C999, 0x898746C3, 0x9999CABC, 0xC9CBBC68, 0x22222252, 
0xBACCCCCC, 0x22222252, 0x22642422, 0x5A222222, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 
0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00000000, 0xCBCCCCCC, 0xBBCCBCBB, 0x896766C6, 
0x99CBCC9A, 0xC9696666, 0x66666676, 0xCCCCCCCC, 0x678898CB, 0x88888988, 0xCCAB8A88, 0x01000701, 
0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 
0xCACCACC9, 0x9999CCB9, 0x899746C3, 0x9999CABC, 0xC95922C2, 0x22222262, 0x97B9CCCC, 0x22222354, 
0xAC362222, 0xCCCCCCCC, 0x01693A09, 0x06060507, 0x06050705, 0x00000003, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xC1C1C1C1, 0xC1C1C1C1, 0x000000CF, 0x00000000, 0x68686868, 
0x68686868, 0x0000006C, 0x00000000, 0x47574747, 0x47574747, 0x0000004B, 0x00000000, 0x00800716, 
0x00000040, 0x00000000, 0xC0C60A00, 0x5C000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 
0xCBCBBBCB, 0xBBBBBBBB, 0x8A6745C3, 0xA99ACCBC, 0xCBCAA8C6, 0x111152B9, 0xCCCCACBA, 0x210030B9, 
0x02200020, 0x14000020, 0x0A000F34, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00C00000, 0x00006000, 0x002022B2, 0xCCCCBC37, 0xCCAC2600, 0x001095CC, 0xC8480000, 
0x00000041, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x12000507, 0xAC000060, 0x0040A08A, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000004, 0xBCBBBBCB, 0xBBBBCCCC, 
0x896745C3, 0xA9CCCCBC, 0xCBCBCC6A, 0x8B85BBCB, 0x22224296, 0x22222222, 0x7C242222, 0xAABBBBCC, 
0x00000733, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000800, 
0x00000000, 0xBBBC68C2, 0x22222275, 0xCCAB26C2, 0x222252C9, 0x222222C2, 0xAC232222, 0x22222292, 
0x22222222, 0xBC5A2222, 0x53B9CCCB, 0x10000F43, 0x00000040, 0x00000000, 0x0CC40C00, 0x000200C8, 
0x22000000, 0x00006200, 0x00000000, 0x00000000, 0x9C9999B9, 0xCCCCCCCC, 0x8A6745C3, 0x99A9CBCC, 
0xC9BB5802, 0x30012262, 0xCCCCCCBC, 0x22225498, 0x23001001, 0x36214224, 0x00800812, 0x82000040, 
0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00000000, 0xCCA9C9C9, 
0x9B9CCCCC, 0x896745C3, 0xABCCAC9B, 0xC7370000, 0x00000031, 0xCACCCCCB, 0x11222252, 0x12722311, 
0xBCBB3722, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00000000, 0x9B9999C9, 0xCCCCCCCC, 0x896745C3, 0x99C9CCCC, 0xC9592202, 0x00002262, 
0xA9BBABC9, 0x22233363, 0xBC593422, 0xAABBCCCC, 0x00800716, 0x00000040, 0x00000000, 0xC0C60A00, 
0x5C000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 0xCBBCBBCB, 0xBBBBBBBB, 0x896745C3, 
0x9999CCBC, 0xCBBC5802, 0x00002195, 0xCCCCCCBA, 0x210030B8, 0x02200020, 0x13000020, 0x01000F34, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00C00000, 0x00006000, 
0x002022B2, 0xC9CCAC16, 0xCCCC4800, 0x000040C8, 0xC8480000, 0x00000041, 0xCCCCCCCC, 0xCCCCCCCC, 
0xCCCCCCCC, 0xCCCCCCCC, 0x1000050B, 0xC8000060, 0x20C60C2A, 0x00004008, 0x00000000, 0x00000044, 
0x00460068, 0x00000064, 0x00660004, 0xBCBBBBCB, 0xBBBBCBCC, 0x896745C3, 0x99CACCAC, 0xCCCCCC0A, 
0x321064A7, 0x22100020, 0x00000021, 0xCCAC4722, 0x2354A7CC, 0x0E000F43, 0x00000040, 0x00000000, 
0x0CC40C00, 0x000200C6, 0x22000000, 0x00006200, 0x00000000, 0x00000000, 0x9B9999C9, 0xC9CCCCCC, 
0x896745C3, 0x99B9CCBC, 0xC99B8807, 0x00022252, 0xCACCCCCC, 0x01002264, 0x22010011, 0x69554422, 
0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00000000, 0x9A9999C9, 0xCACCCCCC, 0x896745C3, 0x99B9CCBC, 0xCCA976CB, 0x6A22B88B, 0x228599C8, 
0x01012232, 0xBC482222, 0xBBBACCCC, 0x00800716, 0x00000040, 0x00000000, 0xC0C60A00, 0x5C000006, 
0xA6000000, 0x00000000, 0x00000000, 0x00000000, 0xBBCBBBCB, 0xBBBBBBBB, 0x896745C3, 0x99A9CCAC, 
0xC9BC4702, 0x00102284, 0xC9CCCCBA, 0x21005177, 0x02200020, 0x14000020, 0x06000F34, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00C00000, 0x00006000, 0x002022B2, 
0xC9CCAC26, 0xCCCC4800, 0x000040C8, 0xC8480000, 0x00000041, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 
0xCCCCCCCC, 0x10000529, 0xA2000060, 0x00A00806, 0x00000000, 0x00000000, 0x00008888, 0x008000AC, 
0x00000006, 0x00000004, 0xBBBBBBCB, 0xBBBBCBCC, 0x896745C3, 0x99A9CCBC, 0xA6CCCC6C, 0x22222232, 
0x24222272, 0x22222222, 0xCCBC4643, 0x222243C7, 0x0E000F43, 0x00000040, 0x00000000, 0x0CC40C00, 
0x000200C6, 0x22000000, 0x00006200, 0x00000000, 0x00000000, 0x9C9999B9, 0x99CCCCCC, 0x8A6745C3, 
0x9999CBCC, 0xC9CCBC09, 0x00022252, 0xBBCCCCBC, 0x22425476, 0x25210101, 0x24314234, 0x00800812, 
0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00000000, 
0xCC9CB9CC, 0xCC99CCCC, 0x896745C3, 0xCBCCCCAC, 0xC73711C1, 0x11111132, 0xCBCCCCCC, 0x11324574, 
0x12212212, 0xCCBC9A58, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00000000, 0xC99999C9, 0xBCCBCCCC, 0x896745C3, 0x99A9CCCC, 0xC9592203, 
0x00006266, 0xBACCBBCB, 0x22334363, 0xBC593422, 0xABBBCCCC, 0x00000507, 0xAC000060, 0x0040A08A, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000004, 0xCCCBBBCB, 0xBBBBBCCC, 
0x896745C3, 0xA9BBCCBC, 0xCBBACC6A, 0xA976999A, 0x222232A5, 0x22222222, 0x35333322, 0xBB583333, 
0x12000F34, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00202002, 0x20C00002, 
0x0000A600, 0x222222B2, 0xC8CCAC26, 0xCC8C24C2, 0x2242C8CC, 0xC96922C2, 0x22222262, 0xCCCCCCCC, 
0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x12000530, 0x20000060, 0x00200000, 0x00000000, 0x00000000, 
0x00000000, 0x02002002, 0x000000C4, 0x00C00000, 0x8AB737C2, 0x8C84CCCC, 0xB73722C2, 0x95BCCCBC, 
0xCCCACCCC, 0x222262B9, 0x22222284, 0x22222222, 0x8B872522, 0xAABBCCBC, 0x10000943, 0x00000040, 
0x00000000, 0x0CC40C00, 0x000200C8, 0x22000000, 0x00006200, 0x00000000, 0x00000000, 0xB99B99B9, 
0xCB9CCCBC, 0xB96745C3, 0x99A9CBBC, 0xCB7A55C5, 0x33335596, 0xC8CCCCAB, 0x22222242, 0x22222222, 
0x36222222, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 
0x00000000, 0x00000000, 0xCCA9AAC9, 0xB9B9CCCC, 0x896745C3, 0xCACCCCAC, 0xC6060000, 0x00000031, 
0xCBCCCCCC, 0x004366A9, 0x02202201, 0xCCBC7A55, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0x9B9999C9, 0xCCACCCCC, 0x9A6745C3, 
0x99C9CAAC, 0xCA6A22C2, 0x11112262, 0xA9CBABC9, 0x22233363, 0xBC793422, 0xAABBCCCC, 0x12000F34, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00C00000, 0x00006000, 
0xB96922B2, 0xCACACCCC, 0xA7CCCCC8, 0x22222243, 0xC96922C2, 0x22222262, 0xCCCCCCCC, 0xCCCCCCCC, 
0xCCCCCCCC, 0xCCCCCCCC, 0x12000739, 0x00000040, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x0000000C, 0xCC8C24C2, 0x2232A6CC, 0x9CB98BC5, 0x2295CCCC, 0xC95922C2, 
0x8C85CCAC, 0x222263CA, 0x22222222, 0x22222222, 0xBB6A2322, 0x10000F43, 0x00000040, 0x00000000, 
0x0CC40C00, 0x000200C8, 0x22000000, 0x00006200, 0x00000000, 0x00000000, 0xAC9999B9, 0xA9ABCCCC, 
0x896745C3, 0xA9BBCBAC, 0xCACA59C2, 0x222232A7, 0xCBCCCCCC, 0x222295BA, 0x22222222, 0x88252223, 
0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 
0x00000000, 0xCCA9AAC9, 0xB9B9CCCC, 0x896745C3, 0xCACCCCAC, 0xC6060000, 0x00000031, 0xCBCCCCCC, 
0x004366A9, 0x02202201, 0xCCBC7A55, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xCB9C99C9, 0xC9C9CCCC, 0x896745C3, 0x99CBCCCC, 
0xCA6A22C3, 0x11113263, 0x9A897875, 0x22223263, 0xAA492322, 0xAB9A9BAA, 0x00800716, 0x00000040, 
0x00000000, 0xC0C60A00, 0x5C000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 0xCCBCBBCB, 
0xBBBBBBBB, 0x8B6746C3, 0x99C9BCCC, 0xCCCCBB08, 0x00005077, 0xCCCCCCBC, 0x000030A7, 0x00000000, 
0x13000000, 0x1000050B, 0xCA000060, 0x20C60C8A, 0x00004008, 0x00000000, 0x00000044, 0x004600AC, 
0x000000C4, 0x00C60004, 0xBCBBBBCB, 0xBBBBCBCC, 0x896745C3, 0x99B9CCBC, 0xC9CCCC0C, 0x46205774, 
0x00103294, 0x00000012, 0xCCAC7825, 0x7974B9CC, 0x0E000F43, 0x00000040, 0x00000000, 0x0CC40C00, 
0x000200C6, 0x22000000, 0x00006200, 0x00000000, 0x00000000, 0x9C9999C9, 0xB9BBCCCC, 0x896745C3, 
0x99B9CCBC, 0xC8CCCC0B, 0x00012274, 0xCCCCCCAC, 0x224296CB, 0x01000010, 0x14002000, 0x00800812, 
0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00000000, 
0xCB9C9CCC, 0x9CCCB99B, 0x896745C3, 0xCBCC9AAC, 0xC73722C2, 0x22222232, 0xCCCBA98B, 0x2163C9CC, 
0x64221111, 0x23314833, 0x00000702, 0x00C8CA6C, 0x00000000, 0x00400000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xA99999C9, 0xCBBCCCCC, 0x896745C3, 0x99B9CCCC, 0xC8380000, 
0x00000040, 0xA9BBBBCB, 0x22333363, 0xBC593422, 0xABBBCCCC, 0x12000F34, 0x00000020, 0x10020403, 
0x00000013, 0x00000000, 0x00000000, 0x00000000, 0x00C00000, 0x00008100, 0x577556C3, 0xCCCCCC8B, 
0xCCCCAC06, 0x010030B7, 0xC88ABA0A, 0x36002342, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 
0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00000000, 0x9A9999C9, 0xCCCCCCCC, 0x896745C3, 0x99C9CCBC, 0xCA6AA8C6, 0x02002262, 0x7B8667C6, 
0xCC8BB8CC, 0x023087CA, 0x20427767, 0x00800716, 0x00000040, 0x00000000, 0xC0C60A00, 0x5C000006, 
0xA6000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCCBCCB, 0xCBCCCBCC, 0x896745C3, 0x99CCCCCC, 
0xC9CCCC0B, 0x00102273, 0xCBCCCC9C, 0x21002096, 0x23200020, 0x14000120, 0x1000050B, 0xC8000060, 
0x20C60C2A, 0x00004008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00660004, 0xCCBBBBCB, 
0xBBBBCCCC, 0x896745C3, 0x99B9CCAC, 0xCCCC5902, 0x1120A6BB, 0x52120051, 0x00000021, 0xCCAC4722, 
0x6377B9CC, 0x0E000F43, 0x00000040, 0x00000000, 0x00640C00, 0x0000C00C, 0x00000000, 0x00006200, 
0x00000000, 0x00000000, 0x52B759B2, 0xBABB7B26, 0xCCBB37C1, 0x212262CA, 0xC9CCB9C7, 0x22222252, 
0xCCCC5992, 0x2242A7CA, 0x22000001, 0x22212222, 0x12800812, 0x00000040, 0x00000000, 0x0000C0A0, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xAA9999C9, 0x999CCCCC, 0x8B6745C3, 
0x9999CABC, 0xC8380000, 0x00000040, 0x66B99AC8, 0x00223286, 0x03202201, 0xCBBCBB9B, 0x12000701, 
0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 
0x9C9999C9, 0xCCCACCCC, 0x896745C3, 0x99A9CCBC, 0xC9592202, 0x00002262, 0xBCBBABC9, 0x7576BACB, 
0xBC593452, 0xAABBCCCC, 0x00800716, 0x00000040, 0x00000000, 0xC0C60A00, 0x5C000006, 0xA6000000, 
0x00000000, 0x00000000, 0x00000000, 0xCCCCBCCB, 0xCBCCCBCC, 0x896745C3, 0x99CCCCCC, 0xC9CCCC0B, 
0x00102273, 0xCBCCCC9C, 0x21002096, 0x23200020, 0x14000120, 0x01000F34, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00C00000, 0x00006000, 0x000000B0, 0xC9CC9C16, 
0xCCBC3700, 0x000040C8, 0xC8480000, 0x00000041, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 
0x1000050B, 0xC8000060, 0x20C60C2A, 0x00004008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 
0x00660004, 0xBBBBBBCB, 0xBBBBCCCC, 0x896745C3, 0x99B9CCAC, 0xCBCCCC0A, 0x11001184, 0x22100072, 
0x00000021, 0xCCAC4722, 0x4453B8CC, 0x0E000F43, 0x00000040, 0x00000000, 0x0CC40C00, 0x000200C6, 
0x22000000, 0x00006200, 0x00000000, 0x00000000, 0xCBCCABB7, 0x968A2695, 0xCC6A1300, 0x2085CBCC, 
0xC9CC9C06, 0x00012252, 0xCCCCCC9C, 0x222255A8, 0x22000001, 0x24212222, 0x12000812, 0x82000040, 
0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00000000, 0xACB9BBCA, 
0xCCBBCCCC, 0x8A6745C3, 0xBACCCCBC, 0xC75911C1, 0x7B131132, 0xCBCCCCCC, 0x002264A9, 0x66572501, 
0xA89A8987, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00000000, 0x9B9999C9, 0xCBCBCCCC, 0x896745C3, 0x99A9CCBC, 0xC95922C2, 0x00002262, 
0xA9CBAC67, 0x32335386, 0x22222222, 0x42765523, 0x12000534, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00C00000, 0x00004000, 0xCCBC57C3, 0xBA8ACCCC, 0xA8AACC98, 
0x55C8CCCC, 0xC8480000, 0x00000040, 0xCCCCCCAB, 0xCBCCCCCC, 0xCCCCCCAB, 0xBACCCCCC, 0x12000F34, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00700000, 0x00000000, 
0xCACCCCCC, 0x2222739A, 0xA88ACAC8, 0xB7CCCCCC, 0xC8480000, 0x00000041, 0xCCCCCCAB, 0xCBCCCCCC, 
0xCCCCCCAB, 0xBACCCCCC, 0x12000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00000000, 0x999999C9, 0x9999B9BB, 0x785634C2, 0x98BBBC89, 0xC8380000, 
0x00000040, 0x556587CA, 0x66555555, 0xBB8A7777, 0x8898CABC, 0x006A2F03, 0x00050606, 0x00000000, 
0x00000000, 0x00000000, 0x00070000, 0x00000000, 0x00000000, 0x00000000, 0x004EC3C1, 0x00000000, 
0x00000000, 0x00000000, 0x00783535, 0x00000000, 0x00000000, 0x00000000, 0x00576ECE, 0x00000000, 
0x00000000, 0x00000000, 0x00800716, 0x00000040, 0x00000000, 0xC0C60A00, 0x5C000006, 0xA6000000, 
0x00000000, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xBBBBCBBB, 0x896745C3, 0x99B99A99, 0xCBCC48C1, 
0x11111184, 0xC8CCCCC9, 0x11111172, 0x11111111, 0x37111111, 0x02000F34, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00202002, 0x20C00002, 0x0000A600, 0x232222B2, 0x52C9CC7B, 
0xCC8C0400, 0x00000084, 0xC8480000, 0x00000041, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 
0x12000542, 0xCC000040, 0x20C60C4C, 0x00000008, 0x00002000, 0x00000040, 0x0022006A, 0x00000022, 
0x00C00004, 0xBBBBBBCB, 0xCBCCBBBB, 0xAC6765C3, 0x9999A9CC, 0xCC8A2600, 0x1095C9CA, 0x00000041, 
0x00000000, 0xBC995526, 0x3464CBCC, 0x12000F41, 0x00000080, 0x00000000, 0x04020600, 0x006CCCA8, 
0x08000000, 0x0000CC00, 0x00000000, 0x00000000, 0xCCBC9CC9, 0x9999C9CC, 0xBCCB89C4, 0x999999CC, 
0xC9480000, 0x9B73CCCC, 0xB9BB6A02, 0xCBCCCC8B, 0x00002073, 0x00000000, 0x00800F12, 0x82000040, 
0x00888000, 0x0600C0A0, 0x00000050, 0x00004400, 0x00000000, 0x00000000, 0x00000000, 0xCCCACCCC, 
0x9999CBAC, 0xA96745C3, 0x99BBCC9C, 0xC84822C2, 0x22222242, 0x98CBCCCB, 0x00000030, 0x00000000, 
0x16000000, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00000000, 0xC9CCACC9, 0x99999999, 0x896745C3, 0x9999CBCC, 0xC8380000, 0x00000040, 
0xCCBBBBAB, 0xA8BCBBCB, 0x8B658766, 0x586456A6, 0x00800516, 0x00000040, 0x00000000, 0xC0C60A00, 
0x5C000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xCCBBCBBB, 0xBBBBBBCB, 
0xBBCCBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xBCCACBAC, 0xAAAAAABC, 0xAAAAAAAA, 0xAAAAAAAA, 0x02000534, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00202002, 0x20C00002, 0x0000A600, 
0x24111191, 0x3386CA9C, 0xCCCC4800, 0x000030B7, 0xCA8A8888, 0x88888898, 0x2174CBCC, 0x49333533, 
0x4254A5CC, 0xCC8A5612, 0x1200050B, 0xC2000060, 0x20C60C2A, 0x00000008, 0x00000000, 0x00000044, 
0x00460068, 0x00000064, 0x00660000, 0xBBBBBBCB, 0xCBCCBCBB, 0x896845C3, 0x9999B999, 0xCCAC8888, 
0x8888CCCC, 0x00000000, 0x00000000, 0x8C772300, 0x10A5CCCC, 0x12000F1D, 0x00000060, 0x00000000, 
0x00000000, 0x002C4C40, 0x4C000000, 0x00424200, 0x00000000, 0x00000000, 0xCCCCACC9, 0x999999CC, 
0x89A8CC28, 0x9999CBCC, 0xCC8A8888, 0x8888AACA, 0x6798B8CC, 0xCC9B3742, 0x000041B7, 0x58250100, 
0x00800912, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 
0x00000000, 0xCCBC99C9, 0x99B99BCB, 0x896745C3, 0xCCCCBC99, 0xCBBBBBBB, 0xBBBBBBBB, 0x84A9CACC, 
0x22222222, 0x22222222, 0xAB252222, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xCCCCACC9, 0x999999CA, 0x89674523, 0x9999CCCC, 
0xCA8A8888, 0x88888898, 0x24522500, 0xCCCCCC9C, 0x0072AABB, 0x20000000, 0x00800546, 0x86000040, 
0x0080C60C, 0xCC808600, 0x06000064, 0x00000000, 0x00000000, 0x200A0000, 0x00002000, 0xBBBBBBCB, 
0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBCCB, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCBBCCCC, 0xBBBBBBBB, 0xBCBBBBBB, 
0xBBBBBBBB, 0x0E000546, 0x86000040, 0x0080C60C, 0xCC808600, 0x06000064, 0x00000000, 0x00000000, 
0x200A0000, 0x00002000, 0xBBBBBCCB, 0xCBCCCCBC, 0xBA6845C3, 0x9999B999, 0xCCBBBBBB, 0xBBBBCCCC, 
0x22329655, 0x22222222, 0x6A232222, 0x32B7CCCC, 0x0C00091D, 0x00000060, 0x00000000, 0x00000000, 
0x002C4C40, 0x4C000000, 0x00424200, 0x00000000, 0x00000000, 0xCCCCBCC9, 0x999999CC, 0x8A6745C3, 
0x9999C9CC, 0xCBBBBBBB, 0xBBBBBCBB, 0xAACBCC8B, 0xBA7A8798, 0x333333A6, 0x3463AA46, 0x00800712, 
0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00000000, 
0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00000000, 0xCCCC9CC9, 0x9999C99C, 0x896745C3, 0x99A9CBCC, 0xCBBBBBBB, 
0xBBBBBBBB, 0x36336489, 0xBC583496, 0x3374CACC, 0xA8986934, 0x006B0908, 0x0C0B0B0B, 0x0808070A, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC4C442C0, 0x4242C0C0, 
0x00000000, 0x00000000, 0x7D7D7DBD, 0x7D7D8DBD, 0x00000000, 0x00000000, 0x6E6E6ECE, 0x6E6EAECE, 
0x00000000, 0x00000000, 0x00800716, 0x00000040, 0x00000000, 0xC0C60A00, 0x5C000006, 0xA6000000, 
0x00000000, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xBCBBBBBB, 0x896745C3, 0x99A9CC9C, 0xC8CCCCCB, 
0x22222252, 0xCCCCCCAB, 0x22314388, 0x11111122, 0x44111111, 0x12000140, 0xC8000080, 0x40C60C2A, 
0x0000000A, 0x00000000, 0x00000044, 0x004600CC, 0x00000064, 0x00000000, 0xBCBBBBCB, 0xBBBBCBCC, 
0xAC7745C3, 0x999999CC, 0xCCCC9B05, 0x00200084, 0x00000000, 0x02000000, 0xCCBB5A43, 0x003096CC, 
0x12000913, 0x00000060, 0x00000000, 0xAAA20C00, 0x282022CC, 0x66660000, 0x0046AA00, 0x00000064, 
0x00000000, 0xCCCCACB8, 0x000330B8, 0xCC480000, 0x000084CC, 0xCC781400, 0x0062CACC, 0xCCCC9B69, 
0x003084CA, 0x00000000, 0x01000000, 0x00000704, 0x00C42860, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCA8AB7, 0x5576A7CB, 0xAB4644C4, 0x4444A6CC, 
0xC96944C4, 0x44444464, 0x77779798, 0x55555565, 0xCC8B5655, 0x99A9CBCC, 0x12000507, 0xAC000060, 
0x0040A08A, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00010000, 0x6A2222B0, 
0xA8BACBCC, 0x48000000, 0x6286CBCC, 0xC768A80A, 0xBC268769, 0x00002295, 0x00000000, 0xBC480100, 
0xCBCCCCCC, 0x00000530, 0x80000060, 0x00800000, 0x00000000, 0x00000000, 0x00400040, 0x08008228, 
0x000000CA, 0x00000000, 0xCC4822B2, 0x222284CC, 0xCC4800C0, 0x0020A6CC, 0xCA48C8BC, 0x00004068, 
0x222222B2, 0x22222222, 0xCACCBA5A, 0x2285989A, 0x04000733, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000C00, 0x00000000, 0xBBBC68B3, 0x00002076, 0xCCCC7B03, 
0x000073BB, 0x21121102, 0x9C031111, 0x00000042, 0x02000000, 0xCCCCAB79, 0x42A9CCCC, 0x0000092D, 
0x82000060, 0x40840000, 0x00002A80, 0x00000006, 0x02000600, 0x80AC8628, 0x00000000, 0x00000000, 
0xABCCCCBC, 0x22222273, 0xCBCCCCC8, 0x222232A7, 0xB9CCBBC9, 0x422222A6, 0x222222A5, 0x22222222, 
0x24222222, 0xCCCCBC8B, 0x12000917, 0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 0x00AA0000, 
0x00000000, 0x00000000, 0x00000000, 0xCC9B99C9, 0xB9AACBCC, 0x896745C3, 0x99A9CCBC, 0xC8BCCC09, 
0x00004163, 0xB9BBCCCC, 0x22224477, 0x10203212, 0x37222100, 0x00800812, 0x82000040, 0x00888000, 
0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00000000, 0x9CC99CCC, 0x999BCC9C, 
0x896745C3, 0xBBCCBB99, 0xC84833C3, 0x33333343, 0x8898BACA, 0x31361241, 0x11111111, 0x77772511, 
0x01000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00000000, 0xCCBA99C9, 0x99BCCCCC, 0x896745C3, 0x9999CCAB, 0xC8380000, 0x00000040, 0x97BACCCC, 
0x53869968, 0x36222122, 0xCCCCBC89, 0x00800F1F, 0x00000020, 0x20000000, 0xA0000800, 0xAC00800A, 
0x44000000, 0x00004400, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xCCBCBBBB, 0x896745C3, 0x99C9CC9C, 
0xC8CCCC48, 0x44444465, 0xCCCCCCAB, 0x25111173, 0x11111194, 0x14111111, 0x06000F0B, 0xC0000060, 
0x00C00C0A, 0x00000008, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00000000, 0xBCBBBBCB, 
0xBBBBCBCC, 0x996745C3, 0x9999CACC, 0xCCCC7977, 0x77777798, 0x00000000, 0x00000000, 0xCC4A0100, 
0x0083BACC, 0x12000918, 0x00000020, 0x00000000, 0x04000400, 0x000220C4, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xCBCCAC99, 0x99999999, 0xCC8C0400, 0x001095CC, 0xC9797777, 0x77777787, 
0xCCAC3700, 0x000094CC, 0x00000000, 0x20360100, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 
0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x06000703, 
0x0084AC62, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xCCCCBC48, 0x33333385, 0xCC8C0400, 0x001095CC, 0xC6060000, 0x00000031, 0x00000000, 0x00000000, 
0xAC797603, 0x5286CACC, 0x12000F0B, 0xC2000060, 0x20C60C2A, 0x00000008, 0x00000000, 0x00000044, 
0x00460068, 0x00000064, 0x00000000, 0xBCB9AC47, 0xA6BCB9CA, 0xCC590100, 0x40C8CC8C, 0xCC9C7777, 
0x77777798, 0xC9CCAC5A, 0x00000062, 0xAA9B3601, 0x01212286, 0x10000718, 0x00000020, 0x00000000, 
0x04000400, 0x000220C4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCAC6843, 0xB7A9C9BC, 
0xCC483202, 0x0040A7CC, 0xC9797777, 0x77777787, 0x968A4584, 0x11632432, 0xA5CCCC38, 0x56020010, 
0x06000704, 0x00C42860, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xAC573343, 0x95CCCCCB, 0xCC8C8B04, 0x0020A6CC, 0xC9797777, 0x77777787, 0x30C8CC4A, 
0x00000000, 0xBA892601, 0x01002085, 0x1200070B, 0xC0000060, 0x00C00C04, 0x00000002, 0x00000000, 
0x00000000, 0x00000002, 0x00000000, 0x00000000, 0xAA663343, 0xC9CBCCAC, 0xCCBC4801, 0x42A6CBCB, 
0xC9CCBC79, 0x77777787, 0x00001065, 0x00000000, 0x6A250000, 0x88BACCCC, 0x10000943, 0x00000040, 
0x00000000, 0x0CC40C00, 0x000200C6, 0x22000000, 0x00006200, 0x00000000, 0x00000000, 0xBCAAABC9, 
0x99CC9CC9, 0x896745C3, 0x99CCCC99, 0xC9797777, 0x77777787, 0xA7CCCCCC, 0x00002065, 0x00000000, 
0xAB250200, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00000000, 0x9A9999C9, 0x99CCBCBC, 0x896745C3, 0x99CBCC99, 0xC9797777, 0x77777787, 
0x210221B7, 0x00000000, 0x03000000, 0xCCCCCC79, 0x00800716, 0x00000040, 0x00000000, 0xC0C60A00, 
0x5C000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xCCBCBBBB, 0x896745C3, 
0x99C9CC9C, 0xC8CCCC48, 0x44444465, 0xCCCCCCAB, 0x25111173, 0x11111194, 0x14111111, 0x12000140, 
0xC8000080, 0x40C60C2A, 0x0000000A, 0x00000000, 0x00000044, 0x004600CC, 0x00000064, 0x00000000, 
0xBBBBBBCB, 0xBBBBBBCC, 0x8C6745C3, 0x9999A9CC, 0xCACC8A04, 0x22410162, 0x11010000, 0x00000000, 
0xCCAB6824, 0x003195CB, 0x0E000913, 0x00000060, 0x00000000, 0xAAA20C00, 0x282022CC, 0x66660000, 
0x0046AA00, 0x00000064, 0x00000000, 0xCCBC7AB5, 0x0121A4CC, 0xAC262200, 0x0030B7CC, 0xCCCC7A04, 
0x000062B8, 0xCCCCBC8A, 0x222053A9, 0x10001021, 0x22010000, 0x00800812, 0x82000040, 0x00888000, 
0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 
0x00000703, 0x00C4AC62, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xCBCCB8C9, 0x8C46B8BC, 0xBB8956C3, 0x3363B7CC, 0xC73711C1, 0x11111132, 0x445488CB, 
0x44444444, 0xBC474444, 0x87B8BACC, 0x0000071F, 0x00000020, 0x00000000, 0x40000200, 0x4C002004, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x8C84CCC8, 0x848C8CC8, 0xBC6869C4, 0x4554C99C, 
0xCCCC8CC4, 0x333343B8, 0xAABBAA98, 0x55A78AA8, 0x55555555, 0x55555555, 0x10000F12, 0x88000040, 
0x0088C000, 0x0000C0A0, 0x00000000, 0x00004460, 0x00000000, 0x00000000, 0x00000000, 0x6A2555C4, 
0x57A6CCCC, 0x480000C0, 0x42A6CCCC, 0xC869870A, 0x00002251, 0x214453A4, 0x03000000, 0xCCCCCC79, 
0x65574575, 0x00000704, 0x00C48B63, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xCCCCBCC7, 0x222262A9, 0xCC6A02C0, 0x0030A7CC, 0xC8380000, 0x00000040, 
0xB9CCCCCC, 0x00001064, 0x22010000, 0xAC8A4623, 0x0280070B, 0xC2000060, 0x20C60C2A, 0x00000008, 
0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00000000, 0x9C2522B2, 0xB8BACCCC, 0x26221200, 
0x73CACC8C, 0xC9CCCC0C, 0x00001073, 0x00102242, 0x00000000, 0x9B692600, 0x63CBCCCC, 0x0A000913, 
0x00000060, 0x00000000, 0x6CC20C00, 0x002022CC, 0x66660000, 0x0046AA00, 0x00000064, 0x00000000, 
0x9A9999C9, 0xCACCCCCC, 0x896745C3, 0x99C9CC9C, 0xC88A9A08, 0x00000340, 0xCBCCCCCC, 0x20242285, 
0x01001000, 0x58220100, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00000000, 0x9B9999C9, 0xCACCCCCC, 0x896745C3, 0x99C9CC9B, 0xC8380000, 
0x00000040, 0x6387A9CC, 0x22430221, 0x46242222, 0xCCCCCC8A, 0x00800716, 0x00000040, 0x00000000, 
0xC0C60A00, 0x5C000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xCCBBCBBB, 
0x8B6745C3, 0xA9A9CBAC, 0xCCCC9C8A, 0x22222285, 0xBACBCCAA, 0x3296BABB, 0x22222222, 0x36222222, 
0x12000F40, 0xC8000080, 0x40C60C2A, 0x0000000A, 0x00000000, 0x00000044, 0x004600CC, 0x00000064, 
0x00000000, 0xBBBBBBCB, 0xBBBBBBCC, 0xAC6745C3, 0x999999CA, 0xCACCBB08, 0x11521273, 0x20010000, 
0x00000000, 0xBCAB6736, 0x0130A4CC, 0x12000913, 0x00000060, 0x00000000, 0xAAA20C00, 0x282022CC, 
0x66660000, 0x0046AA00, 0x00000064, 0x00000000, 0xCCCCBCB7, 0x350131A7, 0xBB3730C0, 0x000084CC, 
0xCCBC9A05, 0x01002196, 0xCACCBB9B, 0x23226376, 0x00011012, 0x45030010, 0x00800812, 0x82000040, 
0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00000000, 0x786A22B2, 
0x849CC8CC, 0x480000B0, 0x7374C8CC, 0xC84800C0, 0x00000040, 0x323323C2, 0xBC996A23, 0xCBCCCCAA, 
0x22223287, 0x00000703, 0x00C4AC62, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xCCCC9CB6, 0x202222A6, 0xBB376202, 0x001095CC, 0xC8380000, 0x00000040, 
0xB8BB9B65, 0x00001065, 0x7C242200, 0x4297CACC, 0x0080071F, 0x00000020, 0x00000000, 0x40000000, 
0x4C000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x12000520, 
0xA0000080, 0x00A8AB00, 0x0000000C, 0x00000000, 0x000000CA, 0x0000008A, 0x00000088, 0x00700000, 
0x9B4822B0, 0xA6A8CBCC, 0xAA373200, 0x1095CCCC, 0xCCCBCC0C, 0x1762B8CB, 0x00000020, 0x24012001, 
0xCCCCCC7A, 0x001084BA, 0x0000072D, 0x82000060, 0x40840000, 0x00002A80, 0x00403508, 0x08000600, 
0x90AC8628, 0x00000000, 0x00040008, 0xCCCCCCBB, 0x222222A6, 0xB8CBCCC8, 0x00225279, 0xCBCCCC0A, 
0x102085BA, 0x76A9CBCC, 0x66361042, 0x00005266, 0xCCCC9C26, 0x00000607, 0x8A000060, 0x10624040, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00800008, 0xACCCBCB7, 0x8BC8B888, 
0xCBCCBC07, 0xBA7B9977, 0xCC69B8C9, 0xAB676ACA, 0x112132B7, 0x11111111, 0x11111111, 0xCCCCAC49, 
0x0E000943, 0x00000040, 0x00000000, 0x0CC10C00, 0x000200C6, 0x22000000, 0x00006200, 0x00000000, 
0x00000000, 0xCC9B99C9, 0xB9CBCCCC, 0x896745C3, 0x99A9CCBC, 0xC8CACB09, 0x00000052, 0xCBCCCCCC, 
0x00204285, 0x00001000, 0x68340020, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 
0x00004400, 0x00000000, 0x00000000, 0x00000000, 0xAB999CC9, 0x9A9CC9A9, 0x896745C3, 0xBBABAB9A, 
0xC73722C2, 0x22222242, 0xAABBCCCC, 0x11211294, 0x12111111, 0x67453234, 0x01000701, 0x022CC64C, 
0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xCC9C99C9, 
0xC9CCCCCC, 0x896745C3, 0x99A9CCBC, 0xC8380000, 0x00000040, 0x97BACBCC, 0x53869968, 0x36222122, 
0xCCCCBC89, 0x00800716, 0x00000040, 0x00000000, 0xC0C60A00, 0x5C000006, 0xA6000000, 0x00000000, 
0x00000000, 0x00000000, 0xBBBBBBCB, 0xBBBBBBBB, 0x896745C3, 0x99B9CC9C, 0xC7CCACC6, 0x00000031, 
0xBBCCCCC6, 0x11116397, 0x11111111, 0x22121111, 0x12000140, 0xC8000080, 0x40C60C2A, 0x0000000A, 
0x00000000, 0x00000044, 0x004600CC, 0x00000064, 0x00000000, 0xBCBBBBCB, 0xBBBBCCCC, 0xBC6745C3, 
0x999999CC, 0xCCCC5906, 0x00523297, 0x00210100, 0x00000000, 0xCC9B1600, 0x003385CB, 0x12000913, 
0x00000060, 0x00000000, 0xAAA20C00, 0x2820228C, 0x66660000, 0x0046AA00, 0x00000064, 0x00000000, 
0xCCCCABB8, 0x100040B8, 0xCC580100, 0x000084CC, 0xCC690200, 0x0030C9CC, 0xCCBCAB66, 0x003186CC, 
0x00000000, 0x01000010, 0x0C000508, 0x2C000060, 0x000040C8, 0x00000000, 0x00000000, 0x00000200, 
0x00000000, 0x00000000, 0x00000000, 0xCC7A23B2, 0xA98BBBCC, 0xBC7B0300, 0x2034A7CC, 0x99374406, 
0x9C74CCCC, 0x002175B8, 0x00000000, 0xAC370200, 0xBBBCCCCC, 0x06000726, 0x00000080, 0x00000000, 
0x40200600, 0x04AC6886, 0xCA000000, 0x00A88806, 0x00000000, 0x00000000, 0xCCCCCCCB, 0x4267A8CB, 
0xB7CCCCC8, 0x22A6CCBB, 0xCBB9BC09, 0xA674CCCC, 0x88A898C9, 0xA8A99A88, 0x75552373, 0xCCCCCC58, 
0x00000727, 0x66000080, 0x00000000, 0x20000600, 0x040A6006, 0xAC000000, 0x00A88402, 0x00000000, 
0x00000000, 0x68C9BCB9, 0xC9CC9CBB, 0x59C99CC5, 0x98CCCCCC, 0xCCCACCC9, 0x2242A8CB, 0xBABBBBB8, 
0x2222849B, 0x22322222, 0x86CCAB36, 0x00000607, 0x8A000060, 0x10434040, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00800008, 0x666776B5, 0xCBBCBC9B, 0xBC3721C1, 0x9ACCCCCC, 
0xCBCACCCC, 0x6A222284, 0x00002273, 0x00000000, 0x6B230000, 0xB8CCCCCC, 0x12000917, 0x00000040, 
0x00000000, 0x0CC60A00, 0x000000A6, 0x00AA0000, 0x00000000, 0x00000000, 0x00000000, 0x9C9A99C9, 
0xCCCCCCCC, 0x896745C3, 0x99CACC9C, 0xC8BCCC09, 0x00000073, 0xB9CBCCCC, 0x01214186, 0x31011221, 
0x5A233522, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 
0x00000000, 0x00000000, 0x99B9CCCC, 0xCBCCACAC, 0x896745C3, 0x99999C99, 0xC85855C5, 0x55555565, 
0xAACBCCCC, 0x000010A5, 0x00000000, 0xCB9C4801, 0x01000701, 0x022CC64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xAC9999C9, 0xCCCCCCCC, 0x896745C3, 
0x99C9CC9C, 0xC8380000, 0x00000051, 0x97BACBCC, 0x53869968, 0x22022122, 0xCCCC7A24, 0x1200010B, 
0xC2000060, 0x20C60C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00000000, 
0xBCBCBBCB, 0xBCBBBBCC, 0xAB6745C3, 0x9999B9CC, 0xCCCC8AC8, 0x535843A6, 0x11221231, 0x11111111, 
0xCC8B2411, 0x112184CB, 0x12000913, 0x00000060, 0x00000000, 0xAAA20C00, 0x2820228C, 0x66660000, 
0x0046AA00, 0x00000064, 0x00000000, 0xCCCCBBBA, 0x555555A7, 0xCCAB67C5, 0x5555A7CC, 0xCCBB67C4, 
0x4464CBAA, 0xBC9AA9B8, 0x5575A8CC, 0x55555555, 0x78667656, 0x10000531, 0x40000060, 0x00400000, 
0x00000000, 0x00000000, 0x00800080, 0x00008002, 0x000000AC, 0x00000000, 0xC8CC98B5, 0x8CACCC8C, 
0xBC7B55C3, 0xA6ACCCCA, 0xCCCCBC6B, 0xCC78CCCC, 0x546666B6, 0x44444466, 0xBCBB9A69, 0x6676C9CC, 
0x0400072D, 0x82000060, 0x40840000, 0x00002A80, 0x00000006, 0x02000600, 0x80AC8628, 0x00000000, 
0x00000000, 0xCCCCCCCC, 0xCBBCBBCB, 0xBACCCCC8, 0xB7BCCCBC, 0xCCCCCC6A, 0xCB66ACCA, 0x86BBBBCC, 
0xCBBB9B99, 0x89666486, 0xCCCCCC9A, 0x12000917, 0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 
0x00AA0000, 0x00000000, 0x00000000, 0x00000000, 0xCC9C99C9, 0xC9999CBC, 0x896745C3, 0x99A9CC9C, 
0xC8CCACC6, 0x22222252, 0xB9CBCCCC, 0x22323264, 0x22222332, 0x78243233, 0x00800812, 0x82000040, 
0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00000000, 0x99B9CCCC, 
0xCBCCACAC, 0x896745C3, 0x99999C99, 0xC8585555, 0x55555565, 0xAACBCCCC, 0x000010A5, 0x00000000, 
0xCB9C4801, 0x01000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00000000, 0xAC9999C9, 0x99BABCBB, 0x896745C3, 0x99B9CC9C, 0xC91711C1, 0x11112163, 
0xBBBACBCC, 0x67869AAB, 0x47223165, 0xCCCCBC89, 0x00800F1F, 0x00000020, 0x00000000, 0xC0600800, 
0x8C00800A, 0x02000000, 0x00004400, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xCCBCBBBB, 0x790300C0, 
0x99C9CC9C, 0xC8CCCC48, 0x44444465, 0xCCCCCCAB, 0x25111173, 0x11111194, 0x14111111, 0x06000F0B, 
0xC0000060, 0x00C00C04, 0x00000002, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00400000, 
0xBBBBBBCB, 0xBBBBCBBC, 0x595555C5, 0x9999C9CC, 0xCCAC0600, 0x000040A8, 0x89555565, 0x55555565, 
0xCC7B5555, 0x555596CC, 0x12000918, 0x00000020, 0x00000000, 0x04000400, 0x000220C4, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xCCCCABC9, 0x99999999, 0xCC9856C5, 0x5555C8CA, 0xCC480200, 
0x0000CACC, 0xCCCC7B65, 0x5565AAA8, 0x55555555, 0x55555555, 0x06000703, 0x00C4AC64, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCC48B0, 0x001095CC, 
0x48000000, 0x0030B7CC, 0xC8480000, 0x00000040, 0x78483295, 0x22124086, 0xCC8A4622, 0x88BBCCCC, 
0x12000536, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 
0x00004000, 0x89888866, 0xAAAACAAC, 0xCC8CC8C8, 0x555585CC, 0xC6060000, 0x00000031, 0x86CCBCA8, 
0x44763522, 0xA8BB8B46, 0x42775664, 0x1200070B, 0xC0000060, 0x00C00C08, 0x00000008, 0x00000000, 
0x00000000, 0x00000002, 0x00000000, 0x00400000, 0x8B3623C2, 0x2296CBCC, 0x55656AC5, 0x55C9CC8C, 
0xCBCCCC0B, 0x62004396, 0x54665684, 0x44444444, 0xBACBAB46, 0xB8CCCCAC, 0x10000943, 0x00000040, 
0x00000000, 0x0CC40C00, 0x000200C6, 0x22000000, 0x00006200, 0x00000000, 0x00000000, 0x9CA99AC9, 
0xB9CCBCCC, 0x565555C5, 0xA6CCCC8A, 0xCA9A9999, 0x99999999, 0xCBCCCCCC, 0x44444496, 0x45444444, 
0xAB555544, 0x02000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00220000, 0xBCBC99C9, 0x9999C9CC, 0x555555C5, 0xC8C9CC69, 0xC6060000, 0x00000031, 
0x8699ABCA, 0x44444465, 0x9856A746, 0xCCCCAB88, 0x00800F1F, 0x00000020, 0x00000000, 0xC0600800, 
0x8C00800A, 0x02000000, 0x00004400, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xCCBCBBBB, 0x790300C0, 
0x99C9CC9C, 0xC8CCCC48, 0x44444465, 0xCCCCCCAB, 0x25111173, 0x11111194, 0x14111111, 0x12000536, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x00004000, 
0xCC9C8CC6, 0x666666C8, 0x8C4444C4, 0x444484CC, 0xC6060000, 0x00000031, 0x76C9CCBC, 0x44664444, 
0x87997968, 0x56A74764, 0x06000F0B, 0xC0000060, 0x00C00C04, 0x00000002, 0x00000000, 0x00000000, 
0x00000002, 0x00000000, 0x00400000, 0xBBBBBBCB, 0xBBBBCBBC, 0x6A4444C4, 0x999999CC, 0xCCAC0600, 
0x000040A8, 0x44444454, 0x44444444, 0xAC985844, 0x4454B7CC, 0x12000918, 0x00000020, 0x00000000, 
0x04000400, 0x000220C4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCCACC7, 0x11111194, 
0xCC4844C4, 0x444495C8, 0xCC480200, 0x0000CACC, 0xCCBC6A54, 0x444454B7, 0x44444444, 0x44444444, 
0x06000703, 0x00C4AC64, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xCCCC48B0, 0x001095CC, 0x48000000, 0x0030B7CC, 0xC8480000, 0x00000040, 0x78483295, 
0x22124086, 0xCC8A4622, 0x88BBCCCC, 0x1200070B, 0xC0000060, 0x00C00C08, 0x00000008, 0x00000000, 
0x00000000, 0x00000002, 0x00000000, 0x00400000, 0x9B3711C1, 0x1197CBCC, 0x444444C4, 0x44A6CC58, 
0xCBCCCC0B, 0x62004396, 0x96684654, 0x44444444, 0x68556644, 0xB7CCCCAB, 0x10000943, 0x00000040, 
0x00000000, 0x0CC40C00, 0x000200C6, 0x22000000, 0x00006200, 0x00000000, 0x00000000, 0x9CA99AC9, 
0xB9CCBCCC, 0x565555C5, 0xA6CCCC8A, 0xCA8A8888, 0x88888898, 0xCCCCBCCB, 0x444444A6, 0x44444444, 
0xAB45647A, 0x02000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00220000, 0xBCBB99C9, 0x9999C9CC, 0x444444C4, 0x75C9CC48, 0xC6060000, 0x00000031, 
0x7697ACB9, 0x44444465, 0x66694444, 0xCBCCAC89, 0x006C0904, 0x03040506, 0x00000000, 0x00000000, 
0x00000000, 0x02000200, 0x00000000, 0x00000000, 0x00000000, 0xCFC14EC1, 0x00000000, 0x00000000, 
0x00000000, 0xBDBD78BD, 0x00000000, 0x00000000, 0x00000000, 0xCECE58BE, 0x00000000, 0x00000000, 
0x00000000, 0x0080070B, 0xC2000060, 0x20C60C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 
0x00000064, 0x00000000, 0xBBCCCCCB, 0xBBBBCBCC, 0x8B7A45C3, 0xC99BBCCB, 0xC8CCBCCC, 0x95352262, 
0x95874921, 0x11212222, 0xCCABAA25, 0x31A8CBCC, 0x00000716, 0x00000040, 0x00000000, 0xC0C60A00, 
0x5C000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xCCCCBBBB, 0x896745C3, 
0x99C9CC9C, 0xC8CCCC0C, 0x21000043, 0xCBCCCCCC, 0x01223375, 0x01000000, 0x26000002, 0x12000F40, 
0xB8000080, 0x40C40C0A, 0x00005027, 0x00000000, 0x00000000, 0x000000CC, 0x00000000, 0x00000000, 
0xBBBBBBCB, 0xBBBBCBCC, 0x8B6745C3, 0x9999B9CC, 0xC9CCCC0C, 0x31006488, 0x00000010, 0x22000000, 
0xCCBC7A35, 0x3275A9CB, 0x12000F43, 0x00000040, 0x00000000, 0x0CC40C00, 0x000100C6, 0x22000000, 
0x00006200, 0x00000000, 0x00000000, 0xCCCC9BC9, 0x9999B9BC, 0x9B6745C3, 0x9999C9CC, 0xC8CCCC0A, 
0x00002353, 0xCBCCCCCC, 0x22233385, 0x01001021, 0x8A462311, 0x00800812, 0x20000040, 0x00222000, 
0x0000C040, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x9C999AC9, 0xCBACCCCC, 
0x896745C3, 0xB9CACC9B, 0xC8380000, 0x00000040, 0xCCCCCCCC, 0x000041A6, 0x22440200, 0x99565635, 
0x01000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00000000, 0xCCCC9BC9, 0x9999B9CC, 0x8B6745C3, 0x9999CACC, 0xC97AA708, 0x00002251, 0x86CACCCC, 
0x23222232, 0x59222223, 0xCCCCCCCC, 0x10000F0B, 0xC0000060, 0x00C00C08, 0x00000005, 0x00000000, 
0x00000000, 0x00000002, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xBBBBBBCC, 0x896745C3, 0x9999CACC, 
0xCAACCB0C, 0x22002062, 0x00000020, 0x02000000, 0xCC6C2343, 0x1242A7CC, 0x0100092D, 0x82000060, 
0x40840000, 0x00002A80, 0x00000006, 0x02000600, 0x80AC8628, 0x00000000, 0x00000000, 0x2273CABC, 
0x22221211, 0xCACC6A02, 0x00102262, 0xCACACC4A, 0x22222262, 0x222242C9, 0x11112133, 0x12111111, 
0xCCBC3911, 0x0C000946, 0x86000040, 0x0080C60C, 0xCC808600, 0x06000064, 0x00000000, 0x00000000, 
0x200A0000, 0x00002000, 0xCC9C99C9, 0x999999CC, 0x896745C3, 0x99C9CC9C, 0xC7588BC4, 0x00002231, 
0xBBCBCCC7, 0x000030B8, 0x11001200, 0x52481142, 0x00800812, 0x20000040, 0x00222000, 0x0000C040, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x999999C9, 0xCCCC9C9C, 0x896745C3, 
0xC9CCCC99, 0xCCCCCCCC, 0xCCCCCCCC, 0xCBCCCC7A, 0x44444496, 0x44444444, 0x44444444, 0x02000701, 
0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 
0xCC9C99C9, 0x999999CC, 0x896745C3, 0x99B9CC9C, 0xC7370000, 0x00000031, 0x3287CACC, 0x00202211, 
0x02010000, 0xAC362222, 0x1200061F, 0x00000020, 0x20000000, 0xA0080800, 0xAC00800A, 0x44000000, 
0x00004400, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xCCBBBCBB, 0x896745C3, 0x99CACCAC, 0xC8CCCC6C, 
0x22222252, 0xCBCCCCC8, 0x223266A7, 0x22222222, 0x67232222, 0x1200010E, 0x00000060, 0xC80A0000, 
0x000000AC, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x020000C0, 0xC8CCCC6A, 
0xBB6922C2, 0x222262CA, 0x84C9CC6C, 0x22222222, 0x22222262, 0x24324522, 0xC9BCBB8A, 0x22222273, 
0x12000917, 0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 0x00AA0000, 0x00000000, 0x00000000, 
0x00000000, 0xCACC9CC9, 0x9999B9AC, 0x9B6745C3, 0x9999B9CC, 0xC8CBCC0B, 0x00204757, 0xCBCCCCCC, 
0x22222284, 0x01000021, 0x49220110, 0x01000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xCCCCCCC9, 0x9999C9CC, 0xAB6745C3, 0x9999C9CC, 
0xC9592202, 0x00002251, 0x84A9CCCC, 0x22222222, 0x22222222, 0xCCCCCC5A, 0x0C00091F, 0x00000020, 
0x00000000, 0x40000200, 0x4C002004, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCBCCCC, 
0xCBBBCBCB, 0xC9CCBCC7, 0x999BCC9B, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCBAB9, 0xCBCCCCCB, 0x88888888, 
0x88888888, 0x10000112, 0x20000040, 0x00222000, 0x0000C040, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x9B9999C9, 0xCCCC999C, 0xCA9C46C3, 0xA9B999BB, 0xCCCCCCCC, 0xCCCCCCCC, 
0xCB8988B8, 0x89888888, 0xACABBBCC, 0x888888CB, 0x04000701, 0x022CC64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0x9CC999C9, 0xC999CCCC, 0x896745C3, 
0x9999CACC, 0xCCCCCCCC, 0xCCCCCCCC, 0x77B8AACC, 0xCCCCCC78, 0xCC8C77B8, 0xCC7887CB, 0x006D2A04, 
0x0708090A, 0x00000000, 0x00000000, 0x00000000, 0x07000000, 0x00000000, 0x00000000, 0x00000000, 
0xCECEC0C2, 0x00000000, 0x00000000, 0x00000000, 0x78787978, 0x00000000, 0x00000000, 0x00000000, 
0x57575757, 0x00000000, 0x00000000, 0x00000000, 0x00800716, 0x00000040, 0x00000000, 0xC0C60A00, 
0x5C000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xBBBBCBBC, 0x896745C3, 
0x99C9CC9B, 0xCCCC9905, 0x000084CA, 0xCCBBABC9, 0x2274A7CA, 0x22222222, 0x24222222, 0x12000542, 
0xCC000040, 0x21C60C4C, 0x00000008, 0x00002000, 0x00000042, 0x0022007A, 0x00000022, 0x00C00007, 
0xBCBBBBCB, 0xBBBBCBCC, 0x896745C3, 0x99A9CCBC, 0xC9CCCC0B, 0x24003285, 0x00002282, 0x01000000, 
0xCCBC8A36, 0x4286CACC, 0x00000733, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000800, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCCCC, 
0xCCCCCCCC, 0xBBBBBBBB, 0xBBBBBBBB, 0xCBBBBBBB, 0xBBBBBBCC, 0x0E000914, 0x00000060, 0x00000000, 
0xAAC80A00, 0x00000004, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xAB6845B2, 0x2162CACC, 
0x6A220000, 0x2295CBCC, 0xC8CCBC08, 0x00000040, 0x95CCCCAC, 0x00102232, 0x20220100, 0x26010000, 
0x0E000506, 0xCA000060, 0x22C2A62A, 0x00008002, 0x00000000, 0x00006686, 0x004600AA, 0x00000044, 
0x00000000, 0xAB6724B2, 0x42A8CBCC, 0x48000000, 0x42B8CCCC, 0xC9CCCC0B, 0x21001051, 0x00000020, 
0x00000000, 0xCC9B4702, 0x4385CBCC, 0x0E000914, 0x00000060, 0x00000000, 0xAAC80A00, 0x00000004, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x9B8856B3, 0x3065CACC, 0x04000000, 0x52A6CC8C, 
0xC8CCAC07, 0x00001040, 0x85CBCCAC, 0x00000031, 0x20220100, 0x26010000, 0x0C000506, 0xCA000060, 
0x22C2A62A, 0x00008002, 0x00000000, 0x00006686, 0x004600AA, 0x00000044, 0x00000000, 0x7A2322B1, 
0x86BACCCC, 0x15000000, 0x95CACC9C, 0xCACCCC0C, 0x32004286, 0x00000030, 0x00000000, 0xCC7A2400, 
0x77CACCCC, 0x0C000943, 0x00000040, 0x00000000, 0x0CC40C00, 0x000200C6, 0x22000000, 0x00006200, 
0x00000000, 0x00000000, 0x9A9999C9, 0xB9BBCCCC, 0x896745C3, 0x99C9CC9C, 0xC9CCBC09, 0x10002285, 
0xBACCCCCC, 0x00012075, 0x00000000, 0xBB8A4622, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 
0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00000000, 0xAC99AAC9, 0x99BBCCCC, 0x896745C3, 
0xC9BCBC9A, 0xC8480000, 0x00000040, 0xC9CCCBCB, 0x43011086, 0x66252210, 0xCB9A7778, 0x01000701, 
0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 
0x999999C9, 0xBACBCCBC, 0x896745C3, 0x9999CCAC, 0xC86947C2, 0x22222285, 0x97B9CCCC, 0x22222354, 
0x69242222, 0xCCCCCCBC, 0x00800716, 0x00000040, 0x00000000, 0xC0C60A00, 0x5C000006, 0xA6000000, 
0x00000000, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xBBBBBBCC, 0x896745C3, 0xA9CCCC9C, 0xCCAB3702, 
0x0030C7CC, 0xCCCC9C98, 0x0020A6CC, 0x00000020, 0x22000000, 0x02000542, 0xCC000040, 0x21C60C4C, 
0x00000008, 0x00002000, 0x00000042, 0x0022006A, 0x00000022, 0x00C00007, 0xBCBBBBCB, 0xBBBBCCCC, 
0x896745C3, 0x99A9CCCC, 0xCCBC7804, 0x0430B8CC, 0x020122A2, 0x00000000, 0xBC7A2501, 0x98CACCCC, 
0x0E000913, 0x00000060, 0x00000000, 0xAAA20C00, 0x0820228C, 0x66660000, 0x0046AA00, 0x00000064, 
0x00000000, 0xBC9B46B2, 0x64B8CBCC, 0x8A674523, 0x9999CBCC, 0xCC8C1400, 0x0010A6CB, 0xCCCCAC48, 
0x002054C8, 0x00000000, 0x00000000, 0x0E000507, 0xAC000060, 0x0040A08A, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xAC5623B2, 0x43A8CBCC, 0x48000000, 0x42B8CCCC, 
0xCC8A3403, 0x4230C9CC, 0x00102263, 0x00000000, 0x59230100, 0xA8CCCCCC, 0x0E000913, 0x00000060, 
0x00000000, 0xAAA20C00, 0x0820228C, 0x66660000, 0x0046AA00, 0x00000064, 0x00000000, 0x9B7935B2, 
0x0085CBCC, 0x48000000, 0x52A6CCCC, 0xCC8B4702, 0x0010A6CB, 0xCCCCBC58, 0x002153C8, 0x00000000, 
0x00000000, 0x0E000F07, 0xAC000060, 0x0040A08A, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x7A5522B1, 0x86BACCCC, 0x26010000, 0x51C9CCAC, 0xCCB9BB08, 0x9644C9CC, 
0x00002174, 0x00000000, 0x6A230000, 0xBACCCCCC, 0x0C000F43, 0x00000040, 0x00000000, 0x0CC40C00, 
0x000400C6, 0x22000000, 0x00006200, 0x00000000, 0x00000000, 0x999999C9, 0xB9AACCCC, 0x896745C3, 
0x99C9CCAC, 0xC8CCAC08, 0x10102285, 0xCACCCCCC, 0x20223275, 0x00011011, 0xBB8A4622, 0x00800812, 
0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00000000, 
0xA9999AC9, 0x99AAAA9C, 0x896745C3, 0xC9BACCAB, 0xC8380000, 0x00000040, 0xB9BABBCB, 0x22000052, 
0x54362210, 0x9A997868, 0x01000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00000000, 0x999999C9, 0xB9AACCCC, 0x896745C3, 0x99A9CCAC, 0xC87A25C2, 
0x11113157, 0x97B9CCCC, 0x22223354, 0x9C262222, 0xCCCCCCCC, 0x1200050B, 0xC0000060, 0x00C00C04, 
0x00000002, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xBBCBCBCC, 
0x896745C3, 0x99A9BBBC, 0xC8ACCCC8, 0x22222242, 0x22111131, 0x11112142, 0x8C261211, 0x425555C8, 
0x12000918, 0x00000020, 0x00000000, 0x04000400, 0x000220C4, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x575524C2, 0x22A6BC9C, 0x483234C2, 0x2244A6CC, 0xC84822C2, 0x22222242, 0x9CCA6842, 
0x242245B7, 0x22223574, 0x22222222, 0x06000703, 0x0084AC62, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x9B2553C3, 0x4265C8BC, 0x263234C2, 0x2243A6AC, 
0xC84822C2, 0x22222242, 0x22222253, 0x22222222, 0x7C232222, 0x95CABCCB, 0x0200050B, 0xC2000060, 
0x20C60C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00000000, 0x56C858C5, 
0x85CCCCAC, 0xCCCC58C5, 0x656785CC, 0xCBCCBBBB, 0xBBBBBBBB, 0x22222272, 0x22222222, 0xCCCB9B35, 
0x33A6AACB, 0x12000516, 0x00000040, 0x00000000, 0xC0C00400, 0x04000000, 0x40000000, 0x00000000, 
0x00000000, 0x00000000, 0x8BA747C2, 0xB8AAACCC, 0x462322C2, 0x7ABBCCAB, 0xC8CC8CC4, 0x2222848C, 
0xA9CCCCBA, 0x222222A5, 0x22222222, 0x24222222, 0x12000506, 0xCA000060, 0x22C2A62A, 0x00008002, 
0x00000000, 0x00006686, 0x004600AA, 0x00000044, 0x00000000, 0x563522C2, 0xBBCBCAAB, 0x8C1411C1, 
0x2286ACBC, 0xC8CC8CCC, 0x8C848C7B, 0x11111193, 0x11111111, 0xBC492211, 0x87BACCCC, 0x12000918, 
0x00000020, 0x00000000, 0x0A000A00, 0x002882CA, 0x02440000, 0x00202200, 0x00000002, 0x00000000, 
0xCC9999C9, 0x9999B9CC, 0x896745C3, 0x9999CABA, 0xC88C24C2, 0x22222242, 0xB7CCCCBA, 0x22344365, 
0x22222222, 0x67452422, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00000000, 0xCC9999C9, 0x9999CCC9, 0x896745C3, 0x9999CAAC, 0xC84822C2, 
0x22222242, 0x22634842, 0x22222222, 0x99462222, 0xA598BCCC, 0x0080050B, 0xC2000060, 0x20C60C2A, 
0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00000000, 0xBCBBBBCB, 0xBCBBCBCC, 
0x896745C3, 0xA9AACCBC, 0xCC9C6666, 0x66666697, 0x00000000, 0x00000000, 0xCC9C2500, 0x2042A6CC, 
0x0C00091F, 0x00000020, 0x20000000, 0xA0000800, 0xAC00800A, 0x44000000, 0x00004400, 0x00000000, 
0x00000000, 0xBBBBBBCB, 0xBBCCCCCC, 0xCC6A45C3, 0x999999A9, 0xCCCCAB0A, 0x000098CA, 0xCCCC7A14, 
0x0020A5CC, 0x00000001, 0x00000000, 0x0A000506, 0xCA000060, 0x22C2A62A, 0x00008002, 0x00000000, 
0x00006686, 0x004600AA, 0x00000044, 0x00000000, 0xCCCCAC47, 0x523385CB, 0x78030000, 0x0062CACC, 
0xCCCCCC0A, 0x660060C9, 0x00000020, 0x00000000, 0x6A021000, 0x75C9CCCC, 0x0C000514, 0x00000060, 
0x00000000, 0xAAC80A00, 0x00000004, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xBCAA8967, 
0xBABBCCCC, 0x8A666666, 0x97CBCCCC, 0xCBCCBC6A, 0x66666697, 0xC9CCCCAC, 0x66666676, 0x66666666, 
0x67666666, 0x12000F06, 0xCA000060, 0x22C2A62A, 0x00008002, 0x00000000, 0x00006686, 0x004600AA, 
0x00000044, 0x00000000, 0x01000000, 0xC8CCCC7B, 0x6B120000, 0x2084CCCC, 0xCCCCAC05, 0x00002094, 
0x00000000, 0x00000000, 0xCC390000, 0x3075CBCC, 0x0C000918, 0x00000020, 0x00000000, 0x0A000A00, 
0x002882CA, 0x02440000, 0x00202200, 0x00000002, 0x00000000, 0xCCBC9AC9, 0x9999CBCC, 0x896745C3, 
0x9999CCCC, 0xC6060000, 0x00000031, 0xCACCCCBB, 0x00002084, 0x00000000, 0xAB444502, 0x02000701, 
0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 
0xCCCC9BC9, 0x9999ABCC, 0x896745C3, 0x9999CCCC, 0xC6585A00, 0x00000031, 0x02316586, 0x00000001, 
0x38213302, 0xBBCCCCCC, 0x006E2A04, 0x06070707, 0x00000000, 0x00000000, 0x00000000, 0x07000100, 
0x00000000, 0x00000000, 0x00000000, 0xCEC2C0C1, 0x00000000, 0x00000000, 0x00000000, 0x78787878, 
0x00000000, 0x00000000, 0x00000000, 0x57575757, 0x00000000, 0x00000000, 0x00000000, 0x00800716, 
0x00000040, 0x00000000, 0xC0C60A00, 0x5C000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 
0xCCCCBBCB, 0xBBBBCCCC, 0x896745C3, 0xA9CCCC9B, 0xCC792301, 0x0062BACC, 0xCCCCBCA9, 0x2032A5CB, 
0x00002001, 0x23002112, 0x06000542, 0xCC000040, 0x21C60C4C, 0x00000008, 0x00002000, 0x00000042, 
0x0022006A, 0x00000022, 0x00C00007, 0xBCBBBBCB, 0xBBBBCBCC, 0x896745C3, 0x99B9CCCC, 0xCCCC7804, 
0x2430B8CB, 0x10222272, 0x00000000, 0xCC8A4623, 0x97BACCCC, 0x0C000913, 0x00000060, 0x00000000, 
0xAAA20C00, 0x0820228C, 0x66660000, 0x0046AA00, 0x00000064, 0x00000000, 0xAB6833B2, 0x3096CCCC, 
0x6A220000, 0x0084CBCC, 0xCC9C4702, 0x0010A6CB, 0xCCCCAB47, 0x003263CA, 0x00000000, 0x01010000, 
0x10000507, 0xAC000060, 0x0040A08A, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x8C4444B2, 0x97BACBCC, 0x260200C0, 0x63C9CCAC, 0xCCBABB09, 0x9643C9CC, 0x232232A5, 
0x22222222, 0x59232222, 0xCACCCCCC, 0x0E000F43, 0x00000040, 0x00000000, 0x0CC40C00, 0x000400C6, 
0x22000000, 0x00006200, 0x00000000, 0x00000000, 0x999999C9, 0xB9BACCBC, 0x896745C3, 0x99C9CC9C, 
0xC8CCAC08, 0x00013285, 0xCACCCCCC, 0x22222286, 0x10001011, 0xAB441210, 0x00800812, 0x82000040, 
0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00000000, 0x999999C9, 
0xA9A9ABAA, 0x896745C3, 0xB9CC9B99, 0xC8380000, 0x00000040, 0xCCBCBABA, 0x123198CB, 0x66480100, 
0xC99A5544, 0x01000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00000000, 0x999999C9, 0xBABACCBC, 0x896745C3, 0x99B9CCBC, 0xC97A8809, 0x00008568, 
0x97B9CCCC, 0x22222354, 0xAC683322, 0xCCCCCCCC, 0x00800716, 0x00000040, 0x00000000, 0xC0C60A00, 
0x5C000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 0xBCBBBBCB, 0xCBBBCCCC, 0x896745C3, 
0xA9CCCCBB, 0xCCBC9805, 0x000063B8, 0xCCCCCCA9, 0x000083CB, 0x00002001, 0x24002112, 0x12000542, 
0xCC000040, 0x21C60C4C, 0x00000008, 0x00002000, 0x00000042, 0x0022008A, 0x00000022, 0x00C00007, 
0xBCBBBBCB, 0xBBBBCBCC, 0x8A6745C3, 0x99C9CCCC, 0xC9CCCC6C, 0x34222262, 0x22222292, 0x22222222, 
0xCCBC6924, 0x4485CACC, 0x0E000914, 0x00000060, 0x00000000, 0xAAC80A00, 0x00000004, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xBB9A78B3, 0x2262CACC, 0x26222262, 0x64A8CBAC, 0xC9CCAC66, 
0x22222262, 0x96CCCCBC, 0x22232242, 0x22223242, 0x36222222, 0x0C000506, 0xCA000060, 0x22C2A62A, 
0x00008002, 0x00000000, 0x00006686, 0x0046009A, 0x00000044, 0x00000000, 0x6A2342B2, 0x97BACBCC, 
0x262332C2, 0x97CACCAC, 0xCACCCC6C, 0x74234396, 0x222222B3, 0x22222222, 0xCC9A4623, 0x97B9CBCC, 
0x0C000943, 0x00000040, 0x00000000, 0x0CC40C00, 0x000200C6, 0x22000000, 0x00006200, 0x00000000, 
0x00000000, 0x999999C9, 0xC9CBCCBC, 0x896745C3, 0x99C9CC9C, 0xC8CCBC0A, 0x00012285, 0xCACCCCCC, 
0x22223386, 0x10001011, 0xAB441210, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 
0x00004400, 0x00000000, 0x00000000, 0x00000000, 0x9B9999C9, 0xCBBBCCBC, 0x896745C3, 0xA9CCCCAC, 
0xC8380000, 0x00000040, 0xCCBCBABA, 0x123198CB, 0x66480100, 0xC99A5554, 0x01000701, 0x022CC64C, 
0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0x999999C9, 
0xCBCBCC9C, 0x896745C3, 0x99A9CCBC, 0xC97A6808, 0x00002262, 0x97B9CCCC, 0x22222354, 0x69242222, 
0xCCCCCCBC, 0x0080050B, 0x00000060, 0x00000807, 0x00000007, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xBCBBBBCB, 0xBBBBCBCC, 0x896745C3, 0x99A9CCCC, 0xCCCC89C4, 0x21112296, 
0x10222272, 0x00000000, 0xCC5B2222, 0x2274C9CC, 0x1200091F, 0x00000020, 0x20000000, 0xA0010800, 
0xAC00800A, 0x44000000, 0x00004400, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xBBBBCCCC, 0xAB6745C3, 
0xA9CACCBC, 0xCC8B9709, 0x1473CBCB, 0xCCAC9B58, 0x0061B8CC, 0x02000000, 0x13020022, 0x0200052D, 
0x82000060, 0x40840000, 0x00002A80, 0x00000006, 0x02000600, 0x80AC8628, 0x00000000, 0x000C0000, 
0xAC2622B2, 0xA67AABCC, 0xBB475801, 0x202262CA, 0xCCC948C2, 0x2232B8BB, 0x20B7CCCC, 0x00000000, 
0x00202200, 0x49220000, 0x12000507, 0x4C000060, 0x00004024, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x695633B0, 0xCBCACCCC, 0x04002000, 0xBBBBCC8C, 0xC9798905, 
0x8474CCCC, 0x111163C9, 0x11111111, 0x22121111, 0xCCCCCC49, 0x12000943, 0x00000040, 0x00000000, 
0x0CC40C00, 0x000400C6, 0x22000000, 0x00006200, 0x00000000, 0x00000000, 0x999999C9, 0x9C99CC99, 
0x896745C3, 0x99C9CC9C, 0xC8B938C1, 0x11116266, 0xA5CCCCCC, 0x11112133, 0x11111111, 0x79461111, 
0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 
0x00000000, 0xBC9999C9, 0xC9ABC9CC, 0x896745C3, 0xC9CCCCAC, 0xCA8A8888, 0x88888898, 0xBABCCCCC, 
0x22433363, 0x34855922, 0xBA7A3653, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00000000, 0x999999C9, 0xBCA9A9AB, 0x896745C3, 0x99B9CC9B, 
0xC8380000, 0x00000040, 0x228499CB, 0x11111122, 0xAC482222, 0xBABBCCCC, 0x0080070B, 0xC0000060, 
0x00C00C04, 0x00000002, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00000000, 0xBCBBBBCB, 
0xBBBBCCCC, 0x896745C3, 0x99B9CCCC, 0xCCAC5802, 0x040040B7, 0x00200000, 0x00000000, 0xCCBC2700, 
0x215497CC, 0x12000916, 0x00000040, 0x00000000, 0xC0C60A00, 0x0A000006, 0xA6000000, 0x00000000, 
0x00000000, 0x00000000, 0xBCBBBBCB, 0xBBBBCCCC, 0xCCAB68C6, 0xAABACCCC, 0xCCBC9967, 0x6666A9CB, 
0xCCCCAA99, 0x666686CB, 0x66666666, 0x66667667, 0x0C000506, 0xCA000060, 0x22C2A62A, 0x00008002, 
0x00000000, 0x00006686, 0x004600AA, 0x00000044, 0x00000000, 0xAC572300, 0x73BBCCCC, 0x48000000, 
0x30B7CCCC, 0xCBCCBC0A, 0x540042B7, 0x00000041, 0x00000000, 0x8B160000, 0x94CBCCCC, 0x10000F13, 
0x00000060, 0x00000000, 0xAAA20C00, 0x2820228C, 0x66660000, 0x0046AA00, 0x00000064, 0x00000000, 
0xCC9B7814, 0xA6CCCCCC, 0x48002100, 0x51C9CCCC, 0xCBCCCC0C, 0x000052A7, 0xCCCCCC9C, 0x204365B8, 
0x00010000, 0x24020000, 0x12000512, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 
0x00000000, 0x00000000, 0x00000000, 0xBCBABBCA, 0x99A9CCCC, 0x896745C3, 0x99B9CCBC, 0xCBAB7806, 
0x0000CCBC, 0x6597CBCC, 0x00202452, 0x25121200, 0xCCCCBC68, 0x02000701, 0x022CC64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0x999999C9, 0xA9CBCCBC, 
0x896745C3, 0x99CCCC9A, 0xC99C7668, 0x66666676, 0xCCCCAB9A, 0xBACBCCCC, 0x55657698, 0x68240042, 
0x006F2A05, 0x07050405, 0x00000004, 0x00000000, 0x00000000, 0x00010000, 0x00000001, 0x00000000, 
0x00000000, 0xC0C0C2C0, 0x00000040, 0x00000000, 0x00000000, 0x78787878, 0x00000078, 0x00000000, 
0x00000000, 0x58575858, 0x00000057, 0x00000000, 0x00000000, 0x00800516, 0x00000040, 0x00000000, 
0xC0C60A00, 0x2C000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCCBCCB, 0xCBBBCBBC, 
0x8B6745C3, 0x99CBBCCC, 0xCBAACC0C, 0x220063B9, 0xCBAB67A7, 0x32B6BBBB, 0x22222221, 0x02000000, 
0x0E000521, 0x86000080, 0xCC86A840, 0x0000800C, 0x00000000, 0x000000CC, 0x0406009A, 0x0000008A, 
0x00C00000, 0xBBBBBBCB, 0xCCBBCCCC, 0x898746C3, 0x99A9CCCC, 0x95B9CB0C, 0x57001213, 0x02102262, 
0x7A665523, 0xCCCCCCCC, 0x556465A9, 0x12000915, 0x00000060, 0x00000000, 0x44CC0200, 0x00002002, 
0x00000000, 0x00004000, 0x00000000, 0x00000000, 0x7B5333C2, 0x85BBCCCC, 0xCCBC37C0, 0x0041B8CC, 
0xB798CC0C, 0x32133141, 0x96CCCCBC, 0x00103165, 0x00000000, 0x14000000, 0x0C000522, 0x82000080, 
0xCC86404A, 0x000080C0, 0x00000000, 0x0000CC00, 0x408C008A, 0x00000000, 0x000C0000, 0xCCCCCCBA, 
0x634573C9, 0xCC8A1400, 0x1085CCCC, 0xC8C9CC0C, 0x21327856, 0x2252A9CB, 0x24322222, 0xBBAA9A58, 
0xCCBBBBCB, 0x01000714, 0x3A040060, 0x00000010, 0x00B80900, 0x00000004, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xBCBB6AB5, 0xCCCCCCCB, 0x03122000, 0xCCCCCC7A, 0xC8CCCC0C, 0x22415952, 
0x42C9CCBC, 0x00000021, 0x01000000, 0x49222221, 0x12000522, 0x82000080, 0xCC86404A, 0x000080C0, 
0x00000000, 0x0000CC00, 0x408C008A, 0x00000000, 0x00000000, 0xCCBBBBCB, 0xBBBBBCCC, 0xBA6745C3, 
0x9999CABC, 0x252212C1, 0x1163CC7B, 0x11214394, 0x11111111, 0x55231111, 0x96CC9C56, 0x1200091C, 
0x00000060, 0x00000000, 0x00000000, 0x00C04800, 0x00000000, 0x00002600, 0x00000000, 0x00000000, 
0xCC9999C9, 0x9999C9CC, 0xCACCBBC7, 0x999999CA, 0xC73711C1, 0x2263CC7B, 0x23533532, 0xCCCC997B, 
0x11113284, 0x11111111, 0x08000521, 0x86000080, 0xCC86A840, 0x0000800C, 0x00000000, 0x000000CC, 
0x0406008A, 0x00000088, 0x00000000, 0xC99C99C9, 0xC9C999CC, 0x896745C3, 0x9999CCCC, 0xCB6A24C1, 
0x33125596, 0x2263B8CC, 0x11212222, 0x12111111, 0xCC89A936, 0x01000701, 0x022CC64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0x9C9999C9, 0xB9B9CCCC, 
0x896745C3, 0x9999CAAC, 0xC77A55C5, 0x11111132, 0x86CACCCC, 0x11414643, 0x24414612, 0x56556556, 
0x00000707, 0x2C000080, 0x00110400, 0x00000000, 0x00000000, 0x00000042, 0x00000000, 0x00000060, 
0x00800000, 0xBCBBBBCB, 0xBCBBCBCC, 0x896745C3, 0xA9BACCAC, 0xB9BBCCCC, 0x9B262273, 0x222273B9, 
0x59333323, 0xCACCCCAC, 0x9999BBAB, 0x12000915, 0x00000060, 0x00000000, 0x04CC0000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xBBBBCCCC, 0xCC6A45C3, 0x99B9ABCC, 
0x74CACCCC, 0x22222222, 0x94CBCCBC, 0x22222222, 0x35222222, 0x25222232, 0x12000528, 0x00000080, 
0x06000000, 0x00000000, 0x00000000, 0x00004000, 0x000000CA, 0x00000004, 0x00000000, 0xCCC999B9, 
0xB99999CC, 0xCCAB58C3, 0x99A9CCCC, 0xC9BCCCCC, 0x32A747B8, 0x527897CC, 0x24222222, 0xCBACAB8A, 
0xBB3753A9, 0x04800918, 0x00000020, 0x00000000, 0x0A000400, 0x000000C0, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x9B99C9C9, 0xCCC9CCAC, 0x896745C3, 0xCAACCCBB, 0xC96A33C2, 0x22112262, 
0xA7CBBCCC, 0x12112142, 0x12111121, 0xBC67A758, 0x01000701, 0x022CC64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xCB9CA9C9, 0xCCCCCCCC, 0x896745C3, 
0x99BBCCBC, 0xC7AB6802, 0x00002232, 0x2242B9CC, 0xABBB5B22, 0x5B53B9AA, 0xCBAABBBB, 0x00800516, 
0x00000040, 0x00000000, 0xC0C60A00, 0x2C000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 
0xBCBBBCCB, 0xBCBBCCBC, 0x896745C3, 0xA9BCCCAC, 0x96ACCC0C, 0x22406869, 0xCC6C2392, 0x42C9CCCC, 
0x22222221, 0x12000000, 0x0E000521, 0x86000080, 0xCC86A840, 0x0000800C, 0x00000000, 0x000000CC, 
0x0406009A, 0x0000008A, 0x00C00000, 0xBBBBBBCB, 0xBBBBCCCC, 0x896745C3, 0x99C9CCCC, 0x72A8CC0C, 
0x35003122, 0x01112263, 0x8A472202, 0xCCCCCCCC, 0x225275AA, 0x12000915, 0x00000060, 0x00000000, 
0x44CC0200, 0x00002002, 0x00000000, 0x00004000, 0x00000000, 0x00000000, 0x7B2532C2, 0x75BACCCC, 
0xCCBC37C1, 0x002164CA, 0x84B8CC0C, 0x00441111, 0x74CBCCBC, 0x00102122, 0x00000000, 0x14010000, 
0x0C000522, 0x82000080, 0xCC86404A, 0x000080C0, 0x00000000, 0x0000CC00, 0x408C008A, 0x00000000, 
0x000C0000, 0xCCAC99C9, 0x9999C9CC, 0xAAAA68C4, 0x99B9CCCC, 0xC879A90B, 0x11005284, 0x75BABBCC, 
0x45223233, 0x6676A988, 0xCCBB7967, 0x00000714, 0x00000060, 0x00000000, 0xAAC80A00, 0x00000004, 
0x00000000, 0x00000000, 0x00060000, 0x00000001, 0xCC99BCCB, 0xC9C9CCCC, 0xAB6776C5, 0xBCCCBC9B, 
0xCABCCCCA, 0x22224474, 0x73CBCCBC, 0x22222222, 0x22222222, 0x25222232, 0x00800546, 0x86000040, 
0x0080C60C, 0xCC808600, 0x06000094, 0x00000000, 0x00000000, 0x200A0000, 0x00002000, 0x9C9999C9, 
0xCCCCCCCC, 0x896745C3, 0xCACCCC9B, 0xC8592201, 0x00001140, 0x87BACBCC, 0x02001032, 0x26000010, 
0xAB9A9A78, 0x12000701, 0x022CC64C, 0x00000000, 0x00800000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00000000, 0x9B9999C9, 0xCCCCCCCC, 0x896745C3, 0x99B9CCBC, 0xC7AA89C4, 0x2232CAA7, 
0xA96854C7, 0xCCCCBCBB, 0x99A9AACC, 0x43457598, 0x01000926, 0x00000060, 0x00000000, 0xB08A0600, 
0x05000000, 0xC0000000, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xCBCCCCCC, 0x698925C0, 
0x99C9CCCC, 0xC9CCCC6C, 0x66666676, 0xABB9CCBC, 0x553373BB, 0x9B350120, 0x88AABBBA, 0x1200050F, 
0x00000060, 0xBC050000, 0x00000010, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xCCCCBCCB, 0xCBCCCBCC, 0xCCCC9CC5, 0x9999C9CC, 0xCBBBCB2C, 0x22223264, 0x00420200, 0x16000000, 
0xCBCCCCAC, 0x205266A8, 0x12000925, 0x00000060, 0x00000000, 0x096A0200, 0x00000070, 0x000C0000, 
0x00000000, 0x00000000, 0x00000000, 0x9ABAABC9, 0xC9CCCCCC, 0x881562C2, 0x84CBCCCC, 0xC7CCCC2A, 
0x2222A29C, 0xB8CCCCCC, 0x00006278, 0x00000000, 0x59020000, 0x01000701, 0x0228C74C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00000000, 0x00040020, 0x00000000, 0x9B9999C9, 0xC9BACCBC, 
0x480300C0, 0x40C8CCCC, 0xCA8A8888, 0x88888898, 0xCAAA9BA7, 0x357587BB, 0xBBAB7834, 0xCACCCBCC, 
0x00702F03, 0x00080809, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00C3C0C0, 0x00000000, 0x00000000, 0x00000000, 0x00373737, 0x00000000, 0x00000000, 
0x00000000, 0x009E9E9E, 0x00000000, 0x00000000, 0x00000000, 0x1200050B, 0xC2000060, 0x20C60C2A, 
0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00000006, 0xBBBBBBCB, 0xCCCCBBBB, 
0x8C6745C3, 0x9999CCCC, 0xCCBC8808, 0x00002085, 0x13111122, 0x11111111, 0xCC995646, 0x2274B9CC, 
0x12000D18, 0x00000020, 0x00000000, 0x0A000A00, 0x002882CA, 0x02440000, 0x00202200, 0x00000002, 
0x00000000, 0x372222C2, 0x84ACCCBC, 0xCC6A14C0, 0x000062CA, 0xCA5922C2, 0x2232C9CC, 0x9C372221, 
0x6575CBCC, 0x12111121, 0x11411122, 0x00000703, 0x00A4AC62, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCCBAB7, 0x2232A6CC, 0xCC7B0300, 0x002086CC, 
0xC8481131, 0x11111141, 0x54242282, 0x12002222, 0xCC6A2512, 0x86AACBCC, 0x0080051F, 0x00000020, 
0x20000000, 0xA0000800, 0xAC00800A, 0x44000000, 0x00004400, 0x00000000, 0x00000000, 0x987A23B2, 
0xCCCCBC9B, 0xCCBB99C6, 0x42B8CACC, 0x8B347703, 0x0073CCCC, 0xCC8C7737, 0xB7BBBBCC, 0x00000020, 
0x00000000, 0x12000509, 0x4C000060, 0x0040040C, 0x00000000, 0x00000000, 0x00004400, 0x00000000, 
0x00000000, 0x00000000, 0xCCCC9BC5, 0xB9CBACA6, 0xCC6A22C2, 0x2242B7CC, 0x37235101, 0x2684CCA8, 
0x2232A7CA, 0x22222222, 0x87362222, 0xCCCC7C66, 0x0000053C, 0x8A000060, 0x0020000A, 0x00000000, 
0x00000000, 0x00000066, 0x00000002, 0x00000086, 0x00C00000, 0xCBCC9B86, 0xB7CCAC77, 0xCC590100, 
0x001095CC, 0x98455405, 0x0400CC9A, 0x112074CB, 0x00000000, 0x8A150002, 0xCCCCCCBB, 0x0A000F1D, 
0x00000060, 0x00000000, 0x02000200, 0x008CACA2, 0xAC000000, 0x00A8A800, 0x00000000, 0x00000000, 
0xACCCBCC9, 0xB9BCAACC, 0xCACC8BC5, 0x99C9CCCC, 0xC9592201, 0x1173CCCC, 0xB6CCCCCC, 0xCCAC8A45, 
0x211122A5, 0xAB252223, 0x00800946, 0x86000040, 0x0080C60C, 0xCC808600, 0x06000064, 0x00000000, 
0x00000000, 0x200A0000, 0x00002000, 0xCCACA9CB, 0xCCC9CC9C, 0x896745C3, 0xCCCCCC9B, 0xC8686AC2, 
0x11111141, 0x52B9CCCC, 0x01000021, 0x10000021, 0xAC982701, 0x01000701, 0x022CC64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00010000, 0xCC9999C9, 0xC9CCCCCC, 
0x896745C3, 0x99B9CCCC, 0xC6AB8906, 0x00000031, 0xA98A9869, 0xCCBAABBB, 0x63BACBCC, 0x22533422, 
0x00800716, 0x00000040, 0x00000000, 0xC0C60A00, 0x5C000006, 0xA6000000, 0x00000000, 0x00000000, 
0x00000000, 0xBBBBBBCB, 0xCCCCBCBB, 0x896745C3, 0x99B9CC99, 0xC9CCCC0B, 0x32005288, 0xAACCCCCC, 
0x00006277, 0x00000000, 0x26000000, 0x04000542, 0xCC000040, 0x20C60C4C, 0x00000008, 0x00002000, 
0x00000040, 0x0022006A, 0x00000022, 0x00C00006, 0xBBBBBBCB, 0xCCCCBCBB, 0xCC6845C3, 0x9999B9CC, 
0xCC8C0400, 0x00002195, 0x01001042, 0x00000000, 0xCC691500, 0x2263C9CC, 0x12000D13, 0x00000060, 
0x00000000, 0xAAA20C00, 0x2820228C, 0x66660000, 0x0046AA00, 0x00000064, 0x00000000, 0x6A2222C2, 
0x2284CBBC, 0xCC4801C0, 0x202296CA, 0xCC480102, 0x0030C9CC, 0xBC570200, 0x2122A5CC, 0x00300100, 
0x00000000, 0x12000508, 0x2C000060, 0x000040C8, 0x00000000, 0x00000000, 0x00000200, 0x00000000, 
0x00000000, 0x00000000, 0xCCCC9CB6, 0x00110473, 0xCC590100, 0x000084CC, 0x77131101, 0x8473CC8B, 
0x001032C7, 0x00000000, 0x24220100, 0xCCCCCC9A, 0x0A000926, 0x00000080, 0x00000000, 0x40200600, 
0x04AC6886, 0xCA000000, 0x00A88806, 0x00000000, 0x00000000, 0x9C9999C9, 0xB9CCCCCC, 0x897979C3, 
0x9999CCBC, 0xC9798BC4, 0x9975BB8B, 0xA8CCCCCC, 0x77698776, 0x22222242, 0x89682322, 0x0000092C, 
0x44000060, 0x00400040, 0x00000000, 0x00040200, 0x08000800, 0x00CA878C, 0x00000000, 0x00000000, 
0xACBBCCCC, 0xBAAAC9CC, 0xA9B8CCC8, 0xC9CACCCC, 0xCCCCCC0B, 0x705076A8, 0x6398CCCC, 0x66565323, 
0x10000042, 0xCCCCAC26, 0x00800946, 0x86000040, 0x0080C60C, 0xCC808600, 0x06000064, 0x00000000, 
0x00000000, 0x200A0000, 0x00002000, 0x9C9999C9, 0xC9A9ACCC, 0x896745C3, 0xAACBCC9A, 0xC79ABCC9, 
0x12224443, 0x63CACCCC, 0x22222222, 0x22222222, 0x49222222, 0x01000701, 0x022CC64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00010000, 0x9C9999C9, 0xC9CCCCCC, 
0x896745C3, 0x99A9CCCC, 0xC9997BC4, 0x22222262, 0x66A779A7, 0xCCAB9866, 0x87B9CCCC, 0x76242263, 
0x00800716, 0x00000040, 0x00000000, 0xC0C60A00, 0x5C000006, 0xA6000000, 0x00000000, 0x00000000, 
0x00000000, 0xBBBBBBCB, 0xCCCCBCBB, 0x896745C3, 0x99B9CC99, 0xC9CCCC0B, 0x32005288, 0xAACCCCCC, 
0x00006277, 0x00000000, 0x26000000, 0x12000542, 0xCC000040, 0x20C60C4C, 0x00000008, 0x00002000, 
0x00000040, 0x0022006A, 0x00000022, 0x00C00006, 0xBBBBBBCB, 0xCCCCBCBB, 0xCC6845C3, 0x9999B9CC, 
0xCC8C0400, 0x00004197, 0x00001042, 0x00000000, 0xCC780200, 0x5575B8CC, 0x12000D49, 0x00000060, 
0x00000000, 0x00000C00, 0x0000C00C, 0x00000000, 0x00006800, 0x00000000, 0x00000000, 0x6A2222C2, 
0x2295CBBC, 0xCC4801C0, 0x202273C9, 0xCC480100, 0x000096CC, 0xBC490100, 0x2122A5CC, 0x00000000, 
0x00000000, 0x12000507, 0xAC000060, 0x0040A08A, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xCCCCACB8, 0x222222A6, 0xCC6A2200, 0x0021A6CC, 0xC979B909, 0xBA75CCCB, 
0x222295C7, 0x00000022, 0x9B350100, 0x75CCCCBC, 0x0000053C, 0x8A000060, 0x0020000A, 0x00000000, 
0x00000000, 0x00000066, 0x00000002, 0x00000086, 0x00C00000, 0xCCCCAC87, 0x00110173, 0xCC590100, 
0x000084CC, 0xAA465405, 0xA800CCBC, 0x001053C9, 0x00000000, 0x8A350100, 0xCCCCCCAC, 0x12000913, 
0x00000060, 0x00000000, 0xAAA20C00, 0x2820228C, 0x66660000, 0x0046AA00, 0x00000064, 0x00000000, 
0x9CB999C9, 0xC9CCBCCC, 0x99979BC5, 0x99A9CCCC, 0xCCCCB968, 0x2285CC99, 0xBBCCCCCA, 0x66989887, 
0x22222232, 0x23222222, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 
0x00000000, 0x00000000, 0x00000000, 0xBCAAAACA, 0xCBCCCCCC, 0x896766C6, 0xB9CBCCAC, 0xC9CCCC6C, 
0x66669988, 0x97CBCCBC, 0x66666666, 0x66666666, 0x79666666, 0x01000701, 0x022CC64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xCC9C99C9, 0xABCCCBCC, 
0x8B6745C3, 0x99B9CCCC, 0xC9696666, 0x66666676, 0x4476A8B8, 0x2242997A, 0xCBAC3622, 0x7A87AABB, 
0x01712F03, 0x00080909, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00C3C1C1, 0x00000000, 0x00000000, 0x00000000, 0x00353535, 0x00000000, 0x00000000, 
0x00000000, 0x00CECECE, 0x00000000, 0x00000000, 0x00000000, 0x00800716, 0x00000040, 0x00000000, 
0xC0C60A00, 0x2C000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 0xCBBBBBCB, 0xBCBBBBBC, 
0x896745C3, 0xBBCACC99, 0xCBCCCC3C, 0xA33343A6, 0xCCBC9A5A, 0x83CCCCCC, 0x00000000, 0x01000000, 
0x08000521, 0x86000080, 0xCC86A840, 0x0000800C, 0x00000000, 0x000000CC, 0x0406008A, 0x00000088, 
0x00000000, 0xBCBBBBCB, 0xBBBBCBCC, 0x9B8788C4, 0x99A9CCCC, 0xA6CCCC0C, 0x68000031, 0x24222233, 
0x8A889857, 0xCACCCCBC, 0x22436496, 0x0000072D, 0x82000060, 0x40840000, 0x00002A80, 0x00000006, 
0x02000600, 0x80AC8628, 0x00000000, 0x00000000, 0xBBCBCCBC, 0xBCCCBBBB, 0xAAACCAAA, 0xAAAAAAAC, 
0xCBCCCCAC, 0xAAAAAAAA, 0xAAAACACC, 0xCAAAAAAA, 0xAAAAAAAA, 0xCCAAAAAA, 0x12000915, 0x00000060, 
0x00000000, 0x44CC0200, 0x00002002, 0x00000000, 0x00004000, 0x00000000, 0x00000000, 0xCCCCAB87, 
0x4277B8CC, 0xCCBC3700, 0x443395CC, 0xC8CCCC0B, 0x00509967, 0x94CCCCBC, 0x00000031, 0x00000000, 
0x14000000, 0x12000506, 0xCA000060, 0x22C2A62A, 0x00008002, 0x00000000, 0x00006686, 0x004600AA, 
0x00000044, 0x00000000, 0x00000000, 0xCC9B4800, 0xCC6A0200, 0x001095CC, 0xC6CC8B04, 0x02000031, 
0x00000000, 0x00000000, 0xCCAC3601, 0x0062C9CC, 0x12000D15, 0x00000060, 0x00000000, 0x44CC0200, 
0x00002002, 0x00000000, 0x00004000, 0x00000000, 0x00000000, 0xCC9C99C9, 0x9999A9CC, 0xCCCC4823, 
0x999999C9, 0xC7CCCC0C, 0x00642065, 0xCCCCCC8C, 0x000041A6, 0x00000000, 0x03000000, 0x00000922, 
0x82000080, 0xCC86404A, 0x000080C0, 0x00000000, 0x0000CC00, 0x408C008A, 0x00000000, 0x00000000, 
0xA9CCCCCC, 0x99999999, 0xCCCCCBC8, 0x9999CCCC, 0xC8CCCC0C, 0x01033542, 0x75CBCCCC, 0x44558766, 
0x69667656, 0xCCCCCB9B, 0x00800946, 0x86000040, 0x0080C60C, 0xCC808600, 0x06000064, 0x00000000, 
0x00000000, 0x200A0000, 0x00002000, 0x999999C9, 0xCCCC9C99, 0x896745C3, 0xCACCCC99, 0xC7CCCC0B, 
0x00000031, 0x76CBCCBC, 0x00001054, 0x00000000, 0x26000000, 0x01000701, 0x022CC64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xB9CCBCC9, 0x9A999999, 
0xBC6745C3, 0x9999CACC, 0xC69B6703, 0x00003631, 0x87A9CCBB, 0xCCBCBB88, 0x78879BCB, 0x67363176, 
0x00800716, 0x00000040, 0x00000000, 0xC0C60A00, 0x2C000006, 0xA6000000, 0x00000000, 0x00000000, 
0x00000000, 0xBBBCBBCB, 0xCCBBBBBC, 0x999999C9, 0x99C9C999, 0xCCCCCCCC, 0xCCCCCCCC, 0xCC999999, 
0x999999CC, 0x99999999, 0x99999999, 0x12000511, 0x42000060, 0xC64A0A00, 0x0000000C, 0x00000000, 
0x000000A8, 0x00000020, 0x00000008, 0x00000000, 0xBCBBBBCB, 0xBBBBCBCC, 0x9B8788C4, 0x99A9CCCC, 
0xA6CCCC0C, 0x68000031, 0x24222233, 0x8A889857, 0xCACCCCBC, 0x22436496, 0x0000072D, 0x82000060, 
0x40840000, 0x00002A80, 0x00000006, 0x02000600, 0x80AC8628, 0x00000000, 0x00000000, 0xBBBBBBBB, 
0xCBCBBCCC, 0xCCACAAAA, 0xAAAAAACC, 0xCCCCCCCC, 0xCCCCCCCC, 0x999999B9, 0x99999999, 0xCC999999, 
0x999B99CC, 0x12000917, 0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 0x00AA0000, 0x00000000, 
0x00000000, 0x00000000, 0xCCAC97CA, 0x22649ACC, 0xCC48C8C8, 0x3333A6C8, 0xCBBBCCAC, 0xAAAAAAAA, 
0xCBCCCCAB, 0x5A5388A9, 0x35111162, 0x45131121, 0x00000704, 0x00C42860, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xBBCBCCBB, 0xBBBBCBBC, 0xACAACACA, 
0xAAAAAACC, 0xC6060000, 0x00000031, 0xAAAAAACC, 0xAACAAAAA, 0xAAAAAAAA, 0xACAACCAA, 0x06000F0B, 
0xC2000060, 0x20C60C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00000000, 
0x97BBCCCC, 0xCBAC7A44, 0x8C9C35C3, 0x333384CC, 0xCCBCCBBC, 0xBBBBBBCC, 0x222232A5, 0x22222222, 
0xBC9A3622, 0xBC87CBCC, 0x12000D13, 0x00000060, 0x00000000, 0xAAA20C00, 0x2820228C, 0x66660000, 
0x0046AA00, 0x00000064, 0x00000000, 0xCBACA9CC, 0xCC99B9CC, 0xCC68C8C8, 0xA9BCCAC9, 0xCCCCAC09, 
0x008998CB, 0xCCBCCBAC, 0x112164CB, 0x22121111, 0x47531323, 0x0080090A, 0xAC000060, 0x00A0C060, 
0x0500A000, 0x00000040, 0x000000AA, 0x00020002, 0x00000002, 0x00000000, 0xBABACBCC, 0x9999999A, 
0x896745C3, 0x99CBCC9C, 0xC6060000, 0x00000031, 0xCBCCCCBC, 0x002031A7, 0x22120002, 0x89565522, 
0x01000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00000000, 0xA9CCBCC9, 0x99AAB9CB, 0x996766C6, 0x99C9CCCC, 0xCBBBBCBB, 0xBBBBBBBB, 0xCCCCCCBC, 
0x6886A8CA, 0x7A444444, 0xCBCCBAAA, 0x00800716, 0x00000040, 0x00000000, 0xC0C60A00, 0x2C000006, 
0xA6000000, 0x00000000, 0x00000000, 0x00000000, 0xBCBCBBCB, 0xBCBBCBBB, 0x999999C9, 0xC999C9CC, 
0xCBCCCCBC, 0xBBBBBBBB, 0xCCACAAAA, 0xAABCCCCC, 0xAAAAAAAA, 0xAAAAAAAA, 0x0C000521, 0x86000080, 
0xCC86A840, 0x0000800C, 0x00000000, 0x000000CC, 0x0406008A, 0x00000088, 0x00000000, 0xBBBBBBCB, 
0xBBCCBCCC, 0x8CCCCCC8, 0x9999CC9C, 0x52C9CC0C, 0x22000021, 0x22222232, 0x6A232222, 0x84CBCCBC, 
0x22222222, 0x0000072D, 0x82000060, 0x40840000, 0x00002A80, 0x00000006, 0x02000600, 0x80AC8628, 
0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x0C000915, 0x00000060, 0x00000000, 0x44CC0200, 
0x00002002, 0x00000000, 0x00004000, 0x00000000, 0x00000000, 0xCCCAAABB, 0x2222A5CC, 0xCC6A1200, 
0x222296CC, 0xC9CCCC69, 0x22222262, 0x94BBCCBC, 0x11111121, 0x11111111, 0x25111111, 0x0A000506, 
0xCA000060, 0x22C2A62A, 0x00008002, 0x00000000, 0x00006686, 0x004600AA, 0x00000044, 0x00000000, 
0x222222B2, 0xCCBC6922, 0xCC680200, 0x001073CA, 0xCCAC2662, 0x22223297, 0x11112182, 0x11111111, 
0xCC895822, 0x2273CACC, 0x0E000D43, 0x00000040, 0x00000000, 0x0CC00C00, 0x000444CC, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x99999CC9, 0x9999CBCC, 0xCC6A45C3, 0x999999CA, 0xCB6A2262, 
0x22222273, 0xCC5B22A2, 0x21738797, 0x22221111, 0x22222211, 0x00800F12, 0x82000040, 0x00888000, 
0x0500C0A0, 0x00000040, 0x00004400, 0x00000000, 0x00000000, 0x00000000, 0xBABACBCC, 0x9999999A, 
0x896745C3, 0xC9CBCCBC, 0xC6060000, 0x00000031, 0xCCCCCCCC, 0x112131A7, 0x22121112, 0x89565522, 
0x01000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00000000, 0xCCCC9CC9, 0x99999999, 0x8C6745C3, 0x9999CACC, 0xC9592282, 0x22222252, 0xB6AB35C4, 
0x22222232, 0x8B372222, 0x232273CC, 0x00722A0B, 0x06070808, 0x05060607, 0x00040807, 0x00000000, 
0x00000001, 0x00000100, 0x00000000, 0x00000000, 0xC5C1C3C1, 0xC7CFCEC3, 0x00C7C3C3, 0x00000000, 
0x78787878, 0x78787878, 0x009F7878, 0x00000000, 0x57474747, 0x47474747, 0x00245757, 0x00000000, 
0x0081051F, 0x00000020, 0x20000000, 0xA0000800, 0xAC00800A, 0x44000000, 0x00004400, 0x00000000, 
0x00000000, 0xCCCCBBCB, 0xBBCBCCCC, 0x896745C3, 0x99A9CCCC, 0xC9CCCC08, 0x0021A6BC, 0xCC8C6687, 
0x0042A8CB, 0x00000000, 0x22000000, 0x10000509, 0xAC000060, 0x00A00A6C, 0x00000000, 0x00000000, 
0x0000AA00, 0x00202046, 0x00000020, 0x00000006, 0xBC9A99C8, 0xBCBBCCCC, 0x8A6745C3, 0x99BBCCBC, 
0xCBCCCC0C, 0x9C73BACC, 0x444543C8, 0x00003133, 0xAC682400, 0xCCCCCCCC, 0x00000530, 0x20000060, 
0x00200000, 0x00000000, 0x00000000, 0x00000000, 0x02002002, 0x00000094, 0x00A00000, 0xBC6722B1, 
0xA77BBBAC, 0xBA370000, 0x51B9CCCC, 0xCBAACB0C, 0x6A0040A6, 0x11111131, 0x11111111, 0x9C472212, 
0x21B7CBCC, 0x00000733, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000C00, 0x00000007, 0xBBBC68B2, 0x00000073, 0xCC480000, 0x0020A6CC, 0x22112202, 0x9C031011, 
0x00201142, 0x00000000, 0xCC372201, 0x66B8CCCC, 0x0000092D, 0x20000060, 0x00200000, 0x00000420, 
0x00000000, 0x00000000, 0x204A2002, 0x00000000, 0x00000000, 0x8CC8CCBC, 0x878C47C8, 0xCC8C54C2, 
0x1184CCCC, 0xC8CCCCCA, 0x5973CB48, 0x787666C8, 0x0000839A, 0x03001024, 0xCCCCAA78, 0x12000917, 
0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 0x00AA0000, 0x00000000, 0x00000000, 0x00000000, 
0x9C9999C9, 0xCCCCCCCC, 0x896745C3, 0x99BACCBC, 0xC9CCBB0B, 0x33106696, 0xBACCCCCC, 0x23323384, 
0x11012232, 0x79342211, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 
0x00000000, 0x00000000, 0x00000000, 0x9A9999C9, 0xA999CA9C, 0x896745C3, 0x99BACC9A, 0xC8380000, 
0x00000040, 0xB8CCCCCC, 0x22000072, 0x45563300, 0xCC9A6676, 0x02000701, 0x022CC64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0x999999C9, 0xCCABBABB, 
0x896745C3, 0x99A9CC9B, 0xCA9A6AC2, 0x000052B9, 0xBBBBCBCC, 0x666596BA, 0x45222253, 0x9B99A989, 
0x00800716, 0x00000040, 0x00000000, 0xC0C60A00, 0x5C000006, 0xA6000000, 0x00000000, 0x00000000, 
0x00000000, 0xBBCCBCCB, 0xCBBBCCCC, 0x896A45C3, 0x99BACCCC, 0xCCAACA09, 0x0073C8CC, 0xCCCCABAA, 
0x226375CB, 0x22222222, 0x25222222, 0x02000542, 0xCC000040, 0x20C60C4C, 0x00000008, 0x00002000, 
0x00001040, 0x0022006A, 0x00000022, 0x00C00007, 0xBCBBBBCB, 0xBBCCCCCC, 0x896745C3, 0x99BBCCBC, 
0xCCAC5702, 0x2073BBCC, 0x21113285, 0x00000111, 0xBC694424, 0xA8BBCCCC, 0x0C000F13, 0x00000060, 
0x00000000, 0xAAA20C00, 0x2840828C, 0x66660000, 0x0016AA00, 0x000000CA, 0x00000000, 0x9B7866C6, 
0x97CBCCCC, 0xBC6A45C3, 0x99A9CCCC, 0xCCBB8904, 0x7953CACC, 0xCC6C2342, 0x3175B8CC, 0x00000000, 
0x00000000, 0x00000735, 0x02000020, 0x00000020, 0x00420000, 0x00000000, 0x00000000, 0x00000000, 
0x800C0000, 0x00002000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 
0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x0000052D, 0xA2000060, 0x00A80000, 0x00000000, 
0x00000000, 0x02002600, 0x00A9006A, 0x00000000, 0x000A0000, 0xAA8A988B, 0xCABBCACC, 0xBCB83700, 
0xA8CBACCC, 0xCC8A4602, 0x4830C9CC, 0x33B6CCCC, 0x00000030, 0x56342312, 0x9B786666, 0x0C00050A, 
0xAC000060, 0x00A0C060, 0x0880C000, 0x00000000, 0x000000AA, 0x00020028, 0x00000002, 0x000C0000, 
0xCBCCCCBC, 0x766767BA, 0x9B462000, 0x84C9CCBC, 0xCACCCC0B, 0x69328866, 0x2353B8CC, 0x02000021, 
0x88463344, 0xCCCCCCBB, 0x00000735, 0x02000020, 0x00000020, 0x00400000, 0x00000000, 0x00000000, 
0x00000000, 0x800C0060, 0x00602000, 0xCCB8CCBC, 0xBCAC8CCC, 0x482232C2, 0xCCC98CCC, 0xC8C888CC, 
0x222286CC, 0xA869B8CA, 0x9577998A, 0x67232222, 0xBABB5A43, 0x02000714, 0x02280040, 0x00000000, 
0x00900000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220002, 0xBC9B89B4, 0xCBCCCCCC, 
0x00000000, 0xCCCCCC48, 0xC8CCCC0C, 0x00000040, 0x88C9CCCC, 0x20212243, 0x22111012, 0x47222222, 
0x0080071F, 0x00000020, 0x20000000, 0xA0000800, 0xAC00800A, 0x44000000, 0x00004400, 0x00000000, 
0x00000000, 0xCCBBBBCB, 0xBBBBCCCC, 0x8A9745C3, 0x99A9CCCC, 0xCACCCC08, 0x00001063, 0xCCCC49A2, 
0x000094CA, 0x00000000, 0x02000000, 0x10000506, 0xC4000060, 0x04C14404, 0x00000002, 0x00000000, 
0x00000420, 0x00A0008A, 0x00000000, 0x00000000, 0xCBCCBBCB, 0xBBBBCBCC, 0x896745C3, 0x99A9CCBC, 
0xC969C90C, 0x84CB5852, 0x00202285, 0x12020002, 0xCCBB4700, 0x97CCCCCC, 0x00000739, 0x00000340, 
0x00000000, 0x00800300, 0x00000000, 0x00000000, 0x00000000, 0x00006600, 0x0000000C, 0xCCABABB8, 
0x000060CA, 0xCC7B0300, 0x2084BACC, 0xC9AB7807, 0xCCA9AC68, 0x2042A7CC, 0x00000000, 0x36020000, 
0xCCCCCCBC, 0x06000730, 0x88000060, 0x00800000, 0x00000000, 0x00000000, 0x00400040, 0x08068228, 
0x000000AA, 0x00800000, 0xCC8A26B2, 0xBB6896CA, 0xAC260000, 0x30A7CCCC, 0xC8B9CC0C, 0x97371251, 
0x00000020, 0x01000000, 0xCC9B4623, 0x2274A9CC, 0x0C000917, 0x00000040, 0x00000000, 0x0CC60A00, 
0x000000A6, 0x00AA0000, 0x00000000, 0x00000000, 0x00000000, 0x9B9A99C9, 0x99C9CCCC, 0x896745C3, 
0x99A9CC9C, 0xC8CCBC08, 0x00002252, 0xB9CBCCCC, 0x02001175, 0x13000012, 0x89574411, 0x00800812, 
0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00000000, 
0x9B9B99C9, 0x9C999B99, 0x896745C3, 0x9999BA9B, 0xC73711C1, 0x11111132, 0x5A3233C7, 0x22223296, 
0x21222222, 0xAABB2811, 0x01000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00000000, 0xBC9999C9, 0x99C9BCCC, 0x896745C3, 0x99A9CC9B, 0xC8380000, 
0x00000040, 0xB7BBCBCC, 0x66877767, 0x25111132, 0xCCCCBC7A, 0x00800516, 0x00000040, 0x00000000, 
0xC0C60A00, 0x0A000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 0xCCBBBCCB, 0xBBCCCBBC, 
0xC9A846C4, 0x99CCC9CC, 0xCCCC9CC6, 0x444474C9, 0xCCCC7BA4, 0x4444A6BA, 0x44444444, 0x44444444, 
0x0E000521, 0x86000080, 0xCC86A840, 0x0000800C, 0x00000000, 0x000000CC, 0x04060066, 0x00000086, 
0x00C00004, 0xBCBBBBCB, 0xBBBBCCCC, 0x8A6745C3, 0xAABACCBC, 0xCBCCBB67, 0x2262BABC, 0x42234295, 
0x23222222, 0xCC7B6565, 0x99B9CCCC, 0x12000915, 0x00000060, 0x00000000, 0x44CC0200, 0x00002002, 
0x00000000, 0x00004000, 0x00000000, 0x00000000, 0x995624B2, 0xCCCCCCAC, 0xBC9B3662, 0x2295C8CC, 
0xC9CCCC68, 0x24223263, 0xCCCC5A82, 0x222263CC, 0x22222232, 0x22222222, 0x0C000522, 0x82000080, 
0xCC86404A, 0x000080C0, 0x00000000, 0x0000CC00, 0x408C008A, 0x00000000, 0x000C0000, 0xCBCCCCBA, 
0x9B656876, 0xBC8966C2, 0x42C8CCCC, 0xC9CCCC6C, 0x22326899, 0x4495CACC, 0x22224222, 0xAB792322, 
0xCCCCCCBB, 0x0C000546, 0x86000040, 0x0080C60C, 0xCCA08800, 0x06000064, 0x00000000, 0x00000000, 
0x200A0000, 0x00002000, 0xAB9AAAC9, 0x9C99CBCC, 0x896745C3, 0xCACCCC9A, 0xC9BBBA3B, 0x11114473, 
0xA9ABCBCC, 0x22222263, 0x53232322, 0xBC9A7845, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0x9A9999C9, 0xCCACBC9B, 0x896745C3, 
0xA9CBCC9B, 0xC7ABBA0C, 0x00000031, 0x7798CCCC, 0x21223275, 0x22223223, 0xBC482223, 0x12000739, 
0x00000040, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000300, 0x0000000C, 
0xCCCCCCC9, 0x000062CA, 0xBB6924C2, 0x2262C9CC, 0xBB482262, 0x2385CCBC, 0x222263C9, 0x22222222, 
0x35222222, 0xBBBA7845, 0x00000730, 0x80000060, 0x00800000, 0x00000000, 0x00000000, 0x00400040, 
0x08008228, 0x000000CA, 0x00800000, 0xC87BCACA, 0x8CCCCCCC, 0x262222C2, 0xCCCCBCAC, 0xCC7A24C2, 
0x2285BBCC, 0x222222A5, 0x22222222, 0x76AB7724, 0xBBCBCC7C, 0x12000913, 0x00000060, 0x00000000, 
0xAAA20C00, 0x2880228C, 0x66C60000, 0x0046CA00, 0x00000066, 0x00000000, 0xBCBBBBCB, 0xCBBBCCCC, 
0x8A6745C3, 0x99B9CBCC, 0xCC8A6703, 0x4373CCCC, 0xCCAC7A43, 0x65A8BBCC, 0x00002032, 0x00000000, 
0x0000072D, 0x00000060, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00090000, 0x00000000, 
0x000A0000, 0x9B9A88CA, 0x62AAB7CC, 0xBC3700C0, 0x0073BBCC, 0xCC8B7405, 0x0130C9CC, 0xB9CCCCCC, 
0x00000061, 0x22000000, 0x58020020, 0x0C00060A, 0xAC000060, 0x00A0C060, 0x0000A000, 0x00000000, 
0x000000AA, 0x00020002, 0x00000002, 0x00000000, 0x9BA9BBC9, 0x999999BC, 0x896745C3, 0x99A9CCBC, 
0xC9999906, 0x32003375, 0x988A87CA, 0x00001042, 0x23220200, 0xCCCC9C68, 0x00800618, 0x00000020, 
0x00000000, 0x0C000A00, 0x002882CA, 0x02440000, 0x00202200, 0x00000002, 0x00000000, 0xCCA999C9, 
0x99C9CCCC, 0x896745C3, 0xCACC9A99, 0xCA7A75C5, 0x33335388, 0xA8BACCCC, 0x44444454, 0x14004344, 
0xBCAB8866, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00000000, 0x999999C9, 0xCCAAAABB, 0x896745C3, 0x99C9CC9A, 0xC8A886C5, 0x22222242, 
0xA8BBBBCB, 0x21213274, 0x22222222, 0xBB6A2322, 0x03000739, 0x00000040, 0x00000000, 0x00410100, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000000C, 0xBCBBBBCB, 0xBBBBCCCC, 0x8A6666C6, 
0xAABACCCC, 0xCCBC9A68, 0x6676AACB, 0x76667798, 0x66666666, 0xCCAB9978, 0xAABACCCC, 0x00000730, 
0x80000060, 0x00800000, 0x00000000, 0x00000000, 0x00400040, 0x08008228, 0x000000CA, 0x00800000, 
0xBCBBBBCB, 0xBBBBCCCC, 0x8A6666C6, 0xAABACCCC, 0xCCBC9A68, 0x6676AACB, 0x76667798, 0x66666666, 
0xCCAB9978, 0xAABACCCC, 0x12000924, 0x00000080, 0x00000000, 0x0A550600, 0xA0006046, 0x00BB0000, 
0x00008500, 0x00000069, 0x00000000, 0xBBBBBBCB, 0xBBCCCCCC, 0xBC7977C6, 0x99AACBCC, 0xCCAB8967, 
0x7666CCCC, 0xCCCCAB89, 0xBABBBBCC, 0x7776A8AA, 0x66666666, 0x0C00060A, 0xAC000060, 0x00A0C060, 
0x0000A000, 0x00000000, 0x000000AA, 0x00020002, 0x00000002, 0x00000000, 0xCCCCCCCB, 0x9999CACC, 
0x896765C3, 0xA9CBCCBC, 0xCC9A7807, 0x6600BACC, 0x98BACCCC, 0x00001063, 0x47220200, 0xCCCCCCBB, 
0x00800618, 0x00000020, 0x00000000, 0x0A000A00, 0x002882CA, 0x02440000, 0x00202200, 0x00000002, 
0x00000000, 0xB9CCCCCB, 0xC9BACCC9, 0x896745C3, 0xCBCCAC99, 0xCB9BB737, 0x333373BC, 0xA8BACCCC, 
0x44444454, 0x14004344, 0xBCAB8866, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xAC9999C9, 0xCACCCCCC, 0x896745C3, 0x99C9CC9A, 
0xC7370100, 0x00000031, 0x98BACCCC, 0x11212264, 0xBB894623, 0xCBCCCCCC, 0x0080091F, 0x00000020, 
0x20000000, 0x60200400, 0x6A004006, 0x22000000, 0x00006600, 0x00000020, 0x00000000, 0xBBBCBBCB, 
0xBBBBCCCC, 0x896745C3, 0x99CACCAC, 0xBCBB8A05, 0x2386CCCC, 0xCC362212, 0x3098CBCC, 0x00120001, 
0x00000000, 0x08000707, 0xAC000060, 0x006000CA, 0x00000000, 0x00000000, 0x00006000, 0x00000000, 
0x00000000, 0x00000004, 0xBCBBBBCB, 0xCBCCCCCC, 0x896745C3, 0xBABBCC9A, 0xCC692463, 0x2285CCCC, 
0x22634595, 0x24222222, 0xCC5A2263, 0xBBBBCCCC, 0x1200091C, 0x00000060, 0x00000000, 0x00000000, 
0x00C04800, 0x00000000, 0x00802400, 0x00000008, 0x00000000, 0x370020C4, 0xCCCCBCAB, 0xBC9B37C2, 
0x84CBCCCC, 0xCC692262, 0x6285CCCC, 0x7B769989, 0xBABBCBCC, 0x2232A7A9, 0x24222222, 0x0800050A, 
0xAC000060, 0x00A0C060, 0x0000A000, 0x00000000, 0x000000AA, 0x00020002, 0x00000002, 0x00000000, 
0xA9CCCCCB, 0x99999ABC, 0x896745C3, 0x99AACCBC, 0xC9BCB909, 0x66223596, 0x968866C9, 0x00213266, 
0x36221200, 0xCCBCCAAB, 0x00800718, 0x00000020, 0x00000000, 0x0C000A00, 0x002882CA, 0x02440000, 
0x00202200, 0x00000002, 0x00000000, 0xB9B999C9, 0x9C9C9BB9, 0x896745C3, 0xCB9BA99A, 0xCA6A22C2, 
0x22222262, 0xA99A7AC9, 0x22222263, 0x12112222, 0xBCAB3622, 0x02000701, 0x022CC64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0x999999C9, 0xCCACBAAB, 
0x896745C3, 0x99CABC9B, 0xC88795C5, 0x00000041, 0x9898BBCB, 0x11212265, 0x68445425, 0xCBAB7898, 
0x1200091F, 0x00000020, 0x20000000, 0xA0800A00, 0xAC00800A, 0x45000000, 0x00007700, 0x000000A0, 
0x00000000, 0xBBBCBBCB, 0xBBBBCCCC, 0x896745C3, 0x99CACCAC, 0xBCBB8A05, 0x2386CCCC, 0xCC362212, 
0x3098CBCC, 0x00120001, 0x00000000, 0x0000052D, 0x82000060, 0x00800000, 0x00000000, 0x00000000, 
0x00000600, 0x00AA0028, 0x00000000, 0x000A0000, 0xBCAB8AC8, 0x7897BACC, 0x7B0300C0, 0x73A9CCCC, 
0xCCAC4802, 0x000083C9, 0x85CACCCC, 0x00000030, 0x00000000, 0xAB9A4602, 0x1200050A, 0xAC000060, 
0x00A0C060, 0x0600B000, 0x00000020, 0x000000AA, 0x0002000C, 0x0000000C, 0x00000000, 0x9A99CAC9, 
0x9999C9CC, 0x896745C3, 0x99B9CCBC, 0xC99AA808, 0x47954562, 0xB8BB99CB, 0x01213274, 0x77341220, 
0xCCCCBB89, 0x00800618, 0x00000020, 0x00000000, 0x0C000A00, 0x002882CA, 0x02440000, 0x00202200, 
0x00000002, 0x00000000, 0x9C9999C9, 0xCCCC9CCC, 0x896745C3, 0xBACCCC99, 0xC8481121, 0x11111141, 
0x75BACBCC, 0x25001054, 0x00000010, 0xCCAB7A15, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0x999999C9, 0xCCABBABC, 0x896745C3, 
0x99CCCC9A, 0xC8381102, 0x00001140, 0xA8CBCCCC, 0x12426689, 0x44244222, 0xCC8A6756, 0x00800716, 
0x00000040, 0x00000000, 0xC0C60A00, 0x5C000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 
0xCCCCBCCB, 0xBBBBCBCC, 0x896745C3, 0x99CCCCBB, 0xCC9B7A04, 0x1055C9CC, 0xCCCCAB88, 0x5467A9CB, 
0x22222242, 0x24222222, 0x06000542, 0xCC000040, 0x20C60C4C, 0x00000008, 0x00002000, 0x00001040, 
0x0022006A, 0x00000022, 0x00C00007, 0xBCBBBBCB, 0xBBBBCCCC, 0x896745C3, 0x99B9CCCC, 0xCCBC5803, 
0x2073BBCC, 0x21113285, 0x00000111, 0xCC5A3324, 0xA9BACCCC, 0x0C000F13, 0x00000060, 0x00000000, 
0xAAA20C00, 0x2840828C, 0x66660000, 0x0016AA00, 0x000000CA, 0x00000000, 0x9B7866C6, 0x97CBCCCC, 
0xBC8B45C3, 0x9999CBCC, 0xCCBB8904, 0x2073CCCC, 0xCCCC6B43, 0x3175B9CC, 0x00000000, 0x00000000, 
0x00000735, 0x02000020, 0x00000020, 0x00420000, 0x00000000, 0x00000000, 0x00000000, 0x800C0000, 
0x00002000, 0x8C84A6C6, 0x5853C9CC, 0xCC9B26C2, 0x8A6AAACC, 0xC9692262, 0x22222262, 0x2252CBCC, 
0x22222222, 0x22424722, 0x7C232422, 0x0000052D, 0xA2000060, 0x00A80000, 0x00000000, 0x00000000, 
0x02002600, 0x00AA006A, 0x00000000, 0x000A0000, 0xAB9878C4, 0x84A8CCCC, 0xCC6912C0, 0x537787CC, 
0xCC8A4602, 0x0130C9CC, 0x95CCCCCC, 0x00000030, 0x56342312, 0x9B786666, 0x0C00050A, 0xAC000060, 
0x00A0C060, 0x0880B000, 0x00000000, 0x000000AA, 0x00020028, 0x00000002, 0x000C0000, 0xCCCCCCCB, 
0x9999CACC, 0x896745C3, 0x99CBCCAC, 0xC9592202, 0x22002262, 0x98BABACC, 0x00001053, 0x33220200, 
0xCCCC8A58, 0x12000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00000000, 0x999999C9, 0xCABBCCCC, 0x896745C3, 0x99C9CC9B, 0xC8480000, 0x00000040, 
0xA8CBCCCC, 0x10212264, 0x22231200, 0xCC7A3533, 0x00800716, 0x00000040, 0x00000000, 0xC0C60A00, 
0x5C000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 0xBCCCCCCB, 0xBBBBCCBB, 0x896745C3, 
0xBCAACCBB, 0xC9CC9CC5, 0x2263C9CC, 0xBCCCAC99, 0x3353B9BB, 0x33333333, 0x7A343333, 0x06000542, 
0xCC000040, 0x20C60C4C, 0x00000008, 0x00002000, 0x00001040, 0x0022006A, 0x00000022, 0x00C00007, 
0xBCBBBBCB, 0xBBBBCCCC, 0x896745C3, 0x99BBCCCC, 0xCCBC5803, 0x2073BBCC, 0x21112285, 0x00000111, 
0xCC492224, 0xA9BACCCC, 0x0C000F13, 0x00000060, 0x00000000, 0xAAA20C00, 0x2840828C, 0x66660000, 
0x0016AA00, 0x000000CA, 0x00000000, 0x9B7866C6, 0x97CBCCCC, 0xBC8B45C3, 0x9999CBCC, 0xCCBB8A04, 
0x200085A9, 0xCC5B2242, 0x2174B9CC, 0x00000001, 0x00000000, 0x00000735, 0x02000020, 0x00000020, 
0x00420000, 0x00000000, 0x00000000, 0x00000000, 0x800C0000, 0x00002000, 0xCBCCCCCB, 0xA8CBCCCC, 
0xCC8A97C7, 0xBACBCCCC, 0xCCAB9A69, 0x9966CCCC, 0xAACCCCCC, 0x66666697, 0x89776766, 0xCCCCCCBB, 
0x0000052D, 0xA2000060, 0x00A80000, 0x00000000, 0x00000000, 0x02002600, 0x00AA006A, 0x00000000, 
0x000A0000, 0xAB9878C4, 0x84CBCCCC, 0xCA7BA9C7, 0x41B8BBCC, 0xCC8A46C2, 0x2262CCCC, 0xA6CCCCCC, 
0x11111131, 0x76342312, 0x9B786666, 0x0C00050A, 0xAC000060, 0x00A0C060, 0x0880C000, 0x00000000, 
0x000000AA, 0x00020028, 0x00000002, 0x000C0000, 0xCACCCCCB, 0x20222262, 0x7B5522C2, 0x22A6CCBC, 
0xCCBCBB0B, 0x223089A8, 0x332343C7, 0x00001042, 0x68461300, 0xCCCCBCBB, 0x12000518, 0x00000020, 
0x00000000, 0x0C602A00, 0x002882CA, 0x02440000, 0x00202200, 0x00000002, 0x00000000, 0x9C9999C9, 
0xCCBCCCBC, 0x896745C3, 0xCBCCAC99, 0xCA9B9635, 0x22222262, 0xA8AACCCC, 0x22222253, 0x34002222, 
0xBCAB7855, 0x12000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00000000, 0x999999C9, 0xCCBC9A99, 0x896745C3, 0x99CACC9B, 0xC8480000, 0x00000040, 
0x5596BACB, 0x21212243, 0x77865623, 0xCBCCAB9A, 0x0500052D, 0x82000060, 0x00800000, 0x00000000, 
0x00000000, 0x00000600, 0x00AB0028, 0x00000000, 0x000D0000, 0xBCAB7AC7, 0x7897BACC, 0x7B0300C0, 
0x73A9CCCC, 0xCCAC4802, 0x000083C9, 0x85CACCCC, 0x00000030, 0x00000000, 0xAB9A4602, 0x1200050A, 
0xAC000060, 0x00A0C060, 0x0600B000, 0x00000020, 0x000000AA, 0x0002000C, 0x0000000C, 0x00000000, 
0x9A99CACC, 0x9999C9CC, 0x896745C3, 0x99B9CCBC, 0xCCBCAA08, 0x47954596, 0xB8BB99CB, 0x01213274, 
0x77341220, 0xCCCCBB89, 0x00800618, 0x00000020, 0x00000000, 0x0C000A00, 0x002982CA, 0x02440000, 
0x00202200, 0x00000002, 0x00000000, 0x9C9999C9, 0xCCCC9CCC, 0x896745C3, 0xBACCCC99, 0xC8481121, 
0x11111141, 0x75BACBCC, 0x25001054, 0x00000010, 0xCCAB7A15, 0x02000701, 0x022CC64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0x999999C9, 0xCCABBABC, 
0x896745C3, 0x99CCCC9A, 0xC8381102, 0x00001140, 0xBACCCCCC, 0x22437699, 0x45244223, 0xCCCC9B78, 
0x00732A06, 0x06080809, 0x00000606, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xC0C2C2C0, 0x0000C2C2, 0x00000000, 0x00000000, 0x78787878, 0x00007878, 0x00000000, 
0x00000000, 0x58585858, 0x00005858, 0x00000000, 0x00000000, 0x0080061F, 0x00000020, 0x20000000, 
0xA0000800, 0xAC00800A, 0x44000000, 0x00004400, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xCCCCBCBB, 
0x896745C3, 0xCCCCBB99, 0xC9CCCC0C, 0x02202664, 0xCCBC9987, 0xA8B9BBCC, 0x00002174, 0x02000000, 
0x12000511, 0x45000060, 0xC1040410, 0x0000000C, 0x00000000, 0x00000092, 0x00000000, 0x00000002, 
0x00000000, 0xBBBBBBCB, 0xBBBBCCCC, 0xAAB96AC3, 0x99A9CCCC, 0xC899BA0C, 0x30C95842, 0x00002044, 
0x9B352222, 0xBACCCCCC, 0x44337699, 0x0000072D, 0x82000060, 0x40840000, 0x00002A80, 0x00000006, 
0x02000600, 0x80A98628, 0x00000000, 0x00000000, 0xCC9C25B2, 0x2222A6CB, 0xA6CBCC08, 0x00000020, 
0xC9994603, 0x00969C85, 0x002242C9, 0x00000000, 0x00000000, 0xCCCCBC28, 0x00000732, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60000000, 0x0000C000, 0x00000008, 0xCCBC69B4, 
0x22226487, 0xCCCC9C05, 0x003296CA, 0x22222209, 0x31CA8C24, 0x000032B6, 0x00000000, 0xAB793512, 
0xCBCCCCCC, 0x00000739, 0x00000040, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x0000000B, 0xCCCC8BB5, 0x222232B7, 0xCCCC8BC3, 0x222262CA, 0xCC472102, 0x0096BCCB, 
0x000052CA, 0x00000000, 0x89873612, 0xCCCCBC89, 0x00000730, 0x80000060, 0x00800000, 0x00000000, 
0x00000000, 0x00400040, 0x08008228, 0x00000098, 0x00000000, 0x95CBCCCC, 0x00000010, 0xCC8A04C0, 
0x0041C8CC, 0xCC485203, 0x0040C8CC, 0x000211C0, 0x15000000, 0xCACCCC9C, 0x00002186, 0x1200091D, 
0x00000060, 0x00000000, 0x02120200, 0x008CACA2, 0xAC000000, 0x00A8A800, 0x00000000, 0x00000000, 
0xBCBBBBC9, 0x99CBCCCC, 0x99BBBBC7, 0x9999CBCC, 0xCC998807, 0x7773CCCC, 0xCBCCCCCC, 0xCCCCABB9, 
0x001063C9, 0xAA792501, 0x00000812, 0x66000040, 0x00668020, 0x0000C0A0, 0x00000000, 0x00004406, 
0x00000000, 0x00040000, 0x00000000, 0xCCAC9BCA, 0x9999CBCC, 0x896745C3, 0xCCCCCC99, 0xC8380000, 
0x88000040, 0x95CCCCCC, 0x00020020, 0x00000000, 0x7A240100, 0x02000701, 0x022CC64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xBC9A99C9, 0x99CBCCCC, 
0x896745C3, 0x9999CCCC, 0xC78B8605, 0x00011032, 0x99A98AB8, 0xCCCCBBAA, 0x6497CBCC, 0x36344344, 
0x00800916, 0x00000040, 0x00000000, 0xC0C60A00, 0x0A000006, 0xA6000000, 0x00000000, 0x00000000, 
0x00000000, 0xBBBBBBCB, 0xBBBBCCBC, 0x896745C3, 0x99ACCBBC, 0xCBCCCC0A, 0x022186BC, 0xCCCCACA7, 
0x3287AACB, 0x00002122, 0x46010000, 0x12000529, 0xA3000060, 0x22C40806, 0x00000000, 0x00000000, 
0x00008888, 0x008000AC, 0x00000016, 0x00000000, 0xBBBBBBCB, 0xBBBBCCCC, 0xAB6745C3, 0x9999CCCC, 
0xCABACC0B, 0x34C9CCBA, 0x212222B4, 0x35231220, 0xBBBC8967, 0xBBCCCCCC, 0x00000732, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000C000, 0x00000008, 0xCACCABB6, 
0x22222262, 0xCC7A23C2, 0x002296CC, 0xA6262202, 0x41C97B25, 0x112122B3, 0x11111111, 0xBC895812, 
0xCACCCCCC, 0x00000739, 0x00000040, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x0000000B, 0xCCBC68B2, 0x222262CA, 0xCC9C25C2, 0x2232B7CC, 0xAC262102, 0x3396BCBA, 
0x000022C3, 0x00000000, 0x78582312, 0xCCCCCC9C, 0x00000730, 0x80000060, 0x00800000, 0x00000000, 
0x00000000, 0x00400040, 0x08008228, 0x00000099, 0x00000000, 0x62CACCCC, 0x22222222, 0xBC3700C0, 
0x4088CCCC, 0xCC680300, 0x0073ABCC, 0x212411C1, 0x47121111, 0xA9CCCCAC, 0x11111141, 0x0E00091D, 
0x00000060, 0x00000000, 0x02120300, 0x008CACA3, 0xAC000000, 0x00A4A800, 0x00000000, 0x00000000, 
0xBBCC9AC9, 0x99CBCCCC, 0x99CC8BC4, 0x9999CBCC, 0xC99AA807, 0x7473CBBB, 0xCBCCCCCC, 0xCCACAAB9, 
0x001063C9, 0xAA792501, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004406, 
0x00000000, 0x00000000, 0x00000000, 0xCCBC9CCC, 0x9A9ACACC, 0x896745C3, 0xCCCCCC9B, 0xC8380000, 
0x00000040, 0x95CCCCCC, 0x00020020, 0x00000000, 0xAB160000, 0x01000701, 0x022CC64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xBC9999C9, 0xB9CCCCCC, 
0x896745C3, 0x9999CCCC, 0xC88B44C2, 0x22222242, 0x996936B2, 0xCCBBBB9B, 0x8898CACC, 0x22224276, 
0x00800916, 0x00000040, 0x00000000, 0xC0C60A00, 0x0A000006, 0xA6000000, 0x00000000, 0x00000000, 
0x00000000, 0xBBBBBBCB, 0xBBBBCBCC, 0x896745C3, 0x99B9CC9C, 0xCC895408, 0x0041C7CC, 0xCCCCAC99, 
0x0140A6CB, 0x00000000, 0x02000000, 0x12000508, 0x2C000060, 0x000040C8, 0x00000000, 0x00000000, 
0x00000200, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xBBBBCCCC, 0x8A6745C3, 0x99A9CCCC, 
0x47120002, 0x3673CCAB, 0x001022A5, 0x00010000, 0x46120000, 0xCBCCCC7A, 0x00000530, 0x80000060, 
0x00800000, 0x00000000, 0x00000000, 0x00400040, 0x08008228, 0x0000009A, 0x00000000, 0xCBCBBCB8, 
0x212296BB, 0xCA4811C1, 0x2186ACCC, 0xCC7B79C3, 0x2273ACCC, 0x11111141, 0x23111111, 0xCCCCCC7C, 
0x112142C9, 0x0C000926, 0x00000080, 0x00000000, 0x40200600, 0x04AC6886, 0xCC000000, 0x00C88806, 
0x00000000, 0x00000000, 0x9B9999C9, 0xC9BCCCCC, 0x899947C3, 0x9999CCBC, 0xCA8BA807, 0x35124298, 
0xB8BBCBCC, 0xBABB8A77, 0x01103286, 0xCCCCAB36, 0x0000091D, 0x00000060, 0x00000000, 0x02000200, 
0x008CACA2, 0xAC000000, 0x00A8A800, 0x00000000, 0x00000000, 0xCC9ABBC9, 0xC9CCCCCC, 0xBBBCCCC8, 
0x9999CACC, 0xCACCCC0C, 0x35305496, 0x98A9CBCC, 0xBABB8A77, 0x14103286, 0xCCCCCC8A, 0x00000F17, 
0x00000040, 0x00000000, 0x0CC00400, 0x00000040, 0x00440004, 0x00000000, 0x00000000, 0x00000000, 
0x999999C9, 0xBCCCCCCC, 0x896745C3, 0x99B9CAAC, 0xA6CCCCCC, 0x22222222, 0x53B9CBCC, 0x12111122, 
0x11111112, 0x67351111, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004404, 
0x00000000, 0x00000000, 0x00000000, 0xCACB99CC, 0xCA99C9CB, 0x8A6745C3, 0x99BBBB9B, 0xC73711C1, 
0x11111132, 0xB9CCCCCB, 0x22222263, 0x22222222, 0xCCAC3622, 0x01000701, 0x022CC64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0x9B9999C9, 0xC9CCCCCC, 
0x8A6745C3, 0x9999CCBC, 0xC8592262, 0x22222262, 0x232222B2, 0xCCBBBA59, 0x7697CBCC, 0x22222253, 
0x0C000511, 0x00000060, 0xC6040400, 0x0000000C, 0x00000000, 0x00000092, 0x00000000, 0x00000002, 
0x00000000, 0xCCBCBBCB, 0xCBBCBBBB, 0xAB67C9C8, 0x9999C9CC, 0xC8ACCCCC, 0x22222242, 0x00000020, 
0xAB372222, 0xC7CCCCCC, 0x21222232, 0x0C000714, 0x00000060, 0x00000000, 0x44C20400, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xA6CACCBC, 0x12520210, 0xCCCBA8C6, 0x3795CCCC, 
0xCC8C25C2, 0x11111194, 0x2294CAAC, 0x00000021, 0x00000000, 0x14000000, 0x0C000707, 0x4C000060, 
0x00004024, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x120000B0, 
0xCC6A2222, 0xBB9A7BC3, 0x3795CCCC, 0x991511C1, 0x1173CCCC, 0x000032C7, 0x00000000, 0x7A260000, 
0xCCCCCCCC, 0x1200091D, 0x00000060, 0x00000000, 0x02120200, 0x008CACA2, 0xAC000000, 0x00A8A800, 
0x00000000, 0x00000000, 0xB99AA9C9, 0xACCC9C9C, 0x8A98CAC8, 0x9999CCCC, 0xCC6AA809, 0x2230CACC, 
0xCBCCCCCC, 0xCCACAAB9, 0x001063C9, 0xAA792502, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 
0x00000000, 0x00004406, 0x00000000, 0x00000000, 0x00000000, 0xCC999CC9, 0x99C9A9CC, 0x896755C5, 
0xBCCCBC99, 0xC85844C4, 0x44444454, 0xA9BCCBCC, 0x55555586, 0x86565566, 0x78675555, 0x02000701, 
0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 
0x999999C9, 0xACC9CC9A, 0x9B6745C3, 0x9999CCCC, 0xC86922C2, 0x22222242, 0x99A98AB8, 0xCCBBBBAA, 
0x84CCCCCC, 0x86352322, 0x00000816, 0x00000040, 0x00000000, 0xC0C60A00, 0x0A000006, 0xA6000000, 
0x00000000, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xCBBBBBBC, 0x896745C3, 0xA9B9AB99, 0xCBAC36C3, 
0x22223284, 0xCBCCACC8, 0x222253A9, 0x11111121, 0x22111111, 0x12000F06, 0xC4000060, 0x00C04004, 
0x00002000, 0x00000000, 0x00000020, 0x00000044, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xBBBBCBCC, 
0x8A6745C3, 0x9999CACC, 0xCC9B2502, 0x0185CCCC, 0x11121132, 0x22111112, 0xBC372222, 0x52C9CCCC, 
0x10000926, 0x00000080, 0x00000000, 0x00000000, 0x004C0220, 0xC4000000, 0x00444400, 0x00000000, 
0x00000000, 0x9999A9CB, 0x9999CCCC, 0x898759C3, 0x9999CCBC, 0xCBCA88C4, 0x95758B86, 0x63CBCCCC, 
0x22424322, 0x11212222, 0xCC5A2222, 0x00000F17, 0x00000040, 0x00000000, 0x0CC00400, 0x00000040, 
0x00440000, 0x00000000, 0x00000000, 0x00000000, 0x999999C9, 0xCCCCA99C, 0x896745C3, 0x99A9CCBC, 
0xA9CCBCCB, 0x24243453, 0x98CACCCC, 0x21112285, 0x11111111, 0x89581311, 0x00800812, 0x82000040, 
0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00000000, 0xCCCCCCCC, 
0xCACBBCCB, 0x896745C3, 0x99CACC9A, 0xC6060000, 0x00000031, 0xA6CCCCCC, 0x01001044, 0x24000031, 
0xBC8A5734, 0x01000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00000000, 0x999999C9, 0x9999CCCC, 0x896745C3, 0x9999CB9C, 0xC8480000, 0x00202440, 
0x000000C0, 0xCCCCCC38, 0x79B7ABB9, 0x02004175, 0x10000816, 0x00000040, 0x00000000, 0xC0C60A00, 
0x0A000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 0xCBBBCBCB, 0xBBBBCBBB, 0xB96745C3, 
0xB9A9A9CC, 0xCCAC960C, 0x002252B7, 0xCCCCCCAC, 0x643474B8, 0x11111121, 0x24111111, 0x12000F06, 
0xCA000060, 0x22C2A62A, 0x00008002, 0x00000000, 0x00006686, 0x004600AA, 0x00000044, 0x00000000, 
0x6A2222C2, 0x8B97CBCC, 0xAC2625C1, 0x52A7CACC, 0xCA692202, 0x0273CCBB, 0x212222B5, 0x11221121, 
0x9B472222, 0xCCCCCCCC, 0x10000926, 0x00000080, 0x00000000, 0x00000000, 0x004C0220, 0xC4000000, 
0x00444400, 0x00000000, 0x00000000, 0xBC9999C9, 0x99CCCCCC, 0x897745C3, 0x9999CCBC, 0xCCCCCC0B, 
0xB90488A9, 0xBACBCCCC, 0x222252AA, 0x11222222, 0xAC992522, 0x00000F17, 0x00000040, 0x00000000, 
0x0CC00400, 0x00000040, 0x00440000, 0x00000000, 0x00000000, 0x00000000, 0xCCCC99C9, 0xC9BC9BCA, 
0x896745C3, 0x9999CCBC, 0xC6CCBC0A, 0x04043532, 0xA8CCCCCC, 0x00002275, 0x00000000, 0x9A580300, 
0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 
0x00000000, 0x999999C9, 0xA9B9CCCC, 0x896745C3, 0xCBCCCB9C, 0xC6060000, 0x00000031, 0xBCCCCCCC, 
0x00001094, 0x24000020, 0xCC899A45, 0x01000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xCC9C99C9, 0xC9BCCCC9, 0x896745C3, 0x99C9CCBC, 
0xC8592272, 0x22222252, 0x525864C4, 0xCCBC8B24, 0x45B7CCCC, 0x35222274, 0x0074090A, 0x07060908, 
0x04080707, 0x00000604, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC3C0C7C1, 
0x4EC5C3C5, 0x0000C04E, 0x00000000, 0xBDBDBDBD, 0x78BDBDBD, 0x0000BD78, 0x00000000, 0xCECECECE, 
0x57CECECE, 0x0000CE57, 0x00000000, 0x00800F1F, 0x00000020, 0x20000000, 0xA0000800, 0xAC00800A, 
0x44000000, 0x00004400, 0x00000000, 0x00000000, 0xBBBBBCCB, 0xBBCCCCCB, 0x896745C3, 0x99CBCCBB, 
0xCCCC69C2, 0x2222959C, 0xBBBB79C6, 0x554386BA, 0x22222232, 0x23222222, 0x12000140, 0xC8000080, 
0x40C40C0A, 0x00006028, 0x00000000, 0x00000000, 0x000000CC, 0x00000080, 0x00000000, 0xBCBBBBCB, 
0xBBBBCBCC, 0x8B6745C3, 0x9999A9CC, 0xCACCCC0C, 0x34306788, 0x00000010, 0x22000000, 0xCCBC7A35, 
0x3375B8CC, 0x10000918, 0x00000020, 0x00000000, 0x0A400A00, 0x002882CA, 0x02440000, 0x00202200, 
0x00000002, 0x00000000, 0xCCCCACB9, 0x99999999, 0xCCCC8BC4, 0x999999CC, 0xC99A5665, 0x62527875, 
0xAB684683, 0xB9CCCCAC, 0x22324465, 0x22422245, 0x08000704, 0x00A44862, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCCCCCC, 0x99999999, 0xCCCC9CC5, 
0x999999CC, 0xC8380000, 0x00000040, 0x64A9BAC9, 0x32455556, 0x7C232222, 0x78A7CBCC, 0x0000052D, 
0x82000060, 0x40840000, 0x00002A80, 0x00000006, 0x02000600, 0x80AA8628, 0x00000000, 0x000A0000, 
0xCCCABCC9, 0x982575CB, 0xCACCBBC7, 0x1131B7CA, 0xCBCCACCC, 0x000020A5, 0x1173A9CB, 0x12113112, 
0x8A242222, 0xCBAACC88, 0x08000F46, 0x86000040, 0x0080C80C, 0xCC808600, 0x08000064, 0x00000000, 
0x00000000, 0x200A0000, 0x00002000, 0xCBCCCCCC, 0xA9A9999A, 0xBB6A75C3, 0xABCCCCCC, 0xC99BB709, 
0x2120A797, 0x7479C9CC, 0x23002043, 0x22747666, 0xBCAA6A54, 0x00800F46, 0x86000040, 0x0080C60C, 
0xCC808600, 0x06000064, 0x00000000, 0x00000000, 0x200A0000, 0x00002000, 0x999999C9, 0xCCC9CCBC, 
0x896745C3, 0xCBCCBC99, 0xC8591101, 0x00000040, 0x79A8CCCC, 0x11112184, 0x68242212, 0xBBBAABBA, 
0x01000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00000000, 0xCA9C99C9, 0xCCAC99CC, 0x896775C3, 0x99CACCCC, 0xC8692202, 0x00001240, 0x98B9CBCC, 
0x55778798, 0x43336365, 0xCC785533, 0x00800F1F, 0x00000020, 0x20000000, 0xA0000800, 0xAC00800A, 
0x44000000, 0x00004400, 0x00000000, 0x00000000, 0xCBCCBBCB, 0xCCBBBBCC, 0x8A6745C3, 0xA9B9BCBB, 
0xC7CCACC7, 0x1141B87B, 0xBC8C978B, 0x221241B9, 0x11111111, 0x23111111, 0x12000F40, 0xCC000080, 
0x40C40C0C, 0x00000028, 0x00000000, 0x00000000, 0x000000CC, 0x00000080, 0x00000000, 0xBBBBBBCB, 
0xBBBBCBCC, 0x9B6745C3, 0x9999A9CC, 0xCBCCCC0C, 0x31006488, 0x00000040, 0x22000000, 0xCCBC7A35, 
0x327598CC, 0x12000913, 0x00000060, 0x00000000, 0x44900C00, 0x0200002C, 0x00000000, 0x00004400, 
0x00000000, 0x00000000, 0xCCCCCCC8, 0x00216487, 0xBBCC6A62, 0x2232B7CC, 0xCC9C2662, 0x5285BBBB, 
0xCC8A68A7, 0x73CBCCCC, 0x44222222, 0x65776744, 0x0000052D, 0xA2000060, 0x00A00000, 0x00000000, 
0x00000000, 0x02000600, 0x00AA006A, 0x00000000, 0x000A0000, 0x64B7CBCC, 0x00000020, 0xCBCC8BC4, 
0x22222284, 0xCCB93765, 0x222295BB, 0x54A7CCCC, 0x22242222, 0x22222222, 0x7C232222, 0x00000735, 
0x02000020, 0x00000020, 0x00420000, 0x00000000, 0x00000000, 0x00000000, 0x800C0000, 0x00002000, 
0x98BC8CC9, 0x22222242, 0xBB5864C3, 0x56247396, 0xC9BBBB6B, 0x86669878, 0x4476CACC, 0x22222222, 
0x22222222, 0x8C242222, 0x0C00050A, 0xAC000060, 0x00A0C060, 0x0000A000, 0x00000000, 0x000000AA, 
0x00020002, 0x00000002, 0x00C00000, 0x99CACCCC, 0x99999999, 0x896745C3, 0x99CBBCBC, 0xC8BCAB07, 
0x12105343, 0x314366C8, 0x11123211, 0x34222212, 0xBCAB8878, 0x00000735, 0x02000020, 0x00000020, 
0x00420000, 0x00000000, 0x00000000, 0x00000000, 0x800C0000, 0x00002000, 0xCCCCCCBC, 0xA76A89CC, 
0xC84851B1, 0xCCCCCBB8, 0xC8A9890B, 0x00000040, 0x2364BACC, 0x35222332, 0x10236387, 0xAC150000, 
0x00800518, 0x00000020, 0x00000000, 0x0A002A00, 0x002882CA, 0x02440000, 0x00202200, 0x00000002, 
0x00000000, 0x999999C9, 0xCC9C9B99, 0x896745C3, 0xCBBC9A9B, 0xC8582262, 0x22222252, 0x7678B8CB, 
0x22223266, 0x48222222, 0xBBAAAB8A, 0x01000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00000000, 0x999A99C9, 0x9C999999, 0x896745C3, 0x9999BBAC, 
0xC89A89C6, 0x22222242, 0x86A8CBCC, 0x87AA8865, 0x22422254, 0xCC8A5622, 0x00800F16, 0x00000040, 
0x00000000, 0xC0C60A00, 0x5C000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 0xBBBCBCCB, 
0xCCCCCCBB, 0x896745C3, 0x99AACCBB, 0xCBCC59C2, 0x22222274, 0xCCCC9AB5, 0x220172B9, 0x02000022, 
0x12010000, 0x06000F36, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xC0020000, 0x00002000, 0xCCCC6AB3, 0x001042B9, 0xCCCC7B13, 0x00002195, 0xC8480000, 0x00000041, 
0x2173CBCC, 0x7A231033, 0x1032A6CC, 0xCC8A3612, 0x12000140, 0xC8000080, 0x40C40C0A, 0x00006028, 
0x00000000, 0x00000000, 0x000000CC, 0x00000080, 0x00000000, 0xBBBBBBCB, 0xBBBBCBCC, 0x8B6745C3, 
0x9999C9CC, 0xCBCCCC0C, 0x34106488, 0x00000010, 0x22000000, 0xCCBC7A35, 0x3275B8CC, 0x12000943, 
0x00000040, 0x00000000, 0x0CC40C00, 0x000200C6, 0x22000000, 0x00006200, 0x00000000, 0x00000000, 
0xCCCC9AC9, 0x999999AC, 0x9B6745C3, 0x9999C9CC, 0xC89A8805, 0x23004353, 0xCBCCCCCC, 0x23225487, 
0x00000020, 0x79462201, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 
0x00000000, 0x00000000, 0x00000000, 0x999ACAC9, 0x9A9AC9AC, 0x896745C3, 0xB9CBCA99, 0xC7370000, 
0x00000031, 0xAAABCACC, 0x00003297, 0x56350200, 0x6A232242, 0x01000701, 0x022CC64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xCCCC9AC9, 0x999999BB, 
0x8A6745C3, 0x9999CACC, 0xC9482202, 0x00001251, 0x75A8BBC9, 0x22333464, 0xAC352222, 0x98AACBCC, 
0x00800716, 0x00000040, 0x00000400, 0xC0C60A00, 0x5C000006, 0x02000000, 0x00000000, 0x00000000, 
0x00000000, 0xBBBBBBCB, 0xBBBBBBBB, 0x896745C3, 0x99BACC9B, 0xCCCCCCCC, 0xCCCCCCCC, 0xBCBBBCBC, 
0xCBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x1200010B, 0xC2000060, 0x20C60C2A, 0x00000008, 0x00000000, 
0x00000044, 0x00460068, 0x00000064, 0x00000000, 0xBBBBBBCB, 0xBBBBCBCC, 0x8C6745C3, 0x9999B9CC, 
0xCC9C1500, 0x004078C8, 0x00112165, 0x00000000, 0xCC8C5624, 0x6798CBCC, 0x1200091C, 0x00000060, 
0x00000000, 0x00000000, 0x00C04800, 0x00000000, 0x00002400, 0x00000000, 0x00000000, 0xCCCC8CC4, 
0x00214386, 0xCCBC67C2, 0x0051C9CC, 0xCC680200, 0x5284CCCC, 0x23010071, 0xB8CCCC7C, 0x00000051, 
0x01000000, 0x00000535, 0x02000020, 0x00000020, 0x00620200, 0x00000000, 0x00000000, 0x00000000, 
0x800C0000, 0x00002000, 0xB8CC8CC6, 0x00000040, 0xCCAC26C2, 0x222252C9, 0xC9692262, 0x22222252, 
0x4276C9CC, 0x22223235, 0x22222222, 0x7B232222, 0x12000508, 0x2C000060, 0x000060C8, 0x00000000, 
0x00000000, 0x00000200, 0x00000000, 0x00000000, 0x00000000, 0x99BACCCC, 0x9999B9CC, 0x8A6745C3, 
0x99B9CCCC, 0xC87B0300, 0x5584BC99, 0x306497CA, 0x00000000, 0x03000000, 0xBC692253, 0x00000735, 
0x02000020, 0x00000020, 0x00620200, 0x00000000, 0x00000000, 0x00000000, 0x800C0000, 0x00002000, 
0x9ACCCCC9, 0x973585CC, 0xB85722C2, 0xCBBCB8BC, 0xC848B7C7, 0x11111141, 0x222295CC, 0x11222211, 
0x11111111, 0x9B242211, 0x01000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00000000, 0xBBBC99C9, 0x9C99A999, 0x896745C3, 0x9ABBCABB, 0xC89A85C6, 
0x22222242, 0x5596CCCC, 0x22326775, 0x22222222, 0xBB8A4546, 0x00800716, 0x00000040, 0x00000400, 
0xC0C60A00, 0x5C000006, 0x02000000, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xCBCCCCBC, 
0x896745C3, 0x99999C99, 0xC6CCCC0C, 0x00003531, 0xBCCCCC8B, 0x210120B6, 0x00000000, 0x13000000, 
0x1200010B, 0xC0000060, 0x00C00C08, 0x00000008, 0x00000000, 0x00000000, 0x0000008A, 0x00000000, 
0x00000000, 0xBBBBBBCB, 0xBBBBCBCC, 0x8B6745C3, 0x9999B9CC, 0xC8CC9C06, 0x00000051, 0x00000040, 
0x00001000, 0xCC9C6824, 0x4275CACC, 0x12000915, 0x00000060, 0x00000000, 0x44CC0200, 0x00002008, 
0x00000000, 0x00004000, 0x00000000, 0x00000000, 0xCCCC8CC4, 0x00214386, 0xBACC9C25, 0x999999CC, 
0xC8CBCC0C, 0x24351241, 0xCCCCBC9A, 0x0073A8CC, 0x00000000, 0x03000000, 0x08000523, 0x60000080, 
0x4686000A, 0x000080A0, 0x00000000, 0x0000AC00, 0x00B80068, 0x00000000, 0x000B0000, 0xACCCCCCC, 
0x999999BC, 0xCCCBABC6, 0x9999CACC, 0xC8CBCA0C, 0x00102562, 0x2284CBCC, 0x54232221, 0x99899958, 
0xCCBB99A9, 0x08000535, 0x02000020, 0x00000020, 0x00620200, 0x00000000, 0x00000000, 0x00000000, 
0x800C0000, 0x00002000, 0xACCCCCCC, 0x525899BC, 0x897B24C2, 0xCBCBBCA9, 0xC89C6904, 0x10002141, 
0x43A6CBCC, 0x11112133, 0x22222212, 0x9C141111, 0x00800646, 0x86000040, 0x0080C60C, 0xCC808600, 
0x06000064, 0x00000000, 0x00000000, 0x200A0000, 0x00002000, 0x999B99C9, 0x999B999B, 0x896745C3, 
0xCBAC9999, 0xC8380000, 0x00000040, 0x214267C8, 0x11112111, 0x24121111, 0xBBAA9A88, 0x01000701, 
0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 
0xBAAC9AC9, 0xAC999999, 0x896745C3, 0x99B9CBBC, 0xC89A89C6, 0x22222242, 0x2273B9CC, 0x9A686536, 
0x2284B9BA, 0xBC462222, 0x00800716, 0x00000040, 0x00000400, 0xC0C60A00, 0x5C000006, 0x02000000, 
0x00000000, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xCCCCBCCB, 0x896745C3, 0x99BACCAB, 0xBACC8C34, 
0x22222263, 0xBBBCCCAA, 0x203133A6, 0x00000000, 0x12000000, 0x1000010B, 0xC2000060, 0x20C60C2A, 
0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00000000, 0xBBBBBBCB, 0xBBBBCBCC, 
0xAB6745C3, 0x9999A9CC, 0xCBBC3701, 0x00103273, 0x00000040, 0x10001000, 0xCC9C5624, 0x4275CACC, 
0x1200091B, 0x00000060, 0x00000000, 0x00000000, 0xA08ABC08, 0x08000000, 0x00804000, 0x00000000, 
0x00000000, 0xCCCC8CC6, 0x00214386, 0xB9CCAC26, 0x99999999, 0xCACCCC0B, 0x00204775, 0xAC360200, 
0x64C9CCCC, 0x22222211, 0x20222232, 0x08000506, 0xCA000060, 0x44C4A62A, 0x00008002, 0x00000000, 
0x00006A86, 0x007800AA, 0x00000044, 0x00880000, 0xCCCCCCCC, 0x999999BB, 0xCCBA7BC3, 0x9999BACC, 
0xC8CBCC0C, 0x00000040, 0x214376C9, 0x22221111, 0xAB893522, 0xCCCCCCBC, 0x00000735, 0x02000020, 
0x00000020, 0x00920200, 0x00000000, 0x00000000, 0x00000000, 0x800C0000, 0x00002000, 0xCCCCBCC8, 
0xC8CCCCBC, 0x562332C2, 0xCBCCBB8B, 0xC8BBBB0A, 0x11002141, 0x41A6CBCC, 0x10002022, 0x12000000, 
0x9C140010, 0x00800646, 0x86000040, 0x0080C60C, 0xCC808600, 0x06000064, 0x00000000, 0x00000000, 
0x200A0000, 0x00002000, 0x999999C9, 0xCC9B9B99, 0x896745C3, 0xCB9C9A99, 0xC8380000, 0x00000040, 
0x314396CA, 0x00002000, 0x7A560200, 0xBBBC9999, 0x01000701, 0x022CC64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0x999999C9, 0xCC9A9999, 0x896745C3, 
0x99BBCBAC, 0xC89A89C6, 0x22222242, 0x2275CBCC, 0x87977825, 0x22011152, 0xCC585522, 0x00000F1F, 
0x00000020, 0x20000000, 0xA0000800, 0xAC00800A, 0x44000000, 0x00004400, 0x00000000, 0x00000000, 
0xCCBCBCCB, 0xBCCCBCBB, 0x896745C3, 0x99BBBCBB, 0xC7BC5902, 0x00002231, 0xBCCCCC8B, 0x212187BB, 
0x11111111, 0x13111111, 0x1200010B, 0xC2000060, 0x20C60C2A, 0x00000008, 0x00000000, 0x00000044, 
0x00460068, 0x00000064, 0x00000000, 0xBBBBBBCB, 0xBBBBCBCC, 0x9B6768C3, 0x9999A9CC, 0xCCAC3702, 
0x00003384, 0x00000040, 0x00001000, 0xCC9C5624, 0x4275CACC, 0x12000949, 0x00000060, 0x00000000, 
0x00000C00, 0x0000C00C, 0x07000000, 0x0020AB00, 0x00000000, 0x00000000, 0xCCCC8CC6, 0x00216487, 
0xCCCA69C3, 0x9999C9CC, 0xCCABBB69, 0x9A85CCCC, 0xBC8968A7, 0x73CBCCCC, 0x44222222, 0x65776744, 
0x00000635, 0x02000020, 0x00000020, 0x00420000, 0x00000000, 0x00000000, 0x00000000, 0x800C0000, 
0x00002000, 0xCACCACC9, 0x00001095, 0xBB8B26C2, 0x223267BA, 0xC8692262, 0x22222252, 0x64A6CBCC, 
0x22223245, 0x22222222, 0x9C242222, 0x0000052D, 0xA2000060, 0x00A60000, 0x00000000, 0x00000000, 
0x02000600, 0x00AA006A, 0x00000000, 0x000A0000, 0xA9CCCCCC, 0x00000051, 0xCCCCCCC8, 0x2252C8CB, 
0xCBCCCC6C, 0x252243A7, 0x52A8CBCC, 0x23222222, 0x67443553, 0xBC8B9768, 0x04000507, 0xAC000060, 
0x0040A08A, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00090000, 0x00C00000, 0x9B99C9CC, 
0x9999C9CC, 0x896745C3, 0x99CABCBC, 0xC8AC7704, 0x12209645, 0x3285A8CB, 0x00002101, 0x25222212, 
0xBCAB9B68, 0x00800646, 0x86000040, 0x0080C60C, 0xCC808600, 0x06000064, 0x00000000, 0x00000000, 
0x200A0000, 0x00002000, 0x9C9999C9, 0x9C99CCCC, 0x8B6745C3, 0xCBABBBBC, 0xC8582262, 0x26222252, 
0xA96986CB, 0x24225355, 0x8A356466, 0xBBBBABAA, 0x01000701, 0x022CC64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xCCBC99C9, 0x9A9999AA, 0x896745C3, 
0x9999CABC, 0xC89A89C6, 0x22222242, 0x76A8CBCC, 0x87AA8855, 0x22324454, 0xCC8A5622, 0x0C00053A, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 
0x8A565555, 0x3285CBBC, 0xCCAC7BC3, 0x1141C8CB, 0xC84822C2, 0x22222242, 0x2185CBCC, 0x69241033, 
0x1221A5CC, 0xCC8A3622, 0x1200050B, 0xC0000060, 0x00C00C04, 0x00000002, 0x00000000, 0x00000000, 
0x00000002, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xBBBBCBCC, 0x896755C3, 0x99C9CABC, 0xCCAC7BC3, 
0x22222296, 0x00000010, 0x00000000, 0xCC371200, 0x0030B7CC, 0x12000918, 0x00000020, 0x00000000, 
0x04000400, 0x000220C4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x9C9C99C9, 0x99999ACC, 
0x896745C3, 0x99A9CB9C, 0xC83822C2, 0x22222242, 0x73CBCCCA, 0x10222222, 0x00000000, 0x89240201, 
0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00000000, 0xCC9999C9, 0x9999C9CC, 0x896745C3, 0x99A9CC9C, 0xC83822C2, 0x22222242, 0x002022A5, 
0x22220100, 0xBC592222, 0x45B6CCCC, 0x1200050B, 0xC0000060, 0x00C00C04, 0x00000002, 0x00000000, 
0x00000000, 0x00000002, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xBBBBCBBC, 0x896745C3, 0x99A9CBBC, 
0xCACC7A03, 0x15003063, 0x00000000, 0x00000000, 0xCC7A1200, 0x0051B7CC, 0x12000918, 0x00000020, 
0x00000000, 0x04000400, 0x000220C4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x9C9999C9, 
0x999999CC, 0x896745C3, 0x9999CA9C, 0xC8380000, 0x00000040, 0xBA7923C2, 0x84CBCC89, 0x22222222, 
0x22220211, 0x0C00053A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xC0000000, 0x0000C000, 0x896724B2, 0x52C8CBBC, 0xCCCC48C2, 0x222232B7, 0xC8480000, 0x00000041, 
0x2185CBCC, 0x69241033, 0x1221A5CC, 0xCC8A3622, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0x999999C9, 0x9999B9CC, 0x896745C3, 
0x9999C99C, 0xC8380000, 0x00000040, 0x5943C7CC, 0x6897BBBB, 0x22228498, 0x9C362222, 0x00800F16, 
0x00000040, 0x00000000, 0xC0C60A00, 0x5C000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 
0xBBCBBBCB, 0xCCCCCCBB, 0x896745C3, 0x9ABACCBB, 0xC8CC7B03, 0x20001052, 0xCCCC7CB3, 0x220130B7, 
0x02000022, 0x12010000, 0x12000140, 0xC8000080, 0x40C40C0A, 0x00006028, 0x00000000, 0x00000000, 
0x000000CC, 0x00000080, 0x00000000, 0xBBBBBBCB, 0xBBBBCBCC, 0x8B6745C3, 0x9999C9CC, 0xCACCCC0C, 
0x34206488, 0x00000010, 0x22000000, 0xCCBC7A35, 0x3275B8CC, 0x12000943, 0x00000040, 0x00000000, 
0x0CC40C00, 0x000200C6, 0x22000000, 0x00006200, 0x00000000, 0x00000000, 0xCCCC9BC9, 0x99999999, 
0x8A6745C3, 0x9999CACC, 0xC89A8905, 0x23104663, 0xCBCCCCCC, 0xA6BBBBAB, 0x00000020, 0x79462301, 
0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 
0x00000000, 0x9A99BBC9, 0x99A9C9A9, 0x996745C3, 0xABA9CC9A, 0xC7370000, 0x00000031, 0x7A4595CC, 
0xB9BBAAAA, 0x42562263, 0x8A242222, 0x06000F36, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xC0020000, 0x00002000, 0xCCCC6AB3, 0x001042B9, 0xCCCC6A12, 0x000041C8, 
0xC8480000, 0x00000041, 0x2173CBCC, 0x7A231033, 0x1032A6CC, 0xCC8A3612, 0x01000701, 0x022CC64C, 
0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xCCCC9AC9, 
0x999999A9, 0x8A6745C3, 0x9999CACC, 0xC9482202, 0x00001251, 0x7965C8CC, 0x9998BABA, 0x222274A9, 
0xBC473432, 0x00752A02, 0x00000408, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x0000C2C0, 0x00000000, 0x00000000, 0x00000000, 0x00007878, 0x00000000, 
0x00000000, 0x00000000, 0x00005757, 0x00000000, 0x00000000, 0x00000000, 0x00800716, 0x00000040, 
0x00000000, 0xC0C60A00, 0x5C000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBCB, 
0xBBBBBBBB, 0x896745C3, 0xA9CCCBCC, 0xCCCC8B08, 0x100062BA, 0xCCCCCCBA, 0x014197CA, 0x00000021, 
0x24000000, 0x0A000542, 0xCC000040, 0x21C60C4C, 0x00000009, 0x00002000, 0x00000042, 0x0022008A, 
0x00000022, 0x00C00007, 0xBCBBBBCB, 0xBBBBCBCC, 0x896745C3, 0x99B9CCBC, 0xB9CCCC0C, 0x44004387, 
0x00001042, 0x01000000, 0xCCBC8A36, 0x4286CACC, 0x00000733, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000800, 0x00000000, 0xB8BC6883, 0x002194AC, 0xCC7B0300, 
0x0084CCCC, 0xC6060000, 0xCC00AC78, 0x00001083, 0x00000000, 0xAC140000, 0x65BACCCC, 0x10000F14, 
0x00000060, 0x00000000, 0xAAC80A00, 0x00000004, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xAB6845B0, 0x2263CACC, 0x48000000, 0x1073CBCC, 0xC8CCCC09, 0x00000040, 0xA7CCCCBC, 0x00000052, 
0x00000000, 0x03000100, 0x0E000506, 0xCA000060, 0x22C2AA2A, 0x00008002, 0x00000000, 0x00006686, 
0x004600AA, 0x00000044, 0x00000000, 0x8B2524B2, 0x64BACBCC, 0x47020000, 0x64B8CCBC, 0xC9CCCC0C, 
0x22102163, 0x00002232, 0x00001000, 0xCCAB4702, 0x5486CBCC, 0x0E000F43, 0x00000040, 0x00000000, 
0x0CC40C00, 0x000200C6, 0x22000000, 0x00006200, 0x00000000, 0x00000000, 0x9B9999C9, 0xCBBCCCCC, 
0x896745C3, 0x99B9CCAC, 0xC8CCBC08, 0x00102285, 0xCCCCCCCC, 0x12116496, 0x11102011, 0xAB347525, 
0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 
0x00000000, 0x9CA999C9, 0xCC9BCCCC, 0x896745C3, 0xB9CCCCAC, 0xC8380000, 0x00000040, 0xCCBCBBCA, 
0x128399C9, 0x46221111, 0x7A766654, 0x01000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00000000, 0x9A9999C9, 0xCCCCCCCC, 0x896745C3, 0x99B9CCCC, 
0xC88A7503, 0x11108578, 0x7798CCCC, 0x22327556, 0x48020000, 0xCCCCCCBC, 0x1200050B, 0xC3000060, 
0x30C30C04, 0x00000006, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0xBCBBBBCB, 
0xBBBBCBCC, 0x896745C3, 0x99CACC9C, 0xC7CBCC0C, 0x22000040, 0x00000052, 0x00000000, 0xCCAC6915, 
0x2263A8CB, 0x12000F14, 0x00000060, 0x00000000, 0x44C20400, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x7A4443B0, 0x62C8CCBC, 0x48000000, 0x3062CBCC, 0x95CCCC0C, 0x10150010, 
0x32C7CCAC, 0x00000020, 0x00000000, 0x14000000, 0x12000512, 0x20000040, 0x00222000, 0x0000C040, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x9CA999C9, 0x99B9CCCC, 0x896745C3, 
0x99CACC9C, 0xC8692202, 0x00000040, 0x94BACCCC, 0x00001122, 0x22220200, 0xBCAA6845, 0x02000701, 
0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00200002, 
0x9C9999C9, 0xCABCCCCC, 0x896745C3, 0x99CCCC9C, 0xC8480000, 0x00000040, 0x9C885784, 0x98CBCCCC, 
0x00212284, 0x35012024, 0x00762A08, 0x05050507, 0x06060608, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x80808080, 0xC0C0C0C0, 0x00000000, 0x00000000, 0x78787878, 
0x78787878, 0x00000000, 0x00000000, 0x57575757, 0x57575757, 0x00000000, 0x00000000, 0x00800716, 
0x00000040, 0x00000000, 0xC0C60A00, 0x5C000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 
0xCCBCBBCB, 0xBBBBCBCB, 0xA97777C7, 0x9C999CCC, 0x8CCC8CC4, 0x2273CBCC, 0xCCBC7B94, 0x3384AACC, 
0x33333333, 0x33333333, 0x0E000509, 0xAC000060, 0x00A00A8C, 0x00000008, 0x00000000, 0x0000AA00, 
0x00202046, 0x00000050, 0x00A00007, 0xBBBBBBCB, 0xBBBCBCBC, 0x896745C3, 0x9999B9BC, 0xCBACCC0C, 
0x9B0396AB, 0x112173A8, 0x11111111, 0xBC9B2511, 0xAACCCCCC, 0x00000733, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000900, 0x00000000, 0xAB8A57B3, 0x96979999, 
0x9B3622C2, 0x457687CB, 0x757777C7, 0x8A445565, 0x22222272, 0x22222222, 0xBC7A3522, 0x657697CB, 
0x12000F14, 0x00000060, 0x00000000, 0x44C20800, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xBB5845B1, 0x5497CCCC, 0x7B030000, 0x0084CBCC, 0xCACBCC0B, 0x000240B8, 0xCCCCCC8B, 
0x11111174, 0x11111111, 0x13111111, 0x0000052D, 0x82000060, 0x40840000, 0x00002A80, 0x00000006, 
0x02000600, 0x80AC8628, 0x00000000, 0x000A0000, 0xBBBACCC8, 0xC97BCACC, 0x695722C2, 0xCBCCCCCC, 
0xCC7AC959, 0x642452C8, 0x76B9CBCC, 0x22533465, 0x22222222, 0x8A985835, 0x1000050A, 0xAC000060, 
0x00A0C060, 0x0000A000, 0x00000000, 0x000000AA, 0x00020002, 0x00000002, 0x004C0000, 0xABBCCCBB, 
0x1242B7BB, 0x040000C0, 0x84CBCC8C, 0xC9BCCC0A, 0xA9374454, 0x212284CA, 0x33241111, 0x44331152, 
0xCCCCAB47, 0x02000714, 0x02080040, 0x00000000, 0x00A00600, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00220002, 0x999A36B2, 0xCBCCCCBB, 0x232222C2, 0xCACCBC6A, 0xC9CCBCCC, 0x11112163, 
0x62CACCBC, 0x22121121, 0x22222222, 0x36122122, 0x00800716, 0x00000040, 0x00000000, 0xC0C60A00, 
0x5C000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 0xCBBBBBCB, 0xCCBCBCCC, 0xAAAAAACA, 
0xCACACAAC, 0xCC797777, 0x777797CC, 0xCCCC8BA8, 0x000041B6, 0x00000000, 0x14000000, 0x12000542, 
0xCC000040, 0x20C60C4C, 0x00000008, 0x00002000, 0x00000040, 0x0022006A, 0x00000022, 0x00C00007, 
0xBBBBBBCB, 0xCBBBCBCC, 0x896745C3, 0x9999CCAC, 0xCCCCBC0A, 0x640063BA, 0x00002085, 0x00000000, 
0xBCBC4712, 0x86B9CCCC, 0x12000F13, 0x00000060, 0x00000000, 0x44A20C00, 0x0200002C, 0x00000000, 
0x00004400, 0x00000000, 0x00000000, 0x99793500, 0xB7BACCBC, 0x48737B03, 0x59C8CCCC, 0xCBCCCC09, 
0x00001084, 0xCCCCCC6A, 0x75133198, 0x00000010, 0x01000100, 0x12000512, 0x20000040, 0x00222000, 
0x0000C080, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCCBCCB, 0x213342B8, 
0x482101C0, 0x5198CCCC, 0xC6ABAA0A, 0x66004079, 0x3342A6CC, 0x01214433, 0x6A434236, 0xCCCCCCBC, 
0x02000714, 0x02080040, 0x00000000, 0x00A00000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00220002, 0xBCBB9A26, 0x62BACCCC, 0x242222C2, 0xCACCCC8B, 0xC68A8704, 0x00000031, 0xCCCCAC24, 
0x5176A9CB, 0x30330000, 0x43220001, 0x00800716, 0x00000040, 0x00000000, 0xC0C60A00, 0x5C000006, 
0xA6000000, 0x00000000, 0x00000000, 0x00000000, 0xBBBCBBCB, 0xBBCCBCCB, 0x896745C3, 0x99B9CCBC, 
0xCCBCCA4B, 0x4444A4CC, 0xCCCCACAA, 0x444464B8, 0x44444444, 0x44444444, 0x12000542, 0xCC000040, 
0x20C60C4C, 0x00000008, 0x00002000, 0x00000040, 0x0022006A, 0x00000022, 0x00C00007, 0xBBBBBBCB, 
0xBBBBCBCC, 0x896745C3, 0x9999CCBC, 0xCBCCCC0C, 0xA80066A9, 0x00002064, 0x00000000, 0xCCAC6813, 
0x86B8CBCC, 0x12000F13, 0x00000060, 0x00000000, 0x44820C00, 0x0200002C, 0x00000000, 0x00004400, 
0x00000000, 0x00000000, 0x79241100, 0x4186CBCC, 0x48000000, 0x0073CBCC, 0xCBCCCC0C, 0x00003464, 
0xC9CCCC9C, 0x00121054, 0x00000000, 0x03000000, 0x12000529, 0xA2000060, 0x00A00806, 0x00000000, 
0x00000000, 0x00008888, 0x008000AC, 0x00000006, 0x00000000, 0xCCCCCC3A, 0x100041A7, 0x04000000, 
0x41C8CC8C, 0xA5CCCC0C, 0x66000021, 0x00001083, 0x00000000, 0xCC480200, 0xC9CCCCCC, 0x02000714, 
0x02080040, 0x00000000, 0x00A00000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220002, 
0x68553502, 0x95CCCCBC, 0x03000000, 0xA6CCCC7B, 0xA5CCCC0C, 0x00102321, 0x74CACCAC, 0x00002032, 
0x43221200, 0x46224233, 0x00800716, 0x00000040, 0x00000000, 0xC0C60A00, 0x5C000006, 0xA6000000, 
0x00000000, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xBBBBBBBB, 0x896745C3, 0x99A9AC99, 0xCCBA48C2, 
0x2242B7CC, 0xCCCCACA7, 0x222263B9, 0x22222222, 0x22222222, 0x0E000542, 0xCC000040, 0x20C60C4C, 
0x00000008, 0x00002000, 0x00000040, 0x0022006A, 0x00000022, 0x00C00007, 0xBBBBBBCB, 0xBBBBBCBC, 
0x896745C3, 0x999999BB, 0xC9CCCC09, 0x9B032262, 0x00002062, 0x00000000, 0xCCAB7926, 0x22A5CBCC, 
0x12000F14, 0x00000060, 0x00000000, 0x44C20400, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xAB8824B2, 0x2262CACC, 0x8B262262, 0x2222A6CC, 0x62C9CC6C, 0x32372222, 0x73CCCCBC, 
0x22222222, 0x22222222, 0x25222222, 0x12000529, 0xA2000060, 0x00A00806, 0x00000000, 0x00000000, 
0x00008888, 0x008000AC, 0x00000006, 0x00000000, 0xCCCCCCBB, 0x211142A8, 0x37000000, 0x21A6CCBC, 
0xB7CBCB0C, 0x33000030, 0x00001082, 0x00000000, 0xBC691500, 0xB9CCCCCC, 0x02000714, 0x02080040, 
0x00000000, 0x00A00000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220002, 0xAB5676B4, 
0x62CACCBC, 0x02000000, 0xB7CCCC6A, 0xC7CCCC0C, 0x00001162, 0x42A9CCAC, 0x00002022, 0x22221200, 
0x36222222, 0x00800716, 0x00000040, 0x00000000, 0xC0C60A00, 0x5C000006, 0xA6000000, 0x00000000, 
0x00000000, 0x00000000, 0xCCBCBCCB, 0xCBCCCBBC, 0x898888C8, 0x99CCCC9C, 0xCCBCBBBB, 0xBBBBCBCC, 
0x89C9CC9C, 0x8888B8BA, 0x88888888, 0x88888888, 0x0E000509, 0xAC000060, 0x00A00A8C, 0x00000008, 
0x00000000, 0x0000AA00, 0x00202046, 0x00000050, 0x00A00007, 0xBBBBBBCB, 0xBBBBCBBB, 0x896745C3, 
0x9999B99C, 0xC9CCCC0C, 0x9B152262, 0x002053A8, 0x00000000, 0xBC9B2501, 0xAABACBCC, 0x00000733, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000900, 0x00000000, 
0xAB8B57B3, 0x96979999, 0x9B3622C2, 0x457687CB, 0x757777C7, 0x8A445565, 0x22222272, 0x22222222, 
0xBC9B3522, 0x657697CB, 0x12000F14, 0x00000060, 0x00000000, 0x44C20800, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x9B4655B3, 0x3297CCCC, 0x59010000, 0x1074CBCC, 0xC9CCCC0C, 
0x20264196, 0xA6CCCC7A, 0x00001042, 0x00000000, 0x13010000, 0x0000052D, 0x82000060, 0x40840000, 
0x00002A80, 0x00000006, 0x02000600, 0x80AC8628, 0x00000000, 0x000A0000, 0xC9CB9CBC, 0x68CABBCC, 
0xAC8B36C3, 0xB88BC9CC, 0xCCBB7955, 0x223285CB, 0xA6CBBBCC, 0x00002045, 0x00000000, 0x36535512, 
0x1000050A, 0xAC000060, 0x00A0C060, 0x0000A080, 0x00000000, 0x000000AA, 0x00020002, 0x00000002, 
0x004C0000, 0xBCBC9AC9, 0x9999CBCC, 0x896745C3, 0x99CACCAC, 0xC8895605, 0x66125576, 0x223287CC, 
0x00001122, 0x33220100, 0xCCCCCC6C, 0x00800546, 0x86000040, 0x0080C60C, 0xCC808600, 0x06000064, 
0x00000000, 0x00000000, 0x200A0000, 0x00002000, 0x9999AACA, 0xAB9999BB, 0x896745C3, 0xBCBCCC9A, 
0xC84800A0, 0x00000040, 0x573353C9, 0x33333343, 0xCC886A33, 0xCCBAA9CC, 0x12000701, 0x022CC64C, 
0x00000000, 0x00800000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xCC9999C9, 
0x9A99CCCC, 0x896745C3, 0x99CACC9C, 0xC9CA9A0B, 0x00001062, 0xCCCCCCCB, 0x6696BCCA, 0x22426566, 
0x99673523, 0x00800716, 0x00000040, 0x00000000, 0xC0C60A00, 0x5C000006, 0xA6000000, 0x00000000, 
0x00000000, 0x00000000, 0xBBBBBBCB, 0xCCBBBBCC, 0x896745C4, 0x99CCCC99, 0xCC797777, 0x777797CC, 
0xCCCCAC99, 0x555565CA, 0x55555555, 0x55555555, 0x12000542, 0xCC000040, 0x20C60C4C, 0x00000008, 
0x00002000, 0x00000040, 0x0022006A, 0x00000022, 0x00C00007, 0xBBBBBBCB, 0xBBBBBBBC, 0x896745C3, 
0x9999CCAC, 0xCCCCBC0A, 0x640063BA, 0x00002082, 0x00000000, 0x8C552312, 0x2284CCCC, 0x12000F13, 
0x00000060, 0x00000000, 0x44A20C00, 0x0200002C, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 
0x7B1300B0, 0x2284CBCC, 0x48000000, 0x0052CACC, 0xC9AC9908, 0x00000054, 0xC9CCBC66, 0x00001065, 
0x00000000, 0x01000000, 0x12000512, 0x20000040, 0x00222000, 0x0000C080, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x9CB99AC9, 0x9999C9CC, 0x896745C3, 0x99CACCAC, 0xC8692202, 
0x00001052, 0x222273CC, 0x00001122, 0x23220000, 0xCCCCCC6C, 0x00800546, 0x86000040, 0x0080C60C, 
0xCC808600, 0x06000094, 0x00000000, 0x00000000, 0x200A0000, 0x00002000, 0xBBBBBBCB, 0xBBBBBBBB, 
0xBBBBBBCB, 0xCBCCBCBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xCBBCCBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xCCCBBBBB, 
0x12000701, 0x022CC64C, 0x00000000, 0x00800000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00000000, 0xCC9999C9, 0x9999C9CC, 0x896745C3, 0x99C9CC9C, 0xC8592201, 0x00000040, 0xCCCC9C74, 
0x666676A9, 0x22426566, 0x22221222, 0x00800716, 0x00000040, 0x00000000, 0xC0C60A00, 0x5C000006, 
0xA6000000, 0x00000000, 0x00000000, 0x00000000, 0xBBCCBCCB, 0xBBCCCBBB, 0x999999C9, 0xC9CCC999, 
0xCCBCCA4B, 0x4444A4CC, 0xCCCCAAAA, 0x000083AA, 0x00000000, 0x14000000, 0x12000542, 0xCC000040, 
0x20C60C4C, 0x00000008, 0x00002000, 0x00000040, 0x0022006A, 0x00000022, 0x00C00007, 0xBCBBBBCB, 
0xBBBBCCCC, 0x8A6745C3, 0x9999CCC9, 0xCBCCCC0C, 0xA80066A9, 0x00002064, 0x00000000, 0xBB9B5712, 
0x86B9CCCC, 0x12000F13, 0x00000060, 0x00000000, 0x44820C00, 0x0200002C, 0x00000000, 0x00004400, 
0x00000000, 0x00000000, 0x44230100, 0x30B9CB8C, 0x58010000, 0x0084CCCC, 0xCBCCCC0C, 0x00003464, 
0xCCCCCC6A, 0x005254C9, 0x00000000, 0x22250000, 0x12000529, 0xA2000060, 0x00A00806, 0x00000000, 
0x00000000, 0x00008888, 0x008000AC, 0x00000006, 0x00000000, 0xBBCABCC9, 0x9999A9CC, 0xCC89A926, 
0x999999C9, 0xA5CCCC0C, 0x03000021, 0x98BACCCC, 0x00000061, 0xCC4A0100, 0x99BACBCC, 0x00800546, 
0x86000040, 0x0080C60C, 0xCC808600, 0x06000094, 0x00000000, 0x00000000, 0x200A0000, 0x00002000, 
0x9BB99AC9, 0x9999BBCC, 0x896A45C3, 0x99CACCCC, 0xC9797777, 0x77777787, 0x51B9CCBC, 0x01002035, 
0x26010020, 0x8B978867, 0x12000701, 0x022CC64C, 0x00000000, 0x00800000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00000000, 0xBCBBAAC9, 0xB9BCCBCB, 0x896845C3, 0x9999CCCC, 0xA5CCCC0C, 
0x00102321, 0x7898BA9A, 0x10232176, 0xCC8B2500, 0xAABACCCC, 0x00800716, 0x00000040, 0x00000000, 
0xC0C60A00, 0x5C000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 0xBBCCBCCB, 0xBBCCCBBB, 
0x999999C9, 0xC9CCC999, 0xCCBCCA4B, 0x4444A4CC, 0xCCCCAAAA, 0x000083AA, 0x00000000, 0x14000000, 
0x0E000542, 0xCC000040, 0x20C60C4C, 0x00000008, 0x00002000, 0x00000040, 0x0022006A, 0x00000022, 
0x00C00007, 0xBBBBBBCB, 0xBBBCBBBC, 0x996745C3, 0x9999A9CB, 0xCACCCC0C, 0x22005269, 0x11112162, 
0x11111111, 0xBB9B7913, 0x2232C7CC, 0x12000F14, 0x00000060, 0x00000000, 0x44C20400, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x997923B2, 0x2284CBBC, 0x8B262262, 0x2284A6CC, 
0xCACCCC6C, 0x22228666, 0xCACCCCCB, 0x22222252, 0x22222222, 0x58222222, 0x12000529, 0xA2000060, 
0x00A00806, 0x00000000, 0x00000000, 0x00008888, 0x008000AC, 0x00000006, 0x00000000, 0xCCCCCCC9, 
0x99999999, 0x8A674563, 0x9999BBCB, 0xB8CCCC6C, 0x2222649A, 0x222252CA, 0x22222222, 0xCC9B7824, 
0xBBBBCBCC, 0x00800646, 0x86000040, 0x0080C60C, 0xCC808600, 0x06000094, 0x00000000, 0x00000000, 
0x200A0000, 0x00002000, 0xCCCCCCCC, 0xA9B9CCC9, 0x8A6A45C3, 0xBACBCC9B, 0xC85822C2, 0x22222252, 
0x2163CBCC, 0x11112122, 0x54433721, 0xBB999858, 0x12000701, 0x022CC64C, 0x00000000, 0x00800000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xA9AA99C9, 0xCC9CAC9C, 0x99778AC5, 
0xB9A9CCAC, 0xB76A95CC, 0x11112231, 0x2432A6BA, 0x78674388, 0xAC592364, 0xBBBAAACC, 0x00772A03, 
0x000A0808, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00C0C080, 0x00000000, 0x00000000, 0x00000000, 0x00787878, 0x00000000, 0x00000000, 0x00000000, 
0x00575757, 0x00000000, 0x00000000, 0x00000000, 0x00800716, 0x00000040, 0x00000000, 0xC0C60A00, 
0x5C000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xBBBBBBBB, 0x896745C3, 
0xC9BCCC9A, 0xCCCB7B03, 0x2230B7CC, 0xCCBC5AB2, 0x213286CB, 0x11111111, 0x22111111, 0x12000542, 
0xCC000040, 0x20C60C4C, 0x00000008, 0x00002000, 0x00000040, 0x0022006A, 0x00000022, 0x00C00007, 
0xBBBBBBCB, 0xBBBCCBBB, 0xAA6845C3, 0x9999CBCC, 0xC9CCCC0C, 0x8B232263, 0x00002072, 0x15000000, 
0xCCBC7966, 0x6598BBCC, 0x00000733, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000C00, 0x00000000, 0xC98C25C2, 0x23223263, 0xCC7B24C2, 0x223243A6, 0x424433C2, 
0xAC133422, 0x22222242, 0x22222222, 0xBB9B2522, 0x224485CC, 0x0A000914, 0x00000060, 0x00000000, 
0xAAC60A00, 0x00000004, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCBC9BB5, 0x002284CB, 
0x7C040000, 0x0042C8CC, 0xC9CCBC09, 0x00001052, 0x75CCCCBC, 0x00001122, 0x00000000, 0x25100100, 
0x0A000F06, 0xCA000060, 0x22C2A62A, 0x00008002, 0x00000000, 0x00006686, 0x004600AA, 0x00000044, 
0x00000000, 0x9C4825B2, 0xA6AACCCC, 0x26012000, 0xA7CBCCAC, 0xCACCCC0C, 0x76032263, 0x00011232, 
0x22010000, 0xCC9B4622, 0x85BACBCC, 0x0A000914, 0x00000060, 0x00000000, 0xAAC60A00, 0x00000004, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x482300B0, 0xCBCCCCBC, 0x8B240000, 0x2084CCCC, 
0x96CCCC0C, 0x31226335, 0xCBCCCCAC, 0x11114186, 0x11111111, 0x15111111, 0x08000544, 0xCC000080, 
0x40C2C060, 0x0000C0A0, 0x00000000, 0x0000AA00, 0x40AC00CA, 0x00000004, 0x000C0000, 0xCCCCCCBC, 
0x557485AB, 0x7B372262, 0x52B9CCCC, 0xB7CCCC6C, 0x56222263, 0x224254C8, 0x22222222, 0xBBAB6835, 
0xCCCCCCCC, 0x02000714, 0x00080060, 0x00000000, 0x0AA20700, 0x000000A4, 0x00000000, 0x00000000, 
0x00000000, 0x00200002, 0xAB9A48B2, 0xCCCCCCAC, 0x02000000, 0xCACCBC48, 0xC8CCCC0C, 0x10002252, 
0x42C8CCAC, 0x00000220, 0x35010000, 0x54668778, 0x00800716, 0x00000040, 0x00000000, 0xC0C60A00, 
0x5C000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 0xBCBBBBCB, 0xBBBBBBCB, 0x896745C3, 
0xA9A9AC9B, 0xCCBC9CC5, 0x221195AC, 0xCCCC9BB9, 0x2142A8CB, 0x11111111, 0x38111111, 0x12000542, 
0xCC000040, 0x20C60C4C, 0x00000008, 0x00002000, 0x00000040, 0x0022006A, 0x00000022, 0x00C00007, 
0xBBBBBBCB, 0xCBBBBBCB, 0xAA7845C3, 0x9999CBBC, 0xCACCCC0C, 0x440062B8, 0x00002072, 0x03000000, 
0xCCBC7946, 0x2274C9CC, 0x12000913, 0x00000060, 0x00000000, 0xAAA20C00, 0x0200002C, 0x66660000, 
0x0046AA00, 0x00000064, 0x00000000, 0xCCBCBBB8, 0x0062BACC, 0xBC370000, 0x0062A8CC, 0xC9CCCC0A, 
0x000054A7, 0xC8CCCCCC, 0x00001163, 0x00000000, 0x27100100, 0x0A000F06, 0xCA000060, 0x22C2A62A, 
0x00008002, 0x00000000, 0x00006686, 0x004600AA, 0x00000044, 0x00000000, 0x9B8625B2, 0xB7BACCCC, 
0x26012000, 0xA6BBCCAC, 0xCACCCC0C, 0x741442A8, 0x11111242, 0x22111111, 0xCC9B4622, 0x97BACBCC, 
0x0A000913, 0x00000060, 0x00000000, 0xAAA20C00, 0x0200002C, 0x66660000, 0x0046AA00, 0x00000064, 
0x00000000, 0x482200B0, 0xCBCCCCBC, 0x7B030000, 0x2032A6CC, 0xCCCCCC0C, 0x5132628A, 0xCBCCCCAC, 
0x11114196, 0x11111111, 0x27111111, 0x0A000506, 0xCA000060, 0x22C2A62A, 0x0000A002, 0x00000000, 
0x00006686, 0x004600AA, 0x00000044, 0x00000000, 0xCCCCCCB9, 0x999999B9, 0xBB9B4663, 0x99B9CBCC, 
0xC8CACC6C, 0x22223264, 0x326644C5, 0x35222222, 0xABABAB7A, 0xCBCCCCBC, 0x00800618, 0x00000020, 
0x00000000, 0x0A000A00, 0x002882CA, 0x02440000, 0x00202200, 0x00000002, 0x00000000, 0xCCCC9BCC, 
0x9999CCCC, 0x896745C3, 0xCBCCCC9A, 0xC9692222, 0x11112252, 0x6376CBCC, 0x00000220, 0x58221200, 
0xBBBBA978, 0x02000701, 0x022CC64C, 0x00000000, 0x00800000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00000001, 0xBB9999C9, 0xCCCCCC9C, 0x896745C3, 0xAACCCCBC, 0xC9BBA80A, 0x20002252, 
0x7B75BBBB, 0x7398B9BA, 0x79663622, 0xAABABB9B, 0x00800716, 0x00000040, 0x00000000, 0xC0C60A00, 
0x5C000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xBBBBBBBB, 0x896745C3, 
0xC9BCCC9A, 0xCCCC6902, 0x221095CA, 0xCCBC7AB3, 0x2052A8CB, 0x00000000, 0x12000000, 0x12000542, 
0xCC000040, 0x20C60C4C, 0x00000009, 0x00002000, 0x00000040, 0x0022006A, 0x00000022, 0x00C00007, 
0xBBBBBBCB, 0xBBBCCBCC, 0xAB6845C3, 0x9999CBCC, 0xC9CCCC0C, 0x8B232263, 0x00002072, 0x15000000, 
0xCCBC7966, 0x6598BBCC, 0x00000733, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000C00, 0x00000000, 0xCC8C66C6, 0x6A66B7CC, 0xCC6A44C4, 0x4496CACC, 0xC6CC8A07, 
0xCC00AC47, 0x11111141, 0x11111111, 0x8B561311, 0x42B9CCCC, 0x0A000914, 0x00000060, 0x00000000, 
0xAAC60A00, 0x00000004, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCBCABB6, 0x0022A6CC, 
0x7C140000, 0x0062C9CC, 0xC9CCBC09, 0x00001052, 0x84CCCC9C, 0x00001022, 0x00000000, 0x24100100, 
0x0A000F06, 0xCA000060, 0x22C2A62A, 0x00008002, 0x00000000, 0x00006686, 0x004600AA, 0x00000044, 
0x00000000, 0xAC6846B2, 0x84BACCCC, 0x26012000, 0xA6BBCCBC, 0xCACCCC0C, 0x21003275, 0x00011232, 
0x22010000, 0xCC8B3622, 0x95BACBCC, 0x0A000914, 0x00000060, 0x00000000, 0xAAC60A00, 0x00000004, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x482200B0, 0xCBCCCCAC, 0x8B240000, 0x2084CCCC, 
0xB7CCCC0C, 0x21442332, 0xCBCCCCAC, 0x11114186, 0x11111111, 0x16111111, 0x0A000544, 0xCC000080, 
0x40C2C060, 0x0000C0A0, 0x00000000, 0x0000AA00, 0x40AC00CA, 0x00000004, 0x000C0000, 0xBC9A99C9, 
0x9999C9CC, 0x8A6745C3, 0x99C9CCCC, 0xCAAACC6C, 0x66226685, 0x2275B9CC, 0x24222222, 0xBBAB6845, 
0xCCCCCCCC, 0x00000546, 0x86000040, 0x0000C00C, 0xCC800600, 0x00000000, 0x00000000, 0x00000000, 
0x000A0000, 0x00000000, 0x9C9999C9, 0xCC9AC99C, 0xA96745C3, 0xCACCBCAC, 0xC989ABCC, 0x4785BC69, 
0x52A9A9CC, 0x22222222, 0x68232222, 0xBC9AA9BA, 0x00800546, 0x86000040, 0x0080C60C, 0xCC808600, 
0x060000B4, 0x00000000, 0x00000000, 0x200A0000, 0x00002000, 0xCCBC9AC9, 0x9C99CCCC, 0x896745C3, 
0xA9ACBCBC, 0xCA8AC9CA, 0x22222362, 0x4275BACC, 0x22122122, 0x6A232211, 0xBCAA97BB, 0x12000701, 
0x022CC64C, 0x00000000, 0x00800000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 
0x9C9999C9, 0xC9CCCCCC, 0x896745C3, 0x99CBCC9A, 0xC969C8C7, 0x22222252, 0xCCABBBBB, 0xCBCCCCCC, 
0x79688799, 0xAABABB9B, 0x01782A06, 0x07080808, 0x00000607, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xC2C0C0CE, 0x0000C0C0, 0x00000000, 0x00000000, 0x78787878, 
0x00007878, 0x00000000, 0x00000000, 0x57575757, 0x00005759, 0x00000000, 0x00000000, 0x0E000509, 
0xAC000060, 0x00A00A6C, 0x00000000, 0x00000000, 0x0000AA00, 0x00202046, 0x00000020, 0x00000000, 
0xBCBBBBCB, 0xBBBBCBCC, 0x8C6745C3, 0x99CACCCC, 0x991211C1, 0x1132CC9B, 0x423552B9, 0x11111111, 
0xC99B2411, 0xCACCBB89, 0x0E00091D, 0x00000060, 0x00000000, 0x02000200, 0x008CACA2, 0xAC000000, 
0x00A8A800, 0x00000000, 0x00000000, 0xA8BBCBBC, 0x4476CABC, 0x9CCABAC7, 0x1131A6AC, 0xCA6913C1, 
0x5524A79A, 0xBABCCBCC, 0x5763B8BC, 0x24115266, 0xAB371121, 0x00800912, 0x82000040, 0x00888000, 
0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00000000, 0xBC8A5703, 0x62BBCCCC, 
0xCBBBBCBB, 0xBBBBBCBB, 0xC6060000, 0x00000031, 0xA8CCBC79, 0x00000064, 0x00000000, 0x00000000, 
0x06000703, 0x0084AC62, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xACBA79C6, 0x76A9CCCC, 0xCCA9ABC7, 0x2252B7CC, 0xC71711C1, 0x11111132, 0x566556A7, 
0x55A75766, 0x86CBBB68, 0x97ABAA58, 0x0E000511, 0x42000060, 0xC64A0A00, 0x0000000C, 0x00000000, 
0x000000A8, 0x00000020, 0x00000008, 0x00000000, 0x7A4533B2, 0xAB99CBCC, 0xB9CACBC8, 0x6764CABC, 
0xA5BBBACC, 0x11111131, 0x45533631, 0x67AA9969, 0xA9CBCC9B, 0x1162C9AB, 0x0E000917, 0x00000040, 
0x00000000, 0x0CC60A00, 0x000000A6, 0x00AA0000, 0x00000000, 0x00000000, 0x00000000, 0x9999CCC9, 
0x9999CCCC, 0x8A6765C3, 0xA9BACCBC, 0xC71711C1, 0x11111131, 0x88CACCCC, 0x11112164, 0x21221111, 
0x9B682322, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 
0x00000000, 0x00000000, 0x9B9999C9, 0xC9CCCCBC, 0x999999C9, 0x9CC9C9CC, 0xC6060000, 0x00000031, 
0xCBCCCC8C, 0x52125264, 0x00000000, 0x97670200, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0x9C9999C9, 0xC9CCCA9C, 0xA96745C3, 
0x99A9CCAC, 0xC71711C1, 0x11111131, 0x51AAABAA, 0x62BB3711, 0xBBAA5824, 0x889977A8, 0x1200050B, 
0xC2000060, 0x20C60C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00000000, 
0xBBBBBBCB, 0xBBBBCCCC, 0x9B6756C3, 0x9999CBCC, 0xCCCC7903, 0x00001073, 0x00000000, 0x01000000, 
0xCCCCAC48, 0x000020B6, 0x10000918, 0x00000020, 0x00000000, 0x0A000A00, 0x004882CA, 0x02440000, 
0x00202200, 0x00000002, 0x00000000, 0x7B343232, 0x2253C7CC, 0x40C8CC08, 0x00000000, 0xCA481111, 
0x111161AB, 0xBC671400, 0x4296CBCC, 0x00000000, 0x00000000, 0x00800712, 0x82000040, 0x00888000, 
0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0x04000703, 0x0084AC62, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xBC987835, 0x2274CACC, 0x40C8CC08, 0x00000000, 0xC6060000, 0x00000031, 0x00004266, 
0x55121111, 0xCCCC7B77, 0x464287CB, 0x1000050B, 0xC2000060, 0x20C60C4A, 0x00000008, 0x00000000, 
0x00000044, 0x00460068, 0x00000064, 0x00000000, 0x9B794532, 0x3474CACC, 0x48000000, 0x0084CCCC, 
0xCCCCBC0A, 0x000020A5, 0x00000020, 0x00000000, 0x15000000, 0xB6CCCCAC, 0x10000918, 0x00000020, 
0x00000000, 0x0A000A00, 0x002882CA, 0x02440000, 0x00202200, 0x00000002, 0x00000000, 0xBCBB9AC9, 
0x99B9BCCC, 0x896745C3, 0x99CBCCAB, 0xC6060000, 0x00000031, 0xCCCCCCCC, 0x54445496, 0x44444444, 
0xAB677569, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 
0x00000000, 0x00000000, 0x9B9999C9, 0xC9CCCCBC, 0xBBBBBBCB, 0xBBBBBBBB, 0xC6060000, 0x00000031, 
0xCBCCCC8C, 0x52125264, 0x00000000, 0x97670200, 0x01000701, 0x022CC64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xBC9A99C9, 0x99CBCCCC, 0x896745C3, 
0x99CBCC9A, 0xC6060000, 0x00000031, 0x133196CC, 0x20250000, 0x23014202, 0xCCCCCC7A, 0x1200050B, 
0xC2000060, 0x20C60C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00000000, 
0xBBBBBBCB, 0xBBBBCCCC, 0x896745C3, 0x99CACC9B, 0xCCCC5802, 0x000020A5, 0x00000000, 0x00000000, 
0x22000000, 0x83CCCC5A, 0x10000918, 0x00000020, 0x00000000, 0x0A000A00, 0x002882CA, 0x02440000, 
0x00202200, 0x00000002, 0x00000000, 0x68745742, 0x3397CBCC, 0x68884600, 0x0073CBCC, 0xC9060000, 
0x00001063, 0xAC142000, 0x8856A7CC, 0x00002064, 0x00000000, 0x00800712, 0x82000040, 0x00888000, 
0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0x04000703, 0x0084AC62, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x36111111, 0x73CBCCBC, 0x68883501, 0x0051C9CC, 0xC6060000, 0x00000031, 0x01209698, 
0x00000000, 0x26000000, 0xCBCCCC9C, 0x1000050B, 0xC2000060, 0x20C60C2A, 0x00000008, 0x00000000, 
0x00000044, 0x00460068, 0x00000064, 0x00000000, 0x47333343, 0x86A8CCCC, 0x67CACC08, 0x00408688, 
0xCCBCBA05, 0x00002094, 0x85893600, 0x01000020, 0xCBCCBB37, 0x00003297, 0x10000918, 0x00000020, 
0x00000000, 0x0A000A00, 0x002882CA, 0x02440000, 0x00202200, 0x00000002, 0x00000000, 0xBCCBABC9, 
0x99BBB9CC, 0x898745C3, 0x99CACCCC, 0xC6060000, 0x00000031, 0xB8CCCCCC, 0x44444444, 0x44444444, 
0xAB577569, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 
0x00000000, 0x00000000, 0x9B9999C9, 0xC9CCCCBC, 0xBBBBBBCB, 0xBBBBBBBB, 0xC6060000, 0x00000031, 
0xCBCCCC8C, 0x52125264, 0x00000000, 0x97670200, 0x01000701, 0x022CC64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xBC9ABACC, 0x99BBCBBB, 0xB96745C3, 
0x99A9CCCC, 0xC6060000, 0x00000031, 0x20527787, 0x00000000, 0xCCCC6825, 0x7897ABCC, 0x0C000916, 
0x00000040, 0x00000000, 0xC0C60A00, 0x0A000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 
0xCCCCBCCB, 0xBBBBBBCC, 0x89A78AC5, 0x99CCCCCB, 0xCBCCBBBB, 0xBBBBBBBB, 0xCACCBBCB, 0x24222252, 
0x22223266, 0x23222232, 0x0E000512, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 
0x00000000, 0x00000000, 0x00000000, 0x44B7ACC6, 0xCC8CCC8C, 0x58C8CCC8, 0x8AC97B76, 0xCCCCCCCC, 
0xCCCCCCCC, 0x111111A1, 0xA5CCAC25, 0x11111121, 0x5296A926, 0x06000704, 0x00C42860, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x483333C3, 0xCCCCCCCC, 
0xCCA8C9C8, 0x3333A6CC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCB8AC8, 0x11111183, 0x98AB2511, 0x46251141, 
0x0E00050B, 0xC0000060, 0x00C00C04, 0x00000002, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 
0x00000000, 0x6A9515A0, 0xCCC8CC8C, 0x84CBCC08, 0x40C8BC68, 0xCBCCCCBC, 0xBBBBBBBB, 0xA6575554, 
0x44444444, 0xBCCB6A44, 0x4464CABC, 0x0E000917, 0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 
0x00AA0000, 0x00000000, 0x00000000, 0x00000000, 0x9C999BC9, 0x99CBC9CC, 0x8AC848C3, 0x99A9CCBC, 
0xCBBCCBBB, 0xBBBBBBBB, 0x75CACCCC, 0x44444444, 0x44444444, 0xAB577569, 0x00800812, 0x82000040, 
0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00000000, 0x9B9999C9, 
0xC9CCCCBC, 0xBBBBBBCB, 0xCBBBBCBC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCBCCCC8C, 0x52125264, 0x00000000, 
0x97670200, 0x01000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00000000, 0xCC9BC9C9, 0xC9999B9B, 0x896745C3, 0x99C9CC9C, 0xCCCCCCCC, 0xCCCCCCCC, 
0x8587CBBA, 0x33436634, 0xCCAB4633, 0x56B78B97, 0x0E00050B, 0xC2000060, 0x20C60C2A, 0x00000008, 
0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00000000, 0xBBBBBBCB, 0xBBBBCCCC, 0x896745C3, 
0x99CCCC9A, 0xCACCCC0C, 0x99008999, 0x00003283, 0x00000000, 0x9C470100, 0xAACCCCCC, 0x0C000917, 
0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 0x00AA0000, 0x00000000, 0x00000000, 0x00000000, 
0x89AA9A26, 0xA6CCCCBC, 0x9B961500, 0x30B7CCCC, 0xC6CCCC0A, 0x00002054, 0xBCBACBAB, 0x74B9CCCC, 
0x00204546, 0x14000000, 0x06000703, 0x0084AC62, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x77352211, 0xC8CCCC8A, 0xCC7A7504, 0x0040C8CC, 0xC6060000, 
0x00000031, 0xCACCCCCC, 0x00005298, 0x42023102, 0xBC8A3601, 0x1200040B, 0xC2000060, 0x20C60C2A, 
0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00000000, 0x25111111, 0x96CBCCAB, 
0x95CCCC08, 0x00000021, 0xCCBC0500, 0x000040A8, 0x87457603, 0x00000052, 0xCCBC3900, 0x000072CA, 
0x0C000F18, 0x00000020, 0x00000000, 0x0A000A00, 0x002882CA, 0x02440000, 0x00202200, 0x00000002, 
0x00000000, 0xCC9A99C9, 0x9999CACC, 0xBC6845C3, 0x9999C9CC, 0xC6060000, 0x00000031, 0xC7CCCCCC, 
0x52445765, 0x34540200, 0x68666523, 0x00800912, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 
0x00004400, 0x00000000, 0x00000000, 0x00000000, 0xAACCAACC, 0xCAAAAAAA, 0x999999C9, 0xCCCC9C99, 
0xCCCCCCCC, 0xCCCCCCCC, 0xCACBCBCC, 0xAAAAAAAA, 0xAAAAAACC, 0xAAACAAAA, 0x02000701, 0x022CC64C, 
0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xBCCC99C9, 
0x9999ACC9, 0xAB6745C3, 0x9999CBCC, 0xC6060000, 0x00000031, 0x88999987, 0x78235387, 0xCCBA7987, 
0x7877BACC, 0x0C00050B, 0xC2000060, 0x20C60C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 
0x00000064, 0x00000000, 0xBBBBBBCB, 0xBCBBCBCC, 0x898888C8, 0x99C9CC99, 0xC8CCCC0C, 0x96005942, 
0x00006236, 0x00000000, 0x5A010000, 0x42C8CCCC, 0x0C000918, 0x00000020, 0x00000000, 0x0A000A00, 
0x002882CA, 0x02440000, 0x00202200, 0x00000002, 0x00000000, 0x79340200, 0x64BACCBC, 0x999999C9, 
0x99C9CCCC, 0xC6060000, 0x00000031, 0x00000000, 0xAC680400, 0x4086CACC, 0x00000000, 0x06000704, 
0x00C42860, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x8A462200, 0x64BACCCC, 0x999999C9, 0x9999CCCC, 0xC6060000, 0x00000031, 0x00006287, 0x00000000, 
0x5A010000, 0xA9CBCCCC, 0x0C00091F, 0x00000020, 0x20000000, 0xA0000800, 0xAC00800A, 0x44000000, 
0x00004400, 0x00000000, 0x00000000, 0x79340200, 0x64BACCBC, 0x8AAC88C8, 0x8888C8CC, 0xCCAC6803, 
0x000063A8, 0xCCCC8A56, 0x000062B9, 0x00000000, 0x24000000, 0x0C000512, 0x82000040, 0x00888000, 
0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00000000, 0xCCCCCCCA, 0x99BACBBC, 
0x898888C8, 0x99C9CC9C, 0xC6060000, 0x00000031, 0x6498CCCC, 0x52125244, 0x00000000, 0xCCAC6813, 
0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00000000, 0xCCAB99C9, 0x9999BBCC, 0x898888C8, 0x99C99C99, 0xC6060000, 0x00000031, 0xCCCC8A56, 
0x000062B9, 0x00000000, 0x24000000, 0x00792F03, 0x00060609, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0044C2C0, 0x00000000, 0x00000000, 0x00000000, 
0x00353535, 0x00000000, 0x00000000, 0x00000000, 0x008E8ECE, 0x00000000, 0x00000000, 0x00000000, 
0x00800716, 0x00000040, 0x00000000, 0xC0C60A00, 0x5C000006, 0xA6000000, 0x00000000, 0x00000000, 
0x00000000, 0xCCBCBCCB, 0xBBBBBBCC, 0x896745C3, 0xB9CCCC9C, 0xCCBC5A00, 0x0000B8CC, 0xCCCCCCAB, 
0x1043B7CC, 0x00000000, 0x13000000, 0x06000542, 0xCC000040, 0x20C60C4C, 0x00000008, 0x00002000, 
0x00000040, 0x0022009A, 0x00000022, 0x00C00007, 0xBCCBBBCB, 0xBBBBCCCC, 0x896745C3, 0x99CACCBC, 
0xC8CCCCCC, 0x22112252, 0x00001032, 0x01000000, 0xCC9C5822, 0x22A5CBCC, 0x0000072D, 0x82000060, 
0x40840000, 0x00002A80, 0x00000006, 0x02000600, 0x80AC8628, 0x00000000, 0x00000000, 0x9BBCCCC8, 
0xCCCCBC7B, 0xCC8AB7C7, 0xC8B8CCCC, 0xCCCCCC7C, 0x777797CC, 0x424822A5, 0x25117324, 0xCCAB68A7, 
0xAC7A96CC, 0x12000917, 0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 0x00AA0000, 0x00000000, 
0x00000000, 0x00000000, 0xCCAA79B4, 0x2295CBCC, 0x26001000, 0x73C8CCAC, 0xC8CCCCCA, 0x11212242, 
0xC9CCCCBC, 0x10002076, 0x00000001, 0x25121101, 0x00000703, 0x0084AC62, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x222222B2, 0xCBAB2622, 0xCA5932C2, 
0x1141C8CA, 0xC73711C1, 0x11111132, 0x63B99ACA, 0x11111121, 0x23121111, 0xCCBB5A33, 0x0C000540, 
0xC8000080, 0x40C40C0A, 0x00000026, 0x00000000, 0x00000000, 0x000000CC, 0x00000000, 0x00000000, 
0x221111B0, 0xCC8C2422, 0xCCAC2600, 0x001084CC, 0xCC8C88C4, 0x21A687AB, 0x00000032, 0x00000000, 
0xCCAB1600, 0x222294CC, 0x12000D41, 0x00000080, 0x00000000, 0x04020600, 0x006CCCA8, 0x08000000, 
0x0000CC00, 0x00000000, 0x00000000, 0xCCBC99C9, 0x9999A99C, 0xCCAB9AC5, 0x999999CC, 0xC9581100, 
0x7473CCC9, 0xCABC6AC7, 0xBCBBBCAB, 0x01002285, 0x03001011, 0x00800F12, 0x82000040, 0x00888000, 
0x0600C0A0, 0x00000050, 0x00004400, 0x00000000, 0x00000000, 0x00000000, 0xBBCB9CC9, 0x99A9B999, 
0x896745C3, 0xB999ACAC, 0xCA6A22C2, 0x22113363, 0xB6CBCCCC, 0x86242232, 0x22222233, 0x46343333, 
0x01000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00000000, 0xCC9C99C9, 0x999999A9, 0x896745C3, 0x9999B9CC, 0xC85822C2, 0x22222242, 0x99BBBBC8, 
0xB89AAA88, 0xCC596565, 0x6775A8CB, 0x1200050B, 0xC2000060, 0x20C60C2A, 0x00000008, 0x00000000, 
0x00000044, 0x00460068, 0x00000064, 0x00000000, 0xBCBBBBCB, 0xBBBBCBCC, 0x896745C3, 0x99CACC9B, 
0xCCCCCC49, 0x2222739B, 0x00001072, 0x10000000, 0x5B222201, 0x73CCCCCC, 0x12000918, 0x00000020, 
0x00000000, 0x04000400, 0x000220C4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xBA4822B0, 
0x22A6CCCC, 0x04000000, 0x42C8CC8C, 0xC86A2242, 0x22222262, 0xCCCCAB75, 0x20222273, 0x00000000, 
0x02000000, 0x00000703, 0x0084AC62, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x222222B2, 0xCBCC7B23, 0xBC370000, 0x0040C8CC, 0xC7370000, 0x00000031, 
0x012222C4, 0x22220121, 0x12000010, 0xC9CCCC49, 0x1200050B, 0xC2000060, 0x20C60C2A, 0x00000008, 
0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00000000, 0x000000B0, 0xCBCC7B13, 0xCBCC7B03, 
0x000052C9, 0xCAAC4842, 0x22222262, 0x00000010, 0x00000000, 0xCCCC4812, 0x001052CA, 0x12000D18, 
0x00000020, 0x00000000, 0x0A000A00, 0x002882CA, 0x02440000, 0x00202200, 0x00000002, 0x00000000, 
0xCC9999C9, 0x9999B9C9, 0x8C6745C3, 0x999999CC, 0xC8482242, 0x22222262, 0xC8CC9CC8, 0x10120042, 
0x00000002, 0x13000000, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00000000, 0xCCCC9CC9, 0x99999999, 0x8B6745C3, 0x9999C9CC, 0xC8482242, 
0x22222262, 0x21141162, 0x22111111, 0xCC9B2522, 0x6344B7CC, 0x1200050B, 0xC2000060, 0x20C60C2A, 
0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00000000, 0xBBBBBBCB, 0xCBCCBCBB, 
0x8A6745C3, 0x9999C9CC, 0xCCAB0500, 0x00001063, 0x00000000, 0x00000000, 0xCC9C1400, 0x000051CA, 
0x12000D18, 0x00000020, 0x00000000, 0x04000400, 0x000220C4, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xCCBB8935, 0x222293CC, 0xC8CC8C04, 0x00000040, 0xC6060000, 0x00000031, 0xCC390000, 
0x000093CC, 0x00000000, 0x00000000, 0x0E000704, 0x00C42860, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCBCCBCC8, 0x22225289, 0xCCCC8CC4, 0x000030A7, 
0xC6060000, 0x00000031, 0x00000000, 0x20251000, 0xCCAC1500, 0x002065C8, 0x1200050B, 0xC2000060, 
0x20C60C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00000000, 0xCCCCACC7, 
0x5854A7CC, 0xCCCC8CC4, 0x000062CA, 0xCCCC6C00, 0x000070C9, 0x38000031, 0x41C7CCBC, 0x37010000, 
0xB6CCCCBB, 0x12000918, 0x00000020, 0x00000000, 0x0A000A00, 0x002882CA, 0x02440000, 0x00202200, 
0x00000002, 0x00000000, 0xABCCBCC9, 0xB9CCCBCC, 0x896745C3, 0x99C99C99, 0xC6060000, 0x00000031, 
0x72BBCCCC, 0x00000000, 0x00000000, 0x59550200, 0x04000701, 0x022CC64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0x999999C9, 0xB9BBBB9C, 0x896745C3, 
0x99C9CC99, 0xC6060000, 0x00000031, 0x46431241, 0xBACCAB67, 0x27002085, 0xA7CCCC9B, 0x007A2F0A, 
0x08080A0C, 0x0A070909, 0x00000B0A, 0x00000000, 0x00000000, 0x00020000, 0x00000000, 0x00000000, 
0xC4C0C0C0, 0xC0C4C2C0, 0x0000C0C0, 0x00000000, 0x35787878, 0x78787878, 0x00007878, 0x00000000, 
0xCE575757, 0x57575757, 0x00005757, 0x00000000, 0x0080071F, 0x00000020, 0x20000000, 0xA0000800, 
0xAC00800A, 0x44000000, 0x00004400, 0x00000000, 0x00000000, 0xCCCCBCCB, 0xCCBCBBBB, 0xBBAB9BC5, 
0xCBBCABBC, 0xCCBB87CC, 0xCC78CCCC, 0xCCCCCCCC, 0xB9BBCCCC, 0x22224287, 0x49232222, 0x12000F46, 
0xA6000040, 0x00A0C82C, 0xC0808600, 0x00000000, 0x00000000, 0x00000002, 0x200A0000, 0x00002000, 
0xBBBBBBCB, 0xCBBBCBBC, 0x896745C3, 0x9999CCCC, 0xC9487608, 0xAC649C96, 0x000073CC, 0x00000000, 
0x77440200, 0xCCBCBBAB, 0x00000F30, 0x80000060, 0x00800000, 0x00000000, 0x00000000, 0x00000040, 
0x08000028, 0x0000009A, 0x00B00000, 0x7B2522B2, 0x2274AACC, 0xCC4811C1, 0x1151C9CC, 0xCCBBA8CB, 
0xA6142284, 0x11111121, 0x12111111, 0xCCCCAB25, 0x1131B9CB, 0x00000733, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000C00, 0x00000000, 0xCBCC6AB2, 0x00000073, 
0xCCBC3700, 0x000084CC, 0x00000000, 0x9C030000, 0x00000052, 0x00000000, 0xCCCC8B14, 0x222275B9, 
0x00000F2D, 0x82000060, 0x40840000, 0x00002A80, 0x00000006, 0x07000600, 0x80A98628, 0x00000000, 
0x00000000, 0x88B9CCBC, 0x11111151, 0xBCACBCC7, 0x2263BACC, 0xCA9CBAC7, 0x222242C8, 0x1131A7CC, 
0x11111111, 0x11111111, 0xCCBB3711, 0x00000F07, 0x4C000060, 0x00004024, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBCCB, 0xBBCCCBCB, 
0xCCCCCCCC, 0xCCCCCCCC, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x0E000F17, 0x00000040, 
0x00000000, 0x0CC00400, 0x00000040, 0x00440000, 0x00000000, 0x00000000, 0x00000000, 0xCCBC99C9, 
0x99999ACC, 0x897745C3, 0x99A9CCBC, 0xC96A9506, 0x00000073, 0x223374C9, 0xBBCC9C35, 0x00000072, 
0x24220200, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 
0x00000000, 0x00000000, 0xBBBBBB9B, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x06000704, 0x00C42860, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCBC9AC9, 0x99999BCB, 0x898745C3, 
0x99A9CCAC, 0xC8380000, 0x00000040, 0x64A9CBCC, 0x02000022, 0x02000021, 0xAC784435, 0x0080010B, 
0xCC000060, 0x00000C0C, 0x80000008, 0x8C000000, 0x00000000, 0x00000000, 0x00000020, 0x00000000, 
0xCCCCCCC9, 0x999999CC, 0xC9C8C9C8, 0x9999C9CC, 0xCBCACCCC, 0x68132184, 0x31A7ABCB, 0x36111111, 
0xAA353342, 0xB9BBCC9C, 0x08000746, 0x86000040, 0x0080C60C, 0xCC808600, 0x06000064, 0x00000000, 
0x00000000, 0x000A0000, 0x00000000, 0xCCCC9BC9, 0x99999AB9, 0xBC9A47C3, 0xA9C9CCBB, 0xC8BBA707, 
0x37102556, 0x6476CBCC, 0x36021033, 0x11316588, 0xCC8A5744, 0x01000701, 0x022CC64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xCCAC99C9, 0x999AAACC, 
0x896745C3, 0x9999CC9C, 0xC8A82600, 0x00000040, 0x4396B9CC, 0xC8AC8B35, 0x00002342, 0x8B143114, 
0x0080071F, 0x00000020, 0x20000000, 0xA0000800, 0xAC00800A, 0x44000000, 0x00004400, 0x00000000, 
0x00000000, 0xCCCCBBCB, 0xCCBCBBBB, 0xBBAB8BC5, 0xBBBCABB9, 0xCBBB87CC, 0xCC78CCCC, 0xCCCCCCCC, 
0xA9BBCCCC, 0x22224287, 0x49232222, 0x00000736, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xC0020000, 0x00002000, 0xCCCC68B2, 0x22222296, 0xCCCC7803, 0x002296CC, 
0xC8581200, 0x22221052, 0x1173CBCC, 0x49021033, 0x1011A5CC, 0xCC8A3612, 0x10000F09, 0x4C000060, 
0x0040040C, 0x00000000, 0x00000000, 0x00004460, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBCB, 
0xCCBBCBBC, 0x896745C3, 0x99A9CCBC, 0x76458408, 0xACA6AC68, 0x001085CC, 0x00000000, 0x77440200, 
0xCCBCBBAB, 0x00000F30, 0x80000060, 0x00800000, 0x00000000, 0x00000000, 0x00400040, 0x08008228, 
0x0000009A, 0x00A00000, 0x7B4823B2, 0xA656A6CC, 0xCC4811C1, 0x1151C9CC, 0xCC8BC8CC, 0x462262C9, 
0x11111121, 0x12111111, 0xCCCCAC36, 0x111174CA, 0x00000733, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000C00, 0x00000008, 0xCBCC8CB4, 0x00004287, 0xCCAC2600, 
0x0020A6CC, 0x00000000, 0x9C036824, 0x00000052, 0x00000000, 0xCCCC9B15, 0x663467A8, 0x02000F2D, 
0x82000060, 0x40840000, 0x00002A80, 0x00000009, 0x07000600, 0x80A98628, 0x00000000, 0x00000000, 
0x62B8CCBC, 0x22222222, 0xBCCC9C86, 0x4286CBCC, 0xCACCAB56, 0x22114287, 0x97AA98CB, 0x00000053, 
0x00000000, 0xCCBC6A24, 0x00000F07, 0x4C000060, 0x00004024, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00070000, 0xB73722B2, 0xC8CC9C6A, 0x3333A6C6, 0x9CCCAB36, 0xCCCCC8C8, 
0x4843C888, 0x222222B3, 0x22222222, 0x22222222, 0xBACC6B23, 0x0E000F17, 0x00000040, 0x00008000, 
0x0CC04400, 0x00000040, 0x00440000, 0x00000000, 0x00000000, 0x00000000, 0xBC9C99C9, 0xCCCCCCCC, 
0x896745C3, 0x99C9CCBC, 0xC9989907, 0x00000051, 0xBBCCCCCC, 0x123363A8, 0x10000000, 0x36221200, 
0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 
0x00000000, 0x99B9BCC9, 0xCCAAB99B, 0x896757C3, 0xCCABBA99, 0xC9696666, 0x66666676, 0x95CCCCCC, 
0x78573332, 0x22328687, 0xBB9A2522, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xCCCC99C9, 0xCCAABACC, 0x896745C3, 0x99C9CC9C, 
0xC8380000, 0x00000040, 0x52A9CBCC, 0x02000120, 0x00000021, 0xAC681213, 0x12000F46, 0x86000040, 
0x0080C60C, 0xCC808600, 0x06000064, 0x00000000, 0x00000000, 0x200A0000, 0x00002000, 0xBBBCBBCB, 
0xCBCBCCBC, 0x9A6759C3, 0xCAACBCCC, 0xCABC979B, 0xCC486299, 0x2242C9CC, 0x11112122, 0xCCAC2522, 
0xBC8B87BA, 0x00000736, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xC0020000, 0x00002000, 0xBBBBAAB9, 0x888888B9, 0xCBCCBBCB, 0xBBBBBBBB, 0xC85822C2, 0x22222262, 
0x1173CBCC, 0x49021033, 0x1011A5CC, 0xCC8A3612, 0x0E000F30, 0x80000060, 0x00800000, 0x00000000, 
0x00000000, 0x00400040, 0x08008228, 0x0000009A, 0x00A00000, 0x7B9747C2, 0xBB89BBBC, 0xCA9A7BC3, 
0x1095BBCB, 0xCCAABA1B, 0x224199A6, 0x11111121, 0x12111111, 0xCCCCAC37, 0x2166A7CB, 0x00000F2D, 
0x82000060, 0x40840000, 0x00002A80, 0x00000006, 0x02000600, 0x80A98628, 0x00000000, 0x00000000, 
0x62B9CC8C, 0x00000000, 0xB8CACBC8, 0x44C8BABB, 0xCBAC99C9, 0xAB99BACB, 0x98CCCCCC, 0x55758788, 
0x57555555, 0xAA686599, 0x00000F07, 0x4C000060, 0x00004024, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xCBAAAAAA, 0xAACCABCC, 0x9A9999C9, 0xCC9C9999, 0xCCCCCC8A, 
0xCCCCA8CC, 0x76BACCCC, 0x00001032, 0x00000000, 0xCCBC6913, 0x0E000F17, 0x00000040, 0x00000000, 
0x0CC00400, 0x00000040, 0x00440000, 0x00000000, 0x00000000, 0x00000000, 0xAC9ACAC9, 0xCCACA9CB, 
0x896745C3, 0x99CACCBC, 0xCABC9B05, 0x222284BC, 0xCBBBCCCC, 0x22222252, 0x12111122, 0x89572222, 
0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 
0x00000000, 0x999999C9, 0xCCCCCCBC, 0x898888C8, 0xCC9C9999, 0xC0000000, 0x00000000, 0x51CACCCC, 
0x5A010000, 0x000051BA, 0xBCAA1500, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xCCCC99C9, 0xCCACBACC, 0x896745C3, 0x99CACC9C, 
0xC73700C0, 0x00000030, 0x95BACBCC, 0x22222222, 0x22222222, 0xBC9A7946, 0x0080071F, 0x00000020, 
0x20000000, 0xA0000800, 0xAC00800A, 0x44000000, 0x00004400, 0x00000000, 0x00000000, 0xBBCBBCCB, 
0xCCBBBBCC, 0x896745C3, 0xC9CCCC99, 0xCCAC4744, 0x4444C4CC, 0xCBCCBC7A, 0x33335497, 0x00001021, 
0x34120100, 0x12000509, 0xAC000060, 0x00A00A6C, 0x00000000, 0x00000000, 0x0000AA00, 0x00000002, 
0x00000022, 0x00000000, 0xBBBBBBCB, 0xCBBBCCCC, 0x8B6745C3, 0x9999CACC, 0xCC58730C, 0xBBA6CCCC, 
0x112122C2, 0x11111111, 0xAC482211, 0xA9CCCCCC, 0x00000733, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000C00, 0x00000000, 0xCCBC9A67, 0x314375B8, 0xCCBC8A56, 
0x7588B9CC, 0x88888888, 0xCCAA8888, 0x78675645, 0xBCAB9A89, 0xCCCCCCCC, 0x9899A9BB, 0x0A00072D, 
0x82000060, 0x40840000, 0x00002A80, 0x00000006, 0x02000600, 0x80AC8628, 0x00000000, 0x0000000C, 
0xCCCC9CC7, 0xCCCCACBB, 0xCCBC67C5, 0x6566A7CC, 0xCA6977CC, 0xAC97CCCB, 0xCABCCACC, 0xBCAB9A89, 
0xCCCCCCCC, 0xCBCCBCBB, 0x00000707, 0x4C000060, 0x00004024, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x55343343, 0xCCAB5943, 0xCCAC2600, 0x000040C8, 0x49000000, 
0x0015CCCC, 0x000052B8, 0x00000000, 0x14000000, 0xCCCCCCAC, 0x12000D41, 0x00000080, 0x00000000, 
0x04020600, 0x006CCCA8, 0x08000000, 0x0000CC00, 0x00000000, 0x00000000, 0xA9CCA9CA, 0x99CCCCCC, 
0xCCAB4723, 0x99A99BCC, 0xCC4800C0, 0x0073CBCC, 0xBAAA79C5, 0x99BBCCBC, 0x11111142, 0x11111111, 
0x00800F12, 0x82000040, 0x00888000, 0x0600C0A0, 0x00000050, 0x00004400, 0x00000000, 0x00000000, 
0x00000000, 0xB99CA9CB, 0x9B9999A9, 0x896745C3, 0x9BAACCBA, 0xC73711C1, 0x11111132, 0x75CA9CCA, 
0x22222242, 0x22222222, 0xAB572422, 0x01000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xC9BC99C9, 0x9C9999CC, 0x896745C3, 0x9999CCAC, 
0xC73722C3, 0x11111132, 0xA8CCCCCC, 0x34333284, 0x65352362, 0x47338458, 0x0080051F, 0x00000020, 
0x20000000, 0xA0000800, 0xAC00800A, 0x44000000, 0x00004400, 0x00000000, 0x00000000, 0xBBBBBCCB, 
0xCCBBBCBB, 0x896745C3, 0xCCBC9B9B, 0xCC9C25C2, 0x2274CCCC, 0xCCCC87AA, 0xA9BBCCCC, 0x22222252, 
0x33222222, 0x00000736, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x90020000, 0x00000000, 0xCCCC69B2, 0x33333396, 0xCCCC7BC3, 0x114298AC, 0xC85822C2, 0x33332263, 
0x1173CBCC, 0x49021033, 0x1011A5CC, 0xCC8A3612, 0x10000509, 0xAC000060, 0x00A00A6C, 0x00000000, 
0x00000000, 0x00000A00, 0x00000001, 0x00000021, 0x00000000, 0xBBBBBBCB, 0xCBBBCBBC, 0x896745C3, 
0x99A9CCBC, 0x25224203, 0xAC545933, 0x001084CC, 0x00000000, 0x89240100, 0xCCBCAA99, 0x00000530, 
0x20000060, 0x00200000, 0x00000000, 0x00000000, 0x00000000, 0x02002002, 0x00000094, 0x00A00000, 
0x9B3622B2, 0x2252B7CC, 0xCC4800C0, 0x0084CBCC, 0xB897CA1C, 0x22005252, 0x22222242, 0x22222222, 
0xCBCC7C23, 0x22227488, 0x00000733, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000C00, 0x00000000, 0xCBCC9CB5, 0x00000073, 0xCCBC3700, 0x001095CC, 0x00000000, 
0x9C030000, 0x00000052, 0x00000000, 0xCBCC9B04, 0x428598A9, 0x0000092D, 0x20000060, 0x00200000, 
0x00000420, 0x00000000, 0x07000000, 0x20492002, 0x00000000, 0x00000000, 0x2296CBBC, 0x11111111, 
0xBACCBCC7, 0x2222A6CC, 0xCA9C26C2, 0x222275CA, 0x112152CB, 0x11111111, 0x11111111, 0xCC8B1311, 
0x12000917, 0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 0x00AA0000, 0x00000000, 0x00000000, 
0x00000000, 0xCC9B99C9, 0x99A99ACC, 0x896745C3, 0x99B9CCAC, 0xC9B9BB0B, 0x00000051, 0xBBCCCCCC, 
0x11212294, 0x00000000, 0x58220210, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 
0x00004400, 0x00000000, 0x00000000, 0x00000000, 0xCB99C9CA, 0xCCC9CC99, 0x896745C3, 0xCCBC9A99, 
0xC96922C2, 0x22222262, 0xB8CC9CCA, 0x45242242, 0x22225354, 0x68552222, 0x02000701, 0x022CC64C, 
0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xCCCC99C9, 
0xCCAACBCC, 0x896745C3, 0x99C9CC9C, 0xC8590100, 0x00000040, 0x52A6CBCC, 0x02100000, 0x12000032, 
0xBC586544, 0x0080071F, 0x00000020, 0x20000000, 0xA0000800, 0xAC00800A, 0x44000000, 0x00004400, 
0x00000000, 0x00000000, 0xBBBBBBCB, 0xBCBBBBBC, 0x896745C3, 0x9C9C9B99, 0xCA8A35C3, 0x3364CCAC, 
0xCC8A7897, 0xBABBCCCC, 0x33445575, 0x33333333, 0x12000507, 0xAC000060, 0x0070008C, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xCBBCBBBC, 0x8B6745C3, 
0x9999CABC, 0xCA4722C2, 0xAC132262, 0x111132C7, 0x11111111, 0x59221211, 0xCCBCAA9A, 0x00000530, 
0x20000060, 0x00200000, 0x00000000, 0x00000000, 0x00000000, 0x02002002, 0x00000094, 0x00A00008, 
0x583333B3, 0x3354A7CC, 0xCC4800B0, 0x0040C8CC, 0xCC88A81B, 0xCC11BCBA, 0x11111121, 0x12111111, 
0xCCCCAC68, 0x111174CB, 0x0C000733, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000C40, 0x00800008, 0xCBCC48B2, 0x11426676, 0xCCAC26C1, 0x111173CA, 0x666614C1, 
0xAC131164, 0x11111152, 0x11111111, 0xCBCC6B13, 0x22326486, 0x0A000F15, 0x00000060, 0x00000000, 
0x44CC0200, 0x00002002, 0x00000000, 0x00004000, 0x00000000, 0x00000000, 0xCCCC99C9, 0x99999999, 
0xCBCC48C3, 0x9999B9CC, 0x63C9BCCC, 0x22222222, 0xBBCCCCCC, 0x222295BA, 0x22222222, 0x35222222, 
0x0A00072D, 0x82000060, 0x40840000, 0x00002A80, 0x00000006, 0x02000600, 0x80AB8628, 0x00000000, 
0x000B0000, 0xA6BBCBBC, 0x11111163, 0xBCCC9CC6, 0x32B7ABCA, 0xCABC9ACB, 0x33222262, 0x6344A6CC, 
0x11111111, 0x11646736, 0xCCAB3811, 0x00000735, 0x02000020, 0x00000020, 0x04420000, 0x00000000, 
0x00000000, 0x00000000, 0x800C0000, 0x00002000, 0x7B958ACC, 0xCC9C8CCC, 0x242222C2, 0xCCCCCC7B, 
0xCBCC8CC4, 0x22222273, 0x8545B6CC, 0x22222222, 0x22222222, 0x56A73622, 0x00800812, 0x82000040, 
0x0088B000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00000000, 0x99B9BCC9, 
0xCCAAB99B, 0x896758C3, 0xCCACC999, 0xC9696666, 0x66666676, 0x95CCCCCC, 0x78573332, 0x22328687, 
0xBB9A2522, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00000000, 0xCC9C99C9, 0x9C999999, 0x896745C3, 0xB9CBCABC, 0xC73722C2, 0x22222232, 
0x9477C8CC, 0x22222222, 0x22222232, 0x8C452222, 0x0080071F, 0x00000020, 0x20000000, 0xA0000800, 
0xAC00800A, 0x44000000, 0x00004400, 0x00000000, 0x00000000, 0xCBCCBCCB, 0xCCBBBBCC, 0x896745C3, 
0xC9CCCC99, 0xCCAC7BC4, 0x4484CCCC, 0xCBCCCCAC, 0x75BBCCBC, 0x22223333, 0x34222222, 0x00000736, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0020000, 0x00002000, 
0xCCBC6893, 0x44444496, 0xCCCC4800, 0x00629ACC, 0xC8582400, 0x65562065, 0x1173CBCC, 0x49021033, 
0x1011A5CC, 0xCC8A3612, 0x0A000507, 0xAC000060, 0x0070008C, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x999C99C9, 0x99CCC99C, 0x8A6745C3, 0x9999A9CC, 0xCC5843C6, 
0x9CA7CCCC, 0x112153CA, 0x11111111, 0x98372312, 0xCCAB8A88, 0x10000530, 0x20000060, 0x00200000, 
0x00000000, 0x00000000, 0x00000000, 0x02002002, 0x000000C4, 0x00C00000, 0x999C35B3, 0xA69CB7A8, 
0x693333C3, 0x3233A6CC, 0xCC888CCC, 0x22222284, 0x57443483, 0x44444454, 0xBA574444, 0x54C8CCAC, 
0x0000092B, 0x00000080, 0x00000000, 0x00000800, 0x000000A8, 0x44440000, 0x00A0AC00, 0x00000000, 
0x00000000, 0xCCCA9BC9, 0x999999CC, 0xCC9B56C3, 0x9999ABCB, 0xCCBB9B67, 0xBC76CCBB, 0xBCBB9ACB, 
0xA7BBCCCC, 0x55555565, 0x88575555, 0x00800812, 0x82000040, 0x0088B000, 0x0000C0A0, 0x00000000, 
0x00004400, 0x00000000, 0x00000000, 0x00000000, 0xBABCCCCC, 0xCCAABB9B, 0x896758C3, 0xCCCCCC9C, 
0xC9696666, 0x66666676, 0xA8CCCCCC, 0x78573372, 0x22328687, 0xBC9A2522, 0x02000701, 0x022CC64C, 
0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xCCCC9BC9, 
0xA99ACACC, 0x896745C3, 0x99C9CCBC, 0xC627631B, 0x11111132, 0xA6CCCCCC, 0x84AA5723, 0x759A3841, 
0xBC581322, 0x0080071F, 0x00000020, 0x20000000, 0xA0000800, 0xAC00800A, 0x44000000, 0x00004400, 
0x00000000, 0x00000000, 0xCBCCBBCB, 0xCCBBBBBB, 0x896745C3, 0xB9ACCA99, 0xCAAC7BC5, 0x4484CCCC, 
0xCBCCCCAC, 0x75BBCCBC, 0x22223333, 0x34222222, 0x02000736, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xC0020000, 0x00002000, 0xCCBC6893, 0x44444496, 0xCCCC4800, 
0x00629ACC, 0xC8582400, 0x65562065, 0x1173CBCC, 0x49021033, 0x1011A5CC, 0xCC8A3612, 0x0E000109, 
0xAC000060, 0x00A00A6C, 0x00000000, 0x00000000, 0x00006A60, 0x00202046, 0x00000020, 0x00000000, 
0xBBBBBBCB, 0xCCBBCBBC, 0xBB7B9BC5, 0x9999ABCC, 0xCB58840C, 0x22A6CC8A, 0x112122C3, 0x11111111, 
0xAA8A3712, 0xCCCCCCCB, 0x00000F30, 0x80000060, 0x00800000, 0x00000000, 0x00000000, 0x00400040, 
0x08008228, 0x0000009A, 0x00B00000, 0xCCBCAB99, 0x768798BA, 0xCCBCAB89, 0x98AABACC, 0xAAAAAAAA, 
0xCCBBAAAA, 0x9A998988, 0xBCBBABAA, 0xCCCCCCCC, 0xAAAABABB, 0x00000733, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000C00, 0x00000000, 0xCBCCAC87, 0x00000073, 
0xCCBC3700, 0x000084CC, 0x00000000, 0xCC000000, 0x00000052, 0x00000000, 0xCCCC8B04, 0x968898B9, 
0x1200091C, 0x00000060, 0x00000000, 0x00000000, 0x00C04800, 0x00000000, 0x00004900, 0x00000000, 
0x00000000, 0xCACCCCCA, 0x22222264, 0xCCCCBCC7, 0x222262CA, 0xCC69BAC7, 0x3786CCCC, 0xCCCC8CC4, 
0x97BBCCCC, 0x22222232, 0x22222222, 0x08000607, 0xAC000060, 0x0040A08A, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCC8C24B2, 0x95CCCCCC, 0x8C4822C2, 0x88CCCC8C, 
0xCCCCBCCC, 0x2252C999, 0x224268C6, 0x22222222, 0x23222222, 0xCBCCCC6B, 0x0A000943, 0x00000040, 
0x00000000, 0x0CC40C00, 0x000200C6, 0x22000000, 0x00006200, 0x00000000, 0x00000000, 0x999999C9, 
0xA9CCCC99, 0x896745C3, 0x99CACC9B, 0xCABBBBCB, 0x11112162, 0xB7CCCCCC, 0x22225653, 0x12111111, 
0x36222222, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 
0x00000000, 0x00000000, 0x99B9BCC9, 0xCCAAB99B, 0x896758C3, 0xCCACC999, 0xC9696666, 0x66666676, 
0x95CCCCCC, 0x78573332, 0x22328687, 0xBB9A2522, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0x999C99C9, 0xC99CCC9B, 0x896745C3, 
0xB9C9CC9C, 0xC73711C1, 0x11111132, 0x989ACACC, 0x12111141, 0x11111122, 0xAC982412, 0x0280051F, 
0x00000020, 0x20000000, 0xA0000800, 0xAC00800A, 0x44000000, 0x00004400, 0x00000000, 0x00000000, 
0xCCCCCCCB, 0xBBBBBBBB, 0x897777C7, 0xCC9C9999, 0xCCBB4744, 0x4444CCCC, 0xCCCCBC9A, 0xA9BBCCCC, 
0x44556677, 0x43444444, 0x12000506, 0xCA000060, 0x00C20000, 0x00000000, 0x00000000, 0x00000680, 
0x0000001A, 0x00000000, 0x00000000, 0xCBCCCCCB, 0xBBBBBBBB, 0x8A6745C3, 0x9999BCCC, 0xC8C88ACC, 
0x22229545, 0x555555C5, 0x33333344, 0xBC575545, 0xA7BBBBCB, 0x12000514, 0x00000060, 0x00000000, 
0x00C00A00, 0x00000004, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCC48C2, 0x2286CC8C, 
0x442322C2, 0xCACC8B55, 0xC88C24C2, 0x2242B747, 0x65C8CCCC, 0x33338556, 0x55555545, 0x58354355, 
0x12000506, 0xCA000060, 0x00C20000, 0x00000000, 0x00000000, 0x00000680, 0x0000001A, 0x00000000, 
0x00000000, 0x222222C2, 0xCC482222, 0xCC7B68C3, 0x444485CA, 0xCC6844C4, 0x5552ABBB, 0x222242C6, 
0x22222222, 0xCC9C5635, 0x9A88AACB, 0x00000733, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000C00, 0x00000000, 0xCBCCAC87, 0x00000073, 0xCCBC3700, 0x000084CC, 
0x00000000, 0xCC000000, 0x00000052, 0x00000000, 0xCCCC8B04, 0x968898B9, 0x12000919, 0x00000000, 
0x00000000, 0x00000C00, 0x0060C00C, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x42C8CCC8, 
0x22222222, 0xCCCC7AC4, 0x225454A7, 0xCC4811C1, 0x1141C88C, 0xBCBCCCCC, 0x5575C9CC, 0x33333343, 
0x56353355, 0x0A000807, 0xAC000060, 0x00400080, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x8C848CB4, 0xC8CCCC88, 0x222222C2, 0xCCCC9C25, 0xC8C8CCCB, 0x22222242, 
0x555566C6, 0x33333344, 0x33333333, 0xBABCAB69, 0x12000917, 0x00000040, 0x00000000, 0x0CC00400, 
0x000000A6, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x999999C9, 0xCCCC9B99, 0x896745C3, 
0x99CACC9B, 0xCABCBBC9, 0x44444264, 0xB7CCCCCC, 0x33335655, 0x22222222, 0x56332222, 0x00800812, 
0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00000000, 
0x99B9BCC9, 0xCCCCCCBC, 0x898888C8, 0xCCACC999, 0xC9696666, 0x66666676, 0x95CCCCCC, 0x7A573332, 
0x223286BA, 0xBCAA2522, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00000000, 0xCCCC99C9, 0xA99ACACC, 0x896745C3, 0x99CCCC9C, 0xC6060000, 
0x00000031, 0x97BACBCC, 0x83142174, 0x14111141, 0xCC8A4675, 0x0080071F, 0x00000020, 0x20000000, 
0xA0000800, 0xAC00800A, 0x44000000, 0x00004400, 0x00000000, 0x00000000, 0xCCCCBBCB, 0xCCBCBBBB, 
0xBBAB8BC5, 0xBCBCABB9, 0xCBBB87CC, 0xCC78CCCC, 0xCCCCCCCC, 0xA9BBCCCC, 0x22224387, 0x49232222, 
0x10000F09, 0x4C000060, 0x0040048C, 0x00000000, 0x00000000, 0x00004460, 0x00000000, 0x00000000, 
0x00000000, 0xBBBBBBCB, 0xCCBBCBBC, 0x9B6745C3, 0x99A9CCBC, 0xC958840A, 0xBC86CB79, 0x111184CC, 
0x11111111, 0xAA361111, 0xCCBCBBAA, 0x00000F30, 0x80000060, 0x00800000, 0x00000000, 0x00000000, 
0x00400040, 0x08008228, 0x0000009A, 0x00A00000, 0x692322B2, 0x2264A8CC, 0xCC4800C0, 0x0040C8CC, 
0xCC8AAACB, 0xAC227897, 0x11111121, 0x12111111, 0xCCCC9B57, 0x113286CB, 0x00000733, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000C00, 0x00000000, 0xCBCC6AB3, 
0x11111173, 0xCCBC59C1, 0x111184CC, 0x111111C1, 0xAC131111, 0x11111152, 0x11111111, 0xCCCC7B13, 
0x534476A8, 0x00000F2D, 0x82000060, 0x40840000, 0x00002A80, 0x00000006, 0x07000600, 0x80A98628, 
0x00000000, 0x00000000, 0x4296CBBC, 0x11111111, 0xBCCCBCC7, 0x22639AAC, 0xCAACBAC7, 0x55223264, 
0x003196CC, 0x00000000, 0x00000000, 0xCC9B2500, 0x00000736, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xC0020000, 0x00002000, 0xCCBC6893, 0x44444496, 0xCCCC4800, 
0x00629ACC, 0xC8582400, 0x65562065, 0x1173CBCC, 0x49021033, 0x1011A5CC, 0xCC8A3612, 0x00000F07, 
0x4C000060, 0x00004024, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xCCBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0x0E000F17, 0x00000040, 0x00000000, 0x0CC00400, 0x00000040, 0x00440000, 
0x00000000, 0x00000000, 0x00000000, 0xCCC9B9C9, 0x999C99CC, 0x896745C3, 0x99C9CBBC, 0xCA6AA607, 
0x00001073, 0xBB9C99C9, 0xBACCABBA, 0x11111163, 0x23222211, 0x00800812, 0x82000040, 0x00888000, 
0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00000000, 0x99B9BCC9, 0xCCAAB99B, 
0x896758C3, 0xCCACC999, 0xC9696666, 0x66666676, 0x95CCCCCC, 0x78573332, 0x22328687, 0xBB9A2522, 
0x03000736, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0020000, 
0x00002000, 0xCCCC69B2, 0x22242485, 0xCCCC48C2, 0x2242B8CC, 0xC85822C2, 0x22222262, 0x1173CBCC, 
0x49021033, 0x1011A5CC, 0xCC8A3612, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xCCCC99C9, 0xCCABBACC, 0x896745C3, 0x99A9CCBC, 
0xC73700C0, 0x00000031, 0x5685A8CC, 0xBB99AB77, 0x222262CB, 0x7C656824, 0x007B9F01, 0x00000007, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x0000007D, 0x00000000, 0x00000000, 0x00000000, 0x000000CF, 
0x00000000, 0x00000000, 0x00000000, 0x12800111, 0x00000060, 0x864A0B00, 0x0000000C, 0x00000000, 
0x000000A0, 0x00000000, 0x00000000, 0x00000000, 0xAB8967C6, 0x98AABBCC, 0x691211C1, 0x3184CCCC, 
0xC6CBCC0C, 0x00AA8A8A, 0x00000000, 0x9A470200, 0xCCBCAABB, 0x2074A9CB, 0x00000F32, 0x00000060, 
0x00000000, 0x00000000, 0x00000900, 0x00000000, 0x00080000, 0x00007000, 0x00000000, 0xBC9A8857, 
0x000061CB, 0xB8CCCC08, 0x00000042, 0xCBABAA09, 0x66B0BBA8, 0x24000000, 0x36888857, 0xCCAB6844, 
0x87A9CBCC, 0x0500072C, 0x00000060, 0x00BB0000, 0x00000000, 0x0080800B, 0xAC000000, 0xB0CCAAAA, 
0x00000000, 0x0000000C, 0xCABC8A36, 0x888898BA, 0xAACBCCBA, 0x000062A8, 0xCA88AAAA, 0xCA00ABCA, 
0xA8BACBCC, 0x00000053, 0x35110000, 0xCCCCBB8A, 0x00000707, 0x0B000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x07000000, 0x00000000, 0x00000009, 0xCABC6902, 0xAB284375, 0xCACCAC37, 
0x0084AAAB, 0xCA88AAAA, 0xCA00AAAA, 0x00003186, 0x00000000, 0x68350100, 0xB9CCCCAB, 0x0000092D, 
0x00000060, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00080000, 0x0000A040, 0x00000000, 
0x98BACC8C, 0x00003064, 0xBACCBC79, 0x00214398, 0xCCCCBB05, 0x0A00C5CC, 0x96CCCCCC, 0x00000020, 
0x88886803, 0xCC8B8888, 0x12800B17, 0x00000040, 0x00000000, 0x0CC60A00, 0x000000B6, 0x00A40000, 
0x00000000, 0x00000000, 0x00000000, 0xBB8A66C6, 0x88CAABBB, 0x9C1511C1, 0x71BACCCC, 0xC9797777, 
0x77777787, 0xCCCCCCCC, 0x107397CA, 0x00000000, 0x7A130000, 0x0A000701, 0x0002C64C, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCCBCC8, 0xB888A8CB, 
0x9C1511C1, 0x31B7CCCC, 0xC9797777, 0x77777777, 0x325476B8, 0x45230110, 0x68341260, 0xCCCCAB9A, 
0x007C9F03, 0x00030406, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00202020, 0x00000000, 0x00000000, 0x00000000, 0x007D7D7D, 0x00000000, 0x00000000, 
0x00000000, 0x00CFCFCF, 0x00000000, 0x00000000, 0x00000000, 0x1280010B, 0x00000060, 0x00C00C00, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCBAB89C7, 0x436587A9, 
0xAB8967C5, 0x65A8CBCC, 0xCB8B0000, 0x00000060, 0x00000000, 0x00000000, 0xAB890700, 0x0087A9CB, 
0x0C800718, 0x00000020, 0x00000000, 0x00000000, 0x000000CA, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xCBCC8AC7, 0x436587A9, 0xAB8967C5, 0x6587BACC, 0xCA8A0000, 0x00000080, 0x00000000, 
0x00000000, 0xAB890700, 0x0087A9CB, 0x03000702, 0x0000CA68, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00040000, 0x00000000, 0x9A684523, 0x87B9CCAB, 0xCBAB8967, 0x436587A9, 
0xC0000000, 0x00000000, 0x23000000, 0x23012053, 0xBC896745, 0x6687A8CC, 0x1280090B, 0x00000060, 
0x00C00C00, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x67452301, 
0xCCCCAB89, 0xAB9A6745, 0x6587A9CB, 0xCC8A0000, 0x00000080, 0x00000000, 0x00000000, 0xAB890700, 
0x0087A9CB, 0x0C800F18, 0x00000020, 0x00000000, 0x00000000, 0x000000C4, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x785634C2, 0xA8CBBC9A, 0xAB8967C5, 0x6587B9CC, 0xCA8A0000, 0x00000080, 
0xCCBC9AC8, 0x325497BA, 0x00000010, 0x56341200, 0x0A000701, 0x0002C14C, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xBC9A78C6, 0x5487AABA, 0x674523C1, 
0xA9CBAB89, 0xC6060000, 0x00000031, 0x00000000, 0x00000000, 0xAB890700, 0x0087A9CB, 0x12800334, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00C00000, 0x0000B000, 
0x563412C0, 0xBACCAC78, 0xCBAB89C7, 0x436587A9, 0xC0000000, 0x00000000, 0x00002143, 0x23010000, 
0xAB896745, 0x6587A9CB, 0x12000F0B, 0xC0000060, 0x00C00C04, 0x00000004, 0x00000000, 0x00000000, 
0x00000002, 0x00000000, 0x00400000, 0xBC9A78B6, 0xA8AAAAAA, 0x674523B1, 0xA9CBAB89, 0xCBCC5855, 
0x55555597, 0x00002143, 0x23010000, 0xAB896745, 0x6587A9CB, 0x12800718, 0x00000020, 0x00000000, 
0x04000400, 0x000220C4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x674523C1, 0xA9CBAB89, 
0xAB8967C5, 0x6587A9CB, 0xCAAA46C2, 0x00004286, 0xBABBBCBA, 0x10427698, 0x70777777, 0x89563412, 
0x0A000701, 0x0002C14C, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x563412C0, 0xBABC9A78, 0x9A7856C4, 0x7698BABC, 0xC6060000, 0x00000031, 0x33111141, 
0x44133153, 0xBC996745, 0x6676C9CC, 0x12000F0B, 0x00000060, 0x00000B00, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xBC9A78B6, 0xA8AAAAAA, 0x674523B1, 0xA9CBAB89, 
0xCBCC5855, 0x55555597, 0x00002143, 0x23010000, 0xAB896745, 0x6587A9CB, 0x12800718, 0x00000020, 
0x00000000, 0x00000000, 0x000000B0, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x674523C1, 
0xA9CBAB8A, 0xAB8967C5, 0x6587A9CB, 0xCAAA46C2, 0x00004286, 0xBABBBCAA, 0x10427698, 0x70777777, 
0x89563412, 0x0A000701, 0x0002B14B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x783412C0, 0xBABC9A88, 0x9A7856C4, 0x7698BABC, 0xC6060000, 0x00000031, 
0x33111141, 0x44133153, 0xBC996745, 0x6676C9CC, 0x007D9F01, 0x00000007, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x0000007D, 0x00000000, 0x00000000, 0x00000000, 0x000000CF, 0x00000000, 0x00000000, 
0x00000000, 0x12000B09, 0xAC000060, 0x00A00B6C, 0x00000003, 0x00000000, 0x0000AA00, 0x00000000, 
0x00000000, 0x00000000, 0x9A7866C6, 0xBBBBBBAB, 0xBC3700C0, 0x5298CACC, 0xBC9A9909, 0xABB0CCCC, 
0x0063B9CC, 0x00000000, 0xAB581300, 0xCCBCAABB, 0x00000533, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000B80, 0x00900000, 0xAB782232, 0xBB9BA9CC, 0xCC9B3601, 
0x2085BACC, 0xCCBC7906, 0x6B00A8CB, 0x00000050, 0x00000000, 0xCC480100, 0x87A9CBCC, 0x00000114, 
0x00000020, 0x00000000, 0x00B00800, 0x00000000, 0x00000000, 0x770A0000, 0x00000000, 0x00000009, 
0xCABCAA6A, 0x55556676, 0xBC8A1400, 0x4298BACC, 0xC8BBAAAA, 0x00A9AA8A, 0x8888BBBB, 0x88888888, 
0xCCCCBC9A, 0x9B89BACC, 0x05000F31, 0xAB000060, 0x00B00000, 0x00000000, 0x00000000, 0x00000080, 
0xAA005577, 0x000000BC, 0x0000000C, 0xCCAC4801, 0x8B7698BA, 0xAAAA9A58, 0x5487CBCC, 0xC888AAAA, 
0x83AAAA8C, 0x00000000, 0x8A461200, 0xBACCCCBC, 0x5186AAAA, 0x00000930, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000A080, 0x00000000, 0x85A9CBCC, 0x00000010, 
0x9B573400, 0x4375B9CC, 0xCCBC7935, 0x00B0A9CB, 0x13000060, 0xBCAB9A57, 0x88A9BBCC, 0x66768888, 
0x12800D1D, 0x00000060, 0x00000000, 0x02000200, 0x008CACB2, 0xAA000000, 0x00888700, 0x00000000, 
0x00000000, 0xCCCCBCC8, 0x8888B9CC, 0x470062C2, 0x0084CCBC, 0xC8484444, 0x44444465, 0xCACCCCCC, 
0x44452262, 0x00000052, 0xAB790300, 0x0A000701, 0x0002C34C, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCCACC8, 0x888898BB, 0x470062C2, 0x40C8CCBC, 
0xC7373333, 0x33333354, 0x00000000, 0xCCAB6813, 0x97BACCCC, 0x00103254, 0x007E9F02, 0x00000502, 
0x00000000, 0x00000000, 0x00000000, 0x00000102, 0x00000000, 0x00000000, 0x00000000, 0x00002020, 
0x00000000, 0x00000000, 0x00000000, 0x00008F8F, 0x00000000, 0x00000000, 0x00000000, 0x00002424, 
0x00000000, 0x00000000, 0x00000000, 0x12800F3A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xA0400000, 0x0000C000, 0xCBCCBCCB, 0x21115298, 0xBBCBCCC8, 0x75BABCAA, 
0xC6060000, 0x00000031, 0x0031C8CC, 0x68020000, 0x003186CC, 0xAC270000, 0x07000701, 0x0002C14C, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xBCAB6AC3, 
0x85B8CCCC, 0x000040C0, 0xA7CC8C04, 0xC6060000, 0x00000031, 0x1183CBCC, 0x49012033, 0x1031A5CC, 
0xCC8A3612, 0x0080051F, 0x00000020, 0x00000000, 0x00000000, 0x0A000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xBBBBBBCB, 0xCCCCCCCC, 0x290000C0, 0xCACCCC9C, 0xCACCCC0C, 0x3560999A, 
0xCCCCBC68, 0x5286CCCC, 0x00222222, 0x13110000, 0x12000707, 0x0C000040, 0x0000000C, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xAACBCCCB, 0x2053C7CC, 0x6666C8C8, 
0xCCCCCC8C, 0xCCAC89B4, 0xB88B64A8, 0x41A7CBCC, 0x79020000, 0x0031A7CC, 0xCCBC7A35, 0x12000A17, 
0x00000040, 0x00000000, 0x0CC00000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xBC8BC8C8, 0xCCCCCCCC, 0x666676C6, 0xCCCCCC8C, 0xC0CA00C0, 0x00000000, 0xB8CCCCCC, 0x77777787, 
0x77777777, 0xBC9A7877, 0x00800712, 0x00000040, 0x00000000, 0x0000A000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x9C9999C9, 0xA9BACCCC, 0x040000C0, 0xB8CCCC7B, 0xC6060000, 
0x00000031, 0xCCCCCCCC, 0x000072CB, 0x42330100, 0xBBAB5811, 0x12000701, 0x0002C14C, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCC78C8CB, 0xCCCCCCCC, 
0x666696C6, 0xCCCC8C66, 0xC6060000, 0x00000031, 0xBACCCCCC, 0x68445597, 0x333386CC, 0xCCAC7846, 
0x01A30F09, 0x0C090909, 0x0C090A0B, 0x00000008, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x22222220, 0x24242022, 0x00000020, 0x00000000, 0x8D8D8D8D, 0x8D8D8D8D, 0x0000008D, 
0x00000000, 0xCECECECE, 0xCECECECE, 0x000000CE, 0x00000000, 0x0080051F, 0x00000020, 0x00000200, 
0x40000200, 0x4C002004, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCBBCBBCB, 0xCCCCCCBC, 
0x896745C3, 0x99A9BB9A, 0xC6CCCC0C, 0x56006834, 0xCCBC6846, 0x0062C9CC, 0x01000000, 0x13210121, 
0x12000536, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0020000, 
0x00002000, 0xCCBC37C2, 0x222242C8, 0xB7CCACC6, 0x22222232, 0xC84822C2, 0x22222242, 0x1095CCCC, 
0x7A020000, 0x1021A7CC, 0xAC150000, 0x00000536, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xC0020000, 0x00002000, 0xCCCCBBCA, 0x666666A8, 0xCBCCACC8, 0x66666697, 
0xC9696666, 0x66666676, 0x66A8CCCC, 0x9B676666, 0x6676B9CC, 0xBC686666, 0x12000F11, 0x00000060, 
0xC0040400, 0x0000000C, 0x00000000, 0x00000042, 0x00000063, 0x00000002, 0x00000000, 0xBBBBBBCB, 
0xCBBBBBBB, 0xA97B7BC3, 0x99999999, 0xCBCACCCB, 0x22222273, 0x22222242, 0x37222222, 0x85CCCCCC, 
0x22222263, 0x06000913, 0x00000060, 0x00000000, 0xAAA20C00, 0x2820228C, 0x68660000, 0x0046AA00, 
0x00000064, 0x00000000, 0xCACACCBC, 0x22222262, 0xC8C8CCC8, 0x222242C8, 0xCC4822C2, 0x2284CC8C, 
0xACCBBABB, 0x2263CBCB, 0x22222222, 0x65692322, 0x0C000746, 0x88000040, 0x0080C60C, 0xCC808600, 
0x06000064, 0x00000000, 0x00000000, 0x200A0000, 0x00002000, 0x9C9999C9, 0x9CBCC99C, 0xC96845C3, 
0xCC99CC99, 0xCC8CA6CC, 0x7B43C8CA, 0x6A2394CA, 0x22223296, 0x22222222, 0xCCBC6A23, 0x00000746, 
0x86000040, 0x0080C60C, 0xCC808600, 0x06000064, 0x00000000, 0x00000000, 0x200A0000, 0x00002000, 
0xBBBBBBCB, 0xBBBBBBBB, 0x896745C4, 0x9CCBCC99, 0xC8CCCCCC, 0x44444444, 0xCACCCCCC, 0x01004297, 
0x12000001, 0xCCBC7945, 0x00800946, 0x86000040, 0x0080C60C, 0xCC80A600, 0x06000064, 0x00000000, 
0x00000000, 0x200A0000, 0x00002000, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xC0000000, 
0x00000000, 0xCACCCCCC, 0x01004297, 0x00000001, 0x78460301, 0x02000701, 0x022CC64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0x9C9999C9, 0x99999999, 
0x896745C3, 0x99C99999, 0xC73722C2, 0x22222232, 0x8676BBCC, 0x22A57769, 0x22225259, 0x7B972522, 
0x0080051F, 0x00000020, 0x00000200, 0x40000200, 0x4C002004, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xCBBCBBCB, 0xCCCCCCBC, 0x896745C3, 0x99A9BB9A, 0xC6CCCC0C, 0x56006834, 0xCCBC6846, 
0x0062C9CC, 0x01000000, 0x13210121, 0x12000536, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xC0020000, 0x00002000, 0xBBCCBBC9, 0x00001074, 0xCBCC9CC5, 0x00001073, 
0xC6060000, 0x00000031, 0x1095CCCC, 0x7A020000, 0x1021A7CC, 0xAC150000, 0x00000536, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0020000, 0x00002000, 0xBBCCBBCA, 
0x66666698, 0xCBCCACC8, 0x66666697, 0xC9696666, 0x66666676, 0x66A8CCCC, 0x9B676666, 0x6676B9CC, 
0xBC686666, 0x12000F11, 0x00000060, 0xC0040400, 0x0000000C, 0x00000000, 0x00000042, 0x00000063, 
0x00000002, 0x00000000, 0xBBBBBBCB, 0xBBBBCBCC, 0x896745C3, 0x9999CACC, 0xCBCCCC0B, 0x44BB87A9, 
0x00000000, 0xBC8A4612, 0xBACCCCCC, 0x00215497, 0x1200092C, 0x40000060, 0x00400000, 0x00000000, 
0x00040200, 0x0A000800, 0x00CA848C, 0x00000000, 0x00000000, 0xBBCCCCBC, 0x66666697, 0xBBBBBBBB, 
0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x0C000746, 
0x86000040, 0x0080C60C, 0xCC808600, 0x06000064, 0x00000000, 0x00000000, 0x200A0000, 0x00002000, 
0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xBACBCCCC, 0x01004297, 
0x12000001, 0xCCBC7945, 0x00000746, 0x86000040, 0x0080C60C, 0xCC808600, 0x06000064, 0x00000000, 
0x00000000, 0x200A0000, 0x00002000, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xCCCCCCCC, 
0xCCCCCCCC, 0xCACCCCCC, 0x01004297, 0x12000001, 0xCCBC7945, 0x00800946, 0x86000040, 0x0080C60C, 
0xCC80A600, 0x06000064, 0x00000000, 0x00000000, 0x200A0000, 0x00002000, 0xBBBBBBCB, 0xBBBBBBBB, 
0xBBBBBBCB, 0xBBBBBBBB, 0xC0000000, 0x00000000, 0xCACCCCCC, 0x01004297, 0x00000001, 0x78460301, 
0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00000000, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xC6060000, 0x00000031, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x0080051F, 0x00000020, 0x00000200, 0x40000200, 0x4C002004, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCBBCBBCB, 0xCCCCCCBC, 0x896745C3, 0x99A9BB9A, 
0x95CACACC, 0x55225634, 0xCCBC6846, 0x0062C9CC, 0x01000000, 0x13210121, 0x12000536, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0020000, 0x00002000, 0xCCCC48C2, 
0x222232B7, 0xB9CCBCC7, 0x22222252, 0xC84822C2, 0x22222242, 0x1095CCCC, 0x7A020000, 0x1021A7CC, 
0xAC150000, 0x00000536, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xC0020000, 0x00002000, 0xCCCCBBCA, 0x666666A8, 0xCBCCACC8, 0x66666697, 0xC9696666, 0x66666676, 
0x66A8CCCC, 0x9B676666, 0x6676B9CC, 0xBC686666, 0x12000F11, 0x00000060, 0xC0040400, 0x0000000C, 
0x00000000, 0x00000042, 0x00000063, 0x00000002, 0x00000000, 0xBBBBBBCB, 0xCBBCBBBB, 0x89B77BC3, 
0x99999999, 0xCBCCCB09, 0x42BA87B9, 0x00000010, 0x37222212, 0xBACCCCCC, 0x00216476, 0x1200091C, 
0x00000060, 0x00000000, 0x00000000, 0x00C00200, 0x00000000, 0x00000C00, 0x00000000, 0x00000000, 
0xCACCCCB9, 0x00001062, 0x73CBCCC8, 0x00000000, 0x370000C0, 0x0084CC9C, 0x9A1411B1, 0xCACCCC99, 
0x11111152, 0x11111111, 0x12000508, 0x88000040, 0x008000CC, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x8C5911C1, 0x1184CCCC, 0x010000C0, 0x84CCCC59, 0xCCCCC8C8, 
0x6A020084, 0x222222C5, 0x22222222, 0x22222222, 0xCCBC5A22, 0x12000946, 0x86000040, 0x0080C60C, 
0xCCA08600, 0x06000064, 0x00000000, 0x00000000, 0x200A0000, 0x00002000, 0x9CB999C9, 0xAC99C9AC, 
0x896745C3, 0x99CC9C99, 0xC89C95CC, 0x00000040, 0x42C9CCCC, 0x22222222, 0x22222222, 0x9A252222, 
0x00800946, 0x86000040, 0x0080C60C, 0xCC80A600, 0x06000064, 0x00000000, 0x00000000, 0x200A0000, 
0x00002000, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xC0000000, 0x00000000, 0xCACCCCCC, 
0x01004297, 0x00000001, 0x78460301, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBCCBCBB, 
0xC7370000, 0x00000031, 0x99CBCCCC, 0x41698677, 0x00000001, 0x89462501, 0x0080051F, 0x00000020, 
0x00000200, 0x40000200, 0x4C002004, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCBBCBBCB, 
0xCCCCCCBC, 0x896745C3, 0x99A9BB9A, 0xC6CCCC0C, 0x56006834, 0xCCBC6846, 0x0062C9CC, 0x01000000, 
0x13210121, 0x12000F11, 0x00000060, 0xC0040400, 0x0000000C, 0x00000000, 0x00000042, 0x00000063, 
0x00000002, 0x00000000, 0xBBBBBBCB, 0xCBBBBBBB, 0x8987ABC6, 0x99999999, 0xCBAC76CB, 0x42B88A84, 
0x22222232, 0x36222222, 0xBACBCCCC, 0x22222273, 0x1200091C, 0x00000060, 0x00000000, 0x00000000, 
0x00C00200, 0x00000000, 0x00000C00, 0x00000000, 0x00000000, 0xCACCCCBA, 0x22222262, 0xABCACCC8, 
0x22222273, 0x7B2322C2, 0x2284CCCC, 0xBC3622B2, 0xC9BCCCCB, 0x22222242, 0x22222222, 0x12000508, 
0x88000040, 0x008000CC, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xC8C848C2, 0x42C8CCCC, 0x242222C2, 0xCBCBCC8C, 0xC8CBCAC8, 0xA62684AC, 0x222232C6, 0x22222222, 
0x22222222, 0xCCBCAB36, 0x12000946, 0x86000040, 0x0080C60C, 0xCCA08600, 0x06000064, 0x00000000, 
0x00000000, 0x200A0000, 0x00002000, 0xCCCC48C2, 0x8BCCCCCC, 0xACBC7BC3, 0x8CCCCCCC, 0xC8CCCCCC, 
0x22222242, 0x42C9CBCC, 0xC9CC4922, 0x22222242, 0x5B222222, 0x00800946, 0x86000040, 0x0080C60C, 
0xCC80A600, 0x06000064, 0x00000000, 0x00000000, 0x200A0000, 0x00002000, 0xCCCBCCCC, 0xBBBBCBCC, 
0x44C8C8C8, 0x44444444, 0xC42422C2, 0x22222222, 0xCBCCCCCC, 0xCCCCCC9A, 0x857886CB, 0x78465369, 
0x0A000704, 0x00C42860, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xCCC88CC4, 0x22848CC8, 0xABCCCAC8, 0x2232B7CC, 0xC73722C2, 0x22222232, 0xAAA9CCCC, 
0x2263A988, 0x22222222, 0x876A2322, 0x0080050B, 0x00000060, 0x00000C0A, 0x80000008, 0x0C000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x8CCC6AC2, 0xCC8CCC88, 0xC99CC9C8, 0x22969CC9, 
0xCB6ACACA, 0x2262BABB, 0xBBBB57C4, 0x223296AB, 0x44444434, 0xC67C4544, 0x00000546, 0x88000040, 
0x0080C60C, 0xCC808602, 0x06000064, 0x00000000, 0x00040000, 0x200A0000, 0x00002000, 0xCCCC8CC4, 
0x2284CCBC, 0x6A2222C2, 0xAACCACCC, 0xCACCACC6, 0x2232BAAB, 0x2263CBCC, 0x22222222, 0x22222222, 
0xBCBB7947, 0x12000546, 0x88000040, 0x0080C60C, 0xCC808602, 0x06000064, 0x00000000, 0x00040000, 
0x200A0000, 0x00002000, 0xBB9999C9, 0x9A99CBC9, 0x896745C3, 0xC9CC9A99, 0xCACCCCCC, 0x22222262, 
0x52CACCCC, 0x22222222, 0x22222222, 0xBC876B23, 0x00800546, 0x86000040, 0x0080C60C, 0xCC808600, 
0x06000064, 0x00000000, 0x00000000, 0x200A0000, 0x00002000, 0x9A9999C9, 0xCBCCBCAB, 0x896745C3, 
0xA9AC9999, 0xC76A34C4, 0x22222233, 0xCACCCCCC, 0x000020A6, 0x7B262201, 0xBBAAABCC, 0x02000701, 
0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 
0x999999C9, 0xC99B999A, 0x896745C3, 0x99CC9999, 0xC76A22C2, 0x22222232, 0xBBCCCCCC, 0x52A8B9BA, 
0x22222222, 0xCC9A2522, 0x0080051F, 0x00000020, 0x00000200, 0x40000200, 0x4C002004, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xCBBCBBCB, 0xCCCCCCBC, 0x896745C3, 0x99A9BB9A, 0xC6CCCC0C, 
0x56006834, 0xCCBC6846, 0x0062C9CC, 0x01000000, 0x13210121, 0x12000F11, 0x00000060, 0xC0040400, 
0x0000000C, 0x00000000, 0x00000042, 0x00000063, 0x00000002, 0x00000000, 0xBBBBBBCB, 0xCBCCBBBB, 
0xB9BBA7C6, 0x999999CA, 0xCACCCACB, 0x74BBBBAB, 0x22222232, 0x7C232222, 0x57C8CCCC, 0x22223296, 
0x1200092C, 0x40000060, 0x00400000, 0x00000000, 0x00040200, 0x0A000800, 0x00CA848C, 0x00000000, 
0x00000000, 0xABACCCBC, 0x7B767B96, 0xBCC8CAC8, 0x2284CC88, 0xCC4832C2, 0xBC87BCCC, 0xAACCCCCC, 
0x222295B9, 0x22222222, 0xACAB6A23, 0x12000746, 0x86000040, 0x0080C60C, 0xCC808600, 0x06000064, 
0x00000000, 0x00000000, 0x200A0000, 0x00002000, 0xCA8CACC8, 0x848CC868, 0x6AC868C2, 0x848CBC67, 
0xC8CB48C2, 0x22222242, 0x2252CACC, 0xCACCCC36, 0x22222252, 0x46A65922, 0x00000746, 0x86000040, 
0x0080C60C, 0xCC808600, 0x06000064, 0x00000000, 0x00000000, 0x200A0000, 0x00002000, 0xCCCBCCCC, 
0xBBBBCBCC, 0xBBBCCBCB, 0xBBBBCCCC, 0xC0000000, 0x00000000, 0xCBCCCCCC, 0xCCCCCC9A, 0x857886CB, 
0x78465369, 0x0A000704, 0x00C42860, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x84CC68C2, 0x2222737B, 0xABA6ACC6, 0x2232B7CA, 0xC73722C2, 0x22222232, 
0xA7BBCCCC, 0x22222232, 0x22222222, 0xBBAA3722, 0x0080050B, 0x00000060, 0x00000C0A, 0x80000008, 
0x0C000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCCCCCB, 0xBACCCCCC, 0xCCCCBCC7, 
0xCBCCCCCC, 0xCBCCCC6C, 0x9866BBBB, 0x98BBCCCC, 0x78667687, 0xACBABB9A, 0xCCBCCCCC, 0x00000546, 
0x88000040, 0x0080C60C, 0xCC808602, 0x06000064, 0x00000000, 0x00040000, 0x200A0000, 0x00002000, 
0xCBCCCCCA, 0xCBCCCCCC, 0x6A2334C0, 0xCACCCCCC, 0xCBCCCC0C, 0x7400ABAA, 0xCACCCCCC, 0x240020A6, 
0x8BA9BB69, 0xBCBABBCC, 0x12000546, 0x88000040, 0x0080C60C, 0xCC808602, 0x06000064, 0x00000000, 
0x00040000, 0x200A0000, 0x00002000, 0xCCCC99C9, 0x9C99C999, 0xC9CCCCC8, 0x999C9999, 0xCACCCCC8, 
0x22222262, 0x2232C7CC, 0x24222222, 0x2232B789, 0x36222222, 0x00800546, 0x86000040, 0x0080C60C, 
0xCC808600, 0x06000064, 0x00000000, 0x00000000, 0x200A0000, 0x00002000, 0x9A9999C9, 0xCBCCBCAB, 
0x896745C3, 0xCACCCC9C, 0xC67A2404, 0x00000031, 0xCACCCCCC, 0x000020A6, 0x7B262201, 0xBBAAABCC, 
0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00000000, 0x9C9999C9, 0x99999999, 0x8A6745C3, 0x99CCCCCC, 0xC76A22C2, 0x22222232, 0xA9BCCBCC, 
0xA8BBAB76, 0x2243998A, 0x6B232222, 0x0080051F, 0x00000020, 0x00000200, 0x40000200, 0x4C002004, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCBBCBBCB, 0xCCCCCCBC, 0x896745C3, 0x99A9BB9A, 
0xC6CCCC0C, 0x56006834, 0xCCBC6846, 0x0062C9CC, 0x01000000, 0x13210121, 0x12000F11, 0x00000060, 
0xC0040400, 0x0000000C, 0x00000000, 0x00000042, 0x00000063, 0x00000002, 0x00000000, 0xBBBBBBCB, 
0xCCBCBBBB, 0xBB9789C4, 0x99999999, 0xCACACCCB, 0x42C8A877, 0x00000000, 0x25222212, 0xB7CCCCBC, 
0x00212232, 0x06000913, 0x00000060, 0x00000000, 0xAAA20C00, 0x2820228C, 0x66660000, 0x0046AA00, 
0x00000064, 0x00000000, 0xA6CBCCBC, 0x11111122, 0xC8CCCCC8, 0x2222737B, 0x8C2485CC, 0x2284CCCC, 
0xCACBACBA, 0xA899A9AC, 0x22222242, 0x47222222, 0x12000746, 0x88000040, 0x0080C60C, 0xCC808600, 
0x06000064, 0x00000000, 0x00000000, 0x200A0000, 0x00002000, 0xCC8C04C0, 0x75A6B88B, 0x84CC8CC4, 
0xA6AC8C24, 0xC86874CB, 0x48111162, 0x223297CC, 0xC7CCCC36, 0x22324632, 0xCC697725, 0x00000746, 
0x86000040, 0x0080C60C, 0xCC808600, 0x06000064, 0x00000000, 0x00000000, 0x200A0000, 0x00002000, 
0xCCCBCCCC, 0xBBBBCBCC, 0xBBBCCBCB, 0xBBBBCCCC, 0xC0000000, 0x00000000, 0xCBCCCCCC, 0xCCCCCC9A, 
0x857886CB, 0x78465369, 0x0A000704, 0x00C42860, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x244586CC, 0x626A958C, 0x234248C2, 0x2273BB7B, 0xC73722C2, 
0x22222232, 0xA5BBCCCC, 0x22222222, 0x22222222, 0x8B472222, 0x0080050B, 0x00000060, 0x00000C0A, 
0x80000008, 0x0C000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCCCCCB, 0xBACCCCCC, 
0xCCCCBCC7, 0xCBCCCCCC, 0xCBCCCC6C, 0x9866BBBB, 0x98BBCCCC, 0x78667687, 0xACBABB9A, 0xCCBCCCCC, 
0x12000546, 0x88000040, 0x0080C60C, 0xCC808602, 0x06000064, 0x00000000, 0x00040000, 0x200A0000, 
0x00002000, 0xCCBC99C9, 0x9999999A, 0xBABB79C3, 0xCBCC9999, 0xCACC9CC5, 0x22223266, 0x223296CC, 
0x24002022, 0x2232B69B, 0xBCAB2522, 0x00800546, 0x86000040, 0x0080C60C, 0xCC808600, 0x06000064, 
0x00000000, 0x00000000, 0x200A0000, 0x00002000, 0xB99999CB, 0x99999999, 0x896745C3, 0xCACCCC9C, 
0xC76A23C3, 0x22222232, 0x757A65CA, 0x22222255, 0x55252222, 0x8B555555, 0x02000701, 0x022CC64C, 
0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0x999999CC, 
0x9999999C, 0x8A6745C3, 0x99CCCCCC, 0xC86A22C2, 0x22222242, 0x98B9CBCC, 0x65764365, 0x2222A67A, 
0x7A872422, 0x0080010B, 0xC2000060, 0x20C60C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 
0x00000064, 0x00000000, 0xCCBBCBCC, 0xCBCCCBBB, 0x896745C3, 0xC9BCCACC, 0xCCCCCCCC, 0xCCCCCCCC, 
0x88888888, 0x88888888, 0x88ABCA9C, 0x88888888, 0x04000F16, 0x00000040, 0x00000000, 0xC0C60A00, 
0x0A000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xBBBCCBBC, 0x996745C3, 
0x9999CAAC, 0x36A6CCCC, 0x222222A6, 0x9A56C7BC, 0x22323354, 0x22222222, 0x35222222, 0x12000536, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0020000, 0x00002000, 
0xCCCCBBC9, 0x00001085, 0xCBCC9CC5, 0x00001073, 0xC6060000, 0x00000031, 0x1095CCCC, 0x7A020000, 
0x1021A7CC, 0xAC150000, 0x12000129, 0xA2000060, 0x10A00806, 0x00000001, 0x00000000, 0x00000880, 
0x008000AC, 0x00000006, 0x00000000, 0x222222C2, 0xC8CC8C24, 0xCABB9AC5, 0x22222262, 0xCC6A22C2, 
0x2262CACC, 0x222222A2, 0x22222222, 0xCCCC8B25, 0x222252BA, 0x1200091C, 0x00000060, 0x00000000, 
0x00000000, 0x00C04800, 0x00000000, 0x00002400, 0x00000000, 0x00000000, 0xC8CC8CC4, 0x22222242, 
0xA6CCCCC8, 0x22222222, 0x6A2222C2, 0x2276CCCC, 0x973622C2, 0xAACBCC69, 0x22222252, 0x22222222, 
0x12000708, 0x2C000060, 0x000040C8, 0x00000000, 0x00000000, 0x00000200, 0x00000000, 0x00000000, 
0x00000000, 0xCC4822C2, 0x42C8CCCC, 0x262222C2, 0x62C9CC9C, 0xCCACC9CB, 0x6A2473CB, 0x222222C2, 
0x22222222, 0x23222222, 0xCACCBC6A, 0x12000946, 0x86000040, 0x0080C60C, 0xCC808600, 0x06000064, 
0x00000000, 0x00000000, 0x200A0000, 0x00002000, 0xA99A99C9, 0xC9B99999, 0x896745C3, 0xA9CCAC99, 
0xC86A24C2, 0x22222262, 0xA5BACBCC, 0x22222222, 0x22222222, 0x36222222, 0x00800946, 0x86000040, 
0x0080C60C, 0xCC808600, 0x06000064, 0x00000000, 0x00000000, 0x200A0000, 0x00002000, 0xBCCCBCC9, 
0xAB99CACC, 0x896745C3, 0xCCCCCCCC, 0xC6060000, 0x00000031, 0x94CCCCCC, 0x00000010, 0x02000000, 
0xCC9C6644, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00000000, 0x999999CA, 0xC9B99999, 0x896745C3, 0xC9CC9C99, 0xCA6A22C2, 0x22222262, 
0x95BACCCC, 0x22222222, 0x22222222, 0xACBBBA36, 0x0080010B, 0xC2000060, 0x20C60C2A, 0x00000008, 
0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00000000, 0xCCBBCBCC, 0xCBCCCBBB, 0x896745C3, 
0xC9BCCACC, 0xCCCCCCCC, 0xCCCCCCCC, 0x88888888, 0x88888888, 0x88ABCA9C, 0x88888888, 0x04000F16, 
0x00000040, 0x00000000, 0xC0C60A00, 0x0A000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 
0xBBBBBBCB, 0xCCBCBBBB, 0x896745C3, 0xC9BCCACC, 0xCBCCCC0C, 0x450081B9, 0xCCCCCCBC, 0x237386CA, 
0x00002021, 0x15110000, 0x10000129, 0xA2000060, 0x10A00806, 0x00000001, 0x00000000, 0x00000880, 
0x008000AC, 0x00000006, 0x00000000, 0x9B9999C9, 0x99BACCCC, 0xCC7B23C0, 0x0031B7CC, 0xCC9AA805, 
0x00CCCCCC, 0x000031A8, 0x75762600, 0xCCCC6956, 0x6797CCCC, 0x1200091C, 0x00000060, 0x00000000, 
0x00000000, 0x00C04800, 0x00000000, 0x00002400, 0x00000000, 0x00000000, 0xCBCCCCCC, 0x999999CB, 
0xCBCCCC08, 0x0040C8CC, 0xCCCCCC0A, 0x9836CCCC, 0x7797CBCC, 0xCCCCCC89, 0x001073CA, 0xCCCCAC25, 
0x10000708, 0x2C000060, 0x000040C8, 0x00000000, 0x00000000, 0x00000200, 0x00000000, 0x00000000, 
0x00000000, 0xCCCCCCCC, 0xA9AB99CA, 0xCCCCCCC8, 0xCBCACCCC, 0xCCCCCC4B, 0x4444CCCC, 0x1141C9CC, 
0x11214435, 0x9A558714, 0xCCCCBC9A, 0x12000946, 0x86000040, 0x0080C60C, 0xCC808600, 0x06000064, 
0x00000000, 0x00000000, 0x200A0000, 0x00002000, 0xBCCCBCCB, 0xCBCCCCCC, 0xBBBBBBCB, 0xCCCCCCCC, 
0xCCCCCCCC, 0xCCCCCCCC, 0xCBCCCCCC, 0xCCCCCCAA, 0x867886CB, 0xCCBC7969, 0x00800946, 0x86000040, 
0x0080C60C, 0xCC808600, 0x06000064, 0x00000000, 0x00000000, 0x200A0000, 0x00002000, 0xCCCBCCCC, 
0xBBBBCBCC, 0xBBBCCBCB, 0xBBBBCCCC, 0xC0000000, 0x00000000, 0xCBCCCCCC, 0xCCCCCC9A, 0x857886CB, 
0x78465369, 0x12000704, 0x00C42860, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xCCCCBCC9, 0x999999BC, 0xABCCCCC8, 0x101095CC, 0xC6060000, 0x00000031, 
0xA9BBCCCC, 0x33658688, 0xAC583433, 0xABAACBCC, 0x0080050B, 0x00000060, 0x00000C0A, 0x80000008, 
0x0C000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCCCCCB, 0xBACCCCCC, 0xCCCCBCC7, 
0xCBCCCCCC, 0xCBCCCC6C, 0x9866BBBB, 0x98BBCCCC, 0x78667687, 0xACBABB9A, 0xCCBCCCCC, 0x12000546, 
0x88000040, 0x0080C60C, 0xCC808602, 0x06000064, 0x00000000, 0x00040000, 0x200A0000, 0x00002000, 
0xCBCCCCCA, 0xCBCCCCCC, 0x8A6745C3, 0xCACCCCCC, 0xCBCCCC0C, 0x7400ABAA, 0xCACCCCCC, 0x240020A6, 
0x8BA9BB69, 0xBCBABBCC, 0x00800546, 0x86000040, 0x0080C60C, 0xCC808600, 0x06000064, 0x00000000, 
0x00000000, 0x200A0000, 0x00002000, 0x9A9999C9, 0xCBCCBCAB, 0x896745C3, 0xCACCCC9C, 0xC67A2404, 
0x00000031, 0xCACCCCCC, 0x000020A6, 0x7B262201, 0xBBAAABCC, 0x02000701, 0x022CC64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0x999999C9, 0xC9CCCBCC, 
0x8A6745C3, 0x99CCCCCC, 0xC6ABBB08, 0x00005931, 0xB8CCCCCC, 0x54356376, 0x44232154, 0xCC886645, 
0x0080051F, 0x00000020, 0x00000200, 0x40000200, 0x4C002004, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xCBBCBBCB, 0xCCCCCCBC, 0x896745C3, 0x99A9BB9A, 0xC6CCCC0C, 0x56006834, 0xCCBC6846, 
0x0062C9CC, 0x01000000, 0x13210121, 0x12000F11, 0x00000060, 0xC0040400, 0x0000000C, 0x00000000, 
0x00000042, 0x00000063, 0x00000002, 0x00000000, 0xBBBBBBCB, 0xCCBBBBBB, 0x89A99BC5, 0x99999999, 
0xCBCACCCB, 0x52B9A797, 0x22222242, 0x5A222222, 0xBACCCCCC, 0x22223286, 0x06000913, 0x00000060, 
0x00000000, 0xAAA20C00, 0x2880528C, 0x67660000, 0x0086AA00, 0x00000064, 0x00000000, 0xCACCCCBC, 
0x22222262, 0xCACCCCC8, 0x22222262, 0xBC3762CA, 0x2284CCCC, 0xCBCB9BB7, 0xCACBBCCB, 0x22222253, 
0x22222222, 0x12000536, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xC0020000, 0x00002000, 0xCCCC58C2, 0x22222285, 0xCBCCACC6, 0x222222A6, 0xC84822C2, 0x22222242, 
0x1095CCCC, 0x7A020000, 0x1021A7CC, 0xAC150000, 0x12000746, 0x88000040, 0x0080C60C, 0xCC808600, 
0x06000064, 0x00000000, 0x00000000, 0x200A0000, 0x00002000, 0xACAA99C9, 0xB99ACCCC, 0x996745C3, 
0xACBBCC99, 0xCCBC99CC, 0x6A22629A, 0x5444B7CC, 0x22222222, 0x22222222, 0xCCBC6A23, 0x00000746, 
0x86000040, 0x0080C60C, 0xCC808600, 0x06000064, 0x00000000, 0x00000000, 0x200A0000, 0x00002000, 
0xCC9999C9, 0x9999B9AC, 0x896745C3, 0xBCCCAB99, 0xC8CBCCC8, 0x00000040, 0x7697CCCC, 0x01002254, 
0x12000001, 0xAC684523, 0x00800946, 0x86000040, 0x0080C60C, 0xCC80A600, 0x06000064, 0x00000000, 
0x00000000, 0x200A0000, 0x00002000, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xC0000000, 
0x00000000, 0xCACCCCCC, 0x01004297, 0x00000001, 0x78460301, 0x02000701, 0x022CC64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xBBBBBBCB, 0xBBBBBBBB, 
0x896745C3, 0x99C99999, 0xC73722C2, 0x22222232, 0xAACCCCCC, 0x22639989, 0x22223246, 0x8B785822, 
0x00C4080E, 0x0A09090A, 0x08080A0A, 0x0709090C, 0x00000C0C, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x40424242, 0x40404640, 0x40404641, 0x00004545, 0xBDBDBDBD, 0xBDBDBDBD, 0xBDBDBDBD, 
0x0000BDBD, 0xAEAEAEAE, 0xAEAECEAE, 0xAEAECEAE, 0x0000AEAE, 0x0400053A, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0600000, 0x0000C600, 0x222222B2, 0xC8CC8C24, 
0xCCCC48C2, 0x222284CC, 0xC8480000, 0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 
0x0080030B, 0xC2000060, 0x20C60C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 
0x00000000, 0xBBBBBBCB, 0xCBCCCCCC, 0x8A6745C3, 0x99A9CCCC, 0xCC8C4703, 0x00002094, 0x00000000, 
0x00000000, 0xCC5A0100, 0x000083CC, 0x12000949, 0x00000060, 0x00000000, 0x00000C00, 0x0000C00C, 
0x00000000, 0x00006800, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xBBCCCCBC, 0xCC6845C4, 0x9999A9CC, 
0xCCAC7866, 0x666696CC, 0xCCBC3751, 0x4179A8A9, 0x11111111, 0x41471211, 0x0400053A, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0600000, 0x0000C600, 0x222222B2, 
0xC8CC8C24, 0xCCCC48C2, 0x222284CC, 0xC8480000, 0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 
0xBBBBBBBB, 0x12000106, 0xCA000060, 0x22C2A62A, 0x00008002, 0x00000000, 0x00006686, 0x004600AA, 
0x00000044, 0x00000000, 0x787777C7, 0x7A77C8CC, 0x8C7744C4, 0x4454C8CC, 0xCCCC7977, 0x7777C79A, 
0x11111151, 0x11111111, 0x6A221211, 0x52BACCCC, 0x1200091C, 0x00000060, 0x00000000, 0x00000000, 
0x00C04800, 0x00000000, 0x00002400, 0x00000000, 0x00000000, 0xCBCCACC9, 0x9C9AA999, 0xC9CCCBC8, 
0x99A999AA, 0xC9CCCC79, 0x77777787, 0xAA99A898, 0x62CACCBC, 0x11111111, 0x12111111, 0x08000506, 
0xCA000060, 0x22C2A62A, 0x00008002, 0x00000000, 0x00006686, 0x004600AA, 0x00000044, 0x00000000, 
0xCCCCCCCB, 0xBBCC99CB, 0xCCCCCAC8, 0x9999CACC, 0xCACCAB8C, 0x88888898, 0x002084CB, 0x14000000, 
0x5A53BA99, 0xBCCCAA89, 0x06000735, 0x02000020, 0x00000020, 0x00420000, 0x00000000, 0x00000000, 
0x00000000, 0x800C0000, 0x00002000, 0xCACACCCC, 0xAAACCCCC, 0x88C888C8, 0xCCCCCCBC, 0xCBABAAAA, 
0xAAAAAAAA, 0x9B99C9CC, 0x99999999, 0x99999999, 0x9C999999, 0x00800746, 0x86000040, 0x0080C60C, 
0xCC808600, 0x06000064, 0x00000000, 0x00000000, 0x200A0000, 0x00002000, 0x9C9999C9, 0xCCCCCC9C, 
0x89B777C7, 0xA9CCCC99, 0xCBBBBBBB, 0xBBBBBBBB, 0x9B99CCCC, 0x9999B999, 0x99999999, 0xCBCC9999, 
0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00000000, 0xBC999AC9, 0xCCCCBCCC, 0x8B6755C5, 0xCBCCCC9C, 0xC9CC7977, 0x77777787, 0x69B7CCBC, 
0x5A010041, 0xAA2575BA, 0x99140051, 0x1200091F, 0x00000020, 0x20000000, 0xA0000800, 0xAC00800A, 
0x44000000, 0x00004400, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xBBCCCCBC, 0xCC6845C4, 0x9999A9CC, 
0xCCAC7866, 0x666696CC, 0xCCBC3751, 0x4179A8A9, 0x11111111, 0x41471211, 0x0600053B, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x222222B2, 
0xC8CC8C24, 0xCCCC48C2, 0x222284CC, 0xC8480000, 0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 
0xBBBBBBBB, 0x0100053B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x60C00000, 0x0000CC00, 0x222222B2, 0xC8CC8C24, 0xCCCC48C2, 0x222284CC, 0xC8480000, 0x00000040, 
0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x12000F06, 0xCA000060, 0x22C2A62A, 0x00008002, 
0x00000000, 0x00006686, 0x004600AA, 0x00000044, 0x00000000, 0x787777C7, 0x7A77C8CC, 0x8C7744C4, 
0x4454C8CC, 0xCCCC7977, 0x7777C79A, 0x11111151, 0x11111111, 0x6A221211, 0x52BACCCC, 0x1200091A, 
0x00000060, 0x00000000, 0x00020800, 0xA80ACA08, 0x66660000, 0x00464400, 0x00000064, 0x00000000, 
0xCBCCACC9, 0x9C9AA999, 0xC9CCCBC8, 0x44A798AA, 0xC9CCCC79, 0x77777787, 0xAA99A898, 0x62CACCBC, 
0x11111111, 0x12111111, 0x0E00052C, 0x44000060, 0x45420000, 0x00000080, 0x00040200, 0x08006800, 
0x00CA848C, 0x00000000, 0x000A0000, 0xCCCCCCCB, 0xBBCC99CB, 0xCCCCCAC8, 0x9999CACC, 0xCACCAB8C, 
0x88888898, 0x3197CBCC, 0x14000000, 0x5A53BA99, 0xCCCCAA89, 0x00000735, 0x02000020, 0x00000020, 
0x00420000, 0x00000000, 0x00000000, 0x00000000, 0x800C0000, 0x00002000, 0xCACACCCC, 0xAAACCCCC, 
0x88C888C8, 0xCCCCCCBC, 0xCBABAAAA, 0xAAAAAAAA, 0x9B99C9CC, 0x99999999, 0x99999999, 0x9C999999, 
0x00800746, 0x86000040, 0x0080C60C, 0xCC808600, 0x06000064, 0x00000000, 0x00000000, 0x200A0000, 
0x00002000, 0x9C9999C9, 0xCCCCCC9C, 0x89B777C7, 0xA9CCCC99, 0xCBBBBBBB, 0xBBBBBBBB, 0x9B99CCCC, 
0x9999B999, 0x99999999, 0xCBCC9999, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xBC999AC9, 0xCCCCBCCC, 0x8B6755C5, 0xCBCCCC9C, 
0xC9CC7977, 0x77777787, 0x69B7CCBC, 0x5A010041, 0xAA2575BA, 0x99140051, 0x0300053B, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x222222B2, 
0xC8CC8C24, 0xCCCC48C2, 0x222284CC, 0xC8480000, 0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 
0xBBBBBBBB, 0x1200091F, 0x00000020, 0x20000000, 0xA0000800, 0xAC00800A, 0x44000000, 0x00004400, 
0x00000000, 0x00000000, 0xBBBBBBCB, 0xBBCCCCBC, 0xCC6845C4, 0x9999A9CC, 0xCCAC7866, 0x666696CC, 
0xCCBC3751, 0x4179A8A9, 0x11111111, 0x41471211, 0x0300053B, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x222222B2, 0xC8CC8C24, 0xCCCC48C2, 
0x222284CC, 0xC8480000, 0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x12000F06, 
0xCA000060, 0x22C2A62A, 0x00008002, 0x00000000, 0x00006686, 0x004600AA, 0x00000044, 0x00000000, 
0x787777C7, 0x7A77C8CC, 0x8C7744C4, 0x4454C8CC, 0xCCCC7977, 0x7777C79A, 0x11111151, 0x11111111, 
0x6A221211, 0x52BACCCC, 0x1200091A, 0x00000060, 0x00000000, 0x00020800, 0xA80ACA08, 0x66660000, 
0x00464400, 0x00000064, 0x00000000, 0xCBCCACC9, 0x9C9AA999, 0xC9CCCBC8, 0x44A798AA, 0xC9CCCC79, 
0x77777787, 0xAA99A898, 0x62CACCBC, 0x11111111, 0x12111111, 0x0E00052C, 0x44000060, 0x45420000, 
0x00000080, 0x00040200, 0x08006800, 0x00CA848C, 0x00000000, 0x000A0000, 0xCCCCCCCB, 0xBBCC99CB, 
0xCCCCCAC8, 0x9999CACC, 0xCACCAB8C, 0x88888898, 0x3197CBCC, 0x14000000, 0x5A53BA99, 0xCCCCAA89, 
0x00000735, 0x02000020, 0x00000020, 0x00420000, 0x00000000, 0x00000000, 0x00000000, 0x800C0000, 
0x00002000, 0xCACACCCC, 0xAAACCCCC, 0x88C888C8, 0xCCCCCCBC, 0xCBABAAAA, 0xAAAAAAAA, 0x9B99C9CC, 
0x99999999, 0x99999999, 0x9C999999, 0x00800746, 0x86000040, 0x0080C60C, 0xCC808600, 0x06000064, 
0x00000000, 0x00000000, 0x200A0000, 0x00002000, 0x9C9999C9, 0xCCCCCC9C, 0x89B777C7, 0xA9CCCC99, 
0xCBBBBBBB, 0xBBBBBBBB, 0x9B99CCCC, 0x9999B999, 0x99999999, 0xCBCC9999, 0x02000701, 0x022CC64C, 
0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xBC999AC9, 
0xCCCCBCCC, 0x8B6755C5, 0xCBCCCC9C, 0xC9CC7977, 0x77777787, 0x69B7CCBC, 0x5A010041, 0xAA2575BA, 
0x99140051, 0x0300053B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x60C00000, 0x0000CC00, 0x222222B2, 0xC8CC8C24, 0xCCCC48C2, 0x222284CC, 0xC8480000, 0x00000040, 
0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x0C00053A, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xC0600000, 0x0000C600, 0xCBCCBCB9, 0x77777798, 0xCCC88CC8, 
0x888888C8, 0xC6060000, 0x00000031, 0x2186CBCC, 0x59011033, 0x1021A6CC, 0xCC8A3612, 0x12000F0B, 
0xC2000060, 0x20C60C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00000000, 
0xBBBBBBCB, 0xCBCCCCBC, 0x896745C3, 0x99B9CC9A, 0xCCAC0400, 0x000085CB, 0x54556566, 0x56454444, 
0xCCBC8A77, 0xA8A8AAB8, 0x12000918, 0x00000020, 0x00000000, 0x0A000A00, 0x002882CA, 0x02440000, 
0x00202200, 0x00000002, 0x00000000, 0x8AA7AB47, 0x2253C8CC, 0xCC8C77C7, 0x777787AC, 0xC7060000, 
0x00000031, 0xCCAC8B77, 0x7777B8CC, 0x77777777, 0x77777777, 0x06000704, 0x00C42860, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x99999999, 0x99BACAAC, 
0xCC8C88C8, 0x8888888C, 0xCBBBBBBB, 0xBBBBBBBB, 0x8988A889, 0x888888A8, 0xCCACAB9B, 0x8888B8CA, 
0x0300053B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60C00000, 
0x0000CC00, 0x222222B2, 0xC8CC8C24, 0xCCCC48C2, 0x222284CC, 0xC8480000, 0x00000040, 0xBBBBBBBB, 
0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x00000636, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xC0020000, 0x00002000, 0xBCBBBB9A, 0x777777A9, 0xCCBBBBCB, 0xBBBBBBCB, 
0xC6060000, 0x00000031, 0x2186CBCC, 0x59011033, 0x1021A6CC, 0xCC8A3612, 0x12000F0B, 0xC2000060, 
0x20C60C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00000000, 0x88888888, 
0x8888A8BC, 0x8C7777C7, 0x7777CACC, 0xCCBBBBBB, 0xCBBBBBBB, 0x77777787, 0x77777777, 0xAA787777, 
0x9AB9CCCC, 0x12000918, 0x00000020, 0x00000000, 0x04000400, 0x000220C4, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xCCCCBCC9, 0x999999CC, 0x8C7777C7, 0x99C9CCCC, 0xCBBBBBBB, 0xBBBBBBBB, 
0xB9BBABBB, 0x878A879A, 0x77777777, 0x77777777, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xCCCCACC9, 0x9999BACB, 0x8C7777C7, 
0x9999CCCC, 0xCBBBBBBB, 0xBBBBBBBB, 0x77777787, 0x77777777, 0x8C777777, 0x9AB9BACC, 0x00000636, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0020000, 0x00002000, 
0xCBCCBCB9, 0x77777798, 0xCCC88CC8, 0x888888C8, 0xC6060000, 0x00000031, 0x2186CBCC, 0x59011033, 
0x1021A6CC, 0xCC8A3612, 0x12000F0B, 0xC2000060, 0x20C60C2A, 0x00000008, 0x00000000, 0x00000044, 
0x00460068, 0x00000064, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0x896745C4, 0x999999CC, 0xCC888CCC, 
0x44444484, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x12000918, 0x00000020, 0x00000000, 
0x0A000A00, 0x002882CA, 0x02440000, 0x00202200, 0x00000002, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 
0xCC8CCCC8, 0x444464CA, 0xC84844C4, 0x44848C44, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 
0x06000704, 0x00C42860, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 
0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x0600053B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x222222B2, 0xC8CC8C24, 0xCCCC48C2, 0x222284CC, 
0xC8480000, 0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x0100053B, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x222222B2, 
0xC8CC8C24, 0xCCCC48C2, 0x222284CC, 0xC8480000, 0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 
0xBBBBBBBB, 0x0C00053A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xC0600000, 0x0000C600, 0xBCBBBB9A, 0x777777A9, 0xCCBBBBCB, 0xBBBBBBCB, 0xC6060000, 0x00000031, 
0x2186CBCC, 0x59011033, 0x1021A6CC, 0xCC8A3612, 0x12000F0B, 0xC2000060, 0x20C60C2A, 0x00000008, 
0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xC87BC8C8, 
0x444484CC, 0xCCCC88C4, 0x444444C8, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x12000918, 
0x00000020, 0x00000000, 0x04000400, 0x000220C4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xBBBBBBBB, 0xBBBBBBBB, 0x8CCC48C4, 0xCC9999CC, 0xC84844C4, 0x44444444, 0xCCCCCCCC, 0xCCCCCCCC, 
0xCCCCCCCC, 0xCCCCCCCC, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0x8C8C45C4, 0xC9CC99CC, 0xC84844C4, 
0x44444444, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x0080031F, 0x00000020, 0x20000000, 
0xA0000800, 0xAC00800A, 0x44000000, 0x00004400, 0x00000000, 0x00000000, 0xCCCCBCCB, 0xCCCCCBBB, 
0x896745C3, 0x99999999, 0xCBCCCC0C, 0x93004573, 0xCCAC6822, 0x86CBCCCC, 0x9A470242, 0x0052A8BB, 
0x00000319, 0x00000000, 0x00000000, 0x00760700, 0x00607707, 0x00000000, 0x00305400, 0x00000003, 
0x00000000, 0xCCCCBCCB, 0xCCCCCCCC, 0xCCCC7AA4, 0x999999A9, 0xCBCCCC0C, 0x00004573, 0xCC9C6832, 
0x86CBCCCC, 0x37010042, 0x00001063, 0x0300053B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x482222B2, 0xCCCCCCC8, 0xCCCC48C2, 0x222262CA, 
0xC84822C2, 0x22222242, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x0C000121, 0x86000080, 
0xCC86A840, 0x0000800C, 0x00000000, 0x000000CC, 0x040600AA, 0x0000008A, 0x00C00000, 0xBBBBBBCB, 
0xCCBCCBCC, 0xBCBCA8C6, 0x9999CCCC, 0x73BBCA0C, 0x22515901, 0x22010000, 0x48121220, 0xAACCCCCC, 
0x00002176, 0x0C000915, 0x00000060, 0x00000000, 0x44CC0200, 0x00002002, 0x00000000, 0x00004000, 
0x00000000, 0x00000000, 0xCABA7BB4, 0xA689B7CC, 0xCCAA2600, 0x0073BBCB, 0xB7CCCCCA, 0x11119535, 
0x52CBCCAC, 0x00000020, 0x00000000, 0x13000000, 0x0300053B, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x54C948B2, 0xCCCCAA8C, 0xCACC9CC5, 
0x22222262, 0xC84822C2, 0x22222242, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x0A000F06, 
0xCA000060, 0x22C2A62A, 0x00008002, 0x00000000, 0x00006686, 0x004600AA, 0x00000044, 0x000C0000, 
0xAA3622B2, 0x22A6CACC, 0x98150000, 0x62C8CCCC, 0xC7CCCCCC, 0x11111141, 0x00000000, 0x00000000, 
0xCCAB2500, 0x0020B7CC, 0x12000917, 0x00000040, 0x00000000, 0x0CC60B00, 0x000000A6, 0x00AA0000, 
0x00000000, 0x00000000, 0x00000000, 0xCCCA99C9, 0xB99CCCCC, 0x896745C3, 0x99C9CCCC, 0xC8CCCCCB, 
0x11119568, 0x88CBCCCC, 0x00407866, 0x00001000, 0x23220200, 0x00800812, 0x82000040, 0x00888000, 
0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00000000, 0xA9CCCCCC, 0xC9ABCBCC, 
0x896745C3, 0x99CABC9A, 0xC7373333, 0x33333354, 0xCBCCCCCC, 0x106355B8, 0x00000000, 0xACAA3701, 
0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00000000, 0x9CCB9CC9, 0xC9BCCCCC, 0x896745C3, 0xA9BBCCBC, 0xC84822C2, 0x22222242, 0x63CB9CCA, 
0x35228535, 0x9A662322, 0x8CB8AC9A, 0x0300053B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x222222B2, 0xC8CC8C24, 0xCCCC48C2, 0x222284CC, 
0xC8480000, 0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x1200091F, 0x00000020, 
0x20000000, 0xA0000800, 0xAC00800A, 0x44000000, 0x00004400, 0x00000000, 0x00000000, 0xBBBBBBCB, 
0xBBCCCCBC, 0xCC6845C3, 0x9999C9CC, 0xCCAC8806, 0x000062CA, 0xCCCC9A58, 0x014198CA, 0x00001011, 
0x02000000, 0x0300053B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x60C00000, 0x0000CC00, 0x222222B2, 0xC8CC8C24, 0xCCCC48C2, 0x222284CC, 0xC8480000, 0x00000040, 
0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x0C00053A, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0xCBCCBC77, 0x00001074, 0xCCCC6A02, 
0x000052C9, 0xC6060000, 0x00000031, 0x2175CBCC, 0x49131033, 0x1021A5CC, 0xCC8A3612, 0x00000536, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xA0000000, 0x00000000, 
0xA9CBBC78, 0x00001063, 0xCCCC6A02, 0x000062CA, 0xC6060000, 0x00000031, 0x2186CBCC, 0x59141033, 
0x1021A5CC, 0xCC8A3612, 0x12000F06, 0xCA000060, 0x22C2A62A, 0x00008002, 0x00000000, 0x00006686, 
0x004600AA, 0x00000044, 0x00000000, 0x37000000, 0x0074C9CC, 0x48620200, 0x0040C8CC, 0xCCAC4702, 
0x8600B8CC, 0x00001012, 0x00000000, 0x9C450100, 0xA6CBCCCC, 0x12000918, 0x00000020, 0x00000000, 
0x0A000A00, 0x002882CA, 0x02440000, 0x00202200, 0x00000002, 0x00000000, 0xCCCCBCC9, 0x9999B9CC, 
0x9B6745C3, 0x9999CBCC, 0xC9ABC969, 0x66666676, 0xCCCCCCBA, 0x667798BA, 0x00001053, 0x78560200, 
0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00000000, 0xCCCCACC9, 0x9999BACB, 0x896745C3, 0x9999CCCC, 0xC6060000, 0x00000031, 0x43667666, 
0x77673433, 0xBC896776, 0xAACACCCC, 0x1200091F, 0x00000020, 0x20000000, 0xA0000800, 0xAC00800A, 
0x44000000, 0x00004400, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xBBBBBBBB, 0xCC6845C3, 0x9999C9CC, 
0xCCAB3702, 0x000062CA, 0xCCCC5A52, 0x1141A8CB, 0x11111111, 0x12111111, 0x0600053B, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x252222B2, 
0x73BBCC9C, 0xCCCCB8C7, 0x222222A6, 0xC8480000, 0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 
0xBBBBBBBB, 0x0100053B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x60C00000, 0x0000CC00, 0x242222B2, 0x62CACC8C, 0xCCCC48C2, 0x222262CA, 0xC84822C2, 0x22222242, 
0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x0C00053A, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0xABCCCCBC, 0x22222273, 0xCCCC8C04, 
0x597859A6, 0xC8480000, 0x00000041, 0x2175CBCC, 0x49131033, 0x1021A5CC, 0xCC8A3612, 0x00000536, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xA0000000, 0x00000000, 
0xA9CBBC78, 0x00001063, 0xCCCC6A02, 0x000062CA, 0xC6060000, 0x00000031, 0x2186CBCC, 0x59141033, 
0x1021A5CC, 0xCC8A3612, 0x12000F06, 0xCA000060, 0x22C2A62A, 0x00008002, 0x00000000, 0x00006686, 
0x004600AA, 0x00000044, 0x00000000, 0x594148B8, 0x4843C8CC, 0x48840400, 0x0040C8CC, 0xCCBC8B04, 
0x220095CC, 0x11111122, 0x11111111, 0xBC481111, 0xA6CBCCCC, 0x12000918, 0x00000020, 0x00000000, 
0x0A000A00, 0x002882CA, 0x02440000, 0x00202200, 0x00000002, 0x00000000, 0xCCCC9CC9, 0x999999B9, 
0x9B6745C3, 0x9999CACC, 0xC96A2262, 0x22222262, 0xCCCCBCBA, 0x222222A5, 0x11111122, 0x25221211, 
0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00000000, 0xCCCC9CC9, 0x99999999, 0x896745C3, 0x9999CBCC, 0xC7370000, 0x00000031, 0x22222262, 
0x22222222, 0xBC592222, 0x99CACCCC, 0x0080010B, 0xC0000060, 0x00C00C08, 0x00000008, 0x00000000, 
0x00000000, 0x00000002, 0x00000000, 0x00400000, 0xBBBCBBCB, 0xCCBBBBBC, 0x898888C8, 0xC999CBB9, 
0xCCCC7877, 0x777787B9, 0x77777777, 0x77777777, 0xCCAC8B77, 0x7777A7B9, 0x12000F1F, 0x00000020, 
0x00000000, 0x40000200, 0x4C002004, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBCB, 
0xBBBBBBBB, 0xCC6845C3, 0x9999AC99, 0xCCAC56C9, 0x222262BA, 0xCCBC3632, 0x224298CA, 0x22222222, 
0x22222222, 0x0600053B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x60C00000, 0x0000CC00, 0x482222B2, 0xCCCACCC8, 0xCCCC8CC4, 0x222284CC, 0xC84822C2, 0x22222242, 
0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x0100053B, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x222222B2, 0xC8CC8C24, 0xCCCC48C2, 
0x222284CC, 0xC8480000, 0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x12000106, 
0xCA000060, 0x22C2A62A, 0x00008002, 0x00000000, 0x00006686, 0x004600AA, 0x00000044, 0x00000000, 
0x6A867BBA, 0xBA57A6CC, 0x9A5922C2, 0x2262CACC, 0xCCBB7BCB, 0x222252C9, 0x22222262, 0x22222222, 
0x9B482322, 0x87CACCCC, 0x12000F18, 0x00000020, 0x00000000, 0x0A000A00, 0x002882CA, 0x02440000, 
0x00202200, 0x00000002, 0x00000000, 0xCCCC9CB9, 0x9999B999, 0xCCCC59C3, 0x9999B9CC, 0xC9BCABC6, 
0x22738B54, 0x8BA83642, 0xCBCCCCBC, 0x22222284, 0x22222222, 0x00000704, 0x00C42860, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCCBC99, 0x999999B9, 
0xCCAC46C3, 0x9999B9CC, 0xC8585555, 0x55555565, 0x56333353, 0x34336477, 0x9B888776, 0x8787CCCC, 
0x0080091F, 0x00000020, 0x20000000, 0xA0000800, 0xAC00800A, 0x44000000, 0x00004400, 0x00000000, 
0x00000000, 0xCCCCCC9C, 0x999999A9, 0xCCCB8CC6, 0x9999CBCC, 0xCCCCCC7C, 0x7777CCCC, 0xCACCCCAB, 
0x55555565, 0x5555A768, 0x6655A789, 0x0000053B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x60B00000, 0x0000CC00, 0x582222B2, 0xCACCCCBB, 0xCCCC7BC3, 0x222285CC, 
0xC84822C2, 0x22222242, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x00000635, 0x02000020, 
0x00000020, 0x00420000, 0x00000000, 0x00000000, 0x00000000, 0x800C0000, 0x00002000, 0xCCBBBCCB, 
0xBCBBBBCC, 0xCCCAAACA, 0xAAAACACA, 0xCBBBBBBB, 0xBBBBBBBB, 0xBBCBBCCB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBCBBBBBB, 0x06000646, 0x86000040, 0x0080C60C, 0xCC808600, 0x06000064, 0x00000000, 0x00000000, 
0x200A0000, 0x00002000, 0x9CCCC9C9, 0xC999CCCC, 0x8A6745C3, 0xBBCCCCCC, 0xC78A34C3, 0x33538B64, 
0x7975BBCC, 0x22222252, 0x23222222, 0xCCCCCB6B, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xCCCC9CCC, 0x9999999C, 0x8B6745C3, 
0xB9A9CCCC, 0xC73722C2, 0x22222232, 0xA689C9CC, 0x63592332, 0x6A233233, 0xAC372263, 0x0080031F, 
0x00000020, 0x20000000, 0xA0000800, 0xAC00800A, 0x44000000, 0x00004400, 0x00000000, 0x00000000, 
0xCCCCBCCB, 0xCCCCCBBB, 0x896745C3, 0x99999999, 0xCBCCCC0C, 0x93004573, 0xCCAC6822, 0x86CBCCCC, 
0x9A470242, 0x0052A8BB, 0x00000319, 0x00000000, 0x00000000, 0x00760700, 0x00607707, 0x00000000, 
0x00305400, 0x00000003, 0x00000000, 0xCCCCBCCB, 0xCCCCCCCC, 0xCCCC7AA4, 0x999999A9, 0xCBCCCC0C, 
0x00004573, 0xCC9C6832, 0x86CBCCCC, 0x37010042, 0x00001063, 0x0C000121, 0x86000080, 0xCC86A840, 
0x0000800C, 0x00000000, 0x000000CC, 0x040600AA, 0x0000008A, 0x00C00000, 0xCBBBBBCB, 0xCBBCCBCC, 
0xB9C869C4, 0x9999CCB9, 0x63AACBCC, 0x33333523, 0x43232242, 0x9A363332, 0x75CACCAC, 0x22223364, 
0x0C000915, 0x00000060, 0x00000000, 0x44CC0200, 0x00002002, 0x00000000, 0x00004000, 0x00000000, 
0x00000000, 0x9ABA7BB4, 0x425784CC, 0xCC7A25C2, 0x222295CB, 0xB7ACCACB, 0x33335333, 0x64CACCAA, 
0x22222232, 0x22222222, 0x34222222, 0x0A000F06, 0xCA000060, 0x22C2A62A, 0x00008002, 0x00000000, 
0x00006686, 0x004600AA, 0x00000044, 0x000C0000, 0x6A2422B2, 0x2274CBCC, 0x482222C2, 0x52A6CCCC, 
0xC7CCCACC, 0x33333343, 0x22222242, 0x22222222, 0xCCAB3622, 0x223295CC, 0x12000917, 0x00000040, 
0x00000000, 0x0CC60B00, 0x000000A6, 0x00AA0000, 0x00000000, 0x00000000, 0x00000000, 0xA999C9C9, 
0xC9BC9CC9, 0x8A6745C3, 0x99A9CCCC, 0xC9AC99C8, 0x33336666, 0x9999A9CC, 0x74B9BBAB, 0x23323233, 
0x88563533, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 
0x00000000, 0x00000000, 0xAACCCCCC, 0xC9CCCCCC, 0x8C8888C8, 0x99CCCC9A, 0xCBBBBBBB, 0xBBBBBBBB, 
0xCBCCCCCC, 0x88A9AACC, 0x9A888888, 0xACAA8888, 0x1200053B, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x60800000, 0x0000CA00, 0x333333B3, 0xCBCB6A34, 0xCAAC58C3, 
0x33336498, 0xC83833C3, 0x33333344, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x02000701, 
0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 
0xCCCC9BC9, 0xC9CCCCCC, 0x8A6745C3, 0x9999CCCC, 0xCCCCABAA, 0xAAAACACC, 0xBBCBCCCC, 0xBBBBBBBB, 
0xBBBBBBCC, 0xCCCCCCCC, 0x00000636, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xC0020000, 0x00002000, 0xCBCCBCB9, 0x77777798, 0xCCC88CC8, 0x888888C8, 0xC6060000, 
0x00000031, 0x2186CBCC, 0x59011033, 0x1021A6CC, 0xCC8A3612, 0x12000F0B, 0xC2000060, 0x20C60C2A, 
0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 
0x12000918, 0x00000020, 0x00000000, 0x0A000A00, 0x002882CA, 0x02440000, 0x00202200, 0x00000002, 
0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 
0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x06000704, 0x00C42860, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x0C00053A, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0600000, 0x0000C600, 0xBCBBBB9A, 
0x777777A9, 0xCCBBBBCB, 0xBBBBBBCB, 0xC6060000, 0x00000031, 0x2186CBCC, 0x59011033, 0x1021A6CC, 
0xCC8A3612, 0x12000F0B, 0xC2000060, 0x20C60C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 
0x00000064, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 
0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x12000918, 0x00000020, 0x00000000, 0x04000400, 
0x000220C4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x1200053B, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60800000, 0x0000CA00, 
0x222222B2, 0xC8CC8C24, 0xCCCC7BC3, 0x222284CC, 0xC6060000, 0x00000031, 0xBBBBBBBB, 0xAAAAAABA, 
0xAAAAAAAA, 0xBBBBBBBB, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00000000, 0xCCCC9BC9, 0xC9CCCCCC, 0x8A6745C3, 0x9999CCCC, 0xCCCCABAA, 
0xAAAACACC, 0xBBCBCCCC, 0xBBBBBBBB, 0xBBBBBBCC, 0xCCCCCCCC, 0x1200091F, 0x00000020, 0x20000000, 
0xA0000800, 0xAC00800A, 0x44000000, 0x00004400, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xBBCCCCBC, 
0xCC6845C3, 0x9999C9CC, 0xCCAC8806, 0x000062CA, 0xCCCC9A58, 0x014198CA, 0x00001011, 0x02000000, 
0x0C00053A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 
0x0000C000, 0xCBCCBC77, 0x00001074, 0xCCCC6A02, 0x000052C9, 0xC6060000, 0x00000031, 0x2175CBCC, 
0x49131033, 0x1021A5CC, 0xCC8A3612, 0x00000536, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xA0000000, 0x00000000, 0xA9CBBC78, 0x00001063, 0xCCCC6A02, 0x000062CA, 
0xC6060000, 0x00000031, 0x2186CBCC, 0x59141033, 0x1021A5CC, 0xCC8A3612, 0x12000F06, 0xCA000060, 
0x22C2A62A, 0x00008002, 0x00000000, 0x00006686, 0x004600AA, 0x00000044, 0x00000000, 0x37000000, 
0x0074C9CC, 0x48620200, 0x0040C8CC, 0xCCAC4702, 0x8600B8CC, 0x00001012, 0x00000000, 0x9C450100, 
0xA6CBCCCC, 0x12000918, 0x00000020, 0x00000000, 0x0A000A00, 0x002882CA, 0x02440000, 0x00202200, 
0x00000002, 0x00000000, 0xCCCCBCCC, 0xC9CCCCCC, 0x9B6845C3, 0x99C9CCCC, 0xC9ABC969, 0x66666676, 
0xCCCCCCCC, 0x96BBBBBB, 0x01102053, 0xAB583512, 0x1200053B, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x60800000, 0x0000CA00, 0x222222B2, 0xC8CC8C24, 0xCCCC7BC3, 
0x222284CC, 0xC6060000, 0x00000031, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x02000701, 
0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 
0xCCCCACC9, 0xC9CCCCCC, 0x8A6745C3, 0x9999CCCC, 0xCCCCABAA, 0xAAAACACC, 0xBBCBCCCC, 0xBBBBBBBB, 
0xBCBBBBCC, 0xCCCCCCCC, 0x1200030B, 0xC2000060, 0x20C60C2A, 0x00000008, 0x00000000, 0x00000044, 
0x00460068, 0x00000064, 0x00000000, 0xBCBBBBCB, 0xBBBBBBBB, 0x896755C3, 0x9999BABC, 0xCBBC47C3, 
0x11112184, 0x11111141, 0x11111111, 0xCC9C2411, 0x111183CC, 0x12000949, 0x00000060, 0x00000000, 
0x00160C00, 0x0000C00C, 0x00000000, 0x00006800, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xBBCCCCBC, 
0xCC6912C1, 0x8888A8CB, 0xCCAB99C7, 0x111184CA, 0xCCCC9A58, 0x014198CA, 0x00001011, 0x02000000, 
0x0000053B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60C00000, 
0x0000CC00, 0x242222B2, 0x62CACC8C, 0xCCCC48C2, 0x222262CA, 0xC84822C2, 0x22222242, 0xBBBBBBBB, 
0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x1200012C, 0x44000060, 0x00400000, 0x00000000, 0x00000200, 
0x00000800, 0x00CA848C, 0x00000000, 0x000A0000, 0x4484CCBB, 0x4484CC8C, 0xC87B33C3, 0x333384CC, 
0xC88CCCCC, 0x333373CB, 0x68758AC8, 0x44444454, 0x44444444, 0xCCACAA7A, 0x12000135, 0x02000020, 
0x00000020, 0x00420000, 0x00000000, 0x00000000, 0x00000000, 0x800C0000, 0x00002000, 0xC8CC8CB4, 
0x848CCC8C, 0xCCCC7BC3, 0xCC8C44C8, 0xC8C8CCCC, 0x3384BC47, 0xAA7AB8CC, 0x44444464, 0x44444444, 
0x7B448546, 0x0600053B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x60C00000, 0x0000CC00, 0x252222B2, 0x73BBCC9C, 0xCCCCB8C7, 0x222222A6, 0xC8480000, 0x00000040, 
0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x0100053B, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x242222B2, 0x62CACC8C, 0xCCCC48C2, 
0x222262CA, 0xC84822C2, 0x22222242, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x0C000536, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0680000, 0x00008400, 
0xCBCCBC78, 0x00001074, 0xCCCC6A02, 0x000062CA, 0xC6060000, 0x00000031, 0x2186CBCC, 0x59141033, 
0x1021A5CC, 0xCC8A3612, 0x00000107, 0xAC000060, 0x0040A08A, 0x00000000, 0x00000000, 0x00000060, 
0x00000066, 0x00000046, 0x00400000, 0x37000000, 0x0074C9CC, 0x48620200, 0x0040C8CC, 0xCCAC4702, 
0x8600B8CC, 0x00001012, 0x00000000, 0x9C450100, 0xA6CBCCCC, 0x12000943, 0x00000040, 0x00000000, 
0x0CC40C00, 0x000200C6, 0x22000000, 0x00006200, 0x00000000, 0x00000000, 0xCCCC99C9, 0x9999C9C9, 
0xAA6745C3, 0x9999CACC, 0xC99AA8C8, 0x55555565, 0xCCCCCCBA, 0x666687BA, 0x12112153, 0x68561322, 
0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 
0x00000000, 0xCCCCCCCC, 0xAAAACCCC, 0x999999C9, 0xCCCCCC99, 0xCCCCCCCC, 0xCCCCCCCC, 0xCAAACCAA, 
0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xCCCCACC9, 0x9999BACB, 0x8A6745C3, 0x9999CBCC, 
0xC71711C1, 0x11111132, 0x43667666, 0x77673433, 0xBC896776, 0xAACACCCC, 0x1200030B, 0xC2000060, 
0x20C60C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00000000, 0xBBBBBBCB, 
0xCBCCCCCC, 0x8A6756C3, 0x99A9CCCC, 0xCCBC4703, 0x00002094, 0x00000000, 0x00000000, 0xCC9C1400, 
0x000083CC, 0x12000949, 0x00000060, 0x00000000, 0x00160C00, 0x0000C00C, 0x00000000, 0x00006800, 
0x00000000, 0x00000000, 0xBBBBBBCB, 0xBBCCCCBC, 0xCC4800C0, 0x9999C9CC, 0xCCAC8806, 0x000062CA, 
0xCCCC9A58, 0x014198CA, 0x00001011, 0x02000000, 0x0600053B, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x252222B2, 0x73BBCC9C, 0xCCCCB8C7, 
0x222222A6, 0xC8480000, 0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x0100053B, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 
0x242222B2, 0x62CACC8C, 0xCCCC48C2, 0x222262CA, 0xC84822C2, 0x22222242, 0xBBBBBBBB, 0xAAAAAABA, 
0xAAAAAAAA, 0xBBBBBBBB, 0x0C000536, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xC0680000, 0x00008400, 0xCBCCBC78, 0x00001074, 0xCCCC6A02, 0x000062CA, 0xC6060000, 
0x00000031, 0x2186CBCC, 0x59141033, 0x1021A5CC, 0xCC8A3612, 0x1200012C, 0x44000060, 0x00400000, 
0x00000000, 0x00000200, 0x00000800, 0x00CA848C, 0x00000000, 0x000A0000, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 
0x04000135, 0x02000020, 0x00000020, 0x00420000, 0x00000000, 0x00000000, 0x00000000, 0x800C0000, 
0x00002000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 
0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x0000053B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x242222B2, 0x62CACC8C, 0xCCCC48C2, 0x222262CA, 
0xC84822C2, 0x22222242, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x0A000107, 0xAC000060, 
0x0040A08A, 0x00000000, 0x00000000, 0x00000060, 0x00000066, 0x00000046, 0x00400000, 0x37000000, 
0x0074C9CC, 0x48620200, 0x0040C8CC, 0xCCAC4702, 0x8600B8CC, 0x00001012, 0x00000000, 0x9C450100, 
0xA6CBCCCC, 0x12000943, 0x00000040, 0x00000000, 0x0CC40C00, 0x000200C6, 0x22000000, 0x00006200, 
0x00000000, 0x00000000, 0xCCCCBCC9, 0x9999B9CC, 0x9B6745C3, 0x9999CBCC, 0xC9ABC969, 0x66666676, 
0xCCCCCCBA, 0x667798BA, 0x00001053, 0x78560200, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 
0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00000000, 0xCCCCCCCC, 0xAAAACCCC, 0x999999C9, 
0xCCCCCC99, 0xCCCCCCCC, 0xCCCCCCCC, 0xCAAACCAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0x02000701, 
0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 
0xCCCCACC9, 0x9999BACB, 0x896745C3, 0x9999CCCC, 0xC6060000, 0x00000031, 0x43667666, 0x77673433, 
0xBC896776, 0xAACACCCC, 0x01E42A0C, 0x0B0B0B0B, 0x08090909, 0x080C080A, 0x00000000, 0x00000000, 
0x07010101, 0x00020100, 0x00000000, 0xC1C1C1C1, 0x4EC3C3C3, 0x45C0C3C1, 0x00000000, 0x78787878, 
0x78787878, 0x78787878, 0x00000000, 0x57575757, 0x56575757, 0x57575757, 0x00000000, 0x00000716, 
0x00000040, 0x00000000, 0xC0460400, 0x2C000006, 0x86000000, 0x00000000, 0x00000000, 0x00000000, 
0xBBBBCCCB, 0xBCCCBBCC, 0x896745C3, 0xCCCC9C9A, 0xB7CCCCCC, 0x22222242, 0xCC79B8AA, 0x32B6ACCA, 
0x22222222, 0x36222222, 0x06000F3B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x60C00000, 0x0000CC00, 0x252222B2, 0xCACC8C56, 0xCBCC6AC2, 0x22222284, 0xC8480000, 
0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x01000F3B, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x222222B2, 0xC8CCCC48, 
0xCCCC78C3, 0x222262CA, 0xC8480000, 0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 
0x12000521, 0x86000080, 0xCC86A840, 0x0000800C, 0x00000000, 0x000000CC, 0x0406009A, 0x0000008A, 
0x00C00004, 0xCCBCBCCB, 0xBCCCCCCC, 0x9B999AC5, 0x99BACCCC, 0x84CACCCC, 0x2252A757, 0x222222A2, 
0x7A665357, 0xC8CCCC9B, 0x22328568, 0x12000915, 0x00000060, 0x00000000, 0x44CC0200, 0x00002002, 
0x00000000, 0x00004000, 0x00000000, 0x00000000, 0xCCCCABB7, 0x53A7BBCB, 0xCCBA37C0, 0x2062BACC, 
0xC8CCBCCB, 0x22226357, 0x87CBCCCC, 0x22222232, 0x22222222, 0x36222222, 0x12000506, 0xCA000060, 
0x22C2A62A, 0x00008002, 0x00000000, 0x00006686, 0x004600AA, 0x00000044, 0x000C0008, 0x8C2422C2, 
0x85CBCCCC, 0xB83722C2, 0x95CCCCBC, 0xC8CCCCCC, 0xC9482263, 0x45556995, 0x2232A637, 0xCC9B3622, 
0x7897CBCC, 0x00000704, 0x00C42860, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xCCACAABC, 0xACC8CCCC, 0xCC8AB8C7, 0x2284BACC, 0xC85855C5, 0x55555565, 
0xBABCCCCC, 0xABBBBBAA, 0x22537997, 0xBCBB9836, 0x0080050B, 0xC2000060, 0x20C60C2A, 0x00000008, 
0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00000000, 0xACA7AC47, 0xCCBCBCCB, 0x9879BBC7, 
0x47B7CC9C, 0x9CCCCCCC, 0x333383BB, 0x46121121, 0x11636667, 0xBCAB6923, 0x1131C7CC, 0x0E000943, 
0x00000040, 0x00000000, 0x4CC40C00, 0x000200C6, 0x22000000, 0x00006200, 0x00000000, 0x00000000, 
0xCB9C99C9, 0xCCCCCCCC, 0xAC6745C3, 0x99B9CCCB, 0xCACCBCC7, 0x33333363, 0xCBCCCCCC, 0x222264A7, 
0x22223222, 0x78664523, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 
0x00000000, 0x00000000, 0x00000000, 0x999999C9, 0xC9CCCCCC, 0x8C8888C8, 0x99CCCC99, 0xCBBBBBBB, 
0xBBBBBBBB, 0xCBBCCCCC, 0x888898CC, 0x9A888888, 0x89888888, 0x01000701, 0x022CC64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xC99999C9, 0xCCCCCCBC, 
0xAB6745C3, 0x99A9CCCC, 0xCC8A77CA, 0x4222CCCC, 0xCABCBBCC, 0x54444586, 0x6A232222, 0xCCCCCCBC, 
0x00000716, 0x00000040, 0x00000000, 0xC0460400, 0x2C000006, 0x86000000, 0x00000000, 0x00000000, 
0x00000000, 0xCBCCCBCB, 0xCBBBBCBB, 0x9C9C99C9, 0xA99CCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x99C9CC9C, 
0x9999CBCC, 0x99999999, 0x99999999, 0x06000F3B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x222222B2, 0xA6CCCC48, 0xCBCC48C2, 0x222284CC, 
0xC8480000, 0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x12000521, 0x86000080, 
0xCC86A840, 0x0000800C, 0x00000000, 0x000000CC, 0x0406009A, 0x0000008A, 0x00C00004, 0xCCCCBCCB, 
0xBCCCCCCC, 0x9B999AC5, 0x99BACCCC, 0x84CACCCC, 0x2252A757, 0x222222A2, 0x7A665357, 0xC8CCCC9B, 
0x22328568, 0x12000915, 0x00000060, 0x00000000, 0x44CC0200, 0x00002002, 0x00000000, 0x00004000, 
0x00000000, 0x00000000, 0xCCCCABB7, 0x53A7BBCB, 0xCCBA37C0, 0x2062BACC, 0xC8CCBCCB, 0x22226357, 
0x87CBCCCC, 0x22222232, 0x22222222, 0x36222222, 0x01000F3B, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x222222B2, 0xCCCC8C24, 0xCCCC7BC3, 
0x222262CA, 0xC84822C2, 0x22222242, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x12000506, 
0xCA000060, 0x22C2A62A, 0x00008002, 0x00000000, 0x00006686, 0x004600AA, 0x00000044, 0x000C0004, 
0x8C2422C2, 0x85CBCCCC, 0xA82622C2, 0x95CCCCBC, 0xC8CCCCCC, 0xC9482262, 0x45556995, 0x2232A637, 
0xCC8B3522, 0x7897CBCC, 0x00000704, 0x00C42860, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xCCACAABC, 0xBBC8CCCC, 0xCC8AB8C7, 0x2284BACC, 0xC85855C5, 
0x55555565, 0xBABCCCCC, 0xABBBBBAA, 0x33537997, 0xBCBB9846, 0x0080050B, 0xC2000060, 0x20C60C2A, 
0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00000000, 0xACA7AC47, 0xCCBCBCCB, 
0x7877BBC7, 0x47B7CC9C, 0xCCCCCCCC, 0x555585BB, 0x48020000, 0x0083989B, 0xBC9B3701, 0x0030C8CC, 
0x0E000943, 0x00000040, 0x00000000, 0x4CC40C00, 0x000200C6, 0x22000000, 0x00006200, 0x00000000, 
0x00000000, 0xCB9C99C9, 0xCCCCCCCC, 0xAC6745C3, 0x99B9CCCB, 0xCACCBCC7, 0x33333363, 0xCBCCCCCC, 
0x222264A7, 0x22223222, 0x78664523, 0x04800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 
0x00004400, 0x00000000, 0x00000000, 0x00000000, 0x999999C9, 0xC9CCCCCC, 0x8C8888C8, 0x99CCCC99, 
0xCBBBBBBB, 0xBBBBBBBB, 0xCBBCCCCC, 0x888898CC, 0x9A888888, 0x89888888, 0x01000701, 0x022CC64C, 
0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xC99999C9, 
0xCCCCCCBC, 0xAB6745C3, 0x99A9CCCC, 0xCC8A77CA, 0x4222CCCC, 0xCABCBBCC, 0x54444586, 0x6A232222, 
0xCCCCCCBC, 0x00000716, 0x00000040, 0x00000000, 0xC0460400, 0x2C000006, 0x86000000, 0x00000000, 
0x00000000, 0x00000000, 0xCBCCCBCB, 0xCBBBBCBB, 0x9C9C99C9, 0xA99CCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 
0x99C9CC9C, 0x9999CBCC, 0x99999999, 0x99999999, 0x01000F3B, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x222222B2, 0xC8CC8C24, 0xCCCC48C4, 
0x444464A9, 0xC8480000, 0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x12000521, 
0x86000080, 0xCC86A840, 0x0000800C, 0x00000000, 0x000000CC, 0x0406009A, 0x0000008A, 0x00C00004, 
0xCCBCBCCB, 0xCCCBCCCC, 0xABAB9BC5, 0x99BBCCCC, 0xC8CACCCC, 0x5952A767, 0x222222A2, 0x7A665257, 
0xC7CCCC9B, 0x22228578, 0x12000915, 0x00000060, 0x00000000, 0x44CC0200, 0x00002002, 0x00000000, 
0x00004000, 0x00000000, 0x00000000, 0xCCCCBBB9, 0x63AABBCB, 0xCCBA37C2, 0x2262BACC, 0xC8CCBCCB, 
0x222275AA, 0x75CBCCCC, 0x22433444, 0x22222222, 0x46222222, 0x06000F3B, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x222222B2, 0xCCCC6A22, 
0xCCCCC8C8, 0x222262CA, 0xC84822C2, 0x22222242, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 
0x12000506, 0xCA000060, 0x22C2A62A, 0x00008002, 0x00000000, 0x00006686, 0x004600AA, 0x00000044, 
0x000C0000, 0x8C2422C2, 0x85CBCCCC, 0xB83722C2, 0x95CCCCBC, 0xC8CCCCCC, 0xC9482262, 0x45556995, 
0x2232A637, 0xCC9B3622, 0x7897CBCC, 0x00000704, 0x00C42860, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCACAABC, 0xBBC8CCCC, 0xCC8AB8C7, 0x2284BACC, 
0xC85855C5, 0x55555565, 0xBABCCCCC, 0xABBBBBAA, 0x33537997, 0xBCBB9846, 0x0080050B, 0xC2000060, 
0x20C60C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00000000, 0xACA7AC47, 
0xCCBCBCCB, 0x7877BBC7, 0x47B7CC9C, 0xCCCCCCCC, 0x555585BB, 0x48020000, 0x0083989B, 0xBC9B3701, 
0x0030C8CC, 0x0E000943, 0x00000040, 0x00000000, 0x4CC40C00, 0x000200C6, 0x22000000, 0x00006200, 
0x00000000, 0x00000000, 0xCB9C99C9, 0xCCCCCCCC, 0xAC6745C3, 0x99B9CCCB, 0xCACCBCC7, 0x33333363, 
0xCBCCCCCC, 0x222264A7, 0x22223222, 0x78664523, 0x04800812, 0x82000040, 0x00888000, 0x0000C0A0, 
0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00000000, 0x999999C9, 0xC9CCCCCC, 0x8C8888C8, 
0x99CCCC99, 0xCBBBBBBB, 0xBBBBBBBB, 0xCBBCCCCC, 0x888898CC, 0x9A888888, 0x89888888, 0x01000701, 
0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 
0xC99999C9, 0xCCCBCC9C, 0xAB6745C3, 0x99A9CCCC, 0xCC8A77CA, 0x2222CCCC, 0xC8BCBBCC, 0x54444554, 
0x6A232222, 0xCCCCCCBC, 0x00000716, 0x00000040, 0x00000000, 0xC0460400, 0x2C000006, 0x86000000, 
0x00000000, 0x00000000, 0x00000000, 0xBCBCBCCC, 0xBCCCCBBC, 0x896745C3, 0xCCCC9C9C, 0xC88CCCCC, 
0x22222242, 0xCC3832A6, 0x32B6CCCC, 0x22222222, 0x36222222, 0x12000521, 0x86000080, 0xCC86A840, 
0x0000800C, 0x00000000, 0x000000CC, 0x0406009A, 0x0000008A, 0x00C00004, 0xCCBBBCCB, 0xBCCCCCCC, 
0x9BC99AC5, 0x99BACCCC, 0x84CBCCCC, 0x2652A757, 0x222222A2, 0x7A675557, 0xC8CCCCAB, 0x22328568, 
0x12000915, 0x00000060, 0x00000000, 0x44CC0200, 0x00002002, 0x00000000, 0x00004000, 0x00000000, 
0x00000000, 0xCCCCABB7, 0x53A7BBCB, 0xCCBA37C0, 0x2062BACC, 0xC8CCBCCB, 0x22226357, 0x87CBCCCC, 
0x22222232, 0x22222222, 0x36222222, 0x06000F3B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x222222B2, 0xCCCCAC46, 0xCCCC6AC2, 0x222252B7, 
0xC8480000, 0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x01000F3B, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x222222B2, 
0xCCCC8C24, 0xCCCC48C2, 0x222262CA, 0xC8480000, 0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 
0xBBBBBBBB, 0x12000506, 0xCA000060, 0x22C2A62A, 0x00008002, 0x00000000, 0x00006686, 0x004600AA, 
0x00000044, 0x000C0000, 0x8C2422C2, 0x85CBCCCC, 0xB83722C2, 0x95CCCCBC, 0xC8CCCCCC, 0xC9482262, 
0x45556995, 0x2232A637, 0xCC9B3622, 0x7897CBCC, 0x00000704, 0x00C42860, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCACAABC, 0xBBC8CCCC, 0xCC8AB8C7, 
0x2284BACC, 0xC85855C5, 0x55555565, 0xBABCCCCC, 0xABBBBBAA, 0x33537997, 0xBCBB9846, 0x0080050B, 
0xC2000060, 0x20C60C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00000000, 
0xACA7AC47, 0xCCBCBCCB, 0x7877BBC7, 0x47B7CC9C, 0xCCCCCCCC, 0x555585BB, 0x48020000, 0x0083989B, 
0xBC9B3701, 0x0030C8CC, 0x0E000943, 0x00000040, 0x00000000, 0x4CC40C00, 0x000200C6, 0x22000000, 
0x00006200, 0x00000000, 0x00000000, 0xCB9C99C9, 0xCCCCCCCC, 0xAC6745C3, 0x99B9CCCB, 0xCACCBCC7, 
0x33333363, 0xCBCCCCCC, 0x222264A7, 0x22223222, 0x78664523, 0x00800812, 0x82000040, 0x00888000, 
0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00000000, 0x999999C9, 0xC9CCCCCC, 
0x8C8888C8, 0x99CCCC99, 0xCBBBBBBB, 0xBBBBBBBB, 0xCBBCCCCC, 0x888898CC, 0x9A888888, 0x89888888, 
0x01000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00000000, 0xC99999C9, 0xCCCCCCBC, 0xAB6745C3, 0x99A9CCCC, 0xCC8A77CA, 0x4222CCCC, 0xCABCBBCC, 
0x54444586, 0x6A232222, 0xCCCCCCBC, 0x03000F3B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x222222B2, 0xC8CC8C24, 0xCCCC48C2, 0x222284CC, 
0xC8480000, 0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x00800816, 0x00000040, 
0x00000000, 0xC0C60A00, 0x2C000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 0xCBBCBBCB, 
0xCBCCCCBC, 0xCACC88C4, 0x9ACCCCBC, 0xCBCCCC0C, 0x0010CA9A, 0xCCCCCCAA, 0x75B9CCCC, 0x9B143354, 
0x979999CA, 0x12000528, 0x20000080, 0x00200000, 0x00000000, 0x00000000, 0x00000000, 0x000000C4, 
0x00000004, 0x00000002, 0xBBBBBBCB, 0xCBCCCCCC, 0xABCABCC9, 0xAABACCCC, 0xB8CCCC6C, 0x9A666677, 
0x77777797, 0xBCAABA9A, 0xCCCCCCCC, 0x9988A9BB, 0x12000914, 0x00000060, 0x00000000, 0x84C20400, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCAB8867, 0x7799CBCC, 0xCCAC6866, 
0x6676B9CB, 0xC9CCCC6B, 0x66666676, 0xB9CCCCBC, 0x66666676, 0x66666666, 0x68666666, 0x03000F3B, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 
0x222222B2, 0xC8CC8C24, 0xCCCC48C2, 0x222284CC, 0xC8480000, 0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 
0xAAAAAAAA, 0xBBBBBBBB, 0x12000528, 0x82000080, 0x00800402, 0x00000000, 0x00000000, 0x00004444, 
0x002000CA, 0x0000000A, 0x00000000, 0xAB897867, 0x77A9CBCC, 0x8A666666, 0x98BACCCC, 0xB9CCCC6B, 
0x66666676, 0x00011122, 0x45120000, 0xCCBB9A78, 0x222263CC, 0x0A000943, 0x00000040, 0x00000000, 
0x0CC40C00, 0x000200C6, 0x22000000, 0x00006200, 0x00000000, 0x00000000, 0xCC9A99C9, 0xC9CCCCCC, 
0x896745C3, 0x99CBCCBC, 0xC9CCCC0A, 0x00026676, 0xCBCCCCCC, 0x11002183, 0x00000000, 0x9B683500, 
0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 
0x00000000, 0xAB9999C9, 0x99B9CCCC, 0x896745C3, 0x99CBCCAC, 0xC6060000, 0x00000031, 0xCCCCCCCB, 
0x316697CB, 0x75766612, 0x99580230, 0x01000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xBC9A99C9, 0xC9CCCCCC, 0x896745C3, 0x99A9CC9C, 
0xCC8A770A, 0x4000CCCC, 0x88CACCCC, 0x54447688, 0x48230121, 0xCCCCCCBB, 0x00800816, 0x00000040, 
0x00000000, 0xC0C60A00, 0x2C000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 0xCBBCBBCB, 
0xCBCCCCBC, 0xCACC88C4, 0x9ACCCCBC, 0xCBCCCC0C, 0x0010CA9A, 0xCCCCCCAA, 0x75B9CCCC, 0x9B143354, 
0x979999CA, 0x12000528, 0x20000080, 0x00200000, 0x00000000, 0x00000000, 0x00000000, 0x000000C4, 
0x00000004, 0x00000002, 0xBBBBBBCB, 0xCBCCCCCC, 0xABCABCC9, 0xAABACCCC, 0xB8CCCC6C, 0x9A666677, 
0x77777797, 0xBCAABA9A, 0xCCCCCCCC, 0x9988A9BB, 0x12000914, 0x00000060, 0x00000000, 0x84C20400, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCAB8867, 0x7799CBCC, 0xCCAC6866, 
0x6676B9CB, 0xC9CCCC6B, 0x66666676, 0xB9CCCCBC, 0x66666676, 0x66666666, 0x68666666, 0x06000F3B, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 
0x222222B2, 0xC8CC8C24, 0xCCCC48C2, 0x222284CC, 0xC8480000, 0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 
0xAAAAAAAA, 0xBBBBBBBB, 0x01000F3B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x60C00000, 0x0000CC00, 0x222222B2, 0xC8CC8C24, 0xCCCC48C2, 0x222284CC, 0xC8480000, 
0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x12000528, 0x82000080, 0x00800402, 
0x00000000, 0x00000000, 0x00004444, 0x002000CA, 0x0000000A, 0x00000000, 0xAB897867, 0x77A9CBCC, 
0x8A666666, 0x98BACCCC, 0xB9CCCC6B, 0x66666676, 0x00011122, 0x45120000, 0xCCBB9A78, 0x222263CC, 
0x0A000943, 0x00000040, 0x00000000, 0x0CC40C00, 0x000200C6, 0x22000000, 0x00006200, 0x00000000, 
0x00000000, 0xCC9A99C9, 0xC9CCCCCC, 0x896745C3, 0x99CBCCBC, 0xC9CCCC0A, 0x00026676, 0xCBCCCCCC, 
0x11002183, 0x00000000, 0x9B683500, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 
0x00004400, 0x00000000, 0x00000000, 0x00000000, 0xAB9999C9, 0x99B9CCCC, 0x896745C3, 0x99CBCCAC, 
0xC6060000, 0x00000031, 0xCCCCCCCB, 0x316697CB, 0x75766612, 0x99580230, 0x01000701, 0x022CC64C, 
0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xBC9A99C9, 
0xC9CCCCCC, 0x896745C3, 0x99A9CC9C, 0xCC8A770A, 0x4000CCCC, 0x88CACCCC, 0x54447688, 0x48230121, 
0xCCCCCCBB, 0x06000F3B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x60C00000, 0x0000CC00, 0x222222B2, 0xC8CC8C24, 0xCCCC48C2, 0x222284CC, 0xC8480000, 0x00000040, 
0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x01000F3B, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x222222B2, 0xC8CC8C24, 0xCCCC48C2, 
0x222284CC, 0xC8480000, 0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x00800816, 
0x00000040, 0x00000000, 0xC0C60A00, 0x2C000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 
0xCBBCBBCB, 0xCBCCCCBC, 0xCACC88C4, 0x9ACCCCBC, 0xCBCCCC0C, 0x0010CA9A, 0xCCCCCCAA, 0x75B9CCCC, 
0x9B143354, 0x979999CA, 0x12000528, 0x20000080, 0x00200000, 0x00000000, 0x00000000, 0x00000000, 
0x000000C4, 0x00000004, 0x00000002, 0xBBBBBBCB, 0xCBCCCCCC, 0xABCABCC9, 0xAABACCCC, 0xB8CCCC6C, 
0x9A666677, 0x77777797, 0xBCAABA9A, 0xCCCCCCCC, 0x9988A9BB, 0x12000914, 0x00000060, 0x00000000, 
0x84C20400, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCAB8867, 0x7799CBCC, 
0xCCAC6866, 0x6676B9CB, 0xC9CCCC6B, 0x66666676, 0xB9CCCCBC, 0x66666676, 0x66666666, 0x68666666, 
0x12000528, 0x82000080, 0x00800402, 0x00000000, 0x00000000, 0x00004444, 0x002000CA, 0x0000000A, 
0x00000000, 0xAB897867, 0x77A9CBCC, 0x8A666666, 0x98BACCCC, 0xB9CCCC6B, 0x66666676, 0x00011122, 
0x45120000, 0xCCBB9A78, 0x222263CC, 0x0A000943, 0x00000040, 0x00000000, 0x0CC40C00, 0x000200C6, 
0x22000000, 0x00006200, 0x00000000, 0x00000000, 0xCC9A99C9, 0xC9CCCCCC, 0x896745C3, 0x99CBCCBC, 
0xC9CCCC0A, 0x00026676, 0xCBCCCCCC, 0x11002183, 0x00000000, 0x9B683500, 0x00800812, 0x82000040, 
0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00000000, 0xAB9999C9, 
0x99B9CCCC, 0x896745C3, 0x99CBCCAC, 0xC6060000, 0x00000031, 0xCCCCCCCB, 0x316697CB, 0x75766612, 
0x99580230, 0x01000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00000000, 0xBC9A99C9, 0xC9CCCCCC, 0x896745C3, 0x99A9CC9C, 0xCC8A770A, 0x4000CCCC, 
0x88CACCCC, 0x54447688, 0x48230121, 0xCCCCCCBB, 0x0300053B, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x222222B2, 0xC8CC8C24, 0xCCCC48C2, 
0x222284CC, 0xC8480000, 0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x1200091F, 
0x00000020, 0x20000000, 0xA0000800, 0xAC00800A, 0x44000000, 0x00004400, 0x00000000, 0x00000000, 
0xBBBBBBCB, 0xBBCCCCBC, 0xCC6845C3, 0x9999C9CC, 0xCCAC8806, 0x000062CA, 0xCCCC9A58, 0x014198CA, 
0x00001011, 0x02000000, 0x0300053B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x60C00000, 0x0000CC00, 0x222222B2, 0xC8CC8C24, 0xCCCC48C2, 0x222284CC, 0xC8480000, 
0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x0C00073A, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0xCBCCBC77, 0x00001074, 
0xCCCC6A02, 0x000052C9, 0xC6060000, 0x00000031, 0x2175CBCC, 0x49131033, 0x1021A5CC, 0xCC8A3612, 
0x00000736, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xA0000000, 
0x00000000, 0xA9CBBC78, 0x00001063, 0xCCCC6A02, 0x000062CA, 0xC6060000, 0x00000031, 0x2186CBCC, 
0x59141033, 0x1021A5CC, 0xCC8A3612, 0x12000506, 0xCA000060, 0x22C2A62A, 0x00008002, 0x00000000, 
0x00006686, 0x004600AA, 0x00000044, 0x00000000, 0x37000000, 0x0074C9CC, 0x48620200, 0x0040C8CC, 
0xCCAC4702, 0x8600B8CC, 0x00001012, 0x00000000, 0x9C450100, 0xA6CBCCCC, 0x12000918, 0x00000020, 
0x00000000, 0x0A000A00, 0x002882CA, 0x02440000, 0x00202200, 0x00000002, 0x00000000, 0xCCCCBCC9, 
0x9999B9CC, 0x9B6745C3, 0x9999CBCC, 0xC9ABC969, 0x66666676, 0xCCCCCCBA, 0x667798BA, 0x00001053, 
0x78560200, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00000000, 0xCCCCACC9, 0x9999BACB, 0x896745C3, 0x9999CCCC, 0xC6060000, 0x00000031, 
0x43667666, 0x77673433, 0xBC896776, 0xAACACCCC, 0x00000716, 0x00000040, 0x00000000, 0xC0460400, 
0x2C000006, 0x86000000, 0x00000000, 0x00000000, 0x00000000, 0xCBCCCBCB, 0xCBBBBCBB, 0x9C9C99C9, 
0xA99CCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x99C9CC9C, 0x9999CBCC, 0x99999999, 0x99999999, 0x12000521, 
0x86000080, 0xCC86A840, 0x0000800C, 0x00000000, 0x000000CC, 0x0406009A, 0x0000008A, 0x00C00004, 
0xCCCBBCCB, 0xBBBCBBCB, 0x9AB99AC5, 0x99CACCCC, 0x32B7CCCC, 0x22111121, 0x121111A2, 0x69232222, 
0xA5CCCCAB, 0x22222222, 0x12000915, 0x00000060, 0x00000000, 0x44CC0200, 0x00002002, 0x00000000, 
0x00004000, 0x00000000, 0x00000000, 0xCCCA58B2, 0x2262BACB, 0xAC7B23C2, 0x222296CC, 0xC8CCBCCA, 
0x11112152, 0x32C7CCCC, 0x21222222, 0x11111111, 0x36121111, 0x12000506, 0xCA000060, 0x22C2A62A, 
0x00008002, 0x00000000, 0x00006686, 0x004600AA, 0x00000044, 0x000C0008, 0x8C2422C2, 0xB78CCCCC, 
0x7B2622C2, 0x75CBCCCC, 0xC9CCCCCC, 0x48111284, 0x23222292, 0x22224248, 0xCCAB3722, 0x2284BACC, 
0x00000704, 0x00C42860, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xCCABAA8C, 0x86A7CCCB, 0xCC8AA806, 0x128488CC, 0xC8585555, 0x55555565, 0xBABCCCCC, 
0x8967A7AA, 0x11527797, 0xBCBB7846, 0x0080050B, 0xC2000060, 0x20C60C2A, 0x00000008, 0x00000000, 
0x00000044, 0x00460068, 0x00000064, 0x00000000, 0xACA7AC47, 0xCCBCBCCB, 0x3773BB07, 0x47B7CC9C, 
0xCCCCCC5C, 0x555585BB, 0x48020000, 0x0083989B, 0xBC9B3701, 0x0030C8CC, 0x0E000943, 0x00000040, 
0x00000000, 0x0CC40C00, 0x000200C6, 0x22000000, 0x00006200, 0x00000000, 0x00000000, 0x9BC999C9, 
0xCCCACC99, 0x8A6745C3, 0x99A9CCCC, 0xC9ACB7C7, 0x22222262, 0xCBCBBCCA, 0x2273BBBB, 0x22222222, 
0x23222222, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 
0x00000000, 0x00000000, 0x9A99AAC9, 0xC9CCCCCC, 0x8C8888C8, 0x99CCCC9A, 0xCBBBBBBB, 0xBBBBBBBB, 
0xCBBCCCCC, 0x88A9AACC, 0x9A888888, 0x8A888888, 0x12000F3B, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x60800000, 0x0000CA00, 0xC85922B2, 0xCCCC6AA6, 0xCCCCBCC7, 
0x222262CA, 0xC84822C2, 0x22222242, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x02000701, 
0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 
0x999999C9, 0xCCBAC9BC, 0x896745C3, 0x99B9CCAC, 0xCA5922C2, 0x22222262, 0x235379C8, 0xAA77CA6B, 
0x96A99A76, 0x8BB8AA46, 0x00800816, 0x00000040, 0x00000000, 0xC0C60A00, 0x2C000006, 0xA6000000, 
0x00000000, 0x00000000, 0x00000000, 0xCBBCBBCB, 0xCBCCCCBC, 0xCACC88C4, 0x9ACCCCBC, 0xCBCCCC0C, 
0x0010CA9A, 0xCCCCCCAA, 0x75B9CCCC, 0x9B143354, 0x979999CA, 0x12000528, 0x20000080, 0x00200000, 
0x00000000, 0x00000000, 0x00000000, 0x000000C4, 0x00000004, 0x00000002, 0xBBBBBBCB, 0xCBCCCCCC, 
0xABCABCC9, 0xAABACCCC, 0xB8CCCC6C, 0x9A666677, 0x77777797, 0xBCAABA9A, 0xCCCCCCCC, 0x9988A9BB, 
0x12000914, 0x00000060, 0x00000000, 0x84C20400, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xCCAB8867, 0x7799CBCC, 0xCCAC6866, 0x6676B9CB, 0xC9CCCC6B, 0x66666676, 0xB9CCCCBC, 
0x66666676, 0x66666666, 0x68666666, 0x12000528, 0x82000080, 0x00800402, 0x00000000, 0x00000000, 
0x00004444, 0x002000CA, 0x0000000A, 0x00000000, 0xAB897867, 0x77A9CBCC, 0x8A666666, 0x98BACCCC, 
0xB9CCCC6B, 0x66666676, 0x00011122, 0x45120000, 0xCCBB9A78, 0x222263CC, 0x0A000943, 0x00000040, 
0x00000000, 0x0CC40C00, 0x000200C6, 0x22000000, 0x00006200, 0x00000000, 0x00000000, 0xCCCCABCC, 
0xC9CCCCCC, 0x9A6845C3, 0x99A9CCCC, 0xC9CCCC5B, 0x11117787, 0xCBCCCCCC, 0x94BBBBAB, 0x01102021, 
0xAB563512, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 
0x00000000, 0x00000000, 0x9A99AAC9, 0xC9CCCCCC, 0x8C8888C8, 0x99CCCC9A, 0xCBBBBBBB, 0xBBBBBBBB, 
0xCBBCCCCC, 0x88A9AACC, 0x9A888888, 0x8A888888, 0x12000F3B, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x60800000, 0x0000CA00, 0x222222B2, 0xC8CC8C24, 0xCCCC7BC3, 
0x222284CC, 0xC6060000, 0x00000031, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x02000701, 
0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 
0xCCCC9BC9, 0xC9CCCCCC, 0x8A6745C3, 0x9999CCCC, 0xCA59860A, 0x10005784, 0xBBCBCCCC, 0xBBBBBBBB, 
0xBBBBBBCC, 0xCCCCCCCC, 0x02000F3B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x60C00000, 0x0000CC00, 0x222222B2, 0xC8CC8C24, 0xCCCC48C2, 0x222284CC, 0xC8480000, 
0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x01000F3B, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x222222B2, 0xC8CC8C24, 
0xCCCC48C2, 0x222284CC, 0xC8480000, 0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 
0x12000521, 0x86000080, 0xCC86A840, 0x0000800C, 0x00000000, 0x000000CC, 0x0406009A, 0x0000008A, 
0x00C00004, 0xBCBBBBCB, 0xBBBBCBCC, 0x896745C3, 0xCABCCC9C, 0xC8BCCC6C, 0x22222252, 0x22223295, 
0x23232222, 0xCCCB9C78, 0x86AACBBC, 0x12000915, 0x00000060, 0x00000000, 0x004C0000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x202600C0, 0xCCCCCC48, 0xCC6922C2, 0x2252B8CC, 
0x4296CC6C, 0x22222222, 0x73CACCBB, 0x22222222, 0x22222222, 0x36222222, 0x02000F3B, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x222222B2, 
0xC8CC8C24, 0xCCCC48C2, 0x222284CC, 0xC8480000, 0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 
0xBBBBBBBB, 0x01000F3B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x60C00000, 0x0000CC00, 0x222222B2, 0xC8CC8C24, 0xCCCC48C2, 0x222284CC, 0xC8480000, 0x00000040, 
0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x1200050F, 0x00000060, 0xCC020000, 0x00000002, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x8C0400C0, 0x0040C8CC, 0xCCBC37C0, 
0x002076B9, 0x4284C96C, 0x22222222, 0x22222292, 0x5A222222, 0x64BACCCC, 0x22222232, 0x12000915, 
0x00000060, 0x00000000, 0x00CC0000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xCCBB9BB9, 0x226484CC, 0xCC892600, 0x0040B8CB, 0xC8CCAC0C, 0x00000040, 0x22A5CCBC, 0x00000021, 
0x00000000, 0x14000000, 0x02000F3B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x60C00000, 0x0000CC00, 0x222222B2, 0xC8CC8C24, 0xCCCC48C2, 0x222284CC, 0xC8480000, 
0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x12000506, 0xCA000060, 0x00C20600, 
0x00000000, 0x00000000, 0x00000080, 0x00000002, 0x00000000, 0x00000000, 0x7A4722B2, 0xA6A8CBCC, 
0x37000000, 0x64BACCBC, 0xC8CBCC0C, 0x63036264, 0x00011122, 0x00000000, 0xCC7B2322, 0x4375B9CC, 
0x12000943, 0x00000040, 0x00000000, 0x0CC10C00, 0x000200C6, 0x22000000, 0x00006200, 0x00000000, 
0x00000000, 0x9A9999C9, 0xCCCCCCCC, 0x896745C3, 0x99B9CCAC, 0xC8CCBC07, 0x51012252, 0xCBCCCCCC, 
0x11022185, 0x00000000, 0x25222200, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00000000, 0x999999C9, 0xCBCCCCCC, 0x896745C3, 0x99A9CCBC, 
0xC9592202, 0x10002262, 0x42B8BACC, 0x01212222, 0x45130121, 0xCCCCCC8B, 0x06000F3B, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x222222B2, 
0xC8CC8C24, 0xCCCC48C2, 0x222284CC, 0xC8480000, 0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 
0xBBBBBBBB, 0x01000F3B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x60C00000, 0x0000CC00, 0x222222B2, 0xC8CC8C24, 0xCCCC48C2, 0x222284CC, 0xC8480000, 0x00000040, 
0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x0C000509, 0xAC000060, 0x00A00A6C, 0x00000000, 
0x00000000, 0x0000AA00, 0x00202046, 0x00000020, 0x00000000, 0xBCCBBBCB, 0xCCBCCBBC, 0x896745C3, 
0x9BCBCCBC, 0xCACCCCCB, 0xCB794665, 0x117346C5, 0x22222212, 0xAB472322, 0xC8CCCCBB, 0x0A00091A, 
0x00000060, 0x00000000, 0x00020800, 0xA80ACA08, 0x66660000, 0x00464400, 0x00000064, 0x00000000, 
0xCCBCAB8B, 0x954582BA, 0xBC6944C3, 0xA779BACB, 0xCBAABBCB, 0x55112273, 0x57959AB9, 0x77B8BBAC, 
0x22122195, 0x8B886813, 0x0C00070F, 0x00000060, 0xCC020000, 0x00000002, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x6A4323B2, 0xBACCCCCC, 0xCBACCAC8, 0x41B7BABB, 0x62CACCCC, 
0x23741422, 0x11212142, 0x35111111, 0xC8A9CCAB, 0x22339667, 0x0A000925, 0x00000080, 0x00000000, 
0x0C880600, 0xA0006046, 0x00AC0000, 0x00008400, 0x00000066, 0x00000000, 0x9C999CCC, 0xC9CAC9CC, 
0x896745C3, 0x99AACCCC, 0xCAACABCC, 0x11112162, 0xCBCCCCBC, 0x11111173, 0x11111111, 0x9B141111, 
0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 
0x00000000, 0xCCCCBCC9, 0xC99BC99C, 0x8B6745C4, 0xCCCCCC9B, 0xC9797777, 0x77777787, 0xCCCCBC99, 
0x5565A8BA, 0x55555555, 0x7A66A857, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xCC9999C9, 0xC9B99CCC, 0x896745C3, 0x99C9CCAC, 
0xC77A56C3, 0x22222232, 0x65A8CCCC, 0x33345333, 0x67133255, 0xCC8A5775, 0x01D60806, 0x06060808, 
0x00000507, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x42424040, 
0x00004240, 0x00000000, 0x00000000, 0xBDBDBDBD, 0x0000BDBD, 0x00000000, 0x00000000, 0xCECECECE, 
0x0000CECE, 0x00000000, 0x00000000, 0x06000F3B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x222222B2, 0xC8CCCC6A, 0xCCCC48C2, 0x222262CA, 
0xC8480000, 0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x01000F3B, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x222222B2, 
0xC8CCCC48, 0xCCBC47C2, 0x222262CA, 0xC84822C2, 0x22222242, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 
0xBBBBBBBB, 0x0C000121, 0x86000080, 0xCC86A840, 0x0000800C, 0x00000000, 0x000000CC, 0x0406008A, 
0x00000088, 0x00C00000, 0xBBBBBBCB, 0xBBBBCBCC, 0x897745C3, 0x99B9CCAC, 0x62CAC90C, 0x00000010, 
0x23010000, 0x6B233256, 0xCCCCCCCC, 0x00002294, 0x12000915, 0x00000060, 0x00000000, 0x44CC0200, 
0x00002002, 0x00000000, 0x00004000, 0x00000000, 0x00000000, 0x480200B0, 0x2096CCCC, 0xCCCC4800, 
0x102243C8, 0x2162C90C, 0x00111011, 0x32C7CCAC, 0x00000022, 0x00000000, 0x14000000, 0x12000122, 
0x82000080, 0xCC86404A, 0x000080C0, 0x00000000, 0x0000CC00, 0x408C008A, 0x00000000, 0x000C0000, 
0x9C9999C9, 0x99CBCCCC, 0x8A6746C3, 0x99B9CCCC, 0xC8CA48C2, 0x22222252, 0x1042A7CB, 0x22132011, 
0x32542322, 0xCCCC7B45, 0x00000714, 0x00000060, 0x00000000, 0x0AB80900, 0x00000084, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x999999C9, 0xC9CCCCCC, 0x896745C3, 0x99B9BCBB, 0xC96A2202, 
0x11002262, 0x423222A2, 0xAAAA6801, 0x516588AA, 0x12001021, 0x00800546, 0x86000040, 0x0080C02C, 
0x0C808600, 0x00000094, 0x00000000, 0x00000000, 0x200A0000, 0x00662000, 0xCCCC9CCC, 0xBC9AACCC, 
0x896745C3, 0xCCCBCCCC, 0xC7272222, 0x22222243, 0x85A8CBBB, 0x00000010, 0x9BA84801, 0xCBCCCCCC, 
0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00000000, 0x999999C9, 0xC9CCCCCC, 0x8A6745C3, 0x99B9CCCC, 0xC86922C2, 0x22222242, 0x333333C3, 
0xCCCCBC6A, 0x9999AACC, 0x43447598, 0x0C000121, 0x86000080, 0xCC86A840, 0x0000800C, 0x00000000, 
0x000000CC, 0x0406008A, 0x00000088, 0x00C00000, 0xBBBBBBCB, 0xBBBBBCBB, 0x896747C3, 0x99B9CB9A, 
0x84CBCC0C, 0x00000021, 0x22010010, 0x5A535622, 0xCCCCCCAC, 0x00002263, 0x12000915, 0x00000060, 
0x00000000, 0x44CC0200, 0x00002002, 0x00000000, 0x00004000, 0x00000000, 0x00000000, 0x260200B0, 
0x2096CCAC, 0xCCCC4800, 0x102243C8, 0x2295CA0C, 0x00222022, 0x42C9CCAC, 0x00000022, 0x00000000, 
0x14000000, 0x06000F3B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x60C00000, 0x0000CC00, 0x222222B2, 0xCCCCCC59, 0xCCCC59C2, 0x222273CB, 0xC8480000, 0x00000040, 
0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x01000F3B, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x232222B2, 0xCCCCCC59, 0xCCCCA8C6, 
0x222295CA, 0xC84822C2, 0x22222242, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x12000122, 
0x82000080, 0xCC86404A, 0x000080C0, 0x00000000, 0x0000CC00, 0x408C008A, 0x00000000, 0x000C0000, 
0xCC9ACAC9, 0x99CCBCCC, 0x8A6745C3, 0x99B9CCCC, 0xC79A8BC4, 0x222232A6, 0x1052B9CB, 0x22022000, 
0x24224422, 0xCCCC5975, 0x00000714, 0x00000060, 0x00000000, 0x0AB80900, 0x00000084, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x9B9999C9, 0xC9CCBCCC, 0x896745C3, 0x99B9BCBB, 0xC9CCCC0B, 
0x11006776, 0x223256A6, 0xAAAA5A01, 0x206687AA, 0x13003021, 0x00800546, 0x86000040, 0x0080C02C, 
0x0C808600, 0x00000094, 0x00000000, 0x00000000, 0x200A0000, 0x00662000, 0xCCCC9CCC, 0xBC9AACCC, 
0x896745C3, 0xCCCBCCCC, 0xC7272222, 0x22222243, 0x85A8CBBB, 0x00000010, 0x9BA84801, 0xCBCCCCCC, 
0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00000000, 0x9C9999CC, 0xC9CCCCBB, 0x8A6745C3, 0x99B9CCCC, 0xC79A99C7, 0x22223333, 0x333366C8, 
0xCCCCBC6A, 0x9999A9CC, 0x43447598, 0x06000F3B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x222222B2, 0xC8CC8C24, 0xCCCC48C2, 0x222284CC, 
0xC8480000, 0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x01000F3B, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x222222B2, 
0xC8CC8C24, 0xCCCC48C2, 0x222284CC, 0xC8480000, 0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 
0xBBBBBBBB, 0x0C000122, 0x82000080, 0xCC86404A, 0x000080C0, 0x00000000, 0x0000CC00, 0x408C008A, 
0x00000000, 0x00000000, 0xBBBCBBCB, 0xBBBBCBCC, 0x896745C3, 0x99B9CCAC, 0xCC696666, 0x6666CCCC, 
0x001141C9, 0x00000000, 0x89360000, 0xCCCCBCCA, 0x1200091C, 0x00000060, 0x00000000, 0x00000000, 
0x00C04800, 0x00000000, 0x00002400, 0x00000000, 0x00000000, 0xBC684522, 0x62BBCACC, 0xC8CC8CC8, 
0x888888C8, 0xCBABAAAA, 0xCAAACCAB, 0x99999999, 0xCCCC99CC, 0x99999999, 0x99999999, 0x0C000121, 
0x86000080, 0xCC86A840, 0x0000800C, 0x00000000, 0x000000CC, 0x0406008A, 0x00000088, 0x00000000, 
0xBACCCCCC, 0xB9CCCABC, 0x8C8888C8, 0x999999CC, 0xCBABAAAA, 0xAAAAAAAA, 0x99B99999, 0x99999999, 
0xBA999999, 0xC9CC9CB9, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00000000, 0x9BB9BCC9, 0x9CBCA9AA, 0x999999C9, 0x9999C99C, 0xCBABAAAA, 
0xAAAAAAAA, 0xAAAABCCC, 0xAAAAAAAA, 0xACAAAAAA, 0xACAACCAA, 0x0C000122, 0x82000080, 0xCC86404A, 
0x000080C0, 0x00000000, 0x0000CC00, 0x408C008A, 0x00000000, 0x00000000, 0xBBBCBBCB, 0xBBBBCBCC, 
0x896745C3, 0x99B9CCAC, 0xCC696666, 0x6666CCCC, 0x001141C9, 0x00000000, 0x89360000, 0xCCCCBCCA, 
0x1200091C, 0x00000060, 0x00000000, 0x00000000, 0x00C04800, 0x00000000, 0x00002400, 0x00000000, 
0x00000000, 0xBC684522, 0x62BBCACC, 0xC8CC8CC8, 0x888888C8, 0xCBABAAAA, 0xCAAACCAB, 0x99999999, 
0xCCCC99CC, 0x99999999, 0x99999999, 0x06000F3B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x222222B2, 0xC8CC8C24, 0xCCCC48C2, 0x222284CC, 
0xC8480000, 0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x01000F3B, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x222222B2, 
0xC8CC8C24, 0xCCCC48C2, 0x222284CC, 0xC8480000, 0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 
0xBBBBBBBB, 0x0C000121, 0x86000080, 0xCC86A840, 0x0000800C, 0x00000000, 0x000000CC, 0x0406008A, 
0x00000088, 0x00000000, 0xBACCCCCC, 0xB9CCCABC, 0x8C8888C8, 0x999999CC, 0xCBABAAAA, 0xAAAAAAAA, 
0x99B99999, 0x99999999, 0xBA999999, 0xC9CC9CB9, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0x9BB9BCC9, 0x9CBCA9AA, 0x999999C9, 
0x9999C99C, 0xCBABAAAA, 0xAAAAAAAA, 0xAAAABCCC, 0xAAAAAAAA, 0xACAAAAAA, 0xACAACCAA, 0x0C000121, 
0x86000080, 0xCC86A840, 0x0000800C, 0x00000000, 0x000000CC, 0x0406008A, 0x00000088, 0x00C00000, 
0xBBBBBBCB, 0xBBBBBCCC, 0x896745C3, 0x99B9CCAC, 0x84CBCCCC, 0x22222222, 0x43222232, 0x9B575555, 
0xCCCCCCCC, 0x22224285, 0x12000915, 0x00000060, 0x00000000, 0x44CC0200, 0x00002002, 0x00000000, 
0x00004000, 0x00000000, 0x00000000, 0x481211B1, 0x2196CCCC, 0xCCCC6AC2, 0x112243C8, 0x84CBCACC, 
0x22442234, 0x86CCCCBC, 0x22222252, 0x22222222, 0x25222222, 0x12000122, 0x82000080, 0xCC86404A, 
0x000080C0, 0x00000000, 0x0000CC00, 0x408C008A, 0x00000000, 0x000C0000, 0xCC9CAACA, 0xC9C999CC, 
0xCB8869C3, 0x99A9CCAB, 0xC7BBAACC, 0x22225265, 0xCBCCACCA, 0x75B9BBBB, 0x9CA9BC79, 0xCA9BA9CB, 
0x00000714, 0x00000060, 0x00000000, 0x0AB80900, 0x00000084, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xBCAB99C9, 0xCCBBCBCC, 0x896745C3, 0xCCCCBC99, 0xC9CCCC0B, 0x11006776, 0x72CBCCAC, 
0x00000000, 0x00000000, 0x14001021, 0x12000F3B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x60800000, 0x0000CA00, 0xA77734B3, 0xCBCCBCA7, 0xCCCC7BC3, 0x3374BAAC, 
0xC83833C3, 0x33333344, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x00800546, 0x86000040, 
0x0080C02C, 0x0C808600, 0x00000094, 0x00000000, 0x00000000, 0x200A0000, 0x00662000, 0xCCCC9CCC, 
0xBC9AACCC, 0x896745C3, 0xCCCBCCCC, 0xC7272222, 0x22222243, 0x85A8CBBB, 0x00000010, 0x9BA84801, 
0xCBCCCCCC, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00000000, 0xCCCC9BC9, 0xCACCCBCC, 0x8A6745C3, 0x99B9CCCC, 0xC6CCCC09, 0x00001231, 
0xBBCBCCCC, 0xCCCCBCBB, 0xBBBBBBCC, 0xCCCCCCCC, 0x0C000122, 0x82000080, 0xCC86404A, 0x000080C0, 
0x00000000, 0x0000CC00, 0x408C008A, 0x00000000, 0x00000000, 0xBBBCBBCB, 0xBBBBCBCC, 0x896745C3, 
0x99B9CCAC, 0xCC696666, 0x6666CCCC, 0x001141C9, 0x00000000, 0x89360000, 0xCCCCBCCA, 0x1200091C, 
0x00000060, 0x00000000, 0x00000000, 0x00C04800, 0x00000000, 0x00002400, 0x00000000, 0x00000000, 
0xBC684522, 0x62BBCACC, 0xC8CC8CC8, 0x888888C8, 0xCBABAAAA, 0xCAAACCAB, 0x99999999, 0xCCCC99CC, 
0x99999999, 0x99999999, 0x0C000121, 0x86000080, 0xCC86A840, 0x0000800C, 0x00000000, 0x000000CC, 
0x0406008A, 0x00000088, 0x00000000, 0xBACCCCCC, 0xB9CCCABC, 0x8C8888C8, 0x999999CC, 0xCBABAAAA, 
0xAAAAAAAA, 0xCBCCCCCC, 0x99BBBBAB, 0xBCABAA99, 0xCCCCBCCB, 0x12000F3B, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60800000, 0x0000CA00, 0x222222B2, 0xC8CC8C24, 
0xCCCC7BC3, 0x222284CC, 0xC6060000, 0x00000031, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 
0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00000000, 0x9BB9BCC9, 0x9CBCA9AA, 0x999999C9, 0x9999C99C, 0xCBABAAAA, 0xAAAAAAAA, 0xBBCBCCCC, 
0xBBBBBBBB, 0xBCBBBBCC, 0xCCCCCCCC, 0x00F62A07, 0x06060606, 0x00050506, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC2C2C0C0, 0x00C2C0C0, 0x00000000, 0x00000000, 
0x78787878, 0x00787878, 0x00000000, 0x00000000, 0x57575757, 0x00575757, 0x00000000, 0x00000000, 
0x06000F3B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60C00000, 
0x0000CC00, 0x252222B2, 0xC8CCBC67, 0xCCCC48C2, 0x222295CC, 0xC8480000, 0x00000040, 0xBBBBBBBB, 
0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x01000F3B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x222222B2, 0xC9CCCC48, 0xCCBC37C2, 0x222284CC, 
0xC84822C2, 0x22222242, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x12000521, 0x86000080, 
0xCC86A940, 0x0000800C, 0x00000000, 0x000000CC, 0x0406009A, 0x0000008A, 0x00C00000, 0xBBBBBBCB, 
0xBBBBCCCC, 0x89A746C3, 0x99B9CCCC, 0x42B8CB0C, 0x47001111, 0x01102263, 0x79342422, 0xCCCCCCCC, 
0x56237498, 0x12000915, 0x00000060, 0x00000000, 0x44CC0200, 0x00002002, 0x00000000, 0x00004000, 
0x00000000, 0x00000000, 0x9B4632C6, 0x75BACCCC, 0xCCBC37C0, 0x0044B8CC, 0xA6C9CC0C, 0x00111121, 
0x86CCCCBC, 0x00102163, 0x00000000, 0x14000000, 0x12000522, 0x88000080, 0xCC86404A, 0x000080C0, 
0x00000000, 0x0000CC00, 0x408C008A, 0x00000000, 0x000C0000, 0xCC9CAAB9, 0xA99ACACC, 0xCBAA68C4, 
0x99B9CCCC, 0xC869B70C, 0x11204784, 0x78BABBCC, 0x45325377, 0x9876A988, 0xCCBBBB9B, 0x01000701, 
0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 
0x9C9999C9, 0xCACCCCCC, 0x896745C3, 0x99A9CCAC, 0xC8BA8B04, 0x22002252, 0xBA89B8CA, 0xCCCCBCAA, 
0x9989A9CC, 0x48447598, 0x0C000521, 0x86000080, 0xCC86A940, 0x0000800C, 0x00000000, 0x000000CC, 
0x0406009A, 0x0000008A, 0x00C00000, 0xBBBBBBCB, 0xBBBBCBCC, 0x996745C3, 0x99A9CCCC, 0xA6B8CCCC, 
0x59111121, 0x01102262, 0x8B572222, 0xCBCCCCCC, 0x222285AB, 0x12000915, 0x00000060, 0x00000000, 
0x44CC0200, 0x00002002, 0x00000000, 0x00004000, 0x00000000, 0x00000000, 0x9B2632C2, 0x75BACCCC, 
0xCCAC26C1, 0x112173CB, 0x42A7CBCC, 0x11221122, 0xC7CCCCBC, 0x00102132, 0x00000000, 0x14000000, 
0x06000F3B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60C00000, 
0x0000CC00, 0x222222B2, 0xCCCCCC59, 0xCCCCBBC7, 0x222284CC, 0xC84822C2, 0x22222242, 0xBBBBBBBB, 
0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x01000F3B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x222222B2, 0xCCCCBC47, 0xCCCC48C2, 0x222284CC, 
0xC84822C2, 0x22222242, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x12000522, 0x88000080, 
0xCC86404A, 0x000080C0, 0x00000000, 0x0000CC00, 0x408C008A, 0x00000000, 0x000C0000, 0xCCCCCCBC, 
0xCA9A99A9, 0xCCAB88C4, 0x99B9CCCC, 0xC8CBC9CC, 0x22848656, 0x75BABBCC, 0x45224233, 0xBCAAAA88, 
0xCCBBBBCB, 0x01000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00000000, 0x999B99C9, 0xCCCBCCCC, 0x896945C3, 0xACCCCCAC, 0xC8CCBCC8, 0x22222252, 
0x3373CBCC, 0xCCCCBC6A, 0x9999A9CC, 0x888A9898, 0x06000F3B, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x222222B2, 0xC8CC8C24, 0xCCCC48C2, 
0x222284CC, 0xC8480000, 0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x01000F3B, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 
0x222222B2, 0xC8CC8C24, 0xCCCC48C2, 0x222284CC, 0xC8480000, 0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 
0xAAAAAAAA, 0xBBBBBBBB, 0x12000522, 0x82000080, 0xCC86404A, 0x000080C0, 0x00000000, 0x0000CC00, 
0x408C008A, 0x00000000, 0x00000000, 0xBBCCBBCB, 0xBBBBCCCC, 0x896755C3, 0x99CACC9C, 0x35420200, 
0x0000CC79, 0x00207697, 0x00000000, 0x99260000, 0xCCCCCCAC, 0x1200091C, 0x00000060, 0x00000000, 
0x00000000, 0x00C04800, 0x00000000, 0x00002400, 0x00000000, 0x00000000, 0x999999C9, 0x99BACCCC, 
0xCCCC48C0, 0x0051B9CC, 0xC6160000, 0x3400CC79, 0x14002122, 0xCCCCBC9B, 0x000051B7, 0x00000000, 
0x12000521, 0x86000080, 0xCC86A840, 0x0000800C, 0x00000000, 0x000000CC, 0x0406008A, 0x00000088, 
0x00000000, 0xCCBCCBCB, 0x9999B9CC, 0x896745C3, 0x9999CCCC, 0xCB9A4800, 0x0000AABB, 0x3276B8CC, 
0x00102321, 0x02000000, 0xCCCCAC46, 0x01000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xBB9999C9, 0xCBBCCCCC, 0x898745C3, 0xB99ACCCC, 
0xC6CCBB09, 0x00000031, 0x41CACCCC, 0x00000000, 0x37001101, 0xBC99CABC, 0x12000522, 0x82000080, 
0xCC86404A, 0x000080C0, 0x00000000, 0x0000CC00, 0x408C008A, 0x00000000, 0x00000000, 0xBBCCBBCB, 
0xBBBBCCCC, 0x896755C3, 0x99CACC9C, 0x35420200, 0x0000CC79, 0x00207697, 0x00000000, 0x99260000, 
0xCCCCCCAC, 0x1200091C, 0x00000060, 0x00000000, 0x00000000, 0x00C04800, 0x00000000, 0x00002400, 
0x00000000, 0x00000000, 0x999999C9, 0x99BACCCC, 0xCCCC48C0, 0x0051B9CC, 0xC6160000, 0x3400CC79, 
0x14002122, 0xCCCCBC9B, 0x000051B7, 0x00000000, 0x06000F3B, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x222222B2, 0xC8CC8C24, 0xCCCC48C2, 
0x222284CC, 0xC8480000, 0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x01000F3B, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 
0x222222B2, 0xC8CC8C24, 0xCCCC48C2, 0x222284CC, 0xC8480000, 0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 
0xAAAAAAAA, 0xBBBBBBBB, 0x12000521, 0x86000080, 0xCC86A840, 0x0000800C, 0x00000000, 0x000000CC, 
0x0406008A, 0x00000088, 0x00000000, 0xCCBCCBCB, 0x9999B9CC, 0x896745C3, 0x9999CCCC, 0xCB9A4800, 
0x0000AABB, 0x3276B8CC, 0x00102321, 0x02000000, 0xCCCCAC46, 0x01000701, 0x022CC64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xBB9999C9, 0xCBBCCCCC, 
0x898745C3, 0xB99ACCCC, 0xC6CCBB09, 0x00000031, 0x41CACCCC, 0x00000000, 0x37001101, 0xBC99CABC, 
0x03000F3B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60C00000, 
0x0000CC00, 0x222222B2, 0xCCCCCC48, 0xCCCC48C2, 0x222232B7, 0xC84822C2, 0x22222242, 0xBBBBBBBB, 
0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x12000521, 0x86000080, 0xCC86A940, 0x0000800C, 0x00000000, 
0x000000CC, 0x0406009A, 0x0000008A, 0x00C00000, 0xBCBBBBCB, 0xCBBBCBCC, 0x89876AC3, 0x99A9CCCC, 
0xB8AACCCC, 0x22112252, 0x22222262, 0x8B572422, 0xA9CCCCCC, 0x2222A5AB, 0x12000915, 0x00000060, 
0x00000000, 0x44CC0200, 0x00002002, 0x00000000, 0x00004000, 0x00000000, 0x00000000, 0x7B2532C2, 
0x75BBCCCC, 0xCCBC6AC2, 0x732362CA, 0x62CACCCC, 0x11222222, 0x63CBCCBC, 0x22222222, 0x22222222, 
0x25222222, 0x03000F3B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x60C00000, 0x0000CC00, 0x222222B2, 0xCCACCC48, 0xCCCBB8C7, 0x222284CC, 0xC84822C2, 0x22222242, 
0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x12000522, 0x88000080, 0xCC86404A, 0x000080C0, 
0x00000000, 0x0000CC00, 0x408C008A, 0x00000000, 0x000C0000, 0xCCCCCCB9, 0x9AC99BC9, 0xACBB68C4, 
0x99B9CCCC, 0xC9CCCCCC, 0x22112262, 0x75BABBCC, 0x45225258, 0xACA9AA88, 0xCCBBBBCB, 0x01000701, 
0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 
0xCC999BC9, 0x9CCCCC9B, 0x8B6945C3, 0xCBAACCAC, 0xC9CCACCA, 0x22222262, 0x33B7CCCC, 0xCCCCBC6A, 
0x99AAAACC, 0xAC66A898, 0x0C000521, 0x86000080, 0xCC86A940, 0x0000800C, 0x00000000, 0x000000CC, 
0x0406009A, 0x0000008A, 0x00C00000, 0xBBBBBBCB, 0xBCBCCCBC, 0xB96745C3, 0x99A9CCCC, 0x62B8CACC, 
0x23222222, 0x22222262, 0x9B372222, 0xBCCBCCCC, 0x222252CA, 0x12000915, 0x00000060, 0x00000000, 
0x44CC0200, 0x00002002, 0x00000000, 0x00004000, 0x00000000, 0x00000000, 0xBB5732C2, 0xA6BBCCCC, 
0xCCAC6AC2, 0x22637AC9, 0x32A7CACC, 0x22222222, 0x63CBCCBC, 0x22222222, 0x22222222, 0x23222222, 
0x12000522, 0x88000080, 0xCC86404A, 0x000080C0, 0x00000000, 0x0000CC00, 0x408C008A, 0x00000000, 
0x000C0000, 0xCCBCC9B9, 0xC9A999C9, 0xCC8B45C3, 0x9999CCCC, 0xC8AAABCC, 0x22222252, 0x7B2332C6, 
0x6975CACC, 0x6A44A6AA, 0xAC3563BA, 0x12000F3B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x60800000, 0x0000CA00, 0x222222B2, 0xCCCC6A22, 0xCCCC8CC4, 0x222284AC, 
0xC84822C2, 0x22222242, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x02000701, 0x022CC64C, 
0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xC99999C9, 
0xCC9CC9CC, 0x8A6745C3, 0x99CACCCC, 0xCA6ABACA, 0x22222262, 0x9887CBCC, 0x75CBCC9C, 0x22222263, 
0x9B866A23, 0x12000522, 0x82000080, 0xCC86404A, 0x000080C0, 0x00000000, 0x0000CC00, 0x408C008A, 
0x00000000, 0x00000000, 0xBBCCBBCB, 0xBBBBCCCC, 0x896755C3, 0x99CACC9C, 0x35420200, 0x0000CC79, 
0x00207697, 0x00000000, 0x99260000, 0xCCCCCCAC, 0x1200091C, 0x00000060, 0x00000000, 0x00000000, 
0x00C04800, 0x00000000, 0x00002400, 0x00000000, 0x00000000, 0x999999C9, 0x99BACCCC, 0xCCCC48C0, 
0x0051B9CC, 0xC6160000, 0x3400CC79, 0x14002122, 0xCCCCBC9B, 0x000051B7, 0x00000000, 0x12000521, 
0x86000080, 0xCC86A840, 0x0000800C, 0x00000000, 0x000000CC, 0x0406008A, 0x00000088, 0x00000000, 
0xCCBCCBCB, 0x9999B9CC, 0x896745C3, 0x9999CCCC, 0xCB9A4800, 0x0000AABB, 0xCBCCCCCC, 0x95BBBBAB, 
0xBCABAA68, 0xCCCCBCCB, 0x12000F3B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x60800000, 0x0000CA00, 0x222222B2, 0xC8CC8C24, 0xCCCC7BC3, 0x222284CC, 0xC6060000, 
0x00000031, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x02000701, 0x022CC64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xBB9999C9, 0xCBBCCCCC, 
0x898745C3, 0xB99ACCCC, 0xC6CCBB09, 0x00000031, 0xBBCBCCCC, 0xBBBBBBBB, 0xBBBBBBCC, 0xCCCCCCCC, 
0x01DC0804, 0x06060808, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x42424040, 0x00000000, 0x00000000, 0x00000000, 0xBDBDBDBD, 0x00000000, 0x00000000, 
0x00000000, 0xCECECECE, 0x00000000, 0x00000000, 0x00000000, 0x0080031F, 0x00000020, 0x20000000, 
0xA0000800, 0xAC00800A, 0x44000000, 0x00004400, 0x00000000, 0x00000000, 0xCCCCCBCC, 0xBCBBBBBB, 
0x898888C8, 0x999999C9, 0xCCCCCCCC, 0xCCCCCCCC, 0xCBAC9B88, 0x888898CC, 0x88888888, 0x88888888, 
0x06000F3B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60C00000, 
0x0000CC00, 0x232222B2, 0xA7CCCC7B, 0xCCCC48C2, 0x222262CA, 0xC84822C2, 0x22222242, 0xBBBBBBBB, 
0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x01000F3B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x222222B2, 0xC8CCCC59, 0xCCCC48C2, 0x222284CC, 
0xC8480000, 0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x08000142, 0xCC000040, 
0x20C60C4C, 0x00000008, 0x00002000, 0x00000040, 0x0022006A, 0x00000022, 0x00000000, 0xBBBCBBCB, 
0xBBCBCBBC, 0xAB6745C3, 0x9AA9CBAC, 0xC7CC8CC5, 0x22226259, 0x22222232, 0x22222222, 0xCC9B3722, 
0x2273A9CB, 0x06000914, 0x00000060, 0x00000000, 0xAAC80A00, 0x00000004, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x7B2522B2, 0x2262C9CC, 0x592222C2, 0x2232B7CC, 0xC8CCBCC6, 0x22222242, 
0xA8CCCCBC, 0x22222242, 0x22222222, 0x23222222, 0x0A000106, 0xCA000060, 0x22C2A62A, 0x00008002, 
0x00000000, 0x00006686, 0x004600AA, 0x00000044, 0x00000000, 0x999999B9, 0x9999CBCC, 0x8B6745C3, 
0x9999A9CC, 0xCACCACC6, 0x22222252, 0x22222232, 0x22222222, 0xCC7A2222, 0x222285CB, 0x04000943, 
0x00000040, 0x00000000, 0x0CC40C00, 0x000200C6, 0x22000000, 0x00006200, 0x00000000, 0x00000000, 
0xCCCB9CCC, 0x999ACC9C, 0x8BB747C3, 0x99A9CCCC, 0xC8CCBBC7, 0x22222242, 0xCBCCCCBC, 0x222232A7, 
0x48222222, 0x77582243, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00000000, 0xB9CC99C9, 0xC999CCCC, 0x8B6745C3, 0x9999CBAC, 0xC73722C2, 
0x22222252, 0x63BA8BC9, 0x22222222, 0x99252222, 0x6A86BBCC, 0x0080031F, 0x00000020, 0x20000000, 
0xA0000800, 0xAC00800A, 0x44000000, 0x00004400, 0x00000000, 0x00000000, 0xBBBBBCCB, 0xBBBBCBBB, 
0x896745C3, 0xB99BBB99, 0xCC7B24C2, 0x22848CC8, 0xCCBC4783, 0x74AA57B7, 0x33333333, 0x33333333, 
0x08000142, 0xCC000040, 0x20C60C4C, 0x00000008, 0x00002000, 0x00000040, 0x0022006A, 0x00000022, 
0x00000000, 0xBBBBBBCB, 0xCCCBBCCC, 0xBB6745C3, 0x9999CACC, 0xC7CCBCC7, 0x22222232, 0x22222232, 
0x22222222, 0xCCAB3722, 0x2232A7CB, 0x06000914, 0x00000060, 0x00000000, 0xAAC80A00, 0x00000004, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x7B2522B2, 0x2262C9CC, 0x592222C2, 0x222284CC, 
0xC8CCBCC8, 0x22222242, 0xA5CCCCBC, 0x22222222, 0x22222222, 0x23222222, 0x06000F3B, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x242222B2, 
0xC8CCCC8C, 0xCCCC48C2, 0x222262CA, 0xC84822C2, 0x22222242, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 
0xBBBBBBBB, 0x01000F3B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x60C00000, 0x0000CC00, 0x222222B2, 0xC8CCCC59, 0xCBCC48C2, 0x22222273, 0xC84822C2, 0x22222242, 
0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x0A000106, 0xCA000060, 0x22C2A62A, 0x00008002, 
0x00000000, 0x00006686, 0x004600AA, 0x00000044, 0x00000000, 0x999999B9, 0x9999C9CC, 0x8B6745C3, 
0x9999C9CC, 0xCACCCCCA, 0x22222252, 0x22222232, 0x22222222, 0xCC7A2222, 0x222285CB, 0x04000943, 
0x00000040, 0x00000000, 0x0CC40C00, 0x000200C6, 0x22000000, 0x00006200, 0x00000000, 0x00000000, 
0x99BC99C9, 0x99CCC9CC, 0x8B6745C3, 0x9999CACC, 0xC8CC9BC7, 0x22222242, 0xCBCCCCBC, 0x222232A7, 
0x48222222, 0x77582243, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00000000, 0xCB9999C9, 0xBCBBCC9C, 0x8B6745C3, 0x9999C9CC, 0xC73722C2, 
0x22222252, 0xA5BACCCC, 0x22222222, 0x59222222, 0xCCCCCC98, 0x06000F3B, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x222222B2, 0xC8CC8C24, 
0xCCCC48C2, 0x222284CC, 0xC8480000, 0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 
0x01000F3B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60C00000, 
0x0000CC00, 0x222222B2, 0xC8CC8C24, 0xCCCC48C2, 0x222284CC, 0xC8480000, 0x00000040, 0xBBBBBBBB, 
0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x1200010B, 0xC2000060, 0x20C60C2A, 0x00000008, 0x00000000, 
0x00000044, 0x00460068, 0x00000064, 0x00000000, 0xBBBCBBCB, 0xCBCCCCCC, 0x8B6745C3, 0x99A9CACC, 
0xCACCCC8A, 0x88888898, 0x00000000, 0x00000000, 0xCCAC1500, 0x208696CC, 0x12000915, 0x00000060, 
0x00000000, 0x44CC0200, 0x00000002, 0x00000000, 0x00004000, 0x00000000, 0x00000000, 0x7B3522C2, 
0xA797CABC, 0x48000000, 0x63B8CCCC, 0xCACCCC8C, 0x88888898, 0x66B7CCAC, 0x00000020, 0x00000000, 
0x14000000, 0x12000112, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 
0x00000000, 0x00000000, 0x999999C9, 0xC9CC9BCC, 0xA96745C3, 0x9999CBCC, 0xCA8A8888, 0x88888898, 
0x107478CA, 0x00000000, 0x89672400, 0xCBCCCC9A, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xCCCC9CC9, 0xB99BCCCB, 0x896745C3, 
0x99B9CC9C, 0xCA8A8888, 0x88888898, 0xAB892411, 0x77B9CCCC, 0x75774731, 0x21010030, 0x1200010B, 
0xC2000060, 0x20C60C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00000000, 
0xBBBCBBCB, 0xCBCCCCCC, 0x8B6745C3, 0x99A9CACC, 0xCACCCC8A, 0x88888898, 0x00000000, 0x00000000, 
0xCCAC1500, 0x208696CC, 0x12000915, 0x00000060, 0x00000000, 0x44CC0200, 0x00000002, 0x00000000, 
0x00004000, 0x00000000, 0x00000000, 0x7B3522C2, 0xA797CABC, 0x48000000, 0x63B8CCCC, 0xCACCCC8C, 
0x88888898, 0x66B7CCAC, 0x00000020, 0x00000000, 0x14000000, 0x06000F3B, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x222222B2, 0xC8CC8C24, 
0xCCCC48C2, 0x222284CC, 0xC8480000, 0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 
0x01000F3B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60C00000, 
0x0000CC00, 0x222222B2, 0xC8CC8C24, 0xCCCC48C2, 0x222284CC, 0xC8480000, 0x00000040, 0xBBBBBBBB, 
0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x12000112, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 
0x00004400, 0x00000000, 0x00000000, 0x00000000, 0x999999C9, 0xC9CC9BCC, 0xA96745C3, 0x9999CBCC, 
0xCA8A8888, 0x88888898, 0x107478CA, 0x00000000, 0x89672400, 0xCBCCCC9A, 0x02000701, 0x022CC64C, 
0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xCCCC9CC9, 
0xB99BCCCB, 0x896745C3, 0x99B9CC9C, 0xCA8A8888, 0x88888898, 0xAB892411, 0x77B9CCCC, 0x75774731, 
0x21010030, 0x00FC2A08, 0x09090909, 0x05080606, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xC0C0C0C0, 0xC2C0C2C2, 0x00000000, 0x00000000, 0x78787878, 0x78787878, 
0x00000000, 0x00000000, 0x57575757, 0x57575757, 0x00000000, 0x00000000, 0x00800716, 0x00000040, 
0x00000000, 0xC0C60A00, 0x5C000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCCBCCB, 
0xBBCBBBBB, 0xA96748C3, 0xA9CCCAAC, 0xCBCCAA07, 0x20002284, 0xCCCCA9BB, 0x123297CB, 0x11111122, 
0x23111111, 0x01000F3B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x60C00000, 0x0000CC00, 0x222222B2, 0xCACCCC48, 0xCCAA26C2, 0x222262CA, 0xC84822C2, 0x22222242, 
0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x04000542, 0xCC000040, 0x20C60C4C, 0x00000008, 
0x00002000, 0x00000042, 0x0022008A, 0x00000022, 0x00C00007, 0xBCBBBBCB, 0xBBBBCBCC, 0x896745C3, 
0x99C9CCBC, 0xC9CCCC0C, 0x43004387, 0x00001042, 0x01000000, 0xCCBC7836, 0x223297CC, 0x00000733, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000800, 0x00000000, 
0xB8BC6883, 0x002194AC, 0xCC7B0300, 0x0084CCCC, 0xC6060000, 0xCC00AC78, 0x00001083, 0x00000000, 
0xAC140000, 0x65BACCCC, 0x0C000914, 0x00000060, 0x00000000, 0xAAC80A00, 0x00000004, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xBB6822B2, 0x2273C8CC, 0x48000000, 0x1073CBCC, 0xC8CCCC09, 
0x00000040, 0xA7CCCCBC, 0x00100052, 0x00000000, 0x03000100, 0x06000F3B, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x222222B2, 0xC9CC9C48, 
0xCCCC7BC3, 0x52222296, 0xC8480000, 0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 
0x0C000506, 0xCA000060, 0x22C2A62A, 0x00008002, 0x00000000, 0x00006686, 0x004600AA, 0x00000044, 
0x00000000, 0x9C9999B9, 0x9999C9CC, 0x89674523, 0x99B9CCBC, 0xCACCCC0C, 0x30000084, 0x00002232, 
0x00001000, 0xCC9B4702, 0x4385CBCC, 0x04000943, 0x00000040, 0x00000000, 0x0CC40C00, 0x000200C6, 
0x22000000, 0x00006200, 0x00000000, 0x00000000, 0x999999C9, 0xCACCCCBC, 0x896745C3, 0x99B9CCBC, 
0xC8CCAB07, 0x00002041, 0xCCCCCCCC, 0x12306697, 0x01223311, 0x79457545, 0x01000701, 0x022CC64C, 
0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0x9B9999C9, 
0xCBCCCCBC, 0x896745C3, 0x99B9CCCC, 0xC6AB8904, 0x44408656, 0x74AACCCC, 0x22336446, 0x68021110, 
0xCBCCCCCC, 0x00800716, 0x00000040, 0x00000000, 0xC0C60A00, 0x5C000006, 0xA6000000, 0x00000000, 
0x00000000, 0x00000000, 0xCCCCBBCB, 0xCBCBCCCC, 0x896745C3, 0xB9CCCCCC, 0xCACCBC0A, 0x50005398, 
0xCCCCCCBB, 0x015177C9, 0x00000021, 0x24000000, 0x06000F3B, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x232222B2, 0xC8CCCC7A, 0xCCBA37C2, 
0x222262CA, 0xC8480000, 0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x04000542, 
0xCC000040, 0x20C60C4C, 0x00000008, 0x00002000, 0x00000042, 0x0022008A, 0x00000022, 0x00C00007, 
0xBBBCBBCB, 0xBBBBCBCC, 0x896745C3, 0x99C9CCBC, 0xC9CCCC0C, 0x43004387, 0x00001042, 0x01000000, 
0xCC9C7724, 0x222284CC, 0x00000733, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000800, 0x00000000, 0xB8BC6883, 0x002194AC, 0xCC7B0300, 0x0084CCCC, 0xC6060000, 
0xCC00AC78, 0x00001083, 0x00000000, 0xAC140000, 0x65BACCCC, 0x0C000914, 0x00000060, 0x00000000, 
0xAAC80A00, 0x00000004, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x9B6974B3, 0x2262CACC, 
0x48000000, 0x1073CBCC, 0xC8CCCC09, 0x00000040, 0xA7CCCCBC, 0x00000052, 0x00000000, 0x03000100, 
0x01000F3B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60C00000, 
0x0000CC00, 0x222222B2, 0xC8CC8C24, 0xCCCC48C2, 0x222284CC, 0xC84833C3, 0x33333343, 0xBBBBBBBB, 
0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x0C000506, 0xCA000060, 0x22C2A62A, 0x00008002, 0x00000000, 
0x00006686, 0x004600AA, 0x00000044, 0x00000000, 0x9C9999B9, 0x9999CCCC, 0x89674523, 0x99B9CABC, 
0xC9CCCC08, 0x00001095, 0x00002232, 0x00001000, 0xCC9B6803, 0x4385CBCC, 0x04000943, 0x00000040, 
0x00000000, 0x0CC40C00, 0x000200C6, 0x22000000, 0x00006200, 0x00000000, 0x00000000, 0x9C9999C9, 
0xC9CCCCCC, 0x896745C3, 0x99C9CCBC, 0xC9CC9B07, 0x00000073, 0xCCCCCCCC, 0x12002195, 0x44112011, 
0x96767555, 0x01000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00000000, 0x999999C9, 0xCCBCCCAC, 0x896745C3, 0x99A9CCCC, 0xC8480000, 0x00000040, 
0x429866C8, 0x22222222, 0x49120200, 0xCCCCCCCC, 0x00800716, 0x00000040, 0x00000000, 0xC0C60A00, 
0x5C000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 0xCCBCBCCB, 0xBBBBBBBC, 0x896745C3, 
0x99ACCCAC, 0xCBBCB8CA, 0x322232A7, 0xCCBCAABB, 0x124275C9, 0x11111132, 0x35111111, 0x04000542, 
0xCC000040, 0x20C60C4C, 0x00000008, 0x00002000, 0x00000042, 0x0022008A, 0x00000022, 0x00C00007, 
0xBCBBBBCB, 0xBBBBCBCC, 0x896745C3, 0x99C9CCBC, 0xC9CCCC0C, 0x43004387, 0x00001042, 0x01000000, 
0xCC9C6736, 0x2232A6CC, 0x00000733, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000800, 0x00000000, 0xB8BC6883, 0x002194AC, 0xCC7B0300, 0x0084CCCC, 0xC6060000, 
0xCC00AC78, 0x00001083, 0x00000000, 0xAC140000, 0x65BACCCC, 0x0C000914, 0x00000060, 0x00000000, 
0xAAC80A00, 0x00000004, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xBB6825B4, 0x2252C9CC, 
0x26000000, 0x1073CBAC, 0xC8CCCC09, 0x00000040, 0xA7CCCCBC, 0x00000052, 0x00000000, 0x03000100, 
0x06000F3B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60C00000, 
0x0000CC00, 0x222222B2, 0xCCCCBC37, 0xCACC59C2, 0x22222284, 0xC8480000, 0x00000040, 0xBBBBBBBB, 
0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x01000F3B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x222222B2, 0xCCCCAC26, 0xCCCC48C2, 0x222284CA, 
0xC8480000, 0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x0C000506, 0xCA000060, 
0x22C2A62A, 0x00008002, 0x00000000, 0x00006686, 0x004600AA, 0x00000044, 0x00000000, 0x9C9999B9, 
0x99B9C9CC, 0x89674523, 0x99B9CCAC, 0xC8CCCC0C, 0x62020040, 0x00002232, 0x00001000, 0xCC9B4702, 
0x5386CBCC, 0x04000943, 0x00000040, 0x00000000, 0x0CC40C00, 0x000200C6, 0x22000000, 0x00006200, 
0x00000000, 0x00000000, 0xA99A99C9, 0xCACCCC9C, 0x896745C3, 0x99C9CCBC, 0xC8CCAB09, 0x00000062, 
0xCCCCCCCC, 0x12002196, 0x01302111, 0x78467525, 0x01000701, 0x022CC64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0x999999C9, 0xCCCCCCCC, 0x896745C3, 
0x99A9CCCC, 0xC8480000, 0x00000040, 0xA6B9CBCC, 0x22222232, 0x25020000, 0xCCCCCCAB, 0x00800716, 
0x00000040, 0x00000000, 0xC0C60A00, 0x5C000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 
0xCCCCBBCB, 0xCBCBCCCC, 0x896745C3, 0xB9CCCCCC, 0xCACCBC0A, 0x50005398, 0xCCCCCCBB, 0x015177C9, 
0x00000021, 0x24000000, 0x06000F3B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x60C00000, 0x0000CC00, 0x482222B2, 0xC8CCAC48, 0xCCAC26C2, 0x222262CA, 0xC8480000, 
0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x01000F3B, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x222222B2, 0xC8CCBC59, 
0xCCAC26C2, 0x222262CA, 0xC8480000, 0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 
0x04000542, 0xCC000040, 0x20C60C4C, 0x00000008, 0x00002000, 0x00000042, 0x0022008A, 0x00000022, 
0x00C00007, 0xBCBBBBCB, 0xBBBBCBCC, 0x898745C3, 0x99B9CCBC, 0xC9CCCC0C, 0x54024387, 0x00001042, 
0x01000000, 0xCCBC5922, 0x222284CC, 0x00000733, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000800, 0x00000000, 0xB8BC6883, 0x002194AC, 0xCC7B0300, 0x0084CCCC, 
0xC6060000, 0xCC00AC78, 0x00001083, 0x00000000, 0xAC140000, 0x65BACCCC, 0x0C000914, 0x00000060, 
0x00000000, 0xAAC80A00, 0x00000004, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x9B5832B0, 
0x2262CACC, 0x48000000, 0x1073CBCC, 0xC8CCCC09, 0x00000040, 0xA7CCCCBC, 0x00000052, 0x00000000, 
0x03000100, 0x0C000506, 0xCA000060, 0x22C2A62A, 0x00008002, 0x00000000, 0x00006686, 0x004600AA, 
0x00000044, 0x00000000, 0x9B9999B9, 0x99BACBCC, 0x89674523, 0x99B9CCBC, 0xC8CCCC0C, 0x00002044, 
0x00002232, 0x00001000, 0xCC9B4702, 0x4385CBCC, 0x04000943, 0x00000040, 0x00000000, 0x0CC40C00, 
0x000200C6, 0x22000000, 0x00006200, 0x00000000, 0x00000000, 0x999A99C9, 0xC9CCCCAC, 0x8A6745C3, 
0x99A9CCBC, 0xC8CC9B08, 0x00000041, 0xCCCCCCCC, 0x420252B8, 0x01442111, 0x23327525, 0x01000701, 
0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 
0x9C9999C9, 0xCCCCCCCC, 0x8B6745C3, 0x99A9CCCC, 0xC78A89C4, 0x22202252, 0x66A9BBCC, 0x22222284, 
0x37020000, 0xCCCCCCCC, 0x06000F3B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x60C00000, 0x0000CC00, 0x242222B2, 0xCBCCCC8C, 0xCCAC26C2, 0x222284CC, 0xC84822C2, 
0x22222242, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x01000F3B, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x232222B2, 0xCCCCCC6A, 
0xAC3722C2, 0x222284CC, 0xC8480000, 0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 
0x1200050B, 0xC2000060, 0x20C60C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 
0x00000005, 0xBCBBBBCB, 0xCBBBCBCC, 0x896745C3, 0x99CBCCAC, 0xA6CCCCCC, 0x11111121, 0x00000052, 
0x00000000, 0xCCBC6737, 0x2252BACC, 0x12000914, 0x00000060, 0x00000000, 0xAAC80A00, 0x00000004, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x7B2622B4, 0xA69BCABC, 0x48520200, 0x0062CBCC, 
0xC8CCCCCC, 0x11111141, 0x76C9CCAC, 0x00000041, 0x00000000, 0x14000000, 0x12000512, 0x82000040, 
0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00000000, 0xBCBBA9C9, 
0x999BC9CC, 0x896745C3, 0x99CACC9C, 0xC84811C1, 0x11111141, 0x98BBCCCC, 0x00302473, 0x22220200, 
0xCC362224, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00000000, 0x9C9999C9, 0xCCBCCCCC, 0x896745C3, 0x99C9CC9C, 0xC84811C1, 0x11111141, 
0xBCCB9A85, 0x87CCCCCC, 0x00212284, 0x22010000, 0x1200050B, 0xC2000060, 0x20C60C2A, 0x00000008, 
0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00000005, 0xCCBBBBCB, 0xBBBBCBCC, 0x896745C3, 
0x99CACC9C, 0xA5CCCC0C, 0x9A000021, 0x00000052, 0x00000000, 0xCCAC5701, 0x8788BACC, 0x12000914, 
0x00000060, 0x00000000, 0xAAC80A00, 0x00000004, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x78362200, 0x84CBCCBC, 0x48000000, 0x0062CBCC, 0xA5BBCCCC, 0x11131132, 0x97CBCCAC, 0x00000030, 
0x00000000, 0x14000000, 0x06000F3B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x60C00000, 0x0000CC00, 0x222222B2, 0xC8CC8C24, 0xCCCC48C2, 0x222284CC, 0xC84822C2, 
0x22222242, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x01000F3B, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60C00000, 0x0000CC00, 0x222222B2, 0xC8CC8C24, 
0xCCCC48C2, 0x222284CC, 0xC8480000, 0x00000040, 0xBBBBBBBB, 0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 
0x12000512, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 
0x00000000, 0x9B9999C9, 0x99AACBCC, 0x896745C3, 0x99CACC9C, 0xC6AB8908, 0x00000031, 0x98BACCCC, 
0x00001162, 0x22220200, 0xCCCCAC57, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xBCBB99C9, 0xC9CCCCCC, 0xACAAAACA, 0xCCCCCCCC, 
0xCACCAB8A, 0x88888898, 0xCCCCAC88, 0xA8CCCCCC, 0x00417587, 0x35010000, 0x00800716, 0x00000040, 
0x00000000, 0xC0C60A00, 0x5C000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCCBBCB, 
0xCBCBCCCC, 0x896745C3, 0xB9CCCCCC, 0xCACCBC0A, 0x50005398, 0xCCCCCCBB, 0x015177C9, 0x00000021, 
0x24000000, 0x04000542, 0xCC000040, 0x20C60C4C, 0x00000008, 0x00002000, 0x00000042, 0x0022008A, 
0x00000022, 0x00C00007, 0xCBCCBBCB, 0xCCBBCBCC, 0x896745C3, 0x99B9CCAC, 0xC9CCCC0C, 0x43004387, 
0x00001042, 0x01000000, 0xCCBC8A36, 0x222284BB, 0x00000733, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000800, 0x00000000, 0xB8BC6883, 0x002194AC, 0xCC7B0300, 
0x0084CCCC, 0xC6060000, 0xCC00AC78, 0x00001083, 0x00000000, 0xAC140000, 0x65BACCCC, 0x0C000914, 
0x00000060, 0x00000000, 0xAAC80A00, 0x00000004, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xBB6A24B0, 0x2262CACC, 0x37000000, 0x0084CCBC, 0xC8CCCC09, 0x00000040, 0xA7CCCCBC, 0x00000052, 
0x00000000, 0x03000100, 0x0C000506, 0xCA000060, 0x22C2A62A, 0x00008002, 0x00000000, 0x00006686, 
0x004600AA, 0x00000044, 0x00000000, 0x9C9999B9, 0x99C9C9CC, 0x89674523, 0x99BACCBC, 0xC8CCCC0C, 
0x22020040, 0x00002232, 0x00004101, 0xCCBB4702, 0x4385CBCC, 0x04000943, 0x00000040, 0x00000000, 
0x0CC40C00, 0x000200C6, 0x22000000, 0x00006200, 0x00000000, 0x00000000, 0xCCBB99C9, 0xC9CCCC9C, 
0x896745C3, 0x99B9CCAC, 0xC9CC9C0B, 0x01018767, 0x4774CCCC, 0x32B7BBAB, 0x01102021, 0x25222202, 
0x12000F3B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60800000, 
0x0000CA00, 0x222222B2, 0xCCCC8C24, 0xCCCCACC6, 0x222222A6, 0xC8480000, 0x00000041, 0xBBBBBBBB, 
0xAAAAAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xBB9999C9, 0xC9CCCCCC, 0x896745C3, 0x99B9CCCC, 
0xCA4822C2, 0x11112262, 0x6599CACA, 0x76BBAA8B, 0x22849A77, 0xAC8A4822, 0x1200050B, 0xC2000060, 
0x20C60C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00000005, 0xBCBBBBCB, 
0xCBBBCCCC, 0x896745C3, 0x99CBCC9C, 0xA5CCCC0C, 0x9A000021, 0x00000052, 0x00000000, 0xCCAC5701, 
0x8788BACC, 0x12000914, 0x00000060, 0x00000000, 0xAAC80A00, 0x00000004, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x884833B1, 0x74B9CCBC, 0x471111C1, 0x1173CBBC, 0xA5CBCC0C, 0x00030021, 
0x97CBCCAC, 0x00000030, 0x00000000, 0x14000000, 0x12000512, 0x82000040, 0x00888000, 0x0000C0A0, 
0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00000000, 0xCC9999C9, 0x999999CC, 0x896745C3, 
0x99CBCC9C, 0xC6AB8908, 0x00000031, 0xAABBCCCC, 0x88A9AA9A, 0x45552363, 0xCCCCAC67, 0x12000F3B, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60800000, 0x0000CA00, 
0x333333B3, 0xC8CC8C58, 0xCCAB69C4, 0x333384CC, 0xC6060000, 0x00000031, 0xBBBBBBBB, 0xAAAAAABA, 
0xAAAAAAAA, 0xBBBBBBBB, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00000000, 0x999999C9, 0x999CCCCC, 0x896745C4, 0x99C9CC9C, 0xCACCAB8A, 
0x88888898, 0xCCCCCCCC, 0xBBCCCCCC, 0xBBBBBBCC, 0xCCCCBCBB, 0x00DF0F08, 0x0907090A, 0x09090707, 
0x00000000, 0x00000000, 0x00000000, 0x00010000, 0x00000000, 0x00000000, 0xC1C1CFC1, 0xC1C3C3CF, 
0x00000000, 0x00000000, 0x9D9D9D9D, 0x9D9D9D9D, 0x00000000, 0x00000000, 0xBEBEBEBE, 0xBEBEBEBE, 
0x00000000, 0x00000000, 0x0B800F0B, 0xC2000060, 0x20C60C2A, 0x00000008, 0x00000000, 0x00000044, 
0x00460068, 0x00000064, 0x00000000, 0xBBBBBBBB, 0xCCCCCCBB, 0xCC68A6C6, 0x9999C9CC, 0xCCAC86C4, 
0x22225289, 0x000000C0, 0x00000000, 0xCC8C6603, 0x0010A4CC, 0x0B000F18, 0x00000020, 0x00000000, 
0x0A000C00, 0x0028C2CC, 0x02440000, 0x0020C400, 0x00000002, 0x00000000, 0x7B0300B0, 0xCCCCBC9C, 
0xCC4822C2, 0x222284CC, 0xCC4822C2, 0x2232A6CC, 0xAC1500C0, 0x000062CB, 0x30480100, 0x00730300, 
0x00000704, 0x00C42860, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xCCCC8CB4, 0x8C8C5586, 0xBC3722C2, 0x2284BCCC, 0xC84822C2, 0x22222242, 0x222253C9, 
0x22222222, 0xCB6B2322, 0x6544B6CC, 0x00800F1F, 0x00000020, 0x20000000, 0xA0000800, 0xAC00800A, 
0x44000000, 0x00004400, 0x00000000, 0x00000000, 0x682322B2, 0xCAACBCBB, 0x7B89ACC6, 0x62CACCCC, 
0xC94822C2, 0x2285CCCC, 0xCC5A2242, 0x2252CBCC, 0x22222222, 0x22222222, 0x10000F07, 0xAC000060, 
0x0040A08A, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xABBB7BB3, 
0x62B9CBAC, 0xAC2622C1, 0x1151A8CC, 0x736389CC, 0x85758B7B, 0x000032C6, 0x00000000, 0x69230200, 
0xCCCCCCCC, 0x0800072E, 0x00000040, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0060000, 
0x00000000, 0x00000002, 0xCC8C8BB4, 0x957BC9CC, 0xCCBC37C2, 0x222284CC, 0xB73784CC, 0x00849C35, 
0x000072C8, 0x00000000, 0x75762500, 0xCCCBCC7B, 0x00000F2D, 0x82000060, 0x40840000, 0x00002A80, 
0x00000006, 0x02000600, 0x80AC8628, 0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x00000830, 
0x00000060, 0x00000000, 0x00000000, 0x00000000, 0x00400000, 0x08000000, 0x000000CA, 0x00000000, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 
0xCCCCCCCC, 0xCCCCCCCC, 0x1000091D, 0x00000060, 0x00000000, 0x02000200, 0x008CACA2, 0xAC000000, 
0x00A8A800, 0x00000000, 0x00000000, 0xACAC9CB9, 0x999CB9CC, 0x99BC7AC3, 0x9999CCCC, 0xCC4822C2, 
0x8A74BBAC, 0x97A999CB, 0xCB6B8677, 0x00002086, 0x4A010000, 0x02000701, 0x022CC64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xC99999B9, 0x999CB9CC, 
0x896745C3, 0x99B9CCAC, 0xC84822C2, 0x22222242, 0x020000C0, 0xCCCCBA78, 0x6397B9CB, 0x00000000, 
0x08000909, 0xAC000060, 0x00A00A6C, 0x00000000, 0x00000000, 0x0000AA00, 0x00202046, 0x00000020, 
0x00000002, 0xBBBBBBBB, 0xCCCCBBBB, 0xCC6A45B3, 0x9999CBCC, 0xCC4822C2, 0x22629A98, 0x222232C6, 
0x22222222, 0xBC482222, 0x4754B8CC, 0x06000D49, 0x00000060, 0x00000000, 0x00000C00, 0x0000C00C, 
0x00000000, 0x0000CC00, 0x00000000, 0x00000000, 0x010000B0, 0xC8CCCC59, 0xCC4800B0, 0x000084CC, 
0xCC8C24C2, 0x222242C8, 0xBC4922C2, 0x2232B6CC, 0x22222222, 0x22222222, 0x10000129, 0xA2000060, 
0x00A00806, 0x00000000, 0x00000000, 0x00008888, 0x008000AC, 0x00000006, 0x00000000, 0xCC8C04B0, 
0x000073CB, 0xBC3700B0, 0x001085CC, 0xCBA8CBCC, 0x62C868B7, 0x222222C4, 0x35232222, 0xCCCC8A67, 
0xBBCCCCCC, 0x00000732, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x0000C000, 0x00000008, 0xC8CC7BB3, 0x22222242, 0xCC8C24C2, 0x222273CB, 0x000000C0, 0x40C84800, 
0x111131C8, 0x11111111, 0x33241111, 0xCBCCBC57, 0x00000739, 0x00000040, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000000C, 0xCCCC7BB3, 0x22222284, 0xCC6A22C2, 
0x222242C8, 0xCA4822C2, 0x4884CCC8, 0x222232C8, 0x22222222, 0x46852522, 0xBBCC8CA8, 0x00000830, 
0x00000060, 0x00000000, 0x00000000, 0x00000000, 0x00400000, 0x08000000, 0x000000CA, 0x00000000, 
0x748BCCBC, 0x3333848C, 0xCC4833C3, 0x3343C8CC, 0xCC8CC8C8, 0x222284CC, 0x222222C2, 0x23222222, 
0xCAACCB6B, 0x22222252, 0x0E00091D, 0x00000060, 0x00000000, 0x00000000, 0x002C4C40, 0x4C000000, 
0x00424200, 0x00000000, 0x00000000, 0xCCAC9BB9, 0x9999999A, 0xC96A45C3, 0x9999C9CC, 0xCB9AA8CB, 
0x7B73CBCC, 0xA8A9CCCC, 0x888A9888, 0x22224278, 0x6A542322, 0x00800812, 0x82000040, 0x00888000, 
0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 
0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00000000, 0xCCCC9AB9, 0x9999A99A, 0x896745C3, 0x9999C9CC, 0xC848B7CB, 0x22222284, 0x776623C4, 
0xCCAC7A87, 0x6699A8CC, 0x13022065, 0x00800F0B, 0xC2000060, 0x20C60C2A, 0x00000008, 0x00000000, 
0x00000044, 0x00460068, 0x00000064, 0x00000000, 0xBBBBBBBB, 0xCCCCBCBB, 0x8C8745C3, 0x9999C9CC, 
0xCC8C1500, 0x000040C8, 0x000000C0, 0x00000000, 0xCC594302, 0x0061A9CB, 0x10000913, 0x00000060, 
0x00000000, 0xAAA20C00, 0x2820228C, 0x66660000, 0x0046AA00, 0x00000064, 0x00000000, 0xBBBBBBBB, 
0xCBCCBCBB, 0xBC6745B3, 0x999999CC, 0xCC480000, 0x001095CC, 0xBC2700C0, 0x0052B7CC, 0x00000000, 
0x00000000, 0x10000F07, 0xAC000060, 0x0040A08A, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xCCCC9BB6, 0x424284BC, 0xCC482200, 0x002296CC, 0xCB68880C, 0x4562CAB9, 
0x000022C4, 0x00000000, 0x9B250200, 0xC9CCCCCC, 0x0800072E, 0x00000040, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xC0060000, 0x00000000, 0x0000000C, 0xCCCC88B4, 0x6286CCCC, 0xCCCC6AB2, 
0x0030B7CB, 0x3500840C, 0x0084BC98, 0x000052C8, 0x00000000, 0x04000000, 0xCCCCCB7B, 0x00000F30, 
0x80000060, 0x00800000, 0x00000000, 0x00000000, 0x00400040, 0x08008228, 0x000000CA, 0x00000000, 
0xCCCCCCBC, 0x22222284, 0x483333C3, 0x84CC8CCC, 0xCC4833C3, 0x3333B7CC, 0x222222C2, 0x25222222, 
0xBACCACAB, 0x222242B8, 0x1000091D, 0x00000060, 0x00000000, 0x02000200, 0x008CACA2, 0xAC000000, 
0x00A8A800, 0x00000000, 0x00000000, 0xABAC99B9, 0x99A9CBCC, 0x898745C3, 0x99B9CC9C, 0xC888A708, 
0x1440A847, 0x43B7CBCC, 0x49014232, 0x00000052, 0x39000000, 0x02000701, 0x022CC64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xAABA99B9, 0x99B9CBCC, 
0x896745C3, 0x99B9CC9C, 0xC8480000, 0x00000040, 0x322213C0, 0xCCACAB56, 0x6599CBCC, 0x00000010, 
0x04000642, 0xCC000040, 0x20C60C4C, 0x00000008, 0x00002000, 0x00000040, 0x0022006A, 0x00000022, 
0x00000000, 0xBBBBBBBB, 0xCBCCBCBB, 0x8C6A45B3, 0x9999C9CC, 0xCC8C04C0, 0x00000084, 0x222222C2, 
0x22222222, 0xCC5B2222, 0x224298CB, 0x10000D13, 0x00000060, 0x00000000, 0xAAA20C00, 0x2820228C, 
0x66660000, 0x0046AA00, 0x00000064, 0x00000000, 0x8C0400B0, 0x84CCBC8C, 0xCC4822C2, 0x222273CB, 
0xCC4822C2, 0x2222A6CC, 0xAC1500C0, 0x5176CACC, 0x00000000, 0x00000000, 0x0C000107, 0xAC000060, 
0x0060A08A, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCC9BB6, 
0x222222A6, 0xCC6A22C1, 0x112296CC, 0xCA7B2602, 0x9B75CCAA, 0x000032C6, 0x00000000, 0x8A470200, 
0xCCCCCCCC, 0x04000727, 0x00000080, 0x00000000, 0x00200600, 0x000A6006, 0xAC000000, 0x00A88402, 
0x00000000, 0x00000000, 0x8A8CCCBC, 0x6A2242C8, 0xBCBC37B0, 0x0040C8CC, 0xCC4820C5, 0x0084CCC9, 
0x42C8CCCC, 0x22222222, 0x32352222, 0xBCBC4922, 0x00000F14, 0x00000060, 0x00000000, 0x00810700, 
0x00202206, 0x00000000, 0x00000000, 0x00000000, 0x00000004, 0xCCCCBCBB, 0x22422285, 0x9C3523C0, 
0x0030B7CC, 0xCC581200, 0x0041B9CC, 0xCCCCBB8A, 0x233263A7, 0x22222242, 0x24222223, 0x08000707, 
0xAC000060, 0x0040A08A, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000007, 
0x222222B2, 0xCCB83722, 0xCC8C8CC4, 0x42C888CC, 0x482222C2, 0x2284CCCB, 0x222252CA, 0x22222222, 
0x6B232222, 0xBCCCACCB, 0x00000830, 0x00000060, 0x00000000, 0x00000000, 0x00000000, 0x00400000, 
0x08000000, 0x000000CA, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCCCC, 
0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x0C00091D, 0x00000060, 0x00000000, 
0x02000200, 0x008CACA2, 0xAC000000, 0x00A8A800, 0x00000000, 0x00000000, 0xB9BCBCB9, 0x9999CCCC, 
0x89CBCCC8, 0x9999CCC9, 0xCB9AA9C7, 0x7784CCBB, 0x72BAA9CC, 0xBB5A0100, 0x00000072, 0x89030000, 
0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00000000, 0x999999B9, 0xB9CACC9C, 0x896745C3, 0x99B9CCCB, 0xC8BA37C1, 0x11111141, 0x384248C2, 
0xCCCCCCAC, 0x20B7ABCB, 0x22000000, 0x07000F16, 0x00000040, 0x00000000, 0xC0C80A00, 0x6A000006, 
0xA6000000, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBBB, 0xCCCCBCBB, 0x8C6745B3, 0x9999C9CC, 
0xCCBC3700, 0x000040C8, 0xCCAB56C2, 0x3084BBCC, 0x00000000, 0x00000000, 0x10000129, 0xA2000060, 
0x00A00806, 0x00000000, 0x00000000, 0x00008888, 0x008000AC, 0x00000006, 0x00000000, 0xCC8C04B0, 
0x006276CB, 0xCC4800B0, 0x000040C8, 0xBBC9CC08, 0xA6C87884, 0x212262C4, 0x35231220, 0xCCBC8967, 
0xBBCCCCCC, 0x00000739, 0x00000040, 0x00000000, 0x00800200, 0x00000000, 0x00000000, 0x00000000, 
0x00008000, 0x0000000C, 0xCACCAAB6, 0x00000084, 0xCC8C04B0, 0x000073CB, 0x7B030000, 0x84C89CB8, 
0x317588CA, 0x00000000, 0x00130000, 0xCCCC7B13, 0x00000830, 0x26000060, 0x00000000, 0x00000000, 
0x00000000, 0x00400000, 0x08000000, 0x000000CA, 0x00000000, 0xC88CCABC, 0xC8482242, 0xCC4822C2, 
0x2284CCCC, 0xCC8C24C2, 0x2242C8CC, 0x333333C3, 0x33333333, 0x56B7CC6B, 0x3395CAAA, 0x0E00091D, 
0x00000060, 0x00000000, 0x04410400, 0x002C4C40, 0x4C000000, 0x00424200, 0x00000000, 0x00000000, 
0xC9AC9CB9, 0x9999999C, 0x897B45C3, 0x9999CCAC, 0xCB9AA8C7, 0x7773CBBB, 0x88BBBACC, 0x88763753, 
0x00000030, 0x78030000, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 
0x00000000, 0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0x896745C4, 0xC9CC9C99, 0xCCCCCCCC, 
0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x02000701, 0x022CC64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xCBCC99B9, 0x9999999C, 
0x896745C3, 0x9999C9BC, 0xC8480000, 0x00003047, 0x430100C0, 0xCCCCAB36, 0x9977AACA, 0x303531A7, 
0x0080041F, 0x00000020, 0x20000000, 0xA0000800, 0xAC00800A, 0x44000000, 0x00004400, 0x00000000, 
0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 
0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x1200010E, 0x00000060, 0xC80A0000, 0x000000AC, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x12000F2B, 0x00000080, 
0x00000000, 0x00000800, 0x000000A8, 0x44440000, 0x0040AC00, 0x00000000, 0x00000000, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 
0xCCCCCCCC, 0x08000707, 0xAC000060, 0x0040A08A, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 
0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x00000830, 0x00000060, 0x00000000, 0x00000000, 
0x00000000, 0x00400000, 0x08000000, 0x000000CA, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x0C00091D, 
0x00000060, 0x00000000, 0x02000200, 0x008CACA2, 0xAC000000, 0x00A8A800, 0x00000000, 0x00000000, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 
0xCCCCCCCC, 0xCCCCCCCC, 0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCCCC, 
0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x0080051F, 0x00000020, 0x20000000, 
0xA0000800, 0xAC00800A, 0x44000000, 0x00004400, 0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 
0x12000128, 0x82000080, 0x00800402, 0x00000000, 0x00000000, 0x00004444, 0x002000CA, 0x0000000A, 
0x00000000, 0xBBBBBBBB, 0xCCCCCCBC, 0xCC6845C3, 0x999999CC, 0xC8CC48C2, 0x42C84842, 0x333333C3, 
0x33333333, 0xCBBC7768, 0x333343A6, 0x00000732, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x0000C000, 0x00000008, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x00000739, 0x00000040, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000000C, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 
0xCCCCCCCC, 0x12000F2B, 0x00000080, 0x00000000, 0x00000800, 0x000000A8, 0x44440000, 0x0040AC00, 
0x00000000, 0x00000000, 0xCCC88CB4, 0xA6C8688A, 0xCC8C24C2, 0x22222284, 0xCC6A23C2, 0x2284CCCC, 
0x7B4533C3, 0x53CABABC, 0x33333333, 0x33333333, 0x0800050A, 0xAC000060, 0x00A0C0C0, 0x0000A000, 
0x00000000, 0x000000AA, 0x00020002, 0x00000002, 0x00000000, 0x8ACCCCBC, 0x333343B7, 0xCC8B34C3, 
0x43C888CC, 0xCC4884CC, 0x33A6CC89, 0x333364CB, 0x33333333, 0x44463333, 0xBCBCBA6B, 0x12000F18, 
0x00000020, 0x00000000, 0x08000600, 0x00AC68C6, 0xC9400000, 0x00A04700, 0x00000002, 0x00000000, 
0xC9C999BB, 0xCC99CCCC, 0xCCCC48C4, 0x9999C9CB, 0xC88C8CC4, 0xC848C88C, 0x9AC9CCCA, 0xB69CA988, 
0x44444444, 0x877A4444, 0x00000946, 0x24000040, 0x00409060, 0x09008000, 0x00000063, 0x00000000, 
0x00000000, 0x00000000, 0x00060000, 0xCCBCABCB, 0xCCC9CC9C, 0x896745C3, 0xCCCCCC9B, 0xC89A6AC2, 
0x11111141, 0x52B9CCCC, 0x01000021, 0x10000021, 0xAC982701, 0x02000701, 0x022CC64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 
0x08800909, 0xAC000060, 0x00A00A6C, 0x00000000, 0x00000000, 0x0000AA00, 0x00202046, 0x00000020, 
0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 
0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x06000D49, 0x00000060, 0x00000000, 0x00000C00, 0x0C00C00C, 
0x00000000, 0x0000CC00, 0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x10000129, 0xA2000060, 
0x00A00806, 0x00000000, 0x00000000, 0x00008888, 0x008000AC, 0x00000006, 0x00000000, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0x212222B4, 0x35231220, 0xBBBC8967, 
0xBBCCCCCC, 0x12000519, 0x00000000, 0x00000000, 0x00000C00, 0x0000C00C, 0x00000000, 0x0000C000, 
0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 
0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x0B00050A, 0xAC000060, 0x00A0C060, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x00000830, 
0x00000060, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x08000000, 0x000000C0, 0x00A00000, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 
0xCCCCCCCC, 0xCCCCCCCC, 0x0E00091D, 0x00000060, 0x00000000, 0x00000000, 0x002C4C40, 0x4C000000, 
0x00424200, 0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xCB9AA8C7, 
0x7773CBBB, 0x88BBBACC, 0x88763753, 0x00000030, 0x78030000, 0x00800812, 0x82000040, 0x00888000, 
0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 
0x02000701, 0x022CC64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 
0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x00FF0806, 0x090B0C0B, 0x00000A0A, 0x00000000, 0x00000000, 
0x00000000, 0x00000200, 0x00000000, 0x00000000, 0x42404040, 0x00004440, 0x00000000, 0x00000000, 
0xBDBDBDBD, 0x0000BDBD, 0x00000000, 0x00000000, 0xCEAEAEAE, 0x0000AEAE, 0x00000000, 0x00000000, 
0x0200013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 
0x0000CA00, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x10000636, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xC0020000, 0x00002000, 0xCBCCBCB9, 0x77777798, 0xCCCC8CC8, 0x888888C8, 
0xC6060000, 0x00000031, 0x2086CBCC, 0x56010000, 0x0020769A, 0xAC140000, 0x12000F0B, 0xC0000060, 
0x00C00C04, 0x00000002, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00400000, 0x999999C9, 
0xBACCCC9C, 0x999999C9, 0x99B9CC9A, 0xCCAC0400, 0x000085CB, 0x54556566, 0x56454444, 0xCCBC8A77, 
0xA8AAAACB, 0x12000918, 0x00000020, 0x00000000, 0x04000400, 0x000220C4, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x8AA7AB47, 0x2284CACC, 0xCC8C77C7, 0x777787CC, 0xC7060000, 0x00000031, 
0xCCAC8B77, 0x7777B8CC, 0x77777777, 0x77777777, 0x00800912, 0x82000040, 0x00888000, 0x0000C0A0, 
0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x12000704, 
0x00C42860, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x99999999, 0x99BACCAC, 0xCC8C88C8, 0x888888CC, 0xCBBBBBBB, 0xBBBBBBBB, 0x8988A889, 0x888888A8, 
0xCCACAB9B, 0x8888B8CA, 0x0200013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20C00000, 0x0000CA00, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x12000F0B, 0xC0000060, 0x00C00C04, 
0x00000002, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00400000, 0x88888888, 0x8888A8BC, 
0x8C7777C7, 0x7777CACC, 0xCCBBBBBB, 0xCBBBBBBB, 0x77777787, 0x77777777, 0xAA787777, 0x9AB9CCCC, 
0x12000918, 0x00000020, 0x00000000, 0x04000400, 0x000220C4, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xCCCCBCC9, 0x999999CC, 0x8C7777C7, 0x77C8CCCC, 0xCBBBBBBB, 0xBBBBBBBB, 0xB9BBABCB, 
0x878A879A, 0x77777777, 0x77777777, 0x00800912, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 
0x00004400, 0x00000000, 0x00000000, 0x00060000, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 
0xCCCCCCCC, 0xCCCCCCCC, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x03000701, 0x0228C64C, 
0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCCCCACC9, 
0x9999BACB, 0x9C7977C7, 0x9999CCCC, 0xCBBBBBBB, 0xBBBBBBBB, 0x99999999, 0x99999999, 0xBC9B9999, 
0xAACBCCCC, 0x0080010B, 0xC0000060, 0x00C00C06, 0x00000007, 0x00000000, 0x00000000, 0x00000002, 
0x00000000, 0x00400000, 0x999999B9, 0x99B9CCCC, 0x999999C9, 0x99CACCAC, 0xCCCCCC09, 0x00004089, 
0x00000000, 0x00000000, 0xCC8A0400, 0x000051CA, 0x1200091F, 0x00000020, 0x00000000, 0x90000800, 
0x6C00200B, 0x04000000, 0x00000000, 0x00000000, 0x00000000, 0x999999B9, 0xC9CCCCBA, 0xCC9999C9, 
0x999999CC, 0xCC480000, 0x0030B7CC, 0xCCAC9957, 0x000083CB, 0x00000000, 0x25000000, 0x0200013B, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 
0x000000B0, 0xA8CC8C04, 0xCCCC4800, 0x000051C9, 0xC8480000, 0x00000040, 0x000072CB, 0x00000000, 
0xCCCC8A04, 0xCCCCCCCC, 0x12000106, 0xCA000060, 0x22C2A62A, 0x00008002, 0x00000000, 0x00006686, 
0x004600AA, 0x00000044, 0x00880000, 0x480000B0, 0x62AACBCC, 0x8C040000, 0x002096CC, 0xCC7B0300, 
0x0030B7CC, 0x00000020, 0x00000000, 0x8C340000, 0x76CBCCCC, 0x12000918, 0x00000020, 0x00000000, 
0x0A000A00, 0x002882CA, 0x02440000, 0x00202200, 0x00000002, 0x00000000, 0xCCCC9CB5, 0x00849C8B, 
0xCCAC4800, 0x001095CC, 0xC8CA8C04, 0x00000440, 0xB77B0200, 0xCBCCAC68, 0x31324685, 0x73770300, 
0x00000704, 0x00C42860, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xCBCCCCBC, 0x10958C74, 0xCCBC37C0, 0x000084CC, 0xC8480000, 0x00000040, 0x00000000, 
0x00000000, 0xAC666614, 0x62AACACC, 0x0080071F, 0x00000020, 0x00000806, 0xC0800800, 0x8C00800A, 
0x02000000, 0x00004400, 0x00000000, 0x00000000, 0xC8CCCCBC, 0x11114148, 0xCCBCBB07, 0x000084CC, 
0xCC8A8C07, 0x0040C8CC, 0x51CACCBB, 0x00834801, 0x00000000, 0x49010000, 0x0200013B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x000000B0, 
0xA8CC8C04, 0xCCCC4800, 0x000051C9, 0xC8480000, 0x00000040, 0x000072CB, 0x00000000, 0xCCCC8A04, 
0xCCCCCCCC, 0x0000052D, 0x82000060, 0x40840000, 0x00002A80, 0x00000006, 0x02000600, 0x80AC8628, 
0x00000000, 0x00040000, 0xCCCCCCC8, 0xC88ACCCC, 0xC8CCCCC8, 0x86C8C8CC, 0xCACCCC9C, 0x99999999, 
0x8787CCCC, 0x77777777, 0xA98A9979, 0xCC78A788, 0x00000635, 0x02000020, 0x00000020, 0x00220000, 
0x00000000, 0x00000000, 0x00000000, 0x800C0000, 0x00442000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x0600060A, 
0xAC000060, 0x00A0C060, 0x0000A000, 0x00000000, 0x000000AA, 0x00020000, 0x00000000, 0x002A0000, 
0xC99999B9, 0xCCCCCC9C, 0xA62600C0, 0xC8CCCC48, 0xC9999999, 0x00519999, 0x41B6CCCC, 0x00000000, 
0x38000000, 0xCCCCACAA, 0x02000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00220000, 0xBCCCACB9, 0x9C99A9CA, 0x9B0900C0, 0xA99BCCCC, 0xC8480000, 
0x00000040, 0x99A9CCCC, 0x99999999, 0x9999A99A, 0xBC9A9999, 0x0200013B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x000000B0, 0xA8CC8C04, 
0xCCCC4800, 0x000051C9, 0xC8480000, 0x00000040, 0x000072CB, 0x00000000, 0xCCCC8A04, 0xCCCCCCCC, 
0x12000F0B, 0xC0000060, 0x00C00C04, 0x00000002, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 
0x00400000, 0x999999C9, 0xBACCCC9C, 0x99C999C9, 0x999999CB, 0xCCAC0400, 0x000085CB, 0x88888888, 
0x88888888, 0xCCAC9B88, 0x88A8CACC, 0x12000918, 0x00000020, 0x00000000, 0x04000400, 0x000220C4, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x8AA7AB47, 0x2253C8CC, 0xCC7A7BC4, 0x222252C8, 
0xC7060000, 0x00000031, 0xCC7B5487, 0x444464BB, 0x44444444, 0x44444444, 0x00800912, 0x82000040, 
0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0xBCBBBBCB, 
0xBBBBBBCC, 0xBBBBBBCB, 0xBBCBBCBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0x06000704, 0x00C42860, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x888888C8, 0x8888CCCC, 0xCC8C77C7, 0x77777787, 0xCBBBBBBB, 0xBBBBBBBB, 
0xBA8988A8, 0x888888B8, 0xAC9B8888, 0x88C9CCCC, 0x0200013B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x000000B0, 0xA8CC8C04, 0xCCCC4800, 
0x000051C9, 0xC8480000, 0x00000040, 0x000072CB, 0x00000000, 0xCCCC8A04, 0xCCCCCCCC, 0x10000636, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0020000, 0x00002000, 
0xC9CCCCC9, 0x44444464, 0xCC8C35C3, 0x333353C8, 0xC6060000, 0x00000031, 0x2175CBCC, 0x56111111, 
0x1121759A, 0x9C141111, 0x12000F0B, 0xC0000060, 0x00C00C04, 0x00000002, 0x00000000, 0x00000000, 
0x00000002, 0x00000000, 0x00400000, 0x483333C3, 0xC868CACC, 0x78BB47C2, 0x2252C8CC, 0xCCBCAAAA, 
0xAAAACABB, 0x44444484, 0x44444444, 0xAA484444, 0x74CACCBB, 0x12000918, 0x00000020, 0x00000000, 
0x04000400, 0x000220C4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCBC9CC9, 0x9999B9CC, 
0xAC7B24C2, 0x2285CCCC, 0xCBABAAAA, 0xAAAAAAAA, 0xCACCCCC8, 0x64694484, 0x44444457, 0x44444444, 
0x00800912, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 
0x00060000, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xBBBBBBCB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x03000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCCCCACC9, 0x9999BACB, 0xAB3922C2, 0x99C9CCCC, 
0xCBABAAAA, 0xAAAAAAAA, 0x99999999, 0x99999999, 0xBC9B9999, 0xAACBCCCC, 0x0080031F, 0x00000020, 
0x00000000, 0xC0800800, 0x8C00800A, 0x02000000, 0x00004400, 0x00000000, 0x00000000, 0x999999B9, 
0x999A9999, 0x999999C9, 0x99999999, 0xCAC8CC0C, 0x0073CBCC, 0xCCBA5914, 0x10A5CCCC, 0x00000000, 
0x00000000, 0x0200013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20C00000, 0x0000CA00, 0x000000B0, 0x85CCCC48, 0xCCCC8C04, 0x00004088, 0xC8480000, 0x00000040, 
0x001074CB, 0x24420200, 0x3700729A, 0xCCCCBC79, 0x0C000121, 0x86000080, 0xCC86A840, 0x0000800C, 
0x00000000, 0x000000CC, 0x0406008A, 0x00000088, 0x00800000, 0x999999B9, 0xA99B999B, 0x99A9A9C9, 
0x99999999, 0x4297CC0C, 0x6A020000, 0x43111300, 0x8A454331, 0xA7CCCCCC, 0x62465443, 0x0C000915, 
0x00000060, 0x00000000, 0x44CC0400, 0x00002002, 0x00000000, 0x00002000, 0x00000000, 0x00000000, 
0xCC9B26B0, 0x1030B7CC, 0xCCAC26C0, 0x0030B7CC, 0xB7CCCC0C, 0x00000030, 0x96CBCCAC, 0x00000042, 
0x00000000, 0x14000000, 0x0200013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20C00000, 0x0000CA00, 0x000000B0, 0xA8CC8C04, 0xCCCC4800, 0x000051C9, 0xC8480000, 
0x00000040, 0x000072CB, 0x00000000, 0xCCCC8A04, 0xCCCCCCCC, 0x0A000F06, 0xCA000060, 0x22C2A62A, 
0x00008002, 0x00000000, 0x00006686, 0x004600AA, 0x00000044, 0x00880000, 0x8C0400B0, 0x3084CCCC, 
0x487303C0, 0x40C8CCCC, 0xC8CCCC0C, 0x00000040, 0x00000041, 0x00000000, 0xCC9B7A03, 0x22A5CBCC, 
0x12000917, 0x00000040, 0x00000000, 0x0CC60B00, 0x000000C6, 0x00A00000, 0x00000000, 0x00000000, 
0x00000000, 0xBC9999B9, 0xCC99CCCC, 0x040000C0, 0x52C8CC8C, 0xC9CCCC9B, 0x00109999, 0xC9CCCCCC, 
0x10103165, 0x00001000, 0xAB581300, 0x00800712, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 
0x00004400, 0x00000000, 0x00000000, 0x00060000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x01000701, 0x0228C64C, 
0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCC9C99C9, 
0x99A9BACB, 0x260000C0, 0x3184CCAC, 0xCCCCABAA, 0xAAAACACC, 0xBACBCCCC, 0x44447698, 0x48230121, 
0xCCCCCCBB, 0x0200013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20C00000, 0x0000CA00, 0x000000B0, 0xA8CC8C04, 0xCCCC4800, 0x000051C9, 0xC8480000, 0x00000040, 
0x000062B8, 0x00000000, 0x01000000, 0xCCCCBC57, 0x0080010B, 0xC0000060, 0x00C00C07, 0x00000007, 
0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00400000, 0xCC9C99B9, 0x9999C9CC, 0x999999C9, 
0x99CACCBC, 0xCCCC4802, 0x000020A6, 0x00000000, 0x00000000, 0xCC480200, 0x000063CB, 0x1200091F, 
0x00000020, 0x00000000, 0xC0000800, 0x8C00800B, 0x04000000, 0x00006600, 0x00000000, 0x00000000, 
0x150000B0, 0xCBCCCC9A, 0xCC4800B0, 0x000073CB, 0xCC480000, 0x0040C8CC, 0xCCAC9957, 0x000083CB, 
0x00000000, 0x25000000, 0x0000013D, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000400, 
0x00440000, 0x00000000, 0x00080000, 0x040000B0, 0x62AACC8C, 0xCC8C04C0, 0x000030B7, 0xCCA82600, 
0x000084CC, 0x72A8CCCC, 0x00000000, 0x00735602, 0x4A010000, 0x0200013B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x000000B0, 0xA8CC8C04, 
0xCCCC4800, 0x000051C9, 0xC8480000, 0x00000040, 0x000062B8, 0x00000000, 0x01000000, 0xCCCCBC57, 
0x0F000536, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0020000, 
0x00006000, 0xCBCC8CB6, 0x00000073, 0xCCCC6A02, 0x000062CA, 0xC8480000, 0x00000040, 0x0010A5CC, 
0x39000000, 0x000072BA, 0x7B020000, 0x12000106, 0xCC000060, 0x22C2A64A, 0x00008002, 0x00000000, 
0x00006686, 0x004600AA, 0x00000044, 0x00880000, 0x6A0200B0, 0x0043C8CC, 0x6A020000, 0x001095CC, 
0xCC7B0300, 0x0040C8CC, 0x00000020, 0x00000000, 0x8C340000, 0x76CBCCCC, 0x12000918, 0x00000020, 
0x00000000, 0x0A000A00, 0x004882CA, 0x02440000, 0x00202200, 0x00000002, 0x00000000, 0xCCCC9CB9, 
0x9999B9CC, 0x8C0400C0, 0x0084CCCC, 0xC9999999, 0x00009999, 0xCACCCCCC, 0x20000084, 0x20000200, 
0x68242213, 0x00000910, 0x82000040, 0xA0888000, 0x0000C0C0, 0x00000000, 0x00004400, 0x00200000, 
0x00000000, 0x00060000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x03000701, 0x0228C64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCCCC9CB9, 0x9999B9CC, 0xAC0900C0, 
0x9999CBCC, 0xC8480000, 0x00000040, 0x99999999, 0x99999999, 0xBC9B9999, 0xAACBCCCC, 0x0080050B, 
0xC2000060, 0x20C20C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00A00000, 
0xCC9C99B9, 0x9999C9CC, 0x999999C9, 0x99CACCBC, 0xCCCC4802, 0x000020A6, 0x00000000, 0x00000000, 
0xCC480200, 0x000063CB, 0x1200091F, 0x00000020, 0x00000000, 0x90000A00, 0x6C00800B, 0x06000000, 
0x00007600, 0x00000000, 0x00000000, 0x999AB9C9, 0xA9CCCC9B, 0xCC9999C9, 0x999999CC, 0xC8CC48C1, 
0x111141C8, 0xCCAC9957, 0x000083CB, 0x00000000, 0x25000000, 0x0200013B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x000000B0, 0xA8CC8C04, 
0xCCCC4800, 0x000051C9, 0xC8480000, 0x00000040, 0x000072CB, 0x00000000, 0xCCCC8A04, 0xCCCCCCCC, 
0x12000106, 0xCA000060, 0x02820040, 0x00000000, 0x00000000, 0x00000660, 0x00400088, 0x00000004, 
0x00000000, 0x787777C7, 0x7A77C8CC, 0x8C1411C1, 0x111184CC, 0xCCC848C1, 0x11111184, 0x00000020, 
0x00000000, 0x8C340000, 0x76CBCCCC, 0x1200091A, 0x00000020, 0x00000000, 0x04000600, 0x0094C48A, 
0x02400000, 0x00208900, 0x00000002, 0x00000000, 0xCACCACC7, 0x8C7AA777, 0xC8CC8CC4, 0x111141C8, 
0xC8C8CCCC, 0x1131B747, 0x58444496, 0x54B8CCCC, 0x44444444, 0x46444444, 0x0200013B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x000000B0, 
0xA8CC8C04, 0xCCCC4800, 0x000051C9, 0xC8480000, 0x00000040, 0x000072CB, 0x00000000, 0xCCCC8A04, 
0xCCCCCCCC, 0x02000606, 0xA6000040, 0x70888080, 0x00007090, 0x00000000, 0x00000600, 0x00900008, 
0x00000000, 0x00060000, 0xCCCCCCCB, 0xBBCC88CB, 0xB7CCC8C8, 0x33A6CC8C, 0xC8C89ACC, 0x22222242, 
0x000051CA, 0x14000000, 0x5A53BA99, 0xCCCCAA76, 0x02000635, 0x02000020, 0x00000020, 0x00220000, 
0x00000000, 0x00000000, 0x00000000, 0x800C0000, 0x00442000, 0xCACACCCC, 0xAAACCCCC, 0x994544C4, 
0xCC78CBCC, 0xCBABAAAA, 0xAAAAAAAA, 0x9B99C9CC, 0x99999999, 0x99999999, 0x9C999999, 0x00800646, 
0x80000040, 0x0080C200, 0x0C009000, 0x00000094, 0x00000000, 0x00000000, 0x00000000, 0x00600000, 
0x9C9999C9, 0xCCCCCC9C, 0x77B777C7, 0xA7CCCC78, 0xCBBBBBBB, 0xBBBBBBBB, 0x9B99CCCC, 0x9999B999, 
0x99999999, 0xCBCC9999, 0x02000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00220000, 0xCCCC9AC9, 0xCCCCBCCC, 0x992922C2, 0xCCAACCCC, 0xC87B48C2, 
0x22222242, 0x9999A9CC, 0x99999999, 0x99999999, 0xCC9A9999, 0x00FF2A0B, 0x090C0C0C, 0x0C0A0A09, 
0x00060C0A, 0x00000000, 0x01000000, 0x00010101, 0x00050101, 0x00000000, 0x46C2C2C0, 0x45464646, 
0x00CECE48, 0x00000000, 0x78787878, 0x78787878, 0x00787878, 0x00000000, 0x57575757, 0x57575757, 
0x00575757, 0x00000000, 0x00800716, 0x00000040, 0x00000000, 0xC0800800, 0x2C000002, 0x02000000, 
0x00000000, 0x00000000, 0x00000000, 0xBBBBCBBB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBCBBB, 0xCBCCCCCC, 
0xBBBBBBBB, 0xCBBBCCCB, 0xBBCBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x02000F3B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x510100B0, 0xC8CCAC26, 
0xCCCC7B03, 0x001095C9, 0xC8480000, 0x00000040, 0x000030C8, 0x00000000, 0x03000000, 0xCCCCBC8A, 
0x10000521, 0x86000080, 0xCC86A840, 0x0000800C, 0x00000000, 0x000000CC, 0x0406408A, 0x00000088, 
0x00800000, 0x9C9999B9, 0xBBCBCCCC, 0x9AA9BBC9, 0x99CACCCC, 0xC8CACC0C, 0x10512140, 0x01001100, 
0xCCAA4823, 0xCCCCCCCC, 0x86CACCCC, 0x12000915, 0x00000060, 0x00000000, 0x4ACC0400, 0x00002002, 
0x00000000, 0x00002000, 0x00000000, 0x00000000, 0x484300B0, 0xA6CCCCCC, 0xCCBC3700, 0x0030B7CC, 
0xC898CB0C, 0x00000040, 0x55C8CCAC, 0x00000052, 0x00000000, 0x14000000, 0x00000F3B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x000000B0, 
0xA8CC8C04, 0xCCCC4800, 0x000051C9, 0xC8480000, 0x00000040, 0x000072CB, 0x00000000, 0xCCCC8A04, 
0xCCCCCCCC, 0x05000522, 0x20000080, 0xCC200004, 0x000020C0, 0x00000000, 0x0000CC00, 0x00220024, 
0x00000000, 0x00020000, 0xCC4800B0, 0x0084CCCC, 0x59010000, 0x40C8CCCC, 0xC87ACA0C, 0x6A335141, 
0x8889BACC, 0x66140051, 0xCB9A998A, 0xCCCCABAB, 0x0C000703, 0x00C06C60, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCC4800B0, 0x9585BCCC, 0xCCCCCCC4, 
0x0062CACC, 0xC8480000, 0x00000040, 0x6557A6BA, 0xCCCCBC7A, 0x4886CACC, 0x9A7A9888, 0x02000F3B, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 
0x000000B0, 0xA8CC8C04, 0xCCCC4800, 0x000051C9, 0xC8480000, 0x00000040, 0x000072CB, 0x00000000, 
0xCCCC8A04, 0xCCCCCCCC, 0x1280050B, 0xC0000060, 0x00C00C04, 0x00000004, 0x00000000, 0x00000000, 
0x00000002, 0x00000000, 0x00400000, 0xCCCCB8B7, 0x51B9C8CC, 0x8CAC2600, 0x73ABCCCC, 0xA9CACA0C, 
0x00001095, 0x00000000, 0x15000000, 0xCC9CA8AA, 0x0051AACB, 0x12000943, 0x00000040, 0x00000000, 
0x0CC40A00, 0x000200C6, 0x02000000, 0x00006200, 0x00000000, 0x00000000, 0xACAAAACA, 0xCACCCCCC, 
0x040000C0, 0x40C8CB8C, 0xC9CCCC9C, 0x00029999, 0xCCCCCCCC, 0x00002094, 0x44443412, 0xAC684444, 
0x00800912, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00060000, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xCBBBBBBB, 0xBBBBBBBB, 0xBBBBBBCB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xAB9A99B9, 0xCBBBBBCC, 0x990900C0, 0x9999999A, 
0xC8480000, 0x00000040, 0xAACBCCCC, 0x44447698, 0x48230121, 0xCCCCCCBB, 0x00800716, 0x00000040, 
0x00000000, 0xC0800800, 0x2C000002, 0x02000002, 0x00000000, 0x00000000, 0x00000000, 0x999999B9, 
0x99999999, 0x999999C9, 0x99999999, 0x62AACC0C, 0x00404800, 0xCCCCBAAA, 0x003098BB, 0x00005202, 
0x14000000, 0x00000915, 0x00000060, 0x00000000, 0x002A0400, 0x00002002, 0x00000000, 0x00002100, 
0x00000000, 0x00000000, 0x9CA999B9, 0xC9C9CCCC, 0xCC9999C9, 0x99C9CCCC, 0xCAC8CA0C, 0x00000062, 
0xCACCCC8C, 0x41357489, 0x00000000, 0x03000000, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x510100B0, 0xC8CCAC26, 0xCCCC7B03, 
0x001095C9, 0xC8480000, 0x00000040, 0x000030C8, 0x00000000, 0x03000000, 0xCCCCBC8A, 0x0C000521, 
0x86000080, 0xCC86A840, 0x0000800C, 0x00000000, 0x000000CC, 0x0406408A, 0x00000088, 0x00800000, 
0x9C9999B9, 0xBBCBCCCC, 0x9A99CBC9, 0x99CACCCC, 0xA6CACC0C, 0x10402020, 0x01001100, 0xCCAA4823, 
0xCCCCCCCC, 0x86CACCCC, 0x0E000915, 0x00000060, 0x00000000, 0x44CC0800, 0x00002002, 0x00000000, 
0x00002000, 0x00000000, 0x00000000, 0xCCCCACB6, 0x326587CC, 0xCCBC7703, 0x0030B7CC, 0xC8CCCC0C, 
0x00001040, 0x30C8CCAC, 0x00000000, 0x00000000, 0x14000000, 0x00000F3B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x000000B0, 0xCBCCBC37, 
0xCCCC8CC4, 0x2222A6C8, 0xC84844C4, 0x44444444, 0x002076C9, 0x00000000, 0x98140000, 0xAC140030, 
0x02000622, 0x00000000, 0x0C000000, 0x00000000, 0x00000000, 0x0000C000, 0x00000000, 0x00000000, 
0x00000000, 0x8B9C35B7, 0xABBBCACC, 0x887403C0, 0xB8CCCC9C, 0xC87A9A0C, 0x6A335141, 0x8889BACC, 
0x24000051, 0x6697998A, 0xCCAA4632, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x000073B3, 0xCC9C8C04, 0xCCCC4800, 0x000073CB, 
0xC8480000, 0x00000040, 0x000072CB, 0x00000000, 0xCCCC8A04, 0xCCCCCCCC, 0x10000607, 0xCC000060, 
0x00C0A08A, 0x00000000, 0x00000000, 0x00000060, 0x00000067, 0x00000000, 0x00AA0000, 0xAC6925B1, 
0xC8CACCCC, 0x240000C0, 0xBBCCCC8C, 0xC8CCCC0C, 0x40005165, 0x133024A5, 0x01000010, 0xCC8A5744, 
0x87CACCCC, 0x08000943, 0x00000040, 0x00000000, 0x0CC40800, 0x000200C6, 0x02000000, 0x00006200, 
0x00000000, 0x00000000, 0xACAAABCA, 0xCACCCCCC, 0x040000C0, 0x98BC9B15, 0xC9CCCC9C, 0x00029999, 
0xCCCCCCCC, 0x00002094, 0x44443412, 0xAC684444, 0x00800712, 0x82000040, 0x00888000, 0x0000C0A0, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00060000, 0x999999CB, 0xBCB9CCAC, 0x480000C0, 
0xCCCC9C8A, 0xC9999999, 0x00009999, 0xCCCCACCA, 0x000020A6, 0x00000000, 0x6B020000, 0x01000701, 
0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 
0xAA9A99B9, 0xCCCCBCBB, 0x990900C0, 0x99BAAA99, 0xC8480000, 0x00000040, 0xAACBCCCC, 0x44447698, 
0x48230121, 0xCCCCCCBB, 0x00800716, 0x00000040, 0x00000000, 0xC0800800, 0x2C000002, 0x02000002, 
0x00000000, 0x00000000, 0x00000000, 0xCCCCCCBC, 0x99CCBCCC, 0x999999C9, 0xC9CCCC9C, 0xC9CBCC0C, 
0x40000051, 0xCCACCB5A, 0x115276BB, 0x11111111, 0x12111111, 0x00000915, 0x00000060, 0x00000000, 
0x002A0400, 0x00002002, 0x00000000, 0x00002100, 0x00000000, 0x00000000, 0x9C9999B9, 0x9CBBCCCC, 
0x9C9C99C9, 0xC9C9CBCC, 0x84CCCCCC, 0x48222222, 0x97CCCCCC, 0x36112153, 0x11111131, 0xAC681111, 
0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 
0x0000CA00, 0x000000B0, 0xC8CCAC05, 0xCCCC5901, 0x000040C8, 0xC8480000, 0x00000040, 0x000062B8, 
0x00000000, 0x01000000, 0xCCCCBC57, 0x12000521, 0x86000080, 0xCC86A840, 0x0000800C, 0x00000000, 
0x000000CC, 0x0406408A, 0x00000088, 0x00800000, 0x9C9999B9, 0xBBCBCCCC, 0x9A99BBC9, 0x99CACCCC, 
0xA6CACC0C, 0x10002020, 0x01123101, 0xCCAA4823, 0xCCCCCCCC, 0x86CACCCC, 0x12000915, 0x00000060, 
0x00000000, 0x44CC0800, 0x00002002, 0x00000000, 0x00002000, 0x00000000, 0x00000000, 0xCC4900B0, 
0x0084CCCC, 0xCCAC2600, 0x0030B7CC, 0xA4CCCC0C, 0x00000000, 0x97CCCCCC, 0x00002143, 0x00000010, 
0xAC680000, 0x00000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20C00000, 0x0000CA00, 0x000000B0, 0xCBCCBC37, 0xCCCC8CC4, 0x2222A6C8, 0xC84844C4, 0x44444444, 
0x002076C9, 0x00000000, 0x98140000, 0xAC140030, 0x00000622, 0x00000000, 0x0C000000, 0x00000000, 
0x00000000, 0x0000C000, 0x00000000, 0x00000000, 0x00000000, 0x795959B1, 0x0073CBCC, 0x8C848CC4, 
0x1141C8BC, 0xC8CAC80C, 0x00000040, 0x1510A4CC, 0xBA3821A6, 0xA699B9BB, 0x99984545, 0x02000F3B, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 
0x000000B0, 0xCBCCBC37, 0xCCAC2600, 0x000073CB, 0xC8480000, 0x00000040, 0x000072CB, 0x00000000, 
0xCCCC8A04, 0xCCCCCCCC, 0x12000529, 0xC2000060, 0x46C20806, 0x00000000, 0x00000000, 0x0000A888, 
0x008000BC, 0x00000000, 0x00220000, 0xAC0600B0, 0x3085CBCC, 0x48000000, 0x30B6CCCC, 0xC8CCCC0C, 
0x00000041, 0x00000040, 0x06000000, 0xCCCCBB8A, 0x66A8CBCC, 0x12000943, 0x00000040, 0x00000000, 
0x0CC40A00, 0x000200C6, 0x02000000, 0x00006200, 0x00000000, 0x00000000, 0xACAAAACA, 0xCACCCCCC, 
0x040000C0, 0x40A9CC8C, 0xC9CCCC9C, 0x00029999, 0xCCCCCCCC, 0x00002094, 0x44443412, 0xAC684444, 
0x00800712, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00060000, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xCBBBBBCB, 0xBBBBBBBB, 0xBBBBBBCB, 
0xBBCCBCBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xAB9A99B9, 0xCACCCCCC, 0x990900C0, 0x99A9BB9B, 
0xC8480000, 0x00000040, 0xAACBCCCC, 0x44447698, 0x48230121, 0xCCCCCCBB, 0x02000F3B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x000000B0, 
0xA8CC8C04, 0xCCCC4800, 0x000051C9, 0xC8480000, 0x00000040, 0x000072CB, 0x00000000, 0xCCCC8A04, 
0xCCCCCCCC, 0x10000736, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xC0020000, 0x00002000, 0xBBBBBBBA, 0x777777A8, 0xBBBBBBCB, 0xBBBBBBBB, 0xC6060000, 0x00000031, 
0x2086CBCC, 0x56010000, 0x0020769A, 0xAC140000, 0x12000F0B, 0xC0000060, 0x00C00C04, 0x00000002, 
0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00400000, 0x999999C9, 0xBACCCC9C, 0x999999C9, 
0x99B9CCBB, 0xCCAC0400, 0x000085CB, 0x54556566, 0x56454444, 0xCCBC8A77, 0xA8A8AAB8, 0x12000918, 
0x00000020, 0x00000000, 0x04000400, 0x000220C4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x8AA7AB47, 0x2253C8CC, 0xBBBBBBBB, 0xBBBBBBBB, 0xC7060000, 0x00000031, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0x12000704, 0x00C00260, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x888888C8, 0x8888CCCC, 0xCC8C77C7, 0x77777787, 0xC6060000, 
0x00000031, 0xBA8988A8, 0x888888B8, 0xAC9B8888, 0x88C9CCCC, 0x02000F3B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x000000B0, 0xA8CC8C04, 
0xCCCC4800, 0x000051C9, 0xC8480000, 0x00000040, 0x000072CB, 0x00000000, 0xCCCC8A04, 0xCCCCCCCC, 
0x12000F0B, 0xC0000060, 0x00C00C04, 0x00000002, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 
0x00400000, 0x483333C3, 0xC868CACC, 0x78BB47C2, 0x2252C8CC, 0xCCAC0400, 0x000085CB, 0x44444484, 
0x44444444, 0xAA484444, 0x74CACCBB, 0x12000918, 0x00000020, 0x00000000, 0x04000400, 0x000220C4, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCBC99C9, 0x9999A9CC, 0xBBBBBBCB, 0xBBBBBBBB, 
0xCBBBBBBB, 0xBBBBBBBB, 0xCCCCACC9, 0x20001095, 0x00000000, 0x13310100, 0x04000701, 0x0228C64C, 
0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20C00000, 0x0000CA00, 0x000000B0, 0xA8CC8C04, 0xCCCC4800, 0x000051C9, 0xC8480000, 0x00000040, 
0x000072CB, 0x00000000, 0xCCCC8A04, 0xCCCCCCCC, 0x12000F0B, 0xC0000060, 0x00C00C04, 0x00000002, 
0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00400000, 0x999999C9, 0xBACCCC9C, 0x999999C9, 
0x99B9CCBB, 0xCCAC0400, 0x000085CB, 0x54556566, 0x56454444, 0xCCBC8A77, 0xA8A8AAB8, 0x12000918, 
0x00000020, 0x00000000, 0x04000400, 0x000220C4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x8AA7AB47, 0x2253C8CC, 0xBCB868C6, 0x66B7C9C9, 0xC7060000, 0x00000031, 0xCCBA998A, 0x99CB99CB, 
0x777777A8, 0x77777777, 0x06000704, 0x00C00260, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x888888C8, 0x8888CCCC, 0xCC8C77C7, 0x77777787, 0xC6060000, 
0x00000031, 0xBA8988A8, 0x888888B8, 0xAC9B8888, 0x88C9CCCC, 0x02000F3B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x000000B0, 0xA8CC8C04, 
0xCCCC4800, 0x000051C9, 0xC8480000, 0x00000040, 0x000072CB, 0x00000000, 0xCCCC8A04, 0xCCCCCCCC, 
0x10000736, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0020000, 
0x00002000, 0xBBBBBB9A, 0x777777A8, 0xCCCC69C6, 0x666696BC, 0xC6060000, 0x00000031, 0x2086CBCC, 
0x56010000, 0x0020769A, 0xAC140000, 0x12000F0B, 0xC0000060, 0x00C00C04, 0x00000002, 0x00000000, 
0x00000000, 0x00000002, 0x00000000, 0x00400000, 0x483333C3, 0xC868CACC, 0x78BB47C2, 0x2252C8CC, 
0xCCAC0400, 0x000085CB, 0x44444484, 0x44444444, 0xAA484444, 0x74CACCBB, 0x12000918, 0x00000020, 
0x00000000, 0x04000400, 0x000220C4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCAC99C9, 
0x9999A9CC, 0x666666C6, 0x66B8CC8C, 0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCACC9, 0x20001095, 0x00000000, 
0x13310100, 0x04000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00220000, 0x9C99CBC9, 0x9999CBCC, 0x996966C6, 0x99B9CC9C, 0xC6060000, 0x00000031, 
0x99999999, 0x999999A9, 0x99999999, 0xCC9CB9CC, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x000000B0, 0xA8CC8C04, 0xCCCC4800, 
0x000051C9, 0xC8480000, 0x00000040, 0x000072CB, 0x00000000, 0xCCCC8A04, 0xCCCCCCCC, 0x0080050B, 
0x00000000, 0x00200A08, 0x00000008, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x999999C9, 0x99A9CCCC, 0x999999C9, 0x99CBCCBC, 0xCCCCCC08, 0x00004088, 0x00000000, 0x00000000, 
0xCC9B1400, 0x000051CA, 0x1200091F, 0x00000020, 0x00000000, 0xA0600800, 0x4C00200B, 0x00000000, 
0x00008800, 0x00000000, 0x00000000, 0x999999B9, 0xB9CCCCC9, 0xCC9999C9, 0x999999CC, 0xCC8C840C, 
0x0062CACC, 0xCCAC9957, 0x000051CA, 0x00000000, 0x25000000, 0x02000F3B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x000000B0, 0xA8CC8C04, 
0xCCCC4800, 0x000051C9, 0xC8480000, 0x00000040, 0x000072CB, 0x00000000, 0xCCCC8A04, 0xCCCCCCCC, 
0x12000506, 0xCC000060, 0x22C2A64A, 0x00008002, 0x00000000, 0x00006686, 0x004600AA, 0x00000044, 
0x00880000, 0x8C0400B0, 0x2640C8CC, 0xBB870400, 0x0040C8CC, 0xCC8CAB0C, 0x000084CC, 0x00000020, 
0x00000000, 0x8C670400, 0x76CBCCCC, 0x12000918, 0x00000020, 0x00000000, 0x0A020A00, 0x004886CC, 
0x02440000, 0x00202200, 0x00000002, 0x00000000, 0xC8CCA9B7, 0x0084C88C, 0xCCCC8CC4, 0x0051C9CC, 
0xC8480000, 0x00004048, 0xB77B0200, 0xCBCCAC68, 0x31324685, 0x73770300, 0x04000704, 0x00C42860, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCCCCBC, 
0x5159B8CC, 0x8CCB8CC4, 0x0040C8CC, 0xC8480000, 0x00000040, 0x00000000, 0x00000000, 0xAC666614, 
0x62AACACC, 0x0080081F, 0x00000020, 0x00000806, 0xC0000800, 0x8C00800A, 0x02000000, 0x00004400, 
0x00000000, 0x00000000, 0x78CBCCBA, 0x7559A9CC, 0xCCCAAB06, 0x0040C8CC, 0xCCB8CC0C, 0x0040C8CC, 
0x30C9CCCC, 0x00200100, 0x00000000, 0xBB774801, 0x0600070A, 0xAC000060, 0x00A0C060, 0x0AA0A060, 
0x00000000, 0x000000AA, 0x00020000, 0x00000000, 0x002A0000, 0x9A99A9C9, 0xCC9CCB9C, 0x000000C0, 
0xCCCCCC48, 0xC999B999, 0x000099B9, 0x83CACCCB, 0x00000000, 0x49322500, 0x889888A9, 0x02000701, 
0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 
0xC9A999B9, 0xACCACCCC, 0x990900C0, 0xCACBCCCC, 0xC8480000, 0x00000040, 0x99A9CCCC, 0x99999999, 
0x99999999, 0xBC9A9999, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20C00000, 0x0000CA00, 0x000000B0, 0xA8CC8C04, 0xCCCC4800, 0x000051C9, 0xC8480000, 
0x00000040, 0x000072CB, 0x00000000, 0xCCCC8A04, 0xCCCCCCCC, 0x0080050B, 0xC2000060, 0x20C20C28, 
0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00A00000, 0xCB9999B9, 0xC999CCCC, 
0x999999C9, 0x99A9CCCC, 0xCCBC3700, 0x000030C6, 0x00000000, 0x00000000, 0xCC9C1400, 0x001065CB, 
0x1200091F, 0x00000020, 0x00000000, 0xC0000800, 0x8C00800B, 0x02000000, 0x00004700, 0x00000000, 
0x00000000, 0x999999B9, 0x9999CCCC, 0xCC9999C9, 0x9999CCCC, 0xCCAB8808, 0x000093CB, 0xCCAC9957, 
0x000051CA, 0x00000000, 0x25000000, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x000000B0, 0xA8CC8C04, 0xCCCC4800, 0x000051C9, 
0xC8480000, 0x00000040, 0x000072CB, 0x00000000, 0xCCCC8A04, 0xCCCCCCCC, 0x10000736, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0020000, 0x00006000, 0xC8CCCCB8, 
0x00000040, 0xCCCC8C04, 0x000040C8, 0xC6060000, 0x00000031, 0x2084CBCC, 0x68020000, 0x000072BA, 
0x7A230000, 0x01000736, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xC0020000, 0x00006000, 0xCACCBC78, 0x11112154, 0xCCCC8C04, 0x000040C8, 0xC6060000, 0x00000031, 
0x2095CCCC, 0x79020000, 0x000072BA, 0x7A230000, 0x12000506, 0xCC000060, 0x22C2A64A, 0x00008002, 
0x00000000, 0x00006686, 0x004600AA, 0x00000044, 0x00880000, 0x480000B0, 0x0040C8CC, 0x48510100, 
0x0051C9CC, 0xCC7A2500, 0x750096CC, 0x00000020, 0x00000000, 0x8C340000, 0x76CBCCCC, 0x12000918, 
0x00000020, 0x00000000, 0x0A000A00, 0x004882CA, 0x02440000, 0x00202200, 0x00000002, 0x00000000, 
0xCC9B99C9, 0x9999B9CC, 0x490200C0, 0x0084CCBC, 0xC9999999, 0x00009999, 0xCACCABC9, 0x44444495, 
0x44444444, 0xAA474444, 0x00000910, 0x82000040, 0xA0888000, 0x0000C0C0, 0x00000000, 0x00004400, 
0x00200000, 0x00000000, 0x00060000, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xCBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x04000701, 0x0228C64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCC9C99B9, 0x9999CCCC, 
0x9B0900C0, 0x9999CCCC, 0xC6060000, 0x00000031, 0x99999999, 0x99999999, 0xBC999999, 0x9999B9CC, 
0x0080051F, 0x00000020, 0x00000000, 0xA0000000, 0xAC000000, 0x00000000, 0x00004000, 0x00000000, 
0x00000000, 0xCBCC9CB9, 0xAC99A9BB, 0x9999B9C9, 0xCCCCCC99, 0x8C74950C, 0x0040C8CC, 0xCCCCBB5A, 
0x10A567B7, 0x00000000, 0x01000000, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x646A02B0, 0xA6C9CC8C, 0xCCCC4800, 0x0042C8CC, 
0xC8480000, 0x00000040, 0x000051CA, 0x00000000, 0x01000000, 0xCCCCBC5A, 0x12000509, 0xAC000060, 
0x00A00A6C, 0x00000000, 0x00000000, 0x0000AA00, 0x00202046, 0x00000020, 0x00A00000, 0x9C9999B9, 
0xCA9A9999, 0x9C9999C9, 0x99AA99C9, 0xCC480000, 0x8C84CCCC, 0x000083CB, 0x00000000, 0x15000000, 
0xBCCCCCAB, 0x0A00091A, 0x00000060, 0x00000000, 0x00020800, 0xA80ACA08, 0x66660000, 0x00464400, 
0x00000064, 0x00000000, 0xCACC8CBC, 0x00000062, 0xCCCC8CC4, 0x001055C9, 0xC8CCCC0C, 0x00000040, 
0x8C771341, 0x99CBCBCC, 0x000030B9, 0x48010000, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x000000B0, 0xA8CC8C04, 0xCCCC4800, 
0x000051C9, 0xC8480000, 0x00000040, 0x000072CB, 0x00000000, 0xCCCC8A04, 0xCCCCCCCC, 0x0C00070F, 
0x00000060, 0xCC020000, 0x00000002, 0x00000000, 0x00000000, 0x00400086, 0x00000000, 0x00000000, 
0x141111B1, 0xC8CCCC8C, 0xCCCCC9C8, 0x7B43C889, 0x51B98C0C, 0x00000000, 0x11111111, 0x25111111, 
0x52CACCAC, 0x84141111, 0x0000072D, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x000C0000, 0x00000000, 0x00000000, 0x95CCCCBC, 0x00000010, 0xCBCCCC08, 0x00008495, 0xC8CCAC06, 
0x00000073, 0x000010A5, 0x00000000, 0x00000000, 0xCCCC8C27, 0x0E000925, 0x00000080, 0x00000000, 
0x0CA80600, 0xA0006046, 0x00AC0000, 0x00008400, 0x00000066, 0x00000000, 0xCA9999B9, 0x99999A99, 
0x030000C0, 0x20A6C87B, 0xC99B9999, 0x00009999, 0x305796AB, 0x00000000, 0x00000000, 0x14000000, 
0x00000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 
0x0000CA00, 0x000000B0, 0xA8CC8C04, 0xCCCC4800, 0x000051C9, 0xC8480000, 0x00000040, 0x000072CC, 
0x00000000, 0xCCCC8A04, 0xCCCCCCCC, 0x00000F06, 0xCA000060, 0x22C2A62A, 0x00008002, 0x00000000, 
0x00006686, 0x004600AA, 0x00000044, 0x00880000, 0x9C9CA9CC, 0xC9C9CC9C, 0xCC4800C0, 0xCC8CCCCC, 
0xC99BCC99, 0x00009999, 0x9AB9BACA, 0x00203552, 0x9B380000, 0xACAACCAC, 0x00800846, 0x8A000040, 
0x0080C60C, 0xCCC08600, 0x06000064, 0x20000000, 0x00000000, 0x200A0000, 0x00662000, 0xBC9999C9, 
0xCCB9B9C9, 0x141111C1, 0x8C84CC8C, 0xC9C9A9CC, 0x11119999, 0xBC88AACB, 0x222222A5, 0x22222222, 
0x9A482222, 0x02000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00220000, 0x999999B9, 0x9999A999, 0x990900C0, 0x99999999, 0xC8480000, 0x00000040, 
0x9ACACCCC, 0x99999999, 0x99999999, 0x99999999, 0x0080050B, 0xC2000060, 0x20C20C2A, 0x00000008, 
0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00A00000, 0x9C99CCBC, 0x9999C9CC, 0xCCACAACA, 
0xCAAACCCC, 0xCBCCBBCB, 0xCBBBBCCC, 0xAACACBAA, 0xAAAAAAAA, 0xCCCCAAAC, 0xAABCCCCC, 0x1200091F, 
0x00000020, 0x00000000, 0x90000A00, 0x6C00800B, 0x06000000, 0x00007600, 0x00000000, 0x00000000, 
0x999999B9, 0x999CCCCC, 0xCC9999C9, 0x9999C9CC, 0xCC8C44C8, 0x222273CB, 0xCC5A0100, 0x000010A5, 
0x00000000, 0x00000000, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20C00000, 0x0000CA00, 0x000000B0, 0xA8CC8C04, 0xCCCC4800, 0x000051C9, 0xC8480000, 
0x00000040, 0x000072CB, 0x00000000, 0xCCCC8A04, 0xCCCCCCCC, 0x12000506, 0xCA000060, 0x02820040, 
0x00000000, 0x00000000, 0x00000660, 0x00400088, 0x00000004, 0x00000000, 0x480000B0, 0x510184CC, 
0xC84811C1, 0x111184CC, 0xCCBC37C2, 0x222242C8, 0x00000020, 0x00000000, 0x8C340000, 0x76CBCCCC, 
0x1200091A, 0x00000020, 0x00000000, 0x04000600, 0x0094C48A, 0x02400000, 0x00208900, 0x00000002, 
0x00000000, 0xB7CC8CBC, 0x00000030, 0xA8C88CC4, 0x1141C8CC, 0xC8ACCCCC, 0x22848C44, 0x35A6AAAA, 
0x51CACC9A, 0x00000000, 0x14000000, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x000000B0, 0xA8CC8C04, 0xCCCC4800, 0x000051C9, 
0xC8480000, 0x00000040, 0x000072CB, 0x00000000, 0xCCCC8A04, 0xCCCCCCCC, 0x02000606, 0xA6000040, 
0x70888080, 0x00007090, 0x00000000, 0x00000600, 0x00900008, 0x00000000, 0x00060000, 0x68CAC8BC, 
0xC889CCCC, 0xCCCCCCC8, 0x2086CACC, 0xCBCCCCAC, 0xAAAAAAAA, 0x002096CB, 0x13000000, 0x13116378, 
0xCCACBB7A, 0x02000635, 0x02000020, 0x00000020, 0x00220000, 0x00000000, 0x00000000, 0x00000000, 
0x800C0000, 0x00442000, 0xABCCBCC9, 0x9999BBAC, 0xCB9825C0, 0xCCCCBBAB, 0xCAAC9999, 0x99999999, 
0x42B8CCCC, 0x00000020, 0x00000000, 0x25521200, 0x00800646, 0x80000040, 0x0080C200, 0x0C009000, 
0x00000094, 0x00000000, 0x00000000, 0x00000000, 0x00600000, 0x9C9999C9, 0xCC9C99CC, 0x010000C0, 
0xCCCCCC59, 0xCBABAAAA, 0xAAAAAAAA, 0xAACCCCCC, 0x00004195, 0x00000000, 0x79472125, 0x02000701, 
0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 
0x9C9B99B9, 0x9C99B9CC, 0x993933C3, 0x9C99C9CC, 0xC89C45C4, 0x44444444, 0x9999B9CC, 0x9B999999, 
0x999999B9, 0x9B999999, 0x00800816, 0x00000040, 0x00000000, 0xC0800800, 0x2C000002, 0x02000000, 
0x00000000, 0x00000000, 0x00000000, 0xCCBCBBBB, 0xBBBBBBBB, 0x9C9B99C9, 0x9999CC9C, 0xC8CCCCCA, 
0x44444444, 0xBBCCCCCC, 0xBBBBBBBB, 0xBBBBBBBB, 0xBCBBBBBB, 0x00000F3B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x000000B0, 0xA8CC8C04, 
0xCCCC4800, 0x000051C9, 0xC8480000, 0x00000040, 0x000072CB, 0x00000000, 0xCCCC8A04, 0xCCCCCCCC, 
0x02000842, 0xC2000040, 0x28C20C04, 0x00000008, 0x00000000, 0x000000AC, 0x0022008A, 0x00000022, 
0x00400000, 0xAC9999B9, 0x99A9CCCC, 0x999999C9, 0xAACCCC9C, 0xC8CCCC0C, 0x20000073, 0x52020020, 
0x68342300, 0xCCCCCCAC, 0x84BACCCC, 0x12000915, 0x00000060, 0x00000000, 0xA0AC0400, 0x04000000, 
0xC0000000, 0x00000000, 0x00000000, 0x00000000, 0x583603B0, 0xCCCCCCCC, 0xCC6A24C0, 0x51A9CBCC, 
0x2054C90C, 0x00000000, 0x97CCCCCC, 0x00002143, 0x00000010, 0xAC680000, 0x02000F3B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x000010B5, 
0xC8CC8C04, 0xCCCC8C04, 0x000073CB, 0xC8480000, 0x00000040, 0x000072BA, 0x00000000, 0x87140000, 
0xCCCC3831, 0x1200050F, 0x00000060, 0xCC040000, 0x00000070, 0x00000000, 0x00000000, 0x00800086, 
0x00000000, 0x00000000, 0xBC9A99B9, 0x7384CCCC, 0xCCCC8CC4, 0x3087CCCC, 0xC8B8CC0C, 0x00100040, 
0x010064CC, 0x49020000, 0xA7CCCCCC, 0xCCAC6844, 0x00000925, 0x00000080, 0x00000000, 0x0CAC0600, 
0x000060A6, 0x00AC0000, 0x00008400, 0x00000066, 0x00000000, 0xCCCCBAB7, 0x5167AACB, 0xCCA92600, 
0x4587CACC, 0xC8CCCC0C, 0x00000040, 0x63C8CCBC, 0x00000021, 0x00000000, 0x27000000, 0x00000703, 
0x00C06C60, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xBC8715B0, 0xCCCCCCCC, 0xCC9A67C4, 0x30B7CCCC, 0xC8480000, 0x00000040, 0x4C140062, 0xCCBC5986, 
0xCCCCCCCC, 0x6687AACB, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20C00000, 0x0000CA00, 0x000000B0, 0xCBCC8C04, 0xCCAC4800, 0x006284CC, 0xC8480000, 
0x00000040, 0x000051A9, 0x00000000, 0x15000000, 0xCCCCCBAB, 0x1200050B, 0xC2000060, 0x00C00C24, 
0x00000004, 0x00000000, 0x00000000, 0x006000CC, 0x00000000, 0x00000000, 0x8C6402B0, 0xBBBACCCC, 
0x26000000, 0xCCCCCCAC, 0xC8CCCC0C, 0x00000062, 0x00000062, 0x36000000, 0xCCABAA89, 0xA9AACCCC, 
0x12000943, 0x00000040, 0x00000000, 0x0CC40A00, 0x000200C6, 0x02000000, 0x00006200, 0x00000000, 
0x00000000, 0xACAAAACA, 0xCACCCCCC, 0x260000C0, 0x73ABCCAC, 0xC9CCCC9C, 0x02229999, 0xCCCCCCCC, 
0x00002094, 0x44443412, 0xAC684444, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xAA9A99C9, 0xCBBBCCBB, 0x990900C0, 0x99A9CC9C, 
0xC848A606, 0x00007343, 0x9999CCCC, 0x99999999, 0x99999999, 0xCCBB9A99, 0x08000F3B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x000000B0, 
0xA8CC8C04, 0xCCCC4800, 0x000051C9, 0xC8480000, 0x00000040, 0x000072CB, 0x00000000, 0xCCCC8A04, 
0xCCCCCCCC, 0x12000509, 0xAC000060, 0x00A00A6C, 0x00000000, 0x00000000, 0x0000AA00, 0x00202046, 
0x00000020, 0x00A00000, 0xA99999B9, 0xA999C9CC, 0x9B9999C9, 0x9999C9CC, 0x85542102, 0x7B84CC9C, 
0x00001084, 0x00000000, 0x26000000, 0xA9CCCC8C, 0x1200091C, 0x00000060, 0x00000000, 0x00000000, 
0x00C24A00, 0x08000000, 0x00808A00, 0x00000000, 0x00000000, 0xCACCAAB9, 0x79AA86CC, 0xCCCC48C0, 
0x4875CBCC, 0xC8A9860B, 0x6784CC78, 0xA9CABBA9, 0x95CACCBC, 0x00000042, 0x98264214, 0x0000072D, 
0x26000000, 0x00000060, 0x00000000, 0x66000000, 0x00000000, 0x000A0000, 0x00000000, 0x000A0000, 
0xCCCC9CB5, 0x9545C8BC, 0x59848CC4, 0x40C8CCCC, 0xCC48760B, 0x951573CB, 0x30480151, 0x00000000, 
0x97140000, 0xCA9C7779, 0x0C00070A, 0xAC000060, 0x0020C060, 0x0840C600, 0x00040080, 0x4000000A, 
0x00000000, 0x00000000, 0x00400000, 0xCCBBA9C9, 0xCCAA9CCB, 0x020000C0, 0xCBCC9C65, 0xC999999A, 
0x0000999A, 0xAACCCCCC, 0x00001075, 0x14420200, 0xAA382186, 0x02000701, 0x0228C64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0x9C9999B9, 0xACCC99CC, 
0x990900C0, 0x9999CCAC, 0xC8A86A02, 0x00000040, 0x9999A9CB, 0x9A999999, 0x9999BACC, 0xCC999999, 
0x00FF0806, 0x090B0C0B, 0x00000A0A, 0x00000000, 0x00000000, 0x00000000, 0x00000200, 0x00000000, 
0x00000000, 0x42404040, 0x00004440, 0x00000000, 0x00000000, 0xBDBDBDBD, 0x0000BDBD, 0x00000000, 
0x00000000, 0xCEAEAEAE, 0x0000AEAE, 0x00000000, 0x00000000, 0x0200013B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0x10000636, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0020000, 
0x00002000, 0xCBCCBCB9, 0x77777798, 0xCCCC8CC8, 0x888888C8, 0xC6060000, 0x00000031, 0x2086CBCC, 
0x56010000, 0x0020769A, 0xAC140000, 0x12000F0B, 0xC0000060, 0x00C00C04, 0x00000002, 0x00000000, 
0x00000000, 0x00000002, 0x00000000, 0x00400000, 0x999999C9, 0xBACCCC9C, 0x999999C9, 0x99B9CC9A, 
0xCCAC0400, 0x000085CB, 0x54556566, 0x56454444, 0xCCBC8A77, 0xA8AAAACB, 0x12000918, 0x00000020, 
0x00000000, 0x04000400, 0x000220C4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x8AA7AB47, 
0x2284CACC, 0xCC8C77C7, 0x777787CC, 0xC7060000, 0x00000031, 0xCCAC8B77, 0x7777B8CC, 0x77777777, 
0x77777777, 0x00800912, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 
0x00000000, 0x00060000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x12000704, 0x00C42860, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x99999999, 0x99BACCAC, 0xCC8C88C8, 
0x888888CC, 0xCBBBBBBB, 0xBBBBBBBB, 0x8988A889, 0x888888A8, 0xCCACAB9B, 0x8888B8CA, 0x0200013B, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0x12000F0B, 0xC0000060, 0x00C00C04, 0x00000002, 0x00000000, 0x00000000, 
0x00000002, 0x00000000, 0x00400000, 0x88888888, 0x8888A8BC, 0x8C7777C7, 0x7777CACC, 0xCCBBBBBB, 
0xCBBBBBBB, 0x77777787, 0x77777777, 0xAA787777, 0x9AB9CCCC, 0x12000918, 0x00000020, 0x00000000, 
0x04000400, 0x000220C4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCCBCC9, 0x999999CC, 
0x8C7777C7, 0x77C8CCCC, 0xCBBBBBBB, 0xBBBBBBBB, 0xB9BBABCB, 0x878A879A, 0x77777777, 0x77777777, 
0x00800912, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 
0x00060000, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xBBBBBBCB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x03000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCCCCACC9, 0x9999BACB, 0x9C7977C7, 0x9999CCCC, 
0xCBBBBBBB, 0xBBBBBBBB, 0x99999999, 0x99999999, 0xBC9B9999, 0xAACBCCCC, 0x0080010B, 0xC0000060, 
0x00C00C06, 0x00000007, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00400000, 0x999999B9, 
0x99B9CCCC, 0x999999C9, 0x99CACCAC, 0xCCCCCC09, 0x00004089, 0x00000000, 0x00000000, 0xCC8A0400, 
0x000051CA, 0x1200091F, 0x00000020, 0x00000000, 0x90000800, 0x6C00200B, 0x04000000, 0x00000000, 
0x00000000, 0x00000000, 0x999999B9, 0xC9CCCCBA, 0xCC9999C9, 0x999999CC, 0xCC480000, 0x0030B7CC, 
0xCCAC9957, 0x000083CB, 0x00000000, 0x25000000, 0x0200013B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x512166B2, 0xC8CCAC26, 0xCCCC7B03, 
0x001095C9, 0xC8480000, 0x00000040, 0x006297CC, 0x03000000, 0x03109589, 0xCCCCBC8A, 0x12000106, 
0xCA000060, 0x22C2A62A, 0x00008002, 0x00000000, 0x00006686, 0x004600AA, 0x00000044, 0x00880000, 
0x480000B0, 0x62AACBCC, 0x8C040000, 0x002096CC, 0xCC7B0300, 0x0030B7CC, 0x00000020, 0x00000000, 
0x8C340000, 0x76CBCCCC, 0x12000918, 0x00000020, 0x00000000, 0x0A000A00, 0x002882CA, 0x02440000, 
0x00202200, 0x00000002, 0x00000000, 0xCCCC9CB5, 0x00849C8B, 0xCCAC4800, 0x001095CC, 0xC8CA8C04, 
0x00000440, 0xB77B0200, 0xCBCCAC68, 0x31324685, 0x73770300, 0x00000704, 0x00C42860, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCBCCCCBC, 0x10958C74, 
0xCCBC37C0, 0x000084CC, 0xC8480000, 0x00000040, 0x00000000, 0x00000000, 0xAC666614, 0x62AACACC, 
0x0080071F, 0x00000020, 0x00000806, 0xC0800800, 0x8C00800A, 0x02000000, 0x00004400, 0x00000000, 
0x00000000, 0xC8CCCCBC, 0x11114148, 0xCCBCBB07, 0x000084CC, 0xCC8A8C07, 0x0040C8CC, 0x51CACCBB, 
0x00834801, 0x00000000, 0x49010000, 0x0200013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x512166B2, 0xC8CCAC26, 0xCCCC7B03, 0x001095C9, 
0xC8480000, 0x00000040, 0x006297CC, 0x03000000, 0x03109589, 0xCCCCBC8A, 0x0000052D, 0x82000060, 
0x40840000, 0x00002A80, 0x00000006, 0x02000600, 0x80AC8628, 0x00000000, 0x00040000, 0xCCCCCCC8, 
0xC88ACCCC, 0xC8CCCCC8, 0x86C8C8CC, 0xCACCCC9C, 0x99999999, 0x8787CCCC, 0x77777777, 0xA98A9979, 
0xCC78A788, 0x00000635, 0x02000020, 0x00000020, 0x00220000, 0x00000000, 0x00000000, 0x00000000, 
0x800C0000, 0x00442000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x0600060A, 0xAC000060, 0x00A0C060, 0x0000A000, 
0x00000000, 0x000000AA, 0x00020000, 0x00000000, 0x002A0000, 0xC99999C9, 0xCCCCCC9C, 0xA62600C0, 
0xC8CCCC48, 0xC9999999, 0x00519999, 0x41B6CCCC, 0x00000000, 0x38000000, 0xCCCCACAA, 0x02000701, 
0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0x0200013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20A00000, 0x0000CC00, 0x512166B2, 0xC8CCAC26, 0xCCCC7B03, 0x001095C9, 0xC8480000, 
0x00000040, 0x006297CC, 0x03000000, 0x03109589, 0xCCCCBC8A, 0x12000F0B, 0xC0000060, 0x00C00C04, 
0x00000002, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00400000, 0x999999C9, 0xBACCCC9C, 
0x99C999C9, 0x999999CB, 0xCCAC0400, 0x000085CB, 0x88888888, 0x88888888, 0xCCAC9B88, 0x88A8CACC, 
0x12000918, 0x00000020, 0x00000000, 0x04000400, 0x000220C4, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x8AA7AB47, 0x2253C8CC, 0xCC7A7BC4, 0x222252C8, 0xC7060000, 0x00000031, 0xCC7B5487, 
0x444464BB, 0x44444444, 0x44444444, 0x00800912, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 
0x00004400, 0x00000000, 0x00000000, 0x00060000, 0xBCBBBBCB, 0xBBBBBBCC, 0xBBBBBBCB, 0xBBCBBCBB, 
0xCCCCCCCC, 0xCCCCCCCC, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x06000704, 0x00C42860, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x888888C8, 
0x8888CCCC, 0xCC8C77C7, 0x77777787, 0xCBBBBBBB, 0xBBBBBBBB, 0xBA8988A8, 0x888888B8, 0xAC9B8888, 
0x88C9CCCC, 0x0200013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20A00000, 0x0000CC00, 0x512166B2, 0xC8CCAC26, 0xCCCC7B03, 0x001095C9, 0xC8480000, 0x00000040, 
0x006297CC, 0x03000000, 0x03109589, 0xCCCCBC8A, 0x10000636, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xC0020000, 0x00002000, 0xC9CCCCC9, 0x44444464, 0xCC8C35C3, 
0x333353C8, 0xC6060000, 0x00000031, 0x2175CBCC, 0x56111111, 0x1121759A, 0x9C141111, 0x12000F0B, 
0xC0000060, 0x00C00C04, 0x00000002, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00400000, 
0x483333C3, 0xC868CACC, 0x78BB47C2, 0x2252C8CC, 0xCCBCAAAA, 0xAAAACABB, 0x44444484, 0x44444444, 
0xAA484444, 0x74CACCBB, 0x12000918, 0x00000020, 0x00000000, 0x04000400, 0x000220C4, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xCCBC9CC9, 0x9999B9CC, 0xAC7B24C2, 0x2285CCCC, 0xCBABAAAA, 
0xAAAAAAAA, 0xCACCCCC8, 0x64694484, 0x44444457, 0x44444444, 0x00800912, 0x82000040, 0x00888000, 
0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0xBBBBBBCB, 0xBBBBBBBB, 
0xBBBBBBCB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0x03000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00220000, 0xCCCCACC9, 0x9999BACB, 0xAB3922C2, 0x99C9CCCC, 0xCBABAAAA, 0xAAAAAAAA, 0x99999999, 
0x99999999, 0xBC9B9999, 0xAACBCCCC, 0x0080031F, 0x00000020, 0x00000000, 0xC0800800, 0x8C00800A, 
0x02000000, 0x00004400, 0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x0200013B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x512166B2, 
0xC8CCAC26, 0xCCCC7B03, 0x001095C9, 0xC8480000, 0x00000040, 0x006297CC, 0x03000000, 0x03109589, 
0xCCCCBC8A, 0x0C000121, 0x86000080, 0xCC86A840, 0x0000800C, 0x00000000, 0x000000CC, 0x0406008A, 
0x00000088, 0x00800000, 0x999999B9, 0xA99B999B, 0x99A9A9C9, 0x99999999, 0x4297CC0C, 0x6A020000, 
0x43111300, 0x8A454331, 0xA7CCCCCC, 0x62465443, 0x0C000915, 0x00000060, 0x00000000, 0x44CC0400, 
0x00002002, 0x00000000, 0x00002000, 0x00000000, 0x00000000, 0xCC9B26B0, 0x1030B7CC, 0xCCAC26C0, 
0x0030B7CC, 0xB7CCCC0C, 0x00000030, 0x96CBCCAC, 0x00000042, 0x00000000, 0x14000000, 0x0200013B, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 
0x512166B2, 0xC8CCAC26, 0xCCCC7B03, 0x001095C9, 0xC8480000, 0x00000040, 0x006297CC, 0x03000000, 
0x03109589, 0xCCCCBC8A, 0x0A000F06, 0xCA000060, 0x22C2A62A, 0x00008002, 0x00000000, 0x00006686, 
0x004600AA, 0x00000044, 0x00880000, 0x8C0400B0, 0x74B9CCCC, 0x487303C0, 0x40C8CCCC, 0xC8CCCC0C, 
0x00000040, 0x00000041, 0x00000000, 0xCC9B7A03, 0x22A5CBCC, 0x12000917, 0x00000040, 0x00000000, 
0x0CC60B00, 0x000000C6, 0x00A00000, 0x00000000, 0x00000000, 0x00000000, 0xBC9999C9, 0xCC99CCCC, 
0x040000C0, 0x52C8CC8C, 0xC9CCCC9B, 0x00109999, 0xC9CCCCCC, 0x10103165, 0x00001000, 0xAB581300, 
0x00800712, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 
0x00060000, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xCBBBBBBB, 0xBBBBBBBB, 0xBBBBBBCB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCC9C99C9, 0x99A9BACB, 0x260000C0, 0x3184CCAC, 
0xCCCCABAA, 0xAAAACACC, 0xBACBCCCC, 0x44447698, 0x48230121, 0xCCCCCCBB, 0x0200013B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x512166B2, 
0xC8CCAC26, 0xCCCC7B03, 0x001095C9, 0xC8480000, 0x00000040, 0x006297CC, 0x03000000, 0x03109589, 
0xCCCCBC8A, 0x0080010B, 0xC0000060, 0x00C00C07, 0x00000007, 0x00000000, 0x00000000, 0x00000002, 
0x00000000, 0x00400000, 0xCC9C99B9, 0x9999C9CC, 0x999999C9, 0x99CACCBC, 0xCCCC4802, 0x000020A6, 
0x00000000, 0x00000000, 0xCC480200, 0x000063CB, 0x1200091F, 0x00000020, 0x00000000, 0xC0000800, 
0x8C00800B, 0x04000000, 0x00006600, 0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x0000013D, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000400, 0x00440000, 0x00000000, 0x00080000, 
0x040000B0, 0x62AACC8C, 0xCC8C04C0, 0x000030B7, 0xCCA82600, 0x000084CC, 0x72A8CCCC, 0x00000000, 
0x00735602, 0x4A010000, 0x0200013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20A00000, 0x0000CC00, 0x512166B2, 0xC8CCAC26, 0xCCCC7B03, 0x001095C9, 0xC8480000, 
0x00000040, 0x006297CC, 0x03000000, 0x03109589, 0xCCCCBC8A, 0x0F000536, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0020000, 0x00006000, 0xCBCC8CB6, 0x00000073, 
0xCCCC6A02, 0x000062CA, 0xC8480000, 0x00000040, 0x0010A5CC, 0x39000000, 0x000072BA, 0x7B020000, 
0x12000106, 0xCC000060, 0x22C2A64A, 0x00008002, 0x00000000, 0x00006686, 0x004600AA, 0x00000044, 
0x00880000, 0x6A0200B0, 0x0043C8CC, 0x6A020000, 0x001095CC, 0xCC7B0300, 0x0040C8CC, 0x00000020, 
0x00000000, 0x8C340000, 0x76CBCCCC, 0x12000918, 0x00000020, 0x00000000, 0x0A000A00, 0x004882CA, 
0x02440000, 0x00202200, 0x00000002, 0x00000000, 0xCCCC9CB9, 0x9999B9CC, 0x8C0400C0, 0x0084CCCC, 
0xC9999999, 0x00009999, 0xCACCCCCC, 0x20000084, 0x20000200, 0x68242213, 0x00000910, 0x82000040, 
0xA0888000, 0x0000C0C0, 0x00000000, 0x00004400, 0x00200000, 0x00000000, 0x00060000, 0xBBBBBBCB, 
0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xCBBBBBBB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0x03000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00220000, 0xCCCC9CB9, 0x9999B9CC, 0xAC0900C0, 0x9999CBCC, 0xC8480000, 0x00000040, 
0x99999999, 0x99999999, 0xBC9B9999, 0xAACBCCCC, 0x0080050B, 0xC2000060, 0x20C20C2A, 0x00000008, 
0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00A00000, 0xCC9C99B9, 0x9999C9CC, 0x999999C9, 
0x99CACCBC, 0xCCCC4802, 0x000020A6, 0x00000000, 0x00000000, 0xCC480200, 0x000063CB, 0x1200091F, 
0x00000020, 0x00000000, 0x90000A00, 0x6C00800B, 0x06000000, 0x00007600, 0x00000000, 0x00000000, 
0x999AB9C9, 0xA9CCCC9B, 0xCC9999C9, 0x999999CC, 0xC8CC48C1, 0x111141C8, 0xCCAC9957, 0x000083CB, 
0x00000000, 0x25000000, 0x0200013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20A00000, 0x0000CC00, 0x512166B2, 0xC8CCAC26, 0xCCCC7B03, 0x001095C9, 0xC8480000, 
0x00000040, 0x006297CC, 0x03000000, 0x03109589, 0xCCCCBC8A, 0x12000106, 0xCA000060, 0x02820040, 
0x00000000, 0x00000000, 0x00000660, 0x00400088, 0x00000004, 0x00000000, 0x787777C7, 0x7A77C8CC, 
0x8C1411C1, 0x111184CC, 0xCCC848C1, 0x11111184, 0x00000020, 0x00000000, 0x8C340000, 0x76CBCCCC, 
0x1200091A, 0x00000020, 0x00000000, 0x04000600, 0x0094C48A, 0x02400000, 0x00208900, 0x00000002, 
0x00000000, 0xCACCACC7, 0x8C7AA777, 0xC8CC8CC4, 0x111141C8, 0xC8C8CCCC, 0x1131B747, 0x58444496, 
0x54B8CCCC, 0x44444444, 0x46444444, 0x0200013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x512166B2, 0xC8CCAC26, 0xCCCC7B03, 0x001095C9, 
0xC8480000, 0x00000040, 0x006297CC, 0x03000000, 0x03109589, 0xCCCCBC8A, 0x02000606, 0xA6000040, 
0x70888080, 0x00007090, 0x00000000, 0x00000600, 0x00900008, 0x00000000, 0x00060000, 0xCCCCCCCB, 
0xBBCC88CB, 0xB7CCC8C8, 0x33A6CC8C, 0xC8C89ACC, 0x22222242, 0x000051CA, 0x14000000, 0x5A53BA99, 
0xCCCCAA76, 0x02000635, 0x02000020, 0x00000020, 0x00220000, 0x00000000, 0x00000000, 0x00000000, 
0x800C0000, 0x00442000, 0xCACACCCC, 0xAAACCCCC, 0x994544C4, 0xCC78CBCC, 0xCBABAAAA, 0xAAAAAAAA, 
0x9B99C9CC, 0x99999999, 0x99999999, 0x9C999999, 0x00800646, 0x80000040, 0x0080C200, 0x0C009000, 
0x00000094, 0x00000000, 0x00000000, 0x00000000, 0x00600000, 0x9C9999C9, 0xCCCCCC9C, 0x77B777C7, 
0xA7CCCC78, 0xCBBBBBBB, 0xBBBBBBBB, 0x9B99CCCC, 0x9999B999, 0x99999999, 0xCBCC9999, 0x02000701, 
0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 
0xCCCC9AC9, 0xCCCCBCCC, 0x992922C2, 0xCCAACCCC, 0xC87B48C2, 0x22222242, 0x9999A9CC, 0x99999999, 
0x99999999, 0xCC9A9999, 0x00FF2A0B, 0x090C0C0C, 0x0C0A0A09, 0x00060C0A, 0x00000000, 0x01000000, 
0x00010101, 0x00050101, 0x00000000, 0x46C2C2C0, 0xC5464646, 0x00CECEC8, 0x00000000, 0x78787878, 
0x78787878, 0x00787878, 0x00000000, 0x57575757, 0x57575757, 0x00575757, 0x00000000, 0x00800716, 
0x00000040, 0x00000000, 0xC0800800, 0x2C000002, 0x02000000, 0x00000000, 0x00000000, 0x00000000, 
0xA9CA9CB9, 0x99999999, 0x9A9999C9, 0x99BABC9A, 0xCACCCC0C, 0x00000062, 0xA8CCCC89, 0x41867997, 
0x00000000, 0x03000000, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20A00000, 0x0000CC00, 0x510100B0, 0xC8CCAC26, 0xCCCC7B03, 0x001095C9, 0xC8480000, 
0x00000040, 0x000030C8, 0x00000000, 0x03000000, 0xCCCCBC8A, 0x10000521, 0x86000080, 0xCC86A840, 
0x0000800C, 0x00000000, 0x000000CC, 0x0406408A, 0x00000088, 0x00800000, 0x9C9999B9, 0xBBCBCCCC, 
0x9A99BBC9, 0x99CACCCC, 0xA6CACC0C, 0x10002020, 0x01001100, 0xCCAA4823, 0xCCCCCCCC, 0x86CACCCC, 
0x12000915, 0x00000060, 0x00000000, 0x4ACC0400, 0x00002002, 0x00000000, 0x00002000, 0x00000000, 
0x00000000, 0x484300B0, 0xA6CCCCCC, 0xCCAC2600, 0x0030B7CC, 0xC8CCCC0C, 0x00000040, 0x78C9CC9C, 
0x10011164, 0x00000000, 0x03000000, 0x00000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x05000522, 0x20000080, 
0xCC200004, 0x000020C0, 0x00000000, 0x0000CC00, 0x00220024, 0x00000000, 0x00020000, 0x480000B0, 
0x0062CACC, 0xAC680400, 0x0073CBCC, 0xC87A9A0C, 0x6A335141, 0x8889BACC, 0x66140051, 0x6697998A, 
0xCCCCAB68, 0x0C000703, 0x00C06C60, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xCC4800B0, 0x9585BCCC, 0xCCCCCCC4, 0x0062CACC, 0xC8480000, 0x00000040, 
0x6557A6BA, 0xCCCCBC7A, 0x4886CACC, 0x9A7A9888, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x006242B8, 0xCCCC4800, 0xCCAC2600, 
0x000040C8, 0xC8480000, 0x00000040, 0x000051CA, 0x00000000, 0x00000000, 0xCCAC1400, 0x1280050B, 
0xC0000060, 0x00C00C04, 0x00000004, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00400000, 
0x6A0201B0, 0x3095CCCC, 0x48020000, 0x99A9CCCC, 0xC8CCCC0C, 0x13000042, 0x00000000, 0x14000000, 
0xCC8A7756, 0x1073B9CC, 0x12000943, 0x00000040, 0x00000000, 0x0CC40A00, 0x000200C6, 0x02000000, 
0x00006200, 0x00000000, 0x00000000, 0xACAAAACA, 0xCACCCCCC, 0x480000C0, 0x3497CCCC, 0xC9CCCC9C, 
0x10159999, 0xCCCCCCCC, 0x00002094, 0x44443412, 0xAC684444, 0x00800912, 0x82000040, 0x00888000, 
0x0000C0A0, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00060000, 0x999999C9, 0x99999AC9, 
0x030000C0, 0x778B797B, 0xC9999999, 0x00009999, 0x9579A7C9, 0x00001034, 0x00000000, 0x57010000, 
0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00220000, 0xAB9A99B9, 0xCBBBBBCC, 0xBBBBBBCB, 0xBBBBBBBB, 0xCA48620A, 0x00000062, 0xAACBCCCC, 
0x99999999, 0xCC9A9999, 0xCCCCCCCC, 0x00800716, 0x00000040, 0x00000000, 0xC0800800, 0x2C000002, 
0x02000002, 0x00000000, 0x00000000, 0x00000000, 0xBBABCCB9, 0x9A99B9CC, 0x999999C9, 0xCACBCC9C, 
0xA6CACC0C, 0x40006222, 0xCC9B9957, 0x10A5CCCC, 0x00000000, 0x03000000, 0x00000915, 0x00000060, 
0x00000000, 0x002A0400, 0x00002002, 0x00000000, 0x00002100, 0x00000000, 0x00000000, 0x9CA999B9, 
0xC9C9CCCC, 0xCC9999C9, 0x99C9CCCC, 0xCAC8CA0C, 0x00000062, 0xCACCCC8C, 0x41357489, 0x00000000, 
0x03000000, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20A00000, 0x0000CC00, 0x510100B0, 0xC8CCAC26, 0xCCCC7B03, 0x001095C9, 0xC8480000, 0x00000040, 
0x000030C8, 0x00000000, 0x03000000, 0xCCCCBC8A, 0x0C000521, 0x86000080, 0xCC86A840, 0x0000800C, 
0x00000000, 0x000000CC, 0x0406408A, 0x00000088, 0x00800000, 0x9C9999B9, 0xBBCBCCCC, 0xBC99BBC9, 
0x99CACCCC, 0xA6CACC0C, 0x24002121, 0x01001100, 0xCCAA4823, 0xCCCCCCCC, 0x86CACCCC, 0x0E000915, 
0x00000060, 0x00000000, 0x44CC0800, 0x00002002, 0x00000000, 0x00002000, 0x00000000, 0x00000000, 
0xCCCC8BB4, 0x326587CC, 0xCCAC26C0, 0x0041B7CC, 0xC8CCCC0C, 0x01200040, 0x84CCCC9C, 0x00000021, 
0x00000000, 0x03000000, 0x00000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20A00000, 0x0000CC00, 0x000000B0, 0xCBCCBC37, 0xCCCC8CC4, 0x2222A6C8, 0xC84844C4, 
0x44444444, 0x002076C9, 0x00000000, 0x98140000, 0xAC140030, 0x02000622, 0x00000000, 0x0C000000, 
0x00000000, 0x00000000, 0x0000C000, 0x00000000, 0x00000000, 0x00000000, 0x8B9C35B7, 0xABBBCACC, 
0x887403C0, 0xB8CCCC9C, 0xC87A9A0C, 0x6A335141, 0x8889BACC, 0x24000051, 0x6697998A, 0xCCAA4632, 
0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 
0x0000CC00, 0x006242B8, 0xCCCC4800, 0xCCAC2600, 0x000040C8, 0xC8480000, 0x00000040, 0x000051CA, 
0x00000000, 0x00000000, 0xCCAC1400, 0x10000607, 0xCC000060, 0x00C0A08A, 0x00000000, 0x00000000, 
0x00000060, 0x00000067, 0x00000000, 0x00AA0000, 0xAC6725B1, 0x96BACCCC, 0x240000C0, 0xA9CCCC8C, 
0xC9CCCC0C, 0x32013175, 0x01302473, 0x00000010, 0xCC8A4602, 0x87CACCCC, 0x08000943, 0x00000040, 
0x00000000, 0x0CC40800, 0x000200C6, 0x02000000, 0x00006200, 0x00000000, 0x00000000, 0xACAAABCA, 
0xCACCCCCC, 0x040000C0, 0x98BC9B15, 0xC9CCCC9C, 0x00029999, 0xCCCCCCCC, 0x00002094, 0x44443412, 
0xAC684444, 0x00800712, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00060000, 0x999999CB, 0xBCB9CCAC, 0x480000C0, 0xCCCC9C8A, 0xC9999999, 0x00009999, 
0xCCCCACCA, 0x000020A6, 0x00000000, 0x6B020000, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xAA9A99B9, 0xCCCCBCBB, 0x990900C0, 
0x99B9CCCC, 0xC848A609, 0x00309745, 0xAACBCCCC, 0x44447698, 0x48230121, 0xCCCCCCBB, 0x00800716, 
0x00000040, 0x00000000, 0xC0800800, 0x2C000002, 0x02000002, 0x00000000, 0x00000000, 0x00000000, 
0xCCBCCCBC, 0x99BAAAB9, 0x999999C9, 0x99C9CC9C, 0xC9BBCC0C, 0x00000051, 0x8C97B989, 0xA5CCCBCC, 
0x00000010, 0x37000000, 0x00000915, 0x00000060, 0x00000000, 0x002A0400, 0x00002002, 0x00000000, 
0x00002100, 0x00000000, 0x00000000, 0x9C9999B9, 0x9CBBCCCC, 0x9C9C99C9, 0xC9C9CBCC, 0x84CCCCCC, 
0x48222222, 0x97CCCCCC, 0x36112153, 0x11111131, 0xAC681111, 0x02000F3B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x002066B2, 0xC8CCAC05, 
0xCCCC4800, 0x00001095, 0xC8480000, 0x00000040, 0x006297CC, 0x03000000, 0x00109589, 0xAC983602, 
0x12000521, 0x86000080, 0xCC86A840, 0x0000800C, 0x00000000, 0x000000CC, 0x0406408A, 0x00000088, 
0x00800000, 0x9C9999B9, 0xBBCBCCCC, 0xAAABBBC9, 0x99CACCCC, 0xA6CACC0C, 0x10002020, 0x01001100, 
0xCCAA4823, 0xCCCCCCCC, 0x86CACCCC, 0x12000915, 0x00000060, 0x00000000, 0x44CC0800, 0x00002002, 
0x00000000, 0x00002000, 0x00000000, 0x00000000, 0xCC7B6AB2, 0x1085CCCC, 0xCCAC2600, 0x0030B7CC, 
0xB7CCCC0C, 0x00000030, 0x97CCCCCC, 0x00002143, 0x00000010, 0xAC680000, 0x00000F3B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x000000B0, 
0xCBCCBC37, 0xCCCC8CC4, 0x2222A6C8, 0xC84844C4, 0x44444444, 0x002076C9, 0x00000000, 0x98140000, 
0xAC140030, 0x00000622, 0x00000000, 0x0C000000, 0x00000000, 0x00000000, 0x0000C000, 0x00000000, 
0x00000000, 0x00000000, 0x795959B1, 0x0073CBCC, 0x8C848CC4, 0x1141C8BC, 0xC8CAC80C, 0x00000040, 
0x1510A4CC, 0xBA3821A6, 0xA699B9BB, 0x99984545, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x006242B8, 0xCCCC4800, 0xCCAC2600, 
0x000040C8, 0xC8480000, 0x00000040, 0x000051CA, 0x00000000, 0x00000000, 0xCCAC1400, 0x12000529, 
0xC2000060, 0x46C20806, 0x00000000, 0x00000000, 0x0000A888, 0x008000BC, 0x00000000, 0x00220000, 
0xAC0600B0, 0x3085CBCC, 0x48000000, 0x30B6CCCC, 0xC8CCCC0C, 0x00000041, 0x00000040, 0x06000000, 
0xCCCCBB8A, 0x66A8CBCC, 0x12000943, 0x00000040, 0x00000000, 0x0CC40A00, 0x000200C6, 0x02000000, 
0x00006200, 0x00000000, 0x00000000, 0xACAAAACA, 0xCCCCCCCC, 0x480000C0, 0x40B8CCCC, 0xC9CCCC9C, 
0x00029999, 0xCCCCCCCC, 0x00002094, 0x44443412, 0xAC684444, 0x00800712, 0x82000040, 0x00888000, 
0x0000C0A0, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00060000, 0x9C9999C9, 0x9CA9CCCC, 
0x040000C0, 0xB7CCBC8C, 0xC9999999, 0x00009999, 0xCC8A99C8, 0x002056B7, 0x00000000, 0x36421400, 
0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00220000, 0xAB9A99B9, 0xCACCCCCC, 0x990900C0, 0x99B9CCCC, 0xC8480000, 0x00000040, 0xAACBCCCC, 
0x44447698, 0x48230121, 0xCCCCCCBB, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x512166B2, 0xC8CCAC26, 0xCCCC7B03, 0x001095C9, 
0xC8480000, 0x00000040, 0x006297CC, 0x03000000, 0x03109589, 0xCCCCBC8A, 0x10000736, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0020000, 0x00002000, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0x12000F0B, 0xC0000060, 0x00C00C04, 0x00000002, 0x00000000, 0x00000000, 0x00000002, 
0x00000000, 0x00400000, 0x999999C9, 0xBACCCC9C, 0x999999C9, 0x99B9CCBB, 0xCCAC0400, 0x000085CB, 
0x54556566, 0x56454444, 0xCCBC8A77, 0xA8A8AAB8, 0x12000918, 0x00000020, 0x00000000, 0x04000400, 
0x000220C4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x8AA7AB47, 0x2253C8CC, 0xBBBBBBBB, 
0xBBBBBBBB, 0xC7060000, 0x00000031, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x12000704, 
0x00C00260, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x888888C8, 0x8888CCCC, 0xCC8C77C7, 0x77777787, 0xC6060000, 0x00000031, 0xBA8988A8, 0x888888B8, 
0xAC9B8888, 0x88C9CCCC, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20A00000, 0x0000CC00, 0x512166B2, 0xC8CCAC26, 0xCCCC7B03, 0x001095C9, 0xC8480000, 
0x00000040, 0x006297CC, 0x03000000, 0x03109589, 0xCCCCBC8A, 0x12000F0B, 0xC0000060, 0x00C00C04, 
0x00000002, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00400000, 0x483333C3, 0xC868CACC, 
0x78BB47C2, 0x2252C8CC, 0xCCAC0400, 0x000085CB, 0x44444484, 0x44444444, 0xAA484444, 0x74CACCBB, 
0x12000918, 0x00000020, 0x00000000, 0x04000400, 0x000220C4, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xCCBC99C9, 0x9999A9CC, 0xBBBBBBCB, 0xBBBBBBBB, 0xCBBBBBBB, 0xBBBBBBBB, 0xCCCCACC9, 
0x20001095, 0x00000000, 0x13310100, 0x04000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x02000F3B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x512166B2, 
0xC8CCAC26, 0xCCCC7B03, 0x001095C9, 0xC8480000, 0x00000040, 0x006297CC, 0x03000000, 0x03109589, 
0xCCCCBC8A, 0x12000F0B, 0xC0000060, 0x00C00C04, 0x00000002, 0x00000000, 0x00000000, 0x00000002, 
0x00000000, 0x00400000, 0x999999C9, 0xBACCCC9C, 0x999999C9, 0x99B9CCBB, 0xCCAC0400, 0x000085CB, 
0x54556566, 0x56454444, 0xCCBC8A77, 0xA8A8AAB8, 0x12000918, 0x00000020, 0x00000000, 0x04000400, 
0x000220C4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x8AA7AB47, 0x2253C8CC, 0xBCB868C6, 
0x66B7C9C9, 0xC7060000, 0x00000031, 0xCCBA998A, 0x99CB99CB, 0x777777A8, 0x77777777, 0x06000704, 
0x00C00260, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20A00000, 0x0000CC00, 0x512166B2, 0xC8CCAC26, 0xCCCC7B03, 0x001095C9, 0xC8480000, 
0x00000040, 0x006297CC, 0x03000000, 0x03109589, 0xCCCCBC8A, 0x10000736, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0020000, 0x00002000, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0x12000F0B, 0xC0000060, 0x00C00C04, 0x00000002, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 
0x00400000, 0x483333C3, 0xC868CACC, 0x78BB47C2, 0x2252C8CC, 0xCCAC0400, 0x000085CB, 0x44444484, 
0x44444444, 0xAA484444, 0x74CACCBB, 0x12000918, 0x00000020, 0x00000000, 0x04000400, 0x000220C4, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCAC99C9, 0x9999A9CC, 0x666666C6, 0x66B8CC8C, 
0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCACC9, 0x20001095, 0x00000000, 0x13310100, 0x04000701, 0x0228C64C, 
0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20A00000, 0x0000CC00, 0x512166B2, 0xC8CCAC26, 0xCCCC7B03, 0x001095C9, 0xC8480000, 0x00000040, 
0x006297CC, 0x03000000, 0x03109589, 0xCCCCBC8A, 0x0080050B, 0x00000000, 0x00200A08, 0x00000008, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x999999C9, 0x99A9CCCC, 0x999999C9, 
0x99CBCCBC, 0xCCCCCC08, 0x00004088, 0x00000000, 0x00000000, 0xCC9B1400, 0x000051CA, 0x1200091F, 
0x00000020, 0x00000000, 0xA0600800, 0x4C00200B, 0x00000000, 0x00008800, 0x00000000, 0x00000000, 
0x999999B9, 0xB9CCCCC9, 0xCC9999C9, 0x999999CC, 0xCC8C840C, 0x0062CACC, 0xCCAC9957, 0x000051CA, 
0x00000000, 0x25000000, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20A00000, 0x0000CC00, 0x512166B2, 0xC8CCAC26, 0xCCCC7B03, 0x001095C9, 0xC8480000, 
0x00000040, 0x006297CC, 0x03000000, 0x03109589, 0xCCCCBC8A, 0x12000506, 0xCC000060, 0x22C2A64A, 
0x00008002, 0x00000000, 0x00006686, 0x004600AA, 0x00000044, 0x00880000, 0x8C0400B0, 0x2640C8CC, 
0xBB870400, 0x0040C8CC, 0xCC8CAB0C, 0x000084CC, 0x00000020, 0x00000000, 0x8C670400, 0x76CBCCCC, 
0x12000918, 0x00000020, 0x00000000, 0x0A020A00, 0x004886CC, 0x02440000, 0x00202200, 0x00000002, 
0x00000000, 0xC8CCA9B7, 0x0084C88C, 0xCCCC8CC4, 0x0051C9CC, 0xC8480000, 0x00004048, 0xB77B0200, 
0xCBCCAC68, 0x31324685, 0x73770300, 0x04000704, 0x00C42860, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCCCCBC, 0x5159B8CC, 0x8CCB8CC4, 0x0040C8CC, 
0xC8480000, 0x00000040, 0x00000000, 0x00000000, 0xAC666614, 0x62AACACC, 0x0080081F, 0x00000020, 
0x00000806, 0xC0000800, 0x8C00800A, 0x02000000, 0x00004400, 0x00000000, 0x00000000, 0x78CBCCBA, 
0x7559A9CC, 0xCCCAAB06, 0x0040C8CC, 0xCCB8CC0C, 0x0040C8CC, 0x30C9CCCC, 0x00200100, 0x00000000, 
0xBB774801, 0x0600070A, 0xAC000060, 0x00A0C060, 0x0AA0A060, 0x00000000, 0x000000AA, 0x00020000, 
0x00000000, 0x002A0000, 0x9A99A9B9, 0xCC9CCB9C, 0x000000C0, 0xCCCCCC48, 0xC999B999, 0x000099B9, 
0x83CACCAB, 0x00000000, 0x49322500, 0x889888A9, 0x02000701, 0x0228C64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBCB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x02000F3B, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 
0x512166B2, 0xC8CCAC26, 0xCCCC7B03, 0x001095C9, 0xC8480000, 0x00000040, 0x006297CC, 0x03000000, 
0x03109589, 0xCCCCBC8A, 0x0080050B, 0xC2000060, 0x20C20C28, 0x00000008, 0x00000000, 0x00000044, 
0x00460068, 0x00000064, 0x00A00000, 0xCB9999B9, 0xC999CCCC, 0x999999C9, 0x99A9CCCC, 0xCCBC3700, 
0x000030C6, 0x00000000, 0x00000000, 0xCC9C1400, 0x001065CB, 0x1200091F, 0x00000020, 0x00000000, 
0xC0000800, 0x8C00800B, 0x02000000, 0x00004700, 0x00000000, 0x00000000, 0x999999B9, 0x9999CCCC, 
0xCC9999C9, 0x9999CCCC, 0xCCAB8808, 0x000093CB, 0xCCAC9957, 0x000051CA, 0x00000000, 0x25000000, 
0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 
0x0000CC00, 0x512166B2, 0xC8CCAC26, 0xCCCC7B03, 0x001095C9, 0xC8480000, 0x00000040, 0x006297CC, 
0x03000000, 0x03109589, 0xCCCCBC8A, 0x10000736, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xC0020000, 0x00006000, 0xC8CCCCB8, 0x00000040, 0xCCCC8C04, 0x000040C8, 
0xC6060000, 0x00000031, 0x2084CBCC, 0x68020000, 0x000072BA, 0x7A230000, 0x01000736, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0020000, 0x00006000, 0xCACCBC78, 
0x11112154, 0xCCCC8C04, 0x000040C8, 0xC6060000, 0x00000031, 0x2095CCCC, 0x79020000, 0x000072BA, 
0x7A230000, 0x12000506, 0xCC000060, 0x22C2A64A, 0x00008002, 0x00000000, 0x00006686, 0x004600AA, 
0x00000044, 0x00880000, 0x480000B0, 0x0040C8CC, 0x48510100, 0x0051C9CC, 0xCC7A2500, 0x750096CC, 
0x00000020, 0x00000000, 0x8C340000, 0x76CBCCCC, 0x12000918, 0x00000020, 0x00000000, 0x0A000A00, 
0x004882CA, 0x02440000, 0x00202200, 0x00000002, 0x00000000, 0xCC9B99C9, 0x9999B9CC, 0x490200C0, 
0x0084CCBC, 0xC9999999, 0x00009999, 0xCACCABC9, 0x44444495, 0x44444444, 0xAA474444, 0x00000910, 
0x82000040, 0xA0888000, 0x0000C0C0, 0x00000000, 0x00004400, 0x00200000, 0x00000000, 0x00060000, 
0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xCBBBBBBB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0x04000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00220000, 0xCC9C99B9, 0x9999CCCC, 0x9B0900C0, 0x9999CCCC, 0xC6060000, 
0x00000031, 0x99999999, 0x99999999, 0xBC999999, 0x9999B9CC, 0x0080051F, 0x00000020, 0x00000000, 
0xA0000000, 0xAC000000, 0x00000000, 0x00004000, 0x00000000, 0x00000000, 0xCBCC9CB9, 0xAC99A9BB, 
0x9999B9C9, 0xCCCCCC99, 0x8C74950C, 0x0040C8CC, 0xCCCCBB5A, 0x10A567B7, 0x00000000, 0x01000000, 
0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 
0x0000CC00, 0x512166B2, 0xC8CCAC26, 0xCCCC7B03, 0x001095C9, 0xC8480000, 0x00000040, 0x006297CC, 
0x03000000, 0x03109589, 0xCCCCBC8A, 0x12000509, 0xAC000060, 0x00A00A6C, 0x00000000, 0x00000000, 
0x0000AA00, 0x00202046, 0x00000020, 0x00A00000, 0xBC9A99B9, 0xAA99C9CC, 0x9B9999C9, 0x99CACCCC, 
0xCC787507, 0x8C84CCCC, 0x003284BA, 0x00200000, 0x47010000, 0xCBCCCCAC, 0x0A00091A, 0x00000060, 
0x00000000, 0x00020800, 0xA80ACA08, 0x66660000, 0x00464400, 0x00000064, 0x00000000, 0xCCCCCCB9, 
0x44375199, 0xBBCCCC08, 0x0051C9CC, 0xC8CCCC0C, 0x00000040, 0x47445654, 0xCCBBCCAC, 0x004197CC, 
0x25210021, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20A00000, 0x0000CC00, 0x512166B2, 0xC8CCAC26, 0xCCCC7B03, 0x001095C9, 0xC8480000, 0x00000040, 
0x006297CC, 0x03000000, 0x03109589, 0xCCCCBC8A, 0x0C00070F, 0x00000060, 0xCC020000, 0x00000002, 
0x00000000, 0x00000000, 0x00400086, 0x00000000, 0x00000000, 0x561115B0, 0xCCCCCC8C, 0xCCCCCC08, 
0x1074C8BC, 0x9596C90C, 0x00400010, 0x00002021, 0x03000000, 0xCCCCCC9C, 0x55466486, 0x0000072D, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000C0000, 0x00000000, 0x00000000, 
0x95CCCCBC, 0x00000010, 0xCBCCCC08, 0x00008495, 0xC8CCAC06, 0x00000073, 0x000010A5, 0x00000000, 
0x00000000, 0xCCCC8C27, 0x0E000925, 0x00000080, 0x00000000, 0x0CA80600, 0xA0006046, 0x00AC0000, 
0x00008400, 0x00000066, 0x00000000, 0xBC9B99B9, 0xCACCCCBC, 0x590120C0, 0x54C9CCBC, 0xC9CBCC9B, 
0x00009999, 0xCCCCCCBC, 0x00005196, 0x00020000, 0x26000000, 0x00000F3B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x512166B2, 0xC8CCAC26, 
0xCCCC7B03, 0x001095C9, 0xC8480000, 0x00000040, 0x006297CC, 0x03000000, 0x03109589, 0xCCCCBC8A, 
0x00000F06, 0xCA000060, 0x22C2A62A, 0x00008002, 0x00000000, 0x00006686, 0x004600AA, 0x00000044, 
0x00880000, 0x9C9CA9CC, 0xC9C9CC9C, 0xCC4800C0, 0xCC8CCCCC, 0xC99BCC99, 0x00009999, 0x9AB9BACA, 
0x00203552, 0x9B380000, 0xACAACCAC, 0x00800846, 0x8A000040, 0x0080C60C, 0xCCC08600, 0x06000064, 
0x20000000, 0x00000000, 0x200A0000, 0x00662000, 0xBC9999C9, 0xCCB9B9C9, 0x141111C1, 0x8C84CC8C, 
0xC9C9A9CC, 0x11119999, 0xBC88AACB, 0x222222A5, 0x22222222, 0x9A482222, 0x02000701, 0x0228C64C, 
0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0x9A9999B9, 
0xCBCCCCAC, 0x990900C0, 0x99C9CC9C, 0xC86A12C1, 0x11111141, 0x9999CCCC, 0x99999999, 0x99999999, 
0xAC999999, 0x0080050B, 0xC2000060, 0x20C20C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 
0x00000064, 0x00A00000, 0x9C99CCBC, 0x9999C9CC, 0xCCACAACA, 0xCAAACCCC, 0xCBCCBBCB, 0xCBBBBCCC, 
0xAACACBAA, 0xAAAAAAAA, 0xCCCCAAAC, 0xAABCCCCC, 0x1200091F, 0x00000020, 0x00000000, 0x90000A00, 
0x6C00800B, 0x06000000, 0x00007600, 0x00000000, 0x00000000, 0x999999B9, 0x999CCCCC, 0xCC9999C9, 
0x9999C9CC, 0xCC8C44C8, 0x222273CB, 0xCC5A0100, 0x000010A5, 0x00000000, 0x00000000, 0x02000F3B, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 
0x512166B2, 0xC8CCAC26, 0xCCCC7B03, 0x001095C9, 0xC8480000, 0x00000040, 0x006297CC, 0x03000000, 
0x03109589, 0xCCCCBC8A, 0x12000506, 0xCA000060, 0x02820040, 0x00000000, 0x00000000, 0x00000660, 
0x00400088, 0x00000004, 0x00000000, 0x480000B0, 0x510184CC, 0xC84811C1, 0x111184CC, 0xCCBC37C2, 
0x222242C8, 0x00000020, 0x00000000, 0x8C340000, 0x76CBCCCC, 0x1200091A, 0x00000020, 0x00000000, 
0x04000600, 0x0094C48A, 0x02400000, 0x00208900, 0x00000002, 0x00000000, 0xB7CC8CBC, 0x00000030, 
0xA8C88CC4, 0x1141C8CC, 0xC8ACCCCC, 0x22848C44, 0x35A6AAAA, 0x51CACC9A, 0x00000000, 0x14000000, 
0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 
0x0000CC00, 0x512166B2, 0xC8CCAC26, 0xCCCC7B03, 0x001095C9, 0xC8480000, 0x00000040, 0x006297CC, 
0x03000000, 0x03109589, 0xCCCCBC8A, 0x02000606, 0xA6000040, 0x70888080, 0x00007090, 0x00000000, 
0x00000600, 0x00900008, 0x00000000, 0x00060000, 0x68CAC8BC, 0xC889CCCC, 0xCCCCCCC8, 0x2086CACC, 
0xCBCCCCAC, 0xAAAAAAAA, 0x002096CB, 0x13000000, 0x13116378, 0xCCACBB7A, 0x02000635, 0x02000020, 
0x00000020, 0x00220000, 0x00000000, 0x00000000, 0x00000000, 0x800C0000, 0x00442000, 0xABCCBCC9, 
0x9999BBAC, 0xCB9825C0, 0xCCCCBBAB, 0xCAAC9999, 0x99999999, 0x42B8CCCC, 0x00000020, 0x00000000, 
0x25521200, 0x00800646, 0x80000040, 0x0080C200, 0x0C009000, 0x00000094, 0x00000000, 0x00000000, 
0x00000000, 0x00600000, 0x9C9999C9, 0xCC9C99CC, 0x010000C0, 0xCCCCCC59, 0xCBABAAAA, 0xAAAAAAAA, 
0xAACCCCCC, 0x00004195, 0x00000000, 0x79472125, 0x02000701, 0x0228C64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0x9C9B99B9, 0x9C99B9CC, 0x993933C3, 
0x9C99C9CC, 0xC89C45C4, 0x44444444, 0x9999B9CC, 0x9B999999, 0x999999B9, 0x9B999999, 0x00800816, 
0x00000040, 0x00000000, 0xC0800800, 0x2C000002, 0x02000000, 0x00000000, 0x00000000, 0x00000000, 
0xCCBCBBBB, 0xBBBBBBBB, 0x9C9B99C9, 0x9999CC9C, 0xCBCCCCC8, 0x95353373, 0xBBCCCCCC, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBCBBBBBB, 0x00000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20A00000, 0x0000CC00, 0x512166B2, 0xC8CCAC26, 0xCCCC7B03, 0x001095C9, 0xC8480000, 
0x00000040, 0x006297CC, 0x03000000, 0x03109589, 0xCCCCBC8A, 0x02000842, 0xC2000040, 0x24C20C04, 
0x00000008, 0x00000000, 0x000000AC, 0x0022008A, 0x00000022, 0x00400000, 0xAC9999B9, 0x9999CCCC, 
0x999999C9, 0xAACCCC9C, 0xC8CCCC0C, 0x20000042, 0x00000020, 0x68342300, 0xCCCCCCAA, 0x84BACCCC, 
0x12000915, 0x00000060, 0x00000000, 0xA0AC0400, 0x04000000, 0xC0000000, 0x00000000, 0x00000000, 
0x00000000, 0x583603B0, 0xCCCCCCCC, 0xCC6A24C0, 0x51A9CBCC, 0x2054C90C, 0x00000000, 0x97CCCCCC, 
0x00002143, 0x00000010, 0xAC680000, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x512166B2, 0xC8CCAC26, 0xCCCC7B03, 0x001095C9, 
0xC8480000, 0x00000040, 0x006297CC, 0x03000000, 0x03109589, 0xCCCCBC8A, 0x1200050F, 0x00000060, 
0xCC040000, 0x00000070, 0x00000000, 0x00000000, 0x00800086, 0x00000000, 0x00000000, 0xBC9A99B9, 
0x7384CCCC, 0xCCCC8CC4, 0x3097CCCC, 0xC8B8CC0C, 0x00100040, 0x010064CC, 0x49020000, 0xA7CCCCCC, 
0xCCAC6844, 0x00000925, 0x00000080, 0x00000000, 0x0CAC0600, 0x000060A6, 0x00AC0000, 0x00008400, 
0x00000066, 0x00000000, 0xCCCCBAB7, 0x5167AACB, 0xCCA92600, 0x4587CACC, 0xC8CCCC0C, 0x00000040, 
0x63C8CCBC, 0x00000021, 0x00000000, 0x27000000, 0x00000703, 0x00C06C60, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xBC8715B0, 0xCCCCCCCC, 0xCC9A67C4, 
0x30B7CCCC, 0xC8480000, 0x00000040, 0x4C140062, 0xCCBC5986, 0xCCCCCCCC, 0x6687AACB, 0x02000F3B, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 
0x512166B2, 0xC8CCAC26, 0xCCCC7B03, 0x001095C9, 0xC8480000, 0x00000040, 0x006297CC, 0x03000000, 
0x03109589, 0xCCCCBC8A, 0x1200050B, 0xC2000060, 0x00C00C24, 0x00000004, 0x00000000, 0x00000000, 
0x000000CC, 0x00000000, 0x00000000, 0x8C6402B0, 0xBBBACCCC, 0x26000000, 0xCCCCCCAC, 0xC8CCCC0C, 
0x10000162, 0x00000062, 0x36000000, 0xCCABAA89, 0xA9AACCCC, 0x12000943, 0x00000040, 0x00000000, 
0x0CC40A00, 0x000200C6, 0x02000000, 0x00006200, 0x00000000, 0x00000000, 0xACAAAACA, 0xCACCCCCC, 
0x260000C0, 0x73ABCCAC, 0xC9CCCC9C, 0x02229999, 0xCCCCCCCC, 0x00002094, 0x44443412, 0xAC684444, 
0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00220000, 0xAA9A99C9, 0xCBBBCCBB, 0x990900C0, 0x99A9CC9C, 0xC848A606, 0x00007343, 0x9999CCCC, 
0x99999999, 0x99999999, 0xCCBB9A99, 0x08000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x512166B2, 0xC8CCAC26, 0xCCCC7B03, 0x001095C9, 
0xC8480000, 0x00000040, 0x006297CC, 0x03000000, 0x03109589, 0xCCCCBC8A, 0x12000509, 0xAC000060, 
0x00A00A6C, 0x00000000, 0x00000000, 0x0000AA00, 0x00202046, 0x00000020, 0x00A00000, 0xA99999B9, 
0xA999C9CC, 0x9B9999C9, 0x9999C9CC, 0x85542102, 0x7B84CC9C, 0x00001084, 0x00000000, 0x26000000, 
0xA9CCCC8C, 0x1200091C, 0x00000060, 0x00000000, 0x00000000, 0x00C24A00, 0x08000000, 0x00808A00, 
0x00000000, 0x00000000, 0xCACCAAB9, 0x79AA86CC, 0xCCCC48C0, 0x4875CBCC, 0xC8A9860B, 0x6784CC78, 
0xA9CABBA9, 0x95CACCBC, 0x00000042, 0x98264214, 0x0000072D, 0x26000000, 0x00000060, 0x00000000, 
0x66000000, 0x00000000, 0x000A0000, 0x00000000, 0x000A0000, 0xCCCC9CB5, 0x9545C8BC, 0x59848CC4, 
0x40C8CCCC, 0xCC48760B, 0x951573CB, 0x30480151, 0x00000000, 0x97140000, 0xCA9C7779, 0x0C00070A, 
0xAC000060, 0x0020C060, 0x0840C600, 0x00040080, 0x4000000A, 0x00000000, 0x00000000, 0x00400000, 
0xCCBBA9C9, 0xCCAA9CCB, 0x020000C0, 0xCBCC9C65, 0xC999999A, 0x0000999A, 0xAACCCCCC, 0x00001075, 
0x14420200, 0xAA382186, 0x02000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00220000, 0x9C9999B9, 0xACCC99CC, 0x990900C0, 0x9999CCAC, 0xC8A86A02, 
0x00000040, 0x9999A9CB, 0x9A999999, 0x9999BACC, 0xCC999999, 0x00FF0D04, 0x07070909, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x42404240, 0x00000000, 
0x00000000, 0x00000000, 0x7D7D7D7D, 0x00000000, 0x00000000, 0x00000000, 0xCECECECE, 0x00000000, 
0x00000000, 0x00000000, 0x0080010B, 0xC2000060, 0x20C20C2A, 0x00000008, 0x00000000, 0x00000045, 
0x00460068, 0x00000064, 0x00A00000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x10000F2A, 0x00000060, 0x00000000, 
0x00260A00, 0x0066808A, 0x88880000, 0x00A6CA00, 0x00000066, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0x1000010E, 0x00000060, 0xC2040000, 0x0000004C, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x12000917, 0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 
0x00A00000, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x00800712, 0x82000040, 
0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0x12000704, 0x00C04C60, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xCC8804B0, 0x0084CCCC, 0xCCCC6A02, 0x000040B7, 0xC8480000, 0x00000040, 
0x5196CBCC, 0x00000000, 0x00000000, 0x8C765536, 0x1200090B, 0x88000060, 0x00400C0B, 0x00000009, 
0x00000000, 0x00000220, 0x00000000, 0x00000060, 0x00600000, 0x000030B6, 0xCC984800, 0xCCCCCC08, 
0x000051C9, 0xCCCCCC0C, 0x0084CCCC, 0x00000062, 0x02000000, 0xCC8B5567, 0x9798CACB, 0x12000B18, 
0x00000020, 0x00000000, 0x04000800, 0x000CA8C4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x999999C9, 0xC9CCCCCC, 0x7A2396C5, 0x0084CCCC, 0xC9A99999, 0x00009999, 0xB7CCBCC6, 0x45010020, 
0x00004175, 0x01000000, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00220000, 0xCCCC9CB9, 0x99B9CCBC, 0x993900C0, 0x99CACCCC, 0xC8480000, 
0x00000040, 0x99999999, 0xCCCB9B99, 0xBB99A9CC, 0x999999BA, 0x00800F1F, 0x00000020, 0x20000000, 
0xA0000800, 0xAC00800A, 0x44000000, 0x00004400, 0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0x12000111, 0x42000060, 0xC64A0A00, 0x0000000C, 0x00000000, 0x000000A8, 0x00000020, 0x00000008, 
0x00000000, 0x999999B9, 0xC9CCCCAA, 0xCCAB99C9, 0x9999CCCC, 0x3384CCCC, 0x43C84833, 0x00000000, 
0x9C140000, 0x87CBCCCC, 0x00002066, 0x0000072D, 0x82000060, 0x40840000, 0x00002A80, 0x00000006, 
0x02000600, 0x80AC8628, 0x00000200, 0x00040000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x12000917, 0x00000040, 
0x00000000, 0x0CC60A00, 0x000000A6, 0x00A00000, 0x00000000, 0x00000000, 0x00000000, 0x4096CCBC, 
0x00000000, 0xCCCCCC08, 0x000073CB, 0xCCCBC8CC, 0x44444484, 0x46128359, 0x9C690220, 0x76B8CCCC, 
0x01206366, 0x00800712, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 
0x00000000, 0x00060000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x12000704, 0x00C04C60, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCC8804B0, 0x0084CCCC, 0xCCCC6A02, 
0x000040B7, 0xC8480000, 0x00000040, 0x5196CBCC, 0x00000000, 0x00000000, 0x8C765536, 0x1200090B, 
0x88000060, 0x00400C0B, 0x00000009, 0x00000000, 0x00000220, 0x00000000, 0x00000060, 0x00600000, 
0x000030B6, 0xCC984800, 0xCCCCCC08, 0x000051C9, 0xCCCCCC0C, 0x0084CCCC, 0x00000062, 0x02000000, 
0xCC8B5567, 0x9798CACB, 0x12000B18, 0x00000020, 0x00000000, 0x04000800, 0x000CA8C4, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x999999C9, 0xC9CCCCCC, 0x7A2396C5, 0x0084CCCC, 0xC9A99999, 
0x00009999, 0xB7CCBCC6, 0x45010020, 0x00004175, 0x01000000, 0x01000701, 0x0228C64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCCCC9CB9, 0x99B9CCBC, 
0x993900C0, 0x99CACCCC, 0xC8480000, 0x00000040, 0x99999999, 0xCCCB9B99, 0xBB99A9CC, 0x999999BA, 
0x0080010B, 0xC2000060, 0x20C20C2A, 0x00000008, 0x00000000, 0x00000045, 0x00460068, 0x00000064, 
0x00A00000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x10000F2A, 0x00000060, 0x00000000, 0x00260A00, 0x0066808A, 
0x88880000, 0x00A6CA00, 0x00000066, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x1000010E, 0x00000060, 
0xC2040000, 0x0000004C, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0x12000917, 0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 0x00A00000, 0x00000000, 
0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x00800712, 0x82000040, 0x00888000, 0x0000C0A0, 
0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBCB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x12000B3E, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 
0xCCBC8BC4, 0x37A7C9CC, 0xCCCC8CC4, 0x000073CB, 0xC8480000, 0x00000040, 0xCACCACC4, 0x74876688, 
0x20552531, 0x00000012, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00220000, 0xCCCC9CB9, 0x99B9CCBC, 0x993900C0, 0x99CACCCC, 0xC8480000, 
0x00000040, 0x99999999, 0xCCCB9B99, 0xBB99A9CC, 0x999999BA, 0x00800F1F, 0x00000020, 0x20000000, 
0xA0000800, 0xAC00800A, 0x44000000, 0x00004400, 0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0x12000111, 0x42000060, 0xC64A0A00, 0x0000000C, 0x00000000, 0x000000A8, 0x00000020, 0x00000008, 
0x00000000, 0x999999B9, 0xC9CCCCAA, 0xCBAB99C9, 0x9999CCBC, 0x3384CCCC, 0x43C84833, 0x00000000, 
0x9C140000, 0x87CBCCCC, 0x00002066, 0x0000072D, 0x82000060, 0x40840000, 0x00002A80, 0x00000006, 
0x02000600, 0x80AC8628, 0x00000200, 0x00040000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x12000917, 0x00000040, 
0x00000000, 0x0CC60A00, 0x000000A6, 0x00A00000, 0x00000000, 0x00000000, 0x00000000, 0x4096CCBC, 
0x00000000, 0x9C2500C0, 0x0052C8CC, 0xC9CCCC9C, 0x11129999, 0xCCCCCCBC, 0x004286AA, 0x00000000, 
0x46220000, 0x00800712, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 
0x00000000, 0x00060000, 0xACB9C9BA, 0xAB99CCAC, 0x004084C4, 0xB9CCBC37, 0xC9999999, 0x00009999, 
0xAABACCCB, 0x00729AB9, 0x00000000, 0x9A140000, 0x12000B3E, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0xCCBC8BC4, 0x37A7C9CC, 0xCCCC8CC4, 
0x000073CB, 0xC8480000, 0x00000040, 0xCACCACC4, 0x74876688, 0x20552531, 0x00000012, 0x01000701, 
0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 
0xCCCC9CB9, 0x99B9CCBC, 0x993900C0, 0x99CACCCC, 0xC8480000, 0x00000040, 0x99999999, 0xCCCB9B99, 
0xBB99A9CC, 0x999999BA, 0x00FF2C07, 0x07090909, 0x00070707, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xC0C0C0C0, 0x00CFC0C0, 0x00000000, 0x00000000, 0x35353535, 
0x00353535, 0x00000000, 0x00000000, 0xAEAEAEAE, 0x00CEAEAE, 0x00000000, 0x00000000, 0x0080051F, 
0x00000020, 0x20000000, 0xA0000800, 0xAC00800A, 0x44000000, 0x00004400, 0x00000000, 0x00000000, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0x12000511, 0x42000060, 0xC64A0A02, 0x0000000C, 0x00000000, 0x000000C8, 
0x00000045, 0x00000008, 0x00000000, 0x999999B9, 0xC9CCCCCC, 0xAC9999C9, 0x9999CCCC, 0x6284CA0C, 
0x40C84800, 0x00000000, 0x9C140000, 0x87CBCCCC, 0x00002066, 0x0000072D, 0x00000060, 0x00000000, 
0x00000000, 0x00000002, 0x02000000, 0x80060000, 0x00000200, 0x00040000, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0x12000917, 0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 0x00A00000, 0x00000000, 0x00000000, 
0x00000000, 0x40C8CCBC, 0x00000000, 0xCCCCCC08, 0x000073CB, 0xC8A82600, 0x00000040, 0x46128359, 
0x9C690220, 0x76B8CCCC, 0x01206366, 0x00800712, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 
0x00002400, 0x00000000, 0x00000000, 0x00060000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x12000704, 0x00C04C61, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCC8804B0, 
0x0084CCCC, 0xCCCC6A02, 0x000040B7, 0xC8480000, 0x00000040, 0x5196CBCC, 0x00000000, 0x00000000, 
0x8C765536, 0x1200090B, 0x88000060, 0x00400C0B, 0x00000009, 0x00000000, 0x00000220, 0x00000000, 
0x00000060, 0x00600000, 0x000030B6, 0xCC984800, 0xCCCCCC08, 0x000051C9, 0xCCCCCC0C, 0x0084CCCC, 
0x00000062, 0x02000000, 0xCC8B5567, 0x9798CACB, 0x12000B18, 0x00000020, 0x00000000, 0x04000800, 
0x000CA8C4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x999999C9, 0xC9CCCCCC, 0x7A2396C5, 
0x0084CCCC, 0xC9A99999, 0x00009999, 0xB7CCBCC6, 0x45010020, 0x00004175, 0x01000000, 0x01000701, 
0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 
0xCCCC9CB9, 0x99B9CCBC, 0x993900C0, 0x99CACCCC, 0xC8480000, 0x00000040, 0x99999999, 0xCCCC9B99, 
0xCCCCCCCC, 0xBACCCCCC, 0x0000050B, 0xC2000060, 0x20C20C2A, 0x00000008, 0x00000000, 0x00000045, 
0x00460068, 0x00000064, 0x00A00000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x1000052A, 0x00000060, 0x00000000, 
0x00260A00, 0x0066208A, 0x88880000, 0x00A6CA00, 0x00000066, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0x0600050E, 0x00000060, 0xC2040000, 0x0000004C, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x12000917, 0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 
0x00A00000, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x00800712, 0x82000040, 
0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0x12000704, 0x00C04C61, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xCC8804B0, 0x0084CCCC, 0xCCCC6A02, 0x000040B7, 0xC8480000, 0x00000040, 
0x5196CBCC, 0x00000000, 0x00000000, 0x8C765536, 0x1200090B, 0x88000060, 0x00400C0B, 0x00000009, 
0x00000000, 0x00000220, 0x00000000, 0x00000060, 0x00600000, 0x000030B6, 0xCC984800, 0xCCCCCC08, 
0x000051C9, 0xCCCCCC0C, 0x0084CCCC, 0x00000062, 0x02000000, 0xCC8B5567, 0x9798CACB, 0x12000B18, 
0x00000020, 0x00000000, 0x04000800, 0x000CA8C4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x999999C9, 0xC9CCCCCC, 0x7A2396C5, 0x0084CCCC, 0xC9A99999, 0x00009999, 0xB7CCBCC6, 0x45010020, 
0x00004175, 0x01000000, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00220000, 0xCCCC9CB9, 0x99B9CCBC, 0x993900C0, 0x99CACCCC, 0xC8480000, 
0x00000040, 0x99999999, 0xCCCC9B99, 0xCCCCCCCC, 0xBACCCCCC, 0x0000050B, 0xC2000060, 0x20C20C2A, 
0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00A00000, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0x1200051A, 0x00000060, 0x00000000, 0x00000800, 0x4204C406, 0x00000000, 0x00008200, 0x00000000, 
0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x0C00050E, 0x00000060, 0xC2040000, 0x0000004C, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x12000917, 0x00000040, 
0x00000000, 0x0CC60A00, 0x000000A6, 0x00A00000, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0x00800712, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 
0x00000000, 0x00060000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x12000704, 0x00C04C61, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCC8804B0, 0x0084CCCC, 0xCCCC6A02, 
0x000040B7, 0xC8480000, 0x00000040, 0x5196CBCC, 0x00000000, 0x00000000, 0x8C765536, 0x1200090B, 
0x88000060, 0x00400C0B, 0x00000009, 0x00000000, 0x00000220, 0x00000000, 0x00000060, 0x00600000, 
0x000030B6, 0xCC984800, 0xCCCCCC08, 0x000051C9, 0xCCCCCC0C, 0x0084CCCC, 0x00000062, 0x02000000, 
0xCC8B5567, 0x9798CACB, 0x12000B18, 0x00000020, 0x00000000, 0x04000800, 0x000CA8C4, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x999999C9, 0xC9CCCCCC, 0x7A2396C5, 0x0084CCCC, 0xC9A99999, 
0x00009999, 0xB7CCBCC6, 0x45010020, 0x00004175, 0x01000000, 0x01000701, 0x0228C64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCCCC9CB9, 0x99B9CCBC, 
0x993900C0, 0x99CACCCC, 0xC8480000, 0x00000040, 0x99999999, 0xCCCC9B99, 0xCCCCCCCC, 0xBACCCCCC, 
0x0080051F, 0x00000020, 0x20000000, 0xA0000800, 0xAC00800A, 0x44000000, 0x00004400, 0x00000000, 
0x00000000, 0x999A99B9, 0xBC9BBCBC, 0x999999C9, 0xCCCC9A99, 0xA6C8CC0C, 0x00515921, 0xCBBAAC15, 
0x0030B8CC, 0x00000000, 0x00000000, 0x12000511, 0x42000060, 0xC64A0A02, 0x0000000C, 0x00000000, 
0x000000C8, 0x00000045, 0x00000008, 0x00000000, 0x9A9999B9, 0xC9CCCCCC, 0xAC9999C9, 0x9999CACC, 
0xC858C90C, 0x00740340, 0x00000000, 0x9C140000, 0x87CBCCCC, 0x00002066, 0x0000072D, 0x00000060, 
0x00000000, 0x00000000, 0x00000002, 0x02000000, 0x80060000, 0x00000200, 0x00040000, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0x12000917, 0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 0x00A00000, 0x00000000, 
0x00000000, 0x00000000, 0xCCAC99B9, 0x9999B9CC, 0x6A020000, 0x0084CCCC, 0xC99AC999, 0x00009999, 
0xA5BBCBAC, 0x46250010, 0x899AAA89, 0x46647865, 0x00800712, 0x82000040, 0x00888000, 0x0000C0A0, 
0x00000000, 0x00002400, 0x00000000, 0x00000000, 0x00060000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBCB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x12000B3E, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 
0xCCBC8BC4, 0x37A7C9CC, 0xCCCC8CC4, 0x000073CB, 0xC8480000, 0x00000040, 0xCACCACC4, 0xCACC9A88, 
0x20556588, 0x00000012, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00220000, 0xCCCC99B9, 0x9999C9CC, 0x990900C0, 0x9999CCCC, 0xC8480000, 
0x00000040, 0x99999999, 0x99999999, 0xCCCCCC9A, 0xBABCCCCC, 0x0000050B, 0xC2000060, 0x20C20C2A, 
0x00000008, 0x00000000, 0x00000045, 0x00460068, 0x00000064, 0x00A00000, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0x1000052A, 0x00000060, 0x00000000, 0x00260A00, 0x0066208A, 0x88880000, 0x00A6CA00, 0x00000066, 
0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x0600050E, 0x00000060, 0xC2040000, 0x0000004C, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x12000917, 0x00000040, 
0x00000000, 0x0CC60A00, 0x000000A6, 0x00A00000, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0x00800712, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 
0x00000000, 0x00060000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x12000B3E, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0xCCBC8BC4, 0x37A7C9CC, 0xCCCC8CC4, 
0x000073CB, 0xC8480000, 0x00000040, 0xCACCACC4, 0xCACC9A88, 0x20556588, 0x00000012, 0x01000701, 
0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 
0xCCCC9CB9, 0x99B9CCBC, 0x993900C0, 0x99CACCCC, 0xC8480000, 0x00000040, 0x99999999, 0xCCCC9B99, 
0xCCCCCCCC, 0xBACCCCCC, 0x0000050B, 0xC2000060, 0x20C20C2A, 0x00000008, 0x00000000, 0x00000044, 
0x00460068, 0x00000064, 0x00A00000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x1200051A, 0x00000060, 0x00000000, 
0x00000800, 0x4204C406, 0x00000000, 0x00008200, 0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0x0C00050E, 0x00000060, 0xC2040000, 0x0000004C, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x12000917, 0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 
0x00A00000, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x00800712, 0x82000040, 
0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0x12000B3E, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xC0000000, 0xCCBC8BC4, 0x37A7C9CC, 0xCCCC8CC4, 0x000073CB, 0xC8480000, 0x00000040, 
0xCACCACC4, 0xCACC9A88, 0x20556588, 0x00000012, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCCCC9CB9, 0x99B9CCBC, 0x993900C0, 
0x99CACCCC, 0xC8480000, 0x00000040, 0x99999999, 0xCCCC9B99, 0xCCCCCCCC, 0xBACCCCCC, 0x12000521, 
0x20000080, 0xC2504200, 0x0000200C, 0x00000000, 0x000000CC, 0x00000084, 0x00000022, 0x00200000, 
0x999999B9, 0xCCAC9A99, 0xCC9C99C9, 0x9999C9CC, 0xC8CCCC0C, 0x73CB8888, 0x00000000, 0x68020000, 
0xB8CCCCBC, 0x00207487, 0x00000732, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00020000, 0x0000C020, 0x00000000, 0xCCCC48B0, 0x00000084, 0xCC590100, 0x000040C8, 0xCC9999C9, 
0x99C99999, 0x00000000, 0x00000000, 0x77030000, 0x72CBCC8C, 0x00000730, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000080, 0x00400000, 0xBCCC8CB9, 0x737B84CC, 
0xCC480000, 0xA646C8CC, 0xCC9A1500, 0x0040C8CB, 0x00000000, 0x15000000, 0xB8CCCCAC, 0x00002076, 
0x12000D41, 0x00000080, 0x00000000, 0x00000000, 0x000CCC42, 0x02000000, 0x00002200, 0x00000000, 
0x00000000, 0xBCCC9BC9, 0x99999ACC, 0xCCBB37C0, 0x000073CB, 0xC9999999, 0xCC88CCCC, 0xA9A969C5, 
0xC9CCCCBC, 0x00000072, 0x00000000, 0x00000946, 0x8A000040, 0x00600060, 0x00000000, 0x00000000, 
0x00000000, 0x00060000, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 
0xCBBBBBBB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x00800946, 0x00000040, 
0x0080C020, 0x0A00C000, 0x000000A4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCACCCCCC, 
0x9999CCAA, 0x140000C0, 0x20A6CC8C, 0xC99999C9, 0x55559999, 0xC9CCCCCA, 0x43022096, 0x20250000, 
0x14000000, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00220000, 0x9ACCCCB9, 0x999999B9, 0x990900C0, 0x9999B9CC, 0xC85855C5, 0x55555555, 
0xCACCCCAC, 0xBBAB99A9, 0xA9BBBBBB, 0x99999999, 0x00FF080A, 0x09090A0B, 0x0B0B0A0A, 0x0000080B, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x46464047, 0x42424440, 0x00004042, 
0x00000000, 0xBDBDBDBD, 0xBDBDBDBD, 0x0000BDBD, 0x00000000, 0xAEAE8EAE, 0x8E8E8E8E, 0x00008E8E, 
0x00000000, 0x0300013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20C00000, 0x0000CA00, 0x999999B9, 0xCCCCAC99, 0xCCCC4800, 0x000040C8, 0xC8480000, 0x00000040, 
0x000041C9, 0x00000000, 0x38000000, 0xCCCCCC9B, 0x0080010B, 0xC2000060, 0x22C20C2A, 0x00000008, 
0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00A00000, 0xCCCCCCCC, 0x99999ACB, 0x999999C9, 
0x99CBCC99, 0xCCCCCC0C, 0x000090BA, 0x00002096, 0x39000000, 0xCCCCCCBB, 0x99ABCCCC, 0x0A000F31, 
0x40000060, 0x00400000, 0x60460000, 0x00000000, 0x00800080, 0x0000B002, 0x000000AC, 0x00400000, 
0xCCABCABB, 0xBC9CCBCC, 0x999999C9, 0xCCCCCBAA, 0xC8CCCB0C, 0x37000340, 0x9999CBAC, 0xCC8987A8, 
0x00002086, 0x14000000, 0x04000F0E, 0x00000060, 0xC80A0000, 0x000000AC, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x222222B2, 0xCC8C3437, 0xCCCCCCC8, 0x22222284, 0x1195C8CC, 
0x11111111, 0x22222222, 0x24222222, 0x87CBCC9C, 0x22222232, 0x0000012D, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x000A0000, 0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0x00000514, 0x00000060, 0x00000000, 0x44C20400, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xB9CAAC8A, 0x74885742, 0xCCCC7BC3, 0x0063C8CB, 0xC6CCCC0C, 0x00000031, 0xA5CCCCAC, 
0x35230010, 0x54676586, 0x14000052, 0x0C000530, 0x80000060, 0x44820000, 0x00000000, 0x00000000, 
0x00400044, 0x08008228, 0x000000CA, 0x00400000, 0x594800B0, 0xCCBCB888, 0xCC9C5901, 0x0084CCCC, 
0x48A6B90C, 0x00000040, 0x00001013, 0xCC5A2313, 0x72C9CCCC, 0x00000000, 0x0000082D, 0x00000060, 
0x00000000, 0x00000000, 0x00000000, 0x06000000, 0x006A0000, 0x00000000, 0x00000000, 0xBBCCCC9C, 
0x000040C8, 0x62CACCC8, 0x00000000, 0xC8CCCC58, 0x55555565, 0x006255B7, 0x00000000, 0x5A010000, 
0xCCCCCCCC, 0x0E000917, 0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 0x00A00000, 0x00000000, 
0x00000000, 0x00000000, 0xAC9B99C9, 0xA9A9C9CC, 0x7A0300C0, 0x3784CCCC, 0xC99ACC9C, 0x00009999, 
0x93CBCBCC, 0x00000000, 0x00000000, 0x27000000, 0x00000912, 0x82000040, 0x00888000, 0x0000C0A0, 
0x00000000, 0x00004400, 0x00000040, 0x00000002, 0x00060000, 0xBC9999C9, 0xC999CBCC, 0xBCCC68C6, 
0xBACCCC9C, 0xCACCCC9C, 0x88889999, 0x88A889C8, 0x88888888, 0xCCCC9C88, 0x888888C9, 0x01000701, 
0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 
0x999A99B9, 0xA9C9CAAC, 0x990900C0, 0x9999CCBC, 0xC8480000, 0x00000040, 0x9999B9CC, 0x99999999, 
0x99999999, 0xCC9A9999, 0x0300013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 0xCCCCAC99, 0xCCCC4800, 0x000040C8, 0xC8480000, 
0x00000040, 0x000041C9, 0x00000000, 0x38000000, 0xCCCCCC9B, 0x0E000F3A, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0x480000B0, 0x0053C9CC, 
0xCC590100, 0x000084CC, 0xC8480000, 0x00000040, 0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 
0x0E000F3A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 
0x0000C000, 0xCCBC48B0, 0x00003095, 0xCCBC3700, 0x004096CC, 0xC8480000, 0x00000040, 0x0141CACC, 
0x38000020, 0x00005398, 0x9C460000, 0x1200010B, 0xC0000060, 0x00C00C04, 0x00000002, 0x00000000, 
0x00000000, 0x00000002, 0x00000000, 0x00400000, 0x999999B9, 0x99A9CAAC, 0x999999C9, 0x9999C9CC, 
0xCCCCCC0C, 0x00003087, 0x00000000, 0x00000000, 0xCC8C0300, 0x0064A8CC, 0x0000092D, 0x82000060, 
0x40840000, 0x00002A80, 0x00000006, 0x02000600, 0x80AC8628, 0x00000000, 0x00040000, 0x40C8CCBC, 
0x00000000, 0xCACC8C04, 0x00000060, 0xCCCCCC08, 0x000097BA, 0xCACCCCCC, 0x00000086, 0x00000000, 
0xCCAC9B38, 0x10000946, 0x88000040, 0x0080C62C, 0xCC808600, 0x06000064, 0x00000000, 0x00000000, 
0x200A0000, 0x00662000, 0xCCCC9CC9, 0x9999CBCC, 0x470200C0, 0x42C8CCBC, 0xC9CC9999, 0x00009999, 
0xCCCCCCCC, 0x312264A8, 0x24000000, 0xCCCCAC68, 0x00800912, 0x82000040, 0x00888000, 0x0000C0A0, 
0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0xCCABCCC9, 0xCC9CCCCC, 0x000000C0, 
0xCCCC4800, 0xC9999999, 0x00009999, 0xCBCCBCCC, 0x11114198, 0x47111111, 0x879A4842, 0x00000702, 
0x0000C64C, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00040000, 0x00000000, 
0xCCAB9AC9, 0xA9CCCCCC, 0xB88B04C0, 0x73C8CCCC, 0xC9999999, 0x00009999, 0xCACCCCCC, 0x00004086, 
0x13000000, 0xCCAC6847, 0x0000013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 0xCCCCAC99, 0xCCCC4800, 0x000040C8, 0xC8480000, 
0x00000040, 0x000041C9, 0x00000000, 0x38000000, 0xCCCCCC9B, 0x03000701, 0x0228C64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCCCC9AB9, 0x9999CCCC, 
0x990900C0, 0x9999CC9C, 0xC8480000, 0x00000040, 0x99A9CCCC, 0x99999999, 0xCC9B9999, 0xAB99CACC, 
0x0080031F, 0x00000020, 0x00000000, 0xC0800800, 0x8C00800A, 0x02000000, 0x00004400, 0x00000000, 
0x00000000, 0xCCCCBCC9, 0xCABCBBBB, 0x999999C9, 0x99CBCC99, 0xC6CCCC0C, 0x97004633, 0xCCCCCCBC, 
0x6597CCCC, 0x00000052, 0x68020000, 0x0300013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 0xCCCCAC99, 0xCCCC4800, 0x000040C8, 
0xC8480000, 0x00000040, 0x000041C9, 0x00000000, 0x38000000, 0xCCCCCC9B, 0x12000111, 0x42000060, 
0xC64A0A00, 0x0000000C, 0x00000000, 0x000000A8, 0x00000020, 0x00000008, 0x00000000, 0xB99999B9, 
0x99ABCCCC, 0x99999AC9, 0x9999CCCC, 0xC9CCCB0C, 0x590140A8, 0x03000000, 0x68020062, 0xCC9BB9BB, 
0x625553C9, 0x0000012D, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000A0000, 
0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x00000530, 0x80000060, 0x00800000, 0x00000000, 
0x00000000, 0x00400040, 0x08008228, 0x000000CA, 0x00400000, 0xCBBCAA88, 0xCCBCBA8A, 0xCBCBBBCB, 
0xBBBBBBBB, 0xB5AACB0C, 0x46400021, 0x00000000, 0x78030000, 0xCACCCCBC, 0x00000072, 0x0C00072F, 
0x00000040, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0C000000, 0x00000060, 0x00000000, 
0xBCCCCCAC, 0x000020B8, 0xC8CC8CC8, 0x88888888, 0xCCCCCCCC, 0xCCCCCCCC, 0x888888C8, 0x88888888, 
0xCCCCCC89, 0x888899BB, 0x10000917, 0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 0x00A00000, 
0x00000000, 0x00000000, 0x00000000, 0xCCBC99CB, 0x99AACCAC, 0xCC9C15C0, 0x8C64BACC, 0xC99999CA, 
0x31379999, 0x774446C6, 0xCCCC7986, 0x304842B9, 0x67370000, 0x00800912, 0x82000040, 0x00888000, 
0x0800C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0xCCABCCC9, 0xCC9CCCCC, 
0x333333C3, 0xCCCC6A33, 0xC9999999, 0x33339999, 0xC9CCCCCC, 0x22113187, 0x67461111, 0xCC6A7655, 
0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00220000, 0xCCCC9AB9, 0xCCCCCCCC, 0xBA3900C0, 0xA9CBCCCC, 0xC8480000, 0x00000040, 0x99B9CCCC, 
0x99999999, 0xCC9B9999, 0xAB99CACC, 0x0080031F, 0x00000020, 0x00000000, 0xC0800800, 0x8C00800A, 
0x02000000, 0x00004400, 0x00000000, 0x00000000, 0xCBCACCB9, 0xC99C999C, 0x999999C9, 0x99CCCCCC, 
0xC8CCCC0C, 0x48000040, 0xBC67A79B, 0x0041B6CC, 0x00000000, 0x56020000, 0x0300013B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 
0xCCCCAC99, 0xCCCC4800, 0x000040C8, 0xC8480000, 0x00000040, 0x000041C9, 0x00000000, 0x38000000, 
0xCCCCCC9B, 0x0A000111, 0x42000060, 0xC64A0A00, 0x0000000C, 0x00000000, 0x000000A8, 0x00000020, 
0x00000008, 0x00000000, 0x9C9999B9, 0xC9CCCCCC, 0xCA9B99C9, 0x9999CCCC, 0x95CCCB0C, 0x30001010, 
0x00000000, 0x35440120, 0xCCCCCCAC, 0x000051A7, 0x0000012D, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x000A0000, 0x00000000, 0x00000000, 0x8CC8CCBC, 0x333343C8, 0x8CCCCC08, 
0x0030B787, 0xC8CBCC08, 0x0000737B, 0x111184B9, 0x11111111, 0x77481111, 0xCACCAA98, 0x00000514, 
0x00000060, 0x00000000, 0x44C20400, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xCACCCCBB, 0xA6263284, 0xCCCC6802, 0x3037A6CC, 0xC8CCCC0C, 0xCAAC0040, 0x75CBCCAC, 0x75AA7787, 
0xCC8A4622, 0x884664C8, 0x06000530, 0x80000060, 0x44820000, 0x00000000, 0x00000000, 0x00400044, 
0x08008268, 0x000000CA, 0x00400000, 0xC88C04B0, 0xCCCC78CB, 0xCCACBA07, 0x0040C8CC, 0xB797C80C, 
0x00000030, 0x00000000, 0xBC270000, 0x9ACBCBBC, 0x00004185, 0x0A000917, 0x00000040, 0x00000000, 
0x0CC60A00, 0x000000A6, 0x00A00000, 0x00000000, 0x00000000, 0x00000000, 0xCCA99CC9, 0x9999CBCC, 
0x9C5504C0, 0x2396CCBC, 0xCACC9B99, 0x00009999, 0x94CBCCCC, 0x76685522, 0x00000020, 0x25000000, 
0x00800712, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 
0x00060000, 0xC99B99C9, 0xC9BC9CC9, 0x37847BC3, 0x628ACCBC, 0xC9999999, 0x00009999, 0xAA8B67C7, 
0x7A974565, 0x877A23A5, 0xBC8B78A8, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00220000, 0x999999B9, 0x9CB9CC9C, 0x990900C0, 0x99B9CCCC, 
0xC8480000, 0x00000040, 0x99B9CCCC, 0x99999999, 0x99999999, 0xBCBB9A99, 0x0080031F, 0x00000020, 
0x00000000, 0xA0000000, 0x6A004004, 0x02000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCBCCCC, 
0xBBBBBBBB, 0xAAAAAACA, 0xAAAAAAAA, 0xCCBBBBBB, 0xBBBBBBBB, 0xAAAACCAA, 0xAAAAAAAA, 0xAAAAAACA, 
0xAAAAAAAA, 0x0300013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20C00000, 0x0000CA00, 0x999999B9, 0xCCCCAC99, 0xCCCC4800, 0x000040C8, 0xC8480000, 0x00000040, 
0x000041C9, 0x00000000, 0x38000000, 0xCCCCCC9B, 0x1000063A, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0xCACCBC98, 0x97879976, 0xCCC9CCC8, 
0x444454B9, 0xC7373333, 0x33333354, 0x0163CBCC, 0x49011033, 0x0011A5CC, 0x8B230000, 0x0600083A, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 
0xA9AABABC, 0x77777777, 0xCBBBBBCB, 0xBBBBBBBC, 0xCBBBBBBB, 0xBBBBBBBB, 0x0163CBCC, 0x49011033, 
0x0011A5CC, 0x8B230000, 0x0A000211, 0x00000060, 0xC0040400, 0x0000000C, 0x00000000, 0x00000042, 
0x00000000, 0x00000002, 0x00000000, 0x999999C9, 0xACCC9C99, 0xBC9999C9, 0x9999A9CC, 0xC7CCCB3C, 
0x33333354, 0x11111121, 0x8B251111, 0x7787CACC, 0x11415775, 0x0000012D, 0x20000060, 0x00200000, 
0x00000420, 0x00000000, 0x00000000, 0x204C2002, 0x00000000, 0x00000000, 0x99B9CCCC, 0x9C9999AA, 
0xCCCCCCC8, 0x77777787, 0xCBCCCCAC, 0xAAAAAAAA, 0x666676CB, 0x66666666, 0x68666666, 0xCC88ABBB, 
0x12000943, 0x00000040, 0x00000000, 0x0CC40C00, 0x000200C6, 0x22000000, 0x00006200, 0x00000000, 
0x00000000, 0xCCCCACC9, 0x9999B9CA, 0xCC6AC8C8, 0x8665CACC, 0xCCCC9999, 0x333399B9, 0xBACCBCCC, 
0x568665C9, 0x11111194, 0x79241111, 0x00000702, 0x0000C64C, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00040000, 0x00000000, 0xCCAB9AC9, 0xA9CCCCCC, 0xB88B04C0, 0x73C8CCCC, 
0xC9999999, 0x00009999, 0xCACCCCCC, 0x00004086, 0x13000000, 0xCCAC6847, 0x0000013B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 
0xCCCCAC99, 0xCCCC4800, 0x000040C8, 0xC8480000, 0x00000040, 0x000041C9, 0x00000000, 0x38000000, 
0xCCCCCC9B, 0x03000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00220000, 0xCCCCABC9, 0xB99999A9, 0xCC6A22C2, 0xB9BBCCCC, 0xC7373333, 0x33333354, 
0xA999CBCC, 0x99999999, 0x9C999999, 0xBB9999CC, 0x0300013B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 0xCCCCAC99, 0xCCCC4800, 
0x000040C8, 0xC8480000, 0x00000040, 0x000041C9, 0x00000000, 0x38000000, 0xCCCCCC9B, 0x0600013A, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 
0x36223294, 0x5586CAAC, 0xCC4822C2, 0x222284CC, 0xC7272222, 0x22222243, 0x0141CACC, 0x38000020, 
0x00005398, 0x9C460000, 0x0A00010B, 0xC2000060, 0x20C20C2A, 0x00000008, 0x00000000, 0x00000044, 
0x00460068, 0x00000064, 0x00A00000, 0x999999C9, 0xC9CCAC99, 0x9A9999C9, 0x99C9CCCC, 0xCC9C2522, 
0x222242B6, 0x00000000, 0x00000000, 0xCC8C1300, 0x0064A8CC, 0x0A000918, 0x00000020, 0x00000000, 
0x0A000A00, 0x002882CA, 0x02440000, 0x00202200, 0x00000002, 0x00000000, 0xCCCCACC9, 0x999999AC, 
0x242222C2, 0x42C8CC8B, 0xC9999999, 0x22229999, 0x84CACCCC, 0x00000000, 0x00000000, 0x79240000, 
0x0600013A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 
0x0000C000, 0x36223294, 0x5586CAAC, 0xCC4822C2, 0x222284CC, 0xC7272222, 0x22222243, 0x0141CACC, 
0x38000020, 0x00005398, 0x9C460000, 0x0600053A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0xCCBC6892, 0x444454B7, 0xCC6A23C2, 0x222284CC, 
0xC7272222, 0x22222243, 0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 0x0A00093A, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0x75A6CB9C, 
0x22222233, 0xCC9825C2, 0x2242C8CC, 0xC6161111, 0x11111132, 0x0141CACC, 0x38000020, 0x00005398, 
0x9C460000, 0x00000702, 0x0000C64C, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00040000, 0x00000000, 0xCCAB9AC9, 0xA9CCCCCC, 0xB88B04C0, 0x73C8CCCC, 0xC9999999, 0x00009999, 
0xCACCCCCC, 0x00004086, 0x13000000, 0xCCAC6847, 0x0000013B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 0xCCCCAC99, 0xCCCC4800, 
0x000040C8, 0xC8480000, 0x00000040, 0x000041C9, 0x00000000, 0x38000000, 0xCCCCCC9B, 0x03000701, 
0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 
0xCCCC9BC9, 0x9999B9CC, 0x992922C2, 0x999BCC9C, 0xC6161111, 0x11111132, 0x999999C9, 0x99999999, 
0xCC9B9999, 0x9999CACC, 0x0200013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 0xCCCCAC99, 0xCCCC4800, 0x000040C8, 0xC8480000, 
0x00000040, 0x000041C9, 0x00000000, 0x38000000, 0xCCCCCC9B, 0x00000F0B, 0xC2000060, 0x20C20C2A, 
0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00A00000, 0xCCAC99C9, 0x9999C9CC, 
0x9A9999C9, 0x9999CACC, 0xCACC5901, 0x00005169, 0x00000000, 0x00000000, 0xCC8C0300, 0x0064A8CC, 
0x12000913, 0x00000060, 0x00000000, 0xAAA20C00, 0x2820228C, 0x66660000, 0x0046AA00, 0x00000064, 
0x00000000, 0x9A9A99B9, 0x99C9CC9C, 0xAB9999C9, 0x9999CCCC, 0xCBBC970A, 0x8C848C74, 0xAC671363, 
0x5177CACC, 0x03000000, 0x02000073, 0x0200013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 0xCCCCAC99, 0xCCCC4800, 0x000040C8, 
0xC8480000, 0x00000040, 0x000041C9, 0x00000000, 0x38000000, 0xCCCCCC9B, 0x1000053A, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0xCCCC88BC, 
0x00516984, 0xCCCCCC08, 0x737B78C8, 0xC8480000, 0x00000040, 0x0141CACC, 0x38000020, 0x00005398, 
0x9C460000, 0x1000093A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xC0000000, 0x0000C000, 0x0020A6BC, 0x00000000, 0xCCBCCC08, 0x739BCBCC, 0xC8480000, 0x00000040, 
0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 0x0000013D, 0x88000060, 0x00200020, 0x00000000, 
0x00000000, 0x00000600, 0x00680002, 0x00020000, 0x000C0000, 0x372222B2, 0xA686CCBC, 0xCCBC37C0, 
0x00626AC8, 0xCC7B3700, 0x000084CC, 0x2284CBAC, 0x22222222, 0x22526A23, 0x25222222, 0x1200010A, 
0xAC000060, 0x00A0C060, 0x0000A000, 0x00000000, 0x000000AA, 0x00020000, 0x00000000, 0x002A0000, 
0x999999C9, 0x9999CCCC, 0xCC4800C0, 0x30B7CCBC, 0xC9999999, 0x00009999, 0x008398CC, 0x00000000, 
0xAACC4A01, 0x88ABA9AC, 0x00000702, 0x0000C64C, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00040000, 0x00000000, 0xCCAB9AC9, 0xA9CCCCCC, 0xB88B04C0, 0x73C8CCCC, 0xC9999999, 
0x00009999, 0xCACCCCCC, 0x00004086, 0x13000000, 0xCCAC6847, 0x0000013B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 0xCCCCAC99, 
0xCCCC4800, 0x000040C8, 0xC8480000, 0x00000040, 0x000041C9, 0x00000000, 0x38000000, 0xCCCCCC9B, 
0x04000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00220000, 0x9CBB99B9, 0x99C9CCCC, 0x990900C0, 0xA9CCCC9C, 0xC848A606, 0x00000040, 0x9999B9CC, 
0x99999999, 0x99999999, 0x9C999999, 0x0200013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 0xCCCCAC99, 0xCCCC4800, 0x000040C8, 
0xC8480000, 0x00000040, 0x000041C9, 0x00000000, 0x38000000, 0xCCCCCC9B, 0x1000053A, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0xCCCC88BC, 
0x00516984, 0xCCCCCC08, 0x737B78C8, 0xC8480000, 0x00000040, 0x0141CACC, 0x38000020, 0x00005398, 
0x9C460000, 0x1000093A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xC0000000, 0x0000C000, 0x0020A6BC, 0x00000000, 0xCCBCCC08, 0x739BCBCC, 0xC8480000, 0x00000040, 
0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 0x00000F0B, 0xC2000060, 0x20C20C2A, 0x00000008, 
0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00A00000, 0xCCAC99C9, 0x9999C9CC, 0x9A9999C9, 
0x9999CACC, 0xCACC5901, 0x00005169, 0x00000000, 0x00000000, 0xCC8C0300, 0x0064A8CC, 0x12000913, 
0x00000060, 0x00000000, 0xAAA20C00, 0x2820228C, 0x66660000, 0x0046AA00, 0x00000064, 0x00000000, 
0x9A9A99B9, 0x99C9CC9C, 0xAB9999C9, 0x9999CCCC, 0xCBBC970A, 0x8C848C74, 0xAC671363, 0x5177CACC, 
0x03000000, 0x02000073, 0x0200013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 0xCCCCAC99, 0xCCCC4800, 0x000040C8, 0xC8480000, 
0x00000040, 0x000041C9, 0x00000000, 0x38000000, 0xCCCCCC9B, 0x0000013D, 0x88000060, 0x00200020, 
0x00000000, 0x00000000, 0x00000600, 0x00680002, 0x00020000, 0x000C0000, 0x372222B2, 0xA686CCBC, 
0xCCBC37C0, 0x00626AC8, 0xCC7B3700, 0x000084CC, 0x2284CBAC, 0x22222222, 0x22526A23, 0x25222222, 
0x1200010A, 0xAC000060, 0x00A0C060, 0x0000A000, 0x00000000, 0x000000AA, 0x00020000, 0x00000000, 
0x002A0000, 0x999999C9, 0x9999CCCC, 0xCC4800C0, 0x30B7CCBC, 0xC9999999, 0x00009999, 0x008398CC, 
0x00000000, 0xAACC4A01, 0x88ABA9AC, 0x00000702, 0x0000C64C, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00040000, 0x00000000, 0xCCAB9AC9, 0xA9CCCCCC, 0xB88B04C0, 0x73C8CCCC, 
0xC9999999, 0x00009999, 0xCACCCCCC, 0x00004086, 0x13000000, 0xCCAC6847, 0x0000013B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 
0xCCCCAC99, 0xCCCC4800, 0x000040C8, 0xC8480000, 0x00000040, 0x000041C9, 0x00000000, 0x38000000, 
0xCCCCCC9B, 0x04000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00220000, 0x9CBB99B9, 0x99C9CCCC, 0x990900C0, 0xA9CCCC9C, 0xC848A606, 0x00000040, 
0x9999B9CC, 0x99999999, 0x99999999, 0x9C999999, 0x0200013B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 0xCCCCAC99, 0xCCCC4800, 
0x000040C8, 0xC8480000, 0x00000040, 0x000041C9, 0x00000000, 0x38000000, 0xCCCCCC9B, 0x1000053A, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 
0xCCCC88BC, 0x00516984, 0xCCCCCC08, 0x737B78C8, 0xC8480000, 0x00000040, 0x0141CACC, 0x38000020, 
0x00005398, 0x9C460000, 0x1000093A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xC0000000, 0x0000C000, 0x0020A6BC, 0x00000000, 0xCCBCCC08, 0x739BCBCC, 0xC8480000, 
0x00000040, 0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 0x00000F0B, 0xC2000060, 0x20C20C2A, 
0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00A00000, 0xCCAC99C9, 0x9999C9CC, 
0x9A9999C9, 0x9999CACC, 0xCACC5901, 0x00005169, 0x00000000, 0x00000000, 0xCC8C0300, 0x0064A8CC, 
0x12000913, 0x00000060, 0x00000000, 0xAAA20C00, 0x2820228C, 0x66660000, 0x0046AA00, 0x00000064, 
0x00000000, 0x9A9A99B9, 0x99C9CC9C, 0xAB9999C9, 0x9999CCCC, 0xCBBC970A, 0x8C848C74, 0xAC671363, 
0x5177CACC, 0x03000000, 0x02000073, 0x0000013D, 0x88000060, 0x00200020, 0x00000000, 0x00000000, 
0x00000600, 0x00680002, 0x00020000, 0x000C0000, 0x372222B2, 0xA686CCBC, 0xCCBC37C0, 0x00626AC8, 
0xCC7B3700, 0x000084CC, 0x2284CBAC, 0x22222222, 0x22526A23, 0x25222222, 0x0200013B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 
0xCCCCAC99, 0xCCCC4800, 0x000040C8, 0xC8480000, 0x00000040, 0x000041C9, 0x00000000, 0x38000000, 
0xCCCCCC9B, 0x1200010A, 0xAC000060, 0x00A0C060, 0x0000A000, 0x00000000, 0x000000AA, 0x00020000, 
0x00000000, 0x002A0000, 0x999999C9, 0x9999CCCC, 0xCC4800C0, 0x30B7CCBC, 0xC9999999, 0x00009999, 
0x008398CC, 0x00000000, 0xAACC4A01, 0x88ABA9AC, 0x00000702, 0x0000C64C, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00040000, 0x00000000, 0xCCAB9AC9, 0xA9CCCCCC, 0xB88B04C0, 
0x73C8CCCC, 0xC9999999, 0x00009999, 0xCACCCCCC, 0x00004086, 0x13000000, 0xCCAC6847, 0x0000013B, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 
0x999999B9, 0xCCCCAC99, 0xCCCC4800, 0x000040C8, 0xC8480000, 0x00000040, 0x000041C9, 0x00000000, 
0x38000000, 0xCCCCCC9B, 0x04000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00220000, 0x9CBB99B9, 0x99C9CCCC, 0x990900C0, 0xA9CCCC9C, 0xC848A606, 
0x00000040, 0x9999B9CC, 0x99999999, 0x99999999, 0x9C999999, 0x0400013B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 0xCCCCAC99, 
0xCCCC4800, 0x000040C8, 0xC8480000, 0x00000040, 0x000041C9, 0x00000000, 0x38000000, 0xCCCCCC9B, 
0x1200010B, 0xC0000060, 0x00C40C08, 0x00000008, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 
0x00400000, 0xBBBBBBCB, 0xCBCCCCBC, 0x490200C0, 0x99C9CCBC, 0xCCCCCC0C, 0x00002094, 0x00000000, 
0x00000000, 0xCCAB3600, 0x002097CC, 0x0000092D, 0x82000060, 0x40840000, 0x00002A80, 0x00000006, 
0x02000600, 0x80A88628, 0x00000000, 0x00040000, 0x87CACCCC, 0x77777777, 0xCCCC8CC4, 0x33333384, 
0xCCCC9A7B, 0x7777C7CC, 0xCCBCA8CC, 0x22222295, 0x25222222, 0xCC9C6995, 0x10000946, 0x86000040, 
0x0080C62C, 0xCCB08600, 0x06000064, 0x00000000, 0x00000000, 0x200A0000, 0x00662000, 0xCCCCCCCC, 
0x9999B9CC, 0x575901C0, 0x95CACCBC, 0xC7CC5B00, 0x00000031, 0xCACCCCCC, 0xB9BB7984, 0x00000030, 
0xBB8A0300, 0x00800912, 0x82000040, 0x00888000, 0x0800C0A0, 0x00000080, 0x00004400, 0x00000000, 
0x00000000, 0x00060000, 0xCCABCCC9, 0xCC9CCCCC, 0x333333C3, 0xCCCC6A33, 0xC7373333, 0x33333354, 
0xC9CCCCCC, 0x22113187, 0x67461111, 0xCC6A7655, 0x0E000F3A, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000CA00, 0x36111191, 0x3374C9BC, 0xCC590100, 
0x002084CC, 0xC6060000, 0x00000031, 0x1184CCCC, 0x49011033, 0x1052A5CC, 0xCC8A3612, 0x0A000F3A, 
0x00000020, 0x00000002, 0x20000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 
0xCCCBBB97, 0x222232B6, 0xCC7B0300, 0x003087CC, 0xC6666606, 0x00002063, 0x1194CCCC, 0x49011033, 
0x1021A5CC, 0xCC8A3612, 0x03000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00220000, 0xCCCCCCCB, 0xC9ABBACB, 0x250000C0, 0x62CACC9C, 0xC6060000, 
0x00000031, 0x88BACCCC, 0x49523375, 0x1011A5CC, 0xCC8A3612, 0x00242A0C, 0x09070708, 0x060B0808, 
0x0A09030A, 0x00000000, 0x01000101, 0x00000100, 0x00000501, 0x00000000, 0x42C74440, 0xC9C740C7, 
0xC7C7C7CA, 0x00000000, 0x78787878, 0x78787878, 0x78787878, 0x00000000, 0x56565656, 0x56565656, 
0x56565656, 0x00000000, 0x04000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20C00000, 0x0000CA00, 0x8C0400B0, 0xCACCCCCC, 0xCCCC8CC4, 0x00000084, 0xC8480000, 
0x00000040, 0x000062C9, 0x25000000, 0x9B783742, 0xCCCCBBAA, 0x0C00050B, 0xC2000060, 0x20C20C2A, 
0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00A00000, 0x999999B9, 0x9999A9CC, 
0x999999C9, 0x99C9CC99, 0xCACCCC0C, 0x42000062, 0x00000000, 0x00000000, 0xCC9C0300, 0x000041CA, 
0x0000092D, 0x82000060, 0x40840000, 0x00002A80, 0x00000006, 0x02000600, 0x80AC8628, 0x00000000, 
0x00040000, 0x30B7CCBC, 0x00000000, 0xC8CCBC07, 0x00000040, 0xC8CCCC08, 0x00000051, 0x000030C8, 
0x00000000, 0x00000000, 0xCCAC4901, 0x12000946, 0x20000040, 0x0020C00C, 0xCC202000, 0x00000000, 
0x00000000, 0x00000000, 0x00040000, 0x00000000, 0xCC9B99C9, 0x99B9CCCC, 0x480000C0, 0x20A6CCCC, 
0xC9999999, 0x00009999, 0xCCCCCCCC, 0x433464C8, 0x44641531, 0xCCCCAC68, 0x00800712, 0x82000040, 
0x00888000, 0x0000C0A0, 0x00000000, 0x00000400, 0x00000000, 0x00000000, 0x00060000, 0xBBBBBBCB, 
0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xCBBBBBBB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0x1000053A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xC0000000, 0x0000C000, 0x580100B0, 0x0063CACC, 0xCC8C0400, 0x000084CC, 0xC8480000, 0x00000040, 
0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 0x1000073A, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0xCCCC48B0, 0x00001095, 0xCCAC2600, 
0x000084CC, 0xC8480000, 0x00000040, 0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 0x03000701, 
0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 
0xCC9C99B9, 0x99A9CCCC, 0x990900C0, 0x99B9CCCC, 0xC8480000, 0x00000040, 0x99A9CCCC, 0x99999999, 
0x99999999, 0x99999999, 0x04000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20C00000, 0x0000CA00, 0x680400B0, 0xCACCCCAB, 0xCCAC4800, 0x000040C8, 0xC8480000, 
0x00000040, 0x006287CA, 0x00413324, 0x86582500, 0xCCCCCC7B, 0x0C00050B, 0xC2000060, 0x20C20C2A, 
0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00A00000, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0x0C000918, 0x00000020, 0x00000000, 0x0A000A00, 0x002882CA, 0x02440000, 0x00202200, 0x00000002, 
0x00000000, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xCBBBBBBB, 0xBBBBBBBB, 0xBBBBBBCB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x1000053A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 0x1000073A, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x0141CACC, 0x38000020, 0x00005398, 
0x9C460000, 0x1000093A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xC0600000, 0x0000C000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 0x04000701, 0x0228C64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBCB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x07000716, 
0x00000040, 0x00000000, 0xC0C60A00, 0x0C000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 
0xCCCCACB9, 0xCCCCCCCC, 0x999999C9, 0xC9CCCCBC, 0xC8BBCB0C, 0x6A735374, 0xCACCCCBC, 0x10653396, 
0x00000000, 0x26002001, 0x04000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20C00000, 0x0000CA00, 0x680400B0, 0xCACCCCAB, 0xCCAC4800, 0x000040C8, 0xC8480000, 
0x00000040, 0x006287CA, 0x00413324, 0x86582500, 0xCCCCCC7B, 0x1200050E, 0x00000060, 0xC6480A00, 
0x0000004C, 0x00000000, 0x000000A9, 0x00000000, 0x00000000, 0x00000000, 0x040000B0, 0xC8CCCCAC, 
0xCCAC68C4, 0x0073CBCC, 0x1095CC0C, 0x00000000, 0x00000000, 0x26000000, 0xCACCCC9C, 0x00000084, 
0x0000072D, 0x82000060, 0x40840000, 0x00002A80, 0x00000006, 0x02000600, 0x80A68628, 0x00000000, 
0x00040000, 0xCACCCCB8, 0x000020A6, 0x40C8CC08, 0x00000000, 0xC8CCCC08, 0x00000040, 0x00000051, 
0x00000000, 0x55020000, 0xCACCCC79, 0x10000917, 0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 
0x00680000, 0x00000000, 0x00000000, 0x00000000, 0xCCAC99C9, 0x9999CCCC, 0x480000C0, 0x0084CCCC, 
0xC9CC9C99, 0x00309999, 0xCCCCCCCC, 0x2364A8CC, 0x01104226, 0xAB763545, 0x00800812, 0x82000040, 
0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0x9A9999C9, 
0xCA9ACC9B, 0x040000C0, 0xC9CCCC88, 0xC9999999, 0x00009999, 0xBB88ABC9, 0x636543B7, 0x00002035, 
0x7A020000, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00220000, 0xAC9A99B9, 0xB9BBCCCC, 0x990900C0, 0x9999CCCC, 0xC848620A, 0x00000040, 
0xCCCCCCCC, 0x9999A9CC, 0xCCCCAC99, 0xCCCCCCCC, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x680400B0, 0xCACCCCAB, 0xCCAC4800, 
0x000040C8, 0xC8480000, 0x00000040, 0x006287CA, 0x00413324, 0x86582500, 0xCCCCCC7B, 0x0000050B, 
0xC2000060, 0x20C20C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00A00000, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0x12000913, 0x00000060, 0x00000000, 0xAAA20C00, 0x2820228C, 0x66660000, 
0x0046AA00, 0x00000064, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x1000073A, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 
0x1000093A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 
0x0000C000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x0141CACC, 
0x38000020, 0x00005398, 0x9C460000, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x680400B0, 0xCACCCCAB, 0xCCAC4800, 0x000040C8, 
0xC8480000, 0x00000040, 0x006287CA, 0x00413324, 0x86582500, 0xCCCCCC7B, 0x0000053D, 0x88000060, 
0x00200020, 0x00000000, 0x00000000, 0x00000600, 0x00680002, 0x00020000, 0x000C0000, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0x1200050A, 0xAC000060, 0x00A0C060, 0x0000A000, 0x00000000, 0x000000AA, 0x00020000, 
0x00000000, 0x002A0000, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xCBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x04000701, 0x0228C64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBCB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x02000F3B, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 
0x680400B0, 0xCACCCCAB, 0xCCAC4800, 0x000040C8, 0xC8480000, 0x00000040, 0x006287CA, 0x00413324, 
0x86582500, 0xCCCCCC7B, 0x02000506, 0xCA000060, 0x22C2AB2A, 0x00008002, 0x00000000, 0x0000668A, 
0x004600AA, 0x00000044, 0x00880000, 0xCCCCCCB9, 0x99999A9C, 0x99999999, 0xB9CCCCCB, 0xC8CCCC0C, 
0x84040040, 0x00000030, 0x53020000, 0x68360000, 0xC9CCCCCC, 0x12000715, 0x00000060, 0x00000000, 
0x00CC0000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x488404B0, 0xCCCCCCCB, 
0xCC8A4400, 0x87A8CCCC, 0x30B7C90C, 0x00000000, 0xCACCCC6C, 0x00003376, 0x00000000, 0x02000000, 
0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 
0x0000CA00, 0x680400B0, 0xCACCCCAB, 0xCCCC4800, 0x000040C8, 0xC8480000, 0x00000040, 0x683642A8, 
0x55360072, 0x65481184, 0xCCCCAC45, 0x1200050F, 0x00000060, 0xCC000000, 0x00000000, 0x00000000, 
0x0000B000, 0x00000080, 0x00000000, 0x00000000, 0x260000B0, 0xC8CCCC8C, 0xCCAB5901, 0x0040C8CC, 
0x73A6CA0C, 0x00000000, 0x00000000, 0x01000000, 0xA5CCCC5A, 0x00000023, 0x12000917, 0x00000040, 
0x00000000, 0x0CC60A00, 0x000000A6, 0x00A00000, 0x00000000, 0x00000000, 0x00000000, 0xBC9A99B9, 
0x99A9CACC, 0x480000C0, 0x1095CCCC, 0xC9CCCB9C, 0x30379999, 0xCCCCCCCC, 0x00113298, 0x00100000, 
0xAB663501, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 
0x00000000, 0x00060000, 0xC99A99C9, 0xBC99CCAB, 0x686A02C0, 0xCCCC8CCA, 0xC9999999, 0x00009999, 
0xBCBA9CC9, 0x0210A5BA, 0x00000052, 0x24841400, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xACAB99B9, 0x99AAC9CC, 0x990900C0, 
0x99C9CCCC, 0xC8480000, 0x00000040, 0xCCCCCCCC, 0x9999A9CC, 0xCCCCAC99, 0xCCCCCCCC, 0x04000F3B, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 
0x680400B0, 0xCACCCCAB, 0xCCAC4800, 0x000040C8, 0xC8480000, 0x00000040, 0x006287CA, 0x00413324, 
0x86582500, 0xCCCCCC7B, 0x0600073A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xC0000000, 0x0000C000, 0xCACCBC98, 0x97879976, 0xCC480000, 0x000084CC, 0xC8480000, 
0x00000040, 0x4164CACC, 0x7B020000, 0x000041C9, 0x5A010000, 0x1000083A, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0x4186BABC, 0x00000000, 
0xCC8C7403, 0x0042A6CC, 0xC8480000, 0x00000040, 0x0083CCCC, 0x38000000, 0x001065A8, 0x4A010000, 
0x0E000511, 0x42000060, 0xC64A0A00, 0x0000000C, 0x00000000, 0x000000A8, 0x00000020, 0x00000008, 
0x00000000, 0x999999B9, 0x9BCACBCC, 0x999999C9, 0x99CBCC9C, 0xC8CCCC0C, 0x260030B7, 0x00000000, 
0x26000020, 0xCCAC4864, 0x410241CA, 0x0000052D, 0x00000060, 0x00000000, 0x00000000, 0x00000000, 
0x00000500, 0x00580005, 0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x0000082D, 0x00000060, 
0x00000000, 0x00000000, 0x00000000, 0x06000000, 0x006C0000, 0x00000000, 0x00000000, 0x1095CCBC, 
0x00204648, 0xCCCCCC08, 0x000040C8, 0xC8CCCC08, 0x00000040, 0x00004198, 0x00000000, 0x36000000, 
0xCCCC9A44, 0x12000943, 0x00000040, 0x00000000, 0x0CC40C00, 0x000200C6, 0x22000000, 0x00006200, 
0x00000000, 0x00000000, 0xBCCB99C9, 0xB99CCCCC, 0xCB9935C0, 0x84A6CCCC, 0xC99A9999, 0x00009999, 
0xCAACAACA, 0xBAAC9BB9, 0x21431194, 0x56773325, 0x03000701, 0x0228C64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xB99B99B9, 0xBCACCCBC, 0x990902C0, 
0x99C9CCAC, 0xC8787BC3, 0x11111141, 0x9999CBBC, 0x99999999, 0x99999999, 0x99999999, 0x02000F3B, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00900000, 0x00009400, 
0x680400B0, 0xCACCCCAB, 0xCCCC48C2, 0x222284CC, 0xC84822C2, 0x22222242, 0x8387AB15, 0x99480100, 
0x98B9BACC, 0x000030A8, 0x0080050B, 0x00000000, 0x00400A08, 0x00000008, 0x00000000, 0x00000200, 
0x00400044, 0x00000000, 0x00000000, 0xCCCC99B9, 0x999999A9, 0x999999C9, 0x99C9CCBC, 0xC8CCCC0C, 
0x00000073, 0x00000010, 0x00000000, 0xAC670200, 0x64CBCCCC, 0x00800716, 0x00000040, 0x00000400, 
0xC0C60800, 0x0C000006, 0x02000000, 0x00000000, 0x00000000, 0x00000000, 0xBBCC9CB9, 0xA9CBCCBC, 
0x99999999, 0x99CBCCCC, 0xA6C8CC0C, 0x44408424, 0x41CACCBC, 0x00000000, 0x00000000, 0x49010000, 
0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 
0x0000CA00, 0x680400B0, 0xCACCCCAB, 0xCCCC4800, 0x000040C8, 0xC8480000, 0x00000040, 0x000041C9, 
0x00000000, 0x38000000, 0xCCCCCC9B, 0x12000528, 0x82000080, 0x07800402, 0x00000000, 0x00000000, 
0x00004464, 0x002000CB, 0x0000000A, 0x00220000, 0xAA9999B9, 0x99CACCCC, 0xAB9999C9, 0x99CACCCC, 
0x50A8CB0C, 0x00000000, 0x00000000, 0x68241101, 0xCCCCCCAC, 0x0064A8CC, 0x0000072D, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x40060000, 0x00000000, 0x00000000, 0x9ACACCBC, 
0x00000062, 0xC8CCCCC8, 0x33333343, 0xC8CC8CC4, 0x11111141, 0x000010A5, 0x00000000, 0x00000000, 
0xCCAC2700, 0x0A000917, 0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 0x00A00000, 0x00000000, 
0x00000000, 0x00000000, 0xCCCCAAC9, 0xA9AACCCC, 0x480100C0, 0x41C8CCCC, 0xC9CCCC9A, 0x00139999, 
0xCCCCCCCC, 0x8888A8CC, 0x88888888, 0xAB888888, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 
0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0xAC9AB9C9, 0xABCBCCBC, 0x040000C0, 
0x84CCCC8C, 0xC9999999, 0x00009999, 0xCCCCBCCA, 0x121141CA, 0x1162AA59, 0x49111111, 0x00000702, 
0x0060C64C, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00040000, 0x00000000, 
0xCCAB9AC9, 0xA9CCCCCC, 0xB88B04C0, 0x73C8CCCC, 0xC9999999, 0x00009999, 0xCACCCCCC, 0x00004086, 
0x13000000, 0xCCAC6847, 0x00000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00B00000, 0x00009400, 0x8C0400B0, 0xCACCCCCC, 0xCCCC8CC4, 0x00000084, 0xC8480000, 
0x00000040, 0x000062C9, 0x25000000, 0x9B783742, 0xCCCCBBAA, 0x01000701, 0x0228C64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCC9999B9, 0xA9CCCCCC, 
0x990900C0, 0x99C9CCCC, 0xC8A82600, 0x00000040, 0xCCCCCCCC, 0x9999A9CC, 0xCCCCAC99, 0xCCCCCCCC, 
0x0080080B, 0xC0000060, 0x00C00C04, 0x00000004, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 
0x00400000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x1200091E, 0x00000060, 0x00000000, 0x00000000, 0xCA60AC00, 
0x00AA0000, 0x00000000, 0x00000000, 0x00000000, 0xC99C99B9, 0x9999C9CC, 0x999999C9, 0x999CCCCC, 
0x00000000, 0x0084CC48, 0x01000000, 0xCCCC4943, 0x000051CA, 0x00000000, 0x04000F3B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x680400B0, 
0xCACCCCAB, 0xCCAC4800, 0x000040C8, 0xC8480000, 0x00000040, 0x006287CA, 0x00413324, 0x86582500, 
0xCCCCCC7B, 0x12000508, 0x2C000060, 0x000040C8, 0x00000000, 0x00000000, 0x00000200, 0x00000000, 
0x00000000, 0x00220000, 0xCC8804B0, 0x003085CC, 0xABCCCC08, 0x0030A7A8, 0x59010000, 0x8A84CC8C, 
0x00000030, 0x00000000, 0xCCAA1500, 0x98C9CCCC, 0x12000726, 0x00000080, 0x00000000, 0x40200600, 
0x04AC6886, 0xCA000000, 0x00A88406, 0x00000000, 0x00000000, 0x99A9B9C9, 0xA99CCCCC, 0x444800C0, 
0x73B7CC8C, 0xC999999A, 0x00009999, 0x20A6CBCC, 0x00000000, 0x00004102, 0x4A010000, 0x04000701, 
0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 
0x999999B9, 0xC9CBCCCC, 0x990900C0, 0x9999CC9C, 0xC8480000, 0x00000040, 0x99999999, 0x99999999, 
0x99B9CC9A, 0x99999999, 0x0080071F, 0x00000020, 0x00000000, 0xC0000800, 0x8C00800A, 0x02000000, 
0x00004400, 0x00000000, 0x00000000, 0x9CCA9CB9, 0xCB9CCCCC, 0x9999B9C9, 0xBCCCCC9C, 0xCABCCA0C, 
0x9C1532B7, 0xACAACC7B, 0x4685BBBA, 0x02000051, 0x15000041, 0x04000F3B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x680400B0, 0xCACCCCAB, 
0xCCAC4800, 0x000040C8, 0xC8480000, 0x00000040, 0x006287CA, 0x00413324, 0x86582500, 0xCCCCCC7B, 
0x12000511, 0x42000060, 0xC64A0900, 0x0000000C, 0x00000000, 0x000000A8, 0x00000020, 0x00000008, 
0x00000000, 0x9999ABBA, 0xCBBCCCCC, 0xBC9999C9, 0xBAC9CCCC, 0xC8B9CB0C, 0x53114542, 0x01003185, 
0x45540220, 0xBBCCCC8C, 0x876996A9, 0x0000072D, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x400A0000, 0x00000000, 0x00000000, 0xCCB8CCBC, 0x000040C8, 0xC8CCCC08, 0x000051A9, 
0xC8CCCC08, 0x00000040, 0x620310A5, 0x00000000, 0x15000000, 0xCCACCB9A, 0x00000714, 0x00000060, 
0x00000000, 0x44820400, 0x00000000, 0x00700000, 0x00000000, 0x00000000, 0x00000000, 0x8CA6C8BC, 
0xCCBACACA, 0x9C9AB7C7, 0xAACCCCCC, 0xC8C8CC0C, 0x00000040, 0x65AACCCC, 0x83BBAC46, 0x00000000, 
0x38000000, 0x08000730, 0x60000060, 0x64520000, 0x00000000, 0x00000000, 0x00700074, 0x0C008226, 
0x000000BA, 0x00400000, 0x8C6755B9, 0xCCACCCCC, 0xCCCC7BC3, 0x7ABBCCCC, 0xC8BBCB0C, 0x00401595, 
0x20211013, 0x9C380000, 0xCACCCCCC, 0x00415499, 0x0000072D, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x400A0000, 0x00000000, 0x00000000, 0xCCCCCCBA, 0x00109586, 0xCC8CCC08, 
0x00000084, 0xC8CCCC08, 0x00000040, 0x730330B8, 0x00000000, 0x13000000, 0xCBCC5A22, 0x0A000917, 
0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 0x00A00000, 0x00000000, 0x00000000, 0x00000000, 
0x9CBC99CA, 0xC99A9ACC, 0xBA6702C0, 0xB788CBCC, 0xC9CCCA9C, 0x13159999, 0xBACACBCC, 0x24131084, 
0x00000021, 0x9B460000, 0x00800712, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 
0x00000000, 0x00000000, 0x00060000, 0x999999C9, 0x999ACCBB, 0x7B33B7C7, 0x46C8C89C, 0xC9999999, 
0x00009999, 0x99BA68C7, 0x23632384, 0x26000010, 0x4546A67A, 0x01000701, 0x0228C64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0x9B9999B9, 0xB9ABA9C9, 
0x990900C0, 0x99B9CCBC, 0xC8886A02, 0x00000084, 0xCCCCCCCC, 0x9999A9CC, 0xCCCCAC99, 0xCCCCCCCC, 
0x08000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 
0x0000CA00, 0x680400B0, 0xCACCCCAB, 0xCCAC4800, 0x000040C8, 0xC8480000, 0x00000040, 0x006287CA, 
0x00413324, 0x86582500, 0xCCCCCC7B, 0x12000529, 0x60000080, 0x00800000, 0x00000000, 0x00000000, 
0x00000040, 0x0000008C, 0x0000000A, 0x00000000, 0xBB9999B9, 0xCBCCCCCC, 0x8B5623C0, 0x31B7CCCC, 
0xA9A9CB9C, 0x40C89999, 0x30022153, 0x79360000, 0xCCCC9B89, 0x54A8B9BB, 0x01000701, 0x0228C64C, 
0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0x07000716, 0x00000040, 0x00000000, 0xC0C60A00, 0x0C000006, 0xA6000000, 0x00000000, 
0x00000000, 0x00000000, 0x9CCCACB9, 0xB9CACCCC, 0x999999C9, 0x99CCCCBC, 0xC8ABCC0C, 0x21004240, 
0xCACCCCBC, 0x00312265, 0x00000000, 0x36001013, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x680400B0, 0xCACCCCAB, 0xCCAC4800, 
0x000040C8, 0xC8480000, 0x00000040, 0x006287CA, 0x00413324, 0x86582500, 0xCCCCCC7B, 0x1200050E, 
0x00000060, 0xC6480A00, 0x0000004C, 0x00000000, 0x000000A9, 0x00000000, 0x00000000, 0x00000000, 
0x040000B0, 0xC8CCCCAC, 0xCCAC68C4, 0x0073CBCC, 0x1095CC0C, 0x00000000, 0x00000000, 0x26000000, 
0xCACCCC8C, 0x00000084, 0x0000072D, 0x82000060, 0x40840000, 0x00002A80, 0x00000006, 0x02000600, 
0x80A68628, 0x00000000, 0x00040000, 0xCCCCCCBB, 0xBBBBBBBB, 0xCBBBCCCB, 0xBBBBBBBB, 0xCBCCBCCB, 
0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCCBB, 0x10000917, 0x00000040, 0x00000000, 
0x0CC60A00, 0x000000A6, 0x00680000, 0x00000000, 0x00000000, 0x00000000, 0xCCAC99C9, 0x9999CCCC, 
0x482600C0, 0x62A6CCCC, 0xC9C99A99, 0x20269999, 0xCCCCCCCC, 0x2364A8CC, 0x00000023, 0x8B763414, 
0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 
0x00060000, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBCBCB, 0xCCCCCCBC, 0xCBBBBBCB, 0xBBBBBBBB, 0xCCBCCBCB, 
0xBBBBBBCC, 0xCBBBBBBB, 0xBCBBBBBB, 0x00000702, 0x0060C64C, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00040000, 0x00000000, 0xCCAB9AC9, 0xA9CCCCCC, 0xB88B04C0, 0x73C8CCCC, 
0xC9999999, 0x00009999, 0xCACCCCCC, 0x00004086, 0x13000000, 0xCCAC6847, 0x02000F3B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00B00000, 0x00009600, 0x8C0400B0, 
0xCACCCCCC, 0xCCAC4800, 0x000040C8, 0xC8480000, 0x00000040, 0x006287CA, 0x00413324, 0x86582500, 
0xCCCCCC7B, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00220000, 0xBA9999C9, 0x999ABCCC, 0x990900C0, 0x9999CCCC, 0xC8480000, 0x00000040, 
0xCCCCCCCC, 0x9999A9CC, 0xCCCCAC99, 0xCCCCCCCC, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x680400B0, 0xCACCCCAB, 0xCCAC4800, 
0x000040C8, 0xC8480000, 0x00000040, 0x006287CA, 0x00413324, 0x86582500, 0xCCCCCC7B, 0x02000506, 
0xCA000060, 0x22C2AB2A, 0x00008002, 0x00000000, 0x0000668A, 0x004600AA, 0x00000044, 0x00880000, 
0xCCCCCCB9, 0x99999A9C, 0x99999999, 0xB9CCCCCB, 0xC8CCCC0C, 0x84040040, 0x00000030, 0x53020000, 
0x68360000, 0xC9CCCCCC, 0x12000715, 0x00000060, 0x00000000, 0x00CC0000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x488404B0, 0xCCCCCCCB, 0xCC8A4400, 0x87A8CCCC, 0x30B7C90C, 
0x00000000, 0xCACCCC6C, 0x00003376, 0x00000000, 0x02000000, 0x02000F3B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x680400B0, 0xCACCCCAB, 
0xCCCC4800, 0x000040C8, 0xC8480000, 0x00000040, 0x683642A8, 0x55360072, 0x65481184, 0xCCCCAC45, 
0x1200050F, 0x00000060, 0xCC000000, 0x00000000, 0x00000000, 0x0000B000, 0x00000080, 0x00000000, 
0x00000000, 0x260000B0, 0xC8CCCC8C, 0xCCAB5901, 0x0040C8CC, 0x73A6CA0C, 0x00000000, 0x00000000, 
0x01000000, 0xA5CCCC5A, 0x00000023, 0x12000917, 0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 
0x00A00000, 0x00000000, 0x00000000, 0x00000000, 0xBC9A99B9, 0x99A9CACC, 0x480000C0, 0x1095CCCC, 
0xC9CCCB9C, 0x30379999, 0xCCCCCCCC, 0x00003098, 0x00000000, 0x8B250000, 0x00800812, 0x82000040, 
0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0xC99A99C9, 
0xBC99CCAB, 0x686A02C0, 0xCCCC8CCA, 0xC9999999, 0x00009999, 0xBCBA9CC9, 0x0210A5BA, 0x00000052, 
0x24841400, 0x00000702, 0x0060C64C, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00040000, 0x00000000, 0xCCAB9AC9, 0xA9CCCCCC, 0xB88B04C0, 0x73C8CCCC, 0xC9999999, 0x00009999, 
0xCACCCCCC, 0x00004086, 0x13000000, 0xCCCC8A47, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00B00000, 0x00009600, 0x8C0400B0, 0xCACCCCCC, 0xCCAC4800, 
0x000040C8, 0xC8480000, 0x00000040, 0x006287CA, 0x00413324, 0x86582500, 0xCCCCCC7B, 0x01000701, 
0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 
0xBA9999C9, 0x999ABCCC, 0x990900C0, 0x9999CCCC, 0xC8480000, 0x00000040, 0xCCCCCCCC, 0x9999A9CC, 
0xCCCCAC99, 0xCCCCCCCC, 0x00FF080A, 0x09090A0B, 0x0B0B0A0A, 0x0000080B, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x46464047, 0x42424440, 0x00004042, 0x00000000, 0xBDBDBDBD, 
0xBDBDBDBD, 0x0000BDBD, 0x00000000, 0xAEAE8EAE, 0x8E8E8E8E, 0x00008E8E, 0x00000000, 0x0300013B, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 
0x999999B9, 0xC8CC8C99, 0xCCBC3700, 0x000051C9, 0xC8480000, 0x00000040, 0x5196BBAB, 0x43121300, 
0xCCCCBC57, 0x565685B8, 0x0080010B, 0xC2000060, 0x22C20C2A, 0x00000008, 0x00000000, 0x00000044, 
0x00460068, 0x00000064, 0x00A00000, 0xCCCCCCCC, 0x99999ACB, 0x999999C9, 0x99CBCC99, 0xCCCCCC0C, 
0x000090BA, 0x00002096, 0x39000000, 0xCCCCCCBB, 0x99ABCCCC, 0x0A000F31, 0x40000060, 0x00400000, 
0x60460000, 0x00000000, 0x00800080, 0x0000B002, 0x000000AC, 0x00400000, 0xCCABCABB, 0xBC9CCBCC, 
0x999999C9, 0xCCCCCBAA, 0xC8CCCB0C, 0x37000340, 0x9999CBAC, 0xCC8987A8, 0x00002086, 0x14000000, 
0x04000F0E, 0x00000060, 0xC80A0000, 0x000000AC, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x222222B2, 0xCC8C3437, 0xCCCCCCC8, 0x22222284, 0x1195C8CC, 0x11111111, 0x22222222, 
0x24222222, 0x87CBCC9C, 0x22222232, 0x0000012D, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x000A0000, 0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x00000514, 0x00000060, 
0x00000000, 0x44C20400, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xB9CAAC8A, 
0x74885742, 0xCCCC7BC3, 0x0063C8CB, 0xC6CCCC0C, 0x00000031, 0xA5CCCCAC, 0x35230010, 0x54676586, 
0x14000052, 0x0C000530, 0x80000060, 0x44820000, 0x00000000, 0x00000000, 0x00400044, 0x08008228, 
0x000000CA, 0x00400000, 0x594800B0, 0xCCBCB888, 0xCC9C5901, 0x0084CCCC, 0x48A6B90C, 0x00000040, 
0x00001013, 0xCC5A2313, 0x72C9CCCC, 0x00000000, 0x0000082D, 0x00000060, 0x00000000, 0x00000000, 
0x00000000, 0x06000000, 0x006A0000, 0x00000000, 0x00000000, 0xBBCCCC9C, 0x000040C8, 0x62CACCC8, 
0x00000000, 0xC8CCCC58, 0x55555565, 0x006255B7, 0x00000000, 0x5A010000, 0xCCCCCCCC, 0x0E000917, 
0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 0x00A00000, 0x00000000, 0x00000000, 0x00000000, 
0xAC9B99C9, 0xA9A9C9CC, 0x7A0300C0, 0x3784CCCC, 0xC99ACC9C, 0x00009999, 0x93CBCBCC, 0x00000000, 
0x00000000, 0x27000000, 0x00000912, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 
0x00000040, 0x00000002, 0x00060000, 0xBC9999C9, 0xC999CBCC, 0xBCCC68C6, 0xBACCCC9C, 0xCACCCC9C, 
0x88889999, 0x88A889C8, 0x88888888, 0xCCCC9C88, 0x888888C9, 0x01000701, 0x0228C64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0x999A99B9, 0xA9C9CAAC, 
0x990900C0, 0x9999CCBC, 0xC8480000, 0x00000040, 0x9999B9CC, 0x99999999, 0x99999999, 0xCC9A9999, 
0x0300013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 
0x0000CA00, 0x999999B9, 0xC8CC8C99, 0xCCBC3700, 0x000051C9, 0xC8480000, 0x00000040, 0x5196BBAB, 
0x43121300, 0xCCCCBC57, 0x565685B8, 0x0E000F3A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0x480000B0, 0x0053C9CC, 0xCC590100, 0x000084CC, 
0xC8480000, 0x00000040, 0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 0x0E000F3A, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0xCCBC48B0, 
0x00003095, 0xCCBC3700, 0x004096CC, 0xC8480000, 0x00000040, 0x0141CACC, 0x38000020, 0x00005398, 
0x9C460000, 0x1200010B, 0xC0000060, 0x00C00C04, 0x00000002, 0x00000000, 0x00000000, 0x00000002, 
0x00000000, 0x00400000, 0x999999B9, 0x99A9CAAC, 0x999999C9, 0x9999C9CC, 0xCCCCCC0C, 0x00003087, 
0x00000000, 0x00000000, 0xCC8C0300, 0x0064A8CC, 0x0000092D, 0x82000060, 0x40840000, 0x00002A80, 
0x00000006, 0x02000600, 0x80AC8628, 0x00000000, 0x00040000, 0x40C8CCBC, 0x00000000, 0xCACC8C04, 
0x00000060, 0xCCCCCC08, 0x000097BA, 0xCACCCCCC, 0x00000086, 0x00000000, 0xCCAC9B38, 0x10000946, 
0x88000040, 0x0080C62C, 0xCC808600, 0x06000064, 0x00000000, 0x00000000, 0x200A0000, 0x00662000, 
0xCCCC9CC9, 0x9999CBCC, 0x470200C0, 0x42C8CCBC, 0xC9CC9999, 0x00009999, 0xCCCCCCCC, 0x312264A8, 
0x24000000, 0xCCCCAC68, 0x00800912, 0x82000040, 0x00888000, 0x0800C0A0, 0x00000000, 0x00004400, 
0x00000000, 0x00000000, 0x00060000, 0xCCABCCC9, 0xCC9CCCCC, 0x000000C0, 0xCCCC4800, 0xC9999999, 
0x00009999, 0xCBCCBCCC, 0x11114198, 0x47111111, 0x879A4842, 0x00000702, 0x0000C64C, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00040000, 0x00000000, 0xCCAB9AC9, 0xA9CCCCCC, 
0xB88B04C0, 0x73C8CCCC, 0xC9999999, 0x00009999, 0xCACCCCCC, 0x00004086, 0x13000000, 0xCCCC8A47, 
0x0000013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 
0x0000CA00, 0x999999B9, 0xC8CC8C99, 0xCCBC3700, 0x000051C9, 0xC8480000, 0x00000040, 0x5196BBAB, 
0x43121300, 0xCCCCBC57, 0x565685B8, 0x03000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCCCC9AB9, 0xCCCCCCCC, 0x990900C0, 0xA9CBCCBC, 
0xC8480000, 0x00000040, 0x99A9CCCC, 0x99999999, 0xCC9B9999, 0xAB99CACC, 0x0080031F, 0x00000020, 
0x00000000, 0xC0800800, 0x8C00800A, 0x02000000, 0x00004400, 0x00000000, 0x00000000, 0xCCCCBCC9, 
0xCABCBBBB, 0x999999C9, 0x99CBCC99, 0xC6CCCC0C, 0x97004633, 0xCCCCCCBC, 0x6597CCCC, 0x00000052, 
0x68020000, 0x0300013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20C00000, 0x0000CA00, 0x999999B9, 0xC8CC8C99, 0xCCBC3700, 0x000051C9, 0xC8480000, 0x00000040, 
0x5196BBAB, 0x43121300, 0xCCCCBC57, 0x565685B8, 0x12000111, 0x42000060, 0xC64A0A00, 0x0000000C, 
0x00000000, 0x000000A8, 0x00000020, 0x00000008, 0x00000000, 0xB99999B9, 0x99ABCCCC, 0x99999AC9, 
0x9999CCCC, 0xC9CCCB0C, 0x590140A8, 0x03000000, 0x68020062, 0xCC9BB9BB, 0x625553C9, 0x0000012D, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000A0000, 0x00000000, 0x00000000, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0x00000530, 0x80000060, 0x00800000, 0x00000000, 0x00000000, 0x00400040, 
0x08008228, 0x000000CA, 0x00400000, 0xCBBCAA88, 0xCCBCBA8A, 0xCBCBBBCB, 0xBBBBBBBB, 0xB5AACB0C, 
0x46400021, 0x00000000, 0x78030000, 0xCACCCCBC, 0x00000072, 0x0C00072F, 0x00000040, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x0C000000, 0x00000060, 0x00000000, 0xBCCCCCAC, 0x000020B8, 
0xC8CC8CC8, 0x88888888, 0xCCCCCCCC, 0xCCCCCCCC, 0x888888C8, 0x88888888, 0xCCCCCC89, 0x888899BB, 
0x10000917, 0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 0x00A00000, 0x00000000, 0x00000000, 
0x00000000, 0xCCBC99CB, 0x99AACCAC, 0xCC9C15C0, 0x8C64BACC, 0xC99999CA, 0x31379999, 0x774446C6, 
0xCCCC7986, 0x304842B9, 0x67370000, 0x00800912, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 
0x00004400, 0x00000000, 0x00000000, 0x00060000, 0xCCABCCC9, 0xCC9CCCCC, 0x333333C3, 0xCCCC6A33, 
0xC9999999, 0x33339999, 0xC9CCCCCC, 0x22113187, 0x67461111, 0xCC6A7655, 0x01000701, 0x0228C64C, 
0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0x9C9B99B9, 
0xCACCACAB, 0xBA3900C0, 0x99C9CCCC, 0xC8480000, 0x00000040, 0x99B9CCCC, 0x99999999, 0x99999999, 
0x9A999999, 0x0080031F, 0x00000020, 0x00000000, 0xC0800800, 0x8C00800A, 0x02000000, 0x00004400, 
0x00000000, 0x00000000, 0xCBCACCB9, 0xC99C999C, 0x999999C9, 0x99CCCCCC, 0xC8CCCC0C, 0x48000040, 
0xBC67A79B, 0x0041B6CC, 0x00000000, 0x56020000, 0x0300013B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 0xC8CC8C99, 0xCCBC3700, 
0x000051C9, 0xC8480000, 0x00000040, 0x64A8CCAC, 0x68341320, 0xCCCCCCAC, 0x5766A8CC, 0x0A000111, 
0x42000060, 0xC64A0A00, 0x0000000C, 0x00000000, 0x000000A8, 0x00000020, 0x00000008, 0x00000000, 
0x9C9999B9, 0xC9CCCCCC, 0xCA9B99C9, 0x9999CCCC, 0x95CCCB0C, 0x30001010, 0x00000000, 0x35440120, 
0xCCCCCCAC, 0x000051A7, 0x0000012D, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x000A0000, 0x00000000, 0x00000000, 0x8CC8CCBC, 0x333343C8, 0x8CCCCC08, 0x0030B787, 0xC8CBCC08, 
0x0000737B, 0x111184B9, 0x11111111, 0x77481111, 0xCACCAA98, 0x00000514, 0x00000060, 0x00000000, 
0x44C20400, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCACCCCBB, 0xA6263284, 
0xCCCC6802, 0x3037A6CC, 0xC8CCCC0C, 0xCAAC0040, 0x75CBCCAC, 0x75AA7787, 0xCC8A4622, 0x884664C8, 
0x06000530, 0x80000060, 0x44820000, 0x00000000, 0x00000000, 0x00400044, 0x08008268, 0x000000CA, 
0x00400000, 0xC88C04B0, 0xCCCC78CB, 0xCCACBA07, 0x0040C8CC, 0xB797C80C, 0x00000030, 0x00000000, 
0xBC270000, 0x9ACBCBBC, 0x00004185, 0x0A000917, 0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 
0x00A00000, 0x00000000, 0x00000000, 0x00000000, 0xCCA99CC9, 0x9999CBCC, 0x9C5504C0, 0x2396CCBC, 
0xCACC9B99, 0x00009999, 0x94CBCCCC, 0x76685522, 0x00000020, 0x25000000, 0x00800712, 0x82000040, 
0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0xC99B99C9, 
0xC9BC9CC9, 0x37847BC3, 0x628ACCBC, 0xC9999999, 0x00009999, 0xAA8B67C7, 0x7A974565, 0x877A23A5, 
0xBC8B78A8, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00220000, 0x999999B9, 0x9CB9CC9C, 0x990900C0, 0x99B9CCCC, 0xC8480000, 0x00000040, 
0x99B9CCCC, 0x99999999, 0x99999999, 0xBCBB9A99, 0x0080031F, 0x00000020, 0x00000000, 0xA0000000, 
0x6A004004, 0x02000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCBCCCC, 0xBBBBBBBB, 0xAAAAAACA, 
0xAAAAAAAA, 0xCCBBBBBB, 0xBBBBBBBB, 0xAAAACCAA, 0xAAAAAAAA, 0xAAAAAACA, 0xAAAAAAAA, 0x0300013B, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 
0x999999B9, 0xC8CC8C99, 0xCCBC3700, 0x000051C9, 0xC8480000, 0x00000040, 0x64A8CCAC, 0x68341320, 
0xCCCCCCAC, 0x5766A8CC, 0x1000063A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xC0000000, 0x0000C000, 0xCACCBC98, 0x97879976, 0xCCC9CCC8, 0x444454B9, 0xC7373333, 
0x33333354, 0x0163CBCC, 0x49011033, 0x0011A5CC, 0x8B230000, 0x0600083A, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0xA9AABABC, 0x77777777, 
0xCBBBBBCB, 0xBBBBBBBC, 0xCBBBBBBB, 0xBBBBBBBB, 0x0163CBCC, 0x49011033, 0x0011A5CC, 0x8B230000, 
0x0A000211, 0x00000060, 0xC0040400, 0x0000000C, 0x00000000, 0x00000042, 0x00000000, 0x00000002, 
0x00000000, 0x999999C9, 0xACCC9C99, 0xBC9999C9, 0x9999A9CC, 0xC7CCCB3C, 0x33333354, 0x11111121, 
0x8B251111, 0x7787CACC, 0x11415775, 0x0000012D, 0x20000060, 0x00200000, 0x00000420, 0x00000000, 
0x00000000, 0x204C2002, 0x00000000, 0x00000000, 0x99B9CCCC, 0x9C9999AA, 0xCCCCCCC8, 0x77777787, 
0xCBCCCCAC, 0xAAAAAAAA, 0x666676CB, 0x66666666, 0x68666666, 0xCC88ABBB, 0x12000943, 0x00000040, 
0x00000000, 0x0CC40C00, 0x000200C6, 0x22000000, 0x00006200, 0x00000000, 0x00000000, 0xCCCCACC9, 
0x9999B9CA, 0xCC6AC8C8, 0x8665CACC, 0xCCCC9999, 0x333399B9, 0xBACCBCCC, 0x568665C9, 0x11111194, 
0x79241111, 0x00000702, 0x0000C64C, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00040000, 0x00000000, 0xCCAB9AC9, 0xA9CCCCCC, 0xB88B04C0, 0x73C8CCCC, 0xC9999999, 0x00009999, 
0xCACCCCCC, 0x00004086, 0x13000000, 0xCCCC8A47, 0x0000013B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 0xC8CC8C99, 0xCCBC3700, 
0x000051C9, 0xC8480000, 0x00000040, 0x64A8CCAC, 0x68341320, 0xCCCCCCAC, 0x5766A8CC, 0x03000701, 
0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 
0xCCCCABC9, 0xB99999A9, 0xCC6A22C2, 0xB9BBCCCC, 0xC7373333, 0x33333354, 0xA999CBCC, 0x99999999, 
0x9C999999, 0xBB9999CC, 0x0300013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 0xC8CC8C99, 0xCCBC3700, 0x000051C9, 0xC8480000, 
0x00000040, 0x64A8CCAC, 0x68341320, 0xCCCCCCAC, 0x5766A8CC, 0x0000013A, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xA0000000, 0x0000A800, 0x36223294, 0x5586CAAC, 
0xCC4822C2, 0x222284CC, 0xC7272222, 0x22222243, 0x1173CBCC, 0x49011033, 0x1031A7CC, 0xCC8A3612, 
0x0A00010B, 0xC2000060, 0x20C20C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 
0x00A00000, 0x999999C9, 0xC9CCAC99, 0x9A9999C9, 0x99C9CCCC, 0xCC9C2522, 0x222242B6, 0x00000000, 
0x00000000, 0xCC8C1300, 0x0064A8CC, 0x0A000918, 0x00000020, 0x00000000, 0x0A000A00, 0x002882CA, 
0x02440000, 0x00202200, 0x00000002, 0x00000000, 0xCCCCACC9, 0x999999AC, 0x242222C2, 0x42C8CC8B, 
0xC9999999, 0x22229999, 0x84CACCCC, 0x00000000, 0x00000000, 0x79240000, 0x0600013A, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0x36223294, 
0x5586CAAC, 0xCC4822C2, 0x222284CC, 0xC7272222, 0x22222243, 0x0141CACC, 0x38000020, 0x00005398, 
0x9C460000, 0x0600053A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xC0000000, 0x0000C000, 0xCCBC6892, 0x444454B7, 0xCC6A23C2, 0x222284CC, 0xC7272222, 0x22222243, 
0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 0x0A00093A, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0x75A6CB9C, 0x22222233, 0xCC9825C2, 
0x2242C8CC, 0xC6161111, 0x11111132, 0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 0x00000702, 
0x0000C64C, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00040000, 0x00000000, 
0xCCAB9AC9, 0xA9CCCCCC, 0xB88B04C0, 0x73C8CCCC, 0xC9999999, 0x00009999, 0xCACCCCCC, 0x00004086, 
0x13000000, 0xCCCC8A47, 0x0000013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 0xC8CC8C99, 0xCCBC3700, 0x000051C9, 0xC8480000, 
0x00000040, 0x64A8CCAC, 0x68341320, 0xCCCCCCAC, 0x5766A8CC, 0x03000701, 0x0228C64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCCCC9BC9, 0x9999B9CC, 
0x992922C2, 0x999BCC9C, 0xC6161111, 0x11111132, 0x999999C9, 0x99999999, 0xCC9B9999, 0x9999CACC, 
0x0200013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 
0x0000CA00, 0x999999B9, 0xC8CC8C99, 0xCCBC3700, 0x000051C9, 0xC8480000, 0x00000040, 0x64A8CCAC, 
0x68341320, 0xCCCCCCAC, 0x5766A8CC, 0x00000F0B, 0xC2000060, 0x20C20C2A, 0x00000008, 0x00000000, 
0x00000044, 0x00460068, 0x00000064, 0x00A00000, 0xCCAC99C9, 0x9999C9CC, 0x9A9999C9, 0x9999CACC, 
0xCACC5901, 0x00005169, 0x00000000, 0x00000000, 0xCC8C0300, 0x0064A8CC, 0x12000913, 0x00000060, 
0x00000000, 0xAAA20C00, 0x2820228C, 0x66660000, 0x0046AA00, 0x00000064, 0x00000000, 0x9A9A99B9, 
0x99C9CC9C, 0xAB9999C9, 0x9999CCCC, 0xCBBC970A, 0x8C848C74, 0xAC671363, 0x5177CACC, 0x03000000, 
0x02000073, 0x0200013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20C00000, 0x0000CA00, 0x999999B9, 0xC8CC8C99, 0xCCBC3700, 0x000051C9, 0xC8480000, 0x00000040, 
0x64A8CCAC, 0x68341320, 0xCCCCCCAC, 0x5766A8CC, 0x1000053A, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0xCCCC88BC, 0x00516984, 0xCCCCCC08, 
0x737B78C8, 0xC8480000, 0x00000040, 0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 0x1000093A, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 
0x0020A6BC, 0x00000000, 0xCCBCCC08, 0x739BCBCC, 0xC8480000, 0x00000040, 0x0141CACC, 0x38000020, 
0x00005398, 0x9C460000, 0x0000013D, 0x88000060, 0x00200020, 0x00000000, 0x00000000, 0x00000600, 
0x00680002, 0x00020000, 0x000C0000, 0x372222B2, 0xA686CCBC, 0xCCBC37C0, 0x00626AC8, 0xCC7B3700, 
0x000084CC, 0x2284CBAC, 0x22222222, 0x22526A23, 0x25222222, 0x1200010A, 0xAC000060, 0x00A0C060, 
0x0000A000, 0x00000000, 0x000000AA, 0x00020000, 0x00000000, 0x002A0000, 0x999999C9, 0x9999CCCC, 
0xCC4800C0, 0x30B7CCBC, 0xC9999999, 0x00009999, 0x008398CC, 0x00000000, 0xAACC4A01, 0x88ABA9AC, 
0x00000702, 0x0000C64C, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00040000, 
0x00000000, 0xCCAB9AC9, 0xA9CCCCCC, 0xB88B04C0, 0x73C8CCCC, 0xC9999999, 0x00009999, 0xCACCCCCC, 
0x00004086, 0x13000000, 0xCCCC8A47, 0x0000013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 0xC8CC8C99, 0xCCBC3700, 0x000051C9, 
0xC8480000, 0x00000040, 0x64A8CCAC, 0x68341320, 0xCCCCCCAC, 0x5766A8CC, 0x04000701, 0x0228C64C, 
0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0x9CBB99B9, 
0x99C9CCCC, 0x990900C0, 0xA9CCCC9C, 0xC848A606, 0x00000040, 0x9999B9CC, 0x99999999, 0x99999999, 
0x9C999999, 0x0200013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20C00000, 0x0000CA00, 0xCCCCCCCC, 0x10114285, 0xCC8B56C2, 0x105297CB, 0xC0000000, 0x00000000, 
0x64A8CCCC, 0x79351220, 0xCCCCCCAC, 0x8C64A8CC, 0x1000053A, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0xCCCC88BC, 0x00516984, 0xCCCCCC08, 
0x737B78C8, 0xC8480000, 0x00000040, 0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 0x1000093A, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 
0x0020A6BC, 0x00000000, 0xCCBCCC08, 0x739BCBCC, 0xC8480000, 0x00000040, 0x0141CACC, 0x38000020, 
0x00005398, 0x9C460000, 0x00000F0B, 0xC2000060, 0x20C20C2A, 0x00000008, 0x00000000, 0x00000044, 
0x00460068, 0x00000064, 0x00A00000, 0xCCAC99C9, 0x9999C9CC, 0x9A9999C9, 0x9999CACC, 0xCACC5901, 
0x00005169, 0x00000000, 0x00000000, 0xCC8C0300, 0x0064A8CC, 0x12000913, 0x00000060, 0x00000000, 
0xAAA20C00, 0x2820228C, 0x66660000, 0x0046AA00, 0x00000064, 0x00000000, 0x9A9A99C9, 0x99C9CC9C, 
0xAB9999C9, 0x9999CCCC, 0xCBBC970A, 0x8C848C74, 0xAC671363, 0x5177CACC, 0x03000000, 0x02000073, 
0x0200013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 
0x0000CA00, 0x999999B9, 0xC8CC8C99, 0xCCBC3700, 0x000051C9, 0xC8480000, 0x00000040, 0x64A8CCAC, 
0x68341320, 0xCCCCCCAC, 0x5766A8CC, 0x0000013D, 0x88000060, 0x00200020, 0x00000000, 0x00000000, 
0x00000600, 0x00680002, 0x00020000, 0x000C0000, 0x372222C2, 0xA686CCBC, 0xCCBC37C0, 0x00626AC8, 
0xCC7B3700, 0x000084CC, 0x2284CBCC, 0x22222222, 0x22526A23, 0x25222222, 0x1200010A, 0xAC000060, 
0x00A0C060, 0x0000A000, 0x00000000, 0x000000AA, 0x00020000, 0x00000000, 0x002A0000, 0x999999C9, 
0x9999CCCC, 0xCC4800C0, 0x30B7CCBC, 0xC9999999, 0x00009999, 0x008398CC, 0x00000000, 0xAACC4A01, 
0x88ABA9AC, 0x00000702, 0x0000C64C, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00040000, 0x00000000, 0xCCAB9AC9, 0xA9CCCCCC, 0xB88B04C0, 0x73C8CCCC, 0xC9999999, 0x00009999, 
0xCACCCCCC, 0x00004086, 0x13000000, 0xCCCC8A47, 0x0000013B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 0xC8CC8C99, 0xCCBC3700, 
0x000051C9, 0xC8480000, 0x00000040, 0x64A8CCAC, 0x68341320, 0xCCCCCCAC, 0x5766A8CC, 0x04000701, 
0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 
0x9CBB99B9, 0x99C9CCCC, 0x990900C0, 0xA9CCCC9C, 0xC848A606, 0x00000040, 0x9999B9CC, 0x99999999, 
0x99999999, 0x9C999999, 0x0200013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20C00000, 0x0000CA00, 0xCCCCCCCC, 0x10114285, 0xCC8B56C2, 0x105297CB, 0xC0000000, 
0x00000000, 0x64A8CCCC, 0x79351220, 0xCCCCCCAC, 0x8C64A8CC, 0x1000053A, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0xCCCC88BC, 0x00516984, 
0xCCCCCC08, 0x737B78C8, 0xC8480000, 0x00000040, 0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 
0x1000093A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 
0x0000C000, 0x0020A6BC, 0x00000000, 0xCCBCCC08, 0x739BCBCC, 0xC8480000, 0x00000040, 0x0141CACC, 
0x38000020, 0x00005398, 0x9C460000, 0x00000F0B, 0xC2000060, 0x20C20C2A, 0x00000008, 0x00000000, 
0x00000044, 0x00460068, 0x00000064, 0x00A00000, 0xCCAC99C9, 0x9999C9CC, 0x9A9999C9, 0x9999CACC, 
0xCACC5901, 0x00005169, 0x00000000, 0x00000000, 0xCC8C0300, 0x0064A8CC, 0x12000913, 0x00000060, 
0x00000000, 0xAAA20C00, 0x2820228C, 0x66660000, 0x0046AA00, 0x00000064, 0x00000000, 0x9A9A99C9, 
0x99C9CC9C, 0xAB9999C9, 0x9999CCCC, 0xCBBC970A, 0x8C848C74, 0xAC671363, 0x5177CACC, 0x03000000, 
0x02000073, 0x0000013D, 0x88000060, 0x00200020, 0x00000000, 0x00000000, 0x00000600, 0x00680002, 
0x00020000, 0x000C0000, 0x372222C2, 0xA686CCBC, 0xCCBC37C0, 0x00626AC8, 0xCC7B3700, 0x000084CC, 
0x2284CBCC, 0x22222222, 0x22526A23, 0x25222222, 0x0200013B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 0xC8CC8C99, 0xCCBC3700, 
0x000051C9, 0xC8480000, 0x00000040, 0x64A8CCAC, 0x68341320, 0xCCCCCCAC, 0x5766A8CC, 0x1200010A, 
0xAC000060, 0x00A0C060, 0x0000A000, 0x00000000, 0x000000AA, 0x00020000, 0x00000000, 0x002A0000, 
0x999999C9, 0x9999CCCC, 0xCC4800C0, 0x30B7CCBC, 0xC9999999, 0x00009999, 0x008398CC, 0x00000000, 
0xAACC4A01, 0x88ABA9AC, 0x00000702, 0x0000C64C, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00040000, 0x00000000, 0xCCAB9AC9, 0xA9CCCCCC, 0xB88B04C0, 0x73C8CCCC, 0xC9999999, 
0x00009999, 0xCACCCCCC, 0x00004086, 0x13000000, 0xCCCC8A47, 0x0000013B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 0xC8CC8C99, 
0xCCBC3700, 0x000051C9, 0xC8480000, 0x00000040, 0x64A8CCAC, 0x68341320, 0xCCCCCCAC, 0x5766A8CC, 
0x04000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00220000, 0x9CBB99B9, 0x99C9CCCC, 0x990900C0, 0xA9CCCC9C, 0xC848A606, 0x00000040, 0x9999B9CC, 
0x99999999, 0x99999999, 0x9C999999, 0x0300013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 0xC8CC8C99, 0xCCBC3700, 0x000051C9, 
0xC8480000, 0x00000040, 0x64A8CCAC, 0x68341320, 0xCCCCCCAC, 0x5766A8CC, 0x1200010B, 0xC0000060, 
0x00C40C08, 0x00000008, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00400000, 0xBBBBBBCB, 
0xCBCCCCBC, 0x490200C0, 0x99C9CCBC, 0xCCCCCC0C, 0x00002094, 0x00000000, 0x00000000, 0xCCAB3600, 
0x002097CC, 0x0000092D, 0x82000060, 0x40840000, 0x00002A80, 0x00000006, 0x02000600, 0x80A88628, 
0x00000000, 0x00040000, 0x87CACCCC, 0x77777777, 0xCCCC8CC4, 0x33333384, 0xCCCC9A7B, 0x7777C7CC, 
0xCCBCA8CC, 0x22222295, 0x25222222, 0xCC9C6995, 0x10000946, 0x86000040, 0x0080C62C, 0xCCB08600, 
0x06000064, 0x00000000, 0x00000000, 0x200A0000, 0x00662000, 0xCCCCCCCC, 0x9999B9CC, 0x575901C0, 
0x95CACCBC, 0xC7CC5B00, 0x00000031, 0xCACCCCCC, 0xB9BB7984, 0x00000030, 0xBB8A0300, 0x00800912, 
0x82000040, 0x00888000, 0x0800C0A0, 0x00000080, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 
0xCCABCCC9, 0xCC9CCCCC, 0x333333C3, 0xCCCC6A33, 0xC7373333, 0x33333354, 0xC9CCCCCC, 0x22113187, 
0x67461111, 0xCC6A7655, 0x0E000F3A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xC0000000, 0x0000CA00, 0x36111191, 0x3374C9BC, 0xCC590100, 0x002084CC, 0xC6060000, 
0x00000031, 0x1184CCCC, 0x49011033, 0x1052A5CC, 0xCC8A3612, 0x0A000F3A, 0x00000020, 0x00000002, 
0x20000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0xCCCBBB97, 0x222232B6, 
0xCC7B0300, 0x003087CC, 0xC6666606, 0x00002063, 0x1194CCCC, 0x49011033, 0x1021A5CC, 0xCC8A3612, 
0x03000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00220000, 0xCCCCCCCB, 0xC9ABBACB, 0x250000C0, 0x62CACC9C, 0xC6060000, 0x00000031, 0x88BACCCC, 
0x49523375, 0x1011A5CC, 0xCC8A3612, 0x00242A0C, 0x09070708, 0x060B0808, 0x0A09030A, 0x00000000, 
0x01000101, 0x00000100, 0x00000501, 0x00000000, 0x42C74440, 0xC9C740C7, 0xC7C7C7CA, 0x00000000, 
0x78787878, 0x78787878, 0x78787878, 0x00000000, 0x56565656, 0x56565656, 0x56565656, 0x00000000, 
0x04000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 
0x0000CA00, 0x680400B0, 0xCACCCCAB, 0xCCCC9C05, 0x000084CC, 0xC8480000, 0x00000040, 0x64A8CC8C, 
0x68341220, 0xCCCCCCAC, 0x3764A8CC, 0x0C00050B, 0xC2000060, 0x20C20C2A, 0x00000008, 0x00000000, 
0x00000044, 0x00460068, 0x00000064, 0x00A00000, 0x999999B9, 0x9999A9CC, 0x999999C9, 0x99C9CC99, 
0xCACCCC0C, 0x42000062, 0x00000000, 0x00000000, 0xCC9C0300, 0x000041CA, 0x0000092D, 0x82000060, 
0x40840000, 0x00002A80, 0x00000006, 0x02000600, 0x80AC8628, 0x00000000, 0x00040000, 0x30B7CCBC, 
0x00000000, 0xC8CCBC07, 0x00000040, 0xC8CCCC08, 0x00000051, 0x000030C8, 0x00000000, 0x00000000, 
0xCCAC4901, 0x12000946, 0x20000040, 0x0020C00C, 0xCC202000, 0x00000000, 0x00000000, 0x00000000, 
0x00040000, 0x00000000, 0xCC9B99C9, 0x99B9CCCC, 0x480000C0, 0x20A6CCCC, 0xC9999999, 0x00009999, 
0xCCCCCCCC, 0x433464C8, 0x44641531, 0xCCCCAC68, 0x00800712, 0x82000040, 0x00888000, 0x0000C0A0, 
0x00000000, 0x00000400, 0x00000000, 0x00000000, 0x00060000, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBCB, 
0xBBBBBBBB, 0xCBBBBBBB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x1000053A, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 
0x580100B0, 0x0063CACC, 0xCC8C0400, 0x000084CC, 0xC8480000, 0x00000040, 0x0141CACC, 0x38000020, 
0x00005398, 0x9C460000, 0x1000073A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xC0000000, 0x0000C000, 0xCCCC48B0, 0x00001095, 0xCCAC2600, 0x000084CC, 0xC8480000, 
0x00000040, 0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 0x03000701, 0x0228C64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCC9C99B9, 0x99A9CCCC, 
0x990900C0, 0x99B9CCCC, 0xC8480000, 0x00000040, 0x99A9CCCC, 0x99999999, 0x99999999, 0x99999999, 
0x04000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 
0x0000CA00, 0x680400B0, 0xCACCCCAB, 0xCCCC9C05, 0x000084CC, 0xC8480000, 0x00000040, 0x64A8CC8C, 
0x68341220, 0xCCCCCCAC, 0x3764A8CC, 0x0C00050B, 0xC2000060, 0x20C20C2A, 0x00000008, 0x00000000, 
0x00000044, 0x00460068, 0x00000064, 0x00A00000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x0C000918, 0x00000020, 
0x00000000, 0x0A000A00, 0x002882CA, 0x02440000, 0x00202200, 0x00000002, 0x00000000, 0xBBBBBBCB, 
0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xCBBBBBBB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0x1000053A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xC0000000, 0x0000C000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 0x1000073A, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 0x1000093A, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0600000, 0x0000C000, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x0141CACC, 0x38000020, 
0x00005398, 0x9C460000, 0x04000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00220000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x07000716, 0x00000040, 0x00000000, 
0xC0C60A00, 0x0C000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCCACB9, 0xCCCCCCCC, 
0x999999C9, 0xC9CCCCBC, 0xC8BBCB0C, 0x6A735374, 0xCACCCCBC, 0x10653396, 0x00000000, 0x26002001, 
0x04000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 
0x0000CA00, 0x680400B0, 0xCACCCCAB, 0xCCBC3700, 0x000051C9, 0xC8480000, 0x00000040, 0x64A8CCAC, 
0x68341320, 0xCCCCCCAC, 0x576687A9, 0x1200050E, 0x00000060, 0xC6480A00, 0x0000004C, 0x00000000, 
0x000000A9, 0x00000000, 0x00000000, 0x00000000, 0x040000B0, 0xC8CCCCAC, 0xCCAC68C4, 0x0073CBCC, 
0x3095CC0C, 0x00000000, 0x00000000, 0x26000000, 0xCACCCC8C, 0x00000084, 0x0000072D, 0x82000060, 
0x40840000, 0x00002A80, 0x00000006, 0x02000600, 0x80A68628, 0x00000000, 0x00040000, 0xCACCCCB8, 
0x000020A6, 0x40C8CC08, 0x00000000, 0xC8CCCC08, 0x00000040, 0x00000051, 0x00000000, 0x55020000, 
0xCACCCC79, 0x10000917, 0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 0x00680000, 0x00000000, 
0x00000000, 0x00000000, 0xCCAC99C9, 0x9999CCCC, 0x480000C0, 0x1084CCCC, 0xC999A999, 0x00009999, 
0xCCCCCCCC, 0x2364A8CC, 0x00100023, 0xAB763514, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 
0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0x9A9999C9, 0xCA9ACC9B, 0x040000C0, 
0xC9CCCC88, 0xC9999999, 0x00009999, 0xBB88ABC9, 0x636543B7, 0x00002035, 0x7A020000, 0x01000701, 
0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 
0xAC9A99B9, 0xB9BBCCCC, 0x990900C0, 0x9999CCCC, 0xC8480000, 0x00000040, 0xCCCCCCCC, 0x9999A9CC, 
0xCCCCAC99, 0xCCCCCCCC, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20C00000, 0x0000CA00, 0x680400B0, 0xCACCCCAB, 0xCCCC9C05, 0x000084CC, 0xC8480000, 
0x00000040, 0x64A8CC8C, 0x68341220, 0xCCCCCCAC, 0x3764A8CC, 0x0000050B, 0xC2000060, 0x20C20C2A, 
0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00A00000, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0x12000913, 0x00000060, 0x00000000, 0xAAA20C00, 0x2820228C, 0x66660000, 0x0046AA00, 0x00000064, 
0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x680400B0, 0xCACCCCAB, 0xCCCC9C05, 0x000084CC, 
0xC8480000, 0x00000040, 0x64A8CC8C, 0x68341220, 0xCCCCCCAC, 0x3764A8CC, 0x1000073A, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x0141CACC, 0x38000020, 0x00005398, 
0x9C460000, 0x1000093A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xC0000000, 0x0000C000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 0x0000053D, 0x88000060, 0x00200020, 0x00000000, 
0x00000000, 0x00000600, 0x00680002, 0x00020000, 0x000C0000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x1200050A, 
0xAC000060, 0x00A0C060, 0x0000A000, 0x00000000, 0x000000AA, 0x00020000, 0x00000000, 0x002A0000, 
0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xCBBBBBBB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0x04000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00220000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x02000F3B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x680400B0, 0xCACCCCAB, 
0xCC8CC8C8, 0x111184CC, 0xC84811C1, 0x11111141, 0x64A9CC8C, 0x68341221, 0xCCCCCCAC, 0x3764A8CC, 
0x02000506, 0xCA000060, 0x22C2AB2A, 0x00008002, 0x00000000, 0x0000668A, 0x004600AA, 0x00000044, 
0x00880000, 0xCCCCCCBA, 0x999999AB, 0x999999C9, 0xC9CCCCAC, 0xC8CBCC0C, 0x20101540, 0x00002175, 
0x10130000, 0xAC796726, 0xCACCBCCC, 0x12000715, 0x00000060, 0x00000000, 0x00CC0000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x374600B0, 0xCCCCCC9C, 0xAB760300, 0x73CBCCCC, 
0x3384CA0C, 0x00000000, 0xCACCCC8C, 0x00517789, 0x00000000, 0x03000000, 0x02000F3B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x680400B0, 
0xCACCCCAB, 0xCC8C0400, 0x000040C8, 0xC8480000, 0x00000040, 0x97AACC9C, 0x68341220, 0xCCCCCCAC, 
0x5765A8CC, 0x1200050F, 0x00000060, 0xCC000000, 0x00000000, 0x00000000, 0x0000B000, 0x00000080, 
0x00000000, 0x00000000, 0x250000B0, 0xC8CCCC99, 0xCCAC66C2, 0x0084B8CC, 0xA666CA0C, 0x30000020, 
0x00020053, 0x14000000, 0x96CCCC7B, 0x12131065, 0x12000917, 0x00000040, 0x00000000, 0x0CC60A00, 
0x000000A6, 0x00A00000, 0x00000000, 0x00000000, 0x00000000, 0xACBB99C9, 0xB9CCCBCC, 0x480000C0, 
0x2086CCCC, 0xC99ABA99, 0x00009999, 0xCCCCCCCC, 0x002364A7, 0x35120000, 0xAB664534, 0x00800812, 
0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 
0xC99999CC, 0xACCCC9CC, 0xBBBBBBCB, 0xCCCCCCBC, 0xC99999C9, 0x44449999, 0xCCCCACCA, 0x5467A7AA, 
0xBA887A44, 0x4464AACB, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00220000, 0xAC9A99B9, 0xC9CCCCCC, 0x990900C0, 0x99A9CCBC, 0xC8480000, 
0x00000040, 0xCCCCCCCC, 0x9999A9CC, 0xCCCCAC99, 0xCCCCCCCC, 0x04000F3B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x680400B0, 0xCACCCCAB, 
0xCCCC9C05, 0x000084CC, 0xC8480000, 0x00000040, 0x64A8CC8C, 0x68341220, 0xCCCCCCAC, 0x3764A8CC, 
0x0600073A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 
0x0000C000, 0xCACCBC98, 0x97879976, 0xCC480000, 0x000084CC, 0xC8480000, 0x00000040, 0x4164CACC, 
0x7B020000, 0x000041C9, 0x5A010000, 0x1000083A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0x4186BABC, 0x00000000, 0xCC8C7403, 0x0042A6CC, 
0xC8480000, 0x00000040, 0x0083CCCC, 0x38000000, 0x001065A8, 0x4A010000, 0x0E000511, 0x42000060, 
0xC64A0A00, 0x0000000C, 0x00000000, 0x000000A8, 0x00000020, 0x00000008, 0x00000000, 0x999999B9, 
0x9BCACBCC, 0x999999C9, 0x99CBCC9C, 0xC8CCCC0C, 0x260030B7, 0x00000000, 0x26000020, 0xCCAC4864, 
0x410241CA, 0x0000052D, 0x00000060, 0x00000000, 0x00000000, 0x00000000, 0x00000500, 0x00580005, 
0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x0000082D, 0x00000060, 0x00000000, 0x00000000, 
0x00000000, 0x06000000, 0x006C0000, 0x00000000, 0x00000000, 0x1095CCBC, 0x00204648, 0xCCCCCC08, 
0x000040C8, 0xC8CCCC08, 0x00000040, 0x00004198, 0x00000000, 0x36000000, 0xCCCC9A44, 0x12000943, 
0x00000040, 0x00000000, 0x0CC40C00, 0x000200C6, 0x22000000, 0x00006200, 0x00000000, 0x00000000, 
0xBCCB99C9, 0xB99CCCCC, 0xCB9935C0, 0x84A6CCCC, 0xC99A9999, 0x00009999, 0xCAACAACA, 0xBAAC9BB9, 
0x21431194, 0x56773325, 0x03000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00220000, 0xB99B99B9, 0xBCACCCBC, 0x990902C0, 0x99C9CCAC, 0xC8787BC3, 
0x11111141, 0x9999CBBC, 0x99999999, 0x99999999, 0x99999999, 0x02000F3B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00900000, 0x00009400, 0x680400B0, 0xCACCCCAB, 
0xCCCCAC06, 0x109579CB, 0xC8480000, 0x00000040, 0x68A8CCCC, 0x8B558677, 0xCCCCCCBC, 0x5A64AACC, 
0x0080050B, 0x00000000, 0x00400A08, 0x00000008, 0x00000000, 0x00000200, 0x00400044, 0x00000000, 
0x00000000, 0xCCCC99B9, 0x999999A9, 0x999999C9, 0x99CACCCC, 0x84CCCC0C, 0x00000000, 0x00000000, 
0x00000000, 0x889A1400, 0x51CACCCC, 0x00800716, 0x00000040, 0x00000400, 0xC0C60800, 0x0C000006, 
0x02000000, 0x00000000, 0x00000000, 0x00000000, 0xCBCC9CB9, 0xA9CBCCCC, 0x999999C9, 0x99CCCCCC, 
0xB7CBCC0C, 0x04000030, 0x83C9CCBC, 0x00000000, 0x00000000, 0x5A010000, 0x02000F3B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x680400B0, 
0xCACCCCAB, 0xCCBC3700, 0x000073CB, 0xC8480000, 0x00000040, 0x64A8CC8C, 0x68341220, 0xCCCCCCAC, 
0x3764A8CC, 0x12000528, 0x82000080, 0x07800402, 0x00000000, 0x00000000, 0x00004464, 0x002000CB, 
0x0000000A, 0x00220000, 0xAA9999B9, 0x99CACCCC, 0xAB9999C9, 0x99CACCCC, 0x50A8CB0C, 0x00000000, 
0x00000000, 0x68241101, 0xCCCCCCAC, 0x0064A8CC, 0x0000072D, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x40060000, 0x00000000, 0x00000000, 0x9AAACCBC, 0x00000062, 0xCACCCC08, 
0x00000062, 0xC8CCB807, 0x00000040, 0x000030C9, 0x00000000, 0x00000000, 0xCC8C0300, 0x0A000917, 
0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 0x00A00000, 0x00000000, 0x00000000, 0x00000000, 
0xCCCCAAC9, 0xA9AACCCC, 0x480100C0, 0x41C8CCCC, 0xC9CCCC9B, 0x01139999, 0xCCCCCCCC, 0x8888A8CC, 
0x88888888, 0xAB888888, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 
0x00000000, 0x00000000, 0x00060000, 0xACAAA9C9, 0xCCCCCCCC, 0x593700C0, 0xB7CCCCCC, 0xC9999999, 
0x00009999, 0xCBCBCCCB, 0x005265B9, 0x66A97803, 0x99778868, 0x00000702, 0x0060C64C, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00040000, 0x00000000, 0xCCAB9AC9, 0xA9CCCCCC, 
0xBA8B04C0, 0x73C8CCCC, 0xC9999999, 0x00009999, 0xCACCCCCC, 0x00004086, 0x13000000, 0xCCCC8A47, 
0x00000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20B00000, 
0x00009800, 0x8C0400B0, 0xCACCCCCC, 0xCCCC9C05, 0x000084CC, 0xC8480000, 0x00000040, 0x64A8CC8C, 
0x68341220, 0xCCCCCCAC, 0x3764A8CC, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCC9999C9, 0xA9CCCCCC, 0x990900C0, 0x99C9CCCC, 
0xC848620A, 0x00000040, 0xCCCCCCCC, 0x9999A9CC, 0xCCCCAC99, 0xCCCCCCCC, 0x0080080B, 0xC0000060, 
0x00C00C04, 0x00000004, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00400000, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0x1200091E, 0x00000060, 0x00000000, 0x00000000, 0xCA60AC00, 0x00AA0000, 0x00000000, 
0x00000000, 0x00000000, 0xC99C99B9, 0x9999C9CC, 0x999999C9, 0x999CCCCC, 0x00000000, 0x0084CC48, 
0x01000000, 0xCCCC4943, 0x000051CA, 0x00000000, 0x04000F3B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x680400B0, 0xCACCCCAB, 0xCCCC9C05, 
0x000084CC, 0xC8480000, 0x00000040, 0x64A8CC8C, 0x68341220, 0xCCCCCCAC, 0x3764A8CC, 0x12000508, 
0x2C000060, 0x000040C8, 0x00000000, 0x00000000, 0x00000200, 0x00000000, 0x00000000, 0x00220000, 
0xCC8804B0, 0x003085CC, 0xABCCCC08, 0x0030A7A8, 0x59010000, 0x8A84CC8C, 0x00000030, 0x00000000, 
0xCCAA1500, 0x98C9CCCC, 0x12000726, 0x00000080, 0x00000000, 0x40200600, 0x04AC6886, 0xCA000000, 
0x00A88406, 0x00000000, 0x00000000, 0x99A9B9C9, 0xA99CCCCC, 0x444800C0, 0x73B7CC8C, 0xC999999A, 
0x00009999, 0x20A6CBCC, 0x00000000, 0x00004102, 0x4A010000, 0x04000701, 0x0228C64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0x999999B9, 0xC9CBCCCC, 
0x990900C0, 0x9999CC9C, 0xC8480000, 0x00000040, 0x99999999, 0x99999999, 0x99B9CC9A, 0x99999999, 
0x0080071F, 0x00000020, 0x00000000, 0xC0000800, 0x8C00800A, 0x02000000, 0x00004400, 0x00000000, 
0x00000000, 0x9B999CB9, 0xC9CCCCCC, 0x999999C9, 0xCBCCCC9B, 0xC9C8CCCC, 0x8C343353, 0xCCCBCCBC, 
0x004185B9, 0x00000000, 0x5A010000, 0x04000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x680400B0, 0xCACCCCAB, 0xCC9C1500, 0x000062CA, 
0xC8480000, 0x00000040, 0x97A9CC9C, 0x69345265, 0xCCCCCCAC, 0x3764A8CC, 0x12000511, 0x42000060, 
0xC64A0900, 0x0000000C, 0x00000000, 0x000000A8, 0x00000020, 0x00000008, 0x00000000, 0x99A999B9, 
0xCCCCCACC, 0xCCA999C9, 0x99CCCCCC, 0x8469CA0C, 0x01000000, 0x00020000, 0xCC7B6515, 0x96CCBCCC, 
0x00004232, 0x0000072D, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x400A0000, 
0x00000000, 0x00000000, 0xCCB8CCBC, 0x000040C8, 0xC8CCCC08, 0x000051A9, 0xC8CCCC08, 0x00000040, 
0x620310A5, 0x00000000, 0x15000000, 0xCCACCB9A, 0x00000714, 0x00000060, 0x00000000, 0x44820400, 
0x00000000, 0x00700000, 0x00000000, 0x00000000, 0x00000000, 0x7B48C8B8, 0xC8CC8CC8, 0xBC3722C2, 
0x849CC8CC, 0xC8CBCCCC, 0x11111141, 0x56A6BACC, 0x2252AA56, 0x23222222, 0x5A222253, 0x08000730, 
0x60000060, 0x64520000, 0x00000000, 0x00000000, 0x00700074, 0x0C008226, 0x000000BA, 0x00400000, 
0x8AB7C8B8, 0x8CB8CCCC, 0x7B3333C3, 0x3387CCCC, 0xC878C8CC, 0x222242C8, 0x225333A6, 0x43978A47, 
0x89CABA5A, 0x879A76CB, 0x0000072D, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x400A0000, 0x00000000, 0x00000000, 0xCCCCCCBA, 0x00109586, 0xCC8CCC08, 0x00000084, 0xC8CCCC08, 
0x00000040, 0x730330B8, 0x00000000, 0x13000000, 0xCBCC5A22, 0x0A000917, 0x00000040, 0x00000000, 
0x0CC60A00, 0x000000A6, 0x00A00000, 0x00000000, 0x00000000, 0x00000000, 0x9CBC99C9, 0xC9CBCABC, 
0x8A0400C0, 0x0084CCCC, 0xC9999B9C, 0x04039999, 0xCACCCCCB, 0x00305388, 0x10440100, 0x9B351300, 
0x00800712, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 
0x00060000, 0x9BA9A9B9, 0x9CC9ACCC, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xCCCBCCCB, 
0xBBBBBBCB, 0xBBBBBBBB, 0xBCBBBBBB, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00220000, 0x9B9999B9, 0xB9CCCCCC, 0x996902C0, 0x9999CCCC, 
0xC8480000, 0x00000040, 0xCCCCCCCC, 0x9999A9CC, 0xCCCCAC99, 0xCCCCCCCC, 0x08000F3B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x680400B0, 
0xCACCCCAB, 0xCCCC9C05, 0x000084CC, 0xC8480000, 0x00000040, 0x64A8CC8C, 0x68341220, 0xCCCCCCAC, 
0x3764A8CC, 0x12000529, 0x60000080, 0x00800000, 0x00000000, 0x00000000, 0x00000040, 0x0000008C, 
0x0000000A, 0x00000000, 0xBB9999B9, 0xCBCCCCCC, 0x8B5623C0, 0x31B7CCCC, 0xA9A9CB9C, 0x40C89999, 
0x30022153, 0x79360000, 0xCCCC9B89, 0x54A8B9BB, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBCB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x07000716, 
0x00000040, 0x00000000, 0xC0C60A00, 0x0C000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 
0x9CCCACB9, 0xB9CACCCC, 0x999999C9, 0x99CCCCBC, 0xC8ABCC0C, 0x21004240, 0xCACCCCBC, 0x00312265, 
0x00000000, 0x36001013, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20C00000, 0x0000CA00, 0x680400B0, 0xCACCCCAB, 0xCCBC6702, 0x002066CA, 0xC8480000, 
0x00000040, 0x74A9CCBC, 0x68341220, 0xCCCCCCAC, 0x3764A8CC, 0x1200050E, 0x00000060, 0xC6480A00, 
0x0000004C, 0x00000000, 0x000000A9, 0x00000000, 0x00000000, 0x00000000, 0x040000B0, 0xC8CCCCAC, 
0xCCAC68C4, 0x0073CBCC, 0x1095CC0C, 0x00000000, 0x00000000, 0x26000000, 0xCACCCC8C, 0x00000084, 
0x0000072D, 0x82000060, 0x40840000, 0x00002A80, 0x00000006, 0x02000600, 0x80A68628, 0x00000000, 
0x00040000, 0xCCCCCCBB, 0xBBBBBBBB, 0xCBBBCCCB, 0xBBBBBBBB, 0xCBCCBCCB, 0xBBBBBBBB, 0xBBBBBBCB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCCBB, 0x10000917, 0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 
0x00680000, 0x00000000, 0x00000000, 0x00000000, 0xCCAC99C9, 0x9999CCCC, 0x482600C0, 0x62A6CCCC, 
0xC9C99A99, 0x20269999, 0xCCCCCCCC, 0x2364A8CC, 0x00000023, 0x8B763414, 0x00800812, 0x82000040, 
0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0xBBBBBBCB, 
0xBBBBBBBB, 0xBBBBCBCB, 0xCCCCCCBC, 0xCBBBBBCB, 0xBBBBBBBB, 0xCCBCCBCB, 0xBBBBBBCC, 0xCBBBBBBB, 
0xBCBBBBBB, 0x00000702, 0x0060C64C, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00040000, 0x00000000, 0xCCAB9AC9, 0xA9CCCCCC, 0xB88B04C0, 0x73C8CCCC, 0xC9999999, 0x00009999, 
0xCACCCCCC, 0x00004086, 0x13000000, 0xCCCC8A47, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00B00000, 0x00009600, 0x8C0400B0, 0xCACCCCCC, 0xCCCC9C05, 
0x000084CC, 0xC8480000, 0x00000040, 0x64A8CC8C, 0x68341220, 0xCCCCCCAC, 0x3764A8CC, 0x01000701, 
0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 
0xBA9999C9, 0x999ABCCC, 0x990900C0, 0x9999CCCC, 0xC8480000, 0x00000040, 0xCCCCCCCC, 0x9999A9CC, 
0xCCCCAC99, 0xCCCCCCCC, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20C00000, 0x0000CA00, 0x680400B0, 0xCACCCCAB, 0xCC8CC8C8, 0x111184CC, 0xC84811C1, 
0x11111141, 0x64A9CC8C, 0x68341221, 0xCCCCCCAC, 0x3764A8CC, 0x02000506, 0xCA000060, 0x22C2AB2A, 
0x00008002, 0x00000000, 0x0000668A, 0x004600AA, 0x00000044, 0x00880000, 0xCCCCCCBA, 0x999999AB, 
0x999999C9, 0xC9CCCCAC, 0xC8CBCC0C, 0x20101540, 0x00002175, 0x10130000, 0xAC796726, 0xCACCBCCC, 
0x12000715, 0x00000060, 0x00000000, 0x00CC0000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x374600B0, 0xCCCCCC9C, 0xAB760300, 0x73CBCCCC, 0x3384CA0C, 0x00000000, 0xCACCCC8C, 
0x00517789, 0x00000000, 0x03000000, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x680400B0, 0xCACCCCAB, 0xCC8C0400, 0x000040C8, 
0xC8480000, 0x00000040, 0x97AACC9C, 0x68341220, 0xCCCCCCAC, 0x5765A8CC, 0x1200050F, 0x00000060, 
0xCC000000, 0x00000000, 0x00000000, 0x0000B000, 0x00000080, 0x00000000, 0x00000000, 0x250000B0, 
0xC8CCCC99, 0xCCAC66C2, 0x0084B8CC, 0xA666CA0C, 0x30000020, 0x00020053, 0x14000000, 0x96CCCC7B, 
0x12131065, 0x12000917, 0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 0x00A00000, 0x00000000, 
0x00000000, 0x00000000, 0xACBB99C9, 0xB9CCCBCC, 0x480000C0, 0x2086CCCC, 0xC99ABA99, 0x00009999, 
0xCCCCCCCC, 0x002364A7, 0x35020000, 0x8B254534, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 
0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0xC99999CC, 0xACCCC9CC, 0xBBBBBBCB, 
0xCCCCCCBC, 0xC99999C9, 0x44449999, 0xCCCCACCA, 0x5467A7AA, 0xBA887A44, 0x4464AACB, 0x00000702, 
0x0060C64C, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00040000, 0x00000000, 
0xCCAB9AC9, 0xA9CCCCCC, 0xB88B04C0, 0x73C8CCCC, 0xC9999999, 0x00009999, 0xCACCCCCC, 0x00004086, 
0x13000000, 0xCCCC8A47, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00B00000, 0x00009600, 0x8C0400B0, 0xCACCCCCC, 0xCCCC9C05, 0x000084CC, 0xC8480000, 
0x00000040, 0x64A8CC8C, 0x68341220, 0xCCCCCCAC, 0x3764A8CC, 0x01000701, 0x0228C64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xBA9999C9, 0x999ABCCC, 
0x990900C0, 0x9999CCCC, 0xC8480000, 0x00000040, 0xCCCCCCCC, 0x9999A9CC, 0xCCCCAC99, 0xCCCCCCCC, 
0x00FF080A, 0x09090A0B, 0x0B0B0A0A, 0x0000080B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x46464047, 0x42424440, 0x00004042, 0x00000000, 0xBDBDBDBD, 0xBDBDBDBD, 0x0000BDBD, 
0x00000000, 0xAEAE8EAE, 0x8E8E8E8E, 0x00008E8E, 0x00000000, 0x0300013B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 0xCCCCAC99, 
0xCCCC5901, 0x000040C8, 0xC8480000, 0x00000040, 0x0062CACC, 0xCCBC0800, 0x0100C3CC, 0xCC8C2731, 
0x0080010B, 0xC2000060, 0x22C20C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 
0x00A00000, 0xCCCCCCCC, 0x99999ACB, 0x999999C9, 0x99CBCC99, 0xCCCCCC0C, 0x000090BA, 0x00002096, 
0x39000000, 0xCCCCCCBB, 0x99ABCCCC, 0x0A000F31, 0x40000060, 0x00400000, 0x60460000, 0x00000000, 
0x00800080, 0x0000B002, 0x000000AC, 0x00400000, 0xCCABCABB, 0xBC9CCBCC, 0x999999C9, 0xCCCCCBAA, 
0xC8CCCB0C, 0x37000340, 0x9999CBAC, 0xCC8987A8, 0x00002086, 0x14000000, 0x04000F0E, 0x00000060, 
0xC80A0000, 0x000000AC, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x222222B2, 
0xCC8C3437, 0xCCCCCCC8, 0x22222284, 0x1195C8CC, 0x11111111, 0x22222222, 0x24222222, 0x87CBCC9C, 
0x22222232, 0x0000012D, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000A0000, 
0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x00000514, 0x00000060, 0x00000000, 0x44C20400, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xB9CAAC8A, 0x74885742, 0xCCCC7BC3, 
0x0063C8CB, 0xC6CCCC0C, 0x00000031, 0xA5CCCCAC, 0x35230010, 0x54676586, 0x14000052, 0x0C000530, 
0x80000060, 0x44820000, 0x00000000, 0x00000000, 0x00400044, 0x08008228, 0x000000CA, 0x00400000, 
0x594800B0, 0xCCBCB888, 0xCC9C5901, 0x0084CCCC, 0x48A6B90C, 0x00000040, 0x00001013, 0xCC5A2313, 
0x72C9CCCC, 0x00000000, 0x0000082D, 0x00000060, 0x00000000, 0x00000000, 0x00000000, 0x06000000, 
0x006A0000, 0x00000000, 0x00000000, 0xBBCCCC9C, 0x000040C8, 0x62CACCC8, 0x00000000, 0xC8CCCC58, 
0x55555565, 0x006255B7, 0x00000000, 0x5A010000, 0xCCCCCCCC, 0x0E000917, 0x00000040, 0x00000000, 
0x0CC60A00, 0x000000A6, 0x00A00000, 0x00000000, 0x00000000, 0x00000000, 0xAC9B99C9, 0xA9A9C9CC, 
0x7A0300C0, 0x3784CCCC, 0xC99ACC9C, 0x00009999, 0x93CBCBCC, 0x00000000, 0x00000000, 0x27000000, 
0x00000912, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000040, 0x00000002, 
0x00060000, 0xBC9999C9, 0xC999CBCC, 0xBCCC68C6, 0xBACCCC9C, 0xCACCCC9C, 0x88889999, 0x88A889C8, 
0x88888888, 0xCCCC9C88, 0x888888C9, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00220000, 0x999A99B9, 0xA9C9CAAC, 0x990900C0, 0x9999CCBC, 
0xC8480000, 0x00000040, 0x9999B9CC, 0x99999999, 0x99999999, 0xCC9A9999, 0x0300013B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 
0xCCCCAC99, 0xCCCC5901, 0x000040C8, 0xC8480000, 0x00000040, 0x0062CACC, 0xCCBC0800, 0x0100C3CC, 
0xCC8C2731, 0x0E000F3A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xC0000000, 0x0000C000, 0x480000B0, 0x0053C9CC, 0xCC590100, 0x000084CC, 0xC8480000, 0x00000040, 
0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 0x0E000F3A, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0xCCBC48B0, 0x00003095, 0xCCBC3700, 
0x004096CC, 0xC8480000, 0x00000040, 0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 0x1200010B, 
0xC0000060, 0x00C00C04, 0x00000002, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00400000, 
0x999999B9, 0x99A9CAAC, 0x999999C9, 0x9999C9CC, 0xCCCCCC0C, 0x00003087, 0x00000000, 0x00000000, 
0xCC8C0300, 0x0064A8CC, 0x0000092D, 0x82000060, 0x40840000, 0x00002A80, 0x00000006, 0x02000600, 
0x80AC8628, 0x00000000, 0x00040000, 0x40C8CCBC, 0x00000000, 0xCACC8C04, 0x00000060, 0xCCCCCC08, 
0x000097BA, 0xCACCCCCC, 0x00000086, 0x00000000, 0xCCAC9B38, 0x10000946, 0x88000040, 0x0080C62C, 
0xCC808600, 0x06000064, 0x00000000, 0x00000000, 0x200A0000, 0x00662000, 0xCCCC9CC9, 0x9999CBCC, 
0x470200C0, 0x42C8CCBC, 0xC9CC9999, 0x00009999, 0xCCCCCCCC, 0x312264A8, 0x24000000, 0xCCCCAC68, 
0x00800912, 0x82000040, 0x00888000, 0x0800C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 
0x00060000, 0xCCABCCC9, 0xCC9CCCCC, 0x000000C0, 0xCCCC4800, 0xC9999999, 0x00009999, 0xCBCCBCCC, 
0x11114198, 0x47111111, 0x879A4842, 0x00000702, 0x0000C64C, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00040000, 0x00000000, 0xCCAB9AC9, 0xA9CCCCCC, 0xB88B04C0, 0x73C8CCCC, 
0xC9999999, 0x00009999, 0xCACCCCCC, 0x00004086, 0x13000000, 0xCCCC8A47, 0x0000013B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 
0xCCCCAC99, 0xCCCC5901, 0x000040C8, 0xC8480000, 0x00000040, 0x0062CACC, 0xCCBC0800, 0x0100C3CC, 
0xCC8C2731, 0x03000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00220000, 0xCCCC9AB9, 0xCCCCCCCC, 0x990900C0, 0xA9CBCCBC, 0xC8480000, 0x00000040, 
0x99A9CCCC, 0x99999999, 0xCC9B9999, 0xAB99CACC, 0x0080031F, 0x00000020, 0x00000000, 0xC0800800, 
0x8C00800A, 0x02000000, 0x00004400, 0x00000000, 0x00000000, 0xCCCCBCC9, 0xCABCBBBB, 0x999999C9, 
0x99CBCC99, 0xC6CCCC0C, 0x97004633, 0xCCCCCCBC, 0x6597CCCC, 0x00000052, 0x68020000, 0x0300013B, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 
0x999999B9, 0xCCCCAC99, 0xCCCC5901, 0x000040C8, 0xC8480000, 0x00000040, 0x0062CACC, 0xCCBC0800, 
0x0100C3CC, 0xCC8C2731, 0x12000111, 0x42000060, 0xC64A0A00, 0x0000000C, 0x00000000, 0x000000A8, 
0x00000020, 0x00000008, 0x00000000, 0xB99999B9, 0x99ABCCCC, 0x99999AC9, 0x9999CCCC, 0xC9CCCB0C, 
0x590140A8, 0x03000000, 0x68020062, 0xCC9BB9BB, 0x625553C9, 0x0000012D, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x000A0000, 0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0x00000530, 0x80000060, 0x00800000, 0x00000000, 0x00000000, 0x00400040, 0x08008228, 0x000000CA, 
0x00400000, 0xCBBCAA88, 0xCCBCBA8A, 0xCBCBBBCB, 0xBBBBBBBB, 0xB5AACB0C, 0x46400021, 0x00000000, 
0x78030000, 0xCACCCCBC, 0x00000072, 0x0C00072F, 0x00000040, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x0C000000, 0x00000060, 0x00000000, 0xBCCCCCAC, 0x000020B8, 0xC8CC8CC8, 0x88888888, 
0xCCCCCCCC, 0xCCCCCCCC, 0x888888C8, 0x88888888, 0xCCCCCC89, 0x888899BB, 0x10000917, 0x00000040, 
0x00000000, 0x0CC60A00, 0x000000A6, 0x00A00000, 0x00000000, 0x00000000, 0x00000000, 0xCCBC99CB, 
0x99AACCAC, 0xCC9C15C0, 0x8C64BACC, 0xC99999CA, 0x31379999, 0x774446C6, 0xCCCC7986, 0x304842B9, 
0x67370000, 0x00800912, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 
0x00000000, 0x00060000, 0xCCABCCC9, 0xCC9CCCCC, 0x333333C3, 0xCCCC6A33, 0xC9999999, 0x33339999, 
0xC9CCCCCC, 0x22113187, 0x67461111, 0xCC6A7655, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0x9C9B99B9, 0xCACCACAB, 0xBA3900C0, 
0x99C9CCCC, 0xC8480000, 0x00000040, 0x99B9CCCC, 0x99999999, 0x99999999, 0x9A999999, 0x0080031F, 
0x00000020, 0x00000000, 0xC0800800, 0x8C00800A, 0x02000000, 0x00004400, 0x00000000, 0x00000000, 
0xCBCACCB9, 0xC99C999C, 0x999999C9, 0x99CCCCCC, 0xC8CCCC0C, 0x48000040, 0xBC67A79B, 0x0041B6CC, 
0x00000000, 0x56020000, 0x0300013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 0xCCCCAC99, 0xCCCC5901, 0x000040C8, 0xC8480000, 
0x00000040, 0x0062CACC, 0xCCBC0800, 0x0100C3CC, 0xCC8C2731, 0x0A000111, 0x42000060, 0xC64A0A00, 
0x0000000C, 0x00000000, 0x000000A8, 0x00000020, 0x00000008, 0x00000000, 0x9C9999B9, 0xC9CCCCCC, 
0xCA9B99C9, 0x9999CCCC, 0x95CCCB0C, 0x30001010, 0x00000000, 0x35440120, 0xCCCCCCAC, 0x000051A7, 
0x0000012D, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000A0000, 0x00000000, 
0x00000000, 0x8CC8CCBC, 0x333343C8, 0x8CCCCC08, 0x0030B787, 0xC8CBCC08, 0x0000737B, 0x111184B9, 
0x11111111, 0x77481111, 0xCACCAA98, 0x00000514, 0x00000060, 0x00000000, 0x44C20400, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCACCCCBB, 0xA6263284, 0xCCCC6802, 0x3037A6CC, 
0xC8CCCC0C, 0xCAAC0040, 0x75CBCCAC, 0x75AA7787, 0xCC8A4622, 0x884664C8, 0x06000530, 0x80000060, 
0x44820000, 0x00000000, 0x00000000, 0x00400044, 0x08008268, 0x000000CA, 0x00400000, 0xC88C04B0, 
0xCCCC78CB, 0xCCACBA07, 0x0040C8CC, 0xB797C80C, 0x00000030, 0x00000000, 0xBC270000, 0x9ACBCBBC, 
0x00004185, 0x0A000917, 0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 0x00A00000, 0x00000000, 
0x00000000, 0x00000000, 0xCCA99CC9, 0x9999CBCC, 0x9C5504C0, 0x2396CCBC, 0xCACC9B99, 0x00009999, 
0x94CBCCCC, 0x76685522, 0x00000020, 0x25000000, 0x00800712, 0x82000040, 0x00888000, 0x0000C0A0, 
0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0xC99B99C9, 0xC9BC9CC9, 0x37847BC3, 
0x628ACCBC, 0xC9999999, 0x00009999, 0xAA8B67C7, 0x7A974565, 0x877A23A5, 0xBC8B78A8, 0x01000701, 
0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 
0x999999B9, 0x9CB9CC9C, 0x990900C0, 0x99B9CCCC, 0xC8480000, 0x00000040, 0x99B9CCCC, 0x99999999, 
0x99999999, 0xBCBB9A99, 0x0080031F, 0x00000020, 0x00000000, 0xA0000000, 0x6A004004, 0x02000000, 
0x00000000, 0x00000000, 0x00000000, 0xCCCBCCCC, 0xBBBBBBBB, 0xAAAAAACA, 0xAAAAAAAA, 0xCCBBBBBB, 
0xBBBBBBBB, 0xAAAACCAA, 0xAAAAAAAA, 0xAAAAAACA, 0xAAAAAAAA, 0x0300013B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 0xCCCCAC99, 
0xCCCC5901, 0x000040C8, 0xC8480000, 0x00000040, 0x0062CACC, 0xCCBC0800, 0x0100C3CC, 0xCC8C2731, 
0x1000063A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 
0x0000C000, 0xCACCBC98, 0x97879976, 0xCCC9CCC8, 0x444454B9, 0xC7373333, 0x33333354, 0x0163CBCC, 
0x49011033, 0x0011A5CC, 0x8B230000, 0x0600083A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0xA9AABABC, 0x77777777, 0xCBBBBBCB, 0xBBBBBBBC, 
0xCBBBBBBB, 0xBBBBBBBB, 0x0163CBCC, 0x49011033, 0x0011A5CC, 0x8B230000, 0x0A000211, 0x00000060, 
0xC0040400, 0x0000000C, 0x00000000, 0x00000042, 0x00000000, 0x00000002, 0x00000000, 0x999999C9, 
0xACCC9C99, 0xBC9999C9, 0x9999A9CC, 0xC7CCCB3C, 0x33333354, 0x11111121, 0x8B251111, 0x7787CACC, 
0x11415775, 0x0000012D, 0x20000060, 0x00200000, 0x00000420, 0x00000000, 0x00000000, 0x204C2002, 
0x00000000, 0x00000000, 0x99B9CCCC, 0x9C9999AA, 0xCCCCCCC8, 0x77777787, 0xCBCCCCAC, 0xAAAAAAAA, 
0x666676CB, 0x66666666, 0x68666666, 0xCC88ABBB, 0x12000943, 0x00000040, 0x00000000, 0x0CC40C00, 
0x000200C6, 0x22000000, 0x00006200, 0x00000000, 0x00000000, 0xCCCCACC9, 0x9999B9CA, 0xCC6AC8C8, 
0x8665CACC, 0xCCCC9999, 0x333399B9, 0xBACCBCCC, 0x568665C9, 0x11111194, 0x79241111, 0x00000702, 
0x0000C64C, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00040000, 0x00000000, 
0xCCAB9AC9, 0xA9CCCCCC, 0xB88B04C0, 0x73C8CCCC, 0xC9999999, 0x00009999, 0xCACCCCCC, 0x00004086, 
0x13000000, 0xCCCC8A47, 0x0000013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 0xCCCCAC99, 0xCCCC5901, 0x000040C8, 0xC8480000, 
0x00000040, 0x0062CACC, 0xCCBC0800, 0x0100C3CC, 0xCC8C2731, 0x03000701, 0x0228C64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCCCCABC9, 0xB99999A9, 
0xCC6A22C2, 0xB9BBCCCC, 0xC7373333, 0x33333354, 0xA999CBCC, 0x99999999, 0x9C999999, 0xBB9999CC, 
0x0300013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 
0x0000CA00, 0x999999B9, 0xCCCCAC99, 0xCCCC5901, 0x000040C8, 0xC8480000, 0x00000040, 0x0062CACC, 
0xCCBC0800, 0x0100C3CC, 0xCC8C2731, 0x0600013A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0x36223294, 0x5586CAAC, 0xCC4822C2, 0x222284CC, 
0xC7272222, 0x22222243, 0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 0x0A00010B, 0xC2000060, 
0x20C20C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00A00000, 0x999999C9, 
0xC9CCAC99, 0x9A9999C9, 0x99C9CCCC, 0xCC9C2522, 0x222242B6, 0x00000000, 0x00000000, 0xCC8C1300, 
0x0064A8CC, 0x0A000918, 0x00000020, 0x00000000, 0x0A000A00, 0x002882CA, 0x02440000, 0x00202200, 
0x00000002, 0x00000000, 0xCCCCACC9, 0x999999AC, 0x242222C2, 0x42C8CC8B, 0xC9999999, 0x22229999, 
0x84CACCCC, 0x00000000, 0x00000000, 0x79240000, 0x0600013A, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0x36223294, 0x5586CAAC, 0xCC4822C2, 
0x222284CC, 0xC7272222, 0x22222243, 0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 0x0600053A, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 
0xCCBC6892, 0x444454B7, 0xCC6A23C2, 0x222284CC, 0xC7272222, 0x22222243, 0x0141CACC, 0x38000020, 
0x00005398, 0x9C460000, 0x0A00093A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xC0000000, 0x0000C000, 0x75A6CB9C, 0x22222233, 0xCC9825C2, 0x2242C8CC, 0xC6161111, 
0x11111132, 0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 0x00000702, 0x0000C64C, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00040000, 0x00000000, 0xCCAB9AC9, 0xA9CCCCCC, 
0xB88B04C0, 0x73C8CCCC, 0xC9999999, 0x00009999, 0xCACCCCCC, 0x00004086, 0x13000000, 0xCCCC8A47, 
0x0000013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 
0x0000CA00, 0x999999B9, 0xCCCCAC99, 0xCCCC5901, 0x000040C8, 0xC8480000, 0x00000040, 0x0062CACC, 
0xCCBC0800, 0x0100C3CC, 0xCC8C2731, 0x03000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCCCC9BC9, 0x9999B9CC, 0x992922C2, 0x999BCC9C, 
0xC6161111, 0x11111132, 0x999999C9, 0x99999999, 0xCC9B9999, 0x9999CACC, 0x0200013B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 
0xCCCCAC99, 0xCCCC5901, 0x000040C8, 0xC8480000, 0x00000040, 0x0062CACC, 0xCCBC0800, 0x0100C3CC, 
0xCC8C2731, 0x00000F0B, 0xC2000060, 0x20C20C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 
0x00000064, 0x00A00000, 0xCCAC99C9, 0x9999C9CC, 0x9A9999C9, 0x9999CACC, 0xCACC5901, 0x00005169, 
0x00000000, 0x00000000, 0xCC8C0300, 0x0064A8CC, 0x12000913, 0x00000060, 0x00000000, 0xAAA20C00, 
0x2820228C, 0x66660000, 0x0046AA00, 0x00000064, 0x00000000, 0x9A9A99B9, 0x99C9CC9C, 0xAB9999C9, 
0x9999CCCC, 0xCBBC970A, 0x8C848C74, 0xAC671363, 0x5177CACC, 0x03000000, 0x02000073, 0x0200013B, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 
0x999999B9, 0xCCCCAC99, 0xCCCC5901, 0x000040C8, 0xC8480000, 0x00000040, 0x0062CACC, 0xCCBC0800, 
0x0100C3CC, 0xCC8C2731, 0x1000053A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xC0000000, 0x0000C000, 0xCCCC88BC, 0x00516984, 0xCCCCCC08, 0x737B78C8, 0xC8480000, 
0x00000040, 0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 0x1000093A, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0x0020A6BC, 0x00000000, 
0xCCBCCC08, 0x739BCBCC, 0xC8480000, 0x00000040, 0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 
0x0000013D, 0x88000060, 0x00200020, 0x00000000, 0x00000000, 0x00000600, 0x00680002, 0x00020000, 
0x000C0000, 0x372222B2, 0xA686CCBC, 0xCCBC37C0, 0x00626AC8, 0xCC7B3700, 0x000084CC, 0x2284CBAC, 
0x22222222, 0x22526A23, 0x25222222, 0x1200010A, 0xAC000060, 0x00A0C060, 0x0000A000, 0x00000000, 
0x000000AA, 0x00020000, 0x00000000, 0x002A0000, 0x999999C9, 0x9999CCCC, 0xCC4800C0, 0x30B7CCBC, 
0xC9999999, 0x00009999, 0x008398CC, 0x00000000, 0xAACC4A01, 0x88ABA9AC, 0x00000702, 0x0000C64C, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00040000, 0x00000000, 0xCCAB9AC9, 
0xA9CCCCCC, 0xB88B04C0, 0x73C8CCCC, 0xC9999999, 0x00009999, 0xCACCCCCC, 0x00004086, 0x13000000, 
0xCCCC8A47, 0x0000013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20C00000, 0x0000CA00, 0x999999B9, 0xCCCCAC99, 0xCCCC5901, 0x000040C8, 0xC8480000, 0x00000040, 
0x0062CACC, 0xCCBC0800, 0x0100C3CC, 0xCC8C2731, 0x04000701, 0x0228C64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0x9CBB99B9, 0x99C9CCCC, 0x990900C0, 
0xA9CCCC9C, 0xC848A606, 0x00000040, 0x9999B9CC, 0x99999999, 0x99999999, 0x9C999999, 0x0200013B, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 
0x999999B9, 0xCCCCAC99, 0xCCCC5901, 0x000040C8, 0xC8480000, 0x00000040, 0x0062CACC, 0xCCBC0800, 
0x0100C3CC, 0xCC8C2731, 0x1000053A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xC0000000, 0x0000C000, 0xCCCC88BC, 0x00516984, 0xCCCCCC08, 0x737B78C8, 0xC8480000, 
0x00000040, 0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 0x1000093A, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0x0020A6BC, 0x00000000, 
0xCCBCCC08, 0x739BCBCC, 0xC8480000, 0x00000040, 0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 
0x00000F0B, 0xC2000060, 0x20C20C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 
0x00A00000, 0xCCAC99C9, 0x9999C9CC, 0x9A9999C9, 0x9999CACC, 0xCACC5901, 0x00005169, 0x00000000, 
0x00000000, 0xCC8C0300, 0x0064A8CC, 0x12000913, 0x00000060, 0x00000000, 0xAAA20C00, 0x2820228C, 
0x66660000, 0x0046AA00, 0x00000064, 0x00000000, 0x9A9A99B9, 0x99C9CC9C, 0xAB9999C9, 0x9999CCCC, 
0xCBBC970A, 0x8C848C74, 0xAC671363, 0x5177CACC, 0x03000000, 0x02000073, 0x0200013B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 
0xCCCCAC99, 0xCCCC5901, 0x000040C8, 0xC8480000, 0x00000040, 0x0062CACC, 0xCCBC0800, 0x0100C3CC, 
0xCC8C2731, 0x0000013D, 0x88000060, 0x00200020, 0x00000000, 0x00000000, 0x00000600, 0x00680002, 
0x00020000, 0x000C0000, 0x372222C2, 0xA686CCBC, 0xCCBC37C0, 0x00626AC8, 0xCC7B3700, 0x000084CC, 
0x2284CBCC, 0x22222222, 0x22526A23, 0x25222222, 0x1200010A, 0xAC000060, 0x00A0C060, 0x0000A000, 
0x00000000, 0x000000AA, 0x00020000, 0x00000000, 0x002A0000, 0x999999C9, 0x9999CCCC, 0xCC4800C0, 
0x30B7CCBC, 0xC9999999, 0x00009999, 0x008398CC, 0x00000000, 0xAACC4A01, 0x88ABA9AC, 0x00000702, 
0x0000C64C, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00040000, 0x00000000, 
0xCCAB9AC9, 0xA9CCCCCC, 0xB88B04C0, 0x73C8CCCC, 0xC9999999, 0x00009999, 0xCACCCCCC, 0x00004086, 
0x13000000, 0xCCCC8A47, 0x0000013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 0xCCCCAC99, 0xCCCC5901, 0x000040C8, 0xC8480000, 
0x00000040, 0x0062CACC, 0xCCBC0800, 0x0100C3CC, 0xCC8C2731, 0x04000701, 0x0228C64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0x9CBB99B9, 0x99C9CCCC, 
0x990900C0, 0xA9CCCC9C, 0xC848A606, 0x00000040, 0x9999B9CC, 0x99999999, 0x99999999, 0x9C999999, 
0x0200013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 
0x0000CA00, 0x999999B9, 0xCCCCAC99, 0xCCCC5901, 0x000040C8, 0xC8480000, 0x00000040, 0x0062CACC, 
0xCCBC0800, 0x0100C3CC, 0xCC8C2731, 0x1000053A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0xCCCC88BC, 0x00516984, 0xCCCCCC08, 0x737B78C8, 
0xC8480000, 0x00000040, 0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 0x1000093A, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0x0020A6BC, 
0x00000000, 0xCCBCCC08, 0x739BCBCC, 0xC8480000, 0x00000040, 0x0141CACC, 0x38000020, 0x00005398, 
0x9C460000, 0x00000F0B, 0xC2000060, 0x20C20C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 
0x00000064, 0x00A00000, 0xCCAC99C9, 0x9999C9CC, 0x9A9999C9, 0x9999CACC, 0xCACC5901, 0x00005169, 
0x00000000, 0x00000000, 0xCC8C0300, 0x0064A8CC, 0x12000913, 0x00000060, 0x00000000, 0xAAA20C00, 
0x2820228C, 0x66660000, 0x0046AA00, 0x00000064, 0x00000000, 0x9A9A99B9, 0x99C9CC9C, 0xAB9999C9, 
0x9999CCCC, 0xCBBC970A, 0x8C848C74, 0xAC671363, 0x5177CACC, 0x03000000, 0x02000073, 0x0000013D, 
0x88000060, 0x00200020, 0x00000000, 0x00000000, 0x00000600, 0x00680002, 0x00020000, 0x000C0000, 
0x372222C2, 0xA686CCBC, 0xCCBC37C0, 0x00626AC8, 0xCC7B3700, 0x000084CC, 0x2284CBCC, 0x22222222, 
0x22526A23, 0x25222222, 0x0200013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 0xCCCCAC99, 0xCCCC5901, 0x000040C8, 0xC8480000, 
0x00000040, 0x0062CACC, 0xCCBC0800, 0x0100C3CC, 0xCC8C2731, 0x1200010A, 0xAC000060, 0x00A0C060, 
0x0000A000, 0x00000000, 0x000000AA, 0x00020000, 0x00000000, 0x002A0000, 0x999999C9, 0x9999CCCC, 
0xCC4800C0, 0x30B7CCBC, 0xC9999999, 0x00009999, 0x008398CC, 0x00000000, 0xAACC4A01, 0x88ABA9AC, 
0x00000702, 0x0000C64C, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00040000, 
0x00000000, 0xCCAB9AC9, 0xA9CCCCCC, 0xB88B04C0, 0x73C8CCCC, 0xC9999999, 0x00009999, 0xCACCCCCC, 
0x00004086, 0x13000000, 0xCCCC8A47, 0x0000013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 0xCCCCAC99, 0xCCCC5901, 0x000040C8, 
0xC8480000, 0x00000040, 0x0062CACC, 0xCCBC0800, 0x0100C3CC, 0xCC8C2731, 0x04000701, 0x0228C64C, 
0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0x9CBB99B9, 
0x99C9CCCC, 0x990900C0, 0xA9CCCC9C, 0xC848A606, 0x00000040, 0x9999B9CC, 0x99999999, 0x99999999, 
0x9C999999, 0x0300013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20C00000, 0x0000CA00, 0x999999B9, 0xCCCCAC99, 0xCCCC5901, 0x000040C8, 0xC8480000, 0x00000040, 
0x0062CACC, 0xCCBC0800, 0x0100C3CC, 0xCC8C2731, 0x1200010B, 0xC0000060, 0x00C40C08, 0x00000008, 
0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00400000, 0xBBBBBBCB, 0xCBCCCCBC, 0x490200C0, 
0x99C9CCBC, 0xCCCCCC0C, 0x00002094, 0x00000000, 0x00000000, 0xCCAB3600, 0x002097CC, 0x0000092D, 
0x82000060, 0x40840000, 0x00002A80, 0x00000006, 0x02000600, 0x80A88628, 0x00000000, 0x00040000, 
0x87CACCCC, 0x77777777, 0xCCCC8CC4, 0x33333384, 0xCCCC9A7B, 0x7777C7CC, 0xCCBCA8CC, 0x22222295, 
0x25222222, 0xCC9C6995, 0x10000946, 0x86000040, 0x0080C62C, 0xCCB08600, 0x06000064, 0x00000000, 
0x00000000, 0x200A0000, 0x00662000, 0xCCCCCCCC, 0x9999B9CC, 0x575901C0, 0x95CACCBC, 0xC7CC5B00, 
0x00000031, 0xCACCCCCC, 0xB9BB7984, 0x00000030, 0xBB8A0300, 0x00800912, 0x82000040, 0x00888000, 
0x0800C0A0, 0x00000080, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0xCCABCCC9, 0xCC9CCCCC, 
0x333333C3, 0xCCCC6A33, 0xC7373333, 0x33333354, 0xC9CCCCCC, 0x22113187, 0x67461111, 0xCC6A7655, 
0x0E000F3A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 
0x0000CA00, 0x36111191, 0x3374C9BC, 0xCC590100, 0x002084CC, 0xC6060000, 0x00000031, 0x1184CCCC, 
0x49011033, 0x1052A5CC, 0xCC8A3612, 0x0A000F3A, 0x00000020, 0x00000002, 0x20000000, 0x00000000, 
0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0xCCCBBB97, 0x222232B6, 0xCC7B0300, 0x003087CC, 
0xC6666606, 0x00002063, 0x1194CCCC, 0x49011033, 0x1021A5CC, 0xCC8A3612, 0x03000701, 0x0228C64C, 
0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCCCCCCCB, 
0xC9ABBACB, 0x250000C0, 0x62CACC9C, 0xC6060000, 0x00000031, 0x88BACCCC, 0x49523375, 0x1011A5CC, 
0xCC8A3612, 0x00242A0C, 0x09070708, 0x060B0808, 0x0A09030A, 0x00000000, 0x01000101, 0x00000100, 
0x00000501, 0x00000000, 0x42C74440, 0xC9C740C7, 0xC7C7C7CA, 0x00000000, 0x78787878, 0x78787878, 
0x78787878, 0x00000000, 0x56565656, 0x56565656, 0x56565656, 0x00000000, 0x04000F3B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x680400B0, 
0xCACCCCAB, 0xCCCC5901, 0x000040C8, 0xC8480000, 0x00000040, 0x0062CACC, 0xCCBC0800, 0x4600C3CC, 
0xCCCCCC8A, 0x0C00050B, 0xC2000060, 0x20C20C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 
0x00000064, 0x00A00000, 0x999999B9, 0x9999A9CC, 0x999999C9, 0x99C9CC99, 0xCACCCC0C, 0x42000062, 
0x00000000, 0x00000000, 0xCC9C0300, 0x000041CA, 0x0000092D, 0x82000060, 0x40840000, 0x00002A80, 
0x00000006, 0x02000600, 0x80AC8628, 0x00000000, 0x00040000, 0x30B7CCBC, 0x00000000, 0xC8CCBC07, 
0x00000040, 0xC8CCCC08, 0x00000051, 0x000030C8, 0x00000000, 0x00000000, 0xCCAC4901, 0x12000946, 
0x20000040, 0x0020C00C, 0xCC202000, 0x00000000, 0x00000000, 0x00000000, 0x00040000, 0x00000000, 
0xCC9B99C9, 0x99B9CCCC, 0x480000C0, 0x20A6CCCC, 0xC9999999, 0x00009999, 0xCCCCCCCC, 0x433464C8, 
0x44641531, 0xCCCCAC68, 0x00800712, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00000400, 
0x00000000, 0x00000000, 0x00060000, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xCBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x1000053A, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0x580100B0, 0x0063CACC, 
0xCC8C0400, 0x000084CC, 0xC8480000, 0x00000040, 0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 
0x1000073A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 
0x0000C000, 0xCCCC48B0, 0x00001095, 0xCCAC2600, 0x000084CC, 0xC8480000, 0x00000040, 0x0141CACC, 
0x38000020, 0x00005398, 0x9C460000, 0x03000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCC9C99B9, 0x99A9CCCC, 0x990900C0, 0x99B9CCCC, 
0xC8480000, 0x00000040, 0x99A9CCCC, 0x99999999, 0x99999999, 0x99999999, 0x04000F3B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x680400B0, 
0xCACCCCAB, 0xCCCC5901, 0x000040C8, 0xC8480000, 0x00000040, 0x0062CACC, 0xCCBC0800, 0x4600C3CC, 
0xCCCCCC8A, 0x0C00050B, 0xC2000060, 0x20C20C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 
0x00000064, 0x00A00000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x0C000918, 0x00000020, 0x00000000, 0x0A000A00, 
0x002882CA, 0x02440000, 0x00202200, 0x00000002, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x1000053A, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x0141CACC, 0x38000020, 
0x00005398, 0x9C460000, 0x1000073A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xC0000000, 0x0000C000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 0x1000093A, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0600000, 0x0000C000, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 
0x04000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00220000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x07000716, 0x00000040, 0x00000000, 0xC0C60A00, 0x0C000006, 
0xA6000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCCACB9, 0xCCCCCCCC, 0x999999C9, 0xC9CCCCCC, 
0xC8CBCB0C, 0x6A735374, 0xCACCCCBC, 0x10653396, 0x00000000, 0x27002001, 0x04000F3B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x680400B0, 
0xCACCCCAB, 0xCCCC5901, 0x000040C8, 0xC8480000, 0x00000040, 0x0062CACC, 0xCCBC0800, 0x4662C7CC, 
0xCCCCCC8A, 0x1200050E, 0x00000060, 0xC6480A00, 0x0000004C, 0x00000000, 0x000000A9, 0x00000000, 
0x00000000, 0x00000000, 0x268404B0, 0xC8CCCCAC, 0xCCAC68C4, 0x0073CBCC, 0x1095CC0C, 0x00000000, 
0x00000000, 0x66150000, 0xCACCCC9C, 0x00000084, 0x0000072D, 0x82000060, 0x40840000, 0x00002A80, 
0x00000006, 0x02000600, 0x80A68628, 0x00000000, 0x00040000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x10000917, 
0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 0x00680000, 0x00000000, 0x00000000, 0x00000000, 
0xCCAC99C9, 0x9999CCCC, 0x9B1500C0, 0x0073CBCC, 0xC999CC99, 0x00009999, 0xCCCCCCCC, 0x2364A9CC, 
0x00100023, 0xAB766514, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 
0x00000000, 0x00000000, 0x00060000, 0x9A9999C9, 0xCA9ACC9B, 0x040000C0, 0xC9CCCC88, 0xC9999999, 
0x00009999, 0xBB88ABC9, 0x636543B7, 0x00002035, 0x7A020000, 0x01000701, 0x0228C64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xBC9A99B9, 0xC9CCCCCC, 
0x990900C0, 0x9999CCCC, 0xC8480000, 0x00000040, 0xCCCCCCCC, 0x9999A9CC, 0xCCCCAC99, 0xCCCCCCCC, 
0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 
0x0000CC00, 0x680400B0, 0xCACCCCAB, 0xCCCC5901, 0x000040C8, 0xC8480000, 0x00000040, 0x0062CACC, 
0xCCBC0800, 0x4600C3CC, 0xCCCCCC8A, 0x0000050B, 0xC2000060, 0x20C20C2A, 0x00000008, 0x00000000, 
0x00000044, 0x00460068, 0x00000064, 0x00A00000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x12000913, 0x00000060, 
0x00000000, 0xAAA20C00, 0x2820228C, 0x66660000, 0x0046AA00, 0x00000064, 0x00000000, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20A00000, 0x0000CC00, 0x680400B0, 0xCACCCCAB, 0xCCCC5901, 0x000040C8, 0xC8480000, 0x00000040, 
0x0062CACC, 0xCCBC0800, 0x4600C3CC, 0xCCCCCC8A, 0x1000073A, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 0x1000093A, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x0141CACC, 0x38000020, 
0x00005398, 0x9C460000, 0x0000053D, 0x88000060, 0x00200020, 0x00000000, 0x00000000, 0x00000600, 
0x00680002, 0x00020000, 0x000C0000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x1200050A, 0xAC000060, 0x00A0C060, 
0x0000A000, 0x00000000, 0x000000AA, 0x00020000, 0x00000000, 0x002A0000, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0x04000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00220000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x680400B0, 0xCACCCCAB, 0xCCCC5901, 0x000040C8, 
0xC8480000, 0x00000040, 0x0062CACC, 0xCCBC0800, 0x4600C3CC, 0xCCCCCC8A, 0x02000506, 0xCA000060, 
0x22C2AB2A, 0x00008002, 0x00000000, 0x0000668A, 0x004600AA, 0x00000044, 0x00880000, 0xCCCCCCBA, 
0x999999BB, 0x999999C9, 0x9CCCCC99, 0xC8CCCCCC, 0x22222242, 0x00000041, 0x00000000, 0x49010000, 
0xCACCCCAC, 0x12000715, 0x00000060, 0x00000000, 0x00CC0000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x737B53B1, 0xCCBCCC48, 0xBB370000, 0x62CACCCC, 0x0040C80C, 0x00000000, 
0xCACBCC8C, 0x00008389, 0x00000000, 0x03000000, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x680400B0, 0xCACCCCAB, 0xCCCC5901, 
0x000040C8, 0xC8480000, 0x00000040, 0x0062CACC, 0xCCBC0800, 0x4600C3CC, 0xCCCCCC8A, 0x1200050F, 
0x00000060, 0xCC000000, 0x00000000, 0x00000000, 0x0000B000, 0x00000080, 0x00000000, 0x00000000, 
0x040000B0, 0xC8CCCC8C, 0xCCAB2600, 0x0040C8CC, 0xA646C80C, 0x00000020, 0x00000000, 0x01000000, 
0xA5CCCC5A, 0x00000010, 0x12000917, 0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 0x00A00000, 
0x00000000, 0x00000000, 0x00000000, 0xA999A9C9, 0xBCCC9CCC, 0xA8767BC3, 0x626ACACC, 0xC99BBB99, 
0x00009999, 0xCCCCCCCC, 0x01519AA9, 0x00100031, 0xAB663501, 0x00800812, 0x82000040, 0x00888000, 
0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0xC99A99C9, 0xBC99CCAB, 
0x686A02C0, 0xCCCC8CCA, 0xC9999999, 0x00009999, 0xBCBA9CC9, 0x0210A5BA, 0x00000052, 0x24841400, 
0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00220000, 0xACBA99B9, 0xBBCCCCCC, 0x99B937C1, 0x9999CBCC, 0xC84811C1, 0x11111141, 0xCCCCCCCC, 
0x9999A9CC, 0xCCCCAC99, 0xCCCCCCCC, 0x03000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x680400B0, 0xCACCCCAB, 0xCCCC5901, 0x000040C8, 
0xC8480000, 0x00000040, 0x0062CACC, 0xCCBC0800, 0x4600C3CC, 0xCCCCCC8A, 0x0600073A, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0xCACCBC98, 
0x97879976, 0xCC480000, 0x000084CC, 0xC8480000, 0x00000040, 0x4164CACC, 0x7B020000, 0x000041C9, 
0x5A010000, 0x1000083A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xC0000000, 0x0000C000, 0x4186BABC, 0x00000000, 0xCC8C7403, 0x0042A6CC, 0xC8480000, 0x00000040, 
0x0083CCCC, 0x38000000, 0x001065A8, 0x4A010000, 0x0E000511, 0x42000060, 0xC64A0A00, 0x0000000C, 
0x00000000, 0x000000A8, 0x00000020, 0x00000008, 0x00000000, 0x999999B9, 0x9BCACBCC, 0x999999C9, 
0x99CBCC9C, 0xC8CCCC0C, 0x260030B7, 0x00000000, 0x26000020, 0xCCAC4864, 0x410241CA, 0x0000052D, 
0x00000060, 0x00000000, 0x00000000, 0x00000000, 0x00000500, 0x00580005, 0x00000000, 0x00000000, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0x0000082D, 0x00000060, 0x00000000, 0x00000000, 0x00000000, 0x06000000, 
0x006C0000, 0x00000000, 0x00000000, 0x1095CCBC, 0x00204648, 0xCCCCCC08, 0x000040C8, 0xC8CCCC08, 
0x00000040, 0x00004198, 0x00000000, 0x36000000, 0xCCCC9A44, 0x12000943, 0x00000040, 0x00000000, 
0x0CC40C00, 0x000200C6, 0x22000000, 0x00006200, 0x00000000, 0x00000000, 0xBCCB99C9, 0xB99CCCCC, 
0xCB9935C0, 0x84A6CCCC, 0xC99A9999, 0x00009999, 0xCAACAACA, 0xBAAC9BB9, 0x21431194, 0x56773325, 
0x03000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00220000, 0xB99B99B9, 0xBCACCCBC, 0x990902C0, 0x99C9CCAC, 0xC8787BC3, 0x11111141, 0x9999CBBC, 
0x99999999, 0x99999999, 0x99999999, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00400000, 0x00009900, 0x680400B0, 0xCACCCCAB, 0xCCCC5901, 0x000040C8, 
0xC8480000, 0x00000040, 0x0062CACC, 0xCCBC0800, 0x4600C3CC, 0xCCCCCC8A, 0x0080050B, 0x00000000, 
0x00400A08, 0x00000008, 0x00000000, 0x00000200, 0x00400044, 0x00000000, 0x00000000, 0xCCCC99B9, 
0x999999A9, 0x999999C9, 0x99C9CCBC, 0xC8CCCC0C, 0x00000073, 0x00000010, 0x00000000, 0xAC670200, 
0x64CBCCCC, 0x00800716, 0x00000040, 0x00000400, 0xC0C60800, 0x0C000006, 0x02000000, 0x00000000, 
0x00000000, 0x00000000, 0xBCBC9CB9, 0xA9CBCCCC, 0x999999C9, 0xB9CCCC99, 0x40C8CC0C, 0x00000000, 
0x10A5CCCC, 0x00000000, 0x00000000, 0x5A010000, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x680400B0, 0xCACCCCAB, 0xCCCC5901, 
0x000040C8, 0xC8480000, 0x00000040, 0x0062CACC, 0xCCBC0800, 0x4600C3CC, 0xCCCCCC8A, 0x12000528, 
0x82000080, 0x07800402, 0x00000000, 0x00000000, 0x00004464, 0x002000CB, 0x0000000A, 0x00220000, 
0xAA9999B9, 0x99CACCCC, 0xAB9999C9, 0x99CACCCC, 0x50A8CB0C, 0x00000000, 0x00000000, 0x68241101, 
0xCCCCCCAC, 0x0064A8CC, 0x0000072D, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x40060000, 0x00000000, 0x00000000, 0x9ACACCBC, 0x00000062, 0xA6CCCC08, 0x00000020, 0xC8CC9C05, 
0x00000040, 0x000010A5, 0x00000000, 0x00000000, 0xCCAC2700, 0x0A000917, 0x00000040, 0x00000000, 
0x0CC60A00, 0x000000A6, 0x00A00000, 0x00000000, 0x00000000, 0x00000000, 0xCCCCAAC9, 0xA9AACCCC, 
0x983723C0, 0x41C8CCCC, 0xC9CCCC9A, 0x00139999, 0xCCCCCCCC, 0x8888A8CC, 0x88888888, 0xAB888888, 
0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 
0x00060000, 0xAC9AB9C9, 0xCCCCCCCC, 0x585901C0, 0xB7CBCCCC, 0xC9999999, 0x00009999, 0xCCCCCCCC, 
0x002064A8, 0x00302202, 0x78561500, 0x00000702, 0x0060C64C, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00040000, 0x00000000, 0xCCAB9AC9, 0xA9CCCCCC, 0xB8AB37C0, 0x73C8CCCC, 
0xC9999999, 0x00009999, 0xCACCCCCC, 0x00004086, 0x13000000, 0xCCCC8A47, 0x00000F3B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00B00000, 0x00009900, 0x8C0400B0, 
0xCACCCCCC, 0xCCCC5901, 0x000040C8, 0xC8480000, 0x00000040, 0x0062CACC, 0xCCBC0800, 0x4600C3CC, 
0xCCCCCC8A, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00220000, 0xCC9999B9, 0xA9CCCCCC, 0x990900C0, 0x99C9CCCC, 0xC84874CB, 0x4444848C, 
0xCCCCCCCC, 0x9999A9CC, 0xCCCCAC99, 0xCCCCCCCC, 0x0080080B, 0xC0000060, 0x00C00C04, 0x00000004, 
0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00400000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x1200091E, 
0x00000060, 0x00000000, 0x00000000, 0xCA60AC00, 0x00AA0000, 0x00000000, 0x00000000, 0x00000000, 
0xC99C99B9, 0x9999C9CC, 0x999999C9, 0x999CCCCC, 0x00000000, 0x0084CC48, 0x01000000, 0xCCCC4943, 
0x000051CA, 0x00000000, 0x04000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20A00000, 0x0000CC00, 0x680400B0, 0xCACCCCAB, 0xCCCC5901, 0x000040C8, 0xC8480000, 
0x00000040, 0x0062CACC, 0xCCBC0800, 0x4600C3CC, 0xCCCCCC8A, 0x12000508, 0x2C000060, 0x000040C8, 
0x00000000, 0x00000000, 0x00000200, 0x00000000, 0x00000000, 0x00220000, 0xCC8804B0, 0x003085CC, 
0xABCCCC08, 0x0030A7A8, 0x59010000, 0x8A84CC8C, 0x00000030, 0x00000000, 0xCCAA1500, 0x98C9CCCC, 
0x12000726, 0x00000080, 0x00000000, 0x40200600, 0x04AC6886, 0xCA000000, 0x00A88406, 0x00000000, 
0x00000000, 0x99A9B9C9, 0xA99CCCCC, 0x444800C0, 0x73B7CC8C, 0xC999999A, 0x00009999, 0x20A6CBCC, 
0x00000000, 0x00004102, 0x4A010000, 0x04000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00220000, 0x999999B9, 0xC9CBCCCC, 0x990900C0, 0x9999CC9C, 
0xC8480000, 0x00000040, 0x99999999, 0x99999999, 0x99B9CC9A, 0x99999999, 0x0080071F, 0x00000020, 
0x00000000, 0xC0000800, 0x8C00800A, 0x02000000, 0x00004400, 0x00000000, 0x00000000, 0x9CCA9CB9, 
0xCB9CCCCC, 0x9999B9C9, 0xBCCCCC9C, 0xCABCCA0C, 0x9C1532B7, 0xACAACC7B, 0x4685BBBA, 0x02000051, 
0x15000041, 0x04000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20A00000, 0x0000CC00, 0x680400B0, 0xCACCCCAB, 0xCCCC5901, 0x000040C8, 0xC8480000, 0x00000040, 
0x0062CACC, 0xCCBC0800, 0x4600C3CC, 0xCCCCCC8A, 0x12000511, 0x42000060, 0xC64A0900, 0x0000000C, 
0x00000000, 0x000000A8, 0x00000020, 0x00000008, 0x00000000, 0x9999ABBA, 0xCBBCCCCC, 0xBC9999C9, 
0xBAC9CCCC, 0xC8B9CB0C, 0x53114542, 0x01003185, 0x45540220, 0xBBCCCC8C, 0x876996A9, 0x0000072D, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x400A0000, 0x00000000, 0x00000000, 
0xCCB8CCBC, 0x000040C8, 0xC8CCCC08, 0x000051A9, 0xC8CCCC08, 0x00000040, 0x620310A5, 0x00000000, 
0x15000000, 0xCCACCB9A, 0x00000714, 0x00000060, 0x00000000, 0x44820400, 0x00000000, 0x00700000, 
0x00000000, 0x00000000, 0x00000000, 0x8CA6C8BC, 0xCCBACACA, 0x9C9AB7C7, 0xAACCCCCC, 0xC8C8CC0C, 
0x00000040, 0x65AACCCC, 0x83BBAC46, 0x00000000, 0x38000000, 0x08000730, 0x60000060, 0x64520000, 
0x00000000, 0x00000000, 0x00700074, 0x0C008226, 0x000000BA, 0x00400000, 0x8C6755B9, 0xCCACCCCC, 
0xCCCC7BC3, 0x7ABBCCCC, 0xC8BBCB0C, 0x00401595, 0x20211013, 0x9C380000, 0xCACCCCCC, 0x00415499, 
0x0000072D, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x400A0000, 0x00000000, 
0x00000000, 0xCCCCCCBA, 0x00109586, 0xCC8CCC08, 0x00000084, 0xC8CCCC08, 0x00000040, 0x730330B8, 
0x00000000, 0x13000000, 0xCBCC5A22, 0x0A000917, 0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 
0x00A00000, 0x00000000, 0x00000000, 0x00000000, 0x9CBC99CA, 0xC99A9ACC, 0xBA6702C0, 0xB788CBCC, 
0xC9CCCA9C, 0x13159999, 0xBACACBCC, 0x24131084, 0x00000021, 0x9B460000, 0x00800712, 0x82000040, 
0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0x999999C9, 
0x999ACCBB, 0x7B33B7C7, 0x46C8C89C, 0xC9999999, 0x00009999, 0x99BA68C7, 0x23632384, 0x26000010, 
0x4546A67A, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00220000, 0x9B9999B9, 0xB9ABA9C9, 0x990900C0, 0x99B9CCBC, 0xC8886A02, 0x00000084, 
0xCCCCCCCC, 0x999999A9, 0xCCCCAC99, 0xCCCCCCCC, 0x08000F3B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x680400B0, 0xCACCCCAB, 0xCCCC5901, 
0x000040C8, 0xC8480000, 0x00000040, 0x0062CACC, 0xCCBC0800, 0x4600C3CC, 0xCCCCCC8A, 0x12000529, 
0x60000080, 0x00800000, 0x00000000, 0x00000000, 0x00000040, 0x0000008C, 0x0000000A, 0x00000000, 
0xBB9999B9, 0xCBCCCCCC, 0x8B5623C0, 0x31B7CCCC, 0xA9A9CB9C, 0x40C89999, 0x30022153, 0x79360000, 
0xCCCC9B89, 0x54A8B9BB, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00220000, 0xCCCC9CB9, 0x999999C9, 0xCC6A02C0, 0x999999CC, 0xAC260000, 
0x6A84CCCC, 0x999999CB, 0x99999999, 0x99999999, 0xCC999999, 0x07000716, 0x00000040, 0x00000000, 
0xC0C60A00, 0x0C000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 0x9CCCACB9, 0xB9CACCCC, 
0x999999C9, 0x99CCCCBC, 0xC8ABCC0C, 0x21004240, 0xCACCCCBC, 0x00312265, 0x00000000, 0x36001013, 
0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 
0x0000CA00, 0x680400B0, 0xCACCCCAB, 0xCCCC5901, 0x000040C8, 0xC8480000, 0x00000040, 0x0062CACC, 
0xCCBC0800, 0x4662C7CC, 0xCCCCCC8A, 0x1200050E, 0x00000060, 0xC6480A00, 0x0000004C, 0x00000000, 
0x000000A9, 0x00000000, 0x00000000, 0x00000000, 0x040000B0, 0xC8CCCCAC, 0xCCAC68C4, 0x0073CBCC, 
0x1095CC0C, 0x00000000, 0x00000000, 0x26000000, 0xCACCCC8C, 0x00000084, 0x0000072D, 0x82000060, 
0x40840000, 0x00002A80, 0x00000006, 0x02000600, 0x80A68628, 0x00000000, 0x00040000, 0xCCCCCCBB, 
0xBBBBBBBB, 0xCBBBCCCB, 0xBBBBBBBB, 0xCBCCBCCB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xCCCCCCBB, 0x10000917, 0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 0x00680000, 0x00000000, 
0x00000000, 0x00000000, 0xCCAC99C9, 0x9999CCCC, 0x482600C0, 0x62A6CCCC, 0xC9C99A99, 0x20269999, 
0xCCCCCCCC, 0x2364A8CC, 0x00000023, 0x8B763414, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 
0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0x9A9999C9, 0xCA9ACC9B, 0x040000C0, 
0xC9CCCC88, 0xC9999999, 0x00009999, 0xBB88ABC9, 0x636543B7, 0x00002035, 0x7A020000, 0x00000702, 
0x0060C64C, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00040000, 0x00000000, 
0xCCAB9AC9, 0xA9CCCCCC, 0xB88B04C0, 0x73C8CCCC, 0xC9999999, 0x00009999, 0xCACCCCCC, 0x00004086, 
0x13000000, 0xCCCC8A47, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00B00000, 0x00009600, 0x8C0400B0, 0xCACCCCCC, 0xCCCC5901, 0x000040C8, 0xC8480000, 
0x00000040, 0x0062CACC, 0xCCBC0800, 0x4662C7CC, 0xCCCCCC8A, 0x01000701, 0x0228C64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xBA9999C9, 0x999ABCCC, 
0x990900C0, 0x9999CCCC, 0xC8480000, 0x00000040, 0xCCCCCCCC, 0x9999A9CC, 0xCCCCAC99, 0xCCCCCCCC, 
0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 
0x0000CC00, 0x680400B0, 0xCACCCCAB, 0xCCCC5901, 0x000040C8, 0xC8480000, 0x00000040, 0x0062CACC, 
0xCCBC0800, 0x4600C3CC, 0xCCCCCC8A, 0x02000506, 0xCA000060, 0x22C2AB2A, 0x00008002, 0x00000000, 
0x0000668A, 0x004600AA, 0x00000044, 0x00880000, 0xCCCCCCBA, 0x999999BB, 0x999999C9, 0x9CCCCC99, 
0xC8CCCCCC, 0x22222242, 0x00000041, 0x00000000, 0x49010000, 0xCACCCCAC, 0x12000715, 0x00000060, 
0x00000000, 0x00CC0000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x737B53B1, 
0xCCBCCC48, 0xBB370000, 0x62CACCCC, 0x0040C80C, 0x00000000, 0xCACBCC8C, 0x00008389, 0x00000000, 
0x03000000, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20A00000, 0x0000CC00, 0x680400B0, 0xCACCCCAB, 0xCCCC59C4, 0x444444C8, 0xC84844C4, 0x44444444, 
0xBBBBCCCC, 0xCCBCBBBB, 0xBBBBCBCC, 0xCCCCCCBB, 0x1200050F, 0x00000060, 0xCC000000, 0x00000000, 
0x00000000, 0x0000B000, 0x00000080, 0x00000000, 0x00000000, 0x040000B0, 0xC8CCCC8C, 0xCCAB2600, 
0x0040C8CC, 0xA646C80C, 0x00000020, 0x00000000, 0x01000000, 0xA5CCCC5A, 0x00000010, 0x12000917, 
0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 0x00A00000, 0x00000000, 0x00000000, 0x00000000, 
0xA999A9C9, 0xBCCC9CCC, 0xA8767BC3, 0x626ACACC, 0xC99BBB99, 0x00009999, 0xCCCCBACA, 0x01519AA9, 
0x00000031, 0x8B650300, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 
0x00000000, 0x00000000, 0x00060000, 0xC99A99C9, 0xBC99CCAB, 0x686A02C0, 0xCCCC8CCA, 0xC9999999, 
0x00009999, 0xBCBA9CC9, 0x0210A5BA, 0x00000052, 0x24841400, 0x00000702, 0x0060C64C, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00040000, 0x00000000, 0xCCAB9AC9, 0xA9CCCCCC, 
0xB88B04C0, 0x73C8CCCC, 0xC9999999, 0x00009999, 0xCACCCCCC, 0x00004086, 0x13000000, 0xCCCC8A47, 
0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00B00000, 
0x00009600, 0x8C0400B0, 0xCACCCCCC, 0xCCCC5901, 0x000040C8, 0xC8480000, 0x00000040, 0x0062CACC, 
0xCCBC0800, 0x4662C7CC, 0xCCCCCC8A, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xBA9999C9, 0x999ABCCC, 0x990900C0, 0x9999CCCC, 
0xC8480000, 0x00000040, 0xCCCCCCCC, 0x9999A9CC, 0xCCCCAC99, 0xCCCCCCCC, 0x00FF0809, 0x06080909, 
0x06070707, 0x00000007, 0x00000000, 0x00000000, 0x00000300, 0x00000000, 0x00000000, 0x40434540, 
0x40404F45, 0x00000040, 0x00000000, 0xBDBDBDBD, 0xBDBDBDBD, 0x000000BD, 0x00000000, 0xAEAEAEAE, 
0xBEBEAEAE, 0x000000BE, 0x00000000, 0x0300013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x222242B8, 0xA6CC9C25, 0xCC8C24C2, 0x222232B7, 
0xC8480000, 0x00000040, 0x3633B6CC, 0x33333395, 0x58333333, 0xBC8B878A, 0x0C00013A, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0600000, 0x0000C000, 0xACAACABC, 
0xCAACCCCC, 0xCCCCBCCB, 0xBBBBBBCC, 0xCBBBBBCB, 0xBBBBBBBB, 0xBBCBCCCC, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBCBBBBBB, 0x0E00010B, 0xC2000060, 0x20C20C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 
0x00000064, 0x00A00000, 0x9C9999B9, 0xC99999C9, 0xAAAAAACA, 0xAAAAAAAA, 0xCBCCBCCB, 0xBBBBBBBB, 
0xAAAAAAAA, 0xAAAAAAAA, 0xCCCBAAAA, 0xAAAACACC, 0x0E000918, 0x00000020, 0x00000000, 0x04000400, 
0x000220C4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x5CCCCABC, 0x738BCCCA, 0xCCCCCC08, 
0x0020A6CB, 0xC8480000, 0x00000040, 0x23130000, 0xCACBCC8C, 0x51CACB89, 0x00000000, 0x0A000704, 
0x00C00260, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xCBCCACBC, 0x0084CCBC, 0xCCCACB08, 0x0020A6CA, 0xC8480000, 0x00000040, 0x00515A01, 0x00000000, 
0x9C380000, 0x7298CCCC, 0x12000946, 0x86000040, 0x0080C62C, 0xCC808600, 0x06000064, 0x00000000, 
0x00000000, 0x200A0000, 0x00662000, 0xCBC8CCBC, 0xC8C8CCCC, 0xACABC808, 0x73ABC8CC, 0xCCBC7B09, 
0x5973CBCC, 0xA5CCCCBC, 0x00006234, 0x76660300, 0x9B987776, 0x12000946, 0x86000040, 0x0080C62C, 
0xCC808600, 0x06000064, 0x00000000, 0x00000000, 0x200A0000, 0x00662000, 0x9C9999B9, 0xCCCCCCCB, 
0x555901C0, 0xCCCCCC99, 0xC9999999, 0x0040C99A, 0x99CCAACB, 0x12000072, 0xA8991400, 0x8B98CC89, 
0x00800112, 0x00000040, 0x00008000, 0x00008060, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xCCCCACCA, 0xCACACCCC, 0x999999C9, 0xC9CC9C99, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCACCA, 
0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0x04000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xAA999AB9, 0xCCCAA99C, 0x990900C0, 0x99CACCCC, 
0xC848620A, 0x00000040, 0x99A9CCCC, 0x99999999, 0x99999999, 0x99A9BA99, 0x0080091F, 0x00000020, 
0x20000000, 0xA0000800, 0xAC60800A, 0x44000000, 0x00004400, 0x00000000, 0x00000000, 0x99CCCCBC, 
0xC9CC99BC, 0xC99999C9, 0x99CCC9CC, 0xCCACCCCC, 0xAAAAAACC, 0xBCCCACAA, 0xAACACCCC, 0xAAAAAACA, 
0xAAAAAAAA, 0x0200013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20A00000, 0x0000CC00, 0x222242B8, 0xA6CC9C25, 0xCC8C24C2, 0x222232B7, 0xC8480000, 0x00000040, 
0x3633B6CC, 0x33333395, 0x58333333, 0xBC8B878A, 0x0E000F08, 0x2C000060, 0x000040C8, 0x00000000, 
0x00000000, 0x00000200, 0x00000000, 0x00000000, 0x00220000, 0xCCC9BCBA, 0xBCAACACC, 0xBC8859C2, 
0xB7C8CC8C, 0xCCCCABCC, 0x9A85CCCC, 0x334398CB, 0x33333333, 0x7A675733, 0xCCACBB9B, 0x08000926, 
0x00000080, 0x00000000, 0x40200600, 0x04BC6986, 0xCA000000, 0x00A88406, 0x00000000, 0x00000000, 
0x9A7859B8, 0xCCCCCCBC, 0xAA9948C3, 0xB8CCCCCC, 0xC88CCBCC, 0x5655B758, 0xCCCCCCCC, 0x859888B8, 
0x44444444, 0x7B444444, 0x0200013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20A00000, 0x0000CC00, 0x222242B8, 0xA6CC9C25, 0xCC8C24C2, 0x222232B7, 0xC8480000, 
0x00000040, 0x3633B6CC, 0x33333395, 0x58333333, 0xBC8B878A, 0x07000506, 0xCB000060, 0x22C2A6AA, 
0x00008002, 0x00000000, 0x00006686, 0x008600AA, 0x00000044, 0x00880000, 0xCC9ACCCB, 0xCCCCBCCC, 
0xC9C87BC5, 0x8CCCCCCC, 0xCC9CC8C8, 0x7BC8CCB8, 0xCBCCCCCB, 0x666676CB, 0xCB9B7A66, 0x9767B7AC, 
0x00000735, 0x02000020, 0x00000020, 0x00220000, 0x00000000, 0x00000000, 0x00000000, 0x800C0000, 
0x00442000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x00800746, 0x86000040, 0x0000C000, 0x0C808600, 0x00000080, 
0x00000000, 0x00000000, 0x000A0000, 0x00660000, 0xCC888CCC, 0xCCCCCCCC, 0xCCACAACA, 0xCACCCACC, 
0xCBBBBBCB, 0xBBBBBBBB, 0xCCCCCCCB, 0xBBBBCBCC, 0xBBBBBBBB, 0xBBCCBBBB, 0x01000701, 0x0228C64C, 
0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xAA9BAAB7, 
0xCCCACCCC, 0x8B8414C1, 0x7387CCCC, 0xC9CCC9CC, 0x99999999, 0x9AC9CB8B, 0x47645588, 0xCCCC89AA, 
0x7768A7CA, 0x1280070B, 0xC2000060, 0x22C20C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 
0x00000064, 0x00A00000, 0xACCAAABC, 0xAACCCCCC, 0xBBBBBCCB, 0xCBCBBBBC, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBCBBBBBB, 0xBCCCBCBB, 0xBCCBBBCC, 0x0000082D, 0x82000060, 0x40840000, 0x00002A80, 
0x00000006, 0x02000600, 0x80AC8628, 0x00000000, 0x00040000, 0xCCCCBCBC, 0xBBBBBBCB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x12000914, 
0x00000060, 0x00000000, 0xAAC80A00, 0x00000004, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xABCCACBA, 0xCCBCCCCC, 0xBCBCBBCB, 0xCBCCCCCB, 0xBBCCCCCC, 0xBBBBBBBB, 0xBCBCCCCC, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0x0300013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20A00000, 0x0000CC00, 0x222242B8, 0xA6CC9C25, 0xCC8C24C2, 0x222232B7, 0xC8480000, 
0x00000040, 0x3633B6CC, 0x33333395, 0x58333333, 0xBC8B878A, 0x12000F28, 0x20000080, 0x00200000, 
0x00000000, 0x00000000, 0x00000000, 0x000000C4, 0x00000004, 0x00000000, 0xACAAAACA, 0xCCCCCCCC, 
0xCCBCBBCB, 0xBBBBCCCB, 0xCBBBCCCC, 0xBBCBCBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xCCBCBBBB, 0xBBBBCBCC, 
0x0C000943, 0x00000040, 0x00000000, 0x0CC40C00, 0x000200C6, 0x22000000, 0x00006200, 0x00000000, 
0x00000000, 0xACACCCCA, 0xCCCCCCCC, 0xBCBBBBCB, 0xBBCBCCBC, 0xCBCCCCCB, 0xBBBBBBBB, 0xCCCCCCCB, 
0xBBCBCBCB, 0xBBBCBBBB, 0xCBBBBBBB, 0x00800912, 0x20000040, 0x00222000, 0x0000C040, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC99999BC, 0xC9CBCCCC, 0xCB7877C7, 0xCCCCCCCC, 
0xC99999C9, 0x88889999, 0xCCCCCCCC, 0xAA9AABCB, 0x87ABBBAC, 0x99779778, 0x02000701, 0x0228C64C, 
0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0x0300013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20A00000, 0x0000CC00, 0x222242B8, 0xA6CC9C25, 0xCC8C24C2, 0x222232B7, 0xC8480000, 0x00000040, 
0x3633B6CC, 0x33333395, 0x58333333, 0xBC8B878A, 0x0100013A, 0x00000020, 0x00000000, 0x40000000, 
0x02000000, 0x00000000, 0x00000000, 0xC0600000, 0x0000C000, 0x040000B0, 0x84CCCC8C, 0xCCCC9AC8, 
0x000030B7, 0xC8480000, 0x00000040, 0x0072B8CC, 0x02000000, 0x0051CA7B, 0x6B020000, 0x0200093A, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0600000, 0x0000C000, 
0x3265C9CC, 0x00000000, 0xCCCC9B05, 0x000040C8, 0xC8480000, 0x00000040, 0x0010A4CC, 0x27000000, 
0x0010A4BC, 0x7C040000, 0x0C00010B, 0xC2000060, 0x20C20C2A, 0x00000008, 0x00000000, 0x00000044, 
0x00460068, 0x00000064, 0x00A00000, 0xCCAC99C9, 0xA99ACBCC, 0x9B9999C9, 0x9999CCCC, 0xCCBC9905, 
0x00004097, 0x00000020, 0x00000000, 0xAC151000, 0x423396CC, 0x0A000918, 0x00000020, 0x00000000, 
0x0A000A00, 0x002882CA, 0x02440000, 0x00202200, 0x00000002, 0x00000000, 0xCCBC7BC8, 0xA7CCCCBC, 
0x7B5715C0, 0x73CBCCCC, 0xC8AA26C2, 0x22222242, 0xB7CCCCCC, 0x65444653, 0x43977967, 0x8A466554, 
0x04000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00220000, 0xCC9999B9, 0xA9BCCCCC, 0x483700C0, 0x88CBCCCC, 0xC8480000, 0x00000040, 0x47648876, 
0x55541273, 0xBC691252, 0x68A7CACC, 0x0C80091F, 0x00000020, 0x20000000, 0xA0000800, 0xAC00800A, 
0x44000000, 0x00004400, 0x00000000, 0x00000000, 0x999A99C9, 0xCBCC9CAB, 0x999999C9, 0x99999999, 
0xCC9A9999, 0x9999C9CC, 0x9956A67B, 0x9AB9CCCC, 0x44444475, 0x44444444, 0x0300013B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0x12000408, 0x2C000060, 0x000040C8, 0x00000000, 0x00000000, 0x00000200, 0x00000000, 
0x00000000, 0x00220000, 0x686567C5, 0xB9A9CACB, 0xCCCCCCC8, 0x656579B7, 0xAC999999, 0x9C99CCCC, 
0x555555A6, 0x55555555, 0x7B559757, 0xB8ACCBCC, 0x08000926, 0x00000000, 0x00000000, 0x00000000, 
0x00220200, 0x80000000, 0x00000000, 0x00000000, 0x00000000, 0xBCCCCCAA, 0xAAAAAAAA, 0xBCCCCCCB, 
0xBBBBBBBC, 0xCCBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xBCCBBBBB, 0xCBCBBBBB, 0xBBBBBBBB, 0x1200092C, 
0x40000060, 0x00400000, 0x00000000, 0x00040200, 0x08000800, 0x00CA8A8C, 0x00000000, 0x00040000, 
0xCCCCCBCB, 0xB857B589, 0xBC8BABC6, 0x33848ACC, 0xCACCCC9C, 0x9C99AC99, 0xAC57B7BC, 0x879AA9CA, 
0x44646897, 0xAA689757, 0x02800846, 0x86000040, 0x0080C62C, 0xCC808600, 0x06000064, 0x00000000, 
0x00000000, 0x200A0000, 0x00662000, 0xBACCCCCC, 0xAAAAAABB, 0xAAAAAACA, 0xCCCCAACA, 0xCBBBBBBB, 
0xBBBBBBBB, 0xCBBCCBCB, 0xBBBBBBBB, 0xBBBBBBBB, 0xCBBBBBBB, 0x01000701, 0x0228C64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xA9CCBCC9, 0x9999B99B, 
0x996966C6, 0x99A9CCCC, 0xCBBBBBBB, 0xBBBBBBBB, 0xA999BBCB, 0xBA999999, 0x99BBCCCC, 0xACAA9B9A, 
0x0300013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 
0x0000CC00, 0x222242B8, 0xA6CC9C25, 0xCC8C24C2, 0x222232B7, 0xC8480000, 0x00000040, 0x3633B6CC, 
0x33333395, 0x58333333, 0xBC8B878A, 0x1200023A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xC0600000, 0x0000C000, 0x010000C0, 0x31A8CC6C, 0xCCAC88C8, 0x888888B8, 
0xCBBBBBBB, 0xBBBBBBBB, 0x888898CC, 0x88888888, 0x88888888, 0x89888888, 0x1200020B, 0xC0000060, 
0x00C00C04, 0x00000002, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00400000, 0xBBBBBBCB, 
0xCCCCBCBB, 0x9A9999C9, 0x9999BACC, 0xCCCCBBBB, 0xBBBBBBCB, 0x88888888, 0x88888888, 0xCC9C8888, 
0x88A899CC, 0x00000930, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x000000C0, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x12000927, 0x00000020, 0x00000000, 0x02200600, 
0x00022004, 0x0C000000, 0x00860000, 0x00000000, 0x00000000, 0x9999CCC9, 0xCB999BB9, 0xCCCCC8C8, 
0x888CC8C8, 0xCCCCBBBB, 0xBBBBBBCB, 0x8888C9CC, 0x88A8999B, 0x88888888, 0x9C888888, 0x00800946, 
0x00000040, 0x0000C000, 0x08008000, 0x00000060, 0x00000000, 0x00000000, 0x000A0000, 0x00660000, 
0xCCCCCCCC, 0xCCBB9CCC, 0x888C88C8, 0xCCC8CC88, 0xCCCCCCCC, 0xCCCCCCCC, 0xB8CBCCCC, 0x88889A88, 
0x88888888, 0x9C888888, 0x03000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00220000, 0xBC9C99C9, 0xCC99C9CC, 0x998988C8, 0x99C9CCCC, 0xCCCCCCCC, 
0xCCCCCCCC, 0x9999CCCC, 0x99999999, 0x99999999, 0xAC9B9999, 0x0100013B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x222242B8, 0xA6CC9C25, 
0xCC8C24C2, 0x222232B7, 0xC8480000, 0x00000040, 0x3633B6CC, 0x33333395, 0x58333333, 0xBC8B878A, 
0x0C00010B, 0xC2000060, 0x20C20C2A, 0x00000008, 0x00000000, 0x00000444, 0x00460068, 0x00000064, 
0x00A00000, 0xBBBBBBCB, 0xBBBBCCBB, 0x8A3412C1, 0x9999CBCC, 0xCCCC7905, 0x00001094, 0x00000000, 
0x01000000, 0xCC9B8825, 0x0063CACC, 0x0A000918, 0x00000020, 0x00000000, 0x0A000A00, 0x002882CA, 
0x02440000, 0x00202200, 0x00000002, 0x00000000, 0xCCCCABC9, 0x99A9CBCC, 0x7B2326C0, 0x64B8CCCC, 
0xCA060000, 0x00002094, 0xC9CCCCCC, 0xBCA9BB8B, 0x004096CB, 0xCC9C6802, 0x0200013B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x222242B8, 
0xA6CC9C25, 0xCC8C24C2, 0x222232B7, 0xC8480000, 0x00000040, 0x3633B6CC, 0x33333395, 0x58333333, 
0xBC8B878A, 0x0100013A, 0x00000020, 0x00000000, 0x40000000, 0x02000000, 0x00000000, 0x00000000, 
0xC0600000, 0x0000CA00, 0x130000C0, 0x2197CC9C, 0xCCCC48B0, 0x004274CA, 0xC68A2400, 0x00000031, 
0x1173CBCC, 0x49321233, 0x1221A6CC, 0xCC8A3633, 0x0A00093A, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xC0600000, 0x0000C000, 0x42A6CB9C, 0x00000011, 0xCCCCBC07, 
0x000084CC, 0xC6060000, 0x00000031, 0x1173CBCC, 0x49011033, 0x1021A6CC, 0xCC8A3612, 0x04000701, 
0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 
0xCCBCABC9, 0x9999CACC, 0x7B0300C0, 0x64B8CCCC, 0xC6060000, 0x00000031, 0x1173CBCC, 0x49111133, 
0xCC79A6CC, 0xCC8ACBCC, 0x0300013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20A00000, 0x0000CC00, 0x222242B8, 0xA6CC9C25, 0xCC8C24C2, 0x222232B7, 0xC8480000, 
0x00000040, 0x3633B6CC, 0x33333395, 0x58333333, 0xBC8B878A, 0x0100013A, 0x00000020, 0x00000000, 
0x40000000, 0x02000000, 0x00000000, 0x00000000, 0xC0600000, 0x0000CA00, 0x130000C0, 0x2197CC9C, 
0xCCCC48B0, 0x004274CA, 0xC68A2400, 0x00000031, 0x1173CBCC, 0x49321233, 0x1221A6CC, 0xCC8A3633, 
0x0C00010B, 0xC2000060, 0x20C20C2A, 0x00000008, 0x00000000, 0x00000444, 0x00460068, 0x00000064, 
0x00A00000, 0xBBBBBBCB, 0xBBBBCCBB, 0x8A3412C1, 0x9999CBCC, 0xCCCC7905, 0x00001094, 0x00000000, 
0x01000000, 0xCC9B8825, 0x0063CACC, 0x0A000918, 0x00000020, 0x00000000, 0x0A000A00, 0x002882CA, 
0x02440000, 0x00202200, 0x00000002, 0x00000000, 0xCCCCABC9, 0x99A9CBCC, 0x7B2326C0, 0x64B8CCCC, 
0xCA060000, 0x00002094, 0xC9CCCCCC, 0xBC691252, 0x004096CB, 0x9B460000, 0x1200093A, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0600000, 0x0000C000, 0x42A6CB9C, 
0x00000011, 0xCCCCBC07, 0x000084CC, 0xC6060000, 0x00000031, 0x1173CBCC, 0x49011033, 0x1021A6CC, 
0xCC8A3612, 0x04000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00220000, 0xCCBCABC9, 0x9999CACC, 0x7B0300C0, 0x64B8CCCC, 0xC6060000, 0x00000031, 
0x1173CBCC, 0x49111133, 0xCC79A6CC, 0xCC8ACBCC, 0x0100013B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x222242B8, 0xA6CC9C25, 0xCC8C24C2, 
0x222232B7, 0xC8480000, 0x00000040, 0x3633B6CC, 0x33333395, 0x58333333, 0xBC8B878A, 0x1200093A, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0600000, 0x0000C000, 
0x42A6CB9C, 0x00000011, 0xCCCCBC07, 0x000084CC, 0xC6060000, 0x00000031, 0x1173CBCC, 0x49011033, 
0x1021A6CC, 0xCC8A3612, 0x0C00010B, 0xC2000060, 0x20C20C2A, 0x00000008, 0x00000000, 0x00000444, 
0x00460068, 0x00000064, 0x00A00000, 0xBBBBBBCB, 0xBBBBCCBB, 0x8A3412C1, 0x9999CBCC, 0xCCCC7905, 
0x00001094, 0x00000000, 0x01000000, 0xCC9B8825, 0x0063CACC, 0x0A000918, 0x00000020, 0x00000000, 
0x0A000A00, 0x002882CA, 0x02440000, 0x00202200, 0x00000002, 0x00000000, 0xCCCCABC9, 0x99A9CBCC, 
0x7B2326C0, 0x64B8CCCC, 0xCA060000, 0x00002094, 0xC9CCCCCC, 0x63A8BB8B, 0x00000000, 0xCC9C6802, 
0x0200013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 
0x0000CC00, 0x222242B8, 0xA6CC9C25, 0xCC8C24C2, 0x222232B7, 0xC8480000, 0x00000040, 0x3633B6CC, 
0x33333395, 0x58333333, 0xBC8B878A, 0x0800013A, 0x00000020, 0x00000000, 0x40000000, 0x02000000, 
0x00000000, 0x00000000, 0xC0600000, 0x0000CA00, 0x130000C0, 0x2197CC9C, 0xCCCC48B0, 0x004274CA, 
0xC68A2400, 0x00000031, 0x1173CBCC, 0x49321233, 0x1221A6CC, 0xCC8A3633, 0x04000701, 0x0228C64C, 
0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCCBCABC9, 
0x9999CACC, 0x7B0300C0, 0x64B8CCCC, 0xC6060000, 0x00000031, 0x1173CBCC, 0x49111133, 0xCC79A6CC, 
0xCC8ACBCC, 0x00242A0B, 0x07070607, 0x07050906, 0x00070707, 0x00000000, 0x02010100, 0x02040004, 
0x00000000, 0x00000000, 0xC14242C1, 0xC1CFC1CF, 0x00424242, 0x00000000, 0x69696969, 0x69696969, 
0x00696969, 0x00000000, 0x47474747, 0x47474747, 0x00474747, 0x00000000, 0x00800716, 0x00000040, 
0x00000000, 0xC0800800, 0x2C000002, 0x02000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCB99B9, 
0x999999CA, 0x9B9999C9, 0xB9B9BCCA, 0xCBCCCC0A, 0x00000073, 0x98C9CCBC, 0x00002096, 0x00000000, 
0x27000000, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20A00000, 0x0000CC00, 0x460200B0, 0xCACCBC89, 0xCCCC5901, 0x000040C8, 0xC8480000, 0x00000040, 
0x0062CACC, 0xCCBC0800, 0x4600C3CC, 0xCCCCCC8A, 0x03000F3B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000AC00, 0x000000B0, 0xCCCCCC68, 0xCCAC3700, 
0x000040C8, 0xC8480000, 0x00000040, 0x213495CC, 0x88260020, 0x54126376, 0xCC8A6854, 0x1000060B, 
0xC6000060, 0x20C20C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00A00000, 
0xCCAA99B9, 0x99C9CCCC, 0x9A9999C9, 0x99C9CCBC, 0xCACCCC0C, 0x23004285, 0x00000010, 0x00000000, 
0xCC9B4602, 0x64A8CCCC, 0x0E000943, 0x00000040, 0x00000000, 0x0CC40A00, 0x002420C6, 0x22000000, 
0x00006200, 0x00000000, 0x00000000, 0xCCCCABCA, 0xCACCCCCC, 0x480110C0, 0x41B7CCCC, 0xC9CCCC9C, 
0x00129999, 0xCCCCCCCC, 0x22223295, 0x32223322, 0xCC8A2421, 0x00800912, 0x20000040, 0x00222000, 
0x0000C040, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xBC9999C9, 0x9CBBCCCC, 
0x583700C0, 0xB9CCCCCC, 0xC9999999, 0x00009999, 0xBCCCCCCC, 0x552374B8, 0x57353221, 0x89888A68, 
0x02000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00220000, 0xAB9A99B9, 0xCBCCCCCC, 0x990900C0, 0x99B9CCCC, 0xC8480000, 0x00000040, 0x9999B9BB, 
0x99999999, 0x9A999999, 0xCCCBBCCC, 0x03000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x0C00053A, 0x00000020, 
0x00000000, 0x40000000, 0x02000000, 0x00000000, 0x00000000, 0xC0600000, 0x0000C000, 0x040000B0, 
0x84CCCC8C, 0xCCCCABC8, 0x000030B7, 0xC8480000, 0x00000040, 0x0083CCCC, 0x37323600, 0x0052B98A, 
0x8B040000, 0x0C00093A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xC0600000, 0x0000C000, 0x3265C9CC, 0x00000000, 0xCCCCA806, 0x000063C8, 0xC8480000, 0x00000040, 
0x0030B9CC, 0x49010000, 0x553663BA, 0x8C045165, 0x0C00060B, 0xC0000060, 0x00C00C04, 0x00000002, 
0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00400000, 0x9B9999B9, 0x99999999, 0x999999C9, 
0x99999999, 0xCCBC9A06, 0x000040A7, 0x02000000, 0x00000041, 0xBC570200, 0x0010A5CC, 0x0C000918, 
0x00000020, 0x00000000, 0x04000400, 0x000220C4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xCBCC9CC9, 0xA9CACCAC, 0x480000C0, 0x62CACCCC, 0xC9999999, 0x00009999, 0xC8CCCCCC, 0x00000030, 
0x01411400, 0x9C583544, 0x03000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00220000, 0xCC9B99B9, 0xB9CCCCBC, 0x990900C0, 0x99C9CCCC, 0xC8480000, 
0x00000040, 0x99999999, 0x99999999, 0xAC999999, 0x9999CACC, 0x03000F3B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0x1200053A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0600000, 
0x0000C000, 0x222273B3, 0xCCCC8C24, 0xCCCCC9C9, 0x99999CCB, 0xBBBBBBBB, 0xBBBBBBBB, 0xC9CC89C9, 
0xCCBA899A, 0xCB9CB9AB, 0xCCCBBCBA, 0x1200060B, 0xC0000060, 0x00C00C04, 0x00000002, 0x00000000, 
0x00000000, 0x00000002, 0x00000000, 0x00400000, 0x9C9C9BB9, 0xC9BACCCC, 0xAAACAACA, 0xACCCCCCC, 
0xBBBBBBBB, 0xBBBBBBBB, 0x88888898, 0x88888888, 0xBCCCBB88, 0xCC9CC9CC, 0x00000930, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000000C0, 0x00000000, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0x12000927, 0x00000020, 0x00000000, 0x02200600, 0x00022004, 0x0C000000, 0x00860000, 
0x00000000, 0x00000000, 0xCBCACCCC, 0xBCBBCCBA, 0xACCCCCCA, 0xAACCCCAC, 0xBBBBBBBB, 0xBBBBBBBB, 
0xCCCCCBCC, 0x9BB999CC, 0x99B99999, 0xCCACAB9B, 0x00800946, 0x00000040, 0x0000C000, 0x08008000, 
0x00000060, 0x00000000, 0x00000000, 0x000A0000, 0x00660000, 0xACBC9CC9, 0xCCC9CC99, 0xBBBBCBCB, 
0xCCCCCCBC, 0xBBBBBBBB, 0xBBBBBBBB, 0xCCBCCCCC, 0xBBCBCBBC, 0xBBCBBCCB, 0xCCBBBCBB, 0x03000701, 
0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 
0xACC999B9, 0xCCCCCCCC, 0xAAAACACA, 0xCACCCCCC, 0xBBBBBBBB, 0xBBBBBBBB, 0xABCBCCCC, 0x9999ABAB, 
0x99CBBB99, 0xCCBA9999, 0x00800716, 0x00000040, 0x00000000, 0xC0800800, 0x2C000002, 0x02000000, 
0x00000000, 0x00000000, 0x00000000, 0xCC9C99B9, 0xC99CBBCC, 0xCC9999C9, 0x99CCCCCB, 0xC8CCCCC8, 
0x6666A666, 0x65CACCCC, 0x55555555, 0x55555555, 0x69555555, 0x02000F3B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x460200B0, 0xCACCBC89, 
0xCCCC5901, 0x000040C8, 0xC8480000, 0x00000040, 0x0062CACC, 0xCCBC0800, 0x4600C3CC, 0xCCCCCC8A, 
0x08000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 
0x0000AC00, 0x333333B3, 0xCACCCC68, 0xCC8C34C3, 0x333343C8, 0xC84844C4, 0x44444444, 0x2222A5CC, 
0x22222222, 0x22329725, 0xCCBA5A22, 0x12000529, 0x00000060, 0x04000000, 0x00000000, 0x00000000, 
0x00004400, 0x0040009A, 0x00000000, 0x00000000, 0x999999B9, 0x9999C9CC, 0x999999C9, 0x99A9CCCC, 
0x3384CCCC, 0x33333333, 0x11111111, 0x11111111, 0xCC9B8614, 0x64A8CCCC, 0x12000943, 0x00000040, 
0x00000000, 0x0CC40A00, 0x002420C6, 0x22000000, 0x00006200, 0x00000000, 0x00000000, 0xACCAAACA, 
0xCACCCCCC, 0x483333C3, 0x3384CCCC, 0xC9CCCCCC, 0x33339999, 0xCBCCCCCC, 0x529A6996, 0x11111111, 
0x9B683511, 0x00800912, 0x20000040, 0x00222000, 0x0000C040, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xC9BB99CC, 0xC9CCCCCC, 0xCB7877C7, 0xCCCCCCCC, 0xC99999C9, 0x88889999, 
0xCCCCCCCC, 0xAA9AABCB, 0x87ABBBAC, 0x99779778, 0x02000701, 0x0228C64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xAA9A99B9, 0xC99CCCBC, 0x994944C4, 
0x99B9CCCC, 0xC84844C4, 0x44444444, 0x99A9BBCC, 0x99999999, 0x99999999, 0xCCBCAA99, 0x01000F3B, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 
0x460200B0, 0xCACCBC89, 0xCCCC5901, 0x000040C8, 0xC8480000, 0x00000040, 0x0062CACC, 0xCCBC0800, 
0x4600C3CC, 0xCCCCCC8A, 0x12000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20C00000, 0x0000AC00, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x12000739, 0x06000020, 0x00000040, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000006C0, 0x00C0000C, 0x9C9999B9, 0x9999CBCC, 
0x99999999, 0x99CACCCC, 0xC978B908, 0xBC87CCCC, 0x000020B6, 0x00000000, 0x26000000, 0xCCCCCC7B, 
0x12000943, 0x00000040, 0x00000000, 0x0CC40A00, 0x002220C6, 0x22000000, 0x00006200, 0x00000000, 
0x00000000, 0xAC9999C9, 0xCCBCCCCC, 0x040000C0, 0x85CACC8C, 0xC99A9999, 0x00009999, 0xCBCCCCCC, 
0x11102183, 0x01000001, 0x9B683532, 0x00800912, 0x20000040, 0x00222000, 0x0000C040, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCACCCC, 0xCCCCCCCC, 0xBBBBBBCB, 0xCCCCCCCC, 
0xCBBBBBCB, 0xBBBBBBBB, 0xCCCBCCCB, 0xAAAAAACA, 0xAAAAAAAC, 0xCCCCCCCC, 0x02000701, 0x0228C64C, 
0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xAC9999B9, 
0xCCCCCCCC, 0x990900C0, 0x99C9CC9C, 0xC8480000, 0x00000040, 0x999999AB, 0x99999999, 0xBC999999, 
0x99CACCCC, 0x00800716, 0x00000040, 0x00000000, 0xC0800800, 0x2C000002, 0x02000000, 0x00000000, 
0x00000000, 0x00000000, 0xCCCB99B9, 0x999999CA, 0x9B9999C9, 0xB9B9BCCA, 0xCBCCCC0A, 0x00000073, 
0x98C9CCBC, 0x00002096, 0x00000000, 0x27000000, 0x01000F3B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x460200B0, 0xCACCBC89, 0xCCCC5901, 
0x000040C8, 0xC8480000, 0x00000040, 0x0062CACC, 0xCCBC0800, 0x4600C3CC, 0xCCCCCC8A, 0x1000060B, 
0xC6000060, 0x20C20C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00A00000, 
0xCCAA99B9, 0x99C9CCCC, 0x9A9999C9, 0x99C9CCBC, 0xCACCCC0C, 0x23004285, 0x00000010, 0x00000000, 
0xCC693400, 0x64A8CCCC, 0x0E000943, 0x00000040, 0x00000000, 0x0CC40A00, 0x002420C6, 0x22000000, 
0x00006200, 0x00000000, 0x00000000, 0xCCCCABCA, 0xCACCCCCC, 0x480110C0, 0x41B7CCCC, 0xC9CCCC9C, 
0x00129999, 0xCCCCCCCC, 0x22223295, 0xCC9B4622, 0xCCAACCCC, 0x00800912, 0x20000040, 0x00222000, 
0x0000C040, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xBC9999C9, 0x9CBBCCCC, 
0x583700C0, 0xB9CCCCCC, 0xC9999999, 0x00009999, 0xBCCCCCCC, 0x552374B8, 0x57353221, 0x89888A68, 
0x00000702, 0x0048CA6C, 0x00000000, 0x00400000, 0x00000000, 0x00000000, 0x00000000, 0x00040000, 
0x00000000, 0xCCAA9AB9, 0xCACCCCCC, 0xCCBC6AC2, 0x2086CACC, 0xC9999999, 0x00009999, 0xCACCCCCC, 
0x44004086, 0xAC684444, 0xCCCCCCCC, 0x01000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x460200B0, 0xCACCAC89, 0xCCCC5901, 0x000040C8, 
0xC8480000, 0x00000040, 0x0062CACC, 0xCCBC0800, 0x4600C3CC, 0xCCCCCC8A, 0x03000F3B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0xAB9A89B4, 
0xCCCCCCAC, 0xCCAC3700, 0x000040C8, 0xC8480000, 0x00000040, 0xCCCCCCCC, 0xCC8A86CA, 0xAC68B8CC, 
0xCCCCCCCC, 0x02000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00220000, 0xACA99BB9, 0xCCCCCCCC, 0x992900C0, 0x99C9CCBC, 0xC848950C, 0x00101540, 
0xCC9A9999, 0x99CACCCC, 0x99999999, 0x9999A9AB, 0x00800716, 0x00000040, 0x00000000, 0xC0800800, 
0x2C000002, 0x02000000, 0x00000000, 0x00000000, 0x00000000, 0xCCBC99B9, 0x99A9AACC, 0x9B9999C9, 
0x99CACCCC, 0xC8CCCC09, 0x00002046, 0x97CACCAC, 0x00001065, 0x00000000, 0x15000000, 0x01000F3B, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CC00, 
0x460200B0, 0xCACCBC89, 0xCCCC5901, 0x000040C8, 0xC8480000, 0x00000040, 0x0062CACC, 0xCCBC0800, 
0x4600C3CC, 0xCCCCCC8A, 0x08000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20C00000, 0x0000AC00, 0x000000B0, 0xCCCCCC68, 0xCCAC3700, 0x000040C8, 0xC8480000, 
0x00000040, 0x213495CC, 0x88260020, 0x54126376, 0xCC8A6854, 0x1000060B, 0xC6000060, 0x20C20C2A, 
0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00A00000, 0xCCAA99B9, 0x99C9CCCC, 
0x9A9999C9, 0x99C9CCBC, 0xCACCCC0C, 0x23004285, 0x00000010, 0x00000000, 0xCC9B4602, 0x64A8CCCC, 
0x1200092D, 0x00000040, 0x00000000, 0x00000000, 0x00000006, 0x00000000, 0x000A0000, 0x00000000, 
0x00000000, 0xA8CBCC0C, 0x33446576, 0xAC2511C0, 0x225397CB, 0xBCAAAA9A, 0x0046CBCC, 0xCCCCCCCC, 
0x00103295, 0x00000000, 0xCC8A2401, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20C00000, 0x0000CC00, 0x460200B0, 0xCACCBC89, 0xCCCC5901, 0x000040C8, 
0xC8480000, 0x00000040, 0x0062CACC, 0xCCBC0800, 0x4600C3CC, 0xCCCCCC8A, 0x08000F3B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000AC00, 0x000000B0, 
0xCCCCCC68, 0xCCAC3700, 0x000040C8, 0xC8480000, 0x00000040, 0x213495CC, 0x88260020, 0x54126376, 
0xCC8A6854, 0x10000509, 0x6C000060, 0x00800766, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x9C9999B9, 0xA9CCCCCC, 0x9A9999C9, 0x99A9CCCC, 0xCCCCCC0A, 0xBC57CBCC, 
0x2464A8CC, 0x00001031, 0x69231000, 0xCCCCCCCC, 0x00000733, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000800, 0x00000004, 0xCCCC48B0, 0x000040C8, 0xCC580100, 
0x0020A6CC, 0x95150000, 0xAC26A626, 0x00000064, 0x00000000, 0xCCCC5A01, 0xC9CCCCCC, 0x12000917, 
0x00000040, 0x00000000, 0x0CC40A00, 0x002220C6, 0x22000000, 0x00006200, 0x00000000, 0x00000000, 
0xACAAAACA, 0xCCCCCCCC, 0x480110C0, 0x41B7CCCC, 0xC9CCCC9C, 0x00249999, 0xCCCCCCCC, 0x22223295, 
0x32223322, 0xCC8A2421, 0x00800712, 0x20000040, 0x00222000, 0x0000C040, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xAC9999C9, 0x9CBBCCCC, 0xAC3700C0, 0xB8CCCCCC, 0xC9999999, 
0x00009999, 0xACCACCCB, 0x544385B9, 0x79774523, 0x9A889A89, 0x02000701, 0x0268C64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xAC9A99B9, 0xCCCCCCCC, 
0x990900C0, 0x99A9CCCC, 0xC86A2206, 0x0030A756, 0x99BACCCC, 0x99999999, 0xCC9A9999, 0xCCCCCCCC, 
0x01000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 
0x0000AC00, 0x460200B0, 0xCCCCCC89, 0xCCCC5901, 0x000040C8, 0xC8480000, 0x00000040, 0x2164CACC, 
0xCCBC0820, 0x5612C3CC, 0xCCCCCC8A, 0x0C00060B, 0xC0000060, 0x00C00C04, 0x00000002, 0x00000000, 
0x00000550, 0x00000002, 0x00000000, 0x00400000, 0xBCCBBBCB, 0xCCBBBBCC, 0x391000C0, 0xC9BCBAAC, 
0xCCCCCC3C, 0x33334396, 0x9C590200, 0x013185CC, 0xCC9B8848, 0x0063CACC, 0x0C000918, 0x00000020, 
0x00000000, 0x04000400, 0x000220C4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xAA9999C9, 
0xCCBBBCCC, 0x040000C0, 0x95C9CC8C, 0xC7373333, 0x33333354, 0xC9CCCCCC, 0xBCA9BB8B, 0x004096CB, 
0xCC9C6802, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20C00000, 0x0000AC00, 0x460200B0, 0xCCCCCC89, 0xCCCC5901, 0x000040C8, 0xC8480000, 0x00000040, 
0x2164CACC, 0xCCBC0820, 0x5612C3CC, 0xCCCCCC8A, 0x0400053A, 0x00000020, 0x00000000, 0x40000000, 
0x02000000, 0x00000000, 0x00000000, 0xB0600000, 0x0000B900, 0x130000C0, 0x31A8CC9C, 0xCCCC6AC2, 
0x000030A7, 0xC7373333, 0x33333354, 0x5586CBCC, 0x49222233, 0x2222A5CC, 0xCC8A3622, 0x0C00093A, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0600000, 0x0000C000, 
0x52A7CB9C, 0x33221123, 0xCCCCCC08, 0x000062CA, 0xCBABAAAA, 0xAAAAAAAA, 0x94CCCCCC, 0x49541233, 
0x2311A5CC, 0xCC8A3632, 0x03000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00220000, 0x9B9999C9, 0xBC9ACCCC, 0x260000C0, 0x66C8CCAC, 0xC7373333, 
0x33333354, 0x8975CBCC, 0x4984CBCC, 0x9C14A5CC, 0xCC8AB7CC, 0x02000F3B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000AC00, 0x460200B0, 0xCCCCCC89, 
0xCCCC5901, 0x000040C8, 0xC8480000, 0x00000040, 0x2164CACC, 0xCCBC0820, 0x5612C3CC, 0xCCCCCC8A, 
0x0400053A, 0x00000020, 0x00000000, 0x40000000, 0x02000000, 0x00000000, 0x00000000, 0xB0600000, 
0x0000B900, 0x130000C0, 0x31A8CC9C, 0xCCCC6AC2, 0x000030A7, 0xC7373333, 0x33333354, 0x5586CBCC, 
0x49222233, 0x2222A5CC, 0xCC8A3622, 0x0C00060B, 0xC0000060, 0x00C00C04, 0x00000002, 0x00000000, 
0x00000550, 0x00000002, 0x00000000, 0x00400000, 0xBCCBBBCB, 0xCCBBBBCC, 0x391000C0, 0xC9BCBAAC, 
0xCCCCCC3C, 0x33334396, 0x9C590200, 0x013185CC, 0xCC9B8848, 0x0063CACC, 0x0C000918, 0x00000020, 
0x00000000, 0x04000400, 0x000220C4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xAA9999C9, 
0xCCBBBCCC, 0x040000C0, 0x95C9CC8C, 0xC7373333, 0x33333354, 0xC9CCCCCC, 0xBC692252, 0x004096CB, 
0xCC9C6802, 0x01000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20C00000, 0x0000AC00, 0x460200B0, 0xCCCCCC89, 0xCCCC5901, 0x000040C8, 0xC8480000, 0x00000040, 
0x2164CACC, 0xCCBC0820, 0x5612C3CC, 0xCCCCCC8A, 0x0C00093A, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xC0600000, 0x0000C000, 0x52A7CB9C, 0x33221123, 0xCCCCCC08, 
0x000062CA, 0xCBABAAAA, 0xAAAAAAAA, 0x94CCCCCC, 0x49541233, 0x2311A5CC, 0xCC8A3632, 0x03000701, 
0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 
0x9B9999C9, 0xBC9ACCCC, 0x260000C0, 0x66C8CCAC, 0xC7373333, 0x33333354, 0x8975CBCC, 0x4984CBCC, 
0x9C14A5CC, 0xCC8AB7CC, 0x01000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20C00000, 0x0000AC00, 0x460200B0, 0xCCCCCC89, 0xCCCC5901, 0x000040C8, 0xC8480000, 
0x00000040, 0x2164CACC, 0xCCBC0820, 0x5612C3CC, 0xCCCCCC8A, 0x0C00093A, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0600000, 0x0000C000, 0x52A7CB9C, 0x33221123, 
0xCCCCCC08, 0x000062CA, 0xCBABAAAA, 0xAAAAAAAA, 0x94CCCCCC, 0x49541233, 0x2311A5CC, 0xCC8A3632, 
0x0C00060B, 0xC0000060, 0x00C00C04, 0x00000002, 0x00000000, 0x00000550, 0x00000002, 0x00000000, 
0x00400000, 0xBCCBBBCB, 0xCCBBBBCC, 0x391000C0, 0xC9BCBAAC, 0xCCCCCC3C, 0x33334396, 0x9C590200, 
0x013185CC, 0xCC9B8848, 0x0063CACC, 0x0C000918, 0x00000020, 0x00000000, 0x04000400, 0x000220C4, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xAA9999C9, 0xCCBBBCCC, 0x040000C0, 0x95C9CC8C, 
0xC7373333, 0x33333354, 0xA5CCCCBA, 0x63A8BB8B, 0x00000000, 0xCC9C6802, 0x02000F3B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000AC00, 0x460200B0, 
0xCCCCCC89, 0xCCCC5901, 0x000040C8, 0xC8480000, 0x00000040, 0x2164CACC, 0xCCBC0820, 0x5612C3CC, 
0xCCCCCC8A, 0x0400053A, 0x00000020, 0x00000000, 0x40000000, 0x02000000, 0x00000000, 0x00000000, 
0xB0600000, 0x0000B900, 0x130000C0, 0x31A8CC9C, 0xCCCC6AC2, 0x000030A7, 0xC7373333, 0x33333354, 
0x5586CBCC, 0x49222233, 0x2222A5CC, 0xCC8A3622, 0x03000701, 0x0228C64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0x9B9999C9, 0xBC9ACCCC, 0x260000C0, 
0x66C8CCAC, 0xC7373333, 0x33333354, 0x8975CBCC, 0x4984CBCC, 0x9C14A5CC, 0xCC8AB7CC, 0x00FF0809, 
0x07090B0A, 0x07090808, 0x00000009, 0x00000000, 0x00000000, 0x00000300, 0x00000000, 0x00000000, 
0x40434540, 0x40404F45, 0x00000040, 0x00000000, 0xBDBDBDBD, 0xBDBDBDBD, 0x000000BD, 0x00000000, 
0xAEAEAEAE, 0xBEBEAEAE, 0x000000BE, 0x00000000, 0x0000013B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CC00, 0x222222B2, 0xC8CC8C24, 0xCCCC48C2, 
0x222242C8, 0xC8480000, 0x00000040, 0xBBBB9999, 0xBBBBBBBB, 0xBBBBBBBB, 0x9999BBBB, 0x0300013B, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CC00, 
0x000000B0, 0x84CC8C04, 0xCC8C0400, 0x000084CC, 0xC8480000, 0x00000040, 0xBBBB9999, 0xBBBBBBBB, 
0xBBBBBBBB, 0x9999BBBB, 0x0C00013A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xC0600000, 0x0000C000, 0x4840C8B8, 0x0084CCCC, 0xCCCCAC06, 0x000040C8, 0xC8480000, 
0x00000040, 0x1094CABC, 0x00000000, 0x00004102, 0x5A010000, 0x0E00010B, 0xC2000060, 0x20C20C2A, 
0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00A00000, 0x9A9999B9, 0xA99ABBCC, 
0x9B9999C9, 0x99A9CCCC, 0xCACCBC09, 0x00000062, 0x00000000, 0x00000000, 0xAC150000, 0x000083CC, 
0x0E000918, 0x00000020, 0x00000000, 0x04000400, 0x000220C4, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x5CCCCABC, 0x738BCCCA, 0xCCCCCC08, 0x0020A6CB, 0xC8480000, 0x00000040, 0x23130000, 
0xCACBCC8C, 0x51CACB89, 0x00000000, 0x0A000704, 0x00C00260, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCBCCACBC, 0x0084CCBC, 0xCCCACB08, 0x0020A6CA, 
0xC8480000, 0x00000040, 0x00515A01, 0x00000000, 0x9C380000, 0x7298CCCC, 0x12000946, 0x86000040, 
0x0080C62C, 0xCC808600, 0x06000064, 0x00000000, 0x00000000, 0x200A0000, 0x00662000, 0xCBC8CCBC, 
0xC8C8CCCC, 0xACABC808, 0x73ABC8CC, 0xCCBC7B09, 0x5973CBCC, 0xA5CCCCBC, 0x00006234, 0x76660300, 
0x9B987776, 0x12000946, 0x86000040, 0x0080C62C, 0xCC808600, 0x06000064, 0x00000000, 0x00000000, 
0x200A0000, 0x00662000, 0x9C9999C9, 0xCCCCCCCB, 0x555901C0, 0xCCCCCC99, 0xC9999999, 0x0040C99A, 
0x99CCAACB, 0x12000072, 0xA8991400, 0x8B98CC89, 0x00800112, 0x00000040, 0x00008000, 0x00008060, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCCACCA, 0xCACACCCC, 0x999999C9, 
0xC9CC9C99, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCACCA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0x04000701, 
0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 
0xAA999AB9, 0xCCCAA99C, 0x990900C0, 0x99CACCCC, 0xC848620A, 0x00000040, 0x99A9CCCC, 0x99999999, 
0x99999999, 0x99A9BA99, 0x0080091F, 0x00000020, 0x20000000, 0xA0000800, 0xAC60800A, 0x44000000, 
0x00004400, 0x00000000, 0x00000000, 0x99CCCCBC, 0xC9CC99BC, 0xC99999C9, 0x99CCC9CC, 0xCCACCCCC, 
0xAAAAAACC, 0xBCCCACAA, 0xAACACCCC, 0xAAAAAACA, 0xAAAAAAAA, 0x0000013B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CC00, 0x222222B2, 0xC8CC8C24, 
0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 0xBBBB9999, 0xBBBBBBBB, 0xBBBBBBBB, 0x9999BBBB, 
0x0200013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 
0x0000CC00, 0x000000B0, 0x84CC8C04, 0xCC8C0400, 0x000084CC, 0xC8480000, 0x00000040, 0xBBBB9999, 
0xBBBBBBBB, 0xBBBBBBBB, 0x9999BBBB, 0x0E000F08, 0x2C000060, 0x000040C8, 0x00000000, 0x00000000, 
0x00000200, 0x00000000, 0x00000000, 0x00220000, 0xCCC9BCBA, 0xBCAACACC, 0xBC8859C2, 0xB7C8CC8C, 
0xCCCCABCC, 0x9A85CCCC, 0x334398CB, 0x33333333, 0x7A675733, 0xCCACBB9B, 0x08000926, 0x00000080, 
0x00000000, 0x40200600, 0x04BC6986, 0xCA000000, 0x00A88406, 0x00000000, 0x00000000, 0x9A7859B8, 
0xCCCCCCBC, 0xAA9948C3, 0xB8CCCCCC, 0xC88CCBCC, 0x5655B758, 0xCCCCCCCC, 0x859888B8, 0x44444444, 
0x7B444444, 0x0000013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20C00000, 0x0000CC00, 0x222222B2, 0xC8CC8C24, 0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 
0xBBBB9999, 0xBBBBBBBB, 0xBBBBBBBB, 0x9999BBBB, 0x0200013B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CC00, 0x000000B0, 0x84CC8C04, 0xCC8C0400, 
0x000084CC, 0xC8480000, 0x00000040, 0xBBBB9999, 0xBBBBBBBB, 0xBBBBBBBB, 0x9999BBBB, 0x07000506, 
0xCB000060, 0x22C2A6AA, 0x00008002, 0x00000000, 0x00006686, 0x008600AA, 0x00000044, 0x00880000, 
0xCC9ACCBB, 0xCCCCBCCC, 0xC9C87BC5, 0x8CCCCCCC, 0xCC9CC8C8, 0x7BC8CCB8, 0xCBCCCC8B, 0x666676CB, 
0xCB9B7A66, 0x9767B7AC, 0x00000735, 0x02000020, 0x00000020, 0x00220000, 0x00000000, 0x00000000, 
0x00000000, 0x800C0000, 0x00442000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x00800746, 0x86000040, 0x0000C000, 
0x0C808600, 0x00000080, 0x00000000, 0x00000000, 0x000A0000, 0x00660000, 0xCC888CCC, 0xCCCCCCCC, 
0xCCACAACA, 0xCACCCACC, 0xCBBBBBCB, 0xBBBBBBBB, 0xCCCCCCCB, 0xBBBBCBCC, 0xBBBBBBBB, 0xBBCCBBBB, 
0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00220000, 0xAA9BAAB7, 0xCCCACCCC, 0x8B8414C1, 0x7387CCCC, 0xC9CCC9CC, 0x99999999, 0x9AC9CB8B, 
0x47645588, 0xCCCC89AA, 0x7768A7CA, 0x1280070B, 0xC2000060, 0x22C20C2A, 0x00000008, 0x00000000, 
0x00000044, 0x00460068, 0x00000064, 0x00A00000, 0x9AB9CCCB, 0xCCCC9C99, 0x999999C9, 0x99999999, 
0xAABBCB0C, 0x0000CCBC, 0x111142B8, 0xBBCA9B24, 0xBAACCABB, 0x8A54A9CC, 0x0000082D, 0x82000060, 
0x40840000, 0x00002A80, 0x00000006, 0x02000600, 0x80AC8628, 0x00000000, 0x00040000, 0xB9B9CC8C, 
0xC8CCACAA, 0xCCCACAC8, 0x777797CC, 0xCBCCCC5C, 0x555565B8, 0x0010A5CB, 0x00000000, 0x99691400, 
0xCCACCB9A, 0x12000914, 0x00000060, 0x00000000, 0xAAC80A00, 0x00000004, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x758978C5, 0xCBBB9A37, 0x483333C3, 0x43C8CCC8, 0x3343C8CC, 0x33333333, 
0x51BACCBC, 0x00000000, 0x12000000, 0x56363622, 0x0000013B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CC00, 0x222222B2, 0xC8CC8C24, 0xCCCC48C2, 
0x222242C8, 0xC8480000, 0x00000040, 0xBBBB9999, 0xBBBBBBBB, 0xBBBBBBBB, 0x9999BBBB, 0x0300013B, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CC00, 
0x000000B0, 0x84CC8C04, 0xCC8C0400, 0x000084CC, 0xC8480000, 0x00000040, 0xBBBB9999, 0xBBBBBBBB, 
0xBBBBBBBB, 0x9999BBBB, 0x12000F28, 0x20000080, 0x00200000, 0x00000000, 0x00000000, 0x00000000, 
0x000000C4, 0x00000004, 0x00000000, 0x572222C2, 0xA8CACCCC, 0x8C3433C3, 0x3373CBC8, 0xC8CBCCC8, 
0x333333A6, 0x00000000, 0x00000000, 0xCCAC4901, 0x000031C7, 0x0C000943, 0x00000040, 0x00000000, 
0x0CC40C00, 0x000200C6, 0x22000000, 0x00006200, 0x00000000, 0x00000000, 0xAC9A99C9, 0x9999BACC, 
0x8C3433C3, 0x33B78B8C, 0xC9B9C9C9, 0x33339999, 0xCACCCCCC, 0x00002086, 0x00000000, 0x9A351200, 
0x00800912, 0x20000040, 0x00222000, 0x0000C040, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xC99999CC, 0xC9CBCCCC, 0xCB7877C7, 0xCCCCCCCC, 0xC99999C9, 0x88889999, 0xCCCCCCCC, 
0xAA9AABCB, 0x87ABBBAC, 0x99779778, 0x02000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCC9C99C9, 0x9999ABCC, 0xAC4A22C2, 0x9999CCCC, 
0xCAAA8877, 0xC77787A8, 0xCACCCCCC, 0x99999999, 0x99999999, 0xCCCCBC9B, 0x0000013B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CC00, 0x222222B2, 
0xC8CC8C24, 0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 0xBBBB9999, 0xBBBBBBBB, 0xBBBBBBBB, 
0x9999BBBB, 0x0300013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20C00000, 0x0000CC00, 0x000000B0, 0x84CC8C04, 0xCC8C0400, 0x000084CC, 0xC8480000, 0x00000040, 
0xBBBB9999, 0xBBBBBBBB, 0xBBBBBBBB, 0x9999BBBB, 0x0100013A, 0x00000020, 0x00000000, 0x40000000, 
0x02000000, 0x00000000, 0x00000000, 0xC0600000, 0x0000C000, 0x040000B0, 0x84CCCC8C, 0xCCCC9AC8, 
0x000030B7, 0xC8480000, 0x00000040, 0x0072B8CC, 0x02000000, 0x0051CA7B, 0x6B020000, 0x0200093A, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0600000, 0x0000C000, 
0x3265C9CC, 0x00000000, 0xCCCC9B05, 0x000040C8, 0xC8480000, 0x00000040, 0x0010A4CC, 0x27000000, 
0x0010A4BC, 0x7C040000, 0x0C00010B, 0xC2000060, 0x20C20C2A, 0x00000008, 0x00000000, 0x00000044, 
0x00460068, 0x00000064, 0x00A00000, 0xCCAC99C9, 0xA99ACBCC, 0x9B9999C9, 0x9999CCCC, 0xCCBC9905, 
0x00004097, 0x00000020, 0x00000000, 0xAC151000, 0x423396CC, 0x0A000918, 0x00000020, 0x00000000, 
0x0A000A00, 0x002882CA, 0x02440000, 0x00202200, 0x00000002, 0x00000000, 0xCCBC7BC8, 0xA7CCCCBC, 
0x7B5715C0, 0x73CBCCCC, 0xC8AA26C2, 0x22222242, 0xB7CCCCCC, 0x65444653, 0x43977967, 0x8A466554, 
0x04000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00220000, 0xCC5937B1, 0xC9CCCCCC, 0x483700C0, 0x88CBCCCC, 0xC8480000, 0x00000040, 0x47648876, 
0x55541273, 0xBC691252, 0x68A7CACC, 0x0C80091F, 0x00000020, 0x20000000, 0xA0000800, 0xAC00800A, 
0x44000000, 0x00004400, 0x00000000, 0x00000000, 0x999A99C9, 0xCBCC9CAB, 0x999999C9, 0x99999999, 
0xCC9A9999, 0x9999C9CC, 0x9956A67B, 0x9AB9CCCC, 0x44444475, 0x44444444, 0x0000013B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CC00, 0x222222B2, 
0xC8CC8C24, 0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 0xBBBB9999, 0xBBBBBBBB, 0xBBBBBBBB, 
0x9999BBBB, 0x0300013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20C00000, 0x0000CC00, 0x000000B0, 0x84CC8C04, 0xCC8C0400, 0x000084CC, 0xC8480000, 0x00000040, 
0xBBBB9999, 0xBBBBBBBB, 0xBBBBBBBB, 0x9999BBBB, 0x12000408, 0x2C000060, 0x000040C8, 0x00000000, 
0x00000000, 0x00000200, 0x00000000, 0x00000000, 0x00220000, 0x686567C5, 0xB9A9CACB, 0xCCCCCCC8, 
0x656579B7, 0xAC999999, 0x9C99CCCC, 0x555555A6, 0x55555555, 0x7B559757, 0xB8ACCBCC, 0x08000926, 
0x00000000, 0x00000000, 0x00000000, 0x00220200, 0x80000000, 0x00000000, 0x00000000, 0x00000000, 
0xBCCCCCAA, 0xAAAAAAAA, 0xBCCCCCCB, 0xBBBBBBBC, 0xCCBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xBCCBBBBB, 
0xCBCBBBBB, 0xBBBBBBBB, 0x1200092C, 0x40000060, 0x00400000, 0x00000000, 0x00040200, 0x08000800, 
0x00CA8A8C, 0x00000000, 0x00040000, 0xCCCCCBCB, 0xB857B589, 0xBC8BABC6, 0x33848ACC, 0xCACCCC9C, 
0x9C99AC99, 0xAC57B7CC, 0x879AA9CA, 0x44646897, 0xAA689757, 0x02800846, 0x86000040, 0x0080C62C, 
0xCC808600, 0x06000064, 0x00000000, 0x00000000, 0x200A0000, 0x00662000, 0xBACCCCCC, 0xAAAAAABB, 
0xAAAAAACA, 0xCCCCAACA, 0xCBBBBBBB, 0xBBBBBBBB, 0xCBBCCBCB, 0xBBBBBBBB, 0xBBBBBBBB, 0xCBBBBBBB, 
0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00220000, 0xA9CCBCC9, 0x9999B99B, 0x996966C6, 0x99A9CCCC, 0xCBBBBBBB, 0xBBBBBBBB, 0xA999BBCB, 
0xBA999999, 0x99BBCCCC, 0xACAA9B9A, 0x0000013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20C00000, 0x0000CC00, 0x222222B2, 0xC8CC8C24, 0xCCCC48C2, 0x222242C8, 
0xC8480000, 0x00000040, 0xBBBB9999, 0xBBBBBBBB, 0xBBBBBBBB, 0x9999BBBB, 0x0300013B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CC00, 0x000000B0, 
0x84CC8C04, 0xCC8C0400, 0x000084CC, 0xC8480000, 0x00000040, 0xBBBB9999, 0xBBBBBBBB, 0xBBBBBBBB, 
0x9999BBBB, 0x1200023A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xC0600000, 0x0000C000, 0x010000C0, 0x31A8CC6C, 0xCCAC88C8, 0x888888B8, 0xCBBBBBBB, 0xBBBBBBBB, 
0x888898CC, 0x88888888, 0x88888888, 0x89888888, 0x1200020B, 0xC0000060, 0x00C00C04, 0x00000002, 
0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00400000, 0xBBBBBBCB, 0xCCCCBCBB, 0x9A9999C9, 
0x9999BACC, 0xCCCCBBBB, 0xBBBBBBCB, 0x88888888, 0x88888888, 0xCC9C8888, 0x88A899CC, 0x00000930, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000000C0, 0x00000000, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0x12000927, 0x00000020, 0x00000000, 0x02200600, 0x00022004, 0x0C000000, 
0x00860000, 0x00000000, 0x00000000, 0x9999CCC9, 0xCB999BB9, 0xCCCCC8C8, 0x888CC8C8, 0xCCCCBBBB, 
0xBBBBBBCB, 0x8888C9CC, 0x88A8999B, 0x88888888, 0x9C888888, 0x00800946, 0x00000040, 0x0000C000, 
0x08008000, 0x00000060, 0x00000000, 0x00000000, 0x000A0000, 0x00660000, 0xCCCCCCCC, 0xCCBB9CCC, 
0x888C88C8, 0xCCC8CC88, 0xCCCCCCCC, 0xCCCCCCCC, 0xB8CBCCCC, 0x88889A88, 0x88888888, 0x9C888888, 
0x03000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00220000, 0xBC9C99C9, 0xCC99C9CC, 0x998988C8, 0x99C9CCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x9999CCCC, 
0x99999999, 0x99999999, 0xAC9B9999, 0x0000013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20C00000, 0x0000CC00, 0x222222B2, 0xC8CC8C24, 0xCCCC48C2, 0x222242C8, 
0xC8480000, 0x00000040, 0xBBBB9999, 0xBBBBBBBB, 0xBBBBBBBB, 0x9999BBBB, 0x0100013B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CC00, 0x000000B0, 
0x84CC8C04, 0xCC8C0400, 0x000084CC, 0xC8480000, 0x00000040, 0xBBBB9999, 0xBBBBBBBB, 0xBBBBBBBB, 
0x9999BBBB, 0x0C00010B, 0xC2000060, 0x20C20C2A, 0x00000008, 0x00000000, 0x00000444, 0x00460068, 
0x00000064, 0x00A00000, 0xBBBBBBCB, 0xBBBBCCBB, 0x8A3412C1, 0x9999CBCC, 0xCCCC7905, 0x00001094, 
0x00000000, 0x01000000, 0xCC9B8825, 0x0063CACC, 0x0A000918, 0x00000020, 0x00000000, 0x0A000A00, 
0x002882CA, 0x02440000, 0x00202200, 0x00000002, 0x00000000, 0xCCCCABC9, 0x99A9CBCC, 0x7B2326C0, 
0x64B8CCCC, 0xCA060000, 0x00002094, 0xC9CCCCCC, 0xBCA9BB8B, 0x004096CB, 0xCC9C6802, 0x0000013B, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CC00, 
0x222222B2, 0xC8CC8C24, 0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 0xBBBB9999, 0xBBBBBBBB, 
0xBBBBBBBB, 0x9999BBBB, 0x0300013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20C00000, 0x0000CC00, 0x000000B0, 0x84CC8C04, 0xCC8C0400, 0x000084CC, 0xC8480000, 
0x00000040, 0xBBBB9999, 0xBBBBBBBB, 0xBBBBBBBB, 0x9999BBBB, 0x0100013A, 0x00000020, 0x00000000, 
0x40000000, 0x02000000, 0x00000000, 0x00000000, 0xC0600000, 0x0000CA00, 0x130000C0, 0x2197CC9C, 
0xCCCC48B0, 0x004274CA, 0xC68A2400, 0x00000031, 0x1173CBCC, 0x49321233, 0x1221A6CC, 0xCC8A3633, 
0x0A00093A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0600000, 
0x0000C000, 0x42A6CB9C, 0x00000011, 0xCCCCBC07, 0x000084CC, 0xC6060000, 0x00000031, 0x1173CBCC, 
0x49011033, 0x1021A6CC, 0xCC8A3612, 0x04000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCCBCABC9, 0x9999CACC, 0x7B0300C0, 0x64B8CCCC, 
0xC6060000, 0x00000031, 0x1173CBCC, 0x49111133, 0xCC79A6CC, 0xCC8ACBCC, 0x0000013B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CC00, 0x222222B2, 
0xC8CC8C24, 0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 0xBBBB9999, 0xBBBBBBBB, 0xBBBBBBBB, 
0x9999BBBB, 0x0300013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20C00000, 0x0000CC00, 0x000000B0, 0x84CC8C04, 0xCC8C0400, 0x000084CC, 0xC8480000, 0x00000040, 
0xBBBB9999, 0xBBBBBBBB, 0xBBBBBBBB, 0x9999BBBB, 0x0100013A, 0x00000020, 0x00000000, 0x40000000, 
0x02000000, 0x00000000, 0x00000000, 0xC0600000, 0x0000CA00, 0x130000C0, 0x2197CC9C, 0xCCCC48B0, 
0x004274CA, 0xC68A2400, 0x00000031, 0x1173CBCC, 0x49321233, 0x1221A6CC, 0xCC8A3633, 0x0C00010B, 
0xC2000060, 0x20C20C2A, 0x00000008, 0x00000000, 0x00000444, 0x00460068, 0x00000064, 0x00A00000, 
0xBBBBBBCB, 0xBBBBCCBB, 0x8A3412C1, 0x9999CBCC, 0xCCCC7905, 0x00001094, 0x00000000, 0x01000000, 
0xCC9B8825, 0x0063CACC, 0x0A000918, 0x00000020, 0x00000000, 0x0A000A00, 0x002882CA, 0x02440000, 
0x00202200, 0x00000002, 0x00000000, 0xCCCCABC9, 0x99A9CBCC, 0x7B2326C0, 0x64B8CCCC, 0xCA060000, 
0x00002094, 0xC9CCCCCC, 0xBC691252, 0x004096CB, 0x9B460000, 0x1200093A, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0600000, 0x0000C000, 0x42A6CB9C, 0x00000011, 
0xCCCCBC07, 0x000084CC, 0xC6060000, 0x00000031, 0x1173CBCC, 0x49011033, 0x1021A6CC, 0xCC8A3612, 
0x04000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00220000, 0xCCBCABC9, 0x9999CACC, 0x7B0300C0, 0x64B8CCCC, 0xC6060000, 0x00000031, 0x1173CBCC, 
0x49111133, 0xCC79A6CC, 0xCC8ACBCC, 0x0000013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20C00000, 0x0000CC00, 0x222222B2, 0xC8CC8C24, 0xCCCC48C2, 0x222242C8, 
0xC8480000, 0x00000040, 0xBBBB9999, 0xBBBBBBBB, 0xBBBBBBBB, 0x9999BBBB, 0x0100013B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CC00, 0x000000B0, 
0x84CC8C04, 0xCC8C0400, 0x000084CC, 0xC8480000, 0x00000040, 0xBBBB9999, 0xBBBBBBBB, 0xBBBBBBBB, 
0x9999BBBB, 0x1200093A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xC0600000, 0x0000C000, 0x42A6CB9C, 0x00000011, 0xCCCCBC07, 0x000084CC, 0xC6060000, 0x00000031, 
0x1173CBCC, 0x49011033, 0x1021A6CC, 0xCC8A3612, 0x0C00010B, 0xC2000060, 0x20C20C2A, 0x00000008, 
0x00000000, 0x00000444, 0x00460068, 0x00000064, 0x00A00000, 0xBBBBBBCB, 0xBBBBCCBB, 0x8A3412C1, 
0x9999CBCC, 0xCCCC7905, 0x00001094, 0x00000000, 0x01000000, 0xCC9B8825, 0x0063CACC, 0x0A000918, 
0x00000020, 0x00000000, 0x0A000A00, 0x002882CA, 0x02440000, 0x00202200, 0x00000002, 0x00000000, 
0xCCCCABC9, 0x99A9CBCC, 0x7B2326C0, 0x64B8CCCC, 0xCA060000, 0x00002094, 0xC9CCCCCC, 0x63A8BB8B, 
0x00000000, 0xCC9C6802, 0x0000013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20C00000, 0x0000CC00, 0x222222B2, 0xC8CC8C24, 0xCCCC48C2, 0x222242C8, 0xC8480000, 
0x00000040, 0xBBBB9999, 0xBBBBBBBB, 0xBBBBBBBB, 0x9999BBBB, 0x0200013B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CC00, 0x000000B0, 0x84CC8C04, 
0xCC8C0400, 0x000084CC, 0xC8480000, 0x00000040, 0xBBBB9999, 0xBBBBBBBB, 0xBBBBBBBB, 0x9999BBBB, 
0x0800013A, 0x00000020, 0x00000000, 0x40000000, 0x02000000, 0x00000000, 0x00000000, 0xC0600000, 
0x0000CA00, 0x130000C0, 0x2197CC9C, 0xCCCC48B0, 0x004274CA, 0xC68A2400, 0x00000031, 0x1173CBCC, 
0x49321233, 0x1221A6CC, 0xCC8A3633, 0x04000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCCBCABC9, 0x9999CACC, 0x7B0300C0, 0x64B8CCCC, 
0xC6060000, 0x00000031, 0x1173CBCC, 0x49111133, 0xCC79A6CC, 0xCC8ACBCC, 0x00242A0C, 0x07080707, 
0x05090806, 0x09090907, 0x00000000, 0x02010100, 0x04000004, 0x00000002, 0x00000000, 0xC14242C1, 
0xCFC1C1CF, 0x424242C1, 0x00000000, 0x69696969, 0x69696969, 0x69696969, 0x00000000, 0x47474747, 
0x47474747, 0x47474747, 0x00000000, 0x00800716, 0x00000040, 0x00000000, 0xC0800800, 0x2C000002, 
0x02000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCB99B9, 0x999999CA, 0x9B9999C9, 0xB9B9BCCA, 
0xCBCCCC0A, 0x00000073, 0x98C9CCBC, 0x00002096, 0x00000000, 0x27000000, 0x01000F3B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CC00, 0x222222B2, 
0xCACCCC68, 0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20C00000, 0x0000CC00, 0x000000B0, 0xCACCCC68, 0xCC8C0400, 0x000084CC, 0xC8480000, 0x00000040, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x1000060B, 0xC6000060, 0x20C20C2A, 0x00000008, 
0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00A00000, 0xCCAA99B9, 0x99C9CCCC, 0x9A9999C9, 
0x99C9CCBC, 0xCACCCC0C, 0x23004285, 0x00000010, 0x00000000, 0xCC9B4602, 0x64A8CCCC, 0x0E000943, 
0x00000040, 0x00000000, 0x0CC40A00, 0x002420C6, 0x22000000, 0x00006200, 0x00000000, 0x00000000, 
0xCCCCABCA, 0xCACCCCCC, 0x480110C0, 0x41B7CCCC, 0xC9CCCC9C, 0x00129999, 0xCCCCCCCC, 0x22223295, 
0x32223322, 0xCC8A3521, 0x00800912, 0x20000040, 0x00222000, 0x0000C040, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xBC9999C9, 0xCCCCCCCC, 0x583700C0, 0xB9CCCCCC, 0xC9999999, 
0x00009999, 0xCCCCCCCC, 0x552374B8, 0x57353221, 0x89888A68, 0x02000701, 0x0228C64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xAA9A9BB9, 0xC9CBCCBC, 
0x990900C0, 0x9999CC9C, 0xC8480000, 0x00000040, 0x99BACCCC, 0x99999999, 0xCC9A9999, 0xCCCCCCCC, 
0x01000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 
0x0000CC00, 0x222222B2, 0xC8CC8C24, 0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20C00000, 0x0000CC00, 0x000000B0, 0x84CC8C04, 0xCC8C0400, 0x000084CC, 
0xC8480000, 0x00000040, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x0C00053A, 0x00000020, 
0x00000000, 0x40000000, 0x02000000, 0x00000000, 0x00000000, 0xC0600000, 0x0000C000, 0x040000B0, 
0x84CCCC8C, 0xCCCCABC8, 0x000030B7, 0xC8480000, 0x00000040, 0x0083CCCC, 0x37323600, 0x0052B98A, 
0x8B040000, 0x0C00093A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xC0600000, 0x0000C000, 0x3265C9CC, 0x00000000, 0xCCCCA806, 0x000063C8, 0xC8480000, 0x00000040, 
0x0030B9CC, 0x49010000, 0x553663BA, 0x8C045165, 0x0C00060B, 0xC0000060, 0x00C00C04, 0x00000002, 
0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00400000, 0x9B9999B9, 0x99999999, 0x999999C9, 
0x99999999, 0xCCBC9A06, 0x000040A7, 0x02000000, 0x00000041, 0xBC570200, 0x0010A5CC, 0x0C000918, 
0x00000020, 0x00000000, 0x04000400, 0x000220C4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xCBCC9CC9, 0xA9CACCAC, 0x480000C0, 0x62CACCCC, 0xC9999999, 0x00009999, 0xC8CCCCCC, 0x00000030, 
0x01411400, 0x9C583544, 0x03000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00220000, 0xCC9B99B9, 0xB9CCCCBC, 0x990900C0, 0x99C9CCCC, 0xC8480000, 
0x00000040, 0x99999999, 0x99999999, 0xAC999999, 0x9999CACC, 0x01000F3B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x00008C0A, 0x222222B2, 0xC8CC8C24, 
0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 0xBBBB9999, 0xBBBBBBBB, 0xBBBBBBBB, 0x9999BBBB, 
0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 
0x00008C00, 0x000000B0, 0x84CC8C04, 0xCC8C0400, 0x000084CC, 0xC8480000, 0x00000040, 0xBBBB9999, 
0xBBBBBBBB, 0xBBBBBBBB, 0x9999BBBB, 0x1200053A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xC0600000, 0x0000C000, 0x222273B3, 0xCCCC8C24, 0xCCCCC9C9, 0x99999CCB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xC9CC89C9, 0xCCBA899A, 0xCB9CB9AB, 0xCCCBBCBA, 0x1200060B, 0xC0000060, 
0x00C00C04, 0x00000002, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00400000, 0x9C9C9BB9, 
0xC9BACCCC, 0xAAACAACA, 0xACCCCCCC, 0xBBBBBBBB, 0xBBBBBBBB, 0x88888898, 0x88888888, 0xBCCCBB88, 
0xCC9CC9CC, 0x00000930, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x000000C0, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x12000927, 0x00000020, 0x00000000, 0x02200600, 
0x00022004, 0x0C000000, 0x00860000, 0x00000000, 0x00000000, 0xCBCACCCC, 0xBCBBCCBA, 0xACCCCCCA, 
0xAACCCCAC, 0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCBCC, 0x9BB999CC, 0x99B99999, 0xCCACAB9B, 0x00800946, 
0x00000040, 0x0000C000, 0x08008000, 0x00000060, 0x00000000, 0x00000000, 0x000A0000, 0x00660000, 
0xACBC9CC9, 0xCCC9CC99, 0xBBBBCBCB, 0xCCCCCCBC, 0xBBBBBBBB, 0xBBBBBBBB, 0xCCBCCCCC, 0xBBCBCBBC, 
0xBBCBBCCB, 0xCCBBBCBB, 0x03000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00220000, 0xACC999B9, 0xCCCCCCCC, 0xAAAACACA, 0xCACCCCCC, 0xBBBBBBBB, 
0xBBBBBBBB, 0xABCBCCCC, 0x9999ABAB, 0x99CBBB99, 0xCCBA9999, 0x00800716, 0x00000040, 0x00000000, 
0xC0800800, 0x2C000002, 0x02000000, 0x00000000, 0x00000000, 0x00000000, 0xCC9C99B9, 0xC99CBBCC, 
0xCC9999C9, 0x99CCCCCB, 0xC8CCCCC8, 0x6666A666, 0x65CACCCC, 0x55555555, 0x55555555, 0x69555555, 
0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 
0x00008C00, 0x222222B2, 0xCACCCC68, 0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 0xBBBB9999, 
0xBBBBBBBB, 0xBBBBBBBB, 0x9999BBBB, 0x08000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20C00000, 0x00008C00, 0x000000B0, 0xCACCCC68, 0xCC8C0400, 0x000084CC, 
0xC8480000, 0x00000040, 0xBBBB9999, 0xBBBBBBBB, 0xBBBBBBBB, 0x9999BBBB, 0x12000529, 0x00000060, 
0x04000000, 0x00000000, 0x00000000, 0x00004400, 0x0040009A, 0x00000000, 0x00000000, 0x9B9999B9, 
0x9999CBCC, 0x9A999999, 0x99C9CCBC, 0x0084CC0C, 0x00002000, 0x00000010, 0x00010000, 0xCCCC7A02, 
0x64A8CCCC, 0x12000943, 0x00000040, 0x00000000, 0x0CC40A00, 0x002420C6, 0x22000000, 0x00006200, 
0x00000000, 0x00000000, 0xACAAAACA, 0xCACCCCCC, 0x482120C0, 0x42C8CCCC, 0xC9CCCC9C, 0x10159999, 
0xCCCCCCCC, 0x334356A7, 0x43545435, 0x9B683544, 0x00800912, 0x20000040, 0x00222000, 0x0000C040, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC9BB99CC, 0xC9CCCCCC, 0xCB7877C7, 
0xCCCCCCCC, 0xC99999C9, 0x88889999, 0xCCCCCCCC, 0xAA9AABCB, 0x87ABBBAC, 0x99779778, 0x02000701, 
0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 
0xAB9A99B9, 0xCBCCCCAC, 0x990900C0, 0x99C9CCCC, 0xC8480000, 0x00000040, 0x99BACCCC, 0x99999999, 
0xCC9A9999, 0xCCCCCCCC, 0x04000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20C00000, 0x00008C00, 0x222222B2, 0xC8CC8C24, 0xCCCC48C2, 0x222242C8, 0xC8480000, 
0x00000040, 0xBBBB9999, 0xBBBBBBBB, 0xBBBBBBBB, 0x9999BBBB, 0x12000F3B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x00008C00, 0x000000B0, 0x84CC8C04, 
0xCC8C0400, 0x000084CC, 0xC8480000, 0x00000040, 0xBBBB9999, 0xBBBBBBBB, 0xBBBBBBBB, 0x9999BBBB, 
0x12000739, 0x06000020, 0x00000040, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000006C0, 
0x00C0000C, 0x9C9999B9, 0x9999CBCC, 0x99999999, 0x99CACCCC, 0xC978B908, 0xBC87CCCC, 0x000020B6, 
0x00000000, 0x26000000, 0xCCCCCC7B, 0x12000943, 0x00000040, 0x00000000, 0x0CC40A00, 0x002220C6, 
0x22000000, 0x00006200, 0x00000000, 0x00000000, 0xAC9999C9, 0xCCBCCCCC, 0x040000C0, 0x85CACC8C, 
0xC99A9999, 0x00009999, 0xCBCCCCCC, 0x11102183, 0x01000001, 0x9B683532, 0x00800912, 0x20000040, 
0x00222000, 0x0000C040, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCACCCC, 
0xCCCCCCCC, 0xBBBBBBCB, 0xCCCCCCCC, 0xCBBBBBCB, 0xBBBBBBBB, 0xCCCBCCCB, 0xAAAAAACA, 0xAAAAAAAC, 
0xCCCCCCCC, 0x02000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00220000, 0xAC9999B9, 0xCCCCCCCC, 0x990900C0, 0x99C9CC9C, 0xC8480000, 0x00000040, 
0x99BACCCC, 0x99999999, 0xCC9A9999, 0xCCCCCCCC, 0x00800716, 0x00000040, 0x00000000, 0xC0800800, 
0x2C000002, 0x02000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCB99B9, 0x999999CA, 0x9B9999C9, 
0xB9B9BCCA, 0xCBCCCC0A, 0x00000073, 0x98C9CCBC, 0x00002096, 0x00000000, 0x27000000, 0x01000F3B, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x00008C00, 
0x222222B2, 0xCACCCC68, 0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 0xBBBB9999, 0xBBBBBBBB, 
0xBBBBBBBB, 0x9999BBBB, 0x1000060B, 0xC6000060, 0x20C20C2A, 0x00000008, 0x00000000, 0x00000044, 
0x00460068, 0x00000064, 0x00A00000, 0xCCAA99B9, 0x99C9CCCC, 0x9A9999C9, 0x99C9CCBC, 0xCACCCC0C, 
0x23004285, 0x00000010, 0x00000000, 0xCC9B4602, 0x64A8CCCC, 0x0E000943, 0x00000040, 0x00000000, 
0x0CC40A00, 0x002420C6, 0x22000000, 0x00006200, 0x00000000, 0x00000000, 0xCCCCABCA, 0xCACCCCCC, 
0xCB5911C0, 0x42B7CCCC, 0xC9CCCC9C, 0x00249999, 0xCCCCCCCC, 0x2222A5CC, 0x32223322, 0xCC8A2421, 
0x00800912, 0x20000040, 0x00222000, 0x0000C040, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xBC9999C9, 0xCCCCCCCC, 0x583700C0, 0xB9CCCCCC, 0xC9999999, 0x00009999, 0xCCCCCCCC, 
0x552374B8, 0x57353221, 0x89888A68, 0x00000702, 0x0048CA6C, 0x00000000, 0x00400000, 0x00000000, 
0x00000000, 0x00000000, 0x00040000, 0x00000000, 0xCCAA9AB9, 0xCACCCCCC, 0xCCBC6AC2, 0x2086CACC, 
0xC9999999, 0x00009999, 0xCACCCCCC, 0x44004086, 0xAC684444, 0xCCCCCCCC, 0x02000F3B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x00008C00, 0xAB9A89B4, 
0xCCCCCCAC, 0xCC8C0400, 0x000084CC, 0xC8480000, 0x00000040, 0xBBBB9999, 0xBBBBBBBB, 0xBBBBBBBB, 
0x9999BBBB, 0x02000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00220000, 0xACA99BB9, 0xCCCCCCCC, 0x992900C0, 0x99C9CCBC, 0xC848950C, 0x00101540, 
0xCC9A9999, 0x99CACCCC, 0x99999999, 0x9999A9AB, 0x00800716, 0x00000040, 0x00000000, 0xC0800800, 
0x2C000002, 0x02000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCB99B9, 0x999999CA, 0x9B9999C9, 
0xB9B9BCCA, 0xCBCCCC0A, 0x00000073, 0x98C9CCBC, 0x00002096, 0x00000000, 0x27000000, 0x1000060B, 
0xC6000060, 0x20C20C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00A00000, 
0xCCAA99B9, 0x99C9CCCC, 0x9A9999C9, 0x99C9CCBC, 0xCACCCC0C, 0x23004285, 0x00000010, 0x00000000, 
0xCC9B4602, 0x64A8CCCC, 0x0E000943, 0x00000040, 0x00000000, 0x0CC40A00, 0x002420C6, 0x22000000, 
0x00006200, 0x00000000, 0x00000000, 0xCCCCABCA, 0xCACCCCCC, 0x480110C0, 0x41B7CCCC, 0xC9CCCC9C, 
0x00129999, 0xCCCCCCCC, 0x22223295, 0x32223322, 0xCC8A2421, 0x00800912, 0x20000040, 0x00222000, 
0x0000C040, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xBC9999C9, 0xCCCCCCCC, 
0x583700C0, 0xB9CCCCCC, 0xC9999999, 0x00009999, 0xCCCCCCCC, 0x552374B8, 0x57353221, 0x89888A68, 
0x00000702, 0x0048CA6C, 0x00000000, 0x00400000, 0x00000000, 0x00000000, 0x00000000, 0x00040000, 
0x00000000, 0xCCAA9AB9, 0xCACCCCCC, 0xCCBC6AC2, 0x2086CACC, 0xC9999999, 0x00009999, 0xCACCCCCC, 
0x44004086, 0xAC684444, 0xCCCCCCCC, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20C00000, 0x00008C00, 0xAB9A89B4, 0xCCCCCCAC, 0xCC8C0400, 0x000084CC, 
0xC8480000, 0x00000040, 0xBBBB9999, 0xBBBBBBBB, 0xBBBBBBBB, 0x9999BBBB, 0x00000702, 0x0048CA6C, 
0x00000000, 0x00400000, 0x00000000, 0x00000000, 0x00000000, 0x00040000, 0x00000000, 0xCCAA9AB9, 
0xCACCCCCC, 0xCCBC6AC2, 0x2086CACC, 0xC9999999, 0x00009999, 0xCACCCCCC, 0x44004086, 0xAC684444, 
0xCCCCCCCC, 0x01000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20C00000, 0x00008C00, 0xAB9A89B4, 0xCCCCCCAC, 0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 
0xBBBB9999, 0xBBBBBBBB, 0xBBBBBBBB, 0x9999BBBB, 0x02000701, 0x0228C64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xACA99BB9, 0xCCCCCCCC, 0x992900C0, 
0x99C9CCBC, 0xC848950C, 0x00101540, 0xCC9A9999, 0x99CACCCC, 0x99999999, 0x9999A9AB, 0x00800716, 
0x00000040, 0x00000000, 0xC0800800, 0x2C000002, 0x02000000, 0x00000000, 0x00000000, 0x00000000, 
0xCCBC99B9, 0x99A9AACC, 0x9B9999C9, 0x99CACCCC, 0xC8CCCC09, 0x00002046, 0x97CACCAC, 0x00001065, 
0x00000000, 0x15000000, 0x01000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20C00000, 0x0000CC00, 0x222222B2, 0xCACCCC68, 0xCCCC48C2, 0x222242C8, 0xC8480000, 
0x00000040, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x08000F3B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CC00, 0x222222B2, 0xCACCCC68, 
0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0x1000060B, 0xC6000060, 0x20C20C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 
0x00A00000, 0xCCAA99B9, 0x99C9CCCC, 0x9A9999C9, 0x99C9CCBC, 0xCACCCC0C, 0x23004285, 0x00000010, 
0x00000000, 0xCC9B4602, 0x64A8CCCC, 0x1200092D, 0x00000040, 0x00000000, 0x00000000, 0x00000006, 
0x00000000, 0x000A0000, 0x00000000, 0x00000000, 0xA8CBCC0C, 0x33446576, 0xAC2511C0, 0x225397CB, 
0xBCAAAA9A, 0x0046CBCC, 0xCCCCCCCC, 0x00103295, 0x00000000, 0xCC8A2401, 0x04000F3B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CC00, 0x222222B2, 
0xCACCCC68, 0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0x08000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20C00000, 0x0000CC00, 0x222222B2, 0xCACCCC68, 0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x10000509, 0x6C000060, 0x00800766, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x9C9999B9, 0xA9CCCCCC, 0x9A9999C9, 
0x99A9CCCC, 0xCCCCCC0A, 0xBC57CBCC, 0x2464A8CC, 0x00001031, 0x69231000, 0xCCCCCCCC, 0x00000733, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000800, 0x00000004, 
0xCCCC48B0, 0x000040C8, 0xCC580100, 0x0020A6CC, 0x95150000, 0xAC26A626, 0x00000064, 0x00000000, 
0xCCCC5A01, 0xC9CCCCCC, 0x12000917, 0x00000040, 0x00000000, 0x0CC40A00, 0x002220C6, 0x22000000, 
0x00006200, 0x00000000, 0x00000000, 0xACAAAACA, 0xCCCCCCCC, 0x480110C0, 0x41B7CCCC, 0xC9CCCC9C, 
0x00249999, 0xCCCCCCCC, 0x22223295, 0x32223322, 0xCC8A3521, 0x00800712, 0x20000040, 0x00222000, 
0x0000C040, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xAC9999C9, 0x9CBBCCCC, 
0xAC3700C0, 0xB8CCCCCC, 0xC9999999, 0x00009999, 0xACCACCCB, 0x544385B9, 0x79774523, 0x9A889A89, 
0x02000701, 0x0268C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00220000, 0xAC9A99B9, 0xCCCCCCCC, 0x990900C0, 0x99A9CCCC, 0xC86A2206, 0x0030A756, 0x99BACCCC, 
0x99999999, 0xCC9A9999, 0xCCCCCCCC, 0x00000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20C00000, 0x0000AC00, 0x000000B0, 0xCACCCC68, 0xCC8C0400, 0x000084CC, 
0xC8480000, 0x00000040, 0xBBBB9999, 0xBBBBBBBB, 0xBBBBBBBB, 0x9999BBBB, 0x01000F3B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000AC00, 0x000000B0, 
0xCACCCC68, 0xCC8C0400, 0x000084CC, 0xC8480000, 0x00000040, 0xBBBB9999, 0xBBBBBBBB, 0xBBBBBBBB, 
0x9999BBBB, 0x0C00060B, 0xC0000060, 0x00C00C04, 0x00000002, 0x00000000, 0x00000550, 0x00000002, 
0x00000000, 0x00400000, 0xBCCBBBCB, 0xCCBBBBCC, 0x391000C0, 0xC9BCBAAC, 0xCCCCCC3C, 0x33334396, 
0x9C590200, 0x013185CC, 0xCC9B8848, 0x0063CACC, 0x0C000918, 0x00000020, 0x00000000, 0x04000400, 
0x000220C4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xAA9999C9, 0xCCBBBCCC, 0x040000C0, 
0x95C9CC8C, 0xC7373333, 0x33333354, 0xC9CCCCCC, 0xBCA9BB8B, 0x004096CB, 0xCC9C6802, 0x00000F3B, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000AC00, 
0x000000B0, 0xCACCCC68, 0xCC8C0400, 0x000084CC, 0xC8480000, 0x00000040, 0xBBBB9999, 0xBBBBBBBB, 
0xBBBBBBBB, 0x9999BBBB, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20C00000, 0x0000AC00, 0x000000B0, 0xCACCCC68, 0xCC8C0400, 0x000084CC, 0xC8480000, 
0x00000040, 0xBBBB9999, 0xBBBBBBBB, 0xBBBBBBBB, 0x9999BBBB, 0x0400053A, 0x00000020, 0x00000000, 
0x40000000, 0x02000000, 0x00000000, 0x00000000, 0xB0600000, 0x0000B900, 0x130000C0, 0x31A8CC9C, 
0xCCCC6AC2, 0x000030A7, 0xC7373333, 0x33333354, 0x5586CBCC, 0x49222233, 0x2222A5CC, 0xCC8A3622, 
0x0C00093A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0600000, 
0x0000C000, 0x52A7CB9C, 0x33221123, 0xCCCCCC08, 0x000062CA, 0xCBABAAAA, 0xAAAAAAAA, 0x94CCCCCC, 
0x49541233, 0x2311A5CC, 0xCC8A3632, 0x03000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00220000, 0x9B9999C9, 0xBC9ACCCC, 0x260000C0, 0x66C8CCAC, 
0xC7373333, 0x33333354, 0x8975CBCC, 0x4984CBCC, 0x9C14A5CC, 0xCC8AB7CC, 0x00000F3B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000AC00, 0x000000B0, 
0xCACCCC68, 0xCC8C0400, 0x000084CC, 0xC8480000, 0x00000040, 0xBBBB9999, 0xBBBBBBBB, 0xBBBBBBBB, 
0x9999BBBB, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20C00000, 0x0000AC00, 0x000000B0, 0xCACCCC68, 0xCC8C0400, 0x000084CC, 0xC8480000, 0x00000040, 
0xBBBB9999, 0xBBBBBBBB, 0xBBBBBBBB, 0x9999BBBB, 0x0400053A, 0x00000020, 0x00000000, 0x40000000, 
0x02000000, 0x00000000, 0x00000000, 0xB0600000, 0x0000B900, 0x130000C0, 0x31A8CC9C, 0xCCCC6AC2, 
0x000030A7, 0xC7373333, 0x33333354, 0x5586CBCC, 0x49222233, 0x2222A5CC, 0xCC8A3622, 0x0C00060B, 
0xC0000060, 0x00C00C04, 0x00000002, 0x00000000, 0x00000550, 0x00000002, 0x00000000, 0x00400000, 
0xBCCBBBCB, 0xCCBBBBCC, 0x391000C0, 0xC9BCBAAC, 0xCCCCCC3C, 0x33334396, 0x9C590200, 0x013185CC, 
0xCC9B8848, 0x0063CACC, 0x0C000918, 0x00000020, 0x00000000, 0x04000400, 0x000220C4, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xAA9999C9, 0xCCBBBCCC, 0x040000C0, 0x95C9CC8C, 0xC7373333, 
0x33333354, 0xC9CCCCCC, 0xBC692252, 0x004096CB, 0xCC9C6802, 0x00000F3B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000AC00, 0x000000B0, 0xCACCCC68, 
0xCC8C0400, 0x000084CC, 0xC8480000, 0x00000040, 0xBBBB9999, 0xBBBBBBBB, 0xBBBBBBBB, 0x9999BBBB, 
0x01000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 
0x0000AC00, 0x000000B0, 0xCACCCC68, 0xCC8C0400, 0x000084CC, 0xC8480000, 0x00000040, 0xBBBB9999, 
0xBBBBBBBB, 0xBBBBBBBB, 0x9999BBBB, 0x0C00093A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xC0600000, 0x0000C000, 0x52A7CB9C, 0x33221123, 0xCCCCCC08, 0x000062CA, 
0xCBABAAAA, 0xAAAAAAAA, 0x94CCCCCC, 0x49541233, 0x2311A5CC, 0xCC8A3632, 0x03000701, 0x0228C64C, 
0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0x9B9999C9, 
0xBC9ACCCC, 0x260000C0, 0x66C8CCAC, 0xC7373333, 0x33333354, 0x8975CBCC, 0x4984CBCC, 0x9C14A5CC, 
0xCC8AB7CC, 0x00000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20C00000, 0x0000AC00, 0x000000B0, 0xCACCCC68, 0xCC8C0400, 0x000084CC, 0xC8480000, 0x00000040, 
0xBBBB9999, 0xBBBBBBBB, 0xBBBBBBBB, 0x9999BBBB, 0x01000F3B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000AC00, 0x000000B0, 0xCACCCC68, 0xCC8C0400, 
0x000084CC, 0xC8480000, 0x00000040, 0xBBBB9999, 0xBBBBBBBB, 0xBBBBBBBB, 0x9999BBBB, 0x0C00093A, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0600000, 0x0000C000, 
0x52A7CB9C, 0x33221123, 0xCCCCCC08, 0x000062CA, 0xCBABAAAA, 0xAAAAAAAA, 0x94CCCCCC, 0x49541233, 
0x2311A5CC, 0xCC8A3632, 0x0C00060B, 0xC0000060, 0x00C00C04, 0x00000002, 0x00000000, 0x00000550, 
0x00000002, 0x00000000, 0x00400000, 0xBCCBBBCB, 0xCCBBBBCC, 0x391000C0, 0xC9BCBAAC, 0xCCCCCC3C, 
0x33334396, 0x9C590200, 0x013185CC, 0xCC9B8848, 0x0063CACC, 0x0C000918, 0x00000020, 0x00000000, 
0x04000400, 0x000220C4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xAA9999C9, 0xCCBBBCCC, 
0x040000C0, 0x95C9CC8C, 0xC7373333, 0x33333354, 0xA5CCCCBA, 0x63A8BB8B, 0x00000000, 0xCC9C6802, 
0x00000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 
0x0000AC00, 0x000000B0, 0xCACCCC68, 0xCC8C0400, 0x000084CC, 0xC8480000, 0x00000040, 0xBBBB9999, 
0xBBBBBBBB, 0xBBBBBBBB, 0x9999BBBB, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20C00000, 0x0000AC00, 0x000000B0, 0xCACCCC68, 0xCC8C0400, 0x000084CC, 
0xC8480000, 0x00000040, 0xBBBB9999, 0xBBBBBBBB, 0xBBBBBBBB, 0x9999BBBB, 0x0400053A, 0x00000020, 
0x00000000, 0x40000000, 0x02000000, 0x00000000, 0x00000000, 0xB0600000, 0x0000B900, 0x130000C0, 
0x31A8CC9C, 0xCCCC6AC2, 0x000030A7, 0xC7373333, 0x33333354, 0x5586CBCC, 0x49222233, 0x2222A5CC, 
0xCC8A3622, 0x03000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00220000, 0x9B9999C9, 0xBC9ACCCC, 0x260000C0, 0x66C8CCAC, 0xC7373333, 0x33333354, 
0x8975CBCC, 0x4984CBCC, 0x9C14A5CC, 0xCC8AB7CC, 0x00FF0803, 0x00050607, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x004E4240, 0x00000000, 0x00000000, 
0x00000000, 0x00BDBDBD, 0x00000000, 0x00000000, 0x00000000, 0x00CECECE, 0x00000000, 0x00000000, 
0x00000000, 0x0200013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20A00000, 0x0000CC00, 0x111111B1, 0xCCCC8C14, 0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 
0x2222B6CC, 0x22222222, 0x22325566, 0xCC9C6826, 0x0C000121, 0x86000080, 0xCC86A840, 0x0000800C, 
0x00000000, 0x000000CC, 0x0406008A, 0x00000088, 0x00800000, 0xBBBBBBCB, 0xCBCCCCCC, 0x492300C0, 
0x99B9CCBC, 0x84CBCC0C, 0x00000021, 0x43010000, 0x8B675657, 0xCCCCCCCC, 0x00004296, 0x12000915, 
0x00000060, 0x00000000, 0x44CC0400, 0x00002002, 0x00000000, 0x00002000, 0x00000000, 0x00000000, 
0x592101B0, 0x73CBCCCC, 0xCCAC66C6, 0x6676CBC8, 0x63B8CC0C, 0x00000000, 0xA9CCCCCC, 0x66667897, 
0x66666666, 0xAC686666, 0x0200013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20A00000, 0x0000CC00, 0x111111B1, 0xCCCC8C14, 0xCCCC48C2, 0x222242C8, 0xC8480000, 
0x00000040, 0x2222B6CC, 0x22222222, 0x22325566, 0xCC9C6826, 0x0C000122, 0x82000080, 0xCC86404A, 
0x000080C0, 0x00000000, 0x0000CC00, 0x4088008A, 0x00000000, 0x00080000, 0xCCCCACC6, 0x2040C8CC, 
0xCCCC98C6, 0x66B7CCCC, 0xC888BCCC, 0x66666666, 0x65A8BBCC, 0x57555555, 0xBCABAA9A, 0xCCCCCCCB, 
0x00800546, 0x86000040, 0x0080C62C, 0xCC808600, 0x06000064, 0x00000000, 0x00000000, 0x200A0000, 
0x00662000, 0xBCCCC9C9, 0xC8BBCCCC, 0xBBBBBBCB, 0xBBCCCCBC, 0xCBCCBBCB, 0xBBBBBBBB, 0xBBBBCCCC, 
0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCBBBB, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCC7B34B0, 0xCCCCCCCC, 0x787777C7, 0x8BCCCCCC, 
0xC9BC99C9, 0x99999999, 0x99999999, 0xCCCC9A99, 0x99B9CBCC, 0x99999999, 0x0200013B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x111111B1, 
0xCCCC8C14, 0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 0x2222B6CC, 0x22222222, 0x22325566, 
0xCC9C6826, 0x0C000122, 0xAA000080, 0x008604CC, 0x00008000, 0x00000000, 0x0000CC00, 0x4088008A, 
0x00000000, 0x00080000, 0xA9BCAAC9, 0x99A9CBCC, 0x999999C9, 0x99A9CCAC, 0x732322C2, 0x2284CC48, 
0x11111141, 0x11111111, 0x49111111, 0x98CBBCCC, 0x1200091C, 0x00000060, 0x00000000, 0x00000000, 
0x00C04800, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xBC684522, 0x62BBCACC, 0xC8CC8CC8, 
0x888888C8, 0x582222C2, 0x2284CCCC, 0x38111111, 0xCA8CB8CC, 0x11111152, 0x11111111, 0x0200013B, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 
0x111111B1, 0xCCCC8C14, 0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 0x2222B6CC, 0x22222222, 
0x22325566, 0xCC9C6826, 0x0C000121, 0x8A000080, 0x2282A0C0, 0x00008000, 0x00000000, 0x000000CC, 
0x0406008A, 0x00000088, 0x00800000, 0xBACCCCCC, 0xB9CCCABC, 0x8C8888C8, 0x888888CC, 0xCC9999C9, 
0x2273CB9C, 0x21A6BACC, 0x11111111, 0x11111111, 0xCCAC6A12, 0x02000701, 0x0228C64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0x9BB9BCC9, 0x9CBCA9AA, 
0x999999C9, 0x9999C99C, 0xCBABAAAA, 0xAAAAAAAA, 0xAAAABCCC, 0xAAAAAAAA, 0xACAAAAAA, 0xACAACCAA, 
0x02000926, 0x00000060, 0x00000000, 0xB08A0600, 0x05000000, 0xC0000000, 0x00000000, 0x00000000, 
0x00000000, 0x9C9999C9, 0xCCCCCCCC, 0x9BCC48C3, 0x43C8CCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x86CACCCC, 
0x6666A867, 0x66666666, 0xCC7A6666, 0x0200013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x111111B1, 0xCCCC8C14, 0xCCCC48C2, 0x222242C8, 
0xC8480000, 0x00000040, 0x2222B6CC, 0x22222222, 0x22325566, 0xCC9C6826, 0x1200030F, 0x00000060, 
0xBC050000, 0x00000010, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x999999C9, 
0x9999CACC, 0xCBCC9CC5, 0x2284ACBC, 0xCBCCCCBC, 0xBBBBBBBB, 0x444464CA, 0x8A464444, 0xCCCCCCCC, 
0xAB4665A7, 0x12000925, 0x00000060, 0x00000000, 0x096A0200, 0x00000090, 0x000C0000, 0x00000000, 
0x00000000, 0x00000000, 0xAC99BAC9, 0x9BA9CCCC, 0x987B23C2, 0xC9CCCBCC, 0xCCCCCCCC, 0xCCCCCCCC, 
0xB9BACCCC, 0x55556688, 0x55555555, 0xAC685555, 0x02000701, 0x0226C74C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00000000, 0x00040020, 0x00000000, 0xCC9999C9, 0xCBCACCCC, 0x262222C2, 
0x7AC9CCAC, 0xCCCCCCCC, 0xCCCCCCCC, 0x445455C7, 0xBC8B4544, 0x8AA788CA, 0xCCCCCCCC, 0x00242A07, 
0x0506060A, 0x00030508, 0x00000000, 0x00000000, 0x04000000, 0x00040000, 0x00000000, 0x00000000, 
0xC0C2C2C0, 0x00C2CEC0, 0x00000000, 0x00000000, 0x78787878, 0x00787878, 0x00000000, 0x00000000, 
0x57575757, 0x00575757, 0x00000000, 0x00000000, 0x00800516, 0x00000040, 0x00000000, 0xC0C60A00, 
0x0C000006, 0x02000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCC9CB9, 0xBA99CCCC, 0x999999C9, 
0xC9CCCC9C, 0xC8CBCC0C, 0x95151540, 0xBCBAAB67, 0x83C9CCCC, 0x00000000, 0x02000000, 0x02000F3B, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 
0x000000B0, 0xCCCC5901, 0xCC9C3700, 0x000040C8, 0xC8480000, 0x00000040, 0x2222B6CC, 0x22222222, 
0x22325566, 0xCC9C6826, 0x0E000521, 0x96000080, 0xCC96A940, 0x0000800C, 0x00000000, 0x000000CC, 
0x0406208A, 0x00000099, 0x00900000, 0x9CA999C9, 0x9999CCCC, 0x999999C9, 0x99CCCCCC, 0xB7CACC0C, 
0x47001032, 0x10000064, 0xCCCC8C04, 0xCCCCCCCC, 0x6686CACC, 0x0000072D, 0x00000060, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x800C0000, 0x00000360, 0x00600000, 0xCCCCCCBC, 0x111184CC, 
0xCCC8CC08, 0x0030B7CC, 0xC8CCCC0C, 0x8C040040, 0x00000093, 0x00000000, 0xCCAC1500, 0xCC9C65CA, 
0x12000915, 0x00000060, 0x00000000, 0x44CC0400, 0x00002002, 0x00000000, 0x00002000, 0x00000000, 
0x00000000, 0xCC1300B0, 0x84CBCCCC, 0xCCAC26C0, 0x0040C8CC, 0x63CCCC0C, 0x00000000, 0xB9CCCCCC, 
0x00002143, 0x00000010, 0xAC680000, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x111111B1, 0xCCCC8C14, 0xCCCC48C2, 0x222242C8, 
0xC8480000, 0x00000040, 0x2222B6CC, 0x22222222, 0x22325566, 0xCC9C6826, 0x0C000522, 0x82000080, 
0xCC86404A, 0x000080C0, 0x00000000, 0x0000CC00, 0x4088009A, 0x00000000, 0x00080000, 0xCCCCBAC9, 
0x9999CCCC, 0xCCCC68C4, 0x40C8CCCC, 0xC9CCCC9C, 0x01009999, 0x86CCCCCC, 0x57555555, 0xBCCBCC9A, 
0xCCCCCCCB, 0x00000714, 0x00000060, 0x00000000, 0x0AB80900, 0x00000004, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xAC9999C9, 0xCC9ACCCC, 0x030100C0, 0xCCCCCC7B, 0xC9CCCC9C, 0x00009999, 
0x55B7CCCC, 0x00000020, 0x00000000, 0x15000000, 0x00800546, 0x86000040, 0x0080C62C, 0xCC80A620, 
0x06000064, 0x00000000, 0x00000000, 0x200A0000, 0x00662000, 0xCCCAAABC, 0xCCACCCCC, 0x000000C0, 
0xCCCCCC48, 0xC99C99C9, 0x99999999, 0x5196C9CC, 0x00000000, 0x00000000, 0xCC380000, 0x01000701, 
0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 
0x9C9999B9, 0xCCCCCCCC, 0x990900C0, 0x99C9CCCC, 0xC858A606, 0x40888CA7, 0x9999CACC, 0xCCCCCC9A, 
0xCCBBABCA, 0xAC99CACC, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20A00000, 0x0000CC00, 0x111111B1, 0xCCCC8C14, 0xCCCC48C2, 0x222242C8, 0xC8480000, 
0x00000040, 0x2222B6CC, 0x22222222, 0x22325566, 0xCC9C6826, 0x12000522, 0xAA000080, 0x008604CC, 
0x00000000, 0x00000000, 0x0000C200, 0x0006008A, 0x00000066, 0x00400000, 0x9C99AAC9, 0x9999CCCC, 
0x999999C9, 0x99CCCC9C, 0x62030000, 0x0284AC26, 0x02007299, 0x00020030, 0x54020000, 0xCCCC8C34, 
0x1200091C, 0x00000060, 0x00000000, 0x00000000, 0x00C44800, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xA82600B0, 0x95C8CCCC, 0xCCCC8C04, 0x0020A6CA, 0x00000000, 0x0084CC48, 0x00000000, 
0xCCCC4A01, 0x002064A8, 0x00000000, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x111111B1, 0xCCCC8C14, 0xCCCC48C2, 0x222242C8, 
0xC8480000, 0x00000040, 0x2222B6CC, 0x22222222, 0x22325566, 0xCC9C6826, 0x06000521, 0x8A000080, 
0x2282A0C0, 0x00008000, 0x00000000, 0x000000CC, 0x0406008A, 0x00000088, 0x00040000, 0x9C9999C9, 
0x9999CBCC, 0x593700C0, 0x73CACCAC, 0xCA999999, 0xAC53C99C, 0x0073A8CC, 0x32000000, 0x01002000, 
0xCCCC7845, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00220000, 0x9B9999B9, 0x9CA9CCCC, 0x990900C0, 0x99A9CC9C, 0xC84844C4, 0x44444444, 
0x99CBCBCC, 0x99999999, 0x99999999, 0xBC999999, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x111111B1, 0xCCCC8C14, 0xCCCC48C2, 
0x222242C8, 0xC8480000, 0x00000040, 0x2222B6CC, 0x22222222, 0x22325566, 0xCC9C6826, 0x0080050B, 
0x00000060, 0x00000C04, 0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x9CC9C9BA, 0xBC9BA9CC, 0x99999999, 0xA9C9CCCC, 0xCCBCCC0C, 0x00849C85, 0x00000051, 0x01000000, 
0x9C88875A, 0x99BBCCBB, 0x1200092B, 0x00000080, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 
0x00204C00, 0x00000004, 0x00000000, 0xBCB9CCCC, 0xCB9CBACC, 0xC8AA8AC4, 0xC8CCCBCC, 0xCACCB99C, 
0x3487CCCB, 0xBAAAA9CC, 0x5677C99B, 0x6544769A, 0xAC9B6634, 0x02000F3B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x111111B1, 0xCCCC8C14, 
0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 0x2222B6CC, 0x22222222, 0x22325566, 0xCC9C6826, 
0x00000546, 0x0A000040, 0x0000A020, 0x0AA0A600, 0x00000060, 0x00000000, 0x00000000, 0x00040000, 
0x00260000, 0xAC9999C9, 0xCCCCCACC, 0xAA5601C0, 0xA6CCCCCC, 0xC9C9CB99, 0x6A89AC9C, 0xCACBCBCC, 
0x31325675, 0x57130000, 0xCC9C8766, 0x01000701, 0x0228C64C, 0x00000000, 0x00800000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCBCBA9B9, 0xCCACCCCC, 0x990973C3, 0xA9CCCBCC, 
0xC8A8960A, 0x51A92640, 0xBA9C9999, 0xB9ACA9CB, 0x99BACBAA, 0x99999999, 0x08000F3B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x111111B1, 
0xCCCC8C14, 0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 0x2222B6CC, 0x22222222, 0x22325566, 
0xCC9C6826, 0x12000521, 0x96000080, 0xCC96A940, 0x0000800C, 0x00000000, 0x000000CC, 0x0406208A, 
0x00000099, 0x00900000, 0x9C9999B9, 0x99BACCCC, 0x9BCBBCC9, 0x99A9CCCC, 0x86CACC0C, 0x47000000, 
0x00000000, 0xAB894602, 0xCCCCCCCC, 0x0164A8CC, 0x0000072D, 0x00000060, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x800C0000, 0x00000360, 0x00600000, 0xCCCCCCBC, 0xAAAAAACC, 0xCCC9CCC9, 
0x9999C9CC, 0xCACCCCCC, 0xACAACAAA, 0xAAAACACC, 0xAAAAAAAA, 0xCBAAAAAA, 0xCCCCAACA, 0x12000915, 
0x00000060, 0x00000000, 0x006C0000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x9A9999C9, 0x9999CCCC, 0x9C3500C0, 0x1184CBCC, 0xC9CCCC9A, 0x73BB9999, 0xCCCCCCCB, 0x000042C8, 
0x00000000, 0x02000000, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00220000, 0x9C9A99B9, 0xACBCCACC, 0x9C4944C4, 0x9999CCCC, 0xCACAAACA, 
0xCCAACCCA, 0xCCCCCCCC, 0x99B9CABC, 0x99A99999, 0xBACBAC9A, 0x00800516, 0x00000040, 0x00000000, 
0xC0C60A00, 0x0C000006, 0x02000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCC9CB9, 0xBA99CCCC, 
0x999999C9, 0xC9CCCC9C, 0xC8CBCC0C, 0x95151540, 0xBCBAAB67, 0x83C9CCCC, 0x00000000, 0x02000000, 
0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 
0x0000CC00, 0x111111B1, 0xCCCC8C14, 0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 0x2222B6CC, 
0x22222222, 0x22325566, 0xCC9C6826, 0x0E000521, 0x96000080, 0xCC96A940, 0x0000800C, 0x00000000, 
0x000000CC, 0x0406208A, 0x00000099, 0x00900000, 0xC9999CB9, 0x99C9C9BC, 0x99999999, 0x99CBCCCC, 
0x40C8CC0C, 0x00000000, 0x10000064, 0xCCCC8C04, 0xCCCCCCCC, 0x6686CACC, 0x0000072D, 0x00000060, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x800C0000, 0x00000360, 0x00600000, 0xCCCCCCBC, 
0x111184CC, 0xCCC8CC08, 0x0030B7CC, 0xC8CCCC0C, 0x8C040040, 0x00000093, 0x00000000, 0xCCAC1500, 
0xCC9C65CA, 0x12000915, 0x00000060, 0x00000000, 0x44CC0400, 0x00002002, 0x00000000, 0x00002000, 
0x00000000, 0x00000000, 0x7B2322B2, 0xC88CCCCA, 0xCCAC2600, 0x0040C8AC, 0x75B8CC0C, 0x00000020, 
0xBACCCCCC, 0x11112153, 0x11111111, 0xAC681111, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x111111B1, 0xCCCC8C14, 0xCCCC48C2, 
0x222242C8, 0xC8480000, 0x00000040, 0x2222B6CC, 0x22222222, 0x22325566, 0xCC9C6826, 0x0C000522, 
0x82000080, 0xCC86404A, 0x000080C0, 0x00000000, 0x0000CC00, 0x4088009A, 0x00000000, 0x00080000, 
0xCCCCCAB9, 0x9999C9CC, 0xCCCC68C4, 0x30B7CCCC, 0xC9CCCC9C, 0x01009999, 0x65A8CBCC, 0x57555555, 
0xBCCBCC9A, 0xCCCCCCCB, 0x00000714, 0x00000060, 0x00000000, 0x0AB80900, 0x00000004, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xAC9999B9, 0xCC9ACCCC, 0x343333C3, 0x3384CC8C, 0xC9C9CBCC, 
0x44449999, 0x55B7CCAC, 0x00000020, 0x00000000, 0x15000000, 0x02000926, 0x00000060, 0x00000000, 
0xB09A0600, 0x05000000, 0xC0000000, 0x00000000, 0x00000000, 0x00000000, 0xCC9A99C9, 0xCCCCCCCC, 
0x9BCC48C3, 0x43C8CCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x86CACCCC, 0x6666A867, 0x66666666, 0xCC7A6666, 
0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 
0x0000CC00, 0x111111B1, 0xCCCC8C14, 0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 0x2222B6CC, 
0x22222222, 0x22325566, 0xCC9C6826, 0x1200030F, 0x00000060, 0xBC050000, 0x00000010, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x999999C9, 0x9999CACC, 0xCBCC9CC5, 0x2284CCBC, 
0xCBCCCCBC, 0xBBBBBBBB, 0x444464CA, 0x8A464444, 0xCCCCCCCC, 0xAB4665A7, 0x12000925, 0x00000060, 
0x00000000, 0x096A0200, 0x00000090, 0x000C0000, 0x00000000, 0x00000000, 0x00000000, 0xAC99BAC9, 
0x9BA9CCCC, 0x987B23C2, 0xC9CCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xB9BACCCC, 0x55556688, 0x55555555, 
0xAC685555, 0x02000701, 0x0226C74C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00000000, 
0x00040020, 0x00000000, 0xCC9999C9, 0xCBCCCCCC, 0x262222C2, 0x7AC9CCAC, 0xCCCCCCCC, 0xCCCCCCCC, 
0x445455C7, 0xBC8B4544, 0x8AA788CA, 0xCCCCCCCC, 0x08000F3B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x111111B1, 0xCCCC8C14, 0xCCCC48C2, 
0x222242C8, 0xC8480000, 0x00000040, 0x2222B6CC, 0x22222222, 0x22325566, 0xCC9C6826, 0x12000522, 
0xAA000080, 0x008604CC, 0x00000000, 0x00000000, 0x0000C200, 0x0006008A, 0x00000066, 0x00400000, 
0x9C99AAC9, 0x9999CCCC, 0x999999C9, 0x99CCCC9C, 0x62030000, 0x0284AC26, 0x02007299, 0x00020030, 
0x54020000, 0xCCCC8C34, 0x1200091C, 0x00000060, 0x00000000, 0x00000000, 0x00C44800, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x480000B0, 0x738ACCCC, 0xCCCC4800, 0x0020A6CC, 0x84040000, 
0x7384CC48, 0x33550200, 0xCCCCBB6A, 0x000010A4, 0x00000000, 0x00FF0803, 0x00060A0C, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x004E4E4F, 0x00000000, 
0x00000000, 0x00000000, 0x00BDBDBD, 0x00000000, 0x00000000, 0x00000000, 0x00CECECE, 0x00000000, 
0x00000000, 0x00000000, 0x0100013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20C00000, 0x0000CA00, 0x000000B0, 0xCBCCAC68, 0xC8CC4800, 0x00000040, 0xC8480000, 
0x00000040, 0x00002087, 0x55360000, 0x03001094, 0xCBCCAB8B, 0x0080010B, 0xC2000060, 0x20C20C2A, 
0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00A00000, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0x1000052A, 0x00000060, 0x00000000, 0x00240A00, 0x0066208A, 0x88880000, 0x00A6CA00, 0x00000066, 
0x00000000, 0xCCCCCCBC, 0xB9AACCCC, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x0100013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x000000B0, 0xCBCCAC68, 0xC8CC4800, 0x00000040, 
0xC8480000, 0x00000040, 0x00002087, 0x55360000, 0x03001094, 0xCBCCAB8B, 0x10000107, 0x4C000060, 
0x00004024, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00440000, 0xCC888CB8, 
0x8C34B7CC, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0x00000733, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00020000, 
0x00000C20, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x12000914, 0x00000060, 0x00000000, 0x44C20400, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x8C3433B3, 0x8C8CCCBC, 0x6A230000, 
0x0030A6CC, 0xC6CCCC06, 0x00000031, 0xA7CCCC7C, 0x00000041, 0x00000000, 0x03000000, 0x0100013B, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 
0x000000B0, 0xCBCCAC68, 0xC8CC4800, 0x00000040, 0xC8480000, 0x00000040, 0x00002087, 0x55360000, 
0x03001094, 0xCBCCAB8B, 0x12000306, 0xCA000060, 0x22C2A82A, 0x00008006, 0x00000000, 0x00006686, 
0x004600AA, 0x00000044, 0x00880000, 0x48848CB4, 0x3384CCCC, 0x48000000, 0x0040C8CC, 0xCACCCC0B, 
0x00001052, 0x00000000, 0x00202500, 0xBC580100, 0x000083CC, 0x0C000943, 0x00000040, 0x00000000, 
0x0CC40C00, 0x000200C6, 0x22000000, 0x00006200, 0x00000000, 0x00000000, 0xCCCC99C9, 0x9C99CCCC, 
0xBBBBBBCB, 0xBBBBCBBC, 0xC9CC9B99, 0x00009999, 0xCBCCCCCC, 0x00000062, 0x00000000, 0xBC896703, 
0x00800912, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 
0x00060000, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xCBBBBBBB, 0xBBBBBBBB, 0xBBBBBBCB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCCCCACC9, 0xBCBBCCCC, 0x8B6745C3, 0x9999C9CC, 
0xC73733C3, 0x33333354, 0xA9BACCCC, 0x22335486, 0x59222222, 0xCCCCCCCC, 0x0080031F, 0x00000020, 
0x00000000, 0xC0800800, 0x8C00800A, 0x02000000, 0x00004400, 0x00000000, 0x00000000, 0x99B999B9, 
0x9C9999CC, 0x999999C9, 0x99ABCC99, 0xCCCCCC04, 0x0084CCCC, 0xCCBA8913, 0x8988BBCC, 0x00001065, 
0x31010000, 0x0200013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20C00000, 0x0000CC00, 0x000000B0, 0xCBCCAC68, 0xC8CC4800, 0x00000040, 0xC8480000, 0x00000040, 
0x00002087, 0x55360000, 0x03001094, 0xCBCCAB8B, 0x0C000142, 0xCC000040, 0x20C20C4C, 0x00000008, 
0x00002000, 0x00000040, 0x0022006A, 0x00000022, 0x00800000, 0x9A9C99B9, 0xACBCA9CC, 0xAC9999C9, 
0x99B999CC, 0xC8CCCC08, 0x6A020042, 0x00000000, 0x00000000, 0xCC4A0100, 0x627699C9, 0x00000733, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00020000, 0x00000C20, 0x00000000, 
0xCACCAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0x12000914, 0x00000060, 0x00000000, 0xAAC80A00, 0x00000004, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x9C5925B1, 0x0063C9CC, 0x7B030000, 0x000084CC, 0xC7CCCC08, 
0x00000031, 0xA9CCCC7C, 0x00000041, 0x00000000, 0x03000000, 0x0200013B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CC00, 0x000000B0, 0xCBCCAC68, 
0xC8CC4800, 0x00000040, 0xC8480000, 0x00000040, 0x00002087, 0x55360000, 0x03001094, 0xCBCCAB8B, 
0x12000106, 0xCA000060, 0x22C2A82A, 0x00008006, 0x00000000, 0x00006686, 0x004600AA, 0x00000044, 
0x00880000, 0x483002B0, 0x0040C8CC, 0x6A020000, 0x0040C8CC, 0xC8CCCC0C, 0x00000043, 0x00000100, 
0x00000000, 0xCCAC4701, 0x001044B6, 0x0E000943, 0x00000040, 0x00000000, 0x0CC40C00, 0x000200C6, 
0x22000000, 0x00006200, 0x00000000, 0x00000000, 0xCCAC99C9, 0x9999CCCC, 0x480000C0, 0x0040C8CC, 
0xCACCCC99, 0x303799A9, 0xC8CCCCC9, 0x00000030, 0x44010000, 0x02000010, 0x00800712, 0x82000040, 
0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0x9A99CCC9, 
0x99C9BC9C, 0xBBBBBBCB, 0xBBBBBBBB, 0xCBBBBBBB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00220000, 0xCCCCACC9, 0xBCBBCCCC, 0x8B6745C3, 0x9999C9CC, 0xC73733C3, 0x33333354, 
0xA9BACCCC, 0x22335486, 0x59222222, 0xCCCCCCCC, 0x0200013B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x000000B0, 0xCBCCAC68, 0xC8CC4800, 
0x00000040, 0xC8480000, 0x00000040, 0x00002087, 0x55360000, 0x03001094, 0xCBCCAB8B, 0x1200010B, 
0xC0000060, 0x00C00C04, 0x00000002, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00400000, 
0x999999B9, 0x9999C9CC, 0x999999C9, 0x9999CCAC, 0xB7CCCC0C, 0x00000030, 0x00000000, 0x00000000, 
0xCCAC1500, 0x000051CA, 0x12000914, 0x00000060, 0x00000000, 0x44C20400, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x7B3526C2, 0xA797CCCC, 0x48000000, 0x63B8CCCC, 0xCACCCC8C, 
0x88888898, 0x86CCCCAC, 0x00000020, 0x00000000, 0x14000000, 0x0200013B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x000000B0, 0xCBCCAC68, 
0xC8CC4800, 0x00000040, 0xC8480000, 0x00000040, 0x00002087, 0x55360000, 0x03001094, 0xCBCCAB8B, 
0x12000112, 0x20000040, 0x00222000, 0x0000C040, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x9C9999B9, 0x9999C9CC, 0x6A0300C0, 0x0051C9CC, 0xC9999999, 0x00009999, 0x001241C6, 
0x00000000, 0x49020000, 0xCACCCCCC, 0x03000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCCBC9CB9, 0x9999CCCC, 0x990900C0, 0x99C9CC9C, 
0xC8480000, 0x00000040, 0xCC999999, 0x9999C9CC, 0x99999999, 0x99999999, 0x00242A03, 0x0006060B, 
0x00000000, 0x00000000, 0x00000000, 0x00010100, 0x00000000, 0x00000000, 0x00000000, 0x00C2C2C0, 
0x00000000, 0x00000000, 0x00000000, 0x00787878, 0x00000000, 0x00000000, 0x00000000, 0x00575757, 
0x00000000, 0x00000000, 0x00000000, 0x0000080B, 0x60000060, 0x00600C04, 0x00000006, 0x00000000, 
0x00000000, 0x00000066, 0x00000000, 0x00000000, 0xCCCCCCB9, 0x999999CC, 0xBC9999C9, 0x9999CBCC, 
0x84CCCC0C, 0x00002026, 0x00000000, 0x00000000, 0xCC7A3700, 0x51B7CCCC, 0x00000716, 0x00000040, 
0x00000000, 0xC0A00800, 0x2C000002, 0x02000000, 0x00000000, 0x00000000, 0x00000000, 0xCC9999B9, 
0xA9BACCCC, 0x999999C9, 0x99CACCCC, 0xC8CCCC0C, 0x00000040, 0xBBCCCCBC, 0x000021A6, 0x00000000, 
0x26000000, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20C00000, 0x0000CA00, 0x000000B0, 0xCBCCAC68, 0xCCCC4800, 0x6499CACC, 0xC8480000, 0x00000040, 
0x00002087, 0x55360000, 0x03001094, 0xCBCCAB8B, 0x08000542, 0xCC000040, 0x20C20C4C, 0x00000008, 
0x00002000, 0x00000060, 0x0022008A, 0x00000022, 0x00800000, 0xACBA99B9, 0xBBCCCCCC, 0x999999C9, 
0x99A9CCCC, 0xCACCCC0C, 0x35004386, 0x00004286, 0x00000000, 0xCCCCAA46, 0x99CACCCC, 0x00000733, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00060000, 0x00000C60, 0x00600000, 
0xCCCC8CB4, 0x000084CC, 0xCCCC48C0, 0x0051C9CC, 0xC8CCCC0A, 0x8C040040, 0x00000010, 0x00000000, 
0x9A140000, 0xA4CCCCCC, 0x10000914, 0x00000060, 0x00000000, 0xAAC80A00, 0x00000004, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xCCBC37B0, 0x0084CACC, 0x480000C0, 0x40C8CCCC, 0xC4CCCC08, 
0x00000000, 0x94CCCCCC, 0x00001121, 0x00000010, 0x8A000000, 0x02000F3B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x000000B0, 0xCBCCAC68, 
0xCCCC4800, 0x6499CACC, 0xC8480000, 0x00000040, 0x00002087, 0x55360000, 0x03001094, 0xCBCCAB8B, 
0x0E000506, 0xCA000060, 0x22C2AA2A, 0x00008006, 0x00000000, 0x00006686, 0x004600AA, 0x00000044, 
0x00880000, 0xAC6924B0, 0xA6AACBCC, 0x8A040000, 0x95CACCCC, 0xCBCCCC0C, 0x000062AA, 0x01101064, 
0x02000000, 0xCCBC8A46, 0xA8CACCCC, 0x0E000943, 0x00000040, 0x00000000, 0x0CC40B00, 0x000200C6, 
0x22000000, 0x00006200, 0x00000000, 0x00000000, 0xACAAAACA, 0xCCCCCCCC, 0x370000C0, 0x52B8CCBC, 
0xC9CCCC9C, 0x00129999, 0xCBCCCCCC, 0x11112184, 0x06000010, 0xAC888888, 0x00800812, 0x82000040, 
0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0x9A9999C9, 
0xAA99CBCC, 0x480000C0, 0xC8CCCCAC, 0xC9999999, 0x00009999, 0xACABABCB, 0x533584CB, 0x41666623, 
0x89573500, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00220000, 0xAA9A99C9, 0xCCCCCCCC, 0x990900C0, 0x99B9CCBC, 0xC848620A, 0x00002046, 
0x99BACCCC, 0x99999999, 0xCC9A9999, 0xCCCCCCCC, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x000000B0, 0xCBCCAC68, 0xCCCC4800, 
0x6499CACC, 0xC8480000, 0x00000040, 0x00002087, 0x55360000, 0x03001094, 0xCBCCAB8B, 0x1200050B, 
0xCC000040, 0x00C00C0C, 0x00000007, 0x00000000, 0x00000040, 0x00000046, 0x00000000, 0x00200000, 
0xCCCC9BB9, 0xBBCBCCCC, 0x999999C9, 0x99CACCCC, 0xB7CACC0C, 0x43002131, 0x00000020, 0x02000000, 
0xCCAC7835, 0x2274B9CC, 0x12000914, 0x00000060, 0x00000000, 0x44C20400, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x7B2502B0, 0x73CACCCC, 0x48000000, 0x1073CBCC, 0xC8CCCC0C, 
0x10880140, 0xA7CCCCCC, 0x00001131, 0x00000000, 0x8A000000, 0x02000F3B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x000000B0, 0xCBCCAC68, 
0xCCCC4800, 0x6499CACC, 0xC8480000, 0x00000040, 0x00002087, 0x55360000, 0x03001094, 0xCBCCAB8B, 
0x12000512, 0x82000040, 0x00886000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 
0x00060000, 0xCC9999CA, 0x9999CBCC, 0x260000C0, 0x73CBCCAC, 0xC999A999, 0x00629A99, 0xCCCCCCCC, 
0x004086BA, 0x8A680400, 0xCCCCCCAB, 0x03000701, 0x0208C24C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCC9A99B9, 0xC9CCCCCC, 0x990900C0, 0x99CBCC9C, 
0xC8480000, 0x00000040, 0xCCCC9A99, 0xCCCCCCCC, 0x9999A9AA, 0xCCCCAC99, 0x02000F3B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x000000B0, 
0xCBCCAC68, 0xCCCC4800, 0x6499CACC, 0xC8480000, 0x00000040, 0x00002087, 0x55360000, 0x03001094, 
0xCBCCAB8B, 0x1200050B, 0xCC000040, 0x00C00C0C, 0x00000007, 0x00000000, 0x00000040, 0x00000046, 
0x00000000, 0x00200000, 0xCCCCBCB9, 0xBBCBCCCC, 0x999999C9, 0x99CCCCCC, 0xC8CCCC0C, 0x62027367, 
0x00000020, 0x00000000, 0xCCAC2600, 0x86A9CCCC, 0x12000914, 0x00000060, 0x00000000, 0x44C20400, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xAC9B45B0, 0xA6CCCCCC, 0x48030000, 
0x77CBCCCC, 0xC9CCCC0C, 0x33884177, 0xA8CCCCCC, 0x00103244, 0x00000000, 0x8A000000, 0x02000F3B, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 
0x000000B0, 0xCBCCAC68, 0xCCCC4800, 0x6499CACC, 0xC8480000, 0x00000040, 0x00002087, 0x55360000, 
0x03001094, 0xCBCCAB8B, 0x12000512, 0x82000040, 0x00886000, 0x0000C0A0, 0x00000000, 0x00004400, 
0x00000000, 0x00000000, 0x00060000, 0xCCCCCCBB, 0xA6CBCCCC, 0x150000C0, 0xCACCCC9C, 0xCBCCCC0C, 
0x511195A9, 0x86A8AACC, 0x00000042, 0x46440100, 0xCCCCCC7A, 0x03000714, 0x02080040, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0x9A9999B9, 0xCCCCCCCC, 
0x8C000000, 0xCCCCCCCC, 0xCABBCC9C, 0x000099A9, 0x88CACC9C, 0x006287AA, 0x00000000, 0x03000000, 
0x00FF0803, 0x00060A0C, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00444241, 0x00000000, 0x00000000, 0x00000000, 0x00BDBDBD, 0x00000000, 0x00000000, 
0x00000000, 0x00CECECE, 0x00000000, 0x00000000, 0x00000000, 0x0100013B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x000000B0, 0xCBCCAC68, 
0xCCCC4800, 0x000020A6, 0xC8480000, 0x00000040, 0x0010A5CC, 0x78030000, 0x000010A5, 0xCC9A2700, 
0x0080010B, 0xC2000060, 0x20C20C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 
0x00A00000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x1000052A, 0x00000060, 0x00000000, 0x00240A00, 0x0066208A, 
0x88880000, 0x00A6CA00, 0x00000066, 0x00000000, 0xCCCCCCBC, 0xB9AACCCC, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x0100013B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x000000B0, 
0xCBCCAC68, 0xCCCC4800, 0x000020A6, 0xC8480000, 0x00000040, 0x0010A5CC, 0x78030000, 0x000010A5, 
0xCC9A2700, 0x10000107, 0x4C000060, 0x00004024, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00440000, 0xCC888CB8, 0x8C34B7CC, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x00000733, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00020000, 0x00000C20, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x12000914, 
0x00000060, 0x00000000, 0x44C20400, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x8C3533B3, 0x8C8CCCCC, 0x6A230000, 0x0030A6CC, 0xC6CCCC06, 0x00000031, 0xA7CCCC7C, 0x00000041, 
0x00000000, 0x03000000, 0x0100013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20A00000, 0x0000CC00, 0x000000B0, 0xCBCCAC68, 0xCCCC4800, 0x000020A6, 0xC8480000, 
0x00000040, 0x0010A5CC, 0x78030000, 0x000010A5, 0xCC9A2700, 0x12000306, 0xCA000060, 0x22C2A82A, 
0x00008006, 0x00000000, 0x00006686, 0x004600AA, 0x00000044, 0x00880000, 0x48848CB4, 0x3384CCCC, 
0x48000000, 0x0040C8CC, 0xCACCCC0B, 0x00001052, 0x00000000, 0x00202500, 0xBC580100, 0x000083CC, 
0x0C000943, 0x00000040, 0x00000000, 0x0CC40C00, 0x000200C6, 0x22000000, 0x00006200, 0x00000000, 
0x00000000, 0xCCCC99C9, 0x9C99CCCC, 0xBBBBBBCB, 0xBBBBCBBC, 0xC9CC9B99, 0x00009999, 0xCBCCCCCC, 
0x00000062, 0x00000000, 0xBC896703, 0x00800912, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 
0x00004400, 0x00000000, 0x00000000, 0x00060000, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 
0xCBBBBBBB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x01000701, 0x0228C64C, 
0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCCCCBCC9, 
0xCCBBCCCC, 0x9B6945C3, 0x9999C9CC, 0xC73733C3, 0x33333354, 0xA9BACCCC, 0x99999999, 0x99999999, 
0xCCCCCCCC, 0x0080031F, 0x00000020, 0x00000000, 0xC0800800, 0x8C00800A, 0x02000000, 0x00004400, 
0x00000000, 0x00000000, 0x99B999B9, 0x9C9999CC, 0x999999C9, 0x99ABCC99, 0xCCCCCC04, 0x0084CCCC, 
0xCCBA8913, 0x8988BBCC, 0x00001065, 0x31010000, 0x0200013B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CC00, 0x000000B0, 0xCBCCAC68, 0xCCCC4800, 
0x000020A6, 0xC8480000, 0x00000040, 0x0010A5CC, 0x78030000, 0x000010A5, 0xCC9A2700, 0x0C000142, 
0xCC000040, 0x20C20C4C, 0x00000008, 0x00002000, 0x00000040, 0x0022006A, 0x00000022, 0x00800000, 
0x9A9C99B9, 0xACBCA9CC, 0xAC9999C9, 0x99B999CC, 0xC8CCCC08, 0x6A020042, 0x00000000, 0x00000000, 
0xCC4A0100, 0x627699C9, 0x00000733, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00020000, 0x00000C20, 0x00000000, 0xCACCAABA, 0xAAAAAAAA, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x12000914, 0x00000060, 0x00000000, 
0xAAC80A00, 0x00000004, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x9C5925B1, 0x0063C9CC, 
0x7B030000, 0x000084CC, 0xC7CCCC08, 0x00000031, 0xA9CCCC7C, 0x00000041, 0x00000000, 0x03000000, 
0x0200013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 
0x0000CC00, 0x000000B0, 0xCBCCAC68, 0xCCCC4800, 0x000020A6, 0xC8480000, 0x00000040, 0x0010A5CC, 
0x78030000, 0x000010A5, 0xCC9A2700, 0x12000106, 0xCA000060, 0x22C2A82A, 0x00008006, 0x00000000, 
0x00006686, 0x004600AA, 0x00000044, 0x00880000, 0x483002B0, 0x0040C8CC, 0x6A020000, 0x0040C8CC, 
0xC8CCCC0C, 0x00000043, 0x00000100, 0x00000000, 0xCCAC4701, 0x001044B6, 0x0E000943, 0x00000040, 
0x00000000, 0x0CC40C00, 0x000200C6, 0x22000000, 0x00006200, 0x00000000, 0x00000000, 0xCCAC99C9, 
0x9999CCCC, 0x480000C0, 0x0040C8CC, 0xCACCCC99, 0x303799A9, 0xC8CCCCC9, 0x00000030, 0x44010000, 
0x02000010, 0x00800712, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 
0x00000000, 0x00060000, 0x9A99CCC9, 0x99C9BC9C, 0xBBBBBBCB, 0xBBBBBBBB, 0xCBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCCCCACC9, 0xBCBBCCCC, 0x8B6745C3, 
0x9999C9CC, 0xC73733C3, 0x33333354, 0xA9BACCCC, 0x22335486, 0x59222222, 0xCCCCCCCC, 0x0200013B, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 
0x000000B0, 0xCBCCAC68, 0xCCCC4800, 0x000020A6, 0xC8480000, 0x00000040, 0x0010A5CC, 0x78030000, 
0x000010A5, 0xCC9A2700, 0x1200010B, 0xC0000060, 0x00C00C04, 0x00000002, 0x00000000, 0x00000000, 
0x00000002, 0x00000000, 0x00400000, 0x999999B9, 0x9999C9CC, 0x999999C9, 0x9999CCAC, 0xB7CCCC0C, 
0x00000030, 0x00000000, 0x00000000, 0xCCAC1500, 0x000051CA, 0x12000914, 0x00000060, 0x00000000, 
0x44C20400, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x7B3526C2, 0xA797CCCC, 
0x48000000, 0x63B8CCCC, 0xCACCCC8C, 0x88888898, 0x86CCCCAC, 0x00000020, 0x00000000, 0x14000000, 
0x0200013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 
0x0000CC00, 0x000000B0, 0xCBCCAC68, 0xCCCC4800, 0x000020A6, 0xC8480000, 0x00000040, 0x0010A5CC, 
0x78030000, 0x000010A5, 0xCC9A2700, 0x12000112, 0x20000040, 0x00222000, 0x0000C040, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x9C9999C9, 0x9999C9CC, 0x6A0300C0, 0x0051C9CC, 
0xC9999999, 0x00009999, 0x001241C6, 0x00000000, 0x49020000, 0xCACCCCCC, 0x03000701, 0x0228C64C, 
0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCCBC9CB9, 
0x9999CCCC, 0x990900C0, 0x99C9CC9C, 0xC8480000, 0x00000040, 0xCC999999, 0x9999C9CC, 0x99999999, 
0x99999999, 0x00242A03, 0x0006060B, 0x00000000, 0x00000000, 0x00000000, 0x00010100, 0x00000000, 
0x00000000, 0x00000000, 0x00C2C2C0, 0x00000000, 0x00000000, 0x00000000, 0x00787878, 0x00000000, 
0x00000000, 0x00000000, 0x00575757, 0x00000000, 0x00000000, 0x00000000, 0x0000080B, 0x60000060, 
0x00600C04, 0x00000006, 0x00000000, 0x00000000, 0x00000066, 0x00000000, 0x00000000, 0xCCCCCCB9, 
0xBBCBCCCC, 0xBC9999C9, 0x9999CBCC, 0x84CCCC0C, 0x00002026, 0x00000000, 0x00000000, 0xCC7A3700, 
0x51B7CCCC, 0x00000716, 0x00000040, 0x00000000, 0xC0A00800, 0x2C000002, 0x02000000, 0x00000000, 
0x00000000, 0x00000000, 0xCC9999B9, 0xA9BACCCC, 0x999999C9, 0x99CACCCC, 0xC8CCCC0C, 0x00000040, 
0xBBCCCCBC, 0x000021A6, 0x00000000, 0x26000000, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x000000B0, 0xCBCCAC68, 0xCC8C0400, 
0x000062CA, 0xC8480000, 0x00000040, 0x0030C9CC, 0x00000000, 0x00304801, 0x9C984801, 0x08000542, 
0xCC000040, 0x20C20C4C, 0x00000008, 0x00002000, 0x00000060, 0x0022008A, 0x00000022, 0x00800000, 
0xACBA99B9, 0xA9CCCCCC, 0x999999C9, 0x99A9CCCC, 0xCACCCC0C, 0x35004386, 0x00004286, 0x00000000, 
0xCCCCAA46, 0x99CACCCC, 0x00000733, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00060000, 0x00000C60, 0x00600000, 0xCCCC8CB4, 0x000084CC, 0xCCCC48C0, 0x0051C9CC, 0xC8CCCC0A, 
0x8C040040, 0x00000010, 0x00000000, 0x9A140000, 0xA4CCCCCC, 0x10000914, 0x00000060, 0x00000000, 
0xAAC80A00, 0x00000004, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCBC37B0, 0x0084CACC, 
0x480000C0, 0x40C8CCCC, 0xC4CCCC08, 0x00000000, 0x94CCCCCC, 0x00001121, 0x00000010, 0x8A000000, 
0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 
0x0000CA00, 0x000000B0, 0xCBCCAC68, 0xCCCC4800, 0x000020A6, 0xC8480000, 0x00000040, 0x0010A5CC, 
0x78030000, 0x000010A5, 0xCC9A2700, 0x0E000506, 0xCA000060, 0x22C2AA2A, 0x00008006, 0x00000000, 
0x00006686, 0x004600AA, 0x00000044, 0x00880000, 0xAC6924B0, 0xA6AACBCC, 0x8A040000, 0x95CACCCC, 
0xCBCCCC0C, 0x000062AA, 0x01101064, 0x02000000, 0xCCBC8A46, 0xA8CACCCC, 0x0E000943, 0x00000040, 
0x00000000, 0x0CC40B00, 0x000200C6, 0x22000000, 0x00006200, 0x00000000, 0x00000000, 0xACAAAACA, 
0xCCCCCCCC, 0x370000C0, 0x52B8CCBC, 0xC9CCCC9C, 0x00129999, 0xCBCCCCCC, 0x11112184, 0x06000010, 
0xAC888888, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 
0x00000000, 0x00060000, 0x9A9999C9, 0xAA99CBCC, 0x480000C0, 0xC8CCCCAC, 0xC9999999, 0x00009999, 
0xACABABCB, 0x533584CB, 0x41666623, 0x89573500, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xAA9A99C9, 0xCCCCCCCC, 0x990900C0, 
0x99B9CCBC, 0xC848620A, 0x00002046, 0x99BACCCC, 0x99999999, 0xCC9A9999, 0xCCCCCCCC, 0x02000F3B, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 
0x000000B0, 0xCBCCAC68, 0xCCCC6AC2, 0x111173CB, 0xC84811C1, 0x11111141, 0x1121A5CC, 0x11111111, 
0x11119425, 0xBC875A12, 0x1200050B, 0xCC000040, 0x00C00C0C, 0x00000007, 0x00000000, 0x00000040, 
0x00000046, 0x00000000, 0x00200000, 0xCCCC9BB9, 0xBBCBCCCC, 0x999999C9, 0x99CACCCC, 0xB7CACC0C, 
0x43002131, 0x00000020, 0x02000000, 0xCCAC7835, 0x2274B9CC, 0x12000914, 0x00000060, 0x00000000, 
0x44C20400, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x7B2502B0, 0x73CACCCC, 
0x48000000, 0x1073CBCC, 0xC8CCCC0C, 0x10880140, 0xA7CCCCCC, 0x00001131, 0x00000000, 0x8A000000, 
0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 
0x0000CA00, 0x000000B0, 0xCBCCAC68, 0xCCCC4800, 0x000020A6, 0xC8480000, 0x00000040, 0x0010A5CC, 
0x78030000, 0x000010A5, 0xCC9A2700, 0x12000512, 0x82000040, 0x00886000, 0x0000C0A0, 0x00000000, 
0x00004400, 0x00000000, 0x00000000, 0x00060000, 0xCC9999CA, 0x9999CBCC, 0x260000C0, 0x73CBCCAC, 
0xC999A999, 0x00629A99, 0xCCCCCCCC, 0x004086BA, 0x8A680400, 0xCCCCCCAB, 0x03000701, 0x0208C24C, 
0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCC9A99B9, 
0xC9CCCCCC, 0x990900C0, 0x99CBCC9C, 0xC8480000, 0x00000040, 0xCCCC9A99, 0xCCCCCCCC, 0x9999A9AA, 
0xCCCCAC99, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20C00000, 0x0000CA00, 0x000000B0, 0xCBCCAC68, 0xCCCC4800, 0x000020A6, 0xC8480000, 0x00000040, 
0x0010A5CC, 0x78030000, 0x000010A5, 0xCC9A2700, 0x1200050B, 0xCC000040, 0x00C00C0C, 0x00000007, 
0x00000000, 0x00000040, 0x00000046, 0x00000000, 0x00200000, 0xCCCCBCB9, 0xBBCBCCCC, 0x999999C9, 
0x99CCCCCC, 0xC8CCCC0C, 0x62027367, 0x00000020, 0x00000000, 0xCCAC2600, 0x86A9CCCC, 0x12000914, 
0x00000060, 0x00000000, 0x44C20400, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xAC9B45B0, 0xA6CCCCCC, 0x48030000, 0x77CBCCCC, 0xC9CCCC0C, 0x33884177, 0xA8CCCCCC, 0x00103244, 
0x00000000, 0x8A000000, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20C00000, 0x0000CA00, 0x000000B0, 0xCBCCAC68, 0xCCCC4800, 0x000020A6, 0xC8480000, 
0x00000040, 0x0010A5CC, 0x78030000, 0x000010A5, 0xCC9A2700, 0x12000512, 0x82000040, 0x00886000, 
0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0xCCCCCCBB, 0xA6CBCCCC, 
0x150000C0, 0xCACCCC9C, 0xCBCCCC0C, 0x511195A9, 0x86A8AACC, 0x00000042, 0x46440100, 0xCCCCCC7A, 
0x03000714, 0x02080040, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00220000, 0x9A9999B9, 0xCCCCCCCC, 0x8C000000, 0xCCCCCCCC, 0xCABBCC9C, 0x000099A9, 0x88CACC9C, 
0x006287AA, 0x00000000, 0x03000000, 0x00242A0D, 0x0B080809, 0x070B0908, 0x0C0A040B, 0x0000000A, 
0x01000101, 0x00000100, 0x00000401, 0x00000000, 0x42C74440, 0xC9C740C7, 0xC7C7C7CA, 0x000000C7, 
0x78787878, 0x78787878, 0x78787878, 0x00000078, 0x56575656, 0x57575657, 0x57575657, 0x00000057, 
0x00000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 
0x0000AC00, 0x222222B2, 0xC8CC8C24, 0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 0xBBBBCCCC, 
0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 0x04000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20C00000, 0x0000AC00, 0x000000B0, 0x84CC8C04, 0xCC8C0400, 0x000084CC, 
0xC8480000, 0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 0x0C00050B, 0xC2000060, 
0x20C20C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00A00000, 0x999999B9, 
0x9999A9CC, 0x999999C9, 0x99C9CC99, 0xCACCCC0C, 0x42000062, 0x00000000, 0x00000000, 0xCC9C0300, 
0x000041CA, 0x0000092D, 0x82000060, 0x40840000, 0x00002A80, 0x00000006, 0x02000600, 0x80AC8628, 
0x00000000, 0x00040000, 0x30B7CCBC, 0x00000000, 0xC8CCBC07, 0x00000040, 0xC8CCCC08, 0x00000051, 
0x000030C8, 0x00000000, 0x00000000, 0xCCAC4901, 0x12000946, 0x20000040, 0x0020C00C, 0xCC202000, 
0x00000000, 0x00000000, 0x00000000, 0x00040000, 0x00000000, 0xCC9B99C9, 0x99B9CCCC, 0x480000C0, 
0x20A6CCCC, 0xC9999999, 0x00009999, 0xCCCCCCCC, 0x433464C8, 0x44641531, 0xCCCCAC68, 0x00800712, 
0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00000400, 0x00000000, 0x00000000, 0x00060000, 
0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xCBBBBBBB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0x1000053A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xC0000000, 0x0000C000, 0x580100B0, 0x0063CACC, 0xCC8C0400, 0x000084CC, 0xC8480000, 
0x00000040, 0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 0x1000073A, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0xCCCC48B0, 0x00001095, 
0xCCAC2600, 0x000084CC, 0xC8480000, 0x00000040, 0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 
0x03000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00220000, 0xCC9C99B9, 0x99A9CCCC, 0x990900C0, 0x99B9CCCC, 0xC8480000, 0x00000040, 0x99A9CCCC, 
0x99999999, 0x99999999, 0x99999999, 0x00000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20C00000, 0x0000CC0A, 0x222222B2, 0xC8CC8C24, 0xCCCC48C2, 0x222242C8, 
0xC8480000, 0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 0x04000F3B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000AC00, 0x000000B0, 
0x84CC8C04, 0xCC8C0400, 0x000084CC, 0xC8480000, 0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 
0xCCCCCCCC, 0x0C00050B, 0xC2000060, 0x20C20C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 
0x00000064, 0x00A00000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x0C000918, 0x00000020, 0x00000000, 0x0A000A00, 
0x002882CA, 0x02440000, 0x00202200, 0x00000002, 0x00000000, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBCB, 
0xBBBBBBBB, 0xCBBBBBBB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x1000053A, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x0141CACC, 0x38000020, 
0x00005398, 0x9C460000, 0x1000073A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xC0000000, 0x0000C000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 0x1000093A, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0600000, 0x0000C000, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 
0x04000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00220000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x07000716, 0x00000040, 0x00000000, 0xC0C60A00, 0x0C000006, 
0xA6000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCCACB9, 0xCCCCCCCC, 0x999999C9, 0xC9CCCCBC, 
0xC8CCCC0C, 0x6A736676, 0xCACCCCCC, 0x10653396, 0x00000000, 0x39002001, 0x00000F3B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x00008C00, 0x680400B0, 
0xCACCCCAB, 0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 
0xCCCCCCCC, 0x04000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20C00000, 0x00008C00, 0x680400B0, 0xCACCCCAB, 0xCCCC8A24, 0x64A8CCCC, 0xC8480000, 0x00000040, 
0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 0x1200050E, 0x00000060, 0xC6480A00, 0x0000004C, 
0x00000000, 0x000000A9, 0x00000000, 0x00000000, 0x00000000, 0x040000B0, 0xC8CCCCAC, 0xCCAC68C4, 
0x0073CBCC, 0x1095CC0C, 0x00000000, 0x00000000, 0x26010000, 0xCACCCCAC, 0x00000084, 0x0000072D, 
0x82000060, 0x40840000, 0x00002A80, 0x00000006, 0x02000600, 0x80AC8628, 0x00000000, 0x00040000, 
0xCACCCCB8, 0x000020A6, 0x40C8CC08, 0x00000000, 0xC8CCCC08, 0x00000040, 0x00000051, 0x00000000, 
0x55020000, 0xCACCCC79, 0x10000917, 0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 0x00680000, 
0x00000000, 0x00000000, 0x00000000, 0xBC9A99B9, 0x99ABCCCC, 0x480000C0, 0x3197CCCC, 0xCACCCC9A, 
0x00029999, 0xCCCCCCCC, 0x2364A8CC, 0x01100023, 0xAB763514, 0x00800812, 0x82000040, 0x00888000, 
0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0x9A9999C9, 0xCA9ACC9B, 
0x040000C0, 0xC9CCCC88, 0xC9999999, 0x00009999, 0xBB88ABC9, 0x636543B7, 0x00002035, 0x7A020000, 
0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00220000, 0xAC9A99B9, 0x99BBCCCC, 0x990900C0, 0x9999CCCC, 0xC8480000, 0x00000040, 0xCCCCCCCC, 
0x9999A9CC, 0xCCCCAC99, 0xCCCCCCCC, 0x00000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20C00000, 0x00008C00, 0x680400B0, 0xCACCCCAB, 0xCCCC48C2, 0x222242C8, 
0xC8480000, 0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 0x02000F3B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x00008C0A, 0x680400B0, 
0xCACCCCAB, 0xCC8C0400, 0x000084CC, 0xC8480000, 0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 
0xCCCCCCCC, 0x0000050B, 0xC2000060, 0x20C20C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 
0x00000064, 0x00A00000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x12000913, 0x00000060, 0x00000000, 0xAAA20C00, 
0x2820228C, 0x66660000, 0x0046AA00, 0x00000064, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x00000F3B, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x00008C00, 
0x680400B0, 0xCACCCCAB, 0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 
0xCCCCCCBC, 0xCCCCCCCC, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20C00000, 0x00008C00, 0x680400B0, 0xCACCCCAB, 0xCC8C0400, 0x64A8CCCC, 0xC8480000, 
0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 0x1000073A, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 
0x1000093A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 
0x0000C000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x0141CACC, 
0x38000020, 0x00005398, 0x9C460000, 0x0000053D, 0x88000060, 0x00200020, 0x00000000, 0x00000000, 
0x00000600, 0x00680002, 0x00020000, 0x000C0000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x1200050A, 0xAC000060, 
0x00A0C060, 0x0000A000, 0x00000000, 0x000000AA, 0x00020000, 0x00000000, 0x002A0000, 0xBBBBBBCB, 
0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xCBBBBBBB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0x04000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00220000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x02000506, 0xCA000060, 0x22C2AB2A, 0x00008002, 
0x00000000, 0x0000668A, 0x004600AA, 0x00000044, 0x00880000, 0xCCCCCCBA, 0x999999AA, 0x999999C9, 
0xB9CCCCAC, 0xC8CCCC0C, 0x33000044, 0x10100063, 0x01000000, 0x9B563302, 0xCBCCCCCC, 0x12000715, 
0x00000060, 0x00000000, 0x00CC0000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x653604B0, 0xCCCCCC7B, 0xCC791400, 0x74CACCCC, 0x3063C90C, 0x11000000, 0xBACCCC8C, 0x10226476, 
0x00000000, 0x03000000, 0x00000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20C00000, 0x00008C00, 0x680400B0, 0xCACCCCAB, 0xCCCC48C2, 0x222242C8, 0xC8480000, 
0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 0x04000F3B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x00008C0A, 0x680400B0, 0xCACCCCAB, 
0xCC8C0400, 0x64A8CCCC, 0xC8480000, 0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 
0x1200050F, 0x00000060, 0xCC000000, 0x00000000, 0x00000000, 0x0000B000, 0x00000080, 0x00000000, 
0x00000000, 0x030000B0, 0xC8CCCC7B, 0xCCCC59C1, 0x1052C9CC, 0x4041C80C, 0x00000000, 0x00001020, 
0x03000000, 0xB6CCCC8C, 0x00001021, 0x12000917, 0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 
0x00A00000, 0x00000000, 0x00000000, 0x00000000, 0xBC9A99C9, 0x999AB9CC, 0x480000C0, 0x2196CCCC, 
0xC9CBCC9C, 0x00139999, 0xCACCCCCC, 0x10113295, 0x00100010, 0xAB663501, 0x00800812, 0x82000040, 
0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0xC99A99C9, 
0xBC99CCAB, 0x686A02C0, 0xCCCC8CCA, 0xC9999999, 0x00009999, 0xBCBA9CC9, 0x0210A5BA, 0x00000052, 
0x24841400, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00220000, 0xAC9A99B9, 0x99AAC9CC, 0x990900C0, 0x9999CCCC, 0xC99C99C9, 0x99999999, 
0x9999CBCC, 0x99999999, 0x99999999, 0xBC9A9999, 0x00000F3B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x00008C00, 0x680400B0, 0xCACCCCAB, 0xCCCC48C2, 
0x222242C8, 0xC8480000, 0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 0x04000F3B, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x00008C00, 
0x680400B0, 0xCACCCCAB, 0xCC8C0400, 0x64A8CCCC, 0xC8480000, 0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 
0xCCCCCCBC, 0xCCCCCCCC, 0x0600073A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xC0000000, 0x0000C000, 0xCACCBC98, 0x97879976, 0xCC480000, 0x000084CC, 0xC8480000, 
0x00000040, 0x4164CACC, 0x7B020000, 0x000041C9, 0x5A010000, 0x1000083A, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0x4186BABC, 0x00000000, 
0xCC8C7403, 0x0042A6CC, 0xC8480000, 0x00000040, 0x0083CCCC, 0x38000000, 0x001065A8, 0x4A010000, 
0x0E000511, 0x42000060, 0xC64A0A00, 0x0000000C, 0x00000000, 0x000000A8, 0x00000020, 0x00000008, 
0x00000000, 0x999999B9, 0x9BCACBCC, 0x999999C9, 0x99CBCC9C, 0xC8CCCC0C, 0x260030B7, 0x00000000, 
0x26000020, 0xCCAC4864, 0x410241CA, 0x0000052D, 0x00000060, 0x00000000, 0x00000000, 0x00000000, 
0x00000500, 0x00580005, 0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x0000082D, 0x00000060, 
0x00000000, 0x00000000, 0x00000000, 0x06000000, 0x006C0000, 0x00000000, 0x00000000, 0x1095CCBC, 
0x00204648, 0xCCCCCC08, 0x000040C8, 0xC8CCCC08, 0x00000040, 0x00004198, 0x00000000, 0x36000000, 
0xCCCC9A44, 0x12000943, 0x00000040, 0x00000000, 0x0CC40C00, 0x000200C6, 0x22000000, 0x00006200, 
0x00000000, 0x00000000, 0xBCCB99C9, 0xB99CCCCC, 0xCB9935C0, 0x84A6CCCC, 0xC99A9999, 0x00009999, 
0xCAACAACA, 0xBAAC9BB9, 0x21431194, 0x56773325, 0x03000701, 0x0228C64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xB99B99B9, 0xBCACCCBC, 0x990902C0, 
0x99C9CCAC, 0xC8787BC3, 0x11111141, 0x9999CBBC, 0x99999999, 0x99999999, 0x99999999, 0x00000F3B, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x00008C00, 
0x680400B0, 0xCACCCCAB, 0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 
0xCCCCCCBC, 0xCCCCCCCC, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20C00000, 0x00008C00, 0x680400B0, 0xCACCCCAB, 0xCC8C0400, 0x000084CC, 0xC8480000, 
0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 0x0080050B, 0x00000000, 0x00400A08, 
0x00000008, 0x00000000, 0x00000200, 0x00400044, 0x00000000, 0x00000000, 0xCCCC99B9, 0x99999999, 
0x999999C9, 0x99CACCCC, 0xC8CCCC0C, 0x00000040, 0x00000000, 0x00000000, 0x5A010000, 0x51CACCCC, 
0x00800716, 0x00000040, 0x00000400, 0xC0C60800, 0x0C000006, 0x02000000, 0x00000000, 0x00000000, 
0x00000000, 0xBBCC9BB9, 0xB9CBCCBC, 0x999999C9, 0xC9CCCCBC, 0xB7C9CC0C, 0x56010030, 0x75CACCCC, 
0x00000010, 0x00000000, 0x38000000, 0x00000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20C00000, 0x00008C00, 0x680400B0, 0xCACCCCAB, 0xCCCC48C2, 0x222242C8, 
0xC8480000, 0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 0x02000F3B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x00008C00, 0x680400B0, 
0xCACCCCAB, 0xCCCC8A24, 0x64A8CCCC, 0xC8480000, 0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 
0xCCCCCCCC, 0x12000528, 0x82000080, 0x07800402, 0x00000000, 0x00000000, 0x00004466, 0x002000CB, 
0x0000000A, 0x00220000, 0xAA9999B9, 0x99CACCCC, 0xAB9999C9, 0x99CACCCC, 0x50A8CB0C, 0x00000000, 
0x00000000, 0x68241101, 0xCCCCCCAC, 0x0064A8CC, 0x0000072D, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x40060000, 0x00000000, 0x00000000, 0x5596CCBC, 0x00000010, 0xC8CCCC08, 
0x00000040, 0xC8CC9C05, 0x00000040, 0x000020B7, 0x00000000, 0x00000000, 0xCC6B0200, 0x0A000917, 
0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 0x00A00000, 0x00000000, 0x00000000, 0x00000000, 
0xCCCCAAC9, 0xA9AACCCC, 0x480100C0, 0x41C8CCCC, 0xC9CCCC9A, 0x00139999, 0xCACCCCCC, 0x00113295, 
0x00100000, 0xAB663501, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 
0x00000000, 0x00000000, 0x00060000, 0xAC9AB9C9, 0xCCCCCCCC, 0x121000C0, 0xB7CABC67, 0xC9999999, 
0x00009999, 0x9AA989C8, 0x00305397, 0x00422203, 0x89672522, 0x01000701, 0x0228C64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCC9A99B9, 0xA9CCCCCC, 
0x990900C0, 0x99C9CCCC, 0xC848630A, 0x40002042, 0xCCCCCCCC, 0x9999A9CC, 0xCCCCAC99, 0xCCCCCCCC, 
0x0080080B, 0xC0000060, 0x00C00C04, 0x00000004, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 
0x00400000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x1200091E, 0x00000060, 0x00000000, 0x00000000, 0xCA60AC00, 
0x00AA0000, 0x00000000, 0x00000000, 0x00000000, 0xC99C99B9, 0x9999C9CC, 0x999999C9, 0x999CCCCC, 
0x00000000, 0x0084CC48, 0x01000000, 0xCCCC4943, 0x000051CA, 0x00000000, 0x00000F3B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x00008C00, 0x680400B0, 
0xCACCCCAB, 0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 
0xCCCCCCCC, 0x04000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20C00000, 0x00008C00, 0x680400B0, 0xCACCCCAB, 0xCCCC8A24, 0x64A8CCCC, 0xC8480000, 0x00000040, 
0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 0x12000508, 0x2C000060, 0x000040C8, 0x00000000, 
0x00000000, 0x00000200, 0x00000000, 0x00000000, 0x00220000, 0xCC8804B0, 0x003085CC, 0xABCCCC08, 
0x0030A7A8, 0x59010000, 0x8A84CC8C, 0x00000030, 0x00000000, 0xCCAA1500, 0x98C9CCCC, 0x12000726, 
0x00000080, 0x00000000, 0x40200600, 0x04AC6886, 0xCA000000, 0x00A88406, 0x00000000, 0x00000000, 
0x99A9B9C9, 0xA99CCCCC, 0x444800C0, 0x73B7CC8C, 0xC999999A, 0x00009999, 0x20A6CBCC, 0x00000000, 
0x00004102, 0x4A010000, 0x04000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00220000, 0x999999B9, 0xC9CBCCCC, 0x990900C0, 0x9999CC9C, 0xC8480000, 
0x00000040, 0x99999999, 0x99999999, 0x99B9CC9A, 0x99999999, 0x0080071F, 0x00000020, 0x00000000, 
0xC0000800, 0x8C00800A, 0x02000000, 0x00004400, 0x00000000, 0x00000000, 0x9CCA9CB9, 0xCB9CCCCC, 
0x9999B9C9, 0xBCCCCC9C, 0xCABCCA0C, 0x9C1532B7, 0xACAACC7B, 0x4685BBBA, 0x02000051, 0x15000041, 
0x00000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 
0x00008C00, 0x680400B0, 0xCACCCCAB, 0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 0xBBBBCCCC, 
0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 0x04000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20C00000, 0x00008C00, 0x680400B0, 0xCACCCCAB, 0xCCCC8A24, 0x64A8CCCC, 
0xC8480000, 0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 0x12000511, 0x42000060, 
0xC64A0900, 0x0000000C, 0x00000000, 0x000000A8, 0x00000020, 0x00000008, 0x00000000, 0x9999ABBA, 
0xCBBCCCCC, 0xBC9999C9, 0xBAC9CCCC, 0xC8B9CB0C, 0x53114542, 0x01003185, 0x45540220, 0xBBCCCC8C, 
0x876996A9, 0x0000072D, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x400A0000, 
0x00000000, 0x00000000, 0xCCB8CCBC, 0x000040C8, 0xC8CCCC08, 0x000051A9, 0xC8CCCC08, 0x00000040, 
0x620310A5, 0x00000000, 0x15000000, 0xCCACCB9A, 0x00000714, 0x00000060, 0x00000000, 0x44820400, 
0x00000000, 0x00700000, 0x00000000, 0x00000000, 0x00000000, 0x8CA6C8BC, 0xCCBACACA, 0x9C9AB7C7, 
0xAACCCCCC, 0xC8C8CC0C, 0x00000040, 0x65AACCCC, 0x83BBAC46, 0x00000000, 0x38000000, 0x08000730, 
0x60000060, 0x64520000, 0x00000000, 0x00000000, 0x00700074, 0x0C008226, 0x000000BA, 0x00400000, 
0x8C6755B9, 0xCCACCCCC, 0xCCCC7BC3, 0x7ABBCCCC, 0xC8BBCB0C, 0x00401595, 0x20211013, 0x9C380000, 
0xCACCCCCC, 0x00415499, 0x0000072D, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x400A0000, 0x00000000, 0x00000000, 0xCCCCCCBA, 0x00109586, 0xCC8CCC08, 0x00000084, 0xC8CCCC08, 
0x00000040, 0x730330B8, 0x00000000, 0x13000000, 0xCBCC5A22, 0x0A000917, 0x00000040, 0x00000000, 
0x0CC60A00, 0x000000A6, 0x00A00000, 0x00000000, 0x00000000, 0x00000000, 0x9CBC99CA, 0xC99A9ACC, 
0xBA6702C0, 0xB788CBCC, 0xC9CCCA9C, 0x13159999, 0xBACACCCC, 0x24131084, 0x00000021, 0x8C250000, 
0x00800712, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 
0x00060000, 0x999999C9, 0x999ACCBB, 0x7B33B7C7, 0x46C8C89C, 0xC9999999, 0x00009999, 0x99BA68C7, 
0x23632384, 0x26000010, 0x4546A67A, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00220000, 0x9B9999B9, 0xB9ABA9C9, 0x990900C0, 0x99B9CCBC, 
0xC8886A02, 0x00000084, 0xCCCCCCCC, 0x9999A9CC, 0xCCCCAC99, 0xCCCCCCCC, 0x01000F3B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x00008C00, 0x680400B0, 
0xCACCCCAB, 0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 
0xCCCCCCCC, 0x08000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20C00000, 0x00008C00, 0x680400B0, 0xCACCCCAB, 0xCCCC8A24, 0x64A8CCCC, 0xC8480000, 0x00000040, 
0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 0x12000529, 0x60000080, 0x00800000, 0x00000000, 
0x00000000, 0x00000060, 0x0000008C, 0x0000000A, 0x00000000, 0xBB9999B9, 0xCBCCCCCC, 0x8B5623C0, 
0x31B7CCCC, 0xA9A9CB9C, 0x40C89999, 0x30022153, 0x79360000, 0xCCCC9B89, 0x54A8B9BB, 0x00000701, 
0x00081041, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00040000, 0x0000000C, 
0xCCCC9CB9, 0x999999C9, 0xCC6A02C0, 0x999999CC, 0xAC260000, 0x6A84CCCC, 0x999999CB, 0x99999999, 
0x99999999, 0xCC999999, 0x02000506, 0xCA000060, 0x22C2AB2A, 0x00008002, 0x00000000, 0x0000668A, 
0x004600AA, 0x00000044, 0x00880000, 0xCCCCCCBA, 0x999999AA, 0x999999C9, 0xB9CCCCAC, 0xC8CCCC0C, 
0x33000044, 0x10100063, 0x01000000, 0x9B563302, 0xCBCCCCCC, 0x12000715, 0x00000060, 0x00000000, 
0x00CC0000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x653604B0, 0xCCCCCC7B, 
0xCC791400, 0x74CACCCC, 0x3063C90C, 0x11000000, 0xBACCCC8C, 0x10226476, 0x00000000, 0x03000000, 
0x00000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 
0x00008C00, 0x680400B0, 0xCACCCCAB, 0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 0xBBBBCCCC, 
0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 0x04000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20C00000, 0x00008C00, 0x680400B0, 0xCACCCCAB, 0xCC8C0400, 0x000084CC, 
0xC8480000, 0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 0x1200050F, 0x00000060, 
0xCC000000, 0x00000000, 0x00000000, 0x0000B000, 0x00000080, 0x00000000, 0x00000000, 0x030000B0, 
0xC8CCCC7B, 0xCCCC59C1, 0x1052C9CC, 0x4041C80C, 0x00000000, 0x00001020, 0x03000000, 0xB6CCCC8C, 
0x00001021, 0x12000917, 0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 0x00A00000, 0x00000000, 
0x00000000, 0x00000000, 0xBC9A99C9, 0x999AB9CC, 0x480000C0, 0x2196CCCC, 0xC9CBCC9C, 0x00139999, 
0xBACBCCCC, 0x10101075, 0x00000010, 0x8B250100, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 
0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0xC99A99C9, 0xBC99CCAB, 0x686A02C0, 
0xCCCC8CCA, 0xC9999999, 0x00009999, 0xBCBA9CC9, 0x0210A5BA, 0x00000052, 0x24841400, 0x00000702, 
0x0060C64C, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00040000, 0x00000000, 
0xCCAB9AC9, 0xA9CCCCCC, 0xB88B04C0, 0x73C8CCCC, 0xC9999999, 0x00009999, 0xCACCCCCC, 0x00004086, 
0x13000000, 0xCCCC8A47, 0x04000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20C00000, 0x00008C00, 0x680400B0, 0xCACCCCAB, 0xCCCC8A24, 0x64A8CCCC, 0xC8480000, 
0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 0x01000701, 0x0228C64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xBA9999C9, 0x999ABCCC, 
0x990900C0, 0x9999CCCC, 0xC8480000, 0x00000040, 0xCCCCCCCC, 0x9999A9CC, 0xCCCCAC99, 0xCCCCCCCC, 
0x00000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 
0x00008C00, 0x680400B0, 0xCACCCCAB, 0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 0xBBBBCCCC, 
0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20C00000, 0x00008C00, 0x680400B0, 0xCACCCCAB, 0xCC8C0400, 0x000084CC, 
0xC8480000, 0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 0x0080050B, 0x00000000, 
0x00400A08, 0x00000008, 0x00000000, 0x00000200, 0x00400044, 0x00000000, 0x00000000, 0xCCCC99B9, 
0x99999999, 0x999999C9, 0x99CACCCC, 0xC8CCCC0C, 0x00000040, 0x00000000, 0x00000000, 0x5A010000, 
0x51CACCCC, 0x00800716, 0x00000040, 0x00000400, 0xC0C60800, 0x0C000006, 0x02000000, 0x00000000, 
0x00000000, 0x00000000, 0xBBCC9BB9, 0xB9CBCCBC, 0x999999C9, 0xC9CCCCBC, 0xB7C9CC0C, 0x56010030, 
0x75CACCCC, 0x00000010, 0x00000000, 0x38000000, 0x00000F3B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x00008C00, 0x680400B0, 0xCACCCCAB, 0xCCCC48C2, 
0x222242C8, 0xC8480000, 0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 0x02000F3B, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x00008C00, 
0x680400B0, 0xCACCCCAB, 0xCCCC8A24, 0x64A8CCCC, 0xC8480000, 0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 
0xCCCCCCBC, 0xCCCCCCCC, 0x12000528, 0x82000080, 0x07800402, 0x00000000, 0x00000000, 0x00004466, 
0x002000EB, 0x0000000A, 0x00220000, 0xAA9999B9, 0x99CACCCC, 0x9B9999C9, 0x99B9CCCC, 0x50A8CB0C, 
0x00000000, 0x00000000, 0x57231101, 0xCCCCCC8A, 0x0064A8CC, 0x0A000917, 0x00000040, 0x00000000, 
0x0CC60A00, 0x000000A6, 0x00A00000, 0x00000000, 0x00000000, 0x00000000, 0xCCCCAAC9, 0x999AC9CC, 
0x480100C0, 0x41A7CCCC, 0xC9CCCC9A, 0x00139999, 0xCCCCCCCC, 0x8888A8CC, 0x88888888, 0x8B888888, 
0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 
0x00060000, 0xAC9AB9C9, 0xCCCCCCCC, 0x121000C0, 0xB7CABC67, 0xC9999999, 0x00009999, 0x9AA989C8, 
0x00305397, 0x00422203, 0x89672522, 0x00000702, 0x0060C64C, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00040000, 0x00000000, 0xCCAB9AC9, 0xA9CCCCCC, 0xB88B04C0, 0x73C8CCCC, 
0xC9999999, 0x00009999, 0xCACCCCCC, 0x00004086, 0x13000000, 0xCCCC8A47, 0x02000F3B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x00008C00, 0x680400B0, 
0xCACCCCAB, 0xCCCC8A24, 0x64A8CCCC, 0xC8480000, 0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 
0xCCCCCCCC, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00220000, 0xBA9999C9, 0x999ABCCC, 0x990900C0, 0x9999CCCC, 0xC8480000, 0x00000040, 
0xCCCCCCCC, 0x9999A9CC, 0xCCCCAC99, 0xCCCCCCCC, 0x07000716, 0x00000040, 0x00000000, 0xC0C60A00, 
0x0C000006, 0xA6000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCC9CB9, 0xCCCCCCCC, 0x999999C9, 
0xC9CCCCBC, 0xC8CCCC0C, 0x57016666, 0xCACCCCCC, 0x10202186, 0x00000000, 0x39000000, 0x00000F3B, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x00008C00, 
0x680400B0, 0xCACCCCAB, 0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 
0xCCCCCCBC, 0xCCCCCCCC, 0x04000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20C00000, 0x00008C00, 0x680400B0, 0xCACCCCAB, 0xCC8C0400, 0x64A8CCCC, 0xC8480000, 
0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 0x1200050E, 0x00000060, 0xC6480A00, 
0x0000004C, 0x00000000, 0x000000A9, 0x00000000, 0x00000000, 0x00000000, 0x040000B0, 0xC8CCCCAC, 
0xCCAC68C4, 0x0073CBCC, 0x1095CC0C, 0x00000000, 0x00000000, 0x26010000, 0xCACCCCAC, 0x00000084, 
0x0000072D, 0x82000060, 0x40840000, 0x00002A80, 0x00000006, 0x02000600, 0x80AC8628, 0x00000000, 
0x00040000, 0xCACCCCB8, 0x000020A6, 0x40C8CC08, 0x00000000, 0xC8CCCC08, 0x00000040, 0x00000051, 
0x00000000, 0x55020000, 0xCACCCC79, 0x10000917, 0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 
0x00680000, 0x00000000, 0x00000000, 0x00000000, 0xBC9A99B9, 0x99ABCCCC, 0x480000C0, 0x3197CCCC, 
0xCACCCC9A, 0x00029999, 0xCCCCCCCC, 0x2364A8CC, 0x01100023, 0x8B763414, 0x00800812, 0x82000040, 
0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0x9A9999C9, 
0xCA9ACC9B, 0x040000C0, 0xC9CCCC88, 0xC9999999, 0x00009999, 0xBB88ABC9, 0x636543B7, 0x00002035, 
0x7A020000, 0x00000702, 0x0060C64C, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00040000, 0x00000000, 0xCCAB9AC9, 0xA9CCCCCC, 0xB88B04C0, 0x73C8CCCC, 0xC9999999, 0x00009999, 
0xCACCCCCC, 0x00004086, 0x13000000, 0xCCCC8A47, 0x04000F3B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x00008C00, 0x680400B0, 0xCACCCCAB, 0xCCCC8A24, 
0x64A8CCCC, 0xC8480000, 0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 0x01000701, 
0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 
0xBA9999C9, 0x999ACCCC, 0x990900C0, 0x9999CCCC, 0xC8480000, 0x00000040, 0xCCCCCCCC, 0x9999A9CC, 
0xCCCCAC99, 0xCCCCCCCC, 0x0024080E, 0x0B0B0B0B, 0x0909090B, 0x0B090908, 0x0000080B, 0x00000000, 
0x00000000, 0x00020200, 0x00000000, 0x40404040, 0x40424240, 0x40444440, 0x00004040, 0xBDBDBDBD, 
0xBDBDBDBD, 0xBDBDBDBD, 0x0000BDBD, 0xAEAEAEAE, 0xAECECEAE, 0xAEAEAEAE, 0x0000AEAE, 0x04000134, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00202002, 0x60C00002, 0x00009B00, 
0x00202292, 0xC9CCAC16, 0xCCCC4800, 0x000040C8, 0xC6060000, 0x00000031, 0xCCCCCCCC, 0xCCCCCCCC, 
0xCCCCCCCC, 0xCCCCCCCC, 0x10000636, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xC0020000, 0x00004600, 0xCBCCBCB9, 0x77777798, 0xCCC88CC8, 0x888888C8, 0xC6060000, 
0x00000031, 0x2186CBCC, 0x59011033, 0x1021A6CC, 0xCC8A3612, 0x12000F0B, 0xC0000060, 0x00C00C07, 
0x00000007, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00400000, 0xBBBBBBCB, 0xBBCCCCBC, 
0x795644C3, 0x99B9CC9A, 0xCCAC0400, 0x000085CB, 0x54556566, 0x56454444, 0xCCBC8A77, 0xA8A8AAB8, 
0x12000918, 0x00000020, 0x00000000, 0x09000400, 0x000920C4, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x8AA7AB47, 0x2253C8CC, 0xCC8C77C7, 0x777787AC, 0xC7060000, 0x00000031, 0xCCAC8B77, 
0x7777B8CC, 0x77777777, 0x77777777, 0x00800912, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 
0x00004400, 0x00000000, 0x00000000, 0x00060000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xCCCCCCCC, 0xCCCCCCCC, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x12000704, 0x00C43B60, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x99999999, 
0x99BACAAC, 0xCC8C88C8, 0x8888888C, 0xCBBBBBBB, 0xBBBBBBBB, 0x8988A889, 0x888888A8, 0xCCACAB9B, 
0x8888B8CA, 0x00000636, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xA0000000, 0x00000000, 0xBCBBBB9A, 0x777777A9, 0xCCBBBBCB, 0xBBBBBBCB, 0xC6060000, 0x00000031, 
0x2186CBCC, 0x59011033, 0x1021A6CC, 0xCC8A3612, 0x12000F0B, 0xC6000060, 0x00C00C07, 0x00000007, 
0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00400000, 0x88888888, 0x8888A8BC, 0x8C7777C7, 
0x7777CACC, 0xCCBBBBBB, 0xCBBBBBBB, 0x77777787, 0x77777777, 0xAA787777, 0x9AB9CCCC, 0x12000918, 
0x00000020, 0x00000000, 0x09000400, 0x000920C4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xCCCCBCC9, 0x999999CC, 0x8C7777C7, 0x77C8CCCC, 0xCBBBBBBB, 0xBBBBBBBB, 0xB9BBABBB, 0x878A879A, 
0x77777777, 0x77777777, 0x00800912, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 
0x00000000, 0x00000000, 0x00060000, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xCCCCCCCC, 
0xCCCCCCCC, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x03000701, 0x0228C64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCCCCACC9, 0x9999BACB, 
0x8C7777C7, 0x7787CCCC, 0xCBBBBBBB, 0xBBBBBBBB, 0x77777787, 0x77777777, 0x8C777777, 0x9AB9BACC, 
0x10000636, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0020000, 
0x00004600, 0xCBCCBCB9, 0x77777798, 0xCCC88CC8, 0x888888C8, 0xC6060000, 0x00000031, 0x2186CBCC, 
0x59011033, 0x1021A6CC, 0xCC8A3612, 0x12000F0B, 0xC0000060, 0x00C00C07, 0x00000007, 0x00000000, 
0x00000000, 0x00000002, 0x00000000, 0x00400000, 0xBBBBBBCB, 0xBBCCCCBC, 0x795644C3, 0x99B9CC9A, 
0xCCAC0400, 0x000085CB, 0x54556566, 0x56454444, 0xCCBC8A77, 0xA8A8AAB8, 0x12000918, 0x00000020, 
0x00000000, 0x09000400, 0x000920C4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x8AA7AB47, 
0x2253C8CC, 0xCC8C77C7, 0x777787AC, 0xC7060000, 0x00000031, 0xCCAC8B77, 0x7777B8CC, 0x77777777, 
0x77777777, 0x00800912, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 
0x00000000, 0x00060000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x12000704, 0x00C43B60, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x99999999, 0x99BACAAC, 0xCC8C88C8, 
0x8888888C, 0xCBBBBBBB, 0xBBBBBBBB, 0x8988A889, 0x888888A8, 0xCCACAB9B, 0x8888B8CA, 0x04000134, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00202002, 0x60C00002, 0x00009B00, 
0x00202292, 0xC9CCAC16, 0xCCCC4800, 0x000040C8, 0xC6060000, 0x00000031, 0xCCCCCCCC, 0xCCCCCCCC, 
0xCCCCCCCC, 0xCCCCCCCC, 0x00000636, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xA0000000, 0x00000000, 0xBCBBBB9A, 0x777777A9, 0xCCBBBBCB, 0xBBBBBBCB, 0xC6060000, 
0x00000031, 0x2186CBCC, 0x59011033, 0x1021A6CC, 0xCC8A3612, 0x12000F0B, 0xC6000060, 0x00C00C07, 
0x00000007, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00400000, 0x88888888, 0x8888A8BC, 
0x8C7777C7, 0x7777CACC, 0xCCBBBBBB, 0xCBBBBBBB, 0x77777787, 0x77777777, 0xAA787777, 0x9AB9CCCC, 
0x12000918, 0x00000020, 0x00000000, 0x09000400, 0x000920C4, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xCCCCBCC9, 0x999999CC, 0x8C7777C7, 0x77C8CCCC, 0xCBBBBBBB, 0xBBBBBBBB, 0xB9BBABBB, 
0x878A879A, 0x77777777, 0x77777777, 0x00800912, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 
0x00004400, 0x00000000, 0x00000000, 0x00060000, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 
0xCCCCCCCC, 0xCCCCCCCC, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x03000701, 0x0228C64C, 
0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCCCCACC9, 
0x9999BACB, 0x8C7777C7, 0x7787CCCC, 0xCBBBBBBB, 0xBBBBBBBB, 0x77777787, 0x77777777, 0x8C777777, 
0x9AB9BACC, 0x0080010B, 0xC0000060, 0x00C00C06, 0x00000007, 0x00000000, 0x00000000, 0x00000002, 
0x00000000, 0x00400000, 0xBBBCBBCB, 0xCCBBBBBC, 0x898888C8, 0xC999CBB9, 0xCC9C7777, 0x77777798, 
0x77777777, 0x77777777, 0xCCAC8B77, 0x7777A7B9, 0x1200091F, 0x00000020, 0x00000000, 0x90000800, 
0x6C10210B, 0x04000000, 0x00107700, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xBBCBCCBC, 0x9C1500C0, 
0x99C999CB, 0xCCBC8B06, 0x0000A0AA, 0xCCBC5725, 0x000041C9, 0x00000000, 0x00000000, 0x04000134, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00202002, 0x60C00002, 0x00009B00, 
0x00202292, 0xC9CCAC16, 0xCCCC4800, 0x000040C8, 0xC6060000, 0x00000031, 0xCCCCCCCC, 0xCCCCCCCC, 
0xCCCCCCCC, 0xCCCCCCCC, 0x12000106, 0xCA000060, 0x22C2A62A, 0x00008002, 0x00000000, 0x00006686, 
0x004600AA, 0x00000044, 0x00880000, 0x8A8A5623, 0x2286BBCC, 0x48000000, 0x1084CACC, 0xCCAB4709, 
0x0000A7CC, 0x00002101, 0x00000000, 0x7A262123, 0x51CACCCC, 0x12000918, 0x00000020, 0x00000000, 
0x0A600A00, 0x002882CA, 0x02440000, 0x00202200, 0x00000002, 0x00000000, 0xCCCCAC99, 0x99999999, 
0xCCCC5901, 0x007385CC, 0xC6BCCA0C, 0x00005A31, 0xACA87A25, 0xCBCCCCCC, 0x00000062, 0x00205536, 
0x00000704, 0x00C42A60, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xCCCCBC99, 0x999999B9, 0xCCAC36C3, 0x333384CC, 0xC8585555, 0x55555565, 0x56333353, 
0x34336477, 0x9B888776, 0x8787CCCC, 0x0080071F, 0x00000020, 0x0000080A, 0xC0800802, 0x8C00800A, 
0x02000000, 0x00004400, 0x00000000, 0x00000000, 0xCCCCCC9C, 0x999999A9, 0xCCCB8CC6, 0x6676CBCC, 
0xCCCCCC7C, 0x7777CCCC, 0xCACCCCAB, 0x55555565, 0x5555A768, 0x6655A789, 0x0000052D, 0x82000060, 
0x40840000, 0x00002A80, 0x00000006, 0x02000600, 0x80A88628, 0x00000000, 0x00040000, 0xCCCCCCC8, 
0xC88ACCCC, 0xC8CCCCC8, 0x86C8C8CC, 0xCACCCC9C, 0x99999999, 0x8787CCCC, 0x77777777, 0xA98A9979, 
0xCC78A788, 0x00000635, 0x02000020, 0x00000020, 0x00220000, 0x00000000, 0x00000000, 0x00000000, 
0x000C0000, 0x00440000, 0xCCBBBCCB, 0xBCBBBBCC, 0xCCCAAACA, 0xAAAACACA, 0xCBBBBBBB, 0xBBBBBBBB, 
0xBBCBBCCB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBCBBBBBB, 0x0600060A, 0xAC000060, 0x00A0C066, 0xAA60A000, 
0x0A000080, 0x000000AA, 0x00020000, 0x00000000, 0x002A0000, 0xBA9999C9, 0xCCBBCBCC, 0x6A1211C1, 
0xC9CCCCC8, 0xC748B626, 0x2222AB89, 0x7799BBCC, 0x00000030, 0x9B240100, 0xCCCCCBCC, 0x02000701, 
0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 
0xCCCBACC9, 0x9BA9CCCC, 0x6A020000, 0x84A8CCCC, 0xC6060000, 0x00000031, 0xA7CBCCCC, 0x78555467, 
0x8A669899, 0xAC988698, 0x04000134, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00202002, 0x60C00002, 0x00009B00, 0x00202292, 0xC9CCAC16, 0xCCCC4800, 0x000040C8, 0xC6060000, 
0x00000031, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x00000636, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xA0000000, 0x00000000, 0xCBCCBCB9, 0x77777798, 
0xBBBBBBCB, 0xBBBBBBBB, 0xC6060000, 0x00000031, 0x2186CBCC, 0x59011033, 0x1021A6CC, 0xCC8A3612, 
0x12000F0B, 0xC0000060, 0x00C00C07, 0x00000007, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 
0x00400000, 0xBBBBBBCB, 0xBBCCCCBC, 0x69C868C6, 0x999999CB, 0xCCAC0400, 0x000085CB, 0x88888888, 
0x88888888, 0xCCAC9B88, 0x88A8CACC, 0x12000918, 0x00000020, 0x00000000, 0x09000400, 0x000920C4, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x8AA7AB47, 0x2253C8CC, 0xCC7A7BC4, 0x222252C8, 
0xC7060000, 0x00000031, 0xCC7B5487, 0x444464BB, 0x44444444, 0x44444444, 0x00800912, 0x82000040, 
0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0xBCBBBBCB, 
0xBBBBBBCC, 0xBBBBBBCB, 0xBBCBBCBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0x06000704, 0x00C43B60, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x888888C8, 0x8888CCCC, 0xCC8C77C7, 0x77777787, 0xCBBBBBBB, 0xBBBBBBBB, 
0xBA8988A8, 0x888888B8, 0xAC9B8888, 0x88C9CCCC, 0x10000636, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xC0020000, 0x00004600, 0xC9CCCCC9, 0x44444464, 0xCC8C35C3, 
0x333353C8, 0xC6060000, 0x00000031, 0x2175CBCC, 0x59111133, 0x1121A5CC, 0xCC8A3612, 0x12000F0B, 
0xC4000060, 0x00C00C07, 0x00000007, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00400000, 
0x483333C3, 0xC868CACC, 0x78BB47C2, 0x2252C8CC, 0xCCBCAAAA, 0xAAAACABB, 0x44444484, 0x44444444, 
0xAA484444, 0x74CACCBB, 0x12000918, 0x00000020, 0x00000000, 0x09000400, 0x000920C4, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xCCBC9CC9, 0x9999B9CC, 0x7B7B24C2, 0x2285CCCC, 0xCBABAAAA, 
0xAAAAAAAA, 0xCACCCCB8, 0x64694464, 0x44444457, 0x44444444, 0x00800912, 0x82000040, 0x00888000, 
0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0xBBBBBBCB, 0xBBBBBBBB, 
0xBBBBBBCB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0x03000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00220000, 0xCCCCACC9, 0x9999BACB, 0x583222C2, 0x52C8CCCC, 0xCBABAAAA, 0xAAAAAAAA, 0x44444484, 
0x44444444, 0xBB7B4444, 0x88CBCCCC, 0x00000636, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xA0000000, 0x00000000, 0xCBCCBCB9, 0x77777798, 0xBBBBBBCB, 0xBBBBBBBB, 
0xC6060000, 0x00000031, 0x2186CBCC, 0x59011033, 0x1021A6CC, 0xCC8A3612, 0x12000F0B, 0xC0000060, 
0x00C00C07, 0x00000007, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00400000, 0xBBBBBBCB, 
0xBBCCCCBC, 0x69C868C6, 0x999999CB, 0xCCAC0400, 0x000085CB, 0x88888888, 0x88888888, 0xCCAC9B88, 
0x88A8CACC, 0x12000918, 0x00000020, 0x00000000, 0x09000400, 0x000920C4, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x8AA7AB47, 0x2253C8CC, 0xCC7A7BC4, 0x222252C8, 0xC7060000, 0x00000031, 
0xCC7B5487, 0x444464BB, 0x44444444, 0x44444444, 0x00800912, 0x82000040, 0x00888000, 0x0000C0A0, 
0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0xBCBBBBCB, 0xBBBBBBCC, 0xBBBBBBCB, 
0xBBCBBCBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x06000704, 
0x00C43B60, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x888888C8, 0x8888CCCC, 0xCC8C77C7, 0x77777787, 0xCBBBBBBB, 0xBBBBBBBB, 0xBA8988A8, 0x888888B8, 
0xAC9B8888, 0x88C9CCCC, 0x04000134, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00202002, 0x60C00002, 0x00009B00, 0x00202292, 0xC9CCAC16, 0xCCCC4800, 0x000040C8, 0xC6060000, 
0x00000031, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x10000636, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0020000, 0x00004600, 0xC9CCCCC9, 0x44444464, 
0xCC8C35C3, 0x333353C8, 0xC6060000, 0x00000031, 0x2175CBCC, 0x59111133, 0x1121A5CC, 0xCC8A3612, 
0x12000F0B, 0xC4000060, 0x00C00C07, 0x00000007, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 
0x00400000, 0x483333C3, 0xC868CACC, 0x78BB47C2, 0x2252C8CC, 0xCCBCAAAA, 0xAAAACABB, 0x44444484, 
0x44444444, 0xAA484444, 0x74CACCBB, 0x12000918, 0x00000020, 0x00000000, 0x09000400, 0x000920C4, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCBC9CC9, 0x9999B9CC, 0x7B7B24C2, 0x2285CCCC, 
0xCBABAAAA, 0xAAAAAAAA, 0xCACCCCB8, 0x64694464, 0x44444457, 0x44444444, 0x00800912, 0x82000040, 
0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0xBBBBBBCB, 
0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0x03000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00220000, 0xCCCCACC9, 0x9999BACB, 0x583222C2, 0x52C8CCCC, 0xCBABAAAA, 0xAAAAAAAA, 
0x44444484, 0x44444444, 0xBB7B4444, 0x88CBCCCC, 0x0080031F, 0x00000020, 0x00000400, 0xC0800800, 
0x8C00800A, 0x02000000, 0x00004400, 0x00000000, 0x00000000, 0xCCCCBCCB, 0xCCCCCBBB, 0x493700C0, 
0x99999999, 0xCBCCCC0C, 0x93004573, 0xCC9C6822, 0x86CBCCCC, 0x9A470242, 0x0052A8BB, 0x00000319, 
0x00000000, 0x00000000, 0x00760700, 0x00607707, 0x00000000, 0x00305400, 0x00000003, 0x00000000, 
0xCCCCBCCB, 0xCCCCCCCC, 0xCCCC7AA4, 0x999999A9, 0xCBCCCC0C, 0x00004573, 0xCC9C6832, 0x86CBCCCC, 
0x37010042, 0x00001063, 0x04000134, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00202002, 0x60C00002, 0x00009B00, 0x00202292, 0xC9CCAC16, 0xCCCC4800, 0x000040C8, 0xC6060000, 
0x00000031, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x0C000121, 0x86000080, 0xCC86A840, 
0x0000800C, 0x00000000, 0x000000CC, 0x0406008A, 0x00000088, 0x00800000, 0xBBBBBBCB, 0xCBCCCCBB, 
0x89C9BCC8, 0x99CACC99, 0x52CBCC0C, 0x43000010, 0x43010000, 0x8A151230, 0x85CCCCCC, 0x00002132, 
0x0C000915, 0x00000060, 0x00000000, 0x44CC0400, 0x00002002, 0x00000000, 0x00002000, 0x00000000, 
0x00000000, 0xCCAC5703, 0x002284CC, 0xCC9B2500, 0x000073CB, 0x94CCCC0B, 0x00000021, 0x96CBCCAC, 
0x00000042, 0x00000000, 0x14000000, 0x0A000F06, 0xCA000060, 0x22C2A62A, 0x00008002, 0x00000000, 
0x00006686, 0x004600AA, 0x00000044, 0x00880000, 0x7B240000, 0x0074CACC, 0x48000000, 0x62C8CCCC, 
0xB5CBCC0B, 0x00000021, 0x00000000, 0x00000000, 0xCCAB2600, 0x001084CC, 0x12000917, 0x00000040, 
0x00000000, 0x0CC60B00, 0x000000C6, 0x00A00000, 0x00000000, 0x00000000, 0x00000000, 0xCCCC9AC9, 
0x99BACBCC, 0x480000C0, 0x40C8CCCC, 0xC9CCCC0A, 0x00004375, 0xC9CCCCCC, 0x00002165, 0x00001000, 
0xAB580300, 0x00800712, 0x82000040, 0x00889000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 
0x00000000, 0x00060000, 0xA9CCCCCC, 0xC9ABCBCC, 0x000000C0, 0x62CA9B36, 0xC7373333, 0x33333354, 
0xCBCCCCCC, 0x106355B8, 0x00000000, 0xACAA3701, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00040000, 0xCC9C99C9, 0x99A9BACB, 0x260000C0, 
0x3184CCAC, 0xCCCCABAA, 0xAAAACACC, 0xBACBCCCC, 0x44447698, 0x48230121, 0xCCCCCCBB, 0x0080031F, 
0x00000020, 0x00000400, 0xC0800800, 0x8C00800A, 0x02000000, 0x00004400, 0x00000000, 0x00000000, 
0xCCCCBCCB, 0xCCCCCBBB, 0x493700C0, 0x99999999, 0xCBCCCC0C, 0x93004573, 0xCC9C6822, 0x86CBCCCC, 
0x9A470242, 0x0052A8BB, 0x00000319, 0x00000000, 0x00000000, 0x00760700, 0x00607707, 0x00000000, 
0x00305400, 0x00000003, 0x00000000, 0xCCCCBCCB, 0xCCCCCCCC, 0xCCCC7AA4, 0x999999A9, 0xCBCCCC0C, 
0x00004573, 0xCC9C6832, 0x86CBCCCC, 0x37010042, 0x00001063, 0x0C000121, 0x86000080, 0xCC86A840, 
0x0000800C, 0x00000000, 0x000000CC, 0x0406008A, 0x00000088, 0x00800000, 0xBBBBBBCB, 0xCBCCCCBB, 
0x89C9BCC8, 0x99CACC99, 0x52CBCC0C, 0x43000010, 0x43010000, 0x8A151230, 0x85CCCCCC, 0x00002132, 
0x0C000915, 0x00000060, 0x00000000, 0x44CC0400, 0x00002002, 0x00000000, 0x00002000, 0x00000000, 
0x00000000, 0xCCAC5703, 0x002284CC, 0xCC9B2500, 0x000073CB, 0x94CCCC0B, 0x00000021, 0x96CBCCAC, 
0x00000042, 0x00000000, 0x14000000, 0x04000134, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00202002, 0x60C00002, 0x00009B00, 0x00202292, 0xC9CCAC16, 0xCCCC4800, 0x000040C8, 
0xC6060000, 0x00000031, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x0A000F06, 0xCA000060, 
0x22C2A62A, 0x00008002, 0x00000000, 0x00006686, 0x004600AA, 0x00000044, 0x00880000, 0x7B240000, 
0x0074CACC, 0x48000000, 0x62C8CCCC, 0xB5CBCC0B, 0x00000021, 0x00000000, 0x00000000, 0xCCAB2600, 
0x001084CC, 0x12000917, 0x00000040, 0x00000000, 0x0CC60B00, 0x000000C6, 0x00A00000, 0x00000000, 
0x00000000, 0x00000000, 0xCCCC9AC9, 0x99BACBCC, 0x480000C0, 0x40C8CCCC, 0xC9CCCC0A, 0x00004375, 
0xC9CCCCCC, 0x00002165, 0x00001000, 0xAB580300, 0x00800712, 0x82000040, 0x00889000, 0x0000C0A0, 
0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0xA9CCCCCC, 0xC9ABCBCC, 0x000000C0, 
0x62CA9B36, 0xC7373333, 0x33333354, 0xCBCCCCCC, 0x106355B8, 0x00000000, 0xACAA3701, 0x01000701, 
0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00040000, 
0xCC9C99C9, 0x99A9BACB, 0x260000C0, 0x3184CCAC, 0xCCCCABAA, 0xAAAACACC, 0xBACBCCCC, 0x44447698, 
0x48230121, 0xCCCCCCBB, 0x0080010B, 0xC0000060, 0x00C00C07, 0x00000007, 0x00000000, 0x00003003, 
0x00000002, 0x00000000, 0x00400000, 0xBBBBBBCB, 0xCBCCCCCC, 0x6A2400C0, 0x99A9CCCC, 0xCC8C4703, 
0x00002094, 0x00000000, 0x00000000, 0xCC5A0100, 0x000083CC, 0x1200091F, 0x00000020, 0x00000000, 
0xC0030800, 0x8C30820B, 0x04000000, 0x00006700, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xBBCCCCBC, 
0xCC4800C0, 0x9999C9CC, 0xCCAC8806, 0x000062CA, 0xCCCC9A58, 0x012185CA, 0x00001011, 0x02000000, 
0x04000134, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00202002, 0x60C00002, 
0x00009B00, 0x00202292, 0xC9CCAC16, 0xCCCC4800, 0x000040C8, 0xC6060000, 0x00000031, 0xCCCCCCCC, 
0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x0F000536, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xC0020000, 0x00008600, 0xCBCCBC77, 0x00001074, 0xCCCC6A02, 0x000052C9, 
0xC6060000, 0x00000031, 0x2175CBCC, 0x49131033, 0x1021A5CC, 0xCC8A3612, 0x00000536, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xA0000000, 0x00000000, 0xA9CBBC78, 
0x00001063, 0xCCCC6A02, 0x000062CA, 0xC6060000, 0x00000031, 0x2186CBCC, 0x59141033, 0x1021A5CC, 
0xCC8A3612, 0x12000106, 0xCC000060, 0x22C2A64A, 0x00008002, 0x00000000, 0x00006686, 0x004600AA, 
0x00000044, 0x00880000, 0x37000000, 0x0074C9CC, 0x48620200, 0x0040C8CC, 0xCCAC4702, 0x8600A4CC, 
0x00001012, 0x00000000, 0x9C450100, 0x74CACCCC, 0x12000918, 0x00000020, 0x00000000, 0x0A600A00, 
0x004882CA, 0x02440000, 0x00202200, 0x00000002, 0x00000000, 0xCCCCBCC9, 0x9999B9CC, 0x9B1500C0, 
0x1084CBCC, 0xC9ABC969, 0x66666676, 0xCCCCCCBA, 0x667798BA, 0x00001053, 0x78560200, 0x00000910, 
0x82000040, 0xA0888000, 0x0000C0C0, 0x00000000, 0x00004400, 0x00200000, 0x00000000, 0x00060000, 
0xCCCCCCCC, 0xAAAACCCC, 0x999999C9, 0xCCCCCC99, 0xCCCCCCCC, 0xCCCCCCCC, 0xCAAACCAA, 0xAAAAAAAA, 
0xAAAAAAAA, 0xAAAAAAAA, 0x03000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00220000, 0xCCCCACC9, 0x9999BACB, 0x590100C0, 0x0084CCCC, 0xC6060000, 
0x00000031, 0x43667666, 0x77673433, 0xBC896776, 0xAACACCCC, 0x04000134, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00202002, 0x60C00002, 0x00009B00, 0x00202292, 0xC9CCAC16, 
0xCCCC4800, 0x000040C8, 0xC6060000, 0x00000031, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 
0x0F000536, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0020000, 
0x00006000, 0xCCCCBBCB, 0x558589A7, 0xCCCCA9C6, 0x222273CB, 0xC6060000, 0x00000031, 0x3374CBCC, 
0x49333333, 0x3333A6CC, 0xCC8A3633, 0x0600010B, 0xC0000060, 0x00C00C07, 0x00000007, 0x00000000, 
0x00000000, 0x00000002, 0x00000000, 0x00400000, 0xBBBBBBCB, 0xCBBCCCBB, 0x292222C2, 0x99A9BB9A, 
0xCCBCCA69, 0x66669C97, 0x33333333, 0x33333333, 0xCC7B3333, 0x333363CB, 0x1200091F, 0x00000020, 
0x00000000, 0xC0870B00, 0x8C70B80C, 0x04000000, 0x00006700, 0x00000000, 0x00000000, 0x999999C9, 
0xCACCCC9C, 0xCC4822C2, 0x2252CACC, 0xCCCC9C66, 0x000086CA, 0xCCBC8A6A, 0x222295CC, 0x22222222, 
0x47222222, 0x12000106, 0xCC000060, 0x22C2A64A, 0x00008002, 0x00000000, 0x00006686, 0x004600AA, 
0x00000044, 0x00880000, 0xAB9C67C4, 0x1175CACC, 0x8C2422C2, 0x2284CACC, 0xCCAC4702, 0x8600A4CC, 
0x11111113, 0x11111111, 0x8A341111, 0x94CCCCCC, 0x12000918, 0x00000020, 0x00000000, 0x0A600A00, 
0x004882CA, 0x02440000, 0x00202200, 0x00000002, 0x00000000, 0xCCCC9CCA, 0x99A9B9CC, 0x7B2322C2, 
0x52C9CCCC, 0xC9CCCC6C, 0x66666676, 0xCCCCCCCC, 0x768798BA, 0x11111153, 0x6A764623, 0x00000910, 
0x82000040, 0xA0888000, 0x0000C0C0, 0x00000000, 0x00004400, 0x00200000, 0x00000000, 0x00060000, 
0xCCCCCCCC, 0xAAAACCCC, 0x999999C9, 0xCCCCCC99, 0xCCCCCCCC, 0xCCCCCCCC, 0xCAAACCAA, 0xAAAAAAAA, 
0xAAAAAAAA, 0xAAAAAAAA, 0x03000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00220000, 0xCCCC9BC9, 0x9999B9CB, 0x482222C2, 0x32B7CCCC, 0xC9696666, 
0x66666676, 0x32656686, 0x88A83622, 0xBC494265, 0x99CACCCC, 0x0080050B, 0xC2000060, 0x20C20C2A, 
0x00000008, 0x00000000, 0x00002044, 0x00460068, 0x00000064, 0x00A00000, 0xBBBBBBCB, 0xCBCCCCCC, 
0x6A2400C0, 0x99A9CCCC, 0xCC8C4703, 0x00002094, 0x00000000, 0x00000000, 0xCC5A0100, 0x000083CC, 
0x1200091F, 0x00000020, 0x00000000, 0x90000A00, 0x6C20820B, 0x06000000, 0x00007700, 0x00000000, 
0x00000000, 0xBBBBBBCB, 0xBBCCCCBB, 0xCC5844C4, 0x9999A9CC, 0xCCAC7866, 0x666696CC, 0xCCBC3751, 
0x4179A8A9, 0x11111111, 0x41471211, 0x04000134, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00202002, 0x60C00002, 0x00009B00, 0x00202292, 0xC9CCAC16, 0xCCCC4800, 0x000040C8, 
0xC6060000, 0x00000031, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x12000106, 0xCA000060, 
0x02B20070, 0x00000000, 0x00000000, 0x00000660, 0x00400088, 0x00000004, 0x00000000, 0x787777C7, 
0x7A77C8CC, 0x8C7744C4, 0x4454C8CC, 0xCCCC7977, 0x7777C79A, 0x11111151, 0x11111111, 0x6A221211, 
0x52BACBCC, 0x1200091A, 0x00000020, 0x00000000, 0x04030600, 0x0094C48A, 0x02400000, 0x00208900, 
0x00000002, 0x00000000, 0xCACCACC9, 0x9C9AA999, 0xC9CCCBC8, 0x44A747A7, 0xC9CCCC79, 0x77777787, 
0xAA99A898, 0x62CACCBC, 0x11111111, 0x12111111, 0x02000506, 0xA7000040, 0x70888080, 0x00007090, 
0x00000000, 0x00000600, 0x00A000AA, 0x00000000, 0x00060000, 0xCCCCCCCB, 0xBBCC99CB, 0xCCCCCAC8, 
0x5984A68C, 0xCACCAB8C, 0x88888898, 0x000051CA, 0x14000000, 0x5A53BA99, 0xBCCCAA76, 0x02000635, 
0x02000020, 0x00000020, 0x00820000, 0x00000000, 0x00000000, 0x00000000, 0x800C0000, 0x00442000, 
0xCACACCCC, 0xAAACCCCC, 0x88C888C8, 0xCCCCCCBC, 0xCBABAAAA, 0xAAAAAAAA, 0x9B99C9CC, 0x99999999, 
0x99999999, 0x9C999999, 0x00800646, 0x80000040, 0x0080C200, 0x0C009000, 0x00000094, 0x00000000, 
0x00000000, 0x00000000, 0x00600000, 0x9C9999C9, 0xCCCCCC9C, 0x77B777C7, 0xA7CCCC78, 0xCBBBBBBB, 
0xBBBBBBBB, 0x9B99CCCC, 0x9999B999, 0x99999999, 0xCBCC9999, 0x02000701, 0x0228C64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xBC999AC9, 0xCCCCBCCC, 
0x8B5555C5, 0xCABCCC9C, 0xC9CC7977, 0x77777787, 0x69B7CCBC, 0x5A010041, 0xAA2552BA, 0x99140051, 
0x0080050B, 0xC2000060, 0x20C20C2A, 0x00000008, 0x00000000, 0x00002044, 0x00460068, 0x00000064, 
0x00A00000, 0xBBBBBBCB, 0xCBCCCCCC, 0x6A2400C0, 0x99A9CCCC, 0xCC8C4703, 0x00002094, 0x00000000, 
0x00000000, 0xCC5A0100, 0x000083CC, 0x1200091F, 0x00000020, 0x00000000, 0x90000A00, 0x6C20820B, 
0x06000000, 0x00007700, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xBBCCCCBB, 0xCC5844C4, 0x9999A9CC, 
0xCCAC7866, 0x666696CC, 0xCCBC3751, 0x4179A8A9, 0x11111111, 0x41471211, 0x12000106, 0xCA000060, 
0x02B20070, 0x00000000, 0x00000000, 0x00000660, 0x00400088, 0x00000004, 0x00000000, 0x787777C7, 
0x7A77C8CC, 0x8C7744C4, 0x4454C8CC, 0xCCCC7977, 0x7777C79A, 0x11111151, 0x11111111, 0x6A221211, 
0x52BACBCC, 0x1200091A, 0x00000020, 0x00000000, 0x04030600, 0x0094C48A, 0x02400000, 0x00208900, 
0x00000002, 0x00000000, 0xCACCACC9, 0x9C9AA999, 0xC9CCCBC8, 0x44A747A7, 0xC9CCCC79, 0x77777787, 
0xAA99A898, 0x62CACCBC, 0x11111111, 0x12111111, 0x04000134, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00202002, 0x60C00002, 0x00009B00, 0x00202292, 0xC9CCAC16, 0xCCCC4800, 
0x000040C8, 0xC6060000, 0x00000031, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x02000506, 
0xA7000040, 0x70888080, 0x00007090, 0x00000000, 0x00000600, 0x00A000AA, 0x00000000, 0x00060000, 
0xCCCCCCCB, 0xBBCC99CB, 0xCCCCCAC8, 0x5984A68C, 0xCACCAB8C, 0x88888898, 0x000051CA, 0x14000000, 
0x5A53BA99, 0xBCCCAA76, 0x02000635, 0x02000020, 0x00000020, 0x00820000, 0x00000000, 0x00000000, 
0x00000000, 0x800C0000, 0x00442000, 0xCACACCCC, 0xAAACCCCC, 0x88C888C8, 0xCCCCCCBC, 0xCBABAAAA, 
0xAAAAAAAA, 0x9B99C9CC, 0x99999999, 0x99999999, 0x9C999999, 0x00800646, 0x80000040, 0x0080C200, 
0x0C009000, 0x00000094, 0x00000000, 0x00000000, 0x00000000, 0x00600000, 0x9C9999C9, 0xCCCCCC9C, 
0x77B777C7, 0xA7CCCC78, 0xCBBBBBBB, 0xBBBBBBBB, 0x9B99CCCC, 0x9999B999, 0x99999999, 0xCBCC9999, 
0x02000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00220000, 0xBC999AC9, 0xCCCCBCCC, 0x8B5555C5, 0xCABCCC9C, 0xC9CC7977, 0x77777787, 0x69B7CCBC, 
0x5A010041, 0xAA2552BA, 0x99140051, 0x04000134, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00202002, 0x60C00002, 0x00009B00, 0x00202292, 0xC9CCAC16, 0xCCCC4800, 0x000040C8, 
0xC6060000, 0x00000031, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x12000F0B, 0xC0000060, 
0x00C00C07, 0x00000007, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00400000, 0xBBBBBBCB, 
0xCBCCCCBC, 0x795644C3, 0x99B9CC9A, 0xCCAC0400, 0x000085CB, 0x54556566, 0x56454444, 0xCCBC8A77, 
0xA8A8AAB8, 0x12000918, 0x00000020, 0x00000000, 0x09200400, 0x000922C4, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x8AA7AB47, 0x2253C8CC, 0xCC8C77C7, 0x777787AC, 0xC7060000, 0x00000031, 
0xCCAC8B77, 0x7777B8CC, 0x77777777, 0x77777777, 0x00800912, 0x82000040, 0x00888000, 0x0000C0A0, 
0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x12000636, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0020000, 0x00004600, 
0xCBCCBCB9, 0x77777798, 0xCCC88CC8, 0x888888C8, 0xC6060000, 0x00000031, 0x2186CBCC, 0x59011033, 
0x1021A6CC, 0xCC8A3612, 0x12000704, 0x00C49C66, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x99999999, 0x99BACAAC, 0xCC8C88C8, 0x8888888C, 0xCBBBBBBB, 
0xBBBBBBBB, 0x8988CBCC, 0x898888A8, 0xCCACABCC, 0xCC8AB8CA, 0x12000F0B, 0xC9000060, 0x00C00C0A, 
0x00000007, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00400000, 0x88888888, 0x8888A8BC, 
0x8C7777C7, 0x7777CACC, 0xCCBBBBBB, 0xCBBBBBBB, 0x777777A8, 0x77777777, 0xAA787777, 0xAABBCCCC, 
0x00000F3C, 0x66000060, 0x00000006, 0x00000000, 0x00000000, 0x00000040, 0x00000000, 0x00020042, 
0x00800000, 0x57232232, 0xBB9BA9CC, 0xCC480000, 0x2096CCCC, 0xCCBC7903, 0x0900CCCC, 0x00000000, 
0x00000000, 0x68240100, 0x62A8CCBC, 0x12000918, 0x00000020, 0x00000000, 0x09000400, 0x000920C4, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCCBCC9, 0x999999CC, 0x8C7777C7, 0x77C8CCCC, 
0xCBBBBBBB, 0xBBBBBBBB, 0xB9BBABBB, 0x878A879A, 0x77777777, 0x77777777, 0x00800912, 0x82000040, 
0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0xBBBBBBCB, 
0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0x03000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00220000, 0xCCCCACC9, 0x9999BACB, 0x8C7777C7, 0x7787CCCC, 0xCBBBBBBB, 0xBBBBBBBB, 
0x77777787, 0x77777777, 0x8C777777, 0x9AB9BACC, 0x12000F0B, 0xC0000060, 0x00C00C07, 0x00000007, 
0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00400000, 0xBBBBBBCB, 0xCBCCCCBC, 0x795644C3, 
0x99B9CC9A, 0xCCAC0400, 0x000085CB, 0x54556566, 0x56454444, 0xCCBC8A77, 0xA8A8AAB8, 0x12000918, 
0x00000020, 0x00000000, 0x09200400, 0x000922C4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x8AA7AB47, 0x2253C8CC, 0xCC8C77C7, 0x777787AC, 0xC7060000, 0x00000031, 0xCCAC8B77, 0x7777B8CC, 
0x77777777, 0x77777777, 0x00800912, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 
0x00000000, 0x00000000, 0x00060000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCCCC, 
0xCCCCCCCC, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x12000636, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0020000, 0x00004600, 0xCBCCBCB9, 0x77777798, 
0xCCC88CC8, 0x888888C8, 0xC6060000, 0x00000031, 0x2186CBCC, 0x59011033, 0x1021A6CC, 0xCC8A3612, 
0x12000704, 0x00C49C66, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x99999999, 0x99BACAAC, 0xCC8C88C8, 0x8888888C, 0xCBBBBBBB, 0xBBBBBBBB, 0x8988CBCC, 
0x898888A8, 0xCCACABCC, 0xCC8AB8CA, 0x04000134, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00202002, 0x60C00002, 0x00009B00, 0x00202292, 0xC9CCAC16, 0xCCCC4800, 0x000040C8, 
0xC6060000, 0x00000031, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x12000F0B, 0xC9000060, 
0x00C00C0A, 0x00000007, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00400000, 0x88888888, 
0x8888A8BC, 0x8C7777C7, 0x7777CACC, 0xCCBBBBBB, 0xCBBBBBBB, 0x777777A8, 0x77777777, 0xAA787777, 
0xAABBCCCC, 0x00000F3C, 0x66000060, 0x00000006, 0x00000000, 0x00000000, 0x00000040, 0x00000000, 
0x00020042, 0x00800000, 0x57232232, 0xBB9BA9CC, 0xCC480000, 0x2096CCCC, 0xCCBC7903, 0x0900CCCC, 
0x00000000, 0x00000000, 0x68240100, 0x62A8CCBC, 0x12000918, 0x00000020, 0x00000000, 0x09000400, 
0x000920C4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCCBCC9, 0x999999CC, 0x8C7777C7, 
0x77C8CCCC, 0xCBBBBBBB, 0xBBBBBBBB, 0xB9BBABBB, 0x878A879A, 0x77777777, 0x77777777, 0x00800912, 
0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 
0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0x03000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00220000, 0xCCCCACC9, 0x9999BACB, 0x8C7777C7, 0x7787CCCC, 0xCBBBBBBB, 
0xBBBBBBBB, 0x77777787, 0x77777777, 0x8C777777, 0x9AB9BACC, 0x0000010B, 0x80000060, 0x00C00C08, 
0x00000008, 0x00000000, 0x00003003, 0x00000002, 0x00000000, 0x00400000, 0xBBBBBBCB, 0xCBCCCCCC, 
0x6A5456C2, 0x99A9CCCC, 0xCCBC4703, 0x00002094, 0x00000000, 0x00000000, 0xCC9C1400, 0x000083CC, 
0x1200091F, 0x00000020, 0x00000000, 0xC0030800, 0x8C30820B, 0x04000000, 0x00006700, 0x00000000, 
0x00000000, 0xBBBBBBCB, 0xBBCCCCBC, 0xCC4800C0, 0x9999C9CC, 0xCCAC8806, 0x000062CA, 0xCCCC9A58, 
0x014198CA, 0x00001011, 0x02000000, 0x04000134, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00202002, 0x60C00002, 0x00009B00, 0x00202292, 0xC9CCAC16, 0xCCCC4800, 0x000040C8, 
0xC6060000, 0x00000031, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x12000106, 0xCC000060, 
0x22C2A64A, 0x00008002, 0x00000000, 0x00006686, 0x004600AA, 0x00000044, 0x00880000, 0x37000000, 
0x0074C9CC, 0x48620200, 0x0040C8CC, 0xCCAC4702, 0x8600B8CC, 0x00001012, 0x00000000, 0x9C450100, 
0xA6CBCCCC, 0x12000918, 0x00000020, 0x00000000, 0x0A600A00, 0x004882CA, 0x02440000, 0x00202200, 
0x00000002, 0x00000000, 0xCCCCBCC9, 0x9999B9CC, 0x9B1500C0, 0x3097CBCC, 0xC9ABC969, 0x66666676, 
0xCCCCCCBA, 0x86CACCBB, 0x00001053, 0x78560200, 0x00000910, 0x82000040, 0xA0888000, 0x0000C0C0, 
0x00000000, 0x00004400, 0x00200000, 0x00000000, 0x00060000, 0xCCCCCCCC, 0xAAAACCCC, 0x999999C9, 
0xCCCCCC99, 0xCCCCCCCC, 0xCCCCCCCC, 0xCAAACCAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0x12000536, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xA0000000, 0x00004400, 
0xCBCCBC77, 0x00001074, 0xCCCC6A02, 0x000052C9, 0xC6060000, 0x00000031, 0x2185CBCC, 0x49132033, 
0x1031A5CC, 0xCC8A3612, 0x03000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00220000, 0xCCCCACC9, 0x9999BACB, 0x590100C0, 0x0084CCCC, 0xC6060000, 
0x00000031, 0x4386CBCC, 0x79673433, 0xBC89A7CC, 0xCCCACCCC, 0x00242A0F, 0x0B0B0B0B, 0x09090B0B, 
0x090A0909, 0x00090909, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC2C2C0C0, 0x4646C2C2, 
0x48454646, 0x00464648, 0x78787878, 0x78787878, 0x78787878, 0x00787878, 0x57575757, 0x56565757, 
0x56575656, 0x00565656, 0x00800716, 0x00000040, 0x00000000, 0xC0800800, 0x2C000002, 0x02000000, 
0x00000000, 0x00000000, 0x00000000, 0xCBCCCBCB, 0xCBBBBCBB, 0x9C9C99C9, 0xA99CCCCC, 0xCCCCCCCC, 
0xCCCCCCCC, 0x99C9CC9C, 0x9999C9CC, 0x99999999, 0x99999999, 0x04000134, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00202002, 0x60C00002, 0x00009B00, 0x00202292, 0xC9CCAC16, 
0xCCCC4800, 0x000040C8, 0xC6060000, 0x00000031, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 
0x10000521, 0x86000080, 0xCC86A840, 0x0000800C, 0x00000000, 0x000000CC, 0x0406408A, 0x00000088, 
0x00800000, 0xBBBBBBCB, 0xBCBBCBCC, 0x59C988C4, 0x99B9CCCC, 0xC8CCCC5C, 0x55555565, 0x120010A4, 
0x68776567, 0xCCCCCC7B, 0x345443B7, 0x0000072D, 0x82000060, 0x40840000, 0x00002A80, 0x00000006, 
0x02000600, 0x80A00000, 0x00000600, 0x00040000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xCCCCCCCC, 0xCCCCCCCC, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x12000915, 0x00000060, 
0x00000000, 0x4ACC0400, 0x00002002, 0x00000000, 0x00002000, 0x00000000, 0x00000000, 0xCCCCBB49, 
0x53A98BCA, 0xCCBA3700, 0x30A6ACCC, 0xC8CC8C55, 0x55555565, 0xB9CCCCCC, 0x20967888, 0x00000000, 
0x8B140000, 0x05000522, 0x20000080, 0xCC206000, 0x000080C0, 0x00000000, 0x0000CC00, 0x00220024, 
0x00000000, 0x00020000, 0x9CC8C9C8, 0x97C9C9CC, 0xCA59A6C6, 0x869CCCCC, 0xCC9ACA9C, 0x9999C9CC, 
0xCC9CA877, 0x6955A7CC, 0x8A456499, 0x74CB9CA8, 0x0C000703, 0x00C06C61, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCABAA8C, 0x86A7CCCB, 0xCC8AA806, 
0x128488CC, 0xC8585555, 0x55555565, 0xBABCCCCC, 0x8967A7AA, 0x11527797, 0xBCBB7846, 0x1280050B, 
0xC0000060, 0x00C00C04, 0x00000002, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00400000, 
0xACA7AC47, 0xCCBCBCCB, 0x3773BB07, 0x47B7CC9C, 0xCCCCCC5C, 0x555585BB, 0x48020000, 0x0083989B, 
0xBC9B3701, 0x0030C8CC, 0x12000943, 0x00000040, 0x00000000, 0x0CC40B00, 0x000200C6, 0x02000000, 
0x00006200, 0x00000000, 0x00000000, 0x9A99A9CC, 0xC9CCCC9B, 0xAC4601C0, 0xB7CCCCCB, 0xCACCAC57, 
0x55556597, 0xCBCCCCCC, 0x11002195, 0x00000000, 0xAC784700, 0x00800912, 0x82000040, 0x00888000, 
0x0000C0A0, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00060000, 0x999999C9, 0xC9CCCCCC, 
0x8C8888C8, 0x88CCCC88, 0xCBBBBBBB, 0xBBBBBBBB, 0xCBBCCCCC, 0x888898CC, 0x9A888888, 0x89888888, 
0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00040000, 0xAB9999C9, 0xC9CCCCCC, 0xC8C948C0, 0x62CACCCC, 0xCC8A770A, 0x4000CCCC, 0xCCCCBBBB, 
0x000030B8, 0x6A020000, 0xCC9ACBBC, 0x00800716, 0x00000040, 0x00000000, 0xC0800800, 0x2C000002, 
0x02000000, 0x00000000, 0x00000000, 0x00000000, 0xCBCCCBCB, 0xCBBBBCBB, 0x9C9C99C9, 0xA99CCCCC, 
0xCCCCCCCC, 0xCCCCCCCC, 0x99C9CC9C, 0x9999C9CC, 0x99999999, 0x99999999, 0x10000521, 0x86000080, 
0xCC86A840, 0x0000800C, 0x00000000, 0x000000CC, 0x0406408A, 0x00000088, 0x00800000, 0xBBBBBBCB, 
0xBCBBCBCC, 0x59C988C4, 0x99B9CCCC, 0xC8CCCC5C, 0x55555565, 0x120010A4, 0x68776567, 0xCCCCCC7B, 
0x345443B7, 0x0000072D, 0x82000060, 0x40840000, 0x00002A80, 0x00000006, 0x02000600, 0x80A00000, 
0x00000400, 0x00040000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x12000915, 0x00000060, 0x00000000, 0x4ACC0400, 
0x00002002, 0x00000000, 0x00002000, 0x00000000, 0x00000000, 0xCCCCBB49, 0x53A98BCA, 0xCCBA3700, 
0x30A6ACCC, 0xC8CC8C55, 0x55555565, 0xB9CCCCCC, 0x20967888, 0x00000000, 0x8B140000, 0x05000522, 
0x20000080, 0xCC206000, 0x000080C0, 0x00000000, 0x0000CC00, 0x00220024, 0x00000000, 0x00020000, 
0x9CC8C9C8, 0x97C9C9CC, 0xCA59A6C6, 0x869CCCCC, 0xCC9ACA9C, 0x9999C9CC, 0xCC9CA877, 0x6955A7CC, 
0x8A456499, 0x74CB9CA8, 0x0C000703, 0x00C06C61, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xCCABAA8C, 0x86A7CCCB, 0xCC8AA806, 0x128488CC, 0xC8585555, 
0x55555565, 0xBABCCCCC, 0x8967A7AA, 0x11527797, 0xBCBB7846, 0x04000134, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00202002, 0x60C00002, 0x00009B00, 0x00202292, 0xC9CCAC16, 
0xCCCC4800, 0x000040C8, 0xC6060000, 0x00000031, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 
0x1280050B, 0xC0000060, 0x00C00C04, 0x00000002, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 
0x00400000, 0xACA7AC47, 0xCCBCBCCB, 0x3773BB07, 0x47B7CC9C, 0xCCCCCC5C, 0x555585BB, 0x48020000, 
0x0083989B, 0xBC9B3701, 0x0030C8CC, 0x12000943, 0x00000040, 0x00000000, 0x0CC40B00, 0x000200C6, 
0x02000000, 0x00006200, 0x00000000, 0x00000000, 0x9A99A9CC, 0xC9CCCC9B, 0xAC4601C0, 0xB7CCCCCB, 
0xCACCAC57, 0x55556597, 0xCBCCCCCC, 0x11002195, 0x00000000, 0xAC784700, 0x00800912, 0x82000040, 
0x00888000, 0x0000C0A0, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00060000, 0x999999C9, 
0xC9CCCCCC, 0x8C8888C8, 0x88CCCC88, 0xCBBBBBBB, 0xBBBBBBBB, 0xCBBCCCCC, 0x888898CC, 0x9A888888, 
0x89888888, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00040000, 0xAB9999C9, 0xC9CCCCCC, 0xC8C948C0, 0x62CACCCC, 0xCC8A770A, 0x4000CCCC, 
0xCCCCBBBB, 0x000030B8, 0x6A020000, 0xCC9ACBBC, 0x00800716, 0x00000040, 0x00000400, 0xC0800800, 
0x2C000002, 0x02000002, 0x00000000, 0x00000000, 0x00000000, 0xBCCCBCCB, 0xBCBBBBCC, 0x690200C0, 
0xCACCCC9C, 0xCACCCC0C, 0x63006499, 0xCCAC8967, 0x52C9CCCC, 0x57122200, 0x02649899, 0x00000915, 
0x00000060, 0x00000000, 0x004A0600, 0x00006006, 0x00000000, 0x00006200, 0x00000000, 0x00000000, 
0xBBBBBBCB, 0xCBCCCCCC, 0xCCCC9C05, 0x9999CBCC, 0xCBCCCC2C, 0x2722CC69, 0xCCCCCC9B, 0x55A9BACC, 
0x42545624, 0x25000000, 0x04000134, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00202002, 0x60C00002, 0x00009B00, 0x00202292, 0xC9CCAC16, 0xCCCC4800, 0x000040C8, 0xC6060000, 
0x00000031, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x0C000521, 0x96000080, 0xCC96A840, 
0x0000800C, 0x00000000, 0x000000CC, 0x0416608A, 0x00000088, 0x00800000, 0xCCBBBBCB, 0xCBCCCCCC, 
0x9BC9BCC7, 0x99B9CCCC, 0xB6CBCC0C, 0x65221042, 0x33222363, 0x9B464434, 0xCACCCCCC, 0x66547697, 
0x0000072D, 0x82000060, 0x40840000, 0x00002A80, 0x00000006, 0x02000600, 0x80A00000, 0x00000600, 
0x00040000, 0xBBAC7884, 0x2252B7CA, 0xCCCC5901, 0x005199CC, 0xCCBBCC8C, 0xCC8888A9, 0x4496AA48, 
0x25000052, 0xCCCCAC88, 0x020052A9, 0x0E000915, 0x00000060, 0x00000000, 0x44CC0800, 0x00002002, 
0x00000000, 0x00012000, 0x00000000, 0x00000007, 0xCCCCAC47, 0x4375B9CC, 0xCC8B2500, 0x102295CB, 
0xC8CCCC0B, 0x00348867, 0xB7CCCCAC, 0x00000052, 0x00000000, 0xAA480300, 0x02000622, 0x00000000, 
0x0C000000, 0x00000000, 0x00000000, 0x0000C000, 0x00000000, 0x00000000, 0x00000008, 0xBBBBAB47, 
0x95CCCCCC, 0x13000000, 0xB9CCCC7B, 0xCBAB6904, 0x000090A9, 0xAACBCCCC, 0x236454A9, 0x46545424, 
0xCCCCCC8C, 0x10000607, 0xCC000060, 0x00C0A08A, 0x00000000, 0x00000000, 0x00000060, 0x00000088, 
0x00000060, 0x00AA0008, 0x9B9999C9, 0x99AACBCC, 0x589689C6, 0x75CBCCAC, 0xC9CCCC0C, 0x74107677, 
0x01204375, 0x00000010, 0xBC9A5702, 0xA8CBCCCC, 0x08000943, 0x00000040, 0x00000000, 0x0CC40B00, 
0x000200C6, 0x02400000, 0x00006200, 0x00000000, 0x00000000, 0xAA9A99C9, 0xCACCCCBC, 0x480000C0, 
0x63CACCCC, 0xC8CCCC0C, 0x00004465, 0xCCCCCCCC, 0x11002194, 0x00000000, 0xAB683500, 0x00800712, 
0x82000040, 0x00889000, 0x0000C0A0, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00060000, 
0xBCB9CCCA, 0xCBCCCCBC, 0x260000C0, 0xC8CCCCAA, 0xC6060000, 0x00000031, 0xCCCCCCCC, 0x001065C8, 
0x31010000, 0x9A884622, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00040000, 0xAB9999C9, 0xC9CCCCCC, 0x480100C0, 0x30B7CCCC, 0xC848A508, 
0x00005565, 0xAACBCCCC, 0x44447698, 0x48230121, 0xCCCCCCBB, 0x00800716, 0x00000040, 0x00000400, 
0xC0800800, 0x2C000002, 0x02000002, 0x00000000, 0x00000000, 0x00000000, 0xBCCCBCCB, 0xBCBBBBCC, 
0x690200C0, 0xCACCCC9C, 0xCACCCC0C, 0x63006499, 0xCCAC8967, 0x52C9CCCC, 0x57122200, 0x02649899, 
0x00000915, 0x00000060, 0x00000000, 0x004A0600, 0x00006006, 0x00000000, 0x00006200, 0x00000000, 
0x00000000, 0xBBBBBBCB, 0xCBCCCCCC, 0xCCCC9C05, 0x9999CBCC, 0xCBCCCC2C, 0x2722CC69, 0xCCCCCC9B, 
0x55A9BACC, 0x42545624, 0x25000000, 0x0C000521, 0x96000080, 0xCC96A840, 0x0000800C, 0x00000000, 
0x000000CC, 0x0416608A, 0x00000088, 0x00800000, 0xCCBBBBCB, 0xCBCCCCCC, 0x9BC9BCC7, 0x99B9CCCC, 
0xB6CBCC0C, 0x65221042, 0x33222363, 0x9B464434, 0xCACCCCCC, 0x66547697, 0x0000072D, 0x82000060, 
0x40840000, 0x00002A80, 0x00000006, 0x02000600, 0x80A00000, 0x00000600, 0x00040000, 0xBBAC7884, 
0x2252B7CA, 0xCCCC5901, 0x005199CC, 0xCCBBCC8C, 0xCC8888A9, 0x4496AA48, 0x25000052, 0xCCCCAC88, 
0x020052A9, 0x0E000915, 0x00000060, 0x00000000, 0x44CC0800, 0x00002002, 0x00000000, 0x00012000, 
0x00000000, 0x00000007, 0xCCCCAC47, 0x4375B9CC, 0xCC8B2500, 0x102295CB, 0xC8CCCC0B, 0x00348867, 
0xB7CCCCAC, 0x00000052, 0x00000000, 0xAA480300, 0x02000622, 0x00000000, 0x0C000000, 0x00000000, 
0x00000000, 0x0000C000, 0x00000000, 0x00000000, 0x00000008, 0xBBBBAB47, 0x95CCCCCC, 0x13000000, 
0xB9CCCC7B, 0xCBAB6904, 0x000090A9, 0xAACBCCCC, 0x236454A9, 0x46545424, 0xCCCCCC8C, 0x04000134, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00202002, 0x60C00002, 0x00009B00, 
0x00202292, 0xC9CCAC16, 0xCCCC4800, 0x000040C8, 0xC6060000, 0x00000031, 0xCCCCCCCC, 0xCCCCCCCC, 
0xCCCCCCCC, 0xCCCCCCCC, 0x10000607, 0xCC000060, 0x00C0A08A, 0x00000000, 0x00000000, 0x00000060, 
0x00000088, 0x00000060, 0x00AA0008, 0x9B9999C9, 0x99AACBCC, 0x589689C6, 0x75CBCCAC, 0xC9CCCC0C, 
0x74107677, 0x01204375, 0x00000010, 0xBC9A5702, 0xA8CBCCCC, 0x08000943, 0x00000040, 0x00000000, 
0x0CC40B00, 0x000200C6, 0x02400000, 0x00006200, 0x00000000, 0x00000000, 0xAA9A99C9, 0xCACCCCBC, 
0x480000C0, 0x63CACCCC, 0xC8CCCC0C, 0x00004465, 0xCCCCCCCC, 0x11002194, 0x00000000, 0xAB683500, 
0x00800712, 0x82000040, 0x00889000, 0x0000C0A0, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00060000, 0xBCB9CCCA, 0xCBCCCCBC, 0x260000C0, 0xC8CCCCAA, 0xC6060000, 0x00000031, 0xCCCCCCCC, 
0x001065C8, 0x31010000, 0x9A884622, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00040000, 0xAB9999C9, 0xC9CCCCCC, 0x480100C0, 0x30B7CCCC, 
0xC848A508, 0x00005565, 0xAACBCCCC, 0x44447698, 0x48230121, 0xCCCCCCBB, 0x00800716, 0x00000040, 
0x00000400, 0xC0800800, 0x2C000002, 0x02000002, 0x00000000, 0x00000000, 0x00000000, 0xCBBCBBCB, 
0xBBBBBBBB, 0x290000C0, 0x9ACCBCAC, 0xCBCCCC0C, 0x0010C79A, 0xCCCCAC77, 0x756797CB, 0x9B042054, 
0x979999CA, 0x00000915, 0x00000060, 0x00000000, 0x004A0600, 0x00006006, 0x00000000, 0x00006200, 
0x00000000, 0x00000000, 0xBBBBBBCB, 0xCBCCCCBC, 0xCACC88C4, 0x99CBCABC, 0xC9CCCC0C, 0x00009A99, 
0xCCCCCCAA, 0x105386BA, 0x00103302, 0x01000000, 0x04000134, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00202002, 0x60C00002, 0x00009B00, 0x00202292, 0xC9CCAC16, 0xCCCC4800, 
0x000040C8, 0xC6060000, 0x00000031, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x12000521, 
0x96000080, 0xCC96A840, 0x0000800C, 0x00000000, 0x000000CC, 0x0416608A, 0x00000088, 0x00800000, 
0xBBBBBBCB, 0xBBCCCCCC, 0x9BC9BCC7, 0x99B9CCCC, 0xA5CCCC0C, 0x66001132, 0x23212253, 0xAC99A969, 
0xCACCCCCC, 0x45242275, 0x0000072D, 0x82000060, 0x40840000, 0x00002A80, 0x00000006, 0x02000600, 
0x80A00000, 0x00000600, 0x00040000, 0xBA9C77C7, 0x79AA98AA, 0xCACCACC7, 0x55559788, 0x63A8BC0B, 
0xCC003710, 0x22222262, 0x22222222, 0xCCCCAB47, 0x222284CA, 0x12000915, 0x00000060, 0x00000000, 
0x44CC0800, 0x00002002, 0x00000000, 0x00002000, 0x00000000, 0x00000006, 0xCC8A5502, 0x2276CACC, 
0xCC9C1500, 0x002084CB, 0xC6CCCC0B, 0x00010031, 0xA6CCCC9C, 0x00000031, 0x00000000, 0x14000000, 
0x00000622, 0x00000000, 0x0C000000, 0x00000000, 0x00000000, 0x0000C000, 0x00000000, 0x00000000, 
0x00000000, 0x8A565565, 0x85CCBCCB, 0xB88A0400, 0x40C8CC8C, 0xCBCCCC4C, 0x444454A7, 0xA75954A5, 
0x85468555, 0xCCCCAC36, 0x124244A8, 0x12000529, 0xC2000060, 0x64C60806, 0x00000000, 0x00000000, 
0x0000A888, 0x008000BC, 0x00000000, 0x00220000, 0x8B573402, 0x3296CBCC, 0x48000000, 0x64B9CCCC, 
0xB6CCCC0B, 0x11000031, 0x00011122, 0x00000000, 0xCCAB7A24, 0x4286B9CC, 0x12000943, 0x00000040, 
0x00000000, 0x0CC40B00, 0x000200C6, 0x02400000, 0x00006200, 0x00000000, 0x00000000, 0xAC9A99C9, 
0xC9CCCCCC, 0x040000C0, 0x74CBCC8C, 0xC9CCCC0A, 0x00026676, 0xCBCCCCCC, 0x11002183, 0x00000000, 
0x9B683500, 0x00800712, 0x82000040, 0x00889000, 0x0000C0A0, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00060000, 0xAB9999C9, 0x99B9CCCC, 0x370000C0, 0x76CBCCAC, 0xC6060000, 0x00000031, 
0xCCCCCCCB, 0x316697CB, 0x75766612, 0x99580230, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00040000, 0xBC9999C9, 0xC9CCCCCC, 0x150000C0, 
0x20A6CC9C, 0xCC8A770A, 0x4000CCCC, 0xAACBCCCC, 0x44447698, 0x48230121, 0xCCCCCCBB, 0x00800716, 
0x00000040, 0x00000400, 0xC0800800, 0x2C000002, 0x02000002, 0x00000000, 0x00000000, 0x00000000, 
0xCBBCBBCB, 0xBBBBBBBB, 0x290000C0, 0x9ACCBCAC, 0xCBCCCC0C, 0x0010C79A, 0xCCCCAC77, 0x756797CB, 
0x9B042054, 0x979999CA, 0x00000915, 0x00000060, 0x00000000, 0x004A0600, 0x00006006, 0x00000000, 
0x00006200, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xCBCCCCBC, 0xCACC88C4, 0x99CBCABC, 0xC9CCCC0C, 
0x00009A99, 0xCCCCCCAA, 0x105386BA, 0x00103302, 0x01000000, 0x12000521, 0x96000080, 0xCC96A840, 
0x0000800C, 0x00000000, 0x000000CC, 0x0416608A, 0x00000088, 0x00800000, 0xBBBBBBCB, 0xBBCCCCCC, 
0x9BC9BCC7, 0x99B9CCCC, 0xA5CCCC0C, 0x66001132, 0x23212253, 0xAC99A969, 0xCACCCCCC, 0x45242275, 
0x0000072D, 0x82000060, 0x40840000, 0x00002A80, 0x00000006, 0x02000600, 0x80A00000, 0x00000600, 
0x00040000, 0xBA9C77C7, 0x79AA98AA, 0xCACCACC7, 0x55559788, 0x63A8BC0B, 0xCC003710, 0x22222262, 
0x22222222, 0xCCCCAB47, 0x222284CA, 0x12000915, 0x00000060, 0x00000000, 0x44CC0800, 0x00002002, 
0x00000000, 0x00002000, 0x00000000, 0x00000006, 0xCC8A5502, 0x2276CACC, 0xCC9C1500, 0x002084CB, 
0xC6CCCC0B, 0x00010031, 0xA6CCCC9C, 0x00000031, 0x00000000, 0x14000000, 0x00000622, 0x00000000, 
0x0C000000, 0x00000000, 0x00000000, 0x0000C000, 0x00000000, 0x00000000, 0x00000000, 0x8A565565, 
0x85CCBCCB, 0xB88A0400, 0x40C8CC8C, 0xCBCCCC4C, 0x444454A7, 0xA75954A5, 0x85468555, 0xCCCCAC36, 
0x124244A8, 0x04000134, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00202002, 
0x60C00002, 0x00009B00, 0x00202292, 0xC9CCAC16, 0xCCCC4800, 0x000040C8, 0xC6060000, 0x00000031, 
0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x12000529, 0xC2000060, 0x64C60806, 0x00000000, 
0x00000000, 0x0000A888, 0x008000BC, 0x00000000, 0x00220000, 0x8B573402, 0x3296CBCC, 0x48000000, 
0x64B9CCCC, 0xB6CCCC0B, 0x11000031, 0x00011122, 0x00000000, 0xCCAB7A24, 0x4286B9CC, 0x12000943, 
0x00000040, 0x00000000, 0x0CC40B00, 0x000200C6, 0x02400000, 0x00006200, 0x00000000, 0x00000000, 
0xAC9A99C9, 0xC9CCCCCC, 0x040000C0, 0x74CBCC8C, 0xC9CCCC0A, 0x00026676, 0xCBCCCCCC, 0x11002183, 
0x00000000, 0x9B683500, 0x00800712, 0x82000040, 0x00889000, 0x0000C0A0, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00060000, 0xAB9999C9, 0x99B9CCCC, 0x370000C0, 0x76CBCCAC, 0xC6060000, 
0x00000031, 0xCCCCCCCB, 0x316697CB, 0x75766612, 0x99580230, 0x01000701, 0x0228C64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00040000, 0xBC9999C9, 0xC9CCCCCC, 
0x150000C0, 0x20A6CC9C, 0xCC8A770A, 0x4000CCCC, 0xAACBCCCC, 0x44447698, 0x48230121, 0xCCCCCCBB, 
0x04000134, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00202002, 0x60C00002, 
0x00009B00, 0x00202292, 0xC9CCAC16, 0xCCCC4800, 0x000040C8, 0xC6060000, 0x00000031, 0xCCCCCCCC, 
0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x10000736, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xC0020000, 0x00002400, 0xCBCCBCB9, 0x77777798, 0xBBBBBBCB, 0xBBBBBBBB, 
0xC6060000, 0x00000031, 0x2186CBCC, 0x59011033, 0x1021A6CC, 0xCC8A3612, 0x1200050B, 0xC0000060, 
0x00C00C04, 0x00000002, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00400000, 0xBBBBBBCB, 
0xBBCCCCBC, 0x795644C3, 0x99B9CCBB, 0xCCAC0400, 0x000085CB, 0x54556566, 0x56454444, 0xCCBC8A77, 
0xA8A8AAB8, 0x12000918, 0x00000020, 0x00000000, 0x09000400, 0x000920C4, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x8AA7AB47, 0x2253C8CC, 0xBBBBBBBB, 0xBBBBBBBB, 0xC7060000, 0x00000031, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x12000704, 0x00C03A60, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x888888C8, 0x8888CCCC, 0xCC8C77C7, 
0x77777787, 0xC6060000, 0x00000031, 0xBA8988A8, 0x888888B8, 0xAC9B8888, 0x88C9CCCC, 0x00000736, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xA0000000, 0x00000000, 
0xBBBBBB9A, 0x777777A8, 0xBBBBBBBB, 0xBBBBBBBB, 0xC6060000, 0x00000031, 0x2186CBCC, 0x59011033, 
0x1021A6CC, 0xCC8A3612, 0x1200050B, 0xC4000060, 0x00C00C04, 0x00000002, 0x00000000, 0x00000000, 
0x00000002, 0x00000000, 0x00400000, 0x483333C3, 0xC868CACC, 0x78BB47C2, 0x2252C8CC, 0xCCAC0400, 
0x000085CB, 0x44444484, 0x44444444, 0xAA484444, 0x74CACCBB, 0x12000918, 0x00000020, 0x00000000, 
0x09000400, 0x000920C4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCBC99C9, 0x9999A9CC, 
0xBBBBBBCB, 0xBBBBBBBB, 0xCBBBBBBB, 0xBBBBBBBB, 0xCCCCACC9, 0x20000093, 0x00000000, 0x13310100, 
0x04000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00220000, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xC6060000, 0x00000031, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x00000736, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xA0000000, 0x00000000, 0xCBCCBCB9, 0x77777798, 0xBBBBBBCB, 0xBBBBBBBB, 
0xC6060000, 0x00000031, 0x2186CBCC, 0x59011033, 0x1021A6CC, 0xCC8A3612, 0x1200050B, 0xC0000060, 
0x00C00C04, 0x00000002, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00400000, 0xBBBBBBCB, 
0xBBCCCCBC, 0x795644C3, 0x99B9CCBB, 0xCCAC0400, 0x000085CB, 0x54556566, 0x56454444, 0xCCBC8A77, 
0xA8A8AAB8, 0x12000918, 0x00000020, 0x00000000, 0x09000400, 0x000920C4, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x8AA7AB47, 0x2253C8CC, 0xBCB868C6, 0x66B7C9C9, 0xC7060000, 0x00000031, 
0xCCBA998A, 0x99CB99CB, 0x777777A8, 0x77777777, 0x06000704, 0x00C03A60, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x888888C8, 0x8888CCCC, 0xCC8C77C7, 
0x77777787, 0xC6060000, 0x00000031, 0xBA8988A8, 0x888888B8, 0xAC9B8888, 0x88C9CCCC, 0x04000134, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00202002, 0x60C00002, 0x00009B00, 
0x00202292, 0xC9CCAC16, 0xCCCC4800, 0x000040C8, 0xC6060000, 0x00000031, 0xCCCCCCCC, 0xCCCCCCCC, 
0xCCCCCCCC, 0xCCCCCCCC, 0x10000736, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xC0020000, 0x00002400, 0xBBBBBB9A, 0x777777A8, 0xCCCC69C6, 0x666696BC, 0xC6060000, 
0x00000031, 0x2186CBCC, 0x59011033, 0x1021A6CC, 0xCC8A3612, 0x1200050B, 0xC4000060, 0x00C00C04, 
0x00000002, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00400000, 0x483333C3, 0xC868CACC, 
0x78BB47C2, 0x2252C8CC, 0xCCAC0400, 0x000085CB, 0x44444484, 0x44444444, 0xAA484444, 0x74CACCBB, 
0x12000918, 0x00000020, 0x00000000, 0x09000400, 0x000920C4, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xCCAC99C9, 0x9999A9CC, 0x666666C6, 0x66B8CC8C, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCACC9, 
0x20000093, 0x00000000, 0x13310100, 0x04000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00220000, 0x9C99CBC9, 0x9999CBCC, 0x666666C6, 0x66B8CC8C, 
0xC6060000, 0x00000031, 0x78777787, 0x777777A8, 0x78777777, 0xCC9CB9CC, 0x0080050B, 0x00000000, 
0x00200A08, 0x00000008, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBCB, 
0xBBBBBBCC, 0x6A0200C0, 0x99A9CCCC, 0xCCCC6966, 0x6666B6CC, 0x00000000, 0x00000000, 0xCCAC2500, 
0x004087C9, 0x1200091F, 0x00000020, 0x00000000, 0xA0620800, 0x6C00210B, 0x04000000, 0x00008800, 
0x00000000, 0x00000000, 0xBBBBBBCB, 0xBBCBCCCC, 0xCC4800C0, 0x9999CCCC, 0xCCAB9809, 0x0000B0CB, 
0xCCBC8A66, 0x022085CA, 0x00000000, 0x01000000, 0x04000134, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00202002, 0x60C00002, 0x00009B00, 0x00202292, 0xC9CCAC16, 0xCCCC4800, 
0x000040C8, 0xC6060000, 0x00000031, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x12000506, 
0xCC000060, 0x22C2A64A, 0x00008002, 0x00000000, 0x00006686, 0x004600AA, 0x00000044, 0x00880000, 
0x8C767744, 0x3386CBCC, 0x48370000, 0x0073CACC, 0xCCCCCC0A, 0x7500A9CC, 0x20241062, 0x00002023, 
0x8A556603, 0x75CACCCC, 0x12000918, 0x00000020, 0x00000000, 0x0A620A00, 0x004886CC, 0x02440000, 
0x00202200, 0x00000002, 0x00000000, 0xCCCCACC9, 0x9999A9CC, 0xACCA7BC3, 0x0062CACC, 0xCAAB2600, 
0x00004098, 0x9AB98A37, 0xCCCCAC99, 0x336566B8, 0x42243222, 0x04000704, 0x00C42A60, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCBCCCA, 0x9999B9CC, 
0xBCCB8CC4, 0x0051C9CC, 0xC6060000, 0x00000031, 0x56564684, 0x12014076, 0x9C775544, 0xA7CCCCCC, 
0x0080081F, 0x00000020, 0x0000080A, 0xC0000802, 0x8C00800A, 0x02000000, 0x00004400, 0x00000000, 
0x00000000, 0xCCCCBC99, 0x999999CB, 0xCBC8B907, 0x0084CCBC, 0xCCCCAB09, 0x8000CACC, 0x87CACCCC, 
0x56746633, 0x33326433, 0xBB782411, 0x0400070A, 0xAC000060, 0x00A0C060, 0xAAA0A060, 0x08000080, 
0x000000AA, 0x00020000, 0x00400000, 0x002A0000, 0xB99999C9, 0xCCCCCCAB, 0x0230B7C7, 0xCCCCCC6A, 
0xCB58AA05, 0x00007AB5, 0xCACCCCBC, 0x00000062, 0x9C030000, 0x9898B9CC, 0x02000701, 0x0228C64C, 
0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xAA9999C9, 
0xCCBBCACC, 0x480000C0, 0x84CBCCCC, 0xC8060000, 0x00001042, 0x98CCCCCC, 0x89456476, 0x66134299, 
0xAC584377, 0x0080050B, 0xC2000060, 0x20C20C28, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 
0x00000064, 0x00A00000, 0xBBBBBBCB, 0xBBBBCCCC, 0x692200C0, 0x99A9CCCC, 0xCCBC3700, 0x000030C6, 
0x00000000, 0x00000000, 0xCC9C1400, 0x001065CB, 0x1200091F, 0x00000020, 0x00000000, 0xC0420800, 
0x8C20820B, 0x04000000, 0x00004700, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xBBCCCCBC, 0xCC4800C0, 
0x9999CCCC, 0xCCAB8808, 0x000093CB, 0xCCBC7915, 0x022085CB, 0x00000000, 0x00000000, 0x04000134, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00202002, 0x60C00002, 0x00009B00, 
0x00202292, 0xC9CCAC16, 0xCCCC4800, 0x000040C8, 0xC6060000, 0x00000031, 0xCCCCCCCC, 0xCCCCCCCC, 
0xCCCCCCCC, 0xCCCCCCCC, 0x10000736, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xC0020000, 0x00006600, 0xCACCBC78, 0x11112154, 0xCCCC8C04, 0x000040C8, 0xC6060000, 
0x00000031, 0x2184CBCC, 0x69021033, 0x1011A5CC, 0xCC8A3612, 0x00000736, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xA0000000, 0x00000000, 0xCACCBC78, 0x11112154, 
0xCCCC8C04, 0x000040C8, 0xC6060000, 0x00000031, 0x2195CCCC, 0x79021033, 0x1011A5CC, 0xCC8A3612, 
0x12000506, 0xCC000060, 0x22C2A64A, 0x00008002, 0x00000000, 0x00006686, 0x004600AA, 0x00000044, 
0x00880000, 0x59120000, 0x0052C8CC, 0x48510100, 0x0051C9CC, 0xCC7A2500, 0x750096CC, 0x00020030, 
0x00000000, 0x68230000, 0x95CACCCC, 0x12000918, 0x00000020, 0x00000000, 0x0A600A00, 0x004882CA, 
0x02440000, 0x00202200, 0x00000002, 0x00000000, 0xCCAC99C9, 0x9999B9CC, 0x260000C0, 0x0084CCAC, 
0xC6060000, 0x00000031, 0xCCCCACC9, 0x20323285, 0x00000000, 0x13210100, 0x00000910, 0x82000040, 
0xA0888000, 0x0000C0C0, 0x00000000, 0x00004400, 0x00200000, 0x00000000, 0x00060000, 0xBBBBBBCB, 
0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0x04000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00220000, 0xCCAC99C9, 0x99A9BACC, 0x350000C0, 0x0084CC9C, 0xC6060000, 0x00000031, 
0x22426587, 0x43030000, 0xBC692422, 0x89CACCCC, 0x0080051F, 0x00000020, 0x00000000, 0xA0000000, 
0xAC000000, 0x00000000, 0x00004000, 0x00000000, 0x00000000, 0xCCCCBCCB, 0xBCBBBBCB, 0x1921A6C6, 
0xCCCCAC9A, 0xCCBBCCAB, 0xAAAACACC, 0xCBCCBABC, 0x88A899BB, 0x44444454, 0x46444444, 0x04000134, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00202002, 0x60C00002, 0x00009B00, 
0x00202292, 0xC9CCAC16, 0xCCCC4800, 0x000040C8, 0xC6060000, 0x00000031, 0xCCCCCCCC, 0xCCCCCCCC, 
0xCCCCCCCC, 0xCCCCCCCC, 0x0E000509, 0xAC000060, 0x00A00A6C, 0x00000000, 0x00000000, 0x0000AA80, 
0x00202046, 0x00000020, 0x00A00000, 0xBCBBBBCB, 0xBBBBBBCC, 0x190041C1, 0x99CBCC9C, 0xCCCCCC0C, 
0xCC00BCCB, 0x0042A6CC, 0x11232401, 0x89886713, 0xCCCCCCAB, 0x00000530, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000060, 0x00A00006, 0xBAB8BCC8, 0x888888A9, 
0x46B787C5, 0x74CBCC9A, 0x88888888, 0xCC88C8AC, 0x44444457, 0x44444444, 0x88884644, 0xB6BCCCCC, 
0x0600091A, 0x00000060, 0x00000000, 0x00040800, 0xA80ACA0C, 0x66660000, 0x00467200, 0x00000064, 
0x00000000, 0xCCBCAB8B, 0x954582BA, 0xCCCCBB07, 0x523585CA, 0xC8CCBB0B, 0xCC003443, 0x77555685, 
0xA8CBCC9C, 0x53022175, 0x89872610, 0x0800070F, 0x00000060, 0xCC020000, 0x00000002, 0x00000000, 
0x00000000, 0x00800086, 0x00000000, 0x00000000, 0x7B545782, 0xBACCCCCC, 0xCBCCCC08, 0x4086AABB, 
0x94CCCC0C, 0x00000021, 0x00101021, 0x02000000, 0xCBCCCC6B, 0x427676AA, 0x0000072D, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0x0A000925, 0x00000080, 0x00000000, 0x0CAA0600, 0xA0006046, 0x00AC0000, 0x00008400, 
0x00000066, 0x00000000, 0x999999C9, 0xCCBCCCAC, 0x790300C0, 0x30B7CCCC, 0xCACCBB0C, 0x00002084, 
0xCBCCCCBC, 0x00000072, 0x00000000, 0x46020000, 0x00800712, 0x82000040, 0x00888000, 0x0000C0A0, 
0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0xCCCCBCC9, 0xC99BC99C, 0x7B5644C4, 
0xCCCCCC8B, 0xC9797777, 0x77777787, 0xCCCCBC99, 0x5565A8BA, 0x55555555, 0x7A66A857, 0x02000701, 
0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00040000, 
0xAC9999C9, 0xC9CCCCCB, 0x890400C0, 0x40C8CCAC, 0xC6BB9B04, 0x00000031, 0x74B9CCCC, 0x43456424, 
0x66134266, 0xCC8A5686, 0x0080050B, 0xC2000060, 0x20C20C2A, 0x00000008, 0x00000000, 0x00000044, 
0x00460068, 0x00000064, 0x00A00000, 0xBBBBBBCB, 0xBBCBBCCB, 0x490000C0, 0x9999CCCC, 0xC9CC7977, 
0x777797AC, 0x00000000, 0x00000000, 0xCCAC6703, 0x0073CACB, 0x1200091F, 0x00000020, 0x00000000, 
0x90000A00, 0x6C20820B, 0x06000000, 0x00007600, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xBBCCCCBC, 
0xCC4801C0, 0x9999C9CC, 0xCC8C4444, 0x444464C8, 0xCCCC4A01, 0x204455C8, 0x00000000, 0x00100000, 
0x04000134, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00202002, 0x60C00002, 
0x00009B00, 0x00202292, 0xC9CCAC16, 0xCCCC4800, 0x000040C8, 0xC6060000, 0x00000031, 0xCCCCCCCC, 
0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x12000506, 0xCA000060, 0x02B20070, 0x00000000, 0x00000000, 
0x00000660, 0x00400088, 0x00000004, 0x00000000, 0x57757924, 0x2232B6CC, 0x8A140000, 0x1063CACC, 
0xCCAC3633, 0x3333CCCC, 0x00000000, 0x00000000, 0x8B233202, 0x40B8CCCC, 0x1200091A, 0x00000020, 
0x00000000, 0x04000600, 0x0094C48A, 0x02400000, 0x00208900, 0x00000002, 0x00000000, 0xCCCCACC9, 
0x999999CA, 0xC9CC8C04, 0x0073CACC, 0xCABCCB3B, 0xA333CB9A, 0xAB798789, 0xB8CCCCAB, 0x20230030, 
0x36110000, 0x02000606, 0xA7000040, 0x70888080, 0x00007090, 0x00000000, 0x00000600, 0x00A000AA, 
0x00000000, 0x00060000, 0xCCCCCCCB, 0x999999BB, 0xCCCCCCC8, 0x2086CACC, 0xCBCCCCAC, 0xAAAAAAAA, 
0x002096CB, 0x13000000, 0x13116378, 0xCCACBB7A, 0x02000635, 0x02000020, 0x00000020, 0x00820000, 
0x00000000, 0x00000000, 0x00000000, 0x800C0000, 0x00442000, 0xABCCBCC8, 0x6697BBAC, 0xCB9825C0, 
0xCCCCBBAB, 0xCAAC9999, 0x99999999, 0x42B8CCCC, 0x00000020, 0x00000000, 0x25521200, 0x00800646, 
0x80000040, 0x0080C200, 0x0C009000, 0x00000094, 0x00000000, 0x00000000, 0x00000000, 0x00600000, 
0x9C9999C9, 0xCC9C99CC, 0x010000C0, 0xCCCCCC59, 0xCBABAAAA, 0xAAAAAAAA, 0xAACCCCCC, 0x00004195, 
0x00000000, 0x79472125, 0x02000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00220000, 0xBCB99BC9, 0xCC9999CC, 0x370000C0, 0xCBCCCCBC, 0xC8CC5855, 
0x55555565, 0x3595CBCC, 0x8B656734, 0x685564CA, 0x9A676786, 0x0080050B, 0xC2000060, 0x20C20C2A, 
0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00A00000, 0xBBBBBBCB, 0xBBCBBCCB, 
0x490000C0, 0x9999CCCC, 0xC9CC7977, 0x777797AC, 0x00000000, 0x00000000, 0xCCAC6703, 0x0073CACB, 
0x1200091F, 0x00000020, 0x00000000, 0x90000A00, 0x6C20820B, 0x06000000, 0x00007600, 0x00000000, 
0x00000000, 0xBBBBBBCB, 0xBBCCCCBC, 0xCC4801C0, 0x9999C9CC, 0xCC8C4444, 0x444464C8, 0xCCCC4A01, 
0x204455C8, 0x00000000, 0x00100000, 0x12000506, 0xCA000060, 0x02B20070, 0x00000000, 0x00000000, 
0x00000660, 0x00400088, 0x00000004, 0x00000000, 0x57757924, 0x2232B6CC, 0x8A140000, 0x1063CACC, 
0xCCAC3633, 0x3333CCCC, 0x00000000, 0x00000000, 0x8B233202, 0x40B8CCCC, 0x1200091A, 0x00000020, 
0x00000000, 0x04000600, 0x0094C48A, 0x02400000, 0x00208900, 0x00000002, 0x00000000, 0xCCCCACC9, 
0x999999CA, 0xC9CC8C04, 0x0073CACC, 0xCABCCB3B, 0xA333CB9A, 0xAB798789, 0xB8CCCCAB, 0x20230030, 
0x36110000, 0x04000134, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00202002, 
0x60C00002, 0x00009B00, 0x00202292, 0xC9CCAC16, 0xCCCC4800, 0x000040C8, 0xC6060000, 0x00000031, 
0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x02000606, 0xA7000040, 0x70888080, 0x00007090, 
0x00000000, 0x00000600, 0x00A000AA, 0x00000000, 0x00060000, 0xCCCCCCCB, 0x999999BB, 0xCCCCCCC8, 
0x2086CACC, 0xCBCCCCAC, 0xAAAAAAAA, 0x002096CB, 0x13000000, 0x13116378, 0xCCACBB7A, 0x02000635, 
0x02000020, 0x00000020, 0x00820000, 0x00000000, 0x00000000, 0x00000000, 0x800C0000, 0x00442000, 
0xABCCBCC8, 0x6697BBAC, 0xCB9825C0, 0xCCCCBBAB, 0xCAAC9999, 0x99999999, 0x42B8CCCC, 0x00000020, 
0x00000000, 0x25521200, 0x00800646, 0x80000040, 0x0080C200, 0x0C009000, 0x00000094, 0x00000000, 
0x00000000, 0x00000000, 0x00600000, 0x9C9999C9, 0xCC9C99CC, 0x010000C0, 0xCCCCCC59, 0xCBABAAAA, 
0xAAAAAAAA, 0xAACCCCCC, 0x00004195, 0x00000000, 0x79472125, 0x02000701, 0x0228C64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xBCB99BC9, 0xCC9999CC, 
0x370000C0, 0xCBCCCCBC, 0xC8CC5855, 0x55555565, 0x3595CBCC, 0x8B656734, 0x685564CA, 0x9A676786, 
0x04000134, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00202002, 0x60C00002, 
0x00009B00, 0x00202292, 0xC9CCAC16, 0xCCCC4800, 0x000040C8, 0xC6060000, 0x00000031, 0xCCCCCCCC, 
0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCCC, 0x1200050B, 0xC0000060, 0x00C00C04, 0x00000002, 0x00000000, 
0x00000000, 0x00000002, 0x00000000, 0x00400000, 0xBBBBBBCB, 0xBBCCCCBC, 0x795644C3, 0x99B9CCBB, 
0xCCAC0400, 0x000085CB, 0x54556566, 0x56454444, 0xCCBC8A77, 0xA8A8AAB8, 0x12000918, 0x00000020, 
0x00000000, 0x09200400, 0x000922C4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x8AA7AB47, 
0x2253C8CC, 0xBBBBBBBB, 0xBBBBBBBB, 0xC7060000, 0x00000031, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0x12000736, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xC0020000, 0x00002400, 0xBBBBBBBA, 0x777777A8, 0xBBBBBBCB, 0xBBBBBBBB, 0xC6060000, 0x00000031, 
0x2186CBCC, 0x59011033, 0x1021A6CC, 0xCC8A3612, 0x12000704, 0x00C03A60, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x888888C8, 0x8888CCCC, 0xCC8C77C7, 
0x77777787, 0xC6060000, 0x00000031, 0xBA89CBCC, 0x898888B8, 0xAC9BA8CC, 0xCCCACCCC, 0x1200050B, 
0xC9000060, 0x00C00C0A, 0x00000007, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00400000, 
0x483333C3, 0xC868CACC, 0x78BB47C2, 0x2252C8CC, 0xCCAC0400, 0x000085CB, 0x44444484, 0x44444444, 
0xAA484444, 0x74CACCBB, 0x00000F3C, 0x66000060, 0x00000006, 0x00000000, 0x00000000, 0x00000040, 
0x00000000, 0x00020042, 0x00800000, 0x57232232, 0xBB9BA9CC, 0xCC480000, 0x2096CCCC, 0xCCBC7903, 
0x0900CCCC, 0x00000000, 0x00000000, 0x68240100, 0x62A8CCBC, 0x12000918, 0x00000020, 0x00000000, 
0x09000400, 0x000920C4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCBC99C9, 0x9999A9CC, 
0xBBBBBBCB, 0xBBBBBBBB, 0xCBBBBBBB, 0xBBBBBBBB, 0xCCCCACC9, 0x20000093, 0x00000000, 0x13310100, 
0x04000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00220000, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 0xC6060000, 0x00000031, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x1200050B, 0xC0000060, 0x00C00C04, 0x00000002, 0x00000000, 
0x00000000, 0x00000002, 0x00000000, 0x00400000, 0xBBBBBBCB, 0xBBCCCCBC, 0x795644C3, 0x99B9CCBB, 
0xCCAC0400, 0x000085CB, 0x54556566, 0x56454444, 0xCCBC8A77, 0xA8A8AAB8, 0x12000918, 0x00000020, 
0x00000000, 0x09200400, 0x000922C4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x8AA7AB47, 
0x2253C8CC, 0xBBBBBBBB, 0xBBBBBBBB, 0xC7060000, 0x00000031, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0x12000736, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xC0020000, 0x00002400, 0xBBBBBBBA, 0x777777A8, 0xBBBBBBCB, 0xBBBBBBBB, 0xC6060000, 0x00000031, 
0x2186CBCC, 0x59011033, 0x1021A6CC, 0xCC8A3612, 0x12000704, 0x00C03A60, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x888888C8, 0x8888CCCC, 0xCC8C77C7, 
0x77777787, 0xC6060000, 0x00000031, 0xBA89CBCC, 0x898888B8, 0xAC9BA8CC, 0xCCCACCCC, 0x04000134, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00202002, 0x60C00002, 0x00009B00, 
0x00202292, 0xC9CCAC16, 0xCCCC4800, 0x000040C8, 0xC6060000, 0x00000031, 0xCCCCCCCC, 0xCCCCCCCC, 
0xCCCCCCCC, 0xCCCCCCCC, 0x1200050B, 0xC9000060, 0x00C00C0A, 0x00000007, 0x00000000, 0x00000000, 
0x00000002, 0x00000000, 0x00400000, 0x483333C3, 0xC868CACC, 0x78BB47C2, 0x2252C8CC, 0xCCAC0400, 
0x000085CB, 0x44444484, 0x44444444, 0xAA484444, 0x74CACCBB, 0x00000F3C, 0x66000060, 0x00000006, 
0x00000000, 0x00000000, 0x00000040, 0x00000000, 0x00020042, 0x00800000, 0x57232232, 0xBB9BA9CC, 
0xCC480000, 0x2096CCCC, 0xCCBC7903, 0x0900CCCC, 0x00000000, 0x00000000, 0x68240100, 0x62A8CCBC, 
0x12000918, 0x00000020, 0x00000000, 0x09000400, 0x000920C4, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xCCBC99C9, 0x9999A9CC, 0xBBBBBBCB, 0xBBBBBBBB, 0xCBBBBBBB, 0xBBBBBBBB, 0xCCCCACC9, 
0x20000093, 0x00000000, 0x13310100, 0x04000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xBBBBBBCB, 0xBBBBBBBB, 0xBBBBBBCB, 0xBBBBBBBB, 
0xC6060000, 0x00000031, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x00A50F0B, 0x0A0B0A0A, 
0x0909090C, 0x00090A09, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x22222222, 
0x20202022, 0x00202220, 0x00000000, 0xADADADAD, 0xADADADAD, 0x00ADADAD, 0x00000000, 0xCECECECE, 
0xCECECECE, 0x00CECECE, 0x00000000, 0x0080010B, 0xA2000060, 0x20A20A29, 0x00000008, 0x00000000, 
0x00000044, 0x00460068, 0x00000064, 0x00A00000, 0xCCCCCCCC, 0xBBBBBBBB, 0x999999C9, 0x99999999, 
0xCC9C975C, 0x5555CCCC, 0x222232C6, 0x22222222, 0xBAAC7A35, 0xAC6696CC, 0x0000031F, 0x00000020, 
0x00000000, 0xC0800800, 0x8CA0800A, 0x04000000, 0x0070AA00, 0x00000004, 0x00000000, 0xBBCBBBBB, 
0xCBBCBBCC, 0xAA9999C9, 0x999999C9, 0xCCCC9A09, 0x0000CACC, 0xCCBCCBCC, 0x3186CBCC, 0x00000000, 
0x26000000, 0x12000F36, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xC0000000, 0x00004000, 0xCCCC48B0, 0x000073CB, 0xCCCC4800, 0x000051C9, 0xC8480000, 0x00000040, 
0x0020B6CC, 0x14000000, 0x00003177, 0x5A020000, 0x12000F36, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x00004000, 0xCCCC48B0, 0x000073CB, 0xCCCC4800, 
0x000051C9, 0xC8480000, 0x00000040, 0x0020B6CC, 0x14000000, 0x00003177, 0x5A020000, 0x0C000142, 
0xCC000040, 0x20C20C4C, 0x00000008, 0x00002000, 0x00000040, 0x0022006A, 0x00000022, 0x00800000, 
0xBBBBBBBB, 0xCBBBBBCC, 0x999999C9, 0x9999CCCC, 0xCBCCCC0A, 0xCA009AA9, 0x00000000, 0x00000000, 
0xCC683600, 0x20B6CCCC, 0x0C000717, 0x00000040, 0x00000000, 0x0CC60B00, 0x000000C6, 0x00A00000, 
0x00000000, 0x00000000, 0x00000000, 0x6A3720B0, 0x30B7CCCC, 0x48000000, 0x0084CCCC, 0xC6CCCC0C, 
0x00000031, 0xCBCCCC4A, 0x00000062, 0x00000000, 0x01000000, 0x00000703, 0x00C4AC62, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000000B0, 0xC9CC8C04, 
0x482222C2, 0x2242C8CC, 0xC6060000, 0x00000031, 0x2096988A, 0x00000000, 0x00000000, 0xC9CCAC14, 
0x0C000142, 0xCC000040, 0x20C20C4C, 0x00000008, 0x00002000, 0x00000040, 0x0022009A, 0x00000022, 
0x00800000, 0x000000B0, 0xCCCC4800, 0xCCCC6A02, 0x000062CA, 0xCCBC6902, 0x004080CA, 0x00000000, 
0x00000000, 0xCCAC4701, 0x004196CC, 0x12000B41, 0x00000080, 0x00000000, 0x04020600, 0x006CCCA8, 
0x08000000, 0x0000CC00, 0x00000000, 0x00000000, 0xCCCC99C9, 0x999999CC, 0xCC6845C3, 0x999999C9, 
0xCC999999, 0x0700CCCC, 0xB9BA7AC8, 0x7698CCAC, 0x00000020, 0x14000000, 0x01000701, 0x0228C64C, 
0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0x99AC9CB9, 
0x999999A9, 0x9C6945C3, 0x9999B9BA, 0xC69A8809, 0x00000031, 0x9999CB9B, 0x99999999, 0xCC9B9999, 
0x999999CA, 0x0080010B, 0xA2000060, 0x20A20A29, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 
0x00000064, 0x00A00000, 0xCCCCCCCC, 0xBBBBBBBB, 0x999999C9, 0x99999999, 0xCC9C975C, 0x5555CCCC, 
0x222232C6, 0x22222222, 0xBAAC7A35, 0xAC6696CC, 0x0000031F, 0x00000020, 0x00000000, 0xC0800800, 
0x8CA0800A, 0x04000000, 0x0070AA00, 0x00000004, 0x00000000, 0xBBCBBBBB, 0xCBBCBBCC, 0xAA9999C9, 
0x999999C9, 0xCCCC9A09, 0x0000CACC, 0xCCBCCBCC, 0x3186CBCC, 0x00000000, 0x26000000, 0x0C000142, 
0xCC000040, 0x20C20C4C, 0x00000008, 0x00002000, 0x00000040, 0x0022006A, 0x00000022, 0x00800000, 
0xBBBBBBBB, 0xCBBBBBCC, 0x999999C9, 0x9999CCCC, 0xCACCCC0B, 0x22002295, 0x00000000, 0x00000000, 
0xCC785601, 0x20B5CCCC, 0x0C000717, 0x00000040, 0x00000000, 0x0CC60B00, 0x000000C6, 0x00A00000, 
0x00000000, 0x00000000, 0x00000000, 0xBB3724B0, 0x30B7CCCC, 0x472626C0, 0x0084CCBC, 0xC8CC8B04, 
0x00006243, 0xC9CCCC5A, 0x14000042, 0x00003345, 0x01000000, 0x00000703, 0x00C4AC62, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x222222B2, 0xC9CCBC37, 
0x8B2422C2, 0x2242C8CC, 0xC73722C2, 0x22222232, 0x2296ABCB, 0x22222222, 0x22222222, 0xBACCAC49, 
0x12000F36, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 
0x00004000, 0xCCCC8CBC, 0x000073CB, 0xCCCC9C05, 0x0040C8CA, 0xC8480000, 0x00000040, 0x0020B6CC, 
0x14000000, 0x00003177, 0x5A020000, 0x12000F36, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xC0000000, 0x00004000, 0xCCCCBABC, 0x000052C9, 0xCACCCCC8, 0x225288AC, 
0xC84822C2, 0x22222242, 0x0020B6CC, 0x14000000, 0x00003177, 0x5A020000, 0x0C000142, 0xCC000040, 
0x20C20C4C, 0x00000008, 0x00002000, 0x00000040, 0x0022009A, 0x00000022, 0x00800000, 0x000000B0, 
0xCCCC6A02, 0xCCCC5902, 0x000062CA, 0xCACC7904, 0x00202073, 0x00000000, 0x01000000, 0xCCBC6A44, 
0x002184CB, 0x12000B41, 0x00000080, 0x00000000, 0x04020600, 0x006CCCA8, 0x08000000, 0x0000CC00, 
0x00000000, 0x00000000, 0x9999BAC9, 0x9999B9BB, 0x999845C3, 0x9999B999, 0xCC9948C2, 0x020042C8, 
0xB9BA8AC8, 0x74A8CCAC, 0x14000020, 0x14000010, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0x9A9999B9, 0x999999BB, 0x896745C3, 
0x9999BA9A, 0xC8692202, 0x00000040, 0x786597CC, 0x64260062, 0xAC889A59, 0x4964B8CC, 0x0080010B, 
0xA2000060, 0x20A20A29, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00A00000, 
0xCCCCCCCC, 0xBBBBBBBB, 0x999999C9, 0x99999999, 0xCC9C975C, 0x5555CCCC, 0x222232C6, 0x22222222, 
0xBAAC7A35, 0xAC6696CC, 0x0000031F, 0x00000020, 0x00000000, 0xC0800800, 0x8CA0800A, 0x04000000, 
0x0070AA00, 0x00000004, 0x00000000, 0xBBCBBBBB, 0xCBBCBBCC, 0xAA9999C9, 0x999999C9, 0xCCCC9A09, 
0x0000CACC, 0xCCBCCBCC, 0x3186CBCC, 0x00000000, 0x26000000, 0x12000F36, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x00004000, 0xCCCC48B0, 0x000073CB, 
0xCCCC4800, 0x000051C9, 0xC8480000, 0x00000040, 0x0020B6CC, 0x14000000, 0x00003177, 0x5A020000, 
0x0C000142, 0xCC000040, 0x20C20C4C, 0x00000008, 0x00002000, 0x00000040, 0x0022006A, 0x00000022, 
0x00800000, 0xBBBBBBBB, 0xCBBBBBCC, 0x999999C9, 0x9999CCCC, 0xCBCCCC0A, 0xCA009AA9, 0x00000000, 
0x00000000, 0xCC683600, 0x20B6CCCC, 0x0C000717, 0x00000040, 0x00000000, 0x0CC60B00, 0x000000C6, 
0x00A00000, 0x00000000, 0x00000000, 0x00000000, 0x6A3720B0, 0x30B7CCCC, 0x48000000, 0x0084CCCC, 
0xC6CCCC0C, 0x00000031, 0xCBCCCC4A, 0x00000062, 0x00000000, 0x01000000, 0x00000703, 0x00C4AC62, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000000B0, 
0xC9CC8C04, 0x482222C2, 0x2242C8CC, 0xC6060000, 0x00000031, 0x2096988A, 0x00000000, 0x00000000, 
0xC9CCAC14, 0x12000F36, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xC0000000, 0x00004000, 0xCCCC48B0, 0x000073CB, 0xCCCC4800, 0x000051C9, 0xC8480000, 0x00000040, 
0x0020B6CC, 0x14000000, 0x00003177, 0x5A020000, 0x12000F36, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x00004000, 0xCCCC48B0, 0x000073CB, 0xCCCC4800, 
0x000051C9, 0xC8480000, 0x00000040, 0x0020B6CC, 0x14000000, 0x00003177, 0x5A020000, 0x0C000142, 
0xCC000040, 0x20C20C4C, 0x00000008, 0x00002000, 0x00000040, 0x0022009A, 0x00000022, 0x00800000, 
0x000000B0, 0xCCCC4800, 0xCCCC6A02, 0x000062CA, 0xCCBC6902, 0x004080CA, 0x00000000, 0x00000000, 
0xCCAC4701, 0x004196CC, 0x12000B41, 0x00000080, 0x00000000, 0x04020600, 0x006CCCA8, 0x08000000, 
0x0000CC00, 0x00000000, 0x00000000, 0xCCCC99B9, 0x999999CC, 0xCC6845C3, 0x999999C9, 0xCC999999, 
0x0700CCCC, 0xB9BA7AC8, 0x7698CCAC, 0x00000020, 0x14000000, 0x01000701, 0x0228C64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0x99AC9CB9, 0x999999A9, 
0x9C6945C3, 0x9999B9BA, 0xC69A8809, 0x00000031, 0x9999CB9B, 0x99999999, 0xCC9B9999, 0x999999CA, 
0x0080010B, 0xA2000060, 0x20A20A29, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 
0x00A00000, 0xCCCCCCCC, 0xBBBBBBBB, 0x999999C9, 0x99999999, 0xCC9C975C, 0x5555CCCC, 0x222232C6, 
0x22222222, 0xBAAC7A35, 0xAC6696CC, 0x0000031F, 0x00000020, 0x00000000, 0xC0800800, 0x8CA0800A, 
0x04000000, 0x0070AA00, 0x00000004, 0x00000000, 0xBBCBBBBB, 0xCBBCBBCC, 0xAA9999C9, 0x999999C9, 
0xCCCC9A09, 0x0000CACC, 0xCCBCCBCC, 0x3186CBCC, 0x00000000, 0x26000000, 0x12000F36, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x00004000, 0xCCCCCCBC, 
0x222222A6, 0xCCBC47C2, 0x2284CCCC, 0xC84822C2, 0x22222242, 0x0020B6CC, 0x14000000, 0x00003177, 
0x5A020000, 0x0C000142, 0xCC000040, 0x20C20C4C, 0x00000008, 0x00002000, 0x00000040, 0x0022006A, 
0x00000022, 0x00800000, 0xBBBBBBBB, 0xCBBBBBBB, 0x898C45C3, 0x999999C9, 0xCBCCCCCA, 0x228424A6, 
0x22222232, 0x25222222, 0xCC372222, 0x22B6CCCC, 0x0C000717, 0x00000040, 0x00000000, 0x0CC60B00, 
0x000000C6, 0x00A00000, 0x00000000, 0x00000000, 0x00000000, 0xAB5759B9, 0x2262CACC, 0x787B6AC2, 
0x2284CCCC, 0xC7CAA8C6, 0x00000031, 0xCBCCCC9A, 0x22222252, 0x22225536, 0x23222222, 0x00000703, 
0x00C4AC62, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x351211B1, 0xC9CC8C34, 0x7B2322C2, 0x2242C8CC, 0xC73722C2, 0x22222233, 0x2164768A, 0x11111111, 
0x12111111, 0xA7CCBC37, 0x12000F36, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xC0000000, 0x00004000, 0xCCCC8CBC, 0x222252C9, 0xCCCC8CC4, 0x22637AC9, 0xC84822C2, 
0x22222242, 0x0020B6CC, 0x14000000, 0x00003177, 0x5A020000, 0x0C000142, 0xCC000040, 0x20C20C4C, 
0x00000008, 0x00002000, 0x00000040, 0x0022009A, 0x00000022, 0x00800000, 0x7A7B23B2, 0xCCCC7B63, 
0xCACC6AC2, 0x222252C9, 0xCCBC98CA, 0x222242C8, 0x22222242, 0x22428837, 0xCCBC8923, 0x222295CC, 
0x12000B41, 0x00000080, 0x00000000, 0x04020600, 0x006CCCA8, 0x08000000, 0x0000CC00, 0x00000000, 
0x00000000, 0xCB9999CA, 0x9999999C, 0x89B869C3, 0x9B999B99, 0xCA6922C2, 0x22222262, 0xAABA8AC8, 
0x2295CBBC, 0x22222222, 0x8A482222, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00220000, 0x9A999AB9, 0xBA9999AC, 0x896745C3, 0x9999BB9A, 
0xC76A22C2, 0x22222232, 0x3633A6CB, 0x886A3395, 0x998798CC, 0x7B87769A, 0x0C000142, 0xCC000040, 
0x20C20C4C, 0x00000008, 0x00002000, 0x00000040, 0x0022006A, 0x00000022, 0x00800000, 0xBBBBBBBB, 
0xCBBBBBCC, 0x999999C9, 0x9999CCCC, 0xCACCCC0A, 0x22002262, 0x00000010, 0x00000000, 0xCC582200, 
0x20B5CCCC, 0x0C000717, 0x00000040, 0x00000000, 0x0CC60B00, 0x000000C6, 0x00A00000, 0x00000000, 
0x00000000, 0x00000000, 0x7B4820B0, 0x30B7CCCC, 0xA8260000, 0x40B8CCCC, 0xC9CCAC06, 0x00000051, 
0xCBCCCC5A, 0x13000083, 0x00000072, 0x01000000, 0x00000703, 0x00C4AC62, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x111111B1, 0xC9CCAA26, 0xA83722C2, 
0x2273CBCC, 0xC73722C2, 0x22222232, 0x41A88A99, 0x11111111, 0x11111111, 0x98CCAC38, 0x0C000142, 
0xCC000040, 0x20C20C4C, 0x00000008, 0x00002000, 0x00000040, 0x0022009A, 0x00000022, 0x00800000, 
0x304748B0, 0xCCCC7B03, 0xCCBC3702, 0x000052C9, 0xCCBC7B03, 0x002020A6, 0x00000010, 0x00000000, 
0xCCBC8B03, 0x002152CA, 0x12000B41, 0x00000080, 0x00000000, 0x04020600, 0x006CCCA8, 0x08000000, 
0x0000CC00, 0x00000000, 0x00000000, 0xCC8C69BA, 0x000284CC, 0xCCB87BC3, 0x0062AAB9, 0xCA482202, 
0x02002262, 0xA9BA6AA3, 0x7699CCBC, 0x00000020, 0x12000000, 0x08000704, 0x00C42860, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCBCACCBC, 0x10008477, 
0xACCA7BC3, 0x00849AAC, 0xC8480000, 0x00000040, 0x419725A2, 0x00000000, 0xBB572500, 0x5299CACC, 
0x0C000F46, 0x86000040, 0x0080C82C, 0xCC808600, 0x08000064, 0x00000000, 0x00000000, 0x200A0000, 
0x00662000, 0xCCCCCCBB, 0x222284CC, 0xBCBB6AC2, 0x79A7A7CC, 0xCC9AA707, 0x2242B8CA, 0xA888CBCC, 
0x27422265, 0x12447589, 0xBC7A5722, 0x00800F46, 0x86000040, 0x0080C62C, 0xCC808600, 0x06000084, 
0x00000000, 0x00000000, 0x200A0000, 0x00662000, 0x885489B8, 0xCCCCAC7B, 0x040000C0, 0xCCCCCC8A, 
0xC84873CB, 0x33333343, 0x005165CA, 0x00001024, 0x9A270000, 0x9ACACCBC, 0x08000704, 0x00C42860, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xACA9CCBC, 
0x222242C8, 0xCCCA7BC3, 0x2242A6AC, 0xC84822C2, 0x22222242, 0x73B8CCAC, 0x22222222, 0x8B655535, 
0xABABA9BA, 0x0C000F46, 0x86000040, 0x0080C82C, 0xCC808600, 0x08000064, 0x00000000, 0x00000000, 
0x200A0000, 0x00662000, 0xC9CCACCA, 0x99999B99, 0xBCBB8BC4, 0xBB9999B9, 0xCA8A24C2, 0x22222262, 
0x2222A5CC, 0x23222222, 0x22224279, 0xBC9A8725, 0x00800F46, 0x86000040, 0x0080C62C, 0xCC808600, 
0x06000084, 0x00000000, 0x00000000, 0x200A0000, 0x00662000, 0x999999C9, 0xCCCCAC9B, 0x896745C3, 
0xCCCCCC9A, 0xC99999CB, 0x33339999, 0x005165CA, 0x00001024, 0x9A270000, 0x9ACACCBC, 0x01000701, 
0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 
0x999999B9, 0xAB999999, 0x896745C3, 0x99BA9999, 0xC76A2202, 0x00000031, 0x1141CACC, 0x88481111, 
0x1152CA9C, 0xAC891411, 0x12000F36, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xC0000000, 0x00004000, 0xCCCC48B0, 0x000073CB, 0xCCCC4800, 0x000051C9, 0xC8480000, 
0x00000040, 0x0020B6CC, 0x14000000, 0x00003177, 0x5A020000, 0x12000F36, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x00004000, 0xCCCC48B0, 0x000073CB, 
0xCCCC4800, 0x000051C9, 0xC8480000, 0x00000040, 0x0020B6CC, 0x14000000, 0x00003177, 0x5A020000, 
0x12000F0B, 0xC2000060, 0x20C20C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 
0x00A00000, 0xCCBCBBCB, 0xBBBBCBCC, 0x999999C9, 0x9999A999, 0xCCCCCC4C, 0xA4445486, 0x00000031, 
0x00000000, 0xBC260000, 0x8776CBCC, 0x12000514, 0x00000060, 0x00000000, 0xAAC80A00, 0x00000004, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x57342222, 0x63CBCCBC, 0x04000000, 0x0084CC8C, 
0xC8CCCC4B, 0x44444465, 0xA8CCCCAC, 0x00000030, 0x00000000, 0x49010000, 0x12000F12, 0x82000040, 
0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0x848B5623, 
0xB7CC6B23, 0xCCAC2600, 0x00005189, 0xC8484444, 0x44444465, 0x02001001, 0x00000052, 0xCCCCAC15, 
0x000173A9, 0x04000704, 0x00C42860, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x7B252222, 0xB7BCCBCC, 0xAC26A606, 0x0043C8CC, 0xC8484444, 0x44444465, 
0xCCAC5885, 0xB9ACBCCC, 0x00313175, 0x02008315, 0x1200050B, 0xC0000060, 0x00C00C04, 0x00000002, 
0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00400000, 0x22222222, 0xCC8A2522, 0xCCCCAC06, 
0x003084CC, 0xCCCC8C44, 0x44445486, 0x00000000, 0x00000000, 0xCCAC4812, 0x2046B6CC, 0x12000918, 
0x00000020, 0x00000000, 0x04000400, 0x000220C4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xCC9C99C9, 0x99A9CABC, 0x896745C3, 0x99A9CCCC, 0xC9999999, 0x44449999, 0x83CCCCCC, 0x00000000, 
0x00000000, 0x03000000, 0x04000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00220000, 0xCCCC9AC9, 0x99999BCC, 0x996945C3, 0x99A9CCBC, 0xC8484444, 
0x44444465, 0x99999999, 0x99999999, 0xBC999999, 0x99A9CBCC, 0x12000F0B, 0xC2000060, 0x20C20C2A, 
0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00A00000, 0xCCBCBBCB, 0xBBBBCBCC, 
0x999999C9, 0x9999A999, 0xCCCCCC4C, 0xA4445486, 0x00000031, 0x00000000, 0xBC260000, 0x8776CBCC, 
0x12000514, 0x00000060, 0x00000000, 0xAAC80A00, 0x00000004, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x57342222, 0x63CBCCBC, 0x04000000, 0x0084CC8C, 0xC8CCCC4B, 0x44444465, 0xA8CCCCAC, 
0x00000030, 0x00000000, 0x49010000, 0x12000F12, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 
0x00004400, 0x00000000, 0x00000000, 0x00060000, 0x848B5623, 0xB7CC6B23, 0xCCAC2600, 0x00005189, 
0xC8484444, 0x44444465, 0x02001001, 0x00000052, 0xCCCCAC15, 0x000173A9, 0x04000704, 0x00C42860, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x7B252222, 
0xB7BCCBCC, 0xAC26A606, 0x0043C8CC, 0xC8484444, 0x44444465, 0xCCAC5885, 0xB9ACBCCC, 0x00313175, 
0x02008315, 0x12000F36, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xC0000000, 0x00004000, 0xCCCC48B0, 0x000073CB, 0xCCCC4800, 0x000051C9, 0xC8480000, 0x00000040, 
0x0020B6CC, 0x14000000, 0x00003177, 0x5A020000, 0x12000F36, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x00004000, 0xCCCC48B0, 0x000073CB, 0xCCCC4800, 
0x000051C9, 0xC8480000, 0x00000040, 0x0020B6CC, 0x14000000, 0x00003177, 0x5A020000, 0x1200050B, 
0xC0000060, 0x00C00C04, 0x00000002, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00400000, 
0x22222222, 0xCC8A2522, 0xCCCCAC06, 0x003084CC, 0xCCCC8C44, 0x44445486, 0x00000000, 0x00000000, 
0xCCAC4812, 0x2046B6CC, 0x12000918, 0x00000020, 0x00000000, 0x04000400, 0x000220C4, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xCC9C99C9, 0x99A9CABC, 0x896745C3, 0x99A9CCCC, 0xC9999999, 
0x44449999, 0x83CCCCCC, 0x00000000, 0x00000000, 0x03000000, 0x04000701, 0x0228C64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCCCC9AC9, 0x99999BCC, 
0x996945C3, 0x99A9CCBC, 0xC8484444, 0x44444465, 0x99999999, 0x99999999, 0xBC999999, 0x99A9CBCC, 
0x12000F36, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 
0x00004000, 0xCCCC48B0, 0x000073CB, 0xCCCC4800, 0x000051C9, 0xC8480000, 0x00000040, 0x0020B6CC, 
0x14000000, 0x00003177, 0x5A020000, 0x12000F0B, 0xC2000060, 0x20C20C2A, 0x00000008, 0x00000000, 
0x00000044, 0x00460068, 0x00000064, 0x00A00000, 0xCCBCBBCB, 0xBBBBCBCC, 0x999999C9, 0x9999A999, 
0xCCCCCC4C, 0xA4445486, 0x00000031, 0x00000000, 0xBC260000, 0x8776CBCC, 0x12000514, 0x00000060, 
0x00000000, 0xAAC80A00, 0x00000004, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x57342222, 
0x63CBCCBC, 0x04000000, 0x0084CC8C, 0xC8CCCC4B, 0x44444465, 0xA8CCCCAC, 0x00000030, 0x00000000, 
0x49010000, 0x12000F36, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xC0000000, 0x00004000, 0xCCCC48B0, 0x000073CB, 0xCCCC4800, 0x000051C9, 0xC8480000, 0x00000040, 
0x0020B6CC, 0x14000000, 0x00003177, 0x5A020000, 0x12000F12, 0x82000040, 0x00888000, 0x0000C0A0, 
0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0x848B5623, 0xB7CC6B23, 0xCCAC2600, 
0x00005189, 0xC8484444, 0x44444465, 0x02001001, 0x00000052, 0xCCCCAC15, 0x000173A9, 0x04000704, 
0x00C42860, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x7B252222, 0xB7BCCBCC, 0xAC26A606, 0x0043C8CC, 0xC8484444, 0x44444465, 0xCCAC5885, 0xB9ACBCCC, 
0x00313175, 0x02008315, 0x1200050B, 0xC0000060, 0x00C00C04, 0x00000002, 0x00000000, 0x00000000, 
0x00000002, 0x00000000, 0x00400000, 0x22222222, 0xCC8A2522, 0xCCCCAC06, 0x003084CC, 0xCCCC8C44, 
0x44445486, 0x00000000, 0x00000000, 0xCCAC4812, 0x2046B6CC, 0x12000918, 0x00000020, 0x00000000, 
0x04000400, 0x000220C4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCC9C99C9, 0x99A9CABC, 
0x896745C3, 0x99A9CCCC, 0xC9999999, 0x44449999, 0x83CCCCCC, 0x00000000, 0x00000000, 0x03000000, 
0x04000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 
0x00220000, 0xCCCC9AC9, 0x99999BCC, 0x996945C3, 0x99A9CCBC, 0xC8484444, 0x44444465, 0x99999999, 
0x99999999, 0xBC999999, 0x99A9CBCC, 0x12000F36, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xC0000000, 0x00004000, 0xCCCC48B0, 0x000073CB, 0xCCCC4800, 0x000051C9, 
0xC8480000, 0x00000040, 0x0020B6CC, 0x14000000, 0x00003177, 0x5A020000, 0x12000F0B, 0xC2000060, 
0x20C20C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00A00000, 0xCCBCBBCB, 
0xBBBBCBCC, 0x999999C9, 0x9999A999, 0xCCCCCC4C, 0xA4445486, 0x00000031, 0x00000000, 0xBC260000, 
0x8776CBCC, 0x12000514, 0x00000060, 0x00000000, 0xAAC80A00, 0x00000004, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x57342222, 0x63CBCCBC, 0x04000000, 0x0084CC8C, 0xC8CCCC4B, 0x44444465, 
0xA8CCCCAC, 0x00000030, 0x00000000, 0x49010000, 0x12000F12, 0x82000040, 0x00888000, 0x0000C0A0, 
0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0x848B5623, 0xB7CC6B23, 0xCCAC2600, 
0x00005189, 0xC8484444, 0x44444465, 0x02001001, 0x00000052, 0xCCCCAC15, 0x000173A9, 0x04000704, 
0x00C42860, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x7B252222, 0xB7BCCBCC, 0xAC26A606, 0x0043C8CC, 0xC8484444, 0x44444465, 0xCCAC5885, 0xB9ACBCCC, 
0x00313175, 0x02008315, 0x12000F36, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xC0000000, 0x00004000, 0xCCCC48B0, 0x000073CB, 0xCCCC4800, 0x000051C9, 0xC8480000, 
0x00000040, 0x0020B6CC, 0x14000000, 0x00003177, 0x5A020000, 0x1200050B, 0xC0000060, 0x00C00C04, 
0x00000002, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00400000, 0x22222222, 0xCC8A2522, 
0xCCCCAC06, 0x003084CC, 0xCCCC8C44, 0x44445486, 0x00000000, 0x00000000, 0xCCAC4812, 0x2046B6CC, 
0x12000918, 0x00000020, 0x00000000, 0x04000400, 0x000220C4, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xCC9C99C9, 0x99A9CABC, 0x896745C3, 0x99A9CCCC, 0xC9999999, 0x44449999, 0x83CCCCCC, 
0x00000000, 0x00000000, 0x03000000, 0x04000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCCCC9AC9, 0x99999BCC, 0x996945C3, 0x99A9CCBC, 
0xC8484444, 0x44444465, 0x99999999, 0x99999999, 0xBC999999, 0x99A9CBCC, 0x0080010B, 0xA2000060, 
0x20A20A29, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00A00000, 0xCCCCCCCC, 
0xBBBBBBBB, 0x999999C9, 0x99999999, 0xCC9C975C, 0x5555CCCC, 0x222232C6, 0x22222222, 0xBAAC7A35, 
0xAC6696CC, 0x0000031F, 0x00000020, 0x00000000, 0xC0800800, 0x8CA0800A, 0x04000000, 0x0070AA00, 
0x00000004, 0x00000000, 0xBBCBBBBB, 0xCBBCBBCC, 0xAA9999C9, 0x999999C9, 0xCCCC9A09, 0x0000CACC, 
0xCCBCCBCC, 0x3186CBCC, 0x00000000, 0x26000000, 0x0C000142, 0xCC000040, 0x20C20C4C, 0x00000008, 
0x00002000, 0x00000040, 0x0022006A, 0x00000022, 0x00800000, 0xBBBBBBBB, 0xCBBBBBCC, 0x999999C9, 
0x9999CCCC, 0xCBCCCC0A, 0xCA009AA9, 0x00000000, 0x00000000, 0xCC683600, 0x20B6CCCC, 0x0C000717, 
0x00000040, 0x00000000, 0x0CC60B00, 0x000000C6, 0x00A00000, 0x00000000, 0x00000000, 0x00000000, 
0x6A3720B0, 0x30B7CCCC, 0x48000000, 0x0084CCCC, 0xC6CCCC0C, 0x00000031, 0xCBCCCC4A, 0x00000062, 
0x00000000, 0x01000000, 0x12000F36, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xC0000000, 0x00004000, 0xCCCC48B0, 0x000073CB, 0xCCCC4800, 0x000051C9, 0xC8480000, 
0x00000040, 0x0020B6CC, 0x14000000, 0x00003177, 0x5A020000, 0x12000F36, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x00004000, 0xCCCC48B0, 0x000073CB, 
0xCCCC4800, 0x000051C9, 0xC8480000, 0x00000040, 0x0020B6CC, 0x14000000, 0x00003177, 0x5A020000, 
0x00000703, 0x00C4AC62, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x000000B0, 0xC9CC8C04, 0x482222C2, 0x2242C8CC, 0xC6060000, 0x00000031, 0x7996C8CC, 
0x9998BABA, 0x222274A9, 0xCCCCAC34, 0x0C000142, 0xCC000040, 0x20C20C4C, 0x00000008, 0x00002000, 
0x00000040, 0x0022009A, 0x00000022, 0x00800000, 0x000000B0, 0xCCCC4800, 0xCCCC6A02, 0x000062CA, 
0xCCBC6902, 0x004080CA, 0x00000000, 0x00000000, 0xCCAC4701, 0x004196CC, 0x12000B41, 0x00000080, 
0x00000000, 0x04020600, 0x006CCCA8, 0x08000000, 0x0000CC00, 0x00000000, 0x00000000, 0xCCCC99C9, 
0x999999CC, 0xCC6845C3, 0x999999C9, 0xCC999999, 0x0700CCCC, 0xB9BA7AC8, 0x7698CCAC, 0x00000020, 
0x14000000, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00220000, 0x99AC9CB9, 0x999999A9, 0x9C6945C3, 0x9999B9BA, 0xC69A8809, 0x00000031, 
0x9999CB9B, 0x99999999, 0xCC9B9999, 0x999999CA, 0x12000F0B, 0xC2000060, 0x20C20C2A, 0x00000008, 
0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00A00000, 0xCCBCBBCB, 0xBBBBCBCC, 0x999999C9, 
0x9999A999, 0xCCCCCC4C, 0xA4445486, 0x00000031, 0x00000000, 0xBC260000, 0x8776CBCC, 0x12000514, 
0x00000060, 0x00000000, 0xAAC80A00, 0x00000004, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x57342222, 0x63CBCCBC, 0x04000000, 0x0084CC8C, 0xC8CCCC4B, 0x44444465, 0xA8CCCCAC, 0x00000030, 
0x00000000, 0x49010000, 0x12000F36, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xC0000000, 0x00004000, 0xCCCC48B0, 0x000073CB, 0xCCCC4800, 0x000051C9, 0xC8480000, 
0x00000040, 0x0020B6CC, 0x14000000, 0x00003177, 0x5A020000, 0x12000F36, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x00004000, 0xCCCC48B0, 0x000073CB, 
0xCCCC4800, 0x000051C9, 0xC8480000, 0x00000040, 0x0020B6CC, 0x14000000, 0x00003177, 0x5A020000, 
0x12000F12, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 
0x00060000, 0x848B5623, 0xB7CC6B23, 0xCCAC2600, 0x00005189, 0xC8484444, 0x44444465, 0x02001001, 
0x00000052, 0xCCCCAC15, 0x000173A9, 0x04000704, 0x00C42860, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x7B252222, 0xB7BCCBCC, 0xAC26A606, 0x0043C8CC, 
0xC8484444, 0x44444465, 0xCCAC5885, 0xB9ACBCCC, 0x00313175, 0x02008315, 0x1200050B, 0xC0000060, 
0x00C00C04, 0x00000002, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00400000, 0x22222222, 
0xCC8A2522, 0xCCCCAC06, 0x003084CC, 0xCCCC8C44, 0x44445486, 0x00000000, 0x00000000, 0xCCAC4812, 
0x2046B6CC, 0x12000918, 0x00000020, 0x00000000, 0x04000400, 0x000220C4, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xCC9C99C9, 0x99A9CABC, 0x896745C3, 0x99A9CCCC, 0xC9999999, 0x44449999, 
0x83CCCCCC, 0x00000000, 0x00000000, 0x03000000, 0x04000701, 0x0228C64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCCCC9AC9, 0x99999BCC, 0x996945C3, 
0x99A9CCBC, 0xC8484444, 0x44444465, 0x99999999, 0x99999999, 0xBC999999, 0x99A9CBCC, 0x00AB9F03, 
0x00080808, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00202000, 0x00000000, 0x00000000, 0x00000000, 0x007D7D7D, 0x00000000, 0x00000000, 0x00000000, 
0x00CECECE, 0x00000000, 0x00000000, 0x00000000, 0x12800111, 0x42000060, 0xC64A0A00, 0x0000000C, 
0x00000000, 0x000000A8, 0x00000020, 0x00000008, 0x00000000, 0x999999C9, 0x99999999, 0x999999C9, 
0x99999999, 0xCBCCABC9, 0x33336598, 0x00000000, 0x00000000, 0xCBCC7B02, 0x00000072, 0x0800052D, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x803C0000, 0x00000000, 0x00000000, 
0xCCCCCCBC, 0x000051C9, 0x84CCCC08, 0x00000000, 0xCB8C0400, 0x00000070, 0x00000062, 0x00000000, 
0x00000000, 0xCBCC9C38, 0x12800D17, 0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 0x00A00000, 
0x00000000, 0x00000000, 0x00000000, 0x9C1500B0, 0x003087CC, 0x8C0400C0, 0x0040C8CC, 0xCBBBBBCB, 
0xBBBBBBBB, 0xCCCCAAA8, 0x4086CACC, 0x00000000, 0x15000000, 0x12000704, 0x00C0AC68, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xAC999999, 0x99BACBCC, 
0xCC8C88C8, 0x8888B8CC, 0xCBBBBBBB, 0xBBBBBBBB, 0x8988A8CC, 0x888888A8, 0xCCACAB9B, 0xCCCCCCCC, 
0x12800111, 0x42000060, 0xC64A0A00, 0x0000000C, 0x00000000, 0x000000A8, 0x00000020, 0x00000008, 
0x00000000, 0x480200C0, 0x00C1CCCC, 0x480000C0, 0x40C8CCBC, 0xCBCCABC9, 0x33336598, 0x00000000, 
0x8A460000, 0xCBCCCCAC, 0x00000072, 0x0800052D, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x803C0000, 0x00000000, 0x00000000, 0xCCCCCCBC, 0x000051C9, 0x84CCCC08, 0x00000000, 
0xCACC4A00, 0x00000070, 0x00000062, 0x00000000, 0x00000000, 0xCBCC9C38, 0x12800D17, 0x00000040, 
0x00000000, 0x0CC60A00, 0x000000A6, 0x00A00000, 0x00000000, 0x00000000, 0x00000000, 0x9C9999C9, 
0x999999CC, 0x8C0400C0, 0x0040C8CC, 0xCBBBBBCB, 0xBBBBBBBB, 0xCACCAAC8, 0x20010051, 0x00000000, 
0x15000000, 0x0A000701, 0x0002C14C, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xCCCCABC9, 0x999999A9, 0x9B0900C0, 0x9999C9CC, 0xCBBBBBCB, 0xBBBBBBBB, 
0x999999CA, 0x99999999, 0x99999999, 0xCCCCCC99, 0x12800111, 0x42000060, 0xC64A0A00, 0x0000000C, 
0x00000000, 0x000000A8, 0x00000020, 0x00000008, 0x00000000, 0x999999C9, 0x99999999, 0x999999C9, 
0x99999999, 0xCBCCABC9, 0x33336598, 0x00000000, 0x00000000, 0xCBCC7B02, 0x00000072, 0x0400052D, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x803C0000, 0x00000000, 0x00000000, 
0xCCCCCCBC, 0x000051C9, 0x84CCCC08, 0x00000000, 0xCB8C0400, 0x00000070, 0x000080CA, 0x00000000, 
0x00000000, 0xCCCC9C38, 0x12800D17, 0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 0x00A00000, 
0x00000000, 0x00000000, 0x00000000, 0x9C1500B0, 0x003087CC, 0x8C0400C0, 0x0040C8CC, 0xCBBBBBCB, 
0xBBBBBBBB, 0xCCCCAAA8, 0x4086CACC, 0x00000000, 0x15000000, 0x12000704, 0x00C0AC68, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xAC999999, 0x99BACBCC, 
0xCC8C88C8, 0x8888CACC, 0xCBBBBBBB, 0xBBBBBBBB, 0x8988A8CC, 0x888888A8, 0xCCACAB9B, 0xCCCCCCCC, 
0x12800111, 0x42000060, 0xC64A0A00, 0x0000000C, 0x00000000, 0x000000A8, 0x00000020, 0x00000008, 
0x00000000, 0x480200C0, 0x00C1CCCC, 0x480000C0, 0x40C8CCBC, 0xCBCCABCA, 0x33336598, 0x00000000, 
0x8A460000, 0xCBCCCCAC, 0x00000072, 0x0800052D, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x803C0000, 0x00000000, 0x00000000, 0xCCCCCCBC, 0x000051C9, 0x84CCCC08, 0x00000000, 
0xCACC4A00, 0x00000070, 0x000080CA, 0x00000000, 0x00000000, 0xCCCC9C38, 0x12800D17, 0x00000040, 
0x00000000, 0x0CC60A00, 0x000000A6, 0x00A00000, 0x00000000, 0x00000000, 0x00000000, 0x9C9999C9, 
0x999999CC, 0x8C0400C0, 0x0040C8CC, 0xCBBBBBCB, 0xBBBBBBBB, 0xCACCAAC8, 0x20010051, 0x00000000, 
0x15000000, 0x0A000701, 0x0002C14C, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xCCCCABC9, 0x999999A9, 0x9B0900C0, 0x9999C9CC, 0xCBBBBBCB, 0xBBBBBBBB, 
0x999999CA, 0x99999999, 0x99999999, 0xCCCCCC99, 0x12800111, 0x42000060, 0xC64A0A00, 0x0000000C, 
0x00000000, 0x000000A8, 0x00000020, 0x00000008, 0x00000000, 0x999999C9, 0x99999999, 0x999999C9, 
0x99999999, 0xCBCCABC9, 0x33336598, 0x00000000, 0x00000000, 0xCBCC7B02, 0x00000072, 0x0800052D, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x803C0000, 0x00000000, 0x00000000, 
0xCCCCCCBC, 0x000051C9, 0x84CCCC08, 0x00000000, 0xCB8C0400, 0x00000070, 0x000080CA, 0x00000000, 
0x00000000, 0xCCCC9C38, 0x12800D17, 0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 0x00A00000, 
0x00000000, 0x00000000, 0x00000000, 0x9C1500B0, 0x003087CC, 0x8C0400C0, 0x0040C8CC, 0xCBBBBBCB, 
0xBBBBBBBB, 0xCCCCAAA8, 0x4086CACC, 0x00000000, 0x15000000, 0x12000704, 0x00C0AC68, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xAC999999, 0x99BACBCC, 
0xCC8C88C8, 0x8888CACC, 0xCBBBBBBB, 0xBBBBBBBB, 0x8988A8CC, 0x888888A8, 0xCCACAB9B, 0xCCCCCCCC, 
0x12800111, 0x42000060, 0xC64A0A00, 0x0000000C, 0x00000000, 0x000000A8, 0x00000020, 0x00000008, 
0x00000000, 0x480200C0, 0x00C1CCCC, 0x480000C0, 0x40C8CCBC, 0xCBCCABCA, 0x33336598, 0x00000000, 
0x8A460000, 0xCBCCCCAC, 0x00000072, 0x0400052D, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x803C0000, 0x00000000, 0x00000000, 0xCCCCCCBC, 0x000051C9, 0x84CCCC08, 0x00000000, 
0xCACC4A00, 0x00000070, 0x000080CA, 0x00000000, 0x00000000, 0xCCCC9C38, 0x12800D17, 0x00000040, 
0x00000000, 0x0CC60A00, 0x000000A6, 0x00A00000, 0x00000000, 0x00000000, 0x00000000, 0x9C9999C9, 
0x999999CC, 0x8C0400C0, 0x0040C8CC, 0xCBBBBBCB, 0xBBBBBBBB, 0xCACCAAC8, 0x20010051, 0x00000000, 
0x15000000, 0x0A000701, 0x0002C14C, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xCCCCABC9, 0x999999A9, 0x9B0900C0, 0x9999C9CC, 0xCBBBBBCB, 0xBBBBBBBB, 
0x999999CA, 0x99999999, 0x99999999, 0xCCCCCC99, 0x00BB9F03, 0x00080808, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00202000, 0x00000000, 0x00000000, 
0x00000000, 0x007D7D7D, 0x00000000, 0x00000000, 0x00000000, 0x00CECECE, 0x00000000, 0x00000000, 
0x00000000, 0x12800109, 0xAC000060, 0x00A00A6C, 0x00000000, 0x00000000, 0x0000AA00, 0x00202046, 
0x00000020, 0x00A00000, 0x999999C9, 0x99C9CC9C, 0xCC9999C9, 0x999999CC, 0xCCBCBBCB, 0xBBBBCCCC, 
0x000064A8, 0x00000000, 0x01000000, 0xCCCCCC5A, 0x12000730, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x08000000, 0x000000C3, 0x00800000, 0xA8CCCCBC, 0x00000042, 0xCCCC48C0, 
0x4286CACC, 0xCCAC68C4, 0x0000C8CC, 0x00000000, 0x14000000, 0xCACCCCAC, 0x00004086, 0x12800D1D, 
0x00000060, 0x00000000, 0x02000200, 0x008CACA2, 0xAC000000, 0x00A8A800, 0x00000000, 0x00000000, 
0x060000C0, 0xCCCCCCAC, 0xCC8C46C2, 0x809A99A8, 0xCBBBBBCB, 0xBBBBBBBB, 0xCCCCCCAC, 0x000040C8, 
0x00000000, 0x1A000000, 0x12000704, 0x00C0AC62, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x99999999, 0x99CACCAC, 0xCC8C88C8, 0x888888CC, 0xCBBBBBBB, 
0xBBBBBBBB, 0x8988A889, 0x888888A8, 0xCCACAB9B, 0x8888B8CA, 0x12800109, 0xAC000060, 0x00A00A6C, 
0x00000000, 0x00000000, 0x0000AA00, 0x00202046, 0x00000020, 0x00A00000, 0x040000B0, 0x40C8CC8C, 
0xCC7803C0, 0x001095CC, 0xBCBBBBCB, 0xBBBBCCCC, 0x002064A8, 0x00000000, 0x01000000, 0xCACCCC5A, 
0x12000730, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x08000000, 0x000000C3, 
0x00800000, 0xA8CCCCBC, 0x00000042, 0xCCCC48C0, 0x4286CACC, 0xCCAC68C4, 0x0000C8CC, 0x00000000, 
0x14000000, 0xCACCCCAC, 0x00004086, 0x12800D1D, 0x00000060, 0x00000000, 0x02000200, 0x008CACA2, 
0xAC000000, 0x00A8A800, 0x00000000, 0x00000000, 0x060000C0, 0xCCCCCCAC, 0xCC8C46C2, 0x809A99A8, 
0xCBBBBBCB, 0xBBBBBBBB, 0xCCCCCCCC, 0x000040C8, 0x00000000, 0x1A000000, 0x0A000701, 0x0002C14C, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x999999C9, 
0x99999999, 0x990900C0, 0x99999999, 0xCBBBBBCB, 0xBBBBBBBB, 0x99999999, 0x99999999, 0xCBCCBC99, 
0x99999999, 0x12800109, 0xAC000060, 0x00A00A6C, 0x00000000, 0x00000000, 0x0000AA00, 0x00202046, 
0x00000020, 0x00A00000, 0x999999C9, 0x99C9CC9C, 0xCC9999C9, 0x999999CC, 0xCCBCBBCB, 0xBBBBCCCC, 
0x004086CA, 0x00000000, 0x01000000, 0xCCCCCC5A, 0x12000730, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x08000000, 0x000000C3, 0x00800000, 0xA8CCCCCC, 0x00446666, 0xCCCC48C0, 
0x4286CACC, 0xCCAC68C4, 0x0000C8CC, 0x00000000, 0x14000000, 0xCACCCCAC, 0x00004086, 0x12800D1D, 
0x00000060, 0x00000000, 0x02000200, 0x008CACA2, 0xAC000000, 0x00A8A800, 0x00000000, 0x00000000, 
0x060000C0, 0xCCCCCCAC, 0xCC8C46C2, 0x809A99AA, 0xCBBBBBCB, 0xBBBBBBBB, 0xCCCCCCAC, 0x000040C8, 
0x00000000, 0x1A000000, 0x12000704, 0x00C0AC62, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x99999999, 0x99CACCAC, 0xCC8C88C8, 0x888888CC, 0xCBBBBBBB, 
0xBBBBBBBB, 0x8988A889, 0x888888A8, 0xCCACAB9B, 0x8888B8CA, 0x12800109, 0xAC000060, 0x00A00A6C, 
0x00000000, 0x00000000, 0x0000AA00, 0x00202046, 0x00000020, 0x00A00000, 0x040000B0, 0x40C8CC8C, 
0xCC7803C0, 0x001095CC, 0xCCBBBBCB, 0xBBBBCCCC, 0x002064A8, 0x00000000, 0x01000000, 0xCACCCC5A, 
0x04000730, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x08000000, 0x000000C3, 
0x00800000, 0xA8CCCCCC, 0x00446666, 0xCCCC48C0, 0x4286CACC, 0xCCAC68C4, 0x0000C8CC, 0x00000000, 
0x14000000, 0xCCCCCCAC, 0x2064A8CC, 0x12800D1D, 0x00000060, 0x00000000, 0x02000200, 0x008CACA2, 
0xAC000000, 0x00A8A800, 0x00000000, 0x00000000, 0x060000C0, 0xCCCCCCAC, 0xCC8C46C2, 0x809A99A8, 
0xCBBBBBCB, 0xBBBBBBBB, 0xCCCCCCCC, 0x000040C8, 0x00000000, 0x1A000000, 0x0A000701, 0x0002C14C, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCAC99C9, 
0xA9CCCCCC, 0x990900C0, 0x9999CCAC, 0xCBBBBBCB, 0xBBBBBBBB, 0xA9CCCCCC, 0xCCAC9A99, 0xCCCCCCCC, 
0xCCBCAACC, 0x12800109, 0xAC000060, 0x00A00A6C, 0x00000000, 0x00000000, 0x0000AA00, 0x00202046, 
0x00000020, 0x00A00000, 0x999999C9, 0x99C9CC9C, 0xCC9999C9, 0x999999CC, 0xCCBCBBCB, 0xBBBBCCCC, 
0x004086CA, 0x00000000, 0x01000000, 0xCCCCCC5A, 0x04000730, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x08000000, 0x000000C3, 0x00800000, 0xA8CCCCCC, 0x00446666, 0xCCCC48C0, 
0x4286CACC, 0xCCAC68C4, 0x0000C8CC, 0x00000000, 0x14000000, 0xCACCCCAC, 0x00004086, 0x12800D1D, 
0x00000060, 0x00000000, 0x02000200, 0x008CACA2, 0xAC000000, 0x00A8A800, 0x00000000, 0x00000000, 
0x060000C0, 0xCCCCCCAC, 0xCC8C46C2, 0x809A99AA, 0xCBBBBBCB, 0xBBBBBBBB, 0xCCCCCCAC, 0x000040C8, 
0x00000000, 0x1A000000, 0x12000704, 0x00C0AC62, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x99999999, 0x99CACCAC, 0xCC8C88C8, 0x888888CC, 0xCBBBBBBB, 
0xBBBBBBBB, 0x8988A889, 0x888888A8, 0xCCACAB9B, 0x8888B8CA, 0x12800109, 0xAC000060, 0x00A00A6C, 
0x00000000, 0x00000000, 0x0000AA00, 0x00202046, 0x00000020, 0x00A00000, 0x040000B0, 0x40C8CC8C, 
0xCC7803C0, 0x001095CC, 0xCCBBBBCB, 0xBBBBCCCC, 0x002064A8, 0x00000000, 0x01000000, 0xCACCCC5A, 
0x12000730, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x08000000, 0x000000C3, 
0x00800000, 0xA8CCCCCC, 0x00446666, 0xCCCC48C0, 0x4286CACC, 0xCCAC68C4, 0x0000C8CC, 0x00000000, 
0x14000000, 0xCCCCCCAC, 0x2064A8CC, 0x12800D1D, 0x00000060, 0x00000000, 0x02000200, 0x008CACA2, 
0xAC000000, 0x00A8A800, 0x00000000, 0x00000000, 0x060000C0, 0xCCCCCCAC, 0xCC8C46C2, 0x809A99A8, 
0xCBBBBBCB, 0xBBBBBBBB, 0xCCCCCCCC, 0x000040C8, 0x00000000, 0x1A000000, 0x0A000701, 0x0002C14C, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xCCAC99C9, 
0xA9CCCCCC, 0x990900C0, 0x9999CCAC, 0xCBBBBBCB, 0xBBBBBBBB, 0xA9CCCCCC, 0xCCAC9A99, 0xCCCCCCCC, 
0xCCBCAACC, 0x00A99F01, 0x0000000B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x0000008D, 0x00000000, 
0x00000000, 0x00000000, 0x000000CE, 0x00000000, 0x00000000, 0x00000000, 0x0080051F, 0x00000020, 
0x20000000, 0xA0000800, 0xAC00800A, 0x44000000, 0x00004400, 0x00000000, 0x00000000, 0xBBBBBBCB, 
0xCCCCCCCC, 0x290000C0, 0xCACCCC9C, 0xCACCCC0C, 0x35109399, 0xCCCCBC68, 0x5286CCCC, 0x00222222, 
0x13110000, 0x12000511, 0x75000060, 0xC67A0A22, 0x0000000C, 0x00000000, 0x000000C8, 0x00000035, 
0x00000008, 0x00000000, 0xBBBBBBCB, 0xCBCCCCCC, 0xBCCB6AC2, 0x99B9CCCC, 0x84A8CC0C, 0x47001121, 
0x47121111, 0xBBAABA8B, 0xC9CCCCCC, 0x11216477, 0x0000072D, 0x00000060, 0x00000000, 0x00000000, 
0x00000002, 0x02000000, 0x80000000, 0x00000200, 0x00040000, 0xCC8C88C8, 0x888888C8, 0xCCCC7BC6, 
0x66A8A89C, 0xCCCCCCCC, 0xCCCCCCCC, 0x88888888, 0x88888888, 0xBA898888, 0x888898CC, 0x12000917, 
0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 0x00A00000, 0x00000000, 0x00000000, 0x00000000, 
0xCCCCACC9, 0xCBCCCCCC, 0xCCCCABC9, 0x5287CBCC, 0xC8CCCC7C, 0x77777777, 0xCCCCCCCC, 0x6697CACC, 
0x66666666, 0xAB786666, 0x00800712, 0x82000040, 0x00889000, 0x0000C0A0, 0x00000000, 0x00003400, 
0x00000002, 0x00000002, 0x00060000, 0x9C9999C9, 0xA9CBCCCC, 0xAB6824C0, 0xB8CCCCBB, 0xC6060000, 
0x00000031, 0xCCCCCCCC, 0x000072CB, 0x42330100, 0x9A682411, 0x00000703, 0x00608A60, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 
0xCCCCBBCB, 0x105297BB, 0xC6588A04, 0x00000031, 0xBACCCCCC, 0x32446498, 0x02013124, 0xCC9B5713, 
0x0080031F, 0x00000020, 0x00000000, 0xC0800800, 0x8C00800A, 0x02000000, 0x00004400, 0x00000000, 
0x00000000, 0xCBCCCCCC, 0xBCBBBBCC, 0xC96866C6, 0x99999999, 0xCCACC97C, 0x222297CC, 0xCC78878A, 
0xABAACBCC, 0x77777787, 0x77777777, 0x12000F0E, 0x00000060, 0xCB040700, 0x0000004C, 0x00000000, 
0x0000000A, 0x00000011, 0x00000002, 0x00000000, 0x978A56C3, 0x84CCBC57, 0xCCCC6AC2, 0x0020A6B7, 
0xC88AC95C, 0x55555565, 0x000000A1, 0x4A010000, 0x66B9CCCC, 0x66666676, 0x0A000F17, 0x00000040, 
0x00000000, 0x0CCB0A00, 0x000000A6, 0x00A00000, 0x00000000, 0x00000000, 0x00000000, 0xCACCBCC7, 
0x7597CBBC, 0x8B8856C3, 0x20A6CCCC, 0xC9CCCC6C, 0x66666676, 0x94CBCCBC, 0x00000010, 0x00000001, 
0x9A460200, 0x00000912, 0x20000040, 0x8A252000, 0x0000B0B0, 0x00000000, 0x0000B200, 0x00000000, 
0x00000000, 0x00000000, 0xCCBBCBCB, 0x99CBCCCC, 0xCAAB69C4, 0xC9CCCCCC, 0xC7ABCB3C, 0x33337366, 
0xCCCCCCCC, 0x356354C8, 0xBBCCBC9B, 0xCCCCCCAA, 0x0A000701, 0x0002C44C, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x9A8967C4, 0x6487CABC, 0x480051C1, 
0x1095CCCA, 0xC8585555, 0x55555565, 0xBBCBCCCC, 0x99BABBBB, 0x88869999, 0xBC8A6788, 0x00240804, 
0x0C0A0C0C, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x40404442, 0x00000000, 0x00000000, 0x00000000, 0xBDBDBDBD, 0x00000000, 0x00000000, 0x00000000, 
0xBEBECECE, 0x00000000, 0x00000000, 0x00000000, 0x0080020B, 0xA2000060, 0x20A20A29, 0x00000008, 
0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00200000, 0xBBBBBBCB, 0xBBBBBBBB, 0x090000C0, 
0x99999999, 0xCCCCCC0C, 0x00001063, 0x00000000, 0x02000000, 0xCCAB8946, 0x73BACCCC, 0x00000316, 
0x00000040, 0x00000000, 0xC0C60A00, 0x5C000006, 0x02000000, 0x00000000, 0x00000000, 0x00000004, 
0xBBBBBBCB, 0xBBBBCCBB, 0x090000C0, 0xC9CC9C99, 0xCCCCCC0B, 0x0000A7CC, 0xCCCCCCAC, 0x000052C9, 
0x00000000, 0x14000000, 0x0200013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20A00000, 0x0000CC00, 0x000000B0, 0xCBCCAC68, 0xCCCC4800, 0x000020A6, 0xC8480000, 
0x00000040, 0x0010A5CC, 0x78030000, 0x000010A5, 0xCC9A2700, 0x0A000142, 0xCC000040, 0x20C20C4C, 
0x00000009, 0x00002000, 0x00000040, 0x0022006A, 0x00000022, 0x00800006, 0xBBBBBBCB, 0xCBCCCCBC, 
0x895503C0, 0x99B9CCBC, 0xCC7C2305, 0x0000CBCC, 0x10223296, 0x00000000, 0xCCAB7824, 0x98BACCCC, 
0x10000913, 0x00000060, 0x00000000, 0xAAA50C00, 0x2840428C, 0x67660000, 0x0046AA00, 0x00000064, 
0x00000000, 0x37001083, 0x3186CBCC, 0xAC1500C0, 0x000084CC, 0xCC9C3403, 0x0000C9CC, 0xCC7C2500, 
0x0042A6CC, 0x00120000, 0x00000000, 0x0200013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x000000B0, 0xCBCCAC68, 0xCCCC4800, 0x000020A6, 
0xC8480000, 0x00000040, 0x0010A5CC, 0x78030000, 0x000010A5, 0xCC9A2700, 0x0000013D, 0x88600660, 
0x00200020, 0x00000000, 0x00000000, 0x00005600, 0x00660002, 0x00020000, 0x000A0000, 0xBCB8BC88, 
0x5565B8CC, 0xCC7877C7, 0x7777C8C8, 0xCC9A9999, 0x9999CCCC, 0x88BBCC9C, 0x88888888, 0x88888888, 
0x8888C99C, 0x12000107, 0xAC000060, 0x0060A08A, 0x00000000, 0x00000000, 0x00000000, 0x00000002, 
0x00000000, 0x00AA0000, 0x59020000, 0x3087CACC, 0x48000000, 0x0040C8CC, 0xCCCCBC0B, 0x980060CB, 
0x00004196, 0x00000000, 0xAB681400, 0xCACCCCCC, 0x00000733, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000A00, 0x00000007, 0xBCCBCCBB, 0xBBBBBBBB, 0xCCBCBBCB, 
0xBBBBBBBB, 0xCCCCCCCC, 0xCCCCCCCC, 0xBBBBBBBB, 0xBBBBBBBB, 0xBCBBBBBB, 0xBBBBBCBB, 0x10000943, 
0x00000040, 0x00000000, 0x0CC40C00, 0x000200C6, 0x22400000, 0x00006200, 0x00000000, 0x00000000, 
0xCCCCABC9, 0x9999B9CB, 0x780300C0, 0x0073CBCC, 0xC9CCAC08, 0x00008888, 0xCBCCCCBC, 0x00004385, 
0x00000000, 0xAB250020, 0x00800712, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 
0x00000000, 0x00000000, 0x00060000, 0xBC9999C9, 0x9C9BC99C, 0x686666C6, 0x66C88CCC, 0xCBBBBBBB, 
0xBBBBBBBB, 0xCCCCCCBB, 0x546587BA, 0x66454433, 0xBBBB9A68, 0x01000701, 0x0228C64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00040000, 0xBABBABC9, 0x999999BA, 
0x480000C0, 0x0084CCCC, 0xC6060000, 0x00000031, 0x76B9CCCC, 0x31334365, 0xAC250000, 0xCCCCCCCC, 
0x0100013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 
0x0000CC00, 0x000000B0, 0xCBCCAC68, 0xCCCC4800, 0x000020A6, 0xC8480000, 0x00000040, 0x0010A5CC, 
0x78030000, 0x000010A5, 0xCC9A2700, 0x0080010B, 0xC2000060, 0x20C20C2A, 0x00000008, 0x00000000, 
0x00006044, 0x00460068, 0x00000064, 0x00A00000, 0xCCCCBCCB, 0xBBBBCBBC, 0x393333C3, 0x99999999, 
0xCC9C7777, 0x7777CCCC, 0x33333343, 0x33333333, 0xCCCCBC47, 0x86BACCCC, 0x0000034B, 0x00000060, 
0x00000000, 0x00400000, 0x20C26844, 0x02000000, 0x00808C00, 0x00000000, 0x00000004, 0x9A7856C5, 
0xCBCCBCBB, 0xCCBCAAC6, 0x9999BACB, 0x8C555555, 0x5555CCCC, 0xBC5A0110, 0xB9CCBBCB, 0x00001094, 
0x00000000, 0x0100013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20A00000, 0x0000CC00, 0x000000B0, 0xCBCCAC68, 0xCCCC4800, 0x000020A6, 0xC8480000, 0x00000040, 
0x0010A5CC, 0x78030000, 0x000010A5, 0xCC9A2700, 0x12000107, 0xAC000060, 0x0040A08A, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000040, 0x00AA0000, 0x99BBBBCB, 0xCBCCBC9A, 0xAC2600C0, 
0x9999B9CC, 0xCC272222, 0x2222CCCC, 0x001031B7, 0x00000000, 0x26010000, 0xCCCCCC9B, 0x12000913, 
0x00000060, 0x00000000, 0xAAA50C00, 0x2840428C, 0x67660000, 0x0046AA00, 0x00000064, 0x00000000, 
0xAB463202, 0x5485CACC, 0xAC040000, 0x1030B7CC, 0xCC9C3403, 0x0000C9CC, 0xCCBC2700, 0x0042A6CC, 
0x00000000, 0x00000000, 0x0100013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20A00000, 0x0000CC00, 0x000000B0, 0xCBCCAC68, 0xCCCC4800, 0x000020A6, 0xC8480000, 
0x00000040, 0x0010A5CC, 0x78030000, 0x000010A5, 0xCC9A2700, 0x12000107, 0xAC000060, 0x0060A08A, 
0x00000000, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00AA0000, 0x9A562300, 0x73A8CBCC, 
0x6A020000, 0x0040C8CC, 0xCCCCBC2B, 0x9B227A74, 0x00105296, 0x00000000, 0xAB681400, 0xCACCCCCC, 
0x00000733, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000A00, 
0x00000007, 0xBACCCCAA, 0xAAAAAACA, 0xCCCC9999, 0x99C999C9, 0xCCCCCCCC, 0xCCCCCCCC, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x10000943, 0x00000040, 0x00000000, 0x0CC40C00, 0x000200C6, 
0x22400000, 0x00006200, 0x00000000, 0x00000000, 0xCCCCBCC9, 0x9999AABB, 0x8C0400C0, 0x0073CBCC, 
0xC7BC682B, 0x22229C46, 0xCCCCCCAC, 0x324465A8, 0x00000021, 0xAB250000, 0x00800712, 0x82000040, 
0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0xCCCBCCC9, 
0xC9C99C99, 0xAAAAAACA, 0xAACAACAA, 0xCCCCCCCC, 0xCCCCCCCC, 0xCCCCCCBB, 0x546587BA, 0x66454433, 
0xBBBB9A68, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00040000, 0xB9CBBCC9, 0x9999999B, 0x8C5555C5, 0x5596C8CC, 0xC9797777, 0x77777787, 
0x77B9CCCC, 0x33334365, 0xACAA3633, 0xCCCCCCCC, 0x0100013B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x000000B0, 0xCBCCAC68, 0xCCCC4800, 
0x000020A6, 0xC8480000, 0x00000040, 0x0010A5CC, 0x78030000, 0x000010A5, 0xCC9A2700, 0x0080010B, 
0xC2000060, 0x20C20C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 0x00000064, 0x00A00000, 
0xBBBBBBCB, 0xCBCCCCBC, 0x8C8816C0, 0x9999CBCC, 0xCC6C0000, 0x000050BB, 0x00000000, 0x00000000, 
0xCC6B0200, 0x000061CA, 0x1000091F, 0x00000020, 0x00000000, 0xC4240A00, 0x8C4282BC, 0x02000000, 
0x00008800, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xCBCCCCBC, 0xCC8C04C0, 0x99A9CBCC, 0xCCCC7804, 
0x000094B9, 0xCCAC8977, 0x005276C9, 0x00000001, 0x00004202, 0x00000704, 0x00C26C60, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x8A462200, 0x1065C8CC, 
0xCC8C77C7, 0x77778BCC, 0xC6060000, 0x00000031, 0x88460100, 0x00418688, 0xCC9B4602, 0x0064B9CC, 
0x0100013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 
0x0000CC00, 0x000000B0, 0xCBCCAC68, 0xCCCC4800, 0x000020A6, 0xC8480000, 0x00000040, 0x0010A5CC, 
0x78030000, 0x000010A5, 0xCC9A2700, 0x0C000106, 0xCA000060, 0x22C2AB2A, 0x00008002, 0x00000000, 
0x00006686, 0x004600AA, 0x00000044, 0x00880000, 0xAC472200, 0x2074CACC, 0x69230100, 0x3097CCCC, 
0xCBCCBC09, 0x000042B7, 0x00000000, 0x00000000, 0x7B030000, 0x20A7CCCC, 0x0C000913, 0x00000060, 
0x00000000, 0xAAC20C00, 0x2820228C, 0x66660000, 0x0046AA00, 0x00000064, 0x00000000, 0x79453402, 
0x95CBCCCC, 0x48004400, 0x0040C8CC, 0xCBCCCC0C, 0x000665A8, 0xCCCCCCAC, 0x525554B9, 0x00000000, 
0x25000000, 0x0100013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20A00000, 0x0000CC00, 0x000000B0, 0xCBCCAC68, 0xCCCC4800, 0x000020A6, 0xC8480000, 0x00000040, 
0x0010A5CC, 0x78030000, 0x000010A5, 0xCC9A2700, 0x0E000112, 0x88000040, 0x0088A000, 0x0000C0A0, 
0x00000000, 0x00004400, 0x00000012, 0x00000000, 0x00060000, 0xAA9A99C9, 0x9999CACC, 0x480000C0, 
0x40A7CCCC, 0xC6060000, 0x00000031, 0x002053B7, 0x00000000, 0x6A360000, 0xCCCCCCCC, 0x04000701, 
0x0228C64C, 0x00000000, 0x00600200, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 
0xCCCC9AC9, 0x99BACCCC, 0x240300C0, 0x84CCCC7B, 0xC0000000, 0x00000000, 0xCCCCBCAB, 0xAABBCCCC, 
0x66778898, 0x8A465465, 0x0100013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20A00000, 0x0000CC00, 0x000000B0, 0xCBCCAC68, 0xCCCC4800, 0x000020A6, 0xC8480000, 
0x00000040, 0x0010A5CC, 0x78030000, 0x000010A5, 0xCC9A2700, 0x0080010B, 0xC0000060, 0x00C00C04, 
0x00000002, 0x00000000, 0x00002002, 0x00000002, 0x00000000, 0x00400000, 0xBBBBBBCB, 0xCBCCCCBC, 
0x8C8816C0, 0x9999CBCC, 0xCCBCAAAA, 0xAAAAAACB, 0x00000000, 0x00000000, 0xCC5A0100, 0x000051CA, 
0x12000919, 0x00000040, 0x00000000, 0xC4A60A00, 0x4C2250CC, 0x02000000, 0x00006800, 0x00000000, 
0x00000000, 0xBBBBBBCB, 0xCBCCCCBC, 0xCC8C04C0, 0x99A9CBCC, 0xCCAB7804, 0x004A42A6, 0xCCAC8977, 
0x0063A8CC, 0x00000000, 0x00000000, 0x00000704, 0x00C26C60, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x9B572300, 0x1065C8CC, 0xCC8C77C7, 0x77778BCC, 
0xC6060000, 0x00000031, 0x88460100, 0x00418688, 0xCC9B4602, 0x0064B9CC, 0x0100013B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20A00000, 0x0000CC00, 0x000000B0, 
0xCBCCAC68, 0xCCCC4800, 0x000020A6, 0xC8480000, 0x00000040, 0x0010A5CC, 0x78030000, 0x000010A5, 
0xCC9A2700, 0x0C000106, 0xCA000060, 0x22C2AB2A, 0x00008002, 0x00000000, 0x00006686, 0x004400AA, 
0x00000044, 0x00880000, 0x8A240000, 0x3086CACC, 0x69230100, 0x3097CCCC, 0xCBCCBC09, 0xA80043B7, 
0x00000000, 0x00000000, 0x68350000, 0x94CBCCAB, 0x10000918, 0x00000060, 0x00000000, 0x0B820800, 
0x002622CA, 0x02400000, 0x0046A800, 0x00000064, 0x00000000, 0x68230000, 0x2086CABC, 0xBCBBBBBB, 
0xBBBCBBCC, 0xCB6A0200, 0x00000063, 0xCCAB8926, 0x0080BACC, 0x00000000, 0x00000000, 0x0A000704, 
0x00C26C61, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x9B572300, 0x1065C8CC, 0xA9366503, 0x0073CBCC, 0xC6060000, 0x00000031, 0x5486B9CC, 0x00000042, 
0x25010000, 0xA9CBBC8A, 0x0100013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20A00000, 0x0000CC00, 0x000000B0, 0xCBCCAC68, 0xCCCC4800, 0x000020A6, 0xC8480000, 
0x00000040, 0x0010A5CC, 0x78030000, 0x000010A5, 0xCC9A2700, 0x1200010B, 0x82000040, 0x00880C0A, 
0x0000000A, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0x68230000, 0x2086CABC, 
0xBCBBBBBB, 0xBBBCCBCB, 0xCC9C4600, 0x700740A7, 0x00000000, 0x00000000, 0xCC5A0100, 0x000051CA, 
0x10000918, 0x00000060, 0x00000000, 0x0B820800, 0x002622CA, 0x02400000, 0x0046A800, 0x00000064, 
0x00000000, 0xCCCCBCC9, 0x99ABC9CC, 0xBCBBBBCB, 0xCBBCBBBC, 0xCBABAAAA, 0xAAAAAAAA, 0xCBCCCC9C, 
0x00000072, 0x00000000, 0x38000000, 0x06000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xABAA99C9, 0x999BC9CC, 0x9B3600C0, 0x3087CCCC, 
0xC6060000, 0x00000031, 0x00000000, 0x00000000, 0xCC5A0100, 0x4286BACC, 0x00242A04, 0x0C0A080C, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x4040C4C2, 
0x00000000, 0x00000000, 0x00000000, 0x78787878, 0x00000000, 0x00000000, 0x00000000, 0x57575757, 
0x00000000, 0x00000000, 0x00000000, 0x00800716, 0x00000040, 0x00000000, 0xC0C00800, 0x5C000002, 
0x02000000, 0x00000000, 0x00000000, 0x00000004, 0xBCBCBBCB, 0xBBCBCCCC, 0x390000C0, 0xB9CCCC9B, 
0xCCCC7C03, 0x000097CB, 0xCCCCCCAC, 0x000083CB, 0x00002001, 0x24002112, 0x02000F3B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x000000B0, 
0xCBCCAC68, 0xCCCC6AC2, 0x111173CB, 0xC84811C1, 0x11111141, 0x1131C9CC, 0x11111111, 0x11319825, 
0xBC985A12, 0x06000542, 0xCC000040, 0x22C20C4C, 0x00000009, 0x00002000, 0x00000040, 0x0022006A, 
0x00000052, 0x00800007, 0xBCBBBBCB, 0xBBBBCCCC, 0x891500C0, 0x99B9CCCC, 0xCCBC7905, 0x3210CBCC, 
0x10223275, 0x00000000, 0xCCAB7824, 0x98BACCCC, 0x0C000913, 0x00000060, 0x00000000, 0xAAA50C00, 
0x284442BC, 0x68660000, 0x0046AA00, 0x00000064, 0x00000000, 0x9B684582, 0x30A7CCCC, 0xAC240000, 
0x0084CBCC, 0xCCAC4703, 0x0000CACC, 0xCCCCAB47, 0x0052A8CC, 0x00000000, 0x01010000, 0x00000704, 
0x00C42860, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xCBABA98A, 0x002143B8, 0xBA370000, 0x0062BACC, 0xCB060000, 0x0000CCBB, 0x52A8AACB, 0x00000000, 
0xBC491200, 0x595576C9, 0x0080071F, 0x00000020, 0x00000000, 0x80000000, 0x4B000004, 0x00000000, 
0x00002000, 0x00000000, 0x00000000, 0xCCAB88A8, 0x5398CBCC, 0x7B139505, 0x51B9CC8C, 0xCC797777, 
0x7777C7CC, 0xCCCC7B43, 0x000020A6, 0x00000000, 0x00000000, 0x02000F3B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x000000B0, 0xCBCCAC68, 
0xCCCC4800, 0x000020A6, 0xC8480000, 0x00000040, 0x0010A5CC, 0x78030000, 0x000010A5, 0xCC9A2700, 
0x10000507, 0xAC000060, 0x0070A08A, 0x00000000, 0x00000000, 0x00000050, 0x00000026, 0x00000020, 
0x00B20000, 0x9C573402, 0x62A8CBCC, 0x48020000, 0x63C9CCCC, 0xCCCCCC0C, 0xA900B7CB, 0x555555A7, 
0x22435555, 0xAC683422, 0xCACCCCCC, 0x00000733, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000B00, 0x00000004, 0xBABC68C4, 0x44444475, 0xCCAB36C1, 0x111141C8, 
0x85353333, 0xCC336A43, 0x22224297, 0x22222222, 0xBC7B3422, 0x99CBCCCB, 0x0E000943, 0x00000040, 
0x00000000, 0x0CC40B00, 0x002704C6, 0x22400000, 0x00006200, 0x00000000, 0x00000000, 0xAC9A99C9, 
0xC9CCCCCC, 0x470210C0, 0x97CBCC9C, 0xC9CCCC0C, 0x01128877, 0xCBCCCCCC, 0x22334386, 0x10001011, 
0xAB683510, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 
0x00000000, 0x00060000, 0x9B9999C9, 0xCBBBCCBC, 0x872600C0, 0x95CCCCAC, 0xC6060000, 0x00000031, 
0xCCBCBABA, 0x123198CB, 0x66480100, 0xC99A5554, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00040000, 0xAB9999C9, 0xC9CCCCCC, 0x480210C0, 
0x42B9CCBC, 0xCC9A8809, 0x0000CACC, 0xBABBCCCC, 0x66768799, 0xAC684454, 0xCCCCCCCC, 0x1080091F, 
0x00000020, 0x20000000, 0xA0000800, 0xAC00800A, 0x44000000, 0x00004400, 0x00000000, 0x00000000, 
0xBBBBBBCB, 0xCCCCCCCC, 0x190002C0, 0x99C9CC9C, 0xBBCCCC0C, 0x0000A9CB, 0xCCAC4842, 0x0030B7CC, 
0x02000000, 0x13000032, 0x0100052D, 0x82000060, 0x40840000, 0x00002A80, 0x00000006, 0x02000600, 
0x80A88628, 0x00000000, 0x000A0000, 0xBCBBBA88, 0xCCBBCBCC, 0x78445601, 0x30B7CCCC, 0xCCCC3700, 
0x00006984, 0x20B7CCCC, 0x00000000, 0x00202500, 0x9A260000, 0x04000F3B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x000000B0, 0xCBCCAC68, 
0xCCCC4800, 0x000020A6, 0xC8480000, 0x00000040, 0x0010A5CC, 0x78030000, 0x000010A5, 0xCC9A2700, 
0x12000507, 0x4C000060, 0x00004024, 0x00000000, 0x00000000, 0x00000200, 0x00000000, 0x00000000, 
0x00440000, 0x6A462200, 0xC8CACCCC, 0x04003000, 0x68B9CC8C, 0xCC799805, 0x0000CCCC, 0x000062B9, 
0x00000000, 0x12010000, 0xCCCCCC5A, 0x00000530, 0x00000060, 0x00000000, 0x00000000, 0x00000000, 
0x00000020, 0x00000000, 0x00000062, 0x00800000, 0x88888CCC, 0xBCB8CC8C, 0xCC7877C7, 0x87CC8C9C, 
0xCCCCCCCC, 0xCCCCCCCC, 0x88888888, 0x88888888, 0x89A88988, 0x98CCBCCC, 0x12000943, 0x00000040, 
0x00000000, 0x0CC40B00, 0x002704C6, 0x22300000, 0x00006200, 0x00000000, 0x00000000, 0xAB9A99C9, 
0xC9BCCCCC, 0x150051C1, 0x67C8CC9C, 0xC8AB4900, 0x00006088, 0xCBCCCCCC, 0x00001084, 0x00000000, 
0xAB460200, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 
0x00000000, 0x00060000, 0xBC9999C9, 0xC9ABC9CC, 0x260000C0, 0xC8CCCCAC, 0xCA8A8888, 0x88888898, 
0xBABCCCCC, 0x22433363, 0x34855922, 0xBA7A3653, 0x02000701, 0x0228C64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xAC9999C9, 0xC9BCCCCC, 0x370051C1, 
0x55B7CCBC, 0xC6060000, 0x00000031, 0xA8989AB9, 0x00000052, 0xCC7A4623, 0xBACBCCCC, 0x01000F3B, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 
0x000000B0, 0xCBCCAC68, 0xCCCC4800, 0x000020A6, 0xC8480000, 0x00000040, 0x0010A5CC, 0x78030000, 
0x000010A5, 0xCC9A2700, 0x0080070B, 0xC0000060, 0x00C00A04, 0x00000002, 0x00000000, 0x00002002, 
0x00000002, 0x00000000, 0x00400000, 0xBCBBBBCB, 0xBBBBCCCC, 0x590100C0, 0x99B9CCCC, 0xCCAC5802, 
0x040040B7, 0x00200000, 0x00000000, 0xCCBC2700, 0x215497CC, 0x12000919, 0x00000040, 0x00000000, 
0xC4A60A00, 0x4C2240CC, 0x02000000, 0x00006800, 0x00000000, 0x00000000, 0xBCBBBBCB, 0xBBBBCCCC, 
0xCC8B04C0, 0x99B9CCCC, 0xCCAC6703, 0x000096CB, 0xCCCC8977, 0x000041CA, 0x00000000, 0x01002002, 
0x00000704, 0x00C26C60, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x8A462200, 0x1065C8CC, 0xCC8C77C7, 0x77778BCC, 0xC6060000, 0x00000031, 0x88460100, 
0x00418688, 0xCC9B4602, 0x0064B9CC, 0x01000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x000000B0, 0xCBCCAC68, 0xCCCC4800, 0x000020A6, 
0xC8480000, 0x00000040, 0x0010A5CC, 0x78030000, 0x000010A5, 0xCC9A2700, 0x0C000506, 0xCA000060, 
0x22C2AB2A, 0x00008002, 0x00000000, 0x00006686, 0x004400AA, 0x00000044, 0x00880000, 0xAC572300, 
0x73BBCCCC, 0x48000000, 0x30B7CCCC, 0xCBCCBC0A, 0x540042B7, 0x00000041, 0x00000000, 0x8B160000, 
0x94CBCCCC, 0x10000913, 0x00000060, 0x00000000, 0x0AC20C00, 0x0020228C, 0x02400000, 0x0046A800, 
0x00000064, 0x00000000, 0xCC9B7814, 0xA6CCCCCC, 0x48002100, 0x51C9CCCC, 0xCBCCCC0C, 0x000052A7, 
0xCCCCCC9C, 0x204365B8, 0x00010000, 0x24020000, 0x01000F3B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x000000B0, 0xCBCCAC68, 0xCCCC4800, 
0x000020A6, 0xC8480000, 0x00000040, 0x0010A5CC, 0x78030000, 0x000010A5, 0xCC9A2700, 0x12000512, 
0x88000040, 0x0088A000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 
0xBCBABBCA, 0x99A9CCCC, 0x480201C0, 0x41B8CCBC, 0xCBAB7806, 0x0000CCBC, 0x6597CBCC, 0x00202452, 
0x25121200, 0xCCCCBC68, 0x03000701, 0x0228C64C, 0x00000000, 0x00600200, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00220000, 0x999999C9, 0xA9CBCCBC, 0x240001C0, 0x84CCCC6A, 0xC99C7668, 
0x66666676, 0xCCCCAB9A, 0xBACBCCCC, 0x55657698, 0x68240042, 0x01000F3B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x000000B0, 0xCBCCAC68, 
0xCCCC4800, 0x000020A6, 0xC8480000, 0x00000040, 0x0010A5CC, 0x78030000, 0x000010A5, 0xCC9A2700, 
0x0080070B, 0xC0000060, 0x00C00B04, 0x00000002, 0x00000000, 0x00002002, 0x00000002, 0x00000000, 
0x00400000, 0xBBBBBBCB, 0xBBBBCBCC, 0x590100C0, 0x99BBCCCC, 0xCCCC7977, 0x777797CC, 0x00101094, 
0x00000000, 0xCC490100, 0x1452A6CC, 0x12000919, 0x00000040, 0x00000000, 0xC4A60A00, 0x4C2240CC, 
0x02000000, 0x00006800, 0x00000000, 0x00000000, 0xBBBBBBCB, 0xBBBBBCCC, 0xCC8C04C0, 0x9999CACC, 
0xCC8A6703, 0x0000A0AA, 0xCCAC8987, 0x000051CA, 0x31020000, 0x23420200, 0x00000704, 0x00C26C60, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x8A462200, 
0x1065C8CC, 0xCC8C77C7, 0x77778BCC, 0xC6060000, 0x00000031, 0x88460100, 0x00418688, 0xCC9B4602, 
0x0064B9CC, 0x01000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20C00000, 0x0000CA00, 0x000000B0, 0xCBCCAC68, 0xCCCC4800, 0x000020A6, 0xC8480000, 0x00000040, 
0x0010A5CC, 0x78030000, 0x000010A5, 0xCC9A2700, 0x0C000506, 0xCA000060, 0x22C2AB2A, 0x00008002, 
0x00000000, 0x00006686, 0x004400AA, 0x00000044, 0x00880000, 0xBC887724, 0x6489C9CC, 0x48000000, 
0x3097CCCC, 0xCCCCBC06, 0x00003097, 0x54684473, 0x00000010, 0x69020000, 0xB8CBCCAC, 0x10000918, 
0x00000060, 0x00000000, 0x0B820800, 0x002622CA, 0x02400000, 0x0046A800, 0x00000064, 0x00000000, 
0x79583412, 0x84CCCC8C, 0x59232500, 0x0084CCCC, 0xC66C0000, 0x00000031, 0xCCBC6A64, 0x725499CC, 
0x00000000, 0x55020000, 0x0A000704, 0x00C26C61, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x88A96824, 0xA6CCCC9B, 0x98256503, 0x0073CBCC, 0xC6060000, 
0x00000031, 0xCA9BCACC, 0x00313287, 0x69020000, 0xCCCC8AAA, 0x01000F3B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x000000B0, 0xCBCCAC68, 
0xCCCC4800, 0x000020A6, 0xC8480000, 0x00000040, 0x0010A5CC, 0x78030000, 0x000010A5, 0xCC9A2700, 
0x1200050B, 0x82000040, 0x00880C0A, 0x0000000A, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 
0x00060000, 0x9A866724, 0x9778C9CC, 0xCC8C7504, 0x0040C8CC, 0xCCCC8A04, 0x0000B068, 0x00000000, 
0x00203601, 0xBC8B2411, 0x3153B7CB, 0x10000918, 0x00000060, 0x00000000, 0x0B820800, 0x002622CA, 
0x02400000, 0x0046A800, 0x00000064, 0x00000000, 0xCCCBBCC9, 0x9999A9BC, 0xAA2600C0, 0x3087CBCC, 
0xC6060000, 0x00000031, 0xCACCCCCA, 0x00003152, 0x00000000, 0x68237414, 0x06000701, 0x0228C64C, 
0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCCCCABCA, 
0x99AAC9CC, 0x8A0400C0, 0x3087CCCC, 0xC6060000, 0x00000031, 0x20353298, 0x00004124, 0xCC791300, 
0x8999CBCC, 0x00AE9F02, 0x00000C0C, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00002020, 0x00000000, 0x00000000, 0x00000000, 0x00008D8D, 0x00000000, 
0x00000000, 0x00000000, 0x0000CECE, 0x00000000, 0x00000000, 0x00000000, 0x0600050B, 0xC8000060, 
0x20C20C2A, 0x00000008, 0x00000000, 0x00004044, 0x00460068, 0x00000064, 0x00A00000, 0xBCBBBBCB, 
0xBBBBCCCC, 0x690200C0, 0x99C9CCBC, 0xCBBCBB05, 0x00008BA6, 0x20343374, 0x00002102, 0xCCAC6813, 
0x5675C9CC, 0x0C000913, 0x00000060, 0x00000000, 0xAAA50C00, 0x2B60228C, 0x67660000, 0x0046AA00, 
0x00000064, 0x00000000, 0x261110C0, 0xB7CCCC9C, 0xCC8826C0, 0x2096B9CC, 0xCC8A8807, 0x0506CBCC, 
0xCC8B4555, 0x2362C9CC, 0x00000020, 0x02000100, 0x0000053D, 0x88803860, 0x00200020, 0x00000000, 
0x00000000, 0x00005600, 0x00660002, 0x00020000, 0x000A0000, 0xBB9A4793, 0xC8CCCCCC, 0xCC9C5901, 
0x0051C9CC, 0xCCBCCA9A, 0x9999CCCC, 0x63CACCCC, 0x62433247, 0x9C472500, 0x7AA7CCCC, 0x12000508, 
0x6C000060, 0x000040C8, 0x00000000, 0x00000000, 0x00000200, 0x00000000, 0x00000000, 0x00220000, 
0xCC6A5524, 0x4198CBCC, 0xBC370100, 0x0084CCCC, 0xCC48950B, 0xCC00CCCC, 0x002085CB, 0x00000000, 
0xBC680200, 0xCCBCCCCC, 0x00000733, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00020000, 0x00000C20, 0x00000000, 0xCBBC6883, 0x00000041, 0xCCCC8B04, 0x000084CC, 0xC6161111, 
0xCC111132, 0x00000041, 0x01000000, 0xCCCCBC48, 0xA8CBCCBC, 0x0C000726, 0x00000080, 0x00000000, 
0x40200600, 0x04AC6886, 0xCA000000, 0x00A88406, 0x00000000, 0x00000000, 0xCCCCCCCA, 0x5386BA9B, 
0xC8CCACC6, 0x30B7CBAB, 0xCCCCBB0A, 0xCC0086B9, 0x123074C9, 0xA98A2520, 0x57334464, 0xCCCCBC8B, 
0x0C000943, 0x00000040, 0x00000000, 0x0CC40C00, 0x000200C6, 0x22300000, 0x00006200, 0x00000000, 
0x00000000, 0xCCCCACC9, 0xCBCCCCCC, 0xCCCCABC9, 0x52C8CCCC, 0xC8CCCC7C, 0x77777777, 0xCCCCCCCC, 
0x6697CACC, 0x66666666, 0xAB786666, 0x00000703, 0x00608A60, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCBBCB, 0x105297BB, 
0xC6588A04, 0x00000031, 0xBACCCCCC, 0x32446498, 0x23013124, 0xCCCC8B46, 0x12000F0E, 0x00000060, 
0xCC040700, 0x0000004C, 0x00000000, 0x0000000A, 0x00000011, 0x00000002, 0x00000000, 0x978A56C3, 
0xAACCBC57, 0xCCCC6AC2, 0x0020A6B7, 0xC88AC95C, 0x55555565, 0x000000A1, 0x4A010000, 0x66B9CCCC, 
0x66666676, 0x0A000F17, 0x00000040, 0x00000000, 0x0CCC0A00, 0x000000A6, 0x00A00000, 0x00000000, 
0x00000000, 0x00000000, 0xCCCCBCC7, 0x7597CBCC, 0xAB8956C3, 0x20A6CCCC, 0xC9CCCC6C, 0x66666676, 
0x94CBCCBC, 0x00000010, 0x00000001, 0x9A460200, 0x00000912, 0x20000040, 0x8A252000, 0x0000B0B0, 
0x00000000, 0x0000B200, 0x00000000, 0x00000000, 0x00000000, 0xCCBBCBCB, 0x99CBCCCC, 0xCAAB69C4, 
0xC9CCCCCC, 0xC7ABCB3C, 0x33337366, 0xCCCCCCCC, 0x356354C8, 0xBBCCBC9B, 0xCCCCCCAA, 0x0A000701, 
0x0002C44C, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x9A8967C4, 0x6487CABC, 0x480051C1, 0x1095CCCA, 0xC8585555, 0x55555565, 0xBBCBCCCC, 0x99BABBBB, 
0x88869999, 0xBC8A6788, 0x0600050B, 0xC8000060, 0x20C20C2A, 0x00000008, 0x00000000, 0x00004044, 
0x00460068, 0x00000064, 0x00A00000, 0xBCBBBBCB, 0xBBBBCCCC, 0x690200C0, 0x99C9CCBC, 0xCBBCBB05, 
0x00008BA6, 0x20343374, 0x00002102, 0xCCAC6813, 0x5675C9CC, 0x0C000913, 0x00000060, 0x00000000, 
0xAAA50C00, 0x2B60228C, 0x67660000, 0x0046AA00, 0x00000064, 0x00000000, 0x261110C0, 0xB7CCCC9C, 
0xCC8826C0, 0x2096B9CC, 0xCC8A8807, 0x0506CBCC, 0xCC8B4555, 0x2362C9CC, 0x00000020, 0x02000100, 
0x12000508, 0x6C000060, 0x000040C8, 0x00000000, 0x00000000, 0x00000200, 0x00000000, 0x00000000, 
0x00220000, 0xCC6A5524, 0x4198CBCC, 0xBC370100, 0x0084CCCC, 0xCC48950B, 0xCC00CCCC, 0x002085CB, 
0x00000000, 0xBC680200, 0xCCBCCCCC, 0x00000733, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00020000, 0x00000C20, 0x00000000, 0xCBBC6883, 0x00000041, 0xCCCC8B04, 0x000084CC, 
0xC6161111, 0xCC111132, 0x00000041, 0x01000000, 0xCCCCBC48, 0xA8CBCCBC, 0x0C000726, 0x00000080, 
0x00000000, 0x40200600, 0x04AC6886, 0xCA000000, 0x00A88406, 0x00000000, 0x00000000, 0xCCCCCCCA, 
0x5386BA9B, 0xC8CCACC6, 0x30B7CBAB, 0xCCCCBB0A, 0xCC0086B9, 0x123074C9, 0xA98A2520, 0x57334464, 
0xCCCCBC8B, 0x0C000943, 0x00000040, 0x00000000, 0x0CC40C00, 0x000200C6, 0x22300000, 0x00006200, 
0x00000000, 0x00000000, 0xCCCCACC9, 0xCBCCCCCC, 0xCCCCABC9, 0x52C8CCCC, 0xC8CCCC7C, 0x77777777, 
0xCCCCCCCC, 0x6697CACC, 0x66666666, 0xAB786666, 0x00000703, 0x00608A60, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xCCCCBBCB, 
0x105297BB, 0xC6588A04, 0x00000031, 0xBACCCCCC, 0x32446498, 0x23013124, 0xCCCC8B46, 0x0080031F, 
0x00000020, 0x00000000, 0xC0800800, 0x8C00800A, 0x02000000, 0x00004400, 0x00000000, 0x00000000, 
0xCBCCCCCC, 0xBCBBBBCC, 0xC96866C6, 0x99999999, 0xCCACC97C, 0x222297CC, 0xCC78878A, 0xABAACBCC, 
0x77777787, 0x77777777, 0x12000F0E, 0x00000060, 0xCC040700, 0x0000004C, 0x00000000, 0x0000000A, 
0x00000011, 0x00000002, 0x00000000, 0x978A56C3, 0xAACCBC57, 0xCCCC6AC2, 0x0020A6B7, 0xC88AC95C, 
0x55555565, 0x000000A1, 0x4A010000, 0x66B9CCCC, 0x66666676, 0x0A000F17, 0x00000040, 0x00000000, 
0x0CCC0A00, 0x000000A6, 0x00A00000, 0x00000000, 0x00000000, 0x00000000, 0xCCCCBCC7, 0x7597CBCC, 
0xAB8956C3, 0x20A6CCCC, 0xC9CCCC6C, 0x66666676, 0x94CBCCBC, 0x00000010, 0x00000001, 0x9A460200, 
0x00000912, 0x20000040, 0x8A252000, 0x0000B0B0, 0x00000000, 0x0000B200, 0x00000000, 0x00000000, 
0x00000000, 0xCCBBCBCB, 0x99CBCCCC, 0xCAAB69C4, 0xC9CCCCCC, 0xC7ABCB3C, 0x33337366, 0xCCCCCCCC, 
0x356354C8, 0xBBCCBC9B, 0xCCCCCCAA, 0x0A000701, 0x0002C44C, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x9A8967C4, 0x6487CABC, 0x480051C1, 0x1095CCCA, 
0xC8585555, 0x55555565, 0xBBCBCCCC, 0x99BABBBB, 0x88869999, 0xBC8A6788, 0x0024080C, 0x0A0A090C, 
0x0B0B0909, 0x090B0A0B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x46464047, 
0x42424440, 0x40424040, 0x00000000, 0xBDBDBDBD, 0xBDBDBDBD, 0xBDBDBDBD, 0x00000000, 0xAEAE8EAE, 
0x8E8E8E8E, 0x8E8E8E8E, 0x00000000, 0x0200013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 0xCCCC8C99, 0xCCCC48C2, 0x222242C8, 
0xC8480000, 0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 0x02000F3B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CC00, 0x999999B9, 
0xCCCC8C99, 0xCC8C0400, 0x000084CC, 0xC8480000, 0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 
0xCCCCCCCC, 0x0080010B, 0xC2000060, 0x22C20C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 
0x00000064, 0x00A00000, 0xCCCCCCCC, 0x99999ACB, 0x999999C9, 0x99CBCC99, 0xCCCCCC0C, 0x000090BA, 
0x00002096, 0x39000000, 0xCCCCCCBB, 0x99ABCCCC, 0x0A000F31, 0x40000060, 0x00400000, 0x60460000, 
0x00000000, 0x00800080, 0x0000B002, 0x000000AC, 0x00400000, 0xCCABCABB, 0xBC9CCBCC, 0x999999C9, 
0xCCCCCBAA, 0xC8CCCB0C, 0x37000340, 0x9999CBAC, 0xCC8987A8, 0x00002086, 0x14000000, 0x04000F0E, 
0x00000060, 0xC80A0000, 0x000000AC, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x222222B2, 0xCC8C3437, 0xCCCCCCC8, 0x22222284, 0x1195C8CC, 0x11111111, 0x22222222, 0x24222222, 
0x87CBCC9C, 0x22222232, 0x0000012D, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x000A0000, 0x00000000, 0x00000000, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0x00000514, 0x00000060, 0x00000000, 
0x44C20400, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xB9CAAC8A, 0x74885742, 
0xCCCC7BC3, 0x0063C8CB, 0xC6CCCC0C, 0x00000031, 0xA5CCCCAC, 0x35230010, 0x54676586, 0x14000052, 
0x0C000530, 0x80000060, 0x44820000, 0x00000000, 0x00000000, 0x00400044, 0x08008228, 0x000000CA, 
0x00400000, 0x594800B0, 0xCCBCB888, 0xCC9C5901, 0x0084CCCC, 0x48A6B90C, 0x00000040, 0x00001013, 
0xCC5A2313, 0x72C9CCCC, 0x00000000, 0x0000082D, 0x00000060, 0x00000000, 0x00000000, 0x00000000, 
0x06000000, 0x006A0000, 0x00000000, 0x00000000, 0xBBCCCC9C, 0x000040C8, 0x62CACCC8, 0x00000000, 
0xC8CCCC58, 0x55555565, 0x006255B7, 0x00000000, 0x5A010000, 0xCCCCCCCC, 0x0E000917, 0x00000040, 
0x00000000, 0x0CC60A00, 0x000000A6, 0x00A00000, 0x00000000, 0x00000000, 0x00000000, 0xAC9B99C9, 
0xA9A9C9CC, 0x7A0300C0, 0x3784CCCC, 0xC99ACC9C, 0x00009999, 0x93CBCBCC, 0x00000000, 0x00000000, 
0x27000000, 0x00000912, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000040, 
0x00000002, 0x00060000, 0xBC9999C9, 0xC999CBCC, 0xBCCC68C6, 0xBACCCC9C, 0xCACCCC9C, 0x88889999, 
0x88A889C8, 0x88888888, 0xCCCC9C88, 0x888888C9, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0x999A99B9, 0xA9C9CAAC, 0x990900C0, 
0x9999CCBC, 0xC8480000, 0x00000040, 0x9999B9CC, 0x99999999, 0x99999999, 0xCC9A9999, 0x0200013B, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 
0x999999B9, 0xCCCC8C99, 0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 
0xCCCCCCBC, 0xCCCCCCCC, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20C00000, 0x0000CC00, 0x999999B9, 0xCCCC8C99, 0xCC8C0400, 0x000084CC, 0xC8480000, 
0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 0x0E000F3A, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0x480000B0, 0x0053C9CC, 
0xCC590100, 0x000084CC, 0xC8480000, 0x00000040, 0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 
0x0E000F3A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 
0x0000C000, 0xCCBC48B0, 0x00003095, 0xCCBC3700, 0x004096CC, 0xC8480000, 0x00000040, 0x0141CACC, 
0x38000020, 0x00005398, 0x9C460000, 0x1200010B, 0xC0000060, 0x00C00C04, 0x00000002, 0x00000000, 
0x00000000, 0x00000002, 0x00000000, 0x00400000, 0x999999B9, 0x99A9CAAC, 0x999999C9, 0x9999C9CC, 
0xCCCCCC0C, 0x00003087, 0x00000000, 0x00000000, 0xCC8C0300, 0x0064A8CC, 0x0000092D, 0x82000060, 
0x40840000, 0x00002A80, 0x00000006, 0x02000600, 0x80AC8628, 0x00000000, 0x00040000, 0x40C8CCBC, 
0x00000000, 0xCACC8C04, 0x00000060, 0xCCCCCC08, 0x000097BA, 0xCACCCCCC, 0x00000086, 0x00000000, 
0xCCAC9B38, 0x10000946, 0x88000040, 0x0080C62C, 0xCC808600, 0x06000064, 0x00000000, 0x00000000, 
0x200A0000, 0x00662000, 0xCCCC9CC9, 0x9999CBCC, 0x470200C0, 0x42C8CCBC, 0xC9CC9999, 0x00009999, 
0xCCCCCCCC, 0x312264A8, 0x24000000, 0xCCCCAC68, 0x00800912, 0x82000040, 0x00888000, 0x0800C0A0, 
0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0xCCABCCC9, 0xCC9CCCCC, 0x000000C0, 
0xCCCC4800, 0xC9999999, 0x00009999, 0xCBCCBCCC, 0x11114198, 0x47111111, 0x879A4842, 0x03000701, 
0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 
0xCCCC9AB9, 0xCCCCCCCC, 0x990900C0, 0xA9CBCCBC, 0xC8480000, 0x00000040, 0x99A9CCCC, 0x99999999, 
0xCC9B9999, 0xAB99CACC, 0x0080031F, 0x00000020, 0x00000000, 0xC0800800, 0x8C00800A, 0x02000000, 
0x00004400, 0x00000000, 0x00000000, 0xCCCCBCC9, 0xCABCBBBB, 0x999999C9, 0x99CBCC99, 0xC6CCCC0C, 
0x97004633, 0xCCCCCCBC, 0x6597CCCC, 0x00000052, 0x68020000, 0x0200013B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 0xCCCC8C99, 
0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 
0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 
0x0000CC00, 0x999999B9, 0xCCCC8C99, 0xCC8C0400, 0x000084CC, 0xC8480000, 0x00000040, 0xBBBBCCCC, 
0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 0x12000111, 0x42000060, 0xC64A0A00, 0x0000000C, 0x00000000, 
0x000000A8, 0x00000020, 0x00000008, 0x00000000, 0xB99999B9, 0x99ABCCCC, 0x99999AC9, 0x9999CCCC, 
0xC9CCCB0C, 0x590140A8, 0x03000000, 0x68020062, 0xCC9BB9BB, 0x625553C9, 0x0000012D, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000A0000, 0x00000000, 0x00000000, 0xBBBBBBBB, 
0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 0xBBBBBBBB, 
0xBBBBBBBB, 0x00000530, 0x80000060, 0x00800000, 0x00000000, 0x00000000, 0x00400040, 0x08008228, 
0x000000CA, 0x00400000, 0xCBBCAA88, 0xCCBCBA8A, 0xCBCBBBCB, 0xBBBBBBBB, 0xB5AACB0C, 0x46400021, 
0x00000000, 0x78030000, 0xCACCCCBC, 0x00000072, 0x0C00072F, 0x00000040, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x0C000000, 0x00000060, 0x00000000, 0xBCCCCCAC, 0x000020B8, 0xC8CC8CC8, 
0x88888888, 0xCCCCCCCC, 0xCCCCCCCC, 0x888888C8, 0x88888888, 0xCCCCCC89, 0x888899BB, 0x10000917, 
0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 0x00A00000, 0x00000000, 0x00000000, 0x00000000, 
0xCCBC99CB, 0x99AACCAC, 0xCC9C15C0, 0x8C64BACC, 0xC99999CA, 0x31379999, 0x774446C6, 0xCCCC7986, 
0x304842B9, 0x67370000, 0x00800912, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 
0x00000000, 0x00000000, 0x00060000, 0xCCABCCC9, 0xCC9CCCCC, 0x333333C3, 0xCCCC6A33, 0xC9999999, 
0x33339999, 0xC9CCCCCC, 0x22113187, 0x67461111, 0xCC6A7655, 0x01000701, 0x0228C64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0x9C9B99B9, 0xCACCACAB, 
0xBA3900C0, 0x99C9CCCC, 0xC8480000, 0x00000040, 0x99B9CCCC, 0x99999999, 0x99999999, 0x9A999999, 
0x0080031F, 0x00000020, 0x00000000, 0xC0800800, 0x8C00800A, 0x02000000, 0x00004400, 0x00000000, 
0x00000000, 0xCBCACCB9, 0xC99C999C, 0x999999C9, 0x99CCCCCC, 0xC8CCCC0C, 0x48000040, 0xBC67A79B, 
0x0041B6CC, 0x00000000, 0x56020000, 0x0200013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 0xCCCC8C99, 0xCCCC48C2, 0x222242C8, 
0xC8480000, 0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 0x02000F3B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CC00, 0x999999B9, 
0xCCCC8C99, 0xCC8C0400, 0x000084CC, 0xC8480000, 0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 
0xCCCCCCCC, 0x0A000111, 0x42000060, 0xC64A0A00, 0x0000000C, 0x00000000, 0x000000A8, 0x00000020, 
0x00000008, 0x00000000, 0x9C9999B9, 0xC9CCCCCC, 0xCA9B99C9, 0x9999CCCC, 0x95CCCB0C, 0x30001010, 
0x00000000, 0x35440120, 0xCCCCCCAC, 0x000051A7, 0x0000012D, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x000A0000, 0x00000000, 0x00000000, 0x8CC8CCBC, 0x333343C8, 0x8CCCCC08, 
0x0030B787, 0xC8CBCC08, 0x0000737B, 0x111184B9, 0x11111111, 0x77481111, 0xCACCAA98, 0x00000514, 
0x00000060, 0x00000000, 0x44C20400, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xCACCCCBB, 0xA6263284, 0xCCCC6802, 0x3037A6CC, 0xC8CCCC0C, 0xCAAC0040, 0x75CBCCAC, 0x75AA7787, 
0xCC8A4622, 0x884664C8, 0x06000530, 0x80000060, 0x44820000, 0x00000000, 0x00000000, 0x00400044, 
0x08008268, 0x000000CA, 0x00400000, 0xC88C04B0, 0xCCCC78CB, 0xCCACBA07, 0x0040C8CC, 0xB797C80C, 
0x00000030, 0x00000000, 0xBC270000, 0x9ACBCBBC, 0x00004185, 0x0A000917, 0x00000040, 0x00000000, 
0x0CC60A00, 0x000000A6, 0x00A00000, 0x00000000, 0x00000000, 0x00000000, 0xCCA99CC9, 0x9999CBCC, 
0x9C5504C0, 0x2396CCBC, 0xCACC9B99, 0x00009999, 0x94CBCCCC, 0x76685522, 0x00000020, 0x25000000, 
0x00800712, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 
0x00060000, 0xC99B99C9, 0xC9BC9CC9, 0x37847BC3, 0x628ACCBC, 0xC9999999, 0x00009999, 0xAA8B67C7, 
0x7A974565, 0x877A23A5, 0xBC8B78A8, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00220000, 0x999999B9, 0x9CB9CC9C, 0x990900C0, 0x99B9CCCC, 
0xC8480000, 0x00000040, 0x99B9CCCC, 0x99999999, 0x99999999, 0xBCBB9A99, 0x0080031F, 0x00000020, 
0x00000000, 0xA0000000, 0x6A004004, 0x02000000, 0x00000000, 0x00000000, 0x00000000, 0xCCCBCCCC, 
0xBBBBBBBB, 0xAAAAAACA, 0xAAAAAAAA, 0xCCBBBBBB, 0xBBBBBBBB, 0xAAAACCAA, 0xAAAAAAAA, 0xAAAAAACA, 
0xAAAAAAAA, 0x0200013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20C00000, 0x0000CA00, 0x999999B9, 0xCCCC8C99, 0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 
0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CC00, 0x999999B9, 0xCCCC8C99, 0xCC8C0400, 
0x000084CC, 0xC8480000, 0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 0x1000063A, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 
0xCACCBC98, 0x97879976, 0xCCC9CCC8, 0x444454B9, 0xC7373333, 0x33333354, 0x0163CBCC, 0x49011033, 
0x0011A5CC, 0x8B230000, 0x0600083A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xC0000000, 0x0000C000, 0xA9AABABC, 0x77777777, 0xCBBBBBCB, 0xBBBBBBBC, 0xCBBBBBBB, 
0xBBBBBBBB, 0x0163CBCC, 0x49011033, 0x0011A5CC, 0x8B230000, 0x0A000211, 0x00000060, 0xC0040400, 
0x0000000C, 0x00000000, 0x00000042, 0x00000000, 0x00000002, 0x00000000, 0x999999C9, 0xACCC9C99, 
0xBC9999C9, 0x9999A9CC, 0xC7CCCB3C, 0x33333354, 0x11111121, 0x8B251111, 0x7787CACC, 0x11415775, 
0x0000012D, 0x20000060, 0x00200000, 0x00000420, 0x00000000, 0x00000000, 0x204C2002, 0x00000000, 
0x00000000, 0x99B9CCCC, 0x9C9999AA, 0xCCCCCCC8, 0x77777787, 0xCBCCCCAC, 0xAAAAAAAA, 0x666676CB, 
0x66666666, 0x68666666, 0xCC88ABBB, 0x12000943, 0x00000040, 0x00000000, 0x0CC40C00, 0x000200C6, 
0x22000000, 0x00006200, 0x00000000, 0x00000000, 0xCCCCACC9, 0x9999B9CA, 0xCC6AC8C8, 0x8665CACC, 
0xCCCC9999, 0x333399B9, 0xBACCBCCC, 0x568665C9, 0x11111194, 0x79241111, 0x03000701, 0x0228C64C, 
0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCCCCABC9, 
0xB99999A9, 0xCC6A22C2, 0xB9BBCCCC, 0xC7373333, 0x33333354, 0xA999CBCC, 0x99999999, 0x9C999999, 
0xBB9999CC, 0x0200013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20C00000, 0x0000CA00, 0x999999B9, 0xCCCC8C99, 0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 
0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CC00, 0x999999B9, 0xCCCC8C99, 0xCC8C0400, 
0x000084CC, 0xC8480000, 0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 0x0000013A, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xA0000000, 0x0000A800, 
0x36223294, 0x5586CAAC, 0xCC4822C2, 0x222284CC, 0xC7272222, 0x22222243, 0x1173CBCC, 0x49011033, 
0x1031A7CC, 0xCC8A3612, 0x0A00010B, 0xC2000060, 0x20C20C2A, 0x00000008, 0x00000000, 0x00000044, 
0x00460068, 0x00000064, 0x00A00000, 0x999999C9, 0xC9CCAC99, 0x9A9999C9, 0x99C9CCCC, 0xCC9C2522, 
0x222242B6, 0x00000000, 0x00000000, 0xCC8C1300, 0x0064A8CC, 0x0A000918, 0x00000020, 0x00000000, 
0x0A000A00, 0x002882CA, 0x02440000, 0x00202200, 0x00000002, 0x00000000, 0xCCCCACC9, 0x999999AC, 
0x242222C2, 0x42C8CC8B, 0xC9999999, 0x22229999, 0x84CACCCC, 0x00000000, 0x00000000, 0x79240000, 
0x0600013A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 
0x0000CA00, 0x36223294, 0x5586CAAC, 0xCC4822C2, 0x222284CC, 0xC7272222, 0x22222243, 0x1173CBCC, 
0x49011033, 0x1031A7CC, 0xCC8A3612, 0x0600053A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xC0000000, 0x0000C800, 0xCCBC6892, 0x444454B7, 0xCC6A23C2, 0x222284CC, 
0xC7272222, 0x22222243, 0x2185CBCC, 0x49011033, 0x1021A6CC, 0xCC8A3612, 0x0A00093A, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0x75A6CB9C, 
0x22222233, 0xCC9837C2, 0x2242C8CC, 0xC6161111, 0x11111132, 0x2175CBCC, 0x49011033, 0x1021A5CC, 
0xCC8A3612, 0x03000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00220000, 0xCCCC9BC9, 0x9999B9CC, 0x992922C2, 0x999BCC9C, 0xC6161111, 0x11111132, 
0x999999C9, 0x99999999, 0xCC9B9999, 0x9999CACC, 0x0100013B, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 0xCCCC8C99, 0xCCCC48C2, 
0x222242C8, 0xC8480000, 0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 0x01000F3B, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CC00, 
0x999999B9, 0xCCCC8C99, 0xCC8C0400, 0x000084CC, 0xC8480000, 0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 
0xCCCCCCBC, 0xCCCCCCCC, 0x00000F0B, 0xC2000060, 0x20C20C2A, 0x00000008, 0x00000000, 0x00000044, 
0x00460068, 0x00000064, 0x00A00000, 0xCCAC99C9, 0x9999C9CC, 0x9A9999C9, 0x9999CACC, 0xCACC5901, 
0x00005169, 0x00000000, 0x00000000, 0xAC150000, 0x000083CC, 0x12000913, 0x00000060, 0x00000000, 
0xAAA20C00, 0x2820228C, 0x66660000, 0x0046AA00, 0x00000064, 0x00000000, 0x9A9A99B9, 0x99C9CC9C, 
0xAB9999C9, 0x9999CCCC, 0xCBBC970A, 0x8C848C74, 0xAC671363, 0x5177CACC, 0x03000000, 0x02000073, 
0x0100013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 
0x0000CA00, 0x999999B9, 0xCCCC8C99, 0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 0xBBBBCCCC, 
0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 0x01000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20C00000, 0x0000CC00, 0x999999B9, 0xCCCC8C99, 0xCC8C0400, 0x000084CC, 
0xC8480000, 0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 0x0600053A, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0xCCBC6892, 
0x444454B7, 0xCC6A23C2, 0x222284CC, 0xC7272222, 0x22222243, 0x0141CACC, 0x38000020, 0x00005398, 
0x9C460000, 0x1000093A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xC0000000, 0x0000C000, 0x0020A6BC, 0x00000000, 0xCCBCCC08, 0x739BCBCC, 0xC8480000, 0x00000040, 
0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 0x0000013D, 0x88000060, 0x00200020, 0x00000000, 
0x00000000, 0x00000600, 0x00680002, 0x00020000, 0x000C0000, 0x372222B2, 0xA686CCBC, 0xCCBC37C0, 
0x00626AC8, 0xCC7B3700, 0x000084CC, 0x2284CBAC, 0x22222222, 0x22526A23, 0x25222222, 0x1200010A, 
0xAC000060, 0x00A0C060, 0x0000A000, 0x00000000, 0x000000AA, 0x00020000, 0x00000000, 0x002A0000, 
0x999999C9, 0x9999CCCC, 0xCC4800C0, 0x30B7CCBC, 0xC9999999, 0x00009999, 0x008398CC, 0x00000000, 
0xAACC4A01, 0x88ABA9AC, 0x04000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00220000, 0x9CBB99B9, 0x99C9CCCC, 0x990900C0, 0xA9CCCC9C, 0xC848A606, 
0x00000040, 0x9999B9CC, 0x99999999, 0x99999999, 0x9C999999, 0x0100013B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 0xCCCC8C99, 
0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 
0x01000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 
0x0000CC00, 0x999999B9, 0xCCCC8C99, 0xCC8C0400, 0x000084CC, 0xC8480000, 0x00000040, 0xBBBBCCCC, 
0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 0x0600053A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0xCCBC6892, 0x444454B7, 0xCC6A23C2, 0x222284CC, 
0xC7272222, 0x22222243, 0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 0x1000093A, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0x0020A6BC, 
0x00000000, 0xCCBCCC08, 0x739BCBCC, 0xC8480000, 0x00000040, 0x0141CACC, 0x38000020, 0x00005398, 
0x9C460000, 0x00000F0B, 0xC2000060, 0x20C20C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 
0x00000064, 0x00A00000, 0xCCAC99C9, 0x9999C9CC, 0x9A9999C9, 0x9999CACC, 0xCACC5901, 0x00005169, 
0x00000000, 0x00000000, 0xCC8C0300, 0x0064A8CC, 0x12000913, 0x00000060, 0x00000000, 0xAAA20C00, 
0x2820228C, 0x66660000, 0x0046AA00, 0x00000064, 0x00000000, 0x9A9A99B9, 0x99C9CC9C, 0xAB9999C9, 
0x9999CCCC, 0xCBBC970A, 0x8C848C74, 0xAC671363, 0x5177CACC, 0x03000000, 0x02000073, 0x0100013B, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 
0x999999B9, 0xCCCC8C99, 0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 
0xCCCCCCBC, 0xCCCCCCCC, 0x01000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20C00000, 0x0000CC00, 0x999999B9, 0xCCCC8C99, 0xCC8C0400, 0x000084CC, 0xC8480000, 
0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 0x0000013D, 0x88000060, 0x00200020, 
0x00000000, 0x00000000, 0x00000600, 0x00680002, 0x00020000, 0x000C0000, 0x372222B2, 0xA686CCBC, 
0xCCBC37C0, 0x00626AC8, 0xCC7B3700, 0x000084CC, 0x2284CBAC, 0x22222222, 0x22526A23, 0x25222222, 
0x1200010A, 0xAC000060, 0x00A0C060, 0x0000A000, 0x00000000, 0x000000AA, 0x00020000, 0x00000000, 
0x002A0000, 0x999999C9, 0x9999CCCC, 0xCC4800C0, 0x30B7CCBC, 0xC9999999, 0x00009999, 0x008398CC, 
0x00000000, 0xAACC4A01, 0x88ABA9AC, 0x04000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00220000, 0x9CBB99B9, 0x99C9CCCC, 0x990900C0, 0xA9CCCC9C, 
0xC848A606, 0x00000040, 0x9999B9CC, 0x99999999, 0x99999999, 0x9C999999, 0x0E000F3A, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0x480000B0, 
0x0053C9CC, 0xCC590100, 0x000084CC, 0xC8480000, 0x00000040, 0x0141CACC, 0x38000020, 0x00005398, 
0x9C460000, 0x0E000F3A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xC0000000, 0x0000C000, 0xCCBC48B0, 0x00003095, 0xCCBC3700, 0x004096CC, 0xC8480000, 0x00000040, 
0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 0x1200010B, 0xC0000060, 0x00C00C04, 0x00000002, 
0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00400000, 0xCCAC99C9, 0x99A9CACC, 0x999999C9, 
0x9999C9CC, 0xCACCCC0C, 0x00000062, 0x00000000, 0x00000000, 0xCC8C0300, 0x0064A8CC, 0x0000092D, 
0x82000060, 0x40840000, 0x00002A80, 0x00000006, 0x02000600, 0x80AC8628, 0x00000000, 0x00040000, 
0x40C8CCBC, 0x00000000, 0xC8CC8C04, 0x00000040, 0xC8CCCC08, 0x00000040, 0x000030C8, 0x00000000, 
0x00000000, 0xCCAC9B38, 0x10000946, 0x86000040, 0x0080C62C, 0xCC808600, 0x06000064, 0x00000000, 
0x00000000, 0x200A0000, 0x00662000, 0xCCCC9CC9, 0x9999CBCC, 0x150000C0, 0x0084CC9C, 0xC99C9999, 
0x00009999, 0xCCCCCCCC, 0x312264A8, 0x24000000, 0xCCCCAC68, 0x00800912, 0x82000040, 0x00888000, 
0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0xCCABCCC9, 0xCC9CCCCC, 
0x000000C0, 0xCCCC4800, 0xC9999999, 0x00009999, 0xCBCCBCCC, 0x11114198, 0x47111111, 0x879A4842, 
0x00000702, 0x0000C64C, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00040000, 
0x00000000, 0xCCAB9AC9, 0xA9CCCCCC, 0xB88B04C0, 0x73C8CCCC, 0xC9999999, 0x00009999, 0xCACCCCCC, 
0x00004086, 0x13000000, 0xCCCC8A47, 0x0200013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 0xCCCCCC9A, 0xCCCC48C2, 0x222242C8, 
0xC8480000, 0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 0x00000702, 0x0000C64C, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00040000, 0x00000000, 0xCCAB9AC9, 
0xA9CCCCCC, 0xB88B04C0, 0x73C8CCCC, 0xC9999999, 0x00009999, 0xCACCCCCC, 0x00004086, 0x13000000, 
0xCCCC8A47, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20C00000, 0x0000CC00, 0x999999B9, 0xCCCC8C99, 0xCC8C0400, 0x000084CC, 0xC8480000, 0x00000040, 
0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 0x03000701, 0x0228C64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCCCC9AB9, 0x9999CCCC, 0x990900C0, 
0x9999CC9C, 0xC8480000, 0x00000040, 0x99A9CCCC, 0x99999999, 0x99999999, 0xAB999999, 0x0200013B, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 
0x999999B9, 0xCCCC8C99, 0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 
0xCCCCCCBC, 0xCCCCCCCC, 0x0E000F3A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xC0000000, 0x0000C000, 0x480000B0, 0x0053C9CC, 0xCC590100, 0x000084CC, 0xC8480000, 
0x00000040, 0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 0x0E000F3A, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0xCCBC48B0, 0x00003095, 
0xCCBC3700, 0x004096CC, 0xC8480000, 0x00000040, 0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 
0x1200010B, 0xC0000060, 0x00C00C04, 0x00000002, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 
0x00400000, 0xCCAC99C9, 0x99A9CACC, 0x999999C9, 0x9999C9CC, 0xCACCCC0C, 0x00000062, 0x00000000, 
0x00000000, 0xCC8C0300, 0x0064A8CC, 0x0000092D, 0x82000060, 0x40840000, 0x00002A80, 0x00000006, 
0x02000600, 0x80AC8628, 0x00000000, 0x00040000, 0x40C8CCBC, 0x00000000, 0xC8CC8C04, 0x00000040, 
0xC8CCCC08, 0x00000040, 0x000030C8, 0x00000000, 0x00000000, 0xCCAC9B38, 0x10000946, 0x86000040, 
0x0080C62C, 0xCC808600, 0x06000064, 0x00000000, 0x00000000, 0x200A0000, 0x00662000, 0xCCCC9CC9, 
0x9999CBCC, 0x150000C0, 0x0084CC9C, 0xC99C9999, 0x00009999, 0xCCCCCCCC, 0x312264A8, 0x24000000, 
0xCCCCAC68, 0x00800912, 0x82000040, 0x00888000, 0x0800C0A0, 0x00000000, 0x00004400, 0x00000000, 
0x00000000, 0x00060000, 0xCCABCCC9, 0xCC9CCCCC, 0x000000C0, 0xCCCC4800, 0xC9999999, 0x00009999, 
0xCBCCBCCC, 0x11114198, 0x47111111, 0x879A4842, 0x00000702, 0x0000C64C, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00040000, 0x00000000, 0xCCAB9AC9, 0xA9CCCCCC, 0xB88B04C0, 
0x73C8CCCC, 0xC9999999, 0x00009999, 0xCACCCCCC, 0x00004086, 0x13000000, 0xCCCC8A47, 0x02000F3B, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CC00, 
0x999999B9, 0xCCCCCC9A, 0xCC8C0400, 0x000084CC, 0xC8480000, 0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 
0xCCCCCCBC, 0xCCCCCCCC, 0x03000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00220000, 0xCCCC9AB9, 0xCCCCCCCC, 0x990900C0, 0xA9CBCCBC, 0xC8480000, 
0x00000040, 0x99A9CCCC, 0x99999999, 0xCC9B9999, 0xAB99CACC, 0x0100013B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 0xCCCC8C99, 
0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 
0x01000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 
0x0000CC00, 0x999999B9, 0xCCCC8C99, 0xCC8C0400, 0x000084CC, 0xC8480000, 0x00000040, 0xBBBBCCCC, 
0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 0x0600053A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0xCCBC6892, 0x444454B7, 0xCC6A23C2, 0x222284CC, 
0xC7272222, 0x22222243, 0x0141CACC, 0x38000020, 0x00005398, 0x9C460000, 0x1000093A, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0x0020A6BC, 
0x00000000, 0xCCBCCC08, 0x739BCBCC, 0xC8480000, 0x00000040, 0x0141CACC, 0x38000020, 0x00005398, 
0x9C460000, 0x00000F0B, 0xC2000060, 0x20C20C2A, 0x00000008, 0x00000000, 0x00000044, 0x00460068, 
0x00000064, 0x00A00000, 0xCCAC99C9, 0x9999C9CC, 0x9A9999C9, 0x9999CACC, 0xCACC5901, 0x00005169, 
0x00000000, 0x00000000, 0xCC8C0300, 0x0064A8CC, 0x12000913, 0x00000060, 0x00000000, 0xAAA20C00, 
0x2820228C, 0x66660000, 0x0046AA00, 0x00000064, 0x00000000, 0x9A9A99B9, 0x99C9CC9C, 0xAB9999C9, 
0x9999CCCC, 0xCBBC970A, 0x8C848C74, 0xAC671363, 0x5177CACC, 0x03000000, 0x02000073, 0x0000013D, 
0x88000060, 0x00200020, 0x00000000, 0x00000000, 0x00000600, 0x00680002, 0x00020000, 0x000C0000, 
0x372222B2, 0xA686CCBC, 0xCCBC37C0, 0x00626AC8, 0xCC7B3700, 0x000084CC, 0x2284CBAC, 0x22222222, 
0x22526A23, 0x25222222, 0x0100013B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 0xCCCC8C99, 0xCCCC48C2, 0x222242C8, 0xC8480000, 
0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 0x0100013B, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 0xCCCC8C99, 
0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 
0x1200010A, 0xAC000060, 0x00A0C060, 0x0000A000, 0x00000000, 0x000000AA, 0x00020000, 0x00000000, 
0x002A0000, 0x999999C9, 0x9999CCCC, 0xCC4800C0, 0x30B7CCBC, 0xC9999999, 0x00009999, 0x008398CC, 
0x00000000, 0xAACC4A01, 0x88ABA9AC, 0x04000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00220000, 0x9CBB99B9, 0x99C9CCCC, 0x990900C0, 0xA9CCCC9C, 
0xC848A606, 0x00000040, 0x9999B9CC, 0x99999999, 0x99999999, 0x9C999999, 0x0200013B, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20C00000, 0x0000CA00, 0x999999B9, 
0xCCCC8C99, 0xCCCC48C2, 0x222242C8, 0xC8480000, 0x00000040, 0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 
0xCCCCCCCC, 0x02000F3B, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x20C00000, 0x0000CC00, 0x999999B9, 0xCCCC8C99, 0xCC8C0400, 0x000084CC, 0xC8480000, 0x00000040, 
0xBBBBCCCC, 0xBBBBBBBB, 0xCCCCCCBC, 0xCCCCCCCC, 0x1200010B, 0xC0000060, 0x00C40C08, 0x00000008, 
0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00400000, 0xBBBBBBCB, 0xCBCCCCBC, 0x490200C0, 
0x99C9CCBC, 0xCCCCCC0C, 0x00002094, 0x00000000, 0x00000000, 0xCCAB3600, 0x002097CC, 0x0000092D, 
0x82000060, 0x40840000, 0x00002A80, 0x00000006, 0x02000600, 0x80A88628, 0x00000000, 0x00040000, 
0x87CACCCC, 0x77777777, 0xCCCC8CC4, 0x33333384, 0xCCCC9A7B, 0x7777C7CC, 0xCCBCA8CC, 0x22222295, 
0x25222222, 0xCC9C6995, 0x10000946, 0x86000040, 0x0080C62C, 0xCCB08600, 0x06000064, 0x00000000, 
0x00000000, 0x200A0000, 0x00662000, 0xCCCCCCCC, 0x9999B9CC, 0x575901C0, 0x95CACCBC, 0xC7CC5B00, 
0x00000031, 0xCACCCCCC, 0xB9BB7984, 0x00000030, 0xBB8A0300, 0x00800912, 0x82000040, 0x00888000, 
0x0800C0A0, 0x00000080, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0xCCABCCC9, 0xCC9CCCCC, 
0x333333C3, 0xCCCC6A33, 0xC7373333, 0x33333354, 0xC9CCCCCC, 0x22113187, 0x67461111, 0xCC6A7655, 
0x0E000F3A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 
0x0000CA00, 0x36111191, 0x3374C9BC, 0xCC590100, 0x002084CC, 0xC6060000, 0x00000031, 0x1184CCCC, 
0x49011033, 0x1052A5CC, 0xCC8A3612, 0x0A000F3A, 0x00000020, 0x00000002, 0x20000000, 0x00000000, 
0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0xCCCBBB97, 0x222232B6, 0xCC7B0300, 0x003087CC, 
0xC6666606, 0x00002063, 0x1194CCCC, 0x49011033, 0x1021A5CC, 0xCC8A3612, 0x03000701, 0x0228C64C, 
0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCCCCCCCB, 
0xC9ABBACB, 0x250000C0, 0x62CACC9C, 0xC6060000, 0x00000031, 0x88BACCCC, 0x49523375, 0x1011A5CC, 
0xCC8A3612, 0x00242A03, 0x0009090A, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00CECECE, 0x00000000, 0x00000000, 0x00000000, 0x00787878, 0x00000000, 
0x00000000, 0x00000000, 0x00575757, 0x00000000, 0x00000000, 0x00000000, 0x00800516, 0x00000040, 
0x00000000, 0xC0C60A00, 0x0C000006, 0x02000000, 0x00000000, 0x00000000, 0x00000000, 0xCCC99CB9, 
0xA999CCCC, 0x9A9999C9, 0xBACCCC9A, 0x84CCCC0C, 0x75030000, 0xBCBACCAA, 0x72AACCCC, 0x00000000, 
0x38000000, 0x0E000521, 0x86000080, 0xCC86A840, 0x0000800C, 0x00000000, 0x000000CC, 0x0406208A, 
0x00000088, 0x00800000, 0x9C9A99B9, 0xCCCCCCCC, 0x999999C9, 0x99CBCCBC, 0xC8CBCC0C, 0x57013153, 
0x10000064, 0xCCCC8C04, 0xCCCCCCCC, 0x6686CACC, 0x12000915, 0x00000060, 0x00000000, 0x44CC0400, 
0x00002002, 0x00000000, 0x00002000, 0x00000000, 0x00000000, 0xCC2602B1, 0xB7CCCCCC, 0xCCCC4800, 
0x1031A7CC, 0x75B8CC0C, 0x00000020, 0xBACCCCCC, 0x00103285, 0x00000010, 0xAC680000, 0x0C000522, 
0x82000080, 0xCC86404A, 0x000080C0, 0x00000000, 0x0000CC00, 0x4088009A, 0x00000000, 0x00080000, 
0xCCBCAAB9, 0x9999CCCC, 0xCC8A24C0, 0x2062CACC, 0xCACCCC9C, 0x00519999, 0x1073B9CC, 0x02001001, 
0x8A694635, 0xCCCCCCAB, 0x00000714, 0x00C24C61, 0x00000000, 0x0AB80900, 0x00000004, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x9CA99BB9, 0xCCCCCCCC, 0x00020000, 0xCCCCCC48, 0xC9CCCC9C, 
0x00019999, 0x55B7CCAC, 0x00002021, 0x00000000, 0x14000000, 0x12000528, 0x82000080, 0x04800402, 
0x00000000, 0x00000000, 0x00004466, 0x002000CB, 0x0000000A, 0x00220000, 0xAA9999B9, 0x99CACCCC, 
0xAB9999C9, 0x99CACCCC, 0x50A8CB0C, 0x00000000, 0x00000000, 0x68241101, 0xCCCCCCAC, 0x0064A8CC, 
0x0000072D, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x400A0000, 0x00000000, 
0x00000000, 0x5596CCBC, 0x00000010, 0xC8CCCC08, 0x00000040, 0xC8CC9C05, 0x00000040, 0x000020B7, 
0x00000000, 0x00000000, 0xCC6B0200, 0x0A000917, 0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 
0x00A00000, 0x00000000, 0x00000000, 0x00000000, 0xCCCCAAC9, 0xA9AACCCC, 0x480100C0, 0x41A7CCCC, 
0xC9CCCC9A, 0x00139999, 0xCACCCCCC, 0x00113295, 0x00100000, 0xAB663501, 0x00800812, 0x82000040, 
0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0xAC9AB9C9, 
0xCCCCCCCC, 0x121000C0, 0xB7CABC67, 0xC9999999, 0x00009999, 0x9AA989C8, 0x00305397, 0x00422203, 
0x89672522, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00220000, 0xCC9999B9, 0xA9CCCCCC, 0x990900C0, 0x9999CCAC, 0xC848630A, 0x40002042, 
0xC9CCCCCC, 0x99999999, 0x99999999, 0xCC9A9999, 0x12000522, 0xAA000080, 0x008604CC, 0x00000000, 
0x00000000, 0x0000C200, 0x0006008A, 0x00000066, 0x00400000, 0x9C99AAB9, 0x9999CCCC, 0x999999C9, 
0x99CCCC9C, 0x62030000, 0x0284AC26, 0x02007299, 0x00020030, 0x54020000, 0xCCCC8C34, 0x1200091C, 
0x00000060, 0x00000000, 0x00000000, 0x00C44800, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x480000B0, 0x738ACCCC, 0xCCCC4800, 0x0020A6CC, 0x84040000, 0x7384CC48, 0x33550200, 0xCCCCBB6A, 
0x000010A4, 0x00000000, 0x06000521, 0x8A000080, 0x2282A0C0, 0x00008000, 0x00000000, 0x000000CC, 
0x0406008A, 0x00000088, 0x00040000, 0x9C9999C9, 0x9999CBCC, 0x593700C0, 0x73CACCAC, 0xCA999999, 
0x7753C99C, 0x0073A8CC, 0x32000000, 0x01002000, 0xCCCC7845, 0x00000714, 0x00C24C61, 0x00000000, 
0x0AB80900, 0x00000004, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xAC9979B7, 0x86B9CBCC, 
0x67020000, 0xCCCCCCBC, 0xC8CCCC0C, 0x00000040, 0xB9BACCBC, 0x00003042, 0x00000000, 0x27000000, 
0x12000528, 0x82000080, 0x04800402, 0x00000000, 0x00000000, 0x00004466, 0x002000CB, 0x0000000A, 
0x00220000, 0xAA9999B9, 0x99CACCCC, 0xAB9999C9, 0x99CACCCC, 0x50A8CB0C, 0x00000000, 0x00000000, 
0x68241101, 0xCCCCCCAC, 0x0064A8CC, 0x0000072D, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x400A0000, 0x00000000, 0x00000000, 0x5596CCBC, 0x00000010, 0xC8CCCC08, 0x00000040, 
0xC8CC9C05, 0x00000040, 0x000020B7, 0x00000000, 0x00000000, 0xCC6B0200, 0x0A000917, 0x00000040, 
0x00000000, 0x0CC60A00, 0x000000A6, 0x00A00000, 0x00000000, 0x00000000, 0x00000000, 0xCCCCAAC9, 
0xA9AACCCC, 0x480100C0, 0x41A7CCCC, 0xC9CCCC9A, 0x00139999, 0xCACCCCCC, 0x00113295, 0x00100000, 
0xAB663501, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 
0x00000000, 0x00060000, 0xAC9AB9C9, 0xCCCCCCCC, 0x121000C0, 0xB7CABC67, 0xC9999999, 0x00009999, 
0x9AA989C8, 0x00305397, 0x00422203, 0x89672522, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 
0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCC9999B9, 0xA9CCCCCC, 0x990900C0, 
0x9999CCAC, 0xC848630A, 0x40002042, 0xC9CCCCCC, 0x99999999, 0x99999999, 0xCC9A9999, 0x00800516, 
0x00000040, 0x00000000, 0xC0C60A00, 0x0C000006, 0x02000000, 0x00000000, 0x00000000, 0x00000000, 
0xCCC99CB9, 0xA999CCCC, 0x9A9999C9, 0xBACCCC9A, 0x84CCCC0C, 0x75030000, 0xBCBACCAA, 0x72AACCCC, 
0x00000000, 0x38000000, 0x0E000521, 0x86000080, 0xCC86A840, 0x0000800C, 0x00000000, 0x000000CC, 
0x0406208A, 0x00000088, 0x00800000, 0x9C9A99B9, 0xCCCCCCCC, 0x999999C9, 0x99CBCCBC, 0xC8CBCC0C, 
0x57013153, 0x10000064, 0xCCCC8C04, 0xCCCCCCCC, 0x6686CACC, 0x12000915, 0x00000060, 0x00000000, 
0x44CC0400, 0x00002002, 0x00000000, 0x00002000, 0x00000000, 0x00000000, 0xCC2602B1, 0xB7CCCCCC, 
0xCCCC4800, 0x1031A7CC, 0x75B8CC0C, 0x00000020, 0xBACCCCCC, 0x00103285, 0x00000010, 0xAC680000, 
0x0C000522, 0x82000080, 0xCC86404A, 0x000080C0, 0x00000000, 0x0000CC00, 0x4088009A, 0x00000000, 
0x00080000, 0xCCBCAAB9, 0x9999CCCC, 0xCC8A24C0, 0x2062CACC, 0xCACCCC9C, 0x00519999, 0x1073B9CC, 
0x02001001, 0x8A694635, 0xCCCCCCAB, 0x00000714, 0x00C24C61, 0x00000000, 0x0ABC0900, 0x00000004, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xAC9979B7, 0x86B9CBCC, 0x67020000, 0xCCCCCCBC, 
0xC8CCCC0C, 0x00000040, 0xB9BACCBC, 0x00003042, 0x00000000, 0x27000000, 0x1200050F, 0x00000060, 
0xCC000000, 0x00000000, 0x00000000, 0x0000B000, 0x00000020, 0x00000000, 0x00000000, 0x030000B0, 
0xC8CCCC7B, 0xCCCC59C1, 0x1052C9CC, 0x4041C80C, 0x00000000, 0x00001020, 0x03000000, 0xB6CCCC8C, 
0x00001021, 0x12000917, 0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 0x00A00000, 0x00000000, 
0x00000000, 0x00000000, 0xBC9A99C9, 0x999AB9CC, 0x480000C0, 0x2196CCCC, 0xC9CBCC9C, 0x00139999, 
0xCBCCCCCC, 0x11113295, 0x00100010, 0xAB683501, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 
0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 0xC99A99C9, 0xBC99CCAB, 0x686A02C0, 
0xCCCC8CCA, 0xC9999999, 0x00009999, 0xBCBA9CC9, 0x0210A5BA, 0x00000052, 0x24841400, 0x01000701, 
0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 
0xAC9999B9, 0x99AAC9CC, 0x990900C0, 0x9999CCCC, 0xC99C99C9, 0x99999999, 0x9999CBCC, 0x99999999, 
0x99999999, 0xBC9A9999, 0x00240804, 0x0A0A090A, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x4E4E4E4E, 0x00000000, 0x00000000, 0x00000000, 0xBDBDBDBD, 
0x00000000, 0x00000000, 0x00000000, 0xAEAECECE, 0x00000000, 0x00000000, 0x00000000, 0x00800516, 
0x00000040, 0x00000000, 0xC0C60A00, 0x0C000006, 0x02000000, 0x00000000, 0x00000000, 0x00000000, 
0xBCCC9BB9, 0xCCB9CACC, 0x999999C9, 0xC9CCCCCA, 0xC8CBCC0C, 0x95151540, 0xBCAA5776, 0x51B7CCCC, 
0x00000000, 0x03000000, 0x0E000521, 0x86000080, 0xCC86A840, 0x0000800C, 0x00000000, 0x000000CC, 
0x0406208A, 0x00000088, 0x00800000, 0x9CA999C9, 0x9999CCCC, 0x999999C9, 0x99C9CCCC, 0xA6B7CC0C, 
0x56011121, 0x10000011, 0x02110100, 0xCCCCCC6A, 0x114396CB, 0x12000915, 0x00000060, 0x00000000, 
0x44CC0400, 0x00002002, 0x00000000, 0x00002000, 0x00000000, 0x00000000, 0xCC1300B0, 0x84CBCCCC, 
0xCCAC26C0, 0x001095CC, 0x73B9CC0C, 0x00220010, 0x97CCCC9C, 0x00002143, 0x00000010, 0x03000000, 
0x0C000522, 0x82000080, 0xCC86404A, 0x000080C0, 0x00000000, 0x0000CC00, 0x4088009A, 0x00000000, 
0x00080000, 0xCCCC9AB5, 0x8457C9CC, 0xAA5733C0, 0x30B7CCCC, 0xC8CCCC0C, 0x01013454, 0x1073B9CC, 
0x02001001, 0x8A694635, 0xCCCCCCAB, 0x00000714, 0x00C24C61, 0x00000000, 0x0AB80900, 0x00000004, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xAC9979B7, 0xCCBBCCCC, 0x67020000, 0xCCCCCCBC, 
0xC8CCCC0C, 0x00000040, 0xB9BACCBC, 0x00003042, 0x00000000, 0x27000000, 0x12000528, 0x82000080, 
0x04800402, 0x00000000, 0x00000000, 0x00004466, 0x002000CB, 0x0000000A, 0x00220000, 0xAA8946B0, 
0x87CACCCC, 0x591600C0, 0x30B7CCCC, 0x10C4CC0C, 0x01000000, 0x00000000, 0x57231101, 0xCCCCCC8A, 
0x0064A8CC, 0x0000072D, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x400A0000, 
0x00000000, 0x00000000, 0x5596CCBC, 0x00000010, 0xC8CCCC08, 0x00000040, 0xC8CC9C05, 0x00000040, 
0x000020B7, 0x00000000, 0x00000000, 0xCC6B0200, 0x0A000917, 0x00000040, 0x00000000, 0x0CC60A00, 
0x000000A6, 0x00A00000, 0x00000000, 0x00000000, 0x00000000, 0xCCCCAAC9, 0x999AC9CC, 0x480100C0, 
0x41A7CCCC, 0xCACCCC9C, 0x00149999, 0xA8CBCCCC, 0x01111053, 0x00000101, 0x46120100, 0x00800812, 
0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 0x00060000, 
0xAC9AB9C9, 0xCCCCCCCC, 0x121000C0, 0xB7CABC67, 0xC9999999, 0x00009999, 0x9AA989C8, 0x00305397, 
0x00422203, 0x89672522, 0x01000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 
0x00020000, 0x00040020, 0x00220000, 0x9C9999B9, 0xCACBCCCC, 0x990900C0, 0x99C9CCCC, 0xCBA8B9C7, 
0x55B9CCBC, 0x99999999, 0xCCCCCC9A, 0x999999CA, 0x99999999, 0x12000522, 0xAA000080, 0x008604CC, 
0x00000000, 0x00000000, 0x0000C200, 0x0006008A, 0x00000066, 0x00400000, 0x9C99AAB9, 0x9999CCCC, 
0x999999C9, 0x99CCCC9C, 0xCBACAACC, 0xAAAACCCC, 0x02007299, 0x00020030, 0x54020000, 0xCCCC8C34, 
0x1200091C, 0x00000060, 0x00000000, 0x00000000, 0x00C44800, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x480000B0, 0x738ACCCC, 0xCCCC4800, 0x0020A6CC, 0xCAAAAACA, 0xAAAACCCC, 0x33550200, 
0xCCCCBB6A, 0x000010A4, 0x00000000, 0x06000521, 0x8A000080, 0x2282A0C0, 0x00008000, 0x00000000, 
0x000000CC, 0x0406008A, 0x00000088, 0x00040000, 0x8C6442B8, 0x8474CBCC, 0x593700C0, 0x73CACCAC, 
0xCCBBBBCB, 0xBCBBCCBC, 0x0073A8CC, 0x32000000, 0x01002000, 0xCCCC7845, 0x00000714, 0x00C22C61, 
0x00000000, 0x0AB80900, 0x00000004, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xAC9979B7, 
0xCCBBCCCC, 0x67020000, 0xCCCCCCBC, 0xC8CCCC0C, 0x00000040, 0xB9BACCBC, 0x00003042, 0x00000000, 
0x27000000, 0x12000528, 0x82000080, 0x04800402, 0x00000000, 0x00000000, 0x00004466, 0x002000CB, 
0x0000000A, 0x00220000, 0xAA8946B0, 0x87CACCCC, 0x591600C0, 0x30B7CCCC, 0x10C4CC0C, 0x01000000, 
0x00000000, 0x57231101, 0xCCCCCC8A, 0x0064A8CC, 0x0000072D, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x400A0000, 0x00000000, 0x00000000, 0x5596CCBC, 0x00000010, 0xC8CCCC08, 
0x00000040, 0xC8CC9C05, 0x00000040, 0x000020B7, 0x00000000, 0x00000000, 0xCC6B0200, 0x0A000917, 
0x00000040, 0x00000000, 0x0CC60A00, 0x000000A6, 0x00A00000, 0x00000000, 0x00000000, 0x00000000, 
0xCCCCAAC9, 0x999AC9CC, 0x480100C0, 0x41A7CCCC, 0xCACCCC9C, 0x00149999, 0xA8CBCCCC, 0x01111053, 
0x00000101, 0x46120100, 0x00800812, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 
0x00000000, 0x00000000, 0x00060000, 0xAC9AB9C9, 0xCCCCCCCC, 0x121000C0, 0xB7CABC67, 0xC9999999, 
0x00009999, 0x9AA989C8, 0x00305397, 0x00422203, 0x89672522, 0x01000701, 0x0228C64C, 0x00000000, 
0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0x9C9999B9, 0xCACBCCCC, 
0x990900C0, 0x99C9CCCC, 0xCBA8B9C7, 0x55B9CCBC, 0x99999999, 0xCCCCCC9A, 0x999999CA, 0x99999999, 
0x0E000521, 0x86000080, 0xCC86A840, 0x0000800C, 0x00000000, 0x000000CC, 0x0406208A, 0x00000088, 
0x00800000, 0x9CA999C9, 0x9999CCCC, 0x999999C9, 0x99C9CCCC, 0xA6B7CC0C, 0x56011121, 0x10000011, 
0x02110100, 0xCCCCCC6A, 0x114396CB, 0x12000915, 0x00000060, 0x00000000, 0x44CC0400, 0x00002002, 
0x00000000, 0x00002000, 0x00000000, 0x00000000, 0xCC1300B0, 0x84CBCCCC, 0xCCAC26C0, 0x001095CC, 
0x73B9CC0C, 0x00220010, 0x97CCCC9C, 0x00002143, 0x00000010, 0x03000000, 0x0C000522, 0x82000080, 
0xCC86404A, 0x000080C0, 0x00000000, 0x0000CC00, 0x4088009A, 0x00000000, 0x00080000, 0xCCCC9AB5, 
0x8457C9CC, 0xAA5733C0, 0x30B7CCCC, 0xC8CCCC0C, 0x01013454, 0x1073B9CC, 0x02001001, 0x8A694635, 
0xCCCCCCAB, 0x12000704, 0x00C42860, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xCCCCCCBC, 0x100042C8, 0xCCCC7BC3, 0x0040C8CC, 0xC8480000, 0x00000040, 
0x41A6CCAC, 0x00000000, 0x9B450100, 0x8A89CACC, 0x0E000F3A, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xC0100000, 0x0000C000, 0x480000B0, 0x0053C9CC, 0xCC590100, 
0x000084CC, 0xC8480000, 0x00000040, 0x0030C8CC, 0x00000000, 0x00000000, 0x38000000, 0x0E000F3A, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 
0xCC9C48B0, 0x00003095, 0xCCBC3700, 0x000073CA, 0xC8480000, 0x00000040, 0x0030C9BC, 0x00000000, 
0x00000000, 0x57150000, 0x1200010B, 0xC6000060, 0x00C00C04, 0x00000002, 0x00000000, 0x00000000, 
0x00000002, 0x00000000, 0x00400000, 0x080000B0, 0x96A5CAAC, 0x480000C0, 0x4043C8CC, 0xC8CCCC0C, 
0x00000073, 0x00000000, 0x00000000, 0xCC8C0300, 0x0064A8CC, 0x10000946, 0x86000040, 0x0080C62C, 
0xCCA08600, 0x06000064, 0x00000000, 0x00000000, 0x200A0000, 0x00662000, 0xCCCC9CC9, 0x9999CBCC, 
0x150000C0, 0x0084CC9C, 0xCA9B9999, 0x00009999, 0xCCCCCCCC, 0x312264A8, 0x24000000, 0xCCCCAC68, 
0x00800912, 0x82000040, 0x00888000, 0x0000C0A0, 0x00000000, 0x00004400, 0x00000000, 0x00000000, 
0x00060000, 0xCCABCCC9, 0xCC9CCCCC, 0x000000C0, 0xCCCC4800, 0xC9999999, 0x33339999, 0xCBCCBCCC, 
0x11114198, 0x47111111, 0x879A4842, 0x03000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 
0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xCCCC9AB9, 0x9999CCCC, 0x990900C0, 0x9999CC9C, 
0xC8480000, 0x00000040, 0x99A9CCBC, 0x99999999, 0x99999999, 0x99999999, 0x0E000521, 0x86000080, 
0xCC86A840, 0x0000800C, 0x00000000, 0x000000CC, 0x0406208A, 0x00000088, 0x00800000, 0x9CA999C9, 
0x9999CCCC, 0x999999C9, 0x99C9CCCC, 0xA6B7CC0C, 0x56011121, 0x10000011, 0x02110100, 0xCCCCCC6A, 
0x114396CB, 0x12000915, 0x00000060, 0x00000000, 0x44CC0400, 0x00002002, 0x00000000, 0x00002000, 
0x00000000, 0x00000000, 0xCC1300B0, 0x84CBCCCC, 0xCCAC26C0, 0x001095CC, 0x73B9CC0C, 0x00220010, 
0x97CCCC9C, 0x00002143, 0x00000010, 0x03000000, 0x0C000522, 0x82000080, 0xCC86404A, 0x000080C0, 
0x00000000, 0x0000CC00, 0x4088009A, 0x00000000, 0x00080000, 0xCCCC9AB5, 0x8457C9CC, 0xAA5733C0, 
0x30B7CCCC, 0xC8CCCC0C, 0x01013454, 0x1073B9CC, 0x02001001, 0x8A694635, 0xCCCCCCAB, 0x12000704, 
0x00C42860, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0xCCCCCCBC, 0x100042C8, 0xCCCC7BC3, 0x0040C8CC, 0xC8480000, 0x00000040, 0x41A6CCAC, 0x00000000, 
0x9B450100, 0x8A89CACC, 0x0600013A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xC0000000, 0x0000C200, 0x36223294, 0x5586CAAC, 0xCC4822C2, 0x222284CC, 0xC7272222, 
0x22222243, 0x0062CACC, 0x01000000, 0x0030A759, 0x8C130000, 0x0600053A, 0x00000020, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0xCCBC6892, 0x444454B7, 
0xCC6A23C2, 0x222284CC, 0xC7272222, 0x22222243, 0x2085CBCC, 0x02000000, 0x0020966A, 0x8B130000, 
0x0A00093A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 
0x0000C000, 0x75A6CB9C, 0x22222233, 0xCC9825C2, 0x2242C8CC, 0xC6161111, 0x11111132, 0x2075CACC, 
0x37000000, 0x00206599, 0x5A010000, 0x0A00010B, 0xC2000060, 0x20C20C2A, 0x00000008, 0x00000000, 
0x00000044, 0x00460068, 0x00000064, 0x00A00000, 0x121111C1, 0xC8CCAC49, 0x9A1500C0, 0x87C9CCCC, 
0xCC9C2522, 0x222242B6, 0x00000000, 0x00000000, 0xCC8C1300, 0x0064A8CC, 0x0A000918, 0x00000020, 
0x00000000, 0x0A000A00, 0x002882CA, 0x02440000, 0x00202200, 0x00000002, 0x00000000, 0xCCCCACC9, 
0x999999AC, 0x242222C2, 0x42C8CC8B, 0xC9999999, 0x22229999, 0x84CACCCC, 0x00000000, 0x00000000, 
0x79240000, 0x03000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00220000, 0xCCCC9BC9, 0x9999B9CC, 0x992922C2, 0x999BCC9C, 0xC6161111, 0x11111132, 
0x999999C9, 0x99999999, 0xCC9B9999, 0x9999CACC, 0x00FF0002, 0x00000908, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00002020, 0x00000000, 0x00000000, 
0x00000000, 0x0000BDBD, 0x00000000, 0x00000000, 0x00000000, 0x0000BEBE, 0x00000000, 0x00000000, 
0x00000000, 0x0080031F, 0x00000020, 0x00000000, 0xA0000000, 0x6A004004, 0x02000000, 0x00000000, 
0x00000000, 0x00000000, 0xCCB999C9, 0xACBBCCCC, 0x999999C9, 0xCCCC9C99, 0xBBCBCCBB, 0xBBBBBBBB, 
0xA7CBCC7B, 0x8879B88B, 0x55555555, 0x55555555, 0x0A00073A, 0x00000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0xCCCC88B7, 0x00007387, 0xA8CCCC04, 
0x00001042, 0xC8480000, 0x00000040, 0x0010A5CC, 0x38000000, 0x000010A5, 0x5A010000, 0x0A00073A, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 
0xCCCC88B7, 0x00007387, 0xBACCCC0C, 0x00001064, 0xC8480000, 0x00000040, 0x0010A5CC, 0x38000000, 
0x000010A5, 0x5A010000, 0x11000511, 0x42000060, 0xC6AA0A00, 0x0000000C, 0x00000000, 0x000000A8, 
0x00000020, 0x00000008, 0x00000000, 0x9C9999C9, 0xCC99C99C, 0x999999C9, 0x999ACC9C, 0xC88BBC0C, 
0x48840440, 0x00000000, 0x6B020000, 0xCC9CC9CC, 0x000062B8, 0x0000052D, 0x00000060, 0x00000000, 
0x00000000, 0x00000000, 0x00000500, 0x00580005, 0x00000000, 0x00000000, 0x8C888CCC, 0x444484CC, 
0x86CBCCC8, 0x6686B767, 0xCCCCCCCC, 0xCCCCCCCC, 0x66666697, 0x8A666666, 0xCC889A99, 0x87BBCACC, 
0x0000082D, 0x00000060, 0x00000000, 0x00000000, 0x00000000, 0x06000000, 0x006A0000, 0x00000000, 
0x00000000, 0xABCCC89C, 0x000040C8, 0x62CACCC8, 0x00000000, 0xC8CCCC58, 0x55555565, 0x006255B7, 
0x00000000, 0x5A010000, 0xCCBCCACC, 0x12000917, 0x00000040, 0x00000000, 0x0CC40700, 0x00020086, 
0x22000000, 0x00004200, 0x00000006, 0x00000000, 0x9C99B9C9, 0x9999CCCC, 0x884800C0, 0x0084CCCC, 
0xC9999A99, 0x00009999, 0xCBCC8BC8, 0x3077A7BA, 0x00000000, 0x67370000, 0x03000701, 0x0228C64C, 
0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 0x00040020, 0x00220000, 0xC99B99B9, 
0x9B99C9BC, 0x990900C0, 0x99C9CCCC, 0xC8480000, 0x00000040, 0x9999CCCC, 0x99999999, 0x99999999, 
0xAC999999, 0x0080031F, 0x00000020, 0x00000000, 0xA0000000, 0x6A004004, 0x02000000, 0x00000000, 
0x00000000, 0x00000000, 0xCCB999C9, 0xACBBCCCC, 0x999999C9, 0xCCCC9C99, 0xBBCBCCBB, 0xBBBBBBBB, 
0xA7CBCC7B, 0x8879B88B, 0x55555555, 0x55555555, 0x11000511, 0x42000060, 0xC6AA0A00, 0x0000000C, 
0x00000000, 0x000000A8, 0x00000020, 0x00000008, 0x00000000, 0x9C9999C9, 0xCC99C99C, 0x999999C9, 
0x999ACC9C, 0xC88BBC0C, 0x48840440, 0x00000000, 0x6B020000, 0xCC9CC9CC, 0x000062B8, 0x0000052D, 
0x00000060, 0x00000000, 0x00000000, 0x00000000, 0x00000500, 0x00580005, 0x00000000, 0x00000000, 
0x8C888CCC, 0x444484CC, 0x86CBCCC8, 0x6686B767, 0xCCCCCCCC, 0xCCCCCCCC, 0x66666697, 0x8A666666, 
0xCC889A99, 0x87BBCACC, 0x0000082D, 0x00000060, 0x00000000, 0x00000000, 0x00000000, 0x06000000, 
0x006A0000, 0x00000000, 0x00000000, 0xABCCC89C, 0x000040C8, 0x62CACCC8, 0x00000000, 0xC8CCCC58, 
0x55555565, 0x006255B7, 0x00000000, 0x5A010000, 0xCCBCCACC, 0x12000917, 0x00000040, 0x00000000, 
0x0CC40700, 0x00020086, 0x22000000, 0x00004200, 0x00000006, 0x00000000, 0x9C99B9C9, 0x9999CCCC, 
0x884800C0, 0x0084CCCC, 0xC9999A99, 0x00009999, 0xCBCC8BC8, 0x3077A7BA, 0x00000000, 0x67370000, 
0x02000704, 0x00A22362, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x888888C8, 0xCCCC9C99, 0x88B8CB8A, 0x99999988, 0xC8380000, 0x00000040, 0x64A9BAC9, 
0x32455556, 0x7C232222, 0x78A7CBCC, 0x0A00073A, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0xCCCC88B7, 0x00007387, 0xA8CCCC04, 0x00001042, 
0xC8480000, 0x00000040, 0x0010A5CC, 0x38000000, 0x000010A5, 0x5A010000, 0x0A00073A, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x0000C000, 0xCCCC88B7, 
0x00007387, 0xBACCCC0C, 0x00001064, 0xC8480000, 0x00000040, 0x0010A5CC, 0x38000000, 0x000010A5, 
0x5A010000, 0x03000701, 0x0228C64C, 0x00000000, 0x00600000, 0x00000000, 0x00000000, 0x00020000, 
0x00040020, 0x00220000, 0xC99B99B9, 0x9B99C9BC, 0x990900C0, 0x99C9CCCC, 0xC8480000, 0x00000040, 
0x9999CCCC, 0x99999999, 0x99999999, 0xAC999999 }; 

// ****   DTI header   ******************************************************

ROM_DATA dti_descr_type img_dti_header =  
 { 
    {"germanEuro.dtl"},    
    {'D','T','I',0x34},    
    {'E','n','g',0x4D},    
    {'2','.','0',0x30},    
    0,                          // h_dte  
    0,                          // p_dte  
    0,                          // h_ram_dte 
    0,                          // p_ram_dte 
    0,                         // cheksum   
    0,                          // h_vex     
    0,                          // p_vex     
    0,                          // h_xrt     
    0,                          // p_xrt     
    0,                          // cheksum   
    0,                          // h_pdf     
    0,                          // p_pdf     
    0,                          // p_ram_pdf 
    0,                          // cheksum   
    0,                          // h_pict    
    0,                          // p_pict    
    0,                          // p_ram_pict
    0                           // cheksum   
 }; 

// **************************************************************************
// *    END OF ALL                                                          *
// **************************************************************************
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\dti_util.cpp ===
/*****************************************************************************
 * DTI_UTIL.C                                    Created: Dec 3 1993
 * Last modification : Dec 12 1997
 ****************************************************************************/

#include "hwr_sys.h"
#include "hwr_swap.h"
#include "zctype.h"

#include "ams_mg.h"
#include "dti.h"
#include "xr_names.h"

#ifndef DUMP_DTI
#define DUMP_DTI 0
#endif

#if USE_POSTPROC
 #include "pdf_file.h"
#endif

#ifndef LSTRIP /* <-------------- LSTRIP !!!! --------------------- */

#ifndef ARMC
 #define LockRamParaData       HWRMemoryLockHandle
 #define UnlockRamParaData     HWRMemoryUnlockHandle
 #if HWR_SYSTEM == MACINTOSH
 	#include "MyFopen.h"
  #define USE_LOCKED_RESOURCES                    1
  #define USE_EXTERN_BUFFER_FOR_LEARNING_INFO     1
  #define PDFUnloadFile ARM_MAC_PDFUnloadFile
  _BOOL   ARM_MAC_PDFUnloadFile(p_ULONG phPDFHeader, p_UCHAR _PTR pPDF); /* DteResource.c */
  p_UCHAR LockRAMPDF(p_UCHAR pdfHandle);  /* DteResource.c */
  _BOOL   UnlockRAMPDF(p_UCHAR pdfHandle,p_UCHAR p_pdf);
 #else
  #define USE_LOCKED_RESOURCES                    0
  #define USE_EXTERN_BUFFER_FOR_LEARNING_INFO     0
 #endif
#else
 #define USE_LOCKED_RESOURCES                     1
 #define USE_EXTERN_BUFFER_FOR_LEARNING_INFO      1
 #define PDFUnloadFile ARM_MAC_PDFUnloadFile
 _BOOL   ARM_MAC_PDFUnloadFile(p_ULONG phPDFHeader, p_UCHAR _PTR pPDF); /* DteResource.c */
 p_UCHAR LockRAMPDF(p_UCHAR pdfHandle);      /* DteResource.c */
 _BOOL   UnlockRAMPDF(p_UCHAR pdfHandle,p_UCHAR p_pdf);
 p_VOID  LockRamParaData(_HMEM HData);       /* LoadResources.c */
 _BOOL   UnlockRamParaData(_HMEM HData);
#endif


#if !DTI_LOAD_FROM_ROM
 #include <stdio.h>
#endif

#if PG_DEBUG
 #include "postcalc.h"
 #include "xrwstat.h"
 #include "wg_stuff.h"
#endif /* PG_DEBUG */

#ifndef LSTRIP
ROM_DATA_EXTERNAL dti_descr_type img_dti_header;
ROM_DATA_EXTERNAL _ULONG         img_dti_body[];
#endif

_INT DumpDtiToC(_ULONG len, p_dti_descr_type dti_descr);

/* ************************************************************************* */
/* *   DTI load                                                            * */
/* ************************************************************************* */

_INT dti_load(p_CHAR dtiname, _INT what_to_load, _VOID _PTR _PTR dp)
 {
  _INT                  i;
  p_dti_descr_type      dti_descr;
  p_dte_sym_header_type sym_descr;
  #if HWR_SYSTEM == MACINTOSH
  _HMEM                 dti_descrH = _NULL;
  #endif
  #if !DTI_LOAD_FROM_ROM
  dti_header_type       dti_header;
  FILE *                dti_file = _NULL;
  #endif  //     #if !DTI_LOAD_FROM_ROM

  #if DTI_COMPRESSED
   _INT                  j, k;
   p_dte_index_type      dte_index;
  #else
  let_table_type _PTR   sym_table;
  #endif

  *dp = _NULL;

  /* ----------- Dig in file header -------------------------------------- */

  #if HWR_SYSTEM == MACINTOSH
  if((dti_descrH = HWRMemoryAllocHandle(sizeof(dti_descr_type))) == _NULL)
   {
    dti_descr = _NULL;
    goto err;
   }
  if((dti_descr = (p_dti_descr_type)HWRMemoryLockHandle(dti_descrH)) == _NULL)
   {
    HWRMemoryFreeHandle(dti_descrH);
    goto err;
   }
  #else
  dti_descr = (p_dti_descr_type)HWRMemoryAlloc(sizeof(dti_descr_type));
  #endif

  if (dti_descr == _NULL) goto err;
  HWRMemSet(dti_descr, 0, sizeof(*dti_descr));

  #if !(DTI_LOAD_FROM_ROM)

  if ((dti_file = fopen(dtiname, "rb")) == _NULL) goto err;

  if (fread(&dti_header, 1, sizeof(dti_header), dti_file) != sizeof(dti_header)) goto err;

  HWRSwapLong(&dti_header.dte_offset);
  HWRSwapLong(&dti_header.dte_len);
  HWRSwapLong(&dti_header.dte_chsum);

  HWRSwapLong(&dti_header.xrt_offset);
  HWRSwapLong(&dti_header.xrt_len);
  HWRSwapLong(&dti_header.xrt_chsum);
  HWRSwapLong(&dti_header.pdf_offset);
  HWRSwapLong(&dti_header.pdf_len);
  HWRSwapLong(&dti_header.pdf_chsum);

  HWRSwapLong(&dti_header.pict_offset);
  HWRSwapLong(&dti_header.pict_len);
  HWRSwapLong(&dti_header.pict_chsum);

  if (HWRStrnCmp(dti_header.object_type, DTI_DTI_OBJTYPE, DTI_ID_LEN) != 0) goto err;
  if (HWRStrnCmp(dti_header.version, DTI_DTI_VER, DTI_ID_LEN/2) != 0) goto err;
  if ((what_to_load & DTI_DTE_REQUEST) && dti_header.dte_offset == 0l) goto err;
  if ((what_to_load & DTI_XRT_REQUEST) && dti_header.xrt_offset == 0l) goto err;
  if ((what_to_load & DTI_PDF_REQUEST) && dti_header.pdf_offset == 0l) goto err;
  if ((what_to_load & DTI_PICT_REQUEST) && dti_header.pict_offset == 0l) goto err;

  /* ----------- Begin load operations ----------------------------------- */

  HWRMemCpy(dti_descr->object_type, dti_header.object_type, DTI_ID_LEN);
  HWRMemCpy(dti_descr->type, dti_header.type, DTI_ID_LEN);
  HWRMemCpy(dti_descr->version, dti_header.version, DTI_ID_LEN);
  HWRStrnCpy(dti_descr->dti_fname, dtiname, DTI_FNAME_LEN-1);
  #else
  UNUSED(dtiname);
  #endif // DTI_LOAD_FROM_ROM

  /* ----------- DTE load operations ------------------------------------- */

  if (what_to_load & DTI_DTE_REQUEST)
   {
    #if !DTI_LOAD_FROM_ROM
    _ULONG dte_i, dte_chsum;

    dti_descr->h_dte = HWRMemoryAllocHandle(dti_header.dte_len);
    if (dti_descr->h_dte == _NULL) goto err;
    dti_descr->p_dte = (p_UCHAR)HWRMemoryLockHandle((_HANDLE)dti_descr->h_dte);
    if (dti_descr->p_dte == _NULL) goto err;
    #else  // DTI_LOAD_FROM_ROM
    HWRMemCpy((p_VOID)(dti_descr), (p_VOID)(&img_dti_header), sizeof(*dti_descr));
    dti_descr->p_dte = (p_UCHAR)(&img_dti_body[0]);
    #endif // DTI_LOAD_FROM_ROM

	dti_descr->p_vex = _NULL;
    dti_descr->h_vex = HWRMemoryAllocHandle(DTI_SIZEOFVEXT + DTI_SIZEOFCAPT);
    if (dti_descr->h_vex == _NULL) goto err;
    dti_descr->p_vex = (p_UCHAR)HWRMemoryLockHandle((_HANDLE)dti_descr->h_vex);
    if (dti_descr->p_vex == _NULL) goto err;
    HWRMemSet(dti_descr->p_vex, 0, DTI_SIZEOFVEXT + DTI_SIZEOFCAPT);

    #if !DTI_LOAD_FROM_ROM
    if (fseek(dti_file, dti_header.dte_offset, SEEK_SET) != 0) goto err;
    if (fread(dti_descr->p_dte, 1, (size_t)dti_header.dte_len, dti_file) != dti_header.dte_len) goto err;

    for (dte_i = 0l, dte_chsum = 0l; dte_i < dti_header.dte_len; dte_i ++)
       dte_chsum += ((p_UCHAR)(dti_descr->p_dte))[dte_i];

    if (dte_chsum != dti_header.dte_chsum) goto err;
    #endif  //     #if !DTI_LOAD_FROM_ROM


    #if DTI_COMPRESSED
    dte_index = (p_dte_index_type)dti_descr->p_dte;

    #if !DTI_LOAD_FROM_ROM
    for (i = 0; i < 256; i ++) HWRSwapInt(&dte_index->sym_index[i]);
    #endif //   #if !DTI_LOAD_FROM_ROM

    for (i = DTI_FIRSTSYM; i < DTI_FIRSTSYM + DTI_NUMSYMBOLS; i ++)
     {
      p_dte_var_header_type pvh;

      if (dte_index->sym_index[i] == 0) continue;
      sym_descr = (p_dte_sym_header_type)((p_CHAR)dti_descr->p_dte + (dte_index->sym_index[i] << 2));
//      HWRMemCpy(dti_descr->p_vex+(i-DTI_FIRSTSYM)*DTI_MAXVARSPERLET, sym_descr->var_vexs, DTI_MAXVARSPERLET);
      pvh    = (p_dte_var_header_type)((p_UCHAR)sym_descr + sizeof(*sym_descr));
      for (j = 0; j < sym_descr->num_vars; j ++)
       {
        *((p_UCHAR)dti_descr->p_vex+(i-DTI_FIRSTSYM)*DTI_MAXVARSPERLET + j) = (_UCHAR)(pvh->nx_and_vex >> DTI_VEX_OFFS);
        k   = sizeof(*pvh) + sizeof(xrp_type)*((pvh->nx_and_vex & DTI_NXR_MASK)-1);
        pvh = (p_dte_var_header_type)((p_UCHAR)pvh + k);
       }
     }
    #else
    sym_table = (let_table_type _PTR)dti_descr->p_dte;

    #if !DTI_LOAD_FROM_ROM
    for (i = 0; i < 256; i ++) HWRSwapLong(&(*sym_table)[i]);
    #endif //   #if !DTI_LOAD_FROM_ROM

    for (i = DTI_FIRSTSYM; i < DTI_FIRSTSYM + DTI_NUMSYMBOLS; i ++)
     {
      if ((*sym_table)[i] == 0) continue;
      sym_descr = (p_dte_sym_header_type)((p_CHAR)dti_descr->p_dte + (*sym_table)[i]);
      HWRMemCpy(dti_descr->p_vex+(i-DTI_FIRSTSYM)*DTI_MAXVARSPERLET, sym_descr->var_vexs, DTI_MAXVARSPERLET);
     }
    #endif

    #if PG_DEBUG
    XrwStatAllocData((p_UCHAR)dti_descr);
    #endif /* PG_DEBUG */

    #if DUMP_DTI && !defined PEGASUS
    DumpDtiToC(dti_header.dte_len, dti_descr);
    #endif /* PG_DEBUG */

    #if !DTI_LOAD_FROM_ROM
    HWRMemoryUnlockHandle((_HANDLE)dti_descr->h_dte); dti_descr->p_dte = _NULL;
    HWRMemoryUnlockHandle((_HANDLE)dti_descr->h_vex); dti_descr->p_vex = _NULL;
    #endif  //  #if !DTI_LOAD_FROM_ROM
   }

  /* ----------- XRT load operations ------------------------------------- */

  #if !DTI_LOAD_FROM_ROM
  if (what_to_load & DTI_XRT_REQUEST)
   {
    _ULONG xrt_i, xrt_chsum;

    dti_descr->h_xrt = HWRMemoryAllocHandle(dti_header.xrt_len);
    if (dti_descr->h_xrt == _NULL) goto err;
    dti_descr->p_xrt = (p_UCHAR)HWRMemoryLockHandle((_HANDLE)dti_descr->h_xrt);
    if (dti_descr->p_xrt == _NULL) goto err;

    if (fseek(dti_file, dti_header.xrt_offset, SEEK_SET) != 0) goto err;
    if (fread(dti_descr->p_xrt, 1, (size_t)dti_header.xrt_len, dti_file) != dti_header.xrt_len) goto err;

    for (xrt_i = 0l, xrt_chsum = 0l; xrt_i < dti_header.xrt_len; xrt_i ++)
      xrt_chsum += (_UCHAR)*(dti_descr->p_xrt + (_UINT)xrt_i);

    if (xrt_chsum != dti_header.xrt_chsum) goto err;

    HWRMemoryUnlockHandle((_HANDLE)dti_descr->h_xrt); dti_descr->p_xrt = _NULL;
   }
  #endif  //     #if !DTI_LOAD_FROM_ROM

  /* ----------- PDF load operations ------------------------------------- */

  #if !DTI_LOAD_FROM_ROM
  if (what_to_load & DTI_PDF_REQUEST)
   {
    dti_descr->h_pdf     = 0l;
    dti_descr->p_pdf     = 0l;
    dti_descr->pdf_chsum = 0l;
    #if USE_POSTPROC
    if (!PDFLoadFile((p_CHAR)dti_file, dti_header.pdf_offset, &(dti_descr->h_pdf))) goto err;
    #endif
   }
  #endif  //     #if !DTI_LOAD_FROM_ROM

  /* ----------- Pictures load operations -------------------------------- */

  #if !DTI_LOAD_FROM_ROM
  if (what_to_load & DTI_PICT_REQUEST)
   {
    dti_descr->h_pict    = 0l;      /* Nothing here now */
    dti_descr->p_pict    = 0l;
    dti_descr->pict_chsum= 0l;
//    HWRMemoryUnlockHandle(dti_descr->h_pict); dti_descr->p_pict = _NULL;
   }
  #endif  //     #if !DTI_LOAD_FROM_ROM

  /* ----------- Closing down -------------------------------------------- */

  #if !DTI_LOAD_FROM_ROM
  fclose(dti_file);
  #endif  //     #if !DTI_LOAD_FROM_ROM
 
  #if HWR_SYSTEM == MACINTOSH
  HWRMemoryUnlockHandle(dti_descrH);
  *dp = (p_VOID)dti_descrH;
  #else
  *dp = (p_VOID _PTR)dti_descr;
  #endif

/* ----- Time to exit ----------------------------------------------------- */
  return 0;
err:
  #if !DTI_LOAD_FROM_ROM
  if (dti_file) fclose(dti_file);
  #endif  //     #if !DTI_LOAD_FROM_ROM

  if (dti_descr != _NULL)
   {
    #if !DTI_LOAD_FROM_ROM
    if (dti_descr->p_dte)  HWRMemoryUnlockHandle((_HANDLE)dti_descr->h_dte);
    if (dti_descr->h_dte)  HWRMemoryFreeHandle((_HANDLE)dti_descr->h_dte);
    if (dti_descr->p_xrt)  HWRMemoryUnlockHandle((_HANDLE)dti_descr->h_xrt);
    if (dti_descr->h_xrt)  HWRMemoryFreeHandle((_HANDLE)dti_descr->h_xrt);
    if (dti_descr->p_pdf)  HWRMemoryUnlockHandle((_HANDLE)dti_descr->h_pdf);
    if (dti_descr->h_pdf)  HWRMemoryFreeHandle((_HANDLE)dti_descr->h_pdf);
    if (dti_descr->p_pict) HWRMemoryUnlockHandle((_HANDLE)dti_descr->h_pict);
    if (dti_descr->h_pict) HWRMemoryFreeHandle((_HANDLE)dti_descr->h_pict);
    #endif  //     #if !DTI_LOAD_FROM_ROM

    // MR moved these out of the #ifstream!DTI_LOAD_FROM_ROM
	// Free them unconditionally
    if (dti_descr->p_vex)  HWRMemoryUnlockHandle((_HANDLE)dti_descr->h_vex);
    if (dti_descr->h_vex)  HWRMemoryFreeHandle((_HANDLE)dti_descr->h_vex);

    #if HWR_SYSTEM == MACINTOSH
    HWRMemoryUnlockHandle(dti_descrH);
    HWRMemoryFreeHandle(dti_descrH);
    #else
    HWRMemoryFree(dti_descr);
    #endif
   }
  return 1;
 }


/* ************************************************************************* */
/*      Unload dat ingredients                                               */
/* ************************************************************************* */
_INT dti_unload(p_VOID _PTR dp)
 {
  p_dti_descr_type pdti;

  if (dp == _NULL) goto err;

  #if HWR_SYSTEM == MACINTOSH
  pdti = (p_dti_descr_type)HWRMemoryLockHandle((_HMEM)(*dp));
  if (pdti == _NULL) HWRMemoryFreeHandle((_HMEM)(*dp));
  #else
  pdti = (p_dti_descr_type)(*dp);
  #endif


  if (pdti != _NULL)
   {
    #if !DTI_LOAD_FROM_ROM
    dti_unlock((p_VOID)pdti);
    if (pdti->h_dte)  HWRMemoryFreeHandle((_HANDLE)pdti->h_dte);
    if (pdti->h_xrt)  HWRMemoryFreeHandle((_HANDLE)pdti->h_xrt);
    if (pdti->h_pict) HWRMemoryFreeHandle((_HANDLE)pdti->h_pict);
    if (pdti->h_ram_dte)  HWRMemoryFreeHandle((_HANDLE)pdti->h_ram_dte);
    #endif /* #if !DTI_LOAD_FROM_ROM */

    #if USE_POSTPROC
    if(pdti->h_pdf) PDFUnloadFile(&(pdti->h_pdf), &(pdti->p_pdf));
    #endif

    #if !USE_EXTERN_BUFFER_FOR_LEARNING_INFO
    if (pdti->h_vex)  HWRMemoryFreeHandle((_HANDLE)pdti->h_vex);
    #endif /* #if !USE_EXTERN_BUFFER_FOR_LEARNING_INFO */

    #if HWR_SYSTEM == MACINTOSH
    HWRMemoryUnlockHandle((_HMEM)(*dp));
    HWRMemoryFreeHandle((_HMEM)(*dp));
    #else
    HWRMemoryFree(*dp);
    #endif

    *dp = _NULL;
   }
err:
  return 0;
 }

/* ************************************************************************* */
/* *   Writes DTI to a disk file                                           * */
/* ************************************************************************* */
#if !DTI_LOAD_FROM_ROM && DTI_COMPRESSED
_INT dti_save(p_CHAR fname, _INT what_to_save, p_VOID dp)
 {
  _INT i;
  p_UCHAR ptr;
  p_dti_descr_type dti = (p_dti_descr_type)dp;
  dti_header_type dti_h;
  FILE *file = _NULL;

  if (dp == _NULL) goto err;

  if ((file = fopen(fname, "wb")) == _NULL) goto err;

// ----------------- Fill dti file header --------------------------------------

  HWRMemSet((p_VOID)&dti_h, 0, sizeof(dti_h));

  HWRMemCpy(dti_h.object_type, DTI_DTI_OBJTYPE, DTI_ID_LEN);
  HWRMemCpy(dti_h.type, DTI_DTI_TYPE, DTI_ID_LEN);
  HWRMemCpy(dti_h.version, DTI_DTI_VER, DTI_ID_LEN);

  if (what_to_save | DTI_DTE_REQUEST)
   {
    dti_h.dte_offset = sizeof(dti_h);
    dti_h.dte_len    = ((p_dte_index_type)dti->p_dte)->len;
    for (i = 0, ptr = dti->p_dte; i < dti_h.dte_len; i ++, ptr ++) dti_h.dte_chsum += *ptr;
   }

  //xrt_offset;
  // xrt_len;
  // xrt_chsum;

  // pdf_offset;
  // pdf_len;
  // pdf_chsum;

  // pict_offset;
  // pict_len;
  // pict_chsum;

// ----------------- Save dti components to file -------------------------------

  if (fwrite(&dti_h, sizeof(dti_h), 1, file) != 1) goto err;

  if (what_to_save | DTI_DTE_REQUEST)
   {
    if (fwrite(dti->p_dte, dti_h.dte_len, 1, file) != 1) goto err;
   }

// ----------------- Close file ------------------------------------------------

  if (file) fclose(file);
  return 0;
err:
  if (file) fclose(file);
  return 1;
 }

#endif /* !DTI_LOAD_FROM_ROM && defined DTI_COMPRESSED */

#if !DTI_LOAD_FROM_ROM
/* ************************************************************************* */
/* *   Lock DTI                                                            * */
/* ************************************************************************* */
_INT dti_lock(p_VOID dti_ptr)
 {
  p_dti_descr_type dp;
  
  if (dti_ptr == _NULL) goto err;

  dp = (p_dti_descr_type)(dti_ptr);

  if (dp == _NULL) goto err;

  #if !USE_LOCKED_RESOURCES
  if (dp->p_dte == _NULL && dp->h_dte != _NULL) dp->p_dte = (p_UCHAR)HWRMemoryLockHandle((_HANDLE)dp->h_dte);
  if (dp->p_xrt == _NULL && dp->h_xrt != _NULL) dp->p_xrt = (p_UCHAR)HWRMemoryLockHandle((_HANDLE)dp->h_xrt);
  if (dp->p_pict== _NULL && dp->h_pict!= _NULL) dp->p_pict= (p_UCHAR)HWRMemoryLockHandle((_HANDLE)dp->h_pict);
  #endif /* #if !USE_LOCKED_RESOURCES */
  
  if (dp->p_ram_dte == _NULL && dp->h_ram_dte != _NULL) dp->p_ram_dte = (p_UCHAR)LockRamParaData((_HANDLE)dp->h_ram_dte);
  
  #if HWR_SYSTEM != MACINTOSH
  if (dp->p_pdf == _NULL && dp->h_pdf != _NULL) dp->p_pdf = (p_UCHAR)HWRMemoryLockHandle((_HANDLE)dp->h_pdf);
  #else
  if (dp->p_ram_pdf != _NULL && dp->p_pdf == _NULL) { if((dp->p_pdf = LockRAMPDF(dp->p_ram_pdf)) == _NULL) dp->p_ram_pdf = _NULL; }
  if (dp->p_pdf == _NULL && dp->h_pdf != _NULL) dp->p_pdf = (p_UCHAR)HWRMemoryLockHandle((_HANDLE)dp->h_pdf);
  #endif
  
  if (dp->p_vex == _NULL && dp->h_vex != _NULL) dp->p_vex = (p_UCHAR)HWRMemoryLockHandle((_HANDLE)dp->h_vex);
  
  return 0;
err:
  return 1;
 }
#endif //     #if !DTI_LOAD_FROM_ROM

#if !DTI_LOAD_FROM_ROM
/* ************************************************************************* */
/* *   UnLock DTI                                                          * */
/* ************************************************************************* */
_INT dti_unlock(p_VOID dti_ptr)
 {
  p_dti_descr_type dp = (p_dti_descr_type)(dti_ptr);

  if (dp == _NULL) goto err;

  #if !USE_LOCKED_RESOURCES
  if (dp->p_dte != _NULL && dp->h_dte != _NULL) {HWRMemoryUnlockHandle((_HANDLE)dp->h_dte); dp->p_dte = _NULL;}
  if (dp->p_xrt != _NULL && dp->h_xrt != _NULL) {HWRMemoryUnlockHandle((_HANDLE)dp->h_xrt); dp->p_xrt = _NULL;}
  if (dp->p_pict!= _NULL && dp->h_pict!= _NULL) {HWRMemoryUnlockHandle((_HANDLE)dp->h_pict);dp->p_pict= _NULL;}
  #endif /* #if !USE_LOCKED_RESOURCES */
  
  if (dp->p_ram_dte != _NULL && dp->h_ram_dte != _NULL) {UnlockRamParaData((_HANDLE)dp->h_ram_dte); dp->p_ram_dte = _NULL;}

  #if HWR_SYSTEM != MACINTOSH
  if (dp->p_pdf != _NULL && dp->h_pdf != _NULL) {HWRMemoryUnlockHandle((_HANDLE)dp->h_pdf); dp->p_pdf = _NULL;}
  #else
  if (dp->p_ram_pdf == _NULL && dp->p_pdf != _NULL && dp->h_pdf != _NULL) {HWRMemoryUnlockHandle((_HANDLE)dp->h_pdf); dp->p_pdf = _NULL;}
  if (dp->p_ram_pdf != _NULL && dp->p_pdf != _NULL) {UnlockRAMPDF(dp->p_ram_pdf,dp->p_pdf); dp->p_pdf = _NULL;}
  #endif
  
  if (dp->p_vex != _NULL && dp->h_vex != _NULL) {HWRMemoryUnlockHandle((_HANDLE)dp->h_vex); dp->p_vex = _NULL;}
  
  return 0;
err:
  return 1;
 }
#endif //     #if !DTI_LOAD_FROM_ROM

#if DTI_LRN_SUPPORTFUNC
/* ************************************************************************* */
/*        Check if variant enabled for current xrcm                          */
/* ************************************************************************* */
_INT  CheckVarActive(_UCHAR chIn, _UCHAR nv, _UCHAR ww, p_VOID dtp)
 {
  p_dti_descr_type      dp = (p_dti_descr_type)dtp;

  #if DTI_COMPRESSED
  p_dte_var_header_type pvh;

  if (GetVarHeader((_UCHAR)OSToRec(chIn), nv, &pvh, dp)) goto err;
  if ((pvh->veis & (_UCHAR)(ww << DTI_OFS_WW)) == 0) goto err;
  #else
  _INT                  numv;
  p_dte_sym_header_type let_descr;

  if ((numv = GetSymDescriptor((_UCHAR)OSToRec(chIn), nv, &let_descr, dp)) < 0) goto err;
  if ((let_descr->var_veis[numv] & (_UCHAR)(ww << DTI_OFS_WW)) == 0) goto err;
  #endif

  return 1;
err:
  return 0;
 }

/* ************************************************************************* */
/*        Get number of vars of requested letter                             */
/* ************************************************************************* */
_INT  GetNumVarsOfChar(_UCHAR chIn, p_VOID dtp)
 {
  _INT                  nrom, nram;
  p_dte_sym_header_type let_descr;
  p_dti_descr_type      dp = (p_dti_descr_type)dtp;

  if (GetSymDescriptor((_UCHAR)OSToRec(chIn), 0, &let_descr, dp) < 0) goto err;
  nrom = let_descr->num_vars;
  if (GetSymDescriptor((_UCHAR)OSToRec(chIn), (_UCHAR)nrom, &let_descr, dp) < 0) nram = 0;
   else nram = let_descr->num_vars;

  return nrom+nram;
err:
  return 0;
 }

/* ************************************************************************* */
/*        Get variant of a character                                         */
/* ************************************************************************* */
_INT GetVarOfChar(_UCHAR chIn, _UCHAR nv, p_xrp_type xvb, p_VOID dtp)
 {
  #if DTI_COMPRESSED
  _INT                  varlen;
  p_dte_var_header_type pvh;
  p_dti_descr_type      dp = (p_dti_descr_type)dtp;

  if (GetVarHeader((_UCHAR)OSToRec(chIn), nv, &pvh, dp)) goto err;

  varlen = pvh->nx_and_vex & DTI_NXR_MASK;

  HWRMemCpy(xvb, pvh->xrs, varlen * sizeof(xrp_type));
  HWRMemSet((xvb+varlen), 0, sizeof(xrp_type));
  #else

  _INT                  i, varlen, numv;
  p_dte_sym_header_type let_descr;
  p_dti_descr_type      dp = (p_dti_descr_type)dtp;
  p_xrp_type            varptr;

  if ((numv = GetSymDescriptor((_UCHAR)OSToRec(chIn), nv, &let_descr, dp)) < 0) goto err;

  varptr = (p_xrp_type)((p_UCHAR)let_descr + sizeof(dte_sym_header_type));

  for (i = 0; i < numv && i < DTI_MAXVARSPERLET; i ++)
    varptr += let_descr->var_lens[i];

  varlen = let_descr->var_lens[numv];

  HWRMemCpy(xvb, varptr, varlen * sizeof(xrp_type));
  HWRMemSet((xvb+varlen), 0, sizeof(xrp_type));
  #endif

  return varlen;
err:
  return 0;
 }

/* ************************************************************************* */
/*        Get variant length for character                                   */
/* ************************************************************************* */
_INT  GetVarLenOfChar(_UCHAR chIn, _UCHAR nv, p_VOID dtp)
 {
  p_dti_descr_type      dp = (p_dti_descr_type)dtp;
  _INT                  varlen;

  #if DTI_COMPRESSED
  p_dte_var_header_type pvh;

  if (GetVarHeader((_UCHAR)OSToRec(chIn), nv, &pvh, dp)) goto err;
  varlen = pvh->nx_and_vex & DTI_NXR_MASK;
  if (varlen > DTI_XR_SIZE) goto err;
  #else
  _INT                  numv;
  p_dte_sym_header_type let_descr;

  if ((numv = GetSymDescriptor((_UCHAR)OSToRec(chIn), nv, &let_descr, dp)) < 0) goto err;
  varlen = let_descr->var_lens[numv];
  if (varlen > DTI_XR_SIZE) goto err;
  #endif

  return varlen;
err:
  return 0;
 }

/* ************************************************************************* */
/*        Return extra value (2-nd byte) for letter variant                  */
/* ************************************************************************* */
_INT  GetVarExtra(_UCHAR chIn, _UCHAR nv, p_VOID dtp)
 {
  p_dti_descr_type dp = (p_dti_descr_type)dtp;
  _INT             varveis;
  #if DTI_COMPRESSED
  p_dte_var_header_type pvh;

  if (GetVarHeader((_UCHAR)OSToRec(chIn), nv, &pvh, dp)) goto err;
  varveis = pvh->veis;
  #else
  _INT                  numv;
  p_dte_sym_header_type let_descr;

  if ((numv = GetSymDescriptor((_UCHAR)OSToRec(chIn), nv, &let_descr, dp)) < 0) goto err;
  varveis   = let_descr->var_veis[numv];
  #endif

  return varveis;
err:
  return -1;
 }

/* ************************************************************************* */
/*        Return VEX value for letter variant                                */
/* ************************************************************************* */
_INT  GetVarVex(_UCHAR chIn, _UCHAR nv, p_VOID dtp)
 {
  _USHORT               varvex;
  p_dte_sym_header_type let_descr;
  p_dti_descr_type      dp = (p_dti_descr_type)dtp;
  p_dte_vex_type        vexbuf;

  if (GetSymDescriptor((_UCHAR)OSToRec(chIn), nv, &let_descr, dp) < 0) goto err;

  vexbuf      = (p_dte_vex_type)dp->p_vex;
  if (vexbuf == _NULL) goto err;

  varvex    = (*vexbuf)[OSToRec(chIn)-DTI_FIRSTSYM][nv];

  varvex   &= 0x07;

  return (_SHORT)varvex;
err:
  return -1;
 }
/* ************************************************************************* */
/*        Set VEX value for letter variant                                   */
/* ************************************************************************* */
_INT  SetVarVex(_UCHAR chIn, _UCHAR nv, _UCHAR vex, p_VOID dtp)
 {
  p_dte_sym_header_type let_descr;
  _UCHAR                ch;
  p_dti_descr_type      dp = (p_dti_descr_type)dtp;
  p_dte_vex_type        vexbuf;

  if (GetSymDescriptor((_UCHAR)OSToRec(chIn), nv, &let_descr, dp) < 0) goto err;

  vexbuf      = (p_dte_vex_type)dp->p_vex;
  if (vexbuf == _NULL) goto err;

  ch = (_UCHAR)OSToRec(chIn);

  (*vexbuf)[ch-DTI_FIRSTSYM][nv] &= 0xf8;
  (*vexbuf)[ch-DTI_FIRSTSYM][nv] |= (_UCHAR)(vex & 0x07);

  return 0;
err:
  return 1;
 }

/* ************************************************************************* */
/*        Return Flag of capitalization change for the variant               */
/* ************************************************************************* */
_INT  GetVarCap(_UCHAR chIn, _UCHAR nv, p_VOID dtp)
 {
  _INT                  varcap;
  p_dte_sym_header_type let_descr;
  p_dti_descr_type      dp = (p_dti_descr_type)dtp;
  p_dte_vex_type        vexbuf;
  p_UCHAR               capbuf;

  if (GetSymDescriptor((_UCHAR)OSToRec(chIn), nv, &let_descr, dp) < 0) goto err;

  vexbuf      = (p_dte_vex_type)dp->p_vex;
  if (vexbuf == _NULL) goto err;

  capbuf    = (p_UCHAR)vexbuf + DTI_SIZEOFVEXT;
  varcap    = (capbuf[((OSToRec(chIn)-DTI_FIRSTSYM)*DTI_MAXVARSPERLET+nv)/8] & (0x01 << (nv%8))) != 0;

  return varcap;
err:
  return -1;
 }
/* ************************************************************************* */
/*        Set Capitalization flag for a variant                              */
/* ************************************************************************* */
_INT  SetVarCap(_UCHAR chIn, _UCHAR nv, _UCHAR cap, p_VOID dtp)
 {
  _UCHAR                ch;
  p_dte_sym_header_type let_descr;
  p_dti_descr_type      dp = (p_dti_descr_type)dtp;
  p_dte_vex_type        vexbuf;
  p_UCHAR               capbuf;

  if (GetSymDescriptor((_UCHAR)OSToRec(chIn), nv, &let_descr, dp) < 0) goto err;

  vexbuf      = (p_dte_vex_type)dp->p_vex;
  if (vexbuf == _NULL) goto err;

  ch        = (_UCHAR)OSToRec(chIn);

  capbuf    = (p_UCHAR)vexbuf + DTI_SIZEOFVEXT;
  capbuf[((ch-DTI_FIRSTSYM)*DTI_MAXVARSPERLET+nv)/8] &= (_UCHAR)(~(0x01 << (nv%8)));
  if (cap) capbuf[((ch-DTI_FIRSTSYM)*DTI_MAXVARSPERLET+nv)/8] |= (_UCHAR)(0x01 << (nv%8));

  return 0;
err:
  return 1;
 }

/* ************************************************************************* */
/*        Set default values of cap flags                                    */
/* ************************************************************************* */
_INT  SetDefCaps(p_VOID dtp)
 {
  p_dti_descr_type     dp = (p_dti_descr_type)dtp;
  p_dte_vex_type       vexbuf;
  p_UCHAR              capbuf;

  if (dp == _NULL) goto err;
  vexbuf      = (p_dte_vex_type)dp->p_vex;
  if (vexbuf == _NULL) goto err;

  capbuf    = (p_UCHAR)vexbuf + DTI_SIZEOFVEXT;

  HWRMemSet(capbuf, 0, DTI_SIZEOFCAPT);

  return 0;
err:
  return 1;
 }

/* ************************************************************************* */
/*        Reset VEX values for all letter variants                           */
/* ************************************************************************* */
_INT  SetDefVexes(p_VOID dtp)
 {
  _INT                  i;
  _INT                  loc;
  p_dte_sym_header_type let_descr;
  p_dti_descr_type      dp = (p_dti_descr_type)dtp;
  p_dte_vex_type        vexbuf;


  #if DTI_COMPRESSED
  _INT                  j, k, d;
  p_dte_var_header_type pvh;

  if (dp == _NULL || dp->p_vex == _NULL) goto err;

  vexbuf      = (p_dte_vex_type)dp->p_vex;

  for (i = DTI_FIRSTSYM; i < DTI_FIRSTSYM + DTI_NUMSYMBOLS; i ++)
   {
    for (d = 0, loc = 0; d < 2; d ++) // Take RamDTE into the loop
     { 
      if (GetSymDescriptor((_UCHAR)i, loc, &let_descr, dp) < 0) continue;
  
      pvh    = (p_dte_var_header_type)((p_UCHAR)let_descr + sizeof(*let_descr));
      (*vexbuf)[i-DTI_FIRSTSYM][loc] = (_UCHAR)(pvh->nx_and_vex >> DTI_VEX_OFFS);
      for (j = 1; j < let_descr->num_vars && j < DTI_MAXVARSPERLET; j ++)
       {
        k   = sizeof(*pvh) + sizeof(xrp_type)*((pvh->nx_and_vex & DTI_NXR_MASK)-1);
        pvh = (p_dte_var_header_type)((p_UCHAR)pvh + k);
        (*vexbuf)[i-DTI_FIRSTSYM][j+loc] = (_UCHAR)(pvh->nx_and_vex >> DTI_VEX_OFFS);
       }

      loc = let_descr->num_vars;
     }
   }
//    for (j = 0; j < let_descr->nv; j ++)
//     {
//      k = GetVarVex((_UCHAR)(i), (_UCHAR)(j), dtp);
//      if (k < 0) k = 0;
//      (*vexbuf)[i-DTI_FIRSTSYM][j] = (_UCHAR)k;
//     }

  #else  //   #if DTI_COMPRESSED

  if (dp == _NULL || dp->p_vex == _NULL) goto err;

  vexbuf      = (p_dte_vex_type)dp->p_vex;

  for (i = DTI_FIRSTSYM; i < DTI_FIRSTSYM + DTI_NUMSYMBOLS; i ++)
   {
    if (GetSymDescriptor((_UCHAR)i, 0, &let_descr, dp) < 0) loc = 0;
     else
     {
      HWRMemCpy(&(*vexbuf)[i-DTI_FIRSTSYM][0], let_descr->var_vexs, sizeof(let_descr->var_vexs));
      loc = let_descr->num_vars;
     }

    if (GetSymDescriptor((_UCHAR)i, (_UCHAR)loc, &let_descr, dp) >= 0)
      HWRMemCpy(&(*vexbuf)[i-DTI_FIRSTSYM][loc], let_descr->var_vexs, sizeof(let_descr->var_vexs)-loc*(sizeof(let_descr->var_vexs[0])));
   }

  #endif //   #if DTI_COMPRESSED


  return 0;
err:
  return 1;
 }

/* ************************************************************************* */
/*        Set fly learn counter value                                        */
/* ************************************************************************* */
_INT  SetVarCounter(_UCHAR chIn, _UCHAR nv, _UCHAR cnt, p_VOID dtp)
 {
  p_dte_sym_header_type let_descr;
  _UCHAR                ch;
  p_dti_descr_type      dp = (p_dti_descr_type)dtp;
  p_dte_vex_type        vexbuf;

  if (GetSymDescriptor((_UCHAR)OSToRec(chIn), nv, &let_descr, dp) < 0) goto err;

  if ((vexbuf = (p_dte_vex_type)dp->p_vex) == _NULL) goto err;

  ch = (_UCHAR)OSToRec(chIn);

  (*vexbuf)[ch-DTI_FIRSTSYM][nv] &= 0x7;
  (*vexbuf)[ch-DTI_FIRSTSYM][nv] |= (_UCHAR)((cnt & 0x1F) << 3);

  return 0;
err:
  return 1;
 }

/* ************************************************************************* */
/*        Return Group number for a prototype                                */
/* ************************************************************************* */
_INT  GetVarGroup(_UCHAR chIn, _UCHAR nv, p_VOID dtp)
 {
  p_dti_descr_type      dp = (p_dti_descr_type)dtp;
  #define GROUP_MASK  0x0007
  #define GROUP_SHIFT      1

  #if DTI_COMPRESSED
  p_dte_var_header_type pvh;

  if (GetVarHeader((_UCHAR)OSToRec(chIn), nv, &pvh, dp)) goto err;
  return ((pvh->veis >> GROUP_SHIFT) & GROUP_MASK);
  #else
  _INT                  numv;
  _SHORT                vargroup;
  p_dte_sym_header_type let_descr;

  if ((numv = GetSymDescriptor((_UCHAR)OSToRec(chIn), nv, &let_descr, dp)) < 0) goto err;

  vargroup = let_descr->var_veis[numv];
  vargroup = (_SHORT)((vargroup >> GROUP_SHIFT) & GROUP_MASK);

  return vargroup;
  #endif
err:
  return -1;
 }

#if 0 // Fight for code  size
ROM_DATA_EXTERNAL _UCHAR DefaultSmall2Cap[CAP_TABLE_NUM_LET][CAP_TABLE_NUM_VAR];
ROM_DATA_EXTERNAL _UCHAR PalmerSmall2Cap[CAP_TABLE_NUM_LET][CAP_TABLE_NUM_VAR];
ROM_DATA_EXTERNAL _UCHAR BlockSmall2Cap[CAP_TABLE_NUM_LET][CAP_TABLE_NUM_VAR];
/* ************************************************************************* */
/*        Return Group number for a corresponding cap pair                   */
/* ************************************************************************* */
_INT GetPairCapGroup(_UCHAR let, _UCHAR groupNum, _UCHAR EnableVariantSet)
 {
  _INT            i;
  _UCHAR          sym;
  cap_table_type *Small2Cap;
  _BOOL           Cap = 0;
  _INT            vargroup;

  switch(EnableVariantSet)
   {
    case WW_GENERAL: {Small2Cap = &DefaultSmall2Cap; break;}
    case WW_PALMER:  {Small2Cap = &PalmerSmall2Cap;  break;}
    case WW_BLOCK:   {Small2Cap = &BlockSmall2Cap;   break;}
    default:          goto err;
   }

  if (groupNum >= CAP_TABLE_NUM_VAR) goto err;
  sym = (_UCHAR)ToLower(let);
  if (sym < 'a') goto err;
  if (sym != let)    Cap = 1;

#if defined(FOR_SWED) || defined(FOR_GERMAN)
  switch(sym)
   {
     case OS_a_umlaut:   {sym = ('z'-'a') + 1; break;}
     case OS_o_umlaut:   {sym = ('z'-'a') + 2; break;}
     case OS_a_angstrem: {sym = ('z'-'a') + 3; break;}
#ifdef FOR_GERMAN
     case OS_u_umlaut:   {sym = ('z'-'a') + 4; break;}
#endif
     default:            {if (sym > 'z') goto err;
                          sym -= 'a';
                          break;
                         }
   }
#else
  sym -= 'a';
#endif

  if (sym >= CAP_TABLE_NUM_LET) goto err;

  if (!Cap)
   {
    vargroup = (*Small2Cap)[sym][groupNum];
    if (vargroup < CAP_TABLE_NUM_VAR) goto done;
     else goto err;
   }

  for(i = 0; i < CAP_TABLE_NUM_VAR && (*Small2Cap)[sym][i] != groupNum; i++);
  if ( i == CAP_TABLE_NUM_VAR) goto err;
   else vargroup = i;

done:
  return vargroup;
err:
  return -1;
 }
#endif // 0

#if 0
/* ************************************************************************* */
/*        Temp function to tell DICT the length of each letter               */
/* ************************************************************************* */
_VOID LetXrLength(p_UCHAR min, p_UCHAR max, _SHORT let,  p_VOID dtp)
 {
  p_dte_sym_header_type let_descr;
  p_dti_descr_type      dp = (p_dti_descr_type)dtp;

  if (GetSymDescriptor((_UCHAR)OSToRec(let), 0, &let_descr, dp) < 0) goto err;

  *min = let_descr->ave_len;
  *max = let_descr->ave_len;

  return;
err:
  *min = 1;
  *max = 3;
  return;
 }
#endif /* if 0 */

#endif // DTI_LRN_SUPPORTFUNC

/* ************************************************************************* */
/*        Return Flag allowing this proto be used as one with opp cap        */
/* ************************************************************************* */
_INT  GetVarRewcapAllow(_UCHAR chIn, _UCHAR nv, p_VOID dtp)
 {
  p_dti_descr_type      dp = (p_dti_descr_type)dtp;

  #if DTI_COMPRESSED
  p_dte_var_header_type pvh;

  if (GetVarHeader((_UCHAR)OSToRec(chIn), nv, &pvh, dp)) goto err;
  return (pvh->veis & (_UCHAR)(DTI_CAP_BIT)) ? 0 : 1;
  #else
  
  _INT                  numv;
  p_dte_sym_header_type let_descr;

  if ((numv = GetSymDescriptor((_UCHAR)OSToRec(chIn), nv, &let_descr, dp)) < 0) goto err;
  return (let_descr->var_veis[numv] & (_UCHAR)(DTI_CAP_BIT)) ? 0 : 1;
  #endif

err:
  return -1;
 }

/* ************************************************************************* */
/*        Return CHL position value for variant                              */
/* ************************************************************************* */
_INT  GetVarPosSize(_UCHAR chIn, _UCHAR nv, p_VOID dtp)
 {
  #if DTI_COMPRESSED
  _INT                  j, k;
  _INT                  varpos, numv;
  p_dte_sym_header_type let_descr;
  p_dte_var_header_type pvh;
  p_dti_descr_type      dp = (p_dti_descr_type)dtp;

  if ((numv = GetSymDescriptor((_UCHAR)OSToRec(chIn), nv, &let_descr, dp)) < 0) goto err;

  pvh    = (p_dte_var_header_type)((p_UCHAR)let_descr + sizeof(*let_descr));
  for (j = 0; j < numv; j ++)
   {
    k   = sizeof(*pvh) + sizeof(xrp_type)*((pvh->nx_and_vex & DTI_NXR_MASK)-1);
    pvh = (p_dte_var_header_type)((p_UCHAR)pvh + k);
   }

  varpos  = pvh->pos;
  varpos |= pvh->size << 8;
  if (varpos) varpos |= let_descr->loc_vs_border << 16; // Temp preserve -- if not defined data in DTE, let it be 0 (for later checks)
  
  #else // Compressed
  
  _INT                 num_vars;
  _INT                 varpos;
  _UCHAR               ch;
  let_table_type  _PTR letxr_tabl;
  p_dte_sym_header_type let_descr;
  p_dti_descr_type     dp = (p_dti_descr_type)dtp;

  if (dp == _NULL) goto err;

  ch          = (_UCHAR)OSToRec(chIn);
  let_descr   = _NULL;

  if (dp->p_ram_dte != _NULL) // Is RAM dte present?
   {
    letxr_tabl = (p_let_table_type)dp->p_ram_dte;
    if ((*letxr_tabl)[ch] != 0l)
      let_descr = (p_dte_sym_header_type)(dp->p_ram_dte + (*letxr_tabl)[ch]);
   }

  if (let_descr == _NULL && dp->p_dte != _NULL) // Is ROM dte present?
   {
    letxr_tabl = (p_let_table_type)dp->p_dte;
    if ((*letxr_tabl)[ch] != 0l)
      let_descr = (p_dte_sym_header_type)(dp->p_dte + (*letxr_tabl)[ch]);
   }

  if (let_descr == _NULL) goto err;
  num_vars  = let_descr->num_vars;

  if (nv >= num_vars) goto err; /* No such numbered variant in this letter */

  varpos    = let_descr->var_pos[nv];
  varpos   |= let_descr->var_size[nv] << 8;
  if (varpos) varpos |= let_descr->loc_vs_border << 16; // Temp preserve -- if not defined data in DTE, let it be 0 (for later checks)

  #endif // Compressed
  
  return (_INT)(varpos);
err:
  return -1;
 }

/* ************************************************************************* */
/*        Return AutoCorr value for letter variant                           */
/* ************************************************************************* */
#if PG_DEBUG /*HWR_SYSTEM != MACINTOSH */
#if DTI_COMPRESSED
_INT  GetAutoCorr(_UCHAR chIn, _UCHAR nv, p_VOID dtp)
 {
  _INT                  numv, varlen, i, autoCorr;
  p_dte_var_header_type varptr;
  p_dti_descr_type      dp = (p_dti_descr_type)dtp;
  p_xrp_type            xrp;

  if (GetVarHeader((_UCHAR)OSToRec(chIn), nv, &varptr, dp)) goto err;

  varlen = varptr->nx_and_vex & DTI_NXR_MASK;
  for(i = 0, autoCorr = 0; i < varlen; i++)
   {
    if ((varptr->xrs[i].penl & DTI_PENL_MASK) != 0) autoCorr++;
   }

  return autoCorr*XRMC_DEF_CORR_VALUE;
err:
  return -1;
 }
#else // #if DTI_COMPRESSED

_INT  GetAutoCorr(_UCHAR chIn, _UCHAR nv, p_VOID dtp)
 {
  _INT                  numv, varlen, i, autoCorr;
  p_dte_sym_header_type let_descr;
  p_dti_descr_type      dp = (p_dti_descr_type)dtp;
  p_xrp_type            varptr;

  if ((numv = GetSymDescriptor((_UCHAR)OSToRec(chIn), nv, &let_descr, dp)) < 0) goto err;

  varptr = (p_xrp_type)((p_UCHAR)let_descr + sizeof(dte_sym_header_type));

  for (i = 0; i < numv && i < DTI_MAXVARSPERLET; i ++)
    varptr += let_descr->var_lens[i];

  varlen = let_descr->var_lens[numv];
  for(i = 0, autoCorr = 0; i < varlen; i++)
   {
    if (varptr[i].penl != 0) autoCorr++;
   }

  return autoCorr*XRMC_DEF_CORR_VALUE;
err:
  return -1;
 }

#endif // #if DTI_COMPRESSED
#endif // PG_DEBUG

#if DTI_COMPRESSED
/* ************************************************************************* */
/*        Get pointer to variant header                                      */
/* ************************************************************************* */
_INT GetVarHeader(_UCHAR sym, _UCHAR nv, p_dte_var_header_type _PTR ppvh, p_VOID dtp)
 {
  _INT                  j, k;
  _INT                  numv;
  p_dte_sym_header_type let_descr;
  p_dte_var_header_type pvh;
  p_dti_descr_type      dp = (p_dti_descr_type)dtp;


  if ((numv = GetSymDescriptor(sym, nv, &let_descr, dp)) < 0) goto err;

  pvh    = (p_dte_var_header_type)((p_UCHAR)let_descr + sizeof(*let_descr));
  for (j = 0; j < numv; j ++)
   {
    k   = sizeof(*pvh) + sizeof(xrp_type)*((pvh->nx_and_vex & DTI_NXR_MASK)-1);
    pvh = (p_dte_var_header_type)((p_UCHAR)pvh + k);
   }

  *ppvh = pvh;

  return 0;
err:
  return 1;
 }
#endif  // DTI_COMPRESSED

#if DTI_COMPRESSED && DTI_LRN_SUPPORTFUNC
/* ************************************************************************* */
/*        Get Correct index table for a given sym                            */
/* ************************************************************************* */
_INT GetSymIndexTable(_UCHAR sym, _UCHAR numv, p_dte_index_type _PTR pi, p_VOID dtp)
 {
  _INT                  n, nv;
  _INT                  lrom = 0;
  p_dte_sym_header_type sfc;
  p_dte_index_type      plt;
  p_dti_descr_type      dp = (p_dti_descr_type)dtp;

  if (dp == _NULL) goto err;

  for (n = 0, nv = 0; n < 2; n ++) // Cycle by DTI change
   {
    sfc = _NULL;

    if (n == 0 && dp->p_dte != _NULL)     // Is ROM dte present?
     {
      plt = (p_dte_index_type)dp->p_dte;
      if (plt->sym_index[sym] != 0l) sfc = (p_dte_sym_header_type)(dp->p_dte + (plt->sym_index[sym] << 2));
      if (sfc == _NULL) continue; // Pointer was 0!, symbol not defined
     }

    if (n == 1 && dp->p_ram_dte != _NULL) // Is RAM dte present?
     {
      plt = (p_dte_index_type)dp->p_ram_dte;
      if (plt->sym_index[sym] != 0l) sfc = (p_dte_sym_header_type)(dp->p_ram_dte + (plt->sym_index[sym] << 2));
      lrom = nv;
     }

    if (sfc == _NULL) continue;
    if (sfc->num_vars == 0) continue;

    nv += sfc->num_vars;
    if (nv > DTI_MAXVARSPERLET) goto err;

    if (numv < nv) break;
   }

  if (nv   <= 0)  goto err;
  if (numv >= nv) goto err;

  *pi = plt;

  return numv-lrom;
err:
  return -1;
 }

#endif  // DTI_COMPRESSED && DTI_LRN_SUPPORTFUNC
/* ************************************************************************* */
/*        Get Sym Descriptor Header Pointer and new Variant Number           */
/* ************************************************************************* */
_INT GetSymDescriptor(_UCHAR sym, _UCHAR numv, p_dte_sym_header_type _PTR psfc, p_VOID dtp)
 {
  _INT                  n, nv;
  _INT                  lrom = 0;
  p_dte_sym_header_type sfc;
  p_dti_descr_type      dp = (p_dti_descr_type)dtp;
  #if DTI_COMPRESSED
  p_dte_index_type      plt;
  #else
  p_let_table_type      plt;
  #endif

  if (dp == _NULL) goto err;

  for (n = 0, nv = 0; n < 2; n ++) // Cycle by DTI change
   {
    sfc = _NULL;

    if (n == 0 && dp->p_dte != _NULL)     // Is ROM dte present?
     {
     #if DTI_COMPRESSED
      plt = (p_dte_index_type)dp->p_dte;
      if (plt->sym_index[sym] != 0l) sfc = (p_dte_sym_header_type)(dp->p_dte + (plt->sym_index[sym] << 2));
     #else
      plt = (p_let_table_type)dp->p_dte;
      if ((*plt)[sym] != 0l) sfc = (p_dte_sym_header_type)(dp->p_dte + (*plt)[sym]);
     #endif
      if (sfc == _NULL) continue; // Pointer was 0!, symbol not defined
     }

    if (n == 1 && dp->p_ram_dte != _NULL) // Is RAM dte present?
     {
     #if DTI_COMPRESSED
      plt = (p_dte_index_type)dp->p_ram_dte;
      if (plt->sym_index[sym] != 0l) sfc = (p_dte_sym_header_type)(dp->p_ram_dte + (plt->sym_index[sym] << 2));
     #else
      plt = (p_let_table_type)dp->p_ram_dte;
      if ((*plt)[sym] != 0l) sfc = (p_dte_sym_header_type)(dp->p_ram_dte + (*plt)[sym]);
     #endif
      lrom = nv;
     }

    if (sfc == _NULL) continue;
    if (sfc->num_vars == 0) continue;

    nv += sfc->num_vars;
    if (nv > DTI_MAXVARSPERLET) 
     {
      goto err;
     }

    if (numv < nv) break;
   }

  if (nv   <= 0)  goto err;
  if (numv >= nv) goto err;
  if (sfc == _NULL) goto err;

  *psfc = sfc;

  return numv-lrom;
err:
  return -1;
 }

/* ************************************************************************* */
/* ************************************************************************* */
/*        Debug functions                                                    */
/* ************************************************************************* */
/* ************************************************************************* */
#if DUMP_DTI && !defined PEGASUS
/* ************************************************************************* */
/*        Dump DTI to C file                                                 */
/* ************************************************************************* */
_INT DumpDtiToC(_ULONG dte_len, p_dti_descr_type dti_descr)
 {
  _ULONG    i, len;
  p_ULONG ptr;
  FILE *  file;

  if ((file = fopen("dti_img.cpp", "wt")) != _NULL)
   {
    fprintf(file, "// **************************************************************************\n");
    fprintf(file, "// *    DTI file as C file                                                  *\n");
    fprintf(file, "// **************************************************************************\n");

    fprintf(file, "\n#include \"ams_mg.h\"  \n");
    fprintf(file, "#include \"dti.h\"  \n\n");

    fprintf(file, "// ****   DTI body   ********************************************************\n");

    len = dte_len/4; // len was in bytes
    fprintf(file, "ROM_DATA _ULONG img_dti_body[%d] =  \n", len + 1);
    fprintf(file, " {  \n");
    for (i = 0, ptr = (p_ULONG)dti_descr->p_dte; i < len; i ++, ptr ++)
     {
      fprintf(file, "0x%08X", *ptr);
      if (i < len-1) fprintf(file, ", ");
      if (i%8 == 7)  fprintf(file, "\n");
     }
    fprintf(file, " }; \n\n");

    fprintf(file, "// ****   DTI header   ******************************************************\n\n");

    fprintf(file, "ROM_DATA dti_descr_type img_dti_header =  \n");
    fprintf(file, " { \n");
    fprintf(file, "    {\"%s\"},    \n", dti_descr->dti_fname);
    fprintf(file, "    {'%c','%c','%c',0x%02X},    \n", dti_descr->object_type[0], dti_descr->object_type[1], dti_descr->object_type[2], dti_descr->object_type[3]);
    fprintf(file, "    {'%c','%c','%c',0x%02X},    \n", dti_descr->type[0], dti_descr->type[1], dti_descr->type[2], dti_descr->type[3]);
    fprintf(file, "    {'%c','%c','%c',0x%02X},    \n", dti_descr->version[0], dti_descr->version[1], dti_descr->version[2], dti_descr->version[3]);

    fprintf(file, "    0,                          // h_dte  \n");
    //fprintf(file, "  (p_UCHAR)&img_dti_body[0],    // p_dte  \n");
    fprintf(file, "    0,                          // p_dte  \n");

    fprintf(file, "    0,                          // h_ram_dte \n");
    fprintf(file, "    0,                          // p_ram_dte \n");

    fprintf(file, "    %d,                         // cheksum   \n", dti_descr->dte_chsum);

    fprintf(file, "    0,                          // h_vex     \n");
    fprintf(file, "    0,                          // p_vex     \n");

    fprintf(file, "    0,                          // h_xrt     \n");
    fprintf(file, "    0,                          // p_xrt     \n");
    fprintf(file, "    0,                          // cheksum   \n");

    fprintf(file, "    0,                          // h_pdf     \n");
    fprintf(file, "    0,                          // p_pdf     \n");
    fprintf(file, "    0,                          // p_ram_pdf \n");
    fprintf(file, "    0,                          // cheksum   \n");

    fprintf(file, "    0,                          // h_pict    \n");
    fprintf(file, "    0,                          // p_pict    \n");
    fprintf(file, "    0,                          // p_ram_pict\n");
    fprintf(file, "    0                           // cheksum   \n");

    fprintf(file, " }; \n\n");


    fprintf(file, "// **************************************************************************\n");
    fprintf(file, "// *    END OF ALL                                                          *\n");
    fprintf(file, "// **************************************************************************\n");

    fclose(file);
    err_msg("DTI output to dti_img.cpp.");
   }

  return 0;
 }

#endif


#endif // LSTRIP
/* ************************************************************************* */
/*        END  OF ALL                                                        */
/* ************************************************************************* */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\el_aps.cpp ===
#ifndef LSTRIP


/*****************************************************************************/
/*****  E R I C  *************************************************************/
/*****************************************************************************/

#include "hwr_sys.h"
#include "ams_mg.h"
#include "lowlevel.h"
#include "lk_code.h"
#include "def.h"
#include "low_dbg.h"
#include "calcmacr.h"

#if PG_DEBUG
#include "pg_debug.h"
#endif

#ifdef  FORMULA
  #include "frm_con.h"

  #ifdef  FRM_WINDOWS
    #include "edit.h"
    #undef   PG_DEBUG
    #define  PG_DEBUG  (FRM_DEBUG && !FOR_EDIT)
  #endif
#endif /*FORMULA*/

#if !defined (FOR_GERMAN)
/*****************************************************************************/
/***** COMMON CODE ***********************************************************/
/*****************************************************************************/
static _BOOL IsUpperSpl(p_SPECL pElem)
{
    if(IsUpperElem(pElem))
    {
        if(pElem->mark==END && HEIGHT_OF(pElem)>_UI2_) return _FALSE;
        else                                           return _TRUE;
    }
//    #ifdef FOR_FRENCH
    {
        if(pElem->code==_Gr_ || pElem->code==_Gl_)
        {
            if(HEIGHT_OF(pElem)<_MD_) return _TRUE;
        }
    }
//    #endif
    
    return _FALSE;
}

#if  PG_DEBUG
void PrintMsg(char *str)
{
    if(mpr >= 30 && mpr<40)
    {
        printw("\n");
        printw(str );
    }
}
#else
#define  PrintMsg(str)    {}
#endif

#define  STR_SIZE (STR_DOWN-STR_UP)

static p_SPECL FindApsPlace(low_type _PTR low_data,p_SPECL pPt1,_BOOL bMove,p_SHORT bAfter);
static p_SPECL GetNextUpElem(p_SPECL pSpcl);
static p_SPECL GetPrevUpElem(p_SPECL pSpcl);
static  _VOID  AdjustBegEnd( p_SPECL pPoint );

_VOID   AdjustBegEnd( p_SPECL pPoint )
{
    p_SPECL  pPrev, pNext;

    if (  (pPrev=pPoint->prev) == _NULL
       || (pNext=pPoint->next) == _NULL
       )
    {
        return;
    }
    if(IsAnyBreak(pPrev))
    {
        if(pPrev->iend == pPoint->ibeg) pPrev->iend = pNext->ibeg;
    }
    if(IsAnyBreak(pNext))
    {
        if(pNext->ibeg == pPoint->iend) pNext->ibeg = pPrev->iend;
    }
}

p_SPECL GetNextUpElem(p_SPECL pSpcl)
{

    while(pSpcl->next!=_NULL)
    {
        pSpcl=pSpcl->next;
        if(IsUpperSpl(pSpcl)) return(pSpcl);
    }
    return(_NULL);
}

p_SPECL GetPrevUpElem(p_SPECL pSpcl)
{
    while(pSpcl!=_NULL)
    {
        if(IsUpperSpl(pSpcl)) return(pSpcl);
        pSpcl=pSpcl->prev;
    }
    return(_NULL);
}

#ifdef FOR_FRENCH
/*****************************************************************************/
/***** FOR FRENCH ************************************************************/
/*****************************************************************************/

#define MIN_SIZE_REG 450
#define MIN_SIZE_SEP 300
#define MIN_SIZE_BEG 150
#define MIN_SIZE_END  15
#define MIN_HOLE_APS  15

#define SANG 1
#define SNLW 2
#define SNUP 4

static  _BOOL  ProcessStatistic(_INT xHole,_INT xSize,_INT hL,_INT hR,_INT hA,_INT sA,_BOOL bSep);
static  _BOOL  IsNearE(p_SPECL, p_SHORT x, p_SHORT y,_BOOL bL);
static  _BOOL  IsBreak(p_SPECL pElem);
static  _BOOL  SomeLetters(p_SPECL pBack,p_SHORT x,p_SHORT y);
static p_SPECL Spl(p_SPECL pSpl,_INT i,int nMode);

_BOOL RestoreApostroph(p_low_type low_data, p_SPECL pCurr)
{
     _INT   hL,hR=0,hA,sA;
     _BOOL  bSep;
     _SHORT bAfter;
     _RECT  rc;
     _INT   iSafe,xPos,yPos;
     _INT   xHole,xSize,nPnt;
    p_SPECL pPos;
    p_SPECL next;
    p_SPECL prev;
    p_SHORT x;
    p_SHORT y;

    x     = low_data->x;
    y     = low_data->y;
    nPnt  = low_data->ii;
    bSep  = (low_data->rc->low_mode & LMOD_SEPARATE_LET)!=0;

#if PG_DEBUG
    if(mpr==30) return _FALSE;
    if(mpr==31) return _TRUE;
#endif

    if(pCurr->code!=_ST_) return(_FALSE);

    PrintMsg("Apostrophe: Begin...");

    /* height */
    xPos = x[MID_POINT(pCurr)];
    yPos = y[MID_POINT(pCurr)];
    if(yPos>STR_UP+ONE_THIRD(STR_SIZE))
    {
        PrintMsg("Apostrophe: low...");
        return(_FALSE);
    }
    /* vert or horiz */
    GetTraceBox(x,y,pCurr->ibeg,pCurr->iend,(p_RECT)&rc);
    
    if( 2*(rc.bottom-rc.top) < (rc.right-rc.left) )
    {
        PrintMsg("Apostrophe: horisontale...");
        return _FALSE;
    }
    
    /* find place */
    pPos = FindApsPlace(low_data, pCurr,_FALSE,&bAfter);

    if(pPos==_NULL)
    {
        PrintMsg("Apostrophe: No place to put apostrophe...");
        return(_FALSE);
    }
    /* look around: are upper elements near? */
    next = GetNextUpElem(pPos);
    prev = GetPrevUpElem(pPos);

    iSafe = -10;
    while(next!=_NULL && prev!=_NULL && x[MID_POINT(prev)]>x[MID_POINT(next)])
    {
        _INT dxPrev = x[MID_POINT(prev)] - xPos;
        _INT dxNext = x[MID_POINT(next)] - xPos;
        _INT dx;

        TO_ABS_VALUE(dxPrev);
        TO_ABS_VALUE(dxNext);

        if( dxPrev < dxNext )
        {
            //next = prev;
            dx = x[MID_POINT(prev)] - xPos;
        }
        else
        {
            //prev = next;
            dx = x[MID_POINT(next)] - xPos;
        }
        if( dx < 0 ) next = GetNextUpElem(next);
        else         prev = GetPrevUpElem(prev->prev);

        if(++iSafe == 0)
        {
            err_msg("Apostrophe: Check order...");
            break;
        }
    }
    if(next==_NULL && prev==_NULL)
    {
        PrintMsg("Apostrophe: No UpElem around (2)...");
        return(_FALSE);
    }
#if  PG_DEBUG
    if(mpr == 32)
    {
        if(prev!=_NULL)
        {
             _RECT rc1;
            GetTraceBox(x,y,prev->ibeg,prev->iend,(p_RECT)&rc1);
            dbgAddBox(rc1, EGA_BLACK, EGA_YELLOW, SOLID_LINE  );
        }
        if(next!=_NULL)
        {
            _RECT rc2;
            GetTraceBox(x,y,next->ibeg,next->iend,(p_RECT)&rc2);
            dbgAddBox(rc2, EGA_BLACK, EGA_YELLOW, SOLID_LINE  );
        }
        {
            _RECT rc ={x[pPos->ibeg],10000,x[pPos->iend],10300};
            dbgAddBox(rc,  EGA_BLACK, EGA_RED,    SOLID_LINE  );
        }
    }
#endif
    /* only one letter is possible before apostrophe */
    if( !SomeLetters(pPos,x,y) )             return _FALSE;

    /* on the end */
    if(prev!=_NULL && next==_NULL)
    {
        _RECT rc1;
        _RECT rc2;

        GetTraceBox(x,y,prev ->ibeg,prev ->iend,(p_RECT)&rc1);
        GetTraceBox(x,y,pCurr->ibeg,pCurr->iend,(p_RECT)&rc2 );

        xSize = (rc2.right-rc2.left)*(rc2.right-rc2.left)+(rc2.bottom-rc2.top)*(rc2.bottom-rc2.top);

        if(xSize>MIN_SIZE_END)
        {
            PrintMsg("Apostrophe: [X']");
        }
        else
        {
            PrintMsg("Apostrophe: [X']:size...");
            return _FALSE;
        }
    }
    /* Is near e? */
    if(IsNearE(pPos,x,y,_FALSE) && next)
    {
        PrintMsg("Apostrophe: near e...");
        return _FALSE;
    }
    /* metric parameters: */
    {
        _INT    pos;
        _RECT   rc1;
        _RECT   rc2;
        p_SPECL pPrev=_NULL;
        p_SPECL pNext=_NULL;

        GetTraceBox(x,y,pCurr->ibeg,pCurr->iend,(p_RECT)&rc);
        xSize = (rc.right-rc.left)*(rc.right-rc.left)+(rc.bottom-rc.top)*(rc.bottom-rc.top);

        pos = (rc.left+rc.right)/2; //rc.left+(rc.right-rc.left)/2;
        {
            xHole = STR_SIZE;

            if(prev) pPrev = prev->next;
            if(next) pNext = next->prev;

            if(pPrev && HEIGHT_OF(pPrev)> _MD_)
            {
                pPrev = pPrev->prev;
            }
            if(pPrev && (pPrev->code==_ST_ || pPrev==pPos || IsAnyBreak(pPrev)))
            {
                pPrev = pPrev->prev;
            }
            if(pNext && (pNext->code==_ST_ || pNext==pPos || IsAnyBreak(pNext)))
            {
                pNext = pNext->next;
            }
            if(pPrev || pNext)
            {
                if(pPrev)
                {
                    GetTraceBox(x,y,0,pPrev->iend,(p_RECT)&rc1);
                }
                if(pNext)
                {
                    _SHORT iend = next->iend;
                                
                    if(next->next && next->next->code!=_ST_) iend = next->next->iend;
                    GetTraceBox(x,y,pNext->ibeg,  iend,(p_RECT)&rc2);
                }
                if(pPrev && pNext) xHole = rc2.left-rc1.right;
                        
#if  PG_DEBUG
                if(mpr == 33)
                {
                    if(pPrev) dbgAddBox(rc1, EGA_BLACK, EGA_YELLOW, SOLID_LINE);
                    if(pNext) dbgAddBox(rc2, EGA_BLACK, EGA_YELLOW, SOLID_LINE);
                    dbgAddBox(rc,  EGA_BLACK, EGA_RED,    SOLID_LINE);
                }
                if(mpr == 35)
                {
                    if(pPrev)
                    {
                        _RECT rc1;
                        GetTraceBox(x,y,pPrev->ibeg,pPrev->iend,(p_RECT)&rc1);
                        dbgAddBox(rc1, EGA_BLACK, EGA_YELLOW, SOLID_LINE);
                    }
                    if(pNext)
                    {
                        _RECT rc2;
                        GetTraceBox(x,y,pNext->ibeg,pNext->iend,(p_RECT)&rc2);
                        dbgAddBox(rc2, EGA_BLACK, EGA_YELLOW, SOLID_LINE);
                    }
                }
#endif
                if(pPrev && rc1.right>=rc.left || pNext && rc2.left<=rc.right)
                {
                    PrintMsg("Apostrophe: over letter...");
                    return _FALSE;
                }
            }
        }
        if(prev!=_NULL)
        {
            hA = rc.top;
            sA = rc.bottom-rc.top;
                
            GetTraceBox(x,y,0,prev->iend,(p_RECT)&rc);
            hL = rc.top;
        }
        else
        {
            hA = hL = sA = 0;
        }
        if(next==_NULL && xSize<=MIN_SIZE_END )
        {
            PrintMsg("Apostrophe: size ('xx)...");
            return _FALSE;
        }
        if(prev==_NULL && xSize<=MIN_SIZE_BEG )
        {
            PrintMsg("Apostrophe: size ('xx)...");
            return _FALSE;
        }
        if(prev!=_NULL && next!=_NULL)
        {
            if(!ProcessStatistic(xHole,xSize,hL,hR,hA,sA,bSep)) return _FALSE;
        }
    }

    /* OK! It's apostrophe! */
    PrintMsg("Apostrophe: OK! It's apostrophe!");
    if(prev!=_NULL && next==_NULL)
    {
        IsNearE(pPos,x,y,_TRUE);
    }
    /* Move to nearest element: */
    FindApsPlace(low_data, pCurr,_TRUE,&bAfter);

    return(_TRUE);
}

static _BOOL IsLowerSpl(p_SPECL pElem)
{
    if(IsLowerElem(pElem))
    {
        if(pElem->mark==END && HEIGHT_OF(pElem)<_UI2_) return _FALSE;
        else                                           return _TRUE;
    }
    
    return _FALSE;
}

p_SPECL Spl(p_SPECL pSpl,_INT i,int nMode)
{
    int iDir = i>0?-1:1;
    
    while(pSpl!=_NULL)
    {
        if(i==0) break;
        
        if(iDir>0) pSpl = pSpl->prev;
        if(iDir<0) pSpl = pSpl->next;
        if(pSpl==_NULL)   break;
        
        if((nMode & SANG) &&  IsAnyAngle(pSpl)) continue;
        if((nMode & SNUP) && !IsUpperSpl(pSpl)) continue;
        if((nMode & SNLW) && !IsLowerSpl(pSpl)) continue;
        if(IsAnyBreak(pSpl))  continue;
        if(pSpl->code==_ST_)  continue;
        if(pSpl->code==_XT_)  continue;
        if(pSpl->prev==_NULL) continue;
        
        i+=iDir;
    }
    return pSpl;
}
       
_BOOL SomeLetters(p_SPECL pBack, p_SHORT x, p_SHORT y)
{
    _SHORT  nUp=0,nLw=0;
    _SHORT  hUp=0,hLw=0;
    _SHORT  nMM=0;
    _BOOL   bMM=_FALSE;
    _SHORT  nDn=0;
    _SHORT  nTp=0;
    _BOOL   bAA;
    _BOOL   bNN;
                          
    if( Spl(pBack,-2,SNUP | SANG)!=_NULL  &&  Spl(pBack,-2,SNLW | SANG)!=_NULL )
    {
        p_SPECL pUp1 = Spl(pBack,-2,SNUP | SANG);
        p_SPECL pUp2 = Spl(pBack,-1,SNUP | SANG);
        p_SPECL pLw1 = Spl(pBack,-2,SNLW | SANG);
        p_SPECL pLw2 = Spl(pBack,-1,SNLW | SANG);

		// prefix bug fix; added by JAD; Feb 18, 2002
		// make sure you did not exhausted the pBack data
		if (pUp1 == NULL  ||  pUp2 == NULL  ||  pLw1 == NULL  ||  pLw2 == NULL)
			return _FALSE;
        
        bAA=(
                (pLw1->code==_UDC_ || pLw1->code==_UD_ && pUp1->code==_UUR_ && pUp2->code!=_UU_)
            &&  (HEIGHT_OF(pLw1)>=_DI1_ && HEIGHT_OF(pLw1)<=_DE1_)
            &&  (HEIGHT_OF(pLw2)>=_DI1_ && HEIGHT_OF(pLw2)<=_DE1_)
            &&  (HEIGHT_OF(pUp1)>=_UE2_ && HEIGHT_OF(pUp1)<=_UI2_)
            &&  (HEIGHT_OF(pUp2)>=_UE2_ && HEIGHT_OF(pUp2)<=_UI2_)
            &&  (HEIGHT_OF(pUp1)   <=      HEIGHT_OF(pUp2)       )
            &&  (HEIGHT_OF(pLw1)   >=      HEIGHT_OF(pLw2)       )
            );
        if(bAA)
        {
            PrintMsg("Apostrophe: a...");
            return _FALSE;
        }
    }
    if( Spl(pBack,-3,SNUP | SANG)!=_NULL  &&  Spl(pBack,-2,SNLW | SANG)!=_NULL )
    {
        p_SPECL pUp1 = Spl(pBack,-3,SNUP | SANG);
        p_SPECL pUp2 = Spl(pBack,-2,SNUP | SANG);
        p_SPECL pUp3 = Spl(pBack,-1,SNUP | SANG);
        p_SPECL pLw1 = Spl(pBack,-2,SNLW | SANG);
        p_SPECL pLw2 = Spl(pBack,-1,SNLW | SANG);
        
		// prefix bug fix; added by JAD; Feb 18, 2002
		// make sure you did not exhausted the pBack data
		if (pUp1 == NULL  ||  pUp2 == NULL  ||  pUp3 == NULL  ||  pLw1 == NULL  ||  pLw2 == NULL)
			return _FALSE;

        bNN=(
                (pUp2->code==_IU_ || pUp2->code==_UU_)
            &&  (pUp1->mark==BEG  && pUp3->mark==END )
            &&  (HEIGHT_OF(pLw1)>=_DI1_ && HEIGHT_OF(pLw1)<=_DE1_)
            &&  (HEIGHT_OF(pLw2)>=_DI1_ && HEIGHT_OF(pLw2)<=_DE1_)
            &&  (HEIGHT_OF(pUp1)<=_UI2_)
            &&  (HEIGHT_OF(pUp2)<=_UI2_)
            &&  (HEIGHT_OF(pUp3)<=_UI2_)
            &&  ( 4*(x[MID_POINT(pUp2)]-x[MID_POINT(pUp1)]) <= (x[MID_POINT(pUp3)]-x[MID_POINT(pUp2)]) )
            );
        if(bNN)
        {
            PrintMsg("Apostrophe: N...");
        }
    }
    for(;pBack!=_NULL;pBack=pBack->prev)
    {
        _BOOL bUp = IsUpperSpl(pBack);
        _BOOL bLw = IsLowerSpl(pBack);
        
        if(bUp)
        {
            nUp++;
            if(HEIGHT_OF(pBack)<=_UE1_) nTp++;
        }
        else if(bLw)
        {
            nLw++;
            if(HEIGHT_OF(pBack)>=_DE2_) nDn++;
        }
        else
        {
            //if(nUp+nLw>0 && ( IsBreak(pBack) )) goto NO;
            continue;
        }
        if(nMM>=0) nMM++;
        
        if(nMM==1)
        {
            hLw = HEIGHT_OF(pBack);
            if(!bLw || hLw<_DI1_ || hLw>_DE1_) nMM=-1;
        }
        else if(nMM==2 || nMM==4)
        {
            if(nMM==2)
            {
                hUp = HEIGHT_OF(pBack);
                if(hUp<_UE2_ || hUp>_UI2_) nMM=-1;
            }
            if(!bUp || pBack->code!=_IU_ && pBack->code!=_UU_ || hUp != HEIGHT_OF(pBack)) nMM=-1;
        }
        else if(nMM==3 || nMM==5)
        {
            if(!bLw || pBack->code!=_ID_ && pBack->code!=_UD_ || hLw != HEIGHT_OF(pBack)) nMM=-1;
        }
        else if(nMM==6)
        {
            bMM = bUp && hUp == HEIGHT_OF(pBack);
        }

        if(nUp>4)                               goto NO;
        if(nUp>3 && nDn==1)                     continue;
        if(nUp>3)                               goto NO;
        if(nUp>2 && nLw==3 &&  bMM)             continue;
        if(nUp>2 && nDn==1 && !nTp)             continue;
        if(nUp>2 && nLw==2 &&  bNN)             continue;
        if(nUp>2)                               goto NO;
    }
    if(pBack==_NULL)
    {
        return _TRUE;
    }
NO:
    PrintMsg("Apostrophe: too many UpElem before...");
    
    return _FALSE;
}
       
_BOOL  ProcessStatistic(_INT xHole,_INT xSize,_INT hL,_INT hR,_INT hA,_INT sA,_BOOL bSep)
{
        if(xHole<MIN_HOLE_APS )
        {
            PrintMsg("Apostrophe: hole...");
            goto NO;
        }
        if(bSep)
        {
            if(xSize<MIN_SIZE_SEP)
            {
                PrintMsg("Apostrophe: size...");
                goto NO;
            }
        }
        else
        {
            if(xSize<MIN_SIZE_REG)
            {
                PrintMsg("Apostrophe: size...");
                goto NO;
            }
        }
        if(hL<hA-sA )
        {
            PrintMsg("Apostrophe: height...");
            goto NO;
        }
//#define COLLECT_DATA
#ifdef  COLLECT_DATA
        {
            FILE *f;
            char  szBuff[128];

            f = fopen("c:\\temp\\list.txt","at");

            sprintf(szBuff,"%5d %5d %5d %5d %5d\n",xHole,xSize,hL,hA-sA,sA);

            fputs(szBuff,f);
            fclose(f);
        }
#endif
        goto    OK;
NO:
        return _FALSE;
OK:
//      SetTesterMark();
        return _TRUE;
}
 
/*****************************************************************************/
_BOOL IsBreak(p_SPECL pElem)
{
    if(REF(pElem)->code==_ZZZ_) return _TRUE;
//    if(REF(pElem)->code==_ZZ_ ) return _TRUE;
//    if(REF(pElem)->code==_Z_  ) return _TRUE;
    if(REF(pElem)->code==_FF_ ) return _TRUE;
    
    return _FALSE;
}
/*****************************************************************************/

/*  Returns _TRUE, if the place was found; _FALSE otherwise. */

p_SPECL  FindApsPlace(low_type _PTR low_data,p_SPECL pPoint,_BOOL bMove,p_SHORT bAfter)
{
    p_SHORT  x = low_data->x;
    p_SHORT  y = low_data->y;
    p_SPECL  pCur;
    p_SPECL  pBest;
    _INT     dxBest, dxCur, xCur, xColon;

    _BOOL    bFind;
    _BOOL    bShft;
    _BOOL    bCurr;
    p_SPECL  pNewBrk;

       /*  Find the best place to put apostroph: */

    xColon = x[MID_POINT(pPoint)];

      /* Scan upper elements to find the best apostroph place:  */

    for (
        pCur=low_data->specl->next, dxBest=ALEF, pBest=_NULL;
        pCur!=_NULL;
        pCur=pCur->next
        )
    {
        if( pCur!=pPoint && IsUpperSpl(pCur) )
        {
#if  PG_DEBUG
                if(mpr == 34)
                {
                    _RECT rc;
        
                    GetTraceBox(x,y,pCur->ibeg,pCur->iend,(p_RECT)&rc);
                    dbgAddBox(rc,  EGA_BLACK, EGA_GREEN,   SOLID_LINE);
                }
#endif
            if( pCur->prev == _NULL )
            {
                if( pCur->next == _NULL  ||  y[pCur->iend] == BREAK )
                {
                    err_msg("BAD BREAK in PutApostrophe...");
                    return  _NULL;
                }
                xCur = x[pCur->iend];
            }
            else  if( pCur->next == _NULL )
            {
                if( y[pCur->ibeg] == BREAK )
                {
                    err_msg("BAD BREAK in PutApostrophe...");
                    return  _NULL;
                }
                xCur = x[pCur->ibeg];
            }
            else
            {
                if( y[pCur->ibeg] == BREAK  ||  y[pCur->iend] == BREAK )
                {
                    err_msg("BAD BREAK in PutApostrophe...");
                    return  _NULL;
                }
                if( IsBreak(pCur) )
                {
                    if(x[pCur->ibeg]<x[pCur->iend]) xCur = x[MID_POINT(pCur)];
                    else                            xCur = x[pCur->ibeg];
                }
                else xCur = x[MID_POINT(pCur)];
            }
            dxCur = xCur - xColon;
            bCurr = dxCur>0;
            TO_ABS_VALUE(dxCur);

            if( dxCur < dxBest )
            {
                pBest  = pCur;
                dxBest = dxCur;
                bShft  = bCurr;
            }
        }
    }
    /*  If there is no place to put apostrophe, just exit: */
    if(pBest == _NULL) return _NULL;

    if(bShft && pBest->prev!=_NULL) pBest=pBest->prev;

    bFind  = _FALSE;
   *bAfter = _TRUE;
    while(pBest)
    {
        if(IsUpperSpl(pBest))
        {
            if(x[MID_POINT(pBest)]<xColon) break;
        }
        if(pBest->prev!=_NULL) pBest=pBest->prev;
        if(pBest==low_data->specl || IsBreak(pBest))
        {
            bFind  =_TRUE;
           *bAfter =_FALSE;
            break;
        }
    }
    if(!bFind) while(pBest->next)
    {
        if(IsUpperSpl(pBest->next))
        {
            if(x[MID_POINT(pBest->next)]>xColon) break;
        }
        if(IsBreak(pBest->next))
        {
           *bAfter =_FALSE;
            pBest=pBest->next;
            break;
        }
        pBest=pBest->next;
    }
    if ( pBest!=low_data->specl && !IsBreak(pBest) ) return(_FALSE);
    
    if(!bMove) return(pBest);

    if ( pBest!=low_data->specl && !IsAnyBreak(pBest) )
    {
        pNewBrk = NewSPECLElem( low_data );
        if(pNewBrk == _NULL)  return _NULL;
        Insert2ndAfter1st(pBest, pNewBrk );
        pNewBrk->ibeg =
        pNewBrk->iend = pBest->iend;
        pBest = pNewBrk;
    }
    pBest->code  = _FF_;
    pBest->mark  = DROP;
    pBest->other = NO_PENALTY;
    ASSIGN_HEIGHT(pBest,_MD_);

    AdjustBegEnd( pPoint );

    Move2ndAfter1st( pBest, pPoint );
    if(pBest->ibeg < pPoint->ibeg) pBest->iend = pPoint->ibeg;

    if( pPoint->next != _NULL )
    {
        if( !IsAnyBreak(pPoint->next) )
        {
            pNewBrk = NewSPECLElem( low_data );
            if(pNewBrk == _NULL) return _FALSE;
            Insert2ndAfter1st( pPoint, pNewBrk );
        }
        pNewBrk = pPoint->next;

        pNewBrk->code  = _FF_;
        pNewBrk->mark  = DROP;
        pNewBrk->other = NO_PENALTY;
        ASSIGN_HEIGHT(pNewBrk,_MD_);

        pNewBrk->ibeg  =
        pNewBrk->iend  = pPoint->iend;
    }
    return  pBest;
}

/*****************************************************************************/

_BOOL IsNearE(p_SPECL pPos, p_SHORT x, p_SHORT y,_BOOL bL)
{
    p_SPECL pPos1 = pPos->prev;
    p_SPECL pPos2;
    p_SPECL pPos3;

    if(!pPos1) return _FALSE;
    if( pPos1->code==_ST_ ) pPos1 = pPos1->prev;
    if(!pPos1) return _FALSE;

    if(bL)
    {
        for(pPos2=GetPrevUpElem(pPos1->prev);;pPos2=GetPrevUpElem(pPos2->prev))
        {
            if(pPos2==_NULL)           return _FALSE;
            if(HEIGHT_OF(pPos2)< _MD_) break;
        }
        for(pPos3=GetPrevUpElem(pPos2->prev);;pPos3=GetPrevUpElem(pPos3->prev))
        {
            if(pPos3==_NULL)           break;
            if(HEIGHT_OF(pPos3)< _MD_) return _FALSE;
        }
        ASSIGN_HEIGHT(pPos2,_UE1_);
        PrintMsg("Apostrophe: 'e' to 'l'...");

        goto OK;
    }
    if( pPos1->code==_UDR_ || pPos1->code==_ID_ && pPos1->mark==END)
    {
        _SHORT h;

        pPos2 = pPos1->prev;
        if(!pPos2) return _FALSE;

        if(IsAnyAngle(pPos2) && HEIGHT_OF(pPos2)>_UI2_) pPos2 = pPos2->prev;
        if(!pPos2) return _FALSE;

        pPos3 = pPos2->prev;

        if( pPos2->code!=_GU_ && pPos2->code!=_GUs_)    return _FALSE;

        h = HEIGHT_OF(pPos2);

        if(h != _UE2_ && h != _UI1_ && h != _UI2_)      return _FALSE;
        if(pPos3==_NULL || pPos3->prev==_NULL)          goto OK;
        if( x[MID_POINT(pPos2)] < x[MID_POINT(pPos3)] ) return _FALSE;

        goto OK;
    }
    return _FALSE;
OK:
    return _TRUE;
}
#else
/*****************************************************************************/
/***** FOR ENGLISH ***********************************************************/
/*****************************************************************************/

#define APS_SIZE 6

_BOOL   IsNearI(p_SPECL);

_BOOL RestoreApostroph(p_low_type low_data, p_SPECL pCurr)
{
    _SHORT  bAfter;
    _RECT   rc;
    p_SHORT x     = low_data->x;
    p_SHORT y     = low_data->y;
    p_SHORT xBuf  = low_data->xBuf;
//  p_SHORT yBuf  = low_data->yBuf;
    p_SHORT iBack = low_data->buffers[2].ptr ;

    _INT    dxAbs,dyAbs,xPos,yPos;
    _LONG   dlAbs;
    p_SPECL pPos;
    p_SPECL next;
    p_SPECL prev;
    _INT    iSafe;

    _BOOL   bPit = _FALSE;
    _BOOL   bTop = _FALSE;

    _BOOL   bInv = _FALSE; /* apostrophe bend:  \ (not | or /) */
    _BOOL   bLng = _FALSE;
    _BOOL   bDxt = _FALSE;
    _BOOL   bNextUp;
    _BOOL   bPrevUp;
    _BOOL   bLftFar = _TRUE;
    _BOOL   bRgtFar = _TRUE;
    _BOOL   bBigBrk = _FALSE;

    //return(_FALSE);

    if(pCurr->code!=_ST_)               return(_FALSE);

    PrintMsg("\nApostrophe: Begin...");
    /* height */
    xPos = x[MID_POINT(pCurr)];
    yPos = y[MID_POINT(pCurr)];
    if(yPos>STR_UP+ONE_THIRD(STR_SIZE))
    {
        PrintMsg("\nApostrophe: low...");
        return(_FALSE);
    }
    /* look around: are up elements near? */
    yPos = HWRMax(y[pCurr->ibeg],y[pCurr->iend]);
    pPos = FindApsPlace(low_data, pCurr,_FALSE,&bAfter);

    if(pPos==_NULL)
    {
        PrintMsg("\nApostrophe: No UpElem...");
        return(_FALSE);
    }
    next = GetNextUpElem(pPos);
    prev = GetPrevUpElem(pPos);

    iSafe = -10;
    while(next!=_NULL && prev!=_NULL && x[MID_POINT(prev)]>x[MID_POINT(next)])
    {
        _INT dxPrev = x[MID_POINT(prev)] - xPos;
        _INT dxNext = x[MID_POINT(next)] - xPos;
        _INT dx;

        TO_ABS_VALUE(dxPrev);
        TO_ABS_VALUE(dxNext);

        if( dxPrev < dxNext )
        {
            //next = prev;
            dx = x[MID_POINT(prev)] - xPos;
        }
        else
        {
            //prev = next;
            dx = x[MID_POINT(next)] - xPos;
        }
        if( dx < 0 ) next = GetNextUpElem(next);
        else         prev = GetPrevUpElem(prev->prev);

        if(++iSafe == 0)
        {
            err_msg("Apostrophe: Check order...");
            break;
        }
    }
    if(next==_NULL || prev==_NULL)  // Up to Guitman...
    {
        PrintMsg("\nApostrophe: Up to Guitman (beg | end elem)...");
        return(_FALSE);
    }

/*    if(IsAnyBreak(pPos) || IsAnyBreak(pPos->next)) // Check: is it big break?
    {
        p_SPECL pBrk;
        _SHORT  dl,dx=-1;
        _SHORT  n  = 0;
        _SHORT  av = 0;

        for(pBrk=low_data->specl->next;pBrk!=_NULL;pBrk=pBrk->next)
        {
            if(!IsAnyBreak(pBrk)) continue;

            if(y[pBrk->ibeg]<0)   continue;
            if(y[pBrk->iend]<0)   continue;
            if(y[pBrk->ibeg] >= y[pBrk->iend]) continue;

            if(pBrk == pPos || pBrk == pPos->next)
            {
                dx = x[pBrk->iend] - x[pBrk->ibeg];
                continue;
            }
            n++;
            dl = x[pBrk->iend] - x[pBrk->ibeg];

            av+=dl;
        }
        if(n>0)
        {
            av = ONE_NTH(av,n);
            if(dx > MULT_RATIO(av,3,2)) bBigBrk=_TRUE;
        }
    }
*/
    /* Block: Is far? */
    {
        _INT i;
        _INT dl,pos;

        GetTraceBox(x,y,pCurr->ibeg,pCurr->iend,(p_RECT)&rc);
        dl = STR_SIZE/16+(rc.right-rc.left)/2;
        pos= (rc.left+rc.right)/2; //rc.left+(rc.right-rc.left)/2;

        for(i=prev->ibeg;i<next->iend;i++)
        {
            if(x[i]<pos-dl     || x[i]>pos+dl   ) continue;
            if(i>=pCurr->ibeg  && i<=pCurr->iend) continue;

            if(x[i]<=pos ) bLftFar = _FALSE;
            else           bRgtFar = _FALSE;
        }
    }
    /* Block */
    {
        _SHORT lPos,rPos;

        lPos = (_SHORT)HWRMin(next->ibeg,next->iend);
        rPos = (_SHORT)HWRMax(next->ibeg,next->iend);
        GetTraceBox(x,y,lPos,rPos,(p_RECT)&rc);
#if  PG_DEBUG
        if(mpr == 33)
        {
            dbgAddBox(rc, EGA_BLACK, EGA_YELLOW, SOLID_LINE);
        }
#endif
        bNextUp = yPos >  rc.top;

        lPos = (_SHORT)HWRMin(prev->ibeg,prev->iend);
        rPos = (_SHORT)HWRMax(prev->ibeg,prev->iend);
        GetTraceBox(x,y,lPos,rPos,(p_RECT)&rc);
#if  PG_DEBUG
        if(mpr == 33)
        {
            dbgAddBox(rc, EGA_BLACK, EGA_YELLOW, SOLID_LINE);
        }
#endif
        if(prev->prev!=_NULL && prev->prev->prev!=_NULL)
        {
            p_SPECL XT1=prev->prev;
            p_SPECL XT2=prev->prev->prev;
            p_SPECL XT3=prev->prev->prev->prev;

            bDxt =  (XT1->code==_XT_  && XT2->code==_XT_)
                 && (XT3      ==_NULL || XT3->code!=_XT_)
                 && (HEIGHT_OF(XT1) <= _UI1_ || HEIGHT_OF(XT1) >= _DI2_)
                 && (HEIGHT_OF(XT2) <= _UI1_ || HEIGHT_OF(XT2) >= _DI2_);


            if(bDxt) PrintMsg("\nApostrophe: double XT");
        }
        bPrevUp = yPos > rc.top || bDxt;

        bTop = !bNextUp && !bPrevUp && !bLftFar && !bRgtFar;
        bPit =  bNextUp &&  bPrevUp;
    }
    // bTop, bPit **********
    if(bTop)
    {
        PrintMsg("\nApostrophe: Top of line...");
        return(_FALSE);
    }
    if(!bPit && bAfter)
    {
        PrintMsg("\nApostrophe: Wrote after...");
        return(_FALSE);
    }
    // Lenght:
    dxAbs = x[pCurr->ibeg]-x[pCurr->iend];
    dyAbs = y[pCurr->ibeg]-y[pCurr->iend];
    TO_ABS_VALUE(dxAbs);
    TO_ABS_VALUE(dyAbs);
    dlAbs=dxAbs*dxAbs+dyAbs*dyAbs;

    bLng = (dlAbs > (ONE_NTH(STR_DOWN-yPos,4)*ONE_NTH(STR_DOWN-yPos,4)));

    /* BEND: \|/ */
    if(y[pCurr->ibeg]<y[pCurr->iend])
    {
        bInv=(xBuf[iBack[pCurr->ibeg]] < xBuf[iBack[pCurr->iend]]);
    }
    else
    {
        bInv=(xBuf[iBack[pCurr->ibeg]] > xBuf[iBack[pCurr->iend]]);
    }

    /* compare apostrophe lenght with line height */
    if(bPit || (bLftFar && bRgtFar))
    {
        if(dlAbs < (ONE_NTH(STR_DOWN-yPos,16)*ONE_NTH(STR_DOWN-yPos,16)))
        {
            PrintMsg("\nApostrophe: short...");
            return(_FALSE);
        }
    }
    else
    {
        if(dlAbs < (ONE_NTH(STR_DOWN-yPos, bDxt?10:6)*ONE_NTH(STR_DOWN-yPos, bDxt?10:6)))
        {
            PrintMsg("\nApostrophe: short...");
            return(_FALSE);
        }
    }
    /* Block: BEND */
    {
        //_SHORT dxAbs = xBuf[iBack[pCurr->ibeg]]-xBuf[iBack[pCurr->iend]];
        //_SHORT dyAbs = yBuf[iBack[pCurr->ibeg]]-yBuf[iBack[pCurr->iend]];
    
        //TO_ABS_VALUE(dxAbs);
        //TO_ABS_VALUE(dyAbs);

        if(bPit || bLng || bLftFar && bRgtFar)
        {
            if(MULT_RATIO(dxAbs,10,30)>dyAbs)
            {
                PrintMsg("\nApostrophe: bend...");
                return(_FALSE);
            }
        }
        else
        {
            if(MULT_RATIO(dxAbs,10,15)>dyAbs)
            {
                PrintMsg("\nApostrophe: bend...");
                return(_FALSE);
            }
        }
        if((bInv || !bPit) && !bLftFar)
        {
            if(MULT_RATIO(dxAbs,11,10)>dyAbs)
            {
                PrintMsg("\nApostrophe: bend...");
                return(_FALSE);
            }
        }
    }
    if(!bPit && (!bPrevUp && IsNearI(prev) || !bNextUp && IsNearI(next)))
    {
        _BOOL   bFlg = _TRUE;
        p_SPECL pPnt;
        _SHORT  xPnt;

        if(!bPrevUp && IsNearI(prev) && prev->prev!=_NULL && prev->prev->code==_XT_)
        {
            bFlg = _FALSE;
        }
        else if(!bNextUp && IsNearI(next) && next->prev->code==_XT_)
        {
            bFlg = _FALSE;
        }
        if(!bPrevUp && IsNearI(prev) && bLftFar && bBigBrk)
        {
            bFlg = _FALSE;
        }
        if(!bNextUp && IsNearI(next) && bRgtFar && bBigBrk)
        {
            bFlg = _FALSE;
        }
        else for(pPnt=low_data->specl->next;pPnt!=_NULL;pPnt=pPnt->next)
        {
            int x0,x1;

            if(pPnt->code != _ST_) continue;
            if(pCurr      == pPnt) continue;

            if(!bPrevUp && IsNearI(prev))
            {
                x0 = x[prev->ibeg];
                x1 = xPos;
                x0-= xPos-x0;
            }
            else
            {
                x1 = x[next->ibeg];
                x0 = xPos;
                x1+= x1-xPos;
            }
            xPnt = x[MID_POINT(pPnt)];

            if(xPnt>x0 && xPnt<x1) bFlg=_FALSE;
        }
		
        if(bFlg)
        {
            PrintMsg("\nApostrophe: Near I...");
            return(_FALSE);
        }
    }
    /* Block: Is covered? */
    {
        _INT i;

        GetTraceBox(x,y,pCurr->ibeg,pCurr->iend,(p_RECT)&rc);
        rc.left -= (_SHORT)2;
        rc.right+= (_SHORT)2;

        for(i=prev->ibeg;i<next->iend;i++)
        {
            if(x[i]<rc.left   || x[i]>rc.right ) continue;
            if(i>=pCurr->ibeg && i<=pCurr->iend) continue;

            if(y[i]<rc.bottom)
            {
                PrintMsg("\nApostrophe: Covered...");
                return(_FALSE);
            }
        }
    }
    /* OK! It's apostrophe! */
    PrintMsg("\nApostrophe: OK! It's apostrophe!");
    /* Move to nearest element: */
    FindApsPlace(low_data, pCurr,_TRUE,&bAfter);

    return(_TRUE);
}

/************************************************/

/*  Returns _TRUE, if the place was found; _FALSE otherwise. */

p_SPECL  FindApsPlace(low_type _PTR low_data,p_SPECL pPoint,_BOOL bMove,p_SHORT bAfter)
{
    p_SHORT  x = low_data->x;
    p_SHORT  y = low_data->y;
    p_SPECL  pCur;
    p_SPECL  pBest;
    _INT     dxBest, dxCur, xCur, xColon;

    _BOOL    bFind;
    _BOOL    bShft;
    _BOOL    bCurr;
    p_SPECL  pNewBrk;

       /*  Find the best place to put apostroph: */

    xColon = x[MID_POINT(pPoint)];

      /* Scan upper elements to find the best apostroph place:  */

    for (
        pCur=low_data->specl->next, dxBest=ALEF, pBest=_NULL;
        pCur!=_NULL;
        pCur=pCur->next
        )
    {

        if( pCur!=pPoint && IsUpperSpl(pCur) )
        {
            if( pCur->prev == _NULL )
            {
                if( pCur->next == _NULL  ||  y[pCur->iend] == BREAK )
                {
                    err_msg("BAD BREAK in PutApostrophe...");
                    return  _NULL;
                }
                xCur = x[pCur->iend];
            }
            else  if( pCur->next == _NULL )
            {
                if( y[pCur->ibeg] == BREAK )
                {
                    err_msg("BAD BREAK in PutApostrophe...");
                    return  _NULL;
                }
                xCur = x[pCur->ibeg];
            }
            else
            {
                if( y[pCur->ibeg] == BREAK  ||  y[pCur->iend] == BREAK )
                {
                    err_msg("BAD BREAK in PutApostrophe...");
                    return  _NULL;
                }
                if( IsAnyBreak( pCur ) )
                {
                    if(x[pCur->ibeg]<x[pCur->iend]) xCur = x[MID_POINT(pCur)];
                    else                        xCur = x[pCur->ibeg];
                }
                else xCur = x[MID_POINT(pCur)];
            }
            dxCur = xCur - xColon;
            bCurr = dxCur>0;
            TO_ABS_VALUE(dxCur);

            if( dxCur < dxBest )
            {
                pBest  = pCur;
                dxBest = dxCur;
                bShft  = bCurr;
            }
        }
    }
    /*  If there is no place to put apostroph, just exit: */
    if(pBest == _NULL) return _NULL;

    if(bShft && pBest->prev!=_NULL) pBest=pBest->prev;

    bFind  = _FALSE;
   *bAfter = _TRUE;
    while(pBest)
    {
        if(IsUpperSpl(pBest))
        {
            if(x[MID_POINT(pBest)]<xColon) break;
        }
        if(pBest->prev!=_NULL) pBest=pBest->prev;
        if(pBest==low_data->specl || IsAnyBreak(pBest))
        {
            bFind  =_TRUE;
           *bAfter =_FALSE;
            break;
        }
    }
    if(!bFind) while(pBest->next)
    {
        if(IsUpperSpl(pBest->next))
        {
            if(x[MID_POINT(pBest->next)]>xColon) break;
        }
        if(IsAnyBreak(pBest->next))
        {
           *bAfter =_FALSE;
            break;
        }
        pBest=pBest->next;
    }

    if(!bMove) return(pBest);

    if ( !IsAnyBreak(pBest) )
    {
        pNewBrk = NewSPECLElem( low_data );
        if(pNewBrk == _NULL)  return _NULL;
        Insert2ndAfter1st(pBest, pNewBrk );
        pNewBrk->ibeg =
        pNewBrk->iend = pBest->iend;
        pBest = pNewBrk;
    }
    pBest->code  = _FF_;
    pBest->mark  = DROP;
    pBest->other = NO_PENALTY;
    ASSIGN_HEIGHT(pBest,_MD_);

    AdjustBegEnd( pPoint );

    Move2ndAfter1st( pBest, pPoint );
    if(pBest->ibeg < pPoint->ibeg) pBest->iend = pPoint->ibeg;

    if( pPoint->next != _NULL )
    {
        if( !IsAnyBreak(pPoint->next) )
        {
            pNewBrk = NewSPECLElem( low_data );
            if(pNewBrk == _NULL) return _FALSE;
            Insert2ndAfter1st( pPoint, pNewBrk );
        }
        pNewBrk = pPoint->next;
    
        pNewBrk->code  = _FF_;
        pNewBrk->mark  = DROP;
        pNewBrk->other = NO_PENALTY;
        ASSIGN_HEIGHT(pNewBrk,_MD_);

        pNewBrk->ibeg  =
        pNewBrk->iend  = pPoint->iend;
    }
    return  pBest;
}

/************************************************/

_BOOL IsNearI(p_SPECL pPos)
{
    if(!pPos) return(_FALSE);

    if( pPos->code==_IU_)
    {
        if(pPos->mark!=MINW && pPos->mark!=BEG && pPos->mark!=STICK)
        {
            return(_FALSE);
        }
    }
    else if( pPos->code==_UUL_ )
    {
        if(!pPos->prev)            return(_FALSE);
        if( pPos->prev->code!=_Z_) return(_FALSE);
    }
    else      return(_FALSE);

    pPos = SkipAnglesAfter(pPos);

    if(!pPos)           return(_FALSE);

    if(
      pPos->code!=_ID_   &&
      pPos->code!=_UDR_
      )                 return(_FALSE);

    if(pPos->mark!=END) return(_FALSE);


    return(_TRUE);
}

/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
#endif /* ifdef  FOR_FRENCH */
#endif /* ifndef FOR_GERMAN */

#endif //#ifndef LSTRIP
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\filter.cpp ===
#ifndef LSTRIP


 #include  "hwr_sys.h"
 #include  "ams_mg.h"
 #include  "lowlevel.h"
 #include  "calcmacr.h"
 #include  "def.h"

 #include  "low_dbg.h"

  _SHORT   PSProc( low_type _PTR  pLowData , _SHORT  LastProcIndex ) ;

  ROM_DATA_EXTERNAL   _SHORT  sqrtab[] ;

  #define  NORMA(dx,dy) ((_LONG)(dx)*(dx)+(_LONG)(dy)*(dy))


/***************************************************************************/
            /* Calculation SQRT with using sqrtab */
#define  MY_SQRT(op)     \
     ( (op < (_LONG)LENTH_S)?  sqrtab[(_SHORT)op] : (_SHORT)HWRILSqrt(op) )

/***************************************************************************/

 _VOID  Errorprov( low_type _PTR  p_low_data )
  {
   _SHORT   iii,
            j,
            filtj ;
   p_SHORT  bfx   = p_low_data->buffers[0].ptr ;
   p_SHORT  bfy   = p_low_data->buffers[1].ptr ;
   p_SHORT  index = p_low_data->buffers[3].ptr ;
   p_SHORT  px    = p_low_data->x ;
   p_SHORT  py    = p_low_data->y ;

     iii = p_low_data->ii-2 ;

     DBG_CHK_err_msg( p_low_data->buffers[0].nSize < (_WORD)p_low_data->ii
                      || p_low_data->buffers[0].nSize != p_low_data->buffers[1].nSize
                      || p_low_data->buffers[0].nSize > p_low_data->buffers[3].nSize,
                      "ErrPrv: BAD BufSize");

     HWRMemCpy( (p_VOID)bfx , (p_VOID)(px), (sizeof(_SHORT))*(iii+3) ) ;
     HWRMemCpy( (p_VOID)bfy , (p_VOID)(py), (sizeof(_SHORT))*(iii+3) ) ;

     for   ( filtj = 0, j=0; j <= iii  ;  j++ )
       {
          if   ( (bfy[j] == BREAK) && (bfy[j+1] == BREAK) )    continue ;
#ifdef  FORMULA
          if   ( (bfy[j] == BREAK) && (bfy[j+2] == BREAK) )
               {
                   if   ( filtj > p_low_data->nLenXYBuf-3 )
                        {
                          err_msg(" BUFFER is full ...") ;
                            break ;
                        }

                 px[filtj] = bfx[j] ;    py[filtj] = bfy[j] ;
                 index[filtj] = j   ;
                 filtj++ ;      j++ ;
                 px[filtj] = bfx[j] ;    py[filtj] = bfy[j] ;
                 index[filtj] = j   ;
                 filtj++ ;
               }
#endif
/* Don't delete DOTs with 1 point
#else
          if   ( (bfy[j] == BREAK) && (bfy[j+2] == BREAK) )
               {   j++ ;    continue ;    }
#endif
*/
        px[filtj] = bfx[j] ;       py[filtj] = bfy[j] ;
        index[filtj] = j ;
        filtj++ ;
       }

    px[filtj] = bfx[j] ;           py[filtj] = bfy[j] ;
    index[filtj] = j ;             p_low_data->ii = filtj+1 ;

   return ;
  }


/**************************************************************************/


#define  MAX_POINTS_ADDED_IN_ONE_CYCLE   7


 _SHORT   Filt( low_type _PTR  pLowData ,
                _SHORT         t_horda  ,  _SHORT  fl_absence )
  {
   _SHORT   iii       ;
   _SHORT   horda     ;
   _SHORT   t_hord    ;
   _SHORT   ds,rx,ry  ;
   _SHORT   dx,dy     ;
   _SHORT   j         ;
   _SHORT   filtj     ;
   p_SHORT  bfx       = pLowData->buffers[0].ptr ;
   p_SHORT  bfy       = pLowData->buffers[1].ptr ;
   _SHORT   nBufLimit = pLowData->buffers[0].nSize
                                - MAX_POINTS_ADDED_IN_ONE_CYCLE ;
   p_SHORT  px        = pLowData->x       ;
   p_SHORT  py        = pLowData->y       ;
   p_SHORT  ind_in    ;
   p_SHORT  ind_out   ;
   _LONG    dsl       ;

     DBG_CHK_err_msg( pLowData->buffers[0].nSize < (_WORD)pLowData->ii
                      || pLowData->buffers[0].nSize != pLowData->buffers[1].nSize,
                      "Filt: BAD BufSize");

       if    ( fl_absence == ABSENCE )
             {
               ind_in  = pLowData->buffers[2].ptr ;
               ind_out = pLowData->buffers[3].ptr ;
               DBG_CHK_err_msg( ind_out!=_NULL
                                    && (pLowData->buffers[3].nSize < (_WORD)pLowData->ii
                                        || pLowData->buffers[0].nSize > pLowData->buffers[2].nSize),
                                "Filt: BAD BufSize");
             }
         else
             {
               ind_in  = pLowData->buffers[3].ptr ;
               ind_out = pLowData->buffers[2].ptr ;
               DBG_CHK_err_msg( ind_out!=_NULL
                                    && (pLowData->buffers[2].nSize < (_WORD)pLowData->ii
                                        || pLowData->buffers[0].nSize > pLowData->buffers[3].nSize),
                                "Filt: BAD BufSize");
             }

     t_hord = (_SHORT)HWRISqrt(t_horda);
       if    ( t_hord <= 1 )    t_hord = 2 ;

     filtj  = 0 ;         j = 0 ;
     bfx[j] = 0 ;         bfy[j] = BREAK ;
       if    ( ind_in != _NULL )     ind_out[filtj] = ind_in[j] ;
     iii = pLowData->ii-2 ;

       while ( (j <= iii) && (filtj < nBufLimit) )
        {
          j++ ;
            if   ( py[j] == BREAK )
              {
                filtj++ ;
                bfx[filtj] = px[j] ;
                bfy[filtj] = BREAK ;
                  if  ( ind_in != _NULL)       ind_out[filtj] = ind_in[j] ;
                  continue ;
              }

            if    ( bfy[filtj] == BREAK )
              {
                filtj++;
                bfx[filtj] = px[j] ;           bfy[filtj]     = py[j]     ;
                  if    ( ind_in != _NULL )    ind_out[filtj] = ind_in[j] ;
                  continue ;
              }

          dx = px[j] - bfx[filtj] ;    dy = py[j] - bfy[filtj] ;
            if   ( (_LONG)t_horda < (dsl=NORMA(dx,dy)) )
              {
                ds = MY_SQRT(dsl) ;
                rx = bfx[filtj] ;          ry = bfy[filtj] ;
                horda = t_hord ;
                  while ((horda < ds ) && (filtj < nBufLimit))
                    {
                      filtj++ ;
                      bfx[filtj] = (_SHORT)(rx + ( (_LONG)dx*horda)/ds ) ;
                      bfy[filtj] = (_SHORT)(ry + ( (_LONG)dy*horda)/ds ) ;
                        if  (ind_in != _NULL)
                          {
                            if  (horda < ONE_HALF(ds))   //CHE
                              ind_out[filtj] = ind_out[filtj-1];
                            else
                              ind_out[filtj] = ind_in[j] ;
                          }
                      horda += t_hord ;
                    }
                filtj++ ;
                bfx[filtj] = px[j] ;     bfy[filtj] = py[j] ;
                  if   ( ind_in != _NULL )   ind_out[filtj] = ind_in[j] ;
              }

            else
              if   (   (j <= iii)
                    && (py[j+1] == BREAK) )        /*last before break*/
                    {
                        if   (dsl > ONE_FOURTH(t_horda))
                          {
                            filtj++ ; /* make one more point; otherwise subst. the existing one*/
                          }
                      bfx[filtj] = px[j] ;        bfy[filtj] = py[j] ;
                        if   (ind_in != _NULL)    ind_out[filtj] = ind_in[j] ;
                    }

             //  CHE: here was:
             // if   (   (dsl > ONE_FOURTH(t_horda) )        /*last before break*/
             //       && (j < iii)
             //       && (py[j+1] == BREAK) )
             //       {
             //         filtj++ ;
             //         bfx[filtj] = px[j] ;        bfy[filtj] = py[j] ;
             //           if   (ind_in != _NULL)    ind_out[filtj] = ind_in[j] ;
             //       }
        }
/********************  end of filter loop *********************************/

       if    (filtj >= nBufLimit)
              err_msg(" FILTER: BUFFER is full , nowhere to write...")  ;

       if   ( bfy[filtj] != BREAK)
             {
               filtj++ ;
               bfx[filtj] = 0 ;      bfy[filtj] = BREAK ;
                 if    ( ind_in != _NULL )      ind_out[filtj] = ind_in[j] ;
             }
       else    bfx[filtj] = 0 ;

     pLowData->ii = filtj+1 ;
     pLowData->x = bfx;
     pLowData->y = bfy;

       if   ( fl_absence == ABSENCE )
            {
              HWRMemCpy( (p_VOID)ind_in , (p_VOID)ind_out ,
                         (sizeof(_SHORT)) * pLowData->ii ) ;
              PSProc( pLowData , filtj ) ;
            }

     pLowData->x[pLowData->ii] = 0 ;  /*CHE*/
     pLowData->y[pLowData->ii] = 0 ;

   return(SUCCESS) ;
  }


/***************************************************************************/

 _SHORT   PreFilt( _SHORT t_horda , low_type _PTR p_low_data )
  {
   _SHORT   iii       ;
   //_SHORT   t_hord    ;
   _SHORT   dx,dy     ;
   _SHORT   j         ;
   _SHORT   filtj     ;
   p_SHORT  bfx       = p_low_data->buffers[0].ptr ;
   p_SHORT  bfy       = p_low_data->buffers[1].ptr ;
   p_SHORT  ind_in    = p_low_data->buffers[3].ptr ;
   p_SHORT  ind_out   = p_low_data->buffers[2].ptr ;
   _SHORT   nBufLimit = p_low_data->buffers[0].nSize - 7;
   p_SHORT  px        = p_low_data->x ;
   p_SHORT  py        = p_low_data->y ;
   _LONG    dsl       ;

     DBG_CHK_err_msg( (p_low_data->buffers[0].nSize < (_WORD)p_low_data->ii)
                        || (ind_out!=_NULL
                                && p_low_data->buffers[2].nSize < (_WORD)p_low_data->ii),
                      "PreFilt: BAD BufSize");

     //t_hord = HWRISqrt(t_horda);
     //  if    ( t_hord <= 1 )    t_hord = 2 ;

     filtj = 0 ;         j = 0 ;
     bfx[j] = 0 ;             bfy[j] = BREAK ;
       if    ( ind_in != _NULL )     ind_out[filtj] = ind_in[j] ;
     iii = p_low_data->ii-2 ;

       while ( (j <= iii) && (filtj < nBufLimit) )
        {
          j++ ;
            if   ( py[j] == BREAK )
              {
                filtj++ ;
                bfx[filtj] = 0 ;        bfy[filtj] = BREAK ;
                  if    (ind_in != _NULL)    ind_out[filtj] = ind_in[j] ;
                continue ;
              }
            if    ( *(bfy+filtj) == BREAK )
              {
                filtj++;
                bfx[filtj] = px[j] ;       bfy[filtj] = py[j] ;
                  if    (ind_in != _NULL)    ind_out[filtj] = ind_in[j] ;
                continue ;
              }
          dx = px[j] - bfx[filtj] ;    dy = py[j] - bfy[filtj] ;
            if   ( (_LONG)t_horda < (dsl=NORMA(dx,dy)) )
              {
                filtj++ ;
                bfx[filtj] = px[j] ;     bfy[filtj] = py[j] ;
                  if   ( ind_in != _NULL )   ind_out[filtj] = ind_in[j] ;
              }

            else
              if   (   (j <= iii)
                    && (py[j+1] == BREAK) )        /*last before break*/
                    {
                        if   (dsl > ONE_FOURTH(t_horda))
                          {
                            filtj++ ; /* make one more point; otherwise subst. the existing one*/
                          }
                      bfx[filtj] = px[j] ;        bfy[filtj] = py[j] ;
                        if   (ind_in != _NULL)    ind_out[filtj] = ind_in[j] ;
                    }

             //  CHE: here was:
             // if   (   (dsl > ONE_FOURTH(t_horda) )        /*last before break*/
             //       && (j < iii)
             //       && (p_low_data->y[j+1] == BREAK) )
             //       {
             //         filtj++ ;
             //         bfx[filtj] = px[j] ;        bfy[filtj] = py[j] ;
             //           if   (ind_in != _NULL)    ind_out[filtj] = ind_in[j];
             //       }
        }
/********************  end of filter loop *********************************/

       if    (filtj >= nBufLimit)
             err_msg(" FILTER: BUFFER is full , nowhere to write...") ;

       if    ( bfy[filtj] != BREAK)
             {
               filtj++ ;
               bfx[filtj] = 0 ;      bfy[filtj] = BREAK ;
                 if    ( ind_in != _NULL )      ind_out[filtj] = ind_in[j] ;
             }
       else    bfx[filtj] = 0 ;

     p_low_data->ii = filtj+1 ;

       /*   Here copying is OK, since the # of points */
       /* is <= the initial value:                    */
   HWRMemCpy( (p_VOID)(px) , (p_VOID)bfx , (sizeof(_SHORT))*p_low_data->ii ) ;
   HWRMemCpy( (p_VOID)(py) , (p_VOID)bfy , (sizeof(_SHORT))*p_low_data->ii ) ;
     px[p_low_data->ii] = 0 ;
     py[p_low_data->ii] = 0 ;

   return(SUCCESS) ;
  }

/***************************************************************************/

  _SHORT   PSProc( low_type _PTR  pLowData , _SHORT  LastProcIndex )
    {
      _SHORT    ii       = pLowData->ii    ;
      p_SPECL   pSpecl   = pLowData->specl ;
      p_SHORT   indBack  = pLowData->buffers[2].ptr ;
      p_SHORT   newY     = pLowData->y              ;

      p_SPECL   tmpSpecl       ;
      _SHORT    iBeg , iEnd    ;
      _UCHAR    mark           ;
      _SHORT    LastSavedIndex ;
      _SHORT    il             ;

      _SHORT    flPSP    = SUCCESS ;

        if   ( LastProcIndex != ii - 1 )
             {
               flPSP = UNSUCCESS ;
               err_msg( " PSProc : Incosistent data structure ..." ) ;

                 if   ( LastProcIndex > ii - 1 )
                      {
                        err_msg( " PSProc  : Try to correct ..."   ) ;
                        LastProcIndex = ii - 1 ;
                      }
             }

        LastSavedIndex = LastProcIndex - 1         ;

        for  ( il = 0  ;  il < pLowData->len_specl ;  il++ )
          {
            tmpSpecl = pSpecl + il    ;
            mark     = tmpSpecl->mark ;

              if  ( (mark == BEG) || (mark == END) || (mark == EMPTY) )
                  continue ;

            iBeg =  NewIndex( indBack, newY, tmpSpecl->ibeg , ii, _FIRST ) ;
            iEnd =  NewIndex( indBack, newY, tmpSpecl->iend , ii, _LAST  ) ;
            if(iEnd>LastSavedIndex)
             iEnd=UNDEF;

              if  ( iBeg == UNDEF )
                  {
                    DBG_err_msg(" PSProc : Too short buffer , probably ..") ;

                      if   ( mark == SHELF )
                           {
                             pLowData->len_specl      = il     ;
                             pLowData->LastSpeclIndex = il - 1 ;
                             (tmpSpecl - 1)->next     = _NULL  ;
                             InitSpeclElement( tmpSpecl  )     ;
                           }
                      else
                           {
                             pLowData->len_specl      = il - 1 ;
                             pLowData->LastSpeclIndex = il - 2 ;
                             (tmpSpecl - 2)->next     = _NULL  ;
                             InitSpeclElement( tmpSpecl - 1 )  ;
                           }

                    InitSpeclElement( tmpSpecl ) ;
                      break ;
                  }



              if  ( (iEnd == UNDEF) && (iBeg != UNDEF) )
                  {
                    DBG_err_msg(" PSProc : Too short buffer , probably ..") ;

                    if  ( mark == SHELF )
                      {
                        tmpSpecl->ibeg      = iBeg ;
                        tmpSpecl->iend      = LastSavedIndex ;

                          if  ( ( tmpSpecl->ipoint0 != UNDEF )  &&
                                ( tmpSpecl->ipoint1 != UNDEF )      )
                            {
                              tmpSpecl->ipoint0   = NewIndex( indBack , newY     ,
                                                        tmpSpecl->ipoint0  ,
                                                        ii   ,    _MEAD  ) ;
                              tmpSpecl->ipoint1   = NewIndex( indBack , newY     ,
                                                        tmpSpecl->ipoint1  ,
                                                        ii   ,    _MEAD  ) ;
                            }

                        pLowData->len_specl      = il + 1 ;
                        pLowData->LastSpeclIndex = il     ;
                        tmpSpecl->next           = _NULL  ;
                        InitSpeclElement( tmpSpecl+1 )    ;
                          break ;
                      }

                    if  ( (mark == DOT) || (mark == STROKE) )
                      {
                        tmpSpecl->ibeg = iBeg ;
                        tmpSpecl->iend = LastSavedIndex ;

                        ( tmpSpecl - 1 )->ibeg  =  iBeg ;
                        ( tmpSpecl - 1 )->iend  =  iBeg ;

                        ( tmpSpecl + 1 )->ibeg  =  LastSavedIndex ;
                        ( tmpSpecl + 1 )->iend  =  LastSavedIndex ;

                           if  ( ( mark              == STROKE )  &&
                                 ( tmpSpecl->ipoint0 != UNDEF  )  &&
                                 ( tmpSpecl->ipoint1 != UNDEF  )      )
                             {
                              tmpSpecl->ipoint0 =  NewIndex( indBack, newY ,
                                                      tmpSpecl->ipoint0  ,
                                                      ii ,    _MEAD      ) ;
                              tmpSpecl->ipoint1 =  NewIndex( indBack, newY ,
                                                      tmpSpecl->ipoint1  ,
                                                      ii ,    _MEAD      ) ;
                             }

                        pLowData->len_specl      = il + 2 ;
                        pLowData->LastSpeclIndex = il + 1 ;
                        (tmpSpecl + 1)->next     = _NULL  ;
                        InitSpeclElement( tmpSpecl + 2 )  ;
                          break ;
                      }
                  }



              if  ( ( iBeg != UNDEF) && ( iEnd != UNDEF ) )
                  {
                    if  ( mark == SHELF )
                      {
                        tmpSpecl->ibeg = NewIndex( indBack , newY    ,
                                                   tmpSpecl->ibeg    ,
                                                   ii      , _MEAD     ) ;
                        tmpSpecl->iend = NewIndex( indBack , newY    ,
                                                   tmpSpecl->iend    ,
                                                   ii      , _MEAD     ) ;

                          if  ( ( tmpSpecl->ipoint0 != UNDEF )  &&
                                ( tmpSpecl->ipoint1 != UNDEF )      )
                            {
                              tmpSpecl->ipoint0 = NewIndex( indBack , newY ,
                                                        tmpSpecl->ipoint0  ,
                                                        ii ,      _MEAD  ) ;
                              tmpSpecl->ipoint1 = NewIndex( indBack , newY ,
                                                        tmpSpecl->ipoint1  ,
                                                        ii ,      _MEAD  ) ;
                            }
                      }

                    if  ( (mark == DOT) || (mark == STROKE) )
                      {
                        tmpSpecl->ibeg = iBeg ;
                        tmpSpecl->iend = iEnd ;

                        ( tmpSpecl - 1 )->ibeg  =  iBeg ;
                        ( tmpSpecl - 1 )->iend  =  iBeg ;

                        ( tmpSpecl + 1 )->ibeg  =  iEnd ;
                        ( tmpSpecl + 1 )->iend  =  iEnd ;

                           if  ( ( mark              == STROKE )  &&
                                 ( tmpSpecl->ipoint0 != UNDEF  )  &&
                                 ( tmpSpecl->ipoint1 != UNDEF  )      )
                             {
                               tmpSpecl->ipoint0 = NewIndex( indBack, newY ,
                                                         tmpSpecl->ipoint0 ,
                                                         ii ,   _MEAD    ) ;
                               tmpSpecl->ipoint1 = NewIndex( indBack, newY ,
                                                         tmpSpecl->ipoint1 ,
                                                         ii ,   _MEAD    ) ;
                             }
                      }
                  }


          }

     return ( flPSP ) ;
    }

/***************************************************************************/
#endif //#ifndef LSTRIP
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\frm_word.cpp ===
#ifndef LSTRIP

/***********************************************/
/*                                             */
/*    Module for breaking the source text into */
/*  words.  Ideas and some code borrowed from  */
/*  FORMULA project.                           */
/*                                             */
/***********************************************/

#include  "hwr_sys.h"
#include  "hwr_file.h"
#include  "ams_mg.h"
#include  "lowlevel.h"

#include  "calcmacr.h"
#include  "low_dbg.h"

#if  USE_FRM_WORD   /* up to the end (almost) */

#define  FRLINE_ONLY  _FALSE

#include  "fwrd_dbg.h"

/***********************************************/
#define  MIN_POINTS_IN_FRLINE      5
#define  MIN_POINTS_TO_WORDBREAK   6
#define  MIN_INTERVALS_TO_RELY_ON  3
#define  MAX_INTERVALS_TO_STORE    10  /* Must be > 2*prev. #def! */

#define  MAX_RECTANGLE             6   /*  Max ratio (dx/dy or dy/dx) */
                                       /* for considering "delta_in-  */
                                       /* terval" as meaningful.      */
                                       /* (at the 1st pass).          */
/***********************************************/

typedef  struct  {
  _SHORT   xRange;             /* ~one-half of the mean letter width   */
  _SHORT   yRange;             /* ~one-half of the mean letter height  */
  _LONG    ldxSum;             /*    Accumulated values                */
  _LONG    ldySum;             /*          for calculating             */
  _LONG    lNumIntervals;      /*                   x(y)Range.         */
  _SHORT   dxNoFrline;         /* Mean non-frline stroke width.        */
  _SHORT   dyNoFrline;         /* Mean non-frline stroke height.       */
  _BOOL    bIncrementalBreak;  /*  Is this fly-wordbreak or not?       */
} WORDBRKDATA;
typedef  WORDBRKDATA _PTR  p_WORDBRKDATA;

typedef  struct  {
  _SHORT  iBeg;           /*  1st point of the stroke        */
  _SHORT  iEnd;           /*  Last point of the stroke       */
  _RECT   box;            /*  Stroke bounding box.           */
  _SHORT  iStrk;          /*  Ordinal number of this stroke  */
                          /* in strokes array.               */
  _SHORT  xMean;          /*  x-coord of "weight-center".    */
  _SHORT  yMean;          /*  y-coord of "weight-center".    */
  _BOOL   bMayBeFrline;   /*  If the stroke looks like the   */
                          /* fraction (division) line.       */
  _BOOL   bIsWordEnd;     /*  If this stroke is the last one */
                          /* for some found word.            */
} STRK;
typedef  STRK _PTR  p_STRK;

#define  DX_STRK(strk)  DX_RECT((strk)->box)
#define  DY_STRK(strk)  DY_RECT((strk)->box)

/***********************************************/

static  WORDBRKDATA  wbd = {0, 0, 0L, 0L, 0L, 0, _FALSE};

/***********************************************/
/*  General functions:  */

_BOOL   FindXYScale ( p_SHORT xArray, p_SHORT yArray,
                      _INT iFirst, _INT iLast,
                      p_WORDBRKDATA pwbd );
_BOOL   AllocLowDataBuffers ( low_type _PTR pLowData );
_VOID   DeallocLowDataBuffers ( low_type _PTR pLowData );
_BOOL   GetFilteredData ( _SHORT qhorda_filt,
                          low_type _PTR pLowData,
                          p_SHORT _PTR pxArray,
                          p_SHORT _PTR pyArray,
                          p_INT pnPoints);
_SHORT  FindAllStrokes ( p_SHORT xArray, p_SHORT yArray, _INT nPoints,
                         p_STRK strk, _INT nMaxStrokes,
                         p_WORDBRKDATA pwbd );
_BOOL   ExtractWords ( p_SHORT xArray, p_SHORT yArray,
                       p_STRK strk, _INT nBreaks,
                       p_WORDBRKDATA pwbd, p_BOOL pbWasBroken,
                       p_SHORT pn1stWrdPoints, p_SHORT pnFrLinePoints );
_VOID   UnfilterAnswer ( low_type _PTR pLowData,
                         p_SHORT pn1stWordPoints,
                         p_SHORT pnFrLinePoints,
                         _TRACE  trace );
/***********************************************/
/*  "Bricks" for building various analyses: */

_BOOL  IsFrline ( p_SHORT xArray, p_SHORT yArray,
                  p_STRK strkCur,
                  _BOOL bFrstStrk, _BOOL bLastStrk,
                  p_WORDBRKDATA pwbd );
_BOOL  StrokesFarEnough ( p_SHORT xArray, p_SHORT yArray,
                          p_STRK pStrk1, p_STRK pStrk2,
                          p_WORDBRKDATA pwbd );
_BOOL  CurUnderWord ( p_SHORT xArray, p_SHORT yArray,
                      p_STRK pStrk, p_WORDBRKDATA pwbd );
_BOOL  HorizLine_AmongNmrAndDnmr ( p_SHORT xArray, p_SHORT yArray,
                                   p_STRK strk, p_WORDBRKDATA pwbd );
_BOOL  Minus_NearWord ( p_STRK strkFrl, p_STRK strkNear,
                        p_WORDBRKDATA pwbd );
/*
_BOOL  chk_horiz_move ( p_SHORT xArray,  p_SHORT yArray,
                        _INT iLeft,  _INT iRight );
*/
/***********************************************/
/*  Misc. utilities:  */

_BOOL  UpperStroke ( p_SHORT yArray,
                     _INT left1, _INT right1,
                     _INT left2, _INT right2,
                     _SHORT yTolerance );
_BOOL  AboveStroke ( p_SHORT xArray, p_SHORT yArray,
                     _INT left1, _INT right1,
                     _INT left2, _INT right2,
                     _SHORT xTolerance,
                     _SHORT yTolerance );
_VOID  ScaleTrj ( p_SHORT x, p_SHORT y, _INT nPoints);

/***********************************************/


_VOID   ResetFrmWordBreak(_VOID)    /*  Should be called before the passing */
{                                   /* the first stroke of the new formula. */
  HWRMemSet ( &wbd, 0, sizeof(wbd) );
}
/***********************************************/

   /*  The function breaks to words the "trace" with total of  */
   /* "nPoints";  the search must be done only in last         */
   /* "nLastStrokes" strokes.                                  */
   /*  If bIncrementalBreak==_TRUE, then the already collected */
   /* info from previous calls (if any) is used in addition to */
   /* the new info.                                            */
   /*  If bIncrementalBreak==_FALSE, then all the old info is  */
   /* cleared and collection begins from scratch.              */
   /*                                                          */
   /*  The parameter "pn1stWrdPoints" makes sence and is treated*/
   /* only if bIncrementalBreak==_TRUE.                        */
   /*                                                          */
   /*  Where the wordsplit must be, the function puts 2        */
   /* adjacent BREAKS, so that Gavrik will mark this place     */
   /* as the new word begin (if bIncrementalBreak==_FALSE).    */

_SHORT  FrmWordBreak ( _TRACE trace, _INT  nPoints,
                       _BOOL bIncrementalBreak,
                       p_SHORT pn1stWrdPoints,
                       p_SHORT pnLastWrdPoints )
{
  _INT       iFirstPoint, iLastPoint;
  _INT       nFrLinePoints;
  _BOOL      bWasBroken = _FALSE;

  STRK       strk[MAX_STR];
  _INT       nStrokes;
  p_SHORT    xArray = _NULL;
  p_SHORT    yArray = _NULL;
/*
  p_SHORT    xBuf = _NULL;
  p_SHORT    yBuf = _NULL;
*/
  p_SHORT    indBack;
  _INT       iBrkTrace;
  _INT       nWorkPoints;
  _ULONG     ulMemSize;
  _SHORT     qHorda;

  _SHORT     retval = SUCCESS;

  low_type   low_data;

  low_data.buffers[0].ptr = _NULL;
  *pn1stWrdPoints = *pnLastWrdPoints = nFrLinePoints = 0;

  if  ( bIncrementalBreak )  {
    DBG_CHK_err_msg( !pn1stWrdPoints, "FrmWrd: BAD piEnd.." );
  }
  else
    HWRMemSet( &wbd, 0, sizeof(wbd) );
  wbd.bIncrementalBreak = bIncrementalBreak;

  iLastPoint = nPoints - 1;
  iFirstPoint = brk_right_trace(trace, 0, iLastPoint);
  nWorkPoints = iLastPoint - iFirstPoint + 1;
  if  ( nWorkPoints < MIN_POINTS_TO_WORDBREAK )
    return  SUCCESS;

        /*  Prepare working arrays: */

  low_data.nLenXYBuf = MaxPointsGrown(
                                      #ifdef  FORMULA
                                        &trace[iFirstPoint],,
                                      #endif  /*FORMULA*/
                                      (_SHORT)nWorkPoints);
  ulMemSize = (_ULONG)sizeof(_SHORT) * low_data.nLenXYBuf;

  if  (   (low_data.xBuf=(p_SHORT)HWRMemoryAlloc(ulMemSize)) == _NULL
       || (low_data.yBuf=(p_SHORT)HWRMemoryAlloc(ulMemSize)) == _NULL )
    goto  RETURN_UNSUCCESS;

  trace_to_xy (low_data.xBuf,low_data.yBuf,nWorkPoints,&trace[iFirstPoint]);
  ScaleTrj (low_data.xBuf,low_data.yBuf,nWorkPoints);   /* To Std. size */

        /*  Find scaling ranges: */

  if  ( ! FindXYScale (low_data.xBuf,low_data.yBuf,
                       0,
                       nWorkPoints-1,
                       &wbd)
      )  {
    *pn1stWrdPoints = *pnLastWrdPoints = 0; /* i.e. no wordbreaking made */
    goto  RETURN_SUCCESS;
  }

      /*  Breaking text to words begins: */

  if  ( !AllocLowDataBuffers(&low_data) )  {
    DBG_err_msg( "No memory for word-breaking.");
    goto  RETURN_UNSUCCESS;
  }

      /*  Filter trace: */

  qHorda = ONE_FOURTH(wbd.xRange);
  if  ( qHorda < SQRT_ALEF )  {
    if  ( qHorda < 3 )
      qHorda = 3*3;
    else
      qHorda *= qHorda;
  }
  else
    qHorda = ALEF;

  if  ( !GetFilteredData (qHorda, &low_data,
                          &xArray,
                          &yArray,
                          &nWorkPoints)
      )
    goto  RETURN_UNSUCCESS;

  DBG_GET_DEMO_BORDERS(nWorkPoints)
  DBG_SHOW_TRACE

  nStrokes = FindAllStrokes( xArray, yArray, nWorkPoints,
                             strk, MAX_STR, &wbd );
  if  ( nStrokes <= 1 )
    goto  RETURN_SUCCESS;

  indBack = low_data.buffers[2].ptr;
  iBrkTrace = indBack[strk[0].iEnd+1] + iFirstPoint;

  if  (   trace[iBrkTrace].y == BREAK
       && (   trace[iBrkTrace+1].y == BREAK
           || trace[iBrkTrace-1].y == BREAK
          )
      )  {
          /*  The wordbreak was put on the prev. pass of "FrmWordBreak", */
          /* so now we should only assign return values and exit:        */
    DBG_MESSAGE("\nWordBreak from prev. pass");
    *pn1stWrdPoints = strk[0].iEnd + 2;
    goto  RETURN_SUCCESS;
  }

  if  ( ! ExtractWords (xArray,yArray,
                        strk,nStrokes,
                        &wbd,&bWasBroken,
                        pn1stWrdPoints,&nFrLinePoints) )  {
    DBG_err_msg( "Cannot break text to words.");
    goto  RETURN_UNSUCCESS;
  }

 RETURN_SUCCESS:;
      /*  If trace (xArray,yArray) was filtered, then get correct */
      /* points numbers:                                          */
  if  ( low_data.buffers[0].ptr != _NULL )  {
       /*   Transform (*pn1stWrdPoints) and nFrLinePoints so     */
       /* that they be in terms of source (non-filtered) points' */
       /* numbers:                                               */
    UnfilterAnswer( &low_data, pn1stWrdPoints, &nFrLinePoints,
                    &trace[iFirstPoint] );
    *pnLastWrdPoints = nFrLinePoints;
/*
    if  ( nFrLinePoints == 0 )
      *pnLastWrdPoints = 0;
    else  {
      _INT    n1stWrdAndFrLine = *pn1stWrdPoints + nFrLinePoints - 1;
      if  ( n1stWrdAndFrLine == nPoints )
        *pnLastWrdPoints = nFrLinePoints;
      else
        *pnLastWrdPoints = nPoints - n1stWrdAndFrLine + 1;
    }
*/
  }
  retval = SUCCESS;
  goto  FREE_BUFFERS;

 RETURN_UNSUCCESS:;
  retval = UNSUCCESS;

 FREE_BUFFERS:;
  DeallocLowDataBuffers (&low_data);
  if  ( low_data.yBuf )  HWRMemoryFree (low_data.yBuf);
  if  ( low_data.xBuf )  HWRMemoryFree (low_data.xBuf);

  return  retval;

} /*FrmWordBreak*/
/***************************************/


_BOOL  AllocLowDataBuffers ( low_type _PTR pLowData )
{
  _INT      i;
  p_SHORT   pBuffers;

  if  ( (pBuffers=(p_SHORT)HWRMemoryAlloc(sizeof(_SHORT)*LOWBUF*4))
           == _NULL )  {
    return  _FALSE;
  }

  pLowData->buffers[0].ptr = pBuffers;
  pLowData->buffers[1].ptr = pBuffers + LOWBUF;
  pLowData->buffers[2].ptr = pBuffers + LOWBUF*2;
  pLowData->buffers[3].ptr = pBuffers + LOWBUF*3;

  pLowData->buffers[0].nSize =
  pLowData->buffers[1].nSize =
  pLowData->buffers[2].nSize =
  pLowData->buffers[3].nSize = LOWBUF;

  pBuffers = pLowData->buffers[3].ptr;
  for  ( i=0;  i<LOWBUF;  i++ )  {
    pBuffers[i] = i;
  }

  return  _TRUE;

} /*AllocLowDataBuffers*/
/***************************************/


_VOID  DeallocLowDataBuffers ( low_type _PTR pLowData )
{

  if  ( pLowData->buffers[0].ptr != _NULL )  {
    HWRMemoryFree (pLowData->buffers[0].ptr);
    pLowData->buffers[0].ptr = _NULL;
  }

} /*DeallocLowDataBuffers*/
/***************************************/


_BOOL  GetFilteredData ( _SHORT qhorda_filt,
                         low_type _PTR pLowData,
                         p_SHORT _PTR pxArray,
                         p_SHORT _PTR pyArray,
                         p_INT pnPoints)
{

      /* Pack data for filter: */

  DBG_CHK_err_msg( *pnPoints > pLowData->nLenXYBuf,
                   "GetFilDat: BAD nPts");
  SetXYToInitial(pLowData);
  pLowData->ii = *pnPoints;

      /* Filter word: */

  Errorprov (pLowData);
  if  ( PreFilt (qhorda_filt,pLowData) != SUCCESS )
    return  _FALSE;

  {     /* Swap buffers with back indexes: */
    BUF_DESCR bufTmp = pLowData->buffers[2];
    pLowData->buffers[2] = pLowData->buffers[3];
    pLowData->buffers[3] = bufTmp;
  }

  if  ( Filt ( pLowData, qhorda_filt,  NOABSENCE ) != SUCCESS )
      return  _FALSE ;

      /* Unpack filter data: */

  *pnPoints = pLowData->ii;
  *pxArray = pLowData->x;
  *pyArray = pLowData->y;

  return  _TRUE;

} /*GetFilteredData*/
/***************************************/


_SHORT  FindAllStrokes ( p_SHORT xArray, p_SHORT yArray, _INT nPoints,
                         p_STRK strk, _INT nMaxStrokes,
                         p_WORDBRKDATA pwbd )
{
  _INT    nStrokes;
  _INT    iLastPoint = nPoints-1;
  _LONG   ldxSum, ldySum;
  _INT    nStrkSum;
  _INT    i;

  for  ( i=0, nStrokes=nStrkSum=0,  ldxSum=ldySum=0L;
         i<iLastPoint;
         i++ )  {
    if  ( yArray[i] == BREAK )  {
      if  ( (i = nobrk_right(yArray,i,iLastPoint)) > iLastPoint )
        break;
      strk->iBeg = i;
      i = brk_right(yArray,i,iLastPoint) - 1;
      strk->iEnd = i;
      GetTraceBox (xArray,yArray, strk->iBeg, strk->iEnd, &strk->box);
      strk->xMean = Xmean_range(xArray,yArray, strk->iBeg, strk->iEnd);
      strk->yMean = Ymean_range(yArray, strk->iBeg, strk->iEnd);
      strk->bMayBeFrline = MayBeFrline(xArray,yArray,
                                       strk->iBeg, strk->iEnd,
                                       pwbd->xRange);
      if  ( ! strk->bMayBeFrline )  {
        ldxSum += DX_STRK(strk);
        ldySum += DY_STRK(strk);
        nStrkSum++;
      }
      strk->bIsWordEnd = _FALSE;
      strk->iStrk = nStrokes;
      if  ( (++nStrokes) >= nMaxStrokes )
        break;
      strk++;
    }
  }

  if  ( nStrkSum > 0 )  {
    pwbd->dxNoFrline = ONE_NTH( ldxSum, nStrkSum );
    pwbd->dyNoFrline = ONE_NTH( ldySum, nStrkSum );
  }
  else  {
    pwbd->dxNoFrline = THREE(pwbd->xRange);
    pwbd->dyNoFrline = TWO(pwbd->yRange);
  }

  return  nStrokes;

} /*FindAllStrokes*/
/***************************************/


_BOOL  FindXYScale ( p_SHORT xArray, p_SHORT yArray,
                     _INT iFirst, _INT iLast,
                     p_WORDBRKDATA pwbd )
{
  _LONG     ldxSumIncr, ldySumIncr;
  _LONG     lNumIncrIntervals;
  _INT      nMaxRectRatio;


  for  ( nMaxRectRatio=MAX_RECTANGLE;
         nMaxRectRatio<MAX_RECTANGLE*4;
         nMaxRectRatio += 2 )  { /*5*/

    if  ( delta_interval(xArray,yArray,
                         iFirst,iLast,
                         nMaxRectRatio, 0,
                         &ldxSumIncr,&ldySumIncr,&lNumIncrIntervals,_FALSE)
        )  {
      lNumIncrIntervals += pwbd->lNumIntervals;
      if  ( lNumIncrIntervals >= MIN_INTERVALS_TO_RELY_ON )  {
        pwbd->ldxSum += ldxSumIncr;
        pwbd->ldySum += ldySumIncr;
        pwbd->lNumIntervals = lNumIncrIntervals;
        break;
      }
    }

  } /*5*/

  if  ( pwbd->lNumIntervals < MIN_INTERVALS_TO_RELY_ON )
    return  _FALSE;

  pwbd->xRange = ONE_NTH( pwbd->ldxSum, pwbd->lNumIntervals );
  pwbd->yRange = ONE_NTH( pwbd->ldySum, pwbd->lNumIntervals );

     /*  Adjust scale ranges according to Formula Project */
     /* experience:                                       */

  pwbd->xRange = TWO_THIRD(pwbd->xRange);
  pwbd->yRange = FOUR_THIRD(pwbd->yRange);

     /*  "Forget" about the oldest intervals: */

  if  ( pwbd->lNumIntervals > MAX_INTERVALS_TO_STORE )  {
    _INT    nDiv = (_INT)ONE_NTH(pwbd->lNumIntervals,2*MIN_INTERVALS_TO_RELY_ON);
    if  ( nDiv > 0 )  {
      pwbd->ldxSum /= nDiv;
      pwbd->ldySum /= nDiv;
      pwbd->lNumIntervals /= nDiv;
    }
  }

  return  _TRUE;

} /*FindXYScale*/
/***********************************************/

    /*  The function finds fraction lines and grouped parts of */
    /* points in trace (xArray&yArray) from point #iFirst to   */
    /* point #iLast:                                           */

_BOOL  ExtractWords ( p_SHORT xArray, p_SHORT yArray,
                      p_STRK strk, _INT nStrokes,
                      p_WORDBRKDATA pwbd, p_BOOL pbWasBroken,
                      p_SHORT pn1stWrdPoints,
                      p_SHORT pnFrLinePoints )
{
  _INT    iStrk;
  _BOOL   bWordFound, bSingleStrokeWord;
  _BOOL   bFrstStrk, bLastStrk;
  p_STRK  strkCur, strkPrev;


  DBG_INQUIRE_FIRST_STROKE

  for  ( iStrk=0, strkCur=strk, strkPrev=_NULL;
         iStrk<nStrokes;
         iStrk++, strkPrev=strkCur++ )  { /*20*/

    bFrstStrk = (iStrk==0);
    bLastStrk = (iStrk==nStrokes-1);

    DBG_SET_CURSTROKE
    DBG_SHOW_NEXT_STROKE

    bWordFound = _FALSE;
    bSingleStrokeWord = _FALSE;

        /*  Frline should meet some conditions (see comment at */
        /* "MayBeFrline" function):                            */

    if  ( IsFrline(xArray,yArray,strkCur,bFrstStrk,bLastStrk,pwbd) )  {
      bWordFound = _TRUE;
      bSingleStrokeWord = _TRUE;
    }

#if  !FRLINE_ONLY
    else  if  ( !bFrstStrk )  {
      if  (   StrokesFarEnough(xArray,yArray,strkPrev,strkCur,pwbd)
           || CurUnderWord(xArray,yArray,strkCur,pwbd)
          )
        bWordFound = _TRUE;
    }
#endif


    if  ( bWordFound )  { /*60*/   /*  Here we have the new Frline: */

      DBG_SHOW_WORDBEG
      DBG_CHK_err_msg(    yArray[strkCur->iBeg-1]!=BREAK
                       || yArray[strkCur->iEnd+1]!=BREAK,
                       "ExtrWrd.: BAD yArray" );

      *pbWasBroken = _TRUE;
      if  ( !bFrstStrk )
        strkPrev->bIsWordEnd = _TRUE;
      if  ( bSingleStrokeWord )  {
        strkCur->bIsWordEnd = _TRUE;
        *pnFrLinePoints = strkCur->iEnd - strkCur->iBeg + 1;
      }
      else
        *pnFrLinePoints = 0;

             /*  Prepare return values depending on the working */
             /* mode:                                           */

      if  ( pwbd->bIncrementalBreak )  {
        if  ( bFrstStrk )  {
          *pn1stWrdPoints = strkCur->iEnd + 2;
          *pnFrLinePoints = 0;
        }
        else
          *pn1stWrdPoints = strkCur->iBeg;

        return  _TRUE;
      }
      else  /* !incremental break*/ {
        if  ( !bFrstStrk )
          (strkCur-1)->bIsWordEnd = _TRUE;
      }

    } /*60*/

  } /*20*/

  return  _TRUE;

} /*ExtractWords*/
/***********************************************/


_VOID  UnfilterAnswer ( low_type _PTR pLowData,
                        p_SHORT pn1stWordPoints,
                        p_SHORT pnFrLinePoints,
                        _TRACE  trace )
{
  p_SHORT  indBack = pLowData->buffers[2].ptr;

#if  0
  _INT   iStrk;
  _INT   iEndStrk;

      /*  Set 2-BREAKs between words: */

  for  ( iStrk=0;  iStrk<nStrokes-1;  iStrk++ )  {
    if  ( (iEndStrk=strk[iStrk].iEnd) <= *pn1stWordPoints )
      continue;
    if  ( strk[iStrk].bIsWordEnd )  {
      iEndStrk = indBack[iEndStrk+1] - 1;
      DBG_CHK_err_msg( trace[iEndStrk+1].y != BREAK,
                       "UnfiltAns: BAD indBack");
      if  ( trace[iEndStrk+2].y != BREAK )  {
        trace[iEndStrk-1].x = trace[iEndStrk].x;
        trace[iEndStrk-1].y = trace[iEndStrk].y;
        trace[iEndStrk].x = 0;
        trace[iEndStrk].y = BREAK;
      }
    }
  }
#endif /*0*/

  if  ( *pnFrLinePoints != 0 )  {
    *pnFrLinePoints = indBack[*pn1stWordPoints + *pnFrLinePoints];
    DBG_CHK_err_msg( trace[*pnFrLinePoints].y != BREAK,
                     "Unfilt: BAD FrLinePts");
  }
  *pn1stWordPoints = indBack[*pn1stWordPoints];
  if  ( *pnFrLinePoints != 0 )
    *pnFrLinePoints -= *pn1stWordPoints - 2;

} /*UnfilterAnswer*/
/***********************************************/

/*********************************************************************/
/*   End of the main upper-level functions.                          */
/*   The following lines are "bricks" - relatively small utilities   */
/* for particular analyses.                                          */
/*********************************************************************/

_BOOL  IsFrline ( p_SHORT xArray, p_SHORT yArray,
                  p_STRK strkCur,
                  _BOOL bFrstStrk, _BOOL bLastStrk,
                  p_WORDBRKDATA pwbd )
{
  _SHORT  dxStrkCur;


  if  ( !strkCur->bMayBeFrline )  {
    DBG_MESSAGE("!MayBeFrline");
    return  _FALSE;
  }

  if  ( (strkCur->iEnd - strkCur->iBeg) < MIN_POINTS_IN_FRLINE-1 )  {
    DBG_MESSAGE("Too little pts for frline");
    return  _FALSE;
  }

  if  (   !bFrstStrk
       && chk_sign(xArray,yArray,
                   (strkCur-1)->iBeg,strkCur->iEnd,
                   ONE_HALF(pwbd->xRange),FOUR_THIRD(pwbd->yRange))
       && (   bLastStrk
           || !SoftInRect( &strkCur->box, &(strkCur+1)->box, !STRICT_IN )
          )
      )  {
    if  (   strkCur->iStrk >= 2
         && SoftInRect( &(strkCur-1)->box, &(strkCur-2)->box, !STRICT_IN )
        )  {
      /*nothing*/
    }
    else  {
      DBG_MESSAGE("Sign with Prev");
      return  _FALSE;
    }
  }

  if  (   !bLastStrk
       && chk_sign(xArray,yArray,
                   strkCur->iBeg,(strkCur+1)->iEnd,
                   ONE_HALF(pwbd->xRange),FOUR_THIRD(pwbd->yRange))
       && (   bFrstStrk
           || !SoftInRect( &strkCur->box, &(strkCur-1)->box, !STRICT_IN )
          )
      )  {
    DBG_MESSAGE("Sign with Next");
    return  _FALSE;
  }

  dxStrkCur = DX_STRK(strkCur);

  if  (   dxStrkCur > pwbd->xRange * 16
       || (   dxStrkCur > TWO(pwbd->dxNoFrline)
           && dxStrkCur > FIVE(pwbd->xRange)
          )
      )  {
    DBG_MESSAGE("Long Frline");
    return  _TRUE;
  }

  else  { /*40*/

      /*  Additional considerations are needed for small */
      /* horiz. lines:                                   */

    if  (   !bFrstStrk  &&  !bLastStrk
         && HorizLine_AmongNmrAndDnmr(xArray,yArray,strkCur,pwbd)
        )  {
      return  _TRUE;
    }
    if  (   (   !bFrstStrk
             && Minus_NearWord(strkCur,strkCur-1,pwbd)
             && (   bLastStrk
                 || Minus_NearWord(strkCur,strkCur+1,pwbd)
                )
            )
         || (   !bLastStrk
             && Minus_NearWord(strkCur,strkCur+1,pwbd)
             && (   bFrstStrk
                 || (   !HardOverlapRect(&strkCur->box,&(strkCur-1)->box,
                                        !STRICT_OVERLAP)
                     && HWRAbs(strkCur->xMean - (strkCur-1)->xMean)
                          > TWO(pwbd->xRange)
                    )
                )
            )
        )  {
      return  _TRUE;
    }
  } /*40*/

  return  _FALSE;

} /*IsFrline*/
/***********************************************/

#if  !FRLINE_ONLY

_BOOL  StrokesFarEnough ( p_SHORT xArray, p_SHORT yArray,
                          p_STRK pStrk1, p_STRK pStrk2,
                          p_WORDBRKDATA pwbd )
{
  _SHORT  dxFarEnough;
  _SHORT  dyFarEnough;
  _SHORT  dxAbsMean, dyAbsMean;
  _SHORT  dxMin, dxMax;
  _INT    iBeg1 = pStrk1->iBeg;
  _INT    iEnd1 = pStrk1->iEnd;
  _INT    iBeg2 = pStrk2->iBeg;
  _INT    iEnd2 = pStrk2->iEnd;

          /*  If the two strokes constitute some sign */
          /* then do not check for distantness:       */

  if  ( pStrk1==pStrk2+1  ||  pStrk2==pStrk1+1 )  { /* for adjacent strokes */
    _INT    iBeg = HWRMin(iBeg1,iBeg2);
    _INT    iEnd = HWRMax(iEnd1,iEnd2);
    if  ( chk_sign(xArray,yArray,iBeg,iEnd,
                   ONE_HALF(pwbd->xRange),FOUR_THIRD(pwbd->yRange))
        )  {
      DBG_MESSAGE("!FarEnoughCheck: sign");
      return  _FALSE;
    }
  }

          /*  Check if the strokes boxes are far enough: */

  dxFarEnough = pwbd->xRange * 6;
  dyFarEnough = pwbd->yRange;

  if  (   (pStrk1->bMayBeFrline || pStrk2->bMayBeFrline)
       && xHardOverlapRect( &pStrk1->box, &pStrk2->box, !STRICT_OVERLAP )
      )
    TO_TWO_TIMES( dyFarEnough );

  if  (   pStrk1->box.left > pStrk2->box.right + dxFarEnough
       || pStrk2->box.left > pStrk1->box.right + dxFarEnough
       || pStrk1->box.top > pStrk2->box.bottom + dyFarEnough
       || pStrk2->box.top > pStrk1->box.bottom + dyFarEnough
      )  {
    DBG_MESSAGE("FarEnoughRect")
    return  _TRUE;
  }

          /*  Check if the mean points ("gravity centers") */
          /* of the strokes are far enough:                */

/*  dxFarEnough = pwbd->xRange * 6; */
  dyFarEnough = pwbd->yRange * 4;

  dxAbsMean = pStrk1->xMean - pStrk2->xMean;
  TO_ABS_VALUE(dxAbsMean);
  dyAbsMean = HWRAbs(pStrk1->yMean - pStrk2->yMean);
  TO_ABS_VALUE(dyAbsMean);

  if  (   dxAbsMean > dxFarEnough
       || dyAbsMean > dyFarEnough
      )  {
    if  ( !is_cross( xArray[iBeg1], yArray[iBeg1],
                     xArray[iEnd1], yArray[iEnd1],
                     xArray[iBeg2], yArray[iBeg2],
                     xArray[iEnd2], yArray[iEnd2] )
        )  {
      DBG_MESSAGE("FarEnoughMean");
      return  _TRUE;
    }
  }

          /*  Check if the distance between strokes mean points  */
          /* is big compared to their boxes widths.  The strokes */
          /* should be wide enough themselves.                   */

  dxMax = DX_STRK( pStrk1 );
  dxMin = DX_STRK( pStrk2 );
  if  ( dxMin > dxMax )
    SWAP_SHORTS( dxMin, dxMax );

  if  (   dxMin > pwbd->xRange
       && dxAbsMean > THREE_HALF(dxMax)
      )  {
    DBG_MESSAGE("FarCompToBoxes");
    return  _TRUE;
  }

  return  _FALSE;

} /*StrokesFarEnough*/
/***********************************************/


_BOOL  CurUnderWord ( p_SHORT xArray, p_SHORT yArray,
                      p_STRK pStrk, p_WORDBRKDATA pwbd )
{
  p_STRK  pStrkPrev  = pStrk-1;
  _SHORT  dxStrk     = DX_STRK(pStrk);
  _SHORT  dyStrk     = DY_STRK(pStrk);
  _SHORT  dxStrkPrev = DX_STRK(pStrkPrev);
  _SHORT  dyStrkPrev = DY_STRK(pStrkPrev);
  _SHORT  xRange     = pwbd->xRange;
  _SHORT  yRange     = pwbd->yRange;
  _SHORT  xRange2    = ONE_HALF(xRange);
  _SHORT  yRange2    = ONE_HALF(yRange);


        /* pStrk must be non-first one: */
  DBG_CHK_err_msg( pStrk->iBeg < 3,  "CurUndWrd: BAD pStrk" );

  if  (   ((dxStrk > xRange)      &&  (dyStrk > THREE_HALF(yRange))    )
       || ((dxStrkPrev > xRange)  &&  (dyStrkPrev > THREE_HALF(yRange)))
       || (   dxStrk > xRange2
           && dyStrk > yRange2
           && dxStrkPrev > xRange2
           && dyStrkPrev > yRange2
          )
      )  { /*10*/

    _SHORT  dxEndBeg = xArray[pStrk->iBeg] - xArray[pStrkPrev->iEnd];
    _SHORT  dyEndBeg = yArray[pStrk->iBeg] - yArray[pStrkPrev->iEnd];

       /*  Divide if the beg of the stroke is far enough from */
       /* the end of the prev. one:                           */

    if  (   ONE_FIFTH(HWRAbs(dxEndBeg)) > xRange
         && (   !pStrk->bMayBeFrline
             || HWRAbs(dyEndBeg) > TWO(yRange)
            )
        )  {
      DBG_MESSAGE("Beg far from End");
      return  _TRUE;
    }

    if  ( dxStrk==0 || dyStrk==0 || dxStrkPrev==0 || dyStrkPrev==0 )
      return  _FALSE;

      /*  Divide if the boxes don't intersect or do it */
      /* slightly and the mean points of the strokes   */
      /* are y-far enough:                             */

    if  (   !pStrk->bMayBeFrline
         && !pStrkPrev->bMayBeFrline
         && !yHardOverlapRect(&pStrk->box,&pStrkPrev->box,STRICT_OVERLAP)
         && !is_cross( xArray[pStrk->iBeg], yArray[pStrk->iBeg],
                       xArray[pStrk->iEnd], yArray[pStrk->iEnd],
                       xArray[pStrkPrev->iBeg], yArray[pStrkPrev->iBeg],
                       xArray[pStrkPrev->iEnd], yArray[pStrkPrev->iEnd] )
        )  {
      if  (   pStrk->box.top > pStrkPrev->box.bottom
           || pStrkPrev->box.top > pStrk->box.bottom
           || !chk_slash( xArray, yArray, pStrk->iBeg, pStrk->iEnd,
                          yRange2, !WHOLE_TRAJECTORY )
          )  {
        _INT    nStrkRatio = (dxStrk>dyStrk)?
                               (TWO(dxStrk) / dyStrk)
                               :(TWO(dyStrk) / dxStrk);
        _INT    nPrevRatio = (dxStrkPrev>dyStrkPrev)?
                               (TWO(dxStrkPrev) / dyStrkPrev)
                               :(TWO(dyStrkPrev) / dxStrkPrev);
        _SHORT  dyMeanMax  = yRange;

        if  ( nStrkRatio<=3  &&  nPrevRatio<=3 )   /*  Straight vert. or */
          dyMeanMax = TWO(dyMeanMax);              /* hor. parts may be  */
                                                   /* more far in letter.*/

        if  ( HWRAbs(pStrk->yMean - pStrkPrev->yMean) > dyMeanMax )  {
          DBG_MESSAGE("MeanPts yFar");
          return  _TRUE;
        }
      }
    }

  } /*10*/

  return  _FALSE;

} /*CurUnderWord*/

#endif  /*!FRLINE_ONLY*/
/***********************************************/


_BOOL  HorizLine_AmongNmrAndDnmr ( p_SHORT xArray, p_SHORT yArray,
                                   p_STRK strk, p_WORDBRKDATA pwbd )
{
  p_STRK  strkPrev = (strk - 1);
  p_STRK  strkNext = (strk + 1);

  if  (
  /*  !(strk-1)->bMayBeFrline
       &&
  */
          UpperStroke(yArray,
                      strkPrev->iBeg,strkPrev->iEnd,
                      strk->iBeg,strk->iEnd,
                      pwbd->yRange)
    /*   && DX_STRK(strk+1) <= TWO(DX_STRK(strk)) */
       && AboveStroke(xArray,yArray,
                      strk->iBeg,strk->iEnd,
                      strkNext->iBeg,strkNext->iEnd,
                      TWO(pwbd->xRange),
                      pwbd->yRange)
       && (   !strkNext->bMayBeFrline
           || DX_STRK(strkNext) < DX_STRK(strk)
          )
      )  {
    DBG_MESSAGE("HorLine_AmongN&D");
    return  _TRUE;
  }

  return  _FALSE;

} /*HorizLine_AmongNmrAndDnmr*/
/***********************************************/


_BOOL  Minus_NearWord ( p_STRK strkFrl, p_STRK strkNear,
                        p_WORDBRKDATA pwbd )
{
  _SHORT  xChkRange;
  _SHORT  xMeanNear;
  _SHORT  dxMinFromNear;

/*
  if  ( !yHardOverlapRect(&strkNear->box,&strkFrl->box,!STRICT_OVERLAP) )
    return  _FALSE;
*/
  if  (   strkNear->bMayBeFrline
       || HardOverlapRect(&strkNear->box,&strkFrl->box,!STRICT_OVERLAP) )
    return  _FALSE;

  xChkRange = pwbd->xRange * 12;

  if  (   DX_STRK(strkFrl) > xChkRange
    /*
       || (   strkNear->bMayBeFrline
           && DX_STRK(strkNear) > xChkRange
          )
    */
      )  {
    DBG_MESSAGE("Minus long enough");
    return  _TRUE;
  }

  xMeanNear = strkNear->xMean;
  dxMinFromNear = ONE_HALF(DX_STRK(strkFrl));

  if  (   (strkFrl->box.left - xMeanNear) > dxMinFromNear
       || (xMeanNear - strkFrl->box.right) > dxMinFromNear
      )  {
    DBG_MESSAGE("Minus far enough");
    return  _TRUE;
  }

  return  _FALSE;

} /*Minus_NearWord*/
/***********************************************/

#ifdef  QAQAQA  /*i.e. exclude from compilation */

_BOOL  chk_horiz_move ( p_SHORT xArray,  p_SHORT yArray,
                        _INT iLeft,  _INT iRight )
{
  _INT     i;
  _SHORT   dxLeftToRight, dyAllowed;
  _SHORT   dxBad;
  _SHORT   yUp, yDown;
  _BOOL    bMoveToRight;


  if  (   (iLeft=nobrk_right(yArray,iLeft,iRight)) > iRight
       || (iRight=nobrk_left(yArray,iRight,iLeft)) < iLeft
       || brk_right(yArray,iLeft,iRight) <= iRight
       || iLeft >= iRight-2 )
    return  _FALSE;

  dxLeftToRight = (xArray[iRight] - xArray[iLeft]);

  if  ( dxLeftToRight > 0 )
    bMoveToRight = _TRUE;
  else  {
    bMoveToRight = _FALSE;
    dxLeftToRight = -dxLeftToRight;
  }
  dyAllowed = ONE_HALF(dxLeftToRight);

  for  ( i=iLeft+2, dxBad=0, yUp=yDown=yArray[iLeft];
         i<=iRight;
         i++ )  { /*20*/

    if  ( yArray[i] > yDown )
      yDown = yArray[i];
    else  if  ( yArray[i] < yUp )
      yUp = yArray[i];

    if  ( bMoveToRight )  {
      if  (   xArray[i] < xArray[i-1] - 1
           || xArray[i] < xArray[i-2]
          )
        dxBad += xArray[i-1] - xArray[i];
    }
    else  {
      if  (   xArray[i] > xArray[i-1] + 1
           || xArray[i] > xArray[i-2]
          )
        dxBad += xArray[i] - xArray[i-1];
    }

  } /*20*/

  if  (   (yDown - yUp) > dyAllowed
       || dxBad > ONE_FOURTH(dxLeftToRight)
      )
    return  _FALSE;

  return  _TRUE;

} /*chk_horiz_move*/

#endif  /*QAQAQA*/

/**************************************/


_BOOL  UpperStroke ( p_SHORT yArray,
                     _INT left1, _INT right1,
                     _INT left2, _INT right2,
                     _SHORT yTolerance )
{

  return  (   (   Ymean_range(yArray,left1,right1)
                < Ymean_range(yArray,left2,right2) - yTolerance
              )
           || (
                  Ydown_range(yArray,left1,right1)
                < Yup_range(yArray,left2,right2)
              )
          );

} /*UpperStroke*/


_BOOL    AboveStroke ( p_SHORT xArray, p_SHORT yArray,
                       _INT left1, _INT right1,
                       _INT left2, _INT right2,
                       _SHORT xTolerance,
                       _SHORT yTolerance )
{
  _SHORT  xMin1, xMax1;
  _SHORT  xMin2, xMax2;

  xMinMax (left1,right1,xArray,yArray,
           &xMin1,&xMax1);
  xMinMax (left2,right2,xArray,yArray,
           &xMin2,&xMax2);

  return  (   xMin1 < xMax2 + xTolerance
           && xMin2 < xMax1 + xTolerance
           && UpperStroke (yArray,left1,right1,left2,right2,yTolerance)
          );

} /*AboveStroke*/
/***********************************************/

#define  MIN_COORD  100
#define  MAX_COORD  7000

#define  SCALE_COORD(xy)  (TWO(xy))

_VOID  ScaleTrj ( p_SHORT x, p_SHORT y, _INT nPoints)
{
  _INT  i;

  for  ( i=0;  i<nPoints;  i++ )  {
    if  ( y[i] != BREAK )  {
      x[i] = SCALE_COORD(x[i]);
      y[i] = SCALE_COORD(y[i]);
    }
  }

#ifdef  QAQAQA
  _INT    i;
  _INT    nToMult,  nToDiv;
  _INT    dnMax;
  _RECT   box;

  GetTraceBox (x,y,0,nPoints-1,&box);

  dnMax = max( DX_RECT(box), DY_RECT(box) );

  if  ( dnMax > MAX_COORD )  {
    nToMult = 1;
    nToDiv = ONE_NTH(dnMax,MAX_COORD);
  }
  else  {
    nToMult = ONE_NTH(MAX_COORD,dnMax);
    nToDiv = 1;
  }

  if  ( nToMult>1 || nToDiv>1 )  {
    for  ( i=0;  i<nPoints;  i++ )  {
      if  ( y[i] == BREAK )
        continue;
      x[i] = MIN_COORD + ONE_NTH((x[i]-box.left)*nToMult, nToDiv);
      y[i] = MIN_COORD + ONE_NTH((y[i]-box.top)*nToMult, nToDiv);
    }
  }
#endif /*QAQAQA*/

} /*ScaleTrj*/

#undef  MAX_COORD
#undef  MIN_COORD
/***********************************************/

#endif /*USE_FRM_WORD*/

/***********************************************/
/*   Here are the functions used in the other  */
/* modules:                                    */
/***********************************************/

     /*  This routine corresponds to "chk_frline" from FRM.    */

     /* Frline shouldn't be too small.                         */
     /*  Frline should be rather straight mostly in horiz. di- */
     /* rection, it shouldn't be too bended and it's curvity   */
     /* sign shouldn't change more than 1 time (if the curvity */
     /* has substantial abs. value):                           */

#define  FRLINE_STEPS  24

_BOOL  MayBeFrline ( p_SHORT xArray, p_SHORT yArray,
                     _INT iBeg, _INT iEnd,
                     _SHORT  xRange )
{
  _INT     i;
  _SHORT   dxLeftToRight, dyLeftToRight;
  _SHORT   dyAllowed, dyCurvity;
  _SHORT   dxCur, dyFromStraight, dxAbs;
  _LONG    lMultCoef, lDivCoef, lDivCoef2;
  _BOOL    bWasWrong;
  _BOOL    bPhase;
  _INT     nStep;
  _INT     nCurvChanges, nCurvSign;


  if  (   (iBeg=nobrk_right(yArray,iBeg,iEnd)) >= iEnd
       || (iEnd=nobrk_left(yArray,iEnd,iBeg)) <= iBeg
      )
    return  _FALSE;

  if  ( brk_right(yArray,iBeg,iEnd) < iEnd )
    return  _FALSE;   /* i.e. there is break within this trj. */

  FindStraightPart (xArray,yArray,&iBeg,&iEnd);
#if  PG_DEBUG && USE_FRM_WORD
  if  ( mpr >= 111 )  {
    DBG_PUTWIDEPIXEL(iBeg,GREEN);
    DBG_PUTWIDEPIXEL(iEnd,GREEN);
  }
#endif

        /*   Check the straightness and horizontalness  */
        /* of the part between "iBeg" and "iEnd":       */

  dxLeftToRight = xArray[iEnd] - xArray[iBeg];
  dyLeftToRight = yArray[iEnd] - yArray[iBeg];

  if  (   (dxAbs=(_SHORT)HWRAbs(dxLeftToRight)) >= xRange
       && dxAbs > TWO(HWRAbs(dyLeftToRight)) )  { /*1*/

    dyAllowed = (_SHORT)ONE_NTH(dxAbs+ONE_HALF(HWRAbs(dyLeftToRight)), 6);
    if  ( dyAllowed < 2 )
      dyAllowed = 2;

    dyCurvity = (_SHORT)ONE_HALF(dyAllowed);

    lMultCoef = dyLeftToRight;
    lDivCoef = dxLeftToRight;

    lDivCoef2 = ONE_HALF(lDivCoef);
    if  ( !EQ_SIGN(lMultCoef,lDivCoef) )
      lDivCoef2 = -lDivCoef2;

    if  ( lDivCoef == 0 )
      return  _FALSE;

    nStep = ONE_NTH(iEnd-iBeg, FRLINE_STEPS);
    if  ( nStep <= 0 )
      nStep = 1;

    for  ( i=iBeg+nStep,
               bWasWrong    = _FALSE,
               bPhase       = _FALSE,
               nCurvSign    = 0,
               nCurvChanges = 0;
           i<=iEnd;
           i+=nStep, bPhase=!bPhase )  { /*10*/

      dyFromStraight =   yArray[i]
                       - (  yArray[iBeg]
                          + (_SHORT)(  (  ((_LONG)(xArray[i]-xArray[iBeg]))
                                        * lMultCoef
                                        + lDivCoef2
                                       )
                                     / lDivCoef
                                    )
                         );

      if  ( HWRAbs(dyFromStraight) > dyAllowed )
        return  _FALSE;

      if  ( bPhase )  { /*20*/

        if  (   dyFromStraight != 0
             && (   nCurvSign == 0
                 || !EQ_SIGN(dyFromStraight,nCurvSign)
                )
             && HWRAbs(dyFromStraight) > dyCurvity
            )  {
          if  ( ++nCurvChanges > 1 )
            return  _FALSE;
          nCurvSign = dyFromStraight;
        }

        if  (   (   ((dxCur=xArray[i]-xArray[i-TWO(nStep)]) >= 0)
                 && (dxLeftToRight < 0)
                )
             || (   (dxCur <= 0)
                 && (dxLeftToRight > 0)
                )
            )  {
          if  ( bWasWrong )
            return  _FALSE;
          else
            bWasWrong = _TRUE;
        }
        else
          bWasWrong = _FALSE;

      } /*20*/

    } /*10*/

    return  _TRUE;

  } /*1*/

  return  _FALSE;

} /*MayBeFrline*/

#undef  FRLINE_STEPS
/***********************************************/

     /*  This routine corresponds to "chk_sign" from FRM.    */

_SHORT  chk_sign ( p_SHORT xArray, p_SHORT yArray,
                   _INT iBeg, _INT iEnd,
                   _SHORT xRange, _SHORT yRange )
{
  _INT     iBrkFrst, iBrkLast, iRight2;
  _SHORT   x1,y1, x2, x3,y3, x4;
  _SHORT   yRangeSmallSlash;
  _INT     nPoints1_4, nPoints2_4;
  _INT     iLeftPart1, iRightPart1;
  _INT     iLeftPart2, iRightPart2;


  if  (   (iBeg=nobrk_right(yArray,iBeg,iEnd)) > iEnd
       || (iEnd=nobrk_left(yArray,iEnd,iBeg)) < iBeg )
    return  SGN_NOT_SIGN;

  if  ( iBeg < (iRight2=iEnd-2) )  { /*10*/

        /*  "iBrkFrst" and "iBrkLast" represent to ends of the */
        /* same BREAKs sequence:                               */

    if  (   (iBrkFrst = brk_right(yArray,iBeg+1,iRight2)) > iRight2
         || (iBrkLast = nobrk_right(yArray,iBrkFrst,iRight2) - 1) > iRight2-1
        )
      return  SGN_NOT_SIGN;

    if  ( brk_right(yArray,iBrkLast+1,iEnd) <= iEnd )
      return  SGN_NOT_SIGN;     /* more than two strokes */

    nPoints1_4 = (iBrkFrst - iBeg + 1) / 6;
    nPoints2_4 = (iEnd - iBrkLast + 1) / 6;

    iLeftPart1 = iBeg + nPoints1_4;
    iRightPart1 = iBrkFrst - 1 - nPoints1_4;
    if  ( iRightPart1 <= iLeftPart1 )  {
      iLeftPart1 = iBeg;
      iRightPart1 = iBrkFrst - 1;
    }
    iLeftPart2 = iBrkLast + 1 + nPoints2_4;
    iRightPart2 = iEnd - nPoints2_4;
    if  ( iRightPart2 <= iLeftPart2 )  {
      iLeftPart2 = iBrkLast + 1;
      iRightPart2 = iEnd;
    }

    yRangeSmallSlash = (_SHORT)(yRange / 16);

    if  ( MayBeFrline (xArray,yArray,iBeg,iBrkFrst,xRange) )  { /*40*/

      if  ( is_cross (xArray[iLeftPart1],yArray[iLeftPart1],
                      xArray[iRightPart1],yArray[iRightPart1],
                      xArray[iLeftPart2],yArray[iLeftPart2],
                      xArray[iRightPart2],yArray[iRightPart2])
          )  {
        if  (  chk_slash (xArray,yArray,
                          iBrkLast,iEnd,yRangeSmallSlash,
                          !WHOLE_TRAJECTORY)
            )
          return  SGN_PLUS;
        else
          return  SGN_NOT_SIGN;
      }

      else  if  ( MayBeFrline (xArray,yArray,iBrkLast,iEnd,xRange) )  { /*50*/

        x1 = xArray[iBeg];
        x2 = xArray[iBrkFrst-1];
        if  ( x1 > x2 )
          SWAP_SHORTS(x1,x2);

        x3 = xArray[iBrkLast+1];
        x4 = xArray[iEnd];
        if  ( x3 > x4 )
          SWAP_SHORTS(x3,x4);

        y1 = (_SHORT)MEAN_OF(yArray[iBeg], yArray[iBrkFrst-1]);
        y3 = (_SHORT)MEAN_OF(yArray[iBrkLast+1], yArray[iEnd]);

        if  (   (yRange==0  ||  HWRAbs(y1-y3) < TWO(yRange))
             && ONE_HALF(HWRAbs(y1-y3)) < HWRMin(HWRAbs(x2-x3), HWRAbs(x4-x1))
             && x2 > x3
             && x4 > x1
             && (x4-x3+2)/3 < (x2-x1)
             && (x2-x1+2)/3 < (x4-x3)
            )  {
          return  SGN_EQUAL;
        }

      } /*50*/

    } /*40*/

    else  if  ( chk_slash (xArray,yArray,
                           iBeg,iBrkFrst,yRangeSmallSlash,
                           !WHOLE_TRAJECTORY) )  { /*60*/
      if  ( MayBeFrline (xArray,yArray,iBrkLast,iEnd,xRange) )  {
        if  ( is_cross (xArray[iLeftPart1],yArray[iLeftPart1],
                        xArray[iRightPart1],yArray[iRightPart1],
                        xArray[iLeftPart2],yArray[iLeftPart2],
                        xArray[iRightPart2],yArray[iRightPart2])
            )  {
          return  SGN_PLUS;
        }
      }
    } /*60*/

        /*  Check if two parts lie one under another  */
        /* and there is only one break:               */

    if  (   (   xArray[iBrkLast+1] < xArray[iBrkFrst-1]
             && xArray[iBeg] < xArray[iEnd]
            )
         || (   xArray[iBrkLast+1] > xArray[iBrkFrst-1]
             && xArray[iBeg] > xArray[iEnd]
            )
        /*CHE(checked above) && brk_right(yArray,iBrkLast+1,iEnd) > iEnd */
        )  { /*120*/

      _SHORT  dx, dy;
      _RECT   box;

      GetTraceBox (xArray,yArray,
                   iBeg,iEnd,&box);
      dx = (_SHORT)DX_RECT(box);
      dy = (_SHORT)DY_RECT(box);

          /*  If two parts as a whole are of very small size: */

      if  (   dx < xRange
           && dy < FOUR_THIRD(yRange)
          )
        return  SGN_SOME;


          /*  If every part has "dx>dy" and their total size */
          /* is rather small:                                */

      if  (   dx < (xRange*6)
           && dy < THREE_HALF(yRange)
          )  { /*130*/

        GetTraceBox (xArray,yArray,   /* 1st part */
                     iBeg,iBrkFrst,
                     &box);
        dx = (_SHORT)DX_RECT(box);
        dy = (_SHORT)DY_RECT(box);

        if  ( dx > FOUR_THIRD(dy) )  {
          GetTraceBox (xArray,yArray,  /* 2nd part */
                       iBrkLast,iEnd,
                       &box);
          dx = (_SHORT)DX_RECT(box);
          dy = (_SHORT)DY_RECT(box);

          if  ( dx > FOUR_THIRD(dy) )
            return  SGN_SOME;
        }

      } /*130*/

    } /*120*/

  } /*10*/

  return  SGN_NOT_SIGN;

} /*chk_sign*/
/***********************************************/

_BOOL  chk_slash  (p_SHORT xArray,  p_SHORT yArray,
                  _INT iLeft,  _INT iRight,
                  _SHORT yRange, _BOOL bWholeTrj )
{
  _INT     i;
  _INT     iPrevGood;
  _SHORT   dxtek, dxprev;
  _SHORT   d2xtek, d2xprev;
  _SHORT   dx, dx_eps;
  _SHORT   dy, dytek, dyabs, dy_eps;
  _BOOL    bWasWrong, bWasChg;
  _INT     nStep;
  _INT     phase;
  _LONG    lMultCoef, lDivCoef, lDivCoef2;



  if  (   (iLeft=nobrk_right(yArray,iLeft,iRight)) > iRight
       || (iRight=nobrk_left(yArray,iRight,iLeft)) < iLeft )
    return  _FALSE;

  if  ( !bWholeTrj )  {
    _INT    i1st, i2nd;
    _INT    dindRightLeft = ONE_FOURTH(iRight-iLeft);
        /*  Find the meaningful part of trajectory to analyse: */
    FindStraightPart (xArray,yArray,&iLeft,&iRight);
#if  USE_FRM_WORD
    DBG_PUTWIDEPIXEL(iLeft,GREEN);
    DBG_PUTWIDEPIXEL(iRight,GREEN);
#endif /*USE_FRM_WORD*/
    i1st = iYup_range (yArray,iLeft,iRight);
    i2nd = iYdown_range (yArray,iLeft,iRight);
    if  ( i1st > i2nd )
      SWAP_INTS(i1st,i2nd);
    if  ( (i1st-iLeft) < dindRightLeft )
      iLeft = i1st;
    if  ( (iRight-i2nd) < dindRightLeft )
      iRight = i2nd;
#if  USE_FRM_WORD
    DBG_PUTWIDEPIXEL(iLeft,GREEN);
    DBG_PUTWIDEPIXEL(iRight,GREEN);
#endif /*USE_FRM_WORD*/
  }

  dy = yArray[iRight] - yArray[iLeft];

  dx = xArray[iRight] - xArray[iLeft];
  lMultCoef = (_LONG)dx;

  lDivCoef = dy;
  lDivCoef2 = ONE_HALF(lDivCoef);

  if  (   (iLeft < (iRight-3))
       && (dyabs=(_SHORT)HWRAbs(dy)) >= yRange   /* Also check for lDivCoef!=0 */
       && THREE_HALF(dyabs) > HWRAbs(dx)
      )  { /*1*/

    dx_eps = (_SHORT)((HWRAbs(dx)) / 16);

    dy_eps = (_SHORT)(dyabs / 10);
    if  ( dy_eps < 2 )
      dy_eps = 2;

    if  ( brk_right(yArray,iLeft+1,iRight-1) < iRight )  /*i.e. BREAK exists*/
      return  _FALSE;

    nStep = (iRight-iLeft+4) / 16;
    if  ( nStep <= 0 )
      nStep = 1;

    for  ( i=iLeft+nStep, bWasWrong=bWasChg=_FALSE,
                        phase=_FALSE,
                        iPrevGood=iLeft,
                        dxprev=xArray[i]-xArray[iLeft],
                        d2xprev=0;
           i<=iRight;
           i+=nStep, phase=!phase )  { /*2*/

      if  (   (   ((dytek=yArray[i]-yArray[iPrevGood]) >= dy_eps)
               && (dy < 0)
              )
           || (   (dytek <= -dy_eps)
               && (dy > 0)
              )
          )  {
        if  ( bWasWrong )
          return  _FALSE;
        else
          bWasWrong = _TRUE;
      }
      else  {
        bWasWrong = _FALSE;
        iPrevGood = i;
      }

      if  ( phase )  {

             /*   Check, if this is not an integral or so: */

        if  (   (   ((d2xtek =   (dxtek=xArray[i]-xArray[i-TWO(nStep)])
                               - dxprev
                     ) > dx_eps
                    )
                 && dxtek > 1
                 && (d2xprev < -ONE_FOURTH(HWRAbs(dxtek)) )
                )
             || (   (d2xtek < -dx_eps)
                 && dxtek > 1
                 && (d2xprev > ONE_FOURTH(HWRAbs(dxtek)) )
                )
            )  {
          if  ( bWasChg )
            return  _FALSE;
          else
            bWasChg = _TRUE;
        }

        if  ( HWRAbs(d2xtek) > dy_eps )  { /* i.e. throw out meaningless cases*/
          dxprev = dxtek;
          d2xprev = d2xtek;
        }
      }

          /*  Check x-distance from the straight line: */

      dx = xArray[i]
              - (_SHORT)(  xArray[iLeft]
                         + (  ((_LONG)(yArray[i]-yArray[iLeft])*lMultCoef + lDivCoef2)
                            / lDivCoef
                           )
                        );

      TO_ABS_VALUE(dx);

      if  (   dx > 1
           && dx >= ONE_HALF(dy) - 1
          )
        return  _FALSE;

    } /*2*/

    return  _TRUE;

  } /*1*/

  return  _FALSE;

} /*chk_slash*/
/***********************************************/

      /*   Adjust "iBeg" and "iEnd" according to the length  */
      /* of the longest ~straight line within initial "iBeg" */
      /* and "iEnd" points:                                  */
      /*                                                     */
      /*  Tips:                                              */
      /*                                                     */
      /*    This will be changed:                            */
      /*                                                     */
      /*           *ooooooooooooooooooooooooo                */
      /*          oo                                         */
      /*         oo                                          */
      /*                                                     */
      /*                                                     */
      /*    This won't be changed (too big angle):           */
      /*                                                     */
      /*           *ooooooooooooooooooooooooo                */
      /*       oooo                                          */
      /*   oooo                                              */
      /*                                                     */
      /*                                                     */
      /*    This won't be changed (too big part):            */
      /*                                                     */
      /*               *oooooooooooooooooooooooooooo         */
      /*              o                                      */
      /*             o                                       */
      /*            o                                        */
      /*           o                                         */
      /*          o                                          */
      /*         o                                           */
      /*                                                     */
      /*                                                     */
      /*    This will be changed (sharp angle):              */
      /*                                                     */
      /*         *oooooooooooooooooooooooooooooooo           */
      /*                ooooooo                              */
      /*                       ooooooo                       */
      /*                                                     */

#define  COS_WIDE_ANGLE    (-80)
#define  COS_SHARP_ANGLE   70

_VOID  FindStraightPart  ( p_SHORT xArray, p_SHORT yArray,
                           p_INT piBeg, p_INT piEnd )
{
  _INT    iBeg        = *piBeg;
  _INT    iEnd        = *piEnd;
  _INT    dind        = ONE_THIRD(iEnd-iBeg);
  _INT    iMidBeg     = iBeg + dind;
  _INT    iMidEnd     = iEnd - dind;
  _INT    iMostFarBeg = iMostFarFromChord (xArray,yArray,iBeg,iMidBeg);
  _INT    iMostFarEnd = iMostFarFromChord (xArray,yArray,iMidEnd,iEnd);
  _INT    dindEndBeg  = ONE_THIRD(iEnd-iBeg);
  _INT    dindMostFar;
  _SHORT  cos_EndPart;

  dindMostFar = iMostFarBeg - iBeg;
  if  ( dindMostFar > 0  &&  iMostFarBeg != iMidBeg )  {
    cos_EndPart = (_SHORT)cos_vect(iMostFarBeg,iBeg,
                                   iMostFarBeg,iMidBeg, xArray,yArray);
    if  (   (   dindMostFar < dindEndBeg
             && cos_EndPart > COS_WIDE_ANGLE
            )
         || (   dindMostFar < TWO(dindEndBeg)
             && cos_EndPart > COS_SHARP_ANGLE
            )
        )  {
      iBeg = iMostFarBeg;
    }
  }

  dindMostFar = iEnd - iMostFarEnd;
  if  ( dindMostFar > 0  &&  iMostFarEnd != iMidEnd )  {
    cos_EndPart = (_SHORT)cos_vect(iMostFarEnd,iEnd,
                                   iMostFarEnd,iMidEnd, xArray,yArray);
    if  (   (   dindMostFar < dindEndBeg
             && cos_EndPart > COS_WIDE_ANGLE
            )
         || (   dindMostFar < TWO(dindEndBeg)
             && cos_EndPart > COS_SHARP_ANGLE
            )
        )  {
      iEnd = iMostFarEnd;
    }
  }

  *piBeg = iBeg;
  *piEnd = iEnd;

} /*FindStraightPart*/
#undef  COS_WIDE_ANGLE
#undef  COS_SHARP_ANGLE
/***********************************************/
#endif //#ifndef LSTRIP
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\get_bord.cpp ===
#ifndef LSTRIP

#include "bastypes.h"
#include "ams_mg.h"
#include "lowlevel.h"

_SHORT GetBaseline(PS_point_type _PTR trace,rc_type _PTR rc);

/**********************************************************************/
/* This function makes a call of low level to calculate baseline only */
/* Input: trace (ink), rc - all fields undefined except "ii" field    */
/*                          (here should be quantity of points)       */
/* Output: fields in rc, which contain the baseline.                  */
/* Return value: SUCCESS - everything OK, UNSUCCESS - memory problems */
/**********************************************************************/
_SHORT GetBaseline(PS_point_type _PTR trace,rc_type _PTR rc)
{
 xrdata_type xrdata;

 if(rc->ii < 3)
  return UNSUCCESS;

 rc->low_mode=LMOD_FREE_TEXT | LMOD_BORDER_GENERAL | LMOD_BORDER_ONLY;
 rc->rec_mode=RECM_TEXT;

 if(low_level(trace,&xrdata,rc) != SUCCESS)
  return UNSUCCESS;

 return SUCCESS;

} /* end of GetBaseline */

#endif //#ifndef LSTRIP
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\hwr_math.cpp ===
/**************************************************************************
*                                                                         *
*  HWR_MATH.C                             Created: 17 May 1991.           *
*                                                                         *
*    This file  contains  the  functions  for  the  mathematical          *
*  operations.                                                            *
*                                                                         *
**************************************************************************/

#include "hwr_sys.h"

ROM_DATA_EXTERNAL _UCHAR SQRTa[];
ROM_DATA_EXTERNAL _LONG SQRTb[];

/**************************************************************************
*                                                                         *
*    Square root.                                                         *
*                                                                         *
**************************************************************************/

_INT  HWRMathILSqrt (_LONG x)
   {
   _INT  iShift;

   _SHORT  sq;
   if (x<0)
      return 0;

   for (iShift=0; x>0x07FFFL; iShift++)
      x >>= 2;

   sq = ((_SHORT)HWRMathISqrt ((_INT)x)) << iShift;
   
   if (sq >= 0)
     return sq;
   else
     return 0x7fff;
   }

_INT  HWRMathISqrt (_INT x)
   {
   unsigned  sq;

   if (x<0)
      return 0;

   if ( x < 256 )
      return ( (SQRTa [x] + 7) >> 4 );

   sq = SQRTa[(unsigned char) (x>>8)] ;


   if ( (_LONG)x > SQRTb[sq+=3] )
      sq+=3 ;
   if ( (_LONG)x < SQRTb[--sq] )
      if ( (_LONG)x < SQRTb[--sq] )
         if ( (_LONG)x < SQRTb[--sq] )
            sq-- ;

   if ((int) (x - SQRTb[sq]) > (int) (SQRTb[sq+1] - x))
      return sq+1;
   else
      return sq;
   }

#if 0

#include <math.h>

_WORD  HWRMathSystemSqrt (_DOUBLE dArg, p_DOUBLE pdRes)
   {
   if (dArg < 0)
      return _NULL;
   *pdRes = sqrt(dArg);
   return _TRUE;
   }

_WORD  HWRMathSystemLSqrt (_LONG lArg, p_DOUBLE pdRes)
   {
   if (lArg < 0)
      return _NULL;
   *pdRes = sqrt((_DOUBLE)lArg);
   return _TRUE;
   }


/**************************************************************************
*                                                                         *
*    Exponent.                                                            *
*                                                                         *
**************************************************************************/

_WORD  HWRMathSystemExp (_DOUBLE dArg, p_DOUBLE pdRes)
   {
   *pdRes = exp(dArg);
   return _TRUE;
   }


/**************************************************************************
*                                                                         *
*    sin.                                                                 *
*                                                                         *
**************************************************************************/

_WORD  HWRMathSystemSin (_DOUBLE dArg, p_DOUBLE pdRes)
   {
   *pdRes = sin (dArg);
   return _TRUE;
   }


/**************************************************************************
*                                                                         *
*    cos.                                                                 *
*                                                                         *
**************************************************************************/

_WORD  HWRMathSystemCos(_DOUBLE dArg, p_DOUBLE pdRes)
   {
   *pdRes = cos (dArg);
   return _TRUE;
   }


/**************************************************************************
*                                                                         *
*    Arctg(Arg1/Arg2).                                                    *
*                                                                         *
**************************************************************************/

_WORD  HWRMathSystemAtan2 (_DOUBLE dArg1, _DOUBLE dArg2, p_DOUBLE pdRes)
   {
   *pdRes = atan2 (dArg1, dArg2);
   return _TRUE;
   }


/**************************************************************************
*                                                                         *
*    floor.                                                               *
*                                                                         *
**************************************************************************/

_WORD  HWRMathSystemFloor(_DOUBLE dArg, p_DOUBLE pdRes)
   {
   *pdRes = floor(dArg);
   return _TRUE;
   }

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\hwr_mem.cpp ===
/**************************************************************************
*                                                                         *
*  HWR_MEM.C                              Created: 5 Mar 1991.            *
*                                                                         *
*    This file  contains  the  functions  for  the  memory  management.   *
*  (THINK C), WINDOWS and ANSI-C                                          *
*                                                                         *
**************************************************************************/
#include <common.h>
#include "bastypes.h"
//#include <stdio.h>

#if HWR_SYSTEM == HWR_MACINTOSH
#ifdef forMac
    #include <Memory.h>
#else
    #include "NewtMemory.h"
#endif
#if GETMEMSTATS
  #include "debug.h"
  #include "MacUtils.h"
  #include "DebugPrintf.h"
#endif
#elif HWR_SYSTEM == HWR_WINDOWS
#include <windows.h>
#include <windowsx.h>
#else /* HWR_SYSTEM */
#include <stdlib.h>
#endif /* HWR_SYSTEM */

#include "hwr_sys.h"

#if HWR_SYSTEM == HWR_MACINTOSH
#if GETMEMSTATS
Handle  tons[256];
long    nTons = 0;
long    seq = 4096;
#endif
#endif  /* HWR_SYSTEM */

#define MEMORY_FIXED 0 // AVP allocate pointers as GMEM_FIXED vs HANDLE

#if MEMORY_DEBUG_ON

#define MEMORY_HUGEDEBUG_ON 1 // AVP big area aroundcheck

#define HWRM_MDA_SIZE 510 // 254  // Size of debug buffer for pointers and handles

#define DEB_TAIL_SIZE 32

static p_CHAR mblock[HWRM_MDA_SIZE+2] = {0};
static _LONG mblocksize[HWRM_MDA_SIZE+2] = {0};
static _INT mblock_n = 0;

static p_CHAR mhandle[HWRM_MDA_SIZE+2] = {0};
static _LONG mhandlesize[HWRM_MDA_SIZE+2] = {0};
static _INT mhandle_n = 0;

int  AddBlock(p_CHAR _PTR array, p_LONG sizearray, p_INT pNum, p_CHAR el, _LONG size);
int  DelBlock(p_CHAR _PTR array, p_LONG sizearray, p_INT pNum, p_CHAR el);
void QueryBlocks(void);

#ifdef PG_DEBUG_ON
 _VOID err_msg (_CHAR _PTR msg);
#else
 #define err_msg(a)
#endif

void QueryBlocks(void) {
_CHAR msg[80];
FILE * file;
_ULONG mhs, mbs;

    CheckBlocks( "Beg. of QueryBlock" );
#ifdef PEGASUS
{
 TCHAR str[200];
 int   i;
    wsprintf(str, L"\nQueryBlocks: %d + %d blocks occupied.\n", mhandle_n, mblock_n);
    for(i=0; str[i]; i++)
       msg[i] = (unsigned char)str[i];
    msg[i] = 0;
}
#else
    sprintf(msg, "\nQueryBlocks: %d + %d blocks occupied.\n", mhandle_n, mblock_n);
#endif
    err_msg(msg);

#if MEMORY_DEBUG_REPORT
    DPrintf5(msg);
#endif

#if 0 // AVP memory debug report
   mhs = mbs = 0l;
   if ((file = fopen("c:\\avp\\wg32mem.log","a+t")) != _NULL) // AVP temp debug
    {
     _INT i;

     fprintf(file, "%s", msg);
     for (i = 0; i < mhandle_n; i ++)
      {
       fprintf(file, "#%3d Handle: %08x size: %d\n", i, mhandle[i], mhandlesize[i]);
       mhs += mhandlesize[i];
      }

     fprintf(file, "\n");

     for (i = 0; i < mblock_n; i ++)
      {
       fprintf(file, "#%3d Block: %08x size: %d\n", i, mblock[i], mblocksize[i]);
       mbs += mblocksize[i];
      }

     fprintf(file, "\nTotal memory: overall - %ld, in handles - %ld, in blocks - %ld\n", mhs+mbs, mhs, mbs);
     fclose(file);
    }

#endif
    CheckBlocks( "End of QueryBlock" );
}

int AddBlock(p_CHAR _PTR array, p_LONG sizearray, p_INT pNum, p_CHAR el, _LONG size)
{
// int i;

    if ((*pNum) >= HWRM_MDA_SIZE)
     {
      err_msg("!Out of memory debug blocks!");
      goto err;
     }

    array[*pNum] = el;
    sizearray[*pNum] = size;
    (*pNum) ++;

#if MEMORY_DEBUG_REPORT
    DPrintf5("%lXh - allocated %ld bytes. Total %d blocks.\n", el, size, *pNum);
#endif
// for (i = *pNum-2; i >= 0; i --) if (array[i] == el) err_msg("!Duplicate address!");

 return 0;
err:
 return 1;
}

int DelBlock(p_CHAR _PTR array, p_LONG sizearray, p_INT pNum, p_CHAR el)
{
int i, j;

    for (i = *pNum-1; i >= 0; i --) {
        if(array[i] == el)
            break;
    }

    if (i >= 0) {
        (*pNum) --;
#if MEMORY_DEBUG_REPORT
        DPrintf5("%lXh - freed %ld bytes. Total %d blocks.\n", el, sizearray[i], *pNum);
#endif
        for (j = i; j <= *pNum; j ++) {
            array[j] = array[j+1];
            sizearray[j] = sizearray[j+1];
        }
    } else {
#if MEMORY_DEBUG_REPORT
        DPrintf5("%lXh - no such block to free !!!!!\n", el);
#endif
     err_msg("!No such block to free!");
     goto err;
    }
 return 0;
err:
 return 1;
}

int DPrintf5(const char * format, ...)
 {
  static int init = 1;
  static FILE * file = NULL;
  va_list args;

  va_start(args, format);

#if MEMORY_DEBUG_REPORT
  if (init && file == NULL) {init = 0; file = fopen("c:\\tmp\\memdeb.log","wt");}

  if (file) vfprintf(file, format, args);

#endif
  va_end(args);
  return 0;
 }


#endif  /*  MEMORY_DEBUG_ON */

/**************************************************************************
*                                                                         *
*    This function   allocates    the    memory    block    of    given   *
*  size+sizeof(_HMEM)  bytes and returns the handle (_HMEM) or _NULL if   *
*  allocation fails.  The first sizeof(_HMEM) bytes of memory block are   *
*  used to store the handle of the block.                                 *
*                                                                         *
**************************************************************************/

#undef MAX_MBLOCKSIZE
#define MAX_MBLOCKSIZE 3000000L


_HMEM     HWRMemoryAllocHandle (_ULONG ulSize)
{
#if HWR_SYSTEM == HWR_MACINTOSH
Handle hMemory;
#elif HWR_SYSTEM == HWR_WINDOWS
HGLOBAL hMemory;
#else
void *hMemory;
#endif

   if (ulSize > MAX_MBLOCKSIZE)
      /*  Only far memory blocks!  */
      return((_HMEM)_NULL);

#if HWR_SYSTEM == HWR_MACINTOSH
   ulSize += sizeof(_HMEM);
#else
   ulSize += sizeof(p_VOID);
#endif /* HWR_SYSTEM */

#if HWR_SYSTEM == HWR_MACINTOSH
   hMemory = NewHandle(ulSize);
   if (hMemory == _NULL)
      return((_HMEM)_NULL);
   NameHandle(hMemory, 'para');

#if GETMEMSTATS
    if (nTons >= 256) Debugger();
    tons[nTons++] = hMemWindows;
    ((long*)*hMemory)[-1] = seq++;
#endif

#elif HWR_SYSTEM == HWR_WINDOWS
  #ifdef PEGASUS
    hMemory = LocalAlloc (LMEM_FIXED/*GMEM_SHARE|GHND*/, ulSize);
  #else
    hMemory = GlobalAlloc (GMEM_MOVEABLE/*GMEM_SHARE|GHND*/, ulSize);
  #endif
#else
   hMemory = malloc(ulSize);
#endif /* HWR_SYSTEM */

#if MEMORY_DEBUG_ON
    AddBlock(mhandle, mhandlesize, &mhandle_n, (p_CHAR)hMemory, ulSize);
#endif

   return((_HMEM)hMemory);
}


/**************************************************************************
*                                                                         *
*    This function locks the memory handle and returns the  pointer  to   *
*  the   memory   block  if  success  and  _NULL  if  fail.  The  first   *
*  sizeof(_HMEM) bytes of the block are given the block  handle  value,   *
*  but the returned value points to the area after handle.                *
*                                                                         *
**************************************************************************/

p_VOID    HWRMemoryLockHandle(_HMEM hMem)
{
#if HWR_SYSTEM == HWR_MACINTOSH
  Ptr Ptrp;
#else
  p_VOID Ptrp;
#endif /* HWR_SYSTEM */

#if HWR_SYSTEM == HWR_MACINTOSH
   HLock((Handle)hMem);
   Ptrp = (Ptr)(*(Handle)hMem);
#elif HWR_SYSTEM == HWR_WINDOWS
  #ifdef PEGASUS
   Ptrp = (p_VOID)(hMem);
  #else
   Ptrp = GlobalLock ((HGLOBAL)hMem);
  #endif
#else
    Ptrp = (p_VOID)hMem;
#endif /* HWR_SYSTEM */

   if (Ptrp == _NULL)
      return((p_VOID)_NULL);
   *((p_HMEM)Ptrp) = hMem;

#if HWR_SYSTEM == HWR_MACINTOSH
   return((p_VOID)((p_CHAR)Ptrp + sizeof(_HMEM)));
#else
   return((p_VOID)((p_CHAR)Ptrp + sizeof(p_VOID)));
#endif /* HWR_SYSTEM */
}


/**************************************************************************
*                                                                         *
*    This function unlocks  the  memory  block  and  returns  _TRUE  if   *
*  success and _FALSE if fail.                                            *
*                                                                         *
**************************************************************************/

_BOOL     HWRMemoryUnlockHandle(_HMEM hMem)
{
#if HWR_SYSTEM == HWR_MACINTOSH
   HUnlock((Handle)hMem);
#elif HWR_SYSTEM == HWR_WINDOWS
  #ifdef PEGASUS
   LocalUnlock((HLOCAL)hMem);
  #else 
   GlobalUnlock ((HGLOBAL)hMem);
  #endif
#else
   ;
#endif /* HWR_SYSTEM */
   return(_TRUE);
}

/**************************************************************************
*                                                                         *
**************************************************************************/

_ULONG  HWRMemorySize(_HMEM hMem)
{
 _ULONG ulSize;

#if HWR_SYSTEM == HWR_MACINTOSH
   ????
#else
//   return (_ULONG)(GlobalSize ((HGLOBAL)hMem) - sizeof(p_VOID));
  #ifdef PEGASUS
   #if MEMORY_DEBUG_ON
    #if MEMORY_HUGEDEBUG_ON
     ulSize = (_ULONG)(LocalSize((HLOCAL)(((p_UCHAR)hMem)-sizeof(p_VOID)-sizeof(_ULONG)*(1+DEB_TAIL_SIZE))));
    #else // MEMORY_HUGEDEBUG_ON
     ulSize = (_ULONG)LocalSize(((p_UCHAR)hMem)-sizeof(p_VOID)-sizeof(_ULONG));
    #endif // MEMORY_HUGEDEBUG_ON
   #else // MEMORY_DEBUG_ON
    ulSize = (_ULONG)LocalSize(((p_UCHAR)hMem)-sizeof(p_VOID));
   #endif // MEMORY_DEBUG_ON
  #else // PEGASUS
   ulSize = (_ULONG)(GlobalSize((HGLOBAL)hMem) - sizeof(p_VOID));
  #endif // PEGASUS

   ulSize -= sizeof(p_VOID);

 #if MEMORY_DEBUG_ON
   ulSize -= sizeof(p_VOID)*2;
 #endif

 #if MEMORY_HUGEDEBUG_ON
   ulSize -= sizeof(p_VOID)*(DEB_TAIL_SIZE+DEB_TAIL_SIZE);
 #endif

#endif /* HWR_SYSTEM */

 return ulSize;
}


/**************************************************************************
*                                                                         *
*    This function frees the memory block and returns _TRUE  if success   *
*  and _FALSE otherwise. (Lock count must not be greater than 1000.)      *
*                                                                         *
**************************************************************************/

_BOOL     HWRMemoryFreeHandle(_HMEM hMem)
{

#if MEMORY_DEBUG_ON
   DelBlock(mhandle, mhandlesize, &mhandle_n, (p_CHAR)hMem);
#endif

#if HWR_SYSTEM == HWR_MACINTOSH
#if GETMEMSTATS
    for (long i = 0;i<nTons;i++)
        if (tons[i] == (Handle) hMem) {
            while (++i < nTons) tons[i-1] = tons[i];
            tons[--nTons] = 0;
            break;
        }
#endif
   DisposHandle((Handle)hMem);
#elif HWR_SYSTEM == HWR_WINDOWS
  #ifdef PEGASUS
   LocalFree ((HLOCAL)hMem);
  #else
   GlobalFree ((HGLOBAL)hMem);
  #endif
#else
   free((void *)hMem);
#endif  /* HWR_SYSTEM */
   return(_TRUE);
}


/**************************************************************************
*                                                                         *
*    This function   allocates    the    memory    block    of    given   *
*  size+sizeof(_HMEM),  locks  it,  places  the  memory  handle  in the   *
*  beginning of the block and returns the first  free  address  in  the   *
*  block (immediately after handle).                                      *
*    If the request fails, returns _NULL.                                 *
*                                                                         *
**************************************************************************/

p_VOID    HWRMemoryAlloc(_ULONG ulSize_in)
{
_ULONG ulSize;
p_VOID Ptrp = _NULL;
#if HWR_SYSTEM == HWR_MACINTOSH
Handle hMemory;
#elif HWR_SYSTEM == HWR_WINDOWS
HGLOBAL hMemory;
#else
_HMEM hMemory;
#endif /* HWR_SYSTEM */

  ulSize = ((ulSize_in + 3) >> 2) << 2;  // Ensure size is divides by 4

   if (ulSize > MAX_MBLOCKSIZE)
      /*  Only far memory blocks!  */
      return((p_VOID)_NULL);

#if HWR_SYSTEM == HWR_MACINTOSH
   ulSize += sizeof(_HMEM);
#else
   ulSize += sizeof(p_VOID);
#endif /* HWR_SYSTEM */

#if HWR_SYSTEM == HWR_MACINTOSH
   hMemory = NewHandle(ulSize);
   if (hMemory == _NULL)
      return(_NULL);
   NameHandle(hMemory, 'para');

#if GETMEMSTATS
    if (nTons >= 256) Debugger();
    tons[nTons++] = hMemory;
    ((long*)*hMemory)[-1] = seq++;
#endif

   HLock(hMemory);
   Ptrp = (p_VOID)(*hMemory);
   if (Ptrp == _NULL) {
      DisposHandle(hMemory);
      return(_NULL);
   }
#elif HWR_SYSTEM == HWR_WINDOWS

#if MEMORY_DEBUG_ON
   ulSize += sizeof(p_VOID)*2;
#endif

#if MEMORY_HUGEDEBUG_ON
   ulSize += sizeof(p_VOID)*(DEB_TAIL_SIZE+DEB_TAIL_SIZE);
#endif

#if MEMORY_FIXED
   Ptrp = GlobalAlloc(GMEM_FIXED/*GMEM_SHARE|GHND*/, ulSize);
   if (Ptrp == _NULL) return(_NULL);
   hMemory = (HGLOBAL)(Ptrp);
#else
  #ifdef PEGASUS
   Ptrp = (p_VOID)LocalAlloc(LMEM_FIXED/*GMEM_SHARE|GHND*/, ulSize);
   hMemory = _NULL;
   if (Ptrp == _NULL) return(_NULL);
  #else
   Ptrp = GlobalAllocPtr (GMEM_MOVEABLE/*GMEM_SHARE|GHND*/, ulSize);
   if (Ptrp == _NULL) return(_NULL);
   hMemory = GlobalPtrHandle (Ptrp);
  #endif
#endif

   *((p_HMEM)Ptrp) = (_HMEM)hMemory;
   Ptrp  = (p_VOID)((p_HMEM)Ptrp + 1);

#if MEMORY_DEBUG_ON
   *((p_ULONG)Ptrp) = (_ULONG)(ulSize);
   *((p_ULONG)((p_UCHAR)Ptrp+ulSize-sizeof(_ULONG)*(1+1))) = 0x55555555l;
  //   (p_ULONG)Ptrp += 1;
   Ptrp = (p_VOID)(((p_ULONG)Ptrp) + 1);

  #if MEMORY_HUGEDEBUG_ON
    {
     _INT i;
     p_ULONG ptr;

     ptr = (p_ULONG)Ptrp;
     for (i = 0; i < DEB_TAIL_SIZE; i ++, ptr ++) *ptr = 0x77777777l;
     ptr = (p_ULONG)((p_UCHAR)Ptrp + (ulSize-sizeof(_ULONG)*(3+DEB_TAIL_SIZE)));
     for (i = 0; i < DEB_TAIL_SIZE; i ++, ptr ++) *ptr = 0x77777777l;

     Ptrp = (p_VOID)(((p_ULONG)Ptrp) + DEB_TAIL_SIZE);
    }
  #endif  // MEMORY_HUGEDEBUG_ON
#endif // MEMORY_DEBUG_ON


#else  /* HWR_SYSTEM */
   Ptrp = malloc (ulSize);
   if (Ptrp == _NULL)
      return(_NULL);
   hMemory = (_HMEM)Ptrp;
#endif /* HWR_SYSTEM */

#if MEMORY_DEBUG_ON
   AddBlock(mblock, mblocksize, &mblock_n, (p_CHAR)Ptrp, ulSize);
#endif

#if HWR_SYSTEM == HWR_MACINTOSH
   return((p_VOID)((p_CHAR)Ptrp + sizeof(_HMEM)));
#else
//   return((p_VOID)((p_CHAR)Ptrp + sizeof(p_VOID)));
   return (p_VOID)Ptrp;
#endif /* HWR_SYSTEM */
}


/**************************************************************************
*                                                                         *
*    This function frees the memory block using its pointer. It assumes   *
*  that the lock count <= 1000.  Returns _TRUE if success and _FALSE if   *
*  fail.                                                                  *
*                                                                         *
**************************************************************************/

_BOOL     HWRMemoryFree(p_VOID pvBlock)
{
#if defined(HWX_INTERNAL) && defined(HWX_HEAPCHECK) && !defined(NDEBUG)
	HANDLE	hHeap = GetProcessHeap();
	BOOL	bHeapState;

	if (hHeap)
	{
		bHeapState = HeapValidate(hHeap, 0, NULL);
		ASSERT(bHeapState);
	}
#endif

#if MEMORY_DEBUG_ON
   DelBlock(mblock, mblocksize, &mblock_n, (p_CHAR)pvBlock);
#endif

#if HWR_SYSTEM == HWR_MAC
_HMEM hMem;

   hMem = *((p_HMEM)pvBlock - 1);

#if GETMEMSTATS
    for (long i = 0; i<nTons; i++)
        if (tons[i] == (Handle) hMem) {
            while (++i < nTons) tons[i-1] = tons[i];
            tons[--nTons] = 0;
            break;
        }
#endif

   DisposHandle((Handle)hMem);
#elif HWR_SYSTEM == HWR_WINDOWS

#if MEMORY_DEBUG_ON

  #if MEMORY_HUGEDEBUG_ON
  {
   _INT i;
   _INT flag = 0;
   p_ULONG ptr;
   _ULONG  len  = *((p_ULONG)pvBlock-1-DEB_TAIL_SIZE) - sizeof(_ULONG)*(3+(DEB_TAIL_SIZE+DEB_TAIL_SIZE));

   ptr = (p_ULONG)pvBlock-1;
   for (i = 0; i < DEB_TAIL_SIZE; i ++, ptr --) if (*ptr != 0x77777777l) flag = 1;
   ptr = (p_ULONG)((p_UCHAR)pvBlock + len);
   for (i = 0; i < DEB_TAIL_SIZE; i ++, ptr ++) if (*ptr != 0x77777777l) flag = 1;

   if (flag) err_msg("!Allocated memory boundaries are being stepped on!");

   #if MEMORY_FIXED
     GlobalFree (((p_UCHAR)pvBlock)-sizeof(p_VOID)-sizeof(_ULONG)*(1+DEB_TAIL_SIZE));
   #else
     #ifdef PEGASUS
     LocalFree(((p_UCHAR)pvBlock)-sizeof(p_VOID)-sizeof(_ULONG)*(1+DEB_TAIL_SIZE));
     #else
     GlobalFreePtr (((p_UCHAR)pvBlock)-sizeof(p_VOID)-sizeof(_ULONG)*(1+DEB_TAIL_SIZE));
     #endif
   #endif
  }
  #else // MEMORY_HUGEDEBUG_ON
  {
   _ULONG len  = *((p_ULONG)pvBlock-2) - sizeof(_ULONG)*3;
   p_ULONG ptr = (p_ULONG)((p_UCHAR)pvBlock + len);

   if (*ptr != 0x55555555l) err_msg("!Allocated memory boundaries are incorrect!");

   #if MEMORY_FIXED
     GlobalFree (((p_UCHAR)pvBlock)-sizeof(p_VOID)-sizeof(_ULONG));
   #else
     GlobalFreePtr (((p_UCHAR)pvBlock)-sizeof(p_VOID)-sizeof(_ULONG));
   #endif
  }
  #endif // MEMORY_HUGEDEBUG_ON

#else // MEMORY_DEBUG_ON
 #if MEMORY_FIXED
   GlobalFree (((p_UCHAR)pvBlock)-sizeof(p_VOID));
 #else
   #ifdef PEGASUS
   LocalFree(((p_UCHAR)pvBlock)-sizeof(p_VOID));
   #else
   GlobalFreePtr (((p_UCHAR)pvBlock)-sizeof(p_VOID));
   #endif
 #endif
#endif // MEMORY_DEBUG_ON

#else  /* HWR_SYSTEM */
   free (pvBlock);
#endif /* HWR_SYSTEM */

   return(_TRUE);
}

/*******************************************************************/


//CHE:
#if HWR_SYSTEM == HWR_WINDOWS
#if MEMORY_DEBUG_ON

_INT  CheckBlocks(char *szID)
{
  _INT   i;
  _CHAR  szMsg[128];
  _INT   iRet = 0;

  //make a log:
/*
  {
    static _LONG  lCount = 0;
    FILE          *f;
    if  ( (f = fopen( "c:\\logg\\chkblks.log", "at")) != _NULL )  {
      if  ( lCount == 0 )
        fprintf( f, "\n\n---------------------------------------------\n" );
      sprintf( szMsg, "\n%ld: %s", (++lCount), szID );
      fprintf( f, szMsg );
      fclose( f );
    }
  }
 */

  for  ( i=0;  i<mblock_n;  i++ )
   {
     p_VOID  pvBlock = (p_VOID)mblock[i];
#if MEMORY_HUGEDEBUG_ON
     {
       _INT iLocal;
       _INT flag = 0;
       p_ULONG ptr;
       _ULONG  len  = *((p_ULONG)pvBlock-1-DEB_TAIL_SIZE)
                           - sizeof(_ULONG)*(3+(DEB_TAIL_SIZE+DEB_TAIL_SIZE));

       ptr = (p_ULONG)pvBlock-1;
       for (iLocal = 0; iLocal < DEB_TAIL_SIZE; iLocal ++, ptr --) if (*ptr != 0x77777777l) flag = 1;
       ptr = (p_ULONG)((p_UCHAR)pvBlock + len);
       for (iLocal = 0; iLocal < DEB_TAIL_SIZE; iLocal ++, ptr ++) if (*ptr != 0x77777777l) flag = 1;

       if (flag)
       {
        iRet = 1;
#ifdef PEGASUS
{
 TCHAR str[200];
 int   i;
        wsprintf( str, L"CHKBLKS: BAD memory boundaries (777)! ( %s )", szID );
        for(i=0; str[i]; i++)
           szMsg[i] = (unsigned char)str[i];
        szMsg[i] = 0;
}
#else
        sprintf( szMsg, "CHKBLKS: BAD memory boundaries (777)! ( %s )", szID );
#endif
        err_msg( szMsg );
        break;
       }
     }
#else  /* ! MEMORY_HUGEDEBUG_ON */
     {
      _ULONG len  = *((p_ULONG)pvBlock-2) - sizeof(_ULONG)*3;
      p_ULONG ptr = (p_ULONG)((p_UCHAR)pvBlock + len);
      if (*ptr != 0x55555555l)
       {
        iRet = 1;
#ifdef PEGASUS
{
 TCHAR str[200];
 int   i;
        wsprintf( str, L"CHKBLKS: BAD memory boundaries(555)! ( %s )", szID );
        for(i=0; str[i]; i++)
           szMsg[i] = (unsigned char)str[i];
        szMsg[i] = 0;
}
#else
        sprintf( szMsg, "CHKBLKS: BAD memory boundaries(555)! ( %s )", szID );
#endif
        err_msg( szMsg );
        break;
       }
     }
#endif  /*MEMORY_HUGEDEBUG_ON*/
   }

   return  iRet;

} /*CheckBlocks*/
#endif /* MEMORY_DEBUG_ON */
#endif /* HWR_SYSTEM */
/*******************************************************************/
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\hwr_std.cpp ===
/**************************************************************************
*                                                                         *
*  HWR_STD.C                              Created: 20 May 1991.           *
*                                                                         *
*    This file  contains  the  functions  for  some  basic   operations   *
*                                                                         *
**************************************************************************/

#include "bastypes.h"
#include "hwr_sys.h"

#include <stdlib.h>
#ifndef PEGASUS
#include <stdio.h>
#endif /*!PEGASUS*/
/**************************************************************************
*                                                                         *
*    HWRAbs.                                                              *
*                                                                         *
**************************************************************************/

_INT  HWRAbs (_INT iArg)
   {
   return (iArg>0 ? iArg : -iArg);
   }

_LONG  HWRLAbs (_LONG lArg)
   {
   return (lArg>0 ? lArg : -lArg);
   }

/**************************************************************************
*                                                                         *
*    HWRItoa.                                                             *
*                                                                         *
**************************************************************************/

#ifndef PEGASUS
_STR    HWRItoa (_INT iNumber, _STR pcString, _INT iRadix)
   {
        
    p_CHAR pcRetcode;
    char *ptr;

    switch(iRadix) {
        default: ptr = "%0"; break;
        case 10: ptr = "%d"; break;
        case 16: ptr = "%x"; break;
     }
#ifdef PEGASUS
     wvsprintf((LPTSTR)pcString,(LPCTSTR)ptr,iNumber);
#else
     sprintf(pcString,ptr,iNumber);
#endif
     pcRetcode = (p_CHAR)pcString; 

     return(pcRetcode);

   }
/**************************************************************************
*                                                                         *
*    HWRLtoa.                                                             *
*                                                                         *
**************************************************************************/

_STR    HWRLtoa (_LONG lNumber, _STR pcString, _INT iRadix)
   {
    p_CHAR pcRetcode;
    char *ptr;

    switch(iRadix) {
        default: ptr = "%l0"; break;
        case 10: ptr = "%ld"; break;
        case 16: ptr = "%lx"; break;
     }
     sprintf(pcString,ptr,lNumber);
     pcRetcode = (p_CHAR)pcString;

     return(pcRetcode);
   }

#endif

#ifdef hasQD
/**************************************************************************
*                                                                         *
*    HWRRand.                                                             *
*                                                                         *
**************************************************************************/

_INT   HWRRand(_VOID)

   {
   return rand();
   }
#endif

/**************************************************************************
*                                                                         *
*    HWRAtoi.                                                             *
*                                                                         *
**************************************************************************/

_INT      HWRAtoi (_STR pcString)
{
  return((_INT)atol(pcString));
}

/**************************************************************************
*                                                                         *
*    HWRAtol.                                                             *
*                                                                         *
**************************************************************************/

_LONG     HWRAtol(_STR pcString)
   {
   return atol (pcString);
   }
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\ldbutil.cpp ===
#include "bastypes.h"
#include "ams_mg.h"
#include "hwr_sys.h"
#include "hwr_file.h"

#if PS_VOC

#include "xrwdict.h"

#include "ldbtypes.h"
#include "ldbutil.h"

#ifndef LOAD_RESOURCES_FROM_ROM
#define LOAD_RESOURCES_FROM_ROM 0
#endif

//StateMap sm = {_NULL, 0, 0, 0, _NULL, _NULL, _NULL, 0 };

#if !defined(PEGASUS) && !LOAD_RESOURCES_FROM_ROM

// ----------  AVP 10.11.96 ---------------------------------------------

#ifndef DUMP_LDB
#define DUMP_LDB 0
#endif

#if DUMP_LDB
  _INT DumpLdbs(p_Ldb pLdb1, _INT nldbs, p_INT ldb_lens);
#endif

// ----------------------------------------------------------------------

_INT Load1Ldb(_HFILE ldbFile, p_VOID _PTR ppLdb)
{
  LDBHeader ldbh;
  _LONG     offRules;
  _ULONG    ldbSize;
  p_Ldb     pLdb = _NULL;  //CHE 08/19/94
  PLDBRule  pRules;
  _ULONG    n;
  _BOOL     fResult;

  fResult = _FALSE;

  /* Read header */
  if (HWRFileRead(ldbFile, (p_CHAR)&ldbh, (_WORD) sizeof(LDBHeader)) !=
    (_WORD) sizeof(LDBHeader)) goto Error;

  /* Check signature */
  if (HWRStrnCmp(ldbh.sign, LdbFileSignature, SizeofLdbFileSignature) !=
    0) goto Error;

  /* Calculate size and offset of main part */
  offRules = ldbh.extraBytes;
  ldbSize = ldbh.fileSize - sizeof(LDBHeader) - ldbh.extraBytes;

  /* Allocate memory for LDB */
  pLdb = (p_Ldb)HWRMemoryAlloc(ldbSize);
  if (pLdb == _NULL) goto Error;

  /* Seek and read it */
  if (!HWRFileSeek(ldbFile, offRules, HWR_FILE_SEEK_CUR)) goto Error;
  if (HWRFileRead(ldbFile, (p_CHAR) pLdb, (_WORD) ldbSize) !=
    (_WORD) ldbSize) goto Error;

  pRules = (PLDBRule) pLdb;
//  pLdb->nrules = ldbh.nRules;
//  /* Tune LDB */
//  for (n = 0; n < ldbh.nRules; n++) {
//    pRules[n].strOffset += (unsigned long) pLdb;
//  }

  *ppLdb = pLdb;
  fResult = _TRUE;

Error:

  if (!fResult && pLdb != _NULL) HWRMemoryFree(pLdb);

  return (fResult) ? ldbSize : 0;
} /* Load1Ldb */

_BOOL LdbLoad(p_UCHAR fname, p_VOID _PTR ppLdbC)
{
  _CHAR     fileName[128];
  p_CHAR    pch;
  _HFILE    ldbFile = _NULL;  //CHE 08/19/94
  _BOOL     fResult, fLoadRes;
  p_Ldb     pLdb1, pLdb;
  p_Ldb _PTR ppLdbNext;
#if DUMP_LDB
  _INT      nldbs = 0;
  _INT      ldb_lens[16]; // AVP Will we have more than 16 LDBs in chain ????
#endif

  fResult = _FALSE;
  pLdb1 = _NULL;

  if (fname == _NULL) goto Error;
  /* Construct file name */
  HWRStrCpy(fileName, (_STR)fname);
  if ((pch = HWRStrrChr(fileName, (_SHORT)'.')) != _NULL) *pch = 0;
  HWRStrCat(fileName, ".ldb");

  /* Open file */
  ldbFile = HWRFileOpen(fileName, HWR_FILE_RDONLY, HWR_FILE_EXCL);
  if (ldbFile == _NULL) goto Error;

  ppLdbNext = &pLdb1;    
  for (;;) {
    pLdb = (p_Ldb)HWRMemoryAlloc(sizeof(Ldb));
    if (pLdb == _NULL) goto Error;
    fLoadRes = Load1Ldb(ldbFile, (p_VOID _PTR)&(pLdb->am));
    if (!fLoadRes) {HWRMemoryFree(pLdb); break;}
    pLdb->next = _NULL;
    *ppLdbNext = pLdb;
    ppLdbNext = &(pLdb->next);
#if DUMP_LDB
    ldb_lens[nldbs++] = fLoadRes; // Len here now
#endif
   }

  if (pLdb1 == _NULL) goto Error;

  *ppLdbC = pLdb1;
  fResult = _TRUE;

#if DUMP_LDB
    DumpLdbs(pLdb1, nldbs, ldb_lens);
#endif

Error:
  if (!fResult) LdbUnload((p_VOID _PTR)&pLdb1);
  if (ldbFile != _NULL) HWRFileClose(ldbFile);

  return fResult;
} /* LdbLoad */

_BOOL LdbUnload(p_VOID _PTR ppLdbC)
{
  p_Ldb pLdb, pLdbNext;

  pLdb = (p_Ldb) *ppLdbC;
  while (pLdb != _NULL) {
    pLdbNext = pLdb->next;
    if (pLdb->am != _NULL) HWRMemoryFree(pLdb->am);
    HWRMemoryFree(pLdb);
    pLdb = pLdbNext;
  }
  *ppLdbC = _NULL;
  return _TRUE;
} /* LdbUnload */

//static _LONG lexDbCnt; // DBG

#endif //#ifndef PEGASUS

_VOID FreeStateMap(p_StateMap psm)
{
  if (psm->pulStateMap != _NULL) {
    HWRMemoryFree(psm->pulStateMap);
    psm->pulStateMap = _NULL;
  }
  if (psm->sym != _NULL) {
    HWRMemoryFree(psm->sym);
    psm->sym = _NULL;
  }
  if (psm->sym != _NULL) {
    HWRMemoryFree(psm->sym);
    psm->sym = _NULL;
  }
  if (psm->l_status != _NULL) {
    HWRMemoryFree(psm->l_status);
    psm->l_status = _NULL;
  }
  if (psm->pstate != _NULL) {
    HWRMemoryFree(psm->pstate);
    psm->pstate = _NULL;
  }
  psm->nLdbs = 0;
  psm->nStateLim = 0;
  psm->nStateMac = 0;
  psm->nSyms = 0;
} /* FreeStateMap */

_VOID ClearStates(p_StateMap psm, _INT nSyms)
{
  _INT n;
  _INT deep = nSyms * psm->nLdbs;

  for (n = 0; n < deep; n++)
    psm->pstate[n] = 0xffffffffL;
} /* ClearStates */

_BOOL InitStateMap(p_StateMap psm, _INT nLdbs)
{
  _INT n;
  _BOOL fResult = _FALSE;

  FreeStateMap(psm);
  psm->pulStateMap = (p_ULONG) HWRMemoryAlloc(nStateLimDef*nLdbs*sizeof(_ULONG));
  if (psm->pulStateMap == _NULL) goto Error;
  psm->nLdbs = nLdbs;
  psm->nStateLim = nStateLimDef;
  psm->nStateMac = 1;
  for (n = 0; n < psm->nLdbs; n++) psm->pulStateMap[n] = 0;
  psm->sym = (p_UCHAR) HWRMemoryAlloc(XRWD_MAX_LETBUF*sizeof(_UCHAR));
  if (psm->sym == _NULL) goto Error;
  psm->l_status = (p_UCHAR) HWRMemoryAlloc(XRWD_MAX_LETBUF*sizeof(_UCHAR));
  if (psm->l_status == _NULL) goto Error;
  psm->pstate = (p_ULONG) HWRMemoryAlloc(XRWD_MAX_LETBUF*nLdbs*sizeof(_ULONG));
  if (psm->pstate == _NULL) goto Error;
  ClearStates(psm, XRWD_MAX_LETBUF);
  fResult = _TRUE;

Error:

  if (!fResult) FreeStateMap(psm);
  return fResult;
} /* InitStateMap */

_INT GetNextSyms(p_Ldb pLdb, _ULONG state, _INT nLdb, p_StateMap psm)
{
  _INT    n, k, i, nSyms, ism;
  _STR    choice;
  _ULONG  newState, debug;
  _UCHAR  l_status;
  p_UCHAR sym = psm->sym;
  p_UCHAR plst = psm->l_status;
  p_ULONG pstate = psm->pstate;
  _INT    nLdbs = psm->nLdbs;
  Automaton am  = pLdb->am;

  nSyms = psm->nSyms;
  if ((state & LdbMask) == LdbMask) return nSyms;
  k = 0;
  do {
    choice = (p_CHAR)(am[state+k].choice) + (_ULONG)am;
    newState = am[state+k].state;
    if ((newState & LdbMask) > 1000 && (newState & LdbMask) != LdbMask)
      debug = newState;
    for (n = 0; nSyms < XRWD_MAX_LETBUF && choice[n] != '\0'; n++) {
      if (newState & LdbLast) {
        l_status = XRWD_BLOCKEND;
      } else if (newState & LdbAllow) {
        l_status = XRWD_WORDEND;
      } else {
        l_status = XRWD_MIDWORD;
      }
      for (i = 0, ism = 0; i < nSyms; i++, ism += nLdbs) {
        if (sym[i] == choice[n] /*&& l_status == plst[i]*/) break;
      }
      if (i < nSyms || i < XRWD_MAX_LETBUF) {
        pstate[i*nLdbs + nLdb] = newState & LdbMask;
        if (i == nSyms) {
          /* It is new state */
          sym[i] = choice[n];
          plst[i] = l_status;
          nSyms++;
        } else {
          if (l_status == XRWD_WORDEND) {
            plst[i] = l_status;
          } else if ((l_status == XRWD_BLOCKEND && plst[i] == XRWD_MIDWORD) ||
                     (l_status == XRWD_MIDWORD && plst[i] == XRWD_BLOCKEND)) {
            plst[i] = XRWD_WORDEND;
          }
        }
      }
    }
    if (nSyms == XRWD_MAX_LETBUF) break;
    k++;
  } while (newState & LdbCont);
  psm->nSyms = nSyms;
  return nSyms;
} /* GetNextSyms */

// ----------  AVP 10.11.96 ---------------------------------------------

#if DUMP_LDB

#include <stdio.h>

/* ************************************************************************* */
/*        Dump LDB to C file                                                 */
/* ************************************************************************* */
_INT DumpLdbs(p_Ldb pLdb, _INT nldbs, p_INT ldb_lens)
 {
  _INT    n, i, len;
  p_Ldb   pl;
  p_ULONG ptr;
  FILE *  file;

  if ((file = fopen("ldb_img.cpp", "wt")) == _NULL) goto err;

  fprintf(file, "// **************************************************************************\n");
  fprintf(file, "// *    LDB file as C file                                                  *\n");
  fprintf(file, "// **************************************************************************\n");

  fprintf(file, "\n#include \"bastypes.h\"  \n\n");

  for (n = 0, pl = pLdb; n < nldbs; n ++, pl = pl->next)
   {
    ptr = (p_ULONG)pl->am;
    len = (ldb_lens[n] / 4) + 1;

    fprintf(file, "\n// ****   LDB %d body   ********************************************************\n", n);

    fprintf(file, "ROM_DATA _ULONG img_ldb%d_body[%d] =  \n", n, len);
    fprintf(file, " {  \n");
    for (i = 0; i < len; i ++, ptr ++)
     {
      fprintf(file, "0x%08lX", *ptr);
      if (i < len-1) fprintf(file, ", ");
      if (i%8 == 7)  fprintf(file, "\n");
     }
    fprintf(file, " }; \n\n");
   }

  fprintf(file, 
    "#ifdef __cplusplus\n"
    "extern \"C\"\n"
    "#endif\n"
    "const _ULONG _PTR GetLDBImgBody(_INT index);\n"
    "\n"
    "const _ULONG _PTR\n"
    "GetLDBImgBody(_INT index)\n"
    "{\n"
    "  switch(index)\n"
    "  {\n"
    /* }}*/
    );

  for (n = 0, pl = pLdb; n < nldbs; n ++, pl = pl->next)
    fprintf(file,
      "    case %d:  return img_ldb%d_body;\n", (int)n, (int)n
      );

  fprintf(file, 
    /* {{*/
    "    default: return _NULL;\n"
    "  }\n"
    "}\n"
    );

  fprintf(file, "// **************************************************************************\n");
  fprintf(file, "// *    END OF ALL                                                          *\n");
  fprintf(file, "// **************************************************************************\n");

  fclose(file);
  err_msg("LDBS output to ldb_img.cpp.");

  return 0;
err:
  return 1;
 }
#endif

// ----------------------------------------------------------------------


#endif /* PS_VOC */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\ligstate.cpp ===
/* ****************************************************************** */
/* *    Set and get learning states from lrn buffer functions       * */
/* ****************************************************************** */
/*
    File:       ligstate.c

    Contains:   This file contains the code
    			needed to get/set letter image group state.

    Written by: Mikhail Ovsiannikov

    Copyright:   1998 by ParaGraph Int'l, all rights reserved.

    Change History (most recent first):

       <1>  	3/24/98		mbo     New today

*/

#include "ams_mg.h"
#include "dti.h"

#if DTI_LRN_SUPPORTFUNC

#include "ligstate.h"

#define LIG_NUMBITS (sizeof((*((LIGStatesType*)0))[0]) * 8)

#define LIG_BITINDEX(let, gr) \
	((((let) - LIG_FIRST_LETTER) * LIG_LET_NUM_GROUPS + (gr)) * \
	LIG_NUM_BITS_PER_GROUP)

#define LIG_BITSSHIFT(bitindex) \
	(LIG_NUMBITS - LIG_NUM_BITS_PER_GROUP - bitindex % LIG_NUMBITS)

/*
 * Sets state for a given letter and group.
 * Returns 0 if letter and group are in the allowed range, -1 otherwise.
 */
int
LIGSetGroupState(
	LIGStatesType *ioGStates,
	int           inLetter,
	int           inGroup,
	E_LIG_STATE   inGroupState)
{
	int i;
	int shift;

	if (inLetter < LIG_FIRST_LETTER ||
	    inLetter > LIG_LAST_LETTER  ||
		inGroup < 0 ||
		inGroup > LIG_LET_NUM_GROUPS) {
		return -1;
	}

	i = LIG_BITINDEX(inLetter, inGroup);
	shift = LIG_BITSSHIFT(i);
	i /= LIG_NUMBITS;
	(*ioGStates)[i] &= ~(LIG_NUM_BIT_GROUP_MASK << shift);
	(*ioGStates)[i] |= (inGroupState << shift);

	return 0;
}

/*
 * Returns state for given letter and group.
 */
E_LIG_STATE
LIGGetGroupState(
	const LIGStatesType *inGStates,
	int                 inLetter,
	int                 inGroup)
{
	int i;
	int shift;

	if (inLetter < LIG_FIRST_LETTER ||
	    inLetter > LIG_LAST_LETTER  ||
		inGroup < 0 ||
		inGroup > LIG_LET_NUM_GROUPS) {
		return LIG_STATE_UNDEF;
	}

	i = LIG_BITINDEX(inLetter, inGroup),
	shift = LIG_BITSSHIFT(i);
	i /= LIG_NUMBITS;
	return ((E_LIG_STATE)
	        (((*inGStates)[i] >> shift) & LIG_NUM_BIT_GROUP_MASK));
}

#endif // DTI_LRN_SUPPORTFUNC

/* ****************************************************************** */
/* *     End of all                                                 * */
/* ****************************************************************** */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\links.cpp ===
#ifndef LSTRIP

/****************************************************************************/
/* This file contains programs, responsible for creation links between xr's */
/****************************************************************************/

#include "ams_mg.h"
#include "hwr_sys.h"
#include "lowlevel.h"
#include "lk_code.h"
#include "def.h"
#include "low_dbg.h"
#include "calcmacr.h"

#if PG_DEBUG
 #include "pg_debug.h"
 extern p_CHAR links_name[];
#endif /* PG_DEBUG */

#define CR_TO_BE_STICK                5
#define CR_TO_BE_STICK_IF_UNKNOWN    20
#define TINY_CR                      10
#define SMALL_CR                     15
#define MED_CR                       20
#define LARGE_CR                     30
#define MIN_DL_DR                    10
#define CR_TO_BE_SMALL_Z_S           25

_LINK_TYPE CalculateStickOrArc(p_SAD pSAD);
_LINK_TYPE CalculateLinkLikeSZ(p_SAD pSAD,_INT dy);
_LINK_TYPE CalculateLinkWithoutSDS(p_low_type low_data,p_SPECL pXr,p_SPECL nxt);
_LINK_TYPE GetCurveLink(_SHORT cr,_BOOL bDirCW);
_LINK_TYPE GetMovementLink(_UCHAR code);

_SHORT RecountSlantInSDS(_SHORT slant,_SHORT slope);
#if PG_DEBUG
_VOID print_link(p_SHORT x,p_SHORT y,p_SDS pSDSi,_LINK_TYPE Link);
_VOID print_SDS(p_SDS pSDSi);
#endif /* PG_DEBUG */

/****************************************************************************/
/***** This program determines link between this and next xr             ****/
/****************************************************************************/
_SHORT GetLinkBetweenThisAndNextXr(p_low_type low_data,p_SPECL pXr,
                                   xrd_el_type _PTR xrd_elem)
{
 p_SPECL nxt=pXr->next;
 _LINK_TYPE Link;

 while(nxt!=_NULL && IsXTorST(nxt))
  nxt=nxt->next;
 /* no link for "break" elements */
 if(   IsAnyBreak(pXr)
    || NULL_or_ZZ_this(nxt)
    || IsXTorST(pXr)
    || IsAnyAngle(pXr)     && CrossInTime(pXr,nxt) &&
       !IsAnyMovement(nxt) && nxt->code!=_DF_
   )
  {
    Link=LINK_LINE; // LINK_UNKNOWN;
    goto ret;
  }

 if(IsAnyMovement(pXr))
  {
    Link=GetMovementLink(pXr->code);
    goto ret;
  }

 if(pXr->code==_DF_)
  {
    Link=LINK_LINE;
    goto ret;
  }

 /* skip angles, crossing in time with current elements, to determine
    link between two "strong" elements */
 while(nxt!=_NULL && IsAnyAngle(nxt) && CrossInTime(pXr,nxt))
  nxt=nxt->next;
 if(nxt==_NULL)
  {
    Link=LINK_LINE; // LINK_UNKNOWN;
    goto ret;
  }

 /* for elements, following by "shelfs", determine link based on "shelf" */
 if(nxt->code==_DF_)
  {
    Link=LINK_LINE;
    goto ret;
  }

 if(!IsAnyAngle(pXr))
  { p_SPECL pAfterAn=nxt;
    /* try to find "movement" element after angles */
    while(pAfterAn!=_NULL && IsAnyAngle(pAfterAn))
     pAfterAn=pAfterAn->next;
    /* for elements, following by special "movement" elements
       determine link based on this element */
    if(pAfterAn!=_NULL && (Link=GetMovementLink(pAfterAn->code))!=LINK_UNKNOWN)
       goto ret;
  }
 else if(IsAnyMovement(nxt))
       nxt=nxt->next;

 Link=CalculateLinkWithoutSDS(low_data,pXr,nxt);

ret:
 XASSIGN_XLINK(xrd_elem,(_UCHAR)Link)
 return((_SHORT)Link);

} /* end of GetLinkBetweenThisAndNextXr */

/****************************************************************************/
/***** This program calculates special "movement" links                  ****/
/****************************************************************************/
_LINK_TYPE GetMovementLink(_UCHAR code)
{
  _LINK_TYPE Link=LINK_UNKNOWN;

  switch (code)
   {
     case _TZ_: Link=LINK_HZ_LIKE;
                break;
     case _TS_: Link=LINK_HS_LIKE;
                break;
     case _BR_: Link=LINK_HCR_CW;
                break;
     case _BL_: Link=LINK_HCR_CCW;
                break;
   }

  return Link;

} /* end of GetMovementLink */

/****************************************************************************/
/***** This program calculates curvature of link                         ****/
/****************************************************************************/
_LINK_TYPE GetCurveLink(_SHORT cr,_BOOL bDirCW)
{
 _LINK_TYPE Link;

 if(cr<TINY_CR)
  if(bDirCW)
   Link=LINK_TCR_CW;
  else
   Link=LINK_TCR_CCW;
 else if(cr<SMALL_CR)
  if(bDirCW)
   Link=LINK_SCR_CW;
  else
   Link=LINK_SCR_CCW;
 else if(cr<MED_CR)
  if(bDirCW)
   Link=LINK_MCR_CW;
  else
   Link=LINK_MCR_CCW;
 else if(cr<LARGE_CR)
  if(bDirCW)
   Link=LINK_LCR_CW;
  else
   Link=LINK_LCR_CCW;
 else
  if(bDirCW)
   Link=LINK_HCR_CW;
  else
   Link=LINK_HCR_CCW;

 return Link;

} /* end of GetCurveLink */

/****************************************************************************/
/***** This program calculates link, supposed to be Stick or Arc         ****/
/****************************************************************************/
_LINK_TYPE CalculateStickOrArc(p_SAD pSAD)
{
 _LINK_TYPE Link=LINK_UNKNOWN;
 _SHORT dL=pSAD->dL,dR=pSAD->dR;

 /* to avoid small s-like and z-like links */
 if(dL>FOUR(dR) && dR<MIN_DL_DR)
  dR=pSAD->dR=0;
 else if(dR>FOUR(dL) && dL<MIN_DL_DR)
  dL=pSAD->dL=0;

 /* if curvature is small, it will be stick */
 if( pSAD->cr<CR_TO_BE_STICK ||
    (pSAD->cr<CR_TO_BE_STICK_IF_UNKNOWN && dL!=0 && dR!=0)
   )
     Link=LINK_LINE;
 else  /* some kind of arc */
  {
    /* arcs LEFT, RIGHT and so on */
    if(pSAD->dL==0 || pSAD->dR==0)
     if(pSAD->dL!=0)
      Link=GetCurveLink(pSAD->cr,_TRUE);
     else /* dR!=0 */
      Link=GetCurveLink(pSAD->cr,_FALSE);
  }

 return(Link);

} /* end of CalculateStickOrArc */

/****************************************************************************/
/***** This program calculates link, supposed to be S or Z-like arc      ****/
/****************************************************************************/
_LINK_TYPE CalculateLinkLikeSZ(p_SAD pSAD,_INT dy)
{
 _LINK_TYPE Link;
 _SHORT     cr=pSAD->cr;

 if(dy<0)
  if(pSAD->iLmax>pSAD->iRmax)
   if(cr<=CR_TO_BE_SMALL_Z_S)
    Link=LINK_S_LIKE;
   else
    Link=LINK_HS_LIKE;
  else
   if(cr<=CR_TO_BE_SMALL_Z_S)
    Link=LINK_Z_LIKE;
   else
    Link=LINK_HZ_LIKE;
 else /* dy>0 */
  if(pSAD->iLmax>pSAD->iRmax)
   if(cr<=CR_TO_BE_SMALL_Z_S)
    Link=LINK_S_LIKE;
   else
    Link=LINK_HS_LIKE;
  else
   if(cr<=CR_TO_BE_SMALL_Z_S)
    Link=LINK_Z_LIKE;
   else
    Link=LINK_HZ_LIKE;

 return(Link);

} /* end of CalculateLinkLikeSZ */

/****************************************************************************/
/***** This program prints info about link and corresponding SDS-element ****/
/****************************************************************************/
#if PG_DEBUG
_VOID print_link(p_SHORT x,p_SHORT y,p_SDS pSDSi,_LINK_TYPE Link)
{
 if ( mpr>0  &&  mpr<MAX_GIT_MPR && mpr!=2)
  {
    draw_arc(EGA_BROWN,x,y,pSDSi->ibeg,pSDSi->iend);
    print_SDS(pSDSi);
    printw("\n Link: %s",links_name[Link]);
    brkeyw("\n Press ...");
    draw_arc(EGA_WHITE,x,y,pSDSi->ibeg,pSDSi->iend);
  }
} /* end of print_link */
#endif /* PG_DEBUG */

/****************************************************************************/
/***** This program prints info about SDS-element                        ****/
/****************************************************************************/
#if PG_DEBUG
_VOID print_SDS(p_SDS pSDSi)
{
 p_SAD pSAD=&(pSDSi->des);

 if ( mpr>0  &&  mpr<MAX_GIT_MPR && mpr!=2)
  {
    printw("\n ibeg=%d iend=%d",pSDSi->ibeg,pSDSi->iend);
    printw("\n s=%d a=%d dL=%d iLmax=%d dR=%d iRmax=%d ",
            pSAD->s,pSAD->a,pSAD->dL,pSAD->iLmax,pSAD->dR,pSAD->iRmax);
    printw("\n d=%d imax=%d l=%ld cr=%d ld=%d lg=%d mark=%d",
            pSAD->d,pSAD->imax,pSAD->l,pSAD->cr,pSAD->ld,pSAD->lg,pSDSi->mark);
  }
} /* end of print_SDS */
#endif /* PG_DEBUG */

/****************************************************************************/
/***** This program calculates link, based on xr-elements only           ****/
/****************************************************************************/
#define ELEMENT_WITH_DIRECTION(pEl) ((pEl)->code==_GU_  || (pEl)->code==_GD_  || \
                                     (pEl)->code==_UU_  || (pEl)->code==_UD_  || \
                                     (pEl)->code==_UUC_ || (pEl)->code==_UDC_ || \
                                     Is_IU_or_ID(pEl) && (pEl)->mark==CROSS   || \
                                     IsAnyArcWithTail(pEl)                       \
                                    )
#define MIN_POINTS_TO_BE_LINE 8
_LINK_TYPE CalculateLinkWithoutSDS(p_low_type low_data,p_SPECL pXr,p_SPECL nxt)
{
 _LINK_TYPE Link;
 p_SHORT   x=low_data->x,y=low_data->y;
 _SDS      NewSDS;
 p_SDS     pSDS=&NewSDS;
 p_SAD     pSAD=&(pSDS->des);
 _SHORT    xd_AND,yd_AND;
 _INT      dy;

 if(   ELEMENT_WITH_DIRECTION(pXr)
    && ELEMENT_WITH_DIRECTION(nxt)
    && (   CIRCLE_DIR(pXr) == CIRCLE_DIR(nxt)
        || Is_IU_or_ID(pXr)
        || Is_IU_or_ID(nxt)
       )
   )
  {
    pSDS->ibeg = pXr->ipoint0; //MID_POINT(pXr);
    pSDS->iend = nxt->ipoint0; //MID_POINT(nxt);
  }
 else
  {
#if 0
    if(pXr->mark==STICK)
     pSDS->ibeg = pXr->ipoint0;
    else
     if(pXr->ipoint0!=UNDEF && pXr->ipoint0!=0)
      pSDS->ibeg = MEAN_OF(pXr->ipoint0,pXr->iend);
     else
      pSDS->ibeg = ONE_THIRD( pXr->ibeg + TWO(pXr->iend) ); //CHE  // MID_POINT(pXr);
    if(nxt->mark==STICK)
     pSDS->iend = nxt->ipoint0;
    else
     if(nxt->ipoint0!=UNDEF && nxt->ipoint0!=0)
      pSDS->iend = MEAN_OF(nxt->ibeg,nxt->ipoint0);
     else
     pSDS->iend = ONE_THIRD( TWO(nxt->ibeg) + nxt->iend );   // MID_POINT(nxt);
#endif
// forget all smart stuff
    if(   pXr->ipoint0!=UNDEF && pXr->ipoint0!=0 && pXr->code!=_BSS_)
     pSDS->ibeg = pXr->ipoint0;
    else
     pSDS->ibeg = (_SHORT)MID_POINT(pXr);
    if(nxt->ipoint0!=UNDEF && nxt->ipoint0!=ALEF && nxt->ipoint0!=0 && nxt->code!=_BSS_)
     pSDS->iend = nxt->ipoint0;
    else
     pSDS->iend = (_SHORT)MID_POINT(nxt);
  }
 if(pSDS->iend-pSDS->ibeg<=MIN_POINTS_TO_BE_LINE)
  Link=LINK_LINE;
 else
  {
    dy=y[pSDS->iend]-y[pSDS->ibeg];
    iMostFarDoubleSide(x,y,pSDS,&xd_AND,&yd_AND,_FALSE);
   // pSAD->a=RecountSlantInSDS(pSAD->a,low_data->slope);
    if(pSAD->dR!=0  &&  pSAD->dL!=0  &&  pSDS->mark == SDS_ISOLATE)
     {
       if(pSAD->iLmax<=pSDS->ibeg+1 || pSAD->iLmax>=pSDS->iend-1)
        pSAD->dL=0;
       else  if  (pSAD->iRmax<=pSDS->ibeg+1 || pSAD->iRmax>=pSDS->iend-1)
        pSAD->dR=0;
       else
        {
         _LONG dLCos=cos_vect(pSAD->iLmax-2, pSAD->iLmax+2,
                              pSDS->ibeg,pSDS->iend,x,y);
         _LONG dRCos=cos_vect(pSAD->iRmax-2, pSAD->iRmax+2,
                              pSDS->ibeg,pSDS->iend,x,y);

         if(dLCos>dRCos)
          pSAD->dR=0;
         else
          pSAD->dL=0;
        }
     }
    if((Link=CalculateStickOrArc(pSAD))==LINK_UNKNOWN)
     Link=CalculateLinkLikeSZ(pSAD,dy);
  }
#if PG_DEBUG
 if ( mpr>0  &&  mpr<MAX_GIT_MPR && mpr!=2)
  print_link(x,y,pSDS,Link);
#endif /* PG_DEBUG */

 return(Link);

} /* end of CalculateLinkWithoutSDS */

/****************************************************************************/
/***** This program recounts ibeg and iend of SDS according to back index ***/
/****************************************************************************/
_SHORT RecountBegEndInSDS(p_low_type low_data)
{
  _SHORT  i,NumPoints=low_data->ii;
  p_SHORT y=low_data->y,
          IndBack=low_data->buffers[2].ptr;
  p_SDS   pSDS=low_data->p_cSDS->pSDS;
  _SHORT  lSDS=low_data->p_cSDS->lenSDS;

 if(pSDS==_NULL)
  {
    err_msg(" NULL SDS pointer");
    return UNSUCCESS;
  }
 for(i=0;i<lSDS;i++)
  {
    pSDS[i].ibeg=NewIndex(IndBack,y,pSDS[i].ibeg,NumPoints,_FIRST);
    pSDS[i].iend=NewIndex(IndBack,y,pSDS[i].iend,NumPoints,_LAST);
    pSDS[i].des.iLmax=NewIndex(IndBack,y,pSDS[i].des.iLmax,NumPoints,_MEAD);
    pSDS[i].des.iRmax=NewIndex(IndBack,y,pSDS[i].des.iRmax,NumPoints,_MEAD);
    pSDS[i].des.imax=NewIndex(IndBack,y,pSDS[i].des.imax,NumPoints,_MEAD);
    pSDS[i].des.a=RecountSlantInSDS(pSDS[i].des.a,low_data->slope);
  }

#if PG_DEBUG
    /* draw SDS after filtering */
    draw_SDS(low_data);
#endif /* PG_DEBUG */

 return SUCCESS;

} /* end of RecountBegEndInSDS */
/****************************************************************************/
/*** This program recounts slant of the SDS-element according to the slope **/
/****************************************************************************/
_SHORT RecountSlantInSDS(_SHORT slant,_SHORT slope)
{
 _INT sl,dx;

 if(slope==0)
  sl=slant;
 else
  {
    if(slant==ALEF)
     sl=100*100/slope;
    else if((dx=100-SlopeShiftDx(-slant,slope))==0)
          sl=ALEF;
         else
          sl=(_SHORT)((_LONG)slant*100/dx);
  }

 return((_SHORT)sl);

} /* end of RecountSlantInSDS */

#endif //#ifndef LSTRIP
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\hwr_stri.cpp ===
/**************************************************************************
*                                                                         *
*    stricmp.  case insentive string compare                                                              *
*                                                                         *
**************************************************************************/

#include "bastypes.h"
#include "zctype.h"

_INT _FPREFIX HWRStrIcmp (_STR zString1, _STR zString2)
{
  _INT i=0;
  _UCHAR u1;
  _UCHAR u2;

    do {
//        u1 = *((p_UCHAR)zString1)++;
//        u2 = *((p_UCHAR)zString2)++;
//        u1 = (_UCHAR)ToUpper((int)u1 & 0xff);
//        u2 = (_UCHAR)ToUpper((int)u2 & 0xff);
        u1 = (_UCHAR)(zString1[i]);
        u2 = (_UCHAR)(zString2[i]);
        u1 = (_UCHAR)ToUpper((int)u1 & 0xff);
        u2 = (_UCHAR)ToUpper((int)u2 & 0xff);

        i ++;

    } while (u1 == u2 && u1 != 0 && u2 != 0);
    return(((_INT)(u1 - u2) & 0xff));
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\lk_begin.cpp ===
#ifndef LSTRIP


/****************************************************************************/
/* The sorting and elementary treatment of elements - breaks, arcs, shelves...*/
/****************************************************************************/

#include "hwr_sys.h"
#include "ams_mg.h"
#include "lowlevel.h"
#include "lk_code.h"
#include "def.h"
#include "low_dbg.h"

#include "calcmacr.h"
#if PG_DEBUG
#include "pg_debug.h"
#endif

#define  DX_DOT_TO_STROKE             30
#define  DY_DOT_TO_STROKE             5
#define  DX_STROKE_TO_DOT             30
#define  DELTA_ANGLE_FROM_MIDPOINT    6
#define  DELTA_ANGLE_FROM_BEG         2
#define  NEW_ANGLE_ZONE_ENLARGE       5
#define  DX_BOTH_ARCS                 10
#define  MIN_SPECL_ELEMS_TO_SORT      3
#define  NUM_POINTS_TO_WRONG_CROSS    5


_SHORT init_proc_XT_ST_CROSS(p_low_type low_data);
_SHORT process_ZZ(p_low_type low_data);
_SHORT process_AN(p_low_type low_data);
_SHORT process_curves(p_low_type low_data);

_VOID  DefLineThresholds ( p_low_type pLowData );
/*********************************************************************/

/*********************************************************************/
/*****  the counting of line dimension                            ****/
/*********************************************************************/

_VOID  DefLineThresholds ( p_low_type pLowData )
{
 /* _SHORT lin_up,lin_down; */
  _SHORT z_little;
  _SHORT delta_STR_UP_LINE_UP,delta_up,
         one_ninth_baseline,two_ninth_baseline,
         delta_LINE_DN_STR_DN,delta_dn;

    /* ydist = pLowData->ymaxmax-pLowData->yminmin;*//* the word range */

  DBG_CHK_err_msg( (pLowData->rc->low_mode
                         & (LMOD_BOX_EDIT|LMOD_FREE_TEXT))
                     == (LMOD_BOX_EDIT|LMOD_FREE_TEXT),
                   "LineThrs: BAD low_mode" );

  if ( pLowData->box.top < LIN_UP )
   pLowData->hght.y_US1_ = ONE_HALF(pLowData->box.top+LIN_UP);
  else
   pLowData->hght.y_US1_ = LIN_UP;
  delta_STR_UP_LINE_UP  = STR_UP-pLowData->hght.y_US1_;
  pLowData->hght.y_US2_ = STR_UP - TWO_THIRD(delta_STR_UP_LINE_UP);
  pLowData->hght.y_UE1_ = STR_UP - ONE_THIRD(delta_STR_UP_LINE_UP);
  delta_up              = ONE_NTH(delta_STR_UP_LINE_UP,6);
  pLowData->hght.y_UE2_ = STR_UP - delta_up;
  one_ninth_baseline    = ONE_NTH(DY_STR,9);
  two_ninth_baseline    = TWO(one_ninth_baseline);
  pLowData->hght.y_UI1_ = STR_UP+two_ninth_baseline;
  pLowData->hght.y_UI2_ = pLowData->hght.y_UI1_+two_ninth_baseline;
  pLowData->hght.y_MD_  = pLowData->hght.y_UI2_+one_ninth_baseline;

  pLowData->hght.y_DS2_ = ALEF;
  if ( pLowData->box.bottom > LIN_DOWN )
    pLowData->hght.y_DS1_=ONE_HALF(pLowData->box.bottom+LIN_DOWN);
  else
    pLowData->hght.y_DS1_=LIN_DOWN;
  delta_LINE_DN_STR_DN  = pLowData->hght.y_DS1_-STR_DOWN;
  pLowData->hght.y_DE2_ = STR_DOWN+TWO_THIRD(delta_LINE_DN_STR_DN);
  pLowData->hght.y_DE1_ = STR_DOWN+ONE_THIRD(delta_LINE_DN_STR_DN);
  delta_dn              = ONE_NTH(delta_LINE_DN_STR_DN,6);
  pLowData->hght.y_DI2_ = STR_DOWN+delta_dn;
  pLowData->hght.y_DI1_ = pLowData->hght.y_MD_+two_ninth_baseline;

#if PG_DEBUG
  if(mpr>=4 && mpr<=MAX_GIT_MPR)
   {
     draw_line(pLowData->box.left,pLowData->hght.y_US1_,
               pLowData->box.right,pLowData->hght.y_US1_,
               COLLIN, DOTTED_LINE, NORM_WIDTH);
     draw_line(pLowData->box.left,pLowData->hght.y_US2_,
               pLowData->box.right,pLowData->hght.y_US2_,
               COLLIN, DOTTED_LINE, NORM_WIDTH);
     draw_line(pLowData->box.left,pLowData->hght.y_UE1_,
               pLowData->box.right,pLowData->hght.y_UE1_,
               COLLIN, DOTTED_LINE, NORM_WIDTH);
     draw_line(pLowData->box.left,pLowData->hght.y_UE2_,
               pLowData->box.right,pLowData->hght.y_UE2_,
               COLLIN, DOTTED_LINE, NORM_WIDTH);
     draw_line(pLowData->box.left,pLowData->hght.y_UI1_,
               pLowData->box.right,pLowData->hght.y_UI1_,
               COLLIN, DOTTED_LINE, NORM_WIDTH);
     draw_line(pLowData->box.left,pLowData->hght.y_UI2_,
               pLowData->box.right,pLowData->hght.y_UI2_,
               COLLIN, DOTTED_LINE, NORM_WIDTH);
     draw_line(pLowData->box.left,pLowData->hght.y_MD_,
               pLowData->box.right,pLowData->hght.y_MD_,
               COLLIN, DOTTED_LINE, NORM_WIDTH);
     draw_line(pLowData->box.left,pLowData->hght.y_DI1_,
               pLowData->box.right,pLowData->hght.y_DI1_,
               COLLIN, DOTTED_LINE, NORM_WIDTH);
     draw_line(pLowData->box.left,pLowData->hght.y_DI2_,
               pLowData->box.right,pLowData->hght.y_DI2_,
               COLLIN, DOTTED_LINE, NORM_WIDTH);
     draw_line(pLowData->box.left,pLowData->hght.y_DE1_,
               pLowData->box.right,pLowData->hght.y_DE1_,
               COLLIN, DOTTED_LINE, NORM_WIDTH);
     draw_line(pLowData->box.left,pLowData->hght.y_DE2_,
               pLowData->box.right,pLowData->hght.y_DE2_,
               COLLIN, DOTTED_LINE, NORM_WIDTH);
     draw_line(pLowData->box.left,pLowData->hght.y_DS1_,
               pLowData->box.right,pLowData->hght.y_DS1_,
               COLLIN, DOTTED_LINE, NORM_WIDTH);
     draw_line(pLowData->box.left,pLowData->hght.y_DS2_,
               pLowData->box.right,pLowData->hght.y_DS2_,
               COLLIN, DOTTED_LINE, NORM_WIDTH);
   }
#endif

     /* Sizes of small circle and break: */

  pLowData->o_little = (DY_STR*O_LITTLE)/100;
  if  ( pLowData->rc->lmod_border_used == LMOD_BORDER_NUMBER )
   pLowData->o_little = TWO_THIRD(pLowData->o_little);

  z_little = (DY_STR*Z_LITTLE)/100;
  pLowData->z_little= z_little*z_little;

 /*CHE. if(pLowData->rc->rec_mode == RECM_FORMULA) */
  if  ( pLowData->rc->lmod_border_used == LMOD_BORDER_NUMBER )
   pLowData->z_little=ONE_HALF(pLowData->z_little);

} /*DefLineThresholds*/
/*********************************************************************/

_SHORT lk_begin(p_low_type low_data)
{
 p_SPECL  specl = low_data->specl;     /*  The list of special points on */
                                       /* the trajectory                 */

 DefLineThresholds (low_data);

 DBG_ChkSPECL(low_data);
 DBG_print_seq_of_elem(specl);  /* initial printing */
 if(Sort_specl(specl,low_data->len_specl) != SUCCESS)
  return UNSUCCESS;
 DBG_print_seq_of_elem(specl);  /* final printing */
 DBG_ChkSPECL(low_data);

 if(init_proc_XT_ST_CROSS(low_data) != SUCCESS)
  return UNSUCCESS;
 if(process_ZZ(low_data) != SUCCESS)
  return UNSUCCESS;
 DBG_ChkSPECL(low_data);
 process_AN(low_data);
 process_curves(low_data);

 DBG_ChkSPECL(low_data);
 /* calculate step of writing using Zenia's function */
 low_data->StepSure=DefineWritingStep(low_data,&low_data->width_letter,_TRUE);

 return SUCCESS;
}  /***** end of lk_begin *****/

/****************************************************************************/
/***** turn the strokes without crossings into points                   *****/
/***** transfer the crossings on the endings                            *****/
/****************************************************************************/
_SHORT init_proc_XT_ST_CROSS(p_low_type low_data)
{
 p_SPECL  specl = low_data->specl;     /*  The list of special points on */
                                       /* the trajectory                 */
 p_SHORT x=low_data->x,                /* x,y - co-ordinates             */
         y=low_data->y;
 p_SPECL cur,                /* the index of the current elements  */
         prv,                /*           of the previous elements */
         nxt,                /*           of the next elements     */
         wcur,               /*           of the working elements  */
         wrk;                /*           of the working elements  */

 cur=specl;
 while ( cur != _NULL )
  {
    prv=cur->prev; nxt=cur->next;
    switch ( (_SHORT)cur->mark )
     {
       case DOT:
        /* if point is low and has a small y and a big x-strength,
           then it will be a stroke  */
        if((y[MID_POINT(cur)]>=low_data->hght.y_UI2_) &&
           (HWRAbs(x[cur->iend]-x[cur->ibeg])>=DX_DOT_TO_STROKE) &&
           (HWRAbs(y[cur->iend]-y[cur->ibeg])<=DY_DOT_TO_STROKE))
         {
           cur->mark=STROKE;
           cur->ipoint0=cur->ipoint1=UNDEF;
         }
        break;
       case STROKE:
        /* if it`s stroke, then search for all HATCHs
           which he has and transfer them to the stroke */
        wrk=cur;
        wrk = FindMarkRight(wrk,BEG);
        while(wrk!=_NULL)
         {
           if( (wrk->mark==HATCH) &&
               FirstBelongsTo2nd (wrk->next,cur)
             )
            {
              wcur=(wrk->next)->next;
              MoveCrossing2ndAfter1st (cur, wrk);
              nxt=wrk;
              wrk=wcur;
            }
           else
            wrk=wrk->next;
         }
        nxt=cur->next;
        /*if there are no HATCH after the stroke and it is short and
          it is not high, then it will be a point*/
        if((nxt != _NULL) &&
		   (low_data->rc->rec_mode != RECM_FORMULA)         &&
           (nxt->mark!=HATCH) && (y[MID_POINT(cur)]<STR_UP) &&
           (HWRAbs(x[cur->iend]-x[cur->ibeg])<=DX_STROKE_TO_DOT)
          )
         cur->mark=DOT;
        break;
       case END:
        /* sort the crossings and the angle from the end */
        if(prv->mark==CROSS || prv->mark==STICK ||
           prv->mark==ANGLE || prv->mark==SHELF)
         {
           wrk=prv->prev;
           while(wrk!=_NULL &&
                 (wrk->mark==ANGLE || IsAnyCrossing(wrk) || wrk->mark==SHELF)
                )
            wrk=wrk->prev;
           if(wrk==_NULL)
            {
              err_msg("LK_BEGIN: WRONG DATA, CAN'T RECOGNIZE");
              return UNSUCCESS;
            }
           Move2ndAfter1st (prv,wrk);
         }
        break;
       case CROSS:
        if(cur->other==CIRCLE_FIRST)
         {
           wrk=cur;
           wrk = FindMarkLeft (wrk,BEG);
           while(wrk!=_NULL && wrk->mark!=END)
            {
              if(wrk!=cur && wrk!=nxt && (wrk->mark==CROSS || wrk->mark==STICK))
               {
                 if( FirstBelongsTo2nd (cur,wrk) &&
                     FirstBelongsTo2nd (nxt,wrk->next) )
                  {
                    DelCrossingFromSPECLList (cur);
                    break;
                  }
                 wrk=wrk->next;
               }
              wrk=wrk->next;
            }
           if(wrk==_NULL)
            {
              err_msg("LK_BEGIN: WRONG DATA, CAN'T RECOGNIZE");
              return UNSUCCESS;
            }
         }
        cur=cur->next;
        break;
     }
    if (cur != _NULL)
        cur=cur->next;
  }

 return SUCCESS;
}  /***** end of init_proc_XT_ST_CROSS *****/

/****************************************************************************/
/*****                   processing of breaks                            ****/
/****************************************************************************/

_SHORT process_ZZ(p_low_type low_data)
{
 p_SPECL  specl = low_data->specl;     /*  The list of special points on */
                                       /* the trajectory                 */
 p_SHORT x=low_data->x,                /* x,y - co-ordinates             */
         y=low_data->y;
 p_SPECL cur,                /* the index of the current elements  */
         prv,                /*           of the previous elements */
         nxt;                /*           of the next elements     */
 _LONG r;                    /* break`s dimension                  */
 _BOOL bIs_ST_XT=_FALSE;


#if PG_DEBUG
   if(mpr>4 && mpr<=MAX_GIT_MPR)
    printw("\n=====min nonsignificant break %d=====",low_data->z_little);
#endif
   cur=specl;
   while ( cur != _NULL )
    {
      /* search for the beginnings of breaks */
      if(cur->mark==BEG)
       {
         nxt= cur->next;
SWT:
         switch ( (_SHORT) nxt->mark )
          {
            case MINW:   cur->code=_IU_;
                         break;
            case MAXW:   cur->code=_ID_;
                         break;
            case SHELF:
#if defined (FOR_GERMAN) || defined (FOR_FRENCH) || USE_BSS_ANYWAY
                         if ( cur->other & LETTER_H_STEP )
                          cur->code=_BSS_;
                         else
#endif
                          cur->code=_DF_;
                         break;
            case STROKE: cur->code=_XT_;
                         break;
            case DOT:    cur->code=_ST_;
                         break;
            default:     cur->code=_NO_CODE;
                         while(nxt!=_NULL &&
                               (nxt->mark==ANGLE || IsAnyCrossing(nxt))
                              )
                          nxt=nxt->next;
                         Attach2ndTo1st(cur,nxt);
                         if(nxt==_NULL || nxt->mark==END)
                          {
                            err_msg("LK_BEGIN: WRONG DATA, CAN'T RECOGNIZE");
                            return UNSUCCESS;
                          }
                         err_msg("LK_BEGIN: WRONG DATA, TRYING TO CORRECT");
 #if PG_DEBUG
                         if(mpr>1 && mpr<=MAX_GIT_MPR)
                          OpenTextWindow(PG_line_s);
 #endif
                         goto SWT;
          }
         /* delete element after BEG and replace iend */
         cur->iend=nxt->iend;
         cur->other=nxt->other;
         cur->ipoint0=nxt->ipoint0;
         if(nxt->mark == MINW || nxt->mark == MAXW)
          cur->attr = HeightInLine(y[nxt->ipoint0],low_data);
         else
          cur->attr = MidPointHeight(cur,low_data);
         DelFromSPECLList(nxt);
         prv= cur->prev;

         /* New Andrey's breaks */
         if(x[cur->ibeg-1]!=0)
          {
            cur->other|=MIN_MAX_CUTTED;
            if(Is_IU_or_ID(prv))
             prv->other|=MIN_MAX_CUTTED;
          }

         bIs_ST_XT=_FALSE;
         while(   prv!=_NULL
               && (   IsXTorST(prv)
                   || prv->mark==HATCH
                  )
              )                                   /*CHE*/
          {
            prv = prv->prev;
            bIs_ST_XT=_TRUE;
          }

         /* if there is END before BEG */
         if(cur != specl && prv != _NULL && prv->mark == END)
          {
            p_SPECL  curNotST = cur;      /*CHE*/

            while  (   curNotST != _NULL
                    && (   IsXTorST(curNotST)
                        || curNotST->mark==HATCH
                        || curNotST->mark==END
                       )
                   )
             {
               curNotST = curNotST->next;
               bIs_ST_XT=_TRUE;
             }
            if  ( curNotST == _NULL  ||  curNotST->mark != BEG )
             {
               curNotST = cur;
               if(!IsXTorST(cur))
                bIs_ST_XT=_FALSE;
             }
            /* count the distance between them */
            r = DistanceSquare (prv->iend,curNotST->ibeg,x,y);
#if PG_DEBUG
            if(mpr>4 && mpr<=MAX_GIT_MPR)
             printw("\n Break=%ld    ibeg=%d", r,prv->ibeg);
#endif

#ifndef FOR_GERMAN
            /* if it`s big, put here break element */
            if(   x[prv->iend+1]!=0
               || r>low_data->z_little
               || (low_data->rc->low_mode & LMOD_SEPARATE_LET)
               || (low_data->rc->low_mode & LMOD_SMALL_CAPS)
               || bIs_ST_XT
               || Is_IU_or_ID(prv) && Is_IU_or_ID(cur) && prv->code==cur->code
              )
             {
#endif
               /* Here assumed: "(prv-1)" was deleted from list!!! */
               (prv-1)->mark=DROP;
               if(x[prv->iend+1]!=0)
                {
                  (prv-1)->code=_FF_;
                  (prv-1)->other=FF_CUTTED;
                }
               else
                (prv-1)->code=_ZZZ_;            /* its code _ZZZ_      */
               (prv-1)->attr= _MD_;             /* its height - middle */
               (prv-1)->ibeg= prv->iend;        /* its temporary       */
               (prv-1)->iend= curNotST->ibeg;   /*    co-ordinates     */
               Insert2ndAfter1st (prv,(prv-1)); /* put it between      */
                                                /*     END and BEG:    */
#ifndef FOR_GERMAN
             }
            else
             /* if the distance is too small */
             if(Is_IU_or_ID(prv) && Is_IU_or_ID(cur))
              {
                _INT iBreak=cur->ibeg-1;
                nxt=cur->next;
                while(nxt!=_NULL && nxt->mark!=END)
//                      cur->iend>=nxt->ibeg-NUM_POINTS_TO_WRONG_CROSS)
                 {
                   if(nxt->mark==CROSS || nxt->mark==STICK)
                    {
                      if(nxt->ibeg>iBreak && (nxt->next)->iend<iBreak)
                       DelCrossingFromSPECLList(nxt);
                      nxt=nxt->next;
                    }
                   nxt=nxt->next;
                 }
                /* if codes aren't the same, delete END and BEG */
                if(prv->code!=cur->code && !bIs_ST_XT) /*CHE: temporarily */
                 DelThisAndNextFromSPECLList(prv);
                /* otherwise delete break */
                else if(!bIs_ST_XT)
                 {
                   x[iBreak]=x[cur->ibeg];
                   y[iBreak]=y[cur->ibeg];
                   cur->ibeg=prv->ibeg;
                   if(cur->code==_IU_)
                        cur->mark=MINW;
                   else cur->mark=MAXW;
                   DelFromSPECLList (prv);
                 }
              }
#endif
          }
       }
      else
       /* search for the break ends */
       if(cur->mark == END)
        {
          prv= cur->prev;
          switch ( (_SHORT) prv->mark )
           {
             case MINW:   cur->code=_IU_;
                          break;
             case MAXW:   cur->code=_ID_;
                          break;
            case SHELF:
#if defined (FOR_GERMAN) || defined (FOR_FRENCH) || USE_BSS_ANYWAY
                          if ( cur->other & LETTER_H_STEP )
                           cur->code=_BSS_;
                          else
#endif
                           cur->code=_DF_;
                          break;
             case STROKE: cur->code=_XT_;
                          break;
             case DOT:    cur->code=_ST_;
                          break;
             default:     cur->code=_NO_CODE;
           }

          if(cur->code == _NO_CODE)
           DelFromSPECLList (cur);
          else
           {
             /* delete element before END and replace ibeg */
             cur->ibeg= prv->ibeg;
             cur->ipoint0=prv->ipoint0;
             if(prv->mark == MINW || prv->mark == MAXW)
              ASSIGN_HEIGHT(cur,HeightInLine(y[prv->ipoint0],low_data));
             else
              ASSIGN_HEIGHT(cur,MidPointHeight(cur,low_data));
             DelFromSPECLList (prv);
             prv= prv->prev;
           }
        }
      cur = cur->next;
    }

 return SUCCESS;
}  /***** end of process_ZZ *****/

/****************************************************************************/
/*****         processing angles                                         ****/
/****************************************************************************/
_SHORT process_AN(p_low_type low_data)
{
 p_SPECL  specl = low_data->specl;     /*  The list of special points on */
                                       /* the trajectory                 */
 p_SHORT x=low_data->x,                /* x,y - co-ordinates             */
         y=low_data->y;
 p_SPECL cur,                /* the index of the current elements  */
         prv,                /*           of the previous elements */
         nxt,                /*           of the next elements     */
         wrk,                /*           of the working elements  */
         pCrossPrv,pCrossNxt,
         last = _NULL;				/* Raid bug 6008 fix - restore nct, prev pointer if run off end of list */

 _SHORT nxt_beg,prv_end;
 _SHORT iVertex,iMidWrk;
 _SHORT dlt;
 _BOOL bCrossPrv,bCrossNxt,bIsPrv,bIsNxt;
 _SHORT NxtBegCr,PrvEndCr;

   for(cur=specl;cur!=_NULL;cur=cur->next)
    {
      if(cur->mark!=ANGLE)
       continue;
      /* mark angle as "new-born" - not restored yet */
      cur->other |= NOT_RESTORED;
      nxt=cur->next; prv=cur->prev;

	  // MR: No Check was made here added these as defencive  programming
	  if (!prv || !nxt)
	  {
		  continue;
	  }

      bCrossPrv=_FALSE;
      bCrossNxt=_FALSE;
      while(prv->mark==CROSS && prv->other!=0)
	  {
		  prv=prv->prev;
	  }

      if ( IsAnyCrossing(prv) )
       {
         prv=prv->prev;
         pCrossPrv=prv;
         bCrossPrv=_TRUE;
		
		 // MR while fixing raid bug 6008 noticed this one too
         while(prv && IsAnyCrossing(prv))
		 {
			 last = prv;
			 prv=prv->prev;
		 }
		 
		 if (!prv)
		 {
			 prv = last;
		 }

       }
      if ( IsAnyCrossing(nxt) )
       {
         pCrossNxt=nxt;
         bCrossNxt=_TRUE;

		 // MR Raid bug 6008
		while(nxt && IsAnyCrossing(nxt))
		{
			last = nxt;
			nxt=nxt->next;
		}

		if (!nxt)
		{
			nxt = last;
		}
       }
      if(bCrossNxt)
       NxtBegCr=cur->attr ? pCrossNxt->ibeg-NEW_ANGLE_ZONE_ENLARGE : pCrossNxt->ibeg;
      if(bCrossPrv)
       PrvEndCr=cur->attr ? pCrossPrv->iend+NEW_ANGLE_ZONE_ENLARGE : pCrossPrv->iend;
      nxt_beg=cur->attr ? nxt->ibeg-NEW_ANGLE_ZONE_ENLARGE : nxt->ibeg;
      prv_end=cur->attr ? prv->iend+NEW_ANGLE_ZONE_ENLARGE : prv->iend;

      /* if isolated angle */
      if(   (bCrossNxt && cur->iend<NxtBegCr || !bCrossNxt && cur->iend<nxt_beg)
         && (bCrossPrv && cur->ibeg>PrvEndCr || !bCrossPrv && cur->ibeg>prv_end)
        )
       {
         cur->other &= (~NOT_RESTORED);
         if((cur->other & _ANGLE_DIRECT_)==_ANGLE_RIGHT_)
          cur->code=_ANr;
         else
          cur->code=_ANl;
         cur->attr=HeightInLine(y[MID_POINT(cur)],low_data);
         continue;
       }
      /* otherwise           */
      if(cur->ibeg<=prv_end || cur->iend>=nxt_beg)
       {
         bIsPrv=bIsNxt=_FALSE;
         if(cur->ibeg<=prv_end)
          bIsPrv=_TRUE;
         if(cur->iend>=nxt_beg)
          bIsNxt=_TRUE;
#if defined(FOR_GERMAN) || defined(FOR_FRENCH)
         if(   bIsPrv && (prv->other & LETTER_H_STEP)
            || bIsNxt && (nxt->other & LETTER_H_STEP)
           )
          {
            cur->other &= (~NOT_RESTORED);
            if((cur->other & _ANGLE_DIRECT_)==_ANGLE_RIGHT_)
             cur->code=_ANr;
            else
             cur->code=_ANl;
            cur->attr=HeightInLine(y[MID_POINT(cur)],low_data);
            /* Adjust sequence */
            if(cur->code==_ANl && MID_POINT(prv)>cur->ipoint0)
             {
               DelFromSPECLList(prv);
               Insert2ndAfter1st(cur,prv);
             }
            continue;
          }
#endif /* FOR_GERMAN... */
         if(   NO_ATTR_ASSIGNED(cur)
            || bIsNxt && !bIsPrv && nxt->mark==END && nxt->code==_IU_ &&
               x[nxt->iend]>x[nxt->ibeg]
#if USE_BSS_ANYWAY
            || !bIsPrv && bIsNxt && (nxt->other & LETTER_H_STEP)
            || !bIsNxt && bIsPrv && (prv->other & LETTER_H_STEP)
#endif
           )
          {
            iVertex = cur->ipoint0;
            if(bIsPrv && !bIsNxt)
             {
               iMidWrk=MID_POINT(prv);
               if(prv->mark==BEG && iMidWrk>iVertex)
                {
                  DelFromSPECLList (cur);
                  continue;
                }
             }
            if(!bIsPrv && bIsNxt)
             {
               iMidWrk=MID_POINT(nxt);
               if(nxt->mark==END && iMidWrk<iVertex)
                {
                  DelFromSPECLList (cur);
                  continue;
                }
             }
            if(bIsPrv && bIsNxt && (prv->mark==BEG || nxt->mark==END))
             {
               DelFromSPECLList (cur);
               continue;
             }
            if(bIsPrv)
//             if(!bIsNxt)
              wrk=prv;
//             else
//              wrk=(prv->iend-prv->ibeg>nxt->iend-nxt->ibeg ? prv : nxt);
            else
             wrk=nxt;
            iMidWrk = MID_POINT(wrk);
            if(wrk->mark==BEG || wrk->mark==END)
             dlt=DELTA_ANGLE_FROM_BEG;
            else
             {
               dlt=DELTA_ANGLE_FROM_MIDPOINT;
               if(wrk->mark==MINW)
                if(iVertex>iMidWrk)
                 iMidWrk=MEAN_OF(iVertex,wrk->ibeg);
                else
                 iMidWrk=MEAN_OF(iVertex,wrk->iend);
             }
            if(   (      (wrk->mark==MINW || wrk->mark==MAXW || wrk->mark==SHELF)
                      && x[wrk->iend]>x[wrk->ibeg]
                   || wrk->mark==BEG
                   || wrk->mark==END
                  )
               && HWRAbs(iMidWrk-iVertex)>dlt
              )
             {
               cur->other &= (~NOT_RESTORED);
               if(x[iVertex]<x[iMidWrk])
                cur->code= _ANl;
               else
                cur->code=_ANr;
               /* Angle height         */
               cur->attr=HeightInLine(y[iVertex],low_data);
               /* Adjust sequence */
               if (wrk==prv && wrk->mark!=BEG && iMidWrk>iVertex)
                {
                  DelFromSPECLList (wrk);
                  Insert2ndAfter1st (cur,wrk);
                }
             }
            else
             {
               DelFromSPECLList (cur);
//               cur->other=1;
             }
          }
         else /* new angle */
          {
            DelFromSPECLList (cur);
//            cur->other=1;
          }
       }
      /* deleted by crossings */
      else
       { _BOOL bIsStick=bCrossNxt && pCrossNxt->mark==STICK ||
                        bCrossPrv && pCrossPrv->mark==STICK;
         DelFromSPECLList (cur);
         if(bIsStick)
          cur->other |= WAS_DELETED_BY_STICK;
         else
          cur->other |= WAS_DELETED_BY_CROSS;
       }
    }

 return SUCCESS;
}  /***** end of process_AN *****/

/****************************************************************************/
/*****         processing curves                                         ****/
/****************************************************************************/
_SHORT process_curves(p_low_type low_data)
{
 p_SPECL  specl = low_data->specl;     /*  The list of special points on */
                                       /* the trajectory                 */
 p_SHORT  x=low_data->x,
          y=low_data->y;       /* x,y - co-ordinates                 */
 p_SPECL cur;                  /* the index of the current elements  */
/*CHE: not used var.:   p_SPECL prv; */
 _SHORT iExtr;                   /* counters                           */
 _LONG  coss;

#if PG_DEBUG
  if(mpr==6) printw("\n Curves");
#endif

  cur=specl->next;
  while ( cur != _NULL )
   {
     /* prv=cur->prev; */
     switch( (_SHORT) cur->mark )
      {
        case MINW:
           /*arc position */
           cur->attr = HeightInLine( y[cur->ipoint0], low_data );
           /* find direction of arc */
           if(x[cur->ibeg] < x[cur->iend])
                SET_CLOCKWISE(cur);
           else SET_COUNTERCLOCKWISE(cur);
           /* search for extremum points */
           iExtr=extremum(cur->mark,cur->ibeg,cur->iend,y);
           /* cos of arc curve */
           coss=cos_vect(iExtr,cur->ibeg,iExtr,cur->iend,x,y);
           /* narrow curve will be stick */
           if(coss >= DUGCOS)
            cur->code= _IU_;
           else
            cur->code=_UU_;
           DBG_BlinkShowElemEQ6(cur,x,y,"   cos=%d%%",coss);
           break;
        case MAXW:
           /* arc position */
           cur->attr = HeightInLine( y[cur->ipoint0], low_data );
           /* find direction of arc */
           if(x[cur->ibeg] > x[cur->iend])
                SET_CLOCKWISE(cur);
           else SET_COUNTERCLOCKWISE(cur);
           /* search for extremum point */
           iExtr=extremum(cur->mark,cur->ibeg,cur->iend,y);
           /* cos of arc curve */
           coss=cos_vect(iExtr,cur->ibeg,iExtr,cur->iend,x,y);
           /* narrow curve will be stick */
           if(coss >= DUGCOS)
            cur->code= _ID_;
           else
            cur->code=_UD_;
           DBG_BlinkShowElemEQ6(cur,x,y,"   cos=%d%%",coss);
           break;
        case SHELF:
#if defined (FOR_GERMAN) || defined (FOR_FRENCH) || USE_BSS_ANYWAY
           if ( cur->other & LETTER_H_STEP )
            {
              cur->code=_BSS_;
              cur->attr=_MD_;
              cur->ipoint0=MID_POINT(cur); /* here it was real beg of BSS */
            }
           else
#endif
            cur->code=_DF_;
           cur->attr=HeightInLine( y[MID_POINT(cur)], low_data );  /* AYV */
           break;
      }
     cur = cur->next;
   }
#if PG_DEBUG
  if(mpr==6) brkeyw("\nI'm waiting");
#endif

  return SUCCESS;
}  /***** end of process_curves *****/

/****************************************************************************/
/*****     find extremums on arcs                                       *****/
/****************************************************************************/
_SHORT extremum(_UCHAR mark,_SHORT beg, _SHORT end,p_SHORT y)
{
 _SHORT  i;
 _SHORT  iExtr = beg;
 _SHORT  yExtr = y[iExtr];

 switch ( (_SHORT)mark ) {
   case  MINW: for(i=beg; i<=end; i++)
                if(y[i]<yExtr) { yExtr=y[i]; iExtr=i; }
               break;
   case  MAXW: for(i=beg; i<=end; i++)
                if(y[i]>yExtr) { yExtr=y[i]; iExtr=i; }
               break;
   default:    return(0);
 }

    /* Find the middle point of the extr.plato: */

 for(i=iExtr; i<=end; i++)
   if(y[i]!=yExtr) break;
 return MEAN_OF(iExtr,i);

}   /***** end of extremum *****/
/****************************************************************************/

/****************************************************************************/
/*****           the sorting elements by the time                        ****/
/****************************************************************************/

#define IsAnyExtremum(pEl)  (   REF(pEl)->mark==MINW     \
                             || REF(pEl)->mark==MINN     \
                             || REF(pEl)->mark==MAXW     \
                             || REF(pEl)->mark==MAXN     \
                             || REF(pEl)->mark==_MINX    \
                             || REF(pEl)->mark==_MAXX    \
                             || REF(pEl)->mark==MINXY    \
                             || REF(pEl)->mark==MAXXY    \
                             || REF(pEl)->mark==MINYX    \
                             || REF(pEl)->mark==MAXYX    \
                            )

_SHORT Sort_specl(p_SPECL specl,_SHORT len_specl)
{
 p_SPECL cur,                       /* index on the current element     */
         prv,                       /*        on the previous element   */
         nxt,                       /*        on the next element       */
         wrk=_NULL,                 /*        on the working element    */
         wcur;                      /*        on the working element    */
 _SHORT  i;                             /* counters                         */
 _SHORT dnummin;
 _BOOL  bCrossingCur;
 _LONG  MaxIter,NumIter;

 if (len_specl < MIN_SPECL_ELEMS_TO_SORT) return SUCCESS;

     /* Bubble-sort depending on "ibeg": */
 MaxIter=len_specl*len_specl;
 NumIter=0;
 for(i=1;i<=len_specl;i++)
  {
    cur=specl->next;
    while(cur->next!=_NULL)
     {
       DBG_CHK_err_msg(cur==_NULL,"Sort SPECL: CUR==NULL");
       nxt=cur->next;
       bCrossingCur = IsAnyCrossing(cur);
       if ( bCrossingCur )
        {
          if(nxt->next==_NULL) break;
          nxt=nxt->next;
        }
       if(cur->ibeg<nxt->ibeg)
        {
          if ( bCrossingCur )
            cur=cur->next;
          cur=cur->next;
        }
       else
        {
          if  ( bCrossingCur )
            DelCrossingFromSPECLList (cur);
          else
            DelFromSPECLList (cur);
          if ( IsAnyCrossing(nxt) )
            nxt=nxt->next;
          if ( bCrossingCur )
            InsertCrossing2ndAfter1st (nxt,cur);
          else
            Insert2ndAfter1st (nxt,cur);
          NumIter++;
          if(NumIter>MaxIter)
           {
             err_msg("LK_BEGIN: UNRECOVERABLE error in the SPECL");
             return UNSUCCESS;
           }
        }
     }
  }

 cur=specl->next;
 NumIter=0;
 while(cur!=_NULL)
  {
    prv=cur->prev;
    DBG_CHK_err_msg(prv==_NULL,"Sort SPECL: PRV==NULL");
    nxt=cur->next;
    if(cur->mark==BEG)
     {
       if ( IsAnyCrossing(prv) )
         prv=prv->prev;
       while(prv!=_NULL && prv->ibeg==cur->ibeg)
        {
          prv=prv->prev;
          if ( IsAnyCrossing(prv) )
           prv=prv->prev;
        }
       if(prv==_NULL)
        {
          err_msg("LK_BEGIN: WRONG DATA, CAN'T RECOGNIZE");
          return UNSUCCESS;
        }
       if ( IsAnyCrossing(prv) )
        prv=prv->next;
       if(prv!=cur->prev)
        {
          Move2ndAfter1st (prv,cur);
          NumIter++;
          if(NumIter>MaxIter)
           {
             err_msg("LK_BEGIN: UNRECOVERABLE error in the SPECL");
             return UNSUCCESS;
           }
        }
       dnummin=ALEF;
       wcur=cur->next;
       if(wcur==_NULL) break;
       while(wcur!=_NULL && wcur->ibeg==cur->ibeg)
        {
          if((IsAnyExtremum(wcur) ||
              wcur->mark==STROKE  || wcur->mark==DOT) &&
             dnummin>(wcur->iend-wcur->ibeg))
           {
             dnummin=wcur->iend-wcur->ibeg;
             wrk=wcur;
           }
          if ( IsAnyCrossing(wcur) )
           wcur=wcur->next;
          wcur=wcur->next;
        }
       if(wrk==_NULL)
        {
          err_msg("LK_BEGIN: WRONG DATA, CAN'T RECOGNIZE");
          return UNSUCCESS;
        }
       if(wrk!=cur->next)
        {
          Move2ndAfter1st (cur,wrk);
          NumIter++;
          if(NumIter>MaxIter)
           {
             err_msg("LK_BEGIN: UNRECOVERABLE error in the SPECL");
             return UNSUCCESS;
           }
        }
     }
    if(cur->mark==END)
     {
       nxt=cur->next;
       if(nxt==_NULL) break;
       while(nxt!=_NULL && nxt->iend==cur->iend)
        {
          if ( IsAnyCrossing(nxt) )
           nxt=nxt->next;
          wrk=nxt;
          nxt=nxt->next;
        }
       DBG_CHK_err_msg(cur==_NULL,"Sort SPECL: CUR==NULL");
       if(nxt==_NULL || nxt!=cur->next)
        {
          Move2ndAfter1st (wrk,cur);
          NumIter++;
          if(NumIter>MaxIter)
           {
             err_msg("LK_BEGIN: UNRECOVERABLE error in the SPECL");
             return UNSUCCESS;
           }
          if(nxt!=_NULL)
           Attach2ndTo1st (cur,nxt);
          cur=(cur->prev)->prev;
        }
     }
    cur=cur->next;
  }

/* printing of the sorted succession of elements */
 DBG_print_seq_of_elem(specl);

 return SUCCESS;
}  /***** end of Sort_specl *****/

/****************************************************************************/
/*****  Delete wrong elements from the SPECL                             ****/
/****************************************************************************/
#define   MIN_SPECL_LEN_TO_CLEAR  4

_SHORT Clear_specl(p_SPECL specl,_SHORT len_specl)
{
 p_SPECL cur,                      /* index of the current element     */
         nxt;                      /*       of the next element        */
 _BOOL bIsBEG,bIsEND,bIsBEG_END;

    if (len_specl < MIN_SPECL_LEN_TO_CLEAR)
     {
       err_msg("LK_BEGIN: UNRECOVERABLE error in the SPECL");
       return UNSUCCESS;
     }

    cur=specl->next;
    while(cur!=_NULL)
     {
       nxt=cur->next;
       if(nxt==_NULL)
        break;
       if(cur->mark==BEG && nxt->mark==END)
        {
          err_msg("LK_BEGIN: error in the SPECL");
          DelThisAndNextFromSPECLList (cur);
          cur=cur->next;
        }
       cur=cur->next;
     }

    cur=specl->next;
    bIsBEG=bIsEND=bIsBEG_END=_FALSE;
    while(cur!=_NULL)
     {
       if(cur->mark==BEG)
        if(!bIsBEG)    /* BEG with END */
         {
           bIsBEG=_TRUE;
           bIsBEG_END=_FALSE;
         }
        else           /* BEG without END */
         {
           bIsBEG_END=_FALSE;
           break;
         }
       if(cur->mark==END)
        if(bIsBEG)     /* END with BEG */
         bIsEND=_TRUE;
        else           /* END without BEG */
         {
           bIsBEG_END=_FALSE;
           break;
         }
       if(bIsBEG && bIsEND)
        {
          bIsBEG_END=_TRUE;
          bIsBEG=bIsEND=_FALSE;
        }
       cur=cur->next;
     }

     if(!bIsBEG_END)
      {
        err_msg("LK_BEGIN: UNRECOVERABLE error in the SPECL");
        return UNSUCCESS;
      }

 return SUCCESS;
}  /***** end of Clear_specl *****/

/****************************************************************************/
/*****  Get last index in SPECL                                          ****/
/****************************************************************************/
_SHORT get_last_in_specl(p_low_type low_data)
{
 p_SPECL specl=low_data->specl;
 _SHORT  len_specl=low_data->len_specl;
 _SHORT  i;
 p_SPECL cur=specl;

    while(cur->next!=_NULL)
     cur=cur->next;
    for(i=0;i<len_specl;i++)
     if((p_SPECL)&specl[i]==cur)
      {
        low_data->LastSpeclIndex=i;
        return SUCCESS;
      }

    DBG_err_msg("last_in_specl not found");
    return UNSUCCESS;
} /***** end of get_last_in_specl *****/


#endif //#ifndef LSTRIP
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\hwr_str.cpp ===
/**************************************************************************
*                                                                         *
*  HWR_STR.C                              Created: 29/02/1992.            *
*                                                                         *
*    This file  contains  the  functions  for  the  string   operations   *
*  (ARMageddon).                                                          *
*                                                                         *
**************************************************************************/
#include "hwr_sys.h"

_BOOL    HWRStrEmpty (_STR);

/**************************************************************************
*                                                                         *
*    strlen.                                                              *
*                                                                         *
**************************************************************************/

_WORD     HWRStrLen (_STR pcString)
{
   register _CHAR *p;
   
   p = pcString+1;
   while(*pcString++ != 0);
   return((_WORD)(pcString-p));
}


/**************************************************************************
*                                                                         *
*    strchr.                                                              *
*                                                                         *
**************************************************************************/

p_CHAR    HWRStrChr(p_CHAR zString, _INT iChar)
{
   zString--;
   while(((_UCHAR)*(++zString)) != (_UCHAR)iChar && *zString != 0);
   if(*zString != 0) return (zString);
   return _NULL;
     
}

/**************************************************************************
*                                                                         *
*    strncmp.                                                             *
*                                                                         *
**************************************************************************/

_INT      HWRStrnCmp(p_CHAR zString1,p_CHAR zString2, _WORD wNumber)
{
   if(wNumber == 0) return 0;
   zString1--;
   zString2--;
   while(*(++zString1) == *(++zString2) && --wNumber != 0 && *zString1 != 0 
                                         && *zString2 != 0) ;
                                         
   if(wNumber == 0) return 0;
   return((_INT)(*zString1 - *zString2));
   
}


/**************************************************************************
*                                                                         *
*    strcpy.                                                              *
*                                                                         *
**************************************************************************/


_STR    HWRStrCpy (_STR pcString1, _STR pcString2)
{
   register _CHAR *p;
   
   p = pcString1;
   while((*pcString1++=*pcString2++) != 0);
   return(p);
   
}


/**************************************************************************
*                                                                         *
*    strcat.                                                              *
*                                                                         *
**************************************************************************/

_STR    HWRStrCat (_STR pcString1, _STR pcString2)
{
   register _CHAR *p;
   
   p = pcString1-1;  
   while(*++p != 0);
   while((*p++=*pcString2++) != 0);
   return(pcString1);
   
}

/**************************************************************************
*                                                                         *
*    strcat.                                                              *
*                                                                         *
**************************************************************************/

_STR  HWRStrnCat (_STR pcString1, _STR pcString2, _WORD len)
{
   register _CHAR *p;
   
   p = pcString1+len;  
   while((*p++=*pcString2++) != 0);
   return(pcString1);
}


/**************************************************************************
*                                                                         *
*    strrev.                                                              *
*                                                                         *
**************************************************************************/

_STR    HWRStrRev(_STR zString)
{
   register _CHAR *p,*p1;
   int i,c;
   
   p = zString-1;  
   p1 = zString;
   while(*++p != 0);
   i=(p-p1)>>1;
   while(i-- != 0) {c=(int)*p1; *p1++=*--p; *p=(_CHAR)c;}
   return zString;
   
}


/**************************************************************************
*                                                                         *
*    strrchr.                                                             *
*                                                                         *
**************************************************************************/

_STR    HWRStrrChr(_STR zString, _INT iChar)
{

   register _CHAR *p;
   
   zString--;
   p=_NULL;
   while(*++zString != 0) {if(((_UCHAR)*zString) == (_UCHAR)iChar) p = zString;}
   return (p);
      
}


/**************************************************************************
*                                                                         *
*    strncpy.                                                             *
*                                                                         *
**************************************************************************/

_STR    HWRStrnCpy(_STR zString1, _STR zString2, _WORD wNumber)
{
   register _CHAR *p;
   
   if(wNumber == 0) return(zString1);
   p = zString1-1;
   zString2--;
   while((*++p=*++zString2) != 0 && --wNumber != 0  );
   if(wNumber == 0) *++p = 0;
   return(zString1);
   
}


/**************************************************************************
*                                                                         *
*    strcmp.                                                              *
*                                                                         *
**************************************************************************/

_INT  HWRStrCmp (_STR zString1, _STR zString2)
{
   zString1--;
   zString2--;
   while(*(++zString1) == *(++zString2) && *zString1 != 0 && *zString2 != 0) ;
                                         
   return((_INT)(*zString1 - *zString2));
}

/**************************************************************************
*                                                                         *
*    StrEq.                                                               *
*                                                                         *
**************************************************************************/

_BOOL    HWRStrEmpty (_STR zString)
   {
   if (!zString)
      return _TRUE;
   if (!*zString)
      return _TRUE;
   return _FALSE;
   }

_BOOL     HWRStrEq(_STR zString1, _STR zString2)
   {
   if (HWRStrEmpty (zString1) && HWRStrEmpty (zString2))
      return _TRUE;
   if (HWRStrCmp (zString1, zString2) == 0)
      return _TRUE;
   else
      return _FALSE;
   }

/**************************************************************************
*                                                                         *
*    memcpy.                                                              *
*                                                                         *
**************************************************************************/
#ifndef HWRMemCpy

p_VOID  HWRMemCpy(p_VOID pcDest, p_VOID pcSrc, _WORD  wNumber)
{
   //CheckBlocks("MemCpy beg");

#ifdef HWR_SYSTEM_NO_LIBC
   {
     register _CHAR *p = (_CHAR*)pcDest,*p1 = (_CHAR*)pcSrc;

     if (wNumber == 0) return(pcDest);
   
     if (p < p1)
     {
        do *p++=*p1++; while(--wNumber != 0);
     }
     else
     {
        p += wNumber;
        p1 += wNumber;
        do *--p=*--p1; while(--wNumber != 0);
     }
   }
#else
   memmove(pcDest, pcSrc, wNumber);
#endif /* HWR_SYSTEM_NO_LIBC */

   CheckBlocks("MemCpy end");

   return(pcDest);
   
}
#endif /* HWRMemCpy */

/**************************************************************************
*                                                                         *
*    memset.                                                              *
*                                                                         *
**************************************************************************/
#ifndef HWRMemSet

p_VOID  HWRMemSet(p_VOID pcDest, _UCHAR ucChar, _WORD  wNumber)
{
   //CheckBlocks("MemSet beg");

#ifdef HWR_SYSTEM_NO_LIBC
   {
     register _CHAR *p;

     if(wNumber == 0) return(pcDest);
     p = (_CHAR*)pcDest;
     do *p++=ucChar; while(--wNumber != 0);
   }
#else
   memset(pcDest, ucChar, wNumber);
#endif /* HWR_SYSTEM_NO_LIBC */

   CheckBlocks("MemSet end");

   return(pcDest);
}
#endif /* HWRMemSet */

/**************************************************************************
*                                                                         *
*    Letters functions  will be here                                      *
*                                                                         *
**************************************************************************/
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\nnet.cpp ===
#include "bastypes.h"

//// rom_NUM_CHAR=2;
//// rom_NUM_COEFF=11;
ROM_DATA char rom_cmp[]={'0',0,0,'1',0,0};

ROM_DATA int rom_ncells[]={120,120};

ROM_DATA Fixed32 rom_matrix[]={

160,-39,-14,-1,-46,-3,-50,-16,-16,26,14,
-41,266,-7,0,-8,0,11,2,32,9,24,
-14,-5,233,1,-22,-4,7,1,-62,-22,-2,
-1,0,1,256,0,0,1,0,-5,-2,-3,
-40,-6,-21,0,234,-8,-41,-3,9,-5,40,
-4,-3,-3,0,-13,245,-5,-2,27,9,11,
-52,12,4,1,-49,-1,286,4,31,12,5,
-16,3,0,0,-2,0,5,257,5,-3,11,
-11,34,-58,-5,9,26,34,6,270,9,-43,
29,5,-12,-1,-10,6,13,-3,10,214,17,
0,8,11,0,22,-3,1,8,-46,-10,85,

261,-13,-9,-3,3,19,-29,-10,-4,-14,-8,
-13,260,12,1,2,-6,11,10,13,4,7,
-10,13,267,2,1,10,43,5,-5,-5,2,
-3,1,2,256,0,-1,4,1,-2,0,-1,
3,2,0,0,332,-8,-28,3,0,17,11,
19,-7,9,-1,-8,289,10,-1,13,-2,3,
-28,11,41,3,-27,11,304,16,7,-9,4,
-10,10,4,1,3,-1,17,259,-1,2,5,
-4,12,-4,-2,-1,13,8,-1,274,-19,-29,
-14,4,-3,0,14,-2,-7,3,-21,210,-15,
-8,7,4,0,9,2,6,5,-31,-15,221
};

ROM_DATA RCELL rom_cell[]={
{2556,{23,-2,-10,0,38,93,-10,-2,10,9,12}},{2511,{-2,-1,153,1,18,82,2,-1,-27,-3,12}},{3135,{-6,12,206,5,-13,72,53,0,-19,9,17}},{1304,{21,7,-21,-2,47,100,-5,3,43,32,18}},{1940,{-10,24,127,2,32,77,28,3,0,18,27}},{3656,{-5,14,204,0,41,81,11,12,-14,9,37}},{1954,{33,11,-33,-3,79,98,-8,4,48,93,26}},{2353,{3,9,172,1,48,73,9,7,-20,45,30}},{3397,{29,5,-11,-1,22,99,2,0,1,58,25}},{1438,{36,11,-32,-3,50,99,1,4,70,59,24}},
{3089,{4,-3,250,1,22,76,7,6,-37,13,25}},{2034,{9,15,-19,-2,67,101,-3,6,28,32,36}},{657,{24,6,-31,-3,64,101,-9,0,65,61,11}},{1147,{12,5,117,0,37,86,4,2,11,46,23}},{3883,{0,13,236,4,-16,75,69,2,12,36,27}},{1159,{-3,9,157,2,13,74,18,7,-1,28,19}},{1037,{12,9,-24,-2,85,98,-11,4,41,39,23}},{4314,{2,-3,118,1,54,78,-8,0,-19,-1,14}},{1876,{2,11,151,3,8,80,46,1,7,12,26}},{1348,{8,2,-7,0,-1,98,5,0,26,7,3}},
{1259,{5,3,118,0,-1,81,12,3,2,24,11}},{2298,{15,10,159,-1,41,85,12,6,-17,59,44}},{1155,{40,10,-38,-4,55,106,-4,1,85,85,13}},{1823,{33,13,-23,-3,71,101,-2,5,20,64,45}},{721,{12,7,-25,-2,55,100,-2,0,56,49,9}},{2411,{10,7,103,0,48,83,8,4,-2,19,32}},{1607,{29,11,-22,-3,30,98,5,4,53,18,25}},{1032,{14,7,-15,-1,24,100,0,1,38,20,13}},{3545,{-6,26,165,4,36,75,45,4,-16,4,39}},{3958,{22,-2,201,0,44,66,-6,-1,-21,60,33}},
{623,{22,14,-28,-3,34,105,5,3,69,63,13}},{2172,{-12,6,246,3,-12,70,27,11,-49,-7,16}},{1631,{49,16,-43,-5,54,111,8,5,95,94,28}},{3201,{-7,7,208,4,-21,80,62,8,7,2,22}},{1867,{1,0,186,1,38,81,0,-1,-33,-1,27}},{1076,{23,3,-18,-1,22,99,1,-1,43,40,5}},{2484,{-6,2,-13,-1,77,84,-12,0,17,11,19}},{3431,{36,17,-34,-4,88,104,-8,4,36,104,54}},{1846,{33,1,99,-1,33,94,-2,0,25,52,23}},{723,{9,18,-30,-3,72,103,-2,5,64,59,21}},
{3105,{28,-5,156,1,-9,72,8,0,-42,51,26}},{1357,{-1,0,102,0,7,96,6,0,0,6,11}},{1636,{-4,18,108,3,28,82,34,18,29,45,16}},{2112,{-9,17,193,2,-9,77,49,8,9,43,17}},{1815,{2,17,135,0,73,81,8,6,4,64,31}},{4043,{26,6,115,-1,73,85,-6,6,-23,50,59}},{3090,{8,4,216,5,-18,72,64,10,-42,26,38}},{1283,{25,4,-24,-2,83,95,-12,0,32,51,19}},{1375,{-23,4,226,5,41,34,8,4,-50,-10,24}},{1248,{-4,10,177,0,3,86,15,4,-11,0,22}},
{3315,{8,4,250,0,20,83,12,6,-21,20,37}},{3849,{59,-3,-11,-2,26,92,-13,-1,-10,33,38}},{772,{22,20,-35,-4,85,98,-1,6,65,69,37}},{1134,{15,9,120,-1,13,91,14,3,32,39,20}},{2206,{-4,15,156,5,-10,82,65,17,-1,16,15}},{3451,{16,16,185,2,-10,86,64,6,-2,95,40}},{727,{0,10,135,1,0,78,16,12,1,2,17}},{891,{9,14,136,0,62,87,10,6,42,72,26}},{1720,{1,-6,192,2,-20,61,11,0,-38,-4,11}},{628,{15,17,-37,-3,72,98,0,5,84,79,15}},
{950,{11,9,113,1,8,83,22,4,18,7,23}},{1740,{24,4,101,0,7,90,16,3,1,54,22}},{1988,{0,16,156,1,26,78,18,8,0,6,43}},{973,{32,19,-46,-5,92,108,-3,3,97,99,26}},{2996,{7,16,96,0,31,90,8,14,-18,26,40}},{3737,{-4,28,197,3,-6,84,78,22,37,9,36}},{2030,{13,15,146,3,5,81,51,4,1,54,30}},{1098,{9,4,131,0,48,87,1,4,1,28,21}},{4631,{20,1,178,0,51,71,-7,4,-46,31,56}},{1497,{9,6,-20,-1,80,93,-10,-1,34,25,10}},
{1997,{30,0,152,0,-7,83,5,0,-21,8,35}},{2202,{48,0,97,-2,32,93,-5,-2,14,91,28}},{1557,{-16,4,189,4,53,45,5,8,-43,-6,28}},{775,{16,16,107,-2,48,98,8,3,57,82,26}},{1450,{38,5,-26,-2,60,99,-7,-1,40,55,22}},{461,{35,18,-44,-5,55,111,2,2,106,105,15}},{934,{1,17,113,-1,39,96,13,10,31,46,26}},{1359,{2,20,185,-1,30,97,22,7,28,56,33}},{5084,{3,18,-16,-3,53,105,4,6,15,55,44}},{1261,{50,6,-25,-3,13,104,1,0,50,66,18}},
{1274,{-9,8,258,0,-8,85,22,8,-23,14,22}},{563,{22,10,-20,-2,7,104,12,2,59,28,11}},{2045,{-6,30,152,3,31,79,52,22,25,49,21}},{1218,{34,21,-36,-4,53,110,6,6,81,66,36}},{923,{16,12,140,0,6,92,29,1,34,63,22}},{1668,{-1,9,168,0,13,79,14,2,1,15,27}},{1761,{7,15,-21,-2,90,81,-8,9,20,46,34}},{4576,{-16,22,249,1,63,74,20,1,-24,24,39}},{1033,{-10,9,154,1,43,73,9,10,-7,16,17}},{1905,{31,9,118,-2,53,91,1,3,41,65,35}},
{3147,{20,14,94,-2,26,100,7,6,21,14,47}},{2323,{41,10,83,-3,47,90,4,5,20,110,42}},{2586,{39,-1,190,0,-18,82,19,0,-18,67,29}},{1790,{19,-3,170,0,1,72,13,1,-15,3,20}},{370,{26,19,-38,-4,60,108,3,6,88,85,21}},{2507,{25,17,-22,-3,60,103,1,3,41,19,43}},{832,{11,23,-35,-3,89,97,4,5,74,70,25}},{3056,{4,-8,265,6,-41,73,63,4,-41,9,14}},{2319,{2,2,181,5,-17,70,44,2,-45,2,32}},{3064,{11,10,217,0,35,88,8,7,-32,59,50}},
{849,{16,8,92,-1,53,78,3,0,44,67,19}},{1839,{46,20,68,-4,48,103,8,2,76,117,39}},{656,{16,8,127,-1,41,89,7,1,33,62,21}},{4102,{16,26,185,1,0,82,67,16,16,138,46}},{3575,{55,0,-19,-2,39,99,-13,-2,-2,95,30}},{1257,{15,2,-14,-1,83,95,-19,0,6,11,34}},{3832,{16,12,171,0,18,88,18,3,-42,78,52}},{625,{-4,3,153,2,-8,72,11,6,-18,-1,14}},{829,{4,-2,128,1,-17,83,13,3,-22,0,7}},{2623,{0,29,174,1,20,80,61,27,31,43,34}},
{579,{18,13,-25,-2,53,91,8,8,57,51,10}},{2469,{28,-5,219,0,-22,84,16,0,-30,5,31}},{371,{24,20,-34,-3,46,107,8,6,81,79,15}},{749,{10,7,143,0,5,83,17,1,21,51,15}},{492,{32,2,-15,-1,7,100,8,1,39,15,11}},{1219,{41,11,74,-3,37,97,4,1,70,96,20}},{1332,{-5,4,185,1,25,73,8,5,-15,18,18}},{2013,{8,8,126,0,73,77,-1,1,2,33,31}},{1435,{4,16,92,-1,23,94,23,7,32,9,28}},{942,{1,37,-29,-3,62,103,28,13,72,64,19}},

{21580,{-9,47,305,0,22,130,126,17,319,90,277}},{4773,{14,30,200,4,16,114,94,12,213,84,179}},{3513,{5,39,186,0,102,116,47,14,194,147,162}},{5329,{0,42,303,3,21,117,123,19,221,146,180}},{2808,{23,37,217,3,27,114,99,17,153,90,131}},{13126,{50,32,227,1,15,123,94,12,261,9,234}},{2991,{-23,29,223,-1,19,118,60,10,192,104,161}},{1557,{1,43,171,5,73,100,65,26,142,98,132}},{2194,{0,42,215,0,75,116,66,25,157,117,126}},{3516,{25,43,261,-2,112,124,54,13,222,167,183}},
{1943,{-17,23,185,0,11,118,69,9,162,41,146}},{4110,{-25,29,254,5,13,105,99,14,161,87,137}},{12209,{50,47,276,0,35,129,111,18,349,192,286}},{1871,{32,25,173,2,23,114,80,11,132,93,106}},{1399,{5,26,182,0,25,117,57,10,165,121,135}},{7133,{23,42,220,-2,120,124,51,17,175,117,249}},{5748,{24,42,263,2,40,116,96,13,266,190,212}},{3175,{68,25,214,-2,27,130,55,7,184,121,150}},{1893,{-19,21,179,3,10,110,82,9,123,89,100}},{1341,{22,28,177,0,33,122,61,13,161,52,160}},
{1019,{8,34,173,2,60,109,58,10,119,87,114}},{2321,{-18,27,220,0,11,126,71,9,192,20,174}},{1542,{0,39,174,4,49,104,71,22,162,101,149}},{85739,{-35,74,297,-5,48,151,126,22,588,198,507}},{1406,{7,35,174,3,38,107,69,20,139,59,138}},{3549,{-29,34,278,2,14,114,113,15,199,80,172}},{4805,{-6,44,180,2,53,113,75,15,229,134,211}},{817,{27,34,164,-1,113,116,43,18,138,104,120}},{1328,{9,38,179,-1,83,126,52,18,145,79,186}},{1948,{14,31,242,-2,24,116,55,9,209,119,174}},
{3175,{18,45,255,3,56,111,98,14,165,82,172}},{2425,{0,23,233,0,11,114,64,8,130,57,115}},{2007,{27,41,188,0,145,114,45,12,160,122,135}},{1091,{19,26,179,-1,45,125,44,8,151,92,143}},{3537,{45,29,182,0,15,131,109,16,172,28,161}},{8395,{-7,74,280,-2,100,130,98,23,389,268,339}},{7954,{12,47,220,-3,89,122,55,14,295,201,262}},{950,{47,16,137,-1,13,122,56,5,116,81,90}},{1375,{7,39,176,5,71,101,69,28,111,64,119}},{1264,{-19,24,188,0,13,124,70,9,160,82,132}},
{2452,{54,31,267,0,25,123,108,12,186,133,147}},{5185,{-33,39,288,-1,28,124,69,13,247,169,200}},{3285,{4,41,228,0,83,108,58,23,118,128,166}},{1286,{16,29,212,0,69,104,52,11,115,85,99}},{2376,{-2,31,263,0,25,112,60,10,186,129,152}},{3929,{21,35,218,1,19,131,124,18,222,160,174}},{1166,{1,40,144,0,72,107,42,17,121,72,149}},{539,{24,30,161,0,97,110,40,11,134,93,152}},{731,{-19,22,169,0,15,115,55,8,148,108,116}},{1101,{25,19,150,0,20,122,49,7,149,44,132}},
{373,{26,29,145,0,73,110,46,12,124,87,104}},{1405,{-28,35,270,-1,22,121,70,12,233,109,198}},{1176,{-15,21,164,0,14,123,69,8,140,55,125}},{4802,{40,33,283,1,24,120,101,10,193,34,182}},{2060,{63,22,168,-1,18,129,55,6,177,67,150}},{919,{15,37,189,-1,118,120,44,14,155,115,168}},{1482,{-3,34,219,3,18,118,106,15,187,136,150}},{716,{22,17,137,0,15,129,57,8,116,69,96}},{648,{-12,15,123,0,8,118,57,6,104,74,80}},{13140,{-47,56,301,1,28,129,138,22,410,114,352}},
{1909,{-9,29,211,4,10,111,98,10,184,45,161}},{1578,{66,19,172,-2,19,123,40,4,148,105,115}},{1811,{25,25,244,3,9,108,93,8,149,33,132}},{1595,{0,24,244,3,8,110,101,12,107,74,86}},{514,{19,30,140,0,99,108,33,10,117,85,118}},{1049,{40,20,167,1,47,112,49,10,110,33,111}},{888,{21,21,137,0,42,121,46,10,106,35,123}},{1709,{14,34,197,-1,43,122,55,13,166,37,193}},{1078,{22,16,179,1,13,119,63,8,94,53,81}},{1692,{4,42,186,3,82,96,59,26,99,100,142}},
{4144,{16,48,257,5,90,100,92,23,119,72,153}},{585,{27,23,158,-1,59,110,35,9,133,85,135}},{760,{62,16,142,0,26,115,41,4,126,61,107}},{1239,{-27,30,183,0,24,120,62,11,206,154,162}},{1077,{20,24,198,-1,15,120,58,7,171,73,147}},{995,{14,23,154,1,26,109,53,12,155,80,135}},{2842,{12,52,306,-2,126,128,65,19,258,191,236}},{815,{30,19,172,0,14,121,51,8,120,45,124}},{949,{-12,20,186,0,8,115,60,8,138,12,132}},{1149,{56,13,116,0,17,130,51,5,98,61,81}},
{3843,{19,30,166,0,63,111,49,14,118,18,215}},{377,{13,25,138,0,43,107,42,9,117,76,101}},{8287,{64,31,193,0,28,131,93,11,250,103,216}},{918,{20,30,183,0,89,109,44,17,129,96,104}},{1006,{-16,19,134,0,11,121,62,7,128,92,100}},{902,{9,42,181,2,83,107,72,18,113,83,92}},{1019,{19,18,142,0,33,117,42,9,100,6,119}},{753,{20,35,5,-2,96,122,34,7,109,71,132}},{2212,{11,46,256,0,111,122,57,22,187,141,162}},{3938,{12,34,267,0,19,118,79,14,189,-7,194}},
{735,{28,25,172,-1,80,110,33,9,147,110,121}},{1122,{-23,32,246,-1,18,121,69,10,212,61,202}},{262,{21,25,137,0,71,121,40,11,116,81,100}},{908,{-14,18,176,1,10,115,58,8,104,74,82}},{653,{44,20,138,-1,42,120,44,5,118,54,106}},{1459,{10,26,185,6,37,89,66,16,74,81,100}},{573,{31,19,173,1,17,114,55,11,108,76,85}},{1448,{13,36,208,-1,50,127,54,17,177,122,149}},{1251,{3,47,169,0,98,111,55,11,153,108,154}},{2698,{-19,26,161,1,17,110,62,9,196,61,168}},
{1398,{-9,34,247,-1,25,123,59,11,211,157,167}},{1638,{18,47,203,4,71,111,90,31,173,106,164}},{2212,{54,22,225,0,15,116,62,9,140,53,123}},{1298,{51,29,177,0,121,111,41,9,124,89,132}},{1664,{84,16,170,0,12,119,46,5,137,25,122}},{1045,{-25,55,271,0,97,76,64,17,257,197,207}},{1542,{32,22,148,-1,32,120,44,7,125,-8,163}},{806,{14,8,2,-2,13,118,23,2,94,66,70}},{3940,{-15,30,238,0,50,74,41,12,75,161,192}},{3461,{-8,38,213,3,100,65,46,27,49,116,178}},
{1621,{-1,43,214,2,75,91,64,17,172,111,181}},{1116,{9,26,148,5,34,107,61,17,145,106,114}},{857,{40,21,179,-1,15,116,45,5,156,56,134}},{2819,{-8,52,191,0,66,118,73,21,251,188,198}},{1251,{-19,48,267,1,78,75,64,24,215,160,190}},{386,{23,26,148,0,99,101,33,8,125,94,103}},{1626,{-7,22,204,2,14,99,58,11,99,87,125}},{624,{22,23,147,0,20,123,55,8,137,70,119}},{529,{3,37,153,6,63,96,62,26,109,80,97}},{967,{14,37,219,2,99,96,60,18,100,73,91}}
};
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\mlp.cpp ===
/* **************************************************************************** */
/* **************************************************************************** */
/* *                  AVP 1996                                                * */
/* **************************************************************************** */

#include "snn.h"

#if !MLP_PRELOAD_MODE
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
 #include <math.h>
// #include <fstream.h>
#endif

#include "ams_mg.h" // For the PG_DEBUG definition only
#include "mlp.h"

#if 0 //defined( _WIN32_WCE ) && (defined( _SH3_ ) || defined ( _MIPS_ ))
 #ifdef __cplusplus
  extern "C" { void __asm(const char *, ...); }
 #else
  extern void __asm(const char *,...);
 #endif
#endif

/* **************************************************************************** */
/* *        MLP functions                                                     * */
/* **************************************************************************** */

/* **************************************************************************** */
/* *         Calculate Net result                                             * */
/* **************************************************************************** */
_INT CountNetResult(p_UCHAR inps, p_UCHAR outs, p_mlp_data_type mlpd)
 {
  _INT   i ,k;

// ----------------- Fill in Inputs --------------------------------------------

  k = MLP_NET_1L_NUMCELLS+MLP_NET_2L_NUMCELLS+MLP_NET_3L_NUMCELLS+MLP_NET_4L_NUMCELLS;
  for (i = 0; i < MLP_NET_NUMINPUTS; i ++, k ++)
   {
    mlpd->signals[k] = (fint_s)(((flong)inps[i] x_UPCO_S)/256); // Normalize inputs
   }

// ----------------- Count net   cells -----------------------------------------

  for (i = 0; i < MLP_NET_NUMCELLS; i ++)
   {
    mlpd->signals[i] = CountCellSignal(i, mlpd);
   }

// ----------------- Get results -----------------------------------------------

  k = MLP_NET_1L_NUMCELLS+MLP_NET_2L_NUMCELLS;
  for (i = 0; i < MLP_NET_NUMOUTPUTS; i ++, k ++)
   {
    outs[i] = (_UCHAR)(((flong)mlpd->signals[k] * 256) x_DNCO_S);
   }

  return 0;
 }

/* **************************************************************************** */
/* *         Calc cell output                                                 * */
/* **************************************************************************** */
#if 0 // Moved to sep file calccell.cpp
fint_s CountCellSignal(_INT nc, p_mlp_data_type mlpd)
 {
  _INT     i;
  flong   v;
  p_mlp_net_type net = (p_mlp_net_type)mlpd->net;
  p_mlp_cell_type cell = &(net->cells[nc]);
  fint_s  *ppi = &(mlpd->signals[cell->inp_ind]);
  fint_c  *weights = cell->weights;


  v  = FINT_C_OF(cell->bias) x_UPCO_S;

#if MLP_UNROLL_CYCLES
 #ifdef _SH3_
  __asm(
        "mov.l  @R4,R0    \n"
        "lds    R0, MACL  \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "sts    MACL,R0   \n"
        "mov.l  R0,@R4",
        &v,
        ppi,
        weights
       );

 #elif 0 //_MIPS_

  __asm(
        "lw     $8, 0(%0) \n"
        "mtlo   $8        \n"

        "lw     $8, 0(%1) \n"
        "lw     $9, 0(%2) \n"
        "madd16 $8, $9    \n"
        "lw     $8, 2(%1) \n"
        "lw     $9, 2(%2) \n"
        "madd16 $8, $9    \n"
        "lw     $8, 4(%1) \n"
        "lw     $9, 4(%2) \n"
        "madd16 $8, $9    \n"
        "lw     $8, 6(%1) \n"
        "lw     $9, 6(%2) \n"
        "madd16 $8, $9    \n"
        "lw     $8, 8(%1) \n"
        "lw     $9, 8(%2) \n"
        "madd16 $8, $9    \n"

        "lw     $8,10(%1) \n"
        "lw     $9,10(%2) \n"
        "madd16 $8, $9    \n"
        "lw     $8,12(%1) \n"
        "lw     $9,12(%2) \n"
        "madd16 $8, $9    \n"
        "lw     $8,14(%1) \n"
        "lw     $9,14(%2) \n"
        "madd16 $8, $9    \n"
        "lw     $8,16(%1) \n"
        "lw     $9,16(%2) \n"
        "madd16 $8, $9    \n"
        "lw     $8,18(%1) \n"
        "lw     $9,18(%2) \n"
        "madd16 $8, $9    \n",
        &v,
        ppi,
        weights
       );

  __asm(
        "lw     $8,20(%1) \n"
        "lw     $9,20(%2) \n"
        "madd16 $8, $9    \n"
        "lw     $8,22(%1) \n"
        "lw     $9,22(%2) \n"
        "madd16 $8, $9    \n"
        "lw     $8,24(%1) \n"
        "lw     $9,24(%2) \n"
        "madd16 $8, $9    \n"
        "lw     $8,26(%1) \n"
        "lw     $9,26(%2) \n"
        "madd16 $8, $9    \n"
        "lw     $8,28(%1) \n"
        "lw     $9,28(%2) \n"
        "madd16 $8, $9    \n"

        "lw     $8,30(%1) \n"
        "lw     $9,30(%2) \n"
        "madd16 $8, $9    \n"
        "lw     $8,32(%1) \n"
        "lw     $9,32(%2) \n"
        "madd16 $8, $9    \n"
        "lw     $8,34(%1) \n"
        "lw     $9,34(%2) \n"
        "madd16 $8, $9    \n"
        "lw     $8,36(%1) \n"
        "lw     $9,36(%2) \n"
        "madd16 $8, $9    \n"
        "lw     $8,38(%1) \n"
        "lw     $9,38(%2) \n"
        "madd16 $8, $9    \n"

        "mflo   $8        \n"
        "sw     $8, 0(%0)",
        &v,
        ppi,
        weights
       );
 #else // Unknown -- C code
  v += FINT_S_OF(ppi[0])  * FINT_C_OF(weights[0])  + FINT_S_OF(ppi[1])  * FINT_C_OF(weights[1])  +
       FINT_S_OF(ppi[2])  * FINT_C_OF(weights[2])  + FINT_S_OF(ppi[3])  * FINT_C_OF(weights[3])  +
       FINT_S_OF(ppi[4])  * FINT_C_OF(weights[4])  + FINT_S_OF(ppi[5])  * FINT_C_OF(weights[5])  +
       FINT_S_OF(ppi[6])  * FINT_C_OF(weights[6])  + FINT_S_OF(ppi[7])  * FINT_C_OF(weights[7])  +
       FINT_S_OF(ppi[8])  * FINT_C_OF(weights[8])  + FINT_S_OF(ppi[9])  * FINT_C_OF(weights[9])  +
       FINT_S_OF(ppi[10]) * FINT_C_OF(weights[10]) + FINT_S_OF(ppi[11]) * FINT_C_OF(weights[11]) +
       FINT_S_OF(ppi[12]) * FINT_C_OF(weights[12]) + FINT_S_OF(ppi[13]) * FINT_C_OF(weights[13]) +
       FINT_S_OF(ppi[14]) * FINT_C_OF(weights[14]) + FINT_S_OF(ppi[15]) * FINT_C_OF(weights[15]) +
       FINT_S_OF(ppi[16]) * FINT_C_OF(weights[16]) + FINT_S_OF(ppi[17]) * FINT_C_OF(weights[17]) +
       FINT_S_OF(ppi[18]) * FINT_C_OF(weights[18]) + FINT_S_OF(ppi[19]) * FINT_C_OF(weights[19]);
  #endif // SH3

#else
  for (i = 0; i < MLP_CELL_MAXINPUTS; i += 4, weights += 4, ppi += 4)
   {
    v += FINT_S_OF(ppi[0]) * FINT_C_OF(weights[0]) +
         FINT_S_OF(ppi[1]) * FINT_C_OF(weights[1]) +
         FINT_S_OF(ppi[2]) * FINT_C_OF(weights[2]) +
         FINT_S_OF(ppi[3]) * FINT_C_OF(weights[3]);
   }
#endif

  i = ((v x_DNCO_C) * (MLP_EXPTABL_SIZE/MLP_EXPTABL_MAX)) x_DNCO_S;

  if (i >= 0)
   {
    if (i >= MLP_EXPTABL_SIZE) return net->exp_tabl[MLP_EXPTABL_SIZE-1];
     else return net->exp_tabl[i];
   }
   else
   {
//    i = -i;
    if (i <= -MLP_EXPTABL_SIZE) return (fint_s)(MLP_MAX_INT_S - net->exp_tabl[MLP_EXPTABL_SIZE-1]);
     else return (fint_s)(MLP_MAX_INT_S - net->exp_tabl[-i]);
   }
 }
#endif//0

#if !MLP_PRELOAD_MODE
/* **************************************************************************** */
/* *         Load net from   given stream                                     * */
/* **************************************************************************** */
_INT LoadNet(FILE * file, p_mlp_data_type mlpd)
 {
  _INT   i, j;
  _INT   num_l, num_i, num_o, num_c, d;
  _CHAR  str[64];
  float  f;
  mlp_cell_type * cell;
  p_mlp_net_type net = (p_mlp_net_type)mlpd->net;

  if (net == 0) goto err;

  if (fscanf(file, "%s %d %d %d %d", str, &num_l, &num_i, &num_o, &num_c) != 5) throw 0x0008;

//  if (strcmp(str, MLP_ID_STR) || num_l != MLP_NET_NUMLAYERS ||
//      num_i != MLP_NET_NUMINPUTS || num_o != MLP_NET_NUMOUTPUTS  throw 0x0008;

  if (strcmp(str, MLP_ID_STR) || num_l != MLP_NET_NUMLAYERS ||
      num_i != MLP_NET_NUMINPUTS || num_o != MLP_NET_NUMOUTPUTS ||
      num_c != MLP_NET_NUMCELLS) throw 0x0008;

  strcpy((_STR)net->id_str, MLP_ID_STR);
  net->num_layers  = MLP_NET_NUMLAYERS;
  net->num_inputs  = MLP_NET_NUMINPUTS;
  net->num_outputs = MLP_NET_NUMOUTPUTS;

//for (i = 0; i < num_o; i ++)
// {
//  fscanf(file, "%s", str);
// }

  for (i = 0; i < MLP_EXPTABL_SIZE; i ++)
    {fscanf(file, "%f", &f); net->exp_tabl[i] = (fint_s)(f * (1 x_UPCO_S));}

  cell = &(net->cells[0]);
  for (i = 0; i < MLP_NET_NUMCELLS; i ++, cell ++)
   {
//fscanf(file, "%d", &num_i); // Temp for compatibility
//    fscanf(file, "%f", &f);
    fscanf(file, "%d", &d);  cell->inp_ind = (_USHORT)d;
    fscanf(file, "%f", &f); cell->bias = (fint_c)(FINT_C_LD(f * (1 x_UPCO_C)));

    for (j = 0; j < MLP_CELL_MAXINPUTS; j ++)
     {
      if (fscanf(file, "%f", &f) != 1) throw 0x0008;
      cell->weights[j] = (fint_c)(FINT_C_LD(f * (1 x_UPCO_C)));
     }
   }

  return 0;
err:
  return 1;
 }
#endif //!PRELOAD

//#if !MLP_PRELOAD_MODE
#if MLP_LEARN_MODE
/* **************************************************************************** */
/* *        Initialize shifts and weights of the given net                    * */
/* **************************************************************************** */
_INT InitNet(_INT type, p_mlp_data_type mlpd)
 {
  _INT i;
  _INT inp;
  p_mlp_net_type net = (p_mlp_net_type)mlpd->net;

  strcpy((_STR)net->id_str, MLP_ID_STR);
  net->num_layers  = MLP_NET_NUMLAYERS;
  net->num_inputs  = MLP_NET_NUMINPUTS;
  net->num_outputs = MLP_NET_NUMOUTPUTS;

// ----------------- Create first hidden layer ---------------------------------

  for (i = 0; i < MLP_COEF_SHARE; i+=1)
   {
    net->cells[i].inp_ind   = (_USHORT)(MLP_NET_1L_NUMCELLS+MLP_NET_2L_NUMCELLS+MLP_NET_3L_NUMCELLS+MLP_NET_4L_NUMCELLS);
//    net->cells[i+1].inp_ind = (_USHORT)(MLP_CELL_MAXINPUTS+MLP_NET_1L_NUMCELLS+MLP_NET_2L_NUMCELLS+MLP_NET_3L_NUMCELLS+MLP_NET_4L_NUMCELLS);
//    net->cells[i].out_ind = (_USHORT)i;
   }

  for (i = MLP_COEF_SHARE, inp = MLP_NUM_CFF; i < MLP_NET_1L_NUMCELLS; i ++, inp += MLP_CELL_MAXINPUTS)
   {
    if (inp >= MLP_NUM_CFF + MLP_NUM_BMP) inp = MLP_NUM_CFF;
    net->cells[i].inp_ind = (_USHORT)(inp+(MLP_NET_1L_NUMCELLS+MLP_NET_2L_NUMCELLS+MLP_NET_3L_NUMCELLS+MLP_NET_4L_NUMCELLS));
//    net->cells[i].out_ind = (_USHORT)i;
   }

// ----------------- Create second hidden layer --------------------------------

  for (i = 0; i < MLP_NET_2L_NUMCELLS; i ++)
   {
    inp = (i*MLP_CELL_MAXINPUTS) % MLP_NET_1L_NUMCELLS;
    net->cells[i+MLP_NET_1L_NUMCELLS].inp_ind = (_USHORT)inp;
//    net->cells[i+MLP_NET_1L_NUMCELLS].out_ind = (_USHORT)(MLP_NET_1L_NUMCELLS+i);
   }

// ----------------- Create output layer ---------------------------------------

  for (i = 0; i < MLP_NET_3L_NUMCELLS; i ++)
   {
    inp = i*MLP_PREOUT_STEP;
    net->cells[i+MLP_NET_1L_NUMCELLS+MLP_NET_2L_NUMCELLS].inp_ind = (_USHORT)(MLP_NET_1L_NUMCELLS+inp);
//    net->cells[i+MLP_NET_1L_NUMCELLS+MLP_NET_2L_NUMCELLS].out_ind = (_USHORT)(MLP_NET_1L_NUMCELLS+MLP_NET_2L_NUMCELLS+i);
   }

// ----------------- Fill Exponents table -------------------------------------

  FillExpTable(1, mlpd);

  return 0;
 }

/* **************************************************************************** */
/* *         Set initial weights                                              * */
/* **************************************************************************** */
_INT InitNetWeights(_INT type, flong ic, p_mlp_data_type mlpd)
 {
  _INT i;

  if (type >= 0) randomize();

  for (i = 0; i < MLP_NET_NUMCELLS; i ++)
   {
    InitCellWeights(type, ic, i, mlpd);
   }

  return 0;
 }

/* **************************************************************************** */
/* *         Set initial weights to the sell                                  * */
/* **************************************************************************** */
_INT InitCellWeights(_INT type, float ic, _INT ncell, p_mlp_data_type mlpd)
 {
  _INT    i;
  float  w;
  p_mlp_net_type  net = (p_mlp_net_type)mlpd->net;
  p_mlp_cell_type cell = &(net->cells[ncell]);

  if (type == 1) ic = 0.1;

  if (type == 0 || (type == 1 && cell->num_changes == 0))
   {
    cell->err       = 0;

    w  = (float)(rand() % 10000)*0.0001*ic;
    w += ic/8;
    if ((rand() % 100) > 50) w *= -1.;
    cell->bias    = w x_UPCO_C;
    cell->sbias   = 0;
    cell->psbias  = 0;
    cell->num_sws = 0;
    cell->num_psws= 0;

    for (i = 0; i < MLP_CELL_MAXINPUTS; i ++)
     {
      w  = (float)(rand() % 10000)*0.0001*ic;
      w += ic/8;
      if ((rand() % 100) > 50) w *= -1.;

      cell->weights[i]     = w x_UPCO_C;
      cell->sws[i]         = 0;
      cell->psws[i]        = 0;
     }
   }

  if (type == 1)  // Init links on zero change cells
   {
    p_mlp_cell_type pcell = &(net->cells[cell->inp_ind]);

    for (i = 0; i < MLP_CELL_MAXINPUTS; i ++, pcell ++)
     {
      if (cell->inp_ind < ncell) // Do not init input layer
       {
        if (pcell->num_changes == 0)
         {
          w  = (float)(rand() % 10000)*0.0001*ic;
          w += ic/8;
          if ((rand() % 100) > 50) w *= -1.;
          cell->weights[i]     = w x_UPCO_C;
         }
       }
     }
   }


  if (type == 1 && cell->num_changes > 0) // Let's decrease volume of weights to allow new to grow
   {
    cell->bias /= 2;
    for (i = 0; i < MLP_CELL_MAXINPUTS; i ++) cell->weights[i] /= 2;
   }

  return 0;
err:
  return 1;
 }

/* **************************************************************************** */
/* *         Create exp formula table                                         * */
/* **************************************************************************** */
_INT FillExpTable(flong ic, p_mlp_data_type mlpd)
 {
  _INT i;
  float v;
  p_mlp_net_type net = (p_mlp_net_type)mlpd->net;

  for (i = 0; i < MLP_EXPTABL_SIZE; i ++)
   {
    v = -(((float)(i)+0.6)/(MLP_EXPTABL_SIZE/MLP_EXPTABL_MAX));
    net->exp_tabl[i] = ((1.0 / (1.0 + exp(ic*v))) * MLP_MAX_INT_S);
   }

  return 0;
 }
//#endif // !PRELOAD_MODE


/* **************************************************************************** */
/* *         Calculate Net errors                                             * */
/* **************************************************************************** */
_INT CountNetError(float * desired_outputs, flong  zc, p_mlp_data_type mlpd)
 {
  _INT   i;
  float  e, outp;
  fint_s *outs;
  p_mlp_cell_type cells;
  p_mlp_net_type net = (p_mlp_net_type)mlpd->net;

  // ----------------- Calculate output layer error ----------------------------

  outs  = &mlpd->signals[MLP_NET_1L_NUMCELLS+MLP_NET_2L_NUMCELLS];
  cells = &net->cells[MLP_NET_1L_NUMCELLS+MLP_NET_2L_NUMCELLS];
  for (i = 0; i < MLP_NET_NUMOUTPUTS; i ++)
   {
    outp = outs[i];
    e    = ((desired_outputs[i] x_UPCO_S) - outp) x_DNCO_S;

    if (desired_outputs[i] < 0.5 && desired_outputs[i] > 0.01)
      e /= (desired_outputs[i]*100);

    e    = MLP_ERR(e);

    e    = outp * e * (MLP_MAX_INT_S - outp);
    if (desired_outputs[i] < 0.5) e *= zc;
    cells[i].err = e x_DNDNCO_S;
   }

  // -------------- Calculate hidden layers errors -----------------------------

  cells = &net->cells[0];
  for (i = 0; i < MLP_NET_1L_NUMCELLS+MLP_NET_2L_NUMCELLS; i ++, cells ++) cells->err = 0;

  CalcHiddenLayerError(MLP_NET_1L_NUMCELLS+MLP_NET_2L_NUMCELLS, MLP_NET_3L_NUMCELLS, mlpd);
  CalcHiddenLayerError(MLP_NET_1L_NUMCELLS, MLP_NET_2L_NUMCELLS, mlpd);

  return 0;
 }

/* **************************************************************************** */
/* *       Calculate hidden layer error                                       * */
/* **************************************************************************** */
_INT CalcHiddenLayerError(_INT layer_st, _INT layer_len, p_mlp_data_type mlpd)
 {
  _INT   i, n, layer_end, num;
  fint_s        * ou;
  mlp_cell_type * cell;
  mlp_cell_type * cp;
  mlp_cell_type * cpp;
  float * pf;
  p_mlp_net_type net = (p_mlp_net_type)mlpd->net;

  // ---------------- Summ up errors for previous layer ------------------------

  layer_end = layer_st + layer_len;
  for (n = layer_st; n < layer_end; n ++)
   {
    float e;

    cell = &(net->cells[n]);
    pf   = &(cell->weights[0]);
    cpp  = &(net->cells[cell->inp_ind]);
    e    = cell->err x_DNCO_C;
    for (i = 0; i < MLP_CELL_MAXINPUTS; i += 4, cpp += 4, pf += 4)
     {
      float a,b;

      a = pf[0] * e; // Hint compiler -- there's no dependency!
      b = pf[1] * e;
      cpp[0].err += a;
      cpp[1].err += b;
      a = pf[2] * e;
      b = pf[3] * e;
      cpp[2].err += a;
      cpp[3].err += b;
     }
   }

  // -------------------- Convert calculated summs to real error ---------------

  n   = net->cells[layer_st].inp_ind;
  num = net->cells[layer_end-1].inp_ind - n + MLP_CELL_MAXINPUTS;
  cp  = &(net->cells[n]);
  ou  = &(mlpd->signals[n]);
  for (n = 0; n < num; n += 4, cp += 4, ou += 4)
   {
    float a,b,c;

    c = ou[0];
    a = c * (MLP_MAX_INT_S - c) * cp[0].err;
    c = ou[1];
    b = c * (MLP_MAX_INT_S - c) * cp[1].err;
    cp[0].err = a x_DNDNCO_S;
    cp[1].err = b x_DNDNCO_S;

    c = ou[2];
    a = c * (MLP_MAX_INT_S - c) * cp[2].err;
    c = ou[3];
    b = c * (MLP_MAX_INT_S - c) * cp[3].err;
    cp[2].err = a x_DNDNCO_S;
    cp[3].err = b x_DNDNCO_S;
   }

  return 0;
 }

/* **************************************************************************** */
/* *         Modify weight deltas                                             * */
/* **************************************************************************** */
_INT ModifyNetDeltas(_INT flags, p_mlp_data_type mlpd)
 {
  _INT  n;
  float e;
  float *ppi;
  float a, b;
  mlp_cell_type * cell;
  p_mlp_net_type net = (p_mlp_net_type)mlpd->net;

  cell = &(net->cells[0]);
  for (n = 0; n < MLP_NET_NUMCELLS; n ++, cell ++)
   {
    cell->sbias += cell->err;

    ppi  = mlpd->signals + cell->inp_ind;
    e    = cell->err x_DNCO_S;

    #if MLP_UNROLL_CYCLES
    a = ppi[0] * e;
    b = ppi[1] * e;
    cell->sws[0] += a;
    a = ppi[2] * e;
    cell->sws[1] += b;
    b = ppi[3] * e;
    cell->sws[2] += a;
    cell->sws[3] += b;

    a = ppi[4] * e;
    b = ppi[5] * e;
    cell->sws[4] += a;
    a = ppi[6] * e;
    cell->sws[5] += b;
    b = ppi[7] * e;
    cell->sws[6] += a;
    cell->sws[7] += b;

    a = ppi[8] * e;
    b = ppi[9] * e;
    cell->sws[8] += a;
    a = ppi[10] * e;
    cell->sws[9] += b;
    b = ppi[11] * e;
    cell->sws[10] += a;
    cell->sws[11] += b;

    a = ppi[12] * e;
    b = ppi[13] * e;
    cell->sws[12] += a;
    a = ppi[14] * e;
    cell->sws[13] += b;
    b = ppi[15] * e;
    cell->sws[14] += a;
    cell->sws[15] += b;

    a = ppi[16] * e;
    b = ppi[17] * e;
    cell->sws[16] += a;
    a = ppi[18] * e;
    cell->sws[17] += b;
    b = ppi[19] * e;
    cell->sws[18] += a;
    cell->sws[19] += b;
    #else
    {
    _INT i;
    float *swsp = cell->sws;;
    for (i = 0; i < MLP_CELL_MAXINPUTS; i += 4, swsp += 4, ppi += 4)
     {
      a = ppi[0] * e;  // To Explain to compiler that there is no dependence on data
      b = ppi[1] * e;
      swsp[0] += a;
      a = ppi[2] * e;
      swsp[1] += b;
      b = ppi[3] * e;
      swsp[2] += a;
      swsp[3] += b;
     }
    }
    #endif

    cell->num_sws ++;
   }

  return 0;
 }

/* **************************************************************************** */
/* *         Adjust net weights according to propagated error                 * */
/* **************************************************************************** */
_INT AdjustNetWeights(_INT flags, float * lcs, float ic, p_mlp_data_type mlpd)
 {
  _INT  i, n;
  float d, lc, llc;
  p_mlp_cell_type cell;
  p_mlp_net_type net = (p_mlp_net_type)mlpd->net;

  if (flags & 0x01) // If mozhno, apply deltas to weights
   {
    cell = net->cells;
    for (n = 0, llc = lcs[1]; n < MLP_NET_NUMCELLS; n ++, cell ++)
     {
      if (n == MLP_NET_1L_NUMCELLS) llc = lcs[2];
      if (n == MLP_NET_1L_NUMCELLS+MLP_NET_2L_NUMCELLS) llc = lcs[3];

      if (cell->num_changes == 0 && cell->prev_val > 0) // Try to recover stuck cells
       {
        if ((cell->bias > 0 && cell->sbias < 0) || (cell->bias < 0 && cell->sbias > 0)) lc = llc * 4;
         else lc = llc / 4;
       } else lc = llc;

      d = cell->sbias*lc + ic*cell->psbias; cell->bias += d; cell->psbias = d; cell->sbias  = 0;

      for (i = 0; i < MLP_CELL_MAXINPUTS; i ++)
       {
        d = cell->sws[i]*lc + ic*cell->psws[i];
        cell->weights[i] += d;
        cell->psws[i]     = d;
        cell->sws[i]      = 0;
       }

      cell->num_psws = cell->num_sws; cell->num_sws = 0; 
     }
   }

  return 0;
 }


/* **************************************************************************** */
/* *         Shake  net weights at random                                     * */
/* **************************************************************************** */
_INT ShakeNetWeights(_INT flags, float lc, p_mlp_data_type mlpd)
 {
  _INT  i, n;
  float w;
  mlp_cell_type * cell;
  p_mlp_net_type net = (p_mlp_net_type)mlpd->net;

  cell = &(net->cells[0]);
  for (n = 0; n < MLP_NET_NUMCELLS; n ++, cell ++)
   {
    if (flags == 0 && lc > 0)
     {
      w  = (float)(rand() % 10000)*0.0001;
      if ((rand() % 100) > 50) w *= -1.;

      cell->bias  *= 1.0 + w*lc;

      w  = (float)(rand() % 10000)*0.0001;
      if ((rand() % 100) > 50) w *= -1.;

      cell->bias  += w*lc x_UPCO_C;

      for (i = 0; i < MLP_CELL_MAXINPUTS; i ++)
       {
        w  = (float)(rand() % 10000)*0.0001;
        if ((rand() % 100) > 50) w *= -1.;

        cell->weights[i] *= 1 + w*lc;

        w  = (float)(rand() % 10000)*0.0001;
        if ((rand() % 100) > 50) w *= -1.;

        cell->weights[i] += w*lc x_UPCO_C;
       }
     }

    if (cell->bias >  MLP_MAX_INT_C) cell->bias = MLP_MAX_INT_C;
    if (cell->bias < -MLP_MAX_INT_C) cell->bias = -MLP_MAX_INT_C;

    for (i = 0; i < MLP_CELL_MAXINPUTS; i ++)
     {
      if (cell->weights[i] >  MLP_MAX_INT_C) cell->weights[i] = MLP_MAX_INT_C;
      if (cell->weights[i] < -MLP_MAX_INT_C) cell->weights[i] = -MLP_MAX_INT_C;
     }
   }

  return 0;
 }

/* **************************************************************************** */
/* *         Count some stats                                                 * */
/* **************************************************************************** */
_INT CountNetStats(_INT mode, p_mlp_data_type mlpd)
 {
  _INT i;
  p_mlp_net_type net = (p_mlp_net_type)mlpd->net;

  CountLayerStats(mode, 1, 0, MLP_NET_1L_NUMCELLS, mlpd);
  CountLayerStats(mode, 2, MLP_NET_1L_NUMCELLS, MLP_NET_2L_NUMCELLS, mlpd);
  CountLayerStats(mode, 3, MLP_NET_1L_NUMCELLS+MLP_NET_2L_NUMCELLS, MLP_NET_3L_NUMCELLS, mlpd);

  if (mode == 3)
   {
    for (i = 0; i < MLP_NET_NUMLAYERS; i ++)
     {
      net->layers[i].num_sum = 0; net->layers[i].sum_delt = 0;
     }
   }

  return 0;
 }

/* **************************************************************************** */
/* *       Gather some stats                                                  * */
/* **************************************************************************** */
_INT CountLayerStats(_INT mode, _INT layer_num, _INT layer_st, _INT layer_len, p_mlp_data_type mlpd)
 {
  _INT  n;
  float ret;
  float output;
  mlp_cell_type * cell;
  p_mlp_net_type net = (p_mlp_net_type)mlpd->net;

  cell = &(net->cells[layer_st]);

  switch (mode)
   {
    case 0:
     {
      for (n = 0; n < layer_len; n ++, cell ++) {cell->num_changes = 0; cell->prev_val = 0;}
      break;
     }

    case 1:
     {
      for (n = 0; n < layer_len; n ++, cell ++)
       {
        output = mlpd->signals[n+layer_st];
        if (cell->prev_val > 0.0)
         {
          if ((output > 0.2 && output < 0.8) || MLP_ABS(cell->prev_val - output) > 0.05)
            cell->num_changes ++;
         }
        cell->prev_val = output;
       }

       break;
      }

    case 2:
     {
      for (n = ret = 0; n < layer_len; n ++, cell ++)
       {
        for (_INT i = 0; i < MLP_CELL_MAXINPUTS; i ++) ret += MLP_ABS(cell->psws[i]);
        ret = ret / (float)MLP_CELL_MAXINPUTS;

        net->layers[layer_num].sum_delt += ret;
        net->layers[layer_num].num_sum  += cell->num_psws;
       }

      break;
     }
   }

  return 0;
 }

/* **************************************************************************** */
/* *         Save net to the given file                                       * */
/* **************************************************************************** */
_INT SaveNet(FILE * file, p_mlp_data_type mlpd)
 {
  _INT i, j;
  mlp_cell_type * cell;
  p_mlp_net_type net = (p_mlp_net_type)mlpd->net;

  fprintf(file, "%s %d %d %d %d ", net->id_str, net->num_layers, net->num_inputs, net->num_outputs, MLP_NET_NUMCELLS);

  for (i = 0; i < MLP_EXPTABL_SIZE; i ++) fprintf(file, "%f ", (float)net->exp_tabl[i] x_DNCO_S);

  cell = &(net->cells[0]);
  for (i = 0; i < MLP_NET_NUMCELLS; i ++, cell ++)
   {
    fprintf(file, "%d %f ", (_INT)cell->inp_ind, (float)cell->bias x_DNCO_C);
    for (j = 0; j < MLP_CELL_MAXINPUTS; j ++) fprintf(file, "%f ", (float)cell->weights[j] x_DNCO_C);
   }

  return 0;
err:
  return 1;
 }

/* **************************************************************************** */
/* *         Print net to a given file                                        * */
/* **************************************************************************** */
_INT DumpNet(FILE * file, p_mlp_data_type mlpd)
 {
  _INT i, j, n;
  mlp_cell_type * cell;
  p_mlp_net_type net = (p_mlp_net_type)mlpd->net;

  fprintf(file, "ID: %s\n", net->id_str);
  fprintf(file, "Num Layers:  %d\n", net->num_layers);
  fprintf(file, "Num Inputs:  %d\n", net->num_inputs);
  fprintf(file, "Num Outputs: %d\n", net->num_outputs);
  fprintf(file, "Assigned symbols: %s\n", MLP_NET_SYMCO);
  fprintf(file, "\n");

  cell = &(net->cells[0]);
  for (i = 0; i < MLP_NET_NUMCELLS; i ++, cell ++)
   {
    if (i == 0) {fprintf(file, "Layer 1. \n\n"); n = 0;}
    if (i == MLP_NET_1L_NUMCELLS) {fprintf(file, "Layer 2. \n\n"); n = MLP_NET_1L_NUMCELLS;}
    if (i == MLP_NET_1L_NUMCELLS+MLP_NET_2L_NUMCELLS) {fprintf(file, "Layer 3. \n\n"); n = MLP_NET_1L_NUMCELLS+MLP_NET_2L_NUMCELLS;}

    fprintf(file, "Cell %d\n", i-n);
    fprintf(file, "Inp index   %d\n", (int)cell->inp_ind);
    fprintf(file, "Bias:       %f\n", (float)cell->bias);
    fprintf(file, "Output:     %f\n", (float)mlpd->signals[i]);
    fprintf(file, "Error:      %f\n", (float)cell->err);
    fprintf(file, "Num Steps:  %f\n", (float)cell->num_sws);
    fprintf(file, "Num Changes %f\n", (float)cell->num_changes);
    fprintf(file, "Sbias:      %f\n", (float)cell->sbias);
    fprintf(file, "PSbias:     %f\n", (float)cell->psbias);
    fprintf(file, "Weights: \n");
    for (j = 0; j < MLP_CELL_MAXINPUTS; j ++)
     {
      fprintf(file, "%f ", (float)cell->weights[j]);
      if (j%8 == 7) fprintf(file, "\n");
     }
    fprintf(file, "\n");
    fprintf(file, "SWS: \n");
    for (j = 0; j < MLP_CELL_MAXINPUTS; j ++)
     {
      fprintf(file, "%f ", (float)cell->sws[j]);
      if (j%8 == 7) fprintf(file, "\n");
     }
    fprintf(file, "\n");
    fprintf(file, "PSWS: \n");
    for (j = 0; j < MLP_CELL_MAXINPUTS; j ++)
     {
      fprintf(file, "%f ", (float)cell->psws[j]);
      if (j%8 == 7) fprintf(file, "\n");
     }
    fprintf(file, "\n");
   }

  return 0;
 }
#endif // LEARN_MODE

/* **************************************************************************** */
/* **************************************************************************** */
/* **** Non - class functions ************************************************* */
/* **************************************************************************** */
/* **************************************************************************** */

ROM_DATA_EXTERNAL mlp_net_type img_snet_body;
/* *************************************************************************** */
/* *        Alloc or attach to mlp net                                       * */
/* *************************************************************************** */
_INT  InitSnnData(p_UCHAR name, p_mlp_data_type mlpd)
 {
#if MLP_PRELOAD_MODE
//  extern _ULONG   img_snet_body[];
//  p_VOID net = (p_VOID)(&img_snet_body[0]);
  mlpd->net = (p_VOID)(&img_snet_body);
#else
  static net_init = 0;
  static mlp_data_type gmlpd;
  _VOID  err_msg(_STR);

  if (net_init == 0)
   {
    if (LoadNetData(&gmlpd, (_STR)name))
     {
      err_msg("!Can't load mlp net!");
      net_init = 2;
     }
     else net_init = 1;
   }

  if (net_init != 1) goto err;
  mlpd->net = gmlpd.net;
#endif


  return 0;

#if !MLP_PRELOAD_MODE
err:
  return 1;
#endif
 }

#if PG_DEBUG
#include "pg_debug.h"
//#include "wg_stuff.h"
_INT  DrawCoeff(p_UCHAR syms, p_UCHAR w, _UCHAR * coeffs);
#endif
/* *************************************************************************** */
/* *        Head NN routine called from WS.C                                 * */
/* *************************************************************************** */
_INT GetSnnResults(p_UCHAR pCoeff, p_UCHAR answs, p_mlp_data_type mlpd)
 {
  _INT            i, j; //, n;
//  _UCHAR          inputs[MLP_NET_NUMINPUTS];
  _UCHAR          outputs[MLP_NET_NUMOUTPUTS];
  p_UCHAR         symco = (p_UCHAR)MLP_NET_SYMCO;
  mlp_net_type  * net = (p_mlp_net_type)mlpd->net;

  if (net == _NULL) goto err;

//  for (i = 0; i < MLP_NET_NUMINPUTS; i ++) inputs[i] = *(pCoeff+i);

  CountNetResult(pCoeff, outputs, mlpd);

  for (i = 0; i < MLP_NET_NUMOUTPUTS; i ++)
   {
    if ((j = outputs[i]) == 0) j = 1;
    answs[symco[i]] = (_UCHAR)j;
   }

#if PG_DEBUG
  if (mpr == -4) {DrawCoeff(symco, answs, pCoeff); brkeyw("\nPress a key");}
#endif

  return 0;
err:
  return 1;
 }

#if !MLP_PRELOAD_MODE
/* **************************************************************************** */
/* *         Load the net                                                     * */
/* **************************************************************************** */
_INT LoadNetData(p_mlp_data_type mlpd, _CHAR * net_name)
 {
  FILE * file;

//  if ((mlpd->net = HWRMemoryAlloc(sizeof(mlp_net_type))) == 0) goto err;
  mlpd->net = new mlp_net_type;
  if (mlpd->net == 0) goto err;

#if MLP_LEARN_MODE
  InitNet(0, mlpd);
#endif

  if (net_name) // Request to load net
   {
    if ((file = fopen(net_name, "rt")) == 0)
     {
      printf("Can't open net file: %s\n", net_name);
      goto err;
     }

    if (LoadNet(file, mlpd))
     {
      printf("Error loading net: %s\n", net_name);
     }

    fclose(file);
   }

  return 0;
err:
  return 1;
 }

/* **************************************************************************** */
/* *         Save the net                                                     * */
/* **************************************************************************** */
_INT SaveNetData(p_mlp_data_type mlpd, _CHAR * net_name, float e)
 {
  FILE * file;

  if ((file = fopen(net_name, "wt")) == 0)
   {
    printf("Can't create file for net: %s\n", net_name);
    goto err;
   }

#if MLP_LEARN_MODE
  SaveNet(file, mlpd);
#endif

  fprintf(file, "Mean Sq Err per sample: %f\n", e);
  fprintf(file, "Created by %s", MLP_ID_STR);

  fclose(file);

  return 0;
err:
  return 1;
 }

/* **************************************************************************** */
/* *         Dump the net                                                     * */
/* **************************************************************************** */
_INT DumpNetData(p_mlp_data_type mlpd, _CHAR * dmp_name, float e)
 {
  FILE * file;

  if ((file = fopen(dmp_name, "wt")) == 0)
   {
    printf("Can't create file for net: %s\n", dmp_name);
    goto err;
   }

#if MLP_LEARN_MODE
  DumpNet(file, mlpd);
#endif

  fprintf(file, "Mean Sq Err per sample: %f\n", e);
  fprintf(file, "Created by %s", MLP_ID_STR);

  fclose(file);

  return 0;
err:
  return 1;
 }
#endif // #if !MLP_PRELOAD_MODE

/* **************************************************************************** */
/* *        End OF all                                                        * */
/* **************************************************************************** */
//
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\lk_next.cpp ===
#ifndef LSTRIP

/* **************************************************************************/
/* The treatment of different end parts of the trajectory                   */
/* **************************************************************************/

#include "hwr_sys.h"
#include "ams_mg.h"
#include "lowlevel.h"
#include "lk_code.h"
#include "def.h"
#include "low_dbg.h"

#include "calcmacr.h"
#if PG_DEBUG
#include "pg_debug.h"
#endif

#define  MAX_DY_UPSTR_DEL_GU_NEAR_O_     20
#define  DX_TOO_CLOSE_IU_ID_TIP          15
#define  ADD_DX_FOR_CROSSING_TIPS        10
#define  DX_TIP_TOO_BIG                  20
#define  MAX_DY_CLOSE_CIRCLELIKE         ((_SHORT)const1.a1 + 3)

#define  NUM_POINTS_TO_O_GAMMA_CHANGE    20

ROM_DATA_EXTERNAL CONSTS  const1 ;

typedef struct
         {
           p_SPECL pCircle;
           p_SPECL _PTR pAfter;
           p_SPECL _PTR pBefore;
           p_low_type plow_data;
           p_UCHAR pheight_O;
           _UCHAR  fb_O;
           _UCHAR  numUUC;
           _UCHAR  numUDC;
         } NxtPrvCircle_type, _PTR pNxtPrvCircle_type;

_SHORT arcs_processing(p_low_type low_data);
_SHORT conv_sticks_to_arcs(p_low_type low_data);
_SHORT del_before_after_circles(p_low_type low_data);
_BOOL  check_inside_circle(p_SPECL circle,p_SPECL elem,p_low_type low_data);

_SHORT delete_CROSS_elements(p_low_type low_data);
_SHORT check_IUb_IDf_small(p_low_type low_data);
_SHORT check_before_circle(pNxtPrvCircle_type pNxtPrvCircle);
_SHORT change_circle_before(pNxtPrvCircle_type pNxtPrvCircle,_UCHAR height);
_SHORT change_and_del_before_circle(pNxtPrvCircle_type pNxtPrvCircle,
                                    _UCHAR height);
p_SPECL del_prv_and_shift(p_SPECL prv);
_BOOL UpElemBeforeCircle(pNxtPrvCircle_type pNxtPrvCircle,_UCHAR height);
_BOOL DnElemBeforeCircle(pNxtPrvCircle_type pNxtPrvCircle,_UCHAR height);
_BOOL IsTipBefore(pNxtPrvCircle_type pNxtPrvCircle);
_SHORT check_after_circle(pNxtPrvCircle_type pNxtPrvCircle);
_SHORT check_next_for_circle(pNxtPrvCircle_type pNxtPrvCircle);
_SHORT change_circle_after(pNxtPrvCircle_type pNxtPrvCircle,
                           _UCHAR fb,_UCHAR height);
_SHORT check_next_for_common(pNxtPrvCircle_type pNxtPrvCircle);
_SHORT check_next_for_special(pNxtPrvCircle_type pNxtPrvCircle);
_SHORT check_before_after_GU(pNxtPrvCircle_type pNxtPrvCircle);
_BOOL ins_third_elem_in_circle(p_SPECL cur,p_low_type low_data);
_VOID delete_UD_before_DDL(p_low_type low_data);
_VOID make_CDL_in_O_GU_f(p_SPECL cur,p_SPECL nxt,_UCHAR fb_O);
_BOOL Is_8(p_SHORT x,p_SHORT y,p_SPECL pGUs,p_SPECL pCircle);
_BOOL O_GU_To3Elements(pNxtPrvCircle_type pNxtPrvCircle);
#ifdef FOR_FRENCH
_VOID ChangeArcsInCircle(p_SPECL cur,p_low_type low_data);
#endif

_VOID prevent_arcs(p_low_type low_data);

_BOOL IsDx_Dy_in_arcs_OK(p_SPECL pArc,p_SPECL pTip,_INT dy_U_I,
                         p_SHORT x,p_SHORT y);
_BOOL IsDx_Dy_in_tips_OK(p_SPECL pIU_ID,p_SPECL pTip,_INT dyMidUpStr,
                         p_SHORT x,p_SHORT y);
_BOOL IsTipOK(p_SPECL pArc,p_SPECL pTip,p_SHORT x);
_INT  DyLimit(p_low_type low_data,p_SPECL pElem,p_SPECL pTip,
              p_SPECL prv,p_SPECL nxt,_INT dyMidUpStr);

/*********************************************************************/
    /* Parsing of different arcs on the ends: */

_SHORT lk_duga( low_type _PTR low_data )
{

  if(low_data->rc->rec_mode == RECM_FORMULA)
   prevent_arcs(low_data);
  arcs_processing(low_data);
  conv_sticks_to_arcs(low_data);
  del_before_after_circles(low_data);
  delete_CROSS_elements(low_data);
  check_IUb_IDf_small(low_data);
  delete_UD_before_DDL(low_data);

  DBG_print_end_seq_of_elem(low_data->specl);

  return SUCCESS;
} /***** end of lk_duga *****/

/****************************************************************************/
/*****                arcs parsing                                       ****/
/****************************************************************************/
_SHORT arcs_processing(low_type _PTR low_data)
{
 p_SPECL  specl = low_data->specl;     /*  The list of special points on */
                                       /* the trajectory                 */
 p_SHORT x=low_data->x,
         y=low_data->y;      /* x,y co-ordinates                 */
 p_SPECL cur,                /* index of the current element     */
         prv,                /*    of previous element           */
         nxt;                /*    of next element               */
 _INT    dyMidUpStr, dy_U_I;

  dyMidUpStr = ONE_THIRD(DY_STR); /* low_data->hght.y_MD_ - low_data->hght.y_UI_; */
  cur=specl;
  while ( cur != _NULL)
    {
     prv = cur->prev;
     nxt = cur->next;
     switch ( cur->code )
        {
        case _UU_:
                  /* if previous is BEG and tip */
                  if ( prv->mark == BEG                       &&
                       prv->code==_ID_                        &&
                       (dy_U_I=DyLimit(low_data,cur,prv,_NULL,
                                       nxt,dyMidUpStr))!=-1   &&
                       IsDx_Dy_in_arcs_OK(cur,prv,dy_U_I,x,y) &&
                       IsTipOK(cur,prv,x)
                     )
                     {                               /* delete arc          */
                       DelFromSPECLList (cur);
                       prv->attr= cur->attr;         /* position by arc     */
//                       if (x[prv->iend]<x[cur->iend])/* if BEG ison the left*/
                       if(CLOCKWISE(cur))
                          prv->code= _UUL_;        /* then it`s UUL       */
                       else
                          prv->code= _UUR_;        /*  otherwise  UUR     */
                       prv->iend= cur->iend;         /* put the end by arc  */
                       prv->ipoint0=cur->ipoint0;
                       goto NEXT_1;                  /* and go out          */
                     }
                                                     /*look the next elem. */
                  if ( nxt == _NULL )
                    break;
                  /* if next is END and tip */
                  if ( nxt->mark == END                         &&
                       nxt->code==_ID_                          &&
                       (dy_U_I=DyLimit(low_data,cur,nxt,prv,
                                       _NULL,dyMidUpStr))!=-1   &&
                       IsDx_Dy_in_arcs_OK(cur,nxt,dy_U_I,x,y)
                     )
                     {                               /* delete the arc      */
                       DelFromSPECLList (cur);
                       nxt->attr= cur->attr;         /* position by arc     */
//                       if (x[nxt->ibeg]<x[cur->ibeg])/* if it`s on the left */
                       if(COUNTERCLOCKWISE(cur))
                          nxt->code= _UUL_;       /* of arcs then it`s UUL*/
                       else
                          nxt->code= _UUR_;        /* otherwise   UUR     */
                       nxt->ibeg= cur->ibeg;         /* put the end by arc  */
                       nxt->ipoint0=cur->ipoint0;
                       goto NEXT_1;                  /* and go out          */
                     }
                  break;
        case _ID_:
                  /* if it`s BEG and it`s a stick */
                  {
                   _BOOL bIsPrv_IU_BEG=(prv->mark==BEG && prv->code==_IU_);
                   _BOOL bIsNxt_IU_END=(nxt!=_NULL && nxt->mark==END &&
                                        nxt->code==_IU_);

                   if(   bIsPrv_IU_BEG
                      &&
                         (      bIsNxt_IU_END
                             && cur->mark==BEG
                             && y[cur->ipoint0]-y[prv->ipoint0]<ONE_HALF(DY_STR)
                          ||
                                cur->mark!=END
                             && (dy_U_I=DyLimit(low_data,cur,prv,_NULL,
                                                nxt,dyMidUpStr))!=-1
                             && IsDx_Dy_in_tips_OK(cur,prv,dy_U_I,x,y)
                         )
                     )
                     {                               /* delete the stick    */
                       DelFromSPECLList (prv);
                       cur->mark=prv->mark;
                       if(cur->ipoint0 != UNDEF)
                        cur->ibeg= cur->ipoint0;     /* put the end by  cur */
                       cur->other|=(WAS_GLUED | prv->other);
                       /* set inside circle off */
                       cur->other &= (~INSIDE_CIRCLE);
                       goto NEXT_1;                  /* and go out          */
                     }

                   /* if it`s END and it`s a stick */
                   if(   bIsNxt_IU_END
                      &&
                         (      bIsPrv_IU_BEG
                             && cur->mark==END
                             && y[cur->ipoint0]-y[nxt->ipoint0]<ONE_HALF(DY_STR)
                          ||
                                cur->mark!=BEG
                             && (dy_U_I=DyLimit(low_data,cur,nxt,prv,
                                                _NULL,dyMidUpStr))!=-1
                             && IsDx_Dy_in_tips_OK(cur,nxt,dy_U_I,x,y)
                         )
                     )
                     {                               /* delete the stick    */
                       DelFromSPECLList (nxt);
                       cur->mark=nxt->mark;
                       if(cur->ipoint0 != UNDEF)
                        cur->iend= cur->ipoint0;     /* put the end by  cur */
                       cur->other|=(WAS_GLUED | nxt->other);
                       /* set inside circle off */
                       cur->other &= (~INSIDE_CIRCLE);
                       goto NEXT_1;                  /*and go out           */
                     }
                   break;
                  }
        case _IU_:
                  /* if it`s BEG and it`s a stick */
                  {
                   _BOOL bIsPrv_ID_BEG=(prv->mark==BEG && prv->code==_ID_);
                   _BOOL bIsNxt_ID_END=(nxt!=_NULL && nxt->mark==END &&
                                        nxt->code==_ID_);

                   if(   bIsPrv_ID_BEG
                      &&
                         (     bIsNxt_ID_END
                            && cur->mark==BEG
                            && y[prv->ipoint0]-y[cur->ipoint0]<ONE_HALF(DY_STR)
                          ||
                               cur->mark!=END
                            && (dy_U_I=DyLimit(low_data,cur,prv,_NULL,
                                               nxt,dyMidUpStr))!=-1
                            && IsDx_Dy_in_tips_OK(cur,prv,dy_U_I,x,y)
                         )
                     )
                     {                               /* delete the stick    */
                       DelFromSPECLList (prv);
                       cur->mark=prv->mark;
                       if(cur->ipoint0 != UNDEF)
                        cur->ibeg= cur->ipoint0;     /* put the end by  cur */
                       cur->other|=(WAS_GLUED | prv->other);
                       /* set inside circle off */
                       cur->other &= (~INSIDE_CIRCLE);
                       goto NEXT_1;                  /* and go out          */
                     }

                   /* if it`s END and it`s a stick */
                   if(   bIsNxt_ID_END
                      &&
                         (      bIsPrv_ID_BEG
                             && cur->mark==END
                             && y[nxt->ipoint0]-y[cur->ipoint0]<ONE_HALF(DY_STR)
                          ||
                                cur->mark!=BEG
                             && (dy_U_I=DyLimit(low_data,cur,nxt,prv,
                                                _NULL,dyMidUpStr))!=-1
                             && IsDx_Dy_in_tips_OK(cur,nxt,dy_U_I,x,y)
                         )
                     )
                     {                               /* delete the stick    */
                       DelFromSPECLList (nxt);
                       cur->mark=nxt->mark;
                       if(cur->ipoint0 != UNDEF)
                        cur->iend= cur->ipoint0;     /* put the end by  cur */
                       cur->other|=(WAS_GLUED | nxt->other);
                       /* set inside circle off */
                       cur->other &= (~INSIDE_CIRCLE);
                       goto NEXT_1;                  /*and go out           */
                     }
                   break;
                  }
        case _UD_:
                  /* if previous is BEG and tip */
                  if ( prv->mark == BEG                       &&
                       prv->code==_IU_                        &&
                       (dy_U_I=DyLimit(low_data,cur,prv,_NULL,
                                       nxt,dyMidUpStr))!=-1   &&
                       IsDx_Dy_in_arcs_OK(cur,prv,dy_U_I,x,y)
                     )
                     {                               /* delete the arc      */
                       DelFromSPECLList (cur);
                       prv->attr= cur->attr;         /* position by arc     */
//                       if (x[prv->iend]<x[cur->iend])/*if BEG is on the left*/
                       if(COUNTERCLOCKWISE(cur))
                          prv->code= _UDL_;        /* then it`s   UDL     */
                       else
                          prv->code= _UDR_;        /*   otherwise UDR     */
                       prv->iend= cur->iend;         /* put the end by arc  */
                       prv->ipoint0=cur->ipoint0;
                       goto NEXT_1;                  /* and go out          */
                     }
                                                      /*look the next elem. */
                  if ( nxt == _NULL )  /*CHE: here (nxt == cur->next) */
                    break;
                  /* if next is END and tip */
                  if ( nxt->mark == END                         &&
                       nxt->code==_IU_                          &&
                       (dy_U_I=DyLimit(low_data,cur,nxt,prv,
                                       _NULL,dyMidUpStr))!=-1   &&
                       IsDx_Dy_in_arcs_OK(cur,nxt,dy_U_I,x,y)
                     )
                     {                               /* delete the arc      */
                       DelFromSPECLList (cur);
                       nxt->attr= cur->attr;         /* position by arc     */
//                       if (x[nxt->ibeg]<x[cur->ibeg])/* if it`s on the left */
                       if(CLOCKWISE(cur))
                          nxt->code= _UDL_;       /* of arcs then it`s UDL*/
                       else
                          nxt->code= _UDR_;        /* otherwise UDR       */
                       nxt->ibeg= cur->ibeg;       /* put the end by the arc*/
                       nxt->ipoint0=cur->ipoint0;
                       goto NEXT_1;                  /* and go out          */
                     }
                  break;
        case _DUR_:
                  if(cur->ipoint1 != UNDEF)
                   cur->ibeg=cur->ipoint1;
                  break;
        case _DUL_:
        case _DDL_:
                  if(cur->ipoint1 != UNDEF)
                   cur->iend=cur->ipoint1;
                  break;
        }
     NEXT_1: cur = cur->next;
    }
#if PG_DEBUG
if(mpr==6) brkeyw("\nI'm waiting");
#endif

  return SUCCESS;
} /***** end of arcs_processing *****/

/****************************************************************************/
/***** This program measures dy and dx between arc and tip               ****/
/****************************************************************************/
_BOOL IsDx_Dy_in_arcs_OK(p_SPECL pArc,p_SPECL pTip,_INT dy_U_I,
                         p_SHORT x,p_SHORT y)
{
  _INT dy=y[pTip->ipoint0]-y[pArc->ipoint0];
  _INT dx_tip=x[pTip->iend]-x[pTip->ibeg];
  _INT dx_arc=x[pArc->iend]-x[pArc->ibeg];

  return(HWRAbs(dy)<=dy_U_I && HWRAbs(dx_tip)<HWRAbs(dx_arc));

} /* end of IsDx_Dy_in_arcs_OK */

/****************************************************************************/
/***** This program measures dy and dx between two tips                  ****/
/****************************************************************************/
_BOOL IsDx_Dy_in_tips_OK(p_SPECL pIU_ID,p_SPECL pTip,_INT dyMidUpStr,
                         p_SHORT x,p_SHORT y)
{
  _INT iRefTip=pTip->ipoint0;
  _INT iRefIU_ID=pIU_ID->ipoint0;
  _INT dy=y[iRefTip]-y[iRefIU_ID];
  _INT dx=x[iRefTip]-x[iRefIU_ID];
  _INT DxTip=x[pTip->iend]-x[pTip->ibeg];
  _INT DxTooClose_IU_ID_Tip=DX_TOO_CLOSE_IU_ID_TIP;
  _BOOL  bret;

  if(HEIGHT_OF(pIU_ID)<=_US2_ || HEIGHT_OF(pTip)<=_US2_)
   {
     dyMidUpStr=THREE_HALF(dyMidUpStr);
     DxTooClose_IU_ID_Tip=THREE_HALF(DxTooClose_IU_ID_Tip);
   }
  if(CrossInTime(pIU_ID,pTip) || (pIU_ID->other & WAS_INSIDE_STICK))
   DxTooClose_IU_ID_Tip+=ADD_DX_FOR_CROSSING_TIPS;

  bret=HWRAbs(dy)<dyMidUpStr           &&
       HWRAbs(dx)<DxTooClose_IU_ID_Tip &&
       HWRAbs(DxTip)<DX_TIP_TOO_BIG;

  return(bret);

} /* end of IsDx_Dy_in_tips_OK */

/****************************************************************************/
/***** This program checks relative position of tip and arc              ****/
/****************************************************************************/
#define MIN_LENGTH_TIP_TO_BE_ALONE 20
_BOOL IsTipOK(p_SPECL pArc,p_SPECL pTip,p_SHORT x)
{
 _BOOL bret=_TRUE;
 _BOOL bIsTipOnWrongSide=COUNTERCLOCKWISE(pArc)      &&
//                         x[pArc->iend]>x[pTip->ibeg] &&
                         x[pTip->iend]-x[pTip->ibeg]>=MIN_LENGTH_TIP_TO_BE_ALONE;
 _BOOL bWasTipGlued=(pTip->other & WAS_GLUED) &&
                    CLOCKWISE(pArc);

  if(bIsTipOnWrongSide || bWasTipGlued)
   bret=_FALSE;

 return(bret);

} /* end of IsTip_on_right_side */

/****************************************************************************/
/***** This program determines dy limit between tip and arc (or IU_ID)   ****/
/****************************************************************************/
#define DLT_HEIGHTS 3
_INT DyLimit(p_low_type low_data,p_SPECL pElem,p_SPECL pTip,
             p_SPECL prv,p_SPECL nxt,_INT dyMidUpStr)
{
 p_SHORT y=low_data->y;                /* y co-ordinates               */
 _INT    DyLim=dyMidUpStr,
         yEl=y[pElem->ipoint0],
         yOp,
         yTip=y[pTip->ipoint0];
 p_SPECL pOpposite=_NULL;
 _UCHAR  HeightEl=HEIGHT_OF(pElem),
         HeightOp;
 _BOOL   bIsU=(pElem->code==_UU_ || pElem->code==_IU_);

 if(prv!=_NULL)
  {
    pOpposite=prv;
    while(pOpposite!=_NULL && !IsAnyBreak(pOpposite) &&
          (bIsU && !IsLowerElem(pOpposite) ||
           !bIsU && !IsUpperElem(pOpposite)
          )
         )
     pOpposite=pOpposite->prev;
  }
 else if(nxt!=_NULL)
  {
    pOpposite=nxt;
    while(pOpposite!=_NULL && !IsAnyBreak(pOpposite) &&
          (bIsU && !IsLowerElem(pOpposite) ||
           !bIsU && !IsUpperElem(pOpposite)
          )
         )
     pOpposite=pOpposite->next;
  }
 if(pOpposite!=_NULL && !IsAnyBreak(pOpposite))
  {
    _INT iMidOp=pOpposite->ipoint0>0 ? pOpposite->ipoint0 : MID_POINT(pOpposite);
    yOp=y[iMidOp];
    HeightOp=HEIGHT_OF(pOpposite);
    if(HWRAbs(HeightEl-HeightOp)>DLT_HEIGHTS ||
       HeightOp>=_DS1_ || HeightOp<=_US2_)
     {
       DyLim=ONE_FOURTH(HWRAbs(yEl-yOp));
       if(DyLim<dyMidUpStr)
        DyLim=dyMidUpStr;
     }
    else /* special case for a, when _UU_ at the bottom of baseline */
     if((pElem->code==_UU_ || pElem->code==_IU_)          &&
        CLOCKWISE(pElem)                                  &&
        (pOpposite->code==_UD_ || pOpposite->code==_UDC_) &&
        COUNTERCLOCKWISE(pOpposite)                       &&
        pTip->mark==END                                   &&
        HeightEl>=_MD_                                    &&
        HeightEl<=_DI2_                                   &&
        (yOp-yEl)<=TWO(yTip-yEl)                          &&
        (pElem->ipoint0-iMidOp)<=
        TWO(pTip->ipoint0-pElem->ipoint0)
       )
      DyLim=-1;
  }

 return DyLim;

} /* end of DyLimit */

/****************************************************************************/
/***** Convert long sticks into arcs                                     ****/
/****************************************************************************/
#define  MIN_POINTS_STICK_TO_ARC          5
#define  MIN_POINTS_STICK_TO_ARC_FOR_SURE 9
#define  MIN_COS_SLOPE_STICK_TO_ARC      85
#define  MIN_DX_TIP_IN_NUMBERS_TO_ARC    12
#define  MIN_DX_IU_STICK_TO_ARC          15
#define  CURV_TO_BE_ARC                  20

_SHORT conv_sticks_to_arcs(low_type _PTR low_data)
{
 p_SPECL  specl = low_data->specl;     /*  The list of special points on */
                                       /* the trajectory                 */
 p_SHORT x=low_data->x,
         y=low_data->y;                /* x,y co-ordinates               */
 p_SPECL cur;                          /* index of the current element   */
 _LONG coss;                           /*  angle cos                     */
 _INT  MinPointsStickToArc=MIN_POINTS_STICK_TO_ARC;
 _BOOL bNumPresent=_FALSE; //(low_data->rc->lmod_border_used == LMOD_BORDER_NUMBER);

#if  0
 _BOOL bSepLet=(low_data->rc->low_mode & LMOD_SEPARATE_LET);

  if(bNumPresent)
   MinPointsStickToArc=ONE_HALF(MinPointsStickToArc);
  else if(bSepLet)
   MinPointsStickToArc=TWO_THIRD(MinPointsStickToArc);
#endif  /*0*/

  cur=specl;                                       /* go on the list       */
  while ( cur != _NULL )
    {
      /* search for the beginning tips to convert them into arcs */
      if(   cur->mark == BEG
         && (cur->other & WAS_GLUED)==0
         && (cur->other & WAS_STICK_OR_CROSS)==0
        )
        switch ( (_SHORT) cur->code )
         {
          case _IU_:
                 { _INT ibeg=cur->ibeg,
                        iend=cur->iend,
                        CurRefPoint=(cur->other & WAS_INSIDE_STICK) ?
                                    MID_POINT(cur) : ibeg,
                        dx=x[CurRefPoint]-x[iend];
                 if(dx<0 &&
                    (!bNumPresent || HWRAbs(dx)>MIN_DX_TIP_IN_NUMBERS_TO_ARC)
                   )
                  {
                    if((iend-ibeg)>=MinPointsStickToArc)
                     {
                       _BOOL bSure=iend-ibeg>MIN_POINTS_STICK_TO_ARC_FOR_SURE;
                       if(!bSure)
                        {
                          _INT NxtXrRefPoint=(cur->next)->ipoint0,
                               curv;
                          if(NxtXrRefPoint==0 || NxtXrRefPoint==UNDEF)
                           NxtXrRefPoint=MID_POINT(cur->next);
                          curv=CurvMeasure(x,y,CurRefPoint,NxtXrRefPoint,-1);
                          #if PG_DEBUG
                          if(mpr==6)
                           printw("\n curv=%d",curv);
                          #endif /* PG_DEBUG */
                          if(HWRAbs(curv)>CURV_TO_BE_ARC)
                           bSure=_TRUE;
                        }
                       if(bSure)
                        {
                          coss=cos_horizline(ibeg,iend,x,y);
                          if(HWRAbs((_SHORT)coss)>=MIN_COS_SLOPE_STICK_TO_ARC)
                           {
                             _INT iXmin=ixMin(cur->ibeg,cur->iend,x,y);
                             if(iXmin!=-1)
                              cur->ibeg=cur->ipoint0=(_SHORT)iXmin;
                             cur->code=_UUL_;
                             SetNewAttr (cur,MidPointHeight(cur,low_data),_f_);
                             DBG_BlinkShowElemEQ6(cur,x,y,"   cos=%d%%",coss);
                           }
                        }
                     }
                  }
                 else
                    if(dx>=MIN_DX_IU_STICK_TO_ARC)
                     {
                       _INT iXmax=ixMax(cur->ibeg,cur->iend,x,y);
                       if(iXmax!=-1)
                        cur->ibeg=cur->ipoint0=(_SHORT)iXmax;
                       cur->code=_UUR_;
                       SetNewAttr (cur,MidPointHeight(cur,low_data),_b_);
                       DBG_BlinkShowElemEQ6(cur,x,y,_NULL,0);
                     }
                 break;
                 }
          case _ID_:
                 { _INT ibeg=cur->ibeg,
                        iend=cur->iend,
                        CurRefPoint=(cur->other & WAS_INSIDE_STICK) ?
                                    MID_POINT(cur) : ibeg,
                        dx=x[CurRefPoint]-x[iend];
                 if(iend-ibeg>=MinPointsStickToArc &&
                    (!bNumPresent || HWRAbs(dx)>MIN_DX_TIP_IN_NUMBERS_TO_ARC)
                   )
                  {
                    _BOOL bSure=iend-ibeg>MIN_POINTS_STICK_TO_ARC_FOR_SURE;
                    if(!bSure)
                     {
                       _INT NxtXrRefPoint=(cur->next)->ipoint0,
                            curv;
                       if(NxtXrRefPoint==0 || NxtXrRefPoint==UNDEF)
                        NxtXrRefPoint=MID_POINT(cur->next);
                       curv=CurvMeasure(x,y,CurRefPoint,NxtXrRefPoint,-1);
                       #if PG_DEBUG
                       if(mpr==6)
                        printw("\n curv=%d",curv);
                       #endif /* PG_DEBUG */
                       if(HWRAbs(curv)>CURV_TO_BE_ARC)
                        bSure=_TRUE;
                     }
                    if(bSure)
                     {
                       coss=cos_horizline(ibeg,iend,x,y);
                       if(HWRAbs((_SHORT)coss)>=MIN_COS_SLOPE_STICK_TO_ARC)
                        {
                          if(dx<0)
                           {
                             _INT iXmin=ixMin(cur->ibeg,cur->iend,x,y);
                             if(iXmin!=-1)
                              cur->ibeg=cur->ipoint0=(_SHORT)iXmin;
                             cur->code=_UDL_;
                             SetNewAttr (cur,MidPointHeight(cur,low_data),_b_);
                           }
                          else
                           {
                             _INT iXmax=ixMax(cur->ibeg,cur->iend,x,y);
                             if(iXmax!=-1)
                              cur->ibeg=cur->ipoint0=(_SHORT)iXmax;
                             cur->code=_UDR_;
                             SetNewAttr (cur,MidPointHeight(cur,low_data),_f_);
                           }
                          DBG_BlinkShowElemEQ6(cur,x,y,"   cos=%d%%",coss);
                          break;
                        }
                     }
                  }
                 cur->code=_ID_;
                 break;
                 }
         }
      /* search for the ending tips to convert them into arcs */
      else
       if(   cur->mark == END
          && (cur->other & WAS_GLUED)==0
          && (cur->other & WAS_STICK_OR_CROSS)==0
         )
        switch ( (_SHORT) cur->code )
         {
          case _IU_:
                 { _INT ibeg=cur->ibeg,
                        iend=cur->iend,
                        CurRefPoint=(cur->other & WAS_INSIDE_STICK) ?
                                    MID_POINT(cur) : iend,
                        dx=x[ibeg]-x[CurRefPoint];
                 if(iend-ibeg>=MinPointsStickToArc &&
                    (!bNumPresent || HWRAbs(dx)>MIN_DX_TIP_IN_NUMBERS_TO_ARC)
                   )
                  {
                    _BOOL bSure=iend-ibeg>MIN_POINTS_STICK_TO_ARC_FOR_SURE;
                    if(!bSure)
                     {
                       _INT PrvXrRefPoint=(cur->prev)->ipoint0,
                            curv;
                       if(PrvXrRefPoint==0 || PrvXrRefPoint==UNDEF)
                        PrvXrRefPoint=MID_POINT(cur->prev);
                       curv=CurvMeasure(x,y,PrvXrRefPoint,CurRefPoint,-1);
                       #if PG_DEBUG
                       if(mpr==6)
                        printw("\n curv=%d",curv);
                       #endif /* PG_DEBUG */
                       if(HWRAbs(curv)>CURV_TO_BE_ARC)
                        bSure=_TRUE;
                     }
                    if(bSure)
                     {
                       coss=cos_horizline(ibeg,iend,x,y);
                       if(HWRAbs((_SHORT)coss)>=MIN_COS_SLOPE_STICK_TO_ARC)
                        {
                          if(dx<0)
                           {
                             _INT iXmax=ixMax(cur->ibeg,cur->iend,x,y);
                             if(iXmax!=-1)
                              cur->iend=cur->ipoint0=(_SHORT)iXmax;
                             cur->code=_UUR_;
                             SetNewAttr (cur,MidPointHeight(cur,low_data),_f_);
                           }
                          else
                           {
                             _INT iXmin=ixMin(cur->ibeg,cur->iend,x,y);
                             if(iXmin!=-1)
                              cur->iend=cur->ipoint0=(_SHORT)iXmin;
                             cur->code=_UUL_;
                             SetNewAttr (cur,MidPointHeight(cur,low_data),_b_);
                           }
                          DBG_BlinkShowElemEQ6(cur,x,y,"   cos=%d%%",coss);
                          break;
                        }
                     }
                  }
                 cur->code=_IU_;
                 break;
                 }
          case _ID_:
                 { _INT ibeg=cur->ibeg,
                        iend=cur->iend,
                        CurRefPoint=(cur->other & WAS_INSIDE_STICK) ?
                                    MID_POINT(cur) : iend,
                        dx=x[ibeg]-x[CurRefPoint];
                 if(iend-ibeg>=MinPointsStickToArc &&
                    (!bNumPresent || HWRAbs(dx)>MIN_DX_TIP_IN_NUMBERS_TO_ARC)
                   )
                  {
                    _BOOL bSure=iend-ibeg>MIN_POINTS_STICK_TO_ARC_FOR_SURE;
                    if(!bSure)
                     {
                       _INT PrvXrRefPoint=(cur->prev)->ipoint0,
                            curv;
                       if(PrvXrRefPoint==0 || PrvXrRefPoint==UNDEF)
                        PrvXrRefPoint=MID_POINT(cur->prev);
                       curv=CurvMeasure(x,y,PrvXrRefPoint,CurRefPoint,-1);
                       #if PG_DEBUG
                       if(mpr==6)
                        printw("\n curv=%d",curv);
                       #endif /* PG_DEBUG */
                       if(HWRAbs(curv)>CURV_TO_BE_ARC)
                        bSure=_TRUE;
                     }
                    if(bSure)
                     {
                       coss=cos_horizline(ibeg,iend,x,y);
                       if(HWRAbs((_SHORT)coss)>=MIN_COS_SLOPE_STICK_TO_ARC)
                        {
                          if(dx<0)
                           {
                             _INT iXmax=ixMax(cur->ibeg,cur->iend,x,y);
                             if(iXmax!=-1)
                              cur->iend=cur->ipoint0=(_SHORT)iXmax;
                             cur->code=_UDR_;
                             SetNewAttr (cur,MidPointHeight(cur,low_data),_b_);
                           }
                          else
                           {
                             _INT iXmin=ixMin(cur->ibeg,cur->iend,x,y);
                             if(iXmin!=-1)
                              cur->iend=cur->ipoint0=(_SHORT)iXmin;
                             cur->code=_UDL_;
                             SetNewAttr (cur,MidPointHeight(cur,low_data),_f_);
                           }
                          DBG_BlinkShowElemEQ6(cur,x,y,"   cos=%d%%",coss);
                          break;
                        }
                     }
                  }
                 cur->code=_ID_;
                 break;
                 }
         }
      cur=cur->next;
    }

  return SUCCESS;
} /***** end of conv_sticks_to_arcs *****/

/****************************************************************************/
/***** This program prohibits little arcs in Formula's mode              ****/
/****************************************************************************/
#define DX_ARC_TO_BE_LITTLE_IN_FORMULA 20

_VOID prevent_arcs(p_low_type low_data)
{
  p_SPECL cur=low_data->specl;

  while(cur!=_NULL)
   {
     if((cur->mark==BEG  || cur->mark==END)  &&
        (cur->code==_IU_ || cur->code==_ID_)    ||
        (cur->code==_UU_ && cur->mark==MINW)    ||
        (cur->code==_UD_ && cur->mark==MAXW)
       )
      {
        p_SHORT x=low_data->x;
        _INT    dx=HWRAbs(x[cur->ibeg]-x[cur->iend]);
        if(dx<DX_ARC_TO_BE_LITTLE_IN_FORMULA)
         {
           cur->other=1;
           if(cur->code==_UU_)
            cur->code=_IU_;
           if(cur->code==_UD_)
            cur->code=_ID_;
         }
      }
     cur=cur->next;
   }

} /* prevent_arcs */

/*==========================================================================*/
/*==========================================================================*/
/*====            delete elements before and after circles               ===*/
/*==========================================================================*/
/*==========================================================================*/
_SHORT del_before_after_circles(p_low_type low_data)
{
 p_SPECL  specl = low_data->specl;     /*  The list of special points on */
                                       /* the trajectory                 */
#if PG_DEBUG
 p_SHORT  x=low_data->x;               /*  x - co-ordinates              */
 p_SHORT  y=low_data->y;               /*  y - co-ordinates              */
#endif
 p_SPECL  cur,                         /* the index on current element   */
          prv,                         /*           on previous element  */
          nxt;                         /*           on next element      */
 _UCHAR fb_O;                          /* round of circle direction      */
 _UCHAR height_O;                      /* the height                     */
 _INT   i;
 NxtPrvCircle_type NxtPrvCircle;

 HWRMemSet((p_VOID)&NxtPrvCircle,0,sizeof(NxtPrvCircle_type));
 cur=specl;
 while(cur != _NULL)
   {
     /* if it`s crossing     */
     if(cur->mark == CROSS && !Is_IU_or_ID(cur) &&
        cur->code!=_CUR_ && cur->code!=_CUL_)
      {
        DBG_BlinkShowElemGT5(cur,x,y,COLORC);
        prv=cur->prev; nxt=cur->next;
        NxtPrvCircle.numUUC=0;
        NxtPrvCircle.numUDC=0;
        while(prv->other & INSIDE_CIRCLE)
         {
           if(prv->code==_UUC_)
            NxtPrvCircle.numUUC++;
           else if(prv->code==_UDC_)
            NxtPrvCircle.numUDC++;
           prv=prv->prev;
         }
        if((cur->code==_O_ || cur->code==_GD_) && COUNTERCLOCKWISE(cur) &&
           ((prv->next)->code==_IU_ || (prv->next)->code==_UU_)
          )
         prv=prv->next;    
        while(nxt!=_NULL && (nxt->other & INSIDE_CIRCLE) && nxt->ibeg<cur->iend)
         nxt=nxt->next;
        height_O = HEIGHT_OF(cur);
        fb_O = CIRCLE_DIR(cur);
        NxtPrvCircle.pCircle=cur;
        NxtPrvCircle.pAfter=&nxt;
        NxtPrvCircle.pBefore=&prv;
        NxtPrvCircle.pheight_O=&height_O;
        NxtPrvCircle.fb_O=fb_O;
        NxtPrvCircle.plow_data=low_data;

        switch((_SHORT)cur->code)
         {
           case _O_:
           case _GD_:
                 if((cur->other & WAS_CONVERTED_FROM_GU) &&
                    O_GU_To3Elements(&NxtPrvCircle)
                   )
                  goto NXT;
                 check_before_circle(&NxtPrvCircle);
                 check_after_circle(&NxtPrvCircle);
                 break;
           case _GU_:
                 if(O_GU_To3Elements(&NxtPrvCircle))
                  goto NXT;
                 check_before_after_GU(&NxtPrvCircle);
                 break;
           case _GUs_:
           case _GDs_:
           case _Gr_:
           case _Gl_:
                 break;
         }
        prv=*(NxtPrvCircle.pBefore);
        nxt=*(NxtPrvCircle.pAfter);
        height_O=*(NxtPrvCircle.pheight_O);
        /* if the tip is before circle and it's break before it, */
        /* then delete the tip */
        if(IsTipBefore(&NxtPrvCircle) &&
           (MID_POINT(prv)>=cur->ibeg ||
            check_inside_circle(cur,prv,low_data)
           )
          )
         DelFromSPECLList(prv);
        if(nxt!=_NULL)
         {
           i=MID_POINT(nxt);
           if(cur->code==_GU_ ||
              IsAnyGsmall(cur))
            i=(nxt->ibeg+3*nxt->iend)/4;
           /* if the tip is after circle and it's following by break, */
           /* then delete the tip */
           if((Is_IU_or_ID(nxt) ||
               IsAnyArcWithTail(nxt)
              )                             &&
              (nxt->other & DONT_DELETE)==0 &&
              NULL_or_ZZ_after(nxt)         &&
              cur->code!=_GU_         &&
              cur->code!=_GD_         &&
              (cur->iend>=i ||
               check_inside_circle(cur,nxt,low_data)
              )
             )
            DelFromSPECLList(nxt);
         }
      }
NXT: cur=cur->next;
   }

return SUCCESS;
}  /***** end of del_before_after_circles *****/

/*==========================================================================*/
/*====  check the place of element: inside the circle or not             ===*/
/*==========================================================================*/
_BOOL check_inside_circle(p_SPECL circle, p_SPECL elem,
                          low_type _PTR low_data)
{
 p_SHORT x=low_data->x,
         y=low_data->y;  /* x, y - co-ordinates */
 _RECT   boxCircle, boxElem;
 _INT    ibeg,iend,NumPntsInCrossing;
 _SHORT  position;
 _BOOL   bret = _FALSE;

 if(circle==_NULL || elem==_NULL)
  goto ret;
 if(circle->code!=_O_)
  {
    size_cross(circle->ibeg,circle->iend,x,y,&boxCircle);
    size_cross(elem->ibeg,elem->iend,x,y,&boxElem);
    if(boxCircle.left<=boxElem.left && boxCircle.right >=boxElem.right &&
       boxCircle.top <=boxElem.top  && boxCircle.bottom> boxElem.bottom)
     bret=_TRUE;
    goto ret;
  }
 ibeg=MID_POINT(circle+1);
 iend=MEAN_OF(circle->ipoint1,circle->iend);
 NumPntsInCrossing=iend-ibeg+1;
#if PG_DEBUG
 if(mpr>=7 && mpr<MAX_GIT_MPR)
  {
    _RECT box;
    _INT iPoint=MID_POINT(elem);
    GetTraceBox(x,y,(_SHORT)iPoint,(_SHORT)iPoint,&box);
    box.left--; box.right++; box.top--; box.bottom++;
    dbgAddBox(box, EGA_BLACK, EGA_WHITE, SOLID_LINE);
    draw_arc(EGA_BLUE,x,y,(_SHORT)ibeg,(_SHORT)iend);
    brkeyw("\nI'm waiting...");
  }
#endif /* PG_DEBUG */
 if(IsPointInsideArea(&x[ibeg],&y[ibeg],NumPntsInCrossing,
                      x[MID_POINT(elem)],y[MID_POINT(elem)],&position)==UNSUCCESS)
   goto ret;
#if PG_DEBUG
 if(mpr>=7 && mpr<MAX_GIT_MPR)
  {
    p_CHAR pos[3]={"Point on border","Point Inside","Point outside"};
    printw("\n position=%s",pos[position]);
  }
#endif /* PG_DEBUG */
 if(position==POINT_ON_BORDER || position==POINT_INSIDE)
  bret=_TRUE;

ret:
 return bret;

}  /***** end of check_inside_circle *****/

/*==========================================================================*/
/*====  This program deletes CROSS - elements                            ===*/
/*==========================================================================*/
_SHORT delete_CROSS_elements(p_low_type low_data)
{
 p_SPECL cur=low_data->specl;

 while(cur!=_NULL)
  {
    if(cur->code==_O_ || cur->code==_GU_ && CLOCKWISE(cur) ||
       cur->code==_GD_ && COUNTERCLOCKWISE(cur))
     {
#ifdef FOR_FRENCH
       if(cur->code==_O_ && COUNTERCLOCKWISE(cur) &&
          cur->next != _NULL &&
          cur->prev != low_data->specl)
        ChangeArcsInCircle(cur,low_data);
#endif
       if(!ins_third_elem_in_circle(cur,low_data))
        DelFromSPECLList(cur);
     }
    cur=cur->next;
  }

 return SUCCESS;

} /* end of delete_CROSS_elements */

/*==========================================================================*/
/*====  This program changes arcs codes in "two-turn" circle             ===*/
/*==========================================================================*/
#ifdef FOR_FRENCH
_VOID ChangeArcsInCircle(p_SPECL cur,p_low_type low_data)
{
 p_SHORT x=low_data->x,
         y=low_data->y;
 p_SPECL prv=cur->prev,
         nxt=cur->next,
         pToChange=prv->prev;
 _RECT RpToChange,Rnxt,R1stCross,R2ndCross;

 GetTraceBox(x,y,nxt->ibeg,nxt->iend,&Rnxt);
 GetTraceBox(x,y,pToChange->ibeg,pToChange->iend,&RpToChange);
 GetTraceBox(x,y,cur->ipoint1,cur->iend,&R1stCross);
 GetTraceBox(x,y,(cur+1)->ibeg,(cur+1)->iend,&R2ndCross);
 if(prv->code==_UUC_                                  &&
    COUNTERCLOCKWISE(prv)                             &&
    CrossInTime(prv,cur)                              &&
    (nxt->code==_UD_ || nxt->code==_UDC_)             &&
    COUNTERCLOCKWISE(nxt)                             &&
    CrossInTime(nxt,cur)                              &&
    (pToChange->code==_UD_ || pToChange->code==_UDC_) &&
    COUNTERCLOCKWISE(pToChange)                       &&
    CrossInTime(pToChange,cur)                        &&
    (y[pToChange->ipoint0]-y[nxt->ipoint0]<DY_STR/2)  &&
    (xHardOverlapRect(&Rnxt,&RpToChange,!STRICT_OVERLAP) ||
     xHardOverlapRect(&R1stCross,&Rnxt,STRICT_OVERLAP) /* &&
     xHardOverlapRect(&R2ndCross,&RpToChange,!STRICT_OVERLAP) */
    )
   )
  {
    p_SPECL pMayBeYxo=pToChange->prev;
    if(   (   pMayBeYxo->code==_IU_
           || pMayBeYxo->code==_CUR_
           || pMayBeYxo->code==_UUC_
          )
       &&
          CrossInTime(pMayBeYxo,cur)
      )
     DelThisAndNextFromSPECLList(pMayBeYxo);
    else
     pToChange->code=_UD_;
    nxt->code=_UDC_;
    ASSIGN_HEIGHT(nxt,HWRMax(HEIGHT_OF(nxt),HEIGHT_OF(pToChange)));
  }
 return;

} /* end of ChangeArcsInCircle */
#endif

/*==========================================================================*/
/*====  This program inserts third O_element instead of CROSS - element  ===*/
/*==========================================================================*/

#define THIRD_ELEM_IN_GU(pEl) (                                              \
                               (pEl)!=_NULL                               && \
                               (                                             \
                                (pEl)->code==_UDL_ || (pEl)->code==_DDL_ ||  \
                                (pEl)->code==_UDC_ || (pEl)->code==_CDL_ ||  \
                                (pEl)->code==_ANl  || (pEl)->code==_GDs_ ||  \
                                (pEl)->code==_Gl_  || (pEl)->code==_GUs_ ||  \
                                (pEl)->code==_UD_ && CLOCKWISE((pEl))    ||  \
                                (pEl)->code==_ID_ && (pEl)->mark==END        \
                               )                                             \
                              )

#ifdef FOR_FRENCH
#define THIRD_ELEM_IN_O(pEl)  (                                              \
                               (pEl)!=_NULL                               && \
                               (                                             \
                                (pEl)->code==_UUL_ || (pEl)->code==_DUL_ ||  \
                                (pEl)->code==_UUC_ || (pEl)->code==_CUL_ ||  \
                                (pEl)->code==_ANl  || (pEl)->code==_GUs_ ||  \
                                (pEl)->code==_IU_  || (pEl)->code==_GU_  ||  \
                                (pEl)->code==_Gl_  ||                        \
                                (pEl)->code==_UU_ && COUNTERCLOCKWISE((pEl)) \
                               )                                             \
                              )
#else /* ! FOR_FRENCH */
#define THIRD_ELEM_IN_O(pEl)  (                                              \
                               (pEl)!=_NULL                               && \
                               (                                             \
                                HEIGHT_OF(pEl) <=_UE2_ ||                    \
                                (pEl)->code==_UUL_ || (pEl)->code==_DUL_ ||  \
                                (pEl)->code==_UUC_ || (pEl)->code==_CUL_ ||  \
                                (pEl)->code==_ANl  || (pEl)->code==_GUs_ ||  \
                                (pEl)->code==_IU_  || (pEl)->code==_GU_  ||  \
                                (pEl)->code==_Gl_  ||                        \
                                (pEl)->code==_UU_ && COUNTERCLOCKWISE((pEl)) \
                               )                                             \
                              )
#endif

_BOOL ins_third_elem_in_circle(p_SPECL cur,p_low_type low_data)
{
 _SHORT  ymin,ymax;         /*      minimum and maximum Y                   */
 p_SHORT y=low_data->y;     /* y - co-ordinates                             */
 _BOOL bretcode=_FALSE;
 p_SPECL prv=cur->prev,nxt=cur->next;

  yMinMax(cur->ibeg,cur->iend,y,&ymin,&ymax);
  if(ymax-ymin>THREE_FOURTH(DY_STR))
   if(cur->code==_GU_)
    {
      if(nxt->code==_GU_)
       nxt=nxt->next;
      if(!THIRD_ELEM_IN_GU(prv) && !THIRD_ELEM_IN_GU(nxt))
       {
#ifdef FOR_FRENCH
         _SHORT iSav=cur->ibeg;
         cur->ibeg=cur->ipoint1;
         Restore_AN(low_data,cur,NOT_RESTORED,1);
         cur->ibeg=iSav;
         bretcode=_FALSE;
#else
         cur->code=_CDL_;
         ASSIGN_HEIGHT(cur,HeightInLine(y[cur->iend],low_data));
         cur->ibeg=cur->iend-1;
         cur->ipoint0=UNDEF;
         bretcode=_TRUE;
#endif /* FOR_FRENCH */
       }
    }
   else
    if((cur->code==_O_ && COUNTERCLOCKWISE(cur) &&
        (cur->other & WAS_CONVERTED_FROM_GU)==0 &&
        (cur->other & TOO_NARROW)==0              ||
        cur->code==_GD_)                            &&
       !THIRD_ELEM_IN_O(prv)                        &&
       !THIRD_ELEM_IN_O(nxt)
      )
     {
#ifdef FOR_FRENCH
      _SHORT iSav=cur->ibeg;
      cur->ibeg=cur->iend-ONE_FOURTH(cur->iend-iSav);
      Restore_AN(low_data,cur,NOT_RESTORED,1);
      cur->ibeg=iSav;
      bretcode=_FALSE;
#else
       _UCHAR height=HeightInLine(y[cur->iend],low_data);
       if(height==_DI1_ || height==_DI2_) height=_MD_;
       cur->code=_CUL_;
       ASSIGN_HEIGHT(cur,height);
       cur->ibeg=cur->iend-1;
       cur->ipoint0=UNDEF;
//       if(prv->code==_IU_ || prv->code==_UU_)
//        SwapThisAndNext(prv);
       bretcode=_TRUE;
#endif /* FOR_FRENCH */
       if (prv && (prv->code==_IU_ || prv->code==_UU_))
        SwapThisAndNext(prv);
     }

  return bretcode;

} /* end of ins_third_elem_in_circle */

/*==========================================================================*/
/*=  This program checks IU_b and ID_f (they may have another direction)   =*/
/*==========================================================================*/

#define IsArcCounterClockWise(pEl) (((pEl)->code==_UD_  ||    \
                                     (pEl)->code==_UDC_ ||    \
                                     (pEl)->code==_UDL_ ||    \
                                     (pEl)->code==_UDR_       \
                                    )                     &&  \
                                    COUNTERCLOCKWISE(pEl)     \
                                   )

#define IsArcClockWise(pEl)        (((pEl)->code==_UU_  ||    \
                                     (pEl)->code==_UUC_ ||    \
                                     (pEl)->code==_UUL_ ||    \
                                     (pEl)->code==_UUR_       \
                                    )                     &&  \
                                    CLOCKWISE(pEl)            \
                                   )

_SHORT check_IUb_IDf_small(p_low_type low_data)
{
 p_SPECL cur=low_data->specl;          /*  The list of special points on */
                                       /* the trajectory                 */
 p_SHORT x=low_data->x,
         y=low_data->y;                          /* x, y - co-ordinates  */
 _SHORT ibeg,iend,i;
 p_SPECL prv,nxt=cur->next;

 while((cur=nxt)->next!=_NULL)
  {
    prv=cur->prev; nxt=cur->next;
    if(prv->code==_CUL_)
     prv=prv->prev;
    if(cur->code==_IU_ && COUNTERCLOCKWISE(cur) ||
       cur->code==_ID_ && CLOCKWISE(cur))
     {
       if(   cur->code==_IU_
          && (      cur->mark==STICK
                 && (IsArcCounterClockWise(prv) || IsArcCounterClockWise(nxt))
              ||    cur->mark==MINW
                 && (IsArcCounterClockWise(prv) && IsArcCounterClockWise(nxt))
             )
         )
        {
          SET_CLOCKWISE(cur);
          continue;
        }
       if(   cur->code==_ID_ && cur->mark==STICK
          && (IsArcClockWise(prv) || IsArcClockWise(nxt))
         )
        {
          SET_COUNTERCLOCKWISE(cur);
          continue;
        }

       for(ibeg=cur->ibeg,i=0;i<10 && y[ibeg]!=BREAK;i++)
        ibeg--;
       for(iend=cur->iend,i=0;i<10 && y[iend]!=BREAK;i++)
        iend++;
       if(y[ibeg]==BREAK) ibeg++;
       if(y[iend]==BREAK) iend--;
       if(x[ibeg]<x[iend])
        if(cur->code==_IU_) SET_CLOCKWISE(cur);
        else                SET_COUNTERCLOCKWISE(cur);
     }
  }

 return SUCCESS;

} /* end of check_IUb_IDf_small */

/*==========================================================================*/
/*====  This program analyzes something before the circle                ===*/
/*==========================================================================*/
_SHORT check_before_circle(pNxtPrvCircle_type pNxtPrvCircle)
{
 _UCHAR height=HEIGHT_OF(*(pNxtPrvCircle->pBefore));

  change_circle_before(pNxtPrvCircle,height);
  change_and_del_before_circle(pNxtPrvCircle,height);

  return SUCCESS;

} /* end of check_before_circle */

/*==========================================================================*/
/*====  This program changes circle's attributes                         ===*/
/*==========================================================================*/
_SHORT change_circle_before(pNxtPrvCircle_type pNxtPrvCircle,_UCHAR height)
{
 p_low_type low_data=pNxtPrvCircle->plow_data;
 p_SPECL cur=pNxtPrvCircle->pCircle;
 p_SPECL prv=*(pNxtPrvCircle->pBefore);
 _UCHAR height_O=*(pNxtPrvCircle->pheight_O);
 _UCHAR fb_O=pNxtPrvCircle->fb_O;
 p_SHORT y=low_data->y;                   /*  y - co-ordinates       */
 _SHORT  ymin,ymax;                       /*  minimum and maximum Y  */

  if((prv->code==_GU_ && height<=_UI1_  && fb_O==_b_ ||
      prv->code==_GD_ && height>=_DI2_) &&
     (prv->iend>=cur->ibeg) &&
     (prv->iend<cur->iend-NUM_POINTS_TO_O_GAMMA_CHANGE))
   {
     yMinMax(prv->iend,cur->iend,y,&ymin,&ymax);
     if (   prv->code==_GU_
         && HeightInLine(ymax,low_data)>=_DS1_ )
      {
        cur->ibeg=prv->iend;
        cur->code=_GD_;
        SetNewAttr (cur,_DS1_,fb_O);
        height_O=_DS1_;
      }
     else
      {
        if(height<=_UE1_)
         cur->ibeg=prv->iend;
        height_O=HeightInLine(MEAN_OF(ymin,ymax),low_data);
        SetNewAttr (cur,height_O,fb_O);
      }
#if PG_DEBUG
     if(mpr>4 && mpr<=MAX_GIT_MPR)
      printw("\n Circle changed: ibeg=%d  iend=%d  code=%s attr=%s",
              cur->ibeg,cur->iend,
              code_name[cur->code],
              dist_name[cur->attr]);
#endif
   }

 *(pNxtPrvCircle->pheight_O)=height_O;
 return SUCCESS;

} /* end of change_circle_before */

/*==========================================================================*/
/*====  This program changes and deletes elements before circle          ===*/
/*==========================================================================*/
_SHORT change_and_del_before_circle(pNxtPrvCircle_type pNxtPrvCircle,
                                    _UCHAR height)
{
 p_SPECL cur=pNxtPrvCircle->pCircle;
 p_SPECL prv=*(pNxtPrvCircle->pBefore);
 _UCHAR height_O=*(pNxtPrvCircle->pheight_O);
 _UCHAR fb_O=pNxtPrvCircle->fb_O;
 p_low_type low_data=pNxtPrvCircle->plow_data;
/* if circle is in the line, then analize previous element */
/* previous element will be deleted or changed, if it is:
   - _O_ or _GD_ and circle direction is the same
   - _UUR_ or _IU_ with additional conditions
   and there are higher then the middle of the line
   - _ID_ or _GD_ and circle is COUNTERCLOCKWISE
   and there are inside the baseline.
   All of them cross in time with the circle */
  if((height_O>=_UE1_ && height_O<=_DI2_)    &&
     (CrossInTime(prv,cur) ||
      check_inside_circle(cur,prv,low_data)) &&
     (UpElemBeforeCircle(pNxtPrvCircle,height)    ||
      DnElemBeforeCircle(pNxtPrvCircle,height) && fb_O==_b_
     )
    )
      {
#if PG_DEBUG
        if(mpr>4 && mpr<=MAX_GIT_MPR)
         printw("\n ibeg=%d  iend=%d  code=%s attr=%s",
                 prv->ibeg,prv->iend,
                 code_name[prv->code],
                 dist_name[prv->attr]);
#endif
                                     /* then delete them    */
#if 0
        if((prv->next)->code==_UUC_ ||
           (prv->next)->code==_UDC_ &&
           (prv->prev)->code==_UUC_)
         {
           DelFromSPECLList(prv);
           if(prv->code==_O_ && CIRCLE_DIR(prv)!=fb_O ||
              prv->code==_GD_)
            {
              prv=prv->prev;
              if(prv->code==_UUC_)
               prv=prv->prev;
              if(prv->code==_UDC_)
               {
                 prv=del_prv_and_shift(prv);
                 if(prv->code==_UUC_)
                  prv=del_prv_and_shift(prv);
               }
            }
           else
            if(prv->code==_ID_)
             {
               prv=prv->prev;
               if(prv->code==_UU_)
                prv=del_prv_and_shift(prv);
             }
         }
        else
#endif /* if 0 */
         if(prv->code==_O_)
          prv=del_prv_and_shift(prv);
         else if((prv->next)->code==_UUC_)
          prv=del_prv_and_shift(prv);
         else
          {
            if(CLOCKWISE(prv->next) && prv->code!=_UUR_)
             prv->code=_CUL_;
            else
             prv->code=_CUR_;
            prv=prv->prev;
          }
        if(prv && prv->code==_ID_ && prv->mark==STICK &&
//           CrossInTime(prv,cur) &&
           check_inside_circle(cur,prv,low_data))
         prv=del_prv_and_shift(prv);
      }

  *(pNxtPrvCircle->pBefore)=prv;
  return SUCCESS;

} /* change_and_del_before_circle */

/*==========================================================================*/
/*====  Delete element from SPECL and shift                              ===*/
/*==========================================================================*/
p_SPECL del_prv_and_shift(p_SPECL prv)
{
  DelFromSPECLList(prv);
  return(prv->prev);

} /* end of del_prv_and_shift */

/*==========================================================================*/
/*====  This program checks upper elements before circle                 ===*/
/*==========================================================================*/
_BOOL UpElemBeforeCircle(pNxtPrvCircle_type pNxtPrvCircle,_UCHAR height)
{
  p_SPECL prv=*(pNxtPrvCircle->pBefore);
  p_SPECL cur=pNxtPrvCircle->pCircle;
  _UCHAR fb_O=pNxtPrvCircle->fb_O;
  p_low_type low_data=pNxtPrvCircle->plow_data;
  p_SHORT x=low_data->x;                   /*  x - co-ordinates       */
  p_SHORT y=low_data->y;                   /*  y - co-ordinates       */
 _BOOL IsLikeJorLowLoop=(cur->code==_GD_ && CLOCKWISE(cur) ||
                         (prv->next)->code==_UDC_   &&
                         CLOCKWISE(prv->next)       &&
                         HEIGHT_OF(prv->next)>=_DS2_
                        );
 _BOOL Is_IU_OK=(   prv->code==_IU_
//                 && CIRCLE_DIR(prv)==fb_O
                 && !IsLikeJorLowLoop
                 && !((prv->mark==STICK || prv->mark==CROSS) && height<=_UE2_)
                );
 _BOOL Is_UUL_OK=(prv->code==_UUL_ && !IsLikeJorLowLoop);
 _BOOL Is_GU_OK=_FALSE;
 _BOOL IsCircleOK=(prv->code==_O_ && (CIRCLE_DIR(prv)==fb_O ||
                                      !NULL_or_ZZ_after(cur->next))
                  );
 _BOOL bret;

 if(prv->code==_UUL_ && IsLikeJorLowLoop)
  prv->other |= DONT_DELETE;
 if(IsCircleOK)
  {
    /* check overlaping of rect circles */
    _RECT rPrv,rCircle;
    GetTraceBox(x,y,prv->ibeg,prv->iend,&rPrv);
    GetTraceBox(x,y,cur->ibeg,cur->iend,&rCircle);
    IsCircleOK=HardOverlapRect(&rPrv,&rCircle,!STRICT_OVERLAP);
  }

 bret=
  (
   (height>=_UE1_ && height<=_MD_)                &&
   (
    Is_GU_OK                                   ||
    IsCircleOK                                 ||
    IsAnyGsmall(prv) &&
#if defined(FOR_GERMAN)
    prv->code!=_Gr_  &&
#endif /* FOR_GERMAN */
    !Is_8(x,y,prv,cur)                         ||
    (prv->code==_DUR_)                         ||
    (Is_UUL_OK)
   )                                                 ||
   (height<=_DI2_)                                &&
   ((prv->code==_UUR_) || Is_IU_OK)
  );

 return bret;

} /* end of UpElemBeforeCircle */

/*==========================================================================*/
/*====  This program checks 8 symbol                                     ===*/
/*==========================================================================*/
_BOOL Is_8(p_SHORT x,p_SHORT y,p_SPECL pGUs,p_SPECL pCircle)
{
  _RECT rGUs,rCircle;
  _INT  di;

  if(pGUs->code!=_GUs_)
   return _FALSE;
  di=ONE_FOURTH(pGUs->iend-pGUs->ibeg);
  GetTraceBox(x,y,pGUs->ibeg+di,pGUs->iend-di,&rGUs);
  GetTraceBox(x,y,pCircle->ibeg,pCircle->iend,&rCircle);
  if(yHardOverlapRect(&rGUs,&rCircle,!STRICT_OVERLAP))
   return _FALSE;
  else
   {
     if(COUNTERCLOCKWISE(pCircle))
      {
        pGUs->code=_UUC_;
        SET_CLOCKWISE(pGUs);
      }
     return _TRUE;
   }

} /* Is_8 */

/*==========================================================================*/
/*====  This program checks down  elements before circle                 ===*/
/*==========================================================================*/
_BOOL DnElemBeforeCircle(pNxtPrvCircle_type pNxtPrvCircle,_UCHAR height)
{
 p_SPECL prv=*(pNxtPrvCircle->pBefore);
 p_SPECL specl=pNxtPrvCircle->plow_data->specl;
 p_SPECL pCircle=pNxtPrvCircle->pCircle;
 _BOOL bIs_ID_OK=prv->code==_ID_;
 _BOOL bret;

 if(bIs_ID_OK)
  {
    p_SPECL wrk=prv->prev;
    p_SHORT y=pNxtPrvCircle->plow_data->y;
    _SHORT  ymin,ymax;
    yMinMax(pCircle->ibeg,pCircle->iend,y,&ymin,&ymax);
    if(   (wrk->code==_IU_ || wrk->code==_UUR_ || wrk->code==_UUL_)
       && y[wrk->ipoint0]<ymin
       && y[prv->ipoint0]-y[wrk->ipoint0]>=ONE_HALF(DY_STR)
       && (wrk->prev==specl    || IsAnyBreak(wrk->prev) ||
           IsXTorST(wrk->prev) || (wrk->prev)->mark==HATCH)
      )
     bIs_ID_OK=_FALSE;
    /* A - written with the circle inside */ 
    else if((wrk->code==_UU_ || wrk->code==_IU_ && wrk->mark==MINW) &&
            HEIGHT_OF(wrk)<=_UE1_ && height>_MD_
           )
     bIs_ID_OK=_FALSE;
  }
  bret=height>=_UI1_ && height<=_DI2_ && (bIs_ID_OK || prv->code==_GD_);
  if(bret && pCircle->ibeg>prv->ibeg)
   pCircle->ibeg=prv->ibeg;

 return bret;

} /* end of DnElemBeforeCircle */

/*==========================================================================*/
/*====  This program checks tails before circle                          ===*/
/*==========================================================================*/
_BOOL IsTipBefore(pNxtPrvCircle_type pNxtPrvCircle)
{
 p_SPECL cur=pNxtPrvCircle->pCircle;
 p_SPECL prv=*(pNxtPrvCircle->pBefore);
 _UCHAR height_O=*(pNxtPrvCircle->pheight_O);
 _UCHAR fb_O=pNxtPrvCircle->fb_O;
 _BOOL bIsID_or_UDR_OK=(prv->code==_ID_ || prv->code==_UDR_) &&
                       !(cur->code==_GU_ && fb_O==_f_);
  return
   (
    (prv->code==_IU_     &&
     !(cur->code==_GD_ &&
       height_O>=_DI2_ &&
       fb_O==_f_ || cur->code==_ID_
      )                             ||
     bIsID_or_UDR_OK                ||
     prv->code==_UUR_               ||
     prv->code==_UUL_               ||
     prv->code==_UDL_
    )                                 &&             /* if the tip is before*/
    (IsAnyBreak(prv->prev)          ||               /* circle,and before it*/
     (prv->prev)->code==_NO_CODE    ||
     IsXTorST(prv->prev)                             /* is break or ST or XT*/
    )                                 &&
    (prv->other & DONT_DELETE)==0
   );

} /* end of IsTipBefore */

/*==========================================================================*/
/*====  This program analyzes something after  the circle                ===*/
/*==========================================================================*/
_SHORT check_after_circle(pNxtPrvCircle_type pNxtPrvCircle)
{
 p_SPECL cur=pNxtPrvCircle->pCircle;
 _UCHAR height_O=*(pNxtPrvCircle->pheight_O);
 _UCHAR fb_O=pNxtPrvCircle->fb_O;

  if((height_O>=_UE1_) && (fb_O==_b_) &&
     (cur->other & NO_ARC)==0)                       /*  after the circle   */
   {
     check_next_for_circle(pNxtPrvCircle);
     check_next_for_common(pNxtPrvCircle);
   }
  check_next_for_special(pNxtPrvCircle);

  return SUCCESS;

} /* end of check_after_circle */

/*==========================================================================*/
/*====  This program checks circle after the circle                      ===*/
/*==========================================================================*/
_SHORT check_next_for_circle(pNxtPrvCircle_type pNxtPrvCircle)
{
 p_SPECL cur=pNxtPrvCircle->pCircle;
 p_SPECL nxt=*(pNxtPrvCircle->pAfter);
 _UCHAR fb_O=pNxtPrvCircle->fb_O;
 _UCHAR fb;                      /* round of circle direction               */
 _SHORT ymin,ymax;
 _INT   dycur,dynxt;
 p_SHORT x=pNxtPrvCircle->plow_data->x,
         y=pNxtPrvCircle->plow_data->y;

  fb = CIRCLE_DIR(nxt);
  if(nxt->code==_O_ && fb==fb_O &&
     CrossInTime(cur,nxt))
   {
#if PG_DEBUG
     if(mpr>4 && mpr<=MAX_GIT_MPR)
      printw("\n ibeg=%d  iend=%d  code=%s attr=%s",
              nxt->ibeg,nxt->iend,
              code_name[nxt->code],
              dist_name[nxt->attr]);
#endif
     DelFromSPECLList(nxt);
     if(cur!=nxt->prev)
      {
        yMinMax(cur->ibeg,cur->iend,y,&ymin,&ymax);
        dycur=ymax-ymin;
        yMinMax(nxt->ibeg,nxt->iend,y,&ymin,&ymax);
        dynxt=ymax-ymin;
        if(dynxt<dycur && (nxt->prev)->code==_UDC_)
         DelFromSPECLList(nxt->prev);
      }
     else
      if(pNxtPrvCircle->numUDC==2 &&
         (cur->prev)->code==_UDC_)
       DelFromSPECLList(cur->prev);
     cur->iend=nxt->iend;
     nxt=cur->next;
   }
  if(nxt->code==_GU_ && COUNTERCLOCKWISE(nxt) && fb==fb_O)
  /* if next - GU and it is at the same place as O,
          so make UUC instead of GU */
   {
     _RECT Box_O,Box_GU;
     #define DX_RATIO_O_GU 80
     #define DY_RATIO_O_GU 80
     GetTraceBox(x,y,cur->ibeg,cur->iend,&Box_O);
     GetTraceBox(x,y,nxt->ibeg,nxt->ipoint1,&Box_GU);
     if(Box_O.right>=Box_GU.right && Box_O.top<=Box_GU.top &&
        100l*DX_RECT(Box_GU)/DX_RECT(Box_O)>DX_RATIO_O_GU  &&
        100l*DY_RECT(Box_GU)/DY_RECT(Box_O)>DY_RATIO_O_GU
       )
      {
//        if(nxt->next!=_NULL && (nxt->next)->code==_GU_ && CrossInTime(nxt,nxt->next))
//         DelFromSPECLList(nxt->next);
        if((cur->prev)->code==_UUC_)
         DelFromSPECLList(nxt);
        else
         {
           nxt->code=_UUC_;
           nxt->other |= INSIDE_CIRCLE;
   //         nxt->ibeg=nxt->iend=???????
//           cur->iend=nxt->iend;
           SwapThisAndNext(cur);
         }
        nxt=cur->next;
      }
   }
  *(pNxtPrvCircle->pAfter)=nxt;
  return SUCCESS;

} /* end of check_next_for_circle */

/*==========================================================================*/
/*====  This program checks common elements after the circle             ===*/
/*==========================================================================*/
_SHORT check_next_for_common(pNxtPrvCircle_type pNxtPrvCircle)
{
 p_SPECL cur=pNxtPrvCircle->pCircle;
 p_SPECL nxt=*(pNxtPrvCircle->pAfter);
 _UCHAR fb_O=pNxtPrvCircle->fb_O;
 p_low_type low_data=pNxtPrvCircle->plow_data;
 p_SHORT y=low_data->y;          /* y - co-ordinates                        */
 _SHORT ym,ymin,ymax;            /* minimum and maximum Y                   */
 _UCHAR fb=CIRCLE_DIR(nxt);      /* round of circle direction               */
 _UCHAR height=HEIGHT_OF(nxt);   /* the height                              */

  yMinMax(nxt->ibeg,nxt->iend,y,&ym,&ymax);
  yMinMax(cur->ibeg,cur->iend,y,&ymin,&ymax);
  ymax=HeightInLine(y[nxt->iend],low_data);
  /* if prv - GU or Gsmall and some conditions for top and bottom */
  /* and they cross and the height difference is not big          */
  if( ((IsAnyGsmall(nxt) && ymax<_DI1_ && height>=_UE2_) ||
       (nxt->code==_GU_  && ymax<_DI1_ && fb==fb_O &&
        (height>=_UI1_                           ||
         (height==_UE1_ || height==_UE2_)      &&
         ym>=STR_UP-MAX_DY_UPSTR_DEL_GU_NEAR_O_
        )
       )
      )                                        &&
      CrossInTime(cur,nxt)                     &&
      (HWRAbs(ym-ymin)<=MAX_DY_CLOSE_CIRCLELIKE)
    )
   {                           /* then delete them       */
#if PG_DEBUG
     if(mpr>4 && mpr<=MAX_GIT_MPR)
      printw("\n ibeg=%d  iend=%d  code=%s attr=%s",
               nxt->ibeg,nxt->iend,
               code_name[nxt->code],
               dist_name[nxt->attr]);
#endif
     if((cur->prev)->code==_UUC_)
      DelFromSPECLList(nxt);
     else
      nxt->code=_CUL_;
     nxt=nxt->next;
   }
  else
   change_circle_after(pNxtPrvCircle,fb,height);

  *(pNxtPrvCircle->pAfter)=nxt;
  return SUCCESS;

} /* end of check_next_for_common */

/*==========================================================================*/
/*====  This program changes circle's attributes                         ===*/
/*==========================================================================*/
_SHORT change_circle_after(pNxtPrvCircle_type pNxtPrvCircle,
                           _UCHAR fb,_UCHAR height)
{
 p_SPECL cur=pNxtPrvCircle->pCircle;
 p_SPECL nxt=*(pNxtPrvCircle->pAfter);
 _UCHAR height_O=*(pNxtPrvCircle->pheight_O);
 _UCHAR fb_O=pNxtPrvCircle->fb_O;
 p_low_type low_data=pNxtPrvCircle->plow_data;
 _SHORT ymin,ymax;               /* minimum and maximum Y                   */
 p_SHORT y=low_data->y;          /* y - co-ordinates                        */

   if((nxt->code==_GU_) && (height<=_UE1_) &&
      (height_O<=_UI2_) && (fb==fb_O) &&
      CrossInTime (cur,nxt) )
    {
      DBG_CHK_err_msg( nxt->ibeg < cur->ibeg,
                       "del_bef_aft: ibeg >= iend!");
      cur->iend=nxt->ibeg;
      yMinMax(cur->ibeg,cur->iend,y,&ymin,&ymax);
      height_O=HeightInLine(MEAN_OF(ymin,ymax),low_data);
      SetNewAttr(cur,height_O,fb_O);
#if PG_DEBUG
      if(mpr>4 && mpr<=MAX_GIT_MPR)
       printw("\n Circle changed: ibeg=%d  iend=%d  code=%s attr=%s",
               cur->ibeg,cur->iend,
               code_name[cur->code],
               dist_name[cur->attr]);
#endif
    }

  *(pNxtPrvCircle->pheight_O)=height_O;
  return SUCCESS;

} /* end of change_circle_after */

/*==========================================================================*/
/*====  This program checks special elements after the circle            ===*/
/*==========================================================================*/

#define NUM_POINTS_IU_CLOSE_TO_CIRCLE 5

_SHORT check_next_for_special(pNxtPrvCircle_type pNxtPrvCircle)
{
 p_SPECL cur=pNxtPrvCircle->pCircle;
 p_SPECL nxt=*(pNxtPrvCircle->pAfter);
 _UCHAR height_O=*(pNxtPrvCircle->pheight_O);
 _UCHAR fb_O=pNxtPrvCircle->fb_O;
 p_low_type low_data=pNxtPrvCircle->plow_data;
 p_SHORT x=low_data->x;
 _UCHAR height=HEIGHT_OF(nxt);   /* the height                              */

  if((height_O>=_UI1_) && (fb_O==_b_)) /*  after the circle   */
   {
     if(   CrossInTime(cur,nxt)
        && (   nxt->code==_UDL_
            || nxt->code==_DDL_
            ||    nxt->code==_UU_
               && COUNTERCLOCKWISE(nxt)
               && (nxt->next!=_NULL)
               && (nxt->next)->code!=_UDR_
               && !(   (nxt->next)->code==_UD_
                    && HEIGHT_OF(nxt->next)>height
        )
       )
       )
      {
        if(nxt->code==_UDL_ || nxt->code==_DDL_)
         switch ((cur->prev)->code)
          {
            case _UU_ : (cur->prev)->code=_UUC_;
            case _UUC_:
            case _CUL_:
                        (cur->prev)->iend=nxt->iend;
                        DelFromSPECLList(nxt);
                        break;
            default:    nxt->code=_CUL_;
                        break;
          }
        else
        nxt->code=_CUL_;
        nxt=nxt->next;
      }
     else
      if((nxt->code==_IU_) &&
         cur->iend>=nxt->ibeg-NUM_POINTS_IU_CLOSE_TO_CIRCLE &&
         /*CrossInTime (cur,nxt) */
         (HEIGHT_OF(nxt)>=_UI1_) &&
         (nxt->next!=_NULL)      &&
         ((nxt->next)->code==_ID_ || (nxt->next)->code==_UD_) &&
         (MidPointHeight(nxt->next,low_data) <_DI2_)
        )
       {
         nxt->code=_CUL_;
         nxt=nxt->next;
       }
   }
  if(nxt==_NULL)
   goto ret;
  if((nxt->code==_IU_ || nxt->code==_UUL_)                &&
     COUNTERCLOCKWISE(cur)                 &&
     (cur->prev)->code==_UDC_              &&
     NULL_or_ZZ_after(nxt)
    )
   if((cur->other & NO_ARC)==0 && (cur->other & TOO_NARROW)==0)
   {
     _SHORT ymax,ymin;
     yMinMax(cur->ibeg,cur->iend,low_data->y,&ymin,&ymax);
     if(HeightInLine(ymin,low_data)-height<2)
      nxt->code=_CUL_;
   }
   else
    nxt->other |= DONT_DELETE;
  /* situations like s, 8, 0(clockwise), r(most of all German and French) */
  if((nxt->code==_IU_ || nxt->code==_UUR_ || nxt->code==_UUL_)  &&
     CLOCKWISE(cur) && (cur->prev)->code==_UDC_ && NULL_or_ZZ_after(nxt)
    )
   {
     p_SPECL pUDC=cur->prev;
     if((cur+1)->other==CIRCLE_NEXT)
   nxt->code=_CUR_;
     else if(HEIGHT_OF(nxt)<_UI2_ && (cur->other & NO_ARC)==0)
      {
        if(CrossInTime(cur,nxt))
         nxt->code=_CUR_;
        else if(MID_POINT(nxt)-cur->iend<ONE_FOURTH(cur->iend-MID_POINT(pUDC)))
              nxt->code=_CUR_;
             else
              nxt->other |= DONT_DELETE;
      }
     else if(HEIGHT_OF(nxt)<=_MD_ && HEIGHT_OF(nxt)>=_UI2_ &&
             x[nxt->iend]>x[pUDC->iend])
           nxt->other |= DONT_DELETE;
   }
  make_CDL_in_O_GU_f(cur,nxt,fb_O);

ret:
  *(pNxtPrvCircle->pAfter)=nxt;
  return SUCCESS;

} /* end of check_next_for_special */

/*==========================================================================*/
/*====  This program analyzes something before and after GU              ===*/
/*==========================================================================*/
_SHORT check_before_after_GU(pNxtPrvCircle_type pNxtPrvCircle)
{
 p_SPECL cur=pNxtPrvCircle->pCircle;
 p_SPECL nxt=*(pNxtPrvCircle->pAfter);
 p_SPECL prv=*(pNxtPrvCircle->pBefore);
 _UCHAR height_O=*(pNxtPrvCircle->pheight_O);
 _UCHAR fb_O=pNxtPrvCircle->fb_O;
 _UCHAR fb=CIRCLE_DIR(nxt);      /* round of circle direction               */
 _UCHAR height=HEIGHT_OF(nxt);   /* the height                              */

  if(fb_O==_f_ && (height_O >=_MD_ && height_O <=_DI2_) &&
     (IsUpperElem(prv) || prv->code==_O_))
   {
     if((cur->prev)->code==_UUC_ && CLOCKWISE(cur->prev))
      DelFromSPECLList(cur->prev);
     cur->code=_Gl_;
     cur->attr=_DI2_;
     return SUCCESS;
   }
  if(fb_O==_f_ && (nxt->code==_O_ || nxt->code==_GD_) &&
     (height==_DI1_ || height==_DI2_) && fb==fb_O && CrossInTime(cur,nxt)
    )
   {
     p_SPECL wrk=nxt->prev;
     while(wrk!=cur)
      {
        DelFromSPECLList(wrk);
        wrk=wrk->prev;
      }
     nxt->code=_Gl_;
   }
  make_CDL_in_O_GU_f(cur,nxt,fb_O);

  return SUCCESS;

} /* end of check_before_after_GU */

/*==========================================================================*/
/*====  This program transformes _GU_ and _O_ into 3 elements            ===*/
/*==========================================================================*/
  /* fighting with unusual O, 0, % in French and English */
_BOOL O_GU_To3Elements(pNxtPrvCircle_type pNxtPrvCircle)
{
 _BOOL bret=_FALSE;
 p_SPECL cur=pNxtPrvCircle->pCircle;
 p_SPECL nxt=*(pNxtPrvCircle->pAfter);
 p_SPECL prv=*(pNxtPrvCircle->pBefore);
 p_low_type low_data=pNxtPrvCircle->plow_data;
 p_SHORT y=low_data->y;

  if(COUNTERCLOCKWISE(cur) &&
     (cur->code==_GU_ || pNxtPrvCircle->numUUC+pNxtPrvCircle->numUDC==1)
    )
   {
     _BOOL b1st=_FALSE,b2nd=_FALSE;
     if(   CrossInTime(prv,cur)
        && (   Is_IU_or_ID(prv) && prv->mark==BEG
            || IsAnyArcWithTail(prv)
#if 0
            || (prv->code==_UD_ || prv->code==_UDC_) && COUNTERCLOCKWISE(prv) &&
               (prv->prev)->code==_IU_ && (prv->prev)->mark==BEG &&
               (CrossInTime(prv->prev,cur) || check_inside_circle(cur,prv->prev,low_data))
#endif /* if 0 */
           )
       )
      b1st=_TRUE;
     if(   nxt==_NULL
        || (   cur->iend==nxt->iend
            && (   Is_IU_or_ID(nxt) && nxt->mark==END
                || IsAnyArcWithTail(nxt)
               )
           )
       )
      b2nd=_TRUE;
     if(b1st && b2nd)
      {
        prv->code=_CDL_;
        if((prv->next)->code==_UD_)
         DelFromSPECLList(prv->next);
        if(cur->code==_O_)
         DelFromSPECLList(cur);
        else
         cur->code=_UUC_;
        if(nxt!=_NULL)
         {
           nxt->code=_CDR_;
           if(cur->code==_O_ && (nxt->prev)->code==_UD_)
            DelFromSPECLList(nxt->prev);
         }
        else
         {
           p_SPECL p2nd=(cur+1);
           p2nd->ibeg=p2nd->iend=cur->iend;
           p2nd->code=_CDR_;
           p2nd->attr=HeightInLine(y[p2nd->iend],low_data);
           Insert2ndAfter1st(cur,p2nd);
         }
        bret=_TRUE;
      }
   }

  return bret;

} /* end of O_GU_To3Elements */

/*==========================================================================*/
/*====  This program deletes UD - elements before DDL                    ===*/
/*==========================================================================*/
_VOID delete_UD_before_DDL(p_low_type low_data)
{
  p_SPECL cur=low_data->specl;

  while(cur->next!=_NULL)
   {
     if(cur->code==_UD_ && CLOCKWISE(cur) && (cur->next)->code==_DDL_)
      DelFromSPECLList(cur);
     cur=cur->next;
   }
} /* end of Delete_UD_before_DDL */

/*==========================================================================*/
/*====  This program makes CDL in the end of O and GU forward            ===*/
/*==========================================================================*/
_VOID make_CDL_in_O_GU_f(p_SPECL cur,p_SPECL nxt,_UCHAR fb_O)
{
  if((cur->prev)->code==_UUC_ && fb_O==_f_ &&
     (nxt->code==_UDL_ ||
      nxt->code==_ID_ && nxt->mark==END && CrossInTime(cur,nxt)
     )
    )
   nxt->code=_CDL_;

} /* end of make_CDL_in_O_GU_f */

#endif //#ifndef LSTRIP
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\lu_specl.cpp ===
#ifndef LSTRIP

/*
    File:       LU_SPECL.C

    Contains:   xxx put contents here xxx

    Written by: xxx put writers here xxx

    Copyright:  c 1993 by Apple Computer, Inc., ParaGraph, Inc., all rights reserved.

    Change History (most recent first):

        <5*>      6/3/93    mbo     fix bug in function NewSPECLElem

*/

/************************************************************************/
/*             Utilities for work with SPECL array and list.            */
/************************************************************************/

#include "hwr_sys.h"
#include "ams_mg.h"
#include "lowlevel.h"
#include "lk_code.h"
#include "low_dbg.h"

/***************************************************/


p_SPECL  NewSPECLElem( low_type _PTR low_data )
{

  if  ( low_data->len_specl >= low_data->nMaxLenSpecl )  {
    err_msg("NewSPC.:  SPECL is full ...");
    return  _NULL;
  }

  HWRMemSet( (p_VOID)&low_data->specl[low_data->len_specl], 0, sizeof(SPECL) );

  return  &low_data->specl[low_data->len_specl++];

} /*NewSPECLElem*/
/***************************************************/

_VOID  DelFromSPECLList ( p_SPECL pElem )
{

  //ASSERT(pElem);
  if (!pElem) 
  {
	  return;
  }

  //ASSERT(pElem->prev);
  if (!pElem->prev)
  {
	  return;
  }

  DBG_CHK_err_msg( !pElem || !pElem->prev,
                   "DelFromSP..: BAD pElem");

  Attach2ndTo1st (pElem->prev,pElem->next);

} /*DelFromSPECLList*/
/***************************************************/

_VOID  DelThisAndNextFromSPECLList ( p_SPECL pElem )
{
  p_SPECL  pNext;
  
  //ASSERT(pElem);
  if (!pElem)
  {
	  return;
  }

  pNext = pElem->next;

  DelFromSPECLList (pNext);
  DelFromSPECLList (pElem);
  pElem->next = pNext;

} /*DelThisAndNextFromSPECLList*/
/***************************************************/

_VOID  DelCrossingFromSPECLList ( p_SPECL pElem )
{

  DBG_CHK_err_msg( !pElem || !IsAnyCrossing(pElem),
                   "DelCrossFromSP..: BAD pElem");

  DelThisAndNextFromSPECLList (pElem);

} /*DelCrossingFromSPECLList*/
/***************************************************/

_VOID  SwapThisAndNext ( p_SPECL pElem )
{
  p_SPECL  pNext;

  if  ( (pNext = pElem->next) != _NULL )  {
    DelFromSPECLList (pElem);
    Insert2ndAfter1st (pNext,pElem);
  }

} /*SwapThisAndNext*/
/***************************************************/

#if  !LOW_INLINE
_VOID  Attach2ndTo1st ( p_SPECL p1st, p_SPECL p2nd )
{

  //ASSERT(p1st);
  if(!p1st)
  {
	  return;
  }
  //ASSERT(p1st != p2nd);
  if (p1st == p2nd)
  {
	  return;
  }
  DBG_CHK_err_msg( !p1st,
                   "Attach2nd..: BAD pElems");

  ATTACH_2nd_TO_1st(p1st,p2nd);

} /*Attach2ndTo1st*/
#endif  /*!LOW_INLINE*/
/***************************************************/

_VOID  Insert2ndAfter1st ( p_SPECL p1st, p_SPECL p2nd )
{
  p_SPECL  pNext = p1st->next;

  DBG_CHK_err_msg( !p1st || !p2nd,
                   "Insert2nd..: BAD pElems");

  //ASSERT(p1st && p2nd);

  // Fix bug8, hang in German
  // Make sure to delete the 2nd element if he preceeds 1 otherwise you get 
  // a loop in the linked list
  if (p2nd == p1st->prev)
  {
	  DelFromSPECLList(p2nd);
  }

  Attach2ndTo1st (p1st,p2nd);
  Attach2ndTo1st (p2nd,pNext);

} /*Insert2ndAfter1st*/
/***************************************************/

_VOID  InsertCrossing2ndAfter1st ( p_SPECL p1st, p_SPECL p2nd )
{
  DBG_CHK_err_msg( !p1st || !p2nd || !IsAnyCrossing(p2nd),
                   "Insert2nd..: BAD pElems");

  Insert2ndAfter1st (p1st,p2nd->next);
  Insert2ndAfter1st (p1st,p2nd);

} /*InsertCrossing2ndAfter1st*/
/***************************************************/

_VOID  Move2ndAfter1st ( p_SPECL p1st, p_SPECL p2nd )
{
  DBG_CHK_err_msg( p1st==p2nd,
                   "Move2..: Equal args");

  DelFromSPECLList (p2nd);
  Insert2ndAfter1st (p1st,p2nd);
} /*Move2ndAfter1st*/
/***************************************************/

_VOID  MoveCrossing2ndAfter1st ( p_SPECL p1st, p_SPECL p2nd )
{
  DelCrossingFromSPECLList (p2nd);
  InsertCrossing2ndAfter1st (p1st,p2nd);
} /*MoveCrossing2ndAfter1st*/
/***************************************************/

#if  !LOW_INLINE
_BOOL  CrossInTime ( p_SPECL p1st, p_SPECL p2nd )
{
  DBG_CHK_err_msg( !p1st || !p2nd,
                   "CrossInTime: BAD pElems");

  return  CROSS_IN_TIME(p1st,p2nd);

} /*CrossInTime*/
/***************************************************/

_BOOL  FirstBelongsTo2nd ( p_SPECL p1st, p_SPECL p2nd )
{
  DBG_CHK_err_msg( !p1st || !p2nd,
                   "FirstBelongsTo2nd: BAD pElems");

  return  FIRST_IN_SECOND(p1st,p2nd);

} /*FirstBelongsTo2nd*/

#endif  /*!LOW_INLINE*/
/***************************************************/

_VOID  RefreshElem ( p_SPECL pElem,
                     _UCHAR mark, _UCHAR code, _UCHAR attr
#if  !NEW_VERSION
                     , _SHORT bitToSet
#endif  /*NEW_VERSION*/
                   )
{
  pElem->mark = mark;
  pElem->code = code;
  pElem->attr = attr;
#if  !NEW_VERSION
  HWRMemSet((p_VOID)pElem->bit,0,sizeof(pElem->bit));
  if  ( bitToSet != X_NOCODE )
    SetBit (pElem,bitToSet);
#endif  /*NEW_VERSION*/

} /*RefreshElem*/
/***************************************************/

p_SPECL  FindMarkRight ( p_SPECL pElem, _UCHAR mark )
{
  while ( pElem  &&  pElem->mark!=mark )
    pElem = pElem->next;
  return  pElem;
}
/***************************************************/

p_SPECL  FindMarkLeft ( p_SPECL pElem, _UCHAR mark )
{
  while ( pElem  &&  pElem->mark!=mark )
    pElem = pElem->prev;
  return  pElem;
}
/***************************************************/

#endif //#ifndef LSTRIP
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\low_3.cpp ===
#ifndef LSTRIP

#include  "hwr_sys.h"
#include  "ams_mg.h"
#include  "lowlevel.h"
#include  "lk_code.h"
#include  "calcmacr.h"
#include  "def.h"
#include  "low_dbg.h"

#if  PG_DEBUG
  #include  "pg_debug.h"

  #define  MY_MPR   2

  #if  DOS_GRAFY
    #define WAIT   draw_wait(pszd->pld->specl,                      \
                             pszd->x,pszd->y,                       \
                             pszd->pld->ii,_NULL,_NULL,0);
  #else  /* ! DOS_GRAFY */
    #define WAIT  brkeyw("\nPress any key ...");
  #endif

  static _BOOL  bShowArcs          = _FALSE;
  static _BOOL  bShowSideExtr      = _FALSE;
  static _BOOL  bShowPostSideExtr  = _FALSE;


  #define DBG_TIE_UP(el,bShow)  if  ( mpr == MY_MPR && (bShow))        \
                            draw_line(x[(el)->ibeg],y[(el)->ibeg],     \
                                      x[(el)->iend],y[(el)->iend],     \
                                      COLORT,SOLID_LINE,3);
#else
  #define DBG_TIE_UP(el,bShow)  {}
#endif

/************************************************/
#define  KILL_H_AT_S   1
/************************************************/

    /*                                                     */
    /*   The "FindDArcs" function searches for the         */
    /*  strokes shaped like one at the picture (to the left*/
    /*  or to the right).  Then, if needed, some _IU_(_ID_)*/
    /*  elems are changed with appropriate _U...'s.        */
    /*                                                     */
    /*           oooo                                      */
    /*           |    oo <- iMostFarUp                     */
    /*           |      o                                  */
    /*           |       o   "dx" is calculated consi-     */
    /*           |  dx   o   dering slope.                 */
    /*           *-------o <- iCenter                      */
    /*           |       o                                 */
    /*           |      o                                  */
    /*           |     o                                   */
    /*           |   oo <- iMostFarDown                    */
    /*           | o                                       */
    /*           o    <-- Here should be _UDL_ rather      */
    /*                    than _ID_.                       */
    /*                                                     */

#define  MIN_CURV_FOR_SZ_RATIO    (15L)
/*CHE: for measuring using "CurvFromSquare":
#define  MIN_CURV_TO_BEND_ARC     3
*/
#define  MIN_CURV_TO_BEND_ARC           8
#define  MIN_CURV_TO_BEND_LYING_ARC     3
#define  MAX_UP_DOWN_CURV_RATIO         8

#if  1L*CURV_MAX*MAX_UP_DOWN_CURV_RATIO > 1L*ALEF
  #error  Too big MAX_UP_DOWN_CURV_RATIO!!!!
#endif

#define  MIN_CURV_FOR_STRONG_SZ_PENALTY   ((_SHORT)12)
#define  MAX_RATIO_FOR_STRONG_SZ_PENALTY  ((_SHORT)3)
#define  STRONG_SZ_PENALTY                ((_SHORT)4)

/*CHE: for CURV_NORMA==50L:
#define  MIN_CURV_FOR_DIFF_SIGNS  (2)
*/
/*CHE: for measuring using "CurvFromSquare":
#define  MIN_CURV_FOR_DIFF_SIGNS  (3)
*/
#define  MIN_CURV_FOR_DIFF_SIGNS     ((_SHORT)8)
#define  MIN_CURV_FOR_EMBEDDED_ARCS  ((_SHORT)3)
#define  RIGHT_EXTR_DEPTH            ((_SHORT)5)

typedef  struct  {
  low_type _PTR  pld;
  p_SPECL  p1st;
  p_SPECL  p2nd;
  p_SPECL  pNew;
  p_SHORT  x;
  p_SHORT  y;
  p_SHORT  xBuf;
  p_SHORT  yBuf;
  p_SHORT  ind_back;
  _SHORT   hght1st, hght2nd;
  _SHORT   i1stBeg, i1stEnd;           /*  in original trace */
  _SHORT   i2ndBeg, i2ndEnd;           /*  in original trace */
  _SHORT   iCenter;
  _SHORT   iNearBeg, iNearEnd;
  _SHORT   iMostFarUp, iMostFarDown;
  _SHORT   nCurvUp, nCurvDown;
  _SHORT   dx;
  _BOOL    bBackDArc;
} SZD_FEATURES, _PTR p_SZD_FEATURES;


    /*  Auxiliary functions: */

p_SPECL  SkipAnglesAndHMoves ( p_SPECL pElem );
p_SPECL  SkipRealAnglesAndPointsAfter  ( p_SPECL pElem );
p_SPECL  SkipRealAnglesAndPointsBefore ( p_SPECL pElem );

#if  defined(FOR_GERMAN) || defined(FOR_FRENCH)
  p_SPECL  SkipRealAnglesAndPointsAndHMovesAfter ( p_SPECL pElem );
#endif /* FOR_GERMAN... */

_BOOL  FillBasicFeatures( p_SZD_FEATURES pszd, low_type _PTR pld );
_BOOL  PairWorthLookingAt( p_SZD_FEATURES pszd );
_BOOL  FillCurvFeatures( p_SZD_FEATURES pszd );
_BOOL  LooksLikeSZ( p_SHORT x, p_SHORT y, _INT iBeg, _INT iEnd );
_BOOL  FillComplexFeatures( p_SZD_FEATURES pszd );
_BOOL  CheckBackDArcs( p_SZD_FEATURES pszd );
_BOOL  CurvLikeSZ( _SHORT nCurvUp, _SHORT nCurvDown, _SHORT nMinPartCurv );
_BOOL  CurvConsistent( p_SHORT xBuf, p_SHORT yBuf,
                       _INT iBeg, _INT iEnd,
                       p_SHORT ind_back );
_BOOL  CheckSZArcs( p_SZD_FEATURES pszd );
_BOOL  CheckDArcs( p_SZD_FEATURES pszd );
_VOID  ArrangeAnglesNearNew( p_SZD_FEATURES pszd );

/************************************************/


p_SPECL  SkipAnglesAndHMoves ( p_SPECL pElem )
{

  if  ( pElem != _NULL )  {
    do  {
      pElem=pElem->next;
    }
    while  ( pElem!=_NULL  &&  (   IsAnyAngle(pElem)
#if defined (FOR_GERMAN) || defined (FOR_FRENCH) || USE_BSS_ANYWAY
                                || pElem->code==_BSS_
#endif
                               )
           );
  }

  return  pElem;

} /*SkipAnglesAndHMoves*/
/************************************************/

/*  This function computes the "curvature" of the part of tra-*/
/* jectory between points "iBeg" and "iEnd".                  */
/*  The returned value will be ==0, if the curvature is       */
/* very clode to zero;          >0, if the path from "iBeg"   */
/* to "iEnd" goes clockwise;    <0, if counterclockwise.      */
/*  The absolute value of the answer is NOT scaled to the same*/
/* units as that of the "CurvMeasure" function.               */
/*  The difference is that this function doesn't make square  */
/* of the curvature value.                                    */

_SHORT  CurvNonQuadr( p_SHORT x, p_SHORT y,
                      _INT iBeg, _INT iEnd );

_SHORT  CurvNonQuadr( p_SHORT x, p_SHORT y,
                      _INT iBeg, _INT iEnd )
{
  _LONG   lSquare, lQDist;
  _LONG   lRetPrelim;
  _INT    nSgn;
  _SHORT  nRetCod;


  if  ( iBeg == iEnd )
    return  0;

  lSquare = ClosedSquare( x, y, iBeg, iEnd, &nRetCod );
  if  ( nRetCod != RETC_OK )
    return  0;
  nSgn = ( (lSquare >= 0)? (1):(-1) );
  TO_ABS_VALUE( lSquare );

  lQDist = DistanceSquare( iBeg, iEnd, x, y );

      /*  The formula for lRetPrelim:    */
      /*    (S/QD)                       */
      /* S-square, QD-distance square.   */

  if  ( lQDist == 0 )
    lRetPrelim = ALEF;
  else
    lRetPrelim = ONE_NTH( (CURV_NORMA*lSquare), lQDist );

  return  (_SHORT)( nSgn * (_INT)((lRetPrelim > CURV_MAX)? (CURV_MAX):(lRetPrelim)) );

} /*CurvNonQuadr*/
/************************************************/


_BOOL  FillBasicFeatures( p_SZD_FEATURES pszd, low_type _PTR pld )
{
  p_SHORT  ind_back = pszd->ind_back;
  p_SHORT  yBuf     = pszd->yBuf;

  pszd->pld       = pld;
  pszd->hght1st   = HEIGHT_OF(pszd->p1st);
  pszd->hght2nd   = HEIGHT_OF(pszd->p2nd);

  pszd->i1stBeg   = ind_back[pszd->p1st->ibeg];
  pszd->i1stEnd   = ind_back[pszd->p1st->iend];
  if  ( pszd->i1stEnd <= pszd->i1stBeg )  { /* i.e. XR fits only one real point */
    pszd->i1stEnd++;
    if  ( yBuf[pszd->i1stEnd] == BREAK )
      return  _FALSE;
  }

  pszd->i2ndBeg   = ind_back[pszd->p2nd->ibeg];
  pszd->i2ndEnd   = ind_back[pszd->p2nd->iend];
  if  ( pszd->i2ndEnd <= pszd->i2ndBeg )  { /* i.e. XR fits only one real point */
    pszd->i2ndBeg--;
    if  ( yBuf[pszd->i2ndBeg] == BREAK )
      return  _FALSE;
  }

  if  ( pszd->i1stEnd >= pszd->i2ndBeg )
    return  _FALSE;  /* Don't consider partly coinsiding XRs */

       /*  Fight with Gitman's glueing of trace: */
/* CHE: now this is covered by analogous code in "PairWorthLookingAt".
  if  (   yBuf[pszd->i1stBeg] == BREAK
       || yBuf[pszd->i1stEnd] == BREAK
       || yBuf[pszd->i2ndBeg] == BREAK
       || yBuf[pszd->i2ndEnd] == BREAK
      )
    return  _FALSE;
 */

  pszd->bBackDArc = _FALSE;

  return  _TRUE;

} /*FillBasicFeatures*/
/****************************************************/


_BOOL  PairWorthLookingAt( p_SZD_FEATURES pszd )
{
  p_SPECL  p1st = pszd->p1st;
  p_SPECL  p2nd = pszd->p2nd;


  if  (   IsUpperElem(p1st)
       && pszd->hght1st <= _MD_
       && IsLowerElem(p2nd)
       && (   pszd->hght2nd <= _DE1_   /* To differ from "," */
           || pszd->hght1st <= _UE2_
           || (pszd->hght2nd-pszd->hght1st) > DHEIGHT_SMALL_DARCS
          )
      )  { /*20*/

  /*  p_SHORT  xBuf = pszd->xBuf; */
    p_SHORT  yBuf = pszd->yBuf;

        /*  Check for Guitman's "redirected" sticks: */

    if  ( yBuf[pszd->i1stEnd] >= yBuf[pszd->i2ndBeg] )
      return  _FALSE;

        /*  Check for Guitman's glueing (if the real trajectory */
        /* between XRs (XRs included) has the break, then don't */
        /* consider this part):                                 */

    if  ( brk_right(yBuf,pszd->i1stBeg,pszd->i2ndEnd) <= pszd->i2ndEnd )
      return  _FALSE;

        /*  The _IU_(_ID_) elem must have significant slope: */

    //otl
    return  _TRUE;

  /*
    if  ( p1st->code == _IU_ )  {
      _SHORT  dx = xBuf[pszd->i1stBeg] - xBuf[pszd->i1stEnd];
      _SHORT  dy = yBuf[pszd->i1stBeg] - yBuf[pszd->i1stEnd];

      if  ( HWRAbs(dx) > ONE_THIRD(HWRAbs(dy)) )
        return  _TRUE;
    }

    if  ( p2nd->code == _ID_ )  {
      _SHORT  dx = xBuf[pszd->i2ndBeg] - xBuf[pszd->i2ndEnd];
      _SHORT  dy = yBuf[pszd->i2ndBeg] - yBuf[pszd->i2ndEnd];

      if  ( HWRAbs(dx) > ONE_THIRD(HWRAbs(dy)) )
        return  _TRUE;
    }

    if  ( !Is_IU_or_ID(p1st)  &&  !Is_IU_or_ID(p2nd) )
      return  _TRUE;
   */

  } /*20*/

  return  _FALSE;

} /*PairWorthLookingAt*/
/****************************************************/


_BOOL  FillCurvFeatures( p_SZD_FEATURES pszd )
{
  p_SHORT  x        = pszd->x;
  p_SHORT  y        = pszd->y;
  p_SHORT  yBuf     = pszd->yBuf;
  p_SHORT  ind_back = pszd->ind_back;
  _INT     iCenterOrig;                 /*  on the original trace */
  _INT     iNearBegOrig, iNearEndOrig;  /*  on the original trace */
  _INT     iFarUpOrig, iFarDownOrig;    /*  on the original trace */
  _INT     iTip;

  pszd->iMostFarUp   = (_SHORT)iMostFarFromChord(x,y,pszd->iNearBeg,pszd->iCenter);
  pszd->iMostFarDown = (_SHORT)iMostFarFromChord(x,y,pszd->iCenter,pszd->iNearEnd);

        /*  Adjust points: */

  pszd->iCenter  = (_SHORT)MEAN_OF(pszd->iMostFarUp,pszd->iMostFarDown);

        /*  In the case of 3-like right gulf let's have the   */
        /* "center" point at it: */

  if  ( IsRightGulfLikeIn3 ( x, y,
             (pszd->p1st->ipoint0 != UNDEF)?
                 MEAN_OF(pszd->p1st->ipoint0,pszd->iNearBeg) : pszd->iNearBeg,
             (pszd->p2nd->ipoint0 != UNDEF)?
                 MEAN_OF(pszd->p2nd->ipoint0,pszd->iNearEnd) : pszd->iNearEnd,
             &iTip )
      )  {

    #if  PG_DEBUG
    if  ( mpr == MY_MPR  &&  bShowArcs )  {
      printw( "\nRight gulf ..." );
      draw_arc( COLORT, x,y,
                HWRMax(iTip-1,pszd->iNearBeg),
                HWRMin(iTip+1,pszd->iNearEnd) );
    }
    #endif  /*PG_DEBUG*/
    pszd->iCenter = (_SHORT)iTip;
  }

        /*  Characteristic points for calculating curvatures: */

  iCenterOrig  = ind_back[pszd->iCenter];
  iNearBegOrig = ind_back[pszd->iNearBeg];
  iNearEndOrig = ind_back[pszd->iNearEnd];
  iFarUpOrig   = ind_back[pszd->iMostFarUp];
  iFarDownOrig = ind_back[pszd->iMostFarDown];

       /*  Throw away the idiosyncratic cases, such as  */
       /* too straight line between extrs, or too small */
       /* part of original trajectory between them:     */

  if  (   iNearBegOrig >= iCenterOrig
       || iNearEndOrig <= iCenterOrig
      )
    return  _FALSE;

       /*  Fight with Gitman's glueing of trace: */
/* CHE: now this is covered by analogous code in "PairWorthLookingAt".
  if  (   yBuf[iCenterOrig]  == BREAK
       || yBuf[iNearBegOrig] == BREAK
       || yBuf[iNearEndOrig] == BREAK
       || yBuf[iFarUpOrig]   == BREAK
       || yBuf[iFarDownOrig] == BREAK
      )
    return  _FALSE;
 */

        /*  Curvatures of the upper and lower parts:  */
        /* If the original points go rare, then add   */
        /* point at the beg. or end:                  */

  if  ( iCenterOrig-iNearBegOrig <= 1 )  {
    if  ( iNearBegOrig>0  &&  yBuf[iNearBegOrig-1]!=BREAK )
      iNearBegOrig--;
  }
  if  ( iNearEndOrig-iCenterOrig <= 1 )  {
    if  ( yBuf[iNearEndOrig+1]!=BREAK )
      iNearEndOrig++;
  }
  pszd->nCurvUp   = CurvNonQuadr( pszd->xBuf, yBuf,
                                  iNearBegOrig, iCenterOrig );
  pszd->nCurvDown = CurvNonQuadr( pszd->xBuf, yBuf,
                                  iCenterOrig, iNearEndOrig );

#if  PG_DEBUG
  if  ( mpr == MY_MPR  &&  bShowArcs )  {
    CloseTextWindow();
    draw_line( x[pszd->iNearBeg],y[pszd->iNearBeg],
               x[pszd->iCenter],y[pszd->iCenter],
               COLORT,DOTTED_LINE,1);
    draw_line( x[pszd->iNearEnd],y[pszd->iNearEnd],
               x[pszd->iCenter],y[pszd->iCenter],
               COLORT,DOTTED_LINE,1);
    draw_line( x[pszd->iNearBeg],y[pszd->iNearBeg],
               x[pszd->iNearEnd],y[pszd->iNearEnd],
               COLORT,DOTTED_LINE,1);

    {
       _SHORT  nRetCodUp, nRetCodDn;
       p_SHORT xBuf       = pszd->xBuf;
       _LONG   lSqrUp = ClosedSquare( xBuf, yBuf,
                                      iNearBegOrig, iCenterOrig,
                                      &nRetCodUp );
       _LONG   lSqrDn = ClosedSquare( xBuf, yBuf,
                                      iCenterOrig, iNearEndOrig,
                                      &nRetCodDn );

       if  ( nRetCodUp != RETC_OK  ||  nRetCodDn != RETC_OK )
         err_msg( "BAD RetCod from \"ClosedSquare\"." );

       printw( "\nUP: CurvM=%d,  Square=%ld,\n      Curv.from Square = %d.",
               CurvMeasure( xBuf, yBuf,
                            iNearBegOrig, iCenterOrig, iFarUpOrig ),
               lSqrUp,
               CurvNonQuadr( xBuf, yBuf, iNearBegOrig, iCenterOrig )
             );
       printw( "\nDN: CurvM=%d,  Square=%ld,\n      Curv.from Square = %d.",
               CurvMeasure( xBuf, yBuf,
                            iCenterOrig, iNearEndOrig, iFarDownOrig ),
               lSqrDn,
               CurvNonQuadr( xBuf, yBuf, iCenterOrig, iNearEndOrig )
             );
       WAIT
    }

  }
#endif  /*PG_DEBUG*/


        /*  If any half looks like SZ-arc itself, it's wrong: */

  if  (   !EQ_SIGN( pszd->nCurvUp, pszd->nCurvDown )
       && (   LooksLikeSZ( x, y, pszd->iNearBeg, pszd->iCenter )
           || LooksLikeSZ( x, y, pszd->iCenter, pszd->iNearEnd )
          )
      )  {
#if  PG_DEBUG
    if  ( mpr == MY_MPR  &&  bShowArcs )  {
      printw( "\nSome part looks like SZ." );
      WAIT
    }
#endif
    return  _FALSE;
  }


  return  _TRUE;

} /*FillCurvFeatures*/
/****************************************************/

#define  MIN_CURV_FOR_SZLOOKING  ((_SHORT)5)

_BOOL  LooksLikeSZ( p_SHORT x, p_SHORT y, _INT iBeg, _INT iEnd )
{
  _INT    iCenter = MEAN_OF( iBeg, iEnd );
  _SHORT  nCurvUp, nCurvDown;


  if  ( iEnd-iBeg < 4 )
    return  _FALSE;  //at least 5 points needed for SZ-arc

  nCurvUp   = CurvNonQuadr( x, y, iBeg, iCenter );
  nCurvDown = CurvNonQuadr( x, y, iCenter, iEnd );

  if  ( !CurvLikeSZ( nCurvUp, nCurvDown, MIN_CURV_FOR_SZLOOKING ) )
    return  _FALSE;

  return  _TRUE;

} /*LooksLikeSZ*/

#undef  MIN_CURV_FOR_SZLOOKING

/****************************************************/

_BOOL  FillComplexFeatures( p_SZD_FEATURES pszd )
{
  p_SHORT  x        = pszd->x;
  p_SHORT  y        = pszd->y;
  _INT    p1st_ibeg = pszd->p1st->ibeg;
  _INT    p2nd_ibeg = pszd->p2nd->ibeg;
  _INT    p2nd_iend = pszd->p2nd->iend;


      /*  Define main trace features for analysis: */

  pszd->iCenter = (_SHORT)MEAN_OF( p1st_ibeg, p2nd_iend );
  pszd->dx   = (_SHORT)(  x[pszd->iCenter]
                        - MEAN_OF(x[p1st_ibeg],x[p2nd_iend])
                        + SlopeShiftDx(y[pszd->iCenter]
                                        - MEAN_OF(y[p1st_ibeg],y[p2nd_iend]),
                                       pszd->pld->slope)
                       );
              /* to exclude "corner effects": */
  if  (   pszd->p1st->code == _GU_
       || pszd->p1st->mark != BEG
      )
    pszd->iNearBeg = (_SHORT)MID_POINT(pszd->p1st);
  else
    pszd->iNearBeg = (_SHORT)(p1st_ibeg + ONE_FOURTH(pszd->iCenter-p1st_ibeg));
  if  (   pszd->p2nd->code == _GD_
       || pszd->p2nd->mark != END
      )
    pszd->iNearEnd = (_SHORT)MID_POINT(pszd->p2nd);
  else  {
    pszd->iNearEnd = (_SHORT)(p2nd_iend - ONE_FOURTH(p2nd_iend-pszd->iCenter));
  }

     /* Treating of configurations like double-move: */
  if  (   pszd->p2nd->code == _DDL_
       || (   pszd->p2nd->code != _GD_
           && x[p2nd_iend] > x[p2nd_ibeg]
          )
      )  {
    _INT    ixLeft = ixMin( p2nd_ibeg, p2nd_iend, x, y );
    if  (   pszd->iNearEnd > ixLeft
         && ixLeft > p2nd_ibeg
        )  /*  This looks like double-move */
      pszd->iNearEnd = (_SHORT)ixLeft;
  }

     /*  Zatychka from irregularities: */
  if  (   pszd->p1st->ipoint0 != UNDEF
       && pszd->iNearBeg < pszd->p1st->ipoint0
      )
    pszd->iNearBeg = pszd->p1st->ipoint0;
  if  (   pszd->p2nd->ipoint0 != UNDEF
       && pszd->iNearEnd > pszd->p2nd->ipoint0
      )
    pszd->iNearEnd = pszd->p2nd->ipoint0;

  if  ( pszd->iNearEnd < pszd->iNearBeg )
    return  _FALSE;

  if  ( !FillCurvFeatures(pszd) )
    return  _FALSE;

  return  _TRUE;

} /*FillComplexFeatures*/
/****************************************************/

   /*                                                     */
   /*  Looking for situations:                            */
   /*                                                     */
   /*                  ooooooo                            */
   /*                oo       o                           */
   /*                          o                          */
   /*                          o <-iRightUp               */
   /*                          o                          */
   /*                         o                           */
   /*          iLeftMid-> ooo                             */
   /*                       oo                            */
   /*                         oo                          */
   /*                           o                         */
   /*                           o <-iRightDn              */
   /*                           o                         */
   /*                          o                          */
   /*                      ooo                            */
   /*                  oooo                               */
   /*                                                     */

_BOOL  CheckBackDArcs( p_SZD_FEATURES pszd )
{
  _BOOL    bRet     = _FALSE;
  p_SHORT  x        = pszd->x;
  p_SHORT  y        = pszd->y;
  p_SPECL  p1st     = pszd->p1st;
  _INT     iNearBeg = pszd->iNearBeg;
  _INT     iNearEnd = pszd->iNearEnd;
  _INT     iRightUp = iXmax_right( x, y, iNearBeg, RIGHT_EXTR_DEPTH );


  if  ( HWRAbs( pszd->hght1st - pszd->hght2nd ) <= 2 )
    return  _FALSE;

  if  (   x[iRightUp] > x[iNearBeg] + RIGHT_EXTR_DEPTH
       || (   (p1st->code == _UU_ || p1st->code == _UUL_ )
           && CLOCKWISE(p1st)
          )
      )  { /*10*/

    _INT   iLeftMid  = iXmin_right( x, y, iRightUp, RIGHT_EXTR_DEPTH );
    _INT   iRightDn  = iXmax_right( x, y, iLeftMid, RIGHT_EXTR_DEPTH );
    _INT   dyMidUp   = y[iLeftMid] - y[iRightUp];
    _INT   dyDownMid = y[iRightDn] - y[iLeftMid];

    if  (   dyMidUp <= 0
         || dyDownMid <= 0
         || dyMidUp < ONE_THIRD(dyDownMid)
         || dyDownMid < ONE_THIRD(dyMidUp)
         || iYdown_range( y, pszd->p2nd->ibeg, pszd->p2nd->iend ) < iRightDn
        )
      return  _FALSE;

    if  (   x[iRightUp] - x[iLeftMid] < RIGHT_EXTR_DEPTH
         && x[iRightDn] - x[iLeftMid] < RIGHT_EXTR_DEPTH
        )
      return  _FALSE;

    if  (   iRightDn < pszd->p2nd->iend - ONE_EIGHTTH(iNearEnd-iNearBeg)
         && iXmin_right( x, y, iRightDn, RIGHT_EXTR_DEPTH ) >= iNearEnd
        )  { /*20*/

      _INT    diUpMid = iLeftMid - iRightUp;
      _INT    diDnMid = iRightDn - iLeftMid;

      if  (   diUpMid > ONE_HALF(diDnMid)
           && diDnMid > ONE_HALF(diUpMid)
          )  {
        pszd->iNearBeg = (_SHORT)iRightUp;
        pszd->iNearEnd = (_SHORT)iRightDn;
        pszd->iCenter  = (_SHORT)iLeftMid;
        pszd->dx       = x[pszd->iCenter]
                            - MEAN_OF(x[pszd->iNearBeg],x[pszd->iNearEnd]);
        FillCurvFeatures(pszd);
        pszd->bBackDArc = _TRUE;
        bRet = _TRUE;
      }
    } /*20*/
  } /*10*/

  return  bRet;

} /*CheckBackDArcs*/
/****************************************************/


_BOOL  CurvLikeSZ( _SHORT nCurvUp, _SHORT nCurvDown, _SHORT nMinPartCurv )
{

  return  (   (   nCurvUp >= nMinPartCurv
               && nCurvDown <= -nMinPartCurv
              )
           || (   nCurvUp <= -nMinPartCurv
               && nCurvDown >= nMinPartCurv
              )
          );

} /*CurvLikeSZ*/
/****************************************************/

/*  iBeg,iEnd at the call - on SCALED trace !!! : */

_BOOL  CurvConsistent( p_SHORT xBuf, p_SHORT yBuf,
                       _INT iBeg, _INT iEnd,
                       p_SHORT ind_back )
{
  _INT    iCenterBegEnd = ind_back[ MEAN_OF( iBeg, iEnd ) ];
  _SHORT  nCurv1stHalf, nCurv2ndHalf;   /*  Curvatures of halves of the  */
                                        /* sub-arc.                      */

       /*  Now iBeg,iEnd will be on original trace: */

  iBeg = ind_back[iBeg];
  iEnd = ind_back[iEnd];

  if  ( iCenterBegEnd==iBeg  ||  iCenterBegEnd==iEnd )
    return  _FALSE;

  nCurv1stHalf = CurvNonQuadr( xBuf, yBuf, iBeg, iCenterBegEnd );
  nCurv2ndHalf = CurvNonQuadr( xBuf, yBuf, iCenterBegEnd, iEnd );
 /*
  nCurv1stHalf = CurvMeasure( xBuf, yBuf, iBeg, iCenterBegEnd, -1 );
  nCurv2ndHalf = CurvMeasure( xBuf, yBuf, iCenterBegEnd, iEnd, -1 );
  */

  return  ( !CurvLikeSZ( nCurv1stHalf, nCurv2ndHalf, MIN_CURV_FOR_DIFF_SIGNS ) );

} /*CurvConsistent*/
/****************************************************/


#define  MIN_COS_FOR_BROKEN_SZ  (-60)
#define  MAX_COS_FOR_BROKEN_SZ  (-30)

_BOOL  CheckSZArcs( p_SZD_FEATURES pszd )
{
  p_SHORT  x        = pszd->x;
  p_SHORT  y        = pszd->y;
  p_SHORT  xBuf     = pszd->xBuf;
  p_SHORT  yBuf     = pszd->yBuf;
  p_SHORT  ind_back = pszd->ind_back;
  p_SPECL  p1st     = pszd->p1st;
  p_SPECL  p2nd     = pszd->p2nd;
  _SHORT   nCurvMin, nCurvMax;          /*  Max and min among curvatures */
                                        /* of upper and lower sub-arcs   */
  _INT     iCenter  = pszd->iCenter;
  _INT     iNearBeg = pszd->iNearBeg;
  _INT     iNearEnd = pszd->iNearEnd;
  _BOOL    bIsStrongSZ = _TRUE;


  if  ( HWRAbs( pszd->hght1st - pszd->hght2nd ) <= 2 )
    return  _FALSE;

  if  ( y[iNearEnd] <= y[iNearBeg] )
    return  _FALSE;  /* just one more precaution */

  if  (   pszd->nCurvUp < 0
       && x[iNearEnd] > x[iNearBeg]
      )  {  /* Precaution for back-sloped S-arcs-would-be */
    _SHORT  dxEndBeg = x[iNearEnd] - x[iNearBeg];
    _SHORT  dyEndBeg = y[iNearEnd] - y[iNearBeg];

    if  ( dxEndBeg > ONE_HALF(dyEndBeg) )
      return  _FALSE;
    if  (   dxEndBeg > ONE_THIRD(dyEndBeg)
         || (   dxEndBeg > ONE_FOURTH(dyEndBeg)
             && x[iCenter] < x[iNearBeg]
            )
        )
      bIsStrongSZ = _FALSE;
  }

    /* Precaution for "broken curve", like in "n": */
  {
    _INT  nCos = (_INT)cos_vect( iCenter, iNearBeg,
                                 iCenter, iNearEnd,
                                 x, y );
    if  ( nCos >= MIN_COS_FOR_BROKEN_SZ )  {
      _INT  dxBegCenter = HWRAbs( x[iCenter] - x[iNearBeg] );
      _INT  dyBegCenter = HWRAbs( y[iCenter] - y[iNearBeg] );
      _INT  dxEndCenter = HWRAbs( x[iCenter] - x[iNearEnd] );
      _INT  dyEndCenter = HWRAbs( y[iCenter] - y[iNearEnd] );
      if  (   TWO_THIRD(dxBegCenter) > dyBegCenter
           || TWO_THIRD(dxEndCenter) > dyEndCenter
          )  {
        if  ( nCos <= MAX_COS_FOR_BROKEN_SZ )
          bIsStrongSZ = _FALSE;
        else
          return  _FALSE;
      }
    }
  }

  if  (   ( pszd->nCurvUp > 0  &&  pszd->nCurvDown < 0 )
       || ( pszd->nCurvUp < 0  &&  pszd->nCurvDown > 0 )
      )  {
    if  ( bIsStrongSZ )  {
      if  (   CurvLikeSZ( pszd->nCurvUp, pszd->nCurvDown, MIN_CURV_FOR_DIFF_SIGNS )
           && CurvConsistent( xBuf, yBuf, iNearBeg, iCenter, ind_back )
           && CurvConsistent( xBuf, yBuf, iCenter, iNearEnd, ind_back )
          )
        bIsStrongSZ = _TRUE;
      else
        bIsStrongSZ = _FALSE;
    }
  }
  else
    return  _FALSE;


  nCurvMin = (_SHORT)HWRAbs(pszd->nCurvUp);
  nCurvMax = (_SHORT)HWRAbs(pszd->nCurvDown);
  if  ( nCurvMax < nCurvMin )
    SWAP_SHORTS(nCurvMax,nCurvMin);

  if  ( nCurvMin*MAX_UP_DOWN_CURV_RATIO <= nCurvMax )
    return  _FALSE;

/*
  if  (   CurvLikeSZ( pszd->nCurvUp, pszd->nCurvDown, MIN_CURV_FOR_DIFF_SIGNS )
       && CurvConsistent( xBuf, yBuf, iNearBeg, iCenter, ind_back )
       && CurvConsistent( xBuf, yBuf, iCenter, iNearEnd, ind_back )
      )
 */
  {
    if  ( bIsStrongSZ )
      bIsStrongSZ = (_LONG)nCurvMax*MIN_CURV_FOR_SZ_RATIO
                                 > (_LONG)CURV_NORMA;
 /*
    if  (   (_LONG)nCurvMax*MIN_CURV_FOR_SZ_RATIO
                     > (_LONG)CURV_NORMA
         && nCurvMin > ONE_FIFTH(nCurvMax)
        )
  */
    { /*50*/

         /*  The "MostFar" points should have mostly */
         /* horizontal direction (for SZ-arcs):      */

      _BOOL  b1stLeftToRight;
      _BOOL  b2ndLeftToRight;
      _BOOL  bIs1stBendable, bIs2ndBendable;
#if  NEW_VERSION
      _SHORT  xMeanUpCenter = (_SHORT)MEAN_OF( x[iNearBeg], x[iCenter] );
      _SHORT  yMeanUpCenter = (_SHORT)MEAN_OF( y[iNearBeg], y[iCenter] );
      _SHORT  xMeanDownCenter = (_SHORT)MEAN_OF( x[iNearEnd], x[iCenter] );
      _SHORT  yMeanDownCenter = (_SHORT)MEAN_OF( y[iNearEnd], y[iCenter] );
      _BOOL  bMakeSZArc;
      bMakeSZArc = (      bIsStrongSZ
                    &&    THREE_HALF(HWRAbs(x[pszd->iMostFarUp]
                                                  - xMeanUpCenter))
                       >= HWRAbs(y[pszd->iMostFarUp] - yMeanUpCenter)
                   );
      bMakeSZArc = (      bMakeSZArc
                    &&    THREE_HALF(HWRAbs(x[pszd->iMostFarDown]
                                                  - xMeanDownCenter))
                       >= HWRAbs(y[pszd->iMostFarDown] - yMeanDownCenter)
                   );
      bMakeSZArc = (      bMakeSZArc
                    &&    HWRAbs(x[pszd->iMostFarUp] - x[pszd->iMostFarDown])
                       >= /*ONE_HALF*/ONE_THIRD(HWRAbs(pszd->dx))
                   );

      if  ( bMakeSZArc  &&  pszd->nCurvUp > 0 )  { /*70*/

           /*  Check if the lower part of the Z-arc is closer to the   */
           /* left substroke than upper, like this:                    */
           /*                                                          */
           /*                     oooooo                               */
           /*                   oo      o                              */
           /*                   o        o                             */
           /* iOpposUp ------>  o        o  <---- iMostFarUp           */
           /*                   o        o                             */
           /*                   o       o                              */
           /*                   o      o                               */
           /*                   o    oo                                */
           /* iOpposDown ---->  o   o   <-------- iMostFarDown         */
           /*                   o    o                                 */
           /*                   o     oo                               */
           /*                  o        ooo                            */
           /*                                                          */
           /*  Or if the arc is the single stroke.                     */
           /*                                                          */

        if  ( p1st->mark != BEG )  { /*90*/
          p_SPECL  pPrev;

          if  (   (pPrev = SkipAnglesBefore(p1st)) != _NULL
               && IsLowerElem(pPrev)
               && pPrev->ibeg < iNearBeg
              )  {
            _INT     iRefPrev     = MEAN_OF(pPrev->ibeg,pPrev->iend);
            _INT     iOpposUp     = iClosestToY( y,
                                                 iRefPrev,
                                                 iNearBeg,
                                                 y[pszd->iMostFarUp] );
            _INT     iOpposDown   = iClosestToY( y,
                                                 iRefPrev,
                                                 iNearBeg,
                                                 y[pszd->iMostFarDown] );
            _INT     iOpposCenter = iClosestToY( y,
                                                 iRefPrev,
                                                 iNearBeg,
                                                 y[pszd->iCenter] );
            _INT     iOtherOpposDown;
            p_SPECL  pPrev2;

            if  (   (pPrev2 = SkipAnglesBefore(pPrev)) != _NULL
                 && IsUpperElem(pPrev2)
                 && pPrev2->ibeg < iRefPrev
                )  {
              iOtherOpposDown = iClosestToY( y,
                                             MEAN_OF(pPrev2->ibeg,pPrev2->iend),
                                             iRefPrev,
                                             y[pszd->iMostFarDown] );
              if  ( x[iOtherOpposDown] > x[iOpposDown] )
                iOpposDown = iOtherOpposDown;
            }

#if  PG_DEBUG
  if  ( mpr == MY_MPR  &&  bShowArcs )  {
    draw_line( x[iOpposUp],y[iOpposUp],
               x[pszd->iMostFarUp],y[pszd->iMostFarUp],
               COLORT,DOTTED_LINE,1);
    draw_line( x[iOpposDown],y[iOpposDown],
               x[pszd->iMostFarDown],y[pszd->iMostFarDown],
               COLORT,DOTTED_LINE,1);
    draw_line( x[iOpposCenter],y[iOpposCenter],
               x[pszd->iCenter],y[pszd->iCenter],
               COLORT,DOTTED_LINE,1);
  }
#endif  /*PG_DEBUG*/

            if  (   HWRAbs(x[pszd->iMostFarUp] - x[iOpposUp])
                     < FOUR_THIRD(HWRAbs(x[pszd->iMostFarDown] - x[iOpposDown]))
                 && HWRAbs(x[pszd->iCenter] - x[iOpposCenter])
                     > (x[pszd->iMostFarUp] - x[iOpposUp])
                )
              bMakeSZArc = _FALSE;
          }
        } /*90*/
      } /*70*/

      if  ( bMakeSZArc )  {
         /*  This is S-like vertical arc: */

        /*DBG_err_msg("S(Z)-like arc found");*/
        if  ( (pszd->pNew = NewSPECLElem(pszd->pld)) == _NULL )
          goto  ERR_EXIT;
        ASSIGN_HEIGHT( pszd->pNew, _MD_ );
        pszd->pNew->ibeg = (_SHORT)iNearBeg;   /*p1st->iend;*/
        pszd->pNew->iend = (_SHORT)iNearEnd;   /*p2nd->ibeg;*/
        if  ( pszd->nCurvUp > 0 )
          pszd->pNew->code = _TZ_;
        else
          pszd->pNew->code = _TS_;
        Insert2ndAfter1st( p1st, pszd->pNew );
          /* Define the penalty for skipping the new elem.: */
        pszd->pNew->other = 0;
        if  ( nCurvMin > MIN_CURV_FOR_STRONG_SZ_PENALTY )  {
          if  ( (nCurvMax / nCurvMin) > MAX_RATIO_FOR_STRONG_SZ_PENALTY )
            pszd->pNew->other = ONE_HALF( STRONG_SZ_PENALTY );
          else  
            pszd->pNew->other = STRONG_SZ_PENALTY;
        }
#if  PG_DEBUG
  if  ( mpr == MY_MPR )  {
    draw_arc( COLORT, x,y, pszd->pNew->ibeg, pszd->pNew->iend );
    if  ( bShowArcs )
      brkeyw("\nS(Z)-like arc found");
  }
#endif  /*PG_DEBUG*/

      }
#endif  /*NEW_VERSION*/

      b1stLeftToRight = (x[p1st->ibeg] < x[p1st->iend]);
      b2ndLeftToRight = (x[p2nd->ibeg] < x[p2nd->iend]);

    //  if  ( bIsStrongSZ )  {
    //    bIs1stBendable = _TRUE;
    //    bIs2ndBendable = _TRUE;
    //  }
    //  else
      {
        _RECT   box;
        GetTraceBox( xBuf, yBuf,
                     pszd->i1stBeg,
                     HWRMax( pszd->i1stEnd, ind_back[pszd->iMostFarUp] ),
                     &box );
        bIs1stBendable = (   (   (   bIsStrongSZ
                                  || HWRAbs(pszd->nCurvUp) > MIN_CURV_TO_BEND_ARC
                                 )
                              && DX_RECT(box) > ONE_HALF(DY_RECT(box))
                             )
                          || (   DX_RECT(box) > THREE_HALF(DY_RECT(box))
                              && HWRAbs(pszd->nCurvUp) > MIN_CURV_TO_BEND_LYING_ARC
                             )
                         );
        GetTraceBox( xBuf, yBuf,
                     HWRMin( pszd->i2ndBeg, ind_back[pszd->iMostFarDown] ),
                     pszd->i2ndEnd,
                     &box );
        bIs2ndBendable = (   (   (   bIsStrongSZ
                                  || HWRAbs(pszd->nCurvDown) > MIN_CURV_TO_BEND_ARC
                                 )
                              && DX_RECT(box) > ONE_HALF(DY_RECT(box))
                             )
                          || (   DX_RECT(box) > THREE_HALF(DY_RECT(box))
                              && HWRAbs(pszd->nCurvDown) > MIN_CURV_TO_BEND_LYING_ARC
                             )
                         );
      }

      if  ( pszd->nCurvUp > 0 )  {  /* Z-like arc */
        if  (   p1st->code == _IU_
             && p1st->mark == BEG
             && bIs1stBendable
             && b1stLeftToRight
            )  {
          p1st->code = _UUL_;
          SET_CLOCKWISE(p1st);
//                      SetBit(p1st,X_UUL_f);
          DBG_TIE_UP(p1st,bShowArcs);
        }
        if  (   p2nd->code == _ID_
             && p2nd->mark == END
             && bIs2ndBendable
             && b2ndLeftToRight
            )  {
          p2nd->code = _UDR_;
          SET_COUNTERCLOCKWISE(p2nd);
//                      SetBit(p2nd,X_UDR_b);
          DBG_TIE_UP(p2nd,bShowArcs);
        }
      }
      else  /* pszd->nCurvUp < 0 */  {  /* S-like arc */
        if  (   p1st->code == _IU_
             && p1st->mark == BEG
             && bIs1stBendable
             && !b1stLeftToRight
            )  {
          p1st->code = _UUR_;
          SET_COUNTERCLOCKWISE(p1st);
//                      SetBit(p1st,X_UUR_b);
          DBG_TIE_UP(p1st,bShowArcs);
        }
        if  (   p2nd->code == _ID_
             && p2nd->mark == END
             && bIs2ndBendable
             && !b2ndLeftToRight
            )  {
          p2nd->code = _UDL_;
          SET_CLOCKWISE(p2nd);
//                      SetBit(p2nd,X_UDL_f);
          DBG_TIE_UP(p2nd,bShowArcs);
        }
      }
    } /*50*/
  }

  return  _TRUE;

 ERR_EXIT:;
  return  _FALSE;

} /*CheckSZArcs*/

#undef  MAX_COS_FOR_BROKEN_SZ
#undef  MIN_COS_FOR_BROKEN_SZ

/****************************************************/


_BOOL  CheckDArcs( p_SZD_FEATURES pszd )
{

  if  (   pszd->bBackDArc
       || (pszd->nCurvUp >= 0  &&  pszd->nCurvDown >= 0)
       || (pszd->nCurvUp <= 0  &&  pszd->nCurvDown <= 0)
      )  { /*20*/

    p_SHORT  x        = pszd->x;
    p_SHORT  y        = pszd->y;
    p_SHORT  ind_back = pszd->ind_back;
    p_SPECL  p1st     = pszd->p1st;
    p_SPECL  p2nd     = pszd->p2nd;
    _INT    p1st_ibeg = p1st->ibeg;
    _INT    p1st_iend = p1st->iend;
    _INT    p2nd_ibeg = p2nd->ibeg;
    _INT    p2nd_iend = p2nd->iend;
    _SHORT  dxAbs     = (_SHORT)HWRAbs(pszd->dx);
    _INT    dHeight   = pszd->hght2nd - pszd->hght1st;
    _SHORT  dx1st2nd;
    _SHORT  dy1st2nd, dyPart1st2nd;
    _INT    iNearBeg  = pszd->iNearBeg;
    _INT    iNearEnd  = pszd->iNearEnd;
    _BOOL   bFormula  = (pszd->pld->rc->rec_mode == RECM_FORMULA);
    _SHORT  nCurvMin, nCurvMax;


    nCurvMin = (_SHORT)HWRAbs(pszd->nCurvUp);
    nCurvMax = (_SHORT)HWRAbs(pszd->nCurvDown);
    if  ( nCurvMax < nCurvMin )
      SWAP_SHORTS(nCurvMax,nCurvMin);

        /*  The curvature shouldn't change the sign too much */
        /* for D-arc (OK for S- or Z-arc):                   */
        /*  The curvature should be in appropriate interval: */

    {
      _INT  i1ForDx, i2ForDx;

      if  ( p1st->code == _IU_  ||  p1st->code == _UU_ )
        i1ForDx = p1st_ibeg;
      else
        i1ForDx = iNearBeg;

      if  ( p2nd->code == _ID_  ||  p2nd->code == _UD_ )
        i2ForDx = p2nd_iend;
      else
        i2ForDx = iNearEnd;

      dx1st2nd =   (_SHORT)HWRAbs(x[i1ForDx] - x[i2ForDx]);
            /*
                 + SlopeShiftDx( y[i1ForDx] - y[i2ForDx],
                                 pszd->pld->slope );
             */
      dy1st2nd  = (_SHORT)HWRAbs(y[i1ForDx] - y[i2ForDx]);
      dyPart1st2nd = (_SHORT)ONE_FOURTH( dy1st2nd );
    }

    if  (   (                                     /* for small arcs */
                dxAbs > dyPart1st2nd              /* Rather big curvature */
             && (    dx1st2nd < ONE_THIRD(dy1st2nd)
                 || (   dx1st2nd < dy1st2nd
                     && (   x[p1st_ibeg] > x[p2nd_iend]
                         || nCurvMin > MIN_CURV_TO_BEND_LYING_ARC
                        )
                    )
                )
            )
         || (   (   dHeight >= DHEIGHT_BIG_DARCS /* for big arcs */
                 || (   pszd->nCurvUp>0    /*right bracket*/
                     && pszd->nCurvDown>0
                    )
                 || pszd->pld->rc->lmod_border_used == LMOD_BORDER_NUMBER
                )
             && dx1st2nd < TWO(dxAbs)            /* Not extremely big curvature */
             && (   dxAbs > dyPart1st2nd           /* Rather big curvature */
                 || (   dxAbs > ONE_HALF(dyPart1st2nd) /* Small curvature  */
                     && y[p2nd_iend] > STR_DOWN        /* End lower than   */
                    )                                  /*lower line bord.  */
                 || (   dxAbs > ONE_THIRD(dyPart1st2nd) /* Small curvature  */
                     && pszd->dx > 0                    /* Right bracket    */
                    )
                )
            )
         || pszd->bBackDArc
        )  { /*60*/


      if  ( !pszd->bBackDArc )  {
              /*  For non-two-xr strokes require rather big curvature: */
        if  ( p1st->mark != BEG  ||  p2nd->mark != END )  {
          if  ( nCurvMin < MIN_CURV_FOR_EMBEDDED_ARCS )
            goto  ERR_EXIT;
        }
      }

              /* This is D-arc */

      if  (   (   dHeight >= DHEIGHT_BIG_DARCS
               && nCurvMin > ONE_THIRD(nCurvMax)
              )
           || (   nCurvMin > 0
               && (   !Is_IU_or_ID(p1st)
                   || !Is_IU_or_ID(p2nd)
                  )
              )
           || pszd->bBackDArc
          )  { /* Big arc */
        _SHORT  nCurvAll = CurvNonQuadr( pszd->xBuf, pszd->yBuf,
                                           ind_back[iNearBeg],
                                           ind_back[iNearEnd] );
        _SHORT  dyCenterBeg = y[pszd->iCenter] - y[iNearBeg];
        _SHORT  dyEndCenter = y[iNearEnd] - y[pszd->iCenter];
        if  (   nCurvAll != 0
             && HWRAbs(nCurvAll) >= ONE_HALF(nCurvMin)
             && dyCenterBeg > 0
             && dyEndCenter > 0
             && (   pszd->bBackDArc
                 || (   !EQ_SIGN(pszd->nCurvUp,nCurvAll)
                     && !EQ_SIGN(pszd->nCurvDown,nCurvAll)
                     && dyCenterBeg > ONE_HALF(dyEndCenter)
                     && dyEndCenter > ONE_HALF(dyCenterBeg)
                    )
                )
            )  {
          if  ( (pszd->pNew = NewSPECLElem(pszd->pld)) == _NULL )
            goto  ERR_EXIT;
          pszd->pNew->ibeg = (_SHORT)iNearBeg;
          pszd->pNew->iend = (_SHORT)iNearEnd;
          ASSIGN_HEIGHT( pszd->pNew, _MD_ );
          if  ( pszd->dx > 0 )
            pszd->pNew->code = _BR_;
          else
            pszd->pNew->code = _BL_;
          Insert2ndAfter1st( p1st, pszd->pNew );

  #if  PG_DEBUG
    if  ( mpr == MY_MPR )  {
      draw_arc( COLORT, x,y, pszd->pNew->ibeg, pszd->pNew->iend );
    }
  #endif  /*PG_DEBUG*/

        }
      }

      if  (   !pszd->bBackDArc
           && (   p1st->mark == BEG
               || p2nd->mark == END
              )
          )
      {
        _BOOL    bProcessOnlySloped =
                          (   bFormula
                           || (dHeight < DHEIGHT_BIG_DARCS)
                           || pszd->hght1st >= _UI1_
                           || pszd->hght2nd <= _DI2_
                           || p1st->mark != BEG
                           || p2nd->mark != END
                           || dxAbs < ONE_HALF(dyPart1st2nd)
                          );
        _BOOL    bIsCrossed = _FALSE;
        _BOOL    b1stSloped = _TRUE,
                 b2ndSloped = _TRUE;
        _BOOL    b1stLeftToRight = (x[p1st_ibeg] < x[p1st_iend]);
        _BOOL    b2ndLeftToRight = (x[p2nd_ibeg] < x[p2nd_iend]);
        p_SPECL  pPrev = p1st->prev;

           /*   If there is _XT_ crossing this stroke, */
           /* then replace only sloped _I(UD)_:        */
        while ( pPrev!=_NULL  &&  IsAnyBreak(pPrev) )
          pPrev = pPrev->prev;
        if  ( pPrev->code==_XT_  ||  pPrev->code==_ST_ )  {
          bProcessOnlySloped = bIsCrossed = _TRUE;
        }

        if  ( bProcessOnlySloped )  {
          _RECT   box1, box2;
          _SHORT  dxBox1, dxBox2;
          _INT    iMostFarAll = iMostFarFromChord( x, y, iNearBeg, iNearEnd );
          _SHORT  dy1stFar    = (_SHORT)HWRAbs( y[iMostFarAll] - y[iNearBeg] );
          _SHORT  dy2ndFar    = (_SHORT)HWRAbs( y[iNearEnd] - y[iMostFarAll] );
          _SHORT  dyPart1st, dyPart2nd;

              /*  Calculating the data for checking the balance */
              /* between upper and lower parts:                 */

          if  ( bFormula  ||  dHeight>=DHEIGHT_BIG_DARCS )  {
            dyPart1st = ONE_HALF(dy1stFar);
            dyPart2nd = ONE_HALF(dy2ndFar);
          }
          else  {
            dyPart1st = ONE_THIRD(dy1stFar);
            dyPart2nd = ONE_THIRD(dy2ndFar);
          }

              /*  Calc. boxes of upper and lower parts of D-arc */
              /* to find out the slopeness of them:             */

          GetTraceBox( x, y, p1st_ibeg, HWRMax(p1st_iend,iNearBeg), &box1);
          dxBox1 = DX_RECT(box1);
          GetTraceBox( x, y, HWRMin(p2nd_ibeg,iNearEnd), p2nd_iend, &box2);
          dxBox2 = DX_RECT(box2);

              /*  Define the slopeness of upper and lower parts of */
              /* D-arc:                                            */

          if  (   p2nd->mark != END
               && dxBox1 < ONE_HALF(dxBox2)
              )
            b1stSloped = _FALSE;
          else  {
            if  ( dyPart1st > dy2ndFar )
              b1stSloped = _FALSE;
            else  {
              register _SHORT  dyBox1 = DY_RECT(box1);
              if  ( bIsCrossed )
                b1stSloped = ( dyBox1 < dxBox1 );
              else
                b1stSloped = (   TWO(dyBox1) <= THREE(dxBox1)
                              || (   dHeight > DHEIGHT_SMALL_DARCS
                                  && dyBox1 <= TWO(dxBox1)
                                 )
                             );
            }
          }

          if  (   p1st->mark != BEG
               && dxBox2 < ONE_THIRD(dxBox1)
              )
            b2ndSloped = _FALSE;
          else  {
            if  ( dyPart2nd > dy1stFar )
              b2ndSloped = _FALSE;
            else  {
              register _SHORT  dyBox2 = DY_RECT(box2);
              if  ( bIsCrossed )
                b2ndSloped = ( dyBox2 < dxBox2 );
              else
                b2ndSloped = (   ( dyBox2 <= THREE_HALF(dxBox2))
                              || (   (dyBox2 <= TWO(dxBox2))
                                  && pszd->hght2nd > _DI2_
                                 )
                             );
            }
          }
        }
        //else  {
        //  b1stSloped = b2ndSloped = _TRUE;
        //}


              /*  To differ "(" from "L": */
        if  (   (pszd->nCurvUp <= 0  &&  pszd->nCurvDown <= 0)
             && pszd->nCurvUp >= - MIN_CURV_FOR_EMBEDDED_ARCS
            )  {
          p_SPECL  pEnd;
          _INT     nExtrType;
          _INT     iSideExtr, iInEnd;

          if  ( p2nd->mark == END )
            pEnd = p2nd;
          else  {
            pEnd = SkipRealAnglesAndPointsAfter( p2nd );
            if  ( pEnd == _NULL  ||  IsAnyBreak(pEnd) )
              pEnd = p2nd;
          }

          iInEnd = iyMax ( pEnd->ibeg, pEnd->iend, y );
          if  ( iInEnd < 0 )
            goto  ERR_EXIT;
          iInEnd = MEAN_OF( iInEnd, pEnd->iend );

          nExtrType = SideExtr( x, y, iNearBeg, iInEnd,
                                0, pszd->xBuf, pszd->yBuf, ind_back,
                                &iSideExtr, !STRICT_ANGLE_STRUCTURE );
          if  (   nExtrType == SIDE_EXTR_LIKE_2ND
               || nExtrType == SIDE_EXTR_LIKE_2ND_WEAK
              )
            b1stSloped = _FALSE;
        }


            /*  Assign arc values to ends of D-arc according to */
            /* the data obtained:                               */

        if  ( pszd->dx > 0 )  {
          if  (   p1st->code == _IU_
               && b1stSloped
               && b1stLeftToRight
               && p1st->mark == BEG
               && pszd->nCurvUp > 0
               && (pszd->pld->rc->low_mode & LMOD_SMALL_CAPS) == 0
              )  {
            p1st->code = _UUL_;
            SET_CLOCKWISE(p1st);
            DBG_TIE_UP(p1st,bShowArcs);
          }
          if  (   p2nd->code == _ID_
               && b2ndSloped
               && !b2ndLeftToRight
               && p2nd->mark == END
               && pszd->nCurvDown > 0
              )  {
            p2nd->code = _UDL_;
            SET_CLOCKWISE(p2nd);
            DBG_TIE_UP(p2nd,bShowArcs);
          }
        }
        else  {
          if  (   p1st->code == _IU_
               && b1stSloped
               && !b1stLeftToRight
               && p1st->mark == BEG
               && pszd->nCurvUp < 0
               && (pszd->pld->rc->low_mode & LMOD_SMALL_CAPS) == 0
              )  {
            p1st->code = _UUR_;
            SET_COUNTERCLOCKWISE(p1st);
            DBG_TIE_UP(p1st,bShowArcs);
          }
          if  (   p2nd->code == _ID_
               && b2ndSloped
               && b2ndLeftToRight
               && p2nd->mark == END
               && pszd->nCurvDown < 0
              )  {
            p2nd->code = _UDR_;
            SET_COUNTERCLOCKWISE(p2nd);
            DBG_TIE_UP(p2nd,bShowArcs);
          }
        }
      }

  #if  PG_DEBUG
    if  ( mpr == MY_MPR && bShowArcs )  {
      if  ( pszd->pNew != _NULL )
        brkeyw("\nD-like arc found");
      WAIT
    }
  #endif  /*PG_DEBUG*/

    } /*60*/

  } /*20*/

  return  _TRUE;

 ERR_EXIT:;
  return  _FALSE;

} /*CheckDArcs*/
/****************************************************/

#define  MAX_COS_TO_DELETE_ANGLES  60

_VOID  ArrangeAnglesNearNew( p_SZD_FEATURES pszd )
{
  p_SPECL  pNew = pszd->pNew;

      /* Arrange angles around new found (S,Z,D)-arc, if any: */

  if  ( pNew != _NULL )  { /*90*/
    _INT     iLastPrevAngles = ONE_FOURTH( THREE(pNew->ibeg) + pNew->iend );
    _INT     iFrstPostAngles = ONE_FOURTH( pNew->ibeg + THREE(pNew->iend) );
    p_SPECL  pAngle;
    _INT     nCos;

    for  ( pAngle=pNew->next;
           pAngle!=_NULL && IsAnyAngle(pAngle); /* GIT - new macros */
           pAngle=pAngle->next )  {
      if  ( pAngle->iend <= iFrstPostAngles )  {
        p_SPECL pContinue = pAngle;  DBG_CHK_err_msg( pAngle->prev==_NULL, "DArcs: bad ang->prev");
        if  (   pAngle->ibeg <= iLastPrevAngles
             || (   ( pNew->code == _TZ_  ||  pNew->code == _TS_ )
                 && (   pAngle->ibeg <= pszd->iCenter
                     || pAngle->mark != ANGLE
                    )
                )
            )  {
          pContinue = pAngle->prev;
          Move2ndAfter1st( pNew->prev, pAngle );
        }
        else  if  ( pAngle->mark == ANGLE )  {
             /*  Should this angle appear cute and long enough - don't */
             /* delete it. Otherwise - kill.                           */
          if  ( pNew->code == _BR_  ||  pNew->code == _BL_ )
            nCos = -100; //min. cos. value (-100..100); i.e. always delete angle
          else  {
            if  ( pAngle->ipoint0 > pszd->iCenter )
              nCos = (_INT)cos_vect( pAngle->ipoint0, pszd->iCenter,
                                     pAngle->ipoint0, pNew->iend,
                                     pszd->x, pszd->y );
            else
              nCos = (_INT)cos_vect( pAngle->ipoint0, pszd->iCenter,
                                     pAngle->ipoint0, pNew->ibeg,
                                     pszd->x, pszd->y );
          }
#if  PG_DEBUG
          if  ( mpr == 2 )  {
            draw_arc( 3, pszd->x, pszd->y, pAngle->ibeg, pAngle->iend );
            printw( "\ncos = %d", nCos );
            brkeyw( " " );
          }
#endif
          if  ( nCos < MAX_COS_TO_DELETE_ANGLES )  {
            pContinue = pAngle->prev;
            DelFromSPECLList( pAngle );
          }
          else  if  ( pAngle->ibeg <= pszd->iCenter )  {
            pContinue = pAngle->prev;
            Move2ndAfter1st( pNew->prev, pAngle );
          }
        }
        pAngle = pContinue;  /* for good work of "pAngle=pAngle->next" in this "for" loop */
      }
    }
  } /*90*/

} /*ArrangeAnglesNearNew*/

#undef  MAX_COS_TO_DELETE_ANGLES

/****************************************************/

#if  KILL_H_AT_S

#if defined (FOR_GERMAN) || defined (FOR_FRENCH) || USE_BSS_ANYWAY
_VOID  KillHAtNewElem( p_SZD_FEATURES pszd );

_VOID  KillHAtNewElem( p_SZD_FEATURES pszd )
{
  p_SPECL  pH = SkipAnglesAfter( pszd->pNew );


  if  ( pH == _NULL )  {
    DBG_err_msg( "BAD pH in KILLH..." );
    return;
  }

  if  ( pH->code == _BSS_ )
    DelFromSPECLList( pH );

} /*KillHAtNewElem*/

#endif  /* FOR_GERMAN... */
#endif  /*KILL_H_AT_S*/
/****************************************************/


    /*  Main S,Z,D - arcs function: */

_SHORT  FindDArcs ( low_type _PTR pld )
{
  p_SPECL  specl = pld->specl;
  SZD_FEATURES  szd;


  szd.x        = pld->x;
  szd.y        = pld->y;
  szd.xBuf     = pld->xBuf;
  szd.yBuf     = pld->yBuf;
  szd.ind_back = pld->buffers[2].ptr;


#if  PG_DEBUG
  if  ( mpr == MY_MPR )  {
    _CHAR  szDBG[40] = "";
    InqString( "\nShow SZD-arcs ? ", szDBG );
    if  ( szDBG[0]=='Y'  ||  szDBG[0]=='y' )
      bShowArcs = _TRUE;
    else
      bShowArcs = _FALSE;
  }
#endif

       /*  Find strokes with exactly two SPECL elems on them, */
       /* except maybe angles,                                */
       /* first being upper one, second - lower,              */
       /* and at least one of them being _IU_(_ID_):          */

  for  ( szd.p1st=specl->next;
         szd.p1st!=_NULL;
         szd.p1st=szd.p1st->next )  { /*10*/

#if  NEW_VERSION
    szd.pNew = _NULL;
#endif  /*NEW_VERSION*/

         /*  Skip all angles, if any: */

    szd.p2nd = SkipAnglesAndHMoves(szd.p1st);

    if  ( szd.p2nd != _NULL )  { /*20*/

#if  NEW_VERSION
#else
      if  (   szd.y[szd.p1st->ibeg-1] == BREAK
           || szd.y[szd.p2nd->iend+1] == BREAK
          )
#endif

      { /*30*/

          if  ( CrossInTime( szd.p1st, szd.p2nd ) )
            continue;

          if  ( !FillBasicFeatures( &szd, pld ) )
            continue;

          if  (   PairWorthLookingAt(&szd)
               && FillComplexFeatures(&szd)
              )  {
            if  (   CheckBackDArcs(&szd)
                 || !CheckSZArcs(&szd)
                )
              CheckDArcs(&szd);
          }

          if  ( szd.pNew != _NULL )  {
#if  KILL_H_AT_S
#if defined (FOR_GERMAN) || defined (FOR_FRENCH) || USE_BSS_ANYWAY
            KillHAtNewElem( &szd );
#endif  /* FOR_GERMAN... */
#endif
            ArrangeAnglesNearNew(&szd);
          }

      } /*30*/

    } /*20*/

  } /*10*/


  return  SUCCESS;

} /*FindDArcs*/
/****************************************************/

#define  IsLowerULike(el)  (   REF(el)->code == _UD_                        \
                            || (el)->code == _ID_                           \
                            || (el)->code == _UDL_                          \
                            || (el)->code == _UDR_ )
#define  IsUpperULike(el)  (   REF(el)->code == _UU_                        \
                            || (el)->code == _IU_                           \
                            || (el)->code == _UUL_                          \
                            || (el)->code == _UUR_ )

#define  NO_DIR  0
#define  UP_DIR  1
#define  DN_DIR  2

#define  MIN_SIGNIF_CURV        1  
#define  MAX_DX_TO_MAKE_I      15
#define  MAX_ABS_DX_TO_MAKE_I  20

_VOID  Adjust_I_U ( low_type _PTR low_data )  /*CHE*/
{
  p_SPECL    specl = low_data->specl;
  p_SHORT    x     = low_data->x;
  p_SHORT    y     = low_data->y;
  p_SPECL    cur, prv, nxt;
  _SHORT     dxCur, dxPrvNxt;
  _INT       nUpDown;


  for  ( cur = specl->next;
         cur != _NULL  &&  cur->next != _NULL;
         cur = cur->next )  { /*10*/

    if  ( cur->prev->code == _NO_CODE )
      continue;

    prv = cur->prev;
    nxt = cur->next;

         /*  Define situation: */

    if  ( cur->mark == BEG || cur->mark == END )
      continue;

    if  (   prv->iend >= cur->ibeg
         || nxt->ibeg <= cur->iend
        )
      continue;  /* They should be distinct elements. */

    nUpDown = NO_DIR;

    if  ( IsUpperULike(cur) )  {
      if  ( IsLowerULike(prv) && IsLowerULike(nxt) )  {
        //nUpDown = UP_DIR;
        continue;  /*don't consider upper arcs */
      }
    }
    else  if  ( IsLowerULike(cur) )  {
      if  ( IsUpperULike(prv) && IsUpperULike(nxt) )
        nUpDown = DN_DIR;
    }

    dxCur = x[cur->iend] - x[cur->ibeg];
    TO_ABS_VALUE(dxCur);
    dxPrvNxt = x[MID_POINT(nxt)] - x[MID_POINT(prv)];
    TO_ABS_VALUE(dxPrvNxt);
    if  (   dxCur > MAX_ABS_DX_TO_MAKE_I
         || (   dxCur > MAX_DX_TO_MAKE_I
             && dxCur > ONE_FOURTH(dxPrvNxt)
            )
        )
      continue;  /* don't process very wide arcs */

    if  ( nUpDown != NO_DIR )  {
      _INT    hghtPrv = HEIGHT_OF(prv);
      _INT    hghtNxt = HEIGHT_OF(nxt);
      _INT    hghtCur = HEIGHT_OF(cur);

      if  ( hghtPrv==hghtCur || hghtNxt==hghtCur )
        continue;
    }

    if  (   nUpDown != NO_DIR
         && brk_right(y,prv->iend,cur->ibeg) < cur->ibeg
         && brk_right(y,cur->iend,nxt->ibeg) < nxt->ibeg
        )
      continue;  /* this should be the continnuous part of trj. */

        /*  Analyze:             */

    if  ( nUpDown != NO_DIR )  {
      _INT    iMidCur    = MID_POINT(cur);
      _INT    iCurv1Pt   = ONE_THIRD(TWO(MID_POINT(prv)) + iMidCur);
      _INT    iCurv2Pt   = ONE_THIRD(TWO(MID_POINT(nxt)) + iMidCur);
      _SHORT  nCurv1     = CurvMeasure( x, y, MID_POINT(prv),
                                        iMidCur, iCurv1Pt );
      _SHORT  nCurv2     = CurvMeasure( x, y, iMidCur,
                                        MID_POINT(nxt), iCurv2Pt );
      _SHORT  nCurvAll   = CurvMeasure( x, y, prv->iend, nxt->ibeg, iMidCur );
      _BOOL   b1stCurved = (HWRAbs(nCurv1) >= MIN_SIGNIF_CURV);
      _BOOL   b2ndCurved = (HWRAbs(nCurv2) >= MIN_SIGNIF_CURV);
      _UCHAR  code       = _NO_CODE;

      if  ( !b1stCurved && !b2ndCurved )  {
        _SHORT  nCurvTip = CurvMeasure( x, y, cur->ibeg, cur->iend, -1 );
        if  ( HWRAbs(nCurvTip) >= ONE_NTH(CURV_NORMA,6) )
          code = _IU_;
      }
      else  if  ( b1stCurved && b2ndCurved )  {
        if  ( EQ_SIGN(nCurv1,nCurv2) )  {
          if  ( EQ_SIGN(nCurv1,nCurvAll) )
            code = _UU_;
          else
            code = _IU_;
        }
      }
      else  if  ( b1stCurved )  {
        if  ( !EQ_SIGN(nCurv1,nCurvAll) )
          code = _IU_;
      }
      else  /*b2ndCurved*/ {
        if  ( !EQ_SIGN(nCurv2,nCurvAll) )
          code = _IU_;
      }

      if  ( code == _IU_ )  {
        _INT    iBegCmp = ONE_THIRD(prv->iend + TWO(cur->ibeg));
        _INT    iEndCmp = ONE_THIRD(nxt->ibeg + TWO(cur->iend));
        _SHORT  dxCurEstmt, dyCurEstmt;
        if  ( cur->ibeg < iBegCmp )
          iBegCmp = cur->ibeg;
        if  ( cur->iend > iEndCmp )
          iEndCmp = cur->iend;
        dyCurEstmt = y[iMidCur] - MEAN_OF(y[iBegCmp],y[iEndCmp]);
        TO_ABS_VALUE(dyCurEstmt);
        dxCurEstmt = x[iEndCmp] - x[iBegCmp];
        TO_ABS_VALUE(dxCurEstmt);
        if  (   (   nUpDown == UP_DIR
                 && dxCurEstmt > dyCurEstmt
                )
             || dxCurEstmt > TWO(dyCurEstmt)
            )
          code = _NO_CODE;
      }

      if  ( code != _NO_CODE )  {
        if  ( nUpDown == UP_DIR )
          cur->code = code;
        else  /*nUpDown==DN_DIR*/
          cur->code = (code==_UU_)? _UD_:_ID_;
      }
    }

  } /*10*/


#if  PG_DEBUG
  #define  FOR_AYV  0
  #if  FOR_AYV
    _VOID  SaveDataForAYV( low_type _PTR low_data ); //it's prototype!

    SaveDataForAYV( low_data );
  #endif
#endif /*PG_DEBUG...*/

} /*Adjust_I_U*/

#if  PG_DEBUG && FOR_AYV

#include <stdio.h>
#include "wg_stuff.h"

extern _CHAR  szFNameBAT[];
extern _CHAR  szSrcDir[];
static _LONG  lWordNumberInTest = -1L;


_VOID  SaveDataForAYV( low_type _PTR low_data )
{
  FILE       *fout = NULL;
  static _BOOL  b1st = _TRUE;
  extern p_rec_info_type  prig;

  p_SPECL    specl = low_data->specl;
  p_SHORT    x     = low_data->x;
  p_SHORT    y     = low_data->y;
  p_SPECL    cur, prv, nxt;
  _SHORT     dxCur, dxPrvNxt;
  _INT       nUpDown;
  _INT       hghtPrv;
  _INT       hghtNxt;
  _INT       hghtCur;
  _INT       nRealArcCur, nRealArcsNear;


  fout = fopen( "c:\\ayvdata\\arcs.dat", "a+t" );
  if  ( fout==NULL )
    goto  EXIT_ACTIONS;
  if  ( b1st )  {
    b1st = _FALSE;
    fprintf( fout, ";CHE arcs data file; "
                   "18 params + 1 out + xr name + ibeg + iend + word num. in test + word num. in file + CMP + file name\n" );
  }
  lWordNumberInTest ++;


  for  ( cur = specl->next;
         cur != _NULL  &&  cur->next != _NULL;
         cur = cur->next )  { /*10*/

    if  ( cur->prev->code == _NO_CODE )
      continue;

    prv = cur->prev;
    nxt = cur->next;

         /*  Define situation: */

    if  ( cur->mark == BEG || cur->mark == END )
      continue;

    if  (   prv->iend >= cur->ibeg
         || nxt->ibeg <= cur->iend
        )
      continue;  /* They should be distinct elements. */

    nUpDown = NO_DIR;
    nRealArcCur   = 0;
    nRealArcsNear = 0;

    if  ( IsUpperElem(cur) )  {
      if  ( IsUpperULike(cur) )
        nRealArcCur = 1;
      if  ( IsLowerElem(prv) && IsLowerElem(nxt) )  {
        nUpDown = UP_DIR;
        if  ( IsLowerULike(prv) && IsLowerULike(nxt) )
          nRealArcsNear = 1;
      }
    }
    else  if  ( IsLowerElem(cur) )  {
      if  ( IsLowerULike(cur) )
        nRealArcCur = 1;
      if  ( IsUpperElem(prv) && IsUpperElem(nxt) )  {
        nUpDown = DN_DIR;
        if  ( IsUpperULike(prv) && IsUpperULike(nxt) )
          nRealArcsNear = 1;
      }
    }

    if  ( nUpDown == NO_DIR )
      continue;
    if  (   brk_right(y,prv->iend,cur->ibeg) < cur->ibeg
         && brk_right(y,cur->iend,nxt->ibeg) < nxt->ibeg
        )
      continue;  /* this should be the continnuous part of trj. */


    dxCur = x[cur->iend] - x[cur->ibeg];
    TO_ABS_VALUE(dxCur);
    dxPrvNxt = x[MID_POINT(nxt)] - x[MID_POINT(prv)];
    TO_ABS_VALUE(dxPrvNxt);

    hghtPrv = HEIGHT_OF(prv);
    hghtNxt = HEIGHT_OF(nxt);
    hghtCur = HEIGHT_OF(cur);

    { /*20*/
      _INT    iMidCur    = MID_POINT(cur);
      _INT    iCurv1Pt   = ONE_THIRD(TWO(MID_POINT(prv)) + iMidCur);
      _INT    iCurv2Pt   = ONE_THIRD(TWO(MID_POINT(nxt)) + iMidCur);
      _SHORT  nCurv1     = CurvMeasure( x, y, MID_POINT(prv),
                                        iMidCur, iCurv1Pt );
      _SHORT  nCurv2     = CurvMeasure( x, y, iMidCur,
                                        MID_POINT(nxt), iCurv2Pt );
      _SHORT  nCurvAll   = CurvMeasure( x, y, prv->iend, nxt->ibeg, iMidCur );

      _SHORT  nCurvTip = CurvMeasure( x, y, cur->ibeg, cur->iend, -1 );

      _INT    iBegCmp = ONE_THIRD(prv->iend + TWO(cur->ibeg));
      _INT    iEndCmp = ONE_THIRD(nxt->ibeg + TWO(cur->iend));
      _SHORT  dxCurEstmt, dyCurEstmt;

      if  ( cur->ibeg < iBegCmp )
        iBegCmp = cur->ibeg;

      if  ( cur->iend > iEndCmp )
        iEndCmp = cur->iend;

      dyCurEstmt = y[iMidCur] - MEAN_OF(y[iBegCmp],y[iEndCmp]);
      TO_ABS_VALUE(dyCurEstmt);
      dxCurEstmt = x[iEndCmp] - x[iBegCmp];
      TO_ABS_VALUE(dxCurEstmt);

           /* Write to file: */

      fprintf( fout,
               "%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %s %d %d %d %d %ld %d %s %s\\%s\n",
               (int)cur->ibeg, (int)cur->iend, (int)prv->iend, (int)nxt->ibeg,
               (int)nUpDown, (int)dxCur, (int)dxPrvNxt,
               (int)nCurv1, (int)nCurv2, (int)nCurvAll,
               (int)nCurvTip, (int)dxCurEstmt, (int)dyCurEstmt,
               (int)hghtCur, (int)hghtPrv, (int)hghtNxt,
               (int)nRealArcCur, (int)nRealArcsNear,
               (int)cur->code, (p_CHAR)code_name[cur->code],
               (int)low_data->buffers[2].ptr[prv->ibeg],  //pts on orig. trj
               (int)low_data->buffers[2].ptr[nxt->iend],  //pts on orig. trj
               (int)low_data->buffers[2].ptr[cur->ibeg],  //pts on orig. trj
               (int)low_data->buffers[2].ptr[cur->iend],  //pts on orig. trj
               (long)lWordNumberInTest,
               (int)prig->num_word,
               (prig->cmp_word==NULL || prig->cmp_word[0]==0)?  "###":prig->cmp_word,
               szSrcDir,
               szFNameBAT[0]==0? "###":szFNameBAT );

    } /*20*/


  } /*10*/

 EXIT_ACTIONS:;
  if  ( fout != NULL )
    fclose( fout );

} /*SaveDataForAYV*/

#endif /*PG_DEBUG...*/


#undef  MIN_SIGNIF_CURV

#undef  NO_DIR
#undef  UP_DIR
#undef  DN_DIR

/************************************************/

       /*   This function checks all pairs of the       */
       /* contrary extrema, if there is missed "extre-  */
       /* mum" like this:                               */
       /*                                               */
       /*           oooooooooooOO                       */
       /*                        O                      */
       /*                        o                      */
       /*                        o                      */
       /*                        o                      */
       /*                       o                       */
       /*                       o                       */
       /*                        o     o                */
       /*                          oooo                 */
       /*                                               */

_BOOL  FindSideExtr( low_type _PTR low_data )
{
  p_SPECL  specl    = low_data->specl;
  p_SHORT  x        = low_data->x;
  p_SHORT  y        = low_data->y;
  p_SHORT  ind_back = low_data->buffers[2].ptr;
  p_SPECL  p1st, p2nd;
  _INT     iMid1st, iMid2nd;
  _INT     iSideExtr;
/*  _INT     di1st2nd; */
  _INT     nExtrType;


  DBG_CHK_err_msg( specl==_NULL || specl->next==_NULL,
                   "FndSideExtr: BAD specl" );

#if  PG_DEBUG
  if  ( mpr == MY_MPR )  {
    _CHAR  szDBG[40] = "";
    InqString( "\nShow side extrs ? ", szDBG );
    if  ( szDBG[0]=='Y'  ||  szDBG[0]=='y' )
      bShowSideExtr = _TRUE;
    else
      bShowSideExtr = _FALSE;
  }
#endif


  for  ( p1st=specl->next;
         p1st!=_NULL;
         p1st=p2nd )  { /*10*/

            /*  At this stage all angles are collected at the */
            /* end of the SPECL list, so they cannot appear   */
            /* between two extr.s:                            */

    if  ( (p2nd = p1st->next /*SkipAnglesAfter(p1st)*/) == _NULL )
      break;
    if  (   !(p1st->mark==MINW && p2nd->mark==MAXW)
         && !(p1st->mark==MAXW && p2nd->mark==MINW)
        )
      continue;
    if  ( p1st->iend >= p2nd->ibeg )
      continue;
    if  ( brk_right(y,p1st->iend,p2nd->ibeg) <= p2nd->ibeg )
      continue;  /* Consider only extrs on the single trj. part. */

    iMid1st = MID_POINT(p1st);
    iMid2nd = MID_POINT(p2nd);
    DBG_CHK_err_msg( iMid2nd <= iMid1st,
                     "FndSdExtr: BAD iMids" );
#if  PG_DEBUG
    if  ( mpr==MY_MPR  &&  bShowSideExtr )  {
      draw_line( x[iMid1st],y[iMid1st],
                 x[iMid2nd],y[iMid2nd],
                 COLORT,DOTTED_LINE,1);
    }
#endif
    nExtrType = SideExtr( x, y, iMid1st, iMid2nd,
                          0, low_data->xBuf, low_data->yBuf, ind_back,
                          &iSideExtr, STRICT_ANGLE_STRUCTURE );

#if  PG_DEBUG
    if  ( mpr==MY_MPR  &&  bShowSideExtr )  {
      p_CHAR   pMsg;
      CloseTextWindow();
      draw_line( x[iMid1st],y[iMid1st],
                 x[iSideExtr],y[iSideExtr],
                 COLORT,DOTTED_LINE,1);
      draw_line( x[iSideExtr],y[iSideExtr],
                 x[iMid2nd],y[iMid2nd],
                 COLORT,DOTTED_LINE,1);
      switch ( nExtrType )  {
        case  NO_SIDE_EXTR:
                 pMsg = "\nNo side extr. here.";
                 break;
        case  SIDE_EXTR_LIKE_1ST:
                 pMsg = "\nSide extr. like 1st.";
                 break;
        case  SIDE_EXTR_LIKE_2ND:
                 pMsg = "\nSide extr. like 2nd.";
                 break;
        case  SIDE_EXTR_LIKE_1ST_WEAK:
        case  SIDE_EXTR_LIKE_2ND_WEAK:
                 pMsg = "\nSide extr. weak";
                 break;
        default:
                 pMsg = "\nBAD Side extr. value !!!";
                 break;
      }
      brkeyw( pMsg );
    }
#endif  /*PG_DEBUG*/

//    if  ( nExtrType == NO_SIDE_EXTR )
//      continue;

         /*  Now we may mark new extr., if any: */

    if  (   nExtrType == SIDE_EXTR_LIKE_1ST
         || nExtrType == SIDE_EXTR_LIKE_1ST_WEAK
        )  {
      if  ( p1st->prev->mark != BEG )
        continue;
      if  ( iSideExtr > p1st->iend )  {
        /* DBG_err_msg( "Side Extr like 1st"); */
        //if  ( nExtrType == SIDE_EXTR_LIKE_1ST_WEAK )
          p1st->iend = (_SHORT)MEAN_OF( p1st->iend, iSideExtr );
        //else
        //  p1st->iend = (_SHORT)iSideExtr;
      }
    }

    else  if  (   nExtrType == SIDE_EXTR_LIKE_2ND
               || nExtrType == SIDE_EXTR_LIKE_2ND_WEAK
              )  {
      if  (   p2nd->next != _NULL
           && p2nd->next->mark != END
          )
        continue;
      if  ( iSideExtr < p2nd->ibeg )  {
        /* DBG_err_msg( "Side Extr like 2nd"); */
        //if  ( nExtrType == SIDE_EXTR_LIKE_2ND_WEAK )
          p2nd->ibeg = (_SHORT)MEAN_OF( p2nd->ibeg, iSideExtr );
        //else
        //  p2nd->ibeg = (_SHORT)iSideExtr;
      }
    }

  } /*10*/

  return  _TRUE;

} /*FindSideExtr*/
/************************************************/

          /*  Almost the same as the prev. function, but working */
          /* at the end of lower level:                          */

#define  MIN_DY_MAKE_NEW  ((_SHORT)(STR_DOWN-STR_UP)/3)

#define  PENALTY_FOR_WEAK_ANGLE   ((_UCHAR)2)
#define  PENALTY_FOR_SURE_ANGLE   ((_UCHAR)6)

#define  MIN_COS_TO_MAKE_WI_ANGLE  (-60)

_BOOL    IsSmthRelevant_InBetween( p_SPECL p1st, p_SPECL p2nd,
                                   _INT iBegNew, _INT iEndNew );

_BOOL  PostFindSideExtr( low_type _PTR low_data )
{
  p_SPECL  specl    = low_data->specl;
  p_SHORT  x        = low_data->x;
  p_SHORT  y        = low_data->y;
  p_SHORT  ind_back = low_data->buffers[2].ptr;
  p_SPECL  pNew  = _NULL;
  p_SPECL  p1st, p2nd, pCheck;
  _INT     iRef1st, iRef2nd;
  _INT     iBegNew, iEndNew;
  _INT     iHeightRef;
  _INT     iSideExtr;
  _SHORT   dyExtrCheck;
  _INT     nExtrType;
  _INT     nHeightNew;
  _SHORT   SqRetCod;
  _BOOL    b1stUpper;
  _BOOL    bMadeNewElem, bWeakNewElem, bSpecialCase;


  DBG_CHK_err_msg( specl==_NULL || specl->next==_NULL,
                   "PostFndSideExtr: BAD specl" );

#if  PG_DEBUG
  if  ( mpr == MY_MPR )  {
    _CHAR  szDBG[40] = "";
    InqString( "\nShow POST side extrs ? ", szDBG );
    if  ( szDBG[0]=='Y'  ||  szDBG[0]=='y' )
      bShowPostSideExtr = _TRUE;
    else
      bShowPostSideExtr = _FALSE;
  }
#endif


  for  ( p1st=specl->next;
         p1st!=_NULL;
         p1st=p2nd )  { /*10*/

    bMadeNewElem = _FALSE;
    bSpecialCase = _FALSE;

#if  defined(FOR_GERMAN) || defined(FOR_FRENCH)
    if  ( (p2nd = SkipRealAnglesAndPointsAndHMovesAfter(p1st)) == _NULL )
      break;
#else
    if  ( (p2nd = SkipRealAnglesAndPointsAfter(p1st)) == _NULL )
      break;
#endif /* FOR_GERMAN... */

         /*  We are interested only in upper-lower pairs: */

//#ifdef  FOR_GERMAN
//    bWeakNewElem = _FALSE;
//#else
    bWeakNewElem = _TRUE;  /*  In English let they all be weak. */
//#endif

    if  ( IsUpperElem(p1st) && IsLowerElem(p2nd) )  {
#if  !defined(FOR_GERMAN) && !defined(FOR_FRENCH)
      if  (   p1st->code==_DUR_
           || p1st->code==_CUR_
          )
        continue;  /* Don't consider back-moving upper elems. */
#endif /* ! FOR_GERMAN... */
      if  ( HEIGHT_OF(p1st) > _DI2_ ||  HEIGHT_OF(p2nd) < _MD_ )
        continue;    /* Don't consider too high or too low pairs pairs*/
      b1stUpper = _TRUE;
    }
    else  if  (   IsLowerElem(p1st)
               && ( IsUpperElem(p2nd)  ||  p2nd->code == _Gr_ )
              )  {
#if  !defined(FOR_GERMAN) && !defined(FOR_FRENCH)
      //if  ( p2nd->code == _CUR_ )
      //  continue;
      if  (   p2nd->code==_DUL_
           || p2nd->code==_CUL_
          )
        continue;  /* Don't consider back-moving upper elems. */
#endif /* ! FOR_GERMAN... */
      if  ( HEIGHT_OF(p2nd) > _DI2_ ||  HEIGHT_OF(p1st) < _MD_ )
        continue;    /* Don't consider too high or too low pairs pairs*/
      b1stUpper = _FALSE;
#if defined (FOR_GERMAN) || defined (FOR_FRENCH)
      if  ( HEIGHT_OF(p1st) <= _DI1_ )  /* It's hanging */
        bWeakNewElem = _TRUE;
#endif
    }
    else
      continue;

         /*  Define the reference points - borders for */
         /* searching side extr.:                      */

    if  (   p1st->code==_GU_
         || p1st->code==_GD_
         || p1st->code==_GUs_
         || p1st->code==_DUL_
         || p1st->code==_DDL_
         || ( p1st->code==_IU_ && (p1st->mark==STICK || p1st->mark==CROSS) )
         //|| ( p1st->code==_ID_ && (p1st->mark==STICK || p1st->mark==CROSS) )
        )
      iRef1st = p1st->iend;
    else  {
      _INT  iExtr;
      if  ( b1stUpper )
        iExtr = iyMin( p1st->ibeg, p1st->iend, y );
      else
        iExtr = iyMax( p1st->ibeg, p1st->iend, y );
      iRef1st = MID_POINT(p1st);
      if  ( iExtr > iRef1st )  {
        if  ( p1st->code==_UU_ || p1st->code==_UUL_ || p1st->code==_UUR_ )  {
          _INT  dx1stBegEnd  = x[p1st->iend] - x[p1st->ibeg];
          _INT  dy1stBegExtr = y[iExtr] - y[p1st->ibeg];
          _INT  dy1stEndExtr = y[iExtr] - y[p1st->iend];
          TO_ABS_VALUE( dx1stBegEnd );
          TO_ABS_VALUE( dy1stBegExtr );
          TO_ABS_VALUE( dy1stEndExtr );
          if  (   dx1stBegEnd < ONE_HALF(dy1stBegExtr)
               || dx1stBegEnd < ONE_HALF(dy1stEndExtr)
              )
            iRef1st = iExtr;  //leave ref. point for wide upper arcs in the middle
        }
        else
          iRef1st = iExtr;
      }
    }
    if  (   p2nd->code==_GU_
         || p2nd->code==_GD_
         || p2nd->code==_GUs_
         || p2nd->code==_DUR_
         || p2nd->code==_DDR_
#if  defined(FOR_GERMAN) || defined(FOR_FRENCH)
         || p2nd->code==_CUR_
#endif /* FOR_GERMAN... */
         || ( p2nd->code==_IU_ && (p2nd->mark==STICK || p2nd->mark==CROSS) )
         //|| ( p2nd->code==_ID_ && (p2nd->mark==STICK || p2nd->mark==CROSS) )
        )
      iRef2nd = p2nd->ibeg;
    else  {
      _INT  iExtr;
      if  ( b1stUpper )
        iExtr = iyMax( p2nd->ibeg, p2nd->iend, y );
      else
        iExtr = iyMin( p2nd->ibeg, p2nd->iend, y );
      iRef2nd = MID_POINT(p2nd);
      if  ( iExtr < iRef2nd )  {
        if  ( p2nd->code==_UU_ || p2nd->code==_UUL_ || p2nd->code==_UUR_ )  {
          _INT  dx2ndBegEnd  = x[p2nd->iend] - x[p2nd->ibeg];
          _INT  dy2ndBegExtr = y[iExtr] - y[p2nd->ibeg];
          _INT  dy2ndEndExtr = y[iExtr] - y[p2nd->iend];
          TO_ABS_VALUE( dx2ndBegEnd );
          TO_ABS_VALUE( dy2ndBegExtr );
          TO_ABS_VALUE( dy2ndEndExtr );
          if  (   dx2ndBegEnd < ONE_HALF(dy2ndBegExtr)
               || dx2ndBegEnd < ONE_HALF(dy2ndEndExtr)
              )
            iRef2nd = iExtr;  //leave ref. point for wide upper arcs in the middle
        }
        else  
          iRef2nd = iExtr;
      }
    }
    if  ( iRef2nd <= iRef1st )  {
      //err_msg( "PostFndSdExtr: BAD iMids" );
      //return  _TRUE;
      continue;
    }

         /*  If there is something looking like side-extr, */
         /* show it and update "specl":                    */

#if  PG_DEBUG
    if  ( mpr==MY_MPR  &&  bShowPostSideExtr )  {
      draw_line( x[iRef1st],y[iRef1st],
                 x[iRef2nd],y[iRef2nd],
                 COLORT,DOTTED_LINE,1);
    }
#endif

    nExtrType = SideExtr( x, y, iRef1st, iRef2nd,
                          low_data->slope,
                          low_data->xBuf, low_data->yBuf, ind_back,
                          &iSideExtr, !STRICT_ANGLE_STRUCTURE );

       //  Look for "wi" or "bi" etc. situation like this:
       //
       //        o
       //        o       @@@@@@
       //        o      @      o
       //        o     @       o
       //        o      @      o
       //        o       @     o
       //         o      o     o
       //          o    o       o
       //           oooo         ooo
       //
    if  (   !b1stUpper
         && nExtrType == NO_SIDE_EXTR
         && (   p1st->code == _ID_
             || p1st->code == _UD_
             || p1st->code == _UDL_
             || p1st->code == _UDC_
            )
         && COUNTERCLOCKWISE( p1st )
         && p2nd->code != _UUC_
         && (   p2nd->next == _NULL
             || p2nd->next->code != _CDL_
            )
        )  { /*20*/
      _INT  nDist1 = Distance8( x[iRef1st], y[iRef1st], x[iSideExtr], y[iSideExtr] );
      _INT  nDist2 = Distance8( x[iRef2nd], y[iRef2nd], x[iSideExtr], y[iSideExtr] );

      if  (   nDist1 >= ONE_THIRD(nDist2)
           && nDist2 >= ONE_THIRD(nDist1)
           && CurvMeasure ( x, y, iRef1st, iRef2nd, iSideExtr ) > 0
          )  {
        _INT  nCos;
        _INT  iMid1 = MEAN_OF( iRef1st, iSideExtr );

        if  ( Distance8( x[iMid1],y[iMid1], x[iSideExtr],y[iSideExtr] )
                > ONE_FOURTH(nDist2)
            )
          nCos = (_INT)cos_vect( iSideExtr, iMid1,
                                 iSideExtr, iRef2nd, x, y );
        else
          nCos = (_INT)cos_vect( iSideExtr, iRef1st,
                                 iSideExtr, iRef2nd, x, y );
        if  ( nCos >= MIN_COS_TO_MAKE_WI_ANGLE )
          nExtrType = SIDE_EXTR_LIKE_2ND_WEAK;
      }
    } /*20*/

       //Do something about "ow" or "on" beginnings:
       //
       //
       //                  oooo   o     o
       // iRightPrev-> o  o<*  o  o   o
       //             o   o |  o  o  o
       //            o    o |  o  o  o
       //            o    o |  o  o  o
       //            o    o |  o  o  o
       //             o   o |  o o o o
       //              ooo  |   o   o
       //                   |
       //                   *---- iRefForO
       //

    if  (   !b1stUpper
         && (   nExtrType == NO_SIDE_EXTR
             || nExtrType == SIDE_EXTR_LIKE_2ND
             || nExtrType == SIDE_EXTR_LIKE_2ND_WEAK
            )
         && (   p1st->code == _ID_
             || p1st->code == _UD_
             || p1st->code == _UDC_
            )
         && COUNTERCLOCKWISE( p1st )
         && (   CLOCKWISE( p2nd )
             || nExtrType != NO_SIDE_EXTR
            )
         && p2nd->code != _CUR_
         && p2nd->mark != END
         && p2nd->next != _NULL
         && p2nd->next->mark != END
        )  { /*25*/

      p_SPECL  pPrev = SkipRealAnglesAndPointsBefore ( p1st );

      if  (   pPrev!=specl && pPrev!=_NULL
           && IsUpperElem(pPrev)
           && (   pPrev->mark == BEG
               || pPrev->prev == _NULL
               || pPrev->prev == specl
               || IsAnyBreak(pPrev->prev)
              )
          )  {

        _INT  iRightPrev = ixMax( pPrev->ibeg, pPrev->iend, x, y );

        if  ( iRightPrev > 0 )  { /*27*/
          _INT  yDown1st = y[iYdown_range( y, p1st->ibeg, p1st->iend )];
          _INT  iUp2nd   = iYup_range( y, p2nd->ibeg, p2nd->iend );
          _INT  dyO      = yDown1st - y[iRightPrev];
          _INT  iRefForO = iClosestToY( y, iRef1st, iUp2nd, y[iRightPrev] );

          #if  PG_DEBUG
            if  ( mpr==2 && bShowPostSideExtr )  {
              printw( "\nSpec.Case: dyO=%d; dyRef=%d; dyUp2nd=%d",
                      dyO, (yDown1st - y[iRefForO]), (yDown1st - y[iUp2nd]) );
            }
          #endif /*PG_DEBUG*/

          if  (   iRefForO > 0
               && dyO > (STR_DOWN-STR_UP)/2
               && (yDown1st - y[iRefForO]) > (STR_DOWN-STR_UP)/2
               && (yDown1st - y[iRefForO]) > TWO_THIRD(dyO)
               && (   dyO > TWO_THIRD(yDown1st - y[iUp2nd])
                   || nExtrType != NO_SIDE_EXTR
                  )
              )  {
            _SHORT  nRetCod;
            _LONG  lSquare = ClosedSquare( x, y, iRightPrev, iRefForO, &nRetCod );

            if  ( nRetCod == RETC_OK )  {
              _INT  nEffectiveWidth = (_INT)( -lSquare / dyO );
              _INT  dxNeck = x[iRefForO] - x[iRightPrev]
                               + SlopeShiftDx( (y[iRefForO] - y[iRightPrev]),
                                               low_data->slope );

              #if  PG_DEBUG
                if  ( mpr==2 && bShowPostSideExtr )  {
                  printw( "\n           EffWid=%d; dxNeck=%d; slope=%d",
                          nEffectiveWidth, dxNeck, low_data->slope );
                }
              #endif /*PG_DEBUG*/

              if  (   nEffectiveWidth > (STR_DOWN-STR_UP)/6
                   && nEffectiveWidth > dyO/6
                   && nEffectiveWidth > 3*dxNeck/2
                  )  {
                nExtrType = SIDE_EXTR_LIKE_2ND_WEAK;
                iSideExtr = HWRMax( iSideExtr, iRef2nd-1 );
                bSpecialCase = _TRUE;
              }
            }
          }
        } /*27*/
      }

    } /*25*/

#if defined (FOR_GERMAN) || defined (FOR_FRENCH)

    #define  MIN_CURV_FOR_GERMAN_er  2
    #define  MIN_COS_FOR_SHARP_er    55

    if  (   nExtrType == NO_SIDE_EXTR
         || nExtrType == SIDE_EXTR_TRACE_FOR_er
        )  { /*30*/
        //  Try to recognize situations like "er" or "re"
        // and utilize them:

      if  ( !b1stUpper )  { /*40*/

        _BOOL  bMake_er = _FALSE;

        if  (   p2nd->code == _GU_
             || p2nd->code == _Gr_
             || p2nd->code == _GUs_
            )
          bMake_er = _TRUE;

        if  (   !bMake_er
             && (   (   p1st->code == _ID_
                     && (   p1st->mark == STICK
                         || COUNTERCLOCKWISE(p1st)
                        )
                    )
                 || (   p1st->code == _UD_
                     && COUNTERCLOCKWISE(p1st)
                    )
                 || p1st->code == _DDR_
                 || p1st->code == _DDL_
                 || p1st->code == _GDs_
                 || p1st->code == _Gr_
                )
            )  {
          if  ( p2nd->mark == END )
            bMake_er = _TRUE;
          else  {
            p_SPECL  pNext = SkipRealAnglesAndPointsAfter( p2nd );
            if  (   pNext == _NULL
                 || (   pNext->mark == END
                     && (y[MID_POINT(pNext)] - y[iRef2nd])
                              < TWO_THIRD(y[iRef1st] - y[iRef2nd])
                    )
                )
              bMake_er = _TRUE;
          }
        }

        if  ( bMake_er  &&  nExtrType != SIDE_EXTR_TRACE_FOR_er )  {
          if  (   CurvMeasure( x, y, iRef1st, iRef2nd, iSideExtr )
                        < MIN_CURV_FOR_GERMAN_er
               && CurvMeasure( x, y, MEAN_OF(iRef1st,iSideExtr), iRef2nd, iSideExtr )
                        < MIN_CURV_FOR_GERMAN_er
              )  {
            p_SPECL  pPrev = SkipRealAnglesAndPointsBefore ( p1st );

            if  (   pPrev!=specl && pPrev!=_NULL
                 && ( IsUpperElem(pPrev) || pPrev->code==_BSS_ )
                )  {
              _INT iPrev    = MEAN_OF( pPrev->ibeg, pPrev->iend );
              _INT iRefPrev = MEAN_OF(iPrev,iRef1st);
              _INT nCos1    = (_INT)cos_vect( iRef1st, iSideExtr,
                                              iRef1st, iRefPrev,
                                              x, y );
              _INT nCos2    = (_INT)cos_vect( iRef1st, MEAN_OF(iRef1st,iSideExtr),
                                              iRef1st, MEAN_OF(iRef1st,iRefPrev),
                                              x, y );
              _INT iAtOurY;
              if  (   nCos1 < MIN_COS_FOR_SHARP_er
                   || nCos2 < MIN_COS_FOR_SHARP_er
                  )
                bMake_er = _FALSE;

              if  ( bMake_er )  {
                iAtOurY = iClosestToY( y, iPrev, iRef1st, y[iRef2nd] );
                if  ( iAtOurY>0  &&  x[iAtOurY]>x[iRef2nd] )
                  bMake_er = _FALSE;
              }
            }
            else
              bMake_er = _FALSE;
          }
        }

        if  ( bMake_er )  {
          if  ( nExtrType == SIDE_EXTR_TRACE_FOR_er )
            nExtrType = SIDE_EXTR_LIKE_1ST_WEAK;
          else
            nExtrType = SIDE_EXTR_LIKE_2ND_WEAK;
        }

      } /*40*/


    } /*30*/

    #undef  MIN_CURV_FOR_GERMAN_er

#endif  /* FOR_GERMAN... */

#if  !defined (FOR_GERMAN) && !defined (FOR_FRENCH)
    if  ( !b1stUpper && p2nd->code == _CUR_ )  {
      if  (   nExtrType == SIDE_EXTR_LIKE_2ND
           || nExtrType == SIDE_EXTR_LIKE_2ND_WEAK
          )  {
        p_SPECL pAfter = SkipRealAnglesAndPointsAfter( p2nd );
        if  ( pAfter != _NULL )  {
          _INT  iLeftAfter = ixMin( p2nd->iend, pAfter->iend, x, y );

          if  ( iLeftAfter > 0 )  {
            if  ( x[iSideExtr] > x[iLeftAfter] )
              nExtrType = NO_SIDE_EXTR;
          }

          if  (   (p2nd->mark==CROSS || p2nd->mark==STICK)
               && iSideExtr > (p2nd+1)->ibeg
              )
            nExtrType = NO_SIDE_EXTR;
        }
      }
    }
#endif  /* !FOR_GERMAN... */

#if  PG_DEBUG
    if  ( mpr==MY_MPR  &&  bShowPostSideExtr )  {
      p_CHAR   pMsg;
      CloseTextWindow();
      draw_line( x[iRef1st],y[iRef1st],
                 x[iSideExtr],y[iSideExtr],
                 COLORT,DOTTED_LINE,1);
      draw_line( x[iSideExtr],y[iSideExtr],
                 x[iRef2nd],y[iRef2nd],
                 COLORT,DOTTED_LINE,1);
      switch ( nExtrType )  {
        case  NO_SIDE_EXTR:
                 pMsg = "\nNo side extr. here.";
                 break;
        case  SIDE_EXTR_LIKE_1ST:
                 pMsg = "\nSide extr. like 1st.";
                 break;
        case  SIDE_EXTR_LIKE_2ND:
                 pMsg = "\nSide extr. like 2nd.";
                 break;
        case  SIDE_EXTR_LIKE_1ST_WEAK:
        case  SIDE_EXTR_LIKE_2ND_WEAK:
                 pMsg = "\nSide extr. weak";
                 break;
#if  defined(FOR_GERMAN) || defined(FOR_FRENCH)
        case  SIDE_EXTR_TRACE_FOR_er:
                 pMsg = "\nTrace of side extr. (FOR_GERMAN)";
                 break;
#endif
        default:
                 pMsg = "\nBAD Side extr. value !!!";
                 break;
      }
      brkeyw( pMsg );
    }
#endif  /*PG_DEBUG*/

    if  ( nExtrType == NO_SIDE_EXTR )
      continue;

         /*  Now we may mark new extr.: */

    if  ( nExtrType == SIDE_EXTR_LIKE_1ST  ||  nExtrType == SIDE_EXTR_LIKE_1ST_WEAK )
      iHeightRef = iRef1st;
    else
      iHeightRef = iRef2nd;
    nHeightNew = HeightInLine( y[iHeightRef], low_data );

#if defined (FOR_GERMAN) || defined (FOR_FRENCH)
    if  ( nHeightNew <= _UE1_ )
      bWeakNewElem = _TRUE;
#endif

    if  (   b1stUpper
         && (   nExtrType == SIDE_EXTR_LIKE_1ST
             || nExtrType == SIDE_EXTR_LIKE_1ST_WEAK
            )
        )  {
      if  (   nExtrType == SIDE_EXTR_LIKE_1ST_WEAK
           || p1st->prev == specl
           || IsAnyBreak(p1st->prev) )
        bWeakNewElem = _TRUE;    /* Don't make new arcs at the beg. */
      pCheck = SkipRealAnglesAndPointsBefore(p1st);
      if  ( (pNew != _NULL)  &&  (pNew == pCheck) )
        continue; /* Don't make new elem. if it was done on the prev. pass */
#if defined (FOR_GERMAN) || defined (FOR_FRENCH)
      if  (   pCheck == _NULL
           || IsAnyBreak(pCheck)
           || IsXTorST(pCheck)
          )
        bWeakNewElem = _TRUE;
#endif  /*FOR_GERMAN...*/
      iBegNew = ONE_THIRD(iRef1st + TWO(iSideExtr));
      iEndNew = iSideExtr;
      if  (   bWeakNewElem
           && IsSmthRelevant_InBetween( p1st, p2nd, iBegNew, iEndNew )
          )
        continue; /* Don't mark weak elem if there already is something. */
      if  ( IsLowerElem(pCheck) )  {
        dyExtrCheck = y[iYdown_range(y,pCheck->ibeg,pCheck->iend)]
                        - y[iYup_range(y,p1st->ibeg,p1st->iend)];
        if  ( HWRAbs(dyExtrCheck) < MIN_DY_MAKE_NEW )
          continue; /* Don't make new elem. in low depth environment */
      }
      if  (   !bSpecialCase
           && (   ClosedSquare( x, y, iRef1st, iRef2nd, &SqRetCod ) <= 0
               || SqRetCod != RETC_OK
              ) 
          )
        continue;  /* Don't make new elem. if curved strangely */
      if  ( (pNew = NewSPECLElem(low_data)) != _NULL )  {
        bMadeNewElem = _TRUE;
        pNew->code = 0; //it will be decided upon later
        pNew->ibeg = (_SHORT)iBegNew; //iRef1st;
        pNew->iend = (_SHORT)iEndNew;
        Insert2ndAfter1st( p1st, pNew );
        if  ( pNew->next->code == _BSS_ )
          SwapThisAndNext( pNew );
        //12/20/93
        if  ( IsXTorST(p1st->prev) )
          SwapThisAndNext( p1st->prev );
#if  PG_DEBUG
        printw( bWeakNewElem? "\nSide extr like 1st weak.":"\nSide extr like 1st marked." );
#endif
      }
    }
    else  if  (   !b1stUpper
               && (   nExtrType == SIDE_EXTR_LIKE_2ND
                   || nExtrType == SIDE_EXTR_LIKE_2ND_WEAK
                  )
               && y[iRef1st] > y[iSideExtr]
              )  {
      if  ( nExtrType == SIDE_EXTR_LIKE_2ND_WEAK )
        bWeakNewElem = _TRUE;
      pCheck = SkipRealAnglesAndPointsAfter(p2nd);
#if defined (FOR_GERMAN) || defined (FOR_FRENCH)
      if  (   pCheck == _NULL
           || IsAnyBreak(pCheck)
           || IsXTorST(pCheck)
          )
        bWeakNewElem = _TRUE;
#endif  /*FOR_GERMAN...*/
      iBegNew = iSideExtr;
      iEndNew = ONE_THIRD(TWO(iSideExtr) + iRef2nd);
      if  (   bWeakNewElem
           && IsSmthRelevant_InBetween( p1st, p2nd, iBegNew, iEndNew )
          )
        continue; /* Don't mark weak elem if there already is something. */
      if  ( pCheck != _NULL  &&  IsLowerElem(pCheck) )  {
        dyExtrCheck = y[iYdown_range(y,pCheck->ibeg,pCheck->iend)]
                        - y[iYup_range(y,p2nd->ibeg,p2nd->iend)];
        if  ( HWRAbs(dyExtrCheck) < MIN_DY_MAKE_NEW )
          continue; /* Don't make new elem. in low depth environment */
      }
      if  (   !bSpecialCase
           && (   ClosedSquare( x, y, iRef1st, iRef2nd, &SqRetCod ) <= 0
               || SqRetCod != RETC_OK
              )
          )
        continue;  /* Don't make new elem. if curved strangely */
      if  ( (pNew = NewSPECLElem(low_data)) != _NULL )  {
        bMadeNewElem = _TRUE;
        pNew->code = 0; //it will be decided upon later
        pNew->ibeg = (_SHORT)iBegNew;
        pNew->iend = (_SHORT)iEndNew;  //iRef2nd;
#if  PG_DEBUG
        printw( bWeakNewElem? "\nSide extr like 2nd weak.":"\nSide extr like 2nd marked." );
#endif
        Insert2ndAfter1st( p2nd->prev, pNew );
        //12/20/93
        if  ( IsXTorST(pNew->prev) )
          SwapThisAndNext(pNew->prev);
      }
    }

#if defined(FOR_GERMAN) || defined(FOR_FRENCH)
    else  if  (   !b1stUpper
               && (   nExtrType == SIDE_EXTR_LIKE_1ST
                   || nExtrType == SIDE_EXTR_LIKE_1ST_WEAK
                  )
               && x[iSideExtr] > x[iRef1st]
              )  {
      if  ( (pNew = NewSPECLElem(low_data)) != _NULL )  {
        bMadeNewElem = _TRUE;
        bWeakNewElem = _TRUE;
        pNew->code = _ANr;
        pNew->ibeg = (_SHORT)HWRMax(iRef1st, iSideExtr - 1);
        pNew->iend = (_SHORT)HWRMin(iRef2nd, iSideExtr + 1);
        Insert2ndAfter1st( p1st, pNew );
        while  (   pNew->next != _NULL
                && IsAnyAngle( pNew->next )
                && pNew->next->ibeg < pNew->ibeg
               )  {
          SwapThisAndNext( pNew );
        }
#if  PG_DEBUG
        printw( bWeakNewElem? "\nSide extr like 1st weak.":"\nSide extr like 1st marked." );
#endif
      }
    }
#endif /*FOR_GERMAN...*/

    else  if  (   b1stUpper
               && (   nExtrType == SIDE_EXTR_LIKE_2ND
                   || nExtrType == SIDE_EXTR_LIKE_2ND_WEAK
                  )
               && x[iRef2nd] > x[iSideExtr]
              )  {
#if !defined(FOR_GERMAN) && !defined(FOR_FRENCH)
          //  Make lower angle only in "L" or in 2nd part of "k"
          //when it's written separately:
      if  ( p1st->mark != BEG )  {
        p_SPECL  pPrev = SkipRealAnglesAndPointsBefore(p1st);
        if  (   pPrev != _NULL
             && pPrev != specl
             && pPrev->mark != BEG
            )
          continue;
      }
      if  ( p2nd->mark != END )  {
        p_SPECL  pNext = SkipRealAnglesAndPointsAfter(p2nd);
        if  (   pNext != _NULL
             && pNext->mark != BEG
            )
          continue;
      }
#endif /* !FOR_GERMAN... */
      if  ( (pNew = NewSPECLElem(low_data)) != _NULL )  {
        bMadeNewElem = _TRUE;
        bWeakNewElem = _TRUE;
        pNew->code = _ANl;
        pNew->ibeg = (_SHORT)HWRMax(iRef1st, iSideExtr - 1);
        pNew->iend = (_SHORT)HWRMin(iRef2nd, iSideExtr + 1);
        Insert2ndAfter1st( p1st, pNew );
        while  (   pNew->next != _NULL
                && IsAnyAngle( pNew->next )
                && pNew->next->ibeg < pNew->ibeg
               )  {
          SwapThisAndNext( pNew );
        }
#if  PG_DEBUG
        printw( bWeakNewElem? "\nSide extr like 2nd weak.":"\nSide extr like 2nd marked." );
#endif
      }
    }

    if  ( bMadeNewElem )  {
      p_SPECL  pANCheck;
      #if  defined(FOR_GERMAN) || defined(FOR_FRENCH)
        nHeightNew = MEAN_OF( nHeightNew, HeightInLine(y[iSideExtr],low_data) );
      #endif
      ASSIGN_HEIGHT( pNew, nHeightNew );
      pNew->other = 0;
      if  ( bWeakNewElem )  {
        if  ( pNew->code == 0 )  { //i.e. it was not assigned yet
          if  ( b1stUpper )
            pNew->code = _AN_UR;  //_ANr;
          else
            pNew->code = _AN_UL;  //_ANl;
        }

        if  ( pNew->code == _ANr  ||  pNew->code == _ANl )
          pNew->ipoint1 = 0;  //zero penalty
        else  {
          if  (   nExtrType == SIDE_EXTR_LIKE_1ST
               || nExtrType == SIDE_EXTR_LIKE_2ND
              )
            pNew->other = PENALTY_FOR_SURE_ANGLE;
          else  /* ..._WEAK */
            pNew->other = PENALTY_FOR_WEAK_ANGLE;
        }

            /*  Mark for AVP's hotspot: */
        pNew->ipoint0 = (_SHORT)iSideExtr;

            /*  If the new angle crosses the existing one, then delete */
            /* the old one:                                            */

        for  ( pANCheck=p1st->next;
               pANCheck!=_NULL  &&  pANCheck!=p2nd;
               pANCheck=pANCheck->next
             )  {
          if  (   pANCheck != pNew
               && (   pANCheck->code == pNew->code
                   || ( pANCheck->code == _ANr  &&  pNew->code == _AN_UR )
                   || ( pANCheck->code == _ANl  &&  pNew->code == _AN_UL )
                  )
               && CrossInTime( pNew, pANCheck )
              )  {
            DelFromSPECLList( pANCheck );
            //DelFromSPECLList( pNew );
            //pNew = _NULL;
            //bMadeNewElem = _FALSE;
            break;
          }
        }

      }
      else  {
        pNew->code = _UU_;
        SET_CLOCKWISE( pNew );
      }
    }

  } /*10*/

  return  _TRUE;

} /*PostFindSideExtr*/

#undef  PENALTY_FOR_WEAK_ANGLE
#undef  PENALTY_FOR_SURE_ANGLE
#undef  MIN_DY_MAKE_NEW

/************************************************/

       /* Auxiliary functions for PostFindSideExtr: */

#define  IsAnyRealAngle(pElem)    (   REF(pElem)->code==_ANl    \
                                   || REF(pElem)->code==_ANr  )

p_SPECL  SkipRealAnglesAndPointsAfter ( p_SPECL pElem )
{

  if  ( pElem != _NULL )  {
    do  {
      pElem=pElem->next;
    }
    while  (   pElem!=_NULL
            && (   IsAnyRealAngle(pElem)
                || IsXTorST(pElem)
               )
           );
  }

  return  pElem;

} /*SkipRealAnglesAndPointsAfter*/
/************************************************/

p_SPECL  SkipRealAnglesAndPointsBefore ( p_SPECL pElem )
{

  if  ( pElem != _NULL )  {
    do  {
      pElem=pElem->prev;
    }
    while  (   pElem!=_NULL
            && (   IsAnyRealAngle(pElem)
                || IsXTorST(pElem)
               )
           );
  }

  return  pElem;

} /*SkipRealAnglesAndPointsBefore*/
/************************************************/


#if  defined(FOR_GERMAN) || defined(FOR_FRENCH)

p_SPECL  SkipRealAnglesAndPointsAndHMovesAfter ( p_SPECL pElem )
{

  if  ( pElem != _NULL )  {
    do  {
      pElem=pElem->next;
    }
    while  (   pElem!=_NULL
            && (   IsAnyRealAngle(pElem)
                || IsXTorST(pElem)
                || pElem->code==_BSS_ 
               )
           );
  }

  return  pElem;

} /*SkipRealAnglesAndPointsAndHMovesAfter*/

#endif /* FOR_GERMAN... */

/************************************************/

_BOOL    IsSmthRelevant_InBetween( p_SPECL p1st, p_SPECL p2nd,
                                   _INT iBegNew, _INT iEndNew )
{

  if  ( p1st == _NULL )
    return  _FALSE;

  for  ( p1st=p1st->next;
         p1st!=_NULL  &&  p1st!=p2nd;
         p1st=p1st->next
       )  {
    if  ( !IsXTorST( p1st )  &&  p1st->code != _BSS_ )  {
      if  ( IsAnyRealAngle( p1st ) )  {
        if  (   p1st->ibeg > iEndNew
             || p1st->iend < iBegNew
            )
          return  _TRUE;  //i.e. this is angle different from what we found
      }
      else
        return  _TRUE;    //i.e. this is something real
    }
  }

  return  _FALSE;

} /*IsSmthRelevant_InBetween*/
/************************************************/

#define  MAX_POINTS_IN_WORD   8
#define  STD_BASELINE_HEIGHT  (STR_DOWN-STR_UP)

#define  ST_LIKE_XR(cur)  (   (cur)->code==_ST_                   \
                           || (   (cur)->code==_XT_               \
                               && !((cur)->other & WITH_CROSSING) \
                              )                                   \
                          )

typedef struct  {
                  p_SPECL  ptr;
                  _INT     dx2Extr;
                }
                PT_DESCR, _PTR p_PT_DESCR;

_BOOL  LooksLikeIAndPoint( p_SPECL pPoint, _INT iPoint,
                           _SHORT dxAbsPts, p_SHORT x, p_SHORT y );
_BOOL  PutColonAtItsPlace( low_type _PTR low_data,
                           p_SPECL pPt1, p_SPECL pPt2 );
_VOID   AdjustBegEndWithoutPoint( p_SPECL pPoint );


_SHORT  RestoreColons( low_type _PTR low_data )
{
  _SHORT      retval = SUCCESS;
  p_SHORT     x      = low_data->x;
  p_SHORT     y      = low_data->y;
  p_SPECL     pCur, pAnchor;
  PT_DESCR    pts[MAX_POINTS_IN_WORD];
  p_SPECL     pt_i, pt_j;
  _SHORT      dxAbs, dyAbs;
  _INT        nPts;
  _INT        i, j, iPt_i, iPt_j;
  _BOOL       bFound;

      /*  Find all _ST_'s (points) in SPECL, then */
      /* memorize them for work:                  */

  for ( pCur=low_data->specl->next, nPts=0;
        pCur != _NULL;
        pCur = pCur->next
      )  { /*15*/

    if  ( ST_LIKE_XR(pCur) )  { /*10*/
      pts[nPts].ptr = pCur;
        //find where this point was brought by Guitman, if any:
      if  ( pCur->code==_XT_ && (pCur->other & RIGHT_KREST))  {
        for  ( pAnchor=pCur->prev;
               pAnchor!=_NULL && !IsUpperElem(pAnchor);
               pAnchor=pAnchor->prev )
        ;
      }
      else  {
        for  ( pAnchor=pCur->next;
               pAnchor!=_NULL && ST_LIKE_XR(pAnchor);
               pAnchor=pAnchor->next )
        ;
      }
      if  ( pAnchor==_NULL || pAnchor==low_data->specl || IsAnyBreak(pAnchor) )
        pts[nPts].dx2Extr = ALEF;
      else
        pts[nPts].dx2Extr = HWRAbs( x[MID_POINT(pCur)] - x[MID_POINT(pAnchor)] );

      if  ( pts[nPts].ptr->code == _XT_ )  { //make sure _XT_ isn't attached to something
        _SHORT  xMin, xMax;
        if  ( pts[nPts].dx2Extr < ONE_HALF(STD_BASELINE_HEIGHT) )
          continue;  //too close to corresponding xr
        if  ( !xMinMax ( pts[nPts].ptr->ibeg, pts[nPts].ptr->iend,
                         x, y, &xMin, &xMax ) )
          continue;  //be on a safe side :)
        if  ( pts[nPts].dx2Extr < xMax-xMin )
          continue;  //too close to corresponding xr
      }

      if  ( (++nPts) >= MAX_POINTS_IN_WORD )  {
        DBG_err_msg( "Too many points, some colons might not be restored." );
        break;
      }
    } /*10*/

  } /*15*/

  if  ( nPts < 2 )
    goto  EXIT_FUNC;


      /*  Go through all pairs of points, find those looking   */
      /* like colon, then move these points to the appropriate */
      /* positions and mark their places in "pPt" array like   */
      /* _NULL:                                                */

  for  ( i=0;  i<nPts-1;  i++ )  { /*20*/

    if  ( (pt_i = pts[i].ptr) == _NULL )
      continue;
    iPt_i = MID_POINT( pt_i );

    for  ( j=i+1;  j<nPts;  j++ )  { /*40*/

      if  ( (pt_j = pts[j].ptr) == _NULL )
        continue;  /* already moved to place as part of the pair */

      if  ( HEIGHT_OF(pt_i) < _MD_  &&  HEIGHT_OF(pt_j) < _MD_ )  {
        if  ( HEIGHT_OF(pt_i) < _UE1_  ||  HEIGHT_OF(pt_j) < _UE1_ )
          continue;  /*  Don't do anything with high pairs */
      }

      if  (   pt_j->iend != pt_i->ibeg-2
           && pt_i->iend != pt_j->ibeg-2
          )
        continue;  /* We work only with adjacent in time points */

      iPt_j = MID_POINT( pt_j );
      DBG_CHK_err_msg( y[iPt_i]==BREAK || y[iPt_j]==BREAK,
                       "BAD ibeg's in RestoreColons!" );

      dxAbs = x[iPt_i] - x[iPt_j];
      TO_ABS_VALUE( dxAbs );

      if  ( dxAbs > STD_BASELINE_HEIGHT )
        continue;  /*  Too far from each other */

      dyAbs = y[iPt_i] - y[iPt_j];
      TO_ABS_VALUE( dyAbs );

      if  (   dyAbs < ONE_FOURTH(STD_BASELINE_HEIGHT)
           || dyAbs > TWO(STD_BASELINE_HEIGHT)
          )
        continue;  /*  Too close or too far by Y */
      if  (   dyAbs < THREE_HALF(dxAbs)
           && !(   dyAbs > dxAbs
                && dxAbs < pts[i].dx2Extr
                && dxAbs < pts[j].dx2Extr
               )
          )
        continue;

#if  PG_DEBUG
      if  ( mpr > 0 )  {
        _RECT  box;
        box.left   = (_SHORT)(HWRMin( x[iPt_i], x[iPt_j] ) - 2);
        box.right  = (_SHORT)(HWRMax( x[iPt_i], x[iPt_j] ) + 2);
        box.top    = (_SHORT)(HWRMin( y[iPt_i], y[iPt_j] ) - 2);
        box.bottom = (_SHORT)(HWRMax( y[iPt_i], y[iPt_j] ) + 2);
        dbgAddBox(box, EGA_BLACK, EGA_YELLOW, SOLID_LINE);
        printw("\nTwo points looking like COLON found ...");
      }
#endif

      bFound = _TRUE;

           /*  Now additional check for situations like "i.": */

      if  (   x[iPt_i] > low_data->box.right - ONE_HALF(STD_BASELINE_HEIGHT)
           || x[iPt_j] > low_data->box.right - ONE_HALF(STD_BASELINE_HEIGHT)
          )  {

        if  (   LooksLikeIAndPoint( pt_i, iPt_i, dxAbs, x, y )
             || LooksLikeIAndPoint( pt_j, iPt_j, dxAbs, x, y )
            )
          bFound = _FALSE;

      }

         /*  And check for big points, whose boxes cross by Y: */

      if  ( bFound )  {
        _SHORT  yTop_i, yTop_j;
        _SHORT  yBottom_i, yBottom_j;
        yMinMax( pt_i->ibeg, pt_i->iend, y, &yTop_i, &yBottom_i );
        yMinMax( pt_j->ibeg, pt_j->iend, y, &yTop_j, &yBottom_j );
        if  ( yTop_i < yBottom_j  &&  yTop_j < yBottom_i )
          bFound = _FALSE;
      }

         /*  Here we are sure that this is a colon: */

      if  ( bFound )  { /*80*/

#if  PG_DEBUG
        if  ( mpr > 0 )  {
          brkeyw("\nColon found ...");
        }
#endif

        PutColonAtItsPlace( low_data, pt_i, pt_j );

        pts[i].ptr = pts[j].ptr = _NULL;

        break;
      } /*80*/

    } /*40*/
  } /*20*/

 EXIT_FUNC:;
  return  retval;

} /*RestoreColons*/
/************************************************/


_BOOL  LooksLikeIAndPoint( p_SPECL pPoint, _INT iPoint,
                           _SHORT dxAbsPts, p_SHORT x, p_SHORT y )
{
  p_SPECL  pNxt;
  _INT     iPt_nxt;
  _BOOL    bRet = _FALSE;

  if  (   (pNxt=pPoint->next) != _NULL
       && IsUpperElem(pNxt)
      )  {  /* i.e. if it was brought to some element */
    iPt_nxt = MID_POINT( pNxt );
    if  ( y[pNxt->ibeg] < y[iPt_nxt] )
      iPt_nxt = pNxt->ibeg;
    if  ( y[pNxt->iend] < y[iPt_nxt] )
      iPt_nxt = pNxt->iend;
    if  ( x[iPoint] < x[iPt_nxt] )
      bRet = _TRUE;
    else  if  (   y[iPoint] < y[iPt_nxt]
               && dxAbsPts > (x[iPoint] - x[iPt_nxt])
              )
      bRet = _TRUE;
  }

#if  PG_DEBUG
  if  ( bRet  &&  (mpr > 0) )  {
    draw_line( x[iPt_nxt], y[iPt_nxt],
               x[iPoint], y[iPoint],
               EGA_GREEN, SOLID_LINE, 1 );
    brkeyw("\nSituation like \"i\" and point found.");
  }
#endif

  return  bRet;

} /*LooksLikeIAndPoint*/
/************************************************/

/*  Returns _TRUE, if the place was found; _FALSE otherwise. */

_BOOL  PutColonAtItsPlace( low_type _PTR low_data,
                           p_SPECL pPt1, p_SPECL pPt2 )
{
  p_SHORT  x = low_data->x;
  p_SHORT  y = low_data->y;
  p_SPECL  pCur;
  p_SPECL  pBest, p1st, pLast;
  _SHORT   dxBest, dxCur, xCur, xColon;
  _BOOL    bWasDxNegative, bWasDxPositive;
  _BOOL    bWasXTST;


       /*  Find the best place to put colon: */

  xColon = (_SHORT)MEAN_OF( x[MID_POINT(pPt1)], x[MID_POINT(pPt2)] );

       /*  First, skip all the leading _ST_s and _XT_s: */

  for  ( pCur=low_data->specl->next, p1st=_NULL, pLast=_NULL;
         pCur!=_NULL;
         pCur=pCur->next )  {
    if  ( pCur->code != _ST_  &&  pCur->code != _XT_ )  {
      if  ( p1st == _NULL )
        p1st = pCur;
      else
        pLast = pCur;
    }
  }

  if  ( pLast == _NULL )  //i.e. there is nothing there except this colon.
    return  _TRUE;

      /*  Then scan all BREAKs as well as p1st and pLast to */
      /* find the best colon place:                         */

  for  ( pCur=p1st, dxBest=ALEF, pBest=_NULL, bWasDxNegative=bWasDxPositive=_FALSE;
         pCur!=_NULL;
         pCur=pCur->next )  { /*20*/

    if  (   IsAnyBreak(pCur)
         || pCur == p1st
         || pCur == pLast
        )  { /*30*/

      if  ( pCur->prev==pPt1 && pCur->next==pPt2 )
        continue;  /*  don't consider the break between these very points */

      if  ( pCur->prev == _NULL )  {
        if  ( pCur->next == _NULL  ||  y[pCur->iend] == BREAK )  {
          err_msg("BAD BREAK in PutColon...");
          return  _FALSE;
        }
        //xCur = x[pCur->iend];
        xCur = low_data->box.left;
      }
      else  if  ( pCur->next == _NULL )  {
        if  ( y[pCur->ibeg] == BREAK )  {
          err_msg("BAD BREAK in PutColon...");
          return  _FALSE;
        }
        //xCur = x[pCur->ibeg];
        xCur = low_data->box.right;
      }
      else  {
        if  ( y[pCur->ibeg] == BREAK  ||  y[pCur->iend] == BREAK )  {
          err_msg("BAD BREAK in PutColon...");
          return  _FALSE;
        }
        if  ( IsAnyBreak( pCur ) )  {
          if  (   pCur->next == pPt1
               && pPt1->next != _NULL
               && IsAnyBreak(pPt1->next)
               && pPt1->next->next == pPt2
               && pPt2->next != _NULL
              )  {     /* Unite breaks around these points, if any */
            if  (   IsAnyBreak(pPt2->next)
                 && pPt2->next->next != _NULL
                )
              xCur = (_SHORT)MEAN_OF( x[pCur->ibeg], x[pPt2->next->iend] );
            else
              xCur = (_SHORT)MEAN_OF( x[pCur->ibeg], x[pPt2->next->ibeg] );
          }
          else  if  ( x[pCur->ibeg] < x[pCur->iend] )
            xCur = (_SHORT)MEAN_OF( x[pCur->ibeg], x[pCur->iend] );
          else
            xCur = x[pCur->ibeg];
        }
        else
          xCur = (_SHORT)MEAN_OF( x[pCur->ibeg], x[pCur->iend] );
      }

      dxCur = xCur - xColon;
      if  ( dxCur >= 0 )
        bWasDxPositive = _TRUE;
      else
        bWasDxNegative = _TRUE;
      TO_ABS_VALUE(dxCur);

      if  ( dxCur < dxBest )  {
        dxBest = dxCur;
        pBest = pCur;
      }

    } /*30*/

  } /*20*/

        /*  If there is no place to put colon, just exit: */

  if  ( pBest == _NULL )
    return  _FALSE;

        /*  Special considerations for colons at the beg. or  */
        /* end of the word:                                   */

  if  ( bWasDxPositive  &&  !bWasDxNegative )
    pBest = p1st;
  else  if  ( bWasDxNegative  &&  !bWasDxPositive )
    pBest = pLast;

        /*  If there are any XT-STs before pBest that lay to the */
        /* right of our "colon", put colon before those:         */

  bWasXTST = _FALSE;      
  for  ( pCur=pBest->prev;
         pCur!=NULL && pCur!=low_data->specl;
         pCur=pCur->prev )  {

    if  ( IsAnyBreak( pCur ) )
      continue;

    if  ( !IsXTorST( pCur ) )  {
      if  ( bWasXTST )
        break;
      continue;
    }

    if  ( pCur==pPt1 || pCur==pPt2 )
      continue;

    if  (   pCur->ibeg < pPt1->ibeg
         || pCur->ibeg < pPt2->ibeg
        )
      break;

    bWasXTST = _TRUE;

    if  ( x[MID_POINT(pCur)] > xColon )
      pBest = pCur;

  }

        /*  If pBest isn't a BREAK, then create a BREAK and   */
        /* put it just before or after pBest:                 */

  if  ( !IsAnyBreak(pBest) )  {
    p_SPECL  pNewBrk = NewSPECLElem( low_data );
    if  ( pNewBrk == _NULL )
      return  _FALSE;
    pNewBrk->code = _ZZZ_;
    ASSIGN_HEIGHT( pNewBrk, _MD_ );
    if  ( pBest == pLast )  { /* i.e. if the last non-point-like elem in specl */
      pNewBrk->ibeg =
      pNewBrk->iend = pBest->iend;
      Insert2ndAfter1st( pBest, pNewBrk );
    }
    else  { /* i.e. the 1st non-point-like elem in specl */
      pNewBrk->ibeg =
      pNewBrk->iend = pBest->ibeg;
      Insert2ndAfter1st( pBest->prev, pNewBrk );
    }
    pBest = pNewBrk;
  }

  else  /* i.e. pBest is BREAK */  {
    if  (   pPt2 == pPt1->next
         && (pPt1->prev == _NULL  ||  IsAnyBreak(pPt1->prev))
         && (pPt2->next == _NULL  ||  IsAnyBreak(pPt2->next))
         && (pBest == pPt1->prev  ||  pBest == pPt2->next)
        )
      return  _TRUE;
  }

        /*  Otherwise, move points to the place just after    */
        /* this BREAK, create the new break after the points, */
        /* if needed. Then adjust begs and ends of breaks.    */

  AdjustBegEndWithoutPoint( pPt1 );
  AdjustBegEndWithoutPoint( pPt2 );

  Move2ndAfter1st( pBest, pPt1 );
  Move2ndAfter1st( pPt1, pPt2 );
  if  ( HEIGHT_OF(pPt1) > HEIGHT_OF(pPt2) )  {
    p_SPECL  pTmp;
    SwapThisAndNext( pPt1 );
    pTmp = pPt1;
    pPt1 = pPt2;
    pPt2 = pTmp;
  }
  if  ( pBest->ibeg < pPt1->ibeg)
    pBest->iend = pPt1->ibeg;

  if  ( pPt2->next == _NULL )
    /*nothing*/;

  else  if  ( IsAnyBreak(pPt2->next) )  {
    if  ( pPt2->next->iend > pPt2->iend )
      pPt2->next->ibeg = pPt2->iend;
  }
  else  {
    p_SPECL pNewBrk = NewSPECLElem( low_data );
    if  ( pNewBrk != _NULL )  {
      Insert2ndAfter1st( pPt2, pNewBrk );
      pNewBrk->code = _ZZZ_;
      ASSIGN_HEIGHT( pNewBrk, _MD_ );
      if  ( pPt2->iend < pNewBrk->next->ibeg )  {
        pNewBrk->ibeg = pPt2->iend;
        pNewBrk->iend = pNewBrk->next->ibeg;
      }
      else  {
        pNewBrk->ibeg = pNewBrk->next->iend;
        pNewBrk->iend = pPt2->ibeg;
      }
    }
  }

        /*  Because of moving the points out of their place   */
        /* there may occur situation of two adjacent breaks.  */
        /*  We'll leave only the strongest break of the pair, */
        /* adjusting beg and end accordingly:                 */

  for  ( pCur=low_data->specl->next;
         pCur!=_NULL;
         pCur=pCur->next )  { /*50*/
    if  (   IsAnyBreak( pCur )
         && pCur->next != _NULL
         && IsAnyBreak( pCur->next )
        )  {
      if  ( pCur->code==_FF_  ||  pCur->next->code==_FF_ )
        pCur->code = _FF_;
      else
        pCur->code = _ZZZ_;
      pCur->ibeg = HWRMin( pCur->ibeg, pCur->next->ibeg );
      pCur->iend = HWRMax( pCur->iend, pCur->next->iend );
      DelFromSPECLList( pCur->next );
      pCur = pCur->prev;
    }
  } /*50*/

  return  _TRUE;

} /*PutColonAtItsPlace*/
/************************************************/

_VOID   AdjustBegEndWithoutPoint( p_SPECL pPoint )
{
  p_SPECL  pPrev, pNext;

  if  (   (pPrev=pPoint->prev) == _NULL
       || (pNext=pPoint->next) == _NULL
      )
    return;

  if  ( IsAnyBreak(pPrev) )  {
    if  ( pPrev->iend == pPoint->ibeg )
      pPrev->iend = pNext->ibeg;
  }
  if  ( IsAnyBreak(pNext) )  {
    if  ( pNext->ibeg == pPoint->iend )
      pNext->ibeg = pPrev->iend;
  }

} /*AdjustBegEndWithoutPoint*/
/************************************************/

#undef  STD_BASELINE_HEIGHT
#undef  MAX_POINTS_IN_WORD

/************************************************/

#endif //#ifndef LSTRIP
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\palk.cpp ===
/* *************************************************************************** */
/* *    Tree - based dictionary programs                                     * */
/* *************************************************************************** */
/* * Created 3-1998 by NB.   Last modification: 1-26-99                      * */
/* *************************************************************************** */

#include "hwr_sys.h"
#include "ams_mg.h"                           /* Most global definitions     */

#if VER_PALK_DICT || defined PALK_SUPPORT_PROGRAM
//#if defined PALK_DICT || defined PALK_SUPPORT_PROGRAM

#include "xrwdict.h"
#include "Xrlv_p.h"
#include "Palk.h"

#include "commondict.h"


// --------------- Defines -----------------------------------------------------



#ifndef PALK_FILEOP
 #ifdef  PEGASUS
  #define PALK_FILEOP        0
  #define PALK_SUPPORTFUNCS  0
 #else
  #define PALK_FILEOP        0
  #define PALK_SUPPORTFUNCS  1
 #endif
#endif

#ifndef PALK_SUPPORTFUNCS
 #define PALK_SUPPORTFUNCS  1
#endif

#define PALK_ST_GETRANK(state) (((state) >> 24) & 0xFF)
#define PALK_ST_GETNUM(state) (((state) >> 8) & 0xFFFF)
#define PALK_FORMSTATE(rank,num_in_layer) ( ((rank) << 24) + ((num_in_layer)<<8) )


// --------------- Redirect ELK calls to PALK for Callig  ----------------------------------------

#ifndef PALK_SUPPORT_PROGRAM //Calligrapher

#define PalkGetNextSyms     ElkGetNextSyms
#define PalkCheckWord       ElkCheckWord

#endif //PALK_SUPPORT_PROGRAM


// ----------------------- Redirect HWR ----------------------------------------

#if PALK_FILEOP
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
 #if defined PALK_SUPPORT_PROGRAM
  #define HWRMemoryAlloc(x)   malloc(x)
  #define HWRMemoryFree(x)    free(x)
  #ifndef HWRMemSet
   #define HWRMemSet(p, v, l) memset(p, v, l)
  #endif
  #define HWRMemCpy(d, s, l)  memmove(d, s, l)
  #define HWRStrLen(p)        strlen(p)
  #define HWRStrCmp(p, v)     strcmp(p, v)
  #define HWRStrnCmp(p, v, l) strncmp(p, v, l)
  #define HWRStrCpy(d, s)     strcpy(d, s)
 #endif //defined PALK_SUPPORT_PROGRAM
#endif /* PALK_FILEOP */


#if defined(PEGDICT) && defined(DBG) 
#include <tchar.h>
 int MyMsgBox(TCHAR * str, unsigned int);
#else
 #define MyMsgBox(a,b)
#endif




#define GetShort(p)  ( (short)( *(unsigned char *)(p) ) + \
                       ( ((short)( *((char *)(p) +1) )) <<8 )  )


#define GetUShort(p)  ( (unsigned short)( *(unsigned char *)(p) ) + \
                        ( ((unsigned short)( *((unsigned char *)(p) +1) )) <<8 )  )



/* *************************************************************************** */
/* *       Find dvset size                                                   * */
/* *************************************************************************** */
  _INT find_dvset_size(_UCHAR *p,_INT dvset_len)
  {
     _INT i;
     _INT size=0;

     for (i=0; i<dvset_len; i++)
     {
        if ((*p)& SHORT_VADR_FLAG)
        {  size+=2;  p+=2;  }
        else
        {  size+=3;  p+=3;  }
     }

     return(size);
  }


/* *************************************************************************** */
/* *       find dvset                                                        * */
/* *************************************************************************** */
  _UCHAR *find_dvset(_CHAR *pDvsetTabl,_INT dvset_num,_INT *pdvset_len)
  {
     short tshift;
     _INT tbshift,dv_shift,i;
     _INT num_set;
     _CHAR *ptb,*pth;
     _UCHAR *p;

     if (dvset_num<MIN_LONG_DVSET_NUM)  tshift=sizeof(short);
     else                tshift=GetShort(pDvsetTabl);//*((short *)pDvsetTabl);

     ptb=pDvsetTabl+tshift;
     pth=ptb;
     tbshift=0;
     dv_shift=GetUShort(pth+2);//*((unsigned short *)(pth+2));
     while(tbshift<dv_shift && GetShort(pth)/**((short *)pth)*/<dvset_num)
     { pth+=5; tbshift+=5; }
     if (tbshift>=dv_shift || GetShort(pth)/**((short *)pth)*/>dvset_num) pth-=5;

     *pdvset_len=(_UCHAR)pth[4];
     tbshift=GetUShort(pth+2);//*((unsigned short *)(pth+2));
     num_set=GetShort(pth);//*((short *)pth);
     p=(_UCHAR *)(ptb+tbshift);//+(dvset_num-num_set)*sizeof(short)*(*pdvset_len);
     for (i=0; i<dvset_num-num_set; i++)
        p+=find_dvset_size(p,*pdvset_len);
     return(p);
  }


/* *************************************************************************** */
/* *       find dvset len                                                    * */
/* *************************************************************************** */
  _INT find_dvset_len(_CHAR *pDvsetTabl,_INT dvset_num)
  {
     short tshift;
     _INT tbshift,dv_shift;
     _CHAR *pth;
     _INT dvset_len;

     if (dvset_num<MIN_LONG_DVSET_NUM)  tshift=sizeof(short);
     else                tshift=GetShort(pDvsetTabl);//*((short *)pDvsetTabl);

     pth=pDvsetTabl+tshift;
     tbshift=0;
     dv_shift=GetUShort(pth+2);//*((unsigned short *)(pth+2));
     while(tbshift<dv_shift && GetShort(pth)/**((short *)pth)*/<dvset_num)
     { pth+=5; tbshift+=5; }
     if (tbshift>=dv_shift || GetShort(pth)/**((short *)pth)*/>dvset_num) pth-=5;

     dvset_len=(_UCHAR)pth[4];
     return(dvset_len);
  }


/* *************************************************************************** */
/* *       Find chset                                                        * */
/* *************************************************************************** */
  _CHAR *find_chset(_CHAR *pChsetTabl,_INT chset_num,_INT *pchsetlen)
  {
     short tshift;
     _INT tbshift,syms_shift;
     _INT num_set;
     _CHAR *ptb,*p;
     _CHAR *pth;

     if (chset_num<MIN_LONG_CHSET_NUM)  tshift=sizeof(short);
     else                tshift=GetShort(pChsetTabl);//*((short *)pChsetTabl);

     ptb=pChsetTabl+tshift;
     pth=ptb;
     tbshift=0;
     syms_shift=GetUShort(pth+2);//*((unsigned short *)(pth+2));
     while(tbshift<syms_shift && GetShort(pth)/**((short *)pth)*/<chset_num)
     { pth+=5; tbshift+=5; }
     if (tbshift>=syms_shift || GetShort(pth)/**((short *)pth)*/>chset_num) pth-=5;

     *pchsetlen=(_UCHAR)pth[4];
     tbshift=GetUShort(pth+2);//*((unsigned short *)(pth+2));
     num_set=GetShort(pth);//*((short *)pth);
     p=ptb+tbshift+(chset_num-num_set)*(*pchsetlen);
     return(p);
  }


/* *************************************************************************** */
/* *      Find chset len                                                     * */
/* *************************************************************************** */
  _INT find_chset_len(_CHAR *pChsetTabl,_INT chset_num)
  {
     short tshift;
     _INT tbshift,syms_shift;
     _INT chset_len;
     _CHAR *pth;

     if (chset_num<MIN_LONG_CHSET_NUM)  tshift=sizeof(short);
     else                tshift=GetShort(pChsetTabl);//*((short *)pChsetTabl);

     pth=pChsetTabl+tshift;
     tbshift=0;
     syms_shift=GetUShort(pth+2);//*((unsigned short *)(pth+2));
     while(tbshift<syms_shift && GetShort(pth)/**((short *)pth)*/<chset_num)
     { pth+=5; tbshift+=5; }
     if (tbshift>=syms_shift || GetShort(pth)/**((short *)pth)*/>chset_num) pth-=5;

     chset_len=(_UCHAR)pth[4];
     return(chset_len);
  }



/* *************************************************************************** */
/* *       Copy dvsset                                                       * */
/* *************************************************************************** */
  _INT copy_dvset(_INT *dvset,_UCHAR *p,_INT dvset_len)
  {
     _INT i;
     _INT size=0;

     for (i=0; i<dvset_len; i++)
     {
        if ((*p)& SHORT_VADR_FLAG)
        {
           dvset[i]=(((*p)&0x7F)<<8);  p++;
           dvset[i]+=(*p);  p++;
           size+=2;
        }
        else
        {
           dvset[i]=((*p)<<16);  p++;
           dvset[i]+=((*p)<<8);  p++;
           dvset[i]+=(*p);  p++;
           size+=3;
        }
     }
     return(size);
  }

/* *************************************************************************** */
/* *       Decode vert                                                       * */
/* *************************************************************************** */
  _CHAR *decode_vert(_VOID *pVoc,_CHAR *vert,_INT *dvset,_INT *pdvset_len,
                    _CHAR *chset,_INT *pchset_len)
  {
     _CHAR *p=vert;
     _UCHAR byte1;
     _CHAR *cchset;
     _UCHAR *tdvset;
     _INT dvset_num,chset_num,chset_len;
     _CHAR *pDvsetTabl=(_CHAR *)PalkGetDvsetTabl(pVoc);
     _CHAR *pChsetTabl=(_CHAR *)PalkGetChsetTabl(pVoc);
     _BOOL NotLast;


     byte1=(_UCHAR)(*p);
     if (byte1 & ONE_BYTE_FLAG)                                  //1000 0000
     {
        chset[0]=(_CHAR)(byte1&0x7F);                             //0111 1111
        *pchset_len = (chset[0]<5) ? 0 : 1;
        *pdvset_len=0;
        p++;
     }
     else if (IsTreeMerged(pVoc))
     {
        if (!(byte1&END_WRD_FLAG) && (byte1&CODED_DVSET_FLAG))                         //0010 0000
        {
           if (byte1 & SHORT_DVSET_NUM_FLAG)                  //0001 0000
           { dvset_num=byte1 & DVSET_NUM_MASK;  p++; }        //0000 1111
           else
           {
              dvset_num = (byte1 & DVSET_NUM_MASK)<<8; p++;
              dvset_num+=(_UCHAR)(*p); p++;
           }
           tdvset=find_dvset(pDvsetTabl,dvset_num,pdvset_len);
           copy_dvset(dvset,tdvset,*pdvset_len);
        }
        else
        {
           *pdvset_len = byte1 & DVSET_LEN_MASK;  p++;           //0000 1111
           p+=copy_dvset(dvset,(_UCHAR *)p,*pdvset_len);
        }


        if ((*p) & CODED_CHSET_FLAG)                                  //1000 0000
        {
           if ((*p) & SHORT_CHSET_NUM_FLAG)                          //0100 0000
           {
              chset_num = (*p) & CHSET_NUM_MASK;                     //0011 1111
              p++;
           }
           else
           {
              chset_num = ((*p) & CHSET_NUM_MASK)<<8;
              p++;
              chset_num+= (_UCHAR)(*p);
              p++;
           }
           cchset=find_chset(pChsetTabl,chset_num,pchset_len);
           memcpy(chset,cchset,(*pchset_len));
        }
        else
        {
           NotLast=true;
           chset[0]=(*p);                                             //chset len >1 !!!
           p++;
           chset_len=1;
           while (NotLast)
           {
              chset[chset_len]=(*p)& (_CHAR)0x7F;                     //0111 1111
              NotLast=(((*p)& LAST_SYM_FLAG) ==0);                       //1000 0000
              p++;  chset_len++;
           }
           *pchset_len=chset_len;
        }

     }
     else //if PlainTree
     {
        _INT i;

        if ((*p)&SHORT_ECHSET_LEN_FLAG)
        {
           chset_len=(*p)&SHORT_ECHSET_LEN_MASK;
           p++;
        }
        else 
        {
           chset_len=((*p)&SHORT_ECHSET_LEN_MASK)<<8;
           p++;
           chset_len+=(*p);
           p++;
        }

        for (i=0; i<chset_len; i++)
        {
           chset[i]=*p;
           p++;
        }
        *pchset_len=chset_len;
        *pdvset_len=0;
     }
     return(p);
  }

/* *************************************************************************** */
/* *       Pass vert                                                         * */
/* *************************************************************************** */
  _CHAR *pass_vert(_VOID *pVoc, _CHAR *vert)
  {
     _CHAR *p=vert;
     _CHAR byte1=*p;
     _INT dvset_len,chset_len;
     _BOOL NotLast;

     if (byte1 & ONE_BYTE_FLAG)                                      //1000 0000
        p++;
     else if (IsTreeMerged(pVoc))
     {
        if (!(byte1&END_WRD_FLAG) && (byte1&CODED_DVSET_FLAG))                                //0010 0000
        {
           if (byte1 & SHORT_DVSET_NUM_FLAG)                         //0001 0000
              p++;
           else
              p+=2;
        }
        else
        {
           dvset_len = byte1 & DVSET_LEN_MASK;  p++;
//           p+=sizeof(short)*dvset_len;
           p+=find_dvset_size((_UCHAR *)p,dvset_len);
        }

        if ((*p)& CODED_CHSET_FLAG)                                  //1000 0000
        {
           if ((*p)& SHORT_CHSET_NUM_FLAG)                          //0100 0000
              p++;
           else
              p+=2;

        }
        else
        {
           NotLast=true;                               //chsetlen>1 !!!
           while (NotLast)
           {
              NotLast=(((*p)& LAST_SYM_FLAG) ==0);    //1000 0000   //true for first byte!!!
              p++;
           }
        }
     }
     else //Plain Tree
     {
        if ((*p)&SHORT_ECHSET_LEN_FLAG)
        {
           chset_len=(*p)&SHORT_ECHSET_LEN_MASK;
           p++;
        }
        else
        {
           chset_len=((*p)&SHORT_ECHSET_LEN_MASK)<<8;
           p++;
           chset_len+=(*p);
           p++;
        }

        p+=chset_len;
     }

     return(p);
  }


/* *************************************************************************** */
/* *       Find vert status                                                  * */
/* *************************************************************************** */
  _UCHAR find_vert_status_and_attr(_CHAR *vert,_UCHAR *pattr)
  {
     _UCHAR status;
     _UCHAR byte1=*vert,sym;

     if (byte1 & ONE_BYTE_FLAG)                                 //1000 0000
     {
        sym=(_UCHAR)(byte1 & 0x7F);
        if (sym<5) { status = (sym>0) ? XRWD_BLOCKEND:DICT_INIT; *pattr=(_UCHAR)(sym-1); }
        else         { status=XRWD_MIDWORD;   *pattr=0; }
     }
     else
     {
        if (byte1 & END_WRD_FLAG)                                //0100 0000
        {  status=XRWD_WORDEND; *pattr=(_UCHAR)((byte1&ATTR_MASK)>>4); }   //0011 0000
        else
        {  status=XRWD_MIDWORD; *pattr=0; }
     }

     return(status);
  }


/* *************************************************************************** */
/* *       Pass vert                                                         * */
/* *************************************************************************** */
  _CHAR *pass_vert_and_find_setslen(_VOID *pVoc,_CHAR *vert,_INT *pdvset_len,_INT *pchset_len)
  {
     _CHAR *p=vert;
//     _UCHAR hbyte1,qbyte2;
     _UCHAR byte1;
     _INT dvset_num,chset_num;
     _INT chset_len;
//     _INT dvset_len;
     _CHAR *pDvsetTabl=(_CHAR *)PalkGetDvsetTabl(pVoc);
     _CHAR *pChsetTabl=(_CHAR *)PalkGetChsetTabl(pVoc);
     _CHAR sym;
     _BOOL NotLast;

     byte1=(_UCHAR)(*p);
     if (byte1 & ONE_BYTE_FLAG)                                      //1000 0000
     {
        sym=(_CHAR)(byte1&0x7F);
        *pchset_len = (sym<5) ? 0 : 1;
        *pdvset_len=0;
        p++;
     }
     else if (IsTreeMerged(pVoc))
     {
        if (!(byte1&END_WRD_FLAG) && (byte1&CODED_DVSET_FLAG))                                //0010 0000
        {
           if (byte1 & SHORT_DVSET_NUM_FLAG)                         //0001 0000
           { dvset_num = byte1 & DVSET_NUM_MASK;  p++; }       //0000 1111
           else
           {
              dvset_num = (byte1 & DVSET_NUM_MASK)<<8; p++;
              dvset_num+= (_UCHAR)(*p); p++;
           }
           *pdvset_len=find_dvset_len(pDvsetTabl,dvset_num);
        }
        else
        {
           *pdvset_len = byte1 & DVSET_LEN_MASK;  p++;
           p+=find_dvset_size((_UCHAR *)p,*pdvset_len);
        }

        if ((*p)& CODED_CHSET_FLAG)                                  //1000 0000
        {
           if ((*p)& SHORT_CHSET_NUM_FLAG)                          //0100 0000
              { chset_num=(*p)& CHSET_NUM_MASK; p++; }      //0011 1111
           else
           {
              chset_num = ((*p)& CHSET_NUM_MASK)<<8; p++;
              chset_num+= (_UCHAR)(*p); p++;
           }
           *pchset_len=find_chset_len(pChsetTabl,chset_num);

        }
        else
        {
           NotLast=true;
           p++;
           chset_len=1;                          //chset len >1 !!!
           while (NotLast)
           {
              NotLast=(((*p)& LAST_SYM_FLAG) ==0);    //1000 0000   //true for first byte!!!
              p++;  chset_len++;
           }
           *pchset_len=chset_len;
        }

     }
     else //Plain Tree
     {

		if ((*p)&SHORT_ECHSET_LEN_FLAG)
        {
           chset_len=(*p)&SHORT_ECHSET_LEN_MASK;
           p++;
        }
        else
        {
           chset_len=((*p)&SHORT_ECHSET_LEN_MASK)<<8;
           p++;
           chset_len+=(*p);
           p++;
        }

        p+=chset_len;
        *pchset_len=chset_len;
        *pdvset_len=0;
     }

     return(p);
  }



/* *************************************************************************** */
/* *       Find Vert                                                         * */
/* *************************************************************************** */
  _CHAR *find_vert(_VOID *pVoc,_INT rank,_INT num_in_layer)
  {
     _CHAR *pGraph=(_CHAR *)PalkGetGraph(pVoc);
     _INT *gheader=(_INT *)pGraph;
     _INT lshift=gheader[(rank<<1)];
//     unsigned short *lheader=(unsigned short *)(pGraph+lshift);
     unsigned char *lheader=(unsigned char *)(pGraph+lshift);
     _CHAR *pv;
     _INT i,r,j,lbshift;

     i=num_in_layer>>LHDR_STEP_LOG;
     r = (IsTreeMerged(pVoc)) ? num_in_layer&LHDR_STEP_MASK : num_in_layer;
//     lbshift = (IsTreeMergedi(pVoc)) ? lheader[(i<<1)] : 0;
     lbshift = (IsTreeMerged(pVoc)) ? GetUShort(lheader+(i<<2)) : 0;
     pv=(_CHAR *)lheader+lbshift;
     for (j=0; j<r; j++)
        pv=pass_vert(pVoc,pv);

     return(pv);
  }


/* *************************************************************************** */
/* *       Find vert rank                                                    * */
/* *************************************************************************** */
  _INT find_vert_rank(_VOID *pVoc,_INT nvert,_INT *pnum_in_layer)
  {
     _CHAR *pGraph=(_CHAR *)PalkGetGraph(pVoc);
     _INT two_rank=0,*pgh=(_INT *)pGraph;
     _INT two_nranks=pgh[0]/sizeof(_INT);

     while(two_rank<two_nranks-2 && pgh[two_rank+1]<nvert) two_rank+=2;
     if (pgh[two_rank+1]>nvert) two_rank-=2;
     *pnum_in_layer=nvert-pgh[two_rank+1];

     return((two_rank>>1));
  }


/* *************************************************************************** */
/* *       Find next child                                                   * */
/* *************************************************************************** */
  _INT find_next_d_child(_VOID *pVoc,_INT nv,_INT *pnum_in_layer,_UCHAR *pstatus,
                        _UCHAR *pattr)
  {
     _INT rank=find_vert_rank(pVoc,nv,pnum_in_layer);
     _CHAR *pv=find_vert(pVoc,rank,*pnum_in_layer);
     *pstatus=find_vert_status_and_attr(pv,pattr);

     return(rank);
  }

/* *************************************************************************** */
/* *       Find first                                                        * */
/* *************************************************************************** */
  _INT find_first_nd_child_num(_VOID *pVoc,_INT rank,_INT num_in_layer)
  {
     _CHAR *pGraph=(_CHAR *)PalkGetGraph(pVoc);
     _INT *gheader=(_INT *)pGraph;
     _INT lshift=gheader[(rank<<1)];
//     unsigned short *lheader=(unsigned short *)(pGraph+lshift);
     unsigned char  *lheader=(unsigned char *)(pGraph+lshift);
     _CHAR *pv;
     _INT i,r,j,lbshift,num_prev_nd_childs,dvset_len,chset_len;

     i=(num_in_layer>>LHDR_STEP_LOG)<<1;          //i=2*i
     r = (IsTreeMerged(pVoc)) ? num_in_layer&LHDR_STEP_MASK : num_in_layer;
//     lbshift = (IsTreeMerged(pVoc)) ? lheader[i] : 0;
     lbshift = (IsTreeMerged(pVoc)) ? GetUShort(lheader+(i<<1)) : 0;
     pv=(_CHAR *)lheader+lbshift;
//     num_prev_nd_childs = (IsTreeMerged(pVoc)) ? lheader[i+1] : 0;
     num_prev_nd_childs = (IsTreeMerged(pVoc)) ? GetUShort(lheader+((i+1)<<1)) : 0;
     for (j=0; j<r; j++)
     {
        pv=pass_vert_and_find_setslen(pVoc,pv,&dvset_len,&chset_len);
        num_prev_nd_childs+=(chset_len-dvset_len);
     }

     return(num_prev_nd_childs);
  }



/* *************************************************************************** */
/* *       Find next child                                                   * */
/* *************************************************************************** */
  _CHAR *find_next_nd_child(_VOID *pVoc,_INT rank,_INT num_in_layer,
                           _CHAR *prev_ndch_vert,_INT *pndch_num_in_layer,
                           _UCHAR *pstatus,_UCHAR *pattr)
  {
     _CHAR *ndch_vert;
     if (prev_ndch_vert==_NULL)
     {
        *pndch_num_in_layer=find_first_nd_child_num(pVoc,rank,num_in_layer);
        ndch_vert=find_vert(pVoc,rank+1,*pndch_num_in_layer);
     }
     else
     {
        (*pndch_num_in_layer)++;
        ndch_vert=pass_vert(pVoc,prev_ndch_vert);
     }
     if (pstatus!=_NULL)
        *pstatus=find_vert_status_and_attr(ndch_vert,pattr);
     return(ndch_vert);
  }


/* *************************************************************************** */
/* *       Get next syms                                                     * */
/* *************************************************************************** */
_INT PalkGetNextSyms(p_VOID cur_fw, p_VOID fwb, p_VOID pVoc, _UCHAR chSource, p_VOID hUserDict, p_rc_type prc)
{
	p_fw_buf_type psl = (p_fw_buf_type)fwb;
	p_fw_buf_type cfw = (p_fw_buf_type)cur_fw;
	
	// if the source is the dictionary, then ask for the next symbols list from inferno
	if (chSource == XRWD_SRCID_VOC || chSource == XRWD_SRCID_USV)
	{
		return InfernoGetNextSyms (cfw, psl, chSource, hUserDict, prc);
	}
	else
	{
		_ULONG state, nextstate;
		_UCHAR status, attr;
		_INT rank, num_in_layer;
		_CHAR *vert;
		_CHAR chset[MAX_CHSET_LEN];
		_INT dvset[MAX_DVSET_LEN];
		_INT  chsetlen,dvsetlen,num_nd_childs,num_d_childs,ind,id,i;
		_UCHAR sym,*pnd_sym,*pd_sym;
		_INT dch_rank,dch_num_in_layer,ndch_num_in_layer;
		_CHAR *ndch_vert	=	_NULL;

		if (cfw == 0)
			state = 0;
		else
			state = cfw->state;

		rank=PALK_ST_GETRANK(state);

		num_in_layer=PALK_ST_GETNUM(state);

		vert=find_vert(pVoc,rank,num_in_layer);
		decode_vert(pVoc,vert,dvset,&dvsetlen,chset,&chsetlen);

		num_nd_childs=chsetlen-dvsetlen;
		num_d_childs=dvsetlen;
		pnd_sym = (_UCHAR *) chset;
		pd_sym = (_UCHAR *) chset+num_nd_childs;
		ind=0; id=0; i=0;

		//MyMsgBox(TEXT("GetNextSyms"),0);

		while(ind+id<chsetlen)
		{
			if (id>=num_d_childs || ind<num_nd_childs && pnd_sym[ind]<pd_sym[id])
			{
			   sym=pnd_sym[ind];
	//           TimeB= (_ULONG)GetTickCount();
			   ndch_vert=find_next_nd_child(pVoc,rank,num_in_layer,ndch_vert,
											&ndch_num_in_layer,&status,&attr);
	//           TimeND+=( (_ULONG)GetTickCount()-TimeB);
			   nextstate=PALK_FORMSTATE(rank+1,ndch_num_in_layer);
			   ind++;
			}
			else //if (ind>=num_nd_childs || id<num_d_childs && pd_sym[id]<pnd_sym[ind])
			{
			   sym=pd_sym[id];
	//           TimeB= (_ULONG)GetTickCount();
			   dch_rank=find_next_d_child(pVoc,dvset[id],&dch_num_in_layer,&status,&attr);
	//           TimeD+=( (_ULONG)GetTickCount()-TimeB);
			   nextstate=PALK_FORMSTATE(dch_rank,dch_num_in_layer);
			   id++;
			}

			psl[i].sym       =  sym;
			psl[i].l_status  = status;
			psl[i].attribute = attr;
			psl[i].chain_num = 0;
			psl[i].penalty   = 0;
			psl[i].cdb_l_status = 0;         /* Delayed status for a codebook entry */
			psl[i].codeshift = 0;            /* Shift in the codebook      */
			psl[i].state     = nextstate;

			i++;
		 }

		 return chsetlen;
	}		
}

/* *************************************************************************** */
/* *       Check word                                                        * */
/* *************************************************************************** */
_INT PalkCheckWord(_UCHAR *word, _UCHAR *status, _UCHAR *attr,p_VOID pVoc)
{
	// Since we have removed callig's dict, we'll ask inferno 
	if (InfernoCheckWord (word, status, attr, pVoc))
		return(PALK_NOERR);
	else
		return(PALK_ERR);
}


#endif //VER_PALK_DICT || PALK_SUPPORT_PROGRAM
/* *************************************************************************** */
/* *       END OF ALL                                                        * */
/* *************************************************************************** */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\low_util.cpp ===
#include "hwr_sys.h"
#include "ams_mg.h"
#include "lowlevel.h"
#include "lk_code.h"
#include "def.h"
#include "low_dbg.h"
#include "calcmacr.h"


#if PG_DEBUG
#include "pg_debug.h"
#endif /* PG_DEBUG */
/*********************************************/


  _VOID  SetXYToInitial ( low_type _PTR pLowData )
    {
  DBG_CHK_err_msg(    pLowData->xBuf==_NULL || pLowData->yBuf==_NULL
                       || pLowData->nLenXYBuf <= 0
                       || pLowData->nLenXYBuf > TWO(LOWBUF),
                         "RestXY: BAD bufs" ) ;
  pLowData->x = pLowData->xBuf;
  pLowData->y = pLowData->yBuf;

    } /*SetXYToInitial*/
/*********************************************/


  _SHORT  LowAlloc(_SHORT _PTR _PTR buffer,
                   _SHORT num_buffers, 
                   _SHORT len_buf,
                   low_type _PTR pLowData)
     {
       _INT   i ;
       _LONG  lSize = ( (_LONG)len_buf * num_buffers +
                               TWO(pLowData->nLenXYBuf) +
                               pLowData->rmAbsnum ) * sizeof(_SHORT) +
                               pLowData->rmGrBord * sizeof( POINTS_GROUP )  ;

           if  ( ( *buffer = (_SHORT _PTR)HWRMemoryAlloc(lSize) ) == _NULL )
               {
                 err_msg("LOW_UTIL: Not enough memory for buffer");
                  return  UNSUCCESS ;
               }

  // ??
  // set addresses of the all data
  // ATTENTION!!! do not change sequence of the code
  // arrays for the trace: x and y stores separately
        pLowData->xBuf = ( *buffer ) ;
        pLowData->yBuf = (*buffer) + pLowData->nLenXYBuf ;


        pLowData->pGroupsBorder = (p_POINTS_GROUP)( (p_SHORT)pLowData->yBuf +
                                                      pLowData->nLenXYBuf ) ;
  // ??
        pLowData->pAbsnum = (p_SHORT)((p_POINTS_GROUP)pLowData->pGroupsBorder +
                                                      pLowData->rmGrBord ) ;
  // adresses of the working buffers
          for ( i = 0 ; i < num_buffers ; i++ )
            {
              pLowData->buffers[i].ptr =
                        (p_SHORT)( (p_SHORT)pLowData->pAbsnum +
                                            pLowData->rmAbsnum ) +
                                            i * len_buf ;

              pLowData->buffers[i].nSize = len_buf ;
            }

      return SUCCESS ;
      }
/*******************************************************/
#ifndef LSTRIP
  _SHORT alloc_rastr( _ULONG _PTR _PTR  rastr,  _SHORT  num_rastrs,
                      _SHORT len_rastr  )
    {
      _ULONG   memory ;

        memory = (_LONG)len_rastr*sizeof(_ULONG)*num_rastrs ;
        if ( ( *rastr = (_ULONG _PTR)HWRMemoryAlloc( memory ) ) == _NULL )
             {
               err_msg( "LOW_UTIL: No memory for rastr" ) ;
               return   UNSUCCESS ;
             }
        HWRMemSet( (p_CHAR)(*rastr), 0, (_WORD)memory ) ;
      return  SUCCESS ;
    }
#endif  //#ifndef LSTRIP

/*******************************************************/

   /*  On unsuccess, the function "AllocSpecl" returns */
   /* _FALSE and sets (*ppSpecl) to _NULL:             */

_BOOL  AllocSpecl ( p_SPECL _PTR ppSpecl, _SHORT nElements )
{
#if  HWR_SYSTEM==HWR_DOS  /* ||  HWR_SYSTEM==HWR_WINDOWS */
  extern  SPECL speclGlobal[] ;

  if  ( nElements > SPECVAL )
   {
    *ppSpecl = (p_SPECL)_NULL;
    return  _FALSE;
  }
  *ppSpecl = (p_SPECL)&speclGlobal;
#else
  if  ( (*ppSpecl = (p_SPECL)HWRMemoryAlloc((_ULONG)sizeof(SPECL)*nElements))
             == _NULL )
    return  _FALSE;
#endif

  return  _TRUE;

} /*AllocSpecl*/

_SHORT low_dealloc(_SHORT _PTR _PTR buffer)
{
   if(*buffer!=_NULL) HWRMemoryFree(*buffer);
   *buffer=_NULL;
   return SUCCESS;
}

/*******************************************************/
#ifndef LSTRIP
_SHORT dealloc_rastr(_ULONG _PTR _PTR rastr)
{
   if(*rastr!=_NULL) HWRMemoryFree(*rastr);
   *rastr=_NULL;
   return SUCCESS;
}
#endif//#ifndef LSTRIP

_VOID   DeallocSpecl ( p_SPECL _PTR ppSpecl )
{
  if  ( *ppSpecl != _NULL )  {

#if  HWR_SYSTEM==HWR_DOS /* ||  HWR_SYSTEM==HWR_WINDOWS */
  /*nothing*/
#else
    HWRMemoryFree(*ppSpecl);
#endif

    *ppSpecl = _NULL;
  }

} /*DeallocSpecl*/

/*******************************************************/

_SHORT  MaxPointsGrown(
                        #ifdef  FORMULA
                          _TRACE trace,
                        #endif  /*FORMULA*/
                        _SHORT nPoints )
{
#ifdef  FORMULA
  { _INT  i;

    for  ( i=nPoints-1;  i>=2;  i-- )  {
      if  ( trace[i].y == BREAK && trace[i-2] == BREAK )
        nPoints++;
    }
  }
#endif  /*FORMULA*/

  nPoints++;  /* Because of Andrey */
  return  nPoints;

} /*MaxPointsGrown*/
/*******************************************/

          /*  Counts (and returns) the total number of   */
          /* x- or y-maxima in the whole trajectory:     */
#ifndef LSTRIP

_INT  MaxesCount( p_SHORT xyArr, low_type _PTR pLowData )
{
  p_SHORT  y          = pLowData->y;
  _INT     iLastPoint = pLowData->ii - 2;
  _INT     iUp, iDown;
  _SHORT   yUp, yDown;
  _INT     nMaxes = 0;

  if  ( (iDown = nobrk_right( y, 1, iLastPoint)) >= iLastPoint )
    return  0;

  for(;;)  {
    iUp = iXmin_right( xyArr, y, iDown, 1 );
    yUp = xyArr[iUp];
    while  ( xyArr[++iUp] == yUp ) ;
    iUp--;
    iDown = iXmax_right( xyArr, y, iUp, 1 );
    yDown = xyArr[iDown];
    while  ( xyArr[++iDown] == yDown ) ;
    iDown--;
    nMaxes++;
    if  ( iDown <= iUp )  {  /* here is a break */
      if  (   (iDown = brk_right( y, iDown, iLastPoint )) >= iLastPoint
           || (iDown = nobrk_right( y, iDown, iLastPoint )) >= iLastPoint
          )
        break;
    }
  }

  return  nMaxes;

} /*MaxesCount*/
#endif //#ifndef LSTRIP



#if 0

/*******************************************/

   /*  This function has been borrowed from Formula project. */
   /*  It is used for that foolish "transfrm" not to crash.  */

static _VOID  ExtendXborder ( low_type _PTR pLowData, _SHORT dxBorder );

static _VOID  ExtendXborder ( low_type _PTR pLowData, _SHORT dxBorder )
{
  _SHORT  xLeft    = pLowData->xu_beg;
  _SHORT  xRight   = pLowData->xu_end;

  if  ( dxBorder < 2 )
    dxBorder = 2;

  pLowData->xu_beg = (xLeft>dxBorder)? (xLeft-dxBorder) : (xLeft-1);
  pLowData->xu_end = (xRight<(ALEF-dxBorder))? (xRight+dxBorder) : ALEF;

} /*ExtendXborder*/
/*******************************************/

#define  MAX_X_MAXES_ON_DEFIS   2
#define  MAX_Y_MAXES_ON_DEFIS   4
#define  MAX_MAXES_ON_DEFIS     5
#define  MAX_Y_MAXES_EQ_SIGN    5

_BOOL  BorderForSpecSymbol ( low_type _PTR pLowData , rc_type _PTR rc )
{
  _BOOL  bRet = _FALSE;
  _BOOL  bNumericalMode =    (rc->rec_mode & RECM_FORMULA)
                          || ((rc->low_mode & LMOD_BORDER_GENERAL)
                                  == LMOD_BORDER_NUMBER);
  p_SHORT  x       = pLowData->x;
  p_SHORT  y       = pLowData->y;
  _INT     iLastPt = pLowData->ii - 1;
  _SHORT   dyTrj   = DY_RECT(pLowData->box);
  _SHORT   yRange;
  _SHORT   xRange;
  _SHORT   yLeft  = -1,
           yRight = -1;  /* from where to count borders */
  _SHORT   dyBorder = 0;

      /*  Make ranges from the prev. border.  If this is the 1st */
      /* word, then all border values must be zero!!!            */

  if(rc->rec_mode & RECM_FORMULA)
    yRange = MEAN_OF( rc->yd_beg - rc->yu_beg,
                      rc->yd_end - rc->yu_end);
  else
    yRange = 0;
  yRange = THREE_FOURTH(yRange);
  xRange = ONE_HALF(yRange);

      /*  Check for some spec. symbols: */

  if  ( MayBeFrline( x, y, 0, iLastPt, 1 ) )  { /*10*/

    _INT    iBeg, iEnd;  /* of the straight part of the line */

    if  ( !bNumericalMode )  {
      _INT    nxMaxes = MaxesCount( x, pLowData );
      _INT    nyMaxes = MaxesCount( y, pLowData );
      if  (   nxMaxes > MAX_X_MAXES_ON_DEFIS
           || nyMaxes > MAX_Y_MAXES_ON_DEFIS
           || (nxMaxes+nyMaxes) > MAX_MAXES_ON_DEFIS
          )
        goto  EXIT_ACTIONS;
      if  (   yRange != 0  /* i.e. there is a previous border info */
           && dyTrj > yRange
          )
        goto  EXIT_ACTIONS;
    }

        /*  Make the line borders like for fraction line: */
    iBeg = nobrk_right(y,0,iLastPt);
    iEnd = nobrk_left(y,iLastPt,0);  /* of the straight part of the line */
    bRet = _TRUE;
    DBG_CHK_err_msg( iBeg>iEnd,  "BordSpec: BAD trj");
    FindStraightPart (x,y,&iBeg,&iEnd);

       /* Cut out non-straight tails: */
    { /*20*/
      _INT    i;
      p_SHORT  xBuf     = pLowData->xBuf;
      p_SHORT  yBuf     = pLowData->yBuf;
      p_SHORT  ind_back = pLowData->buffers[2].ptr;
      _INT     iBegSrc  = ind_back[iBeg];
      _INT     iEndSrc  = ind_back[iEnd];

      for  ( i=0;  i<iBegSrc;  i++ )  {
        if  ( yBuf[i] != BREAK )  {
          xBuf[i] = xBuf[iBegSrc];
          yBuf[i] = yBuf[iBegSrc];
        }
      }
      for  ( i=ind_back[iLastPt];  i>iEndSrc;  i-- )  {
        if  ( yBuf[i] != BREAK )  {
          xBuf[i] = xBuf[iEndSrc];
          yBuf[i] = yBuf[iEndSrc];
        }
      }
      GetTraceBox( xBuf, yBuf, 0, ind_back[iLastPt],
                   &pLowData->box );
    } /*20*/

    if  ( x[iBeg] > x[iEnd] )
      SWAP_SHORTS(iBeg,iEnd);
    yLeft = y[iBeg] + dyTrj;
    yRight = y[iEnd] + dyTrj;
    dyBorder = THREE(dyTrj);
  } /*10*/

  else  { /*50*/

    _SHORT  sgn = chk_sign( x, y, 0, iLastPt, xRange, yRange );

    if  ( sgn != SGN_NOT_SIGN )  { /*60*/
        /*  Make the line borders like for "=" or "+": */
      if  ( bNumericalMode && (sgn == SGN_PLUS) )  {
        bRet = _TRUE;
        yLeft = yRight = ONE_THIRD(  pLowData->box.top
                                   + TWO(pLowData->box.bottom) );
        dyBorder = dyTrj;
        if  ( yRange != 0 )  {  /* i.e. if there is info on prev. border */
          if  ( dyBorder > yRange )
            dyBorder = yRange;
        }
      }
      else  if  ( sgn == SGN_EQUAL )  {
        if  ( !bNumericalMode )  {
          if  ( MaxesCount( y, pLowData ) > MAX_Y_MAXES_EQ_SIGN )
            goto  EXIT_ACTIONS;
        }
        bRet = _TRUE;
        yLeft = yRight = pLowData->box.bottom;
        dyBorder = TWO(dyTrj);
      }
      else  if  ( bNumericalMode )  {
        bRet = _TRUE;
        yLeft = yRight = YMID_RECT( pLowData->box );
        dyBorder = dyTrj;
      }
    } /*60*/
  } /*50*/

 EXIT_ACTIONS:;

  if  ( bRet )  { /*90*/

        /*  Assign the appropriate border values: */

    if  ( dyBorder < yRange )  dyBorder = yRange;
    if  ( dyBorder < 2      )  dyBorder = 2; /* For non-crashing "transfrm". */

    DBG_CHK_err_msg(   (yLeft >= ALEF-dyBorder)
                    || (yRight >= ALEF-dyBorder)
                    || (yLeft < 0)
                    || (yRight < 0),
                    "BordSpec: BAD yL(R)" );

    pLowData->yu_beg = yLeft - dyBorder;
    if  ( pLowData->yu_beg <= 0 )
      pLowData->yu_beg = 1;
    pLowData->yd_beg = yLeft + dyBorder;

    pLowData->yu_end = yRight - dyBorder;
    if  ( pLowData->yu_end <= 0 )
      pLowData->yu_end = 1;
    pLowData->yd_end = yRight + dyBorder;

    pLowData->width_letter = DX_RECT(pLowData->box);
    pLowData->xu_beg = pLowData->box.left;
    pLowData->xu_end = pLowData->box.right;
    ExtendXborder( pLowData, xRange );  /* For non-crashing "transfrm". */
  } /*90*/

  return  bRet;

} /*BorderForSpecSymbol*/

#undef  MAX_MAXES_ON_DEFIS

#endif /* if 0 */

/*******************************************/
#ifndef LSTRIP


_LONG  DistanceSquare ( _INT i1, _INT i2, p_SHORT xAr, p_SHORT yAr )
{
  _INT  dx, dy;

  DBG_CHK_err_msg( yAr[i1]==BREAK || yAr[i2]==BREAK,
                   "Dist: BAD points!");

  dx = xAr[i1] - xAr[i2];
  dy = yAr[i1] - yAr[i2];
  return  ( (_LONG)dx*dx + (_LONG)dy*dy );

} /*DistanceSquare*/

/*******************************************************/

#if  PG_DEBUG
_VOID  SetNewAttr ( p_SPECL pElem, _UCHAR hght, _UCHAR fb_dir )
{
  DBG_CHK_err_msg( !pElem,  "SetNewAt: BAD elem");
  pElem->attr = (hght&_umd_) | (fb_dir&_fb_);
}
#endif /*PG_DEBUG*/
/*******************************************************/

#if  !LOW_INLINE
_BOOL  IsAnyCrossing ( p_SPECL pElem )
{
  return  ANY_CROSSING(pElem);
}

_BOOL  Is_IU_or_ID ( p_SPECL pElem )
{
  return  IU_OR_ID(pElem);
}

#if  !NEW_VERSION
_VOID  SetXTSTBits ( p_SPECL pElem )
{
  SET_XTST_BITS(pElem);
}
#endif  /*!NEW_VERSION*/

_BOOL  NULL_or_ZZ_this ( p_SPECL pElem )
{
  return  NULL_OR_ZZ(pElem);
}

_BOOL  NULL_or_ZZ_after ( p_SPECL pElem )
{
  return  NULL_or_ZZ_this(pElem->next);
}

_BOOL  NULL_or_ZZ_before ( p_SPECL pElem )
{
  return  NULL_or_ZZ_this(pElem->prev);
}

_BOOL  IsAnyBreak( p_SPECL pElem )
{
  return  ANY_BREAK(pElem);
}
_BOOL  IsAnyArcWithTail(p_SPECL pElem)
{
  return  ANY_ARC_WITH_TAIL(pElem);
}

_BOOL  IsAnyGsmall(p_SPECL pElem)
{
  return  ANY_GAMMA_SMALL(pElem);
}

_BOOL  IsAnyAngle(p_SPECL pElem)
{
  return  ANY_ANGLE(pElem);
}

_BOOL  IsXTorST(p_SPECL pElem)
{
  return  XT_OR_ST(pElem);
}
_BOOL  IsAnyMovement(p_SPECL pElem)
{
  return  ANY_MOVEMENT(pElem);
}
#endif  /*!LOW_INLINE*/

/************************************************/


p_SPECL  SkipAnglesAfter ( p_SPECL pElem )
{

  if  ( pElem != _NULL )  {
    do  {
      pElem=pElem->next;
    }
    while  ( pElem!=_NULL  &&  IsAnyAngle(pElem) );
  }

  return  pElem;

} /*SkipAnglesAfter*/
/************************************************/


p_SPECL  SkipAnglesBefore ( p_SPECL pElem )
{

  if  ( pElem != _NULL )  {
    do  {
      pElem=pElem->prev;
    }
    while  ( pElem!=_NULL  &&  IsAnyAngle(pElem) );
  }

  return  pElem;

} /*SkipAnglesBefore*/
/*******************************************************/

p_SPECL  FindStrongElemAfter ( p_SPECL pElem )
{

  if  ( pElem != _NULL )  {
    do  {
      pElem=pElem->next;
    }
    while  ( pElem!=_NULL  &&  !IsStrongElem(pElem) );
  }

  return  pElem;

} /*FindStrongElemAfter*/
/************************************************/


p_SPECL  FindStrongElemBefore ( p_SPECL pElem )
{

  if  ( pElem != _NULL )  {
    do  {
      pElem=pElem->prev;
    }
    while  ( pElem!=_NULL  &&  !IsStrongElem(pElem) );
  }

  return  pElem;

} /*FindStrongElemBefore*/
/*******************************************************/
_BOOL  IsUpperElem ( p_SPECL pElem )
{
  _UCHAR  code = pElem->code;
  return  (   code == _IU_
           || code == _UU_
           || code == _UUL_
           || code == _UUR_
           || code == _GU_
           || code == _GUs_
           || code == _UUC_
           || code == _CUL_
           || code == _CUR_
           || code == _DUL_
           || code == _DUR_
          );
}

/*******************************************************/

_BOOL  IsLowerElem ( p_SPECL pElem )
{
  _UCHAR  code = pElem->code;
  return  (   code == _ID_
           || code == _UD_
           || code == _UDL_
           || code == _UDR_
           || code == _GD_
           || code == _GDs_
           || code == _UDC_
           || code == _CDL_
           || code == _CDR_
           || code == _DDL_
           || code == _DDR_
          );
}
/*******************************************/

_BOOL  IsStrongElem( p_SPECL pElem )
{

  switch ( pElem->code )
   {
    case _ANl:
    case _ANr:
    case _BR_:
    case _BL_:
    case _TS_:
    case _TZ_:
    case _ST_:
    case _XT_:
    case _AN_UR:
    case _AN_UL:
#if  defined(FOR_GERMAN)  ||  defined(FOR_FRENCH) || USE_BSS_ANYWAY
    case _BSS_:
#endif /*FOR_GERMAN...*/
      return  _FALSE;
   }

  return  _TRUE;

} /*IsStrongElem*/


#endif //#ifndef LSTRIP

/*******************************************/
_BOOL  X_IsBreak( p_xrd_el_type pXr )
{
  _UCHAR  xr = pXr->xr.type;

  return  (xr == X_ZZ  ||
           xr == X_Z   ||
           xr == X_ZZZ ||
//           xr == X_ZN  ||
           xr == X_FF  );
}
/********************************************************************/
#ifndef LSTRIP

_BOOL  X_IsStrongElem( p_xrd_el_type pXr )
{

  switch (pXr->xr.type)
   {
    case X_AL:
    case X_BR:
    case X_BL:
    case X_AR:
    case X_TS:
    case X_TZ:
    case X_ST:
    case X_XT:
    case X_AN_UR:
    case X_AN_UL:
#if  defined(FOR_GERMAN)  ||  defined(FOR_FRENCH) || USE_BSS_ANYWAY
    case X_BSS: /* 09/07/93 from CHE & AYV */
#endif /*FOR_GERMAN...*/
      return  _FALSE;
   }

  return  _TRUE;

} /*X_IsStrongElem*/
/*******************************************/

_INT  iRefPoint( p_SPECL pElem, p_SHORT y )
{
  _INT  iRef;


  if  ( IsAnyBreak( pElem )  ||  pElem->ibeg>=pElem->iend )
    return  ( pElem->ibeg );

  if  ( IsUpperElem( pElem ) )  {
    if  ( (iRef = iYup_range(y,pElem->ibeg,pElem->iend)) == ALEF )
      goto  COMMON;
    return  iRef;
  }

  if  ( IsLowerElem( pElem ) )  {
    if  ( (iRef = iYdown_range(y,pElem->ibeg,pElem->iend)) == ALEF )
      goto  COMMON;
    return  iRef;
  }

 COMMON:;
  return  MEAN_OF( pElem->ibeg, pElem->iend );

} /*iRefPoint*/
/*******************************************/
#if  0

_BOOL  SmoothXY ( p_SHORT x, p_SHORT y,
                  _INT iLeft, _INT iRight,
                  _INT nTimes, _BOOL bPreserveGlobExtr )
{
  _INT    i;
  _INT    iTime;
  _SHORT  distNbr;
  _SHORT  xPrev, yPrev;
  _SHORT  yUp, yDown;


  if  ( nTimes <= 0 )
    return  _FALSE;

  DBG_CHK_err_msg( iLeft<0 || iRight<0 || iLeft>iRight,
                   "Sm.XY: bad iLeft or iRight");

  for  ( iTime=0;
         iTime<nTimes;
         iTime++ )  { /*5*/

    xPrev = x[iLeft];
    yPrev = y[iLeft];  /* If BREAK, then will be overwritten below */
    if  ( bPreserveGlobExtr  &&  y[iLeft] != BREAK )  {
      _INT    iLast = brk_right(y,iLeft,iRight) - 1;
      yMinMax (iLeft,iLast,y,&yUp,&yDown);
    }

    for  ( i=iLeft+1;
           i<iRight;
           i++ )  { /*10*/

      if  (   y[i]   == BREAK
           || y[i+1] == BREAK
          )
        continue;

      if  ( y[i-1] == BREAK )  {
        xPrev = x[i];
        yPrev = y[i];
        if  ( bPreserveGlobExtr )  {
          _INT    iLast = brk_right(y,i,iRight) - 1;
          yMinMax (i,iLast,y,&yUp,&yDown);
        }
        continue;
      }

      distNbr = Distance8(xPrev,yPrev,x[i+1],y[i+1]);
      distNbr = THREE_HALF(distNbr);

      if (   Distance8(x[i],y[i],xPrev,yPrev) > distNbr
          || Distance8(x[i],y[i],x[i+1],y[i+1]) > distNbr
         )
        continue;    /* Don't smooth angle-like structures */

      xPrev = x[i];
      yPrev = y[i];

      if  (   bPreserveGlobExtr
           && ( y[i] == yUp  ||  y[i] == yDown )
          )
        continue;

      x[i] = MEAN_OF(xPrev, x[i+1]);
      y[i] = MEAN_OF(yPrev, y[i+1]);

    } /*10*/

  } /*5*/

  return  _TRUE;

} /*SmoothXY*/

#endif
/*******************************************************/

/*  This function computes the square of the distance of the */
/* point (xPoint,yPoint) to the straight line going through  */
/* (x1,y1) and (x2,y2).  See figure below.                   */

#define    MIN_RELIABLE_DENOMINATOR  64

_LONG  QDistFromChord ( _INT x1, _INT y1,
                        _INT x2, _INT y2,
                        _INT xPoint, _INT yPoint )
{
  _LONG   lxPx1 = xPoint - x1;
  _LONG   lyPy1 = yPoint - y1;
  _INT    x2x1 = x2 - x1;
  _INT    y2y1 = y2 - y1;

  _LONG   lNmr, lDnm;
  _LONG   lNtoD, lNtoDRes;
  _LONG   lQDist;


  if  ( x1==x2 && y1==y2 )  {
    //DBG_err_msg("QDist: equal ends");
    return  (lxPx1*lxPx1 + lyPy1*lyPy1); /*i.e. just dist. from point*/
  }

     /*                                               */
     /*              X (xPoint,yPoint)                */
     /*               .                      (x2,y2)  */
     /*               .                          |    */
     /*                .                       ooX    */
     /*                .                   oooo       */
     /*                 .              oooo           */
     /*                 .          oooo               */
     /*                  .     oooo                   */
     /*                  . oooo                       */
     /*                ooXo                           */
     /*            oooo  |                            */
     /*        oooo      |                            */
     /*     Xoo       Crossing perpend. point (x0,y0) */
     /*     |                                         */
     /*   (x1,y1)                                     */
     /*                                               */
     /*                                               */
     /*                                               */
     /* (x0,y0) = (x1,y1) + t*(x2-x1,y2-y1)           */
     /* (x0,y0) = (xPoint,yPoint) + r*(y1-y2,x2-x1)   */
     /*                                               */
     /*                                               */
     /*                                               */
     /*                                               */
     /*                                               */

  lNmr = lxPx1*x2x1 + lyPy1*y2y1;
  lDnm = ((_LONG)x2x1)*x2x1 + ((_LONG)y2y1)*y2y1;

  DBG_CHK_err_msg( lDnm==0L,
                   "QDist: Zero lDnm");

     /*  QDist = (xPoint-x1)**2 + (yPoint-y1)**2 - (lNmr**2)/lDnm */

  lNtoD    = lNmr / lDnm;
  lNtoDRes = lNmr % lDnm;

  if  ( HWRLAbs(lNtoDRes) > ALEF )  {  /* approx. calc. for such big numbers*/

    _LONG  lNTmp = HWRLAbs(lNtoDRes);
    _LONG  lDTmp = lDnm;

    while ( lNTmp>=ALEF && lDTmp>MIN_RELIABLE_DENOMINATOR )  {
      lNTmp = ONE_HALF(lNTmp);
      lDTmp = ONE_FOURTH(lDTmp);
    }

    if  ( lDTmp <= MIN_RELIABLE_DENOMINATOR )  {
      lQDist = -(lNTmp + ONE_HALF(lDTmp)) / lDTmp;
      lQDist *= lNTmp;
    }
    else
      lQDist = -(lNTmp*lNTmp) / lDTmp;

    if  ( lNtoDRes < 0L )
      lQDist = -lQDist;

  }
  else
    lQDist = -(lNtoDRes*lNtoDRes) / lDnm;

  lQDist += lyPy1*lyPy1;
  lQDist -= lNmr*lNtoD;
  lQDist += lxPx1*lxPx1;
  lQDist -= lNtoD*lNtoDRes;

  return  lQDist;

} /*QDistFromChord*/

#undef     MIN_RELIABLE_DENOMINATOR

/*******************************************************/

/*  This function computes the "curvature" of the part of tra-*/
/* jectory between points "iBeg" and "iEnd". "iMostFar" must  */
/* be either the index of the point of that part most far     */
/* from the chord between "iBeg" and "iEnd" or any value <=0. */
/* If iMostFar <= 0, then the proper value will be calculated */
/* here.                                                      */
/*  The returned value will be ==0, if the "iMostfar" point   */
/* is very close to the chord;  >0, if the path from "iBeg"   */
/* to "iEnd" goes clockwise;    <0, if counterclockwise.      */
/*  The absolute value runs from 0 to CURV_MAX, being the ra- */
/* tio of the square of the point's distance from chord to    */
/* the square of the length of the chord.  It is scaled so    */
/* that if both distances are the same, then the returned va- */
/* lue will be CURV_NORMA.                                    */
/*   See also comment to the "CurvFromSquare" function.       */


_SHORT  CurvMeasure ( p_SHORT x, p_SHORT y,
                      _INT iBeg, _INT iEnd,
                      _INT iMostFar )
{
  _LONG   lQChordLen = DistanceSquare(iBeg,iEnd,x,y);
  _LONG   lQDist;
  _SHORT  x_iBeg = x[iBeg];
  _SHORT  x_iEnd = x[iEnd];
  _SHORT  y_iBeg = y[iBeg];
  _SHORT  y_iEnd = y[iEnd];
  _INT    nRet;

  DBG_CHK_err_msg( iBeg >= iEnd,
                   "CurvM.: BAD i\'s");

      /* Calc. the abs. value: */

  if  ( lQChordLen == 0 )
    return (_SHORT)CURV_MAX;

  else  { /*10*/

    if  ( iMostFar <= 0 )
      iMostFar = iMostFarFromChord (x,y,iBeg,iEnd);
    lQDist = QDistFromChord (x_iBeg,y_iBeg, x_iEnd,y_iEnd,
                             x[iMostFar],y[iMostFar]);
    if  ( lQDist/CURV_MAX > lQChordLen )
      nRet = (_INT)CURV_MAX;
    else
      nRet = (_INT) ( ( lQDist*CURV_NORMA + ONE_HALF(lQChordLen) )
                              / lQChordLen );
  } /*10*/

     /*  Calc. the sign of "nRet":  */

  if  ( x_iBeg == x_iEnd )  {
    if  (   ( y_iBeg<y_iEnd  &&  x[iMostFar]<x_iBeg )
         || ( y_iBeg>y_iEnd  &&  x[iMostFar]>x_iBeg )
        )
        nRet = -nRet;
  }

  else  /* x_iBeg != x_iEnd */ {  /* look "iMostFarFromChord" for explainations.*/
    _INT    dxRL    = x_iEnd - x_iBeg;
    _INT    dyRL    = y_iEnd - y_iBeg;
    _LONG   ldConst = (_LONG)x_iBeg*dyRL - (_LONG)y_iBeg*dxRL;
    _LONG   ldy     =   (_LONG)y[iMostFar]*dxRL - (_LONG)x[iMostFar]*dyRL
                      + ldConst;
    if  ( dxRL < 0 )
      ldy = -ldy;
    if  ( EQ_SIGN(dxRL,ldy) )
      nRet = -nRet;
  }

  return  (_SHORT)nRet;

} /*CurvMeasure*/
/*******************************************************/

/*   This function computes the distance whose "circle" */
/* is the 8-angles figure:                              */

_INT  Distance8 ( _INT x1, _INT y1,
                  _INT x2, _INT y2 )
{
  _INT  dx, dy, dPlus;

  dx = x1 - x2;
  TO_ABS_VALUE(dx);
  dy = y1 - y2;
  TO_ABS_VALUE(dy);

  dPlus = TWO_THIRD(dx + dy);
  if  ( dy > dx )
    dx = dy;

  return  ( (dPlus>dx)?  dPlus:dx);

} /*Distance8*/

/*******************************************/

_INT  brk_right ( p_SHORT yArray,
                    _INT iStart, _INT iEnd )
{
   for  ( ;  iStart<=iEnd && yArray[iStart]!=BREAK;  iStart++ ) ;
   return  iStart;
}
/*******************************************************/

#if  USE_FRM_WORD


_INT  brk_left_trace ( PS_point_type _PTR trace,
                         _INT iStart, _INT iEnd )
{
   for  ( ;  iStart>=iEnd && trace[iStart].y!=BREAK;  iStart-- ) ;
   return  iStart;
}

_INT  nobrk_left_trace ( PS_point_type _PTR trace,
                           _INT iStart, _INT iEnd )
{
   for  ( ;  iStart>=iEnd && trace[iStart].y==BREAK;  iStart-- ) ;
   return  iStart;
}

_INT  brk_right_trace ( PS_point_type _PTR trace,
                          _INT iStart, _INT iEnd )
{
   for  ( ;  iStart<=iEnd && trace[iStart].y!=BREAK;  iStart++ ) ;
   return  iStart;
}

_INT  nobrk_right_trace ( PS_point_type _PTR trace,
                            _INT iStart, _INT iEnd )
{
   for  ( ;  iStart<=iEnd && trace[iStart].y==BREAK;  iStart++ ) ;
   return  iStart;
}

/*******************************************/


_SHORT   Xmean_range ( p_SHORT xArray, p_SHORT yArray,
                       _INT iStart, _INT iEnd )
{
  _INT      i;
  _LONG     lSum;
  _INT      nLegalPoints;


  for  ( i=iStart, lSum=0L, nLegalPoints=0;
         i<=iEnd;
         i++ )  { /*10*/

    if  ( yArray[i] == BREAK )
      continue;

    lSum += xArray[i];
    nLegalPoints++;

  } /*10*/

  if  ( nLegalPoints == 0 )  {
    DBG_err_msg("Xmean: no legal points");
  }
  else
    lSum = (lSum + ONE_HALF(nLegalPoints)) / nLegalPoints;

  return (_SHORT)lSum;

} /*Xmean_range*/


_SHORT  Ymean_range ( p_SHORT yArray, _INT iStart, _INT iEnd )
{
  _INT      i;
  _LONG     lSum;
  _INT      nLegalPoints;


  for  ( i=iStart, lSum=0L, nLegalPoints=0;
         i<=iEnd;
         i++ )  { /*10*/

    if  ( yArray[i] == BREAK )
      continue;

    lSum += yArray[i];
    nLegalPoints++;

  } /*10*/

  if  ( nLegalPoints == 0 )  {
    DBG_err_msg("Ymean: no legal points");
  }
  else
    lSum = (lSum + ONE_HALF(nLegalPoints)) / nLegalPoints;

  return (_SHORT)lSum;

} /*Ymean_range*/


_SHORT  Yup_range ( p_SHORT yArray, _INT iStart, _INT iEnd )
{
  _INT    iUp;

  if  ( (iUp=iYup_range(yArray,iStart,iEnd)) == ALEF )
    return  ALEF;
  return  yArray[iUp];

} /*Yup_range*/


_SHORT  Ydown_range ( p_SHORT yArray, _INT iStart, _INT iEnd )
{
  _INT    iDown;

  if  ( (iDown=iYdown_range(yArray,iStart,iEnd)) == ALEF )
    return  ALEF;
  return  yArray[iDown];

} /*Ydown_range*/
/**************************************/

_VOID  xy_to_trace ( p_SHORT xArray, p_SHORT yArray,
                     _INT nPoints, _TRACE trace)
{
  _INT  i;


  for  ( i=0;  i<nPoints;  i++ )  {
    trace[i].x = xArray[i];
    trace[i].y = yArray[i];
  }

} /*xy_to_trace*/

#endif /*USE_FRM_WORD*/
/*******************************************/

_INT  brk_left ( p_SHORT yArray,
                   _INT iStart, _INT iEnd )
{
   for  ( ;  iStart>=iEnd && yArray[iStart]!=BREAK;  iStart-- ) ;
   return  iStart;
}

_INT  nobrk_left ( p_SHORT yArray,
                     _INT iStart, _INT iEnd )
{
   for  ( ;  iStart>=iEnd && yArray[iStart]==BREAK;  iStart-- ) ;
   return  iStart;
}


_INT  nobrk_right ( p_SHORT yArray,
                      _INT iStart, _INT iEnd )
{
   for  ( ;  iStart<=iEnd && yArray[iStart]==BREAK;  iStart++ ) ;
   return  iStart;
}



#endif //#ifndef LSTRIP

/*******************************************/


_VOID  trace_to_xy ( p_SHORT xArray, p_SHORT yArray,
                     _INT nPoints, _TRACE trace)
{
  _INT  i;


  for  ( i=0;  i<nPoints;  i++ )  {
    xArray[i] = trace[i].x;
    yArray[i] = trace[i].y;
  }

} /*trace_to_xy*/
/*******************************************/
#ifndef LSTRIP

      /*   Checks if there is cross among the cuts  */
      /* [(x1,y1),(x2,y2)] and [(x3,y3),(x4,y4)]    */

_BOOL  is_cross ( _SHORT x1, _SHORT y1, _SHORT x2, _SHORT y2,
                  _SHORT x3, _SHORT y3, _SHORT x4, _SHORT y4 )
{
  _LONG  x21, y21, x43, y43, x13, y13;
  _LONG  nmr, dnm;


         /*                                          */
         /*  The presence of the cross is equal to   */
         /* the presence of the pair (r,t):          */
         /*                                          */
         /*  |                                       */
         /*  | 0 <= r <= 1                           */
         /*  | 0 <= t <= 1                           */
         /*  <                                       */
         /*  | (x,y) = (x1,y1) + t*((x2-x1),(y2-y1)) */
         /*  |       = (x3,y3) + r*((x4-x3),(y4-y3)) */
         /*  |                                       */
         /*                                          */
         /*  The latter equation is resolved so:     */
         /*                                          */
         /*      (x4-x3)(y1-y3) - (y4-y3)(x1-x3)     */
         /*  t = -------------------------------     */
         /*      (y4-y3)(x2-x1) - (x4-x3)(y2-y1)     */
         /*                                          */
         /*      (x2-x1)(y3-y1) - (y2-y1)(x3-x1)     */
         /*  r = -------------------------------     */
         /*      (y2-y1)(x4-x3) - (x2-x1)(y4-y3)     */
         /*                                          */
         /*                                          */
         /*                                          */
         /*                                          */


  x21 = x2 - x1;
  y21 = y2 - y1;
  x43 = x4 - x3;
  y43 = y4 - y3;
  x13 = x1 - x3;
  y13 = y1 - y3;


  nmr = x43*y13 - y43*x13;
  dnm = y43*x21 - x43*y21;

  if  (   dnm==0
       || (nmr>0 && dnm<0)
       || (nmr<0 && dnm>0)
       || HWRLAbs(nmr) > HWRLAbs(dnm) )
    return  _FALSE;

  nmr = y21*x13 - x21*y13;
  dnm = -dnm;

  if  (   (nmr>0 && dnm<0)
       || (nmr<0 && dnm>0)
       || HWRLAbs(nmr) > HWRLAbs(dnm) )
    return  _FALSE;

  return  _TRUE;

} /*is_cross*/


/*******************************************/

      /*   Checks if there is cross among the cuts  */
      /* [(x1,y1),(x2,y2)] and [(x3,y3),(x4,y4)]    */
      /* and find the cross coords.                 */
      /*   Function returns _TRUE, if the crossing  */
      /* exists between cuts, _FALSE otherwise.     */
      /* If function returns _FALSE and both *pxAns-*/
      /* wer and *pyAnswer == ALEF, then the cuts   */
      /* are parallel.                              */

#define  MIN_RELIABLE_DENOMINATOR  32L

_BOOL  FindCrossPoint ( _SHORT x1, _SHORT y1, _SHORT x2, _SHORT y2,
                        _SHORT x3, _SHORT y3, _SHORT x4, _SHORT y4,
                        p_SHORT pxAnswer, p_SHORT pyAnswer )
{
  _LONG  x21, y21, x43, y43, x13, y13;
  _LONG  nmr, dnm;
  _BOOL  bRet = _TRUE;

         /*                                          */
         /*  The presence of the cross is equal to   */
         /* the presence of the pair (r,t):          */
         /*                                          */
         /*  |                                       */
         /*  | 0 <= r <= 1                           */
         /*  | 0 <= t <= 1                           */
         /*  <                                       */
         /*  | (x,y) = (x1,y1) + t*((x2-x1),(y2-y1)) */
         /*  |       = (x3,y3) + r*((x4-x3),(y4-y3)) */
         /*  |                                       */
         /*                                          */
         /*  The latter equation is resolved so:     */
         /*                                          */
         /*      (x4-x3)(y1-y3) - (y4-y3)(x1-x3)     */
         /*  t = -------------------------------     */
         /*      (y4-y3)(x2-x1) - (x4-x3)(y2-y1)     */
         /*                                          */
         /*      (x2-x1)(y3-y1) - (y2-y1)(x3-x1)     */
         /*  r = -------------------------------     */
         /*      (y2-y1)(x4-x3) - (x2-x1)(y4-y3)     */
         /*                                          */
         /*                                          */
         /*                                          */
         /*                                          */

  x21 = x2 - x1;
  y21 = y2 - y1;
  x43 = x4 - x3;
  y43 = y4 - y3;
  x13 = x1 - x3;
  y13 = y1 - y3;

  nmr = x43*y13 - y43*x13;
  dnm = y43*x21 - x43*y21;

  if  ( dnm==0 )  {
    *pxAnswer = *pyAnswer = ALEF;
    return  _FALSE;
  }

  if  (   (nmr>0 && dnm<0)
       || (nmr<0 && dnm>0)
       || HWRLAbs(nmr) > HWRLAbs(dnm) )
    bRet = _FALSE;

  nmr = y21*x13 - x21*y13;
  dnm = -dnm;

  if  (   (nmr>0 && dnm<0)
       || (nmr<0 && dnm>0)
       || HWRLAbs(nmr) > HWRLAbs(dnm) )
    bRet = _FALSE;

        /*  Here we know if cross exists */

  while (   (nmr > 2L*ALEF  ||  dnm > 2L*ALEF)
         && dnm > MIN_RELIABLE_DENOMINATOR )  {  /* Escape from overflow */
    nmr = ONE_HALF(nmr);
    dnm = ONE_HALF(dnm);
  }

  if  ( nmr > 2L*ALEF  &&  dnm < MIN_RELIABLE_DENOMINATOR )  {
         /*  Less accuracy, but no overflow: */
    *pxAnswer = (_SHORT) ( x3 + ((nmr + ONE_HALF(dnm)) / dnm)*x43);
    *pyAnswer = (_SHORT) ( y3 + ((nmr + ONE_HALF(dnm)) / dnm)*y43);
  }
  else  {
    *pxAnswer = (_SHORT) ( x3 + (nmr*x43 + ONE_HALF(dnm)) / dnm );
    *pyAnswer = (_SHORT) ( y3 + (nmr*y43 + ONE_HALF(dnm)) / dnm );
  }

  return  bRet;

} /*FindCrossPoint*/
/**************************************/
#endif //#ifndef LSTRIP

_INT  iMostFarFromChord ( p_SHORT xArray, p_SHORT yArray,
                          _INT iLeft, _INT iRight )
{
  _INT    i;
  _INT    iMostFar;
  _INT    dxRL, dyRL;
  _LONG   ldConst;
  _LONG   ldMostFar, ldCur;
  _BOOL   bIncrEqual;
  _BOOL   bFlatPlato;

  DBG_CHK_err_msg( yArray[iLeft]==BREAK  ||  yArray[iRight]==BREAK,
                   "iMostFar: BAD left or right");

      /*                                                  */
      /*                      O <-iRight                  */
      /*                     . O                          */
      /*                    .   O                         */
      /*                   .    O                         */
      /*                  .    O                          */
      /*                 .     O                          */
      /*                . ..   O                          */
      /*               .    .. O                          */
      /*          OOO .       .O                          */
      /*         O   O   O    OO <-iMostFar               */
      /*        O   . OOO O  O                            */
      /*        O  .       OO                             */
      /*       O  .                                       */
      /*       O .                                        */
      /*        O <-iLeft                                 */
      /*                                                  */
      /*   <Distance> ~ <dY> = y - yStraight(x) =         */
      /*                                                  */
      /*                                        x-xLeft   */
      /*       = y - yLeft - (yRight-yLeft) * ------------*/
      /*                                      xRight-xLeft*/
      /*                                                  */
      /*       ~ y*(xR-xL) - x*(yR-yL) +                  */
      /*          + xL*(yR-yL) - yL*(xR-xL)               */
      /*                                                  */
      /*    And no problems with zero divide!             */
      /*                                                  */

  dxRL = xArray[iRight] - xArray[iLeft];
  dyRL = yArray[iRight] - yArray[iLeft];
  ldConst = (_LONG)xArray[iLeft]*dyRL - (_LONG)yArray[iLeft]*dxRL;
  bFlatPlato = _TRUE;
  bIncrEqual = _FALSE;

  for  ( i=iLeft+1, iMostFar=iLeft, ldMostFar=0L;
         i<=iRight;
         i++ )  { /*10*/

    if  ( yArray[i] == BREAK )  {
      bFlatPlato = _FALSE;
      continue;
    }

    ldCur =   (_LONG)yArray[i]*dxRL - (_LONG)xArray[i]*dyRL
            + ldConst;
    TO_ABS_VALUE(ldCur);

    if  ( ldCur > ldMostFar )  {
      ldMostFar  = ldCur;
      iMostFar   = i;
      bIncrEqual = _FALSE;
      bFlatPlato = _TRUE;
    }
    else  if  ( bFlatPlato  &&  (ldCur == ldMostFar) )  {
      if  ( bIncrEqual )
        iMostFar++;
      bIncrEqual = !bIncrEqual;
    }
    else
      bFlatPlato = _FALSE;

  } /*10*/

  return  iMostFar;

} /*iMostFarFromChord*/
/**************************************/
#ifndef LSTRIP

#if  defined(FOR_GERMAN) || defined(FOR_FRENCH)
  #define  MIN_EFFECTIVE_WIDTH  ( (_LONG)(DY_STR)/12 )
#else  /* ! FOR_GERMAN... */
  #define  MIN_EFFECTIVE_WIDTH  ( (_LONG)(DY_STR)/8 )
#endif /* ! FOR_GERMAN... */


_BOOL  IsTriangledPath( p_SHORT x, p_SHORT y,
                        _INT iBeg, _INT iEnd, _INT iMostFar );

_BOOL  IsTriangledPath( p_SHORT x, p_SHORT y,
                        _INT iBeg, _INT iEnd, _INT iMostFar )
{
  _LONG    lSquare;
  _LONG    lTriSqre;
  _SHORT   nRetCod;


  if  ( iMostFar <= 0 )
    iMostFar = iMostFarFromChord (x,y,iBeg,iEnd);

  lTriSqre = TriangleSquare(x,y,iBeg,iMostFar,iEnd);
  TO_ABS_VALUE(lTriSqre);
  if  ( lTriSqre < Distance8(x[iBeg],y[iBeg],x[iEnd],y[iEnd])
                      * MIN_EFFECTIVE_WIDTH )
    return  _FALSE;
  lSquare  = ClosedSquare(x,y,iBeg,iEnd,&nRetCod);

#if  0 /* defined(FOR_GERMAN) */
  return  ( HWRLAbs(lSquare) < TWO(lTriSqre) );
#else  /* ! FOR_GERMAN */
  return  ( HWRLAbs(lSquare) < FOUR_THIRD(lTriSqre) );
#endif /* ! FOR_GERMAN */

} /*IsTriangledPath*/

#undef  MIN_EFFECTIVE_WIDTH

/**************************************/

#if  defined(FOR_GERMAN) || defined(FOR_FRENCH)
  #define  MIN_CURV_SIDE_EXTR           ((_SHORT)(CURV_NORMA/10))
  #define  MIN_CURV_SIDE_EXTR_WEAK      ((_SHORT)(CURV_NORMA/20))
  #define  MAX_CURV_HORIZ_FOR_WEAK      ((_SHORT)7)
  #define  MAX_CURV_BAD_HORIZ_FOR_WEAK  ((_SHORT)4)
#else  /* ! FOR_GERMAN... */
  #define  MIN_CURV_SIDE_EXTR           ((_SHORT)(CURV_NORMA/10))
  #define  MIN_CURV_SIDE_EXTR_WEAK      ((_SHORT)(CURV_NORMA/15))
  #define  MAX_CURV_HORIZ_FOR_WEAK      ((_SHORT)7)
  #define  MAX_CURV_BAD_HORIZ_FOR_WEAK  ((_SHORT)4)
#endif /* ! FOR_GERMAN... */

#define  ADD_SLOP_COEFF            3L
#define  SHAPE_PENALTY             ((_SHORT)10)

    /*   The "DefShapePenalty" function is the auxiliary one
     *  for the "SideExtr" function.
     *   Here:
     *     nCurvAll   - curvature of the whole "side extr.";
     *     nCurvHor   - curvature of the horiz. part of "side extr.";
     *     dxAbsHor   - width of the horiz. part of "side extr.";
     *     dyAbsVert  - height of the vert.part of "side extr.".
     */

static _INT  DefShapePenalty( _INT nCurvAll, _INT nCurvHor,
                              _INT dxAbsHor, _INT dyAbsVert );

static _INT  DefShapePenalty( _INT nCurvAll, _INT nCurvHor,
                              _INT dxAbsHor, _INT dyAbsVert )
{
  _INT  nPenalty = 0;

  if  ( dxAbsHor < ONE_HALF(dyAbsVert) )  { /*10*/

    nPenalty = SHAPE_PENALTY;

    if  ( dxAbsHor > ONE_FOURTH(dyAbsVert) )  {
      if  ( nCurvHor == 0 )
        nPenalty = ONE_HALF( nPenalty );
      else  if  (   ( nCurvAll>0  &&  nCurvHor<0)
                 || ( nCurvAll<0  &&  nCurvHor>0)
                )
        nPenalty = 0;
    }

  } /*10*/

  return  nPenalty;

} /*DefShapePenalty*/

    /*   The "AtLeastOneSideStraight" function is the auxiliary one
     *  for the "SideExtr" function.
     */
static  _BOOL  AtLeastOneSideStraight( p_SHORT x, p_SHORT y,
                                       _INT iBeg, _INT iEnd, _INT iMostFar );

static  _BOOL  AtLeastOneSideStraight( p_SHORT x, p_SHORT y,
                                       _INT iBeg, _INT iEnd, _INT iMostFar )
{
  _INT  nCurvAll = CurvMeasure( x, y, iBeg, iEnd, iMostFar );
  _INT  nCurv1st = CurvMeasure( x, y, iBeg, iMostFar, -1 );
  _INT  nCurv2nd = CurvMeasure( x, y, iMostFar, iEnd, -1 );

  return  (   nCurv1st == 0
           || nCurv2nd == 0
           || !EQ_SIGN( nCurv1st, nCurvAll )
           || !EQ_SIGN( nCurv2nd, nCurvAll )
          );

} /*AtLeastOneSideStraight*/



_INT    SideExtr( p_SHORT x, p_SHORT y,
                  _INT iBeg, _INT iEnd,
                  _INT nSlope,
                  p_SHORT xBuf, p_SHORT yBuf,
                  p_SHORT ind_back,
                  p_INT piSideExtr,
                  _BOOL bStrict )
{
  _INT     nExtrType = NO_SIDE_EXTR;
  _INT     iMostFar, iMostCurved;
  _INT     nCurv;
  _INT     dyBegEnd = y[iBeg]-y[iEnd];
  _INT     dx1stFar, dxAbs1stFar, dx2ndFar, dxAbs2ndFar;
  _INT     dyAbs1stFar, dyAbs2ndFar;
  _INT     nShapePenalty;
  _INT     iBegOrig = ind_back[iBeg];
  _INT     iEndOrig = ind_back[iEnd];
  _INT     iMostFarOrig;
  _BOOL    bStraightSide;


  DBG_CHK_err_msg( (iBeg >= iEnd) || y[iBeg]==BREAK || y[iEnd]==BREAK,
                   "SdExtr: BAD ends" );
  iMostFar = iMostFarFromChord( x, y, iBeg, iEnd );
  nCurv    = CurvMeasure( x, y, iBeg, iEnd, iMostFar );

  iMostCurved = iMostCurvedPoint( x, y,
                                  MEAN_OF(iBeg,iMostFar),
                                  MEAN_OF(iMostFar,iEnd),
                                  nCurv );
  iMostFar = ONE_THIRD( TWO(iMostCurved) + iMostFar );

  iMostFarOrig = ind_back[iMostFar];

  *piSideExtr = iMostFar;

  if  ( HWRAbs(dyBegEnd) < ONE_FIFTH(DY_STR) )
    return  NO_SIDE_EXTR;

  if  ( nSlope < 0 )
    nSlope = ONE_FOURTH(nSlope);

  dyAbs1stFar = y[iMostFar] - y[iBeg];
  dyAbs2ndFar = y[iMostFar] - y[iEnd];
  dx1stFar    = (x[iMostFar] - x[iBeg])
                   + SlopeShiftDx( (_SHORT)dyAbs1stFar, nSlope );
  dxAbs1stFar = (_SHORT)HWRAbs(dx1stFar);
  dx2ndFar    = (x[iEnd] - x[iMostFar])
                   - SlopeShiftDx( (_SHORT)dyAbs2ndFar, nSlope );
  dxAbs2ndFar = (_SHORT)HWRAbs(dx2ndFar);
  TO_ABS_VALUE( dyAbs1stFar );
  TO_ABS_VALUE( dyAbs2ndFar );

  bStraightSide = AtLeastOneSideStraight( xBuf, yBuf,
                                          iBegOrig, iEndOrig, iMostFarOrig );

  if  (   (   dyAbs2ndFar <= ONE_FOURTH(dyAbs1stFar)
           || (   !bStrict
               && bStraightSide
               && dyAbs2ndFar <= ONE_HALF(dyAbs1stFar)
              )
          )
       || (   dyAbs2ndFar <= dyAbs1stFar
           && (   dxAbs1stFar <= ONE_EIGHTTH(dxAbs2ndFar)
               || (   !bStrict
                   && bStraightSide
                   && dxAbs1stFar <= ONE_FIFTH(dxAbs2ndFar)
                  )
              )
          )
      )  {
    if  ( IsTriangledPath( xBuf, yBuf, iBegOrig, iEndOrig, iMostFarOrig ) )  {
      if  (   (dx1stFar<0 && dx2ndFar>0)
           || dxAbs1stFar <= TWO_THIRD(dxAbs2ndFar)
          )
        nExtrType = SIDE_EXTR_LIKE_2ND;
      else  if  ( dxAbs1stFar <= FOUR_THIRD(dxAbs2ndFar) )
        nExtrType = SIDE_EXTR_LIKE_2ND_WEAK;
    }
  }
  else  if  (   dyAbs1stFar <= ONE_FOURTH(dyAbs2ndFar)
             || (   !bStrict
                 && bStraightSide
                 && dyAbs1stFar <= ONE_HALF(dyAbs2ndFar)
                )
            )  {
    if  ( IsTriangledPath( xBuf, yBuf, iBegOrig, iEndOrig, iMostFarOrig ) )  {
      if  (   !EQ_SIGN(dx1stFar,dx2ndFar)
           || dxAbs2ndFar <= TWO_THIRD(dxAbs1stFar)
          )
        nExtrType = SIDE_EXTR_LIKE_1ST;
      else  if  ( dxAbs2ndFar <= FOUR_THIRD(dxAbs1stFar) )
        nExtrType = SIDE_EXTR_LIKE_1ST_WEAK;
    }
  }

       /*  The part of trj. should have significant curvature */
       /* with more flexible allowances for sloped figure:    */

  if  ( nExtrType != NO_SIDE_EXTR )  { /*20*/
    _INT    nCurvBonus;
    _INT    nCurvHor;
    _INT    nSlopBegEndToAdd;
    _INT    dxBegEnd = x[iBeg]-x[iEnd];
    _INT    dxAbsHor, dyAbsHor;
    if  ( dyBegEnd == 0 )
      nSlopBegEndToAdd = 0;
    else  {
      _LONG  lSlopTmp = (ADD_SLOP_COEFF * (_LONG)dxBegEnd*dxBegEnd)
                                / ((_LONG)dyBegEnd*dyBegEnd);
      if  ( lSlopTmp > MIN_CURV_SIDE_EXTR )
        nSlopBegEndToAdd = MIN_CURV_SIDE_EXTR;
      else
        nSlopBegEndToAdd = (_INT)lSlopTmp;
    }
    nCurv = CurvMeasure( xBuf, yBuf, iBegOrig, iEndOrig, iMostFarOrig );

    if  ( nExtrType == SIDE_EXTR_LIKE_1ST )  {
      nCurvHor = CurvMeasure( xBuf, yBuf, iBegOrig, iMostFarOrig, -1 );
      nShapePenalty = DefShapePenalty( nCurv, nCurvHor,
                                       dxAbs1stFar, dyAbs2ndFar );
      dxAbsHor = dxAbs1stFar;
      dyAbsHor = dyAbs1stFar;
    }
    else  {
      nCurvHor = CurvMeasure( xBuf, yBuf, iMostFarOrig, iEndOrig, -1 );
      nShapePenalty = DefShapePenalty( nCurv, nCurvHor,
                                       dxAbs2ndFar, dyAbs1stFar );
      dxAbsHor = dxAbs2ndFar;
      dyAbsHor = dyAbs2ndFar;
    }

    nCurvBonus = HWRAbs(nCurv) + nSlopBegEndToAdd;
    if  ( nCurvBonus - nShapePenalty < MIN_CURV_SIDE_EXTR )  {
      if  (   nCurvBonus < MIN_CURV_SIDE_EXTR_WEAK
           || (nCurv>0  &&  nCurvHor >= MAX_CURV_HORIZ_FOR_WEAK)
           || (nCurv<0  &&  nCurvHor <= -MAX_CURV_HORIZ_FOR_WEAK)
           || (   HWRAbs(nCurvHor) >= MAX_CURV_BAD_HORIZ_FOR_WEAK
               && THREE_FOURTH(dxAbsHor) < dyAbsHor
              )
          )  {
#if  defined(FOR_GERMAN) || defined(FOR_FRENCH)
        if  (   !bStrict
             && dyBegEnd > 0 /*i.e. 1st XR is lower*/
             && (   nExtrType == SIDE_EXTR_LIKE_1ST
                 || nExtrType == SIDE_EXTR_LIKE_1ST_WEAK
                )
            )
          nExtrType = SIDE_EXTR_TRACE_FOR_er;
        else
          nExtrType = NO_SIDE_EXTR;
#else  /* !FOR_GERMAN... */
        nExtrType = NO_SIDE_EXTR;
#endif /* !FOR_GERMAN... */
      }
      else  {
        if  ( nExtrType == SIDE_EXTR_LIKE_1ST )
          nExtrType = SIDE_EXTR_LIKE_1ST_WEAK;
        else  if  ( nExtrType == SIDE_EXTR_LIKE_2ND )
          nExtrType = SIDE_EXTR_LIKE_2ND_WEAK;
      }
    }

  } /*20*/

  return  nExtrType;

} /*SideExtr*/

#undef  SHAPE_PENALTY
#undef  ADD_SLOP_COEFF
#undef  MAX_CURV_HORIZ_FOR_WEAK
#undef  MIN_CURV_SIDE_EXTR_WEAK
#undef  MIN_CURV_SIDE_EXTR

/*************************************************/


_INT  iMostCurvedPoint( p_SHORT x, p_SHORT y,
                        _INT iBeg, _INT iEnd, _INT nCurvAll )
{
  _INT  i;
  _INT  iMostCurved;
  _INT  cos_max, cos_i;
  _BOOL bOKToUpdate;
  _INT  dxBegEnd, dyBegEnd;


      /*  Some foolprofing: */
  if  ( iBeg <= 2 )
    iBeg = 3;
  iEnd -= 2;

  if  ( iEnd <= iBeg+1 )
    return  MEAN_OF( iBeg, iEnd );

      /*  Calculations: */

  dxBegEnd = x[iEnd] - x[iBeg];
  dyBegEnd = y[iEnd] - y[iBeg];

  cos_max = -100;      // The min cos value!
  iMostCurved = iBeg;  // So as not to be undefined!

  for  ( i=iBeg;  i<=iEnd;  i++ )  { /*10*/

    if  (   y[i]   == BREAK
         || y[i+1] == BREAK
         || y[i+2] == BREAK
        )  {
      i++;
      continue;
    }
    if  (   y[i-1] == BREAK
         || y[i-2] == BREAK
        )
      continue;

    cos_i = (_INT)cos_vect( i, i-2,  i, i+2,  x, y );

    if  ( cos_i > cos_max )  {
      bOKToUpdate = _FALSE;
      if  ( nCurvAll == 0 )  //any curv. sign is OK
        bOKToUpdate = _TRUE;
      else  {
        _INT   nCurvLocal = CurvMeasure( x, y, i-2, i+2, i );
        _INT   dxNear     = x[i+2] - x[i-2];
        _INT   dyNear     = y[i+2] - y[i-2];
        _LONG  lScalar    = ((_LONG)dxBegEnd*dxNear) + ((_LONG)dyBegEnd*dyNear);

        if  (   ( lScalar>=0  &&  EQ_SIGN( nCurvAll, nCurvLocal ) )
             || ( lScalar<0   && !EQ_SIGN( nCurvAll, nCurvLocal ) )
            )
          bOKToUpdate = _TRUE;

      }
      if  ( bOKToUpdate )  {
        cos_max = cos_i;
        iMostCurved = i;
      }
    }

  } /*10*/

  return  iMostCurved;

} /*iMostCurvedPoint*/


#endif //#ifndef LSTRIP

#ifndef LSTRIP

/*************************************************/

/*********************************************************************/
/*         special programs                                          */
/*********************************************************************/

/*  Calculating height in the line of the point with abs.coord "y".  */
/* Returns height code.                                              */
/*********************************************************************/
/*                                                                   */
/*                       H E I G H T S                               */
/*                                                                   */
/*                                                                   */
/*  US1   1 |                                                        */
/*           - - - - - - - - - - -                                   */
/*  US2   2 |   1/3                                                  */
/*          |                                                        */
/*  UE1   3 |   1/3                                                  */
/*          |                                                        */
/*  UE2   4 |   1/3-Delta                                            */
/*          |                                                        */
/*          |   Delta (1/6)                                          */
/*  UI1   5  --------------------- UPPER BASELINE                    */
/*          |   2/9                                                  */
/*  UI2   6 |   2/9                                                  */
/*          |                                                        */
/*  MD    7 |   1/9                                                  */
/*  DI1   8 |   2/9                                                  */
/*          |                                                        */
/*          |   2/9                                                  */
/*  DI2   9  --------------------- LOWER BASELINE                    */
/*          |   Delta  (1/6)                                         */
/*  DE1   10|   1/3 - Delta                                          */
/*          |                                                        */
/*  DE2   11|   1/3                                                  */
/*          |                                                        */
/*  DS1   12|   1/3                                                  */
/*          |                                                        */
/*           - - - - - - - - - - -                                   */
/*  DS2   13|                                                        */
/*                                                                   */
/*********************************************************************/


_UCHAR  HeightInLine( _SHORT y, low_type _PTR pLowData )
{

  /* Here assumed: y_US1_<=y_US2_<=...<=y_MD_<=...<=y_DS1_<=y_DS2_ */

 if  ( y <  pLowData->box.top )
     {
        DBG_err_msg( " HeightInLine: wrong top height..." ) ;
     }
 else  if  ( y >  pLowData->box.bottom )
     {
        DBG_err_msg( " HeightInLine: wrong bottom height..." ) ;
     }

 if  ( y <= pLowData->hght.y_UE2_ )
  {
    if  (       y <= pLowData->hght.y_US1_ )
      return  _US1_;
    else  if  ( y <= pLowData->hght.y_US2_ )
      return  _US2_;
    else  if  ( y <= pLowData->hght.y_UE1_ )
      return  _UE1_;
    else
      return  _UE2_;

  }
 else if( y <= pLowData->hght.y_MD_ )  /* y > y_UE2_ */
  {
    if  (       y <= pLowData->hght.y_UI1_ )
      return  _UI1_;
    else  if  ( y <= pLowData->hght.y_UI2_ )
      return  _UI2_;
    else
      return  _MD_;
  }
 else if( y <= pLowData->hght.y_DI2_ ) /* y > y_MD_ */
  {
    if  (       y <= pLowData->hght.y_DI1_ )
      return  _DI1_;
    else
      return  _DI2_;
  }
 else  /* y > y_DI2_ */
  {
    if  (       y <= pLowData->hght.y_DE1_ )
      return  _DE1_;
    else  if  ( y <= pLowData->hght.y_DE2_ )
      return  _DE2_;
    else  if  ( y <= pLowData->hght.y_DS1_ )
      return  _DS1_;
    else
      return  _DS2_;
  }

} /*HeightInLine*/


_UCHAR  MidPointHeight ( p_SPECL pElem, low_type _PTR pLowData )
{
  return  ( HeightInLine ( pLowData->y[MID_POINT(pElem)], pLowData ) );
}

/**********************************************/

  _BOOL   HeightMeasure(  _INT iBeg , _INT iEnd ,  low_type _PTR pLowData ,
                         p_UCHAR   pUpperHeight ,  p_UCHAR  pLowerHeight  )
    {
      _SHORT  yMin , yMax ;

          if  ( yMinMax( iBeg, iEnd, pLowData->y, &yMin, &yMax ) == _FALSE )
              {
                  return  _FALSE ;
              }
          else
             {
               *pUpperHeight = HeightInLine( yMin, pLowData ) ;
               *pLowerHeight = HeightInLine( yMax, pLowData ) ;

                  return  _TRUE  ;
             }
    }

/**********************************************/


/**********************************************************/
/*  Functions for finding min and max values of x and y.  */
/**********************************************************/

_INT  iMidPointPlato ( _INT iFirst, _INT iToStop, p_SHORT val, p_SHORT y )
{
  _INT  iStart;

  for  ( iStart=iFirst;
            val[iStart] == val[iFirst]
         && y[iStart] != BREAK;
         iStart++ );

  iFirst = MEAN_OF(iFirst, (iStart-1));
  if  ( iFirst > iToStop )
    iFirst = iToStop;

  return  iFirst;

} /*iMidPointPlato*/


_INT  ixMin ( _INT iStart, _INT iEnd, p_SHORT xArray, p_SHORT yArray )
{
  _INT      i;
  _INT      iXmin = -1;
  _BOOL     bWasAssigned;


  for  ( i=iStart, bWasAssigned=_FALSE;
         i<=iEnd;
         i++ )  { /*10*/

    if  ( yArray[i] == BREAK )
      continue;

    if  (   !bWasAssigned
         || xArray[i] < xArray[iXmin]
        )  {
      iXmin = i;
      bWasAssigned = _TRUE;
    }

  } /*10*/

  if  ( !bWasAssigned )  {
    DBG_err_msg( "ixMin: !assigned");
    return  -1;
  }

  return  iMidPointPlato (iXmin,iEnd,xArray,yArray);

} /*ixMin*/


_INT  ixMax ( _INT iStart, _INT iEnd, p_SHORT xArray, p_SHORT yArray )
{
  _INT      i;
  _INT      iXmax = -1;
  _BOOL     bWasAssigned;


  for  ( i=iStart, bWasAssigned=_FALSE;
         i<=iEnd;
         i++ )  { /*10*/

    if  ( yArray[i] == BREAK )
      continue;

    if  (   !bWasAssigned
         || xArray[i] > xArray[iXmax]
        )  {
      iXmax = i;
      bWasAssigned = _TRUE;
    }

  } /*10*/

  if  ( !bWasAssigned )  {
    DBG_err_msg( "ixMax: !assigned");
    return  -1;
  }

  return  iMidPointPlato (iXmax,iEnd,xArray,yArray);

} /*ixMax*/
/**********************************************/


_INT  iyMin ( _INT iStart, _INT iEnd, p_SHORT yArray )
{
  _INT      i;
  _INT      iYmin = -1;
  _BOOL     bWasAssigned;


  for  ( i=iStart, bWasAssigned=_FALSE;
         i<=iEnd;
         i++ )  { /*10*/

    if  ( yArray[i] == BREAK )
      continue;

    if  (   !bWasAssigned
         || yArray[i] < yArray[iYmin]
        )  {
      iYmin = i;
      bWasAssigned = _TRUE;
    }

  } /*10*/

  if  ( !bWasAssigned )  {
    DBG_err_msg( "iyMin: !assigned");
    return  -1;
  }

  return  iMidPointPlato (iYmin,iEnd,yArray,yArray);

} /*iyMin*/
/**********************************************/


_INT  iyMax ( _INT iStart, _INT iEnd, p_SHORT yArray )
{
  _INT      i;
  _INT      iYmax = -1;
  _BOOL     bWasAssigned;


  for  ( i=iStart, bWasAssigned=_FALSE;
         i<=iEnd;
         i++ )  { /*10*/

    if  ( yArray[i] == BREAK )
      continue;

    if  (   !bWasAssigned
         || yArray[i] > yArray[iYmax]
        )  {
      iYmax = i;
      bWasAssigned = _TRUE;
    }

  } /*10*/

  if  ( !bWasAssigned )  {
    DBG_err_msg( "iyMax: !assigned");
    return  -1;
  }

  return  iMidPointPlato (iYmax,iEnd,yArray,yArray);

} /*iyMax*/
/**********************************************/

#define  XYweighted(x,y,i,xC,yC)  ( (_LONG)(x)[i]*(xC) + (_LONG)(y)[i]*(yC) )

_INT  iXYweighted_max_right ( p_SHORT xArray, p_SHORT yArray,
                              _INT iStart, _INT nDepth,
                              _INT xCoef, _INT yCoef )
{
  _INT  iToFind = iStart;
  _LONG   lxyVal, lxyMax;

  DBG_CHK_err_msg( yArray[iStart] == BREAK,
                   "XYmax_r: BAD iStart");

  lxyMax = XYweighted( xArray, yArray, iToFind, xCoef, yCoef );

  for  ( iStart++;
         ;
         iStart++
       )  { /*10*/

    if  ( yArray[iStart] == BREAK )
      break;

    lxyVal = XYweighted( xArray, yArray, iStart, xCoef, yCoef );

    if  ( lxyVal < lxyMax - nDepth )
      break;

    else  if  ( lxyVal > lxyMax )  {
      iToFind = iStart;
      lxyMax  = lxyVal;
    }

    DBG_CHK_err_msg( iStart < 0,
                     "XYmax_r: No stop!");

  } /*10*/

  return  iToFind;

} /*iXYweighted_max_right*/

#undef  XYweighted

/**********************************************/

_INT  iXmax_right ( p_SHORT xArray, p_SHORT yArray,
                    _INT iStart, _INT nDepth )
{
  _INT  iToFind = iStart;


  DBG_CHK_err_msg( yArray[iStart] == BREAK,
                   "Xmax_r: BAD iStart");

  for  ( iStart++;
         ;
         iStart++
       )  { /*10*/
    if  (   yArray[iStart] == BREAK
         || xArray[iStart] < xArray[iToFind] - nDepth
        )  {
      break;
    }

    else  if  ( xArray[iStart] > xArray[iToFind] )
      iToFind = iStart;

    DBG_CHK_err_msg( iStart < 0,
                     "Xmax_r: No stop!");

  } /*10*/

  return  iMidPointPlato (iToFind,ALEF,xArray,yArray);

} /*iXmax_right*/
/**********************************************/

_INT  iXmin_right ( p_SHORT xArray, p_SHORT yArray,
                    _INT iStart, _INT nDepth )
{
  _INT  iToFind = iStart;


  DBG_CHK_err_msg( yArray[iStart] == BREAK,
                 "Xmin_r: BAD iStart");

  for  ( iStart++;
         ;
         iStart++
       )  { /*10*/

    if  (   yArray[iStart] == BREAK
         || xArray[iStart] - nDepth > xArray[iToFind]
        )  {
      break;
    }

    else  if  ( xArray[iStart] < xArray[iToFind] )
      iToFind = iStart;

    DBG_CHK_err_msg( iStart < 0,
                   "Xmin_r: No stop!");

  } /*10*/

  return  iMidPointPlato (iToFind,ALEF,xArray,yArray);

} /*iXmin_right*/
/**********************************************/

_INT  iXmax_left ( p_SHORT xArray, p_SHORT yArray,
                   _INT iStart, _INT nDepth )
{
  _INT  iToFind = iStart;


  DBG_CHK_err_msg( yArray[iStart] == BREAK,
                   "Xmax_l: BAD iStart");

  for  ( iStart--;
         ;
         iStart--
       )  { /*10*/

    if  (   yArray[iStart] == BREAK
         || xArray[iStart] < xArray[iToFind] - nDepth
        )  {
      break;
    }

    else  if  ( xArray[iStart] >= xArray[iToFind] )
      iToFind = iStart;

    DBG_CHK_err_msg( iStart < 0,
                     "Xmax_l: No stop!");

  } /*10*/

  return  iMidPointPlato (iToFind,ALEF,xArray,yArray);

} /*iXmax_left*/
/**********************************************/

_INT  iXmin_left ( p_SHORT xArray, p_SHORT yArray,
                   _INT iStart, _INT nDepth )
{
  _INT  iToFind = iStart;


  DBG_CHK_err_msg( yArray[iStart] == BREAK,
                 "Xmin_l: BAD iStart");

  for  ( iStart--;
         ;
         iStart--
       )  { /*10*/

    if  (   yArray[iStart] == BREAK
         || xArray[iStart] - nDepth > xArray[iToFind]
        )  {
      break;
    }

    else  if  ( xArray[iStart] <= xArray[iToFind] )
      iToFind = iStart;

    DBG_CHK_err_msg( iStart < 0,
                   "Xmin_l: No stop!");

  } /*10*/

  return  iMidPointPlato (iToFind,ALEF,xArray,yArray);

} /*iXmin_left*/


#endif //#ifndef LSTRIP


/**********************************************/

_BOOL  xMinMax ( _INT ibeg, _INT iend,
                 p_SHORT x, p_SHORT y,
                 p_SHORT pxMin, p_SHORT pxMax )
{
  _INT    i;
  _SHORT  xMin, xMax;

  xMin = ALEF;
  xMax = ELEM;
  for  ( i=ibeg;  i<=iend;  i++ )  {
    if  ( y[i] == BREAK )
      continue;
    if  ( x[i] > xMax )  xMax = x[i];
    if  ( x[i] < xMin )  xMin = x[i];
  }

  *pxMax = xMax;
  *pxMin = xMin;

#if  PG_DEBUG
  if  ( xMin == ALEF  ||  xMax == ELEM )  {
    err_msg("xMinMax: No points");
    return  _FALSE;
  }
#endif

  return  _TRUE;

} /*xMinMax*/


_BOOL  yMinMax ( _INT ibeg, _INT iend,
                 p_SHORT y,
                 p_SHORT pyMin, p_SHORT pyMax )
{
  _INT    i;
  _SHORT  yMin, yMax;

  yMin = ALEF;
  yMax = ELEM;
  for  ( i=ibeg;  i<=iend;  i++ )  {
    if  ( y[i] == BREAK )
      continue;
    if  ( y[i] > yMax )  yMax = y[i];
    if  ( y[i] < yMin )  yMin = y[i];
  }

#if  PG_DEBUG
  if  ( yMin == ALEF  ||  yMax == ELEM )  {
    err_msg("yMinMax: No points");
    *pyMax = yMax;
    *pyMin = yMin;
    return  _FALSE;
  }
#endif

  *pyMax = yMax;
  *pyMin = yMin;
  return  _TRUE;

} /*yMinMax*/
/**********************************************/
#ifndef LSTRIP


_INT  iYup_range ( p_SHORT yArray, _INT iStart, _INT iEnd )
{
  _INT  i;
  _INT  iUp, yUp;


  for  ( i=iStart, yUp=ALEF;
         i<=iEnd;
         i++ )  { /*10*/
    if  ( yArray[i] == BREAK )
      continue;
    if  ( yArray[i] < yUp )
      yUp = yArray[iUp=i];
  } /*10*/

  if  ( yUp==ALEF )  {
    DBG_err_msg("iYup: BAD yUp");
    return  ALEF;
  }

  return  iMidPointPlato (iUp,iEnd,yArray,yArray);

} /*iYup_range*/


_INT  iYdown_range ( p_SHORT yArray, _INT iStart, _INT iEnd )
{
  _INT  i;
  _INT  iDown, yDown;


  for  ( i=iStart, yDown=0;
         i<=iEnd;
         i++ )  { /*10*/
    if  ( yArray[i] == BREAK )
      continue;
    if  ( yArray[i] > yDown )
      yDown = yArray[iDown=i];
  } /*10*/

  if  ( yDown==0 )  {
    DBG_err_msg("iYdown: BAD yDown");
    return  ALEF;
  }

  return  iMidPointPlato (iDown,iEnd,yArray,yArray);

} /*iYdown_range*/
/**************************************/
#endif //#ifndef LSTRIP

/****************************************************************************/
/*****                     calculate size                               *****/
/****************************************************************************/


_BOOL   GetBoxFromTrace ( _TRACE  trace,
                          _INT iLeft, _INT iRight,
                          p_RECT pRect )
{
  _INT    i;
  _SHORT  xMin, xMax;
  _SHORT  yMin, yMax;

  xMin = yMin = ALEF;
  xMax = yMax = ELEM;
  for  ( i=iLeft;  i<=iRight;  i++ )  {
    if  ( trace[i].y == BREAK )
      continue;
    if  ( trace[i].x > xMax )  xMax = trace[i].x;
    if  ( trace[i].x < xMin )  xMin = trace[i].x;
    if  ( trace[i].y > yMax )  yMax = trace[i].y;
    if  ( trace[i].y < yMin )  yMin = trace[i].y;
  }

  pRect->left   = xMin;
  pRect->right  = xMax;
  pRect->top    = yMin;
  pRect->bottom = yMax;

#if  PG_DEBUG
  if  (   xMin == ALEF  ||  xMax == ELEM
       || yMin == ALEF  ||  yMax == ELEM )  {
    err_msg("BoxFrTrc: No points");
    return  _FALSE;
  }
#endif

  return  _TRUE;

} /*GetBoxFromTrace*/


_VOID   GetTraceBox ( p_SHORT xArray, p_SHORT yArray,
                      _INT iLeft, _INT iRight,
                      p_RECT pRect )
{
  xMinMax (iLeft,iRight,xArray,yArray,&pRect->left,&pRect->right);
  yMinMax (iLeft,iRight,yArray,&pRect->top,&pRect->bottom);
}
/*************************************************/

/*
_VOID size_cross( _SHORT  jbeg, _SHORT jend,
                  _SHORT _PTR x, _SHORT _PTR y,
                  p_RECT prect )
{
  xMinMax (jbeg,jend,x,y,&prect->left,&prect->right);
  yMinMax (jbeg,jend,y,&prect->top,&prect->bottom);
}
*/

/****************************************************************************/
/*****                                                                  *****/
/****************************************************************************/
#ifndef LSTRIP

_INT  iClosestToXY ( _INT iBeg, _INT iEnd,
                     p_SHORT xAr, p_SHORT yAr,
                     _SHORT xRef, _SHORT yRef )
{
  _INT    i, iClosest;
  _INT    dx, dy;
  _LONG   lDist, lMinDist;

  DBG_CHK_err_msg( iBeg>iEnd  ||  yAr[iBeg]==BREAK  ||  yAr[iEnd]==BREAK,
                   "iClosest: BAD beg(end)");

  dx = (xAr[iBeg] - xRef) ;
  dy = (yAr[iBeg] - yRef) ;
  lMinDist = (_LONG)dx*dx + (_LONG)dy*dy ;

  for   ( i=iBeg+1, iClosest=iBeg;
          i<=iEnd;
          i++ )  {
    dx = (xAr[i] - xRef) ;
    dy = (yAr[i] - yRef) ;
    lDist = ( (_LONG)dx*dx + (_LONG)dy*dy );
    if  (lDist < lMinDist)  {
      lMinDist = lDist;
      iClosest = i;
    }
  }

  return  iClosest;

} /*iClosestToXY*/
/**********************************************/

_INT  iClosestToY( p_SHORT yAr, _INT iBeg, _INT iEnd, _SHORT yVal )
{
  _INT     i, iClosest;
  _SHORT   dy, dyClosest;

  if  ( iBeg>iEnd  ||  yAr[iBeg]==BREAK  ||  yAr[iEnd]==BREAK )  {
    DBG_err_msg( "iClosest: BAD beg(end)");
    return  (-1);
  }

  dyClosest = (_SHORT)HWRAbs(yAr[iBeg] - yVal);

  for  ( i=iBeg+1, iClosest=iBeg;
         i<=iEnd;
         i++ )  {
    if  ( yAr[i] == BREAK )
      continue;     
    if  ( (dy = (_SHORT)HWRAbs(yAr[i] - yVal)) < dyClosest )  {
      dyClosest = dy;
      iClosest = i;
    }
  }

  return  iClosest;

} /*iClosestToY*/
/********************************************************************/

/*   The following function calculates the square within
 * the trajectory part.  Clockwise path gives positive square,
 * counterclockwise - negative.
 *   At the following example, if "A" is the starting point
 * and "B" - ending one, then the "1" area will give
 * negative square, "2" area - positive square:
 *
 *                             ooo<ooo
 *                       oo<ooo       ooooo
 *                      o                  oo
 *                     o                     oo
 *                   oo          1             o
 *                  o                          o
 *                 o                        ooo
 *                 o                    oooo
 *   A ooooo>oooooooooooo>ooooooo>oooooo
 *      |        oo
 *       |  2   o
 *        |    o
 *         ooo
 *        B
 */

_LONG  ClosedSquare( p_SHORT xTrace, p_SHORT yTrace,
                     _INT iBeg, _INT iEnd, p_SHORT ptRetCod )
{
  _INT    i, ip1;
  _LONG   lSum;

  *ptRetCod = RETC_OK;

       /*  Check validity of parameters: */

  if  ( iBeg > iEnd )  {
    *ptRetCod = RETC_NO_PTS_IN_TRAJECTORY;
    return  (_LONG)ALEF;
  }
  if  ( yTrace[iBeg] == BREAK )  {
    *ptRetCod = RETC_BREAK_WHERE_SHOULDNT;
    return  (_LONG)ALEF;
  }

  if  ( iBeg == iEnd )
    return  0L;

       /*  Regular case, count integral: */

       /*  First, get the square under the chord connecting */
       /* the ends and pre-subtract it from the sum:        */

  lSum = ((_LONG)yTrace[iEnd]+yTrace[iBeg]) * (xTrace[iEnd]-xTrace[iBeg]);

       /*  Then count the square under the trajectory: */

  for  ( i=iBeg, ip1=i+1;
         i<iEnd;
         i++, ip1++ )  { /*20*/

    if  ( yTrace[ip1] == BREAK )  {
      *ptRetCod = RETC_BREAK_WHERE_SHOULDNT;
      return  (_LONG)ALEF;
    }

    lSum -= ((_LONG)yTrace[i]+yTrace[ip1]) * (xTrace[ip1]-xTrace[i]);

  } /*20*/

  return  (lSum/2);

} /*ClosedSquare*/
/********************************************************************/


/*   The following function calculates the square of the triangle
 * made by the 3 points on the trajectory part.  Clockwise path gives
 * positive square, counterclockwise - negative.
 */

_LONG  TriangleSquare( p_SHORT x, p_SHORT y,
                       _INT i1, _INT i2, _INT i3 )
{
  _LONG  lSum;

       /*  Check validity of parameters: */

  if  (   y[i1]==BREAK  ||  y[i2]==BREAK  ||  y[i3]==BREAK
       || i1>i2
       || i2>i3
      )  {
    DBG_err_msg( "Triangle: BAD i1,i2,i3" );
    return  0L;
  }

       /*  Count the result: */

  lSum =  ((_LONG)y[i2]+y[i1])*(x[i2]-x[i1])
        + ((_LONG)y[i3]+y[i2])*(x[i3]-x[i2])
        + ((_LONG)y[i1]+y[i3])*(x[i1]-x[i3]);

  return  (-lSum/2);

} /*TriangleSquare*/
/********************************************************************/

/*  This function computes the "curvature" of the part of tra-*/
/* jectory between points "iBeg" and "iEnd".                  */
/*  The returned value will be ==0, if the curvature is       */
/* very cloze to zero;          >0, if the path from "iBeg"   */
/* to "iEnd" goes clockwise;    <0, if counterclockwise.      */
/*  The absolute value of the answer is scaled to the same    */
/* units as that of the "CurvMeasure" function.  So if the    */
/* curvature of the line is consistent, then the return values*/
/* of the two functions should be almost the same.  If the    */
/* curvature of the line isn't steady or even change sign,    */
/* then the return values will be different.                  */


_SHORT  CurvFromSquare( p_SHORT x, p_SHORT y,
                        _INT iBeg, _INT iEnd )
{
  _LONG   lSquare, lQDist, lRetPrelim;
  _INT    nSgn;
  _SHORT  nRetCod;

  if  ( iBeg == iEnd )
    return  0;

  lSquare = ClosedSquare( x, y, iBeg, iEnd, &nRetCod );
  if  ( nRetCod != RETC_OK )
    return  0;
  nSgn = ( (lSquare >= 0)? (1):(-1) );
  TO_ABS_VALUE( lSquare );

  lQDist = DistanceSquare( iBeg, iEnd, x, y );

      /*  The formula for lRetPrelim:    */
      /*   ((S**2 / QD) / QD) * (5/2)    */
      /* S-square, QD-distance square.   */

  if  ( lQDist == 0 )
    lRetPrelim = ALEF;
  else
    lRetPrelim = ( ( ONE_NTH( (CURV_NORMA*lSquare), lQDist )
                       * lSquare
                   ) * 5
                   + lQDist
                 )  /  TWO(lQDist);

  return  (_SHORT)( nSgn
                     * (_SHORT)((lRetPrelim > CURV_MAX)? (CURV_MAX):(lRetPrelim))
                  );

} /*CurvFromSquare*/

/****************************************************************************/
/**  calculate length of trajectory and also length of chord between ends  **/
/****************************************************************************/
_LONG  LengthOfTraj( p_SHORT xTrace, p_SHORT yTrace,
                         _INT iBeg, _INT iEnd, p_LONG pChord ,p_SHORT ptRetCod )
{
  _INT    i, ip1;
  _LONG   lSum,Dx,Dy;

  *ptRetCod = RETC_OK;
  *pChord =1L;

       /*  Check validity of parameters: */

  if  ( iBeg > iEnd )  {
    *ptRetCod = RETC_NO_PTS_IN_TRAJECTORY;
    return  (_LONG)0L;
  }
  if  ( yTrace[iBeg] == BREAK )  {
    *ptRetCod = RETC_BREAK_WHERE_SHOULDNT;
    return  (_LONG)0L;
  }

  if  ( iBeg == iEnd )
    return  0L;

       /*  Then count the Lenght of the trajectory: */

  lSum = 0L ;

  for  ( i=iBeg, ip1=i+1;
         i<iEnd;
         i++, ip1++ )  {

    if  ( yTrace[ip1] == BREAK )  {
      *ptRetCod = RETC_BREAK_WHERE_SHOULDNT;
      return  (_LONG)0L;
    }
    Dy = (_LONG)yTrace[ip1]-yTrace[i] ;
    Dx = (_LONG)xTrace[ip1]-xTrace[i] ;
    lSum += HWRILSqrt(Dx*Dx + Dy*Dy);

  }


  Dy =  (_LONG)yTrace[iBeg] - yTrace[iEnd] ;
  Dx =  (_LONG)xTrace[iBeg] - xTrace[iEnd] ;
  *pChord = HWRILSqrt (Dx*Dx + Dy*Dy);
  return  (lSum);

}

/****************************************************************************/
/*****         calculate cos of angle between two vectors               *****/
/****************************************************************************/

_LONG cos_pointvect ( _INT xbeg1, _INT ybeg1,
                      _INT xend1, _INT yend1,
                      _INT xbeg2, _INT ybeg2,
                      _INT xend2, _INT yend2 )
{
  _LONG   del1,del2,del3;

  del1=((_LONG)xend1 - (_LONG)xbeg1) *  /* cos                             */
       ((_LONG)xend2 - (_LONG)xbeg2) +  /*    of angle                     */
       ((_LONG)yend1 - (_LONG)ybeg1) *  /*     inside CROSS                */
       ((_LONG)yend2 - (_LONG)ybeg2);
  del2=((_LONG)xend1 - (_LONG)xbeg1)*
       ((_LONG)xend1 - (_LONG)xbeg1)+
       ((_LONG)yend1 - (_LONG)ybeg1)*
       ((_LONG)yend1 - (_LONG)ybeg1);
  del3=((_LONG)xend2 - (_LONG)xbeg2) *
       ((_LONG)xend2 - (_LONG)xbeg2) +
       ((_LONG)yend2 - (_LONG)ybeg2)*
       ((_LONG)yend2 - (_LONG)ybeg2);

 /*CHE: To avoid overflow:                                   */
 /*     This may be NON-portable code (still at PC, MAC, ARM */
 /*    it should be OK).                                     */

  if  (   (del2 >= ALEF  &&  del3 >= ALEF)
       || ((del2+ALEF)>>16)*del3 >= ALEF/2 /* stronger than: del2*del3 >= 2**30-1 */
       || ((del3+ALEF)>>16)*del2 >= ALEF/2 /* stronger than: del2*del3 >= 2**30-1 */
      )  {  /* We cannot multiply "del2" and "del3": OVERFLOW. */
    del2 = (_LONG)HWRILSqrt(del2) * HWRILSqrt(del3);
  }
  else  {
    del2 *= del3;
    del2 = (_LONG)HWRILSqrt(del2);
  }
  if  (del2<=0)  return 0;

  return (del1*100/del2);

/*
!!!  _SHORT  sgn;
  if  ( del2 > del3 )  {
    _LONG  lTmp = del2;
    del2 = del3;
    del3 = lTmp;
  }
  sgn = (del1>0? (+1):(-1));
  TO_ABS_VALUE(del1);
  while  (   del1!=0
          && ((del2>(ALEF/2)  &&  del3>ALEF) || (del2+del3))
         )  {
    del1 = ONE_HALF(del1);
    del2 = ONE_HALF(del2);
    del3 = ONE_HALF(del3);
  }

  del2*=del3;
  if(del2<=0) return 0;
  del2=(_LONG)HWRILSqrt(del2);
  return (sgn*del1*100/del2);
 */

}

/********  Angle between vectors (by indexes of points): */

_LONG cos_vect( _INT beg1, _INT end1,  /* beg and end first             */
                _INT beg2, _INT end2,  /* and second vector's           */
                _SHORT _PTR x, _SHORT _PTR y)
{
  return  cos_pointvect (x[beg1],y[beg1],
                         x[end1],y[end1],
                         x[beg2],y[beg2],
                         x[end2],y[end2]);
}

/********  Angle between vector and horiz. line: */

_LONG cos_horizline ( _INT beg1, _INT end1,
                      _SHORT _PTR x, _SHORT _PTR y)
{
  return  cos_pointvect (x[beg1],y[beg1],
                         x[end1],y[end1],
                         x[beg1],y[beg1],
                         x[beg1]+10,y[beg1]);
}

/********  Angle between vector and the line */
/******** perpendicular to the slope:        */

_LONG cos_normalslope ( _INT beg1, _INT end1,
                        _INT slope, _SHORT _PTR x, _SHORT _PTR y )
{
  return  cos_pointvect (x[beg1],y[beg1],
                         x[end1],y[end1],
                         x[beg1],y[beg1],
                         x[beg1]+100,y[beg1]+slope);
}

/*=========================================================================*/
#if  !NEW_VERSION
/*    get and set specl bit field                                          */
/*=========================================================================*/
_UCHAR  GetBit (p_SPECL elem,_SHORT bitnum)
{
_UCHAR  ch ;

    ch = (elem->bit)[bitnum/8] ;
    ch >>= (bitnum % 8) ;
    ch &= 0x01 ;
  return  ch ;
}
/*=========================================================================*/

_BOOL   SetBit (p_SPECL elem, _SHORT bitnum)
{
_UCHAR  ch ;
p_UCHAR ptr ;

    ptr   = &(elem->bit)[bitnum/8] ;
    ch    = 0x01 << (bitnum % 8) ;
/*----------------------- set selected bit --------------------------------*/
    *ptr |= ch ;
  return _TRUE ;
}

_BOOL   ClrBit (p_SPECL elem, _SHORT bitnum)
{
_UCHAR  ch ;
p_UCHAR ptr ;

    ptr   = &(elem->bit)[bitnum/8] ;
    ch    = 0x01 << (bitnum % 8) ;
/*---------------------- mask selected bit --------------------------------*/
    *ptr &= ~ch ;
  return _TRUE ;
}

/*=========================================================================*/

#endif  /*!NEW_VERSION*/

/**************************************/
#endif //#ifndef LSTRIP


  _SHORT  NewIndex ( p_SHORT indBack ,  p_SHORT  newY     ,
                     _SHORT  ind_old ,  _SHORT   nIndexes , _SHORT fl )
   {
     _INT    i , j  ;
     _INT    newIndex = UNDEF ;

         if  ( ( fl == _FIRST ) || ( fl == _MEAD ) )
             {
               for  ( i = 0 ;   i < nIndexes ;  i++ )
                 {
                   if  ( indBack[i] >= ind_old )
                       break ;
                 }

               if  ( i < nIndexes )
                   {
                     if  ( newY[i] != BREAK )
                           newIndex = i ;
                     else
                           newIndex = i - 1 ;
                   }
             }


         if  ( ( fl == _LAST ) || ( fl == _MEAD ) )
             {
                 for  ( j = 0  ;  j < nIndexes  ;  j++ )
                   {
                     if  ( indBack[j] > ind_old )
                         break ;
                   }

                 if   ( ( j < nIndexes )  ||  ( indBack[j-1] == ind_old ) )
                      { newIndex = --j ; }
             }

         if  (  ( fl == _MEAD )  &&  ( newIndex != UNDEF ) )
             {  newIndex = MEAN_OF( i , j ) ;   }


       DBG_CHK_err_msg( newIndex == UNDEF , "NewInd: NOT Found" ) ;

     return( (_SHORT)newIndex ) ;

   } /*NewIndex*/

/****************************************************************************/
#ifndef LSTRIP

  _SHORT  R_ClosestToLine ( p_SHORT  xAr,   p_SHORT  yAr, PS_point_type _PTR pRef,
                            p_POINTS_GROUP  pLine ,  p_SHORT  p_iClosest  )
    {
      _INT    iBeg = pLine->iBeg ;
      _INT    iEnd = pLine->iEnd ;
      _SHORT  xRef = pRef->x ;
      _SHORT  yRef = pRef->y ;

      _INT    il, iClosest ;
      _INT    dX, dY ;
      _LONG   lDist, lMinDist ;

        DBG_CHK_err_msg( iBeg > iEnd  ||  yAr[iBeg] == BREAK
                                      ||  yAr[iEnd] == BREAK ,
                         "R_Closest: BAD Beg(End)");

        dX = (xAr[iBeg] - xRef) ;
        dY = (yAr[iBeg] - yRef) ;
        lMinDist = (_LONG)dX*dX + (_LONG)dY*dY ;

          for ( il = iBeg+1 , iClosest = iBeg ; il <= iEnd ;  il++ )
            {
              dX    = (xAr[il] - xRef) ;
              dY    = (yAr[il] - yRef) ;
              lDist = ( (_LONG)dX*dX + (_LONG)dY*dY ) ;

                 if  ( lDist < lMinDist )
                   {
                     lMinDist = lDist ;
                     iClosest = il    ;
                   }
            }

        *p_iClosest = (_SHORT)iClosest ;

    return ( (_SHORT)HWRILSqrt( lMinDist ) ) ;
    }

/****************************************************************************/
  _LONG  SquareDistance ( _SHORT  xBeg ,  _SHORT  yBeg,
                          _SHORT  xEnd ,  _SHORT  yEnd  )
    {
      _INT  dX , dY ;

        dX = xBeg - xEnd ;
        dY = yBeg - yEnd ;

      return( (_LONG)dX*dX + (_LONG)dY*dY ) ;

    } /* SquareDistance */

/**************************************/
_SHORT  SlopeShiftDx ( _SHORT dy, _INT slope )
{
  _BOOL   bNegativeResult;

  bNegativeResult = !EQ_SIGN(dy,slope);
  return  (_SHORT)( ( ((_LONG)dy) * slope + (bNegativeResult? (-50):(50))
                    ) / 100L
                  );

} /*SlopeShiftDx*/
/*******************************************/


_BOOL  xHardOverlapRect ( p_RECT pr1, p_RECT pr2, _BOOL bStrict )
{
  _SHORT  xMid1;
  _SHORT  xMid2;

  if  ( (pr1->left >= pr2->left) == (pr1->right <= pr2->right) )
    return  _TRUE;

  xMid1 = (_SHORT)XMID_RECT(*pr1);
  xMid2 = (_SHORT)XMID_RECT(*pr2);

  if  ( xMid1 > pr2->left  &&  xMid1 < pr2->right )  {
    if  ( !bStrict )
      return  _TRUE;
  }
  else  if  ( bStrict )
    return  _FALSE;

  if  ( xMid2 > pr1->left  &&  xMid2 < pr1->right )
    return  _TRUE;

  return  _FALSE;

} /*xHardOverlapRect*/
/*******************************************/


_BOOL  yHardOverlapRect ( p_RECT pr1, p_RECT pr2, _BOOL bStrict )
{
  _SHORT  yMid1;
  _SHORT  yMid2;

  if  ( (pr1->top >= pr2->top) == (pr1->bottom <= pr2->bottom) )
    return  _TRUE;

  yMid1 = (_SHORT)YMID_RECT(*pr1);
  yMid2 = (_SHORT)YMID_RECT(*pr2);

  if  ( yMid1 > pr2->top  &&  yMid1 < pr2->bottom )  {
    if  ( !bStrict )
      return  _TRUE;
  }
  else  if  ( bStrict )
    return  _FALSE;

  if  ( yMid2 > pr1->top  &&  yMid2 < pr1->bottom )
    return  _TRUE;

  return  _FALSE;

} /*yHardOverlapRect*/
/*******************************************/


_BOOL  HardOverlapRect ( p_RECT pr1, p_RECT pr2, _BOOL bStrict )
{
  return  (   xHardOverlapRect(pr1,pr2,bStrict)
           && yHardOverlapRect(pr1,pr2,bStrict)
          );

} /*HardOverlapRect*/
/*******************************************/


_BOOL  SoftInRect ( p_RECT pr1, p_RECT pr2, _BOOL bStrict )
{

  if  (   DX_RECT(*pr1) > DX_RECT(*pr2)
       || DY_RECT(*pr1) > DY_RECT(*pr2)
      )
    return  _FALSE;

  if  ( !HardOverlapRect(pr1,pr2,STRICT_OVERLAP) )
    return  _FALSE;

  if  ( pr1->top < pr2->top )  {
    if  (   bStrict
         || (pr2->top - pr1->top) >= (pr2->bottom - pr1->bottom)
        )
      return  _FALSE;
  }
  else  if  ( pr1->bottom > pr2->bottom )  {
    if  (   bStrict
         || (pr1->top - pr2->top) <= (pr1->bottom - pr2->bottom)
        )
      return  _FALSE;
  }

  if  ( pr1->left < pr2->left )  {
    if  (   bStrict
         || (pr2->left - pr1->left) >= (pr2->right - pr1->right)
        )
      return  _FALSE;
  }
  else  if  ( pr1->right > pr2->right )  {
    if  (   bStrict
         || (pr1->left - pr2->left) <= (pr1->right - pr2->right)
        )
      return  _FALSE;
  }

  return  _TRUE;

} /*SoftInRect*/
/**************************************/


_BOOL GetTraceBoxInsideYZone ( p_SHORT x,      p_SHORT y,
                               _INT ibeg,      _INT iend,
                               _SHORT yUpZone, _SHORT yDnZone,
                               p_RECT pRect,
                               p_SHORT p_ixmax,p_SHORT p_ixmin,
                               p_SHORT p_iymax,p_SHORT p_iymin)
{
  _INT    i;
  _SHORT  xmin,xmax,ymin,ymax;

  DBG_CHK_err_msg( yUpZone>yDnZone, "BAD yZone in GetTr...YZone" );

  xmin = ALEF; xmax = ELEM;
  ymin = ALEF; ymax = ELEM;
  (*p_ixmax)=(*p_ixmin)=(*p_iymax)=(*p_iymin)=-1;
  for  ( i=ibeg;  i<=iend;  i++ )
   {
     if( y[i] == BREAK || y[i]<yUpZone || y[i]>yDnZone)
      continue;
    if  ( x[i] > xmax )
     { xmax = x[i]; *p_ixmax=(_SHORT)i; }
    if  ( x[i] < xmin )
     { xmin = x[i]; *p_ixmin=(_SHORT)i; }
    if  ( y[i] > ymax )
     { ymax = y[i]; *p_iymax=(_SHORT)i; }
    if  ( y[i] < ymin )
     { ymin = y[i]; *p_iymin=(_SHORT)i; }
  }

  pRect->left    = xmin;
  pRect->right   = xmax;
  pRect->top     = ymin;
  pRect->bottom  = ymax;

  if( xmin == ALEF  ||  xmax == ELEM || ymin == ALEF  ||  ymax == ELEM )
   {
//     err_msg("GetTraceBoxInsideYZone: No points");
     return  _FALSE;
   }

  *p_ixmax = (_SHORT)iMidPointPlato (*p_ixmax,iend,x,y);
  *p_ixmin = (_SHORT)iMidPointPlato (*p_ixmin,iend,x,y);
  *p_iymax = (_SHORT)iMidPointPlato (*p_iymax,iend,y,y);
  *p_iymin = (_SHORT)iMidPointPlato (*p_iymin,iend,y,y);
  return  _TRUE;

} /* end of GetTraceBoxInsideYZone */
/**************************************/

    /*
     *    The following function tries to define whether the
     *   part of trajectory between "iBeg" and "iEnd" looks
     *   like the right part of "3" or "B":
     *
     *       iBeg----> oooo
     *                     oo
     *                       o <-- iRightUp
     *                       o
     *                       o
     *                     oo
     *    iLeftMid --> oooo
     *                     oo
     *                       o
     *                        o <-- iRightDn
     *                        o
     *                        o
     *                      oo
     *       iEnd----> ooooo
     *
     *    If it decides this is true, then it puts the index
     *   of the tip (central arrow at the picture) to (*iGulf)
     *   and returns _TRUE.  Otherwise it puts the index of the
     *   ~rightmost point to (*iGulf) (for postprocessing to differ
     *   "B" from "D") and returns _FALSE.
     */

_BOOL  IsRightGulfLikeIn3 ( p_SHORT x, p_SHORT y,
                            _INT iBeg, _INT iEnd,
                            p_INT piGulf )
{
  _BOOL   bRet = _FALSE;
  _INT    iRightUp, iLeftMid, iRightDn;
  //_INT    iLeftMid1, iLeftMid2;
  _INT    nDepth;

  _INT    xCoef = 2;
  _INT    yCoef = 1;


        /*  Check input parameters:  */

  if  (   iBeg>iEnd
       || y[iBeg]==BREAK
       || y[iEnd]==BREAK
       || y[iBeg]>=y[iEnd]
      )  {
    DBG_err_msg( "BAD iBeg-iEnd in RightGulf..." );
    //iRightUp = iBeg;
    goto  EXIT_ACTIONS;
  }

        /*  Define some ref. values and points:  */

                     /*was ONE_FIFTH*/
  nDepth = ONE_EIGHTTH(y[iEnd] - y[iBeg]);  //here (y[iEnd] > y[iBeg]) !!
  if  ( nDepth < 1 )
    nDepth = 1;

  iRightUp = iXYweighted_max_right ( x, y, iBeg,     nDepth, xCoef, -yCoef );
  if  ( iRightUp <= iBeg )
    goto  EXIT_ACTIONS;
  iLeftMid = iXYweighted_max_right ( x, y, iRightUp, nDepth, -xCoef, yCoef );
  //iLeftMid2 = iXYweighted_max_right ( x, y, iRightUp, nDepth, -xCoef, -yCoef );
  //iLeftMid = HWRMin( iLeftMid1, iLeftMid2 );
  if  ( iLeftMid <= iRightUp )
    goto  EXIT_ACTIONS;
  iRightDn = iXYweighted_max_right ( x, y, iLeftMid, nDepth, xCoef, yCoef );
  if  ( iRightDn <= iLeftMid  ||  iRightDn >=iEnd )
    goto  EXIT_ACTIONS;

  #if  PG_DEBUG
    if  ( mpr==2 )  {
      draw_arc( YELLOW, x, y, iBeg,     iBeg );
      draw_arc( YELLOW, x, y, iRightUp, iRightUp );
      draw_arc( YELLOW, x, y, iLeftMid, iLeftMid );
      draw_arc( YELLOW, x, y, iRightDn, iRightDn );
      draw_arc( YELLOW, x, y, iEnd,     iEnd );
      brkeyw( "\nGulf ref. points painted." );
    }
  #endif /*PG_DEBUG*/

        /*  If the appropriate points have been found, look if */
        /* they meet the needed criteria:                      */

  if  (   TriangleSquare( x, y, iBeg,     iRightUp, iLeftMid ) > 0
       && TriangleSquare( x, y, iRightUp, iLeftMid, iRightDn ) < 0
       && TriangleSquare( x, y, iLeftMid, iRightDn, iEnd     ) > 0
      )
    bRet = _TRUE;

 EXIT_ACTIONS:;
   if  ( bRet )  {
     *piGulf = iLeftMid;
     #if  PG_DEBUG
       if  ( mpr == 2 )
         err_msg( "==GulfLikeIn3==" );
     #endif
   }
   else
     *piGulf = ixMax( iBeg, iEnd, x, y );

   return  bRet;

} /*IsRightGulfLikeIn3*/
/****************************************************************************/
/*   This function calculates step of writing                               */
/****************************************************************************/

#define  MAX_RECT_X_Y_RATIO             4
#define  MIN_NINTERVALS_BETWEEN_EXTRS   3
#define  MIN_PURE_INTERVALS             8
#define  MAX_SLOPE_TO_BELEIVE           50

_SHORT  DefineWritingStep( low_type _PTR low_data,
                           p_SHORT pxWrtStep,
                           _BOOL bUseMediana )
{
  _LONG   ldxSum, ldySum, lNumIntervals;
  _INT    nSlope;
  _SHORT  stepType = STEP_INDEPENDENT;


  *pxWrtStep = 0;

  nSlope = low_data->slope;
  if  ( nSlope < 0 )
    nSlope = 0;
  else  if  ( nSlope > MAX_SLOPE_TO_BELEIVE )
    nSlope = MAX_SLOPE_TO_BELEIVE + ONE_HALF(nSlope - MAX_SLOPE_TO_BELEIVE);

  if  ( delta_interval ( low_data->x, low_data->y,
                         0, low_data->ii-1,
                         MAX_RECT_X_Y_RATIO, nSlope,
                         &ldxSum, &ldySum, &lNumIntervals, _TRUE ) )  {
    if  ( lNumIntervals > MIN_NINTERVALS_BETWEEN_EXTRS )
      *pxWrtStep = (_SHORT) ONE_NTH( 5L*ldxSum, 3L*lNumIntervals );
                          /* See "FindXYScale" in FRM_WORD.C */
    if  ( (*pxWrtStep) != 0  &&  lNumIntervals < MIN_PURE_INTERVALS )  {
#if  PG_DEBUG
    printw( "\nToo little good intervals (%ld), MEAN_OF with mediana.",
            lNumIntervals );
#endif /*PG_DEBUG*/
      if  ( bUseMediana )
        *pxWrtStep = (_SHORT)MEAN_OF( (*pxWrtStep), ONE_HALF(DY_STR) );
      stepType = STEP_COMBINED;
    }
  }

  if  ( (*pxWrtStep) == 0 )  {
#if  PG_DEBUG
    printw( "\nNo good intervals, defining step by mediana." );
#endif /*PG_DEBUG*/
    if  ( bUseMediana )
      *pxWrtStep = ONE_HALF(DY_STR);
    stepType = STEP_MEDIANA;
  }

#if  PG_DEBUG
  if  ( mpr >= 1  &&  (*pxWrtStep) != 0)  {
    draw_line( low_data->box.left,            low_data->box.top+3,
               low_data->box.left+*pxWrtStep, low_data->box.top+3,
               GREEN, SOLID_LINE, THICK_WIDTH);
    printw("\n width_letter=%d \n",*pxWrtStep);
  }
#endif  /*PG_DEBUG*/

  return  stepType;

} /*DefineWritingStep*/

#undef  MIN_NINTERVALS_BETWEEN_EXTRS
#undef  MAX_RECT_X_Y_RATIO

/****************************************************************************/
/*   This function calculates distance between 2 xr-elements                */
/****************************************************************************/

#define  N_POINTS_FOR_DXR  5

_INT CalcDistBetwXr(p_SHORT xTrace,p_SHORT yTrace,
                    _INT ibeg1,_INT iend1,_INT ibeg2,_INT iend2,
                    p_SHORT Retcod)
{
  PS_point_type   pt1[N_POINTS_FOR_DXR];
  PS_point_type   pt2[N_POINTS_FOR_DXR];
  _INT            i, j, iMean;
  _INT            distMin, dist;

  *Retcod=SUCCESS;

      /*  Prepare arrays of points for dist. to be */
      /* calculated and compared:                  */

  pt1[0].x = xTrace[ibeg1];
  pt1[0].y = yTrace[ibeg1];
  pt1[N_POINTS_FOR_DXR-1].x = xTrace[iend1];
  pt1[N_POINTS_FOR_DXR-1].y = yTrace[iend1];

  for  ( i=1;  i<N_POINTS_FOR_DXR-1; i++ )  {
    iMean = ibeg1 + i*(iend1-ibeg1)/N_POINTS_FOR_DXR;
    if  ( yTrace[iMean] == BREAK )
      pt1[i] = pt1[0];
    else  {
      pt1[i].x = xTrace[iMean];
      pt1[i].y = yTrace[iMean];
    }
  }

  pt2[0].x = xTrace[ibeg2];
  pt2[0].y = yTrace[ibeg2];
  pt2[N_POINTS_FOR_DXR-1].x = xTrace[iend2];
  pt2[N_POINTS_FOR_DXR-1].y = yTrace[iend2];

  for  ( i=1;  i<N_POINTS_FOR_DXR-1; i++ )  {
    iMean = ibeg2 + i*(iend2-ibeg2)/N_POINTS_FOR_DXR;
    if  ( yTrace[iMean] == BREAK )
      pt2[i] = pt2[0];
    else  {
      pt2[i].x = xTrace[iMean];
      pt2[i].y = yTrace[iMean];
    }
  }

      /*  Calculate the MIN distance between all possible pairs */
      /* of points (pt1[i],pt2[j]):                             */

  distMin = (_INT)ALEF;
  for  ( i=0;  i<N_POINTS_FOR_DXR;  i++ )  {
    if  ( pt1[i].y==BREAK || pt2[i].y==BREAK )  {
      *Retcod = UNSUCCESS;
      return (_INT)ALEF;
    }
    for  ( j=0;  j<N_POINTS_FOR_DXR;  j++ )  {
      dist = Distance8( pt1[i].x, pt1[i].y,
                        pt2[j].x, pt2[j].y );
      if  ( dist < distMin )
        distMin = dist;
    }
  }

  return  ( distMin );

}

#endif //#ifndef LSTRIP

/************************************************************************/
/* Functions below work with "Groups" - each group describes one stroke */
/************************************************************************/

  _SHORT   ClearGroupsBorder( low_type _PTR pLowData ) ;

 /*------------------------------------------------------------------------*/

  _SHORT   InitGroupsBorder( low_type _PTR pLowData , _SHORT fl_BoxInit )
    {
      p_SHORT         pX            = pLowData->x             ;
      p_SHORT         pY            = pLowData->y             ;
      p_POINTS_GROUP  pGroupsBorder = pLowData->pGroupsBorder ;
      p_POINTS_GROUP  pTmpGrBord                              ;
      _INT            rmGrBord      = pLowData->rmGrBord      ;
      _INT            nPoints       = pLowData->ii            ;
      _INT            iPoint , iGroup                         ;

      _SHORT          fl_InitGrBord = SUCCESS ;


        ClearGroupsBorder( pLowData ) ;

          if   ( *pY != BREAK )
               {
                 err_msg( " InitGroupsBorder : Wrong Y-data structure . " ) ;
                 fl_InitGrBord = UNSUCCESS ;
                   goto  QUIT ;
               }

        pGroupsBorder->iBeg = 1 ;

          for  ( iPoint = 1 , iGroup = 1 ;  iPoint < nPoints - 1 ;  iPoint++ )
               {
                   if ( *( pY + iPoint ) == BREAK )
                      {
                        pTmpGrBord = pGroupsBorder + iGroup - 1 ;

                        ( pTmpGrBord     )->iEnd = (_SHORT)( iPoint - 1 ) ;
                        ( pTmpGrBord + 1 )->iBeg = (_SHORT)( iPoint + 1 ) ;

                          if  ( fl_BoxInit == INIT )
                              {
                                GetTraceBox ( pX , pY ,
                                              pTmpGrBord->iBeg , pTmpGrBord->iEnd ,
                                              &(pTmpGrBord->GrBox)  )  ;
                              }

                            if   ( iGroup < rmGrBord )
                              {
                                iGroup++ ;
                              }
                            else
                              {
                                err_msg(" InitGroupsBorder : GroupsBorder OVERFLOW ! " ) ;
                                err_msg(" LowLevel info lost ..." ) ;
                                fl_InitGrBord = UNSUCCESS ;
                                  goto  QUIT  ;
                              }
                      }
               }

        pTmpGrBord = pGroupsBorder + iGroup - 1  ;
        pTmpGrBord->iEnd = (_SHORT)(nPoints - 2) ;

          if  ( fl_BoxInit == INIT )
              {
                GetTraceBox ( pX , pY ,
                              pTmpGrBord->iBeg , pTmpGrBord->iEnd ,
                              &(pTmpGrBord->GrBox )  ) ;
              }
          if   ( *( pY + nPoints - 1 )  !=  BREAK )
               {
                 err_msg( " InitGroupsBorder : Wrong Y-data structure . " ) ;
                 fl_InitGrBord = UNSUCCESS ;
                   goto  QUIT ;
               }

        pLowData->lenGrBord = (_SHORT)iGroup ;

    QUIT:
      return( fl_InitGrBord ) ;
    }

 /*------------------------------------------------------------------------*/

  _SHORT  ClearGroupsBorder( low_type _PTR pLowData )
   {
     _SHORT  fl_ClearGrBor = SUCCESS ;

         if  ( pLowData->lenGrBord >= pLowData->rmGrBord )
             {
               err_msg(" ClearGroupsBorder : GroupsBorder OVERFLOW ! " ) ;
               err_msg(" ClearGroupsBorder : LowLevel info lost ...  " ) ;
               fl_ClearGrBor = UNSUCCESS          ;
             }

       HWRMemSet( (p_VOID)(pLowData->pGroupsBorder) , 0 ,
                  sizeof(POINTS_GROUP) * (pLowData->rmGrBord) ) ;

       pLowData->lenGrBord = 0 ;

    return( fl_ClearGrBor ) ;
   }

 /*------------------------------------------------------------------------*/
#ifndef LSTRIP

  _INT  GetGroupNumber( low_type _PTR  pLowData , _INT  iPoint   )
    {
      p_POINTS_GROUP   pGroupsBorder = pLowData->pGroupsBorder ;
      _INT             lenGrBord     = pLowData->lenGrBord     ;
      p_SHORT          pY            = pLowData->y             ;
      _INT             GroupNumber	 = UNDEF;
      _INT             il            ;

          for  ( il = 0  ;  il < lenGrBord  ;  il++ )
               {
                 if  (     ( ( pGroupsBorder + il )->iBeg  <= iPoint )
                       &&  ( ( pGroupsBorder + il )->iEnd  >= iPoint )  )
                     {
                       GroupNumber =  il  ;
                         break ;
                     }
               }


          if   (    ( il     == (lenGrBord - 1)  )
                 && ( iPoint >  (pGroupsBorder + lenGrBord - 1)->iEnd ) )
               {
                 err_msg(" Wrong point number or GroupsBorder array ... " ) ;
                 GroupNumber =  UNDEF ;
               }
          else     if   ( *( pY + iPoint ) == BREAK )
               {
                 err_msg(" Wrong point number or GroupsBorder or Y array .") ;
                 GroupNumber =  UNDEF ;
               }

    return( GroupNumber ) ;
    }

/*=========================================================================*/

  _SHORT  IsPointCont( low_type _PTR  pLowData , _INT iPoint , _UCHAR mark )
    {
      p_SPECL  pSpecl   = pLowData->specl     ;
       _INT    lenSpecl = pLowData->len_specl ;
      p_SHORT  Y        = pLowData->y         ;
       _SHORT  retValue = UNDEF ;
      p_SPECL  pTmpSpecl        ;
       _INT    il               ;

          if   ( ( iPoint < 0 ) || ( iPoint >= pLowData->ii ) )
               {
                 err_msg(" IsPointCont : Point is out of range ..." ) ;
                   goto  QUIT ;
               }
          else  if  ( Y[iPoint] == BREAK )
               {
                 err_msg(" IsPointCont : Point is BREAK ..." ) ;
                   goto  QUIT ;
               }

          for  ( il = 0 ;  il < lenSpecl ;  il++ )
               {
                 pTmpSpecl = pSpecl + il ;

                   if  ( pTmpSpecl->mark != mark )
                       { continue ; }

                   if  (    ( pTmpSpecl->ibeg  < iPoint )
                         && ( pTmpSpecl->iend  > iPoint )  )
                       {
                         retValue = INSIDE ;
                           break ;
                       }
                   else  if  ( pTmpSpecl->ibeg == iPoint )
                       {
                         retValue = LEFT_SHIFT  ;
                           break ;
                       }
                   else  if  ( pTmpSpecl->iend == iPoint )
                       {
                         retValue = RIGHT_SHIFT ;
                           break ;
                       }
               }

    QUIT: return( retValue ) ;
    }

/*-------------------------------------------------------------------------*/

/***************************************************************************/
/*   This function finds out if the given part of trajectory has           */
/* self-crossing that contains at least "lMinAbsSquare" within it.         */
/*                                                                         */
/*   Parameters "pInd1" and "pInd2" may equal _NULL; in that case they     */
/* won't be returned.                                                      */
/*   If "lMinAbsSquare" <= 0, then no square checking is done.             */
/*                                                                         */
/***************************************************************************/



_BOOL  CurveHasSelfCrossing( p_SHORT x, p_SHORT y,
                             _INT iBeg, _INT iEnd,
                             p_INT pInd1, p_INT pInd2,
                             _LONG lMinAbsSquare )
{
  _BOOL  bRet = _FALSE;
  _RECT  box_i;
  _INT   i, j, iLast;

        /*  First, some foolproofing: */
  if  ( iBeg >= iEnd )
    goto  EXIT_ACTIONS;

  if  (   y[iBeg]   == BREAK
       && y[++iBeg] == BREAK
      )
    goto  EXIT_ACTIONS;

  if  (   y[iEnd] == BREAK
       && y[--iEnd] == BREAK
      )
    goto  EXIT_ACTIONS;

  if  ( iBeg > iEnd-3 )
    goto  EXIT_ACTIONS;

        /*  Now, start calculations: */

  iLast = iEnd - 3;
  for  ( i=iBeg;  i<=iLast;  i++ )  { /*20*/

    if  ( y[i] == BREAK  ||  y[i+1] == BREAK )
      continue;

        /*  Memorize the box of the (i:i+1) cut: */
    if  ( x[i] < x[i+1] )  {
      box_i.left  = x[i];
      box_i.right = x[i+1];
    }
    else  {
      box_i.left  = x[i+1];
      box_i.right = x[i];
    }

    if  ( y[i] < y[i+1] )  {
      box_i.top    = y[i];
      box_i.bottom = y[i+1];
    }
    else  {
      box_i.top    = y[i+1];
      box_i.bottom = y[i];
    }

        /*  Go through the rest of the points: */

    for  ( j=i+2;  j<iEnd;  j++ )  { /*40*/

      if  ( y[j] == BREAK  ||  y[j+1] == BREAK )
        continue;

           /* Don't consider the cuts with non-crossing boxes: */

      if  ( x[j] > box_i.right  &&  x[j+1] > box_i.right )
        continue;
      if  ( x[j] < box_i.left   &&  x[j+1] < box_i.left )
        continue;
      if  ( y[j] > box_i.bottom  &&  y[j+1] > box_i.bottom )
        continue;
      if  ( y[j] < box_i.top     &&  y[j+1] < box_i.top )
        continue;

           /*  Check crossing precisely: */

      if  ( is_cross( x[i],y[i], x[i+1],y[i+1],
                      x[j],y[j], x[j+1],y[j+1] )
          )  {
            /*  OK, there is crossing.  Let's see now if it has */
            /* enough square to qualify:                        */
        if  ( lMinAbsSquare > 0 )  {
          _SHORT retCod;
          _LONG  lSquare = ClosedSquare( x, y, i, j+1, &retCod );
          if  ( retCod != RETC_OK )
            continue;  //there was break in trajectory, no calculations done
          TO_ABS_VALUE( lSquare );
          if  ( lSquare < lMinAbsSquare )
            continue;
        }
        if  ( pInd1 != _NULL )
          *pInd1 = i;
        if  ( pInd2 != _NULL )
          *pInd2 = j+1;
        bRet = _TRUE;
        goto  EXIT_ACTIONS;
      }

    } /*40*/

  } /*20*/


 EXIT_ACTIONS:;

  return  bRet;

} /*CurveHasSelfCrossing*/
/************************************************/

  /*  This routine corresponds to "delta_interval" from FRM.   */

  /*  The function finds all trajectory intervals with         */
  /* both x and y monotonous; summarizes all dx's and dy's     */
  /* for them, as well as the total number of these intervals. */

#define  MIN_POINTS_INTERVAL       4   /*  Min # of points in stroke  */
                                       /* for considering it in "del- */
                                       /* ta_interval".               */
#define  MIN_POINTS_BETWEEN_EXTR   3

// This must be >2:
#define  MIN_INTERVALS_TO_THROW_BIG_SMALL  4

_BOOL  delta_interval ( p_SHORT xArray, p_SHORT yArray,
                        _INT iLeft, _INT iRight,
                        _INT nMaxRectRatio,
                        _INT nSlope,
                        p_LONG pldxSum, p_LONG pldySum,
                        p_LONG plNumIntervals,
                        _BOOL bThrowBigAndSmall )
{
  _SHORT  dx, dy;
  _SHORT  dxBig, dyBig, dxSmall, dySmall;
  _INT    i;
  _INT    i_1;       /*within cycle i_1==i-1*/
  _INT    iPrevExtr;

  _SHORT  xFirst, yFirst;
  _SHORT  xSignPrev, ySignPrev;   /* >0  - up                     */
                                  /* =0  - "plato"                */
                                  /* <0  - down                   */
  _SHORT  xSignCur, ySignCur;

  _BOOL   bWasBrk;

/***************************************/

#define  add_sum_xy(iCur)                                            \
               {                                                     \
                DBG_CHK_err_msg(yArray[iCur]==BREAK,"BRK in delta_") \
                dy = yArray[iCur] - yArray[iPrevExtr];               \
                dx = xArray[iCur] - xArray[iPrevExtr];               \
                dx += SlopeShiftDx( dy, nSlope );                    \
                TO_ABS_VALUE(dx);                                    \
                TO_ABS_VALUE(dy);                                    \
                if  (   ((_LONG)dx)*nMaxRectRatio > ((_LONG)dy)      \
                     && ((_LONG)dy)*nMaxRectRatio > ((_LONG)dx)      \
                     && (iCur > (iPrevExtr+MIN_POINTS_BETWEEN_EXTR)) ) {  \
                  *pldxSum += dx;                                    \
                  *pldySum += dy;                                    \
                  (*plNumIntervals)++;                               \
                                                                     \
                  if  ( bThrowBigAndSmall )  {                       \
                    if  ( dx < dxSmall )  dxSmall = dx;              \
                    if  ( dx > dxBig )    dxBig   = dx;              \
                    if  ( dy < dySmall )  dySmall = dy;              \
                    if  ( dy > dyBig )    dyBig   = dy;              \
                  }                                                  \
                                                                     \
                }                                                    \
               }

/***************************************/

  *pldxSum = *pldySum = *plNumIntervals = 0L;

  if  (   (iLeft = nobrk_right(yArray,iLeft,iRight)) > iRight
       || (iRight = nobrk_left(yArray,iRight,iLeft)) < iLeft
       || (iRight - iLeft) < MIN_POINTS_INTERVAL-1
      )
    return  _FALSE;

  dxSmall = dySmall = ALEF;
  dxBig   = dyBig   = -1;

  for  ( i=iPrevExtr=iLeft, i_1=i-1, bWasBrk=_TRUE;
         i<=iRight;
         i_1=i++ )  { /*20*/

    if  (   yArray[i] == BREAK
         || i == iRight
        )  {
      if  (   !bWasBrk
           && i_1 > iPrevExtr
          )  {
     /*
        _INT   iMostFar = iMostFarFromChord (xArray,yArray,
                                             iPrevExtr,i_1);
        if  ( WorthMostFar (xArray,yArray,iPrevExtr,iMostFar,i_1) )  {
          add_sum_xy (iMostFar);
          iPrevExtr = iMostFar;
        }
     */
        add_sum_xy (i_1);
      }
      bWasBrk = _TRUE;
    }

    else  if  ( bWasBrk )  {
      xFirst = xArray[i];
      yFirst = yArray[i];
      do  {
        if  ( (++i) >= iRight )
          return  ((*plNumIntervals) != 0);
        if  ( yArray[i] == BREAK )
          break;
      } while  ( xArray[i]==xFirst || yArray[i]==yFirst );
      if  ( yArray[i] != BREAK )  {
        xSignPrev = xArray[i] - xFirst;
        ySignPrev = yArray[i] - yFirst;
        iPrevExtr = i;
        bWasBrk = _FALSE;
      }
    }

    else  { /*30*/

      xSignCur = xArray[i] - xArray[i_1];
      ySignCur = yArray[i] - yArray[i_1];

      if  ( xSignCur==0 || ySignCur==0 )
        continue;

      if  (   !EQ_SIGN(xSignCur,xSignPrev)
           || !EQ_SIGN(ySignCur,ySignPrev)
          )  {
      /*
        _INT   iMostFar = iMostFarFromChord (xArray,yArray,
                                             iPrevExtr,i_1);
      */
        xSignPrev = xSignCur;
        ySignPrev = ySignCur;

      /*
        if  ( WorthMostFar (xArray,yArray,iPrevExtr,iMostFar,i_1) )  {
          add_sum_xy (iMostFar);
          iPrevExtr = iMostFar;
        }
      */
        add_sum_xy (i_1);

        if  ( i_1 > iPrevExtr+MIN_POINTS_BETWEEN_EXTR )
          iPrevExtr = i_1;

        if  ( yArray[i+1] != BREAK )
          i++;        /*   For escaping from little */
                      /* mins and maxes             */
      }

    } /*30*/

  } /*20*/


  if  (   bThrowBigAndSmall
       && *plNumIntervals>=MIN_INTERVALS_TO_THROW_BIG_SMALL
      )  {
    *pldxSum -= (dxBig+dxSmall);
    *pldySum -= (dyBig+dySmall);
    (*plNumIntervals) -= 2;
  }

  return  ((*plNumIntervals) != 0);

} /*delta_interval*/

#undef  MIN_INTERVALS_TO_THROW_BIG_SMALL
#undef  MIN_POINTS_BETWEEN_EXTR
#undef  MIN_POINTS_INTERVAL

/***********************************************/

/*==========================================================================*/
/* This function determines, if point is inside the area                    */
/* Input: x, y of point, arrays pxBorder, pyBorder - borders of the area    */
/*        and NumPntsInBorder - quantity of points in border.               */
/* OUTPUT: position - see possible values in the defines near prototype     */
/* Returning value: SUCCESS - everything is OK, UNSUCCESS - memory problem  */
/*                                              or insufficient points      */
/*==========================================================================*/
_SHORT IsPointInsideArea(p_SHORT pxBorder,p_SHORT pyBorder,_INT NumPntsInBorder,
                         _SHORT xPoint,_SHORT yPoint,p_SHORT position)
{
 _INT i=-1,dy,sign,signPrv = 0;
 _BOOL bIsInside=_FALSE,bWasValidX=_TRUE,bIsCross;
#define CHANGE_FLAG_INSIDE_OUTSIDE_AREA  { bIsInside = !bIsInside; }


 if(pxBorder==_NULL || pyBorder==_NULL || NumPntsInBorder<3)
  return UNSUCCESS;

 /* the main idea, is point inside or outside area: it depends on the number
    of crossings of the straight horizontal line, containing given point,
    with the border of that area */
 /* let's take into consideration only left crossings */
 while(++i<NumPntsInBorder && pxBorder[i]>xPoint);
 if(i==NumPntsInBorder)
  {
    *position=POINT_OUTSIDE;
    goto ret;
  }
 /* if we were in the area of the x-coordinates, which are at the right,
    and current point is at the left, we'll check it below */
 if(i!=0)
  bWasValidX=_FALSE;
 /* let's calculate sign of dy - y-difference between point and current
    point on border for the 1-st point. Changing of this sign below will
    be treated as the existence of crossing */
 else if((dy=pyBorder[i++]-yPoint)==0)
  signPrv=sign=0;
 else
  sign = dy<0 ? -1 : 1;

 for(;i<=NumPntsInBorder-1;i++)
  {
    /* check, is it on border */
    if(   pxBorder[i]==xPoint && pxBorder[i-1]==xPoint
       && (   pyBorder[i]>=yPoint && pyBorder[i-1]<=yPoint
           || pyBorder[i]<=yPoint && pyBorder[i-1]>=yPoint
          )
      )
     {
       *position=POINT_ON_BORDER;
       goto ret;
     }
    /* if we are in the area of the x-coordinates, which are at the right,
       and the previous point was at the left, check, is it on border */
    if(pxBorder[i]>xPoint)
     if(bWasValidX)
      {
        bWasValidX=_FALSE;
        if(IsPointOnBorder(pxBorder,pyBorder,i-1,i,xPoint,yPoint,&bIsCross))
         {
           *position=POINT_ON_BORDER;
           goto ret;
         }
        /* questionable crossing */
        if((dy=pyBorder[i-1]-yPoint)==0)
         {
           if(sign!=0)
            signPrv=sign;
           sign=0;
         }
        else
         {
           if(bIsCross)
            CHANGE_FLAG_INSIDE_OUTSIDE_AREA
           sign = dy<0 ? -1 : 1;
           continue;
         }
      }
     else
      continue;
    else
    /* if we are in the area of the x-coordinates, which are at the left,
       and the previous point was at the right */
     if(!bWasValidX)
      {
        bWasValidX=_TRUE;
        /* check, is it on border */
        if(IsPointOnBorder(pxBorder,pyBorder,i-1,i,xPoint,yPoint,&bIsCross))
         {
           *position=POINT_ON_BORDER;
           goto ret;
         }
        /* questionable crossing */
        if((dy=pyBorder[i]-yPoint)==0)
         {
           sign=0;
           signPrv= (pyBorder[i-1]-yPoint)<0 ? -1 : 1;
         }
        else
         {
           if(bIsCross)
            CHANGE_FLAG_INSIDE_OUTSIDE_AREA
           sign = dy<0 ? -1 : 1;
         }
        continue;
      }
    /* skip plato */
    if(pyBorder[i]==pyBorder[i-1])
     continue;
    dy=pyBorder[i]-yPoint;
    if(dy<0 && sign<0 || dy>0 && sign>0)
     continue;
    /* in case of changing sign of dy, change flag of belonging to the area */
    if(dy!=0)
     {
       if(sign!=0)
        {
          sign=-sign;
          CHANGE_FLAG_INSIDE_OUTSIDE_AREA
        }
       else
        {
          sign = dy<0 ? -1 : 1;
          if(signPrv!=0 && sign!=signPrv)
           CHANGE_FLAG_INSIDE_OUTSIDE_AREA
        }
     }
    /* if dy==0, save sign of previous dy */
    else
     {
       signPrv=sign;
       sign=0;
     }
  }

 /* check the last cut between the last and first points */
 if(IsPointOnBorder(pxBorder,pyBorder,NumPntsInBorder-1,0,
                    xPoint,yPoint,&bIsCross))
  {
    *position=POINT_ON_BORDER;
    goto ret;
  }
 if(bIsCross)
  if(yPoint!=pyBorder[0] && yPoint!=pyBorder[NumPntsInBorder-1])
   CHANGE_FLAG_INSIDE_OUTSIDE_AREA
  else
   {
     _INT signDyLast_0=pyBorder[0]-pyBorder[NumPntsInBorder-1] <0 ? -1 : 1;
     if(yPoint==pyBorder[NumPntsInBorder-1])
      {
        if(signPrv!=signDyLast_0)
         CHANGE_FLAG_INSIDE_OUTSIDE_AREA
      }
     else /* yPoint==yBorder[0] */
      {
        for(i=1;i<NumPntsInBorder-1 && pyBorder[i]==pyBorder[0];i++);
        if(i!=NumPntsInBorder-1)
         {
           _INT signDy0_Next=pyBorder[0]-pyBorder[i] <0 ? -1 : 1;
           if(signDy0_Next!=signDyLast_0)
            CHANGE_FLAG_INSIDE_OUTSIDE_AREA
         }
      }
   }

 if(bIsInside)
  *position=POINT_INSIDE;
 else
  *position=POINT_OUTSIDE;

ret:
 return SUCCESS;

} /* end of IsPointInsideArea */

/*==========================================================================*/
/* This function determines, if point is on border of the area              */
/* Input: x, y of point, arrays pxBorder, pyBorder - borders of the area,   */
/*        Pnt1st, Pnt2nd - points on border to check.                       */
/* OUTPUT: _TRUE - point on border, _FALSE - point either inside or outside */
/* area, and it will return flag pbIsCross of crossing of horizontal line   */
/* (see comments above) with the border, which will be used in future.      */
/*==========================================================================*/
_BOOL IsPointOnBorder(p_SHORT pxBorder,p_SHORT pyBorder,_INT Pnt1st,_INT Pnt2nd,
                      _SHORT xPoint,_SHORT yPoint,p_BOOL pbIsCross)
{
 _SHORT xCross,yCross;

 *pbIsCross=FindCrossPoint(1,yPoint,xPoint,yPoint,
                           pxBorder[Pnt1st],pyBorder[Pnt1st],
                           pxBorder[Pnt2nd],pyBorder[Pnt2nd],&xCross,&yCross);
 if(      !(*pbIsCross) && xCross==ALEF && yCross==ALEF
       && pyBorder[Pnt1st]==yPoint
       && (   xPoint>=pxBorder[Pnt2nd] && xPoint<=pxBorder[Pnt1st]
           || xPoint<=pxBorder[Pnt2nd] && xPoint>=pxBorder[Pnt1st]
          )
    || (*pbIsCross) && xCross==xPoint && yCross==yPoint
   )
  return _TRUE;

 return _FALSE;

} /* end of IsPointOnBorder */

/*==========================================================================*/
/* This function finds bounding box, excluding "delayed" elements like ST,XT*/
/*==========================================================================*/
_BOOL GetTraceBoxWithoutXT_ST(p_low_type low_data,_INT ibeg,_INT iend,p_RECT pRect)
{
  p_SHORT        x=low_data->x,y=low_data->y;
  p_POINTS_GROUP pGroupsBorder=low_data->pGroupsBorder ;
  _INT           i,BegStroke,EndStroke;
  _SHORT         xmin,xmax,ymin,ymax;

  if(y[ibeg]==BREAK || y[iend]==BREAK)
   return _FALSE;

  xmin = ALEF; xmax = ELEM;
  ymin = ALEF; ymax = ELEM;
  BegStroke=GetGroupNumber(low_data,ibeg);
  EndStroke=GetGroupNumber(low_data,iend);

  // Bug Fix?? GetGroupNumber can return UNDEF
  if (BegStroke < 0 )
  {
	  return _FALSE;
  }

  for(i=BegStroke;i<=EndStroke;i++)
   {
     _INT  iBegStr=pGroupsBorder[i].iBeg,
           iEndStr=pGroupsBorder[i].iEnd;
     _RECT rStr;
     if(IsPointBelongsToXT_ST(MEAN_OF(iBegStr,iEndStr),low_data->specl))
      continue;
     GetTraceBox(x,y,iBegStr,iEndStr,&rStr);
     if(rStr.right > xmax )
      xmax = rStr.right;
     if(rStr.left < xmin )
      xmin = rStr.left;
     if(rStr.bottom > ymax )
      ymax = rStr.bottom;
     if(rStr.top < ymin )
      ymin = rStr.top;
  }

  pRect->left    = xmin;
  pRect->right   = xmax;
  pRect->top     = ymin;
  pRect->bottom  = ymax;

  if( xmin == ALEF  ||  xmax == ELEM || ymin == ALEF  ||  ymax == ELEM )
   return  _FALSE;

  return  _TRUE;

} /* end of GetTraceBoxWithoutXT_ST */

/*==========================================================================*/
/* This function determines belonging of given point to the XT or ST        */
/*==========================================================================*/
_BOOL IsPointBelongsToXT_ST(_INT iPoint,p_SPECL specl)
{
  p_SPECL cur=specl;

  while(cur!=_NULL)
   {
     if(IsXTorST(cur) && iPoint>=cur->ibeg && iPoint<=cur->iend)
      return _TRUE;
     cur=cur->next;
   }

  return _FALSE;

} /* end of IsPointBelongsToXT_ST */

#endif//#ifndef LSTRIP
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\parakern.cpp ===
/*
    File:       ParaConstants.j.c

    Contains:   xxx put contents here xxx

    Written by: xxx put writers here xxx

    Copyright:   1993-1996 by Apple Computer, Inc., & ParaGraph, Inc., all rights reserved.

    Change History (most recent first):

       <41*>     3/23/96    mbo     New grouping using dictionary
       <40*>     1/26/96    mbo     new character sets for international
       <39*>     11/3/95    mbo     new speed-accuracy slider for german
       <38*>    10/18/95    mbo     new tables for learning info conversion
       <37*>     9/27/95    mbo     new speed-accuracy slider for french
        <37>     8/24/95    DWL     (really mbo) remove #include "learn.h" for not MAC
                                    configurations
       <35*>     7/19/95    mbo     new speed-accuracy slider for german
       <34*>     6/13/95    mbo     fix learning info conversion tables
       <33*>      6/8/95    mbo     capitalization tables for swedish
       <32*>     5/24/95    mbo     fix "F" image (change Small2Cap table)
       <31*>      4/5/95    mbo     change lowlevel constants
       <30*>     2/10/95    mbo     update vexes conversion tables
       <29*>     1/26/95    mbo     fix bug in capitalization table (M<->m)
       <28*>    12/19/94    mbo     new capitalization algorithm
       <26*>    10/18/94    mbo     conditional for swedish/french/german/international
        <26>      6/2/94    rb      vex convertor for new dte format
       <24*>      5/8/94    mbo     constants for new version of Baseline (STROKA.C)
       <23*>     4/11/94    mbo     remove tr_sym_set
        <23>     3/22/94    mbo     new ParaGraph version
        <5*>     1/15/94    mbo     move charsets to ROM
        <4*>     12/5/93    mbo     update vexes conversion tables according new DTE , change speed-accuracy slider setting for non dictionary mode
         <4>    11/24/93    ehb     include learn.h for conversion #define
       <19*>    11/19/93    mbo     new ParaGraph version 11/22/93 (move letter images-DTE tables to DTE)
       <18*>    11/13/93    mbo     new ParaGraph version 11/15/92
       <17*>     11/5/93    mbo     add ' to alpha charset
       <16*>     11/3/93    mbo     new ParaGraph version 11/2/92
       <15*>    10/22/93    mbo     new ParaGraph version 10/21/92
       <14*>     10/5/93    mbo     update letter images table for english
       <12*>     6/24/93    mbo     update let_stat table for german
        <12>     5/21/93    ehb     mbo 1085928 fix minor error in letter weight table
       <10*>     5/20/93    seo     update according new dte
         <9>      5/7/93    tv      1082369 adding multiple prototypes to non-debug build
         <8>      5/5/93    tv      mbo 1082369 adding multiple prototype tables, letter images, and
                                    postprocessing databases
         <7>      5/5/93    tv      mbo 1082369 adding multiple prototypes to non-debug build
         <6>      5/4/93    tv      1082369 adding multiple prototypes to non-debug build
         <5>      5/3/93    tv      ehb 1082369 use of multiple prototype tables, letter images,
                                    postprocessing databases
        <4*>     4/30/93    seo     new letter images->dte table
         <3>     4/21/93    tv      tv new paragraph version
         <2>     4/21/93    jrm     tv space move const table to .j.c file so it goes into ROM
        <1*>     4/14/93    seo     update for german, change code for pound  sign, remove 's code
                                    from other charet,for german (for a while ) remove ' sign from
                                    punctuation charsets, add some other const data

*/

// This file is where all the constant data gets allocated so that it can
// be put into ROM.

#include "bastypes.h"
#include "hwr_sys.h"
#include "ams_mg.h"
#include "lowlevel.h"
#if defined(FOR_FRENCH) || defined (FOR_INTERNATIONAL)
     #include "bit_mark.h"
#endif /* FOR_FRENCH */
#if HWR_SYSTEM == MACINTOSH
    #include "learn.h"
#endif

// A bunch of constants are declared in Glob.h
// I removed the include of this from init_grf

#include "GLOB.H"

// From hwr_math.c
ROM_DATA _UCHAR SQRTa[256] =
{
   0,  17,  23,  28,  32,  36,  40,  43,  46,  48,  51,  54,
  56,  58,  60,  62,  64,  66,  68,  70,  72,  74,  76,  77,
  79,  80,  82,  84,  85,  87,  88,  90,  91,  92,  94,  95,
  96,  98,  99, 100, 102, 103, 104, 105, 107, 108, 109, 110,
 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
 136, 137, 138, 139, 140, 141, 142, 143, 144, 144, 145, 146,
 147, 148, 149, 150, 151, 151, 152, 153, 154, 155, 156, 156,
 157, 158, 159, 160, 160, 161, 162, 163, 164, 164, 165, 166,
 167, 168, 168, 169, 170, 171, 171, 172, 173, 174, 174, 175,
 176, 176, 177, 178, 179, 179, 180, 181, 182, 182, 183, 184,
 184, 185, 186, 186, 187, 188, 188, 189, 190, 190, 191, 192,
 192, 193, 194, 194, 195, 196, 196, 197, 198, 198, 199, 200,
 200, 201, 202, 202, 203, 204, 204, 205, 205, 206, 207, 207,
 208, 208, 209, 210, 210, 211, 212, 212, 213, 213, 214, 215,
 215, 216, 216, 217, 218, 218, 219, 219, 220, 220, 221, 222,
 222, 223, 223, 224, 224, 225, 226, 226, 227, 227, 228, 228,
 229, 230, 230, 231, 231, 232, 232, 233, 233, 234, 235, 235,
 236, 236, 237, 237, 238, 238, 239, 239, 240, 240, 241, 242,
 242, 243, 243, 244, 244, 245, 245, 246, 246, 247, 247, 248,
 248, 249, 249, 250, 250, 250, 250, 250, 250, 250, 250, 250,
 250, 250, 250, 250
};

ROM_DATA _LONG SQRTb[267] =
{
  0,     1,     4,     9,    16,    25,    36,    49,    64,    81,
 100,   121,   144,   169,   196,   225,   256,   289,   324,   361,
 400,   441,   484,   529,   576,   625,   676,   729,   784,   841,
 900,   961,  1024,  1089,  1156,  1225,  1296,  1369,  1444,  1521,
1600,  1681,  1764,  1849,  1936,  2025,  2116,  2209,  2304,  2401,
2500,  2601,  2704,  2809,  2916,  3025,  3136,  3249,  3364,  3481,
3600,  3721,  3844,  3969,  4096,  4225,  4356,  4489,  4624,  4761,
4900,  5041,  5184,  5329,  5476,  5625,  5776,  5929,  6084,  6241,
6400,  6561,  6724,  6889,  7056,  7225,  7396,  7569,  7744,  7921,
8100,  8281,  8464,  8649,  8836,  9025,  9216,  9409,  9604,  9801,
10000, 10201, 10404, 10609, 10816, 11025, 11236, 11449, 11664, 11881,
12100, 12321, 12544, 12769, 12996, 13225, 13456, 13689, 13924, 14161,
14400, 14641, 14884, 15129, 15376, 15625, 15876, 16129, 16384, 16641,
16900, 17161, 17424, 17689, 17956, 18225, 18496, 18769, 19044, 19321,
19600, 19881, 20164, 20449, 20736, 21025, 21316, 21609, 21904, 22201,
22500, 22801, 23104, 23409, 23716, 24025, 24336, 24649, 24964, 25281,
25600, 25921, 26244, 26569, 26896, 27225, 27556, 27889, 28224, 28561,
28900, 29241, 29584, 29929, 30276, 30625, 30976, 31329, 31684, 32041,
32400, 32761U, 33124U, 33489U, 33856U, 34225U, 34596U, 34969U, 35344U, 35721U,
36100U, 36481U, 36864U, 37249U, 37636U, 38025U, 38416U, 38809U, 39204U, 39601U,
40000U, 40401U, 40804U, 41209U, 41616U, 42025U, 42436U, 42849U, 43264U, 43681U,
44100U, 44521U, 44944U, 45369U, 45796U, 46225U, 46656U, 47089U, 47524U, 47961U,
48400U, 48841U, 49284U, 49729U, 50176U, 50625U, 51076U, 51529U, 51984U, 52441U,
52900U, 53361U, 53824U, 54289U, 54756U, 55225U, 55696U, 56169U, 56644U, 57121U,
57600U, 58081U, 58564U, 59049U, 59536U, 60025U, 60516U, 61009U, 61504U, 62001U,
62500U, 63001U, 63504U, 64009U, 64516U, 65025U, 65535U
};

// from PICT.C

  #define    REL_HIGHT_QANT         11
  #define    AF                     ALEF

 /* First index is highest , second index is lowest .                      */

  ROM_DATA _SCHAR maxA_H_end[REL_HIGHT_QANT-1][REL_HIGHT_QANT-1] =

 /*   H \ L    _D4_  _D3_  _D2_  _D1_  _DM_  _UM_  _U1_  _U2_  _U3_  _U4_  */
            {
 /* _D4_ */   { 55 ,  -2 , -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 } ,
 /* _D3_ */   { 55 ,  55 , -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 } ,
 /* _D2_ */   { 55 ,  55 , 55 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 } ,
 /* _D1_ */   { 55 ,  55 , 55 ,  45 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 } ,
 /* _DM_ */   { 45 ,  45 , 55 ,  45 ,  50 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 } ,
 /* _UM_ */   { 45 ,  45 , 45 ,  40 ,  50 ,  55 ,  -2 ,  -2 ,  -2 ,  -2 } ,
 /* _U1_ */   { 25 ,  45 , 45 ,  40 ,  45 ,  58 ,  60 ,  -2 ,  -2 ,  -2 } ,
 /* _U2_ */   { 25 ,  25 , 45 ,  45 ,  45 ,  55 ,  65 ,  68 ,  -2 ,  -2 } ,
 /* _U3_ */   { 22 ,  25 , 25 ,  55 ,  45 ,  45 ,  68 ,  73 ,  73 ,  -2 } ,
 /* _U4_ */   { 22 ,  22 , 25 ,  25 ,  45 ,  45 ,  45 ,  73 ,  75 ,  75 }
            } ;

 /**************************************************************************/

 /* First index is highest , second index is lowest .                      */


  ROM_DATA _SHORT maxCR_H_end[REL_HIGHT_QANT-1][REL_HIGHT_QANT-1] =

 /*   H \ L    _D4_  _D3_  _D2_  _D1_  _DM_  _UM_  _U1_  _U2_  _U3_  _U4_  */
            {
 /* _D4_ */    { 20 ,  -2 , -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 } ,
 /* _D3_ */    { 20 ,  20 , -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 } ,
 /* _D2_ */    { 20 ,  20 , 20 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 } ,
 /* _D1_ */    { 18 ,  20 , 20 ,  20 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 } ,
 /* _DM_ */    { 15 ,  16 , 20 ,  20 ,  20 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 } ,
 /* _UM_ */    {  8 ,  10 , 12 ,  16 ,  18 ,  20 ,  -2 ,  -2 ,  -2 ,  -2 } ,
 /* _U1_ */    {  4 ,   5 ,  6 ,  10 ,  14 ,  18 ,  20 ,  -2 ,  -2 ,  -2 } ,
 /* _U2_ */    {-AF ,   2 ,  3 ,   5 ,   8 ,  14 ,  20 ,  20 ,  -2 ,  -2 } ,
 /* _U3_ */    {-AF , -AF ,  1 ,   3 ,   6 ,  12 ,  18 ,  20 ,  24 ,  -2 } ,
 /* _U4_ */    {-AF , -AF ,-AF , -AF ,   4 ,  10 ,  16 ,  20 ,  22 ,  24 }
            } ;

 /**************************************************************************/

 /* First index is highest , second index is lowest .                      */

 ROM_DATA  _SCHAR minL_H_end[REL_HIGHT_QANT-1][REL_HIGHT_QANT-1] =

 /*   H \ L    _D4_  _D3_  _D2_  _D1_  _DM_  _UM_  _U1_  _U2_  _U3_  _U4_  */
            {
 /* _D4_ */   { 28 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 } ,
 /* _D3_ */   { 28 ,  28 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 } ,
 /* _D2_ */   { 28 ,  28 ,  28 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 } ,
 /* _D1_ */   { 28 ,  28 ,  28 ,  25 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 } ,
 /* _DM_ */   { 15 ,  15 ,  15 ,  15 ,  15 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 } ,
 /* _UM_ */   { 15 ,  15 ,  15 ,  15 ,  12 ,  12 ,  -2 ,  -2 ,  -2 ,  -2 } ,
 /* _U1_ */   { 15 ,  15 ,  15 ,  15 ,  15 ,  12 ,  12 ,  -2 ,  -2 ,  -2 } ,
 /* _U2_ */   { 25 ,  25 ,  15 ,  15 ,  15 ,  15 ,  15 ,  15 ,  -2 ,  -2 } ,
 /* _U3_ */   { 22 ,  25 ,  25 ,  15 ,  15 ,  15 ,  15 ,  25 ,  25 ,  -2 } ,
 /* _U4_ */   { 22 ,  22 ,  25 ,  25 ,  15 ,  15 ,  15 ,  25 ,  32 ,  32 }
            } ;

 /**************************************************************************/

 /* First index is highest , second index is lowest .                      */

 ROM_DATA _SCHAR maxX_H_end[REL_HIGHT_QANT-1][REL_HIGHT_QANT-1] =

 /*   H \ L    _D4_  _D3_  _D2_  _D1_  _DM_  _UM_  _U1_  _U2_  _U3_  _U4_  */
            {
 /* _D4_ */   { 35 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 } ,
 /* _D3_ */   { 35 ,  35 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 } ,
 /* _D2_ */   { 35 ,  35 ,  32 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 } ,
 /* _D1_ */   { 32 ,  32 ,  32 ,  32 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 } ,
 /* _DM_ */   { 30 ,  30 ,  30 ,  30 ,  20 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 } ,
 /* _UM_ */   { 30 ,  30 ,  30 ,  20 ,  18 ,  18 ,  -2 ,  -2 ,  -2 ,  -2 } ,
 /* _U1_ */   { 30 ,  30 ,  30 ,  30 ,  20 ,  25 ,  25 ,  -2 ,  -2 ,  -2 } ,
 /* _U2_ */   { 30 ,  30 ,  30 ,  30 ,  30 ,  25 ,  30 ,  45 ,  -2 ,  -2 } ,
 /* _U3_ */   { 30 ,  30 ,  30 ,  30 ,  30 ,  30 ,  35 ,  65 ,  68 ,  -2 } ,
 /* _U4_ */   { 30 ,  30 ,  30 ,  30 ,  30 ,  30 ,  30 ,  68 ,  70 ,  90 }
            } ;

 /**************************************************************************/

 /* First index is highest , second index is lowest .                      */

 ROM_DATA _SCHAR maxY_H_end[REL_HIGHT_QANT-1][REL_HIGHT_QANT-1] =

 /*   H \ L    _D4_   _D3_ _D2_  _D1_  _DM_  _UM_  _U1_  _U2_  _U3_  _U4_  */
            {
 /* _D4_ */   { 30 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 } ,
 /* _D3_ */   { 30 ,  30 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 } ,
 /* _D2_ */   { 30 ,  30 ,  30 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 } ,
 /* _D1_ */   { 32 ,  32 ,  25 ,  25 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 } ,
 /* _DM_ */   { 35 ,  35 ,  22 ,  22 ,  22 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 } ,
 /* _UM_ */   { 35 ,  35 ,  35 ,  22 ,  22 ,  22 ,  -2 ,  -2 ,  -2 ,  -2 } ,
 /* _U1_ */   { 35 ,  35 ,  35 ,  35 ,  25 ,  28 ,  32 ,  -2 ,  -2 ,  -2 } ,
 /* _U2_ */   { 35 ,  35 ,  35 ,  35 ,  35 ,  32 ,  35 ,  43 ,  -2 ,  -2 } ,
 /* _U3_ */   { 35 ,  35 ,  35 ,  35 ,  35 ,  35 ,  40 ,  50 ,  60 ,  -2 } ,
 /* _U4_ */   { 35 ,  35 ,  35 ,  35 ,  35 ,  35 ,  35 ,  60 ,  85 , 100 }
            } ;

// from STROKA.C
#ifdef FOR_GERMAN
ROM_DATA _SCHAR TG1[3][2][2]=
        {{{35,35},{35,35}},{{45,55},{45,45}},{{26,50},{40,50}}};
ROM_DATA _SCHAR TG2[3][2][2]=
        {{{35,45},{35,35}},{{36,55},{45,45}},{{26,55},{50,50}}};
ROM_DATA _SCHAR H1[3][2][2]=
        {{{31,48},{37,48}},{{32,40},{30,32}},{{40,50},{50,50}}};
ROM_DATA _SCHAR H2[3][2][2]=
        {{{48,48},{48,48}},{{32,50},{30,32}},{{40,50},{50,50}}};
#else
ROM_DATA _SCHAR TG1[3][2][2]=
        {{{35,35},{35,35}},{{0,0},{0,0}},{{35,50},{50,50}}};
ROM_DATA _SCHAR TG2[3][2][2]=
        {{{35,45},{35,35}},{{45,45},{45,45}},{{35,50},{50,50}}};
ROM_DATA _SCHAR H1[3][2][2]=
        {{{34,48},{37,48}},{{32,32},{32,32}},{{47,50},{50,50}}};
ROM_DATA _SCHAR H2[3][2][2]=
        {{{48,48},{48,48}},{{32,32},{32,32}},{{47,50},{50,50}}};
#endif
ROM_DATA _SCHAR CS=80;


// from TXrWordDomain.c

#if   defined (FOR_GERMAN)
ROM_DATA _UCHAR alpha_charset[] =   "abcdefghijklmnopqrstuvwxyz'";
ROM_DATA _UCHAR lpunct_charset[] =  "'\"-([{<";
ROM_DATA _UCHAR epunct_charset[] =  "'\".,-!?)]}>;:_";
ROM_DATA _UCHAR other_charset[] =   "\\_@#$";
#elif defined (FOR_FRENCH)

ROM_DATA _UCHAR alpha_charset[] =   "abcdefghijklmnopqrstuvwxyz"
                                    ""; //plus should be "oe" symbol
                                    //"\x88\x8d\x8e\x95\x99\x9d\x91\x89\x8f\x90\x94\x9e\xcf\'"
                                    //"\x8A\x8C\x9A\x9F\xA7";
ROM_DATA _UCHAR lpunct_charset[] =  "\'\"-([{<";
ROM_DATA _UCHAR epunct_charset[] =  "\'\".,-!?)]}>;:_";
ROM_DATA _UCHAR other_charset[] =   "\\_@#$"; //plus should be "numero"

//old (probably MAC):
//ROM_DATA _UCHAR alpha_charset[] =   "abcdefghijklmnopqrstuvwxyz\x88\x8d\x8e\x95\x99\x9d\x91\x89\x8f\x90\x94\x9e\xcf\'";
//ROM_DATA _UCHAR lpunct_charset[] =  "'\"-(<\xc7";
//ROM_DATA _UCHAR epunct_charset[] =  "\".,!-?:)>\xc8;";
//ROM_DATA _UCHAR other_charset[] =   ":.-%,+*=$@#&\xA3<>\xb4\xbc";

#elif defined (FOR_SWED)
// there is a var. "alpha_charset" in DTI_UTIL.C
ROM_DATA _UCHAR alpha_charset_eng[] =  "abcdefghijklmnopqrstuvwxyz\'";
//ROM_DATA _UCHAR alpha_charset_swe[] =  "abcdefghijklmnopqrstuvwxyz\x8A\x8C\x9A\'";
ROM_DATA _UCHAR alpha_charset_swe[] =  "abcdefghijklmnopqrstuvwxyz\'";
//ROM_DATA _UCHAR alpha_charset_swe_nodiacr[] = "abcdefghijklmnopqrstuvwxyz\xA7\x8D\'";
ROM_DATA _UCHAR lpunct_charset[] =  "\'\"-([{<";
ROM_DATA _UCHAR epunct_charset[] =  "\'\".,-!?)]}>;:_";
ROM_DATA _UCHAR other_charset[] =   "\\_@#$";
#elif defined (FOR_INTERNATIONAL)
ROM_DATA _UCHAR alpha_charset[] =   "abcdefghijklmnopqrstuvwxyz\'"
                                    "";
//                                    "";
                                    //"\x88\x8d\x8e\x95\x99\x9d\x91\x89\x8f\x90\x94\x9e\xcf\'"
                                    //"\x8A\x8C\x9A\x9F\xA7";
ROM_DATA _UCHAR alpha_charset_eng[] = "abcdefghijklmnopqrstuvwxyz\'";
ROM_DATA _UCHAR lpunct_charset[] =  "\'\"-([{<";
ROM_DATA _UCHAR epunct_charset[] =  "\'\".,-!?)]}>;:_";
ROM_DATA _UCHAR other_charset[] =   "\\_@#$";
//ROM_DATA _UCHAR other_charset[] =   ":.-%,+*=$@#&\xA3<>\xb4\xbc_/";
//ROM_DATA _UCHAR other_charset_eng[] =   ":.-%,+*=$@#&\xA3_/";
#else
ROM_DATA _UCHAR alpha_charset[] =   "abcdefghijklmnopqrstuvwxyz\'";
ROM_DATA _UCHAR lpunct_charset[] =  "\'\"-([{<";
ROM_DATA _UCHAR epunct_charset[] =  "\'\".,-!?)]}>;:_";
//ROM_DATA _UCHAR other_charset[] =   ":.-%,+*=$@#&\xA3_/";
ROM_DATA _UCHAR other_charset[] =   "\\_@#$";
#endif /* FOR_GERMAN and FOR_FRENCH */

ROM_DATA _UCHAR num_charset[] =     "0123456789";
ROM_DATA _UCHAR math_charset[] =    "+-*/=()[]{}<>^~|%&.,";

ROM_DATA _UCHAR sp_vs_q_bd[10] = {80, 30, 50, 60, 70, 80, 110, 140, 170, 200},
                sp_vs_q_ts[10] = {64, 32, 48, 56, 64, 72,  80,  88,  96,  99};


// from coderf3.c
#if 0 //nobody seems to need this
ROM_DATA _LONG COS_12_TAB[129] = {
  4096L,  4095L,  4094L,  4093L,  4091L,  4088L,  4084L,  4080L,
  4076L,  4071L,  4065L,  4058L,  4051L,  4043L,  4035L,  4026L,
  4017L,  4007L,  3996L,  3985L,  3973L,  3960L,  3947L,  3933L,
  3919L,  3904L,  3889L,  3873L,  3856L,  3839L,  3821L,  3803L,
  3784L,  3764L,  3744L,  3723L,  3702L,  3680L,  3658L,  3635L,
  3612L,  3588L,  3563L,  3538L,  3513L,  3487L,  3460L,  3433L,
  3405L,  3377L,  3348L,  3319L,  3289L,  3259L,  3229L,  3197L,
  3166L,  3134L,  3101L,  3068L,  3034L,  3000L,  2966L,  2931L,
  2896L,  2860L,  2824L,  2787L,  2750L,  2713L,  2675L,  2637L,
  2598L,  2559L,  2519L,  2480L,  2439L,  2399L,  2358L,  2317L,
  2275L,  2233L,  2191L,  2148L,  2105L,  2062L,  2018L,  1975L,
  1930L,  1886L,  1841L,  1796L,  1751L,  1705L,  1659L,  1613L,
  1567L,  1520L,  1474L,  1427L,  1379L,  1332L,  1284L,  1237L,
  1189L,  1140L,  1092L,  1043L,   995L,   946L,   897L,   848L,
   799L,   749L,   700L,   650L,   601L,   551L,   501L,   451L,
   401L,   351L,   301L,   251L,   200L,   150L,   100L,    50L,
     0L
  };
#endif //0  

// from bit_mark.h

#if defined(FOR_FRENCH) || defined (FOR_INTERNATIONAL)

ROM_DATA    _UCHAR     BoxScale[MAX_BOX_SCALE] =
                            {
                                0  , 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80  , 90 ,
                                100, 110, 120, 130, 140, 150, 160, 170, 180 , 190,
                                200, 210, 220, 230
                            } ;


ROM_DATA    _UCHAR     NumExtScale[SCALE_EXT_DIMENSION] =
                            {
                                0 , 1 , 2 , BIT_MARK_MAX
                            } ;


ROM_DATA    _CHAR      IntScale[SCALE_INT_DIMENSION] = { ISOLATE  , INTERSECTED };

 /*------------------------------------------------------------------------*/

ROM_DATA    BIT_MARK   Int_Um_Com_Marks[SCALE_INT_DIMENSION] = { {10}, {10} } ;

ROM_DATA    BIT_MARK   Int_Com_Um_Marks[SCALE_INT_DIMENSION] = { {10}, { 6} } ;

ROM_DATA    BIT_MARK   Pos_Cd_Com_Marks[SCALE_POS_DIMENSION] = { { 4}, {10}, {10} } ;

ROM_DATA    BIT_MARK   Pos_Com_Cd_Marks[SCALE_POS_DIMENSION] = { {10}, { 4}, { 4} } ;

                                                        /*  END_LAST  MID_LAST  COMMON */

 /*------------------------------------------------------------------------*/
//#if 0 // AVP -- sketch is not in project !
// From sketch.cpp
ROM_DATA    BIT_MARK   CdElsMarks[SCALE_Y_ELS_DIMENSION][SCALE_X_ELS_DIMENSION]
                     =  {
                            { { 0}, {0}, {0}, {0}, {0}, {0}, {0}, {0}, {0}, {0}, {1}, {1}, {1}, {1}, {1}, {1}, {0}, {0} } ,
                            { { 0}, {0}, {0}, {0}, {0}, {0}, {0}, {0}, {0}, {0}, {2}, {2}, {3}, {3}, {3}, {3}, {2}, {1} } ,
                            { { 1}, {1}, {0}, {0}, {0}, {0}, {0}, {0}, {0}, {1}, {3}, {4}, {4}, {4}, {4}, {4}, {3}, {2} } ,
                            { { 3}, {3}, {2}, {2}, {2}, {2}, {2}, {2}, {2}, {3}, {3}, {3}, {5}, {6}, {6}, {6}, {5}, {4} } ,
                            { { 4}, {4}, {4}, {3}, {3}, {3}, {3}, {3}, {3}, {5}, {5}, {6}, {7}, {7}, {7}, {6}, {5}, {5} } ,
                            { { 5}, {5}, {5}, {5}, {5}, {5}, {5}, {5}, {5}, {6}, {7}, {7}, {7}, {7}, {7}, {6}, {5}, {5} } ,
                            { { 5}, {5}, {5}, {5}, {5}, {5}, {5}, {5}, {5}, {6}, {7}, {7}, {7}, {7}, {7}, {6}, {5}, {5} } ,
                            { { 5}, {5}, {5}, {5}, {5}, {5}, {5}, {5}, {5}, {6}, {7}, {7}, {7}, {7}, {7}, {6}, {5}, {5} } ,
                            { { 5}, {5}, {5}, {5}, {5}, {5}, {5}, {5}, {5}, {6}, {7}, {7}, {7}, {7}, {7}, {6}, {5}, {5} } ,
                            { { 5}, {5}, {5}, {5}, {5}, {5}, {5}, {5}, {5}, {6}, {7}, {7}, {7}, {7}, {7}, {6}, {5}, {5} } ,
                            { { 4}, {4}, {4}, {5}, {5}, {5}, {5}, {5}, {5}, {6}, {7}, {7}, {7}, {7}, {7}, {6}, {5}, {5} } ,
                            { { 3}, {3}, {3}, {4}, {5}, {5}, {5}, {5}, {5}, {6}, {7}, {7}, {7}, {7}, {7}, {6}, {5}, {5} } ,
                            { { 1}, {2}, {2}, {3}, {3}, {4}, {5}, {5}, {5}, {6}, {7}, {7}, {7}, {7}, {7}, {6}, {5}, {5} } ,
                            { { 0}, {1}, {1}, {2}, {3}, {4}, {4}, {5}, {5}, {6}, {7}, {7}, {7}, {7}, {7}, {6}, {5}, {5} } ,
                            { { 0}, {0}, {0}, {1}, {2}, {2}, {3}, {4}, {5}, {5}, {5}, {5}, {5}, {5}, {5}, {5}, {5}, {5} }
                         } ;

ROM_DATA   BIT_MARK   Pos_Cd_Els_Marks[SCALE_POS_DIMENSION] = { { 4}, {10}, {10} };

ROM_DATA   BIT_MARK   Pos_Els_Cd_Marks[SCALE_POS_DIMENSION] = { {10}, { 4}, {10} };

                                                        /*  END_LAST  MID_LAST  COMMON   */


ROM_DATA    BIT_MARK  Int_Cd_Els_Marks[SCALE_INT_DIMENSION] = { {10}, {10} } ;

/*
ROM_DATA    BIT_MARK  Int_Els_Cd_Marks[SCALE_INT_DIMENSION] = { { 8}, {10} } ;
*/

ROM_DATA    BIT_MARK  Int_Els_Cd_Marks[SCALE_INT_DIMENSION] = { {10}, {10} } ;

                                                        /*  ISOLATE   INTERSECTED        */

 /*------------------------------------------------------------------------*/


ROM_DATA    BIT_MARK   CdDotMarks[SCALE_Y_DOT_DIMENSION][SCALE_X_DOT_DIMENSION]
                     =  {
                            { { 0}, { 0}, { 0}, { 0}, { 0}, { 0}, { 0}, { 0}, { 0}, { 0}, { 0}, { 0}, { 0}, { 0}, { 1} } ,
                            { { 0}, { 0}, { 1}, { 1}, { 1}, { 1}, { 1}, { 1}, { 1}, { 1}, { 1}, { 2}, { 2}, { 2}, { 3} } ,
                            { { 2}, { 2}, { 2}, { 2}, { 2}, { 2}, { 2}, { 2}, { 2}, { 2}, { 2}, { 3}, { 3}, { 4}, { 5} } ,
                            { { 3}, { 3}, { 3}, { 3}, { 3}, { 3}, { 3}, { 3}, { 3}, { 3}, { 3}, { 4}, { 5}, { 6}, { 7} } ,
                            { { 4}, { 5}, { 6}, { 4}, { 4}, { 4}, { 4}, { 4}, { 4}, { 4}, { 4}, { 5}, { 7}, { 8}, { 9} } ,
                            { { 5}, { 5}, { 5}, { 5}, { 5}, { 5}, { 5}, { 5}, { 5}, { 5}, { 5}, { 7}, { 9}, {10}, {10} } ,
                            { { 6}, { 5}, { 5}, { 6}, { 6}, { 6}, { 6}, { 6}, { 6}, { 6}, { 6}, { 7}, { 9}, {10}, {10} } ,
                            { { 8}, { 7}, { 7}, { 7}, { 7}, { 7}, { 7}, { 7}, { 6}, { 6}, { 6}, { 7}, { 9}, {10}, {10} } ,
                            { {10}, { 8}, { 8}, { 9}, { 9}, { 9}, { 9}, { 8}, { 7}, { 7}, { 7}, { 7}, { 9}, {10}, {10} } ,
                            { { 9}, {10}, {10}, {10}, {10}, {10}, {10}, { 9}, { 9}, { 8}, { 8}, { 9}, {10}, {10}, {10} } ,
                            { { 8}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10} }
                         } ;

ROM_DATA  BIT_MARK   Int_Cd_Dot_Marks[SCALE_INT_DIMENSION] = { {10}, {10} } ;

ROM_DATA  BIT_MARK   Int_Dot_Cd_Marks[SCALE_INT_DIMENSION] = { {10}, { 7} } ;

                                                        /*  ISOLATE   INTERSECTED        */

 /*------------------------------------------------------------------------*/


ROM_DATA    BIT_MARK   CdStrMarks[SCALE_Y_STR_DIMENSION][SCALE_X_STR_DIMENSION]
   = {
       { { 2}, { 2}, { 0}, { 0}, { 0}, { 0}, { 0}, { 0}, { 0}, { 0}, { 0}, { 0}, { 0}, { 0}, { 0}, {0}, {0}, {0}, {0}, {0}, {0}, {0}, {0} } ,
       { { 4}, { 3}, { 1}, { 0}, { 0}, { 0}, { 0}, { 0}, { 0}, { 0}, { 0}, { 0}, { 0}, { 0}, { 0}, {0}, {0}, {0}, {0}, {0}, {0}, {0}, {0} } ,
       { { 6}, { 5}, { 3}, { 2}, { 1}, { 1}, { 2}, { 2}, { 1}, { 1}, { 1}, { 0}, { 0}, { 0}, { 0}, {0}, {0}, {0}, {0}, {0}, {0}, {0}, {0} } ,
       { { 8}, { 6}, { 5}, { 3}, { 3}, { 3}, { 3}, { 3}, { 3}, { 3}, { 3}, { 2}, { 1}, { 1}, { 1}, {1}, {0}, {0}, {0}, {0}, {0}, {0}, {0} } ,
       { { 9}, { 7}, { 6}, { 5}, { 5}, { 5}, { 5}, { 4}, { 4}, { 4}, { 5}, { 3}, { 3}, { 3}, { 3}, {2}, {1}, {0}, {0}, {0}, {0}, {0}, {0} } ,
       { { 9}, { 8}, { 8}, { 7}, { 7}, { 7}, { 6}, { 5}, { 5}, { 6}, { 7}, { 5}, { 5}, { 4}, { 5}, {4}, {2}, {0}, {0}, {0}, {0}, {0}, {0} } ,
       { { 9}, {10}, { 9}, { 8}, { 8}, { 9}, { 8}, { 7}, { 7}, { 8}, { 8}, { 7}, { 6}, { 5}, { 5}, {4}, {2}, {2}, {2}, {2}, {2}, {2}, {2} } ,
       { {10}, {10}, {10}, {10}, {10}, {10}, {10}, { 9}, { 9}, {10}, {10}, { 9}, { 8}, { 7}, { 6}, {5}, {3}, {4}, {3}, {3}, {2}, {2}, {2} } ,
       { {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, { 9}, { 8}, { 6}, {6}, {5}, {5}, {4}, {3}, {3}, {3}, {2} } ,
       { {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, { 9}, { 8}, {6}, {5}, {5}, {5}, {4}, {3}, {3}, {3} } ,
       { {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, { 9}, {8}, {7}, {6}, {5}, {4}, {4}, {3}, {3} } ,
       { {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, {9}, {8}, {7}, {6}, {5}, {5}, {4}, {3} }
     } ;


#endif /* FOR_FRENCH */

#ifdef USE_VEX_CONVERTER
/* from LIToDte.c*/
//   In the following tables the index of element in one row
//  is the number of var. in MessagePad, the value of the
//  element being the number of var. in BIC or 0xFF if no
//  such var. exists.  E.g. if the first
//  byte for letter is 0x02, this means that var.#0
//  in MessagePad corresponds to var.#2 in BIC.

// The table for Default DTE:

ROM_DATA _UCHAR DefaultVexMapTable[96][8] =
  {
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // ' '(32)

    0x01, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '!'(33)
    0x00, 0x01, 0x02, 0x03, 0xFF, 0xFF, 0xFF, 0xFF,     // '"'(34)
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '#'(35)
    0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '$'(36)
    0x02, 0x00, 0x05, 0x03, 0x07, 0xFF, 0xFF, 0xFF,     // '%'(37)
    0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '&'(38)
    0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '''(39)
    0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '('(40)
    0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // ')'(41)
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '*'(42)
    0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '+'(43)
    0x01, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // ','(44)
    0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '-'(45)
    0x01, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '.'(46)
    0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '/'(47)

    0x01, 0x00, 0x05, 0x03, 0x04, 0xFF, 0xFF, 0xFF,     // '0'(48)
    0x00, 0xFF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '1'(49)
    0x00, 0x01, 0x05, 0x04, 0x03, 0xFF, 0xFF, 0xFF,     // '2'(50)
    0x00, 0x01, 0xFF, 0x03, 0xFF, 0xFF, 0xFF, 0xFF,     // '3'(51)
    0x00, 0x01, 0x02, 0x04, 0x03, 0xFF, 0x06, 0x05,     // '4'(52)
    0x04, 0x00, 0x01, 0x03, 0x05, 0xFF, 0x02, 0xFF,     // '5'(53)
    0x00, 0x05, 0x04, 0x03, 0x02, 0x01, 0xFF, 0xFF,     // '6'(54)
    0x00, 0x02, 0x01, 0x03, 0x04, 0xFF, 0xFF, 0xFF,     // '7'(55)
    0x00, 0x03, 0xFF, 0x05, 0x04, 0x02, 0xFF, 0x07,     // '8'(56)
    0x00, 0x02, 0x01, 0xFF, 0x04, 0x06, 0xFF, 0xFF,     // '9'(57)

    0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // ':'(58)
    0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // ';'(59)
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '<'(60)
    0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '='(61)
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '>'(62)
    0x00, 0x01, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '?'(63)
    0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '@'(64)

    0x00, 0x02, 0x04, 0x01, 0x03, 0xFF, 0xFF, 0xFF,     // 'A'(65)
    0x01, 0x00, 0x02, 0x03, 0xFF, 0xFF, 0xFF, 0xFF,     // 'B'(66)
    0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'C'(67)
    0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'D'(68)
    0x00, 0x03, 0x02, 0x01, 0x05, 0x06, 0x04, 0xFF,     // 'E'(69)
    
    0x00, 0x01, 0x03, 0x04, 0x08, 0x07, 0xFF, 0xFF,     // 'F'(70)
    0x01, 0x03, 0xFF, 0x02, 0xFF, 0xFF, 0xFF, 0xFF,     // 'G'(71)
    0x00, 0x01, 0x05, 0x04, 0xFF, 0xFF, 0xFF, 0xFF,     // 'H'(72)
    0x01, 0x02, 0x03, 0xFF, 0x04, 0xFF, 0xFF, 0xFF,     // 'I'(73)
    0x00, 0x02, 0x01, 0x03, 0xFF, 0xFF, 0xFF, 0xFF,     // 'J'(74)
    
    0x01, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'K'(75)
    0x00, 0xFF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'L'(76)
    0x01, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'M'(77)
    0x00, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'N'(78)
    0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'O'(79)
    
    0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'P'(80)
    0x00, 0x01, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'Q'(81)
    0x00, 0x01, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'R'(82)
    0x01, 0x00, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'S'(83)
    0x03, 0x02, 0x04, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'T'(84)

    0x00, 0x01, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'U'(85)
    0x01, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'V'(86)
    0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'W'(87)
    0x01, 0x00, 0x03, 0x02, 0xFF, 0xFF, 0xFF, 0xFF,     // 'X'(88)
    0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'Y'(89)
    0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'Z'(90)

    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '['(91)
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '\'(92)
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // ']'(93)
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '^'(94)
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '_'(95)
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '`'(96)

    0x00, 0x01, 0x02, 0x07, 0x06, 0xFF, 0xFF, 0xFF,     // 'a'(97)
    0x00, 0x01, 0x02, 0x03, 0xFF, 0x04, 0xFF, 0xFF,     // 'b'(98)
    0x00, 0x01, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'c'(99)
    0xFF, 0x00, 0x01, 0x03, 0x04, 0x05, 0x02, 0xFF,     // 'd'(100)
    0x00, 0x02, 0x01, 0x04, 0x03, 0x05, 0x06, 0x07,     // 'e'(101)

    0x00, 0x01, 0x02, 0x05, 0x04, 0x06, 0x07, 0xFF,     // 'f'(102)
    0x00, 0x01, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'g'(103)
    0x01, 0x03, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'h'(104)
    0x01, 0xFF, 0xFF, 0x02, 0xFF, 0xFF, 0xFF, 0xFF,     // 'i'(105)
    0x00, 0x01, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'j'(106)
    
    0x01, 0x00, 0x04, 0x02, 0x05, 0xFF, 0xFF, 0xFF,     // 'k'(107)
    0x00, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'l'(108)
    0x01, 0x02, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'm'(109)
    0x00, 0x01, 0x03, 0x02, 0xFF, 0xFF, 0xFF, 0xFF,     // 'n'(110)
    0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'o'(111)
    
    0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'p'(112)
    0x03, 0x02, 0x05, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'q'(113)
    0x01, 0x00, 0x02, 0x03, 0x06, 0x04, 0x07, 0xFF,     // 'r'(114)
    0x01, 0x00, 0x04, 0x03, 0x02, 0xFF, 0xFF, 0xFF,     // 's'(115)
    0x00, 0x01, 0x03, 0x04, 0x05, 0x07, 0x06, 0xFF,     // 't'(116)
    
    0x00, 0x01, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'u'(117)
    0x00, 0x02, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'v'(118)
    0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'w'(119)
    0x03, 0xFF, 0x04, 0x05, 0x06, 0xFF, 0xFF, 0xFF,     // 'x'(120)
    0x00, 0x01, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'y'(121)
    0x00, 0x01, 0x02, 0x03, 0xFF, 0xFF, 0xFF, 0xFF,     // 'z'(122)

    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '{'(123)
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '|'(124)
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '}'(125)
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '~'(126)

    0x02, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF      
  };


// The table for Block DTE:

ROM_DATA _UCHAR BlockVexMapTable[96][8] =
  {
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // ' '(32)

    0x01, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '!'(33)
    0x00, 0x01, 0x02, 0x03, 0xFF, 0xFF, 0xFF, 0xFF,     // '"'(34)
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '#'(35)
    0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '$'(36)
    0x02, 0x00, 0x05, 0x03, 0x07, 0xFF, 0xFF, 0xFF,     // '%'(37)
    0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '&'(38)
    0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '''(39)
    0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '('(40)
    0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // ')'(41)
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '*'(42)
    0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '+'(43)
    0x01, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // ','(44)
    0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '-'(45)
    0x01, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '.'(46)
    0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '/'(47)

    0x01, 0x00, 0x05, 0x03, 0x04, 0xFF, 0xFF, 0xFF,     // '0'(48)
    0x00, 0xFF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '1'(49)
    0x00, 0x01, 0x06, 0x04, 0x03, 0xFF, 0xFF, 0xFF,     // '2'(50)
    0x00, 0x01, 0xFF, 0x03, 0xFF, 0xFF, 0xFF, 0xFF,     // '3'(51)
    0x00, 0x02, 0x04, 0x06, 0x05, 0xFF, 0x08, 0x07,     // '4'(52)
    0x04, 0x00, 0x01, 0x03, 0x05, 0xFF, 0x02, 0xFF,     // '5'(53)
    0x00, 0x06, 0x05, 0x04, 0x03, 0x02, 0xFF, 0xFF,     // '6'(54)
    0x00, 0x03, 0x01, 0x04, 0x05, 0xFF, 0xFF, 0xFF,     // '7'(55)
    0x00, 0x04, 0xFF, 0x06, 0x05, 0x02, 0xFF, 0x08,     // '8'(56)
    0x00, 0x02, 0x01, 0xFF, 0x04, 0x06, 0xFF, 0xFF,     // '9'(57)

    0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // ':'(58)
    0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // ';'(59)
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '<'(60)
    0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '='(61)
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '>'(62)
    0x00, 0x01, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '?'(63)
    0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '@'(64)

    0x00, 0x05, 0x02, 0x01, 0x04, 0xFF, 0xFF, 0xFF,     // 'A'(65)
    0x01, 0x00, 0x02, 0x03, 0xFF, 0xFF, 0xFF, 0xFF,     // 'B'(66)
    0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'C'(67)
    0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'D'(68)
    0x05, 0x03, 0x01, 0x07, 0x08, 0x06, 0xFF, 0xFF,     // 'E'(69)
    0x03, 0x04, 0x09, 0x08, 0xFF, 0xFF, 0xFF, 0xFF,     // 'F'(70)
    0x05, 0xFF, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'G'(71)
    0x00, 0x01, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'H'(72)
    0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'I'(73)
    0x00, 0x04, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'J'(74)
    0x01, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'K'(75)
    0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'L'(76)
    0x02, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'M'(77)
    0x01, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'N'(78)
    0x04, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'O'(79)
    0x01, 0xFF, 0xFF, 0x04, 0xFF, 0xFF, 0xFF, 0xFF,     // 'P'(80)
    0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'Q'(81)
    0x00, 0x01, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'R'(82)
    0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'S'(83)
    0x05, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'T'(84)
    0x01, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'U'(85)
    0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'V'(86)
    0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'W'(87)
    0x05, 0x01, 0x0A, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'X'(88)
    0x00, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'Y'(89)
    0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'Z'(90)

    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '['(91)
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '\'(92)
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // ']'(93)
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '^'(94)
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '_'(95)
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '`'(96)

    0x01, 0x02, 0x06, 0x05, 0x04, 0x08, 0x07, 0xFF,     // 'a'(97)
    0x00, 0xFF, 0x01, 0x07, 0x05, 0x0A, 0xFF, 0xFF,     // 'b'(98)
    0x00, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'c'(99)
    0xFF, 0x00, 0x02, 0x06, 0x07, 0x08, 0x04, 0xFF,     // 'd'(100)
    0x00, 0x02, 0x01, 0x04, 0x03, 0x05, 0x06, 0x07,     // 'e'(101)
    0x02, 0x05, 0x06, 0x0B, 0x0D, 0x0E, 0xFF, 0xFF,     // 'f'(102)
    0x00, 0x04, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'g'(103)
    0x02, 0x06, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'h'(104)
    0x03, 0xFF, 0xFF, 0x05, 0xFF, 0xFF, 0xFF, 0xFF,     // 'i'(105)
    0x01, 0x05, 0x04, 0x06, 0xFF, 0xFF, 0xFF, 0xFF,     // 'j'(106)
    0x01, 0x00, 0x06, 0x09, 0xFF, 0xFF, 0xFF, 0xFF,     // 'k'(107)
    0x01, 0x04, 0x05, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'l'(108)
    0x02, 0x03, 0x04, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'm'(109)
    0x01, 0x03, 0x07, 0x05, 0xFF, 0xFF, 0xFF, 0xFF,     // 'n'(110)
    0x01, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'o'(111)
    0x04, 0x03, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'p'(112)
    0x01, 0x00, 0x02, 0x07, 0xFF, 0xFF, 0xFF, 0xFF,     // 'q'(113)
    0x01, 0x00, 0x04, 0x07, 0x0C, 0xFF, 0xFF, 0xFF,     // 'r'(114)
    0x00, 0x06, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 's'(115)
    0x01, 0x03, 0x0E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 't'(116)
    0x01, 0x03, 0x04, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'u'(117)
    0x01, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'v'(118)
    0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'w'(119)
    0x04, 0xFF, 0x05, 0x07, 0x08, 0xFF, 0xFF, 0xFF,     // 'x'(120)
    0x01, 0x02, 0x04, 0x03, 0x05, 0xFF, 0xFF, 0xFF,     // 'y'(121)
    0x00, 0x02, 0x05, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'z'(122)

    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '{'(123)
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '|'(124)
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '}'(125)
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '~'(126)

    0x02, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF      /* B.pound (127)*/
  };


// The table for Palmer DTE:

ROM_DATA _UCHAR PalmerVexMapTable[96][8] =
 {
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // ' '(32)

    0x01, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '!'(33)
    0x00, 0x01, 0x02, 0x03, 0xFF, 0xFF, 0xFF, 0xFF,     // '"'(34)
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '#'(35)
    0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '$'(36)
    0x02, 0x00, 0x05, 0x03, 0x07, 0xFF, 0xFF, 0xFF,     // '%'(37)
    0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '&'(38)
    0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '''(39)
    0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '('(40)
    0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // ')'(41)
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '*'(42)
    0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '+'(43)
    0x01, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // ','(44)
    0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '-'(45)
    0x01, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '.'(46)
    0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '/'(47)

    0x01, 0x00, 0x05, 0x03, 0x04, 0xFF, 0xFF, 0xFF,     // '0'(48)
    0x00, 0xFF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '1'(49)
    0x00, 0x01, 0x06, 0x04, 0x03, 0xFF, 0xFF, 0xFF,     // '2'(50)
    0x00, 0x01, 0xFF, 0x03, 0xFF, 0xFF, 0xFF, 0xFF,     // '3'(51)
    0x00, 0x02, 0x04, 0x06, 0x05, 0xFF, 0x08, 0x07,     // '4'(52)
    0x04, 0x00, 0x01, 0x03, 0x05, 0xFF, 0x02, 0xFF,     // '5'(53)
    0x00, 0x06, 0x05, 0x04, 0x03, 0x02, 0xFF, 0xFF,     // '6'(54)
    0x00, 0x03, 0x01, 0x04, 0x05, 0xFF, 0xFF, 0xFF,     // '7'(55)
    0x00, 0x04, 0xFF, 0x06, 0x05, 0x02, 0xFF, 0x08,     // '8'(56)
    0x00, 0x02, 0x01, 0xFF, 0x04, 0x06, 0xFF, 0xFF,     // '9'(57)

    0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // ':'(58)
    0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // ';'(59)
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '<'(60)
    0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '='(61)
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '>'(62)
    0x00, 0x01, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '?'(63)
    0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '@'(64)

    0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'A'(65)
    0x01, 0x00, 0x02, 0x03, 0xFF, 0xFF, 0xFF, 0xFF,     // 'B'(66)
    0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'C'(67)
    0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'D'(68)
    0x00, 0x04, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'E'(69)
    0x00, 0x01, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'F'(70)
    0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'G'(71)
    0x03, 0x06, 0x04, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'H'(72)
    0x01, 0x02, 0x05, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'I'(73)
    0x02, 0x06, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'J'(74)
    0x00, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'K'(75)
    0x00, 0xFF, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'L'(76)
    0x00, 0x01, 0x04, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'M'(77)
    0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'N'(78)
    0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'O'(79)
    0x00, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'P'(80)
    0x00, 0x02, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'Q'(81)
    0x00, 0x01, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'R'(82)
    0x01, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'S'(83)
    0x01, 0x00, 0x06, 0x03, 0xFF, 0xFF, 0xFF, 0xFF,     // 'T'(84)
    0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'U'(85)
    0x02, 0x04, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'V'(86)
    0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'W'(87)
    0x04, 0x02, 0x09, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'X'(88)
    0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'Y'(89)
    0x01, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'Z'(90)

    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '['(91)
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '\'(92)
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // ']'(93)
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '^'(94)
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '_'(95)
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '`'(96)

    0x01, 0x02, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'a'(97)
    0x02, 0x04, 0x06, 0x08, 0x09, 0xFF, 0xFF, 0xFF,     // 'b'(98)
    0x00, 0x01, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'c'(99)
    0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'd'(100)
    0x02, 0x04, 0x06, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'e'(101)
    0x01, 0x0A, 0x09, 0x0D, 0xFF, 0xFF, 0xFF, 0xFF,     // 'f'(102)
    0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'g'(103)
    0x05, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'h'(104)
    0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'i'(105)
    0x00, 0x05, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'j'(106)
    0x06, 0x02, 0x08, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'k'(107)
    0x00, 0x05, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'l'(108)
    0x00, 0x05, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'm'(109)
    0x00, 0x05, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'n'(110)
    0x00, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'o'(111)
    0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'p'(112)
    0x04, 0x06, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'q'(113)
    0x03, 0x06, 0x09, 0x07, 0x0B, 0xFF, 0xFF, 0xFF,     // 'r'(114)
    0x02, 0x05, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 's'(115)
    0x00, 0x02, 0x05, 0x07, 0x09, 0x0B, 0xFF, 0xFF,     // 't'(116)
    0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'u'(117)
    0x00, 0x04, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'v'(118)
    0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'w'(119)
    0x04, 0x05, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'x'(120)
    0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 'y'(121)
    0x01, 0x03, 0x06, 0x08, 0xFF, 0xFF, 0xFF, 0xFF,     // 'z'(122)

    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '{'(123)
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '|'(124)
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '}'(125)
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // '~'(126)

    0x02, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF      
  };

ROM_DATA _SHORT DefaultVexMapTableSize  = 96*8;
ROM_DATA _SHORT BlockVexMapTableSize    = 96*8;
ROM_DATA _SHORT PalmerVexMapTableSize   = 96*8;
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\paralibs.cpp ===
#define ParaLibs_j_c

#include "bastypes.h"
#include "hwr_sys.h"
#include "ams_mg.h"

#include "lowlevel.h"
#include "xrword.h"

//#include "postcalc.h" // Peg
//#include "dirdiacr.h" // Peg

#if PS_VOC
 #include "vocutilp.h"
#else
 #include "ParagraphDictionary.h"
#endif


#if  USE_POSTPROC     //Peg
 #include "postcalc.h"
 #include "dti.h"
 #include "dirdiacr.h"
 #include "postfunc.h"
#endif

//#if HWR_SYSTEM == HWR_WINDOWS //Peg
// #include "Reject.cpp"
//#else
// #include "Reject.c"
//#endif /* HWR_SYSTEM... */

#include "xr_attr.h"

// from CONVERT.C -----------------------------------------------------------------------
#ifdef FOR_GERMAN
  ROM_DATA  _UCHAR  penlDefX[XR_COUNT] =
                    { 0, 6, 4, 4, 2, 6, 4, 8, //_UU_f
                      8, 4, 4, 2, 4, 4, 8, 8, //_UUC_b
                      4, 4, 2, 4, 8, 8, 4, 4, //_UDR_b
                      2, 4, 4, 8, 8, 4, 4, 2, //_ID_BEG
                      8, 8, 2, 8, 8, 8, 8, 8, //_DDL
                     10, 6, 6,10, 2, 2, 8, 8, //")"
                      2, 2, 8, 8, 2, 10, 6, 0, //"|"
                      0, 4, 6, 6, 4, 4, 0, 0  //end
                    };
#else
  ROM_DATA  _UCHAR  penlDefX[XR_COUNT] =
                    { 0, 6, 4, 4, 2, 0, 4, 8, //_UU_f
                      8, 4, 4, 2, 4, 4, 8, 8, //_UUC_b
                      4, 4, 2, 4, 8, 8, 4, 4, //_UDR_b
                      2, 4, 4, 8, 8, 4, 4, 2, //_ID_BEG
                      8, 8, 2, 8, 8, 8, 8, 8, //_DDL
                     10, 6, 6,10, 4, 2, 6, 0, //")"
                      2, 4, 0, 0, 2,10, 6, 0, //"|"
                      0, 0, 6, 6, 4, 4, 0, 0  //end
                    };
#endif /* FOR_GERMAN */
  ROM_DATA  _UCHAR  penlDefH[XH_COUNT] =
                    {
                      0, 4, 4, 2, 0, 0, 0, 0,  //7
                      0, 0, 0, 2, 4, 4, 0, 0
                    };
// from Box.c ----------------------------------------------------------------------------
#if !defined(FOR_FRENCH) && !defined(FOR_GERMAN)
ROM_DATA _CHAR ascentedList[] = "bdhlt"; //was k
#else
ROM_DATA _CHAR ascentedList[] = "bdhklt";
#endif /* FOR_FRENCH ... */
#if defined(FOR_FRENCH)
ROM_DATA _CHAR descentedList[] = "gjpqyz\x8C";
#else
ROM_DATA _CHAR descentedList[] = "gjpqyz";
#endif /* FOR_FRENCH... */
#if defined (FOR_GERMAN) || defined (FOR_INTERNATIONAL)
ROM_DATA _CHAR adList[] = "f\x86";
#else  /* ! For_GERMAN  */
ROM_DATA _CHAR adList[] = "f";
#endif

#if   defined (FOR_GERMAN)
ROM_DATA _CHAR mboxList[]="aceimnorsuwvx\x81\x83\x85";
#elif defined (FOR_FRENCH)
ROM_DATA _CHAR mboxList[]="aceimnorsuwvx\x88\x8A\x8E\x90\x92\x94\x96\x98\x9A\x9C\x9D";
#elif defined (FOR_SWED)
ROM_DATA _CHAR mboxList[]="acemnorsuwvx\x81\x83\xA1";
#elif defined (FOR_INTERNATIONAL)
ROM_DATA _CHAR mboxList[]="aceimnorsuwvx\x81\x83\x85\x88\x8A\x8E\x90\x92\x94\x96\x98\x9A\x9C\x9D\xA1";
#else
ROM_DATA _CHAR mboxList[]="acemnorsuwvx";
#endif  /*  For_GERMAN  */
ROM_DATA _CHAR xrsToSkipInDidgits[]    = {X_FF, X_ZZZ, X_ZZ, X_Z, X_ZN, 0};

ROM_DATA _CHAR xrsToSkip[]    = {X_FF, X_ZZZ, X_ZZ, X_Z, X_ZN, X_ST,
                               X_XT_ST,
#if defined(FOR_GERMAN) || defined(FOR_FRENCH) || defined (FOR_SWED) || defined (FOR_INTERNATIONAL)
                               X_UMLAUT,
#endif /* FOR_GERMAN... */                               
#if defined(FOR_FRENCH)
                               X_CEDILLA,
#endif /* FOR_FRENCH... */
                               X_TS, X_TZ, 0};
ROM_DATA _CHAR xrsToSkipAsFirst[] =
                              { X_IU_F, X_UU_F, X_UUC_F, X_UUL_F, X_UUR_F, X_IU_BEG, X_IU_STK,
                                X_IU_B, X_UU_B, X_UUC_B, X_UUL_B, X_UUR_B, X_IU_END,
                                X_DU_R, X_CU_R, X_CU_L,  X_DU_L,
                                X_BGU , X_SGU ,
                                X_GL  , X_AL  ,
                                X_AR  , X_GR  ,0 };


#if   defined (FOR_GERMAN)
ROM_DATA _CHAR SpecCheckLetter[]="MmNnUuVvWw\x84\x85";
ROM_DATA _CHAR NonCheckLetter[]="KkTt";//"BbDdFfHhKkLlTt";
ROM_DATA _CHAR LetterWithoutDescendet[]="AaBbCcDdFHhIKkMmNnOoPQRTtUuVvWwXxZ\x80\x81\x82\x83\x84\x85"; // without Ss
ROM_DATA _CHAR UsuallyHigherLetter[] = "sSzZvV";
#elif defined (FOR_FRENCH)
ROM_DATA _CHAR SpecCheckLetter[]="\x00";//"MmNnUuVvWw";
ROM_DATA _CHAR NonCheckLetter[]="FfKkTtSs";//"BbDdFfHhKkLlTt";
ROM_DATA _CHAR LetterWithoutDescendet[]="AaBbCcDdFHhIKkMmNnOoPQRSsTtUuVvWwXxZ"
"\x87\x88\x89\x8A\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D";
ROM_DATA _CHAR UsuallyHigherLetter[] = "sSzZ";
#elif defined (FOR_SWED)
ROM_DATA _CHAR SpecCheckLetter[]="\x00";//"MmNnUuVvWw";
ROM_DATA _CHAR NonCheckLetter[]="FfKkTt";//"BbDdFfHhKkLlTt";
ROM_DATA _CHAR LetterWithoutDescendet[]="AaBbCcDdFHhIKkMmNnOoPQRSsTtUuVvWwXxZ\x80\x81\x82\x83\xA0\xA1";
ROM_DATA _CHAR UsuallyHigherLetter[] = "sSzZ";
#elif defined (FOR_INTERNATIONAL)
ROM_DATA _CHAR SpecCheckLetter[]="\x00";//"MmNnUuVvWw";
ROM_DATA _CHAR NonCheckLetter[]="FfKkTt";//"BbDdFfHhKkLlTt";
ROM_DATA _CHAR LetterWithoutDescendet[]="AaBbCcDdFHhIKkMmNnOoPQRSsTtUuVvWwXxZ"
"\x80\x81\x82\x83\x84\x85\x87\x88\x89\x8A\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\xA0\xA1";
ROM_DATA _CHAR UsuallyHigherLetter[] = "sSzZ";
#else
ROM_DATA _CHAR SpecCheckLetter[]="\x00";//"MmNnUuVvWw";
ROM_DATA _CHAR NonCheckLetter[]="FfKkTt";//"BbDdFfHhKkLlTt";
ROM_DATA _CHAR LetterWithoutDescendet[]="AaBbCcDdFHhIKkMmNnOoPQRSsTtUuVvWwXxZ";
ROM_DATA _CHAR UsuallyHigherLetter[] = "sSzZ";
#endif  /*  For_GERMAN  */
//--------------------------------------------------------------------------------------


#if USE_POSTPROC

// from pdf_file.c
ROM_DATA _UCHAR pdfMaskArray[8] = { 0x80, 0x40, 0x20, 0x10,
                                  0x08, 0x04, 0x02, 0x01};


// from Postcalc.c ------------------------------------------------------------------
ROM_DATA int globalSizeArray[16] = { GLOBAL_END_SIZE,
                               UNEXTENDED_FIELD_SIZE,
                               LOCAL_END_SIZE,
                               NUMBER_SIZE,
                               OPERATION_SIZE,
                               FUNCTION_SIZE,
                               PLACEHOLDER_SIZE,
                               ARGUMENT_SIZE,
                               Z_GLOBAL_END_SIZE,
                               Z_NUMBER_SIZE,
                               Z_SHORT_SIZE,
                               Z_CHAR_SIZE,
                               Z_OPERATION_SIZE,
                               Z_FUNCTION_SIZE,
                               Z_SHORT_FUNCTION_SIZE,
                               Z_ARGUMENT_SIZE};

ROM_DATA _UCHAR NonCheckChars[]=
#ifdef FOR_GERMAN
    "lLtTkK";
#else
    "lLtTfF";
#endif

  ROM_DATA _UCHAR         xrPoint[]  = { X_ST,
#if defined (FOR_GERMAN) || defined (FOR_FRENCH) || defined (FOR_SWED) || defined (FOR_INTERNATIONAL)
                                        X_UMLAUT,
#endif
                                        0
                                      };
  ROM_DATA _CHAR          szPtLet[]  = { 'i', 'j',
                                       ';', ':', '\"', '\'',   /* GIT - add punctuation */
                                     #if defined (FOR_GERMAN) || defined (FOR_SWED) || defined (FOR_INTERNATIONAL)
                                       REC_U_umlaut, REC_u_umlaut,
                                     #endif
                                     #if defined (FOR_GERMAN) || defined (FOR_SWED) || defined (FOR_INTERNATIONAL)
                                       REC_A_umlaut, REC_a_umlaut,
                                       REC_O_umlaut, REC_o_umlaut,
                                     #endif
                                     #if defined (FOR_SWED) || defined (FOR_INTERNATIONAL)
                                       REC_A_angstrem, REC_a_angstrem,
                                     #endif
                                     #if defined (FOR_FRENCH) || defined (FOR_SWED) || defined (FOR_INTERNATIONAL)
                                     REC_A_grave         ,REC_a_grave         ,
                                     REC_A_circumflex    ,REC_a_circumflex    ,
                                     REC_E_grave         ,REC_e_grave         ,
                                     REC_E_acute         ,REC_e_acute         ,
                                     REC_E_circumflex    ,REC_e_circumflex    ,
                                     REC_I_circumflex    ,REC_i_circumflex    ,
                                     REC_I_umlaut        ,REC_i_umlaut        ,
                                     REC_O_circumflex    ,REC_o_circumflex    ,
                                     REC_U_grave         ,REC_u_grave         ,
                                     REC_U_circumflex    ,REC_u_circumflex    ,
                                     REC_N_numero        ,REC_n_numero        ,
                                     REC_e_umlaut        ,
                                     #endif
                                       0
                                     };

  ROM_DATA _CHAR         szPtLet2[]  = {
                                         '\"',
                                       #if defined (FOR_GERMAN) || defined (FOR_SWED) || defined (FOR_INTERNATIONAL)
                                         REC_U_umlaut, REC_u_umlaut,
                                       #endif
                                       #if defined (FOR_GERMAN) || defined (FOR_SWED) || defined (FOR_INTERNATIONAL)
                                         REC_A_umlaut, REC_a_umlaut,
                                         REC_O_umlaut, REC_o_umlaut,
                                       #endif
                                       #if defined (FOR_FRENCH) || defined (FOR_SWED) || defined (FOR_INTERNATIONAL)
                                         REC_I_umlaut        ,REC_i_umlaut        ,
                                         REC_e_umlaut        ,
                                       #endif
                                         0
                                       };

  ROM_DATA _UCHAR         xrGam[]     = { X_BGD, 0 };
  ROM_DATA _CHAR          szGam[]     = { 'J', 'Y', 'Z', 'f', 'g',
                                        'j', 'p', 'y', 'z',
                                      #ifdef  FOR_GERMAN
                                        REC_ESZET,'t','q','Q','G',
                                      #endif
                                      #if defined (FOR_INTERNATIONAL)
                                        REC_ESZET,
                                      #endif
                                        0
                                      };

  ROM_DATA _UCHAR         xrPtLike[]  = { X_ST, X_XT_ST,
#if defined (FOR_GERMAN) || defined (FOR_FRENCH) || defined (FOR_SWED) || defined (FOR_INTERNATIONAL)
                                          X_UMLAUT,
#endif
                                          0
                                        };
  ROM_DATA _UCHAR         xrDisablePtLike[] = { X_XT, 0 };
  ROM_DATA _CHAR          szPtLike[] = { 'i', 'j',
                                       ';', ':',
                                     #if defined (FOR_GERMAN) || defined (FOR_SWED) || defined (FOR_INTERNATIONAL)
                                       REC_U_umlaut, REC_u_umlaut,
                                     #endif
                                     #if defined (FOR_GERMAN) || defined (FOR_SWED) || defined (FOR_INTERNATIONAL)
                                       REC_A_umlaut, REC_a_umlaut,
                                       REC_O_umlaut, REC_o_umlaut,
                                     #endif
                                     #if defined (FOR_SWED) || defined (FOR_INTERNATIONAL)
                                       REC_A_angstrem, REC_a_angstrem,
                                     #endif
                                     #if defined (FOR_FRENCH) || defined (FOR_SWED) || defined (FOR_INTERNATIONAL)
                                     REC_A_grave         ,REC_a_grave         ,
                                     REC_A_circumflex    ,REC_a_circumflex    ,
                                     REC_E_grave         ,REC_e_grave         ,
                                     REC_E_acute         ,REC_e_acute         ,
                                     REC_E_circumflex    ,REC_e_circumflex    ,
                                     REC_I_circumflex    ,REC_i_circumflex    ,
                                     REC_I_umlaut        ,REC_i_umlaut        ,
                                     REC_O_circumflex    ,REC_o_circumflex    ,
                                     REC_U_grave         ,REC_u_grave         ,
                                     REC_U_circumflex    ,REC_u_circumflex    ,
                                     REC_N_numero        ,REC_n_numero        ,
                                     REC_e_umlaut        ,
                                     #endif
                                       0
                                     };
#endif // #if USE_POSTPROC

/* ----------------------------------------------------------------------------- */
/* ------------ Utilities constants -------------------------------------------- */


# if PS_VOC
ROM_DATA  _UCHAR ldb_sym_set[] = {"x0123456789/().,$&@#%-\0xa3"};
#endif
ROM_DATA _UCHAR triads_mapping[256] = DEF_TRIADS_MAPPING;

/* from DTI_util.C */
/* ----------------------------------------------------------------------------- */
/* - Here are conversion tables for the OSToRec function in dti_util.cpp       - */
/* - Symbol locations is based on Windows extended code table                  - */
/* ----------------------------------------------------------------------------- */

#ifdef FOR_ENGLISH

#if DTI_COMPRESSED // Temp while compressed DTI does not have all sybols -- Select of redirect to normal characters or to expanded FOR_INTERNATIONAL set

ROM_DATA _UCHAR os_rec_conv_tbl[128] =
              {                    // **** 0x80 ****
         REC_euro_currency,        // 128 -
               0,                  // 129 -
               0,                  // 130 -
               0,                  // 131 -
               0,                  // 132 -
               0,                  // 133 -
               0,                  // 134 -
               0,                  // 135 -
               0,                  // 136 -
               0,                  // 137 -
             'S',                  // 138 -
               0,                  // 139 -
               0,                  // 140 - OS_OE_letter       ((unsigned char)0x8c)
               0,                  // 141 -
               0,                  // 142 -
               0,                  // 143 -
                                   // **** 0x90 ****
               0,                  // 144 -
               0,                  // 145 -
               0,                  // 146 -
               0,                  // 147 -
               0,                  // 148 -
               0,                  // 149 -
               0,                  // 150 -
               0,                  // 151 -
               0,                  // 152 -
               0,                  // 153 -
             's',                  // 154 -
               0,                  // 155 -
               0,                  // 156 - OS_oe_letter       ((unsigned char)0x9c)
               0,                  // 157 -
               0,                  // 158 -
             'Y',                  // 159 - OS_Y_umlaut        ((unsigned char)0x9f)
                                   // **** 0xA0 ****
               0,                  // 160 -
             '!',                  // 161 - OS_Exclamation_inv ((unsigned char)0xa1)
               0,                  // 162 -
      REC_BritishPound,            // 163 - OS_BritishPound    ((unsigned char)0xa3)
               0,                  // 164 -
        REC_Yenn_sign,             // 165 - OS_Yenn_sign       ((unsigned char)0xa5)
               0,                  // 166 -
               0,                  // 167 -
               0,                  // 168 -
     REC_Copyright_sign,           // 169 - OS_Copyright_sign  ((unsigned char)0xa9)
               0,                  // 170 -
               0,                  // 171 - OS_DblBrace_left   ((unsigned char)0xab)
               0,                  // 172 -
               0,                  // 173 -
     REC_TradeName_sign,           // 174 - OS_TradeName_sign  ((unsigned char)0xae)
               0,                  // 175 -
                                   // **** 0xB0 ****
               0,                  // 176 -
               0,                  // 177 -
               0,                  // 178 -
               0,                  // 179 -
               0,                  // 180 -
               0,                  // 181 -
               0,                  // 182 -
               0,                  // 183 -
               0,                  // 184 -
               0,                  // 185 -
               0,                  // 186 -
               0,                  // 187 - OS_DblBrace_right  ((unsigned char)0xbb)
               0,                  // 188 -
               0,                  // 189 -
               0,                  // 190 -
             '?',                  // 191 - OS_Question_inv    ((unsigned char)0xbf)
                                   // **** 0xC0 ****
             'A',                  // 192 - OS_A_grave         ((unsigned char)0xc0)
             'A',                  // 193 - OS_A_acute         ((unsigned char)0xc1)
             'A',                  // 194 - OS_A_circumflex    ((unsigned char)0xc2)
             'A',                  // 195 - OS_A_tilda         ((unsigned char)0xc3)
             'A',                  // 196 - OS_A_umlaut        ((unsigned char)0xc4)
             'A',                  // 197 - OS_A_angstrem      ((unsigned char)0xc5)
             'E',                  // 198 - OS_AE_letter       ((unsigned char)0xc6)
             'C',                  // 199 - OS_C_cedilla       ((unsigned char)0xc7)
             'E',                  // 200 - OS_E_grave         ((unsigned char)0xc8)
             'E',                  // 201 - OS_E_acute         ((unsigned char)0xc9)
             'E',                  // 202 - OS_E_circumflex    ((unsigned char)0xca)
             'E',                  // 203 - OS_E_umlaut        ((unsigned char)0xcb)
             'I',                  // 204 - OS_I_grave         ((unsigned char)0xcc)
             'I',                  // 205 - OS_I_acute         ((unsigned char)0xcd)
             'I',                  // 206 - OS_I_circumflex    ((unsigned char)0xce)
             'I',                  // 207 - OS_I_umlaut        ((unsigned char)0xcf)
                                   // **** 0xD0 ****
             'D',                  // 208 - OS_Delta           ((unsigned char)0xd0)
             'N',                  // 209 - OS_N_tilda         ((unsigned char)0xd1)
             'O',                  // 210 - OS_O_grave         ((unsigned char)0xd2)
             'O',                  // 211 - OS_O_acute         ((unsigned char)0xd3)
             'O',                  // 212 - OS_O_circumflex    ((unsigned char)0xd4)
             'O',                  // 213 - OS_O_tilda         ((unsigned char)0xd5)
             'O',                  // 214 - OS_O_umlaut        ((unsigned char)0xd6)
             'x',                  // 215 - OS_MUL_sign        ((unsigned char)215)
             '0',                  // 216 - OS_O_crossed       ((unsigned char)216)
             'U',                  // 217 - OS_U_grave         ((unsigned char)0xd9)
             'U',                  // 218 - OS_U_acute         ((unsigned char)0xda)
             'U',                  // 219 - OS_U_circumflex    ((unsigned char)0xdb)
             'U',                  // 220 - OS_U_umlaut        ((unsigned char)0xdc)
             'Y',                  // 221 - OS_Y_acute         ((unsigned char)221)
               0,                  // 222 -
             'B',                  // 223 - OS_ESZET           ((unsigned char)0xdf)
                                   // **** 0xE0 ****
             'a',                  // 224 - OS_a_grave         ((unsigned char)0xe0)
             'a',                  // 225 - OS_a_acute         ((unsigned char)0xe1)
             'a',                  // 226 - OS_a_circumflex    ((unsigned char)0xe2)
             'a',                  // 227 - OS_a_tilda         ((unsigned char)0xe3)
             'a',                  // 228 - OS_a_umlaut        ((unsigned char)0xe4)
             'a',                  // 229 - OS_a_angstrem      ((unsigned char)0xe5)
             'n',                  // 230 - OS_ae_letter       ((unsigned char)0xe6)
             'c',                  // 231 - OS_c_cedilla       ((unsigned char)0xe7)
             'e',                  // 232 - OS_e_grave         ((unsigned char)0xe8)
             'e',                  // 233 - OS_e_acute         ((unsigned char)0xe9)
             'e',                  // 234 - OS_e_circumflex    ((unsigned char)0xea)
             'e',                  // 235 - OS_e_umlaut        ((unsigned char)0xeb)
             'i',                  // 236 - OS_i_grave         ((unsigned char)0xec)
             'i',                  // 237 - OS_i_acute         ((unsigned char)0xed)
             'i',                  // 238 - OS_i_circumflex    ((unsigned char)0xee)
             'i',                  // 239 - OS_i_umlaut        ((unsigned char)0xef)
                                   // **** 0xF0 ****
             'd',                  // 240 - OS_delta           ((unsigned char)0xf0)
             'n',                  // 241 - OS_n_tilda         ((unsigned char)0xf1)
             'o',                  // 242 - OS_o_grave         ((unsigned char)0xf2)
             'o',                  // 243 - OS_o_acute         ((unsigned char)0xf3)
             'o',                  // 244 - OS_o_circumflex    ((unsigned char)0xf4)
             'o',                  // 245 - OS_o_tilda         ((unsigned char)0xf5)
             'o',                  // 246 - OS_o_umlaut        ((unsigned char)0xf6)
        REC_DIV_sign,              // 247 - OS_DIV_sign        ((unsigned char)247)
             '0',                  // 248 - OS_o_crossed       ((unsigned char)248)
             'u',                  // 249 - OS_u_grave         ((unsigned char)0xf9)
             'u',                  // 250 - OS_u_acute         ((unsigned char)0xfa)
             'u',                  // 251 - OS_u_circumflex    ((unsigned char)0xfb)
             'u',                  // 252 - OS_u_umlaut        ((unsigned char)0xfc)
             'y',                  // 253 - OS_y_acute         ((unsigned char)253)
               0,                  // 254 -
             'y'                   // 255 - OS_y_umlaut        ((unsigned char)0xff)
              };

#else // ! DTI_COMPRESSED

ROM_DATA _UCHAR os_rec_conv_tbl[128] =
              {                    // **** 0x80 ****
        REC_euro_currency,	       // 128 -
               0,                  // 129 -
               0,                  // 130 -
               0,                  // 131 -
               0,                  // 132 -
               0,                  // 133 -
               0,                  // 134 -
               0,                  // 135 -
               0,                  // 136 -
               0,                  // 137 -
             'S',                  // 138 -
               0,                  // 139 -
         REC_OE_letter,            // 140 - OS_OE_letter       ((unsigned char)0x8c)
               0,                  // 141 -
               0,                  // 142 -
               0,                  // 143 -
                                   // **** 0x90 ****
               0,                  // 144 -
               0,                  // 145 -
               0,                  // 146 -
               0,                  // 147 -
               0,                  // 148 -
               0,                  // 149 -
               0,                  // 150 -
               0,                  // 151 -
               0,                  // 152 -
               0,                  // 153 -
              's',                 // 154 -
               0,                  // 155 -
         REC_oe_letter,            // 156 - OS_oe_letter       ((unsigned char)0x9c)
               0,                  // 157 -
               0,                  // 158 -
              'Y',                 // 159 - OS_Y_umlaut        ((unsigned char)0x9f)
                                   // **** 0xA0 ****
               0,                  // 160 -
              '|',                 // 161 - OS_Exclamation_inv ((unsigned char)0xa1)
               0,                  // 162 -
       REC_BritishPound,           // 163 - OS_BritishPound    ((unsigned char)0xa3)
               0,                  // 164 -
         REC_Yenn_sign,            // 165 - OS_Yenn_sign       ((unsigned char)0xa5)
               0,                  // 166 -
               0,                  // 167 -
               0,                  // 168 -
      REC_Copyright_sign,          // 169 - OS_Copyright_sign  ((unsigned char)0xa9)
               0,                  // 170 -
      REC_DblBrace_left,           // 171 - OS_DblBrace_left   ((unsigned char)0xab)
               0,                  // 172 -
               0,                  // 173 -
      REC_TradeName_sign,          // 174 - OS_TradeName_sign  ((unsigned char)0xae)
               0,                  // 175 -
                                   // **** 0xB0 ****
               0,                  // 176 -
               0,                  // 177 -
               0,                  // 178 -
               0,                  // 179 -
               0,                  // 180 -
               0,                  // 181 -
               0,                  // 182 -
               0,                  // 183 -
               0,                  // 184 -
               0,                  // 185 -
               0,                  // 186 -
      REC_DblBrace_right,          // 187 - OS_DblBrace_right  ((unsigned char)0xbb)
               0,                  // 188 -
               0,                  // 189 -
               0,                  // 190 -
              'j',                 // 191 - OS_Question_inv    ((unsigned char)0xbf)
                                   // **** 0xC0 ****
          REC_A_grave,             // 192 - OS_A_grave         ((unsigned char)0xc0)
          REC_A_umlaut,            // 193 - OS_A_acute         ((unsigned char)0xc1)
        REC_A_circumflex,          // 194 - OS_A_circumflex    ((unsigned char)0xc2)
          REC_A_umlaut,            // 195 - OS_A_tilda         ((unsigned char)0xc3)
          REC_A_umlaut,            // 196 - OS_A_umlaut        ((unsigned char)0xc4)
         REC_A_angstrem,           // 197 - OS_A_angstrem      ((unsigned char)0xc5)
         REC_OE_letter,            // 198 - OS_AE_letter       ((unsigned char)0xc6)
         REC_C_cedilla,            // 199 - OS_C_cedilla       ((unsigned char)0xc7)
          REC_E_grave,             // 200 - OS_E_grave         ((unsigned char)0xc8)
          REC_E_acute,             // 201 - OS_E_acute         ((unsigned char)0xc9)
        REC_E_circumflex,          // 202 - OS_E_circumflex    ((unsigned char)0xca)
          REC_E_umlaut,            // 203 - OS_E_umlaut        ((unsigned char)0xcb)
          REC_I_umlaut,            // 204 - OS_I_grave         ((unsigned char)0xcc)
          REC_I_umlaut,            // 205 - OS_I_acute         ((unsigned char)0xcd)
        REC_I_circumflex,          // 206 - OS_I_circumflex    ((unsigned char)0xce)
          REC_I_umlaut,            // 207 - OS_I_umlaut        ((unsigned char)0xcf)
                                   // **** 0xD0 ****
             'D',                  // 208 - OS_Delta           ((unsigned char)0xd0)
          REC_N_tilda,             // 209 - OS_N_tilda         ((unsigned char)0xd1)
          REC_O_umlaut,            // 210 - OS_O_grave         ((unsigned char)0xd2)
          REC_O_umlaut,            // 211 - OS_O_acute         ((unsigned char)0xd3)
        REC_O_circumflex,          // 212 - OS_O_circumflex    ((unsigned char)0xd4)
          REC_O_umlaut,            // 213 - OS_O_tilda         ((unsigned char)0xd5)
          REC_O_umlaut,            // 214 - OS_O_umlaut        ((unsigned char)0xd6)
             'x',                  // 215 - OS_MUL_sign        ((unsigned char)215)
             '0',                  // 216 - OS_O_crossed       ((unsigned char)216)
           REC_U_grave,            // 217 - OS_U_grave         ((unsigned char)0xd9)
           REC_U_umlaut,           // 218 - OS_U_acute         ((unsigned char)0xda)
         REC_U_circumflex,         // 219 - OS_U_circumflex    ((unsigned char)0xdb)
           REC_U_umlaut,           // 220 - OS_U_umlaut        ((unsigned char)0xdc)
             'Y',                  // 221 - OS_Y_acute         ((unsigned char)221)
               0,                  // 222 -
            REC_ESZET,             // 223 - OS_ESZET           ((unsigned char)0xdf)
                                   // **** 0xE0 ****
           REC_a_grave,            // 224 - OS_a_grave         ((unsigned char)0xe0)
           REC_a_umlaut,           // 225 - OS_a_acute         ((unsigned char)0xe1)
        REC_a_circumflex,          // 226 - OS_a_circumflex    ((unsigned char)0xe2)
           REC_a_umlaut,           // 227 - OS_a_tilda         ((unsigned char)0xe3)
           REC_a_umlaut,           // 228 - OS_a_umlaut        ((unsigned char)0xe4)
          REC_a_angstrem,          // 229 - OS_a_angstrem      ((unsigned char)0xe5)
          REC_oe_letter,           // 230 - OS_ae_letter       ((unsigned char)0xe6)
          REC_c_cedilla,           // 231 - OS_c_cedilla       ((unsigned char)0xe7)
           REC_e_grave,            // 232 - OS_e_grave         ((unsigned char)0xe8)
           REC_e_acute,            // 233 - OS_e_acute         ((unsigned char)0xe9)
        REC_e_circumflex,          // 234 - OS_e_circumflex    ((unsigned char)0xea)
          REC_e_umlaut,            // 235 - OS_e_umlaut        ((unsigned char)0xeb)
           REC_i_umlaut,           // 236 - OS_i_grave         ((unsigned char)0xec)
           REC_i_umlaut,           // 237 - OS_i_acute         ((unsigned char)0xed)
        REC_i_circumflex,          // 238 - OS_i_circumflex    ((unsigned char)0xee)
          REC_i_umlaut,            // 239 - OS_i_umlaut        ((unsigned char)0xef)
                                   // **** 0xF0 ****
               0,                  // 240 -
          REC_n_tilda,             // 241 - OS_n_tilda         ((unsigned char)0xf1)
          REC_o_umlaut,            // 242 - OS_o_grave         ((unsigned char)0xf2)
          REC_o_umlaut,            // 243 - OS_o_acute         ((unsigned char)0xf3)
        REC_o_circumflex,          // 244 - OS_o_circumflex    ((unsigned char)0xf4)
          REC_o_umlaut,            // 245 - OS_o_tilda         ((unsigned char)0xf5)
          REC_o_umlaut,            // 246 - OS_o_umlaut        ((unsigned char)0xf6)
          REC_DIV_sign,            // 247 - OS_DIV_sign        ((unsigned char)247)
             '0',                  // 248 - OS_o_crossed       ((unsigned char)248)
           REC_u_grave,            // 249 - OS_u_grave         ((unsigned char)0xf9)
           REC_u_umlaut,           // 250 - OS_u_acute         ((unsigned char)0xfa)
        REC_u_circumflex,          // 251 - OS_u_circumflex    ((unsigned char)0xfb)
          REC_u_umlaut,            // 252 - OS_u_umlaut        ((unsigned char)0xfc)
             'y',                  // 253 - OS_y_acute         ((unsigned char)253)
               0,                  // 254 -
             'y'                   // 255 - OS_y_umlaut        ((unsigned char)0xff)
              };
#endif // DTI_COMPRESSED

#endif // Strait coding for English

#if defined (FOR_SWED)

ROM_DATA _UCHAR os_rec_ctbl[CONV_TBL_SIZE][2]=
              {
               {OS_BritishPound    ,REC_BritishPound},
               {OS_A_umlaut        ,REC_A_umlaut},
               {OS_a_umlaut        ,REC_a_umlaut},
               {OS_O_umlaut        ,REC_O_umlaut},
               {OS_o_umlaut        ,REC_o_umlaut},
               {OS_U_umlaut        ,'U'},
               {OS_u_umlaut        ,'u'},
               {OS_ESZET           ,REC_ESZET},
               {OS_A_grave         ,'A'},
               {OS_a_grave         ,'a'},
               {OS_A_circumflex    ,'A'},
               {OS_a_circumflex    ,'a'},
               {OS_C_cedilla       ,'C'},
               {OS_c_cedilla       ,'c'},
               {OS_E_grave         ,'E'},
               {OS_e_grave         ,'e'},
               {OS_E_acute         ,'E'},
               {OS_e_acute         ,'e'},
               {OS_E_circumflex    ,'E'},
               {OS_e_circumflex    ,'e'},
               {OS_I_circumflex    ,'I'},
               {OS_i_circumflex    ,'i'},
               {OS_I_umlaut        ,'I'},
               {OS_i_umlaut        ,'i'},
               {OS_O_circumflex    ,'O'},
               {OS_o_circumflex    ,'o'},
               {OS_U_grave         ,'U'},
               {OS_u_grave         ,'u'},
               {OS_U_circumflex    ,'U'},
               {OS_u_circumflex    ,'u'},
               {OS_e_umlaut        ,'e'},
               {OS_N_numero        ,REC_N_numero},
               {OS_n_numero        ,REC_n_numero},
               {OS_A_angstrem      ,REC_A_angstrem},
               {OS_a_angstrem      ,REC_a_angstrem},
               {OS_Yenn_sign       ,REC_Yenn_sign },
               {OS_DblBrace_left   ,REC_DblBrace_left},
               {OS_DblBrace_right  ,REC_DblBrace_right},
               {OS_Copyright_sign  ,REC_Copyright_sign},
               {OS_Y_umlaut        ,'Y'},
               {OS_y_umlaut        ,'y'},
               {OS_N_tilda         ,'N'},
               {OS_n_tilda         ,'n'},
               {OS_TradeName_sign  ,REC_TradeName_sign},
               {OS_Question_inv    ,REC_Question_inv},
               {OS_Exclamation_inv ,REC_Exclamation_inv},
               {OS_A_acute         ,'A'},
               {OS_a_acute         ,'a'},
               {OS_I_acute         ,'I'},
               {OS_i_acute         ,'i'},
               {OS_I_grave         ,'I'},
               {OS_i_grave         ,'i'},
               {OS_O_acute         ,'O'},
               {OS_o_acute         ,'o'},
               {OS_O_grave         ,'O'},
               {OS_o_grave         ,'o'},
               {OS_U_acute         ,'U'},
               {OS_u_acute         ,'u'},
               {OS_A_tilda         ,'A'},
               {OS_a_tilda         ,'a'},
               {OS_O_tilda         ,'O'},
               {OS_o_tilda         ,'o'},
               {OS_E_umlaut        ,'E'},
               {OS_oe_letter       ,REC_oe_letter},
               {OS_OE_letter       ,REC_OE_letter},
               {OS_MUL_sign        ,'x'},
               {OS_DIV_sign        ,':'},
               {OS_O_crossed       ,'0'},
               {OS_o_crossed       ,'0'},
               {0                  ,0},
               {0                  ,0},
               {0                  ,0}
              };

#endif // ForSwed

#if defined (FOR_GERMAN) || defined (FOR_FRENCH) || defined (FOR_INTERNATIONAL)

#if 0 // Temp until DTI have all symbols defined

ROM_DATA _UCHAR os_rec_conv_tbl[128] =
              {                    // **** 0x80 ****
      REC_euro_currency,           // 128 -
               0,                  // 129 -
               0,                  // 130 -
               0,                  // 131 -
               0,                  // 132 -
               0,                  // 133 -
               0,                  // 134 -
               0,                  // 135 -
               0,                  // 136 -
               0,                  // 137 -
              'S',                 // 138 -
               0,                  // 139 -
         REC_OE_letter,            // 140 - OS_OE_letter       ((unsigned char)0x8c)
               0,                  // 141 -
               0,                  // 142 -
               0,                  // 143 -
                                   // **** 0x90 ****
               0,                  // 144 -
               0,                  // 145 -
               0,                  // 146 -
               0,                  // 147 -
               0,                  // 148 -
               0,                  // 149 -
               0,                  // 150 -
               0,                  // 151 -
               0,                  // 152 -
               0,                  // 153 -
              's',                 // 154 -
               0,                  // 155 -
         REC_oe_letter,            // 156 - OS_oe_letter       ((unsigned char)0x9c)
               0,                  // 157 -
               0,                  // 158 -
         REC_Y_umlaut,             // 159 - OS_Y_umlaut        ((unsigned char)0x9f)
                                   // **** 0xA0 ****
               0,                  // 160 -
     REC_Exclamation_inv,          // 161 - OS_Exclamation_inv ((unsigned char)0xa1)
               0,                  // 162 -
       REC_BritishPound,           // 163 - OS_BritishPound    ((unsigned char)0xa3)
               0,                  // 164 -
         REC_Yenn_sign,            // 165 - OS_Yenn_sign       ((unsigned char)0xa5)
               0,                  // 166 -
               0,                  // 167 -
               0,                  // 168 -
      REC_Copyright_sign,          // 169 - OS_Copyright_sign  ((unsigned char)0xa9)
               0,                  // 170 -
      REC_DblBrace_left,           // 171 - OS_DblBrace_left   ((unsigned char)0xab)
               0,                  // 172 -
               0,                  // 173 -
      REC_TradeName_sign,          // 174 - OS_TradeName_sign  ((unsigned char)0xae)
               0,                  // 175 -
                                   // **** 0xB0 ****
               0,                  // 176 -
               0,                  // 177 -
               0,                  // 178 -
               0,                  // 179 -
               0,                  // 180 -
               0,                  // 181 -
               0,                  // 182 -
               0,                  // 183 -
               0,                  // 184 -
               0,                  // 185 -
               0,                  // 186 -
      REC_DblBrace_right,          // 187 - OS_DblBrace_right  ((unsigned char)0xbb)
               0,                  // 188 -
               0,                  // 189 -
               0,                  // 190 -
        REC_Question_inv,          // 191 - OS_Question_inv    ((unsigned char)0xbf)
                                   // **** 0xC0 ****
          REC_A_grave,             // 192 - OS_A_grave         ((unsigned char)0xc0)
          REC_A_acute,             // 193 - OS_A_acute         ((unsigned char)0xc1)
        REC_A_circumflex,          // 194 - OS_A_circumflex    ((unsigned char)0xc2)
          REC_A_tilda,             // 195 - OS_A_tilda         ((unsigned char)0xc3)
          REC_A_umlaut,            // 196 - OS_A_umlaut        ((unsigned char)0xc4)
         REC_A_angstrem,           // 197 - OS_A_angstrem      ((unsigned char)0xc5)
               0,                  // 198 -
         REC_C_cedilla,            // 199 - OS_C_cedilla       ((unsigned char)0xc7)
          REC_E_grave,             // 200 - OS_E_grave         ((unsigned char)0xc8)
          REC_E_acute,             // 201 - OS_E_acute         ((unsigned char)0xc9)
        REC_E_circumflex,          // 202 - OS_E_circumflex    ((unsigned char)0xca)
          REC_E_umlaut,            // 203 - OS_E_umlaut        ((unsigned char)0xcb)
          REC_I_grave,             // 204 - OS_I_grave         ((unsigned char)0xcc)
          REC_I_acute,             // 205 - OS_I_acute         ((unsigned char)0xcd)
        REC_I_circumflex,          // 206 - OS_I_circumflex    ((unsigned char)0xce)
          REC_I_umlaut,            // 207 - OS_I_umlaut        ((unsigned char)0xcf)
                                   // **** 0xD0 ****
               0,                  // 208 -
          REC_N_tilda,             // 209 - OS_N_tilda         ((unsigned char)0xd1)
          REC_O_grave,             // 210 - OS_O_grave         ((unsigned char)0xd2)
          REC_O_acute,             // 211 - OS_O_acute         ((unsigned char)0xd3)
        REC_O_circumflex,          // 212 - OS_O_circumflex    ((unsigned char)0xd4)
          REC_O_tilda,             // 213 - OS_O_tilda         ((unsigned char)0xd5)
          REC_O_umlaut,            // 214 - OS_O_umlaut        ((unsigned char)0xd6)
             'x',                  // 215 - OS_MUL_sign        ((unsigned char)215)
             '0',                  // 216 - OS_O_crossed       ((unsigned char)216)
           REC_U_grave,            // 217 - OS_U_grave         ((unsigned char)0xd9)
           REC_U_acute,            // 218 - OS_U_acute         ((unsigned char)0xda)
         REC_U_circumflex,         // 219 - OS_U_circumflex    ((unsigned char)0xdb)
           REC_U_umlaut,           // 220 - OS_U_umlaut        ((unsigned char)0xdc)
           'Y', /*REC_Y_acute,*/            // 221 - OS_Y_acute         ((unsigned char)221)
               0,                  // 222 -
            REC_ESZET,             // 223 - OS_ESZET           ((unsigned char)0xdf)
                                   // **** 0xE0 ****
           REC_a_grave,            // 224 - OS_a_grave         ((unsigned char)0xe0)
           REC_a_acute,            // 225 - OS_a_acute         ((unsigned char)0xe1)
        REC_a_circumflex,          // 226 - OS_a_circumflex    ((unsigned char)0xe2)
           REC_a_tilda,            // 227 - OS_a_tilda         ((unsigned char)0xe3)
           REC_a_umlaut,           // 228 - OS_a_umlaut        ((unsigned char)0xe4)
          REC_a_angstrem,          // 229 - OS_a_angstrem      ((unsigned char)0xe5)
               0,                  // 230 -
          REC_c_cedilla,           // 231 - OS_c_cedilla       ((unsigned char)0xe7)
           REC_e_grave,            // 232 - OS_e_grave         ((unsigned char)0xe8)
           REC_e_acute,            // 233 - OS_e_acute         ((unsigned char)0xe9)
        REC_e_circumflex,          // 234 - OS_e_circumflex    ((unsigned char)0xea)
          REC_e_umlaut,            // 235 - OS_e_umlaut        ((unsigned char)0xeb)
           REC_i_grave,            // 236 - OS_i_grave         ((unsigned char)0xec)
           REC_i_acute,            // 237 - OS_i_acute         ((unsigned char)0xed)
        REC_i_circumflex,          // 238 - OS_i_circumflex    ((unsigned char)0xee)
          REC_i_umlaut,            // 239 - OS_i_umlaut        ((unsigned char)0xef)
                                   // **** 0xF0 ****
               0,                  // 240 -
          REC_n_tilda,             // 241 - OS_n_tilda         ((unsigned char)0xf1)
          REC_o_grave,             // 242 - OS_o_grave         ((unsigned char)0xf2)
          REC_o_acute,             // 243 - OS_o_acute         ((unsigned char)0xf3)
        REC_o_circumflex,          // 244 - OS_o_circumflex    ((unsigned char)0xf4)
          REC_o_tilda,             // 245 - OS_o_tilda         ((unsigned char)0xf5)
          REC_o_umlaut,            // 246 - OS_o_umlaut        ((unsigned char)0xf6)
          REC_DIV_sign,            // 247 - OS_DIV_sign        ((unsigned char)247)
             '0',                  // 248 - OS_o_crossed       ((unsigned char)248)
           REC_u_grave,            // 249 - OS_u_grave         ((unsigned char)0xf9)
           REC_u_acute,            // 250 - OS_u_acute         ((unsigned char)0xfa)
        REC_u_circumflex,          // 251 - OS_u_circumflex    ((unsigned char)0xfb)
          REC_u_umlaut,            // 252 - OS_u_umlaut        ((unsigned char)0xfc)
           'y', /*REC_y_acute,*/            // 253 - OS_y_acute         ((unsigned char)221)
               0,                  // 254 -
          REC_y_umlaut             // 255 - OS_y_umlaut        ((unsigned char)0xff)
              };

#else // 0 -- Untill all letters are defined in DTL
// Here we redeirect currently absent symbols -- please check when added more!!!

ROM_DATA _UCHAR os_rec_conv_tbl[128] =
              {                    // **** 0x80 ****
        REC_euro_currency,	       // 128 -
               0,                  // 129 -
               0,                  // 130 -
               0,                  // 131 -
               0,                  // 132 -
               0,                  // 133 -
               0,                  // 134 -
               0,                  // 135 -
               0,                  // 136 -
               0,                  // 137 -
              'S',                 // 138 -
               0,                  // 139 -
         REC_OE_letter,            // 140 - OS_OE_letter       ((unsigned char)0x8c)
               0,                  // 141 -
               0,                  // 142 -
               0,                  // 143 -
                                   // **** 0x90 ****
               0,                  // 144 -
               0,                  // 145 -
               0,                  // 146 -
               0,                  // 147 -
               0,                  // 148 -
               0,                  // 149 -
               0,                  // 150 -
               0,                  // 151 -
               0,                  // 152 -
               0,                  // 153 -
              's',                 // 154 -
               0,                  // 155 -
         REC_oe_letter,            // 156 - OS_oe_letter       ((unsigned char)0x9c)
               0,                  // 157 -
               0,                  // 158 -
              'Y', //REC_Y_umlaut,             // 159 - OS_Y_umlaut        ((unsigned char)0x9f)
                                   // **** 0xA0 ****
               0,                  // 160 -
              '|', //REC_Exclamation_inv,          // 161 - OS_Exclamation_inv ((unsigned char)0xa1)
               0,                  // 162 -
       REC_BritishPound,           // 163 - OS_BritishPound    ((unsigned char)0xa3)
               0,                  // 164 -
         REC_Yenn_sign,            // 165 - OS_Yenn_sign       ((unsigned char)0xa5)
               0,                  // 166 -
               0,                  // 167 -
               0,                  // 168 -
      REC_Copyright_sign,          // 169 - OS_Copyright_sign  ((unsigned char)0xa9)
               0,                  // 170 -
      REC_DblBrace_left,           // 171 - OS_DblBrace_left   ((unsigned char)0xab)
               0,                  // 172 -
               0,                  // 173 -
      REC_TradeName_sign,          // 174 - OS_TradeName_sign  ((unsigned char)0xae)
               0,                  // 175 -
                                   // **** 0xB0 ****
               0,                  // 176 -
               0,                  // 177 -
               0,                  // 178 -
               0,                  // 179 -
               0,                  // 180 -
               0,                  // 181 -
               0,                  // 182 -
               0,                  // 183 -
               0,                  // 184 -
               0,                  // 185 -
               0,                  // 186 -
      REC_DblBrace_right,          // 187 - OS_DblBrace_right  ((unsigned char)0xbb)
               0,                  // 188 -
               0,                  // 189 -
               0,                  // 190 -
              ';', // REC_Question_inv,          // 191 - OS_Question_inv    ((unsigned char)0xbf)
                                   // **** 0xC0 ****
          REC_A_grave,             // 192 - OS_A_grave         ((unsigned char)0xc0)
          REC_A_grave, //REC_A_acute,             // 193 - OS_A_acute         ((unsigned char)0xc1)
        REC_A_circumflex,          // 194 - OS_A_circumflex    ((unsigned char)0xc2)
        REC_A_circumflex, //REC_A_tilda,             // 195 - OS_A_tilda         ((unsigned char)0xc3)
          REC_A_umlaut,            // 196 - OS_A_umlaut        ((unsigned char)0xc4)
         REC_A_angstrem,           // 197 - OS_A_angstrem      ((unsigned char)0xc5)
         REC_OE_letter,            // 198 - OS_AE_letter       ((unsigned char)0xc6)
         REC_C_cedilla,            // 199 - OS_C_cedilla       ((unsigned char)0xc7)
          REC_E_grave,             // 200 - OS_E_grave         ((unsigned char)0xc8)
          REC_E_acute,             // 201 - OS_E_acute         ((unsigned char)0xc9)
        REC_E_circumflex,          // 202 - OS_E_circumflex    ((unsigned char)0xca)
          REC_E_umlaut,            // 203 - OS_E_umlaut        ((unsigned char)0xcb)
              'I', //REC_I_grave,             // 204 - OS_I_grave         ((unsigned char)0xcc)
              'I', //REC_I_acute,             // 205 - OS_I_acute         ((unsigned char)0xcd)
        REC_I_circumflex,          // 206 - OS_I_circumflex    ((unsigned char)0xce)
          REC_I_umlaut,            // 207 - OS_I_umlaut        ((unsigned char)0xcf)
                                   // **** 0xD0 ****
             'D',                  // 208 - OS_Delta           ((unsigned char)0xd0)
          REC_N_tilda,             // 209 - OS_N_tilda         ((unsigned char)0xd1)
          REC_O_umlaut, //REC_O_grave,             // 210 - OS_O_grave         ((unsigned char)0xd2)
          REC_O_umlaut, //REC_O_acute,             // 211 - OS_O_acute         ((unsigned char)0xd3)
        REC_O_circumflex,          // 212 - OS_O_circumflex    ((unsigned char)0xd4)
          REC_O_circumflex, //REC_O_tilda,             // 213 - OS_O_tilda         ((unsigned char)0xd5)
          REC_O_umlaut,            // 214 - OS_O_umlaut        ((unsigned char)0xd6)
             'x',                  // 215 - OS_MUL_sign        ((unsigned char)215)
             '0',                  // 216 - OS_O_crossed       ((unsigned char)216)
           REC_U_grave,            // 217 - OS_U_grave         ((unsigned char)0xd9)
           REC_U_grave, //REC_U_acute,            // 218 - OS_U_acute         ((unsigned char)0xda)
         REC_U_circumflex,         // 219 - OS_U_circumflex    ((unsigned char)0xdb)
           REC_U_umlaut,           // 220 - OS_U_umlaut        ((unsigned char)0xdc)
             'Y', /*REC_Y_acute,*/            // 221 - OS_Y_acute         ((unsigned char)221)
               0,                  // 222 -
            REC_ESZET,             // 223 - OS_ESZET           ((unsigned char)0xdf)
                                   // **** 0xE0 ****
           REC_a_grave,            // 224 - OS_a_grave         ((unsigned char)0xe0)
           REC_a_grave, //REC_a_acute,            // 225 - OS_a_acute         ((unsigned char)0xe1)
        REC_a_circumflex,          // 226 - OS_a_circumflex    ((unsigned char)0xe2)
        REC_a_circumflex, //REC_a_tilda,            // 227 - OS_a_tilda         ((unsigned char)0xe3)
           REC_a_umlaut,           // 228 - OS_a_umlaut        ((unsigned char)0xe4)
          REC_a_angstrem,          // 229 - OS_a_angstrem      ((unsigned char)0xe5)
          REC_oe_letter,           // 230 - OS_ae_letter       ((unsigned char)0xe6)
          REC_c_cedilla,           // 231 - OS_c_cedilla       ((unsigned char)0xe7)
           REC_e_grave,            // 232 - OS_e_grave         ((unsigned char)0xe8)
           REC_e_acute,            // 233 - OS_e_acute         ((unsigned char)0xe9)
        REC_e_circumflex,          // 234 - OS_e_circumflex    ((unsigned char)0xea)
          REC_e_umlaut,            // 235 - OS_e_umlaut        ((unsigned char)0xeb)
              'i',// REC_i_grave,            // 236 - OS_i_grave         ((unsigned char)0xec)
              'i',// REC_i_acute,            // 237 - OS_i_acute         ((unsigned char)0xed)
        REC_i_circumflex,          // 238 - OS_i_circumflex    ((unsigned char)0xee)
          REC_i_umlaut,            // 239 - OS_i_umlaut        ((unsigned char)0xef)
                                   // **** 0xF0 ****
             'd',                  // 240 - OS_delta           ((unsigned char)0xf0)
          REC_n_tilda,             // 241 - OS_n_tilda         ((unsigned char)0xf1)
          REC_o_umlaut, //REC_o_grave,             // 242 - OS_o_grave         ((unsigned char)0xf2)
          REC_o_umlaut, //REC_o_acute,             // 243 - OS_o_acute         ((unsigned char)0xf3)
        REC_o_circumflex,          // 244 - OS_o_circumflex    ((unsigned char)0xf4)
        REC_o_circumflex, //  REC_o_tilda,             // 245 - OS_o_tilda         ((unsigned char)0xf5)
          REC_o_umlaut,            // 246 - OS_o_umlaut        ((unsigned char)0xf6)
          REC_DIV_sign,            // 247 - OS_DIV_sign        ((unsigned char)247)
             '0',                  // 248 - OS_o_crossed       ((unsigned char)248)
           REC_u_grave,            // 249 - OS_u_grave         ((unsigned char)0xf9)
           REC_u_grave, //REC_u_acute,            // 250 - OS_u_acute         ((unsigned char)0xfa)
        REC_u_circumflex,          // 251 - OS_u_circumflex    ((unsigned char)0xfb)
          REC_u_umlaut,            // 252 - OS_u_umlaut        ((unsigned char)0xfc)
             'y', /*REC_y_acute,*/            // 253 - OS_y_acute         ((unsigned char)221)
               0,                  // 254 -
             'y' //REC_y_umlaut             // 255 - OS_y_umlaut        ((unsigned char)0xff)
              };

 #endif // 0 -- untill all symobls defined in DTL

#endif /* FOR_GERMAN... */


/* ----------------------------------------------------------------------------- */
/* - End of DTI util coding tables                                             - */
/* ----------------------------------------------------------------------------- */

/* ----------------------------------------------------------------------------- */
/* - Decode WIN to MAC table                                                   - */
/* ----------------------------------------------------------------------------- */
#if PG_DEBUG || defined MAC_RW_CODING
ROM_DATA _UCHAR os_mac_conv_tbl[128] =
              {                    // **** 0x80 ****
               0,                  // 128 -
               0,                  // 129 -
               0,                  // 130 -
               0,                  // 131 -
               0,                  // 132 -
               0,                  // 133 -
               0,                  // 134 -
               0,                  // 135 -
               0,                  // 136 -
               0,                  // 137 -
               0,                  // 138 -
               0,                  // 139 -
         MAC_OE_letter,            // 140 - OS_OE_letter       ((unsigned char)0x8c)
               0,                  // 141 -
               0,                  // 142 -
               0,                  // 143 -
                                   // **** 0x90 ****
               0,                  // 144 -
               0,                  // 145 -
               0,                  // 146 -
               0,                  // 147 -
               0,                  // 148 -
               0,                  // 149 -
               0,                  // 150 -
               0,                  // 151 -
               0,                  // 152 -
               0,                  // 153 -
               0,                  // 154 -
               0,                  // 155 -
         MAC_oe_letter,            // 156 - OS_oe_letter       ((unsigned char)0x9c)
               0,                  // 157 -
               0,                  // 158 -
         MAC_Y_umlaut,             // 159 - OS_Y_umlaut        ((unsigned char)0x9f)
                                   // **** 0xA0 ****
               0,                  // 160 -
     MAC_Exclamation_inv,          // 161 - OS_Exclamation_inv ((unsigned char)0xa1)
               0,                  // 162 -
       MAC_BritishPound,           // 163 - OS_BritishPound    ((unsigned char)0xa3)
               0,                  // 164 -
         MAC_Yenn_sign,            // 165 - OS_Yenn_sign       ((unsigned char)0xa5)
               0,                  // 166 -
               0,                  // 167 -
               0,                  // 168 -
      MAC_Copyright_sign,          // 169 - OS_Copyright_sign  ((unsigned char)0xa9)
               0,                  // 170 -
      MAC_DblBrace_left,           // 171 - OS_DblBrace_left   ((unsigned char)0xab)
               0,                  // 172 -
               0,                  // 173 -
      MAC_TradeName_sign,          // 174 - OS_TradeName_sign  ((unsigned char)0xae)
               0,                  // 175 -
                                   // **** 0xB0 ****
               0,                  // 176 -
               0,                  // 177 -
               0,                  // 178 -
               0,                  // 179 -
               0,                  // 180 -
               0,                  // 181 -
               0,                  // 182 -
               0,                  // 183 -
               0,                  // 184 -
               0,                  // 185 -
               0,                  // 186 -
      MAC_DblBrace_right,          // 187 - OS_DblBrace_right  ((unsigned char)0xbb)
               0,                  // 188 -
               0,                  // 189 -
               0,                  // 190 -
        MAC_Question_inv,          // 191 - OS_Question_inv    ((unsigned char)0xbf)
                                   // **** 0xC0 ****
          MAC_A_grave,             // 192 - OS_A_grave         ((unsigned char)0xc0)
          MAC_A_acute,             // 193 - OS_A_acute         ((unsigned char)0xc1)
        MAC_A_circumflex,          // 194 - OS_A_circumflex    ((unsigned char)0xc2)
          MAC_A_tilda,             // 195 - OS_A_tilda         ((unsigned char)0xc3)
          MAC_A_umlaut,            // 196 - OS_A_umlaut        ((unsigned char)0xc4)
         MAC_A_angstrem,           // 197 - OS_A_angstrem      ((unsigned char)0xc5)
               0,                  // 198 -
         MAC_C_cedilla,            // 199 - OS_C_cedilla       ((unsigned char)0xc7)
          MAC_E_grave,             // 200 - OS_E_grave         ((unsigned char)0xc8)
          MAC_E_acute,             // 201 - OS_E_acute         ((unsigned char)0xc9)
        MAC_E_circumflex,          // 202 - OS_E_circumflex    ((unsigned char)0xca)
          MAC_E_umlaut,            // 203 - OS_E_umlaut        ((unsigned char)0xcb)
          MAC_I_grave,             // 204 - OS_I_grave         ((unsigned char)0xcc)
          MAC_I_acute,             // 205 - OS_I_acute         ((unsigned char)0xcd)
        MAC_I_circumflex,          // 206 - OS_I_circumflex    ((unsigned char)0xce)
          MAC_I_umlaut,            // 207 - OS_I_umlaut        ((unsigned char)0xcf)
                                   // **** 0xD0 ****
               0,                  // 208 -
          MAC_N_tilda,             // 209 - OS_N_tilda         ((unsigned char)0xd1)
          MAC_O_grave,             // 210 - OS_O_grave         ((unsigned char)0xd2)
          MAC_O_acute,             // 211 - OS_O_acute         ((unsigned char)0xd3)
        MAC_O_circumflex,          // 212 - OS_O_circumflex    ((unsigned char)0xd4)
          MAC_O_tilda,             // 213 - OS_O_tilda         ((unsigned char)0xd5)
          MAC_O_umlaut,            // 214 - OS_O_umlaut        ((unsigned char)0xd6)
               0,                  // 215 - OS_MUL_sign        ((unsigned char)215)
               0,                  // 216 - OS_O_crossed       ((unsigned char)216)
           MAC_U_grave,            // 217 - OS_U_grave         ((unsigned char)0xd9)
           MAC_U_acute,            // 218 - OS_U_acute         ((unsigned char)0xda)
         MAC_U_circumflex,         // 219 - OS_U_circumflex    ((unsigned char)0xdb)
           MAC_U_umlaut,           // 220 - OS_U_umlaut        ((unsigned char)0xdc)
           MAC_Y_acute,            // 221 - OS_Y_acute         ((unsigned char)221)
               0,                  // 222 -
            MAC_ESZET,             // 223 - OS_ESZET           ((unsigned char)0xdf)
                                   // **** 0xE0 ****
           MAC_a_grave,            // 224 - OS_a_grave         ((unsigned char)0xe0)
           MAC_a_acute,            // 225 - OS_a_acute         ((unsigned char)0xe1)
        MAC_a_circumflex,          // 226 - OS_a_circumflex    ((unsigned char)0xe2)
           MAC_a_tilda,            // 227 - OS_a_tilda         ((unsigned char)0xe3)
           MAC_a_umlaut,           // 228 - OS_a_umlaut        ((unsigned char)0xe4)
          MAC_a_angstrem,          // 229 - OS_a_angstrem      ((unsigned char)0xe5)
               0,                  // 230 -
          MAC_c_cedilla,           // 231 - OS_c_cedilla       ((unsigned char)0xe7)
           MAC_e_grave,            // 232 - OS_e_grave         ((unsigned char)0xe8)
           MAC_e_acute,            // 233 - OS_e_acute         ((unsigned char)0xe9)
        MAC_e_circumflex,          // 234 - OS_e_circumflex    ((unsigned char)0xea)
          MAC_e_umlaut,            // 235 - OS_e_umlaut        ((unsigned char)0xeb)
           MAC_i_grave,            // 236 - OS_i_grave         ((unsigned char)0xec)
           MAC_i_acute,            // 237 - OS_i_acute         ((unsigned char)0xed)
        MAC_i_circumflex,          // 238 - OS_i_circumflex    ((unsigned char)0xee)
          MAC_i_umlaut,            // 239 - OS_i_umlaut        ((unsigned char)0xef)
                                   // **** 0xF0 ****
               0,                  // 240 -
          MAC_n_tilda,             // 241 - OS_n_tilda         ((unsigned char)0xf1)
          MAC_o_grave,             // 242 - OS_o_grave         ((unsigned char)0xf2)
          MAC_o_acute,             // 243 - OS_o_acute         ((unsigned char)0xf3)
        MAC_o_circumflex,          // 244 - OS_o_circumflex    ((unsigned char)0xf4)
          MAC_o_tilda,             // 245 - OS_o_tilda         ((unsigned char)0xf5)
          MAC_o_umlaut,            // 246 - OS_o_umlaut        ((unsigned char)0xf6)
               0,                  // 247 - OS_DIV_sign        ((unsigned char)247)
               0,                  // 248 - OS_o_crossed       ((unsigned char)248)
           MAC_u_grave,            // 249 - OS_u_grave         ((unsigned char)0xf9)
           MAC_u_acute,            // 250 - OS_u_acute         ((unsigned char)0xfa)
        MAC_u_circumflex,          // 251 - OS_u_circumflex    ((unsigned char)0xfb)
          MAC_u_umlaut,            // 252 - OS_u_umlaut        ((unsigned char)0xfc)
           MAC_y_acute,            // 253 - OS_y_acute         ((unsigned char)221)
               0,                  // 254 -
          MAC_y_umlaut             // 255 - OS_y_umlaut        ((unsigned char)0xff)
              };
#endif //PG_DEBUG

/* ----------------------------------------------------------------------------- */
/* - End of MAC to Win table                                                   - */
/* ----------------------------------------------------------------------------- */




// ---------------- Upper level constants ---------------------------------
// from xrws.c

ROM_DATA  _INT   xrwd_src_ids[XRWD_N_SRCS] = {XRWD_ID_ORDER};
#if 0
ROM_DATA  _UCHAR let_stat[128] = {
                              0,   1,   2,   3,   4,   5,   6,   7,   8,   9,
                             10,  11,  12,  13,  14,  15,  16,  17,  18,  19,
                             20,  21,  22,  23,  24,  25,  26,  27,  28,  29,
                             30,  31,  32,  33,  34,  35,  36,  37,  38,  39,
                             40,  41,  42,  43,  44,  45,  46,  47, 148, 149,
                            150, 151, 152, 153, 154, 155, 156, 157,  58,  59,
                             60,  61,  62,  63,  64, 190, 177, 184, 183, 193,
                            176, 181, 178, 191, 168, 173, 185, 179, 189, 186,
                            180, 169, 188, 192, 187, 182, 174, 172, 170, 175,
                            171,  91,  92,  93,  94,  95,  96, 230, 217, 224,
                            223, 233, 216, 221, 218, 231, 208, 213, 225, 219,
                            229, 226, 220, 209, 228, 232, 227, 222, 214, 212,
                            210, 215, 211, 123, 124, 125, 126, 127
                                     };
#endif
//#ifdef FOR_GERMAN


#if 0 // Moved to the zctabs.cpp //AVP

/*from zctype.c*/

ROM_DATA unsigned char  _xctype[] = {
0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
0x20, 0x60, 0x60, 0x20, 0x60, 0x60, 0x20, 0x20,
0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
0x48, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84,
0x84, 0x84, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
0x10, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x10, 0x10, 0x10, 0x10, 0x10,
0x10, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x02,
0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
0x02, 0x02, 0x02, 0x10, 0x10, 0x10, 0x10, 0x00,

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //128
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //136
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //144
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,  //152
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //160
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //168
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //176
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //184
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,  //192
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,  //200
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00,  //208
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x02,  //216
0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,  //224
0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,  //232
0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00,  //240
0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00, 0x02   //248
};

/*******************************************************************/
ROM_DATA unsigned char  _xupper[] = {
0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,      //128
0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,      //136
0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,      //144
0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,      //152
0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,      //160
0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,      //168
0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7,      //176
0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,      //184

0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,      //192
0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,      //200
0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7,      //208
0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,      //216

0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,      //224
0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,      //232
0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7,      //240
0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xfe, 0x9f       //248
};

/*******************************************************************/
ROM_DATA unsigned char  _xlower [] = {
0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,      //128
0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,      //136
0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,      //144
0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0xff,      //152
0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,      //160
0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,      //168
0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7,      //176
0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,      //184

0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7,      //192
0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,      //200
0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,      //208
0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xde, 0xff,      //216

0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7,      //224
0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,      //232
0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,      //240
0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff       //248
};

#endif //0 -- moved to zctabs.cpp

//#endif /*FOR_GERMAN*/
//
//  There can be no more than 9 picture groups per symbol now.
// The table has 26 lines ('a'-'z') and 9 entries in each line;
// if, for example, the 0th number for 's' equals 0x3, this means
// that 0th picture group of 'a' corresponds to 3rd picture group
// of 'A'.
// The value of 0xF means there is no correspondence.
//

//General:

#ifdef USE_CAP_BITS

#if defined (FOR_FRENCH)
    ROM_DATA _UCHAR DefaultSmall2Cap[CAP_TABLE_NUM_LET][CAP_TABLE_NUM_VAR] = {0xF};
    ROM_DATA _UCHAR PalmerSmall2Cap[CAP_TABLE_NUM_LET][CAP_TABLE_NUM_VAR] = {0xF};
    ROM_DATA _UCHAR BlockSmall2Cap[CAP_TABLE_NUM_LET][CAP_TABLE_NUM_VAR] = {0xF};
#elif defined (FOR_GERMAN)

ROM_DATA _UCHAR DefaultSmall2Cap[CAP_TABLE_NUM_LET][CAP_TABLE_NUM_VAR] =
 {
   0x3, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //a
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //b
   0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //c
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //d

   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //e
   0x1, 0xF, 0xF, 0xF, 0xF, 0x2, 0xF, 0xF, 0xF,  //f
   0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //g
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //h

   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //i
   0xF, 0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //j
   0xF, 0xF, 0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //k
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //l

   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //m
   0x2, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //n
   0x0, 0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //o
   0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //p

   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //q
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //r
   0x0, 0x2, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //s
   0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //t

   0x0, 0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //u
   0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //v
   0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //w
   0xF, 0x0, 0x2, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //x

   0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //y
   0x0, 0x2, 0x3, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //z

   0x2, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //a umlaut
   0x0, 0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //o umlaut
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  /*a angstrem*/
   0x0, 0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF   /*u umlaut*/
 };


// Palmer (not used):
ROM_DATA _UCHAR PalmerSmall2Cap[CAP_TABLE_NUM_LET][CAP_TABLE_NUM_VAR] =
 {
   0xF, 0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //a
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //b
   0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //c
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //d

   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //e
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //f
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //g
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //h

   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //i
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //j
   0xF, 0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //k
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //l

   0xF, 0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //m
   0xF, 0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //n
   0x0, 0xF, 0x2, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //o
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //p

   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //q
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //r
   0x0, 0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //s
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //t

   0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //u
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //v
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //w
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //x

   0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //y
   0x0, 0x2, 0x3, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //z

   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //a umlaut
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //o umlaut
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  /*a angstrem*/
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF   /*u umlaut*/
 };


//Block (not used):
ROM_DATA _UCHAR BlockSmall2Cap[CAP_TABLE_NUM_LET][CAP_TABLE_NUM_VAR] =
 {
   0xF, 0x1, 0xF, 0x0, 0x2, 0xF, 0xF, 0xF, 0xF,  //a
   0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //b
   0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //c
   0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //d

   0x0, 0x1, 0x2, 0xF, 0xF, 0x3, 0xF, 0xF, 0xF,  //e
   0xF, 0x2, 0x0, 0xF, 0xF, 0xF, 0x1, 0xF, 0xF,  //f
   0xF, 0x0, 0x2, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //g
   0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //h

   0xF, 0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //i
   0xF, 0xF, 0x1, 0x0, 0xF, 0xF, 0xF, 0xF, 0xF,  //j
   0xF, 0x0, 0xF, 0x2, 0xF, 0xF, 0xF, 0xF, 0xF,  //k
   0xF, 0xF, 0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //l

   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //m
   0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //n
   0xF, 0x1, 0x2, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //o
   0xF, 0xF, 0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //p

   0xF, 0xF, 0xF, 0x0, 0x1, 0xF, 0xF, 0xF, 0xF,  //q
   0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //r
   0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //s
   0xF, 0xF, 0xF, 0x0, 0xF, 0xF, 0xF, 0xF, 0xF,  //t

   0xF, 0x1, 0x2, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //u
   0xF, 0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //v
   0xF, 0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //w
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //x

   0xF, 0xF, 0xF, 0x1, 0xF, 0x0, 0xF, 0xF, 0xF,  //y
   0x0, 0x2, 0x3, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //z

   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //a umlaut
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //o umlaut
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  /*a angstrem*/
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF   /*u umlaut*/
 };

#elif defined (FOR_INTERNATIONAL)
    ROM_DATA _UCHAR DefaultSmall2Cap[CAP_TABLE_NUM_LET][CAP_TABLE_NUM_VAR] = {0xF};
    ROM_DATA _UCHAR PalmerSmall2Cap[CAP_TABLE_NUM_LET][CAP_TABLE_NUM_VAR] = {0xF};
    ROM_DATA _UCHAR BlockSmall2Cap[CAP_TABLE_NUM_LET][CAP_TABLE_NUM_VAR] = {0xF};
#elif defined (FOR_SWED)

ROM_DATA _UCHAR DefaultSmall2Cap[CAP_TABLE_NUM_LET][CAP_TABLE_NUM_VAR] =
 {
   0xF, 0x1, 0xF, 0x0, 0x2, 0xF, 0xF, 0xF, 0xF,  //a
   0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //b
   0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //c
   0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //d

   0x0, 0x1, 0x2, 0xF, 0xF, 0x3, 0xF, 0xF, 0xF,  //e
   0x1, 0x2, 0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //f
   0xF, 0x0, 0x2, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //g
   0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //h

   0xF, 0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //i
   0xF, 0x0, 0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //j
   0xF, 0x0, 0xF, 0x2, 0xF, 0xF, 0xF, 0xF, 0xF,  //k
   0xF, 0xF, 0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //l

   0xF, 0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //m
   0x0, 0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //n
   0x0, 0xF, 0x2, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //o
   0xF, 0xF, 0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //p

   0xF, 0xF, 0xF, 0x0, 0x1, 0xF, 0xF, 0xF, 0xF,  //q
   0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //r
   0x0, 0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //s
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //t

   0x1, 0xF, 0x2, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //u
   0x1, 0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //v
   0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //w
   0xF, 0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //x

   0xF, 0xF, 0xF, 0x1, 0xF, 0x0, 0xF, 0xF, 0xF,  //y
   0x0, 0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //z

   0xF, 0x1, 0xF, 0x0, 0x2, 0xF, 0xF, 0xF, 0xF,  //a umlaut
   0x0, 0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //o umlaut
   0xF, 0x1, 0xF, 0x0, 0x2, 0xF, 0xF, 0xF, 0xF   //a angstrem
 };


// Palmer:
ROM_DATA _UCHAR PalmerSmall2Cap[CAP_TABLE_NUM_LET][CAP_TABLE_NUM_VAR] =
 {
   0xF, 0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //a
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //b
   0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //c
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //d

   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //e
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //f
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //g
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //h

   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //i
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //j
   0xF, 0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //k
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //l

   0xF, 0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //m
   0xF, 0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //n
   0x0, 0xF, 0x2, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //o
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //p

   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //q
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //r
   0x0, 0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //s
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //t

   0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //u
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //v
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //w
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //x

   0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //y
   0xF, 0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //z

   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //a umlaut
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //o umlaut
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF   //a angstrem
 };


//Block:
ROM_DATA _UCHAR BlockSmall2Cap[CAP_TABLE_NUM_LET][CAP_TABLE_NUM_VAR] =
 {
   0xF, 0x1, 0xF, 0x0, 0x2, 0xF, 0xF, 0xF, 0xF,  //a
   0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //b
   0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //c
   0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //d

   0x0, 0x1, 0x2, 0xF, 0xF, 0x3, 0xF, 0xF, 0xF,  //e
   0xF, 0x2, 0x0, 0xF, 0xF, 0xF, 0x1, 0xF, 0xF,  //f
   0xF, 0x0, 0x2, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //g
   0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //h

   0xF, 0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //i
   0xF, 0xF, 0x1, 0x0, 0xF, 0xF, 0xF, 0xF, 0xF,  //j
   0xF, 0x0, 0xF, 0x2, 0xF, 0xF, 0xF, 0xF, 0xF,  //k
   0xF, 0xF, 0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //l

   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //m
   0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //n
   0xF, 0x1, 0x2, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //o
   0xF, 0xF, 0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //p

   0xF, 0xF, 0xF, 0x0, 0x1, 0xF, 0xF, 0xF, 0xF,  //q
   0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //r
   0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //s
   0xF, 0xF, 0xF, 0x0, 0xF, 0xF, 0xF, 0xF, 0xF,  //t

   0xF, 0x1, 0x2, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //u
   0xF, 0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //v
   0xF, 0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //w
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //x

   0xF, 0xF, 0xF, 0x1, 0xF, 0x0, 0xF, 0xF, 0xF,  //y
   0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //z

   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //a umlaut
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //o umlaut
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF   //a angstrem
 };

#else /* !FOR_GERMAN && !FOR_FRENCH && !FOR_SWED && !FOR_INTERNATIONAL*/

ROM_DATA _UCHAR DefaultSmall2Cap[CAP_TABLE_NUM_LET][CAP_TABLE_NUM_VAR] =
 {
   0xF, 0x1, 0xF, 0x0, 0x2, 0xF, 0xF, 0xF, 0xF,  //a
   0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //b
   0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //c
   0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //d

   0x0, 0x1, 0x2, 0xF, 0xF, 0x3, 0xF, 0xF, 0xF,  //e
   0x1, 0x2, 0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //f
   0xF, 0x0, 0x2, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //g
   0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //h

   0xF, 0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //i
   0xF, 0x0, 0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //j
   0xF, 0x0, 0xF, 0x2, 0xF, 0xF, 0xF, 0xF, 0xF,  //k
   0xF, 0xF, 0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //l

   0xF, 0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //m
   0x0, 0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //n
   0x0, 0xF, 0x2, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //o
   0xF, 0xF, 0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //p

   0xF, 0xF, 0xF, 0x0, 0x1, 0xF, 0xF, 0xF, 0xF,  //q
   0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //r
   0x0, 0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //s
   0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //t

   0x1, 0xF, 0x2, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //u
   0x1, 0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //v
   0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //w
   0xF, 0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //x

   0xF, 0xF, 0xF, 0x1, 0xF, 0x0, 0xF, 0xF, 0xF,  //y
   0x0, 0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF
 };


// Palmer:
ROM_DATA _UCHAR PalmerSmall2Cap[CAP_TABLE_NUM_LET][CAP_TABLE_NUM_VAR] =
 {
   0xF, 0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //a
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //b
   0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //c
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //d

   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //e
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //f
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //g
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //h

   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //i
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //j
   0xF, 0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //k
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //l

   0xF, 0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //m
   0xF, 0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //n
   0x0, 0xF, 0x2, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //o
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //p

   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //q
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //r
   0x0, 0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //s
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //t

   0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //u
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //v
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //w
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //x

   0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //y
   0xF, 0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF
 };


//Block:
ROM_DATA _UCHAR BlockSmall2Cap[CAP_TABLE_NUM_LET][CAP_TABLE_NUM_VAR] =
 {
   0xF, 0x1, 0xF, 0x0, 0x2, 0xF, 0xF, 0xF, 0xF,  //a
   0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //b
   0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //c
   0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //d

   0x0, 0x1, 0x2, 0xF, 0xF, 0x3, 0xF, 0xF, 0xF,  //e
   0xF, 0x2, 0x0, 0xF, 0xF, 0xF, 0x1, 0xF, 0xF,  //f
   0xF, 0x0, 0x2, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //g
   0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //h

   0xF, 0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //i
   0xF, 0xF, 0x1, 0x0, 0xF, 0xF, 0xF, 0xF, 0xF,  //j
   0xF, 0x0, 0xF, 0x2, 0xF, 0xF, 0xF, 0xF, 0xF,  //k
   0xF, 0xF, 0x1, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //l

   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //m
   0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //n
   0xF, 0x1, 0x2, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //o
   0xF, 0xF, 0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //p

   0xF, 0xF, 0xF, 0x0, 0x1, 0xF, 0xF, 0xF, 0xF,  //q
   0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //r
   0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //s
   0xF, 0xF, 0xF, 0x0, 0xF, 0xF, 0xF, 0xF, 0xF,  //t

   0xF, 0x1, 0x2, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //u
   0xF, 0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //v
   0xF, 0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //w
   0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF,  //x

   0xF, 0xF, 0xF, 0x1, 0xF, 0x0, 0xF, 0xF, 0xF,  //y
   0x0, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF
 };
#endif

#endif //USE_CAP_BITS

/* constants for DirDiacr.cpp  */

ROM_DATA _CHAR DiacriticsLetter[] = {
#if defined (FOR_FRENCH) || defined (FOR_INTERNATIONAL)|| defined (FOR_SWED)
                                    OS_a_grave,OS_a_circumflex ,
                                    OS_e_grave,OS_e_acute,
                                    OS_e_circumflex,OS_e_umlaut,
                                    OS_i_circumflex,
                                    OS_i_umlaut,
#if defined (FOR_FRENCH)
                                    'i',
#endif /* FOR_FRENCH */
                                    OS_o_circumflex,
                                    OS_u_grave,OS_u_circumflex,
#endif /* FOR_FRENCH... */
#if defined (FOR_INTERNATIONAL)|| defined (FOR_SWED) || defined (FOR_FRENCH)
                                    OS_A_grave,OS_A_circumflex ,
                                    OS_E_grave,OS_E_acute,
                                    OS_E_circumflex,
                                    OS_I_circumflex,
                                    OS_I_umlaut,
                                    OS_O_circumflex,
                                    OS_U_grave,OS_U_circumflex,
#endif
#if defined (FOR_SWED) || defined (FOR_INTERNATIONAL)
                                    OS_A_angstrem, OS_a_angstrem,
#endif
#if defined (FOR_GERMAN) || defined (FOR_SWED) || defined (FOR_INTERNATIONAL)
                                    OS_A_umlaut, OS_a_umlaut,
                                    OS_O_umlaut, OS_o_umlaut,
#endif
#if defined (FOR_GERMAN) || defined (FOR_INTERNATIONAL) || defined (FOR_SWED)
                                    OS_U_umlaut, OS_u_umlaut,
#endif
#if defined (FOR_INTERNATIONAL)|| defined (FOR_SWED)

                                    OS_Y_umlaut,
                                    OS_y_umlaut,
                                    OS_N_tilda ,
                                    OS_n_tilda ,
                                    OS_A_acute ,
                                    OS_a_acute ,
                                    OS_I_acute ,
                                    OS_i_acute ,
                                    OS_I_grave ,
                                    OS_i_grave ,
                                    OS_O_acute ,
                                    OS_o_acute ,
                                    OS_O_grave ,
                                    OS_o_grave ,
                                    OS_U_acute ,
                                    OS_u_acute ,
                                    OS_A_tilda ,
                                    OS_a_tilda ,
                                    OS_O_tilda ,
                                    OS_o_tilda ,
                                    OS_E_umlaut,
#endif
                                    0};
#if USE_POSTPROC

/* important warning: the following string should correspond with the previous one */
ROM_DATA _CHAR IndexDiacriticsLetter[] = {
#if defined (FOR_FRENCH) || defined (FOR_INTERNATIONAL) || defined (FOR_SWED)
                                    IND_a_diacr, IND_a_diacr,
                                    IND_e_diacr, IND_e_diacr,
                                    IND_e_diacr, IND_e_diacr,
                                    IND_i_diacr,
                                    IND_i_diacr,
#if defined (FOR_FRENCH)
                                    IND_i_diacr,
#endif /* FOR_FRENCH */
                                    IND_o_diacr,
                                    IND_u_diacr, IND_u_diacr,
#endif /* FOR_FRENCH... */
#if defined (FOR_INTERNATIONAL) || defined (FOR_SWED) || defined (FOR_FRENCH)
                                    IND_A_diacr, IND_A_diacr,
                                    IND_E_diacr, IND_E_diacr,
                                    IND_E_diacr,
                                    IND_I_diacr,
                                    IND_I_diacr,
                                    IND_O_diacr,
                                    IND_U_diacr, IND_U_diacr,
#endif
#if defined (FOR_SWED) || defined (FOR_INTERNATIONAL)
                                    IND_A_diacr, IND_a_diacr,
#endif
#if defined (FOR_GERMAN) || defined (FOR_SWED) || defined (FOR_INTERNATIONAL)
                                    IND_A_diacr, IND_a_diacr,
                                    IND_O_diacr, IND_o_diacr,
#endif
#if defined (FOR_GERMAN) || defined (FOR_INTERNATIONAL)|| defined (FOR_SWED)
                                    IND_U_diacr, IND_u_diacr,
#endif
#if defined (FOR_INTERNATIONAL)|| defined (FOR_SWED)

                                    IND_Y_diacr,
                                    IND_y_diacr,
                                    IND_N_diacr ,
                                    IND_n_diacr ,
                                    IND_A_diacr ,
                                    IND_a_diacr ,
                                    IND_I_diacr ,
                                    IND_i_diacr ,
                                    IND_I_diacr ,
                                    IND_i_diacr ,
                                    IND_O_diacr ,
                                    IND_o_diacr ,
                                    IND_O_diacr ,
                                    IND_o_diacr ,
                                    IND_U_diacr ,
                                    IND_u_diacr ,
                                    IND_A_diacr ,
                                    IND_a_diacr ,
                                    IND_O_diacr ,
                                    IND_o_diacr ,
                                    IND_E_diacr ,
#endif
                                    0};
ROM_DATA _CHAR xrsToFind[]    = {X_XT_ST, X_ST,
                                 X_UMLAUT,
                                 0};

/* important warning: initialization of the following array should correspond to IND_ & DIACR_ defines */
ROM_DATA _SHORT DiacrPresence[NUM_DIACR_LETTERS][NUM_DIACR][2] = {
/* point           umlaut                            circumflex
          angstrem                 acute                   grave                     tilda*/

{{0        ,  0},{EL_SWEDISH|EL_GERMAN,OS_a_umlaut},{EL_SWEDISH|EL_FRENCH,OS_a_circumflex},   /*for a*/
       {EL_SWEDISH,OS_a_angstrem},{EL_SWEDISH,OS_a_acute},{EL_FRENCH,OS_a_grave},{EL_SWEDISH,OS_a_tilda}},

{{0        ,  0},{EL_SWEDISH|EL_GERMAN,OS_A_umlaut},{EL_SWEDISH|EL_FRENCH,OS_A_circumflex},   /*for A*/
       {EL_SWEDISH,OS_A_angstrem},{EL_SWEDISH,OS_A_acute},{EL_FRENCH,OS_A_grave},{EL_SWEDISH,OS_A_tilda}},

{{0        ,  0},{EL_FRENCH|EL_SWEDISH,OS_e_umlaut},{EL_SWEDISH|EL_FRENCH,OS_e_circumflex},   /*for e*/
       {0         ,0             },{EL_SWEDISH|EL_FRENCH,OS_e_acute},{EL_SWEDISH|EL_FRENCH,OS_e_grave},{0         ,0         }},

{{0        ,  0},{EL_SWEDISH          ,OS_E_umlaut},{EL_SWEDISH|EL_FRENCH,OS_E_circumflex},   /*for E*/
       {0         ,0             },{EL_SWEDISH|EL_FRENCH,OS_E_acute},{EL_SWEDISH|EL_FRENCH,OS_E_grave},{0         ,0         }},

{{EL_FRENCH,'i'},{EL_SWEDISH|EL_FRENCH,OS_i_umlaut},{EL_SWEDISH|EL_FRENCH,OS_i_circumflex},   /*for i*/
       {0         ,0             },{EL_SWEDISH,OS_i_acute},{EL_SWEDISH,OS_i_grave},{0         ,0         }},

{{0        ,  0},{EL_SWEDISH|EL_FRENCH,OS_I_umlaut},{EL_SWEDISH|EL_FRENCH,OS_I_circumflex},   /*for I*/
       {0         ,0             },{EL_SWEDISH,OS_I_acute},{EL_SWEDISH,OS_I_grave},{0         ,0         }},

{{0        ,  0},{EL_SWEDISH|EL_GERMAN,OS_o_umlaut},{EL_SWEDISH|EL_FRENCH,OS_o_circumflex},   /*for o*/
       {0         ,0             },{EL_SWEDISH,OS_o_acute},{EL_SWEDISH,OS_o_grave},{EL_SWEDISH,OS_o_tilda}},

{{0        ,  0},{EL_SWEDISH|EL_GERMAN,OS_O_umlaut},{EL_SWEDISH|EL_FRENCH,OS_O_circumflex},   /*for O*/
       {0         ,0             },{EL_SWEDISH,OS_O_acute},{EL_SWEDISH,OS_O_grave},{EL_SWEDISH,OS_O_tilda}},

{{0        ,  0},{EL_SWEDISH|EL_GERMAN,OS_u_umlaut},{EL_SWEDISH|EL_FRENCH,OS_u_circumflex},   /*for u*/
       {0         ,0             },{EL_SWEDISH,OS_u_acute},{EL_SWEDISH|EL_FRENCH,OS_u_grave},{0         ,0         }},

{{0        ,  0},{EL_SWEDISH|EL_GERMAN,OS_U_umlaut},{EL_SWEDISH|EL_FRENCH,OS_U_circumflex},   /*for U*/
       {0         ,0             },{EL_SWEDISH,OS_U_acute},{EL_SWEDISH|EL_FRENCH,OS_U_grave},{0         ,0         }},
{{0        ,  0},{EL_SWEDISH          ,OS_y_umlaut},{0        ,0              },   /*for y*/
       {0         ,0             },{0        ,0          },{0        ,0         },{0         ,0         }},

{{0        ,  0},{EL_SWEDISH          ,OS_Y_umlaut},{0        ,0              },   /*for Y*/
       {0         ,0             },{0        ,0          },{0        ,0         },{0         ,0         }},
{{0        ,  0},{0                   ,0          },{0        ,0              },   /*for n*/
       {0         ,0             },{0        ,0          },{0        ,0          },{EL_SWEDISH,OS_n_tilda}},

{{0        ,  0},{0                   ,0          },{0        ,0              },   /*for N*/
       {0         ,0             },{0        ,0          },{0        ,0          },{EL_SWEDISH,OS_N_tilda}}
};


#endif // #if USE_POSTPROC

/* from XRLV */
#ifdef LSTRIP

ROM_DATA _ULONG sym_box_data[256] = {
                                      0,0,0,0,                                  // 0-32
                                      0,0,0,0,
                                      0,0,0,0,
                                      0,0,0,0,

                                      0,0,0,0,
                                      0,0,0,0,
                                      0,0,0,0,
                                      0,0,0,0,

                                      0x00000000,0x000F8EBD,0x000625FF,0x000FCEAD, // sp, !, ", #
                                      0x000FCEAD,0x000FCEAD,0x000F8EAD,0x000626FF, // $, %, &, '
                                      0x002DBF7D,0x002DBF7D,0x000B576A,0x000B5B6A, // (, ), *, +
                                      0x009F2500,0x0009138F,0x009F1300,0x002DCF7D, // ,, -, ., /

                                      0x000FBEAD,0x000FCEAD,0x000FCEAD,0x000FCEAD, // 0, 1, 2, 3
                                      0x000FCEAD,0x000FCEAD,0x000FCEAD,0x000FCEAD, // 4, 5, 6, 7
                                      0x000FCEAD,0x000FCEAD,0x000F4B6C,0x000F5C48, // 8, 9, :, ;
                                      0x002D587A,0x000B351E,0x002D587A,0x000F8EBD, // <, =, >, ?

                                      0x0008AEBD,0x0008BEBD,0x0008CEBD,0x0008AEAD, // @, A, B, C
                                      0x0008AEBD,0x0008AEBD,0x0008BEBD,0x0008BEBD, // D, E, F, G
                                      0x0008BEBD,0x0008BEBD,0x000BAE9D,0x0008CEBD, // H, I, J, K
                                      0x0008BEBD,0x0008CEBD,0x0008BEBD,0x0008CEBD, // L, M, N, O

                                      0x0008CEAD,0x0008CEBD,0x0008BEBD,0x0008CEAD, // P, Q, R, S
                                      0x0008CEBD,0x0008BEBD,0x0008BEBD,0x0008CEBD, // T, U, V, W
                                      0x0008CEBD,0x000FCEAD,0x000FCE8B,0x002DBF9D, // X, Y, Z, [
                                      0x002DCF7D,0x002DBF7D,0x000935BF,0x009F1300, // \, ], ^, _

                                      0x009f0000,0x002A5678,0x0009CEBD,0x002A5778, // `, a, b, c
                                      0x0009CEBD,0x002A5678,0x000F6F7C,0x000FCE35, // d, e, f, g
                                      0x0009BEBD,0x003A4768,0x002FCE35,0x00096E7D, // h, i, j, k
                                      0x0009BEBD,0x002A5778,0x002A5778,0x002A5778, // l, m, n, o

                                      0x002f8e36,0x002FCE35,0x002A5778,0x002A5778, // p, q, r, s
                                      0x0009CEBD,0x002A5778,0x002A5778,0x002A5778, // t, u, v, w
                                      0x002A5878,0x002FAE35,0x002F7B37,0x002DCF7D, // x, y, z, {
                                      0x000FCF7D,0x002DCF7D,0x000A248F,0x000FCE8D, // |, }, ~, .

                                       0,                  // 128 -
                                       0,                  // 129 -
                                       0,                  // 130 -
                                       0,                  // 131 -
                                       0,                  // 132 -
                                       0,                  // 133 -
                                       0,                  // 134 -
                                       0,                  // 135 -
                                       0,                  // 136 -
                                       0,                  // 137 -
                                       0,                  // 138 -
                                       0,                  // 139 -
                                    0x0008cebd,            // 140 - os_oe_letter       ((unsigned char)0x8c)
                                       0,                  // 141 -
                                       0,                  // 142 -
                                       0,                  // 143 -
                                                           // **** 0x90 ****
                                       0,                  // 144 -
                                       0,                  // 145 -
                                       0,                  // 146 -
                                       0,                  // 147 -
                                       0,                  // 148 -
                                       0,                  // 149 -
                                       0,                  // 150 -
                                       0,                  // 151 -
                                       0,                  // 152 -
                                       0,                  // 153 -
                                       0,                  // 154 -
                                       0,                  // 155 -
                                 0x002a5778,               // 156 - os_oe_letter       ((unsigned char)0x9c)
                                       0,                  // 157 -
                                       0,                  // 158 -
                                 0x000fcead,               // 159 - os_y_umlaut        ((unsigned char)0x9f)
                                                           // **** 0xa0 ****
                                       0,                  // 160 -
                                 0x000f8ecf,               // 161 - os_exclamation_inv ((unsigned char)0xa1)
                                       0,                  // 162 -
                                 0x000fce8d,               // 163 - os_britishpound    ((unsigned char)0xa3)
                                       0,                  // 164 -
                                 0x000fcead,               // 165 - os_yenn_sign       ((unsigned char)0xa5)
                                       0,                  // 166 -
                                       0,                  // 167 -
                                       0,                  // 168 -
                                 0x000fce8d,               // 169 - os_copyright_sign  ((unsigned char)0xa9)
                                       0,                  // 170 -
                                 0x000bce7d,               // 171 - os_dblbrace_left   ((unsigned char)0xab)
                                       0,                  // 172 -
                                       0,                  // 173 -
                                 0x000fce8d,               // 174 - os_tradename_sign  ((unsigned char)0xae)
                                       0,                  // 175 -
                                                           // **** 0xb0 ****
                                       0,                  // 176 -
                                       0,                  // 177 -
                                       0,                  // 178 -
                                       0,                  // 179 -
                                       0,                  // 180 -
                                       0,                  // 181 -
                                       0,                  // 182 -
                                       0,                  // 183 -
                                       0,                  // 184 -
                                       0,                  // 185 -
                                       0,                  // 186 -
                                  0x000bce7d,              // 187 - os_dblbrace_right  ((unsigned char)0xbb)
                                       0,                  // 188 -
                                       0,                  // 189 -
                                       0,                  // 190 -
                                  0x000f8ebd,              // 191 - os_question_inv    ((unsigned char)0xbf)
                                                           // **** 0xc0 ****
                                  0x0008aebd,              // 192 - os_a_grave         ((unsigned char)0xc0)
                                  0x0008aebd,              // 193 - os_a_acute         ((unsigned char)0xc1)
                                  0x0008aebd,              // 194 - os_a_circumflex    ((unsigned char)0xc2)
                                  0x0008aebd,              // 195 - os_a_tilda         ((unsigned char)0xc3)
                                  0x0008aebd,              // 196 - os_a_umlaut        ((unsigned char)0xc4)
                                  0x0008aebd,              // 197 - os_a_angstrem      ((unsigned char)0xc5)
                                       0,                  // 198 -
                                  0x0008aebd,              // 199 - os_c_cedilla       ((unsigned char)0xc7)
                                  0x0008aebd,              // 200 - os_e_grave         ((unsigned char)0xc8)
                                  0x0008aebd,              // 201 - os_e_acute         ((unsigned char)0xc9)
                                  0x0008aebd,              // 202 - os_e_circumflex    ((unsigned char)0xca)
                                  0x0008aebd,              // 203 - os_e_umlaut        ((unsigned char)0xcb)
                                  0x0008aebd,              // 204 - os_i_grave         ((unsigned char)0xcc)
                                  0x0008aebd,              // 205 - os_i_acute         ((unsigned char)0xcd)
                                  0x0008aebd,              // 206 - os_i_circumflex    ((unsigned char)0xce)
                                  0x0008aebd,              // 207 - os_i_umlaut        ((unsigned char)0xcf)
                                                           // **** 0xd0 ****
                                       0,                  // 208 -
                                  0x0008aebd,              // 209 - os_n_tilda         ((unsigned char)0xd1)
                                  0x0008aebd,              // 210 - os_o_grave         ((unsigned char)0xd2)
                                  0x0008aebd,              // 211 - os_o_acute         ((unsigned char)0xd3)
                                  0x0008aebd,              // 212 - os_o_circumflex    ((unsigned char)0xd4)
                                  0x0008aebd,              // 213 - os_o_tilda         ((unsigned char)0xd5)
                                  0x0008aebd,              // 214 - os_o_umlaut        ((unsigned char)0xd6)
                                       0,                  // 215 - os_mul_sign        ((unsigned char)215)
                                       0,                  // 216 - os_o_crossed       ((unsigned char)216)
                                  0x0008aebd,              // 217 - os_u_grave         ((unsigned char)0xd9)
                                  0x0008aebd,              // 218 - os_u_acute         ((unsigned char)0xda)
                                  0x0008aebd,              // 219 - os_u_circumflex    ((unsigned char)0xdb)
                                  0x0008aebd,              // 220 - os_u_umlaut        ((unsigned char)0xdc)
                                  0x0008aebd,              // 221 - os_y_acute         ((unsigned char)221)
                                       0,                  // 222 -
                                  0x0008aebd,              // 223 - os_eszet           ((unsigned char)0xdf)
                                                           // **** 0xe0 ****
                                  0x002a5778,              // 224 - os_a_grave         ((unsigned char)0xe0)
                                  0x002a5778,              // 225 - os_a_acute         ((unsigned char)0xe1)
                                  0x002a5778,              // 226 - os_a_circumflex    ((unsigned char)0xe2)
                                  0x002a5778,              // 227 - os_a_tilda         ((unsigned char)0xe3)
                                  0x002a5778,              // 228 - os_a_umlaut        ((unsigned char)0xe4)
                                  0x002a5778,              // 229 - os_a_angstrem      ((unsigned char)0xe5)
                                       0,                  // 230 -
                                  0x002cae35,              // 231 - os_c_cedilla       ((unsigned char)0xe7)
                                  0x002a5778,              // 232 - os_e_grave         ((unsigned char)0xe8)
                                  0x002a5778,              // 233 - os_e_acute         ((unsigned char)0xe9)
                                  0x002a5778,              // 234 - os_e_circumflex    ((unsigned char)0xea)
                                  0x002a5778,              // 235 - os_e_umlaut        ((unsigned char)0xeb)
                                  0x002a4769,              // 236 - os_i_grave         ((unsigned char)0xec)
                                  0x002a4769,              // 237 - os_i_acute         ((unsigned char)0xed)
                                  0x002a4769,              // 238 - os_i_circumflex    ((unsigned char)0xee)
                                  0x002a4769,              // 239 - os_i_umlaut        ((unsigned char)0xef)
                                                           // **** 0xf0 ****
                                       0,                  // 240 -
                                  0x002a5778,              // 241 - os_n_tilda         ((unsigned char)0xf1)
                                  0x002a5778,              // 242 - os_o_grave         ((unsigned char)0xf2)
                                  0x002a5778,              // 243 - os_o_acute         ((unsigned char)0xf3)
                                  0x002a5778,              // 244 - os_o_circumflex    ((unsigned char)0xf4)
                                  0x002a5778,              // 245 - os_o_tilda         ((unsigned char)0xf5)
                                  0x002a5778,              // 246 - os_o_umlaut        ((unsigned char)0xf6)
                                       0,                  // 247 - os_div_sign        ((unsigned char)247)
                                       0,                  // 248 - os_o_crossed       ((unsigned char)248)
                                  0x002a5778,              // 249 - os_u_grave         ((unsigned char)0xf9)
                                  0x002a5778,              // 250 - os_u_acute         ((unsigned char)0xfa)
                                  0x002a5778,              // 251 - os_u_circumflex    ((unsigned char)0xfb)
                                  0x002a5778,              // 252 - os_u_umlaut        ((unsigned char)0xfc)
                                  0x002a5778,              // 253 - os_y_acute         ((unsigned char)221)
                                       0,                  // 254 -
                                  0x002a5778               // 255 - os_y_umlaut        ((unsigned char)0xff)

                                    };

#endif // LSTRIP
/* from XR_ATTR.C */

ROM_DATA _SHORT xr_type_merits[XT_COUNT] = XR_MERITS;
ROM_DATA _INT ratio_to_angle[8] = {10,31,54,83,123,190,337,1088};

/* ************************************************************************** */
/* *  Convert symbol from OS coding to REC internal                         * */
/* ************************************************************************** */
ROM_DATA_EXTERNAL  _UCHAR os_rec_conv_tbl[128];

_INT OSToRec(_INT sym)
 {

  sym &= 0x0FF;

  if (sym >= ST_CONV_RANGE) sym = os_rec_conv_tbl[sym-ST_CONV_RANGE];

  return sym;
 }

/* ************************************************************************** */
/* *  Convert symbol from REC internal coding to OS                         * */
/* ************************************************************************** */
#if  0
_INT RecToOS(_INT sym)
 {

  if (sym >= ST_CONV_RANGE)
   {
    _INT  i;
    _INT s = sym;

    sym = 0;

    for (i = 0; i < CONV_TBL_SIZE; i ++)
     {
      if (s == (_INT)(*p_os_rec_ctbl)[i][1])
       {
        sym = (_INT)(*p_os_rec_ctbl)[i][0];
        break;
       }
     }
   }
  return sym;
 }

#endif
/* ************************************************************************** */
/* *  Convert symbol from MAC internal coding to OS                         * */
/* ************************************************************************** */
#if PG_DEBUG || defined MAC_RW_CODING
ROM_DATA_EXTERNAL  _UCHAR os_mac_conv_tbl[128];
_INT MacToOS(_INT sym)
 {
  sym &= 0x0FF;

  if (sym >= 128)
   {
    _INT  i;
    _INT s = sym;

    sym = 0;

    for (i = 0; i < 128; i ++)
     {
      if (s == (_INT)os_mac_conv_tbl[i])
       {
        sym = i+128;
        break;
       }
     }
   }


  return sym;
 }

/* -------------------------------------------------------------------------- */
/* *  Convert symbol from OS internal coding to MAC                         * */

_INT OSToMac(_INT sym)
 {

  sym &= 0x0FF;

  if (sym >= 128) sym = os_mac_conv_tbl[sym-128];

  return sym;
 }

#endif //  #if PG_DEBUG || defined MAC_RW_CODING
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\peg_util.cpp ===
/* *************************************************************** */
/* *             Main routine support programs                   * */
/* *************************************************************** */

#include "ams_mg.h"
#include "hwr_sys.h"
#include "ws.h"
#include <limits.h>

#include "precutil.h"
#include "peg_util.h"

/* *************************************************************** */
/* ****** Word segmentation support routines ********************* */
/* *************************************************************** */

#define MU_MEMEXTR 1024

/* *************************************************************** */
/* *            Create strokes index array                       * */
/* *************************************************************** */
_INT CreateInkInfo(p_PS_point_type trace, _INT npoints, p_ink_info_type ink_info)
 {
  _INT   i, j; //, k;
  _INT   num_strokes;
  _INT   er = 0;
  p_VOID ptr;

  if (trace == _NULL || npoints < 2) goto err;


  if (ink_info->alloc_size < (_INT)((ink_info->num_points + npoints)*sizeof(PS_point_type)))
   {
    if (ink_info->ink == _NULL) 
     { 
      if ((ink_info->ink = (p_PS_point_type)HWRMemoryAlloc(npoints*sizeof(PS_point_type) + MU_MEMEXTR)) == _NULL) goto err;
      ink_info->alloc_size = npoints*sizeof(PS_point_type)+MU_MEMEXTR;
     }
     else
     {
      if ((ptr = HWRMemoryAlloc((ink_info->num_points + npoints)*sizeof(PS_point_type) + MU_MEMEXTR)) == _NULL) goto err;
      HWRMemCpy(ptr, ink_info->ink, ink_info->alloc_size);
      HWRMemoryFree(ink_info->ink);
      ink_info->ink = (p_PS_point_type)ptr;
      ink_info->alloc_size  = (ink_info->num_points + npoints)*sizeof(PS_point_type)+MU_MEMEXTR;
     }
   }

  num_strokes = ink_info->num_strokes;
  for (i = j = 0; i < npoints; i ++)
   {
    if (trace[i].y < 0)
     {
	  // Check for overflows
      if (   num_strokes >= WS_MAX_STROKES 
		  || (j+ink_info->num_points) >= SHRT_MAX )
	  {
		  er = -1; 
		  goto err;
	  }

      ink_info->strokes[num_strokes].start = (_SHORT)(j+ink_info->num_points);
      ink_info->strokes[num_strokes].len   = (_SHORT)((i+1) - j);

      num_strokes ++;
      j = i+1;
     }

    ink_info->ink[i+ink_info->num_points] = trace[i];
   }

  ink_info->num_strokes = num_strokes;
  ink_info->num_points += npoints;

  return ink_info->num_strokes;
err:
  return er;
 }

/* *************************************************************** */
/* *           Free ink memory                                   * */
/* *************************************************************** */
_INT FreeInkInfo(p_ink_info_type ink_info)
 {
  if (ink_info->ink) HWRMemoryFree(ink_info->ink);
  HWRMemSet(ink_info, 0, sizeof(ink_info_type));
 
  return 0;
 }
/* *************************************************************** */
/* *           Get stroke lenght in points                       * */
/* *************************************************************** */
_INT GetInkStrokeLen(_INT n, p_ink_info_type ink_info)
 {
  if (ink_info == _NULL) goto err;
  if (n < 0 || n >= ink_info->num_strokes) goto err;

  return ink_info->strokes[n].len;
err:
  return 0;
 }
/* *************************************************************** */
/* *           Get pointer to stroke points                      * */
/* *************************************************************** */
p_PS_point_type GetInkStrokePtr(_INT n, p_ink_info_type ink_info)
 {
  p_PS_point_type trace;

  if (ink_info == _NULL) goto err;
  if (n < 0 || n >= ink_info->num_strokes) goto err;

  trace = ink_info->ink;

  return &(trace[ink_info->strokes[n].start]);
err:
  return _NULL;
 }

/* *************************************************************** */
/* *           Get stroke points and stroke len                  * */
/* *************************************************************** */
_INT GetInkStrokeCopy(_INT n, p_PS_point_type place_for_stroke, p_ink_info_type ink_info)
 {
  _INT i;
  _INT len;
  p_PS_point_type trace, ptr, pp;

  if (ink_info == _NULL) goto err;
  if (place_for_stroke == _NULL) goto err;
  if (n < 0 || n >= ink_info->num_strokes) goto err;

  trace = (p_PS_point_type)(ink_info->ink);

  len = ink_info->strokes[n].len;
  ptr = &(trace[ink_info->strokes[n].start]);
  pp  = (p_PS_point_type)(place_for_stroke);

  for (i = 0; i < len; i ++, ptr ++, pp ++) *pp = *ptr;

  return len;
err:
  return 0;
 }

/* *************************************************************** */
/* *        Create trajectory for next word to recognize         * */
/* *************************************************************** */
_INT GetNextWordInkCopy(_INT flags, _INT start, p_ws_results_type pwsr, p_PS_point_type place_for_ink, p_ink_info_type ink_info, p_ws_word_info_type wswi, _SHORT *pn_str)
 {
	_INT i, l, m, n, t;
	_INT s_st = 0, wx = 0, wy = 0, dx, dy;
	_INT len;
	_INT combine_carry = 0, dash_id = 0;
	_INT max_x, loc, end, st, n_str;
	_INT nfs = -1;
	p_PS_point_type pp;
	word_strokes_type (_PTR w_str)[WS_MAX_WORDS];

	(*pn_str)	=	0;

	if (ink_info == _NULL) goto err;
	if (place_for_ink == _NULL) goto err;
	if (pwsr == _NULL) goto err;
	if (wswi == _NULL) goto err;
	
	HWRMemSet(wswi, 0, sizeof(*wswi));
	
	w_str = pwsr->pwsa;
	pp    = (p_PS_point_type)(place_for_ink);
	len   = 1;
	n_str = 0;
	
	for (m = start; m < pwsr->num_words && m < WS_MAX_WORDS-1; m ++)
	{
		if ((*w_str)[m].flags & WS_FL_PROCESSED)
			continue;
		
		if ((flags & RM_COMBINE_CARRY) && ((*w_str)[m].flags & WS_FL_CARRYDASH))
		{
			if (m == pwsr->num_words-1) 
				continue; // If there are no words on  the next line up to now

			combine_carry = 1;
			if (!((*w_str)[m].flags & WS_FL_TENTATIVE) &&
				!((*w_str)[m+1].flags & WS_FL_TENTATIVE))
				(*w_str)[m].flags |= WS_FL_PROCESSED;
		}
		else 
		if (!((*w_str)[m].flags & WS_FL_TENTATIVE)) 
			(*w_str)[m].flags |= WS_FL_PROCESSED;
		
		for (n = 0; n < (*w_str)[m].num_strokes; n ++)
		{
			if (n == 0 && ((*w_str)[m].flags & WS_FL_NL_GESTURE)) 
				continue; // NewLine gesture destroy
			
			l = (*w_str)[m].first_stroke_index;
			l = pwsr->stroke_index[l+n];
			t = GetInkStrokeCopy(l, &(pp[len]), ink_info);

			if (t == 0)
				goto err;

			len += t;
			n_str ++;
			//      pp[len-1].x = (_SHORT)n_str;
			
			if (nfs < 0) 
				nfs = l; // For des-file compatibility
		}
		
		//    if ((*w_str)[m].flags & WS_FL_TENTATIVE) continue;
		wswi->nword = m;
		wswi->flags = (*w_str)[m].flags;
		wswi->slant = (*w_str)[m].slope;
		wswi->wstep = (*w_str)[m].writing_step;
		wswi->hbord = (*w_str)[m].ave_h_bord;
		SetStrokeSureValuesWS((combine_carry == 2), m, pwsr, wswi);
		
		if (combine_carry == 2) // Transform trajectory
		{
			dx = wx - (*w_str)[m].word_x_st;
			dy = wy - (*w_str)[m].word_mid_line;
			
			for (i = s_st; i < len; i ++) // Glue second part
			{
				if (pp[i].y < 0)
					continue;
				
				pp[i].x += (_SHORT)dx;
				pp[i].y += (_SHORT)dy;
			}
		}
		
		if (combine_carry == 1) // Remember positions for first part
		{
			max_x = 0; loc = 0;

			for (i = 1; i < len; i ++) // remove dash
			{
				if (pp[i].y < 0) continue;
				if (pp[i].x > max_x) {max_x = pp[i].x; loc = i;}
			}
			
			for (i = loc, end = i+1; i < len; i ++)
			{
				if (pp[i].y < 0) 
				{
					end = i+1; 
					break;
				}
			}
				
			for (i = loc, st = i+1; i > 0; i --)
			{
				if (pp[i].y < 0) 
				{
					st = i+1; 
					break;
				}
			}
					
			dash_id = pp[end-1].x;
			HWRMemCpy(&(pp[st]), &(pp[end]), (len-end)*sizeof(pp[0]));
					
			len -= (end-st);
			
			wx   = (*w_str)[m].word_x_end; // + (*w_str)[m].writing_step;
			wy   = (*w_str)[m].word_mid_line;
			s_st = len;
			combine_carry = 2;
		}
		else 
		{
			if (n_str > 0) 
				break;
		} // If got something for cur word
	}
	
	(*pn_str)	=	(_SHORT)n_str;

	//  pp[0].x = (_SHORT)nfs;  // Debug value for DES-file
	pp[0].x = (_SHORT)((combine_carry == 2) ? dash_id : 0);  // ID of lost stroke -- to include in stroke lineout
	pp[0].y = -1;
	
	//  pp[len-1].x = (_SHORT)(n_str);  // Debug value for DES-file
	return (len == 1) ? 0 : len;


err:

	(*pn_str)	=	0;
	return 0;
}

/* *************************************************************** */
/* *          End of all                                         * */
/* *************************************************************** */
//
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\pegrec.cpp ===
/* ************************************************************************** */
/* *   Head functions of Pegasus recognizer                                 * */
/* ************************************************************************** */

#include "hwr_sys.h"
#include "zctype.h"

#include "ams_mg.h"
#include "lowlevel.h"
#include "xrword.h"
#include "ldbtypes.h"
#include "xrlv.h"
#include "ws.h"
#include "elk.h"

#include "precutil.h"
#include "peg_util.h"
#include "PegRec.h"
#include "PegRec_p.h"
#include "ligstate.h"

// -------------------- Defines and globals --------------------------

#define CGR_VER_ID     TEXT("Microsoft Transcriber 1.5")

#ifdef FOR_FRENCH
 #define CGR_LANG_STRING TEXT("(f)")
#elif  defined FOR_GERMAN
 #define CGR_LANG_STRING TEXT("(d)")
#elif  defined FOR_INTERNATIONAL
 #define CGR_LANG_STRING TEXT("(i)")
#else
 #define CGR_LANG_STRING TEXT("(e)")
#endif

#ifdef DTI_COMPRESSED_ON
 #define CGR_DTI_STRING TEXT("c")
#else
 #define CGR_DTI_STRING TEXT("u")
#endif

#ifdef SNN_FAT_NET_ON
 #define CGR_MLP_STRING TEXT("f")
#else
 #define CGR_MLP_STRING TEXT("s")
#endif

#define CGR_RELEASE_TYPE TEXT(" std")

//#define CGR_ID_STRING CGR_VER_ID CGR_LANG_STRING CGR_DTI_STRING CGR_MLP_STRING
#define CGR_ID_STRING CGR_VER_ID CGR_RELEASE_TYPE CGR_LANG_STRING 

#define PR_ANSW_EXTALLOC       256
#define PR_TOOMANYWORDSWAITING   5

#define WST_DEF_H_LINE          80
#define WST_DEF_S_DELAY          3
#define WST_DEF_UNSURE_LEVEL    50

#define PM_ALTSEP                1 /* Recognized word list alternatives separator */
#define PM_LISTSEP               2 /* Recognized word list wordlist separator */
#define PM_LISTEND               0 /* Recognized word list end */

// ------------------------- Structures -------------------------------------


// ------------------------- Prototypes -------------------------------------

_INT  PegRecWord(p_rec_inst_type pri);
_INT  PegRecSymbol(p_rec_inst_type pri, p_UCHAR answ);
_INT  PegRecInit(p_rec_inst_type _PTR pri);
_INT  PegRecClose(p_rec_inst_type _PTR pri);
_INT  PegAddToAnsw(p_rec_inst_type pri, p_UCHAR answ, p_INT weights, _INT ns, p_INT stroke_ids);
_INT  PegRegNewAnsw(p_rec_inst_type pri, _INT er);
_INT  PegResetTentativeStorage(_INT st_index, p_rec_inst_type pri);
_INT  PegValidateNextTentativeWord(_INT nparts, p_rec_inst_type pri);
_INT  PegCleanUpContext(p_rec_inst_type pri);
_INT  PegCheckWordInDict(p_CHAR word, CGRHDICT h_dict);
p_INT PegGetAnswerBlockPtr(_INT nw, p_rec_inst_type pri);

_INT  WordStrokes(p_rec_inst_type pri, PS_point_type _PTR stroke, p_ws_control_type pwsc, p_ws_results_type wsr);

extern "C" void FreeBearSegmentation (rc_type _PTR prc);

#ifdef DBG
 #define PEGREC_DEBUG       /* Allows to print out log of recognition proceedings */
#endif

#ifdef PEGREC_DEBUG
// #define TRACE_DMP_DBG
 void PegDebugPrintf(char * format, ...);
 int  DebTraceRec(CGRCTX context);
#endif

PRP_01

ROM_DATA_EXTERNAL _ULONG img_voc[];
ROM_DATA_EXTERNAL _ULONG img_vocpref[];
ROM_DATA_EXTERNAL _ULONG img_vocsuff[];
ROM_DATA_EXTERNAL _UCHAR sp_vs_q_ts[];
ROM_DATA_EXTERNAL _UCHAR sp_vs_q_bd[];

ROM_DATA_EXTERNAL _UCHAR alpha_charset[];
#if defined (FOR_SWED)
ROM_DATA_EXTERNAL _UCHAR alpha_charset_swe[];
ROM_DATA_EXTERNAL _UCHAR alpha_charset_eng[];
#elif defined (FOR_INTERNATIONAL)
ROM_DATA_EXTERNAL _UCHAR alpha_charset_eng[];
#endif /*FOR_SWED*/
ROM_DATA_EXTERNAL _UCHAR lpunct_charset[];
ROM_DATA_EXTERNAL _UCHAR epunct_charset[];
ROM_DATA_EXTERNAL _UCHAR other_charset[];
ROM_DATA_EXTERNAL _UCHAR num_charset[];
ROM_DATA_EXTERNAL _UCHAR math_charset[];

ROM_DATA_EXTERNAL tr_descr_type  img_trd_header;
ROM_DATA_EXTERNAL _ULONG         img_trd_body[];

#if VER_RECPROTECTED
 #include <windows.h> // For GetTickCount
 int g_rec_protect_locked = 2;
#endif

#ifdef __cplusplus
extern "C"
#endif


/* *************************************************************** */
/* *  Get info string and capabilities of the recognizer         * */
/* *************************************************************** */
int CgrGetRecIDInternal(p_CGR_ID_type p_inf)
 {

  if (p_inf == 0) goto err;

  #if VER_RECPROTECTED
  if (g_rec_protect_locked == 2)
   {
    if ((GetTickCount() & 0x0FFFFFFF) - (p_inf->capabilities&0x0FFFFFFF) < 1000) g_rec_protect_locked = 0;
     else g_rec_protect_locked = 1; // remain locked
   }
  #endif //   #if VER_RECPROTECTED

  p_inf->capabilities  = PEG_CPFL_CURS | PEG_CPFL_SPVSQ;

  #if defined FOR_INTERNATIONAL
  p_inf->capabilities |= PEG_CPFL_INTER;
  #endif

  #ifdef PEG_RECINT_UNICODE
  {	
	wcsncpy(p_inf->id_string, CGR_ID_STRING, PEG_RECID_MAXLEN);
  }
  #else
	  strncpy (p_inf->id_string, (_STR)CGR_ID_STRING, PEG_RECID_MAXLEN);
	p_inf->id_string[PEG_RECID_MAXLEN - 1] = 0;
  #endif

  return PEG_RECINT_ID_001;
err:
  return 0;
 }

/* *************************************************************** */
/* *  Create context for recognition                             * */
/* *************************************************************** */
CGRCTX CgrCreateContextInternal(void)
 {
  p_rec_inst_type pri;


// ---------- Let's allocate and init what's needed -----------------------

  if (PegRecInit(&pri)) goto err;
  if (pri == _NULL) goto err;

  PegCleanUpContext(pri);

  #ifdef PEGREC_DEBUG
  PegDebugPrintf("CreateContext: Ok. pri = %x", pri);
  #endif

  return (CGRCTX)pri;
err:
  return _NULL;
 }

void   avp_dbg_close();

/* *************************************************************** */
/* *  Close recognition context and free all the memory          * */
/* *************************************************************** */
int CgrCloseContextInternal(CGRCTX context)
 {
  p_rec_inst_type pri = (p_rec_inst_type)(context);

  if (pri == _NULL) goto err;

  CgrCloseSessionInternal(context, NULL, TRUE);
  PegCleanUpContext(pri);
  PegRecClose(&pri);

  #ifdef PEGREC_DEBUG
  PegDebugPrintf("CloseContext:\n PRI: %x", pri);
  #endif

//  avp_dbg_close();
  return 0;
err:
  return 1;
 }
/* *************************************************************** */
/* *  Open recognition session and init context to default state * */
/* *************************************************************** */
int CgrOpenSessionInternal(p_CGR_control_type ctrl, CGRCTX context)
 {
  p_rec_inst_type pri = (p_rec_inst_type)(context);
  p_rc_type       prc = &pri->rc;

  // ----------------- Absorb cotrol values --------------------------

  pri->flags                = ctrl->flags;
  pri->sp_vs_q              = ctrl->sp_vs_q;
  pri->InfoCallBack         = ctrl->InfoCallBack;
  pri->ICB_param            = ctrl->ICB_param;

  // ---------------- RC defaults -------------------------------------

  prc->enabled_cs     = CS_ALPHA|CS_NUMBER|CS_LPUNCT|CS_EPUNCT|CS_OTHER|CS_MATH;
  prc->enabled_ww     = WW_PALMER|WW_BLOCK|WW_GENERAL;
  #if  defined(FOR_ENGLISH)
    prc->enabled_languages = EL_ENGLISH;
  #elif  defined(FOR_FRENCH)
    prc->enabled_languages = EL_FRENCH;
  #elif  defined(FOR_GERMAN)
    prc->enabled_languages = EL_GERMAN;
  #else
    prc->enabled_languages = EL_ENGLISH|EL_GERMAN|EL_FRENCH|EL_SWEDISH;
  #endif /* !ENGLISH */

  prc->algorithm      = XRWALG_XR_SPL;
  prc->corr_mode      = 0;
  prc->xrw_mode       = XRWM_VOC|XRWM_LD|XRWM_CS|XRWM_TRIAD|XRWM_MWORD;
  prc->answer_level   = 15;
  prc->sure_level     = 85;
  prc->answer_allow   = 30;
  prc->bad_amnesty    = 12;
  prc->caps_mode      = 0;
  prc->f_xd_data      = XRLV_DATA_USE | XRLV_DATA_SAVE; // Enables XRLV continue mode

  prc->rec_mode       = RECM_TEXT;
  prc->low_mode       = LMOD_CHECK_PUNCTN|LMOD_BORDER_GENERAL|LMOD_FREE_TEXT;

  prc->ws_handle      = 0; // <- auto WS segmentation with learning, was 6;

  prc->pvFactoid	=	ctrl->pvFactoid;
  prc->szPrefix     =   ctrl->szPrefix;
  prc->szSuffix		=	ctrl->szSuffix;

//  prc->xrw_min_wlen    = 0;
//  prc->xrw_max_wlen    = 0;
//  prc->xrw_chr_size    = 0;
//  prc->use_len_limits  = 0;
//  prc->lrn_learn_suff  = 2;
//  prc->lrn_vocvar_rew  = 5;
//  prc->fly_learn       = 0;    
  prc->use_vars_inf    = 1;
//  prc->lmod_border_used= 0;
//  prc->fl_fil          = 0;
//  prc->fl_post         = 0;
//  prc->ws_handle       = 6;
//  prc->FakeRecognition = 0;
//  prc->fl_chunk        = 0;
//  prc->fl_chunk_let    = 0;

  // ------------------ Modifiers & pointers ----------------------------

  pri->user_dict			= 	ctrl->h_user_dict;
  prc->vocptr[0]			=	pri->user_dict;
  
  if (pri->sp_vs_q < 0) pri->sp_vs_q = 0;
  if (pri->sp_vs_q > 9) pri->sp_vs_q = 9;
  prc->xrw_tag_size = sp_vs_q_ts[pri->sp_vs_q];
  prc->bad_distance = sp_vs_q_bd[pri->sp_vs_q];

  if (pri->flags & PEG_RECFL_DICTONLY) prc->xrw_mode &= ~(XRWM_LD|XRWM_CS|XRWM_TRIAD);

  if (pri->flags & PEG_RECFL_COERCE) prc->xrw_mode	&= ~(XRWM_CS|XRWM_TRIAD);

  if (pri->flags & PEG_RECFL_SEPLET)   prc->corr_mode = XRCM_SEPLET;
  if (pri->flags & PEG_RECFL_NUMONLY) {prc->xrw_mode = XRWM_LD|XRWM_CS; prc->enabled_cs = CS_NUMBER|CS_OTHER|CS_MATH;}

  // comment by Ahmad abdulkader (ahmadab) 04/25/00
  // We'll check the flag instead
  //if (pri->main_dict.hvoc_dir != 0 && (prc->xrw_mode & XRWM_MWORD)) // Dictionary segmentation makes sense only in presence of dictionary!
  if ((prc->xrw_mode & XRWM_MWORD)) // Dictionary segmentation makes sense only in presence of dictionary!
   {
    prc->lrn_class_level = 50; //WS_SURE_LEVEL;
    prc->lrn_min_class   = 50; //WS_SURE_LEVEL;
   }
   else
   {
    prc->lrn_class_level = 0; //WS_SURE_LEVEL;
    prc->lrn_min_class   = 0; //WS_SURE_LEVEL;
   }

  #if defined (FOR_SWED)
  if (pri->flags & PEG_RECFL_INTL_CS) prc->alpha_charset = (p_UCHAR)alpha_charset_swe;
   else prc->alpha_charset = (p_UCHAR)alpha_charset_eng;
  #elif defined (FOR_FRENCH)
  prc->alpha_charset = (p_UCHAR)alpha_charset;
  #elif defined (FOR_INTERNATIONAL)
  if (pri->flags & PEG_RECFL_INTL_CS) prc->alpha_charset = (p_UCHAR)alpha_charset;
   else prc->alpha_charset = (p_UCHAR)alpha_charset_eng;
  #else
  prc->alpha_charset = (p_UCHAR)alpha_charset;
  #endif

  prc->num_charset    = (p_UCHAR)num_charset;
  prc->math_charset   = (p_UCHAR)math_charset;
  prc->lpunct_charset = (p_UCHAR)lpunct_charset;
  prc->epunct_charset = (p_UCHAR)epunct_charset;
  prc->other_charset  = (p_UCHAR)other_charset;

  pri->wsc.num_points       = 0;
  pri->wsc.flags            = 0;
  pri->wsc.sure_level       = prc->lrn_class_level; // WST_DEF_UNSURE_LEVEL;
  pri->wsc.word_dist_in     = prc->ws_handle; //+1;
  pri->wsc.line_dist_in     = 0;
  pri->wsc.def_h_line       = WST_DEF_H_LINE;
  pri->wsc.x_delay          = WST_DEF_S_DELAY; // 0; // Delay in 'letters' or 0 -- only on line end

  PegCleanUpContext(pri);

  pri->ok = 1;


  #ifdef PEGREC_DEBUG
  PegDebugPrintf("OpenSession: Flags: %x SP_VS_Q: %d MainVoc: %d UserVoc: %x Yield: %x", 
              (int)pri->flags, (int)pri->sp_vs_q, 1, pri->user_dict, pri->InfoCallBack);
  #endif

  #ifdef TRACE_DMP_DBG
  pri->InfoCallBack = 0; 
  DebTraceRec((CGRCTX*)pri);
  #endif

  return 0;
 }
/* *************************************************************** */
/* *  Recognizes incoming strokes and sends results as ready     * */
/* This version of closesession recieves an XRC from Avalanche.  */
/* The xrc is set in rc to be used later on during reco
/* *************************************************************** */


int CgrCloseSessionInternal(CGRCTX context, void *pXrc, int bRecognize)
{
  int err = 1;
  p_rec_inst_type pri = (p_rec_inst_type)(context);

  if (pri == _NULL) goto err;
  if (!pri->ok) goto err;

  pri->rc.pXrc = pXrc;

  err = CgrRecognizeInternal(0, 0, context, bRecognize);

  FreeInkInfo(&pri->ink_info);

  pri->g_stroke_num  = 0;
  pri->baseline.size = 0;
  pri->num_tentative_words = 0;

  pri->ok = 0;

  #ifdef PEGREC_DEBUG
  PegDebugPrintf("CloseSession: PRI: %x", pri);
  #endif

err:
  return err;
}

/* *************************************************************** */
/* *  Recognizes incoming strokes and sends results as ready     * */
/* *************************************************************** */
int CgrRecognizeInternal(int npoints, p_CGR_point_type strokes_win, CGRCTX context, int bRecognize)
{
	p_PS_point_type		strokes			=	(p_PS_point_type)strokes_win;

	_INT				er				=	0, 
						i, 
						j, 
						k,
						num_strokes, 
						prev_nstrokes, 
						len, 
						f, 
						cur_nstrokes,						
						skip, 
						min_next_word, 
						cur_tt_word;

	PS_point_type		_PTR p_tr		=	_NULL,
						_PTR stroke;

	p_rec_inst_type		pri				=	(p_rec_inst_type)(context);
	_SHORT				n_str;

	if (pri == _NULL || !pri->ok)
	{
		goto err;
	}

	p_tr	= (PS_point_type _PTR) 
		HWRMemoryAlloc(sizeof(PS_point_type)*(pri->ink_info.num_points+npoints+4));

	if (p_tr == _NULL) 
	{
		goto err;
	}

	prev_nstrokes		= 
	num_strokes			= pri->ink_info.num_strokes;
	cur_nstrokes		= 0;

	// 0; // Delay in 'letters' or 0 -- only on line end
	pri->wsc.x_delay	= WST_DEF_S_DELAY; 

	if (pri->InfoCallBack != _NULL)
	{
		if ((*pri->InfoCallBack)(pri->ICB_param) == 1) 
		{
			// Do not attempt segmentation to words if 
			// there are more strokes coming (save time)
			pri->wsc.x_delay = 0; 
		}
	}

	PRP_02

	// --------- Add current stroke(s) to ink storage -----------------------
	if (npoints > 0) 
	{
		// ------------------- Label new strokes ------------------------------
		HWRMemCpy(p_tr, strokes, npoints*sizeof(PS_point_type)); 
		len = npoints;

		// Terminate stroke if was not terminated
		if (p_tr[len-1].y >= 0) 
		{
			p_tr[len++].y = -1; 
		}

		for (i = 0, stroke = p_tr; i < len; i ++, stroke ++) 
		{
			if (stroke->y < 0) 
			{
				stroke->x = (_SHORT)(pri->g_stroke_num + cur_nstrokes++);
			}
		}

		// ------------------- Put them in store ------------------------------
		num_strokes	= CreateInkInfo(p_tr, len, &pri->ink_info);

		if (num_strokes == 0) 
		{
			goto err;
		}

		// Stroke storage is overfilled!!!
		if (num_strokes < 0) 
		{
			// Can't help if nothing developed yet ...
			if (pri->wsr.num_finished_words == 0) 
			{
				goto err; 
			}

			// ------- Get all unused strokes --------------------------
			for (i = len = 0; i < prev_nstrokes; i ++)
			{
				for (j = f = 0; !f && j < pri->wsr.num_words; j ++)
				{
					if (((*pri->wsr.pwsa)[j].flags & WS_FL_PROCESSED) == 0) 
					{
						continue;
					}

					for (k = 0; !f && k < (*pri->wsr.pwsa)[j].num_strokes; k ++)
					{
						if (pri->wsr.stroke_index[k+(*pri->wsr.pwsa)[j].first_stroke_index] == i) 
						{
							f = 1;
						}
					}
				}

				if (f) 
				{
					continue;
				}

				GetInkStrokeCopy(i, p_tr+len, &pri->ink_info);
				len	+= GetInkStrokeLen(i, &pri->ink_info);
			}

			// ------- Destroy old store ------------------------------
			FreeInkInfo(&pri->ink_info);
			prev_nstrokes	= 
			num_strokes		= 0;

			// ------------------- Label new strokes ------------------------------
			HWRMemCpy(p_tr+len, strokes, npoints*sizeof(PS_point_type));

			if (p_tr[len+npoints-1].y >= 0) 
			{
				p_tr[len+(npoints++)].y = -1; // Terminate stroke if was not terminated
			}

			for (i = cur_nstrokes = 0, stroke = p_tr+len; i < npoints; i ++, stroke ++) 
			{
				if (stroke->y < 0) 
				{
					stroke->x = (_SHORT)(pri->g_stroke_num + cur_nstrokes++);
				}
			}

			len += npoints;

			// ------- Recreate stroke storage -------------------------
			if (len) 
			{
				if ((num_strokes = CreateInkInfo(p_tr, len, &pri->ink_info)) <= 0) 
				{
					goto err;
				}
			}

			if (num_strokes <= 0) 
			{
				goto err;
			}

			// ------- Close previous session of segmentation ----------
			pri->wsc.flags		|=	WS_FL_LAST;
			pri->wsc.num_points	=	0;

			if (WordStrokes(pri, _NULL, &pri->wsc, &pri->wsr)) 
			{
				goto err;
			}

			pri->wsr.num_words				= 
			pri->wsr.num_finished_words		= 
			pri->wsr.num_finished_strokes	=	0;
		}

		pri->g_stroke_num += cur_nstrokes;
	}

	// ---------------- Process Trace ----------------------------------------------

	// If segmentation is enabled
	if ((pri->flags & PEG_RECFL_NSEG) == 0)  
	{
		// --------- Feed new info to segmentation ------------------------------
		for (i = prev_nstrokes; i <= num_strokes; i ++)
		{
			if (i < num_strokes)
			{
				stroke = (p_PS_point_type)GetInkStrokePtr(i, &pri->ink_info);
				len    = GetInkStrokeLen(i, &pri->ink_info);

				if (stroke == _NULL || len == 0) 
				{
					goto err;
				}

				// WS_FL_SPGESTURE;
				pri->wsc.flags		= 0; 
				pri->wsc.num_points = len;

				if (WordStrokes(pri, stroke, &pri->wsc, &pri->wsr)) 
				{
					break;
				}
			}
			else
			{
				if (npoints == 0)
				{
					pri->wsc.flags			|=	WS_FL_LAST;
					pri->wsc.num_points		=	0;

					WordStrokes(pri, _NULL, &pri->wsc, &pri->wsr);
				}
			}
		}

		// -------------- Let's see if any new words resulted --------------------
		if (((pri->flags & PEG_RECFL_NCSEG) == 0) || (pri->wsc.flags & WS_FL_LAST))
		{
			// If there are strokes waiting, let's get some more before recognizing
			skip = 0;     

			if (pri->InfoCallBack != _NULL) 
			{
				if ((*pri->InfoCallBack)(pri->ICB_param) == 1) 
				{
					skip = 1;
				}
			}

			for (i = k = 0; i < pri->wsr.num_words && i < WS_MAX_WORDS-1; i ++)
			{
				if (((*pri->wsr.pwsa)[i].flags & WS_FL_PROCESSED) == 0) 
				{
					k ++;
				}
			}

			// Too many words in line or Need to recognize on last, let's recognize them
			if (k > PR_TOOMANYWORDSWAITING || (pri->wsc.flags & WS_FL_LAST)) 
			{
				skip = 0; 
			}

			// AHMADAB: in linebreaking mode we do not want to recognize
			if (!bRecognize)
			{
				skip = 1;
			}

			// Let's recognize all ready words and try tentative one
			if (!skip) 
			{
				cur_tt_word		= 
				min_next_word	= 0;

				// Changed 1st parameter from RM_COMBINE_CARRY to zero. Had some -ve ink problems when attempting to process dashes in the 
				// function GetNextWordInkCopy. Also added an extra n_str parameter to pass back the # of strokes.
				while ((len = GetNextWordInkCopy(0, min_next_word, &pri->wsr, p_tr, &pri->ink_info, &pri->wswi, &n_str)) > 0)
				{
					if (pri->wswi.flags & WS_FL_TENTATIVE)
					{
						// If not allowed to work with tentative words
						if (!(pri->flags & PEG_RECFL_TTSEG)) 
						{
							break; 
						}

						// If there was appropriate tentative word, skip to next
						if (	cur_tt_word < pri->num_tentative_words &&  
								pri->tentative_list[cur_tt_word].nword	== pri->wswi.nword &&
								pri->tentative_list[cur_tt_word].len	== len
							)
						{
							cur_tt_word		++;

							// Advance to the next tentative word
							min_next_word	= pri->wswi.nword + 1; 

							PRP_03
							continue;
						}

						// Allow interrupting of recognition
						pri->rc.pFuncYield	= pri->InfoCallBack; 
						pri->rc.FY_param	= pri->ICB_param;    

						// Tentative did not prove itself from this point, remove
						PegResetTentativeStorage(cur_tt_word, pri); 
					}
					else
					{
						// If there was appropriate tentative word
						if (	pri->num_tentative_words > 0 &&  
								pri->tentative_list[0].nword == pri->wswi.nword &&
								pri->tentative_list[0].len   == len)
						{
							if (PegValidateNextTentativeWord(pri->tentative_list[0].nparts, pri)) 
							{
								break;
							}

							HWRMemCpy(&pri->tentative_list[0], &pri->tentative_list[1], sizeof(tentative_list_type)*(PR_TENTATIVELIST_SIZE-1));
							pri->num_tentative_words --;
							
							PRP_04
							continue;
						}
						else 
						{
							// Tentative did not prove itself from this point, remove
							PegResetTentativeStorage(0, pri); 
						}

						// No interruption on real word recognition
						pri->rc.pFuncYield = _NULL;  
					}

					// If there is unfinished word, restore XD
					if (pri->rc.p_xd_data) 
					{
						if	(	pri->unfinished_data.nword == pri->wswi.nword && 
								pri->unfinished_data.len   == len
							)
						{   // If word matches current segmentation, use prev XD.
							PRP_05
						}
						// If word does not match, release unfinished context
						else 
						{
							XrlvDealloc((p_xrlv_data_type _PTR)&pri->rc.p_xd_data);
							PRP_06
							//pri->rc.p_xd_data = _NULL;
						}
					}

					PRP_07

					pri->rc.trace = p_tr;
					pri->rc.ii    = (_SHORT)len;
					pri->rc.n_str	= n_str;

					// < ------ Call recognizer
					er = PegRecWord(pri);  

					PRP_08

					// Save XD for possible next do-recognition
					if (pri->rc.p_xd_data) 
					{
						pri->unfinished_data.nword = pri->wswi.nword;
						pri->unfinished_data.len   = len;
						//pri->unfinished_data.pxd   = pri->rc.p_xd_data;
					}

					// Recognition was aborted
					if (er == XRLV_YIELD_BREAK) 
					{
						break; 
					}

					if (pri->wswi.flags & WS_FL_TENTATIVE)
					{
						i = pri->num_tentative_words;

						// If too many tentative words, enough!
						if (i >= PR_TENTATIVELIST_SIZE) 
						{
							break; 
						}

						pri->tentative_list[i].nword	= pri->wswi.nword;
						pri->tentative_list[i].nparts	= pri->rr_nparts;
						pri->tentative_list[i].len		= len;
						pri->num_tentative_words		++;
						cur_tt_word						++;

						// Advance to the next tentative word
						min_next_word = pri->wswi.nword + 1; 
					}

					// If there are more strokes waiting, let's go get them
					if (pri->InfoCallBack != _NULL) 
					{
						if ((*pri->InfoCallBack)(pri->ICB_param) == 1) 
						{
							break;
						}
					}
				}
			}
		}
	}
	// ------------------- If segmentation was off ------------------------
	else  
	{
		if (npoints == 0)
		{
			for (i = 0, len = 1; i < num_strokes; i ++)
			{
				GetInkStrokeCopy(i, p_tr+len, &pri->ink_info);
				len += GetInkStrokeLen(i, &pri->ink_info);
			}

			pri->rc.trace		= p_tr;
			pri->rc.ii			= (_SHORT)len;
			pri->rc.trace->x	= 0; 
			pri->rc.trace->y	= -1;
			pri->rc.n_str		= (_SHORT)num_strokes;

			// Call recognizer
			er = PegRecWord(pri);      
		}
	}

	// ----------- Free memory and say chao ---------------------------------
	//  if (er == 1 || pri->recres == _NULL && npoints == 0) goto err;
	if (p_tr) 
	{
		HWRMemoryFree(p_tr);
	}

	return 0;

err:
	if (p_tr) 
	{
		HWRMemoryFree(p_tr);
	}

	return 1;
}

/* ************************************************************************** */
/* *  Recognize one symbol                                                  * */
/* ************************************************************************** */
int CgrRecognizeSymbolInternal(int npoints, p_CGR_point_type strokes_win, p_CGR_baseline_type baseline, CGRCTX context)
 {
  p_PS_point_type  strokes = (p_PS_point_type)strokes_win;
  _INT             err = 0;
  _INT             mwl;
  p_rec_inst_type  pri = (p_rec_inst_type)(context);


  if (pri == _NULL) goto err;

  PegCleanUpContext(pri);

  pri->rc.trace = strokes;
  pri->rc.ii    = (_SHORT)npoints;
  pri->rc.n_str	= 1;

  pri->baseline = *baseline;

  mwl = pri->rc.xrw_max_wlen;
  pri->rc.xrw_max_wlen = 1;

// -------------- Recognize it! ------------------------------------------------

  err += PegRecWord(pri);      // Call recognizer

// --------------- Simple! Da? --------------------------------------------------

  pri->rc.xrw_max_wlen = (_SHORT)mwl;

  if (err || pri->recres == _NULL) goto err;

 return 0;
err:
  PegCleanUpContext(pri);
  return 1;
 }

/* ************************************************************************** */
/* *  Returns current recognized words & info                               * */
/* ************************************************************************** */
long CgrGetAnswersInternal(int what, int nw, int na, CGRCTX context)
 {
  _INT   i, j;
  _ULONG result = 0;
  p_INT  iptr;
  p_UCHAR ptr;
  p_rec_inst_type pri = (p_rec_inst_type)(context);

  if (pri == _NULL) goto err;
  if (nw  >= pri->rr_num_answers) goto err;

  switch(what)
   {
    case CGA_NUM_ANSWERS: result = pri->rr_num_answers; break;

    case CGA_NUM_ALTS:
      if ((iptr = PegGetAnswerBlockPtr(nw, pri)) == _NULL) goto err;
      ptr = (p_UCHAR)(iptr+1);
      for (i = j = 0; i < ((*iptr-1) << 2); i ++) if (ptr[i] == 0) j ++;
      result = j;
      break;

    case CGA_ALT_WORD:
      if ((iptr = PegGetAnswerBlockPtr(nw, pri)) == _NULL) goto err;
      ptr = (p_UCHAR)(iptr+1);
      for (i = j = 0; i < ((*iptr-1) << 2); i ++)
       { 
        if (ptr[i] == 0 || i == 0) 
         {
          if (j == na) 
           {
            _INT n;
            if (i) n = i+1; else n = i; // Move from prev zero
            #ifdef PEG_RECINT_UNICODE
			MultiByteToWideChar(CP_ACP, 0, (LPCSTR)&ptr[n], -1, pri->uans_buf, w_lim);
            result = (_ULONG)(&pri->uans_buf[0]); 
            #else
            result = (_ULONG)(&ptr[n]); 
            #endif
            break;
           }
           else j++;
         }
       }

      break;

    case CGA_ALT_WEIGHT:
      if ((iptr = PegGetAnswerBlockPtr(nw, pri)) == _NULL) goto err;
      iptr += *iptr; // Advance to weights block
      result = (_ULONG)(*(iptr+1+na));
      break;

    case CGA_ALT_NSTR:
      if ((iptr = PegGetAnswerBlockPtr(nw, pri)) ==_NULL) goto err;
      iptr += *iptr; // Advance to weights block
      iptr += *iptr; // Advance to strokes block
      result = (_ULONG)((*iptr)-1);
      break;

    case CGA_ALT_STROKES:
      if ((iptr = PegGetAnswerBlockPtr(nw, pri)) == _NULL) goto err;
      iptr += *iptr; // Advance to weights block
      iptr += *iptr; // Advance to strokes block
      result = (_ULONG)(iptr+1);
      break;

	default: goto err;
   }

  return result;
err:
  return _NULL;
 }



/* ************************************************************************** */
/* *  Get pointer to requested answer block                                 * */
/* ************************************************************************** */
p_INT PegGetAnswerBlockPtr(_INT nw, p_rec_inst_type pri)
 {
  _INT   i;
  p_INT  iptr;

  if (pri->recres == _NULL) goto err;
  if (nw > pri->rr_num_answers) goto err;

  for (i = 0, iptr = (p_INT)pri->recres; i < nw*3; i ++) iptr += *iptr;

  return iptr;
err:
  return _NULL;
 }

/* ************************************************************************ */
/* *   Main recognition function for one word                             * */
/* ************************************************************************ */
_INT PegRecWord(p_rec_inst_type pri)
 {
  _INT  size, pos, nl, er = 0;
  RCB_inpdata_type rcb  = {0};

  
//DWORD time;
//CHAR  str[64];

  if (!pri->ok) goto err;

//time = GetTickCount();
  
// --------------------- Preprocess trace --------------------------------------

  PreprocessTrajectory(&pri->rc); // May ne moved lower, when trace will not be rewritten by replay of tentaive words

// --------------------- Low-level block, optional -----------------------------

  if (pri->rc.p_xd_data == _NULL || !(pri->rc.f_xd_data & XRLV_DATA_USE))
   {
   // ------------- Set basic data for Stroka --------------------

    rcb.trace            = pri->rc.trace;
    rcb.num_points       = pri->rc.ii;

    if (pri->rr_num_answers == 0)
     {
      rcb.flags        |= (_SHORT)(RCBF_NEWAREA);
      rcb.prv_size      =
      rcb.prv_dn_pos    =
      rcb.prv_size_sure =
      rcb.prv_pos_sure  = 0;
     }
     else
     {
      rcb.prv_size      = pri->rc.stroka.size_out;
      rcb.prv_dn_pos    = pri->rc.stroka.dn_pos_out;
      rcb.prv_size_sure = pri->rc.stroka.size_sure_out;
      rcb.prv_pos_sure  = pri->rc.stroka.pos_sure_out;
     }

    rcb.flags          |= (_SHORT)RCBF_PREVBORD;

    if (GetWSBorder(pri->wswi.nword, &pri->wsr, &size, &pos, &nl) == 0)
     {
      rcb.ws_size        = (_SHORT)size;
      rcb.ws_dn_pos      = (_SHORT)pos;
      rcb.flags         |= (_SHORT)RCBF_WSBORD;
      if (nl) rcb.flags |= (_SHORT)(RCBF_NEWLINE);
     }

    if (pri->baseline.size)
     {
      rcb.bx_size       = (_SHORT)(pri->baseline.size);
      rcb.bx_dn_pos     = (_SHORT)(pri->baseline.base);
      rcb.flags         |= (_SHORT)RCBF_BOXBORD;
     }

    SetRCB(&rcb, &(pri->rc.stroka));

  // --------------------- Preprocess trace --------------------------------------

//    PreprocessTrajectory(&pri->rc); Moved up, to escape rewriting trajectory without desloping

  // --------------------- Low level start ---------------------------------------

    er = (low_level(pri->rc.trace, &pri->xrdata, &pri->rc) != SUCCESS);

  //time = GetTickCount()-time;
  //wsprintf(str, L"Low Time: %d.%03ds", (_INT)(time/1000),  (_INT)(time%1000));
  //MessageBox(0,str,L"CalliGrapher",MB_OK);

  // --------------------- Mword flags -------------------------------------------

    SetMultiWordMarksDash(&pri->xrdata);
    SetMultiWordMarksWS(pri->rc.lrn_min_class, &pri->xrdata, &pri->rc);
   }

// --------------------- Protection scramble -------------------------------------

  #if VER_RECPROTECTED
  {for (int i = 0; g_rec_protect_locked && i < pri->xrdata.len; i ++) (*pri->xrdata.xrd)[i].xr.type += 1;}
  #endif

//if (g_rec_protect_locked) MessageBox(NULL, "Locked", "Rec", MB_OK|MB_SETFOREGROUND);  

// --------------------- Upper level start ---------------------------------------

  if (!er) er = xrlv(pri);

  PegRegNewAnsw(pri, er);

  FreeRWGMem(&pri->rwg);

  return er;
err:
  PegRegNewAnsw(pri, 1);
  FreeRWGMem(&pri->rwg);
  return 1;
 }
// Create a temporary context and copy fixed 
// (DTI database information from the  global context
CGRCTX getContextFromGlobal(CGRCTX	g_context)
{
	p_rec_inst_type		pri, g_pri = (p_rec_inst_type)g_context;
	
	if ((pri = (p_rec_inst_type)HWRMemoryAlloc(sizeof(rec_inst_type))) == _NULL) 
	{
		return NULL;
	}

	memcpy(pri, g_context, sizeof(rec_inst_type));

	if (AllocXrdata(&pri->xrdata, XRINP_SIZE)) goto err;


	HWRMemCpy((p_VOID)(&pri->p_trh), (p_VOID)(&img_trd_header), sizeof(pri->p_trh));
	
	pri->p_trh.p_tr = (p_UCHAR)(&img_trd_body[0]);
	
	pri->rc.dtiptr    = (p_VOID)(pri->p_dtih);
	
	pri->rc.vocptr[0] = pri->user_dict;
	
	pri->rc.tr_ptr    = (p_VOID)(&pri->p_trh);
	
	pri->wsr.pwsa     = &(pri->w_str);
	pri->rc.p_ws_wi   = (p_VOID)&pri->wswi;
	
	pri->rc.hSeg		=	NULL;
	
	pri->cGap			=	0;

	return (CGRCTX)pri;

err:
	if (pri) HWRMemoryFree(pri);
	return NULL;
}



/* ************************************************************************ */
/* *   Init recognition instance                                          * */
/* ************************************************************************ */
_INT PegRecInit(p_rec_inst_type _PTR ppri)
 {
  p_rec_inst_type pri;

//  if (*ppri != _NULL) goto err;

  if ((pri = (p_rec_inst_type)HWRMemoryAlloc(sizeof(rec_inst_type))) == _NULL) goto err;

  HWRMemSet((p_VOID)(pri), 0, sizeof(rec_inst_type));

  if (AllocXrdata(&pri->xrdata, XRINP_SIZE)) goto err;

  dti_load(0,DTI_DTE_REQUEST,(p_VOID _PTR)&(pri->p_dtih));

  HWRMemCpy((p_VOID)(&pri->p_trh), (p_VOID)(&img_trd_header), sizeof(pri->p_trh));

  pri->p_trh.p_tr = (p_UCHAR)(&img_trd_body[0]);

  pri->rc.dtiptr    = (p_VOID)(pri->p_dtih);

  pri->rc.vocptr[0] = pri->user_dict;

  pri->rc.tr_ptr    = (p_VOID)(&pri->p_trh);

  pri->wsr.pwsa     = &(pri->w_str);
  pri->rc.p_ws_wi   = (p_VOID)&pri->wswi;

  pri->rc.hSeg		=	NULL;

  *ppri   = pri;

  return 0;
err:
  if (pri) HWRMemoryFree(pri);
  return 1;
 }

void PegRecUnloadDti(CGRCTX context)
{
	p_rec_inst_type pri = (p_rec_inst_type)(context);
	dti_unload((p_VOID _PTR)&(pri->p_dtih));
}
/* ************************************************************************ */
/* *   Free recognition instance
 * June 2001 - Do not unload the DTI                                          * */
/* ************************************************************************ */
_INT PegRecClose(p_rec_inst_type _PTR ppri)
 {
  p_rec_inst_type pri = *ppri;

  if (pri == _NULL) goto err;

  pri->wsc.flags |= WS_FL_CLOSE;
  WordStrokes(pri, _NULL, &pri->wsc, &pri->wsr);
  FreeXrdata(&pri->xrdata);

  HWRMemoryFree(pri);
  *ppri = _NULL;

  return 0;
err:
  return 1;
 }

/* ************************************************************************ */
/* *   Free some meory and cleanup session                                * */
/* ************************************************************************ */
_INT PegCleanUpContext(p_rec_inst_type pri)
 {
  if (pri == _NULL) goto err;

  FreeInkInfo(&pri->ink_info);
  
//  pri->num_word      = 0;
  pri->g_stroke_num  = 0;
  pri->baseline.size = 0;

  if (pri->recres) HWRMemoryFree(pri->recres);
  pri->recres = _NULL;
  pri->rr_alloc_size  = 0;
  pri->rr_filled_size = 0;
  pri->rr_num_answers = 0;
  pri->rr_num_finished_answers = 0;
  pri->num_tentative_words = 0;

  if (pri->rc.p_xd_data) XrlvDealloc((p_xrlv_data_type _PTR)(&pri->rc.p_xd_data));
//  pri->rc.f_xd_data   = 0;
//  pri->unfinished_data.pxd = 0;

  FreeBearSegmentation (&pri->rc);

  return 0;
err:
  return 1;
 }

/* ************************************************************************** */
/* *  Add word list to RecResult                                            * */
/* ************************************************************************** */
_INT PegAddToAnsw(p_rec_inst_type pri, p_UCHAR answ, p_INT weights, _INT ns, p_INT stroke_ids)
 {
  _INT    i;
  _INT    len_a, len_w, len_s, len, na;
  p_VOID  ptr;
  p_INT   iptr;
  p_UCHAR cptr;

  if (answ == _NULL || pri == _NULL || !pri->ok) goto err;

// ------------ Estimate memory ---------------------------------

  len_a = HWRStrLen((_STR)answ) + 1;
  for (i = na = 0; i < len_a; i ++) if (answ[i] <= PM_ALTSEP) na ++;
  len_w = na;
  len_s = ns;

  len = len_a + (len_w + len_s + 3 + 1 + 1)*sizeof(_INT);

// ------------- Alloc/realloc mmeory ----------------------------

  if (pri->rr_alloc_size < pri->rr_filled_size + len)
   {
    if (pri->recres == _NULL)
     {
      if ((pri->recres = (p_UCHAR)HWRMemoryAlloc(len+PR_ANSW_EXTALLOC)) == _NULL) goto err;
      pri->rr_alloc_size  = len+PR_ANSW_EXTALLOC;
     }
     else
     {
      if ((ptr = HWRMemoryAlloc(pri->rr_filled_size+len+PR_ANSW_EXTALLOC)) == _NULL) goto err;
      HWRMemCpy(ptr, pri->recres, pri->rr_alloc_size);
      HWRMemoryFree(pri->recres);
      pri->rr_alloc_size = pri->rr_filled_size+len+PR_ANSW_EXTALLOC;
      pri->recres = (p_UCHAR)ptr;
     }
   }


  // --------------- Put answer strings in answer buffer -----------------------

  iptr  = (p_INT)(&pri->recres[pri->rr_filled_size]);
  *iptr = 1+((len_a + 3) >> 2);
  pri->rr_filled_size += (*iptr) * sizeof(_INT);
  HWRMemSet(iptr+(*iptr)-1, 1, sizeof(_INT)); // String end padding
  HWRStrCpy((_STR)(iptr+1), (_STR)answ);
  for (i = 0, cptr = (p_UCHAR)(iptr+1); i < len_a; i ++) if (cptr[i] <= PM_ALTSEP) cptr[i] = 0;

  // --------------- Put weights ------ in answer buffer -----------------------
  {
  _USHORT xrsum;
  p_xrd_el_type xrd = &((*pri->xrdata.xrd)[0]);
  // ------------- For tester we place xrsum after the weights ---------------
  for (i = xrsum = 0; i < pri->xrdata.len; i ++, xrd ++)
    xrsum += (_USHORT)(xrd->xr.type + xrd->xr.attrib + xrd->xr.penalty + xrd->xr.height + xrd->xr.shift + xrd->xr.orient + xrd->xr.depth);

  iptr  = (p_INT)(&pri->recres[pri->rr_filled_size]);
  *iptr = 1 + 1 + len_w;
  pri->rr_filled_size += (*iptr) * sizeof(_INT);
  if (weights) HWRMemCpy(iptr+1, weights, len_w * sizeof(_INT));
  *(iptr + 1 + len_w) = xrsum;
  }

  // --------------- Put strokes ids -- in answer buffer -----------------------

  iptr  = (p_INT)(&pri->recres[pri->rr_filled_size]);
  *iptr = 1 + len_s;
  pri->rr_filled_size += (*iptr) * sizeof(_INT);
  if (ns && stroke_ids) HWRMemCpy(iptr+1, stroke_ids, len_s * sizeof(_INT));

  if (len_s > 1) // Sort strokes -- for the sake of NetClient test accuracy
   {_INT all_sorted = 0, ti;
    while (!all_sorted)
     {
      for (i = 1, all_sorted = 1; i < len_s; i ++)
       {
        if (iptr[i] > iptr[i+1])
         {ti = iptr[i]; iptr[i] = iptr[i+1]; iptr[i+1] = ti; all_sorted = 0;}
       }
     }
   }

  pri->rr_num_answers ++;
  if (!(pri->wswi.flags & WS_FL_TENTATIVE)) pri->rr_num_finished_answers ++;

  return 0;
err:
  return 1;
 }

/* ************************************************************************** */
/* *  Resets counter of tentative storage to finished state                 * */
/* ************************************************************************** */
_INT PegResetTentativeStorage(_INT st_index, p_rec_inst_type pri)
 {
  _INT  i;
  p_INT iptr;
  _INT  num_answ, n_tt;

  for (i = n_tt = 0; i < st_index; i ++) n_tt += pri->tentative_list[i].nparts;

  num_answ = pri->rr_num_finished_answers+n_tt;

  if (pri->rr_num_answers > num_answ)
   {   // Reset free space pointer to the place of the tentatve words
    if ((iptr = PegGetAnswerBlockPtr(num_answ, pri)) == _NULL) goto err;
    pri->rr_filled_size = (_INT)((p_CHAR)iptr - (p_CHAR)&pri->recres[0]);
    pri->rr_num_answers = num_answ;
   }

  pri->num_tentative_words = st_index;

  return 0;
err:
  return 1;
 }

/* ************************************************************************** */
/* *  Resets counter of tentative storage to finished state                 * */
/* ************************************************************************** */
_INT PegValidateNextTentativeWord(_INT nparts, p_rec_inst_type pri)
 {

  pri->rr_num_finished_answers += nparts;

  if (pri->rr_num_finished_answers > pri->rr_num_answers)
   {   // Something's wrong here!
    pri->rr_num_answers = pri->rr_num_finished_answers;
    goto err;
   }

  return 0;
err:
  return 1;
 }


/* ************************************************************************** */
/* *  Add word list to RecResult                                            * */
/* ************************************************************************** */
_INT PegRegNewAnsw(p_rec_inst_type pri, _INT er)
{
	_INT    i, j, k, n, m, f;
	_INT    ns, np, len;
	_TRACE  p_tr;
	_INT    stroke_ids[WS_MAX_STROKES];
	_INT    str_sts[WS_MAX_STROKES];
	_UCHAR  answers[w_lim*NUM_RW+NUM_RW];
	_UCHAR  word[w_lim];
	_INT    weights[NUM_RW] = {0};
	p_RWS_type prws;
	_UCHAR  parts[w_lim];
	p_xrdata_type xrdata = &(pri->xrdata);
	_UCHAR	bSpaceFound, bValid;
	_INT	iWordStart, iStart, iEnd;

	// ------------ Write down stroke lineout ----------------------

	for (i = 1, ns = 0, p_tr = pri->rc.trace; i < pri->rc.ii; i ++)
	{
		if (p_tr[i].y < 0) 
		{
			str_sts[ns] = i; 

			// we already know the # of strokes, we should not exceed them
			if (ns >= pri->rc.n_str)
				return 0;

			stroke_ids[ns++] = p_tr[i].x;
		}
	}

	if (p_tr[0].x > 0) 
	{
		str_sts[ns] = 0; 

		if (ns >= pri->rc.n_str)
			return 0;

		stroke_ids[ns++] = p_tr[0].x;
	} // Save trashed carry dash -- if this id is more than 0, it means that there is salvaged dash ID.

	// --------------------- Store answers -----------------------------------------

	prws = (p_RWS_type)(pri->rwg.rws_mem);

	if (!er && prws != _NULL) // Normal asnwer registration
	{

		for (i = 1, np = 1, parts[0] = 0; i < pri->rwg.size; i ++)
		{
			if (prws[i].type != RWST_SYM) break;
			if (prws[i].sym == ' ') parts[np++] = prws[i].xrd_beg;
		}

		parts[np] = (_UCHAR)xrdata->len;
		pri->rr_nparts = np;

		for (n = 0; n < np; n ++)
		{
			// copy the alternates from prws excluding the ones that have spaces in them
			for (i = j = k = iWordStart = 0, bValid = TRUE, iStart = -1, iEnd = -1, bSpaceFound = FALSE; i < pri->rwg.size; i ++)
			{
				if (prws[i].type == RWST_SYM)
				{
					//if ((pri->flags & PEG_RECFL_CAPSONLY) && IsLower(prws[i].sym)) prws[i].sym = (_UCHAR)ToUpper(prws[i].sym);

					//if (prws[i].xrd_beg >= parts[n] && prws[i].xrd_beg < parts[n+1] && prws[i].sym != ' ')
					if (prws[i].xrd_beg >= parts[n] && prws[i].xrd_beg < parts[n+1])
					{
						// mark the start
						if (iStart == -1)
						{
							iStart	=	i;
						}

						iEnd	=	i;

						// we encountered a space
						if (prws[i].sym == ' ')
						{
							bSpaceFound	=	TRUE;
						}

						answers[j++]	= prws[i].sym; 
						weights[k]		= prws[i].weight;
					}
				}
				// we reached the end of the word
				else if (prws[i].type == RWST_NEXT) 
				{
					if (!bSpaceFound)
					{
						if (iStart == -1 || iEnd == -1)
						{
							bValid	=	FALSE;
						}
						else
						{
							if	(	(	iStart > 0 && 
										prws[iStart - 1].sym != ' ' && 
										prws[iStart - 1].type != RWST_NEXT &&
										prws[iStart - 1].type != RWST_SPLIT
									) ||
									(	iEnd < (pri->rwg.size - 1) && 
										prws[iEnd + 1].sym != ' ' && 
										prws[iEnd + 1].type != RWST_NEXT &&
										prws[iEnd + 1].type != RWST_JOIN
									)
								)
							{
								bValid = FALSE;
							}
						}
					}

					// if the word had a space, exclude the word by not incrmenting k and resetting j to the beginning of the word
					if (bSpaceFound || !bValid)
					{
						j			=	iWordStart;
					}
					else
					{
						k++; 
						answers[j++]	=	PM_ALTSEP;
						iWordStart		=	j;
					}

					bSpaceFound	=	FALSE;
					bValid		=	TRUE;
					iStart		=	-1;
					iEnd		=	-1;
				}
			}

			if (!bSpaceFound)
			{
				if (iStart == -1 || iEnd == -1)
				{
					bValid	=	FALSE;
				}
				else
				{
					if	(	(	iStart > 0 && 
								prws[iStart - 1].sym != ' ' && 
								prws[iStart - 1].type != RWST_NEXT &&
								prws[iStart - 1].type != RWST_SPLIT
							) ||
							(	iEnd < (pri->rwg.size - 1) && 
								prws[iEnd + 1].sym != ' ' && 
								prws[iEnd + 1].type != RWST_NEXT &&
								prws[iEnd + 1].type != RWST_JOIN
							)
						)
					{
						bValid = FALSE;
					}
				}
			}

			if (bSpaceFound || !bValid)
			{
				j	=	iWordStart;
			}				

			answers[j] = 0; 
			len = j+1;

			for (i = j = 0; i <= len; i ++)   // Remove duplicates
			{
				if (answers[i] <= PM_ALTSEP)
				{
					word[j] = 0;
					for (k = m = f = 0; k < i-j; k ++)
					{
						if (answers[k] == PM_ALTSEP)
						{
							if (!f && (m == j)) 
							{
								HWRMemCpy(&answers[i-(j+1)], &answers[i], len-i+1); 
								i -= j+1; 
								len -= j+1; 
								break;
							}

							m = f = 0;
						} 
						else 
						if (word[m++] != answers[k]) 
						{
							f ++;
						}
					}

					j = 0;
				}
				else word[j++] = answers[i];
			}

			if (np > 1) // Separate stroke belongings
			{
				_INT  s = 0;
				_INT  sis[WS_MAX_STROKES] = {0};

				for (i = parts[n]; i < parts[n+1]; i ++) // Go through xr elems and register strokes
				{
					j = (*xrdata->xrd)[i].begpoint;
					for (k = 0; k < ns; k ++) // Find which stroke the xr belongs to
					{
						if (j < str_sts[k])
						{
							if (stroke_ids[k] < 0) break; // Already used
							sis[s++] = stroke_ids[k];
							stroke_ids[k] = -1;
							break;
						}
					}
				}

				if (n == np-1) // Check if there are loose strokes left -- attach them to last word
				{
					for (k = 0; k < ns; k ++) if (stroke_ids[k] >= 0) sis[s++] = stroke_ids[k];
				}

				PegAddToAnsw(pri, (p_UCHAR)answers, weights, s, &(sis[0]));
			}
			else PegAddToAnsw(pri, (p_UCHAR)answers, weights, ns, &(stroke_ids[0]));
		}
	}
	else // Error return -- label it as such
	{
		//pri->rr_nparts = 1;
		//HWRStrCpy((p_CHAR)answers, "???");
		//PegAddToAnsw(pri, (p_UCHAR)answers, weights, ns, &(stroke_ids[0]));
	}

	return 0;
}


#ifndef err_msg
/* ************************************************************************** */
/* *  Debug print stub                                                      * */
/* ************************************************************************** */
_VOID err_msg(p_CHAR str)
 {

	UNUSED(str);
 }
#endif

/* ************************************************************************** */
/* *  Debug function of PegRec                                              * */
/* ************************************************************************** */

#ifdef PEGREC_DEBUG

/* ************************************************************************** */
/* *  Debug printf                                                          * */
/* ************************************************************************** */
 #ifdef _WIN32_WCE

  #include <windows.h>
  #include <tchar.h>
/*
INT      UNICODEtoStr(CHAR * str, TCHAR * tstr, int cMax);

int UNICODEtoStr(char * str, TCHAR * tstr, int cMax)
 {
  int i;

 for (i = 0; i < cMax && tstr[i] != 0; i ++) str[i] = ((unsigned char)tstr[i]);
  str[i] = 0;

  return i;
 }
 */
 

  #if 0
  void PegDebugPrintf(char * format, ...)
   {
    _INT  i;
    TCHAR buffer[255];
    TCHAR format_str[255];
    va_list marker;

//    for (i = 0; format[i] != 0 && i < 120; i ++) {format_str[i*2] = format[i]; format_str[i*2+1] = 0;}
//    format_str[i*2] = format_str[i*2+1] = 0;
    for (i = 0; format[i] != 0 && i < 120; i ++) format_str[i] = format[i];
    format_str[i] = 0;

    va_start(marker, format);
    wvsprintf(buffer, format_str, marker);
    va_end(marker);

    OutputDebugString(buffer);
   }
  #else
 void PegDebugPrintf(char * form, ...) 
   {
#if 0
   char str[256];   
   TCHAR buffer[256];
   TCHAR format[256];
   va_list marker;
   int iLen;
   DWORD dw;
   static HANDLE hFile = NULL;

   if(!hFile)
      hFile = CreateFile(L"\\crgdebug.txt", GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, 
            FILE_ATTRIBUTE_NORMAL, NULL); 
   else
   hFile = CreateFile(L"\\crgdebug.txt", GENERIC_WRITE, 0, NULL, OPEN_EXISTING, 
            FILE_ATTRIBUTE_NORMAL, NULL); 
   if(hFile==NULL)
      return;

   SetFilePointer( hFile, 0, NULL,  FILE_END);

   for (int i = 0; i < 255 && form[i] != 0; i ++) format[i] = form[i];
   format[i] = 0;

   va_start(marker, form);
   wvsprintf(buffer, format, marker);
   va_end(marker);
   iLen = _tcslen(buffer);
   buffer[iLen++] = 0x0d;
   buffer[iLen++] = 0x0a;
   buffer[iLen] = 0;

   UNICODEtoStr(&str[0], buffer, 254);
   WriteFile(hFile, (LPCVOID)&str[0], iLen/*sizeof(buffer[0])*/, &dw, NULL);
   CloseHandle(hFile);
#endif
  }  
  #endif
 #else

  #include <stdio.h>
  #include <stdarg.h>

  void PegDebugPrintf(char * format, ...)
   {
	  return ;
// Remove the creation of a file in debug mode
/*
    char buffer[255];
    va_list marker;
    FILE * file = 0;

    va_start(marker, format);
    vsprintf(buffer, format, marker);
    va_end(marker);

    if ((file = fopen("\\tentatve.log", "a+t")) != 0)
     {
      fprintf(file, "%s\n", buffer);
      fclose (file);
     }
*/
  }
 #endif

/* ************************************************************************** */
/* *  Debug trace recognition                                               * */
/* ************************************************************************** */
#ifdef TRACE_DMP_DBG
 //#include "\avp\pegcalif\rec\debug\tracedmp.cpp"

_INT DebTraceRec(CGRCTX context)
 {
  int  i, j, k;
  int  num_ans, num_alts, num_strokes, xrsum, weight;
  int  stroke_info[256];
  int* strokes_num_ptr;
  char * ptr;
  p_CGR_point_type strokes = (p_CGR_point_type)&img_trace_body[0];
  int npoints = sizeof(img_trace_body)/sizeof(PS_point_type);
//CGR_control_type ctrl = {0};


  PegDebugPrintf("TraceDump: PRI: %x", context);

#if 0
  CgrRecognizeInternal(npoints, strokes, context, 1);
#else
  stroke_info[0] = 0;
  for (i = j = 0, k = 1; i < npoints; i ++)     // Feed stroke by stroke to the recognition engine
   {
    if (strokes[i].y < 0)                       // Strokes are delimited (in this sample) with -1 in y coordinate
     {                                          // so we get here on end of each stroke
      if (CgrRecognizeInternal(i-j, &(strokes[j]), context), 1) 
		  goto err;  // and try to recognize
      j = i+1;
      stroke_info[k++] = j;
      if (k > 255) goto err; // Just some big enough limit ...
     }
   }
#endif


  CgrCloseSessionInternal(context, TRUE);

  // ------------ All recognition finished, fetch the results ------------------

  num_ans = CgrGetAnswers(CGA_NUM_ANSWERS, 0, 0, context);  // Query how many words resulted
  for (k = 0; k < num_ans; k ++)                            // For each word
   {
    num_alts = CgrGetAnswers(CGA_NUM_ALTS, k, 0, context);  // Get number of recognition alternatives
    xrsum = CgrGetAnswers(CGA_ALT_WEIGHT, k, num_alts, context); // Debug value
    num_strokes = CgrGetAnswers(CGA_ALT_NSTR, k, 0, context);    // Number of strokes in current word
    strokes_num_ptr = (int*)CgrGetAnswers(CGA_ALT_STROKES, k, 0, context); // Pointer to stroke numbers

    for (i = 0; i < num_alts; i ++)                         // List all alternatives
     {
      TCHAR str[32];

      ptr    = (char*)(CgrGetAnswers(CGA_ALT_WORD, k, i, context));
      weight = (int)CgrGetAnswers(CGA_ALT_WEIGHT, k, i, context);

      for (j = 0; j < 30 && ptr[j] != 0; j ++) str[j] = ptr[j]; str[j] = 0;
      PegDebugPrintf("%s Weight:%3d, Nstrokes:%2d, XrSum:%6d", str, weight, num_strokes, xrsum);
     }

    PegDebugPrintf(" ");
   }

  return 0;
err: 
  return 1;
 }
#endif // TRACE_DMP_DBG

#endif // PEGREC_DEBUG


/* ************************************************************************** */
/* *  Psion stuff                                                           * */
/* ************************************************************************** */
#ifdef _PSION_DLL
#include <e32std.h>
GLDEF_C TInt E32Dll(TDllReason /*aReason*/)
// DLL entry point
{
	return(KErrNone);
}
#endif /* _PSION_DLL */

/* ************************************************************************** */
/* *  End of Pegasus Rec Main                                               * */
/* ************************************************************************** */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\pict.cpp ===
#include <common.h>
#ifndef LSTRIP

  #include  "hwr_sys.h"
  #include  "ams_mg.h"
  #include  "lowlevel.h"
  #include  "def.h"
  #include  "calcmacr.h"
  #include  "arcs.h"
  #include  "low_dbg.h"

 /***********************  Owner debug defines  ****************************/
 /* #define     HATCHURE_DEB                                               */
 /* #define     STRIGHT_DEB                                                */
 /**************************************************************************/

#ifdef  FORMULA
  #include "frm_con.h"
  #ifdef  FRM_WINDOWS
    #include "edit.h"
    #undef   PG_DEBUG
    #define  PG_DEBUG  (FRM_DEBUG && !FOR_EDIT)
  #endif
#endif /*FORMULA*/

  #if       PG_DEBUG
    #include  "pg_debug.h"
  #endif

 /*************************     Some markers       *************************/

  #define    EPS                       10
  #define    NOSTRIGHT                 2
  #define    STRIGHT                   1

  #define    AOPEN                     1
  #define    ACLOSE                    0


  #define    _RIGHT                    1
  #define    _LEFT                     0

  #define    _STRONG                  -3
  #define    _MEAN                    -4
  #define    _WEAK                    -5

  #define    COMMON_TYPE               0
  #define    COMM_Y_TYPE               2
  #define    STRIGHT_CROSSED           1

  #define    L_SPEC_SIZE               80        /* Dimension of local    */
                                                 /* SPECL array .        */
  #define    REL_HIGHT_QANT            11
  #define    DEFAULT_MAXCR             20        /* Default maximum curv */
  #define    USCOLOR                   15        /* Relativ height greed */
                                                 /* color.               */

  #define    YST                       10000L    /* Global vertical shift.*/


 /********************     Relative heights       *************************/

  #define    _U4_                      9
  #define    _U3_                      8
  #define    _U2_                      7
  #define    _U1_                      6
  #define    _UM_                      5
  #define    _DM_                      4
  #define    _D1_                      3
  #define    _D2_                      2
  #define    _D3_                      1
  #define    _D4_                      0


 /******************    Hatchure denominators    ***************************/

  typedef  enum
    {
      DENOM_UNKNOWN = 0 ,
      DENOM_ANGLE       ,
      DENOM_EXTR        ,
      DENOM_CROSS
    }
  _HAT_DENOM_TYPE ;

 /**************************************************************************/

  #define    Y_MEASURE                ((STR_DOWN-STR_UP)/8)

 /**************************************************************************/

ROM_DATA_EXTERNAL CONSTS  const1 ;

 /**************************************************************************/

 #define    AF     ALEF

 // Following tables were moved to ParaConstants.j.c
 /**************************************************************************/

 /* First index is highest , second index is lowest .                      */

  ROM_DATA_EXTERNAL _SCHAR  maxA_H_end[REL_HIGHT_QANT-1][REL_HIGHT_QANT-1] ;

 /**************************************************************************/

 /* First index is highest , second index is lowest .                      */


  ROM_DATA_EXTERNAL _SHORT  maxCR_H_end[REL_HIGHT_QANT-1][REL_HIGHT_QANT-1] ;

 /**************************************************************************/

 /* First index is highest , second index is lowest .                      */

  ROM_DATA_EXTERNAL _SCHAR  minL_H_end[REL_HIGHT_QANT-1][REL_HIGHT_QANT-1] ;

 /**************************************************************************/

 /* First index is highest , second index is lowest .                      */

  ROM_DATA_EXTERNAL _SCHAR  maxX_H_end[REL_HIGHT_QANT-1][REL_HIGHT_QANT-1] ;

 /**************************************************************************/

 /* First index is highest , second index is lowest .                      */

  ROM_DATA_EXTERNAL _SCHAR  maxY_H_end[REL_HIGHT_QANT-1][REL_HIGHT_QANT-1] ;

 #undef     AF

 /***************************  Classifires *********************************/

  _SHORT  StrLine(_SHORT _PTR x, _SHORT _PTR y, _SHORT begin, _SHORT end,
                  _SHORT _PTR p_imax  , _SHORT _PTR p_dmax ,
                  _SHORT _PTR p_xdmax , _SHORT _PTR p_ymax ,
                  _SHORT _PTR p_a     ) ;

  _SHORT  StrElements( low_type _PTR  pLowData ,
                       SPECL    _PTR  pcSpecl  /*, p_SHORT pHeight*/ ) ;

  _SHORT  SPDClass( low_type _PTR  pLowData   ,  _SHORT  fl_Mode ,
                    SPECL    _PTR  p_tmpSpecl , p_SDS    lsd     ) ;

  _SHORT  InStr( p_LowData   low_data    ,  p_SDS    lsd    ,
                 SPECL _PTR  p_tmpSpecl0 ,  p_INT    height   ) ;


  _BOOL   FieldSt( _SDS lock_sd[], _SHORT lowrelh    , _SHORT uprelh ,
                   _SHORT imax   , _INT _PTR pmaxa ,
                   _INT _PTR pmaxcr ,  _INT _PTR pminlen  ) ;

  _SHORT  Dot( p_LowData low_data , p_SPECL  p_tmpSpecl0 , _SDS  asds[] ) ;

  _SHORT  Recount( low_type _PTR  pLowData ) ;

  _BOOL   VertStickBorders( low_type _PTR   pLowData , p_SPECL pV_TmpSpecl ,
                            p_POINTS_GROUP  pTmpStickBord ) ;

  _VOID   VertSticksSelector( low_type _PTR  pLowData ) ;

  _SHORT  HatchureS( p_LowData  pLowData ,   SPECL _PTR  pcSpecl ,
                                             p_INT       pHeight ) ;

  _BOOL   Find_Cross( low_type _PTR   pLowData ,  _TRACE  pCrossPoints ,
                      p_POINTS_GROUP  pFirstGr , p_POINTS_GROUP  pSecondGr ) ;

  _BOOL   Close_To( low_type _PTR   pLowData ,
                    p_POINTS_GROUP  pFirstGr , p_POINTS_GROUP  pSecondGr ) ;

  _BOOL   IsAnythingShift( low_type _PTR   pLowData    ,
                           p_POINTS_GROUP  pCheckngCut ,
                           p_POINTS_GROUP  pMaskingCut ,
                            _SHORT         SideFlag0   , _SHORT SideFlag1 ) ;

  _BOOL   InsertBreakAfter( low_type _PTR  pLowData , _SHORT  BreakAttr ,
                           _SHORT          FirstNum , _TRACE  pCrossPoint ) ;

  _BOOL   Oracle( /*low_type _PTR  pLowData ,*/
                 _TRACE  pR_min  ,  _HAT_DENOM_TYPE  DenH  ) ;

  _SHORT  StrokeAnalyse( low_type _PTR  pLowData , p_INT       pHeight ,
                         SPECL    _PTR  pStrk    , SPECL _PTR  pcSpecl ,
                         SPECL    _PTR  pStick   ,_BOOL   fl_DrawCross ) ;

  _BOOL   RDFiltr( low_type _PTR  pLowData , _TRACE  pR_min  ,
                   SPECL    _PTR  pStrk    , _TRACE  pCrossPoint ) ;

  _BOOL   LeFiltr( low_type _PTR  pLowData ,  SPECL _PTR  pStick    ,
                                             _SHORT       iClosest  ) ;

  _BOOL   InvTanDel( low_type _PTR  pLowData, _SHORT TanVert, _SHORT TanHor ) ;

  _BOOL   YFilter( low_type _PTR  pLowData   ,
                   p_SDS          p_Strk_SDS , SPECL  _PTR  pcSpecl  ) ;

 /***************************** Utilites ***********************************/

  _BOOL   CreateSpecl( p_SPECL pSpecl, p_SHORT plspecl, _SHORT n ) ;

  _BOOL   DestroySpecl( SPECL _PTR _PTR pSpecl , _SHORT _PTR pplspecl ) ;

  _BOOL   BildHigh( _SHORT yminmin , _SHORT ymaxmax , p_INT height  ) ;

  _SHORT  AngleTanMeasure( _SHORT tangens ) ;

  _SHORT  FantomSt( _SHORT _PTR p_ii ,  _SHORT _PTR x , _SHORT _PTR y  ,
                    p_BUF_DESCR pbfx , p_BUF_DESCR pbfy,
                    _SHORT begin     ,  _SHORT end , _UCHAR  mark    ) ;

  _BOOL   RareAngle( low_type _PTR  pLowData ,  SPECL _PTR  pcSpecl ,
                     SPECL    _PTR  pSpecl   , _SHORT _PTR  pLspecl ) ;

  _SHORT  PartDY( _SHORT il1 , _SHORT il2 , p_SHORT y ) ;


  _SHORT  HordIncl( p_SHORT xArray, p_SHORT yArray,_SHORT ibeg,_SHORT iend );

  _SHORT  Tan( _SHORT x1 , _SHORT y1 , _SHORT x2 , _SHORT y2 ) ;

  _BOOL   BoxSmallOK( _SHORT iBeg, _SHORT iEnd, p_SHORT xArr, p_SHORT yArr );

  _BOOL   HordIntersectDetect( p_SDS  pSDS , p_SHORT  x , p_SHORT y ) ;

  _BOOL   NoteSDS( p_C_SDS  p_cSDS , p_SDS p_tmpSDS ) ;

  _BOOL   Init_SDS_Element( p_SDS pSDS ) ;

  _BOOL   Box_Cover( low_type _PTR   pLowData ,
                     p_POINTS_GROUP  pFirstGr , p_POINTS_GROUP  pSecondGr );

  _INT    ApprHorStroke( low_type _PTR pLowData ) ;

  _BOOL   ShiftsAnalyse( low_type _PTR  pLowData , SPECL _PTR  pStick ,
                         SPECL _PTR     pStrk    , SPECL _PTR  pcSpecl  ) ;

  _HAT_DENOM_TYPE  HatDenAnal( low_type _PTR  pLowData,
                               SPECL _PTR     pStrk   /*, SPECL _PTR  pcSpecl*/ );

  _BOOL   DrawCross(  low_type _PTR  pLowData  ,
                      p_INT          pHeight   ,  _TRACE  pCrossPoint ,
                      SPECL _PTR     pStick    ,   SPECL _PTR  pStrk  ) ;

  _BOOL   LowStFiltr( low_type  _PTR  pLowData ,  p_INT  pHeight ,
                      SPECL     _PTR  pStick   ,   _TRACE  pCrossPoint  ,
                      SPECL     _PTR  p_dSL_iSH   ) ;

  _BOOL   SCutFiltr( low_type _PTR  pLowData ,  p_INT    pHeight ,
                     SPECL    _PTR  pStrk    ,   _TRACE  pCrossPoint ,
                                                p_SHORT  p_dSleft    ) ;

  _SHORT  RMinCalc(   low_type _PTR  pLowData  , /*p_SHORT         pHeight ,*/
                      SPECL    _PTR  pStrk     , SPECL _PTR      pStick  ,
                      SPECL    _PTR  pcSpecl   , SPECL _PTR  p_numCExtr  ) ;

  _VOID   FillCross(  low_type _PTR  pLowData  , SPECL _PTR  pStrk  ) ;

 /**************************************************************************/

  #define     RET_ERR      { flag_pct = UNSUCCESS ;   goto  QUIT ; }

 /*------------------------------------------------------------------------*/

  _SHORT  Pict( low_type _PTR  pLowData )
    {
      _SHORT _PTR     p_ii             = &(pLowData->ii)           ;
      _SHORT _PTR     x                = pLowData->x               ;
      _SHORT _PTR     y                = pLowData->y               ;
     p_POINTS_GROUP   pGroupsBorder    = pLowData->pGroupsBorder   ;
      _SHORT          lenGrBord        = pLowData->lenGrBord       ;
     p_BUF_DESCR      pbfx             = &pLowData->buffers[0]     ;
     p_BUF_DESCR      pbfy             = &pLowData->buffers[1]     ;
       SPECL          tmpSpecl0        ;
       //SPECL _PTR     p_tmpSpecl0      = &tmpSpecl0                ;
      _SHORT          yminmin          = pLowData->box.top         ;
      _SHORT          ymaxmax          = pLowData->box.bottom      ;
     p_SDS            pSDS             = pLowData->p_cSDS->pSDS    ;
      _SHORT          lenSDS           ;
     p_SDS            p_begSDS         ;

      _INT            Height[REL_HIGHT_QANT] ;
      _SHORT          mark             ;
      _INT            iBeg    , iEnd   ;
      _INT            numLstGroup      ;
      _SHORT          lowrelh , uprelh ;
      _SHORT          ii               ;
      _SHORT          flag_pct         ;
      _INT            il               ;

      _BOOL           flag_ht          ;
#if defined (FOR_GERMAN) || defined (FOR_FRENCH) || USE_BSS_ANYWAY
      _SHORT          iBegBlankGroups  = pLowData->iBegBlankGroups ;
#endif

         ii = *p_ii ;
         flag_pct = SUCCESS ;

         iBeg = iEnd = UNDEF ;
         InitSpeclElement( &tmpSpecl0 ) ;
         BildHigh( yminmin , ymaxmax , Height ) ;

           if ( (pLowData->pVS_Collector =
                (p_POINTS_GROUP) HWRMemoryAlloc( L_SPEC_SIZE *
                                                 sizeof(POINTS_GROUP ) )
              ) == _NULL )
              {  RET_ERR ; }

         VertSticksSelector( pLowData ) ;

  #if PG_DEBUG
           if  ( mpr == 3 )
               {
                 bioskey(0) ;
               }
  #endif

         flag_ht = _FALSE ;

           for  ( il = 0  ;  il < lenGrBord  ; il++ )
             {
               lenSDS    = pLowData->p_cSDS->lenSDS  ;
               p_begSDS  = pSDS + lenSDS ;

                 if  ( tmpSpecl0.other == CUTTED )
                     {
                       numLstGroup = UNDEF ;
                       flag_ht     = _TRUE ;
                     }
                 else
                     {
                       flag_ht = _FALSE ;

                         if  ( il > 0 )
                             {
                               numLstGroup = il - 1 ;
                             }
                         else
                             {
                               numLstGroup = UNDEF  ;
                             }
                     }

               //mark   =   EMPTY  ;
               iBeg   = ( pGroupsBorder + il )->iBeg ;
               iEnd   = ( pGroupsBorder + il )->iEnd ;

               RelHigh( y, iBeg, iEnd, Height, &lowrelh, &uprelh ) ;

               InitSpeclElement( &tmpSpecl0 )           ;
               tmpSpecl0.ibeg    = (_SHORT)iBeg         ;
               tmpSpecl0.iend    = (_SHORT)iEnd         ;
               tmpSpecl0.ipoint0 = (_SHORT)numLstGroup  ;
               tmpSpecl0.ipoint1 = UNDEF                ;
               tmpSpecl0.code    = (_UCHAR)uprelh       ;
               tmpSpecl0.attr    = (_UCHAR)lowrelh      ;
               tmpSpecl0.mark    = EMPTY; //mark = EMPTY         ;

                 if  ( StrElements( pLowData , &tmpSpecl0 /*, Height*/  )
                                                        == UNSUCCESS )
                       RET_ERR

               mark = SPDClass( pLowData    , COMM_Y_TYPE ,
                                &tmpSpecl0  , p_begSDS  ) ;

                 if  ( mark == UNSUCCESS )
                       RET_ERR

                 else  if  ( mark != STROKE )
                     {
                       mark = Dot( pLowData, &tmpSpecl0, p_begSDS ) ;

                         if  ( mark == UNSUCCESS )
                               RET_ERR

                         else  if  ( ( mark != DOT ) && ( flag_ht != _TRUE ) )
                             {
                               mark = HatchureS( pLowData   ,
                                                 &tmpSpecl0 , Height ) ;

                                 if  ( mark == UNSUCCESS )
                                       RET_ERR
                                 else  if  ( tmpSpecl0.other == CUTTED )
                                     {
                                       tmpSpecl0.other = CUTTED ;

                                         if  ( InitGroupsBorder( pLowData, INIT ) !=
                                                                 SUCCESS )
                                             {
                                               //UnsuccessMsg(" InitGroupsBorder in Pict ") ;
                                               RET_ERR
                                             }

                                       lenGrBord = pLowData->lenGrBord ;
                                     }
                                 else
                                     {
                                       mark = InStr( pLowData  , p_begSDS ,
                                                     &tmpSpecl0, Height ) ;

                                         if  ( mark == UNSUCCESS )
                                               RET_ERR
                                     }
                             }
                     }

               mark = (_SHORT)(tmpSpecl0.mark) ;


#if defined (FOR_GERMAN) || defined (FOR_FRENCH) || USE_BSS_ANYWAY

                 if   (     (    ( mark == EMPTY )
                              || ( mark == SHELF ) )
                        &&  ( il < iBegBlankGroups )
                        &&  ( tmpSpecl0.other != CUTTED ) )
                      {
                        SlashArcs( pLowData , iBeg , iEnd  ) ;
                          continue ;
                      }
#endif

                 if   ( ( mark == STROKE ) || ( mark == DOT   ) )
                      {
                        FantomSt( &ii, x, y,   pbfx , pbfy,
                                  tmpSpecl0.ibeg , tmpSpecl0.iend ,
                                  (_UCHAR)mark   ) ;

                          if  ( Mark( pLowData   , BEG , 0, 0, 0,
                                      tmpSpecl0.ibeg, tmpSpecl0.ibeg ,
                                      tmpSpecl0.ibeg, tmpSpecl0.ibeg  )
                                                             == UNSUCCESS   )
                                    { flag_pct = UNSUCCESS ;   goto  QUIT ; }

                        FillCross( pLowData , &tmpSpecl0 ) ;

                          if  ( MarkSpecl( pLowData, &tmpSpecl0 )
                                                  == UNSUCCESS   )
                                    { flag_pct = UNSUCCESS ;   goto  QUIT ; }

                          if  ( Mark( pLowData   , END , 0, 0, 0,
                                      tmpSpecl0.iend, tmpSpecl0.iend ,
                                      tmpSpecl0.iend, tmpSpecl0.iend  )
                                                == UNSUCCESS     )
                                    { flag_pct = UNSUCCESS ;   goto  QUIT ; }
                      }
             }

    QUIT:
           if   ( pLowData->pVS_Collector != _NULL )
                { HWRMemoryFree( (p_VOID) pLowData->pVS_Collector ) ; }

 /*
  #if PG_DEBUG
       draw_SDS( pLowData ) ;
  #endif
 */
         *p_ii = ii ;
         if ( flag_pct == SUCCESS )
         Recount( pLowData )  ;

    return( flag_pct ) ;
    }

 /*------------------------------------------------------------------------*/


#define CURV_STRAIGHT 5

  _VOID  FillCross( low_type _PTR  pLowData  ,  SPECL _PTR  pStrk )
    {
     p_POINTS_GROUP   pVS_Collector  = pLowData->pVS_Collector ;
      _SHORT          VertSticksNum  = pLowData->VertSticksNum ;
       POINTS_GROUP   gStrk, gStick, gStickSav  ;
       PS_point_type  CrossPoint                ;
      _INT            il   , jl                 ;
      _BOOL           fl_FindCross = _FALSE     ;
	  _BOOL			  fInit		   = _FALSE		;
	  //_SHORT  NumStroke, NumStrokeSav=UNDEF     ;
      _INT  NumStroke, NumStrokeSav=UNDEF     ;

      p_SHORT x=pLowData->x, y=pLowData->y      ;
#ifdef FOR_GERMAN /* for AYV - 5-2-95 */
      _SHORT ipoint0Sav=pStrk->ipoint0;
#endif /* FOR_GERMAN */
          if  (
#ifndef FOR_GERMAN /* for AYV - 5-2-95 */
                pStrk->other == CUTTED ||
#endif /* FOR_GERMAN */
                pStrk->mark == DOT )
              { goto  QUIT ; }

          pStrk->ipoint0 = pStrk->ipoint1 = UNDEF;

          for  ( il = 0 , jl = 0 ;  il < VertSticksNum ;  il++ )
               {
                 _INT StrokeBeg,StrokeEnd;
                 gStrk.iBeg = pStrk->ibeg ;
                 gStrk.iEnd = pStrk->iend ;

                 gStick = *( pVS_Collector + il ) ;

                 if( gStick.iBeg >= gStrk.iBeg && gStick.iEnd <= gStrk.iEnd )
                  continue ;

                 NumStroke=GetGroupNumber( pLowData, gStick.iBeg ) ;
                 StrokeBeg=pLowData->pGroupsBorder[NumStroke].iBeg;
                 StrokeEnd=pLowData->pGroupsBorder[NumStroke].iEnd;
                 if(gStick.iEnd-gStick.iBeg+1<ONE_THIRD(StrokeEnd-StrokeBeg+1))
                  continue;
                 if(HWRAbs(y[gStick.iEnd]-y[gStick.iBeg])<THREE_FOURTH(DY_STR))
                  {
                    _INT DsStick=Distance8(x[gStick.iBeg],y[gStick.iBeg],
                                           x[gStick.iEnd],y[gStick.iEnd]);
                    _INT i,DsStroke;
                    for(i=StrokeBeg,DsStroke=0;i<StrokeEnd;i++)
                     DsStroke+=Distance8(x[i],y[i],x[i+1],y[i+1]);
                    if(DsStick<ONE_HALF(DsStroke))
                     continue;
                  }
                 if(HWRAbs(CurvMeasure(x,y,gStick.iBeg,gStick.iEnd,-1))>CURV_STRAIGHT)
                  continue;
                 fl_FindCross = Find_Cross( pLowData, &CrossPoint,
                                            &gStrk   , &gStick  )  ;

                   if  ( fl_FindCross == _TRUE )
                       {
                          _SHORT StickBeg = pVS_Collector[il].iBeg ,
                                 StickEnd = pVS_Collector[il].iEnd ;

                          NumStroke=GetGroupNumber( pLowData, StickBeg ) ;

                          if ( NumStroke != NumStrokeSav )
                             {
                               if(NumStrokeSav!=UNDEF)
                                {
                                 _SHORT iBegSav=pLowData->pGroupsBorder[NumStrokeSav].iBeg,
                                        iEndSav=pLowData->pGroupsBorder[NumStrokeSav].iEnd,
                                        yUpSav,yDnSav,yUp,yDn;
                                 yMinMax(iBegSav,iEndSav,y,&yUpSav,&yDnSav);
                                 yMinMax(StrokeBeg,StrokeEnd,y,&yUp,&yDn);
                                 if(yDnSav-yUpSav<ONE_HALF(yDn-yUp) ||
                                    yDn-yUp<ONE_HALF(yDnSav-yUpSav)
                                   )
                                  {
                                    pStrk->ipoint0 = UNDEF ;
                                    pStrk->ipoint1 = UNDEF ;
                                      goto  QUIT ;
                                  }
                                }
                               NumStrokeSav = NumStroke         ;
                               gStickSav    = pVS_Collector[il] ;
							   fInit		= _TRUE;
                             }
                          else if ( fInit == _TRUE && 
									(	StickEnd - StickBeg >=
										gStickSav.iEnd - gStickSav.iBeg
									)
                                  )
                             {
                               gStickSav = pVS_Collector[il] ;
                               jl-- ;
                             }
                          else
                             continue ;

                          if  ( jl == 0 )
                              {
                                pStrk->ipoint0 = gStick.iBeg ;
                              }
                          else  if  ( jl == 1 )
                              {
                                pStrk->ipoint1 = gStick.iBeg ;
                              }
                          else
                              {
                                pStrk->ipoint0 = UNDEF ;
                                pStrk->ipoint1 = UNDEF ;
                                  goto  QUIT ;
                              }

                         jl++ ;
                       }
               }

    QUIT:
#ifdef FOR_GERMAN /* for AYV - 5-2-95 */
          if(pStrk->other & CUTTED)
           if(pStrk->ipoint0 != UNDEF && pStrk->ipoint1 != UNDEF)
            pStrk->other &= (~CUTTED);
           else
            pStrk->ipoint0=pStrk->ipoint1=ipoint0Sav;
#endif /* FOR_GERMAN */

          return ;
    }

#undef CURV_STRAIGHT
 /*------------------------------------------------------------------------*/

  #undef      RET_ERR

 /**************************************************************************/

  _SHORT  Recount( low_type _PTR  pLowData )
    {
      p_SHORT   ind_back        =  pLowData->buffers[2].ptr ;
      p_SDS     pSDS            =  pLowData->p_cSDS->pSDS   ;
       _INT     lenSDS          =  pLowData->p_cSDS->lenSDS ;
      p_SDS     pTmpSDS                    ;
       _INT     il,iend_prv     =  UNDEF   ;
       _BOOL    bWasPrvAdjusted = _FALSE   ;

       _SHORT   fl_Recount      =  SUCCESS ;
       _INT     iend , ibeg                ;
       _INT     ibeg_nxt                   ;

         if   ( pSDS == _NULL)
              {
                fl_Recount = UNSUCCESS ;
                  goto  QUIT  ;
              }

         for  ( il = 0  ;  il < lenSDS ; il++ )
          {
            pTmpSDS = pSDS + il ;
            ibeg = pTmpSDS->ibeg ;
            iend = pTmpSDS->iend ;

              if  ( pTmpSDS->mark != BEG  &&
                    pTmpSDS->mark != END )
                {
                  ibeg_nxt = ( pTmpSDS + 1 )->ibeg ;

                    if   ( bWasPrvAdjusted )
                         {
                           DBG_CHK_err_msg( iend_prv == UNDEF ,
                                          " PICT: WRONG SDS DATA!") ;
                           ibeg = iend_prv ;
                         }

                    if   ( ibeg_nxt-iend > 1 )
                         {
                           iend = MEAN_OF( iend, ibeg_nxt ) ;
                           iend_prv        =  iend  ;
                           bWasPrvAdjusted = _TRUE  ;
                         }
                    else
                         { bWasPrvAdjusted = _FALSE ; }
                }

                    pTmpSDS->ibeg      = ind_back[ibeg] ;
                    pTmpSDS->iend      = ind_back[iend] ;
                    pTmpSDS->des.iLmax = ind_back[pTmpSDS->des.iLmax] ;
                    pTmpSDS->des.iRmax = ind_back[pTmpSDS->des.iRmax] ;
                    pTmpSDS->des.imax  = ind_back[pTmpSDS->des.imax]  ;
          }
    QUIT: return( fl_Recount )  ;
    }

 /**************************************************************************/

 #define      CRLIM11     12                  /* Also for "Hatchure" proc. */

  _SHORT  StrElements( low_type _PTR  pLowData ,
                       SPECL    _PTR  pcSpecl  /*, p_SHORT pHeight*/ )
    {
     p_C_SDS        p_cSDS        = pLowData->p_cSDS           ;
     p_SDS          pSDS          = p_cSDS->pSDS               ;
      _INT          begLock_SDS   = p_cSDS->lenSDS             ;
     p_SDS          p_beg_SDS     = pSDS + begLock_SDS         ;
      _SHORT _PTR   pX            = pLowData->x                ;
      _SHORT _PTR   pY            = pLowData->y                ;
      _INT          iBeg          = pcSpecl->ibeg              ;
      _INT          iEnd          = pcSpecl->iend              ;
      _SHORT        topH          = (_SHORT)pcSpecl->code      ;
      _SHORT        botH          = (_SHORT)pcSpecl->attr      ;
      _SHORT        fl_Element    = SUCCESS                    ;
      _INT          endLock_SDS   ;
      _SDS          tmpSDS        ;
       SPECL _PTR   pSpecl0       ;
       SPECL        tmpSpecl      ;
      _SHORT        lenSpecl      ;
      _SHORT        xDmax, yDmax  ;
      _INT          DsMax, iDsMax ;
      _INT          il   , jl     ;

      _LONG         dL            ;
      _LONG         L_glob        ;

        //UNUSED(pHeight);

        pSpecl0 = (SPECL *) HWRMemoryAlloc( L_SPEC_SIZE * sizeof(SPECL) ) ;

          if  ( pSpecl0 == _NULL )
              { fl_Element = UNSUCCESS ;   goto  QUIT ; }
          else
              { lenSpecl = 0 ; }

        p_cSDS->iBegLock_SDS = p_cSDS->lenSDS       ;
        pcSpecl->ipoint1     = p_cSDS->iBegLock_SDS ;
        InitSpeclElement( &tmpSpecl )   ;

        tmpSpecl.mark    = BEG          ;
        tmpSpecl.ibeg    = (_SHORT)iBeg ;
        tmpSpecl.iend    = (_SHORT)iBeg ;
        tmpSpecl.ipoint0 = (_SHORT)iBeg ;
        tmpSpecl.ipoint1 = UNDEF        ;

           if  ( NoteSpecl( pLowData , &tmpSpecl , pSpecl0 ,
                            &lenSpecl, L_SPEC_SIZE ) == _FALSE )
               { fl_Element = UNSUCCESS ;    goto  QUIT ; }

           if  ( RareAngle( pLowData, pcSpecl, pSpecl0, &lenSpecl )
                                                         ==_FALSE )
               {
                 err_msg(" StrElements: Local SPECL overflow ..."     ) ;
                 err_msg(" StrElements: Description not complete ..." ) ;
               }

        InitSpeclElement( &tmpSpecl )   ;

        tmpSpecl.mark    = END          ;
        tmpSpecl.ibeg    = (_SHORT)iEnd ;
        tmpSpecl.iend    = (_SHORT)iEnd ;
        tmpSpecl.ipoint0 = (_SHORT)iEnd ;
        tmpSpecl.ipoint1 = UNDEF        ;

          if   ( NoteSpecl ( pLowData  , &tmpSpecl , pSpecl0 ,
                             &lenSpecl , L_SPEC_SIZE )  ==  _FALSE )
               { fl_Element  = UNSUCCESS ;    goto  QUIT ; }

          if   ( Init_SDS_Element( &tmpSDS )  == _FALSE )
               { fl_Element  = UNSUCCESS ;    goto  QUIT ; }

        tmpSDS.ibeg = (_SHORT)iBeg ;
        tmpSDS.iend = (_SHORT)iEnd ;
        tmpSDS.mark = BEG  ;
        xMinMax( iBeg, iEnd, pX, pY, &tmpSDS.xmin, &tmpSDS.xmax ) ;
        yMinMax( iBeg, iEnd, pY,     &tmpSDS.ymin, &tmpSDS.ymax ) ;

          if   ( NoteSDS( p_cSDS , &tmpSDS ) == _FALSE )
               { fl_Element  = UNSUCCESS ;    goto  QUIT ; }

          if   ( Init_SDS_Element( &tmpSDS )  == _FALSE )
               { fl_Element  = UNSUCCESS ;    goto  QUIT ; }

        DsMax  = 0 ;  iDsMax = 0 ;
        L_glob = 0 ;

          for  ( il = 0 ;  il < lenSpecl-1 ;  il ++ )
            {
             p_SPECL  pTmpSpecl0; // , pTmpSpecl1 ;
              _INT    CiBeg ;
              _INT    CiEnd ;

               pTmpSpecl0 = pSpecl0    + il ;
               //pTmpSpecl1 = pTmpSpecl0 + 1  ;

                 if  ( pTmpSpecl0->ibeg + 1  >=  pTmpSpecl0->iend )
                     {
                        CiBeg = pTmpSpecl0->iend ;
                     }
                 else
                     {
                        CiBeg = pTmpSpecl0->ipoint0 ;
                     }

                 if  ( (pSpecl0 + il + 1)->ibeg + 1  >=
                       (pSpecl0 + il + 1)->iend )
                     {
                        CiEnd = (pSpecl0 + il + 1 )->ibeg ;
                     }
                 else
                     {
                        CiEnd = (pSpecl0 + il + 1 )->ipoint0 ;
                     }

               tmpSDS.ibeg = (_SHORT)CiBeg ;
               tmpSDS.iend = (_SHORT)CiEnd ;

               iMostFarDoubleSide( pX, pY, &tmpSDS, &xDmax, &yDmax, _TRUE ) ;

                 for  ( jl = CiBeg , dL = 0L  ;  jl < CiEnd  ;  jl++ )
                      {
                        dL += (_LONG) HWRMathILSqrt(
                                      DistanceSquare( jl, jl+1, pX, pY ) )                                                                ;
                      }

               tmpSDS.des.l = dL ;

                 if   ( tmpSDS.des.s > DsMax )
                      {
                        DsMax  = tmpSDS.des.s ;
                        iDsMax = il           ;
                      }

                 if   ( tmpSDS.des.s != 0 )
                      {
                        tmpSDS.des.ld =
                              (_SHORT)( LONG_BASE * dL / tmpSDS.des.s ) ;
                      }
                 else
                      { tmpSDS.des.ld = ALEF ; }

               L_glob += dL ;

                 if   ( NoteSDS( p_cSDS , &tmpSDS ) == _FALSE  )
                      { fl_Element = UNSUCCESS ;      break ;  }
            }

        endLock_SDS = p_cSDS->lenSDS ;
        iDsMax++ ;


          if   ( L_glob != 0 )
               {
                 for  ( jl = begLock_SDS + 1 ;  jl < endLock_SDS ;  jl++ )
                   {
                      ( pSDS + jl )->des.lg = (_SHORT) ( LONG_BASE *
                      ( pSDS + jl )->des.l  / L_glob ) ;
                   }
               }
          else
               {
                 for  ( jl = begLock_SDS + 1 ;  jl < endLock_SDS ;  jl++ )
                   {
                      ( pSDS + jl )->des.lg = SHORT_BASE ;
                   }
               }

        p_beg_SDS->des.a   = (_SHORT)begLock_SDS ;
        p_beg_SDS->des.cr  = (_SHORT)iDsMax      ;
        p_beg_SDS->des.l   = L_glob              ;
        p_beg_SDS->des.ld  = topH                ;
        p_beg_SDS->des.lg  = botH                ;

          if   ( Init_SDS_Element( &tmpSDS )  == _FALSE )
               { fl_Element  = UNSUCCESS ;    goto  QUIT ; }

        tmpSDS.ibeg = (_SHORT)iEnd ;
        tmpSDS.iend = (_SHORT)iEnd ;
        tmpSDS.mark = END ;

          if   ( NoteSDS( p_cSDS , &tmpSDS ) == _FALSE )
               { fl_Element  = UNSUCCESS ;     goto  QUIT ; }

    QUIT:
          if   ( pSpecl0 != _NULL )
               { HWRMemoryFree( (p_VOID) pSpecl0 ) ; }

    return( fl_Element ) ;
    }

  /*----------------------------------------------------------------------*/

  _BOOL  Init_SDS_Element( p_SDS pSDS )
    {
     _SHORT  flag_Init ;

       flag_Init = _TRUE ;

         if  ( pSDS != _NULL )
             {
               HWRMemSet( (p_VOID)pSDS , 0 , sizeof(_SDS) ) ;

               pSDS->mark = EMPTY  ;
               pSDS->ibeg = UNDEF  ;
               pSDS->iend = UNDEF  ;
             }
         else
             {
               flag_Init = _FALSE  ;
               err_msg ( " Init_SDS : Try to init emty _SDS element ..." ) ;
             }

     return( flag_Init) ;
    }

  /*----------------------------------------------------------------------*/

  _BOOL  NoteSDS( p_C_SDS  p_cSDS , p_SDS p_tmpSDS )
    {
      _BOOL   fl_Note  ;

        if    ( p_cSDS->lenSDS < p_cSDS->sizeSDS - 1 )  // bigor & che 08/18/97 bug fix
              {
                *( p_cSDS->pSDS + p_cSDS->lenSDS ) = *p_tmpSDS ;
                 ( p_cSDS->lenSDS )++ ;
                fl_Note = _TRUE ;
              }
        else
              {
                fl_Note = _FALSE ;
                err_msg ( " NoteSDS : SDS array is full, nowhere to write ... " ) ;
              }

    return( fl_Note ) ;
    }

  /*----------------------------------------------------------------------*/

  _BOOL  CreateSDS( low_type _PTR  pLowData , _SHORT nSDS )
    {
      p_C_SDS  p_cSDS = pLowData->p_cSDS ;
      _BOOL    fl_Create = _TRUE ;

       p_cSDS->pSDS = (p_SDS) HWRMemoryAlloc( nSDS * sizeof(_SDS) ) ;

          if  ( p_cSDS->pSDS != _NULL )
              {
                p_cSDS->sizeSDS = nSDS ;
                p_cSDS->lenSDS  = 0    ;
              }
          else
              {
                fl_Create = _FALSE ;
                err_msg ( " CreateSDS : Cannot create SDS array ... " ) ;
              }

    return( fl_Create ) ;
    }

  /*----------------------------------------------------------------------*/

  _VOID  DestroySDS( low_type _PTR  pLowData )
    {
      p_C_SDS  p_cSDS = pLowData->p_cSDS ;

       if( p_cSDS != _NULL )
        {
          if  ( p_cSDS->pSDS != _NULL )
              {
                HWRMemoryFree( (p_VOID) ( p_cSDS->pSDS ) ) ;
              }

          p_cSDS->sizeSDS = 0     ;
          p_cSDS->lenSDS  = UNDEF ;
        }

    return ;
    }
 /**************************************************************************/


 #define    MAXLD                     130        /*Max. limit lenth/transf.*/
                                                 /* relation .             */
 #define    RMAXCR                    122

 #define    PL_CUT                    8


  _SHORT  SPDClass( low_type _PTR  pLowData   ,  _SHORT  fl_Mode ,
                    SPECL    _PTR  p_tmpSpecl , p_SDS    lsd     )
    {
      _SHORT _PTR  x   = pLowData->x              ;
      _SHORT _PTR  y   = pLowData->y              ;
      _INT    begin    = p_tmpSpecl->ibeg         ;
      _INT    end      = p_tmpSpecl->iend         ;
      _SHORT  uprelh   = (_SHORT)p_tmpSpecl->code ;
      _SHORT  lowrelh  = (_SHORT)p_tmpSpecl->attr ;
      _SHORT  flag_spc ;
      _INT    d , dmax ;
      _LONG   la , lb  ;
      _INT    imax, il ;
      _INT    xbeg , ybeg ;
      _INT    maxa, maxcr , minlenth ;

        flag_spc = SUCCESS ;           imax = lsd->des.cr ;
        dmax     = ALEF    ;           p_tmpSpecl->mark = EMPTY  ;

        FieldSt( lsd, lowrelh, uprelh, (_SHORT)imax, &maxa, &maxcr, &minlenth  ) ;

          if  ( fl_Mode == STRIGHT_CROSSED )
              {
                maxa = maxa * RMAXCR / SHORT_BASE ;
              }

          if  ( ( lsd[imax].des.s         > minlenth  )  &&
                ( lsd[imax].des.cr        < maxcr     )  &&
                ( HWRAbs(lsd[imax].des.a) < maxa      )  &&
                ( lsd[imax].des.ld <  MAXLD
                        || lowrelh > _UM_ || lsd[imax].des.cr < PL_CUT ) )
                {
                  dmax = lsd[imax].des.s * maxcr / SHORT_BASE ;

                   if    ( fl_Mode == STRIGHT_CROSSED )
                         {
                           dmax = dmax * RMAXCR / SHORT_BASE ;
                         }

                   if    ( lsd[imax].des.a == ALEF )
                    {
                     xbeg = MEAN_OF( x[lsd[imax].ibeg] , x[lsd[imax].iend] ) ;

                        for   ( il = begin ;  il < end ;  il++ )
                          {
                            DBG_CHK_err_msg( y[il]==BREAK," SPDcl.: BREAK !");
                            d = HWRAbs( xbeg - x[il] ) ;
                              if   ( d > dmax )   goto  QUIT ;
                          }
                    }

                   if    ( lsd[imax].des.a == 0 )
                    {
                      ybeg = MEAN_OF( y[lsd[imax].ibeg], y[lsd[imax].iend] ) ;

                        for   ( il = begin ;  il < end ;  il++ )
                          {
                            d = HWRAbs( ybeg - y[il] ) ;
                              if   ( d > dmax )  goto  QUIT ;
                          }
                    }

                   if   ( ( lsd[imax].des.a != ALEF ) &&
                          ( lsd[imax].des.a != 0    )    )
                       {
                        _LONG    dx , dy  ;
                        _LONG    lwr0     ;
                        _LONG    /* ldmax , mbo 4-18-98 */ ld ;

                           la = (_LONG)lsd[imax].des.a ;
                           lb = (_LONG)( y[lsd[imax].ibeg]-YST) -
                                         la*x[lsd[imax].ibeg]/LONG_BASE  ;
                           lwr0 = la*la/LONG_BASE  + LONG_BASE  ;
                           /* ldmax = (_LONG)dmax * dmax ; mbo 4-18-98 */

                             for   ( il = begin ;  il < end ;  il++ )
                               {
                                 dy = ( LONG_BASE  *
                                      ( la * (_LONG)x[il] / LONG_BASE
                                        - ( (_LONG)y[il]-YST)+lb ) ) / lwr0 ;
                                 dx = la * ( ((_LONG)y[il]-YST) -
                                 la * (_LONG)x[il] / LONG_BASE - lb ) / lwr0 ;

                                 ld = dx*dx + dy*dy ;
                                   if   (  ld > (_LONG)dmax * dmax /* ldmax mbo 4-18-98 */ )  goto  QUIT ;
                               }
                       }

                   if  ( (    ( fl_Mode == STRIGHT_CROSSED )
                           || ( fl_Mode == COMM_Y_TYPE     ) )
                         &&   YFilter( pLowData , &lsd[imax] , p_tmpSpecl ) )
                       {
                         goto  QUIT ;
                       }

                  flag_spc = p_tmpSpecl->mark = STROKE ;
                }
  QUIT:
     return( flag_spc ) ;
    }

 #undef    MAXLD
 #undef    PL_CUT

 /**************************************************************************/

     /*  The function searches for configurations like this:  */
     /*                                                       */
     /*                  o                                    */
     /*                  o                                    */
     /*                  o                                    */
     /*         oooooooooooooooooooo                          */
     /*        o         o         :      :                   */
     /*         o        o         :       :                  */
     /*          o       o         :        :                 */
     /*            o     o          :       :                 */
     /*              o   o           :      :                 */
     /*                o o           :     :                  */
     /*                 oo             : :                    */
     /*                                                       */
     /* to find SHELVES.                                      */

 #define    MIN_STRAIGHTS_TO_CONSIDER     3
 #define    DEF_MAXA_FOR_SH               40     /* Def. maximum tg limit */
                                                 /* for shelves .         */
 #define    AVERT                         250    /* Minimum tg limit for  */
                                                 /* vert. cross-lines .   */
 #define    EPS_Y                         5      /* Filter for  ALFA-likes*/
                                                 /* configurations .      */
 #define    PEN_A_HEIGHT11                75

  _SHORT  InStr( p_LowData   low_data    ,  p_SDS    lsd    ,
                 SPECL _PTR  p_tmpSpecl0 ,  p_INT    height   )
    {
      _INT    lm                 ;
      _INT    maxa               ;
      _INT    maxcr              ;
      _SHORT  lowrelh , uprelh   ;
      _INT    minlenth           ;
      _SHORT  xb , yb            ;
      _INT    imin0 , imin1      ;
      _INT    begB  , endB, midB ;
      _SHORT  fl                 ;
      _INT    lm_ibeg, lm_iend   ;
      p_SDS   lsd_lm             ;
      p_SDS   lsd_lm_2           ;
      p_SDS   lsd_lm_1           ;
      _SHORT _PTR  x=low_data->x ;
      _SHORT _PTR  y=low_data->y ;

        fl = SUCCESS ;
        minlenth = (_SHORT)DEF_MINLENTH ;
        maxa = DEF_MAXA_FOR_SH ;                 maxcr = DEFAULT_MAXCR ;
        lm = 0 ;

          while  ( lsd[++lm].mark != END )
           {
               if  ( lm < MIN_STRAIGHTS_TO_CONSIDER )
                     continue ;

             lsd_lm  = &lsd[lm]     ;
             lm_ibeg = lsd_lm->ibeg ;
             lm_iend = lsd_lm->iend ;

               if  ( lsd_lm->des.s <= minlenth  )
                     continue ;

               if  ( x[lm_ibeg] >= x[lm_iend] )
                     continue ;

             RelHigh( y, lm_ibeg, lm_iend, height, &lowrelh, &uprelh ) ;

               if  ( lowrelh <= _D1_ )
                     continue ;

               if  ( lowrelh <= _DM_ )
                   { maxa = maxa * PEN_A_HEIGHT11 / SHORT_BASE ; }

               if  ( ( HWRAbs(lsd_lm->des.a) > maxa  ) ||
                     (        lsd_lm->des.cr > maxcr )    )
                       continue ;

             lsd_lm_2 = lsd_lm - 2 ;
             lsd_lm_1 = lsd_lm - 1 ;

               if  ( ( HWRAbs( lsd_lm_2->des.a  ) >= AVERT )  &&
                     ( lsd_lm_2->des.cr < maxcr )             &&
                     ( lsd_lm_2->des.s  > minlenth )             )
                     {
                       if  ( FindCrossPoint ( x[lm_ibeg] , y[lm_ibeg] ,
                                              x[lm_iend] , y[lm_iend] ,
                                              x[lsd_lm_2->ibeg] ,
                                              y[lsd_lm_2->ibeg] ,
                                              x[lsd_lm_2->iend] ,
                                              y[lsd_lm_2->iend] ,
                                              &xb, &yb )                  )
                         {
                           imin0 = iYup_range(y, lsd_lm->ibeg, lsd_lm->iend) ;
                           imin1 = iYup_range(y, lsd_lm_1->ibeg, lsd_lm_1->iend) ;

                             if  ( y[imin0]-EPS_Y  >  y[imin1] )
                                   continue  ;

                           midB = iClosestToXY ( lsd_lm_2->ibeg ,
                                                 lsd_lm_2->iend ,
                                                 x, y, xb, yb     ) ;

                             if  ( y[midB-1] == BREAK )  begB = midB     ;
                             else                        begB = midB - 1 ;

                             if  ( y[midB+1] == BREAK )  endB = midB     ;
                             else                        endB = midB + 1 ;

                           p_tmpSpecl0->mark    = SHELF   ;
                           p_tmpSpecl0->ibeg    = (_SHORT)lm_ibeg ;
                           p_tmpSpecl0->iend    = (_SHORT)lm_iend ;
                           p_tmpSpecl0->ipoint0 = (_SHORT)begB    ;
                           p_tmpSpecl0->ipoint1 = (_SHORT)endB    ;

                             if  ( MarkSpecl( low_data, p_tmpSpecl0 )
                                                       == UNSUCCESS )
                                     { fl = UNSUCCESS;  goto  QUIT; }
#if PG_DEBUG
                             if  (mpr == 3)
                               {
                                 draw_line( x[lm_ibeg]  , y[lm_ibeg] ,
                                            x[lm_iend]  , y[lm_iend] ,
                                          COLORSH, SOLID_LINE, NORM_WIDTH );
                                 draw_line( x[lm_ibeg]-1, y[lm_ibeg] ,
                                            x[lm_iend]-1, y[lm_iend] ,
                                          COLORSH, SOLID_LINE, NORM_WIDTH );
                               }
#endif
                         }

                     }

           }
  QUIT:
     return( fl ) ;
    }

 #undef          MIN_STRAIGHTS_TO_CONSIDER
 #undef          DEF_MAXA_FOR_SH
 #undef          AVERT

 /**************************************************************************/

     /*  The function searches for configurations like this:  */
     /*                                                       */
     /*                    ToBeStroke                         */
     /*                  o     |                              */
     /*                  o     v                              */
     /*         ********************                          */
     /*                  o         *      *                   */
     /*                  o         *       *                  */
     /*                  o         *        *                 */
     /*                  o          *       *                 */
     /*                  o           *      *                 */
     /*                  o           *     *                  */
     /*                 oo             * *                    */
     /*                                                       */
     /* to find STROKES (NOW!).                               */

  #define    MAXHOR                     70       /* Max horizontal limit  */
                                                 /* of hor-main-line tg . */
  #define    MINVERT                    150      /* Min vertical limit of */
                                                 /* cross-line tg .       */
  #define    RMINNEZ                    4L       /* Min significant lenth */
                                                 /* of hor-main-line .    */
  #define    LIM_FULL_LEN               80       /* Max horizontal limit  */
                                                 /* of hor-main-line tg . */
  #define    POINT_FILTR                4
  #define    EXPAND_INV_ZONE            3


 /***************  Some weight cofficients . *******************************/

  #define    HWGT01                     165
  #define    HWGT02                     180
  #define    HWGT11                     8
  #define    HWGT12                     3
  #define    HWGT21                     135

 /**************************************************************************/


  #define    CROSS_NUM                  5
  #define    VERT_LENTH_LEVEL           10
  #define    MIN_A_VERT_STICKS          90
  #define    MAX_A_HORL_STICKS          100
  #define    MAX_CR_HOR_ST_ARC_FIRST    65
  #define    MAX_CR_HOR_ST_ARC_SECOND   35
  #define    MAX_CR_HOR_ST_ARC          20
  #define    MAX_CR_VER_ST_ARC          35
  #define    S_S_DENOMINATOR            22


  #define    NOCUT      2
  #define    CUTOK      3


  #define    B_TS       2
  #define    D_TI       3
  #define    S_ST       4

  _SHORT  HatchureS( p_LowData   pLowData ,
                     SPECL _PTR  pcSpecl  , p_INT  pHeight  )
    {
     p_POINTS_GROUP  pVS_Collector  = pLowData->pVS_Collector ;
      _INT           VertSticksNum  = pLowData->VertSticksNum ;
     p_C_SDS         p_cSDS         = pLowData->p_cSDS        ;
     p_SDS           pSDS           = p_cSDS->pSDS            ;
     p_SHORT         X              = pLowData->x             ;
     p_SHORT         Y              = pLowData->y             ;
     _INT            iBeg           = pcSpecl->ibeg           ;
     _INT            iEnd           = pcSpecl->iend           ;
     _INT            numLastGroup   = pcSpecl->ipoint0        ;
     p_SDS           pBegSDS        = pSDS + p_cSDS->iBegLock_SDS       ;
     _INT     lstBeg = ( pLowData->pGroupsBorder + numLastGroup )->iBeg ;
     _INT     lstEnd = ( pLowData->pGroupsBorder + numLastGroup )->iEnd ;

     _SHORT   fl_Hatchure  = SUCCESS ;

     _HAT_DENOM_TYPE DenH  = DENOM_UNKNOWN ;
     _INT     iEndStrkMax  = UNDEF   ;
     _INT     gStrkMaxEnd  = UNDEF   ;

      PS_point_type  CrossPoint, CrossPoint0 ;

      POINTS_GROUP gStrk , gStick    ;
     _INT     iBegStrk   , iEndStrk  ;
    p_SDS     pStrokeSDS             ;
     _INT     iToBeStroke            ;
     _INT     il         , jl        ;
      SPECL   SpcStick   , SpcStrk   ;
     _BOOL    fl_DrawCross           ;

          if  ( (iBeg <= 2) || (lstBeg == UNDEF) || (lstEnd == UNDEF) )
              { goto  QUIT ; }

        iToBeStroke = ApprHorStroke( pLowData ) ;

          if  ( iToBeStroke == UNDEF )
              { goto  QUIT ; }

        pStrokeSDS  = pBegSDS + iToBeStroke ;
        iBegStrk    = pStrokeSDS->ibeg      ;
        iEndStrk    = pStrokeSDS->iend      ;

          if  ( InitSpeclElement( &SpcStrk ) == UNSUCCESS )
              { fl_Hatchure  = UNSUCCESS ;    goto  QUIT ; }

  #if PG_DEBUG

          if  ( mpr == 1 )
              {
                draw_line( X[iBegStrk] , Y[iBegStrk] ,
                           X[iEndStrk] , Y[iEndStrk] ,
                           COLORT, SOLID_LINE, NORM_WIDTH ) ;
              }
  #endif

          for  (  jl  =  0 , il = VertSticksNum - 1 ;
                 ( il >= 0 ) && ( jl < CROSS_NUM )  ;  il-- )
            {
              _SHORT         iStickBeg    , iStickEnd ;
              POINTS_GROUP   InvExtrCut   ;
              SPECL          dSL_iSH      ;
              PS_point_type  R_min        ;
              _INT           numStickGr   ;
              _SHORT         dSLeft       ;
              _BOOL          fl_SCut      ;
              _BOOL          fl_FindCross ;


                fl_FindCross  = _FALSE ;
                fl_DrawCross  = _FALSE ;

                iStickBeg = (pVS_Collector + il)->iBeg ;
                iStickEnd = (pVS_Collector + il)->iEnd ;

                  if  ( (iStickEnd >= iBegStrk) || (iStickBeg >= iStickEnd) )
                      { continue ; }

                numStickGr = GetGroupNumber( pLowData , iStickBeg ) ;

                  if  (    ( numStickGr > numLastGroup )
                        || ( numStickGr < numLastGroup - 2 ) )
                      { continue ; }

                  if  ( InitSpeclElement( &SpcStick ) == UNSUCCESS )
                      { fl_Hatchure  = UNSUCCESS ;    goto  QUIT ; }

                gStick.iBeg = iStickBeg ;
                gStick.iEnd = iStickEnd ;

  #if PG_DEBUG

                  if  ( mpr == 1 )
                      {
                        draw_line( X[iStickBeg] , Y[iStickBeg] ,
                                   X[iStickEnd] , Y[iStickEnd] ,
                                   COLORSH, DASHED_LINE, NORM_WIDTH ) ;
                      }
  #endif

                 SpcStrk.ibeg   = gStrk.iBeg = (_SHORT)iBegStrk ;
                 SpcStrk.iend   = gStrk.iEnd = (_SHORT)iEndStrk ;

                 SpcStick.ibeg  = iStickBeg  ;
                 SpcStick.iend  = iStickEnd  ;
                 SpcStick.other = (_UCHAR)numStickGr ;

                 fl_FindCross  = Find_Cross( pLowData, &CrossPoint,
                                             &gStrk  , &gStick )  ;

                  if  ( fl_FindCross == _FALSE )
                      {
                        fl_DrawCross = DrawCross(   pLowData , pHeight,
                                       &CrossPoint, &SpcStick, &SpcStrk ) ;
                      }

                  if  (    ( fl_FindCross == _FALSE )
                        && ( fl_DrawCross == _FALSE ) )
                      { continue ; }
                  else
                      {
                        DenH  = DENOM_ANGLE ;
  #if PG_DEBUG
                            if  ( mpr == 1 )
                              {
                                draw_arc(  EGA_MAGENTA  , X, Y, iBegStrk, iEndStrk     ) ;
                                draw_line( X[iBegStrk]  , Y[iBegStrk]   ,
                                           X[iEndStrk]  , Y[iEndStrk]   ,
                                           EGA_MAGENTA  , SOLID_LINE    , THICK_WIDTH  ) ;

                                draw_arc(  EGA_MAGENTA  , X, Y, iStickBeg, iStickEnd   ) ;
                                draw_line( X[iStickBeg] , Y[iStickBeg]  ,
                                           X[iStickEnd] , Y[iStickEnd]  ,
                                           EGA_MAGENTA  , SOLID_LINE    , THICK_WIDTH  ) ;

                                brkeyw("\n Press any key .... ") ;
                              }
  #endif

                          if  ( fl_DrawCross == _FALSE )
                              {
                                SpcStick.ipoint0 = gStick.iBeg    ;
                                SpcStick.ipoint1 = gStick.iEnd    ;

                                SpcStrk.ipoint0  = gStrk.iBeg     ;
                                SpcStrk.ipoint1  = gStrk.iEnd     ;
                                SpcStick.attr    = (_UCHAR)_FALSE   ;
                                SpcStrk.other    = (_UCHAR)_FALSE ;
                              }
                          else
                              {
                                gStick.iBeg      = SpcStick.ipoint0 ;
                                gStick.iEnd      = SpcStick.ipoint1 ;

                                gStrk.iBeg       = SpcStrk.ipoint0  ;
                                gStrk.iEnd       = SpcStrk.ipoint1  ;
                                SpcStick.attr    = (_UCHAR)_TRUE    ;
                                SpcStrk.other    = (_UCHAR)_TRUE    ;
                              }

                        fl_SCut = SCutFiltr( pLowData   , pHeight, &SpcStrk,
                                             &CrossPoint, &dSLeft ) ;

                        dSL_iSH.ipoint0 = dSLeft ;

                          if  ( ShiftsAnalyse( pLowData, &SpcStick  ,
                                      &SpcStrk, pcSpecl ) == _TRUE  )
                              { goto QUIT ; }

                          if  ( numStickGr  < numLastGroup )
                              {
                                InvExtrCut.iBeg = (_SHORT)iBeg ;
                                InvExtrCut.iEnd = (_SHORT)iEnd ;
                                gStick.iBeg     = (_SHORT)lstBeg ;
                                gStick.iEnd     = (_SHORT)lstEnd ;

                                 if  ( Box_Cover( pLowData , &InvExtrCut,
                                                  &gStick  ) == _TRUE )
                                     { continue ; }
                              }

                        DenH     = HatDenAnal( pLowData, &SpcStrk /*, pcSpecl*/ ) ;
                        iEndStrk = SpcStrk.iend ;

                          if  ( iEndStrk > iEndStrkMax )
                              {
                                iEndStrkMax = iEndStrk ;
                              }

                          if  ( gStrk.iEnd > gStrkMaxEnd )
                              {
                                gStrkMaxEnd = gStrk.iEnd ;
                              }

                          if  ( iEndStrkMax < iEnd )
                              {
                                gStrk.iBeg  = (_SHORT)iBegStrk        ;
                                gStrk.iEnd  = (_SHORT)iEndStrkMax     ;
                                gStick.iBeg = (_SHORT)(iEndStrkMax + 1) ;
                                gStick.iEnd = (_SHORT)iEnd ;
                              }

  #if PG_DEBUG
                          if  ( mpr == 1 )
                              {
                                draw_line( X[iBegStrk], Y[iBegStrk],
                                           X[iEndStrk], Y[iEndStrk],
                                           COLORSH, DASHED_LINE, THICK_WIDTH ) ;
                              }

  #endif
                        dSL_iSH.ibeg = gStrk.iBeg ;
                        dSL_iSH.iend = gStrk.iEnd ;

                        jl++  ;
                      }


                  if  ( iEndStrkMax == UNDEF )
                      {
                        continue ;
                      }


                  if  ( iEndStrkMax + 2 >=  iEnd  )
                      {
                        goto  MARK ;
                      }
                  else
                    {
                      gStrk.iBeg  = (_SHORT)(gStrkMaxEnd - 1) ;
                      gStrk.iEnd  = (_SHORT)iEndStrk          ;
                      gStick.iBeg = (_SHORT)(iEndStrkMax + 1) ;
                      gStick.iEnd = (_SHORT)iEnd              ;

                        if  ( Find_Cross( pLowData, &CrossPoint0,
                                          &gStrk  , &gStick ) == _TRUE )
                          {
                            DenH = DENOM_CROSS ;

                              if  ( SpcStrk.ibeg >= SpcStrk.iend )
                                  {
                                    fl_Hatchure = SUCCESS ;
                                       goto  QUIT ;
                                  }
                              else  if  ( SpcStrk.ibeg + 1 == SpcStrk.iend )
                                  {
                                    iEndStrkMax = SpcStrk.iend ;
                                  }
                              else  if  ( gStrk.iEnd == gStrkMaxEnd )
                                {
                                  X[gStrk.iBeg] = MEAN_OF( CrossPoint.x ,
                                                           CrossPoint0.x ) ;
                                  Y[gStrk.iBeg] = MEAN_OF( CrossPoint.y ,
                                                           CrossPoint0.y ) ;
                                  iEndStrkMax   = gStrk.iBeg ;
                                }
                              else
                                { iEndStrkMax = gStrk.iEnd - 1 ; }

                            SpcStrk.iend = (_SHORT)iEndStrkMax ;
                          }
                        else
                          {
                            CrossPoint0.x = CrossPoint0.y = UNDEF ;
                          }
                    }


                  if  ( iEndStrkMax < iEnd )
                    {
                     _BOOL           flagLeF        ;
                      SPECL          GnumCExtr      ;
                      PS_point_type  CrossPoint1    ;
                      gStrk.iBeg  =  (_SHORT)(iEndStrkMax + 1) ;
                      gStrk.iEnd  =  (_SHORT)iEnd   ;
                      gStick.iBeg =  (_SHORT)lstBeg ;
                      gStick.iEnd =  (_SHORT)lstEnd ;

                        if  ( Find_Cross( pLowData, &CrossPoint1,
                                          &gStrk  , &gStick  ) == _FALSE  )
                          {
                              R_min.y = RMinCalc(    pLowData , /*pHeight,*/
                                &SpcStrk, &SpcStick, pcSpecl  , &GnumCExtr ) ;

                              R_min.x =  GnumCExtr.iend ;
                          }
                        else
                          {
                            R_min.x = R_min.y =  0 ;
                              goto  QUIT ;
                          }

  #if PG_DEBUG
                        if  ( mpr == 1 )
                            {
                              draw_line( X[iBegStrk], Y[iBegStrk],
                              X[iEndStrkMax], Y[iEndStrkMax],
                              EGA_CYAN, SOLID_LINE, THICK_WIDTH ) ;
                            }
  #endif

                      flagLeF = LeFiltr( pLowData , &SpcStick,
                                         GnumCExtr.ipoint0   ) ;

                        dSL_iSH.attr = (_UCHAR)flagLeF ;

                        if  ( LowStFiltr( pLowData, pHeight, &SpcStick,
                                          &CrossPoint, &dSL_iSH ) == _FALSE )
                                 { goto QUIT ; }


                        if  (    ( fl_SCut == _FALSE )
                              && ( flagLeF == _FALSE ) )
                                 { goto QUIT ; }

                        if  (    ( GnumCExtr.ibeg == D_TI   )
                              && ( flagLeF == _FALSE )
                              && ( DenH    !=  DENOM_CROSS  )
                              && ( RDFiltr(  pLowData, &R_min,
                                   &SpcStrk, &CrossPoint ) == _FALSE ) )
                                 { goto  QUIT ; }

                        if  ( Oracle( /*pLowData,*/ &R_min, DenH ) )
                            {
                              goto  MARK ;
                            }
                        else
                            {
                              goto  QUIT ;
                            }
                    }
            }

     MARK:
          if  ( ( iEndStrkMax != UNDEF )  &&  ( DenH != DENOM_UNKNOWN ) )
            {
              fl_Hatchure = StrokeAnalyse( pLowData  , pHeight ,
                                           &SpcStrk  , pcSpecl ,
                                           &SpcStick , fl_DrawCross ) ;

                if         ( fl_Hatchure == UNSUCCESS )
                           {
                               goto  QUIT ;
                           }
                else   if  ( fl_Hatchure == NOCUT )
                           {
                             fl_Hatchure = SUCCESS ;
                               goto  QUIT ;
                           }
                else   if  ( fl_Hatchure == STROKE )
                           {
                               if  ( SpcStrk.iend == pcSpecl->iend )
                                   {
                                     iEndStrkMax = pcSpecl->iend ;
                                   }

                             pcSpecl->mark    = STROKE           ;
                             pcSpecl->ipoint0 = SpcStick.ipoint0 ;
                             pcSpecl->ipoint1 = SpcStick.ipoint1 ;
                           }

                if  ( SpcStrk.iend != pcSpecl->iend )
                    {
                       if   ( InsertBreakAfter( pLowData , _MEAN ,
                              (_SHORT)iEndStrkMax , &CrossPoint0 ) == _FALSE )
                            {
                                fl_Hatchure = UNSUCCESS ;
                                   goto  QUIT ;
                            }
                    }

              pcSpecl->other = CUTTED      ;
              pcSpecl->iend  = (_SHORT)iEndStrkMax ;

                #if PG_DEBUG

                    if  ( mpr == 1 )
                        {
                          draw_line( X[iBegStrk], Y[iBegStrk],
                          X[iEndStrkMax], Y[iEndStrkMax],
                          COLORT, SOLID_LINE, THICK_WIDTH ) ;
                        }
               #endif
            }

    QUIT:
    return( fl_Hatchure ) ;
    }

  //------------------------------------------------------------------------

  _BOOL  LowStFiltr( low_type  _PTR  pLowData ,  p_INT    pHeight ,
                     SPECL     _PTR  pStick   ,   _TRACE  pCrossPoint  ,
                     SPECL     _PTR  p_dSL_iSH   )
    {
      _SHORT          numStickGr   = pStick->other           ;
     p_POINTS_GROUP   pStickGr     = pLowData->pGroupsBorder + numStickGr ;
     p_SHORT          Y            = pLowData->y             ;
     //p_SHORT          X            = pLowData->x             ;
      _INT            iBegStick    = pStick->ibeg            ;
      _INT            iEndStick    = pStick->iend            ;
      _SHORT          dSleft       = p_dSL_iSH->ipoint0      ;
      _BOOL           fl_Draw      = (_BOOL)pStick->other    ;
      _BOOL           flagLeF      = (_BOOL)p_dSL_iSH->attr  ;
      _SHORT          UpH , LowH   ;
      _INT            iUpH         ;
      _INT            iEndStrk     ;
      //_INT            dX  , dY     ;
       POINTS_GROUP   gStick       ;
      _INT            iLow , iUp   ;
      _INT            ModWrd0      ;
      _INT            numCExtr0    ;
      //_INT            dUp          ;
      _BOOL           flag_LSF = _TRUE ;

        RelHigh( Y, iBegStick, iEndStick, pHeight, &LowH, &UpH ) ;

          if  ( fl_Draw == _TRUE )
              {
                if  ( LowH > _D1_ )
                    {
                       flag_LSF = _FALSE ;
                         goto   QUIT ;
                    }
              }
          else
              {
                if  ( LowH > _DM_ )
                    {
                       flag_LSF = _FALSE ;
                         goto   QUIT ;
                    }
              }

         gStick.iBeg  = (_SHORT)iBegStick ;
         gStick.iEnd  = pStickGr->iEnd    ;

          if  ( Y[iEndStick] > Y[iBegStick] )
              {
                ModWrd0      = 0 | ANY_OCCUARANCE ;
                numCExtr0    = SpcElemFirstOccArr ( pLowData , &ModWrd0 ,
                                                    &gStick  ,  MAXW  ) ;
                  if  ( numCExtr0 == UNDEF )
                      {
                        goto  QUIT ;
                      }

                iLow = ( pLowData->specl + numCExtr0 )->ipoint0 ;
              }
          else if  ( Y[iEndStick] < Y[iBegStick] )
              {
               _INT  YLow ;

                iLow = iBegStick  ;
                YLow = Y[ iLow ]  ;

                  while ( (Y[iLow - 1] != BREAK) && (Y[iLow - 1] >= YLow) )
                    {
                      iLow-- ;
                    }
              }
          else
              {
                flag_LSF = _FALSE ;
                  goto   QUIT ;
              }


          if  ( Y[iEndStick] < Y[iBegStick] )
              {
                ModWrd0      = 0 | ANY_OCCUARANCE ;
                numCExtr0    = SpcElemFirstOccArr ( pLowData , &ModWrd0 ,
                                                    &gStick  ,  MINW  ) ;
                iUp = ( pLowData->specl + numCExtr0 )->ipoint0 ;
              }
          else if  ( Y[iEndStick] > Y[iBegStick] )
              {
               _INT  YUp ;

                iUp =  iBegStick ;
                YUp =  Y[iUp ]   ;

                  while ( ( Y[iUp - 1] != BREAK ) && ( Y[iUp - 1] <= YUp ) )
                    {
                      iUp-- ;
                    }
              }
          else
              {
                flag_LSF = _FALSE ;
                  goto   QUIT     ;
              }

        RelHigh( Y, iUp, iLow,  pHeight, &LowH, &UpH ) ;

          if  ( UpH < _U3_ )
              {
                 if  ( ( fl_Draw == _TRUE ) && ( LowH < _D2_ ) )
                     {
                       flag_LSF = _FALSE ;
                         goto   QUIT ;
                     }

                //dX  = pCrossPoint->x - X[iUp] ;
                //dY  = pCrossPoint->y - Y[iUp] ;
                //
                //dUp = HWRMathILSqrt( (_LONG)dX*dX + (_LONG)dY*dY ) ;

                 if  ( Y[ p_dSL_iSH->iend + 1 ]  != BREAK )
                     {
                       iEndStrk = p_dSL_iSH->iend + 1 ;
                     }
                 else
                     {
                       iEndStrk = p_dSL_iSH->iend ;
                     }

               iUpH = iyMin( p_dSL_iSH->ibeg , iEndStrk , Y ) ;

                 if  (    ( Y[iUpH] < Y[iUp] + TWO(EPS) )
                       && ( dSleft  < THREE(EPS)  )
                       && ( flagLeF ==  _FALSE )  )
                     {
                       flag_LSF = _FALSE ;
                         goto   QUIT ;
                     }
              }

    QUIT:
    return( flag_LSF ) ;
    }

  //------------------------------------------------------------------------

  _BOOL   SCutFiltr( low_type _PTR  pLowData ,  p_INT    pHeight ,
                     SPECL    _PTR  pStrk    ,   _TRACE  pCrossPoint ,
                                                p_SHORT  p_dSleft  )
    {
     p_SHORT          Y            = pLowData->y  ;
     p_SHORT          X            = pLowData->x  ;
      _INT            iBegStrk     = pStrk->ibeg  ;
      _INT            iEndStrk     = pStrk->iend  ;
      _SHORT          UpH , LowH   ;
      _INT            dX  , dY     ;
      _INT            iLeft        ;
      _INT            dUp          ;
      _BOOL           flag_SCF     ;

         RelHigh( Y, iBegStrk, iEndStrk, pHeight, &LowH, &UpH ) ;

         iLeft = ixMin( iBegStrk, iEndStrk, X, Y ) ;

         dX    = pCrossPoint->x - X[iLeft] ;
         dY    = pCrossPoint->y - Y[iLeft] ;

         dUp = HWRMathILSqrt( (_LONG)dX*dX + (_LONG)dY*dY ) ;
         *p_dSleft = (_SHORT)dUp;

           if  ( ( UpH > _D1_ ) || ( dUp >= THREE(EPS) ) )
               {
                 flag_SCF = _TRUE ;
                   goto QUIT ;
               }
           else
               {
                 flag_SCF = _FALSE ;
                   goto   QUIT ;
               }

    QUIT:
    return( flag_SCF ) ;
    }

  //------------------------------------------------------------------------

  _BOOL   RDFiltr( low_type _PTR  pLowData , _TRACE  pR_min  ,
                   SPECL    _PTR  pStrk    , _TRACE  pCrossPoint )
    {
     p_SHORT          Y            = pLowData->y      ;
     p_SHORT          X            = pLowData->x      ;
      _INT            iBegStrk     = pStrk->ibeg      ;
      _INT            iEndStrk     = pStrk->iend + 2  ;
      _INT            dX  , dY     ;
      _INT            iRight       ;
      _INT            dRight       ;
      _BOOL           flag_RDF     ;

         iRight = ixMax( iBegStrk, iEndStrk, X, Y ) ;

         dX  = pCrossPoint->x - X[iRight] ;
         dY  = pCrossPoint->y - Y[iRight] ;

         dRight = HWRMathILSqrt( (_LONG)dX*dX + (_LONG)dY*dY ) ;

           if  ( pR_min->y < TWO_FIFTH( dRight ) )
               {
                 flag_RDF = _FALSE ;
                   goto   QUIT ;
               }
           else
               {
                 flag_RDF = _TRUE ;
               }
    QUIT:
    return( flag_RDF ) ;
    }

  //------------------------------------------------------------------------

  _SHORT  RMinCalc( low_type _PTR  pLowData , /*p_SHORT         pHeight ,*/
                    SPECL    _PTR  pStrk    , SPECL _PTR      pStick  ,
                    SPECL    _PTR  pcSpecl  , SPECL _PTR  p_numCExtr )
    {
     p_SPECL          pSpecl       = pLowData->specl      ;
     p_SHORT          X            = pLowData->x          ;
     p_SHORT          Y            = pLowData->y          ;
      _INT            numStickGr   = pStick->other        ;
     p_POINTS_GROUP   pStickGr     = pLowData->pGroupsBorder + numStickGr ;
      _INT            numCExtr0 ,  numCExtr1 , numCExtr2  ;
     p_SPECL          pTmpSpecl ,  pTmpSpecl0             ;
      _SHORT          iClosest0 ,  iClosest1              ;
      _SHORT          R_min0    ,  R_min1                 ;
      _INT            dX_min0   ,  dX_min1                ;
       PS_point_type  ClosestPoint ;
       POINTS_GROUP   gStrk        ;
      _SHORT          fl_Conf      ;
      _INT            iY           ;
      _INT            ModWrd0      ;

          #if PG_DEBUG
            PS_point_type  ClosestPointPR , ClosestPointPX ;
              _SHORT       iClosestX      ;
          #endif

        //UNUSED(pHeight);

        fl_Conf = UNDEF ;
        iClosest0 = UNDEF;
        iClosest1 = UNDEF;

          if  ( pcSpecl->iend <= (pStrk->iend + 1) )
              {
                dX_min1   = R_min1 =  ALEF  ;
                fl_Conf   = S_ST            ;
                iClosest0 = UNDEF           ;
                  goto  QUIT                ;
              }

        numCExtr0  = numCExtr1 = numCExtr2 = UNDEF ;
        gStrk.iBeg = (_SHORT)(pStrk->iend + 1)    ;
        gStrk.iEnd = pcSpecl->iend      ;
        ModWrd0    = 0 | ANY_OCCUARANCE ;
        numCExtr2  = SpcElemFirstOccArr ( pLowData , &ModWrd0 ,
                                          &gStrk   , MAXW    ) ;
        pTmpSpecl0 = pSpecl + numCExtr2 ;

          if  ( numCExtr2 == UNDEF )
              {
                dX_min1   = R_min1 = ALEF  ;
                fl_Conf   = S_ST           ;
                iClosest0 = UNDEF          ;
                  goto   QUIT ;
              }


        gStrk.iBeg = pStrk->ipoint1      ;
        gStrk.iEnd = pTmpSpecl0->ipoint0 ;
        ModWrd0    = 0 | ANY_OCCUARANCE  ;
        numCExtr0  = SpcElemFirstOccArr( pLowData , &ModWrd0 ,
                                         &gStrk   , MINW    ) ;
        pTmpSpecl  = pSpecl + numCExtr0  ;

          if  (    ( numCExtr0 != UNDEF )
                && ( (pTmpSpecl->iend + 1) > (pStrk->iend + 1) ) )
              {
                gStrk.iBeg = (_SHORT)(pTmpSpecl->iend + 1) ;
              }
          else
              {
                gStrk.iBeg = (_SHORT)(pStrk->iend + 1) ;
              }

        gStrk.iEnd = pcSpecl->iend      ;
        ModWrd0    = 0 | ANY_OCCUARANCE ;
        numCExtr0  = SpcElemFirstOccArr ( pLowData , &ModWrd0 ,
                                          &gStrk   , _MINX  ) ;
        pTmpSpecl  = pSpecl + numCExtr0 ;

          if  (    ( numCExtr0 == UNDEF )
               || !( ModWrd0 & TOTALY_INSIDE )
               ||  (    ( pTmpSpecl->iend > pTmpSpecl0->iend  )
                     && ( X[pTmpSpecl->ipoint0] > X[pTmpSpecl0->iend] ) ) )
              {
                ModWrd0    = 0 | ANY_OCCUARANCE ;
                gStrk.iBeg = pStick->iend       ;
                gStrk.iEnd = pStickGr->iEnd     ;
                ModWrd0    = 0 | ANY_OCCUARANCE ;
                numCExtr0  = SpcElemFirstOccArr ( pLowData , &ModWrd0 ,
                                                  &gStrk   , _MAXX  ) ;

                  if  ( numCExtr0 == UNDEF )
                      {
                        iClosest0 = UNDEF ;
                      }
                  else
                      {
                        iClosest0 = (pSpecl + numCExtr0)->ipoint0 ;
                      }

                dX_min1   = R_min1 = ALEF ;
                fl_Conf   = S_ST          ;

                  goto   QUIT ;
              }

          if  ( pcSpecl->iend > pTmpSpecl->iend + 1 )
              {
                gStrk.iBeg = (_SHORT)(pTmpSpecl->iend + 1) ;
                gStrk.iEnd = pcSpecl->iend       ;
                ModWrd0    = 0 | ANY_OCCUARANCE  ;
                numCExtr1  = SpcElemFirstOccArr ( pLowData , &ModWrd0 ,
                                                  &gStrk   , _MINX  ) ;
              }
          else
              { numCExtr1  = UNDEF ; }


          if  ( numCExtr1 != UNDEF )
              {
                pTmpSpecl = pSpecl + numCExtr1  ;

                  if  (    ( X[pTmpSpecl0->ibeg]   >= X[pTmpSpecl0->iend] )
                        && ( X[pTmpSpecl->ipoint0] <= X[pTmpSpecl0->iend] ) )
                      {
                        fl_Conf =  B_TS ;
                      }
                  else
                      {
                        fl_Conf =  D_TI ;
                      }
              }
          else
              {
                pTmpSpecl = pSpecl + numCExtr0 ;
                fl_Conf =  D_TI ;
              }

        iY = iyMax( pStick->ipoint0 , pStickGr->iEnd , Y ) ;

          if  ( Y[iY] > Y[pTmpSpecl->ipoint0] )
            {
              ClosestPoint.x = X[pTmpSpecl->ipoint0] ;
              ClosestPoint.y = Y[pTmpSpecl->ipoint0] ;

                if  ( Y[pStick->iend] >= Y[pStick->ibeg] )
                    {
                      gStrk.iBeg     = pStick->ipoint0 ;
                      gStrk.iEnd     = pStickGr->iEnd  ;
                    }
                else
                    {
                      gStrk.iBeg = pStickGr->iBeg  ;
                      gStrk.iEnd = pStick->ipoint0 ;
                    }
            }
          else
            {
              ClosestPoint.x = X[iY] ;
              ClosestPoint.y = Y[iY] ;

              gStrk.iBeg     = (_SHORT)(pStrk->iend + 1) ;
              gStrk.iEnd     = pcSpecl->iend   ;
            }

        R_min1 = R_ClosestToLine( &X[0] , &Y[0] ,
                                  &ClosestPoint , &gStrk, &iClosest1 ) ;

        dX_min1 = HWRAbs( ClosestPoint.x - X[iClosest1] ) ;

           #if PG_DEBUG
             ClosestPointPR  = ClosestPoint ;
             ClosestPointPX  = ClosestPoint ;
             iClosestX       = iClosest1    ;
           #endif

          if  ( numCExtr1 != UNDEF )
            {
              pTmpSpecl      = pSpecl + numCExtr0 ;
              ClosestPoint.x = X[pTmpSpecl->ipoint0] ;
              ClosestPoint.y = Y[pTmpSpecl->ipoint0] ;

              gStrk.iBeg     = pStick->ipoint0 ;
              gStrk.iEnd     = pStickGr->iEnd  ;

              R_min0 = R_ClosestToLine( &X[0] , &Y[0] ,
                                        &ClosestPoint , &gStrk, &iClosest0 ) ;

              dX_min0 = HWRAbs( ClosestPoint.x - X[iClosest0] ) ;

                if  ( R_min1 > R_min0 )
                    {
                      R_min1    = R_min0    ;
                      dX_min1   = dX_min0   ;
                      iClosest1 = iClosest0 ;

                        #if PG_DEBUG
                          ClosestPointPR = ClosestPoint ;
                        #endif
                    }
            }

          #if PG_DEBUG
            if  ( mpr == 1 )
                {
                  draw_line( ClosestPointPR.x   , ClosestPointPR.y ,
                             X[iClosest1]   , Y[iClosest1]   ,
                             COLORC, SOLID_LINE , NORM_WIDTH     ) ;

                  draw_line( ClosestPointPX.x   , ClosestPointPX.y ,
                             X[iClosestX]       , Y[iClosestX]     ,
                             COLORT, SOLID_LINE , NORM_WIDTH     ) ;
                }
          #endif

    QUIT:
    	if  ( iClosest0 == UNDEF && iClosest1 != UNDEF )
    	    {
    	      iClosest0 = iClosest1; /* in a fist glance makes sence */
    	    }                        /* (bug fixed after Andruxa's departure.) */
    	
        p_numCExtr->ipoint0 = iClosest0       ;
        p_numCExtr->ibeg    = fl_Conf         ;
        p_numCExtr->iend    = (_SHORT)dX_min1 ;

          if  ( (numStickGr == 0) && (fl_Conf == B_TS) )
              {
                R_min1 = 0 ;       // Tsar , tsetse , tsunamy !!!!!!!!!
              }

    return( R_min1 ) ;
    }

  #undef    B_TS
  #undef    D_TI

  //------------------------------------------------------------------------

  _BOOL  LeFiltr( low_type _PTR  pLowData ,  SPECL _PTR  pStick    ,
                                            _SHORT       iClosest  )
    {
     p_SHORT          Y           = pLowData->y           ;
     p_SPECL          pSpecl      = pLowData->specl       ;
      _SHORT          iBegStick   = pStick->ibeg          ;
      _SHORT          iEndStick   = pStick->iend          ;
      _SHORT          numStickGr  = pStick->other         ;
     p_POINTS_GROUP   pStickGr    = pLowData->pGroupsBorder + numStickGr ;
       POINTS_GROUP   gStick                              ;
      _INT            ModWrd0                             ;
      _SHORT          numCExtr0                           ;
      _BOOL           flagLef                             ;

           if  ( iClosest == UNDEF )
               {
                 flagLef = _FALSE ;
                   goto  QUIT     ;
               }

           if  ( Y[iEndStick] > Y[iBegStick]   )
               {
                 gStick.iBeg = (_SHORT)(pStick->iend - 1)    ;
                 gStick.iEnd = pStickGr->iEnd      ;
                 ModWrd0     = 0 | ANY_OCCUARANCE  ;
                 numCExtr0   = SpcElemFirstOccArr( pLowData , &ModWrd0 ,
                                                   &gStick  , _MAXX  ) ;
               }
           else  if  ( Y[iEndStick] < Y[iEndStick] )
               {
                 gStick.iBeg = pStickGr->iBeg      ;
                 gStick.iEnd = (_SHORT)(pStick->ibeg - 1)    ;
                 ModWrd0     = 0 | ANY_OCCUARANCE  ;
                 numCExtr0   = SpcElemFirstOccArr( pLowData , &ModWrd0 ,
                                                   &gStick  , _MAXX  ) ;
               }
           else
               {
                 flagLef = _FALSE ;
                   goto  QUIT     ;
               }

           if  (    ( numCExtr0 == UNDEF  )
                 || ( iClosest  >  ( pSpecl + numCExtr0 )->iend )
                 || ( iClosest  <  ( pSpecl + numCExtr0 )->ibeg )  )
               {
                 flagLef = _FALSE ;
                   goto  QUIT     ;
               }
           else
               {
                 flagLef = _TRUE  ;
               }

    QUIT: return( flagLef ) ;
    }

  //------------------------------------------------------------------------

  #define    MAX_A_HOR_ST_NOCUT    65

  _SHORT  StrokeAnalyse( low_type _PTR  pLowData , p_INT       pHeight ,
                         SPECL    _PTR  pStrk    , SPECL _PTR  pcSpecl ,
                         SPECL    _PTR  pStick   ,_BOOL   fl_DrawCross )
    {
     p_SHORT  X          = pLowData->x     ;
     p_SHORT  Y          = pLowData->y     ;
      _SHORT  iBeg       = pcSpecl->ibeg   ;
      _SHORT  iEnd       = pcSpecl->iend   ;
      _SHORT  iBegStrk   = pStrk->ibeg     ;
      _SHORT  iEndStrk   = pStrk->iend     ;
      _SHORT  iNext      = (_SHORT)(pStrk->iend + 2) ;
      _SHORT  fl_StrAnal = CUTOK           ;
       SPECL  tmpSpecl                     ;
      _SHORT  Xd   , Yd                    ;
      _SHORT  UpH  , LowH                  ;
      _SHORT  UpH0 , LowH0                 ;
      _SHORT  SPD_Mode                     ;
      _BOOL   flag_IDT                     ;
      _SDS    vSDS[3]                      ;
      _SDS    sSDS[3]                      ;

         if  ( ( iNext/*pStrk->iend + 2*/ ) >= pcSpecl->iend )
             {
               iEndStrk = pcSpecl->iend    ;
               SPD_Mode = STRIGHT_CROSSED  ;
             }
         else
             {
               SPD_Mode = COMMON_TYPE ;

               RelHigh( Y, iNext, iEnd, pHeight, &LowH, &UpH ) ;

                 if  ( LowH > _DM_ )
                     {
                       fl_StrAnal  = NOCUT ;
                          goto  QUIT ;
                     }

               RelHigh( Y, iEndStrk, iEndStrk, pHeight, &LowH0, &UpH0 ) ;

                 if  ( LowH >= LowH0 )
                     {
                       fl_StrAnal  = NOCUT ;
                          goto  QUIT ;
                     }

                 if  ( Init_SDS_Element( &vSDS[0] )  == _FALSE )
                     { fl_StrAnal = UNSUCCESS ;   goto  QUIT ; }

                 if  ( Init_SDS_Element( &vSDS[1] )  == _FALSE )
                     { fl_StrAnal = UNSUCCESS ;   goto  QUIT ; }

                 if  ( Init_SDS_Element( &vSDS[2] )  == _FALSE )
                     { fl_StrAnal = UNSUCCESS ;   goto  QUIT ; }

               vSDS[1].ibeg = pcSpecl->ibeg ;
               vSDS[1].iend = iNext ;

               iMostFarDoubleSide ( X, Y, &vSDS[1], &Xd, &Yd, _TRUE ) ;

                 if  (    ( HWRAbs( vSDS[1].des.a )  >  MAX_A_HORL_STICKS )
                       || ( vSDS[1].des.cr           >
                                    TWO_THIRD( MAX_CR_HOR_ST_ARC_FIRST )  ) )
                     {
                       fl_StrAnal = NOCUT ;
                          goto QUIT ;
                     }

               vSDS[1].ibeg = iNext ;
               vSDS[1].iend = pcSpecl->iend ;

               iMostFarDoubleSide(   X, Y, &vSDS[1], &Xd, &Yd, _TRUE ) ;
               xMinMax( iNext, iEnd, X, Y, &vSDS[1].xmin, &vSDS[1].xmax ) ;
               yMinMax( iNext, iEnd, Y,    &vSDS[1].ymin, &vSDS[1].ymax ) ;
               vSDS[0].des.cr = 1 ;
               vSDS[0].des.lg = SHORT_BASE    ;
               vSDS[0].xmin   = vSDS[1].xmin  ;
               vSDS[0].xmax   = vSDS[1].xmax  ;
               vSDS[0].ymin   = vSDS[1].ymin  ;
               vSDS[0].ymax   = vSDS[1].ymax  ;

               InitSpeclElement( &tmpSpecl )  ;
               tmpSpecl.ibeg  = iNext         ;
               tmpSpecl.iend  = iEnd          ;
               tmpSpecl.code  = (_UCHAR)UpH   ;
               tmpSpecl.attr  = (_UCHAR)LowH  ;

                 if  (  Dot( pLowData, &tmpSpecl, &vSDS[0] ) == DOT )
                     {
                        pStrk->iend = pcSpecl->iend ;
                        fl_StrAnal  = NOCUT  ;
                           goto  QUIT  ;
                     }

               fl_StrAnal = SPDClass( pLowData  , COMMON_TYPE ,
                                      &tmpSpecl , &vSDS[0] )  ;

                 if  ( fl_StrAnal == STROKE )
                     {
                       fl_StrAnal = NOCUT ;
                          goto  QUIT ;
                     }
             }

         if  ( Init_SDS_Element( &vSDS[0] )  == _FALSE )
             { fl_StrAnal = UNSUCCESS ;   goto  QUIT ; }

         if  ( Init_SDS_Element( &vSDS[1] )  == _FALSE )
             { fl_StrAnal = UNSUCCESS ;   goto  QUIT ; }

         if  ( Init_SDS_Element( &vSDS[2] )  == _FALSE )
             { fl_StrAnal = UNSUCCESS ;   goto  QUIT ; }

       vSDS[1].ibeg  = iBegStrk      ;
       vSDS[1].iend  = iEndStrk      ;

       iMostFarDoubleSide ( X, Y, &vSDS[1], &Xd, &Yd, _TRUE ) ;

       xMinMax( iBeg, iEnd, X, Y, &vSDS[0].xmin, &vSDS[0].xmax ) ;
       yMinMax( iBeg, iEnd, Y,    &vSDS[0].ymin, &vSDS[0].ymax ) ;

       vSDS[0].des.cr = 1 ;
       vSDS[1].des.lg = SHORT_BASE ;

         if  ( Init_SDS_Element( &sSDS[0] )  == _FALSE )
             { fl_StrAnal = UNSUCCESS ;   goto  QUIT ; }

         if  ( Init_SDS_Element( &sSDS[1] )  == _FALSE )
             { fl_StrAnal = UNSUCCESS ;   goto  QUIT ; }

         if  ( Init_SDS_Element( &sSDS[2] )  == _FALSE )
             { fl_StrAnal = UNSUCCESS ;   goto  QUIT ; }

       sSDS[1].ibeg  = pStick->ibeg  ;
       sSDS[1].iend  = pStick->iend  ;

       iMostFarDoubleSide ( X, Y, &sSDS[1], &Xd, &Yd, _TRUE ) ;

       flag_IDT = InvTanDel( pLowData , sSDS[1].des.a , vSDS[1].des.a ) ;

         if  ( flag_IDT == _TRUE )
             {
               RelHigh( Y, iBegStrk, iEndStrk, pHeight, &LowH, &UpH ) ;

               InitSpeclElement( &tmpSpecl ) ;
               tmpSpecl.ibeg = iBeg          ;
               tmpSpecl.iend = iEndStrk      ;
               tmpSpecl.code = (_UCHAR)UpH   ;
               tmpSpecl.attr = (_UCHAR)LowH  ;

               fl_StrAnal = SPDClass( pLowData, SPD_Mode, &tmpSpecl, &vSDS[0] ) ;

                 if  (    ( fl_StrAnal    != STROKE )
                       && ( vSDS[1].des.a >  MAX_A_HOR_ST_NOCUT ) )
                     {
                       fl_StrAnal = NOCUT ;
                     }
             }
         else
             {
               fl_StrAnal = NOCUT ;
             }

         if  ( iEndStrk == pcSpecl->iend )
             {
               if  ( fl_StrAnal != STROKE )
                   {
                     fl_StrAnal = NOCUT ;
                   }
               else
                   {
                     pStrk->iend = pcSpecl->iend ;
                   }
             }


         if  ( ( fl_DrawCross == _TRUE )  &&  ( fl_StrAnal != STROKE ) )
             {
               fl_StrAnal = NOCUT ;
             }


    QUIT: return( fl_StrAnal ) ;
    }

  //------------------------------------------------------------------------

  #undef     MAX_A_HOR_ST_NOCUT

  #undef     COMMON_TYPE
  #undef     STRIGHT_CROSSED

  #undef     NOCUT
  #undef     CUTOK

  //------------------------------------------------------------------------

  #define    MAX_A_STR_Y           48
  #define    MIN_A_STR_Y           15
  #define    MAX_CR_STR_Y          18
  #define    MAX_topH_STR_Y        6
  #define    MIN_topH_STR_Y        5
  #define    MAX_lowH_STR_Y        4
  #define    MIN_lowH_STR_Y        3
  #define    MIN_lowH_STR_Y        3
  #define    QUOT_top_bot_s        250


  _BOOL   YFilter( low_type _PTR  pLowData   ,
                   p_SDS          p_Strk_SDS , SPECL  _PTR  pcSpecl  )
    {
     p_SHORT          Y    = pLowData->y           ;
     p_SHORT          X    = pLowData->x           ;
      _SHORT          hTop = (_SHORT)pcSpecl->code ;
      _SHORT          hLow = (_SHORT)pcSpecl->attr ;
      _BOOL           fl_YFilter = _FALSE          ;
      _INT            numStickGr , numStrkGr       ;
       PS_point_type  CrossPoint                   ;
       POINTS_GROUP   gStrk , gStick               ;
      _SHORT          LowH  , UpH                  ;
      _INT            il                           ;

          if  (    ( p_Strk_SDS->des.a > MAX_A_STR_Y )
                || ( p_Strk_SDS->des.a < MIN_A_STR_Y ) )
              {
                  goto  QUIT ;
              }

          if  ( p_Strk_SDS->des.cr > MAX_CR_STR_Y )
              {
                  goto  QUIT ;
              }

          if  ( ( hTop > MAX_topH_STR_Y )  ||  ( hTop < MIN_topH_STR_Y ) )
              {
                  goto  QUIT ;
              }

          if  ( ( hLow > MAX_lowH_STR_Y )  ||  ( hLow < MIN_lowH_STR_Y ) )
              {
                  goto  QUIT ;
              }

        numStrkGr = GetGroupNumber( pLowData , pcSpecl->ibeg ) ;

          for   ( il = pLowData->VertSticksNum - 1 ; il >= 0 ; il-- )
              {
                gStick.iBeg = (pLowData->pVS_Collector + il)->iBeg ;
                gStick.iEnd = (pLowData->pVS_Collector + il)->iEnd ;

                numStickGr  = GetGroupNumber( pLowData , gStick.iBeg ) ;

                  if  ( numStickGr < numStrkGr - 1 )
                      { goto  QUIT ; }

                  if  (    ( numStickGr != numStrkGr + 1 )
                        && ( numStickGr != numStrkGr - 1 ) )
                      { continue ; }

               yMinMax( gStick.iBeg, gStick.iEnd, Y, &UpH, &LowH ) ;

                  if  ( LowH < STR_DOWN )
                      { goto  QUIT ; }

               gStrk.iBeg =  p_Strk_SDS->ibeg ;
               gStrk.iEnd =  p_Strk_SDS->iend ;

                 if   ( Find_Cross( pLowData  , &CrossPoint ,
                                    &gStrk    , &gStick     )  == _TRUE )
                      {
                        _INT    dStop , dSbot ;
                        _INT    iMinX , iMaxX ;
                        _INT    dX    , dY    ;

                          iMinX = ixMin( p_Strk_SDS->ibeg, p_Strk_SDS->iend, X, Y ) ;
                          iMaxX = ixMax( p_Strk_SDS->ibeg, p_Strk_SDS->iend, X, Y ) ;

                          dX =  CrossPoint.x - X[iMinX] ;
                          dY =  CrossPoint.y - Y[iMinX] ;

                          dStop = HWRMathILSqrt( (_LONG)dX*dX + (_LONG)dY*dY ) ;

                          dX =  CrossPoint.x - X[iMaxX] ;
                          dY =  CrossPoint.y - Y[iMaxX] ;

                          dSbot = HWRMathILSqrt( (_LONG)dX*dX + (_LONG)dY*dY ) ;

                            if  ( dSbot != 0 )
                                {
                                  if  ( (dStop * SHORT_BASE / dSbot)
                                                 >= QUOT_top_bot_s   )
                                      {
                                        fl_YFilter = _TRUE  ;
                                      }
                                }
                            else
                                {
                                  if  ( dStop > (_SHORT)DEF_MINLENTH )
                                      {
                                        fl_YFilter = _TRUE  ;
                                      }
                                }

                            #if PG_DEBUG

                              if  ( mpr == 1 )
                                  {
                                    draw_line( X[gStick.iBeg] , Y[gStick.iBeg] ,
                                               X[gStick.iEnd] , Y[gStick.iEnd] ,
                                               COLORC, SOLID_LINE, NORM_WIDTH ) ;
                                  }
                            #endif
                              break ;
                      }
              }

          #if PG_DEBUG

            if  ( mpr == 1 )
                {
                  _SHORT   iBegStrk = p_Strk_SDS->ibeg ;
                  _SHORT   iEndStrk = p_Strk_SDS->iend ;

                  draw_line( X[iBegStrk] , Y[iBegStrk] ,
                             X[iEndStrk] , Y[iEndStrk] ,
                             COLORC, SOLID_LINE , NORM_WIDTH ) ;
                }

          #endif

    QUIT: return( fl_YFilter ) ;
    }

  #undef     MAX_A_STR_Y
  #undef     MIN_A_STR_Y
  #undef     MAX_CR_STR_Y
  #undef     MAX_topH_STR_Y
  #undef     MIN_topH_STR_Y
  #undef     MAX_lowH_STR_Y
  #undef     MIN_lowH_STR_Y
  #undef     QUOT_top_bot_s

  //------------------------------------------------------------------------


  #define    HAT_ANGLE_LIM          60
  #define    HAT_ANGLE_LIM_SC       40

  _BOOL  InvTanDel( low_type _PTR  pLowData, _SHORT TanVert, _SHORT TanHor )
    {
     _BOOL   flag_IDT      ;
     _LONG   Hat_angle_lim ;
     _LONG   TanDel        ;
     _LONG   dTan          ;
     _LONG   WR0           ;

         if  ( TanHor  >= ALEF )
             {
               err_msg( " InvTanDel : Wrong Tan of horisontal element ..." ) ;
               flag_IDT = _FALSE  ;
                 goto   QUIT ;
             }

         if  ( TanVert >= ALEF )
             {
               flag_IDT = _TRUE ;
                 goto   QUIT    ;
             }

       dTan  = (_LONG)(TanVert - TanHor)  ;
       WR0   = ( LONG_BASE * LONG_BASE + (_LONG)TanVert * TanHor )
                                                        / LONG_BASE ;

         if  ( HWRLAbs( WR0 ) < SHORT_BASE )
             {
               flag_IDT = _TRUE  ;
                 goto QUIT ;
             }

       TanDel = HWRLAbs( LONG_BASE * dTan / WR0 ) ;


         if  ( (pLowData->rc->low_mode) & LMOD_SMALL_CAPS )
             {
               Hat_angle_lim = HAT_ANGLE_LIM_SC ;
             }
         else
             {
               Hat_angle_lim = HAT_ANGLE_LIM ;
             }

         if  ( TanDel > Hat_angle_lim )
             { flag_IDT = _TRUE  ; }
         else
             { flag_IDT = _FALSE ; }

    QUIT: return( flag_IDT ) ;
    }

    #undef   HAT_ANGLE_LIM
    #undef   HAT_ANGLE_LIM_SC

  //------------------------------------------------------------------------

  _BOOL  Oracle( /*low_type _PTR  pLowData ,*/
                _TRACE  pR_min  ,  _HAT_DENOM_TYPE  DenH  )

    {
       _INT             s_sDenominator     ;
       _BOOL            OracleVoice        ;

          if  ( DenH == DENOM_CROSS )
            {
              s_sDenominator = ONE_FOURTH( S_S_DENOMINATOR ) ;
            }
          else  if  ( DenH == DENOM_ANGLE )
            {
              s_sDenominator = THREE_FOURTH( S_S_DENOMINATOR ) ;
            }
          else  if  ( DenH == DENOM_EXTR )
            {
              s_sDenominator = S_S_DENOMINATOR ;
            }
          else
            {
              s_sDenominator = ALEF ;
            }

          if  ( (pR_min->y > s_sDenominator) && (pR_min->x > s_sDenominator) )
            {
              OracleVoice  = _TRUE  ;
            }
          else
            {
              OracleVoice  = _FALSE ;
            }

    /* QUIT: */ return( OracleVoice ) ;
    }

  //------------------------------------------------------------------------

  _HAT_DENOM_TYPE  HatDenAnal( low_type _PTR  pLowData ,
                               SPECL _PTR     pStrk    /*, SPECL _PTR  pcSpecl*/ )
    {
      p_SPECL  pSpecl = pLowData->specl   ;
      p_SHORT  X      = pLowData->x       ;
      p_SPECL  p_tmpSpecl                 ;
        POINTS_GROUP       WrkGroup0      ;
       _HAT_DENOM_TYPE     DenH           ;
       _INT    ModWrd0   , ModWrd1        ;
       _SHORT  chrExtr0  , chrExtr1       ;
       _SHORT  numCExtr0 , numCExtr1      ;

        //UNUSED(pcSpecl);

        WrkGroup0.iBeg   = pStrk->ipoint1 ;
        WrkGroup0.iEnd   = pStrk->iend    ;
        ModWrd0          = ModWrd1 = 0              ;
        ModWrd0          = ModWrd0 | ANY_OCCUARANCE ;
        ModWrd1          = ModWrd1 | ANY_OCCUARANCE ;

        numCExtr0 = SpcElemFirstOccArr( pLowData, &ModWrd0,
                                        &WrkGroup0, MAXYX ) ;

        p_tmpSpecl = pSpecl + numCExtr0 ;

          if  (   ( numCExtr0 != UNDEF )
               && ( X[p_tmpSpecl->iend] > X[pStrk->ibeg] + EPS ) )
            {
              if  (    ( ModWrd0  & TOTALY_INSIDE )
                    /* || ( ModWrd0  & BEG_INSIDE & IP0_INSIDE )
                    || ( ModWrd0  & END_INSIDE & IP0_INSIDE )
                    || ( ModWrd0  & TOTALY_COVERED & IP0_INSIDE ) mbo 4-18-98 */ )
                         chrExtr0 = (pSpecl + numCExtr0)->ipoint0 ;

              else  if  ( ModWrd0 & END_INSIDE )
                          chrExtr0 = (pSpecl + numCExtr0)->iend ;

              else  if  ( ModWrd0 & BEG_INSIDE )
                          chrExtr0 = (pSpecl + numCExtr0)->ibeg ;
              else
                    chrExtr0 = UNDEF ;
            }
          else
                chrExtr0 = UNDEF ;


        numCExtr1 = SpcElemFirstOccArr( pLowData  , &ModWrd1,
                                        &WrkGroup0, MAXXY   ) ;

        p_tmpSpecl = pSpecl + numCExtr1  ;

          if  (   ( numCExtr1 != UNDEF )
               && ( X[p_tmpSpecl->iend] > X[pStrk->ibeg] + EPS ) )
            {
              if  (    ( ModWrd1  & TOTALY_INSIDE )
                    /* || ( ModWrd1  & BEG_INSIDE & IP0_INSIDE )
                    || ( ModWrd1  & END_INSIDE & IP0_INSIDE )
                    || ( ModWrd1  & TOTALY_COVERED & IP0_INSIDE ) mbo 4-18-98 */ )
                         chrExtr1 = (pSpecl + numCExtr1)->ipoint0 ;

              else  if  ( ModWrd1 & END_INSIDE )
                          chrExtr1 = (pSpecl + numCExtr1)->iend ;

              else  if  ( ModWrd1 & BEG_INSIDE )
                          chrExtr1 = (pSpecl + numCExtr1)->ibeg ;
              else
                    chrExtr1 = UNDEF ;
            }
          else
                chrExtr1 = UNDEF ;


          if  (   ( chrExtr0 != UNDEF )
               && ( chrExtr1 != UNDEF ) )
            {
              pStrk->iend = HWRMin( chrExtr0 , chrExtr1 ) ;
              DenH = DENOM_EXTR ;
            }
          else  if  ( chrExtr0 != UNDEF )
            {
              pStrk->iend = chrExtr0 ;
              DenH = DENOM_EXTR ;
            }
          else  if  ( chrExtr1 != UNDEF )
            {
              pStrk->iend = chrExtr1 ;
              DenH = DENOM_EXTR ;
            }
          else
            {
              DenH = DENOM_ANGLE ;
            }

    /* QUIT: */ return( DenH )  ;
    }

  #undef      S_S_DENOMINATOR

  //------------------------------------------------------------------------

  _BOOL  InsertBreakAfter( low_type _PTR  pLowData , _SHORT  BreakAttr ,
                          _SHORT          FirstNum , _TRACE  pCrossPoint )
    {
     p_POINTS_GROUP  pVS_Collector  = pLowData->pVS_Collector ;
      _SHORT         VertSticksNum  = pLowData->VertSticksNum ;
      p_SHORT        Y              = pLowData->y             ;
      p_SHORT        X              = pLowData->x             ;
       _BOOL         InsFlag        = _TRUE                   ;
       _INT          BreakCoord     = FirstNum + 1            ;
       _INT          ModifCoord     = FirstNum + 2            ;
       _SHORT        Xd , Yd                                  ;
       _SDS          vSDS                                     ;
       _INT          il                                       ;

    #if defined (FOR_FRENCH)

      p_POINTS_GROUP       pGroupsBorder   = pLowData->pGroupsBorder   ;
       _SHORT              lenGrBord       = pLowData->lenGrBord       ;
      p_UM_MARKS_CONTROL   pUmMarksControl = pLowData->pUmMarksControl ;
      p_UM_MARKS           pUmMarks        = pUmMarksControl->pUmMarks ;
       _INT                tmpUMnumber     = pUmMarksControl->tmpUMnumber ;

    #endif

          if  ( ( Y[FirstNum] == BREAK ) || ( Y[ModifCoord] == BREAK )
                                         || ( Y[FirstNum+3] == BREAK ) )
              {
                err_msg (" InsertBreakAfter : Try to insert first(last) point ...") ;
                InsFlag = _FALSE ;
                  goto  QUIT ;
              }

          if  ( Y[FirstNum+1] == BREAK )
              {
                err_msg (" InsertBreakAfter : Targeted point alredy break ...") ;
                  goto  QUIT ;
              }

          if  ( pCrossPoint->x == UNDEF )
              {
                Y[ModifCoord] = FOUR_FIFTH( Y[BreakCoord] ) + ONE_FIFTH( Y[ModifCoord] ) ;
                X[ModifCoord] = FOUR_FIFTH( X[BreakCoord] ) + ONE_FIFTH( X[ModifCoord] ) ;
              }
          else
              {
                Y[ModifCoord] = FOUR_FIFTH( pCrossPoint->y ) + ONE_FIFTH( Y[ModifCoord] ) ;
                X[ModifCoord] = FOUR_FIFTH( pCrossPoint->x ) + ONE_FIFTH( X[ModifCoord] ) ;
              }

        Y[BreakCoord] = BREAK ;
        X[BreakCoord] = BreakAttr ;

    #if defined (FOR_FRENCH)

          for  ( il = 0 ;  il < tmpUMnumber ; il++ )
               {

                 _INT   numBrGr = GetGroupNumber( pLowData , FirstNum ) ;

                    if  ( pUmMarks->GroupNum <= numBrGr )
                          continue ;

                  (pUmMarks->GroupNum)++ ;
                   pUmMarks++ ;
               }
    #endif

          if   ( InitGroupsBorder( pLowData , INIT ) == UNSUCCESS )
               {
                 err_msg ( " InsertBreakAfter : Faild to reinit borders ... " ) ;
                 InsFlag = _FALSE ;
                   goto  QUIT ;
               }

          for  ( il = 0 ;  il < VertSticksNum ; il++ )
               {
                 if  (    ( (pVS_Collector + il)->iBeg <= BreakCoord )
                       && ( (pVS_Collector + il)->iEnd >= BreakCoord )  )
                     {
                       if ( ModifCoord < (pVS_Collector + il)->iEnd  )
                          {
                            vSDS.ibeg = (_SHORT)ModifCoord  ;
                            vSDS.iend = (pVS_Collector + il)->iEnd ;

                            iMostFarDoubleSide ( X, Y, &vSDS, &Xd, &Yd, _TRUE ) ;

                              if  ( ( HWRAbs(vSDS.des.a) > MIN_A_VERT_STICKS )
                                    && ( vSDS.des.cr < ONE_THIRD( MAX_CR_VER_ST_ARC ) )
                                    && ( vSDS.des.s  > VERT_LENTH_LEVEL  )  )
                                  {
                                    (pVS_Collector + il)->iBeg = (_SHORT)ModifCoord ;
                                      goto  QUIT ;
                                  }
                          }

                       HWRMemCpy(  pVS_Collector + il, pVS_Collector + il + 1,
                                  (VertSticksNum-il-1) * sizeof(POINTS_GROUP) ) ;

                       (pLowData->VertSticksNum)-- ;
                     }
               }

    QUIT: return( InsFlag )  ;
    }

 //------------------------------------------------------------------------

  _BOOL  ShiftsAnalyse( low_type _PTR  pLowData , SPECL _PTR  pStick ,
                        SPECL _PTR     pStrk    , SPECL _PTR  pcSpecl  )
    {
     p_SHORT  Y         =  pLowData->y    ;
     p_SPECL  pSpecl    = pLowData->specl ;
      _BOOL   fl_Shift ; // = _FALSE          ;
      _INT    ModWrd0   =  0              ;
      _SHORT  numCExtr0                   ;
      _INT    numStickGr                  ;
       POINTS_GROUP        WrkGroup0      ,
                           WrkGroup1      ;

        WrkGroup0.iBeg  = pStrk->ibeg     ;
        WrkGroup0.iEnd  = pStrk->ipoint1  ;

        WrkGroup1.iBeg  = pStrk->iend     ;
        WrkGroup1.iEnd  = pcSpecl->iend   ;

        fl_Shift = IsAnythingShift( pLowData   ,  &WrkGroup0 ,
                                    &WrkGroup1 , _LEFT , _LEFT ) ;

          if  ( fl_Shift == _TRUE )
              { goto  QUIT ; }

        numStickGr = GetGroupNumber( pLowData , pStick->ibeg ) ;

          if  ( Y[pStick->iend] >= Y[pStick->ibeg] )
              {
                WrkGroup0.iBeg = pStick->ipoint1 ;
                WrkGroup0.iEnd =
                   ( pLowData->pGroupsBorder + numStickGr )->iEnd ;
              }
          else
              {
                WrkGroup0.iBeg =
                   ( pLowData->pGroupsBorder + numStickGr )->iBeg ;

                WrkGroup0.iEnd = pStick->ipoint0 ;
              }

        ModWrd0   = ModWrd0 | ANY_OCCUARANCE ;
        numCExtr0 = SpcElemFirstOccArr( pLowData   , &ModWrd0 ,
                                        &WrkGroup0 , MAXW ) ;

          if  ( numCExtr0 != UNDEF )
              {
                WrkGroup0.iBeg =
                WrkGroup0.iEnd = (pSpecl + numCExtr0)->ipoint0 ;
              }
           else
              {
                if  ( Y[pStick->iend] >= Y[pStick->ibeg] )
                    {
                      WrkGroup0.iBeg  =
                      WrkGroup0.iEnd  = pStick->iend ;
                    }
                else
                    {
                      WrkGroup0.iBeg  =
                      WrkGroup0.iEnd  = pStick->ibeg ;
                    }
              }

        fl_Shift = IsAnythingShift( pLowData   , &WrkGroup0 ,
                                    &WrkGroup1 , _RIGHT     , _LEFT ) ;


    QUIT: return( fl_Shift )  ;
    }

 //------------------------------------------------------------------------

  _BOOL  DrawCross( low_type _PTR  pLowData ,
                    p_INT          pHeight  , _TRACE  pCrossPoint ,
                    SPECL _PTR     pStick   ,  SPECL _PTR  pStrk   )
    {
     p_SHORT  X         = pLowData->x   ;
     p_SHORT  Y         = pLowData->y   ;
      _INT    iStickBeg = pStick->ibeg  ;
      _INT    iStickEnd = pStick->iend  ;
      _INT    ixStrkMin , ixStrkMax     ;
      _INT    topDrawDel, botDrawDel    ,
                          LeftDrawDel   ;
      _INT    /*StickLow  ,*/ StickTop      ;
      _SHORT  xAnswer   , yAnswer       ;
      _SHORT  lowH      , upH           ;
      _BOOL   fl_DrawCross              ;

          if  ( Y[iStickEnd] > Y[iStickBeg] )
              {
                StickTop = iStickBeg ;
                //StickLow = pStick->iend ;
              }
          else  if  ( Y[iStickEnd] < Y[iStickBeg] )
              {
                StickTop = iStickEnd ;
                //StickLow = iStickBeg ;
              }
          else
              {
                fl_DrawCross = _FALSE ;
                  goto QUIT  ;
              }

        RelHigh( Y, StickTop, StickTop, pHeight, &lowH, &upH ) ;

          if  ( upH < _UM_ )
              {
                fl_DrawCross = _FALSE ;
                  goto QUIT  ;
              }

        topDrawDel = EPS       ;

          if  ( (pLowData->rc->low_mode) & LMOD_SMALL_CAPS )
              {
                LeftDrawDel = THREE( EPS ) ;
                botDrawDel  = FIVE( EPS )  ;
              }
          else
              {
                LeftDrawDel = ONE_HALF( EPS ) ;
                botDrawDel  = TWO( EPS ) ;
              }

        ixStrkMin    = ixMin( pStrk->ibeg, pStrk->iend, X, Y ) ;
        ixStrkMax    = ixMax( pStrk->ibeg, pStrk->iend, X, Y ) ;

        fl_DrawCross = FindCrossPoint( X[StickTop]               ,
                                       Y[StickTop]  + topDrawDel ,
                                       X[StickTop]               ,
                                       Y[StickTop]  - botDrawDel ,
                                       HWRMax( X[ixStrkMin] - LeftDrawDel , 0 ) ,
                                       Y[ixStrkMin] ,
                                       X[ixStrkMax] , Y[ixStrkMax],
                                      &xAnswer , &yAnswer ) ;

          if  ( fl_DrawCross == _TRUE )
              {
                pStick->ipoint0 = pStick->ipoint1 = (_SHORT)StickTop ;

                pStrk->ipoint0  = (_SHORT)iClosestToXY ( pStrk->ibeg  , pStrk->iend ,
                                                         X, Y, xAnswer, yAnswer   ) ;


                  if  ( (pStrk->ipoint0 + 1) <= pStrk->iend )
                      {
                         pStrk->ipoint1 = (_SHORT)(pStrk->ipoint0 + 1) ;
                      }
                  else
                      {
                        pStrk->ipoint1 = pStrk->ipoint0 ;
                      }
              }

        pCrossPoint->x = xAnswer ;
        pCrossPoint->y = yAnswer ;

    QUIT: return( fl_DrawCross ) ;
    }

 //------------------------------------------------------------------------

  _INT  ApprHorStroke( low_type _PTR pLowData )
    {
      p_SDS    pBegSDS     = pLowData->p_cSDS->pSDS +
                             pLowData->p_cSDS->iBegLock_SDS  ;
      p_SHORT  Y           = pLowData->y                     ;
      p_SHORT  X           = pLowData->x                     ;
       _INT    iToBeStroke = UNDEF  ;
       _INT    minLenth    = ( DEF_MINLENTH * HWGT01 / SHORT_BASE ) ;
       _BOOL   Second_OK   = _FALSE ;
       _BOOL   First_OK    = _FALSE ;
      p_SDS    pSDS , pNextSDS      ;
       _INT    il   ;

          if  ( pBegSDS->mark != BEG )
              {
                //iToBeStroke = UNDEF ;
                err_msg ( " ApprHorStroke : Wrong starting SDS ... " ) ;
                  goto  QUIT  ;
              }

        il = 1 ;
          while  (    BoxSmallOK( pBegSDS->ibeg, (pBegSDS + il)->iend, X, Y )
                   && ( pBegSDS + il )->mark != END )
                 {
                   il++ ;
                 }

        pSDS     = pBegSDS + il ;
        pNextSDS = pSDS + 1     ;

          if  (    ( pSDS->mark   !=  END )
                && ( pSDS->des.s   >  minLenth )
                && ( pSDS->des.cr  <  MAX_CR_HOR_ST_ARC_FIRST )
                && ( X[pSDS->ibeg] <  X[pSDS->iend] )
                && ( HWRAbs( pSDS->des.a  ) <  MAX_A_HORL_STICKS ) )
              {
                First_OK = _TRUE  ;
              }
          //else
          //    {
          //      First_OK = _FALSE ;
          //    }

          if  (    ( pSDS->mark        !=  END )
                && ( pNextSDS->mark    !=  END )
                && ( pNextSDS->des.s   >  minLenth )
                && ( pNextSDS->des.cr  <  MAX_CR_HOR_ST_ARC )
                && ( X[pNextSDS->ibeg] <  X[pNextSDS->iend] )
                && ( HWRAbs( pNextSDS->des.a  ) <  MAX_A_HORL_STICKS ) )
              {
                Second_OK = _TRUE  ;
              }
          //else
          //    {
          //      Second_OK = _FALSE ;
          //    }

          if  ( ( First_OK == _TRUE )  &&  ( Second_OK == _FALSE ) )
              {
                iToBeStroke = il ;
              }
          else  if  ( ( First_OK == _FALSE )  &&  ( Second_OK == _TRUE ) )
              {
                if  ( pNextSDS->xmax > pSDS->xmax  )
                    {
                      iToBeStroke = il + 1 ;
                    }
                else
                    {
                      iToBeStroke = UNDEF ;
                    }
              }
          else  if  ( ( First_OK == _TRUE )  &&  ( Second_OK == _TRUE ) )
              {
                if  (   ( pNextSDS->xmin <= (pSDS->xmin + EPS) )
                     && ( pNextSDS->xmax >  (pSDS->xmax + EPS) ) )
                    {
                      iToBeStroke = il + 1 ;
                    }
                else
                    {
                      iToBeStroke = il ;
                    }
              }
          else
              {
                iToBeStroke = UNDEF ;
              }

    QUIT:  return( iToBeStroke ) ;
    }

  #undef      MAX_A_HORL_STICKS
  #undef      MAX_CR_HOR_ST_ARC_FIRST
  #undef      MAX_CR_HOR_ST_ARC_SECOND
  #undef      MAX_CR_HOR_ST_ARC

 //------------------------------------------------------------------------

  _BOOL  Find_Cross( low_type _PTR   pLowData ,  _TRACE  pCrossPoint ,
                     p_POINTS_GROUP  pFirstGr , p_POINTS_GROUP  pSecondGr )
    {
     p_SHORT  X    = pLowData->x     ;
     p_SHORT  Y    = pLowData->y     ;
      _SHORT  iBeg , iEnd            ;
      _SHORT  jBeg , jEnd            ;
      _SHORT  xBeg , yBeg            ;
      _SHORT  xEnd , yEnd            ;
      _SHORT  xC   , yC              ;
      _SHORT  il   , jl              ;

      _BOOL   fl_FindCross = _FALSE  ;


        if  (     Close_To( pLowData , pFirstGr  , pSecondGr )
              &&  Close_To( pLowData , pSecondGr , pFirstGr  )  )
            {
              iBeg = pFirstGr->iBeg  ;
              iEnd = pFirstGr->iEnd  ;
              jBeg = pSecondGr->iBeg ;
              jEnd = pSecondGr->iEnd ;
            }
        else
            {
              goto   QUIT ;
            }


        for   ( il = iBeg ;  il < iEnd ;  il++ )
         {
           xBeg = X[il]  ;  xEnd = X[il+1] ;
           yBeg = Y[il]  ;  yEnd = Y[il+1] ;

             for  ( jl = jBeg ;  jl < jEnd ;  jl++ )
               {
                 if  ( FindCrossPoint( xBeg , yBeg , xEnd , yEnd ,
                                       X[jl], Y[jl], X[jl+1], Y[jl+1] ,
                                       &xC  , &yC ) == _TRUE  )
                     {
                       fl_FindCross    = _TRUE     ;

                       pFirstGr->iBeg  = il        ;
                       pFirstGr->iEnd  = il + 1    ;
                       pSecondGr->iBeg = jl        ;
                       pSecondGr->iEnd = jl + 1    ;

                       pCrossPoint->x  = xC ;
                       pCrossPoint->y  = yC ;

                         goto  QUIT ;
                     }
               }
         }

    QUIT: return( fl_FindCross ) ;
    }

 //------------------------------------------------------------------------

  _BOOL  Box_Cover( low_type _PTR   pLowData ,
                    p_POINTS_GROUP  pFirstGr , p_POINTS_GROUP  pSecondGr )
    {
     p_SHORT  X    = pLowData->x     ;
     p_SHORT  Y    = pLowData->y     ;
      _SHORT  iBeg = pFirstGr->iBeg  ;
      _SHORT  iEnd = pFirstGr->iEnd  ;
      _SHORT  jBeg = pSecondGr->iBeg ;
      _SHORT  jEnd = pSecondGr->iEnd ;

      _SHORT  yLow1  , yHigh1        ;
      _SHORT  yLow2  , yHigh2        ;
      _SHORT  xLeft1 , xRight1       ;
      _SHORT  xLeft2 , xRight2       ;

        yMinMax ( iBeg , iEnd ,  Y,    &yLow1  ,  &yHigh1  ) ;
        yMinMax ( jBeg , jEnd ,  Y,    &yLow2  ,  &yHigh2  ) ;
        xMinMax ( iBeg , iEnd ,  X, Y, &xLeft1 ,  &xRight1 ) ;
        xMinMax ( jBeg , jEnd ,  X, Y, &xLeft2 ,  &xRight2 ) ;

          if    (    ( xLeft1  <=  xLeft2  )
                 &&  ( xRight1 >=  xRight2 )
                 &&  ( yHigh1  >=  yHigh2  )
                 &&  ( yLow1   <=  yLow2   )  )
                     { return  _TRUE  ;    }
          else
                     { return  _FALSE ;    }
    }

 //------------------------------------------------------------------------

  _BOOL  Close_To( low_type _PTR   pLowData ,
                   p_POINTS_GROUP  pFirstGr , p_POINTS_GROUP  pSecondGr )
    {
     p_SHORT  X    = pLowData->x     ;
     p_SHORT  Y    = pLowData->y     ;
      _INT    iBeg = pFirstGr->iBeg  ;
      _INT    iEnd = pFirstGr->iEnd  ;
      _INT    jBeg = pSecondGr->iBeg ;
      _INT    jEnd = pSecondGr->iEnd ;

      _SHORT  yLow1  , yHigh1        ;
      _SHORT  yLow2  , yHigh2        ;
      _SHORT  xLeft1 , xRight1       ;
      _SHORT  xLeft2 , xRight2       ;

      _INT    iMid                   ;

      _BOOL   FirstPart , SecondPart ;
      _BOOL   fl_Close_To            ;

        yMinMax ( iBeg , iEnd ,  Y,    &yLow1  ,  &yHigh1  ) ;
        yMinMax ( jBeg , jEnd ,  Y,    &yLow2  ,  &yHigh2  ) ;
        xMinMax ( iBeg , iEnd ,  X, Y, &xLeft1 ,  &xRight1 ) ;
        xMinMax ( jBeg , jEnd ,  X, Y, &xLeft2 ,  &xRight2 ) ;

          if    (    ( xLeft1  >  xRight2 )
                 ||  ( xRight1 <  xLeft2  )
                 ||  ( yHigh1  <  yLow2   )
                 ||  ( yLow1   >  yHigh2  )  )
                     {
                       iBeg = iEnd  =  UNDEF ;
                       fl_Close_To  = _FALSE ;
                           goto QUIT ;
                     }
          else
                     {
                       fl_Close_To  = _TRUE  ;
                     }

        while   ( iEnd - iBeg > 2 )
          {
            iMid = ONE_HALF( iBeg + iEnd ) ;

            yMinMax ( iBeg , iMid ,  Y,    &yLow1  ,  &yHigh1  ) ;
            xMinMax ( iBeg , iMid ,  X, Y, &xLeft1 ,  &xRight1 ) ;

              if    (    ( xLeft1  >  xRight2 )
                     ||  ( xRight1 <  xLeft2  )
                     ||  ( yHigh1  <  yLow2   )
                     ||  ( yLow1   >  yHigh2  ) )
                         { FirstPart = _FALSE ; }
              else
                         { FirstPart = _TRUE  ; }

            yMinMax ( iMid , iEnd ,  Y,    &yLow1  ,  &yHigh1  ) ;
            xMinMax ( iMid , iEnd ,  X, Y, &xLeft1 ,  &xRight1 ) ;

              if    (    ( xLeft1  >  xRight2 )
                     ||  ( xRight1 <  xLeft2  )
                     ||  ( yHigh1  <  yLow2   )
                     ||  ( yLow1   >  yHigh2  ) )
                         { SecondPart = _FALSE ; }
              else
                         { SecondPart = _TRUE  ; }

              if    ( ( FirstPart == _TRUE )  &&  ( SecondPart == _TRUE ) )
                    {
                      break ;
                    }
              else  if  ( FirstPart == _TRUE )
                    {
                      iEnd = iMid ;
                    }
              else  if  ( SecondPart == _TRUE )
                    {
                      iBeg = iMid ;
                    }
              else
                    {
                      break ;
                    }
          }

    QUIT :

        pFirstGr->iBeg = (_SHORT)iBeg ;
        pFirstGr->iEnd = (_SHORT)iEnd ;

    return( fl_Close_To ) ;
    }

 //------------------------------------------------------------------------

  _BOOL  IsAnythingShift( low_type _PTR   pLowData    ,
                          p_POINTS_GROUP  pCheckngCut ,
                          p_POINTS_GROUP  pMaskingCut ,
                           _SHORT         SideFlag0   , _SHORT SideFlag1 )
    {
     p_SHORT  X    = pLowData->x ;
     p_SHORT  Y    = pLowData->y ;

      _SHORT  jBeg = pMaskingCut->iBeg ;
      _SHORT  jEnd = pMaskingCut->iEnd ;
      _SHORT  iBeg = pCheckngCut->iBeg ;
      _SHORT  iEnd = pCheckngCut->iEnd ;

      _SHORT  xLeft0 , xRight0 ;
      _SHORT  xLeft1 , xRight1 ;

        xMinMax ( iBeg , iEnd , X , Y , &xLeft0 ,  &xRight0 ) ;
        xMinMax ( jBeg , jEnd , X , Y , &xLeft1 ,  &xRight1 ) ;

          if  ( ( SideFlag0 == _LEFT ) && ( SideFlag1 == _LEFT ) )
              {
                if  ( xLeft0  >= xLeft1  )
                    { return _TRUE ;  }
                else
                    { return (_SHORT)_FALSE ; }
              }
          else  if  ( ( SideFlag0 == _RIGHT ) && ( SideFlag1 == _RIGHT ) )
              {
                if  ( xRight0 >= xRight1 )
                    { return _TRUE ;  }
                else
                    { return _FALSE ; }
              }
          else  if  ( ( SideFlag0 == _RIGHT ) && ( SideFlag1 == _LEFT ) )
              {
                if  ( xRight0 >= xLeft1 )
                    { return _TRUE ;  }
                else
                    { return _FALSE ; }
              }
          else  if  ( ( SideFlag0 == _LEFT ) && ( SideFlag1 == _RIGHT ) )
              {
                if  ( xLeft0 >= xRight1 )
                    { return _TRUE ;  }
                else
                    { return _FALSE ; }
              }
          else
              {
                err_msg ( " IsAnythingShift : Wrong side flag ... " ) ;
                  return _TRUE ;
              }
    }

 //-------------------------------------------------------------------------

  #define   MEAN_iP0_iBEG(pSpecl)    MEAN_OF( pSpecl->ibeg+1 , pSpecl->ipoint0 )
  #define   MEAN_iP0_iEND(pSpecl)    MEAN_OF( pSpecl->iend   , pSpecl->ipoint0 )


  _BOOL  VertStickBorders( low_type _PTR   pLowData , p_SPECL pV_TmpSpecl ,
                           p_POINTS_GROUP  pTmpStickBord )
    {
     p_SHORT  X = pLowData->x  ;
     p_SHORT  Y = pLowData->y  ;
     p_SPECL  pV_NextSpecl     ;
     p_SPECL  pTmpSpecl        ;
      _SHORT  Xd , Yd          ;
      _SDS    vSDS             ;

      _BOOL   flagVSB =_TRUE   ;

      pV_NextSpecl = pV_TmpSpecl + 1 ;


      if  ( pV_NextSpecl->mark != MINW  &&  pV_NextSpecl->mark != MAXW )
          {
            flagVSB = _FALSE   ;
              goto  QUIT       ;
          }

      if  ( Init_SDS_Element( &vSDS )  == _FALSE )
          {
            flagVSB = _FALSE ;
              goto  QUIT ;
          }

      vSDS.ibeg = pV_TmpSpecl->ipoint0  ;
      vSDS.iend = pV_NextSpecl->ipoint0 ;

      iMostFarDoubleSide ( X, Y, &vSDS, &Xd, &Yd, _TRUE ) ;

      if  (    ( HWRAbs(vSDS.des.a) > MIN_A_VERT_STICKS )
            && ( vSDS.des.cr        < ONE_THIRD( MAX_CR_VER_ST_ARC ) )
            && ( vSDS.des.s         > VERT_LENTH_LEVEL  )  )
          {
            pTmpStickBord->iBeg = pV_TmpSpecl->ipoint0  ;
            pTmpStickBord->iEnd = pV_NextSpecl->ipoint0 ;
            flagVSB = _TRUE ;
              goto  QUIT ;
          }

      if  ( pV_TmpSpecl->mark == MINW )
          {
            pTmpSpecl = pV_TmpSpecl->next ;

              while (   ( pTmpSpecl->mark != MINXY  )
                     && ( pTmpSpecl->mark != MAXYX  )
                     && ( pTmpSpecl != pV_NextSpecl ) )
                        { pTmpSpecl = pTmpSpecl->next ;  }

              if  (   ( pTmpSpecl->mark == MINXY || pTmpSpecl->mark == MAXYX )
                   && ( MEAN_iP0_iEND(pTmpSpecl) >= pV_TmpSpecl->iend ) )
                {
                  pTmpStickBord->iBeg = (_SHORT)MEAN_iP0_iEND(pTmpSpecl) ;
                }
              else
                {
                  pTmpStickBord->iBeg = pV_TmpSpecl->iend ;
                }

            pTmpSpecl = pV_NextSpecl->prev ;

              while (   ( pTmpSpecl->mark != MAXXY )
                     && ( pTmpSpecl->mark != MINYX )
                     && ( pTmpSpecl != pV_TmpSpecl ) )
                    {  pTmpSpecl = pTmpSpecl->prev ;  }

              if  (   ( pTmpSpecl->mark == MAXXY || pTmpSpecl->mark == MINYX )
                   && ( MEAN_iP0_iBEG(pTmpSpecl) <= pV_NextSpecl->ibeg ) )
                {
                  pTmpStickBord->iEnd = (_SHORT)MEAN_iP0_iBEG(pTmpSpecl) ;
                }
              else
                {
                  pTmpStickBord->iEnd = pV_NextSpecl->ibeg ;
                }
          }
      else  if  ( pV_TmpSpecl->mark == MAXW )
          {
            pTmpSpecl = pV_TmpSpecl->next ;

              while (   ( pTmpSpecl->mark != MAXXY  )
                     && ( pTmpSpecl->mark != MINYX  )
                     && ( pTmpSpecl != pV_NextSpecl ) )
                    {  pTmpSpecl = pTmpSpecl->next ;  }

              if  (   ( pTmpSpecl->mark == MAXXY || pTmpSpecl->mark == MINYX )
                   && ( MEAN_iP0_iEND(pTmpSpecl) >= pV_TmpSpecl->iend ) )
                {
                  pTmpStickBord->iBeg = (_SHORT)MEAN_iP0_iEND(pTmpSpecl) ;
                }
              else
                {
                  pTmpStickBord->iBeg = pV_TmpSpecl->iend ;
                }

            pTmpSpecl = pV_NextSpecl->prev ;

              while (   ( pTmpSpecl->mark != MINXY )
                     && ( pTmpSpecl->mark != MAXYX )
                     && ( pTmpSpecl != pV_TmpSpecl ) )
                    {  pTmpSpecl = pTmpSpecl->prev ;  }

              if  (   ( pTmpSpecl->mark == MINXY || pTmpSpecl->mark == MAXYX )
                   && ( MEAN_iP0_iBEG(pTmpSpecl) <= pV_NextSpecl->ibeg ) )
                {
                  pTmpStickBord->iEnd = (_SHORT)MEAN_iP0_iBEG(pTmpSpecl) ;
                }
              else
                {
                  pTmpStickBord->iEnd = pV_NextSpecl->ibeg ;
                }
          }
      else
          {
            flagVSB = _FALSE ;
              goto  QUIT     ;
          }

      if  ( pTmpStickBord->iBeg >= pTmpStickBord->iEnd )
          {
            flagVSB = _FALSE ;
              goto  QUIT     ;
          }

      if  ( flagVSB != _FALSE )
          {
            vSDS.ibeg = pTmpStickBord->iBeg ;
            vSDS.iend = pTmpStickBord->iEnd ;

            iMostFarDoubleSide ( X, Y, &vSDS, &Xd, &Yd, _TRUE ) ;

              if  (    ( HWRAbs(vSDS.des.a) > MIN_A_VERT_STICKS )
                    && ( vSDS.des.cr        < MAX_CR_VER_ST_ARC )
                    && ( vSDS.des.s         > VERT_LENTH_LEVEL  )  )
                  { flagVSB = _TRUE  ; }
              else
                  { flagVSB = _FALSE ; }
          }

    QUIT:
      return( flagVSB )  ;
    }

  #undef      MIN_A_VERT_STICKS
  #undef      MAX_CR_VER_ST_ARC
  #undef      VERT_LENTH_LEVEL

 /*------------------------------------------------------------------------*/

  _VOID  VertSticksSelector( low_type _PTR   pLowData )
    {
     p_POINTS_GROUP  pVS_Collector  = pLowData->pVS_Collector  ;
      //_SHORT         VertSticksNum  = pLowData->VertSticksNum  ;
     p_SPECL         pSpecl         = pLowData->specl          ;
      _SHORT         LenSpecl       = pLowData->len_specl      ;
     POINTS_GROUP    TmpVS_C   ;
     p_SPECL         pTmpSpecl ;
      _SHORT         il , jl   ;

  #if PG_DEBUG
     p_SHORT         X = pLowData->x ;
     p_SHORT         Y = pLowData->y ;
  #endif

          for  ( il = 2 , jl = 0 ; il < LenSpecl ; il++ )
            {
              pTmpSpecl = pSpecl + il ;

                if  ( pTmpSpecl->mark != MINW  &&  pTmpSpecl->mark != MAXW )
                    { continue  ; }
                else  if  ( jl < L_SPEC_SIZE )
                    {
                      if  ( VertStickBorders( pLowData ,
                                              pTmpSpecl, &TmpVS_C ) == _TRUE )
                          {
                            *( pVS_Collector + jl ) = TmpVS_C ;
                            jl++ ;
  #if PG_DEBUG
                              if  ( mpr == 1 )
                                  {
                                    draw_line( X[TmpVS_C.iBeg] , Y[TmpVS_C.iBeg] ,
                                               X[TmpVS_C.iEnd] , Y[TmpVS_C.iEnd] ,
                                               EGA_MAGENTA, SOLID_LINE, NORM_WIDTH ) ;

                                    draw_arc( EGA_MAGENTA , X , Y ,
                                              TmpVS_C.iBeg, TmpVS_C.iEnd ) ;
                                  }
  #endif
                          }
                    }
                else
                    {
                      err_msg ( " VS_Sel. : VS array is full, nowhere to write ... " ) ;
                        break ;
                    }
            }

       pLowData->VertSticksNum = jl ;

    return ;
    }

 /*------------------------------------------------------------------------*/

  _SHORT  SpcElemFirstOccArr( low_type _PTR   pLowData, p_INT  pModeWord ,
                              p_POINTS_GROUP  pTrajectoryCut ,  _UCHAR mark )
    {
     p_SPECL  pSpecl       = pLowData->specl      ;
      _SHORT  lenSpecl     = pLowData->len_specl  ;
      _SHORT  iBeg         = pTrajectoryCut->iBeg ;
      _SHORT  iEnd         = pTrajectoryCut->iEnd ;
      _SHORT  numFirstOcc  = UNDEF                ;

     p_SPECL  pTmpSpecl    ;
      _SHORT  il ;

          if   ( iBeg > iEnd )
               { goto   QUIT ; }


          for  ( il = 1 ;  il < lenSpecl ;  il++ )
            {
              pTmpSpecl = pSpecl + il ;

                if  ( (pTmpSpecl->ibeg <= 0) || (pTmpSpecl->iend <= 0) )
                    {
                      err_msg ( " SpElmFrOcc. : Wrong SPECL ... " ) ;
                        goto  QUIT ;
                    }

                if  (    ( pTmpSpecl->mark == mark )
                      && (    ( pTmpSpecl->ibeg <= iBeg )
                           && ( pTmpSpecl->iend >= iEnd ) ) )
                    {
                      numFirstOcc = il ;
                      *pModeWord  = *pModeWord | TOTALY_COVERED ;

                        if  (    ( pTmpSpecl->ipoint0 >= iBeg )
                              && ( pTmpSpecl->ipoint0 <= iEnd ) )
                                   *pModeWord = *pModeWord | IP0_INSIDE ;

                        goto  QUIT ;
                    }

                if  (    ( pTmpSpecl->mark == mark )
                      && (    (    ( pTmpSpecl->ibeg >= iBeg )
                                && ( pTmpSpecl->ibeg <= iEnd ) )
                          ||  (    ( pTmpSpecl->iend >= iBeg )
                                && ( pTmpSpecl->iend <= iEnd ) ) ) )
                    {
                      if  (    ( pTmpSpecl->ibeg >= iBeg )
                            && ( pTmpSpecl->iend <= iEnd ) )
                          {
                            numFirstOcc = il ;
                            *pModeWord  = *pModeWord | TOTALY_INSIDE ;
                              goto  QUIT ;
                          }

                      if  ( *pModeWord & ANY_OCCUARANCE )
                          {
                            if  ( pTmpSpecl->ibeg >= iBeg )
                                {
                                  numFirstOcc = il ;
                                  *pModeWord  = *pModeWord | BEG_INSIDE ;

                                    if  ( pTmpSpecl->ipoint0 <= iEnd )
                                          *pModeWord = *pModeWord | IP0_INSIDE ;

                                    goto  QUIT ;
                                }

                            if  ( pTmpSpecl->iend <= iEnd )
                                {
                                  numFirstOcc = il ;
                                  *pModeWord  = *pModeWord | END_INSIDE ;

                                    if  ( pTmpSpecl->ipoint0 >= iBeg )
                                          *pModeWord = *pModeWord | IP0_INSIDE ;

                                    goto  QUIT ;
                                }
                          }
                    }


                if  (    ( *pModeWord & END_RESTRICTION )
                      && ( pTmpSpecl->mark ==  END      )
                      && ( pTmpSpecl->ibeg >=  iBeg     )
                      && ( pTmpSpecl->iend <=  iEnd     ) )
                    {
                        goto  QUIT  ;
                    }
            }

    QUIT: return ( numFirstOcc ) ;
    }


 /*------------------------------------------------------------------------*/

  _BOOL   BoxSmallOK( _SHORT iBeg, _SHORT iEnd, p_SHORT xArr, p_SHORT yArr )
    {
      _RECT  TmpBox ;
      _SHORT  minLenth ;

         minLenth = (_SHORT)(DEF_MINLENTH * HWGT02 / SHORT_BASE) ;
         GetTraceBox ( xArr, yArr, iBeg, iEnd , &TmpBox ) ;

           if  ( ( ( TmpBox.right  - TmpBox.left ) < minLenth  ) &&
                 ( ( TmpBox.bottom - TmpBox.top  ) < minLenth  )    )
               return( _TRUE )   ;
           else
               return( _FALSE )  ;
    }

 /**************************************************************************/

  #undef       CRLIM11

  #undef       MINVERT
  #undef       MAXHOR
  #undef       RMINNEZ
  #undef       POINT_FILTR
  #undef       EXPAND_INV_ZONE
  #undef       LIM_FULL_LEN
  #undef       HWGT01
  #undef       HWGT02
  #undef       HWGT11
  #undef       HWGT12
  #undef       HWGT21
  #undef       HWGT22

  /**************  Bonuses and penaltys for curvity .  **********************/
 #define        BONMCR01       30
 #define        BONMCR02       40
 #define        BONMCR03       50
 #define        BONMCR04       80

 /************************* Inclination limits . ***************************/
 #define        PA11           10
 #define        PA12           20
 #define        PA13           40

 /****************  Bonuses and penaltys for lenth .  **********************/
 #define        BONML11        85
 #define        BONML12        95

 /**************  Bonuses and penaltys for curvity .  **********************/
 #define        BONMCR11       125
 #define        BONMCR12       115
 #define        BONMCR13       85

 #define        BONMCR21       120
 #define        BONMCR22       130

 #define        BONMCR31       130
 #define        BONMCR32       120
 #define        BONMCR33       110

 #define        BONMCR41       40
 #define        BONMCR42       45
 #define        BONMCR43       50
 #define        BONMCR44       80

 /*************************** Curvity limits . *****************************/
 #define        PCR11          5
 #define        PCR12          10
 #define        PCR13          15

 #define        PA21           84

 /**************  Bonuses and penaltys for inclination .  *****************/
 #define        BONA11         115
 #define        BONA12         110
 #define        BONA13         110

 /******************** Relativ lenth limits . *****************************/

 #define        PLG11          25
 #define        PLG12          35
 #define        PLG13          50
 #define        PLG14          60


 _BOOL  FieldSt( _SDS lock_sd[], _SHORT lowrelh, _SHORT uprelh, _SHORT imax,
                 _INT _PTR pmaxa ,
                 _INT _PTR pmaxcr ,  _INT _PTR pminlen  )
    {
     _BOOL   flfist   ;
     _INT    maxa , maxcr , minlenth     ;
     _INT    ta , tcr ;

       flfist = _TRUE ;
       ta = HWRAbs( lock_sd[imax].des.a );     tcr = lock_sd[imax].des.cr ;

         if   ( uprelh < lowrelh )
              {  err_msg( " FieldSt : Wrong heights ." ) ; }

       maxa     = maxA_H_end[uprelh][lowrelh]  ;
       maxcr    = maxCR_H_end[uprelh][lowrelh] ;
       minlenth = minL_H_end[uprelh][lowrelh]  ;

         if   ( maxcr < 0 )   goto  QUIT ;    /*  refuse for the hight  */


         if   ( ta < PA11 )
              {  minlenth = minlenth * BONML11  / SHORT_BASE ;
                 maxcr    = maxcr    * BONMCR11 / SHORT_BASE ;  }
         else   if   ( ta < PA12 )
              {  minlenth = minlenth * BONML12  / SHORT_BASE ;
                 maxcr    = maxcr    * BONMCR12 / SHORT_BASE ;  }
         else   if   ( ( ta > PA13 ) && ( uprelh  < _U2_  )
                                     && ( lowrelh <= _U1_ ) )
              {  maxcr = maxcr * BONMCR13 / SHORT_BASE ;  }

         if   ( ( uprelh > _U1_ ) && ( lowrelh > _U1_ ) )
            {
              if   ( tcr < PCR11 )
                {  maxa  = maxa  * BONA11 / SHORT_BASE   ;
                   maxcr = maxcr * BONMCR31 / SHORT_BASE ; }
              else   if  (tcr < PCR12)
                {  maxa  = maxa  * BONA12 / SHORT_BASE   ;
                   maxcr = maxcr * BONMCR32 / SHORT_BASE ; }
              else   if  (tcr < PCR13)
                {  maxa  = maxa  * BONA13 / SHORT_BASE   ;
                   maxcr = maxcr * BONMCR33 / SHORT_BASE ; }
            }

         if   ( lowrelh < _U1_ )
            {
              if   ( lock_sd[imax].des.lg  <  PLG11 )
                       {  maxcr = BONMCR41 * maxcr/SHORT_BASE ; }
              else   if   ( lock_sd[imax].des.lg  <  PLG12 )
                       {  maxcr = BONMCR42 * maxcr/SHORT_BASE ; }
              else   if   ( lock_sd[imax].des.lg  <  PLG13 )
                       {  maxcr = BONMCR43 * maxcr/SHORT_BASE ; }
              else   if   ( lock_sd[imax].des.lg  <  PLG14 )
                       {  maxcr = BONMCR44 * maxcr/SHORT_BASE ; }
              if   ( maxa >  PA21 )            { maxa = PA21 ;  }
            }
  QUIT:
       *pmaxa = maxa ;    *pmaxcr = maxcr ;    *pminlen = minlenth ;

     return( flfist ) ;
    }

 #undef         BONMCR01
 #undef         BONMCR02
 #undef         BONMCR03
 #undef         BONMCR04

 #undef         BONA11
 #undef         BONA12
 #undef         BONA13

 #undef         BONML11
 #undef         BONML12

 #undef         BONMCR11
 #undef         BONMCR12
 #undef         BONMCR13

 #undef         BONMCR21
 #undef         BONMCR22

 #undef         BONMCR31
 #undef         BONMCR32
 #undef         BONMCR33

 #undef         PA21

 #undef         BONMCR41
 #undef         BONMCR42
 #undef         BONMCR43
 #undef         BONMCR44

 #undef         BONA11
 #undef         BONA12
 #undef         BONA13

 #undef         PLG11
 #undef         PLG12
 #undef         PLG13
 #undef         PLG14


 /**************************************************************************/

 /********************** X-size maximum limits. ****************************/
#ifdef  FORMULA

 #define        PX11           80
 #define        PX12           70
 #define        PY11           90
 #define        PY12           85

#endif  /*FORMULA*/

 /******************** Relativ lenth limits . *****************************/
 #define        PLG11          90
 #define        PLG12          80
 #define        PLG13          70
 #define        PLG14          50

 /****************** Maximum inclination limits . *************************/
 #define        MAXA11         160
 #define        MAXA12         170
 #define        MAXA13         200
 #define        MAXA14         500

 /**************  Bonuses and penaltys for the Y-size .  *****************/
 #define        BONPY11         60
 #define        BONPY12         60
 #define        BONPY13         60
 #define        BONPY14         70

 /*********** Bonuses and penaltys for the generation order . ************/
 #define        BONOX11         120
 #define        BONOY11         125
 #define        BONOX12         110
 #define        BONOY12         115


 /*********** Bonuses and penaltys for DOTs in formulae . **************/
 #define        BONPX21         80
 #define        BONPY21         80

  _SHORT  Dot( p_LowData low_data , p_SPECL  p_tmpSpecl0 , _SDS  asds[] )
    {
      _SHORT  mark    ;         /* Probability of a point.   */
      _INT    dx , dy ;
      _INT    px , py ;
      _INT    imax    ;

      _INT    iBeg = p_tmpSpecl0->ibeg ;
      _INT    iEnd = p_tmpSpecl0->iend ;
      _SHORT  upH  = p_tmpSpecl0->code ;
      _SHORT  lowH = p_tmpSpecl0->attr ;


          if  ( iBeg == iEnd )
              { /*mark = (_SHORT)DOT ;*/   goto MARK ; }
          else
              { mark = (_SHORT)EMPTY ; }

        imax = asds[0].des.cr ;

          if  ( imax <  0 )   err_msg( " Wrong imax index ..." ) ;
          if  ( imax == 0 )   err_msg( " Null imax index ..."  ) ;

        dx=asds[0].xmax-asds[0].xmin ;     dy=asds[0].ymax-asds[0].ymin ;

#ifdef  FORMULA

        px = const1.eps_px  ;      py = const1.eps_py ;

          if  ( (lowH == _U4_) && (upH == _U4_) )
                           { px = PX11 ;    py = PY11 ;    goto NEXT0 ; }
          if  ( (lowH == _U3_) && (upH == _U4_) )
                           { px = PX12 ;    py = PY12 ;    goto NEXT0 ; }
        py = (py*2)/3;
#else
          px = maxX_H_end[upH][lowH] ;
          py = maxY_H_end[upH][lowH] ;
#endif  /*FORMULA*/

 /********  Bonuses and penaltys for the vertical inclination .  *********/

#ifdef  FORMULA
    NEXT0:
#endif  /*FORMULA*/

           if  ( iEnd == low_data->ii-2 )
             {
               if  ( upH <= _DM_ )
                 {
                  px = px * BONOX11 / SHORT_BASE ;
                  py = py * BONOY11 / SHORT_BASE ;
                 }
               else  if  ( upH <= _U1_ )
                 {
                  px = px * BONOX12 / SHORT_BASE ;
                  py = py * BONOY12 / SHORT_BASE ;
                 }
             }

           if  ( low_data->rc->rec_mode == RECM_FORMULA  )
               {
    /*P
                 if  ( lowH > _DM_ )
                     goto  QUIT ;

                 if  ( lowH == _DM_ )
                     {
                       py = py * BONPY21 / SHORT_BASE ;
                       px = px * BONPX21 / SHORT_BASE ;
                     }
    P*/
                 if  ( lowH >= _DM_ )
                     {
                       py = py * BONPY21 / SHORT_BASE ;
                       px = px * BONPX21 / SHORT_BASE ;
                     }
               }

           if  ( ( dy < py ) && ( dx < px ) )
             {
               if  ( iEnd < low_data->ii-2 )
                   {
                    if  ( ( upH <= _UM_ ) && ( ( asds[0].des.a == 1 ) ||
                          ( asds[imax].des.lg > PLG11 ) ) &&
                          ( HWRAbs(asds[imax].des.a ) > MAXA11 ) )
                        {
                         if  (dy >= (py*BONPY11 / SHORT_BASE))  goto   QUIT ;
                        }

                    if  ( ( upH <= _UM_ ) && ( ( asds[0].des.a == 1 ) ||
                          ( asds[imax].des.lg > PLG12 ) ) &&
                          ( HWRAbs(asds[imax].des.a ) > MAXA12 ) )
                        {
                         if  ( dy >= (py*BONPY12 / SHORT_BASE) )  goto   QUIT ;
                        }

                    if  ( ( upH <= _UM_ ) && ( ( asds[0].des.a == 1 ) ||
                          ( asds[imax].des.lg > PLG13 ) ) &&
                          ( HWRAbs(asds[imax].des.a ) > MAXA13 ) )
                        {
                         if  ( dy >= (py*BONPY13 / SHORT_BASE) )  goto   QUIT ;
                        }
                    if  ( ( upH <= _UM_ ) && ( ( asds[0].des.a == 1 ) ||
                          ( asds[imax].des.lg > PLG14 ) ) &&
                          ( HWRAbs(asds[imax].des.a ) > MAXA14 ) )
                        {
                         if  ( dy >= (py*BONPY14 / SHORT_BASE) )  goto   QUIT ;
                        }
                   }
    MARK:
               mark = p_tmpSpecl0->mark =(_SHORT)DOT ;
               p_tmpSpecl0->ipoint0 = p_tmpSpecl0->ipoint1 =
               (_SHORT)MEAN_OF( iBeg, iEnd ) ;
             }
    QUIT:
      return( mark ) ;
    }

#ifdef  FORMULA

 #undef        PX11
 #undef        PX12
 #undef        PY11
 #undef        PY12

#endif  /*FORMULA*/

 #undef        PLG11
 #undef        PLG12
 #undef        PLG13
 #undef        PLG14

 #undef        MAXA11
 #undef        MAXA12
 #undef        MAXA13
 #undef        MAXA14

 #undef        BONPY11
 #undef        BONPY12
 #undef        BONPY13
 #undef        BONPY14

 #undef        BONOX11
 #undef        BONOY11
 #undef        BONOX12
 #undef        BONOY12


 /**************************************************************************/

  _BOOL  RelHigh( p_SHORT y, _INT  iBeg, _INT iEnd, _INT height[],
                            p_SHORT  plowrelh, p_SHORT puprelh )
    {
      _BOOL    flagRH ;
      _INT     begin  ,  end  ;
      _SHORT   ymax   ,  ymin ;
      _INT     relh   ;

          if   ( iBeg <= iEnd )
               {
                 begin = iBeg ;
                 end   = iEnd ;
               }
          else
               {
                 begin = iEnd ;
                 end   = iBeg ;
               }

        flagRH = _TRUE ;     relh = UNDEF ;

        yMinMax( begin, end, y, &ymin, &ymax ) ;

          if   ( ymin < height[0] )
               {
                 err_msg( " RelHigh : Wrong upper height ." ) ;
                 flagRH = _FALSE    ;
                 ymin   = (_SHORT)height[0] ;     relh = _U4_ ;
               }
          else if ( ymin <= height[1] )   relh = _U4_ ;
          else if ( ymin <= height[2] )   relh = _U3_ ;
          else if ( ymin <= height[3] )   relh = _U2_ ;
          else if ( ymin <= height[4] )   relh = _U1_ ;
          else if ( ymin <= height[5] )   relh = _UM_ ;
          else if ( ymin <= height[6] )   relh = _DM_ ;
          else if ( ymin <= height[7] )   relh = _D1_ ;
          else if ( ymin <= height[8] )   relh = _D2_ ;
          else if ( ymin <= height[9] )   relh = _D3_ ;
          else if ( ymin <= height[10] )  relh = _D4_ ;
          else                            /* ymin > height[10] */
               {
                 err_msg( " RelHigh : Wrong lower height ." )  ;
                 flagRH = _FALSE     ;
                 ymin   = (_SHORT)height[10] ;    relh = _D4_ ;
               }

        *puprelh = (_SHORT)relh ;

          if   ( ymax < height[0] )
               {
                 err_msg( " RelHigh : Wrong upper height ." )  ;
                 flagRH = _FALSE    ;
                 ymax   = (_SHORT)height[0] ;     relh = _U4_ ;
               }
          else if ( ymax <= height[1] )   relh = _U4_ ;
          else if ( ymax <= height[2] )   relh = _U3_ ;
          else if ( ymax <= height[3] )   relh = _U2_ ;
          else if ( ymax <= height[4] )   relh = _U1_ ;
          else if ( ymax <= height[5] )   relh = _UM_ ;
          else if ( ymax <= height[6] )   relh = _DM_ ;
          else if ( ymax <= height[7] )   relh = _D1_ ;
          else if ( ymax <= height[8] )   relh = _D2_ ;
          else if ( ymax <= height[9] )   relh = _D3_ ;
          else if ( ymax <= height[10] )  relh = _D4_ ;

          else  /*ymax > height[10] */
               {
                 err_msg( " RelHigh : Wrong lower height ." )  ;
                 flagRH = _FALSE     ;
                 ymax   = (_SHORT)height[10] ;    relh = _D4_ ;
               }

        *plowrelh = (_SHORT)relh ;

     return(flagRH) ;
    }
 /**************************************************************************/

  _BOOL  BildHigh( _SHORT yminmin , _SHORT ymaxmax , p_INT height )
    {
      _BOOL    flagBH ;

        flagBH = _TRUE ;

          if    ( yminmin <= LIN_UP )      height[0] = yminmin   ;
          else                             height[0] = LIN_UP    ;

          if    ( ymaxmax >= LIN_DOWN )    height[10] = ymaxmax  ;
          else                             height[10] = LIN_DOWN ;

        height[1] = ( height[0] + STR_UP ) / 2       ;
        height[2] = (_SHORT)( 4L * (_LONG)STR_UP / 5L ) + height[0] / 5   ;
        height[3] = STR_UP ;
        height[4] = 3 * STR_UP / 4 + STR_DOWN / 4    ;
        height[5] = ( STR_UP + STR_DOWN ) / 2 ;
        height[6] = 3 * STR_DOWN / 4 + STR_UP / 4    ;
        height[7] = STR_DOWN ;
        height[8] = (_SHORT)( 4L * (_LONG)STR_DOWN / 5L ) + height[10] / 5 ;
        height[9] = ( height[10] + STR_DOWN ) / 2     ;

#if PG_DEBUG
          if  (mpr == 3)
            {
             draw_line( L_TOPX, height[0], R_BOTX, height[0],
                                USCOLOR , DOTTED_LINE , NORM_WIDTH ) ;
             draw_line( L_TOPX, height[1] , R_BOTX , height[1] ,
                                USCOLOR , DOTTED_LINE , NORM_WIDTH ) ;
             draw_line( L_TOPX, height[2] , R_BOTX, height[2] ,
                                USCOLOR , DOTTED_LINE , NORM_WIDTH ) ;
             draw_line( L_TOPX, height[3] , R_BOTX , height[3] ,
                                USCOLOR , DOTTED_LINE , NORM_WIDTH ) ;
             draw_line( L_TOPX, height[4] , R_BOTX , height[4] ,
                                USCOLOR , DOTTED_LINE , NORM_WIDTH ) ;
             draw_line( L_TOPX, height[5] , R_BOTX , height[5] ,
                                USCOLOR , DOTTED_LINE , NORM_WIDTH ) ;
             draw_line( L_TOPX, height[6] , R_BOTX, height[6] ,
                                USCOLOR , DOTTED_LINE , NORM_WIDTH ) ;
             draw_line( L_TOPX, height[7], R_BOTX, height[7],
                                USCOLOR , DOTTED_LINE , NORM_WIDTH ) ;
             draw_line( L_TOPX, height[8], R_BOTX, height[8],
                                USCOLOR , DOTTED_LINE , NORM_WIDTH ) ;
             draw_line( L_TOPX, height[9], R_BOTX, height[9],
                                USCOLOR , DOTTED_LINE , NORM_WIDTH ) ;
             draw_line( L_TOPX, height[10], R_BOTX, height[10],
                                USCOLOR , DOTTED_LINE , NORM_WIDTH ) ;
            }
#endif

     return(flagBH) ;
    }

 /**************************************************************************/

 /*  The function changes the STROKE or DOT trajectory to form */
 /* a straight line:        */


 #define  MIN_POINTS_TO_CHANGE  3

 _SHORT  FantomSt( _SHORT _PTR  p_ii  ,  _SHORT _PTR  x    , _SHORT _PTR y ,
                  p_BUF_DESCR   pbfx  ,  p_BUF_DESCR  pbfy ,
                   _SHORT       begin ,  _SHORT       end  , _UCHAR  mark  )
   {
     _INT    jup , jdown     ;
     _INT    start , stop    ;
     _INT    xright , xleft  ;
     _INT    jright , jleft  ;
     _INT    dx , dy         ;
     _INT    px , py         ;
     _SHORT  rx , ry         ;
     _INT    jl              ;
     _INT    ii              ;
     _INT    ds              ;
     _INT    npoints         ;
     _SHORT  flag_fst        ;
     _INT    horda, thorda   ;
     p_SHORT bfx = pbfx->ptr ;
     p_SHORT bfy = pbfy->ptr ;

        flag_fst = SUCCESS ;
        npoints = end - begin + 1 ;
          if  ( npoints < MIN_POINTS_TO_CHANGE )  goto  QUIT ;
        ii = *p_ii ;

        jleft  = ixMin ( begin , end , x , y ) ;
        xleft  = x[jleft]  ;
        jright = ixMax ( begin , end , x , y ) ;
        xright = x[jright] ;

          if   ( mark == STROKE )
            {
              if   ( xright != xleft )
                {
                  if   ( jright > jleft )  { start = jleft  ; stop = jright ; }
                  else                     { start = jright ; stop = jleft  ; }
                }
              else
                {
                  jup   = iYup_range   ( y, begin, end ) ;
                  jdown = iYdown_range ( y, begin, end ) ;

                    if   ( jup >= jdown )   { start = jdown ;  stop = jup   ; }
                    else                    { start = jup   ;  stop = jdown ; }
                }
            }
          else
            {
              xMinMax ( begin , end , x , y , &x[end]   , &x[begin] ) ;
              yMinMax ( begin , end , y ,     &y[begin] , &y[end]   ) ;
              start = begin   ;
              stop  = end     ;
            }

        HWRMemSet( (p_VOID)bfx , 0 , (sizeof(_SHORT))*pbfx->nSize ) ;
        HWRMemSet( (p_VOID)bfy , 0 , (sizeof(_SHORT))*pbfy->nSize ) ;

        DBG_CHK_err_msg( begin<0 || begin>pbfx->nSize || begin>pbfy->nSize
                        || pbfx->nSize!=pbfy->nSize,
                        "FantSt: BAD buf");

        HWRMemCpy( (p_VOID)bfx , (p_VOID)x , (sizeof(_SHORT))*(begin) ) ;
        HWRMemCpy( (p_VOID)bfy , (p_VOID)y , (sizeof(_SHORT))*(begin) ) ;

        jl = begin ;     bfx[begin] = x[start] ;    bfy[begin] = y[start] ;
        px = x[stop] ;   py = y[stop] ;

        dx = px - bfx[begin] ;    dy = py - bfy[begin] ;
        ds = HWRMathILSqrt( (_LONG)dx*dx + (_LONG)dy*dy  ) ;
        thorda = horda = ds / ( npoints - 1 ) ;
		if (ds == 0)
			ds = 1; // avoid div by 0

        rx = bfx[jl] ;          ry = bfy[jl] ;

          while ( jl < (end - 1) )
            {
             bfx[++jl] = (_SHORT)( rx + ( ( (_LONG)dx * thorda) /ds ) );
             bfy[jl]   = (_SHORT)( ry + ( ( (_LONG)dy * thorda) /ds ) );
              thorda  += horda ;
            }

              bfx[end] = (_SHORT)px ;     bfy[end] = (_SHORT)py ;

        HWRMemCpy( (p_VOID)(bfx+end+1) , (p_VOID)&x[end+1] , (sizeof(_SHORT))*(ii-end) ) ;
        HWRMemCpy( (p_VOID)(bfy+end+1) , (p_VOID)&y[end+1] , (sizeof(_SHORT))*(ii-end) ) ;
        HWRMemCpy( (p_VOID)x , (p_VOID)bfx , (sizeof(_SHORT))*(ii+1) ) ;
        HWRMemCpy( (p_VOID)y , (p_VOID)bfy , (sizeof(_SHORT))*(ii+1) ) ;

   QUIT:  return( flag_fst ) ;
   }

#undef  MIN_POINTS_TO_CHANGE



 /************************ Inclination limits . ****************************/

  _SHORT  StrLine(_SHORT _PTR x , _SHORT _PTR y , _SHORT begin , _SHORT end ,
                  _SHORT _PTR p_imax  , _SHORT _PTR p_dmax ,
                  _SHORT _PTR p_xdmax , _SHORT _PTR p_ydmax ,
                  _SHORT _PTR p_a  )
    {
      _LONG   la , lb  ;
      _LONG   lwr0     ;
      _SHORT  dmax     ;  /* max distance from the trajectory to chord. */
      _INT    imax     ;  /* index of the most distant point.          */
      _INT    dx , dy  ;
      _SHORT  xdmax , ydmax ;

#if defined(STRIGHT_DEB) && PG_DEBUG
      _SHORT  xb , yb ;
      _SHORT  xe , ye ;
#endif

            /*  Begin searching the point most far from the chord */
            /* between ends of the _SDS cuts:                     */


       dx = x[begin] - x[end] ;         dy = y[begin] - y[end] ;

             /*  Find coeff of chord (la): */

       if    ( dx==0  &&  dy==0 )
         {
           la = -ALEF ;    dmax = UNDEF ;   imax = end ;
           xdmax = x[end] ;    ydmax = y[end] ;
         }
       else
         {
           imax = iMostFarFromChord (x,y,begin,end);
             if    ( dx != 0 )    la = ( LONG_BASE * dy ) / dx ;

             if    ( ( dx == 0 ) || ( HWRLAbs(la) > MAX_NO_VERT ) )
               { /*vert*/
                _SHORT  xMid = MEAN_OF(x[begin], x[end]) ;
                  dmax = (_SHORT)HWRAbs(xMid - x[imax]);
                  la = ALEF ;
                  xdmax = xMid ;     ydmax = y[imax] ;
               }
             else  if   ( HWRLAbs(la) < (_LONG)MIN_NO_HOR )
                     {  /*horiz*/
                      _SHORT  yMid = MEAN_OF(y[begin], y[end]) ;
                              dmax = (_SHORT)HWRAbs(yMid - y[imax]);
                              la = 0 ;
                              xdmax = x[imax] ;     ydmax = yMid ;
                     }
                   else
                     {
                      _LONG  ldx, ldy;
                       lb = ((_LONG)y[begin]-YST) - la*x[begin]/LONG_BASE ;
                       lwr0 = la*la/LONG_BASE + LONG_BASE ;
                       ldy = ( LONG_BASE * ( la*(_LONG)x[imax] / LONG_BASE
                             - ( (_LONG)y[imax]-YST)+lb ) ) / lwr0 ;
                       ldx = la * ( ((_LONG)y[imax]-YST)
                                - la*(_LONG)x[imax]/LONG_BASE - lb ) / lwr0 ;
                       dmax = (_SHORT)HWRMathILSqrt( ldx*ldx + ldy*ldy );
                       xdmax = (_SHORT)( ( la*((_LONG)y[imax]-YST) +
                              LONG_BASE * (_LONG)x[imax] - la*lb ) / lwr0 ) ;
                       ydmax = (_SHORT)( la*xdmax/LONG_BASE + lb + YST ) ;
                     }
         }

        *p_imax = (_SHORT)imax ;
        *p_dmax = dmax ;
		*p_a = (_SHORT)la ;
        *p_xdmax = xdmax ;
		*p_ydmax = ydmax ;

#if defined(STRIGHT_DEB) && PG_DEBUG
          if  (mpr == 3)
            {
             xb = x[imax] ;     yb = y[imax] ;
             xe = xdmax ;       ye = ydmax ;
             draw_line( xb, yb, xe, ye, COLORC, SOLID_LINE, NORM_WIDTH ) ;

             xb = x[begin] ;     yb = y[begin] ;
             xe = x[end] ;       ye = y[end] ;
             draw_line( xb, yb, xe, ye, COLORC, SOLID_LINE, NORM_WIDTH ) ;

             xe = xdmax ;     ye = ydmax ;
             draw_line( xb, yb, xe, ye, COLORC, SOLID_LINE, NORM_WIDTH ) ;

             xb = x[end] ;    yb = y[end] ;
             draw_line( xb, yb, xe, ye, COLORC, SOLID_LINE, NORM_WIDTH ) ;
            }
#endif

     return  SUCCESS;
    }

 /**************************************************************************/

 _SHORT  HordIncl( p_SHORT xArray, p_SHORT yArray,_SHORT ibeg,_SHORT iend )
  {
    _INT    dxBE ;
    _INT    dyBE ;
    _SHORT  incl ;

      dxBE = xArray[ibeg] - xArray[iend] ;
      dyBE = yArray[ibeg] - yArray[iend] ;

        if  ( dxBE != 0 )
            incl = (_SHORT)( ( LONG_BASE * dyBE ) / (_LONG)dxBE ) ;

        if  ( ( dxBE == 0 ) || ( HWRAbs(incl) > MAX_NO_VERT ) )
            { /*vert*/  incl = ALEF ;  }

        else  if   ( HWRAbs(incl) < MIN_NO_HOR )
            { /*horiz*/ incl = 0 ;     }

  /* QUIT: */
    return ( incl ) ;

  }

 /**************************************************************************/

  #define    D_LEFT       0
  #define    D_RIGHT      1


 _SHORT  iMostFarDoubleSide  ( p_SHORT pX,  p_SHORT pY,  p_SDS pSDS,
                               p_SHORT pxd, p_SHORT pyd, _BOOL bCalc )
  {
   _INT    iBeg = pSDS->ibeg    ;
   _INT    iEnd = pSDS->iend    ;
   _SHORT  xEnd = pX[iEnd]      ;
   _SHORT  yEnd = pY[iEnd]      ;
   _SHORT  xBeg = pX[iBeg]      ;
   _SHORT  yBeg = pY[iBeg]      ;
   _INT    iMostFarR, iMostFarL ;
   _INT    dxRL , dyRL  ;
   _SHORT  xdR  , ydR   ;
   _SHORT  xdL  , ydL   ;
   _INT    derSign      ;
   _SHORT  ds0          ;
   _INT    i            ;
   _LONG   ldConst , dL ;
   _INT    ldMostFarR, ldMostFarL, ldCur ;
   _LONG   tmpCr  ;
   _LONG   sprod  ;

  #if defined(STRIGHT_DEB) && PG_DEBUG
   _SHORT  xd, yd ;
  #endif

      DBG_CHK_err_msg( pY[iBeg]==BREAK  ||  pY[iEnd]==BREAK,
                       "iMostFar: BAD left or right" ) ;

      /*                                                  */
      /*                      O <-iEnd                    */
      /*                     . O                          */
      /*                    .   O                         */
      /*                   .    O                         */
      /*                  .    O                          */
      /*                 .     O                          */
      /*                       0                          */
      /*               .    .. O                          */
      /*          OOO .       .O                          */
      /*         O   O   O    OO <-iMostFar               */
      /*        O   . OOO O  O                            */
      /*        O  .       OO                             */
      /*       O  .                                       */
      /*       O .                                        */
      /*        O <-iBeg                                  */
      /*                                                  */
      /*   <Distance> ~ <dY> = y - yStraight(x) =         */
      /*                                                  */
      /*                                      x-xBeg      */
      /*     = y - yBeg - (yEnd-yBeg) * ------------      */
      /*                                    xEnd-xBeg     */
      /*                                                  */
      /*     ~ y*(xR-xL) - x*(yR-yL) +                    */
      /*        + xL*(yR-yL) - yL*(xR-xL)                 */
      /*                                                  */
      /*    And no problems with zero divide!             */
      /*                                                  */

      derSign = UNDEF ;
      dxRL = xEnd - xBeg ;       dyRL = yEnd - yBeg ;

       if    ( dxRL == 0  &&  dyRL == 0 )
         {
           pSDS->des.a = UNDEF     ;
           pSDS->des.s = 0         ;
           pSDS->des.imax  = (_SHORT)iBeg  ;
           pSDS->des.d     = UNDEF ;
           pSDS->des.cr    = UNDEF ;
           pSDS->des.dL    = 0     ;
           pSDS->des.iLmax = (_SHORT)iBeg  ;
           pSDS->des.dR    = 0     ;
           pSDS->des.iRmax = (_SHORT)iBeg  ;
           *pxd = 0 ;
           *pyd = 0 ;
             goto QUIT ;
         }
       else
         {
           yMinMax( iBeg,iEnd, pY, &(pSDS->ymin) , &(pSDS->ymax) ) ;
           xMinMax( iBeg,iEnd, pX,pY, &(pSDS->xmin), &(pSDS->xmax) ) ;

           if  ( dxRL != 0 )
               pSDS->des.a = (_SHORT)( ( LONG_BASE * dyRL ) / (_LONG)dxRL ) ;

           if  ( ( dxRL == 0 ) || ( HWRAbs(pSDS->des.a) > MAX_NO_VERT ) )
                { pSDS->des.a = ALEF ;  }                      /* vert  */

           else  if   ( HWRAbs(pSDS->des.a) < MIN_NO_HOR )
                { pSDS->des.a = 0 ;     }                      /* horiz */
         }


      ldConst = (_LONG)xBeg * dyRL - (_LONG)yBeg * dxRL ;

        for  ( i = iBeg + 1    , iMostFarR  = iMostFarL  = iBeg ,
               ldMostFarL = ldMostFarR = 0L   ;
               i <= iEnd  ;
               i++ )
          {

             if  ( pY[i] == BREAK )
                 continue ;

           ldCur = (_LONG)pY[i]*dxRL - (_LONG)pX[i]*dyRL + ldConst ;

             if  ( dyRL != 0 )
                 {
                  if ( ldCur < 0L )
                       derSign = D_LEFT   ;
                  else
                       derSign = D_RIGHT  ;
                 }
             else
                 {
                  if   ( yEnd > pY[i]  )
                         derSign = D_LEFT  ;
                  else
                         derSign = D_RIGHT ;
                 }

             if  ( derSign == D_RIGHT )
                 {
                   if  ( ldCur > ldMostFarR )
                       { ldMostFarR = ldCur ;    iMostFarR = i ; }
                 }
             else
                 {
                   if  ( ldCur < ldMostFarL )
                       { ldMostFarL = ldCur ;    iMostFarL = i ; }
                 }

          }

  /*
  #if defined(STRIGHT_DEB) && PG_DEBUG
             if  ( mpr == 3 )
               {
                 draw_line( pX[iMostFarL]-7, pY[iMostFarL],
                            pX[iMostFarL]+7, pY[iMostFarL],
                            EGA_LIGHTBLUE, SOLID_LINE, 3 );
                 draw_line( pX[iMostFarL], pY[iMostFarL]-7,
                            pX[iMostFarL], pY[iMostFarL]+7,
                            EGA_LIGHTBLUE, SOLID_LINE, 3 );
                 draw_line( pX[iMostFarR]-7, pY[iMostFarR],
                            pX[iMostFarR]+7, pY[iMostFarR],
                            EGA_LIGHTBLUE, SOLID_LINE, 3 );
                 draw_line( pX[iMostFarR], pY[iMostFarR]-7,
                            pX[iMostFarR], pY[iMostFarR]+7,
                            EGA_LIGHTBLUE, SOLID_LINE, 3 );
               }
  #endif
  */
        pSDS->des.dL = (_SHORT)HWRMathILSqrt( QDistFromChord( xBeg, yBeg, xEnd, yEnd,
                                      pX[iMostFarL],pY[iMostFarL] ) );
        pSDS->des.iLmax = (_SHORT)iMostFarL ;
        pSDS->des.dR = (_SHORT)HWRMathILSqrt( QDistFromChord( xBeg, yBeg, xEnd, yEnd,
                                     pX[iMostFarR],pY[iMostFarR] ) );
        pSDS->des.iRmax = (_SHORT)iMostFarR ;
        pSDS->des.s = ds0 = (_SHORT)HWRMathILSqrt( DistanceSquare( iBeg  ,iEnd   ,
                                                           pX,pY ) );

		if (ds0 == 0)
		{
			pSDS->des.s = ds0 = 1; // AVP -- avoid Div 0
		}

		sprod = (_LONG)dxRL * ( pX[iMostFarR] - xBeg ) +
                (_LONG)dyRL * ( pY[iMostFarR] - yBeg )    ;


        xdR   = xBeg + (_SHORT)( (dxRL * sprod) / ds0 / ds0 ) ;
        ydR   = yBeg + (_SHORT)( (dyRL * sprod) / ds0 / ds0 ) ;


        sprod = (_LONG)dxRL * ( pX[iMostFarL] - xBeg ) +
                (_LONG)dyRL * ( pY[iMostFarL] - yBeg )    ;


        xdL   = xBeg + (_SHORT)( (dxRL * sprod) / ds0 / ds0 ) ;
        ydL   = yBeg + (_SHORT)( (dyRL * sprod) / ds0 / ds0 ) ;

        if  ( pSDS->des.dR >= pSDS->des.dL )
          {
            pSDS->des.imax = pSDS->des.iRmax ;
            pSDS->des.d    = pSDS->des.dR    ;
            tmpCr = ( (_LONG)pSDS->des.dR * LONG_BASE / pSDS->des.s ) ;
            pSDS->des.cr = (_SHORT) tmpCr;  //9-7-94-ecc: assign separately, cast, to avoid warning.

              if    ( tmpCr >= (_LONG)ALEF )
                      pSDS->des.cr = ALEF  ;
              else
                      pSDS->des.cr = (_SHORT)tmpCr ;

            *pxd = xdR ;
            *pyd = ydR ;
          }
        else
          {
            pSDS->des.imax = pSDS->des.iLmax ;
            pSDS->des.d    = pSDS->des.dL    ;
            tmpCr = ( (_LONG)pSDS->des.dL * LONG_BASE / pSDS->des.s ) ;

              if    ( tmpCr >= (_LONG)ALEF )
                      pSDS->des.cr = ALEF ;
              else
                      pSDS->des.cr = (_SHORT)tmpCr ;

            *pxd = xdL ;
            *pyd = ydL ;
          }

//if 0 /* it was for links, now unusable */
          if  (    ( pSDS->des.dR != 0  )
                && ( pSDS->des.dL != 0  )
                && ( HordIntersectDetect( pSDS, pX, pY ) == _TRUE ) )
              {
                pSDS->mark = SDS_INTERSECTED ;
              }
          else
              {
                pSDS->mark = SDS_ISOLATE     ;
              }
//#endif /* if 0 */
          /* for links it's unnecessary to calculate all this things */
          if(bCalc)
           {
             for  ( i = iBeg , dL = 0L  ;  i < iEnd  ;  i++ )
                  {
                    dL += (_LONG) HWRMathILSqrt(
                                  DistanceSquare( i, i+1, pX, pY ) ) ;
                  }

           pSDS->des.l = dL ;


             if   ( pSDS->des.s != 0 )
                  {
                    pSDS->des.ld = (_SHORT)( LONG_BASE * dL / pSDS->des.s ) ;
                  }
             else
                  { pSDS->des.ld = ALEF ; }
           }

#if defined(STRIGHT_DEB) && PG_DEBUG
          if  (mpr == 3)
            {
             _SHORT  ds0 = pSDS->des.s ;
             _SHORT  xb, yb ;
             _SHORT  xe, ye ;

               sprod = (_LONG)dxRL * ( pX[iMostFarL] - xBeg ) +
                       (_LONG)dyRL * ( pY[iMostFarL] - yBeg ) ;

               xb = pX[iMostFarL] ;     yb = pY[iMostFarL]  ;
               xd = xe = xBeg + (_SHORT)( (dxRL * sprod) / ds0 / ds0 ) ;
               yd = ye = yBeg + (_SHORT)( (dyRL * sprod) / ds0 / ds0 ) ;
               draw_line( xb, yb, xe, ye, COLORC, SOLID_LINE, NORM_WIDTH ) ;

               xb = xBeg  ;       yb = yBeg ;
               xe = xEnd  ;       ye = yEnd ;
               draw_line( xb, yb, xe, ye, COLORC, SOLID_LINE, NORM_WIDTH ) ;

               xe = xd    ;       ye = yd   ;
               draw_line( xb, yb, xe, ye, COLORC, SOLID_LINE, NORM_WIDTH ) ;

               xb = xEnd  ;       yb = yEnd ;
               draw_line( xb, yb, xe, ye, COLORC, SOLID_LINE, NORM_WIDTH ) ;

               xb = pX[iMostFarR] ;     yb = pY[iMostFarR] ;

               sprod = (_LONG)dxRL * ( pX[iMostFarR] - xBeg ) +
                       (_LONG)dyRL * ( pY[iMostFarR] - yBeg ) ;
               xd = xe = xBeg + (_SHORT)( (dxRL * sprod) / ds0 / ds0 ) ;
               yd = ye = yBeg + (_SHORT)( (dyRL * sprod) / ds0 / ds0 ) ;
               draw_line( xb, yb, xe, ye, COLORC, SOLID_LINE, NORM_WIDTH ) ;

               xb = xBeg  ;       yb = yBeg  ;
               xe = xd    ;       ye = yd    ;
               draw_line( xb, yb, xe, ye, COLORC, SOLID_LINE, NORM_WIDTH ) ;

               xb = xEnd  ;       yb = yEnd  ;
               draw_line( xb, yb, xe, ye, COLORC, SOLID_LINE, NORM_WIDTH ) ;
            }
#endif
  QUIT:
    return  SUCCESS ;

  } /* iMostFarDoubleSide */
 #undef      MAX_NO_VERT
 #undef      MIN_NO_HOR

 /*------------------------------------------------------------------------*/


  _BOOL  HordIntersectDetect( p_SDS  pSDS , p_SHORT  x , p_SHORT y )
    {
      _INT     iBeg = pSDS->ibeg   ;
      _INT     iEnd = pSDS->iend   ;
      _SHORT   xBeg = x[iBeg]      ;
      _SHORT   yBeg = y[iBeg]      ;
      _SHORT   xEnd = x[iEnd]      ;
      _SHORT   yEnd = y[iEnd]      ;
      _INT     il ;

      _BOOL    DetectFlag = _FALSE ;


        for  ( il = iBeg+2 ;  il < iEnd-2 ;  il++ )
          {
               if  ( is_cross( xBeg  , yBeg  , xEnd    , yEnd    ,
                                     x[il] , y[il] , x[il+1] , y[il+1] )   )
                   {
                     DetectFlag = _TRUE ;
                       break  ;
                   }
          }

    return( DetectFlag ) ;
    }


 /*------------------------------------------------------------------------*/

  #define    JEND                      2         /*Number of viewing points*/
  #define    TH_COS1                   16        /* Close and open cos     */
  #define    TH_COS2                   20        /*               limits . */

  _BOOL  RareAngle( low_type _PTR  pLowData ,  SPECL _PTR  pcSpecl ,
                    SPECL    _PTR  pSpecl   , _SHORT _PTR  pLspecl )
    {
      _SHORT _PTR  x   = pLowData->x   ;
      _SHORT _PTR  y   = pLowData->y   ;
      _INT         beg = pcSpecl->ibeg ;
      _INT         end = pcSpecl->iend ;
      _BOOL        flag_rang           ;
      _SHORT       fl_open             ;
      _INT         i , k, l            ;
      _INT         jbeg , jend         ;
      _INT         ibeg , iend         ;
      _INT         xi   , yi           ;
      _INT         cos  , th_cos       ;
      _INT         dxr  , dyr          ;
      _INT         dxl  , dyl          ;
      _LONG        s1, s2, scos        ;
       SPECL       tmpSpecl            ;

        flag_rang = _TRUE ;      fl_open = ACLOSE ;

          if   ( beg == end )   goto  QUIT ;
                 th_cos = TH_COS1  ;

          for  ( i = beg+1 ;  i <= end-1 ;  i++ )
            {
                if   ( (jbeg = i-JEND) < beg )
                        jbeg = beg ;

                if   ( (jend = i+JEND) > end )
                        jend = end ;

              k=l = i ;    xi = x[i] ;     yi = y[i] ;
                do
                   {
                      if   (k > jbeg)   k-- ;
                      if   (l < jend)   l++ ;

                    dxl = xi - x[k] ;      dyl = yi - y[k] ;
                    dxr = xi - x[l] ;      dyr = yi - y[l] ;

                      if  (   ( (dxl == 0) && (dyl == 0) )
                           || ( (dxr == 0) && (dyr == 0) )  )
                        {  cos = SHORT_BASE ; }
                      else
                        {
                         scos = (_LONG)dxl * dxr + (_LONG)dyl * dyr ;
                           if  (  scos >= 0L )  { cos = TH_COS1 - 1 ; }
                           else
                             {
                               s1 = (_LONG)dxl * dxl + (_LONG)dyl * dyl ;
                               s2 = (_LONG)dxr * dxr + (_LONG)dyr * dyr ;

                               if   ( s1 < s2 ) { _LONG scratch = s1; s1 = s2; s2 = scratch; }
                               cos = (_SHORT)( LONG_BASE * scos / s2 *
                                                         scos / s1   ) ;
                                 /* mbo 4-18-98
                                 if   ( s1 >= s2 )
                                    cos = (_SHORT)( LONG_BASE * scos / s2 *
                                                         scos / s1   ) ;
                                 else
                                    cos = (_SHORT)( LONG_BASE * scos / s1 *
                                                         scos / s2   ) ;
                                 */
                             }
                        }

                      if   ( cos < th_cos )
                           {
                             iend = i ;
                               if   ( fl_open == ACLOSE )
                                    {
                                      fl_open = AOPEN ;    ibeg = i ;
                                      th_cos = TH_COS2 ;
                                    }
                           }
                   }
                while  ( (k > jbeg) || (l < jend) ) ;

                if    (  (fl_open == AOPEN)  &&  (iend != i)  )
                      {
                          if  ( *pLspecl < ( L_SPEC_SIZE - 3 ) )
                            {
                              tmpSpecl.mark    = ANGLE                  ;
                              tmpSpecl.code    = 0                      ;
                              tmpSpecl.attr    = 0                      ;
                              tmpSpecl.other   = 0                      ;
                              tmpSpecl.ibeg    = (_SHORT)ibeg           ;
                              tmpSpecl.iend    = (_SHORT)iend           ;
                              tmpSpecl.ipoint0 =
                                       (_SHORT)MEAN_OF( ibeg , iend )   ;
                              tmpSpecl.ipoint1 = UNDEF                  ;

                                 if  ( NoteSpecl( pLowData , &tmpSpecl  ,
                                                  ( SPECL _PTR ) pSpecl ,
                                                  pLspecl  , L_SPEC_SIZE  )
                                                             == _FALSE  )
                                   { flag_rang = UNSUCCESS ;   goto  QUIT ; }
                            }
                          else
                            {
                             err_msg(" RareAngle: Local SPECL is full ! ");
                             flag_rang = _FALSE ;     goto  QUIT ;
                            }
                        fl_open = ACLOSE ;       th_cos = TH_COS1 ;
                      }
            }

                if    ( fl_open == AOPEN )
                      {
                        tmpSpecl.mark    = ANGLE                  ;
                        tmpSpecl.code    = 0                      ;
                        tmpSpecl.attr    = 0                      ;
                        tmpSpecl.other   = 0                      ;
                        tmpSpecl.ibeg    = (_SHORT)ibeg           ;
                        tmpSpecl.iend    = (_SHORT)iend           ;
                        tmpSpecl.ipoint0 =
                                 (_SHORT)MEAN_OF( ibeg , iend )   ;
                        tmpSpecl.ipoint1 = UNDEF                  ;

                           if  ( NoteSpecl( pLowData , &tmpSpecl  ,
                                            ( SPECL _PTR ) pSpecl ,
                                            pLspecl  , L_SPEC_SIZE  )
                                                       == _FALSE  )
                                   { flag_rang = UNSUCCESS ;   goto  QUIT ; }
                        fl_open = ACLOSE ;
                      }

    QUIT:  return(flag_rang) ;
    }

 #undef      JEND
 #undef      TH_COS1
 #undef      TH_COS2


 /**************************************************************************/

  _VOID InitSDS( _SDS asds[] , _SHORT _PTR plsds , _SHORT n )
     {
        HWRMemSet( (p_VOID)asds , 0 , n * sizeof( _SDS ) ) ;
        *plsds = 0 ;
      return ;
     }

 /**************************************************************************/

  _VOID InitElementSDS( p_SDS pSDS )
     {
        HWRMemSet( (p_VOID)pSDS , 0 , sizeof( _SDS ) ) ;
      return ;
     }

 /**************************************************************************/

_SHORT  OperateSpeclArray( low_type _PTR  pLowData )
    {
     p_SPECL  pSpecl   = pLowData->specl     ;
      _INT    lenSpecl = pLowData->len_specl ;
     p_SPECL  pTmp     ;
      _INT    il       ;

          for  ( il = 1 , pTmp = pSpecl + 1  ;  il < lenSpecl  ; )
           {
              if  (  ( pTmp->mark       == BEG )  &&
                     ( (pTmp + 1)->mark == END )      )
                     {
                       HWRMemCpy( (p_VOID)pTmp  , (p_VOID)(pTmp+2) ,
                                  sizeof(SPECL) * ( lenSpecl-il-2 )    ) ;
                       lenSpecl -= 2 ;
                     }
              else
                    {
                      il++ ;
                      pTmp = pSpecl + il ;
                    }
           }

          if   ( pLowData->len_specl > lenSpecl )
               {
                // err_msg(" OperateArray : Empty specl group(s) corrected ." ) ;
                 pLowData->len_specl      = (_SHORT)lenSpecl   ;
                 pLowData->LastSpeclIndex = (_SHORT)(lenSpecl-1) ;

                 pSpecl->next = pSpecl + 1 ;
                    for  ( il = 1 ;  il < lenSpecl ;  il++ )
                      {
                        pTmp       = pSpecl + il ;
                        pTmp->prev = pTmp - 1    ;
                        pTmp->next = pTmp + 1    ;
                      }
                 pTmp->next   = _NULL ;
               }

      return  SUCCESS ;
}


 /**************************************************************************/


_SHORT  Surgeon( low_type _PTR  pLowData )
{
	_SHORT   mark     =	0;
	_INT     il       ;
	_INT     numSpc   ;
	p_SPECL  pSpecl   = pLowData->specl     ;
	_INT     lenSpecl = pLowData->len_specl ;
	p_SHORT  absnum   = pLowData->pAbsnum   ;
	_INT     lenabs   = pLowData->lenabs    ;
	p_SPECL  pTmp     ;

	ASSERT (0 <= lenSpecl);

	if (lenSpecl < 0)
	{
		return  SUCCESS;
	}
	
	for (il = 0 ;  il <= lenSpecl ; il++)
	{
		mark = ((p_SPECL)(pSpecl+il))->mark ;
		if ((mark == STROKE) || (mark == DOT))
		{
			numSpc = il - 1;
			break;
		}
		else
		{
			numSpc = il;
			
			if (mark == SHELF)
				break;
		}
	}

	if ((mark == EMPTY) || (numSpc == lenSpecl))
	{
		InitSpecl(pLowData, SPECVAL);
	}
	else
	{
		HWRMemCpy((pSpecl + 1), (pSpecl + numSpc), (lenSpecl - numSpc) * sizeof(SPECL));
		pLowData->len_specl = lenSpecl - numSpc + 1;
		pLowData->LastSpeclIndex = pLowData->len_specl - 1;
		
		lenabs = 0;
		
		for (il = 0; il < pLowData->len_specl; il++)
		{
			pTmp       = pSpecl+il  ;
			mark       = pTmp->mark ;
			pTmp->prev = pTmp-1     ;
			pTmp->next = pTmp+1     ;
			if ((mark == SHELF) || (mark == DOT) || (mark == STROKE))
			{
				absnum[lenabs] = (_SHORT)il;
				lenabs++;
			}
		}
		pSpecl->prev = _NULL;
		
		InitSpeclElement((SPECL _PTR)pSpecl+pLowData->len_specl);
		(pSpecl+pLowData->len_specl-1)->next = _NULL;
		pLowData->lenabs = (_SHORT)lenabs;
	}
	
	/*  QUIT: */
	return  SUCCESS ;
}
  /**************************************************************************/

#endif //#ifndef LSTRIP
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\precutil.cpp ===
/* *************************************************************** */
/*    File:       RecUtil.c                                        */
/*    Contains:   This file contains the code needed for main      */
/*                 recognition routine support.                    */
/*    Written by: ParaGraph Team                                   */
/*    Copyright:   1994 by ParaGraph Int'l, all rights reserved.  */
/* *************************************************************** */

#include "hwr_sys.h"
#include "ams_mg.h"

#include "precutil.h"
#include "xr_names.h"

//#include "lowlevel.h"
//#include "calcmacr.h"

#ifndef err_msg
#if  PG_DEBUG
  _VOID  err_msg( p_CHAR msg );
#else
  #define  err_msg(a)  
#endif  /* ! PG_DEBUG */
#endif /* ifndef err_msg */

/* *************************************************************** */
/* ****** Multi word recognition routines ************************ */
/* *************************************************************** */

#define CUT_MWORD         ON    // Enables mword on big spaces in words
#define CUT_LOCATIONS    OFF    // Enables calculation of locations for dict len cut
//#define RU_MWORD_LP        9
//#define RU_MWORD_DASH_LP   8

/* *************************************************************** */
/* *            Set XrData marks at places destined for MW bndrs * */
/* *************************************************************** */
_INT  SetMultiWordMarksDash(p_xrdata_type xrdata)
 {
  _INT       i;
  _INT       mword = 0;
  _INT       xrinp_len = xrdata->len;
  p_xrd_type xrd = xrdata->xrd;

  /* -------------- Betw-word dash multiword ------------------------------ */

  for (i = 1; i < xrinp_len-4; i ++)
   {
    if (IS_CLEAR_LINK((*xrd)[i].xr.type))
     {
      if (((*xrd)[i+1].xr.type == X_XT_ST || (*xrd)[i+1].xr.type == X_ST) &&
          IS_CLEAR_LINK((*xrd)[i+2].xr.type))
       {
//        (*xrd)[i].xr.penalty   = (_UCHAR)(RU_MWORD_DASH_LP-2);
//        (*xrd)[i+2].xr.penalty = (_UCHAR)(RU_MWORD_DASH_LP);
        WSF_SET((*xrd)[i].xr.attrib, WS_SEGM_NOSEG);
        WSF_SET((*xrd)[i+2].xr.attrib, WS_SEGM_NOSP);
        mword = 1;
       }
     }
   }

  return mword;
 }

/* *************************************************************** */
/* *            Set XrData marks at places destined for MW bndrs * */
/* *************************************************************** */
_INT  SetMultiWordMarksWS(_INT level, p_xrdata_type xrdata, p_rc_type rc)
{
	_INT            i, j, k, n, v, p, ns;
	_INT            xs;
	_INT            mword = 0;
	_INT            xrinp_len = xrdata->len;
	p_PS_point_type ptr;
	p_xrd_type      xrd = xrdata->xrd;
	p_PS_point_type trace = rc->trace;
	p_ws_word_info_type wswi = (p_ws_word_info_type)rc->p_ws_wi;

#define SMW_LEVEL1   (70)
#define SMW_LEVEL2   (30)
#define SMW_LEVEL3  (-30)
#define SMW_LEVEL4  (-70)
#define SMW_LEVEL5  (-85)

	/* -------------- Big spaces Mword and penalties ------------------------ */

	if (wswi == _NULL) goto err;

	for (i = 1, p = 0; i < xrinp_len-1; i ++)
	{
		(*xrd)[i].xr.iSpc	=	0;
	}

	for (j = 0; j < WSW_MAX_VALUES; j ++) // Search for UNSURE stroke
	{
		if ((ns = wswi->s_nums[j]) == 0) continue;

		if (HWRAbs(wswi->s_surs[j]) > level) continue; // Set marks only on unsure gaps

		for (i = 1, k = 1, ptr = trace+1; k < rc->ii; ptr ++, k ++)
		{
			if (ptr->y < 0) // We are at break location
			{
				if (i == ns) // We are at the end of desired stroke
				{
					v = k-1;  // Number of last point of the desired stroke

					for (i = 1, p = 0; i < xrinp_len-1; i ++)
					{
						if (!IS_XR_LINK((*xrd)[i].xr.type)) 
						{
							continue;
						}

						//              xs = trace[v].x;
						for (n = v, xs = 0; n > 0 && trace[n].y >= 0; n --) if (xs < trace[n].x) xs = trace[n].x;

						if ((xs >= (*xrd)[i].box_left && xs <= (*xrd)[i].box_right) ||
							v == (*xrd)[i].begpoint)
							//              if (v == (*xrd)[i].begpoint) // Break after the desired stroke
						{
							mword = 1;
							p     = i;
						}
					}

					n = 0;
					i = wswi->s_surs[j];
					if (i < SMW_LEVEL1) n = 1;
					if (i < SMW_LEVEL2) n = 2;
					if (i < SMW_LEVEL3) n = 3;
					if (i < SMW_LEVEL4) n = 4;

					//          if (p) (*xrd)[p].xr.penalty = (_UCHAR)(RU_MWORD_LP + n);
					if (p) 
					{
						WSF_SET((*xrd)[p].xr.attrib, WS_SEGM_HISEG+n);

						(*xrd)[p].xr.iSpc	=	(_UCHAR)(wswi->s_surs[j] + 100);
					}

					break;
				}

				i ++;
			}
		} // Trace search cycle
	} // word strokes cycle end

	return mword;
err:
	return 0;
}

/* *************************************************************** */
/* *           Set strtokes' unsure marks array                  * */
/* *************************************************************** */
_INT  SetStrokeSureValuesWS(_INT fl_carry, _INT num_word, p_ws_results_type wsr, p_ws_word_info_type wswi)
 {
  _INT i, j, k, n, t;
  _INT w, p, loc;

  p_word_strokes_type wstr = &((*wsr->pwsa)[num_word]);

  for (n = 0; wswi->s_nums[n] != 0 && n < WSW_MAX_VALUES; n ++);

  if (n >= WSW_MAX_VALUES) goto err;

  for (i = 0; i < wstr->num_strokes; i ++) // Process all strokes
   {
    w = 100; loc = 0;
    for (j = 0; j < wstr->num_strokes-1; j ++) // Search max unsure stroke (from what is left)
     {
      for (k = p = 0; k < n; k ++) if (wswi->s_nums[k]-1 == j) {p = 1; break;}
      if (p) continue;

      if (w > (t = HWRAbs(wsr->k_surs[wstr->first_stroke_index + j])))
       {w = t; loc = j+1;}
     }

    if (w == 100) break; // All done, pora ...

    wswi->s_nums[n] = (_UCHAR)(loc - ((fl_carry) ? 1:0));
    wswi->s_surs[n] = (_SCHAR) (wsr->k_surs[wstr->first_stroke_index+loc-1]);
    if (++n >= WSW_MAX_VALUES) break;
   }

  return 0;
err:
  return 1;
 }

/* *************************************************************** */
/* ****** BaseLine definition support routines ******************* */
/* *************************************************************** */

/* *************************************************************** */
/* *             Set reference baseline for Stroka               * */
/* *************************************************************** */
_INT SetRCB(p_RCB_inpdata_type p_inp, p_stroka_data p_stroka)
 {
  _INT  pos, size, dn_pos, size_sure, pos_sure, shift;

  size      = p_stroka->size_in      = 0;
  dn_pos    = p_stroka->dn_pos_in    = 0;
  size_sure = p_stroka->size_sure_in = 0;
  pos_sure  = p_stroka->pos_sure_in  = 0;

  GetInkBox(p_inp->trace, p_inp->num_points, &(p_stroka->box));

  if (p_inp->flags & RCBF_WSBORD) // Word segm stroka present
   {
    size      = p_inp->ws_size;
    dn_pos    = p_inp->ws_dn_pos;
    size_sure = 50;
    if (p_inp->flags & RCBF_NEWLINE) pos_sure = 0;
     else pos_sure  = 50;
   }
                  // Prev word stroka present
  if ((p_inp->flags & RCBF_PREVBORD) && !(p_inp->flags & RCBF_NEWAREA))
   {
    size      = p_inp->prv_size;
    size_sure = p_inp->prv_size_sure;

    if ((p_inp->flags & RCBF_WSBORD) == 0) // No segmentation
     {
      dn_pos    = p_inp->prv_dn_pos;
      pos_sure  = p_inp->prv_pos_sure;
      pos       = GetAvePos(p_inp->trace, p_inp->num_points);
      if (HWRAbs(pos - (dn_pos-size/2)) > size) pos_sure = 0;
     }
     else
     {
      if ((p_inp->flags & RCBF_NEWLINE) == 0) // Same line
       {
        dn_pos    = p_inp->prv_dn_pos;
        pos_sure  = p_inp->prv_pos_sure;
       }
     }
   }


  if (p_inp->flags & RCBF_BOXBORD) // Word segm stroka present
   {
    size      = p_inp->bx_size;
    dn_pos    = p_inp->bx_dn_pos;
    size_sure = 100;
    pos_sure  = 100;
                   // Correct Box est
    if (p_stroka->box.bottom > 0)
     {
      if (p_stroka->box.bottom - p_stroka->box.top > size/2)
       {
        if (dn_pos > p_stroka->box.bottom)
         {
          shift  = dn_pos - p_stroka->box.bottom;
          if (shift > size/2) shift = size/2;
          dn_pos -= shift;
          if (dn_pos - size < p_stroka->box.top) size -= p_stroka->box.top - (dn_pos - size);
         }
       }
     }
   }

  p_stroka->size_in      = (_SHORT)size;
  p_stroka->dn_pos_in    = (_SHORT)dn_pos;
  p_stroka->size_sure_in = (_SHORT)size_sure;
  p_stroka->pos_sure_in  = (_SHORT)pos_sure;

  return 0;
 }

/* *************************************************************** */
/* *            Extract baseline info from WS structures         * */
/* *************************************************************** */
_INT GetWSBorder(_INT nword, p_ws_results_type wsr, p_INT psize, p_INT ppos, p_INT nl)
 {
  p_word_strokes_type wstr;
  p_word_strokes_type pwstr;

  if (wsr == _NULL) goto err;
  if (nword >= wsr->num_words) goto err;

  wstr   = &((*wsr->pwsa)[nword]);
  *psize = wstr->ave_h_bord;
  *ppos  = wstr->word_mid_line + wstr->ave_h_bord/2;

  if (!(wstr->flags & WS_FL_SPSURE)) goto err;
  if (nword < 1) goto err;
  pwstr = &((*wsr->pwsa)[nword-1]);

  if (nword > 1) if ((pwstr-1)->flags & WS_FL_CARRYDASH) pwstr --;

  *nl = (wstr->line_num != pwstr->line_num);

  return 0;
err:
  *nl = 1;
  return 1;
 }

/* *************************************************************** */
/* *          Get box of given trace                             * */
/* *************************************************************** */
_INT GetInkBox(_TRACE pt, _INT np, p_RECT prect)
 {
  _INT   i;
  _INT   xmin, xmax, ymin, ymax;
  _TRACE tr = pt;

  if (tr == _NULL || np < 3) goto err;

  xmax = ymax = 0;
  xmin = ymin = 32000;

  for (i = 0; i < np; i ++, tr ++)
   {
    if (tr->y < 0) continue;

    if (tr->x < xmin) xmin = tr->x;
    if (tr->x > xmax) xmax = tr->x;
    if (tr->y < ymin) ymin = tr->y;
    if (tr->y > ymax) ymax = tr->y;
   }

  prect->left   = (_SHORT)xmin;
  prect->top    = (_SHORT)ymin;
  prect->right  = (_SHORT)xmax;
  prect->bottom = (_SHORT)ymax;

  return 0;
err:
  prect->left = prect->top = prect->right = prect->bottom = (_SHORT)0;
  return 1;
 }

/* *************************************************************** */
/* *             Set reference baseline for Stroka               * */
/* *************************************************************** */
_INT GetAvePos(_TRACE trace, _INT num_points)
 {
  _INT  i, j;
  _LONG y_sum;

  if (trace == _NULL || num_points < 3) goto err;

  for (i = 0, y_sum = 0, j = 0; i < num_points; i ++)
   {
    if (trace[i].y < 0) continue;

    y_sum += trace[i].y; j ++;
   }

  if (j == 0) goto err;

  return (_INT)(y_sum/j);
err:
  return 0;
 }

/* ************************************************************************ */
/* * Allocate memory for new xrdata of requested size and clean it        * */
/* ************************************************************************ */
int AllocXrdata(p_xrdata_type xrdata, int size)
 {

  if (xrdata == _NULL) goto err;
  if (size == 0 || size > XRINP_SIZE) goto err;

  xrdata->xrd = (p_xrd_type)HWRMemoryAlloc((_UINT)(sizeof(xrd_el_type) * size));

  if (xrdata->xrd == _NULL) goto err;
  xrdata->size = size;
  xrdata->len  = 0;

  HWRMemSet(xrdata->xrd, 0, (_UINT)(sizeof(xrd_el_type) * size));

  return 0;
err:
  return 1;
 }

/* ************************************************************************ */
/* *  Deallocate memory used by xrdata                                    * */
/* ************************************************************************ */
int FreeXrdata(p_xrdata_type xrdata)
 {

  if (xrdata == _NULL) goto err;
  if (xrdata->xrd == _NULL) goto err;

  HWRMemoryFree(xrdata->xrd);
  xrdata->xrd  = _NULL;
  xrdata->len  = 0;
  xrdata->size = 0;

  return 0;
err:
  return 1;
 }

/* *************************************************************** */
/* *          End of all                                         * */
/* *************************************************************** */
//
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\param.cpp ===
#include  "bastypes.h"
   #include  "param.h"


   #if FIXED_ARITHMETIC == USE_C_32 

      typedef struct 
      {
        _ULONG  L0;
        _ULONG  L1;
        _ULONG  L2;
        _ULONG  L3;
        _ULONG  L4;
        _ULONG  L5;
      } _FIX24;

      typedef _FIX24& _FIX24_PARAM;
      #define  FIX24_VAL(L) ((L).L0)

     _VOID  DivFix24 ( _ULONG R2, _ULONG R1, _FIX24& Res )
      {
        _ULONG l =  0;
        _ULONG N = 12;

         while ( R2 >= R1 ) { R2 -= R1;  l++; }

         do 
         {
           R2 <<= 1; l  <<= 1; if ( R2 > R1 ) {  R2 -= R1;  l++; }
           R2 <<= 1; l  <<= 1; if ( R2 > R1 ) {  R2 -= R1;  l++; }
         } while ( --N > 0 );

         Res.L0 =  l;
         Res.L1 = (l >> 24);
         Res.L2 = (l >> 16) & 0x00FF;
         Res.L3 = (l >>  8) & 0x00FF;
         Res.L5 = (l >>  8) & 0xFFFF;
         Res.L4 = (l      ) & 0x00FF;
      }

     _LONG  IMulByFix24 ( _LONG R, _FIX24_PARAM Fix )
      {
        _LONG   R2; 

         if ( R > 65536L )
         {
            R2    =  ((_LONG)(R * Fix.L2)) >>  8;
            R2   +=  ((_LONG)(R * Fix.L3)) >> 16;
            R2   +=  ((_LONG)(R * Fix.L4)) >> 24;
         }  else {
            R2    =  ((_LONG)(R * Fix.L5)) >> 16;
         }

         if ( Fix.L1 == 0 )
         {
           return R2;
         }
         else if ( Fix.L1 == 1 )
         {
           return R2 + R;
         }
         else
         {
           return R2 + (_LONG)(R * Fix.L1);
         }
      }


   #elif FIXED_ARITHMETIC == USE_ASM_86  // USE Inline Assembler for I386

      typedef  _ULONG  _FIX24;
      typedef  _FIX24  _FIX24_PARAM;
      #define   FIX24_VAL(L) (L)

     _VOID  DivFix24 ( _ULONG R2, _ULONG R1, _FIX24& Lam )
      {
         _asm     mov  edx, R2
         _asm     shr  edx, 8
         _asm     mov  eax, eax
         _asm     shl  eax, 24
         _asm     mov  ebx, dword ptr Lam
         _asm     div  dword ptr R1
         _asm     mov  dword ptr [ebx], eax
      }

     _ULONG  IMulByFix24 ( _ULONG R, _FIX24_PARAM Lam )
      {
         _asm     mov  eax, dword ptr R
         _asm     imul dword ptr Lam
         _asm     shl  edx, 8
         _asm     shr  eax, 24
         _asm     add  eax, edx  
         _asm     ret
          return  R;
      }

   #else
      #error "Undefined processor"
   #endif 

 //////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////

 _VOID  ResetParam ( _INT sm, p_ARDATA  pARdata, _LONG LenApp)
  {
    _INT     i;

    LenApp /= sm - 1;
    for ( i = 0; i < sm; i++ )
     {
       if ( i == 0 )
        {
         pARdata[0].s = 0;
         pARdata[0].r = 0;
        }
       else
        {
         pARdata[i].s = LenApp;
         pARdata[i].r = pARdata[i-1].r + LenApp;
        }
     }
  }

 _VOID  ResetParam3D ( _INT sm, p_ARDATA3D  pARdata, _LONG LenApp)
  {
    _INT     i;

    LenApp /= sm - 1;
    for ( i = 0; i < sm; i++ )
     {
       if ( i == 0 )
        {
         pARdata[0].s = 0;
         pARdata[0].r = 0;
        }
       else
        {
         pARdata[i].s = LenApp;
         pARdata[i].r = pARdata[i-1].r + LenApp;
        }
     }
  }

  /**********************************************************************/


  _LONG  Repar ( _INT Sam  ,  p_ODATA   pOdata,
                 _INT ReSam,  p_ARDATA  pARdata )
   {
    _LONG    R1;
    _LONG    R2;
    _FIX24   lam;
    _FIX24   alf;

     pARdata->Rx            =  pOdata[0].x;
     pARdata->Ry            =  pOdata[0].y;
     pARdata[ReSam - 1].Rx  =  pOdata[Sam-1].x;
     pARdata[ReSam - 1].Ry  =  pOdata[Sam-1].y;

     DivFix24( pOdata [Sam   - 1].r, pARdata[ReSam - 1].r, lam );

     pARdata =  pARdata + 1;
     pOdata  =  pOdata  + 1;

     do {
       R2 = IMulByFix24 ( pARdata->r, lam );
       while ( R2 >= pOdata->r ) pOdata ++;

       R2  =  pOdata->r - R2;
       R1  =  pOdata->s;
       R2  =  R1 - R2;

       DivFix24 ( R2, R1, alf );

       pARdata->Rx = (pOdata-1)->x + IMulByFix24 ( pOdata->dx, alf );
       pARdata->Ry = (pOdata-1)->y + IMulByFix24 ( pOdata->dy, alf );

       pARdata  ++;

     } while ( --ReSam > 2 );

    return  FIX24_VAL(lam);
  }

   // 3D - version
  _LONG  Repar3D ( _INT Sam  ,  p_ODATA3D   pOdata,
                   _INT ReSam,  p_ARDATA3D  pARdata )
   {
    _LONG    R1;
    _LONG    R2;
    _LONG    R3;
    _FIX24   lam;
    _FIX24   alf;

     pARdata->Rx            =  pOdata[0].x;
     pARdata->Ry            =  pOdata[0].y;
     pARdata->Rz            =  pOdata[0].z;
     pARdata[ReSam - 1].Rx  =  pOdata[Sam-1].x;
     pARdata[ReSam - 1].Ry  =  pOdata[Sam-1].y;
     pARdata[ReSam - 1].Rz  =  pOdata[Sam-1].z;

     R3 =  pOdata[Sam-1].r;

     DivFix24( pOdata [Sam   - 1].r, pARdata[ReSam - 1].r, lam );

     pARdata =  pARdata + 1;
     pOdata  =  pOdata  + 1;

     do {
       R2 = IMulByFix24 ( pARdata->r, lam );
       while ( R2 >= pOdata->r && R2 < R3 ) pOdata ++;

       R2  =  pOdata->r - R2;
       R1  =  pOdata->s;
       R2  =  R1 - R2;

       DivFix24 ( R2, R1, alf );

       pARdata->Rx = (pOdata-1)->x + IMulByFix24 ( pOdata->dx, alf );
       pARdata->Ry = (pOdata-1)->y + IMulByFix24 ( pOdata->dy, alf );
       pARdata->Rz = (pOdata-1)->z + IMulByFix24 ( pOdata->dz, alf );

       pARdata  ++;

     } while ( --ReSam > 2 );

     return  FIX24_VAL(lam);
   }

  /**********************************************************************/
  /*                                                                    */
  /*     FUNCTION  Tracing (_INT sm, p_ARDATA pData);                   */
  /*                                                                    */
  /*     FILL  the  s and r fields in Adata data array                  */
  /**********************************************************************/

   _VOID  Tracing ( _INT sm, p_ARDATA pData)
    {
      _LONG       dx;
      _LONG       dy;
      _ULONG      dl;
      _ULONG       R;

       dl = pData->s = pData->r = 0L;
       pData ++;
       sm--    ;
       do {
           dx = pData->Ax - (pData-1)->Ax;
           dy = pData->Ay - (pData-1)->Ay;
           if (dx < 0 ) dx = -dx;
           if (dy < 0 ) dy = -dy;
           R  = (_ULONG)dx * (_ULONG)dx;
           R += (_ULONG)dy * (_ULONG)dy;
           R  = SQRT32 (R);
           pData->s = R;
           pData->r = dl += R;
           pData++;
        } while ( --sm );
     }

   _VOID  Tracing3D ( _INT sm, p_ARDATA3D pData)
    {
      _LONG       dv;
      _ULONG      dl;
      _ULONG       R;

       dl = pData->s = pData->r = 0L;
       pData ++;
       sm--    ;
       do {
           dv = pData->Ax - (pData-1)->Ax;
           if (dv < 0 ) dv = -dv;
           R  = (_ULONG)dv * (_ULONG)dv;

           dv = pData->Ay - (pData-1)->Ay;
           if (dv < 0 ) dv = -dv;
           R += (_ULONG)dv * (_ULONG)dv;

           dv = pData->Az - (pData-1)->Az;
           if (dv < 0 ) dv = -dv;
           R += (_ULONG)dv * (_ULONG)dv;

           R  = SQRT32 (R);
           pData->s = R;
           pData->r = dl += R;
           pData++;
        } while ( --sm );
    }

  /**********************************************************************/

 _LONG  ApprError ( _INT Sam,  p_ARDATA  pARdata)
  {
     _INT  i;
     _LONG T;
     _LONG E = 0;

      for ( i = 0; i < Sam; i++, pARdata++ )
       {
         T  = pARdata->Ax - pARdata->Rx;
         if ( T < 0) T = -T;
         E += T;
         T  = pARdata->Ay - pARdata->Ry;
         if ( T < 0) T = -T;
         E += T;
       }
      return  E / Sam;
  }


 _LONG  ApprError3D ( _INT Sam,  p_ARDATA3D  pARdata)
  {
     _INT  i;
     _LONG T;
     _LONG E = 0;

      for ( i = 0; i < Sam; i++, pARdata++ )
      {
         T  = pARdata->Ax - pARdata->Rx;
         if ( T < 0) T = -T;
         E += T;

         T  = pARdata->Ay - pARdata->Ry;
         if ( T < 0) T = -T;
         E += T;

         T  = pARdata->Az - pARdata->Rz;
         if ( T < 0) T = -T;
         E += T;
      }
      return  E / Sam;
  }


  /***********************************************************************/


 _ULONG  SQRT32 (_ULONG R0 )
   {
    _ULONG  R1 = 1L;
    _ULONG  R2 = 0L;
    _ULONG  R3 = 1L;


     if ( R0 >= (R1<<30) )
      {
        R0 = R0 - (R1<<30);
        R2 += R2 + 1;
      } else {
        R2 += R2;
      }
     R1 = R3 + (R2 << 2);

     if ( R0 >= (R1<<28) )
      {
        R0 = R0 - (R1<<28);
        R2 += R2 + 1;
      } else {
        R2 += R2;
      }
     R1 = R3 + (R2 << 2);

     if ( R0 >= (R1<<26) )
      {
        R0 = R0 - (R1<<26);
        R2 += R2 + 1;
      } else {
        R2 += R2;
      }
     R1 = R3 + (R2 << 2);

     if ( R0 >= (R1<<24) )
      {
        R0 = R0 - (R1<<24);
        R2 += R2 + 1;
      } else {
        R2 += R2;
      }
     R1 = R3 + (R2 << 2);

     if ( R0 >= (R1<<22) )
      {
        R0 = R0 - (R1<<22);
        R2 += R2 + 1;
      } else {
        R2 += R2;
      }
     R1 = R3 + (R2 << 2);

     if ( R0 >= (R1<<20) )
      {
        R0 = R0 - (R1<<20);
        R2 += R2 + 1;
      } else {
        R2 += R2;
      }
     R1 = R3 + (R2 << 2);

     if ( R0 >= (R1<<18) )
      {
        R0 = R0 - (R1<<18);
        R2 += R2 + 1;
      } else {
        R2 += R2;
      }
     R1 = R3 + (R2 << 2);

     if ( R0 >= (R1<<16) )
      {
        R0 = R0 - (R1<<16);
        R2 += R2 + 1;
      } else {
        R2 += R2;
      }
     R1 = R3 + (R2 << 2);

     if ( R0 >= (R1<<14) )
      {
        R0 = R0 - (R1<<14);
        R2 += R2 + 1;
      } else {
        R2 += R2;
      }
     R1 = R3 + (R2 << 2);

     if ( R0 >= (R1<<12) )
      {
        R0 = R0 - (R1<<12);
        R2 += R2 + 1;
      } else {
        R2 += R2;
      }
     R1 = R3 + (R2 << 2);

     if ( R0 >= (R1<<10) )
      {
        R0 = R0 - (R1<<10);
        R2 += R2 + 1;
      } else {
        R2 += R2;
      }
     R1 = R3 + (R2 << 2);

     if ( R0 >= (R1<< 8) )
      {
        R0 = R0 - (R1<< 8);
        R2 += R2 + 1;
      } else {
        R2 += R2;
      }
     R1 = R3 + (R2 << 2);

     if ( R0 >= (R1<< 6) )
      {
        R0 = R0 - (R1<< 6);
        R2 += R2 + 1;
      } else {
        R2 += R2;
      }
     R1 = R3 + (R2 << 2);

     if ( R0 >= (R1<< 4) )
      {
        R0 = R0 - (R1<< 4);
        R2 += R2 + 1;
      } else {
        R2 += R2;
      }
     R1 = R3 + (R2 << 2);

     if ( R0 >= (R1<< 2) )
      {
        R0 = R0 - (R1<< 2);
        R2 += R2 + 1;
      } else {
        R2 += R2;
      }
     R1 = R3 + (R2 << 2);

     if ( R0 >= R1 )
      {
        R2 += R2 + 1;
      } else {
        R2 += R2;
      }
     return  R2;
  }
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\polyco.cpp ===
/* *************************************************************************** */
/* *     Get PolyCo given trace and XrData Range                             * */
/* *************************************************************************** */

#include "ams_mg.h"
#include "hwr_sys.h"

#include "param.h"
#include "dscr.h"
#include "polyco.h"
#include "xr_names.h"


// ---------------------- Defines ----------------------------------------------

#define BREAK (-1)
#define FBO_ABS(x) (((x) >= 0) ? (x) : (-(x)))

// --------------------- Types -------------------------------------------------

typedef struct {
                _INT   pnum;
                _INT   best_len;
                _UCHAR order[MAX_PARTS_IN_LETTER];
                _UCHAR best_order[MAX_PARTS_IN_LETTER];
                _INT   sx[MAX_PARTS_IN_LETTER];
                _INT   sy[MAX_PARTS_IN_LETTER];
                _INT   ex[MAX_PARTS_IN_LETTER];
                _INT   ey[MAX_PARTS_IN_LETTER];
                Part_of_letter pp[MAX_PARTS_IN_LETTER];
               } fbo_type, _PTR p_fbo_type;

// -------------------- Proto --------------------------------------------------

p_3DPOINT XrdToTrace( xrdata_type _PTR xrdata, _TRACE fullTrace, _INT iBegXr, _INT iEndXr, p_INT pnPointsOut, p_INT num_strokes, p_RECT rect, Part_of_letter _PTR parts);
_INT      SortParts(_INT np, pPart_of_letter pparts, _TRACE trace);
_INT      FindBestOrder(_INT depth, _INT len, p_fbo_type fbo);

/* *************************************************************************** */
/* *     Get PolyCo given trace and XrData Range                             * */
/* *************************************************************************** */
_INT GetPolyCo(_INT st, _INT len, p_xrdata_type xrdata, _TRACE trace, p_UCHAR coeff)
{
	_INT				i, j, n;
	_INT				num_points, num_strokes;
	p_3DPOINT			p_sym_trace;
	_3DPOINT			Coeffs[PC_N_INT_COEFFS];
	_LONG				lLambda, lError= 0;
	_RECT				rect;
	Part_of_letter	parts[MAX_PARTS_IN_LETTER+1];
	
	p_sym_trace = XrdToTrace(xrdata, trace, st, st+len-1, &num_points, &num_strokes, &rect, &parts[0]);
	
	if (p_sym_trace == _NULL) 
		goto err;

	if (num_points < 3) goto 
		err;
	
	//Prepare Polyakov's coeffs:
	if  (!Trace3DToDct((_WORD)num_points, p_sym_trace, (_WORD)PC_N_INT_COEFFS, Coeffs,
		(_WORD)1, (_WORD)0, &lLambda, 0 /*&lError*/, _FALSE)) 
		goto err;
	
	//  for (i = 1, n = 0; i < num_points; i ++) if (p_sym_trace[i].y == BREAK) n ++;
	//  (*coeff)[0] = n;
	
	for (i = 1, j = 0; j < PC_N_INT_COEFFS; i += 3, j ++)
	{
		n = Coeffs[j].x+128; if (n < 0) n = 0; if (n > 255) n = 255; coeff[i+2] = (_UCHAR)n;
		n = Coeffs[j].y+128; if (n < 0) n = 0; if (n > 255) n = 255; coeff[i+1] = (_UCHAR)n;
		n = Coeffs[j].z+128; if (n < 0) n = 0; if (n > 255) n = 255; coeff[i+0] = (_UCHAR)n;
	}
	
	n = (num_strokes-1)*64; if (n > 255) n = 255; coeff[0] = (_UCHAR)n;      // Number of strokes
	n = 0;                                                                  // 'Separate' flag on the left and right, replaces 0 order Z
	if (IS_XR_LINK((*xrdata->xrd)[st-1].xr.type))     n += (_UCHAR)1;
	if (IS_XR_LINK((*xrdata->xrd)[st+len-1].xr.type)) n += (_UCHAR)2;
	coeff[1] = (_UCHAR)(n*64);
	n = lError/256; if (n < 0) n = 0; if (n > 255) n = 255; coeff[PC_NUM_COEFF-1] = (_UCHAR)n; // Approximation error
	
	if (GetSnnBitMap(st, len, xrdata, trace,  &coeff[PC_NUM_COEFF], &rect, &parts[0])) 
		goto err;
	
	if (p_sym_trace) 
		HWRMemoryFree(p_sym_trace);
	
	return 0;
err:
	if (p_sym_trace)
		HWRMemoryFree(p_sym_trace);
	
	return 1;
}

/* *************************************************************************** */
/* *     Get Trace for given xrdata range                                    * */
/* *************************************************************************** */
// ATTENTION!!!   If the result is successful (return value != NULL),
//              the caller function must free trace memory after usage!!!

p_3DPOINT XrdToTrace(xrdata_type _PTR xrdata, _TRACE fullTrace, _INT iBegXr, _INT iEndXr, p_INT pnPointsOut, p_INT num_strokes, p_RECT rect, Part_of_letter _PTR Parts)
 {
  _INT             i, j;
  _INT             modified = 0;
  _SHORT           nParts	= 0;
  _SHORT           x, y;
//  Part_of_letter   Parts[MAX_PARTS_IN_LETTER];
  _INT             nPoints = 0;
  p_3DPOINT        pTrace  = _NULL;
  p_xrd_el_type    xrd     = (p_xrd_el_type)xrdata->xrd;


      //Check validity of input:
  if(iBegXr == 0 || iEndXr == 0) goto  EXIT_ACTIONS;
  if(iBegXr < 0 || iEndXr >= XRINP_SIZE || iEndXr < iBegXr) goto  EXIT_ACTIONS;

//  pParts = (pPart_of_letter)HWRMemoryAlloc(MAX_PARTS_IN_LETTER*sizeof(Part_of_letter));
//  if (pParts == _NULL) goto  EXIT_ACTIONS;

  if (iBegXr > 2) // AVP recover connecting trace (mainly for cursive 's')
   {
    if (!IsXrLink(&(*xrdata->xrd)[iBegXr]) && !GetXrMovable(&(*xrdata->xrd)[iBegXr]) &&
        !IsXrLink(&(*xrdata->xrd)[iBegXr-1]) && !GetXrMovable(&(*xrdata->xrd)[iBegXr-1]))
     {
      iBegXr --;
      modified ++;
     }
   }

  if (connect_trajectory_and_letter( xrd, (_SHORT)iBegXr, (_SHORT)iEndXr, (p_SHORT)&nParts, &Parts[0]) != SUCCESS) goto  EXIT_ACTIONS;
  if (nParts == 0) goto EXIT_ACTIONS;

  Parts[nParts].iend = 0;

  if (modified)
   {
    j = ((*xrdata->xrd)[iBegXr].endpoint + (*xrdata->xrd)[iBegXr+1].begpoint)/2;
    if (Parts[0].ibeg < j) Parts[0].ibeg = (_SHORT)(j);
    if (Parts[0].ibeg > Parts[0].iend) Parts[0].ibeg = Parts[0].iend;
   }

  SortParts(nParts, &Parts[0], fullTrace);

      //Calc. the number of points in all parts and alloc "pTrace" of that size:
  nPoints = 1;  //for possibly needed BREAK at beg.
  for  (i = 0; i < nParts; i ++)
   {
    nPoints += Parts[i].iend - Parts[i].ibeg + 1 + 1;  //"1" - for BREAK after parts
   }

  if ( nPoints <= 0 ) goto EXIT_ACTIONS;

  pTrace = (p_3DPOINT)HWRMemoryAlloc((nPoints+nParts+16)*sizeof(_3DPOINT));
  if  (pTrace == _NULL) goto  EXIT_ACTIONS;
//  pTrace[nPoints].y = BREAK; // Escape exception in descr.cpp (AVP 8-1-97)

  rect->top = rect->left = 32000;
  rect->bottom = rect->right = 0;

      //Copy letter trace:

  for (i = nPoints = 0; i < nParts; i ++)
   {
//    for (j = 0; i > 0 && j < 3; j ++)
    if(i > 0)
     {
      pTrace[nPoints].x = 0;
      pTrace[nPoints].y = BREAK;
      pTrace[nPoints].z = 0;
      nPoints ++;
     }

    for (j = Parts[i].ibeg; j <= Parts[i].iend; j ++)
     {
      if ((fullTrace[j].y == BREAK) &&
		  (!nPoints || (pTrace[nPoints-1].y == BREAK))) // JPittman: don't index off beginning of pTrace
		  continue;

      pTrace[nPoints].x = x = fullTrace[j].x;
      pTrace[nPoints].y = y = fullTrace[j].y;
      pTrace[nPoints].z = 100;
      nPoints++;

      if (y >= 0)  // Escape problems with multistroke trajectory parts
       {
        if (x > rect->right)  rect->right  = x;
        if (x < rect->left)   rect->left   = x;
        if (y > rect->bottom) rect->bottom = y;
        if (y < rect->top)    rect->top    = y;
       }
     }
   }

  if (pTrace[nPoints-1].y != BREAK)
   {
    pTrace[nPoints].x = 0;
    pTrace[nPoints].y = BREAK;
    pTrace[nPoints].z = 0;
    nPoints++;
   }

  for (i = 1; i < nPoints-1; i ++) // Glue strokes with 'air' trajectory
   {
    if (pTrace[i].y == BREAK)
     {
//      pTrace[i+1].x = (_SHORT)((pTrace[i-1].x + pTrace[i+3].x)/2);
//      pTrace[i+1].y = (_SHORT)((pTrace[i-1].y + pTrace[i+3].y)/2);
//      pTrace[i+1].z = (_SHORT)200;

      pTrace[i+0].x = (_SHORT)((pTrace[i-1].x + pTrace[i+1].x)/2);
      pTrace[i+0].y = (_SHORT)((pTrace[i-1].y + pTrace[i+1].y)/2);
      pTrace[i+0].z = (_SHORT)200;

//      pTrace[i+2].x = (_SHORT)((pTrace[i+1].x + pTrace[i+3].x)/2);
//      pTrace[i+2].y = (_SHORT)((pTrace[i+1].y + pTrace[i+3].y)/2);
//      pTrace[i+2].z = (_SHORT)150;

      pTrace[i-1].z = 120;
      pTrace[i+1].z = 120;
     }
   }


 EXIT_ACTIONS:;

//  if (pParts != _NULL) HWRMemoryFree(pParts);

  *pnPointsOut = nPoints;
  *num_strokes = nParts;
  return  pTrace;
 }

#if 1
/* *************************************************************************** */
/* *     Sort parts to in order of writing                                   * */
/* *************************************************************************** */
_INT SortParts(_INT np, pPart_of_letter pparts, _TRACE trace)
 {
  _INT i;
  _INT all_sorted;
  Part_of_letter pp;

  if (np < 2) goto done;

  all_sorted = 0;
  while (!all_sorted)
   {
    for (i = 1, all_sorted = 1; i < np; i ++)
     {
      if (pparts[i-1].ibeg > pparts[i].ibeg)
       {
        pp          = pparts[i-1];
        pparts[i-1] = pparts[i];
        pparts[i]   = pp;

        all_sorted = 0;
       }
     }
   }

done:
  return 0;
 }

#else
/* *************************************************************************** */
/* *     Sort parts to minimize up-trajectory len                            * */
/* *************************************************************************** */
_INT SortParts(_INT np, pPart_of_letter pparts, _TRACE trace)
 {
  _INT i;
  fbo_type fbo;

  if (np < 2) goto done;

  fbo.pnum = np;
  fbo.best_len = 32767;

  for (i = 0; i < np && i < MAX_PARTS_IN_LETTER; i ++)
   {
    fbo.order[i] = fbo.best_order[i] = (_UCHAR)i;
    fbo.pp[i] = pparts[i];

    if (trace[fbo.pp[i].ibeg].y == BREAK) fbo.pp[i].ibeg ++;
    if (trace[fbo.pp[i].iend].y == BREAK) fbo.pp[i].iend --;
    if (fbo.pp[i].ibeg > fbo.pp[i].iend) goto err;

    fbo.sx[i] = trace[fbo.pp[i].ibeg].x;
    fbo.sy[i] = trace[fbo.pp[i].ibeg].y;
    fbo.ex[i] = trace[fbo.pp[i].iend].x;
    fbo.ey[i] = trace[fbo.pp[i].iend].y;
   }

  FindBestOrder(0, 0, &fbo); // Find order of parts with minimal air trace
                            // And copy it to original structure
  for (i = 0; i < np; i ++) pparts[i] = fbo.pp[fbo.best_order[i]];

done:
  return 0;
err:
  return 1;
 }


/* *************************************************************************** */
/* *     Recursive search of best order function                             * */
/* *************************************************************************** */
_INT  FindBestOrder(_INT depth, _INT len, p_fbo_type fbo)
 {
  _INT i, j, dl;

  if (depth == fbo->pnum)
   {
    if (len < fbo->best_len)
     {
      HWRMemCpy(fbo->best_order, fbo->order, sizeof(fbo->best_order));
      fbo->best_len = len;
     }

    goto done;
   }

  for (i = 0; i < fbo->pnum; i ++)
   {
    for (j = 0; j < depth; j ++) if (fbo->order[j] == i) break;
    if (j < depth) continue; // May use only unused parts!

    fbo->order[depth] = (_UCHAR)i;

    if (depth > 0)
     {
      _INT dx = fbo->ex[fbo->order[depth-1]] - fbo->sx[fbo->order[depth]];
      _INT dy = fbo->ey[fbo->order[depth-1]] - fbo->sy[fbo->order[depth]];

      dl = HWRMathISqrt(dx*dx + dy*dy);
     }
     else dl = 0;

    if (FindBestOrder(depth+1, len+dl, fbo)) continue;
   }

done:
  return 0;
err:
  return 1;
 }
#endif
/* *************************************************************************** */
/* *            End Of Alll                                                  * */
/* *************************************************************************** */
//
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\snn_img.cpp ===
// **************************************************************************
// *   NNET file as Cpp file                                                *
// **************************************************************************

#include "ams_mg.h"
#include "snn.h"

#if MLP_FAT_NET
 #if defined FOR_FRENCH
  #include "snnimgff.cpp"
 #elif defined FOR_GERMAN
  #include "snnimggf.cpp"
 #elif defined FOR_INTERNATIONAL
  #include "snnimgif.cpp"
 #else
  #include "snnimgef.cpp"
 #endif
#else // MLP_FAT_NET
 #if defined FOR_FRENCH
  #include "snn_imgf.cpp"
 #elif defined FOR_GERMAN
  #include "snn_imgg.cpp"
 #elif defined FOR_INTERNATIONAL
  #include "snn_imgi.cpp"
 #else
  #include "snn_imge.cpp"
 #endif
#endif

// **************************************************************************
// *    END OF ALL                                                          *
// **************************************************************************
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\snn_imgf.cpp ===
// **************************************************************************
// *   NNET file as Cpp file                                                *
// **************************************************************************

#include "snn.h"  

#if MLP_PRELOAD_MODE  

#include "mlp.h"  

#if MLP_CELL_MAXINPUTS != 32 || MLP_NET_NUMSIGNALS != 794 
 #error Wrong NET configuration!
#endif

// ****   NET body   ********************************************************

ROM_DATA mlp_net_type img_snet_body = 
 {
   {"MLP.Network.V.4.12.f"},
   4,
   288,
   116,
   {2057,2073,2089,2105,2121,2137,2153,2169,2185,2201,2217,2233,2248,2264,2280,2296,2312,2327,2343,2359,2374
    ,2390,2405,2421,2436,2452,2467,2482,2498,2513,2528,2543,2558,2573,2588,2603,2618,2632,2647,2662,2676
    ,2691,2705,2719,2734,2748,2762,2776,2790,2804,2817,2831,2845,2858,2872,2885,2898,2912,2925,2938,2951
    ,2963,2976,2989,3001,3014,3026,3039,3051,3063,3075,3087,3099,3110,3122,3134,3145,3156,3168,3179,3190
    ,3201,3212,3223,3233,3244,3254,3265,3275,3285,3295,3305,3315,3325,3335,3344,3354,3363,3373,3382,3391
    ,3400,3409,3418,3427,3436,3444,3453,3461,3469,3478,3486,3494,3502,3510,3518,3525,3533,3540,3548,3555
    ,3563,3570,3577,3584,3591,3598,3605,3611,3618,3624,3631,3637,3644,3650,3656,3662,3668,3674,3680,3686
    ,3691,3697,3703,3708,3714,3719,3724,3730,3735,3740,3745,3750,3755,3760,3764,3769,3774,3778,3783,3787
    ,3792,3796,3801,3805,3809,3813,3817,3821,3825,3829,3833,3837,3841,3844,3848,3852,3855,3859,3862,3865
    ,3869,3872,3875,3879,3882,3885,3888,3891,3894,3897,3900,3903,3906,3909,3911,3914,3917,3919,3922,3925
    ,3927,3930,3932,3935,3937,3939,3942,3944,3946,3948,3951,3953,3955,3957,3959,3961,3963,3965,3967,3969
    ,3971,3973,3975,3977,3978,3980,3982,3984,3985,3987,3989,3990,3992,3993,3995,3996,3998,3999,4001,4002
    ,4004,4005,4006,4008,4009,4010,4012,4013,4014,4015,4017,4018,4019,4020,4021,4023,4024,4025,4026,4027
    ,4028,4029,4030,4031,4032,4033,4034,4035,4036,4037,4038,4038,4039,4040,4041,4042,4043,4043,4044,4045
    ,4046,4047,4047,4048,4049,4050,4050,4051,4052,4052,4053,4054,4054,4055,4055,4056,4057,4057,4058,4058
    ,4059,4060,4060,4061,4061,4062,4062,4063,4063,4064,4064,4065,4065,4066,4066,4067,4067,4067,4068,4068
    ,4069,4069,4070,4070,4070,4071,4071,4072,4072,4072,4073,4073,4073,4074,4074,4074,4075,4075,4075,4076
    ,4076,4076,4077,4077,4077,4077,4078,4078,4078,4078,4079,4079,4079,4079,4080,4080,4080,4080,4081,4081
    ,4081,4081,4082,4082,4082,4082,4082,4083,4083,4083,4083,4083,4084,4084,4084,4084,4084,4084,4085,4085
    ,4085,4085,4085,4085,4086,4086,4086,4086,4086,4086,4087,4087,4087,4087,4087,4087,4087,4087,4088,4088
    ,4088,4088,4088,4088,4088,4088,4088,4089,4089,4089,4089,4089,4089,4089,4089,4089,4090,4090,4090,4090
    ,4090,4090,4090,4090,4090,4090,4090,4090,4091,4091,4091,4091,4091,4091,4091,4091,4091,4091,4091,4091
    ,4091,4091,4092,4092,4092,4092,4092,4092,4092,4092,4092,4092,4092,4092,4092,4092,4092,4092,4092,4092
    ,4092,4093,4093,4093,4093,4093,4093,4093,4093,4093,4093,4093,4093,4093,4093,4093,4093,4093,4093,4093
    ,4093,4093,4093,4093,4093,4093,4093,4094,4094,4094,4094,4094,4094,4094,4094,4094,4094,4094,4094,4094
    ,4094,4094,4094,4094,4094,4094,4094,4094,4094,4094,4094   },

   {
// *********** Cells of layer 1 *********************************************

     {
      506,
      629,
      {-1128,-166,-2475,2716,-1900,-273,988,-1120,81,-2287,1225,311,455,-4400,5206,-3529,-536,-5477,735,-1207,4074,2195,2127,664,1033,214,1538,-1331,-1379,-1537,1127,-31}
     },
     {
      506,
      -1274,
      {-2783,449,-2183,-2246,-780,5831,2959,-1844,2755,1331,-145,2010,700,-600,91,-800,-2117,-610,-671,544,1109,-230,967,-1398,195,-886,1117,-82,-1074,532,679,-525}
     },
     {
      506,
      -2155,
      {6207,-2178,2130,2116,-302,3396,499,-3655,-1111,-3796,-237,595,3313,-1113,563,1906,-901,-158,-3056,1405,-880,1915,-1049,58,-308,905,1276,-571,591,-2100,-1024,1709}
     },
     {
      506,
      2008,
      {392,646,-1490,2462,3192,-1432,-5213,798,21,-693,-2383,-3774,1105,290,3917,2286,953,-5652,-1491,253,3256,559,450,-2432,-6139,-764,2031,-866,1136,862,-932,2821}
     },
     {
      506,
      1043,
      {230,1000,-233,-1502,-59,1177,-421,-1572,1458,382,3495,-7843,-939,423,3918,-1275,-322,3066,-1785,-1712,-551,3041,2027,670,-766,108,-706,-383,-1357,-1744,516,1774}
     },
     {
      506,
      2327,
      {1203,-648,317,-2238,-3273,1144,92,3241,2067,-804,1033,-3242,-4445,-797,234,1587,1836,1881,-433,376,-4490,905,1965,-1635,786,-742,-2519,-2117,1621,623,1610,506}
     },
     {
      506,
      1638,
      {-3226,-401,102,3515,385,1239,-3795,-799,148,-4719,2441,-1764,-5712,68,-161,3697,1529,3685,-3779,-1333,1172,-2740,851,305,267,-190,3708,-1172,-135,865,-1253,674}
     },
     {
      506,
      -1220,
      {-836,3823,-1118,3495,591,838,-1548,1741,-1339,2541,-1601,1327,1766,-1515,-3088,1226,-228,-905,-2614,-2183,-3049,1750,-930,-795,-79,1349,1604,3114,-908,-1863,-3009,1865}
     },
     {
      506,
      3481,
      {-255,-227,1346,-777,-1713,-2642,1112,-2747,-2066,-656,-125,-4706,2353,-734,-3006,920,4393,-4412,1547,1247,447,-1303,3355,-2049,1660,119,-1613,-299,1675,-549,-1031,-1551}
     },
     {
      506,
      2100,
      {1037,-83,-1301,-4459,4449,1884,2282,2433,-1696,1405,-1737,-3975,4555,-508,-3911,-99,-1611,-7719,-1345,-690,1022,-630,2337,-826,277,949,-1020,3026,1114,-515,-916,2082}
     },
     {
      506,
      -2823,
      {3205,325,205,1033,-4195,1694,1372,4616,3491,3748,2282,1708,5019,-1822,-2030,-7343,340,1461,-3892,-3967,2092,3882,-750,-28,-1914,70,-500,-910,-1970,3202,-955,5284}
     },
     {
      506,
      -1596,
      {-910,6948,-3816,248,2019,1659,-780,749,1549,-875,-4067,-174,2399,261,-500,2211,-1914,-2055,2846,-2193,1702,-2916,-721,-588,992,-878,-144,-3068,-295,-330,758,-646}
     },
     {
      506,
      -4825,
      {-2938,392,1624,1059,-3219,-60,199,-238,-1107,-1288,-3261,-1534,7915,359,-1332,4887,-3902,286,9769,-1632,1488,1404,-3660,-2023,4388,-2071,1615,-1556,-2921,704,1271,-1456}
     },
     {
      506,
      2930,
      {-470,288,883,-520,2044,-92,-1417,-2117,1271,825,1681,-1493,4121,578,-7863,2320,2744,-4795,-4823,1495,-1475,-6218,420,1736,-3640,1329,81,-1150,3177,844,-547,1672}
     },
     {
      506,
      -2014,
      {277,305,-1205,-338,-543,730,-348,-118,1691,1355,-1107,-953,-2422,-119,-7875,-2022,-401,-3414,3226,984,2526,3171,146,1981,249,-248,2053,1444,219,3141,-1397,-9}
     },
     {
      506,
      1713,
      {6619,-1070,-2012,1408,1537,-7,-2247,-2986,1551,-1327,-2877,3113,52,-397,-4314,-1855,-730,387,-197,1757,-2241,940,2256,496,4543,-304,-1340,-883,921,-2343,2718,-1360}
     },
     {
      506,
      -995,
      {1422,-987,3830,-2551,-2199,1454,-2169,-1412,1143,800,2524,-3118,2718,1214,3675,2811,314,-1437,933,-1450,-856,-1106,-2604,-1965,903,-1227,557,1647,124,-874,-1840,1400}
     },
     {
      506,
      -2117,
      {251,84,1987,-175,-1797,4596,1970,1968,-1015,2316,-4583,-2842,-125,-145,-387,-4069,-2564,-609,1102,681,-38,107,89,1745,970,-322,-837,2523,1468,477,2223,-2485}
     },
     {
      506,
      612,
      {-344,44,-1358,-2061,-3974,4241,-3096,-2688,-2245,-954,-2553,575,-2136,-552,-1252,-866,1738,2229,170,-2133,2560,1342,2381,-579,2209,-1539,627,2677,2658,-884,736,238}
     },
     {
      506,
      -1316,
      {1605,251,5968,1993,692,-4864,-1758,-953,5533,546,-1367,-4841,554,-519,3689,2721,143,-2320,264,-2411,5075,-1412,-878,-1885,1403,-633,-2021,-1165,-1956,-1846,1638,2434}
     },
     {
      506,
      1244,
      {1547,-672,675,-2216,-3610,419,-3380,-5679,5484,844,1261,-1625,757,-2532,937,-71,1386,-3621,-1377,-1122,948,815,2735,-1900,856,958,-570,-225,3295,739,-1999,-1260}
     },
     {
      506,
      -1994,
      {70,-35,2234,-321,-386,-172,422,-2256,-1117,-1580,-2404,-666,-4975,-1070,968,-6523,-1491,6055,-2562,-1111,5887,-2302,175,6146,170,-1950,3023,3177,120,4529,-286,-2213}
     },
     {
      506,
      1340,
      {191,71,-1211,1485,2994,3337,1796,1764,2729,739,233,3837,-739,1842,2139,-6671,518,314,-6282,-1859,-166,-6927,-29,-158,-3612,1650,1696,-713,1185,-285,-2469,-536}
     },
     {
      506,
      1915,
      {-175,630,-2192,-2070,11,-1719,-2394,-1138,3365,956,2307,-3298,-635,-251,4873,-4514,-107,587,-108,766,1711,3155,772,-3422,-1078,-402,890,-368,-181,-2219,-1585,1604}
     },
     {
      506,
      -912,
      {2944,546,3485,-1436,75,-715,1417,3039,1981,-1312,206,-731,2865,424,-109,-3118,2125,-6036,-6565,3143,1005,3135,1198,-3468,-1426,63,1392,-564,-424,-1002,386,5931}
     },
     {
      506,
      -2072,
      {721,16,-5292,908,-5770,-1679,414,-2772,346,7295,1537,-323,4720,-1993,-1013,4411,892,2009,-1241,-1515,-3078,1658,-661,68,2173,-1644,-1635,1700,-2157,675,2744,-381}
     },
     {
      506,
      -2219,
      {2259,429,1697,1526,-2576,916,1989,701,-424,3060,-597,-4344,1331,4015,3744,-3021,-2693,-412,3519,-254,-2965,-2879,-2086,185,1078,-357,81,-1028,1340,-1329,1669,2849}
     },
     {
      506,
      -1469,
      {-264,217,3550,-3323,-2735,1877,-2496,-6218,105,4338,2048,1162,4941,-372,-1200,3623,-1112,384,891,185,-877,1209,-850,132,-337,-2001,-1469,1422,-467,-564,1510,1605}
     },
     {
      506,
      -4425,
      {444,-202,1013,289,-1349,2022,231,-583,3347,575,-80,5548,1593,-1541,3070,4234,-1779,493,4887,-2790,-3604,2448,-3218,-3777,118,-54,528,-238,-1176,-2585,385,6172}
     },
     {
      506,
      2080,
      {2464,1956,-915,980,560,488,-1167,-344,-1072,-1486,1842,-3270,-1757,2888,-5118,-683,653,-2863,-739,2611,-3392,1098,2549,-1019,-119,-173,-3495,2221,279,-56,376,917}
     },
     {
      506,
      4651,
      {1521,-280,288,-1836,1971,840,312,3372,657,1204,3688,-527,1754,875,-855,-15243,-1384,-1257,-1293,1981,720,-3415,4301,-768,-647,1124,1815,-5815,3230,-2081,435,-2541}
     },
     {
      506,
      2102,
      {1310,-640,-1423,-731,4233,1583,-602,1548,2868,-306,-1724,-1248,-1220,-1731,-1620,-1913,2005,-6126,-421,1496,-2284,-3196,870,-452,-822,990,437,-1403,280,1744,1773,844}
     },
     {
      506,
      -472,
      {-384,-280,5318,-576,656,2496,-486,-1113,-4853,106,-1149,2650,-255,907,-624,-186,-1409,-122,1697,2681,-990,-4050,1176,1052,2526,-1643,635,-984,-1442,2041,1163,3479}
     },
     {
      506,
      -629,
      {2052,-689,-489,1629,-1226,2043,3356,-5836,-1148,-374,-1444,-4944,-1150,821,-361,1855,803,-1529,2162,-140,1075,745,-694,2038,1577,-1188,249,-631,305,-1289,-515,-608}
     },
     {
      506,
      -168,
      {8,322,839,-1876,-1510,2769,-103,-1318,-3182,3426,2560,-148,100,1218,2741,-1290,1429,-1804,-219,-2743,1070,-1004,-407,961,-920,1557,116,-1074,-862,984,-1404,6859}
     },
     {
      506,
      -2803,
      {-803,11579,-1033,-602,-232,914,630,-922,-913,-1708,-398,1099,447,-46,215,-1507,-961,1491,1873,-970,-85,-2353,-2558,-835,1758,983,359,672,-2606,-4216,851,5249}
     },
     {
      506,
      3675,
      {-1123,1046,-4735,807,-459,-1137,1329,-4660,-3527,-2867,151,889,1144,-2369,-2048,-2318,1017,3403,-940,-1476,-220,-182,3289,1357,-1114,1683,-2781,-1060,2309,2441,1039,-6363}
     },
     {
      506,
      28,
      {3183,124,-992,-246,-2201,-793,4237,-1602,1389,675,1741,-1367,-5972,-2143,-2472,677,-38,782,235,1713,-1293,1538,-1753,846,-2996,-951,46,3523,632,2821,357,-2832}
     },
     {
      506,
      1253,
      {-60,-62,-3434,-647,3199,24,-601,610,-1213,-419,-4044,2191,1235,2801,-7869,-1645,2149,-4604,6851,268,-1613,-563,-1218,-21,-2008,3124,293,-1475,653,-1432,3898,5149}
     },
     {
      506,
      1498,
      {1523,-11012,1692,-379,804,-1858,-782,-926,-783,-802,2058,-485,-530,-681,-1066,120,-2060,-82,155,1274,-1341,-375,505,-1293,1618,368,-887,732,-25,261,2238,-1424}
     },
     {
      506,
      419,
      {531,219,-104,-1438,-1102,-537,1388,756,-4057,-610,3031,400,-7094,-272,4543,538,432,-70,-57,-2127,1298,534,449,386,-54,-941,-1578,2788,300,-366,-1418,-1190}
     },
     {
      506,
      101,
      {1940,-3329,-225,935,-1480,106,461,-484,-1066,-629,-2278,99,-68,2134,-270,-781,1993,-442,1050,-503,374,457,1218,-170,324,1992,-1689,-1160,-922,-51,3258,5403}
     },
     {
      506,
      -761,
      {-755,-110,-1883,-1003,109,-251,-688,3,318,500,1124,-4755,763,4108,-1418,1083,-2476,7829,693,-522,-2681,-553,439,1256,1214,-468,-3596,249,-266,-1427,980,-3130}
     },
     {
      506,
      428,
      {3238,1126,-2124,1656,-2943,1574,-1323,-2648,-163,-2969,-1281,-2806,4477,-953,1804,-4444,1684,5529,297,212,-3350,-2849,-572,2908,1699,-765,-1470,-1894,869,1602,2370,-2667}
     },
     {
      506,
      -2154,
      {2404,247,-3956,2052,-2784,-404,-4351,-370,-323,1946,-476,-1800,872,37,2840,2652,-1121,-2032,352,1708,1152,1782,-99,-1206,2445,-1630,2935,-726,-972,-925,2675,1937}
     },
     {
      506,
      716,
      {1666,-344,-307,276,749,623,141,-3664,-1349,6347,687,-4335,87,-295,-5230,-2554,140,2283,-5277,-739,611,204,-95,3078,-4605,-1208,3393,603,1731,1256,486,-696}
     },
     {
      506,
      488,
      {-8,-154,-1902,-1853,-1252,4057,1820,1574,-5222,-2658,621,6083,2286,-570,-4877,631,-896,812,305,1626,-1684,1659,3343,1520,-59,-1010,1096,-1188,29,163,-2972,772}
     },
     {
      506,
      -1921,
      {5419,-868,-2865,-1731,-2785,348,-872,-663,1246,-3286,2098,-576,4211,-2079,3416,3633,567,1111,-872,132,198,2471,-1809,2658,-1865,-1522,1621,-167,-1241,-637,13,2482}
     },
     {
      506,
      550,
      {1629,123,1080,-320,860,-1852,-989,-1956,1657,-2156,21,-1524,3998,-43,303,-7171,-722,976,5426,-529,271,-6154,215,1333,5835,-75,-1587,-6088,1056,448,3569,6608}
     },
     {
      506,
      477,
      {-1489,201,718,200,-2467,639,-2769,-2747,-2339,3075,-798,4097,-719,-1493,-4660,-2638,-506,3148,6546,-1393,-2408,-2469,2336,820,893,-502,-1812,-2591,1004,298,3921,-7625}
     },
     {
      506,
      -1668,
      {-1932,318,-857,199,-2576,4601,-1497,-3420,2774,1765,-2646,-411,1287,-4881,2104,-546,-2892,80,3317,-2367,764,-33,20,1637,820,-837,913,1879,-729,2027,637,-7380}
     },
     {
      506,
      -1592,
      {3139,-1424,4058,4684,-394,2852,2120,-6759,136,-239,-814,-496,4223,-1881,1380,2188,37,897,1993,-3407,1337,-361,-1577,662,-1952,-3061,1809,-1093,-351,-986,-2054,-2315}
     },
     {
      506,
      162,
      {-207,96,-988,-3509,-960,3077,-796,2533,-2427,2147,-351,-2744,-3594,-350,332,-1977,3807,1349,4363,-2359,6,-687,1858,-2013,246,-1368,496,788,13,-204,-702,492}
     },
     {
      506,
      171,
      {-896,795,33,-1827,562,1701,464,-117,-560,-1543,-562,-2900,-402,2868,1078,4561,984,-122,-6213,-795,580,1504,1392,-907,-1814,28,-484,1286,655,494,-3975,-937}
     },
     {
      506,
      -560,
      {258,897,852,1242,-2860,2827,1798,-789,-3020,-5390,-1518,1214,-3355,-2886,711,-1421,1212,1448,3094,668,-2182,72,-1347,-374,1248,-1257,421,3009,-146,1103,2195,291}
     },
     {
      506,
      -365,
      {1365,623,998,2516,-68,4650,-234,-4231,194,-2067,-401,5938,-1253,-3028,-2732,771,498,1241,-1699,-1207,-1621,31,839,185,1477,-520,-1020,-77,-743,-2056,687,-1279}
     },
     {
      506,
      1499,
      {-2061,-807,-2353,2067,1783,2092,-1319,2665,3550,-4074,-424,3576,-4165,-926,260,33,-516,-1758,-1458,191,-802,2341,283,-2361,-792,34,564,1641,2759,-2555,-1108,2277}
     },
     {
      506,
      -500,
      {3410,270,3690,-1330,-1213,3138,-11,197,-3228,-4127,458,2475,3022,-252,1742,1002,1088,1334,-1576,-768,-4150,2332,-34,510,-2077,-1116,-239,528,-1010,-945,1891,-90}
     },
     {
      506,
      1093,
      {651,141,-3074,-1076,-76,2745,2541,-4367,-329,-264,1838,1699,-3660,-849,-3619,2707,-987,-612,3437,275,-489,-3198,-1014,2017,175,1503,534,-596,954,342,-1781,-303}
     },
     {
      506,
      -719,
      {936,318,-3995,5,-538,3464,1261,-1423,624,4160,-252,1802,1611,-1385,-1367,-694,1816,-1338,-1273,-3037,-180,-1279,-34,505,-5274,-233,-878,4984,-526,2350,-145,-804}
     },
     {
      506,
      -1801,
      {3550,1850,788,-1043,-4585,3776,4181,-3291,2024,1890,19,822,1079,-2633,-1321,1913,-1856,-249,-1441,-2444,858,-1918,6,178,-975,694,92,-1335,-275,-643,806,-1427}
     },
     {
      506,
      757,
      {1832,-834,1303,-97,457,5165,-4227,-745,-2959,-3981,-3636,-1167,2424,821,1104,-3547,593,367,291,-2198,2467,179,1784,374,-1820,-321,1279,493,846,1187,-105,1967}
     },
     {
      506,
      -1411,
      {2890,-75,6186,640,-1780,-303,2581,1686,695,-202,3853,-1146,-1729,-2820,3003,-3797,-4494,-6704,515,3671,2835,1638,-315,-3318,68,1587,1179,-1185,-806,-1450,234,4110}
     },
     {
      506,
      -1534,
      {-4063,234,922,2628,1673,977,-743,-2919,-4425,311,-1503,2631,1277,483,5829,-3374,-3504,-301,-2892,1191,-837,2627,-161,1960,-754,-1771,1835,1342,-144,-781,-1442,-3519}
     },
     {
      506,
      -8782,
      {32718,-31278,19822,10420,12590,-32716,23050,-1924,11979,-31018,-32716,32716,1694,-21066,-32716,29649,8195,12063,11731,-9933,4473,-3785,-7111,11030,-7196,2373,-1726,-9350,-3565,-4995,-6709,-4979}
     },
     {
      506,
      0,
      {25283,32735,32716,32722,-6160,-32723,25132,-23983,4489,32715,16832,27547,-32716,-30391,-26519,32716,2471,29931,-13024,-27007,31265,19025,-9309,20153,-16631,8676,32717,9123,-8687,6996,3394,3228}
     },
     {
      506,
      -2072,
      {12976,-32717,9978,32713,-3657,-32719,32718,-17669,26922,-12626,-9157,31769,-18635,-448,2874,-24093,6131,-1033,22180,-7391,17954,-15596,4279,-3364,7686,317,3633,-9476,-859,-4365,3782,-1784}
     },
     {
      506,
      -11898,
      {32715,-32714,32716,-30862,5760,-32717,31597,-30710,-6391,31968,-16241,32715,-32714,-12945,31265,32717,-9786,7734,-9044,-24997,10073,7016,-2978,11379,-16785,2660,-6536,-4276,-5093,279,-10309,3543}
     },
     {
      506,
      -3980,
      {-32721,-30592,-24050,-30924,32720,26007,22863,30724,30158,32720,-32718,32719,-26276,28666,-24091,10517,22,32717,-30829,-22263,-11165,-8076,50,4431,-4973,-9217,-8611,-12167,1324,6869,-19521,-7672}
     },
     {
      506,
      -6871,
      {26420,-32717,12127,-24332,17613,-9043,18110,-5713,-18306,32718,-28353,-28665,-32488,-6332,-177,16721,-1722,21704,-8245,-18988,6525,658,2852,20905,-6078,870,-1472,3077,-5658,461,-15008,893}
     },
     {
      506,
      390,
      {32716,-32717,25457,-18212,12300,-32720,32393,-32713,20662,24703,-22657,31204,-32715,-2183,-30163,32719,17036,9916,-26340,-6330,6824,20324,-918,1467,-20222,8359,-6884,3780,-1175,-1901,-7817,1000}
     },
     {
      506,
      0,
      {31373,32653,32717,32716,8988,-32724,32714,-27846,-24781,9536,-20610,32708,-26976,-8684,-5323,32720,6643,32723,12042,-8689,18791,-816,1094,16807,-14248,6481,7916,-1607,-740,2431,-2708,-5114}
     },
     {
      506,
      -3275,
      {32716,-32716,32716,-12806,-32136,21235,32486,-32136,5656,32544,32717,32717,-29416,-7181,27657,23079,-13860,32188,-29892,-494,-9155,-974,-13380,-7155,-12952,4840,-5610,-506,-7687,2029,-4514,7114}
     },
     {
      506,
      -1189,
      {-21523,-32721,-24998,11473,32705,-32720,11507,-7520,27455,-32718,-32719,-19580,31742,24850,15818,-3986,11818,-8591,4255,-10261,12980,-1713,2174,9926,-5693,-788,5487,541,2314,-1574,-1636,-10380}
     },
     {
      506,
      -8765,
      {32716,32686,12568,-5046,2666,-32716,3660,-32193,32710,-31355,-32725,32710,-31371,-32724,-31536,32702,32706,-10280,-9012,-16914,-6890,25729,-6195,-13418,-12620,7794,-21005,13845,-10414,-2211,-4397,939}
     },
     {
      506,
      -8962,
      {32719,13067,32710,-314,-32718,-32720,32719,-32719,14658,27510,32717,32713,-27468,-27563,-14557,32717,-6760,11774,-31810,5846,-9838,25497,-10209,-5870,-26483,256,592,2585,-8796,-9470,-1691,14016}
     },
     {
      506,
      -871,
      {32449,-28877,18731,-29308,-16284,32718,2142,-16062,30855,32719,13381,32719,-27454,-1422,-26915,18558,1373,32545,-29763,-19326,-6718,7319,-2401,6227,-133,-1175,1141,-1839,-4543,5583,-6157,3356}
     },
     {
      506,
      0,
      {32721,29959,32714,-9793,32717,-30462,26552,-19481,32716,32721,-32721,28672,-20345,-21533,-16317,11690,28202,-16232,23883,-21254,32716,31714,-11711,28234,5096,12990,16012,15461,-9642,2841,-1352,5269}
     },
     {
      506,
      476,
      {-32720,-25576,-28214,32708,32707,-21534,28594,32712,32708,-24757,-32723,-32720,31589,16700,-504,-22864,17666,-29162,23976,158,32238,-12004,5797,13717,9884,1230,9944,-6947,8535,6001,4582,-12269}
     },
     {
      506,
      -5707,
      {32715,-32718,29794,-5142,-29021,-32719,32719,-32714,16175,32134,24716,28636,-32716,-11774,-828,32718,6794,25739,-20626,-9405,13739,11053,-8153,7422,-31791,3999,-1493,3255,-8155,-2503,-9327,3882}
     },
     {
      506,
      -13348,
      {27300,27691,24239,27967,16968,-32721,28816,-16317,27264,-22853,-32719,32716,-32717,-19040,-32718,4396,9457,17442,-15367,-17647,4295,6904,-1635,7268,-783,-2990,-11280,-1656,-9983,-567,-7621,-7152}
     },
     {
      506,
      -15742,
      {-4954,32718,32707,32706,24441,-32734,30819,-31283,32708,-24826,-32728,13822,9092,2192,-21599,4418,6532,-12355,-14361,-6992,-4498,1023,-6813,-16934,-6687,-5048,-6316,-4334,-6656,-13559,-2187,-5983}
     },
     {
      506,
      -5444,
      {24767,32720,25339,19162,17860,-32715,32721,-5905,-30925,-1317,-32712,-456,-24251,-23158,-21623,20379,2179,192,15498,-9395,4185,-4774,-1490,10111,-8428,-1249,6243,-3689,-3225,297,-5005,-3183}
     },
     {
      506,
      -7436,
      {30041,32689,25930,30676,19139,-32723,31255,-4927,-31259,-9547,-32718,32708,-32718,-31557,-32717,23258,11285,-16129,14862,-11445,-512,4130,1100,4131,-6243,2331,-2377,1196,-6371,-201,-1475,-932}
     },
     {
      506,
      -20126,
      {32721,32695,32704,32705,-32722,-32723,32718,-32702,32711,-32721,32717,-32534,32717,-30385,21170,32495,-21211,-21650,-15907,-14217,-3032,10715,-12308,-7113,-28475,986,13479,-8556,-11964,-29144,-3618,11696}
     },
     {
      506,
      -14926,
      {32715,31968,32709,-15189,12179,-32724,32717,-32715,-752,32336,-32717,32710,-32716,-32092,-18320,32710,-5634,-9850,-4999,-522,-668,15536,5676,-11815,-10283,-3096,6085,-3279,-9699,-13731,-7402,-71}
     },
     {
      506,
      -5545,
      {32347,32711,32709,32304,-15855,-32719,32720,-32716,-31936,-32718,7255,32718,-26087,-24829,-29767,32718,-3779,755,5911,242,985,-8830,1769,-3088,-13803,639,-3300,-8897,-7816,-7168,-1427,-102}
     },
     {
      506,
      -16786,
      {-9202,32711,6036,32706,14747,-32734,32712,-30071,32712,-32721,-32724,-26096,25670,10802,31862,3445,-4262,-3701,-7993,-10623,11781,7234,828,-19592,-17820,-11674,8576,-1794,-8802,-14621,-7301,-2320}
     },
     {
      506,
      -9451,
      {32719,-32710,-20495,22236,-32712,-32714,10008,-1316,-8833,-22584,32720,32722,-27698,-30951,-5837,31313,1298,32711,10194,-10738,13585,1496,-13011,4734,-1883,5573,3693,-2414,-7542,2418,-5183,-1342}
     },
     {
      506,
      -7039,
      {32720,32719,8373,-32712,-32717,32720,24477,-32717,32716,32716,32719,30860,-21365,-6416,-8571,-1997,-32712,27376,-31710,1205,-14635,5491,-4202,-17246,-9228,-1534,-3975,5675,-7525,-13222,-1610,7887}
     },
     {
      506,
      -6480,
      {32719,-746,23105,28899,-32717,-32717,31951,-32716,-29082,9462,32718,32718,-25100,-27448,-3254,31863,-11855,25116,-13182,15513,8857,4931,-3525,-10820,-11785,-2145,12800,-6135,-5868,-6213,1861,5956}
     },
     {
      506,
      -3346,
      {32716,32713,3350,16203,4324,-32722,32715,-30515,32714,-25288,-12677,30501,-22890,30572,8226,10935,3682,-11461,-21760,-21372,-2393,26103,-417,-23721,365,-2246,-5587,5609,-4385,-10248,4529,6460}
     },
     {
      506,
      -3078,
      {32718,-10609,23451,28373,-2367,-32633,32713,-32559,-32668,-3626,-14700,32707,-32715,-32717,-32717,32611,7577,17178,-14633,-6808,10777,2755,626,25648,-21215,6268,2333,-3770,-2022,-638,-8313,-3019}
     },
     {
      506,
      -9906,
      {32718,-6974,30778,19869,-32716,-32716,32719,-32704,27309,-32715,9542,32717,-24362,-32714,-32338,31234,26271,20833,-29921,-4459,3922,15636,-10623,-1031,-24481,2730,725,-2792,-13238,-6947,-4678,1077}
     },
     {
      506,
      -9847,
      {32688,32701,32518,10627,-32720,-32725,30744,-32719,22425,-32721,12526,32713,-31910,-31954,-31718,32714,3020,2182,-31626,-2857,-4723,28356,-5072,-9093,-13231,8767,-9689,5975,-13620,-6616,-3599,569}
     },
     {
      506,
      -215,
      {8729,32709,6772,32711,26288,-32725,32715,-15619,10077,-29587,-29138,-32721,32713,1379,-7263,11986,-9094,-31858,13271,1475,3236,-18322,7699,-5062,-6504,2614,2243,-15730,4235,-15627,5555,-6538}
     },
     {
      538,
      -32713,
      {18210,32717,32717,23867,32718,32717,32718,32717,32717,32719,32717,32717,32719,32719,32720,32718,17886,24157,7770,8936,32717,32717,32721,17711,32715,32718,32717,-31267,32716,32715,32567,29247}
     },
     {
      570,
      -32706,
      {-9218,-9556,-710,7014,-6497,26032,20554,32722,-27822,-25790,32686,32724,-30758,-27529,32721,32720,21542,30641,32718,25124,32724,32721,32721,32719,32727,32728,32726,32722,32723,32729,32727,32724}
     },
     {
      602,
      -31862,
      {25895,13812,12350,-22468,19180,4039,-32719,-32719,19672,-10148,-32718,6015,32648,-1348,-10455,32719,-32720,6767,26185,32714,2604,32458,32495,32712,32719,32722,32720,32716,32724,32727,32726,32723}
     },
     {
      634,
      -32702,
      {32714,22402,7431,6654,32716,32711,31888,32702,32721,32726,32721,32717,32724,32726,32723,32720,32718,32727,32730,32728,32721,32723,32727,32728,32722,32722,32724,32725,32716,32720,32721,32724}
     },
     {
      666,
      -2851,
      {23888,32720,32721,28268,20833,32721,32724,29968,32719,32721,32723,32721,32719,32720,32719,32718,-32473,-30467,-32722,-32725,-23709,-10437,-32720,-32724,24121,-8749,-32719,-32721,20354,-20977,-32716,-32719}
     },
     {
      698,
      -32723,
      {32733,32731,32720,32717,32727,32730,32719,14478,32728,32729,32718,16516,32727,32725,32717,-12898,20490,-32096,-32722,-19800,-896,-32720,-32724,28956,-32722,-32719,-29972,18935,-32719,-32718,-32722,2383}
     },
     {
      730,
      -30307,
      {-32719,-30123,27188,32719,-32719,-32723,-14699,32722,-32718,-32719,-32720,32719,-32717,-32718,-32474,-32718,32725,32722,32710,-17602,32725,32723,32718,22176,32725,32728,32728,32726,32717,32725,32728,27106}
     },
     {
      762,
      -12314,
      {-14562,-32722,11567,32724,-32719,32716,32724,32730,27265,32725,32732,32736,26623,32726,32730,32724,32726,32728,32727,32725,32731,32729,32727,32726,32730,32729,32727,32724,32724,32723,32721,32720}
     },
     {
      538,
      -32709,
      {2312,6525,108,-7604,3676,-4714,-16284,-15268,-6724,-9808,-30617,28902,-11312,-23851,-29769,15875,-2922,8889,-2016,-13205,32718,32721,32724,32719,32722,32724,32724,32711,32722,32723,32721,32718}
     },
     {
      570,
      -32713,
      {21985,-4400,-8529,-9861,32715,32712,9515,32719,32714,32713,32720,32721,-3844,32719,32720,32723,-4876,-716,12294,1321,32720,32718,32063,32718,32722,32721,32720,32720,32722,32724,32723,32720}
     },
     {
      602,
      9351,
      {2862,6456,-20138,-32722,14377,3257,-23574,-32721,32716,-24149,-29658,-32723,30908,-22426,-31486,-32114,-32725,-32725,-32720,18025,-32728,-32727,-27961,16568,-32726,-32725,-23013,3930,-32723,-32723,-26373,-15980}
     },
     {
      634,
      -32697,
      {32718,23457,19398,27324,32720,32255,31911,32710,32721,32722,32721,32718,32718,32721,32722,32719,32720,32726,32726,32724,32722,32723,32725,32725,32723,32722,32724,32724,32713,32721,32720,32722}
     },
     {
      666,
      -678,
      {4711,-20489,-32721,-32722,-32717,-32721,-32723,-32725,-32719,-32722,-32723,-32726,-32713,-32719,-32719,-32722,-32726,-32733,-32732,-32725,-32731,-32736,-32738,-32732,-32731,-32735,-32737,-32730,-32725,-32731,-32730,-494}
     },
     {
      698,
      -32709,
      {-19093,-2961,32721,31916,-18115,32721,32724,32724,32718,32723,32728,32729,32717,32725,32728,32727,32715,32717,32723,32722,32718,32722,32724,32721,32725,32724,32720,32720,32721,32718,32717,32720}
     },
     {
      730,
      -30983,
      {32718,780,-23783,-7912,32719,32721,-21067,7626,29612,32721,27995,32717,9197,32719,32719,32717,-26964,16701,-10463,28515,32716,32720,21271,28975,32721,32723,32723,32721,32718,32721,32719,32720}
     },
     {
      762,
      -29297,
      {18541,6897,17043,32725,10224,14663,25798,32722,32714,25303,22085,32717,32718,32694,32715,32297,32723,32718,32718,32719,32721,32708,32717,32716,32711,32713,32714,32718,32572,32000,32717,25532}
     },
     {
      538,
      -8196,
      {9532,14725,15174,4133,14760,-5265,32718,32719,-5056,32718,32721,32721,6499,32719,32722,32721,-3549,-20718,-15182,-26463,29514,11312,-32717,-32719,32720,32719,-32719,-32721,32718,32253,-26191,-32691}
     },
     {
      570,
      -32704,
      {12541,-18212,-27038,-15891,32725,32726,32727,32717,32725,32735,32733,32721,32727,32735,32723,32721,11737,-5283,-4711,-3162,12809,-27100,-32717,9865,17977,-32721,-32718,-8579,30820,203,-3692,-31125}
     },
     {
      602,
      2366,
      {-32719,-32723,-32724,-32725,-32719,-32722,-32728,-32730,-15856,-32725,-32730,-32732,-3712,-32726,-32728,-32729,-32723,-32723,-32720,-22025,-32729,-32729,-32729,8280,-32731,-32734,-32727,24475,-32732,-32731,-32723,8698}
     },
     {
      634,
      -32700,
      {26332,11972,8934,14700,31921,28503,28031,31384,32714,32721,32720,32715,32720,32723,32724,32719,32025,32724,32725,32725,32719,32720,32724,32725,32719,32719,32723,32723,31606,32719,32720,32721}
     },
     {
      666,
      -3463,
      {32719,32722,32725,24111,31331,24493,-21122,-31443,32718,-9333,-32689,-32719,16155,-32652,-32715,-32717,-32022,-32724,-32729,-32733,-32720,-32725,-32731,-32732,-32722,-32723,-32729,-32727,-31242,-32721,-32724,-32728}
     },
     {
      698,
      -32426,
      {-32718,-32717,-29478,32064,-8472,-32717,32722,32732,32716,14470,32728,32737,32715,32720,32728,32730,32727,32722,32724,32721,32733,32727,32725,32723,32737,32728,32725,32720,32726,32720,32718,32719}
     },
     {
      730,
      -32705,
      {32724,32728,32731,32732,32723,32730,32731,32728,32722,32729,32730,32726,32719,32724,32726,32724,32721,27235,17254,32718,32718,32714,22907,-2451,32719,31824,-32715,-32724,32723,31738,-31323,-4636}
     },
     {
      762,
      -25791,
      {-17183,30,32716,32728,15944,-259,32723,32731,752,-20992,18276,32736,32548,32717,32727,32726,32728,32729,32730,32727,32732,3