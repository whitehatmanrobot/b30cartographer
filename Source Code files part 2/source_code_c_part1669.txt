axSvcHandle,FAX_PORT_QUERY);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxClose() should succeed.\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.  \r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (FAX_PORT_SET).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,FAX_PORT_SET);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxClose() should succeed.\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.  \r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

	fnWriteLogFile(TEXT("Valid Case (GENERIC_ALL).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,GENERIC_ALL);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxClose() should succeed.\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.  \r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (GENERIC_EXECUTE).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,GENERIC_EXECUTE);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxClose() should succeed.\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.  \r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
	
	fnWriteLogFile(TEXT("Valid Case (GENERIC_WRITE).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,GENERIC_WRITE);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxClose() should succeed.\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.  \r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

	fnWriteLogFile(TEXT("Valid Case (GENERIC_READ).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,GENERIC_READ);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxClose() should succeed.\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.  \r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }




	if (bTestLimits)	{
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("Invalid Case (MAX_DWORD).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,MAX_DWORD);
		if (bRetVal) {
	    fnWriteLogFile(TEXT("FaxAccessCheck() returned TRUE.  This is an error.  FaxAccess() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
	    }
	    else {
			if (GetLastError() != ERROR_INVALID_PARAMETER)	{
				fnWriteLogFile(TEXT("GetAccessCheck() returned 0x%08x.  This is an error.  FaxAccessCheck() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
				
			}
			else	{
				(*pnNumCasesPassed)++;
				dwFuncCasesPass++;
			}
		}
	}
	
    if (bDoW2KFails)		{
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

	    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	    if (g_ApiInterface.FaxAccessCheck(NULL, FAX_READ)) {
			fnWriteLogFile(TEXT("FaxAccessCheck() returned TRUE.  This is an error.  FaxAccess() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
		}
		else if (GetLastError() != ERROR_INVALID_HANDLE) {
	        fnWriteLogFile(TEXT("FaxAccessCheck() returned 0x%08x.  This is an error.  FaxAccessCheck() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
	    }
	    else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
		}

    
		// Disconnect from the fax server
		g_ApiInterface.FaxClose(hFaxSvcHandle);
	
	    (*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

	    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	    if (g_ApiInterface.FaxAccessCheck(hFaxSvcHandle, FAX_READ)) {
			fnWriteLogFile(TEXT("FaxAccessCheck() returned TRUE.  This is an error.  FaxAccessCheck() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
		}
		else if (GetLastError() != ERROR_INVALID_HANDLE) {
	        fnWriteLogFile(TEXT("GetAccessCheck() returned 0x%08x.  This is an error.  FaxAccessCheck() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
	    }
	    else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
		}
	}
fnWriteLogFile(TEXT("$$$ Summery for FaxAccessCheck, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
}










BOOL WINAPI
FaxAPIDllTest(
	LPCWSTR  szWhisPhoneNumberW,
	LPCSTR   szWhisPhoneNumberA,
    LPCWSTR  szServerNameW,
    LPCSTR   szServerNameA,
    UINT     nNumCasesLocal,
    UINT     nNumCasesServer,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	DWORD	 dwTestMode
)
{
    LPCTSTR  szServerName;
    UINT     nNumCases;

#ifdef UNICODE
    szServerName = szServerNameW;
#else
    szServerName = szServerNameA;
#endif

    if (szServerName) {
        nNumCases = nNumCasesServer;
		fnWriteLogFile(TEXT("WHIS> REMOTE SERVER MODE:\r\n"));
    }
    else {
        nNumCases = nNumCasesLocal;
    }

    // FaxConnectFaxServer()
	if (dwTestMode==WHIS_TEST_MODE_LIMITS)
	{
		fnFaxConnectFaxServer(szServerName, pnNumCasesAttempted, pnNumCasesPassed,TRUE);
	}
	else
	{
		fnFaxConnectFaxServer(szServerName, pnNumCasesAttempted, pnNumCasesPassed,FALSE);
	}


    // FaxFreeBuffer()
    fnFaxFreeBuffer(szServerName, pnNumCasesAttempted, pnNumCasesPassed);
	
	// FaxCompleteJobParams()
	fnFaxCompleteJobParams(szServerName, pnNumCasesAttempted, pnNumCasesPassed,FALSE,TRUE);


	// FaxAccessCheck()
	if (dwTestMode == WHIS_TEST_MODE_DO_W2K_FAILS)	{
		fnFaxAccessCheck(szServerName, pnNumCasesAttempted, pnNumCasesPassed,FALSE,TRUE);
	}
	else if (dwTestMode == WHIS_TEST_MODE_LIMITS)	{
		fnFaxAccessCheck(szServerName, pnNumCasesAttempted, pnNumCasesPassed,TRUE,FALSE);
	}
	else	{
		fnFaxAccessCheck(szServerName, pnNumCasesAttempted, pnNumCasesPassed,FALSE,FALSE);
	}
		
	

    // FaxClose()
    fnFaxClose(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    if ((*pnNumCasesAttempted == nNumCases) && (*pnNumCasesPassed == *pnNumCasesAttempted)) {
        return TRUE;
    }
    else {
        return FALSE;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legacywin32\xml\dllapi.h ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

  dllapi.h

Abstract:

  This module contains the global definitions

Author:

  Steven Kehrli (steveke) 8/28/1998

--*/

/*++

  Whistler Version:

  Lior Shmueli (liors) 23/11/2000

 ++*/

#ifndef _DLLAPI_H
#define _DLLAPI_H

#include <winfax.h>

typedef struct _API_INTERFACE {
    HINSTANCE                      hInstance;
    PFAXABORT                      FaxAbort;
    PFAXACCESSCHECK                FaxAccessCheck;
    PFAXCLOSE                      FaxClose;
    PFAXCOMPLETEJOBPARAMSW         FaxCompleteJobParamsW;
    PFAXCOMPLETEJOBPARAMSA         FaxCompleteJobParamsA;
    PFAXCONNECTFAXSERVERW          FaxConnectFaxServerW;
    PFAXCONNECTFAXSERVERA          FaxConnectFaxServerA;
    PFAXENABLEROUTINGMETHODW       FaxEnableRoutingMethodW;
    PFAXENABLEROUTINGMETHODA       FaxEnableRoutingMethodA;
    PFAXENUMGLOBALROUTINGINFOW     FaxEnumGlobalRoutingInfoW;
    PFAXENUMGLOBALROUTINGINFOA     FaxEnumGlobalRoutingInfoA;
    PFAXENUMJOBSW                  FaxEnumJobsW;
    PFAXENUMJOBSA                  FaxEnumJobsA;
    PFAXENUMPORTSW                 FaxEnumPortsW;
    PFAXENUMPORTSA                 FaxEnumPortsA;
    PFAXENUMROUTINGMETHODSW        FaxEnumRoutingMethodsW;
    PFAXENUMROUTINGMETHODSA        FaxEnumRoutingMethodsA;
    PFAXFREEBUFFER                 FaxFreeBuffer;
    PFAXGETCONFIGURATIONW          FaxGetConfigurationW;
    PFAXGETCONFIGURATIONA          FaxGetConfigurationA;
    PFAXGETDEVICESTATUSW           FaxGetDeviceStatusW;
    PFAXGETDEVICESTATUSA           FaxGetDeviceStatusA;
    PFAXGETJOBW                    FaxGetJobW;
    PFAXGETJOBA                    FaxGetJobA;
    PFAXGETLOGGINGCATEGORIESW      FaxGetLoggingCategoriesW;
    PFAXGETLOGGINGCATEGORIESA      FaxGetLoggingCategoriesA;
    PFAXGETPAGEDATA                FaxGetPageData;
    PFAXGETPORTW                   FaxGetPortW;
    PFAXGETPORTA                   FaxGetPortA;
    PFAXGETROUTINGINFOW            FaxGetRoutingInfoW;
    PFAXGETROUTINGINFOA            FaxGetRoutingInfoA;
    PFAXINITIALIZEEVENTQUEUE       FaxInitializeEventQueue;
    PFAXOPENPORT                   FaxOpenPort;
    PFAXPRINTCOVERPAGEW            FaxPrintCoverPageW;
    PFAXPRINTCOVERPAGEA            FaxPrintCoverPageA;
    PFAXREGISTERROUTINGEXTENSIONW  FaxRegisterRoutingExtensionW;
    PFAXREGISTERSERVICEPROVIDERW   FaxRegisterServiceProviderW;
    PFAXSENDDOCUMENTW              FaxSendDocumentW;
    PFAXSENDDOCUMENTA              FaxSendDocumentA;
    PFAXSENDDOCUMENTFORBROADCASTW  FaxSendDocumentForBroadcastW;
    PFAXSENDDOCUMENTFORBROADCASTA  FaxSendDocumentForBroadcastA;
    PFAXSETCONFIGURATIONW          FaxSetConfigurationW;
    PFAXSETCONFIGURATIONA          FaxSetConfigurationA;
    PFAXSETGLOBALROUTINGINFOW      FaxSetGlobalRoutingInfoW;
    PFAXSETGLOBALROUTINGINFOA      FaxSetGlobalRoutingInfoA;
    PFAXSETJOBW                    FaxSetJobW;
    PFAXSETJOBA                    FaxSetJobA;
    PFAXSETLOGGINGCATEGORIESW      FaxSetLoggingCategoriesW;
    PFAXSETLOGGINGCATEGORIESA      FaxSetLoggingCategoriesA;
    PFAXSETPORTW                   FaxSetPortW;
    PFAXSETPORTA                   FaxSetPortA;
    PFAXSETROUTINGINFOW            FaxSetRoutingInfoW;
    PFAXSETROUTINGINFOA            FaxSetRoutingInfoA;
    PFAXSTARTPRINTJOBW             FaxStartPrintJobW;
    PFAXSTARTPRINTJOBA             FaxStartPrintJobA;
} API_INTERFACE, *PAPI_INTERFACE;

#define DLL_PATH          L"Dll_Path"
#define DLL_DESCRIPTION   L"Dll_Description"
#define DLL_LOCAL_CASES   L"Dll_Local_Cases"
#define DLL_SERVER_CASES  L"Dll_Server_Cases"

#define MAX_DWORD 4294967295
#define MAX_WORD 65535
#define MAX_INT 32767
#define MIN_INT -32768
#define LONG_STRING "alkjhfdskjhfdkjsahakldfshlkfdashlkfadjhalkfdshklfdshlkfdshlkjfd"


//define test mode
#define WHIS_TEST_MODE_SKIP 0
#define WHIS_TEST_MODE_DO 1
#define WHIS_TEST_MODE_LIMITS 2
#define WHIS_TEST_MODE_DO_W2K_FAILS 3
#define WHIS_TEST_MODE_REAL_SEND 4
#define WHIS_TEST_MODE_DONT_CATCH_EXCEPTIONS 5




// whistler further INI settings
#define DLL_WHIS_TEST_MODE L"Whis_Test_Mode"
#define GLOBAL_WHIS_PHONE_NUM_1 L"Whis_phone_num_1"
#define GLOBAL_WHIS_PHONE_NUM_2 L"Whis_phone_num_2"
#define GLOBAL_WHIS_REMOTE_SERVER_NAME L"Whis_remote_server_name"


		
// Whistler further definitons

#define WHIS_DEFAULT_PHONE_NUMBER  "2222"
#define WHIS_DEFAULT_SERVER_NAME  NULL
#define WHIS_FAX_PRINTER_NAME "Fax"

typedef VOID
(WINAPI *PFNWRITELOGFILEW)(
    LPWSTR  szFormatString,
    ...
);

typedef VOID
(WINAPI *PFNWRITELOGFILEA)(
    LPSTR  szFormatString,
    ...
);

#ifdef UNICODE

#define PFNWRITELOGFILE  PFNWRITELOGFILEW

#else

#define PFNWRITELOGFILE  PFNWRITELOGFILEA

#endif

typedef VOID
(WINAPI *PFAXAPIDLLINIT)(
    HANDLE            hHeap,
    API_INTERFACE     ApiInterface,
    PFNWRITELOGFILEW  pfnWriteLogFileW,
    PFNWRITELOGFILEA  pfnWriteLogFileA
);

typedef BOOL
(WINAPI *PFAXAPIDLLTEST)(
	LPCWSTR  szWhisPhoneNumberW,
    LPCSTR   szWhisPhoneNumberA,
    LPCWSTR  szServerNameW,
    LPCSTR   szServerNameA,
    UINT     nNumCasesLocal,
    UINT     nNumCasesServer,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	DWORD	 dwTestMode
);


#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legacywin32\routeapi\routeapi.c ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

  routeapi.c

Abstract:

  RouteApi: Fax API Test Dll: Client Routing APIs
    1) FaxRegisterServiceProvider()
    2) FaxRegisterRoutingExtension()
    3) FaxEnumGlobalRoutingInfo()
    4) FaxSetGlobalRoutingInfo()
    5) FaxEnumRoutingMethods()
    6) FaxEnableRoutingMethod()
    7) FaxGetRoutingInfo()
    8) FaxSetRoutingInfo()

Author:

  Steven Kehrli (steveke) 8/28/1998

--*/

/*++

  Whistler Version:

  Lior Shmueli (liors) 23/11/2000

 ++*/

#include <wtypes.h>
#include <tchar.h>

#include "dllapi.h"
#include "routeapi.h"



// g_hHeap is the handle to the heap
HANDLE           g_hHeap = NULL;
// g_ApiInterface is the API_INTERFACE structure
API_INTERFACE    g_ApiInterface;
// fnWriteLogFile is the pointer to the function to write a string to the log file
PFNWRITELOGFILE  fnWriteLogFile = NULL;

// number of global routing methods
DWORD	 g_dwNumMethods=0;
DWORD	 g_dwIndexAPIMethod1=0;
DWORD	 g_dwIndexAPIMethod2=0;

#define FAX_DEVICEPROVIDERS_REGKEY        TEXT("Software\\Microsoft\\Fax\\Device Providers")
#define FAX_ROUTINGEXTENSIONS_REGKEY      TEXT("Software\\Microsoft\\Fax\\Routing Extensions")
#define FAX_ROUTINGMETHODS_REGKEY         TEXT("Routing Methods")
#define FAX_SERVICE                       TEXT("Fax")

#define ROUTEAPI_PROVIDER_W               L"RouteApi Modem Device Provider"
#define ROUTEAPI_PROVIDER                 TEXT("RouteApi Modem Device Provider")
#define ROUTEAPI_PROVIDER_FRIENDLYNAME_W  L"RouteApi Modem Device Provider Friendly Name"
#define ROUTEAPI_PROVIDER_FRIENDLYNAME    TEXT("RouteApi Modem Device Provider Friendly Name")
#define ROUTEAPI_PROVIDER_IMAGENAME_W     L"%SystemRoot%\\system32\\faxt30.dll"
#define ROUTEAPI_PROVIDER_IMAGENAME       TEXT("%SystemRoot%\\system32\\faxt30.dll")
#define ROUTEAPI_PROVIDER_PROVIDERNAME_W  L"Windows Telephony Service Provider for Universal Modem Driver"
#define ROUTEAPI_PROVIDER_PROVIDERNAME    TEXT("Windows Telephony Service Provider for Universal Modem Driver")

#define ROUTEAPI_INVALID_GUID             TEXT("{00000000-0000-0000-0000-000000000000}")

DWORD
DllEntry(
    HINSTANCE  hInstance,
    DWORD      dwReason,
    LPVOID     pContext
)
/*++

Routine Description:

  DLL entry point

Arguments:

  hInstance - handle to the module
  dwReason - indicates the reason for being called
  pContext - context

Return Value:

  TRUE on success

--*/
{
    return TRUE;
}

VOID WINAPI
FaxAPIDllInit(
    HANDLE            hHeap,
    API_INTERFACE     ApiInterface,
    PFNWRITELOGFILEW  pfnWriteLogFileW,
    PFNWRITELOGFILEA  pfnWriteLogFileA
)
/*++

Routine Description:

  Initialize Fax API Dll Test

Arguments:

  hHeap - handle to the heap
  ApiInterface - API_INTERFACE structure
  pfnWriteLogFile - pointer to function to write a string to the log file

Return Value:

  None

--*/
{
    // Set g_hHeap
    g_hHeap = hHeap;
    // Set g_ApiInterface
    g_ApiInterface = ApiInterface;
#ifdef UNICODE
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileW;
#else
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileA;
#endif

    return;
}

BOOL
fnRegQuerySz(
    HKEY    hKey,
    LPTSTR  szValue,
    LPTSTR  *pszData
)
/*++

Routine Description:

  Queries a Registry data as a REG_SZ

Arguments:

  hKey - handle to the Registry key
  szValue - value to be queried
  pszData - pointer to the data to be queried

Return Value:

  TRUE on success

--*/
{
    DWORD  cb;

    cb = 0;
    // Determine the memory required by pszData
    if (RegQueryValueEx(hKey, szValue, NULL, NULL, NULL, &cb)) {
        return FALSE;
    }

    // Allocate the memory for pszData
    *pszData = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, cb);

    if (RegQueryValueEx(hKey, szValue, NULL, NULL, (PBYTE) *pszData, &cb)) {
        HeapFree(g_hHeap, 0, *pszData);
        *pszData = NULL;
        return FALSE;
    }

    return TRUE;
}

VOID
fnFaxRegisterServiceProvider(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxRegisterServiceProvider()

Return Value:

  None

--*/
{
    // hFaxDeviceProvidersKey is the handle to the fax device providers registry key
    HKEY    hFaxDeviceProvidersKey;
    // hFaxSvcProviderKey is the handle to the fax service provider registry key
    HKEY    hFaxSvcProviderKey;
    // szFriendlyName is the service provider friendly name registry value
    LPTSTR  szFriendlyName;
    // szImageName is the service provider image name registry value
    LPTSTR  szImageName;
    // szProviderName is the service provider provider name registry value
    LPTSTR  szProviderName;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxRegisterServiceProvider().\r\n"));

    // Register the service provider
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxRegisterServiceProvider(ROUTEAPI_PROVIDER_W, ROUTEAPI_PROVIDER_FRIENDLYNAME_W, ROUTEAPI_PROVIDER_IMAGENAME_W, ROUTEAPI_PROVIDER_PROVIDERNAME_W)) {
        fnWriteLogFile(TEXT("FaxRegisterServiceProvider() failed.  The error code is 0x%08x.  This is an error.  FaxRegisterServiceProvider() should succeed.\r\n"), GetLastError());
    }
    else {
        if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, FAX_DEVICEPROVIDERS_REGKEY, 0, KEY_ALL_ACCESS, &hFaxDeviceProvidersKey)) {
            fnWriteLogFile(TEXT("Could not open the Registry Key %s, ec = 0x%08x.\r\n"), FAX_DEVICEPROVIDERS_REGKEY, GetLastError());
            goto RegFailed0;
        }

        if (RegOpenKeyEx(hFaxDeviceProvidersKey, ROUTEAPI_PROVIDER, 0, KEY_ALL_ACCESS, &hFaxSvcProviderKey)) {
            fnWriteLogFile(TEXT("Could not open the Registry Key %s, ec = 0x%08x.\r\n"), ROUTEAPI_PROVIDER, GetLastError());
            goto RegFailed1;
        }

        if (!fnRegQuerySz(hFaxSvcProviderKey, TEXT("FriendlyName"), &szFriendlyName)) {
            fnWriteLogFile(TEXT("Could not query the Registry Value %s, ec = 0x%08x.\r\n"), TEXT("FriendlyName"), GetLastError());
            goto RegFailed2;
        }
        if (lstrcmp(ROUTEAPI_PROVIDER_FRIENDLYNAME, szFriendlyName)!=0) {
            fnWriteLogFile(TEXT("FriendlyName: Received: %s, Expected: %s.\r\n"), szFriendlyName, ROUTEAPI_PROVIDER_FRIENDLYNAME);
            goto RegFailed2;
        }
        HeapFree(g_hHeap, 0, szFriendlyName);

        if (!fnRegQuerySz(hFaxSvcProviderKey, TEXT("ImageName"), &szImageName)) {
            fnWriteLogFile(TEXT("Could not query the Registry Value %s, ec = 0x%08x.\r\n"), TEXT("ImageName"), GetLastError());
            goto RegFailed2;
        }
        if (lstrcmp(ROUTEAPI_PROVIDER_IMAGENAME, szImageName)!=0) {
            fnWriteLogFile(TEXT("ImageName: Received: %s, Expected: %s.\r\n"), szImageName, ROUTEAPI_PROVIDER_IMAGENAME);
            goto RegFailed2;
        }
        HeapFree(g_hHeap, 0, szImageName);

        if (!fnRegQuerySz(hFaxSvcProviderKey, TEXT("ProviderName"), &szProviderName)) {
            fnWriteLogFile(TEXT("Could not query the Registry Value %s, ec = 0x%08x.\r\n"), TEXT("ProviderName"), GetLastError());
            goto RegFailed2;
        }
        if (lstrcmp(ROUTEAPI_PROVIDER_PROVIDERNAME, szProviderName)!=0) {
            fnWriteLogFile(TEXT("ProviderName: Received: %s, Expected: %s.\r\n"), szProviderName, ROUTEAPI_PROVIDER_PROVIDERNAME);
            goto RegFailed2;
        }
        HeapFree(g_hHeap, 0, szProviderName);

        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;

goto RegFailed0;
RegFailed2:
        RegCloseKey(hFaxSvcProviderKey);
        RegDeleteKey(hFaxDeviceProvidersKey, ROUTEAPI_PROVIDER);

RegFailed1:
        RegCloseKey(hFaxDeviceProvidersKey);
    }

RegFailed0:

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("ROUTEAPI_PROVIDER = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxRegisterServiceProvider(NULL, ROUTEAPI_PROVIDER_FRIENDLYNAME_W, ROUTEAPI_PROVIDER_IMAGENAME_W, ROUTEAPI_PROVIDER_PROVIDERNAME_W)) {
        fnWriteLogFile(TEXT("FaxRegisterServiceProvider() returned TRUE.  This is an error.  FaxRegisterServiceProvider() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxRegisterServiceProvider() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("ROUTEAPI_PROVIDER_FRIENDLYNAME = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxRegisterServiceProvider(ROUTEAPI_PROVIDER_W, NULL, ROUTEAPI_PROVIDER_IMAGENAME_W, ROUTEAPI_PROVIDER_PROVIDERNAME_W)) {
        fnWriteLogFile(TEXT("FaxRegisterServiceProvider() returned TRUE.  This is an error.  FaxRegisterServiceProvider() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxRegisterServiceProvider() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("ROUTEAPI_PROVIDER_IMAGENAME = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxRegisterServiceProvider(ROUTEAPI_PROVIDER_W, ROUTEAPI_PROVIDER_FRIENDLYNAME_W, NULL, ROUTEAPI_PROVIDER_PROVIDERNAME_W)) {
        fnWriteLogFile(TEXT("FaxRegisterServiceProvider() returned TRUE.  This is an error.  FaxRegisterServiceProvider() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxRegisterServiceProvider() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("ROUTEAPI_PROVIDER_PROVIDERNAME = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxRegisterServiceProvider(ROUTEAPI_PROVIDER_W, ROUTEAPI_PROVIDER_FRIENDLYNAME_W, ROUTEAPI_PROVIDER_IMAGENAME_W, NULL)) {
        fnWriteLogFile(TEXT("FaxRegisterServiceProvider() returned TRUE.  This is an error.  FaxRegisterServiceProvider() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxRegisterServiceProvider() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, FAX_DEVICEPROVIDERS_REGKEY, 0, KEY_ALL_ACCESS, &hFaxDeviceProvidersKey)) {
        return;
    }

    RegDeleteKey(hFaxDeviceProvidersKey, ROUTEAPI_PROVIDER);
    RegCloseKey(hFaxDeviceProvidersKey);
fnWriteLogFile(TEXT("$$$ Summery for FaxRegisterServiceProvider, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
}

BOOL CALLBACK
fnRouteApiExtensionCallback(
    HANDLE  hFaxSvcHandle,
    LPVOID  lpContext,
    LPWSTR  szMethodBuffer,
    LPWSTR  szMethodFriendlyNameBuffer,
    LPWSTR  szMethodFunctionNameBuffer,
    LPWSTR  szGUIDBuffer
)
/*++

Routine Description:

  FaxRegisterRoutingExtension() callback

Return Value:

  TRUE to enumerate another Routing Method

--*/
{
    BOOL     bRet;
    LPDWORD  pdwIndex;

	

    pdwIndex = (LPDWORD) lpContext;

    switch (*pdwIndex) {
        case 0:
            lstrcpyW(szMethodBuffer, ROUTEAPI_METHOD1_W);
            lstrcpyW(szMethodFriendlyNameBuffer, ROUTEAPI_METHOD_FRIENDLYNAME1_W);
            lstrcpyW(szMethodFunctionNameBuffer, ROUTEAPI_METHOD_FUNCTIONNAME1_W);
            lstrcpyW(szGUIDBuffer, ROUTEAPI_METHOD_GUID1_W);
            bRet = TRUE;
            break;

        case 1:
            lstrcpyW(szMethodBuffer, ROUTEAPI_METHOD2_W);
            lstrcpyW(szMethodFriendlyNameBuffer, ROUTEAPI_METHOD_FRIENDLYNAME2_W);
            lstrcpyW(szMethodFunctionNameBuffer, ROUTEAPI_METHOD_FUNCTIONNAME2_W);
            lstrcpyW(szGUIDBuffer, ROUTEAPI_METHOD_GUID2_W);
            bRet = TRUE;
            break;

        default:
            bRet = FALSE;
            break;
    }

    (*pdwIndex)++;
    return bRet;
}

VOID
fnFaxRegisterRoutingExtension(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxRegisterRoutingExtension()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE  hFaxSvcHandle;

    // hFaxRoutingExtensionsKey is the handle to the fax routing extensions registry key
    HKEY    hFaxRoutingExtensionsKey;
    // hFaxExtensionKey is the handle to the fax extension registry key
    HKEY    hFaxExtensionKey;
    // hFaxRoutingMethodsKey is the handle to the fax routing methods registry key
    HKEY    hFaxRoutingMethodsKey;
    // hFaxMethodKey is the handle to the fax method registry key
    HKEY    hFaxMethodKey;
    // szFriendlyName is the routing extension or routing method friendly name registry value
    LPTSTR  szFriendlyName;
    // szImageName is the routing extension image name registry value
    LPTSTR  szImageName;
    // szFunctionName is the routing method function name registry value
    LPTSTR  szFunctionName;
    // szGUID is the routing method GUD registry value
    LPTSTR  szGUID;

    DWORD   dwIndex;
	DWORD   dwWhisErrorCode=0;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxRegisterRoutingExtension().\r\n"));

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}
    // Register the routing extension
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    dwIndex = 0;
	fnWriteLogFile(TEXT("WHIS> Starting extension registration...\n"));
	
						
	fnWriteLogFile(TEXT("\nValid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxRegisterRoutingExtension(hFaxSvcHandle, ROUTEAPI_EXTENSION_W, ROUTEAPI_EXTENSION_FRIENDLYNAME_W, ROUTEAPI_EXTENSION_IMAGENAME_W, fnRouteApiExtensionCallback, &dwIndex)) {
        fnWriteLogFile(TEXT("FaxRegisterRoutingExtension() failed.  The error code is 0x%08x.  This is an error.  FaxRegisterRoutingExtension() should succeed.\r\n"), GetLastError());
    }
    else {
        if (dwIndex != 3) {
            fnWriteLogFile(TEXT("FaxRegisterRoutingExtension() failed.  fnRouteApiExtensionCallback() was only called %d times.  This is an error.  fnRouteApiExtensionCallback() should have been called 3 times.\r\n"), dwIndex);
			dwWhisErrorCode=1;
            goto RegFailed0;
        }

        if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, FAX_ROUTINGEXTENSIONS_REGKEY, 0, KEY_ALL_ACCESS, &hFaxRoutingExtensionsKey)) {
            fnWriteLogFile(TEXT("Could not open the Registry Key %s, ec = 0x%08x.\r\n"), FAX_ROUTINGEXTENSIONS_REGKEY, GetLastError());
			dwWhisErrorCode=2;
            goto RegFailed0;
        }

        if (RegOpenKeyEx(hFaxRoutingExtensionsKey, ROUTEAPI_EXTENSION, 0, KEY_ALL_ACCESS, &hFaxExtensionKey)) {
            fnWriteLogFile(TEXT("Could not open the Registry Key %s, ec = 0x%08x.\r\n"), ROUTEAPI_EXTENSION, GetLastError());
			dwWhisErrorCode=3;
            goto RegFailed1;
        }

        if (!fnRegQuerySz(hFaxExtensionKey, TEXT("FriendlyName"), &szFriendlyName)) {
            fnWriteLogFile(TEXT("Could not query the Registry Value %s, ec = 0x%08x.\r\n"), TEXT("FriendlyName"), GetLastError());
			dwWhisErrorCode=4;
            goto RegFailed2;
        }
        if (lstrcmp(ROUTEAPI_EXTENSION_FRIENDLYNAME, szFriendlyName)!=0) {
            fnWriteLogFile(TEXT("FriendlyName: Received: %s, Expected: %s.\r\n"), szFriendlyName, ROUTEAPI_EXTENSION_FRIENDLYNAME);
			dwWhisErrorCode=5;
            goto RegFailed2;
        }
        HeapFree(g_hHeap, 0, szFriendlyName);

        if (!fnRegQuerySz(hFaxExtensionKey, TEXT("ImageName"), &szImageName)) {
            fnWriteLogFile(TEXT("Could not query the Registry Value %s, ec = 0x%08x.\r\n"), TEXT("ImageName"), GetLastError());
			dwWhisErrorCode=6;
            goto RegFailed2;
        }
        if (lstrcmp(ROUTEAPI_EXTENSION_IMAGENAME, szImageName)!=0) {
            fnWriteLogFile(TEXT("ImageName: Received: %s, Expected: %s.\r\n"), szImageName, ROUTEAPI_EXTENSION_IMAGENAME);
			dwWhisErrorCode=7;
            goto RegFailed2;
        }
        HeapFree(g_hHeap, 0, szImageName);

        if (RegOpenKeyEx(hFaxExtensionKey, FAX_ROUTINGMETHODS_REGKEY, 0, KEY_ALL_ACCESS, &hFaxRoutingMethodsKey)) {
            fnWriteLogFile(TEXT("Could not open the Registry Key %s, ec = 0x%08x.\r\n"), FAX_ROUTINGMETHODS_REGKEY, GetLastError());
			dwWhisErrorCode=8;
            goto RegFailed2;
        }

        if (RegOpenKeyEx(hFaxRoutingMethodsKey, ROUTEAPI_METHOD1, 0, KEY_ALL_ACCESS, &hFaxMethodKey)) {
            fnWriteLogFile(TEXT("Could not open the Registry Key %s, ec = 0x%08x.\r\n"), ROUTEAPI_METHOD1, GetLastError());
			dwWhisErrorCode=9;
            goto NextMethod0;
        }

        if (!fnRegQuerySz(hFaxMethodKey, TEXT("FriendlyName"), &szFriendlyName)) {
            fnWriteLogFile(TEXT("Could not query the Registry Value %s, ec = 0x%08x.\r\n"), TEXT("FriendlyName"), GetLastError());
			dwWhisErrorCode=10;
            goto NextMethod1;
        }
        if (lstrcmp(ROUTEAPI_METHOD_FRIENDLYNAME1, szFriendlyName)!=0) {
            fnWriteLogFile(TEXT("FriendlyName: Received: %s, Expected: %s.\r\n"), szFriendlyName, ROUTEAPI_METHOD_FRIENDLYNAME1);
			dwWhisErrorCode=11;
            goto NextMethod1;
        }
        HeapFree(g_hHeap, 0, szFriendlyName);

        if (!fnRegQuerySz(hFaxMethodKey, TEXT("Function Name"), &szFunctionName)) {
            fnWriteLogFile(TEXT("Could not query the Registry Value %s, ec = 0x%08x.\r\n"), TEXT("Function Name"), GetLastError());
			dwWhisErrorCode=12;
            goto NextMethod1;
        }
        if (lstrcmp(ROUTEAPI_METHOD_FUNCTIONNAME1, szFunctionName)!=0) {
            fnWriteLogFile(TEXT("Function Name: Received: %s, Expected: %s.\r\n"), szFunctionName, ROUTEAPI_METHOD_FUNCTIONNAME1);
			dwWhisErrorCode=13;
            goto NextMethod1;
        }
        HeapFree(g_hHeap, 0, szFunctionName);

        if (!fnRegQuerySz(hFaxMethodKey, TEXT("Guid"), &szGUID)) {
            fnWriteLogFile(TEXT("Could not query the Registry Value %s, ec = 0x%08x.\r\n"), TEXT("Guid"), GetLastError());
			dwWhisErrorCode=14;
            goto NextMethod1;
        }
        if (lstrcmp(ROUTEAPI_METHOD_GUID1, szGUID)!=0) {
            fnWriteLogFile(TEXT("Guid: Received: %s, Expected: %s.\r\n"), szGUID, ROUTEAPI_METHOD_GUID1);
			dwWhisErrorCode=15;
            goto NextMethod1;
        }
        HeapFree(g_hHeap, 0, szGUID);

goto NextMethod0;
NextMethod1:
        fnWriteLogFile(TEXT("There was an error with the 1st routing extenstion registration (code %d), and it will be deleted. IGNORE ALL CASES\r\n"),dwWhisErrorCode);
        RegCloseKey(hFaxMethodKey);
		RegDeleteKey(hFaxRoutingMethodsKey, ROUTEAPI_METHOD1);

NextMethod0:
        if (RegOpenKeyEx(hFaxRoutingMethodsKey, ROUTEAPI_METHOD2, 0, KEY_ALL_ACCESS, &hFaxMethodKey)) {
            fnWriteLogFile(TEXT("Could not open the Registry Key %s, ec = 0x%08x.\r\n"), ROUTEAPI_METHOD2, GetLastError());
            goto RegFailed3;
        }

        if (!fnRegQuerySz(hFaxMethodKey, TEXT("FriendlyName"), &szFriendlyName)) {
            fnWriteLogFile(TEXT("Could not query the Registry Value %s, ec = 0x%08x.\r\n"), TEXT("FriendlyName"), GetLastError());
            goto RegFailed4;
        }
        if (lstrcmp(ROUTEAPI_METHOD_FRIENDLYNAME2, szFriendlyName)!=0) {
            fnWriteLogFile(TEXT("FriendlyName: Received: %s, Expected: %s.\r\n"), szFriendlyName, ROUTEAPI_METHOD_FRIENDLYNAME2);
            goto RegFailed4;
        }
        HeapFree(g_hHeap, 0, szFriendlyName);

        if (!fnRegQuerySz(hFaxMethodKey, TEXT("Function Name"), &szFunctionName)) {
            fnWriteLogFile(TEXT("Could not query the Registry Value %s, ec = 0x%08x.\r\n"), TEXT("Function Name"), GetLastError());
            goto RegFailed4;
        }
        if (lstrcmp(ROUTEAPI_METHOD_FUNCTIONNAME2, szFunctionName)!=0) {
            fnWriteLogFile(TEXT("Function Name: Received: %s, Expected: %s.\r\n"), szFunctionName, ROUTEAPI_METHOD_FUNCTIONNAME2);
            goto RegFailed4;
        }
        HeapFree(g_hHeap, 0, szFunctionName);

        if (!fnRegQuerySz(hFaxMethodKey, TEXT("Guid"), &szGUID)) {
            fnWriteLogFile(TEXT("Could not query the Registry Value %s, ec = 0x%08x.\r\n"), TEXT("Guid"), GetLastError());
            goto RegFailed4;
        }
        if (lstrcmp(ROUTEAPI_METHOD_GUID2, szGUID)!=0) {
            fnWriteLogFile(TEXT("Guid: Received: %s, Expected: %s.\r\n"), szGUID, ROUTEAPI_METHOD_GUID2);
            goto RegFailed4;
        }
        HeapFree(g_hHeap, 0, szGUID);

        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;

goto RegFailed0;
RegFailed4:
        RegCloseKey(hFaxMethodKey);
	    RegDeleteKey(hFaxRoutingMethodsKey, ROUTEAPI_METHOD2);

RegFailed3:
        RegCloseKey(hFaxRoutingMethodsKey);
	    RegDeleteKey(hFaxExtensionKey, FAX_ROUTINGMETHODS_REGKEY);

RegFailed2:
        RegCloseKey(hFaxExtensionKey);
        RegDeleteKey(hFaxRoutingExtensionsKey, ROUTEAPI_EXTENSION);

RegFailed1:
        RegCloseKey(hFaxRoutingExtensionsKey);
    }

RegFailed0:

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    dwIndex = 0;
    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxRegisterRoutingExtension(NULL, ROUTEAPI_EXTENSION_W, ROUTEAPI_EXTENSION_FRIENDLYNAME_W, ROUTEAPI_EXTENSION_IMAGENAME_W, fnRouteApiExtensionCallback, &dwIndex)) {
        fnWriteLogFile(TEXT("FaxRegisterRoutingExtension() returned TRUE.  This is an error.  FaxRegisterRoutingExtension() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxRegisterRoutingExtension() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    dwIndex = 0;
    fnWriteLogFile(TEXT("ROUTEAPI_EXTENSION = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxRegisterRoutingExtension(hFaxSvcHandle, NULL, ROUTEAPI_EXTENSION_FRIENDLYNAME_W, ROUTEAPI_EXTENSION_IMAGENAME_W, fnRouteApiExtensionCallback, &dwIndex)) {
        fnWriteLogFile(TEXT("FaxRegisterRoutingExtension() returned TRUE.  This is an error.  FaxRegisterRoutingExtension() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxRegisterRoutingExtension() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    dwIndex = 0;
    fnWriteLogFile(TEXT("ROUTEAPI_EXTENSION_FRIENDLYNAME = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxRegisterRoutingExtension(hFaxSvcHandle, ROUTEAPI_EXTENSION_W, NULL, ROUTEAPI_EXTENSION_IMAGENAME_W, fnRouteApiExtensionCallback, &dwIndex)) {
        fnWriteLogFile(TEXT("FaxRegisterRoutingExtension() returned TRUE.  This is an error.  FaxRegisterRoutingExtension() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxRegisterRoutingExtension() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    dwIndex = 0;
    fnWriteLogFile(TEXT("ROUTEAPI_EXTENSION_IMAGENAME = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxRegisterRoutingExtension(hFaxSvcHandle, ROUTEAPI_EXTENSION_W, ROUTEAPI_EXTENSION_FRIENDLYNAME_W, NULL, fnRouteApiExtensionCallback, &dwIndex)) {
        fnWriteLogFile(TEXT("FaxRegisterRoutingExtension() returned TRUE.  This is an error.  FaxRegisterRoutingExtension() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxRegisterRoutingExtension() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    dwIndex = 0;
    fnWriteLogFile(TEXT("fnRouteApiExtensionCallback = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxRegisterRoutingExtension(hFaxSvcHandle, ROUTEAPI_EXTENSION_W, ROUTEAPI_EXTENSION_FRIENDLYNAME_W, ROUTEAPI_EXTENSION_IMAGENAME_W, NULL, &dwIndex)) {
        fnWriteLogFile(TEXT("FaxRegisterRoutingExtension() returned TRUE.  This is an error.  FaxRegisterRoutingExtension() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxRegisterRoutingExtension() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    dwIndex = 0;
    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle (fax server not connected).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxRegisterRoutingExtension(hFaxSvcHandle, ROUTEAPI_EXTENSION_W, ROUTEAPI_EXTENSION_FRIENDLYNAME_W, ROUTEAPI_EXTENSION_IMAGENAME_W, fnRouteApiExtensionCallback, &dwIndex)) {
        fnWriteLogFile(TEXT("FaxRegisterRoutingExtension() returned TRUE.  This is an error.  FaxRegisterRoutingExtension() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxRegisterRoutingExtension() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    //if (szServerName) {
	//	fnWriteLogFile(TEXT("WHIS> SERVER CASE(s):\r\n"));
        // Connect to the fax server
      //  if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
        //    return;
        //}

    //    (*pnNumCasesAttempted)++;

    //    dwIndex = 0;
    //    fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    //    if (g_ApiInterface.FaxRegisterRoutingExtension(hFaxSvcHandle, ROUTEAPI_EXTENSION_W, ROUTEAPI_EXTENSION_FRIENDLYNAME_W, ROUTEAPI_EXTENSION_IMAGENAME_W, fnRouteApiExtensionCallback, &dwIndex)) {
    //        fnWriteLogFile(TEXT("FaxRegisterRoutingExtension() returned TRUE.  This is an error.  FaxRegisterRoutingExtension() should return FALSE and GetLastError() should return ERROR_INVALID_FUNCTION (0x%08x).\r\n"), ERROR_INVALID_FUNCTION);
    //    }
    //    else if (GetLastError() != ERROR_INVALID_FUNCTION) {
    //        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxRegisterRoutingExtension() should return FALSE and GetLastError() should return ERROR_INVALID_FUNCTION (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_FUNCTION);
    //    }
    //    else {
    //        (*pnNumCasesPassed)++;

    //    }

    // Disconnect from the fax server
    //    g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}


	fnWriteLogFile(TEXT("$$$ Summery for FaxRegisterRoutingExtension, Attempt %d, Pass %d, Fail %d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
	

    
	
	// un registration...
	if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, FAX_ROUTINGEXTENSIONS_REGKEY, 0, KEY_ALL_ACCESS, &hFaxRoutingExtensionsKey)) {
		return;
    }

    if (RegOpenKeyEx(hFaxRoutingExtensionsKey, ROUTEAPI_EXTENSION, 0, KEY_ALL_ACCESS, &hFaxExtensionKey)) {
        RegCloseKey(hFaxRoutingExtensionsKey);
        return;
    }

    if (RegOpenKeyEx(hFaxExtensionKey, FAX_ROUTINGMETHODS_REGKEY, 0, KEY_ALL_ACCESS, &hFaxRoutingMethodsKey)) {
        RegCloseKey(hFaxExtensionKey);
        RegDeleteKey(hFaxRoutingExtensionsKey, ROUTEAPI_EXTENSION);
        RegCloseKey(hFaxRoutingExtensionsKey);
        return;
    }

//    RegDeleteKey(hFaxRoutingMethodsKey, ROUTEAPI_METHOD1);
//    RegDeleteKey(hFaxRoutingMethodsKey, ROUTEAPI_METHOD2);
      RegCloseKey(hFaxRoutingMethodsKey);
//    RegDeleteKey(hFaxExtensionKey, FAX_ROUTINGMETHODS_REGKEY);
	  RegCloseKey(hFaxExtensionKey);
//    RegDeleteKey(hFaxRoutingExtensionsKey, ROUTEAPI_EXTENSION);
      RegCloseKey(hFaxRoutingExtensionsKey);
	  return;
}

BOOL
fnStopFaxSvc(
)
/*++

Routine Description:

  Stops the fax service

Return Value:

  TRUE on success

--*/
{
    HANDLE          hManager = NULL;
    HANDLE          hService = NULL;
    SERVICE_STATUS  ServiceStatus;

    // Open the service control manager
    hManager = OpenSCManager(NULL, SERVICES_ACTIVE_DATABASE, SC_MANAGER_ALL_ACCESS);
    // Open the service
    hService = OpenService(hManager, FAX_SERVICE, SERVICE_ALL_ACCESS);

    // Query the service status
    ZeroMemory(&ServiceStatus, sizeof(SERVICE_STATUS));
    if (!QueryServiceStatus(hService, &ServiceStatus)) {
        CloseServiceHandle(hService);
        CloseServiceHandle(hManager);
        fnWriteLogFile(TEXT("QueryServiceStatus() failed, ec = 0x%08x.\r\n"), GetLastError());
        return FALSE;
    }

    if (ServiceStatus.dwCurrentState == SERVICE_STOPPED) {
        // Service is stopped
        // Return TRUE
        return TRUE;
    }

    // Stop the service
    if (!ControlService(hService, SERVICE_CONTROL_STOP, &ServiceStatus)) {
        CloseServiceHandle(hService);
        CloseServiceHandle(hManager);
        fnWriteLogFile(TEXT("ControlService() failed, ec = 0x%08x.\r\n"), GetLastError());
        return FALSE;
    }

    // Wait until the service is stopped
    ZeroMemory(&ServiceStatus, sizeof(SERVICE_STATUS));
    while (ServiceStatus.dwCurrentState != SERVICE_STOPPED) {
        Sleep(1000);

        // Query the service status
        if (!QueryServiceStatus(hService, &ServiceStatus)) {
            CloseServiceHandle(hService);
            CloseServiceHandle(hManager);
            fnWriteLogFile(TEXT("QueryServiceStatus() failed, ec = 0x%08x.\r\n"), GetLastError());
            return FALSE;
        }

        // Verify the service is stopped or stopping
        if (!((ServiceStatus.dwCurrentState == SERVICE_STOPPED) || (ServiceStatus.dwCurrentState == SERVICE_STOP_PENDING))) {
            CloseServiceHandle(hService);
            CloseServiceHandle(hManager);
            fnWriteLogFile(TEXT("The Fax Service is in an unexpected state.  dwCurrentState: 0x%08x.\r\n"), ServiceStatus.dwCurrentState);
            return FALSE;
        }
    }

    Sleep(1000);

    CloseServiceHandle(hService);
    CloseServiceHandle(hManager);
    return TRUE;
}

VOID
fnAddRouteApiExtension(
)
/*++

Routine Description:

  Adds the Microsoft Routing Extension

Return Value:

  None

--*/
{
    // szRouteApiDll is the route api dll
    TCHAR   szRouteApiDll[MAX_PATH];

    // hFaxSvcHandle is the handle to the fax server
    HANDLE  hFaxSvcHandle;
    DWORD   dwIndex = 0;

    ExpandEnvironmentStrings(ROUTEAPI_EXTENSION_IMAGENAME, szRouteApiDll, sizeof(szRouteApiDll) / sizeof(TCHAR));
    if (!lstrcmpi(ROUTEAPI_EXTENSION_IMAGENAME, szRouteApiDll)) {
		fnWriteLogFile(TEXT("WHIS> Test Error: ROUTEAPI_EXTENSION_IMAGENAME and szRouteApiDll are not the same, The error code is 0x%08x\r\n"),GetLastError());
        return;
    }

    // Copy the FaxRcv dll
    if (!CopyFile(ROUTEAPI_EXTENSION_DLLNAME, szRouteApiDll, FALSE)) {
		fnWriteLogFile(TEXT("WHIS> Test Error: Could not copy routing extension file to system directory, The error code is 0x%08x\r\n"),GetLastError());
        return;
    }

    // Connect to the fax server
    g_ApiInterface.FaxConnectFaxServer(NULL, &hFaxSvcHandle);

    g_ApiInterface.FaxRegisterRoutingExtension(hFaxSvcHandle, ROUTEAPI_EXTENSION_W, ROUTEAPI_EXTENSION_FRIENDLYNAME_W, ROUTEAPI_EXTENSION_IMAGENAME_W, fnRouteApiExtensionCallback, &dwIndex);

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);
}

VOID
fnRemoveRouteApiExtension(
)
/*++

Routine Description:

  Removes the RouteApi Routing Extension

Return Value:

  None

--*/
{
    // hFaxRoutingExtensionsKey is the handle to the fax routing extensions registry key
    HKEY  hFaxRoutingExtensionsKey;
    // hFaxExtensionKey is the handle to the fax extension registry key
    HKEY  hFaxExtensionKey;
    // hFaxRoutingMethodsKey is the handle to the fax routing methods registry key
    HKEY  hFaxRoutingMethodsKey;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

    if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, FAX_ROUTINGEXTENSIONS_REGKEY, 0, KEY_ALL_ACCESS, &hFaxRoutingExtensionsKey)) {
        return;
    }

    if (RegOpenKeyEx(hFaxRoutingExtensionsKey, ROUTEAPI_EXTENSION, 0, KEY_ALL_ACCESS, &hFaxExtensionKey)) {
        RegCloseKey(hFaxRoutingExtensionsKey);
        return;
    }

    if (RegOpenKeyEx(hFaxExtensionKey, FAX_ROUTINGMETHODS_REGKEY, 0, KEY_ALL_ACCESS, &hFaxRoutingMethodsKey)) {
        RegCloseKey(hFaxExtensionKey);
        RegDeleteKey(hFaxRoutingExtensionsKey, ROUTEAPI_EXTENSION);
        RegCloseKey(hFaxRoutingExtensionsKey);
        return;
    }

    RegDeleteKey(hFaxRoutingMethodsKey, ROUTEAPI_METHOD1);
    RegDeleteKey(hFaxRoutingMethodsKey, ROUTEAPI_METHOD2);
    RegCloseKey(hFaxRoutingMethodsKey);
    RegDeleteKey(hFaxExtensionKey, FAX_ROUTINGMETHODS_REGKEY);
    RegCloseKey(hFaxExtensionKey);
    RegDeleteKey(hFaxRoutingExtensionsKey, ROUTEAPI_EXTENSION);
    RegCloseKey(hFaxRoutingExtensionsKey);
}

VOID
fnFaxEnumGlobalRoutingInfo(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxEnumGlobalRoutingInfo()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE                    hFaxSvcHandle;
    // pRoutingInfo is the pointer to the global routing structures
    PFAX_GLOBAL_ROUTING_INFO  pRoutingInfo;
    // dwNumMethods is the number of routing methods
    DWORD                     dwNumMethods;

    // szRouteApiDll is the route api dll
    TCHAR                     szRouteApiDll[MAX_PATH];

    DWORD                     dwIndex;

	TCHAR					szPreDefinedValue[MAX_PATH];

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;



	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxEnumGlobalRoutingInfo().\r\n"));

   // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    for (dwIndex = 0; dwIndex < 2; dwIndex++) {
        // Enumerate the routing extension global info
        (*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

        fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        if (!g_ApiInterface.FaxEnumGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo, &dwNumMethods)) {
            fnWriteLogFile(TEXT("FaxEnumGlobalRoutingInfo() failed.  The error code is 0x%08x.  This is an error.  FaxEnumGlobalRoutingInfo() should succeed.\r\n"), GetLastError());
        }
        else {
            if (pRoutingInfo == NULL) {
                fnWriteLogFile(TEXT("pRoutingInfo is NULL.  This is an error.  pRoutingInfo should not be NULL.\r\n"));
            }
			if (dwNumMethods != g_dwNumMethods) {
                fnWriteLogFile(TEXT("dwNumMethods is not g_dwNumMethods.  This is an error.  dwNumMethods should be g_dwNumMethods.\r\n"));
            }

			if ((pRoutingInfo != NULL) && (dwNumMethods == g_dwNumMethods)) {

				if (pRoutingInfo[g_dwIndexAPIMethod1].SizeOfStruct != sizeof(FAX_GLOBAL_ROUTING_INFO)) {
                    fnWriteLogFile(TEXT("SizeOfStruct: Received: %d, Expected: %d.\r\n"), pRoutingInfo[g_dwIndexAPIMethod1].SizeOfStruct, sizeof(FAX_GLOBAL_ROUTING_INFO));
                    goto FuncFailed;
                }

                if (pRoutingInfo[g_dwIndexAPIMethod1].Priority != g_dwNumMethods-1) {
                    fnWriteLogFile(TEXT("Priority: Received: %d, Expected: g_dwNumMethods-1.\r\n"), pRoutingInfo[g_dwIndexAPIMethod1].Priority);
                    goto FuncFailed;
                }
				
				if (lstrcmp(pRoutingInfo[g_dwIndexAPIMethod1].Guid,ROUTEAPI_METHOD_GUID1)!=0) {
                    fnWriteLogFile(TEXT("Guid: Received: %s, Expected: %s.\r\n"), pRoutingInfo[g_dwIndexAPIMethod1].Guid, ROUTEAPI_METHOD_GUID1);
                    goto FuncFailed;
                }

                if (lstrcmp(pRoutingInfo[g_dwIndexAPIMethod1].FriendlyName, ROUTEAPI_METHOD_FRIENDLYNAME1)!=0) {
                    fnWriteLogFile(TEXT("FriendlyName: Received: %s, Expected: %s.\r\n"), pRoutingInfo[g_dwIndexAPIMethod1].FriendlyName, ROUTEAPI_METHOD_FRIENDLYNAME1);
                    goto FuncFailed;
                }

                if (lstrcmp(pRoutingInfo[g_dwIndexAPIMethod1].FunctionName, ROUTEAPI_METHOD_FUNCTIONNAME1)!=0) {
                    fnWriteLogFile(TEXT("FunctionName: Received: %s, Expected: %s.\r\n"), pRoutingInfo[g_dwIndexAPIMethod1].FunctionName, ROUTEAPI_METHOD_FUNCTIONNAME1);
                    goto FuncFailed;
                }

                ExpandEnvironmentStrings(ROUTEAPI_EXTENSION_IMAGENAME, szRouteApiDll, sizeof(szRouteApiDll) / sizeof(TCHAR));
                if (lstrcmp(pRoutingInfo[g_dwIndexAPIMethod1].ExtensionImageName, szRouteApiDll)!=0) {
                    fnWriteLogFile(TEXT("ExtensionImageName: Received: %s, Expected: %s.\r\n"), pRoutingInfo[g_dwIndexAPIMethod1].ExtensionImageName, szRouteApiDll);
                    goto FuncFailed;
                }

                if (lstrcmp(pRoutingInfo[g_dwIndexAPIMethod1].ExtensionFriendlyName, ROUTEAPI_EXTENSION_FRIENDLYNAME)!=0) {
                    fnWriteLogFile(TEXT("ExtensionFriendlyName: Received: %s, Expected: %s.\r\n"), pRoutingInfo[g_dwIndexAPIMethod1].ExtensionFriendlyName, ROUTEAPI_EXTENSION_FRIENDLYNAME);
                    goto FuncFailed;
                }

                if (pRoutingInfo[g_dwIndexAPIMethod2].SizeOfStruct != sizeof(FAX_GLOBAL_ROUTING_INFO)!=0) {
                    fnWriteLogFile(TEXT("SizeOfStruct: Received: %d, Expected: %d.\r\n"), pRoutingInfo[g_dwIndexAPIMethod2].SizeOfStruct, sizeof(FAX_GLOBAL_ROUTING_INFO));
                    goto FuncFailed;
                }

                if (pRoutingInfo[g_dwIndexAPIMethod2].Priority != g_dwNumMethods) {
                    fnWriteLogFile(TEXT("Priority: Received: %d, Expected: g_dwNumMethods.\r\n"), pRoutingInfo[g_dwIndexAPIMethod2].Priority);
                    goto FuncFailed;
                }

                if (lstrcmp(pRoutingInfo[g_dwIndexAPIMethod2].Guid, ROUTEAPI_METHOD_GUID2)!=0) {
                    fnWriteLogFile(TEXT("Guid: Received: %s, Expected: %s.\r\n"), pRoutingInfo[g_dwIndexAPIMethod2].Guid, ROUTEAPI_METHOD_GUID2);
                    goto FuncFailed;
                }

                if (lstrcmp(pRoutingInfo[g_dwIndexAPIMethod2].FriendlyName, ROUTEAPI_METHOD_FRIENDLYNAME2)!=0) {
                    fnWriteLogFile(TEXT("FriendlyName: Received: %s, Expected: %s.\r\n"), pRoutingInfo[g_dwIndexAPIMethod2].FriendlyName, ROUTEAPI_METHOD_FRIENDLYNAME2);
                    goto FuncFailed;
                }

                if (lstrcmp(pRoutingInfo[g_dwIndexAPIMethod2].FunctionName, ROUTEAPI_METHOD_FUNCTIONNAME2)!=0) {
                    fnWriteLogFile(TEXT("FunctionName: Received: %s, Expected: %s.\r\n"), pRoutingInfo[g_dwIndexAPIMethod2].FunctionName, ROUTEAPI_METHOD_FUNCTIONNAME2);
                    goto FuncFailed;
                }

                ExpandEnvironmentStrings(ROUTEAPI_EXTENSION_IMAGENAME, szRouteApiDll, sizeof(szRouteApiDll) / sizeof(TCHAR));
                if (lstrcmp(pRoutingInfo[g_dwIndexAPIMethod2].ExtensionImageName, szRouteApiDll)!=0) {
                    fnWriteLogFile(TEXT("ExtensionImageName: Received: %s, Expected: %s.\r\n"), pRoutingInfo[g_dwIndexAPIMethod2].ExtensionImageName, szRouteApiDll);
                    goto FuncFailed;
                }

                if (lstrcmp(pRoutingInfo[g_dwIndexAPIMethod2].ExtensionFriendlyName, ROUTEAPI_EXTENSION_FRIENDLYNAME)!=0) {
                    fnWriteLogFile(TEXT("ExtensionFriendlyName: Received: %s, Expected: %s.\r\n"), pRoutingInfo[g_dwIndexAPIMethod2].ExtensionFriendlyName, ROUTEAPI_EXTENSION_FRIENDLYNAME);
                    goto FuncFailed;
                }

                (*pnNumCasesPassed)++;
				dwFuncCasesPass++;
            }

FuncFailed:
            g_ApiInterface.FaxFreeBuffer(pRoutingInfo);
        }
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxEnumGlobalRoutingInfo(NULL, &pRoutingInfo, &dwNumMethods)) {
        fnWriteLogFile(TEXT("FaxEnumGlobalRoutingInfo() returned TRUE.  This is an error.  FaxEnumGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pRoutingInfo);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxEnumGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pRoutingInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxEnumGlobalRoutingInfo(hFaxSvcHandle, NULL, &dwNumMethods)) {
        fnWriteLogFile(TEXT("FaxEnumGlobalRoutingInfo() returned TRUE.  This is an error.  FaxEnumGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pRoutingInfo);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxEnumGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("dwNumMethods = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxEnumGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo, NULL)) {
        fnWriteLogFile(TEXT("FaxEnumGlobalRoutingInfo() returned TRUE.  This is an error.  FaxEnumGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pRoutingInfo);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxEnumGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxEnumGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo, NULL)) {
        fnWriteLogFile(TEXT("FaxEnumGlobalRoutingInfo() returned TRUE.  This is an error.  FaxEnumGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pRoutingInfo);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxEnumGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> SERVER CASE(s):\r\n"));
        // Connect to the fax server
//        if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
//            return;
        //}

        //(*pnNumCasesAttempted)++;

        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxEnumGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo, &dwNumMethods)) {
          //  fnWriteLogFile(TEXT("FaxEnumGlobalRoutingInfo() failed.  The error code is 0x%08x.  This is an error.  FaxEnumGlobalRoutingInfo() should succeed.\r\n"), GetLastError());
        //}
        //else {
          //  g_ApiInterface.FaxFreeBuffer(pRoutingInfo);
//            (*pnNumCasesPassed)++;

  //      }

        // Disconnect from the fax server
    //    g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxEnumGlobalRoutingMethods, Attempt %d, Pass %d, Fail %d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
}

VOID
fnFaxSetGlobalRoutingInfo(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	BOOL	 bTestLimits
)
/*++

Routine Description:

  FaxSetGlobalRoutingInfo()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE                    hFaxSvcHandle;
    // pRoutingInfo is the pointer to the global routing structures
    PFAX_GLOBAL_ROUTING_INFO  pRoutingInfo;
    // dwNumMethods is the number of routing methods
    DWORD                     dwNumMethods;
    // szGUID is the copy of a routing method GUID
    LPTSTR                    szGUID;

    DWORD                     dwIndex;
    DWORD                     cb;
    DWORD                     dwOffset;
	DWORD					  dwWhisRoutingCounter;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxSetGlobalRoutingInfo().\r\n"));

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}
    
	// Enumerate the routing extension global info
    if (!g_ApiInterface.FaxEnumGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo, &dwNumMethods)) {
        fnWriteLogFile(TEXT("WHIS> (org test error) FaxEnumGlobalRoutingInfo() failed.  The error code is 0x%08x.  This is an error.  FaxEnumGlobalRoutingInfo() should succeed.\r\n"), GetLastError());
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

	
	pRoutingInfo[g_dwIndexAPIMethod1].Priority = g_dwNumMethods;
    pRoutingInfo[g_dwIndexAPIMethod2].Priority = g_dwNumMethods-1;

    // Set the routing extension global info
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSetGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo[g_dwIndexAPIMethod1])) {
        fnWriteLogFile(TEXT("FaxSetGlobalRoutingInfo() failed.  The error code is 0x%08x.  This is an error.  FaxSetGlobalRoutingInfo() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_ApiInterface.FaxSetGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo[g_dwIndexAPIMethod2])) {
            fnWriteLogFile(TEXT("FaxSetGlobalRoutingInfo() failed.  The error code is 0x%08x.  This is an error.  FaxSetGlobalRoutingInfo() should succeed.\r\n"), GetLastError());
        }
        else {
            g_ApiInterface.FaxFreeBuffer(pRoutingInfo);

            // Enumerate the routing extension global info
            g_ApiInterface.FaxEnumGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo, &dwNumMethods);
            if (lstrcmp(pRoutingInfo[g_dwIndexAPIMethod1].Guid, ROUTEAPI_METHOD_GUID2)!=0) {
                fnWriteLogFile(TEXT(" Guid: Received: %s, Expected: %s.\r\n"), pRoutingInfo[g_dwIndexAPIMethod1].Guid, ROUTEAPI_METHOD_GUID2);
                goto FuncFailed;
            }

            if (pRoutingInfo[g_dwIndexAPIMethod1].Priority != g_dwNumMethods-1) {
                fnWriteLogFile(TEXT("Priority: Received: %d, Expected: g_dwNumMethods-1.\r\n"), pRoutingInfo[g_dwIndexAPIMethod1].Priority);
                goto FuncFailed;
            }

            if (lstrcmp(pRoutingInfo[g_dwIndexAPIMethod2].Guid, ROUTEAPI_METHOD_GUID1)!=0) {
                fnWriteLogFile(TEXT("Guid: Received: %s, Expected: %s.\r\n"), pRoutingInfo[g_dwIndexAPIMethod2].Guid, ROUTEAPI_METHOD_GUID1);
                goto FuncFailed;
            }

            if (pRoutingInfo[g_dwIndexAPIMethod2].Priority != g_dwNumMethods) {
                fnWriteLogFile(TEXT("Priority: Received: %d, Expected: g_dwNumMethods.\r\n"), pRoutingInfo[g_dwIndexAPIMethod2].Priority);
                goto FuncFailed;
            }

            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;

FuncFailed:
            pRoutingInfo[g_dwIndexAPIMethod1].Priority = g_dwNumMethods-1;
            pRoutingInfo[g_dwIndexAPIMethod2].Priority = g_dwNumMethods;

            g_ApiInterface.FaxSetGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo[g_dwIndexAPIMethod1]);
            g_ApiInterface.FaxSetGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo[g_dwIndexAPIMethod2]);
            g_ApiInterface.FaxFreeBuffer(pRoutingInfo);
            g_ApiInterface.FaxEnumGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo, &dwNumMethods);
        }
    }

    pRoutingInfo[g_dwIndexAPIMethod1].SizeOfStruct = 0;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pRoutingInfo->SizeOfStruct = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSetGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo[g_dwIndexAPIMethod1])) {
        fnWriteLogFile(TEXT("FaxSetGlobalRoutingInfo() returned TRUE.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }
    pRoutingInfo[g_dwIndexAPIMethod1].SizeOfStruct = sizeof(FAX_GLOBAL_ROUTING_INFO);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSetGlobalRoutingInfo(NULL, &pRoutingInfo[g_dwIndexAPIMethod1])) {
        fnWriteLogFile(TEXT("FaxSetGlobalRoutingInfo() returned TRUE.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pRoutingInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSetGlobalRoutingInfo(hFaxSvcHandle, NULL)) {
        fnWriteLogFile(TEXT("FaxSetGlobalRoutingInfo() returned TRUE.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    szGUID = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(pRoutingInfo[g_dwIndexAPIMethod1].Guid) + 1) * sizeof(TCHAR));
    lstrcpy(szGUID, pRoutingInfo[g_dwIndexAPIMethod1].Guid);
    lstrcpy((LPTSTR) pRoutingInfo[g_dwIndexAPIMethod1].Guid, ROUTEAPI_INVALID_GUID);

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

	fnWriteLogFile(TEXT("Invalid GUID.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	if (g_ApiInterface.FaxSetGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo[g_dwIndexAPIMethod1])) {
		fnWriteLogFile(TEXT("FaxSetGlobalRoutingInfo() returned TRUE.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), ERROR_INVALID_DATA);
	}
	else if (GetLastError() != ERROR_INVALID_DATA) {
		fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_DATA);
	}
	else {
		(*pnNumCasesPassed)++;
		dwFuncCasesPass++;
	}

	if (bTestLimits)	{
		
		// limit values tested

		// priority=MAX_DWORD
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("WHIS> LIMITS: Priotiry = MAX_DWORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		pRoutingInfo[g_dwIndexAPIMethod1].Priority = MAX_DWORD;
		if (g_ApiInterface.FaxSetGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo[g_dwIndexAPIMethod1])) {
			fnWriteLogFile(TEXT("FaxSetGlobalRoutingInfo() returned TRUE.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), ERROR_INVALID_DATA);
		}
		else if (GetLastError() != ERROR_INVALID_DATA) {
			fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_DATA);
		}
		else {
	        (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
		}

	
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("WHIS> LIMITS: FriendlyName=LONG_STRING  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		pRoutingInfo[g_dwIndexAPIMethod1].FriendlyName = TEXT(LONG_STRING);
		if (g_ApiInterface.FaxSetGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo[g_dwIndexAPIMethod1])) {
			fnWriteLogFile(TEXT("FaxSetGlobalRoutingInfo() returned TRUE.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), ERROR_INVALID_DATA);
		}
	    else if (GetLastError() != ERROR_INVALID_DATA) {
	        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_DATA);
		}
		else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
		}

		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("WHIS> LIMITS: FunctionName=LONG_STRING  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		pRoutingInfo[g_dwIndexAPIMethod1].FunctionName = TEXT(LONG_STRING);
		if (g_ApiInterface.FaxSetGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo[g_dwIndexAPIMethod1])) {
			fnWriteLogFile(TEXT("FaxSetGlobalRoutingInfo() returned TRUE.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), ERROR_INVALID_DATA);
		}
	    else if (GetLastError() != ERROR_INVALID_DATA) {
	        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_DATA);
		}
		else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
		}

		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

	    fnWriteLogFile(TEXT("WHIS> LIMITS: ExtensionImageName=LONG_STRING  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		pRoutingInfo[g_dwIndexAPIMethod1].ExtensionImageName = TEXT(LONG_STRING);
	    if (g_ApiInterface.FaxSetGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo[g_dwIndexAPIMethod1])) {
	        fnWriteLogFile(TEXT("FaxSetGlobalRoutingInfo() returned TRUE.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), ERROR_INVALID_DATA);
		}
		else if (GetLastError() != ERROR_INVALID_DATA) {
		    fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_DATA);
	    }
	    else {
	        (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
		}
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("WHIS> LIMITS: ExtensionFriendlyName=LONG_STRING  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		pRoutingInfo[g_dwIndexAPIMethod1].ExtensionFriendlyName = TEXT(LONG_STRING);
		if (g_ApiInterface.FaxSetGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo[g_dwIndexAPIMethod1])) {
	        fnWriteLogFile(TEXT("FaxSetGlobalRoutingInfo() returned TRUE.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), ERROR_INVALID_DATA);
		}
		else if (GetLastError() != ERROR_INVALID_DATA) {
			fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_DATA);
		}
		else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
		}
	}

    lstrcpy((LPTSTR) pRoutingInfo[g_dwIndexAPIMethod1].Guid, szGUID);
    HeapFree(g_hHeap, 0, szGUID);

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSetGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo[g_dwIndexAPIMethod1])) {
        fnWriteLogFile(TEXT("FaxSetGlobalRoutingInfo() returned TRUE.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    g_ApiInterface.FaxFreeBuffer(pRoutingInfo);

    //if (szServerName) {
	//	fnWriteLogFile(TEXT("WHIS> SERVER CASE(s):\r\n"));
        // Connect to the fax server
      //  if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
        //    return;
        //}

        // Enumerate the routing extension global info
        //if (!g_ApiInterface.FaxEnumGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo, &dwNumMethods)) {
          //  fnWriteLogFile(TEXT("FaxEnumGlobalRoutingInfo() failed.  The error code is 0x%08x.  This is an error.  FaxEnumGlobalRoutingInfo() should succeed.\r\n"), GetLastError());
            // Disconnect from the fax server
            //g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        // Set the routing extension global info
        //(*pnNumCasesAttempted)++;

        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //for (dwIndex = 0; dwIndex < dwNumMethods; dwIndex++) {
            //if (!g_ApiInterface.FaxSetGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo[dwIndex])) {
              //  fnWriteLogFile(TEXT("FaxSetGlobalRoutingInfo() failed.  The error code is 0x%08x.  This is an error.  FaxSetGlobalRoutingInfo() should succeed.\r\n"), GetLastError());
//                break;
  //          }
    //    }

      //  if (dwIndex == dwNumMethods) {
        //    (*pnNumCasesPassed)++;

        //}

        //g_ApiInterface.FaxFreeBuffer(pRoutingInfo);

        // Disconnect from the fax server
//        g_ApiInterface.FaxClose(hFaxSvcHandle);
  //  }
fnWriteLogFile(TEXT("$$$ Summery for FaxSetGlobalRoutingInfo, Attempt %d, Pass %d, Fail %d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
}




VOID
fnFaxEnumRoutingMethods(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxEnumGlobalRoutingInfo()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE               hFaxSvcHandle;
    // hFaxPortHandle is the handle to a fax port
    HANDLE               hFaxPortHandle;
    // pFaxPortInfo is the pointer to the fax port info
    PFAX_PORT_INFO       pFaxPortInfo;
    // dwNumPorts is the number of fax ports
    DWORD                dwNumPorts;
    // dwDeviceId is the device id of the fax port
    DWORD                dwDeviceId;
    // szDeviceName is the device name of the fax port
    LPTSTR               szDeviceName;
    // pRoutingMethod is the pointer to the routing method data structures
    PFAX_ROUTING_METHOD  pRoutingMethods;
    // dwNumMethods is the number of routing methods
    DWORD                dwNumMethods;

    DWORD                dwIndex;
						
	TCHAR				 szRouteApiDll[MAX_PATH];

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxEnumRoutingMethods().\r\n"));

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    // Enumerate the fax ports
    if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not enum ports on server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    dwDeviceId = pFaxPortInfo[0].DeviceId;
    szDeviceName = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(pFaxPortInfo[0].DeviceName) + 1) * sizeof(TCHAR));
    lstrcpy(szDeviceName, pFaxPortInfo[0].DeviceName);

    // Free the fax port info
    g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not open port %d, The error code is 0x%08x.\r\n"),dwDeviceId, GetLastError());
        HeapFree(g_hHeap, 0, szDeviceName);
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    for (dwIndex = 0; dwIndex < 2; dwIndex++) {
        // Enumerate the routing methods
        (*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

        fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        if (!g_ApiInterface.FaxEnumRoutingMethods(hFaxPortHandle, &pRoutingMethods, &dwNumMethods)) {
            fnWriteLogFile(TEXT("FaxEnumRoutingMethods() failed.  The error code is 0x%08x.  This is an error.  FaxEnumRoutingMethods() should succeed.\r\n"), GetLastError());
        }
        else {
            if (pRoutingMethods == NULL) {
                fnWriteLogFile(TEXT("pRoutingMethods is NULL.  This is an error.  pRoutingMethods should not be NULL.\r\n"));
            }

            if (dwNumMethods != g_dwNumMethods) {
                fnWriteLogFile(TEXT("dwNumMethods is not g_dwNumMethods.  This is an error.  dwNumMethods should be g_dwNumMethods.\r\n"));
            }

            if ((pRoutingMethods != NULL) && (dwNumMethods == g_dwNumMethods)) {
                if (pRoutingMethods[g_dwIndexAPIMethod2].SizeOfStruct != sizeof(FAX_ROUTING_METHOD)) {
                    fnWriteLogFile(TEXT("SizeOfStruct: Received: %d, Expected: %d.\r\n"), pRoutingMethods[g_dwIndexAPIMethod2].SizeOfStruct, sizeof(FAX_ROUTING_METHOD));
                    goto FuncFailed;
                }

                if (pRoutingMethods[g_dwIndexAPIMethod2].DeviceId != dwDeviceId) {
                    fnWriteLogFile(TEXT("DeviceId: Received: 0x%08x, Expected: 0x%08x.\r\n"), pRoutingMethods[g_dwIndexAPIMethod2].DeviceId, dwDeviceId);
                    goto FuncFailed;
                }

                if ((dwIndex == 0) && (pRoutingMethods[g_dwIndexAPIMethod2].Enabled)) {
                    fnWriteLogFile(TEXT("Enabled: Received: FALSE, Expected: TRUE.\r\n"));
                    goto FuncFailed;
                }
                else if ((dwIndex == 1) && (!pRoutingMethods[g_dwIndexAPIMethod2].Enabled)) {
                    fnWriteLogFile(TEXT("Enabled: Received: TRUE, Expected: FALSE.\r\n"));
                    goto FuncFailed;
                }

                if (lstrcmp(pRoutingMethods[g_dwIndexAPIMethod2].DeviceName, szDeviceName)!=0) {
                    fnWriteLogFile(TEXT("DeviceName: Received: %s, Expected: %s.\r\n"), pRoutingMethods[g_dwIndexAPIMethod2].DeviceName, szDeviceName);
                    goto FuncFailed;
                }

                if (lstrcmp(pRoutingMethods[g_dwIndexAPIMethod2].Guid, ROUTEAPI_METHOD_GUID1)!=0) {
                    fnWriteLogFile(TEXT("Guid: Received: %s, Expected: %s.\r\n"), pRoutingMethods[g_dwIndexAPIMethod2].Guid, ROUTEAPI_METHOD_GUID1);
                    goto FuncFailed;
                }
				
                if (lstrcmp(pRoutingMethods[g_dwIndexAPIMethod2].FriendlyName, ROUTEAPI_METHOD_FRIENDLYNAME1)!=0) {
                    fnWriteLogFile(TEXT("FriendlyName: Received: %s, Expected: %s.\r\n"), pRoutingMethods[g_dwIndexAPIMethod2].FriendlyName, ROUTEAPI_METHOD_FRIENDLYNAME1);
                    goto FuncFailed;
                }

                ExpandEnvironmentStrings(ROUTEAPI_EXTENSION_IMAGENAME, szRouteApiDll, sizeof(szRouteApiDll) / sizeof(TCHAR));
                if (lstrcmp(pRoutingMethods[g_dwIndexAPIMethod2].ExtensionImageName, szRouteApiDll)!=0) {
                    fnWriteLogFile(TEXT("ExtensionImageName: Received: %s, Expected: %s.\r\n"), pRoutingMethods[g_dwIndexAPIMethod2].ExtensionImageName, szRouteApiDll);
                    goto FuncFailed;
                }

                if (lstrcmp(pRoutingMethods[g_dwIndexAPIMethod2].ExtensionFriendlyName, ROUTEAPI_EXTENSION_FRIENDLYNAME)!=0) {
                    fnWriteLogFile(TEXT("ExtensionFriendlyName: Received: %s, Expected: %s.\r\n"), pRoutingMethods[g_dwIndexAPIMethod2].ExtensionFriendlyName, ROUTEAPI_EXTENSION_FRIENDLYNAME);
                    goto FuncFailed;
                }

                if (pRoutingMethods[g_dwIndexAPIMethod1].SizeOfStruct != sizeof(FAX_ROUTING_METHOD)) {
                    fnWriteLogFile(TEXT("SizeOfStruct: Received: %d, Expected: %d.\r\n"), pRoutingMethods[g_dwIndexAPIMethod1].SizeOfStruct, sizeof(FAX_ROUTING_METHOD));
                    goto FuncFailed;
                }

                if (pRoutingMethods[g_dwIndexAPIMethod1].DeviceId != dwDeviceId) {
                    fnWriteLogFile(TEXT("DeviceId: Received: 0x%08x, Expected: 0x%08x.\r\n"), pRoutingMethods[g_dwIndexAPIMethod1].DeviceId, dwDeviceId);
                    goto FuncFailed;
                }

                if ((dwIndex == 0) && (pRoutingMethods[g_dwIndexAPIMethod1].Enabled)) {
                    fnWriteLogFile(TEXT("Enabled: Received: FALSE, Expected: TRUE.\r\n"));
                    goto FuncFailed;
                }
                else if ((dwIndex == 1) && (!pRoutingMethods[g_dwIndexAPIMethod1].Enabled)) {
                    fnWriteLogFile(TEXT("Enabled: Received: TRUE, Expected: FALSE.\r\n"));
                    goto FuncFailed;
                }

                if (lstrcmp(pRoutingMethods[g_dwIndexAPIMethod1].DeviceName, szDeviceName)!=0) {
                    fnWriteLogFile(TEXT("DeviceName: Received: %s, Expected: %s.\r\n"), pRoutingMethods[g_dwIndexAPIMethod1].DeviceName, szDeviceName);
                    goto FuncFailed;
                }

                if (lstrcmp(pRoutingMethods[g_dwIndexAPIMethod1].Guid, ROUTEAPI_METHOD_GUID2)!=0) {
                    fnWriteLogFile(TEXT("Guid: Received: %s, Expected: %s.\r\n"), pRoutingMethods[g_dwIndexAPIMethod1].Guid, ROUTEAPI_METHOD_GUID2);
                    goto FuncFailed;
                }

                if (lstrcmp(pRoutingMethods[g_dwIndexAPIMethod1].FriendlyName, ROUTEAPI_METHOD_FRIENDLYNAME2)!=0) {
                    fnWriteLogFile(TEXT("FriendlyName: Received: %s, Expected: %s.\r\n"), pRoutingMethods[g_dwIndexAPIMethod1].FriendlyName, ROUTEAPI_METHOD_FRIENDLYNAME2);
                    goto FuncFailed;
                }

                ExpandEnvironmentStrings(ROUTEAPI_EXTENSION_IMAGENAME, szRouteApiDll, sizeof(szRouteApiDll) / sizeof(TCHAR));
                if (lstrcmp(pRoutingMethods[g_dwIndexAPIMethod1].ExtensionImageName, szRouteApiDll)!=0) {
                    fnWriteLogFile(TEXT("ExtensionImageName: Received: %s, Expected: %s.\r\n"), pRoutingMethods[g_dwIndexAPIMethod1].ExtensionImageName, szRouteApiDll);
                    goto FuncFailed;
                }

                if (lstrcmp(pRoutingMethods[g_dwIndexAPIMethod1].ExtensionFriendlyName, ROUTEAPI_EXTENSION_FRIENDLYNAME)!=0) {
                    fnWriteLogFile(TEXT("ExtensionFriendlyName: Received: %s, Expected: %s.\r\n"), pRoutingMethods[g_dwIndexAPIMethod1].ExtensionFriendlyName, ROUTEAPI_EXTENSION_FRIENDLYNAME);
                    goto FuncFailed;
                }

                (*pnNumCasesPassed)++;
				dwFuncCasesPass++;
            }

FuncFailed:
            g_ApiInterface.FaxFreeBuffer(pRoutingMethods);
        }

        g_ApiInterface.FaxEnableRoutingMethod(hFaxPortHandle, ROUTEAPI_METHOD_GUID1, dwIndex ? FALSE : TRUE);
        g_ApiInterface.FaxEnableRoutingMethod(hFaxPortHandle, ROUTEAPI_METHOD_GUID2, dwIndex ? FALSE : TRUE);
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxPortHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxEnumRoutingMethods(NULL, &pRoutingMethods, &dwNumMethods)) {
        fnWriteLogFile(TEXT("FaxEnumRoutingMethods() returned TRUE.  This is an error.  FaxEnumRoutingMethods() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pRoutingMethods);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxEnumRoutingMethods() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pRoutingMethods = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxEnumRoutingMethods(hFaxPortHandle, NULL, &dwNumMethods)) {
        fnWriteLogFile(TEXT("FaxEnumRoutingMethods() returned TRUE.  This is an error.  FaxEnumRoutingMethods() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pRoutingMethods);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxEnumRoutingMethods() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("dwNumMethods = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxEnumRoutingMethods(hFaxPortHandle, &pRoutingMethods, NULL)) {
        fnWriteLogFile(TEXT("FaxEnumRoutingMethods() returned TRUE.  This is an error.  FaxEnumRoutingMethods() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pRoutingMethods);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxEnumRoutingMethods() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Disconnect from the fax port
    g_ApiInterface.FaxClose(hFaxPortHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxPortHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxEnumRoutingMethods(hFaxPortHandle, &pRoutingMethods, &dwNumMethods)) {
        fnWriteLogFile(TEXT("FaxEnumRoutingMethods() returned TRUE.  This is an error.  FaxEnumRoutingMethods() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pRoutingMethods);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxEnumRoutingMethods() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    HeapFree(g_hHeap, 0, szDeviceName);

//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> SERVER CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        // Enumerate the fax ports
//        if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
            // Disconnect from the fax server
  //          g_ApiInterface.FaxClose(hFaxSvcHandle);
    //        return;
      //  }

        //dwDeviceId = pFaxPortInfo[0].DeviceId;

        // Free the fax port info
        //g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);





        //if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
		//	fnWriteLogFile(TEXT("WHIS> ERROR: Can not open port %d, The error code is 0x%08x.\r\n"),dwDeviceId, GetLastError());
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
//            return;
  //      }
//
  //      (*pnNumCasesAttempted)++;

    //    fnWriteLogFile(TEXT("Remote hFaxPortHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
      //  if (!g_ApiInterface.FaxEnumRoutingMethods(hFaxPortHandle, &pRoutingMethods, &dwNumMethods)) {
        //    fnWriteLogFile(TEXT("FaxEnumRoutingMethods() failed.  The error code is 0x%08x.  This is an error.  FaxEnumRoutingMethods() should succeed.\r\n"), GetLastError());
        //}
        //else {
          //  g_ApiInterface.FaxFreeBuffer(pRoutingMethods);
//            (*pnNumCasesPassed)++;
  //      }

        // Disconnect from the fax port
    //    g_ApiInterface.FaxClose(hFaxPortHandle);

        // Disconnect from the fax server
//        g_ApiInterface.FaxClose(hFaxSvcHandle);
  //  }
fnWriteLogFile(TEXT("$$$ Summery for FaxEnumRoutingMethods, Attempt %d, Pass %d, Fail %d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
}

VOID
fnFaxEnableRoutingMethod(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxEnableRoutingMethod()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE               hFaxSvcHandle;
    // hFaxPortHandle is the handle to a fax port
    HANDLE               hFaxPortHandle;
    // pFaxPortInfo is the pointer to the fax port info
    PFAX_PORT_INFO       pFaxPortInfo;
    // dwNumPorts is the number of fax ports
    DWORD                dwNumPorts;
    // dwDeviceId is the device id of the fax port
    DWORD                dwDeviceId;
    // pRoutingMethod is the pointer to the routing method data structures
    PFAX_ROUTING_METHOD  pRoutingMethods;
    // dwNumMethods is the number of routing methods
    DWORD                dwNumMethods;

    // szRouteApiDll is the route api dll
    TCHAR                szRouteApiDll[MAX_PATH];
    // hInstance is the handle to the instance of the route api dll
    HINSTANCE            hInstance;
    // FaxRouteDeviceEnable is the pointer to the FaxRouteDeviceEnable() function
    FARPROC              FaxRouteDeviceEnable;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxEnableRoutingMethod().\r\n"));

    ExpandEnvironmentStrings(ROUTEAPI_EXTENSION_IMAGENAME, szRouteApiDll, sizeof(szRouteApiDll) / sizeof(TCHAR));
    if (!lstrcmpi(ROUTEAPI_EXTENSION_IMAGENAME, szRouteApiDll)) {
        return;
    }

    hInstance = LoadLibrary((LPCTSTR) szRouteApiDll);
    if (!hInstance) {
        return;
    }

    FaxRouteDeviceEnable = (FARPROC) GetProcAddress(hInstance, "FaxRouteDeviceEnable");
    if (!FaxRouteDeviceEnable) {
        FreeLibrary(hInstance);
        return;
    }

	// Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    // Enumerate the fax ports
    if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not enum ports on server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    dwDeviceId = pFaxPortInfo[0].DeviceId;

    // Free the fax port info
    g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not open port %d, The error code is 0x%08x.\r\n"),dwDeviceId, GetLastError());
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        FreeLibrary(hInstance);
        return;
    }

    // Enable the routing method
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxEnableRoutingMethod(hFaxPortHandle, ROUTEAPI_METHOD_GUID1, TRUE)) {
        fnWriteLogFile(TEXT("FaxEnableRoutingMethod() failed.  The error code is 0x%08x.  This is an error.  FaxEnableRoutingMethod() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!FaxRouteDeviceEnable(ROUTEAPI_METHOD_GUID1_W, dwDeviceId, -1)) {
            fnWriteLogFile(TEXT("Enabled: Received: FALSE, Expected: TRUE.\r\n"));
        }
        else {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
        }
    }

    // Disable the routing method
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxEnableRoutingMethod(hFaxPortHandle, ROUTEAPI_METHOD_GUID1, FALSE)) {
        fnWriteLogFile(TEXT("FaxEnableRoutingMethod() failed.  The error code is 0x%08x.  This is an error.  FaxEnableRoutingMethod() should succeed.\r\n"), GetLastError());
    }
    else {
        if (FaxRouteDeviceEnable(ROUTEAPI_METHOD_GUID1_W, dwDeviceId, -1)) {
            fnWriteLogFile(TEXT("Enabled: Received: TRUE, Expected: FALSE.\r\n"));
        }
        else {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
        }
    }

    FreeLibrary(hInstance);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxPortHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxEnableRoutingMethod(NULL, ROUTEAPI_METHOD_GUID1, FALSE)) {
        fnWriteLogFile(TEXT("FaxEnableRoutingMethod() returned TRUE.  This is an error.  FaxEnableRoutingMethod() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxEnableRoutingMethod() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("ROUTEAPI_METHOD_GUID1 = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxEnableRoutingMethod(hFaxPortHandle, NULL, FALSE)) {
        fnWriteLogFile(TEXT("FaxEnableRoutingMethod() returned TRUE.  This is an error.  FaxEnableRoutingMethod() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxEnableRoutingMethod() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid ROUTEAPI_METHOD_GUID1.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxEnableRoutingMethod(hFaxPortHandle, ROUTEAPI_INVALID_GUID, FALSE)) {
        fnWriteLogFile(TEXT("FaxEnableRoutingMethod() returned TRUE.  This is an error.  FaxEnableRoutingMethod() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), ERROR_INVALID_DATA);
    }
    else if (GetLastError() != ERROR_INVALID_DATA) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxEnableRoutingMethod() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_DATA);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Disconnect from the fax port
    g_ApiInterface.FaxClose(hFaxPortHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxPortHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxEnableRoutingMethod(hFaxPortHandle, ROUTEAPI_METHOD_GUID1, FALSE)) {
        fnWriteLogFile(TEXT("FaxEnableRoutingMethod() returned TRUE.  This is an error.  FaxEnableRoutingMethod() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxEnableRoutingMethod() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> SERVER CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        // Enumerate the fax ports
        //if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //dwDeviceId = pFaxPortInfo[0].DeviceId;

        // Free the fax port info
        //g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

        //if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
//            return;
  //      }

    //    if (!g_ApiInterface.FaxEnumRoutingMethods(hFaxPortHandle, &pRoutingMethods, &dwNumMethods)) {
            // Disconnect from the fax port
      //      g_ApiInterface.FaxClose(hFaxPortHandle);
            // Disconnect from the fax server
        //    g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //(*pnNumCasesAttempted)++;

        //fnWriteLogFile(TEXT("Remote hFaxPortHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxEnableRoutingMethod(hFaxPortHandle, pRoutingMethods[g_dwIndexAPIMethod1].Guid, pRoutingMethods[g_dwIndexAPIMethod1].Enabled)) {
            //fnWriteLogFile(TEXT("FaxEnableRoutingMethod() failed.  The error code is 0x%08x.  This is an error.  FaxEnableRoutingMethod() should succeed.\r\n"), GetLastError());
        //}
        //else {
            //(*pnNumCasesPassed)++;
        //}

        //g_ApiInterface.FaxFreeBuffer(pRoutingMethods);

        // Disconnect from the fax port
        //g_ApiInterface.FaxClose(hFaxPortHandle);

        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxEnableRoutingMethod, Attempt %d, Pass %d, Fail %d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
}

VOID
fnFaxGetRoutingInfo(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxGetRoutingInfo()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE               hFaxSvcHandle;
    // hFaxPortHandle is the handle to a fax port
    HANDLE               hFaxPortHandle;
    // pFaxPortInfo is the pointer to the fax port info
    PFAX_PORT_INFO       pFaxPortInfo;
    // dwNumPorts is the number of fax ports
    DWORD                dwNumPorts;
    // dwDeviceId is the device id of the fax port
    DWORD                dwDeviceId;
    // pRoutingMethod is the pointer to the routing method data structures
    PFAX_ROUTING_METHOD  pRoutingMethods;
    // dwNumMethods is the number of routing methods
    DWORD                dwNumMethods;
    BOOL                 bEnabled;

    // szRouteApiDll is the route api dll
    TCHAR                szRouteApiDll[MAX_PATH];
    // hInstance is the handle to the instance of the route api dll
    HINSTANCE            hInstance;
    // FaxRouteSetRoutingInfo is the pointer to the FaxRouteSetRoutingInfo() function
    FARPROC              FaxRouteSetRoutingInfo;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

    DWORD                dwGetRoutingInfo;
    DWORD                dwSetRoutingInfo;
    LPBYTE               RoutingInfo;
    DWORD                dwRoutingInfoSize;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxGetRoutingInfo().\r\n"));

    ExpandEnvironmentStrings(ROUTEAPI_EXTENSION_IMAGENAME, szRouteApiDll, sizeof(szRouteApiDll) / sizeof(TCHAR));
    if (!lstrcmpi(ROUTEAPI_EXTENSION_IMAGENAME, szRouteApiDll)) {
        return;
    }

    hInstance = LoadLibrary((LPCTSTR) szRouteApiDll);
    if (!hInstance) {
        return;
    }

    FaxRouteSetRoutingInfo = (FARPROC) GetProcAddress(hInstance, "FaxRouteSetRoutingInfo");
    if (!FaxRouteSetRoutingInfo) {
        FreeLibrary(hInstance);
        return;
    } 


    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        FreeLibrary(hInstance);
        return;
    }
	else	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    
	
	// Enumerate the fax ports
    if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not enum ports on server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        FreeLibrary(hInstance);
        return;
    }

    dwDeviceId = pFaxPortInfo[0].DeviceId;

    // Free the fax port info
    g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not open port %d, The error code is 0x%08x.\r\n"),dwDeviceId, GetLastError());
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        FreeLibrary(hInstance);
        return;
    }

    // Set the routing info
    dwSetRoutingInfo = ERROR_INVALID_PARAMETER;
    FaxRouteSetRoutingInfo(ROUTEAPI_METHOD_GUID1_W, dwDeviceId, (LPBYTE) &dwSetRoutingInfo, sizeof(DWORD));

    // Get the routing info
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxGetRoutingInfo(hFaxPortHandle, ROUTEAPI_METHOD_GUID1, &RoutingInfo, &dwRoutingInfoSize)) {
        fnWriteLogFile(TEXT("FaxGetRoutingInfo() failed.  The error code is 0x%08x.  This is an error.  FaxGetRoutingInfo() should succeed.\r\n"), GetLastError());
    }
    else {
        dwGetRoutingInfo = (DWORD) *(LPDWORD *) RoutingInfo;
        if (dwGetRoutingInfo != dwSetRoutingInfo) {
            fnWriteLogFile(TEXT("RoutingInfo: Received: 0x%08x, Expected: 0x%08x.\r\n"), dwGetRoutingInfo, dwSetRoutingInfo);
        }
        else {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
        }

        g_ApiInterface.FaxFreeBuffer(RoutingInfo);
    }

    // Set the routing info
    FaxRouteSetRoutingInfo(ROUTEAPI_METHOD_GUID1_W, dwDeviceId, NULL, 0);

    // Get the routing info
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxGetRoutingInfo(hFaxPortHandle, ROUTEAPI_METHOD_GUID1, &RoutingInfo, &dwRoutingInfoSize)) {
        fnWriteLogFile(TEXT("FaxGetRoutingInfo() failed.  The error code is 0x%08x.  This is an error.  FaxGetRoutingInfo() should succeed.\r\n"), GetLastError());
    }
    else {
        dwGetRoutingInfo = (DWORD) *(LPDWORD *) RoutingInfo;
        if (dwGetRoutingInfo != 0) {
            fnWriteLogFile(TEXT("RoutingInfo: Received: 0x%08x, Expected: 0.\r\n"), dwGetRoutingInfo);
        }
        else {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
        }

        g_ApiInterface.FaxFreeBuffer(RoutingInfo);
    }

    FreeLibrary(hInstance);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxPortHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxGetRoutingInfo(NULL, ROUTEAPI_METHOD_GUID1, &RoutingInfo, &dwRoutingInfoSize)) {
        fnWriteLogFile(TEXT("FaxGetRoutingInfo() returned TRUE.  This is an error.  FaxGetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(RoutingInfo);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxGetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("ROUTEAPI_METHOD_GUID1 = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxGetRoutingInfo(hFaxPortHandle, NULL, &RoutingInfo, &dwRoutingInfoSize)) {
        fnWriteLogFile(TEXT("FaxGetRoutingInfo() returned TRUE.  This is an error.  FaxGetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(RoutingInfo);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxGetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid ROUTEAPI_METHOD_GUID1.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxGetRoutingInfo(hFaxPortHandle, ROUTEAPI_INVALID_GUID, &RoutingInfo, &dwRoutingInfoSize)) {
        fnWriteLogFile(TEXT("FaxGetRoutingInfo() returned TRUE.  This is an error.  FaxGetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), ERROR_INVALID_DATA);
        g_ApiInterface.FaxFreeBuffer(RoutingInfo);
    }
    else if (GetLastError() != ERROR_INVALID_DATA) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxGetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_DATA);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("RoutingInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxGetRoutingInfo(hFaxPortHandle, ROUTEAPI_METHOD_GUID1, NULL, &dwRoutingInfoSize)) {
        fnWriteLogFile(TEXT("FaxGetRoutingInfo() returned TRUE.  This is an error.  FaxGetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(RoutingInfo);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxGetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("RoutingInfoSize = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxGetRoutingInfo(hFaxPortHandle, ROUTEAPI_METHOD_GUID1, &RoutingInfo, NULL)) {
        fnWriteLogFile(TEXT("FaxGetRoutingInfo() returned TRUE.  This is an error.  FaxGetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(RoutingInfo);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxGetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Disconnect from the fax port
    g_ApiInterface.FaxClose(hFaxPortHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxPortHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxGetRoutingInfo(hFaxPortHandle, ROUTEAPI_METHOD_GUID1, &RoutingInfo, &dwRoutingInfoSize)) {
        fnWriteLogFile(TEXT("FaxGetRoutingInfo() returned TRUE.  This is an error.  FaxGetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(RoutingInfo);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxGetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    //if (szServerName) {
	//	fnWriteLogFile(TEXT("WHIS> SERVER CASE(s):\r\n"));
        // Connect to the fax server
      //  if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
        //    return;
//        }

        // Enumerate the fax ports
  //      if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
            // Disconnect from the fax server
    //        g_ApiInterface.FaxClose(hFaxSvcHandle);
      //      return;
//        }

  //      dwDeviceId = pFaxPortInfo[0].DeviceId;

        // Free the fax port info
    //    g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

      //  if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
            // Disconnect from the fax server
        //    g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //if (!g_ApiInterface.FaxEnumRoutingMethods(hFaxPortHandle, &pRoutingMethods, &dwNumMethods)) {
            // Disconnect from the fax port
          //  g_ApiInterface.FaxClose(hFaxPortHandle);
            // Disconnect from the fax server
//            g_ApiInterface.FaxClose(hFaxSvcHandle);
  //          return;
    //    }

      //  (*pnNumCasesAttempted)++;

//        fnWriteLogFile(TEXT("Remote hFaxPortHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
  //      if (!g_ApiInterface.FaxGetRoutingInfo(hFaxPortHandle, pRoutingMethods[g_dwIndexAPIMethod1].Guid, &RoutingInfo, &dwRoutingInfoSize)) {
    //        fnWriteLogFile(TEXT("FaxGetRoutingInfo() failed.  The error code is 0x%08x.  This is an error.  FaxGetRoutingInfo() should succeed.\r\n"), GetLastError());
      //  }
//        else {
  //          g_ApiInterface.FaxFreeBuffer(RoutingInfo);
    //        (*pnNumCasesPassed)++;

      //  }

        //g_ApiInterface.FaxFreeBuffer(pRoutingMethods);

        // Disconnect from the fax port
        //g_ApiInterface.FaxClose(hFaxPortHandle);

        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxGetRoutingInfo, Attempt %d, Pass %d, Fail %d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
}

VOID
fnFaxSetRoutingInfo(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxSetRoutingInfo()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE               hFaxSvcHandle;
    // hFaxPortHandle is the handle to a fax port
    HANDLE               hFaxPortHandle;
    // pFaxPortInfo is the pointer to the fax port info
    PFAX_PORT_INFO       pFaxPortInfo;
    // dwNumPorts is the number of fax ports
    DWORD                dwNumPorts;
    // dwDeviceId is the device id of the fax port
    DWORD                dwDeviceId;
    // pRoutingMethod is the pointer to the routing method data structures
    PFAX_ROUTING_METHOD  pRoutingMethods;
    // dwNumMethods is the number of routing methods
    DWORD                dwNumMethods;
    BOOL                 bEnabled;

    // szRouteApiDll is the route api dll
    TCHAR                szRouteApiDll[MAX_PATH];
    // hInstance is the handle to the instance of the route api dll
    HINSTANCE            hInstance;
    // FaxRouteGetRoutingInfo is the pointer to the FaxRouteGetRoutingInfo() function
    FARPROC              FaxRouteGetRoutingInfo;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

    DWORD                dwGetRoutingInfo;
    DWORD                dwSetRoutingInfo;
    LPBYTE               RoutingInfo;
    DWORD                dwRoutingInfoSize;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxSetRoutingInfo().\r\n"));

    ExpandEnvironmentStrings(ROUTEAPI_EXTENSION_IMAGENAME, szRouteApiDll, sizeof(szRouteApiDll) / sizeof(TCHAR));
    if (!lstrcmpi(ROUTEAPI_EXTENSION_IMAGENAME, szRouteApiDll)) {
        return;
    }

    hInstance = LoadLibrary((LPCTSTR) szRouteApiDll);
    if (!hInstance) {
        return;
    }

    FaxRouteGetRoutingInfo = (FARPROC) GetProcAddress(hInstance, "FaxRouteGetRoutingInfo");
    if (!FaxRouteGetRoutingInfo) {
        FreeLibrary(hInstance);
        return;
    }

	// Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    // Enumerate the fax ports
    if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not enum ports on server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }


    dwDeviceId = pFaxPortInfo[0].DeviceId;

    // Free the fax port info
    g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not open port %d, The error code is 0x%08x.\r\n"),dwDeviceId, GetLastError());
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        FreeLibrary(hInstance);
        return;
    }

    // Set the routing info
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    dwSetRoutingInfo = ERROR_INVALID_PARAMETER;
    if (!g_ApiInterface.FaxSetRoutingInfo(hFaxPortHandle, ROUTEAPI_METHOD_GUID1, (LPBYTE) &dwSetRoutingInfo, sizeof(DWORD))) {
        fnWriteLogFile(TEXT("FaxSetRoutingInfo() failed.  The error code is 0x%08x.  This is an error.  FaxSetRoutingInfo() should succeed.\r\n"), GetLastError());
    }
    else {
        FaxRouteGetRoutingInfo(ROUTEAPI_METHOD_GUID1_W, dwDeviceId, &dwGetRoutingInfo, NULL);

        if (dwGetRoutingInfo != dwSetRoutingInfo) {
            fnWriteLogFile(TEXT("RoutingInfo: Received: 0x%08x, Expected: 0x%08x.\r\n"), dwGetRoutingInfo, dwSetRoutingInfo);
        }
        else {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
        }
    }

    FreeLibrary(hInstance);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("hFaxPortHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSetRoutingInfo(NULL, ROUTEAPI_METHOD_GUID1, (LPBYTE) &dwSetRoutingInfo, sizeof(DWORD))) {
        fnWriteLogFile(TEXT("FaxSetRoutingInfo() returned TRUE.  This is an error.  FaxSetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("ROUTEAPI_METHOD_GUID1 = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSetRoutingInfo(hFaxPortHandle, NULL, (LPBYTE) &dwSetRoutingInfo, sizeof(DWORD))) {
        fnWriteLogFile(TEXT("FaxSetRoutingInfo() returned TRUE.  This is an error.  FaxSetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid ROUTEAPI_METHOD_GUID1.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSetRoutingInfo(hFaxPortHandle, ROUTEAPI_INVALID_GUID, (LPBYTE) &dwSetRoutingInfo, sizeof(DWORD))) {
        fnWriteLogFile(TEXT("FaxSetRoutingInfo() returned TRUE.  This is an error.  FaxSetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), ERROR_INVALID_DATA);
    }
    else if (GetLastError() != ERROR_INVALID_DATA) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_DATA);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Disconnect from the fax port
    g_ApiInterface.FaxClose(hFaxPortHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxPortHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSetRoutingInfo(hFaxPortHandle, ROUTEAPI_METHOD_GUID1, (LPBYTE) &dwSetRoutingInfo, sizeof(DWORD))) {
        fnWriteLogFile(TEXT("FaxSetRoutingInfo() returned TRUE.  This is an error.  FaxSetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> SERVER CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        // Enumerate the fax ports
//        if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
            // Disconnect from the fax server
  //          g_ApiInterface.FaxClose(hFaxSvcHandle);
    //        return;
        //}

        //dwDeviceId = pFaxPortInfo[0].DeviceId;

        // Free the fax port info
        //g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

        //if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
//            return;
  //      }

    //    if (!g_ApiInterface.FaxEnumRoutingMethods(hFaxPortHandle, &pRoutingMethods, &dwNumMethods)) {
      //      // Disconnect from the fax port
        //    g_ApiInterface.FaxClose(hFaxPortHandle);
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

//        if (!g_ApiInterface.FaxGetRoutingInfo(hFaxPortHandle, pRoutingMethods[g_dwIndexAPIMethod1].Guid, &RoutingInfo, &dwRoutingInfoSize)) {
  //          g_ApiInterface.FaxFreeBuffer(pRoutingMethods);
            // Disconnect from the fax port
    //        g_ApiInterface.FaxClose(hFaxPortHandle);
            // Disconnect from the fax server
      //      g_ApiInterface.FaxClose(hFaxSvcHandle);
        //}

        //(*pnNumCasesAttempted)++;
        //fnWriteLogFile(TEXT("Remote hFaxPortHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxSetRoutingInfo(hFaxPortHandle, pRoutingMethods[g_dwIndexAPIMethod1].Guid, RoutingInfo, dwRoutingInfoSize)) {
            //fnWriteLogFile(TEXT("FaxSetRoutingInfo() failed.  The error code is 0x%08x.  This is an error.  FaxSetRoutingInfo() should succeed.\r\n"), GetLastError());
        //}
        //else {
          //  (*pnNumCasesPassed)++;

        //}

        //g_ApiInterface.FaxFreeBuffer(RoutingInfo);

        //g_ApiInterface.FaxFreeBuffer(pRoutingMethods);

        // Disconnect from the fax port
        //g_ApiInterface.FaxClose(hFaxPortHandle);

        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxSetRoutingInfo, Attempt %d, Pass %d, Fail %d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
}


// count number of methods, return by referance: number of methods, index of API method 1/2 (if not found, their index will be 0)
BOOL
fnWhisFaxCountRoutingMethods(
    LPCTSTR  szServerName,
	PDWORD pdwMethodsCount,			// number of methods
	PDWORD pdwIndexAPIMethod1,		// index of API-Method 1
	PDWORD pdwIndexAPIMethod2		// index of API-Method 2

)
/*++

Routine Description:

   Count global methods 

Return Value:

Succeed/Fail


--*/
{
	
    // hFaxSvcHandle is the handle to the fax server
    HANDLE               hFaxSvcHandle;
    // hFaxPortHandle is the handle to a fax port
    HANDLE               hFaxPortHandle;
    // pFaxPortInfo is the pointer to the fax port info
    PFAX_PORT_INFO       pFaxPortInfo;

	// pRoutingInfo is the pointer to the global routing structures
    PFAX_GLOBAL_ROUTING_INFO  pRoutingInfo;

		// dwNumPorts is the number of fax ports
    DWORD                dwNumPorts;
    // dwDeviceId is the device id of the fax port
    DWORD                dwDeviceId;
    // szDeviceName is the device name of the fax port
    LPTSTR               szDeviceName;
    // pRoutingMethod is the pointer to the routing method data structures
    PFAX_ROUTING_METHOD  pRoutingMethods;
    // dwNumMethods is the number of routing methods
    DWORD                dwNumMethods;
	
	// szRouteApiDll is the route api dll
    TCHAR                szRouteApiDll[MAX_PATH];
	// index
    DWORD                dwIndex;
	// index for enumerating methods
	DWORD				 dwIndexAPI;

    fnWriteLogFile(TEXT("WHIS> UTIL SERVICE: Counting global methods...\r\n"));



	



    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> UTIL FUNCTION ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		(*pdwMethodsCount)=0;
        return FALSE;
    }
	else	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    // Enumerate the fax ports
    if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> UTIL FUNCTION ERROR: Can not enum ports on server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		(*pdwMethodsCount)=0;
        return FALSE;
    }

    // allocate heap for device name
	dwDeviceId = pFaxPortInfo[0].DeviceId;
    szDeviceName = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(pFaxPortInfo[0].DeviceName) + 1) * sizeof(TCHAR));
    lstrcpy(szDeviceName, pFaxPortInfo[0].DeviceName);

    // Free the fax port info
    g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

    // open port
	if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
		fnWriteLogFile(TEXT("WHIS> UTIL FUNCTION ERROR: Can not open port %d, The error code is 0x%08x.\r\n"),dwDeviceId, GetLastError());
		HeapFree(g_hHeap, 0, szDeviceName);
		g_ApiInterface.FaxClose(hFaxSvcHandle);
		(*pdwMethodsCount)=0;
		return FALSE;
    }

   	// enumarate global methods
	if (!g_ApiInterface.FaxEnumGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo, &dwNumMethods)) {
        fnWriteLogFile(TEXT("WHIS> UTIL FUNCTION ERROR: Could not enum global routing extensions, The error code is 0x%08x.  This is an error.  FaxEnumGlobalRoutingInfo() should succeed.\r\n"), GetLastError());
		HeapFree(g_hHeap, 0, szDeviceName);
		g_ApiInterface.FaxClose(hFaxSvcHandle);
		(*pdwMethodsCount)=0;
		return FALSE;
    }

	// get the index number of the 1st API extension and the 2nd API extension
	for (dwIndexAPI=0;dwIndexAPI<g_dwNumMethods;dwIndexAPI++)	{
		if (lstrcmp(pRoutingInfo[dwIndexAPI].Guid, ROUTEAPI_METHOD_GUID1)==0) {
		(*pdwIndexAPIMethod1)=dwIndexAPI;
		}
		
		if (lstrcmp(pRoutingInfo[dwIndexAPI].Guid, ROUTEAPI_METHOD_GUID2)==0) {
		(*pdwIndexAPIMethod2)=dwIndexAPI;
		}
	}
	
	HeapFree(g_hHeap, 0, szDeviceName);
	g_ApiInterface.FaxClose(hFaxSvcHandle);
	(*pdwMethodsCount)=dwNumMethods;
	return TRUE;
}










BOOL WINAPI
FaxAPIDllTest(
	LPCWSTR  szWhisPhoneNumberW,
	LPCSTR   szWhisPhoneNumberA,
    LPCWSTR  szServerNameW,
    LPCSTR   szServerNameA,
    UINT     nNumCasesLocal,
    UINT     nNumCasesServer,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	DWORD	 dwTestMode
)
{
    LPCTSTR  szServerName;
    UINT     nNumCases;
	DWORD	 dwNumMethods;
	DWORD	dwIndexAPIMethod1=0;
	DWORD	dwIndexAPIMethod2=0;

#ifdef UNICODE
    szServerName = szServerNameW;
#else
    szServerName = szServerNameA;
#endif

    if (szServerName) {
        nNumCases = nNumCasesServer;
		fnWriteLogFile(TEXT("WHIS> REMOTE SERVER MODE:\r\n"));
    }
    else {
        nNumCases = nNumCasesLocal;
    }

	
	
	// routing extension
	// -----------------

	// count number of global methods before adding API methods
	if (!fnWhisFaxCountRoutingMethods(szServerName,&dwNumMethods,&dwIndexAPIMethod1,&dwIndexAPIMethod2))	{
		fnWriteLogFile(TEXT("Could not count routing extensions, error code is The error code is 0x%08x\r\n"),GetLastError());
	}
	
	fnWriteLogFile(TEXT("WHIS> number of global methods: %d.\r\n"),dwNumMethods);
	fnWriteLogFile(TEXT("WHIS> 1st API Method index: %d.\r\n"),dwIndexAPIMethod1);
	fnWriteLogFile(TEXT("WHIS> 2nd API Method index: %d.\r\n"),dwIndexAPIMethod2);


									// this program assumes that
	g_dwNumMethods=dwNumMethods+2;  // global number of methods should be 2 more then current found 
									// (2 more extension will be added in the next 2 lines of this section)
							
	

	// FaxRegisterRoutingExtension()
    fnFaxRegisterRoutingExtension(szServerName, pnNumCasesAttempted, pnNumCasesPassed);
	
	// add route api extension DLL
	fnAddRouteApiExtension();
    
	// stop the service
	if (!fnStopFaxSvc()) {
        fnWriteLogFile(TEXT("Could not stop the Fax Service.\r\n"));
        return FALSE;
    }

	// re-count number of global methods (new value should be 2 more then previous count)
	if (!fnWhisFaxCountRoutingMethods(szServerName,&dwNumMethods,&dwIndexAPIMethod1,&dwIndexAPIMethod2))	{
		fnWriteLogFile(TEXT("Could not count routing extensions, error code is The error code is 0x%08x\r\n"),GetLastError());
	}

	fnWriteLogFile(TEXT("WHIS> number of global methods: %d.\r\n"),dwNumMethods);
	fnWriteLogFile(TEXT("WHIS> 1st API Method index: %d.\r\n"),dwIndexAPIMethod1);
	fnWriteLogFile(TEXT("WHIS> 2nd API Method index: %d.\r\n"),dwIndexAPIMethod2);

	
	// test if there are 2 new methods to do the test on
	if (g_dwNumMethods==dwNumMethods && dwIndexAPIMethod1 > 0 && dwIndexAPIMethod2 > 0)	{
		g_dwIndexAPIMethod1=dwIndexAPIMethod1;
		g_dwIndexAPIMethod2=dwIndexAPIMethod2;
	
		 
		// FaxEnumGlobalRoutingInfo()
		fnFaxEnumGlobalRoutingInfo(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

		// FaxSetGlobalRoutingInfo()
		if (dwTestMode == WHIS_TEST_MODE_LIMITS)	{
			fnFaxSetGlobalRoutingInfo(szServerName, pnNumCasesAttempted, pnNumCasesPassed,TRUE);
		}
		else	{
			fnFaxSetGlobalRoutingInfo(szServerName, pnNumCasesAttempted, pnNumCasesPassed,FALSE);
		}


		// FaxEnumRoutingMethods()
		fnFaxEnumRoutingMethods(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

		// FaxEnableRoutingMethod()
		fnFaxEnableRoutingMethod(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

		// FaxGetRoutingInfo()
		fnFaxGetRoutingInfo(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

		// FaxSetRoutingInfo()
		fnFaxSetRoutingInfo(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

		if (!fnStopFaxSvc()) {
			fnWriteLogFile(TEXT("Could not stop the Fax Service.\r\n"));
			return FALSE;
		}
	} // of do actual routeext testing
	else	{
		// incorrect number of methods, or 0 indexes for the API methods
		fnWriteLogFile(TEXT("WHIS> ERROR: Incorrect Methods Configuration, WILL NOT TEST\r\n"));
	}


	// remove API extension
	fnRemoveRouteApiExtension();
	

	// service provider
	// ----------------

	// FaxRegisterServiceProvider()
    fnFaxRegisterServiceProvider(szServerName, pnNumCasesAttempted, pnNumCasesPassed);
	


    if ((*pnNumCasesAttempted == nNumCases) && (*pnNumCasesPassed == *pnNumCasesAttempted)) {
        return TRUE;
    }
    else {
        return FALSE;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legacywin32\portsapi\portsapi.c ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

  confgapi.c

Abstract:

  PortsApi: Fax API Test Dll: Client Port Configuration APIs
    1) FaxEnumPorts()
    2) FaxOpenPort()
    3) FaxGetPort()
    4) FaxSetPort()
    5) FaxGetDeviceStatus()

Author:

  Steven Kehrli (steveke) 8/28/1998

--*/

/*++

  Whistler Version:

  Lior Shmueli (liors) 23/11/2000

 ++*/

#include <wtypes.h>

#include "dllapi.h"

// g_hHeap is the handle to the heap
HANDLE           g_hHeap = NULL;
// g_ApiInterface is the API_INTERFACE structure
API_INTERFACE    g_ApiInterface;
// fnWriteLogFile is the pointer to the function to write a string to the log file
PFNWRITELOGFILE  fnWriteLogFile = NULL;

#define FAXDEVICES_REGKEY    TEXT("Software\\Microsoft\\Fax\\Devices")
#define DEVICEID_REGVALUE    TEXT("Permanent Lineid")
#define FLAGS_REGVALUE       TEXT("Flags")
#define RINGS_REGVALUE       TEXT("Rings")
#define PRIORITY_REGVALUE    TEXT("Priority")
#define DEVICENAME_REGVALUE  TEXT("Device Name")
#define TSID_REGVALUE        TEXT("TSID")
#define CSID_REGVALUE        TEXT("CSID")

DWORD
DllEntry(
    HINSTANCE  hInstance,
    DWORD      dwReason,
    LPVOID     pContext
)
/*++

Routine Description:

  DLL entry point

Arguments:

  hInstance - handle to the module
  dwReason - indicates the reason for being called
  pContext - context

Return Value:

  TRUE on success

--*/
{
    return TRUE;
}

VOID WINAPI
FaxAPIDllInit(
    HANDLE            hHeap,
    API_INTERFACE     ApiInterface,
    PFNWRITELOGFILEW  pfnWriteLogFileW,
    PFNWRITELOGFILEA  pfnWriteLogFileA
)
{
    // Set g_hHeap
    g_hHeap = hHeap;
    // Set g_ApiInterface
    g_ApiInterface = ApiInterface;
#ifdef UNICODE
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileW;
#else
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileA;
#endif

    return;
}

BOOL
fnRegQueryDword(
    HKEY     hKey,
    LPTSTR   szValue,
    LPDWORD  pdwData
)
/*++

Routine Description:

  Queries a Registry data as a REG_DWORD

Arguments:

  hKey - handle to the Registry key
  szValue - value to be queried
  pdwData - pointer to the data to be queried

Return Value:

  TRUE on success

--*/
{
    DWORD  cb;

    cb = sizeof(DWORD);
    if (RegQueryValueEx(hKey, szValue, NULL, NULL, (PBYTE) pdwData, &cb)) {
        *pdwData = 0;
        return FALSE;
    }

    return TRUE;
}

BOOL
fnRegQuerySz(
    HKEY    hKey,
    LPTSTR  szValue,
    LPTSTR  *pszData
)
/*++

Routine Description:

  Queries a Registry data as a REG_SZ

Arguments:

  hKey - handle to the Registry key
  szValue - value to be queried
  pszData - pointer to the data to be queried

Return Value:

  TRUE on success

--*/
{
    DWORD  cb;

    cb = 0;
    // Determine the memory required by pszData
    if (RegQueryValueEx(hKey, szValue, NULL, NULL, NULL, &cb)) {
        return FALSE;
    }

    if (!cb) {
        *pszData = NULL;
        return TRUE;
    }

    // Allocate the memory for pszData
    *pszData = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, cb);

    if (RegQueryValueEx(hKey, szValue, NULL, NULL, (PBYTE) *pszData, &cb)) {
        HeapFree(g_hHeap, 0, *pszData);
        *pszData = NULL;
        return FALSE;
    }

    return TRUE;
}

BOOL
fnVerifyPorts(
    PFAX_PORT_INFO  pFaxPortInfo,
    DWORD           dwNumPorts
)
/*++

Routine Description:

  Verifies the fax port info vs. the registry

Arguments:

  pFaxPortInfo - pointer to the fax port info
  dwNumPorts - number of fax ports

Return Value:

  None

--*/
{
    // hFaxDevicesKey is the handle to the fax devices registry key
    HKEY    hFaxDevicesKey;
    // hFaxPortKey is the handle to the fax port registry key
    HKEY    hFaxPortKey;
    // szPortKey is the name of the fax port registry key
    TCHAR   szPortKey[9];
    // szValue is the registry value (REG_SZ)
    LPTSTR  szValue;
    // dwValue is the registry value (REG_DWORD)
    DWORD   dwValue;

    DWORD   dwIndex;

    if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, FAXDEVICES_REGKEY, 0, KEY_ALL_ACCESS, &hFaxDevicesKey)) {
        fnWriteLogFile(TEXT("Could not open the Registry Key %s, ec = 0x%08x.  This is an error.\r\n"), FAXDEVICES_REGKEY, GetLastError());
        goto RegFailed0;
    }

    for (dwIndex = 0; dwIndex < dwNumPorts; dwIndex++) {
        // Initialize the string representation of the DeviceId
        ZeroMemory(szPortKey, sizeof(szPortKey));
        // Set the string representation of the DeviceId
        wsprintf(szPortKey, TEXT("%08u"), pFaxPortInfo[dwIndex].DeviceId);

        if (RegOpenKeyEx(hFaxDevicesKey, szPortKey, 0, KEY_ALL_ACCESS, &hFaxPortKey)) {
            fnWriteLogFile(TEXT("Could not open the Registry Key %s, ec = 0x%08x.  This is an error.\r\n"), szPortKey, GetLastError());
            goto RegFailed1;
        }

        if (pFaxPortInfo[dwIndex].SizeOfStruct != sizeof(FAX_PORT_INFO)) {
            fnWriteLogFile(TEXT("SizeOfStruct: Received: %d, Expected: %d.  This is an error.\r\n"), pFaxPortInfo[dwIndex].SizeOfStruct, sizeof(FAX_PORT_INFO));
            goto RegFailed2;
        }

        if (!fnRegQueryDword(hFaxPortKey, DEVICEID_REGVALUE, &dwValue)) {
            fnWriteLogFile(TEXT("Could not query the Registry Value %s, ec = 0x%08x.  This is an error.\r\n"), DEVICEID_REGVALUE, GetLastError());
            goto RegFailed2;
        }
        if (pFaxPortInfo[dwIndex].DeviceId != dwValue) {
            fnWriteLogFile(TEXT("DeviceId: Received: 0x%08x, Expected: 0x%08x.  This is an error.\r\n"), dwValue, pFaxPortInfo[dwIndex].DeviceId);
            goto RegFailed2;
        }

        if (!fnRegQueryDword(hFaxPortKey, FLAGS_REGVALUE, &dwValue)) {
            fnWriteLogFile(TEXT("Could not query the Registry Value %s, ec = 0x%08x.  This is an error.\r\n"), FLAGS_REGVALUE, GetLastError());
            goto RegFailed2;
        }
        if (pFaxPortInfo[dwIndex].Flags != dwValue) {
            fnWriteLogFile(TEXT("Flags: Received: %d, Expected: %d.  This is an error.\r\n"), dwValue, pFaxPortInfo[dwIndex].Flags);
            goto RegFailed2;
        }

        if (!fnRegQueryDword(hFaxPortKey, RINGS_REGVALUE, &dwValue)) {
            fnWriteLogFile(TEXT("Could not query the Registry Value %s, ec = 0x%08x.  This is an error.\r\n"), RINGS_REGVALUE, GetLastError());
            goto RegFailed2;
        }
        if (pFaxPortInfo[dwIndex].Rings != dwValue) {
            fnWriteLogFile(TEXT("Rings: Received: %d, Expected: %d.  This is an error.\r\n"), dwValue, pFaxPortInfo[dwIndex].Rings);
            goto RegFailed2;
        }

        if (!fnRegQueryDword(hFaxPortKey, PRIORITY_REGVALUE, &dwValue)) {
            fnWriteLogFile(TEXT("Could not query the Registry Value %s, ec = 0x%08x.  This is an error.\r\n"), PRIORITY_REGVALUE, GetLastError());
            goto RegFailed2;
        }
        if (pFaxPortInfo[dwIndex].Priority != dwValue) {
            fnWriteLogFile(TEXT("Priority: Received: %d, Expected: %d.  This is an error.\r\n"), dwValue, pFaxPortInfo[dwIndex].Priority);
            goto RegFailed2;
        }

        if (!fnRegQuerySz(hFaxPortKey, DEVICENAME_REGVALUE, &szValue)) {
            fnWriteLogFile(TEXT("Could not query the Registry Value %s, ec = 0x%08x.  This is an error.\r\n"), DEVICENAME_REGVALUE, GetLastError());
            goto RegFailed2;
        }
        if (lstrcmp(pFaxPortInfo[dwIndex].DeviceName, szValue)) {
            fnWriteLogFile(TEXT("DeviceName: Received: %s, Expected: %s.  This is an error.\r\n"), szValue, pFaxPortInfo[dwIndex].DeviceName);
            if (szValue) {
                HeapFree(g_hHeap, 0, szValue);
            }
            goto RegFailed2;
        }
        if (szValue) {
            HeapFree(g_hHeap, 0, szValue);
        }

        if (!fnRegQuerySz(hFaxPortKey, TSID_REGVALUE, &szValue)) {
            fnWriteLogFile(TEXT("Could not query the Registry Value %s, ec = 0x%08x.  This is an error.\r\n"), TSID_REGVALUE, GetLastError());
            goto RegFailed2;
        }
        if (lstrcmp(pFaxPortInfo[dwIndex].Tsid, szValue)) {
            fnWriteLogFile(TEXT("Tsid: Received: %s, Expected: %s.  This is an error.\r\n"), szValue, pFaxPortInfo[dwIndex].Tsid);
            if (szValue) {
                HeapFree(g_hHeap, 0, szValue);
            }
            goto RegFailed2;
        }
        if (szValue) {
            HeapFree(g_hHeap, 0, szValue);
        }

        if (!fnRegQuerySz(hFaxPortKey, CSID_REGVALUE, &szValue)) {
            fnWriteLogFile(TEXT("Could not query the Registry Value %s, ec = 0x%08x.  This is an error.\r\n"), CSID_REGVALUE, GetLastError());
            goto RegFailed2;
        }
        if (lstrcmp(pFaxPortInfo[dwIndex].Csid, szValue)) {
            fnWriteLogFile(TEXT("Csid: Received: %s, Expected: %s.  This is an error.\r\n"), szValue, pFaxPortInfo[dwIndex].Csid);
            if (szValue) {
                HeapFree(g_hHeap, 0, szValue);
            }
            goto RegFailed2;
        }
        if (szValue) {
            HeapFree(g_hHeap, 0, szValue);
        }

        RegCloseKey(hFaxPortKey);
    }

    RegCloseKey(hFaxDevicesKey);

    return TRUE;

RegFailed2:
    RegCloseKey(hFaxPortKey);

RegFailed1:
    RegCloseKey(hFaxDevicesKey);

RegFailed0:
    return FALSE;
}

VOID
fnFaxEnumPorts(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxEnumPorts()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE          hFaxSvcHandle;
    // pFaxPortInfo is the pointer to the fax port info
    PFAX_PORT_INFO  pFaxPortInfo;
    // dwNumPorts is the number of fax ports
    DWORD           dwNumPorts;

    DWORD           dwIndex;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxEnumPorts().\r\n"));



 
    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    for (dwIndex = 0; dwIndex < 2; dwIndex++) {
        // Enumerate the fax ports
        (*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

        fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
            fnWriteLogFile(TEXT("FaxEnumPorts() failed.  The error code is 0x%08x.  This is an error.  FaxEnumPorts() should succeed.\r\n"), GetLastError());
        }
        else {
            if (pFaxPortInfo == NULL) {
                fnWriteLogFile(TEXT("pFaxPortInfo is NULL.  This is an error.  pFaxPortInfo should not be NULL.\r\n"));
            }

            if (dwNumPorts == 0) {
                fnWriteLogFile(TEXT("dwNumPorts is 0.  This is an error.  dwNumPorts should not be 0.\r\n"));
            }

            if ((pFaxPortInfo != NULL) && (dwNumPorts != 0)) {
                if (fnVerifyPorts(pFaxPortInfo, dwNumPorts)) {
                    (*pnNumCasesPassed)++;
					dwFuncCasesPass++;
                }
            }

            g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
        }
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxEnumPorts(NULL, &pFaxPortInfo, &dwNumPorts)) {
        fnWriteLogFile(TEXT("FaxEnumPorts() returned TRUE.  This is an error.  FaxEnumPorts() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxEnumPorts() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pFaxPortInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, NULL, &dwNumPorts)) {
        fnWriteLogFile(TEXT("FaxEnumPorts() returned TRUE.  This is an error.  FaxEnumPorts() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxEnumPorts() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("dwNumPorts = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, NULL)) {
        fnWriteLogFile(TEXT("FaxEnumPorts() returned TRUE.  This is an error.  FaxEnumPorts() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxEnumPorts() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
        fnWriteLogFile(TEXT("FaxEnumPorts() returned TRUE.  This is an error.  FaxEnumPorts() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxEnumPorts() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

 //   if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
          //  fnWriteLogFile(TEXT("FaxEnumPorts() failed.  The error code is 0x%08x.  This is an error.  FaxEnumPorts() should succeed.\r\n"), GetLastError());
        //}
        //else {
          //  g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
//            (*pnNumCasesPassed)++;
//			dwFuncCasesPass++;
  //      }

        // Disconnect from the fax server
    //    g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxEnumPorts, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
}

VOID
fnFaxOpenPort(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxOpenPort()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE          hFaxSvcHandle;
    // hFaxPortHandle is the handle to a fax port
    HANDLE          hFaxPortHandle;
    // hFaxPortHandle2 is the second handle to a fax port
    HANDLE          hFaxPortHandle2;
    // pFaxPortInfo is the pointer to the fax port info
    PFAX_PORT_INFO  pFaxPortInfo;
    // dwNumPorts is the number of fax ports
    DWORD           dwNumPorts;
    // dwDeviceId is the device id of the fax port
    DWORD           dwDeviceId;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxOpenPort().\r\n"));


    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    // Enumerate the fax ports
    if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not enumerate ports on server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    dwDeviceId = pFaxPortInfo[0].DeviceId;

    // Free the fax port info
    g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

    // Open the fax port
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (PORT_OPEN_QUERY).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
        fnWriteLogFile(TEXT("FaxOpenPort() failed.  The error code is 0x%08x.  This is an error.  FaxOpenPort() should succeed.\r\n"), GetLastError());
    }
    else {
        if (hFaxPortHandle == NULL) {
            fnWriteLogFile(TEXT("hFaxPortHandle is NULL.  This is an error.  hFaxPortHandle should not be NULL.\r\n"));
        }
        else {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;

            (*pnNumCasesAttempted)++;
			dwFuncCasesAtt++;

            fnWriteLogFile(TEXT("hFaxPortHandle already open (PORT_OPEN_QUERY).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
            if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle2)) {
                fnWriteLogFile(TEXT("FaxOpenPort() failed.  The error code is 0x%08x.  This is an error.  FaxOpenPort() should succeed.\r\n"), GetLastError());
            }
            else {
                g_ApiInterface.FaxClose(hFaxPortHandle2);
                (*pnNumCasesPassed)++;
				dwFuncCasesPass++;
            }

            (*pnNumCasesAttempted)++;
			dwFuncCasesAtt++;

            fnWriteLogFile(TEXT("hFaxPortHandle already open (PORT_OPEN_MODIFY).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
            if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_MODIFY, &hFaxPortHandle2)) {
                fnWriteLogFile(TEXT("FaxOpenPort() failed.  The error code is 0x%08x.  This is an error.  FaxOpenPort() should succeed.\r\n"), GetLastError());
            }
            else {
                g_ApiInterface.FaxClose(hFaxPortHandle2);
                (*pnNumCasesPassed)++;
				dwFuncCasesPass++;
            }

            g_ApiInterface.FaxClose(hFaxPortHandle);
        }
    }

    // Open the fax port
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (PORT_OPEN_MODIFY).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_MODIFY, &hFaxPortHandle)) {
        fnWriteLogFile(TEXT("FaxOpenPort() failed.  The error code is 0x%08x.  This is an error.  FaxOpenPort() should succeed.\r\n"), GetLastError());
    }
    else {
        if (hFaxPortHandle == NULL) {
            fnWriteLogFile(TEXT("hFaxPortHandle is NULL.  This is an error.  hFaxPortHandle should not be NULL.\r\n"));
        }
        else {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;

            (*pnNumCasesAttempted)++;
			dwFuncCasesAtt++;

            fnWriteLogFile(TEXT("hFaxPortHandle already open (PORT_OPEN_QUERY).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
            if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle2)) {
                fnWriteLogFile(TEXT("FaxOpenPort() failed.  The error code is 0x%08x.  This is an error.  FaxOpenPort() should succeed.\r\n"), GetLastError());
            }
            else {
                g_ApiInterface.FaxClose(hFaxPortHandle2);
                (*pnNumCasesPassed)++;
				dwFuncCasesPass++;
            }

            (*pnNumCasesAttempted)++;
			dwFuncCasesAtt++;

            fnWriteLogFile(TEXT("hFaxPortHandle already open (PORT_OPEN_MODIFY).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
            if (g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_MODIFY, &hFaxPortHandle2)) {
                fnWriteLogFile(TEXT("FaxOpenPort() returned TRUE.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
                g_ApiInterface.FaxClose(hFaxPortHandle2);
            }
            else if (GetLastError() != ERROR_INVALID_HANDLE) {
                fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
            }
            else {
                (*pnNumCasesPassed)++;
				dwFuncCasesPass++;
            }

            g_ApiInterface.FaxClose(hFaxPortHandle);    
        }
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxOpenPort(NULL, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
        fnWriteLogFile(TEXT("FaxOpenPort() returned TRUE.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxClose(hFaxPortHandle);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("dwDeviceId = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxOpenPort(hFaxSvcHandle, 0, PORT_OPEN_QUERY, &hFaxPortHandle)) {
        fnWriteLogFile(TEXT("FaxOpenPort() returned TRUE.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_BAD_UNIT (0x%08x).\r\n"), ERROR_BAD_UNIT);
        g_ApiInterface.FaxClose(hFaxPortHandle);
    }
    else if (GetLastError() != ERROR_BAD_UNIT) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_BAD_UNIT (0x%08x).\r\n"), GetLastError(), ERROR_BAD_UNIT);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Flags = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, 0, &hFaxPortHandle)) {
        fnWriteLogFile(TEXT("FaxOpenPort() returned TRUE.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxClose(hFaxPortHandle);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxPortHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, NULL)) {
        fnWriteLogFile(TEXT("FaxOpenPort() returned TRUE.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxClose(hFaxPortHandle);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
        fnWriteLogFile(TEXT("FaxOpenPort() returned TRUE.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxClose(hFaxPortHandle);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        //if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //dwDeviceId = pFaxPortInfo[0].DeviceId;

        // Free the fax port info
        //g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
          //  fnWriteLogFile(TEXT("FaxOpenPort() failed.  The error code is 0x%08x.  This is an error.  FaxOpenPort() should succeed.\r\n"), GetLastError());
        //}
        //else {
          //  g_ApiInterface.FaxClose(hFaxPortHandle);
//            (*pnNumCasesPassed)++;
//			dwFuncCasesPass++;
  //      }

        // Disconnect from the fax server
    //    g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxOpenPort, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
}

VOID
fnFaxGetPort(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxGetPort()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE          hFaxSvcHandle;
    // hFaxPortHandle is the handle to a fax port
    HANDLE          hFaxPortHandle;
    // pFaxPortInfo is the pointer to the fax port info
    PFAX_PORT_INFO  pFaxPortInfo;
    // dwNumPorts is the number of fax ports
    DWORD           dwNumPorts;
    // dwDeviceId is the device id of the fax port
    DWORD           dwDeviceId;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxGetPort().\r\n"));

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    // Enumerate the fax ports
    if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not enumerate ports on server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    dwDeviceId = pFaxPortInfo[0].DeviceId;

    // Free the fax port info
    g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

    // Open the fax port
    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not open fax port %d, The error code is 0x%08x.\r\n"),dwDeviceId, GetLastError());
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    // Get the fax port info
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (PORT_OPEN_QUERY).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxGetPort(hFaxPortHandle, &pFaxPortInfo)) {
        fnWriteLogFile(TEXT("FaxGetPort() failed.  The error code is 0x%08x.  This is an error.  FaxGetPort() should succeed.\r\n"), GetLastError());
    }
    else {
        if (pFaxPortInfo == NULL) {
            fnWriteLogFile(TEXT("pFaxPortInfo is NULL.  This is an error.  pFaxPortInfo should not be NULL.\r\n"));
        }
        else {
            if (fnVerifyPorts(pFaxPortInfo, 1)) {
                (*pnNumCasesPassed)++;
				dwFuncCasesPass++;
            }

            g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
        }
    }

    g_ApiInterface.FaxClose(hFaxPortHandle);

    // Open the fax port
    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_MODIFY, &hFaxPortHandle)) {
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    // Get the fax port info
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (PORT_OPEN_MODIFY).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxGetPort(hFaxPortHandle, &pFaxPortInfo)) {
        fnWriteLogFile(TEXT("FaxGetPort() failed.  The error code is 0x%08x.  This is an error.  FaxGetPort() should succeed.\r\n"), GetLastError());
    }
    else {
        if (pFaxPortInfo == NULL) {
            fnWriteLogFile(TEXT("pFaxPortInfo is NULL.  This is an error.  pFaxPortInfo should not be NULL.\r\n"));
        }
        else {
            if (fnVerifyPorts(pFaxPortInfo, 1)) {
                (*pnNumCasesPassed)++;
				dwFuncCasesPass++;
            }

            g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
        }
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxPortHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxGetPort(NULL, &pFaxPortInfo)) {
        fnWriteLogFile(TEXT("FaxGetPort() returned TRUE.  This is an error.  FaxGetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxGetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pFaxPortInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxGetPort(hFaxPortHandle, NULL)) {
        fnWriteLogFile(TEXT("FaxGetPort() returned TRUE.  This is an error.  FaxGetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxGetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxPortHandle = hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxGetPort(hFaxSvcHandle, &pFaxPortInfo)) {
        fnWriteLogFile(TEXT("FaxGetPort() returned TRUE.  This is an error.  FaxGetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxGetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Disconnect from the fax port
    g_ApiInterface.FaxClose(hFaxPortHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxPortHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxGetPort(hFaxPortHandle, &pFaxPortInfo)) {
        fnWriteLogFile(TEXT("FaxGetPort() returned TRUE.  This is an error.  FaxGetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxGetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        // Enumerate the fax ports
        //if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //dwDeviceId = pFaxPortInfo[0].DeviceId;

        // Free the fax port info
        //g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

        // Open the fax port
        //if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxGetPort(hFaxPortHandle, &pFaxPortInfo)) {
          //  fnWriteLogFile(TEXT("FaxGetPort() failed.  The error code is 0x%08x.  This is an error.  FaxGetPort() should succeed.\r\n"), GetLastError());
        //}
        //else {
            //g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
            //(*pnNumCasesPassed)++;
			//dwFuncCasesPass++;
        //}

        // Disconnect from the fax port
        //g_ApiInterface.FaxClose(hFaxPortHandle);
        // Disconnect from the fax server
    //    g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxGetPort, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
}


VOID
fnFaxSetPort(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	BOOL	 bTestLimits
)
/*++

Routine Description:

  FaxSetPort()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE          hFaxSvcHandle;
    // hFaxPortHandle is the handle to a fax port
    HANDLE          hFaxPortHandle;
    // pFaxPortInfo is the pointer to the fax port info
    PFAX_PORT_INFO  pFaxPortInfo;
    // pCopyFaxPortInfo is the pointer to the copy of the fax port info
    PFAX_PORT_INFO  pCopyFaxPortInfo;
    // dwNumPorts is the number of fax ports
    DWORD           dwNumPorts;
    // dwDeviceId is the device id of the fax port
    DWORD           dwDeviceId;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


    DWORD           cb;
    DWORD           dwOffset;
	DWORD			dwTempValue=0;


	fnWriteLogFile(TEXT("\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxSetPort().\r\n"));

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    // Enumerate the fax ports
    if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not enumerate ports on server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    dwDeviceId = pFaxPortInfo[0].DeviceId;

    // Free the fax port info
    g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

    // Open the fax port
    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not open fax port %d, The error code is 0x%08x.\r\n"),dwDeviceId, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    // Get the fax port info
    if (!g_ApiInterface.FaxGetPort(hFaxPortHandle, &pFaxPortInfo)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not get port info, The error code is 0x%08x.\r\n"),GetLastError());
        // Disconnect from the fax port
        g_ApiInterface.FaxClose(hFaxPortHandle);
        // Disconnect from the fax server
        return;
    }

    // Set the fax port info
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Flags = PORT_OPEN_QUERY.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
        fnWriteLogFile(TEXT("FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_ACCESS_DENIED (0x%08x).\r\n"), ERROR_ACCESS_DENIED);
    }
    else if (GetLastError() != ERROR_ACCESS_DENIED) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_ACCESS_DENIED (0x%08x).\r\n"), GetLastError(), ERROR_ACCESS_DENIED);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Disconnect from the fax port
    g_ApiInterface.FaxClose(hFaxPortHandle);

    // Open the fax port
    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_MODIFY, &hFaxPortHandle)) {
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    cb = sizeof(FAX_PORT_INFO);
    if (pFaxPortInfo->DeviceName) {
        cb += (lstrlen(pFaxPortInfo->DeviceName) + 1) * sizeof(TCHAR);
    }
    if (pFaxPortInfo->Tsid) {
        cb += (lstrlen(pFaxPortInfo->Tsid) + 1) * sizeof(TCHAR);
    }
    if (pFaxPortInfo->Csid) {
        cb += (lstrlen(pFaxPortInfo->Csid) + 1) * sizeof(TCHAR);
    }

    pCopyFaxPortInfo = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, cb);
    dwOffset = sizeof(FAX_PORT_INFO);

    pCopyFaxPortInfo->SizeOfStruct = pFaxPortInfo->SizeOfStruct;

	pCopyFaxPortInfo->DeviceId = pFaxPortInfo->DeviceId;
	pCopyFaxPortInfo->State = pFaxPortInfo->State;

	if ((pFaxPortInfo->Flags & FPF_RECEIVE) && (pFaxPortInfo->Flags & FPF_SEND)) {
		pCopyFaxPortInfo->Flags = 0;
	}
	else if (pFaxPortInfo->Flags & FPF_RECEIVE) {
	    pCopyFaxPortInfo->Flags = FPF_SEND;
	}
	else if (pFaxPortInfo->Flags & FPF_SEND) {
		pCopyFaxPortInfo->Flags = FPF_RECEIVE;
	}
	else {
	    pCopyFaxPortInfo->Flags = FPF_RECEIVE & FPF_SEND;
    }

	pCopyFaxPortInfo->Rings = pFaxPortInfo->Rings + 1;
	if (dwNumPorts > 1) {
		pCopyFaxPortInfo->Priority = pFaxPortInfo->Priority + 1;
	}
	else {
		pCopyFaxPortInfo->Priority = pFaxPortInfo->Priority;
	}


	if (pFaxPortInfo->DeviceName) {
        pCopyFaxPortInfo->DeviceName = (LPTSTR) ((DWORD) pCopyFaxPortInfo + dwOffset);
        lstrcpy((LPTSTR) pCopyFaxPortInfo->DeviceName, pFaxPortInfo->DeviceName);
        dwOffset += (lstrlen(pCopyFaxPortInfo->DeviceName) + 1) * sizeof(TCHAR);
    }

    if (pFaxPortInfo->Csid) {
        pCopyFaxPortInfo->Tsid = (LPTSTR) ((DWORD) pCopyFaxPortInfo + dwOffset);
        lstrcpy((LPTSTR) pCopyFaxPortInfo->Tsid, pFaxPortInfo->Csid);
        dwOffset += (lstrlen(pCopyFaxPortInfo->Tsid) + 1) * sizeof(TCHAR);
    }

    if (pFaxPortInfo->Tsid) {
        pCopyFaxPortInfo->Csid = (LPTSTR) ((DWORD) pCopyFaxPortInfo + dwOffset);
        lstrcpy((LPTSTR) pCopyFaxPortInfo->Csid, pFaxPortInfo->Tsid);
        dwOffset += (lstrlen(pCopyFaxPortInfo->Csid) + 1) * sizeof(TCHAR);
    }

 	// Set the fax port info
	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

	fnWriteLogFile(TEXT("Valid case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	if (!g_ApiInterface.FaxSetPort(hFaxPortHandle, pCopyFaxPortInfo)) {
        fnWriteLogFile(TEXT("FaxSetPort() failed.  The error code is 0x%08x.  This is an error.  FaxSetPort() should succeed.\r\n"), GetLastError());
    }
    else {
		if (fnVerifyPorts(pCopyFaxPortInfo, 1)) {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
		}
	}

    HeapFree(g_hHeap, 0, pCopyFaxPortInfo);

    // Set the fax port info
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
        fnWriteLogFile(TEXT("FaxSetPort() failed.  The error code is 0x%08x.  This is an error.  FaxSetPort() should succeed.\r\n"), GetLastError());
    }
    else {
        if (fnVerifyPorts(pFaxPortInfo, 1)) {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
        }
    }

    pFaxPortInfo->SizeOfStruct = 0;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pFaxPortInfo->SizeOfStruct = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
        fnWriteLogFile(TEXT("FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }
    pFaxPortInfo->SizeOfStruct = sizeof(FAX_PORT_INFO);

	if (bTestLimits)	{
		
		// size of struct = MAX_DWORD
		pFaxPortInfo->SizeOfStruct = MAX_DWORD;
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxPortInfo->SizeOfStruct = MAX_DWORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		if (g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
	        fnWriteLogFile(TEXT("FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
	    }
	    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		}
		else {
	        (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
	    }
	    pFaxPortInfo->SizeOfStruct = sizeof(FAX_PORT_INFO);
	
		
		// state = MAX_DWORD
		dwTempValue=pFaxPortInfo->DeviceId;
		pFaxPortInfo->DeviceId=MAX_DWORD;
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxPortInfo->DeviceId = MAX_DWORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		if (g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
	        fnWriteLogFile(TEXT("FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
	    }
	    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		}
		else {
	        (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
	    }
	    pFaxPortInfo->DeviceId=dwTempValue;
			
		// state = MAX_DWORD
		dwTempValue=pFaxPortInfo->State;
		pFaxPortInfo->State=MAX_DWORD;
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxPortInfo->State = MAX_DWORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		if (g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
	        fnWriteLogFile(TEXT("FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
	    }
	    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		}
		else {
	        (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
	    }
	    pFaxPortInfo->State=dwTempValue;

		// pCopyFaxPortInfo->Flags = MAX_DWORD
		dwTempValue=pFaxPortInfo->Flags;
		pFaxPortInfo->Flags=MAX_DWORD;
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pCopyFaxPortInfo->Flags = MAX_DWORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		if (g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
	        fnWriteLogFile(TEXT("FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
	    }
	    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		}
		else {
	        (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
	    }
	    pFaxPortInfo->Flags=dwTempValue;


		// rings=MAX_DWORD
		dwTempValue=pFaxPortInfo->Rings;
		pFaxPortInfo->Rings=MAX_DWORD;
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pCopyFaxPortInfo->Rings = MAX_DWORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		if (g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
	        fnWriteLogFile(TEXT("FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
	    }
	    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		}
		else {
	        (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
	    }
	    pFaxPortInfo->Rings=dwTempValue;

		// priority=MAX_DWORD
		dwTempValue=pFaxPortInfo->Priority;
		pFaxPortInfo->Priority=MAX_DWORD;
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pCopyFaxPortInfo->Priority = MAX_DWORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		if (g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
	        fnWriteLogFile(TEXT("FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
	    }
	    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		}
		else {
	        (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
	    }
	    pFaxPortInfo->Priority=dwTempValue;
	}
	
	    
	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

	fnWriteLogFile(TEXT("hFaxPortHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	if (g_ApiInterface.FaxSetPort(NULL, pFaxPortInfo)) {
		fnWriteLogFile(TEXT("FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
	}
	else if (GetLastError() != ERROR_INVALID_HANDLE) {
	    fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
	}
	else {
		(*pnNumCasesPassed)++;
		dwFuncCasesPass++;
	}
	
	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

	fnWriteLogFile(TEXT("pFaxPortInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	if (g_ApiInterface.FaxSetPort(hFaxPortHandle, NULL)) {
		fnWriteLogFile(TEXT("FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
	}
	else if (GetLastError() != ERROR_INVALID_PARAMETER) {
	    fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
	}
	else {
		(*pnNumCasesPassed)++;
		dwFuncCasesPass++;
	}
		
	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

	fnWriteLogFile(TEXT("hFaxPortHandle = hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	if (g_ApiInterface.FaxSetPort(hFaxSvcHandle, pFaxPortInfo)) {
	fnWriteLogFile(TEXT("FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
	}
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Disconnect from the fax port
    g_ApiInterface.FaxClose(hFaxPortHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxPortHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
        fnWriteLogFile(TEXT("FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

//    if (szServerName) {

//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(NULL, &hFaxSvcHandle)) {
    //        return;
      //  }

        // Enumerate the fax ports
//        if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
            // Disconnect from the fax server
  //          g_ApiInterface.FaxClose(hFaxSvcHandle);
    //        return;
        //}

        //dwDeviceId = pFaxPortInfo[0].DeviceId;

        // Free the fax port info
        //g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

        // Open the fax port
        //if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_MODIFY, &hFaxPortHandle)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
//            return;
  //      }

        // Get the fax port info
    //    if (!g_ApiInterface.FaxGetPort(hFaxPortHandle, &pFaxPortInfo)) {
            // Disconnect from the fax port
      //      g_ApiInterface.FaxClose(hFaxPortHandle);
            // Disconnect from the fax server
        //    g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
          //  fnWriteLogFile(TEXT("FaxSetPort() failed.  The error code is 0x%08x.  This is an error.  FaxSetPort() should succeed.\r\n"), GetLastError());
        //}
        //else {
          //  (*pnNumCasesPassed)++;
			//dwFuncCasesPass++;
        //}

        //g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

        // Disconnect from the fax port
        //g_ApiInterface.FaxClose(hFaxPortHandle);
        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxSetPort, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
}



VOID
fnFaxGetDeviceStatus(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxGetDeviceStatus()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE              hFaxSvcHandle;
    // hFaxPortHandle is the handle to a fax port
    HANDLE              hFaxPortHandle;
    // pFaxPortInfo is the pointer to the fax port info
    PFAX_PORT_INFO      pFaxPortInfo;
    // pCopyFaxPortInfo is the pointer to the copy of the fax port info
    PFAX_PORT_INFO      pCopyFaxPortInfo;
    // dwNumPorts is the number of fax ports
    DWORD               dwNumPorts;
    // dwDeviceId is the device id of the fax port
    DWORD               dwDeviceId;
    // szDeviceName is the device name of the fax port
    LPTSTR              szDeviceName;
    // pFaxDeviceStatus is the pointer to the fax device status
    PFAX_DEVICE_STATUS  pFaxDeviceStatus;

    DWORD               dwIndex;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxGetDeviceStatus().\r\n"));

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    // Enumerate the fax ports
    if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not enumerate ports on server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    dwDeviceId = pFaxPortInfo[0].DeviceId;
    szDeviceName = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(pFaxPortInfo[0].DeviceName) + 1) * sizeof(TCHAR));
    lstrcpy(szDeviceName, pFaxPortInfo[0].DeviceName);

    // Free the fax port info
    g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

    // Open the fax port
    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not open fax port %d, The error code is 0x%08x.\r\n"),dwDeviceId, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    for (dwIndex = 0; dwIndex < 2; dwIndex++) {
        // Get the device status
        (*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

        fnWriteLogFile(TEXT("Valid case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        if (!g_ApiInterface.FaxGetDeviceStatus(hFaxPortHandle, &pFaxDeviceStatus)) {
            fnWriteLogFile(TEXT("FaxGetDeviceStatus() failed.  The error code is 0x%08x.  This is an error.  FaxGetDeviceStatus() should succeed.\r\n"), GetLastError());
        }
        else {
            if (pFaxDeviceStatus == NULL) {
                fnWriteLogFile(TEXT("pFaxDeviceStatus is NULL.  This is an error.  pFaxDeviceStatus should not be NULL.\r\n"));
            }
            else {
                if (pFaxDeviceStatus->SizeOfStruct != sizeof(FAX_DEVICE_STATUS)) {
                    fnWriteLogFile(TEXT("SizeOfStruct: Received: %d, Expected: %d.  This is an error.\r\n"), pFaxDeviceStatus->SizeOfStruct, sizeof(FAX_DEVICE_STATUS));
                    goto FuncFailed;
                }

                if (pFaxDeviceStatus->DeviceId != dwDeviceId) {
                    fnWriteLogFile(TEXT("DeviceId: Received: 0x%08x, Expected: 0x%08x.  This is an error.\r\n"), pFaxDeviceStatus->DeviceId, dwDeviceId);
                    goto FuncFailed;
                }

                if (lstrcmp(pFaxDeviceStatus->DeviceName, szDeviceName)) {
                    fnWriteLogFile(TEXT("DeviceName: Received: %s, Expected: %s.  This is an error.\r\n"), pFaxDeviceStatus->DeviceName, szDeviceName);
                    goto FuncFailed;
                }

                (*pnNumCasesPassed)++;
				dwFuncCasesPass++;
            }

FuncFailed:
            g_ApiInterface.FaxFreeBuffer(pFaxDeviceStatus);
        }
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxPortHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxGetDeviceStatus(NULL, &pFaxDeviceStatus)) {
        fnWriteLogFile(TEXT("FaxGetDeviceStatus() returned TRUE.  This is an error.  FaxGetDeviceStatus() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxDeviceStatus);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxGetDeviceStatus() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pFaxDeviceStatus = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxGetDeviceStatus(hFaxPortHandle, NULL)) {
        fnWriteLogFile(TEXT("FaxGetDeviceStatus() returned TRUE.  This is an error.  FaxGetDeviceStatus() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pFaxDeviceStatus);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxGetDeviceStatus() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxPortHandle = hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxGetDeviceStatus(hFaxSvcHandle, &pFaxDeviceStatus)) {
        fnWriteLogFile(TEXT("FaxGetDeviceStatus() returned TRUE.  This is an error.  FaxGetDeviceStatus() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxDeviceStatus);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxGetDeviceStatus() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Disconnect from the fax port
    g_ApiInterface.FaxClose(hFaxPortHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxPortHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxGetDeviceStatus(hFaxPortHandle, &pFaxDeviceStatus)) {
        fnWriteLogFile(TEXT("FaxGetDeviceStatus() returned TRUE.  This is an error.  FaxGetDeviceStatus() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxDeviceStatus);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxGetDeviceStatus() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        // Enumerate the fax ports
        //if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //dwDeviceId = pFaxPortInfo[0].DeviceId;

        // Free the fax port info
        //g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

        // Open the fax port
        //if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
            // Disconnect from the fax server
//            g_ApiInterface.FaxClose(hFaxSvcHandle);
  //        //  return;
    //    }

        // Get the fax port info
      //  if (!g_ApiInterface.FaxGetPort(hFaxPortHandle, &pFaxPortInfo)) {
            // Disconnect from the fax port
        //    g_ApiInterface.FaxClose(hFaxPortHandle);
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        // Get the device status
        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;
        //fnWriteLogFile(TEXT("Valid case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxGetDeviceStatus(hFaxPortHandle, &pFaxDeviceStatus)) {
            //fnWriteLogFile(TEXT("FaxGetDeviceStatus() failed.  The error code is 0x%08x.  This is an error.  FaxGetDeviceStatus() should succeed.\r\n"), GetLastError());
        //}
        //else {
            //g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
            //(*pnNumCasesPassed)++;
			//dwFuncCasesPass++;
        //}

        // Disconnect from the fax port
        //g_ApiInterface.FaxClose(hFaxPortHandle);
        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxGetDeviceStatus, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
}

BOOL WINAPI
FaxAPIDllTest(
	LPCWSTR  szWhisPhoneNumberW,
	LPCSTR   szWhisPhoneNumberA,
	LPCWSTR  szServerNameW,
    LPCSTR   szServerNameA,
    UINT     nNumCasesLocal,
    UINT     nNumCasesServer,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	DWORD	 dwTestMode
)
{
    LPCTSTR  szServerName;
    UINT     nNumCases;

#ifdef UNICODE
    szServerName = szServerNameW;
#else
    szServerName = szServerNameA;
#endif

    if (szServerName) {
		fnWriteLogFile(TEXT("WHIS> REMOTE SERVER MODE:\r\n"));
        nNumCases = nNumCasesServer;
    }
    else {
        nNumCases = nNumCasesLocal;
    }

    // FaxEnumPorts()
    fnFaxEnumPorts(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    // FaxOpenPort()
    fnFaxOpenPort(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    // FaxGetPort()
    fnFaxGetPort(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

  	if (dwTestMode==WHIS_TEST_MODE_LIMITS)	{
		// FaxSetPort()
		fnFaxSetPort(szServerName, pnNumCasesAttempted, pnNumCasesPassed,TRUE);
	}
	else	{
		  // FaxSetPort()
	    fnFaxSetPort(szServerName, pnNumCasesAttempted, pnNumCasesPassed,FALSE);
	}


    // FaxGetDeviceStatus()
    fnFaxGetDeviceStatus(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    if ((*pnNumCasesAttempted == nNumCases) && (*pnNumCasesPassed == *pnNumCasesAttempted)) {
        return TRUE;
    }
    else {
        return FALSE;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legacywin32\printapi\printapi.c ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

  printapi.c

Abstract:

  PrintApi: Fax API Test Dll: Client Print APIs
    1) FaxStartPrintJob()
    2) FaxPrintCoverPage()
    3) FaxSendDocument()
    4) FaxSendDocumentForBroadcast()

Author:

  Steven Kehrli (steveke) 8/28/1998

--*/

/*++

  Whistler Version:

  Lior Shmueli (liors) 23/11/2000

 ++*/

#include <wtypes.h>

#include "dllapi.h"

// g_hHeap is the handle to the heap
HANDLE           g_hHeap = NULL;
// g_ApiInterface is the API_INTERFACE structure
API_INTERFACE    g_ApiInterface;
// fnWriteLogFile is the pointer to the function to write a string to the log file
PFNWRITELOGFILE  fnWriteLogFile = NULL;

// whistler phone number
//LPCTSTR  g_szWhisPhoneNumber;
LPCTSTR		   g_szWhisPhoneNumber=NULL;
BOOL		   g_bRealSend=FALSE;


DWORD
DllEntry(
    HINSTANCE  hInstance,
    DWORD      dwReason,
    LPVOID     pContext
)
/*++

Routine Description:

  DLL entry point

Arguments:

  hInstance - handle to the module
  dwReason - indicates the reason for being called
  pContext - context

Return Value:

  TRUE on success

--*/
{
    return TRUE;
}

VOID WINAPI
FaxAPIDllInit(
    HANDLE            hHeap,
    API_INTERFACE     ApiInterface,
    PFNWRITELOGFILEW  pfnWriteLogFileW,
    PFNWRITELOGFILEA  pfnWriteLogFileA
)
{
    // Set g_hHeap
    g_hHeap = hHeap;
    // Set g_ApiInterface
    g_ApiInterface = ApiInterface;
#ifdef UNICODE
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileW;
#else
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileA;
#endif

    return;
}

VOID
fnFaxStartPrintJob(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxStartPrintJob()

Return Value:

  None

--*/
{
    // FaxPrintInfo is the fax print info
    FAX_PRINT_INFO    FaxPrintInfo;
    // dwFaxId is the fax job id
    DWORD             dwFaxId;
    // FaxContextInfo is the fax context
    FAX_CONTEXT_INFO  FaxContextInfo;
    
	// not used, since all suite can be used on a remote printer...
	// szRemotePrinter is the name of the remote fax printer
    // LPTSTR            szRemotePrinter;
	//

	// flag for fax abortion
	BOOL				bAborted=FALSE;
	// szFaxPrinterName is the name of the fax printer
    LPTSTR            szFaxPrinterName=NULL;
	// szFaxServerName is the name of the fax server, as it should be on the FaxConextInfo struct
    TCHAR            szFaxServerName[MAX_PATH];

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxStartPrintJob().\r\n"));

    ZeroMemory(&FaxPrintInfo, sizeof(FAX_PRINT_INFO));
    FaxPrintInfo.SizeOfStruct = sizeof(FAX_PRINT_INFO);
    FaxPrintInfo.RecipientNumber = g_szWhisPhoneNumber;

	fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);
	
	if (szServerName) {

        szFaxPrinterName = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(szServerName) + 7) * sizeof(TCHAR));
          lstrcpy(szFaxPrinterName, TEXT("\\\\"));
          lstrcat(szFaxPrinterName, szServerName);
		  lstrcpy(szFaxServerName,szFaxPrinterName);
		  lstrcat(szFaxPrinterName, TEXT("\\"));
          lstrcat(szFaxPrinterName, TEXT(WHIS_FAX_PRINTER_NAME));
	}
	  else {
		  szFaxPrinterName = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(szServerName) + 7) * sizeof(TCHAR));
		  lstrcpy(szFaxPrinterName, TEXT(WHIS_FAX_PRINTER_NAME));
		  lstrcpy(szFaxServerName,TEXT("Should be NULL"));

	  }

	  fnWriteLogFile(TEXT("WHIS> Fax Printer name is: %s\r\n"), szFaxPrinterName);

      ZeroMemory(&FaxContextInfo, sizeof(FAX_CONTEXT_INFO));
      FaxContextInfo.SizeOfStruct = sizeof(FAX_CONTEXT_INFO);

    // Start a fax
      (*pnNumCasesAttempted)++;
	  dwFuncCasesAtt++;
      fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
      if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
          fnWriteLogFile(TEXT("FaxStartPrintJob() failed.  The error code is 0x%08x.  This is an error.  FaxStartPrintJob() should succeed.\r\n"), GetLastError());
	  }
      else {
          if (FaxContextInfo.hDC == NULL) {
              fnWriteLogFile(TEXT("hDC is NULL.  This is an error.  hDC should not be NULL.\r\n"));
			}

          if ((szServerName && lstrcmp(FaxContextInfo.ServerName,szFaxServerName) !=0) || (!szServerName && FaxContextInfo.ServerName[0])) {
              fnWriteLogFile(TEXT("ServerName: Received: %s, Expected: %s.\r\n"), FaxContextInfo.ServerName, szFaxServerName);
			}

		  AbortDoc(FaxContextInfo.hDC);
	  	  DeleteDC(FaxContextInfo.hDC);
	  	  (*pnNumCasesPassed)++;
	  	  dwFuncCasesPass++;
		}

      (*pnNumCasesAttempted)++;
	  dwFuncCasesAtt++;
      fnWriteLogFile(TEXT("Invalid szFaxPrinterName.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
      if (g_ApiInterface.FaxStartPrintJob(TEXT("InvalidFaxPrinterName"), &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
          fnWriteLogFile(TEXT("FaxStartPrintJob() returned TRUE.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PRINTER_NAME (0x%08x).\r\n"), ERROR_INVALID_PRINTER_NAME);
           //End this fax
          AbortDoc(FaxContextInfo.hDC);
          DeleteDC(FaxContextInfo.hDC);
      }
      else if (GetLastError() != ERROR_INVALID_PRINTER_NAME) {
          fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PRINTER_NAME (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PRINTER_NAME);
      }
      else {
          (*pnNumCasesPassed)++;
		  dwFuncCasesPass++;
      }

	  (*pnNumCasesAttempted)++;
	  dwFuncCasesAtt++;
      fnWriteLogFile(TEXT("pFaxPrintInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
      if (g_ApiInterface.FaxStartPrintJob(TEXT("Fax"), NULL, &dwFaxId, &FaxContextInfo)) {
          fnWriteLogFile(TEXT("FaxStartPrintJob() returned TRUE.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
           //End this fax
          AbortDoc(FaxContextInfo.hDC);
          DeleteDC(FaxContextInfo.hDC);
      }
      else if (GetLastError() != ERROR_INVALID_PARAMETER) {
          fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
      }
      else {
          (*pnNumCasesPassed)++;
		  dwFuncCasesPass++;
      }

      (*pnNumCasesAttempted)++;
	  dwFuncCasesAtt++;
      fnWriteLogFile(TEXT("dwFaxId = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
      if (g_ApiInterface.FaxStartPrintJob(TEXT("Fax"), &FaxPrintInfo, NULL, &FaxContextInfo)) {
          fnWriteLogFile(TEXT("FaxStartPrintJob() returned TRUE.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
           //End this fax
          AbortDoc(FaxContextInfo.hDC);
          DeleteDC(FaxContextInfo.hDC);
      }
      else if (GetLastError() != ERROR_INVALID_PARAMETER) {
          fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
      }
      else {
          (*pnNumCasesPassed)++;
		  dwFuncCasesPass++;
      }

      (*pnNumCasesAttempted)++;
	  dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxContextInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxStartPrintJob(TEXT("Fax"), &FaxPrintInfo, &dwFaxId, NULL)) {
        fnWriteLogFile(TEXT("FaxStartPrintJob() returned TRUE.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        // End this fax
        AbortDoc(FaxContextInfo.hDC);
        DeleteDC(FaxContextInfo.hDC);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    FaxPrintInfo.SizeOfStruct = 0;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxPrintInfo->SizeOfStruct = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxStartPrintJob(TEXT("Fax"), &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
        fnWriteLogFile(TEXT("FaxStartPrintJob() returned TRUE.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        // End this fax
        AbortDoc(FaxContextInfo.hDC);
        DeleteDC(FaxContextInfo.hDC);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }
    FaxPrintInfo.SizeOfStruct = sizeof(FAX_PRINT_INFO);

    FaxPrintInfo.RecipientNumber = NULL;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxPrintInfo->RecipientNumber = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxStartPrintJob(TEXT("Fax"), &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
        fnWriteLogFile(TEXT("FaxStartPrintJob() returned TRUE.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        // End this fax
        AbortDoc(FaxContextInfo.hDC);
        DeleteDC(FaxContextInfo.hDC);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }
    FaxPrintInfo.RecipientNumber = g_szWhisPhoneNumber;

	fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);

    
	#ifdef FAXAPI_W2K
		FaxPrintInfo.DrProfileName = TEXT("PrintApi");
		FaxPrintInfo.DrEmailAddress = TEXT("PrintApi");
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;
    
		fnWriteLogFile(TEXT("pFaxPrintInfo->DrEmailAddress.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		if (g_ApiInterface.FaxStartPrintJob(TEXT("Fax"), &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
			fnWriteLogFile(TEXT("FaxStartPrintJob() returned TRUE.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
			// End this fax
			AbortDoc(FaxContextInfo.hDC);
			DeleteDC(FaxContextInfo.hDC);
		}
		else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		}
		else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
		}
		FaxPrintInfo.DrProfileName = NULL;
		FaxPrintInfo.DrEmailAddress = NULL;
	#else
		fnWriteLogFile(TEXT("WHIS> Skipped case in whistler publics: pFaxPrintInfo->DrProfileName & pFaxPrintInfo->DrEmailAddress.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	#endif
	
	HeapFree(g_hHeap, 0, szFaxPrinterName);

    //if (szServerName) {
	//	fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
    //  szRemotePrinter = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(szServerName) + 7) * sizeof(TCHAR));
    //    lstrcpy(szRemotePrinter, TEXT("\\\\"));
    //    lstrcat(szRemotePrinter, szServerName);
	//	lstrcat(szRemotePrinter, TEXT("\\"));
    //   lstrcat(szRemotePrinter, TEXT(WHIS_FAX_PRINTER_NAME));

    //   (*pnNumCasesAttempted)++;
    //   fnWriteLogFile(TEXT("Remote Fax Printer. (Printer Name: %s) Test Case: %d.\r\n"),szRemotePrinter, *pnNumCasesAttempted);
    //   if (!g_ApiInterface.FaxStartPrintJob(szRemotePrinter, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    //      fnWriteLogFile(TEXT("FaxStartPrintJob() failed.  The error code is 0x%08x.  This is an error.  FaxStartPrintJob() should succeed.\r\n"), GetLastError());
    //    }
    //    else {
	//		 AbortDoc(FaxContextInfo.hDC);
	//			 DeleteDC(FaxContextInfo.hDC);
	//		 (*pnNumCasesPassed)++;

    //    }
	//
    //    
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxStartPrintJob, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
}

VOID
fnFaxPrintCoverPage(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	BOOL	 bTestLimits
)
/*++

Routine Description:

  FaxPrintCoverPage()

Return Value:

  None

--*/
{
    // FaxPrintInfo is the fax print info
    FAX_PRINT_INFO      FaxPrintInfo;
    // dwFaxId is the fax job id
    DWORD               dwFaxId;
    // FaxContextInfo is the fax context
    FAX_CONTEXT_INFO    FaxContextInfo;
    // CoverPageInfo is the cover page info
    FAX_COVERPAGE_INFO  CoverPageInfo;
    // FaxContextInfohDC is the hDC from the fax context
    HDC                 FaxContextInfohDC;
    // szCoverPageName is the cover page name
    TCHAR               szCoverPageName[MAX_PATH];

	// szFaxPrinterName is the name of the fax printer
    LPTSTR            szFaxPrinterName=NULL;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

    fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxPrintCoverPage().\r\n"));

	

    ZeroMemory(&FaxPrintInfo, sizeof(FAX_PRINT_INFO));
    FaxPrintInfo.SizeOfStruct = sizeof(FAX_PRINT_INFO);


	fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);
	FaxPrintInfo.RecipientNumber = g_szWhisPhoneNumber;
	
    ZeroMemory(&FaxContextInfo, sizeof(FAX_CONTEXT_INFO));
    FaxContextInfo.SizeOfStruct = sizeof(FAX_CONTEXT_INFO);

    ZeroMemory(&CoverPageInfo, sizeof(FAX_COVERPAGE_INFO));
    CoverPageInfo.SizeOfStruct = sizeof(FAX_COVERPAGE_INFO);


    if (szServerName) {
	    szFaxPrinterName = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(szServerName) + 7) * sizeof(TCHAR));
        lstrcpy(szFaxPrinterName, TEXT("\\\\"));
        lstrcat(szFaxPrinterName, szServerName);
		lstrcat(szFaxPrinterName, TEXT("\\"));
        lstrcat(szFaxPrinterName, TEXT(WHIS_FAX_PRINTER_NAME));
	}
	else {
		szFaxPrinterName = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(szServerName) + 7) * sizeof(TCHAR));
		lstrcpy(szFaxPrinterName, TEXT(WHIS_FAX_PRINTER_NAME));
	}

	fnWriteLogFile(TEXT("WHIS> Fax Printer name is: %s\r\n"), szFaxPrinterName);


    // Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
        return;
    }

   CoverPageInfo.UseServerCoverPage = TRUE;

    CoverPageInfo.CoverPageName = TEXT("confdent.cov");
	CoverPageInfo.Subject = TEXT("1/10_FPCP:SRV-confdent.cov");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Server .cov). File: confdent.cov  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    
	
	// Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
        return;
    }

    CoverPageInfo.CoverPageName = TEXT("coverpg.lnk");
	CoverPageInfo.Subject = TEXT("2/10_FPCP:SRV-coverpg.lnk");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Server .lnk). File: coverpg.lnk  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    

    // Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
        return;
    }
	
	CoverPageInfo.CoverPageName = TEXT("confdent");
	CoverPageInfo.Subject = TEXT("3/10_FPCP:SRV-confdent");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Server .cov). File: confdent  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    
	// Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
        return;
    }

    CoverPageInfo.CoverPageName = TEXT("coverpg");
	CoverPageInfo.Subject = TEXT("4/10_FPCP:SRV-coverpg");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Server .lnk). File: coverpg  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    
	// Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
        return;
    }

    CoverPageInfo.UseServerCoverPage = FALSE;

    CoverPageInfo.CoverPageName = TEXT("confdent.cov");
	CoverPageInfo.Subject = TEXT("5/10_FPCP:LOC-confdent.cov");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Client .cov). File: confdent.cov  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    

    // Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
        return;
    }
	
	CoverPageInfo.CoverPageName = TEXT("coverpg.lnk");
	CoverPageInfo.Subject = TEXT("6/10_FPCP:LOC-coverpg.lnk");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Client .lnk). File: coverpg.lnk  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    

    
	// Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
        return;
    }
	
	CoverPageInfo.CoverPageName = TEXT("confdent");
	CoverPageInfo.Subject = TEXT("7/10_FPCP:LOC-confdent");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Client .cov). File: confdent  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    

    // Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
        return;
    }
	
	CoverPageInfo.CoverPageName = TEXT("coverpg");
	CoverPageInfo.Subject = TEXT("8/10_FPCP:LOC-coverpg");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Client .lnk). File: coverpg  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    

    
	// Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
        return;
    }
	
	GetFullPathName(TEXT("confdent.cov"), sizeof(szCoverPageName) / sizeof(TCHAR), szCoverPageName, NULL);
    CoverPageInfo.CoverPageName = szCoverPageName;
	CoverPageInfo.Subject = TEXT("9/10_FPCP:FullPath(confdent.cov)");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Client / Full Path .cov). Path: %s Test Case: %d.\r\n"),szCoverPageName, *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    

    // Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
        return;
    }
	
	GetFullPathName(TEXT("coverpg.lnk"), sizeof(szCoverPageName) / sizeof(TCHAR), szCoverPageName, NULL);
    CoverPageInfo.CoverPageName = szCoverPageName;
	CoverPageInfo.Subject = TEXT("10/10_FPCP:FullPath(coverpg.lnk)");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Client / Full Path .lnk). Path %s Test Case: %d.\r\n"), szCoverPageName,*pnNumCasesAttempted);
    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxContextInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxPrintCoverPage(NULL, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() returned TRUE.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pCoverPageInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, NULL)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() returned TRUE.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    FaxContextInfo.SizeOfStruct = 0;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxContextInfo->SizeOfStruct = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() returned TRUE.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }
    FaxContextInfo.SizeOfStruct = sizeof(FAX_CONTEXT_INFO);

    FaxContextInfohDC = FaxContextInfo.hDC;
    FaxContextInfo.hDC = NULL;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxContextInfo->hDC = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() returned TRUE.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }
    FaxContextInfo.hDC = FaxContextInfohDC;

    CoverPageInfo.SizeOfStruct = 0;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pCoverPageInfo->SizeOfStruct = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() returned TRUE.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }
    CoverPageInfo.SizeOfStruct = sizeof(FAX_COVERPAGE_INFO);

    CoverPageInfo.CoverPageName = NULL;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pCoverPageInfo->CoverPageName = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() returned TRUE.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }



    CoverPageInfo.CoverPageName = TEXT("InvalidCoverPageName");
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Invalid pCoverPageInfo->CoverPageName.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() returned TRUE.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_FILE_NOT_FOUND (0x%08x).\r\n"), ERROR_FILE_NOT_FOUND);
    }
    else if (GetLastError() != ERROR_FILE_NOT_FOUND) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_FILE_NOT_FOUND (0x%08x).\r\n"), GetLastError(), ERROR_FILE_NOT_FOUND);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }


    // End this fax
	AbortDoc(FaxContextInfo.hDC);
	DeleteDC(FaxContextInfo.hDC);
	HeapFree(g_hHeap, 0, szFaxPrinterName);
	
fnWriteLogFile(TEXT("$$$ Summery for FaxPrintCoverPage, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
}

VOID
fnFaxSendDocument(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxSendDocument()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE              hFaxSvcHandle;
    // pFaxConfig is a pointer to the fax configuration
    PFAX_CONFIGURATION  pFaxConfig;
    // FaxJobParam is the fax job params
    FAX_JOB_PARAM       FaxJobParam;
    // CoverPageInfo is the cover page info
    FAX_COVERPAGE_INFO  CoverPageInfo;
    // dwFaxId is the fax job id
    DWORD               dwFaxId;
    // szCoverPageName is the cover page name
    TCHAR               szCoverPageName[MAX_PATH];

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxSendDocument().\r\n"));

    ZeroMemory(&FaxJobParam, sizeof(FAX_JOB_PARAM));
    FaxJobParam.SizeOfStruct = sizeof(FAX_JOB_PARAM);
    FaxJobParam.RecipientNumber = g_szWhisPhoneNumber;

	fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);

    ZeroMemory(&CoverPageInfo, sizeof(FAX_COVERPAGE_INFO));
    CoverPageInfo.SizeOfStruct = sizeof(FAX_COVERPAGE_INFO);

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not GET configuration, The error code is 0x%08x.\r\n"), GetLastError());
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    pFaxConfig->PauseServerQueue = TRUE;

    if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not SET configuration, The error code is 0x%08x.\r\n"), GetLastError());
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (kodak.tif).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("kodak.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
		if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
		(*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (fax.tif).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (.txt).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("printapi.txt"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (.doc).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("printapi.doc"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (.xls).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("printapi.xls"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (.ppt).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("printapi.ppt"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }


    CoverPageInfo.UseServerCoverPage = TRUE;

    CoverPageInfo.CoverPageName = TEXT("confdent.cov");
	CoverPageInfo.Subject = TEXT("1/10_FSD:SRV-confdent.cov");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Server .cov). File: confdent.cov  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    CoverPageInfo.CoverPageName = TEXT("coverpg.lnk");
	CoverPageInfo.Subject = TEXT("2/10_FSD:SRV-coverpg.lnk");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Server .lnk). File coverpg.lnk  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    CoverPageInfo.CoverPageName = TEXT("confdent");
	CoverPageInfo.Subject = TEXT("3/10_FSD:SRV-confdent");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Server .cov). File: confdent  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    CoverPageInfo.CoverPageName = TEXT("coverpg");
	CoverPageInfo.Subject = TEXT("4/10_FSD:SRV-coverpg");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Server .lnk). File: coverpg  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    CoverPageInfo.UseServerCoverPage = FALSE;

    CoverPageInfo.CoverPageName = TEXT("confdent.cov");
	CoverPageInfo.Subject = TEXT("5/10_FSD:LOC-confdent.cov");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Client .cov). File: confdent.cov  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    CoverPageInfo.CoverPageName = TEXT("coverpg.lnk");
	CoverPageInfo.Subject = TEXT("6/10_FSD:LOC-coverpg.lnk");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Client .lnk). File: coverpg.lnk  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    CoverPageInfo.CoverPageName = TEXT("confdent");
	CoverPageInfo.Subject = TEXT("7/10_FSD:LOC-confdent");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Client .cov). File: confdent  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    CoverPageInfo.CoverPageName = TEXT("coverpg");
	CoverPageInfo.Subject = TEXT("8/10_FSD:LOC-coverpg");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Client .lnk). File: coverpg  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    GetFullPathName(TEXT("confdent.cov"), sizeof(szCoverPageName) / sizeof(TCHAR), szCoverPageName, NULL);


    CoverPageInfo.CoverPageName = szCoverPageName;
	CoverPageInfo.Subject = TEXT("9/10_FSD:FullPath(confdent.cov)");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Client / Full Path .cov). Path: %s Test Case: %d.\r\n"),szCoverPageName, *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    GetFullPathName(TEXT("coverpg.lnk"), sizeof(szCoverPageName) / sizeof(TCHAR), szCoverPageName, NULL);
    CoverPageInfo.CoverPageName = szCoverPageName;
	CoverPageInfo.Subject = TEXT("10/10_FSD:FullPath(confdent.lnk)");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Client / Full Path .lnk).  Path: %s Test Case: %d.\r\n"), szCoverPageName, *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocument(NULL, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("szDocument = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, NULL, &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxJobParam = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), NULL, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Invalid document.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("InvalidDocumentName"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_FILE_NOT_FOUND (0x%08x).\r\n"), ERROR_FILE_NOT_FOUND);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_FILE_NOT_FOUND) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_FILE_NOT_FOUND (0x%08x).\r\n"), GetLastError(), ERROR_FILE_NOT_FOUND);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Invalid document type (.bad).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("printapi.bad"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), ERROR_INVALID_DATA);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_DATA) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_DATA);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    FaxJobParam.SizeOfStruct = 0;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxJobParam->SizeOfStruct = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }
    FaxJobParam.SizeOfStruct = sizeof(FAX_JOB_PARAM);

    FaxJobParam.RecipientNumber = NULL;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxJobParam->RecipientNumber = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }
    FaxJobParam.RecipientNumber = g_szWhisPhoneNumber;

	fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);

    FaxJobParam.ScheduleAction = -1;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxJobParam->ScheduleAction = -1.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }
    FaxJobParam.ScheduleAction = 0;

    FaxJobParam.DeliveryReportType = -1;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxJobParam->DeliveryReportType = -1.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }
    FaxJobParam.DeliveryReportType = DRT_NONE;

    CoverPageInfo.SizeOfStruct = 0;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pCoverPageInfo->SizeOfStruct = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), ERROR_INVALID_DATA);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_DATA) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_DATA);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }
    CoverPageInfo.SizeOfStruct = sizeof(FAX_COVERPAGE_INFO);

    CoverPageInfo.CoverPageName = NULL;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pCoverPageInfo->CoverPageName = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_FILE_NOT_FOUND (0x%08x).\r\n"), ERROR_FILE_NOT_FOUND);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_FILE_NOT_FOUND) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_FILE_NOT_FOUND (0x%08x).\r\n"), GetLastError(), ERROR_FILE_NOT_FOUND);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    CoverPageInfo.CoverPageName = TEXT("InvalidCoverPageName");
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Invalid pCoverPageInfo->CoverPageName.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_FILE_NOT_FOUND (0x%08x).\r\n"), ERROR_FILE_NOT_FOUND);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_FILE_NOT_FOUND) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_FILE_NOT_FOUND (0x%08x).\r\n"), GetLastError(), ERROR_FILE_NOT_FOUND);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    pFaxConfig->PauseServerQueue = FALSE;
    g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
    g_ApiInterface.FaxFreeBuffer(pFaxConfig);

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }


//    not used, design changed so all suite will run in remote mode
//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
//        if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
//   		   fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
//           return;
 //      }
//		else
//		{
//			fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
//		}
//
  //      if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
	//		fnWriteLogFile(TEXT("WHIS> ERROR: Can not GET configuration, The error code is 0x%08x.\r\n"), GetLastError());
      //      // Disconnect from the fax server
        //    g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //pFaxConfig->PauseServerQueue = TRUE;

        //if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
		//	fnWriteLogFile(TEXT("WHIS> ERROR: Can not SET configuration, The error code is 0x%08x.\r\n"), GetLastError());
        //    g_ApiInterface.FaxFreeBuffer(pFaxConfig);
            // Disconnect from the fax server
        //    g_ApiInterface.FaxClose(hFaxSvcHandle);
        //    return;
        //}

        //(*pnNumCasesAttempted)++;
        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("kodak.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        //    fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
        //}
        //else {
		//	if (!g_bRealSend)	{
		//					g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		//	}
        //    (*pnNumCasesPassed)++;
        //}

        //pFaxConfig->PauseServerQueue = FALSE;
        //g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        //g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxSendDocument, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
}

BOOL CALLBACK
fnBroadcastCallback(
    HANDLE               hFaxSvcHandle,
    DWORD                dwRecipientNumber,
    LPVOID               lpContext,
    PFAX_JOB_PARAM       pFaxJobParam,
    PFAX_COVERPAGE_INFO  pCoverPageInfo
)
/*++

Routine Description:

  FaxSendDocumentForBroadcast() callback

Return Value:

  TRUE to enumerate another recipient

--*/
{
    BOOL     bRet;
    LPDWORD  pdwIndex;

    pdwIndex = (LPDWORD) lpContext;

    if (*pdwIndex != (dwRecipientNumber - 1)) {
        return FALSE;
    }

    switch (*pdwIndex) {
        case 0:
            pFaxJobParam->RecipientNumber = g_szWhisPhoneNumber;

			fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);

            pCoverPageInfo->UseServerCoverPage = TRUE;
            pCoverPageInfo->CoverPageName = TEXT("confdent.cov");
            bRet = TRUE;
            break;

        case 1:
            pFaxJobParam->RecipientNumber = g_szWhisPhoneNumber;

			fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);

            pCoverPageInfo->UseServerCoverPage = TRUE;
            pCoverPageInfo->CoverPageName = TEXT("confdent.cov");
            bRet = TRUE;
            break;

        default:
            bRet = FALSE;
            break;
    }

    (*pdwIndex)++;
    return bRet;
}

VOID
fnFaxSendDocumentForBroadcast(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxSendDocumentForBroadcast()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE              hFaxSvcHandle;
    // pFaxConfig is a pointer to the fax configuration
    PFAX_CONFIGURATION  pFaxConfig;
    // dwFaxId is the fax job id
    DWORD               dwFaxId;

    DWORD               dwIndex;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxSendDocumentForBroadcast().\r\n"));



    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not GET configuration, The error code is 0x%08x.\r\n"), GetLastError());
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    pFaxConfig->PauseServerQueue = TRUE;

    if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not SET configuration, The error code is 0x%08x.\r\n"), GetLastError());
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }


    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    dwIndex = 0;
    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocumentForBroadcast(hFaxSvcHandle, TEXT("fax.tif"), &dwFaxId, fnBroadcastCallback, &dwIndex)) {
        fnWriteLogFile(TEXT("FaxSendDocumentForBroadcast() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocumentForBroadcast() should succeed.\r\n"), GetLastError());
    }
    else {
        if (dwIndex != 3) {
            fnWriteLogFile(TEXT("FaxSendDocumentForBroadcast() failed.  fnBroadcastCallback() was only called %d times.  This is an error.  fnBroadcastCallback() should have been called 3 times.\r\n"), dwIndex);
        }
        else if (g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId)) {
            fnWriteLogFile(TEXT("FaxAbort() of owner job returned TRUE.  This is an error.  FaxAbort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        }
        else if (GetLastError() != ERROR_INVALID_PARAMETER) {
            fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxAbort() of owner job should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
        }
        else {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
        }
		if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 2));
							g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 1));
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocumentForBroadcast(NULL, TEXT("fax.tif"), &dwFaxId, fnBroadcastCallback, &dwIndex)) {
        fnWriteLogFile(TEXT("FaxSendDocumentForBroadcast() returned TRUE.  This is an error.  FaxSendDocumentForBroadcast() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 2));
        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 1));
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocumentForBroadcast() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;

    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("szDocument = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocumentForBroadcast(hFaxSvcHandle, NULL, &dwFaxId, fnBroadcastCallback, &dwIndex)) {
        fnWriteLogFile(TEXT("FaxSendDocumentForBroadcast() returned TRUE.  This is an error.  FaxSendDocumentForBroadcast() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 2));
        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 1));
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocumentForBroadcast() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("fnBroadcastCallback = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocumentForBroadcast(hFaxSvcHandle, TEXT("fax.tif"), &dwFaxId, NULL, &dwIndex)) {
        fnWriteLogFile(TEXT("FaxSendDocumentForBroadcast() returned TRUE.  This is an error.  FaxSendDocumentForBroadcast() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 2));
        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 1));
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocumentForBroadcast() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    pFaxConfig->PauseServerQueue = FALSE;
    g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
    g_ApiInterface.FaxFreeBuffer(pFaxConfig);

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocumentForBroadcast(hFaxSvcHandle, TEXT("fax.tif"), &dwFaxId, fnBroadcastCallback, &dwIndex)) {
        fnWriteLogFile(TEXT("FaxSendDocumentForBroadcast() returned TRUE.  This is an error.  FaxSendDocumentForBroadcast() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 2));
        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 1));
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocumentForBroadcast() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    //if (szServerName) {
	//	fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
    //    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
    //    }

    //    if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
            // Disconnect from the fax server
    //        g_ApiInterface.FaxClose(hFaxSvcHandle);
    //        return;
    //    }

     //   pFaxConfig->PauseServerQueue = TRUE;

        //if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
          //  g_ApiInterface.FaxFreeBuffer(pFaxConfig);
            // Disconnect from the fax server
            //g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //(*pnNumCasesAttempted)++;
        //dwIndex = 0;
        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxSendDocumentForBroadcast(hFaxSvcHandle, TEXT("fax.tif"), &dwFaxId, fnBroadcastCallback, &dwIndex)) {
            //fnWriteLogFile(TEXT("FaxSendDocumentForBroadcast() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocumentForBroadcast() should succeed.\r\n"), GetLastError());
        //}
        //else {
            //(*pnNumCasesPassed)++;

//			if (!g_bRealSend)	{
//		            g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 2));
//			        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 1));
//					g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
//			}
        //}

//        pFaxConfig->PauseServerQueue = FALSE;
        //g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        //g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
//        g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}

fnWriteLogFile(TEXT("$$$ Summery for FaxSendDocumentForBroadcast, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
}



BOOL WINAPI
FaxAPIDllTest(
	LPCWSTR  szWhisPhoneNumberW,
	LPCSTR   szWhisPhoneNumberA,
    LPCWSTR  szServerNameW,
    LPCSTR   szServerNameA,
    UINT     nNumCasesLocal,
    UINT     nNumCasesServer,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	DWORD	 dwTestMode
)
{
    LPCTSTR  szServerName;
    UINT     nNumCases;


	// for Whis-extended only
#ifdef UNICODE
    if (lstrlen(szWhisPhoneNumberW)>0) { 
		g_szWhisPhoneNumber = szWhisPhoneNumberW; 
	}
	else {
		g_szWhisPhoneNumber=TEXT(WHIS_DEFAULT_PHONE_NUMBER);
	}
#else
	if (lstrlen(szWhisPhoneNumberA)>0) {
		g_szWhisPhoneNumber = szWhisPhoneNumberA;
	}
	else {
		g_szWhisPhoneNumber=TEXT(WHIS_DEFAULT_PHONE_NUMBER);
	}
		
#endif

#ifdef UNICODE
    szServerName = szServerNameW;
#else
    szServerName = szServerNameA;
#endif

    if (szServerName) {
        nNumCases = nNumCasesServer;
		fnWriteLogFile(TEXT("WHIS> REMOTE SERVER MODE:\r\n"));
    }
    else {
        nNumCases = nNumCasesLocal;
    }

	if (dwTestMode==WHIS_TEST_MODE_REAL_SEND) g_bRealSend=TRUE;


    // FaxStartPrintJob()
    fnFaxStartPrintJob(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    // FaxPrintCoverPage()
    fnFaxPrintCoverPage(szServerName, pnNumCasesAttempted, pnNumCasesPassed,TRUE);

    // FaxSendDocument()
    fnFaxSendDocument(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    // FaxSendDocumentForBroadcast()
    fnFaxSendDocumentForBroadcast(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    if ((*pnNumCasesAttempted == nNumCases) && (*pnNumCasesPassed == *pnNumCasesAttempted)) {
        return TRUE;
    }
    else {
        return FALSE;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legacywin32\routeapi\routeapi.h ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

  routeapi.h

Abstract:

  This module contains the global definitions

Author:

  Steven Kehrli (steveke) 8/28/1998

--*/

#ifndef _ROUTEAPI_H
#define _ROUTEAPI_H

#define ROUTEAPI_EXTENSION_W               L"RouteApi Routing Extension"
#define ROUTEAPI_EXTENSION                 TEXT("RouteApi Routing Extension")
#define ROUTEAPI_EXTENSION_FRIENDLYNAME_W  L"RouteApi Routing Extension Friendly Name"
#define ROUTEAPI_EXTENSION_FRIENDLYNAME    TEXT("RouteApi Routing Extension Friendly Name")
#define ROUTEAPI_EXTENSION_IMAGENAME_W     L"%SystemRoot%\\system32\\apiext.dll"
#define ROUTEAPI_EXTENSION_IMAGENAME       TEXT("%SystemRoot%\\system32\\apiext.dll")
#define ROUTEAPI_EXTENSION_DLLNAME_W       L"apiext.dll"
#define ROUTEAPI_EXTENSION_DLLNAME         TEXT("apiext.dll")

#define ROUTEAPI_METHOD1_W                 L"RouteApi Routing Method #1"
#define ROUTEAPI_METHOD1                   TEXT("RouteApi Routing Method #1")
#define ROUTEAPI_METHOD_FRIENDLYNAME1_W    L"RouteApi Routing Method Friendly Name #1"
#define ROUTEAPI_METHOD_FRIENDLYNAME1      TEXT("RouteApi Routing Method Friendly Name #1")
#define ROUTEAPI_METHOD_FUNCTIONNAME1_W    L"RouteApi1"
#define ROUTEAPI_METHOD_FUNCTIONNAME1      TEXT("RouteApi1")
#define ROUTEAPI_METHOD_GUID1_W            L"{4800F101-B6B7-11D0-8CDB-00C04FB6BCE9}"
#define ROUTEAPI_METHOD_GUID1              TEXT("{4800F101-B6B7-11D0-8CDB-00C04FB6BCE9}")

#define ROUTEAPI_METHOD2_W                 L"RouteApi Routing Method #2"
#define ROUTEAPI_METHOD2                   TEXT("RouteApi Routing Method #2")
#define ROUTEAPI_METHOD_FRIENDLYNAME2_W    L"RouteApi Routing Method Friendly Name #2"
#define ROUTEAPI_METHOD_FRIENDLYNAME2      TEXT("RouteApi Routing Method Friendly Name #2")
#define ROUTEAPI_METHOD_FUNCTIONNAME2_W    L"RouteApi2"
#define ROUTEAPI_METHOD_FUNCTIONNAME2      TEXT("RouteApi2")
#define ROUTEAPI_METHOD_GUID2_W            L"{4800F102-B6B7-11D0-8CDB-00C04FB6BCE9}"
#define ROUTEAPI_METHOD_GUID2              TEXT("{4800F102-B6B7-11D0-8CDB-00C04FB6BCE9}")

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legacywin32\xml\faxapi\util.c ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

  util.c

Abstract:

  This module:
    1) Displays a string in stdout
    2) Opens the log file
    3) Writes a string to the log file
    4) Writes a string to the log file
    5) Writes a string to the log file and stdout

Author:

  Steven Kehrli (steveke) 8/28/1998

--*/

#ifndef _UTIL_C
#define _UTIL_C

VOID
LocalEcho(
    LPWSTR  szFormatString,
    ...
)
/*++

Routine Description:

  Displays a string in stdout

Arguments:

  szFormatString - pointer to the string

Return Value:

  None

--*/
{
    va_list  varg_ptr;
    // szOutputBuffer is the output string
    WCHAR    szOutputBuffer[1024];

    // Initialize the buffer
    ZeroMemory(szOutputBuffer, sizeof(szOutputBuffer));

    va_start(varg_ptr, szFormatString);
    _vsnwprintf(szOutputBuffer, sizeof(szOutputBuffer), szFormatString, varg_ptr);
    wprintf(L"%s\n", szOutputBuffer);
}

BOOL
fnOpenLogFile(
    LPCWSTR  szLogFile
)
/*++

Routine Description:

  Opens the log file

Arguments:

  szLogFile - log file name

Return Value:

  TRUE on success

--*/
{
    // cUnicodeBOM is the Unicode BOM
    WCHAR  cUnicodeBOM = 0xFEFF;
    DWORD  cb;

    // Create the new log file
    g_hLogFile = CreateFile(szLogFile, GENERIC_WRITE, FILE_SHARE_READ, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
    if (g_hLogFile == INVALID_HANDLE_VALUE) {
        return FALSE;
    }

    if (!WriteFile(g_hLogFile, &cUnicodeBOM, sizeof(WCHAR), &cb, NULL)) {
        return FALSE;
    }

    return TRUE;
}

VOID WINAPI
fnWriteLogFileW(
    LPWSTR  szFormatString,
    ...
)
/*++

Routine Description:

  Writes a string to the log file

Arguments:

  szFormatString - pointer to the string

Return Value:

  None

--*/
{
    va_list  varg_ptr;
    // szOutputString is the output string
    WCHAR    szOutputString[1024];
    DWORD    cb;

    va_start(varg_ptr, szFormatString);
    _vsnwprintf(szOutputString, sizeof(szOutputString), szFormatString, varg_ptr);

    if (g_bVerbose) {
        LocalEcho(L"%s", szOutputString);
    }

    if (g_hLogFile != INVALID_HANDLE_VALUE) {
        lstrcat(szOutputString, L"\r\n");
        WriteFile(g_hLogFile, szOutputString, lstrlen(szOutputString) * sizeof(WCHAR), &cb, NULL);
    }

}

VOID WINAPI
fnWriteLogFileA(
    LPSTR  szFormatString,
    ...
)
/*++

Routine Description:

  Writes a string to the log file

Arguments:

  szFormatString - pointer to the string

Return Value:

  None

--*/
{
    va_list  varg_ptr;
    // szOutputString is the output string
    CHAR     szOutputString[1024];
    WCHAR    szOutputStringW[1024];
    DWORD    cb;

    va_start(varg_ptr, szFormatString);
    _vsnprintf(szOutputString, sizeof(szOutputString), szFormatString, varg_ptr);

    MultiByteToWideChar(CP_ACP, 0, szOutputString, -1, szOutputStringW, sizeof(szOutputStringW) / sizeof(WCHAR));

    fnWriteLogFileW(L"%s", szOutputStringW);
}

VOID
fnWriteAndEcho(
    LPWSTR  szFormatString,
    ...
)
/*++

Routine Description:

  Writes a string to the log file and stdout

Arguments:

  szFormatString - pointer to the string

Return Value:

  None

--*/
{
    va_list  varg_ptr;
    // szOutputString is the output string
    WCHAR    szOutputString[1024];
    DWORD    cb;

    va_start(varg_ptr, szFormatString);
    _vsnwprintf(szOutputString, sizeof(szOutputString), szFormatString, varg_ptr);

    LocalEcho(L"%s", szOutputString);

    if (g_hLogFile != INVALID_HANDLE_VALUE) {
        lstrcat(szOutputString, L"\r\n");
        WriteFile(g_hLogFile, szOutputString, lstrlen(szOutputString) * sizeof(WCHAR), &cb, NULL);
    }
}

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legacywin32\xml\faxapi\whisfaxapi.h ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

whisfaxapi.h

Abstract:

  This module contains some further definition for Whistler Fax

Author:

  Lior Shmueli (liors) 16/10/2000

--*/

#ifndef _WHISFAXAPI_H
#define _WHISFAXAPI_H

#define WHIS_REMOTE_SERVER_NAME  L"liors1"
#define WHIS_TITLE  L"Whistler Fax API Test"


#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legacywin32\routeapi\old_routeapi\routeapi.c ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

  routeapi.c

Abstract:

  Window NT Fax Routing Extension.  These routing methods test the routing apis

Author:

  Steven Kehrli (steveke) 8/28/1998

--*/

#include <windows.h>
#include <stdio.h>
#include <winfax.h>
#include <faxroute.h>

#include "routeapi.h"

HANDLE                      g_hRouteHeap;                // Handle to the routing heap
PFAXROUTEADDFILE            pFaxRouteAddFile;            // API to add a file to the fax file list
PFAXROUTEDELETEFILE         pFaxRouteDeleteFile;         // API to delete a file from the fax file list
PFAXROUTEGETFILE            pFaxRouteGetFile;            // API to get a file from the fax file list
PFAXROUTEENUMFILES          pFaxRouteEnumFiles;          // API to enumerate the fax file list
PFAXROUTEMODIFYROUTINGDATA  pFaxRouteModifyRoutingData;  // API to modify the routing data for another routing method

#pragma data_seg(".INFO")

DWORD  g_dwRoutingInfo[2] = {0, 0};
BOOL   g_bEnabled[2] = {FALSE, FALSE};

#pragma data_seg()

DWORD
DllEntry(
    HINSTANCE  hInstance,
    DWORD      dwReason,
    LPVOID     pContext
)
/*++

Routine Description:

  DLL entry point

Arguments:

  hInstance - handle to the module
  dwReason - indicates the reason for being called
  pContext - context

Return Value:

  TRUE on success

--*/
{
    return TRUE;
}

BOOL WINAPI
FaxRouteInitialize(
    HANDLE                       hHeap,
    PFAX_ROUTE_CALLBACKROUTINES  pFaxRouteCallbackRoutines
)
/*++

Routine Description:

  Initializes the routing extension

Arguments:

  hHeap - handle to the heap
  pFaxRouteCallbackRoutins - pointer to fax routing callback routines

Return Value:

  TRUE on success

--*/
{
    g_hRouteHeap = hHeap;

    pFaxRouteAddFile = pFaxRouteCallbackRoutines->FaxRouteAddFile;
    pFaxRouteDeleteFile = pFaxRouteCallbackRoutines->FaxRouteDeleteFile;
    pFaxRouteGetFile = pFaxRouteCallbackRoutines->FaxRouteGetFile;
    pFaxRouteEnumFiles = pFaxRouteCallbackRoutines->FaxRouteEnumFiles;
    pFaxRouteModifyRoutingData = pFaxRouteCallbackRoutines->FaxRouteModifyRoutingData;

    return TRUE;
}

BOOL WINAPI
FaxRouteGetRoutingInfo(
    LPCWSTR  RoutingGuid,
    DWORD    dwDeviceId,
    LPBYTE   RoutingInfo,
    LPDWORD  pdwRoutingInfoSize
)
/*++

Routine Description:

  Gets the routing info for a routing method

Arguments:

  RoutingGuid - pointer to the GUID of the routing method
  dwDeviceId - port id
  RoutingInfo - pointer to the routing info
  pdwRoutingInfoSize - pointer to the size of the routing info

Return Value:

  TRUE on success

--*/
{
    DWORD  dwIndex;
    DWORD  cb;

    if (!lstrcmp(ROUTEAPI_METHOD_GUID1, RoutingGuid)) {
        dwIndex = 0;
    }
    else if (!lstrcmp(ROUTEAPI_METHOD_GUID2, RoutingGuid)) {
        dwIndex = 1;
    }
    else {
        dwIndex = -1;
    }

    if ((dwIndex == 0) || (dwIndex == 1)) {
        if (RoutingInfo == NULL) {
            *pdwRoutingInfoSize = sizeof(DWORD);
        }
        else {
            CopyMemory((LPDWORD) RoutingInfo, &g_dwRoutingInfo[dwIndex], sizeof(DWORD));
        }
    }

    return TRUE;
}

BOOL WINAPI
FaxRouteSetRoutingInfo(
    LPCWSTR     RoutingGuid,
    DWORD       dwDeviceId,
    const BYTE  *RoutingInfo,
    DWORD       dwRoutingInfoSize
)
/*++

Routine Description:

  Sets the routing info for a routing method

Arguments:

  RoutingGuid - pointer to the GUID of the routing method
  dwDeviceId - port id
  RoutingInfo - pointer to the routing info
  dwRoutingInfoSize - size of the routing info

Return Value:

  TRUE on success

--*/
{
    DWORD  dwIndex;

    if (!lstrcmp(ROUTEAPI_METHOD_GUID1, RoutingGuid)) {
        dwIndex = 0;
    }
    else if (!lstrcmp(ROUTEAPI_METHOD_GUID2, RoutingGuid)) {
        dwIndex = 1;
    }
    else {
        dwIndex = -1;
    }

    if ((dwIndex == 0) || (dwIndex == 1)) {
        if ((!RoutingInfo) || (!dwRoutingInfoSize)) {
            g_dwRoutingInfo[dwIndex] = 0;
        }
        else {
            g_dwRoutingInfo[dwIndex] = (DWORD) *(LPDWORD *) RoutingInfo;
        }
    }

    return TRUE;
}

BOOL WINAPI
FaxRouteDeviceEnable(
    LPCWSTR  RoutingGuid,
    DWORD    dwDeviceId,
    LONG     bEnable
)
/*++

Routine Description:

  Enables a routing method

Arguments:

  RoutingGuid - pointer to the GUID of the routing method
  dwDeviceId - port id
  bEnable - indicates whether the routing method is enabled or disabled

Return Value:

  TRUE on success

--*/
{
    DWORD  dwIndex;

    if (!lstrcmp(ROUTEAPI_METHOD_GUID1, RoutingGuid)) {
        dwIndex = 0;
    }
    else if (!lstrcmp(ROUTEAPI_METHOD_GUID2, RoutingGuid)) {
        dwIndex = 1;
    }
    else {
        dwIndex = -1;
    }

    if ((dwIndex == 0) || (dwIndex == 1)) {
        switch (bEnable) {
            case -1:
                return g_bEnabled[dwIndex];
                break;

            case 0:
                g_bEnabled[dwIndex] = FALSE;
                break;

            case 1:
                g_bEnabled[dwIndex] = TRUE;
                break;
        }
    }

    return TRUE;
}

BOOL WINAPI
FaxRouteDeviceChangeNotification(
    DWORD  dwDeviceId,
    BOOL   bNewDevice
)
/*++

Routine Description:

  Handles a device change

Arguments:

  dwDeviceId - port id
  bNewDevice - indicates whether the device is new

Return Value:

  TRUE on success

--*/
{
    return TRUE;
}

BOOL WINAPI
RouteApi1(
    PFAX_ROUTE  pFaxRoute,
    PVOID       *FailureData,
    LPDWORD     pdwFailureDataSize
)
/*++

Routine Description:

  Routing method.

Arguments:

  pFaxRoute - pointer to the fax routing structure
  FailureData - pointer to the failure data
  pdwFailureDataSize - size of the failure data

Return Value:

  TRUE on success

--*/
{
    return TRUE;
}

BOOL WINAPI
RouteApi2(
    PFAX_ROUTE  pFaxRoute,
    PVOID       *FailureData,
    LPDWORD     pdwFailureDataSize
)
/*++

Routine Description:

  Routing method.

Arguments:

  pFaxRoute - pointer to the fax routing structure
  FailureData - pointer to the failure data
  pdwFailureDataSize - size of the failure data

Return Value:

  TRUE on success

--*/
{
    return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legacywin32\xml\faxapi\faxapi.c ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

  faxapi.c

Abstract:

  This module is a harness to test the Fax APIs

Author:

  Steven Kehrli (steveke) 8/28/1998

--*/

/*++

  Whistler Version:

  Lior Shmueli (liors) 23/11/2000

 ++*/

#include <wtypes.h>
#include <stdio.h>
#include <lior_platform.h>

#include "dllapi.h"
#include "faxapi.h"

#include "util.c"


VOID
fnUsageInfo(
)
/*++

Routine Description:

  Displays the usage info in stdout

Return Value:

  None

--*/
{
    wprintf(L"Fax API Test Harness.\n");
    wprintf(L"\n");
    wprintf(L"FAXAPI /I:<ini file> /L:<log file> /V\n");
    wprintf(L"\n");
    wprintf(L"  /I:<ini file>       Ini file name.  Defaults to \"%s\".\n", FAXAPI_INIFILE);
    wprintf(L"  /L:<log file>       Log file name.  Defaults to \"%s\".\n", FAXAPI_LOGFILE);
    wprintf(L"  /S:<computer name>  Computer name.  Defaults to NULL\n");
    wprintf(L"  /V                  Verbose.\n");
    wprintf(L"\n");
}

BOOL
LoadFaxAPIs(
    PAPI_INTERFACE  pApiInterface
)
/*++

Routine Description:

  Loads the Fax APIs

Arguments:

  pApiInterface - pointer to the api interface structure

Return Value:

  TRUE on success

--*/
{
    // szDllPath is the path where the fax dll resides
    WCHAR  szDllPath[MAX_PATH];

    // Clear the dll path
    ZeroMemory(szDllPath, MAX_PATH);

    // Get the path
    if (GetSystemDirectory(szDllPath, MAX_PATH) == 0) {
        LocalEcho(L"GetSystemDirectory() failed, ec = 0x%08x\n", GetLastError());
        return FALSE;
    }

    // Concatenate the fax dll with the path
    lstrcat(szDllPath, WINFAX_DLL);

    // Get the handle to the fax dll
    pApiInterface->hInstance = LoadLibrary((LPCWSTR) szDllPath);
    if (!pApiInterface->hInstance) {
        LocalEcho(L"Could not load \"%s\", ec = 0x%08x.\n", szDllPath, GetLastError());
        return FALSE;
    }

    // Map all needed functions to pApiInterface

    // FaxAbort
    pApiInterface->FaxAbort = (PFAXABORT) GetProcAddress(pApiInterface->hInstance, "FaxAbort");
    if (!pApiInterface->FaxAbort) {
        LocalEcho(L"Could not retrieve the address of \"FaxAbort()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxAccessCheck
    pApiInterface->FaxAccessCheck = (PFAXACCESSCHECK) GetProcAddress(pApiInterface->hInstance, "FaxAccessCheck");
    if (!pApiInterface->FaxAccessCheck) {
        LocalEcho(L"Could not retrieve the address of \"FaxAccessCheck()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxClose
    pApiInterface->FaxClose = (PFAXCLOSE) GetProcAddress(pApiInterface->hInstance, "FaxClose");
    if (!pApiInterface->FaxClose) {
        LocalEcho(L"Could not retrieve the address of \"FaxClose()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxCompleteJobParamsW
    pApiInterface->FaxCompleteJobParamsW = (PFAXCOMPLETEJOBPARAMSW) GetProcAddress(pApiInterface->hInstance, "FaxCompleteJobParamsW");
    if (!pApiInterface->FaxCompleteJobParamsW) {
        LocalEcho(L"Could not retrieve the address of \"FaxCompleteJobParamsW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxCompleteJobParamsA
    pApiInterface->FaxCompleteJobParamsA = (PFAXCOMPLETEJOBPARAMSA) GetProcAddress(pApiInterface->hInstance, "FaxCompleteJobParamsA");
    if (!pApiInterface->FaxCompleteJobParamsA) {
        LocalEcho(L"Could not retrieve the address of \"FaxCompleteJobParamsA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxConnectFaxServerW
    pApiInterface->FaxConnectFaxServerW = (PFAXCONNECTFAXSERVERW) GetProcAddress(pApiInterface->hInstance, "FaxConnectFaxServerW");
    if (!pApiInterface->FaxConnectFaxServerW) {
        LocalEcho(L"Could not retrieve the address of \"FaxConnectFaxServerW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxConnectFaxServerA
    pApiInterface->FaxConnectFaxServerA = (PFAXCONNECTFAXSERVERA) GetProcAddress(pApiInterface->hInstance, "FaxConnectFaxServerA");
    if (!pApiInterface->FaxConnectFaxServerA) {
        LocalEcho(L"Could not retrieve the address of \"FaxConnectFaxServerA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxEnableRoutingMethodW
    pApiInterface->FaxEnableRoutingMethodW = (PFAXENABLEROUTINGMETHODW) GetProcAddress(pApiInterface->hInstance, "FaxEnableRoutingMethodW");
    if (!pApiInterface->FaxEnableRoutingMethodW) {
        LocalEcho(L"Could not retrieve the address of \"FaxEnableRoutingMethodW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxEnableRoutingMethodA
    pApiInterface->FaxEnableRoutingMethodA = (PFAXENABLEROUTINGMETHODA) GetProcAddress(pApiInterface->hInstance, "FaxEnableRoutingMethodA");
    if (!pApiInterface->FaxEnableRoutingMethodA) {
        LocalEcho(L"Could not retrieve the address of \"FaxEnableRoutingMethodA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxEnumGlobalRoutingInfoW
    pApiInterface->FaxEnumGlobalRoutingInfoW = (PFAXENUMGLOBALROUTINGINFOW) GetProcAddress(pApiInterface->hInstance, "FaxEnumGlobalRoutingInfoW");
    if (!pApiInterface->FaxEnumGlobalRoutingInfoW) {
        LocalEcho(L"Could not retrieve the address of \"FaxEnumGlobalRoutingInfoW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxEnumGlobalRoutingInfoA
    pApiInterface->FaxEnumGlobalRoutingInfoA = (PFAXENUMGLOBALROUTINGINFOA) GetProcAddress(pApiInterface->hInstance, "FaxEnumGlobalRoutingInfoA");
    if (!pApiInterface->FaxEnumGlobalRoutingInfoA) {
        LocalEcho(L"Could not retrieve the address of \"FaxEnumGlobalRoutingInfoA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxEnumJobsW
    pApiInterface->FaxEnumJobsW = (PFAXENUMJOBSW) GetProcAddress(pApiInterface->hInstance, "FaxEnumJobsW");
    if (!pApiInterface->FaxEnumJobsW) {
        LocalEcho(L"Could not retrieve the address of \"FaxEnumJobsW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxEnumJobsA
    pApiInterface->FaxEnumJobsA = (PFAXENUMJOBSA) GetProcAddress(pApiInterface->hInstance, "FaxEnumJobsA");
    if (!pApiInterface->FaxEnumJobsA) {
        LocalEcho(L"Could not retrieve the address of \"FaxEnumJobsA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxEnumPortsW
    pApiInterface->FaxEnumPortsW = (PFAXENUMPORTSW) GetProcAddress(pApiInterface->hInstance, "FaxEnumPortsW");
    if (!pApiInterface->FaxEnumPortsW) {
        LocalEcho(L"Could not retrieve the address of \"FaxEnumPortsW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxEnumPortsA
    pApiInterface->FaxEnumPortsA = (PFAXENUMPORTSA) GetProcAddress(pApiInterface->hInstance, "FaxEnumPortsA");
    if (!pApiInterface->FaxEnumPortsA) {
        LocalEcho(L"Could not retrieve the address of \"FaxEnumPortsA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxEnumRoutingMethodsW
    pApiInterface->FaxEnumRoutingMethodsW = (PFAXENUMROUTINGMETHODSW) GetProcAddress(pApiInterface->hInstance, "FaxEnumRoutingMethodsW");
    if (!pApiInterface->FaxEnumRoutingMethodsW) {
        LocalEcho(L"Could not retrieve the address of \"FaxEnumRoutingMethodsW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxEnumRoutingMethodsA
    pApiInterface->FaxEnumRoutingMethodsA = (PFAXENUMROUTINGMETHODSA) GetProcAddress(pApiInterface->hInstance, "FaxEnumRoutingMethodsA");
    if (!pApiInterface->FaxEnumRoutingMethodsA) {
        LocalEcho(L"Could not retrieve the address of \"FaxEnumRoutingMethodsA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxFreeBuffer
    pApiInterface->FaxFreeBuffer = (PFAXFREEBUFFER) GetProcAddress(pApiInterface->hInstance, "FaxFreeBuffer");
    if (!pApiInterface->FaxFreeBuffer) {
        LocalEcho(L"Could not retrieve the address of \"FaxFreeBuffer()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxGetConfigurationW
    pApiInterface->FaxGetConfigurationW = (PFAXGETCONFIGURATIONW) GetProcAddress(pApiInterface->hInstance, "FaxGetConfigurationW");
    if (!pApiInterface->FaxGetConfigurationW) {
        LocalEcho(L"Could not retrieve the address of \"FaxGetConfigurationW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxGetConfigurationA
    pApiInterface->FaxGetConfigurationA = (PFAXGETCONFIGURATIONA) GetProcAddress(pApiInterface->hInstance, "FaxGetConfigurationA");
    if (!pApiInterface->FaxGetConfigurationA) {
        LocalEcho(L"Could not retrieve the address of \"FaxGetConfigurationA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxGetDeviceStatusW
    pApiInterface->FaxGetDeviceStatusW = (PFAXGETDEVICESTATUSW) GetProcAddress(pApiInterface->hInstance, "FaxGetDeviceStatusW");
    if (!pApiInterface->FaxGetDeviceStatusW) {
        LocalEcho(L"Could not retrieve the address of \"FaxGetDeviceStatusW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxGetDeviceStatusA
    pApiInterface->FaxGetDeviceStatusA = (PFAXGETDEVICESTATUSA) GetProcAddress(pApiInterface->hInstance, "FaxGetDeviceStatusA");
    if (!pApiInterface->FaxGetDeviceStatusA) {
        LocalEcho(L"Could not retrieve the address of \"FaxGetDeviceStatusA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxGetJobW
    pApiInterface->FaxGetJobW = (PFAXGETJOBW) GetProcAddress(pApiInterface->hInstance, "FaxGetJobW");
    if (!pApiInterface->FaxGetJobW) {
        LocalEcho(L"Could not retrieve the address of \"FaxGetJobW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxGetJobA
    pApiInterface->FaxGetJobA = (PFAXGETJOBA) GetProcAddress(pApiInterface->hInstance, "FaxGetJobA");
    if (!pApiInterface->FaxGetJobA) {
        LocalEcho(L"Could not retrieve the address of \"FaxGetJobA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxGetLoggingCategoriesW
    pApiInterface->FaxGetLoggingCategoriesW = (PFAXGETLOGGINGCATEGORIESW) GetProcAddress(pApiInterface->hInstance, "FaxGetLoggingCategoriesW");
    if (!pApiInterface->FaxGetLoggingCategoriesW) {
        LocalEcho(L"Could not retrieve the address of \"FaxGetLoggingCategoriesW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxGetLoggingCategoriesA
    pApiInterface->FaxGetLoggingCategoriesA = (PFAXGETLOGGINGCATEGORIESA) GetProcAddress(pApiInterface->hInstance, "FaxGetLoggingCategoriesA");
    if (!pApiInterface->FaxGetLoggingCategoriesA) {
        LocalEcho(L"Could not retrieve the address of \"FaxGetLoggingCategoriesA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxGetPageData
    pApiInterface->FaxGetPageData = (PFAXGETPAGEDATA) GetProcAddress(pApiInterface->hInstance, "FaxGetPageData");
    if (!pApiInterface->FaxGetPageData) {
        LocalEcho(L"Could not retrieve the address of \"FaxGetPageData()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxGetPortW
    pApiInterface->FaxGetPortW = (PFAXGETPORTW) GetProcAddress(pApiInterface->hInstance, "FaxGetPortW");
    if (!pApiInterface->FaxGetPortW) {
        LocalEcho(L"Could not retrieve the address of \"FaxGetPortW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxGetPortA
    pApiInterface->FaxGetPortA = (PFAXGETPORTA) GetProcAddress(pApiInterface->hInstance, "FaxGetPortA");
    if (!pApiInterface->FaxGetPortA) {
        LocalEcho(L"Could not retrieve the address of \"FaxGetPortA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxGetRoutingInfoW
    pApiInterface->FaxGetRoutingInfoW = (PFAXGETROUTINGINFOW) GetProcAddress(pApiInterface->hInstance, "FaxGetRoutingInfoW");
    if (!pApiInterface->FaxGetRoutingInfoW) {
        LocalEcho(L"Could not retrieve the address of \"FaxGetRoutingInfoW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxGetRoutingInfoA
    pApiInterface->FaxGetRoutingInfoA = (PFAXGETROUTINGINFOA) GetProcAddress(pApiInterface->hInstance, "FaxGetRoutingInfoA");
    if (!pApiInterface->FaxGetRoutingInfoA) {
        LocalEcho(L"Could not retrieve the address of \"FaxGetRoutingInfoA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxInitializeEventQueue
    pApiInterface->FaxInitializeEventQueue = (PFAXINITIALIZEEVENTQUEUE) GetProcAddress(pApiInterface->hInstance, "FaxInitializeEventQueue");
    if (!pApiInterface->FaxInitializeEventQueue) {
        LocalEcho(L"Could not retrieve the address of \"FaxInitializeEventQueue()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxOpenPort
    pApiInterface->FaxOpenPort = (PFAXOPENPORT) GetProcAddress(pApiInterface->hInstance, "FaxOpenPort");
    if (!pApiInterface->FaxOpenPort) {
        LocalEcho(L"Could not retrieve the address of \"FaxOpenPort()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxPrintCoverPageW
    pApiInterface->FaxPrintCoverPageW = (PFAXPRINTCOVERPAGEW) GetProcAddress(pApiInterface->hInstance, "FaxPrintCoverPageW");
    if (!pApiInterface->FaxPrintCoverPageW) {
        LocalEcho(L"Could not retrieve the address of \"FaxPrintCoverPageW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxPrintCoverPageA
    pApiInterface->FaxPrintCoverPageA = (PFAXPRINTCOVERPAGEA) GetProcAddress(pApiInterface->hInstance, "FaxPrintCoverPageA");
    if (!pApiInterface->FaxPrintCoverPageA) {
        LocalEcho(L"Could not retrieve the address of \"FaxPrintCoverPageA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxRegisterRoutingExtensionW
    pApiInterface->FaxRegisterRoutingExtensionW = (PFAXREGISTERROUTINGEXTENSIONW) GetProcAddress(pApiInterface->hInstance, "FaxRegisterRoutingExtensionW");
    if (!pApiInterface->FaxRegisterRoutingExtensionW) {
        LocalEcho(L"Could not retrieve the address of \"FaxRegisterRoutingExtensionW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxRegisterServiceProviderW
    pApiInterface->FaxRegisterServiceProviderW = (PFAXREGISTERSERVICEPROVIDERW) GetProcAddress(pApiInterface->hInstance, "FaxRegisterServiceProviderW");
    if (!pApiInterface->FaxRegisterServiceProviderW) {
        LocalEcho(L"Could not retrieve the address of \"FaxRegisterServiceProviderW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSendDocumentW
    pApiInterface->FaxSendDocumentW = (PFAXSENDDOCUMENTW) GetProcAddress(pApiInterface->hInstance, "FaxSendDocumentW");
    if (!pApiInterface->FaxSendDocumentW) {
        LocalEcho(L"Could not retrieve the address of \"FaxSendDocumentW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSendDocumentA
    pApiInterface->FaxSendDocumentA = (PFAXSENDDOCUMENTA) GetProcAddress(pApiInterface->hInstance, "FaxSendDocumentA");
    if (!pApiInterface->FaxSendDocumentA) {
        LocalEcho(L"Could not retrieve the address of \"FaxSendDocumentA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSendDocumentForBroadcastW
    pApiInterface->FaxSendDocumentForBroadcastW = (PFAXSENDDOCUMENTFORBROADCASTW) GetProcAddress(pApiInterface->hInstance, "FaxSendDocumentForBroadcastW");
    if (!pApiInterface->FaxSendDocumentForBroadcastW) {
        LocalEcho(L"Could not retrieve the address of \"FaxSendDocumentForBroadcastW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSendDocumentForBroadcastA
    pApiInterface->FaxSendDocumentForBroadcastA = (PFAXSENDDOCUMENTFORBROADCASTA) GetProcAddress(pApiInterface->hInstance, "FaxSendDocumentForBroadcastA");
    if (!pApiInterface->FaxSendDocumentForBroadcastA) {
        LocalEcho(L"Could not retrieve the address of \"FaxSendDocumentForBroadcastA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSetConfigurationW
    pApiInterface->FaxSetConfigurationW = (PFAXSETCONFIGURATIONW) GetProcAddress(pApiInterface->hInstance, "FaxSetConfigurationW");
    if (!pApiInterface->FaxSetConfigurationW) {
        LocalEcho(L"Could not retrieve the address of \"FaxSetConfigurationW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSetConfigurationA
    pApiInterface->FaxSetConfigurationA = (PFAXSETCONFIGURATIONA) GetProcAddress(pApiInterface->hInstance, "FaxSetConfigurationA");
    if (!pApiInterface->FaxSetConfigurationA) {
        LocalEcho(L"Could not retrieve the address of \"FaxSetConfigurationA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSetGlobalRoutingInfoW
    pApiInterface->FaxSetGlobalRoutingInfoW = (PFAXSETGLOBALROUTINGINFOW) GetProcAddress(pApiInterface->hInstance, "FaxSetGlobalRoutingInfoW");
    if (!pApiInterface->FaxSetGlobalRoutingInfoW) {
        LocalEcho(L"Could not retrieve the address of \"FaxSetGlobalRoutingInfoW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSetGlobalRoutingInfoA
    pApiInterface->FaxSetGlobalRoutingInfoA = (PFAXSETGLOBALROUTINGINFOA) GetProcAddress(pApiInterface->hInstance, "FaxSetGlobalRoutingInfoA");
    if (!pApiInterface->FaxSetGlobalRoutingInfoA) {
        LocalEcho(L"Could not retrieve the address of \"FaxSetGlobalRoutingInfoA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSetJobW
    pApiInterface->FaxSetJobW = (PFAXSETJOBW) GetProcAddress(pApiInterface->hInstance, "FaxSetJobW");
    if (!pApiInterface->FaxSetJobW) {
        LocalEcho(L"Could not retrieve the address of \"FaxSetJobW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSetJobA
    pApiInterface->FaxSetJobA = (PFAXSETJOBA) GetProcAddress(pApiInterface->hInstance, "FaxSetJobA");
    if (!pApiInterface->FaxSetJobA) {
        LocalEcho(L"Could not retrieve the address of \"FaxSetJobA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSetLoggingCategoriesW
    pApiInterface->FaxSetLoggingCategoriesW = (PFAXSETLOGGINGCATEGORIESW) GetProcAddress(pApiInterface->hInstance, "FaxSetLoggingCategoriesW");
    if (!pApiInterface->FaxSetLoggingCategoriesW) {
        LocalEcho(L"Could not retrieve the address of \"FaxSetLoggingCategoriesW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSetLoggingCategoriesA
    pApiInterface->FaxSetLoggingCategoriesA = (PFAXSETLOGGINGCATEGORIESA) GetProcAddress(pApiInterface->hInstance, "FaxSetLoggingCategoriesA");
    if (!pApiInterface->FaxSetLoggingCategoriesA) {
        LocalEcho(L"Could not retrieve the address of \"FaxSetLoggingCategoriesA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSetPortW
    pApiInterface->FaxSetPortW = (PFAXSETPORTW) GetProcAddress(pApiInterface->hInstance, "FaxSetPortW");
    if (!pApiInterface->FaxSetPortW) {
        LocalEcho(L"Could not retrieve the address of \"FaxSetPortW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSetPortA
    pApiInterface->FaxSetPortA = (PFAXSETPORTA) GetProcAddress(pApiInterface->hInstance, "FaxSetPortA");
    if (!pApiInterface->FaxSetPortA) {
        LocalEcho(L"Could not retrieve the address of \"FaxSetPortA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSetRoutingInfoW
    pApiInterface->FaxSetRoutingInfoW = (PFAXSETROUTINGINFOW) GetProcAddress(pApiInterface->hInstance, "FaxSetRoutingInfoW");
    if (!pApiInterface->FaxSetRoutingInfoW) {
        LocalEcho(L"Could not retrieve the address of \"FaxSetRoutingInfoW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSetRoutingInfoA
    pApiInterface->FaxSetRoutingInfoA = (PFAXSETROUTINGINFOA) GetProcAddress(pApiInterface->hInstance, "FaxSetRoutingInfoA");
    if (!pApiInterface->FaxSetRoutingInfoA) {
        LocalEcho(L"Could not retrieve the address of \"FaxSetRoutingInfoA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxStartPrintJobW
    pApiInterface->FaxStartPrintJobW = (PFAXSTARTPRINTJOBW) GetProcAddress(pApiInterface->hInstance, "FaxStartPrintJobW");
    if (!pApiInterface->FaxStartPrintJobW) {
        LocalEcho(L"Could not retrieve the address of \"FaxStartPrintJobW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxStartPrintJobA
    pApiInterface->FaxStartPrintJobA = (PFAXSTARTPRINTJOBA) GetProcAddress(pApiInterface->hInstance, "FaxStartPrintJobA");
    if (!pApiInterface->FaxStartPrintJobA) {
        LocalEcho(L"Could not retrieve the address of \"FaxStartPrintJobA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    return TRUE;
}

BOOL
LoadFaxAPIDll(
    LPCWSTR         szIniFile,
    LPCWSTR         szCurrentSection,
    PDLL_INTERFACE  pDllInterface
)
/*++

Routine Description:

  Loads a Fax API Test Dll

Arguments:

  szIniFile - ini file name
  szCurrentSection - section name
  pDllInterface - pointer to the dll interface structure

Return Value:

  TRUE on success

--*/
{
    // szDllPath is the path where the dll resides
    WCHAR  szDllPath[MAX_PATH];

    GetPrivateProfileString(szCurrentSection, DLL_PATH, L"", szDllPath, MAX_PATH, szIniFile);

    if (!lstrcmpi(szDllPath, L"")) {
        LocalEcho(L"Could not find the \"Dll_Path\" key for section \"%s\".\n", szCurrentSection);
        return FALSE;
    }

    pDllInterface->hInstance = LoadLibrary(szDllPath);
    if (!pDllInterface->hInstance) {
        LocalEcho(L"Could not load \"%s\" for section \"%s\", ec = 0x%08x.\n", szDllPath, szCurrentSection, GetLastError());
        return FALSE;
    }

    pDllInterface->pFaxAPIDllInit = (PFAXAPIDLLINIT) GetProcAddress(pDllInterface->hInstance, "FaxAPIDllInit");
    if (!pDllInterface->pFaxAPIDllInit) {
        LocalEcho(L"Could not retrieve the address of \"FaxAPIDllInit()\".\n");
        FreeLibrary(pDllInterface->hInstance);
        return FALSE;
    }

	pDllInterface->pFaxAPIDllTest = (PFAXAPIDLLTEST) GetProcAddress(pDllInterface->hInstance, "FaxAPIDllTest");
    if (!pDllInterface->pFaxAPIDllTest) {
        LocalEcho(L"Could not retrieve the address of \"FaxAPIDllTest()\".\n");
        FreeLibrary(pDllInterface->hInstance);
        return FALSE;
    }

    return TRUE;
}

int _cdecl
main(
    INT   argc,
    CHAR  *argvA[]
)
{

    // bIniFile indicates an ini file name was found
    BOOL           bIniFile = FALSE;
    // szIniFile is the ini file name
    LPWSTR         szIniFile = NULL;
    // bLogFile indicates a log file name was found
    BOOL           bLogFile = FALSE;
    // szLogFile is the log file name
    LPWSTR         szLogFile = NULL;
    // bServerName indicates a server name was found
    BOOL           bServerName = FALSE;
    // szServerNameW is the server name
    LPWSTR         szServerNameW = NULL;
    // szServerNameA is the server name
    LPSTR          szServerNameA = NULL;
	
	// phone number 1 (ansi & widechar)
	//LPWSTR		   szWhisPhoneNumber1W=NULL;
	//LPSTR		   szWhisPhoneNumber1A=NULL;

    // szParam is a command line parameter
    LPWSTR         szParam;
    // wParamChar is a command line parameter character
    WCHAR          wParamChar;

    // ApiInterface is a API_INTERFACE structure
    API_INTERFACE  ApiInterface;

    // szSectionNames is the section names of the ini file
    LPWSTR         szSectionNames;
    // szCurrentSection is the current section
    LPWSTR         szCurrentSection;

	// whis: max routing global declaration (from ini)
    //UINT		   nWhisMaxRoutingMethods;

    // DllInterface is a DLL_INTERFACE structure
    DLL_INTERFACE  DllInterface;

    // szDescription is the description of the section
    WCHAR          szDescription[MAX_PATH];

	// szRemoteServerName is the name of the remote server
	WCHAR		   szWhisRemoteServerNameW[MAX_PATH];
	CHAR		   szWhisRemoteServerNameA[MAX_PATH];
	
	// szWhisPhoneNum1 is the 1st phone number to be used
	WCHAR		   szWhisPhoneNumber1W[MAX_PATH];
	CHAR		   szWhisPhoneNumber1A[MAX_PATH];
	
	// szWhisPhoneNum2 is the 2nd phone number to be used
	WCHAR		   szWhisPhoneNumber2W[MAX_PATH];	
	CHAR		   szWhisPhoneNumber2A[MAX_PATH];
	
	// flag for running in local case
	BOOL		   bLocalMode=TRUE;

	// result of DLL call
	BOOL		   bTestResult=FALSE;
    
	// nNumCasesLocal is the number of local cases in the section
    UINT           nNumCasesLocal;
    // nNumCasesServer is the number of server cases in the section
    UINT           nNumCasesServer;
    // nNumCasesAttempted is the number of cases attempted for the section
    UINT           nNumCasesAttempted;
    // nNumCasesPassed is the number of cases passed for the section
    UINT           nNumCasesPassed;
	// nWhisDoThisSet is a 0/1 var to flag if this test will be done
	DWORD		   dwWhisTestMode=0;

	// Summery variables
	UINT			nWhisNumSkipped=0;
	UINT			nWhisNumFailed=0;

    // iVal is the return value
    INT            iVal = -1;

    // dwIndex is a counter
    DWORD          dwIndex = 0;
    DWORD          cb;

	// total of all cases
	UINT			nTotCasesAttempted=0;
	UINT			nTotCasesPassed=0;

    


	
	// Welcome message (whis)
	LocalEcho(L"Welcome to whistler API Test");
//  LocalEcho(L"This test name is \"%s\".\n", WHIS_TITLE);
//	LocalEcho(L"This test var \"%d\".\n", dwData);
	
	
	// Get the handle to the process heap
    g_hHeap = GetProcessHeap();
	if (!g_hHeap) {
		LocalEcho(L"WHIS> ERROR Could not get proccess heap");
		goto ExitLevel0;
	}


    for (dwIndex = 1; dwIndex < (DWORD) argc; dwIndex++) {
        // Determine the memory required for the parameter
        cb = (lstrlenA(argvA[dwIndex]) + 1) * sizeof(WCHAR);

        // Allocate the memory for the parameter
        szParam = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, cb);
		
		if (!szParam) {
		LocalEcho(L"WHIS> ERROR Could not alocate params heap");
		goto ExitLevel0;
		}


        // szParam is a CHAR*, so it needs to be converted to a WCHAR*
        // Conver szParam
        MultiByteToWideChar(CP_ACP, 0, argvA[dwIndex], -1, szParam, (lstrlenA(argvA[dwIndex]) + 1) * sizeof(WCHAR));

        // Set wParamChar
        wParamChar = szParam[2];

        // Replace wParamChar
        szParam[2] = '\0';

        if ((!lstrcmpi(HELP_SWITCH_1, szParam)) || (!lstrcmpi(HELP_SWITCH_2, szParam)) || (!lstrcmpi(HELP_SWITCH_3, szParam)) || (!lstrcmpi(HELP_SWITCH_4, szParam))) {
            fnUsageInfo();
            goto ExitLevel0;
        }
        else if (!lstrcmpi(VERBOSE_SWITCH, szParam)) {
            // Set g_bVerbose to TRUE
            g_bVerbose = TRUE;
        }
        else {
            // Reset wParamChar
            szParam[2] = wParamChar;

            // Set wParamChar
            wParamChar = szParam[3];

            if (wParamChar) {
                // Replace wParamChar
                szParam[3] = '\0';

                if ((!lstrcmpi(INIFILE_SWITCH, szParam)) && (!bIniFile)) {
                    // Reset wParamChar
                    szParam[3] = wParamChar;

                    // Set bIniFile to TRUE
                    bIniFile = TRUE;

                    cb = GetFullPathName(&szParam[3], 0, NULL, NULL);
                    // Allocate the memory for the ini file
                    szIniFile = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, cb * sizeof(WCHAR));
					if (!szIniFile) {
					LocalEcho(L"WHIS> ERROR Could not alocate heap for szIniFile");
					goto ExitLevel0;
					}

                    GetFullPathName(&szParam[3], cb, szIniFile, NULL);
                }
                else if ((!lstrcmpi(LOGFILE_SWITCH, szParam)) && (!bLogFile)) {
                    // Reset wParamChar
                    szParam[3] = wParamChar;

                    // Set bLogFile to TRUE
                    bLogFile = TRUE;

                    // Allocate the memory for the log file
                    szLogFile = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(szParam) - 1) * sizeof(WCHAR));
					if (!szLogFile) {
					LocalEcho(L"WHIS> ERROR Could not alocate heap for szLogFile");
					goto ExitLevel0;
					}

                    // Set szLogFile
                    lstrcpy(szLogFile, &szParam[3]);
                }
                else if ((!lstrcmpi(SERVER_SWITCH, szParam)) && (!bServerName)) {
					LocalEcho(L"WHIS> Server Name not supported as argument, use INI file");
                    // Reset wParamChar
                    //szParam[3] = wParamChar;

                    //Set bServerName to TRUE
                    //bServerName = TRUE;

                    //Allocate the memory for the server name
                    //szServerNameW = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(szParam) - 1) * sizeof(WCHAR));
					//if (!szServerNameW) {
					//LocalEcho(L"WHIS> ERROR Could not alocate heap for szServerNameW");
					//goto ExitLevel0;
					//}
                    //szServerNameA = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(szParam) - 1) * sizeof(CHAR));
					//if (!szServerNameA) {
				
					//goto ExitLevel0;
					//}

                    // Set szServerName
                    //lstrcpy(szServerNameW, &szParam[3]);
                    //ideCharToMultiByte(CP_ACP, 0, szServerNameW, -1, szServerNameA, (lstrlenW(szServerNameW) + 1) * sizeof(CHAR), NULL, NULL);
                }
            }
        }

        // Free the parameter
        if (!HeapFree(g_hHeap, 0, szParam))
		{
				LocalEcho(L"WHIS> ERROR Could not free heap for szParam");
		}

    }

    if (!bIniFile) {
        cb = GetFullPathName(FAXAPI_INIFILE, 0, NULL, NULL);
        // Allocate the memory for the ini file
        szIniFile = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, cb * sizeof(WCHAR));
		if (!szIniFile) {
					LocalEcho(L"WHIS> ERROR Could not alocate heap for szIniFile");
					goto ExitLevel0;
					}
        GetFullPathName(FAXAPI_INIFILE, cb, szIniFile, NULL);
    }



    if (!bLogFile) {
        // Allocate the memory for the log file
        szLogFile = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(FAXAPI_LOGFILE) + 1) * sizeof(WCHAR));
		if (!szLogFile) {
					LocalEcho(L"WHIS> ERROR Could not alocate heap for szLogFile");
					goto ExitLevel0;
					}

        // Set szLogFile
        lstrcpy(szLogFile, FAXAPI_LOGFILE);
    }

    if (GetFileAttributes(szIniFile) == 0xFFFFFFFF) {
        LocalEcho(L"Could not find the ini file \"%s\".\n", szIniFile);
        fnUsageInfo();
        goto ExitLevel0;
    }

    if (!LoadFaxAPIs(&ApiInterface)) {
        goto ExitLevel0;
    }

    // Get the section names
    cb = MAX_PATH;

	
	szSectionNames = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, cb * sizeof(WCHAR));
	if (!szSectionNames) {
					LocalEcho(L"WHIS> ERROR Could not alocate heap for szSectionNames");
					goto ExitLevel0;
					}
	
	while (GetPrivateProfileSectionNames(szSectionNames, cb, szIniFile) == (cb - 2)) {
        cb += MAX_PATH;
        szSectionNames = HeapReAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, szSectionNames, cb * sizeof(WCHAR));
		if (!szSectionNames) {
					LocalEcho(L"WHIS> ERROR Could not RE-alocate heap for szSectionNames");
					goto ExitLevel0;
					}
    }

    fnOpenLogFile(szLogFile);

    for (szCurrentSection = szSectionNames; szCurrentSection[0]; szCurrentSection = (LPWSTR) ((DWORD) szCurrentSection + (lstrlen(szCurrentSection) + 1) * sizeof(WCHAR))) {
        ZeroMemory(&DllInterface, sizeof(DLL_INTERFACE));

		// read global section values
		if (wcscmp(szCurrentSection,TEXT("global"))==0)	{

			// print XML header
			fnWriteAndEcho(L"<?xml version=\"1.0\" ?>");
			fnWriteAndEcho(L"<test>");
			fnWriteAndEcho(L"<header>");
	

			
			
			
			// read phone number 1
			ZeroMemory(szWhisPhoneNumber1W, sizeof(szWhisPhoneNumber1W));
			ZeroMemory(szWhisPhoneNumber1A, sizeof(szWhisPhoneNumber1A));
			GetPrivateProfileString(szCurrentSection, GLOBAL_WHIS_PHONE_NUM_1, L"", szWhisPhoneNumber1W, MAX_PATH, szIniFile);
			if (lstrlen(szWhisPhoneNumber1W)==0)	{
				fnWriteAndEcho(L"WHIS> Warning, WhisPhoneNum1 missing, using default: \"%s\" \r\n", TEXT(WHIS_DEFAULT_PHONE_NUMBER));
				lstrcpy(szWhisPhoneNumber1W,TEXT(WHIS_DEFAULT_PHONE_NUMBER));
				WideCharToMultiByte(CP_ACP, 0, szWhisPhoneNumber1W, -1, szWhisPhoneNumber1A, (lstrlenW(szWhisPhoneNumber1W) + 1) * sizeof(CHAR), NULL, NULL);
			}
			else {
				WideCharToMultiByte(CP_ACP, 0, szWhisPhoneNumber1W, -1, szWhisPhoneNumber1A, (lstrlenW(szWhisPhoneNumber1W) + 1) * sizeof(CHAR), NULL, NULL);
			}

						
			// read phone number 2
			ZeroMemory(szWhisPhoneNumber2W, sizeof(szWhisPhoneNumber2W));
			ZeroMemory(szWhisPhoneNumber2A, sizeof(szWhisPhoneNumber2A));
			GetPrivateProfileString(szCurrentSection, GLOBAL_WHIS_PHONE_NUM_2, L"", szWhisPhoneNumber2W, MAX_PATH, szIniFile);
			if (lstrlen(szWhisPhoneNumber2W)==0)	{
				fnWriteAndEcho(L"WHIS> Warning, WhisPhoneNum2 missing, using default: \"%s\" \r\n", TEXT(WHIS_DEFAULT_PHONE_NUMBER));
				lstrcpy(szWhisPhoneNumber2W,TEXT(WHIS_DEFAULT_PHONE_NUMBER));
				WideCharToMultiByte(CP_ACP, 0, szWhisPhoneNumber2W, -1, szWhisPhoneNumber2A, (lstrlenW(szWhisPhoneNumber2W) + 1) * sizeof(CHAR), NULL, NULL);
			}
			else {
				WideCharToMultiByte(CP_ACP, 0, szWhisPhoneNumber2W, -1, szWhisPhoneNumber2A, (lstrlenW(szWhisPhoneNumber2W) + 1) * sizeof(CHAR), NULL, NULL);
			}

		
			// read server name
			ZeroMemory(szWhisRemoteServerNameW, sizeof(szWhisRemoteServerNameW));
			ZeroMemory(szWhisRemoteServerNameA, sizeof(szWhisRemoteServerNameA));
			GetPrivateProfileString(szCurrentSection,GLOBAL_WHIS_REMOTE_SERVER_NAME,L"",szWhisRemoteServerNameW,MAX_PATH,szIniFile);
			if (lstrlen(szWhisRemoteServerNameW)==0)	{
				fnWriteAndEcho(L"WHIS> Warning, szWhisRemoteServerName missing, using NULL server name (local)\r\n");
				ZeroMemory(szWhisRemoteServerNameW, sizeof(szWhisRemoteServerNameW));
				bLocalMode=TRUE;
				
			}
			else	{
				WideCharToMultiByte(CP_ACP, 0, szWhisRemoteServerNameW, -1, szWhisRemoteServerNameA, (lstrlenW(szWhisRemoteServerNameW) + 1) * sizeof(CHAR), NULL, NULL);
				bLocalMode=FALSE;
			}

	
			// read max routing extensions
			//nWhisMaxRoutingMethods = GetPrivateProfileInt(szCurrentSection, GLOBAL_WHIS_MAX_ROUTING_METHODS, 0, szIniFile);
			fnWriteAndEcho(L"WHIS> Using publics from \"%s\" \r\n", FAXAPI_PLATFORM);
			fnWriteAndEcho(L"WHIS> Whistler Phone Number \"%s\" \r\n", szWhisPhoneNumber1W);
			fnWriteAndEcho(L"WHIS> Whistler Phone Number \"%s\" \r\n", szWhisPhoneNumber2W);
			fnWriteAndEcho(L"WHIS> Whistler Remote Server Name \"%s\" \r\n", szWhisRemoteServerNameW);

#ifdef FAXAPI_W2K
	fnWriteAndEcho(L"$$$ Summery for this test, Name:Legacy C API, Id:21, Version:%s",FAXAPI_PLATFORM);
	fnWriteAndEcho(L"<metatest name=\"Legacy C API\" id=\"21\" version=\"%s\"></metatest>",FAXAPI_PLATFORM);
#else
	fnWriteAndEcho(L"$$$ Summery for this test, Name:Legacy C API, Id:20, Version:%s",FAXAPI_PLATFORM);
	fnWriteAndEcho(L"<metatest name=\"Legacy C API\" id=\"20\" version=\"%s\"></metatest>",FAXAPI_PLATFORM);
#endif

	fnWriteAndEcho(L"<run phone1=\"%s\" phone2=\"%s\" server=\"%s\"></run>",szWhisPhoneNumber1W,szWhisPhoneNumber2W,szWhisRemoteServerNameW);
	fnWriteAndEcho(L"</header><body>");
			//fnWriteAndEcho(L"WHIS> Whistler Max Routing methods %d \r\n", nWhisMaxRoutingMethods);
		}
		else
		{
			if (LoadFaxAPIDll(szIniFile, szCurrentSection, &DllInterface)) {

		        ZeroMemory(szDescription, sizeof(szDescription));
			    nNumCasesLocal = 0;
				nNumCasesServer = 0;
				nNumCasesAttempted = 0;
				nNumCasesPassed = 0;
			
	            __try {
		            DllInterface.pFaxAPIDllInit(g_hHeap, ApiInterface, fnWriteLogFileW, fnWriteLogFileA);
			    }
				__except(EXCEPTION_EXECUTE_HANDLER) {
					fnWriteAndEcho(L"Exception occurred in FaxAPIDllInit() for section \"%s\".  ec = 0x%08x.\r\n", szCurrentSection, GetExceptionCode());
					goto DllFailed;
				}

				GetPrivateProfileString(szCurrentSection, DLL_DESCRIPTION, L"", szDescription, MAX_PATH, szIniFile);
				nNumCasesLocal = GetPrivateProfileInt(szCurrentSection, DLL_LOCAL_CASES, 0, szIniFile);
				nNumCasesServer = GetPrivateProfileInt(szCurrentSection, DLL_SERVER_CASES, 0, szIniFile);
				dwWhisTestMode = GetPrivateProfileInt(szCurrentSection, DLL_WHIS_TEST_MODE, 0, szIniFile);
				fnWriteAndEcho(L"Section: %s\r\nDescription: %s\r\nNumber of local cases: %d\r\nNumber of server cases: %d\r\nTest Mode: %d\r\n", szCurrentSection, szDescription, nNumCasesLocal, nNumCasesServer,dwWhisTestMode);
				fnWriteAndEcho(L"<section name=\"%s\" dll=\"%s\" cases=\"%d\" testmode=\"%d\">",szCurrentSection, szDescription, nNumCasesLocal, dwWhisTestMode);

				if (dwWhisTestMode == WHIS_TEST_MODE_DONT_CATCH_EXCEPTIONS)
				{
							fnWriteAndEcho(L"WHIS> Running extended test (NOTICE: WILL NOT CATCH EXCEPTIONS)...\r\n");
							if (bLocalMode)	{
								fnWriteAndEcho(L"WHIS> LOCAL MODE SET\r\n");
								bTestResult=!DllInterface.pFaxAPIDllTest(szWhisPhoneNumber1W,szWhisPhoneNumber1A,NULL, NULL, nNumCasesLocal, nNumCasesServer, &nNumCasesAttempted, &nNumCasesPassed,WHIS_TEST_MODE_DO);
							}
							else {
								fnWriteAndEcho(L"WHIS> SERVER MODE SET\r\n");
								bTestResult=!DllInterface.pFaxAPIDllTest(szWhisPhoneNumber1W,szWhisPhoneNumber1A,szWhisRemoteServerNameW, szWhisRemoteServerNameA, nNumCasesLocal, nNumCasesServer, &nNumCasesAttempted, &nNumCasesPassed,WHIS_TEST_MODE_DO);
								
							}
							
							if (bTestResult)	{
								fnWriteAndEcho(L"pFaxAPIDllTest() returned FALSE for section \"%s\".\r\n", szCurrentSection);
								}
							else {
								fnWriteAndEcho(L"pFaxAPIDllTest() returned TRUE for section \"%s\".\r\n", szCurrentSection);
								}
				} // (whis) end of don't catch exceptions
				else if (dwWhisTestMode != WHIS_TEST_MODE_SKIP) // (whis) INI configured to run this case
				{
					__try {
							fnWriteAndEcho(L"WHIS> Running extended test...\r\n");
							if (bLocalMode)	{
								fnWriteAndEcho(L"WHIS> LOCAL MODE SET\r\n");
								bTestResult=!DllInterface.pFaxAPIDllTest(szWhisPhoneNumber1W,szWhisPhoneNumber1A,NULL, NULL, nNumCasesLocal, nNumCasesServer, &nNumCasesAttempted, &nNumCasesPassed,dwWhisTestMode);
							}
							else {
								fnWriteAndEcho(L"WHIS> SERVER MODE SET\r\n");
								bTestResult=!DllInterface.pFaxAPIDllTest(szWhisPhoneNumber1W,szWhisPhoneNumber1A,szWhisRemoteServerNameW, szWhisRemoteServerNameA, nNumCasesLocal, nNumCasesServer, &nNumCasesAttempted, &nNumCasesPassed,dwWhisTestMode);
								
							}
							
							if (bTestResult)	{
								fnWriteAndEcho(L"pFaxAPIDllTest() returned FALSE for section \"%s\".\r\n", szCurrentSection);
								}
							else {
								fnWriteAndEcho(L"pFaxAPIDllTest() returned TRUE for section \"%s\".\r\n", szCurrentSection);
								}
							}
					__except(EXCEPTION_EXECUTE_HANDLER) {
							fnWriteAndEcho(L"Exception occurred in pFaxAPIDllTest() for section \"%s\".  ec = 0x%08x.\r\n", szCurrentSection, GetExceptionCode());
							goto DllFailed;
							}  // of try-except
				} // (whis) end of normal call to API DLL
				else {
				fnWriteAndEcho(L"Section: %s\r\nCanceled by user (see INI file for details)\r\n", szCurrentSection);
				}// (whis) end of don't run test at all


				fnWriteAndEcho(L"Section: %s\r\nNumber of cases attempted: %d\r\nNumber of cases passed: %d\r\n", szCurrentSection, nNumCasesAttempted, nNumCasesPassed);
				if (bLocalMode)		{
						nWhisNumSkipped=nNumCasesLocal-nNumCasesAttempted;
						nWhisNumFailed=nNumCasesAttempted-nNumCasesPassed;
				}
				else	{
						nWhisNumSkipped=nNumCasesServer-nNumCasesAttempted;
						nWhisNumFailed=nNumCasesAttempted-nNumCasesPassed;
				}

				
				fnWriteAndEcho(L"*** Number of cases skipped %d\r\n*** Number of cases failed %d\r\n",nWhisNumSkipped,nWhisNumFailed);
				fnWriteAndEcho(L"</section>");
				nTotCasesAttempted+=nNumCasesAttempted;
				nTotCasesPassed+=nNumCasesPassed;

				


	DllFailed:
		        FreeLibrary(DllInterface.hInstance);
			}
		}
		
	}
	
		fnWriteAndEcho(L"</body></test>");
		CloseHandle(g_hLogFile);



		iVal = 0;

	
	
		// Free the section names
		if (!HeapFree(g_hHeap, 0, szSectionNames))	{
		LocalEcho(L"WHIS> ERROR Could not free heap from szSectionNames");
		}

		// Free the phone number
		//if (szWhisPhoneNumber1W) {
		//	if (!HeapFree(g_hHeap, 0, szWhisPhoneNumber1W))	{
		//			LocalEcho(L"WHIS> ERROR Could not free heap from szWhisPhoneNumber1W");
		//	}
		//	if (!HeapFree(g_hHeap, 0, szWhisPhoneNumber1A))	{
		//			LocalEcho(L"WHIS> ERROR Could not free heap from szWhisPhoneNumber1A");
		//	}
		//}


		FreeLibrary(ApiInterface.hInstance);

		fnWriteAndEcho(L"\n\nSummery\n------------------");
		fnWriteAndEcho(L"\nNumber of cases attempted: %d\r\nNumber of cases passed: %d\r\n", nTotCasesAttempted, nTotCasesPassed);

	ExitLevel0:

		

		//if (szServerNameW) {
			// Free the server name
		//	if (!HeapFree(g_hHeap, 0, szServerNameW))
		//	{
		//		LocalEcho(L"WHIS> ERROR Could not free heap from szServerNameW");
		//	}
		//	if (!HeapFree(g_hHeap, 0, szServerNameA))
		//	{
		//		LocalEcho(L"WHIS> ERROR Could not free heap from szServerNameA");
		//	}
		//}

		
		if (szIniFile) {
			// Free the ini file name
			if (!HeapFree(g_hHeap, 0, szIniFile)) {
				LocalEcho(L"WHIS> ERROR Could not free heap from szIniFile");
			}

		}
		if (szLogFile) {
	        // Free the log file name
			if (!HeapFree(g_hHeap, 0, szLogFile)) {
			LocalEcho(L"WHIS> ERROR Could not free heap from szIniFile");
			}
		}

		return iVal;
	}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legacywin32\routeapi\apiext\apiext.c ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

  routeapi.c

Abstract:

  Window NT Fax Routing Extension.  These routing methods test the routing apis

Author:

  Steven Kehrli (steveke) 8/28/1998

--*/

#include <windows.h>
#include <stdio.h>
#include <winfax.h>
#include <faxroute.h>

#include "routeapi.h"

HANDLE                      g_hRouteHeap;                // Handle to the routing heap
PFAXROUTEADDFILE            pFaxRouteAddFile;            // API to add a file to the fax file list
PFAXROUTEDELETEFILE         pFaxRouteDeleteFile;         // API to delete a file from the fax file list
PFAXROUTEGETFILE            pFaxRouteGetFile;            // API to get a file from the fax file list
PFAXROUTEENUMFILES          pFaxRouteEnumFiles;          // API to enumerate the fax file list
PFAXROUTEMODIFYROUTINGDATA  pFaxRouteModifyRoutingData;  // API to modify the routing data for another routing method

#pragma data_seg(".INFO")

DWORD  g_dwRoutingInfo[2] = {0, 0};
BOOL   g_bEnabled[2] = {FALSE, FALSE};

#pragma data_seg()

DWORD
DllEntry(
    HINSTANCE  hInstance,
    DWORD      dwReason,
    LPVOID     pContext
)
/*++

Routine Description:

  DLL entry point

Arguments:

  hInstance - handle to the module
  dwReason - indicates the reason for being called
  pContext - context

Return Value:

  TRUE on success

--*/
{
    return TRUE;
}

BOOL WINAPI
FaxRouteInitialize(
    HANDLE                       hHeap,
    PFAX_ROUTE_CALLBACKROUTINES  pFaxRouteCallbackRoutines
)
/*++

Routine Description:

  Initializes the routing extension

Arguments:

  hHeap - handle to the heap
  pFaxRouteCallbackRoutins - pointer to fax routing callback routines

Return Value:

  TRUE on success

--*/
{
    g_hRouteHeap = hHeap;

    pFaxRouteAddFile = pFaxRouteCallbackRoutines->FaxRouteAddFile;
    pFaxRouteDeleteFile = pFaxRouteCallbackRoutines->FaxRouteDeleteFile;
    pFaxRouteGetFile = pFaxRouteCallbackRoutines->FaxRouteGetFile;
    pFaxRouteEnumFiles = pFaxRouteCallbackRoutines->FaxRouteEnumFiles;
    pFaxRouteModifyRoutingData = pFaxRouteCallbackRoutines->FaxRouteModifyRoutingData;

    return TRUE;
}

BOOL WINAPI
FaxRouteGetRoutingInfo(
    LPCWSTR  RoutingGuid,
    DWORD    dwDeviceId,
    LPBYTE   RoutingInfo,
    LPDWORD  pdwRoutingInfoSize
)
/*++

Routine Description:

  Gets the routing info for a routing method

Arguments:

  RoutingGuid - pointer to the GUID of the routing method
  dwDeviceId - port id
  RoutingInfo - pointer to the routing info
  pdwRoutingInfoSize - pointer to the size of the routing info

Return Value:

  TRUE on success

--*/
{
    DWORD  dwIndex;
    DWORD  cb;

    if (!lstrcmp(ROUTEAPI_METHOD_GUID1, RoutingGuid)) {
        dwIndex = 0;
    }
    else if (!lstrcmp(ROUTEAPI_METHOD_GUID2, RoutingGuid)) {
        dwIndex = 1;
    }
    else {
        dwIndex = -1;
    }

    if ((dwIndex == 0) || (dwIndex == 1)) {
        if (RoutingInfo == NULL) {
            *pdwRoutingInfoSize = sizeof(DWORD);
        }
        else {
            CopyMemory((LPDWORD) RoutingInfo, &g_dwRoutingInfo[dwIndex], sizeof(DWORD));
        }
    }

    return TRUE;
}

BOOL WINAPI
FaxRouteSetRoutingInfo(
    LPCWSTR     RoutingGuid,
    DWORD       dwDeviceId,
    const BYTE  *RoutingInfo,
    DWORD       dwRoutingInfoSize
)
/*++

Routine Description:

  Sets the routing info for a routing method

Arguments:

  RoutingGuid - pointer to the GUID of the routing method
  dwDeviceId - port id
  RoutingInfo - pointer to the routing info
  dwRoutingInfoSize - size of the routing info

Return Value:

  TRUE on success

--*/
{
    DWORD  dwIndex;

    if (!lstrcmp(ROUTEAPI_METHOD_GUID1, RoutingGuid)) {
        dwIndex = 0;
    }
    else if (!lstrcmp(ROUTEAPI_METHOD_GUID2, RoutingGuid)) {
        dwIndex = 1;
    }
    else {
        dwIndex = -1;
    }

    if ((dwIndex == 0) || (dwIndex == 1)) {
        if ((!RoutingInfo) || (!dwRoutingInfoSize)) {
            g_dwRoutingInfo[dwIndex] = 0;
        }
        else {
            g_dwRoutingInfo[dwIndex] = (DWORD) *(LPDWORD *) RoutingInfo;
        }
    }

    return TRUE;
}

BOOL WINAPI
FaxRouteDeviceEnable(
    LPCWSTR  RoutingGuid,
    DWORD    dwDeviceId,
    LONG     bEnable
)
/*++

Routine Description:

  Enables a routing method

Arguments:

  RoutingGuid - pointer to the GUID of the routing method
  dwDeviceId - port id
  bEnable - indicates whether the routing method is enabled or disabled

Return Value:

  TRUE on success

--*/
{
    DWORD  dwIndex;

    if (!lstrcmp(ROUTEAPI_METHOD_GUID1, RoutingGuid)) {
        dwIndex = 0;
    }
    else if (!lstrcmp(ROUTEAPI_METHOD_GUID2, RoutingGuid)) {
        dwIndex = 1;
    }
    else {
        dwIndex = -1;
    }

    if ((dwIndex == 0) || (dwIndex == 1)) {
        switch (bEnable) {
            case -1:
                return g_bEnabled[dwIndex];
                break;

            case 0:
                g_bEnabled[dwIndex] = FALSE;
                break;

            case 1:
                g_bEnabled[dwIndex] = TRUE;
                break;
        }
    }

    return TRUE;
}

BOOL WINAPI
FaxRouteDeviceChangeNotification(
    DWORD  dwDeviceId,
    BOOL   bNewDevice
)
/*++

Routine Description:

  Handles a device change

Arguments:

  dwDeviceId - port id
  bNewDevice - indicates whether the device is new

Return Value:

  TRUE on success

--*/
{
    return TRUE;
}

BOOL WINAPI
RouteApi1(
    PFAX_ROUTE  pFaxRoute,
    PVOID       *FailureData,
    LPDWORD     pdwFailureDataSize
)
/*++

Routine Description:

  Routing method.

Arguments:

  pFaxRoute - pointer to the fax routing structure
  FailureData - pointer to the failure data
  pdwFailureDataSize - size of the failure data

Return Value:

  TRUE on success

--*/
{
    return TRUE;
}

BOOL WINAPI
RouteApi2(
    PFAX_ROUTE  pFaxRoute,
    PVOID       *FailureData,
    LPDWORD     pdwFailureDataSize
)
/*++

Routine Description:

  Routing method.

Arguments:

  pFaxRoute - pointer to the fax routing structure
  FailureData - pointer to the failure data
  pdwFailureDataSize - size of the failure data

Return Value:

  TRUE on success

--*/
{
    return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legacywin32\xml\jobsapi\jobsapi.c ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

  jobsapi.c

Abstract:

  JobsApi: Fax API Test Dll: Client Job APIs
    1) FaxEnumJobs()
    2) FaxGetJob()
    3) FaxSetJob()
    4) FaxAbort()
    5) FaxGetPageData()

Author:

  Steven Kehrli (steveke) 8/28/1998

--*/

/*++

  Whistler Version:

  Lior Shmueli (liors) 23/11/2000

 ++*/

#include <wtypes.h>
#include <tchar.h>


#include "dllapi.h"

// g_hHeap is the handle to the heap
HANDLE           g_hHeap = NULL;
// g_ApiInterface is the API_INTERFACE structure
API_INTERFACE    g_ApiInterface;
// fnWriteLogFile is the pointer to the function to write a string to the log file
PFNWRITELOGFILE  fnWriteLogFile = NULL;

// whistler phone number
//LPCTSTR  g_szWhisPhoneNumber;
LPCTSTR		    g_szWhisPhoneNumber=NULL;
TCHAR			g_szWhisPhoneNumberVar1[MAX_PATH];
TCHAR			g_szWhisPhoneNumberVar2[MAX_PATH];
TCHAR			g_szWhisPhoneNumberVar3[MAX_PATH];

DWORD
DllEntry(
    HINSTANCE  hInstance,
    DWORD      dwReason,
    LPVOID     pContext
)
/*++

Routine Description:

  DLL entry point

Arguments:

  hInstance - handle to the module
  dwReason - indicates the reason for being called
  pContext - context

Return Value:

  TRUE on success

--*/
{
    return TRUE;
}

VOID WINAPI
FaxAPIDllInit(
    HANDLE            hHeap,
    API_INTERFACE     ApiInterface,
    PFNWRITELOGFILEW  pfnWriteLogFileW,
    PFNWRITELOGFILEA  pfnWriteLogFileA
)
{
    // Set g_hHeap
    g_hHeap = hHeap;
    // Set g_ApiInterface
    g_ApiInterface = ApiInterface;
#ifdef UNICODE
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileW;
#else
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileA;
#endif

    return;
}

VOID
fnFaxEnumJobs(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxEnumJobs()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE              hFaxSvcHandle;
    // pFaxConfig is the pointer to the fax configuration
    PFAX_CONFIGURATION  pFaxConfig;
    // pFaxJobs is the pointer to the fax jobs
    PFAX_JOB_ENTRY      pFaxJobs;
    // dwNumJobs1 is the number of fax jobs
    DWORD               dwNumJobs;
    // FaxJobParam1 is the first fax job params
    FAX_JOB_PARAM       FaxJobParam1;
    // FaxJobParam2 is the second fax job params
    FAX_JOB_PARAM       FaxJobParam2;
    // FaxJobParam3 is the second fax job params
    FAX_JOB_PARAM       FaxJobParam3;
    // dwFaxId1 is the first fax job id
    DWORD               dwFaxId1;
    // dwFaxId2 is the second fax job id
    DWORD               dwFaxId2;
    // dwFaxId3 is the third fax job id
    DWORD               dwFaxId3;

    DWORD               dwIndex;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxEnumJobs().\r\n"));
	fnWriteLogFile(TEXT("<function name=\"FaxEnumJobs\">"));

    ZeroMemory(&FaxJobParam1, sizeof(FAX_JOB_PARAM));
    FaxJobParam1.SizeOfStruct = sizeof(FAX_JOB_PARAM);
    FaxJobParam1.RecipientNumber = g_szWhisPhoneNumberVar1;
    FaxJobParam1.ScheduleAction = JSA_NOW;

    ZeroMemory(&FaxJobParam2, sizeof(FAX_JOB_PARAM));
    FaxJobParam2.SizeOfStruct = sizeof(FAX_JOB_PARAM);
    FaxJobParam2.RecipientNumber = g_szWhisPhoneNumberVar2;
    FaxJobParam2.ScheduleAction = JSA_SPECIFIC_TIME;
    GetSystemTime(&FaxJobParam2.ScheduleTime);

    ZeroMemory(&FaxJobParam3, sizeof(FAX_JOB_PARAM));
    FaxJobParam3.SizeOfStruct = sizeof(FAX_JOB_PARAM);
    FaxJobParam3.RecipientNumber = g_szWhisPhoneNumberVar3;
    FaxJobParam3.ScheduleAction = JSA_DISCOUNT_PERIOD;

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> Can not connect to fax server %s, The error code is 0x%08x.\r\n"), szServerName,GetLastError());
		fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to %s\r\n"), szServerName);
	}

    if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> Can not GET configuration from %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
        return;
    }

    pFaxConfig->PauseServerQueue = TRUE;

    if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> Can not SET configuration in %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
        return;
    }

    // Enumerate the jobs
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxEnumJobs(hFaxSvcHandle, &pFaxJobs, &dwNumJobs)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxEnumJobs() failed.  The error code is 0x%08x.  This is an error.  FaxEnumJobs() should succeed</result>\r\n"), GetLastError());
    }
    else {
        if (pFaxJobs == NULL) {
            fnWriteLogFile(TEXT("<result value=\"0\">pFaxJobs is NULL.  This is an error.  pFaxJobs should not be NULL.</result>\r\n"));
        }

        if (dwNumJobs != 0) {
            fnWriteLogFile(TEXT("<result value=\"0\">dwNumJobs is %d.  This is an error.  dwNumJobs should be 0.</result>\r\n"), dwNumJobs);
        }

        if ((pFaxJobs != NULL) && (dwNumJobs == 0)) {
			
            (*pnNumCasesPassed)++;
			fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
			dwFuncCasesPass++;
		
        }
		g_ApiInterface.FaxFreeBuffer(pFaxJobs);
    }
	
	fnWriteLogFile(TEXT("</case>"));

    // Send a document
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam1, NULL, &dwFaxId1)) {
        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
        return;
    }

    // Send a document
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam2, NULL, &dwFaxId2)) {
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId1);

        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
        return;
    }

    // Send a document
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam3, NULL, &dwFaxId3)) {
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId1);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId2);

        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
        return;
    }

    // Enumerate the jobs
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxEnumJobs(hFaxSvcHandle, &pFaxJobs, &dwNumJobs)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxEnumJobs() failed.  The error code is 0x%08x.  This is an error.  FaxEnumJobs() should succeed</result>\r\n"), GetLastError());
    }
    else {
        if (pFaxJobs == NULL) {
            fnWriteLogFile(TEXT("<result value=\"0\">pFaxJobs is NULL.  This is an error.  pFaxJobs should not be NULL</result>\r\n"));
        }

        if (dwNumJobs != 3) {
            fnWriteLogFile(TEXT("<result value=\"0\">dwNumJobs is %d.  This is an error.  dwNumJobs should be 3</result>\r\n"), dwNumJobs);
        }

        if ((pFaxJobs != NULL) && (dwNumJobs == 3)) {
            for (dwIndex = 0; dwIndex < dwNumJobs; dwIndex++) {
                if (pFaxJobs[dwIndex].SizeOfStruct != sizeof(FAX_JOB_ENTRY)) {
                    fnWriteLogFile(TEXT("<result value=\"0\">SizeOfStruct: Received: %d, Expected: %d</result>\r\n"), pFaxJobs[dwIndex].SizeOfStruct, sizeof(FAX_JOB_ENTRY));
                    goto FuncFailed;
                }
				fnWriteLogFile(TEXT("WHIS> (not error message) JobType: Received: %d, Expected: (JT_SEND) %d\r\n"), pFaxJobs[dwIndex].JobType, JT_SEND);
                if (pFaxJobs[dwIndex].JobType != JT_SEND) {
                    fnWriteLogFile(TEXT("<result value=\"0\">JobType: Received: %d, Expected: (JT_SEND) %d</result>\r\n"), pFaxJobs[dwIndex].JobType, JT_SEND);
                    goto FuncFailed;
                }

                if (pFaxJobs[dwIndex].QueueStatus != JS_PENDING) {
                    fnWriteLogFile(TEXT("<result value=\"0\">JobType: Received: %d, Expected: (JS_PENDING) %d</result>\r\n"), pFaxJobs[dwIndex].QueueStatus, JS_PENDING);
                    goto FuncFailed;
                }

                if (pFaxJobs[dwIndex].JobId == dwFaxId1) {
                    if (lstrcmp(pFaxJobs[dwIndex].RecipientNumber, g_szWhisPhoneNumberVar1)) {
                        fnWriteLogFile(TEXT("<result value=\"0\">RecipientNumber: Received: %s, Expected: %s</result>\r\n"), pFaxJobs[dwIndex].RecipientNumber, g_szWhisPhoneNumberVar1);
                        goto FuncFailed;
                    }

                    if (pFaxJobs[dwIndex].ScheduleAction != JSA_NOW) {
                        fnWriteLogFile(TEXT("<result value=\"0\">ScheduleAction: Received: %s, Expected: (JSA_NOW) %s</result>\r\n"), pFaxJobs[dwIndex].ScheduleAction, JSA_NOW);
                        goto FuncFailed;
                    }
                }
                else if (pFaxJobs[dwIndex].JobId == dwFaxId2) {
                    if (lstrcmp(pFaxJobs[dwIndex].RecipientNumber, g_szWhisPhoneNumberVar2)) {
                        fnWriteLogFile(TEXT("<result value=\"0\">RecipientNumber: Received: %s, Expected: %s</result>\r\n"), pFaxJobs[dwIndex].RecipientNumber, g_szWhisPhoneNumberVar2);
                        goto FuncFailed;
                    }

                    if (pFaxJobs[dwIndex].ScheduleAction != JSA_SPECIFIC_TIME) {
                        fnWriteLogFile(TEXT("<result value=\"0\">ScheduleAction: Received: %s, Expected: (JSA_SPECIFIC_TIME) %s.</result>\r\n"), pFaxJobs[dwIndex].ScheduleAction, JSA_SPECIFIC_TIME);
                        goto FuncFailed;
                    }
                }
                else if (pFaxJobs[dwIndex].JobId == dwFaxId3) {
                    if (lstrcmp(pFaxJobs[dwIndex].RecipientNumber, g_szWhisPhoneNumberVar3)) {
                        fnWriteLogFile(TEXT("<result value=\"0\">RecipientNumber: Received: %s, Expected: %s.</result>\r\n"), pFaxJobs[dwIndex].RecipientNumber, g_szWhisPhoneNumberVar1);
                        goto FuncFailed;
                    }

                    if (pFaxJobs[dwIndex].ScheduleAction != JSA_DISCOUNT_PERIOD) {
                        fnWriteLogFile(TEXT("<result value=\"0\">ScheduleAction: Received: %s, Expected: (JSA_DISCOUNT_PERIOD) %s.</result>\r\n"), pFaxJobs[dwIndex].ScheduleAction, JSA_DISCOUNT_PERIOD);
                        goto FuncFailed;
                    }
                }
                else {
                    fnWriteLogFile(TEXT("<result value=\"0\">Unknown job id: %d.</result>\r\n"), pFaxJobs[dwIndex].JobId);
                    goto FuncFailed;
                }
            }

            (*pnNumCasesPassed)++;
			fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
			dwFuncCasesPass++;
        }
		FuncFailed:
        g_ApiInterface.FaxFreeBuffer(pFaxJobs);
    }
	fnWriteLogFile(TEXT("</case>"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxEnumJobs(NULL, &pFaxJobs, &dwNumJobs)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxEnumJobs() returned TRUE.  This is an error.  FaxEnumJobs() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxJobs);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxEnumJobs() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	
	fnWriteLogFile(TEXT("</case>"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pFaxJobs = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"pFaxJobs = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxEnumJobs(hFaxSvcHandle, NULL, &dwNumJobs)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxEnumJobs() returned TRUE.  This is an error.  FaxEnumJobs() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pFaxJobs);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxEnumJobs() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("</case>"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("dwNumJobs = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"dwNumJobs = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxEnumJobs(hFaxSvcHandle, &pFaxJobs, NULL)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxEnumJobs() returned TRUE.  This is an error.  FaxEnumJobs() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pFaxJobs);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxEnumJobs() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	
	fnWriteLogFile(TEXT("</case>"));

    g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId1);
    g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId2);
    g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId3);

    pFaxConfig->PauseServerQueue = FALSE;
    g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
    g_ApiInterface.FaxFreeBuffer(pFaxConfig);

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Invalid hFaxSvcHandle\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxEnumJobs(hFaxSvcHandle, &pFaxJobs, &dwNumJobs)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxEnumJobs() returned TRUE.  This is an error.  FaxEnumJobs() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxJobs);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxEnumJobs() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	
	fnWriteLogFile(TEXT("</case>"));

//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxEnumJobs(hFaxSvcHandle, &pFaxJobs, &dwNumJobs)) {
            //fnWriteLogFile(TEXT("FaxEnumJobs() failed.  The error code is 0x%08x.  This is an error.  FaxEnumJobs() should succeed.\r\n"), GetLastError());
        //}
        //else {
            //g_ApiInterface.FaxFreeBuffer(pFaxJobs);
            //(*pnNumCasesPassed)++;
				//dwFuncCasesPass++;
        //}

        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
	fnWriteLogFile(TEXT("<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
	fnWriteLogFile(TEXT("</function>"));
	
}

VOID
fnFaxGetJob(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxGetJob()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE              hFaxSvcHandle;
    // pFaxConfig is the pointer to the fax configuration
    PFAX_CONFIGURATION  pFaxConfig;
    // pFaxJob is the pointer to the fax job
    PFAX_JOB_ENTRY      pFaxJob;
    // FaxJobParam is the fax job params
    FAX_JOB_PARAM       FaxJobParam;
    // dwFaxId is the fax job id
    DWORD               dwFaxId;

    DWORD               dwIndex;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxGetJob().\r\n"));
	fnWriteLogFile(TEXT("<function name=\"FaxGetJob\">"));

    ZeroMemory(&FaxJobParam, sizeof(FAX_JOB_PARAM));
    FaxJobParam.SizeOfStruct = sizeof(FAX_JOB_PARAM);
    FaxJobParam.RecipientNumber = g_szWhisPhoneNumber;

	fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);





    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> Can not connect to fax server %s, The error code is 0x%08x.\r\n"), szServerName,GetLastError());
			fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
			fnWriteLogFile(TEXT("</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to %s\r\n"), szServerName);
	}


    if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> Can not GET configuration from %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    pFaxConfig->PauseServerQueue = TRUE;

    if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> Can not SET configuration in %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    // Send a document
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
		fnWriteLogFile(TEXT("WHIS> Can not send test document in %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    for (dwIndex = 0; dwIndex < 2; dwIndex++) {
        // Get the job
        (*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

        fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

        if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob)) {
            fnWriteLogFile(TEXT("<result value=\"0\">FaxGetJob() failed.  The error code is 0x%08x.  This is an error.  FaxGetJob() should succeed.</result>\r\n"), GetLastError());
        }
        else {
            if (pFaxJob == NULL) {
                fnWriteLogFile(TEXT("<result value=\"0\">pFaxJob is NULL.  This is an error.  pFaxJob should not be NULL.</result>\r\n"));
            }
            else {
                if (pFaxJob->SizeOfStruct != sizeof(FAX_JOB_ENTRY)) {
                    fnWriteLogFile(TEXT("<result value=\"0\">SizeOfStruct: Received: %d, Expected: %d.</result>\r\n"), pFaxJob->SizeOfStruct, sizeof(FAX_JOB_ENTRY));
                    goto FuncFailed;
                }

                if (pFaxJob->JobType != JT_SEND) {
                    fnWriteLogFile(TEXT("<result value=\"0\">JobType: Received: %d, Expected: (JT_SEND) %d.</result>\r\n"), pFaxJob->JobType, JT_SEND);
                    goto FuncFailed;
                }

                if (pFaxJob->QueueStatus != JS_PENDING) {
                    fnWriteLogFile(TEXT("<result value=\"0\">Queue status: Received: %d, Expected: (JS_PENDING) %d.</result>\r\n"), pFaxJob->QueueStatus, JS_PENDING);
                    goto FuncFailed;
                }

                if (pFaxJob->JobId != dwFaxId) {
                    fnWriteLogFile(TEXT("<result value=\"0\">JobId: Received: %d, Expected: %d.</result>\r\n"), pFaxJob->JobId, dwFaxId);
                    goto FuncFailed;
                }

                if (lstrcmp(pFaxJob->RecipientNumber, g_szWhisPhoneNumber)) {
                    fnWriteLogFile(TEXT("<result value=\"0\">RecipientNumber: Received: %s, Expected: %s.</result>\r\n"), pFaxJob->RecipientNumber, g_szWhisPhoneNumber);
                    goto FuncFailed;
                }

                if (pFaxJob->ScheduleAction != JSA_NOW) {
                    fnWriteLogFile(TEXT("<result value=\"0\">ScheduleAction: Received: %s, Expected: (JSA_NOW) %s.</result>\r\n"), pFaxJob->ScheduleAction, JSA_NOW);
                    goto FuncFailed;
                }

                (*pnNumCasesPassed)++;
				fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
				dwFuncCasesPass++;
            }

FuncFailed:
            g_ApiInterface.FaxFreeBuffer(pFaxJob);
        }
		fnWriteLogFile(TEXT("</case>"));
    }


    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetJob(NULL, dwFaxId, &pFaxJob)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxGetJob() returned TRUE.  This is an error.  FaxGetJob() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxJob);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetJob() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	
	fnWriteLogFile(TEXT("</case>"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid dwFaxId.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Invalid dwFaxId\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetJob(hFaxSvcHandle, -1, NULL)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxGetJob() returned TRUE.  This is an error.  FaxGetJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pFaxJob);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	
	fnWriteLogFile(TEXT("</case>"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pFaxJob = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"pFaxJob = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, NULL)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxGetJob() returned TRUE.  This is an error.  FaxGetJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pFaxJob);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }

	fnWriteLogFile(TEXT("</case>"));

    g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

    pFaxConfig->PauseServerQueue = FALSE;
    g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
    g_ApiInterface.FaxFreeBuffer(pFaxConfig);

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Invalid hFaxSvcHandle\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxGetJob() returned TRUE.  This is an error.  FaxGetJob() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxJob);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetJob() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("</case>"));

//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        //if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //pFaxConfig->PauseServerQueue = TRUE;

        //if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
          //  g_ApiInterface.FaxFreeBuffer(pFaxConfig);
            // Disconnect from the fax server
            //g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        // Send a document
        //if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
          //  pFaxConfig->PauseServerQueue = FALSE;
            //g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
            //g_ApiInterface.FaxFreeBuffer(pFaxConfig);

            // Disconnect from the fax server
//            g_ApiInterface.FaxClose(hFaxSvcHandle);
  //          return;
    //    }

      //  (*pnNumCasesAttempted)++;
//		dwFuncCasesAtt++;

  //      fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob)) {
            //fnWriteLogFile(TEXT("FaxGetJob() failed.  The error code is 0x%08x.  This is an error.  FaxGetJob() should succeed.\r\n"), GetLastError());
        //}
        //else {
          //  g_ApiInterface.FaxFreeBuffer(pFaxJob);
//            (*pnNumCasesPassed)++;
//			dwFuncCasesPass++;
  //      }

    //    pFaxConfig->PauseServerQueue = FALSE;
      //  g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        //g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
	fnWriteLogFile(TEXT("<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
	fnWriteLogFile(TEXT("</function>"));
	
}

VOID
fnFaxSetJob(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	BOOL	 bTestLimits
)
/*++

Routine Description:

  FaxSetJob()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE              hFaxSvcHandle;
    // pFaxConfig is the pointer to the fax configuration
    PFAX_CONFIGURATION  pFaxConfig;
    // pFaxJob1 is the pointer to the fax job
    PFAX_JOB_ENTRY      pFaxJob1;
    // pFaxJob2 is the pointer to the fax job
    PFAX_JOB_ENTRY      pFaxJob2;
    // FaxJobParam is the fax job params
    FAX_JOB_PARAM       FaxJobParam;
    // dwFaxId is the fax job id
    DWORD               dwFaxId;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxSetJob().\r\n"));
	fnWriteLogFile(TEXT("<function name=\"FaxSetJob\">"));

	
    ZeroMemory(&FaxJobParam, sizeof(FAX_JOB_PARAM));
    FaxJobParam.SizeOfStruct = sizeof(FAX_JOB_PARAM);
    FaxJobParam.RecipientNumber = g_szWhisPhoneNumber;
	
	fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);

	// Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> Can not connect to fax server %s, The error code is 0x%08x.\r\n"), szServerName,GetLastError());
			fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to %s\r\n"), szServerName);
	}

    if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> Can not GET configuration from %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
			fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
        return;
    }

    pFaxConfig->PauseServerQueue = TRUE;

    if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> Can not SET configuration in %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
			fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
        return;
    }
    // Send a document
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
		fnWriteLogFile(TEXT("WHIS> Can not send test document in %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
			fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
        return;
    }

    // Get the job
    if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob1)) {
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
			fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
        return;
    }

    // Set the job
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (JC_PAUSE).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Valid Case (JC_PAUSE)\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSetJob(hFaxSvcHandle, dwFaxId, JC_PAUSE, pFaxJob1)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxSetJob() failed.  The error code is 0x%08x.  This is an error.  FaxSetJob() should succeed.</result>\r\n"), GetLastError());
    }
	
    else {
	
        // Get the job
        if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob2)) {
            fnWriteLogFile(TEXT("<result value=\"0\">FaxGetJob() failed.  The error code is 0x%08x.  This is an error.  FaxGetJob() should succeed.</result>\r\n"), GetLastError());
        }
        else {
            if (pFaxJob2->QueueStatus != JS_PAUSED) {
                fnWriteLogFile(TEXT("<result value=\"0\">JobType: Received: %d, Expected: (JS_PAUSED) %d.</result>\r\n"), pFaxJob2->QueueStatus, JS_PAUSED);
            }
            else {
                (*pnNumCasesPassed)++;
				fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
				dwFuncCasesPass++;
            }

            g_ApiInterface.FaxFreeBuffer(pFaxJob2);
        }
    }
	fnWriteLogFile(TEXT("</case>"));

    g_ApiInterface.FaxFreeBuffer(pFaxJob1);
    g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

    // Send a document
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
			fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
        return;
    }

    // Get the job
    if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob1)) {
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
			fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
        return;
    }

    // Set the job
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (JC_RESUME).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSetJob(hFaxSvcHandle, dwFaxId, JC_RESUME, pFaxJob1)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxSetJob() failed.  The error code is 0x%08x.  This is an error.  FaxSetJob() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        // Get the job
        if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob2)) {
            fnWriteLogFile(TEXT("<result value=\"0\">FaxGetJob() failed.  The error code is 0x%08x.  This is an error.  FaxGetJob() should succeed.</result>\r\n"), GetLastError());
        }
        else {
            if (pFaxJob2->QueueStatus != JS_PENDING) {
                fnWriteLogFile(TEXT("<result value=\"0\">JobType: Received: %d, Expected: (JS_PENDING) %d.</result>\r\n"), pFaxJob2->QueueStatus, JS_PENDING);
            }
            else {
                (*pnNumCasesPassed)++;
				fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
				dwFuncCasesPass++;
            }

            g_ApiInterface.FaxFreeBuffer(pFaxJob2);
        }
    }
	fnWriteLogFile(TEXT("</case>"));

    g_ApiInterface.FaxFreeBuffer(pFaxJob1);
    g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

    // Send a document
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
			fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
        return;
    }

    // Get the job
    if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob1)) {
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
			fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
        return;
    }

    // Set the job
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (JC_RESTART).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSetJob(hFaxSvcHandle, dwFaxId, JC_RESTART, pFaxJob1)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxSetJob() failed.  The error code is 0x%08x.  This is an error.  FaxSetJob() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        // Get the job
        if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob2)) {
            fnWriteLogFile(TEXT("<result value=\"0\">FaxGetJob() failed.  The error code is 0x%08x.  This is an error.  FaxGetJob() should succeed.</result>\r\n"), GetLastError());
        }
        else {
            if (pFaxJob2->QueueStatus != JS_PENDING) {
                fnWriteLogFile(TEXT("<result value=\"0\">JobType: Received: %d, Expected: (JS_RESTART) %d.</result>\r\n"), pFaxJob2->QueueStatus, JS_PENDING);
            }
            else {
                (*pnNumCasesPassed)++;
				fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
				dwFuncCasesPass++;
            }

            g_ApiInterface.FaxFreeBuffer(pFaxJob2);
        }
    }
	fnWriteLogFile(TEXT("</case>"));

    g_ApiInterface.FaxFreeBuffer(pFaxJob1);
    g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

    // Send a document
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    // Get the job
    if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob1)) {
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    // Set the job
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (JC_DELETE).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSetJob(hFaxSvcHandle, dwFaxId, JC_DELETE, pFaxJob1)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxSetJob() failed.  The error code is 0x%08x.  This is an error.  FaxSetJob() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob2)) {
            fnWriteLogFile(TEXT("<result value=\"0\">FaxSetJob() returned TRUE.  This is an error.  FaxSetJob() should return FALSE.</result>\r\n"));
            g_ApiInterface.FaxFreeBuffer(pFaxJob2);
        }
        else {
            (*pnNumCasesPassed)++;
			fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
			dwFuncCasesPass++;
        }
    }
	fnWriteLogFile(TEXT("</case>"));

    g_ApiInterface.FaxFreeBuffer(pFaxJob1);
    g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

    // Send a document
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
			fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
        return;
    }

    // Get the job
    if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob1)) {
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
        return;
    }



	
  
	// Set the job (limit testing)
	if (bTestLimits)	{
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;
		fnWriteLogFile(TEXT("Invalid Case (MAX_DWORD).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("<case name=\"Invalid Case (MAX_DWORD)\" id=\"%d\">"), *pnNumCasesAttempted);

		if (g_ApiInterface.FaxSetJob(hFaxSvcHandle, dwFaxId, MAX_DWORD, pFaxJob1)) {
			fnWriteLogFile(TEXT("<result value=\"0\">WHIS> FaxSetJob() succeeded, the is an error, FaxSetJob should fail and the error should be ERROR_INVALID_PARAMETER.</result>\r\n"));
		}
		else {
			if (GetLastError() != ERROR_INVALID_PARAMETER) {
				fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			}
			else {
				(*pnNumCasesPassed)++;
				fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
				dwFuncCasesPass++;
			}
        }
	fnWriteLogFile(TEXT("</case>"));
    }
	

    g_ApiInterface.FaxFreeBuffer(pFaxJob1);
    g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

    // Send a document
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
			fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
		return;
    }

    // Get the job
    if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob1)) {
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
			fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
        return;
    }





    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetJob(NULL, dwFaxId, JC_RESTART, pFaxJob1)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxSetJob() returned TRUE.  This is an error.  FaxSetJob() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetJob() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("</case>"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid dwFaxId.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetJob(hFaxSvcHandle, -1, JC_RESTART, pFaxJob1)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxSetJob() returned TRUE.  This is an error.  FaxSetJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("</case>"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Invalid dwCommand.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetJob(hFaxSvcHandle, dwFaxId, -1, pFaxJob1)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxSetJob() returned TRUE.  This is an error.  FaxSetJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("</case>"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pFaxJob = NULL.  (This will fail on whistler, see RAID 10909) Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetJob(hFaxSvcHandle, dwFaxId, JC_RESTART, NULL)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxSetJob() returned TRUE.  This is an error.  FaxSetJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("</case>"));

    g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

    pFaxConfig->PauseServerQueue = FALSE;
    g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
    g_ApiInterface.FaxFreeBuffer(pFaxConfig);

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetJob(hFaxSvcHandle, dwFaxId, JC_RESTART, pFaxJob1)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxSetJob() returned TRUE.  This is an error.  FaxSetJob() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetJob() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("</case>"));

    g_ApiInterface.FaxFreeBuffer(pFaxJob1);

//    if (szServerName) {

//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));

        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        //if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
          //  // Disconnect from the fax server
//            g_ApiInterface.FaxClose(hFaxSvcHandle);
  //          return;
    //    }

      //  pFaxConfig->PauseServerQueue = TRUE;

//        if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
  //          g_ApiInterface.FaxFreeBuffer(pFaxConfig);
    //        // Disconnect from the fax server
      //      g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        // Send a document
        //if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
          //  pFaxConfig->PauseServerQueue = FALSE;
            //g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
            //g_ApiInterface.FaxFreeBuffer(pFaxConfig);

            // Disconnect from the fax server
//            g_ApiInterface.FaxClose(hFaxSvcHandle);
  //          return;
    //    }

        // Get the job
      //  if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob1)) {
        //    g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

          //  pFaxConfig->PauseServerQueue = FALSE;
//            g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
  //          g_ApiInterface.FaxFreeBuffer(pFaxConfig);
//
            // Disconnect from the fax server
  //          g_ApiInterface.FaxClose(hFaxSvcHandle);
    //        return;
      //  }

        // Set the job
//        (*pnNumCasesAttempted)++;
//		dwFuncCasesAtt++;

  //      fnWriteLogFile(TEXT("Remote hFaxSvcHandle (JC_PAUSE).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    //    if (!g_ApiInterface.FaxSetJob(hFaxSvcHandle, dwFaxId, JC_PAUSE, pFaxJob1)) {
      //      fnWriteLogFile(TEXT("FaxSetJob() failed.  The error code is 0x%08x.  This is an error.  FaxSetJob() should succeed.\r\n"), GetLastError());
//        }
  //      else {
    //        (*pnNumCasesPassed)++;
	//		dwFuncCasesPass++;
      //  }

        //g_ApiInterface.FaxFreeBuffer(pFaxJob1);
        //g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

        // Send a document
        //if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
          //  pFaxConfig->PauseServerQueue = FALSE;
            //g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
            //g_ApiInterface.FaxFreeBuffer(pFaxConfig);

            // Disconnect from the fax server
            //g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        // Get the job
        //if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob1)) {
          //  g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
//
  //          pFaxConfig->PauseServerQueue = FALSE;
    //        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
      //      g_ApiInterface.FaxFreeBuffer(pFaxConfig);

            // Disconnect from the fax server
        //    g_ApiInterface.FaxClose(hFaxSvcHandle);
          //  return;
        //}

        // Set the job
        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle (JC_RESUME).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxSetJob(hFaxSvcHandle, dwFaxId, JC_RESUME, pFaxJob1)) {
          //  fnWriteLogFile(TEXT("FaxSetJob() failed.  The error code is 0x%08x.  This is an error.  FaxSetJob() should succeed.\r\n"), GetLastError());
        //}
        //else {
          //  (*pnNumCasesPassed)++;
			//dwFuncCasesPass++;
        //}

        //g_ApiInterface.FaxFreeBuffer(pFaxJob1);
        //g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

        // Send a document
//        if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
  //          pFaxConfig->PauseServerQueue = FALSE;
    //        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
      //      g_ApiInterface.FaxFreeBuffer(pFaxConfig);
//
            // Disconnect from the fax server
  //          g_ApiInterface.FaxClose(hFaxSvcHandle);
    //        return;
      //  }

        // Get the job
        //if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob1)) {
          //  g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

            //pFaxConfig->PauseServerQueue = FALSE;
            //g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
            //g_ApiInterface.FaxFreeBuffer(pFaxConfig);

            // Disconnect from the fax server
//            g_ApiInterface.FaxClose(hFaxSvcHandle);
  //          return;
        //}

        // Set the job
        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle (JC_RESTART).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxSetJob(hFaxSvcHandle, dwFaxId, JC_RESTART, pFaxJob1)) {
            //fnWriteLogFile(TEXT("FaxSetJob() failed.  The error code is 0x%08x.  This is an error.  FaxSetJob() should succeed.\r\n"), GetLastError());
        //}
        //else {
            //(*pnNumCasesPassed)++;
			//dwFuncCasesPass++;
        //}

        //g_ApiInterface.FaxFreeBuffer(pFaxJob1);
        //g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

        // Send a document
//        if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
  //          pFaxConfig->PauseServerQueue = FALSE;
    //        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
      //      g_ApiInterface.FaxFreeBuffer(pFaxConfig);
//
            // Disconnect from the fax server
  //          g_ApiInterface.FaxClose(hFaxSvcHandle);
    //        return;
      //  }

        // Get the job
        //if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob1)) {
          //  g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

//            pFaxConfig->PauseServerQueue = FALSE;
  //          g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
 //        g_ApiInterface.FaxFreeBuffer(pFaxConfig);
///
            // Disconnect from the fax server
   //         g_ApiInterface.FaxClose(hFaxSvcHandle);
     //       return;
       // }

        // Set the job
        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle (JC_DELETE).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxSetJob(hFaxSvcHandle, dwFaxId, JC_DELETE, pFaxJob1)) {
            //fnWriteLogFile(TEXT("FaxSetJob() failed.  The error code is 0x%08x.  This is an error.  FaxSetJob() should succeed.\r\n"), GetLastError());
        //}
        //else {
          //  (*pnNumCasesPassed)++;
			//dwFuncCasesPass++;
        //}

        //g_ApiInterface.FaxFreeBuffer(pFaxJob1);
        //g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

        //pFaxConfig->PauseServerQueue = FALSE;
        //g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        //g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("</function>"));

}

VOID
fnFaxAbort(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxAbort()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE              hFaxSvcHandle;
    // pFaxConfig is the pointer to the fax configuration
    PFAX_CONFIGURATION  pFaxConfig;
    // pFaxJob is the pointer to the fax job
    PFAX_JOB_ENTRY      pFaxJob;
    // FaxJobParam is the fax job params
    FAX_JOB_PARAM       FaxJobParam;
    // dwFaxId is the fax job id
    DWORD               dwFaxId;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxAbort().\r\n"));
	fnWriteLogFile(TEXT("<function name=\"FaxAbort\">"));


    ZeroMemory(&FaxJobParam, sizeof(FAX_JOB_PARAM));
    FaxJobParam.SizeOfStruct = sizeof(FAX_JOB_PARAM);
    FaxJobParam.RecipientNumber = g_szWhisPhoneNumber;

	fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);
	
    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> Can not connect to fax server %s, The error code is 0x%08x.\r\n"), szServerName,GetLastError());
		fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to %s\r\n"), szServerName);
	}


    if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> Can not GET configuration from %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
        return;
    }

    pFaxConfig->PauseServerQueue = TRUE;

    if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> Can not SET configuration in %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
        return;
    }

    // Send a document
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
		fnWriteLogFile(TEXT("WHIS> Can not send test document in %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
        return;
    }

    // Abort the job
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxAbort() failed.  The error code is 0x%08x.  This is an error.  FaxAbort() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob)) {
            fnWriteLogFile(TEXT("<result value=\"0\">FaxGetJob() returned TRUE.  This is an error.  FaxGetJob() should return FALSE.</result>\r\n"));
            g_ApiInterface.FaxFreeBuffer(pFaxJob);
        }
        else {
            (*pnNumCasesPassed)++;
			fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
			dwFuncCasesPass++;
        }
    }
	fnWriteLogFile(TEXT("</case>"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxAbort(NULL, dwFaxId)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxAbort() returned TRUE.  This is an error.  FaxAbort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxAbort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("</case>"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid dwFaxId.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Invalid dwFaxId\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxAbort(hFaxSvcHandle, -1)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxAbort() returned TRUE.  This is an error.  FaxAbort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxAbort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("</case>"));

    pFaxConfig->PauseServerQueue = FALSE;
    g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
    g_ApiInterface.FaxFreeBuffer(pFaxConfig);

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Invalid hFaxSvcHandle\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxAbort() returned TRUE.  This is an error.  FaxAbort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxAbort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("</case>"));

//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        //if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //pFaxConfig->PauseServerQueue = TRUE;

        //if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
          //  g_ApiInterface.FaxFreeBuffer(pFaxConfig);
            // Disconnect from the fax server
            //g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        // Send a document
        //if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
          //  pFaxConfig->PauseServerQueue = FALSE;
            //g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
            //g_ApiInterface.FaxFreeBuffer(pFaxConfig);

            // Disconnect from the fax server
            //g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        // Abort the job
        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

//        fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
  //      if (!g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId)) {
    //        fnWriteLogFile(TEXT("FaxAbort() failed.  The error code is 0x%08x.  This is an error.  FaxAbort() should succeed.\r\n"), GetLastError());
      //  }
        //else {
          //  (*pnNumCasesPassed)++;
			//dwFuncCasesPass++;
        //}

        //pFaxConfig->PauseServerQueue = FALSE;
        //g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        //g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
	fnWriteLogFile(TEXT("<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
	fnWriteLogFile(TEXT("</function>"));
	
}

VOID
fnFaxGetPageData(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxGetPageData()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE              hFaxSvcHandle;
    // pFaxConfig is the pointer to the fax configuration
    PFAX_CONFIGURATION  pFaxConfig;
    // FaxJobParam is the fax job params
    FAX_JOB_PARAM       FaxJobParam;
    // dwFaxId is the fax job id
    DWORD               dwFaxId;
    // pPageDataBuffer is a pointer to the page data
    LPBYTE              pPageDataBuffer;
    // dwPageDataBufferSize is the size of the page data buffer
    DWORD               dwPageDataBufferSize;
    // dwImageWidth is the page data width
    DWORD               dwImageWidth;
    // dwImageHeight is the page data height
    DWORD               dwImageHeight;

    DWORD               dwIndex;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxGetPageData().\r\n"));
	fnWriteLogFile(TEXT("<function name=\"FaxGetPageData\">"));

    ZeroMemory(&FaxJobParam, sizeof(FAX_JOB_PARAM));
    FaxJobParam.SizeOfStruct = sizeof(FAX_JOB_PARAM);
    FaxJobParam.RecipientNumber = g_szWhisPhoneNumber;

	fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> Can not connect to fax server %s, The error code is 0x%08x.\r\n"), szServerName,GetLastError());
		fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to %s\r\n"), szServerName);
	}


    if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> Can not GET configuration from %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
        return;
    }

    pFaxConfig->PauseServerQueue = TRUE;

    if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> Can not SET configuration in %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
        return;
    }

    // Send a document
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
		fnWriteLogFile(TEXT("WHIS> Can not send test document in %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
        return;
    }

    for (dwIndex = 0; dwIndex < 2; dwIndex++) {
        // Get the page data
        (*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

        fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

        if (!g_ApiInterface.FaxGetPageData(hFaxSvcHandle, dwFaxId, &pPageDataBuffer, &dwPageDataBufferSize, &dwImageWidth, &dwImageHeight)) {
            fnWriteLogFile(TEXT("<result value=\"0\">FaxGetPageData() failed.  The error code is 0x%08x.  This is an error.  FaxGetPageData() should succeed.</result>\r\n"), GetLastError());
        }
        else {
            g_ApiInterface.FaxFreeBuffer(pPageDataBuffer);
            (*pnNumCasesPassed)++;
			fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
			dwFuncCasesPass++;
        }
		fnWriteLogFile(TEXT("</case>"));
    }		


    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetPageData(NULL, dwFaxId, &pPageDataBuffer, &dwPageDataBufferSize, &dwImageWidth, &dwImageHeight)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxGetPageData() returned TRUE.  This is an error.  FaxGetPageData() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pPageDataBuffer);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetPageData() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("</case>"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid dwFaxId.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Invalid dwFaxId\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetPageData(hFaxSvcHandle, -1, &pPageDataBuffer, &dwPageDataBufferSize, &dwImageWidth, &dwImageHeight)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxGetPageData() returned TRUE.  This is an error.  FaxGetPageData() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pPageDataBuffer);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetPageData() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("</case>"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pPageDataBuffer = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"pPageDataBuffer = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetPageData(hFaxSvcHandle, dwFaxId, NULL, &dwPageDataBufferSize, &dwImageWidth, &dwImageHeight)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxGetPageData() returned TRUE.  This is an error.  FaxGetPageData() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pPageDataBuffer);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetPageData() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("</case>"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("dwPageDataBufferSize = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"dwPageDataBufferSize = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetPageData(hFaxSvcHandle, dwFaxId, &pPageDataBuffer, NULL, &dwImageWidth, &dwImageHeight)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxGetPageData() returned TRUE.  This is an error.  FaxGetPageData() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pPageDataBuffer);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetPageData() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("</case>"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("dwImageWidth = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"dwImageWidth = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetPageData(hFaxSvcHandle, dwFaxId, &pPageDataBuffer, &dwPageDataBufferSize, NULL, &dwImageHeight)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxGetPageData() returned TRUE.  This is an error.  FaxGetPageData() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pPageDataBuffer);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetPageData() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("</case>"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("dwImageHeight = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"dwImageHeight = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetPageData(hFaxSvcHandle, dwFaxId, &pPageDataBuffer, &dwPageDataBufferSize, &dwImageWidth, NULL)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxGetPageData() returned TRUE.  This is an error.  FaxGetPageData() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pPageDataBuffer);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetPageData() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("</case>"));

    g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

    pFaxConfig->PauseServerQueue = FALSE;
    g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
    g_ApiInterface.FaxFreeBuffer(pFaxConfig);

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Invalid hFaxSvcHandle\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetPageData(hFaxSvcHandle, dwFaxId, &pPageDataBuffer, &dwPageDataBufferSize, &dwImageWidth, &dwImageHeight)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxGetPageData() returned TRUE.  This is an error.  FaxGetPageData() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pPageDataBuffer);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetPageData() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("</case>"));

//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        //if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
//            return;
  //      }

    //    pFaxConfig->PauseServerQueue = TRUE;

      //  if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
        //    g_ApiInterface.FaxFreeBuffer(pFaxConfig);
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        // Send a document
//        if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
  //          pFaxConfig->PauseServerQueue = FALSE;
    //        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
      //      g_ApiInterface.FaxFreeBuffer(pFaxConfig);
//
            // Disconnect from the fax server
  //          g_ApiInterface.FaxClose(hFaxSvcHandle);
    //        return;
      //  }

        // Get the page data
        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

//        fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
  //      if (!g_ApiInterface.FaxGetPageData(hFaxSvcHandle, dwFaxId, &pPageDataBuffer, &dwPageDataBufferSize, &dwImageWidth, &dwImageHeight)) {
    //       fnWriteLogFile(TEXT("FaxGetPageData() failed.  The error code is 0x%08x.  This is an error.  FaxGetPageData() should succeed.\r\n"), GetLastError());
     //   }
       // else {
         //   g_ApiInterface.FaxFreeBuffer(pPageDataBuffer);
           // (*pnNumCasesPassed)++;
			//dwFuncCasesPass++;
        //}

        //pFaxConfig->PauseServerQueue = FALSE;
        //g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        //g_ApiInterface.FaxFreeBuffer(pFaxConfig);
//
        // Disconnect from the fax server
  //      g_ApiInterface.FaxClose(hFaxSvcHandle);
//    }
	fnWriteLogFile(TEXT("<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
	fnWriteLogFile(TEXT("</function>"));
	
}


//BOOL WINAPI
//FaxAPIDllWhisSetPhoneNumber(
//							LPCWSTR  szWhisPhoneNumberW,
//							LPCSTR   szWhisPhoneNumberA
//							)
//{

    
//#ifdef UNICODE
    //g_szWhisPhoneNumber = szWhisPhoneNumberW;
//#else
  //  g_szWhisPhoneNumber = szWhisPhoneNumberA;
//#endif
	
	
//	fnWriteLogFile(TEXT("WHIS> Whis Phone Number Recieved: %s\r\n"),g_szWhisPhoneNumber);
	//return TRUE;
//}
							



BOOL WINAPI
FaxAPIDllTest(
	LPCWSTR  szWhisPhoneNumberW,
	LPCSTR   szWhisPhoneNumberA,
	LPCWSTR  szServerNameW,
    LPCSTR   szServerNameA,
    UINT     nNumCasesLocal,
    UINT     nNumCasesServer,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	DWORD	 dwTestMode
)
{
    LPCTSTR  szServerName;
	UINT     nNumCases;

	// for Whis-extended only
#ifdef UNICODE
    if (lstrlen(szWhisPhoneNumberW)>0) { 
		g_szWhisPhoneNumber = szWhisPhoneNumberW; 
	}
	else {
		g_szWhisPhoneNumber=TEXT(WHIS_DEFAULT_PHONE_NUMBER);
	}
#else
	if (lstrlen(szWhisPhoneNumberA)>0) {
		g_szWhisPhoneNumber = szWhisPhoneNumberA;
	}
	else {
		g_szWhisPhoneNumber=TEXT(WHIS_DEFAULT_PHONE_NUMBER);
	}
#endif

	_tcscpy(g_szWhisPhoneNumberVar1,g_szWhisPhoneNumber);
	_tcscat(g_szWhisPhoneNumberVar1,TEXT("1"));

	_tcscpy(g_szWhisPhoneNumberVar2,g_szWhisPhoneNumber);
	_tcscat(g_szWhisPhoneNumberVar2,TEXT("2"));

	_tcscpy(g_szWhisPhoneNumberVar3,g_szWhisPhoneNumber);
	_tcscat(g_szWhisPhoneNumberVar3,TEXT("3"));



#ifdef UNICODE
    szServerName = szServerNameW;
#else
    szServerName = szServerNameA;
#endif

    if (szServerName) {
        nNumCases = nNumCasesServer;
		fnWriteLogFile(TEXT("WHIS> REMOTE SERVER MODE:\r\n"));
    }
    else {
        nNumCases = nNumCasesLocal;
    }

    // FaxEnumJobs()
    fnFaxEnumJobs(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    // FaxGetJob()
    fnFaxGetJob(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

  
	if (dwTestMode==WHIS_TEST_MODE_LIMITS)	{
		// FaxSetJob() limits
		fnFaxSetJob(szServerName, pnNumCasesAttempted, pnNumCasesPassed,TRUE);
	}
	else	{
		// FaxSetJob()
		fnFaxSetJob(szServerName, pnNumCasesAttempted, pnNumCasesPassed,FALSE);
	}


    // FaxAbort()
    fnFaxAbort(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    // FaxGetPageData()
    fnFaxGetPageData(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    if ((*pnNumCasesAttempted == nNumCases) && (*pnNumCasesPassed == *pnNumCasesAttempted)) {
        return TRUE;
    }
    else {
        return FALSE;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legacywin32\xml\faxapi\faxapi.h ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

  faxapi.h

Abstract:

  This module contains the global definitions

Author:

  Steven Kehrli (steveke) 8/28/1998

--*/

/*++

  Whistler Version:

  Lior Shmueli (liors) 23/11/2000

 ++*/

#ifndef _FAXAPI_H
#define _FAXAPI_H

typedef struct _DLL_INTERFACE {
    HINSTANCE       hInstance;
    PFAXAPIDLLINIT  pFaxAPIDllInit;
    PFAXAPIDLLTEST  pFaxAPIDllTest;
} DLL_INTERFACE, *PDLL_INTERFACE;

// g_hHeap is a global handle to the process heap
HANDLE         g_hHeap = NULL;
// g_hLogFile is the handle to the log file
HANDLE         g_hLogFile = INVALID_HANDLE_VALUE;
// g_bVerbose indicates the verbose switch was found
BOOL           g_bVerbose = FALSE;
// g_ApiInterface is the API interface structure
API_INTERFACE  g_ApiInterface;

#define HELP_SWITCH_1   L"/?"
#define HELP_SWITCH_2   L"/H"
#define HELP_SWITCH_3   L"-?"
#define HELP_SWITCH_4   L"-H"
#define INIFILE_SWITCH  L"/I:"
#define LOGFILE_SWITCH  L"/L:"
#define SERVER_SWITCH   L"/S:"
#define VERBOSE_SWITCH  L"/V"

#define FAXAPI_INIFILE  L"faxapi.ini"
#define FAXAPI_LOGFILE  L"faxapi.xml"

#define WINFAX_DLL      L"\\winfax.dll"

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legacywin32\xml\routeapi\routeapi.h ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

  routeapi.h

Abstract:

  This module contains the global definitions

Author:

  Steven Kehrli (steveke) 8/28/1998

--*/

#ifndef _ROUTEAPI_H
#define _ROUTEAPI_H

#define ROUTEAPI_EXTENSION_W               L"RouteApi Routing Extension"
#define ROUTEAPI_EXTENSION                 TEXT("RouteApi Routing Extension")
#define ROUTEAPI_EXTENSION_FRIENDLYNAME_W  L"RouteApi Routing Extension Friendly Name"
#define ROUTEAPI_EXTENSION_FRIENDLYNAME    TEXT("RouteApi Routing Extension Friendly Name")
#define ROUTEAPI_EXTENSION_IMAGENAME_W     L"%SystemRoot%\\system32\\apiext.dll"
#define ROUTEAPI_EXTENSION_IMAGENAME       TEXT("%SystemRoot%\\system32\\apiext.dll")
#define ROUTEAPI_EXTENSION_DLLNAME_W       L"apiext.dll"
#define ROUTEAPI_EXTENSION_DLLNAME         TEXT("apiext.dll")

#define ROUTEAPI_METHOD1_W                 L"RouteApi Routing Method #1"
#define ROUTEAPI_METHOD1                   TEXT("RouteApi Routing Method #1")
#define ROUTEAPI_METHOD_FRIENDLYNAME1_W    L"RouteApi Routing Method Friendly Name #1"
#define ROUTEAPI_METHOD_FRIENDLYNAME1      TEXT("RouteApi Routing Method Friendly Name #1")
#define ROUTEAPI_METHOD_FUNCTIONNAME1_W    L"RouteApi1"
#define ROUTEAPI_METHOD_FUNCTIONNAME1      TEXT("RouteApi1")
#define ROUTEAPI_METHOD_GUID1_W            L"{4800F101-B6B7-11D0-8CDB-00C04FB6BCE9}"
#define ROUTEAPI_METHOD_GUID1              TEXT("{4800F101-B6B7-11D0-8CDB-00C04FB6BCE9}")

#define ROUTEAPI_METHOD2_W                 L"RouteApi Routing Method #2"
#define ROUTEAPI_METHOD2                   TEXT("RouteApi Routing Method #2")
#define ROUTEAPI_METHOD_FRIENDLYNAME2_W    L"RouteApi Routing Method Friendly Name #2"
#define ROUTEAPI_METHOD_FRIENDLYNAME2      TEXT("RouteApi Routing Method Friendly Name #2")
#define ROUTEAPI_METHOD_FUNCTIONNAME2_W    L"RouteApi2"
#define ROUTEAPI_METHOD_FUNCTIONNAME2      TEXT("RouteApi2")
#define ROUTEAPI_METHOD_GUID2_W            L"{4800F102-B6B7-11D0-8CDB-00C04FB6BCE9}"
#define ROUTEAPI_METHOD_GUID2              TEXT("{4800F102-B6B7-11D0-8CDB-00C04FB6BCE9}")

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legacywin32\xml\confgapi\confgapi.c ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

  confgapi.c

Abstract:

  ConfgApi: Fax API Test Dll: Client Configuration APIs
    1) FaxGetConfiguration()
    2) FaxSetConfiguration()
    3) FaxGetLoggingCategories()
    4) FaxSetLoggingCategories()

Author:

  Steven Kehrli (steveke) 8/28/1998

--*/

/*++

  Whistler Version:

  Lior Shmueli (liors) 23/11/2000

 ++*/


#include <wtypes.h>

#include "dllapi.h"

// g_hHeap is the handle to the heap
HANDLE           g_hHeap = NULL;
// g_ApiInterface is the API_INTERFACE structure
API_INTERFACE    g_ApiInterface;
// fnWriteLogFile is the pointer to the function to write a string to the log file
PFNWRITELOGFILE  fnWriteLogFile = NULL;

#define FAX_REGKEY                     TEXT("Software\\Microsoft\\Fax")
#define RETRIES_REGVALUE               TEXT("Retries")
#define RETRYDELAY_REGVALUE            TEXT("Retry Delay")
#define DIRTYDAYS_REGVALUE             TEXT("Dirty Days")
#define BRANDING_REGVALUE              TEXT("Branding")
#define USEDEVICETSID_REGVALUE         TEXT("UseDeviceTsid")
#define SERVERCP_REGVALUE              TEXT("ServerCoverPageOnly")
#define PAUSESERVERQUEUE_REGVALUE      TEXT("QueuePaused")
#define STARTCHEAPTIME_REGVALUE        TEXT("StartCheapTime")
#define STOPCHEAPTIME_REGVALUE         TEXT("StopCheapTime")
#define ARCHIVEOUTGOINGFAXES_REGVALUE  TEXT("ArchiveOutgoingFax")
#define ARCHIVEDIRECTORY_REGVALUE      TEXT("ArchiveDirectory")
#define INBOUNDPROFILE_REGVALUE        TEXT("Inbound Profile")

#define FAX_LOGGING_REGKEY             TEXT("Software\\Microsoft\\Fax\\Logging")
#define NAME_REGVALUE                  TEXT("Name")
#define CATEGORY_REGVALUE              TEXT("Number")
#define LEVEL_REGVALUE                 TEXT("Level")

DWORD
DllEntry(
    HINSTANCE  hInstance,
    DWORD      dwReason,
    LPVOID     pContext
)
/*++

Routine Description:

  DLL entry point

Arguments:

  hInstance - handle to the module
  dwReason - indicates the reason for being called
  pContext - context

Return Value:

  TRUE on success

--*/
{
    return TRUE;
}

VOID WINAPI
FaxAPIDllInit(
    HANDLE            hHeap,
    API_INTERFACE     ApiInterface,
    PFNWRITELOGFILEW  pfnWriteLogFileW,
    PFNWRITELOGFILEA  pfnWriteLogFileA
)
{
    // Set g_hHeap
    g_hHeap = hHeap;
    // Set g_ApiInterface
    g_ApiInterface = ApiInterface;
#ifdef UNICODE
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileW;
#else
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileA;
#endif

    return;
}

BOOL
fnRegQueryDword(
    HKEY     hKey,
    LPTSTR   szValue,
    LPDWORD  pdwData
)
/*++

Routine Description:

  Queries a Registry data as a REG_DWORD

Arguments:

  hKey - handle to the Registry key
  szValue - value to be queried
  pdwData - pointer to the data to be queried

Return Value:

  TRUE on success

--*/
{
    DWORD  cb;

    cb = sizeof(DWORD);
    if (RegQueryValueEx(hKey, szValue, NULL, NULL, (PBYTE) pdwData, &cb)) {
        *pdwData = 0;
        return FALSE;
    }

    return TRUE;
}

BOOL
fnRegQuerySz(
    HKEY    hKey,
    LPTSTR  szValue,
    LPTSTR  *pszData
)
/*++

Routine Description:

  Queries a Registry data as a REG_SZ

Arguments:

  hKey - handle to the Registry key
  szValue - value to be queried
  pszData - pointer to the data to be queried

Return Value:

  TRUE on success

--*/
{
    DWORD  cb;

    cb = 0;
    // Determine the memory required by pszData
    if (RegQueryValueEx(hKey, szValue, NULL, NULL, NULL, &cb)) {
        return FALSE;
    }

    if (!cb) {
        *pszData = NULL;
        return TRUE;
    }

    // Allocate the memory for pszData
    *pszData = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, cb);

    if (RegQueryValueEx(hKey, szValue, NULL, NULL, (PBYTE) *pszData, &cb)) {
        HeapFree(g_hHeap, 0, *pszData);
        *pszData = NULL;
        return FALSE;
    }

    return TRUE;
}

BOOL
fnVerifyConfiguration(
    PFAX_CONFIGURATION  pFaxConfig
)
/*++

Routine Description:

  Verifies the fax configuration vs. the registry

Arguments:

  pFaxConfig - pointer to the fax configuration

Return Value:

  None

--*/
{
    // hFaxKey is the handle to the fax registry key
    HKEY    hFaxKey;
    // szValue is the registry value (REG_SZ)
    LPTSTR  szValue;
    // dwValue is the registry value (REG_DWORD)
    DWORD   dwValue;

    if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, FAX_REGKEY, 0, KEY_ALL_ACCESS, &hFaxKey)) {
        fnWriteLogFile(TEXT("<result value=\"0\">Could not open the Registry Key %s, ec = 0x%08x.</result>\r\n"), FAX_REGKEY, GetLastError());
        goto RegFailed0;
    }

    if (pFaxConfig->SizeOfStruct != sizeof(FAX_CONFIGURATION)) {
        fnWriteLogFile(TEXT("<result value=\"0\">SizeOfStruct: Received: %d, Expected: %d.</result>\r\n"), pFaxConfig->SizeOfStruct, sizeof(FAX_CONFIGURATION));
        goto RegFailed1;
    }

    if (!fnRegQueryDword(hFaxKey, RETRIES_REGVALUE, &dwValue)) {
        fnWriteLogFile(TEXT("<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), RETRIES_REGVALUE, GetLastError());
        goto RegFailed1;
    }
    if (pFaxConfig->Retries != dwValue) {
        fnWriteLogFile(TEXT("<result value=\"0\">Retries: Received: %d, Expected: %d.</result>\r\n"), dwValue, pFaxConfig->Retries);
        goto RegFailed1;
    }

    if (!fnRegQueryDword(hFaxKey, RETRYDELAY_REGVALUE, &dwValue)) {
        fnWriteLogFile(TEXT("<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), RETRYDELAY_REGVALUE, GetLastError());
        goto RegFailed1;
    }
    if (pFaxConfig->RetryDelay != dwValue) {
        fnWriteLogFile(TEXT("<result value=\"0\">RetryDelay: Received: %d, Expected: %d.</result>\r\n"), dwValue, pFaxConfig->RetryDelay);
        goto RegFailed1;
    }

    if (!fnRegQueryDword(hFaxKey, DIRTYDAYS_REGVALUE, &dwValue)) {
        fnWriteLogFile(TEXT("<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), DIRTYDAYS_REGVALUE, GetLastError());
        goto RegFailed1;
    }
    if (pFaxConfig->DirtyDays != dwValue) {
        fnWriteLogFile(TEXT("<result value=\"0\">DirtyDays: Received: %d, Expected: %d.</result>\r\n"), dwValue, pFaxConfig->DirtyDays);
        goto RegFailed1;
    }

    if (!fnRegQueryDword(hFaxKey, BRANDING_REGVALUE, &dwValue)) {
        fnWriteLogFile(TEXT("<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), BRANDING_REGVALUE, GetLastError());
        goto RegFailed1;
    }
    if (pFaxConfig->Branding != (BOOL) dwValue) {
        fnWriteLogFile(TEXT("<result value=\"0\">Branding: Received: %d, Expected: %d.</result>\r\n"), dwValue, pFaxConfig->Branding);
        goto RegFailed1;
    }

    if (!fnRegQueryDword(hFaxKey, USEDEVICETSID_REGVALUE, &dwValue)) {
        fnWriteLogFile(TEXT("<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), USEDEVICETSID_REGVALUE, GetLastError());
        goto RegFailed1;
    }
    if (pFaxConfig->UseDeviceTsid != (BOOL) dwValue) {
        fnWriteLogFile(TEXT("<result value=\"0\">UseDeviceTsid: Received: %d, Expected: %d.</result>\r\n"), dwValue, pFaxConfig->UseDeviceTsid);
        goto RegFailed1;
    }

    if (!fnRegQueryDword(hFaxKey, SERVERCP_REGVALUE, &dwValue)) {
        fnWriteLogFile(TEXT("<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), SERVERCP_REGVALUE, GetLastError());
        goto RegFailed1;
    }
    if (pFaxConfig->ServerCp != (BOOL) dwValue) {
        fnWriteLogFile(TEXT("<result value=\"0\">ServerCp: Received: %d, Expected: %d.</result>\r\n"), dwValue, pFaxConfig->ServerCp);
        goto RegFailed1;
    }

    if (!fnRegQueryDword(hFaxKey, PAUSESERVERQUEUE_REGVALUE, &dwValue)) {
        fnWriteLogFile(TEXT("<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), PAUSESERVERQUEUE_REGVALUE, GetLastError());
        goto RegFailed1;
    }
    if (pFaxConfig->PauseServerQueue != (BOOL) dwValue) {
        fnWriteLogFile(TEXT("<result value=\"0\">PauseServerQueue: Received: %d, Expected: %d.</result>\r\n"), dwValue, pFaxConfig->PauseServerQueue);
        goto RegFailed1;
    }

    if (!fnRegQueryDword(hFaxKey, STARTCHEAPTIME_REGVALUE, &dwValue)) {
        fnWriteLogFile(TEXT("<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), STARTCHEAPTIME_REGVALUE, GetLastError());
        goto RegFailed1;
    }
    if (pFaxConfig->StartCheapTime.Hour != LOWORD(dwValue)) {
        fnWriteLogFile(TEXT("<result value=\"0\">StartCheapTime.Hour: Received: %d, Expected: %d.</result>\r\n"), LOWORD(dwValue), pFaxConfig->StartCheapTime.Hour);
        goto RegFailed1;
    }
    if (pFaxConfig->StartCheapTime.Minute != HIWORD(dwValue)) {
        fnWriteLogFile(TEXT("<result value=\"0\">StartCheapTime.Minute: Received: %d, Expected: %d.</result>\r\n"), HIWORD(dwValue), pFaxConfig->StartCheapTime.Minute);
        goto RegFailed1;
    }

    if (!fnRegQueryDword(hFaxKey, STOPCHEAPTIME_REGVALUE, &dwValue)) {
        fnWriteLogFile(TEXT("<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), STOPCHEAPTIME_REGVALUE, GetLastError());
        goto RegFailed1;
    }
    if (pFaxConfig->StopCheapTime.Hour != LOWORD(dwValue)) {
        fnWriteLogFile(TEXT("<result value=\"0\">StopCheapTime.Hour: Received: %d, Expected: %d.</result>\r\n"), LOWORD(dwValue), pFaxConfig->StopCheapTime.Hour);
        goto RegFailed1;
    }
    if (pFaxConfig->StopCheapTime.Minute != HIWORD(dwValue)) {
        fnWriteLogFile(TEXT("<result value=\"0\">StopCheapTime.Minute: Received: %d, Expected: %d.</result>\r\n"), HIWORD(dwValue), pFaxConfig->StopCheapTime.Minute);
        goto RegFailed1;
    }

    if (!fnRegQueryDword(hFaxKey, ARCHIVEOUTGOINGFAXES_REGVALUE, &dwValue)) {
        fnWriteLogFile(TEXT("<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), ARCHIVEOUTGOINGFAXES_REGVALUE, GetLastError());
        goto RegFailed1;
    }
    if (pFaxConfig->ArchiveOutgoingFaxes != (BOOL) dwValue) {
        fnWriteLogFile(TEXT("<result value=\"0\">ArchiveOutgoingFaxes: Received: %d, Expected: %d.</result>\r\n"), dwValue, pFaxConfig->ArchiveOutgoingFaxes);
        goto RegFailed1;
    }

    if (!fnRegQuerySz(hFaxKey, ARCHIVEDIRECTORY_REGVALUE, &szValue)) {
        fnWriteLogFile(TEXT("<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), ARCHIVEDIRECTORY_REGVALUE, GetLastError());
        goto RegFailed1;
    }
    if (lstrcmp(pFaxConfig->ArchiveDirectory, szValue)) {
        fnWriteLogFile(TEXT("<result value=\"0\">ArchiveDirectory: Received: %s, Expected: %s.</result>\r\n"), szValue, pFaxConfig->ArchiveDirectory);
        if (szValue) {
            HeapFree(g_hHeap, 0, szValue);
        }
        goto RegFailed1;
    }
    if (szValue) {
        HeapFree(g_hHeap, 0, szValue);
    }

    if (!fnRegQuerySz(hFaxKey, INBOUNDPROFILE_REGVALUE, &szValue)) {
        fnWriteLogFile(TEXT("<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), INBOUNDPROFILE_REGVALUE, GetLastError());
        goto RegFailed1;
    }
    
	
	#ifdef FAXAPI_W2K
		if (lstrcmp(pFaxConfig->InboundProfile, szValue)) {
        fnWriteLogFile(TEXT("<result value=\"0\">InboundProfile: Received: %s, Expected: %s.</result>\r\n"), szValue, pFaxConfig->InboundProfile);
        if (szValue) {
            HeapFree(g_hHeap, 0, szValue);
			}
        goto RegFailed1;
		}	
	#endif

    if (szValue) {
        HeapFree(g_hHeap, 0, szValue);
    }

    RegCloseKey(hFaxKey);

    return TRUE;

RegFailed1:
    RegCloseKey(hFaxKey);

RegFailed0:
    return FALSE;
}

VOID
fnFaxGetConfiguration(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxGetConfiguration()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE              hFaxSvcHandle;
    // pFaxConfig is the pointer to the fax configuration
    PFAX_CONFIGURATION  pFaxConfig;

    DWORD               dwIndex;

    // internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxGetConfiguration().\r\n"));
	fnWriteLogFile(TEXT("<function name=\"FaxGetConfiguration\">"));

	// Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> Test error: can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName,GetLastError());
		fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
        return;
    }
	else	{
		fnWriteLogFile(TEXT("WHIS> Connected to %s.\r\n"),szServerName);
	}


    for (dwIndex = 0; dwIndex < 2; dwIndex++) {
        
		// Get the configuration
        (*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

        fnWriteLogFile(TEXT("Valid Case (will do twice).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("<case name=\"Valid Case (will do twice)\" id=\"%d\">"), *pnNumCasesAttempted);
        if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
            fnWriteLogFile(TEXT("<result value=\"0\">FaxGetConfiguration() failed.  The error code is 0x%08x.  This is an error.  FaxGetConfiguration() should succeed.\r\n"), GetLastError());
			fnWriteLogFile(TEXT("</result>"));
        }
        else {
            if (pFaxConfig == NULL) {
                fnWriteLogFile(TEXT("<result value=\"0\">pFaxConfig is NULL.  This is an error.  pFaxConfig should not be NULL.\r\n"));
				fnWriteLogFile(TEXT("</result>"));
            }
            else {
                if (fnVerifyConfiguration(pFaxConfig)) {
                    (*pnNumCasesPassed)++;
					dwFuncCasesPass++;
					fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
                }
            }

            g_ApiInterface.FaxFreeBuffer(pFaxConfig);
        }
		fnWriteLogFile(TEXT("</case>"));
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxGetConfiguration(NULL, &pFaxConfig)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxGetConfiguration() returned TRUE.  This is an error.  FaxGetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);
		fnWriteLogFile(TEXT("</result>"));
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("</result>"));
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("</case>"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pFaxConfig = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    fnWriteLogFile(TEXT("<case name=\"pFaxConfig = NULL\" id=\"%d\">"), *pnNumCasesAttempted);
	if (g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, NULL)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxGetConfiguration() returned TRUE.  This is an error.  FaxGetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);
		fnWriteLogFile(TEXT("</result>"));
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		fnWriteLogFile(TEXT("</result>"));
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("</case>"));

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle (connection to fax was closed...) .  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Invalid hFaxSvcHandle (connection to fax was closed...)\" id=\"%d\">"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxGetConfiguration() returned TRUE.  This is an error.  FaxGetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("</result>"));
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("</result>"));
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("</case>"));

    //if (szServerName) {
	//	fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
      //  if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
        //    return;
        //}

        //(*pnNumCasesAttempted)++;
        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
          //  fnWriteLogFile(TEXT("FaxGetConfiguration() failed.  The error code is 0x%08x.  This is an error.  FaxGetConfiguration() should succeed.\r\n"), GetLastError());
        //}
        //else {
          //  g_ApiInterface.FaxFreeBuffer(pFaxConfig);
            //(*pnNumCasesPassed)++;
        //}

        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("</function>"));
}

VOID
fnFaxSetConfiguration(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	BOOL	 bTestLimits
)
/*++

Routine Description:

  FaxSetConfiguration()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE              hFaxSvcHandle;
    // pFaxConfig is the pointer to the fax configuration
    PFAX_CONFIGURATION  pFaxConfig;
    // pCopyFaxConfig is the pointer to the copy of the fax configuration
    PFAX_CONFIGURATION  pCopyFaxConfig;

    DWORD               cb;
    DWORD               dwOffset;
	DWORD				dwTempValue;
	int					iTempValue;
	WORD				wTempValue;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


    fnWriteLogFile(TEXT(  "\n--------------------------"));
	fnWriteLogFile(TEXT("### FaxSetConfiguration().\r\n"));
	fnWriteLogFile(TEXT("<function name=\"FaxSetConfiguration\">"));

	// Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> Test error: can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName,GetLastError());
		fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
        return;
    }
	else	{
		fnWriteLogFile(TEXT("WHIS> Connected to %s.\r\n"),szServerName);
	}

    if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> Test error: can not GET configuration from fax server %s, The error code is 0x%08x.\r\n"),szServerName,GetLastError());
		// Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
        return;
    }

    cb = sizeof(FAX_CONFIGURATION);

	#ifdef FAXAPI_W2K
		{
		if (pFaxConfig->InboundProfile) {
        cb += (lstrlen(pFaxConfig->InboundProfile) + 1) * sizeof(TCHAR);
		}
	#endif

    if (pFaxConfig->ArchiveDirectory) {
        cb += (lstrlen(pFaxConfig->ArchiveDirectory) + 1) * sizeof(TCHAR);
    }

    pCopyFaxConfig = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, cb);
    dwOffset = sizeof(FAX_CONFIGURATION);

	
			
	pCopyFaxConfig->SizeOfStruct = pFaxConfig->SizeOfStruct;
	pCopyFaxConfig->Retries = pFaxConfig->Retries + 1;
	pCopyFaxConfig->RetryDelay = pFaxConfig->RetryDelay + 1;
	pCopyFaxConfig->DirtyDays = pFaxConfig->DirtyDays + 1;
	pCopyFaxConfig->Branding = !pFaxConfig->Branding;
	pCopyFaxConfig->UseDeviceTsid = !pFaxConfig->UseDeviceTsid;
	pCopyFaxConfig->ServerCp = !pFaxConfig->ServerCp;
	pCopyFaxConfig->PauseServerQueue = !pFaxConfig->PauseServerQueue;
	pCopyFaxConfig->StartCheapTime.Hour = pFaxConfig->StopCheapTime.Hour;
	pCopyFaxConfig->StartCheapTime.Minute = pFaxConfig->StopCheapTime.Minute;
	pCopyFaxConfig->StopCheapTime.Hour = pFaxConfig->StartCheapTime.Hour;
	pCopyFaxConfig->StopCheapTime.Minute = pFaxConfig->StartCheapTime.Minute;
	pCopyFaxConfig->ArchiveOutgoingFaxes = pCopyFaxConfig->ArchiveOutgoingFaxes;

	
	#ifdef FAXAPI_W2K
		if (pFaxConfig->InboundProfile) {
			pCopyFaxConfig->InboundProfile = (LPTSTR) ((DWORD) pCopyFaxConfig + dwOffset);
			lstrcpy((LPTSTR) pCopyFaxConfig->InboundProfile, pFaxConfig->InboundProfile);
			dwOffset += (lstrlen(pCopyFaxConfig->InboundProfile) + 1) * sizeof(TCHAR);
		}
	#endif


	if (pFaxConfig->ArchiveDirectory) {
        pCopyFaxConfig->ArchiveDirectory = (LPTSTR) ((DWORD) pCopyFaxConfig + dwOffset);
        lstrcpy((LPTSTR) pCopyFaxConfig->ArchiveDirectory, pFaxConfig->ArchiveDirectory);
        dwOffset += (lstrlen(pCopyFaxConfig->ArchiveDirectory) + 1) * sizeof(TCHAR);
		}
	
  

    // Set the configuration
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

	fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);
	
    if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pCopyFaxConfig)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxSetConfiguration() failed.  The error code is 0x%08x.  This is an error.  FaxSetConfiguration() should succeed.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("</result>"));
    }
    else {
        if (fnVerifyConfiguration(pCopyFaxConfig)) {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
        }
    }
	fnWriteLogFile(TEXT("</case>"));

    HeapFree(g_hHeap, 0, pCopyFaxConfig);

    // Set the configuration
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxSetConfiguration() failed.  The error code is 0x%08x.  This is an error.  FaxSetConfiguration() should succeed.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("</result>"));
    }
    else {
        if (fnVerifyConfiguration(pFaxConfig)) {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
        }
    }
	fnWriteLogFile(TEXT("</case>"));

    pFaxConfig->SizeOfStruct = 0;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pFaxConfig->SizeOfStruct = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"pFaxConfig->SizeOfStruct = 0\" id=\"%d\">"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
		fnWriteLogFile(TEXT("</result>"));
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		fnWriteLogFile(TEXT("</result>"));
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("</case>"));

    pFaxConfig->SizeOfStruct = sizeof(FAX_CONFIGURATION);


	// add limit values cases
	if (bTestLimits)	{

		pFaxConfig->SizeOfStruct = MAX_DWORD;
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;
		fnWriteLogFile(TEXT("pFaxConfig->SizeOfStruct = MAX_DWORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("<case name=\"pFaxConfig->SizeOfStruct = MAX_DWORD\" id=\"%d\">"), *pnNumCasesAttempted);

		if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
	        fnWriteLogFile(TEXT("<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("</result>"));
	    }
	    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("</result>"));
		}
		else {
	        (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
	    }
		fnWriteLogFile(TEXT("</case>"));

	    pFaxConfig->SizeOfStruct = sizeof(FAX_CONFIGURATION);

	
		dwTempValue=pFaxConfig->Retries;
		pFaxConfig->Retries = MAX_DWORD;

		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxConfig->Retries = MAX_DWORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("<case name=\"pFaxConfig->Retries = MAX_DWORD\" id=\"%d\">"), *pnNumCasesAttempted);

	    if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
			fnWriteLogFile(TEXT("<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("</result>"));
		}
		else if (GetLastError() != ERROR_INVALID_PARAMETER) {
	        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("</result>"));
	    }
	    else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
		}
		fnWriteLogFile(TEXT("</case>"));

		pFaxConfig->Retries=dwTempValue;
	
		dwTempValue=pFaxConfig->RetryDelay;
		pFaxConfig->RetryDelay = MAX_DWORD;
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxConfig->RetryDelay = MAX_DWORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("<case name=\"pFaxConfig->RetryDelay = MAX_DWORD\" id=\"%d\">"), *pnNumCasesAttempted);

	    if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
			fnWriteLogFile(TEXT("<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("</result>"));
		}
		else if (GetLastError() != ERROR_INVALID_PARAMETER) {
	        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("</result>"));
	    }
	    else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
		}
		fnWriteLogFile(TEXT("</case>"));

		pFaxConfig->RetryDelay=dwTempValue;
	
		dwTempValue=pFaxConfig->DirtyDays;
		pFaxConfig->DirtyDays = MAX_DWORD;
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxConfig->DirtyDays = MAX_DWORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("<case name=\"pFaxConfig->DirtyDays = MAX_DWORD\" id=\"%d\">"), *pnNumCasesAttempted);

		if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
	        fnWriteLogFile(TEXT("<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("</result>"));
	    }
	    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("</result>"));
		}
		else {
	        (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
	    }
		fnWriteLogFile(TEXT("</case>"));

	    pFaxConfig->DirtyDays=dwTempValue;
	
	
		iTempValue=pFaxConfig->Branding;
		pFaxConfig->Branding = MIN_INT;
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxConfig->Branding = MIN_INT.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("<case name=\"pFaxConfig->Branding = MIN_INT\" id=\"%d\">"), *pnNumCasesAttempted);

	    if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
			fnWriteLogFile(TEXT("<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("</result>"));
		}
		else if (GetLastError() != ERROR_INVALID_PARAMETER) {
	        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("</result>"));
	    }
	    else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
		}
		fnWriteLogFile(TEXT("</case>"));

		pFaxConfig->Branding=dwTempValue;
	
		iTempValue=pFaxConfig->UseDeviceTsid;
		pFaxConfig->UseDeviceTsid = MIN_INT;
		
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxConfig->UseDeviceTsid = MIN_INT.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("<case name=\"pFaxConfig->UseDeviceTsid = MIN_INT\" id=\"%d\">"), *pnNumCasesAttempted);

	    if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
			fnWriteLogFile(TEXT("<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("</result>"));
		}
		else if (GetLastError() != ERROR_INVALID_PARAMETER) {
	        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("</result>"));
	    }
	    else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
		}
		fnWriteLogFile(TEXT("</case>"));

		pFaxConfig->UseDeviceTsid=dwTempValue;
	
		iTempValue=pFaxConfig->ServerCp;
		pFaxConfig->ServerCp = MIN_INT;
		
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxConfig->ServerCp = MIN_INT.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("<case name=\"pFaxConfig->ServerCp = MIN_INT\" id=\"%d\">"), *pnNumCasesAttempted);

	    if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
			fnWriteLogFile(TEXT("<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("</result>"));
		}
		else if (GetLastError() != ERROR_INVALID_PARAMETER) {
	        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("</result>"));
	    }
	    else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
		}
		fnWriteLogFile(TEXT("</case>"));

		pFaxConfig->ServerCp=dwTempValue;
	
		iTempValue=pFaxConfig->PauseServerQueue;
		pFaxConfig->PauseServerQueue = MIN_INT;

		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxConfig->PauseServerQueue = MIN_INT.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("<case name=\"pFaxConfig->PauseServerQueue = MIN_INT\" id=\"%d\">"), *pnNumCasesAttempted);

	    if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
			fnWriteLogFile(TEXT("<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("</result>"));
		}
		else if (GetLastError() != ERROR_INVALID_PARAMETER) {
	        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("</result>"));
		}
		else {
	        (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
	    }
		fnWriteLogFile(TEXT("</case>"));

	    pFaxConfig->PauseServerQueue=dwTempValue;
	
		iTempValue=pFaxConfig->ArchiveOutgoingFaxes;
		pFaxConfig->ArchiveOutgoingFaxes = MIN_INT;

		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxConfig->ArchiveOutgoingFaxes = MIN_INT.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("<case name=\"pFaxConfig->ArchiveOutgoingFaxes = MIN_INT\" id=\"%d\">"), *pnNumCasesAttempted);

	    if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
		fnWriteLogFile(TEXT("</result>"));
		}
		else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("</result>"));
		}
		else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
		}
		fnWriteLogFile(TEXT("</case>"));

		pFaxConfig->ArchiveOutgoingFaxes=dwTempValue;

	
		
		wTempValue=pFaxConfig->StartCheapTime.Hour;
		pFaxConfig->StartCheapTime.Hour = MAX_WORD;

		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxConfig->StartCheapTime.Hour = MAX_WORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("<case name=\"pFaxConfig->StartCheapTime.Hour = MAX_WORD\" id=\"%d\">"), *pnNumCasesAttempted);

		if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
			fnWriteLogFile(TEXT("<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("</result>"));
		}
		else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("</result>"));
		}
		else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
		}
		fnWriteLogFile(TEXT("</case>"));

		pFaxConfig->StartCheapTime.Hour=wTempValue;

		
		
		
		
		wTempValue=pFaxConfig->StartCheapTime.Minute;
		pFaxConfig->StartCheapTime.Minute = MAX_WORD;

		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxConfig->StartCheapTime.Minute = MAX_WORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("<case name=\"pFaxConfig->StartCheapTime.Minute = MAX_WORD\" id=\"%d\">"), *pnNumCasesAttempted);

		if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
			fnWriteLogFile(TEXT("<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("</result>"));
		}
		else if (GetLastError() != ERROR_INVALID_PARAMETER) {
	        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("</result>"));
		}
	    else {
	        (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
		}
		fnWriteLogFile(TEXT("</case>"));

		pFaxConfig->StartCheapTime.Minute=wTempValue;

		
	
		wTempValue=pFaxConfig->StopCheapTime.Hour;
		pFaxConfig->StopCheapTime.Hour = MAX_WORD;

		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxConfig->StopCheapTime.Hour = MAX_WORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("<case name=\"pFaxConfig->StopCheapTime.Hour = MAX_WORD\" id=\"%d\">"), *pnNumCasesAttempted);

		if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
	        fnWriteLogFile(TEXT("<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("</result>"));
		}
		else if (GetLastError() != ERROR_INVALID_PARAMETER) {
	        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("</result>"));
		}
		else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
			}
		fnWriteLogFile(TEXT("</case>"));
		pFaxConfig->StopCheapTime.Hour=wTempValue;

		
		
		wTempValue=pFaxConfig->StopCheapTime.Minute;
		pFaxConfig->StopCheapTime.Minute = MAX_WORD;

		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxConfig->StopCheapTime.Minute = MAX_WORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("<case name=\"pFaxConfig->StopCheapTime.Minute = MAX_WORD\" id=\"%d\">"), *pnNumCasesAttempted);

		if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
	        fnWriteLogFile(TEXT("<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("</result>"));
		}
		else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("</result>"));
		}
		else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
		}
		fnWriteLogFile(TEXT("</case>"));

	    pFaxConfig->StopCheapTime.Minute=wTempValue;


	
	}


    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetConfiguration(NULL, pFaxConfig)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("</result>"));
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("</result>"));
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("</case>"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pFaxConfig = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"pFaxConfig = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, NULL)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
		fnWriteLogFile(TEXT("</result>"));
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		fnWriteLogFile(TEXT("</result>"));
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("</case>"));

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Invalid hFaxSvcHandle\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("</result>"));
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("</result>"));
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("</case>"));

    g_ApiInterface.FaxFreeBuffer(pFaxConfig);

  //  if (szServerName) {
        // Connect to the fax server
    //    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
      //      return;
       // }

        //if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
       // }

        //(*pnNumCasesAttempted)++;
        //if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
          //  fnWriteLogFile(TEXT("FaxSetConfiguration() failed.  The error code is 0x%08x.  This is an error.  FaxSetConfiguration() should succeed.\r\n"), GetLastError());
        //}
        //else {
          //  (*pnNumCasesPassed)++;

        //}

        //g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("</function>"));
}


BOOL
fnVerifyCategories(
    PFAX_LOG_CATEGORY  pFaxCategories,
    DWORD              dwNumMethods
)
/*++

Routine Description:

  Verifies the fax logging categories vs. the registry

Arguments:

  pFaxCategories - pointer to the fax logging categories
  dwNumMethods - number of fax logging categories

Return Value:

  None

--*/
{
    // hFaxLoggingKey is the handle to the fax logging registry key
    HKEY    hFaxLoggingKey;
    // szKeyName is the name of a logging registry subkey
    TCHAR   szKeyName[3];
    // hFaxCategoryKey is the handle to the category registry key
    HKEY    hFaxCategoryKey;
    // szValue is the registry value (REG_SZ)
    LPTSTR  szValue;
    // dwValue is the registry value (REG_DWORD)
    DWORD   dwValue;

    DWORD   dwIndex;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

    if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, FAX_LOGGING_REGKEY, 0, KEY_ALL_ACCESS, &hFaxLoggingKey)) {
        fnWriteLogFile(TEXT("<result value=\"0\">Could not open the Registry Key %s, ec = 0x%08x.</result>\r\n"), FAX_LOGGING_REGKEY, GetLastError());
        goto RegFailed0;
    }

    for (dwIndex = 0; dwIndex < dwNumMethods; dwIndex++) {
        wsprintf(szKeyName, TEXT("%d"), pFaxCategories[dwIndex].Category);

        if (RegOpenKeyEx(hFaxLoggingKey, szKeyName, 0, KEY_ALL_ACCESS, &hFaxCategoryKey)) {
            fnWriteLogFile(TEXT("<result value=\"0\">Could not open the Registry Key %s, ec = 0x%08x.</result>\r\n"), szKeyName, GetLastError());
            goto RegFailed1;
        }

        if (!fnRegQuerySz(hFaxCategoryKey, NAME_REGVALUE, &szValue)) {
            fnWriteLogFile(TEXT("<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), NAME_REGVALUE, GetLastError());
            goto RegFailed2;
        }
        if (lstrcmp(pFaxCategories[dwIndex].Name, szValue)) {
            fnWriteLogFile(TEXT("<result value=\"0\">Name: Received: %s, Expected: %s.</result>\r\n"), szValue, pFaxCategories[dwIndex].Name);
            if (szValue) {
                HeapFree(g_hHeap, 0, szValue);
            }
            goto RegFailed2;
        }
        if (szValue) {
            HeapFree(g_hHeap, 0, szValue);
        }

        if (!fnRegQueryDword(hFaxCategoryKey, CATEGORY_REGVALUE, &dwValue)) {
            fnWriteLogFile(TEXT("<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), CATEGORY_REGVALUE, GetLastError());
            goto RegFailed2;
        }
        if (pFaxCategories[dwIndex].Category != dwValue) {
            fnWriteLogFile(TEXT("<result value=\"0\">Category: Received: %d, Expected: %d.</result>\r\n"), dwValue, pFaxCategories[dwIndex].Category);
            goto RegFailed2;
        }

        if (!fnRegQueryDword(hFaxCategoryKey, LEVEL_REGVALUE, &dwValue)) {
            fnWriteLogFile(TEXT("<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), LEVEL_REGVALUE, GetLastError());
            goto RegFailed2;
        }
        if (pFaxCategories[dwIndex].Level != dwValue) {
            fnWriteLogFile(TEXT("<result value=\"0\">Level: Received: %d, Expected: %d.</result>\r\n"), dwValue, pFaxCategories[dwIndex].Level);
            goto RegFailed2;
        }

        RegCloseKey(hFaxCategoryKey);
    }

    RegCloseKey(hFaxLoggingKey);

    return TRUE;

RegFailed2:
    RegCloseKey(hFaxCategoryKey);

RegFailed1:
    RegCloseKey(hFaxLoggingKey);

RegFailed0:
    return FALSE;
}

VOID
fnFaxGetLoggingCategories(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxGetLoggingCategories()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE             hFaxSvcHandle;
    // pFaxCategories is the pointer to the fax logging categories
    PFAX_LOG_CATEGORY  pFaxCategories;
    // dwNumCategories is the number of fax logging categories
    DWORD              dwNumCategories;

    DWORD              dwIndex;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;
	
	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxGetLoggingCategories().\r\n"));
	fnWriteLogFile(TEXT("<function name=\"FaxGetLoggingCategories\">"));

	// Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> Test error: can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName,GetLastError());
		fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
        return;
    }
	else	{
		fnWriteLogFile(TEXT("WHIS> Connected to %s.\r\n"),szServerName);
	}


    for (dwIndex = 0; dwIndex < 2; dwIndex++) {
        // Get the logging categories
        (*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;
		
		
		
        fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

        if (!g_ApiInterface.FaxGetLoggingCategories(hFaxSvcHandle, &pFaxCategories, &dwNumCategories)) {
            fnWriteLogFile(TEXT("<result value=\"0\">FaxGetLoggingCategories() failed.  The error code is 0x%08x.  This is an error.  FaxGetLoggingCategories() should succeed.\r\n"), GetLastError());
			fnWriteLogFile(TEXT("</result>"));
        }
        else {
            if (pFaxCategories == NULL) {
                fnWriteLogFile(TEXT("<result value=\"0\">pFaxCategories is NULL.  This is an error.  pFaxCategories should not be NULL.\r\n"));
				fnWriteLogFile(TEXT("</result>"));
            }

            if (dwNumCategories != 4) {
                fnWriteLogFile(TEXT("<result value=\"0\">dwNumCategories is not 4.  This is an error.  dwNumCategories should be 4.\r\n"));
				fnWriteLogFile(TEXT("</result>"));
            }

            if ((pFaxCategories != NULL) && (dwNumCategories == 4)) {
                if (fnVerifyCategories(pFaxCategories, dwNumCategories)) {
                    (*pnNumCasesPassed)++;
					dwFuncCasesPass++;
					fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
                }
            }
		    g_ApiInterface.FaxFreeBuffer(pFaxCategories);
        }
		fnWriteLogFile(TEXT("</case>"));
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetLoggingCategories(NULL, &pFaxCategories, &dwNumCategories)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxGetLoggingCategories() returned TRUE.  This is an error.  FaxGetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("</result>"));

        g_ApiInterface.FaxFreeBuffer(pFaxCategories);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("</result>"));

    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("</case>"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pFaxCategories = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"pFaxCategories = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetLoggingCategories(hFaxSvcHandle, NULL, &dwNumCategories)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxGetLoggingCategories() returned TRUE.  This is an error.  FaxGetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
		fnWriteLogFile(TEXT("</result>"));

        g_ApiInterface.FaxFreeBuffer(pFaxCategories);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		fnWriteLogFile(TEXT("</result>"));

    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("</case>"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("dwNumCategories = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"dwNumCategories = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetLoggingCategories(hFaxSvcHandle, &pFaxCategories, NULL)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxGetLoggingCategories() returned TRUE.  This is an error.  FaxGetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
		fnWriteLogFile(TEXT("</result>"));

        g_ApiInterface.FaxFreeBuffer(pFaxCategories);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		fnWriteLogFile(TEXT("</result>"));
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("</case>"));

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Invalid hFaxSvcHandle\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetLoggingCategories(hFaxSvcHandle, &pFaxCategories, &dwNumCategories)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxGetLoggingCategories() returned TRUE.  This is an error.  FaxGetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("</result>"));

        g_ApiInterface.FaxFreeBuffer(pFaxCategories);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("</result>"));

    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("</case>"));

    //if (szServerName) {
	//	fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
      //  if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
        //    return;
        //}

        //(*pnNumCasesAttempted)++;
        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxGetLoggingCategories(hFaxSvcHandle, &pFaxCategories, &dwNumCategories)) {
          //  fnWriteLogFile(TEXT("FaxGetLoggingCategories() failed.  The error code is 0x%08x.  This is an error.  FaxGetLoggingCategories() should succeed.\r\n"), GetLastError());
        //}
        //else {
          //  g_ApiInterface.FaxFreeBuffer(pFaxCategories);
            //(*pnNumCasesPassed)++;
        //}

        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("</function>"));
}

VOID
fnFaxSetLoggingCategories(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	BOOL	 bTestLimits
)
/*++

Routine Description:

  FaxSetLoggingCategories()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE             hFaxSvcHandle;
    // pFaxCategories is the pointer to the fax logging categories
    PFAX_LOG_CATEGORY  pFaxCategories;
    // dwNumCategories is the number of fax logging categories
    DWORD              dwNumCategories;
    // pCopyFaxCategories is the pointer to the copy of the fax logging categories
    PFAX_LOG_CATEGORY  pCopyFaxCategories;

    DWORD              dwIndex;
    DWORD              cb;
    DWORD              dwOffset;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxSetLoggingCategories().\r\n"));
	fnWriteLogFile(TEXT("<function name=\"FaxSetLoggingCategories\">"));

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> Test error: can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName,GetLastError());
		fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
        return;
    }
	else	{
		fnWriteLogFile(TEXT("WHIS> Connected to %s.\r\n"),szServerName);
	}


    if (!g_ApiInterface.FaxGetLoggingCategories(hFaxSvcHandle, &pFaxCategories, &dwNumCategories)) {
		fnWriteLogFile(TEXT("WHIS> Test error: can not get Loggin catagories from %s, The error code is 0x%08x.\r\n"),szServerName,GetLastError());
		// Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
        return;
    }

    for (dwIndex = 0, cb = 0; dwIndex < dwNumCategories; dwIndex++) {
        cb += sizeof(FAX_LOG_CATEGORY);
        cb += (lstrlen(pFaxCategories[dwIndex].Name) + 1) * sizeof(TCHAR);
    }

    pCopyFaxCategories = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, cb);
    dwOffset = dwNumCategories * sizeof(FAX_LOG_CATEGORY);
	
	
	if (bTestLimits)	{
		fnWriteLogFile(TEXT("WHIS> SETTING LIMIT VALUES...\r\n"));
		for (dwIndex = 0; dwIndex < dwNumCategories; dwIndex++) {
        pCopyFaxCategories[dwIndex].Name = (LPTSTR) ((DWORD) pCopyFaxCategories + dwOffset);
        lstrcpy((LPTSTR) pCopyFaxCategories[dwIndex].Name, pFaxCategories[dwIndex].Name);
        dwOffset += (lstrlen(pCopyFaxCategories[dwIndex].Name) + 1) * sizeof(TCHAR);

        pCopyFaxCategories[dwIndex].Category = pFaxCategories[dwIndex].Category;
        pCopyFaxCategories[dwIndex].Level = MAX_DWORD;
		}
	}
	else	{
		for (dwIndex = 0; dwIndex < dwNumCategories; dwIndex++) {
        pCopyFaxCategories[dwIndex].Name = (LPTSTR) ((DWORD) pCopyFaxCategories + dwOffset);
        lstrcpy((LPTSTR) pCopyFaxCategories[dwIndex].Name, pFaxCategories[dwIndex].Name);
        dwOffset += (lstrlen(pCopyFaxCategories[dwIndex].Name) + 1) * sizeof(TCHAR);

        pCopyFaxCategories[dwIndex].Category = pFaxCategories[dwIndex].Category;
        pCopyFaxCategories[dwIndex].Level = (pFaxCategories[dwIndex].Level + 1) % (FAXLOG_LEVEL_MAX + 1);
		}
	}

    // Set the logging categories
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

	if (!bTestLimits)
	{
		fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);
	}
	else
	{
		fnWriteLogFile(TEXT("Valid Case, Limit Values.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("<case name=\"Valid Case Limit Values\" id=\"%d\">"), *pnNumCasesAttempted);
	}

    if (!g_ApiInterface.FaxSetLoggingCategories(hFaxSvcHandle, pCopyFaxCategories, dwNumCategories)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxSetLoggingCategories() failed.  The error code is 0x%08x.  This is an error.  FaxSetLoggingCategories() should succeed.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("</result>"));
    }
    else {
        if (fnVerifyCategories(pCopyFaxCategories, dwNumCategories)) {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
        }
	}
	fnWriteLogFile(TEXT("</case>"));

    HeapFree(g_hHeap, 0, pCopyFaxCategories);

    // Set the logging categories
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSetLoggingCategories(hFaxSvcHandle, pFaxCategories, dwNumCategories)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxSetLoggingCategories() failed.  The error code is 0x%08x.  This is an error.  FaxSetLoggingCategories() should succeed.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("</result>"));
    }
    else {
        if (fnVerifyCategories(pFaxCategories, dwNumCategories)) {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
        }
	}
	fnWriteLogFile(TEXT("</case>"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetLoggingCategories(NULL, pFaxCategories, dwNumCategories)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxSetLoggingCategories() returned TRUE.  This is an error.  FaxSetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("</result>"));
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("</result>"));
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("</case>"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    
	fnWriteLogFile(TEXT("pFaxCategories = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"pFaxCategories = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetLoggingCategories(hFaxSvcHandle, NULL, dwNumCategories)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxSetLoggingCategories() returned TRUE.  This is an error.  FaxSetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
		fnWriteLogFile(TEXT("</result>"));

    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		fnWriteLogFile(TEXT("</result>"));

    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("</case>"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("dwNumCategories = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"dwNumCategories = 0\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetLoggingCategories(hFaxSvcHandle, pFaxCategories, 0)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxSetLoggingCategories() returned TRUE.  This is an error.  FaxSetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
		fnWriteLogFile(TEXT("</result>"));

    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		fnWriteLogFile(TEXT("</result>"));
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("</case>"));

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Invalid hFaxSvcHandle\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetLoggingCategories(hFaxSvcHandle, pFaxCategories, dwNumCategories)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxSetLoggingCategories() returned TRUE.  This is an error.  FaxSetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("</result>"));
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("</result>"));
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("</case>"));

    g_ApiInterface.FaxFreeBuffer(pFaxCategories);

//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        //if (!g_ApiInterface.FaxGetLoggingCategories(hFaxSvcHandle, &pFaxCategories, &dwNumCategories)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

		//(*pnNumCasesAttempted)++;
		//fnWriteLogFile(TEXT("### FaxSetLoggingCategories().\r\n"));
        //if (!g_ApiInterface.FaxSetLoggingCategories(hFaxSvcHandle, pFaxCategories, dwNumCategories)) {
          //  fnWriteLogFile(TEXT("FaxSetLoggingCategories() failed.  The error code is 0x%08x.  This is an error.  FaxSetLoggingCategories() should succeed.\r\n"), GetLastError());
        //}
        //else {
            //(*pnNumCasesPassed)++;
        //}

//        g_ApiInterface.FaxFreeBuffer(pFaxCategories);

        // Disconnect from the fax server
  //      g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("</function>"));
}



BOOL WINAPI
FaxAPIDllTest(
	LPCWSTR  szWhisPhoneNumberW,
	LPCSTR   szWhisPhoneNumberA,
	LPCWSTR  szServerNameW,
    LPCSTR   szServerNameA,
    UINT     nNumCasesLocal,
    UINT     nNumCasesServer,
	PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	DWORD	 dwTestMode
)
{
    LPCTSTR  szServerName;
    UINT     nNumCases;

#ifdef UNICODE
    szServerName = szServerNameW;
#else
    szServerName = szServerNameA;
#endif


    if (szServerName) {
        nNumCases = nNumCasesServer;
		fnWriteLogFile(TEXT("WHIS> REMOTE SERVER MODE:\r\n"));
    }
    else {
        nNumCases = nNumCasesLocal;
    }

    // FaxGetConfiguration()
    fnFaxGetConfiguration(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

   

	// FaxSetConfiguration() limit testing
	if (dwTestMode == WHIS_TEST_MODE_LIMITS)
	{
		fnFaxSetConfiguration(szServerName, pnNumCasesAttempted, pnNumCasesPassed,TRUE);
	}
	else	{
		 // FaxSetConfiguration()
		fnFaxSetConfiguration(szServerName, pnNumCasesAttempted, pnNumCasesPassed,FALSE);
	}

	// FaxGetLoggingCategories()
    fnFaxGetLoggingCategories(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    // FaxSetLoggingCategories()
    fnFaxSetLoggingCategories(szServerName, pnNumCasesAttempted, pnNumCasesPassed,FALSE);

	// FaxSetLoggingCategories()
	if (dwTestMode == WHIS_TEST_MODE_LIMITS)
	{
		fnFaxSetLoggingCategories(szServerName, pnNumCasesAttempted, pnNumCasesPassed,TRUE);
	}

    if ((*pnNumCasesAttempted == nNumCases) && (*pnNumCasesPassed == *pnNumCasesAttempted)) {
        return TRUE;
    }
    else {
        return FALSE;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legacywin32_xml\dllapi.h ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

  dllapi.h

Abstract:

  This module contains the global definitions

Author:

  Steven Kehrli (steveke) 8/28/1998

--*/

/*++

  Whistler Version:

  Lior Shmueli (liors) 23/11/2000

 ++*/

#ifndef _DLLAPI_H
#define _DLLAPI_H

#include <winfax.h>

typedef struct _API_INTERFACE {
    HINSTANCE                      hInstance;
    PFAXABORT                      FaxAbort;
    PFAXACCESSCHECK                FaxAccessCheck;
    PFAXCLOSE                      FaxClose;
    PFAXCOMPLETEJOBPARAMSW         FaxCompleteJobParamsW;
    PFAXCOMPLETEJOBPARAMSA         FaxCompleteJobParamsA;
    PFAXCONNECTFAXSERVERW          FaxConnectFaxServerW;
    PFAXCONNECTFAXSERVERA          FaxConnectFaxServerA;
    PFAXENABLEROUTINGMETHODW       FaxEnableRoutingMethodW;
    PFAXENABLEROUTINGMETHODA       FaxEnableRoutingMethodA;
    PFAXENUMGLOBALROUTINGINFOW     FaxEnumGlobalRoutingInfoW;
    PFAXENUMGLOBALROUTINGINFOA     FaxEnumGlobalRoutingInfoA;
    PFAXENUMJOBSW                  FaxEnumJobsW;
    PFAXENUMJOBSA                  FaxEnumJobsA;
    PFAXENUMPORTSW                 FaxEnumPortsW;
    PFAXENUMPORTSA                 FaxEnumPortsA;
    PFAXENUMROUTINGMETHODSW        FaxEnumRoutingMethodsW;
    PFAXENUMROUTINGMETHODSA        FaxEnumRoutingMethodsA;
    PFAXFREEBUFFER                 FaxFreeBuffer;
    PFAXGETCONFIGURATIONW          FaxGetConfigurationW;
    PFAXGETCONFIGURATIONA          FaxGetConfigurationA;
    PFAXGETDEVICESTATUSW           FaxGetDeviceStatusW;
    PFAXGETDEVICESTATUSA           FaxGetDeviceStatusA;
    PFAXGETJOBW                    FaxGetJobW;
    PFAXGETJOBA                    FaxGetJobA;
    PFAXGETLOGGINGCATEGORIESW      FaxGetLoggingCategoriesW;
    PFAXGETLOGGINGCATEGORIESA      FaxGetLoggingCategoriesA;
    PFAXGETPAGEDATA                FaxGetPageData;
    PFAXGETPORTW                   FaxGetPortW;
    PFAXGETPORTA                   FaxGetPortA;
    PFAXGETROUTINGINFOW            FaxGetRoutingInfoW;
    PFAXGETROUTINGINFOA            FaxGetRoutingInfoA;
    PFAXINITIALIZEEVENTQUEUE       FaxInitializeEventQueue;
    PFAXOPENPORT                   FaxOpenPort;
    PFAXPRINTCOVERPAGEW            FaxPrintCoverPageW;
    PFAXPRINTCOVERPAGEA            FaxPrintCoverPageA;
    PFAXREGISTERROUTINGEXTENSIONW  FaxRegisterRoutingExtensionW;
    PFAXREGISTERSERVICEPROVIDERW   FaxRegisterServiceProviderW;
    PFAXSENDDOCUMENTW              FaxSendDocumentW;
    PFAXSENDDOCUMENTA              FaxSendDocumentA;
    PFAXSENDDOCUMENTFORBROADCASTW  FaxSendDocumentForBroadcastW;
    PFAXSENDDOCUMENTFORBROADCASTA  FaxSendDocumentForBroadcastA;
    PFAXSETCONFIGURATIONW          FaxSetConfigurationW;
    PFAXSETCONFIGURATIONA          FaxSetConfigurationA;
    PFAXSETGLOBALROUTINGINFOW      FaxSetGlobalRoutingInfoW;
    PFAXSETGLOBALROUTINGINFOA      FaxSetGlobalRoutingInfoA;
    PFAXSETJOBW                    FaxSetJobW;
    PFAXSETJOBA                    FaxSetJobA;
    PFAXSETLOGGINGCATEGORIESW      FaxSetLoggingCategoriesW;
    PFAXSETLOGGINGCATEGORIESA      FaxSetLoggingCategoriesA;
    PFAXSETPORTW                   FaxSetPortW;
    PFAXSETPORTA                   FaxSetPortA;
    PFAXSETROUTINGINFOW            FaxSetRoutingInfoW;
    PFAXSETROUTINGINFOA            FaxSetRoutingInfoA;
    PFAXSTARTPRINTJOBW             FaxStartPrintJobW;
    PFAXSTARTPRINTJOBA             FaxStartPrintJobA;
} API_INTERFACE, *PAPI_INTERFACE;

#define DLL_PATH          L"Dll_Path"
#define DLL_DESCRIPTION   L"Dll_Description"
#define DLL_LOCAL_CASES   L"Dll_Local_Cases"
#define DLL_SERVER_CASES  L"Dll_Server_Cases"

#define MAX_DWORD 4294967295
#define MAX_WORD 65535
#define MAX_INT 32767
#define MIN_INT -32768
#define LONG_STRING "alkjhfdskjhfdkjsahakldfshlkfdashlkfadjhalkfdshklfdshlkfdshlkjfd"


//define test mode
#define WHIS_TEST_MODE_SKIP 0
#define WHIS_TEST_MODE_DO 1
#define WHIS_TEST_MODE_LIMITS 2
#define WHIS_TEST_MODE_DO_W2K_FAILS 3
#define WHIS_TEST_MODE_REAL_SEND 4
#define WHIS_TEST_MODE_DONT_CATCH_EXCEPTIONS 5




// whistler further INI settings
#define DLL_WHIS_TEST_MODE L"Whis_Test_Mode"
#define GLOBAL_WHIS_PHONE_NUM_1 L"Whis_phone_num_1"
#define GLOBAL_WHIS_PHONE_NUM_2 L"Whis_phone_num_2"
#define GLOBAL_WHIS_REMOTE_SERVER_NAME L"Whis_remote_server_name"


		
// Whistler further definitons

#define WHIS_DEFAULT_PHONE_NUMBER  "2222"
#define WHIS_DEFAULT_SERVER_NAME  NULL
#define WHIS_FAX_PRINTER_NAME "Fax"

typedef VOID
(WINAPI *PFNWRITELOGFILEW)(
    LPWSTR  szFormatString,
    ...
);

typedef VOID
(WINAPI *PFNWRITELOGFILEA)(
    LPSTR  szFormatString,
    ...
);

#ifdef UNICODE

#define PFNWRITELOGFILE  PFNWRITELOGFILEW

#else

#define PFNWRITELOGFILE  PFNWRITELOGFILEA

#endif

typedef VOID
(WINAPI *PFAXAPIDLLINIT)(
    HANDLE            hHeap,
    API_INTERFACE     ApiInterface,
    PFNWRITELOGFILEW  pfnWriteLogFileW,
    PFNWRITELOGFILEA  pfnWriteLogFileA
);

typedef BOOL
(WINAPI *PFAXAPIDLLTEST)(
	LPCWSTR  szWhisPhoneNumberW,
    LPCSTR   szWhisPhoneNumberA,
    LPCWSTR  szServerNameW,
    LPCSTR   szServerNameA,
    UINT     nNumCasesLocal,
    UINT     nNumCasesServer,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	DWORD	 dwTestMode
);


#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legacywin32\xml\portsapi\portsapi.c ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

  confgapi.c

Abstract:

  PortsApi: Fax API Test Dll: Client Port Configuration APIs
    1) FaxEnumPorts()
    2) FaxOpenPort()
    3) FaxGetPort()
    4) FaxSetPort()
    5) FaxGetDeviceStatus()

Author:

  Steven Kehrli (steveke) 8/28/1998

--*/

/*++

  Whistler Version:

  Lior Shmueli (liors) 23/11/2000

 ++*/

#include <wtypes.h>

#include "dllapi.h"

// g_hHeap is the handle to the heap
HANDLE           g_hHeap = NULL;
// g_ApiInterface is the API_INTERFACE structure
API_INTERFACE    g_ApiInterface;
// fnWriteLogFile is the pointer to the function to write a string to the log file
PFNWRITELOGFILE  fnWriteLogFile = NULL;

#define FAXDEVICES_REGKEY    TEXT("Software\\Microsoft\\Fax\\Devices")
#define DEVICEID_REGVALUE    TEXT("Permanent Lineid")
#define FLAGS_REGVALUE       TEXT("Flags")
#define RINGS_REGVALUE       TEXT("Rings")
#define PRIORITY_REGVALUE    TEXT("Priority")
#define DEVICENAME_REGVALUE  TEXT("Device Name")
#define TSID_REGVALUE        TEXT("TSID")
#define CSID_REGVALUE        TEXT("CSID")

DWORD
DllEntry(
    HINSTANCE  hInstance,
    DWORD      dwReason,
    LPVOID     pContext
)
/*++

Routine Description:

  DLL entry point

Arguments:

  hInstance - handle to the module
  dwReason - indicates the reason for being called
  pContext - context

Return Value:

  TRUE on success

--*/
{
    return TRUE;
}

VOID WINAPI
FaxAPIDllInit(
    HANDLE            hHeap,
    API_INTERFACE     ApiInterface,
    PFNWRITELOGFILEW  pfnWriteLogFileW,
    PFNWRITELOGFILEA  pfnWriteLogFileA
)
{
    // Set g_hHeap
    g_hHeap = hHeap;
    // Set g_ApiInterface
    g_ApiInterface = ApiInterface;
#ifdef UNICODE
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileW;
#else
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileA;
#endif

    return;
}

BOOL
fnRegQueryDword(
    HKEY     hKey,
    LPTSTR   szValue,
    LPDWORD  pdwData
)
/*++

Routine Description:

  Queries a Registry data as a REG_DWORD

Arguments:

  hKey - handle to the Registry key
  szValue - value to be queried
  pdwData - pointer to the data to be queried

Return Value:

  TRUE on success

--*/
{
    DWORD  cb;

    cb = sizeof(DWORD);
    if (RegQueryValueEx(hKey, szValue, NULL, NULL, (PBYTE) pdwData, &cb)) {
        *pdwData = 0;
        return FALSE;
    }

    return TRUE;
}

BOOL
fnRegQuerySz(
    HKEY    hKey,
    LPTSTR  szValue,
    LPTSTR  *pszData
)
/*++

Routine Description:

  Queries a Registry data as a REG_SZ

Arguments:

  hKey - handle to the Registry key
  szValue - value to be queried
  pszData - pointer to the data to be queried

Return Value:

  TRUE on success

--*/
{
    DWORD  cb;

    cb = 0;
    // Determine the memory required by pszData
    if (RegQueryValueEx(hKey, szValue, NULL, NULL, NULL, &cb)) {
        return FALSE;
    }

    if (!cb) {
        *pszData = NULL;
        return TRUE;
    }

    // Allocate the memory for pszData
    *pszData = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, cb);

    if (RegQueryValueEx(hKey, szValue, NULL, NULL, (PBYTE) *pszData, &cb)) {
        HeapFree(g_hHeap, 0, *pszData);
        *pszData = NULL;
        return FALSE;
    }

    return TRUE;
}

BOOL
fnVerifyPorts(
    PFAX_PORT_INFO  pFaxPortInfo,
    DWORD           dwNumPorts
)
/*++

Routine Description:

  Verifies the fax port info vs. the registry

Arguments:

  pFaxPortInfo - pointer to the fax port info
  dwNumPorts - number of fax ports

Return Value:

  None

--*/
{
    // hFaxDevicesKey is the handle to the fax devices registry key
    HKEY    hFaxDevicesKey;
    // hFaxPortKey is the handle to the fax port registry key
    HKEY    hFaxPortKey;
    // szPortKey is the name of the fax port registry key
    TCHAR   szPortKey[9];
    // szValue is the registry value (REG_SZ)
    LPTSTR  szValue;
    // dwValue is the registry value (REG_DWORD)
    DWORD   dwValue;

    DWORD   dwIndex;

    if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, FAXDEVICES_REGKEY, 0, KEY_ALL_ACCESS, &hFaxDevicesKey)) {
        fnWriteLogFile(TEXT("Could not open the Registry Key %s, ec = 0x%08x.  This is an error.\r\n"), FAXDEVICES_REGKEY, GetLastError());
        goto RegFailed0;
    }

    for (dwIndex = 0; dwIndex < dwNumPorts; dwIndex++) {
        // Initialize the string representation of the DeviceId
        ZeroMemory(szPortKey, sizeof(szPortKey));
        // Set the string representation of the DeviceId
        wsprintf(szPortKey, TEXT("%08u"), pFaxPortInfo[dwIndex].DeviceId);

        if (RegOpenKeyEx(hFaxDevicesKey, szPortKey, 0, KEY_ALL_ACCESS, &hFaxPortKey)) {
            fnWriteLogFile(TEXT("Could not open the Registry Key %s, ec = 0x%08x.  This is an error.\r\n"), szPortKey, GetLastError());
            goto RegFailed1;
        }

        if (pFaxPortInfo[dwIndex].SizeOfStruct != sizeof(FAX_PORT_INFO)) {
            fnWriteLogFile(TEXT("SizeOfStruct: Received: %d, Expected: %d.  This is an error.\r\n"), pFaxPortInfo[dwIndex].SizeOfStruct, sizeof(FAX_PORT_INFO));
            goto RegFailed2;
        }

        if (!fnRegQueryDword(hFaxPortKey, DEVICEID_REGVALUE, &dwValue)) {
            fnWriteLogFile(TEXT("Could not query the Registry Value %s, ec = 0x%08x.  This is an error.\r\n"), DEVICEID_REGVALUE, GetLastError());
            goto RegFailed2;
        }
        if (pFaxPortInfo[dwIndex].DeviceId != dwValue) {
            fnWriteLogFile(TEXT("DeviceId: Received: 0x%08x, Expected: 0x%08x.  This is an error.\r\n"), dwValue, pFaxPortInfo[dwIndex].DeviceId);
            goto RegFailed2;
        }

        if (!fnRegQueryDword(hFaxPortKey, FLAGS_REGVALUE, &dwValue)) {
            fnWriteLogFile(TEXT("Could not query the Registry Value %s, ec = 0x%08x.  This is an error.\r\n"), FLAGS_REGVALUE, GetLastError());
            goto RegFailed2;
        }
        if (pFaxPortInfo[dwIndex].Flags != dwValue) {
            fnWriteLogFile(TEXT("Flags: Received: %d, Expected: %d.  This is an error.\r\n"), dwValue, pFaxPortInfo[dwIndex].Flags);
            goto RegFailed2;
        }

        if (!fnRegQueryDword(hFaxPortKey, RINGS_REGVALUE, &dwValue)) {
            fnWriteLogFile(TEXT("Could not query the Registry Value %s, ec = 0x%08x.  This is an error.\r\n"), RINGS_REGVALUE, GetLastError());
            goto RegFailed2;
        }
        if (pFaxPortInfo[dwIndex].Rings != dwValue) {
            fnWriteLogFile(TEXT("Rings: Received: %d, Expected: %d.  This is an error.\r\n"), dwValue, pFaxPortInfo[dwIndex].Rings);
            goto RegFailed2;
        }

        if (!fnRegQueryDword(hFaxPortKey, PRIORITY_REGVALUE, &dwValue)) {
            fnWriteLogFile(TEXT("Could not query the Registry Value %s, ec = 0x%08x.  This is an error.\r\n"), PRIORITY_REGVALUE, GetLastError());
            goto RegFailed2;
        }
        if (pFaxPortInfo[dwIndex].Priority != dwValue) {
            fnWriteLogFile(TEXT("Priority: Received: %d, Expected: %d.  This is an error.\r\n"), dwValue, pFaxPortInfo[dwIndex].Priority);
            goto RegFailed2;
        }

        if (!fnRegQuerySz(hFaxPortKey, DEVICENAME_REGVALUE, &szValue)) {
            fnWriteLogFile(TEXT("Could not query the Registry Value %s, ec = 0x%08x.  This is an error.\r\n"), DEVICENAME_REGVALUE, GetLastError());
            goto RegFailed2;
        }
        if (lstrcmp(pFaxPortInfo[dwIndex].DeviceName, szValue)) {
            fnWriteLogFile(TEXT("DeviceName: Received: %s, Expected: %s.  This is an error.\r\n"), szValue, pFaxPortInfo[dwIndex].DeviceName);
            if (szValue) {
                HeapFree(g_hHeap, 0, szValue);
            }
            goto RegFailed2;
        }
        if (szValue) {
            HeapFree(g_hHeap, 0, szValue);
        }

        if (!fnRegQuerySz(hFaxPortKey, TSID_REGVALUE, &szValue)) {
            fnWriteLogFile(TEXT("Could not query the Registry Value %s, ec = 0x%08x.  This is an error.\r\n"), TSID_REGVALUE, GetLastError());
            goto RegFailed2;
        }
        if (lstrcmp(pFaxPortInfo[dwIndex].Tsid, szValue)) {
            fnWriteLogFile(TEXT("Tsid: Received: %s, Expected: %s.  This is an error.\r\n"), szValue, pFaxPortInfo[dwIndex].Tsid);
            if (szValue) {
                HeapFree(g_hHeap, 0, szValue);
            }
            goto RegFailed2;
        }
        if (szValue) {
            HeapFree(g_hHeap, 0, szValue);
        }

        if (!fnRegQuerySz(hFaxPortKey, CSID_REGVALUE, &szValue)) {
            fnWriteLogFile(TEXT("Could not query the Registry Value %s, ec = 0x%08x.  This is an error.\r\n"), CSID_REGVALUE, GetLastError());
            goto RegFailed2;
        }
        if (lstrcmp(pFaxPortInfo[dwIndex].Csid, szValue)) {
            fnWriteLogFile(TEXT("Csid: Received: %s, Expected: %s.  This is an error.\r\n"), szValue, pFaxPortInfo[dwIndex].Csid);
            if (szValue) {
                HeapFree(g_hHeap, 0, szValue);
            }
            goto RegFailed2;
        }
        if (szValue) {
            HeapFree(g_hHeap, 0, szValue);
        }

        RegCloseKey(hFaxPortKey);
    }

    RegCloseKey(hFaxDevicesKey);

    return TRUE;

RegFailed2:
    RegCloseKey(hFaxPortKey);

RegFailed1:
    RegCloseKey(hFaxDevicesKey);

RegFailed0:
    return FALSE;
}

VOID
fnFaxEnumPorts(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxEnumPorts()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE          hFaxSvcHandle;
    // pFaxPortInfo is the pointer to the fax port info
    PFAX_PORT_INFO  pFaxPortInfo;
    // dwNumPorts is the number of fax ports
    DWORD           dwNumPorts;

    DWORD           dwIndex;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxEnumPorts().\r\n"));



 
    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    for (dwIndex = 0; dwIndex < 2; dwIndex++) {
        // Enumerate the fax ports
        (*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

        fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
            fnWriteLogFile(TEXT("FaxEnumPorts() failed.  The error code is 0x%08x.  This is an error.  FaxEnumPorts() should succeed.\r\n"), GetLastError());
        }
        else {
            if (pFaxPortInfo == NULL) {
                fnWriteLogFile(TEXT("pFaxPortInfo is NULL.  This is an error.  pFaxPortInfo should not be NULL.\r\n"));
            }

            if (dwNumPorts == 0) {
                fnWriteLogFile(TEXT("dwNumPorts is 0.  This is an error.  dwNumPorts should not be 0.\r\n"));
            }

            if ((pFaxPortInfo != NULL) && (dwNumPorts != 0)) {
                if (fnVerifyPorts(pFaxPortInfo, dwNumPorts)) {
                    (*pnNumCasesPassed)++;
					dwFuncCasesPass++;
                }
            }

            g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
        }
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxEnumPorts(NULL, &pFaxPortInfo, &dwNumPorts)) {
        fnWriteLogFile(TEXT("FaxEnumPorts() returned TRUE.  This is an error.  FaxEnumPorts() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxEnumPorts() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pFaxPortInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, NULL, &dwNumPorts)) {
        fnWriteLogFile(TEXT("FaxEnumPorts() returned TRUE.  This is an error.  FaxEnumPorts() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxEnumPorts() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("dwNumPorts = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, NULL)) {
        fnWriteLogFile(TEXT("FaxEnumPorts() returned TRUE.  This is an error.  FaxEnumPorts() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxEnumPorts() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
        fnWriteLogFile(TEXT("FaxEnumPorts() returned TRUE.  This is an error.  FaxEnumPorts() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxEnumPorts() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

 //   if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
          //  fnWriteLogFile(TEXT("FaxEnumPorts() failed.  The error code is 0x%08x.  This is an error.  FaxEnumPorts() should succeed.\r\n"), GetLastError());
        //}
        //else {
          //  g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
//            (*pnNumCasesPassed)++;
//			dwFuncCasesPass++;
  //      }

        // Disconnect from the fax server
    //    g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxEnumPorts, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
}

VOID
fnFaxOpenPort(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxOpenPort()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE          hFaxSvcHandle;
    // hFaxPortHandle is the handle to a fax port
    HANDLE          hFaxPortHandle;
    // hFaxPortHandle2 is the second handle to a fax port
    HANDLE          hFaxPortHandle2;
    // pFaxPortInfo is the pointer to the fax port info
    PFAX_PORT_INFO  pFaxPortInfo;
    // dwNumPorts is the number of fax ports
    DWORD           dwNumPorts;
    // dwDeviceId is the device id of the fax port
    DWORD           dwDeviceId;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxOpenPort().\r\n"));


    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    // Enumerate the fax ports
    if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not enumerate ports on server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    dwDeviceId = pFaxPortInfo[0].DeviceId;

    // Free the fax port info
    g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

    // Open the fax port
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (PORT_OPEN_QUERY).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
        fnWriteLogFile(TEXT("FaxOpenPort() failed.  The error code is 0x%08x.  This is an error.  FaxOpenPort() should succeed.\r\n"), GetLastError());
    }
    else {
        if (hFaxPortHandle == NULL) {
            fnWriteLogFile(TEXT("hFaxPortHandle is NULL.  This is an error.  hFaxPortHandle should not be NULL.\r\n"));
        }
        else {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;

            (*pnNumCasesAttempted)++;
			dwFuncCasesAtt++;

            fnWriteLogFile(TEXT("hFaxPortHandle already open (PORT_OPEN_QUERY).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
            if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle2)) {
                fnWriteLogFile(TEXT("FaxOpenPort() failed.  The error code is 0x%08x.  This is an error.  FaxOpenPort() should succeed.\r\n"), GetLastError());
            }
            else {
                g_ApiInterface.FaxClose(hFaxPortHandle2);
                (*pnNumCasesPassed)++;
				dwFuncCasesPass++;
            }

            (*pnNumCasesAttempted)++;
			dwFuncCasesAtt++;

            fnWriteLogFile(TEXT("hFaxPortHandle already open (PORT_OPEN_MODIFY).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
            if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_MODIFY, &hFaxPortHandle2)) {
                fnWriteLogFile(TEXT("FaxOpenPort() failed.  The error code is 0x%08x.  This is an error.  FaxOpenPort() should succeed.\r\n"), GetLastError());
            }
            else {
                g_ApiInterface.FaxClose(hFaxPortHandle2);
                (*pnNumCasesPassed)++;
				dwFuncCasesPass++;
            }

            g_ApiInterface.FaxClose(hFaxPortHandle);
        }
    }

    // Open the fax port
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (PORT_OPEN_MODIFY).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_MODIFY, &hFaxPortHandle)) {
        fnWriteLogFile(TEXT("FaxOpenPort() failed.  The error code is 0x%08x.  This is an error.  FaxOpenPort() should succeed.\r\n"), GetLastError());
    }
    else {
        if (hFaxPortHandle == NULL) {
            fnWriteLogFile(TEXT("hFaxPortHandle is NULL.  This is an error.  hFaxPortHandle should not be NULL.\r\n"));
        }
        else {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;

            (*pnNumCasesAttempted)++;
			dwFuncCasesAtt++;

            fnWriteLogFile(TEXT("hFaxPortHandle already open (PORT_OPEN_QUERY).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
            if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle2)) {
                fnWriteLogFile(TEXT("FaxOpenPort() failed.  The error code is 0x%08x.  This is an error.  FaxOpenPort() should succeed.\r\n"), GetLastError());
            }
            else {
                g_ApiInterface.FaxClose(hFaxPortHandle2);
                (*pnNumCasesPassed)++;
				dwFuncCasesPass++;
            }

            (*pnNumCasesAttempted)++;
			dwFuncCasesAtt++;

            fnWriteLogFile(TEXT("hFaxPortHandle already open (PORT_OPEN_MODIFY).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
            if (g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_MODIFY, &hFaxPortHandle2)) {
                fnWriteLogFile(TEXT("FaxOpenPort() returned TRUE.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
                g_ApiInterface.FaxClose(hFaxPortHandle2);
            }
            else if (GetLastError() != ERROR_INVALID_HANDLE) {
                fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
            }
            else {
                (*pnNumCasesPassed)++;
				dwFuncCasesPass++;
            }

            g_ApiInterface.FaxClose(hFaxPortHandle);    
        }
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxOpenPort(NULL, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
        fnWriteLogFile(TEXT("FaxOpenPort() returned TRUE.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxClose(hFaxPortHandle);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("dwDeviceId = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxOpenPort(hFaxSvcHandle, 0, PORT_OPEN_QUERY, &hFaxPortHandle)) {
        fnWriteLogFile(TEXT("FaxOpenPort() returned TRUE.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_BAD_UNIT (0x%08x).\r\n"), ERROR_BAD_UNIT);
        g_ApiInterface.FaxClose(hFaxPortHandle);
    }
    else if (GetLastError() != ERROR_BAD_UNIT) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_BAD_UNIT (0x%08x).\r\n"), GetLastError(), ERROR_BAD_UNIT);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Flags = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, 0, &hFaxPortHandle)) {
        fnWriteLogFile(TEXT("FaxOpenPort() returned TRUE.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxClose(hFaxPortHandle);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxPortHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, NULL)) {
        fnWriteLogFile(TEXT("FaxOpenPort() returned TRUE.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxClose(hFaxPortHandle);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
        fnWriteLogFile(TEXT("FaxOpenPort() returned TRUE.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxClose(hFaxPortHandle);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        //if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //dwDeviceId = pFaxPortInfo[0].DeviceId;

        // Free the fax port info
        //g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
          //  fnWriteLogFile(TEXT("FaxOpenPort() failed.  The error code is 0x%08x.  This is an error.  FaxOpenPort() should succeed.\r\n"), GetLastError());
        //}
        //else {
          //  g_ApiInterface.FaxClose(hFaxPortHandle);
//            (*pnNumCasesPassed)++;
//			dwFuncCasesPass++;
  //      }

        // Disconnect from the fax server
    //    g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxOpenPort, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
}

VOID
fnFaxGetPort(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxGetPort()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE          hFaxSvcHandle;
    // hFaxPortHandle is the handle to a fax port
    HANDLE          hFaxPortHandle;
    // pFaxPortInfo is the pointer to the fax port info
    PFAX_PORT_INFO  pFaxPortInfo;
    // dwNumPorts is the number of fax ports
    DWORD           dwNumPorts;
    // dwDeviceId is the device id of the fax port
    DWORD           dwDeviceId;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxGetPort().\r\n"));

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    // Enumerate the fax ports
    if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not enumerate ports on server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    dwDeviceId = pFaxPortInfo[0].DeviceId;

    // Free the fax port info
    g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

    // Open the fax port
    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not open fax port %d, The error code is 0x%08x.\r\n"),dwDeviceId, GetLastError());
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    // Get the fax port info
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (PORT_OPEN_QUERY).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxGetPort(hFaxPortHandle, &pFaxPortInfo)) {
        fnWriteLogFile(TEXT("FaxGetPort() failed.  The error code is 0x%08x.  This is an error.  FaxGetPort() should succeed.\r\n"), GetLastError());
    }
    else {
        if (pFaxPortInfo == NULL) {
            fnWriteLogFile(TEXT("pFaxPortInfo is NULL.  This is an error.  pFaxPortInfo should not be NULL.\r\n"));
        }
        else {
            if (fnVerifyPorts(pFaxPortInfo, 1)) {
                (*pnNumCasesPassed)++;
				dwFuncCasesPass++;
            }

            g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
        }
    }

    g_ApiInterface.FaxClose(hFaxPortHandle);

    // Open the fax port
    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_MODIFY, &hFaxPortHandle)) {
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    // Get the fax port info
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (PORT_OPEN_MODIFY).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxGetPort(hFaxPortHandle, &pFaxPortInfo)) {
        fnWriteLogFile(TEXT("FaxGetPort() failed.  The error code is 0x%08x.  This is an error.  FaxGetPort() should succeed.\r\n"), GetLastError());
    }
    else {
        if (pFaxPortInfo == NULL) {
            fnWriteLogFile(TEXT("pFaxPortInfo is NULL.  This is an error.  pFaxPortInfo should not be NULL.\r\n"));
        }
        else {
            if (fnVerifyPorts(pFaxPortInfo, 1)) {
                (*pnNumCasesPassed)++;
				dwFuncCasesPass++;
            }

            g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
        }
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxPortHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxGetPort(NULL, &pFaxPortInfo)) {
        fnWriteLogFile(TEXT("FaxGetPort() returned TRUE.  This is an error.  FaxGetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxGetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pFaxPortInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxGetPort(hFaxPortHandle, NULL)) {
        fnWriteLogFile(TEXT("FaxGetPort() returned TRUE.  This is an error.  FaxGetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxGetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxPortHandle = hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxGetPort(hFaxSvcHandle, &pFaxPortInfo)) {
        fnWriteLogFile(TEXT("FaxGetPort() returned TRUE.  This is an error.  FaxGetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxGetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Disconnect from the fax port
    g_ApiInterface.FaxClose(hFaxPortHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxPortHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxGetPort(hFaxPortHandle, &pFaxPortInfo)) {
        fnWriteLogFile(TEXT("FaxGetPort() returned TRUE.  This is an error.  FaxGetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxGetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        // Enumerate the fax ports
        //if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //dwDeviceId = pFaxPortInfo[0].DeviceId;

        // Free the fax port info
        //g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

        // Open the fax port
        //if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxGetPort(hFaxPortHandle, &pFaxPortInfo)) {
          //  fnWriteLogFile(TEXT("FaxGetPort() failed.  The error code is 0x%08x.  This is an error.  FaxGetPort() should succeed.\r\n"), GetLastError());
        //}
        //else {
            //g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
            //(*pnNumCasesPassed)++;
			//dwFuncCasesPass++;
        //}

        // Disconnect from the fax port
        //g_ApiInterface.FaxClose(hFaxPortHandle);
        // Disconnect from the fax server
    //    g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxGetPort, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
}


VOID
fnFaxSetPort(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	BOOL	 bTestLimits
)
/*++

Routine Description:

  FaxSetPort()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE          hFaxSvcHandle;
    // hFaxPortHandle is the handle to a fax port
    HANDLE          hFaxPortHandle;
    // pFaxPortInfo is the pointer to the fax port info
    PFAX_PORT_INFO  pFaxPortInfo;
    // pCopyFaxPortInfo is the pointer to the copy of the fax port info
    PFAX_PORT_INFO  pCopyFaxPortInfo;
    // dwNumPorts is the number of fax ports
    DWORD           dwNumPorts;
    // dwDeviceId is the device id of the fax port
    DWORD           dwDeviceId;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


    DWORD           cb;
    DWORD           dwOffset;
	DWORD			dwTempValue=0;


	fnWriteLogFile(TEXT("\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxSetPort().\r\n"));

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    // Enumerate the fax ports
    if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not enumerate ports on server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    dwDeviceId = pFaxPortInfo[0].DeviceId;

    // Free the fax port info
    g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

    // Open the fax port
    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not open fax port %d, The error code is 0x%08x.\r\n"),dwDeviceId, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    // Get the fax port info
    if (!g_ApiInterface.FaxGetPort(hFaxPortHandle, &pFaxPortInfo)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not get port info, The error code is 0x%08x.\r\n"),GetLastError());
        // Disconnect from the fax port
        g_ApiInterface.FaxClose(hFaxPortHandle);
        // Disconnect from the fax server
        return;
    }

    // Set the fax port info
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Flags = PORT_OPEN_QUERY.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
        fnWriteLogFile(TEXT("FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_ACCESS_DENIED (0x%08x).\r\n"), ERROR_ACCESS_DENIED);
    }
    else if (GetLastError() != ERROR_ACCESS_DENIED) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_ACCESS_DENIED (0x%08x).\r\n"), GetLastError(), ERROR_ACCESS_DENIED);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Disconnect from the fax port
    g_ApiInterface.FaxClose(hFaxPortHandle);

    // Open the fax port
    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_MODIFY, &hFaxPortHandle)) {
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    cb = sizeof(FAX_PORT_INFO);
    if (pFaxPortInfo->DeviceName) {
        cb += (lstrlen(pFaxPortInfo->DeviceName) + 1) * sizeof(TCHAR);
    }
    if (pFaxPortInfo->Tsid) {
        cb += (lstrlen(pFaxPortInfo->Tsid) + 1) * sizeof(TCHAR);
    }
    if (pFaxPortInfo->Csid) {
        cb += (lstrlen(pFaxPortInfo->Csid) + 1) * sizeof(TCHAR);
    }

    pCopyFaxPortInfo = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, cb);
    dwOffset = sizeof(FAX_PORT_INFO);

    pCopyFaxPortInfo->SizeOfStruct = pFaxPortInfo->SizeOfStruct;

	pCopyFaxPortInfo->DeviceId = pFaxPortInfo->DeviceId;
	pCopyFaxPortInfo->State = pFaxPortInfo->State;

	if ((pFaxPortInfo->Flags & FPF_RECEIVE) && (pFaxPortInfo->Flags & FPF_SEND)) {
		pCopyFaxPortInfo->Flags = 0;
	}
	else if (pFaxPortInfo->Flags & FPF_RECEIVE) {
	    pCopyFaxPortInfo->Flags = FPF_SEND;
	}
	else if (pFaxPortInfo->Flags & FPF_SEND) {
		pCopyFaxPortInfo->Flags = FPF_RECEIVE;
	}
	else {
	    pCopyFaxPortInfo->Flags = FPF_RECEIVE & FPF_SEND;
    }

	pCopyFaxPortInfo->Rings = pFaxPortInfo->Rings + 1;
	if (dwNumPorts > 1) {
		pCopyFaxPortInfo->Priority = pFaxPortInfo->Priority + 1;
	}
	else {
		pCopyFaxPortInfo->Priority = pFaxPortInfo->Priority;
	}


	if (pFaxPortInfo->DeviceName) {
        pCopyFaxPortInfo->DeviceName = (LPTSTR) ((DWORD) pCopyFaxPortInfo + dwOffset);
        lstrcpy((LPTSTR) pCopyFaxPortInfo->DeviceName, pFaxPortInfo->DeviceName);
        dwOffset += (lstrlen(pCopyFaxPortInfo->DeviceName) + 1) * sizeof(TCHAR);
    }

    if (pFaxPortInfo->Csid) {
        pCopyFaxPortInfo->Tsid = (LPTSTR) ((DWORD) pCopyFaxPortInfo + dwOffset);
        lstrcpy((LPTSTR) pCopyFaxPortInfo->Tsid, pFaxPortInfo->Csid);
        dwOffset += (lstrlen(pCopyFaxPortInfo->Tsid) + 1) * sizeof(TCHAR);
    }

    if (pFaxPortInfo->Tsid) {
        pCopyFaxPortInfo->Csid = (LPTSTR) ((DWORD) pCopyFaxPortInfo + dwOffset);
        lstrcpy((LPTSTR) pCopyFaxPortInfo->Csid, pFaxPortInfo->Tsid);
        dwOffset += (lstrlen(pCopyFaxPortInfo->Csid) + 1) * sizeof(TCHAR);
    }

 	// Set the fax port info
	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

	fnWriteLogFile(TEXT("Valid case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	if (!g_ApiInterface.FaxSetPort(hFaxPortHandle, pCopyFaxPortInfo)) {
        fnWriteLogFile(TEXT("FaxSetPort() failed.  The error code is 0x%08x.  This is an error.  FaxSetPort() should succeed.\r\n"), GetLastError());
    }
    else {
		if (fnVerifyPorts(pCopyFaxPortInfo, 1)) {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
		}
	}

    HeapFree(g_hHeap, 0, pCopyFaxPortInfo);

    // Set the fax port info
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
        fnWriteLogFile(TEXT("FaxSetPort() failed.  The error code is 0x%08x.  This is an error.  FaxSetPort() should succeed.\r\n"), GetLastError());
    }
    else {
        if (fnVerifyPorts(pFaxPortInfo, 1)) {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
        }
    }

    pFaxPortInfo->SizeOfStruct = 0;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pFaxPortInfo->SizeOfStruct = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
        fnWriteLogFile(TEXT("FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }
    pFaxPortInfo->SizeOfStruct = sizeof(FAX_PORT_INFO);

	if (bTestLimits)	{
		
		// size of struct = MAX_DWORD
		pFaxPortInfo->SizeOfStruct = MAX_DWORD;
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxPortInfo->SizeOfStruct = MAX_DWORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		if (g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
	        fnWriteLogFile(TEXT("FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
	    }
	    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		}
		else {
	        (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
	    }
	    pFaxPortInfo->SizeOfStruct = sizeof(FAX_PORT_INFO);
	
		
		// state = MAX_DWORD
		dwTempValue=pFaxPortInfo->DeviceId;
		pFaxPortInfo->DeviceId=MAX_DWORD;
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxPortInfo->DeviceId = MAX_DWORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		if (g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
	        fnWriteLogFile(TEXT("FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
	    }
	    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		}
		else {
	        (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
	    }
	    pFaxPortInfo->DeviceId=dwTempValue;
			
		// state = MAX_DWORD
		dwTempValue=pFaxPortInfo->State;
		pFaxPortInfo->State=MAX_DWORD;
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxPortInfo->State = MAX_DWORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		if (g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
	        fnWriteLogFile(TEXT("FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
	    }
	    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		}
		else {
	        (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
	    }
	    pFaxPortInfo->State=dwTempValue;

		// pCopyFaxPortInfo->Flags = MAX_DWORD
		dwTempValue=pFaxPortInfo->Flags;
		pFaxPortInfo->Flags=MAX_DWORD;
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pCopyFaxPortInfo->Flags = MAX_DWORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		if (g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
	        fnWriteLogFile(TEXT("FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
	    }
	    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		}
		else {
	        (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
	    }
	    pFaxPortInfo->Flags=dwTempValue;


		// rings=MAX_DWORD
		dwTempValue=pFaxPortInfo->Rings;
		pFaxPortInfo->Rings=MAX_DWORD;
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pCopyFaxPortInfo->Rings = MAX_DWORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		if (g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
	        fnWriteLogFile(TEXT("FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
	    }
	    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		}
		else {
	        (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
	    }
	    pFaxPortInfo->Rings=dwTempValue;

		// priority=MAX_DWORD
		dwTempValue=pFaxPortInfo->Priority;
		pFaxPortInfo->Priority=MAX_DWORD;
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pCopyFaxPortInfo->Priority = MAX_DWORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		if (g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
	        fnWriteLogFile(TEXT("FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
	    }
	    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		}
		else {
	        (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
	    }
	    pFaxPortInfo->Priority=dwTempValue;
	}
	
	    
	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

	fnWriteLogFile(TEXT("hFaxPortHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	if (g_ApiInterface.FaxSetPort(NULL, pFaxPortInfo)) {
		fnWriteLogFile(TEXT("FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
	}
	else if (GetLastError() != ERROR_INVALID_HANDLE) {
	    fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
	}
	else {
		(*pnNumCasesPassed)++;
		dwFuncCasesPass++;
	}
	
	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

	fnWriteLogFile(TEXT("pFaxPortInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	if (g_ApiInterface.FaxSetPort(hFaxPortHandle, NULL)) {
		fnWriteLogFile(TEXT("FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
	}
	else if (GetLastError() != ERROR_INVALID_PARAMETER) {
	    fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
	}
	else {
		(*pnNumCasesPassed)++;
		dwFuncCasesPass++;
	}
		
	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

	fnWriteLogFile(TEXT("hFaxPortHandle = hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	if (g_ApiInterface.FaxSetPort(hFaxSvcHandle, pFaxPortInfo)) {
	fnWriteLogFile(TEXT("FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
	}
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Disconnect from the fax port
    g_ApiInterface.FaxClose(hFaxPortHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxPortHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
        fnWriteLogFile(TEXT("FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

//    if (szServerName) {

//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(NULL, &hFaxSvcHandle)) {
    //        return;
      //  }

        // Enumerate the fax ports
//        if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
            // Disconnect from the fax server
  //          g_ApiInterface.FaxClose(hFaxSvcHandle);
    //        return;
        //}

        //dwDeviceId = pFaxPortInfo[0].DeviceId;

        // Free the fax port info
        //g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

        // Open the fax port
        //if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_MODIFY, &hFaxPortHandle)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
//            return;
  //      }

        // Get the fax port info
    //    if (!g_ApiInterface.FaxGetPort(hFaxPortHandle, &pFaxPortInfo)) {
            // Disconnect from the fax port
      //      g_ApiInterface.FaxClose(hFaxPortHandle);
            // Disconnect from the fax server
        //    g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
          //  fnWriteLogFile(TEXT("FaxSetPort() failed.  The error code is 0x%08x.  This is an error.  FaxSetPort() should succeed.\r\n"), GetLastError());
        //}
        //else {
          //  (*pnNumCasesPassed)++;
			//dwFuncCasesPass++;
        //}

        //g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

        // Disconnect from the fax port
        //g_ApiInterface.FaxClose(hFaxPortHandle);
        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxSetPort, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
}



VOID
fnFaxGetDeviceStatus(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxGetDeviceStatus()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE              hFaxSvcHandle;
    // hFaxPortHandle is the handle to a fax port
    HANDLE              hFaxPortHandle;
    // pFaxPortInfo is the pointer to the fax port info
    PFAX_PORT_INFO      pFaxPortInfo;
    // pCopyFaxPortInfo is the pointer to the copy of the fax port info
    PFAX_PORT_INFO      pCopyFaxPortInfo;
    // dwNumPorts is the number of fax ports
    DWORD               dwNumPorts;
    // dwDeviceId is the device id of the fax port
    DWORD               dwDeviceId;
    // szDeviceName is the device name of the fax port
    LPTSTR              szDeviceName;
    // pFaxDeviceStatus is the pointer to the fax device status
    PFAX_DEVICE_STATUS  pFaxDeviceStatus;

    DWORD               dwIndex;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxGetDeviceStatus().\r\n"));

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    // Enumerate the fax ports
    if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not enumerate ports on server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    dwDeviceId = pFaxPortInfo[0].DeviceId;
    szDeviceName = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(pFaxPortInfo[0].DeviceName) + 1) * sizeof(TCHAR));
    lstrcpy(szDeviceName, pFaxPortInfo[0].DeviceName);

    // Free the fax port info
    g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

    // Open the fax port
    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not open fax port %d, The error code is 0x%08x.\r\n"),dwDeviceId, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    for (dwIndex = 0; dwIndex < 2; dwIndex++) {
        // Get the device status
        (*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

        fnWriteLogFile(TEXT("Valid case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        if (!g_ApiInterface.FaxGetDeviceStatus(hFaxPortHandle, &pFaxDeviceStatus)) {
            fnWriteLogFile(TEXT("FaxGetDeviceStatus() failed.  The error code is 0x%08x.  This is an error.  FaxGetDeviceStatus() should succeed.\r\n"), GetLastError());
        }
        else {
            if (pFaxDeviceStatus == NULL) {
                fnWriteLogFile(TEXT("pFaxDeviceStatus is NULL.  This is an error.  pFaxDeviceStatus should not be NULL.\r\n"));
            }
            else {
                if (pFaxDeviceStatus->SizeOfStruct != sizeof(FAX_DEVICE_STATUS)) {
                    fnWriteLogFile(TEXT("SizeOfStruct: Received: %d, Expected: %d.  This is an error.\r\n"), pFaxDeviceStatus->SizeOfStruct, sizeof(FAX_DEVICE_STATUS));
                    goto FuncFailed;
                }

                if (pFaxDeviceStatus->DeviceId != dwDeviceId) {
                    fnWriteLogFile(TEXT("DeviceId: Received: 0x%08x, Expected: 0x%08x.  This is an error.\r\n"), pFaxDeviceStatus->DeviceId, dwDeviceId);
                    goto FuncFailed;
                }

                if (lstrcmp(pFaxDeviceStatus->DeviceName, szDeviceName)) {
                    fnWriteLogFile(TEXT("DeviceName: Received: %s, Expected: %s.  This is an error.\r\n"), pFaxDeviceStatus->DeviceName, szDeviceName);
                    goto FuncFailed;
                }

                (*pnNumCasesPassed)++;
				dwFuncCasesPass++;
            }

FuncFailed:
            g_ApiInterface.FaxFreeBuffer(pFaxDeviceStatus);
        }
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxPortHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxGetDeviceStatus(NULL, &pFaxDeviceStatus)) {
        fnWriteLogFile(TEXT("FaxGetDeviceStatus() returned TRUE.  This is an error.  FaxGetDeviceStatus() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxDeviceStatus);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxGetDeviceStatus() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pFaxDeviceStatus = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxGetDeviceStatus(hFaxPortHandle, NULL)) {
        fnWriteLogFile(TEXT("FaxGetDeviceStatus() returned TRUE.  This is an error.  FaxGetDeviceStatus() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pFaxDeviceStatus);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxGetDeviceStatus() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxPortHandle = hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxGetDeviceStatus(hFaxSvcHandle, &pFaxDeviceStatus)) {
        fnWriteLogFile(TEXT("FaxGetDeviceStatus() returned TRUE.  This is an error.  FaxGetDeviceStatus() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxDeviceStatus);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxGetDeviceStatus() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Disconnect from the fax port
    g_ApiInterface.FaxClose(hFaxPortHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxPortHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxGetDeviceStatus(hFaxPortHandle, &pFaxDeviceStatus)) {
        fnWriteLogFile(TEXT("FaxGetDeviceStatus() returned TRUE.  This is an error.  FaxGetDeviceStatus() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxDeviceStatus);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxGetDeviceStatus() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        // Enumerate the fax ports
        //if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //dwDeviceId = pFaxPortInfo[0].DeviceId;

        // Free the fax port info
        //g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

        // Open the fax port
        //if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
            // Disconnect from the fax server
//            g_ApiInterface.FaxClose(hFaxSvcHandle);
  //        //  return;
    //    }

        // Get the fax port info
      //  if (!g_ApiInterface.FaxGetPort(hFaxPortHandle, &pFaxPortInfo)) {
            // Disconnect from the fax port
        //    g_ApiInterface.FaxClose(hFaxPortHandle);
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        // Get the device status
        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;
        //fnWriteLogFile(TEXT("Valid case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxGetDeviceStatus(hFaxPortHandle, &pFaxDeviceStatus)) {
            //fnWriteLogFile(TEXT("FaxGetDeviceStatus() failed.  The error code is 0x%08x.  This is an error.  FaxGetDeviceStatus() should succeed.\r\n"), GetLastError());
        //}
        //else {
            //g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
            //(*pnNumCasesPassed)++;
			//dwFuncCasesPass++;
        //}

        // Disconnect from the fax port
        //g_ApiInterface.FaxClose(hFaxPortHandle);
        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxGetDeviceStatus, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
}

BOOL WINAPI
FaxAPIDllTest(
	LPCWSTR  szWhisPhoneNumberW,
	LPCSTR   szWhisPhoneNumberA,
	LPCWSTR  szServerNameW,
    LPCSTR   szServerNameA,
    UINT     nNumCasesLocal,
    UINT     nNumCasesServer,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	DWORD	 dwTestMode
)
{
    LPCTSTR  szServerName;
    UINT     nNumCases;

#ifdef UNICODE
    szServerName = szServerNameW;
#else
    szServerName = szServerNameA;
#endif

    if (szServerName) {
		fnWriteLogFile(TEXT("WHIS> REMOTE SERVER MODE:\r\n"));
        nNumCases = nNumCasesServer;
    }
    else {
        nNumCases = nNumCasesLocal;
    }

    // FaxEnumPorts()
    fnFaxEnumPorts(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    // FaxOpenPort()
    fnFaxOpenPort(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    // FaxGetPort()
    fnFaxGetPort(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

  	if (dwTestMode==WHIS_TEST_MODE_LIMITS)	{
		// FaxSetPort()
		fnFaxSetPort(szServerName, pnNumCasesAttempted, pnNumCasesPassed,TRUE);
	}
	else	{
		  // FaxSetPort()
	    fnFaxSetPort(szServerName, pnNumCasesAttempted, pnNumCasesPassed,FALSE);
	}


    // FaxGetDeviceStatus()
    fnFaxGetDeviceStatus(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    if ((*pnNumCasesAttempted == nNumCases) && (*pnNumCasesPassed == *pnNumCasesAttempted)) {
        return TRUE;
    }
    else {
        return FALSE;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legacywin32\xml\miscapi\miscapi.c ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

  miscapi.c

Abstract:

  MiscApi: Fax API Test Dll: Client Misc APIs
    1) FaxConnectFaxServer()
    2) FaxFreeBuffer()
    3) FaxClose()

Author:

  Steven Kehrli (steveke) 8/28/1998

--*/


/*++

  Whistler Version:

  Lior Shmueli (liors) 23/11/2000

 ++*/

#include <wtypes.h>

#include "dllapi.h"

// g_hHeap is the handle to the heap
HANDLE           g_hHeap = NULL;
// g_ApiInterface is the API_INTERFACE structure
API_INTERFACE    g_ApiInterface;
// fnWriteLogFile is the pointer to the function to write a string to the log file
PFNWRITELOGFILE  fnWriteLogFile = NULL;



DWORD
DllEntry(
    HINSTANCE  hInstance,
    DWORD      dwReason,
    LPVOID     pContext
)
/*++

Routine Description:

  DLL entry point

Arguments:

  hInstance - handle to the module
  dwReason - indicates the reason for being called
  pContext - context

Return Value:

  TRUE on success

--*/
{
    return TRUE;
}

VOID WINAPI
FaxAPIDllInit(
    HANDLE            hHeap,
    API_INTERFACE     ApiInterface,
    PFNWRITELOGFILEW  pfnWriteLogFileW,
    PFNWRITELOGFILEA  pfnWriteLogFileA
)
{
    // Set g_hHeap
    g_hHeap = hHeap;
    // Set g_ApiInterface
    g_ApiInterface = ApiInterface;
#ifdef UNICODE
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileW;
#else
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileA;
#endif

    return;
}

VOID
fnFaxConnectFaxServer(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	BOOL	 bTestLimits
)
/*++

Routine Description:

  FaxConnectFaxServer()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE  hFaxSvcHandle;

    DWORD   dwIndex;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxConnectFaxServer().\r\n"));
	fnWriteLogFile(TEXT("<function name=\"FaxConnectFaxServer\">"));

    for (dwIndex = 0; dwIndex < 2; dwIndex++) {
        // Connect to the fax server
        (*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

        fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

        if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
            fnWriteLogFile(TEXT("<result value=\"0\">FaxConnectFaxServer() failed.  The error code is 0x%08x.  This is an error.  FaxConnectFaxServer() should succeed</result>.\r\n"), GetLastError());
        }
        else {
            if (hFaxSvcHandle == NULL) {
                fnWriteLogFile(TEXT("<result value=\"0\">hFaxSvcHandle is NULL.  This is an error.  hFaxSvcHandle should not be NULL.</result>\r\n"));
            }
            else {
                (*pnNumCasesPassed)++;
				dwFuncCasesPass++;
				fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
            }

            g_ApiInterface.FaxClose(hFaxSvcHandle);
        }
		fnWriteLogFile(TEXT("</case>"));
	}

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxConnectFaxServer(NULL, NULL)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxConnectFaxServer() returned TRUE.  This is an error.  FaxConnectFaxServer() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxClose(hFaxSvcHandle);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxConnectFaxServer() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));

    }
	fnWriteLogFile(TEXT("</case>"));



	if (bTestLimits) {
	    (*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

	    fnWriteLogFile(TEXT("ServerName=LONG_STRING  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("<case name=\"ServerName=LONG_STRING\" id=\"%d\">"), *pnNumCasesAttempted);

		if (g_ApiInterface.FaxConnectFaxServer(TEXT(LONG_STRING), &hFaxSvcHandle)) {
			fnWriteLogFile(TEXT("<result value=\"0\">FaxConnectFaxServer() returned TRUE.  This is an error.  FaxConnectFaxServer() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
			g_ApiInterface.FaxClose(hFaxSvcHandle);
		}
		else 	{
			if (GetLastError() != ERROR_INVALID_PARAMETER) {
				fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxConnectFaxServer() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			}
			else	{
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
			}
		}
		fnWriteLogFile(TEXT("</case>"));
     }

//	if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
  //      (*pnNumCasesAttempted)++;
	//	dwFuncCasesAtt++;

      //  fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
          //  fnWriteLogFile(TEXT("FaxConnectFaxServer() failed.  The error code is 0x%08x.  This is an error.  FaxConnectFaxServer() should succeed.\r\n"), GetLastError());
        //}
        //else {
          //  (*pnNumCasesPassed)++;
//			dwFuncCasesPass++;

  //          g_ApiInterface.FaxClose(hFaxSvcHandle);
    //    }
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxConnectFaxServer, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("</function>"));
}

VOID
fnFaxFreeBuffer(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxFreeBuffer()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE              hFaxSvcHandle;
    // pFaxConfig is the pointer to the fax configuration
    PFAX_CONFIGURATION  pFaxConfig;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxFreeBuffer().\r\n"));
	fnWriteLogFile(TEXT("<function name=\"FaxFreeBuffer\">"));

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not GET configuration, The error code is 0x%08x.\r\n"), GetLastError());
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
        return;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

    g_ApiInterface.FaxFreeBuffer(pFaxConfig);
		
	(*pnNumCasesPassed)++;
	dwFuncCasesPass++;
	fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
	
	// Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);
	fnWriteLogFile(TEXT("</case>"));

fnWriteLogFile(TEXT("$$$ Summery for FaxFreeBuffer, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("</function>"));
}

VOID
fnFaxClose(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxClose()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE          hFaxSvcHandle;
    // hFaxPortHandle is the handle to a fax port
    HANDLE          hFaxPortHandle;
    // pFaxPortInfo is the pointer to the fax port info
    PFAX_PORT_INFO  pFaxPortInfo;
    // dwNumPorts is the number of fax ports
    DWORD           dwNumPorts;
    // dwDeviceId is the device id of the fax port
    DWORD           dwDeviceId;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxClose().\r\n"));
	fnWriteLogFile(TEXT("<function name=\"FaxClose\">"));

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}


    // Enumerate the fax ports
    if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not enum ports on %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
        return;
    }

    dwDeviceId = pFaxPortInfo[0].DeviceId;

    // Free the fax port info
    g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not open port %d, The error code is 0x%08x.\r\n"),dwDeviceId, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
        return;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (Port Handle).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Valid Case (Port Handle)\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxClose(hFaxPortHandle)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxClose() failed.  The error code is 0x%08x.  This is an error.  FaxClose() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("</case>"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid Handle (Port Handle).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Invalid Handle (Port Handle)\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxClose(hFaxPortHandle)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxClose() returned TRUE.  This is an error.  FaxClose() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxClose() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("</case>"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (Service Handle).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Valid Case (Service Handle)\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxClose(hFaxSvcHandle)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxClose() failed.  The error code is 0x%08x.  This is an error.  FaxClose() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("</case>"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid Handle (Service Handle).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Invalid Handle (Service Handle)\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxClose(hFaxSvcHandle)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxClose() returned TRUE.  This is an error.  FaxClose() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxClose() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("</case>"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("NULL Handle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"NULL Handle\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxClose(NULL)) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxClose() returned TRUE.  This is an error.  FaxClose() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxClose() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("</case>"));

//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        // Enumerate the fax ports
//        if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
            // Disconnect from the fax server
  //          g_ApiInterface.FaxClose(hFaxSvcHandle);
    //        return;
      //  }

//        dwDeviceId = pFaxPortInfo[0].DeviceId;

        // Free the fax port info
  //      g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

    //    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
            // Disconnect from the fax server
      //      g_ApiInterface.FaxClose(hFaxSvcHandle);
        //    return;
        //}

        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

        //fnWriteLogFile(TEXT("Valid Case (Port Handle).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxClose(hFaxPortHandle)) {
            //fnWriteLogFile(TEXT("FaxClose() failed.  The error code is 0x%08x.  This is an error.  FaxClose() should succeed.\r\n"), GetLastError());
        //}
        //else {
            //(*pnNumCasesPassed)++;
			//dwFuncCasesPass++;
        //}

        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

        //fnWriteLogFile(TEXT("Invalid Handle (Port Handle).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (g_ApiInterface.FaxClose(hFaxPortHandle)) {
            //fnWriteLogFile(TEXT("FaxClose() returned TRUE.  This is an error.  FaxClose() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        //}
        //else if (GetLastError() != ERROR_INVALID_HANDLE) {
          //  fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxClose() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
        //}
        //else {
            //(*pnNumCasesPassed)++;
			//dwFuncCasesPass++;
        //}

        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

        //fnWriteLogFile(TEXT("Valid Case (Service Handle).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxClose(hFaxSvcHandle)) {
          //  fnWriteLogFile(TEXT("FaxClose() failed.  The error code is 0x%08x.  This is an error.  FaxClose() should succeed.\r\n"), GetLastError());
        //}
        //else {
            //(*pnNumCasesPassed)++;
			//dwFuncCasesPass++;
        //}

        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

        //fnWriteLogFile(TEXT("Invalid Handle (Service Handle).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (g_ApiInterface.FaxClose(hFaxSvcHandle)) {
            //fnWriteLogFile(TEXT("FaxClose() returned TRUE.  This is an error.  FaxClose() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        //}
        //else if (GetLastError() != ERROR_INVALID_HANDLE) {
            //fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxClose() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
        //}
        //else {
            //(*pnNumCasesPassed)++;
			//dwFuncCasesPass++;
        //}
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxClose, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("</function>"));
}




VOID
fnFaxCompleteJobParams(
	LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	BOOL	 bTestLimits,
	BOOL	 bDoW2KFails
)
{
   // hFaxSvcHandle is the handle to the fax server
    HANDLE          hFaxSvcHandle;
 	
	// return value
	BOOL			bRetVal;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


	int				i;

	// Complate job params structures
	PFAX_JOB_PARAM pJobParam;
	PFAX_COVERPAGE_INFO pCoverpageInfo;


	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxCompleteJobParams().\r\n"));
	fnWriteLogFile(TEXT("<function name=\"FaxCompleteJobParams\">"));

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);
	
	
	bRetVal=g_ApiInterface.FaxCompleteJobParams(&pJobParam,&pCoverpageInfo);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxCompleteJobParmas() failed.  The error code is 0x%08x.  This is an error.  FaxClose() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		 (*pnNumCasesPassed)++;
		 dwFuncCasesPass++;
		 fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("</case>"));

	fnWriteLogFile(TEXT("pJobParam-> Values...\r\n"));
	fnWriteLogFile(TEXT("SizeOfStruct: %d.\r\n"),pJobParam->SizeOfStruct);
    fnWriteLogFile(TEXT("RecipientNumber: %s.\r\n"),pJobParam->RecipientNumber);
	fnWriteLogFile(TEXT("RecipientName: %s.\r\n"),pJobParam->RecipientName);
	fnWriteLogFile(TEXT("Tsid: %s.\r\n"),pJobParam->Tsid);
	fnWriteLogFile(TEXT("SenderName: %s.\r\n"),pJobParam->SenderName);
	fnWriteLogFile(TEXT("SenderCompany: %s.\r\n"),pJobParam->SenderCompany);
	fnWriteLogFile(TEXT("SenderDept: %s.\r\n"),pJobParam->SenderDept);
	fnWriteLogFile(TEXT("BillingCode: %s.\r\n"),pJobParam->BillingCode);
	fnWriteLogFile(TEXT("ScheduleAction: %d.\r\n"),pJobParam->ScheduleAction);
	fnWriteLogFile(TEXT("ScheduleTime: %d.\r\n"),pJobParam->ScheduleTime);
	fnWriteLogFile(TEXT("DeliveryReportType: %d.\r\n"),pJobParam->DeliveryReportType);
	fnWriteLogFile(TEXT("DeliveryReportAddress: %s.\r\n"),pJobParam->DeliveryReportAddress);
	fnWriteLogFile(TEXT("DocumentName: %s.\r\n"),pJobParam->DocumentName);	
	for (i=0;i<3;i++)	{
		fnWriteLogFile(TEXT("Reserved[%d]: %d.\r\n"),i,pJobParam->Reserved[i]);
	}

	fnWriteLogFile(TEXT("pCoverpageInfo-> Values...\r\n"));
	fnWriteLogFile(TEXT("SizeOfStruct: %d.\r\n"),pCoverpageInfo->SizeOfStruct);
	fnWriteLogFile(TEXT("CoverPageName: %s.\r\n"),pCoverpageInfo->CoverPageName);      
	fnWriteLogFile(TEXT("UseServerCoverPage: %d.\r\n"),pCoverpageInfo->UseServerCoverPage);
  
    fnWriteLogFile(TEXT("RecName: %s.\r\n"),pCoverpageInfo->RecName);
	fnWriteLogFile(TEXT("RecFaxNumber: %s.\r\n"),pCoverpageInfo->RecFaxNumber);
	fnWriteLogFile(TEXT("RecCompany: %s.\r\n"),pCoverpageInfo->RecCompany);
	fnWriteLogFile(TEXT("RecStreetAddress: %s.\r\n"),pCoverpageInfo->RecStreetAddress);
	fnWriteLogFile(TEXT("RecCity: %s.\r\n"),pCoverpageInfo->RecCity);
	fnWriteLogFile(TEXT("RecState: %s.\r\n"),pCoverpageInfo->RecState);
	fnWriteLogFile(TEXT("RecZip: %s.\r\n"),pCoverpageInfo->RecZip);
	fnWriteLogFile(TEXT("RecCountry: %s.\r\n"),pCoverpageInfo->RecCountry);
	fnWriteLogFile(TEXT("RecTitle: %s.\r\n"),pCoverpageInfo->RecTitle);
	fnWriteLogFile(TEXT("RecDepartment: %s.\r\n"),pCoverpageInfo->RecDepartment);
	fnWriteLogFile(TEXT("RecOfficeLocation: %s.\r\n"),pCoverpageInfo->RecOfficeLocation);
	fnWriteLogFile(TEXT("RecHomePhone: %s.\r\n"),pCoverpageInfo->RecHomePhone);
	fnWriteLogFile(TEXT("RecOfficePhone: %s.\r\n"),pCoverpageInfo->RecOfficePhone);
	  
  
	fnWriteLogFile(TEXT("SdrName: %s.\r\n"),pCoverpageInfo->SdrName);
	fnWriteLogFile(TEXT("SdrFaxNumber: %s.\r\n"),pCoverpageInfo->SdrFaxNumber);
	fnWriteLogFile(TEXT("SdrCompany: %s.\r\n"),pCoverpageInfo->SdrCompany);
	fnWriteLogFile(TEXT("SdrAddress: %s.\r\n"),pCoverpageInfo->SdrAddress);
	fnWriteLogFile(TEXT("SdrTitle: %s.\r\n"),pCoverpageInfo->SdrTitle);
	fnWriteLogFile(TEXT("SdrDepartment: %s.\r\n"),pCoverpageInfo->SdrDepartment);
	fnWriteLogFile(TEXT("SdrOfficeLocation: %s.\r\n"),pCoverpageInfo->SdrOfficeLocation);
	fnWriteLogFile(TEXT("SdrHomePhone: %s.\r\n"),pCoverpageInfo->SdrHomePhone);
	fnWriteLogFile(TEXT("SdrOfficePhone: %s.\r\n"),pCoverpageInfo->SdrOfficePhone);
	  
  
	fnWriteLogFile(TEXT("Note: %s.\r\n"),pCoverpageInfo->Note);
	fnWriteLogFile(TEXT("Subject: %s.\r\n"),pCoverpageInfo->Subject);
	fnWriteLogFile(TEXT("TimeSent: %s.\r\n"),pCoverpageInfo->TimeSent);
	fnWriteLogFile(TEXT("PageCount: %s.\r\n"),pCoverpageInfo->PageCount);

	g_ApiInterface.FaxFreeBuffer(pCoverpageInfo);
	g_ApiInterface.FaxFreeBuffer(pJobParam);

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

	fnWriteLogFile(TEXT("pCoverpageInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"pCoverpageInfo = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

	if (g_ApiInterface.FaxCompleteJobParams(&pJobParam,NULL)) {
			fnWriteLogFile(TEXT("<result value=\"0\">FaxCompleteJobParams() returned TRUE.  This is an error.  axCompleteJobParams() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
			g_ApiInterface.FaxFreeBuffer(pJobParam);
	}
	else if (GetLastError() != ERROR_INVALID_PARAMETER) {
	        fnWriteLogFile(TEXT("<result value=\"0\">FaxCompleteJobParams() returned 0x%08x.  This is an error.  axCompleteJobParams() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
	}
	else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
	}
	fnWriteLogFile(TEXT("</case>"));

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

	fnWriteLogFile(TEXT("pJobParam = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"pJobParam = NULL\" id=\"%d\">"), *pnNumCasesAttempted);
	if (g_ApiInterface.FaxCompleteJobParams(NULL,&pCoverpageInfo)) {
			fnWriteLogFile(TEXT("<result value=\"0\">FaxCompleteJobParams() returned TRUE.  This is an error. axCompleteJobParams() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
			g_ApiInterface.FaxFreeBuffer(pCoverpageInfo);
	}
	else if (GetLastError() != ERROR_INVALID_PARAMETER) {
	        fnWriteLogFile(TEXT("axCompleteJobParams() returned 0x%08x.  This is an error.  axCompleteJobParams() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
	}
	else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
	}
	fnWriteLogFile(TEXT("</case>"));

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

	fnWriteLogFile(TEXT("pCoverpageInfo = NULL and pJobParam = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"pCoverpageInfo = NULL and pJobParam = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

	if (g_ApiInterface.FaxCompleteJobParams(NULL,NULL)) {
			fnWriteLogFile(TEXT("<result value=\"0\">FaxCompleteJobParams() returned TRUE.  This is an error.  FaxCompleteJobParams() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
	}
	else if (GetLastError() != ERROR_INVALID_PARAMETER) {
	        fnWriteLogFile(TEXT("<result value=\"0\">FaxCompleteJobParams() returned 0x%08x.  This is an error.  FaxCompleteJobParams() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
	}
	else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
	}
	fnWriteLogFile(TEXT("</case>"));

fnWriteLogFile(TEXT("$$$ Summery for FaxCompleteJobParams, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("</function>"));
}





VOID
fnFaxAccessCheck(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	BOOL	 bTestLimits,
	BOOL	 bDoW2KFails
)
/*++

Routine Description:

  FaxClose()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE          hFaxSvcHandle;
 	// return value
	BOOL			bRetVal;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxAccessCheck().\r\n"));
	fnWriteLogFile(TEXT("<function name=\"FaxAccessCheck\">"));

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		fnWriteLogFile(TEXT("<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (FAX_READ).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Valid Case (FAX_READ)\" id=\"%d\">"), *pnNumCasesAttempted);
	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,FAX_READ);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxClose() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.\r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("</case>"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (FAX_WRITE).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Valid Case (FAX_WRITE)\" id=\"%d\">"), *pnNumCasesAttempted);

	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,FAX_WRITE);
    if (!bRetVal) {
		fnWriteLogFile(TEXT("<result value=\"0\">FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxClose() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.\r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("</case>"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (FAX_ALL_ACCESS).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Valid Case (FAX_ALL_ACCESS)\" id=\"%d\">"), *pnNumCasesAttempted);

	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,FAX_ALL_ACCESS);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxClose() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.\r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("</case>"));

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (FAX_CONFIG_QUERY).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Valid Case (FAX_CONFIG_QUERY)\" id=\"%d\">"), *pnNumCasesAttempted);

	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,FAX_CONFIG_QUERY);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxClose() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.\r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("</case>"));

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (FAX_CONFIG_SET).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Valid Case (FAX_CONFIG_SET)\" id=\"%d\">"), *pnNumCasesAttempted);

	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,FAX_CONFIG_SET);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxClose() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.  \r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("</case>"));

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (FAX_JOB_MANAGE).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Valid Case (FAX_JOB_MANAGE)\" id=\"%d\">"), *pnNumCasesAttempted);
	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,FAX_JOB_MANAGE);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxClose() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.\r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("</case>"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (FAX_JOB_QUERY).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Valid Case (FAX_JOB_QUERY)\" id=\"%d\">"), *pnNumCasesAttempted);

	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,FAX_JOB_QUERY);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxClose() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.\r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("</case>"));

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (FAX_JOB_SUBMIT).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Valid Case (FAX_JOB_SUBMIT)\" id=\"%d\">"), *pnNumCasesAttempted);

	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,FAX_JOB_SUBMIT);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxClose() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.\r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("</case>"));

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (FAX_PORT_QUERY).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Valid Case (FAX_PORT_QUERY)\" id=\"%d\">"), *pnNumCasesAttempted);

	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,FAX_PORT_QUERY);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxClose() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.\r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("</case>"));

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (FAX_PORT_SET).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Valid Case (FAX_PORT_SET)\" id=\"%d\">"), *pnNumCasesAttempted);

	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,FAX_PORT_SET);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxClose() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.\r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("</case>"));

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

	fnWriteLogFile(TEXT("Valid Case (GENERIC_ALL).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Valid Case (GENERIC_ALL)\" id=\"%d\">"), *pnNumCasesAttempted);

	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,GENERIC_ALL);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxClose() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.\r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("</case>"));

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (GENERIC_EXECUTE).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Valid Case (GENERIC_EXECUTE)\" id=\"%d\">"), *pnNumCasesAttempted);

	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,GENERIC_EXECUTE);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxClose() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.\r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("</case>"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
	
	fnWriteLogFile(TEXT("Valid Case (GENERIC_WRITE).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Valid Case (GENERIC_WRITE)\" id=\"%d\">"), *pnNumCasesAttempted);

	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,GENERIC_WRITE);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxClose() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.\r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("</case>"));

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

	fnWriteLogFile(TEXT("Valid Case (GENERIC_READ).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("<case name=\"Valid Case (GENERIC_READ)\" id=\"%d\">"), *pnNumCasesAttempted);

	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,GENERIC_READ);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("<result value=\"0\">FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxClose() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.\r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("</case>"));




	if (bTestLimits)	{
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("Invalid Case (MAX_DWORD).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("<case name=\"Invalid Case (MAX_DWORD)\" id=\"%d\">"), *pnNumCasesAttempted);

		bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,MAX_DWORD);
		if (bRetVal) {
	    fnWriteLogFile(TEXT("<result value=\"0\">FaxAccessCheck() returned TRUE.  This is an error.  FaxAccess() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
	    }
	    else {
			if (GetLastError() != ERROR_INVALID_PARAMETER)	{
				fnWriteLogFile(TEXT("<result value=\"0\">GetAccessCheck() returned 0x%08x.  This is an error.  FaxAccessCheck() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
				
			}
			else	{
				(*pnNumCasesPassed)++;
				dwFuncCasesPass++;
				fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
			}
		}
		fnWriteLogFile(TEXT("</case>"));
	}
	
    if (bDoW2KFails)		{
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

	    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

	    if (g_ApiInterface.FaxAccessCheck(NULL, FAX_READ)) {
			fnWriteLogFile(TEXT("<result value=\"0\">FaxAccessCheck() returned TRUE.  This is an error.  FaxAccess() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
		}
		else if (GetLastError() != ERROR_INVALID_HANDLE) {
	        fnWriteLogFile(TEXT("<result value=\"0\">FaxAccessCheck() returned 0x%08x.  This is an error.  FaxAccessCheck() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
	    }
	    else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
		}
		fnWriteLogFile(TEXT("</case>"));

    
		// Disconnect from the fax server
		g_ApiInterface.FaxClose(hFaxSvcHandle);
	
	    (*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

	    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("<case name=\"Invalid hFaxSvcHandle\" id=\"%d\">"), *pnNumCasesAttempted);

	    if (g_ApiInterface.FaxAccessCheck(hFaxSvcHandle, FAX_READ)) {
			fnWriteLogFile(TEXT("<result value=\"0\">FaxAccessCheck() returned TRUE.  This is an error.  FaxAccessCheck() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
		}
		else if (GetLastError() != ERROR_INVALID_HANDLE) {
	        fnWriteLogFile(TEXT("<result value=\"0\">GetAccessCheck() returned 0x%08x.  This is an error.  FaxAccessCheck() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
	    }
	    else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("<result value=\"1\"></result>"));
		}
		fnWriteLogFile(TEXT("</case>"));
	}
fnWriteLogFile(TEXT("$$$ Summery for FaxAccessCheck, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("</function>"));
}










BOOL WINAPI
FaxAPIDllTest(
	LPCWSTR  szWhisPhoneNumberW,
	LPCSTR   szWhisPhoneNumberA,
    LPCWSTR  szServerNameW,
    LPCSTR   szServerNameA,
    UINT     nNumCasesLocal,
    UINT     nNumCasesServer,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	DWORD	 dwTestMode
)
{
    LPCTSTR  szServerName;
    UINT     nNumCases;

#ifdef UNICODE
    szServerName = szServerNameW;
#else
    szServerName = szServerNameA;
#endif

    if (szServerName) {
        nNumCases = nNumCasesServer;
		fnWriteLogFile(TEXT("WHIS> REMOTE SERVER MODE:\r\n"));
    }
    else {
        nNumCases = nNumCasesLocal;
    }

    // FaxConnectFaxServer()
	if (dwTestMode==WHIS_TEST_MODE_LIMITS)
	{
		fnFaxConnectFaxServer(szServerName, pnNumCasesAttempted, pnNumCasesPassed,TRUE);
	}
	else
	{
		fnFaxConnectFaxServer(szServerName, pnNumCasesAttempted, pnNumCasesPassed,FALSE);
	}


    // FaxFreeBuffer()
    fnFaxFreeBuffer(szServerName, pnNumCasesAttempted, pnNumCasesPassed);
	
	// FaxCompleteJobParams()
	fnFaxCompleteJobParams(szServerName, pnNumCasesAttempted, pnNumCasesPassed,FALSE,TRUE);


	// FaxAccessCheck()
	if (dwTestMode == WHIS_TEST_MODE_DO_W2K_FAILS)	{
		fnFaxAccessCheck(szServerName, pnNumCasesAttempted, pnNumCasesPassed,FALSE,TRUE);
	}
	else if (dwTestMode == WHIS_TEST_MODE_LIMITS)	{
		fnFaxAccessCheck(szServerName, pnNumCasesAttempted, pnNumCasesPassed,TRUE,FALSE);
	}
	else	{
		fnFaxAccessCheck(szServerName, pnNumCasesAttempted, pnNumCasesPassed,FALSE,FALSE);
	}
		
	

    // FaxClose()
    fnFaxClose(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    if ((*pnNumCasesAttempted == nNumCases) && (*pnNumCasesPassed == *pnNumCasesAttempted)) {
        return TRUE;
    }
    else {
        return FALSE;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legacywin32_xml\faxapi\faxapi.h ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

  faxapi.h

Abstract:

  This module contains the global definitions

Author:

  Steven Kehrli (steveke) 8/28/1998

--*/

/*++

  Whistler Version:

  Lior Shmueli (liors) 23/11/2000

 ++*/

#ifndef _FAXAPI_H
#define _FAXAPI_H

typedef struct _DLL_INTERFACE {
    HINSTANCE       hInstance;
    PFAXAPIDLLINIT  pFaxAPIDllInit;
    PFAXAPIDLLTEST  pFaxAPIDllTest;
} DLL_INTERFACE, *PDLL_INTERFACE;

// g_hHeap is a global handle to the process heap
HANDLE         g_hHeap = NULL;
// g_hLogFile is the handle to the log file
HANDLE         g_hLogFile = INVALID_HANDLE_VALUE;
// g_bVerbose indicates the verbose switch was found
BOOL           g_bVerbose = FALSE;
// g_ApiInterface is the API interface structure
API_INTERFACE  g_ApiInterface;

#define HELP_SWITCH_1   L"/?"
#define HELP_SWITCH_2   L"/H"
#define HELP_SWITCH_3   L"-?"
#define HELP_SWITCH_4   L"-H"
#define INIFILE_SWITCH  L"/I:"
#define LOGFILE_SWITCH  L"/L:"
#define SERVER_SWITCH   L"/S:"
#define VERBOSE_SWITCH  L"/V"

#define FAXAPI_INIFILE  L"faxapi.ini"
#define FAXAPI_LOGFILE  L"faxapi.xml"

#define WINFAX_DLL      L"\\winfax.dll"

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legacywin32_xml\faxapi\util.c ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

  util.c

Abstract:

  This module:
    1) Displays a string in stdout
    2) Opens the log file
    3) Writes a string to the log file
    4) Writes a string to the log file
    5) Writes a string to the log file and stdout

Author:

  Steven Kehrli (steveke) 8/28/1998

--*/

#ifndef _UTIL_C
#define _UTIL_C

VOID
LocalEcho(
    LPWSTR  szFormatString,
    ...
)
/*++

Routine Description:

  Displays a string in stdout

Arguments:

  szFormatString - pointer to the string

Return Value:

  None

--*/
{
    va_list  varg_ptr;
    // szOutputBuffer is the output string
    WCHAR    szOutputBuffer[1024];

    // Initialize the buffer
    ZeroMemory(szOutputBuffer, sizeof(szOutputBuffer));

    va_start(varg_ptr, szFormatString);
    _vsnwprintf(szOutputBuffer, sizeof(szOutputBuffer), szFormatString, varg_ptr);
    wprintf(L"%s\n", szOutputBuffer);
}

BOOL
fnOpenLogFile(
    LPCWSTR  szLogFile
)
/*++

Routine Description:

  Opens the log file

Arguments:

  szLogFile - log file name

Return Value:

  TRUE on success

--*/
{
    // cUnicodeBOM is the Unicode BOM
    WCHAR  cUnicodeBOM = 0xFEFF;
    DWORD  cb;

    // Create the new log file
    g_hLogFile = CreateFile(szLogFile, GENERIC_WRITE, FILE_SHARE_READ, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
    if (g_hLogFile == INVALID_HANDLE_VALUE) {
        return FALSE;
    }

    if (!WriteFile(g_hLogFile, &cUnicodeBOM, sizeof(WCHAR), &cb, NULL)) {
        return FALSE;
    }

    return TRUE;
}

VOID WINAPI
fnWriteLogFileW(
    LPWSTR  szFormatString,
    ...
)
/*++

Routine Description:

  Writes a string to the log file

Arguments:

  szFormatString - pointer to the string

Return Value:

  None

--*/
{
    va_list  varg_ptr;
    // szOutputString is the output string
    WCHAR    szOutputString[1024];
    DWORD    cb;

    va_start(varg_ptr, szFormatString);
    _vsnwprintf(szOutputString, sizeof(szOutputString), szFormatString, varg_ptr);

    if (g_bVerbose) {
        LocalEcho(L"%s", szOutputString);
    }

    if (g_hLogFile != INVALID_HANDLE_VALUE) {
        lstrcat(szOutputString, L"\r\n");
        WriteFile(g_hLogFile, szOutputString, lstrlen(szOutputString) * sizeof(WCHAR), &cb, NULL);
    }

}

VOID WINAPI
fnWriteLogFileA(
    LPSTR  szFormatString,
    ...
)
/*++

Routine Description:

  Writes a string to the log file

Arguments:

  szFormatString - pointer to the string

Return Value:

  None

--*/
{
    va_list  varg_ptr;
    // szOutputString is the output string
    CHAR     szOutputString[1024];
    WCHAR    szOutputStringW[1024];
    DWORD    cb;

    va_start(varg_ptr, szFormatString);
    _vsnprintf(szOutputString, sizeof(szOutputString), szFormatString, varg_ptr);

    MultiByteToWideChar(CP_ACP, 0, szOutputString, -1, szOutputStringW, sizeof(szOutputStringW) / sizeof(WCHAR));

    fnWriteLogFileW(L"%s", szOutputStringW);
}

VOID
fnWriteAndEcho(
    LPWSTR  szFormatString,
    ...
)
/*++

Routine Description:

  Writes a string to the log file and stdout

Arguments:

  szFormatString - pointer to the string

Return Value:

  None

--*/
{
    va_list  varg_ptr;
    // szOutputString is the output string
    WCHAR    szOutputString[1024];
    DWORD    cb;

    va_start(varg_ptr, szFormatString);
    _vsnwprintf(szOutputString, sizeof(szOutputString), szFormatString, varg_ptr);

    LocalEcho(L"%s", szOutputString);

    if (g_hLogFile != INVALID_HANDLE_VALUE) {
        lstrcat(szOutputString, L"\r\n");
        WriteFile(g_hLogFile, szOutputString, lstrlen(szOutputString) * sizeof(WCHAR), &cb, NULL);
    }
}

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legacywin32\xml\routeapi\routeapi.c ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

  routeapi.c

Abstract:

  RouteApi: Fax API Test Dll: Client Routing APIs
    1) FaxRegisterServiceProvider()
    2) FaxRegisterRoutingExtension()
    3) FaxEnumGlobalRoutingInfo()
    4) FaxSetGlobalRoutingInfo()
    5) FaxEnumRoutingMethods()
    6) FaxEnableRoutingMethod()
    7) FaxGetRoutingInfo()
    8) FaxSetRoutingInfo()

Author:

  Steven Kehrli (steveke) 8/28/1998

--*/

/*++

  Whistler Version:

  Lior Shmueli (liors) 23/11/2000

 ++*/

#include <wtypes.h>
#include <tchar.h>

#include "dllapi.h"
#include "routeapi.h"



// g_hHeap is the handle to the heap
HANDLE           g_hHeap = NULL;
// g_ApiInterface is the API_INTERFACE structure
API_INTERFACE    g_ApiInterface;
// fnWriteLogFile is the pointer to the function to write a string to the log file
PFNWRITELOGFILE  fnWriteLogFile = NULL;

// number of global routing methods
DWORD	 g_dwNumMethods=0;
DWORD	 g_dwIndexAPIMethod1=0;
DWORD	 g_dwIndexAPIMethod2=0;

#define FAX_DEVICEPROVIDERS_REGKEY        TEXT("Software\\Microsoft\\Fax\\Device Providers")
#define FAX_ROUTINGEXTENSIONS_REGKEY      TEXT("Software\\Microsoft\\Fax\\Routing Extensions")
#define FAX_ROUTINGMETHODS_REGKEY         TEXT("Routing Methods")
#define FAX_SERVICE                       TEXT("Fax")

#define ROUTEAPI_PROVIDER_W               L"RouteApi Modem Device Provider"
#define ROUTEAPI_PROVIDER                 TEXT("RouteApi Modem Device Provider")
#define ROUTEAPI_PROVIDER_FRIENDLYNAME_W  L"RouteApi Modem Device Provider Friendly Name"
#define ROUTEAPI_PROVIDER_FRIENDLYNAME    TEXT("RouteApi Modem Device Provider Friendly Name")
#define ROUTEAPI_PROVIDER_IMAGENAME_W     L"%SystemRoot%\\system32\\faxt30.dll"
#define ROUTEAPI_PROVIDER_IMAGENAME       TEXT("%SystemRoot%\\system32\\faxt30.dll")
#define ROUTEAPI_PROVIDER_PROVIDERNAME_W  L"Windows Telephony Service Provider for Universal Modem Driver"
#define ROUTEAPI_PROVIDER_PROVIDERNAME    TEXT("Windows Telephony Service Provider for Universal Modem Driver")

#define ROUTEAPI_INVALID_GUID             TEXT("{00000000-0000-0000-0000-000000000000}")

DWORD
DllEntry(
    HINSTANCE  hInstance,
    DWORD      dwReason,
    LPVOID     pContext
)
/*++

Routine Description:

  DLL entry point

Arguments:

  hInstance - handle to the module
  dwReason - indicates the reason for being called
  pContext - context

Return Value:

  TRUE on success

--*/
{
    return TRUE;
}

VOID WINAPI
FaxAPIDllInit(
    HANDLE            hHeap,
    API_INTERFACE     ApiInterface,
    PFNWRITELOGFILEW  pfnWriteLogFileW,
    PFNWRITELOGFILEA  pfnWriteLogFileA
)
/*++

Routine Description:

  Initialize Fax API Dll Test

Arguments:

  hHeap - handle to the heap
  ApiInterface - API_INTERFACE structure
  pfnWriteLogFile - pointer to function to write a string to the log file

Return Value:

  None

--*/
{
    // Set g_hHeap
    g_hHeap = hHeap;
    // Set g_ApiInterface
    g_ApiInterface = ApiInterface;
#ifdef UNICODE
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileW;
#else
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileA;
#endif

    return;
}

BOOL
fnRegQuerySz(
    HKEY    hKey,
    LPTSTR  szValue,
    LPTSTR  *pszData
)
/*++

Routine Description:

  Queries a Registry data as a REG_SZ

Arguments:

  hKey - handle to the Registry key
  szValue - value to be queried
  pszData - pointer to the data to be queried

Return Value:

  TRUE on success

--*/
{
    DWORD  cb;

    cb = 0;
    // Determine the memory required by pszData
    if (RegQueryValueEx(hKey, szValue, NULL, NULL, NULL, &cb)) {
        return FALSE;
    }

    // Allocate the memory for pszData
    *pszData = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, cb);

    if (RegQueryValueEx(hKey, szValue, NULL, NULL, (PBYTE) *pszData, &cb)) {
        HeapFree(g_hHeap, 0, *pszData);
        *pszData = NULL;
        return FALSE;
    }

    return TRUE;
}

VOID
fnFaxRegisterServiceProvider(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxRegisterServiceProvider()

Return Value:

  None

--*/
{
    // hFaxDeviceProvidersKey is the handle to the fax device providers registry key
    HKEY    hFaxDeviceProvidersKey;
    // hFaxSvcProviderKey is the handle to the fax service provider registry key
    HKEY    hFaxSvcProviderKey;
    // szFriendlyName is the service provider friendly name registry value
    LPTSTR  szFriendlyName;
    // szImageName is the service provider image name registry value
    LPTSTR  szImageName;
    // szProviderName is the service provider provider name registry value
    LPTSTR  szProviderName;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxRegisterServiceProvider().\r\n"));

    // Register the service provider
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxRegisterServiceProvider(ROUTEAPI_PROVIDER_W, ROUTEAPI_PROVIDER_FRIENDLYNAME_W, ROUTEAPI_PROVIDER_IMAGENAME_W, ROUTEAPI_PROVIDER_PROVIDERNAME_W)) {
        fnWriteLogFile(TEXT("FaxRegisterServiceProvider() failed.  The error code is 0x%08x.  This is an error.  FaxRegisterServiceProvider() should succeed.\r\n"), GetLastError());
    }
    else {
        if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, FAX_DEVICEPROVIDERS_REGKEY, 0, KEY_ALL_ACCESS, &hFaxDeviceProvidersKey)) {
            fnWriteLogFile(TEXT("Could not open the Registry Key %s, ec = 0x%08x.\r\n"), FAX_DEVICEPROVIDERS_REGKEY, GetLastError());
            goto RegFailed0;
        }

        if (RegOpenKeyEx(hFaxDeviceProvidersKey, ROUTEAPI_PROVIDER, 0, KEY_ALL_ACCESS, &hFaxSvcProviderKey)) {
            fnWriteLogFile(TEXT("Could not open the Registry Key %s, ec = 0x%08x.\r\n"), ROUTEAPI_PROVIDER, GetLastError());
            goto RegFailed1;
        }

        if (!fnRegQuerySz(hFaxSvcProviderKey, TEXT("FriendlyName"), &szFriendlyName)) {
            fnWriteLogFile(TEXT("Could not query the Registry Value %s, ec = 0x%08x.\r\n"), TEXT("FriendlyName"), GetLastError());
            goto RegFailed2;
        }
        if (lstrcmp(ROUTEAPI_PROVIDER_FRIENDLYNAME, szFriendlyName)!=0) {
            fnWriteLogFile(TEXT("FriendlyName: Received: %s, Expected: %s.\r\n"), szFriendlyName, ROUTEAPI_PROVIDER_FRIENDLYNAME);
            goto RegFailed2;
        }
        HeapFree(g_hHeap, 0, szFriendlyName);

        if (!fnRegQuerySz(hFaxSvcProviderKey, TEXT("ImageName"), &szImageName)) {
            fnWriteLogFile(TEXT("Could not query the Registry Value %s, ec = 0x%08x.\r\n"), TEXT("ImageName"), GetLastError());
            goto RegFailed2;
        }
        if (lstrcmp(ROUTEAPI_PROVIDER_IMAGENAME, szImageName)!=0) {
            fnWriteLogFile(TEXT("ImageName: Received: %s, Expected: %s.\r\n"), szImageName, ROUTEAPI_PROVIDER_IMAGENAME);
            goto RegFailed2;
        }
        HeapFree(g_hHeap, 0, szImageName);

        if (!fnRegQuerySz(hFaxSvcProviderKey, TEXT("ProviderName"), &szProviderName)) {
            fnWriteLogFile(TEXT("Could not query the Registry Value %s, ec = 0x%08x.\r\n"), TEXT("ProviderName"), GetLastError());
            goto RegFailed2;
        }
        if (lstrcmp(ROUTEAPI_PROVIDER_PROVIDERNAME, szProviderName)!=0) {
            fnWriteLogFile(TEXT("ProviderName: Received: %s, Expected: %s.\r\n"), szProviderName, ROUTEAPI_PROVIDER_PROVIDERNAME);
            goto RegFailed2;
        }
        HeapFree(g_hHeap, 0, szProviderName);

        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;

goto RegFailed0;
RegFailed2:
        RegCloseKey(hFaxSvcProviderKey);
        RegDeleteKey(hFaxDeviceProvidersKey, ROUTEAPI_PROVIDER);

RegFailed1:
        RegCloseKey(hFaxDeviceProvidersKey);
    }

RegFailed0:

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("ROUTEAPI_PROVIDER = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxRegisterServiceProvider(NULL, ROUTEAPI_PROVIDER_FRIENDLYNAME_W, ROUTEAPI_PROVIDER_IMAGENAME_W, ROUTEAPI_PROVIDER_PROVIDERNAME_W)) {
        fnWriteLogFile(TEXT("FaxRegisterServiceProvider() returned TRUE.  This is an error.  FaxRegisterServiceProvider() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxRegisterServiceProvider() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("ROUTEAPI_PROVIDER_FRIENDLYNAME = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxRegisterServiceProvider(ROUTEAPI_PROVIDER_W, NULL, ROUTEAPI_PROVIDER_IMAGENAME_W, ROUTEAPI_PROVIDER_PROVIDERNAME_W)) {
        fnWriteLogFile(TEXT("FaxRegisterServiceProvider() returned TRUE.  This is an error.  FaxRegisterServiceProvider() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxRegisterServiceProvider() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("ROUTEAPI_PROVIDER_IMAGENAME = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxRegisterServiceProvider(ROUTEAPI_PROVIDER_W, ROUTEAPI_PROVIDER_FRIENDLYNAME_W, NULL, ROUTEAPI_PROVIDER_PROVIDERNAME_W)) {
        fnWriteLogFile(TEXT("FaxRegisterServiceProvider() returned TRUE.  This is an error.  FaxRegisterServiceProvider() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxRegisterServiceProvider() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("ROUTEAPI_PROVIDER_PROVIDERNAME = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxRegisterServiceProvider(ROUTEAPI_PROVIDER_W, ROUTEAPI_PROVIDER_FRIENDLYNAME_W, ROUTEAPI_PROVIDER_IMAGENAME_W, NULL)) {
        fnWriteLogFile(TEXT("FaxRegisterServiceProvider() returned TRUE.  This is an error.  FaxRegisterServiceProvider() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxRegisterServiceProvider() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, FAX_DEVICEPROVIDERS_REGKEY, 0, KEY_ALL_ACCESS, &hFaxDeviceProvidersKey)) {
        return;
    }

    RegDeleteKey(hFaxDeviceProvidersKey, ROUTEAPI_PROVIDER);
    RegCloseKey(hFaxDeviceProvidersKey);
fnWriteLogFile(TEXT("$$$ Summery for FaxRegisterServiceProvider, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
}

BOOL CALLBACK
fnRouteApiExtensionCallback(
    HANDLE  hFaxSvcHandle,
    LPVOID  lpContext,
    LPWSTR  szMethodBuffer,
    LPWSTR  szMethodFriendlyNameBuffer,
    LPWSTR  szMethodFunctionNameBuffer,
    LPWSTR  szGUIDBuffer
)
/*++

Routine Description:

  FaxRegisterRoutingExtension() callback

Return Value:

  TRUE to enumerate another Routing Method

--*/
{
    BOOL     bRet;
    LPDWORD  pdwIndex;

	

    pdwIndex = (LPDWORD) lpContext;

    switch (*pdwIndex) {
        case 0:
            lstrcpyW(szMethodBuffer, ROUTEAPI_METHOD1_W);
            lstrcpyW(szMethodFriendlyNameBuffer, ROUTEAPI_METHOD_FRIENDLYNAME1_W);
            lstrcpyW(szMethodFunctionNameBuffer, ROUTEAPI_METHOD_FUNCTIONNAME1_W);
            lstrcpyW(szGUIDBuffer, ROUTEAPI_METHOD_GUID1_W);
            bRet = TRUE;
            break;

        case 1:
            lstrcpyW(szMethodBuffer, ROUTEAPI_METHOD2_W);
            lstrcpyW(szMethodFriendlyNameBuffer, ROUTEAPI_METHOD_FRIENDLYNAME2_W);
            lstrcpyW(szMethodFunctionNameBuffer, ROUTEAPI_METHOD_FUNCTIONNAME2_W);
            lstrcpyW(szGUIDBuffer, ROUTEAPI_METHOD_GUID2_W);
            bRet = TRUE;
            break;

        default:
            bRet = FALSE;
            break;
    }

    (*pdwIndex)++;
    return bRet;
}

VOID
fnFaxRegisterRoutingExtension(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxRegisterRoutingExtension()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE  hFaxSvcHandle;

    // hFaxRoutingExtensionsKey is the handle to the fax routing extensions registry key
    HKEY    hFaxRoutingExtensionsKey;
    // hFaxExtensionKey is the handle to the fax extension registry key
    HKEY    hFaxExtensionKey;
    // hFaxRoutingMethodsKey is the handle to the fax routing methods registry key
    HKEY    hFaxRoutingMethodsKey;
    // hFaxMethodKey is the handle to the fax method registry key
    HKEY    hFaxMethodKey;
    // szFriendlyName is the routing extension or routing method friendly name registry value
    LPTSTR  szFriendlyName;
    // szImageName is the routing extension image name registry value
    LPTSTR  szImageName;
    // szFunctionName is the routing method function name registry value
    LPTSTR  szFunctionName;
    // szGUID is the routing method GUD registry value
    LPTSTR  szGUID;

    DWORD   dwIndex;
	DWORD   dwWhisErrorCode=0;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxRegisterRoutingExtension().\r\n"));

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}
    // Register the routing extension
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    dwIndex = 0;
	fnWriteLogFile(TEXT("WHIS> Starting extension registration...\n"));
	
						
	fnWriteLogFile(TEXT("\nValid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxRegisterRoutingExtension(hFaxSvcHandle, ROUTEAPI_EXTENSION_W, ROUTEAPI_EXTENSION_FRIENDLYNAME_W, ROUTEAPI_EXTENSION_IMAGENAME_W, fnRouteApiExtensionCallback, &dwIndex)) {
        fnWriteLogFile(TEXT("FaxRegisterRoutingExtension() failed.  The error code is 0x%08x.  This is an error.  FaxRegisterRoutingExtension() should succeed.\r\n"), GetLastError());
    }
    else {
        if (dwIndex != 3) {
            fnWriteLogFile(TEXT("FaxRegisterRoutingExtension() failed.  fnRouteApiExtensionCallback() was only called %d times.  This is an error.  fnRouteApiExtensionCallback() should have been called 3 times.\r\n"), dwIndex);
			dwWhisErrorCode=1;
            goto RegFailed0;
        }

        if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, FAX_ROUTINGEXTENSIONS_REGKEY, 0, KEY_ALL_ACCESS, &hFaxRoutingExtensionsKey)) {
            fnWriteLogFile(TEXT("Could not open the Registry Key %s, ec = 0x%08x.\r\n"), FAX_ROUTINGEXTENSIONS_REGKEY, GetLastError());
			dwWhisErrorCode=2;
            goto RegFailed0;
        }

        if (RegOpenKeyEx(hFaxRoutingExtensionsKey, ROUTEAPI_EXTENSION, 0, KEY_ALL_ACCESS, &hFaxExtensionKey)) {
            fnWriteLogFile(TEXT("Could not open the Registry Key %s, ec = 0x%08x.\r\n"), ROUTEAPI_EXTENSION, GetLastError());
			dwWhisErrorCode=3;
            goto RegFailed1;
        }

        if (!fnRegQuerySz(hFaxExtensionKey, TEXT("FriendlyName"), &szFriendlyName)) {
            fnWriteLogFile(TEXT("Could not query the Registry Value %s, ec = 0x%08x.\r\n"), TEXT("FriendlyName"), GetLastError());
			dwWhisErrorCode=4;
            goto RegFailed2;
        }
        if (lstrcmp(ROUTEAPI_EXTENSION_FRIENDLYNAME, szFriendlyName)!=0) {
            fnWriteLogFile(TEXT("FriendlyName: Received: %s, Expected: %s.\r\n"), szFriendlyName, ROUTEAPI_EXTENSION_FRIENDLYNAME);
			dwWhisErrorCode=5;
            goto RegFailed2;
        }
        HeapFree(g_hHeap, 0, szFriendlyName);

        if (!fnRegQuerySz(hFaxExtensionKey, TEXT("ImageName"), &szImageName)) {
            fnWriteLogFile(TEXT("Could not query the Registry Value %s, ec = 0x%08x.\r\n"), TEXT("ImageName"), GetLastError());
			dwWhisErrorCode=6;
            goto RegFailed2;
        }
        if (lstrcmp(ROUTEAPI_EXTENSION_IMAGENAME, szImageName)!=0) {
            fnWriteLogFile(TEXT("ImageName: Received: %s, Expected: %s.\r\n"), szImageName, ROUTEAPI_EXTENSION_IMAGENAME);
			dwWhisErrorCode=7;
            goto RegFailed2;
        }
        HeapFree(g_hHeap, 0, szImageName);

        if (RegOpenKeyEx(hFaxExtensionKey, FAX_ROUTINGMETHODS_REGKEY, 0, KEY_ALL_ACCESS, &hFaxRoutingMethodsKey)) {
            fnWriteLogFile(TEXT("Could not open the Registry Key %s, ec = 0x%08x.\r\n"), FAX_ROUTINGMETHODS_REGKEY, GetLastError());
			dwWhisErrorCode=8;
            goto RegFailed2;
        }

        if (RegOpenKeyEx(hFaxRoutingMethodsKey, ROUTEAPI_METHOD1, 0, KEY_ALL_ACCESS, &hFaxMethodKey)) {
            fnWriteLogFile(TEXT("Could not open the Registry Key %s, ec = 0x%08x.\r\n"), ROUTEAPI_METHOD1, GetLastError());
			dwWhisErrorCode=9;
            goto NextMethod0;
        }

        if (!fnRegQuerySz(hFaxMethodKey, TEXT("FriendlyName"), &szFriendlyName)) {
            fnWriteLogFile(TEXT("Could not query the Registry Value %s, ec = 0x%08x.\r\n"), TEXT("FriendlyName"), GetLastError());
			dwWhisErrorCode=10;
            goto NextMethod1;
        }
        if (lstrcmp(ROUTEAPI_METHOD_FRIENDLYNAME1, szFriendlyName)!=0) {
            fnWriteLogFile(TEXT("FriendlyName: Received: %s, Expected: %s.\r\n"), szFriendlyName, ROUTEAPI_METHOD_FRIENDLYNAME1);
			dwWhisErrorCode=11;
            goto NextMethod1;
        }
        HeapFree(g_hHeap, 0, szFriendlyName);

        if (!fnRegQuerySz(hFaxMethodKey, TEXT("Function Name"), &szFunctionName)) {
            fnWriteLogFile(TEXT("Could not query the Registry Value %s, ec = 0x%08x.\r\n"), TEXT("Function Name"), GetLastError());
			dwWhisErrorCode=12;
            goto NextMethod1;
        }
        if (lstrcmp(ROUTEAPI_METHOD_FUNCTIONNAME1, szFunctionName)!=0) {
            fnWriteLogFile(TEXT("Function Name: Received: %s, Expected: %s.\r\n"), szFunctionName, ROUTEAPI_METHOD_FUNCTIONNAME1);
			dwWhisErrorCode=13;
            goto NextMethod1;
        }
        HeapFree(g_hHeap, 0, szFunctionName);

        if (!fnRegQuerySz(hFaxMethodKey, TEXT("Guid"), &szGUID)) {
            fnWriteLogFile(TEXT("Could not query the Registry Value %s, ec = 0x%08x.\r\n"), TEXT("Guid"), GetLastError());
			dwWhisErrorCode=14;
            goto NextMethod1;
        }
        if (lstrcmp(ROUTEAPI_METHOD_GUID1, szGUID)!=0) {
            fnWriteLogFile(TEXT("Guid: Received: %s, Expected: %s.\r\n"), szGUID, ROUTEAPI_METHOD_GUID1);
			dwWhisErrorCode=15;
            goto NextMethod1;
        }
        HeapFree(g_hHeap, 0, szGUID);

goto NextMethod0;
NextMethod1:
        fnWriteLogFile(TEXT("There was an error with the 1st routing extenstion registration (code %d), and it will be deleted. IGNORE ALL CASES\r\n"),dwWhisErrorCode);
        RegCloseKey(hFaxMethodKey);
		RegDeleteKey(hFaxRoutingMethodsKey, ROUTEAPI_METHOD1);

NextMethod0:
        if (RegOpenKeyEx(hFaxRoutingMethodsKey, ROUTEAPI_METHOD2, 0, KEY_ALL_ACCESS, &hFaxMethodKey)) {
            fnWriteLogFile(TEXT("Could not open the Registry Key %s, ec = 0x%08x.\r\n"), ROUTEAPI_METHOD2, GetLastError());
            goto RegFailed3;
        }

        if (!fnRegQuerySz(hFaxMethodKey, TEXT("FriendlyName"), &szFriendlyName)) {
            fnWriteLogFile(TEXT("Could not query the Registry Value %s, ec = 0x%08x.\r\n"), TEXT("FriendlyName"), GetLastError());
            goto RegFailed4;
        }
        if (lstrcmp(ROUTEAPI_METHOD_FRIENDLYNAME2, szFriendlyName)!=0) {
            fnWriteLogFile(TEXT("FriendlyName: Received: %s, Expected: %s.\r\n"), szFriendlyName, ROUTEAPI_METHOD_FRIENDLYNAME2);
            goto RegFailed4;
        }
        HeapFree(g_hHeap, 0, szFriendlyName);

        if (!fnRegQuerySz(hFaxMethodKey, TEXT("Function Name"), &szFunctionName)) {
            fnWriteLogFile(TEXT("Could not query the Registry Value %s, ec = 0x%08x.\r\n"), TEXT("Function Name"), GetLastError());
            goto RegFailed4;
        }
        if (lstrcmp(ROUTEAPI_METHOD_FUNCTIONNAME2, szFunctionName)!=0) {
            fnWriteLogFile(TEXT("Function Name: Received: %s, Expected: %s.\r\n"), szFunctionName, ROUTEAPI_METHOD_FUNCTIONNAME2);
            goto RegFailed4;
        }
        HeapFree(g_hHeap, 0, szFunctionName);

        if (!fnRegQuerySz(hFaxMethodKey, TEXT("Guid"), &szGUID)) {
            fnWriteLogFile(TEXT("Could not query the Registry Value %s, ec = 0x%08x.\r\n"), TEXT("Guid"), GetLastError());
            goto RegFailed4;
        }
        if (lstrcmp(ROUTEAPI_METHOD_GUID2, szGUID)!=0) {
            fnWriteLogFile(TEXT("Guid: Received: %s, Expected: %s.\r\n"), szGUID, ROUTEAPI_METHOD_GUID2);
            goto RegFailed4;
        }
        HeapFree(g_hHeap, 0, szGUID);

        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;

goto RegFailed0;
RegFailed4:
        RegCloseKey(hFaxMethodKey);
	    RegDeleteKey(hFaxRoutingMethodsKey, ROUTEAPI_METHOD2);

RegFailed3:
        RegCloseKey(hFaxRoutingMethodsKey);
	    RegDeleteKey(hFaxExtensionKey, FAX_ROUTINGMETHODS_REGKEY);

RegFailed2:
        RegCloseKey(hFaxExtensionKey);
        RegDeleteKey(hFaxRoutingExtensionsKey, ROUTEAPI_EXTENSION);

RegFailed1:
        RegCloseKey(hFaxRoutingExtensionsKey);
    }

RegFailed0:

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    dwIndex = 0;
    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxRegisterRoutingExtension(NULL, ROUTEAPI_EXTENSION_W, ROUTEAPI_EXTENSION_FRIENDLYNAME_W, ROUTEAPI_EXTENSION_IMAGENAME_W, fnRouteApiExtensionCallback, &dwIndex)) {
        fnWriteLogFile(TEXT("FaxRegisterRoutingExtension() returned TRUE.  This is an error.  FaxRegisterRoutingExtension() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxRegisterRoutingExtension() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    dwIndex = 0;
    fnWriteLogFile(TEXT("ROUTEAPI_EXTENSION = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxRegisterRoutingExtension(hFaxSvcHandle, NULL, ROUTEAPI_EXTENSION_FRIENDLYNAME_W, ROUTEAPI_EXTENSION_IMAGENAME_W, fnRouteApiExtensionCallback, &dwIndex)) {
        fnWriteLogFile(TEXT("FaxRegisterRoutingExtension() returned TRUE.  This is an error.  FaxRegisterRoutingExtension() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxRegisterRoutingExtension() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    dwIndex = 0;
    fnWriteLogFile(TEXT("ROUTEAPI_EXTENSION_FRIENDLYNAME = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxRegisterRoutingExtension(hFaxSvcHandle, ROUTEAPI_EXTENSION_W, NULL, ROUTEAPI_EXTENSION_IMAGENAME_W, fnRouteApiExtensionCallback, &dwIndex)) {
        fnWriteLogFile(TEXT("FaxRegisterRoutingExtension() returned TRUE.  This is an error.  FaxRegisterRoutingExtension() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxRegisterRoutingExtension() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    dwIndex = 0;
    fnWriteLogFile(TEXT("ROUTEAPI_EXTENSION_IMAGENAME = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxRegisterRoutingExtension(hFaxSvcHandle, ROUTEAPI_EXTENSION_W, ROUTEAPI_EXTENSION_FRIENDLYNAME_W, NULL, fnRouteApiExtensionCallback, &dwIndex)) {
        fnWriteLogFile(TEXT("FaxRegisterRoutingExtension() returned TRUE.  This is an error.  FaxRegisterRoutingExtension() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxRegisterRoutingExtension() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    dwIndex = 0;
    fnWriteLogFile(TEXT("fnRouteApiExtensionCallback = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxRegisterRoutingExtension(hFaxSvcHandle, ROUTEAPI_EXTENSION_W, ROUTEAPI_EXTENSION_FRIENDLYNAME_W, ROUTEAPI_EXTENSION_IMAGENAME_W, NULL, &dwIndex)) {
        fnWriteLogFile(TEXT("FaxRegisterRoutingExtension() returned TRUE.  This is an error.  FaxRegisterRoutingExtension() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxRegisterRoutingExtension() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    dwIndex = 0;
    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle (fax server not connected).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxRegisterRoutingExtension(hFaxSvcHandle, ROUTEAPI_EXTENSION_W, ROUTEAPI_EXTENSION_FRIENDLYNAME_W, ROUTEAPI_EXTENSION_IMAGENAME_W, fnRouteApiExtensionCallback, &dwIndex)) {
        fnWriteLogFile(TEXT("FaxRegisterRoutingExtension() returned TRUE.  This is an error.  FaxRegisterRoutingExtension() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxRegisterRoutingExtension() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    //if (szServerName) {
	//	fnWriteLogFile(TEXT("WHIS> SERVER CASE(s):\r\n"));
        // Connect to the fax server
      //  if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
        //    return;
        //}

    //    (*pnNumCasesAttempted)++;

    //    dwIndex = 0;
    //    fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    //    if (g_ApiInterface.FaxRegisterRoutingExtension(hFaxSvcHandle, ROUTEAPI_EXTENSION_W, ROUTEAPI_EXTENSION_FRIENDLYNAME_W, ROUTEAPI_EXTENSION_IMAGENAME_W, fnRouteApiExtensionCallback, &dwIndex)) {
    //        fnWriteLogFile(TEXT("FaxRegisterRoutingExtension() returned TRUE.  This is an error.  FaxRegisterRoutingExtension() should return FALSE and GetLastError() should return ERROR_INVALID_FUNCTION (0x%08x).\r\n"), ERROR_INVALID_FUNCTION);
    //    }
    //    else if (GetLastError() != ERROR_INVALID_FUNCTION) {
    //        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxRegisterRoutingExtension() should return FALSE and GetLastError() should return ERROR_INVALID_FUNCTION (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_FUNCTION);
    //    }
    //    else {
    //        (*pnNumCasesPassed)++;

    //    }

    // Disconnect from the fax server
    //    g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}


	fnWriteLogFile(TEXT("$$$ Summery for FaxRegisterRoutingExtension, Attempt %d, Pass %d, Fail %d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
	

    
	
	// un registration...
	if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, FAX_ROUTINGEXTENSIONS_REGKEY, 0, KEY_ALL_ACCESS, &hFaxRoutingExtensionsKey)) {
		return;
    }

    if (RegOpenKeyEx(hFaxRoutingExtensionsKey, ROUTEAPI_EXTENSION, 0, KEY_ALL_ACCESS, &hFaxExtensionKey)) {
        RegCloseKey(hFaxRoutingExtensionsKey);
        return;
    }

    if (RegOpenKeyEx(hFaxExtensionKey, FAX_ROUTINGMETHODS_REGKEY, 0, KEY_ALL_ACCESS, &hFaxRoutingMethodsKey)) {
        RegCloseKey(hFaxExtensionKey);
        RegDeleteKey(hFaxRoutingExtensionsKey, ROUTEAPI_EXTENSION);
        RegCloseKey(hFaxRoutingExtensionsKey);
        return;
    }

//    RegDeleteKey(hFaxRoutingMethodsKey, ROUTEAPI_METHOD1);
//    RegDeleteKey(hFaxRoutingMethodsKey, ROUTEAPI_METHOD2);
      RegCloseKey(hFaxRoutingMethodsKey);
//    RegDeleteKey(hFaxExtensionKey, FAX_ROUTINGMETHODS_REGKEY);
	  RegCloseKey(hFaxExtensionKey);
//    RegDeleteKey(hFaxRoutingExtensionsKey, ROUTEAPI_EXTENSION);
      RegCloseKey(hFaxRoutingExtensionsKey);
	  return;
}

BOOL
fnStopFaxSvc(
)
/*++

Routine Description:

  Stops the fax service

Return Value:

  TRUE on success

--*/
{
    HANDLE          hManager = NULL;
    HANDLE          hService = NULL;
    SERVICE_STATUS  ServiceStatus;

    // Open the service control manager
    hManager = OpenSCManager(NULL, SERVICES_ACTIVE_DATABASE, SC_MANAGER_ALL_ACCESS);
    // Open the service
    hService = OpenService(hManager, FAX_SERVICE, SERVICE_ALL_ACCESS);

    // Query the service status
    ZeroMemory(&ServiceStatus, sizeof(SERVICE_STATUS));
    if (!QueryServiceStatus(hService, &ServiceStatus)) {
        CloseServiceHandle(hService);
        CloseServiceHandle(hManager);
        fnWriteLogFile(TEXT("QueryServiceStatus() failed, ec = 0x%08x.\r\n"), GetLastError());
        return FALSE;
    }

    if (ServiceStatus.dwCurrentState == SERVICE_STOPPED) {
        // Service is stopped
        // Return TRUE
        return TRUE;
    }

    // Stop the service
    if (!ControlService(hService, SERVICE_CONTROL_STOP, &ServiceStatus)) {
        CloseServiceHandle(hService);
        CloseServiceHandle(hManager);
        fnWriteLogFile(TEXT("ControlService() failed, ec = 0x%08x.\r\n"), GetLastError());
        return FALSE;
    }

    // Wait until the service is stopped
    ZeroMemory(&ServiceStatus, sizeof(SERVICE_STATUS));
    while (ServiceStatus.dwCurrentState != SERVICE_STOPPED) {
        Sleep(1000);

        // Query the service status
        if (!QueryServiceStatus(hService, &ServiceStatus)) {
            CloseServiceHandle(hService);
            CloseServiceHandle(hManager);
            fnWriteLogFile(TEXT("QueryServiceStatus() failed, ec = 0x%08x.\r\n"), GetLastError());
            return FALSE;
        }

        // Verify the service is stopped or stopping
        if (!((ServiceStatus.dwCurrentState == SERVICE_STOPPED) || (ServiceStatus.dwCurrentState == SERVICE_STOP_PENDING))) {
            CloseServiceHandle(hService);
            CloseServiceHandle(hManager);
            fnWriteLogFile(TEXT("The Fax Service is in an unexpected state.  dwCurrentState: 0x%08x.\r\n"), ServiceStatus.dwCurrentState);
            return FALSE;
        }
    }

    Sleep(1000);

    CloseServiceHandle(hService);
    CloseServiceHandle(hManager);
    return TRUE;
}

VOID
fnAddRouteApiExtension(
)
/*++

Routine Description:

  Adds the Microsoft Routing Extension

Return Value:

  None

--*/
{
    // szRouteApiDll is the route api dll
    TCHAR   szRouteApiDll[MAX_PATH];

    // hFaxSvcHandle is the handle to the fax server
    HANDLE  hFaxSvcHandle;
    DWORD   dwIndex = 0;

    ExpandEnvironmentStrings(ROUTEAPI_EXTENSION_IMAGENAME, szRouteApiDll, sizeof(szRouteApiDll) / sizeof(TCHAR));
    if (!lstrcmpi(ROUTEAPI_EXTENSION_IMAGENAME, szRouteApiDll)) {
		fnWriteLogFile(TEXT("WHIS> Test Error: ROUTEAPI_EXTENSION_IMAGENAME and szRouteApiDll are not the same, The error code is 0x%08x\r\n"),GetLastError());
        return;
    }

    // Copy the FaxRcv dll
    if (!CopyFile(ROUTEAPI_EXTENSION_DLLNAME, szRouteApiDll, FALSE)) {
		fnWriteLogFile(TEXT("WHIS> Test Error: Could not copy routing extension file to system directory, The error code is 0x%08x\r\n"),GetLastError());
        return;
    }

    // Connect to the fax server
    g_ApiInterface.FaxConnectFaxServer(NULL, &hFaxSvcHandle);

    g_ApiInterface.FaxRegisterRoutingExtension(hFaxSvcHandle, ROUTEAPI_EXTENSION_W, ROUTEAPI_EXTENSION_FRIENDLYNAME_W, ROUTEAPI_EXTENSION_IMAGENAME_W, fnRouteApiExtensionCallback, &dwIndex);

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);
}

VOID
fnRemoveRouteApiExtension(
)
/*++

Routine Description:

  Removes the RouteApi Routing Extension

Return Value:

  None

--*/
{
    // hFaxRoutingExtensionsKey is the handle to the fax routing extensions registry key
    HKEY  hFaxRoutingExtensionsKey;
    // hFaxExtensionKey is the handle to the fax extension registry key
    HKEY  hFaxExtensionKey;
    // hFaxRoutingMethodsKey is the handle to the fax routing methods registry key
    HKEY  hFaxRoutingMethodsKey;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

    if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, FAX_ROUTINGEXTENSIONS_REGKEY, 0, KEY_ALL_ACCESS, &hFaxRoutingExtensionsKey)) {
        return;
    }

    if (RegOpenKeyEx(hFaxRoutingExtensionsKey, ROUTEAPI_EXTENSION, 0, KEY_ALL_ACCESS, &hFaxExtensionKey)) {
        RegCloseKey(hFaxRoutingExtensionsKey);
        return;
    }

    if (RegOpenKeyEx(hFaxExtensionKey, FAX_ROUTINGMETHODS_REGKEY, 0, KEY_ALL_ACCESS, &hFaxRoutingMethodsKey)) {
        RegCloseKey(hFaxExtensionKey);
        RegDeleteKey(hFaxRoutingExtensionsKey, ROUTEAPI_EXTENSION);
        RegCloseKey(hFaxRoutingExtensionsKey);
        return;
    }

    RegDeleteKey(hFaxRoutingMethodsKey, ROUTEAPI_METHOD1);
    RegDeleteKey(hFaxRoutingMethodsKey, ROUTEAPI_METHOD2);
    RegCloseKey(hFaxRoutingMethodsKey);
    RegDeleteKey(hFaxExtensionKey, FAX_ROUTINGMETHODS_REGKEY);
    RegCloseKey(hFaxExtensionKey);
    RegDeleteKey(hFaxRoutingExtensionsKey, ROUTEAPI_EXTENSION);
    RegCloseKey(hFaxRoutingExtensionsKey);
}

VOID
fnFaxEnumGlobalRoutingInfo(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxEnumGlobalRoutingInfo()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE                    hFaxSvcHandle;
    // pRoutingInfo is the pointer to the global routing structures
    PFAX_GLOBAL_ROUTING_INFO  pRoutingInfo;
    // dwNumMethods is the number of routing methods
    DWORD                     dwNumMethods;

    // szRouteApiDll is the route api dll
    TCHAR                     szRouteApiDll[MAX_PATH];

    DWORD                     dwIndex;

	TCHAR					szPreDefinedValue[MAX_PATH];

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;



	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxEnumGlobalRoutingInfo().\r\n"));

   // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    for (dwIndex = 0; dwIndex < 2; dwIndex++) {
        // Enumerate the routing extension global info
        (*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

        fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        if (!g_ApiInterface.FaxEnumGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo, &dwNumMethods)) {
            fnWriteLogFile(TEXT("FaxEnumGlobalRoutingInfo() failed.  The error code is 0x%08x.  This is an error.  FaxEnumGlobalRoutingInfo() should succeed.\r\n"), GetLastError());
        }
        else {
            if (pRoutingInfo == NULL) {
                fnWriteLogFile(TEXT("pRoutingInfo is NULL.  This is an error.  pRoutingInfo should not be NULL.\r\n"));
            }
			if (dwNumMethods != g_dwNumMethods) {
                fnWriteLogFile(TEXT("dwNumMethods is not g_dwNumMethods.  This is an error.  dwNumMethods should be g_dwNumMethods.\r\n"));
            }

			if ((pRoutingInfo != NULL) && (dwNumMethods == g_dwNumMethods)) {

				if (pRoutingInfo[g_dwIndexAPIMethod1].SizeOfStruct != sizeof(FAX_GLOBAL_ROUTING_INFO)) {
                    fnWriteLogFile(TEXT("SizeOfStruct: Received: %d, Expected: %d.\r\n"), pRoutingInfo[g_dwIndexAPIMethod1].SizeOfStruct, sizeof(FAX_GLOBAL_ROUTING_INFO));
                    goto FuncFailed;
                }

                if (pRoutingInfo[g_dwIndexAPIMethod1].Priority != g_dwNumMethods-1) {
                    fnWriteLogFile(TEXT("Priority: Received: %d, Expected: g_dwNumMethods-1.\r\n"), pRoutingInfo[g_dwIndexAPIMethod1].Priority);
                    goto FuncFailed;
                }
				
				if (lstrcmp(pRoutingInfo[g_dwIndexAPIMethod1].Guid,ROUTEAPI_METHOD_GUID1)!=0) {
                    fnWriteLogFile(TEXT("Guid: Received: %s, Expected: %s.\r\n"), pRoutingInfo[g_dwIndexAPIMethod1].Guid, ROUTEAPI_METHOD_GUID1);
                    goto FuncFailed;
                }

                if (lstrcmp(pRoutingInfo[g_dwIndexAPIMethod1].FriendlyName, ROUTEAPI_METHOD_FRIENDLYNAME1)!=0) {
                    fnWriteLogFile(TEXT("FriendlyName: Received: %s, Expected: %s.\r\n"), pRoutingInfo[g_dwIndexAPIMethod1].FriendlyName, ROUTEAPI_METHOD_FRIENDLYNAME1);
                    goto FuncFailed;
                }

                if (lstrcmp(pRoutingInfo[g_dwIndexAPIMethod1].FunctionName, ROUTEAPI_METHOD_FUNCTIONNAME1)!=0) {
                    fnWriteLogFile(TEXT("FunctionName: Received: %s, Expected: %s.\r\n"), pRoutingInfo[g_dwIndexAPIMethod1].FunctionName, ROUTEAPI_METHOD_FUNCTIONNAME1);
                    goto FuncFailed;
                }

                ExpandEnvironmentStrings(ROUTEAPI_EXTENSION_IMAGENAME, szRouteApiDll, sizeof(szRouteApiDll) / sizeof(TCHAR));
                if (lstrcmp(pRoutingInfo[g_dwIndexAPIMethod1].ExtensionImageName, szRouteApiDll)!=0) {
                    fnWriteLogFile(TEXT("ExtensionImageName: Received: %s, Expected: %s.\r\n"), pRoutingInfo[g_dwIndexAPIMethod1].ExtensionImageName, szRouteApiDll);
                    goto FuncFailed;
                }

                if (lstrcmp(pRoutingInfo[g_dwIndexAPIMethod1].ExtensionFriendlyName, ROUTEAPI_EXTENSION_FRIENDLYNAME)!=0) {
                    fnWriteLogFile(TEXT("ExtensionFriendlyName: Received: %s, Expected: %s.\r\n"), pRoutingInfo[g_dwIndexAPIMethod1].ExtensionFriendlyName, ROUTEAPI_EXTENSION_FRIENDLYNAME);
                    goto FuncFailed;
                }

                if (pRoutingInfo[g_dwIndexAPIMethod2].SizeOfStruct != sizeof(FAX_GLOBAL_ROUTING_INFO)!=0) {
                    fnWriteLogFile(TEXT("SizeOfStruct: Received: %d, Expected: %d.\r\n"), pRoutingInfo[g_dwIndexAPIMethod2].SizeOfStruct, sizeof(FAX_GLOBAL_ROUTING_INFO));
                    goto FuncFailed;
                }

                if (pRoutingInfo[g_dwIndexAPIMethod2].Priority != g_dwNumMethods) {
                    fnWriteLogFile(TEXT("Priority: Received: %d, Expected: g_dwNumMethods.\r\n"), pRoutingInfo[g_dwIndexAPIMethod2].Priority);
                    goto FuncFailed;
                }

                if (lstrcmp(pRoutingInfo[g_dwIndexAPIMethod2].Guid, ROUTEAPI_METHOD_GUID2)!=0) {
                    fnWriteLogFile(TEXT("Guid: Received: %s, Expected: %s.\r\n"), pRoutingInfo[g_dwIndexAPIMethod2].Guid, ROUTEAPI_METHOD_GUID2);
                    goto FuncFailed;
                }

                if (lstrcmp(pRoutingInfo[g_dwIndexAPIMethod2].FriendlyName, ROUTEAPI_METHOD_FRIENDLYNAME2)!=0) {
                    fnWriteLogFile(TEXT("FriendlyName: Received: %s, Expected: %s.\r\n"), pRoutingInfo[g_dwIndexAPIMethod2].FriendlyName, ROUTEAPI_METHOD_FRIENDLYNAME2);
                    goto FuncFailed;
                }

                if (lstrcmp(pRoutingInfo[g_dwIndexAPIMethod2].FunctionName, ROUTEAPI_METHOD_FUNCTIONNAME2)!=0) {
                    fnWriteLogFile(TEXT("FunctionName: Received: %s, Expected: %s.\r\n"), pRoutingInfo[g_dwIndexAPIMethod2].FunctionName, ROUTEAPI_METHOD_FUNCTIONNAME2);
                    goto FuncFailed;
                }

                ExpandEnvironmentStrings(ROUTEAPI_EXTENSION_IMAGENAME, szRouteApiDll, sizeof(szRouteApiDll) / sizeof(TCHAR));
                if (lstrcmp(pRoutingInfo[g_dwIndexAPIMethod2].ExtensionImageName, szRouteApiDll)!=0) {
                    fnWriteLogFile(TEXT("ExtensionImageName: Received: %s, Expected: %s.\r\n"), pRoutingInfo[g_dwIndexAPIMethod2].ExtensionImageName, szRouteApiDll);
                    goto FuncFailed;
                }

                if (lstrcmp(pRoutingInfo[g_dwIndexAPIMethod2].ExtensionFriendlyName, ROUTEAPI_EXTENSION_FRIENDLYNAME)!=0) {
                    fnWriteLogFile(TEXT("ExtensionFriendlyName: Received: %s, Expected: %s.\r\n"), pRoutingInfo[g_dwIndexAPIMethod2].ExtensionFriendlyName, ROUTEAPI_EXTENSION_FRIENDLYNAME);
                    goto FuncFailed;
                }

                (*pnNumCasesPassed)++;
				dwFuncCasesPass++;
            }

FuncFailed:
            g_ApiInterface.FaxFreeBuffer(pRoutingInfo);
        }
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxEnumGlobalRoutingInfo(NULL, &pRoutingInfo, &dwNumMethods)) {
        fnWriteLogFile(TEXT("FaxEnumGlobalRoutingInfo() returned TRUE.  This is an error.  FaxEnumGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pRoutingInfo);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxEnumGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pRoutingInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxEnumGlobalRoutingInfo(hFaxSvcHandle, NULL, &dwNumMethods)) {
        fnWriteLogFile(TEXT("FaxEnumGlobalRoutingInfo() returned TRUE.  This is an error.  FaxEnumGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pRoutingInfo);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxEnumGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("dwNumMethods = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxEnumGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo, NULL)) {
        fnWriteLogFile(TEXT("FaxEnumGlobalRoutingInfo() returned TRUE.  This is an error.  FaxEnumGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pRoutingInfo);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxEnumGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxEnumGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo, NULL)) {
        fnWriteLogFile(TEXT("FaxEnumGlobalRoutingInfo() returned TRUE.  This is an error.  FaxEnumGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pRoutingInfo);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxEnumGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> SERVER CASE(s):\r\n"));
        // Connect to the fax server
//        if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
//            return;
        //}

        //(*pnNumCasesAttempted)++;

        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxEnumGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo, &dwNumMethods)) {
          //  fnWriteLogFile(TEXT("FaxEnumGlobalRoutingInfo() failed.  The error code is 0x%08x.  This is an error.  FaxEnumGlobalRoutingInfo() should succeed.\r\n"), GetLastError());
        //}
        //else {
          //  g_ApiInterface.FaxFreeBuffer(pRoutingInfo);
//            (*pnNumCasesPassed)++;

  //      }

        // Disconnect from the fax server
    //    g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxEnumGlobalRoutingMethods, Attempt %d, Pass %d, Fail %d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
}

VOID
fnFaxSetGlobalRoutingInfo(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	BOOL	 bTestLimits
)
/*++

Routine Description:

  FaxSetGlobalRoutingInfo()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE                    hFaxSvcHandle;
    // pRoutingInfo is the pointer to the global routing structures
    PFAX_GLOBAL_ROUTING_INFO  pRoutingInfo;
    // dwNumMethods is the number of routing methods
    DWORD                     dwNumMethods;
    // szGUID is the copy of a routing method GUID
    LPTSTR                    szGUID;

    DWORD                     dwIndex;
    DWORD                     cb;
    DWORD                     dwOffset;
	DWORD					  dwWhisRoutingCounter;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxSetGlobalRoutingInfo().\r\n"));

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}
    
	// Enumerate the routing extension global info
    if (!g_ApiInterface.FaxEnumGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo, &dwNumMethods)) {
        fnWriteLogFile(TEXT("WHIS> (org test error) FaxEnumGlobalRoutingInfo() failed.  The error code is 0x%08x.  This is an error.  FaxEnumGlobalRoutingInfo() should succeed.\r\n"), GetLastError());
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

	
	pRoutingInfo[g_dwIndexAPIMethod1].Priority = g_dwNumMethods;
    pRoutingInfo[g_dwIndexAPIMethod2].Priority = g_dwNumMethods-1;

    // Set the routing extension global info
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSetGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo[g_dwIndexAPIMethod1])) {
        fnWriteLogFile(TEXT("FaxSetGlobalRoutingInfo() failed.  The error code is 0x%08x.  This is an error.  FaxSetGlobalRoutingInfo() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_ApiInterface.FaxSetGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo[g_dwIndexAPIMethod2])) {
            fnWriteLogFile(TEXT("FaxSetGlobalRoutingInfo() failed.  The error code is 0x%08x.  This is an error.  FaxSetGlobalRoutingInfo() should succeed.\r\n"), GetLastError());
        }
        else {
            g_ApiInterface.FaxFreeBuffer(pRoutingInfo);

            // Enumerate the routing extension global info
            g_ApiInterface.FaxEnumGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo, &dwNumMethods);
            if (lstrcmp(pRoutingInfo[g_dwIndexAPIMethod1].Guid, ROUTEAPI_METHOD_GUID2)!=0) {
                fnWriteLogFile(TEXT(" Guid: Received: %s, Expected: %s.\r\n"), pRoutingInfo[g_dwIndexAPIMethod1].Guid, ROUTEAPI_METHOD_GUID2);
                goto FuncFailed;
            }

            if (pRoutingInfo[g_dwIndexAPIMethod1].Priority != g_dwNumMethods-1) {
                fnWriteLogFile(TEXT("Priority: Received: %d, Expected: g_dwNumMethods-1.\r\n"), pRoutingInfo[g_dwIndexAPIMethod1].Priority);
                goto FuncFailed;
            }

            if (lstrcmp(pRoutingInfo[g_dwIndexAPIMethod2].Guid, ROUTEAPI_METHOD_GUID1)!=0) {
                fnWriteLogFile(TEXT("Guid: Received: %s, Expected: %s.\r\n"), pRoutingInfo[g_dwIndexAPIMethod2].Guid, ROUTEAPI_METHOD_GUID1);
                goto FuncFailed;
            }

            if (pRoutingInfo[g_dwIndexAPIMethod2].Priority != g_dwNumMethods) {
                fnWriteLogFile(TEXT("Priority: Received: %d, Expected: g_dwNumMethods.\r\n"), pRoutingInfo[g_dwIndexAPIMethod2].Priority);
                goto FuncFailed;
            }

            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;

FuncFailed:
            pRoutingInfo[g_dwIndexAPIMethod1].Priority = g_dwNumMethods-1;
            pRoutingInfo[g_dwIndexAPIMethod2].Priority = g_dwNumMethods;

            g_ApiInterface.FaxSetGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo[g_dwIndexAPIMethod1]);
            g_ApiInterface.FaxSetGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo[g_dwIndexAPIMethod2]);
            g_ApiInterface.FaxFreeBuffer(pRoutingInfo);
            g_ApiInterface.FaxEnumGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo, &dwNumMethods);
        }
    }

    pRoutingInfo[g_dwIndexAPIMethod1].SizeOfStruct = 0;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pRoutingInfo->SizeOfStruct = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSetGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo[g_dwIndexAPIMethod1])) {
        fnWriteLogFile(TEXT("FaxSetGlobalRoutingInfo() returned TRUE.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }
    pRoutingInfo[g_dwIndexAPIMethod1].SizeOfStruct = sizeof(FAX_GLOBAL_ROUTING_INFO);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSetGlobalRoutingInfo(NULL, &pRoutingInfo[g_dwIndexAPIMethod1])) {
        fnWriteLogFile(TEXT("FaxSetGlobalRoutingInfo() returned TRUE.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pRoutingInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSetGlobalRoutingInfo(hFaxSvcHandle, NULL)) {
        fnWriteLogFile(TEXT("FaxSetGlobalRoutingInfo() returned TRUE.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    szGUID = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(pRoutingInfo[g_dwIndexAPIMethod1].Guid) + 1) * sizeof(TCHAR));
    lstrcpy(szGUID, pRoutingInfo[g_dwIndexAPIMethod1].Guid);
    lstrcpy((LPTSTR) pRoutingInfo[g_dwIndexAPIMethod1].Guid, ROUTEAPI_INVALID_GUID);

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

	fnWriteLogFile(TEXT("Invalid GUID.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	if (g_ApiInterface.FaxSetGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo[g_dwIndexAPIMethod1])) {
		fnWriteLogFile(TEXT("FaxSetGlobalRoutingInfo() returned TRUE.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), ERROR_INVALID_DATA);
	}
	else if (GetLastError() != ERROR_INVALID_DATA) {
		fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_DATA);
	}
	else {
		(*pnNumCasesPassed)++;
		dwFuncCasesPass++;
	}

	if (bTestLimits)	{
		
		// limit values tested

		// priority=MAX_DWORD
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("WHIS> LIMITS: Priotiry = MAX_DWORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		pRoutingInfo[g_dwIndexAPIMethod1].Priority = MAX_DWORD;
		if (g_ApiInterface.FaxSetGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo[g_dwIndexAPIMethod1])) {
			fnWriteLogFile(TEXT("FaxSetGlobalRoutingInfo() returned TRUE.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), ERROR_INVALID_DATA);
		}
		else if (GetLastError() != ERROR_INVALID_DATA) {
			fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_DATA);
		}
		else {
	        (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
		}

	
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("WHIS> LIMITS: FriendlyName=LONG_STRING  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		pRoutingInfo[g_dwIndexAPIMethod1].FriendlyName = TEXT(LONG_STRING);
		if (g_ApiInterface.FaxSetGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo[g_dwIndexAPIMethod1])) {
			fnWriteLogFile(TEXT("FaxSetGlobalRoutingInfo() returned TRUE.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), ERROR_INVALID_DATA);
		}
	    else if (GetLastError() != ERROR_INVALID_DATA) {
	        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_DATA);
		}
		else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
		}

		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("WHIS> LIMITS: FunctionName=LONG_STRING  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		pRoutingInfo[g_dwIndexAPIMethod1].FunctionName = TEXT(LONG_STRING);
		if (g_ApiInterface.FaxSetGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo[g_dwIndexAPIMethod1])) {
			fnWriteLogFile(TEXT("FaxSetGlobalRoutingInfo() returned TRUE.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), ERROR_INVALID_DATA);
		}
	    else if (GetLastError() != ERROR_INVALID_DATA) {
	        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_DATA);
		}
		else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
		}

		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

	    fnWriteLogFile(TEXT("WHIS> LIMITS: ExtensionImageName=LONG_STRING  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		pRoutingInfo[g_dwIndexAPIMethod1].ExtensionImageName = TEXT(LONG_STRING);
	    if (g_ApiInterface.FaxSetGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo[g_dwIndexAPIMethod1])) {
	        fnWriteLogFile(TEXT("FaxSetGlobalRoutingInfo() returned TRUE.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), ERROR_INVALID_DATA);
		}
		else if (GetLastError() != ERROR_INVALID_DATA) {
		    fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_DATA);
	    }
	    else {
	        (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
		}
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("WHIS> LIMITS: ExtensionFriendlyName=LONG_STRING  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		pRoutingInfo[g_dwIndexAPIMethod1].ExtensionFriendlyName = TEXT(LONG_STRING);
		if (g_ApiInterface.FaxSetGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo[g_dwIndexAPIMethod1])) {
	        fnWriteLogFile(TEXT("FaxSetGlobalRoutingInfo() returned TRUE.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), ERROR_INVALID_DATA);
		}
		else if (GetLastError() != ERROR_INVALID_DATA) {
			fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_DATA);
		}
		else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
		}
	}

    lstrcpy((LPTSTR) pRoutingInfo[g_dwIndexAPIMethod1].Guid, szGUID);
    HeapFree(g_hHeap, 0, szGUID);

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSetGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo[g_dwIndexAPIMethod1])) {
        fnWriteLogFile(TEXT("FaxSetGlobalRoutingInfo() returned TRUE.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    g_ApiInterface.FaxFreeBuffer(pRoutingInfo);

    //if (szServerName) {
	//	fnWriteLogFile(TEXT("WHIS> SERVER CASE(s):\r\n"));
        // Connect to the fax server
      //  if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
        //    return;
        //}

        // Enumerate the routing extension global info
        //if (!g_ApiInterface.FaxEnumGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo, &dwNumMethods)) {
          //  fnWriteLogFile(TEXT("FaxEnumGlobalRoutingInfo() failed.  The error code is 0x%08x.  This is an error.  FaxEnumGlobalRoutingInfo() should succeed.\r\n"), GetLastError());
            // Disconnect from the fax server
            //g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        // Set the routing extension global info
        //(*pnNumCasesAttempted)++;

        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //for (dwIndex = 0; dwIndex < dwNumMethods; dwIndex++) {
            //if (!g_ApiInterface.FaxSetGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo[dwIndex])) {
              //  fnWriteLogFile(TEXT("FaxSetGlobalRoutingInfo() failed.  The error code is 0x%08x.  This is an error.  FaxSetGlobalRoutingInfo() should succeed.\r\n"), GetLastError());
//                break;
  //          }
    //    }

      //  if (dwIndex == dwNumMethods) {
        //    (*pnNumCasesPassed)++;

        //}

        //g_ApiInterface.FaxFreeBuffer(pRoutingInfo);

        // Disconnect from the fax server
//        g_ApiInterface.FaxClose(hFaxSvcHandle);
  //  }
fnWriteLogFile(TEXT("$$$ Summery for FaxSetGlobalRoutingInfo, Attempt %d, Pass %d, Fail %d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
}




VOID
fnFaxEnumRoutingMethods(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxEnumGlobalRoutingInfo()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE               hFaxSvcHandle;
    // hFaxPortHandle is the handle to a fax port
    HANDLE               hFaxPortHandle;
    // pFaxPortInfo is the pointer to the fax port info
    PFAX_PORT_INFO       pFaxPortInfo;
    // dwNumPorts is the number of fax ports
    DWORD                dwNumPorts;
    // dwDeviceId is the device id of the fax port
    DWORD                dwDeviceId;
    // szDeviceName is the device name of the fax port
    LPTSTR               szDeviceName;
    // pRoutingMethod is the pointer to the routing method data structures
    PFAX_ROUTING_METHOD  pRoutingMethods;
    // dwNumMethods is the number of routing methods
    DWORD                dwNumMethods;

    DWORD                dwIndex;
						
	TCHAR				 szRouteApiDll[MAX_PATH];

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxEnumRoutingMethods().\r\n"));

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    // Enumerate the fax ports
    if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not enum ports on server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    dwDeviceId = pFaxPortInfo[0].DeviceId;
    szDeviceName = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(pFaxPortInfo[0].DeviceName) + 1) * sizeof(TCHAR));
    lstrcpy(szDeviceName, pFaxPortInfo[0].DeviceName);

    // Free the fax port info
    g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not open port %d, The error code is 0x%08x.\r\n"),dwDeviceId, GetLastError());
        HeapFree(g_hHeap, 0, szDeviceName);
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    for (dwIndex = 0; dwIndex < 2; dwIndex++) {
        // Enumerate the routing methods
        (*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

        fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        if (!g_ApiInterface.FaxEnumRoutingMethods(hFaxPortHandle, &pRoutingMethods, &dwNumMethods)) {
            fnWriteLogFile(TEXT("FaxEnumRoutingMethods() failed.  The error code is 0x%08x.  This is an error.  FaxEnumRoutingMethods() should succeed.\r\n"), GetLastError());
        }
        else {
            if (pRoutingMethods == NULL) {
                fnWriteLogFile(TEXT("pRoutingMethods is NULL.  This is an error.  pRoutingMethods should not be NULL.\r\n"));
            }

            if (dwNumMethods != g_dwNumMethods) {
                fnWriteLogFile(TEXT("dwNumMethods is not g_dwNumMethods.  This is an error.  dwNumMethods should be g_dwNumMethods.\r\n"));
            }

            if ((pRoutingMethods != NULL) && (dwNumMethods == g_dwNumMethods)) {
                if (pRoutingMethods[g_dwIndexAPIMethod2].SizeOfStruct != sizeof(FAX_ROUTING_METHOD)) {
                    fnWriteLogFile(TEXT("SizeOfStruct: Received: %d, Expected: %d.\r\n"), pRoutingMethods[g_dwIndexAPIMethod2].SizeOfStruct, sizeof(FAX_ROUTING_METHOD));
                    goto FuncFailed;
                }

                if (pRoutingMethods[g_dwIndexAPIMethod2].DeviceId != dwDeviceId) {
                    fnWriteLogFile(TEXT("DeviceId: Received: 0x%08x, Expected: 0x%08x.\r\n"), pRoutingMethods[g_dwIndexAPIMethod2].DeviceId, dwDeviceId);
                    goto FuncFailed;
                }

                if ((dwIndex == 0) && (pRoutingMethods[g_dwIndexAPIMethod2].Enabled)) {
                    fnWriteLogFile(TEXT("Enabled: Received: FALSE, Expected: TRUE.\r\n"));
                    goto FuncFailed;
                }
                else if ((dwIndex == 1) && (!pRoutingMethods[g_dwIndexAPIMethod2].Enabled)) {
                    fnWriteLogFile(TEXT("Enabled: Received: TRUE, Expected: FALSE.\r\n"));
                    goto FuncFailed;
                }

                if (lstrcmp(pRoutingMethods[g_dwIndexAPIMethod2].DeviceName, szDeviceName)!=0) {
                    fnWriteLogFile(TEXT("DeviceName: Received: %s, Expected: %s.\r\n"), pRoutingMethods[g_dwIndexAPIMethod2].DeviceName, szDeviceName);
                    goto FuncFailed;
                }

                if (lstrcmp(pRoutingMethods[g_dwIndexAPIMethod2].Guid, ROUTEAPI_METHOD_GUID1)!=0) {
                    fnWriteLogFile(TEXT("Guid: Received: %s, Expected: %s.\r\n"), pRoutingMethods[g_dwIndexAPIMethod2].Guid, ROUTEAPI_METHOD_GUID1);
                    goto FuncFailed;
                }
				
                if (lstrcmp(pRoutingMethods[g_dwIndexAPIMethod2].FriendlyName, ROUTEAPI_METHOD_FRIENDLYNAME1)!=0) {
                    fnWriteLogFile(TEXT("FriendlyName: Received: %s, Expected: %s.\r\n"), pRoutingMethods[g_dwIndexAPIMethod2].FriendlyName, ROUTEAPI_METHOD_FRIENDLYNAME1);
                    goto FuncFailed;
                }

                ExpandEnvironmentStrings(ROUTEAPI_EXTENSION_IMAGENAME, szRouteApiDll, sizeof(szRouteApiDll) / sizeof(TCHAR));
                if (lstrcmp(pRoutingMethods[g_dwIndexAPIMethod2].ExtensionImageName, szRouteApiDll)!=0) {
                    fnWriteLogFile(TEXT("ExtensionImageName: Received: %s, Expected: %s.\r\n"), pRoutingMethods[g_dwIndexAPIMethod2].ExtensionImageName, szRouteApiDll);
                    goto FuncFailed;
                }

                if (lstrcmp(pRoutingMethods[g_dwIndexAPIMethod2].ExtensionFriendlyName, ROUTEAPI_EXTENSION_FRIENDLYNAME)!=0) {
                    fnWriteLogFile(TEXT("ExtensionFriendlyName: Received: %s, Expected: %s.\r\n"), pRoutingMethods[g_dwIndexAPIMethod2].ExtensionFriendlyName, ROUTEAPI_EXTENSION_FRIENDLYNAME);
                    goto FuncFailed;
                }

                if (pRoutingMethods[g_dwIndexAPIMethod1].SizeOfStruct != sizeof(FAX_ROUTING_METHOD)) {
                    fnWriteLogFile(TEXT("SizeOfStruct: Received: %d, Expected: %d.\r\n"), pRoutingMethods[g_dwIndexAPIMethod1].SizeOfStruct, sizeof(FAX_ROUTING_METHOD));
                    goto FuncFailed;
                }

                if (pRoutingMethods[g_dwIndexAPIMethod1].DeviceId != dwDeviceId) {
                    fnWriteLogFile(TEXT("DeviceId: Received: 0x%08x, Expected: 0x%08x.\r\n"), pRoutingMethods[g_dwIndexAPIMethod1].DeviceId, dwDeviceId);
                    goto FuncFailed;
                }

                if ((dwIndex == 0) && (pRoutingMethods[g_dwIndexAPIMethod1].Enabled)) {
                    fnWriteLogFile(TEXT("Enabled: Received: FALSE, Expected: TRUE.\r\n"));
                    goto FuncFailed;
                }
                else if ((dwIndex == 1) && (!pRoutingMethods[g_dwIndexAPIMethod1].Enabled)) {
                    fnWriteLogFile(TEXT("Enabled: Received: TRUE, Expected: FALSE.\r\n"));
                    goto FuncFailed;
                }

                if (lstrcmp(pRoutingMethods[g_dwIndexAPIMethod1].DeviceName, szDeviceName)!=0) {
                    fnWriteLogFile(TEXT("DeviceName: Received: %s, Expected: %s.\r\n"), pRoutingMethods[g_dwIndexAPIMethod1].DeviceName, szDeviceName);
                    goto FuncFailed;
                }

                if (lstrcmp(pRoutingMethods[g_dwIndexAPIMethod1].Guid, ROUTEAPI_METHOD_GUID2)!=0) {
                    fnWriteLogFile(TEXT("Guid: Received: %s, Expected: %s.\r\n"), pRoutingMethods[g_dwIndexAPIMethod1].Guid, ROUTEAPI_METHOD_GUID2);
                    goto FuncFailed;
                }

                if (lstrcmp(pRoutingMethods[g_dwIndexAPIMethod1].FriendlyName, ROUTEAPI_METHOD_FRIENDLYNAME2)!=0) {
                    fnWriteLogFile(TEXT("FriendlyName: Received: %s, Expected: %s.\r\n"), pRoutingMethods[g_dwIndexAPIMethod1].FriendlyName, ROUTEAPI_METHOD_FRIENDLYNAME2);
                    goto FuncFailed;
                }

                ExpandEnvironmentStrings(ROUTEAPI_EXTENSION_IMAGENAME, szRouteApiDll, sizeof(szRouteApiDll) / sizeof(TCHAR));
                if (lstrcmp(pRoutingMethods[g_dwIndexAPIMethod1].ExtensionImageName, szRouteApiDll)!=0) {
                    fnWriteLogFile(TEXT("ExtensionImageName: Received: %s, Expected: %s.\r\n"), pRoutingMethods[g_dwIndexAPIMethod1].ExtensionImageName, szRouteApiDll);
                    goto FuncFailed;
                }

                if (lstrcmp(pRoutingMethods[g_dwIndexAPIMethod1].ExtensionFriendlyName, ROUTEAPI_EXTENSION_FRIENDLYNAME)!=0) {
                    fnWriteLogFile(TEXT("ExtensionFriendlyName: Received: %s, Expected: %s.\r\n"), pRoutingMethods[g_dwIndexAPIMethod1].ExtensionFriendlyName, ROUTEAPI_EXTENSION_FRIENDLYNAME);
                    goto FuncFailed;
                }

                (*pnNumCasesPassed)++;
				dwFuncCasesPass++;
            }

FuncFailed:
            g_ApiInterface.FaxFreeBuffer(pRoutingMethods);
        }

        g_ApiInterface.FaxEnableRoutingMethod(hFaxPortHandle, ROUTEAPI_METHOD_GUID1, dwIndex ? FALSE : TRUE);
        g_ApiInterface.FaxEnableRoutingMethod(hFaxPortHandle, ROUTEAPI_METHOD_GUID2, dwIndex ? FALSE : TRUE);
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxPortHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxEnumRoutingMethods(NULL, &pRoutingMethods, &dwNumMethods)) {
        fnWriteLogFile(TEXT("FaxEnumRoutingMethods() returned TRUE.  This is an error.  FaxEnumRoutingMethods() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pRoutingMethods);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxEnumRoutingMethods() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pRoutingMethods = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxEnumRoutingMethods(hFaxPortHandle, NULL, &dwNumMethods)) {
        fnWriteLogFile(TEXT("FaxEnumRoutingMethods() returned TRUE.  This is an error.  FaxEnumRoutingMethods() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pRoutingMethods);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxEnumRoutingMethods() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("dwNumMethods = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxEnumRoutingMethods(hFaxPortHandle, &pRoutingMethods, NULL)) {
        fnWriteLogFile(TEXT("FaxEnumRoutingMethods() returned TRUE.  This is an error.  FaxEnumRoutingMethods() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pRoutingMethods);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxEnumRoutingMethods() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Disconnect from the fax port
    g_ApiInterface.FaxClose(hFaxPortHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxPortHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxEnumRoutingMethods(hFaxPortHandle, &pRoutingMethods, &dwNumMethods)) {
        fnWriteLogFile(TEXT("FaxEnumRoutingMethods() returned TRUE.  This is an error.  FaxEnumRoutingMethods() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pRoutingMethods);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxEnumRoutingMethods() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    HeapFree(g_hHeap, 0, szDeviceName);

//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> SERVER CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        // Enumerate the fax ports
//        if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
            // Disconnect from the fax server
  //          g_ApiInterface.FaxClose(hFaxSvcHandle);
    //        return;
      //  }

        //dwDeviceId = pFaxPortInfo[0].DeviceId;

        // Free the fax port info
        //g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);





        //if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
		//	fnWriteLogFile(TEXT("WHIS> ERROR: Can not open port %d, The error code is 0x%08x.\r\n"),dwDeviceId, GetLastError());
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
//            return;
  //      }
//
  //      (*pnNumCasesAttempted)++;

    //    fnWriteLogFile(TEXT("Remote hFaxPortHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
      //  if (!g_ApiInterface.FaxEnumRoutingMethods(hFaxPortHandle, &pRoutingMethods, &dwNumMethods)) {
        //    fnWriteLogFile(TEXT("FaxEnumRoutingMethods() failed.  The error code is 0x%08x.  This is an error.  FaxEnumRoutingMethods() should succeed.\r\n"), GetLastError());
        //}
        //else {
          //  g_ApiInterface.FaxFreeBuffer(pRoutingMethods);
//            (*pnNumCasesPassed)++;
  //      }

        // Disconnect from the fax port
    //    g_ApiInterface.FaxClose(hFaxPortHandle);

        // Disconnect from the fax server
//        g_ApiInterface.FaxClose(hFaxSvcHandle);
  //  }
fnWriteLogFile(TEXT("$$$ Summery for FaxEnumRoutingMethods, Attempt %d, Pass %d, Fail %d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
}

VOID
fnFaxEnableRoutingMethod(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxEnableRoutingMethod()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE               hFaxSvcHandle;
    // hFaxPortHandle is the handle to a fax port
    HANDLE               hFaxPortHandle;
    // pFaxPortInfo is the pointer to the fax port info
    PFAX_PORT_INFO       pFaxPortInfo;
    // dwNumPorts is the number of fax ports
    DWORD                dwNumPorts;
    // dwDeviceId is the device id of the fax port
    DWORD                dwDeviceId;
    // pRoutingMethod is the pointer to the routing method data structures
    PFAX_ROUTING_METHOD  pRoutingMethods;
    // dwNumMethods is the number of routing methods
    DWORD                dwNumMethods;

    // szRouteApiDll is the route api dll
    TCHAR                szRouteApiDll[MAX_PATH];
    // hInstance is the handle to the instance of the route api dll
    HINSTANCE            hInstance;
    // FaxRouteDeviceEnable is the pointer to the FaxRouteDeviceEnable() function
    FARPROC              FaxRouteDeviceEnable;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxEnableRoutingMethod().\r\n"));

    ExpandEnvironmentStrings(ROUTEAPI_EXTENSION_IMAGENAME, szRouteApiDll, sizeof(szRouteApiDll) / sizeof(TCHAR));
    if (!lstrcmpi(ROUTEAPI_EXTENSION_IMAGENAME, szRouteApiDll)) {
        return;
    }

    hInstance = LoadLibrary((LPCTSTR) szRouteApiDll);
    if (!hInstance) {
        return;
    }

    FaxRouteDeviceEnable = (FARPROC) GetProcAddress(hInstance, "FaxRouteDeviceEnable");
    if (!FaxRouteDeviceEnable) {
        FreeLibrary(hInstance);
        return;
    }

	// Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    // Enumerate the fax ports
    if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not enum ports on server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    dwDeviceId = pFaxPortInfo[0].DeviceId;

    // Free the fax port info
    g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not open port %d, The error code is 0x%08x.\r\n"),dwDeviceId, GetLastError());
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        FreeLibrary(hInstance);
        return;
    }

    // Enable the routing method
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxEnableRoutingMethod(hFaxPortHandle, ROUTEAPI_METHOD_GUID1, TRUE)) {
        fnWriteLogFile(TEXT("FaxEnableRoutingMethod() failed.  The error code is 0x%08x.  This is an error.  FaxEnableRoutingMethod() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!FaxRouteDeviceEnable(ROUTEAPI_METHOD_GUID1_W, dwDeviceId, -1)) {
            fnWriteLogFile(TEXT("Enabled: Received: FALSE, Expected: TRUE.\r\n"));
        }
        else {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
        }
    }

    // Disable the routing method
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxEnableRoutingMethod(hFaxPortHandle, ROUTEAPI_METHOD_GUID1, FALSE)) {
        fnWriteLogFile(TEXT("FaxEnableRoutingMethod() failed.  The error code is 0x%08x.  This is an error.  FaxEnableRoutingMethod() should succeed.\r\n"), GetLastError());
    }
    else {
        if (FaxRouteDeviceEnable(ROUTEAPI_METHOD_GUID1_W, dwDeviceId, -1)) {
            fnWriteLogFile(TEXT("Enabled: Received: TRUE, Expected: FALSE.\r\n"));
        }
        else {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
        }
    }

    FreeLibrary(hInstance);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxPortHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxEnableRoutingMethod(NULL, ROUTEAPI_METHOD_GUID1, FALSE)) {
        fnWriteLogFile(TEXT("FaxEnableRoutingMethod() returned TRUE.  This is an error.  FaxEnableRoutingMethod() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxEnableRoutingMethod() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("ROUTEAPI_METHOD_GUID1 = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxEnableRoutingMethod(hFaxPortHandle, NULL, FALSE)) {
        fnWriteLogFile(TEXT("FaxEnableRoutingMethod() returned TRUE.  This is an error.  FaxEnableRoutingMethod() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxEnableRoutingMethod() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid ROUTEAPI_METHOD_GUID1.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxEnableRoutingMethod(hFaxPortHandle, ROUTEAPI_INVALID_GUID, FALSE)) {
        fnWriteLogFile(TEXT("FaxEnableRoutingMethod() returned TRUE.  This is an error.  FaxEnableRoutingMethod() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), ERROR_INVALID_DATA);
    }
    else if (GetLastError() != ERROR_INVALID_DATA) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxEnableRoutingMethod() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_DATA);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Disconnect from the fax port
    g_ApiInterface.FaxClose(hFaxPortHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxPortHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxEnableRoutingMethod(hFaxPortHandle, ROUTEAPI_METHOD_GUID1, FALSE)) {
        fnWriteLogFile(TEXT("FaxEnableRoutingMethod() returned TRUE.  This is an error.  FaxEnableRoutingMethod() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxEnableRoutingMethod() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> SERVER CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        // Enumerate the fax ports
        //if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //dwDeviceId = pFaxPortInfo[0].DeviceId;

        // Free the fax port info
        //g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

        //if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
//            return;
  //      }

    //    if (!g_ApiInterface.FaxEnumRoutingMethods(hFaxPortHandle, &pRoutingMethods, &dwNumMethods)) {
            // Disconnect from the fax port
      //      g_ApiInterface.FaxClose(hFaxPortHandle);
            // Disconnect from the fax server
        //    g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //(*pnNumCasesAttempted)++;

        //fnWriteLogFile(TEXT("Remote hFaxPortHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxEnableRoutingMethod(hFaxPortHandle, pRoutingMethods[g_dwIndexAPIMethod1].Guid, pRoutingMethods[g_dwIndexAPIMethod1].Enabled)) {
            //fnWriteLogFile(TEXT("FaxEnableRoutingMethod() failed.  The error code is 0x%08x.  This is an error.  FaxEnableRoutingMethod() should succeed.\r\n"), GetLastError());
        //}
        //else {
            //(*pnNumCasesPassed)++;
        //}

        //g_ApiInterface.FaxFreeBuffer(pRoutingMethods);

        // Disconnect from the fax port
        //g_ApiInterface.FaxClose(hFaxPortHandle);

        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxEnableRoutingMethod, Attempt %d, Pass %d, Fail %d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
}

VOID
fnFaxGetRoutingInfo(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxGetRoutingInfo()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE               hFaxSvcHandle;
    // hFaxPortHandle is the handle to a fax port
    HANDLE               hFaxPortHandle;
    // pFaxPortInfo is the pointer to the fax port info
    PFAX_PORT_INFO       pFaxPortInfo;
    // dwNumPorts is the number of fax ports
    DWORD                dwNumPorts;
    // dwDeviceId is the device id of the fax port
    DWORD                dwDeviceId;
    // pRoutingMethod is the pointer to the routing method data structures
    PFAX_ROUTING_METHOD  pRoutingMethods;
    // dwNumMethods is the number of routing methods
    DWORD                dwNumMethods;
    BOOL                 bEnabled;

    // szRouteApiDll is the route api dll
    TCHAR                szRouteApiDll[MAX_PATH];
    // hInstance is the handle to the instance of the route api dll
    HINSTANCE            hInstance;
    // FaxRouteSetRoutingInfo is the pointer to the FaxRouteSetRoutingInfo() function
    FARPROC              FaxRouteSetRoutingInfo;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

    DWORD                dwGetRoutingInfo;
    DWORD                dwSetRoutingInfo;
    LPBYTE               RoutingInfo;
    DWORD                dwRoutingInfoSize;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxGetRoutingInfo().\r\n"));

    ExpandEnvironmentStrings(ROUTEAPI_EXTENSION_IMAGENAME, szRouteApiDll, sizeof(szRouteApiDll) / sizeof(TCHAR));
    if (!lstrcmpi(ROUTEAPI_EXTENSION_IMAGENAME, szRouteApiDll)) {
        return;
    }

    hInstance = LoadLibrary((LPCTSTR) szRouteApiDll);
    if (!hInstance) {
        return;
    }

    FaxRouteSetRoutingInfo = (FARPROC) GetProcAddress(hInstance, "FaxRouteSetRoutingInfo");
    if (!FaxRouteSetRoutingInfo) {
        FreeLibrary(hInstance);
        return;
    } 


    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        FreeLibrary(hInstance);
        return;
    }
	else	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    
	
	// Enumerate the fax ports
    if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not enum ports on server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        FreeLibrary(hInstance);
        return;
    }

    dwDeviceId = pFaxPortInfo[0].DeviceId;

    // Free the fax port info
    g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not open port %d, The error code is 0x%08x.\r\n"),dwDeviceId, GetLastError());
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        FreeLibrary(hInstance);
        return;
    }

    // Set the routing info
    dwSetRoutingInfo = ERROR_INVALID_PARAMETER;
    FaxRouteSetRoutingInfo(ROUTEAPI_METHOD_GUID1_W, dwDeviceId, (LPBYTE) &dwSetRoutingInfo, sizeof(DWORD));

    // Get the routing info
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxGetRoutingInfo(hFaxPortHandle, ROUTEAPI_METHOD_GUID1, &RoutingInfo, &dwRoutingInfoSize)) {
        fnWriteLogFile(TEXT("FaxGetRoutingInfo() failed.  The error code is 0x%08x.  This is an error.  FaxGetRoutingInfo() should succeed.\r\n"), GetLastError());
    }
    else {
        dwGetRoutingInfo = (DWORD) *(LPDWORD *) RoutingInfo;
        if (dwGetRoutingInfo != dwSetRoutingInfo) {
            fnWriteLogFile(TEXT("RoutingInfo: Received: 0x%08x, Expected: 0x%08x.\r\n"), dwGetRoutingInfo, dwSetRoutingInfo);
        }
        else {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
        }

        g_ApiInterface.FaxFreeBuffer(RoutingInfo);
    }

    // Set the routing info
    FaxRouteSetRoutingInfo(ROUTEAPI_METHOD_GUID1_W, dwDeviceId, NULL, 0);

    // Get the routing info
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxGetRoutingInfo(hFaxPortHandle, ROUTEAPI_METHOD_GUID1, &RoutingInfo, &dwRoutingInfoSize)) {
        fnWriteLogFile(TEXT("FaxGetRoutingInfo() failed.  The error code is 0x%08x.  This is an error.  FaxGetRoutingInfo() should succeed.\r\n"), GetLastError());
    }
    else {
        dwGetRoutingInfo = (DWORD) *(LPDWORD *) RoutingInfo;
        if (dwGetRoutingInfo != 0) {
            fnWriteLogFile(TEXT("RoutingInfo: Received: 0x%08x, Expected: 0.\r\n"), dwGetRoutingInfo);
        }
        else {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
        }

        g_ApiInterface.FaxFreeBuffer(RoutingInfo);
    }

    FreeLibrary(hInstance);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxPortHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxGetRoutingInfo(NULL, ROUTEAPI_METHOD_GUID1, &RoutingInfo, &dwRoutingInfoSize)) {
        fnWriteLogFile(TEXT("FaxGetRoutingInfo() returned TRUE.  This is an error.  FaxGetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(RoutingInfo);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxGetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("ROUTEAPI_METHOD_GUID1 = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxGetRoutingInfo(hFaxPortHandle, NULL, &RoutingInfo, &dwRoutingInfoSize)) {
        fnWriteLogFile(TEXT("FaxGetRoutingInfo() returned TRUE.  This is an error.  FaxGetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(RoutingInfo);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxGetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid ROUTEAPI_METHOD_GUID1.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxGetRoutingInfo(hFaxPortHandle, ROUTEAPI_INVALID_GUID, &RoutingInfo, &dwRoutingInfoSize)) {
        fnWriteLogFile(TEXT("FaxGetRoutingInfo() returned TRUE.  This is an error.  FaxGetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), ERROR_INVALID_DATA);
        g_ApiInterface.FaxFreeBuffer(RoutingInfo);
    }
    else if (GetLastError() != ERROR_INVALID_DATA) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxGetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_DATA);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("RoutingInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxGetRoutingInfo(hFaxPortHandle, ROUTEAPI_METHOD_GUID1, NULL, &dwRoutingInfoSize)) {
        fnWriteLogFile(TEXT("FaxGetRoutingInfo() returned TRUE.  This is an error.  FaxGetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(RoutingInfo);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxGetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("RoutingInfoSize = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxGetRoutingInfo(hFaxPortHandle, ROUTEAPI_METHOD_GUID1, &RoutingInfo, NULL)) {
        fnWriteLogFile(TEXT("FaxGetRoutingInfo() returned TRUE.  This is an error.  FaxGetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(RoutingInfo);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxGetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Disconnect from the fax port
    g_ApiInterface.FaxClose(hFaxPortHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxPortHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxGetRoutingInfo(hFaxPortHandle, ROUTEAPI_METHOD_GUID1, &RoutingInfo, &dwRoutingInfoSize)) {
        fnWriteLogFile(TEXT("FaxGetRoutingInfo() returned TRUE.  This is an error.  FaxGetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(RoutingInfo);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxGetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    //if (szServerName) {
	//	fnWriteLogFile(TEXT("WHIS> SERVER CASE(s):\r\n"));
        // Connect to the fax server
      //  if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
        //    return;
//        }

        // Enumerate the fax ports
  //      if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
            // Disconnect from the fax server
    //        g_ApiInterface.FaxClose(hFaxSvcHandle);
      //      return;
//        }

  //      dwDeviceId = pFaxPortInfo[0].DeviceId;

        // Free the fax port info
    //    g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

      //  if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
            // Disconnect from the fax server
        //    g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //if (!g_ApiInterface.FaxEnumRoutingMethods(hFaxPortHandle, &pRoutingMethods, &dwNumMethods)) {
            // Disconnect from the fax port
          //  g_ApiInterface.FaxClose(hFaxPortHandle);
            // Disconnect from the fax server
//            g_ApiInterface.FaxClose(hFaxSvcHandle);
  //          return;
    //    }

      //  (*pnNumCasesAttempted)++;

//        fnWriteLogFile(TEXT("Remote hFaxPortHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
  //      if (!g_ApiInterface.FaxGetRoutingInfo(hFaxPortHandle, pRoutingMethods[g_dwIndexAPIMethod1].Guid, &RoutingInfo, &dwRoutingInfoSize)) {
    //        fnWriteLogFile(TEXT("FaxGetRoutingInfo() failed.  The error code is 0x%08x.  This is an error.  FaxGetRoutingInfo() should succeed.\r\n"), GetLastError());
      //  }
//        else {
  //          g_ApiInterface.FaxFreeBuffer(RoutingInfo);
    //        (*pnNumCasesPassed)++;

      //  }

        //g_ApiInterface.FaxFreeBuffer(pRoutingMethods);

        // Disconnect from the fax port
        //g_ApiInterface.FaxClose(hFaxPortHandle);

        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxGetRoutingInfo, Attempt %d, Pass %d, Fail %d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
}

VOID
fnFaxSetRoutingInfo(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxSetRoutingInfo()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE               hFaxSvcHandle;
    // hFaxPortHandle is the handle to a fax port
    HANDLE               hFaxPortHandle;
    // pFaxPortInfo is the pointer to the fax port info
    PFAX_PORT_INFO       pFaxPortInfo;
    // dwNumPorts is the number of fax ports
    DWORD                dwNumPorts;
    // dwDeviceId is the device id of the fax port
    DWORD                dwDeviceId;
    // pRoutingMethod is the pointer to the routing method data structures
    PFAX_ROUTING_METHOD  pRoutingMethods;
    // dwNumMethods is the number of routing methods
    DWORD                dwNumMethods;
    BOOL                 bEnabled;

    // szRouteApiDll is the route api dll
    TCHAR                szRouteApiDll[MAX_PATH];
    // hInstance is the handle to the instance of the route api dll
    HINSTANCE            hInstance;
    // FaxRouteGetRoutingInfo is the pointer to the FaxRouteGetRoutingInfo() function
    FARPROC              FaxRouteGetRoutingInfo;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

    DWORD                dwGetRoutingInfo;
    DWORD                dwSetRoutingInfo;
    LPBYTE               RoutingInfo;
    DWORD                dwRoutingInfoSize;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxSetRoutingInfo().\r\n"));

    ExpandEnvironmentStrings(ROUTEAPI_EXTENSION_IMAGENAME, szRouteApiDll, sizeof(szRouteApiDll) / sizeof(TCHAR));
    if (!lstrcmpi(ROUTEAPI_EXTENSION_IMAGENAME, szRouteApiDll)) {
        return;
    }

    hInstance = LoadLibrary((LPCTSTR) szRouteApiDll);
    if (!hInstance) {
        return;
    }

    FaxRouteGetRoutingInfo = (FARPROC) GetProcAddress(hInstance, "FaxRouteGetRoutingInfo");
    if (!FaxRouteGetRoutingInfo) {
        FreeLibrary(hInstance);
        return;
    }

	// Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    // Enumerate the fax ports
    if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not enum ports on server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }


    dwDeviceId = pFaxPortInfo[0].DeviceId;

    // Free the fax port info
    g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not open port %d, The error code is 0x%08x.\r\n"),dwDeviceId, GetLastError());
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        FreeLibrary(hInstance);
        return;
    }

    // Set the routing info
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    dwSetRoutingInfo = ERROR_INVALID_PARAMETER;
    if (!g_ApiInterface.FaxSetRoutingInfo(hFaxPortHandle, ROUTEAPI_METHOD_GUID1, (LPBYTE) &dwSetRoutingInfo, sizeof(DWORD))) {
        fnWriteLogFile(TEXT("FaxSetRoutingInfo() failed.  The error code is 0x%08x.  This is an error.  FaxSetRoutingInfo() should succeed.\r\n"), GetLastError());
    }
    else {
        FaxRouteGetRoutingInfo(ROUTEAPI_METHOD_GUID1_W, dwDeviceId, &dwGetRoutingInfo, NULL);

        if (dwGetRoutingInfo != dwSetRoutingInfo) {
            fnWriteLogFile(TEXT("RoutingInfo: Received: 0x%08x, Expected: 0x%08x.\r\n"), dwGetRoutingInfo, dwSetRoutingInfo);
        }
        else {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
        }
    }

    FreeLibrary(hInstance);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("hFaxPortHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSetRoutingInfo(NULL, ROUTEAPI_METHOD_GUID1, (LPBYTE) &dwSetRoutingInfo, sizeof(DWORD))) {
        fnWriteLogFile(TEXT("FaxSetRoutingInfo() returned TRUE.  This is an error.  FaxSetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("ROUTEAPI_METHOD_GUID1 = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSetRoutingInfo(hFaxPortHandle, NULL, (LPBYTE) &dwSetRoutingInfo, sizeof(DWORD))) {
        fnWriteLogFile(TEXT("FaxSetRoutingInfo() returned TRUE.  This is an error.  FaxSetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid ROUTEAPI_METHOD_GUID1.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSetRoutingInfo(hFaxPortHandle, ROUTEAPI_INVALID_GUID, (LPBYTE) &dwSetRoutingInfo, sizeof(DWORD))) {
        fnWriteLogFile(TEXT("FaxSetRoutingInfo() returned TRUE.  This is an error.  FaxSetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), ERROR_INVALID_DATA);
    }
    else if (GetLastError() != ERROR_INVALID_DATA) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_DATA);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Disconnect from the fax port
    g_ApiInterface.FaxClose(hFaxPortHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxPortHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSetRoutingInfo(hFaxPortHandle, ROUTEAPI_METHOD_GUID1, (LPBYTE) &dwSetRoutingInfo, sizeof(DWORD))) {
        fnWriteLogFile(TEXT("FaxSetRoutingInfo() returned TRUE.  This is an error.  FaxSetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> SERVER CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        // Enumerate the fax ports
//        if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
            // Disconnect from the fax server
  //          g_ApiInterface.FaxClose(hFaxSvcHandle);
    //        return;
        //}

        //dwDeviceId = pFaxPortInfo[0].DeviceId;

        // Free the fax port info
        //g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

        //if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
//            return;
  //      }

    //    if (!g_ApiInterface.FaxEnumRoutingMethods(hFaxPortHandle, &pRoutingMethods, &dwNumMethods)) {
      //      // Disconnect from the fax port
        //    g_ApiInterface.FaxClose(hFaxPortHandle);
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

//        if (!g_ApiInterface.FaxGetRoutingInfo(hFaxPortHandle, pRoutingMethods[g_dwIndexAPIMethod1].Guid, &RoutingInfo, &dwRoutingInfoSize)) {
  //          g_ApiInterface.FaxFreeBuffer(pRoutingMethods);
            // Disconnect from the fax port
    //        g_ApiInterface.FaxClose(hFaxPortHandle);
            // Disconnect from the fax server
      //      g_ApiInterface.FaxClose(hFaxSvcHandle);
        //}

        //(*pnNumCasesAttempted)++;
        //fnWriteLogFile(TEXT("Remote hFaxPortHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxSetRoutingInfo(hFaxPortHandle, pRoutingMethods[g_dwIndexAPIMethod1].Guid, RoutingInfo, dwRoutingInfoSize)) {
            //fnWriteLogFile(TEXT("FaxSetRoutingInfo() failed.  The error code is 0x%08x.  This is an error.  FaxSetRoutingInfo() should succeed.\r\n"), GetLastError());
        //}
        //else {
          //  (*pnNumCasesPassed)++;

        //}

        //g_ApiInterface.FaxFreeBuffer(RoutingInfo);

        //g_ApiInterface.FaxFreeBuffer(pRoutingMethods);

        // Disconnect from the fax port
        //g_ApiInterface.FaxClose(hFaxPortHandle);

        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxSetRoutingInfo, Attempt %d, Pass %d, Fail %d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
}


// count number of methods, return by referance: number of methods, index of API method 1/2 (if not found, their index will be 0)
BOOL
fnWhisFaxCountRoutingMethods(
    LPCTSTR  szServerName,
	PDWORD pdwMethodsCount,			// number of methods
	PDWORD pdwIndexAPIMethod1,		// index of API-Method 1
	PDWORD pdwIndexAPIMethod2		// index of API-Method 2

)
/*++

Routine Description:

   Count global methods 

Return Value:

Succeed/Fail


--*/
{
	
    // hFaxSvcHandle is the handle to the fax server
    HANDLE               hFaxSvcHandle;
    // hFaxPortHandle is the handle to a fax port
    HANDLE               hFaxPortHandle;
    // pFaxPortInfo is the pointer to the fax port info
    PFAX_PORT_INFO       pFaxPortInfo;

	// pRoutingInfo is the pointer to the global routing structures
    PFAX_GLOBAL_ROUTING_INFO  pRoutingInfo;

		// dwNumPorts is the number of fax ports
    DWORD                dwNumPorts;
    // dwDeviceId is the device id of the fax port
    DWORD                dwDeviceId;
    // szDeviceName is the device name of the fax port
    LPTSTR               szDeviceName;
    // pRoutingMethod is the pointer to the routing method data structures
    PFAX_ROUTING_METHOD  pRoutingMethods;
    // dwNumMethods is the number of routing methods
    DWORD                dwNumMethods;
	
	// szRouteApiDll is the route api dll
    TCHAR                szRouteApiDll[MAX_PATH];
	// index
    DWORD                dwIndex;
	// index for enumerating methods
	DWORD				 dwIndexAPI;

    fnWriteLogFile(TEXT("WHIS> UTIL SERVICE: Counting global methods...\r\n"));



	



    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> UTIL FUNCTION ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		(*pdwMethodsCount)=0;
        return FALSE;
    }
	else	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    // Enumerate the fax ports
    if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> UTIL FUNCTION ERROR: Can not enum ports on server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		(*pdwMethodsCount)=0;
        return FALSE;
    }

    // allocate heap for device name
	dwDeviceId = pFaxPortInfo[0].DeviceId;
    szDeviceName = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(pFaxPortInfo[0].DeviceName) + 1) * sizeof(TCHAR));
    lstrcpy(szDeviceName, pFaxPortInfo[0].DeviceName);

    // Free the fax port info
    g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

    // open port
	if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
		fnWriteLogFile(TEXT("WHIS> UTIL FUNCTION ERROR: Can not open port %d, The error code is 0x%08x.\r\n"),dwDeviceId, GetLastError());
		HeapFree(g_hHeap, 0, szDeviceName);
		g_ApiInterface.FaxClose(hFaxSvcHandle);
		(*pdwMethodsCount)=0;
		return FALSE;
    }

   	// enumarate global methods
	if (!g_ApiInterface.FaxEnumGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo, &dwNumMethods)) {
        fnWriteLogFile(TEXT("WHIS> UTIL FUNCTION ERROR: Could not enum global routing extensions, The error code is 0x%08x.  This is an error.  FaxEnumGlobalRoutingInfo() should succeed.\r\n"), GetLastError());
		HeapFree(g_hHeap, 0, szDeviceName);
		g_ApiInterface.FaxClose(hFaxSvcHandle);
		(*pdwMethodsCount)=0;
		return FALSE;
    }

	// get the index number of the 1st API extension and the 2nd API extension
	for (dwIndexAPI=0;dwIndexAPI<g_dwNumMethods;dwIndexAPI++)	{
		if (lstrcmp(pRoutingInfo[dwIndexAPI].Guid, ROUTEAPI_METHOD_GUID1)==0) {
		(*pdwIndexAPIMethod1)=dwIndexAPI;
		}
		
		if (lstrcmp(pRoutingInfo[dwIndexAPI].Guid, ROUTEAPI_METHOD_GUID2)==0) {
		(*pdwIndexAPIMethod2)=dwIndexAPI;
		}
	}
	
	HeapFree(g_hHeap, 0, szDeviceName);
	g_ApiInterface.FaxClose(hFaxSvcHandle);
	(*pdwMethodsCount)=dwNumMethods;
	return TRUE;
}










BOOL WINAPI
FaxAPIDllTest(
	LPCWSTR  szWhisPhoneNumberW,
	LPCSTR   szWhisPhoneNumberA,
    LPCWSTR  szServerNameW,
    LPCSTR   szServerNameA,
    UINT     nNumCasesLocal,
    UINT     nNumCasesServer,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	DWORD	 dwTestMode
)
{
    LPCTSTR  szServerName;
    UINT     nNumCases;
	DWORD	 dwNumMethods;
	DWORD	dwIndexAPIMethod1=0;
	DWORD	dwIndexAPIMethod2=0;

#ifdef UNICODE
    szServerName = szServerNameW;
#else
    szServerName = szServerNameA;
#endif

    if (szServerName) {
        nNumCases = nNumCasesServer;
		fnWriteLogFile(TEXT("WHIS> REMOTE SERVER MODE:\r\n"));
    }
    else {
        nNumCases = nNumCasesLocal;
    }

	
	
	// routing extension
	// -----------------

	// count number of global methods before adding API methods
	if (!fnWhisFaxCountRoutingMethods(szServerName,&dwNumMethods,&dwIndexAPIMethod1,&dwIndexAPIMethod2))	{
		fnWriteLogFile(TEXT("Could not count routing extensions, error code is The error code is 0x%08x\r\n"),GetLastError());
	}
	
	fnWriteLogFile(TEXT("WHIS> number of global methods: %d.\r\n"),dwNumMethods);
	fnWriteLogFile(TEXT("WHIS> 1st API Method index: %d.\r\n"),dwIndexAPIMethod1);
	fnWriteLogFile(TEXT("WHIS> 2nd API Method index: %d.\r\n"),dwIndexAPIMethod2);


									// this program assumes that
	g_dwNumMethods=dwNumMethods+2;  // global number of methods should be 2 more then current found 
									// (2 more extension will be added in the next 2 lines of this section)
							
	

	// FaxRegisterRoutingExtension()
    fnFaxRegisterRoutingExtension(szServerName, pnNumCasesAttempted, pnNumCasesPassed);
	
	// add route api extension DLL
	fnAddRouteApiExtension();
    
	// stop the service
	if (!fnStopFaxSvc()) {
        fnWriteLogFile(TEXT("Could not stop the Fax Service.\r\n"));
        return FALSE;
    }

	// re-count number of global methods (new value should be 2 more then previous count)
	if (!fnWhisFaxCountRoutingMethods(szServerName,&dwNumMethods,&dwIndexAPIMethod1,&dwIndexAPIMethod2))	{
		fnWriteLogFile(TEXT("Could not count routing extensions, error code is The error code is 0x%08x\r\n"),GetLastError());
	}

	fnWriteLogFile(TEXT("WHIS> number of global methods: %d.\r\n"),dwNumMethods);
	fnWriteLogFile(TEXT("WHIS> 1st API Method index: %d.\r\n"),dwIndexAPIMethod1);
	fnWriteLogFile(TEXT("WHIS> 2nd API Method index: %d.\r\n"),dwIndexAPIMethod2);

	
	// test if there are 2 new methods to do the test on
	if (g_dwNumMethods==dwNumMethods && dwIndexAPIMethod1 > 0 && dwIndexAPIMethod2 > 0)	{
		g_dwIndexAPIMethod1=dwIndexAPIMethod1;
		g_dwIndexAPIMethod2=dwIndexAPIMethod2;
	
		 
		// FaxEnumGlobalRoutingInfo()
		fnFaxEnumGlobalRoutingInfo(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

		// FaxSetGlobalRoutingInfo()
		if (dwTestMode == WHIS_TEST_MODE_LIMITS)	{
			fnFaxSetGlobalRoutingInfo(szServerName, pnNumCasesAttempted, pnNumCasesPassed,TRUE);
		}
		else	{
			fnFaxSetGlobalRoutingInfo(szServerName, pnNumCasesAttempted, pnNumCasesPassed,FALSE);
		}


		// FaxEnumRoutingMethods()
		fnFaxEnumRoutingMethods(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

		// FaxEnableRoutingMethod()
		fnFaxEnableRoutingMethod(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

		// FaxGetRoutingInfo()
		fnFaxGetRoutingInfo(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

		// FaxSetRoutingInfo()
		fnFaxSetRoutingInfo(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

		if (!fnStopFaxSvc()) {
			fnWriteLogFile(TEXT("Could not stop the Fax Service.\r\n"));
			return FALSE;
		}
	} // of do actual routeext testing
	else	{
		// incorrect number of methods, or 0 indexes for the API methods
		fnWriteLogFile(TEXT("WHIS> ERROR: Incorrect Methods Configuration, WILL NOT TEST\r\n"));
	}


	// remove API extension
	fnRemoveRouteApiExtension();
	

	// service provider
	// ----------------

	// FaxRegisterServiceProvider()
    fnFaxRegisterServiceProvider(szServerName, pnNumCasesAttempted, pnNumCasesPassed);
	


    if ((*pnNumCasesAttempted == nNumCases) && (*pnNumCasesPassed == *pnNumCasesAttempted)) {
        return TRUE;
    }
    else {
        return FALSE;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legacywin32\xml\printapi\printapi_fromw2k.c ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

  printapi.c

Abstract:

  PrintApi: Fax API Test Dll: Client Print APIs
    1) FaxStartPrintJob()
    2) FaxPrintCoverPage()
    3) FaxSendDocument()
    4) FaxSendDocumentForBroadcast()

Author:

  Steven Kehrli (steveke) 8/28/1998

--*/

/*++

  Whistler Version:

  Lior Shmueli (liors) 23/11/2000

 ++*/

#include <wtypes.h>

#include "dllapi.h"

// g_hHeap is the handle to the heap
HANDLE           g_hHeap = NULL;
// g_ApiInterface is the API_INTERFACE structure
API_INTERFACE    g_ApiInterface;
// fnWriteLogFile is the pointer to the function to write a string to the log file
PFNWRITELOGFILE  fnWriteLogFile = NULL;

// whistler phone number
//LPCTSTR  g_szWhisPhoneNumber;
LPCTSTR		   g_szWhisPhoneNumber=NULL;
BOOL		   g_bRealSend=FALSE;


DWORD
DllEntry(
    HINSTANCE  hInstance,
    DWORD      dwReason,
    LPVOID     pContext
)
/*++

Routine Description:

  DLL entry point

Arguments:

  hInstance - handle to the module
  dwReason - indicates the reason for being called
  pContext - context

Return Value:

  TRUE on success

--*/
{
    return TRUE;
}

VOID WINAPI
FaxAPIDllInit(
    HANDLE            hHeap,
    API_INTERFACE     ApiInterface,
    PFNWRITELOGFILEW  pfnWriteLogFileW,
    PFNWRITELOGFILEA  pfnWriteLogFileA
)
{
    // Set g_hHeap
    g_hHeap = hHeap;
    // Set g_ApiInterface
    g_ApiInterface = ApiInterface;
#ifdef UNICODE
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileW;
#else
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileA;
#endif

    return;
}

VOID
fnFaxStartPrintJob(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxStartPrintJob()

Return Value:

  None

--*/
{
    // FaxPrintInfo is the fax print info
    FAX_PRINT_INFO    FaxPrintInfo;
    // dwFaxId is the fax job id
    DWORD             dwFaxId;
    // FaxContextInfo is the fax context
    FAX_CONTEXT_INFO  FaxContextInfo;
    
	// not used, since all suite can be used on a remote printer...
	// szRemotePrinter is the name of the remote fax printer
    // LPTSTR            szRemotePrinter;
	//

	// flag for fax abortion
	BOOL				bAborted=FALSE;
	// szFaxPrinterName is the name of the fax printer
    LPTSTR            szFaxPrinterName=NULL;
	// szFaxServerName is the name of the fax server, as it should be on the FaxConextInfo struct
    TCHAR            szFaxServerName[MAX_PATH];

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxStartPrintJob().\r\n"));

    ZeroMemory(&FaxPrintInfo, sizeof(FAX_PRINT_INFO));
    FaxPrintInfo.SizeOfStruct = sizeof(FAX_PRINT_INFO);
    FaxPrintInfo.RecipientNumber = g_szWhisPhoneNumber;

	fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);
	
	if (szServerName) {

        szFaxPrinterName = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(szServerName) + 7) * sizeof(TCHAR));
          lstrcpy(szFaxPrinterName, TEXT("\\\\"));
          lstrcat(szFaxPrinterName, szServerName);
		  lstrcpy(szFaxServerName,szFaxPrinterName);
		  lstrcat(szFaxPrinterName, TEXT("\\"));
          lstrcat(szFaxPrinterName, TEXT(WHIS_FAX_PRINTER_NAME));
	}
	  else {
		  szFaxPrinterName = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(szServerName) + 7) * sizeof(TCHAR));
		  lstrcpy(szFaxPrinterName, TEXT(WHIS_FAX_PRINTER_NAME));
		  lstrcpy(szFaxServerName,TEXT("Should be NULL"));

	  }

	  fnWriteLogFile(TEXT("WHIS> Fax Printer name is: %s\r\n"), szFaxPrinterName);

      ZeroMemory(&FaxContextInfo, sizeof(FAX_CONTEXT_INFO));
      FaxContextInfo.SizeOfStruct = sizeof(FAX_CONTEXT_INFO);

    // Start a fax
      (*pnNumCasesAttempted)++;
	  dwFuncCasesAtt++;
      fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
      if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
          fnWriteLogFile(TEXT("FaxStartPrintJob() failed.  The error code is 0x%08x.  This is an error.  FaxStartPrintJob() should succeed.\r\n"), GetLastError());
	  }
      else {
          if (FaxContextInfo.hDC == NULL) {
              fnWriteLogFile(TEXT("hDC is NULL.  This is an error.  hDC should not be NULL.\r\n"));
              AbortDoc(FaxContextInfo.hDC);
			  DeleteDC(FaxContextInfo.hDC);
			  bAborted=TRUE;
          }

          if ((szServerName && lstrcmp(FaxContextInfo.ServerName,szFaxServerName) !=0) || (!szServerName && FaxContextInfo.ServerName[0])) {
              fnWriteLogFile(TEXT("ServerName: Received: %s, Expected: %s.\r\n"), FaxContextInfo.ServerName, szFaxServerName);
              AbortDoc(FaxContextInfo.hDC);
  			DeleteDC(FaxContextInfo.hDC);
  			bAborted=TRUE;
          }
	  	if (!bAborted)
		{
	  		AbortDoc(FaxContextInfo.hDC);
	  		DeleteDC(FaxContextInfo.hDC);
	  		(*pnNumCasesPassed)++;
	  		dwFuncCasesPass++;
		} 
	  	
	  }

      (*pnNumCasesAttempted)++;
	  dwFuncCasesAtt++;
      fnWriteLogFile(TEXT("Invalid szFaxPrinterName.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
      if (g_ApiInterface.FaxStartPrintJob(TEXT("InvalidFaxPrinterName"), &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
          fnWriteLogFile(TEXT("FaxStartPrintJob() returned TRUE.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PRINTER_NAME (0x%08x).\r\n"), ERROR_INVALID_PRINTER_NAME);
           //End this fax
          AbortDoc(FaxContextInfo.hDC);
          DeleteDC(FaxContextInfo.hDC);
      }
      else if (GetLastError() != ERROR_INVALID_PRINTER_NAME) {
          fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PRINTER_NAME (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PRINTER_NAME);
      }
      else {
          (*pnNumCasesPassed)++;
		  dwFuncCasesPass++;
      }

	  (*pnNumCasesAttempted)++;
	  dwFuncCasesAtt++;
      fnWriteLogFile(TEXT("pFaxPrintInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
      if (g_ApiInterface.FaxStartPrintJob(TEXT("Fax"), NULL, &dwFaxId, &FaxContextInfo)) {
          fnWriteLogFile(TEXT("FaxStartPrintJob() returned TRUE.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
           //End this fax
          AbortDoc(FaxContextInfo.hDC);
          DeleteDC(FaxContextInfo.hDC);
      }
      else if (GetLastError() != ERROR_INVALID_PARAMETER) {
          fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
      }
      else {
          (*pnNumCasesPassed)++;
		  dwFuncCasesPass++;
      }

      (*pnNumCasesAttempted)++;
	  dwFuncCasesAtt++;
      fnWriteLogFile(TEXT("dwFaxId = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
      if (g_ApiInterface.FaxStartPrintJob(TEXT("Fax"), &FaxPrintInfo, NULL, &FaxContextInfo)) {
          fnWriteLogFile(TEXT("FaxStartPrintJob() returned TRUE.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
           //End this fax
          AbortDoc(FaxContextInfo.hDC);
          DeleteDC(FaxContextInfo.hDC);
      }
      else if (GetLastError() != ERROR_INVALID_PARAMETER) {
          fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
      }
      else {
          (*pnNumCasesPassed)++;
		  dwFuncCasesPass++;
      }

      (*pnNumCasesAttempted)++;
	  dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxContextInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxStartPrintJob(TEXT("Fax"), &FaxPrintInfo, &dwFaxId, NULL)) {
        fnWriteLogFile(TEXT("FaxStartPrintJob() returned TRUE.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        // End this fax
        AbortDoc(FaxContextInfo.hDC);
        DeleteDC(FaxContextInfo.hDC);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    FaxPrintInfo.SizeOfStruct = 0;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxPrintInfo->SizeOfStruct = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxStartPrintJob(TEXT("Fax"), &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
        fnWriteLogFile(TEXT("FaxStartPrintJob() returned TRUE.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        // End this fax
        AbortDoc(FaxContextInfo.hDC);
        DeleteDC(FaxContextInfo.hDC);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }
    FaxPrintInfo.SizeOfStruct = sizeof(FAX_PRINT_INFO);

    FaxPrintInfo.RecipientNumber = NULL;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxPrintInfo->RecipientNumber = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxStartPrintJob(TEXT("Fax"), &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
        fnWriteLogFile(TEXT("FaxStartPrintJob() returned TRUE.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        // End this fax
        AbortDoc(FaxContextInfo.hDC);
        DeleteDC(FaxContextInfo.hDC);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }
    FaxPrintInfo.RecipientNumber = g_szWhisPhoneNumber;

	fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);

    FaxPrintInfo.DrProfileName = TEXT("PrintApi");
    FaxPrintInfo.DrEmailAddress = TEXT("PrintApi");
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxPrintInfo->DrProfileName & pFaxPrintInfo->DrEmailAddress.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("pFaxPrintInfo->DrEmailAddress.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxStartPrintJob(TEXT("Fax"), &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
        fnWriteLogFile(TEXT("FaxStartPrintJob() returned TRUE.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        // End this fax
        AbortDoc(FaxContextInfo.hDC);
        DeleteDC(FaxContextInfo.hDC);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }
    FaxPrintInfo.DrProfileName = NULL;
    FaxPrintInfo.DrEmailAddress = NULL;
	
	HeapFree(g_hHeap, 0, szFaxPrinterName);

    //if (szServerName) {
	//	fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
    //  szRemotePrinter = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(szServerName) + 7) * sizeof(TCHAR));
    //    lstrcpy(szRemotePrinter, TEXT("\\\\"));
    //    lstrcat(szRemotePrinter, szServerName);
	//	lstrcat(szRemotePrinter, TEXT("\\"));
    //   lstrcat(szRemotePrinter, TEXT(WHIS_FAX_PRINTER_NAME));

    //   (*pnNumCasesAttempted)++;
    //   fnWriteLogFile(TEXT("Remote Fax Printer. (Printer Name: %s) Test Case: %d.\r\n"),szRemotePrinter, *pnNumCasesAttempted);
    //   if (!g_ApiInterface.FaxStartPrintJob(szRemotePrinter, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    //      fnWriteLogFile(TEXT("FaxStartPrintJob() failed.  The error code is 0x%08x.  This is an error.  FaxStartPrintJob() should succeed.\r\n"), GetLastError());
    //    }
    //    else {
	//		 AbortDoc(FaxContextInfo.hDC);
	//			 DeleteDC(FaxContextInfo.hDC);
	//		 (*pnNumCasesPassed)++;

    //    }
	//
    //    
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxStartPrintJob, Attempt %d, Pass %d, Fail %d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
}

VOID
fnFaxPrintCoverPage(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	BOOL	 bTestLimits
)
/*++

Routine Description:

  FaxPrintCoverPage()

Return Value:

  None

--*/
{
    // FaxPrintInfo is the fax print info
    FAX_PRINT_INFO      FaxPrintInfo;
    // dwFaxId is the fax job id
    DWORD               dwFaxId;
    // FaxContextInfo is the fax context
    FAX_CONTEXT_INFO    FaxContextInfo;
    // CoverPageInfo is the cover page info
    FAX_COVERPAGE_INFO  CoverPageInfo;
    // FaxContextInfohDC is the hDC from the fax context
    HDC                 FaxContextInfohDC;
    // szCoverPageName is the cover page name
    TCHAR               szCoverPageName[MAX_PATH];

	// szFaxPrinterName is the name of the fax printer
    LPTSTR            szFaxPrinterName=NULL;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

    fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxPrintCoverPage().\r\n"));

	

    ZeroMemory(&FaxPrintInfo, sizeof(FAX_PRINT_INFO));
    FaxPrintInfo.SizeOfStruct = sizeof(FAX_PRINT_INFO);


	fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);
	FaxPrintInfo.RecipientNumber = g_szWhisPhoneNumber;
	
    ZeroMemory(&FaxContextInfo, sizeof(FAX_CONTEXT_INFO));
    FaxContextInfo.SizeOfStruct = sizeof(FAX_CONTEXT_INFO);

    ZeroMemory(&CoverPageInfo, sizeof(FAX_COVERPAGE_INFO));
    CoverPageInfo.SizeOfStruct = sizeof(FAX_COVERPAGE_INFO);


    if (szServerName) {
	    szFaxPrinterName = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(szServerName) + 7) * sizeof(TCHAR));
        lstrcpy(szFaxPrinterName, TEXT("\\\\"));
        lstrcat(szFaxPrinterName, szServerName);
		lstrcat(szFaxPrinterName, TEXT("\\"));
        lstrcat(szFaxPrinterName, TEXT(WHIS_FAX_PRINTER_NAME));
	}
	else {
		szFaxPrinterName = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(szServerName) + 7) * sizeof(TCHAR));
		lstrcpy(szFaxPrinterName, TEXT(WHIS_FAX_PRINTER_NAME));
	}

	fnWriteLogFile(TEXT("WHIS> Fax Printer name is: %s\r\n"), szFaxPrinterName);


    // Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
        return;
    }

    CoverPageInfo.UseServerCoverPage = TRUE;

    CoverPageInfo.CoverPageName = TEXT("confdent.cov");
	CoverPageInfo.Subject = TEXT("FPCP:SRV-confdent.cov");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Server .cov). File: confdent.cov  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }


    CoverPageInfo.CoverPageName = TEXT("coverpg.lnk");
	CoverPageInfo.Subject = TEXT("FPCP:SRV-coverpg.lnk");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Server .lnk). File: coverpg.lnk  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    CoverPageInfo.CoverPageName = TEXT("confdent");
	CoverPageInfo.Subject = TEXT("FPCP:SRV-confdent");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Server .cov). File: confdent  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    CoverPageInfo.CoverPageName = TEXT("coverpg");
	CoverPageInfo.Subject = TEXT("FPCP:SRV-coverpg");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Server .lnk). File: coverpg  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    CoverPageInfo.UseServerCoverPage = FALSE;

    CoverPageInfo.CoverPageName = TEXT("confdent.cov");
	CoverPageInfo.Subject = TEXT("FPCP:LOC-confdent.cov");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Client .cov). File: confdent.cov  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    CoverPageInfo.CoverPageName = TEXT("coverpg.lnk");
	CoverPageInfo.Subject = TEXT("FPCP:LOC-coverpg.lnk");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Client .lnk). File: coverpg.lnk  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    CoverPageInfo.CoverPageName = TEXT("confdent");
	CoverPageInfo.Subject = TEXT("FPCP:LOC-confdent");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Client .cov). File: confdent  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    CoverPageInfo.CoverPageName = TEXT("coverpg");
	CoverPageInfo.Subject = TEXT("FPCP:LOC-coverpg");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Client .lnk). File: coverpg  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    GetFullPathName(TEXT("confdent.cov"), sizeof(szCoverPageName) / sizeof(TCHAR), szCoverPageName, NULL);
    CoverPageInfo.CoverPageName = szCoverPageName;
	CoverPageInfo.Subject = TEXT("FPCP:FullPath(confdent.cov)");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Client / Full Path .cov). Path: %s Test Case: %d.\r\n"),szCoverPageName, *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    GetFullPathName(TEXT("coverpg.lnk"), sizeof(szCoverPageName) / sizeof(TCHAR), szCoverPageName, NULL);
    CoverPageInfo.CoverPageName = szCoverPageName;
	CoverPageInfo.Subject = TEXT("FPCP:FullPath(coverpg.lnk)");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Client / Full Path .lnk). Path %s Test Case: %d.\r\n"), szCoverPageName,*pnNumCasesAttempted);
    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxContextInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxPrintCoverPage(NULL, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() returned TRUE.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pCoverPageInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, NULL)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() returned TRUE.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    FaxContextInfo.SizeOfStruct = 0;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxContextInfo->SizeOfStruct = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() returned TRUE.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }
    FaxContextInfo.SizeOfStruct = sizeof(FAX_CONTEXT_INFO);

    FaxContextInfohDC = FaxContextInfo.hDC;
    FaxContextInfo.hDC = NULL;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxContextInfo->hDC = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() returned TRUE.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }
    FaxContextInfo.hDC = FaxContextInfohDC;

    CoverPageInfo.SizeOfStruct = 0;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pCoverPageInfo->SizeOfStruct = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() returned TRUE.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }
    CoverPageInfo.SizeOfStruct = sizeof(FAX_COVERPAGE_INFO);

    CoverPageInfo.CoverPageName = NULL;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pCoverPageInfo->CoverPageName = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() returned TRUE.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }



    CoverPageInfo.CoverPageName = TEXT("InvalidCoverPageName");
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Invalid pCoverPageInfo->CoverPageName.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() returned TRUE.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_FILE_NOT_FOUND (0x%08x).\r\n"), ERROR_FILE_NOT_FOUND);
    }
    else if (GetLastError() != ERROR_FILE_NOT_FOUND) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_FILE_NOT_FOUND (0x%08x).\r\n"), GetLastError(), ERROR_FILE_NOT_FOUND);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }


    // End this fax
	AbortDoc(FaxContextInfo.hDC);
	DeleteDC(FaxContextInfo.hDC);
	HeapFree(g_hHeap, 0, szFaxPrinterName);
	
fnWriteLogFile(TEXT("$$$ Summery for FaxPrintCoverPage, Attempt %d, Pass %d, Fail %d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
}

VOID
fnFaxSendDocument(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxSendDocument()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE              hFaxSvcHandle;
    // pFaxConfig is a pointer to the fax configuration
    PFAX_CONFIGURATION  pFaxConfig;
    // FaxJobParam is the fax job params
    FAX_JOB_PARAM       FaxJobParam;
    // CoverPageInfo is the cover page info
    FAX_COVERPAGE_INFO  CoverPageInfo;
    // dwFaxId is the fax job id
    DWORD               dwFaxId;
    // szCoverPageName is the cover page name
    TCHAR               szCoverPageName[MAX_PATH];

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxSendDocument().\r\n"));

    ZeroMemory(&FaxJobParam, sizeof(FAX_JOB_PARAM));
    FaxJobParam.SizeOfStruct = sizeof(FAX_JOB_PARAM);
    FaxJobParam.RecipientNumber = g_szWhisPhoneNumber;

	fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);

    ZeroMemory(&CoverPageInfo, sizeof(FAX_COVERPAGE_INFO));
    CoverPageInfo.SizeOfStruct = sizeof(FAX_COVERPAGE_INFO);

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not GET configuration, The error code is 0x%08x.\r\n"), GetLastError());
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    pFaxConfig->PauseServerQueue = TRUE;

    if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not SET configuration, The error code is 0x%08x.\r\n"), GetLastError());
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (kodak.tif).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("kodak.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
		if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
		(*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (fax.tif).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (.txt).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("printapi.txt"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (.doc).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("printapi.doc"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (.xls).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("printapi.xls"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (.ppt).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("printapi.ppt"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }


    CoverPageInfo.UseServerCoverPage = TRUE;

    CoverPageInfo.CoverPageName = TEXT("confdent.cov");
	CoverPageInfo.Subject = TEXT("FSD:confdent.cov");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Server .cov). File: confdent.cov  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    CoverPageInfo.CoverPageName = TEXT("coverpg.lnk");
	CoverPageInfo.Subject = TEXT("FSD:coverpg.lnk");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Server .lnk). File coverpg.lnk  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    CoverPageInfo.CoverPageName = TEXT("confdent");
	CoverPageInfo.Subject = TEXT("FSD:confdent");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Server .cov). File: confdent  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    CoverPageInfo.CoverPageName = TEXT("coverpg");
	CoverPageInfo.Subject = TEXT("FSD:coverpg");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Server .lnk). File: coverpg  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    CoverPageInfo.UseServerCoverPage = FALSE;

    CoverPageInfo.CoverPageName = TEXT("confdent.cov");
	CoverPageInfo.Subject = TEXT("FSD:confdent.cov");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Client .cov). File: confdent.cov  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    CoverPageInfo.CoverPageName = TEXT("coverpg.lnk");
	CoverPageInfo.Subject = TEXT("FSD:coverpg.lnk");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Client .lnk). File: coverpg.lnk  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    CoverPageInfo.CoverPageName = TEXT("confdent");
	CoverPageInfo.Subject = TEXT("FSD:confdent");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Client .cov). File: confdent  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    CoverPageInfo.CoverPageName = TEXT("coverpg");
	CoverPageInfo.Subject = TEXT("FSD:coverpg");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Client .lnk). File: coverpg  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    GetFullPathName(TEXT("confdent.cov"), sizeof(szCoverPageName) / sizeof(TCHAR), szCoverPageName, NULL);


    CoverPageInfo.CoverPageName = szCoverPageName;
	CoverPageInfo.Subject = TEXT("FSD:FullPath(confdent.cov)");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Client / Full Path .cov). Path: %s Test Case: %d.\r\n"),szCoverPageName, *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    GetFullPathName(TEXT("coverpg.lnk"), sizeof(szCoverPageName) / sizeof(TCHAR), szCoverPageName, NULL);
    CoverPageInfo.CoverPageName = szCoverPageName;
	CoverPageInfo.Subject = TEXT("FSD:FullPath(confdent.lnk)");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Client / Full Path .lnk).  Path: %s Test Case: %d.\r\n"), szCoverPageName, *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocument(NULL, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("szDocument = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, NULL, &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxJobParam = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), NULL, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Invalid document.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("InvalidDocumentName"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_FILE_NOT_FOUND (0x%08x).\r\n"), ERROR_FILE_NOT_FOUND);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_FILE_NOT_FOUND) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_FILE_NOT_FOUND (0x%08x).\r\n"), GetLastError(), ERROR_FILE_NOT_FOUND);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Invalid document type (.bad).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("printapi.bad"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), ERROR_INVALID_DATA);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_DATA) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_DATA);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    FaxJobParam.SizeOfStruct = 0;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxJobParam->SizeOfStruct = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }
    FaxJobParam.SizeOfStruct = sizeof(FAX_JOB_PARAM);

    FaxJobParam.RecipientNumber = NULL;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxJobParam->RecipientNumber = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }
    FaxJobParam.RecipientNumber = g_szWhisPhoneNumber;

	fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);

    FaxJobParam.ScheduleAction = -1;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxJobParam->ScheduleAction = -1.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }
    FaxJobParam.ScheduleAction = 0;

    FaxJobParam.DeliveryReportType = -1;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxJobParam->DeliveryReportType = -1.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }
    FaxJobParam.DeliveryReportType = DRT_NONE;

    CoverPageInfo.SizeOfStruct = 0;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pCoverPageInfo->SizeOfStruct = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), ERROR_INVALID_DATA);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_DATA) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_DATA);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }
    CoverPageInfo.SizeOfStruct = sizeof(FAX_COVERPAGE_INFO);

    CoverPageInfo.CoverPageName = NULL;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pCoverPageInfo->CoverPageName = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_FILE_NOT_FOUND (0x%08x).\r\n"), ERROR_FILE_NOT_FOUND);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_FILE_NOT_FOUND) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_FILE_NOT_FOUND (0x%08x).\r\n"), GetLastError(), ERROR_FILE_NOT_FOUND);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    CoverPageInfo.CoverPageName = TEXT("InvalidCoverPageName");
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Invalid pCoverPageInfo->CoverPageName.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_FILE_NOT_FOUND (0x%08x).\r\n"), ERROR_FILE_NOT_FOUND);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_FILE_NOT_FOUND) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_FILE_NOT_FOUND (0x%08x).\r\n"), GetLastError(), ERROR_FILE_NOT_FOUND);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    pFaxConfig->PauseServerQueue = FALSE;
    g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
    g_ApiInterface.FaxFreeBuffer(pFaxConfig);

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }


//    not used, design changed so all suite will run in remote mode
//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
//        if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
//   		   fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
//           return;
 //      }
//		else
//		{
//			fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
//		}
//
  //      if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
	//		fnWriteLogFile(TEXT("WHIS> ERROR: Can not GET configuration, The error code is 0x%08x.\r\n"), GetLastError());
      //      // Disconnect from the fax server
        //    g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //pFaxConfig->PauseServerQueue = TRUE;

        //if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
		//	fnWriteLogFile(TEXT("WHIS> ERROR: Can not SET configuration, The error code is 0x%08x.\r\n"), GetLastError());
        //    g_ApiInterface.FaxFreeBuffer(pFaxConfig);
            // Disconnect from the fax server
        //    g_ApiInterface.FaxClose(hFaxSvcHandle);
        //    return;
        //}

        //(*pnNumCasesAttempted)++;
        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("kodak.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        //    fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
        //}
        //else {
		//	if (!g_bRealSend)	{
		//					g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		//	}
        //    (*pnNumCasesPassed)++;
        //}

        //pFaxConfig->PauseServerQueue = FALSE;
        //g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        //g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxSendDocument, Attempt %d, Pass %d, Fail %d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
}

BOOL CALLBACK
fnBroadcastCallback(
    HANDLE               hFaxSvcHandle,
    DWORD                dwRecipientNumber,
    LPVOID               lpContext,
    PFAX_JOB_PARAM       pFaxJobParam,
    PFAX_COVERPAGE_INFO  pCoverPageInfo
)
/*++

Routine Description:

  FaxSendDocumentForBroadcast() callback

Return Value:

  TRUE to enumerate another recipient

--*/
{
    BOOL     bRet;
    LPDWORD  pdwIndex;

    pdwIndex = (LPDWORD) lpContext;

    if (*pdwIndex != (dwRecipientNumber - 1)) {
        return FALSE;
    }

    switch (*pdwIndex) {
        case 0:
            pFaxJobParam->RecipientNumber = g_szWhisPhoneNumber;

			fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);

            pCoverPageInfo->UseServerCoverPage = TRUE;
            pCoverPageInfo->CoverPageName = TEXT("confdent.cov");
            bRet = TRUE;
            break;

        case 1:
            pFaxJobParam->RecipientNumber = g_szWhisPhoneNumber;

			fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);

            pCoverPageInfo->UseServerCoverPage = TRUE;
            pCoverPageInfo->CoverPageName = TEXT("confdent.cov");
            bRet = TRUE;
            break;

        default:
            bRet = FALSE;
            break;
    }

    (*pdwIndex)++;
    return bRet;
}

VOID
fnFaxSendDocumentForBroadcast(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxSendDocumentForBroadcast()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE              hFaxSvcHandle;
    // pFaxConfig is a pointer to the fax configuration
    PFAX_CONFIGURATION  pFaxConfig;
    // dwFaxId is the fax job id
    DWORD               dwFaxId;

    DWORD               dwIndex;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxSendDocumentForBroadcast().\r\n"));



    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not GET configuration, The error code is 0x%08x.\r\n"), GetLastError());
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    pFaxConfig->PauseServerQueue = TRUE;

    if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not SET configuration, The error code is 0x%08x.\r\n"), GetLastError());
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }


    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    dwIndex = 0;
    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocumentForBroadcast(hFaxSvcHandle, TEXT("fax.tif"), &dwFaxId, fnBroadcastCallback, &dwIndex)) {
        fnWriteLogFile(TEXT("FaxSendDocumentForBroadcast() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocumentForBroadcast() should succeed.\r\n"), GetLastError());
    }
    else {
        if (dwIndex != 3) {
            fnWriteLogFile(TEXT("FaxSendDocumentForBroadcast() failed.  fnBroadcastCallback() was only called %d times.  This is an error.  fnBroadcastCallback() should have been called 3 times.\r\n"), dwIndex);
        }
        else if (g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId)) {
            fnWriteLogFile(TEXT("FaxAbort() of owner job returned TRUE.  This is an error.  FaxAbort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        }
        else if (GetLastError() != ERROR_INVALID_PARAMETER) {
            fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxAbort() of owner job should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
        }
        else {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
        }
		if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 2));
							g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 1));
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocumentForBroadcast(NULL, TEXT("fax.tif"), &dwFaxId, fnBroadcastCallback, &dwIndex)) {
        fnWriteLogFile(TEXT("FaxSendDocumentForBroadcast() returned TRUE.  This is an error.  FaxSendDocumentForBroadcast() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 2));
        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 1));
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocumentForBroadcast() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;

    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("szDocument = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocumentForBroadcast(hFaxSvcHandle, NULL, &dwFaxId, fnBroadcastCallback, &dwIndex)) {
        fnWriteLogFile(TEXT("FaxSendDocumentForBroadcast() returned TRUE.  This is an error.  FaxSendDocumentForBroadcast() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 2));
        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 1));
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocumentForBroadcast() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("fnBroadcastCallback = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocumentForBroadcast(hFaxSvcHandle, TEXT("fax.tif"), &dwFaxId, NULL, &dwIndex)) {
        fnWriteLogFile(TEXT("FaxSendDocumentForBroadcast() returned TRUE.  This is an error.  FaxSendDocumentForBroadcast() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 2));
        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 1));
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocumentForBroadcast() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    pFaxConfig->PauseServerQueue = FALSE;
    g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
    g_ApiInterface.FaxFreeBuffer(pFaxConfig);

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocumentForBroadcast(hFaxSvcHandle, TEXT("fax.tif"), &dwFaxId, fnBroadcastCallback, &dwIndex)) {
        fnWriteLogFile(TEXT("FaxSendDocumentForBroadcast() returned TRUE.  This is an error.  FaxSendDocumentForBroadcast() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 2));
        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 1));
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocumentForBroadcast() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    //if (szServerName) {
	//	fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
    //    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
    //    }

    //    if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
            // Disconnect from the fax server
    //        g_ApiInterface.FaxClose(hFaxSvcHandle);
    //        return;
    //    }

     //   pFaxConfig->PauseServerQueue = TRUE;

        //if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
          //  g_ApiInterface.FaxFreeBuffer(pFaxConfig);
            // Disconnect from the fax server
            //g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //(*pnNumCasesAttempted)++;
        //dwIndex = 0;
        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxSendDocumentForBroadcast(hFaxSvcHandle, TEXT("fax.tif"), &dwFaxId, fnBroadcastCallback, &dwIndex)) {
            //fnWriteLogFile(TEXT("FaxSendDocumentForBroadcast() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocumentForBroadcast() should succeed.\r\n"), GetLastError());
        //}
        //else {
            //(*pnNumCasesPassed)++;

//			if (!g_bRealSend)	{
//		            g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 2));
//			        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 1));
//					g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
//			}
        //}

//        pFaxConfig->PauseServerQueue = FALSE;
        //g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        //g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
//        g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}

fnWriteLogFile(TEXT("$$$ Summery for FaxSendDocumentForBroadcast, Attempt %d, Pass %d, Fail %d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
}



BOOL WINAPI
FaxAPIDllTest(
	LPCWSTR  szWhisPhoneNumberW,
	LPCSTR   szWhisPhoneNumberA,
    LPCWSTR  szServerNameW,
    LPCSTR   szServerNameA,
    UINT     nNumCasesLocal,
    UINT     nNumCasesServer,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	DWORD	 dwTestMode
)
{
    LPCTSTR  szServerName;
    UINT     nNumCases;


	// for Whis-extended only
#ifdef UNICODE
    if (lstrlen(szWhisPhoneNumberW)>0) { 
		g_szWhisPhoneNumber = szWhisPhoneNumberW; 
	}
	else {
		g_szWhisPhoneNumber=TEXT(WHIS_DEFAULT_PHONE_NUMBER);
	}
#else
	if (lstrlen(szWhisPhoneNumberA)>0) {
		g_szWhisPhoneNumber = szWhisPhoneNumberA;
	}
	else {
		g_szWhisPhoneNumber=TEXT(WHIS_DEFAULT_PHONE_NUMBER);
	}
		
#endif

#ifdef UNICODE
    szServerName = szServerNameW;
#else
    szServerName = szServerNameA;
#endif

    if (szServerName) {
        nNumCases = nNumCasesServer;
		fnWriteLogFile(TEXT("WHIS> REMOTE SERVER MODE:\r\n"));
    }
    else {
        nNumCases = nNumCasesLocal;
    }

	if (dwTestMode==WHIS_TEST_MODE_REAL_SEND) g_bRealSend=TRUE;


    // FaxStartPrintJob()
    fnFaxStartPrintJob(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    // FaxPrintCoverPage()
    fnFaxPrintCoverPage(szServerName, pnNumCasesAttempted, pnNumCasesPassed,TRUE);

    // FaxSendDocument()
    fnFaxSendDocument(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    // FaxSendDocumentForBroadcast()
    fnFaxSendDocumentForBroadcast(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    if ((*pnNumCasesAttempted == nNumCases) && (*pnNumCasesPassed == *pnNumCasesAttempted)) {
        return TRUE;
    }
    else {
        return FALSE;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legacywin32_xml\faxapi\faxapi.c ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

  faxapi.c

Abstract:

  This module is a harness to test the Fax APIs

Author:

  Steven Kehrli (steveke) 8/28/1998

--*/

/*++

  Whistler Version:

  Lior Shmueli (liors) 23/11/2000

 ++*/

#include <wtypes.h>
#include <stdio.h>
#include <lior_platform.h>

#include "dllapi.h"
#include "faxapi.h"

#include "util.c"


VOID
fnUsageInfo(
)
/*++

Routine Description:

  Displays the usage info in stdout

Return Value:

  None

--*/
{
    wprintf(L"Fax API Test Harness.\n");
    wprintf(L"\n");
    wprintf(L"FAXAPI /I:<ini file> /L:<log file> /V\n");
    wprintf(L"\n");
    wprintf(L"  /I:<ini file>       Ini file name.  Defaults to \"%s\".\n", FAXAPI_INIFILE);
    wprintf(L"  /L:<log file>       Log file name.  Defaults to \"%s\".\n", FAXAPI_LOGFILE);
    wprintf(L"  /S:<computer name>  Computer name.  Defaults to NULL\n");
    wprintf(L"  /V                  Verbose.\n");
    wprintf(L"\n");
}

BOOL
LoadFaxAPIs(
    PAPI_INTERFACE  pApiInterface
)
/*++

Routine Description:

  Loads the Fax APIs

Arguments:

  pApiInterface - pointer to the api interface structure

Return Value:

  TRUE on success

--*/
{
    // szDllPath is the path where the fax dll resides
    WCHAR  szDllPath[MAX_PATH];

    // Clear the dll path
    ZeroMemory(szDllPath, MAX_PATH);

    // Get the path
    if (GetSystemDirectory(szDllPath, MAX_PATH) == 0) {
        LocalEcho(L"GetSystemDirectory() failed, ec = 0x%08x\n", GetLastError());
        return FALSE;
    }

    // Concatenate the fax dll with the path
    lstrcat(szDllPath, WINFAX_DLL);

    // Get the handle to the fax dll
    pApiInterface->hInstance = LoadLibrary((LPCWSTR) szDllPath);
    if (!pApiInterface->hInstance) {
        LocalEcho(L"Could not load \"%s\", ec = 0x%08x.\n", szDllPath, GetLastError());
        return FALSE;
    }

    // Map all needed functions to pApiInterface

    // FaxAbort
    pApiInterface->FaxAbort = (PFAXABORT) GetProcAddress(pApiInterface->hInstance, "FaxAbort");
    if (!pApiInterface->FaxAbort) {
        LocalEcho(L"Could not retrieve the address of \"FaxAbort()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxAccessCheck
    pApiInterface->FaxAccessCheck = (PFAXACCESSCHECK) GetProcAddress(pApiInterface->hInstance, "FaxAccessCheck");
    if (!pApiInterface->FaxAccessCheck) {
        LocalEcho(L"Could not retrieve the address of \"FaxAccessCheck()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxClose
    pApiInterface->FaxClose = (PFAXCLOSE) GetProcAddress(pApiInterface->hInstance, "FaxClose");
    if (!pApiInterface->FaxClose) {
        LocalEcho(L"Could not retrieve the address of \"FaxClose()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxCompleteJobParamsW
    pApiInterface->FaxCompleteJobParamsW = (PFAXCOMPLETEJOBPARAMSW) GetProcAddress(pApiInterface->hInstance, "FaxCompleteJobParamsW");
    if (!pApiInterface->FaxCompleteJobParamsW) {
        LocalEcho(L"Could not retrieve the address of \"FaxCompleteJobParamsW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxCompleteJobParamsA
    pApiInterface->FaxCompleteJobParamsA = (PFAXCOMPLETEJOBPARAMSA) GetProcAddress(pApiInterface->hInstance, "FaxCompleteJobParamsA");
    if (!pApiInterface->FaxCompleteJobParamsA) {
        LocalEcho(L"Could not retrieve the address of \"FaxCompleteJobParamsA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxConnectFaxServerW
    pApiInterface->FaxConnectFaxServerW = (PFAXCONNECTFAXSERVERW) GetProcAddress(pApiInterface->hInstance, "FaxConnectFaxServerW");
    if (!pApiInterface->FaxConnectFaxServerW) {
        LocalEcho(L"Could not retrieve the address of \"FaxConnectFaxServerW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxConnectFaxServerA
    pApiInterface->FaxConnectFaxServerA = (PFAXCONNECTFAXSERVERA) GetProcAddress(pApiInterface->hInstance, "FaxConnectFaxServerA");
    if (!pApiInterface->FaxConnectFaxServerA) {
        LocalEcho(L"Could not retrieve the address of \"FaxConnectFaxServerA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxEnableRoutingMethodW
    pApiInterface->FaxEnableRoutingMethodW = (PFAXENABLEROUTINGMETHODW) GetProcAddress(pApiInterface->hInstance, "FaxEnableRoutingMethodW");
    if (!pApiInterface->FaxEnableRoutingMethodW) {
        LocalEcho(L"Could not retrieve the address of \"FaxEnableRoutingMethodW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxEnableRoutingMethodA
    pApiInterface->FaxEnableRoutingMethodA = (PFAXENABLEROUTINGMETHODA) GetProcAddress(pApiInterface->hInstance, "FaxEnableRoutingMethodA");
    if (!pApiInterface->FaxEnableRoutingMethodA) {
        LocalEcho(L"Could not retrieve the address of \"FaxEnableRoutingMethodA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxEnumGlobalRoutingInfoW
    pApiInterface->FaxEnumGlobalRoutingInfoW = (PFAXENUMGLOBALROUTINGINFOW) GetProcAddress(pApiInterface->hInstance, "FaxEnumGlobalRoutingInfoW");
    if (!pApiInterface->FaxEnumGlobalRoutingInfoW) {
        LocalEcho(L"Could not retrieve the address of \"FaxEnumGlobalRoutingInfoW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxEnumGlobalRoutingInfoA
    pApiInterface->FaxEnumGlobalRoutingInfoA = (PFAXENUMGLOBALROUTINGINFOA) GetProcAddress(pApiInterface->hInstance, "FaxEnumGlobalRoutingInfoA");
    if (!pApiInterface->FaxEnumGlobalRoutingInfoA) {
        LocalEcho(L"Could not retrieve the address of \"FaxEnumGlobalRoutingInfoA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxEnumJobsW
    pApiInterface->FaxEnumJobsW = (PFAXENUMJOBSW) GetProcAddress(pApiInterface->hInstance, "FaxEnumJobsW");
    if (!pApiInterface->FaxEnumJobsW) {
        LocalEcho(L"Could not retrieve the address of \"FaxEnumJobsW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxEnumJobsA
    pApiInterface->FaxEnumJobsA = (PFAXENUMJOBSA) GetProcAddress(pApiInterface->hInstance, "FaxEnumJobsA");
    if (!pApiInterface->FaxEnumJobsA) {
        LocalEcho(L"Could not retrieve the address of \"FaxEnumJobsA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxEnumPortsW
    pApiInterface->FaxEnumPortsW = (PFAXENUMPORTSW) GetProcAddress(pApiInterface->hInstance, "FaxEnumPortsW");
    if (!pApiInterface->FaxEnumPortsW) {
        LocalEcho(L"Could not retrieve the address of \"FaxEnumPortsW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxEnumPortsA
    pApiInterface->FaxEnumPortsA = (PFAXENUMPORTSA) GetProcAddress(pApiInterface->hInstance, "FaxEnumPortsA");
    if (!pApiInterface->FaxEnumPortsA) {
        LocalEcho(L"Could not retrieve the address of \"FaxEnumPortsA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxEnumRoutingMethodsW
    pApiInterface->FaxEnumRoutingMethodsW = (PFAXENUMROUTINGMETHODSW) GetProcAddress(pApiInterface->hInstance, "FaxEnumRoutingMethodsW");
    if (!pApiInterface->FaxEnumRoutingMethodsW) {
        LocalEcho(L"Could not retrieve the address of \"FaxEnumRoutingMethodsW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxEnumRoutingMethodsA
    pApiInterface->FaxEnumRoutingMethodsA = (PFAXENUMROUTINGMETHODSA) GetProcAddress(pApiInterface->hInstance, "FaxEnumRoutingMethodsA");
    if (!pApiInterface->FaxEnumRoutingMethodsA) {
        LocalEcho(L"Could not retrieve the address of \"FaxEnumRoutingMethodsA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxFreeBuffer
    pApiInterface->FaxFreeBuffer = (PFAXFREEBUFFER) GetProcAddress(pApiInterface->hInstance, "FaxFreeBuffer");
    if (!pApiInterface->FaxFreeBuffer) {
        LocalEcho(L"Could not retrieve the address of \"FaxFreeBuffer()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxGetConfigurationW
    pApiInterface->FaxGetConfigurationW = (PFAXGETCONFIGURATIONW) GetProcAddress(pApiInterface->hInstance, "FaxGetConfigurationW");
    if (!pApiInterface->FaxGetConfigurationW) {
        LocalEcho(L"Could not retrieve the address of \"FaxGetConfigurationW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxGetConfigurationA
    pApiInterface->FaxGetConfigurationA = (PFAXGETCONFIGURATIONA) GetProcAddress(pApiInterface->hInstance, "FaxGetConfigurationA");
    if (!pApiInterface->FaxGetConfigurationA) {
        LocalEcho(L"Could not retrieve the address of \"FaxGetConfigurationA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxGetDeviceStatusW
    pApiInterface->FaxGetDeviceStatusW = (PFAXGETDEVICESTATUSW) GetProcAddress(pApiInterface->hInstance, "FaxGetDeviceStatusW");
    if (!pApiInterface->FaxGetDeviceStatusW) {
        LocalEcho(L"Could not retrieve the address of \"FaxGetDeviceStatusW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxGetDeviceStatusA
    pApiInterface->FaxGetDeviceStatusA = (PFAXGETDEVICESTATUSA) GetProcAddress(pApiInterface->hInstance, "FaxGetDeviceStatusA");
    if (!pApiInterface->FaxGetDeviceStatusA) {
        LocalEcho(L"Could not retrieve the address of \"FaxGetDeviceStatusA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxGetJobW
    pApiInterface->FaxGetJobW = (PFAXGETJOBW) GetProcAddress(pApiInterface->hInstance, "FaxGetJobW");
    if (!pApiInterface->FaxGetJobW) {
        LocalEcho(L"Could not retrieve the address of \"FaxGetJobW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxGetJobA
    pApiInterface->FaxGetJobA = (PFAXGETJOBA) GetProcAddress(pApiInterface->hInstance, "FaxGetJobA");
    if (!pApiInterface->FaxGetJobA) {
        LocalEcho(L"Could not retrieve the address of \"FaxGetJobA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxGetLoggingCategoriesW
    pApiInterface->FaxGetLoggingCategoriesW = (PFAXGETLOGGINGCATEGORIESW) GetProcAddress(pApiInterface->hInstance, "FaxGetLoggingCategoriesW");
    if (!pApiInterface->FaxGetLoggingCategoriesW) {
        LocalEcho(L"Could not retrieve the address of \"FaxGetLoggingCategoriesW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxGetLoggingCategoriesA
    pApiInterface->FaxGetLoggingCategoriesA = (PFAXGETLOGGINGCATEGORIESA) GetProcAddress(pApiInterface->hInstance, "FaxGetLoggingCategoriesA");
    if (!pApiInterface->FaxGetLoggingCategoriesA) {
        LocalEcho(L"Could not retrieve the address of \"FaxGetLoggingCategoriesA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxGetPageData
    pApiInterface->FaxGetPageData = (PFAXGETPAGEDATA) GetProcAddress(pApiInterface->hInstance, "FaxGetPageData");
    if (!pApiInterface->FaxGetPageData) {
        LocalEcho(L"Could not retrieve the address of \"FaxGetPageData()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxGetPortW
    pApiInterface->FaxGetPortW = (PFAXGETPORTW) GetProcAddress(pApiInterface->hInstance, "FaxGetPortW");
    if (!pApiInterface->FaxGetPortW) {
        LocalEcho(L"Could not retrieve the address of \"FaxGetPortW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxGetPortA
    pApiInterface->FaxGetPortA = (PFAXGETPORTA) GetProcAddress(pApiInterface->hInstance, "FaxGetPortA");
    if (!pApiInterface->FaxGetPortA) {
        LocalEcho(L"Could not retrieve the address of \"FaxGetPortA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxGetRoutingInfoW
    pApiInterface->FaxGetRoutingInfoW = (PFAXGETROUTINGINFOW) GetProcAddress(pApiInterface->hInstance, "FaxGetRoutingInfoW");
    if (!pApiInterface->FaxGetRoutingInfoW) {
        LocalEcho(L"Could not retrieve the address of \"FaxGetRoutingInfoW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxGetRoutingInfoA
    pApiInterface->FaxGetRoutingInfoA = (PFAXGETROUTINGINFOA) GetProcAddress(pApiInterface->hInstance, "FaxGetRoutingInfoA");
    if (!pApiInterface->FaxGetRoutingInfoA) {
        LocalEcho(L"Could not retrieve the address of \"FaxGetRoutingInfoA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxInitializeEventQueue
    pApiInterface->FaxInitializeEventQueue = (PFAXINITIALIZEEVENTQUEUE) GetProcAddress(pApiInterface->hInstance, "FaxInitializeEventQueue");
    if (!pApiInterface->FaxInitializeEventQueue) {
        LocalEcho(L"Could not retrieve the address of \"FaxInitializeEventQueue()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxOpenPort
    pApiInterface->FaxOpenPort = (PFAXOPENPORT) GetProcAddress(pApiInterface->hInstance, "FaxOpenPort");
    if (!pApiInterface->FaxOpenPort) {
        LocalEcho(L"Could not retrieve the address of \"FaxOpenPort()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxPrintCoverPageW
    pApiInterface->FaxPrintCoverPageW = (PFAXPRINTCOVERPAGEW) GetProcAddress(pApiInterface->hInstance, "FaxPrintCoverPageW");
    if (!pApiInterface->FaxPrintCoverPageW) {
        LocalEcho(L"Could not retrieve the address of \"FaxPrintCoverPageW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxPrintCoverPageA
    pApiInterface->FaxPrintCoverPageA = (PFAXPRINTCOVERPAGEA) GetProcAddress(pApiInterface->hInstance, "FaxPrintCoverPageA");
    if (!pApiInterface->FaxPrintCoverPageA) {
        LocalEcho(L"Could not retrieve the address of \"FaxPrintCoverPageA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxRegisterRoutingExtensionW
    pApiInterface->FaxRegisterRoutingExtensionW = (PFAXREGISTERROUTINGEXTENSIONW) GetProcAddress(pApiInterface->hInstance, "FaxRegisterRoutingExtensionW");
    if (!pApiInterface->FaxRegisterRoutingExtensionW) {
        LocalEcho(L"Could not retrieve the address of \"FaxRegisterRoutingExtensionW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxRegisterServiceProviderW
    pApiInterface->FaxRegisterServiceProviderW = (PFAXREGISTERSERVICEPROVIDERW) GetProcAddress(pApiInterface->hInstance, "FaxRegisterServiceProviderW");
    if (!pApiInterface->FaxRegisterServiceProviderW) {
        LocalEcho(L"Could not retrieve the address of \"FaxRegisterServiceProviderW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSendDocumentW
    pApiInterface->FaxSendDocumentW = (PFAXSENDDOCUMENTW) GetProcAddress(pApiInterface->hInstance, "FaxSendDocumentW");
    if (!pApiInterface->FaxSendDocumentW) {
        LocalEcho(L"Could not retrieve the address of \"FaxSendDocumentW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSendDocumentA
    pApiInterface->FaxSendDocumentA = (PFAXSENDDOCUMENTA) GetProcAddress(pApiInterface->hInstance, "FaxSendDocumentA");
    if (!pApiInterface->FaxSendDocumentA) {
        LocalEcho(L"Could not retrieve the address of \"FaxSendDocumentA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSendDocumentForBroadcastW
    pApiInterface->FaxSendDocumentForBroadcastW = (PFAXSENDDOCUMENTFORBROADCASTW) GetProcAddress(pApiInterface->hInstance, "FaxSendDocumentForBroadcastW");
    if (!pApiInterface->FaxSendDocumentForBroadcastW) {
        LocalEcho(L"Could not retrieve the address of \"FaxSendDocumentForBroadcastW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSendDocumentForBroadcastA
    pApiInterface->FaxSendDocumentForBroadcastA = (PFAXSENDDOCUMENTFORBROADCASTA) GetProcAddress(pApiInterface->hInstance, "FaxSendDocumentForBroadcastA");
    if (!pApiInterface->FaxSendDocumentForBroadcastA) {
        LocalEcho(L"Could not retrieve the address of \"FaxSendDocumentForBroadcastA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSetConfigurationW
    pApiInterface->FaxSetConfigurationW = (PFAXSETCONFIGURATIONW) GetProcAddress(pApiInterface->hInstance, "FaxSetConfigurationW");
    if (!pApiInterface->FaxSetConfigurationW) {
        LocalEcho(L"Could not retrieve the address of \"FaxSetConfigurationW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSetConfigurationA
    pApiInterface->FaxSetConfigurationA = (PFAXSETCONFIGURATIONA) GetProcAddress(pApiInterface->hInstance, "FaxSetConfigurationA");
    if (!pApiInterface->FaxSetConfigurationA) {
        LocalEcho(L"Could not retrieve the address of \"FaxSetConfigurationA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSetGlobalRoutingInfoW
    pApiInterface->FaxSetGlobalRoutingInfoW = (PFAXSETGLOBALROUTINGINFOW) GetProcAddress(pApiInterface->hInstance, "FaxSetGlobalRoutingInfoW");
    if (!pApiInterface->FaxSetGlobalRoutingInfoW) {
        LocalEcho(L"Could not retrieve the address of \"FaxSetGlobalRoutingInfoW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSetGlobalRoutingInfoA
    pApiInterface->FaxSetGlobalRoutingInfoA = (PFAXSETGLOBALROUTINGINFOA) GetProcAddress(pApiInterface->hInstance, "FaxSetGlobalRoutingInfoA");
    if (!pApiInterface->FaxSetGlobalRoutingInfoA) {
        LocalEcho(L"Could not retrieve the address of \"FaxSetGlobalRoutingInfoA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSetJobW
    pApiInterface->FaxSetJobW = (PFAXSETJOBW) GetProcAddress(pApiInterface->hInstance, "FaxSetJobW");
    if (!pApiInterface->FaxSetJobW) {
        LocalEcho(L"Could not retrieve the address of \"FaxSetJobW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSetJobA
    pApiInterface->FaxSetJobA = (PFAXSETJOBA) GetProcAddress(pApiInterface->hInstance, "FaxSetJobA");
    if (!pApiInterface->FaxSetJobA) {
        LocalEcho(L"Could not retrieve the address of \"FaxSetJobA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSetLoggingCategoriesW
    pApiInterface->FaxSetLoggingCategoriesW = (PFAXSETLOGGINGCATEGORIESW) GetProcAddress(pApiInterface->hInstance, "FaxSetLoggingCategoriesW");
    if (!pApiInterface->FaxSetLoggingCategoriesW) {
        LocalEcho(L"Could not retrieve the address of \"FaxSetLoggingCategoriesW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSetLoggingCategoriesA
    pApiInterface->FaxSetLoggingCategoriesA = (PFAXSETLOGGINGCATEGORIESA) GetProcAddress(pApiInterface->hInstance, "FaxSetLoggingCategoriesA");
    if (!pApiInterface->FaxSetLoggingCategoriesA) {
        LocalEcho(L"Could not retrieve the address of \"FaxSetLoggingCategoriesA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSetPortW
    pApiInterface->FaxSetPortW = (PFAXSETPORTW) GetProcAddress(pApiInterface->hInstance, "FaxSetPortW");
    if (!pApiInterface->FaxSetPortW) {
        LocalEcho(L"Could not retrieve the address of \"FaxSetPortW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSetPortA
    pApiInterface->FaxSetPortA = (PFAXSETPORTA) GetProcAddress(pApiInterface->hInstance, "FaxSetPortA");
    if (!pApiInterface->FaxSetPortA) {
        LocalEcho(L"Could not retrieve the address of \"FaxSetPortA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSetRoutingInfoW
    pApiInterface->FaxSetRoutingInfoW = (PFAXSETROUTINGINFOW) GetProcAddress(pApiInterface->hInstance, "FaxSetRoutingInfoW");
    if (!pApiInterface->FaxSetRoutingInfoW) {
        LocalEcho(L"Could not retrieve the address of \"FaxSetRoutingInfoW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSetRoutingInfoA
    pApiInterface->FaxSetRoutingInfoA = (PFAXSETROUTINGINFOA) GetProcAddress(pApiInterface->hInstance, "FaxSetRoutingInfoA");
    if (!pApiInterface->FaxSetRoutingInfoA) {
        LocalEcho(L"Could not retrieve the address of \"FaxSetRoutingInfoA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxStartPrintJobW
    pApiInterface->FaxStartPrintJobW = (PFAXSTARTPRINTJOBW) GetProcAddress(pApiInterface->hInstance, "FaxStartPrintJobW");
    if (!pApiInterface->FaxStartPrintJobW) {
        LocalEcho(L"Could not retrieve the address of \"FaxStartPrintJobW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxStartPrintJobA
    pApiInterface->FaxStartPrintJobA = (PFAXSTARTPRINTJOBA) GetProcAddress(pApiInterface->hInstance, "FaxStartPrintJobA");
    if (!pApiInterface->FaxStartPrintJobA) {
        LocalEcho(L"Could not retrieve the address of \"FaxStartPrintJobA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    return TRUE;
}

BOOL
LoadFaxAPIDll(
    LPCWSTR         szIniFile,
    LPCWSTR         szCurrentSection,
    PDLL_INTERFACE  pDllInterface
)
/*++

Routine Description:

  Loads a Fax API Test Dll

Arguments:

  szIniFile - ini file name
  szCurrentSection - section name
  pDllInterface - pointer to the dll interface structure

Return Value:

  TRUE on success

--*/
{
    // szDllPath is the path where the dll resides
    WCHAR  szDllPath[MAX_PATH];

    GetPrivateProfileString(szCurrentSection, DLL_PATH, L"", szDllPath, MAX_PATH, szIniFile);

    if (!lstrcmpi(szDllPath, L"")) {
        LocalEcho(L"Could not find the \"Dll_Path\" key for section \"%s\".\n", szCurrentSection);
        return FALSE;
    }

    pDllInterface->hInstance = LoadLibrary(szDllPath);
    if (!pDllInterface->hInstance) {
        LocalEcho(L"Could not load \"%s\" for section \"%s\", ec = 0x%08x.\n", szDllPath, szCurrentSection, GetLastError());
        return FALSE;
    }

    pDllInterface->pFaxAPIDllInit = (PFAXAPIDLLINIT) GetProcAddress(pDllInterface->hInstance, "FaxAPIDllInit");
    if (!pDllInterface->pFaxAPIDllInit) {
        LocalEcho(L"Could not retrieve the address of \"FaxAPIDllInit()\".\n");
        FreeLibrary(pDllInterface->hInstance);
        return FALSE;
    }

	pDllInterface->pFaxAPIDllTest = (PFAXAPIDLLTEST) GetProcAddress(pDllInterface->hInstance, "FaxAPIDllTest");
    if (!pDllInterface->pFaxAPIDllTest) {
        LocalEcho(L"Could not retrieve the address of \"FaxAPIDllTest()\".\n");
        FreeLibrary(pDllInterface->hInstance);
        return FALSE;
    }

    return TRUE;
}

int _cdecl
main(
    INT   argc,
    CHAR  *argvA[]
)
{

    // bIniFile indicates an ini file name was found
    BOOL           bIniFile = FALSE;
    // szIniFile is the ini file name
    LPWSTR         szIniFile = NULL;
    // bLogFile indicates a log file name was found
    BOOL           bLogFile = FALSE;
    // szLogFile is the log file name
    LPWSTR         szLogFile = NULL;
    // bServerName indicates a server name was found
    BOOL           bServerName = FALSE;
    // szServerNameW is the server name
    LPWSTR         szServerNameW = NULL;
    // szServerNameA is the server name
    LPSTR          szServerNameA = NULL;
	
	// phone number 1 (ansi & widechar)
	//LPWSTR		   szWhisPhoneNumber1W=NULL;
	//LPSTR		   szWhisPhoneNumber1A=NULL;

    // szParam is a command line parameter
    LPWSTR         szParam;
    // wParamChar is a command line parameter character
    WCHAR          wParamChar;

    // ApiInterface is a API_INTERFACE structure
    API_INTERFACE  ApiInterface;

    // szSectionNames is the section names of the ini file
    LPWSTR         szSectionNames;
    // szCurrentSection is the current section
    LPWSTR         szCurrentSection;

	// whis: max routing global declaration (from ini)
    //UINT		   nWhisMaxRoutingMethods;

    // DllInterface is a DLL_INTERFACE structure
    DLL_INTERFACE  DllInterface;

    // szDescription is the description of the section
    WCHAR          szDescription[MAX_PATH];

	// szRemoteServerName is the name of the remote server
	WCHAR		   szWhisRemoteServerNameW[MAX_PATH];
	CHAR		   szWhisRemoteServerNameA[MAX_PATH];
	
	// szWhisPhoneNum1 is the 1st phone number to be used
	WCHAR		   szWhisPhoneNumber1W[MAX_PATH];
	CHAR		   szWhisPhoneNumber1A[MAX_PATH];
	
	// szWhisPhoneNum2 is the 2nd phone number to be used
	WCHAR		   szWhisPhoneNumber2W[MAX_PATH];	
	CHAR		   szWhisPhoneNumber2A[MAX_PATH];
	
	// flag for running in local case
	BOOL		   bLocalMode=TRUE;

	// result of DLL call
	BOOL		   bTestResult=FALSE;
    
	// nNumCasesLocal is the number of local cases in the section
    UINT           nNumCasesLocal;
    // nNumCasesServer is the number of server cases in the section
    UINT           nNumCasesServer;
    // nNumCasesAttempted is the number of cases attempted for the section
    UINT           nNumCasesAttempted;
    // nNumCasesPassed is the number of cases passed for the section
    UINT           nNumCasesPassed;
	// nWhisDoThisSet is a 0/1 var to flag if this test will be done
	DWORD		   dwWhisTestMode=0;

	// Summery variables
	UINT			nWhisNumSkipped=0;
	UINT			nWhisNumFailed=0;

    // iVal is the return value
    INT            iVal = -1;

    // dwIndex is a counter
    DWORD          dwIndex = 0;
    DWORD          cb;

	// total of all cases
	UINT			nTotCasesAttempted=0;
	UINT			nTotCasesPassed=0;

    


	
	// Welcome message (whis)
	LocalEcho(L"Welcome to whistler API Test");
//  LocalEcho(L"This test name is \"%s\".\n", WHIS_TITLE);
//	LocalEcho(L"This test var \"%d\".\n", dwData);
	
	
	// Get the handle to the process heap
    g_hHeap = GetProcessHeap();
	if (!g_hHeap) {
		LocalEcho(L"WHIS> ERROR Could not get proccess heap");
		goto ExitLevel0;
	}


    for (dwIndex = 1; dwIndex < (DWORD) argc; dwIndex++) {
        // Determine the memory required for the parameter
        cb = (lstrlenA(argvA[dwIndex]) + 1) * sizeof(WCHAR);

        // Allocate the memory for the parameter
        szParam = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, cb);
		
		if (!szParam) {
		LocalEcho(L"WHIS> ERROR Could not alocate params heap");
		goto ExitLevel0;
		}


        // szParam is a CHAR*, so it needs to be converted to a WCHAR*
        // Conver szParam
        MultiByteToWideChar(CP_ACP, 0, argvA[dwIndex], -1, szParam, (lstrlenA(argvA[dwIndex]) + 1) * sizeof(WCHAR));

        // Set wParamChar
        wParamChar = szParam[2];

        // Replace wParamChar
        szParam[2] = '\0';

        if ((!lstrcmpi(HELP_SWITCH_1, szParam)) || (!lstrcmpi(HELP_SWITCH_2, szParam)) || (!lstrcmpi(HELP_SWITCH_3, szParam)) || (!lstrcmpi(HELP_SWITCH_4, szParam))) {
            fnUsageInfo();
            goto ExitLevel0;
        }
        else if (!lstrcmpi(VERBOSE_SWITCH, szParam)) {
            // Set g_bVerbose to TRUE
            g_bVerbose = TRUE;
        }
        else {
            // Reset wParamChar
            szParam[2] = wParamChar;

            // Set wParamChar
            wParamChar = szParam[3];

            if (wParamChar) {
                // Replace wParamChar
                szParam[3] = '\0';

                if ((!lstrcmpi(INIFILE_SWITCH, szParam)) && (!bIniFile)) {
                    // Reset wParamChar
                    szParam[3] = wParamChar;

                    // Set bIniFile to TRUE
                    bIniFile = TRUE;

                    cb = GetFullPathName(&szParam[3], 0, NULL, NULL);
                    // Allocate the memory for the ini file
                    szIniFile = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, cb * sizeof(WCHAR));
					if (!szIniFile) {
					LocalEcho(L"WHIS> ERROR Could not alocate heap for szIniFile");
					goto ExitLevel0;
					}

                    GetFullPathName(&szParam[3], cb, szIniFile, NULL);
                }
                else if ((!lstrcmpi(LOGFILE_SWITCH, szParam)) && (!bLogFile)) {
                    // Reset wParamChar
                    szParam[3] = wParamChar;

                    // Set bLogFile to TRUE
                    bLogFile = TRUE;

                    // Allocate the memory for the log file
                    szLogFile = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(szParam) - 1) * sizeof(WCHAR));
					if (!szLogFile) {
					LocalEcho(L"WHIS> ERROR Could not alocate heap for szLogFile");
					goto ExitLevel0;
					}

                    // Set szLogFile
                    lstrcpy(szLogFile, &szParam[3]);
                }
                else if ((!lstrcmpi(SERVER_SWITCH, szParam)) && (!bServerName)) {
					LocalEcho(L"WHIS> Server Name not supported as argument, use INI file");
                    // Reset wParamChar
                    //szParam[3] = wParamChar;

                    //Set bServerName to TRUE
                    //bServerName = TRUE;

                    //Allocate the memory for the server name
                    //szServerNameW = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(szParam) - 1) * sizeof(WCHAR));
					//if (!szServerNameW) {
					//LocalEcho(L"WHIS> ERROR Could not alocate heap for szServerNameW");
					//goto ExitLevel0;
					//}
                    //szServerNameA = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(szParam) - 1) * sizeof(CHAR));
					//if (!szServerNameA) {
				
					//goto ExitLevel0;
					//}

                    // Set szServerName
                    //lstrcpy(szServerNameW, &szParam[3]);
                    //ideCharToMultiByte(CP_ACP, 0, szServerNameW, -1, szServerNameA, (lstrlenW(szServerNameW) + 1) * sizeof(CHAR), NULL, NULL);
                }
            }
        }

        // Free the parameter
        if (!HeapFree(g_hHeap, 0, szParam))
		{
				LocalEcho(L"WHIS> ERROR Could not free heap for szParam");
		}

    }

    if (!bIniFile) {
        cb = GetFullPathName(FAXAPI_INIFILE, 0, NULL, NULL);
        // Allocate the memory for the ini file
        szIniFile = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, cb * sizeof(WCHAR));
		if (!szIniFile) {
					LocalEcho(L"WHIS> ERROR Could not alocate heap for szIniFile");
					goto ExitLevel0;
					}
        GetFullPathName(FAXAPI_INIFILE, cb, szIniFile, NULL);
    }



    if (!bLogFile) {
        // Allocate the memory for the log file
        szLogFile = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(FAXAPI_LOGFILE) + 1) * sizeof(WCHAR));
		if (!szLogFile) {
					LocalEcho(L"WHIS> ERROR Could not alocate heap for szLogFile");
					goto ExitLevel0;
					}

        // Set szLogFile
        lstrcpy(szLogFile, FAXAPI_LOGFILE);
    }

    if (GetFileAttributes(szIniFile) == 0xFFFFFFFF) {
        LocalEcho(L"Could not find the ini file \"%s\".\n", szIniFile);
        fnUsageInfo();
        goto ExitLevel0;
    }

    if (!LoadFaxAPIs(&ApiInterface)) {
        goto ExitLevel0;
    }

    // Get the section names
    cb = MAX_PATH;

	
	szSectionNames = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, cb * sizeof(WCHAR));
	if (!szSectionNames) {
					LocalEcho(L"WHIS> ERROR Could not alocate heap for szSectionNames");
					goto ExitLevel0;
					}
	
	while (GetPrivateProfileSectionNames(szSectionNames, cb, szIniFile) == (cb - 2)) {
        cb += MAX_PATH;
        szSectionNames = HeapReAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, szSectionNames, cb * sizeof(WCHAR));
		if (!szSectionNames) {
					LocalEcho(L"WHIS> ERROR Could not RE-alocate heap for szSectionNames");
					goto ExitLevel0;
					}
    }

    fnOpenLogFile(szLogFile);

    for (szCurrentSection = szSectionNames; szCurrentSection[0]; szCurrentSection = (LPWSTR) ((DWORD) szCurrentSection + (lstrlen(szCurrentSection) + 1) * sizeof(WCHAR))) {
        ZeroMemory(&DllInterface, sizeof(DLL_INTERFACE));

		// read global section values
		if (wcscmp(szCurrentSection,TEXT("global"))==0)	{

			// print XML header
			fnWriteAndEcho(L"<?xml version=\"1.0\" ?>");
			fnWriteAndEcho(L"<test>");
			fnWriteAndEcho(L"<header>");
	

			
			
			
			// read phone number 1
			ZeroMemory(szWhisPhoneNumber1W, sizeof(szWhisPhoneNumber1W));
			ZeroMemory(szWhisPhoneNumber1A, sizeof(szWhisPhoneNumber1A));
			GetPrivateProfileString(szCurrentSection, GLOBAL_WHIS_PHONE_NUM_1, L"", szWhisPhoneNumber1W, MAX_PATH, szIniFile);
			if (lstrlen(szWhisPhoneNumber1W)==0)	{
				fnWriteAndEcho(L"WHIS> Warning, WhisPhoneNum1 missing, using default: \"%s\" \r\n", TEXT(WHIS_DEFAULT_PHONE_NUMBER));
				lstrcpy(szWhisPhoneNumber1W,TEXT(WHIS_DEFAULT_PHONE_NUMBER));
				WideCharToMultiByte(CP_ACP, 0, szWhisPhoneNumber1W, -1, szWhisPhoneNumber1A, (lstrlenW(szWhisPhoneNumber1W) + 1) * sizeof(CHAR), NULL, NULL);
			}
			else {
				WideCharToMultiByte(CP_ACP, 0, szWhisPhoneNumber1W, -1, szWhisPhoneNumber1A, (lstrlenW(szWhisPhoneNumber1W) + 1) * sizeof(CHAR), NULL, NULL);
			}

						
			// read phone number 2
			ZeroMemory(szWhisPhoneNumber2W, sizeof(szWhisPhoneNumber2W));
			ZeroMemory(szWhisPhoneNumber2A, sizeof(szWhisPhoneNumber2A));
			GetPrivateProfileString(szCurrentSection, GLOBAL_WHIS_PHONE_NUM_2, L"", szWhisPhoneNumber2W, MAX_PATH, szIniFile);
			if (lstrlen(szWhisPhoneNumber2W)==0)	{
				fnWriteAndEcho(L"WHIS> Warning, WhisPhoneNum2 missing, using default: \"%s\" \r\n", TEXT(WHIS_DEFAULT_PHONE_NUMBER));
				lstrcpy(szWhisPhoneNumber2W,TEXT(WHIS_DEFAULT_PHONE_NUMBER));
				WideCharToMultiByte(CP_ACP, 0, szWhisPhoneNumber2W, -1, szWhisPhoneNumber2A, (lstrlenW(szWhisPhoneNumber2W) + 1) * sizeof(CHAR), NULL, NULL);
			}
			else {
				WideCharToMultiByte(CP_ACP, 0, szWhisPhoneNumber2W, -1, szWhisPhoneNumber2A, (lstrlenW(szWhisPhoneNumber2W) + 1) * sizeof(CHAR), NULL, NULL);
			}

		
			// read server name
			ZeroMemory(szWhisRemoteServerNameW, sizeof(szWhisRemoteServerNameW));
			ZeroMemory(szWhisRemoteServerNameA, sizeof(szWhisRemoteServerNameA));
			GetPrivateProfileString(szCurrentSection,GLOBAL_WHIS_REMOTE_SERVER_NAME,L"",szWhisRemoteServerNameW,MAX_PATH,szIniFile);
			if (lstrlen(szWhisRemoteServerNameW)==0)	{
				fnWriteAndEcho(L"WHIS> Warning, szWhisRemoteServerName missing, using NULL server name (local)\r\n");
				ZeroMemory(szWhisRemoteServerNameW, sizeof(szWhisRemoteServerNameW));
				bLocalMode=TRUE;
				
			}
			else	{
				WideCharToMultiByte(CP_ACP, 0, szWhisRemoteServerNameW, -1, szWhisRemoteServerNameA, (lstrlenW(szWhisRemoteServerNameW) + 1) * sizeof(CHAR), NULL, NULL);
				bLocalMode=FALSE;
			}

	
			// read max routing extensions
			//nWhisMaxRoutingMethods = GetPrivateProfileInt(szCurrentSection, GLOBAL_WHIS_MAX_ROUTING_METHODS, 0, szIniFile);
			fnWriteAndEcho(L"WHIS> Using publics from \"%s\" \r\n", FAXAPI_PLATFORM);
			fnWriteAndEcho(L"WHIS> Whistler Phone Number \"%s\" \r\n", szWhisPhoneNumber1W);
			fnWriteAndEcho(L"WHIS> Whistler Phone Number \"%s\" \r\n", szWhisPhoneNumber2W);
			fnWriteAndEcho(L"WHIS> Whistler Remote Server Name \"%s\" \r\n", szWhisRemoteServerNameW);

#ifdef FAXAPI_W2K
	fnWriteAndEcho(L"$$$ Summery for this test, Name:Legacy C API, Id:21, Version:%s",FAXAPI_PLATFORM);
	fnWriteAndEcho(L"\t<metatest name=\"Legacy C API\" id=\"21\" version=\"%s\"></metatest>",FAXAPI_PLATFORM);
#else
	fnWriteAndEcho(L"$$$ Summery for this test, Name:Legacy C API, Id:20, Version:%s",FAXAPI_PLATFORM);
	fnWriteAndEcho(L"\t<metatest name=\"Legacy C API\" id=\"20\" version=\"%s\"></metatest>",FAXAPI_PLATFORM);
#endif

	fnWriteAndEcho(L"\t<run phone1=\"%s\" phone2=\"%s\" server=\"%s\"></run>",szWhisPhoneNumber1W,szWhisPhoneNumber2W,szWhisRemoteServerNameW);
	
	fnWriteAndEcho(L"</header>");
	fnWriteAndEcho(L"<body>");
			//fnWriteAndEcho(L"WHIS> Whistler Max Routing methods %d \r\n", nWhisMaxRoutingMethods);
		}
		else
		{
			if (LoadFaxAPIDll(szIniFile, szCurrentSection, &DllInterface)) {

		        ZeroMemory(szDescription, sizeof(szDescription));
			    nNumCasesLocal = 0;
				nNumCasesServer = 0;
				nNumCasesAttempted = 0;
				nNumCasesPassed = 0;
			
	            __try {
		            DllInterface.pFaxAPIDllInit(g_hHeap, ApiInterface, fnWriteLogFileW, fnWriteLogFileA);
			    }
				__except(EXCEPTION_EXECUTE_HANDLER) {
					fnWriteAndEcho(L"Exception occurred in FaxAPIDllInit() for section \"%s\".  ec = 0x%08x.\r\n", szCurrentSection, GetExceptionCode());
					goto DllFailed;
				}

				GetPrivateProfileString(szCurrentSection, DLL_DESCRIPTION, L"", szDescription, MAX_PATH, szIniFile);
				nNumCasesLocal = GetPrivateProfileInt(szCurrentSection, DLL_LOCAL_CASES, 0, szIniFile);
				nNumCasesServer = GetPrivateProfileInt(szCurrentSection, DLL_SERVER_CASES, 0, szIniFile);
				dwWhisTestMode = GetPrivateProfileInt(szCurrentSection, DLL_WHIS_TEST_MODE, 0, szIniFile);
				fnWriteAndEcho(L"\n\n\nSection: %s\r\nDescription: %s\r\nNumber of local cases: %d\r\nNumber of server cases: %d\r\nTest Mode: %d\r\n", szCurrentSection, szDescription, nNumCasesLocal, nNumCasesServer,dwWhisTestMode);
				fnWriteAndEcho(L"<section name=\"%s\" dll=\"%s\" cases=\"%d\" testmode=\"%d\">",szCurrentSection, szDescription, nNumCasesLocal, dwWhisTestMode);

				if (dwWhisTestMode == WHIS_TEST_MODE_DONT_CATCH_EXCEPTIONS)
				{
							fnWriteAndEcho(L"WHIS> Running extended test (NOTICE: WILL NOT CATCH EXCEPTIONS)...\r\n");
							if (bLocalMode)	{
								fnWriteAndEcho(L"WHIS> LOCAL MODE SET\r\n");
								bTestResult=!DllInterface.pFaxAPIDllTest(szWhisPhoneNumber1W,szWhisPhoneNumber1A,NULL, NULL, nNumCasesLocal, nNumCasesServer, &nNumCasesAttempted, &nNumCasesPassed,WHIS_TEST_MODE_DO);
							}
							else {
								fnWriteAndEcho(L"WHIS> SERVER MODE SET\r\n");
								bTestResult=!DllInterface.pFaxAPIDllTest(szWhisPhoneNumber1W,szWhisPhoneNumber1A,szWhisRemoteServerNameW, szWhisRemoteServerNameA, nNumCasesLocal, nNumCasesServer, &nNumCasesAttempted, &nNumCasesPassed,WHIS_TEST_MODE_DO);
								
							}
							
							if (bTestResult)	{
								fnWriteAndEcho(L"pFaxAPIDllTest() returned FALSE for section \"%s\".\r\n", szCurrentSection);
								}
							else {
								fnWriteAndEcho(L"pFaxAPIDllTest() returned TRUE for section \"%s\".\r\n", szCurrentSection);
								}
				} // (whis) end of don't catch exceptions
				else if (dwWhisTestMode != WHIS_TEST_MODE_SKIP) // (whis) INI configured to run this case
				{
					__try {
							fnWriteAndEcho(L"WHIS> Running extended test...\r\n");
							if (bLocalMode)	{
								fnWriteAndEcho(L"WHIS> LOCAL MODE SET\r\n");
								bTestResult=!DllInterface.pFaxAPIDllTest(szWhisPhoneNumber1W,szWhisPhoneNumber1A,NULL, NULL, nNumCasesLocal, nNumCasesServer, &nNumCasesAttempted, &nNumCasesPassed,dwWhisTestMode);
							}
							else {
								fnWriteAndEcho(L"WHIS> SERVER MODE SET\r\n");
								bTestResult=!DllInterface.pFaxAPIDllTest(szWhisPhoneNumber1W,szWhisPhoneNumber1A,szWhisRemoteServerNameW, szWhisRemoteServerNameA, nNumCasesLocal, nNumCasesServer, &nNumCasesAttempted, &nNumCasesPassed,dwWhisTestMode);
								
							}
							
							if (bTestResult)	{
								fnWriteAndEcho(L"pFaxAPIDllTest() returned FALSE for section \"%s\".\r\n", szCurrentSection);
								}
							else {
								fnWriteAndEcho(L"pFaxAPIDllTest() returned TRUE for section \"%s\".\r\n", szCurrentSection);
								}
							}
					__except(EXCEPTION_EXECUTE_HANDLER) {
							fnWriteAndEcho(L"Exception occurred in pFaxAPIDllTest() for section \"%s\".  ec = 0x%08x.\r\n", szCurrentSection, GetExceptionCode());
							fnWriteAndEcho(L"\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n");
							fnWriteAndEcho(L"\n\t</function>");
							fnWriteAndEcho(L"\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\" skip=\"-1\"></summary>");
							fnWriteAndEcho(L"\n\t</section>");
							goto DllFailed;
							}  // of try-except
				} // (whis) end of normal call to API DLL
				else {
				fnWriteAndEcho(L"Section: %s\r\nCanceled by user (see INI file for details)\r\n", szCurrentSection);
				}// (whis) end of don't run test at all

				
				fnWriteAndEcho(L"Section: %s\r\nNumber of cases attempted: %d\r\nNumber of cases passed: %d\r\n", szCurrentSection, nNumCasesAttempted, nNumCasesPassed);
				if (bLocalMode)		{
						nWhisNumSkipped=nNumCasesLocal-nNumCasesAttempted;
						nWhisNumFailed=nNumCasesAttempted-nNumCasesPassed;
				}
				else	{
						nWhisNumSkipped=nNumCasesServer-nNumCasesAttempted;
						nWhisNumFailed=nNumCasesAttempted-nNumCasesPassed;
				}

				
				fnWriteAndEcho(L"*** Number of cases skipped %d\r\n*** Number of cases failed %d\r\n",nWhisNumSkipped,nWhisNumFailed);
				fnWriteAndEcho(L"\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\" skip=\"%d\"></summary>",nNumCasesAttempted,nNumCasesPassed,nWhisNumFailed,nWhisNumSkipped);
				fnWriteAndEcho(L"\n\t</section>");
				nTotCasesAttempted+=nNumCasesAttempted;
				nTotCasesPassed+=nNumCasesPassed;

				


	DllFailed:
		        FreeLibrary(DllInterface.hInstance);
				
			}
		}
		
	}
	
		fnWriteAndEcho(L"\n\t</body>");
		fnWriteAndEcho(L"\n\t</test>");
		CloseHandle(g_hLogFile);



		iVal = 0;

	
	
		// Free the section names
		if (!HeapFree(g_hHeap, 0, szSectionNames))	{
		LocalEcho(L"WHIS> ERROR Could not free heap from szSectionNames");
		}

		// Free the phone number
		//if (szWhisPhoneNumber1W) {
		//	if (!HeapFree(g_hHeap, 0, szWhisPhoneNumber1W))	{
		//			LocalEcho(L"WHIS> ERROR Could not free heap from szWhisPhoneNumber1W");
		//	}
		//	if (!HeapFree(g_hHeap, 0, szWhisPhoneNumber1A))	{
		//			LocalEcho(L"WHIS> ERROR Could not free heap from szWhisPhoneNumber1A");
		//	}
		//}


		FreeLibrary(ApiInterface.hInstance);

		fnWriteAndEcho(L"\n\nSummery\n------------------");
		fnWriteAndEcho(L"\nNumber of cases attempted: %d\r\nNumber of cases passed: %d\r\n", nTotCasesAttempted, nTotCasesPassed);

	ExitLevel0:

		

		//if (szServerNameW) {
			// Free the server name
		//	if (!HeapFree(g_hHeap, 0, szServerNameW))
		//	{
		//		LocalEcho(L"WHIS> ERROR Could not free heap from szServerNameW");
		//	}
		//	if (!HeapFree(g_hHeap, 0, szServerNameA))
		//	{
		//		LocalEcho(L"WHIS> ERROR Could not free heap from szServerNameA");
		//	}
		//}

		
		if (szIniFile) {
			// Free the ini file name
			if (!HeapFree(g_hHeap, 0, szIniFile)) {
				LocalEcho(L"WHIS> ERROR Could not free heap from szIniFile");
			}

		}
		if (szLogFile) {
	        // Free the log file name
			if (!HeapFree(g_hHeap, 0, szLogFile)) {
			LocalEcho(L"WHIS> ERROR Could not free heap from szIniFile");
			}
		}

		return iVal;
	}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legacywin32\xml\printapi\printapi.c ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

  printapi.c

Abstract:

  PrintApi: Fax API Test Dll: Client Print APIs
    1) FaxStartPrintJob()
    2) FaxPrintCoverPage()
    3) FaxSendDocument()
    4) FaxSendDocumentForBroadcast()

Author:

  Steven Kehrli (steveke) 8/28/1998

--*/

/*++

  Whistler Version:

  Lior Shmueli (liors) 23/11/2000

 ++*/

#include <wtypes.h>

#include "dllapi.h"

// g_hHeap is the handle to the heap
HANDLE           g_hHeap = NULL;
// g_ApiInterface is the API_INTERFACE structure
API_INTERFACE    g_ApiInterface;
// fnWriteLogFile is the pointer to the function to write a string to the log file
PFNWRITELOGFILE  fnWriteLogFile = NULL;

// whistler phone number
//LPCTSTR  g_szWhisPhoneNumber;
LPCTSTR		   g_szWhisPhoneNumber=NULL;
BOOL		   g_bRealSend=FALSE;


DWORD
DllEntry(
    HINSTANCE  hInstance,
    DWORD      dwReason,
    LPVOID     pContext
)
/*++

Routine Description:

  DLL entry point

Arguments:

  hInstance - handle to the module
  dwReason - indicates the reason for being called
  pContext - context

Return Value:

  TRUE on success

--*/
{
    return TRUE;
}

VOID WINAPI
FaxAPIDllInit(
    HANDLE            hHeap,
    API_INTERFACE     ApiInterface,
    PFNWRITELOGFILEW  pfnWriteLogFileW,
    PFNWRITELOGFILEA  pfnWriteLogFileA
)
{
    // Set g_hHeap
    g_hHeap = hHeap;
    // Set g_ApiInterface
    g_ApiInterface = ApiInterface;
#ifdef UNICODE
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileW;
#else
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileA;
#endif

    return;
}

VOID
fnFaxStartPrintJob(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxStartPrintJob()

Return Value:

  None

--*/
{
    // FaxPrintInfo is the fax print info
    FAX_PRINT_INFO    FaxPrintInfo;
    // dwFaxId is the fax job id
    DWORD             dwFaxId;
    // FaxContextInfo is the fax context
    FAX_CONTEXT_INFO  FaxContextInfo;
    
	// not used, since all suite can be used on a remote printer...
	// szRemotePrinter is the name of the remote fax printer
    // LPTSTR            szRemotePrinter;
	//

	// flag for fax abortion
	BOOL				bAborted=FALSE;
	// szFaxPrinterName is the name of the fax printer
    LPTSTR            szFaxPrinterName=NULL;
	// szFaxServerName is the name of the fax server, as it should be on the FaxConextInfo struct
    TCHAR            szFaxServerName[MAX_PATH];

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxStartPrintJob().\r\n"));

    ZeroMemory(&FaxPrintInfo, sizeof(FAX_PRINT_INFO));
    FaxPrintInfo.SizeOfStruct = sizeof(FAX_PRINT_INFO);
    FaxPrintInfo.RecipientNumber = g_szWhisPhoneNumber;

	fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);
	
	if (szServerName) {

        szFaxPrinterName = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(szServerName) + 7) * sizeof(TCHAR));
          lstrcpy(szFaxPrinterName, TEXT("\\\\"));
          lstrcat(szFaxPrinterName, szServerName);
		  lstrcpy(szFaxServerName,szFaxPrinterName);
		  lstrcat(szFaxPrinterName, TEXT("\\"));
          lstrcat(szFaxPrinterName, TEXT(WHIS_FAX_PRINTER_NAME));
	}
	  else {
		  szFaxPrinterName = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(szServerName) + 7) * sizeof(TCHAR));
		  lstrcpy(szFaxPrinterName, TEXT(WHIS_FAX_PRINTER_NAME));
		  lstrcpy(szFaxServerName,TEXT("Should be NULL"));

	  }

	  fnWriteLogFile(TEXT("WHIS> Fax Printer name is: %s\r\n"), szFaxPrinterName);

      ZeroMemory(&FaxContextInfo, sizeof(FAX_CONTEXT_INFO));
      FaxContextInfo.SizeOfStruct = sizeof(FAX_CONTEXT_INFO);

    // Start a fax
      (*pnNumCasesAttempted)++;
	  dwFuncCasesAtt++;
      fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
      if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
          fnWriteLogFile(TEXT("FaxStartPrintJob() failed.  The error code is 0x%08x.  This is an error.  FaxStartPrintJob() should succeed.\r\n"), GetLastError());
	  }
      else {
          if (FaxContextInfo.hDC == NULL) {
              fnWriteLogFile(TEXT("hDC is NULL.  This is an error.  hDC should not be NULL.\r\n"));
			}

          if ((szServerName && lstrcmp(FaxContextInfo.ServerName,szFaxServerName) !=0) || (!szServerName && FaxContextInfo.ServerName[0])) {
              fnWriteLogFile(TEXT("ServerName: Received: %s, Expected: %s.\r\n"), FaxContextInfo.ServerName, szFaxServerName);
			}

		  AbortDoc(FaxContextInfo.hDC);
	  	  DeleteDC(FaxContextInfo.hDC);
	  	  (*pnNumCasesPassed)++;
	  	  dwFuncCasesPass++;
		}

      (*pnNumCasesAttempted)++;
	  dwFuncCasesAtt++;
      fnWriteLogFile(TEXT("Invalid szFaxPrinterName.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
      if (g_ApiInterface.FaxStartPrintJob(TEXT("InvalidFaxPrinterName"), &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
          fnWriteLogFile(TEXT("FaxStartPrintJob() returned TRUE.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PRINTER_NAME (0x%08x).\r\n"), ERROR_INVALID_PRINTER_NAME);
           //End this fax
          AbortDoc(FaxContextInfo.hDC);
          DeleteDC(FaxContextInfo.hDC);
      }
      else if (GetLastError() != ERROR_INVALID_PRINTER_NAME) {
          fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PRINTER_NAME (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PRINTER_NAME);
      }
      else {
          (*pnNumCasesPassed)++;
		  dwFuncCasesPass++;
      }

	  (*pnNumCasesAttempted)++;
	  dwFuncCasesAtt++;
      fnWriteLogFile(TEXT("pFaxPrintInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
      if (g_ApiInterface.FaxStartPrintJob(TEXT("Fax"), NULL, &dwFaxId, &FaxContextInfo)) {
          fnWriteLogFile(TEXT("FaxStartPrintJob() returned TRUE.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
           //End this fax
          AbortDoc(FaxContextInfo.hDC);
          DeleteDC(FaxContextInfo.hDC);
      }
      else if (GetLastError() != ERROR_INVALID_PARAMETER) {
          fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
      }
      else {
          (*pnNumCasesPassed)++;
		  dwFuncCasesPass++;
      }

      (*pnNumCasesAttempted)++;
	  dwFuncCasesAtt++;
      fnWriteLogFile(TEXT("dwFaxId = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
      if (g_ApiInterface.FaxStartPrintJob(TEXT("Fax"), &FaxPrintInfo, NULL, &FaxContextInfo)) {
          fnWriteLogFile(TEXT("FaxStartPrintJob() returned TRUE.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
           //End this fax
          AbortDoc(FaxContextInfo.hDC);
          DeleteDC(FaxContextInfo.hDC);
      }
      else if (GetLastError() != ERROR_INVALID_PARAMETER) {
          fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
      }
      else {
          (*pnNumCasesPassed)++;
		  dwFuncCasesPass++;
      }

      (*pnNumCasesAttempted)++;
	  dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxContextInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxStartPrintJob(TEXT("Fax"), &FaxPrintInfo, &dwFaxId, NULL)) {
        fnWriteLogFile(TEXT("FaxStartPrintJob() returned TRUE.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        // End this fax
        AbortDoc(FaxContextInfo.hDC);
        DeleteDC(FaxContextInfo.hDC);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    FaxPrintInfo.SizeOfStruct = 0;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxPrintInfo->SizeOfStruct = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxStartPrintJob(TEXT("Fax"), &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
        fnWriteLogFile(TEXT("FaxStartPrintJob() returned TRUE.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        // End this fax
        AbortDoc(FaxContextInfo.hDC);
        DeleteDC(FaxContextInfo.hDC);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }
    FaxPrintInfo.SizeOfStruct = sizeof(FAX_PRINT_INFO);

    FaxPrintInfo.RecipientNumber = NULL;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxPrintInfo->RecipientNumber = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxStartPrintJob(TEXT("Fax"), &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
        fnWriteLogFile(TEXT("FaxStartPrintJob() returned TRUE.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        // End this fax
        AbortDoc(FaxContextInfo.hDC);
        DeleteDC(FaxContextInfo.hDC);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }
    FaxPrintInfo.RecipientNumber = g_szWhisPhoneNumber;

	fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);

    
	#ifdef FAXAPI_W2K
		FaxPrintInfo.DrProfileName = TEXT("PrintApi");
		FaxPrintInfo.DrEmailAddress = TEXT("PrintApi");
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;
    
		fnWriteLogFile(TEXT("pFaxPrintInfo->DrEmailAddress.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		if (g_ApiInterface.FaxStartPrintJob(TEXT("Fax"), &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
			fnWriteLogFile(TEXT("FaxStartPrintJob() returned TRUE.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
			// End this fax
			AbortDoc(FaxContextInfo.hDC);
			DeleteDC(FaxContextInfo.hDC);
		}
		else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		}
		else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
		}
		FaxPrintInfo.DrProfileName = NULL;
		FaxPrintInfo.DrEmailAddress = NULL;
	#else
		fnWriteLogFile(TEXT("WHIS> Skipped case in whistler publics: pFaxPrintInfo->DrProfileName & pFaxPrintInfo->DrEmailAddress.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	#endif
	
	HeapFree(g_hHeap, 0, szFaxPrinterName);

    //if (szServerName) {
	//	fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
    //  szRemotePrinter = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(szServerName) + 7) * sizeof(TCHAR));
    //    lstrcpy(szRemotePrinter, TEXT("\\\\"));
    //    lstrcat(szRemotePrinter, szServerName);
	//	lstrcat(szRemotePrinter, TEXT("\\"));
    //   lstrcat(szRemotePrinter, TEXT(WHIS_FAX_PRINTER_NAME));

    //   (*pnNumCasesAttempted)++;
    //   fnWriteLogFile(TEXT("Remote Fax Printer. (Printer Name: %s) Test Case: %d.\r\n"),szRemotePrinter, *pnNumCasesAttempted);
    //   if (!g_ApiInterface.FaxStartPrintJob(szRemotePrinter, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    //      fnWriteLogFile(TEXT("FaxStartPrintJob() failed.  The error code is 0x%08x.  This is an error.  FaxStartPrintJob() should succeed.\r\n"), GetLastError());
    //    }
    //    else {
	//		 AbortDoc(FaxContextInfo.hDC);
	//			 DeleteDC(FaxContextInfo.hDC);
	//		 (*pnNumCasesPassed)++;

    //    }
	//
    //    
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxStartPrintJob, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
}

VOID
fnFaxPrintCoverPage(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	BOOL	 bTestLimits
)
/*++

Routine Description:

  FaxPrintCoverPage()

Return Value:

  None

--*/
{
    // FaxPrintInfo is the fax print info
    FAX_PRINT_INFO      FaxPrintInfo;
    // dwFaxId is the fax job id
    DWORD               dwFaxId;
    // FaxContextInfo is the fax context
    FAX_CONTEXT_INFO    FaxContextInfo;
    // CoverPageInfo is the cover page info
    FAX_COVERPAGE_INFO  CoverPageInfo;
    // FaxContextInfohDC is the hDC from the fax context
    HDC                 FaxContextInfohDC;
    // szCoverPageName is the cover page name
    TCHAR               szCoverPageName[MAX_PATH];

	// szFaxPrinterName is the name of the fax printer
    LPTSTR            szFaxPrinterName=NULL;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

    fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxPrintCoverPage().\r\n"));

	

    ZeroMemory(&FaxPrintInfo, sizeof(FAX_PRINT_INFO));
    FaxPrintInfo.SizeOfStruct = sizeof(FAX_PRINT_INFO);


	fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);
	FaxPrintInfo.RecipientNumber = g_szWhisPhoneNumber;
	
    ZeroMemory(&FaxContextInfo, sizeof(FAX_CONTEXT_INFO));
    FaxContextInfo.SizeOfStruct = sizeof(FAX_CONTEXT_INFO);

    ZeroMemory(&CoverPageInfo, sizeof(FAX_COVERPAGE_INFO));
    CoverPageInfo.SizeOfStruct = sizeof(FAX_COVERPAGE_INFO);


    if (szServerName) {
	    szFaxPrinterName = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(szServerName) + 7) * sizeof(TCHAR));
        lstrcpy(szFaxPrinterName, TEXT("\\\\"));
        lstrcat(szFaxPrinterName, szServerName);
		lstrcat(szFaxPrinterName, TEXT("\\"));
        lstrcat(szFaxPrinterName, TEXT(WHIS_FAX_PRINTER_NAME));
	}
	else {
		szFaxPrinterName = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(szServerName) + 7) * sizeof(TCHAR));
		lstrcpy(szFaxPrinterName, TEXT(WHIS_FAX_PRINTER_NAME));
	}

	fnWriteLogFile(TEXT("WHIS> Fax Printer name is: %s\r\n"), szFaxPrinterName);


    // Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
        return;
    }

   CoverPageInfo.UseServerCoverPage = TRUE;

    CoverPageInfo.CoverPageName = TEXT("confdent.cov");
	CoverPageInfo.Subject = TEXT("1/10_FPCP:SRV-confdent.cov");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Server .cov). File: confdent.cov  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    
	
	// Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
        return;
    }

    CoverPageInfo.CoverPageName = TEXT("coverpg.lnk");
	CoverPageInfo.Subject = TEXT("2/10_FPCP:SRV-coverpg.lnk");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Server .lnk). File: coverpg.lnk  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    

    // Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
        return;
    }
	
	CoverPageInfo.CoverPageName = TEXT("confdent");
	CoverPageInfo.Subject = TEXT("3/10_FPCP:SRV-confdent");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Server .cov). File: confdent  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    
	// Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
        return;
    }

    CoverPageInfo.CoverPageName = TEXT("coverpg");
	CoverPageInfo.Subject = TEXT("4/10_FPCP:SRV-coverpg");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Server .lnk). File: coverpg  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    
	// Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
        return;
    }

    CoverPageInfo.UseServerCoverPage = FALSE;

    CoverPageInfo.CoverPageName = TEXT("confdent.cov");
	CoverPageInfo.Subject = TEXT("5/10_FPCP:LOC-confdent.cov");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Client .cov). File: confdent.cov  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    

    // Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
        return;
    }
	
	CoverPageInfo.CoverPageName = TEXT("coverpg.lnk");
	CoverPageInfo.Subject = TEXT("6/10_FPCP:LOC-coverpg.lnk");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Client .lnk). File: coverpg.lnk  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    

    
	// Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
        return;
    }
	
	CoverPageInfo.CoverPageName = TEXT("confdent");
	CoverPageInfo.Subject = TEXT("7/10_FPCP:LOC-confdent");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Client .cov). File: confdent  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    

    // Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
        return;
    }
	
	CoverPageInfo.CoverPageName = TEXT("coverpg");
	CoverPageInfo.Subject = TEXT("8/10_FPCP:LOC-coverpg");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Client .lnk). File: coverpg  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    

    
	// Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
        return;
    }
	
	GetFullPathName(TEXT("confdent.cov"), sizeof(szCoverPageName) / sizeof(TCHAR), szCoverPageName, NULL);
    CoverPageInfo.CoverPageName = szCoverPageName;
	CoverPageInfo.Subject = TEXT("9/10_FPCP:FullPath(confdent.cov)");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Client / Full Path .cov). Path: %s Test Case: %d.\r\n"),szCoverPageName, *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    

    // Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
        return;
    }
	
	GetFullPathName(TEXT("coverpg.lnk"), sizeof(szCoverPageName) / sizeof(TCHAR), szCoverPageName, NULL);
    CoverPageInfo.CoverPageName = szCoverPageName;
	CoverPageInfo.Subject = TEXT("10/10_FPCP:FullPath(coverpg.lnk)");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Client / Full Path .lnk). Path %s Test Case: %d.\r\n"), szCoverPageName,*pnNumCasesAttempted);
    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxContextInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxPrintCoverPage(NULL, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() returned TRUE.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pCoverPageInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, NULL)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() returned TRUE.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    FaxContextInfo.SizeOfStruct = 0;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxContextInfo->SizeOfStruct = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() returned TRUE.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }
    FaxContextInfo.SizeOfStruct = sizeof(FAX_CONTEXT_INFO);

    FaxContextInfohDC = FaxContextInfo.hDC;
    FaxContextInfo.hDC = NULL;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxContextInfo->hDC = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() returned TRUE.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }
    FaxContextInfo.hDC = FaxContextInfohDC;

    CoverPageInfo.SizeOfStruct = 0;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pCoverPageInfo->SizeOfStruct = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() returned TRUE.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }
    CoverPageInfo.SizeOfStruct = sizeof(FAX_COVERPAGE_INFO);

    CoverPageInfo.CoverPageName = NULL;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pCoverPageInfo->CoverPageName = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() returned TRUE.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }



    CoverPageInfo.CoverPageName = TEXT("InvalidCoverPageName");
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Invalid pCoverPageInfo->CoverPageName.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("FaxPrintCoverPage() returned TRUE.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_FILE_NOT_FOUND (0x%08x).\r\n"), ERROR_FILE_NOT_FOUND);
    }
    else if (GetLastError() != ERROR_FILE_NOT_FOUND) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_FILE_NOT_FOUND (0x%08x).\r\n"), GetLastError(), ERROR_FILE_NOT_FOUND);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }


    // End this fax
	AbortDoc(FaxContextInfo.hDC);
	DeleteDC(FaxContextInfo.hDC);
	HeapFree(g_hHeap, 0, szFaxPrinterName);
	
fnWriteLogFile(TEXT("$$$ Summery for FaxPrintCoverPage, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
}

VOID
fnFaxSendDocument(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxSendDocument()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE              hFaxSvcHandle;
    // pFaxConfig is a pointer to the fax configuration
    PFAX_CONFIGURATION  pFaxConfig;
    // FaxJobParam is the fax job params
    FAX_JOB_PARAM       FaxJobParam;
    // CoverPageInfo is the cover page info
    FAX_COVERPAGE_INFO  CoverPageInfo;
    // dwFaxId is the fax job id
    DWORD               dwFaxId;
    // szCoverPageName is the cover page name
    TCHAR               szCoverPageName[MAX_PATH];

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxSendDocument().\r\n"));

    ZeroMemory(&FaxJobParam, sizeof(FAX_JOB_PARAM));
    FaxJobParam.SizeOfStruct = sizeof(FAX_JOB_PARAM);
    FaxJobParam.RecipientNumber = g_szWhisPhoneNumber;

	fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);

    ZeroMemory(&CoverPageInfo, sizeof(FAX_COVERPAGE_INFO));
    CoverPageInfo.SizeOfStruct = sizeof(FAX_COVERPAGE_INFO);

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not GET configuration, The error code is 0x%08x.\r\n"), GetLastError());
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    pFaxConfig->PauseServerQueue = TRUE;

    if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not SET configuration, The error code is 0x%08x.\r\n"), GetLastError());
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (kodak.tif).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("kodak.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
		if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
		(*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (fax.tif).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (.txt).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("printapi.txt"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (.doc).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("printapi.doc"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (.xls).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("printapi.xls"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (.ppt).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("printapi.ppt"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }


    CoverPageInfo.UseServerCoverPage = TRUE;

    CoverPageInfo.CoverPageName = TEXT("confdent.cov");
	CoverPageInfo.Subject = TEXT("1/10_FSD:SRV-confdent.cov");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Server .cov). File: confdent.cov  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    CoverPageInfo.CoverPageName = TEXT("coverpg.lnk");
	CoverPageInfo.Subject = TEXT("2/10_FSD:SRV-coverpg.lnk");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Server .lnk). File coverpg.lnk  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    CoverPageInfo.CoverPageName = TEXT("confdent");
	CoverPageInfo.Subject = TEXT("3/10_FSD:SRV-confdent");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Server .cov). File: confdent  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    CoverPageInfo.CoverPageName = TEXT("coverpg");
	CoverPageInfo.Subject = TEXT("4/10_FSD:SRV-coverpg");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Server .lnk). File: coverpg  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    CoverPageInfo.UseServerCoverPage = FALSE;

    CoverPageInfo.CoverPageName = TEXT("confdent.cov");
	CoverPageInfo.Subject = TEXT("5/10_FSD:LOC-confdent.cov");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Client .cov). File: confdent.cov  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    CoverPageInfo.CoverPageName = TEXT("coverpg.lnk");
	CoverPageInfo.Subject = TEXT("6/10_FSD:LOC-coverpg.lnk");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Client .lnk). File: coverpg.lnk  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    CoverPageInfo.CoverPageName = TEXT("confdent");
	CoverPageInfo.Subject = TEXT("7/10_FSD:LOC-confdent");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Client .cov). File: confdent  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    CoverPageInfo.CoverPageName = TEXT("coverpg");
	CoverPageInfo.Subject = TEXT("8/10_FSD:LOC-coverpg");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Client .lnk). File: coverpg  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    GetFullPathName(TEXT("confdent.cov"), sizeof(szCoverPageName) / sizeof(TCHAR), szCoverPageName, NULL);


    CoverPageInfo.CoverPageName = szCoverPageName;
	CoverPageInfo.Subject = TEXT("9/10_FSD:FullPath(confdent.cov)");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Client / Full Path .cov). Path: %s Test Case: %d.\r\n"),szCoverPageName, *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    GetFullPathName(TEXT("coverpg.lnk"), sizeof(szCoverPageName) / sizeof(TCHAR), szCoverPageName, NULL);
    CoverPageInfo.CoverPageName = szCoverPageName;
	CoverPageInfo.Subject = TEXT("10/10_FSD:FullPath(confdent.lnk)");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Client / Full Path .lnk).  Path: %s Test Case: %d.\r\n"), szCoverPageName, *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocument(NULL, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("szDocument = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, NULL, &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxJobParam = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), NULL, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Invalid document.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("InvalidDocumentName"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_FILE_NOT_FOUND (0x%08x).\r\n"), ERROR_FILE_NOT_FOUND);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_FILE_NOT_FOUND) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_FILE_NOT_FOUND (0x%08x).\r\n"), GetLastError(), ERROR_FILE_NOT_FOUND);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Invalid document type (.bad).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("printapi.bad"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), ERROR_INVALID_DATA);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_DATA) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_DATA);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    FaxJobParam.SizeOfStruct = 0;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxJobParam->SizeOfStruct = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }
    FaxJobParam.SizeOfStruct = sizeof(FAX_JOB_PARAM);

    FaxJobParam.RecipientNumber = NULL;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxJobParam->RecipientNumber = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }
    FaxJobParam.RecipientNumber = g_szWhisPhoneNumber;

	fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);

    FaxJobParam.ScheduleAction = -1;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxJobParam->ScheduleAction = -1.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }
    FaxJobParam.ScheduleAction = 0;

    FaxJobParam.DeliveryReportType = -1;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxJobParam->DeliveryReportType = -1.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }
    FaxJobParam.DeliveryReportType = DRT_NONE;

    CoverPageInfo.SizeOfStruct = 0;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pCoverPageInfo->SizeOfStruct = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), ERROR_INVALID_DATA);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_DATA) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_DATA);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }
    CoverPageInfo.SizeOfStruct = sizeof(FAX_COVERPAGE_INFO);

    CoverPageInfo.CoverPageName = NULL;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pCoverPageInfo->CoverPageName = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_FILE_NOT_FOUND (0x%08x).\r\n"), ERROR_FILE_NOT_FOUND);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_FILE_NOT_FOUND) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_FILE_NOT_FOUND (0x%08x).\r\n"), GetLastError(), ERROR_FILE_NOT_FOUND);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    CoverPageInfo.CoverPageName = TEXT("InvalidCoverPageName");
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Invalid pCoverPageInfo->CoverPageName.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_FILE_NOT_FOUND (0x%08x).\r\n"), ERROR_FILE_NOT_FOUND);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_FILE_NOT_FOUND) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_FILE_NOT_FOUND (0x%08x).\r\n"), GetLastError(), ERROR_FILE_NOT_FOUND);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    pFaxConfig->PauseServerQueue = FALSE;
    g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
    g_ApiInterface.FaxFreeBuffer(pFaxConfig);

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }


//    not used, design changed so all suite will run in remote mode
//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
//        if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
//   		   fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
//           return;
 //      }
//		else
//		{
//			fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
//		}
//
  //      if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
	//		fnWriteLogFile(TEXT("WHIS> ERROR: Can not GET configuration, The error code is 0x%08x.\r\n"), GetLastError());
      //      // Disconnect from the fax server
        //    g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //pFaxConfig->PauseServerQueue = TRUE;

        //if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
		//	fnWriteLogFile(TEXT("WHIS> ERROR: Can not SET configuration, The error code is 0x%08x.\r\n"), GetLastError());
        //    g_ApiInterface.FaxFreeBuffer(pFaxConfig);
            // Disconnect from the fax server
        //    g_ApiInterface.FaxClose(hFaxSvcHandle);
        //    return;
        //}

        //(*pnNumCasesAttempted)++;
        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("kodak.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        //    fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
        //}
        //else {
		//	if (!g_bRealSend)	{
		//					g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		//	}
        //    (*pnNumCasesPassed)++;
        //}

        //pFaxConfig->PauseServerQueue = FALSE;
        //g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        //g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxSendDocument, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
}

BOOL CALLBACK
fnBroadcastCallback(
    HANDLE               hFaxSvcHandle,
    DWORD                dwRecipientNumber,
    LPVOID               lpContext,
    PFAX_JOB_PARAM       pFaxJobParam,
    PFAX_COVERPAGE_INFO  pCoverPageInfo
)
/*++

Routine Description:

  FaxSendDocumentForBroadcast() callback

Return Value:

  TRUE to enumerate another recipient

--*/
{
    BOOL     bRet;
    LPDWORD  pdwIndex;

    pdwIndex = (LPDWORD) lpContext;

    if (*pdwIndex != (dwRecipientNumber - 1)) {
        return FALSE;
    }

    switch (*pdwIndex) {
        case 0:
            pFaxJobParam->RecipientNumber = g_szWhisPhoneNumber;

			fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);

            pCoverPageInfo->UseServerCoverPage = TRUE;
            pCoverPageInfo->CoverPageName = TEXT("confdent.cov");
            bRet = TRUE;
            break;

        case 1:
            pFaxJobParam->RecipientNumber = g_szWhisPhoneNumber;

			fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);

            pCoverPageInfo->UseServerCoverPage = TRUE;
            pCoverPageInfo->CoverPageName = TEXT("confdent.cov");
            bRet = TRUE;
            break;

        default:
            bRet = FALSE;
            break;
    }

    (*pdwIndex)++;
    return bRet;
}

VOID
fnFaxSendDocumentForBroadcast(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxSendDocumentForBroadcast()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE              hFaxSvcHandle;
    // pFaxConfig is a pointer to the fax configuration
    PFAX_CONFIGURATION  pFaxConfig;
    // dwFaxId is the fax job id
    DWORD               dwFaxId;

    DWORD               dwIndex;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxSendDocumentForBroadcast().\r\n"));



    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not GET configuration, The error code is 0x%08x.\r\n"), GetLastError());
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    pFaxConfig->PauseServerQueue = TRUE;

    if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not SET configuration, The error code is 0x%08x.\r\n"), GetLastError());
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }


    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    dwIndex = 0;
    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSendDocumentForBroadcast(hFaxSvcHandle, TEXT("fax.tif"), &dwFaxId, fnBroadcastCallback, &dwIndex)) {
        fnWriteLogFile(TEXT("FaxSendDocumentForBroadcast() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocumentForBroadcast() should succeed.\r\n"), GetLastError());
    }
    else {
        if (dwIndex != 3) {
            fnWriteLogFile(TEXT("FaxSendDocumentForBroadcast() failed.  fnBroadcastCallback() was only called %d times.  This is an error.  fnBroadcastCallback() should have been called 3 times.\r\n"), dwIndex);
        }
        else if (g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId)) {
            fnWriteLogFile(TEXT("FaxAbort() of owner job returned TRUE.  This is an error.  FaxAbort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        }
        else if (GetLastError() != ERROR_INVALID_PARAMETER) {
            fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxAbort() of owner job should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
        }
        else {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
        }
		if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 2));
							g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 1));
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocumentForBroadcast(NULL, TEXT("fax.tif"), &dwFaxId, fnBroadcastCallback, &dwIndex)) {
        fnWriteLogFile(TEXT("FaxSendDocumentForBroadcast() returned TRUE.  This is an error.  FaxSendDocumentForBroadcast() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 2));
        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 1));
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocumentForBroadcast() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;

    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("szDocument = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocumentForBroadcast(hFaxSvcHandle, NULL, &dwFaxId, fnBroadcastCallback, &dwIndex)) {
        fnWriteLogFile(TEXT("FaxSendDocumentForBroadcast() returned TRUE.  This is an error.  FaxSendDocumentForBroadcast() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 2));
        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 1));
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocumentForBroadcast() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("fnBroadcastCallback = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocumentForBroadcast(hFaxSvcHandle, TEXT("fax.tif"), &dwFaxId, NULL, &dwIndex)) {
        fnWriteLogFile(TEXT("FaxSendDocumentForBroadcast() returned TRUE.  This is an error.  FaxSendDocumentForBroadcast() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 2));
        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 1));
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocumentForBroadcast() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    pFaxConfig->PauseServerQueue = FALSE;
    g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
    g_ApiInterface.FaxFreeBuffer(pFaxConfig);

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSendDocumentForBroadcast(hFaxSvcHandle, TEXT("fax.tif"), &dwFaxId, fnBroadcastCallback, &dwIndex)) {
        fnWriteLogFile(TEXT("FaxSendDocumentForBroadcast() returned TRUE.  This is an error.  FaxSendDocumentForBroadcast() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 2));
        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 1));
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocumentForBroadcast() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }

    //if (szServerName) {
	//	fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
    //    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
    //    }

    //    if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
            // Disconnect from the fax server
    //        g_ApiInterface.FaxClose(hFaxSvcHandle);
    //        return;
    //    }

     //   pFaxConfig->PauseServerQueue = TRUE;

        //if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
          //  g_ApiInterface.FaxFreeBuffer(pFaxConfig);
            // Disconnect from the fax server
            //g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //(*pnNumCasesAttempted)++;
        //dwIndex = 0;
        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxSendDocumentForBroadcast(hFaxSvcHandle, TEXT("fax.tif"), &dwFaxId, fnBroadcastCallback, &dwIndex)) {
            //fnWriteLogFile(TEXT("FaxSendDocumentForBroadcast() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocumentForBroadcast() should succeed.\r\n"), GetLastError());
        //}
        //else {
            //(*pnNumCasesPassed)++;

//			if (!g_bRealSend)	{
//		            g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 2));
//			        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 1));
//					g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
//			}
        //}

//        pFaxConfig->PauseServerQueue = FALSE;
        //g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        //g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
//        g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}

fnWriteLogFile(TEXT("$$$ Summery for FaxSendDocumentForBroadcast, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
}



BOOL WINAPI
FaxAPIDllTest(
	LPCWSTR  szWhisPhoneNumberW,
	LPCSTR   szWhisPhoneNumberA,
    LPCWSTR  szServerNameW,
    LPCSTR   szServerNameA,
    UINT     nNumCasesLocal,
    UINT     nNumCasesServer,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	DWORD	 dwTestMode
)
{
    LPCTSTR  szServerName;
    UINT     nNumCases;


	// for Whis-extended only
#ifdef UNICODE
    if (lstrlen(szWhisPhoneNumberW)>0) { 
		g_szWhisPhoneNumber = szWhisPhoneNumberW; 
	}
	else {
		g_szWhisPhoneNumber=TEXT(WHIS_DEFAULT_PHONE_NUMBER);
	}
#else
	if (lstrlen(szWhisPhoneNumberA)>0) {
		g_szWhisPhoneNumber = szWhisPhoneNumberA;
	}
	else {
		g_szWhisPhoneNumber=TEXT(WHIS_DEFAULT_PHONE_NUMBER);
	}
		
#endif

#ifdef UNICODE
    szServerName = szServerNameW;
#else
    szServerName = szServerNameA;
#endif

    if (szServerName) {
        nNumCases = nNumCasesServer;
		fnWriteLogFile(TEXT("WHIS> REMOTE SERVER MODE:\r\n"));
    }
    else {
        nNumCases = nNumCasesLocal;
    }

	if (dwTestMode==WHIS_TEST_MODE_REAL_SEND) g_bRealSend=TRUE;


    // FaxStartPrintJob()
    fnFaxStartPrintJob(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    // FaxPrintCoverPage()
    fnFaxPrintCoverPage(szServerName, pnNumCasesAttempted, pnNumCasesPassed,TRUE);

    // FaxSendDocument()
    fnFaxSendDocument(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    // FaxSendDocumentForBroadcast()
    fnFaxSendDocumentForBroadcast(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    if ((*pnNumCasesAttempted == nNumCases) && (*pnNumCasesPassed == *pnNumCasesAttempted)) {
        return TRUE;
    }
    else {
        return FALSE;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legacywin32_xml\confgapi\confgapi.c ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

  confgapi.c

Abstract:

  ConfgApi: Fax API Test Dll: Client Configuration APIs
    1) FaxGetConfiguration()
    2) FaxSetConfiguration()
    3) FaxGetLoggingCategories()
    4) FaxSetLoggingCategories()

Author:

  Steven Kehrli (steveke) 8/28/1998

--*/

/*++

  Whistler Version:

  Lior Shmueli (liors) 23/11/2000

 ++*/


#include <wtypes.h>

#include "dllapi.h"

// g_hHeap is the handle to the heap
HANDLE           g_hHeap = NULL;
// g_ApiInterface is the API_INTERFACE structure
API_INTERFACE    g_ApiInterface;
// fnWriteLogFile is the pointer to the function to write a string to the log file
PFNWRITELOGFILE  fnWriteLogFile = NULL;

#define FAX_REGKEY                     TEXT("Software\\Microsoft\\Fax")
#define RETRIES_REGVALUE               TEXT("Retries")
#define RETRYDELAY_REGVALUE            TEXT("Retry Delay")
#define DIRTYDAYS_REGVALUE             TEXT("Dirty Days")
#define BRANDING_REGVALUE              TEXT("Branding")
#define USEDEVICETSID_REGVALUE         TEXT("UseDeviceTsid")
#define SERVERCP_REGVALUE              TEXT("ServerCoverPageOnly")
#define PAUSESERVERQUEUE_REGVALUE      TEXT("QueuePaused")
#define STARTCHEAPTIME_REGVALUE        TEXT("StartCheapTime")
#define STOPCHEAPTIME_REGVALUE         TEXT("StopCheapTime")
#define ARCHIVEOUTGOINGFAXES_REGVALUE  TEXT("ArchiveOutgoingFax")
#define ARCHIVEDIRECTORY_REGVALUE      TEXT("ArchiveDirectory")
#define INBOUNDPROFILE_REGVALUE        TEXT("Inbound Profile")

#define FAX_LOGGING_REGKEY             TEXT("Software\\Microsoft\\Fax\\Logging")
#define NAME_REGVALUE                  TEXT("Name")
#define CATEGORY_REGVALUE              TEXT("Number")
#define LEVEL_REGVALUE                 TEXT("Level")

DWORD
DllEntry(
    HINSTANCE  hInstance,
    DWORD      dwReason,
    LPVOID     pContext
)
/*++

Routine Description:

  DLL entry point

Arguments:

  hInstance - handle to the module
  dwReason - indicates the reason for being called
  pContext - context

Return Value:

  TRUE on success

--*/
{
    return TRUE;
}

VOID WINAPI
FaxAPIDllInit(
    HANDLE            hHeap,
    API_INTERFACE     ApiInterface,
    PFNWRITELOGFILEW  pfnWriteLogFileW,
    PFNWRITELOGFILEA  pfnWriteLogFileA
)
{
    // Set g_hHeap
    g_hHeap = hHeap;
    // Set g_ApiInterface
    g_ApiInterface = ApiInterface;
#ifdef UNICODE
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileW;
#else
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileA;
#endif

    return;
}

BOOL
fnRegQueryDword(
    HKEY     hKey,
    LPTSTR   szValue,
    LPDWORD  pdwData
)
/*++

Routine Description:

  Queries a Registry data as a REG_DWORD

Arguments:

  hKey - handle to the Registry key
  szValue - value to be queried
  pdwData - pointer to the data to be queried

Return Value:

  TRUE on success

--*/
{
    DWORD  cb;

    cb = sizeof(DWORD);
    if (RegQueryValueEx(hKey, szValue, NULL, NULL, (PBYTE) pdwData, &cb)) {
        *pdwData = 0;
        return FALSE;
    }

    return TRUE;
}

BOOL
fnRegQuerySz(
    HKEY    hKey,
    LPTSTR  szValue,
    LPTSTR  *pszData
)
/*++

Routine Description:

  Queries a Registry data as a REG_SZ

Arguments:

  hKey - handle to the Registry key
  szValue - value to be queried
  pszData - pointer to the data to be queried

Return Value:

  TRUE on success

--*/
{
    DWORD  cb;

    cb = 0;
    // Determine the memory required by pszData
    if (RegQueryValueEx(hKey, szValue, NULL, NULL, NULL, &cb)) {
        return FALSE;
    }

    if (!cb) {
        *pszData = NULL;
        return TRUE;
    }

    // Allocate the memory for pszData
    *pszData = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, cb);

    if (RegQueryValueEx(hKey, szValue, NULL, NULL, (PBYTE) *pszData, &cb)) {
        HeapFree(g_hHeap, 0, *pszData);
        *pszData = NULL;
        return FALSE;
    }

    return TRUE;
}

BOOL
fnVerifyConfiguration(
    PFAX_CONFIGURATION  pFaxConfig
)
/*++

Routine Description:

  Verifies the fax configuration vs. the registry

Arguments:

  pFaxConfig - pointer to the fax configuration

Return Value:

  None

--*/
{
    // hFaxKey is the handle to the fax registry key
    HKEY    hFaxKey;
    // szValue is the registry value (REG_SZ)
    LPTSTR  szValue;
    // dwValue is the registry value (REG_DWORD)
    DWORD   dwValue;

    if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, FAX_REGKEY, 0, KEY_ALL_ACCESS, &hFaxKey)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not open the Registry Key %s, ec = 0x%08x.</result>\r\n"), FAX_REGKEY, GetLastError());
        goto RegFailed0;
    }

    if (pFaxConfig->SizeOfStruct != sizeof(FAX_CONFIGURATION)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">SizeOfStruct: Received: %d, Expected: %d.</result>\r\n"), pFaxConfig->SizeOfStruct, sizeof(FAX_CONFIGURATION));
        goto RegFailed1;
    }

    if (!fnRegQueryDword(hFaxKey, RETRIES_REGVALUE, &dwValue)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), RETRIES_REGVALUE, GetLastError());
        goto RegFailed1;
    }
    if (pFaxConfig->Retries != dwValue) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">Retries: Received: %d, Expected: %d.</result>\r\n"), dwValue, pFaxConfig->Retries);
        goto RegFailed1;
    }

    if (!fnRegQueryDword(hFaxKey, RETRYDELAY_REGVALUE, &dwValue)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), RETRYDELAY_REGVALUE, GetLastError());
        goto RegFailed1;
    }
    if (pFaxConfig->RetryDelay != dwValue) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">RetryDelay: Received: %d, Expected: %d.</result>\r\n"), dwValue, pFaxConfig->RetryDelay);
        goto RegFailed1;
    }

    if (!fnRegQueryDword(hFaxKey, DIRTYDAYS_REGVALUE, &dwValue)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), DIRTYDAYS_REGVALUE, GetLastError());
        goto RegFailed1;
    }
    if (pFaxConfig->DirtyDays != dwValue) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">DirtyDays: Received: %d, Expected: %d.</result>\r\n"), dwValue, pFaxConfig->DirtyDays);
        goto RegFailed1;
    }

    if (!fnRegQueryDword(hFaxKey, BRANDING_REGVALUE, &dwValue)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), BRANDING_REGVALUE, GetLastError());
        goto RegFailed1;
    }
    if (pFaxConfig->Branding != (BOOL) dwValue) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">Branding: Received: %d, Expected: %d.</result>\r\n"), dwValue, pFaxConfig->Branding);
        goto RegFailed1;
    }

    if (!fnRegQueryDword(hFaxKey, USEDEVICETSID_REGVALUE, &dwValue)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), USEDEVICETSID_REGVALUE, GetLastError());
        goto RegFailed1;
    }
    if (pFaxConfig->UseDeviceTsid != (BOOL) dwValue) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">UseDeviceTsid: Received: %d, Expected: %d.</result>\r\n"), dwValue, pFaxConfig->UseDeviceTsid);
        goto RegFailed1;
    }

    if (!fnRegQueryDword(hFaxKey, SERVERCP_REGVALUE, &dwValue)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), SERVERCP_REGVALUE, GetLastError());
        goto RegFailed1;
    }
    if (pFaxConfig->ServerCp != (BOOL) dwValue) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">ServerCp: Received: %d, Expected: %d.</result>\r\n"), dwValue, pFaxConfig->ServerCp);
        goto RegFailed1;
    }

    if (!fnRegQueryDword(hFaxKey, PAUSESERVERQUEUE_REGVALUE, &dwValue)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), PAUSESERVERQUEUE_REGVALUE, GetLastError());
        goto RegFailed1;
    }
    if (pFaxConfig->PauseServerQueue != (BOOL) dwValue) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">PauseServerQueue: Received: %d, Expected: %d.</result>\r\n"), dwValue, pFaxConfig->PauseServerQueue);
        goto RegFailed1;
    }

    if (!fnRegQueryDword(hFaxKey, STARTCHEAPTIME_REGVALUE, &dwValue)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), STARTCHEAPTIME_REGVALUE, GetLastError());
        goto RegFailed1;
    }
    if (pFaxConfig->StartCheapTime.Hour != LOWORD(dwValue)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">StartCheapTime.Hour: Received: %d, Expected: %d.</result>\r\n"), LOWORD(dwValue), pFaxConfig->StartCheapTime.Hour);
        goto RegFailed1;
    }
    if (pFaxConfig->StartCheapTime.Minute != HIWORD(dwValue)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">StartCheapTime.Minute: Received: %d, Expected: %d.</result>\r\n"), HIWORD(dwValue), pFaxConfig->StartCheapTime.Minute);
        goto RegFailed1;
    }

    if (!fnRegQueryDword(hFaxKey, STOPCHEAPTIME_REGVALUE, &dwValue)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), STOPCHEAPTIME_REGVALUE, GetLastError());
        goto RegFailed1;
    }
    if (pFaxConfig->StopCheapTime.Hour != LOWORD(dwValue)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">StopCheapTime.Hour: Received: %d, Expected: %d.</result>\r\n"), LOWORD(dwValue), pFaxConfig->StopCheapTime.Hour);
        goto RegFailed1;
    }
    if (pFaxConfig->StopCheapTime.Minute != HIWORD(dwValue)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">StopCheapTime.Minute: Received: %d, Expected: %d.</result>\r\n"), HIWORD(dwValue), pFaxConfig->StopCheapTime.Minute);
        goto RegFailed1;
    }

    if (!fnRegQueryDword(hFaxKey, ARCHIVEOUTGOINGFAXES_REGVALUE, &dwValue)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), ARCHIVEOUTGOINGFAXES_REGVALUE, GetLastError());
        goto RegFailed1;
    }
    if (pFaxConfig->ArchiveOutgoingFaxes != (BOOL) dwValue) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">ArchiveOutgoingFaxes: Received: %d, Expected: %d.</result>\r\n"), dwValue, pFaxConfig->ArchiveOutgoingFaxes);
        goto RegFailed1;
    }

    if (!fnRegQuerySz(hFaxKey, ARCHIVEDIRECTORY_REGVALUE, &szValue)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), ARCHIVEDIRECTORY_REGVALUE, GetLastError());
        goto RegFailed1;
    }
    if (lstrcmp(pFaxConfig->ArchiveDirectory, szValue)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">ArchiveDirectory: Received: %s, Expected: %s.</result>\r\n"), szValue, pFaxConfig->ArchiveDirectory);
        if (szValue) {
            HeapFree(g_hHeap, 0, szValue);
        }
        goto RegFailed1;
    }
    if (szValue) {
        HeapFree(g_hHeap, 0, szValue);
    }

    if (!fnRegQuerySz(hFaxKey, INBOUNDPROFILE_REGVALUE, &szValue)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), INBOUNDPROFILE_REGVALUE, GetLastError());
        goto RegFailed1;
    }
    
	
	#ifdef FAXAPI_W2K
		if (lstrcmp(pFaxConfig->InboundProfile, szValue)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">InboundProfile: Received: %s, Expected: %s.</result>\r\n"), szValue, pFaxConfig->InboundProfile);
        if (szValue) {
            HeapFree(g_hHeap, 0, szValue);
			}
        goto RegFailed1;
		}	
	#endif

    if (szValue) {
        HeapFree(g_hHeap, 0, szValue);
    }

    RegCloseKey(hFaxKey);

    return TRUE;

RegFailed1:
    RegCloseKey(hFaxKey);

RegFailed0:
    return FALSE;
}

VOID
fnFaxGetConfiguration(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxGetConfiguration()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE              hFaxSvcHandle;
    // pFaxConfig is the pointer to the fax configuration
    PFAX_CONFIGURATION  pFaxConfig;

    DWORD               dwIndex;

    // internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxGetConfiguration().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxGetConfiguration\">"));

	// Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> Test error: can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName,GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else	{
		fnWriteLogFile(TEXT("WHIS> Connected to %s.\r\n"),szServerName);
	}


    for (dwIndex = 0; dwIndex < 2; dwIndex++) {
        
		// Get the configuration
        (*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

        fnWriteLogFile(TEXT("Valid Case (will do twice).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (will do twice)\" id=\"%d\">"), *pnNumCasesAttempted);
        if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetConfiguration() failed.  The error code is 0x%08x.  This is an error.  FaxGetConfiguration() should succeed.\r\n"), GetLastError());
			fnWriteLogFile(TEXT("\n\t</result>"));
        }
        else {
            if (pFaxConfig == NULL) {
                fnWriteLogFile(TEXT("\n\t<result value=\"0\">pFaxConfig is NULL.  This is an error.  pFaxConfig should not be NULL.\r\n"));
				fnWriteLogFile(TEXT("\n\t</result>"));
            }
            else {
                if (fnVerifyConfiguration(pFaxConfig)) {
                    (*pnNumCasesPassed)++;
					dwFuncCasesPass++;
					fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
                }
            }

            g_ApiInterface.FaxFreeBuffer(pFaxConfig);
        }
		fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxGetConfiguration(NULL, &pFaxConfig)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetConfiguration() returned TRUE.  This is an error.  FaxGetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pFaxConfig = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    fnWriteLogFile(TEXT("\n\t<case name=\"pFaxConfig = NULL\" id=\"%d\">"), *pnNumCasesAttempted);
	if (g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, NULL)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetConfiguration() returned TRUE.  This is an error.  FaxGetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle (connection to fax was closed...) .  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid hFaxSvcHandle (connection to fax was closed...)\" id=\"%d\">"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetConfiguration() returned TRUE.  This is an error.  FaxGetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("\n\t</result>"));
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

    //if (szServerName) {
	//	fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
      //  if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
        //    return;
        //}

        //(*pnNumCasesAttempted)++;
        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
          //  fnWriteLogFile(TEXT("FaxGetConfiguration() failed.  The error code is 0x%08x.  This is an error.  FaxGetConfiguration() should succeed.\r\n"), GetLastError());
        //}
        //else {
          //  g_ApiInterface.FaxFreeBuffer(pFaxConfig);
            //(*pnNumCasesPassed)++;
        //}

        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}

VOID
fnFaxSetConfiguration(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	BOOL	 bTestLimits
)
/*++

Routine Description:

  FaxSetConfiguration()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE              hFaxSvcHandle;
    // pFaxConfig is the pointer to the fax configuration
    PFAX_CONFIGURATION  pFaxConfig;
    // pCopyFaxConfig is the pointer to the copy of the fax configuration
    PFAX_CONFIGURATION  pCopyFaxConfig;

    DWORD               cb;
    DWORD               dwOffset;
	DWORD				dwTempValue;
	int					iTempValue;
	WORD				wTempValue;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


    fnWriteLogFile(TEXT(  "\n--------------------------"));
	fnWriteLogFile(TEXT("### FaxSetConfiguration().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxSetConfiguration\">"));

	// Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> Test error: can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName,GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else	{
		fnWriteLogFile(TEXT("WHIS> Connected to %s.\r\n"),szServerName);
	}

    if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> Test error: can not GET configuration from fax server %s, The error code is 0x%08x.\r\n"),szServerName,GetLastError());
		// Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    cb = sizeof(FAX_CONFIGURATION);

	#ifdef FAXAPI_W2K
		{
		if (pFaxConfig->InboundProfile) {
        cb += (lstrlen(pFaxConfig->InboundProfile) + 1) * sizeof(TCHAR);
		}
	#endif

    if (pFaxConfig->ArchiveDirectory) {
        cb += (lstrlen(pFaxConfig->ArchiveDirectory) + 1) * sizeof(TCHAR);
    }

    pCopyFaxConfig = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, cb);
    dwOffset = sizeof(FAX_CONFIGURATION);

	
			
	pCopyFaxConfig->SizeOfStruct = pFaxConfig->SizeOfStruct;
	pCopyFaxConfig->Retries = pFaxConfig->Retries + 1;
	pCopyFaxConfig->RetryDelay = pFaxConfig->RetryDelay + 1;
	pCopyFaxConfig->DirtyDays = pFaxConfig->DirtyDays + 1;
	pCopyFaxConfig->Branding = !pFaxConfig->Branding;
	pCopyFaxConfig->UseDeviceTsid = !pFaxConfig->UseDeviceTsid;
	pCopyFaxConfig->ServerCp = !pFaxConfig->ServerCp;
	pCopyFaxConfig->PauseServerQueue = !pFaxConfig->PauseServerQueue;
	pCopyFaxConfig->StartCheapTime.Hour = pFaxConfig->StopCheapTime.Hour;
	pCopyFaxConfig->StartCheapTime.Minute = pFaxConfig->StopCheapTime.Minute;
	pCopyFaxConfig->StopCheapTime.Hour = pFaxConfig->StartCheapTime.Hour;
	pCopyFaxConfig->StopCheapTime.Minute = pFaxConfig->StartCheapTime.Minute;
	pCopyFaxConfig->ArchiveOutgoingFaxes = pCopyFaxConfig->ArchiveOutgoingFaxes;

	
	#ifdef FAXAPI_W2K
		if (pFaxConfig->InboundProfile) {
			pCopyFaxConfig->InboundProfile = (LPTSTR) ((DWORD) pCopyFaxConfig + dwOffset);
			lstrcpy((LPTSTR) pCopyFaxConfig->InboundProfile, pFaxConfig->InboundProfile);
			dwOffset += (lstrlen(pCopyFaxConfig->InboundProfile) + 1) * sizeof(TCHAR);
		}
	#endif


	if (pFaxConfig->ArchiveDirectory) {
        pCopyFaxConfig->ArchiveDirectory = (LPTSTR) ((DWORD) pCopyFaxConfig + dwOffset);
        lstrcpy((LPTSTR) pCopyFaxConfig->ArchiveDirectory, pFaxConfig->ArchiveDirectory);
        dwOffset += (lstrlen(pCopyFaxConfig->ArchiveDirectory) + 1) * sizeof(TCHAR);
		}
	
  

    // Set the configuration
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

	fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);
	
    if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pCopyFaxConfig)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetConfiguration() failed.  The error code is 0x%08x.  This is an error.  FaxSetConfiguration() should succeed.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else {
        if (fnVerifyConfiguration(pCopyFaxConfig)) {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
        }
    }
	fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

    HeapFree(g_hHeap, 0, pCopyFaxConfig);

    // Set the configuration
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetConfiguration() failed.  The error code is 0x%08x.  This is an error.  FaxSetConfiguration() should succeed.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else {
        if (fnVerifyConfiguration(pFaxConfig)) {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
        }
    }
	fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

    pFaxConfig->SizeOfStruct = 0;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pFaxConfig->SizeOfStruct = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxConfig->SizeOfStruct = 0\" id=\"%d\">"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

    pFaxConfig->SizeOfStruct = sizeof(FAX_CONFIGURATION);


	// add limit values cases
	if (bTestLimits)	{

		pFaxConfig->SizeOfStruct = MAX_DWORD;
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;
		fnWriteLogFile(TEXT("pFaxConfig->SizeOfStruct = MAX_DWORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"pFaxConfig->SizeOfStruct = MAX_DWORD\" id=\"%d\">"), *pnNumCasesAttempted);

		if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
	    }
	    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
		}
		else {
	        (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
	    }
		fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

	    pFaxConfig->SizeOfStruct = sizeof(FAX_CONFIGURATION);

	
		dwTempValue=pFaxConfig->Retries;
		pFaxConfig->Retries = MAX_DWORD;

		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxConfig->Retries = MAX_DWORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"pFaxConfig->Retries = MAX_DWORD\" id=\"%d\">"), *pnNumCasesAttempted);

	    if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
		}
		else if (GetLastError() != ERROR_INVALID_PARAMETER) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
	    }
	    else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		}
		fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

		pFaxConfig->Retries=dwTempValue;
	
		dwTempValue=pFaxConfig->RetryDelay;
		pFaxConfig->RetryDelay = MAX_DWORD;
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxConfig->RetryDelay = MAX_DWORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"pFaxConfig->RetryDelay = MAX_DWORD\" id=\"%d\">"), *pnNumCasesAttempted);

	    if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
		}
		else if (GetLastError() != ERROR_INVALID_PARAMETER) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
	    }
	    else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		}
		fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

		pFaxConfig->RetryDelay=dwTempValue;
	
		dwTempValue=pFaxConfig->DirtyDays;
		pFaxConfig->DirtyDays = MAX_DWORD;
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxConfig->DirtyDays = MAX_DWORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"pFaxConfig->DirtyDays = MAX_DWORD\" id=\"%d\">"), *pnNumCasesAttempted);

		if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
	    }
	    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
		}
		else {
	        (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
	    }
		fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

	    pFaxConfig->DirtyDays=dwTempValue;
	
	
		iTempValue=pFaxConfig->Branding;
		pFaxConfig->Branding = MIN_INT;
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxConfig->Branding = MIN_INT.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"pFaxConfig->Branding = MIN_INT\" id=\"%d\">"), *pnNumCasesAttempted);

	    if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
		}
		else if (GetLastError() != ERROR_INVALID_PARAMETER) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
	    }
	    else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		}
		fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

		pFaxConfig->Branding=dwTempValue;
	
		iTempValue=pFaxConfig->UseDeviceTsid;
		pFaxConfig->UseDeviceTsid = MIN_INT;
		
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxConfig->UseDeviceTsid = MIN_INT.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"pFaxConfig->UseDeviceTsid = MIN_INT\" id=\"%d\">"), *pnNumCasesAttempted);

	    if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
		}
		else if (GetLastError() != ERROR_INVALID_PARAMETER) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
	    }
	    else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		}
		fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

		pFaxConfig->UseDeviceTsid=dwTempValue;
	
		iTempValue=pFaxConfig->ServerCp;
		pFaxConfig->ServerCp = MIN_INT;
		
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxConfig->ServerCp = MIN_INT.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"pFaxConfig->ServerCp = MIN_INT\" id=\"%d\">"), *pnNumCasesAttempted);

	    if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
		}
		else if (GetLastError() != ERROR_INVALID_PARAMETER) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
	    }
	    else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		}
		fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

		pFaxConfig->ServerCp=dwTempValue;
	
		iTempValue=pFaxConfig->PauseServerQueue;
		pFaxConfig->PauseServerQueue = MIN_INT;

		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxConfig->PauseServerQueue = MIN_INT.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"pFaxConfig->PauseServerQueue = MIN_INT\" id=\"%d\">"), *pnNumCasesAttempted);

	    if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
		}
		else if (GetLastError() != ERROR_INVALID_PARAMETER) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
		}
		else {
	        (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
	    }
		fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

	    pFaxConfig->PauseServerQueue=dwTempValue;
	
		iTempValue=pFaxConfig->ArchiveOutgoingFaxes;
		pFaxConfig->ArchiveOutgoingFaxes = MIN_INT;

		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxConfig->ArchiveOutgoingFaxes = MIN_INT.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"pFaxConfig->ArchiveOutgoingFaxes = MIN_INT\" id=\"%d\">"), *pnNumCasesAttempted);

	    if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
		fnWriteLogFile(TEXT("\n\t</result>"));
		}
		else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
		}
		else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		}
		fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

		pFaxConfig->ArchiveOutgoingFaxes=dwTempValue;

	
		
		wTempValue=pFaxConfig->StartCheapTime.Hour;
		pFaxConfig->StartCheapTime.Hour = MAX_WORD;

		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxConfig->StartCheapTime.Hour = MAX_WORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"pFaxConfig->StartCheapTime.Hour = MAX_WORD\" id=\"%d\">"), *pnNumCasesAttempted);

		if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
		}
		else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
		}
		else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		}
		fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

		pFaxConfig->StartCheapTime.Hour=wTempValue;

		
		
		
		
		wTempValue=pFaxConfig->StartCheapTime.Minute;
		pFaxConfig->StartCheapTime.Minute = MAX_WORD;

		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxConfig->StartCheapTime.Minute = MAX_WORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"pFaxConfig->StartCheapTime.Minute = MAX_WORD\" id=\"%d\">"), *pnNumCasesAttempted);

		if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
		}
		else if (GetLastError() != ERROR_INVALID_PARAMETER) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
		}
	    else {
	        (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		}
		fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

		pFaxConfig->StartCheapTime.Minute=wTempValue;

		
	
		wTempValue=pFaxConfig->StopCheapTime.Hour;
		pFaxConfig->StopCheapTime.Hour = MAX_WORD;

		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxConfig->StopCheapTime.Hour = MAX_WORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"pFaxConfig->StopCheapTime.Hour = MAX_WORD\" id=\"%d\">"), *pnNumCasesAttempted);

		if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
		}
		else if (GetLastError() != ERROR_INVALID_PARAMETER) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
		}
		else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
			}
		fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));
		pFaxConfig->StopCheapTime.Hour=wTempValue;

		
		
		wTempValue=pFaxConfig->StopCheapTime.Minute;
		pFaxConfig->StopCheapTime.Minute = MAX_WORD;

		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxConfig->StopCheapTime.Minute = MAX_WORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"pFaxConfig->StopCheapTime.Minute = MAX_WORD\" id=\"%d\">"), *pnNumCasesAttempted);

		if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
		}
		else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
		}
		else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		}
		fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

	    pFaxConfig->StopCheapTime.Minute=wTempValue;


	
	}


    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetConfiguration(NULL, pFaxConfig)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pFaxConfig = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxConfig = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, NULL)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid hFaxSvcHandle\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

    g_ApiInterface.FaxFreeBuffer(pFaxConfig);

  //  if (szServerName) {
        // Connect to the fax server
    //    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
      //      return;
       // }

        //if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
       // }

        //(*pnNumCasesAttempted)++;
        //if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
          //  fnWriteLogFile(TEXT("FaxSetConfiguration() failed.  The error code is 0x%08x.  This is an error.  FaxSetConfiguration() should succeed.\r\n"), GetLastError());
        //}
        //else {
          //  (*pnNumCasesPassed)++;

        //}

        //g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}


BOOL
fnVerifyCategories(
    PFAX_LOG_CATEGORY  pFaxCategories,
    DWORD              dwNumMethods
)
/*++

Routine Description:

  Verifies the fax logging categories vs. the registry

Arguments:

  pFaxCategories - pointer to the fax logging categories
  dwNumMethods - number of fax logging categories

Return Value:

  None

--*/
{
    // hFaxLoggingKey is the handle to the fax logging registry key
    HKEY    hFaxLoggingKey;
    // szKeyName is the name of a logging registry subkey
    TCHAR   szKeyName[3];
    // hFaxCategoryKey is the handle to the category registry key
    HKEY    hFaxCategoryKey;
    // szValue is the registry value (REG_SZ)
    LPTSTR  szValue;
    // dwValue is the registry value (REG_DWORD)
    DWORD   dwValue;

    DWORD   dwIndex;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

    if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, FAX_LOGGING_REGKEY, 0, KEY_ALL_ACCESS, &hFaxLoggingKey)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not open the Registry Key %s, ec = 0x%08x.</result>\r\n"), FAX_LOGGING_REGKEY, GetLastError());
        goto RegFailed0;
    }

    for (dwIndex = 0; dwIndex < dwNumMethods; dwIndex++) {
        wsprintf(szKeyName, TEXT("%d"), pFaxCategories[dwIndex].Category);

        if (RegOpenKeyEx(hFaxLoggingKey, szKeyName, 0, KEY_ALL_ACCESS, &hFaxCategoryKey)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not open the Registry Key %s, ec = 0x%08x.</result>\r\n"), szKeyName, GetLastError());
            goto RegFailed1;
        }

        if (!fnRegQuerySz(hFaxCategoryKey, NAME_REGVALUE, &szValue)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), NAME_REGVALUE, GetLastError());
            goto RegFailed2;
        }
        if (lstrcmp(pFaxCategories[dwIndex].Name, szValue)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Name: Received: %s, Expected: %s.</result>\r\n"), szValue, pFaxCategories[dwIndex].Name);
            if (szValue) {
                HeapFree(g_hHeap, 0, szValue);
            }
            goto RegFailed2;
        }
        if (szValue) {
            HeapFree(g_hHeap, 0, szValue);
        }

        if (!fnRegQueryDword(hFaxCategoryKey, CATEGORY_REGVALUE, &dwValue)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), CATEGORY_REGVALUE, GetLastError());
            goto RegFailed2;
        }
        if (pFaxCategories[dwIndex].Category != dwValue) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Category: Received: %d, Expected: %d.</result>\r\n"), dwValue, pFaxCategories[dwIndex].Category);
            goto RegFailed2;
        }

        if (!fnRegQueryDword(hFaxCategoryKey, LEVEL_REGVALUE, &dwValue)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), LEVEL_REGVALUE, GetLastError());
            goto RegFailed2;
        }
        if (pFaxCategories[dwIndex].Level != dwValue) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Level: Received: %d, Expected: %d.</result>\r\n"), dwValue, pFaxCategories[dwIndex].Level);
            goto RegFailed2;
        }

        RegCloseKey(hFaxCategoryKey);
    }

    RegCloseKey(hFaxLoggingKey);

    return TRUE;

RegFailed2:
    RegCloseKey(hFaxCategoryKey);

RegFailed1:
    RegCloseKey(hFaxLoggingKey);

RegFailed0:
    return FALSE;
}

VOID
fnFaxGetLoggingCategories(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxGetLoggingCategories()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE             hFaxSvcHandle;
    // pFaxCategories is the pointer to the fax logging categories
    PFAX_LOG_CATEGORY  pFaxCategories;
    // dwNumCategories is the number of fax logging categories
    DWORD              dwNumCategories;

    DWORD              dwIndex;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;
	
	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxGetLoggingCategories().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxGetLoggingCategories\">"));

	// Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> Test error: can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName,GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else	{
		fnWriteLogFile(TEXT("WHIS> Connected to %s.\r\n"),szServerName);
	}


    for (dwIndex = 0; dwIndex < 2; dwIndex++) {
        // Get the logging categories
        (*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;
		
		
		
        fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

        if (!g_ApiInterface.FaxGetLoggingCategories(hFaxSvcHandle, &pFaxCategories, &dwNumCategories)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetLoggingCategories() failed.  The error code is 0x%08x.  This is an error.  FaxGetLoggingCategories() should succeed.\r\n"), GetLastError());
			fnWriteLogFile(TEXT("\n\t</result>"));
        }
        else {
            if (pFaxCategories == NULL) {
                fnWriteLogFile(TEXT("\n\t<result value=\"0\">pFaxCategories is NULL.  This is an error.  pFaxCategories should not be NULL.\r\n"));
				fnWriteLogFile(TEXT("\n\t</result>"));
            }

            if (dwNumCategories != 4) {
                fnWriteLogFile(TEXT("\n\t<result value=\"0\">dwNumCategories is not 4.  This is an error.  dwNumCategories should be 4.\r\n"));
				fnWriteLogFile(TEXT("\n\t</result>"));
            }

            if ((pFaxCategories != NULL) && (dwNumCategories == 4)) {
                if (fnVerifyCategories(pFaxCategories, dwNumCategories)) {
                    (*pnNumCasesPassed)++;
					dwFuncCasesPass++;
					fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
                }
            }
		    g_ApiInterface.FaxFreeBuffer(pFaxCategories);
        }
		fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetLoggingCategories(NULL, &pFaxCategories, &dwNumCategories)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetLoggingCategories() returned TRUE.  This is an error.  FaxGetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("\n\t</result>"));

        g_ApiInterface.FaxFreeBuffer(pFaxCategories);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("\n\t</result>"));

    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pFaxCategories = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxCategories = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetLoggingCategories(hFaxSvcHandle, NULL, &dwNumCategories)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetLoggingCategories() returned TRUE.  This is an error.  FaxGetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
		fnWriteLogFile(TEXT("\n\t</result>"));

        g_ApiInterface.FaxFreeBuffer(pFaxCategories);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		fnWriteLogFile(TEXT("\n\t</result>"));

    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("dwNumCategories = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"dwNumCategories = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetLoggingCategories(hFaxSvcHandle, &pFaxCategories, NULL)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetLoggingCategories() returned TRUE.  This is an error.  FaxGetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
		fnWriteLogFile(TEXT("\n\t</result>"));

        g_ApiInterface.FaxFreeBuffer(pFaxCategories);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid hFaxSvcHandle\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetLoggingCategories(hFaxSvcHandle, &pFaxCategories, &dwNumCategories)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetLoggingCategories() returned TRUE.  This is an error.  FaxGetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("\n\t</result>"));

        g_ApiInterface.FaxFreeBuffer(pFaxCategories);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("\n\t</result>"));

    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

    //if (szServerName) {
	//	fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
      //  if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
        //    return;
        //}

        //(*pnNumCasesAttempted)++;
        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxGetLoggingCategories(hFaxSvcHandle, &pFaxCategories, &dwNumCategories)) {
          //  fnWriteLogFile(TEXT("FaxGetLoggingCategories() failed.  The error code is 0x%08x.  This is an error.  FaxGetLoggingCategories() should succeed.\r\n"), GetLastError());
        //}
        //else {
          //  g_ApiInterface.FaxFreeBuffer(pFaxCategories);
            //(*pnNumCasesPassed)++;
        //}

        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}

VOID
fnFaxSetLoggingCategories(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	BOOL	 bTestLimits
)
/*++

Routine Description:

  FaxSetLoggingCategories()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE             hFaxSvcHandle;
    // pFaxCategories is the pointer to the fax logging categories
    PFAX_LOG_CATEGORY  pFaxCategories;
    // dwNumCategories is the number of fax logging categories
    DWORD              dwNumCategories;
    // pCopyFaxCategories is the pointer to the copy of the fax logging categories
    PFAX_LOG_CATEGORY  pCopyFaxCategories;

    DWORD              dwIndex;
    DWORD              cb;
    DWORD              dwOffset;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxSetLoggingCategories().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxSetLoggingCategories\">"));

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> Test error: can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName,GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else	{
		fnWriteLogFile(TEXT("WHIS> Connected to %s.\r\n"),szServerName);
	}


    if (!g_ApiInterface.FaxGetLoggingCategories(hFaxSvcHandle, &pFaxCategories, &dwNumCategories)) {
		fnWriteLogFile(TEXT("WHIS> Test error: can not get Loggin catagories from %s, The error code is 0x%08x.\r\n"),szServerName,GetLastError());
		// Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    for (dwIndex = 0, cb = 0; dwIndex < dwNumCategories; dwIndex++) {
        cb += sizeof(FAX_LOG_CATEGORY);
        cb += (lstrlen(pFaxCategories[dwIndex].Name) + 1) * sizeof(TCHAR);
    }

    pCopyFaxCategories = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, cb);
    dwOffset = dwNumCategories * sizeof(FAX_LOG_CATEGORY);
	
	
	if (bTestLimits)	{
		fnWriteLogFile(TEXT("WHIS> SETTING LIMIT VALUES...\r\n"));
		for (dwIndex = 0; dwIndex < dwNumCategories; dwIndex++) {
        pCopyFaxCategories[dwIndex].Name = (LPTSTR) ((DWORD) pCopyFaxCategories + dwOffset);
        lstrcpy((LPTSTR) pCopyFaxCategories[dwIndex].Name, pFaxCategories[dwIndex].Name);
        dwOffset += (lstrlen(pCopyFaxCategories[dwIndex].Name) + 1) * sizeof(TCHAR);

        pCopyFaxCategories[dwIndex].Category = pFaxCategories[dwIndex].Category;
        pCopyFaxCategories[dwIndex].Level = MAX_DWORD;
		}
	}
	else	{
		for (dwIndex = 0; dwIndex < dwNumCategories; dwIndex++) {
        pCopyFaxCategories[dwIndex].Name = (LPTSTR) ((DWORD) pCopyFaxCategories + dwOffset);
        lstrcpy((LPTSTR) pCopyFaxCategories[dwIndex].Name, pFaxCategories[dwIndex].Name);
        dwOffset += (lstrlen(pCopyFaxCategories[dwIndex].Name) + 1) * sizeof(TCHAR);

        pCopyFaxCategories[dwIndex].Category = pFaxCategories[dwIndex].Category;
        pCopyFaxCategories[dwIndex].Level = (pFaxCategories[dwIndex].Level + 1) % (FAXLOG_LEVEL_MAX + 1);
		}
	}

    // Set the logging categories
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

	if (!bTestLimits)
	{
		fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);
	}
	else
	{
		fnWriteLogFile(TEXT("Valid Case, Limit Values.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case Limit Values\" id=\"%d\">"), *pnNumCasesAttempted);
	}

    if (!g_ApiInterface.FaxSetLoggingCategories(hFaxSvcHandle, pCopyFaxCategories, dwNumCategories)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetLoggingCategories() failed.  The error code is 0x%08x.  This is an error.  FaxSetLoggingCategories() should succeed.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else {
        if (fnVerifyCategories(pCopyFaxCategories, dwNumCategories)) {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
        }
	}
	fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

    HeapFree(g_hHeap, 0, pCopyFaxCategories);

    // Set the logging categories
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSetLoggingCategories(hFaxSvcHandle, pFaxCategories, dwNumCategories)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetLoggingCategories() failed.  The error code is 0x%08x.  This is an error.  FaxSetLoggingCategories() should succeed.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else {
        if (fnVerifyCategories(pFaxCategories, dwNumCategories)) {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
        }
	}
	fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetLoggingCategories(NULL, pFaxCategories, dwNumCategories)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetLoggingCategories() returned TRUE.  This is an error.  FaxSetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    
	fnWriteLogFile(TEXT("pFaxCategories = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxCategories = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetLoggingCategories(hFaxSvcHandle, NULL, dwNumCategories)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetLoggingCategories() returned TRUE.  This is an error.  FaxSetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
		fnWriteLogFile(TEXT("\n\t</result>"));

    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		fnWriteLogFile(TEXT("\n\t</result>"));

    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("dwNumCategories = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"dwNumCategories = 0\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetLoggingCategories(hFaxSvcHandle, pFaxCategories, 0)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetLoggingCategories() returned TRUE.  This is an error.  FaxSetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
		fnWriteLogFile(TEXT("\n\t</result>"));

    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid hFaxSvcHandle\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetLoggingCategories(hFaxSvcHandle, pFaxCategories, dwNumCategories)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetLoggingCategories() returned TRUE.  This is an error.  FaxSetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

    g_ApiInterface.FaxFreeBuffer(pFaxCategories);

//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        //if (!g_ApiInterface.FaxGetLoggingCategories(hFaxSvcHandle, &pFaxCategories, &dwNumCategories)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

		//(*pnNumCasesAttempted)++;
		//fnWriteLogFile(TEXT("### FaxSetLoggingCategories().\r\n"));
        //if (!g_ApiInterface.FaxSetLoggingCategories(hFaxSvcHandle, pFaxCategories, dwNumCategories)) {
          //  fnWriteLogFile(TEXT("FaxSetLoggingCategories() failed.  The error code is 0x%08x.  This is an error.  FaxSetLoggingCategories() should succeed.\r\n"), GetLastError());
        //}
        //else {
            //(*pnNumCasesPassed)++;
        //}

//        g_ApiInterface.FaxFreeBuffer(pFaxCategories);

        // Disconnect from the fax server
  //      g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}



BOOL WINAPI
FaxAPIDllTest(
	LPCWSTR  szWhisPhoneNumberW,
	LPCSTR   szWhisPhoneNumberA,
	LPCWSTR  szServerNameW,
    LPCSTR   szServerNameA,
    UINT     nNumCasesLocal,
    UINT     nNumCasesServer,
	PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	DWORD	 dwTestMode
)
{
    LPCTSTR  szServerName;
    UINT     nNumCases;

#ifdef UNICODE
    szServerName = szServerNameW;
#else
    szServerName = szServerNameA;
#endif


    if (szServerName) {
        nNumCases = nNumCasesServer;
		fnWriteLogFile(TEXT("WHIS> REMOTE SERVER MODE:\r\n"));
    }
    else {
        nNumCases = nNumCasesLocal;
    }

    // FaxGetConfiguration()
    fnFaxGetConfiguration(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

   

	// FaxSetConfiguration() limit testing
	if (dwTestMode == WHIS_TEST_MODE_LIMITS)
	{
		fnFaxSetConfiguration(szServerName, pnNumCasesAttempted, pnNumCasesPassed,TRUE);
	}
	else	{
		 // FaxSetConfiguration()
		fnFaxSetConfiguration(szServerName, pnNumCasesAttempted, pnNumCasesPassed,FALSE);
	}

	// FaxGetLoggingCategories()
    fnFaxGetLoggingCategories(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    // FaxSetLoggingCategories()
    fnFaxSetLoggingCategories(szServerName, pnNumCasesAttempted, pnNumCasesPassed,FALSE);

	// FaxSetLoggingCategories()
	if (dwTestMode == WHIS_TEST_MODE_LIMITS)
	{
		fnFaxSetLoggingCategories(szServerName, pnNumCasesAttempted, pnNumCasesPassed,TRUE);
	}

    if ((*pnNumCasesAttempted == nNumCases) && (*pnNumCasesPassed == *pnNumCasesAttempted)) {
        return TRUE;
    }
    else {
        return FALSE;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legacywin32_xml\jobsapi\jobsapi.c ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

  jobsapi.c

Abstract:

  JobsApi: Fax API Test Dll: Client Job APIs
    1) FaxEnumJobs()
    2) FaxGetJob()
    3) FaxSetJob()
    4) FaxAbort()
    5) FaxGetPageData()

Author:

  Steven Kehrli (steveke) 8/28/1998

--*/

/*++

  Whistler Version:

  Lior Shmueli (liors) 23/11/2000

 ++*/

#include <wtypes.h>
#include <tchar.h>


#include "dllapi.h"

// g_hHeap is the handle to the heap
HANDLE           g_hHeap = NULL;
// g_ApiInterface is the API_INTERFACE structure
API_INTERFACE    g_ApiInterface;
// fnWriteLogFile is the pointer to the function to write a string to the log file
PFNWRITELOGFILE  fnWriteLogFile = NULL;

// whistler phone number
//LPCTSTR  g_szWhisPhoneNumber;
LPCTSTR		    g_szWhisPhoneNumber=NULL;
TCHAR			g_szWhisPhoneNumberVar1[MAX_PATH];
TCHAR			g_szWhisPhoneNumberVar2[MAX_PATH];
TCHAR			g_szWhisPhoneNumberVar3[MAX_PATH];

DWORD
DllEntry(
    HINSTANCE  hInstance,
    DWORD      dwReason,
    LPVOID     pContext
)
/*++

Routine Description:

  DLL entry point

Arguments:

  hInstance - handle to the module
  dwReason - indicates the reason for being called
  pContext - context

Return Value:

  TRUE on success

--*/
{
    return TRUE;
}

VOID WINAPI
FaxAPIDllInit(
    HANDLE            hHeap,
    API_INTERFACE     ApiInterface,
    PFNWRITELOGFILEW  pfnWriteLogFileW,
    PFNWRITELOGFILEA  pfnWriteLogFileA
)
{
    // Set g_hHeap
    g_hHeap = hHeap;
    // Set g_ApiInterface
    g_ApiInterface = ApiInterface;
#ifdef UNICODE
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileW;
#else
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileA;
#endif

    return;
}

VOID
fnFaxEnumJobs(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxEnumJobs()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE              hFaxSvcHandle;
    // pFaxConfig is the pointer to the fax configuration
    PFAX_CONFIGURATION  pFaxConfig;
    // pFaxJobs is the pointer to the fax jobs
    PFAX_JOB_ENTRY      pFaxJobs;
    // dwNumJobs1 is the number of fax jobs
    DWORD               dwNumJobs;
    // FaxJobParam1 is the first fax job params
    FAX_JOB_PARAM       FaxJobParam1;
    // FaxJobParam2 is the second fax job params
    FAX_JOB_PARAM       FaxJobParam2;
    // FaxJobParam3 is the second fax job params
    FAX_JOB_PARAM       FaxJobParam3;
    // dwFaxId1 is the first fax job id
    DWORD               dwFaxId1;
    // dwFaxId2 is the second fax job id
    DWORD               dwFaxId2;
    // dwFaxId3 is the third fax job id
    DWORD               dwFaxId3;

    DWORD               dwIndex;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxEnumJobs().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxEnumJobs\">"));

    ZeroMemory(&FaxJobParam1, sizeof(FAX_JOB_PARAM));
    FaxJobParam1.SizeOfStruct = sizeof(FAX_JOB_PARAM);
    FaxJobParam1.RecipientNumber = g_szWhisPhoneNumberVar1;
    FaxJobParam1.ScheduleAction = JSA_NOW;

    ZeroMemory(&FaxJobParam2, sizeof(FAX_JOB_PARAM));
    FaxJobParam2.SizeOfStruct = sizeof(FAX_JOB_PARAM);
    FaxJobParam2.RecipientNumber = g_szWhisPhoneNumberVar2;
    FaxJobParam2.ScheduleAction = JSA_SPECIFIC_TIME;
    GetSystemTime(&FaxJobParam2.ScheduleTime);

    ZeroMemory(&FaxJobParam3, sizeof(FAX_JOB_PARAM));
    FaxJobParam3.SizeOfStruct = sizeof(FAX_JOB_PARAM);
    FaxJobParam3.RecipientNumber = g_szWhisPhoneNumberVar3;
    FaxJobParam3.ScheduleAction = JSA_DISCOUNT_PERIOD;

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> Can not connect to fax server %s, The error code is 0x%08x.\r\n"), szServerName,GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to %s\r\n"), szServerName);
	}

    if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> Can not GET configuration from %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    pFaxConfig->PauseServerQueue = TRUE;

    if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> Can not SET configuration in %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    // Enumerate the jobs
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxEnumJobs(hFaxSvcHandle, &pFaxJobs, &dwNumJobs)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxEnumJobs() failed.  The error code is 0x%08x.  This is an error.  FaxEnumJobs() should succeed</result>\r\n"), GetLastError());
    }
    else {
        if (pFaxJobs == NULL) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">pFaxJobs is NULL.  This is an error.  pFaxJobs should not be NULL.</result>\r\n"));
        }

        if (dwNumJobs != 0) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">dwNumJobs is %d.  This is an error.  dwNumJobs should be 0.</result>\r\n"), dwNumJobs);
        }

        if ((pFaxJobs != NULL) && (dwNumJobs == 0)) {
			
            (*pnNumCasesPassed)++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
			dwFuncCasesPass++;
		
        }
		g_ApiInterface.FaxFreeBuffer(pFaxJobs);
    }
	
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    // Send a document
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam1, NULL, &dwFaxId1)) {
        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    // Send a document
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam2, NULL, &dwFaxId2)) {
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId1);

        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    // Send a document
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam3, NULL, &dwFaxId3)) {
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId1);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId2);

        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    // Enumerate the jobs
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxEnumJobs(hFaxSvcHandle, &pFaxJobs, &dwNumJobs)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxEnumJobs() failed.  The error code is 0x%08x.  This is an error.  FaxEnumJobs() should succeed</result>\r\n"), GetLastError());
    }
    else {
        if (pFaxJobs == NULL) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">pFaxJobs is NULL.  This is an error.  pFaxJobs should not be NULL</result>\r\n"));
        }

        if (dwNumJobs != 3) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">dwNumJobs is %d.  This is an error.  dwNumJobs should be 3</result>\r\n"), dwNumJobs);
        }

        if ((pFaxJobs != NULL) && (dwNumJobs == 3)) {
            for (dwIndex = 0; dwIndex < dwNumJobs; dwIndex++) {
                if (pFaxJobs[dwIndex].SizeOfStruct != sizeof(FAX_JOB_ENTRY)) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">SizeOfStruct: Received: %d, Expected: %d</result>\r\n"), pFaxJobs[dwIndex].SizeOfStruct, sizeof(FAX_JOB_ENTRY));
                    goto FuncFailed;
                }
				fnWriteLogFile(TEXT("WHIS> (not error message) JobType: Received: %d, Expected: (JT_SEND) %d\r\n"), pFaxJobs[dwIndex].JobType, JT_SEND);
                if (pFaxJobs[dwIndex].JobType != JT_SEND) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">JobType: Received: %d, Expected: (JT_SEND) %d</result>\r\n"), pFaxJobs[dwIndex].JobType, JT_SEND);
                    goto FuncFailed;
                }

                if (pFaxJobs[dwIndex].QueueStatus != JS_PENDING) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">JobType: Received: %d, Expected: (JS_PENDING) %d</result>\r\n"), pFaxJobs[dwIndex].QueueStatus, JS_PENDING);
                    goto FuncFailed;
                }

                if (pFaxJobs[dwIndex].JobId == dwFaxId1) {
                    if (lstrcmp(pFaxJobs[dwIndex].RecipientNumber, g_szWhisPhoneNumberVar1)) {
                        fnWriteLogFile(TEXT("\n\t<result value=\"0\">RecipientNumber: Received: %s, Expected: %s</result>\r\n"), pFaxJobs[dwIndex].RecipientNumber, g_szWhisPhoneNumberVar1);
                        goto FuncFailed;
                    }

                    if (pFaxJobs[dwIndex].ScheduleAction != JSA_NOW) {
                        fnWriteLogFile(TEXT("\n\t<result value=\"0\">ScheduleAction: Received: %s, Expected: (JSA_NOW) %s</result>\r\n"), pFaxJobs[dwIndex].ScheduleAction, JSA_NOW);
                        goto FuncFailed;
                    }
                }
                else if (pFaxJobs[dwIndex].JobId == dwFaxId2) {
                    if (lstrcmp(pFaxJobs[dwIndex].RecipientNumber, g_szWhisPhoneNumberVar2)) {
                        fnWriteLogFile(TEXT("\n\t<result value=\"0\">RecipientNumber: Received: %s, Expected: %s</result>\r\n"), pFaxJobs[dwIndex].RecipientNumber, g_szWhisPhoneNumberVar2);
                        goto FuncFailed;
                    }

                    if (pFaxJobs[dwIndex].ScheduleAction != JSA_SPECIFIC_TIME) {
                        fnWriteLogFile(TEXT("\n\t<result value=\"0\">ScheduleAction: Received: %s, Expected: (JSA_SPECIFIC_TIME) %s.</result>\r\n"), pFaxJobs[dwIndex].ScheduleAction, JSA_SPECIFIC_TIME);
                        goto FuncFailed;
                    }
                }
                else if (pFaxJobs[dwIndex].JobId == dwFaxId3) {
                    if (lstrcmp(pFaxJobs[dwIndex].RecipientNumber, g_szWhisPhoneNumberVar3)) {
                        fnWriteLogFile(TEXT("\n\t<result value=\"0\">RecipientNumber: Received: %s, Expected: %s.</result>\r\n"), pFaxJobs[dwIndex].RecipientNumber, g_szWhisPhoneNumberVar1);
                        goto FuncFailed;
                    }

                    if (pFaxJobs[dwIndex].ScheduleAction != JSA_DISCOUNT_PERIOD) {
                        fnWriteLogFile(TEXT("\n\t<result value=\"0\">ScheduleAction: Received: %s, Expected: (JSA_DISCOUNT_PERIOD) %s.</result>\r\n"), pFaxJobs[dwIndex].ScheduleAction, JSA_DISCOUNT_PERIOD);
                        goto FuncFailed;
                    }
                }
                else {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">Unknown job id: %d.</result>\r\n"), pFaxJobs[dwIndex].JobId);
                    goto FuncFailed;
                }
            }

            (*pnNumCasesPassed)++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
			dwFuncCasesPass++;
        }
		FuncFailed:
        g_ApiInterface.FaxFreeBuffer(pFaxJobs);
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxEnumJobs(NULL, &pFaxJobs, &dwNumJobs)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxEnumJobs() returned TRUE.  This is an error.  FaxEnumJobs() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxJobs);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxEnumJobs() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pFaxJobs = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxJobs = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxEnumJobs(hFaxSvcHandle, NULL, &dwNumJobs)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxEnumJobs() returned TRUE.  This is an error.  FaxEnumJobs() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pFaxJobs);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxEnumJobs() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("dwNumJobs = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"dwNumJobs = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxEnumJobs(hFaxSvcHandle, &pFaxJobs, NULL)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxEnumJobs() returned TRUE.  This is an error.  FaxEnumJobs() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pFaxJobs);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxEnumJobs() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId1);
    g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId2);
    g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId3);

    pFaxConfig->PauseServerQueue = FALSE;
    g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
    g_ApiInterface.FaxFreeBuffer(pFaxConfig);

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid hFaxSvcHandle\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxEnumJobs(hFaxSvcHandle, &pFaxJobs, &dwNumJobs)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxEnumJobs() returned TRUE.  This is an error.  FaxEnumJobs() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxJobs);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxEnumJobs() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxEnumJobs(hFaxSvcHandle, &pFaxJobs, &dwNumJobs)) {
            //fnWriteLogFile(TEXT("FaxEnumJobs() failed.  The error code is 0x%08x.  This is an error.  FaxEnumJobs() should succeed.\r\n"), GetLastError());
        //}
        //else {
            //g_ApiInterface.FaxFreeBuffer(pFaxJobs);
            //(*pnNumCasesPassed)++;
				//dwFuncCasesPass++;
        //}

        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
	fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
	fnWriteLogFile(TEXT("\n\t</function>"));
	
}

VOID
fnFaxGetJob(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxGetJob()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE              hFaxSvcHandle;
    // pFaxConfig is the pointer to the fax configuration
    PFAX_CONFIGURATION  pFaxConfig;
    // pFaxJob is the pointer to the fax job
    PFAX_JOB_ENTRY      pFaxJob;
    // FaxJobParam is the fax job params
    FAX_JOB_PARAM       FaxJobParam;
    // dwFaxId is the fax job id
    DWORD               dwFaxId;

    DWORD               dwIndex;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxGetJob().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxGetJob\">"));

    ZeroMemory(&FaxJobParam, sizeof(FAX_JOB_PARAM));
    FaxJobParam.SizeOfStruct = sizeof(FAX_JOB_PARAM);
    FaxJobParam.RecipientNumber = g_szWhisPhoneNumber;

	fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);





    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> Can not connect to fax server %s, The error code is 0x%08x.\r\n"), szServerName,GetLastError());
			fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
			fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to %s\r\n"), szServerName);
	}


    if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> Can not GET configuration from %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    pFaxConfig->PauseServerQueue = TRUE;

    if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> Can not SET configuration in %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    // Send a document
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
		fnWriteLogFile(TEXT("WHIS> Can not send test document in %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    for (dwIndex = 0; dwIndex < 2; dwIndex++) {
        // Get the job
        (*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

        fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

        if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetJob() failed.  The error code is 0x%08x.  This is an error.  FaxGetJob() should succeed.</result>\r\n"), GetLastError());
        }
        else {
            if (pFaxJob == NULL) {
                fnWriteLogFile(TEXT("\n\t<result value=\"0\">pFaxJob is NULL.  This is an error.  pFaxJob should not be NULL.</result>\r\n"));
            }
            else {
                if (pFaxJob->SizeOfStruct != sizeof(FAX_JOB_ENTRY)) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">SizeOfStruct: Received: %d, Expected: %d.</result>\r\n"), pFaxJob->SizeOfStruct, sizeof(FAX_JOB_ENTRY));
                    goto FuncFailed;
                }

                if (pFaxJob->JobType != JT_SEND) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">JobType: Received: %d, Expected: (JT_SEND) %d.</result>\r\n"), pFaxJob->JobType, JT_SEND);
                    goto FuncFailed;
                }

                if (pFaxJob->QueueStatus != JS_PENDING) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">Queue status: Received: %d, Expected: (JS_PENDING) %d.</result>\r\n"), pFaxJob->QueueStatus, JS_PENDING);
                    goto FuncFailed;
                }

                if (pFaxJob->JobId != dwFaxId) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">JobId: Received: %d, Expected: %d.</result>\r\n"), pFaxJob->JobId, dwFaxId);
                    goto FuncFailed;
                }

                if (lstrcmp(pFaxJob->RecipientNumber, g_szWhisPhoneNumber)) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">RecipientNumber: Received: %s, Expected: %s.</result>\r\n"), pFaxJob->RecipientNumber, g_szWhisPhoneNumber);
                    goto FuncFailed;
                }

                if (pFaxJob->ScheduleAction != JSA_NOW) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">ScheduleAction: Received: %s, Expected: (JSA_NOW) %s.</result>\r\n"), pFaxJob->ScheduleAction, JSA_NOW);
                    goto FuncFailed;
                }

                (*pnNumCasesPassed)++;
				fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
				dwFuncCasesPass++;
            }

FuncFailed:
            g_ApiInterface.FaxFreeBuffer(pFaxJob);
        }
		fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
    }


    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetJob(NULL, dwFaxId, &pFaxJob)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetJob() returned TRUE.  This is an error.  FaxGetJob() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxJob);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetJob() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid dwFaxId.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid dwFaxId\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetJob(hFaxSvcHandle, -1, NULL)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetJob() returned TRUE.  This is an error.  FaxGetJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pFaxJob);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pFaxJob = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxJob = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, NULL)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetJob() returned TRUE.  This is an error.  FaxGetJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pFaxJob);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }

	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

    pFaxConfig->PauseServerQueue = FALSE;
    g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
    g_ApiInterface.FaxFreeBuffer(pFaxConfig);

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid hFaxSvcHandle\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetJob() returned TRUE.  This is an error.  FaxGetJob() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxJob);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetJob() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        //if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //pFaxConfig->PauseServerQueue = TRUE;

        //if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
          //  g_ApiInterface.FaxFreeBuffer(pFaxConfig);
            // Disconnect from the fax server
            //g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        // Send a document
        //if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
          //  pFaxConfig->PauseServerQueue = FALSE;
            //g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
            //g_ApiInterface.FaxFreeBuffer(pFaxConfig);

            // Disconnect from the fax server
//            g_ApiInterface.FaxClose(hFaxSvcHandle);
  //          return;
    //    }

      //  (*pnNumCasesAttempted)++;
//		dwFuncCasesAtt++;

  //      fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob)) {
            //fnWriteLogFile(TEXT("FaxGetJob() failed.  The error code is 0x%08x.  This is an error.  FaxGetJob() should succeed.\r\n"), GetLastError());
        //}
        //else {
          //  g_ApiInterface.FaxFreeBuffer(pFaxJob);
//            (*pnNumCasesPassed)++;
//			dwFuncCasesPass++;
  //      }

    //    pFaxConfig->PauseServerQueue = FALSE;
      //  g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        //g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
	fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
	fnWriteLogFile(TEXT("\n\t</function>"));
	
}

VOID
fnFaxSetJob(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	BOOL	 bTestLimits
)
/*++

Routine Description:

  FaxSetJob()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE              hFaxSvcHandle;
    // pFaxConfig is the pointer to the fax configuration
    PFAX_CONFIGURATION  pFaxConfig;
    // pFaxJob1 is the pointer to the fax job
    PFAX_JOB_ENTRY      pFaxJob1;
    // pFaxJob2 is the pointer to the fax job
    PFAX_JOB_ENTRY      pFaxJob2;
    // FaxJobParam is the fax job params
    FAX_JOB_PARAM       FaxJobParam;
    // dwFaxId is the fax job id
    DWORD               dwFaxId;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxSetJob().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxSetJob\">"));

	
    ZeroMemory(&FaxJobParam, sizeof(FAX_JOB_PARAM));
    FaxJobParam.SizeOfStruct = sizeof(FAX_JOB_PARAM);
    FaxJobParam.RecipientNumber = g_szWhisPhoneNumber;
	
	fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);

	// Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> Can not connect to fax server %s, The error code is 0x%08x.\r\n"), szServerName,GetLastError());
			fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to %s\r\n"), szServerName);
	}

    if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> Can not GET configuration from %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
			fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    pFaxConfig->PauseServerQueue = TRUE;

    if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> Can not SET configuration in %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
			fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
    // Send a document
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
		fnWriteLogFile(TEXT("WHIS> Can not send test document in %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
			fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    // Get the job
    if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob1)) {
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
			fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    // Set the job
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (JC_PAUSE).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (JC_PAUSE)\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSetJob(hFaxSvcHandle, dwFaxId, JC_PAUSE, pFaxJob1)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetJob() failed.  The error code is 0x%08x.  This is an error.  FaxSetJob() should succeed.</result>\r\n"), GetLastError());
    }
	
    else {
	
        // Get the job
        if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob2)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetJob() failed.  The error code is 0x%08x.  This is an error.  FaxGetJob() should succeed.</result>\r\n"), GetLastError());
        }
        else {
            if (pFaxJob2->QueueStatus != JS_PAUSED) {
                fnWriteLogFile(TEXT("\n\t<result value=\"0\">JobType: Received: %d, Expected: (JS_PAUSED) %d.</result>\r\n"), pFaxJob2->QueueStatus, JS_PAUSED);
            }
            else {
                (*pnNumCasesPassed)++;
				fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
				dwFuncCasesPass++;
            }

            g_ApiInterface.FaxFreeBuffer(pFaxJob2);
        }
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    g_ApiInterface.FaxFreeBuffer(pFaxJob1);
    g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

    // Send a document
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
			fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    // Get the job
    if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob1)) {
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
			fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    // Set the job
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (JC_RESUME).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSetJob(hFaxSvcHandle, dwFaxId, JC_RESUME, pFaxJob1)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetJob() failed.  The error code is 0x%08x.  This is an error.  FaxSetJob() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        // Get the job
        if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob2)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetJob() failed.  The error code is 0x%08x.  This is an error.  FaxGetJob() should succeed.</result>\r\n"), GetLastError());
        }
        else {
            if (pFaxJob2->QueueStatus != JS_PENDING) {
                fnWriteLogFile(TEXT("\n\t<result value=\"0\">JobType: Received: %d, Expected: (JS_PENDING) %d.</result>\r\n"), pFaxJob2->QueueStatus, JS_PENDING);
            }
            else {
                (*pnNumCasesPassed)++;
				fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
				dwFuncCasesPass++;
            }

            g_ApiInterface.FaxFreeBuffer(pFaxJob2);
        }
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    g_ApiInterface.FaxFreeBuffer(pFaxJob1);
    g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

    // Send a document
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
			fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    // Get the job
    if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob1)) {
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
			fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    // Set the job
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (JC_RESTART).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSetJob(hFaxSvcHandle, dwFaxId, JC_RESTART, pFaxJob1)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetJob() failed.  The error code is 0x%08x.  This is an error.  FaxSetJob() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        // Get the job
        if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob2)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetJob() failed.  The error code is 0x%08x.  This is an error.  FaxGetJob() should succeed.</result>\r\n"), GetLastError());
        }
        else {
            if (pFaxJob2->QueueStatus != JS_PENDING) {
                fnWriteLogFile(TEXT("\n\t<result value=\"0\">JobType: Received: %d, Expected: (JS_RESTART) %d.</result>\r\n"), pFaxJob2->QueueStatus, JS_PENDING);
            }
            else {
                (*pnNumCasesPassed)++;
				fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
				dwFuncCasesPass++;
            }

            g_ApiInterface.FaxFreeBuffer(pFaxJob2);
        }
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    g_ApiInterface.FaxFreeBuffer(pFaxJob1);
    g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

    // Send a document
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    // Get the job
    if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob1)) {
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    // Set the job
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (JC_DELETE).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSetJob(hFaxSvcHandle, dwFaxId, JC_DELETE, pFaxJob1)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetJob() failed.  The error code is 0x%08x.  This is an error.  FaxSetJob() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob2)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetJob() returned TRUE.  This is an error.  FaxSetJob() should return FALSE.</result>\r\n"));
            g_ApiInterface.FaxFreeBuffer(pFaxJob2);
        }
        else {
            (*pnNumCasesPassed)++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
			dwFuncCasesPass++;
        }
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    g_ApiInterface.FaxFreeBuffer(pFaxJob1);
    g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

    // Send a document
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
			fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    // Get the job
    if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob1)) {
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }



	
  
	// Set the job (limit testing)
	if (bTestLimits)	{
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;
		fnWriteLogFile(TEXT("Invalid Case (MAX_DWORD).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"Invalid Case (MAX_DWORD)\" id=\"%d\">"), *pnNumCasesAttempted);

		if (g_ApiInterface.FaxSetJob(hFaxSvcHandle, dwFaxId, MAX_DWORD, pFaxJob1)) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">WHIS> FaxSetJob() succeeded, the is an error, FaxSetJob should fail and the error should be ERROR_INVALID_PARAMETER.</result>\r\n"));
		}
		else {
			if (GetLastError() != ERROR_INVALID_PARAMETER) {
				fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			}
			else {
				(*pnNumCasesPassed)++;
				fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
				dwFuncCasesPass++;
			}
        }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
    }
	

    g_ApiInterface.FaxFreeBuffer(pFaxJob1);
    g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

    // Send a document
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
			fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
		return;
    }

    // Get the job
    if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob1)) {
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
			fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }





    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetJob(NULL, dwFaxId, JC_RESTART, pFaxJob1)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetJob() returned TRUE.  This is an error.  FaxSetJob() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetJob() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid dwFaxId.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetJob(hFaxSvcHandle, -1, JC_RESTART, pFaxJob1)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetJob() returned TRUE.  This is an error.  FaxSetJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Invalid dwCommand.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetJob(hFaxSvcHandle, dwFaxId, -1, pFaxJob1)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetJob() returned TRUE.  This is an error.  FaxSetJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pFaxJob = NULL.  (This will fail on whistler, see RAID 10909) Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetJob(hFaxSvcHandle, dwFaxId, JC_RESTART, NULL)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetJob() returned TRUE.  This is an error.  FaxSetJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

    pFaxConfig->PauseServerQueue = FALSE;
    g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
    g_ApiInterface.FaxFreeBuffer(pFaxConfig);

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetJob(hFaxSvcHandle, dwFaxId, JC_RESTART, pFaxJob1)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetJob() returned TRUE.  This is an error.  FaxSetJob() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetJob() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    g_ApiInterface.FaxFreeBuffer(pFaxJob1);

//    if (szServerName) {

//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));

        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        //if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
          //  // Disconnect from the fax server
//            g_ApiInterface.FaxClose(hFaxSvcHandle);
  //          return;
    //    }

      //  pFaxConfig->PauseServerQueue = TRUE;

//        if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
  //          g_ApiInterface.FaxFreeBuffer(pFaxConfig);
    //        // Disconnect from the fax server
      //      g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        // Send a document
        //if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
          //  pFaxConfig->PauseServerQueue = FALSE;
            //g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
            //g_ApiInterface.FaxFreeBuffer(pFaxConfig);

            // Disconnect from the fax server
//            g_ApiInterface.FaxClose(hFaxSvcHandle);
  //          return;
    //    }

        // Get the job
      //  if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob1)) {
        //    g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

          //  pFaxConfig->PauseServerQueue = FALSE;
//            g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
  //          g_ApiInterface.FaxFreeBuffer(pFaxConfig);
//
            // Disconnect from the fax server
  //          g_ApiInterface.FaxClose(hFaxSvcHandle);
    //        return;
      //  }

        // Set the job
//        (*pnNumCasesAttempted)++;
//		dwFuncCasesAtt++;

  //      fnWriteLogFile(TEXT("Remote hFaxSvcHandle (JC_PAUSE).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    //    if (!g_ApiInterface.FaxSetJob(hFaxSvcHandle, dwFaxId, JC_PAUSE, pFaxJob1)) {
      //      fnWriteLogFile(TEXT("FaxSetJob() failed.  The error code is 0x%08x.  This is an error.  FaxSetJob() should succeed.\r\n"), GetLastError());
//        }
  //      else {
    //        (*pnNumCasesPassed)++;
	//		dwFuncCasesPass++;
      //  }

        //g_ApiInterface.FaxFreeBuffer(pFaxJob1);
        //g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

        // Send a document
        //if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
          //  pFaxConfig->PauseServerQueue = FALSE;
            //g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
            //g_ApiInterface.FaxFreeBuffer(pFaxConfig);

            // Disconnect from the fax server
            //g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        // Get the job
        //if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob1)) {
          //  g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
//
  //          pFaxConfig->PauseServerQueue = FALSE;
    //        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
      //      g_ApiInterface.FaxFreeBuffer(pFaxConfig);

            // Disconnect from the fax server
        //    g_ApiInterface.FaxClose(hFaxSvcHandle);
          //  return;
        //}

        // Set the job
        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle (JC_RESUME).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxSetJob(hFaxSvcHandle, dwFaxId, JC_RESUME, pFaxJob1)) {
          //  fnWriteLogFile(TEXT("FaxSetJob() failed.  The error code is 0x%08x.  This is an error.  FaxSetJob() should succeed.\r\n"), GetLastError());
        //}
        //else {
          //  (*pnNumCasesPassed)++;
			//dwFuncCasesPass++;
        //}

        //g_ApiInterface.FaxFreeBuffer(pFaxJob1);
        //g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

        // Send a document
//        if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
  //          pFaxConfig->PauseServerQueue = FALSE;
    //        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
      //      g_ApiInterface.FaxFreeBuffer(pFaxConfig);
//
            // Disconnect from the fax server
  //          g_ApiInterface.FaxClose(hFaxSvcHandle);
    //        return;
      //  }

        // Get the job
        //if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob1)) {
          //  g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

            //pFaxConfig->PauseServerQueue = FALSE;
            //g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
            //g_ApiInterface.FaxFreeBuffer(pFaxConfig);

            // Disconnect from the fax server
//            g_ApiInterface.FaxClose(hFaxSvcHandle);
  //          return;
        //}

        // Set the job
        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle (JC_RESTART).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxSetJob(hFaxSvcHandle, dwFaxId, JC_RESTART, pFaxJob1)) {
            //fnWriteLogFile(TEXT("FaxSetJob() failed.  The error code is 0x%08x.  This is an error.  FaxSetJob() should succeed.\r\n"), GetLastError());
        //}
        //else {
            //(*pnNumCasesPassed)++;
			//dwFuncCasesPass++;
        //}

        //g_ApiInterface.FaxFreeBuffer(pFaxJob1);
        //g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

        // Send a document
//        if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
  //          pFaxConfig->PauseServerQueue = FALSE;
    //        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
      //      g_ApiInterface.FaxFreeBuffer(pFaxConfig);
//
            // Disconnect from the fax server
  //          g_ApiInterface.FaxClose(hFaxSvcHandle);
    //        return;
      //  }

        // Get the job
        //if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob1)) {
          //  g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

//            pFaxConfig->PauseServerQueue = FALSE;
  //          g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
 //        g_ApiInterface.FaxFreeBuffer(pFaxConfig);
///
            // Disconnect from the fax server
   //         g_ApiInterface.FaxClose(hFaxSvcHandle);
     //       return;
       // }

        // Set the job
        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle (JC_DELETE).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxSetJob(hFaxSvcHandle, dwFaxId, JC_DELETE, pFaxJob1)) {
            //fnWriteLogFile(TEXT("FaxSetJob() failed.  The error code is 0x%08x.  This is an error.  FaxSetJob() should succeed.\r\n"), GetLastError());
        //}
        //else {
          //  (*pnNumCasesPassed)++;
			//dwFuncCasesPass++;
        //}

        //g_ApiInterface.FaxFreeBuffer(pFaxJob1);
        //g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

        //pFaxConfig->PauseServerQueue = FALSE;
        //g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        //g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));

}

VOID
fnFaxAbort(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxAbort()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE              hFaxSvcHandle;
    // pFaxConfig is the pointer to the fax configuration
    PFAX_CONFIGURATION  pFaxConfig;
    // pFaxJob is the pointer to the fax job
    PFAX_JOB_ENTRY      pFaxJob;
    // FaxJobParam is the fax job params
    FAX_JOB_PARAM       FaxJobParam;
    // dwFaxId is the fax job id
    DWORD               dwFaxId;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxAbort().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxAbort\">"));


    ZeroMemory(&FaxJobParam, sizeof(FAX_JOB_PARAM));
    FaxJobParam.SizeOfStruct = sizeof(FAX_JOB_PARAM);
    FaxJobParam.RecipientNumber = g_szWhisPhoneNumber;

	fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);
	
    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> Can not connect to fax server %s, The error code is 0x%08x.\r\n"), szServerName,GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to %s\r\n"), szServerName);
	}


    if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> Can not GET configuration from %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    pFaxConfig->PauseServerQueue = TRUE;

    if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> Can not SET configuration in %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    // Send a document
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
		fnWriteLogFile(TEXT("WHIS> Can not send test document in %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    // Abort the job
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxAbort() failed.  The error code is 0x%08x.  This is an error.  FaxAbort() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetJob() returned TRUE.  This is an error.  FaxGetJob() should return FALSE.</result>\r\n"));
            g_ApiInterface.FaxFreeBuffer(pFaxJob);
        }
        else {
            (*pnNumCasesPassed)++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
			dwFuncCasesPass++;
        }
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxAbort(NULL, dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxAbort() returned TRUE.  This is an error.  FaxAbort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxAbort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid dwFaxId.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid dwFaxId\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxAbort(hFaxSvcHandle, -1)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxAbort() returned TRUE.  This is an error.  FaxAbort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxAbort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    pFaxConfig->PauseServerQueue = FALSE;
    g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
    g_ApiInterface.FaxFreeBuffer(pFaxConfig);

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid hFaxSvcHandle\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxAbort() returned TRUE.  This is an error.  FaxAbort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxAbort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        //if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //pFaxConfig->PauseServerQueue = TRUE;

        //if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
          //  g_ApiInterface.FaxFreeBuffer(pFaxConfig);
            // Disconnect from the fax server
            //g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        // Send a document
        //if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
          //  pFaxConfig->PauseServerQueue = FALSE;
            //g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
            //g_ApiInterface.FaxFreeBuffer(pFaxConfig);

            // Disconnect from the fax server
            //g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        // Abort the job
        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

//        fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
  //      if (!g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId)) {
    //        fnWriteLogFile(TEXT("FaxAbort() failed.  The error code is 0x%08x.  This is an error.  FaxAbort() should succeed.\r\n"), GetLastError());
      //  }
        //else {
          //  (*pnNumCasesPassed)++;
			//dwFuncCasesPass++;
        //}

        //pFaxConfig->PauseServerQueue = FALSE;
        //g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        //g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
	fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
	fnWriteLogFile(TEXT("\n\t</function>"));
	
}

VOID
fnFaxGetPageData(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxGetPageData()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE              hFaxSvcHandle;
    // pFaxConfig is the pointer to the fax configuration
    PFAX_CONFIGURATION  pFaxConfig;
    // FaxJobParam is the fax job params
    FAX_JOB_PARAM       FaxJobParam;
    // dwFaxId is the fax job id
    DWORD               dwFaxId;
    // pPageDataBuffer is a pointer to the page data
    LPBYTE              pPageDataBuffer;
    // dwPageDataBufferSize is the size of the page data buffer
    DWORD               dwPageDataBufferSize;
    // dwImageWidth is the page data width
    DWORD               dwImageWidth;
    // dwImageHeight is the page data height
    DWORD               dwImageHeight;

    DWORD               dwIndex;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxGetPageData().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxGetPageData\">"));

    ZeroMemory(&FaxJobParam, sizeof(FAX_JOB_PARAM));
    FaxJobParam.SizeOfStruct = sizeof(FAX_JOB_PARAM);
    FaxJobParam.RecipientNumber = g_szWhisPhoneNumber;

	fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> Can not connect to fax server %s, The error code is 0x%08x.\r\n"), szServerName,GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to %s\r\n"), szServerName);
	}


    if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> Can not GET configuration from %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    pFaxConfig->PauseServerQueue = TRUE;

    if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> Can not SET configuration in %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    // Send a document
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
		fnWriteLogFile(TEXT("WHIS> Can not send test document in %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    for (dwIndex = 0; dwIndex < 2; dwIndex++) {
        // Get the page data
        (*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

        fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

        if (!g_ApiInterface.FaxGetPageData(hFaxSvcHandle, dwFaxId, &pPageDataBuffer, &dwPageDataBufferSize, &dwImageWidth, &dwImageHeight)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetPageData() failed.  The error code is 0x%08x.  This is an error.  FaxGetPageData() should succeed.</result>\r\n"), GetLastError());
        }
        else {
            g_ApiInterface.FaxFreeBuffer(pPageDataBuffer);
            (*pnNumCasesPassed)++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
			dwFuncCasesPass++;
        }
		fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
    }		


    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetPageData(NULL, dwFaxId, &pPageDataBuffer, &dwPageDataBufferSize, &dwImageWidth, &dwImageHeight)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetPageData() returned TRUE.  This is an error.  FaxGetPageData() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pPageDataBuffer);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetPageData() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid dwFaxId.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid dwFaxId\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetPageData(hFaxSvcHandle, -1, &pPageDataBuffer, &dwPageDataBufferSize, &dwImageWidth, &dwImageHeight)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetPageData() returned TRUE.  This is an error.  FaxGetPageData() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pPageDataBuffer);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetPageData() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pPageDataBuffer = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pPageDataBuffer = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetPageData(hFaxSvcHandle, dwFaxId, NULL, &dwPageDataBufferSize, &dwImageWidth, &dwImageHeight)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetPageData() returned TRUE.  This is an error.  FaxGetPageData() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pPageDataBuffer);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetPageData() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("dwPageDataBufferSize = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"dwPageDataBufferSize = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetPageData(hFaxSvcHandle, dwFaxId, &pPageDataBuffer, NULL, &dwImageWidth, &dwImageHeight)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetPageData() returned TRUE.  This is an error.  FaxGetPageData() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pPageDataBuffer);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetPageData() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("dwImageWidth = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"dwImageWidth = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetPageData(hFaxSvcHandle, dwFaxId, &pPageDataBuffer, &dwPageDataBufferSize, NULL, &dwImageHeight)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetPageData() returned TRUE.  This is an error.  FaxGetPageData() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pPageDataBuffer);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetPageData() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("dwImageHeight = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"dwImageHeight = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetPageData(hFaxSvcHandle, dwFaxId, &pPageDataBuffer, &dwPageDataBufferSize, &dwImageWidth, NULL)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetPageData() returned TRUE.  This is an error.  FaxGetPageData() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pPageDataBuffer);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetPageData() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

    pFaxConfig->PauseServerQueue = FALSE;
    g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
    g_ApiInterface.FaxFreeBuffer(pFaxConfig);

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid hFaxSvcHandle\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetPageData(hFaxSvcHandle, dwFaxId, &pPageDataBuffer, &dwPageDataBufferSize, &dwImageWidth, &dwImageHeight)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetPageData() returned TRUE.  This is an error.  FaxGetPageData() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pPageDataBuffer);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetPageData() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        //if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
//            return;
  //      }

    //    pFaxConfig->PauseServerQueue = TRUE;

      //  if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
        //    g_ApiInterface.FaxFreeBuffer(pFaxConfig);
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        // Send a document
//        if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
  //          pFaxConfig->PauseServerQueue = FALSE;
    //        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
      //      g_ApiInterface.FaxFreeBuffer(pFaxConfig);
//
            // Disconnect from the fax server
  //          g_ApiInterface.FaxClose(hFaxSvcHandle);
    //        return;
      //  }

        // Get the page data
        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

//        fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
  //      if (!g_ApiInterface.FaxGetPageData(hFaxSvcHandle, dwFaxId, &pPageDataBuffer, &dwPageDataBufferSize, &dwImageWidth, &dwImageHeight)) {
    //       fnWriteLogFile(TEXT("FaxGetPageData() failed.  The error code is 0x%08x.  This is an error.  FaxGetPageData() should succeed.\r\n"), GetLastError());
     //   }
       // else {
         //   g_ApiInterface.FaxFreeBuffer(pPageDataBuffer);
           // (*pnNumCasesPassed)++;
			//dwFuncCasesPass++;
        //}

        //pFaxConfig->PauseServerQueue = FALSE;
        //g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        //g_ApiInterface.FaxFreeBuffer(pFaxConfig);
//
        // Disconnect from the fax server
  //      g_ApiInterface.FaxClose(hFaxSvcHandle);
//    }
	fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
	fnWriteLogFile(TEXT("\n\t</function>"));
	
}


//BOOL WINAPI
//FaxAPIDllWhisSetPhoneNumber(
//							LPCWSTR  szWhisPhoneNumberW,
//							LPCSTR   szWhisPhoneNumberA
//							)
//{

    
//#ifdef UNICODE
    //g_szWhisPhoneNumber = szWhisPhoneNumberW;
//#else
  //  g_szWhisPhoneNumber = szWhisPhoneNumberA;
//#endif
	
	
//	fnWriteLogFile(TEXT("WHIS> Whis Phone Number Recieved: %s\r\n"),g_szWhisPhoneNumber);
	//return TRUE;
//}
							



BOOL WINAPI
FaxAPIDllTest(
	LPCWSTR  szWhisPhoneNumberW,
	LPCSTR   szWhisPhoneNumberA,
	LPCWSTR  szServerNameW,
    LPCSTR   szServerNameA,
    UINT     nNumCasesLocal,
    UINT     nNumCasesServer,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	DWORD	 dwTestMode
)
{
    LPCTSTR  szServerName;
	UINT     nNumCases;

	// for Whis-extended only
#ifdef UNICODE
    if (lstrlen(szWhisPhoneNumberW)>0) { 
		g_szWhisPhoneNumber = szWhisPhoneNumberW; 
	}
	else {
		g_szWhisPhoneNumber=TEXT(WHIS_DEFAULT_PHONE_NUMBER);
	}
#else
	if (lstrlen(szWhisPhoneNumberA)>0) {
		g_szWhisPhoneNumber = szWhisPhoneNumberA;
	}
	else {
		g_szWhisPhoneNumber=TEXT(WHIS_DEFAULT_PHONE_NUMBER);
	}
#endif

	_tcscpy(g_szWhisPhoneNumberVar1,g_szWhisPhoneNumber);
	_tcscat(g_szWhisPhoneNumberVar1,TEXT("1"));

	_tcscpy(g_szWhisPhoneNumberVar2,g_szWhisPhoneNumber);
	_tcscat(g_szWhisPhoneNumberVar2,TEXT("2"));

	_tcscpy(g_szWhisPhoneNumberVar3,g_szWhisPhoneNumber);
	_tcscat(g_szWhisPhoneNumberVar3,TEXT("3"));



#ifdef UNICODE
    szServerName = szServerNameW;
#else
    szServerName = szServerNameA;
#endif

    if (szServerName) {
        nNumCases = nNumCasesServer;
		fnWriteLogFile(TEXT("WHIS> REMOTE SERVER MODE:\r\n"));
    }
    else {
        nNumCases = nNumCasesLocal;
    }

    // FaxEnumJobs()
    fnFaxEnumJobs(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    // FaxGetJob()
    fnFaxGetJob(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

  
	if (dwTestMode==WHIS_TEST_MODE_LIMITS)	{
		// FaxSetJob() limits
		fnFaxSetJob(szServerName, pnNumCasesAttempted, pnNumCasesPassed,TRUE);
	}
	else	{
		// FaxSetJob()
		fnFaxSetJob(szServerName, pnNumCasesAttempted, pnNumCasesPassed,FALSE);
	}


    // FaxAbort()
    fnFaxAbort(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    // FaxGetPageData()
    fnFaxGetPageData(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    if ((*pnNumCasesAttempted == nNumCases) && (*pnNumCasesPassed == *pnNumCasesAttempted)) {
        return TRUE;
    }
    else {
        return FALSE;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legacywin32_xml\routeapi\routeapi.h ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

  routeapi.h

Abstract:

  This module contains the global definitions

Author:

  Steven Kehrli (steveke) 8/28/1998

--*/

#ifndef _ROUTEAPI_H
#define _ROUTEAPI_H

#define ROUTEAPI_EXTENSION_W               L"RouteApi Routing Extension"
#define ROUTEAPI_EXTENSION                 TEXT("RouteApi Routing Extension")
#define ROUTEAPI_EXTENSION_FRIENDLYNAME_W  L"RouteApi Routing Extension Friendly Name"
#define ROUTEAPI_EXTENSION_FRIENDLYNAME    TEXT("RouteApi Routing Extension Friendly Name")
#define ROUTEAPI_EXTENSION_IMAGENAME_W     L"%SystemRoot%\\system32\\apiext.dll"
#define ROUTEAPI_EXTENSION_IMAGENAME       TEXT("%SystemRoot%\\system32\\apiext.dll")
#define ROUTEAPI_EXTENSION_DLLNAME_W       L"apiext.dll"
#define ROUTEAPI_EXTENSION_DLLNAME         TEXT("apiext.dll")

#define ROUTEAPI_METHOD1_W                 L"RouteApi Routing Method #1"
#define ROUTEAPI_METHOD1                   TEXT("RouteApi Routing Method #1")
#define ROUTEAPI_METHOD_FRIENDLYNAME1_W    L"RouteApi Routing Method Friendly Name #1"
#define ROUTEAPI_METHOD_FRIENDLYNAME1      TEXT("RouteApi Routing Method Friendly Name #1")
#define ROUTEAPI_METHOD_FUNCTIONNAME1_W    L"RouteApi1"
#define ROUTEAPI_METHOD_FUNCTIONNAME1      TEXT("RouteApi1")
#define ROUTEAPI_METHOD_GUID1_W            L"{4800F101-B6B7-11D0-8CDB-00C04FB6BCE9}"
#define ROUTEAPI_METHOD_GUID1              TEXT("{4800F101-B6B7-11D0-8CDB-00C04FB6BCE9}")

#define ROUTEAPI_METHOD2_W                 L"RouteApi Routing Method #2"
#define ROUTEAPI_METHOD2                   TEXT("RouteApi Routing Method #2")
#define ROUTEAPI_METHOD_FRIENDLYNAME2_W    L"RouteApi Routing Method Friendly Name #2"
#define ROUTEAPI_METHOD_FRIENDLYNAME2      TEXT("RouteApi Routing Method Friendly Name #2")
#define ROUTEAPI_METHOD_FUNCTIONNAME2_W    L"RouteApi2"
#define ROUTEAPI_METHOD_FUNCTIONNAME2      TEXT("RouteApi2")
#define ROUTEAPI_METHOD_GUID2_W            L"{4800F102-B6B7-11D0-8CDB-00C04FB6BCE9}"
#define ROUTEAPI_METHOD_GUID2              TEXT("{4800F102-B6B7-11D0-8CDB-00C04FB6BCE9}")

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legacywin32_xml\miscapi\miscapi.c ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

  miscapi.c

Abstract:

  MiscApi: Fax API Test Dll: Client Misc APIs
    1) FaxConnectFaxServer()
    2) FaxFreeBuffer()
    3) FaxClose()

Author:

  Steven Kehrli (steveke) 8/28/1998

--*/


/*++

  Whistler Version:

  Lior Shmueli (liors) 23/11/2000

 ++*/

#include <wtypes.h>

#include "dllapi.h"

// g_hHeap is the handle to the heap
HANDLE           g_hHeap = NULL;
// g_ApiInterface is the API_INTERFACE structure
API_INTERFACE    g_ApiInterface;
// fnWriteLogFile is the pointer to the function to write a string to the log file
PFNWRITELOGFILE  fnWriteLogFile = NULL;



DWORD
DllEntry(
    HINSTANCE  hInstance,
    DWORD      dwReason,
    LPVOID     pContext
)
/*++

Routine Description:

  DLL entry point

Arguments:

  hInstance - handle to the module
  dwReason - indicates the reason for being called
  pContext - context

Return Value:

  TRUE on success

--*/
{
    return TRUE;
}

VOID WINAPI
FaxAPIDllInit(
    HANDLE            hHeap,
    API_INTERFACE     ApiInterface,
    PFNWRITELOGFILEW  pfnWriteLogFileW,
    PFNWRITELOGFILEA  pfnWriteLogFileA
)
{
    // Set g_hHeap
    g_hHeap = hHeap;
    // Set g_ApiInterface
    g_ApiInterface = ApiInterface;
#ifdef UNICODE
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileW;
#else
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileA;
#endif

    return;
}

VOID
fnFaxConnectFaxServer(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	BOOL	 bTestLimits
)
/*++

Routine Description:

  FaxConnectFaxServer()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE  hFaxSvcHandle;

    DWORD   dwIndex;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxConnectFaxServer().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxConnectFaxServer\">"));

    for (dwIndex = 0; dwIndex < 2; dwIndex++) {
        // Connect to the fax server
        (*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

        fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

        if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxConnectFaxServer() failed.  The error code is 0x%08x.  This is an error.  FaxConnectFaxServer() should succeed</result>.\r\n"), GetLastError());
        }
        else {
            if (hFaxSvcHandle == NULL) {
                fnWriteLogFile(TEXT("\n\t<result value=\"0\">hFaxSvcHandle is NULL.  This is an error.  hFaxSvcHandle should not be NULL.</result>\r\n"));
            }
            else {
                (*pnNumCasesPassed)++;
				dwFuncCasesPass++;
				fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
            }

            g_ApiInterface.FaxClose(hFaxSvcHandle);
        }
		fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
	}

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxConnectFaxServer(NULL, NULL)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxConnectFaxServer() returned TRUE.  This is an error.  FaxConnectFaxServer() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxClose(hFaxSvcHandle);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxConnectFaxServer() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));

    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));



	if (bTestLimits) {
	    (*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

	    fnWriteLogFile(TEXT("ServerName=LONG_STRING  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"ServerName=LONG_STRING\" id=\"%d\">"), *pnNumCasesAttempted);

		if (g_ApiInterface.FaxConnectFaxServer(TEXT(LONG_STRING), &hFaxSvcHandle)) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxConnectFaxServer() returned TRUE.  This is an error.  FaxConnectFaxServer() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
			g_ApiInterface.FaxClose(hFaxSvcHandle);
		}
		else 	{
			if (GetLastError() != ERROR_INVALID_PARAMETER) {
				fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxConnectFaxServer() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			}
			else	{
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
			}
		}
		fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
     }

//	if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
  //      (*pnNumCasesAttempted)++;
	//	dwFuncCasesAtt++;

      //  fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
          //  fnWriteLogFile(TEXT("FaxConnectFaxServer() failed.  The error code is 0x%08x.  This is an error.  FaxConnectFaxServer() should succeed.\r\n"), GetLastError());
        //}
        //else {
          //  (*pnNumCasesPassed)++;
//			dwFuncCasesPass++;

  //          g_ApiInterface.FaxClose(hFaxSvcHandle);
    //    }
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxConnectFaxServer, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}

VOID
fnFaxFreeBuffer(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxFreeBuffer()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE              hFaxSvcHandle;
    // pFaxConfig is the pointer to the fax configuration
    PFAX_CONFIGURATION  pFaxConfig;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxFreeBuffer().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxFreeBuffer\">"));

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not GET configuration, The error code is 0x%08x.\r\n"), GetLastError());
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

    g_ApiInterface.FaxFreeBuffer(pFaxConfig);
		
	(*pnNumCasesPassed)++;
	dwFuncCasesPass++;
	fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
	
	// Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

fnWriteLogFile(TEXT("$$$ Summery for FaxFreeBuffer, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}

VOID
fnFaxClose(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxClose()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE          hFaxSvcHandle;
    // hFaxPortHandle is the handle to a fax port
    HANDLE          hFaxPortHandle;
    // pFaxPortInfo is the pointer to the fax port info
    PFAX_PORT_INFO  pFaxPortInfo;
    // dwNumPorts is the number of fax ports
    DWORD           dwNumPorts;
    // dwDeviceId is the device id of the fax port
    DWORD           dwDeviceId;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxClose().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxClose\">"));

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}


    // Enumerate the fax ports
    if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not enum ports on %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    dwDeviceId = pFaxPortInfo[0].DeviceId;

    // Free the fax port info
    g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not open port %d, The error code is 0x%08x.\r\n"),dwDeviceId, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (Port Handle).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (Port Handle)\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxClose(hFaxPortHandle)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxClose() failed.  The error code is 0x%08x.  This is an error.  FaxClose() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid Handle (Port Handle).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid Handle (Port Handle)\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxClose(hFaxPortHandle)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxClose() returned TRUE.  This is an error.  FaxClose() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxClose() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (Service Handle).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (Service Handle)\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxClose(hFaxSvcHandle)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxClose() failed.  The error code is 0x%08x.  This is an error.  FaxClose() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid Handle (Service Handle).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid Handle (Service Handle)\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxClose(hFaxSvcHandle)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxClose() returned TRUE.  This is an error.  FaxClose() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxClose() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("NULL Handle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"NULL Handle\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxClose(NULL)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxClose() returned TRUE.  This is an error.  FaxClose() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxClose() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        // Enumerate the fax ports
//        if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
            // Disconnect from the fax server
  //          g_ApiInterface.FaxClose(hFaxSvcHandle);
    //        return;
      //  }

//        dwDeviceId = pFaxPortInfo[0].DeviceId;

        // Free the fax port info
  //      g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

    //    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
            // Disconnect from the fax server
      //      g_ApiInterface.FaxClose(hFaxSvcHandle);
        //    return;
        //}

        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

        //fnWriteLogFile(TEXT("Valid Case (Port Handle).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxClose(hFaxPortHandle)) {
            //fnWriteLogFile(TEXT("FaxClose() failed.  The error code is 0x%08x.  This is an error.  FaxClose() should succeed.\r\n"), GetLastError());
        //}
        //else {
            //(*pnNumCasesPassed)++;
			//dwFuncCasesPass++;
        //}

        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

        //fnWriteLogFile(TEXT("Invalid Handle (Port Handle).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (g_ApiInterface.FaxClose(hFaxPortHandle)) {
            //fnWriteLogFile(TEXT("FaxClose() returned TRUE.  This is an error.  FaxClose() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        //}
        //else if (GetLastError() != ERROR_INVALID_HANDLE) {
          //  fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxClose() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
        //}
        //else {
            //(*pnNumCasesPassed)++;
			//dwFuncCasesPass++;
        //}

        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

        //fnWriteLogFile(TEXT("Valid Case (Service Handle).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxClose(hFaxSvcHandle)) {
          //  fnWriteLogFile(TEXT("FaxClose() failed.  The error code is 0x%08x.  This is an error.  FaxClose() should succeed.\r\n"), GetLastError());
        //}
        //else {
            //(*pnNumCasesPassed)++;
			//dwFuncCasesPass++;
        //}

        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

        //fnWriteLogFile(TEXT("Invalid Handle (Service Handle).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (g_ApiInterface.FaxClose(hFaxSvcHandle)) {
            //fnWriteLogFile(TEXT("FaxClose() returned TRUE.  This is an error.  FaxClose() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        //}
        //else if (GetLastError() != ERROR_INVALID_HANDLE) {
            //fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxClose() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
        //}
        //else {
            //(*pnNumCasesPassed)++;
			//dwFuncCasesPass++;
        //}
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxClose, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}




VOID
fnFaxCompleteJobParams(
	LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	BOOL	 bTestLimits,
	BOOL	 bDoW2KFails
)
{
   // hFaxSvcHandle is the handle to the fax server
    HANDLE          hFaxSvcHandle;
 	
	// return value
	BOOL			bRetVal;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


	int				i;

	// Complate job params structures
	PFAX_JOB_PARAM pJobParam;
	PFAX_COVERPAGE_INFO pCoverpageInfo;


	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxCompleteJobParams().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxCompleteJobParams\">"));

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);
	
	
	bRetVal=g_ApiInterface.FaxCompleteJobParams(&pJobParam,&pCoverpageInfo);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxCompleteJobParmas() failed.  The error code is 0x%08x.  This is an error.  FaxClose() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		 (*pnNumCasesPassed)++;
		 dwFuncCasesPass++;
		 fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	fnWriteLogFile(TEXT("pJobParam-> Values...\r\n"));
	fnWriteLogFile(TEXT("SizeOfStruct: %d.\r\n"),pJobParam->SizeOfStruct);
    fnWriteLogFile(TEXT("RecipientNumber: %s.\r\n"),pJobParam->RecipientNumber);
	fnWriteLogFile(TEXT("RecipientName: %s.\r\n"),pJobParam->RecipientName);
	fnWriteLogFile(TEXT("Tsid: %s.\r\n"),pJobParam->Tsid);
	fnWriteLogFile(TEXT("SenderName: %s.\r\n"),pJobParam->SenderName);
	fnWriteLogFile(TEXT("SenderCompany: %s.\r\n"),pJobParam->SenderCompany);
	fnWriteLogFile(TEXT("SenderDept: %s.\r\n"),pJobParam->SenderDept);
	fnWriteLogFile(TEXT("BillingCode: %s.\r\n"),pJobParam->BillingCode);
	fnWriteLogFile(TEXT("ScheduleAction: %d.\r\n"),pJobParam->ScheduleAction);
	fnWriteLogFile(TEXT("ScheduleTime: %d.\r\n"),pJobParam->ScheduleTime);
	fnWriteLogFile(TEXT("DeliveryReportType: %d.\r\n"),pJobParam->DeliveryReportType);
	fnWriteLogFile(TEXT("DeliveryReportAddress: %s.\r\n"),pJobParam->DeliveryReportAddress);
	fnWriteLogFile(TEXT("DocumentName: %s.\r\n"),pJobParam->DocumentName);	
	for (i=0;i<3;i++)	{
		fnWriteLogFile(TEXT("Reserved[%d]: %d.\r\n"),i,pJobParam->Reserved[i]);
	}

	fnWriteLogFile(TEXT("pCoverpageInfo-> Values...\r\n"));
	fnWriteLogFile(TEXT("SizeOfStruct: %d.\r\n"),pCoverpageInfo->SizeOfStruct);
	fnWriteLogFile(TEXT("CoverPageName: %s.\r\n"),pCoverpageInfo->CoverPageName);      
	fnWriteLogFile(TEXT("UseServerCoverPage: %d.\r\n"),pCoverpageInfo->UseServerCoverPage);
  
    fnWriteLogFile(TEXT("RecName: %s.\r\n"),pCoverpageInfo->RecName);
	fnWriteLogFile(TEXT("RecFaxNumber: %s.\r\n"),pCoverpageInfo->RecFaxNumber);
	fnWriteLogFile(TEXT("RecCompany: %s.\r\n"),pCoverpageInfo->RecCompany);
	fnWriteLogFile(TEXT("RecStreetAddress: %s.\r\n"),pCoverpageInfo->RecStreetAddress);
	fnWriteLogFile(TEXT("RecCity: %s.\r\n"),pCoverpageInfo->RecCity);
	fnWriteLogFile(TEXT("RecState: %s.\r\n"),pCoverpageInfo->RecState);
	fnWriteLogFile(TEXT("RecZip: %s.\r\n"),pCoverpageInfo->RecZip);
	fnWriteLogFile(TEXT("RecCountry: %s.\r\n"),pCoverpageInfo->RecCountry);
	fnWriteLogFile(TEXT("RecTitle: %s.\r\n"),pCoverpageInfo->RecTitle);
	fnWriteLogFile(TEXT("RecDepartment: %s.\r\n"),pCoverpageInfo->RecDepartment);
	fnWriteLogFile(TEXT("RecOfficeLocation: %s.\r\n"),pCoverpageInfo->RecOfficeLocation);
	fnWriteLogFile(TEXT("RecHomePhone: %s.\r\n"),pCoverpageInfo->RecHomePhone);
	fnWriteLogFile(TEXT("RecOfficePhone: %s.\r\n"),pCoverpageInfo->RecOfficePhone);
	  
  
	fnWriteLogFile(TEXT("SdrName: %s.\r\n"),pCoverpageInfo->SdrName);
	fnWriteLogFile(TEXT("SdrFaxNumber: %s.\r\n"),pCoverpageInfo->SdrFaxNumber);
	fnWriteLogFile(TEXT("SdrCompany: %s.\r\n"),pCoverpageInfo->SdrCompany);
	fnWriteLogFile(TEXT("SdrAddress: %s.\r\n"),pCoverpageInfo->SdrAddress);
	fnWriteLogFile(TEXT("SdrTitle: %s.\r\n"),pCoverpageInfo->SdrTitle);
	fnWriteLogFile(TEXT("SdrDepartment: %s.\r\n"),pCoverpageInfo->SdrDepartment);
	fnWriteLogFile(TEXT("SdrOfficeLocation: %s.\r\n"),pCoverpageInfo->SdrOfficeLocation);
	fnWriteLogFile(TEXT("SdrHomePhone: %s.\r\n"),pCoverpageInfo->SdrHomePhone);
	fnWriteLogFile(TEXT("SdrOfficePhone: %s.\r\n"),pCoverpageInfo->SdrOfficePhone);
	  
  
	fnWriteLogFile(TEXT("Note: %s.\r\n"),pCoverpageInfo->Note);
	fnWriteLogFile(TEXT("Subject: %s.\r\n"),pCoverpageInfo->Subject);
	fnWriteLogFile(TEXT("TimeSent: %s.\r\n"),pCoverpageInfo->TimeSent);
	fnWriteLogFile(TEXT("PageCount: %s.\r\n"),pCoverpageInfo->PageCount);

	g_ApiInterface.FaxFreeBuffer(pCoverpageInfo);
	g_ApiInterface.FaxFreeBuffer(pJobParam);

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

	fnWriteLogFile(TEXT("pCoverpageInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pCoverpageInfo = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

	if (g_ApiInterface.FaxCompleteJobParams(&pJobParam,NULL)) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxCompleteJobParams() returned TRUE.  This is an error.  axCompleteJobParams() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
			g_ApiInterface.FaxFreeBuffer(pJobParam);
	}
	else if (GetLastError() != ERROR_INVALID_PARAMETER) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxCompleteJobParams() returned 0x%08x.  This is an error.  axCompleteJobParams() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
	}
	else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
	}
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

	fnWriteLogFile(TEXT("pJobParam = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pJobParam = NULL\" id=\"%d\">"), *pnNumCasesAttempted);
	if (g_ApiInterface.FaxCompleteJobParams(NULL,&pCoverpageInfo)) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxCompleteJobParams() returned TRUE.  This is an error. axCompleteJobParams() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
			g_ApiInterface.FaxFreeBuffer(pCoverpageInfo);
	}
	else if (GetLastError() != ERROR_INVALID_PARAMETER) {
	        fnWriteLogFile(TEXT("axCompleteJobParams() returned 0x%08x.  This is an error.  axCompleteJobParams() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
	}
	else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
	}
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

	fnWriteLogFile(TEXT("pCoverpageInfo = NULL and pJobParam = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pCoverpageInfo = NULL and pJobParam = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

	if (g_ApiInterface.FaxCompleteJobParams(NULL,NULL)) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxCompleteJobParams() returned TRUE.  This is an error.  FaxCompleteJobParams() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
	}
	else if (GetLastError() != ERROR_INVALID_PARAMETER) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxCompleteJobParams() returned 0x%08x.  This is an error.  FaxCompleteJobParams() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
	}
	else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
	}
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

fnWriteLogFile(TEXT("$$$ Summery for FaxCompleteJobParams, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}





VOID
fnFaxAccessCheck(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	BOOL	 bTestLimits,
	BOOL	 bDoW2KFails
)
/*++

Routine Description:

  FaxClose()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE          hFaxSvcHandle;
 	// return value
	BOOL			bRetVal;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxAccessCheck().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxAccessCheck\">"));

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (FAX_READ).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (FAX_READ)\" id=\"%d\">"), *pnNumCasesAttempted);
	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,FAX_READ);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxAccessCheck() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.\r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (FAX_WRITE).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (FAX_WRITE)\" id=\"%d\">"), *pnNumCasesAttempted);

	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,FAX_WRITE);
    if (!bRetVal) {
		fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxAccessCheck() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.\r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (FAX_ALL_ACCESS).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (FAX_ALL_ACCESS)\" id=\"%d\">"), *pnNumCasesAttempted);

	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,FAX_ALL_ACCESS);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxAccessCheck() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.\r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (FAX_CONFIG_QUERY).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (FAX_CONFIG_QUERY)\" id=\"%d\">"), *pnNumCasesAttempted);

	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,FAX_CONFIG_QUERY);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxAccessCheck() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.\r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (FAX_CONFIG_SET).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (FAX_CONFIG_SET)\" id=\"%d\">"), *pnNumCasesAttempted);

	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,FAX_CONFIG_SET);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxAccessCheck() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.  \r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (FAX_JOB_MANAGE).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (FAX_JOB_MANAGE)\" id=\"%d\">"), *pnNumCasesAttempted);
	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,FAX_JOB_MANAGE);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxAccessCheck() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.\r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (FAX_JOB_QUERY).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (FAX_JOB_QUERY)\" id=\"%d\">"), *pnNumCasesAttempted);

	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,FAX_JOB_QUERY);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxAccessCheck() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.\r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (FAX_JOB_SUBMIT).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (FAX_JOB_SUBMIT)\" id=\"%d\">"), *pnNumCasesAttempted);

	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,FAX_JOB_SUBMIT);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxAccessCheck() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.\r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (FAX_PORT_QUERY).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (FAX_PORT_QUERY)\" id=\"%d\">"), *pnNumCasesAttempted);

	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,FAX_PORT_QUERY);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxAccessCheck() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.\r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (FAX_PORT_SET).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (FAX_PORT_SET)\" id=\"%d\">"), *pnNumCasesAttempted);

	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,FAX_PORT_SET);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxAccessCheck() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.\r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

	fnWriteLogFile(TEXT("Valid Case (GENERIC_ALL).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (GENERIC_ALL)\" id=\"%d\">"), *pnNumCasesAttempted);

	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,GENERIC_ALL);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxAccessCheck() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.\r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (GENERIC_EXECUTE).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (GENERIC_EXECUTE)\" id=\"%d\">"), *pnNumCasesAttempted);

	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,GENERIC_EXECUTE);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxAccessCheck() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.\r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
	
	fnWriteLogFile(TEXT("Valid Case (GENERIC_WRITE).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (GENERIC_WRITE)\" id=\"%d\">"), *pnNumCasesAttempted);

	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,GENERIC_WRITE);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxAccessCheck() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.\r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

	fnWriteLogFile(TEXT("Valid Case (GENERIC_READ).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (GENERIC_READ)\" id=\"%d\">"), *pnNumCasesAttempted);

	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,GENERIC_READ);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxAccessCheck() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.\r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));




	if (bTestLimits)	{
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("Invalid Case (MAX_DWORD).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"Invalid Case (MAX_DWORD)\" id=\"%d\">"), *pnNumCasesAttempted);

		bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,MAX_DWORD);
		if (bRetVal) {
	    fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxAccessCheck() returned TRUE.  This is an error.  FaxAccess() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
	    }
	    else {
			if (GetLastError() != ERROR_INVALID_PARAMETER)	{
				fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetAccessCheck() returned 0x%08x.  This is an error.  FaxAccessCheck() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
				
			}
			else	{
				(*pnNumCasesPassed)++;
				dwFuncCasesPass++;
				fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
			}
		}
		fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
	}
	
    if (bDoW2KFails)		{
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

	    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

	    if (g_ApiInterface.FaxAccessCheck(NULL, FAX_READ)) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxAccessCheck() returned TRUE.  This is an error.  FaxAccess() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
		}
		else if (GetLastError() != ERROR_INVALID_HANDLE) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxAccessCheck() returned 0x%08x.  This is an error.  FaxAccessCheck() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
	    }
	    else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		}
		fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    
		// Disconnect from the fax server
		g_ApiInterface.FaxClose(hFaxSvcHandle);
	
	    (*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

	    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"Invalid hFaxSvcHandle\" id=\"%d\">"), *pnNumCasesAttempted);

	    if (g_ApiInterface.FaxAccessCheck(hFaxSvcHandle, FAX_READ)) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxAccessCheck() returned TRUE.  This is an error.  FaxAccessCheck() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
		}
		else if (GetLastError() != ERROR_INVALID_HANDLE) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetAccessCheck() returned 0x%08x.  This is an error.  FaxAccessCheck() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
	    }
	    else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		}
		fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
	}
fnWriteLogFile(TEXT("$$$ Summery for FaxAccessCheck, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}










BOOL WINAPI
FaxAPIDllTest(
	LPCWSTR  szWhisPhoneNumberW,
	LPCSTR   szWhisPhoneNumberA,
    LPCWSTR  szServerNameW,
    LPCSTR   szServerNameA,
    UINT     nNumCasesLocal,
    UINT     nNumCasesServer,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	DWORD	 dwTestMode
)
{
    LPCTSTR  szServerName;
    UINT     nNumCases;

#ifdef UNICODE
    szServerName = szServerNameW;
#else
    szServerName = szServerNameA;
#endif

    if (szServerName) {
        nNumCases = nNumCasesServer;
		fnWriteLogFile(TEXT("WHIS> REMOTE SERVER MODE:\r\n"));
    }
    else {
        nNumCases = nNumCasesLocal;
    }

    // FaxConnectFaxServer()
	if (dwTestMode==WHIS_TEST_MODE_LIMITS)
	{
		fnFaxConnectFaxServer(szServerName, pnNumCasesAttempted, pnNumCasesPassed,TRUE);
	}
	else
	{
		fnFaxConnectFaxServer(szServerName, pnNumCasesAttempted, pnNumCasesPassed,FALSE);
	}


    // FaxFreeBuffer()
    fnFaxFreeBuffer(szServerName, pnNumCasesAttempted, pnNumCasesPassed);
	
	// FaxCompleteJobParams()
	fnFaxCompleteJobParams(szServerName, pnNumCasesAttempted, pnNumCasesPassed,FALSE,TRUE);


	// FaxAccessCheck()
	if (dwTestMode == WHIS_TEST_MODE_DO_W2K_FAILS)	{
		fnFaxAccessCheck(szServerName, pnNumCasesAttempted, pnNumCasesPassed,FALSE,TRUE);
	}
	else if (dwTestMode == WHIS_TEST_MODE_LIMITS)	{
		fnFaxAccessCheck(szServerName, pnNumCasesAttempted, pnNumCasesPassed,TRUE,FALSE);
	}
	else	{
		fnFaxAccessCheck(szServerName, pnNumCasesAttempted, pnNumCasesPassed,FALSE,FALSE);
	}
		
	

    // FaxClose()
    fnFaxClose(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    if ((*pnNumCasesAttempted == nNumCases) && (*pnNumCasesPassed == *pnNumCasesAttempted)) {
        return TRUE;
    }
    else {
        return FALSE;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legwin32_whis_xml\dllapi.h ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

  dllapi.h

Abstract:

  This module contains the global definitions

Author:

  Steven Kehrli (steveke) 8/28/1998

--*/

/*++

  Whistler Version:

  Lior Shmueli (liors) 23/11/2000

 ++*/

#ifndef _DLLAPI_H
#define _DLLAPI_H

#include <winfax.h>

typedef struct _API_INTERFACE {
    HINSTANCE                      hInstance;
    PFAXABORT                      FaxAbort;
    PFAXACCESSCHECK                FaxAccessCheck;
    PFAXCLOSE                      FaxClose;
    PFAXCOMPLETEJOBPARAMSW         FaxCompleteJobParamsW;
    PFAXCOMPLETEJOBPARAMSA         FaxCompleteJobParamsA;
    PFAXCONNECTFAXSERVERW          FaxConnectFaxServerW;
    PFAXCONNECTFAXSERVERA          FaxConnectFaxServerA;
    PFAXENABLEROUTINGMETHODW       FaxEnableRoutingMethodW;
    PFAXENABLEROUTINGMETHODA       FaxEnableRoutingMethodA;
    PFAXENUMGLOBALROUTINGINFOW     FaxEnumGlobalRoutingInfoW;
    PFAXENUMGLOBALROUTINGINFOA     FaxEnumGlobalRoutingInfoA;
    PFAXENUMJOBSW                  FaxEnumJobsW;
    PFAXENUMJOBSA                  FaxEnumJobsA;
    PFAXENUMPORTSW                 FaxEnumPortsW;
    PFAXENUMPORTSA                 FaxEnumPortsA;
    PFAXENUMROUTINGMETHODSW        FaxEnumRoutingMethodsW;
    PFAXENUMROUTINGMETHODSA        FaxEnumRoutingMethodsA;
    PFAXFREEBUFFER                 FaxFreeBuffer;
    PFAXGETCONFIGURATIONW          FaxGetConfigurationW;
    PFAXGETCONFIGURATIONA          FaxGetConfigurationA;
    PFAXGETDEVICESTATUSW           FaxGetDeviceStatusW;
    PFAXGETDEVICESTATUSA           FaxGetDeviceStatusA;
    PFAXGETJOBW                    FaxGetJobW;
    PFAXGETJOBA                    FaxGetJobA;
    PFAXGETLOGGINGCATEGORIESW      FaxGetLoggingCategoriesW;
    PFAXGETLOGGINGCATEGORIESA      FaxGetLoggingCategoriesA;
    PFAXGETPAGEDATA                FaxGetPageData;
    PFAXGETPORTW                   FaxGetPortW;
    PFAXGETPORTA                   FaxGetPortA;
    PFAXGETROUTINGINFOW            FaxGetRoutingInfoW;
    PFAXGETROUTINGINFOA            FaxGetRoutingInfoA;
    PFAXINITIALIZEEVENTQUEUE       FaxInitializeEventQueue;
    PFAXOPENPORT                   FaxOpenPort;
    PFAXPRINTCOVERPAGEW            FaxPrintCoverPageW;
    PFAXPRINTCOVERPAGEA            FaxPrintCoverPageA;
    PFAXREGISTERROUTINGEXTENSIONW  FaxRegisterRoutingExtensionW;
    PFAXREGISTERSERVICEPROVIDERW   FaxRegisterServiceProviderW;
    PFAXSENDDOCUMENTW              FaxSendDocumentW;
    PFAXSENDDOCUMENTA              FaxSendDocumentA;
    PFAXSENDDOCUMENTFORBROADCASTW  FaxSendDocumentForBroadcastW;
    PFAXSENDDOCUMENTFORBROADCASTA  FaxSendDocumentForBroadcastA;
    PFAXSETCONFIGURATIONW          FaxSetConfigurationW;
    PFAXSETCONFIGURATIONA          FaxSetConfigurationA;
    PFAXSETGLOBALROUTINGINFOW      FaxSetGlobalRoutingInfoW;
    PFAXSETGLOBALROUTINGINFOA      FaxSetGlobalRoutingInfoA;
    PFAXSETJOBW                    FaxSetJobW;
    PFAXSETJOBA                    FaxSetJobA;
    PFAXSETLOGGINGCATEGORIESW      FaxSetLoggingCategoriesW;
    PFAXSETLOGGINGCATEGORIESA      FaxSetLoggingCategoriesA;
    PFAXSETPORTW                   FaxSetPortW;
    PFAXSETPORTA                   FaxSetPortA;
    PFAXSETROUTINGINFOW            FaxSetRoutingInfoW;
    PFAXSETROUTINGINFOA            FaxSetRoutingInfoA;
    PFAXSTARTPRINTJOBW             FaxStartPrintJobW;
    PFAXSTARTPRINTJOBA             FaxStartPrintJobA;
} API_INTERFACE, *PAPI_INTERFACE;

#define DLL_PATH          L"Dll_Path"
#define DLL_DESCRIPTION   L"Dll_Description"
#define DLL_LOCAL_CASES   L"Dll_Local_Cases"
#define DLL_SERVER_CASES  L"Dll_Server_Cases"

#define MAX_DWORD 4294967295
#define MAX_WORD 65535
#define MAX_INT 32767
#define MIN_INT -32768
#define LONG_STRING "alkjhfdskjhfdkjsahakldfshlkfdashlkfadjhalkfdshklfdshlkfdshlkjfd"


//define test mode
#define WHIS_TEST_MODE_SKIP 0
#define WHIS_TEST_MODE_DO 1
#define WHIS_TEST_MODE_LIMITS 2
#define WHIS_TEST_MODE_DO_W2K_FAILS 3
#define WHIS_TEST_MODE_REAL_SEND 4
#define WHIS_TEST_MODE_DONT_CATCH_EXCEPTIONS 5




// whistler further INI settings
#define DLL_WHIS_TEST_MODE L"Whis_Test_Mode"
#define GLOBAL_WHIS_PHONE_NUM_1 L"Whis_phone_num_1"
#define GLOBAL_WHIS_PHONE_NUM_2 L"Whis_phone_num_2"
#define GLOBAL_WHIS_REMOTE_SERVER_NAME L"Whis_remote_server_name"


		
// Whistler further definitons

#define WHIS_DEFAULT_PHONE_NUMBER  "2222"
#define WHIS_DEFAULT_SERVER_NAME  NULL
#define WHIS_FAX_PRINTER_NAME "Fax"

typedef VOID
(WINAPI *PFNWRITELOGFILEW)(
    LPWSTR  szFormatString,
    ...
);

typedef VOID
(WINAPI *PFNWRITELOGFILEA)(
    LPSTR  szFormatString,
    ...
);

#ifdef UNICODE

#define PFNWRITELOGFILE  PFNWRITELOGFILEW

#else

#define PFNWRITELOGFILE  PFNWRITELOGFILEA

#endif

typedef VOID
(WINAPI *PFAXAPIDLLINIT)(
    HANDLE            hHeap,
    API_INTERFACE     ApiInterface,
    PFNWRITELOGFILEW  pfnWriteLogFileW,
    PFNWRITELOGFILEA  pfnWriteLogFileA
);

typedef BOOL
(WINAPI *PFAXAPIDLLTEST)(
	LPCWSTR  szWhisPhoneNumberW,
    LPCSTR   szWhisPhoneNumberA,
    LPCWSTR  szServerNameW,
    LPCSTR   szServerNameA,
    UINT     nNumCasesLocal,
    UINT     nNumCasesServer,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	DWORD	 dwTestMode
);


#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legacywin32_xml\routeapi\apiext\apiext.c ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

  routeapi.c

Abstract:

  Window NT Fax Routing Extension.  These routing methods test the routing apis

Author:

  Steven Kehrli (steveke) 8/28/1998

--*/

#include <windows.h>
#include <stdio.h>
#include <winfax.h>
#include <faxroute.h>

#include "routeapi.h"

HANDLE                      g_hRouteHeap;                // Handle to the routing heap
PFAXROUTEADDFILE            pFaxRouteAddFile;            // API to add a file to the fax file list
PFAXROUTEDELETEFILE         pFaxRouteDeleteFile;         // API to delete a file from the fax file list
PFAXROUTEGETFILE            pFaxRouteGetFile;            // API to get a file from the fax file list
PFAXROUTEENUMFILES          pFaxRouteEnumFiles;          // API to enumerate the fax file list
PFAXROUTEMODIFYROUTINGDATA  pFaxRouteModifyRoutingData;  // API to modify the routing data for another routing method

#pragma data_seg(".INFO")

DWORD  g_dwRoutingInfo[2] = {0, 0};
BOOL   g_bEnabled[2] = {FALSE, FALSE};

#pragma data_seg()

DWORD
DllEntry(
    HINSTANCE  hInstance,
    DWORD      dwReason,
    LPVOID     pContext
)
/*++

Routine Description:

  DLL entry point

Arguments:

  hInstance - handle to the module
  dwReason - indicates the reason for being called
  pContext - context

Return Value:

  TRUE on success

--*/
{
    return TRUE;
}

BOOL WINAPI
FaxRouteInitialize(
    HANDLE                       hHeap,
    PFAX_ROUTE_CALLBACKROUTINES  pFaxRouteCallbackRoutines
)
/*++

Routine Description:

  Initializes the routing extension

Arguments:

  hHeap - handle to the heap
  pFaxRouteCallbackRoutins - pointer to fax routing callback routines

Return Value:

  TRUE on success

--*/
{
    g_hRouteHeap = hHeap;

    pFaxRouteAddFile = pFaxRouteCallbackRoutines->FaxRouteAddFile;
    pFaxRouteDeleteFile = pFaxRouteCallbackRoutines->FaxRouteDeleteFile;
    pFaxRouteGetFile = pFaxRouteCallbackRoutines->FaxRouteGetFile;
    pFaxRouteEnumFiles = pFaxRouteCallbackRoutines->FaxRouteEnumFiles;
    pFaxRouteModifyRoutingData = pFaxRouteCallbackRoutines->FaxRouteModifyRoutingData;

    return TRUE;
}

BOOL WINAPI
FaxRouteGetRoutingInfo(
    LPCWSTR  RoutingGuid,
    DWORD    dwDeviceId,
    LPBYTE   RoutingInfo,
    LPDWORD  pdwRoutingInfoSize
)
/*++

Routine Description:

  Gets the routing info for a routing method

Arguments:

  RoutingGuid - pointer to the GUID of the routing method
  dwDeviceId - port id
  RoutingInfo - pointer to the routing info
  pdwRoutingInfoSize - pointer to the size of the routing info

Return Value:

  TRUE on success

--*/
{
    DWORD  dwIndex;
    DWORD  cb;

    if (!lstrcmp(ROUTEAPI_METHOD_GUID1, RoutingGuid)) {
        dwIndex = 0;
    }
    else if (!lstrcmp(ROUTEAPI_METHOD_GUID2, RoutingGuid)) {
        dwIndex = 1;
    }
    else {
        dwIndex = -1;
    }

    if ((dwIndex == 0) || (dwIndex == 1)) {
        if (RoutingInfo == NULL) {
            *pdwRoutingInfoSize = sizeof(DWORD);
        }
        else {
            CopyMemory((LPDWORD) RoutingInfo, &g_dwRoutingInfo[dwIndex], sizeof(DWORD));
        }
    }

    return TRUE;
}

BOOL WINAPI
FaxRouteSetRoutingInfo(
    LPCWSTR     RoutingGuid,
    DWORD       dwDeviceId,
    const BYTE  *RoutingInfo,
    DWORD       dwRoutingInfoSize
)
/*++

Routine Description:

  Sets the routing info for a routing method

Arguments:

  RoutingGuid - pointer to the GUID of the routing method
  dwDeviceId - port id
  RoutingInfo - pointer to the routing info
  dwRoutingInfoSize - size of the routing info

Return Value:

  TRUE on success

--*/
{
    DWORD  dwIndex;

    if (!lstrcmp(ROUTEAPI_METHOD_GUID1, RoutingGuid)) {
        dwIndex = 0;
    }
    else if (!lstrcmp(ROUTEAPI_METHOD_GUID2, RoutingGuid)) {
        dwIndex = 1;
    }
    else {
        dwIndex = -1;
    }

    if ((dwIndex == 0) || (dwIndex == 1)) {
        if ((!RoutingInfo) || (!dwRoutingInfoSize)) {
            g_dwRoutingInfo[dwIndex] = 0;
        }
        else {
            g_dwRoutingInfo[dwIndex] = (DWORD) *(LPDWORD *) RoutingInfo;
        }
    }

    return TRUE;
}

BOOL WINAPI
FaxRouteDeviceEnable(
    LPCWSTR  RoutingGuid,
    DWORD    dwDeviceId,
    LONG     bEnable
)
/*++

Routine Description:

  Enables a routing method

Arguments:

  RoutingGuid - pointer to the GUID of the routing method
  dwDeviceId - port id
  bEnable - indicates whether the routing method is enabled or disabled

Return Value:

  TRUE on success

--*/
{
    DWORD  dwIndex=0;

    if (!lstrcmp(ROUTEAPI_METHOD_GUID1, RoutingGuid)) {
        dwIndex = 0;
    }
    else if (!lstrcmp(ROUTEAPI_METHOD_GUID2, RoutingGuid)) {
        dwIndex = 1;
    }
    else {
        dwIndex = -1;
    }

    if ((dwIndex == 0) || (dwIndex == 1)) {
        switch (bEnable) {
            case -1:
                return g_bEnabled[dwIndex];
                break;

            case 0:
                g_bEnabled[dwIndex] = FALSE;
                break;

            case 1:
                g_bEnabled[dwIndex] = TRUE;
                break;
        }
    }

    return TRUE;
}

BOOL WINAPI
FaxRouteDeviceChangeNotification(
    DWORD  dwDeviceId,
    BOOL   bNewDevice
)
/*++

Routine Description:

  Handles a device change

Arguments:

  dwDeviceId - port id
  bNewDevice - indicates whether the device is new

Return Value:

  TRUE on success

--*/
{
    return TRUE;
}

BOOL WINAPI
RouteApi1(
    PFAX_ROUTE  pFaxRoute,
    PVOID       *FailureData,
    LPDWORD     pdwFailureDataSize
)
/*++

Routine Description:

  Routing method.

Arguments:

  pFaxRoute - pointer to the fax routing structure
  FailureData - pointer to the failure data
  pdwFailureDataSize - size of the failure data

Return Value:

  TRUE on success

--*/
{
    return TRUE;
}

BOOL WINAPI
RouteApi2(
    PFAX_ROUTE  pFaxRoute,
    PVOID       *FailureData,
    LPDWORD     pdwFailureDataSize
)
/*++

Routine Description:

  Routing method.

Arguments:

  pFaxRoute - pointer to the fax routing structure
  FailureData - pointer to the failure data
  pdwFailureDataSize - size of the failure data

Return Value:

  TRUE on success

--*/
{
    return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legacywin32_xml\printapi\printapi.c ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

  printapi.c

Abstract:

  PrintApi: Fax API Test Dll: Client Print APIs
    1) FaxStartPrintJob()
    2) FaxPrintCoverPage()
    3) FaxSendDocument()
    4) FaxSendDocumentForBroadcast()

Author:

  Steven Kehrli (steveke) 8/28/1998

--*/

/*++

  Whistler Version:

  Lior Shmueli (liors) 23/11/2000

 ++*/

#include <wtypes.h>

#include "dllapi.h"

// g_hHeap is the handle to the heap
HANDLE           g_hHeap = NULL;
// g_ApiInterface is the API_INTERFACE structure
API_INTERFACE    g_ApiInterface;
// fnWriteLogFile is the pointer to the function to write a string to the log file
PFNWRITELOGFILE  fnWriteLogFile = NULL;

// whistler phone number
//LPCTSTR  g_szWhisPhoneNumber;
LPCTSTR		   g_szWhisPhoneNumber=NULL;
BOOL		   g_bRealSend=FALSE;


DWORD
DllEntry(
    HINSTANCE  hInstance,
    DWORD      dwReason,
    LPVOID     pContext
)
/*++

Routine Description:

  DLL entry point

Arguments:

  hInstance - handle to the module
  dwReason - indicates the reason for being called
  pContext - context

Return Value:

  TRUE on success

--*/
{
    return TRUE;
}

VOID WINAPI
FaxAPIDllInit(
    HANDLE            hHeap,
    API_INTERFACE     ApiInterface,
    PFNWRITELOGFILEW  pfnWriteLogFileW,
    PFNWRITELOGFILEA  pfnWriteLogFileA
)
{
    // Set g_hHeap
    g_hHeap = hHeap;
    // Set g_ApiInterface
    g_ApiInterface = ApiInterface;
#ifdef UNICODE
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileW;
#else
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileA;
#endif

    return;
}

VOID
fnFaxStartPrintJob(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxStartPrintJob()

Return Value:

  None

--*/
{
    // FaxPrintInfo is the fax print info
    FAX_PRINT_INFO    FaxPrintInfo;
    // dwFaxId is the fax job id
    DWORD             dwFaxId;
    // FaxContextInfo is the fax context
    FAX_CONTEXT_INFO  FaxContextInfo;
    
	// not used, since all suite can be used on a remote printer...
	// szRemotePrinter is the name of the remote fax printer
    // LPTSTR            szRemotePrinter;
	//

	// flag for fax abortion
	BOOL				bAborted=FALSE;
	// szFaxPrinterName is the name of the fax printer
    LPTSTR            szFaxPrinterName=NULL;
	// szFaxServerName is the name of the fax server, as it should be on the FaxConextInfo struct
    TCHAR            szFaxServerName[MAX_PATH];

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxStartPrintJob().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxStartPrintJob\">"));

    ZeroMemory(&FaxPrintInfo, sizeof(FAX_PRINT_INFO));
    FaxPrintInfo.SizeOfStruct = sizeof(FAX_PRINT_INFO);
    FaxPrintInfo.RecipientNumber = g_szWhisPhoneNumber;

	fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);
	
	if (szServerName) {

        szFaxPrinterName = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(szServerName) + 7) * sizeof(TCHAR));
          lstrcpy(szFaxPrinterName, TEXT("\\\\"));
          lstrcat(szFaxPrinterName, szServerName);
		  lstrcpy(szFaxServerName,szFaxPrinterName);
		  lstrcat(szFaxPrinterName, TEXT("\\"));
          lstrcat(szFaxPrinterName, TEXT(WHIS_FAX_PRINTER_NAME));
	}
	  else {
		  szFaxPrinterName = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(szServerName) + 7) * sizeof(TCHAR));
		  lstrcpy(szFaxPrinterName, TEXT(WHIS_FAX_PRINTER_NAME));
		  lstrcpy(szFaxServerName,TEXT("Should be NULL"));

	  }

	  fnWriteLogFile(TEXT("WHIS> Fax Printer name is: %s\r\n"), szFaxPrinterName);

      ZeroMemory(&FaxContextInfo, sizeof(FAX_CONTEXT_INFO));
      FaxContextInfo.SizeOfStruct = sizeof(FAX_CONTEXT_INFO);

    // Start a fax
      (*pnNumCasesAttempted)++;
	  dwFuncCasesAtt++;
      fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	  fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

      if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
          fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxStartPrintJob() failed.  The error code is 0x%08x.  This is an error.  FaxStartPrintJob() should succeed.</result>\r\n"), GetLastError());
	  }
      else {
          if (FaxContextInfo.hDC == NULL) {
              fnWriteLogFile(TEXT("\n\t<result value=\"0\">hDC is NULL.  This is an error.  hDC should not be NULL.</result>\r\n"));
			}

          else if ((szServerName && lstrcmp(FaxContextInfo.ServerName,szFaxServerName) !=0) || (!szServerName && FaxContextInfo.ServerName[0])) {
				  fnWriteLogFile(TEXT("\n\t<result value=\"0\">ServerName: Received: %s, Expected: %s.</result>\r\n"), FaxContextInfo.ServerName, szFaxServerName);
			}
		  else	  {
				  (*pnNumCasesPassed)++;
	  			  dwFuncCasesPass++;
		          fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		  }

		  AbortDoc(FaxContextInfo.hDC);
	  	  DeleteDC(FaxContextInfo.hDC);
	  	  
		}
	  fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

      (*pnNumCasesAttempted)++;
	  dwFuncCasesAtt++;
      fnWriteLogFile(TEXT("Invalid szFaxPrinterName.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	  fnWriteLogFile(TEXT("\n\t<case name=\"Invalid szFaxPrinterName\" id=\"%d\">"), *pnNumCasesAttempted);

      if (g_ApiInterface.FaxStartPrintJob(TEXT("InvalidFaxPrinterName"), &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
          fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxStartPrintJob() returned TRUE.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PRINTER_NAME (0x%08x).</result>\r\n"), ERROR_INVALID_PRINTER_NAME);
           //End this fax
          AbortDoc(FaxContextInfo.hDC);
          DeleteDC(FaxContextInfo.hDC);
      }
      else if (GetLastError() != ERROR_INVALID_PRINTER_NAME) {
          fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PRINTER_NAME (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PRINTER_NAME);
      }
      else {
          (*pnNumCasesPassed)++;
		  dwFuncCasesPass++;
		  fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
      }
	  fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	  (*pnNumCasesAttempted)++;
	  dwFuncCasesAtt++;
      fnWriteLogFile(TEXT("pFaxPrintInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	  fnWriteLogFile(TEXT("\n\t<case name=\"pFaxPrintInfo = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

      if (g_ApiInterface.FaxStartPrintJob(TEXT("Fax"), NULL, &dwFaxId, &FaxContextInfo)) {
          fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxStartPrintJob() returned TRUE.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
           //End this fax
          AbortDoc(FaxContextInfo.hDC);
          DeleteDC(FaxContextInfo.hDC);
      }
      else if (GetLastError() != ERROR_INVALID_PARAMETER) {
          fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
      }
      else {
          (*pnNumCasesPassed)++;
		  dwFuncCasesPass++;
		  fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
      }
	  fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

      (*pnNumCasesAttempted)++;
	  dwFuncCasesAtt++;
      fnWriteLogFile(TEXT("dwFaxId = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	  fnWriteLogFile(TEXT("\n\t<case name=\"dwFaxId = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

      if (g_ApiInterface.FaxStartPrintJob(TEXT("Fax"), &FaxPrintInfo, NULL, &FaxContextInfo)) {
          fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxStartPrintJob() returned TRUE.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
           //End this fax
          AbortDoc(FaxContextInfo.hDC);
          DeleteDC(FaxContextInfo.hDC);
      }
      else if (GetLastError() != ERROR_INVALID_PARAMETER) {
          fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
      }
      else {
          (*pnNumCasesPassed)++;
		  dwFuncCasesPass++;
		  fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
      }
	  fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

      (*pnNumCasesAttempted)++;
	  dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxContextInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxContextInfo = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxStartPrintJob(TEXT("Fax"), &FaxPrintInfo, &dwFaxId, NULL)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxStartPrintJob() returned TRUE.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        // End this fax
        AbortDoc(FaxContextInfo.hDC);
        DeleteDC(FaxContextInfo.hDC);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    FaxPrintInfo.SizeOfStruct = 0;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxPrintInfo->SizeOfStruct = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxPrintInfo->SizeOfStruct = 0\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxStartPrintJob(TEXT("Fax"), &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxStartPrintJob() returned TRUE.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        // End this fax
        AbortDoc(FaxContextInfo.hDC);
        DeleteDC(FaxContextInfo.hDC);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
    FaxPrintInfo.SizeOfStruct = sizeof(FAX_PRINT_INFO);

    FaxPrintInfo.RecipientNumber = NULL;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxPrintInfo->RecipientNumber = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxPrintInfo->RecipientNumber = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxStartPrintJob(TEXT("Fax"), &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxStartPrintJob() returned TRUE.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        // End this fax
        AbortDoc(FaxContextInfo.hDC);
        DeleteDC(FaxContextInfo.hDC);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
    FaxPrintInfo.RecipientNumber = g_szWhisPhoneNumber;

	fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);

    
	#ifdef FAXAPI_W2K
		FaxPrintInfo.DrProfileName = TEXT("PrintApi");
		FaxPrintInfo.DrEmailAddress = TEXT("PrintApi");
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;
    
		fnWriteLogFile(TEXT("pFaxPrintInfo->DrEmailAddress.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"pFaxPrintInfo->DrEmailAddress\" id=\"%d\">"), *pnNumCasesAttempted);

		if (g_ApiInterface.FaxStartPrintJob(TEXT("Fax"), &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxStartPrintJob() returned TRUE.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
			// End this fax
			AbortDoc(FaxContextInfo.hDC);
			DeleteDC(FaxContextInfo.hDC);
		}
		else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		}
		else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		}
		fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
		FaxPrintInfo.DrProfileName = NULL;
		FaxPrintInfo.DrEmailAddress = NULL;
	#else
		fnWriteLogFile(TEXT("WHIS> Skipped case in whistler publics: pFaxPrintInfo->DrProfileName and pFaxPrintInfo->DrEmailAddress.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	#endif
	
	HeapFree(g_hHeap, 0, szFaxPrinterName);

    //if (szServerName) {
	//	fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
    //  szRemotePrinter = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(szServerName) + 7) * sizeof(TCHAR));
    //    lstrcpy(szRemotePrinter, TEXT("\\\\"));
    //    lstrcat(szRemotePrinter, szServerName);
	//	lstrcat(szRemotePrinter, TEXT("\\"));
    //   lstrcat(szRemotePrinter, TEXT(WHIS_FAX_PRINTER_NAME));

    //   (*pnNumCasesAttempted)++;
    //   fnWriteLogFile(TEXT("Remote Fax Printer. (Printer Name: %s) Test Case: %d.\r\n"),szRemotePrinter, *pnNumCasesAttempted);
    //   if (!g_ApiInterface.FaxStartPrintJob(szRemotePrinter, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    //      fnWriteLogFile(TEXT("FaxStartPrintJob() failed.  The error code is 0x%08x.  This is an error.  FaxStartPrintJob() should succeed.\r\n"), GetLastError());
    //    }
    //    else {
	//		 AbortDoc(FaxContextInfo.hDC);
	//			 DeleteDC(FaxContextInfo.hDC);
	//		 (*pnNumCasesPassed)++;

    //    }
	//
    //    
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxStartPrintJob, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}

VOID
fnFaxPrintCoverPage(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	BOOL	 bTestLimits
)
/*++

Routine Description:

  FaxPrintCoverPage()

Return Value:

  None

--*/
{
    // FaxPrintInfo is the fax print info
    FAX_PRINT_INFO      FaxPrintInfo;
    // dwFaxId is the fax job id
    DWORD               dwFaxId;
    // FaxContextInfo is the fax context
    FAX_CONTEXT_INFO    FaxContextInfo;
    // CoverPageInfo is the cover page info
    FAX_COVERPAGE_INFO  CoverPageInfo;
    // FaxContextInfohDC is the hDC from the fax context
    HDC                 FaxContextInfohDC;
    // szCoverPageName is the cover page name
    TCHAR               szCoverPageName[MAX_PATH];

	// szFaxPrinterName is the name of the fax printer
    LPTSTR            szFaxPrinterName=NULL;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

    fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxPrintCoverPage().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxPrintCoverPage\">"));

	

    ZeroMemory(&FaxPrintInfo, sizeof(FAX_PRINT_INFO));
    FaxPrintInfo.SizeOfStruct = sizeof(FAX_PRINT_INFO);


	fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);
	FaxPrintInfo.RecipientNumber = g_szWhisPhoneNumber;
	
    ZeroMemory(&FaxContextInfo, sizeof(FAX_CONTEXT_INFO));
    FaxContextInfo.SizeOfStruct = sizeof(FAX_CONTEXT_INFO);

    ZeroMemory(&CoverPageInfo, sizeof(FAX_COVERPAGE_INFO));
    CoverPageInfo.SizeOfStruct = sizeof(FAX_COVERPAGE_INFO);


    if (szServerName) {
	    szFaxPrinterName = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(szServerName) + 7) * sizeof(TCHAR));
        lstrcpy(szFaxPrinterName, TEXT("\\\\"));
        lstrcat(szFaxPrinterName, szServerName);
		lstrcat(szFaxPrinterName, TEXT("\\"));
        lstrcat(szFaxPrinterName, TEXT(WHIS_FAX_PRINTER_NAME));
	}
	else {
		szFaxPrinterName = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(szServerName) + 7) * sizeof(TCHAR));
		lstrcpy(szFaxPrinterName, TEXT(WHIS_FAX_PRINTER_NAME));
	}

	fnWriteLogFile(TEXT("WHIS> Fax Printer name is: %s\r\n"), szFaxPrinterName);


    // Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

   CoverPageInfo.UseServerCoverPage = TRUE;

    CoverPageInfo.CoverPageName = TEXT("confdent.cov");
	CoverPageInfo.Subject = TEXT("1/10_FPCP:SRV-confdent.cov");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Server .cov). File: confdent.cov  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (Server .cov). File: confdent.cov\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    
	
	// Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    CoverPageInfo.CoverPageName = TEXT("coverpg.lnk");
	CoverPageInfo.Subject = TEXT("2/10_FPCP:SRV-coverpg.lnk");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Server .lnk). File: coverpg.lnk  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (Server .lnk). File: coverpg.lnk\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    

    // Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	
	CoverPageInfo.CoverPageName = TEXT("confdent");
	CoverPageInfo.Subject = TEXT("3/10_FPCP:SRV-confdent");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Server .cov). File: confdent  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (Server .cov). File: confdent\" id=\"%d\">"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    
	// Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    CoverPageInfo.CoverPageName = TEXT("coverpg");
	CoverPageInfo.Subject = TEXT("4/10_FPCP:SRV-coverpg");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Server .lnk). File: coverpg  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (Server .lnk). File: coverpg\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    
	// Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    CoverPageInfo.UseServerCoverPage = FALSE;

    CoverPageInfo.CoverPageName = TEXT("confdent.cov");
	CoverPageInfo.Subject = TEXT("5/10_FPCP:LOC-confdent.cov");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Client .cov). File: confdent.cov  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (Client .cov). File: confdent.cov\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    

    // Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	
	CoverPageInfo.CoverPageName = TEXT("coverpg.lnk");
	CoverPageInfo.Subject = TEXT("6/10_FPCP:LOC-coverpg.lnk");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Client .lnk). File: coverpg.lnk  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (Client .lnk). File: coverpg.lnk\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    

    
	// Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	
	CoverPageInfo.CoverPageName = TEXT("confdent");
	CoverPageInfo.Subject = TEXT("7/10_FPCP:LOC-confdent");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Client .cov). File: confdent  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (Client .cov). File: confdent\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    

    // Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	
	CoverPageInfo.CoverPageName = TEXT("coverpg");
	CoverPageInfo.Subject = TEXT("8/10_FPCP:LOC-coverpg");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Client .lnk). File: coverpg  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (Client .lnk). File: coverpg\" id=\"%d\">"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    

    
	// Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	
	GetFullPathName(TEXT("confdent.cov"), sizeof(szCoverPageName) / sizeof(TCHAR), szCoverPageName, NULL);
    CoverPageInfo.CoverPageName = szCoverPageName;
	CoverPageInfo.Subject = TEXT("9/10_FPCP:FullPath(confdent.cov)");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Client / Full Path .cov). Path: %s Test Case: %d.\r\n"),szCoverPageName, *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (Client / Full Path .cov). Path: %s\" id=\"%d\">"),szCoverPageName, *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    

    // Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	
	GetFullPathName(TEXT("coverpg.lnk"), sizeof(szCoverPageName) / sizeof(TCHAR), szCoverPageName, NULL);
    CoverPageInfo.CoverPageName = szCoverPageName;
	CoverPageInfo.Subject = TEXT("10/10_FPCP:FullPath(coverpg.lnk)");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Client / Full Path .lnk). Path %s Test Case: %d.\r\n"), szCoverPageName,*pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (Client / Full Path .lnk). Path %s\" id=\"%d\">"), szCoverPageName,*pnNumCasesAttempted);

    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxContextInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxContextInfo = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxPrintCoverPage(NULL, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() returned TRUE.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pCoverPageInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pCoverPageInfo = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, NULL)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() returned TRUE.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    FaxContextInfo.SizeOfStruct = 0;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxContextInfo->SizeOfStruct = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxContextInfo->SizeOfStruct = 0\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() returned TRUE.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    FaxContextInfo.SizeOfStruct = sizeof(FAX_CONTEXT_INFO);

    FaxContextInfohDC = FaxContextInfo.hDC;
    FaxContextInfo.hDC = NULL;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxContextInfo->hDC = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxContextInfo->hDC = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() returned TRUE.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
    FaxContextInfo.hDC = FaxContextInfohDC;

    CoverPageInfo.SizeOfStruct = 0;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pCoverPageInfo->SizeOfStruct = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pCoverPageInfo->SizeOfStruct = 0\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() returned TRUE.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
    CoverPageInfo.SizeOfStruct = sizeof(FAX_COVERPAGE_INFO);

    CoverPageInfo.CoverPageName = NULL;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pCoverPageInfo->CoverPageName = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pCoverPageInfo->CoverPageName = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() returned TRUE.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));



    CoverPageInfo.CoverPageName = TEXT("InvalidCoverPageName");
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Invalid pCoverPageInfo->CoverPageName.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid pCoverPageInfo->CoverPageName\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() returned TRUE.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_FILE_NOT_FOUND (0x%08x).</result>\r\n"), ERROR_FILE_NOT_FOUND);
    }
    else if (GetLastError() != ERROR_FILE_NOT_FOUND) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_FILE_NOT_FOUND (0x%08x).</result>\r\n"), GetLastError(), ERROR_FILE_NOT_FOUND);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));


    // End this fax
	AbortDoc(FaxContextInfo.hDC);
	DeleteDC(FaxContextInfo.hDC);
	HeapFree(g_hHeap, 0, szFaxPrinterName);
	
fnWriteLogFile(TEXT("$$$ Summery for FaxPrintCoverPage, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}

VOID
fnFaxSendDocument(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxSendDocument()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE              hFaxSvcHandle;
    // pFaxConfig is a pointer to the fax configuration
    PFAX_CONFIGURATION  pFaxConfig;
    // FaxJobParam is the fax job params
    FAX_JOB_PARAM       FaxJobParam;
    // CoverPageInfo is the cover page info
    FAX_COVERPAGE_INFO  CoverPageInfo;
    // dwFaxId is the fax job id
    DWORD               dwFaxId;
    // szCoverPageName is the cover page name
    TCHAR               szCoverPageName[MAX_PATH];

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxSendDocument().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxSendDocument\">"));

    ZeroMemory(&FaxJobParam, sizeof(FAX_JOB_PARAM));
    FaxJobParam.SizeOfStruct = sizeof(FAX_JOB_PARAM);
    FaxJobParam.RecipientNumber = g_szWhisPhoneNumber;

	fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);

    ZeroMemory(&CoverPageInfo, sizeof(FAX_COVERPAGE_INFO));
    CoverPageInfo.SizeOfStruct = sizeof(FAX_COVERPAGE_INFO);

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not GET configuration, The error code is 0x%08x.\r\n"), GetLastError());
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    pFaxConfig->PauseServerQueue = TRUE;

    if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not SET configuration, The error code is 0x%08x.\r\n"), GetLastError());
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (kodak.tif).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (kodak.tif)\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("kodak.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
		(*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (fax.tif).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (fax.tif)\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (.txt).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (.txt)\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("printapi.txt"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (.doc).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (.doc)\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("printapi.doc"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (.xls).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (.xls)\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("printapi.xls"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (.ppt).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (.ppt)\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("printapi.ppt"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));


    CoverPageInfo.UseServerCoverPage = TRUE;

    CoverPageInfo.CoverPageName = TEXT("confdent.cov");
	CoverPageInfo.Subject = TEXT("1/10_FSD:SRV-confdent.cov");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Server .cov). File: confdent.cov  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case with Cover Page (Server .cov). File: confdent.cov\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    CoverPageInfo.CoverPageName = TEXT("coverpg.lnk");
	CoverPageInfo.Subject = TEXT("2/10_FSD:SRV-coverpg.lnk");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Server .lnk). File coverpg.lnk  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case with Cover Page (Server .lnk). File coverpg.lnk\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    CoverPageInfo.CoverPageName = TEXT("confdent");
	CoverPageInfo.Subject = TEXT("3/10_FSD:SRV-confdent");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Server .cov). File: confdent  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case with Cover Page (Server .cov). File: confdent\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    CoverPageInfo.CoverPageName = TEXT("coverpg");
	CoverPageInfo.Subject = TEXT("4/10_FSD:SRV-coverpg");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Server .lnk). File: coverpg  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case with Cover Page (Server .lnk). File: coverpg\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    CoverPageInfo.UseServerCoverPage = FALSE;

    CoverPageInfo.CoverPageName = TEXT("confdent.cov");
	CoverPageInfo.Subject = TEXT("5/10_FSD:LOC-confdent.cov");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Client .cov). File: confdent.cov  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case with Cover Page (Client .cov). File: confdent.cov\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    CoverPageInfo.CoverPageName = TEXT("coverpg.lnk");
	CoverPageInfo.Subject = TEXT("6/10_FSD:LOC-coverpg.lnk");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Client .lnk). File: coverpg.lnk  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case with Cover Page (Client .lnk). File: coverpg.lnk\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    CoverPageInfo.CoverPageName = TEXT("confdent");
	CoverPageInfo.Subject = TEXT("7/10_FSD:LOC-confdent");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Client .cov). File: confdent  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case with Cover Page (Client .cov). File: confdent\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    CoverPageInfo.CoverPageName = TEXT("coverpg");
	CoverPageInfo.Subject = TEXT("8/10_FSD:LOC-coverpg");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Client .lnk). File: coverpg  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case with Cover Page (Client .lnk). File: coverpg\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    GetFullPathName(TEXT("confdent.cov"), sizeof(szCoverPageName) / sizeof(TCHAR), szCoverPageName, NULL);


    CoverPageInfo.CoverPageName = szCoverPageName;
	CoverPageInfo.Subject = TEXT("9/10_FSD:FullPath(confdent.cov)");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Client / Full Path .cov). Path: %s Test Case: %d.\r\n"),szCoverPageName, *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case with Cover Page (Client / Full Path .cov). Path: %s\" id=\"%d\">"),szCoverPageName, *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    GetFullPathName(TEXT("coverpg.lnk"), sizeof(szCoverPageName) / sizeof(TCHAR), szCoverPageName, NULL);
    CoverPageInfo.CoverPageName = szCoverPageName;
	CoverPageInfo.Subject = TEXT("10/10_FSD:FullPath(confdent.lnk)");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Client / Full Path .lnk).  Path: %s Test Case: %d.\r\n"), szCoverPageName, *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case with Cover Page (Client / Full Path .lnk).  Path: %s\" id=\"%d\">"), szCoverPageName, *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSendDocument(NULL, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("szDocument = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"szDocument = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, NULL, &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxJobParam = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxJobParam = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), NULL, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Invalid document.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid document\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("InvalidDocumentName"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_FILE_NOT_FOUND (0x%08x).</result>\r\n"), ERROR_FILE_NOT_FOUND);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_FILE_NOT_FOUND) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_FILE_NOT_FOUND (0x%08x).\r\n"), GetLastError(), ERROR_FILE_NOT_FOUND);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Invalid document type (.bad).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid document type (.bad)\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("printapi.bad"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).</result>\r\n"), ERROR_INVALID_DATA);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_DATA) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_DATA);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    FaxJobParam.SizeOfStruct = 0;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxJobParam->SizeOfStruct = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxJobParam->SizeOfStruct = 0\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
    FaxJobParam.SizeOfStruct = sizeof(FAX_JOB_PARAM);

    FaxJobParam.RecipientNumber = NULL;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxJobParam->RecipientNumber = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxJobParam->RecipientNumber = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
    FaxJobParam.RecipientNumber = g_szWhisPhoneNumber;

	fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);

    FaxJobParam.ScheduleAction = -1;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxJobParam->ScheduleAction = -1.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxJobParam->ScheduleAction = -1\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
    FaxJobParam.ScheduleAction = 0;

    FaxJobParam.DeliveryReportType = -1;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxJobParam->DeliveryReportType = -1.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxJobParam->DeliveryReportType = -1\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
    FaxJobParam.DeliveryReportType = DRT_NONE;

    CoverPageInfo.SizeOfStruct = 0;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pCoverPageInfo->SizeOfStruct = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pCoverPageInfo->SizeOfStruct = 0\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).</result>\r\n"), ERROR_INVALID_DATA);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_DATA) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_DATA);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
    CoverPageInfo.SizeOfStruct = sizeof(FAX_COVERPAGE_INFO);

    CoverPageInfo.CoverPageName = NULL;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pCoverPageInfo->CoverPageName = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pCoverPageInfo->CoverPageName = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_FILE_NOT_FOUND (0x%08x).</result>\r\n"), ERROR_FILE_NOT_FOUND);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_FILE_NOT_FOUND) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_FILE_NOT_FOUND (0x%08x).</result>\r\n"), GetLastError(), ERROR_FILE_NOT_FOUND);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    CoverPageInfo.CoverPageName = TEXT("InvalidCoverPageName");
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Invalid pCoverPageInfo->CoverPageName.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid pCoverPageInfo->CoverPageName\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_FILE_NOT_FOUND (0x%08x).</result>\r\n"), ERROR_FILE_NOT_FOUND);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_FILE_NOT_FOUND) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_FILE_NOT_FOUND (0x%08x).</result>\r\n"), GetLastError(), ERROR_FILE_NOT_FOUND);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    pFaxConfig->PauseServerQueue = FALSE;
    g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
    g_ApiInterface.FaxFreeBuffer(pFaxConfig);

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid hFaxSvcHandle\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    	fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
	}
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

//    not used, design changed so all suite will run in remote mode
//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
//        if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
//   		   fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
//           return;
 //      }
//		else
//		{
//			fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
//		}
//
  //      if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
	//		fnWriteLogFile(TEXT("WHIS> ERROR: Can not GET configuration, The error code is 0x%08x.\r\n"), GetLastError());
      //      // Disconnect from the fax server
        //    g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //pFaxConfig->PauseServerQueue = TRUE;

        //if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
		//	fnWriteLogFile(TEXT("WHIS> ERROR: Can not SET configuration, The error code is 0x%08x.\r\n"), GetLastError());
        //    g_ApiInterface.FaxFreeBuffer(pFaxConfig);
            // Disconnect from the fax server
        //    g_ApiInterface.FaxClose(hFaxSvcHandle);
        //    return;
        //}

        //(*pnNumCasesAttempted)++;
        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("kodak.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        //    fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
        //}
        //else {
		//	if (!g_bRealSend)	{
		//					g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		//	}
        //    (*pnNumCasesPassed)++;
        //}

        //pFaxConfig->PauseServerQueue = FALSE;
        //g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        //g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxSendDocument, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}

BOOL CALLBACK
fnBroadcastCallback(
    HANDLE               hFaxSvcHandle,
    DWORD                dwRecipientNumber,
    LPVOID               lpContext,
    PFAX_JOB_PARAM       pFaxJobParam,
    PFAX_COVERPAGE_INFO  pCoverPageInfo
)
/*++

Routine Description:

  FaxSendDocumentForBroadcast() callback

Return Value:

  TRUE to enumerate another recipient

--*/
{
    BOOL     bRet;
    LPDWORD  pdwIndex;

    pdwIndex = (LPDWORD) lpContext;

    if (*pdwIndex != (dwRecipientNumber - 1)) {
        return FALSE;
    }

    switch (*pdwIndex) {
        case 0:
            pFaxJobParam->RecipientNumber = g_szWhisPhoneNumber;

			fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);

            pCoverPageInfo->UseServerCoverPage = TRUE;
            pCoverPageInfo->CoverPageName = TEXT("confdent.cov");
            bRet = TRUE;
            break;

        case 1:
            pFaxJobParam->RecipientNumber = g_szWhisPhoneNumber;

			fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);

            pCoverPageInfo->UseServerCoverPage = TRUE;
            pCoverPageInfo->CoverPageName = TEXT("confdent.cov");
            bRet = TRUE;
            break;

        default:
            bRet = FALSE;
            break;
    }

    (*pdwIndex)++;
    return bRet;
}

VOID
fnFaxSendDocumentForBroadcast(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxSendDocumentForBroadcast()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE              hFaxSvcHandle;
    // pFaxConfig is a pointer to the fax configuration
    PFAX_CONFIGURATION  pFaxConfig;
    // dwFaxId is the fax job id
    DWORD               dwFaxId;

    DWORD               dwIndex;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxSendDocumentForBroadcast().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxSendDocumentForBroadcast\">"));



    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not GET configuration, The error code is 0x%08x.\r\n"), GetLastError());
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    pFaxConfig->PauseServerQueue = TRUE;

    if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not SET configuration, The error code is 0x%08x.\r\n"), GetLastError());
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }


    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    dwIndex = 0;
    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocumentForBroadcast(hFaxSvcHandle, TEXT("fax.tif"), &dwFaxId, fnBroadcastCallback, &dwIndex)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocumentForBroadcast() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocumentForBroadcast() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (dwIndex != 3) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocumentForBroadcast() failed.  fnBroadcastCallback() was only called %d times.  This is an error.  fnBroadcastCallback() should have been called 3 times.</result>\r\n"), dwIndex);
        }
        else if (g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxAbort() of owner job returned TRUE.  This is an error.  FaxAbort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        }
        else if (GetLastError() != ERROR_INVALID_PARAMETER) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxAbort() of owner job should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
        }
        else {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
        }	
		
		if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 2));
							g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 1));
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
	}
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSendDocumentForBroadcast(NULL, TEXT("fax.tif"), &dwFaxId, fnBroadcastCallback, &dwIndex)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocumentForBroadcast() returned TRUE.  This is an error.  FaxSendDocumentForBroadcast() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 2));
        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 1));
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSendDocumentForBroadcast() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));

    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("szDocument = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"szDocument = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSendDocumentForBroadcast(hFaxSvcHandle, NULL, &dwFaxId, fnBroadcastCallback, &dwIndex)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocumentForBroadcast() returned TRUE.  This is an error.  FaxSendDocumentForBroadcast() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 2));
        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 1));
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSendDocumentForBroadcast() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("fnBroadcastCallback = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"fnBroadcastCallback = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSendDocumentForBroadcast(hFaxSvcHandle, TEXT("fax.tif"), &dwFaxId, NULL, &dwIndex)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocumentForBroadcast() returned TRUE.  This is an error.  FaxSendDocumentForBroadcast() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 2));
        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 1));
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSendDocumentForBroadcast() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    pFaxConfig->PauseServerQueue = FALSE;
    g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
    g_ApiInterface.FaxFreeBuffer(pFaxConfig);

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid hFaxSvcHandle\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSendDocumentForBroadcast(hFaxSvcHandle, TEXT("fax.tif"), &dwFaxId, fnBroadcastCallback, &dwIndex)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocumentForBroadcast() returned TRUE.  This is an error.  FaxSendDocumentForBroadcast() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 2));
        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 1));
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSendDocumentForBroadcast() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    //if (szServerName) {
	//	fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
    //    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
    //    }

    //    if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
            // Disconnect from the fax server
    //        g_ApiInterface.FaxClose(hFaxSvcHandle);
    //        return;
    //    }

     //   pFaxConfig->PauseServerQueue = TRUE;

        //if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
          //  g_ApiInterface.FaxFreeBuffer(pFaxConfig);
            // Disconnect from the fax server
            //g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //(*pnNumCasesAttempted)++;
        //dwIndex = 0;
        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxSendDocumentForBroadcast(hFaxSvcHandle, TEXT("fax.tif"), &dwFaxId, fnBroadcastCallback, &dwIndex)) {
            //fnWriteLogFile(TEXT("FaxSendDocumentForBroadcast() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocumentForBroadcast() should succeed.\r\n"), GetLastError());
        //}
        //else {
            //(*pnNumCasesPassed)++;

//			if (!g_bRealSend)	{
//		            g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 2));
//			        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 1));
//					g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
//			}
        //}

//        pFaxConfig->PauseServerQueue = FALSE;
        //g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        //g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
//        g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}

fnWriteLogFile(TEXT("$$$ Summery for FaxSendDocumentForBroadcast, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}



BOOL WINAPI
FaxAPIDllTest(
	LPCWSTR  szWhisPhoneNumberW,
	LPCSTR   szWhisPhoneNumberA,
    LPCWSTR  szServerNameW,
    LPCSTR   szServerNameA,
    UINT     nNumCasesLocal,
    UINT     nNumCasesServer,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	DWORD	 dwTestMode
)
{
    LPCTSTR  szServerName;
    UINT     nNumCases;


	// for Whis-extended only
#ifdef UNICODE
    if (lstrlen(szWhisPhoneNumberW)>0) { 
		g_szWhisPhoneNumber = szWhisPhoneNumberW; 
	}
	else {
		g_szWhisPhoneNumber=TEXT(WHIS_DEFAULT_PHONE_NUMBER);
	}
#else
	if (lstrlen(szWhisPhoneNumberA)>0) {
		g_szWhisPhoneNumber = szWhisPhoneNumberA;
	}
	else {
		g_szWhisPhoneNumber=TEXT(WHIS_DEFAULT_PHONE_NUMBER);
	}
		
#endif

#ifdef UNICODE
    szServerName = szServerNameW;
#else
    szServerName = szServerNameA;
#endif

    if (szServerName) {
        nNumCases = nNumCasesServer;
		fnWriteLogFile(TEXT("WHIS> REMOTE SERVER MODE:\r\n"));
    }
    else {
        nNumCases = nNumCasesLocal;
    }

	if (dwTestMode==WHIS_TEST_MODE_REAL_SEND) g_bRealSend=TRUE;


    // FaxStartPrintJob()
    fnFaxStartPrintJob(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    // FaxPrintCoverPage()
    fnFaxPrintCoverPage(szServerName, pnNumCasesAttempted, pnNumCasesPassed,TRUE);

    // FaxSendDocument()
    fnFaxSendDocument(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    // FaxSendDocumentForBroadcast()
    fnFaxSendDocumentForBroadcast(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    if ((*pnNumCasesAttempted == nNumCases) && (*pnNumCasesPassed == *pnNumCasesAttempted)) {
        return TRUE;
    }
    else {
        return FALSE;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legacywin32_xml\routeapi\routeapi.c ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

  routeapi.c

Abstract:

  RouteApi: Fax API Test Dll: Client Routing APIs
    1) FaxRegisterServiceProvider()
    2) FaxRegisterRoutingExtension()
    3) FaxEnumGlobalRoutingInfo()
    4) FaxSetGlobalRoutingInfo()
    5) FaxEnumRoutingMethods()
    6) FaxEnableRoutingMethod()
    7) FaxGetRoutingInfo()
    8) FaxSetRoutingInfo()

Author:

  Steven Kehrli (steveke) 8/28/1998

--*/

/*++

  Whistler Version:

  Lior Shmueli (liors) 23/11/2000

 ++*/

#include <wtypes.h>
#include <tchar.h>

#include "dllapi.h"
#include "routeapi.h"



// g_hHeap is the handle to the heap
HANDLE           g_hHeap = NULL;
// g_ApiInterface is the API_INTERFACE structure
API_INTERFACE    g_ApiInterface;
// fnWriteLogFile is the pointer to the function to write a string to the log file
PFNWRITELOGFILE  fnWriteLogFile = NULL;

// number of global routing methods
DWORD	 g_dwNumMethods=0;
DWORD	 g_dwIndexAPIMethod1=0;
DWORD	 g_dwIndexAPIMethod2=0;

#define FAX_DEVICEPROVIDERS_REGKEY        TEXT("Software\\Microsoft\\Fax\\Device Providers")
#define FAX_ROUTINGEXTENSIONS_REGKEY      TEXT("Software\\Microsoft\\Fax\\Routing Extensions")
#define FAX_ROUTINGMETHODS_REGKEY         TEXT("Routing Methods")
#define FAX_SERVICE                       TEXT("Fax")

#define ROUTEAPI_PROVIDER_W               L"RouteApi Modem Device Provider"
#define ROUTEAPI_PROVIDER                 TEXT("RouteApi Modem Device Provider")
#define ROUTEAPI_PROVIDER_FRIENDLYNAME_W  L"RouteApi Modem Device Provider Friendly Name"
#define ROUTEAPI_PROVIDER_FRIENDLYNAME    TEXT("RouteApi Modem Device Provider Friendly Name")
#define ROUTEAPI_PROVIDER_IMAGENAME_W     L"%SystemRoot%\\system32\\faxt30.dll"
#define ROUTEAPI_PROVIDER_IMAGENAME       TEXT("%SystemRoot%\\system32\\faxt30.dll")
#define ROUTEAPI_PROVIDER_PROVIDERNAME_W  L"Windows Telephony Service Provider for Universal Modem Driver"
#define ROUTEAPI_PROVIDER_PROVIDERNAME    TEXT("Windows Telephony Service Provider for Universal Modem Driver")

#define ROUTEAPI_INVALID_GUID             TEXT("{00000000-0000-0000-0000-000000000000}")

DWORD
DllEntry(
    HINSTANCE  hInstance,
    DWORD      dwReason,
    LPVOID     pContext
)
/*++

Routine Description:

  DLL entry point

Arguments:

  hInstance - handle to the module
  dwReason - indicates the reason for being called
  pContext - context

Return Value:

  TRUE on success

--*/
{
    return TRUE;
}

VOID WINAPI
FaxAPIDllInit(
    HANDLE            hHeap,
    API_INTERFACE     ApiInterface,
    PFNWRITELOGFILEW  pfnWriteLogFileW,
    PFNWRITELOGFILEA  pfnWriteLogFileA
)
/*++

Routine Description:

  Initialize Fax API Dll Test

Arguments:

  hHeap - handle to the heap
  ApiInterface - API_INTERFACE structure
  pfnWriteLogFile - pointer to function to write a string to the log file

Return Value:

  None

--*/
{
    // Set g_hHeap
    g_hHeap = hHeap;
    // Set g_ApiInterface
    g_ApiInterface = ApiInterface;
#ifdef UNICODE
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileW;
#else
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileA;
#endif

    return;
}

BOOL
fnRegQuerySz(
    HKEY    hKey,
    LPTSTR  szValue,
    LPTSTR  *pszData
)
/*++

Routine Description:

  Queries a Registry data as a REG_SZ

Arguments:

  hKey - handle to the Registry key
  szValue - value to be queried
  pszData - pointer to the data to be queried

Return Value:

  TRUE on success

--*/
{
    DWORD  cb;

    cb = 0;
    // Determine the memory required by pszData
    if (RegQueryValueEx(hKey, szValue, NULL, NULL, NULL, &cb)) {
        return FALSE;
    }

    // Allocate the memory for pszData
    *pszData = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, cb);

    if (RegQueryValueEx(hKey, szValue, NULL, NULL, (PBYTE) *pszData, &cb)) {
        HeapFree(g_hHeap, 0, *pszData);
        *pszData = NULL;
        return FALSE;
    }

    return TRUE;
}

VOID
fnFaxRegisterServiceProvider(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxRegisterServiceProvider()

Return Value:

  None

--*/
{
    // hFaxDeviceProvidersKey is the handle to the fax device providers registry key
    HKEY    hFaxDeviceProvidersKey;
    // hFaxSvcProviderKey is the handle to the fax service provider registry key
    HKEY    hFaxSvcProviderKey;
    // szFriendlyName is the service provider friendly name registry value
    LPTSTR  szFriendlyName;
    // szImageName is the service provider image name registry value
    LPTSTR  szImageName;
    // szProviderName is the service provider provider name registry value
    LPTSTR  szProviderName;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxRegisterServiceProvider().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxRegisterServiceProvider\">"));

    // Register the service provider
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxRegisterServiceProvider(ROUTEAPI_PROVIDER_W, ROUTEAPI_PROVIDER_FRIENDLYNAME_W, ROUTEAPI_PROVIDER_IMAGENAME_W, ROUTEAPI_PROVIDER_PROVIDERNAME_W)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxRegisterServiceProvider() failed.  The error code is 0x%08x.  This is an error.  FaxRegisterServiceProvider() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, FAX_DEVICEPROVIDERS_REGKEY, 0, KEY_ALL_ACCESS, &hFaxDeviceProvidersKey)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not open the Registry Key %s, ec = 0x%08x.</result>\r\n"), FAX_DEVICEPROVIDERS_REGKEY, GetLastError());
            goto RegFailed0;
        }

        if (RegOpenKeyEx(hFaxDeviceProvidersKey, ROUTEAPI_PROVIDER, 0, KEY_ALL_ACCESS, &hFaxSvcProviderKey)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not open the Registry Key %s, ec = 0x%08x.</result>\r\n"), ROUTEAPI_PROVIDER, GetLastError());
            goto RegFailed1;
        }

        if (!fnRegQuerySz(hFaxSvcProviderKey, TEXT("FriendlyName"), &szFriendlyName)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), TEXT("FriendlyName"), GetLastError());
            goto RegFailed2;
        }
        if (lstrcmp(ROUTEAPI_PROVIDER_FRIENDLYNAME, szFriendlyName)!=0) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">FriendlyName: Received: %s, Expected: %s.</result>\r\n"), szFriendlyName, ROUTEAPI_PROVIDER_FRIENDLYNAME);
            goto RegFailed2;
        }
        HeapFree(g_hHeap, 0, szFriendlyName);

        if (!fnRegQuerySz(hFaxSvcProviderKey, TEXT("ImageName"), &szImageName)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), TEXT("ImageName"), GetLastError());
            goto RegFailed2;
        }
        if (lstrcmp(ROUTEAPI_PROVIDER_IMAGENAME, szImageName)!=0) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">ImageName: Received: %s, Expected: %s.</result>\r\n"), szImageName, ROUTEAPI_PROVIDER_IMAGENAME);
            goto RegFailed2;
        }
        HeapFree(g_hHeap, 0, szImageName);

        if (!fnRegQuerySz(hFaxSvcProviderKey, TEXT("ProviderName"), &szProviderName)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), TEXT("ProviderName"), GetLastError());
            goto RegFailed2;
        }
        if (lstrcmp(ROUTEAPI_PROVIDER_PROVIDERNAME, szProviderName)!=0) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">ProviderName: Received: %s, Expected: %s.</result>\r\n"), szProviderName, ROUTEAPI_PROVIDER_PROVIDERNAME);
            goto RegFailed2;
        }
        HeapFree(g_hHeap, 0, szProviderName);

        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));

goto RegFailed0;
RegFailed2:
        RegCloseKey(hFaxSvcProviderKey);
        RegDeleteKey(hFaxDeviceProvidersKey, ROUTEAPI_PROVIDER);

RegFailed1:
        RegCloseKey(hFaxDeviceProvidersKey);
    }
	
RegFailed0:
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("ROUTEAPI_PROVIDER = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"ROUTEAPI_PROVIDER = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxRegisterServiceProvider(NULL, ROUTEAPI_PROVIDER_FRIENDLYNAME_W, ROUTEAPI_PROVIDER_IMAGENAME_W, ROUTEAPI_PROVIDER_PROVIDERNAME_W)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxRegisterServiceProvider() returned TRUE.  This is an error.  FaxRegisterServiceProvider() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxRegisterServiceProvider() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("ROUTEAPI_PROVIDER_FRIENDLYNAME = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"ROUTEAPI_PROVIDER_FRIENDLYNAME = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxRegisterServiceProvider(ROUTEAPI_PROVIDER_W, NULL, ROUTEAPI_PROVIDER_IMAGENAME_W, ROUTEAPI_PROVIDER_PROVIDERNAME_W)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxRegisterServiceProvider() returned TRUE.  This is an error.  FaxRegisterServiceProvider() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxRegisterServiceProvider() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("ROUTEAPI_PROVIDER_IMAGENAME = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"ROUTEAPI_PROVIDER_IMAGENAME = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxRegisterServiceProvider(ROUTEAPI_PROVIDER_W, ROUTEAPI_PROVIDER_FRIENDLYNAME_W, NULL, ROUTEAPI_PROVIDER_PROVIDERNAME_W)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxRegisterServiceProvider() returned TRUE.  This is an error.  FaxRegisterServiceProvider() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxRegisterServiceProvider() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("ROUTEAPI_PROVIDER_PROVIDERNAME = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"ROUTEAPI_PROVIDER_PROVIDERNAME = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxRegisterServiceProvider(ROUTEAPI_PROVIDER_W, ROUTEAPI_PROVIDER_FRIENDLYNAME_W, ROUTEAPI_PROVIDER_IMAGENAME_W, NULL)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxRegisterServiceProvider() returned TRUE.  This is an error.  FaxRegisterServiceProvider() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxRegisterServiceProvider() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, FAX_DEVICEPROVIDERS_REGKEY, 0, KEY_ALL_ACCESS, &hFaxDeviceProvidersKey)) {
        return;
    }

    RegDeleteKey(hFaxDeviceProvidersKey, ROUTEAPI_PROVIDER);
    RegCloseKey(hFaxDeviceProvidersKey);
fnWriteLogFile(TEXT("$$$ Summery for FaxRegisterServiceProvider, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}

BOOL CALLBACK
fnRouteApiExtensionCallback(
    HANDLE  hFaxSvcHandle,
    LPVOID  lpContext,
    LPWSTR  szMethodBuffer,
    LPWSTR  szMethodFriendlyNameBuffer,
    LPWSTR  szMethodFunctionNameBuffer,
    LPWSTR  szGUIDBuffer
)
/*++

Routine Description:

  FaxRegisterRoutingExtension() callback

Return Value:

  TRUE to enumerate another Routing Method

--*/
{
    BOOL     bRet;
    LPDWORD  pdwIndex;

	

    pdwIndex = (LPDWORD) lpContext;

    switch (*pdwIndex) {
        case 0:
            lstrcpyW(szMethodBuffer, ROUTEAPI_METHOD1_W);
            lstrcpyW(szMethodFriendlyNameBuffer, ROUTEAPI_METHOD_FRIENDLYNAME1_W);
            lstrcpyW(szMethodFunctionNameBuffer, ROUTEAPI_METHOD_FUNCTIONNAME1_W);
            lstrcpyW(szGUIDBuffer, ROUTEAPI_METHOD_GUID1_W);
            bRet = TRUE;
            break;

        case 1:
            lstrcpyW(szMethodBuffer, ROUTEAPI_METHOD2_W);
            lstrcpyW(szMethodFriendlyNameBuffer, ROUTEAPI_METHOD_FRIENDLYNAME2_W);
            lstrcpyW(szMethodFunctionNameBuffer, ROUTEAPI_METHOD_FUNCTIONNAME2_W);
            lstrcpyW(szGUIDBuffer, ROUTEAPI_METHOD_GUID2_W);
            bRet = TRUE;
            break;

        default:
            bRet = FALSE;
            break;
    }

    (*pdwIndex)++;
    return bRet;
}

VOID
fnFaxRegisterRoutingExtension(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxRegisterRoutingExtension()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE  hFaxSvcHandle;

    // hFaxRoutingExtensionsKey is the handle to the fax routing extensions registry key
    HKEY    hFaxRoutingExtensionsKey;
    // hFaxExtensionKey is the handle to the fax extension registry key
    HKEY    hFaxExtensionKey;
    // hFaxRoutingMethodsKey is the handle to the fax routing methods registry key
    HKEY    hFaxRoutingMethodsKey;
    // hFaxMethodKey is the handle to the fax method registry key
    HKEY    hFaxMethodKey;
    // szFriendlyName is the routing extension or routing method friendly name registry value
    LPTSTR  szFriendlyName;
    // szImageName is the routing extension image name registry value
    LPTSTR  szImageName;
    // szFunctionName is the routing method function name registry value
    LPTSTR  szFunctionName;
    // szGUID is the routing method GUD registry value
    LPTSTR  szGUID;

    DWORD   dwIndex;
	DWORD   dwWhisErrorCode=0;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxRegisterRoutingExtension().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxRegisterRoutingExtension\">"));

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}
    // Register the routing extension
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    dwIndex = 0;
	fnWriteLogFile(TEXT("WHIS> Starting extension registration...\n"));
	
						
	fnWriteLogFile(TEXT("\nValid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxRegisterRoutingExtension(hFaxSvcHandle, ROUTEAPI_EXTENSION_W, ROUTEAPI_EXTENSION_FRIENDLYNAME_W, ROUTEAPI_EXTENSION_IMAGENAME_W, fnRouteApiExtensionCallback, &dwIndex)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxRegisterRoutingExtension() failed.  The error code is 0x%08x.  This is an error.  FaxRegisterRoutingExtension() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (dwIndex != 3) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxRegisterRoutingExtension() failed.  fnRouteApiExtensionCallback() was only called %d times.  This is an error.  fnRouteApiExtensionCallback() should have been called 3 times.</result>\r\n"), dwIndex);
			dwWhisErrorCode=1;
            goto RegFailed0;
        }

        if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, FAX_ROUTINGEXTENSIONS_REGKEY, 0, KEY_ALL_ACCESS, &hFaxRoutingExtensionsKey)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not open the Registry Key %s, ec = 0x%08x.</result>\r\n"), FAX_ROUTINGEXTENSIONS_REGKEY, GetLastError());
			dwWhisErrorCode=2;
            goto RegFailed0;
        }

        if (RegOpenKeyEx(hFaxRoutingExtensionsKey, ROUTEAPI_EXTENSION, 0, KEY_ALL_ACCESS, &hFaxExtensionKey)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not open the Registry Key %s, ec = 0x%08x.</result>\r\n"), ROUTEAPI_EXTENSION, GetLastError());
			dwWhisErrorCode=3;
            goto RegFailed1;
        }

        if (!fnRegQuerySz(hFaxExtensionKey, TEXT("FriendlyName"), &szFriendlyName)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), TEXT("FriendlyName"), GetLastError());
			dwWhisErrorCode=4;
            goto RegFailed2;
        }
        if (lstrcmp(ROUTEAPI_EXTENSION_FRIENDLYNAME, szFriendlyName)!=0) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">FriendlyName: Received: %s, Expected: %s.</result>\r\n"), szFriendlyName, ROUTEAPI_EXTENSION_FRIENDLYNAME);
			dwWhisErrorCode=5;
            goto RegFailed2;
        }
        HeapFree(g_hHeap, 0, szFriendlyName);

        if (!fnRegQuerySz(hFaxExtensionKey, TEXT("ImageName"), &szImageName)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), TEXT("ImageName"), GetLastError());
			dwWhisErrorCode=6;
            goto RegFailed2;
        }
        if (lstrcmp(ROUTEAPI_EXTENSION_IMAGENAME, szImageName)!=0) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">ImageName: Received: %s, Expected: %s.</result>\r\n"), szImageName, ROUTEAPI_EXTENSION_IMAGENAME);
			dwWhisErrorCode=7;
            goto RegFailed2;
        }
        HeapFree(g_hHeap, 0, szImageName);

        if (RegOpenKeyEx(hFaxExtensionKey, FAX_ROUTINGMETHODS_REGKEY, 0, KEY_ALL_ACCESS, &hFaxRoutingMethodsKey)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not open the Registry Key %s, ec = 0x%08x.</result>\r\n"), FAX_ROUTINGMETHODS_REGKEY, GetLastError());
			dwWhisErrorCode=8;
            goto RegFailed2;
        }

        if (RegOpenKeyEx(hFaxRoutingMethodsKey, ROUTEAPI_METHOD1, 0, KEY_ALL_ACCESS, &hFaxMethodKey)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not open the Registry Key %s, ec = 0x%08x.</result>\r\n"), ROUTEAPI_METHOD1, GetLastError());
			dwWhisErrorCode=9;
            goto NextMethod0;
        }

        if (!fnRegQuerySz(hFaxMethodKey, TEXT("FriendlyName"), &szFriendlyName)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), TEXT("FriendlyName"), GetLastError());
			dwWhisErrorCode=10;
            goto NextMethod1;
        }
        if (lstrcmp(ROUTEAPI_METHOD_FRIENDLYNAME1, szFriendlyName)!=0) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">FriendlyName: Received: %s, Expected: %s.</result>\r\n"), szFriendlyName, ROUTEAPI_METHOD_FRIENDLYNAME1);
			dwWhisErrorCode=11;
            goto NextMethod1;
        }
        HeapFree(g_hHeap, 0, szFriendlyName);

        if (!fnRegQuerySz(hFaxMethodKey, TEXT("Function Name"), &szFunctionName)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), TEXT("Function Name"), GetLastError());
			dwWhisErrorCode=12;
            goto NextMethod1;
        }
        if (lstrcmp(ROUTEAPI_METHOD_FUNCTIONNAME1, szFunctionName)!=0) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Function Name: Received: %s, Expected: %s.</result>\r\n"), szFunctionName, ROUTEAPI_METHOD_FUNCTIONNAME1);
			dwWhisErrorCode=13;
            goto NextMethod1;
        }
        HeapFree(g_hHeap, 0, szFunctionName);

        if (!fnRegQuerySz(hFaxMethodKey, TEXT("Guid"), &szGUID)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), TEXT("Guid"), GetLastError());
			dwWhisErrorCode=14;
            goto NextMethod1;
        }
        if (lstrcmp(ROUTEAPI_METHOD_GUID1, szGUID)!=0) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Guid: Received: %s, Expected: %s.</result>\r\n"), szGUID, ROUTEAPI_METHOD_GUID1);
			dwWhisErrorCode=15;
            goto NextMethod1;
        }
        HeapFree(g_hHeap, 0, szGUID);

goto NextMethod0;
NextMethod1:
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">There was an error with the 1st routing extenstion registration (code %d), and it will be deleted. IGNORE ALL CASES.</result>\r\n"),dwWhisErrorCode);
        RegCloseKey(hFaxMethodKey);
		RegDeleteKey(hFaxRoutingMethodsKey, ROUTEAPI_METHOD1);

NextMethod0:
        if (RegOpenKeyEx(hFaxRoutingMethodsKey, ROUTEAPI_METHOD2, 0, KEY_ALL_ACCESS, &hFaxMethodKey)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not open the Registry Key %s, ec = 0x%08x.</result>\r\n"), ROUTEAPI_METHOD2, GetLastError());
            goto RegFailed3;
        }

        if (!fnRegQuerySz(hFaxMethodKey, TEXT("FriendlyName"), &szFriendlyName)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), TEXT("FriendlyName"), GetLastError());
            goto RegFailed4;
        }
        if (lstrcmp(ROUTEAPI_METHOD_FRIENDLYNAME2, szFriendlyName)!=0) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">FriendlyName: Received: %s, Expected: %s.</result>\r\n"), szFriendlyName, ROUTEAPI_METHOD_FRIENDLYNAME2);
            goto RegFailed4;
        }
        HeapFree(g_hHeap, 0, szFriendlyName);

        if (!fnRegQuerySz(hFaxMethodKey, TEXT("Function Name"), &szFunctionName)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), TEXT("Function Name"), GetLastError());
            goto RegFailed4;
        }
        if (lstrcmp(ROUTEAPI_METHOD_FUNCTIONNAME2, szFunctionName)!=0) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Function Name: Received: %s, Expected: %s.</result>\r\n"), szFunctionName, ROUTEAPI_METHOD_FUNCTIONNAME2);
            goto RegFailed4;
        }
        HeapFree(g_hHeap, 0, szFunctionName);

        if (!fnRegQuerySz(hFaxMethodKey, TEXT("Guid"), &szGUID)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), TEXT("Guid"), GetLastError());
            goto RegFailed4;
        }
        if (lstrcmp(ROUTEAPI_METHOD_GUID2, szGUID)!=0) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Guid: Received: %s, Expected: %s.</result>\r\n"), szGUID, ROUTEAPI_METHOD_GUID2);
            goto RegFailed4;
        }
        HeapFree(g_hHeap, 0, szGUID);

        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));

goto RegFailed0;
RegFailed4:
        RegCloseKey(hFaxMethodKey);
	    RegDeleteKey(hFaxRoutingMethodsKey, ROUTEAPI_METHOD2);

RegFailed3:
        RegCloseKey(hFaxRoutingMethodsKey);
	    RegDeleteKey(hFaxExtensionKey, FAX_ROUTINGMETHODS_REGKEY);

RegFailed2:
        RegCloseKey(hFaxExtensionKey);
        RegDeleteKey(hFaxRoutingExtensionsKey, ROUTEAPI_EXTENSION);

RegFailed1:
        RegCloseKey(hFaxRoutingExtensionsKey);
    }

RegFailed0:
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    dwIndex = 0;
    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxRegisterRoutingExtension(NULL, ROUTEAPI_EXTENSION_W, ROUTEAPI_EXTENSION_FRIENDLYNAME_W, ROUTEAPI_EXTENSION_IMAGENAME_W, fnRouteApiExtensionCallback, &dwIndex)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxRegisterRoutingExtension() returned TRUE.  This is an error.  FaxRegisterRoutingExtension() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxRegisterRoutingExtension() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    dwIndex = 0;
    fnWriteLogFile(TEXT("ROUTEAPI_EXTENSION = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"ROUTEAPI_EXTENSION = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxRegisterRoutingExtension(hFaxSvcHandle, NULL, ROUTEAPI_EXTENSION_FRIENDLYNAME_W, ROUTEAPI_EXTENSION_IMAGENAME_W, fnRouteApiExtensionCallback, &dwIndex)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxRegisterRoutingExtension() returned TRUE.  This is an error.  FaxRegisterRoutingExtension() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxRegisterRoutingExtension() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    dwIndex = 0;
    fnWriteLogFile(TEXT("ROUTEAPI_EXTENSION_FRIENDLYNAME = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"ROUTEAPI_EXTENSION_FRIENDLYNAME = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxRegisterRoutingExtension(hFaxSvcHandle, ROUTEAPI_EXTENSION_W, NULL, ROUTEAPI_EXTENSION_IMAGENAME_W, fnRouteApiExtensionCallback, &dwIndex)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxRegisterRoutingExtension() returned TRUE.  This is an error.  FaxRegisterRoutingExtension() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxRegisterRoutingExtension() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    dwIndex = 0;
    fnWriteLogFile(TEXT("ROUTEAPI_EXTENSION_IMAGENAME = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"ROUTEAPI_EXTENSION_IMAGENAME = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxRegisterRoutingExtension(hFaxSvcHandle, ROUTEAPI_EXTENSION_W, ROUTEAPI_EXTENSION_FRIENDLYNAME_W, NULL, fnRouteApiExtensionCallback, &dwIndex)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxRegisterRoutingExtension() returned TRUE.  This is an error.  FaxRegisterRoutingExtension() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxRegisterRoutingExtension() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    dwIndex = 0;
    fnWriteLogFile(TEXT("fnRouteApiExtensionCallback = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"fnRouteApiExtensionCallback = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxRegisterRoutingExtension(hFaxSvcHandle, ROUTEAPI_EXTENSION_W, ROUTEAPI_EXTENSION_FRIENDLYNAME_W, ROUTEAPI_EXTENSION_IMAGENAME_W, NULL, &dwIndex)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxRegisterRoutingExtension() returned TRUE.  This is an error.  FaxRegisterRoutingExtension() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxRegisterRoutingExtension() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    dwIndex = 0;
    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle (fax server not connected).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid hFaxSvcHandle (fax server not connected)\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxRegisterRoutingExtension(hFaxSvcHandle, ROUTEAPI_EXTENSION_W, ROUTEAPI_EXTENSION_FRIENDLYNAME_W, ROUTEAPI_EXTENSION_IMAGENAME_W, fnRouteApiExtensionCallback, &dwIndex)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxRegisterRoutingExtension() returned TRUE.  This is an error.  FaxRegisterRoutingExtension() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxRegisterRoutingExtension() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    //if (szServerName) {
	//	fnWriteLogFile(TEXT("WHIS> SERVER CASE(s):\r\n"));
        // Connect to the fax server
      //  if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
        //    return;
        //}

    //    (*pnNumCasesAttempted)++;

    //    dwIndex = 0;
    //    fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);

    //    if (g_ApiInterface.FaxRegisterRoutingExtension(hFaxSvcHandle, ROUTEAPI_EXTENSION_W, ROUTEAPI_EXTENSION_FRIENDLYNAME_W, ROUTEAPI_EXTENSION_IMAGENAME_W, fnRouteApiExtensionCallback, &dwIndex)) {
    //        fnWriteLogFile(TEXT("FaxRegisterRoutingExtension() returned TRUE.  This is an error.  FaxRegisterRoutingExtension() should return FALSE and GetLastError() should return ERROR_INVALID_FUNCTION (0x%08x).\r\n"), ERROR_INVALID_FUNCTION);
    //    }
    //    else if (GetLastError() != ERROR_INVALID_FUNCTION) {
    //        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxRegisterRoutingExtension() should return FALSE and GetLastError() should return ERROR_INVALID_FUNCTION (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_FUNCTION);
    //    }
    //    else {
    //        (*pnNumCasesPassed)++;


    //    }

    // Disconnect from the fax server
    //    g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}


	fnWriteLogFile(TEXT("$$$ Summery for FaxRegisterRoutingExtension, Attempt %d, Pass %d, Fail %d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
	fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
	fnWriteLogFile(TEXT("\n\t</function>"));
	

    
	
	// un registration...
	if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, FAX_ROUTINGEXTENSIONS_REGKEY, 0, KEY_ALL_ACCESS, &hFaxRoutingExtensionsKey)) {
		return;
    }

    if (RegOpenKeyEx(hFaxRoutingExtensionsKey, ROUTEAPI_EXTENSION, 0, KEY_ALL_ACCESS, &hFaxExtensionKey)) {
        RegCloseKey(hFaxRoutingExtensionsKey);
        return;
    }

    if (RegOpenKeyEx(hFaxExtensionKey, FAX_ROUTINGMETHODS_REGKEY, 0, KEY_ALL_ACCESS, &hFaxRoutingMethodsKey)) {
        RegCloseKey(hFaxExtensionKey);
        RegDeleteKey(hFaxRoutingExtensionsKey, ROUTEAPI_EXTENSION);
        RegCloseKey(hFaxRoutingExtensionsKey);
        return;
    }

//    RegDeleteKey(hFaxRoutingMethodsKey, ROUTEAPI_METHOD1);
//    RegDeleteKey(hFaxRoutingMethodsKey, ROUTEAPI_METHOD2);
      RegCloseKey(hFaxRoutingMethodsKey);
//    RegDeleteKey(hFaxExtensionKey, FAX_ROUTINGMETHODS_REGKEY);
	  RegCloseKey(hFaxExtensionKey);
//    RegDeleteKey(hFaxRoutingExtensionsKey, ROUTEAPI_EXTENSION);
      RegCloseKey(hFaxRoutingExtensionsKey);
	  return;
}

BOOL
fnStopFaxSvc(
)
/*++

Routine Description:

  Stops the fax service

Return Value:

  TRUE on success

--*/
{
    HANDLE          hManager = NULL;
    HANDLE          hService = NULL;
    SERVICE_STATUS  ServiceStatus;

	fnWriteLogFile(TEXT("<function name=\"_utils(StopFaxSvc)\">"));

    // Open the service control manager
    hManager = OpenSCManager(NULL, SERVICES_ACTIVE_DATABASE, SC_MANAGER_ALL_ACCESS);
    // Open the service
    hService = OpenService(hManager, FAX_SERVICE, SERVICE_ALL_ACCESS);

    // Query the service status
    ZeroMemory(&ServiceStatus, sizeof(SERVICE_STATUS));
    if (!QueryServiceStatus(hService, &ServiceStatus)) {
        CloseServiceHandle(hService);
        CloseServiceHandle(hManager);
        fnWriteLogFile(TEXT("QueryServiceStatus() failed, ec = 0x%08x.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return FALSE;
    }

    if (ServiceStatus.dwCurrentState == SERVICE_STOPPED) {
        // Service is stopped
        // Return TRUE
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"0\" pass=\"0\" fail=\"0\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return TRUE;
    }

    // Stop the service
    if (!ControlService(hService, SERVICE_CONTROL_STOP, &ServiceStatus)) {
        CloseServiceHandle(hService);
        CloseServiceHandle(hManager);
        fnWriteLogFile(TEXT("ControlService() failed, ec = 0x%08x.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return FALSE;
    }

    // Wait until the service is stopped
    ZeroMemory(&ServiceStatus, sizeof(SERVICE_STATUS));
    while (ServiceStatus.dwCurrentState != SERVICE_STOPPED) {
        Sleep(1000);

        // Query the service status
        if (!QueryServiceStatus(hService, &ServiceStatus)) {
            CloseServiceHandle(hService);
            CloseServiceHandle(hManager);
            fnWriteLogFile(TEXT("QueryServiceStatus() failed, ec = 0x%08x.\r\n"), GetLastError());
			fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
			fnWriteLogFile(TEXT("\n\t</function>"));
            return FALSE;
        }

        // Verify the service is stopped or stopping
        if (!((ServiceStatus.dwCurrentState == SERVICE_STOPPED) || (ServiceStatus.dwCurrentState == SERVICE_STOP_PENDING))) {
            CloseServiceHandle(hService);
            CloseServiceHandle(hManager);
            fnWriteLogFile(TEXT("The Fax Service is in an unexpected state.  dwCurrentState: 0x%08x.\r\n"), ServiceStatus.dwCurrentState);
			fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
			fnWriteLogFile(TEXT("\n\t</function>"));
            return FALSE;
        }
    }

    Sleep(1000);

    CloseServiceHandle(hService);
    CloseServiceHandle(hManager);
	fnWriteLogFile(TEXT("\n\t<summary attempt=\"0\" pass=\"0\" fail=\"0\"></summary>\n"));
	fnWriteLogFile(TEXT("\n\t</function>"));
    return TRUE;
}

VOID
fnAddRouteApiExtension(
)
/*++

Routine Description:

  Adds the Microsoft Routing Extension

Return Value:

  None

--*/
{
    // szRouteApiDll is the route api dll
    TCHAR   szRouteApiDll[MAX_PATH];

    // hFaxSvcHandle is the handle to the fax server
    HANDLE  hFaxSvcHandle;
    DWORD   dwIndex = 0;

	fnWriteLogFile(TEXT("<function name=\"_utils(AddRouteApiExtension)\">"));

    ExpandEnvironmentStrings(ROUTEAPI_EXTENSION_IMAGENAME, szRouteApiDll, sizeof(szRouteApiDll) / sizeof(TCHAR));
    if (!lstrcmpi(ROUTEAPI_EXTENSION_IMAGENAME, szRouteApiDll)) {
		fnWriteLogFile(TEXT("WHIS> Test Error: ROUTEAPI_EXTENSION_IMAGENAME and szRouteApiDll are not the same, The error code is 0x%08x\r\n"),GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
		return;
    }

    // Copy the FaxRcv dll
    if (!CopyFile(ROUTEAPI_EXTENSION_DLLNAME, szRouteApiDll, FALSE)) {
		fnWriteLogFile(TEXT("WHIS> Test Error: Could not copy routing extension file to system directory, The error code is 0x%08x\r\n"),GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
		return;
    }

    // Connect to the fax server
    g_ApiInterface.FaxConnectFaxServer(NULL, &hFaxSvcHandle);

    g_ApiInterface.FaxRegisterRoutingExtension(hFaxSvcHandle, ROUTEAPI_EXTENSION_W, ROUTEAPI_EXTENSION_FRIENDLYNAME_W, ROUTEAPI_EXTENSION_IMAGENAME_W, fnRouteApiExtensionCallback, &dwIndex);

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);
	fnWriteLogFile(TEXT("\n\t<summary attempt=\"0\" pass=\"0\" fail=\"0\"></summary>\n"));
	fnWriteLogFile(TEXT("\n\t</function>"));
}

VOID
fnRemoveRouteApiExtension(
)
/*++

Routine Description:

  Removes the RouteApi Routing Extension

Return Value:

  None

--*/
{
    // hFaxRoutingExtensionsKey is the handle to the fax routing extensions registry key
    HKEY  hFaxRoutingExtensionsKey;
    // hFaxExtensionKey is the handle to the fax extension registry key
    HKEY  hFaxExtensionKey;
    // hFaxRoutingMethodsKey is the handle to the fax routing methods registry key
    HKEY  hFaxRoutingMethodsKey;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT("<function name=\"_utils(RemoveRouteApiExtension)\">"));

    if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, FAX_ROUTINGEXTENSIONS_REGKEY, 0, KEY_ALL_ACCESS, &hFaxRoutingExtensionsKey)) {
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    if (RegOpenKeyEx(hFaxRoutingExtensionsKey, ROUTEAPI_EXTENSION, 0, KEY_ALL_ACCESS, &hFaxExtensionKey)) {
        RegCloseKey(hFaxRoutingExtensionsKey);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    if (RegOpenKeyEx(hFaxExtensionKey, FAX_ROUTINGMETHODS_REGKEY, 0, KEY_ALL_ACCESS, &hFaxRoutingMethodsKey)) {
        RegCloseKey(hFaxExtensionKey);
        RegDeleteKey(hFaxRoutingExtensionsKey, ROUTEAPI_EXTENSION);
        RegCloseKey(hFaxRoutingExtensionsKey);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    RegDeleteKey(hFaxRoutingMethodsKey, ROUTEAPI_METHOD1);
    RegDeleteKey(hFaxRoutingMethodsKey, ROUTEAPI_METHOD2);
    RegCloseKey(hFaxRoutingMethodsKey);
    RegDeleteKey(hFaxExtensionKey, FAX_ROUTINGMETHODS_REGKEY);
    RegCloseKey(hFaxExtensionKey);
    RegDeleteKey(hFaxRoutingExtensionsKey, ROUTEAPI_EXTENSION);
    RegCloseKey(hFaxRoutingExtensionsKey);
	fnWriteLogFile(TEXT("\n\t<summary attempt=\"0\" pass=\"0\" fail=\"0\"></summary>\n"));
	fnWriteLogFile(TEXT("\n\t</function>"));
}

VOID
fnFaxEnumGlobalRoutingInfo(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxEnumGlobalRoutingInfo()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE                    hFaxSvcHandle;
    // pRoutingInfo is the pointer to the global routing structures
    PFAX_GLOBAL_ROUTING_INFO  pRoutingInfo;
    // dwNumMethods is the number of routing methods
    DWORD                     dwNumMethods;

    // szRouteApiDll is the route api dll
    TCHAR                     szRouteApiDll[MAX_PATH];

    DWORD                     dwIndex;

	TCHAR					szPreDefinedValue[MAX_PATH];

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;



	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxEnumGlobalRoutingInfo().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxEnumGlobalRoutingInfo\">"));

   // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    for (dwIndex = 0; dwIndex < 2; dwIndex++) {
        // Enumerate the routing extension global info
        (*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

        fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

        if (!g_ApiInterface.FaxEnumGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo, &dwNumMethods)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxEnumGlobalRoutingInfo() failed.  The error code is 0x%08x.  This is an error.  FaxEnumGlobalRoutingInfo() should succeed.</result>\r\n"), GetLastError());
        }
        else {
            if (pRoutingInfo == NULL) {
                fnWriteLogFile(TEXT("\n\t<result value=\"0\">pRoutingInfo is NULL.  This is an error.  pRoutingInfo should not be NULL.</result>\r\n"));
            }
			if (dwNumMethods != g_dwNumMethods) {
                fnWriteLogFile(TEXT("\n\t<result value=\"0\">dwNumMethods is not g_dwNumMethods.  This is an error.  dwNumMethods should be g_dwNumMethods.</result>\r\n"));
            }

			if ((pRoutingInfo != NULL) && (dwNumMethods == g_dwNumMethods)) {

				if (pRoutingInfo[g_dwIndexAPIMethod1].SizeOfStruct != sizeof(FAX_GLOBAL_ROUTING_INFO)) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">SizeOfStruct: Received: %d, Expected: %d.</result>\r\n"), pRoutingInfo[g_dwIndexAPIMethod1].SizeOfStruct, sizeof(FAX_GLOBAL_ROUTING_INFO));
                    goto FuncFailed;
                }

                if (pRoutingInfo[g_dwIndexAPIMethod1].Priority != g_dwNumMethods-1) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">Priority: Received: %d, Expected: g_dwNumMethods-1.</result>\r\n"), pRoutingInfo[g_dwIndexAPIMethod1].Priority);
                    goto FuncFailed;
                }
				
				if (lstrcmp(pRoutingInfo[g_dwIndexAPIMethod1].Guid,ROUTEAPI_METHOD_GUID1)!=0) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">Guid: Received: %s, Expected: %s.</result>\r\n"), pRoutingInfo[g_dwIndexAPIMethod1].Guid, ROUTEAPI_METHOD_GUID1);
                    goto FuncFailed;
                }

                if (lstrcmp(pRoutingInfo[g_dwIndexAPIMethod1].FriendlyName, ROUTEAPI_METHOD_FRIENDLYNAME1)!=0) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">FriendlyName: Received: %s, Expected: %s.</result>\r\n"), pRoutingInfo[g_dwIndexAPIMethod1].FriendlyName, ROUTEAPI_METHOD_FRIENDLYNAME1);
                    goto FuncFailed;
                }

                if (lstrcmp(pRoutingInfo[g_dwIndexAPIMethod1].FunctionName, ROUTEAPI_METHOD_FUNCTIONNAME1)!=0) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">FunctionName: Received: %s, Expected: %s.</result>\r\n"), pRoutingInfo[g_dwIndexAPIMethod1].FunctionName, ROUTEAPI_METHOD_FUNCTIONNAME1);
                    goto FuncFailed;
                }

                ExpandEnvironmentStrings(ROUTEAPI_EXTENSION_IMAGENAME, szRouteApiDll, sizeof(szRouteApiDll) / sizeof(TCHAR));
                if (lstrcmp(pRoutingInfo[g_dwIndexAPIMethod1].ExtensionImageName, szRouteApiDll)!=0) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">ExtensionImageName: Received: %s, Expected: %s.</result>\r\n"), pRoutingInfo[g_dwIndexAPIMethod1].ExtensionImageName, szRouteApiDll);
                    goto FuncFailed;
                }

                if (lstrcmp(pRoutingInfo[g_dwIndexAPIMethod1].ExtensionFriendlyName, ROUTEAPI_EXTENSION_FRIENDLYNAME)!=0) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">ExtensionFriendlyName: Received: %s, Expected: %s.</result>\r\n"), pRoutingInfo[g_dwIndexAPIMethod1].ExtensionFriendlyName, ROUTEAPI_EXTENSION_FRIENDLYNAME);
                    goto FuncFailed;
                }

                if (pRoutingInfo[g_dwIndexAPIMethod2].SizeOfStruct != sizeof(FAX_GLOBAL_ROUTING_INFO)!=0) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">SizeOfStruct: Received: %d, Expected: %d.</result>\r\n"), pRoutingInfo[g_dwIndexAPIMethod2].SizeOfStruct, sizeof(FAX_GLOBAL_ROUTING_INFO));
                    goto FuncFailed;
                }

                if (pRoutingInfo[g_dwIndexAPIMethod2].Priority != g_dwNumMethods) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">Priority: Received: %d, Expected: g_dwNumMethods.</result>\r\n"), pRoutingInfo[g_dwIndexAPIMethod2].Priority);
                    goto FuncFailed;
                }

                if (lstrcmp(pRoutingInfo[g_dwIndexAPIMethod2].Guid, ROUTEAPI_METHOD_GUID2)!=0) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">Guid: Received: %s, Expected: %s.</result>\r\n"), pRoutingInfo[g_dwIndexAPIMethod2].Guid, ROUTEAPI_METHOD_GUID2);
                    goto FuncFailed;
                }

                if (lstrcmp(pRoutingInfo[g_dwIndexAPIMethod2].FriendlyName, ROUTEAPI_METHOD_FRIENDLYNAME2)!=0) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">FriendlyName: Received: %s, Expected: %s.</result>\r\n"), pRoutingInfo[g_dwIndexAPIMethod2].FriendlyName, ROUTEAPI_METHOD_FRIENDLYNAME2);
                    goto FuncFailed;
                }

                if (lstrcmp(pRoutingInfo[g_dwIndexAPIMethod2].FunctionName, ROUTEAPI_METHOD_FUNCTIONNAME2)!=0) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">FunctionName: Received: %s, Expected: %s.</result>\r\n"), pRoutingInfo[g_dwIndexAPIMethod2].FunctionName, ROUTEAPI_METHOD_FUNCTIONNAME2);
                    goto FuncFailed;
                }

                ExpandEnvironmentStrings(ROUTEAPI_EXTENSION_IMAGENAME, szRouteApiDll, sizeof(szRouteApiDll) / sizeof(TCHAR));
                if (lstrcmp(pRoutingInfo[g_dwIndexAPIMethod2].ExtensionImageName, szRouteApiDll)!=0) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">ExtensionImageName: Received: %s, Expected: %s.</result>\r\n"), pRoutingInfo[g_dwIndexAPIMethod2].ExtensionImageName, szRouteApiDll);
                    goto FuncFailed;
                }

                if (lstrcmp(pRoutingInfo[g_dwIndexAPIMethod2].ExtensionFriendlyName, ROUTEAPI_EXTENSION_FRIENDLYNAME)!=0) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">ExtensionFriendlyName: Received: %s, Expected: %s.</result>\r\n"), pRoutingInfo[g_dwIndexAPIMethod2].ExtensionFriendlyName, ROUTEAPI_EXTENSION_FRIENDLYNAME);
                    goto FuncFailed;
                }

                (*pnNumCasesPassed)++;
				dwFuncCasesPass++;
				fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
            }

FuncFailed:
            g_ApiInterface.FaxFreeBuffer(pRoutingInfo);
        }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
    }
	

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxEnumGlobalRoutingInfo(NULL, &pRoutingInfo, &dwNumMethods)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxEnumGlobalRoutingInfo() returned TRUE.  This is an error.  FaxEnumGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pRoutingInfo);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxEnumGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pRoutingInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pRoutingInfo = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxEnumGlobalRoutingInfo(hFaxSvcHandle, NULL, &dwNumMethods)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxEnumGlobalRoutingInfo() returned TRUE.  This is an error.  FaxEnumGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pRoutingInfo);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxEnumGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("dwNumMethods = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"dwNumMethods = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxEnumGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo, NULL)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxEnumGlobalRoutingInfo() returned TRUE.  This is an error.  FaxEnumGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pRoutingInfo);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxEnumGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid hFaxSvcHandle\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxEnumGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo, NULL)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxEnumGlobalRoutingInfo() returned TRUE.  This is an error.  FaxEnumGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pRoutingInfo);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxEnumGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> SERVER CASE(s):\r\n"));
        // Connect to the fax server
//        if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
//            return;
        //}

        //(*pnNumCasesAttempted)++;

        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxEnumGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo, &dwNumMethods)) {
          //  fnWriteLogFile(TEXT("FaxEnumGlobalRoutingInfo() failed.  The error code is 0x%08x.  This is an error.  FaxEnumGlobalRoutingInfo() should succeed.\r\n"), GetLastError());
        //}
        //else {
          //  g_ApiInterface.FaxFreeBuffer(pRoutingInfo);
//            (*pnNumCasesPassed)++;


  //      }

        // Disconnect from the fax server
    //    g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxEnumGlobalRoutingMethods, Attempt %d, Pass %d, Fail %d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}

VOID
fnFaxSetGlobalRoutingInfo(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	BOOL	 bTestLimits
)
/*++

Routine Description:

  FaxSetGlobalRoutingInfo()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE                    hFaxSvcHandle;
    // pRoutingInfo is the pointer to the global routing structures
    PFAX_GLOBAL_ROUTING_INFO  pRoutingInfo;
    // dwNumMethods is the number of routing methods
    DWORD                     dwNumMethods;
    // szGUID is the copy of a routing method GUID
    LPTSTR                    szGUID;

    DWORD                     dwIndex;
    DWORD                     cb;
    DWORD                     dwOffset;
	DWORD					  dwWhisRoutingCounter;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxSetGlobalRoutingInfo().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxSetGlobalRoutingInfo\">"));

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}
    
	// Enumerate the routing extension global info
    if (!g_ApiInterface.FaxEnumGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo, &dwNumMethods)) {
        fnWriteLogFile(TEXT("WHIS> (org test error) FaxEnumGlobalRoutingInfo() failed.  The error code is 0x%08x.  This is an error.  FaxEnumGlobalRoutingInfo() should succeed.\r\n"), GetLastError());
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

	
	pRoutingInfo[g_dwIndexAPIMethod1].Priority = g_dwNumMethods;
    pRoutingInfo[g_dwIndexAPIMethod2].Priority = g_dwNumMethods-1;

    // Set the routing extension global info
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSetGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo[g_dwIndexAPIMethod1])) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetGlobalRoutingInfo() failed.  The error code is 0x%08x.  This is an error.  FaxSetGlobalRoutingInfo() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_ApiInterface.FaxSetGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo[g_dwIndexAPIMethod2])) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetGlobalRoutingInfo() failed.  The error code is 0x%08x.  This is an error.  FaxSetGlobalRoutingInfo() should succeed.</result>\r\n"), GetLastError());
        }
        else {
            g_ApiInterface.FaxFreeBuffer(pRoutingInfo);

            // Enumerate the routing extension global info
            g_ApiInterface.FaxEnumGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo, &dwNumMethods);
            if (lstrcmp(pRoutingInfo[g_dwIndexAPIMethod1].Guid, ROUTEAPI_METHOD_GUID2)!=0) {
                fnWriteLogFile(TEXT("\n\t<result value=\"0\">Guid: Received: %s, Expected: %s.</result>\r\n"), pRoutingInfo[g_dwIndexAPIMethod1].Guid, ROUTEAPI_METHOD_GUID2);
                goto FuncFailed;
            }

            if (pRoutingInfo[g_dwIndexAPIMethod1].Priority != g_dwNumMethods-1) {
                fnWriteLogFile(TEXT("\n\t<result value=\"0\">Priority: Received: %d, Expected: g_dwNumMethods-1.</result>\r\n"), pRoutingInfo[g_dwIndexAPIMethod1].Priority);
                goto FuncFailed;
            }

            if (lstrcmp(pRoutingInfo[g_dwIndexAPIMethod2].Guid, ROUTEAPI_METHOD_GUID1)!=0) {
                fnWriteLogFile(TEXT("Guid: Received: %s, Expected: %s.\r\n"), pRoutingInfo[g_dwIndexAPIMethod2].Guid, ROUTEAPI_METHOD_GUID1);
                goto FuncFailed;
            }

            if (pRoutingInfo[g_dwIndexAPIMethod2].Priority != g_dwNumMethods) {
                fnWriteLogFile(TEXT("Priority: Received: %d, Expected: g_dwNumMethods.\r\n"), pRoutingInfo[g_dwIndexAPIMethod2].Priority);
                goto FuncFailed;
            }

            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));

FuncFailed:
            pRoutingInfo[g_dwIndexAPIMethod1].Priority = g_dwNumMethods-1;
            pRoutingInfo[g_dwIndexAPIMethod2].Priority = g_dwNumMethods;

            g_ApiInterface.FaxSetGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo[g_dwIndexAPIMethod1]);
            g_ApiInterface.FaxSetGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo[g_dwIndexAPIMethod2]);
            g_ApiInterface.FaxFreeBuffer(pRoutingInfo);
            g_ApiInterface.FaxEnumGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo, &dwNumMethods);
        }
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    pRoutingInfo[g_dwIndexAPIMethod1].SizeOfStruct = 0;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pRoutingInfo->SizeOfStruct = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pRoutingInfo->SizeOfStruct = 0\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo[g_dwIndexAPIMethod1])) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetGlobalRoutingInfo() returned TRUE.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
    pRoutingInfo[g_dwIndexAPIMethod1].SizeOfStruct = sizeof(FAX_GLOBAL_ROUTING_INFO);
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetGlobalRoutingInfo(NULL, &pRoutingInfo[g_dwIndexAPIMethod1])) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetGlobalRoutingInfo() returned TRUE.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pRoutingInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pRoutingInfo = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetGlobalRoutingInfo(hFaxSvcHandle, NULL)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetGlobalRoutingInfo() returned TRUE.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    szGUID = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(pRoutingInfo[g_dwIndexAPIMethod1].Guid) + 1) * sizeof(TCHAR));
    lstrcpy(szGUID, pRoutingInfo[g_dwIndexAPIMethod1].Guid);
    lstrcpy((LPTSTR) pRoutingInfo[g_dwIndexAPIMethod1].Guid, ROUTEAPI_INVALID_GUID);

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

	fnWriteLogFile(TEXT("Invalid GUID.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid GUID\" id=\"%d\">"), *pnNumCasesAttempted);

	if (g_ApiInterface.FaxSetGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo[g_dwIndexAPIMethod1])) {
		fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetGlobalRoutingInfo() returned TRUE.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).</result>\r\n"), ERROR_INVALID_DATA);
	}
	else if (GetLastError() != ERROR_INVALID_DATA) {
		fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_DATA);
	}
	else {
		(*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
	}
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	if (bTestLimits)	{
		
		// limit values tested

		// priority=MAX_DWORD
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("WHIS> LIMITS: Priotiry = MAX_DWORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"LIMITS: Priotiry = MAX_DWORD\" id=\"%d\">"), *pnNumCasesAttempted);

		pRoutingInfo[g_dwIndexAPIMethod1].Priority = MAX_DWORD;
		if (g_ApiInterface.FaxSetGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo[g_dwIndexAPIMethod1])) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetGlobalRoutingInfo() returned TRUE.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).</result>\r\n"), ERROR_INVALID_DATA);
		}
		else if (GetLastError() != ERROR_INVALID_DATA) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_DATA);
		}
		else {
	        (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		}
		fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("WHIS> LIMITS: FriendlyName=LONG_STRING  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"LIMITS: FriendlyName=LONG_STRING\" id=\"%d\">"), *pnNumCasesAttempted);

		pRoutingInfo[g_dwIndexAPIMethod1].FriendlyName = TEXT(LONG_STRING);
		if (g_ApiInterface.FaxSetGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo[g_dwIndexAPIMethod1])) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetGlobalRoutingInfo() returned TRUE.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).</result>\r\n"), ERROR_INVALID_DATA);
		}
	    else if (GetLastError() != ERROR_INVALID_DATA) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_DATA);
		}
		else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		}
		fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("WHIS> LIMITS: FunctionName=LONG_STRING  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"LIMITS: FunctionName=LONG_STRING\" id=\"%d\">"), *pnNumCasesAttempted);

		pRoutingInfo[g_dwIndexAPIMethod1].FunctionName = TEXT(LONG_STRING);
		if (g_ApiInterface.FaxSetGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo[g_dwIndexAPIMethod1])) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetGlobalRoutingInfo() returned TRUE.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).</result>\r\n"), ERROR_INVALID_DATA);
		}
	    else if (GetLastError() != ERROR_INVALID_DATA) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_DATA);
		}
		else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		}
		fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

	    fnWriteLogFile(TEXT("WHIS> LIMITS: ExtensionImageName=LONG_STRING  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"LIMITS: ExtensionImageName=LONG_STRING\" id=\"%d\">"), *pnNumCasesAttempted);

		pRoutingInfo[g_dwIndexAPIMethod1].ExtensionImageName = TEXT(LONG_STRING);
	    if (g_ApiInterface.FaxSetGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo[g_dwIndexAPIMethod1])) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetGlobalRoutingInfo() returned TRUE.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).</result>\r\n"), ERROR_INVALID_DATA);
		}
		else if (GetLastError() != ERROR_INVALID_DATA) {
		    fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_DATA);
	    }
	    else {
	        (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		}
		fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("WHIS> LIMITS: ExtensionFriendlyName=LONG_STRING  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"LIMITS: ExtensionFriendlyName=LONG_STRING\" id=\"%d\">"), *pnNumCasesAttempted);

		pRoutingInfo[g_dwIndexAPIMethod1].ExtensionFriendlyName = TEXT(LONG_STRING);
		if (g_ApiInterface.FaxSetGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo[g_dwIndexAPIMethod1])) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetGlobalRoutingInfo() returned TRUE.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).</result>\r\n"), ERROR_INVALID_DATA);
		}
		else if (GetLastError() != ERROR_INVALID_DATA) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_DATA);
		}
		else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		}
		fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
	}

    lstrcpy((LPTSTR) pRoutingInfo[g_dwIndexAPIMethod1].Guid, szGUID);
    HeapFree(g_hHeap, 0, szGUID);

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid hFaxSvcHandle\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo[g_dwIndexAPIMethod1])) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetGlobalRoutingInfo() returned TRUE.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetGlobalRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    g_ApiInterface.FaxFreeBuffer(pRoutingInfo);

    //if (szServerName) {
	//	fnWriteLogFile(TEXT("WHIS> SERVER CASE(s):\r\n"));
        // Connect to the fax server
      //  if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
        //    return;
        //}

        // Enumerate the routing extension global info
        //if (!g_ApiInterface.FaxEnumGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo, &dwNumMethods)) {
          //  fnWriteLogFile(TEXT("FaxEnumGlobalRoutingInfo() failed.  The error code is 0x%08x.  This is an error.  FaxEnumGlobalRoutingInfo() should succeed.\r\n"), GetLastError());
            // Disconnect from the fax server
            //g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        // Set the routing extension global info
        //(*pnNumCasesAttempted)++;

        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //for (dwIndex = 0; dwIndex < dwNumMethods; dwIndex++) {
            //if (!g_ApiInterface.FaxSetGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo[dwIndex])) {
              //  fnWriteLogFile(TEXT("FaxSetGlobalRoutingInfo() failed.  The error code is 0x%08x.  This is an error.  FaxSetGlobalRoutingInfo() should succeed.\r\n"), GetLastError());
//                break;
  //          }
    //    }

      //  if (dwIndex == dwNumMethods) {
        //    (*pnNumCasesPassed)++;

        //}

        //g_ApiInterface.FaxFreeBuffer(pRoutingInfo);

        // Disconnect from the fax server
//        g_ApiInterface.FaxClose(hFaxSvcHandle);
  //  }
fnWriteLogFile(TEXT("$$$ Summery for FaxSetGlobalRoutingInfo, Attempt %d, Pass %d, Fail %d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}




VOID
fnFaxEnumRoutingMethods(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxEnumGlobalRoutingInfo()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE               hFaxSvcHandle;
    // hFaxPortHandle is the handle to a fax port
    HANDLE               hFaxPortHandle;
    // pFaxPortInfo is the pointer to the fax port info
    PFAX_PORT_INFO       pFaxPortInfo;
    // dwNumPorts is the number of fax ports
    DWORD                dwNumPorts;
    // dwDeviceId is the device id of the fax port
    DWORD                dwDeviceId;
    // szDeviceName is the device name of the fax port
    LPTSTR               szDeviceName;
    // pRoutingMethod is the pointer to the routing method data structures
    PFAX_ROUTING_METHOD  pRoutingMethods;
    // dwNumMethods is the number of routing methods
    DWORD                dwNumMethods;

    DWORD                dwIndex;
						
	TCHAR				 szRouteApiDll[MAX_PATH];

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxEnumRoutingMethods().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxEnumRoutingMethods\">"));

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    // Enumerate the fax ports
    if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not enum ports on server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    dwDeviceId = pFaxPortInfo[0].DeviceId;
    szDeviceName = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(pFaxPortInfo[0].DeviceName) + 1) * sizeof(TCHAR));
    lstrcpy(szDeviceName, pFaxPortInfo[0].DeviceName);

    // Free the fax port info
    g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not open port %d, The error code is 0x%08x.\r\n"),dwDeviceId, GetLastError());
        HeapFree(g_hHeap, 0, szDeviceName);
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    for (dwIndex = 0; dwIndex < 2; dwIndex++) {
        // Enumerate the routing methods
        (*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

        fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

        if (!g_ApiInterface.FaxEnumRoutingMethods(hFaxPortHandle, &pRoutingMethods, &dwNumMethods)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxEnumRoutingMethods() failed.  The error code is 0x%08x.  This is an error.  FaxEnumRoutingMethods() should succeed.</result>\r\n"), GetLastError());
        }
        else {
            if (pRoutingMethods == NULL) {
                fnWriteLogFile(TEXT("\n\t<result value=\"0\">pRoutingMethods is NULL.  This is an error.  pRoutingMethods should not be NULL.</result>\r\n"));
            }

            if (dwNumMethods != g_dwNumMethods) {
                fnWriteLogFile(TEXT("\n\t<result value=\"0\">dwNumMethods is not g_dwNumMethods.  This is an error.  dwNumMethods should be g_dwNumMethods.</result>\r\n"));
            }

            if ((pRoutingMethods != NULL) && (dwNumMethods == g_dwNumMethods)) {
                if (pRoutingMethods[g_dwIndexAPIMethod2].SizeOfStruct != sizeof(FAX_ROUTING_METHOD)) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">SizeOfStruct: Received: %d, Expected: %d.</result>\r\n"), pRoutingMethods[g_dwIndexAPIMethod2].SizeOfStruct, sizeof(FAX_ROUTING_METHOD));
                    goto FuncFailed;
                }

                if (pRoutingMethods[g_dwIndexAPIMethod2].DeviceId != dwDeviceId) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">DeviceId: Received: 0x%08x, Expected: 0x%08x.</result>\r\n"), pRoutingMethods[g_dwIndexAPIMethod2].DeviceId, dwDeviceId);
                    goto FuncFailed;
                }

                if ((dwIndex == 0) && (pRoutingMethods[g_dwIndexAPIMethod2].Enabled)) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">Enabled: Received: FALSE, Expected: TRUE.</result>\r\n"));
                    goto FuncFailed;
                }
                else if ((dwIndex == 1) && (!pRoutingMethods[g_dwIndexAPIMethod2].Enabled)) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">Enabled: Received: TRUE, Expected: FALSE.</result>\r\n"));
                    goto FuncFailed;
                }

                if (lstrcmp(pRoutingMethods[g_dwIndexAPIMethod2].DeviceName, szDeviceName)!=0) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">DeviceName: Received: %s, Expected: %s.</result>\r\n"), pRoutingMethods[g_dwIndexAPIMethod2].DeviceName, szDeviceName);
                    goto FuncFailed;
                }

                if (lstrcmp(pRoutingMethods[g_dwIndexAPIMethod2].Guid, ROUTEAPI_METHOD_GUID1)!=0) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">Guid: Received: %s, Expected: %s.</result>\r\n"), pRoutingMethods[g_dwIndexAPIMethod2].Guid, ROUTEAPI_METHOD_GUID1);
                    goto FuncFailed;
                }
				
                if (lstrcmp(pRoutingMethods[g_dwIndexAPIMethod2].FriendlyName, ROUTEAPI_METHOD_FRIENDLYNAME1)!=0) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">FriendlyName: Received: %s, Expected: %s.</result>\r\n"), pRoutingMethods[g_dwIndexAPIMethod2].FriendlyName, ROUTEAPI_METHOD_FRIENDLYNAME1);
                    goto FuncFailed;
                }

                ExpandEnvironmentStrings(ROUTEAPI_EXTENSION_IMAGENAME, szRouteApiDll, sizeof(szRouteApiDll) / sizeof(TCHAR));
                if (lstrcmp(pRoutingMethods[g_dwIndexAPIMethod2].ExtensionImageName, szRouteApiDll)!=0) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">ExtensionImageName: Received: %s, Expected: %s.</result>\r\n"), pRoutingMethods[g_dwIndexAPIMethod2].ExtensionImageName, szRouteApiDll);
                    goto FuncFailed;
                }

                if (lstrcmp(pRoutingMethods[g_dwIndexAPIMethod2].ExtensionFriendlyName, ROUTEAPI_EXTENSION_FRIENDLYNAME)!=0) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">ExtensionFriendlyName: Received: %s, Expected: %s.</result>\r\n"), pRoutingMethods[g_dwIndexAPIMethod2].ExtensionFriendlyName, ROUTEAPI_EXTENSION_FRIENDLYNAME);
                    goto FuncFailed;
                }

                if (pRoutingMethods[g_dwIndexAPIMethod1].SizeOfStruct != sizeof(FAX_ROUTING_METHOD)) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">SizeOfStruct: Received: %d, Expected: %d.</result>\r\n"), pRoutingMethods[g_dwIndexAPIMethod1].SizeOfStruct, sizeof(FAX_ROUTING_METHOD));
                    goto FuncFailed;
                }

                if (pRoutingMethods[g_dwIndexAPIMethod1].DeviceId != dwDeviceId) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">DeviceId: Received: 0x%08x, Expected: 0x%08x.</result>\r\n"), pRoutingMethods[g_dwIndexAPIMethod1].DeviceId, dwDeviceId);
                    goto FuncFailed;
                }

                if ((dwIndex == 0) && (pRoutingMethods[g_dwIndexAPIMethod1].Enabled)) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">Enabled: Received: FALSE, Expected: TRUE.</result>\r\n"));
                    goto FuncFailed;
                }
                else if ((dwIndex == 1) && (!pRoutingMethods[g_dwIndexAPIMethod1].Enabled)) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">Enabled: Received: TRUE, Expected: FALSE.</result>\r\n"));
                    goto FuncFailed;
                }

                if (lstrcmp(pRoutingMethods[g_dwIndexAPIMethod1].DeviceName, szDeviceName)!=0) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">DeviceName: Received: %s, Expected: %s.</result>\r\n"), pRoutingMethods[g_dwIndexAPIMethod1].DeviceName, szDeviceName);
                    goto FuncFailed;
                }

                if (lstrcmp(pRoutingMethods[g_dwIndexAPIMethod1].Guid, ROUTEAPI_METHOD_GUID2)!=0) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">Guid: Received: %s, Expected: %s.</result>\r\n"), pRoutingMethods[g_dwIndexAPIMethod1].Guid, ROUTEAPI_METHOD_GUID2);
                    goto FuncFailed;
                }

                if (lstrcmp(pRoutingMethods[g_dwIndexAPIMethod1].FriendlyName, ROUTEAPI_METHOD_FRIENDLYNAME2)!=0) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">FriendlyName: Received: %s, Expected: %s.</result>\r\n"), pRoutingMethods[g_dwIndexAPIMethod1].FriendlyName, ROUTEAPI_METHOD_FRIENDLYNAME2);
                    goto FuncFailed;
                }

                ExpandEnvironmentStrings(ROUTEAPI_EXTENSION_IMAGENAME, szRouteApiDll, sizeof(szRouteApiDll) / sizeof(TCHAR));
                if (lstrcmp(pRoutingMethods[g_dwIndexAPIMethod1].ExtensionImageName, szRouteApiDll)!=0) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">ExtensionImageName: Received: %s, Expected: %s.</result>\r\n"), pRoutingMethods[g_dwIndexAPIMethod1].ExtensionImageName, szRouteApiDll);
                    goto FuncFailed;
                }

                if (lstrcmp(pRoutingMethods[g_dwIndexAPIMethod1].ExtensionFriendlyName, ROUTEAPI_EXTENSION_FRIENDLYNAME)!=0) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">ExtensionFriendlyName: Received: %s, Expected: %s.</result>\r\n"), pRoutingMethods[g_dwIndexAPIMethod1].ExtensionFriendlyName, ROUTEAPI_EXTENSION_FRIENDLYNAME);
                    goto FuncFailed;
                }

                (*pnNumCasesPassed)++;
				dwFuncCasesPass++;
				fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
            }

FuncFailed:
            g_ApiInterface.FaxFreeBuffer(pRoutingMethods);
        }

        g_ApiInterface.FaxEnableRoutingMethod(hFaxPortHandle, ROUTEAPI_METHOD_GUID1, dwIndex ? FALSE : TRUE);
        g_ApiInterface.FaxEnableRoutingMethod(hFaxPortHandle, ROUTEAPI_METHOD_GUID2, dwIndex ? FALSE : TRUE);
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
    }
	

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxPortHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxPortHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxEnumRoutingMethods(NULL, &pRoutingMethods, &dwNumMethods)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxEnumRoutingMethods() returned TRUE.  This is an error.  FaxEnumRoutingMethods() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pRoutingMethods);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxEnumRoutingMethods() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pRoutingMethods = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pRoutingMethods = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxEnumRoutingMethods(hFaxPortHandle, NULL, &dwNumMethods)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxEnumRoutingMethods() returned TRUE.  This is an error.  FaxEnumRoutingMethods() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pRoutingMethods);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxEnumRoutingMethods() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("dwNumMethods = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"dwNumMethods = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxEnumRoutingMethods(hFaxPortHandle, &pRoutingMethods, NULL)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxEnumRoutingMethods() returned TRUE.  This is an error.  FaxEnumRoutingMethods() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pRoutingMethods);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxEnumRoutingMethods() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    // Disconnect from the fax port
    g_ApiInterface.FaxClose(hFaxPortHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxPortHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid hFaxPortHandle\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxEnumRoutingMethods(hFaxPortHandle, &pRoutingMethods, &dwNumMethods)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxEnumRoutingMethods() returned TRUE.  This is an error.  FaxEnumRoutingMethods() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pRoutingMethods);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxEnumRoutingMethods() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    HeapFree(g_hHeap, 0, szDeviceName);

//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> SERVER CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        // Enumerate the fax ports
//        if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
            // Disconnect from the fax server
  //          g_ApiInterface.FaxClose(hFaxSvcHandle);
    //        return;
      //  }

        //dwDeviceId = pFaxPortInfo[0].DeviceId;

        // Free the fax port info
        //g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);





        //if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
		//	fnWriteLogFile(TEXT("WHIS> ERROR: Can not open port %d, The error code is 0x%08x.\r\n"),dwDeviceId, GetLastError());
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
//            return;
  //      }
//
  //      (*pnNumCasesAttempted)++;

    //    fnWriteLogFile(TEXT("Remote hFaxPortHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
      //  if (!g_ApiInterface.FaxEnumRoutingMethods(hFaxPortHandle, &pRoutingMethods, &dwNumMethods)) {
        //    fnWriteLogFile(TEXT("FaxEnumRoutingMethods() failed.  The error code is 0x%08x.  This is an error.  FaxEnumRoutingMethods() should succeed.\r\n"), GetLastError());
        //}
        //else {
          //  g_ApiInterface.FaxFreeBuffer(pRoutingMethods);
//            (*pnNumCasesPassed)++;
  //      }


        // Disconnect from the fax port
    //    g_ApiInterface.FaxClose(hFaxPortHandle);

        // Disconnect from the fax server
//        g_ApiInterface.FaxClose(hFaxSvcHandle);
  //  }
fnWriteLogFile(TEXT("$$$ Summery for FaxEnumRoutingMethods, Attempt %d, Pass %d, Fail %d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}

VOID
fnFaxEnableRoutingMethod(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxEnableRoutingMethod()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE               hFaxSvcHandle;
    // hFaxPortHandle is the handle to a fax port
    HANDLE               hFaxPortHandle;
    // pFaxPortInfo is the pointer to the fax port info
    PFAX_PORT_INFO       pFaxPortInfo;
    // dwNumPorts is the number of fax ports
    DWORD                dwNumPorts;
    // dwDeviceId is the device id of the fax port
    DWORD                dwDeviceId;
    // pRoutingMethod is the pointer to the routing method data structures
    PFAX_ROUTING_METHOD  pRoutingMethods;
    // dwNumMethods is the number of routing methods
    DWORD                dwNumMethods;

    // szRouteApiDll is the route api dll
    TCHAR                szRouteApiDll[MAX_PATH];
    // hInstance is the handle to the instance of the route api dll
    HINSTANCE            hInstance;
    // FaxRouteDeviceEnable is the pointer to the FaxRouteDeviceEnable() function
    FARPROC              FaxRouteDeviceEnable;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxEnableRoutingMethod().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxEnableRoutingMethod\">"));

    ExpandEnvironmentStrings(ROUTEAPI_EXTENSION_IMAGENAME, szRouteApiDll, sizeof(szRouteApiDll) / sizeof(TCHAR));
    if (!lstrcmpi(ROUTEAPI_EXTENSION_IMAGENAME, szRouteApiDll)) {
        return;
    }

    hInstance = LoadLibrary((LPCTSTR) szRouteApiDll);
    if (!hInstance) {
        return;
    }

    FaxRouteDeviceEnable = (FARPROC) GetProcAddress(hInstance, "FaxRouteDeviceEnable");
    if (!FaxRouteDeviceEnable) {
        FreeLibrary(hInstance);
        return;
    }

	// Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    // Enumerate the fax ports
    if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not enum ports on server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    dwDeviceId = pFaxPortInfo[0].DeviceId;

    // Free the fax port info
    g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not open port %d, The error code is 0x%08x.\r\n"),dwDeviceId, GetLastError());
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        FreeLibrary(hInstance);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    // Enable the routing method
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxEnableRoutingMethod(hFaxPortHandle, ROUTEAPI_METHOD_GUID1, TRUE)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxEnableRoutingMethod() failed.  The error code is 0x%08x.  This is an error.  FaxEnableRoutingMethod() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!FaxRouteDeviceEnable(ROUTEAPI_METHOD_GUID1_W, dwDeviceId, -1)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Enabled: Received: FALSE, Expected: TRUE.</result>\r\n"));
        }
        else {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
        }
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    // Disable the routing method
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxEnableRoutingMethod(hFaxPortHandle, ROUTEAPI_METHOD_GUID1, FALSE)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxEnableRoutingMethod() failed.  The error code is 0x%08x.  This is an error.  FaxEnableRoutingMethod() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (FaxRouteDeviceEnable(ROUTEAPI_METHOD_GUID1_W, dwDeviceId, -1)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Enabled: Received: TRUE, Expected: FALSE.</result>\r\n"));
        }
        else {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
        }
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    FreeLibrary(hInstance);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxPortHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxPortHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxEnableRoutingMethod(NULL, ROUTEAPI_METHOD_GUID1, FALSE)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxEnableRoutingMethod() returned TRUE.  This is an error.  FaxEnableRoutingMethod() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxEnableRoutingMethod() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("ROUTEAPI_METHOD_GUID1 = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"ROUTEAPI_METHOD_GUID1 = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxEnableRoutingMethod(hFaxPortHandle, NULL, FALSE)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxEnableRoutingMethod() returned TRUE.  This is an error.  FaxEnableRoutingMethod() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxEnableRoutingMethod() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid ROUTEAPI_METHOD_GUID1.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid ROUTEAPI_METHOD_GUID1\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxEnableRoutingMethod(hFaxPortHandle, ROUTEAPI_INVALID_GUID, FALSE)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxEnableRoutingMethod() returned TRUE.  This is an error.  FaxEnableRoutingMethod() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).</result>\r\n"), ERROR_INVALID_DATA);
    }
    else if (GetLastError() != ERROR_INVALID_DATA) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxEnableRoutingMethod() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_DATA);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    // Disconnect from the fax port
    g_ApiInterface.FaxClose(hFaxPortHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxPortHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid hFaxPortHandle\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxEnableRoutingMethod(hFaxPortHandle, ROUTEAPI_METHOD_GUID1, FALSE)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxEnableRoutingMethod() returned TRUE.  This is an error.  FaxEnableRoutingMethod() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxEnableRoutingMethod() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> SERVER CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        // Enumerate the fax ports
        //if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //dwDeviceId = pFaxPortInfo[0].DeviceId;

        // Free the fax port info
        //g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

        //if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
//            return;
  //      }

    //    if (!g_ApiInterface.FaxEnumRoutingMethods(hFaxPortHandle, &pRoutingMethods, &dwNumMethods)) {
            // Disconnect from the fax port
      //      g_ApiInterface.FaxClose(hFaxPortHandle);
            // Disconnect from the fax server
        //    g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //(*pnNumCasesAttempted)++;

        //fnWriteLogFile(TEXT("Remote hFaxPortHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxEnableRoutingMethod(hFaxPortHandle, pRoutingMethods[g_dwIndexAPIMethod1].Guid, pRoutingMethods[g_dwIndexAPIMethod1].Enabled)) {
            //fnWriteLogFile(TEXT("FaxEnableRoutingMethod() failed.  The error code is 0x%08x.  This is an error.  FaxEnableRoutingMethod() should succeed.\r\n"), GetLastError());
        //}
        //else {
            //(*pnNumCasesPassed)++;
        //}

        //g_ApiInterface.FaxFreeBuffer(pRoutingMethods);

        // Disconnect from the fax port
        //g_ApiInterface.FaxClose(hFaxPortHandle);

        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxEnableRoutingMethod, Attempt %d, Pass %d, Fail %d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}

VOID
fnFaxGetRoutingInfo(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxGetRoutingInfo()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE               hFaxSvcHandle;
    // hFaxPortHandle is the handle to a fax port
    HANDLE               hFaxPortHandle;
    // pFaxPortInfo is the pointer to the fax port info
    PFAX_PORT_INFO       pFaxPortInfo;
    // dwNumPorts is the number of fax ports
    DWORD                dwNumPorts;
    // dwDeviceId is the device id of the fax port
    DWORD                dwDeviceId;
    // pRoutingMethod is the pointer to the routing method data structures
    PFAX_ROUTING_METHOD  pRoutingMethods;
    // dwNumMethods is the number of routing methods
    DWORD                dwNumMethods;
    BOOL                 bEnabled;

    // szRouteApiDll is the route api dll
    TCHAR                szRouteApiDll[MAX_PATH];
    // hInstance is the handle to the instance of the route api dll
    HINSTANCE            hInstance;
    // FaxRouteSetRoutingInfo is the pointer to the FaxRouteSetRoutingInfo() function
    FARPROC              FaxRouteSetRoutingInfo;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

    DWORD                dwGetRoutingInfo;
    DWORD                dwSetRoutingInfo;
    LPBYTE               RoutingInfo;
    DWORD                dwRoutingInfoSize;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxGetRoutingInfo().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxGetRoutingInfo\">"));

    ExpandEnvironmentStrings(ROUTEAPI_EXTENSION_IMAGENAME, szRouteApiDll, sizeof(szRouteApiDll) / sizeof(TCHAR));
    if (!lstrcmpi(ROUTEAPI_EXTENSION_IMAGENAME, szRouteApiDll)) {
        return;
    }

    hInstance = LoadLibrary((LPCTSTR) szRouteApiDll);
    if (!hInstance) {
        return;
    }

    FaxRouteSetRoutingInfo = (FARPROC) GetProcAddress(hInstance, "FaxRouteSetRoutingInfo");
    if (!FaxRouteSetRoutingInfo) {
        FreeLibrary(hInstance);
        return;
    } 


    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        FreeLibrary(hInstance);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    
	
	// Enumerate the fax ports
    if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not enum ports on server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        FreeLibrary(hInstance);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    dwDeviceId = pFaxPortInfo[0].DeviceId;

    // Free the fax port info
    g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not open port %d, The error code is 0x%08x.\r\n"),dwDeviceId, GetLastError());
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        FreeLibrary(hInstance);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    // Set the routing info
    dwSetRoutingInfo = ERROR_INVALID_PARAMETER;
    FaxRouteSetRoutingInfo(ROUTEAPI_METHOD_GUID1_W, dwDeviceId, (LPBYTE) &dwSetRoutingInfo, sizeof(DWORD));

    // Get the routing info
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxGetRoutingInfo(hFaxPortHandle, ROUTEAPI_METHOD_GUID1, &RoutingInfo, &dwRoutingInfoSize)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetRoutingInfo() failed.  The error code is 0x%08x.  This is an error.  FaxGetRoutingInfo() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        dwGetRoutingInfo = (DWORD) *(LPDWORD *) RoutingInfo;
        if (dwGetRoutingInfo != dwSetRoutingInfo) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">RoutingInfo: Received: 0x%08x, Expected: 0x%08x.</result>\r\n"), dwGetRoutingInfo, dwSetRoutingInfo);
        }
        else {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
        }

        g_ApiInterface.FaxFreeBuffer(RoutingInfo);
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    // Set the routing info
    FaxRouteSetRoutingInfo(ROUTEAPI_METHOD_GUID1_W, dwDeviceId, NULL, 0);

    // Get the routing info
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxGetRoutingInfo(hFaxPortHandle, ROUTEAPI_METHOD_GUID1, &RoutingInfo, &dwRoutingInfoSize)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetRoutingInfo() failed.  The error code is 0x%08x.  This is an error.  FaxGetRoutingInfo() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        dwGetRoutingInfo = (DWORD) *(LPDWORD *) RoutingInfo;
        if (dwGetRoutingInfo != 0) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">RoutingInfo: Received: 0x%08x, Expected: 0.</result>\r\n"), dwGetRoutingInfo);
        }
        else {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
        }

        g_ApiInterface.FaxFreeBuffer(RoutingInfo);
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    FreeLibrary(hInstance);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxPortHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxPortHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetRoutingInfo(NULL, ROUTEAPI_METHOD_GUID1, &RoutingInfo, &dwRoutingInfoSize)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetRoutingInfo() returned TRUE.  This is an error.  FaxGetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(RoutingInfo);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("ROUTEAPI_METHOD_GUID1 = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"ROUTEAPI_METHOD_GUID1 = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetRoutingInfo(hFaxPortHandle, NULL, &RoutingInfo, &dwRoutingInfoSize)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetRoutingInfo() returned TRUE.  This is an error.  FaxGetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(RoutingInfo);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid ROUTEAPI_METHOD_GUID1.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid ROUTEAPI_METHOD_GUID1\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetRoutingInfo(hFaxPortHandle, ROUTEAPI_INVALID_GUID, &RoutingInfo, &dwRoutingInfoSize)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetRoutingInfo() returned TRUE.  This is an error.  FaxGetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).</result>\r\n"), ERROR_INVALID_DATA);
        g_ApiInterface.FaxFreeBuffer(RoutingInfo);
    }
    else if (GetLastError() != ERROR_INVALID_DATA) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_DATA);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("RoutingInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"RoutingInfo = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetRoutingInfo(hFaxPortHandle, ROUTEAPI_METHOD_GUID1, NULL, &dwRoutingInfoSize)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetRoutingInfo() returned TRUE.  This is an error.  FaxGetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(RoutingInfo);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("RoutingInfoSize = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"RoutingInfoSize = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetRoutingInfo(hFaxPortHandle, ROUTEAPI_METHOD_GUID1, &RoutingInfo, NULL)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetRoutingInfo() returned TRUE.  This is an error.  FaxGetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(RoutingInfo);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    // Disconnect from the fax port
    g_ApiInterface.FaxClose(hFaxPortHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxPortHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid hFaxPortHandle\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetRoutingInfo(hFaxPortHandle, ROUTEAPI_METHOD_GUID1, &RoutingInfo, &dwRoutingInfoSize)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetRoutingInfo() returned TRUE.  This is an error.  FaxGetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(RoutingInfo);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    //if (szServerName) {
	//	fnWriteLogFile(TEXT("WHIS> SERVER CASE(s):\r\n"));
        // Connect to the fax server
      //  if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
        //    return;
//        }

        // Enumerate the fax ports
  //      if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
            // Disconnect from the fax server
    //        g_ApiInterface.FaxClose(hFaxSvcHandle);
      //      return;
//        }

  //      dwDeviceId = pFaxPortInfo[0].DeviceId;

        // Free the fax port info
    //    g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

      //  if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
            // Disconnect from the fax server
        //    g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //if (!g_ApiInterface.FaxEnumRoutingMethods(hFaxPortHandle, &pRoutingMethods, &dwNumMethods)) {
            // Disconnect from the fax port
          //  g_ApiInterface.FaxClose(hFaxPortHandle);
            // Disconnect from the fax server
//            g_ApiInterface.FaxClose(hFaxSvcHandle);
  //          return;
    //    }

      //  (*pnNumCasesAttempted)++;

//        fnWriteLogFile(TEXT("Remote hFaxPortHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
  //      if (!g_ApiInterface.FaxGetRoutingInfo(hFaxPortHandle, pRoutingMethods[g_dwIndexAPIMethod1].Guid, &RoutingInfo, &dwRoutingInfoSize)) {
    //        fnWriteLogFile(TEXT("FaxGetRoutingInfo() failed.  The error code is 0x%08x.  This is an error.  FaxGetRoutingInfo() should succeed.\r\n"), GetLastError());
      //  }
//        else {
  //          g_ApiInterface.FaxFreeBuffer(RoutingInfo);
    //        (*pnNumCasesPassed)++;

      //  }

        //g_ApiInterface.FaxFreeBuffer(pRoutingMethods);

        // Disconnect from the fax port
        //g_ApiInterface.FaxClose(hFaxPortHandle);

        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxGetRoutingInfo, Attempt %d, Pass %d, Fail %d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}

VOID
fnFaxSetRoutingInfo(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxSetRoutingInfo()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE               hFaxSvcHandle;
    // hFaxPortHandle is the handle to a fax port
    HANDLE               hFaxPortHandle;
    // pFaxPortInfo is the pointer to the fax port info
    PFAX_PORT_INFO       pFaxPortInfo;
    // dwNumPorts is the number of fax ports
    DWORD                dwNumPorts;
    // dwDeviceId is the device id of the fax port
    DWORD                dwDeviceId;
    // pRoutingMethod is the pointer to the routing method data structures
    PFAX_ROUTING_METHOD  pRoutingMethods;
    // dwNumMethods is the number of routing methods
    DWORD                dwNumMethods;
    BOOL                 bEnabled;

    // szRouteApiDll is the route api dll
    TCHAR                szRouteApiDll[MAX_PATH];
    // hInstance is the handle to the instance of the route api dll
    HINSTANCE            hInstance;
    // FaxRouteGetRoutingInfo is the pointer to the FaxRouteGetRoutingInfo() function
    FARPROC              FaxRouteGetRoutingInfo;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

    DWORD                dwGetRoutingInfo;
    DWORD                dwSetRoutingInfo;
    LPBYTE               RoutingInfo;
    DWORD                dwRoutingInfoSize;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxSetRoutingInfo().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxSetRoutingInfo\">"));

    ExpandEnvironmentStrings(ROUTEAPI_EXTENSION_IMAGENAME, szRouteApiDll, sizeof(szRouteApiDll) / sizeof(TCHAR));
    if (!lstrcmpi(ROUTEAPI_EXTENSION_IMAGENAME, szRouteApiDll)) {
        return;
    }

    hInstance = LoadLibrary((LPCTSTR) szRouteApiDll);
    if (!hInstance) {
        return;
    }

    FaxRouteGetRoutingInfo = (FARPROC) GetProcAddress(hInstance, "FaxRouteGetRoutingInfo");
    if (!FaxRouteGetRoutingInfo) {
        FreeLibrary(hInstance);
        return;
    }

	// Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    // Enumerate the fax ports
    if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not enum ports on server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }


    dwDeviceId = pFaxPortInfo[0].DeviceId;

    // Free the fax port info
    g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not open port %d, The error code is 0x%08x.\r\n"),dwDeviceId, GetLastError());
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        FreeLibrary(hInstance);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    // Set the routing info
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

    dwSetRoutingInfo = ERROR_INVALID_PARAMETER;
    if (!g_ApiInterface.FaxSetRoutingInfo(hFaxPortHandle, ROUTEAPI_METHOD_GUID1, (LPBYTE) &dwSetRoutingInfo, sizeof(DWORD))) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetRoutingInfo() failed.  The error code is 0x%08x.  This is an error.  FaxSetRoutingInfo() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        FaxRouteGetRoutingInfo(ROUTEAPI_METHOD_GUID1_W, dwDeviceId, &dwGetRoutingInfo, NULL);

        if (dwGetRoutingInfo != dwSetRoutingInfo) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">RoutingInfo: Received: 0x%08x, Expected: 0x%08x.</result>\r\n"), dwGetRoutingInfo, dwSetRoutingInfo);
        }
        else {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
        }
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    FreeLibrary(hInstance);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("hFaxPortHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxPortHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetRoutingInfo(NULL, ROUTEAPI_METHOD_GUID1, (LPBYTE) &dwSetRoutingInfo, sizeof(DWORD))) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetRoutingInfo() returned TRUE.  This is an error.  FaxSetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("ROUTEAPI_METHOD_GUID1 = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"ROUTEAPI_METHOD_GUID1 = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetRoutingInfo(hFaxPortHandle, NULL, (LPBYTE) &dwSetRoutingInfo, sizeof(DWORD))) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetRoutingInfo() returned TRUE.  This is an error.  FaxSetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid ROUTEAPI_METHOD_GUID1.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid ROUTEAPI_METHOD_GUID1\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetRoutingInfo(hFaxPortHandle, ROUTEAPI_INVALID_GUID, (LPBYTE) &dwSetRoutingInfo, sizeof(DWORD))) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetRoutingInfo() returned TRUE.  This is an error.  FaxSetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).</result>\r\n"), ERROR_INVALID_DATA);
    }
    else if (GetLastError() != ERROR_INVALID_DATA) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_DATA);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    // Disconnect from the fax port
    g_ApiInterface.FaxClose(hFaxPortHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxPortHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid hFaxPortHandle\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetRoutingInfo(hFaxPortHandle, ROUTEAPI_METHOD_GUID1, (LPBYTE) &dwSetRoutingInfo, sizeof(DWORD))) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetRoutingInfo() returned TRUE.  This is an error.  FaxSetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetRoutingInfo() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> SERVER CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        // Enumerate the fax ports
//        if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
            // Disconnect from the fax server
  //          g_ApiInterface.FaxClose(hFaxSvcHandle);
    //        return;
        //}

        //dwDeviceId = pFaxPortInfo[0].DeviceId;

        // Free the fax port info
        //g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

        //if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
//            return;
  //      }

    //    if (!g_ApiInterface.FaxEnumRoutingMethods(hFaxPortHandle, &pRoutingMethods, &dwNumMethods)) {
      //      // Disconnect from the fax port
        //    g_ApiInterface.FaxClose(hFaxPortHandle);
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

//        if (!g_ApiInterface.FaxGetRoutingInfo(hFaxPortHandle, pRoutingMethods[g_dwIndexAPIMethod1].Guid, &RoutingInfo, &dwRoutingInfoSize)) {
  //          g_ApiInterface.FaxFreeBuffer(pRoutingMethods);
            // Disconnect from the fax port
    //        g_ApiInterface.FaxClose(hFaxPortHandle);
            // Disconnect from the fax server
      //      g_ApiInterface.FaxClose(hFaxSvcHandle);
        //}

        //(*pnNumCasesAttempted)++;
        //fnWriteLogFile(TEXT("Remote hFaxPortHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);

        //if (!g_ApiInterface.FaxSetRoutingInfo(hFaxPortHandle, pRoutingMethods[g_dwIndexAPIMethod1].Guid, RoutingInfo, dwRoutingInfoSize)) {
            //fnWriteLogFile(TEXT("FaxSetRoutingInfo() failed.  The error code is 0x%08x.  This is an error.  FaxSetRoutingInfo() should succeed.\r\n"), GetLastError());
        //}
        //else {
          //  (*pnNumCasesPassed)++;

        //}

        //g_ApiInterface.FaxFreeBuffer(RoutingInfo);

        //g_ApiInterface.FaxFreeBuffer(pRoutingMethods);

        // Disconnect from the fax port
        //g_ApiInterface.FaxClose(hFaxPortHandle);

        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxSetRoutingInfo, Attempt %d, Pass %d, Fail %d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}


// count number of methods, return by referance: number of methods, index of API method 1/2 (if not found, their index will be 0)
BOOL
fnWhisFaxCountRoutingMethods(
    LPCTSTR  szServerName,
	PDWORD pdwMethodsCount,			// number of methods
	PDWORD pdwIndexAPIMethod1,		// index of API-Method 1
	PDWORD pdwIndexAPIMethod2		// index of API-Method 2

)
/*++

Routine Description:

   Count global methods 

Return Value:

Succeed/Fail


--*/
{
	
    // hFaxSvcHandle is the handle to the fax server
    HANDLE               hFaxSvcHandle;
    // hFaxPortHandle is the handle to a fax port
    HANDLE               hFaxPortHandle;
    // pFaxPortInfo is the pointer to the fax port info
    PFAX_PORT_INFO       pFaxPortInfo;

	// pRoutingInfo is the pointer to the global routing structures
    PFAX_GLOBAL_ROUTING_INFO  pRoutingInfo;

		// dwNumPorts is the number of fax ports
    DWORD                dwNumPorts;
    // dwDeviceId is the device id of the fax port
    DWORD                dwDeviceId;
    // szDeviceName is the device name of the fax port
    LPTSTR               szDeviceName;
    // pRoutingMethod is the pointer to the routing method data structures
    PFAX_ROUTING_METHOD  pRoutingMethods;
    // dwNumMethods is the number of routing methods
    DWORD                dwNumMethods;
	
	// szRouteApiDll is the route api dll
    TCHAR                szRouteApiDll[MAX_PATH];
	// index
    DWORD                dwIndex;
	// index for enumerating methods
	DWORD				 dwIndexAPI;

	fnWriteLogFile(TEXT("<function name=\"_utils(CountRoutingMethods)\">"));

	
    fnWriteLogFile(TEXT("WHIS> UTIL SERVICE: Counting global methods...\r\n"));



	



    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> UTIL FUNCTION ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		(*pdwMethodsCount)=0;
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return FALSE;
    }
	else	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    // Enumerate the fax ports
    if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> UTIL FUNCTION ERROR: Can not enum ports on server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		(*pdwMethodsCount)=0;
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return FALSE;
    }

    // allocate heap for device name
	dwDeviceId = pFaxPortInfo[0].DeviceId;
    szDeviceName = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(pFaxPortInfo[0].DeviceName) + 1) * sizeof(TCHAR));
    lstrcpy(szDeviceName, pFaxPortInfo[0].DeviceName);

    // Free the fax port info
    g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

    // open port
	if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
		fnWriteLogFile(TEXT("WHIS> UTIL FUNCTION ERROR: Can not open port %d, The error code is 0x%08x.\r\n"),dwDeviceId, GetLastError());
		HeapFree(g_hHeap, 0, szDeviceName);
		g_ApiInterface.FaxClose(hFaxSvcHandle);
		(*pdwMethodsCount)=0;
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
		return FALSE;
    }

   	// enumarate global methods
	if (!g_ApiInterface.FaxEnumGlobalRoutingInfo(hFaxSvcHandle, &pRoutingInfo, &dwNumMethods)) {
        fnWriteLogFile(TEXT("WHIS> UTIL FUNCTION ERROR: Could not enum global routing extensions, The error code is 0x%08x.  This is an error.  FaxEnumGlobalRoutingInfo() should succeed.\r\n"), GetLastError());
		HeapFree(g_hHeap, 0, szDeviceName);
		g_ApiInterface.FaxClose(hFaxSvcHandle);
		(*pdwMethodsCount)=0;
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
		return FALSE;
    }

	// get the index number of the 1st API extension and the 2nd API extension
	for (dwIndexAPI=0;dwIndexAPI<g_dwNumMethods;dwIndexAPI++)	{
		if (lstrcmp(pRoutingInfo[dwIndexAPI].Guid, ROUTEAPI_METHOD_GUID1)==0) {
		(*pdwIndexAPIMethod1)=dwIndexAPI;
		}
		
		if (lstrcmp(pRoutingInfo[dwIndexAPI].Guid, ROUTEAPI_METHOD_GUID2)==0) {
		(*pdwIndexAPIMethod2)=dwIndexAPI;
		}
	}
	
	HeapFree(g_hHeap, 0, szDeviceName);
	g_ApiInterface.FaxClose(hFaxSvcHandle);
	(*pdwMethodsCount)=dwNumMethods;
	fnWriteLogFile(TEXT("\n\t<summary attempt=\"0\" pass=\"0\" fail=\"0\"></summary>\n"));
	fnWriteLogFile(TEXT("\n\t</function>"));
	return TRUE;
}










BOOL WINAPI
FaxAPIDllTest(
	LPCWSTR  szWhisPhoneNumberW,
	LPCSTR   szWhisPhoneNumberA,
    LPCWSTR  szServerNameW,
    LPCSTR   szServerNameA,
    UINT     nNumCasesLocal,
    UINT     nNumCasesServer,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	DWORD	 dwTestMode
)
{
    LPCTSTR  szServerName;
    UINT     nNumCases;
	DWORD	 dwNumMethods;
	DWORD	dwIndexAPIMethod1=0;
	DWORD	dwIndexAPIMethod2=0;

#ifdef UNICODE
    szServerName = szServerNameW;
#else
    szServerName = szServerNameA;
#endif

    if (szServerName) {
        nNumCases = nNumCasesServer;
		fnWriteLogFile(TEXT("WHIS> REMOTE SERVER MODE:\r\n"));
    }
    else {
        nNumCases = nNumCasesLocal;
    }

	
	
	// routing extension
	// -----------------

	// count number of global methods before adding API methods
	
	if (!fnWhisFaxCountRoutingMethods(szServerName,&dwNumMethods,&dwIndexAPIMethod1,&dwIndexAPIMethod2))	{
		fnWriteLogFile(TEXT("Could not count routing extensions, error code is The error code is 0x%08x\r\n"),GetLastError());
	}
	
	fnWriteLogFile(TEXT("WHIS> number of global methods: %d.\r\n"),dwNumMethods);
	fnWriteLogFile(TEXT("WHIS> 1st API Method index: %d.\r\n"),dwIndexAPIMethod1);
	fnWriteLogFile(TEXT("WHIS> 2nd API Method index: %d.\r\n"),dwIndexAPIMethod2);


									// this program assumes that
	g_dwNumMethods=dwNumMethods+2;  // global number of methods should be 2 more then current found 
									// (2 more extension will be added in the next 2 lines of this section)
							
	// FaxRegisterRoutingExtension()

    fnFaxRegisterRoutingExtension(szServerName, pnNumCasesAttempted, pnNumCasesPassed);
	
	// add route api extension DLL
	fnAddRouteApiExtension();
    
	// stop the service
	if (!fnStopFaxSvc()) {
        fnWriteLogFile(TEXT("Could not stop the Fax Service.\r\n"));
	    return FALSE;
    }

	// re-count number of global methods (new value should be 2 more then previous count)
	if (!fnWhisFaxCountRoutingMethods(szServerName,&dwNumMethods,&dwIndexAPIMethod1,&dwIndexAPIMethod2))	{
		fnWriteLogFile(TEXT("Could not count routing extensions, error code is The error code is 0x%08x\r\n"),GetLastError());
	}

	fnWriteLogFile(TEXT("WHIS> number of global methods: %d.\r\n"),dwNumMethods);
	fnWriteLogFile(TEXT("WHIS> 1st API Method index: %d.\r\n"),dwIndexAPIMethod1);
	fnWriteLogFile(TEXT("WHIS> 2nd API Method index: %d.\r\n"),dwIndexAPIMethod2);

	
	// test if there are 2 new methods to do the test on
	if (g_dwNumMethods==dwNumMethods && dwIndexAPIMethod1 > 0 && dwIndexAPIMethod2 > 0)	{

		


		g_dwIndexAPIMethod1=dwIndexAPIMethod1;
		g_dwIndexAPIMethod2=dwIndexAPIMethod2;
	
		 
		// FaxEnumGlobalRoutingInfo()
		fnFaxEnumGlobalRoutingInfo(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

		// FaxSetGlobalRoutingInfo()
		if (dwTestMode == WHIS_TEST_MODE_LIMITS)	{
			fnFaxSetGlobalRoutingInfo(szServerName, pnNumCasesAttempted, pnNumCasesPassed,TRUE);
		}
		else	{
			fnFaxSetGlobalRoutingInfo(szServerName, pnNumCasesAttempted, pnNumCasesPassed,FALSE);
		}


		// FaxEnumRoutingMethods()
		fnFaxEnumRoutingMethods(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

		// FaxEnableRoutingMethod()
		fnFaxEnableRoutingMethod(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

		// FaxGetRoutingInfo()
		fnFaxGetRoutingInfo(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

		// FaxSetRoutingInfo()
		fnFaxSetRoutingInfo(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

		if (!fnStopFaxSvc()) {
			fnWriteLogFile(TEXT("Could not stop the Fax Service.\r\n"));
			return FALSE;
		}
	} // of do actual routeext testing
	else	{
		// incorrect number of methods, or 0 indexes for the API methods
		fnWriteLogFile(TEXT("WHIS> ERROR: Incorrect Methods Configuration, WILL NOT TEST\r\n"));
	}


	// remove API extension
	fnRemoveRouteApiExtension();
	

	// service provider
	// ----------------

	// FaxRegisterServiceProvider()
    fnFaxRegisterServiceProvider(szServerName, pnNumCasesAttempted, pnNumCasesPassed);
	


    if ((*pnNumCasesAttempted == nNumCases) && (*pnNumCasesPassed == *pnNumCasesAttempted)) {
        return TRUE;
    }
    else {
        return FALSE;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legacywin32_xml\portsapi\portsapi.c ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

  confgapi.c

Abstract:

  PortsApi: Fax API Test Dll: Client Port Configuration APIs
    1) FaxEnumPorts()
    2) FaxOpenPort()
    3) FaxGetPort()
    4) FaxSetPort()
    5) FaxGetDeviceStatus()

Author:

  Steven Kehrli (steveke) 8/28/1998

--*/

/*++

  Whistler Version:

  Lior Shmueli (liors) 23/11/2000

 ++*/

#include <wtypes.h>

#include "dllapi.h"

// g_hHeap is the handle to the heap
HANDLE           g_hHeap = NULL;
// g_ApiInterface is the API_INTERFACE structure
API_INTERFACE    g_ApiInterface;
// fnWriteLogFile is the pointer to the function to write a string to the log file
PFNWRITELOGFILE  fnWriteLogFile = NULL;

#define FAXDEVICES_REGKEY    TEXT("Software\\Microsoft\\Fax\\Devices")
#define DEVICEID_REGVALUE    TEXT("Permanent Lineid")
#define FLAGS_REGVALUE       TEXT("Flags")
#define RINGS_REGVALUE       TEXT("Rings")
#define PRIORITY_REGVALUE    TEXT("Priority")
#define DEVICENAME_REGVALUE  TEXT("Device Name")
#define TSID_REGVALUE        TEXT("TSID")
#define CSID_REGVALUE        TEXT("CSID")

DWORD
DllEntry(
    HINSTANCE  hInstance,
    DWORD      dwReason,
    LPVOID     pContext
)
/*++

Routine Description:

  DLL entry point

Arguments:

  hInstance - handle to the module
  dwReason - indicates the reason for being called
  pContext - context

Return Value:

  TRUE on success

--*/
{
    return TRUE;
}

VOID WINAPI
FaxAPIDllInit(
    HANDLE            hHeap,
    API_INTERFACE     ApiInterface,
    PFNWRITELOGFILEW  pfnWriteLogFileW,
    PFNWRITELOGFILEA  pfnWriteLogFileA
)
{
    // Set g_hHeap
    g_hHeap = hHeap;
    // Set g_ApiInterface
    g_ApiInterface = ApiInterface;
#ifdef UNICODE
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileW;
#else
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileA;
#endif

    return;
}

BOOL
fnRegQueryDword(
    HKEY     hKey,
    LPTSTR   szValue,
    LPDWORD  pdwData
)
/*++

Routine Description:

  Queries a Registry data as a REG_DWORD

Arguments:

  hKey - handle to the Registry key
  szValue - value to be queried
  pdwData - pointer to the data to be queried

Return Value:

  TRUE on success

--*/
{
    DWORD  cb;

    cb = sizeof(DWORD);
    if (RegQueryValueEx(hKey, szValue, NULL, NULL, (PBYTE) pdwData, &cb)) {
        *pdwData = 0;
        return FALSE;
    }

    return TRUE;
}

BOOL
fnRegQuerySz(
    HKEY    hKey,
    LPTSTR  szValue,
    LPTSTR  *pszData
)
/*++

Routine Description:

  Queries a Registry data as a REG_SZ

Arguments:

  hKey - handle to the Registry key
  szValue - value to be queried
  pszData - pointer to the data to be queried

Return Value:

  TRUE on success

--*/
{
    DWORD  cb;

    cb = 0;
    // Determine the memory required by pszData
    if (RegQueryValueEx(hKey, szValue, NULL, NULL, NULL, &cb)) {
        return FALSE;
    }

    if (!cb) {
        *pszData = NULL;
        return TRUE;
    }

    // Allocate the memory for pszData
    *pszData = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, cb);

    if (RegQueryValueEx(hKey, szValue, NULL, NULL, (PBYTE) *pszData, &cb)) {
        HeapFree(g_hHeap, 0, *pszData);
        *pszData = NULL;
        return FALSE;
    }

    return TRUE;
}

BOOL
fnVerifyPorts(
    PFAX_PORT_INFO  pFaxPortInfo,
    DWORD           dwNumPorts
)
/*++

Routine Description:

  Verifies the fax port info vs. the registry

Arguments:

  pFaxPortInfo - pointer to the fax port info
  dwNumPorts - number of fax ports

Return Value:

  None

--*/
{
    // hFaxDevicesKey is the handle to the fax devices registry key
    HKEY    hFaxDevicesKey;
    // hFaxPortKey is the handle to the fax port registry key
    HKEY    hFaxPortKey;
    // szPortKey is the name of the fax port registry key
    TCHAR   szPortKey[9];
    // szValue is the registry value (REG_SZ)
    LPTSTR  szValue;
    // dwValue is the registry value (REG_DWORD)
    DWORD   dwValue;

    DWORD   dwIndex;

    if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, FAXDEVICES_REGKEY, 0, KEY_ALL_ACCESS, &hFaxDevicesKey)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not open the Registry Key %s, ec = 0x%08x.  This is an error.</result>\r\n"), FAXDEVICES_REGKEY, GetLastError());
        goto RegFailed0;
    }

    for (dwIndex = 0; dwIndex < dwNumPorts; dwIndex++) {
        // Initialize the string representation of the DeviceId
        ZeroMemory(szPortKey, sizeof(szPortKey));
        // Set the string representation of the DeviceId
        wsprintf(szPortKey, TEXT("%08u"), pFaxPortInfo[dwIndex].DeviceId);

        if (RegOpenKeyEx(hFaxDevicesKey, szPortKey, 0, KEY_ALL_ACCESS, &hFaxPortKey)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not open the Registry Key %s, ec = 0x%08x.  This is an error.</result>\r\n"), szPortKey, GetLastError());
            goto RegFailed1;
        }

        if (pFaxPortInfo[dwIndex].SizeOfStruct != sizeof(FAX_PORT_INFO)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">SizeOfStruct: Received: %d, Expected: %d.  This is an error.</result>\r\n"), pFaxPortInfo[dwIndex].SizeOfStruct, sizeof(FAX_PORT_INFO));
            goto RegFailed2;
        }

        if (!fnRegQueryDword(hFaxPortKey, DEVICEID_REGVALUE, &dwValue)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.  This is an error.</result>\r\n"), DEVICEID_REGVALUE, GetLastError());
            goto RegFailed2;
        }
        if (pFaxPortInfo[dwIndex].DeviceId != dwValue) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">DeviceId: Received: 0x%08x, Expected: 0x%08x.  This is an error.</result>\r\n"), dwValue, pFaxPortInfo[dwIndex].DeviceId);
            goto RegFailed2;
        }

        if (!fnRegQueryDword(hFaxPortKey, FLAGS_REGVALUE, &dwValue)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.  This is an error.</result>\r\n"), FLAGS_REGVALUE, GetLastError());
            goto RegFailed2;
        }
        if (pFaxPortInfo[dwIndex].Flags != dwValue) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Flags: Received: %d, Expected: %d.  This is an error.</result>\r\n"), dwValue, pFaxPortInfo[dwIndex].Flags);
            goto RegFailed2;
        }

        if (!fnRegQueryDword(hFaxPortKey, RINGS_REGVALUE, &dwValue)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.  This is an error.</result>\r\n"), RINGS_REGVALUE, GetLastError());
            goto RegFailed2;
        }
        if (pFaxPortInfo[dwIndex].Rings != dwValue) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Rings: Received: %d, Expected: %d.  This is an error.</result>\r\n"), dwValue, pFaxPortInfo[dwIndex].Rings);
            goto RegFailed2;
        }

        if (!fnRegQueryDword(hFaxPortKey, PRIORITY_REGVALUE, &dwValue)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.  This is an error.</result>\r\n"), PRIORITY_REGVALUE, GetLastError());
            goto RegFailed2;
        }
        if (pFaxPortInfo[dwIndex].Priority != dwValue) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Priority: Received: %d, Expected: %d.  This is an error.</result>\r\n"), dwValue, pFaxPortInfo[dwIndex].Priority);
            goto RegFailed2;
        }

        if (!fnRegQuerySz(hFaxPortKey, DEVICENAME_REGVALUE, &szValue)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.  This is an error.</result>\r\n"), DEVICENAME_REGVALUE, GetLastError());
            goto RegFailed2;
        }
        if (lstrcmp(pFaxPortInfo[dwIndex].DeviceName, szValue)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">DeviceName: Received: %s, Expected: %s.  This is an error.</result>\r\n"), szValue, pFaxPortInfo[dwIndex].DeviceName);
            if (szValue) {
                HeapFree(g_hHeap, 0, szValue);
            }
            goto RegFailed2;
        }
        if (szValue) {
            HeapFree(g_hHeap, 0, szValue);
        }

        if (!fnRegQuerySz(hFaxPortKey, TSID_REGVALUE, &szValue)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.  This is an error.</result>\r\n"), TSID_REGVALUE, GetLastError());
            goto RegFailed2;
        }
        if (lstrcmp(pFaxPortInfo[dwIndex].Tsid, szValue)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Tsid: Received: %s, Expected: %s.  This is an error.</result>\r\n"), szValue, pFaxPortInfo[dwIndex].Tsid);
            if (szValue) {
                HeapFree(g_hHeap, 0, szValue);
            }
            goto RegFailed2;
        }
        if (szValue) {
            HeapFree(g_hHeap, 0, szValue);
        }

        if (!fnRegQuerySz(hFaxPortKey, CSID_REGVALUE, &szValue)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.  This is an error.</result>\r\n"), CSID_REGVALUE, GetLastError());
            goto RegFailed2;
        }
        if (lstrcmp(pFaxPortInfo[dwIndex].Csid, szValue)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Csid: Received: %s, Expected: %s.  This is an error.</result>\r\n"), szValue, pFaxPortInfo[dwIndex].Csid);
            if (szValue) {
                HeapFree(g_hHeap, 0, szValue);
            }
            goto RegFailed2;
        }
        if (szValue) {
            HeapFree(g_hHeap, 0, szValue);
        }

        RegCloseKey(hFaxPortKey);
    }

    RegCloseKey(hFaxDevicesKey);

    return TRUE;

RegFailed2:
    RegCloseKey(hFaxPortKey);

RegFailed1:
    RegCloseKey(hFaxDevicesKey);

RegFailed0:
    return FALSE;
}

VOID
fnFaxEnumPorts(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxEnumPorts()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE          hFaxSvcHandle;
    // pFaxPortInfo is the pointer to the fax port info
    PFAX_PORT_INFO  pFaxPortInfo;
    // dwNumPorts is the number of fax ports
    DWORD           dwNumPorts;

    DWORD           dwIndex;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxEnumPorts().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxEnumPorts\">"));



 
    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    for (dwIndex = 0; dwIndex < 2; dwIndex++) {
        // Enumerate the fax ports
        (*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

        fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

        if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxEnumPorts() failed.  The error code is 0x%08x.  This is an error.  FaxEnumPorts() should succeed.</result>\r\n"), GetLastError());
        }
        else {
            if (pFaxPortInfo == NULL) {
                fnWriteLogFile(TEXT("\n\t<result value=\"0\">pFaxPortInfo is NULL.  This is an error.  pFaxPortInfo should not be NULL.</result>\r\n"));
            }

            if (dwNumPorts == 0) {
                fnWriteLogFile(TEXT("\n\t<result value=\"0\">dwNumPorts is 0.  This is an error.  dwNumPorts should not be 0.</result>\r\n"));
            }

            if ((pFaxPortInfo != NULL) && (dwNumPorts != 0)) {
                if (fnVerifyPorts(pFaxPortInfo, dwNumPorts)) {
                    (*pnNumCasesPassed)++;
					dwFuncCasesPass++;
					fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
                }
            }

            g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
        }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
    }
	

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxEnumPorts(NULL, &pFaxPortInfo, &dwNumPorts)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxEnumPorts() returned TRUE.  This is an error.  FaxEnumPorts() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxEnumPorts() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pFaxPortInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxPortInfo = NULL\" id=\"%d\">"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, NULL, &dwNumPorts)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxEnumPorts() returned TRUE.  This is an error.  FaxEnumPorts() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxEnumPorts() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("dwNumPorts = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"dwNumPorts = NULL\" id=\"%d\">"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, NULL)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxEnumPorts() returned TRUE.  This is an error.  FaxEnumPorts() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxEnumPorts() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid hFaxSvcHandle\" id=\"%d\">"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxEnumPorts() returned TRUE.  This is an error.  FaxEnumPorts() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxEnumPorts() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

 //   if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
          //  fnWriteLogFile(TEXT("FaxEnumPorts() failed.  The error code is 0x%08x.  This is an error.  FaxEnumPorts() should succeed.\r\n"), GetLastError());
        //}
        //else {
          //  g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
//            (*pnNumCasesPassed)++;
//			dwFuncCasesPass++;
  //      }

        // Disconnect from the fax server
    //    g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxEnumPorts, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}

VOID
fnFaxOpenPort(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxOpenPort()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE          hFaxSvcHandle;
    // hFaxPortHandle is the handle to a fax port
    HANDLE          hFaxPortHandle;
    // hFaxPortHandle2 is the second handle to a fax port
    HANDLE          hFaxPortHandle2;
    // pFaxPortInfo is the pointer to the fax port info
    PFAX_PORT_INFO  pFaxPortInfo;
    // dwNumPorts is the number of fax ports
    DWORD           dwNumPorts;
    // dwDeviceId is the device id of the fax port
    DWORD           dwDeviceId;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxOpenPort().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxOpenPort\">"));
	


    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    // Enumerate the fax ports
    if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not enumerate ports on server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    dwDeviceId = pFaxPortInfo[0].DeviceId;

    // Free the fax port info
    g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

    // Open the fax port
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (PORT_OPEN_QUERY).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (PORT_OPEN_QUERY)\" id=\"%d\">"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxOpenPort() failed.  The error code is 0x%08x.  This is an error.  FaxOpenPort() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (hFaxPortHandle == NULL) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">hFaxPortHandle is NULL.  This is an error.  hFaxPortHandle should not be NULL.</result>\r\n"));
        }
        else {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
			

            (*pnNumCasesAttempted)++;
			dwFuncCasesAtt++;

            fnWriteLogFile(TEXT("hFaxPortHandle already open (PORT_OPEN_QUERY).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
			fnWriteLogFile(TEXT("\n\t<case name=\"hFaxPortHandle already open (PORT_OPEN_QUERY)\" id=\"%d\">"), *pnNumCasesAttempted);
            if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle2)) {
                fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxOpenPort() failed.  The error code is 0x%08x.  This is an error.  FaxOpenPort() should succeed.</result>\r\n"), GetLastError());
            }
            else {
                g_ApiInterface.FaxClose(hFaxPortHandle2);
                (*pnNumCasesPassed)++;
				dwFuncCasesPass++;
				fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
            }
			fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

            (*pnNumCasesAttempted)++;
			dwFuncCasesAtt++;

            fnWriteLogFile(TEXT("hFaxPortHandle already open (PORT_OPEN_MODIFY).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
			fnWriteLogFile(TEXT("\n\t<case name=\"hFaxPortHandle already open (PORT_OPEN_MODIFY)\" id=\"%d\">"), *pnNumCasesAttempted);
            if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_MODIFY, &hFaxPortHandle2)) {
                fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxOpenPort() failed.  The error code is 0x%08x.  This is an error.  FaxOpenPort() should succeed.</result>\r\n"), GetLastError());
            }
            else {
                g_ApiInterface.FaxClose(hFaxPortHandle2);
                (*pnNumCasesPassed)++;
				dwFuncCasesPass++;
				fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
            }
			fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
            g_ApiInterface.FaxClose(hFaxPortHandle);
        }
	}
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    // Open the fax port
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (PORT_OPEN_MODIFY).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (PORT_OPEN_MODIFY)\" id=\"%d\">"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_MODIFY, &hFaxPortHandle)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxOpenPort() failed.  The error code is 0x%08x.  This is an error.  FaxOpenPort() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (hFaxPortHandle == NULL) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">hFaxPortHandle is NULL.  This is an error.  hFaxPortHandle should not be NULL.</result>\r\n"));
			
        }
        else {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
			
			

            (*pnNumCasesAttempted)++;
			dwFuncCasesAtt++;

            fnWriteLogFile(TEXT("hFaxPortHandle already open (PORT_OPEN_QUERY).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
			fnWriteLogFile(TEXT("\n\t<case name=\"hFaxPortHandle already open (PORT_OPEN_QUERY)\" id=\"%d\">"), *pnNumCasesAttempted);
            if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle2)) {
                fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxOpenPort() failed.  The error code is 0x%08x.  This is an error.  FaxOpenPort() should succeed.</result>\r\n"), GetLastError());
            }
            else {
                g_ApiInterface.FaxClose(hFaxPortHandle2);
                (*pnNumCasesPassed)++;
				dwFuncCasesPass++;
				fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
            }
			fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

            (*pnNumCasesAttempted)++;
			dwFuncCasesAtt++;

            fnWriteLogFile(TEXT("hFaxPortHandle already open (PORT_OPEN_MODIFY).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
			fnWriteLogFile(TEXT("\n\t<case name=\"hFaxPortHandle already open (PORT_OPEN_MODIFY)\" id=\"%d\">"), *pnNumCasesAttempted);
            if (g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_MODIFY, &hFaxPortHandle2)) {
                fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxOpenPort() returned TRUE.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
                g_ApiInterface.FaxClose(hFaxPortHandle2);
            }
            else if (GetLastError() != ERROR_INVALID_HANDLE) {
                fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
            }
            else {
                (*pnNumCasesPassed)++;
				dwFuncCasesPass++;
				fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
            }
			g_ApiInterface.FaxClose(hFaxPortHandle);    
			fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
        }
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxOpenPort(NULL, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxOpenPort() returned TRUE.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxClose(hFaxPortHandle);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("dwDeviceId = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"dwDeviceId = 0\" id=\"%d\">"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxOpenPort(hFaxSvcHandle, 0, PORT_OPEN_QUERY, &hFaxPortHandle)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxOpenPort() returned TRUE.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_BAD_UNIT (0x%08x).</result>\r\n"), ERROR_BAD_UNIT);
        g_ApiInterface.FaxClose(hFaxPortHandle);
    }
    else if (GetLastError() != ERROR_BAD_UNIT) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_BAD_UNIT (0x%08x).</result>\r\n"), GetLastError(), ERROR_BAD_UNIT);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Flags = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Flags = 0\" id=\"%d\">"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, 0, &hFaxPortHandle)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxOpenPort() returned TRUE.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxClose(hFaxPortHandle);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxPortHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxPortHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, NULL)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxOpenPort() returned TRUE.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxClose(hFaxPortHandle);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid hFaxSvcHandle\" id=\"%d\">"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxOpenPort() returned TRUE.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxClose(hFaxPortHandle);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        //if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //dwDeviceId = pFaxPortInfo[0].DeviceId;

        // Free the fax port info
        //g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
          //  fnWriteLogFile(TEXT("FaxOpenPort() failed.  The error code is 0x%08x.  This is an error.  FaxOpenPort() should succeed.\r\n"), GetLastError());
        //}
        //else {
          //  g_ApiInterface.FaxClose(hFaxPortHandle);
//            (*pnNumCasesPassed)++;
//			dwFuncCasesPass++;
  //      }

        // Disconnect from the fax server
    //    g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxOpenPort, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}

VOID
fnFaxGetPort(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxGetPort()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE          hFaxSvcHandle;
    // hFaxPortHandle is the handle to a fax port
    HANDLE          hFaxPortHandle;
    // pFaxPortInfo is the pointer to the fax port info
    PFAX_PORT_INFO  pFaxPortInfo;
    // dwNumPorts is the number of fax ports
    DWORD           dwNumPorts;
    // dwDeviceId is the device id of the fax port
    DWORD           dwDeviceId;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxGetPort().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxGetPort\">"));

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
		return;

    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    // Enumerate the fax ports
    if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not enumerate ports on server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    dwDeviceId = pFaxPortInfo[0].DeviceId;

    // Free the fax port info
    g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

    // Open the fax port
    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not open fax port %d, The error code is 0x%08x.\r\n"),dwDeviceId, GetLastError());
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    // Get the fax port info
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (PORT_OPEN_QUERY).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (PORT_OPEN_QUERY)\" id=\"%d\">"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxGetPort(hFaxPortHandle, &pFaxPortInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetPort() failed.  The error code is 0x%08x.  This is an error.  FaxGetPort() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (pFaxPortInfo == NULL) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">pFaxPortInfo is NULL.  This is an error.  pFaxPortInfo should not be NULL.</result>\r\n"));
        }
        else {
            if (fnVerifyPorts(pFaxPortInfo, 1)) {
                (*pnNumCasesPassed)++;
				dwFuncCasesPass++;
				fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
            }

            g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
        }
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    g_ApiInterface.FaxClose(hFaxPortHandle);

    // Open the fax port
    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_MODIFY, &hFaxPortHandle)) {
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    // Get the fax port info
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (PORT_OPEN_MODIFY).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (PORT_OPEN_MODIFY)\" id=\"%d\">"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxGetPort(hFaxPortHandle, &pFaxPortInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetPort() failed.  The error code is 0x%08x.  This is an error.  FaxGetPort() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (pFaxPortInfo == NULL) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">pFaxPortInfo is NULL.  This is an error.  pFaxPortInfo should not be NULL.</result>\r\n"));
        }
        else {
            if (fnVerifyPorts(pFaxPortInfo, 1)) {
                (*pnNumCasesPassed)++;
				dwFuncCasesPass++;
				fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
            }

            g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
        }
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxPortHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxPortHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxGetPort(NULL, &pFaxPortInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetPort() returned TRUE.  This is an error.  FaxGetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pFaxPortInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxPortInfo = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetPort(hFaxPortHandle, NULL)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetPort() returned TRUE.  This is an error.  FaxGetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }

	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxPortHandle = hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxPortHandle = hFaxSvcHandle\" id=\"%d\">"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxGetPort(hFaxSvcHandle, &pFaxPortInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetPort() returned TRUE.  This is an error.  FaxGetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }

    // Disconnect from the fax port
    g_ApiInterface.FaxClose(hFaxPortHandle);

	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxPortHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid hFaxPortHandle\" id=\"%d\">"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxGetPort(hFaxPortHandle, &pFaxPortInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetPort() returned TRUE.  This is an error.  FaxGetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        // Enumerate the fax ports
        //if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //dwDeviceId = pFaxPortInfo[0].DeviceId;

        // Free the fax port info
        //g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

        // Open the fax port
        //if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxGetPort(hFaxPortHandle, &pFaxPortInfo)) {
          //  fnWriteLogFile(TEXT("FaxGetPort() failed.  The error code is 0x%08x.  This is an error.  FaxGetPort() should succeed.\r\n"), GetLastError());
        //}
        //else {
            //g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
            //(*pnNumCasesPassed)++;
			//dwFuncCasesPass++;
        //}

        // Disconnect from the fax port
        //g_ApiInterface.FaxClose(hFaxPortHandle);
        // Disconnect from the fax server
    //    g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxGetPort, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}


VOID
fnFaxSetPort(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	BOOL	 bTestLimits
)
/*++

Routine Description:

  FaxSetPort()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE          hFaxSvcHandle;
    // hFaxPortHandle is the handle to a fax port
    HANDLE          hFaxPortHandle;
    // pFaxPortInfo is the pointer to the fax port info
    PFAX_PORT_INFO  pFaxPortInfo;
    // pCopyFaxPortInfo is the pointer to the copy of the fax port info
    PFAX_PORT_INFO  pCopyFaxPortInfo;
    // dwNumPorts is the number of fax ports
    DWORD           dwNumPorts;
    // dwDeviceId is the device id of the fax port
    DWORD           dwDeviceId;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


    DWORD           cb;
    DWORD           dwOffset;
	DWORD			dwTempValue=0;


	fnWriteLogFile(TEXT("\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxSetPort().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxSetPort\">"));

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    // Enumerate the fax ports
    if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not enumerate ports on server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    dwDeviceId = pFaxPortInfo[0].DeviceId;

    // Free the fax port info
    g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

    // Open the fax port
    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not open fax port %d, The error code is 0x%08x.\r\n"),dwDeviceId, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    // Get the fax port info
    if (!g_ApiInterface.FaxGetPort(hFaxPortHandle, &pFaxPortInfo)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not get port info, The error code is 0x%08x.\r\n"),GetLastError());
        // Disconnect from the fax port
        g_ApiInterface.FaxClose(hFaxPortHandle);
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

	
    // Set the fax port info
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Flags = PORT_OPEN_QUERY.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Flags = PORT_OPEN_QUERY\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_ACCESS_DENIED (0x%08x).</result>\r\n"), ERROR_ACCESS_DENIED);
    }
    else if (GetLastError() != ERROR_ACCESS_DENIED) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_ACCESS_DENIED (0x%08x).</result>\r\n"), GetLastError(), ERROR_ACCESS_DENIED);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    // Disconnect from the fax port
    g_ApiInterface.FaxClose(hFaxPortHandle);

    // Open the fax port
    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_MODIFY, &hFaxPortHandle)) {
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    cb = sizeof(FAX_PORT_INFO);
    if (pFaxPortInfo->DeviceName) {
        cb += (lstrlen(pFaxPortInfo->DeviceName) + 1) * sizeof(TCHAR);
    }
    if (pFaxPortInfo->Tsid) {
        cb += (lstrlen(pFaxPortInfo->Tsid) + 1) * sizeof(TCHAR);
    }
    if (pFaxPortInfo->Csid) {
        cb += (lstrlen(pFaxPortInfo->Csid) + 1) * sizeof(TCHAR);
    }

    pCopyFaxPortInfo = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, cb);
    dwOffset = sizeof(FAX_PORT_INFO);

    pCopyFaxPortInfo->SizeOfStruct = pFaxPortInfo->SizeOfStruct;

	pCopyFaxPortInfo->DeviceId = pFaxPortInfo->DeviceId;
	pCopyFaxPortInfo->State = pFaxPortInfo->State;

	if ((pFaxPortInfo->Flags & FPF_RECEIVE) && (pFaxPortInfo->Flags & FPF_SEND)) {
		pCopyFaxPortInfo->Flags = 0;
	}
	else if (pFaxPortInfo->Flags & FPF_RECEIVE) {
	    pCopyFaxPortInfo->Flags = FPF_SEND;
	}
	else if (pFaxPortInfo->Flags & FPF_SEND) {
		pCopyFaxPortInfo->Flags = FPF_RECEIVE;
	}
	else {
	    pCopyFaxPortInfo->Flags = FPF_RECEIVE & FPF_SEND;
    }

	pCopyFaxPortInfo->Rings = pFaxPortInfo->Rings + 1;
	if (dwNumPorts > 1) {
		pCopyFaxPortInfo->Priority = pFaxPortInfo->Priority + 1;
	}
	else {
		pCopyFaxPortInfo->Priority = pFaxPortInfo->Priority;
	}


	if (pFaxPortInfo->DeviceName) {
        pCopyFaxPortInfo->DeviceName = (LPTSTR) ((DWORD) pCopyFaxPortInfo + dwOffset);
        lstrcpy((LPTSTR) pCopyFaxPortInfo->DeviceName, pFaxPortInfo->DeviceName);
        dwOffset += (lstrlen(pCopyFaxPortInfo->DeviceName) + 1) * sizeof(TCHAR);
    }

    if (pFaxPortInfo->Csid) {
        pCopyFaxPortInfo->Tsid = (LPTSTR) ((DWORD) pCopyFaxPortInfo + dwOffset);
        lstrcpy((LPTSTR) pCopyFaxPortInfo->Tsid, pFaxPortInfo->Csid);
        dwOffset += (lstrlen(pCopyFaxPortInfo->Tsid) + 1) * sizeof(TCHAR);
    }

    if (pFaxPortInfo->Tsid) {
        pCopyFaxPortInfo->Csid = (LPTSTR) ((DWORD) pCopyFaxPortInfo + dwOffset);
        lstrcpy((LPTSTR) pCopyFaxPortInfo->Csid, pFaxPortInfo->Tsid);
        dwOffset += (lstrlen(pCopyFaxPortInfo->Csid) + 1) * sizeof(TCHAR);
    }

 	// Set the fax port info
	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

	fnWriteLogFile(TEXT("Valid case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid case\" id=\"%d\">"), *pnNumCasesAttempted);

	if (!g_ApiInterface.FaxSetPort(hFaxPortHandle, pCopyFaxPortInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetPort() failed.  The error code is 0x%08x.  This is an error.  FaxSetPort() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		if (fnVerifyPorts(pCopyFaxPortInfo, 1)) {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		}
	}
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    HeapFree(g_hHeap, 0, pCopyFaxPortInfo);

    // Set the fax port info
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid case\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetPort() failed.  The error code is 0x%08x.  This is an error.  FaxSetPort() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (fnVerifyPorts(pFaxPortInfo, 1)) {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
        }
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    pFaxPortInfo->SizeOfStruct = 0;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pFaxPortInfo->SizeOfStruct = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxPortInfo->SizeOfStruct = 0\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
    pFaxPortInfo->SizeOfStruct = sizeof(FAX_PORT_INFO);
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	if (bTestLimits)	{
		
		// size of struct = MAX_DWORD
		pFaxPortInfo->SizeOfStruct = MAX_DWORD;
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxPortInfo->SizeOfStruct = MAX_DWORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"pFaxPortInfo->SizeOfStruct = MAX_DWORD\" id=\"%d\">"), *pnNumCasesAttempted);

		if (g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
	    }
	    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		}
		else {
	        (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
	    }
	    pFaxPortInfo->SizeOfStruct = sizeof(FAX_PORT_INFO);
		fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
	
		
		// state = MAX_DWORD
		dwTempValue=pFaxPortInfo->DeviceId;
		pFaxPortInfo->DeviceId=MAX_DWORD;
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxPortInfo->DeviceId = MAX_DWORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"pFaxPortInfo->DeviceId = MAX_DWORD\" id=\"%d\">"), *pnNumCasesAttempted);

		if (g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
	    }
	    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		}
		else {
	        (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
	    }
	    pFaxPortInfo->DeviceId=dwTempValue;
		fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
			
		// state = MAX_DWORD
		dwTempValue=pFaxPortInfo->State;
		pFaxPortInfo->State=MAX_DWORD;
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxPortInfo->State = MAX_DWORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"pFaxPortInfo->State = MAX_DWORD\" id=\"%d\">"), *pnNumCasesAttempted);

		if (g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
	    }
	    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		}
		else {
	        (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
	    }
	    pFaxPortInfo->State=dwTempValue;
		fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

		// pCopyFaxPortInfo->Flags = MAX_DWORD
		dwTempValue=pFaxPortInfo->Flags;
		pFaxPortInfo->Flags=MAX_DWORD;
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pCopyFaxPortInfo->Flags = MAX_DWORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"pCopyFaxPortInfo->Flags = MAX_DWORD\" id=\"%d\">"), *pnNumCasesAttempted);

		if (g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
	    }
	    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		}
		else {
	        (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
	    }
	    pFaxPortInfo->Flags=dwTempValue;
		fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));


		// rings=MAX_DWORD
		dwTempValue=pFaxPortInfo->Rings;
		pFaxPortInfo->Rings=MAX_DWORD;
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pCopyFaxPortInfo->Rings = MAX_DWORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"pCopyFaxPortInfo->Rings = MAX_DWORD\" id=\"%d\">"), *pnNumCasesAttempted);

		if (g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
	    }
	    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		}
		else {
	        (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
	    }
	    pFaxPortInfo->Rings=dwTempValue;
		fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

		// priority=MAX_DWORD
		dwTempValue=pFaxPortInfo->Priority;
		pFaxPortInfo->Priority=MAX_DWORD;
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pCopyFaxPortInfo->Priority = MAX_DWORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"pCopyFaxPortInfo->Priority = MAX_DWORD\" id=\"%d\">"), *pnNumCasesAttempted);

		if (g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
	    }
	    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		}
		else {
	        (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
	    }
	    pFaxPortInfo->Priority=dwTempValue;
		fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
	}
	
	    
	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

	fnWriteLogFile(TEXT("hFaxPortHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxPortHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

	if (g_ApiInterface.FaxSetPort(NULL, pFaxPortInfo)) {
		fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
	}
	else if (GetLastError() != ERROR_INVALID_HANDLE) {
	    fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
	}
	else {
		(*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
	}
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
	
	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

	fnWriteLogFile(TEXT("pFaxPortInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxPortInfo = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

	if (g_ApiInterface.FaxSetPort(hFaxPortHandle, NULL)) {
		fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
	}
	else if (GetLastError() != ERROR_INVALID_PARAMETER) {
	    fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
	}
	else {
		(*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
	}
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
		
	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

	fnWriteLogFile(TEXT("hFaxPortHandle = hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxPortHandle = hFaxSvcHandle\" id=\"%d\">"), *pnNumCasesAttempted);

	if (g_ApiInterface.FaxSetPort(hFaxSvcHandle, pFaxPortInfo)) {
	fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
	}
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    // Disconnect from the fax port
    g_ApiInterface.FaxClose(hFaxPortHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxPortHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid hFaxPortHandle\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

//    if (szServerName) {

//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(NULL, &hFaxSvcHandle)) {
    //        return;
      //  }

        // Enumerate the fax ports
//        if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
            // Disconnect from the fax server
  //          g_ApiInterface.FaxClose(hFaxSvcHandle);
    //        return;
        //}

        //dwDeviceId = pFaxPortInfo[0].DeviceId;

        // Free the fax port info
        //g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

        // Open the fax port
        //if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_MODIFY, &hFaxPortHandle)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
//            return;
  //      }

        // Get the fax port info
    //    if (!g_ApiInterface.FaxGetPort(hFaxPortHandle, &pFaxPortInfo)) {
            // Disconnect from the fax port
      //      g_ApiInterface.FaxClose(hFaxPortHandle);
            // Disconnect from the fax server
        //    g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
          //  fnWriteLogFile(TEXT("FaxSetPort() failed.  The error code is 0x%08x.  This is an error.  FaxSetPort() should succeed.\r\n"), GetLastError());
        //}
        //else {
          //  (*pnNumCasesPassed)++;
			//dwFuncCasesPass++;
        //}

        //g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

        // Disconnect from the fax port
        //g_ApiInterface.FaxClose(hFaxPortHandle);
        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxSetPort, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}



VOID
fnFaxGetDeviceStatus(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxGetDeviceStatus()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE              hFaxSvcHandle;
    // hFaxPortHandle is the handle to a fax port
    HANDLE              hFaxPortHandle;
    // pFaxPortInfo is the pointer to the fax port info
    PFAX_PORT_INFO      pFaxPortInfo;
    // pCopyFaxPortInfo is the pointer to the copy of the fax port info
    PFAX_PORT_INFO      pCopyFaxPortInfo;
    // dwNumPorts is the number of fax ports
    DWORD               dwNumPorts;
    // dwDeviceId is the device id of the fax port
    DWORD               dwDeviceId;
    // szDeviceName is the device name of the fax port
    LPTSTR              szDeviceName;
    // pFaxDeviceStatus is the pointer to the fax device status
    PFAX_DEVICE_STATUS  pFaxDeviceStatus;

    DWORD               dwIndex;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxGetDeviceStatus().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxGetDeviceStatus\">"));

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    // Enumerate the fax ports
    if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not enumerate ports on server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    dwDeviceId = pFaxPortInfo[0].DeviceId;
    szDeviceName = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(pFaxPortInfo[0].DeviceName) + 1) * sizeof(TCHAR));
    lstrcpy(szDeviceName, pFaxPortInfo[0].DeviceName);

    // Free the fax port info
    g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

    // Open the fax port
    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not open fax port %d, The error code is 0x%08x.\r\n"),dwDeviceId, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    for (dwIndex = 0; dwIndex < 2; dwIndex++) {
        // Get the device status
        (*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

        fnWriteLogFile(TEXT("Valid case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"Valid case\" id=\"%d\">"), *pnNumCasesAttempted);

        if (!g_ApiInterface.FaxGetDeviceStatus(hFaxPortHandle, &pFaxDeviceStatus)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetDeviceStatus() failed.  The error code is 0x%08x.  This is an error.  FaxGetDeviceStatus() should succeed.</result>\r\n"), GetLastError());
        }
        else {
            if (pFaxDeviceStatus == NULL) {
                fnWriteLogFile(TEXT("\n\t<result value=\"0\">pFaxDeviceStatus is NULL.  This is an error.  pFaxDeviceStatus should not be NULL.</result>\r\n"));
            }
            else {
                if (pFaxDeviceStatus->SizeOfStruct != sizeof(FAX_DEVICE_STATUS)) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">SizeOfStruct: Received: %d, Expected: %d.  This is an error.</result>\r\n"), pFaxDeviceStatus->SizeOfStruct, sizeof(FAX_DEVICE_STATUS));
                    goto FuncFailed;
                }

                if (pFaxDeviceStatus->DeviceId != dwDeviceId) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">DeviceId: Received: 0x%08x, Expected: 0x%08x.  This is an error.</result>\r\n"), pFaxDeviceStatus->DeviceId, dwDeviceId);
                    goto FuncFailed;
                }

                if (lstrcmp(pFaxDeviceStatus->DeviceName, szDeviceName)) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">DeviceName: Received: %s, Expected: %s.  This is an error.</result>\r\n"), pFaxDeviceStatus->DeviceName, szDeviceName);
                    goto FuncFailed;
                }

                (*pnNumCasesPassed)++;
				dwFuncCasesPass++;
				fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
			}


FuncFailed:
            g_ApiInterface.FaxFreeBuffer(pFaxDeviceStatus);
        }
		fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxPortHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxPortHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetDeviceStatus(NULL, &pFaxDeviceStatus)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetDeviceStatus() returned TRUE.  This is an error.  FaxGetDeviceStatus() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxDeviceStatus);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetDeviceStatus() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pFaxDeviceStatus = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxDeviceStatus = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetDeviceStatus(hFaxPortHandle, NULL)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetDeviceStatus() returned TRUE.  This is an error.  FaxGetDeviceStatus() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pFaxDeviceStatus);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetDeviceStatus() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxPortHandle = hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxPortHandle = hFaxSvcHandle\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetDeviceStatus(hFaxSvcHandle, &pFaxDeviceStatus)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetDeviceStatus() returned TRUE.  This is an error.  FaxGetDeviceStatus() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxDeviceStatus);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetDeviceStatus() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    // Disconnect from the fax port
    g_ApiInterface.FaxClose(hFaxPortHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxPortHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid hFaxPortHandle\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetDeviceStatus(hFaxPortHandle, &pFaxDeviceStatus)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetDeviceStatus() returned TRUE.  This is an error.  FaxGetDeviceStatus() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxDeviceStatus);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetDeviceStatus() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        // Enumerate the fax ports
        //if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //dwDeviceId = pFaxPortInfo[0].DeviceId;

        // Free the fax port info
        //g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

        // Open the fax port
        //if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
            // Disconnect from the fax server
//            g_ApiInterface.FaxClose(hFaxSvcHandle);
  //        //  return;
    //    }

        // Get the fax port info
      //  if (!g_ApiInterface.FaxGetPort(hFaxPortHandle, &pFaxPortInfo)) {
            // Disconnect from the fax port
        //    g_ApiInterface.FaxClose(hFaxPortHandle);
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        // Get the device status
        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;
        //fnWriteLogFile(TEXT("Valid case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxGetDeviceStatus(hFaxPortHandle, &pFaxDeviceStatus)) {
            //fnWriteLogFile(TEXT("FaxGetDeviceStatus() failed.  The error code is 0x%08x.  This is an error.  FaxGetDeviceStatus() should succeed.\r\n"), GetLastError());
        //}
        //else {
            //g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
            //(*pnNumCasesPassed)++;
			//dwFuncCasesPass++;
        //}

        // Disconnect from the fax port
        //g_ApiInterface.FaxClose(hFaxPortHandle);
        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxGetDeviceStatus, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}

BOOL WINAPI
FaxAPIDllTest(
	LPCWSTR  szWhisPhoneNumberW,
	LPCSTR   szWhisPhoneNumberA,
	LPCWSTR  szServerNameW,
    LPCSTR   szServerNameA,
    UINT     nNumCasesLocal,
    UINT     nNumCasesServer,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	DWORD	 dwTestMode
)
{
    LPCTSTR  szServerName;
    UINT     nNumCases;

#ifdef UNICODE
    szServerName = szServerNameW;
#else
    szServerName = szServerNameA;
#endif

    if (szServerName) {
		fnWriteLogFile(TEXT("WHIS> REMOTE SERVER MODE:\r\n"));
        nNumCases = nNumCasesServer;
    }
    else {
        nNumCases = nNumCasesLocal;
    }

    // FaxEnumPorts()
    fnFaxEnumPorts(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    // FaxOpenPort()
    fnFaxOpenPort(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    // FaxGetPort()
    fnFaxGetPort(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

  	if (dwTestMode==WHIS_TEST_MODE_LIMITS)	{
		// FaxSetPort()
		fnFaxSetPort(szServerName, pnNumCasesAttempted, pnNumCasesPassed,TRUE);
	}
	else	{
		  // FaxSetPort()
	    fnFaxSetPort(szServerName, pnNumCasesAttempted, pnNumCasesPassed,FALSE);
	}


    // FaxGetDeviceStatus()
    fnFaxGetDeviceStatus(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    if ((*pnNumCasesAttempted == nNumCases) && (*pnNumCasesPassed == *pnNumCasesAttempted)) {
        return TRUE;
    }
    else {
        return FALSE;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legwin32_whis_xml\faxapi\faxapi.h ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

  faxapi.h

Abstract:

  This module contains the global definitions

Author:

  Steven Kehrli (steveke) 8/28/1998

--*/

/*++

  Whistler Version:

  Lior Shmueli (liors) 23/11/2000

 ++*/

#ifndef _FAXAPI_H
#define _FAXAPI_H

typedef struct _DLL_INTERFACE {
    HINSTANCE       hInstance;
    PFAXAPIDLLINIT  pFaxAPIDllInit;
    PFAXAPIDLLTEST  pFaxAPIDllTest;
} DLL_INTERFACE, *PDLL_INTERFACE;

// g_hHeap is a global handle to the process heap
HANDLE         g_hHeap = NULL;
// g_hLogFile is the handle to the log file
HANDLE         g_hLogFile = INVALID_HANDLE_VALUE;
// g_bVerbose indicates the verbose switch was found
BOOL           g_bVerbose = FALSE;
// g_ApiInterface is the API interface structure
API_INTERFACE  g_ApiInterface;

#define HELP_SWITCH_1   L"/?"
#define HELP_SWITCH_2   L"/H"
#define HELP_SWITCH_3   L"-?"
#define HELP_SWITCH_4   L"-H"
#define INIFILE_SWITCH  L"/I:"
#define LOGFILE_SWITCH  L"/L:"
#define SERVER_SWITCH   L"/S:"
#define VERBOSE_SWITCH  L"/V"

#define FAXAPI_INIFILE  L"faxapi.ini"
#define FAXAPI_LOGFILE  L"faxapi.xml"

#define WINFAX_DLL      L"\\winfax.dll"

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legwin32_whis_xml\faxapi\util.c ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

  util.c

Abstract:

  This module:
    1) Displays a string in stdout
    2) Opens the log file
    3) Writes a string to the log file
    4) Writes a string to the log file
    5) Writes a string to the log file and stdout

Author:

  Steven Kehrli (steveke) 8/28/1998

--*/

#ifndef _UTIL_C
#define _UTIL_C

VOID
LocalEcho(
    LPWSTR  szFormatString,
    ...
)
/*++

Routine Description:

  Displays a string in stdout

Arguments:

  szFormatString - pointer to the string

Return Value:

  None

--*/
{
    va_list  varg_ptr;
    // szOutputBuffer is the output string
    WCHAR    szOutputBuffer[1024];

    // Initialize the buffer
    ZeroMemory(szOutputBuffer, sizeof(szOutputBuffer));

    va_start(varg_ptr, szFormatString);
    _vsnwprintf(szOutputBuffer, sizeof(szOutputBuffer), szFormatString, varg_ptr);
    wprintf(L"%s\n", szOutputBuffer);
}

BOOL
fnOpenLogFile(
    LPCWSTR  szLogFile
)
/*++

Routine Description:

  Opens the log file

Arguments:

  szLogFile - log file name

Return Value:

  TRUE on success

--*/
{
    // cUnicodeBOM is the Unicode BOM
    WCHAR  cUnicodeBOM = 0xFEFF;
    DWORD  cb;

    // Create the new log file
    g_hLogFile = CreateFile(szLogFile, GENERIC_WRITE, FILE_SHARE_READ, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
    if (g_hLogFile == INVALID_HANDLE_VALUE) {
        return FALSE;
    }

    if (!WriteFile(g_hLogFile, &cUnicodeBOM, sizeof(WCHAR), &cb, NULL)) {
        return FALSE;
    }

    return TRUE;
}

VOID WINAPI
fnWriteLogFileW(
    LPWSTR  szFormatString,
    ...
)
/*++

Routine Description:

  Writes a string to the log file

Arguments:

  szFormatString - pointer to the string

Return Value:

  None

--*/
{
    va_list  varg_ptr;
    // szOutputString is the output string
    WCHAR    szOutputString[1024];
    DWORD    cb;

    va_start(varg_ptr, szFormatString);
    _vsnwprintf(szOutputString, sizeof(szOutputString), szFormatString, varg_ptr);

    if (g_bVerbose) {
        LocalEcho(L"%s", szOutputString);
    }

    if (g_hLogFile != INVALID_HANDLE_VALUE) {
        lstrcat(szOutputString, L"\r\n");
        WriteFile(g_hLogFile, szOutputString, lstrlen(szOutputString) * sizeof(WCHAR), &cb, NULL);
    }

}

VOID WINAPI
fnWriteLogFileA(
    LPSTR  szFormatString,
    ...
)
/*++

Routine Description:

  Writes a string to the log file

Arguments:

  szFormatString - pointer to the string

Return Value:

  None

--*/
{
    va_list  varg_ptr;
    // szOutputString is the output string
    CHAR     szOutputString[1024];
    WCHAR    szOutputStringW[1024];
    DWORD    cb;

    va_start(varg_ptr, szFormatString);
    _vsnprintf(szOutputString, sizeof(szOutputString), szFormatString, varg_ptr);

    MultiByteToWideChar(CP_ACP, 0, szOutputString, -1, szOutputStringW, sizeof(szOutputStringW) / sizeof(WCHAR));

    fnWriteLogFileW(L"%s", szOutputStringW);
}

VOID
fnWriteAndEcho(
    LPWSTR  szFormatString,
    ...
)
/*++

Routine Description:

  Writes a string to the log file and stdout

Arguments:

  szFormatString - pointer to the string

Return Value:

  None

--*/
{
    va_list  varg_ptr;
    // szOutputString is the output string
    WCHAR    szOutputString[1024];
    DWORD    cb;

    va_start(varg_ptr, szFormatString);
    _vsnwprintf(szOutputString, sizeof(szOutputString), szFormatString, varg_ptr);

    LocalEcho(L"%s", szOutputString);

    if (g_hLogFile != INVALID_HANDLE_VALUE) {
        lstrcat(szOutputString, L"\r\n");
        WriteFile(g_hLogFile, szOutputString, lstrlen(szOutputString) * sizeof(WCHAR), &cb, NULL);
    }
}

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legwin32_whis_xml\confgapi\confgapi.c ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

  confgapi.c

Abstract:

  ConfgApi: Fax API Test Dll: Client Configuration APIs
    1) FaxGetConfiguration()
    2) FaxSetConfiguration()
    3) FaxGetLoggingCategories()
    4) FaxSetLoggingCategories()

Author:

  Steven Kehrli (steveke) 8/28/1998

--*/

/*++

  Whistler Version:

  Lior Shmueli (liors) 23/11/2000

 ++*/


#include <wtypes.h>

#include "dllapi.h"

// g_hHeap is the handle to the heap
HANDLE           g_hHeap = NULL;
// g_ApiInterface is the API_INTERFACE structure
API_INTERFACE    g_ApiInterface;
// fnWriteLogFile is the pointer to the function to write a string to the log file
PFNWRITELOGFILE  fnWriteLogFile = NULL;

#define FAX_REGKEY                     TEXT("Software\\Microsoft\\Fax")
#define RETRIES_REGVALUE               TEXT("Retries")
#define RETRYDELAY_REGVALUE            TEXT("Retry Delay")
#define DIRTYDAYS_REGVALUE             TEXT("Dirty Days")
#define BRANDING_REGVALUE              TEXT("Branding")
#define USEDEVICETSID_REGVALUE         TEXT("UseDeviceTsid")
#define SERVERCP_REGVALUE              TEXT("ServerCoverPageOnly")
#define PAUSESERVERQUEUE_REGVALUE      TEXT("QueuePaused")
#define STARTCHEAPTIME_REGVALUE        TEXT("StartCheapTime")
#define STOPCHEAPTIME_REGVALUE         TEXT("StopCheapTime")
#define ARCHIVEOUTGOINGFAXES_REGVALUE  TEXT("ArchiveOutgoingFax")
#define ARCHIVEDIRECTORY_REGVALUE      TEXT("ArchiveDirectory")
#define INBOUNDPROFILE_REGVALUE        TEXT("Inbound Profile")

#define FAX_LOGGING_REGKEY             TEXT("Software\\Microsoft\\Fax\\Logging")
#define NAME_REGVALUE                  TEXT("Name")
#define CATEGORY_REGVALUE              TEXT("Number")
#define LEVEL_REGVALUE                 TEXT("Level")

DWORD
DllEntry(
    HINSTANCE  hInstance,
    DWORD      dwReason,
    LPVOID     pContext
)
/*++

Routine Description:

  DLL entry point

Arguments:

  hInstance - handle to the module
  dwReason - indicates the reason for being called
  pContext - context

Return Value:

  TRUE on success

--*/
{
    return TRUE;
}

VOID WINAPI
FaxAPIDllInit(
    HANDLE            hHeap,
    API_INTERFACE     ApiInterface,
    PFNWRITELOGFILEW  pfnWriteLogFileW,
    PFNWRITELOGFILEA  pfnWriteLogFileA
)
{
    // Set g_hHeap
    g_hHeap = hHeap;
    // Set g_ApiInterface
    g_ApiInterface = ApiInterface;
#ifdef UNICODE
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileW;
#else
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileA;
#endif

    return;
}

BOOL
fnRegQueryDword(
    HKEY     hKey,
    LPTSTR   szValue,
    LPDWORD  pdwData
)
/*++

Routine Description:

  Queries a Registry data as a REG_DWORD

Arguments:

  hKey - handle to the Registry key
  szValue - value to be queried
  pdwData - pointer to the data to be queried

Return Value:

  TRUE on success

--*/
{
    DWORD  cb;

    cb = sizeof(DWORD);
    if (RegQueryValueEx(hKey, szValue, NULL, NULL, (PBYTE) pdwData, &cb)) {
        *pdwData = 0;
        return FALSE;
    }

    return TRUE;
}

BOOL
fnRegQuerySz(
    HKEY    hKey,
    LPTSTR  szValue,
    LPTSTR  *pszData
)
/*++

Routine Description:

  Queries a Registry data as a REG_SZ

Arguments:

  hKey - handle to the Registry key
  szValue - value to be queried
  pszData - pointer to the data to be queried

Return Value:

  TRUE on success

--*/
{
    DWORD  cb;

    cb = 0;
    // Determine the memory required by pszData
    if (RegQueryValueEx(hKey, szValue, NULL, NULL, NULL, &cb)) {
        return FALSE;
    }

    if (!cb) {
        *pszData = NULL;
        return TRUE;
    }

    // Allocate the memory for pszData
    *pszData = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, cb);

    if (RegQueryValueEx(hKey, szValue, NULL, NULL, (PBYTE) *pszData, &cb)) {
        HeapFree(g_hHeap, 0, *pszData);
        *pszData = NULL;
        return FALSE;
    }

    return TRUE;
}

BOOL
fnVerifyConfiguration(
    PFAX_CONFIGURATION  pFaxConfig
)
/*++

Routine Description:

  Verifies the fax configuration vs. the registry

Arguments:

  pFaxConfig - pointer to the fax configuration

Return Value:

  None

--*/
{
    // hFaxKey is the handle to the fax registry key
    HKEY    hFaxKey;
    // szValue is the registry value (REG_SZ)
    LPTSTR  szValue;
    // dwValue is the registry value (REG_DWORD)
    DWORD   dwValue;

    if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, FAX_REGKEY, 0, KEY_ALL_ACCESS, &hFaxKey)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not open the Registry Key %s, ec = 0x%08x.</result>\r\n"), FAX_REGKEY, GetLastError());
        goto RegFailed0;
    }

    if (pFaxConfig->SizeOfStruct != sizeof(FAX_CONFIGURATION)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">SizeOfStruct: Received: %d, Expected: %d.</result>\r\n"), pFaxConfig->SizeOfStruct, sizeof(FAX_CONFIGURATION));
        goto RegFailed1;
    }

    if (!fnRegQueryDword(hFaxKey, RETRIES_REGVALUE, &dwValue)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), RETRIES_REGVALUE, GetLastError());
        goto RegFailed1;
    }
    if (pFaxConfig->Retries != dwValue) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">Retries: Received: %d, Expected: %d.</result>\r\n"), dwValue, pFaxConfig->Retries);
        goto RegFailed1;
    }

    if (!fnRegQueryDword(hFaxKey, RETRYDELAY_REGVALUE, &dwValue)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), RETRYDELAY_REGVALUE, GetLastError());
        goto RegFailed1;
    }
    if (pFaxConfig->RetryDelay != dwValue) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">RetryDelay: Received: %d, Expected: %d.</result>\r\n"), dwValue, pFaxConfig->RetryDelay);
        goto RegFailed1;
    }

    if (!fnRegQueryDword(hFaxKey, DIRTYDAYS_REGVALUE, &dwValue)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), DIRTYDAYS_REGVALUE, GetLastError());
        goto RegFailed1;
    }
    if (pFaxConfig->DirtyDays != dwValue) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">DirtyDays: Received: %d, Expected: %d.</result>\r\n"), dwValue, pFaxConfig->DirtyDays);
        goto RegFailed1;
    }

    if (!fnRegQueryDword(hFaxKey, BRANDING_REGVALUE, &dwValue)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), BRANDING_REGVALUE, GetLastError());
        goto RegFailed1;
    }
    if (pFaxConfig->Branding != (BOOL) dwValue) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">Branding: Received: %d, Expected: %d.</result>\r\n"), dwValue, pFaxConfig->Branding);
        goto RegFailed1;
    }

    if (!fnRegQueryDword(hFaxKey, USEDEVICETSID_REGVALUE, &dwValue)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), USEDEVICETSID_REGVALUE, GetLastError());
        goto RegFailed1;
    }
    if (pFaxConfig->UseDeviceTsid != (BOOL) dwValue) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">UseDeviceTsid: Received: %d, Expected: %d.</result>\r\n"), dwValue, pFaxConfig->UseDeviceTsid);
        goto RegFailed1;
    }

    if (!fnRegQueryDword(hFaxKey, SERVERCP_REGVALUE, &dwValue)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), SERVERCP_REGVALUE, GetLastError());
        goto RegFailed1;
    }
    if (pFaxConfig->ServerCp != (BOOL) dwValue) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">ServerCp: Received: %d, Expected: %d.</result>\r\n"), dwValue, pFaxConfig->ServerCp);
        goto RegFailed1;
    }

    //if (!fnRegQueryDword(hFaxKey, PAUSESERVERQUEUE_REGVALUE, &dwValue)) {
    //    fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), PAUSESERVERQUEUE_REGVALUE, GetLastError());
    //    goto RegFailed1;
    //}
    if (pFaxConfig->PauseServerQueue != (BOOL) dwValue) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">PauseServerQueue: Received: %d, Expected: %d.</result>\r\n"), dwValue, pFaxConfig->PauseServerQueue);
        goto RegFailed1;
    }

    if (!fnRegQueryDword(hFaxKey, STARTCHEAPTIME_REGVALUE, &dwValue)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), STARTCHEAPTIME_REGVALUE, GetLastError());
        goto RegFailed1;
    }
    if (pFaxConfig->StartCheapTime.Hour != LOWORD(dwValue)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">StartCheapTime.Hour: Received: %d, Expected: %d.</result>\r\n"), LOWORD(dwValue), pFaxConfig->StartCheapTime.Hour);
        goto RegFailed1;
    }
    if (pFaxConfig->StartCheapTime.Minute != HIWORD(dwValue)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">StartCheapTime.Minute: Received: %d, Expected: %d.</result>\r\n"), HIWORD(dwValue), pFaxConfig->StartCheapTime.Minute);
        goto RegFailed1;
    }

    if (!fnRegQueryDword(hFaxKey, STOPCHEAPTIME_REGVALUE, &dwValue)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), STOPCHEAPTIME_REGVALUE, GetLastError());
        goto RegFailed1;
    }
    if (pFaxConfig->StopCheapTime.Hour != LOWORD(dwValue)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">StopCheapTime.Hour: Received: %d, Expected: %d.</result>\r\n"), LOWORD(dwValue), pFaxConfig->StopCheapTime.Hour);
        goto RegFailed1;
    }
    if (pFaxConfig->StopCheapTime.Minute != HIWORD(dwValue)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">StopCheapTime.Minute: Received: %d, Expected: %d.</result>\r\n"), HIWORD(dwValue), pFaxConfig->StopCheapTime.Minute);
        goto RegFailed1;
    }

    if (!fnRegQueryDword(hFaxKey, ARCHIVEOUTGOINGFAXES_REGVALUE, &dwValue)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), ARCHIVEOUTGOINGFAXES_REGVALUE, GetLastError());
        goto RegFailed1;
    }
    if (pFaxConfig->ArchiveOutgoingFaxes != (BOOL) dwValue) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">ArchiveOutgoingFaxes: Received: %d, Expected: %d.</result>\r\n"), dwValue, pFaxConfig->ArchiveOutgoingFaxes);
        goto RegFailed1;
    }

    if (!fnRegQuerySz(hFaxKey, ARCHIVEDIRECTORY_REGVALUE, &szValue)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), ARCHIVEDIRECTORY_REGVALUE, GetLastError());
        goto RegFailed1;
    }
    if (lstrcmp(pFaxConfig->ArchiveDirectory, szValue)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">ArchiveDirectory: Received: %s, Expected: %s.</result>\r\n"), szValue, pFaxConfig->ArchiveDirectory);
        if (szValue) {
            HeapFree(g_hHeap, 0, szValue);
        }
        goto RegFailed1;
    }
    if (szValue) {
        HeapFree(g_hHeap, 0, szValue);
    }

    if (!fnRegQuerySz(hFaxKey, INBOUNDPROFILE_REGVALUE, &szValue)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), INBOUNDPROFILE_REGVALUE, GetLastError());
        goto RegFailed1;
    }
    
	
	#ifdef FAXAPI_W2K
		if (lstrcmp(pFaxConfig->InboundProfile, szValue)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">InboundProfile: Received: %s, Expected: %s.</result>\r\n"), szValue, pFaxConfig->InboundProfile);
        if (szValue) {
            HeapFree(g_hHeap, 0, szValue);
			}
        goto RegFailed1;
		}	
	#endif

    if (szValue) {
        HeapFree(g_hHeap, 0, szValue);
    }

    RegCloseKey(hFaxKey);

    return TRUE;

RegFailed1:
    RegCloseKey(hFaxKey);

RegFailed0:
    return FALSE;
}

VOID
fnFaxGetConfiguration(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxGetConfiguration()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE              hFaxSvcHandle;
    // pFaxConfig is the pointer to the fax configuration
    PFAX_CONFIGURATION  pFaxConfig;

    DWORD               dwIndex;

    // internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxGetConfiguration().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxGetConfiguration\">"));

	// Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> Test error: can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName,GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else	{
		fnWriteLogFile(TEXT("WHIS> Connected to %s.\r\n"),szServerName);
	}


    for (dwIndex = 0; dwIndex < 2; dwIndex++) {
        
		// Get the configuration
        (*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

        fnWriteLogFile(TEXT("Valid Case (will do twice).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (will do twice)\" id=\"%d\">"), *pnNumCasesAttempted);
        if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetConfiguration() failed.  The error code is 0x%08x.  This is an error.  FaxGetConfiguration() should succeed.\r\n"), GetLastError());
			fnWriteLogFile(TEXT("\n\t</result>"));
        }
        else {
            if (pFaxConfig == NULL) {
                fnWriteLogFile(TEXT("\n\t<result value=\"0\">pFaxConfig is NULL.  This is an error.  pFaxConfig should not be NULL.\r\n"));
				fnWriteLogFile(TEXT("\n\t</result>"));
            }
            else {
				//registry is not backwards competiable, omitted
                //if (fnVerifyConfiguration(pFaxConfig)) {
                    (*pnNumCasesPassed)++;
					dwFuncCasesPass++;
					fnWriteLogFile(TEXT("\n\t<result value=\"1\">Registry Check Omitted</result>"));
                //}
            }

            g_ApiInterface.FaxFreeBuffer(pFaxConfig);
        }
		fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxGetConfiguration(NULL, &pFaxConfig)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetConfiguration() returned TRUE.  This is an error.  FaxGetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pFaxConfig = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    fnWriteLogFile(TEXT("\n\t<case name=\"pFaxConfig = NULL\" id=\"%d\">"), *pnNumCasesAttempted);
	if (g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, NULL)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetConfiguration() returned TRUE.  This is an error.  FaxGetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle (connection to fax was closed...) .  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid hFaxSvcHandle (connection to fax was closed...)\" id=\"%d\">"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetConfiguration() returned TRUE.  This is an error.  FaxGetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("\n\t</result>"));
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

    //if (szServerName) {
	//	fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
      //  if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
        //    return;
        //}

        //(*pnNumCasesAttempted)++;
        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
          //  fnWriteLogFile(TEXT("FaxGetConfiguration() failed.  The error code is 0x%08x.  This is an error.  FaxGetConfiguration() should succeed.\r\n"), GetLastError());
        //}
        //else {
          //  g_ApiInterface.FaxFreeBuffer(pFaxConfig);
            //(*pnNumCasesPassed)++;
        //}

        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}

VOID
fnFaxSetConfiguration(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	BOOL	 bTestLimits
)
/*++

Routine Description:

  FaxSetConfiguration()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE              hFaxSvcHandle;
    // pFaxConfig is the pointer to the fax configuration
    PFAX_CONFIGURATION  pFaxConfig;
    // pCopyFaxConfig is the pointer to the copy of the fax configuration
    PFAX_CONFIGURATION  pCopyFaxConfig;

    DWORD               cb;
    DWORD               dwOffset;
	DWORD				dwTempValue;
	int					iTempValue;
	WORD				wTempValue;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


    fnWriteLogFile(TEXT(  "\n--------------------------"));
	fnWriteLogFile(TEXT("### FaxSetConfiguration().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxSetConfiguration\">"));

	// Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> Test error: can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName,GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else	{
		fnWriteLogFile(TEXT("WHIS> Connected to %s.\r\n"),szServerName);
	}

    if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> Test error: can not GET configuration from fax server %s, The error code is 0x%08x.\r\n"),szServerName,GetLastError());
		// Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    cb = sizeof(FAX_CONFIGURATION);

	#ifdef FAXAPI_W2K
		if (pFaxConfig->InboundProfile) {
        cb += (lstrlen(pFaxConfig->InboundProfile) + 1) * sizeof(TCHAR);
		}
	#endif

    if (pFaxConfig->ArchiveDirectory) {
        cb += (lstrlen(pFaxConfig->ArchiveDirectory) + 1) * sizeof(TCHAR);
    }

    pCopyFaxConfig = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, cb);
    dwOffset = sizeof(FAX_CONFIGURATION);

	
			
	pCopyFaxConfig->SizeOfStruct = pFaxConfig->SizeOfStruct;
	pCopyFaxConfig->Retries = pFaxConfig->Retries + 1;
	pCopyFaxConfig->RetryDelay = pFaxConfig->RetryDelay + 1;
	pCopyFaxConfig->DirtyDays = pFaxConfig->DirtyDays + 1;
	pCopyFaxConfig->Branding = !pFaxConfig->Branding;
	pCopyFaxConfig->UseDeviceTsid = !pFaxConfig->UseDeviceTsid;
	pCopyFaxConfig->ServerCp = !pFaxConfig->ServerCp;
	pCopyFaxConfig->PauseServerQueue = !pFaxConfig->PauseServerQueue;
	pCopyFaxConfig->StartCheapTime.Hour = pFaxConfig->StopCheapTime.Hour;
	pCopyFaxConfig->StartCheapTime.Minute = pFaxConfig->StopCheapTime.Minute;
	pCopyFaxConfig->StopCheapTime.Hour = pFaxConfig->StartCheapTime.Hour;
	pCopyFaxConfig->StopCheapTime.Minute = pFaxConfig->StartCheapTime.Minute;
	pCopyFaxConfig->ArchiveOutgoingFaxes = pCopyFaxConfig->ArchiveOutgoingFaxes;

	
	#ifdef FAXAPI_W2K
		if (pFaxConfig->InboundProfile) {
			pCopyFaxConfig->InboundProfile = (LPTSTR) ((DWORD) pCopyFaxConfig + dwOffset);
			lstrcpy((LPTSTR) pCopyFaxConfig->InboundProfile, pFaxConfig->InboundProfile);
			dwOffset += (lstrlen(pCopyFaxConfig->InboundProfile) + 1) * sizeof(TCHAR);
		}
	#endif


	if (pFaxConfig->ArchiveDirectory) {
        pCopyFaxConfig->ArchiveDirectory = (LPTSTR) ((DWORD) pCopyFaxConfig + dwOffset);
        lstrcpy((LPTSTR) pCopyFaxConfig->ArchiveDirectory, pFaxConfig->ArchiveDirectory);
        dwOffset += (lstrlen(pCopyFaxConfig->ArchiveDirectory) + 1) * sizeof(TCHAR);
		}
	
  

    // Set the configuration
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

	fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);
	
    if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pCopyFaxConfig)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetConfiguration() failed.  The error code is 0x%08x.  This is an error.  FaxSetConfiguration() should succeed.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else {
		//registry is not backwards competiable, omitted
        //if (fnVerifyConfiguration(pCopyFaxConfig)) {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\">Registry Check Omitted</result>"));
        //}
    }
	fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

    HeapFree(g_hHeap, 0, pCopyFaxConfig);

    // Set the configuration
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetConfiguration() failed.  The error code is 0x%08x.  This is an error.  FaxSetConfiguration() should succeed.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else {
		//registry is not backwards competiable, omitted
        //if (fnVerifyConfiguration(pFaxConfig)) {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\">Registry Check Omitted</result>"));
        //}
    }
	fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

    pFaxConfig->SizeOfStruct = 0;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pFaxConfig->SizeOfStruct = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxConfig->SizeOfStruct = 0\" id=\"%d\">"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

    pFaxConfig->SizeOfStruct = sizeof(FAX_CONFIGURATION);


	// add limit values cases
	if (bTestLimits)	{

		pFaxConfig->SizeOfStruct = MAX_DWORD;
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;
		fnWriteLogFile(TEXT("pFaxConfig->SizeOfStruct = MAX_DWORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"pFaxConfig->SizeOfStruct = MAX_DWORD\" id=\"%d\">"), *pnNumCasesAttempted);

		if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
	    }
	    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
		}
		else {
	        (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
	    }
		fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

	    pFaxConfig->SizeOfStruct = sizeof(FAX_CONFIGURATION);

	
		dwTempValue=pFaxConfig->Retries;
		pFaxConfig->Retries = MAX_DWORD;

		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxConfig->Retries = MAX_DWORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"pFaxConfig->Retries = MAX_DWORD\" id=\"%d\">"), *pnNumCasesAttempted);

	    if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
		}
		else if (GetLastError() != ERROR_INVALID_PARAMETER) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
	    }
	    else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		}
		fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

		pFaxConfig->Retries=dwTempValue;
	
		dwTempValue=pFaxConfig->RetryDelay;
		pFaxConfig->RetryDelay = MAX_DWORD;
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxConfig->RetryDelay = MAX_DWORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"pFaxConfig->RetryDelay = MAX_DWORD\" id=\"%d\">"), *pnNumCasesAttempted);

	    if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
		}
		else if (GetLastError() != ERROR_INVALID_PARAMETER) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
	    }
	    else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		}
		fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

		pFaxConfig->RetryDelay=dwTempValue;
	
		dwTempValue=pFaxConfig->DirtyDays;
		pFaxConfig->DirtyDays = MAX_DWORD;
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxConfig->DirtyDays = MAX_DWORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"pFaxConfig->DirtyDays = MAX_DWORD\" id=\"%d\">"), *pnNumCasesAttempted);

		if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
	    }
	    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
		}
		else {
	        (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
	    }
		fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

	    pFaxConfig->DirtyDays=dwTempValue;
	
	
		iTempValue=pFaxConfig->Branding;
		pFaxConfig->Branding = MIN_INT;
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxConfig->Branding = MIN_INT.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"pFaxConfig->Branding = MIN_INT\" id=\"%d\">"), *pnNumCasesAttempted);

	    if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
		}
		else if (GetLastError() != ERROR_INVALID_PARAMETER) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
	    }
	    else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		}
		fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

		pFaxConfig->Branding=dwTempValue;
	
		iTempValue=pFaxConfig->UseDeviceTsid;
		pFaxConfig->UseDeviceTsid = MIN_INT;
		
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxConfig->UseDeviceTsid = MIN_INT.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"pFaxConfig->UseDeviceTsid = MIN_INT\" id=\"%d\">"), *pnNumCasesAttempted);

	    if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
		}
		else if (GetLastError() != ERROR_INVALID_PARAMETER) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
	    }
	    else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		}
		fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

		pFaxConfig->UseDeviceTsid=dwTempValue;
	
		iTempValue=pFaxConfig->ServerCp;
		pFaxConfig->ServerCp = MIN_INT;
		
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxConfig->ServerCp = MIN_INT.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"pFaxConfig->ServerCp = MIN_INT\" id=\"%d\">"), *pnNumCasesAttempted);

	    if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
		}
		else if (GetLastError() != ERROR_INVALID_PARAMETER) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
	    }
	    else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		}
		fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

		pFaxConfig->ServerCp=dwTempValue;
	
		iTempValue=pFaxConfig->PauseServerQueue;
		pFaxConfig->PauseServerQueue = MIN_INT;

		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxConfig->PauseServerQueue = MIN_INT.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"pFaxConfig->PauseServerQueue = MIN_INT\" id=\"%d\">"), *pnNumCasesAttempted);

	    if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
		}
		else if (GetLastError() != ERROR_INVALID_PARAMETER) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
		}
		else {
	        (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
	    }
		fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

	    pFaxConfig->PauseServerQueue=dwTempValue;
	
		iTempValue=pFaxConfig->ArchiveOutgoingFaxes;
		pFaxConfig->ArchiveOutgoingFaxes = MIN_INT;

		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxConfig->ArchiveOutgoingFaxes = MIN_INT.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"pFaxConfig->ArchiveOutgoingFaxes = MIN_INT\" id=\"%d\">"), *pnNumCasesAttempted);

	    if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
		fnWriteLogFile(TEXT("\n\t</result>"));
		}
		else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
		}
		else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		}
		fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

		pFaxConfig->ArchiveOutgoingFaxes=dwTempValue;

	
		
		wTempValue=pFaxConfig->StartCheapTime.Hour;
		pFaxConfig->StartCheapTime.Hour = MAX_WORD;

		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxConfig->StartCheapTime.Hour = MAX_WORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"pFaxConfig->StartCheapTime.Hour = MAX_WORD\" id=\"%d\">"), *pnNumCasesAttempted);

		if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
		}
		else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
		}
		else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		}
		fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

		pFaxConfig->StartCheapTime.Hour=wTempValue;

		
		
		
		
		wTempValue=pFaxConfig->StartCheapTime.Minute;
		pFaxConfig->StartCheapTime.Minute = MAX_WORD;

		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxConfig->StartCheapTime.Minute = MAX_WORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"pFaxConfig->StartCheapTime.Minute = MAX_WORD\" id=\"%d\">"), *pnNumCasesAttempted);

		if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
		}
		else if (GetLastError() != ERROR_INVALID_PARAMETER) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
		}
	    else {
	        (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		}
		fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

		pFaxConfig->StartCheapTime.Minute=wTempValue;

		
	
		wTempValue=pFaxConfig->StopCheapTime.Hour;
		pFaxConfig->StopCheapTime.Hour = MAX_WORD;

		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxConfig->StopCheapTime.Hour = MAX_WORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"pFaxConfig->StopCheapTime.Hour = MAX_WORD\" id=\"%d\">"), *pnNumCasesAttempted);

		if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
		}
		else if (GetLastError() != ERROR_INVALID_PARAMETER) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
		}
		else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
			}
		fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));
		pFaxConfig->StopCheapTime.Hour=wTempValue;

		
		
		wTempValue=pFaxConfig->StopCheapTime.Minute;
		pFaxConfig->StopCheapTime.Minute = MAX_WORD;

		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxConfig->StopCheapTime.Minute = MAX_WORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"pFaxConfig->StopCheapTime.Minute = MAX_WORD\" id=\"%d\">"), *pnNumCasesAttempted);

		if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
		}
		else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			fnWriteLogFile(TEXT("\n\t</result>"));
		}
		else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		}
		fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

	    pFaxConfig->StopCheapTime.Minute=wTempValue;


	
	}


    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetConfiguration(NULL, pFaxConfig)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pFaxConfig = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxConfig = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, NULL)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid hFaxSvcHandle\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetConfiguration() returned TRUE.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetConfiguration() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

    g_ApiInterface.FaxFreeBuffer(pFaxConfig);

  //  if (szServerName) {
        // Connect to the fax server
    //    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
      //      return;
       // }

        //if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
       // }

        //(*pnNumCasesAttempted)++;
        //if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
          //  fnWriteLogFile(TEXT("FaxSetConfiguration() failed.  The error code is 0x%08x.  This is an error.  FaxSetConfiguration() should succeed.\r\n"), GetLastError());
        //}
        //else {
          //  (*pnNumCasesPassed)++;

        //}

        //g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}


BOOL fnVerifyCategories(
    PFAX_LOG_CATEGORY  pFaxCategories,
    DWORD              dwNumMethods
)
/*++

Routine Description:

  Verifies the fax logging categories vs. the registry

Arguments:

  pFaxCategories - pointer to the fax logging categories
  dwNumMethods - number of fax logging categories

Return Value:

  None

--*/
{
    // hFaxLoggingKey is the handle to the fax logging registry key
    HKEY    hFaxLoggingKey;
    // szKeyName is the name of a logging registry subkey
    TCHAR   szKeyName[3];
    // hFaxCategoryKey is the handle to the category registry key
    HKEY    hFaxCategoryKey;
    // szValue is the registry value (REG_SZ)
    LPTSTR  szValue;
    // dwValue is the registry value (REG_DWORD)
    DWORD   dwValue;

    DWORD   dwIndex;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

    if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, FAX_LOGGING_REGKEY, 0, KEY_ALL_ACCESS, &hFaxLoggingKey)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not open the Registry Key %s, ec = 0x%08x.</result>\r\n"), FAX_LOGGING_REGKEY, GetLastError());
        goto RegFailed0;
    }

    for (dwIndex = 0; dwIndex < dwNumMethods; dwIndex++) {
        wsprintf(szKeyName, TEXT("%d"), pFaxCategories[dwIndex].Category);

        if (RegOpenKeyEx(hFaxLoggingKey, szKeyName, 0, KEY_ALL_ACCESS, &hFaxCategoryKey)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not open the Registry Key %s, ec = 0x%08x.</result>\r\n"), szKeyName, GetLastError());
            goto RegFailed1;
        }

        if (!fnRegQuerySz(hFaxCategoryKey, NAME_REGVALUE, &szValue)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), NAME_REGVALUE, GetLastError());
            goto RegFailed2;
        }
        if (lstrcmp(pFaxCategories[dwIndex].Name, szValue)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Name: Received: %s, Expected: %s.</result>\r\n"), szValue, pFaxCategories[dwIndex].Name);
            if (szValue) {
                HeapFree(g_hHeap, 0, szValue);
            }
            goto RegFailed2;
        }
        if (szValue) {
            HeapFree(g_hHeap, 0, szValue);
        }

        if (!fnRegQueryDword(hFaxCategoryKey, CATEGORY_REGVALUE, &dwValue)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), CATEGORY_REGVALUE, GetLastError());
            goto RegFailed2;
        }
        if (pFaxCategories[dwIndex].Category != dwValue) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Category: Received: %d, Expected: %d.</result>\r\n"), dwValue, pFaxCategories[dwIndex].Category);
            goto RegFailed2;
        }

        if (!fnRegQueryDword(hFaxCategoryKey, LEVEL_REGVALUE, &dwValue)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.</result>\r\n"), LEVEL_REGVALUE, GetLastError());
            goto RegFailed2;
        }
        if (pFaxCategories[dwIndex].Level != dwValue) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Level: Received: %d, Expected: %d.</result>\r\n"), dwValue, pFaxCategories[dwIndex].Level);
            goto RegFailed2;
        }

        RegCloseKey(hFaxCategoryKey);
    }

    RegCloseKey(hFaxLoggingKey);

    return TRUE;

RegFailed2:
    RegCloseKey(hFaxCategoryKey);

RegFailed1:
    RegCloseKey(hFaxLoggingKey);

RegFailed0:
    return FALSE;
}

VOID
fnFaxGetLoggingCategories(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxGetLoggingCategories()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE             hFaxSvcHandle;
    // pFaxCategories is the pointer to the fax logging categories
    PFAX_LOG_CATEGORY  pFaxCategories;
    // dwNumCategories is the number of fax logging categories
    DWORD              dwNumCategories;

    DWORD              dwIndex;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;
	
	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxGetLoggingCategories().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxGetLoggingCategories\">"));

	// Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> Test error: can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName,GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else	{
		fnWriteLogFile(TEXT("WHIS> Connected to %s.\r\n"),szServerName);
	}


    for (dwIndex = 0; dwIndex < 2; dwIndex++) {
        // Get the logging categories
        (*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;
		
		
		
        fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

        if (!g_ApiInterface.FaxGetLoggingCategories(hFaxSvcHandle, &pFaxCategories, &dwNumCategories)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetLoggingCategories() failed.  The error code is 0x%08x.  This is an error.  FaxGetLoggingCategories() should succeed.\r\n"), GetLastError());
			fnWriteLogFile(TEXT("\n\t</result>"));
        }
        else {
            if (pFaxCategories == NULL) {
                fnWriteLogFile(TEXT("\n\t<result value=\"0\">pFaxCategories is NULL.  This is an error.  pFaxCategories should not be NULL.\r\n"));
				fnWriteLogFile(TEXT("\n\t</result>"));
            }

            if (dwNumCategories != 4) {
                fnWriteLogFile(TEXT("\n\t<result value=\"0\">dwNumCategories is not 4.  This is an error.  dwNumCategories should be 4.\r\n"));
				fnWriteLogFile(TEXT("\n\t</result>"));
            }

            if ((pFaxCategories != NULL) && (dwNumCategories == 4)) {
                if (fnVerifyCategories(pFaxCategories, dwNumCategories)) {
                    (*pnNumCasesPassed)++;
					dwFuncCasesPass++;
					fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
                }
            }
		    g_ApiInterface.FaxFreeBuffer(pFaxCategories);
        }
		fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetLoggingCategories(NULL, &pFaxCategories, &dwNumCategories)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetLoggingCategories() returned TRUE.  This is an error.  FaxGetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("\n\t</result>"));

        g_ApiInterface.FaxFreeBuffer(pFaxCategories);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("\n\t</result>"));

    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pFaxCategories = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxCategories = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetLoggingCategories(hFaxSvcHandle, NULL, &dwNumCategories)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetLoggingCategories() returned TRUE.  This is an error.  FaxGetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
		fnWriteLogFile(TEXT("\n\t</result>"));

        g_ApiInterface.FaxFreeBuffer(pFaxCategories);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		fnWriteLogFile(TEXT("\n\t</result>"));

    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("dwNumCategories = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"dwNumCategories = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetLoggingCategories(hFaxSvcHandle, &pFaxCategories, NULL)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetLoggingCategories() returned TRUE.  This is an error.  FaxGetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
		fnWriteLogFile(TEXT("\n\t</result>"));

        g_ApiInterface.FaxFreeBuffer(pFaxCategories);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid hFaxSvcHandle\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetLoggingCategories(hFaxSvcHandle, &pFaxCategories, &dwNumCategories)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetLoggingCategories() returned TRUE.  This is an error.  FaxGetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("\n\t</result>"));

        g_ApiInterface.FaxFreeBuffer(pFaxCategories);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("\n\t</result>"));

    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

    //if (szServerName) {
	//	fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
      //  if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
        //    return;
        //}

        //(*pnNumCasesAttempted)++;
        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxGetLoggingCategories(hFaxSvcHandle, &pFaxCategories, &dwNumCategories)) {
          //  fnWriteLogFile(TEXT("FaxGetLoggingCategories() failed.  The error code is 0x%08x.  This is an error.  FaxGetLoggingCategories() should succeed.\r\n"), GetLastError());
        //}
        //else {
          //  g_ApiInterface.FaxFreeBuffer(pFaxCategories);
            //(*pnNumCasesPassed)++;
        //}

        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}

VOID
fnFaxSetLoggingCategories(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	BOOL	 bTestLimits
)
/*++

Routine Description:

  FaxSetLoggingCategories()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE             hFaxSvcHandle;
    // pFaxCategories is the pointer to the fax logging categories
    PFAX_LOG_CATEGORY  pFaxCategories;
    // dwNumCategories is the number of fax logging categories
    DWORD              dwNumCategories;
    // pCopyFaxCategories is the pointer to the copy of the fax logging categories
    PFAX_LOG_CATEGORY  pCopyFaxCategories;

    DWORD              dwIndex;
    DWORD              cb;
    DWORD              dwOffset;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxSetLoggingCategories().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxSetLoggingCategories\">"));

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> Test error: can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName,GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else	{
		fnWriteLogFile(TEXT("WHIS> Connected to %s.\r\n"),szServerName);
	}


    if (!g_ApiInterface.FaxGetLoggingCategories(hFaxSvcHandle, &pFaxCategories, &dwNumCategories)) {
		fnWriteLogFile(TEXT("WHIS> Test error: can not get Loggin catagories from %s, The error code is 0x%08x.\r\n"),szServerName,GetLastError());
		// Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    for (dwIndex = 0, cb = 0; dwIndex < dwNumCategories; dwIndex++) {
        cb += sizeof(FAX_LOG_CATEGORY);
        cb += (lstrlen(pFaxCategories[dwIndex].Name) + 1) * sizeof(TCHAR);
    }

    pCopyFaxCategories = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, cb);
    dwOffset = dwNumCategories * sizeof(FAX_LOG_CATEGORY);
	
	
	if (bTestLimits)	{
		fnWriteLogFile(TEXT("WHIS> SETTING LIMIT VALUES...\r\n"));
		for (dwIndex = 0; dwIndex < dwNumCategories; dwIndex++) {
        pCopyFaxCategories[dwIndex].Name = (LPTSTR) ((DWORD) pCopyFaxCategories + dwOffset);
        lstrcpy((LPTSTR) pCopyFaxCategories[dwIndex].Name, pFaxCategories[dwIndex].Name);
        dwOffset += (lstrlen(pCopyFaxCategories[dwIndex].Name) + 1) * sizeof(TCHAR);

        pCopyFaxCategories[dwIndex].Category = pFaxCategories[dwIndex].Category;
        pCopyFaxCategories[dwIndex].Level = MAX_DWORD;
		}
	}
	else	{
		for (dwIndex = 0; dwIndex < dwNumCategories; dwIndex++) {
        pCopyFaxCategories[dwIndex].Name = (LPTSTR) ((DWORD) pCopyFaxCategories + dwOffset);
        lstrcpy((LPTSTR) pCopyFaxCategories[dwIndex].Name, pFaxCategories[dwIndex].Name);
        dwOffset += (lstrlen(pCopyFaxCategories[dwIndex].Name) + 1) * sizeof(TCHAR);

        pCopyFaxCategories[dwIndex].Category = pFaxCategories[dwIndex].Category;
        pCopyFaxCategories[dwIndex].Level = (pFaxCategories[dwIndex].Level + 1) % (FAXLOG_LEVEL_MAX + 1);
		}
	}

    // Set the logging categories
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

	if (!bTestLimits)
	{
		fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);
	}
	else
	{
		fnWriteLogFile(TEXT("Valid Case, Limit Values.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case Limit Values\" id=\"%d\">"), *pnNumCasesAttempted);
	}

    if (!g_ApiInterface.FaxSetLoggingCategories(hFaxSvcHandle, pCopyFaxCategories, dwNumCategories)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetLoggingCategories() failed.  The error code is 0x%08x.  This is an error.  FaxSetLoggingCategories() should succeed.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else {
        if (fnVerifyCategories(pCopyFaxCategories, dwNumCategories)) {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
        }
	}
	fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

    HeapFree(g_hHeap, 0, pCopyFaxCategories);

    // Set the logging categories
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSetLoggingCategories(hFaxSvcHandle, pFaxCategories, dwNumCategories)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetLoggingCategories() failed.  The error code is 0x%08x.  This is an error.  FaxSetLoggingCategories() should succeed.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else {
        if (fnVerifyCategories(pFaxCategories, dwNumCategories)) {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
        }
	}
	fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetLoggingCategories(NULL, pFaxCategories, dwNumCategories)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetLoggingCategories() returned TRUE.  This is an error.  FaxSetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    
	fnWriteLogFile(TEXT("pFaxCategories = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxCategories = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetLoggingCategories(hFaxSvcHandle, NULL, dwNumCategories)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetLoggingCategories() returned TRUE.  This is an error.  FaxSetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
		fnWriteLogFile(TEXT("\n\t</result>"));

    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		fnWriteLogFile(TEXT("\n\t</result>"));

    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("dwNumCategories = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"dwNumCategories = 0\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetLoggingCategories(hFaxSvcHandle, pFaxCategories, 0)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetLoggingCategories() returned TRUE.  This is an error.  FaxSetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), ERROR_INVALID_PARAMETER);
		fnWriteLogFile(TEXT("\n\t</result>"));

    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid hFaxSvcHandle\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetLoggingCategories(hFaxSvcHandle, pFaxCategories, dwNumCategories)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetLoggingCategories() returned TRUE.  This is an error.  FaxSetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetLoggingCategories() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
		fnWriteLogFile(TEXT("\n\t</result>"));
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>")); fnWriteLogFile(TEXT("\n\n"));

    g_ApiInterface.FaxFreeBuffer(pFaxCategories);

//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        //if (!g_ApiInterface.FaxGetLoggingCategories(hFaxSvcHandle, &pFaxCategories, &dwNumCategories)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

		//(*pnNumCasesAttempted)++;
		//fnWriteLogFile(TEXT("### FaxSetLoggingCategories().\r\n"));
        //if (!g_ApiInterface.FaxSetLoggingCategories(hFaxSvcHandle, pFaxCategories, dwNumCategories)) {
          //  fnWriteLogFile(TEXT("FaxSetLoggingCategories() failed.  The error code is 0x%08x.  This is an error.  FaxSetLoggingCategories() should succeed.\r\n"), GetLastError());
        //}
        //else {
            //(*pnNumCasesPassed)++;
        //}

//        g_ApiInterface.FaxFreeBuffer(pFaxCategories);

        // Disconnect from the fax server
  //      g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}



BOOL WINAPI
FaxAPIDllTest(
	LPCWSTR  szWhisPhoneNumberW,
	LPCSTR   szWhisPhoneNumberA,
	LPCWSTR  szServerNameW,
    LPCSTR   szServerNameA,
    UINT     nNumCasesLocal,
    UINT     nNumCasesServer,
	PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	DWORD	 dwTestMode
)
{
    LPCTSTR  szServerName;
    UINT     nNumCases;

#ifdef UNICODE
    szServerName = szServerNameW;
#else
    szServerName = szServerNameA;
#endif


    if (szServerName) {
        nNumCases = nNumCasesServer;
		fnWriteLogFile(TEXT("WHIS> REMOTE SERVER MODE:\r\n"));
    }
    else {
        nNumCases = nNumCasesLocal;
    }

    // FaxGetConfiguration()
    fnFaxGetConfiguration(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

   

	// FaxSetConfiguration() limit testing
	if (dwTestMode == WHIS_TEST_MODE_LIMITS)
	{
		fnFaxSetConfiguration(szServerName, pnNumCasesAttempted, pnNumCasesPassed,TRUE);
	}
	else	{
		 // FaxSetConfiguration()
		fnFaxSetConfiguration(szServerName, pnNumCasesAttempted, pnNumCasesPassed,FALSE);
	}

	// FaxGetLoggingCategories()
    fnFaxGetLoggingCategories(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    // FaxSetLoggingCategories()
    fnFaxSetLoggingCategories(szServerName, pnNumCasesAttempted, pnNumCasesPassed,FALSE);

	// FaxSetLoggingCategories()
	if (dwTestMode == WHIS_TEST_MODE_LIMITS)
	{
		fnFaxSetLoggingCategories(szServerName, pnNumCasesAttempted, pnNumCasesPassed,TRUE);
	}

    if ((*pnNumCasesAttempted == nNumCases) && (*pnNumCasesPassed == *pnNumCasesAttempted)) {
        return TRUE;
    }
    else {
        return FALSE;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legwin32_whis_xml\call_handle\printapi.c ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

  printapi.c

Abstract:

  PrintApi: Fax API Test Dll: Client Print APIs
    1) FaxStartPrintJob()
    2) FaxPrintCoverPage()
    3) FaxSendDocument()
    4) FaxSendDocumentForBroadcast()

Author:

  Steven Kehrli (steveke) 8/28/1998

--*/

/*++

  Whistler Version:

  Lior Shmueli (liors) 23/11/2000

 ++*/

#include <wtypes.h>

#include "dllapi.h"

// g_hHeap is the handle to the heap
HANDLE           g_hHeap = NULL;
// g_ApiInterface is the API_INTERFACE structure
API_INTERFACE    g_ApiInterface;
// fnWriteLogFile is the pointer to the function to write a string to the log file
PFNWRITELOGFILE  fnWriteLogFile = NULL;

// whistler phone number
//LPCTSTR  g_szWhisPhoneNumber;
LPCTSTR		   g_szWhisPhoneNumber=NULL;
BOOL		   g_bRealSend=FALSE;


DWORD
DllEntry(
    HINSTANCE  hInstance,
    DWORD      dwReason,
    LPVOID     pContext
)
/*++

Routine Description:

  DLL entry point

Arguments:

  hInstance - handle to the module
  dwReason - indicates the reason for being called
  pContext - context

Return Value:

  TRUE on success

--*/
{
    return TRUE;
}

VOID WINAPI
FaxAPIDllInit(
    HANDLE            hHeap,
    API_INTERFACE     ApiInterface,
    PFNWRITELOGFILEW  pfnWriteLogFileW,
    PFNWRITELOGFILEA  pfnWriteLogFileA
)
{
    // Set g_hHeap
    g_hHeap = hHeap;
    // Set g_ApiInterface
    g_ApiInterface = ApiInterface;
#ifdef UNICODE
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileW;
#else
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileA;
#endif

    return;
}

VOID
fnFaxStartPrintJob(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxStartPrintJob()

Return Value:

  None

--*/
{
    // FaxPrintInfo is the fax print info
    FAX_PRINT_INFO    FaxPrintInfo;
    // dwFaxId is the fax job id
    DWORD             dwFaxId;
    // FaxContextInfo is the fax context
    FAX_CONTEXT_INFO  FaxContextInfo;
    
	// not used, since all suite can be used on a remote printer...
	// szRemotePrinter is the name of the remote fax printer
    // LPTSTR            szRemotePrinter;
	//

	// flag for fax abortion
	BOOL				bAborted=FALSE;
	// szFaxPrinterName is the name of the fax printer
    LPTSTR            szFaxPrinterName=NULL;
	// szFaxServerName is the name of the fax server, as it should be on the FaxConextInfo struct
    TCHAR            szFaxServerName[MAX_PATH];

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxStartPrintJob().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxStartPrintJob\">"));

    ZeroMemory(&FaxPrintInfo, sizeof(FAX_PRINT_INFO));
    FaxPrintInfo.SizeOfStruct = sizeof(FAX_PRINT_INFO);
    FaxPrintInfo.RecipientNumber = g_szWhisPhoneNumber;

	fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);
	
	if (szServerName) {

        szFaxPrinterName = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(szServerName) + 7) * sizeof(TCHAR));
          lstrcpy(szFaxPrinterName, TEXT("\\\\"));
          lstrcat(szFaxPrinterName, szServerName);
		  lstrcpy(szFaxServerName,szFaxPrinterName);
		  lstrcat(szFaxPrinterName, TEXT("\\"));
          lstrcat(szFaxPrinterName, TEXT(WHIS_FAX_PRINTER_NAME));
	}
	  else {
		  szFaxPrinterName = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(szServerName) + 7) * sizeof(TCHAR));
		  lstrcpy(szFaxPrinterName, TEXT(WHIS_FAX_PRINTER_NAME));
		  lstrcpy(szFaxServerName,TEXT("Should be NULL"));

	  }

	  fnWriteLogFile(TEXT("WHIS> Fax Printer name is: %s\r\n"), szFaxPrinterName);

      ZeroMemory(&FaxContextInfo, sizeof(FAX_CONTEXT_INFO));
      FaxContextInfo.SizeOfStruct = sizeof(FAX_CONTEXT_INFO);

    // Start a fax
      (*pnNumCasesAttempted)++;
	  dwFuncCasesAtt++;
      fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	  fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

      if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
          fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxStartPrintJob() failed.  The error code is 0x%08x.  This is an error.  FaxStartPrintJob() should succeed.</result>\r\n"), GetLastError());
	  }
      else {
          if (FaxContextInfo.hDC == NULL) {
              fnWriteLogFile(TEXT("\n\t<result value=\"0\">hDC is NULL.  This is an error.  hDC should not be NULL.</result>\r\n"));
			}

          else if ((szServerName && lstrcmp(FaxContextInfo.ServerName,szFaxServerName) !=0) || (!szServerName && FaxContextInfo.ServerName[0])) {
				  fnWriteLogFile(TEXT("\n\t<result value=\"0\">ServerName: Received: %s, Expected: %s.</result>\r\n"), FaxContextInfo.ServerName, szFaxServerName);
			}
		  else	  {
				  (*pnNumCasesPassed)++;
	  			  dwFuncCasesPass++;
		          fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		  }

		  AbortDoc(FaxContextInfo.hDC);
	  	  DeleteDC(FaxContextInfo.hDC);
	  	  
		}
	  fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

      (*pnNumCasesAttempted)++;
	  dwFuncCasesAtt++;
      fnWriteLogFile(TEXT("Invalid szFaxPrinterName.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	  fnWriteLogFile(TEXT("\n\t<case name=\"Invalid szFaxPrinterName\" id=\"%d\">"), *pnNumCasesAttempted);

      if (g_ApiInterface.FaxStartPrintJob(TEXT("InvalidFaxPrinterName"), &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
          fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxStartPrintJob() returned TRUE.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PRINTER_NAME (0x%08x).</result>\r\n"), ERROR_INVALID_PRINTER_NAME);
           //End this fax
          AbortDoc(FaxContextInfo.hDC);
          DeleteDC(FaxContextInfo.hDC);
      }
      else if (GetLastError() != ERROR_INVALID_PRINTER_NAME) {
          fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PRINTER_NAME (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PRINTER_NAME);
      }
      else {
          (*pnNumCasesPassed)++;
		  dwFuncCasesPass++;
		  fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
      }
	  fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	  (*pnNumCasesAttempted)++;
	  dwFuncCasesAtt++;
      fnWriteLogFile(TEXT("pFaxPrintInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	  fnWriteLogFile(TEXT("\n\t<case name=\"pFaxPrintInfo = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

      if (g_ApiInterface.FaxStartPrintJob(TEXT("Fax"), NULL, &dwFaxId, &FaxContextInfo)) {
          fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxStartPrintJob() returned TRUE.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
           //End this fax
          AbortDoc(FaxContextInfo.hDC);
          DeleteDC(FaxContextInfo.hDC);
      }
      else if (GetLastError() != ERROR_INVALID_PARAMETER) {
          fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
      }
      else {
          (*pnNumCasesPassed)++;
		  dwFuncCasesPass++;
		  fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
      }
	  fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

      (*pnNumCasesAttempted)++;
	  dwFuncCasesAtt++;
      fnWriteLogFile(TEXT("dwFaxId = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	  fnWriteLogFile(TEXT("\n\t<case name=\"dwFaxId = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

      if (g_ApiInterface.FaxStartPrintJob(TEXT("Fax"), &FaxPrintInfo, NULL, &FaxContextInfo)) {
          fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxStartPrintJob() returned TRUE.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
           //End this fax
          AbortDoc(FaxContextInfo.hDC);
          DeleteDC(FaxContextInfo.hDC);
      }
      else if (GetLastError() != ERROR_INVALID_PARAMETER) {
          fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
      }
      else {
          (*pnNumCasesPassed)++;
		  dwFuncCasesPass++;
		  fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
      }
	  fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

      (*pnNumCasesAttempted)++;
	  dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxContextInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxContextInfo = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxStartPrintJob(TEXT("Fax"), &FaxPrintInfo, &dwFaxId, NULL)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxStartPrintJob() returned TRUE.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        // End this fax
        AbortDoc(FaxContextInfo.hDC);
        DeleteDC(FaxContextInfo.hDC);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    FaxPrintInfo.SizeOfStruct = 0;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxPrintInfo->SizeOfStruct = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxPrintInfo->SizeOfStruct = 0\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxStartPrintJob(TEXT("Fax"), &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxStartPrintJob() returned TRUE.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        // End this fax
        AbortDoc(FaxContextInfo.hDC);
        DeleteDC(FaxContextInfo.hDC);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
    FaxPrintInfo.SizeOfStruct = sizeof(FAX_PRINT_INFO);

    FaxPrintInfo.RecipientNumber = NULL;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxPrintInfo->RecipientNumber = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxPrintInfo->RecipientNumber = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxStartPrintJob(TEXT("Fax"), &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxStartPrintJob() returned TRUE.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        // End this fax
        AbortDoc(FaxContextInfo.hDC);
        DeleteDC(FaxContextInfo.hDC);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
    FaxPrintInfo.RecipientNumber = g_szWhisPhoneNumber;

	fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);

    
	#ifdef FAXAPI_W2K
		FaxPrintInfo.DrProfileName = TEXT("PrintApi");
		FaxPrintInfo.DrEmailAddress = TEXT("PrintApi");
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;
    
		fnWriteLogFile(TEXT("pFaxPrintInfo->DrEmailAddress.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"pFaxPrintInfo->DrEmailAddress\" id=\"%d\">"), *pnNumCasesAttempted);

		if (g_ApiInterface.FaxStartPrintJob(TEXT("Fax"), &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxStartPrintJob() returned TRUE.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
			// End this fax
			AbortDoc(FaxContextInfo.hDC);
			DeleteDC(FaxContextInfo.hDC);
		}
		else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		}
		else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		}
		fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
		FaxPrintInfo.DrProfileName = NULL;
		FaxPrintInfo.DrEmailAddress = NULL;
	#else
		fnWriteLogFile(TEXT("WHIS> Skipped case in whistler publics: pFaxPrintInfo->DrProfileName and pFaxPrintInfo->DrEmailAddress.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	#endif
	
	HeapFree(g_hHeap, 0, szFaxPrinterName);

    //if (szServerName) {
	//	fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
    //  szRemotePrinter = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(szServerName) + 7) * sizeof(TCHAR));
    //    lstrcpy(szRemotePrinter, TEXT("\\\\"));
    //    lstrcat(szRemotePrinter, szServerName);
	//	lstrcat(szRemotePrinter, TEXT("\\"));
    //   lstrcat(szRemotePrinter, TEXT(WHIS_FAX_PRINTER_NAME));

    //   (*pnNumCasesAttempted)++;
    //   fnWriteLogFile(TEXT("Remote Fax Printer. (Printer Name: %s) Test Case: %d.\r\n"),szRemotePrinter, *pnNumCasesAttempted);
    //   if (!g_ApiInterface.FaxStartPrintJob(szRemotePrinter, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    //      fnWriteLogFile(TEXT("FaxStartPrintJob() failed.  The error code is 0x%08x.  This is an error.  FaxStartPrintJob() should succeed.\r\n"), GetLastError());
    //    }
    //    else {
	//		 AbortDoc(FaxContextInfo.hDC);
	//			 DeleteDC(FaxContextInfo.hDC);
	//		 (*pnNumCasesPassed)++;

    //    }
	//
    //    
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxStartPrintJob, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}

VOID
fnFaxPrintCoverPage(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	BOOL	 bTestLimits
)
/*++

Routine Description:

  FaxPrintCoverPage()

Return Value:

  None

--*/
{
    // FaxPrintInfo is the fax print info
    FAX_PRINT_INFO      FaxPrintInfo;
    // dwFaxId is the fax job id
    DWORD               dwFaxId;
    // FaxContextInfo is the fax context
    FAX_CONTEXT_INFO    FaxContextInfo;
    // CoverPageInfo is the cover page info
    FAX_COVERPAGE_INFO  CoverPageInfo;
    // FaxContextInfohDC is the hDC from the fax context
    HDC                 FaxContextInfohDC;
    // szCoverPageName is the cover page name
    TCHAR               szCoverPageName[MAX_PATH];

	// szFaxPrinterName is the name of the fax printer
    LPTSTR            szFaxPrinterName=NULL;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

    fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxPrintCoverPage().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxPrintCoverPage\">"));

	

    ZeroMemory(&FaxPrintInfo, sizeof(FAX_PRINT_INFO));
    FaxPrintInfo.SizeOfStruct = sizeof(FAX_PRINT_INFO);


	fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);
	FaxPrintInfo.RecipientNumber = g_szWhisPhoneNumber;
	
    ZeroMemory(&FaxContextInfo, sizeof(FAX_CONTEXT_INFO));
    FaxContextInfo.SizeOfStruct = sizeof(FAX_CONTEXT_INFO);

    ZeroMemory(&CoverPageInfo, sizeof(FAX_COVERPAGE_INFO));
    CoverPageInfo.SizeOfStruct = sizeof(FAX_COVERPAGE_INFO);


    if (szServerName) {
	    szFaxPrinterName = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(szServerName) + 7) * sizeof(TCHAR));
        lstrcpy(szFaxPrinterName, TEXT("\\\\"));
        lstrcat(szFaxPrinterName, szServerName);
		lstrcat(szFaxPrinterName, TEXT("\\"));
        lstrcat(szFaxPrinterName, TEXT(WHIS_FAX_PRINTER_NAME));
	}
	else {
		szFaxPrinterName = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(szServerName) + 7) * sizeof(TCHAR));
		lstrcpy(szFaxPrinterName, TEXT(WHIS_FAX_PRINTER_NAME));
	}

	fnWriteLogFile(TEXT("WHIS> Fax Printer name is: %s\r\n"), szFaxPrinterName);


    // Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

   CoverPageInfo.UseServerCoverPage = TRUE;

    CoverPageInfo.CoverPageName = TEXT("confdent.cov");
	CoverPageInfo.Subject = TEXT("1/10_FPCP:SRV-confdent.cov");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Server .cov). File: confdent.cov  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (Server .cov). File: confdent.cov\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    
	
	// Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    CoverPageInfo.CoverPageName = TEXT("coverpg.lnk");
	CoverPageInfo.Subject = TEXT("2/10_FPCP:SRV-coverpg.lnk");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Server .lnk). File: coverpg.lnk  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (Server .lnk). File: coverpg.lnk\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    

    // Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	
	CoverPageInfo.CoverPageName = TEXT("confdent");
	CoverPageInfo.Subject = TEXT("3/10_FPCP:SRV-confdent");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Server .cov). File: confdent  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (Server .cov). File: confdent\" id=\"%d\">"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    
	// Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    CoverPageInfo.CoverPageName = TEXT("coverpg");
	CoverPageInfo.Subject = TEXT("4/10_FPCP:SRV-coverpg");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Server .lnk). File: coverpg  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (Server .lnk). File: coverpg\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    
	// Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    CoverPageInfo.UseServerCoverPage = FALSE;

    CoverPageInfo.CoverPageName = TEXT("confdent.cov");
	CoverPageInfo.Subject = TEXT("5/10_FPCP:LOC-confdent.cov");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Client .cov). File: confdent.cov  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (Client .cov). File: confdent.cov\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    

    // Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	
	CoverPageInfo.CoverPageName = TEXT("coverpg.lnk");
	CoverPageInfo.Subject = TEXT("6/10_FPCP:LOC-coverpg.lnk");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Client .lnk). File: coverpg.lnk  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (Client .lnk). File: coverpg.lnk\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    

    
	// Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	
	CoverPageInfo.CoverPageName = TEXT("confdent");
	CoverPageInfo.Subject = TEXT("7/10_FPCP:LOC-confdent");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Client .cov). File: confdent  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (Client .cov). File: confdent\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    

    // Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	
	CoverPageInfo.CoverPageName = TEXT("coverpg");
	CoverPageInfo.Subject = TEXT("8/10_FPCP:LOC-coverpg");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Client .lnk). File: coverpg  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (Client .lnk). File: coverpg\" id=\"%d\">"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    

    
	// Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	
	GetFullPathName(TEXT("confdent.cov"), sizeof(szCoverPageName) / sizeof(TCHAR), szCoverPageName, NULL);
    CoverPageInfo.CoverPageName = szCoverPageName;
	CoverPageInfo.Subject = TEXT("9/10_FPCP:FullPath(confdent.cov)");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Client / Full Path .cov). Path: %s Test Case: %d.\r\n"),szCoverPageName, *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (Client / Full Path .cov). Path: %s\" id=\"%d\">"),szCoverPageName, *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    

    // Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	
	GetFullPathName(TEXT("coverpg.lnk"), sizeof(szCoverPageName) / sizeof(TCHAR), szCoverPageName, NULL);
    CoverPageInfo.CoverPageName = szCoverPageName;
	CoverPageInfo.Subject = TEXT("10/10_FPCP:FullPath(coverpg.lnk)");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Client / Full Path .lnk). Path %s Test Case: %d.\r\n"), szCoverPageName,*pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (Client / Full Path .lnk). Path %s\" id=\"%d\">"), szCoverPageName,*pnNumCasesAttempted);

    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxContextInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxContextInfo = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxPrintCoverPage(NULL, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() returned TRUE.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pCoverPageInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pCoverPageInfo = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, NULL)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() returned TRUE.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    FaxContextInfo.SizeOfStruct = 0;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxContextInfo->SizeOfStruct = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxContextInfo->SizeOfStruct = 0\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() returned TRUE.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    FaxContextInfo.SizeOfStruct = sizeof(FAX_CONTEXT_INFO);

    FaxContextInfohDC = FaxContextInfo.hDC;
    FaxContextInfo.hDC = NULL;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxContextInfo->hDC = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxContextInfo->hDC = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() returned TRUE.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
    FaxContextInfo.hDC = FaxContextInfohDC;

    CoverPageInfo.SizeOfStruct = 0;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pCoverPageInfo->SizeOfStruct = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pCoverPageInfo->SizeOfStruct = 0\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() returned TRUE.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
    CoverPageInfo.SizeOfStruct = sizeof(FAX_COVERPAGE_INFO);

    CoverPageInfo.CoverPageName = NULL;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pCoverPageInfo->CoverPageName = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pCoverPageInfo->CoverPageName = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() returned TRUE.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));



    CoverPageInfo.CoverPageName = TEXT("InvalidCoverPageName");
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Invalid pCoverPageInfo->CoverPageName.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid pCoverPageInfo->CoverPageName\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() returned TRUE.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_FILE_NOT_FOUND (0x%08x).</result>\r\n"), ERROR_FILE_NOT_FOUND);
    }
    else if (GetLastError() != ERROR_FILE_NOT_FOUND) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_FILE_NOT_FOUND (0x%08x).</result>\r\n"), GetLastError(), ERROR_FILE_NOT_FOUND);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));


    // End this fax
	AbortDoc(FaxContextInfo.hDC);
	DeleteDC(FaxContextInfo.hDC);
	HeapFree(g_hHeap, 0, szFaxPrinterName);
	
fnWriteLogFile(TEXT("$$$ Summery for FaxPrintCoverPage, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}

VOID
fnFaxSendDocument(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxSendDocument()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE              hFaxSvcHandle;
    // pFaxConfig is a pointer to the fax configuration
    PFAX_CONFIGURATION  pFaxConfig;
    // FaxJobParam is the fax job params
    FAX_JOB_PARAM       FaxJobParam;
    // CoverPageInfo is the cover page info
    FAX_COVERPAGE_INFO  CoverPageInfo;
    // dwFaxId is the fax job id
    DWORD               dwFaxId;
    // szCoverPageName is the cover page name
    TCHAR               szCoverPageName[MAX_PATH];

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxSendDocument().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxSendDocument\">"));

    ZeroMemory(&FaxJobParam, sizeof(FAX_JOB_PARAM));
    FaxJobParam.SizeOfStruct = sizeof(FAX_JOB_PARAM);
    FaxJobParam.RecipientNumber = g_szWhisPhoneNumber;

	fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);

    ZeroMemory(&CoverPageInfo, sizeof(FAX_COVERPAGE_INFO));
    CoverPageInfo.SizeOfStruct = sizeof(FAX_COVERPAGE_INFO);

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not GET configuration, The error code is 0x%08x.\r\n"), GetLastError());
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    pFaxConfig->PauseServerQueue = TRUE;

    if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not SET configuration, The error code is 0x%08x.\r\n"), GetLastError());
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (kodak.tif).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (kodak.tif)\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("kodak.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
		(*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    // Send a document
/*    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (fax.tif).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (fax.tif)\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (.txt).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (.txt)\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("printapi.txt"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (.doc).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (.doc)\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("printapi.doc"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (.xls).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (.xls)\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("printapi.xls"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (.ppt).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (.ppt)\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("printapi.ppt"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));


    CoverPageInfo.UseServerCoverPage = TRUE;

    CoverPageInfo.CoverPageName = TEXT("confdent.cov");
	CoverPageInfo.Subject = TEXT("1/10_FSD:SRV-confdent.cov");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Server .cov). File: confdent.cov  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case with Cover Page (Server .cov). File: confdent.cov\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    CoverPageInfo.CoverPageName = TEXT("coverpg.lnk");
	CoverPageInfo.Subject = TEXT("2/10_FSD:SRV-coverpg.lnk");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Server .lnk). File coverpg.lnk  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case with Cover Page (Server .lnk). File coverpg.lnk\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    CoverPageInfo.CoverPageName = TEXT("confdent");
	CoverPageInfo.Subject = TEXT("3/10_FSD:SRV-confdent");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Server .cov). File: confdent  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case with Cover Page (Server .cov). File: confdent\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    CoverPageInfo.CoverPageName = TEXT("coverpg");
	CoverPageInfo.Subject = TEXT("4/10_FSD:SRV-coverpg");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Server .lnk). File: coverpg  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case with Cover Page (Server .lnk). File: coverpg\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    CoverPageInfo.UseServerCoverPage = FALSE;

    CoverPageInfo.CoverPageName = TEXT("confdent.cov");
	CoverPageInfo.Subject = TEXT("5/10_FSD:LOC-confdent.cov");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Client .cov). File: confdent.cov  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case with Cover Page (Client .cov). File: confdent.cov\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    CoverPageInfo.CoverPageName = TEXT("coverpg.lnk");
	CoverPageInfo.Subject = TEXT("6/10_FSD:LOC-coverpg.lnk");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Client .lnk). File: coverpg.lnk  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case with Cover Page (Client .lnk). File: coverpg.lnk\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    CoverPageInfo.CoverPageName = TEXT("confdent");
	CoverPageInfo.Subject = TEXT("7/10_FSD:LOC-confdent");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Client .cov). File: confdent  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case with Cover Page (Client .cov). File: confdent\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    CoverPageInfo.CoverPageName = TEXT("coverpg");
	CoverPageInfo.Subject = TEXT("8/10_FSD:LOC-coverpg");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Client .lnk). File: coverpg  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case with Cover Page (Client .lnk). File: coverpg\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    GetFullPathName(TEXT("confdent.cov"), sizeof(szCoverPageName) / sizeof(TCHAR), szCoverPageName, NULL);


    CoverPageInfo.CoverPageName = szCoverPageName;
	CoverPageInfo.Subject = TEXT("9/10_FSD:FullPath(confdent.cov)");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Client / Full Path .cov). Path: %s Test Case: %d.\r\n"),szCoverPageName, *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case with Cover Page (Client / Full Path .cov). Path: %s\" id=\"%d\">"),szCoverPageName, *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    GetFullPathName(TEXT("coverpg.lnk"), sizeof(szCoverPageName) / sizeof(TCHAR), szCoverPageName, NULL);
    CoverPageInfo.CoverPageName = szCoverPageName;
	CoverPageInfo.Subject = TEXT("10/10_FSD:FullPath(confdent.lnk)");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Client / Full Path .lnk).  Path: %s Test Case: %d.\r\n"), szCoverPageName, *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case with Cover Page (Client / Full Path .lnk).  Path: %s\" id=\"%d\">"), szCoverPageName, *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSendDocument(NULL, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("szDocument = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"szDocument = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, NULL, &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxJobParam = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxJobParam = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), NULL, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Invalid document.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid document\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("InvalidDocumentName"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_FILE_NOT_FOUND (0x%08x).</result>\r\n"), ERROR_FILE_NOT_FOUND);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_FILE_NOT_FOUND) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_FILE_NOT_FOUND (0x%08x).\r\n"), GetLastError(), ERROR_FILE_NOT_FOUND);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Invalid document type (.bad).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid document type (.bad)\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("printapi.bad"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).</result>\r\n"), ERROR_INVALID_DATA);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_DATA) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_DATA);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    FaxJobParam.SizeOfStruct = 0;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxJobParam->SizeOfStruct = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxJobParam->SizeOfStruct = 0\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
    FaxJobParam.SizeOfStruct = sizeof(FAX_JOB_PARAM);

    FaxJobParam.RecipientNumber = NULL;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxJobParam->RecipientNumber = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxJobParam->RecipientNumber = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
    FaxJobParam.RecipientNumber = g_szWhisPhoneNumber;

	fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);

    FaxJobParam.ScheduleAction = -1;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxJobParam->ScheduleAction = -1.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxJobParam->ScheduleAction = -1\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
    FaxJobParam.ScheduleAction = 0;

    FaxJobParam.DeliveryReportType = -1;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxJobParam->DeliveryReportType = -1.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxJobParam->DeliveryReportType = -1\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
    FaxJobParam.DeliveryReportType = DRT_NONE;

    CoverPageInfo.SizeOfStruct = 0;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pCoverPageInfo->SizeOfStruct = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pCoverPageInfo->SizeOfStruct = 0\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).</result>\r\n"), ERROR_INVALID_DATA);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_DATA) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_DATA (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_DATA);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
    CoverPageInfo.SizeOfStruct = sizeof(FAX_COVERPAGE_INFO);

    CoverPageInfo.CoverPageName = NULL;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pCoverPageInfo->CoverPageName = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pCoverPageInfo->CoverPageName = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_FILE_NOT_FOUND (0x%08x).</result>\r\n"), ERROR_FILE_NOT_FOUND);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_FILE_NOT_FOUND) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_FILE_NOT_FOUND (0x%08x).</result>\r\n"), GetLastError(), ERROR_FILE_NOT_FOUND);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    CoverPageInfo.CoverPageName = TEXT("InvalidCoverPageName");
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Invalid pCoverPageInfo->CoverPageName.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid pCoverPageInfo->CoverPageName\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_FILE_NOT_FOUND (0x%08x).</result>\r\n"), ERROR_FILE_NOT_FOUND);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_FILE_NOT_FOUND) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_FILE_NOT_FOUND (0x%08x).</result>\r\n"), GetLastError(), ERROR_FILE_NOT_FOUND);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    pFaxConfig->PauseServerQueue = FALSE;
    g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
    g_ApiInterface.FaxFreeBuffer(pFaxConfig);

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid hFaxSvcHandle\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    	fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
	}
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n")); ++*/

//    not used, design changed so all suite will run in remote mode
//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
//        if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
//   		   fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
//           return;
 //      }
//		else
//		{
//			fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
//		}
//
  //      if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
	//		fnWriteLogFile(TEXT("WHIS> ERROR: Can not GET configuration, The error code is 0x%08x.\r\n"), GetLastError());
      //      // Disconnect from the fax server
        //    g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //pFaxConfig->PauseServerQueue = TRUE;

        //if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
		//	fnWriteLogFile(TEXT("WHIS> ERROR: Can not SET configuration, The error code is 0x%08x.\r\n"), GetLastError());
        //    g_ApiInterface.FaxFreeBuffer(pFaxConfig);
            // Disconnect from the fax server
        //    g_ApiInterface.FaxClose(hFaxSvcHandle);
        //    return;
        //}

        //(*pnNumCasesAttempted)++;
        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("kodak.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        //    fnWriteLogFile(TEXT("FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.\r\n"), GetLastError());
        //}
        //else {
		//	if (!g_bRealSend)	{
		//					g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		//	}
        //    (*pnNumCasesPassed)++;
        //}

        //pFaxConfig->PauseServerQueue = FALSE;
        //g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        //g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxSendDocument, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}

BOOL CALLBACK
fnBroadcastCallback(
    HANDLE               hFaxSvcHandle,
    DWORD                dwRecipientNumber,
    LPVOID               lpContext,
    PFAX_JOB_PARAM       pFaxJobParam,
    PFAX_COVERPAGE_INFO  pCoverPageInfo
)
/*++

Routine Description:

  FaxSendDocumentForBroadcast() callback

Return Value:

  TRUE to enumerate another recipient

--*/
{
    BOOL     bRet;
    LPDWORD  pdwIndex;

    pdwIndex = (LPDWORD) lpContext;

    if (*pdwIndex != (dwRecipientNumber - 1)) {
        return FALSE;
    }

    switch (*pdwIndex) {
        case 0:
            pFaxJobParam->RecipientNumber = g_szWhisPhoneNumber;

			fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);

            pCoverPageInfo->UseServerCoverPage = TRUE;
            pCoverPageInfo->CoverPageName = TEXT("confdent.cov");
            bRet = TRUE;
            break;

        case 1:
            pFaxJobParam->RecipientNumber = g_szWhisPhoneNumber;

			fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);

            pCoverPageInfo->UseServerCoverPage = TRUE;
            pCoverPageInfo->CoverPageName = TEXT("confdent.cov");
            bRet = TRUE;
            break;

        default:
            bRet = FALSE;
            break;
    }

    (*pdwIndex)++;
    return bRet;
}

VOID
fnFaxSendDocumentForBroadcast(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxSendDocumentForBroadcast()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE              hFaxSvcHandle;
    // pFaxConfig is a pointer to the fax configuration
    PFAX_CONFIGURATION  pFaxConfig;
    // dwFaxId is the fax job id
    DWORD               dwFaxId;

    DWORD               dwIndex;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxSendDocumentForBroadcast().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxSendDocumentForBroadcast\">"));



    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not GET configuration, The error code is 0x%08x.\r\n"), GetLastError());
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    pFaxConfig->PauseServerQueue = TRUE;

    if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not SET configuration, The error code is 0x%08x.\r\n"), GetLastError());
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }


    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    dwIndex = 0;
    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocumentForBroadcast(hFaxSvcHandle, TEXT("fax.tif"), &dwFaxId, fnBroadcastCallback, &dwIndex)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocumentForBroadcast() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocumentForBroadcast() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (dwIndex != 3) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocumentForBroadcast() failed.  fnBroadcastCallback() was only called %d times.  This is an error.  fnBroadcastCallback() should have been called 3 times.</result>\r\n"), dwIndex);
        }
        else if (g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxAbort() of owner job returned TRUE.  This is an error.  FaxAbort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        }
        else if (GetLastError() != ERROR_INVALID_PARAMETER) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxAbort() of owner job should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
        }
        else {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
        }	
		
		if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 2));
							g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 1));
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
	}
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSendDocumentForBroadcast(NULL, TEXT("fax.tif"), &dwFaxId, fnBroadcastCallback, &dwIndex)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocumentForBroadcast() returned TRUE.  This is an error.  FaxSendDocumentForBroadcast() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 2));
        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 1));
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSendDocumentForBroadcast() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));

    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("szDocument = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"szDocument = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSendDocumentForBroadcast(hFaxSvcHandle, NULL, &dwFaxId, fnBroadcastCallback, &dwIndex)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocumentForBroadcast() returned TRUE.  This is an error.  FaxSendDocumentForBroadcast() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 2));
        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 1));
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSendDocumentForBroadcast() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("fnBroadcastCallback = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"fnBroadcastCallback = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSendDocumentForBroadcast(hFaxSvcHandle, TEXT("fax.tif"), &dwFaxId, NULL, &dwIndex)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocumentForBroadcast() returned TRUE.  This is an error.  FaxSendDocumentForBroadcast() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 2));
        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 1));
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSendDocumentForBroadcast() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    pFaxConfig->PauseServerQueue = FALSE;
    g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
    g_ApiInterface.FaxFreeBuffer(pFaxConfig);

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid hFaxSvcHandle\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSendDocumentForBroadcast(hFaxSvcHandle, TEXT("fax.tif"), &dwFaxId, fnBroadcastCallback, &dwIndex)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocumentForBroadcast() returned TRUE.  This is an error.  FaxSendDocumentForBroadcast() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 2));
        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 1));
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSendDocumentForBroadcast() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    //if (szServerName) {
	//	fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
    //    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
    //    }

    //    if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
            // Disconnect from the fax server
    //        g_ApiInterface.FaxClose(hFaxSvcHandle);
    //        return;
    //    }

     //   pFaxConfig->PauseServerQueue = TRUE;

        //if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
          //  g_ApiInterface.FaxFreeBuffer(pFaxConfig);
            // Disconnect from the fax server
            //g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //(*pnNumCasesAttempted)++;
        //dwIndex = 0;
        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxSendDocumentForBroadcast(hFaxSvcHandle, TEXT("fax.tif"), &dwFaxId, fnBroadcastCallback, &dwIndex)) {
            //fnWriteLogFile(TEXT("FaxSendDocumentForBroadcast() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocumentForBroadcast() should succeed.\r\n"), GetLastError());
        //}
        //else {
            //(*pnNumCasesPassed)++;

//			if (!g_bRealSend)	{
//		            g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 2));
//			        g_ApiInterface.FaxAbort(hFaxSvcHandle, (dwFaxId + 1));
//					g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
//			}
        //}

//        pFaxConfig->PauseServerQueue = FALSE;
        //g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        //g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
//        g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}

fnWriteLogFile(TEXT("$$$ Summery for FaxSendDocumentForBroadcast, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}



BOOL WINAPI
FaxAPIDllTest(
	LPCWSTR  szWhisPhoneNumberW,
	LPCSTR   szWhisPhoneNumberA,
    LPCWSTR  szServerNameW,
    LPCSTR   szServerNameA,
    UINT     nNumCasesLocal,
    UINT     nNumCasesServer,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	DWORD	 dwTestMode
)
{
    LPCTSTR  szServerName;
    UINT     nNumCases;


	// for Whis-extended only
#ifdef UNICODE
    if (lstrlen(szWhisPhoneNumberW)>0) { 
		g_szWhisPhoneNumber = szWhisPhoneNumberW; 
	}
	else {
		g_szWhisPhoneNumber=TEXT(WHIS_DEFAULT_PHONE_NUMBER);
	}
#else
	if (lstrlen(szWhisPhoneNumberA)>0) {
		g_szWhisPhoneNumber = szWhisPhoneNumberA;
	}
	else {
		g_szWhisPhoneNumber=TEXT(WHIS_DEFAULT_PHONE_NUMBER);
	}
		
#endif

#ifdef UNICODE
    szServerName = szServerNameW;
#else
    szServerName = szServerNameA;
#endif

    if (szServerName) {
        nNumCases = nNumCasesServer;
		fnWriteLogFile(TEXT("WHIS> REMOTE SERVER MODE:\r\n"));
    }
    else {
        nNumCases = nNumCasesLocal;
    }

	if (dwTestMode==WHIS_TEST_MODE_REAL_SEND) g_bRealSend=TRUE;


    // FaxStartPrintJob()
    //fnFaxStartPrintJob(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    // FaxPrintCoverPage()
    //fnFaxPrintCoverPage(szServerName, pnNumCasesAttempted, pnNumCasesPassed,TRUE);

    // FaxSendDocument()
    fnFaxSendDocument(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    // FaxSendDocumentForBroadcast()
    //fnFaxSendDocumentForBroadcast(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    if ((*pnNumCasesAttempted == nNumCases) && (*pnNumCasesPassed == *pnNumCasesAttempted)) {
        return TRUE;
    }
    else {
        return FALSE;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legwin32_whis_xml\faxapi\faxapi.c ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

  faxapi.c

Abstract:

  This module is a harness to test the Fax APIs

Author:

  Steven Kehrli (steveke) 8/28/1998

--*/

/*++

  Whistler Version:

  Lior Shmueli (liors) 23/11/2000

 ++*/

#include <wtypes.h>
#include <stdio.h>
#include <lior_platform.h>

#include "dllapi.h"
#include "faxapi.h"

#include "util.c"


VOID
fnUsageInfo(
)
/*++

Routine Description:

  Displays the usage info in stdout

Return Value:

  None

--*/
{
    wprintf(L"Fax API Test Harness.\n");
    wprintf(L"\n");
    wprintf(L"FAXAPI /I:<ini file> /L:<log file> /V\n");
    wprintf(L"\n");
    wprintf(L"  /I:<ini file>       Ini file name.  Defaults to \"%s\".\n", FAXAPI_INIFILE);
    wprintf(L"  /L:<log file>       Log file name.  Defaults to \"%s\".\n", FAXAPI_LOGFILE);
    wprintf(L"  /S:<computer name>  Computer name.  Defaults to NULL\n");
    wprintf(L"  /V                  Verbose.\n");
    wprintf(L"\n");
}

BOOL
LoadFaxAPIs(
    PAPI_INTERFACE  pApiInterface
)
/*++

Routine Description:

  Loads the Fax APIs

Arguments:

  pApiInterface - pointer to the api interface structure

Return Value:

  TRUE on success

--*/
{
    // szDllPath is the path where the fax dll resides
    WCHAR  szDllPath[MAX_PATH];

    // Clear the dll path
    ZeroMemory(szDllPath, MAX_PATH);

    // Get the path
    if (GetSystemDirectory(szDllPath, MAX_PATH) == 0) {
        LocalEcho(L"GetSystemDirectory() failed, ec = 0x%08x\n", GetLastError());
        return FALSE;
    }

    // Concatenate the fax dll with the path
    lstrcat(szDllPath, WINFAX_DLL);

    // Get the handle to the fax dll
    pApiInterface->hInstance = LoadLibrary((LPCWSTR) szDllPath);
    if (!pApiInterface->hInstance) {
        LocalEcho(L"Could not load \"%s\", ec = 0x%08x.\n", szDllPath, GetLastError());
        return FALSE;
    }

    // Map all needed functions to pApiInterface

    // FaxAbort
    pApiInterface->FaxAbort = (PFAXABORT) GetProcAddress(pApiInterface->hInstance, "FaxAbort");
    if (!pApiInterface->FaxAbort) {
        LocalEcho(L"Could not retrieve the address of \"FaxAbort()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxAccessCheck
    pApiInterface->FaxAccessCheck = (PFAXACCESSCHECK) GetProcAddress(pApiInterface->hInstance, "FaxAccessCheck");
    if (!pApiInterface->FaxAccessCheck) {
        LocalEcho(L"Could not retrieve the address of \"FaxAccessCheck()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxClose
    pApiInterface->FaxClose = (PFAXCLOSE) GetProcAddress(pApiInterface->hInstance, "FaxClose");
    if (!pApiInterface->FaxClose) {
        LocalEcho(L"Could not retrieve the address of \"FaxClose()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxCompleteJobParamsW
    pApiInterface->FaxCompleteJobParamsW = (PFAXCOMPLETEJOBPARAMSW) GetProcAddress(pApiInterface->hInstance, "FaxCompleteJobParamsW");
    if (!pApiInterface->FaxCompleteJobParamsW) {
        LocalEcho(L"Could not retrieve the address of \"FaxCompleteJobParamsW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxCompleteJobParamsA
    pApiInterface->FaxCompleteJobParamsA = (PFAXCOMPLETEJOBPARAMSA) GetProcAddress(pApiInterface->hInstance, "FaxCompleteJobParamsA");
    if (!pApiInterface->FaxCompleteJobParamsA) {
        LocalEcho(L"Could not retrieve the address of \"FaxCompleteJobParamsA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxConnectFaxServerW
    pApiInterface->FaxConnectFaxServerW = (PFAXCONNECTFAXSERVERW) GetProcAddress(pApiInterface->hInstance, "FaxConnectFaxServerW");
    if (!pApiInterface->FaxConnectFaxServerW) {
        LocalEcho(L"Could not retrieve the address of \"FaxConnectFaxServerW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxConnectFaxServerA
    pApiInterface->FaxConnectFaxServerA = (PFAXCONNECTFAXSERVERA) GetProcAddress(pApiInterface->hInstance, "FaxConnectFaxServerA");
    if (!pApiInterface->FaxConnectFaxServerA) {
        LocalEcho(L"Could not retrieve the address of \"FaxConnectFaxServerA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxEnableRoutingMethodW
    pApiInterface->FaxEnableRoutingMethodW = (PFAXENABLEROUTINGMETHODW) GetProcAddress(pApiInterface->hInstance, "FaxEnableRoutingMethodW");
    if (!pApiInterface->FaxEnableRoutingMethodW) {
        LocalEcho(L"Could not retrieve the address of \"FaxEnableRoutingMethodW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxEnableRoutingMethodA
    pApiInterface->FaxEnableRoutingMethodA = (PFAXENABLEROUTINGMETHODA) GetProcAddress(pApiInterface->hInstance, "FaxEnableRoutingMethodA");
    if (!pApiInterface->FaxEnableRoutingMethodA) {
        LocalEcho(L"Could not retrieve the address of \"FaxEnableRoutingMethodA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxEnumGlobalRoutingInfoW
    pApiInterface->FaxEnumGlobalRoutingInfoW = (PFAXENUMGLOBALROUTINGINFOW) GetProcAddress(pApiInterface->hInstance, "FaxEnumGlobalRoutingInfoW");
    if (!pApiInterface->FaxEnumGlobalRoutingInfoW) {
        LocalEcho(L"Could not retrieve the address of \"FaxEnumGlobalRoutingInfoW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxEnumGlobalRoutingInfoA
    pApiInterface->FaxEnumGlobalRoutingInfoA = (PFAXENUMGLOBALROUTINGINFOA) GetProcAddress(pApiInterface->hInstance, "FaxEnumGlobalRoutingInfoA");
    if (!pApiInterface->FaxEnumGlobalRoutingInfoA) {
        LocalEcho(L"Could not retrieve the address of \"FaxEnumGlobalRoutingInfoA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxEnumJobsW
    pApiInterface->FaxEnumJobsW = (PFAXENUMJOBSW) GetProcAddress(pApiInterface->hInstance, "FaxEnumJobsW");
    if (!pApiInterface->FaxEnumJobsW) {
        LocalEcho(L"Could not retrieve the address of \"FaxEnumJobsW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxEnumJobsA
    pApiInterface->FaxEnumJobsA = (PFAXENUMJOBSA) GetProcAddress(pApiInterface->hInstance, "FaxEnumJobsA");
    if (!pApiInterface->FaxEnumJobsA) {
        LocalEcho(L"Could not retrieve the address of \"FaxEnumJobsA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxEnumPortsW
    pApiInterface->FaxEnumPortsW = (PFAXENUMPORTSW) GetProcAddress(pApiInterface->hInstance, "FaxEnumPortsW");
    if (!pApiInterface->FaxEnumPortsW) {
        LocalEcho(L"Could not retrieve the address of \"FaxEnumPortsW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxEnumPortsA
    pApiInterface->FaxEnumPortsA = (PFAXENUMPORTSA) GetProcAddress(pApiInterface->hInstance, "FaxEnumPortsA");
    if (!pApiInterface->FaxEnumPortsA) {
        LocalEcho(L"Could not retrieve the address of \"FaxEnumPortsA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxEnumRoutingMethodsW
    pApiInterface->FaxEnumRoutingMethodsW = (PFAXENUMROUTINGMETHODSW) GetProcAddress(pApiInterface->hInstance, "FaxEnumRoutingMethodsW");
    if (!pApiInterface->FaxEnumRoutingMethodsW) {
        LocalEcho(L"Could not retrieve the address of \"FaxEnumRoutingMethodsW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxEnumRoutingMethodsA
    pApiInterface->FaxEnumRoutingMethodsA = (PFAXENUMROUTINGMETHODSA) GetProcAddress(pApiInterface->hInstance, "FaxEnumRoutingMethodsA");
    if (!pApiInterface->FaxEnumRoutingMethodsA) {
        LocalEcho(L"Could not retrieve the address of \"FaxEnumRoutingMethodsA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxFreeBuffer
    pApiInterface->FaxFreeBuffer = (PFAXFREEBUFFER) GetProcAddress(pApiInterface->hInstance, "FaxFreeBuffer");
    if (!pApiInterface->FaxFreeBuffer) {
        LocalEcho(L"Could not retrieve the address of \"FaxFreeBuffer()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxGetConfigurationW
    pApiInterface->FaxGetConfigurationW = (PFAXGETCONFIGURATIONW) GetProcAddress(pApiInterface->hInstance, "FaxGetConfigurationW");
    if (!pApiInterface->FaxGetConfigurationW) {
        LocalEcho(L"Could not retrieve the address of \"FaxGetConfigurationW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxGetConfigurationA
    pApiInterface->FaxGetConfigurationA = (PFAXGETCONFIGURATIONA) GetProcAddress(pApiInterface->hInstance, "FaxGetConfigurationA");
    if (!pApiInterface->FaxGetConfigurationA) {
        LocalEcho(L"Could not retrieve the address of \"FaxGetConfigurationA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxGetDeviceStatusW
    pApiInterface->FaxGetDeviceStatusW = (PFAXGETDEVICESTATUSW) GetProcAddress(pApiInterface->hInstance, "FaxGetDeviceStatusW");
    if (!pApiInterface->FaxGetDeviceStatusW) {
        LocalEcho(L"Could not retrieve the address of \"FaxGetDeviceStatusW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxGetDeviceStatusA
    pApiInterface->FaxGetDeviceStatusA = (PFAXGETDEVICESTATUSA) GetProcAddress(pApiInterface->hInstance, "FaxGetDeviceStatusA");
    if (!pApiInterface->FaxGetDeviceStatusA) {
        LocalEcho(L"Could not retrieve the address of \"FaxGetDeviceStatusA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxGetJobW
    pApiInterface->FaxGetJobW = (PFAXGETJOBW) GetProcAddress(pApiInterface->hInstance, "FaxGetJobW");
    if (!pApiInterface->FaxGetJobW) {
        LocalEcho(L"Could not retrieve the address of \"FaxGetJobW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxGetJobA
    pApiInterface->FaxGetJobA = (PFAXGETJOBA) GetProcAddress(pApiInterface->hInstance, "FaxGetJobA");
    if (!pApiInterface->FaxGetJobA) {
        LocalEcho(L"Could not retrieve the address of \"FaxGetJobA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxGetLoggingCategoriesW
    pApiInterface->FaxGetLoggingCategoriesW = (PFAXGETLOGGINGCATEGORIESW) GetProcAddress(pApiInterface->hInstance, "FaxGetLoggingCategoriesW");
    if (!pApiInterface->FaxGetLoggingCategoriesW) {
        LocalEcho(L"Could not retrieve the address of \"FaxGetLoggingCategoriesW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxGetLoggingCategoriesA
    pApiInterface->FaxGetLoggingCategoriesA = (PFAXGETLOGGINGCATEGORIESA) GetProcAddress(pApiInterface->hInstance, "FaxGetLoggingCategoriesA");
    if (!pApiInterface->FaxGetLoggingCategoriesA) {
        LocalEcho(L"Could not retrieve the address of \"FaxGetLoggingCategoriesA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxGetPageData
    pApiInterface->FaxGetPageData = (PFAXGETPAGEDATA) GetProcAddress(pApiInterface->hInstance, "FaxGetPageData");
    if (!pApiInterface->FaxGetPageData) {
        LocalEcho(L"Could not retrieve the address of \"FaxGetPageData()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxGetPortW
    pApiInterface->FaxGetPortW = (PFAXGETPORTW) GetProcAddress(pApiInterface->hInstance, "FaxGetPortW");
    if (!pApiInterface->FaxGetPortW) {
        LocalEcho(L"Could not retrieve the address of \"FaxGetPortW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxGetPortA
    pApiInterface->FaxGetPortA = (PFAXGETPORTA) GetProcAddress(pApiInterface->hInstance, "FaxGetPortA");
    if (!pApiInterface->FaxGetPortA) {
        LocalEcho(L"Could not retrieve the address of \"FaxGetPortA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxGetRoutingInfoW
    pApiInterface->FaxGetRoutingInfoW = (PFAXGETROUTINGINFOW) GetProcAddress(pApiInterface->hInstance, "FaxGetRoutingInfoW");
    if (!pApiInterface->FaxGetRoutingInfoW) {
        LocalEcho(L"Could not retrieve the address of \"FaxGetRoutingInfoW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxGetRoutingInfoA
    pApiInterface->FaxGetRoutingInfoA = (PFAXGETROUTINGINFOA) GetProcAddress(pApiInterface->hInstance, "FaxGetRoutingInfoA");
    if (!pApiInterface->FaxGetRoutingInfoA) {
        LocalEcho(L"Could not retrieve the address of \"FaxGetRoutingInfoA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxInitializeEventQueue
    pApiInterface->FaxInitializeEventQueue = (PFAXINITIALIZEEVENTQUEUE) GetProcAddress(pApiInterface->hInstance, "FaxInitializeEventQueue");
    if (!pApiInterface->FaxInitializeEventQueue) {
        LocalEcho(L"Could not retrieve the address of \"FaxInitializeEventQueue()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxOpenPort
    pApiInterface->FaxOpenPort = (PFAXOPENPORT) GetProcAddress(pApiInterface->hInstance, "FaxOpenPort");
    if (!pApiInterface->FaxOpenPort) {
        LocalEcho(L"Could not retrieve the address of \"FaxOpenPort()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxPrintCoverPageW
    pApiInterface->FaxPrintCoverPageW = (PFAXPRINTCOVERPAGEW) GetProcAddress(pApiInterface->hInstance, "FaxPrintCoverPageW");
    if (!pApiInterface->FaxPrintCoverPageW) {
        LocalEcho(L"Could not retrieve the address of \"FaxPrintCoverPageW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxPrintCoverPageA
    pApiInterface->FaxPrintCoverPageA = (PFAXPRINTCOVERPAGEA) GetProcAddress(pApiInterface->hInstance, "FaxPrintCoverPageA");
    if (!pApiInterface->FaxPrintCoverPageA) {
        LocalEcho(L"Could not retrieve the address of \"FaxPrintCoverPageA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxRegisterRoutingExtensionW
    pApiInterface->FaxRegisterRoutingExtensionW = (PFAXREGISTERROUTINGEXTENSIONW) GetProcAddress(pApiInterface->hInstance, "FaxRegisterRoutingExtensionW");
    if (!pApiInterface->FaxRegisterRoutingExtensionW) {
        LocalEcho(L"Could not retrieve the address of \"FaxRegisterRoutingExtensionW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxRegisterServiceProviderW
    pApiInterface->FaxRegisterServiceProviderW = (PFAXREGISTERSERVICEPROVIDERW) GetProcAddress(pApiInterface->hInstance, "FaxRegisterServiceProviderW");
    if (!pApiInterface->FaxRegisterServiceProviderW) {
        LocalEcho(L"Could not retrieve the address of \"FaxRegisterServiceProviderW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSendDocumentW
    pApiInterface->FaxSendDocumentW = (PFAXSENDDOCUMENTW) GetProcAddress(pApiInterface->hInstance, "FaxSendDocumentW");
    if (!pApiInterface->FaxSendDocumentW) {
        LocalEcho(L"Could not retrieve the address of \"FaxSendDocumentW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSendDocumentA
    pApiInterface->FaxSendDocumentA = (PFAXSENDDOCUMENTA) GetProcAddress(pApiInterface->hInstance, "FaxSendDocumentA");
    if (!pApiInterface->FaxSendDocumentA) {
        LocalEcho(L"Could not retrieve the address of \"FaxSendDocumentA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSendDocumentForBroadcastW
    pApiInterface->FaxSendDocumentForBroadcastW = (PFAXSENDDOCUMENTFORBROADCASTW) GetProcAddress(pApiInterface->hInstance, "FaxSendDocumentForBroadcastW");
    if (!pApiInterface->FaxSendDocumentForBroadcastW) {
        LocalEcho(L"Could not retrieve the address of \"FaxSendDocumentForBroadcastW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSendDocumentForBroadcastA
    pApiInterface->FaxSendDocumentForBroadcastA = (PFAXSENDDOCUMENTFORBROADCASTA) GetProcAddress(pApiInterface->hInstance, "FaxSendDocumentForBroadcastA");
    if (!pApiInterface->FaxSendDocumentForBroadcastA) {
        LocalEcho(L"Could not retrieve the address of \"FaxSendDocumentForBroadcastA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSetConfigurationW
    pApiInterface->FaxSetConfigurationW = (PFAXSETCONFIGURATIONW) GetProcAddress(pApiInterface->hInstance, "FaxSetConfigurationW");
    if (!pApiInterface->FaxSetConfigurationW) {
        LocalEcho(L"Could not retrieve the address of \"FaxSetConfigurationW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSetConfigurationA
    pApiInterface->FaxSetConfigurationA = (PFAXSETCONFIGURATIONA) GetProcAddress(pApiInterface->hInstance, "FaxSetConfigurationA");
    if (!pApiInterface->FaxSetConfigurationA) {
        LocalEcho(L"Could not retrieve the address of \"FaxSetConfigurationA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSetGlobalRoutingInfoW
    pApiInterface->FaxSetGlobalRoutingInfoW = (PFAXSETGLOBALROUTINGINFOW) GetProcAddress(pApiInterface->hInstance, "FaxSetGlobalRoutingInfoW");
    if (!pApiInterface->FaxSetGlobalRoutingInfoW) {
        LocalEcho(L"Could not retrieve the address of \"FaxSetGlobalRoutingInfoW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSetGlobalRoutingInfoA
    pApiInterface->FaxSetGlobalRoutingInfoA = (PFAXSETGLOBALROUTINGINFOA) GetProcAddress(pApiInterface->hInstance, "FaxSetGlobalRoutingInfoA");
    if (!pApiInterface->FaxSetGlobalRoutingInfoA) {
        LocalEcho(L"Could not retrieve the address of \"FaxSetGlobalRoutingInfoA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSetJobW
    pApiInterface->FaxSetJobW = (PFAXSETJOBW) GetProcAddress(pApiInterface->hInstance, "FaxSetJobW");
    if (!pApiInterface->FaxSetJobW) {
        LocalEcho(L"Could not retrieve the address of \"FaxSetJobW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSetJobA
    pApiInterface->FaxSetJobA = (PFAXSETJOBA) GetProcAddress(pApiInterface->hInstance, "FaxSetJobA");
    if (!pApiInterface->FaxSetJobA) {
        LocalEcho(L"Could not retrieve the address of \"FaxSetJobA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSetLoggingCategoriesW
    pApiInterface->FaxSetLoggingCategoriesW = (PFAXSETLOGGINGCATEGORIESW) GetProcAddress(pApiInterface->hInstance, "FaxSetLoggingCategoriesW");
    if (!pApiInterface->FaxSetLoggingCategoriesW) {
        LocalEcho(L"Could not retrieve the address of \"FaxSetLoggingCategoriesW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSetLoggingCategoriesA
    pApiInterface->FaxSetLoggingCategoriesA = (PFAXSETLOGGINGCATEGORIESA) GetProcAddress(pApiInterface->hInstance, "FaxSetLoggingCategoriesA");
    if (!pApiInterface->FaxSetLoggingCategoriesA) {
        LocalEcho(L"Could not retrieve the address of \"FaxSetLoggingCategoriesA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSetPortW
    pApiInterface->FaxSetPortW = (PFAXSETPORTW) GetProcAddress(pApiInterface->hInstance, "FaxSetPortW");
    if (!pApiInterface->FaxSetPortW) {
        LocalEcho(L"Could not retrieve the address of \"FaxSetPortW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSetPortA
    pApiInterface->FaxSetPortA = (PFAXSETPORTA) GetProcAddress(pApiInterface->hInstance, "FaxSetPortA");
    if (!pApiInterface->FaxSetPortA) {
        LocalEcho(L"Could not retrieve the address of \"FaxSetPortA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSetRoutingInfoW
    pApiInterface->FaxSetRoutingInfoW = (PFAXSETROUTINGINFOW) GetProcAddress(pApiInterface->hInstance, "FaxSetRoutingInfoW");
    if (!pApiInterface->FaxSetRoutingInfoW) {
        LocalEcho(L"Could not retrieve the address of \"FaxSetRoutingInfoW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxSetRoutingInfoA
    pApiInterface->FaxSetRoutingInfoA = (PFAXSETROUTINGINFOA) GetProcAddress(pApiInterface->hInstance, "FaxSetRoutingInfoA");
    if (!pApiInterface->FaxSetRoutingInfoA) {
        LocalEcho(L"Could not retrieve the address of \"FaxSetRoutingInfoA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxStartPrintJobW
    pApiInterface->FaxStartPrintJobW = (PFAXSTARTPRINTJOBW) GetProcAddress(pApiInterface->hInstance, "FaxStartPrintJobW");
    if (!pApiInterface->FaxStartPrintJobW) {
        LocalEcho(L"Could not retrieve the address of \"FaxStartPrintJobW()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    // FaxStartPrintJobA
    pApiInterface->FaxStartPrintJobA = (PFAXSTARTPRINTJOBA) GetProcAddress(pApiInterface->hInstance, "FaxStartPrintJobA");
    if (!pApiInterface->FaxStartPrintJobA) {
        LocalEcho(L"Could not retrieve the address of \"FaxStartPrintJobA()\".\n");
        FreeLibrary(pApiInterface->hInstance);
        return FALSE;
    }

    return TRUE;
}

BOOL
LoadFaxAPIDll(
    LPCWSTR         szIniFile,
    LPCWSTR         szCurrentSection,
    PDLL_INTERFACE  pDllInterface
)
/*++

Routine Description:

  Loads a Fax API Test Dll

Arguments:

  szIniFile - ini file name
  szCurrentSection - section name
  pDllInterface - pointer to the dll interface structure

Return Value:

  TRUE on success

--*/
{
    // szDllPath is the path where the dll resides
    WCHAR  szDllPath[MAX_PATH];

    GetPrivateProfileString(szCurrentSection, DLL_PATH, L"", szDllPath, MAX_PATH, szIniFile);

    if (!lstrcmpi(szDllPath, L"")) {
        LocalEcho(L"Could not find the \"Dll_Path\" key for section \"%s\".\n", szCurrentSection);
        return FALSE;
    }

    pDllInterface->hInstance = LoadLibrary(szDllPath);
    if (!pDllInterface->hInstance) {
        LocalEcho(L"Could not load \"%s\" for section \"%s\", ec = 0x%08x.\n", szDllPath, szCurrentSection, GetLastError());
        return FALSE;
    }

    pDllInterface->pFaxAPIDllInit = (PFAXAPIDLLINIT) GetProcAddress(pDllInterface->hInstance, "FaxAPIDllInit");
    if (!pDllInterface->pFaxAPIDllInit) {
        LocalEcho(L"Could not retrieve the address of \"FaxAPIDllInit()\".\n");
        FreeLibrary(pDllInterface->hInstance);
        return FALSE;
    }

	pDllInterface->pFaxAPIDllTest = (PFAXAPIDLLTEST) GetProcAddress(pDllInterface->hInstance, "FaxAPIDllTest");
    if (!pDllInterface->pFaxAPIDllTest) {
        LocalEcho(L"Could not retrieve the address of \"FaxAPIDllTest()\".\n");
        FreeLibrary(pDllInterface->hInstance);
        return FALSE;
    }

    return TRUE;
}

int _cdecl
main(
    INT   argc,
    CHAR  *argvA[]
)
{

    // bIniFile indicates an ini file name was found
    BOOL           bIniFile = FALSE;
    // szIniFile is the ini file name
    LPWSTR         szIniFile = NULL;
    // bLogFile indicates a log file name was found
    BOOL           bLogFile = FALSE;
    // szLogFile is the log file name
    LPWSTR         szLogFile = NULL;
    // bServerName indicates a server name was found
    BOOL           bServerName = FALSE;
    // szServerNameW is the server name
    LPWSTR         szServerNameW = NULL;
    // szServerNameA is the server name
    LPSTR          szServerNameA = NULL;
	
	// phone number 1 (ansi & widechar)
	//LPWSTR		   szWhisPhoneNumber1W=NULL;
	//LPSTR		   szWhisPhoneNumber1A=NULL;

    // szParam is a command line parameter
    LPWSTR         szParam;
    // wParamChar is a command line parameter character
    WCHAR          wParamChar;

    // ApiInterface is a API_INTERFACE structure
    API_INTERFACE  ApiInterface;

    // szSectionNames is the section names of the ini file
    LPWSTR         szSectionNames;
    // szCurrentSection is the current section
    LPWSTR         szCurrentSection;

	// whis: max routing global declaration (from ini)
    //UINT		   nWhisMaxRoutingMethods;

    // DllInterface is a DLL_INTERFACE structure
    DLL_INTERFACE  DllInterface;

    // szDescription is the description of the section
    WCHAR          szDescription[MAX_PATH];

	// szRemoteServerName is the name of the remote server
	WCHAR		   szWhisRemoteServerNameW[MAX_PATH];
	CHAR		   szWhisRemoteServerNameA[MAX_PATH];
	
	// szWhisPhoneNum1 is the 1st phone number to be used
	WCHAR		   szWhisPhoneNumber1W[MAX_PATH];
	CHAR		   szWhisPhoneNumber1A[MAX_PATH];
	
	// szWhisPhoneNum2 is the 2nd phone number to be used
	WCHAR		   szWhisPhoneNumber2W[MAX_PATH];	
	CHAR		   szWhisPhoneNumber2A[MAX_PATH];
	
	// flag for running in local case
	BOOL		   bLocalMode=TRUE;

	// result of DLL call
	BOOL		   bTestResult=FALSE;
    
	// nNumCasesLocal is the number of local cases in the section
    UINT           nNumCasesLocal;
    // nNumCasesServer is the number of server cases in the section
    UINT           nNumCasesServer;
    // nNumCasesAttempted is the number of cases attempted for the section
    UINT           nNumCasesAttempted;
    // nNumCasesPassed is the number of cases passed for the section
    UINT           nNumCasesPassed;
	// nWhisDoThisSet is a 0/1 var to flag if this test will be done
	DWORD		   dwWhisTestMode=0;

	// Summery variables
	UINT			nWhisNumSkipped=0;
	UINT			nWhisNumFailed=0;

    // iVal is the return value
    INT            iVal = -1;

    // dwIndex is a counter
    DWORD          dwIndex = 0;
    DWORD          cb;

	// total of all cases
	UINT			nTotCasesAttempted=0;
	UINT			nTotCasesPassed=0;

    


	
	// Welcome message (whis)
	LocalEcho(L"Welcome to whistler API Test");
//  LocalEcho(L"This test name is \"%s\".\n", WHIS_TITLE);
//	LocalEcho(L"This test var \"%d\".\n", dwData);
	
	
	// Get the handle to the process heap
    g_hHeap = GetProcessHeap();
	if (!g_hHeap) {
		LocalEcho(L"WHIS> ERROR Could not get proccess heap");
		goto ExitLevel0;
	}


    for (dwIndex = 1; dwIndex < (DWORD) argc; dwIndex++) {
        // Determine the memory required for the parameter
        cb = (lstrlenA(argvA[dwIndex]) + 1) * sizeof(WCHAR);

        // Allocate the memory for the parameter
        szParam = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, cb);
		
		if (!szParam) {
		LocalEcho(L"WHIS> ERROR Could not alocate params heap");
		goto ExitLevel0;
		}


        // szParam is a CHAR*, so it needs to be converted to a WCHAR*
        // Conver szParam
        MultiByteToWideChar(CP_ACP, 0, argvA[dwIndex], -1, szParam, (lstrlenA(argvA[dwIndex]) + 1) * sizeof(WCHAR));

        // Set wParamChar
        wParamChar = szParam[2];

        // Replace wParamChar
        szParam[2] = '\0';

        if ((!lstrcmpi(HELP_SWITCH_1, szParam)) || (!lstrcmpi(HELP_SWITCH_2, szParam)) || (!lstrcmpi(HELP_SWITCH_3, szParam)) || (!lstrcmpi(HELP_SWITCH_4, szParam))) {
            fnUsageInfo();
            goto ExitLevel0;
        }
        else if (!lstrcmpi(VERBOSE_SWITCH, szParam)) {
            // Set g_bVerbose to TRUE
            g_bVerbose = TRUE;
        }
        else {
            // Reset wParamChar
            szParam[2] = wParamChar;

            // Set wParamChar
            wParamChar = szParam[3];

            if (wParamChar) {
                // Replace wParamChar
                szParam[3] = '\0';

                if ((!lstrcmpi(INIFILE_SWITCH, szParam)) && (!bIniFile)) {
                    // Reset wParamChar
                    szParam[3] = wParamChar;

                    // Set bIniFile to TRUE
                    bIniFile = TRUE;

                    cb = GetFullPathName(&szParam[3], 0, NULL, NULL);
                    // Allocate the memory for the ini file
                    szIniFile = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, cb * sizeof(WCHAR));
					if (!szIniFile) {
					LocalEcho(L"WHIS> ERROR Could not alocate heap for szIniFile");
					goto ExitLevel0;
					}

                    GetFullPathName(&szParam[3], cb, szIniFile, NULL);
                }
                else if ((!lstrcmpi(LOGFILE_SWITCH, szParam)) && (!bLogFile)) {
                    // Reset wParamChar
                    szParam[3] = wParamChar;

                    // Set bLogFile to TRUE
                    bLogFile = TRUE;

                    // Allocate the memory for the log file
                    szLogFile = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(szParam) - 1) * sizeof(WCHAR));
					if (!szLogFile) {
					LocalEcho(L"WHIS> ERROR Could not alocate heap for szLogFile");
					goto ExitLevel0;
					}

                    // Set szLogFile
                    lstrcpy(szLogFile, &szParam[3]);
                }
                else if ((!lstrcmpi(SERVER_SWITCH, szParam)) && (!bServerName)) {
					LocalEcho(L"WHIS> Server Name not supported as argument, use INI file");
                    // Reset wParamChar
                    //szParam[3] = wParamChar;

                    //Set bServerName to TRUE
                    //bServerName = TRUE;

                    //Allocate the memory for the server name
                    //szServerNameW = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(szParam) - 1) * sizeof(WCHAR));
					//if (!szServerNameW) {
					//LocalEcho(L"WHIS> ERROR Could not alocate heap for szServerNameW");
					//goto ExitLevel0;
					//}
                    //szServerNameA = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(szParam) - 1) * sizeof(CHAR));
					//if (!szServerNameA) {
				
					//goto ExitLevel0;
					//}

                    // Set szServerName
                    //lstrcpy(szServerNameW, &szParam[3]);
                    //ideCharToMultiByte(CP_ACP, 0, szServerNameW, -1, szServerNameA, (lstrlenW(szServerNameW) + 1) * sizeof(CHAR), NULL, NULL);
                }
            }
        }

        // Free the parameter
        if (!HeapFree(g_hHeap, 0, szParam))
		{
				LocalEcho(L"WHIS> ERROR Could not free heap for szParam");
		}

    }

    if (!bIniFile) {
        cb = GetFullPathName(FAXAPI_INIFILE, 0, NULL, NULL);
        // Allocate the memory for the ini file
        szIniFile = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, cb * sizeof(WCHAR));
		if (!szIniFile) {
					LocalEcho(L"WHIS> ERROR Could not alocate heap for szIniFile");
					goto ExitLevel0;
					}
        GetFullPathName(FAXAPI_INIFILE, cb, szIniFile, NULL);
    }



    if (!bLogFile) {
        // Allocate the memory for the log file
        szLogFile = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(FAXAPI_LOGFILE) + 1) * sizeof(WCHAR));
		if (!szLogFile) {
					LocalEcho(L"WHIS> ERROR Could not alocate heap for szLogFile");
					goto ExitLevel0;
					}

        // Set szLogFile
        lstrcpy(szLogFile, FAXAPI_LOGFILE);
    }

    if (GetFileAttributes(szIniFile) == 0xFFFFFFFF) {
        LocalEcho(L"Could not find the ini file \"%s\".\n", szIniFile);
        fnUsageInfo();
        goto ExitLevel0;
    }

    if (!LoadFaxAPIs(&ApiInterface)) {
        goto ExitLevel0;
    }

    // Get the section names
    cb = MAX_PATH;

	
	szSectionNames = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, cb * sizeof(WCHAR));
	if (!szSectionNames) {
					LocalEcho(L"WHIS> ERROR Could not alocate heap for szSectionNames");
					goto ExitLevel0;
					}
	
	while (GetPrivateProfileSectionNames(szSectionNames, cb, szIniFile) == (cb - 2)) {
        cb += MAX_PATH;
        szSectionNames = HeapReAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, szSectionNames, cb * sizeof(WCHAR));
		if (!szSectionNames) {
					LocalEcho(L"WHIS> ERROR Could not RE-alocate heap for szSectionNames");
					goto ExitLevel0;
					}
    }

    fnOpenLogFile(szLogFile);

    for (szCurrentSection = szSectionNames; szCurrentSection[0]; szCurrentSection = (LPWSTR) ((DWORD) szCurrentSection + (lstrlen(szCurrentSection) + 1) * sizeof(WCHAR))) {
        ZeroMemory(&DllInterface, sizeof(DLL_INTERFACE));

		// read global section values
		if (wcscmp(szCurrentSection,TEXT("global"))==0)	{

			// print XML header
			fnWriteAndEcho(L"<?xml version=\"1.0\" ?>");
			fnWriteAndEcho(L"<test>");
			fnWriteAndEcho(L"<header>");
	

			
			
			
			// read phone number 1
			ZeroMemory(szWhisPhoneNumber1W, sizeof(szWhisPhoneNumber1W));
			ZeroMemory(szWhisPhoneNumber1A, sizeof(szWhisPhoneNumber1A));
			GetPrivateProfileString(szCurrentSection, GLOBAL_WHIS_PHONE_NUM_1, L"", szWhisPhoneNumber1W, MAX_PATH, szIniFile);
			if (lstrlen(szWhisPhoneNumber1W)==0)	{
				fnWriteAndEcho(L"WHIS> Warning, WhisPhoneNum1 missing, using default: \"%s\" \r\n", TEXT(WHIS_DEFAULT_PHONE_NUMBER));
				lstrcpy(szWhisPhoneNumber1W,TEXT(WHIS_DEFAULT_PHONE_NUMBER));
				WideCharToMultiByte(CP_ACP, 0, szWhisPhoneNumber1W, -1, szWhisPhoneNumber1A, (lstrlenW(szWhisPhoneNumber1W) + 1) * sizeof(CHAR), NULL, NULL);
			}
			else {
				WideCharToMultiByte(CP_ACP, 0, szWhisPhoneNumber1W, -1, szWhisPhoneNumber1A, (lstrlenW(szWhisPhoneNumber1W) + 1) * sizeof(CHAR), NULL, NULL);
			}

						
			// read phone number 2
			ZeroMemory(szWhisPhoneNumber2W, sizeof(szWhisPhoneNumber2W));
			ZeroMemory(szWhisPhoneNumber2A, sizeof(szWhisPhoneNumber2A));
			GetPrivateProfileString(szCurrentSection, GLOBAL_WHIS_PHONE_NUM_2, L"", szWhisPhoneNumber2W, MAX_PATH, szIniFile);
			if (lstrlen(szWhisPhoneNumber2W)==0)	{
				fnWriteAndEcho(L"WHIS> Warning, WhisPhoneNum2 missing, using default: \"%s\" \r\n", TEXT(WHIS_DEFAULT_PHONE_NUMBER));
				lstrcpy(szWhisPhoneNumber2W,TEXT(WHIS_DEFAULT_PHONE_NUMBER));
				WideCharToMultiByte(CP_ACP, 0, szWhisPhoneNumber2W, -1, szWhisPhoneNumber2A, (lstrlenW(szWhisPhoneNumber2W) + 1) * sizeof(CHAR), NULL, NULL);
			}
			else {
				WideCharToMultiByte(CP_ACP, 0, szWhisPhoneNumber2W, -1, szWhisPhoneNumber2A, (lstrlenW(szWhisPhoneNumber2W) + 1) * sizeof(CHAR), NULL, NULL);
			}

		
			// read server name
			ZeroMemory(szWhisRemoteServerNameW, sizeof(szWhisRemoteServerNameW));
			ZeroMemory(szWhisRemoteServerNameA, sizeof(szWhisRemoteServerNameA));
			GetPrivateProfileString(szCurrentSection,GLOBAL_WHIS_REMOTE_SERVER_NAME,L"",szWhisRemoteServerNameW,MAX_PATH,szIniFile);
			if (lstrlen(szWhisRemoteServerNameW)==0)	{
				fnWriteAndEcho(L"WHIS> Warning, szWhisRemoteServerName missing, using NULL server name (local)\r\n");
				ZeroMemory(szWhisRemoteServerNameW, sizeof(szWhisRemoteServerNameW));
				bLocalMode=TRUE;
				
			}
			else	{
				WideCharToMultiByte(CP_ACP, 0, szWhisRemoteServerNameW, -1, szWhisRemoteServerNameA, (lstrlenW(szWhisRemoteServerNameW) + 1) * sizeof(CHAR), NULL, NULL);
				bLocalMode=FALSE;
			}

	
			// read max routing extensions
			//nWhisMaxRoutingMethods = GetPrivateProfileInt(szCurrentSection, GLOBAL_WHIS_MAX_ROUTING_METHODS, 0, szIniFile);
			fnWriteAndEcho(L"WHIS> Using publics from \"%s\" \r\n", FAXAPI_PLATFORM);
			fnWriteAndEcho(L"WHIS> Whistler Phone Number \"%s\" \r\n", szWhisPhoneNumber1W);
			fnWriteAndEcho(L"WHIS> Whistler Phone Number \"%s\" \r\n", szWhisPhoneNumber2W);
			fnWriteAndEcho(L"WHIS> Whistler Remote Server Name \"%s\" \r\n", szWhisRemoteServerNameW);

#ifdef FAXAPI_W2K
	fnWriteAndEcho(L"$$$ Summery for this test, Name:Legacy C API, Id:21, Version:%s",FAXAPI_PLATFORM);
	fnWriteAndEcho(L"\t<metatest name=\"Legacy C API\" id=\"20\" version=\"WHIS_%s\"></metatest>",FAXAPI_PLATFORM);
#else
	fnWriteAndEcho(L"$$$ Summery for this test, Name:Legacy C API, Id:20, Version:%s",FAXAPI_PLATFORM);
	fnWriteAndEcho(L"\t<metatest name=\"Legacy C API\" id=\"20\" version=\"WHIS_%s\"></metatest>",FAXAPI_PLATFORM);
#endif

	fnWriteAndEcho(L"\t<run phone1=\"%s\" phone2=\"%s\" server=\"%s\"></run>",szWhisPhoneNumber1W,szWhisPhoneNumber2W,szWhisRemoteServerNameW);
	
	fnWriteAndEcho(L"</header>");
	fnWriteAndEcho(L"<body>");
			//fnWriteAndEcho(L"WHIS> Whistler Max Routing methods %d \r\n", nWhisMaxRoutingMethods);
		}
		else
		{
			if (LoadFaxAPIDll(szIniFile, szCurrentSection, &DllInterface)) {

		        ZeroMemory(szDescription, sizeof(szDescription));
			    nNumCasesLocal = 0;
				nNumCasesServer = 0;
				nNumCasesAttempted = 0;
				nNumCasesPassed = 0;
			
	            __try {
		            DllInterface.pFaxAPIDllInit(g_hHeap, ApiInterface, fnWriteLogFileW, fnWriteLogFileA);
			    }
				__except(EXCEPTION_EXECUTE_HANDLER) {
					fnWriteAndEcho(L"Exception occurred in FaxAPIDllInit() for section \"%s\".  ec = 0x%08x.\r\n", szCurrentSection, GetExceptionCode());
					goto DllFailed;
				}

				GetPrivateProfileString(szCurrentSection, DLL_DESCRIPTION, L"", szDescription, MAX_PATH, szIniFile);
				nNumCasesLocal = GetPrivateProfileInt(szCurrentSection, DLL_LOCAL_CASES, 0, szIniFile);
				nNumCasesServer = GetPrivateProfileInt(szCurrentSection, DLL_SERVER_CASES, 0, szIniFile);
				dwWhisTestMode = GetPrivateProfileInt(szCurrentSection, DLL_WHIS_TEST_MODE, 0, szIniFile);
				fnWriteAndEcho(L"\n\n\nSection: %s\r\nDescription: %s\r\nNumber of local cases: %d\r\nNumber of server cases: %d\r\nTest Mode: %d\r\n", szCurrentSection, szDescription, nNumCasesLocal, nNumCasesServer,dwWhisTestMode);
				fnWriteAndEcho(L"<section name=\"%s\" dll=\"%s\" cases=\"%d\" testmode=\"%d\">",szCurrentSection, szDescription, nNumCasesLocal, dwWhisTestMode);

				if (dwWhisTestMode == WHIS_TEST_MODE_DONT_CATCH_EXCEPTIONS)
				{
							fnWriteAndEcho(L"WHIS> Running extended test (NOTICE: WILL NOT CATCH EXCEPTIONS)...\r\n");
							if (bLocalMode)	{
								fnWriteAndEcho(L"WHIS> LOCAL MODE SET\r\n");
								bTestResult=!DllInterface.pFaxAPIDllTest(szWhisPhoneNumber1W,szWhisPhoneNumber1A,NULL, NULL, nNumCasesLocal, nNumCasesServer, &nNumCasesAttempted, &nNumCasesPassed,WHIS_TEST_MODE_DO);
							}
							else {
								fnWriteAndEcho(L"WHIS> SERVER MODE SET\r\n");
								bTestResult=!DllInterface.pFaxAPIDllTest(szWhisPhoneNumber1W,szWhisPhoneNumber1A,szWhisRemoteServerNameW, szWhisRemoteServerNameA, nNumCasesLocal, nNumCasesServer, &nNumCasesAttempted, &nNumCasesPassed,WHIS_TEST_MODE_DO);
								
							}
							
							if (bTestResult)	{
								fnWriteAndEcho(L"pFaxAPIDllTest() returned FALSE for section \"%s\".\r\n", szCurrentSection);
								}
							else {
								fnWriteAndEcho(L"pFaxAPIDllTest() returned TRUE for section \"%s\".\r\n", szCurrentSection);
								}
				} // (whis) end of don't catch exceptions
				else if (dwWhisTestMode != WHIS_TEST_MODE_SKIP) // (whis) INI configured to run this case
				{
					__try {
							fnWriteAndEcho(L"WHIS> Running extended test...\r\n");
							if (bLocalMode)	{
								fnWriteAndEcho(L"WHIS> LOCAL MODE SET\r\n");
								bTestResult=!DllInterface.pFaxAPIDllTest(szWhisPhoneNumber1W,szWhisPhoneNumber1A,NULL, NULL, nNumCasesLocal, nNumCasesServer, &nNumCasesAttempted, &nNumCasesPassed,dwWhisTestMode);
							}
							else {
								fnWriteAndEcho(L"WHIS> SERVER MODE SET\r\n");
								bTestResult=!DllInterface.pFaxAPIDllTest(szWhisPhoneNumber1W,szWhisPhoneNumber1A,szWhisRemoteServerNameW, szWhisRemoteServerNameA, nNumCasesLocal, nNumCasesServer, &nNumCasesAttempted, &nNumCasesPassed,dwWhisTestMode);
								
							}
							
							if (bTestResult)	{
								fnWriteAndEcho(L"pFaxAPIDllTest() returned FALSE for section \"%s\".\r\n", szCurrentSection);
								}
							else {
								fnWriteAndEcho(L"pFaxAPIDllTest() returned TRUE for section \"%s\".\r\n", szCurrentSection);
								}
							}
					__except(EXCEPTION_EXECUTE_HANDLER) {
							fnWriteAndEcho(L"Exception occurred in pFaxAPIDllTest() for section \"%s\".  ec = 0x%08x.\r\n", szCurrentSection, GetExceptionCode());
							fnWriteAndEcho(L"\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n");
							fnWriteAndEcho(L"\n\t</function>");
							fnWriteAndEcho(L"\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\" skip=\"-1\"></summary>");
							fnWriteAndEcho(L"\n\t</section>");
							goto DllFailed;
							}  // of try-except
				} // (whis) end of normal call to API DLL
				else {
				fnWriteAndEcho(L"Section: %s\r\nCanceled by user (see INI file for details)\r\n", szCurrentSection);
				}// (whis) end of don't run test at all

				
				fnWriteAndEcho(L"Section: %s\r\nNumber of cases attempted: %d\r\nNumber of cases passed: %d\r\n", szCurrentSection, nNumCasesAttempted, nNumCasesPassed);
				if (bLocalMode)		{
						nWhisNumSkipped=nNumCasesLocal-nNumCasesAttempted;
						nWhisNumFailed=nNumCasesAttempted-nNumCasesPassed;
				}
				else	{
						nWhisNumSkipped=nNumCasesServer-nNumCasesAttempted;
						nWhisNumFailed=nNumCasesAttempted-nNumCasesPassed;
				}

				
				fnWriteAndEcho(L"*** Number of cases skipped %d\r\n*** Number of cases failed %d\r\n",nWhisNumSkipped,nWhisNumFailed);
				fnWriteAndEcho(L"\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\" skip=\"%d\"></summary>",nNumCasesAttempted,nNumCasesPassed,nWhisNumFailed,nWhisNumSkipped);
				fnWriteAndEcho(L"\n\t</section>");
				nTotCasesAttempted+=nNumCasesAttempted;
				nTotCasesPassed+=nNumCasesPassed;

				


	DllFailed:
		        FreeLibrary(DllInterface.hInstance);
				
			}
		}
		
	}
	
		fnWriteAndEcho(L"\n\t</body>");
		fnWriteAndEcho(L"\n\t</test>");
		CloseHandle(g_hLogFile);



		iVal = 0;

	
	
		// Free the section names
		if (!HeapFree(g_hHeap, 0, szSectionNames))	{
		LocalEcho(L"WHIS> ERROR Could not free heap from szSectionNames");
		}

		// Free the phone number
		//if (szWhisPhoneNumber1W) {
		//	if (!HeapFree(g_hHeap, 0, szWhisPhoneNumber1W))	{
		//			LocalEcho(L"WHIS> ERROR Could not free heap from szWhisPhoneNumber1W");
		//	}
		//	if (!HeapFree(g_hHeap, 0, szWhisPhoneNumber1A))	{
		//			LocalEcho(L"WHIS> ERROR Could not free heap from szWhisPhoneNumber1A");
		//	}
		//}


		FreeLibrary(ApiInterface.hInstance);

		fnWriteAndEcho(L"\n\nSummery\n------------------");
		fnWriteAndEcho(L"\nNumber of cases attempted: %d\r\nNumber of cases passed: %d\r\n", nTotCasesAttempted, nTotCasesPassed);

		fnWriteAndEcho(L"\n\nSummery\n****************************************************************************");
		if (nTotCasesAttempted == nTotCasesPassed) 
		{
			fnWriteAndEcho(L"\n\nTEST PASSED: Whistler fax is Backwards compatible with W2K fax");
		}
		else
		{
			fnWriteAndEcho(L"\n\nTEST FAILED: Backwards compatibility is lacking, see FAXAPI.XML for details");
		}

		if (nTotCasesAttempted != 450)
		{
				fnWriteAndEcho(L"\n\nWarning: Not all 450 cases where executed, please make sure all sections in FAXAPI.INI are set to TESTMODE=1");
		}

	ExitLevel0:

		

		//if (szServerNameW) {
			// Free the server name
		//	if (!HeapFree(g_hHeap, 0, szServerNameW))
		//	{
		//		LocalEcho(L"WHIS> ERROR Could not free heap from szServerNameW");
		//	}
		//	if (!HeapFree(g_hHeap, 0, szServerNameA))
		//	{
		//		LocalEcho(L"WHIS> ERROR Could not free heap from szServerNameA");
		//	}
		//}

		
		if (szIniFile) {
			// Free the ini file name
			if (!HeapFree(g_hHeap, 0, szIniFile)) {
				LocalEcho(L"WHIS> ERROR Could not free heap from szIniFile");
			}

		}
		if (szLogFile) {
	        // Free the log file name
			if (!HeapFree(g_hHeap, 0, szLogFile)) {
			LocalEcho(L"WHIS> ERROR Could not free heap from szIniFile");
			}
		}

		return iVal;
	}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legwin32_whis_xml\routeapi\routeapi.h ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

  routeapi.h

Abstract:

  This module contains the global definitions

Author:

  Steven Kehrli (steveke) 8/28/1998

--*/

#ifndef _ROUTEAPI_H
#define _ROUTEAPI_H

#define ROUTEAPI_EXTENSION_W               L"RouteApi Routing Extension"
#define ROUTEAPI_EXTENSION                 TEXT("RouteApi Routing Extension")
#define ROUTEAPI_EXTENSION_FRIENDLYNAME_W  L"RouteApi Routing Extension Friendly Name"
#define ROUTEAPI_EXTENSION_FRIENDLYNAME    TEXT("RouteApi Routing Extension Friendly Name")
#define ROUTEAPI_EXTENSION_IMAGENAME_W     L"%SystemRoot%\\system32\\apiext.dll"
#define ROUTEAPI_EXTENSION_IMAGENAME       TEXT("%SystemRoot%\\system32\\apiext.dll")
#define ROUTEAPI_EXTENSION_DLLNAME_W       L"apiext.dll"
#define ROUTEAPI_EXTENSION_DLLNAME         TEXT("apiext.dll")

#define ROUTEAPI_METHOD1_W                 L"RouteApi Routing Method #1"
#define ROUTEAPI_METHOD1                   TEXT("RouteApi Routing Method #1")
#define ROUTEAPI_METHOD_FRIENDLYNAME1_W    L"RouteApi Routing Method Friendly Name #1"
#define ROUTEAPI_METHOD_FRIENDLYNAME1      TEXT("RouteApi Routing Method Friendly Name #1")
#define ROUTEAPI_METHOD_FUNCTIONNAME1_W    L"RouteApi1"
#define ROUTEAPI_METHOD_FUNCTIONNAME1      TEXT("RouteApi1")
#define ROUTEAPI_METHOD_GUID1_W            L"{4800F101-B6B7-11D0-8CDB-00C04FB6BCE9}"
#define ROUTEAPI_METHOD_GUID1              TEXT("{4800F101-B6B7-11D0-8CDB-00C04FB6BCE9}")

#define ROUTEAPI_METHOD2_W                 L"RouteApi Routing Method #2"
#define ROUTEAPI_METHOD2                   TEXT("RouteApi Routing Method #2")
#define ROUTEAPI_METHOD_FRIENDLYNAME2_W    L"RouteApi Routing Method Friendly Name #2"
#define ROUTEAPI_METHOD_FRIENDLYNAME2      TEXT("RouteApi Routing Method Friendly Name #2")
#define ROUTEAPI_METHOD_FUNCTIONNAME2_W    L"RouteApi2"
#define ROUTEAPI_METHOD_FUNCTIONNAME2      TEXT("RouteApi2")
#define ROUTEAPI_METHOD_GUID2_W            L"{4800F102-B6B7-11D0-8CDB-00C04FB6BCE9}"
#define ROUTEAPI_METHOD_GUID2              TEXT("{4800F102-B6B7-11D0-8CDB-00C04FB6BCE9}")

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legwin32_whis_xml\routeapi\apiext\apiext.c ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

  routeapi.c

Abstract:

  Window NT Fax Routing Extension.  These routing methods test the routing apis

Author:

  Steven Kehrli (steveke) 8/28/1998

--*/

#include <windows.h>
#include <stdio.h>
#include <winfax.h>
#include <faxroute.h>

#include "routeapi.h"

HANDLE                      g_hRouteHeap;                // Handle to the routing heap
PFAXROUTEADDFILE            pFaxRouteAddFile;            // API to add a file to the fax file list
PFAXROUTEDELETEFILE         pFaxRouteDeleteFile;         // API to delete a file from the fax file list
PFAXROUTEGETFILE            pFaxRouteGetFile;            // API to get a file from the fax file list
PFAXROUTEENUMFILES          pFaxRouteEnumFiles;          // API to enumerate the fax file list
PFAXROUTEMODIFYROUTINGDATA  pFaxRouteModifyRoutingData;  // API to modify the routing data for another routing method

#pragma data_seg(".INFO")

DWORD  g_dwRoutingInfo[2] = {0, 0};
BOOL   g_bEnabled[2] = {FALSE, FALSE};

#pragma data_seg()

DWORD
DllEntry(
    HINSTANCE  hInstance,
    DWORD      dwReason,
    LPVOID     pContext
)
/*++

Routine Description:

  DLL entry point

Arguments:

  hInstance - handle to the module
  dwReason - indicates the reason for being called
  pContext - context

Return Value:

  TRUE on success

--*/
{
    return TRUE;
}

BOOL WINAPI
FaxRouteInitialize(
    HANDLE                       hHeap,
    PFAX_ROUTE_CALLBACKROUTINES  pFaxRouteCallbackRoutines
)
/*++

Routine Description:

  Initializes the routing extension

Arguments:

  hHeap - handle to the heap
  pFaxRouteCallbackRoutins - pointer to fax routing callback routines

Return Value:

  TRUE on success

--*/
{
    g_hRouteHeap = hHeap;

    pFaxRouteAddFile = pFaxRouteCallbackRoutines->FaxRouteAddFile;
    pFaxRouteDeleteFile = pFaxRouteCallbackRoutines->FaxRouteDeleteFile;
    pFaxRouteGetFile = pFaxRouteCallbackRoutines->FaxRouteGetFile;
    pFaxRouteEnumFiles = pFaxRouteCallbackRoutines->FaxRouteEnumFiles;
    pFaxRouteModifyRoutingData = pFaxRouteCallbackRoutines->FaxRouteModifyRoutingData;

    return TRUE;
}

BOOL WINAPI
FaxRouteGetRoutingInfo(
    LPCWSTR  RoutingGuid,
    DWORD    dwDeviceId,
    LPBYTE   RoutingInfo,
    LPDWORD  pdwRoutingInfoSize
)
/*++

Routine Description:

  Gets the routing info for a routing method

Arguments:

  RoutingGuid - pointer to the GUID of the routing method
  dwDeviceId - port id
  RoutingInfo - pointer to the routing info
  pdwRoutingInfoSize - pointer to the size of the routing info

Return Value:

  TRUE on success

--*/
{
    DWORD  dwIndex;
    DWORD  cb;

    if (!lstrcmp(ROUTEAPI_METHOD_GUID1, RoutingGuid)) {
        dwIndex = 0;
    }
    else if (!lstrcmp(ROUTEAPI_METHOD_GUID2, RoutingGuid)) {
        dwIndex = 1;
    }
    else {
        dwIndex = -1;
    }

    if ((dwIndex == 0) || (dwIndex == 1)) {
        if (RoutingInfo == NULL) {
            *pdwRoutingInfoSize = sizeof(DWORD);
        }
        else {
            CopyMemory((LPDWORD) RoutingInfo, &g_dwRoutingInfo[dwIndex], sizeof(DWORD));
        }
    }

    return TRUE;
}

BOOL WINAPI
FaxRouteSetRoutingInfo(
    LPCWSTR     RoutingGuid,
    DWORD       dwDeviceId,
    const BYTE  *RoutingInfo,
    DWORD       dwRoutingInfoSize
)
/*++

Routine Description:

  Sets the routing info for a routing method

Arguments:

  RoutingGuid - pointer to the GUID of the routing method
  dwDeviceId - port id
  RoutingInfo - pointer to the routing info
  dwRoutingInfoSize - size of the routing info

Return Value:

  TRUE on success

--*/
{
    DWORD  dwIndex;

    if (!lstrcmp(ROUTEAPI_METHOD_GUID1, RoutingGuid)) {
        dwIndex = 0;
    }
    else if (!lstrcmp(ROUTEAPI_METHOD_GUID2, RoutingGuid)) {
        dwIndex = 1;
    }
    else {
        dwIndex = -1;
    }

    if ((dwIndex == 0) || (dwIndex == 1)) {
        if ((!RoutingInfo) || (!dwRoutingInfoSize)) {
            g_dwRoutingInfo[dwIndex] = 0;
        }
        else {
            g_dwRoutingInfo[dwIndex] = (DWORD) *(LPDWORD *) RoutingInfo;
        }
    }

    return TRUE;
}

BOOL WINAPI
FaxRouteDeviceEnable(
    LPCWSTR  RoutingGuid,
    DWORD    dwDeviceId,
    LONG     bEnable
)
/*++

Routine Description:

  Enables a routing method

Arguments:

  RoutingGuid - pointer to the GUID of the routing method
  dwDeviceId - port id
  bEnable - indicates whether the routing method is enabled or disabled

Return Value:

  TRUE on success

--*/
{
    DWORD  dwIndex=0;

    if (!lstrcmp(ROUTEAPI_METHOD_GUID1, RoutingGuid)) {
        dwIndex = 0;
    }
    else if (!lstrcmp(ROUTEAPI_METHOD_GUID2, RoutingGuid)) {
        dwIndex = 1;
    }
    else {
        dwIndex = -1;
    }

    if ((dwIndex == 0) || (dwIndex == 1)) {
        switch (bEnable) {
            case -1:
                return g_bEnabled[dwIndex];
                break;

            case 0:
                g_bEnabled[dwIndex] = FALSE;
                break;

            case 1:
                g_bEnabled[dwIndex] = TRUE;
                break;
        }
    }

    return TRUE;
}

BOOL WINAPI
FaxRouteDeviceChangeNotification(
    DWORD  dwDeviceId,
    BOOL   bNewDevice
)
/*++

Routine Description:

  Handles a device change

Arguments:

  dwDeviceId - port id
  bNewDevice - indicates whether the device is new

Return Value:

  TRUE on success

--*/
{
    return TRUE;
}

BOOL WINAPI
RouteApi1(
    PFAX_ROUTE  pFaxRoute,
    PVOID       *FailureData,
    LPDWORD     pdwFailureDataSize
)
/*++

Routine Description:

  Routing method.

Arguments:

  pFaxRoute - pointer to the fax routing structure
  FailureData - pointer to the failure data
  pdwFailureDataSize - size of the failure data

Return Value:

  TRUE on success

--*/
{
    return TRUE;
}

BOOL WINAPI
RouteApi2(
    PFAX_ROUTE  pFaxRoute,
    PVOID       *FailureData,
    LPDWORD     pdwFailureDataSize
)
/*++

Routine Description:

  Routing method.

Arguments:

  pFaxRoute - pointer to the fax routing structure
  FailureData - pointer to the failure data
  pdwFailureDataSize - size of the failure data

Return Value:

  TRUE on success

--*/
{
    return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legwin32_whis_xml\jobsapi\jobsapi.c ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

  jobsapi.c

Abstract:

  JobsApi: Fax API Test Dll: Client Job APIs
    1) FaxEnumJobs()
    2) FaxGetJob()
    3) FaxSetJob()
    4) FaxAbort()
    5) FaxGetPageData()

Author:

  Steven Kehrli (steveke) 8/28/1998

--*/

/*++

  Whistler Version:

  Lior Shmueli (liors) 23/11/2000

 ++*/

#include <wtypes.h>
#include <tchar.h>


#include "dllapi.h"

// g_hHeap is the handle to the heap
HANDLE           g_hHeap = NULL;
// g_ApiInterface is the API_INTERFACE structure
API_INTERFACE    g_ApiInterface;
// fnWriteLogFile is the pointer to the function to write a string to the log file
PFNWRITELOGFILE  fnWriteLogFile = NULL;

// whistler phone number
//LPCTSTR  g_szWhisPhoneNumber;
LPCTSTR		    g_szWhisPhoneNumber=NULL;
TCHAR			g_szWhisPhoneNumberVar1[MAX_PATH];
TCHAR			g_szWhisPhoneNumberVar2[MAX_PATH];
TCHAR			g_szWhisPhoneNumberVar3[MAX_PATH];

DWORD
DllEntry(
    HINSTANCE  hInstance,
    DWORD      dwReason,
    LPVOID     pContext
)
/*++

Routine Description:

  DLL entry point

Arguments:

  hInstance - handle to the module
  dwReason - indicates the reason for being called
  pContext - context

Return Value:

  TRUE on success

--*/
{
    return TRUE;
}

VOID WINAPI
FaxAPIDllInit(
    HANDLE            hHeap,
    API_INTERFACE     ApiInterface,
    PFNWRITELOGFILEW  pfnWriteLogFileW,
    PFNWRITELOGFILEA  pfnWriteLogFileA
)
{
    // Set g_hHeap
    g_hHeap = hHeap;
    // Set g_ApiInterface
    g_ApiInterface = ApiInterface;
#ifdef UNICODE
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileW;
#else
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileA;
#endif

    return;
}

VOID
fnFaxEnumJobs(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxEnumJobs()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE              hFaxSvcHandle;
    // pFaxConfig is the pointer to the fax configuration
    PFAX_CONFIGURATION  pFaxConfig;
    // pFaxJobs is the pointer to the fax jobs
    PFAX_JOB_ENTRY      pFaxJobs;
    // dwNumJobs1 is the number of fax jobs
    DWORD               dwNumJobs;
    // FaxJobParam1 is the first fax job params
    FAX_JOB_PARAM       FaxJobParam1;
    // FaxJobParam2 is the second fax job params
    FAX_JOB_PARAM       FaxJobParam2;
    // FaxJobParam3 is the second fax job params
    FAX_JOB_PARAM       FaxJobParam3;
    // dwFaxId1 is the first fax job id
    DWORD               dwFaxId1;
    // dwFaxId2 is the second fax job id
    DWORD               dwFaxId2;
    // dwFaxId3 is the third fax job id
    DWORD               dwFaxId3;

    DWORD               dwIndex;

	DWORD				dwInitNumJobs=0;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxEnumJobs().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxEnumJobs\">"));

    ZeroMemory(&FaxJobParam1, sizeof(FAX_JOB_PARAM));
    FaxJobParam1.SizeOfStruct = sizeof(FAX_JOB_PARAM);
    FaxJobParam1.RecipientNumber = g_szWhisPhoneNumberVar1;
    FaxJobParam1.ScheduleAction = JSA_NOW;

    ZeroMemory(&FaxJobParam2, sizeof(FAX_JOB_PARAM));
    FaxJobParam2.SizeOfStruct = sizeof(FAX_JOB_PARAM);
    FaxJobParam2.RecipientNumber = g_szWhisPhoneNumberVar2;
    FaxJobParam2.ScheduleAction = JSA_SPECIFIC_TIME;
    GetSystemTime(&FaxJobParam2.ScheduleTime);

    ZeroMemory(&FaxJobParam3, sizeof(FAX_JOB_PARAM));
    FaxJobParam3.SizeOfStruct = sizeof(FAX_JOB_PARAM);
    FaxJobParam3.RecipientNumber = g_szWhisPhoneNumberVar3;
    FaxJobParam3.ScheduleAction = JSA_DISCOUNT_PERIOD;

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> Can not connect to fax server %s, The error code is 0x%08x.\r\n"), szServerName,GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to %s\r\n"), szServerName);
	}

    if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> Can not GET configuration from %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    pFaxConfig->PauseServerQueue = TRUE;

    if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> Can not SET configuration in %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    // Enumerate the jobs
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

	fnWriteLogFile(TEXT("Valid Case.  Test Case (erase all current jobs): %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (erase all current jobs)\" id=\"%d\">"), *pnNumCasesAttempted);
    

	// count current number of jobs (override previous jobs in the queue) and Abort all of them, to leave an empty queue
	if (!g_ApiInterface.FaxEnumJobs(hFaxSvcHandle, &pFaxJobs, &dwNumJobs)) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxEnumJobs() failed.  The error code is 0x%08x.  This is an error.  FaxEnumJobs() should succeed</result>\r\n"), GetLastError());
	}
	else	{
			dwInitNumJobs=dwNumJobs;
			for (dwIndex = 0; dwIndex < dwInitNumJobs; dwIndex++) {
				        g_ApiInterface.FaxAbort(hFaxSvcHandle, pFaxJobs[dwIndex].JobId);
			}
			g_ApiInterface.FaxFreeBuffer(pFaxJobs);

			
			if (!g_ApiInterface.FaxEnumJobs(hFaxSvcHandle, &pFaxJobs, &dwNumJobs)) {
						fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxEnumJobs() failed.  The error code is 0x%08x.  This is an error.  FaxEnumJobs() should succeed</result>\r\n"), GetLastError());
			}
			else	{
					dwInitNumJobs=dwNumJobs;
					if (dwInitNumJobs > 0)		{
							fnWriteLogFile(TEXT("\n\t<result value=\"0\"WHIS> Could Not Abort All Jobs in Queue, %d jobs remained"),dwInitNumJobs);
					}
			g_ApiInterface.FaxFreeBuffer(pFaxJobs);
			}
			(*pnNumCasesPassed)++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
			dwFuncCasesPass++;
	}
		
		

	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	// Enumerate the jobs
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;


	fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);
     
	
	if (!g_ApiInterface.FaxEnumJobs(hFaxSvcHandle, &pFaxJobs, &dwNumJobs)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxEnumJobs() failed.  The error code is 0x%08x.  This is an error.  FaxEnumJobs() should succeed</result>\r\n"), GetLastError());
    }
    else {
        if (pFaxJobs == NULL) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">pFaxJobs is NULL.  This is an error.  pFaxJobs should not be NULL.</result>\r\n"));
        }

        if (dwNumJobs != dwInitNumJobs) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">dwNumJobs is %d.  This is an error.  dwNumJobs should be 0.</result>\r\n"), dwNumJobs);
        }

        if ((pFaxJobs != NULL) && (dwNumJobs == dwInitNumJobs)) {
			
            (*pnNumCasesPassed)++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
			dwFuncCasesPass++;
		
        }
		g_ApiInterface.FaxFreeBuffer(pFaxJobs);
    }
	
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    // Send a document
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam1, NULL, &dwFaxId1)) {
        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    // Send a document
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam2, NULL, &dwFaxId2)) {
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId1);

        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    // Send a document
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam3, NULL, &dwFaxId3)) {
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId1);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId2);

        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    // Enumerate the jobs
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxEnumJobs(hFaxSvcHandle, &pFaxJobs, &dwNumJobs)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxEnumJobs() failed.  The error code is 0x%08x.  This is an error.  FaxEnumJobs() should succeed</result>\r\n"), GetLastError());
    }
    else {
        if (pFaxJobs == NULL) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">pFaxJobs is NULL.  This is an error.  pFaxJobs should not be NULL</result>\r\n"));
        }

        if (dwNumJobs != dwInitNumJobs+3) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">dwNumJobs is %d.  This is an error.  dwNumJobs should be 3</result>\r\n"), dwNumJobs);
        }

        if ((pFaxJobs != NULL) && (dwNumJobs == dwInitNumJobs+3)) {
            for (dwIndex = dwInitNumJobs; dwIndex < dwNumJobs; dwIndex++) {
                if (pFaxJobs[dwIndex].SizeOfStruct != sizeof(FAX_JOB_ENTRY)) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">SizeOfStruct: Received: %d, Expected: %d</result>\r\n"), pFaxJobs[dwIndex].SizeOfStruct, sizeof(FAX_JOB_ENTRY));
                    goto FuncFailed;
                }
				fnWriteLogFile(TEXT("WHIS> (not error message) JobType: Received: %d, Expected: (JT_SEND) %d\r\n"), pFaxJobs[dwIndex].JobType, JT_SEND);
                if (pFaxJobs[dwIndex].JobType != JT_SEND) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">JobType: Received: %d, Expected: (JT_SEND) %d</result>\r\n"), pFaxJobs[dwIndex].JobType, JT_SEND);
                    goto FuncFailed;
                }

                if (pFaxJobs[dwIndex].QueueStatus != JS_PENDING) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">JobType: Received: %d, Expected: (JS_PENDING) %d</result>\r\n"), pFaxJobs[dwIndex].QueueStatus, JS_PENDING);
                    goto FuncFailed;
                }

                if (pFaxJobs[dwIndex].JobId == dwFaxId1) {
                    if (lstrcmp(pFaxJobs[dwIndex].RecipientNumber, g_szWhisPhoneNumberVar1)) {
                        fnWriteLogFile(TEXT("\n\t<result value=\"0\">RecipientNumber: Received: %s, Expected: %s</result>\r\n"), pFaxJobs[dwIndex].RecipientNumber, g_szWhisPhoneNumberVar1);
                        goto FuncFailed;
                    }

                    if (pFaxJobs[dwIndex].ScheduleAction != JSA_NOW) {
                        fnWriteLogFile(TEXT("\n\t<result value=\"0\">ScheduleAction: Received: %s, Expected: (JSA_NOW) %s</result>\r\n"), pFaxJobs[dwIndex].ScheduleAction, JSA_NOW);
                        goto FuncFailed;
                    }
                }
                else if (pFaxJobs[dwIndex].JobId == dwFaxId2) {
                    if (lstrcmp(pFaxJobs[dwIndex].RecipientNumber, g_szWhisPhoneNumberVar2)) {
                        fnWriteLogFile(TEXT("\n\t<result value=\"0\">RecipientNumber: Received: %s, Expected: %s</result>\r\n"), pFaxJobs[dwIndex].RecipientNumber, g_szWhisPhoneNumberVar2);
                        goto FuncFailed;
                    }

                    if (pFaxJobs[dwIndex].ScheduleAction != JSA_SPECIFIC_TIME) {
                        fnWriteLogFile(TEXT("\n\t<result value=\"0\">ScheduleAction: Received: %s, Expected: (JSA_SPECIFIC_TIME) %s.</result>\r\n"), pFaxJobs[dwIndex].ScheduleAction, JSA_SPECIFIC_TIME);
                        goto FuncFailed;
                    }
                }
                else if (pFaxJobs[dwIndex].JobId == dwFaxId3) {
                    if (lstrcmp(pFaxJobs[dwIndex].RecipientNumber, g_szWhisPhoneNumberVar3)) {
                        fnWriteLogFile(TEXT("\n\t<result value=\"0\">RecipientNumber: Received: %s, Expected: %s.</result>\r\n"), pFaxJobs[dwIndex].RecipientNumber, g_szWhisPhoneNumberVar1);
                        goto FuncFailed;
                    }

                    if (pFaxJobs[dwIndex].ScheduleAction != JSA_DISCOUNT_PERIOD) {
                        fnWriteLogFile(TEXT("\n\t<result value=\"0\">ScheduleAction: Received: %s, Expected: (JSA_DISCOUNT_PERIOD) %s.</result>\r\n"), pFaxJobs[dwIndex].ScheduleAction, JSA_DISCOUNT_PERIOD);
                        goto FuncFailed;
                    }
                }
                else {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">Unknown job id: %d.</result>\r\n"), pFaxJobs[dwIndex].JobId);
                    goto FuncFailed;
                }
            }

            (*pnNumCasesPassed)++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
			dwFuncCasesPass++;
        }
		FuncFailed:
        g_ApiInterface.FaxFreeBuffer(pFaxJobs);
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxEnumJobs(NULL, &pFaxJobs, &dwNumJobs)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxEnumJobs() returned TRUE.  This is an error.  FaxEnumJobs() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxJobs);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxEnumJobs() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pFaxJobs = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxJobs = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxEnumJobs(hFaxSvcHandle, NULL, &dwNumJobs)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxEnumJobs() returned TRUE.  This is an error.  FaxEnumJobs() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pFaxJobs);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxEnumJobs() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("dwNumJobs = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"dwNumJobs = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxEnumJobs(hFaxSvcHandle, &pFaxJobs, NULL)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxEnumJobs() returned TRUE.  This is an error.  FaxEnumJobs() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pFaxJobs);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxEnumJobs() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId1);
    g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId2);
    g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId3);

    pFaxConfig->PauseServerQueue = FALSE;
    g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
    g_ApiInterface.FaxFreeBuffer(pFaxConfig);

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid hFaxSvcHandle\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxEnumJobs(hFaxSvcHandle, &pFaxJobs, &dwNumJobs)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxEnumJobs() returned TRUE.  This is an error.  FaxEnumJobs() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxJobs);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxEnumJobs() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxEnumJobs(hFaxSvcHandle, &pFaxJobs, &dwNumJobs)) {
            //fnWriteLogFile(TEXT("FaxEnumJobs() failed.  The error code is 0x%08x.  This is an error.  FaxEnumJobs() should succeed.\r\n"), GetLastError());
        //}
        //else {
            //g_ApiInterface.FaxFreeBuffer(pFaxJobs);
            //(*pnNumCasesPassed)++;
				//dwFuncCasesPass++;
        //}

        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
	fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
	fnWriteLogFile(TEXT("\n\t</function>"));
	
}

VOID
fnFaxGetJob(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxGetJob()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE              hFaxSvcHandle;
    // pFaxConfig is the pointer to the fax configuration
    PFAX_CONFIGURATION  pFaxConfig;
    // pFaxJob is the pointer to the fax job
    PFAX_JOB_ENTRY      pFaxJob;
    // FaxJobParam is the fax job params
    FAX_JOB_PARAM       FaxJobParam;
    // dwFaxId is the fax job id
    DWORD               dwFaxId;

    DWORD               dwIndex;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxGetJob().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxGetJob\">"));

    ZeroMemory(&FaxJobParam, sizeof(FAX_JOB_PARAM));
    FaxJobParam.SizeOfStruct = sizeof(FAX_JOB_PARAM);
    FaxJobParam.RecipientNumber = g_szWhisPhoneNumber;

	fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);





    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> Can not connect to fax server %s, The error code is 0x%08x.\r\n"), szServerName,GetLastError());
			fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
			fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to %s\r\n"), szServerName);
	}


    if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> Can not GET configuration from %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    pFaxConfig->PauseServerQueue = TRUE;

    if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> Can not SET configuration in %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    // Send a document
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
		fnWriteLogFile(TEXT("WHIS> Can not send test document in %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    for (dwIndex = 0; dwIndex < 2; dwIndex++) {
        // Get the job
        (*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

        fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

        if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetJob() failed.  The error code is 0x%08x.  This is an error.  FaxGetJob() should succeed.</result>\r\n"), GetLastError());
        }
        else {
            if (pFaxJob == NULL) {
                fnWriteLogFile(TEXT("\n\t<result value=\"0\">pFaxJob is NULL.  This is an error.  pFaxJob should not be NULL.</result>\r\n"));
            }
            else {
                if (pFaxJob->SizeOfStruct != sizeof(FAX_JOB_ENTRY)) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">SizeOfStruct: Received: %d, Expected: %d.</result>\r\n"), pFaxJob->SizeOfStruct, sizeof(FAX_JOB_ENTRY));
                    goto FuncFailed;
                }

                if (pFaxJob->JobType != JT_SEND) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">JobType: Received: %d, Expected: (JT_SEND) %d.</result>\r\n"), pFaxJob->JobType, JT_SEND);
                    goto FuncFailed;
                }

                if (pFaxJob->QueueStatus != JS_PENDING) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">Queue status: Received: %d, Expected: (JS_PENDING) %d.</result>\r\n"), pFaxJob->QueueStatus, JS_PENDING);
                    goto FuncFailed;
                }

                if (pFaxJob->JobId != dwFaxId) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">JobId: Received: %d, Expected: %d.</result>\r\n"), pFaxJob->JobId, dwFaxId);
                    goto FuncFailed;
                }

                if (lstrcmp(pFaxJob->RecipientNumber, g_szWhisPhoneNumber)) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">RecipientNumber: Received: %s, Expected: %s.</result>\r\n"), pFaxJob->RecipientNumber, g_szWhisPhoneNumber);
                    goto FuncFailed;
                }

                if (pFaxJob->ScheduleAction != JSA_NOW) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">ScheduleAction: Received: %s, Expected: (JSA_NOW) %s.</result>\r\n"), pFaxJob->ScheduleAction, JSA_NOW);
                    goto FuncFailed;
                }

                (*pnNumCasesPassed)++;
				fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
				dwFuncCasesPass++;
            }

FuncFailed:
            g_ApiInterface.FaxFreeBuffer(pFaxJob);
        }
		fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
    }


    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetJob(NULL, dwFaxId, &pFaxJob)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetJob() returned TRUE.  This is an error.  FaxGetJob() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxJob);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetJob() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid dwFaxId.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid dwFaxId\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetJob(hFaxSvcHandle, -1, NULL)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetJob() returned TRUE.  This is an error.  FaxGetJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pFaxJob);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pFaxJob = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxJob = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, NULL)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetJob() returned TRUE.  This is an error.  FaxGetJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pFaxJob);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }

	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

    pFaxConfig->PauseServerQueue = FALSE;
    g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
    g_ApiInterface.FaxFreeBuffer(pFaxConfig);

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid hFaxSvcHandle\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetJob() returned TRUE.  This is an error.  FaxGetJob() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxJob);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetJob() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        //if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //pFaxConfig->PauseServerQueue = TRUE;

        //if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
          //  g_ApiInterface.FaxFreeBuffer(pFaxConfig);
            // Disconnect from the fax server
            //g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        // Send a document
        //if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
          //  pFaxConfig->PauseServerQueue = FALSE;
            //g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
            //g_ApiInterface.FaxFreeBuffer(pFaxConfig);

            // Disconnect from the fax server
//            g_ApiInterface.FaxClose(hFaxSvcHandle);
  //          return;
    //    }

      //  (*pnNumCasesAttempted)++;
//		dwFuncCasesAtt++;

  //      fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob)) {
            //fnWriteLogFile(TEXT("FaxGetJob() failed.  The error code is 0x%08x.  This is an error.  FaxGetJob() should succeed.\r\n"), GetLastError());
        //}
        //else {
          //  g_ApiInterface.FaxFreeBuffer(pFaxJob);
//            (*pnNumCasesPassed)++;
//			dwFuncCasesPass++;
  //      }

    //    pFaxConfig->PauseServerQueue = FALSE;
      //  g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        //g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
	fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
	fnWriteLogFile(TEXT("\n\t</function>"));
	
}

VOID
fnFaxSetJob(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	BOOL	 bTestLimits
)
/*++

Routine Description:

  FaxSetJob()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE              hFaxSvcHandle;
    // pFaxConfig is the pointer to the fax configuration
    PFAX_CONFIGURATION  pFaxConfig;
    // pFaxJob1 is the pointer to the fax job
    PFAX_JOB_ENTRY      pFaxJob1;
    // pFaxJob2 is the pointer to the fax job
    PFAX_JOB_ENTRY      pFaxJob2;
    // FaxJobParam is the fax job params
    FAX_JOB_PARAM       FaxJobParam;
    // dwFaxId is the fax job id
    DWORD               dwFaxId;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxSetJob().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxSetJob\">"));

	
    ZeroMemory(&FaxJobParam, sizeof(FAX_JOB_PARAM));
    FaxJobParam.SizeOfStruct = sizeof(FAX_JOB_PARAM);
    FaxJobParam.RecipientNumber = g_szWhisPhoneNumber;
	
	fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);

	// Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> Can not connect to fax server %s, The error code is 0x%08x.\r\n"), szServerName,GetLastError());
			fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to %s\r\n"), szServerName);
	}

    if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> Can not GET configuration from %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
			fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    pFaxConfig->PauseServerQueue = TRUE;

    if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> Can not SET configuration in %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
			fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
    // Send a document
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
		fnWriteLogFile(TEXT("WHIS> Can not send test document in %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
			fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    // Get the job
    if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob1)) {
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
			fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    // Set the job
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (JC_PAUSE).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (JC_PAUSE)\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSetJob(hFaxSvcHandle, dwFaxId, JC_PAUSE, pFaxJob1)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetJob() failed.  The error code is 0x%08x.  This is an error.  FaxSetJob() should succeed.</result>\r\n"), GetLastError());
    }
	
    else {
	
        // Get the job
        if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob2)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetJob() failed.  The error code is 0x%08x.  This is an error.  FaxGetJob() should succeed.</result>\r\n"), GetLastError());
        }
        else {
            if (pFaxJob2->QueueStatus != JS_PAUSED) {
                fnWriteLogFile(TEXT("\n\t<result value=\"0\">JobType: Received: %d, Expected: (JS_PAUSED) %d.</result>\r\n"), pFaxJob2->QueueStatus, JS_PAUSED);
            }
            else {
                (*pnNumCasesPassed)++;
				fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
				dwFuncCasesPass++;
            }

            g_ApiInterface.FaxFreeBuffer(pFaxJob2);
        }
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    g_ApiInterface.FaxFreeBuffer(pFaxJob1);
    g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

    // Send a document
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
			fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    // Get the job
    if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob1)) {
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
			fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    // Set the job
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (JC_RESUME).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (JC_RESUME)\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSetJob(hFaxSvcHandle, dwFaxId, JC_RESUME, pFaxJob1)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetJob() failed.  The error code is 0x%08x.  This is an error.  FaxSetJob() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        // Get the job
        if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob2)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetJob() failed.  The error code is 0x%08x.  This is an error.  FaxGetJob() should succeed.</result>\r\n"), GetLastError());
        }
        else {
            if (pFaxJob2->QueueStatus != JS_PENDING) {
                fnWriteLogFile(TEXT("\n\t<result value=\"0\">JobType: Received: %d, Expected: (JS_PENDING) %d.</result>\r\n"), pFaxJob2->QueueStatus, JS_PENDING);
            }
            else {
                (*pnNumCasesPassed)++;
				fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
				dwFuncCasesPass++;
            }

            g_ApiInterface.FaxFreeBuffer(pFaxJob2);
        }
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    g_ApiInterface.FaxFreeBuffer(pFaxJob1);
    g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

    // Send a document
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
			fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    // Get the job
    if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob1)) {
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
			fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    // Set the job
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (JC_RESTART).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (JC_RESTART)\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSetJob(hFaxSvcHandle, dwFaxId, JC_RESTART, pFaxJob1)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetJob() failed.  The error code is 0x%08x.  This is an error.  FaxSetJob() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        // Get the job
        if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob2)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetJob() failed.  The error code is 0x%08x.  This is an error.  FaxGetJob() should succeed.</result>\r\n"), GetLastError());
        }
        else {
            if (pFaxJob2->QueueStatus != JS_PENDING) {
                fnWriteLogFile(TEXT("\n\t<result value=\"0\">JobType: Received: %d, Expected: (JS_RESTART) %d.</result>\r\n"), pFaxJob2->QueueStatus, JS_PENDING);
            }
            else {
                (*pnNumCasesPassed)++;
				fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
				dwFuncCasesPass++;
            }

            g_ApiInterface.FaxFreeBuffer(pFaxJob2);
        }
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    g_ApiInterface.FaxFreeBuffer(pFaxJob1);
    g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

    // Send a document
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    // Get the job
    if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob1)) {
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
        return;
    }

    // Set the job
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (JC_DELETE).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (JC_DELETE)\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSetJob(hFaxSvcHandle, dwFaxId, JC_DELETE, pFaxJob1)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetJob() failed.  The error code is 0x%08x.  This is an error.  FaxSetJob() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob2)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetJob() returned TRUE.  This is an error.  FaxSetJob() should return FALSE.</result>\r\n"));
            g_ApiInterface.FaxFreeBuffer(pFaxJob2);
        }
        else {
            (*pnNumCasesPassed)++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
			dwFuncCasesPass++;
        }
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    g_ApiInterface.FaxFreeBuffer(pFaxJob1);
    g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

    // Send a document
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
			fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    // Get the job
    if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob1)) {
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }



	
  
	// Set the job (limit testing)
	if (bTestLimits)	{
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;
		fnWriteLogFile(TEXT("Invalid Case (MAX_DWORD).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"Invalid Case (MAX_DWORD)\" id=\"%d\">"), *pnNumCasesAttempted);

		if (g_ApiInterface.FaxSetJob(hFaxSvcHandle, dwFaxId, MAX_DWORD, pFaxJob1)) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">WHIS> FaxSetJob() succeeded, the is an error, FaxSetJob should fail and the error should be ERROR_INVALID_PARAMETER.</result>\r\n"));
		}
		else {
			if (GetLastError() != ERROR_INVALID_PARAMETER) {
				fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			}
			else {
				(*pnNumCasesPassed)++;
				fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
				dwFuncCasesPass++;
			}
        }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
    }
	

    g_ApiInterface.FaxFreeBuffer(pFaxJob1);
    g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

    // Send a document
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
			fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
		return;
    }

    // Get the job
    if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob1)) {
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
			fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }





    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetJob(NULL, dwFaxId, JC_RESTART, pFaxJob1)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetJob() returned TRUE.  This is an error.  FaxSetJob() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetJob() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid dwFaxId.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid dwFaxId\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetJob(hFaxSvcHandle, -1, JC_RESTART, pFaxJob1)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetJob() returned TRUE.  This is an error.  FaxSetJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Invalid dwCommand.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid dwCommand\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetJob(hFaxSvcHandle, dwFaxId, -1, pFaxJob1)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetJob() returned TRUE.  This is an error.  FaxSetJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pFaxJob = NULL.  (This will fail on whistler, see RAID 10909) Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxJob = NULL\" id=\"%d\">(This will fail on whistler, see RAID 10909)"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSetJob(hFaxSvcHandle, dwFaxId, JC_RESTART, NULL)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetJob() should Pass on whistler (see RAID 10909)</result>\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\">FaxSetJob with pFaxJob=NULL fails on whistler, see bug 10909. This Case Passed.</result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

    pFaxConfig->PauseServerQueue = FALSE;
    g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
    g_ApiInterface.FaxFreeBuffer(pFaxConfig);

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid hFaxSvcHandle\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetJob(hFaxSvcHandle, dwFaxId, JC_RESTART, pFaxJob1)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetJob() returned TRUE.  This is an error.  FaxSetJob() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetJob() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    g_ApiInterface.FaxFreeBuffer(pFaxJob1);

//    if (szServerName) {

//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));

        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        //if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
          //  // Disconnect from the fax server
//            g_ApiInterface.FaxClose(hFaxSvcHandle);
  //          return;
    //    }

      //  pFaxConfig->PauseServerQueue = TRUE;

//        if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
  //          g_ApiInterface.FaxFreeBuffer(pFaxConfig);
    //        // Disconnect from the fax server
      //      g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        // Send a document
        //if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
          //  pFaxConfig->PauseServerQueue = FALSE;
            //g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
            //g_ApiInterface.FaxFreeBuffer(pFaxConfig);

            // Disconnect from the fax server
//            g_ApiInterface.FaxClose(hFaxSvcHandle);
  //          return;
    //    }

        // Get the job
      //  if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob1)) {
        //    g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

          //  pFaxConfig->PauseServerQueue = FALSE;
//            g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
  //          g_ApiInterface.FaxFreeBuffer(pFaxConfig);
//
            // Disconnect from the fax server
  //          g_ApiInterface.FaxClose(hFaxSvcHandle);
    //        return;
      //  }

        // Set the job
//        (*pnNumCasesAttempted)++;
//		dwFuncCasesAtt++;

  //      fnWriteLogFile(TEXT("Remote hFaxSvcHandle (JC_PAUSE).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
    //    if (!g_ApiInterface.FaxSetJob(hFaxSvcHandle, dwFaxId, JC_PAUSE, pFaxJob1)) {
      //      fnWriteLogFile(TEXT("FaxSetJob() failed.  The error code is 0x%08x.  This is an error.  FaxSetJob() should succeed.\r\n"), GetLastError());
//        }
  //      else {
    //        (*pnNumCasesPassed)++;
	//		dwFuncCasesPass++;
      //  }

        //g_ApiInterface.FaxFreeBuffer(pFaxJob1);
        //g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

        // Send a document
        //if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
          //  pFaxConfig->PauseServerQueue = FALSE;
            //g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
            //g_ApiInterface.FaxFreeBuffer(pFaxConfig);

            // Disconnect from the fax server
            //g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        // Get the job
        //if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob1)) {
          //  g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
//
  //          pFaxConfig->PauseServerQueue = FALSE;
    //        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
      //      g_ApiInterface.FaxFreeBuffer(pFaxConfig);

            // Disconnect from the fax server
        //    g_ApiInterface.FaxClose(hFaxSvcHandle);
          //  return;
        //}

        // Set the job
        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle (JC_RESUME).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxSetJob(hFaxSvcHandle, dwFaxId, JC_RESUME, pFaxJob1)) {
          //  fnWriteLogFile(TEXT("FaxSetJob() failed.  The error code is 0x%08x.  This is an error.  FaxSetJob() should succeed.\r\n"), GetLastError());
        //}
        //else {
          //  (*pnNumCasesPassed)++;
			//dwFuncCasesPass++;
        //}

        //g_ApiInterface.FaxFreeBuffer(pFaxJob1);
        //g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

        // Send a document
//        if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
  //          pFaxConfig->PauseServerQueue = FALSE;
    //        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
      //      g_ApiInterface.FaxFreeBuffer(pFaxConfig);
//
            // Disconnect from the fax server
  //          g_ApiInterface.FaxClose(hFaxSvcHandle);
    //        return;
      //  }

        // Get the job
        //if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob1)) {
          //  g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

            //pFaxConfig->PauseServerQueue = FALSE;
            //g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
            //g_ApiInterface.FaxFreeBuffer(pFaxConfig);

            // Disconnect from the fax server
//            g_ApiInterface.FaxClose(hFaxSvcHandle);
  //          return;
        //}

        // Set the job
        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle (JC_RESTART).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxSetJob(hFaxSvcHandle, dwFaxId, JC_RESTART, pFaxJob1)) {
            //fnWriteLogFile(TEXT("FaxSetJob() failed.  The error code is 0x%08x.  This is an error.  FaxSetJob() should succeed.\r\n"), GetLastError());
        //}
        //else {
            //(*pnNumCasesPassed)++;
			//dwFuncCasesPass++;
        //}

        //g_ApiInterface.FaxFreeBuffer(pFaxJob1);
        //g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

        // Send a document
//        if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
  //          pFaxConfig->PauseServerQueue = FALSE;
    //        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
      //      g_ApiInterface.FaxFreeBuffer(pFaxConfig);
//
            // Disconnect from the fax server
  //          g_ApiInterface.FaxClose(hFaxSvcHandle);
    //        return;
      //  }

        // Get the job
        //if (!g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob1)) {
          //  g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

//            pFaxConfig->PauseServerQueue = FALSE;
  //          g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
 //        g_ApiInterface.FaxFreeBuffer(pFaxConfig);
///
            // Disconnect from the fax server
   //         g_ApiInterface.FaxClose(hFaxSvcHandle);
     //       return;
       // }

        // Set the job
        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle (JC_DELETE).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxSetJob(hFaxSvcHandle, dwFaxId, JC_DELETE, pFaxJob1)) {
            //fnWriteLogFile(TEXT("FaxSetJob() failed.  The error code is 0x%08x.  This is an error.  FaxSetJob() should succeed.\r\n"), GetLastError());
        //}
        //else {
          //  (*pnNumCasesPassed)++;
			//dwFuncCasesPass++;
        //}

        //g_ApiInterface.FaxFreeBuffer(pFaxJob1);
        //g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

        //pFaxConfig->PauseServerQueue = FALSE;
        //g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        //g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));

}

VOID
fnFaxAbort(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxAbort()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE              hFaxSvcHandle;
    // pFaxConfig is the pointer to the fax configuration
    PFAX_CONFIGURATION  pFaxConfig;
    // pFaxJob is the pointer to the fax job
    PFAX_JOB_ENTRY      pFaxJob;
    // FaxJobParam is the fax job params
    FAX_JOB_PARAM       FaxJobParam;
    // dwFaxId is the fax job id
    DWORD               dwFaxId;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxAbort().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxAbort\">"));


    ZeroMemory(&FaxJobParam, sizeof(FAX_JOB_PARAM));
    FaxJobParam.SizeOfStruct = sizeof(FAX_JOB_PARAM);
    FaxJobParam.RecipientNumber = g_szWhisPhoneNumber;

	fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);
	
    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> Can not connect to fax server %s, The error code is 0x%08x.\r\n"), szServerName,GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to %s\r\n"), szServerName);
	}


    if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> Can not GET configuration from %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    pFaxConfig->PauseServerQueue = TRUE;

    if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> Can not SET configuration in %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    // Send a document
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
		fnWriteLogFile(TEXT("WHIS> Can not send test document in %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    // Abort the job
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxAbort() failed.  The error code is 0x%08x.  This is an error.  FaxAbort() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (g_ApiInterface.FaxGetJob(hFaxSvcHandle, dwFaxId, &pFaxJob)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetJob() returned TRUE.  This is an error.  FaxGetJob() should return FALSE.</result>\r\n"));
            g_ApiInterface.FaxFreeBuffer(pFaxJob);
        }
        else {
            (*pnNumCasesPassed)++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
			dwFuncCasesPass++;
        }
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxAbort(NULL, dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxAbort() returned TRUE.  This is an error.  FaxAbort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxAbort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid dwFaxId.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid dwFaxId\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxAbort(hFaxSvcHandle, -1)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxAbort() returned TRUE.  This is an error.  FaxAbort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxAbort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    pFaxConfig->PauseServerQueue = FALSE;
    g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
    g_ApiInterface.FaxFreeBuffer(pFaxConfig);

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid hFaxSvcHandle\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxAbort() returned TRUE.  This is an error.  FaxAbort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxAbort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        //if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //pFaxConfig->PauseServerQueue = TRUE;

        //if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
          //  g_ApiInterface.FaxFreeBuffer(pFaxConfig);
            // Disconnect from the fax server
            //g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        // Send a document
        //if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
          //  pFaxConfig->PauseServerQueue = FALSE;
            //g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
            //g_ApiInterface.FaxFreeBuffer(pFaxConfig);

            // Disconnect from the fax server
            //g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        // Abort the job
        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

//        fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
  //      if (!g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId)) {
    //        fnWriteLogFile(TEXT("FaxAbort() failed.  The error code is 0x%08x.  This is an error.  FaxAbort() should succeed.\r\n"), GetLastError());
      //  }
        //else {
          //  (*pnNumCasesPassed)++;
			//dwFuncCasesPass++;
        //}

        //pFaxConfig->PauseServerQueue = FALSE;
        //g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        //g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
	fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
	fnWriteLogFile(TEXT("\n\t</function>"));
	
}

VOID
fnFaxGetPageData(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxGetPageData()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE              hFaxSvcHandle;
    // pFaxConfig is the pointer to the fax configuration
    PFAX_CONFIGURATION  pFaxConfig;
    // FaxJobParam is the fax job params
    FAX_JOB_PARAM       FaxJobParam;
    // dwFaxId is the fax job id
    DWORD               dwFaxId;
    // pPageDataBuffer is a pointer to the page data
    LPBYTE              pPageDataBuffer;
    // dwPageDataBufferSize is the size of the page data buffer
    DWORD               dwPageDataBufferSize;
    // dwImageWidth is the page data width
    DWORD               dwImageWidth;
    // dwImageHeight is the page data height
    DWORD               dwImageHeight;

    DWORD               dwIndex;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxGetPageData().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxGetPageData\">"));

    ZeroMemory(&FaxJobParam, sizeof(FAX_JOB_PARAM));
    FaxJobParam.SizeOfStruct = sizeof(FAX_JOB_PARAM);
    FaxJobParam.RecipientNumber = g_szWhisPhoneNumber;

	fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> Can not connect to fax server %s, The error code is 0x%08x.\r\n"), szServerName,GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to %s\r\n"), szServerName);
	}


    if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> Can not GET configuration from %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    pFaxConfig->PauseServerQueue = TRUE;

    if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> Can not SET configuration in %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    // Send a document
    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
		fnWriteLogFile(TEXT("WHIS> Can not send test document in %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        pFaxConfig->PauseServerQueue = FALSE;
        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);

        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    for (dwIndex = 0; dwIndex < 2; dwIndex++) {
        // Get the page data
        (*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

        fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

        if (!g_ApiInterface.FaxGetPageData(hFaxSvcHandle, dwFaxId, &pPageDataBuffer, &dwPageDataBufferSize, &dwImageWidth, &dwImageHeight)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetPageData() failed.  The error code is 0x%08x.  This is an error.  FaxGetPageData() should succeed.</result>\r\n"), GetLastError());
        }
        else {
            g_ApiInterface.FaxFreeBuffer(pPageDataBuffer);
            (*pnNumCasesPassed)++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
			dwFuncCasesPass++;
        }
		fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
    }		


    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetPageData(NULL, dwFaxId, &pPageDataBuffer, &dwPageDataBufferSize, &dwImageWidth, &dwImageHeight)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetPageData() returned TRUE.  This is an error.  FaxGetPageData() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pPageDataBuffer);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetPageData() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid dwFaxId.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid dwFaxId\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetPageData(hFaxSvcHandle, -1, &pPageDataBuffer, &dwPageDataBufferSize, &dwImageWidth, &dwImageHeight)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetPageData() returned TRUE.  This is an error.  FaxGetPageData() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pPageDataBuffer);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetPageData() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pPageDataBuffer = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pPageDataBuffer = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetPageData(hFaxSvcHandle, dwFaxId, NULL, &dwPageDataBufferSize, &dwImageWidth, &dwImageHeight)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetPageData() returned TRUE.  This is an error.  FaxGetPageData() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pPageDataBuffer);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetPageData() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("dwPageDataBufferSize = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"dwPageDataBufferSize = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetPageData(hFaxSvcHandle, dwFaxId, &pPageDataBuffer, NULL, &dwImageWidth, &dwImageHeight)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetPageData() returned TRUE.  This is an error.  FaxGetPageData() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pPageDataBuffer);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetPageData() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("dwImageWidth = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"dwImageWidth = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetPageData(hFaxSvcHandle, dwFaxId, &pPageDataBuffer, &dwPageDataBufferSize, NULL, &dwImageHeight)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetPageData() returned TRUE.  This is an error.  FaxGetPageData() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pPageDataBuffer);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetPageData() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("dwImageHeight = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"dwImageHeight = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetPageData(hFaxSvcHandle, dwFaxId, &pPageDataBuffer, &dwPageDataBufferSize, &dwImageWidth, NULL)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetPageData() returned TRUE.  This is an error.  FaxGetPageData() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pPageDataBuffer);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetPageData() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);

    pFaxConfig->PauseServerQueue = FALSE;
    g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
    g_ApiInterface.FaxFreeBuffer(pFaxConfig);

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid hFaxSvcHandle\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetPageData(hFaxSvcHandle, dwFaxId, &pPageDataBuffer, &dwPageDataBufferSize, &dwImageWidth, &dwImageHeight)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetPageData() returned TRUE.  This is an error.  FaxGetPageData() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pPageDataBuffer);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetPageData() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x)</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        //if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
//            return;
  //      }

    //    pFaxConfig->PauseServerQueue = TRUE;

      //  if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
        //    g_ApiInterface.FaxFreeBuffer(pFaxConfig);
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        // Send a document
//        if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
  //          pFaxConfig->PauseServerQueue = FALSE;
    //        g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
      //      g_ApiInterface.FaxFreeBuffer(pFaxConfig);
//
            // Disconnect from the fax server
  //          g_ApiInterface.FaxClose(hFaxSvcHandle);
    //        return;
      //  }

        // Get the page data
        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

//        fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
  //      if (!g_ApiInterface.FaxGetPageData(hFaxSvcHandle, dwFaxId, &pPageDataBuffer, &dwPageDataBufferSize, &dwImageWidth, &dwImageHeight)) {
    //       fnWriteLogFile(TEXT("FaxGetPageData() failed.  The error code is 0x%08x.  This is an error.  FaxGetPageData() should succeed.\r\n"), GetLastError());
     //   }
       // else {
         //   g_ApiInterface.FaxFreeBuffer(pPageDataBuffer);
           // (*pnNumCasesPassed)++;
			//dwFuncCasesPass++;
        //}

        //pFaxConfig->PauseServerQueue = FALSE;
        //g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig);
        //g_ApiInterface.FaxFreeBuffer(pFaxConfig);
//
        // Disconnect from the fax server
  //      g_ApiInterface.FaxClose(hFaxSvcHandle);
//    }
	fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
	fnWriteLogFile(TEXT("\n\t</function>"));
	
}


//BOOL WINAPI
//FaxAPIDllWhisSetPhoneNumber(
//							LPCWSTR  szWhisPhoneNumberW,
//							LPCSTR   szWhisPhoneNumberA
//							)
//{

    
//#ifdef UNICODE
    //g_szWhisPhoneNumber = szWhisPhoneNumberW;
//#else
  //  g_szWhisPhoneNumber = szWhisPhoneNumberA;
//#endif
	
	
//	fnWriteLogFile(TEXT("WHIS> Whis Phone Number Recieved: %s\r\n"),g_szWhisPhoneNumber);
	//return TRUE;
//}
							



BOOL WINAPI
FaxAPIDllTest(
	LPCWSTR  szWhisPhoneNumberW,
	LPCSTR   szWhisPhoneNumberA,
	LPCWSTR  szServerNameW,
    LPCSTR   szServerNameA,
    UINT     nNumCasesLocal,
    UINT     nNumCasesServer,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	DWORD	 dwTestMode
)
{
    LPCTSTR  szServerName;
	UINT     nNumCases;

	// for Whis-extended only
#ifdef UNICODE
    if (lstrlen(szWhisPhoneNumberW)>0) { 
		g_szWhisPhoneNumber = szWhisPhoneNumberW; 
	}
	else {
		g_szWhisPhoneNumber=TEXT(WHIS_DEFAULT_PHONE_NUMBER);
	}
#else
	if (lstrlen(szWhisPhoneNumberA)>0) {
		g_szWhisPhoneNumber = szWhisPhoneNumberA;
	}
	else {
		g_szWhisPhoneNumber=TEXT(WHIS_DEFAULT_PHONE_NUMBER);
	}
#endif

	_tcscpy(g_szWhisPhoneNumberVar1,g_szWhisPhoneNumber);
	_tcscat(g_szWhisPhoneNumberVar1,TEXT("1"));

	_tcscpy(g_szWhisPhoneNumberVar2,g_szWhisPhoneNumber);
	_tcscat(g_szWhisPhoneNumberVar2,TEXT("2"));

	_tcscpy(g_szWhisPhoneNumberVar3,g_szWhisPhoneNumber);
	_tcscat(g_szWhisPhoneNumberVar3,TEXT("3"));



#ifdef UNICODE
    szServerName = szServerNameW;
#else
    szServerName = szServerNameA;
#endif

    if (szServerName) {
        nNumCases = nNumCasesServer;
		fnWriteLogFile(TEXT("WHIS> REMOTE SERVER MODE:\r\n"));
    }
    else {
        nNumCases = nNumCasesLocal;
    }

    // FaxEnumJobs()
    fnFaxEnumJobs(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    // FaxGetJob()
    fnFaxGetJob(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

  
	if (dwTestMode==WHIS_TEST_MODE_LIMITS)	{
		// FaxSetJob() limits
		fnFaxSetJob(szServerName, pnNumCasesAttempted, pnNumCasesPassed,TRUE);
	}
	else	{
		// FaxSetJob()
		fnFaxSetJob(szServerName, pnNumCasesAttempted, pnNumCasesPassed,FALSE);
	}


    // FaxAbort()
    fnFaxAbort(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    // FaxGetPageData()
    fnFaxGetPageData(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    if ((*pnNumCasesAttempted == nNumCases) && (*pnNumCasesPassed == *pnNumCasesAttempted)) {
        return TRUE;
    }
    else {
        return FALSE;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legwin32_whis_xml\portsapi\portsapi.c ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

  confgapi.c

Abstract:

  PortsApi: Fax API Test Dll: Client Port Configuration APIs
    1) FaxEnumPorts()
    2) FaxOpenPort()
    3) FaxGetPort()
    4) FaxSetPort()
    5) FaxGetDeviceStatus()

Author:

  Steven Kehrli (steveke) 8/28/1998

--*/

/*++

  Whistler Version:

  Lior Shmueli (liors) 23/11/2000

 ++*/

#include <wtypes.h>

#include "dllapi.h"

// g_hHeap is the handle to the heap
HANDLE           g_hHeap = NULL;
// g_ApiInterface is the API_INTERFACE structure
API_INTERFACE    g_ApiInterface;
// fnWriteLogFile is the pointer to the function to write a string to the log file
PFNWRITELOGFILE  fnWriteLogFile = NULL;

#define FAXDEVICES_REGKEY    TEXT("Software\\Microsoft\\Fax\\Devices")
#define DEVICEID_REGVALUE    TEXT("Permanent Lineid")
#define FLAGS_REGVALUE       TEXT("Flags")
#define RINGS_REGVALUE       TEXT("Rings")
#define PRIORITY_REGVALUE    TEXT("Priority")
#define DEVICENAME_REGVALUE  TEXT("Device Name")
#define TSID_REGVALUE        TEXT("TSID")
#define CSID_REGVALUE        TEXT("CSID")

DWORD
DllEntry(
    HINSTANCE  hInstance,
    DWORD      dwReason,
    LPVOID     pContext
)
/*++

Routine Description:

  DLL entry point

Arguments:

  hInstance - handle to the module
  dwReason - indicates the reason for being called
  pContext - context

Return Value:

  TRUE on success

--*/
{
    return TRUE;
}

VOID WINAPI
FaxAPIDllInit(
    HANDLE            hHeap,
    API_INTERFACE     ApiInterface,
    PFNWRITELOGFILEW  pfnWriteLogFileW,
    PFNWRITELOGFILEA  pfnWriteLogFileA
)
{
    // Set g_hHeap
    g_hHeap = hHeap;
    // Set g_ApiInterface
    g_ApiInterface = ApiInterface;
#ifdef UNICODE
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileW;
#else
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileA;
#endif

    return;
}

BOOL
fnRegQueryDword(
    HKEY     hKey,
    LPTSTR   szValue,
    LPDWORD  pdwData
)
/*++

Routine Description:

  Queries a Registry data as a REG_DWORD

Arguments:

  hKey - handle to the Registry key
  szValue - value to be queried
  pdwData - pointer to the data to be queried

Return Value:

  TRUE on success

--*/
{
    DWORD  cb;

    cb = sizeof(DWORD);
    if (RegQueryValueEx(hKey, szValue, NULL, NULL, (PBYTE) pdwData, &cb)) {
        *pdwData = 0;
        return FALSE;
    }

    return TRUE;
}

BOOL
fnRegQuerySz(
    HKEY    hKey,
    LPTSTR  szValue,
    LPTSTR  *pszData
)
/*++

Routine Description:

  Queries a Registry data as a REG_SZ

Arguments:

  hKey - handle to the Registry key
  szValue - value to be queried
  pszData - pointer to the data to be queried

Return Value:

  TRUE on success

--*/
{
    DWORD  cb;

    cb = 0;
    // Determine the memory required by pszData
    if (RegQueryValueEx(hKey, szValue, NULL, NULL, NULL, &cb)) {
        return FALSE;
    }

    if (!cb) {
        *pszData = NULL;
        return TRUE;
    }

    // Allocate the memory for pszData
    *pszData = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, cb);

    if (RegQueryValueEx(hKey, szValue, NULL, NULL, (PBYTE) *pszData, &cb)) {
        HeapFree(g_hHeap, 0, *pszData);
        *pszData = NULL;
        return FALSE;
    }

    return TRUE;
}

BOOL
fnVerifyPorts(
    PFAX_PORT_INFO  pFaxPortInfo,
    DWORD           dwNumPorts
)
/*++

Routine Description:

  Verifies the fax port info vs. the registry

Arguments:

  pFaxPortInfo - pointer to the fax port info
  dwNumPorts - number of fax ports

Return Value:

  None

--*/
{
    // hFaxDevicesKey is the handle to the fax devices registry key
    HKEY    hFaxDevicesKey;
    // hFaxPortKey is the handle to the fax port registry key
    HKEY    hFaxPortKey;
    // szPortKey is the name of the fax port registry key
    TCHAR   szPortKey[9];
    // szValue is the registry value (REG_SZ)
    LPTSTR  szValue;
    // dwValue is the registry value (REG_DWORD)
    DWORD   dwValue;

    DWORD   dwIndex;

    if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, FAXDEVICES_REGKEY, 0, KEY_ALL_ACCESS, &hFaxDevicesKey)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not open the Registry Key %s, ec = 0x%08x.  This is an error.</result>\r\n"), FAXDEVICES_REGKEY, GetLastError());
        goto RegFailed0;
    }

    for (dwIndex = 0; dwIndex < dwNumPorts; dwIndex++) {
        // Initialize the string representation of the DeviceId
        ZeroMemory(szPortKey, sizeof(szPortKey));
        // Set the string representation of the DeviceId
        wsprintf(szPortKey, TEXT("%08u"), pFaxPortInfo[dwIndex].DeviceId);

        if (RegOpenKeyEx(hFaxDevicesKey, szPortKey, 0, KEY_ALL_ACCESS, &hFaxPortKey)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not open the Registry Key %s, ec = 0x%08x.  This is an error.</result>\r\n"), szPortKey, GetLastError());
            goto RegFailed1;
        }

        if (pFaxPortInfo[dwIndex].SizeOfStruct != sizeof(FAX_PORT_INFO)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">SizeOfStruct: Received: %d, Expected: %d.  This is an error.</result>\r\n"), pFaxPortInfo[dwIndex].SizeOfStruct, sizeof(FAX_PORT_INFO));
            goto RegFailed2;
        }

        if (!fnRegQueryDword(hFaxPortKey, DEVICEID_REGVALUE, &dwValue)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.  This is an error.</result>\r\n"), DEVICEID_REGVALUE, GetLastError());
            goto RegFailed2;
        }
        if (pFaxPortInfo[dwIndex].DeviceId != dwValue) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">DeviceId: Received: 0x%08x, Expected: 0x%08x.  This is an error.</result>\r\n"), dwValue, pFaxPortInfo[dwIndex].DeviceId);
            goto RegFailed2;
        }

        if (!fnRegQueryDword(hFaxPortKey, FLAGS_REGVALUE, &dwValue)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.  This is an error.</result>\r\n"), FLAGS_REGVALUE, GetLastError());
            goto RegFailed2;
        }
        if (pFaxPortInfo[dwIndex].Flags != dwValue) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Flags: Received: %d, Expected: %d.  This is an error.</result>\r\n"), dwValue, pFaxPortInfo[dwIndex].Flags);
            goto RegFailed2;
        }

        if (!fnRegQueryDword(hFaxPortKey, RINGS_REGVALUE, &dwValue)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.  This is an error.</result>\r\n"), RINGS_REGVALUE, GetLastError());
            goto RegFailed2;
        }
        if (pFaxPortInfo[dwIndex].Rings != dwValue) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Rings: Received: %d, Expected: %d.  This is an error.</result>\r\n"), dwValue, pFaxPortInfo[dwIndex].Rings);
            goto RegFailed2;
        }

        if (!fnRegQueryDword(hFaxPortKey, PRIORITY_REGVALUE, &dwValue)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.  This is an error.</result>\r\n"), PRIORITY_REGVALUE, GetLastError());
            goto RegFailed2;
        }
        if (pFaxPortInfo[dwIndex].Priority != dwValue) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Priority: Received: %d, Expected: %d.  This is an error.</result>\r\n"), dwValue, pFaxPortInfo[dwIndex].Priority);
            goto RegFailed2;
        }

        if (!fnRegQuerySz(hFaxPortKey, DEVICENAME_REGVALUE, &szValue)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.  This is an error.</result>\r\n"), DEVICENAME_REGVALUE, GetLastError());
            goto RegFailed2;
        }
        if (lstrcmp(pFaxPortInfo[dwIndex].DeviceName, szValue)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">DeviceName: Received: %s, Expected: %s.  This is an error.</result>\r\n"), szValue, pFaxPortInfo[dwIndex].DeviceName);
            if (szValue) {
                HeapFree(g_hHeap, 0, szValue);
            }
            goto RegFailed2;
        }
        if (szValue) {
            HeapFree(g_hHeap, 0, szValue);
        }

        if (!fnRegQuerySz(hFaxPortKey, TSID_REGVALUE, &szValue)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.  This is an error.</result>\r\n"), TSID_REGVALUE, GetLastError());
            goto RegFailed2;
        }
        if (lstrcmp(pFaxPortInfo[dwIndex].Tsid, szValue)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Tsid: Received: %s, Expected: %s.  This is an error.</result>\r\n"), szValue, pFaxPortInfo[dwIndex].Tsid);
            if (szValue) {
                HeapFree(g_hHeap, 0, szValue);
            }
            goto RegFailed2;
        }
        if (szValue) {
            HeapFree(g_hHeap, 0, szValue);
        }

        if (!fnRegQuerySz(hFaxPortKey, CSID_REGVALUE, &szValue)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Could not query the Registry Value %s, ec = 0x%08x.  This is an error.</result>\r\n"), CSID_REGVALUE, GetLastError());
            goto RegFailed2;
        }
        if (lstrcmp(pFaxPortInfo[dwIndex].Csid, szValue)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">Csid: Received: %s, Expected: %s.  This is an error.</result>\r\n"), szValue, pFaxPortInfo[dwIndex].Csid);
            if (szValue) {
                HeapFree(g_hHeap, 0, szValue);
            }
            goto RegFailed2;
        }
        if (szValue) {
            HeapFree(g_hHeap, 0, szValue);
        }

        RegCloseKey(hFaxPortKey);
    }

    RegCloseKey(hFaxDevicesKey);

    return TRUE;

RegFailed2:
    RegCloseKey(hFaxPortKey);

RegFailed1:
    RegCloseKey(hFaxDevicesKey);

RegFailed0:
    return FALSE;
}

VOID
fnFaxEnumPorts(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxEnumPorts()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE          hFaxSvcHandle;
    // pFaxPortInfo is the pointer to the fax port info
    PFAX_PORT_INFO  pFaxPortInfo;
    // dwNumPorts is the number of fax ports
    DWORD           dwNumPorts;

    DWORD           dwIndex;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxEnumPorts().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxEnumPorts\">"));



 
    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    for (dwIndex = 0; dwIndex < 2; dwIndex++) {
        // Enumerate the fax ports
        (*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

        fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

        if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxEnumPorts() failed.  The error code is 0x%08x.  This is an error.  FaxEnumPorts() should succeed.</result>\r\n"), GetLastError());
        }
        else {
            if (pFaxPortInfo == NULL) {
                fnWriteLogFile(TEXT("\n\t<result value=\"0\">pFaxPortInfo is NULL.  This is an error.  pFaxPortInfo should not be NULL.</result>\r\n"));
            }

            if (dwNumPorts == 0) {
                fnWriteLogFile(TEXT("\n\t<result value=\"0\">dwNumPorts is 0.  This is an error.  dwNumPorts should not be 0.</result>\r\n"));
            }

            if ((pFaxPortInfo != NULL) && (dwNumPorts != 0)) {
				// registry is not backwards compatiable to w2k, omitted
                //if (fnVerifyPorts(pFaxPortInfo, dwNumPorts)) {
                    (*pnNumCasesPassed)++;
					dwFuncCasesPass++;
					fnWriteLogFile(TEXT("\n\t<result value=\"1\">Registry Check Omitted</result>"));
                //}
            }

            g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
        }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
    }
	

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxEnumPorts(NULL, &pFaxPortInfo, &dwNumPorts)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxEnumPorts() returned TRUE.  This is an error.  FaxEnumPorts() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxEnumPorts() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pFaxPortInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxPortInfo = NULL\" id=\"%d\">"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, NULL, &dwNumPorts)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxEnumPorts() returned TRUE.  This is an error.  FaxEnumPorts() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxEnumPorts() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("dwNumPorts = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"dwNumPorts = NULL\" id=\"%d\">"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, NULL)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxEnumPorts() returned TRUE.  This is an error.  FaxEnumPorts() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxEnumPorts() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid hFaxSvcHandle\" id=\"%d\">"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxEnumPorts() returned TRUE.  This is an error.  FaxEnumPorts() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxEnumPorts() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

 //   if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
          //  fnWriteLogFile(TEXT("FaxEnumPorts() failed.  The error code is 0x%08x.  This is an error.  FaxEnumPorts() should succeed.\r\n"), GetLastError());
        //}
        //else {
          //  g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
//            (*pnNumCasesPassed)++;
//			dwFuncCasesPass++;
  //      }

        // Disconnect from the fax server
    //    g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxEnumPorts, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}

VOID
fnFaxOpenPort(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxOpenPort()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE          hFaxSvcHandle;
    // hFaxPortHandle is the handle to a fax port
    HANDLE          hFaxPortHandle;
    // hFaxPortHandle2 is the second handle to a fax port
    HANDLE          hFaxPortHandle2;
    // pFaxPortInfo is the pointer to the fax port info
    PFAX_PORT_INFO  pFaxPortInfo;
    // dwNumPorts is the number of fax ports
    DWORD           dwNumPorts;
    // dwDeviceId is the device id of the fax port
    DWORD           dwDeviceId;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxOpenPort().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxOpenPort\">"));
	


    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    // Enumerate the fax ports
    if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not enumerate ports on server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    dwDeviceId = pFaxPortInfo[0].DeviceId;

    // Free the fax port info
    g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

    // Open the fax port
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (PORT_OPEN_QUERY).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (PORT_OPEN_QUERY)\" id=\"%d\">"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxOpenPort() failed.  The error code is 0x%08x.  This is an error.  FaxOpenPort() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (hFaxPortHandle == NULL) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">hFaxPortHandle is NULL.  This is an error.  hFaxPortHandle should not be NULL.</result>\r\n"));
        }
        else {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
			

            (*pnNumCasesAttempted)++;
			dwFuncCasesAtt++;

            fnWriteLogFile(TEXT("hFaxPortHandle already open (PORT_OPEN_QUERY).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
			fnWriteLogFile(TEXT("\n\t<case name=\"hFaxPortHandle already open (PORT_OPEN_QUERY)\" id=\"%d\">"), *pnNumCasesAttempted);
            if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle2)) {
                fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxOpenPort() failed.  The error code is 0x%08x.  This is an error.  FaxOpenPort() should succeed.</result>\r\n"), GetLastError());
            }
            else {
                g_ApiInterface.FaxClose(hFaxPortHandle2);
                (*pnNumCasesPassed)++;
				dwFuncCasesPass++;
				fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
            }
			fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

            (*pnNumCasesAttempted)++;
			dwFuncCasesAtt++;

            fnWriteLogFile(TEXT("hFaxPortHandle already open (PORT_OPEN_MODIFY).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
			fnWriteLogFile(TEXT("\n\t<case name=\"hFaxPortHandle already open (PORT_OPEN_MODIFY)\" id=\"%d\">"), *pnNumCasesAttempted);
            if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_MODIFY, &hFaxPortHandle2)) {
                fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxOpenPort() failed.  The error code is 0x%08x.  This is an error.  FaxOpenPort() should succeed.</result>\r\n"), GetLastError());
            }
            else {
                g_ApiInterface.FaxClose(hFaxPortHandle2);
                (*pnNumCasesPassed)++;
				dwFuncCasesPass++;
				fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
            }
			fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
            g_ApiInterface.FaxClose(hFaxPortHandle);
        }
	}
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    // Open the fax port
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (PORT_OPEN_MODIFY).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (PORT_OPEN_MODIFY)\" id=\"%d\">"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_MODIFY, &hFaxPortHandle)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxOpenPort() failed.  The error code is 0x%08x.  This is an error.  FaxOpenPort() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (hFaxPortHandle == NULL) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">hFaxPortHandle is NULL.  This is an error.  hFaxPortHandle should not be NULL.</result>\r\n"));
			
        }
        else {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
			
			

            (*pnNumCasesAttempted)++;
			dwFuncCasesAtt++;

            fnWriteLogFile(TEXT("hFaxPortHandle already open (PORT_OPEN_QUERY).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
			fnWriteLogFile(TEXT("\n\t<case name=\"hFaxPortHandle already open (PORT_OPEN_QUERY)\" id=\"%d\">"), *pnNumCasesAttempted);
            if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle2)) {
                fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxOpenPort() failed.  The error code is 0x%08x.  This is an error.  FaxOpenPort() should succeed.</result>\r\n"), GetLastError());
            }
            else {
                g_ApiInterface.FaxClose(hFaxPortHandle2);
                (*pnNumCasesPassed)++;
				dwFuncCasesPass++;
				fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
            }
			fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

            (*pnNumCasesAttempted)++;
			dwFuncCasesAtt++;

            fnWriteLogFile(TEXT("hFaxPortHandle already open (PORT_OPEN_MODIFY).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
			fnWriteLogFile(TEXT("\n\t<case name=\"hFaxPortHandle already open (PORT_OPEN_MODIFY)\" id=\"%d\">"), *pnNumCasesAttempted);
            if (g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_MODIFY, &hFaxPortHandle2)) {
                fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxOpenPort() returned TRUE.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
                g_ApiInterface.FaxClose(hFaxPortHandle2);
            }
            else if (GetLastError() != ERROR_INVALID_HANDLE) {
                fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
            }
            else {
                (*pnNumCasesPassed)++;
				dwFuncCasesPass++;
				fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
            }
			g_ApiInterface.FaxClose(hFaxPortHandle);    
			fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
        }
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxOpenPort(NULL, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxOpenPort() returned TRUE.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxClose(hFaxPortHandle);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("dwDeviceId = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"dwDeviceId = 0\" id=\"%d\">"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxOpenPort(hFaxSvcHandle, 0, PORT_OPEN_QUERY, &hFaxPortHandle)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxOpenPort() returned TRUE.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_BAD_UNIT (0x%08x).</result>\r\n"), ERROR_BAD_UNIT);
        g_ApiInterface.FaxClose(hFaxPortHandle);
    }
    else if (GetLastError() != ERROR_BAD_UNIT) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_BAD_UNIT (0x%08x).</result>\r\n"), GetLastError(), ERROR_BAD_UNIT);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Flags = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Flags = 0\" id=\"%d\">"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, 0, &hFaxPortHandle)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxOpenPort() returned TRUE.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxClose(hFaxPortHandle);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxPortHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxPortHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, NULL)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxOpenPort() returned TRUE.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxClose(hFaxPortHandle);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid hFaxSvcHandle\" id=\"%d\">"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxOpenPort() returned TRUE.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxClose(hFaxPortHandle);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxOpenPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        //if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //dwDeviceId = pFaxPortInfo[0].DeviceId;

        // Free the fax port info
        //g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
          //  fnWriteLogFile(TEXT("FaxOpenPort() failed.  The error code is 0x%08x.  This is an error.  FaxOpenPort() should succeed.\r\n"), GetLastError());
        //}
        //else {
          //  g_ApiInterface.FaxClose(hFaxPortHandle);
//            (*pnNumCasesPassed)++;
//			dwFuncCasesPass++;
  //      }

        // Disconnect from the fax server
    //    g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxOpenPort, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}

VOID
fnFaxGetPort(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxGetPort()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE          hFaxSvcHandle;
    // hFaxPortHandle is the handle to a fax port
    HANDLE          hFaxPortHandle;
    // pFaxPortInfo is the pointer to the fax port info
    PFAX_PORT_INFO  pFaxPortInfo;
    // dwNumPorts is the number of fax ports
    DWORD           dwNumPorts;
    // dwDeviceId is the device id of the fax port
    DWORD           dwDeviceId;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxGetPort().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxGetPort\">"));

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
		return;

    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    // Enumerate the fax ports
    if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not enumerate ports on server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    dwDeviceId = pFaxPortInfo[0].DeviceId;

    // Free the fax port info
    g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

    // Open the fax port
    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not open fax port %d, The error code is 0x%08x.\r\n"),dwDeviceId, GetLastError());
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    // Get the fax port info
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (PORT_OPEN_QUERY).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (PORT_OPEN_QUERY)\" id=\"%d\">"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxGetPort(hFaxPortHandle, &pFaxPortInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetPort() failed.  The error code is 0x%08x.  This is an error.  FaxGetPort() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (pFaxPortInfo == NULL) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">pFaxPortInfo is NULL.  This is an error.  pFaxPortInfo should not be NULL.</result>\r\n"));
        }
        else {

			// registry is not backwards compatiable omitted
            //if (fnVerifyPorts(pFaxPortInfo, 1)) {
                (*pnNumCasesPassed)++;
				dwFuncCasesPass++;
				fnWriteLogFile(TEXT("\n\t<result value=\"1\">Registry Check Omitted</result>"));
            //}

            g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
        }
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    g_ApiInterface.FaxClose(hFaxPortHandle);

    // Open the fax port
    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_MODIFY, &hFaxPortHandle)) {
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    // Get the fax port info
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (PORT_OPEN_MODIFY).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (PORT_OPEN_MODIFY)\" id=\"%d\">"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxGetPort(hFaxPortHandle, &pFaxPortInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetPort() failed.  The error code is 0x%08x.  This is an error.  FaxGetPort() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (pFaxPortInfo == NULL) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">pFaxPortInfo is NULL.  This is an error.  pFaxPortInfo should not be NULL.</result>\r\n"));
        }
        else {
			// registry is not backwards compatiable omitted
            //if (fnVerifyPorts(pFaxPortInfo, 1)) {
                (*pnNumCasesPassed)++;
				dwFuncCasesPass++;
				fnWriteLogFile(TEXT("\n\t<result value=\"1\">Registry Check Omitted</result>"));
            //}

            g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
        }
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxPortHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxPortHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxGetPort(NULL, &pFaxPortInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetPort() returned TRUE.  This is an error.  FaxGetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pFaxPortInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxPortInfo = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetPort(hFaxPortHandle, NULL)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetPort() returned TRUE.  This is an error.  FaxGetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }

	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxPortHandle = hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxPortHandle = hFaxSvcHandle\" id=\"%d\">"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxGetPort(hFaxSvcHandle, &pFaxPortInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetPort() returned TRUE.  This is an error.  FaxGetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }

    // Disconnect from the fax port
    g_ApiInterface.FaxClose(hFaxPortHandle);

	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxPortHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid hFaxPortHandle\" id=\"%d\">"), *pnNumCasesAttempted);
    if (g_ApiInterface.FaxGetPort(hFaxPortHandle, &pFaxPortInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetPort() returned TRUE.  This is an error.  FaxGetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        // Enumerate the fax ports
        //if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //dwDeviceId = pFaxPortInfo[0].DeviceId;

        // Free the fax port info
        //g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

        // Open the fax port
        //if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxGetPort(hFaxPortHandle, &pFaxPortInfo)) {
          //  fnWriteLogFile(TEXT("FaxGetPort() failed.  The error code is 0x%08x.  This is an error.  FaxGetPort() should succeed.\r\n"), GetLastError());
        //}
        //else {
            //g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
            //(*pnNumCasesPassed)++;
			//dwFuncCasesPass++;
        //}

        // Disconnect from the fax port
        //g_ApiInterface.FaxClose(hFaxPortHandle);
        // Disconnect from the fax server
    //    g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxGetPort, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}


VOID
fnFaxSetPort(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	BOOL	 bTestLimits
)
/*++

Routine Description:

  FaxSetPort()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE          hFaxSvcHandle;
    // hFaxPortHandle is the handle to a fax port
    HANDLE          hFaxPortHandle;
    // pFaxPortInfo is the pointer to the fax port info
    PFAX_PORT_INFO  pFaxPortInfo;
    // pCopyFaxPortInfo is the pointer to the copy of the fax port info
    PFAX_PORT_INFO  pCopyFaxPortInfo;
    // dwNumPorts is the number of fax ports
    DWORD           dwNumPorts;
    // dwDeviceId is the device id of the fax port
    DWORD           dwDeviceId;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


    DWORD           cb;
    DWORD           dwOffset;
	DWORD			dwTempValue=0;


	fnWriteLogFile(TEXT("\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxSetPort().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxSetPort\">"));

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    // Enumerate the fax ports
    if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not enumerate ports on server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    dwDeviceId = pFaxPortInfo[0].DeviceId;

    // Free the fax port info
    g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

    // Open the fax port
    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not open fax port %d, The error code is 0x%08x.\r\n"),dwDeviceId, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    // Get the fax port info
    if (!g_ApiInterface.FaxGetPort(hFaxPortHandle, &pFaxPortInfo)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not get port info, The error code is 0x%08x.\r\n"),GetLastError());
        // Disconnect from the fax port
        g_ApiInterface.FaxClose(hFaxPortHandle);
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

	
    // Set the fax port info
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Flags = PORT_OPEN_QUERY.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Flags = PORT_OPEN_QUERY\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_ACCESS_DENIED (0x%08x).</result>\r\n"), ERROR_ACCESS_DENIED);
    }
    else if (GetLastError() != ERROR_ACCESS_DENIED) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_ACCESS_DENIED (0x%08x).</result>\r\n"), GetLastError(), ERROR_ACCESS_DENIED);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    // Disconnect from the fax port
    g_ApiInterface.FaxClose(hFaxPortHandle);

    // Open the fax port
    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_MODIFY, &hFaxPortHandle)) {
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    cb = sizeof(FAX_PORT_INFO);
    if (pFaxPortInfo->DeviceName) {
        cb += (lstrlen(pFaxPortInfo->DeviceName) + 1) * sizeof(TCHAR);
    }
    if (pFaxPortInfo->Tsid) {
        cb += (lstrlen(pFaxPortInfo->Tsid) + 1) * sizeof(TCHAR);
    }
    if (pFaxPortInfo->Csid) {
        cb += (lstrlen(pFaxPortInfo->Csid) + 1) * sizeof(TCHAR);
    }

    pCopyFaxPortInfo = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, cb);
    dwOffset = sizeof(FAX_PORT_INFO);

    pCopyFaxPortInfo->SizeOfStruct = pFaxPortInfo->SizeOfStruct;

	pCopyFaxPortInfo->DeviceId = pFaxPortInfo->DeviceId;
	pCopyFaxPortInfo->State = pFaxPortInfo->State;

	if ((pFaxPortInfo->Flags & FPF_RECEIVE) && (pFaxPortInfo->Flags & FPF_SEND)) {
		pCopyFaxPortInfo->Flags = 0;
	}
	else if (pFaxPortInfo->Flags & FPF_RECEIVE) {
	    pCopyFaxPortInfo->Flags = FPF_SEND;
	}
	else if (pFaxPortInfo->Flags & FPF_SEND) {
		pCopyFaxPortInfo->Flags = FPF_RECEIVE;
	}
	else {
	    pCopyFaxPortInfo->Flags = FPF_RECEIVE & FPF_SEND;
    }

	pCopyFaxPortInfo->Rings = pFaxPortInfo->Rings + 1;
	if (dwNumPorts > 1) {
		pCopyFaxPortInfo->Priority = pFaxPortInfo->Priority + 1;
	}
	else {
		pCopyFaxPortInfo->Priority = pFaxPortInfo->Priority;
	}


	if (pFaxPortInfo->DeviceName) {
        pCopyFaxPortInfo->DeviceName = (LPTSTR) ((DWORD) pCopyFaxPortInfo + dwOffset);
        lstrcpy((LPTSTR) pCopyFaxPortInfo->DeviceName, pFaxPortInfo->DeviceName);
        dwOffset += (lstrlen(pCopyFaxPortInfo->DeviceName) + 1) * sizeof(TCHAR);
    }

    if (pFaxPortInfo->Csid) {
        pCopyFaxPortInfo->Tsid = (LPTSTR) ((DWORD) pCopyFaxPortInfo + dwOffset);
        lstrcpy((LPTSTR) pCopyFaxPortInfo->Tsid, pFaxPortInfo->Csid);
        dwOffset += (lstrlen(pCopyFaxPortInfo->Tsid) + 1) * sizeof(TCHAR);
    }

    if (pFaxPortInfo->Tsid) {
        pCopyFaxPortInfo->Csid = (LPTSTR) ((DWORD) pCopyFaxPortInfo + dwOffset);
        lstrcpy((LPTSTR) pCopyFaxPortInfo->Csid, pFaxPortInfo->Tsid);
        dwOffset += (lstrlen(pCopyFaxPortInfo->Csid) + 1) * sizeof(TCHAR);
    }

 	// Set the fax port info
	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

	fnWriteLogFile(TEXT("Valid case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid case\" id=\"%d\">"), *pnNumCasesAttempted);

	if (!g_ApiInterface.FaxSetPort(hFaxPortHandle, pCopyFaxPortInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetPort() failed.  The error code is 0x%08x.  This is an error.  FaxSetPort() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		// registry is not backwards compatiable omitted
		//if (fnVerifyPorts(pCopyFaxPortInfo, 1)) {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\">Registry Check Omitted</result>"));
		//}
	}
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    HeapFree(g_hHeap, 0, pCopyFaxPortInfo);

    // Set the fax port info
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid case\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetPort() failed.  The error code is 0x%08x.  This is an error.  FaxSetPort() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		// registry is not backwards compatiable omitted
        //if (fnVerifyPorts(pFaxPortInfo, 1)) {
            (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\">Registry Check Omitted</result>"));
        //}
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    pFaxPortInfo->SizeOfStruct = 0;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pFaxPortInfo->SizeOfStruct = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxPortInfo->SizeOfStruct = 0\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
    pFaxPortInfo->SizeOfStruct = sizeof(FAX_PORT_INFO);
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	if (bTestLimits)	{
		
		// size of struct = MAX_DWORD
		pFaxPortInfo->SizeOfStruct = MAX_DWORD;
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxPortInfo->SizeOfStruct = MAX_DWORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"pFaxPortInfo->SizeOfStruct = MAX_DWORD\" id=\"%d\">"), *pnNumCasesAttempted);

		if (g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
	    }
	    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		}
		else {
	        (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
	    }
	    pFaxPortInfo->SizeOfStruct = sizeof(FAX_PORT_INFO);
		fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
	
		
		// state = MAX_DWORD
		dwTempValue=pFaxPortInfo->DeviceId;
		pFaxPortInfo->DeviceId=MAX_DWORD;
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxPortInfo->DeviceId = MAX_DWORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"pFaxPortInfo->DeviceId = MAX_DWORD\" id=\"%d\">"), *pnNumCasesAttempted);

		if (g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
	    }
	    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		}
		else {
	        (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
	    }
	    pFaxPortInfo->DeviceId=dwTempValue;
		fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
			
		// state = MAX_DWORD
		dwTempValue=pFaxPortInfo->State;
		pFaxPortInfo->State=MAX_DWORD;
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pFaxPortInfo->State = MAX_DWORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"pFaxPortInfo->State = MAX_DWORD\" id=\"%d\">"), *pnNumCasesAttempted);

		if (g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
	    }
	    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		}
		else {
	        (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
	    }
	    pFaxPortInfo->State=dwTempValue;
		fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

		// pCopyFaxPortInfo->Flags = MAX_DWORD
		dwTempValue=pFaxPortInfo->Flags;
		pFaxPortInfo->Flags=MAX_DWORD;
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pCopyFaxPortInfo->Flags = MAX_DWORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"pCopyFaxPortInfo->Flags = MAX_DWORD\" id=\"%d\">"), *pnNumCasesAttempted);

		if (g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
	    }
	    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		}
		else {
	        (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
	    }
	    pFaxPortInfo->Flags=dwTempValue;
		fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));


		// rings=MAX_DWORD
		dwTempValue=pFaxPortInfo->Rings;
		pFaxPortInfo->Rings=MAX_DWORD;
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pCopyFaxPortInfo->Rings = MAX_DWORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"pCopyFaxPortInfo->Rings = MAX_DWORD\" id=\"%d\">"), *pnNumCasesAttempted);

		if (g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
	    }
	    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		}
		else {
	        (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
	    }
	    pFaxPortInfo->Rings=dwTempValue;
		fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

		// priority=MAX_DWORD
		dwTempValue=pFaxPortInfo->Priority;
		pFaxPortInfo->Priority=MAX_DWORD;
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("pCopyFaxPortInfo->Priority = MAX_DWORD.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"pCopyFaxPortInfo->Priority = MAX_DWORD\" id=\"%d\">"), *pnNumCasesAttempted);

		if (g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
	    }
	    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		}
		else {
	        (*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
	    }
	    pFaxPortInfo->Priority=dwTempValue;
		fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
	}
	
	    
	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

	fnWriteLogFile(TEXT("hFaxPortHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxPortHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

	if (g_ApiInterface.FaxSetPort(NULL, pFaxPortInfo)) {
		fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
	}
	else if (GetLastError() != ERROR_INVALID_HANDLE) {
	    fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
	}
	else {
		(*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
	}
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
	
	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

	fnWriteLogFile(TEXT("pFaxPortInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxPortInfo = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

	if (g_ApiInterface.FaxSetPort(hFaxPortHandle, NULL)) {
		fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
	}
	else if (GetLastError() != ERROR_INVALID_PARAMETER) {
	    fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
	}
	else {
		(*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
	}
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
		
	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

	fnWriteLogFile(TEXT("hFaxPortHandle = hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxPortHandle = hFaxSvcHandle\" id=\"%d\">"), *pnNumCasesAttempted);

	if (g_ApiInterface.FaxSetPort(hFaxSvcHandle, pFaxPortInfo)) {
	fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
	}
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    // Disconnect from the fax port
    g_ApiInterface.FaxClose(hFaxPortHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxPortHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid hFaxPortHandle\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSetPort() returned TRUE.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxSetPort() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

//    if (szServerName) {

//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(NULL, &hFaxSvcHandle)) {
    //        return;
      //  }

        // Enumerate the fax ports
//        if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
            // Disconnect from the fax server
  //          g_ApiInterface.FaxClose(hFaxSvcHandle);
    //        return;
        //}

        //dwDeviceId = pFaxPortInfo[0].DeviceId;

        // Free the fax port info
        //g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

        // Open the fax port
        //if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_MODIFY, &hFaxPortHandle)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
//            return;
  //      }

        // Get the fax port info
    //    if (!g_ApiInterface.FaxGetPort(hFaxPortHandle, &pFaxPortInfo)) {
            // Disconnect from the fax port
      //      g_ApiInterface.FaxClose(hFaxPortHandle);
            // Disconnect from the fax server
        //    g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

        //fnWriteLogFile(TEXT("Remote hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxSetPort(hFaxPortHandle, pFaxPortInfo)) {
          //  fnWriteLogFile(TEXT("FaxSetPort() failed.  The error code is 0x%08x.  This is an error.  FaxSetPort() should succeed.\r\n"), GetLastError());
        //}
        //else {
          //  (*pnNumCasesPassed)++;
			//dwFuncCasesPass++;
        //}

        //g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

        // Disconnect from the fax port
        //g_ApiInterface.FaxClose(hFaxPortHandle);
        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxSetPort, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}



VOID
fnFaxGetDeviceStatus(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxGetDeviceStatus()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE              hFaxSvcHandle;
    // hFaxPortHandle is the handle to a fax port
    HANDLE              hFaxPortHandle;
    // pFaxPortInfo is the pointer to the fax port info
    PFAX_PORT_INFO      pFaxPortInfo;
    // pCopyFaxPortInfo is the pointer to the copy of the fax port info
    PFAX_PORT_INFO      pCopyFaxPortInfo;
    // dwNumPorts is the number of fax ports
    DWORD               dwNumPorts;
    // dwDeviceId is the device id of the fax port
    DWORD               dwDeviceId;
    // szDeviceName is the device name of the fax port
    LPTSTR              szDeviceName;
    // pFaxDeviceStatus is the pointer to the fax device status
    PFAX_DEVICE_STATUS  pFaxDeviceStatus;

    DWORD               dwIndex;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxGetDeviceStatus().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxGetDeviceStatus\">"));

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    // Enumerate the fax ports
    if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not enumerate ports on server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    dwDeviceId = pFaxPortInfo[0].DeviceId;
    szDeviceName = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(pFaxPortInfo[0].DeviceName) + 1) * sizeof(TCHAR));
    lstrcpy(szDeviceName, pFaxPortInfo[0].DeviceName);

    // Free the fax port info
    g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

    // Open the fax port
    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not open fax port %d, The error code is 0x%08x.\r\n"),dwDeviceId, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    for (dwIndex = 0; dwIndex < 2; dwIndex++) {
        // Get the device status
        (*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

        fnWriteLogFile(TEXT("Valid case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"Valid case\" id=\"%d\">"), *pnNumCasesAttempted);

        if (!g_ApiInterface.FaxGetDeviceStatus(hFaxPortHandle, &pFaxDeviceStatus)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetDeviceStatus() failed.  The error code is 0x%08x.  This is an error.  FaxGetDeviceStatus() should succeed.</result>\r\n"), GetLastError());
        }
        else {
            if (pFaxDeviceStatus == NULL) {
                fnWriteLogFile(TEXT("\n\t<result value=\"0\">pFaxDeviceStatus is NULL.  This is an error.  pFaxDeviceStatus should not be NULL.</result>\r\n"));
            }
            else {
                if (pFaxDeviceStatus->SizeOfStruct != sizeof(FAX_DEVICE_STATUS)) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">SizeOfStruct: Received: %d, Expected: %d.  This is an error.</result>\r\n"), pFaxDeviceStatus->SizeOfStruct, sizeof(FAX_DEVICE_STATUS));
                    goto FuncFailed;
                }

                if (pFaxDeviceStatus->DeviceId != dwDeviceId) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">DeviceId: Received: 0x%08x, Expected: 0x%08x.  This is an error.</result>\r\n"), pFaxDeviceStatus->DeviceId, dwDeviceId);
                    goto FuncFailed;
                }

                if (lstrcmp(pFaxDeviceStatus->DeviceName, szDeviceName)) {
                    fnWriteLogFile(TEXT("\n\t<result value=\"0\">DeviceName: Received: %s, Expected: %s.  This is an error.</result>\r\n"), pFaxDeviceStatus->DeviceName, szDeviceName);
                    goto FuncFailed;
                }

                (*pnNumCasesPassed)++;
				dwFuncCasesPass++;
				fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
			}


FuncFailed:
            g_ApiInterface.FaxFreeBuffer(pFaxDeviceStatus);
        }
		fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxPortHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxPortHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetDeviceStatus(NULL, &pFaxDeviceStatus)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetDeviceStatus() returned TRUE.  This is an error.  FaxGetDeviceStatus() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxDeviceStatus);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetDeviceStatus() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("pFaxDeviceStatus = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxDeviceStatus = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetDeviceStatus(hFaxPortHandle, NULL)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetDeviceStatus() returned TRUE.  This is an error.  FaxGetDeviceStatus() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxFreeBuffer(pFaxDeviceStatus);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetDeviceStatus() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxPortHandle = hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxPortHandle = hFaxSvcHandle\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetDeviceStatus(hFaxSvcHandle, &pFaxDeviceStatus)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetDeviceStatus() returned TRUE.  This is an error.  FaxGetDeviceStatus() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxDeviceStatus);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetDeviceStatus() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    // Disconnect from the fax port
    g_ApiInterface.FaxClose(hFaxPortHandle);

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid hFaxPortHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid hFaxPortHandle\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxGetDeviceStatus(hFaxPortHandle, &pFaxDeviceStatus)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxGetDeviceStatus() returned TRUE.  This is an error.  FaxGetDeviceStatus() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxFreeBuffer(pFaxDeviceStatus);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxGetDeviceStatus() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    // Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);

//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        // Enumerate the fax ports
        //if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        //dwDeviceId = pFaxPortInfo[0].DeviceId;

        // Free the fax port info
        //g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

        // Open the fax port
        //if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
            // Disconnect from the fax server
//            g_ApiInterface.FaxClose(hFaxSvcHandle);
  //        //  return;
    //    }

        // Get the fax port info
      //  if (!g_ApiInterface.FaxGetPort(hFaxPortHandle, &pFaxPortInfo)) {
            // Disconnect from the fax port
        //    g_ApiInterface.FaxClose(hFaxPortHandle);
            // Disconnect from the fax server
          //  g_ApiInterface.FaxClose(hFaxSvcHandle);
            //return;
        //}

        // Get the device status
        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;
        //fnWriteLogFile(TEXT("Valid case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxGetDeviceStatus(hFaxPortHandle, &pFaxDeviceStatus)) {
            //fnWriteLogFile(TEXT("FaxGetDeviceStatus() failed.  The error code is 0x%08x.  This is an error.  FaxGetDeviceStatus() should succeed.\r\n"), GetLastError());
        //}
        //else {
            //g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);
            //(*pnNumCasesPassed)++;
			//dwFuncCasesPass++;
        //}

        // Disconnect from the fax port
        //g_ApiInterface.FaxClose(hFaxPortHandle);
        // Disconnect from the fax server
        //g_ApiInterface.FaxClose(hFaxSvcHandle);
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxGetDeviceStatus, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}

BOOL WINAPI
FaxAPIDllTest(
	LPCWSTR  szWhisPhoneNumberW,
	LPCSTR   szWhisPhoneNumberA,
	LPCWSTR  szServerNameW,
    LPCSTR   szServerNameA,
    UINT     nNumCasesLocal,
    UINT     nNumCasesServer,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	DWORD	 dwTestMode
)
{
    LPCTSTR  szServerName;
    UINT     nNumCases;

#ifdef UNICODE
    szServerName = szServerNameW;
#else
    szServerName = szServerNameA;
#endif

    if (szServerName) {
		fnWriteLogFile(TEXT("WHIS> REMOTE SERVER MODE:\r\n"));
        nNumCases = nNumCasesServer;
    }
    else {
        nNumCases = nNumCasesLocal;
    }

    // FaxEnumPorts()
    fnFaxEnumPorts(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    // FaxOpenPort()
    fnFaxOpenPort(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    // FaxGetPort()
    fnFaxGetPort(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

  	if (dwTestMode==WHIS_TEST_MODE_LIMITS)	{
		// FaxSetPort()
		fnFaxSetPort(szServerName, pnNumCasesAttempted, pnNumCasesPassed,TRUE);
	}
	else	{
		  // FaxSetPort()
	    fnFaxSetPort(szServerName, pnNumCasesAttempted, pnNumCasesPassed,FALSE);
	}


    // FaxGetDeviceStatus()
    fnFaxGetDeviceStatus(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    if ((*pnNumCasesAttempted == nNumCases) && (*pnNumCasesPassed == *pnNumCasesAttempted)) {
        return TRUE;
    }
    else {
        return FALSE;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legwin32_whis_xml\miscapi\miscapi.c ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

  miscapi.c

Abstract:

  MiscApi: Fax API Test Dll: Client Misc APIs
    1) FaxConnectFaxServer()
    2) FaxFreeBuffer()
    3) FaxClose()

Author:

  Steven Kehrli (steveke) 8/28/1998

--*/


/*++

  Whistler Version:

  Lior Shmueli (liors) 23/11/2000

 ++*/

#include <wtypes.h>

#include "dllapi.h"

// g_hHeap is the handle to the heap
HANDLE           g_hHeap = NULL;
// g_ApiInterface is the API_INTERFACE structure
API_INTERFACE    g_ApiInterface;
// fnWriteLogFile is the pointer to the function to write a string to the log file
PFNWRITELOGFILE  fnWriteLogFile = NULL;



DWORD
DllEntry(
    HINSTANCE  hInstance,
    DWORD      dwReason,
    LPVOID     pContext
)
/*++

Routine Description:

  DLL entry point

Arguments:

  hInstance - handle to the module
  dwReason - indicates the reason for being called
  pContext - context

Return Value:

  TRUE on success

--*/
{
    return TRUE;
}

VOID WINAPI
FaxAPIDllInit(
    HANDLE            hHeap,
    API_INTERFACE     ApiInterface,
    PFNWRITELOGFILEW  pfnWriteLogFileW,
    PFNWRITELOGFILEA  pfnWriteLogFileA
)
{
    // Set g_hHeap
    g_hHeap = hHeap;
    // Set g_ApiInterface
    g_ApiInterface = ApiInterface;
#ifdef UNICODE
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileW;
#else
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileA;
#endif

    return;
}

VOID
fnFaxConnectFaxServer(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	BOOL	 bTestLimits
)
/*++

Routine Description:

  FaxConnectFaxServer()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE  hFaxSvcHandle;

    DWORD   dwIndex;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxConnectFaxServer().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxConnectFaxServer\">"));

    for (dwIndex = 0; dwIndex < 2; dwIndex++) {
        // Connect to the fax server
        (*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

        fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

        if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
            fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxConnectFaxServer() failed.  The error code is 0x%08x.  This is an error.  FaxConnectFaxServer() should succeed</result>.\r\n"), GetLastError());
        }
        else {
            if (hFaxSvcHandle == NULL) {
                fnWriteLogFile(TEXT("\n\t<result value=\"0\">hFaxSvcHandle is NULL.  This is an error.  hFaxSvcHandle should not be NULL.</result>\r\n"));
            }
            else {
                (*pnNumCasesPassed)++;
				dwFuncCasesPass++;
				fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
            }

            g_ApiInterface.FaxClose(hFaxSvcHandle);
        }
		fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
	}

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxConnectFaxServer(NULL, NULL)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxConnectFaxServer() returned TRUE.  This is an error.  FaxConnectFaxServer() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        g_ApiInterface.FaxClose(hFaxSvcHandle);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxConnectFaxServer() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));

    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));



	if (bTestLimits) {
	    (*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

	    fnWriteLogFile(TEXT("ServerName=LONG_STRING  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"ServerName=LONG_STRING\" id=\"%d\">"), *pnNumCasesAttempted);

		if (g_ApiInterface.FaxConnectFaxServer(TEXT(LONG_STRING), &hFaxSvcHandle)) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxConnectFaxServer() returned TRUE.  This is an error.  FaxConnectFaxServer() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
			g_ApiInterface.FaxClose(hFaxSvcHandle);
		}
		else 	{
			if (GetLastError() != ERROR_INVALID_PARAMETER) {
				fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxConnectFaxServer() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
			}
			else	{
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
			}
		}
		fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
     }

//	if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
  //      (*pnNumCasesAttempted)++;
	//	dwFuncCasesAtt++;

      //  fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
          //  fnWriteLogFile(TEXT("FaxConnectFaxServer() failed.  The error code is 0x%08x.  This is an error.  FaxConnectFaxServer() should succeed.\r\n"), GetLastError());
        //}
        //else {
          //  (*pnNumCasesPassed)++;
//			dwFuncCasesPass++;

  //          g_ApiInterface.FaxClose(hFaxSvcHandle);
    //    }
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxConnectFaxServer, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}

VOID
fnFaxFreeBuffer(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxFreeBuffer()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE              hFaxSvcHandle;
    // pFaxConfig is the pointer to the fax configuration
    PFAX_CONFIGURATION  pFaxConfig;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxFreeBuffer().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxFreeBuffer\">"));

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not GET configuration, The error code is 0x%08x.\r\n"), GetLastError());
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

    g_ApiInterface.FaxFreeBuffer(pFaxConfig);
		
	(*pnNumCasesPassed)++;
	dwFuncCasesPass++;
	fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
	
	// Disconnect from the fax server
    g_ApiInterface.FaxClose(hFaxSvcHandle);
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

fnWriteLogFile(TEXT("$$$ Summery for FaxFreeBuffer, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}

VOID
fnFaxClose(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxClose()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE          hFaxSvcHandle;
    // hFaxPortHandle is the handle to a fax port
    HANDLE          hFaxPortHandle;
    // pFaxPortInfo is the pointer to the fax port info
    PFAX_PORT_INFO  pFaxPortInfo;
    // dwNumPorts is the number of fax ports
    DWORD           dwNumPorts;
    // dwDeviceId is the device id of the fax port
    DWORD           dwDeviceId;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxClose().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxClose\">"));

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}


    // Enumerate the fax ports
    if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not enum ports on %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    dwDeviceId = pFaxPortInfo[0].DeviceId;

    // Free the fax port info
    g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
        // Disconnect from the fax server
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not open port %d, The error code is 0x%08x.\r\n"),dwDeviceId, GetLastError());
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (Port Handle).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (Port Handle)\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxClose(hFaxPortHandle)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxClose() failed.  The error code is 0x%08x.  This is an error.  FaxClose() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid Handle (Port Handle).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid Handle (Port Handle)\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxClose(hFaxPortHandle)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxClose() returned TRUE.  This is an error.  FaxClose() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxClose() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (Service Handle).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (Service Handle)\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxClose(hFaxSvcHandle)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxClose() failed.  The error code is 0x%08x.  This is an error.  FaxClose() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Invalid Handle (Service Handle).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid Handle (Service Handle)\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxClose(hFaxSvcHandle)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxClose() returned TRUE.  This is an error.  FaxClose() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxClose() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("NULL Handle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"NULL Handle\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxClose(NULL)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxClose() returned TRUE.  This is an error.  FaxClose() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxClose() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

//    if (szServerName) {
//		fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
        // Connect to the fax server
  //      if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
    //        return;
      //  }

        // Enumerate the fax ports
//        if (!g_ApiInterface.FaxEnumPorts(hFaxSvcHandle, &pFaxPortInfo, &dwNumPorts)) {
            // Disconnect from the fax server
  //          g_ApiInterface.FaxClose(hFaxSvcHandle);
    //        return;
      //  }

//        dwDeviceId = pFaxPortInfo[0].DeviceId;

        // Free the fax port info
  //      g_ApiInterface.FaxFreeBuffer(pFaxPortInfo);

    //    if (!g_ApiInterface.FaxOpenPort(hFaxSvcHandle, dwDeviceId, PORT_OPEN_QUERY, &hFaxPortHandle)) {
            // Disconnect from the fax server
      //      g_ApiInterface.FaxClose(hFaxSvcHandle);
        //    return;
        //}

        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

        //fnWriteLogFile(TEXT("Valid Case (Port Handle).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxClose(hFaxPortHandle)) {
            //fnWriteLogFile(TEXT("FaxClose() failed.  The error code is 0x%08x.  This is an error.  FaxClose() should succeed.\r\n"), GetLastError());
        //}
        //else {
            //(*pnNumCasesPassed)++;
			//dwFuncCasesPass++;
        //}

        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

        //fnWriteLogFile(TEXT("Invalid Handle (Port Handle).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (g_ApiInterface.FaxClose(hFaxPortHandle)) {
            //fnWriteLogFile(TEXT("FaxClose() returned TRUE.  This is an error.  FaxClose() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        //}
        //else if (GetLastError() != ERROR_INVALID_HANDLE) {
          //  fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxClose() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
        //}
        //else {
            //(*pnNumCasesPassed)++;
			//dwFuncCasesPass++;
        //}

        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

        //fnWriteLogFile(TEXT("Valid Case (Service Handle).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (!g_ApiInterface.FaxClose(hFaxSvcHandle)) {
          //  fnWriteLogFile(TEXT("FaxClose() failed.  The error code is 0x%08x.  This is an error.  FaxClose() should succeed.\r\n"), GetLastError());
        //}
        //else {
            //(*pnNumCasesPassed)++;
			//dwFuncCasesPass++;
        //}

        //(*pnNumCasesAttempted)++;
		//dwFuncCasesAtt++;

        //fnWriteLogFile(TEXT("Invalid Handle (Service Handle).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
        //if (g_ApiInterface.FaxClose(hFaxSvcHandle)) {
            //fnWriteLogFile(TEXT("FaxClose() returned TRUE.  This is an error.  FaxClose() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), ERROR_INVALID_HANDLE);
        //}
        //else if (GetLastError() != ERROR_INVALID_HANDLE) {
            //fnWriteLogFile(TEXT("GetLastError() returned 0x%08x.  This is an error.  FaxClose() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
        //}
        //else {
            //(*pnNumCasesPassed)++;
			//dwFuncCasesPass++;
        //}
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxClose, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}




VOID
fnFaxCompleteJobParams(
	LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	BOOL	 bTestLimits,
	BOOL	 bDoW2KFails
)
{
   // hFaxSvcHandle is the handle to the fax server
    HANDLE          hFaxSvcHandle;
 	
	// return value
	BOOL			bRetVal;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


	int				i;

	// Complate job params structures
	PFAX_JOB_PARAM pJobParam;
	PFAX_COVERPAGE_INFO pCoverpageInfo;


	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxCompleteJobParams().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxCompleteJobParams\">"));

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);
	
	
	bRetVal=g_ApiInterface.FaxCompleteJobParams(&pJobParam,&pCoverpageInfo);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxCompleteJobParmas() failed.  The error code is 0x%08x.  This is an error.  FaxClose() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		 (*pnNumCasesPassed)++;
		 dwFuncCasesPass++;
		 fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	fnWriteLogFile(TEXT("pJobParam-> Values...\r\n"));
	fnWriteLogFile(TEXT("SizeOfStruct: %d.\r\n"),pJobParam->SizeOfStruct);
    fnWriteLogFile(TEXT("RecipientNumber: %s.\r\n"),pJobParam->RecipientNumber);
	fnWriteLogFile(TEXT("RecipientName: %s.\r\n"),pJobParam->RecipientName);
	fnWriteLogFile(TEXT("Tsid: %s.\r\n"),pJobParam->Tsid);
	fnWriteLogFile(TEXT("SenderName: %s.\r\n"),pJobParam->SenderName);
	fnWriteLogFile(TEXT("SenderCompany: %s.\r\n"),pJobParam->SenderCompany);
	fnWriteLogFile(TEXT("SenderDept: %s.\r\n"),pJobParam->SenderDept);
	fnWriteLogFile(TEXT("BillingCode: %s.\r\n"),pJobParam->BillingCode);
	fnWriteLogFile(TEXT("ScheduleAction: %d.\r\n"),pJobParam->ScheduleAction);
	fnWriteLogFile(TEXT("ScheduleTime: %d.\r\n"),pJobParam->ScheduleTime);
	fnWriteLogFile(TEXT("DeliveryReportType: %d.\r\n"),pJobParam->DeliveryReportType);
	fnWriteLogFile(TEXT("DeliveryReportAddress: %s.\r\n"),pJobParam->DeliveryReportAddress);
	fnWriteLogFile(TEXT("DocumentName: %s.\r\n"),pJobParam->DocumentName);	
	for (i=0;i<3;i++)	{
		fnWriteLogFile(TEXT("Reserved[%d]: %d.\r\n"),i,pJobParam->Reserved[i]);
	}

	fnWriteLogFile(TEXT("pCoverpageInfo-> Values...\r\n"));
	fnWriteLogFile(TEXT("SizeOfStruct: %d.\r\n"),pCoverpageInfo->SizeOfStruct);
	fnWriteLogFile(TEXT("CoverPageName: %s.\r\n"),pCoverpageInfo->CoverPageName);      
	fnWriteLogFile(TEXT("UseServerCoverPage: %d.\r\n"),pCoverpageInfo->UseServerCoverPage);
  
    fnWriteLogFile(TEXT("RecName: %s.\r\n"),pCoverpageInfo->RecName);
	fnWriteLogFile(TEXT("RecFaxNumber: %s.\r\n"),pCoverpageInfo->RecFaxNumber);
	fnWriteLogFile(TEXT("RecCompany: %s.\r\n"),pCoverpageInfo->RecCompany);
	fnWriteLogFile(TEXT("RecStreetAddress: %s.\r\n"),pCoverpageInfo->RecStreetAddress);
	fnWriteLogFile(TEXT("RecCity: %s.\r\n"),pCoverpageInfo->RecCity);
	fnWriteLogFile(TEXT("RecState: %s.\r\n"),pCoverpageInfo->RecState);
	fnWriteLogFile(TEXT("RecZip: %s.\r\n"),pCoverpageInfo->RecZip);
	fnWriteLogFile(TEXT("RecCountry: %s.\r\n"),pCoverpageInfo->RecCountry);
	fnWriteLogFile(TEXT("RecTitle: %s.\r\n"),pCoverpageInfo->RecTitle);
	fnWriteLogFile(TEXT("RecDepartment: %s.\r\n"),pCoverpageInfo->RecDepartment);
	fnWriteLogFile(TEXT("RecOfficeLocation: %s.\r\n"),pCoverpageInfo->RecOfficeLocation);
	fnWriteLogFile(TEXT("RecHomePhone: %s.\r\n"),pCoverpageInfo->RecHomePhone);
	fnWriteLogFile(TEXT("RecOfficePhone: %s.\r\n"),pCoverpageInfo->RecOfficePhone);
	  
  
	fnWriteLogFile(TEXT("SdrName: %s.\r\n"),pCoverpageInfo->SdrName);
	fnWriteLogFile(TEXT("SdrFaxNumber: %s.\r\n"),pCoverpageInfo->SdrFaxNumber);
	fnWriteLogFile(TEXT("SdrCompany: %s.\r\n"),pCoverpageInfo->SdrCompany);
	fnWriteLogFile(TEXT("SdrAddress: %s.\r\n"),pCoverpageInfo->SdrAddress);
	fnWriteLogFile(TEXT("SdrTitle: %s.\r\n"),pCoverpageInfo->SdrTitle);
	fnWriteLogFile(TEXT("SdrDepartment: %s.\r\n"),pCoverpageInfo->SdrDepartment);
	fnWriteLogFile(TEXT("SdrOfficeLocation: %s.\r\n"),pCoverpageInfo->SdrOfficeLocation);
	fnWriteLogFile(TEXT("SdrHomePhone: %s.\r\n"),pCoverpageInfo->SdrHomePhone);
	fnWriteLogFile(TEXT("SdrOfficePhone: %s.\r\n"),pCoverpageInfo->SdrOfficePhone);
	  
  
	fnWriteLogFile(TEXT("Note: %s.\r\n"),pCoverpageInfo->Note);
	fnWriteLogFile(TEXT("Subject: %s.\r\n"),pCoverpageInfo->Subject);
	fnWriteLogFile(TEXT("TimeSent: %s.\r\n"),pCoverpageInfo->TimeSent);
	fnWriteLogFile(TEXT("PageCount: %s.\r\n"),pCoverpageInfo->PageCount);

	g_ApiInterface.FaxFreeBuffer(pCoverpageInfo);
	g_ApiInterface.FaxFreeBuffer(pJobParam);

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

	fnWriteLogFile(TEXT("pCoverpageInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pCoverpageInfo = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

	if (g_ApiInterface.FaxCompleteJobParams(&pJobParam,NULL)) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxCompleteJobParams() returned TRUE.  This is an error.  axCompleteJobParams() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
			g_ApiInterface.FaxFreeBuffer(pJobParam);
	}
	else if (GetLastError() != ERROR_INVALID_PARAMETER) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxCompleteJobParams() returned 0x%08x.  This is an error.  axCompleteJobParams() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
	}
	else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
	}
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

	fnWriteLogFile(TEXT("pJobParam = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pJobParam = NULL\" id=\"%d\">"), *pnNumCasesAttempted);
	if (g_ApiInterface.FaxCompleteJobParams(NULL,&pCoverpageInfo)) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxCompleteJobParams() returned TRUE.  This is an error. axCompleteJobParams() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
			g_ApiInterface.FaxFreeBuffer(pCoverpageInfo);
	}
	else if (GetLastError() != ERROR_INVALID_PARAMETER) {
	        fnWriteLogFile(TEXT("axCompleteJobParams() returned 0x%08x.  This is an error.  axCompleteJobParams() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
	}
	else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
	}
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

	fnWriteLogFile(TEXT("pCoverpageInfo = NULL and pJobParam = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pCoverpageInfo = NULL and pJobParam = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

	if (g_ApiInterface.FaxCompleteJobParams(NULL,NULL)) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxCompleteJobParams() returned TRUE.  This is an error.  FaxCompleteJobParams() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
	}
	else if (GetLastError() != ERROR_INVALID_PARAMETER) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxCompleteJobParams() returned 0x%08x.  This is an error.  FaxCompleteJobParams() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
	}
	else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
	}
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

fnWriteLogFile(TEXT("$$$ Summery for FaxCompleteJobParams, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}





VOID
fnFaxAccessCheck(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	BOOL	 bTestLimits,
	BOOL	 bDoW2KFails
)
/*++

Routine Description:

  FaxClose()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE          hFaxSvcHandle;
 	// return value
	BOOL			bRetVal;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxAccessCheck().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxAccessCheck\">"));

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (FAX_READ).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (FAX_READ)\" id=\"%d\">"), *pnNumCasesAttempted);
	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,FAX_READ);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxAccessCheck() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.\r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (FAX_WRITE).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (FAX_WRITE)\" id=\"%d\">"), *pnNumCasesAttempted);

	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,FAX_WRITE);
    if (!bRetVal) {
		fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxAccessCheck() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.\r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (FAX_ALL_ACCESS).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (FAX_ALL_ACCESS)\" id=\"%d\">"), *pnNumCasesAttempted);

	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,FAX_ALL_ACCESS);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxAccessCheck() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.\r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (FAX_CONFIG_QUERY).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (FAX_CONFIG_QUERY)\" id=\"%d\">"), *pnNumCasesAttempted);

	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,FAX_CONFIG_QUERY);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxAccessCheck() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.\r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (FAX_CONFIG_SET).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (FAX_CONFIG_SET)\" id=\"%d\">"), *pnNumCasesAttempted);

	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,FAX_CONFIG_SET);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxAccessCheck() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.  \r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (FAX_JOB_MANAGE).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (FAX_JOB_MANAGE)\" id=\"%d\">"), *pnNumCasesAttempted);
	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,FAX_JOB_MANAGE);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxAccessCheck() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.\r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (FAX_JOB_QUERY).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (FAX_JOB_QUERY)\" id=\"%d\">"), *pnNumCasesAttempted);

	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,FAX_JOB_QUERY);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxAccessCheck() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.\r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (FAX_JOB_SUBMIT).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (FAX_JOB_SUBMIT)\" id=\"%d\">"), *pnNumCasesAttempted);

	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,FAX_JOB_SUBMIT);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxAccessCheck() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.\r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (FAX_PORT_QUERY).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (FAX_PORT_QUERY)\" id=\"%d\">"), *pnNumCasesAttempted);

	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,FAX_PORT_QUERY);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxAccessCheck() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.\r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;

    fnWriteLogFile(TEXT("Valid Case (FAX_PORT_SET).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (FAX_PORT_SET)\" id=\"%d\">"), *pnNumCasesAttempted);

	bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,FAX_PORT_SET);
    if (!bRetVal) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxAccessCheck() failed.  The error code is 0x%08x.  This is an error.  FaxAccessCheck() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		fnWriteLogFile(TEXT("FaxAccessCheck() returned %d, GetLastError() is 0x%08x.\r\n"),bRetVal, GetLastError());
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	



	if (bTestLimits)	{
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

		fnWriteLogFile(TEXT("Invalid Case (MAX_DWORD).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"Invalid Case (MAX_DWORD)\" id=\"%d\">"), *pnNumCasesAttempted);

		bRetVal=g_ApiInterface.FaxAccessCheck(hFaxSvcHandle,MAX_DWORD);
		if (bRetVal) {
	    fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxAccessCheck() returned TRUE.  This is an error.  FaxAccess() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
	    }
	    else {
			if (GetLastError() != ERROR_INVALID_PARAMETER)	{
				fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetAccessCheck() returned 0x%08x.  This is an error.  FaxAccessCheck() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
				
			}
			else	{
				(*pnNumCasesPassed)++;
				dwFuncCasesPass++;
				fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
			}
		}
		fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
	}
	
    if (bDoW2KFails)		{
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

	    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

	    if (g_ApiInterface.FaxAccessCheck(NULL, FAX_READ)) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxAccessCheck() returned TRUE.  This is an error.  FaxAccess() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
		}
		else if (GetLastError() != ERROR_INVALID_HANDLE) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxAccessCheck() returned 0x%08x.  This is an error.  FaxAccessCheck() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
	    }
	    else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		}
		fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    
		// Disconnect from the fax server
		g_ApiInterface.FaxClose(hFaxSvcHandle);
	
	    (*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;

	    fnWriteLogFile(TEXT("Invalid hFaxSvcHandle.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"Invalid hFaxSvcHandle\" id=\"%d\">"), *pnNumCasesAttempted);

	    if (g_ApiInterface.FaxAccessCheck(hFaxSvcHandle, FAX_READ)) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxAccessCheck() returned TRUE.  This is an error.  FaxAccessCheck() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
		}
		else if (GetLastError() != ERROR_INVALID_HANDLE) {
	        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetAccessCheck() returned 0x%08x.  This is an error.  FaxAccessCheck() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_HANDLE);
	    }
	    else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		}
		fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
	}
fnWriteLogFile(TEXT("$$$ Summery for FaxAccessCheck, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}










BOOL WINAPI
FaxAPIDllTest(
	LPCWSTR  szWhisPhoneNumberW,
	LPCSTR   szWhisPhoneNumberA,
    LPCWSTR  szServerNameW,
    LPCSTR   szServerNameA,
    UINT     nNumCasesLocal,
    UINT     nNumCasesServer,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	DWORD	 dwTestMode
)
{
    LPCTSTR  szServerName;
    UINT     nNumCases;

#ifdef UNICODE
    szServerName = szServerNameW;
#else
    szServerName = szServerNameA;
#endif

    if (szServerName) {
        nNumCases = nNumCasesServer;
		fnWriteLogFile(TEXT("WHIS> REMOTE SERVER MODE:\r\n"));
    }
    else {
        nNumCases = nNumCasesLocal;
    }

    // FaxConnectFaxServer()
	if (dwTestMode==WHIS_TEST_MODE_LIMITS)
	{
		fnFaxConnectFaxServer(szServerName, pnNumCasesAttempted, pnNumCasesPassed,TRUE);
	}
	else
	{
		fnFaxConnectFaxServer(szServerName, pnNumCasesAttempted, pnNumCasesPassed,FALSE);
	}


    // FaxFreeBuffer()
    fnFaxFreeBuffer(szServerName, pnNumCasesAttempted, pnNumCasesPassed);
	
	// FaxCompleteJobParams()
	fnFaxCompleteJobParams(szServerName, pnNumCasesAttempted, pnNumCasesPassed,FALSE,TRUE);


	// FaxAccessCheck()
	if (dwTestMode == WHIS_TEST_MODE_DO_W2K_FAILS)	{
		fnFaxAccessCheck(szServerName, pnNumCasesAttempted, pnNumCasesPassed,FALSE,TRUE);
	}
	else if (dwTestMode == WHIS_TEST_MODE_LIMITS)	{
		fnFaxAccessCheck(szServerName, pnNumCasesAttempted, pnNumCasesPassed,TRUE,FALSE);
	}
	else	{
		fnFaxAccessCheck(szServerName, pnNumCasesAttempted, pnNumCasesPassed,FALSE,FALSE);
	}
		
	

    // FaxClose()
    fnFaxClose(szServerName, pnNumCasesAttempted, pnNumCasesPassed);

    if ((*pnNumCasesAttempted == nNumCases) && (*pnNumCasesPassed == *pnNumCasesAttempted)) {
        return TRUE;
    }
    else {
        return FALSE;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\faxcapi\legwin32_whis_xml\printapi\printapi.c ===
/*++

Copyright (c) 1997 Microsoft Corporation

Module Name:

  printapi.c

Abstract:

  PrintApi: Fax API Test Dll: Client Print APIs
    1) FaxStartPrintJob()
    2) FaxPrintCoverPage()
    3) FaxSendDocument()
    4) FaxSendDocumentForBroadcast()

Author:

  Steven Kehrli (steveke) 8/28/1998

--*/

/*++

  Whistler Version:

  Lior Shmueli (liors) 23/11/2000

 ++*/

#include <wtypes.h>

#include "dllapi.h"

// g_hHeap is the handle to the heap
HANDLE           g_hHeap = NULL;
// g_ApiInterface is the API_INTERFACE structure
API_INTERFACE    g_ApiInterface;
// fnWriteLogFile is the pointer to the function to write a string to the log file
PFNWRITELOGFILE  fnWriteLogFile = NULL;

// whistler phone number
//LPCTSTR  g_szWhisPhoneNumber;
LPCTSTR		   g_szWhisPhoneNumber=NULL;
BOOL		   g_bRealSend=FALSE;


DWORD
DllEntry(
    HINSTANCE  hInstance,
    DWORD      dwReason,
    LPVOID     pContext
)
/*++

Routine Description:

  DLL entry point

Arguments:

  hInstance - handle to the module
  dwReason - indicates the reason for being called
  pContext - context

Return Value:

  TRUE on success

--*/
{
    return TRUE;
}

VOID WINAPI
FaxAPIDllInit(
    HANDLE            hHeap,
    API_INTERFACE     ApiInterface,
    PFNWRITELOGFILEW  pfnWriteLogFileW,
    PFNWRITELOGFILEA  pfnWriteLogFileA
)
{
    // Set g_hHeap
    g_hHeap = hHeap;
    // Set g_ApiInterface
    g_ApiInterface = ApiInterface;
#ifdef UNICODE
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileW;
#else
    // Set fnWriteLogFile
    fnWriteLogFile = pfnWriteLogFileA;
#endif

    return;
}

VOID
fnFaxStartPrintJob(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxStartPrintJob()

Return Value:

  None

--*/
{
    // FaxPrintInfo is the fax print info
    FAX_PRINT_INFO    FaxPrintInfo;
    // dwFaxId is the fax job id
    DWORD             dwFaxId;
    // FaxContextInfo is the fax context
    FAX_CONTEXT_INFO  FaxContextInfo;
    
	// not used, since all suite can be used on a remote printer...
	// szRemotePrinter is the name of the remote fax printer
    // LPTSTR            szRemotePrinter;
	//

	// flag for fax abortion
	BOOL				bAborted=FALSE;
	// szFaxPrinterName is the name of the fax printer
    LPTSTR            szFaxPrinterName=NULL;
	// szFaxServerName is the name of the fax server, as it should be on the FaxConextInfo struct
    TCHAR            szFaxServerName[MAX_PATH];

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;


	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxStartPrintJob().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxStartPrintJob\">"));

    ZeroMemory(&FaxPrintInfo, sizeof(FAX_PRINT_INFO));
    FaxPrintInfo.SizeOfStruct = sizeof(FAX_PRINT_INFO);
    FaxPrintInfo.RecipientNumber = g_szWhisPhoneNumber;

	fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);
	
	if (szServerName) {

        szFaxPrinterName = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(szServerName) + 7) * sizeof(TCHAR));
          lstrcpy(szFaxPrinterName, TEXT("\\\\"));
          lstrcat(szFaxPrinterName, szServerName);
		  lstrcpy(szFaxServerName,szFaxPrinterName);
		  lstrcat(szFaxPrinterName, TEXT("\\"));
          lstrcat(szFaxPrinterName, TEXT(WHIS_FAX_PRINTER_NAME));
	}
	  else {
		  szFaxPrinterName = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(szServerName) + 7) * sizeof(TCHAR));
		  lstrcpy(szFaxPrinterName, TEXT(WHIS_FAX_PRINTER_NAME));
		  lstrcpy(szFaxServerName,TEXT("Should be NULL"));

	  }

	  fnWriteLogFile(TEXT("WHIS> Fax Printer name is: %s\r\n"), szFaxPrinterName);

      ZeroMemory(&FaxContextInfo, sizeof(FAX_CONTEXT_INFO));
      FaxContextInfo.SizeOfStruct = sizeof(FAX_CONTEXT_INFO);

    // Start a fax
      (*pnNumCasesAttempted)++;
	  dwFuncCasesAtt++;
      fnWriteLogFile(TEXT("Valid Case.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	  fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case\" id=\"%d\">"), *pnNumCasesAttempted);

      if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
          fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxStartPrintJob() failed.  The error code is 0x%08x.  This is an error.  FaxStartPrintJob() should succeed.</result>\r\n"), GetLastError());
	  }
      else {
          if (FaxContextInfo.hDC == NULL) {
              fnWriteLogFile(TEXT("\n\t<result value=\"0\">hDC is NULL.  This is an error.  hDC should not be NULL.</result>\r\n"));
			}

          else if ((szServerName && lstrcmp(FaxContextInfo.ServerName,szFaxServerName) !=0) || (!szServerName && FaxContextInfo.ServerName[0])) {
				  fnWriteLogFile(TEXT("\n\t<result value=\"0\">ServerName: Received: %s, Expected: %s.</result>\r\n"), FaxContextInfo.ServerName, szFaxServerName);
			}
		  else	  {
				  (*pnNumCasesPassed)++;
	  			  dwFuncCasesPass++;
		          fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		  }

		  AbortDoc(FaxContextInfo.hDC);
	  	  DeleteDC(FaxContextInfo.hDC);
	  	  
		}
	  fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

      (*pnNumCasesAttempted)++;
	  dwFuncCasesAtt++;
      fnWriteLogFile(TEXT("Invalid szFaxPrinterName.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	  fnWriteLogFile(TEXT("\n\t<case name=\"Invalid szFaxPrinterName\" id=\"%d\">"), *pnNumCasesAttempted);

      if (g_ApiInterface.FaxStartPrintJob(TEXT("InvalidFaxPrinterName"), &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
          fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxStartPrintJob() returned TRUE.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PRINTER_NAME (0x%08x).</result>\r\n"), ERROR_INVALID_PRINTER_NAME);
           //End this fax
          AbortDoc(FaxContextInfo.hDC);
          DeleteDC(FaxContextInfo.hDC);
      }
      else if (GetLastError() != ERROR_INVALID_PRINTER_NAME) {
          fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PRINTER_NAME (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PRINTER_NAME);
      }
      else {
          (*pnNumCasesPassed)++;
		  dwFuncCasesPass++;
		  fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
      }
	  fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	  (*pnNumCasesAttempted)++;
	  dwFuncCasesAtt++;
      fnWriteLogFile(TEXT("pFaxPrintInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	  fnWriteLogFile(TEXT("\n\t<case name=\"pFaxPrintInfo = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

      if (g_ApiInterface.FaxStartPrintJob(TEXT("Fax"), NULL, &dwFaxId, &FaxContextInfo)) {
          fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxStartPrintJob() returned TRUE.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
           //End this fax
          AbortDoc(FaxContextInfo.hDC);
          DeleteDC(FaxContextInfo.hDC);
      }
      else if (GetLastError() != ERROR_INVALID_PARAMETER) {
          fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
      }
      else {
          (*pnNumCasesPassed)++;
		  dwFuncCasesPass++;
		  fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
      }
	  fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

      (*pnNumCasesAttempted)++;
	  dwFuncCasesAtt++;
      fnWriteLogFile(TEXT("dwFaxId = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	  fnWriteLogFile(TEXT("\n\t<case name=\"dwFaxId = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

      if (g_ApiInterface.FaxStartPrintJob(TEXT("Fax"), &FaxPrintInfo, NULL, &FaxContextInfo)) {
          fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxStartPrintJob() returned TRUE.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
           //End this fax
          AbortDoc(FaxContextInfo.hDC);
          DeleteDC(FaxContextInfo.hDC);
      }
      else if (GetLastError() != ERROR_INVALID_PARAMETER) {
          fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
      }
      else {
          (*pnNumCasesPassed)++;
		  dwFuncCasesPass++;
		  fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
      }
	  fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

      (*pnNumCasesAttempted)++;
	  dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxContextInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxContextInfo = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxStartPrintJob(TEXT("Fax"), &FaxPrintInfo, &dwFaxId, NULL)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxStartPrintJob() returned TRUE.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        // End this fax
        AbortDoc(FaxContextInfo.hDC);
        DeleteDC(FaxContextInfo.hDC);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    FaxPrintInfo.SizeOfStruct = 0;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxPrintInfo->SizeOfStruct = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxPrintInfo->SizeOfStruct = 0\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxStartPrintJob(TEXT("Fax"), &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxStartPrintJob() returned TRUE.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        // End this fax
        AbortDoc(FaxContextInfo.hDC);
        DeleteDC(FaxContextInfo.hDC);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
    FaxPrintInfo.SizeOfStruct = sizeof(FAX_PRINT_INFO);

    FaxPrintInfo.RecipientNumber = NULL;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxPrintInfo->RecipientNumber = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxPrintInfo->RecipientNumber = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxStartPrintJob(TEXT("Fax"), &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxStartPrintJob() returned TRUE.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
        // End this fax
        AbortDoc(FaxContextInfo.hDC);
        DeleteDC(FaxContextInfo.hDC);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
    FaxPrintInfo.RecipientNumber = g_szWhisPhoneNumber;

	fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);

    
	#ifdef FAXAPI_W2K
		FaxPrintInfo.DrProfileName = TEXT("PrintApi");
		FaxPrintInfo.DrEmailAddress = TEXT("PrintApi");
		(*pnNumCasesAttempted)++;
		dwFuncCasesAtt++;
    
		fnWriteLogFile(TEXT("pFaxPrintInfo->DrEmailAddress.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
		fnWriteLogFile(TEXT("\n\t<case name=\"pFaxPrintInfo->DrEmailAddress\" id=\"%d\">"), *pnNumCasesAttempted);

		if (g_ApiInterface.FaxStartPrintJob(TEXT("Fax"), &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxStartPrintJob() returned TRUE.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
			// End this fax
			AbortDoc(FaxContextInfo.hDC);
			DeleteDC(FaxContextInfo.hDC);
		}
		else if (GetLastError() != ERROR_INVALID_PARAMETER) {
			fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxStartPrintJob() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
		}
		else {
			(*pnNumCasesPassed)++;
			dwFuncCasesPass++;
			fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
		}
		fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
		FaxPrintInfo.DrProfileName = NULL;
		FaxPrintInfo.DrEmailAddress = NULL;
	#else
		fnWriteLogFile(TEXT("WHIS> Skipped case in whistler publics: pFaxPrintInfo->DrProfileName and pFaxPrintInfo->DrEmailAddress.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	#endif
	
	HeapFree(g_hHeap, 0, szFaxPrinterName);

    //if (szServerName) {
	//	fnWriteLogFile(TEXT("WHIS> REMOTE CASE(s):\r\n"));
    //  szRemotePrinter = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(szServerName) + 7) * sizeof(TCHAR));
    //    lstrcpy(szRemotePrinter, TEXT("\\\\"));
    //    lstrcat(szRemotePrinter, szServerName);
	//	lstrcat(szRemotePrinter, TEXT("\\"));
    //   lstrcat(szRemotePrinter, TEXT(WHIS_FAX_PRINTER_NAME));

    //   (*pnNumCasesAttempted)++;
    //   fnWriteLogFile(TEXT("Remote Fax Printer. (Printer Name: %s) Test Case: %d.\r\n"),szRemotePrinter, *pnNumCasesAttempted);
    //   if (!g_ApiInterface.FaxStartPrintJob(szRemotePrinter, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    //      fnWriteLogFile(TEXT("FaxStartPrintJob() failed.  The error code is 0x%08x.  This is an error.  FaxStartPrintJob() should succeed.\r\n"), GetLastError());
    //    }
    //    else {
	//		 AbortDoc(FaxContextInfo.hDC);
	//			 DeleteDC(FaxContextInfo.hDC);
	//		 (*pnNumCasesPassed)++;

    //    }
	//
    //    
    //}
fnWriteLogFile(TEXT("$$$ Summery for FaxStartPrintJob, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}

VOID
fnFaxPrintCoverPage(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed,
	BOOL	 bTestLimits
)
/*++

Routine Description:

  FaxPrintCoverPage()

Return Value:

  None

--*/
{
    // FaxPrintInfo is the fax print info
    FAX_PRINT_INFO      FaxPrintInfo;
    // dwFaxId is the fax job id
    DWORD               dwFaxId;
    // FaxContextInfo is the fax context
    FAX_CONTEXT_INFO    FaxContextInfo;
    // CoverPageInfo is the cover page info
    FAX_COVERPAGE_INFO  CoverPageInfo;
    // FaxContextInfohDC is the hDC from the fax context
    HDC                 FaxContextInfohDC;
    // szCoverPageName is the cover page name
    TCHAR               szCoverPageName[MAX_PATH];

	// szFaxPrinterName is the name of the fax printer
    LPTSTR            szFaxPrinterName=NULL;

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

    fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxPrintCoverPage().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxPrintCoverPage\">"));

	

    ZeroMemory(&FaxPrintInfo, sizeof(FAX_PRINT_INFO));
    FaxPrintInfo.SizeOfStruct = sizeof(FAX_PRINT_INFO);


	fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);
	FaxPrintInfo.RecipientNumber = g_szWhisPhoneNumber;
	
    ZeroMemory(&FaxContextInfo, sizeof(FAX_CONTEXT_INFO));
    FaxContextInfo.SizeOfStruct = sizeof(FAX_CONTEXT_INFO);

    ZeroMemory(&CoverPageInfo, sizeof(FAX_COVERPAGE_INFO));
    CoverPageInfo.SizeOfStruct = sizeof(FAX_COVERPAGE_INFO);


    if (szServerName) {
	    szFaxPrinterName = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(szServerName) + 7) * sizeof(TCHAR));
        lstrcpy(szFaxPrinterName, TEXT("\\\\"));
        lstrcat(szFaxPrinterName, szServerName);
		lstrcat(szFaxPrinterName, TEXT("\\"));
        lstrcat(szFaxPrinterName, TEXT(WHIS_FAX_PRINTER_NAME));
	}
	else {
		szFaxPrinterName = HeapAlloc(g_hHeap, HEAP_GENERATE_EXCEPTIONS | HEAP_ZERO_MEMORY, (lstrlen(szServerName) + 7) * sizeof(TCHAR));
		lstrcpy(szFaxPrinterName, TEXT(WHIS_FAX_PRINTER_NAME));
	}

	fnWriteLogFile(TEXT("WHIS> Fax Printer name is: %s\r\n"), szFaxPrinterName);


    // Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

   CoverPageInfo.UseServerCoverPage = TRUE;

    CoverPageInfo.CoverPageName = TEXT("confdent.cov");
	CoverPageInfo.Subject = TEXT("1/10_FPCP:SRV-confdent.cov");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Server .cov). File: confdent.cov  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (Server .cov). File: confdent.cov\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    
	
	// Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    CoverPageInfo.CoverPageName = TEXT("coverpg.lnk");
	CoverPageInfo.Subject = TEXT("2/10_FPCP:SRV-coverpg.lnk");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Server .lnk). File: coverpg.lnk  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (Server .lnk). File: coverpg.lnk\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    

    // Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	
	CoverPageInfo.CoverPageName = TEXT("confdent");
	CoverPageInfo.Subject = TEXT("3/10_FPCP:SRV-confdent");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Server .cov). File: confdent  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (Server .cov). File: confdent\" id=\"%d\">"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    
	// Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    CoverPageInfo.CoverPageName = TEXT("coverpg");
	CoverPageInfo.Subject = TEXT("4/10_FPCP:SRV-coverpg");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Server .lnk). File: coverpg  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (Server .lnk). File: coverpg\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    
	// Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    CoverPageInfo.UseServerCoverPage = FALSE;

    CoverPageInfo.CoverPageName = TEXT("confdent.cov");
	CoverPageInfo.Subject = TEXT("5/10_FPCP:LOC-confdent.cov");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Client .cov). File: confdent.cov  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (Client .cov). File: confdent.cov\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    

    // Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	
	CoverPageInfo.CoverPageName = TEXT("coverpg.lnk");
	CoverPageInfo.Subject = TEXT("6/10_FPCP:LOC-coverpg.lnk");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Client .lnk). File: coverpg.lnk  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (Client .lnk). File: coverpg.lnk\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    

    
	// Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	
	CoverPageInfo.CoverPageName = TEXT("confdent");
	CoverPageInfo.Subject = TEXT("7/10_FPCP:LOC-confdent");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Client .cov). File: confdent  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (Client .cov). File: confdent\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    

    // Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	
	CoverPageInfo.CoverPageName = TEXT("coverpg");
	CoverPageInfo.Subject = TEXT("8/10_FPCP:LOC-coverpg");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Client .lnk). File: coverpg  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (Client .lnk). File: coverpg\" id=\"%d\">"), *pnNumCasesAttempted);
    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    

    
	// Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	
	GetFullPathName(TEXT("confdent.cov"), sizeof(szCoverPageName) / sizeof(TCHAR), szCoverPageName, NULL);
    CoverPageInfo.CoverPageName = szCoverPageName;
	CoverPageInfo.Subject = TEXT("9/10_FPCP:FullPath(confdent.cov)");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Client / Full Path .cov). Path: %s Test Case: %d.\r\n"),szCoverPageName, *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (Client / Full Path .cov). Path: %s\" id=\"%d\">"),szCoverPageName, *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    

    // Start a fax
	if (!g_ApiInterface.FaxStartPrintJob(szFaxPrinterName, &FaxPrintInfo, &dwFaxId, &FaxContextInfo)) {
    	fnWriteLogFile(TEXT("Whis> Test error, could not start print job on fax printer: %s\r\n"), szFaxPrinterName);
		fnWriteLogFile(TEXT("Whis> (more) FaxStartPrintJob failed with error code 0x%08x.\r\n"), GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	
	GetFullPathName(TEXT("coverpg.lnk"), sizeof(szCoverPageName) / sizeof(TCHAR), szCoverPageName, NULL);
    CoverPageInfo.CoverPageName = szCoverPageName;
	CoverPageInfo.Subject = TEXT("10/10_FPCP:FullPath(coverpg.lnk)");
    // Print a cover page
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (Client / Full Path .lnk). Path %s Test Case: %d.\r\n"), szCoverPageName,*pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (Client / Full Path .lnk). Path %s\" id=\"%d\">"), szCoverPageName,*pnNumCasesAttempted);

    if (!g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() failed.  The error code is 0x%08x.  This is an error.  FaxPrintCoverPage() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	if (!EndDoc(FaxContextInfo.hDC))
		{
		fnWriteLogFile(TEXT("WHIS> Test Error: EndDoc failed with error code 0x%08x"),GetLastError());
	}
    

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxContextInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxContextInfo = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxPrintCoverPage(NULL, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() returned TRUE.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pCoverPageInfo = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pCoverPageInfo = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, NULL)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() returned TRUE.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    FaxContextInfo.SizeOfStruct = 0;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxContextInfo->SizeOfStruct = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxContextInfo->SizeOfStruct = 0\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() returned TRUE.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    FaxContextInfo.SizeOfStruct = sizeof(FAX_CONTEXT_INFO);

    FaxContextInfohDC = FaxContextInfo.hDC;
    FaxContextInfo.hDC = NULL;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pFaxContextInfo->hDC = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pFaxContextInfo->hDC = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() returned TRUE.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
    FaxContextInfo.hDC = FaxContextInfohDC;

    CoverPageInfo.SizeOfStruct = 0;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pCoverPageInfo->SizeOfStruct = 0.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pCoverPageInfo->SizeOfStruct = 0\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() returned TRUE.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));
    CoverPageInfo.SizeOfStruct = sizeof(FAX_COVERPAGE_INFO);

    CoverPageInfo.CoverPageName = NULL;
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("pCoverPageInfo->CoverPageName = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"pCoverPageInfo->CoverPageName = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() returned TRUE.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), ERROR_INVALID_PARAMETER);
    }
    else if (GetLastError() != ERROR_INVALID_PARAMETER) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_INVALID_PARAMETER (0x%08x).</result>\r\n"), GetLastError(), ERROR_INVALID_PARAMETER);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));



    CoverPageInfo.CoverPageName = TEXT("InvalidCoverPageName");
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Invalid pCoverPageInfo->CoverPageName.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Invalid pCoverPageInfo->CoverPageName\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxPrintCoverPage(&FaxContextInfo, &CoverPageInfo)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxPrintCoverPage() returned TRUE.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_FILE_NOT_FOUND (0x%08x).</result>\r\n"), ERROR_FILE_NOT_FOUND);
    }
    else if (GetLastError() != ERROR_FILE_NOT_FOUND) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLastError() returned 0x%08x.  This is an error.  FaxPrintCoverPage() should return FALSE and GetLastError() should return ERROR_FILE_NOT_FOUND (0x%08x).</result>\r\n"), GetLastError(), ERROR_FILE_NOT_FOUND);
    }
    else {
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));


    // End this fax
	AbortDoc(FaxContextInfo.hDC);
	DeleteDC(FaxContextInfo.hDC);
	HeapFree(g_hHeap, 0, szFaxPrinterName);
	
fnWriteLogFile(TEXT("$$$ Summery for FaxPrintCoverPage, Attempt:%d, Pass:%d, Fail:%d\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t<summary attempt=\"%d\" pass=\"%d\" fail=\"%d\"></summary>\n"),dwFuncCasesAtt,dwFuncCasesPass,dwFuncCasesAtt-dwFuncCasesPass);
fnWriteLogFile(TEXT("\n\t</function>"));
}

VOID
fnFaxSendDocument(
    LPCTSTR  szServerName,
    PUINT    pnNumCasesAttempted,
    PUINT    pnNumCasesPassed
)
/*++

Routine Description:

  FaxSendDocument()

Return Value:

  None

--*/
{
    // hFaxSvcHandle is the handle to the fax server
    HANDLE              hFaxSvcHandle;
    // pFaxConfig is a pointer to the fax configuration
    PFAX_CONFIGURATION  pFaxConfig;
    // FaxJobParam is the fax job params
    FAX_JOB_PARAM       FaxJobParam;
    // CoverPageInfo is the cover page info
    FAX_COVERPAGE_INFO  CoverPageInfo;
    // dwFaxId is the fax job id
    DWORD               dwFaxId;
    // szCoverPageName is the cover page name
    TCHAR               szCoverPageName[MAX_PATH];

	// internat Attempt/Pass counters (to display EVAL)
	DWORD			dwFuncCasesAtt=0;
	DWORD			dwFuncCasesPass=0;

	fnWriteLogFile(TEXT(  "\n--------------------------"));
    fnWriteLogFile(TEXT("### FaxSendDocument().\r\n"));
	fnWriteLogFile(TEXT("\n\t<function name=\"FaxSendDocument\">"));

    ZeroMemory(&FaxJobParam, sizeof(FAX_JOB_PARAM));
    FaxJobParam.SizeOfStruct = sizeof(FAX_JOB_PARAM);
    FaxJobParam.RecipientNumber = g_szWhisPhoneNumber;

	fnWriteLogFile(TEXT("WHIS> Setting recipient number to %s\r\n"), g_szWhisPhoneNumber);

    ZeroMemory(&CoverPageInfo, sizeof(FAX_COVERPAGE_INFO));
    CoverPageInfo.SizeOfStruct = sizeof(FAX_COVERPAGE_INFO);

    // Connect to the fax server
    if (!g_ApiInterface.FaxConnectFaxServer(szServerName, &hFaxSvcHandle)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not connect to fax server %s, The error code is 0x%08x.\r\n"),szServerName, GetLastError());
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }
	else
	{
		fnWriteLogFile(TEXT("WHIS> Connected to fax server %s. \r\n"),szServerName);
	}

    if (!g_ApiInterface.FaxGetConfiguration(hFaxSvcHandle, &pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not GET configuration, The error code is 0x%08x.\r\n"), GetLastError());
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    pFaxConfig->PauseServerQueue = TRUE;

    if (!g_ApiInterface.FaxSetConfiguration(hFaxSvcHandle, pFaxConfig)) {
		fnWriteLogFile(TEXT("WHIS> ERROR: Can not SET configuration, The error code is 0x%08x.\r\n"), GetLastError());
        g_ApiInterface.FaxFreeBuffer(pFaxConfig);
        // Disconnect from the fax server
        g_ApiInterface.FaxClose(hFaxSvcHandle);
		fnWriteLogFile(TEXT("\n\t<summary attempt=\"-1\" pass=\"-1\" fail=\"-1\"></summary>\n"));
		fnWriteLogFile(TEXT("\n\t</function>"));
        return;
    }

    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (kodak.tif).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (kodak.tif)\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("kodak.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
		if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
		(*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (fax.tif).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (fax.tif)\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (.txt).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (.txt)\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("printapi.txt"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (.doc).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (.doc)\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("printapi.doc"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (.xls).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (.xls)\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("printapi.xls"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

	(*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case (.ppt).  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case (.ppt)\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("printapi.ppt"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));


    CoverPageInfo.UseServerCoverPage = TRUE;

    CoverPageInfo.CoverPageName = TEXT("confdent.cov");
	CoverPageInfo.Subject = TEXT("1/10_FSD:SRV-confdent.cov");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Server .cov). File: confdent.cov  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case with Cover Page (Server .cov). File: confdent.cov\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    CoverPageInfo.CoverPageName = TEXT("coverpg.lnk");
	CoverPageInfo.Subject = TEXT("2/10_FSD:SRV-coverpg.lnk");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Server .lnk). File coverpg.lnk  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case with Cover Page (Server .lnk). File coverpg.lnk\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    CoverPageInfo.CoverPageName = TEXT("confdent");
	CoverPageInfo.Subject = TEXT("3/10_FSD:SRV-confdent");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Server .cov). File: confdent  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case with Cover Page (Server .cov). File: confdent\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    CoverPageInfo.CoverPageName = TEXT("coverpg");
	CoverPageInfo.Subject = TEXT("4/10_FSD:SRV-coverpg");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Server .lnk). File: coverpg  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case with Cover Page (Server .lnk). File: coverpg\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    CoverPageInfo.UseServerCoverPage = FALSE;

    CoverPageInfo.CoverPageName = TEXT("confdent.cov");
	CoverPageInfo.Subject = TEXT("5/10_FSD:LOC-confdent.cov");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Client .cov). File: confdent.cov  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case with Cover Page (Client .cov). File: confdent.cov\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    CoverPageInfo.CoverPageName = TEXT("coverpg.lnk");
	CoverPageInfo.Subject = TEXT("6/10_FSD:LOC-coverpg.lnk");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Client .lnk). File: coverpg.lnk  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case with Cover Page (Client .lnk). File: coverpg.lnk\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    CoverPageInfo.CoverPageName = TEXT("confdent");
	CoverPageInfo.Subject = TEXT("7/10_FSD:LOC-confdent");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Client .cov). File: confdent  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case with Cover Page (Client .cov). File: confdent\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    CoverPageInfo.CoverPageName = TEXT("coverpg");
	CoverPageInfo.Subject = TEXT("8/10_FSD:LOC-coverpg");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Client .lnk). File: coverpg  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case with Cover Page (Client .lnk). File: coverpg\" id=\"%d\">"), *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    GetFullPathName(TEXT("confdent.cov"), sizeof(szCoverPageName) / sizeof(TCHAR), szCoverPageName, NULL);


    CoverPageInfo.CoverPageName = szCoverPageName;
	CoverPageInfo.Subject = TEXT("9/10_FSD:FullPath(confdent.cov)");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Client / Full Path .cov). Path: %s Test Case: %d.\r\n"),szCoverPageName, *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case with Cover Page (Client / Full Path .cov). Path: %s\" id=\"%d\">"),szCoverPageName, *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    GetFullPathName(TEXT("coverpg.lnk"), sizeof(szCoverPageName) / sizeof(TCHAR), szCoverPageName, NULL);
    CoverPageInfo.CoverPageName = szCoverPageName;
	CoverPageInfo.Subject = TEXT("10/10_FSD:FullPath(confdent.lnk)");
    // Send a document
    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("Valid Case with Cover Page (Client / Full Path .lnk).  Path: %s Test Case: %d.\r\n"), szCoverPageName, *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"Valid Case with Cover Page (Client / Full Path .lnk).  Path: %s\" id=\"%d\">"), szCoverPageName, *pnNumCasesAttempted);

    if (!g_ApiInterface.FaxSendDocument(hFaxSvcHandle, TEXT("fax.tif"), &FaxJobParam, &CoverPageInfo, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() failed.  The error code is 0x%08x.  This is an error.  FaxSendDocument() should succeed.</result>\r\n"), GetLastError());
    }
    else {
        if (!g_bRealSend)	{
							g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
		}
        (*pnNumCasesPassed)++;
		dwFuncCasesPass++;
		fnWriteLogFile(TEXT("\n\t<result value=\"1\"></result>"));
    }
	fnWriteLogFile(TEXT("\n\t</case>"));fnWriteLogFile(TEXT("\n\n"));

    (*pnNumCasesAttempted)++;
	dwFuncCasesAtt++;
    fnWriteLogFile(TEXT("hFaxSvcHandle = NULL.  Test Case: %d.\r\n"), *pnNumCasesAttempted);
	fnWriteLogFile(TEXT("\n\t<case name=\"hFaxSvcHandle = NULL\" id=\"%d\">"), *pnNumCasesAttempted);

    if (g_ApiInterface.FaxSendDocument(NULL, TEXT("fax.tif"), &FaxJobParam, NULL, &dwFaxId)) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">FaxSendDocument() returned TRUE.  This is an error.  FaxSendDocument() should return FALSE and GetLastError() should return ERROR_INVALID_HANDLE (0x%08x).</result>\r\n"), ERROR_INVALID_HANDLE);
        g_ApiInterface.FaxAbort(hFaxSvcHandle, dwFaxId);
    }
    else if (GetLastError() != ERROR_INVALID_HANDLE) {
        fnWriteLogFile(TEXT("\n\t<result value=\"0\">GetLa